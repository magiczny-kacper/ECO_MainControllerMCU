
Suncontroller CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c378  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  0800c518  0800c518  0001c518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0b0  0800d0b0  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0b0  0800d0b0  0001d0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0b8  0800d0b8  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0b8  0800d0b8  0001d0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0bc  0800d0bc  0001d0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800d0c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000343c  200000d0  0800d190  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000350c  0800d190  0002350c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000400e5  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007684  00000000  00000000  000601e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c23d  00000000  00000000  00067869  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002558  00000000  00000000  00083aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000025a0  00000000  00000000  00086000  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000a33f  00000000  00000000  000885a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000221aa  00000000  00000000  000928df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ac2dd  00000000  00000000  000b4a89  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00160d66  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007094  00000000  00000000  00160de4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c500 	.word	0x0800c500

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	0800c500 	.word	0x0800c500

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <xCLI_GetSystemStatus>:
	(void) xWriteBufferLen;

	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	return pdFALSE;
}
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	4770      	bx	lr

08000e10 <xCLI_EreaseEE>:
BaseType_t xCLI_EreaseEE( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8000e10:	b510      	push	{r4, lr}
 8000e12:	4604      	mov	r4, r0
	EE_StatusTypeDef retval = EE_Erease();
 8000e14:	f000 fb96 	bl	8001544 <EE_Erease>
	if(retval == EE_OK){
 8000e18:	b128      	cbz	r0, 8000e26 <xCLI_EreaseEE+0x16>
		sprintf(pcWriteBuffer, "Nie wyczyszczono.\r\n");
 8000e1a:	4905      	ldr	r1, [pc, #20]	; (8000e30 <xCLI_EreaseEE+0x20>)
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f00a feef 	bl	800bc00 <sprintf_>
}
 8000e22:	2000      	movs	r0, #0
 8000e24:	bd10      	pop	{r4, pc}
		sprintf(pcWriteBuffer, "Wyczyszczono.\r\n");
 8000e26:	4903      	ldr	r1, [pc, #12]	; (8000e34 <xCLI_EreaseEE+0x24>)
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f00a fee9 	bl	800bc00 <sprintf_>
 8000e2e:	e7f8      	b.n	8000e22 <xCLI_EreaseEE+0x12>
 8000e30:	0800c754 	.word	0x0800c754
 8000e34:	0800c744 	.word	0x0800c744

08000e38 <xCLI_ShowConfig>:
BaseType_t xCLI_ShowConfig( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8000e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e3c:	b095      	sub	sp, #84	; 0x54
 8000e3e:	9011      	str	r0, [sp, #68]	; 0x44
	switch (step){
 8000e40:	4b6e      	ldr	r3, [pc, #440]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b05      	cmp	r3, #5
 8000e46:	f200 80d0 	bhi.w	8000fea <xCLI_ShowConfig+0x1b2>
 8000e4a:	e8df f003 	tbb	[pc, r3]
 8000e4e:	3303      	.short	0x3303
 8000e50:	c1ac997c 	.word	0xc1ac997c
			configStatus = Config_GetConfig(&config);
 8000e54:	486a      	ldr	r0, [pc, #424]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000e56:	f000 fa13 	bl	8001280 <Config_GetConfig>
			switch(configStatus){
 8000e5a:	3005      	adds	r0, #5
 8000e5c:	2805      	cmp	r0, #5
 8000e5e:	d824      	bhi.n	8000eaa <xCLI_ShowConfig+0x72>
 8000e60:	e8df f000 	tbb	[pc, r0]
 8000e64:	23140f03 	.word	0x23140f03
 8000e68:	1e19      	.short	0x1e19
					sprintf(pcWriteBuffer, "No configuration in memory.\r\n");
 8000e6a:	4966      	ldr	r1, [pc, #408]	; (8001004 <xCLI_ShowConfig+0x1cc>)
 8000e6c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e6e:	f00a fec7 	bl	800bc00 <sprintf_>
			step++;
 8000e72:	4a62      	ldr	r2, [pc, #392]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000e74:	7813      	ldrb	r3, [r2, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000e7a:	2001      	movs	r0, #1
}
 8000e7c:	b015      	add	sp, #84	; 0x54
 8000e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					sprintf(pcWriteBuffer, "Configuration CRC error.\r\n");
 8000e82:	4961      	ldr	r1, [pc, #388]	; (8001008 <xCLI_ShowConfig+0x1d0>)
 8000e84:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e86:	f00a febb 	bl	800bc00 <sprintf_>
					break;
 8000e8a:	e7f2      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Cannot access I2C bus.\r\n");
 8000e8c:	495f      	ldr	r1, [pc, #380]	; (800100c <xCLI_ShowConfig+0x1d4>)
 8000e8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e90:	f00a feb6 	bl	800bc00 <sprintf_>
					break;
 8000e94:	e7ed      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Memory access timeout.\r\n");
 8000e96:	495e      	ldr	r1, [pc, #376]	; (8001010 <xCLI_ShowConfig+0x1d8>)
 8000e98:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e9a:	f00a feb1 	bl	800bc00 <sprintf_>
					break;
 8000e9e:	e7e8      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Configuration loaded.\r\n");
 8000ea0:	495c      	ldr	r1, [pc, #368]	; (8001014 <xCLI_ShowConfig+0x1dc>)
 8000ea2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ea4:	f00a feac 	bl	800bc00 <sprintf_>
					break;
 8000ea8:	e7e3      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Unexpected error.\r\n");
 8000eaa:	495b      	ldr	r1, [pc, #364]	; (8001018 <xCLI_ShowConfig+0x1e0>)
 8000eac:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000eae:	f00a fea7 	bl	800bc00 <sprintf_>
 					break;
 8000eb2:	e7de      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					config.EthernetConfig.ipAddress[0], config.EthernetConfig.ipAddress[1],
 8000eb4:	4b52      	ldr	r3, [pc, #328]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000eb6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000eba:	9212      	str	r2, [sp, #72]	; 0x48
 8000ebc:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8000ec0:	9113      	str	r1, [sp, #76]	; 0x4c
					config.EthernetConfig.ipAddress[2], config.EthernetConfig.ipAddress[3],
 8000ec2:	f893 4022 	ldrb.w	r4, [r3, #34]	; 0x22
 8000ec6:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8000eca:	9001      	str	r0, [sp, #4]
					config.EthernetConfig.gatewayAddress[0], config.EthernetConfig.gatewayAddress[1],
 8000ecc:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8000ed0:	9002      	str	r0, [sp, #8]
 8000ed2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
					config.EthernetConfig.gatewayAddress[2], config.EthernetConfig.gatewayAddress[3],
 8000ed6:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8000eda:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
					config.EthernetConfig.subnetMask[0], config.EthernetConfig.subnetMask[1],
 8000ede:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 8000ee2:	f893 6025 	ldrb.w	r6, [r3, #37]	; 0x25
					config.EthernetConfig.subnetMask[2], config.EthernetConfig.subnetMask[3],
 8000ee6:	f893 7026 	ldrb.w	r7, [r3, #38]	; 0x26
 8000eea:	f893 c027 	ldrb.w	ip, [r3, #39]	; 0x27
					config.EthernetConfig.macAddress[0], config.EthernetConfig.macAddress[1],
 8000eee:	f893 e02c 	ldrb.w	lr, [r3, #44]	; 0x2c
 8000ef2:	f893 802d 	ldrb.w	r8, [r3, #45]	; 0x2d
					config.EthernetConfig.macAddress[2], config.EthernetConfig.macAddress[3],
 8000ef6:	f893 902e 	ldrb.w	r9, [r3, #46]	; 0x2e
 8000efa:	f893 a02f 	ldrb.w	sl, [r3, #47]	; 0x2f
					config.EthernetConfig.macAddress[4], config.EthernetConfig.macAddress[5]);
 8000efe:	f893 b030 	ldrb.w	fp, [r3, #48]	; 0x30
 8000f02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
			sprintf(pcWriteBuffer, "Ethernet configuration:\r\n"
 8000f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f08:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8000f0c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8000f10:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8000f14:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8000f18:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8000f1c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8000f20:	9708      	str	r7, [sp, #32]
 8000f22:	9607      	str	r6, [sp, #28]
 8000f24:	9506      	str	r5, [sp, #24]
 8000f26:	9005      	str	r0, [sp, #20]
 8000f28:	9104      	str	r1, [sp, #16]
 8000f2a:	9203      	str	r2, [sp, #12]
 8000f2c:	9400      	str	r4, [sp, #0]
 8000f2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000f30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000f32:	493a      	ldr	r1, [pc, #232]	; (800101c <xCLI_ShowConfig+0x1e4>)
 8000f34:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f36:	f00a fe63 	bl	800bc00 <sprintf_>
			step++;
 8000f3a:	4a30      	ldr	r2, [pc, #192]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000f3c:	7813      	ldrb	r3, [r2, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000f42:	2001      	movs	r0, #1
			break;
 8000f44:	e79a      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					(uint32_t)config.RegulationConfig.CWU_heater_power,
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000f48:	ed93 7a00 	vldr	s14, [r3]
					(uint32_t)config.RegulationConfig.CO_heater_power,
 8000f4c:	edd3 6a01 	vldr	s13, [r3, #4]
					(uint32_t)config.RegulationConfig.net_max_power);
 8000f50:	edd3 7a02 	vldr	s15, [r3, #8]
			sprintf(pcWriteBuffer, "Regulation configuration:\r\n"
 8000f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f58:	edcd 7a00 	vstr	s15, [sp]
 8000f5c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8000f60:	ee17 3a90 	vmov	r3, s15
 8000f64:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000f68:	ee17 2a90 	vmov	r2, s15
 8000f6c:	492c      	ldr	r1, [pc, #176]	; (8001020 <xCLI_ShowConfig+0x1e8>)
 8000f6e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f70:	f00a fe46 	bl	800bc00 <sprintf_>
			step++;
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000f76:	7813      	ldrb	r3, [r2, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000f7c:	2001      	movs	r0, #1
			break;
 8000f7e:	e77d      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					config.RegulationConfig.counter_address,
 8000f80:	491f      	ldr	r1, [pc, #124]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000f82:	7b0a      	ldrb	r2, [r1, #12]
					config.RegulationConfig.temperature_address,
 8000f84:	7b4b      	ldrb	r3, [r1, #13]
					config.RegulationConfig.acumulated_power_coeff,
 8000f86:	f991 000e 	ldrsb.w	r0, [r1, #14]
					config.RegulationConfig.heater_power_coeff);
 8000f8a:	f991 100f 	ldrsb.w	r1, [r1, #15]
			sprintf(pcWriteBuffer, "    Counter address: %d\r\n"
 8000f8e:	9101      	str	r1, [sp, #4]
 8000f90:	9000      	str	r0, [sp, #0]
 8000f92:	4924      	ldr	r1, [pc, #144]	; (8001024 <xCLI_ShowConfig+0x1ec>)
 8000f94:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f96:	f00a fe33 	bl	800bc00 <sprintf_>
			step++;
 8000f9a:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000f9c:	7813      	ldrb	r3, [r2, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fa2:	2001      	movs	r0, #1
			break;
 8000fa4:	e76a      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					config.RegulationConfig.CO_hi_temp,
 8000fa6:	4916      	ldr	r1, [pc, #88]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000fa8:	f991 2010 	ldrsb.w	r2, [r1, #16]
					config.RegulationConfig.CO_lo_temp,
 8000fac:	f991 3011 	ldrsb.w	r3, [r1, #17]
					config.RegulationConfig.CWU_hi_temp,
 8000fb0:	f991 0012 	ldrsb.w	r0, [r1, #18]
					config.RegulationConfig.CWU_lo_temp);
 8000fb4:	f991 1013 	ldrsb.w	r1, [r1, #19]
			sprintf(pcWriteBuffer, "    CO high temperature: %d C\r\n"
 8000fb8:	9101      	str	r1, [sp, #4]
 8000fba:	9000      	str	r0, [sp, #0]
 8000fbc:	491a      	ldr	r1, [pc, #104]	; (8001028 <xCLI_ShowConfig+0x1f0>)
 8000fbe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000fc0:	f00a fe1e 	bl	800bc00 <sprintf_>
			step++;
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000fc6:	7813      	ldrb	r3, [r2, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fcc:	2001      	movs	r0, #1
			break;
 8000fce:	e755      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					"CRC: 0x%08x\r\n", config.dummy, config.crc);
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <xCLI_ShowConfig+0x1c8>)
			sprintf(pcWriteBuffer, "Magic word: 0x%04x\r\n"
 8000fd2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000fd4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8000fd6:	4915      	ldr	r1, [pc, #84]	; (800102c <xCLI_ShowConfig+0x1f4>)
 8000fd8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000fda:	f00a fe11 	bl	800bc00 <sprintf_>
			step++;
 8000fde:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000fe0:	7813      	ldrb	r3, [r2, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fe6:	2001      	movs	r0, #1
			break;
 8000fe8:	e748      	b.n	8000e7c <xCLI_ShowConfig+0x44>
			step = 0;
 8000fea:	2500      	movs	r5, #0
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000fee:	701d      	strb	r5, [r3, #0]
			sprintf(pcWriteBuffer, "\r\n");
 8000ff0:	490f      	ldr	r1, [pc, #60]	; (8001030 <xCLI_ShowConfig+0x1f8>)
 8000ff2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ff4:	f00a fe04 	bl	800bc00 <sprintf_>
			retVal = pdFALSE;
 8000ff8:	4628      	mov	r0, r5
	return retVal;
 8000ffa:	e73f      	b.n	8000e7c <xCLI_ShowConfig+0x44>
 8000ffc:	20000124 	.word	0x20000124
 8001000:	200000ec 	.word	0x200000ec
 8001004:	0800c874 	.word	0x0800c874
 8001008:	0800c894 	.word	0x0800c894
 800100c:	0800c8b0 	.word	0x0800c8b0
 8001010:	0800c8cc 	.word	0x0800c8cc
 8001014:	0800c8e8 	.word	0x0800c8e8
 8001018:	0800c900 	.word	0x0800c900
 800101c:	0800c914 	.word	0x0800c914
 8001020:	0800c99c 	.word	0x0800c99c
 8001024:	0800ca0c 	.word	0x0800ca0c
 8001028:	0800ca90 	.word	0x0800ca90
 800102c:	0800cb10 	.word	0x0800cb10
 8001030:	0800c6c8 	.word	0x0800c6c8

08001034 <xCLI_GetRtosStats>:

BaseType_t xCLI_GetRtosStats( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8001034:	b508      	push	{r3, lr}
	(void) pcCommandString;
	(void) xWriteBufferLen;
	vTaskGetRunTimeStats(pcWriteBuffer);
 8001036:	f009 f9dd 	bl	800a3f4 <vTaskGetRunTimeStats>
	return pdFALSE;
}
 800103a:	2000      	movs	r0, #0
 800103c:	bd08      	pop	{r3, pc}
	...

08001040 <xCLI_GetCommStats>:

BaseType_t xCLI_GetCommStats( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	b085      	sub	sp, #20
 8001044:	4605      	mov	r5, r0
	BaseType_t retVal = pdTRUE;
	static uint8_t step = 0;

	uint8_t ipArr[4];

	switch(step){
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <xCLI_GetCommStats+0xd8>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b03      	cmp	r3, #3
 800104c:	d85c      	bhi.n	8001108 <xCLI_GetCommStats+0xc8>
 800104e:	e8df f003 	tbb	[pc, r3]
 8001052:	1a02      	.short	0x1a02
 8001054:	4231      	.short	0x4231

		case 0:
			RuntimeStats_TelnetGetCurIP(ipArr);
 8001056:	a803      	add	r0, sp, #12
 8001058:	f001 fb2e 	bl	80026b8 <RuntimeStats_TelnetGetCurIP>
			sprintf(pcWriteBuffer, "Telnet statistics:\r\n"
					"    Current IP connected: %d.%d.%d.%d\r\n",
					ipArr[0], ipArr[1], ipArr[2], ipArr[3]);
 800105c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001060:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001064:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8001068:	f89d 000f 	ldrb.w	r0, [sp, #15]
			sprintf(pcWriteBuffer, "Telnet statistics:\r\n"
 800106c:	9001      	str	r0, [sp, #4]
 800106e:	9100      	str	r1, [sp, #0]
 8001070:	492a      	ldr	r1, [pc, #168]	; (800111c <xCLI_GetCommStats+0xdc>)
 8001072:	4628      	mov	r0, r5
 8001074:	f00a fdc4 	bl	800bc00 <sprintf_>
			step++;
 8001078:	4a27      	ldr	r2, [pc, #156]	; (8001118 <xCLI_GetCommStats+0xd8>)
 800107a:	7813      	ldrb	r3, [r2, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8001080:	2001      	movs	r0, #1
			sprintf(pcWriteBuffer, "\r\n");
			retVal = pdFALSE;
			break;
	}
	return retVal;
}
 8001082:	b005      	add	sp, #20
 8001084:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RuntimeStats_TelnetGetLastIP(ipArr);
 8001086:	a803      	add	r0, sp, #12
 8001088:	f001 fb1c 	bl	80026c4 <RuntimeStats_TelnetGetLastIP>
					ipArr[0], ipArr[1], ipArr[2], ipArr[3]);
 800108c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001090:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001094:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8001098:	f89d 000f 	ldrb.w	r0, [sp, #15]
			sprintf(pcWriteBuffer, "    Last IP connected: %d.%d.%d.%d\r\n",
 800109c:	9001      	str	r0, [sp, #4]
 800109e:	9100      	str	r1, [sp, #0]
 80010a0:	491f      	ldr	r1, [pc, #124]	; (8001120 <xCLI_GetCommStats+0xe0>)
 80010a2:	4628      	mov	r0, r5
 80010a4:	f00a fdac 	bl	800bc00 <sprintf_>
			step++;
 80010a8:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <xCLI_GetCommStats+0xd8>)
 80010aa:	7813      	ldrb	r3, [r2, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 80010b0:	2001      	movs	r0, #1
			break;
 80010b2:	e7e6      	b.n	8001082 <xCLI_GetCommStats+0x42>
			sprintf(pcWriteBuffer, "    TX count: %d\r\n    RX count: %d\r\n",
 80010b4:	f001 fafa 	bl	80026ac <RuntimeStats_TelnetGetTxCnt>
 80010b8:	4604      	mov	r4, r0
 80010ba:	f001 faf1 	bl	80026a0 <RuntimeStats_TelnetGetRxCnt>
 80010be:	4603      	mov	r3, r0
 80010c0:	4622      	mov	r2, r4
 80010c2:	4918      	ldr	r1, [pc, #96]	; (8001124 <xCLI_GetCommStats+0xe4>)
 80010c4:	4628      	mov	r0, r5
 80010c6:	f00a fd9b 	bl	800bc00 <sprintf_>
			step++;
 80010ca:	4a13      	ldr	r2, [pc, #76]	; (8001118 <xCLI_GetCommStats+0xd8>)
 80010cc:	7813      	ldrb	r3, [r2, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 80010d2:	2001      	movs	r0, #1
			break;
 80010d4:	e7d5      	b.n	8001082 <xCLI_GetCommStats+0x42>
			sprintf(pcWriteBuffer, "Modbus statistics:\r\n"
 80010d6:	f001 fb1b 	bl	8002710 <RuntimeStats_ModbusMasterRqSendGet>
 80010da:	4604      	mov	r4, r0
 80010dc:	f001 fb24 	bl	8002728 <RuntimeStats_ModbusMasterRespOkGet>
 80010e0:	4606      	mov	r6, r0
 80010e2:	f001 fb1b 	bl	800271c <RuntimeStats_ModbusMasterNoRespGet>
 80010e6:	4607      	mov	r7, r0
 80010e8:	f001 fb24 	bl	8002734 <RuntimeStats_ModbusMasterWrongRespGet>
 80010ec:	9001      	str	r0, [sp, #4]
 80010ee:	9700      	str	r7, [sp, #0]
 80010f0:	4633      	mov	r3, r6
 80010f2:	4622      	mov	r2, r4
 80010f4:	490c      	ldr	r1, [pc, #48]	; (8001128 <xCLI_GetCommStats+0xe8>)
 80010f6:	4628      	mov	r0, r5
 80010f8:	f00a fd82 	bl	800bc00 <sprintf_>
			step++;
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <xCLI_GetCommStats+0xd8>)
 80010fe:	7813      	ldrb	r3, [r2, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8001104:	2001      	movs	r0, #1
			break;
 8001106:	e7bc      	b.n	8001082 <xCLI_GetCommStats+0x42>
			step = 0;
 8001108:	2400      	movs	r4, #0
 800110a:	4b03      	ldr	r3, [pc, #12]	; (8001118 <xCLI_GetCommStats+0xd8>)
 800110c:	701c      	strb	r4, [r3, #0]
			sprintf(pcWriteBuffer, "\r\n");
 800110e:	4907      	ldr	r1, [pc, #28]	; (800112c <xCLI_GetCommStats+0xec>)
 8001110:	f00a fd76 	bl	800bc00 <sprintf_>
			retVal = pdFALSE;
 8001114:	4620      	mov	r0, r4
	return retVal;
 8001116:	e7b4      	b.n	8001082 <xCLI_GetCommStats+0x42>
 8001118:	20000125 	.word	0x20000125
 800111c:	0800c768 	.word	0x0800c768
 8001120:	0800c7a4 	.word	0x0800c7a4
 8001124:	0800c7cc 	.word	0x0800c7cc
 8001128:	0800c7f4 	.word	0x0800c7f4
 800112c:	0800c6c8 	.word	0x0800c6c8

08001130 <CLI_Init>:
void CLI_Init (void){
 8001130:	b508      	push	{r3, lr}
	FreeRTOS_CLIRegisterCommand(&xEreaseEECmd);
 8001132:	4808      	ldr	r0, [pc, #32]	; (8001154 <CLI_Init+0x24>)
 8001134:	f00a f8d6 	bl	800b2e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xShowConfigCmd);
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <CLI_Init+0x28>)
 800113a:	f00a f8d3 	bl	800b2e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetSysStatusCmd);
 800113e:	4807      	ldr	r0, [pc, #28]	; (800115c <CLI_Init+0x2c>)
 8001140:	f00a f8d0 	bl	800b2e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetRtosStatsCmd);
 8001144:	4806      	ldr	r0, [pc, #24]	; (8001160 <CLI_Init+0x30>)
 8001146:	f00a f8cd 	bl	800b2e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetCommStatsCmd);
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <CLI_Init+0x34>)
 800114c:	f00a f8ca 	bl	800b2e4 <FreeRTOS_CLIRegisterCommand>
}
 8001150:	bd08      	pop	{r3, pc}
 8001152:	bf00      	nop
 8001154:	0800cb34 	.word	0x0800cb34
 8001158:	0800cb74 	.word	0x0800cb74
 800115c:	0800cb64 	.word	0x0800cb64
 8001160:	0800cb54 	.word	0x0800cb54
 8001164:	0800cb44 	.word	0x0800cb44

08001168 <Config_CalculateCRC>:
		configuration.dummy = MAGIC_WORD;
		configuration.crc = Config_CalculateCRC();
	}
}

static uint32_t Config_CalculateCRC (void){
 8001168:	b508      	push	{r3, lr}
	return HAL_CRC_Calculate(&hcrc, (uint32_t*)&configuration, (CONFIG_BYTES_LEN - 2)/4);
 800116a:	220d      	movs	r2, #13
 800116c:	4902      	ldr	r1, [pc, #8]	; (8001178 <Config_CalculateCRC+0x10>)
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <Config_CalculateCRC+0x14>)
 8001170:	f004 fad1 	bl	8005716 <HAL_CRC_Calculate>
}
 8001174:	bd08      	pop	{r3, pc}
 8001176:	bf00      	nop
 8001178:	20000128 	.word	0x20000128
 800117c:	20003140 	.word	0x20003140

08001180 <Config_CheckData>:

static CONFStatus_t Config_CheckData (void){
 8001180:	b510      	push	{r4, lr}
	CONFStatus_t retval;
	uint32_t readCRC, actualCRC;

	readCRC = configuration.crc;
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <Config_CheckData+0x18>)
 8001184:	6b5c      	ldr	r4, [r3, #52]	; 0x34
	actualCRC = Config_CalculateCRC();
 8001186:	f7ff ffef 	bl	8001168 <Config_CalculateCRC>

	if(readCRC != actualCRC){
 800118a:	4284      	cmp	r4, r0
 800118c:	d101      	bne.n	8001192 <Config_CheckData+0x12>
		if(configuration.dummy != MAGIC_WORD){
			retval = CONF_ERR_NOCONF;
		}
		retval = CONF_ERR_CRC;
	}else{
		retval = CONF_OK;
 800118e:	2000      	movs	r0, #0
	}
	return retval;
}
 8001190:	bd10      	pop	{r4, pc}
		retval = CONF_ERR_CRC;
 8001192:	f06f 0003 	mvn.w	r0, #3
 8001196:	e7fb      	b.n	8001190 <Config_CheckData+0x10>
 8001198:	20000128 	.word	0x20000128

0800119c <Config_ChangeValue>:
	if(value != NULL && param < PARAM_NUMS){
 800119c:	2900      	cmp	r1, #0
 800119e:	d061      	beq.n	8001264 <Config_ChangeValue+0xc8>
 80011a0:	2811      	cmp	r0, #17
 80011a2:	d85f      	bhi.n	8001264 <Config_ChangeValue+0xc8>
void Config_ChangeValue(uint32_t param, void* value){
 80011a4:	b510      	push	{r4, lr}
		switch(param){
 80011a6:	2811      	cmp	r0, #17
 80011a8:	d80d      	bhi.n	80011c6 <Config_ChangeValue+0x2a>
 80011aa:	e8df f000 	tbb	[pc, r0]
 80011ae:	1409      	.short	0x1409
 80011b0:	24201c18 	.word	0x24201c18
 80011b4:	34302c28 	.word	0x34302c28
 80011b8:	44403c38 	.word	0x44403c38
 80011bc:	56514c48 	.word	0x56514c48
				memcpy(&configuration.RegulationConfig.CWU_heater_power, value, 4);
 80011c0:	680a      	ldr	r2, [r1, #0]
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <Config_ChangeValue+0xcc>)
 80011c4:	601a      	str	r2, [r3, #0]
		configuration.dummy = MAGIC_WORD;
 80011c6:	4c28      	ldr	r4, [pc, #160]	; (8001268 <Config_ChangeValue+0xcc>)
 80011c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80011cc:	8663      	strh	r3, [r4, #50]	; 0x32
		configuration.crc = Config_CalculateCRC();
 80011ce:	f7ff ffcb 	bl	8001168 <Config_CalculateCRC>
 80011d2:	6360      	str	r0, [r4, #52]	; 0x34
}
 80011d4:	bd10      	pop	{r4, pc}
				memcpy(&configuration.RegulationConfig.CO_heater_power, value, 4);
 80011d6:	680a      	ldr	r2, [r1, #0]
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <Config_ChangeValue+0xcc>)
 80011da:	605a      	str	r2, [r3, #4]
				break;
 80011dc:	e7f3      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.net_max_power, value, 4);
 80011de:	680a      	ldr	r2, [r1, #0]
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <Config_ChangeValue+0xcc>)
 80011e2:	609a      	str	r2, [r3, #8]
				break;
 80011e4:	e7ef      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.counter_address, value, 1);
 80011e6:	780a      	ldrb	r2, [r1, #0]
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <Config_ChangeValue+0xcc>)
 80011ea:	731a      	strb	r2, [r3, #12]
				break;
 80011ec:	e7eb      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.temperature_address, value, 1);
 80011ee:	780a      	ldrb	r2, [r1, #0]
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <Config_ChangeValue+0xcc>)
 80011f2:	735a      	strb	r2, [r3, #13]
				break;
 80011f4:	e7e7      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.acumulated_power_coeff, value, 1);
 80011f6:	780a      	ldrb	r2, [r1, #0]
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <Config_ChangeValue+0xcc>)
 80011fa:	739a      	strb	r2, [r3, #14]
				break;
 80011fc:	e7e3      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.heater_power_coeff, value, 1);
 80011fe:	780a      	ldrb	r2, [r1, #0]
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <Config_ChangeValue+0xcc>)
 8001202:	73da      	strb	r2, [r3, #15]
				break;
 8001204:	e7df      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CO_hi_temp, value, 1);
 8001206:	780a      	ldrb	r2, [r1, #0]
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <Config_ChangeValue+0xcc>)
 800120a:	741a      	strb	r2, [r3, #16]
				break;
 800120c:	e7db      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CO_lo_temp, value, 1);
 800120e:	780a      	ldrb	r2, [r1, #0]
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <Config_ChangeValue+0xcc>)
 8001212:	745a      	strb	r2, [r3, #17]
				break;
 8001214:	e7d7      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CWU_hi_temp, value, 1);
 8001216:	780a      	ldrb	r2, [r1, #0]
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <Config_ChangeValue+0xcc>)
 800121a:	749a      	strb	r2, [r3, #18]
				break;
 800121c:	e7d3      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CWU_lo_temp, value, 1);
 800121e:	780a      	ldrb	r2, [r1, #0]
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <Config_ChangeValue+0xcc>)
 8001222:	74da      	strb	r2, [r3, #19]
				break;
 8001224:	e7cf      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.exported_power, value, 4);
 8001226:	680a      	ldr	r2, [r1, #0]
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <Config_ChangeValue+0xcc>)
 800122a:	615a      	str	r2, [r3, #20]
				break;
 800122c:	e7cb      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.imported_power, value, 4);
 800122e:	680a      	ldr	r2, [r1, #0]
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <Config_ChangeValue+0xcc>)
 8001232:	619a      	str	r2, [r3, #24]
				break;
 8001234:	e7c7      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.acumulated_power, value, 4);
 8001236:	680a      	ldr	r2, [r1, #0]
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <Config_ChangeValue+0xcc>)
 800123a:	61da      	str	r2, [r3, #28]
				break;
 800123c:	e7c3      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.ipAddress[0], value, 4);
 800123e:	680a      	ldr	r2, [r1, #0]
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <Config_ChangeValue+0xcc>)
 8001242:	621a      	str	r2, [r3, #32]
				break;
 8001244:	e7bf      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.subnetMask[0], value, 1);
 8001246:	780a      	ldrb	r2, [r1, #0]
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <Config_ChangeValue+0xcc>)
 800124a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				break;
 800124e:	e7ba      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.gatewayAddress[0], value, 1);
 8001250:	780a      	ldrb	r2, [r1, #0]
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <Config_ChangeValue+0xcc>)
 8001254:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				break;
 8001258:	e7b5      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.macAddress[0], value, 1);
 800125a:	780a      	ldrb	r2, [r1, #0]
 800125c:	4b02      	ldr	r3, [pc, #8]	; (8001268 <Config_ChangeValue+0xcc>)
 800125e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				break;
 8001262:	e7b0      	b.n	80011c6 <Config_ChangeValue+0x2a>
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000128 	.word	0x20000128

0800126c <Config_Save>:

CONFStatus_t Config_Save (void){
 800126c:	b508      	push	{r3, lr}
	CONFStatus_t retval;
	retval = (CONFStatus_t)EE_Write(&configuration, 0, CONFIG_BYTES_LEN);
 800126e:	2238      	movs	r2, #56	; 0x38
 8001270:	2100      	movs	r1, #0
 8001272:	4802      	ldr	r0, [pc, #8]	; (800127c <Config_Save+0x10>)
 8001274:	f000 f8ec 	bl	8001450 <EE_Write>
	return retval;
}
 8001278:	bd08      	pop	{r3, pc}
 800127a:	bf00      	nop
 800127c:	20000128 	.word	0x20000128

08001280 <Config_GetConfig>:
ConfigLoadStatus_t Config_GetConfigStatus(void){
	return configuartionStatus;
}

CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8001280:	b1c0      	cbz	r0, 80012b4 <Config_GetConfig+0x34>
CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
 8001282:	b4f0      	push	{r4, r5, r6, r7}
 8001284:	4604      	mov	r4, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <Config_GetConfig+0x40>)
 8001288:	f993 3000 	ldrsb.w	r3, [r3]
 800128c:	b9ab      	cbnz	r3, 80012ba <Config_GetConfig+0x3a>
		memcpy(config, &configuration, CONFIG_BYTES_LEN);
 800128e:	4d0d      	ldr	r5, [pc, #52]	; (80012c4 <Config_GetConfig+0x44>)
 8001290:	f105 0730 	add.w	r7, r5, #48	; 0x30
 8001294:	462e      	mov	r6, r5
 8001296:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001298:	6020      	str	r0, [r4, #0]
 800129a:	6061      	str	r1, [r4, #4]
 800129c:	60a2      	str	r2, [r4, #8]
 800129e:	60e3      	str	r3, [r4, #12]
 80012a0:	4635      	mov	r5, r6
 80012a2:	3410      	adds	r4, #16
 80012a4:	42be      	cmp	r6, r7
 80012a6:	d1f5      	bne.n	8001294 <Config_GetConfig+0x14>
 80012a8:	cd03      	ldmia	r5!, {r0, r1}
 80012aa:	6020      	str	r0, [r4, #0]
 80012ac:	6061      	str	r1, [r4, #4]
		return CONF_OK;
 80012ae:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 80012b0:	bcf0      	pop	{r4, r5, r6, r7}
 80012b2:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 80012b4:	f06f 0001 	mvn.w	r0, #1
}
 80012b8:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 80012ba:	f06f 0004 	mvn.w	r0, #4
 80012be:	e7f7      	b.n	80012b0 <Config_GetConfig+0x30>
 80012c0:	20000126 	.word	0x20000126
 80012c4:	20000128 	.word	0x20000128

080012c8 <Config_GetEthernetConfig>:

CONFStatus_t Config_GetEthernetConfig (EthernetConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 80012c8:	b180      	cbz	r0, 80012ec <Config_GetEthernetConfig+0x24>
CONFStatus_t Config_GetEthernetConfig (EthernetConfig_t* config){
 80012ca:	b430      	push	{r4, r5}
 80012cc:	4605      	mov	r5, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <Config_GetEthernetConfig+0x30>)
 80012d0:	f993 3000 	ldrsb.w	r3, [r3]
 80012d4:	b96b      	cbnz	r3, 80012f2 <Config_GetEthernetConfig+0x2a>
		memcpy(config, &configuration.EthernetConfig, ETH_CONFIG_BYTES_LEN);
 80012d6:	4c09      	ldr	r4, [pc, #36]	; (80012fc <Config_GetEthernetConfig+0x34>)
 80012d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012da:	6028      	str	r0, [r5, #0]
 80012dc:	6069      	str	r1, [r5, #4]
 80012de:	60aa      	str	r2, [r5, #8]
 80012e0:	60eb      	str	r3, [r5, #12]
 80012e2:	8823      	ldrh	r3, [r4, #0]
 80012e4:	822b      	strh	r3, [r5, #16]
		return CONF_OK;
 80012e6:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 80012e8:	bc30      	pop	{r4, r5}
 80012ea:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 80012ec:	f06f 0001 	mvn.w	r0, #1
}
 80012f0:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 80012f2:	f06f 0004 	mvn.w	r0, #4
 80012f6:	e7f7      	b.n	80012e8 <Config_GetEthernetConfig+0x20>
 80012f8:	20000126 	.word	0x20000126
 80012fc:	20000148 	.word	0x20000148

08001300 <Config_GetRegConfig>:

CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8001300:	b198      	cbz	r0, 800132a <Config_GetRegConfig+0x2a>
CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
 8001302:	b430      	push	{r4, r5}
 8001304:	4605      	mov	r5, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <Config_GetRegConfig+0x38>)
 8001308:	f993 3000 	ldrsb.w	r3, [r3]
 800130c:	b983      	cbnz	r3, 8001330 <Config_GetRegConfig+0x30>
		memcpy(config, &configuration.RegulationConfig, REG_CONFIG_BYTES_LEN);
 800130e:	4c0b      	ldr	r4, [pc, #44]	; (800133c <Config_GetRegConfig+0x3c>)
 8001310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001312:	6028      	str	r0, [r5, #0]
 8001314:	6069      	str	r1, [r5, #4]
 8001316:	60aa      	str	r2, [r5, #8]
 8001318:	60eb      	str	r3, [r5, #12]
 800131a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131c:	6128      	str	r0, [r5, #16]
 800131e:	6169      	str	r1, [r5, #20]
 8001320:	61aa      	str	r2, [r5, #24]
 8001322:	61eb      	str	r3, [r5, #28]
		return CONF_OK;
 8001324:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 8001326:	bc30      	pop	{r4, r5}
 8001328:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 800132a:	f06f 0001 	mvn.w	r0, #1
}
 800132e:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 8001330:	f06f 0004 	mvn.w	r0, #4
 8001334:	e7f7      	b.n	8001326 <Config_GetRegConfig+0x26>
 8001336:	bf00      	nop
 8001338:	20000126 	.word	0x20000126
 800133c:	20000128 	.word	0x20000128

08001340 <Config_Copy>:

CONFStatus_t Config_Copy (ConfigStruct_t* dest, ConfigStruct_t* src){
	if((dest == NULL) || (src == NULL)) return CONF_ERR_NULL;
 8001340:	b1b0      	cbz	r0, 8001370 <Config_Copy+0x30>
 8001342:	b1c1      	cbz	r1, 8001376 <Config_Copy+0x36>
CONFStatus_t Config_Copy (ConfigStruct_t* dest, ConfigStruct_t* src){
 8001344:	b470      	push	{r4, r5, r6}
	memcpy(dest, src, CONFIG_BYTES_LEN);
 8001346:	460a      	mov	r2, r1
 8001348:	3130      	adds	r1, #48	; 0x30
 800134a:	6816      	ldr	r6, [r2, #0]
 800134c:	6855      	ldr	r5, [r2, #4]
 800134e:	6894      	ldr	r4, [r2, #8]
 8001350:	68d3      	ldr	r3, [r2, #12]
 8001352:	6006      	str	r6, [r0, #0]
 8001354:	6045      	str	r5, [r0, #4]
 8001356:	6084      	str	r4, [r0, #8]
 8001358:	60c3      	str	r3, [r0, #12]
 800135a:	3210      	adds	r2, #16
 800135c:	3010      	adds	r0, #16
 800135e:	428a      	cmp	r2, r1
 8001360:	d1f3      	bne.n	800134a <Config_Copy+0xa>
 8001362:	6811      	ldr	r1, [r2, #0]
 8001364:	6853      	ldr	r3, [r2, #4]
 8001366:	6001      	str	r1, [r0, #0]
 8001368:	6043      	str	r3, [r0, #4]
	return CONF_OK;
 800136a:	2000      	movs	r0, #0
}
 800136c:	bc70      	pop	{r4, r5, r6}
 800136e:	4770      	bx	lr
	if((dest == NULL) || (src == NULL)) return CONF_ERR_NULL;
 8001370:	f06f 0001 	mvn.w	r0, #1
 8001374:	4770      	bx	lr
 8001376:	f06f 0001 	mvn.w	r0, #1
}
 800137a:	4770      	bx	lr

0800137c <Config_Init>:
CONFStatus_t Config_Init(I2C_HandleTypeDef* iic){
 800137c:	b510      	push	{r4, lr}
	configuartionStatus = CONF_STAT_INIT;
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <Config_Init+0x5c>)
 8001380:	22ff      	movs	r2, #255	; 0xff
 8001382:	701a      	strb	r2, [r3, #0]
	retval |= EE_Init(iic);
 8001384:	f000 f82e 	bl	80013e4 <EE_Init>
	retval = EE_Read(&configuration, 0, CONFIG_BYTES_LEN);
 8001388:	2238      	movs	r2, #56	; 0x38
 800138a:	2100      	movs	r1, #0
 800138c:	4813      	ldr	r0, [pc, #76]	; (80013dc <Config_Init+0x60>)
 800138e:	f000 f833 	bl	80013f8 <EE_Read>
 8001392:	4603      	mov	r3, r0
	if(retval == EE_OK){
 8001394:	b138      	cbz	r0, 80013a6 <Config_Init+0x2a>
	if(retval == CONF_OK){
 8001396:	b153      	cbz	r3, 80013ae <Config_Init+0x32>
		if((retval == CONF_ERR_NOCONF) || (retval == CONF_ERR_CRC)){
 8001398:	1d5a      	adds	r2, r3, #5
 800139a:	2a01      	cmp	r2, #1
 800139c:	d90c      	bls.n	80013b8 <Config_Init+0x3c>
			configuartionStatus = CONF_STAT_ERROR;
 800139e:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <Config_Init+0x5c>)
 80013a0:	21fd      	movs	r1, #253	; 0xfd
 80013a2:	7011      	strb	r1, [r2, #0]
 80013a4:	e006      	b.n	80013b4 <Config_Init+0x38>
		retval = Config_CheckData();
 80013a6:	f7ff feeb 	bl	8001180 <Config_CheckData>
 80013aa:	4603      	mov	r3, r0
 80013ac:	e7f3      	b.n	8001396 <Config_Init+0x1a>
		configuartionStatus = CONF_STAT_LOADED;
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <Config_Init+0x5c>)
 80013b0:	2100      	movs	r1, #0
 80013b2:	7011      	strb	r1, [r2, #0]
}
 80013b4:	b258      	sxtb	r0, r3
 80013b6:	bd10      	pop	{r4, pc}
			Config_Copy(&configuration, &defaultConfig);
 80013b8:	4c08      	ldr	r4, [pc, #32]	; (80013dc <Config_Init+0x60>)
 80013ba:	4909      	ldr	r1, [pc, #36]	; (80013e0 <Config_Init+0x64>)
 80013bc:	4620      	mov	r0, r4
 80013be:	f7ff ffbf 	bl	8001340 <Config_Copy>
			configuration.crc = Config_CalculateCRC();
 80013c2:	f7ff fed1 	bl	8001168 <Config_CalculateCRC>
 80013c6:	6360      	str	r0, [r4, #52]	; 0x34
			retval = Config_Save();
 80013c8:	f7ff ff50 	bl	800126c <Config_Save>
 80013cc:	4603      	mov	r3, r0
			configuartionStatus = CONF_STAT_LOADED;
 80013ce:	4a02      	ldr	r2, [pc, #8]	; (80013d8 <Config_Init+0x5c>)
 80013d0:	2100      	movs	r1, #0
 80013d2:	7011      	strb	r1, [r2, #0]
 80013d4:	e7ee      	b.n	80013b4 <Config_Init+0x38>
 80013d6:	bf00      	nop
 80013d8:	20000126 	.word	0x20000126
 80013dc:	20000128 	.word	0x20000128
 80013e0:	0800cb84 	.word	0x0800cb84

080013e4 <EE_Init>:
#include "stm32f4xx_hal_i2c.h"

I2C_HandleTypeDef* ee_iic;

EE_StatusTypeDef EE_Init (I2C_HandleTypeDef* hi2c){
	if(hi2c != NULL){
 80013e4:	b118      	cbz	r0, 80013ee <EE_Init+0xa>
		ee_iic = hi2c;
 80013e6:	4a03      	ldr	r2, [pc, #12]	; (80013f4 <EE_Init+0x10>)
 80013e8:	6010      	str	r0, [r2, #0]
		return EE_OK;
 80013ea:	2000      	movs	r0, #0
 80013ec:	4770      	bx	lr
	}
	return EE_ERR_NULL;
 80013ee:	f06f 0001 	mvn.w	r0, #1
}
 80013f2:	4770      	bx	lr
 80013f4:	20002ac4 	.word	0x20002ac4

080013f8 <EE_Read>:

EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;

	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 80013f8:	b1e0      	cbz	r0, 8001434 <EE_Read+0x3c>
EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
 80013fa:	b510      	push	{r4, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	4604      	mov	r4, r0
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8001400:	b1da      	cbz	r2, 800143a <EE_Read+0x42>
 8001402:	4613      	mov	r3, r2
 8001404:	460a      	mov	r2, r1

	dataBuf = (uint8_t*)data;
	i2cStatus= HAL_I2C_Mem_Read(ee_iic, EE_ADDR, addr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 8001406:	4911      	ldr	r1, [pc, #68]	; (800144c <EE_Read+0x54>)
 8001408:	6808      	ldr	r0, [r1, #0]
 800140a:	b299      	uxth	r1, r3
 800140c:	3302      	adds	r3, #2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	9302      	str	r3, [sp, #8]
 8001412:	9101      	str	r1, [sp, #4]
 8001414:	9400      	str	r4, [sp, #0]
 8001416:	2301      	movs	r3, #1
 8001418:	21a0      	movs	r1, #160	; 0xa0
 800141a:	f005 f8c1 	bl	80065a0 <HAL_I2C_Mem_Read>
	if(i2cStatus == HAL_OK){
 800141e:	b178      	cbz	r0, 8001440 <EE_Read+0x48>
		return EE_OK;
	}else if(i2cStatus == HAL_ERROR){
 8001420:	2801      	cmp	r0, #1
 8001422:	d010      	beq.n	8001446 <EE_Read+0x4e>
		return EE_ERR_TIMEOUT;
	}else if(i2cStatus == HAL_BUSY){
 8001424:	2802      	cmp	r0, #2
 8001426:	d002      	beq.n	800142e <EE_Read+0x36>
		return EE_ERR_BUSY;
	}else{
		return EE_ERR_TIMEOUT;
 8001428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800142c:	e009      	b.n	8001442 <EE_Read+0x4a>
		return EE_ERR_BUSY;
 800142e:	f06f 0002 	mvn.w	r0, #2
 8001432:	e006      	b.n	8001442 <EE_Read+0x4a>
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8001434:	f06f 0001 	mvn.w	r0, #1
	}
}
 8001438:	4770      	bx	lr
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 800143a:	f06f 0001 	mvn.w	r0, #1
 800143e:	e000      	b.n	8001442 <EE_Read+0x4a>
		return EE_OK;
 8001440:	2000      	movs	r0, #0
}
 8001442:	b004      	add	sp, #16
 8001444:	bd10      	pop	{r4, pc}
		return EE_ERR_TIMEOUT;
 8001446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800144a:	e7fa      	b.n	8001442 <EE_Read+0x4a>
 800144c:	20002ac4 	.word	0x20002ac4

08001450 <EE_Write>:

EE_StatusTypeDef EE_Write (void* data, uint32_t addr, uint32_t len){
 8001450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001454:	b084      	sub	sp, #16
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;
	uint32_t datalen, i, pages, rest, bytelen, addrCpy;
	uint8_t eeBlock, eeAddr;

	if(data == NULL || len <= 0 || len >= EE_SIZE) return retval;
 8001456:	2800      	cmp	r0, #0
 8001458:	d05d      	beq.n	8001516 <EE_Write+0xc6>
 800145a:	460e      	mov	r6, r1
 800145c:	4607      	mov	r7, r0
 800145e:	2a00      	cmp	r2, #0
 8001460:	d05c      	beq.n	800151c <EE_Write+0xcc>
 8001462:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001466:	d25c      	bcs.n	8001522 <EE_Write+0xd2>

	eeBlock = addr / EE_BLOCK_SIZE;
 8001468:	f3c1 2107 	ubfx	r1, r1, #8, #8
	eeAddr = addr % EE_BLOCK_SIZE;
 800146c:	b2f5      	uxtb	r5, r6

	dataBuf = (uint8_t*)data;
	datalen = len;
	addrCpy = addr;

	if(len <= EE_PAGE_SIZE){
 800146e:	2a10      	cmp	r2, #16
 8001470:	d90a      	bls.n	8001488 <EE_Write+0x38>
			retval = EE_OK;
		}
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
	}else{
		pages = datalen >> 4;
 8001472:	ea4f 1812 	mov.w	r8, r2, lsr #4
		rest = datalen % 16;
		if(rest) pages ++;
 8001476:	f012 090f 	ands.w	r9, r2, #15
 800147a:	d001      	beq.n	8001480 <EE_Write+0x30>
 800147c:	f108 0801 	add.w	r8, r8, #1
		for(i = 0; i < pages; i++){
 8001480:	2500      	movs	r5, #0
	EE_StatusTypeDef retval = EE_ERR_NULL;
 8001482:	f06f 0a01 	mvn.w	sl, #1
		for(i = 0; i < pages; i++){
 8001486:	e036      	b.n	80014f6 <EE_Write+0xa6>
		i2cStatus= HAL_I2C_Mem_Write(ee_iic, EE_ADDR + eeBlock, eeAddr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 8001488:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <EE_Write+0xf0>)
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	b293      	uxth	r3, r2
 800148e:	1c94      	adds	r4, r2, #2
 8001490:	00a4      	lsls	r4, r4, #2
 8001492:	9402      	str	r4, [sp, #8]
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	9700      	str	r7, [sp, #0]
 8001498:	2301      	movs	r3, #1
 800149a:	462a      	mov	r2, r5
 800149c:	31a0      	adds	r1, #160	; 0xa0
 800149e:	f004 ffcb 	bl	8006438 <HAL_I2C_Mem_Write>
		if(i2cStatus == HAL_OK){
 80014a2:	b130      	cbz	r0, 80014b2 <EE_Write+0x62>
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 80014a4:	2801      	cmp	r0, #1
 80014a6:	d03f      	beq.n	8001528 <EE_Write+0xd8>
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 80014a8:	2802      	cmp	r0, #2
 80014aa:	d040      	beq.n	800152e <EE_Write+0xde>
	EE_StatusTypeDef retval = EE_ERR_NULL;
 80014ac:	f06f 0a01 	mvn.w	sl, #1
 80014b0:	e02d      	b.n	800150e <EE_Write+0xbe>
			vTaskDelay(EE_BYTE_WRITE_TIME * (len + 2));
 80014b2:	4620      	mov	r0, r4
 80014b4:	f008 fbe8 	bl	8009c88 <vTaskDelay>
			retval = EE_OK;
 80014b8:	f04f 0a00 	mov.w	sl, #0
 80014bc:	e027      	b.n	800150e <EE_Write+0xbe>
			if(i == pages - 1){
				bytelen = rest;
 80014be:	464c      	mov	r4, r9
			}else{
				bytelen = 16;
			}
			i2cStatus = HAL_I2C_Mem_Write(ee_iic, EE_ADDR, addrCpy, 1, dataBuf, bytelen, EE_BYTE_WRITE_TIME * (bytelen + 2));
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <EE_Write+0xf0>)
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	1ca3      	adds	r3, r4, #2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	9302      	str	r3, [sp, #8]
 80014ca:	9401      	str	r4, [sp, #4]
 80014cc:	9700      	str	r7, [sp, #0]
 80014ce:	2301      	movs	r3, #1
 80014d0:	b2b2      	uxth	r2, r6
 80014d2:	21a0      	movs	r1, #160	; 0xa0
 80014d4:	f004 ffb0 	bl	8006438 <HAL_I2C_Mem_Write>
			if(i2cStatus == HAL_OK){
 80014d8:	b9a8      	cbnz	r0, 8001506 <EE_Write+0xb6>
				dataBuf += bytelen;
 80014da:	4427      	add	r7, r4
				addrCpy += bytelen;
 80014dc:	4426      	add	r6, r4
				retval = EE_OK;
				while(HAL_I2C_IsDeviceReady(ee_iic, EE_ADDR, 10, 10) != HAL_OK);
 80014de:	230a      	movs	r3, #10
 80014e0:	461a      	mov	r2, r3
 80014e2:	21a0      	movs	r1, #160	; 0xa0
 80014e4:	4816      	ldr	r0, [pc, #88]	; (8001540 <EE_Write+0xf0>)
 80014e6:	6800      	ldr	r0, [r0, #0]
 80014e8:	f005 f9c2 	bl	8006870 <HAL_I2C_IsDeviceReady>
 80014ec:	2800      	cmp	r0, #0
 80014ee:	d1f6      	bne.n	80014de <EE_Write+0x8e>
		for(i = 0; i < pages; i++){
 80014f0:	3501      	adds	r5, #1
				retval = EE_OK;
 80014f2:	f04f 0a00 	mov.w	sl, #0
		for(i = 0; i < pages; i++){
 80014f6:	4545      	cmp	r5, r8
 80014f8:	d209      	bcs.n	800150e <EE_Write+0xbe>
			if(i == pages - 1){
 80014fa:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80014fe:	42ab      	cmp	r3, r5
 8001500:	d0dd      	beq.n	80014be <EE_Write+0x6e>
				bytelen = 16;
 8001502:	2410      	movs	r4, #16
 8001504:	e7dc      	b.n	80014c0 <EE_Write+0x70>
				//vTaskDelay((bytelen + 2) * EE_BYTE_WRITE_TIME);
			}else{
				if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001506:	2801      	cmp	r0, #1
 8001508:	d014      	beq.n	8001534 <EE_Write+0xe4>
				else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 800150a:	2802      	cmp	r0, #2
 800150c:	d015      	beq.n	800153a <EE_Write+0xea>
				break;
			}
		}
	}
	return retval;
}
 800150e:	4650      	mov	r0, sl
 8001510:	b004      	add	sp, #16
 8001512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if(data == NULL || len <= 0 || len >= EE_SIZE) return retval;
 8001516:	f06f 0a01 	mvn.w	sl, #1
 800151a:	e7f8      	b.n	800150e <EE_Write+0xbe>
 800151c:	f06f 0a01 	mvn.w	sl, #1
 8001520:	e7f5      	b.n	800150e <EE_Write+0xbe>
 8001522:	f06f 0a01 	mvn.w	sl, #1
 8001526:	e7f2      	b.n	800150e <EE_Write+0xbe>
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001528:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800152c:	e7ef      	b.n	800150e <EE_Write+0xbe>
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 800152e:	f06f 0a02 	mvn.w	sl, #2
 8001532:	e7ec      	b.n	800150e <EE_Write+0xbe>
				if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001534:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8001538:	e7e9      	b.n	800150e <EE_Write+0xbe>
				else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 800153a:	f06f 0a02 	mvn.w	sl, #2
 800153e:	e7e6      	b.n	800150e <EE_Write+0xbe>
 8001540:	20002ac4 	.word	0x20002ac4

08001544 <EE_Erease>:

EE_StatusTypeDef EE_Erease (void){
 8001544:	b530      	push	{r4, r5, lr}
 8001546:	b085      	sub	sp, #20
	uint32_t i;
	int32_t retval = 0;
	uint8_t blankData[16];
	memset(blankData, 255, 16);
 8001548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	9303      	str	r3, [sp, #12]
	int32_t retval = 0;
 8001554:	2500      	movs	r5, #0

	for(i = 0; i < EE_SIZE; i += 16){
 8001556:	462c      	mov	r4, r5
 8001558:	e006      	b.n	8001568 <EE_Erease+0x24>
		retval |= EE_Write(blankData, i, 16);
 800155a:	2210      	movs	r2, #16
 800155c:	4621      	mov	r1, r4
 800155e:	4668      	mov	r0, sp
 8001560:	f7ff ff76 	bl	8001450 <EE_Write>
 8001564:	4305      	orrs	r5, r0
	for(i = 0; i < EE_SIZE; i += 16){
 8001566:	3410      	adds	r4, #16
 8001568:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800156c:	d3f5      	bcc.n	800155a <EE_Erease+0x16>
	}
	return retval;
}
 800156e:	b268      	sxtb	r0, r5
 8001570:	b005      	add	sp, #20
 8001572:	bd30      	pop	{r4, r5, pc}

08001574 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001574:	b530      	push	{r4, r5, lr}
 8001576:	b083      	sub	sp, #12
 8001578:	4605      	mov	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800157a:	4c16      	ldr	r4, [pc, #88]	; (80015d4 <WIZCHIP_READ+0x60>)
 800157c:	68e3      	ldr	r3, [r4, #12]
 800157e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001580:	6963      	ldr	r3, [r4, #20]
 8001582:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001586:	b9b3      	cbnz	r3, 80015b6 <WIZCHIP_READ+0x42>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001588:	4c12      	ldr	r4, [pc, #72]	; (80015d4 <WIZCHIP_READ+0x60>)
 800158a:	6a23      	ldr	r3, [r4, #32]
 800158c:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8001590:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001592:	6a23      	ldr	r3, [r4, #32]
 8001594:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8001598:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800159a:	6a23      	ldr	r3, [r4, #32]
 800159c:	b2e8      	uxtb	r0, r5
 800159e:	4798      	blx	r3
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80015a0:	4c0c      	ldr	r4, [pc, #48]	; (80015d4 <WIZCHIP_READ+0x60>)
 80015a2:	69e3      	ldr	r3, [r4, #28]
 80015a4:	4798      	blx	r3
 80015a6:	4605      	mov	r5, r0

   WIZCHIP.CS._deselect();
 80015a8:	69a3      	ldr	r3, [r4, #24]
 80015aa:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80015ac:	6923      	ldr	r3, [r4, #16]
 80015ae:	4798      	blx	r3
   return ret;
}
 80015b0:	4628      	mov	r0, r5
 80015b2:	b003      	add	sp, #12
 80015b4:	bd30      	pop	{r4, r5, pc}
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80015b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0e5      	beq.n	8001588 <WIZCHIP_READ+0x14>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80015bc:	0c2a      	lsrs	r2, r5, #16
 80015be:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80015c2:	0a2a      	lsrs	r2, r5, #8
 80015c4:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80015c8:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80015cc:	2103      	movs	r1, #3
 80015ce:	a801      	add	r0, sp, #4
 80015d0:	4798      	blx	r3
 80015d2:	e7e5      	b.n	80015a0 <WIZCHIP_READ+0x2c>
 80015d4:	20000004 	.word	0x20000004

080015d8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80015d8:	b570      	push	{r4, r5, r6, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	4604      	mov	r4, r0
 80015de:	460e      	mov	r6, r1
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80015e0:	4d16      	ldr	r5, [pc, #88]	; (800163c <WIZCHIP_WRITE+0x64>)
 80015e2:	68eb      	ldr	r3, [r5, #12]
 80015e4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80015e6:	696b      	ldr	r3, [r5, #20]
 80015e8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80015ea:	f044 0404 	orr.w	r4, r4, #4

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80015ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80015f0:	b1a3      	cbz	r3, 800161c <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80015f2:	0c22      	lsrs	r2, r4, #16
 80015f4:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80015f8:	0a22      	lsrs	r2, r4, #8
 80015fa:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80015fe:	f88d 4006 	strb.w	r4, [sp, #6]
		spi_data[3] = wb;
 8001602:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001606:	2104      	movs	r1, #4
 8001608:	eb0d 0001 	add.w	r0, sp, r1
 800160c:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800160e:	4c0b      	ldr	r4, [pc, #44]	; (800163c <WIZCHIP_WRITE+0x64>)
 8001610:	69a3      	ldr	r3, [r4, #24]
 8001612:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001614:	6923      	ldr	r3, [r4, #16]
 8001616:	4798      	blx	r3
}
 8001618:	b002      	add	sp, #8
 800161a:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800161c:	6a2b      	ldr	r3, [r5, #32]
 800161e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001622:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001624:	6a2b      	ldr	r3, [r5, #32]
 8001626:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800162a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800162c:	6a2b      	ldr	r3, [r5, #32]
 800162e:	b2e0      	uxtb	r0, r4
 8001630:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001632:	6a2b      	ldr	r3, [r5, #32]
 8001634:	4630      	mov	r0, r6
 8001636:	4798      	blx	r3
 8001638:	e7e9      	b.n	800160e <WIZCHIP_WRITE+0x36>
 800163a:	bf00      	nop
 800163c:	20000004 	.word	0x20000004

08001640 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001642:	b083      	sub	sp, #12
 8001644:	4604      	mov	r4, r0
 8001646:	460e      	mov	r6, r1
 8001648:	4615      	mov	r5, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800164a:	4f1c      	ldr	r7, [pc, #112]	; (80016bc <WIZCHIP_READ_BUF+0x7c>)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	b96b      	cbnz	r3, 8001674 <WIZCHIP_READ_BUF+0x34>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001658:	4f18      	ldr	r7, [pc, #96]	; (80016bc <WIZCHIP_READ_BUF+0x7c>)
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001660:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001668:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	b2e0      	uxtb	r0, r4
 800166e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001670:	2400      	movs	r4, #0
 8001672:	e019      	b.n	80016a8 <WIZCHIP_READ_BUF+0x68>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0ee      	beq.n	8001658 <WIZCHIP_READ_BUF+0x18>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800167a:	0c22      	lsrs	r2, r4, #16
 800167c:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001680:	0a22      	lsrs	r2, r4, #8
 8001682:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001686:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800168a:	2103      	movs	r1, #3
 800168c:	a801      	add	r0, sp, #4
 800168e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <WIZCHIP_READ_BUF+0x7c>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	4629      	mov	r1, r5
 8001696:	4630      	mov	r0, r6
 8001698:	4798      	blx	r3
 800169a:	e007      	b.n	80016ac <WIZCHIP_READ_BUF+0x6c>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <WIZCHIP_READ_BUF+0x7c>)
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	4798      	blx	r3
 80016a2:	5530      	strb	r0, [r6, r4]
		for(i = 0; i < len; i++)
 80016a4:	3401      	adds	r4, #1
 80016a6:	b2a4      	uxth	r4, r4
 80016a8:	42ac      	cmp	r4, r5
 80016aa:	d3f7      	bcc.n	800169c <WIZCHIP_READ_BUF+0x5c>
   }

   WIZCHIP.CS._deselect();
 80016ac:	4c03      	ldr	r4, [pc, #12]	; (80016bc <WIZCHIP_READ_BUF+0x7c>)
 80016ae:	69a3      	ldr	r3, [r4, #24]
 80016b0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80016b2:	6923      	ldr	r3, [r4, #16]
 80016b4:	4798      	blx	r3
}
 80016b6:	b003      	add	sp, #12
 80016b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000004 	.word	0x20000004

080016c0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c2:	b083      	sub	sp, #12
 80016c4:	4604      	mov	r4, r0
 80016c6:	460f      	mov	r7, r1
 80016c8:	4616      	mov	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80016ca:	4d1b      	ldr	r5, [pc, #108]	; (8001738 <WIZCHIP_WRITE_BUF+0x78>)
 80016cc:	68eb      	ldr	r3, [r5, #12]
 80016ce:	4798      	blx	r3
   WIZCHIP.CS._select();
 80016d0:	696b      	ldr	r3, [r5, #20]
 80016d2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80016d4:	f044 0404 	orr.w	r4, r4, #4

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80016d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80016da:	b1b3      	cbz	r3, 800170a <WIZCHIP_WRITE_BUF+0x4a>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80016dc:	0c22      	lsrs	r2, r4, #16
 80016de:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80016e2:	0a22      	lsrs	r2, r4, #8
 80016e4:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80016e8:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80016ec:	2103      	movs	r1, #3
 80016ee:	a801      	add	r0, sp, #4
 80016f0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <WIZCHIP_WRITE_BUF+0x78>)
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	4631      	mov	r1, r6
 80016f8:	4638      	mov	r0, r7
 80016fa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80016fc:	4c0e      	ldr	r4, [pc, #56]	; (8001738 <WIZCHIP_WRITE_BUF+0x78>)
 80016fe:	69a3      	ldr	r3, [r4, #24]
 8001700:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001702:	6923      	ldr	r3, [r4, #16]
 8001704:	4798      	blx	r3
}
 8001706:	b003      	add	sp, #12
 8001708:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800170a:	6a2b      	ldr	r3, [r5, #32]
 800170c:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001710:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001712:	6a2b      	ldr	r3, [r5, #32]
 8001714:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001718:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800171a:	6a2b      	ldr	r3, [r5, #32]
 800171c:	b2e0      	uxtb	r0, r4
 800171e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001720:	2400      	movs	r4, #0
 8001722:	e005      	b.n	8001730 <WIZCHIP_WRITE_BUF+0x70>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <WIZCHIP_WRITE_BUF+0x78>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	5d38      	ldrb	r0, [r7, r4]
 800172a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800172c:	3401      	adds	r4, #1
 800172e:	b2a4      	uxth	r4, r4
 8001730:	42b4      	cmp	r4, r6
 8001732:	d3f7      	bcc.n	8001724 <WIZCHIP_WRITE_BUF+0x64>
 8001734:	e7e2      	b.n	80016fc <WIZCHIP_WRITE_BUF+0x3c>
 8001736:	bf00      	nop
 8001738:	20000004 	.word	0x20000004

0800173c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800173c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001740:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 8001742:	2500      	movs	r5, #0
 8001744:	e001      	b.n	800174a <getSn_TX_FSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
 8001746:	42a5      	cmp	r5, r4
 8001748:	d024      	beq.n	8001794 <getSn_TX_FSR+0x58>
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800174a:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800174e:	f108 0801 	add.w	r8, r8, #1
 8001752:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001756:	f508 5600 	add.w	r6, r8, #8192	; 0x2000
 800175a:	4630      	mov	r0, r6
 800175c:	f7ff ff0a 	bl	8001574 <WIZCHIP_READ>
 8001760:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001762:	0224      	lsls	r4, r4, #8
 8001764:	b2a4      	uxth	r4, r4
 8001766:	f508 5804 	add.w	r8, r8, #8448	; 0x2100
 800176a:	4640      	mov	r0, r8
 800176c:	f7ff ff02 	bl	8001574 <WIZCHIP_READ>
 8001770:	fa14 f480 	uxtah	r4, r4, r0
 8001774:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 8001776:	2c00      	cmp	r4, #0
 8001778:	d0e5      	beq.n	8001746 <getSn_TX_FSR+0xa>
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800177a:	4630      	mov	r0, r6
 800177c:	f7ff fefa 	bl	8001574 <WIZCHIP_READ>
 8001780:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001782:	022d      	lsls	r5, r5, #8
 8001784:	b2ad      	uxth	r5, r5
 8001786:	4640      	mov	r0, r8
 8001788:	f7ff fef4 	bl	8001574 <WIZCHIP_READ>
 800178c:	fa15 f580 	uxtah	r5, r5, r0
 8001790:	b2ad      	uxth	r5, r5
 8001792:	e7d8      	b.n	8001746 <getSn_TX_FSR+0xa>
   return val;
}
 8001794:	4628      	mov	r0, r5
 8001796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800179a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800179a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800179e:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 80017a0:	2500      	movs	r5, #0
 80017a2:	e001      	b.n	80017a8 <getSn_RX_RSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
 80017a4:	42a5      	cmp	r5, r4
 80017a6:	d024      	beq.n	80017f2 <getSn_RX_RSR+0x58>
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80017a8:	ea4f 0887 	mov.w	r8, r7, lsl #2
 80017ac:	f108 0801 	add.w	r8, r8, #1
 80017b0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80017b4:	f508 5618 	add.w	r6, r8, #9728	; 0x2600
 80017b8:	4630      	mov	r0, r6
 80017ba:	f7ff fedb 	bl	8001574 <WIZCHIP_READ>
 80017be:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80017c0:	0224      	lsls	r4, r4, #8
 80017c2:	b2a4      	uxth	r4, r4
 80017c4:	f508 581c 	add.w	r8, r8, #9984	; 0x2700
 80017c8:	4640      	mov	r0, r8
 80017ca:	f7ff fed3 	bl	8001574 <WIZCHIP_READ>
 80017ce:	fa14 f480 	uxtah	r4, r4, r0
 80017d2:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 80017d4:	2c00      	cmp	r4, #0
 80017d6:	d0e5      	beq.n	80017a4 <getSn_RX_RSR+0xa>
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80017d8:	4630      	mov	r0, r6
 80017da:	f7ff fecb 	bl	8001574 <WIZCHIP_READ>
 80017de:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80017e0:	022d      	lsls	r5, r5, #8
 80017e2:	b2ad      	uxth	r5, r5
 80017e4:	4640      	mov	r0, r8
 80017e6:	f7ff fec5 	bl	8001574 <WIZCHIP_READ>
 80017ea:	fa15 f580 	uxtah	r5, r5, r0
 80017ee:	b2ad      	uxth	r5, r5
 80017f0:	e7d8      	b.n	80017a4 <getSn_RX_RSR+0xa>
   return val;
}
 80017f2:	4628      	mov	r0, r5
 80017f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080017f8 <wiz_send_data>:
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 80017f8:	b902      	cbnz	r2, 80017fc <wiz_send_data+0x4>
 80017fa:	4770      	bx	lr
{
 80017fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001800:	4615      	mov	r5, r2
 8001802:	460f      	mov	r7, r1
   ptr = getSn_TX_WR(sn);
 8001804:	0084      	lsls	r4, r0, #2
 8001806:	f104 0901 	add.w	r9, r4, #1
 800180a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800180e:	f509 5810 	add.w	r8, r9, #9216	; 0x2400
 8001812:	4640      	mov	r0, r8
 8001814:	f7ff feae 	bl	8001574 <WIZCHIP_READ>
 8001818:	b286      	uxth	r6, r0
 800181a:	0236      	lsls	r6, r6, #8
 800181c:	b2b6      	uxth	r6, r6
 800181e:	f509 5914 	add.w	r9, r9, #9472	; 0x2500
 8001822:	4648      	mov	r0, r9
 8001824:	f7ff fea6 	bl	8001574 <WIZCHIP_READ>
 8001828:	fa16 f680 	uxtah	r6, r6, r0
 800182c:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800182e:	1ca0      	adds	r0, r4, #2
 8001830:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001832:	462a      	mov	r2, r5
 8001834:	4639      	mov	r1, r7
 8001836:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 800183a:	f7ff ff41 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800183e:	4435      	add	r5, r6
 8001840:	b2ad      	uxth	r5, r5
   setSn_TX_WR(sn,ptr);
 8001842:	0a29      	lsrs	r1, r5, #8
 8001844:	4640      	mov	r0, r8
 8001846:	f7ff fec7 	bl	80015d8 <WIZCHIP_WRITE>
 800184a:	b2e9      	uxtb	r1, r5
 800184c:	4648      	mov	r0, r9
 800184e:	f7ff fec3 	bl	80015d8 <WIZCHIP_WRITE>
}
 8001852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001856 <wiz_recv_data>:
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 8001856:	b902      	cbnz	r2, 800185a <wiz_recv_data+0x4>
 8001858:	4770      	bx	lr
{
 800185a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800185e:	4615      	mov	r5, r2
 8001860:	460f      	mov	r7, r1
   ptr = getSn_RX_RD(sn);
 8001862:	0084      	lsls	r4, r0, #2
 8001864:	f104 0901 	add.w	r9, r4, #1
 8001868:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800186c:	f509 5820 	add.w	r8, r9, #10240	; 0x2800
 8001870:	4640      	mov	r0, r8
 8001872:	f7ff fe7f 	bl	8001574 <WIZCHIP_READ>
 8001876:	b286      	uxth	r6, r0
 8001878:	0236      	lsls	r6, r6, #8
 800187a:	b2b6      	uxth	r6, r6
 800187c:	f509 5924 	add.w	r9, r9, #10496	; 0x2900
 8001880:	4648      	mov	r0, r9
 8001882:	f7ff fe77 	bl	8001574 <WIZCHIP_READ>
 8001886:	fa16 f680 	uxtah	r6, r6, r0
 800188a:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800188c:	1ce0      	adds	r0, r4, #3
 800188e:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001890:	462a      	mov	r2, r5
 8001892:	4639      	mov	r1, r7
 8001894:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8001898:	f7ff fed2 	bl	8001640 <WIZCHIP_READ_BUF>
   ptr += len;
 800189c:	4435      	add	r5, r6
 800189e:	b2ad      	uxth	r5, r5
   
   setSn_RX_RD(sn,ptr);
 80018a0:	0a29      	lsrs	r1, r5, #8
 80018a2:	4640      	mov	r0, r8
 80018a4:	f7ff fe98 	bl	80015d8 <WIZCHIP_WRITE>
 80018a8:	b2e9      	uxtb	r1, r5
 80018aa:	4648      	mov	r0, r9
 80018ac:	f7ff fe94 	bl	80015d8 <WIZCHIP_WRITE>
}
 80018b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080018b4 <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 80018b4:	2808      	cmp	r0, #8
 80018b6:	d82e      	bhi.n	8001916 <close+0x62>
{
 80018b8:	b570      	push	{r4, r5, r6, lr}
 80018ba:	4606      	mov	r6, r0
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80018bc:	0084      	lsls	r4, r0, #2
 80018be:	3401      	adds	r4, #1
 80018c0:	00e4      	lsls	r4, r4, #3
 80018c2:	f504 7580 	add.w	r5, r4, #256	; 0x100
 80018c6:	2110      	movs	r1, #16
 80018c8:	4628      	mov	r0, r5
 80018ca:	f7ff fe85 	bl	80015d8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80018ce:	4628      	mov	r0, r5
 80018d0:	f7ff fe50 	bl	8001574 <WIZCHIP_READ>
 80018d4:	2800      	cmp	r0, #0
 80018d6:	d1fa      	bne.n	80018ce <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80018d8:	211f      	movs	r1, #31
 80018da:	f504 7000 	add.w	r0, r4, #512	; 0x200
 80018de:	f7ff fe7b 	bl	80015d8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80018e2:	2301      	movs	r3, #1
 80018e4:	40b3      	lsls	r3, r6
 80018e6:	43db      	mvns	r3, r3
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	490c      	ldr	r1, [pc, #48]	; (800191c <close+0x68>)
 80018ec:	880a      	ldrh	r2, [r1, #0]
 80018ee:	401a      	ands	r2, r3
 80018f0:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <close+0x6c>)
 80018f4:	8811      	ldrh	r1, [r2, #0]
 80018f6:	400b      	ands	r3, r1
 80018f8:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	4a09      	ldr	r2, [pc, #36]	; (8001924 <close+0x70>)
 80018fe:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
	sock_pack_info[sn] = 0;
 8001902:	4a09      	ldr	r2, [pc, #36]	; (8001928 <close+0x74>)
 8001904:	5593      	strb	r3, [r2, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001906:	f504 7040 	add.w	r0, r4, #768	; 0x300
 800190a:	f7ff fe33 	bl	8001574 <WIZCHIP_READ>
 800190e:	2800      	cmp	r0, #0
 8001910:	d1f9      	bne.n	8001906 <close+0x52>
	return SOCK_OK;
 8001912:	2001      	movs	r0, #1
}
 8001914:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 8001916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800191a:	4770      	bx	lr
 800191c:	20000160 	.word	0x20000160
 8001920:	20000162 	.word	0x20000162
 8001924:	2000016c 	.word	0x2000016c
 8001928:	20000164 	.word	0x20000164

0800192c <socket>:
	CHECK_SOCKNUM();
 800192c:	2808      	cmp	r0, #8
 800192e:	f200 8093 	bhi.w	8001a58 <socket+0x12c>
{
 8001932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	4605      	mov	r5, r0
 800193a:	460f      	mov	r7, r1
 800193c:	4690      	mov	r8, r2
 800193e:	461e      	mov	r6, r3
	switch(protocol)
 8001940:	2901      	cmp	r1, #1
 8001942:	d062      	beq.n	8001a0a <socket+0xde>
 8001944:	2900      	cmp	r1, #0
 8001946:	f000 808a 	beq.w	8001a5e <socket+0x132>
 800194a:	2904      	cmp	r1, #4
 800194c:	f200 8087 	bhi.w	8001a5e <socket+0x132>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001950:	f016 0f04 	tst.w	r6, #4
 8001954:	f040 8086 	bne.w	8001a64 <socket+0x138>
	if(flag != 0)
 8001958:	b11e      	cbz	r6, 8001962 <socket+0x36>
   	switch(protocol)
 800195a:	2f01      	cmp	r7, #1
 800195c:	d062      	beq.n	8001a24 <socket+0xf8>
 800195e:	2f02      	cmp	r7, #2
 8001960:	d066      	beq.n	8001a30 <socket+0x104>
	close(sn);
 8001962:	4628      	mov	r0, r5
 8001964:	f7ff ffa6 	bl	80018b4 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001968:	00ac      	lsls	r4, r5, #2
 800196a:	3401      	adds	r4, #1
 800196c:	00e4      	lsls	r4, r4, #3
 800196e:	f026 010f 	bic.w	r1, r6, #15
 8001972:	b249      	sxtb	r1, r1
 8001974:	4339      	orrs	r1, r7
 8001976:	b2c9      	uxtb	r1, r1
 8001978:	4620      	mov	r0, r4
 800197a:	f7ff fe2d 	bl	80015d8 <WIZCHIP_WRITE>
	if(!port)
 800197e:	f1b8 0f00 	cmp.w	r8, #0
 8001982:	d10a      	bne.n	800199a <socket+0x6e>
	   port = sock_any_port++;
 8001984:	4a3a      	ldr	r2, [pc, #232]	; (8001a70 <socket+0x144>)
 8001986:	f8b2 8000 	ldrh.w	r8, [r2]
 800198a:	f108 0301 	add.w	r3, r8, #1
 800198e:	b29b      	uxth	r3, r3
 8001990:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001992:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001996:	4293      	cmp	r3, r2
 8001998:	d059      	beq.n	8001a4e <socket+0x122>
   setSn_PORT(sn,port);	
 800199a:	ea4f 2118 	mov.w	r1, r8, lsr #8
 800199e:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 80019a2:	f7ff fe19 	bl	80015d8 <WIZCHIP_WRITE>
 80019a6:	fa5f f188 	uxtb.w	r1, r8
 80019aa:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 80019ae:	f7ff fe13 	bl	80015d8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80019b2:	f504 7780 	add.w	r7, r4, #256	; 0x100
 80019b6:	2101      	movs	r1, #1
 80019b8:	4638      	mov	r0, r7
 80019ba:	f7ff fe0d 	bl	80015d8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80019be:	4638      	mov	r0, r7
 80019c0:	f7ff fdd8 	bl	8001574 <WIZCHIP_READ>
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d1fa      	bne.n	80019be <socket+0x92>
   sock_io_mode &= ~(1 <<sn);
 80019c8:	2201      	movs	r2, #1
 80019ca:	40aa      	lsls	r2, r5
 80019cc:	43d2      	mvns	r2, r2
 80019ce:	b212      	sxth	r2, r2
 80019d0:	4928      	ldr	r1, [pc, #160]	; (8001a74 <socket+0x148>)
 80019d2:	880b      	ldrh	r3, [r1, #0]
 80019d4:	4013      	ands	r3, r2
 80019d6:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80019d8:	f006 0601 	and.w	r6, r6, #1
 80019dc:	40ae      	lsls	r6, r5
 80019de:	431e      	orrs	r6, r3
 80019e0:	800e      	strh	r6, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <socket+0x14c>)
 80019e4:	8819      	ldrh	r1, [r3, #0]
 80019e6:	400a      	ands	r2, r1
 80019e8:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <socket+0x150>)
 80019ee:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 80019f2:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <socket+0x154>)
 80019f4:	5553      	strb	r3, [r2, r5]
   while(getSn_SR(sn) == SOCK_CLOSED);
 80019f6:	f504 7040 	add.w	r0, r4, #768	; 0x300
 80019fa:	f7ff fdbb 	bl	8001574 <WIZCHIP_READ>
 80019fe:	2800      	cmp	r0, #0
 8001a00:	d0f9      	beq.n	80019f6 <socket+0xca>
   return (int8_t)sn;
 8001a02:	b268      	sxtb	r0, r5
}	   
 8001a04:	b002      	add	sp, #8
 8001a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            getSIPR((uint8_t*)&taddr);
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	eb0d 0102 	add.w	r1, sp, r2
 8001a10:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001a14:	f7ff fe14 	bl	8001640 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001a18:	9b01      	ldr	r3, [sp, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d198      	bne.n	8001950 <socket+0x24>
 8001a1e:	f06f 0002 	mvn.w	r0, #2
 8001a22:	e7ef      	b.n	8001a04 <socket+0xd8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001a24:	f016 0f21 	tst.w	r6, #33	; 0x21
 8001a28:	d19b      	bne.n	8001962 <socket+0x36>
 8001a2a:	f06f 0005 	mvn.w	r0, #5
 8001a2e:	e7e9      	b.n	8001a04 <socket+0xd8>
   	      if(flag & SF_IGMP_VER2)
 8001a30:	f016 0f20 	tst.w	r6, #32
 8001a34:	d002      	beq.n	8001a3c <socket+0x110>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001a36:	f016 0f80 	tst.w	r6, #128	; 0x80
 8001a3a:	d016      	beq.n	8001a6a <socket+0x13e>
      	      if(flag & SF_UNI_BLOCK)
 8001a3c:	f016 0f10 	tst.w	r6, #16
 8001a40:	d08f      	beq.n	8001962 <socket+0x36>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001a42:	f016 0f80 	tst.w	r6, #128	; 0x80
 8001a46:	d18c      	bne.n	8001962 <socket+0x36>
 8001a48:	f06f 0005 	mvn.w	r0, #5
 8001a4c:	e7da      	b.n	8001a04 <socket+0xd8>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <socket+0x144>)
 8001a50:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001a54:	801a      	strh	r2, [r3, #0]
 8001a56:	e7a0      	b.n	800199a <socket+0x6e>
	CHECK_SOCKNUM();
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}	   
 8001a5c:	4770      	bx	lr
         return SOCKERR_SOCKMODE;
 8001a5e:	f06f 0004 	mvn.w	r0, #4
 8001a62:	e7cf      	b.n	8001a04 <socket+0xd8>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001a64:	f06f 0005 	mvn.w	r0, #5
 8001a68:	e7cc      	b.n	8001a04 <socket+0xd8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001a6a:	f06f 0005 	mvn.w	r0, #5
 8001a6e:	e7c9      	b.n	8001a04 <socket+0xd8>
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000160 	.word	0x20000160
 8001a78:	20000162 	.word	0x20000162
 8001a7c:	2000016c 	.word	0x2000016c
 8001a80:	20000164 	.word	0x20000164

08001a84 <listen>:

int8_t listen(uint8_t sn)
{
	CHECK_SOCKNUM();
 8001a84:	2808      	cmp	r0, #8
 8001a86:	d82a      	bhi.n	8001ade <listen+0x5a>
{
 8001a88:	b570      	push	{r4, r5, r6, lr}
 8001a8a:	4605      	mov	r5, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001a8c:	0084      	lsls	r4, r0, #2
 8001a8e:	3401      	adds	r4, #1
 8001a90:	00e4      	lsls	r4, r4, #3
 8001a92:	4620      	mov	r0, r4
 8001a94:	f7ff fd6e 	bl	8001574 <WIZCHIP_READ>
 8001a98:	f000 000f 	and.w	r0, r0, #15
 8001a9c:	2801      	cmp	r0, #1
 8001a9e:	d121      	bne.n	8001ae4 <listen+0x60>
	CHECK_SOCKINIT();
 8001aa0:	f504 7640 	add.w	r6, r4, #768	; 0x300
 8001aa4:	4630      	mov	r0, r6
 8001aa6:	f7ff fd65 	bl	8001574 <WIZCHIP_READ>
 8001aaa:	2813      	cmp	r0, #19
 8001aac:	d11d      	bne.n	8001aea <listen+0x66>
	setSn_CR(sn,Sn_CR_LISTEN);
 8001aae:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f7ff fd8f 	bl	80015d8 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff fd5a 	bl	8001574 <WIZCHIP_READ>
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	d1fa      	bne.n	8001aba <listen+0x36>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001ac4:	4630      	mov	r0, r6
 8001ac6:	f7ff fd55 	bl	8001574 <WIZCHIP_READ>
 8001aca:	2814      	cmp	r0, #20
 8001acc:	d101      	bne.n	8001ad2 <listen+0x4e>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 8001ace:	2001      	movs	r0, #1
}
 8001ad0:	bd70      	pop	{r4, r5, r6, pc}
         close(sn);
 8001ad2:	4628      	mov	r0, r5
 8001ad4:	f7ff feee 	bl	80018b4 <close>
         return SOCKERR_SOCKCLOSED;
 8001ad8:	f06f 0003 	mvn.w	r0, #3
 8001adc:	e7f8      	b.n	8001ad0 <listen+0x4c>
	CHECK_SOCKNUM();
 8001ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001ae2:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001ae4:	f06f 0004 	mvn.w	r0, #4
 8001ae8:	e7f2      	b.n	8001ad0 <listen+0x4c>
	CHECK_SOCKINIT();
 8001aea:	f06f 0002 	mvn.w	r0, #2
 8001aee:	e7ef      	b.n	8001ad0 <listen+0x4c>

08001af0 <disconnect>:
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
 8001af0:	2808      	cmp	r0, #8
 8001af2:	d838      	bhi.n	8001b66 <disconnect+0x76>
{
 8001af4:	b570      	push	{r4, r5, r6, lr}
 8001af6:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001af8:	0084      	lsls	r4, r0, #2
 8001afa:	3401      	adds	r4, #1
 8001afc:	00e4      	lsls	r4, r4, #3
 8001afe:	4620      	mov	r0, r4
 8001b00:	f7ff fd38 	bl	8001574 <WIZCHIP_READ>
 8001b04:	f000 000f 	and.w	r0, r0, #15
 8001b08:	2801      	cmp	r0, #1
 8001b0a:	d12f      	bne.n	8001b6c <disconnect+0x7c>
	setSn_CR(sn,Sn_CR_DISCON);
 8001b0c:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8001b10:	2108      	movs	r1, #8
 8001b12:	4628      	mov	r0, r5
 8001b14:	f7ff fd60 	bl	80015d8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001b18:	4628      	mov	r0, r5
 8001b1a:	f7ff fd2b 	bl	8001574 <WIZCHIP_READ>
 8001b1e:	2800      	cmp	r0, #0
 8001b20:	d1fa      	bne.n	8001b18 <disconnect+0x28>
	sock_is_sending &= ~(1<<sn);
 8001b22:	2301      	movs	r3, #1
 8001b24:	fa03 f206 	lsl.w	r2, r3, r6
 8001b28:	4913      	ldr	r1, [pc, #76]	; (8001b78 <disconnect+0x88>)
 8001b2a:	880b      	ldrh	r3, [r1, #0]
 8001b2c:	ea23 0302 	bic.w	r3, r3, r2
 8001b30:	800b      	strh	r3, [r1, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <disconnect+0x8c>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	4133      	asrs	r3, r6
 8001b38:	f013 0f01 	tst.w	r3, #1
 8001b3c:	d119      	bne.n	8001b72 <disconnect+0x82>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001b3e:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8001b42:	f7ff fd17 	bl	8001574 <WIZCHIP_READ>
 8001b46:	b160      	cbz	r0, 8001b62 <disconnect+0x72>
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001b48:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8001b4c:	f7ff fd12 	bl	8001574 <WIZCHIP_READ>
 8001b50:	f010 0f08 	tst.w	r0, #8
 8001b54:	d0f3      	beq.n	8001b3e <disconnect+0x4e>
	   {
	      close(sn);
 8001b56:	4630      	mov	r0, r6
 8001b58:	f7ff feac 	bl	80018b4 <close>
	      return SOCKERR_TIMEOUT;
 8001b5c:	f06f 000c 	mvn.w	r0, #12
 8001b60:	e008      	b.n	8001b74 <disconnect+0x84>
	   }
	}
	return SOCK_OK;
 8001b62:	2001      	movs	r0, #1
 8001b64:	e006      	b.n	8001b74 <disconnect+0x84>
   CHECK_SOCKNUM();
 8001b66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001b6a:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001b6c:	f06f 0004 	mvn.w	r0, #4
 8001b70:	e000      	b.n	8001b74 <disconnect+0x84>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001b72:	2000      	movs	r0, #0
}
 8001b74:	bd70      	pop	{r4, r5, r6, pc}
 8001b76:	bf00      	nop
 8001b78:	20000162 	.word	0x20000162
 8001b7c:	20000160 	.word	0x20000160

08001b80 <send>:
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
 8001b80:	2808      	cmp	r0, #8
 8001b82:	f200 8083 	bhi.w	8001c8c <send+0x10c>
{
 8001b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b8a:	4615      	mov	r5, r2
 8001b8c:	468a      	mov	sl, r1
 8001b8e:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001b90:	4681      	mov	r9, r0
 8001b92:	0087      	lsls	r7, r0, #2
 8001b94:	3701      	adds	r7, #1
 8001b96:	00ff      	lsls	r7, r7, #3
 8001b98:	4638      	mov	r0, r7
 8001b9a:	f7ff fceb 	bl	8001574 <WIZCHIP_READ>
 8001b9e:	f000 000f 	and.w	r0, r0, #15
 8001ba2:	2801      	cmp	r0, #1
 8001ba4:	d175      	bne.n	8001c92 <send+0x112>
   CHECK_SOCKDATA();
 8001ba6:	2d00      	cmp	r5, #0
 8001ba8:	d076      	beq.n	8001c98 <send+0x118>
   tmp = getSn_SR(sn);
 8001baa:	f507 7840 	add.w	r8, r7, #768	; 0x300
 8001bae:	4640      	mov	r0, r8
 8001bb0:	f7ff fce0 	bl	8001574 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001bb4:	2817      	cmp	r0, #23
 8001bb6:	d001      	beq.n	8001bbc <send+0x3c>
 8001bb8:	281c      	cmp	r0, #28
 8001bba:	d170      	bne.n	8001c9e <send+0x11e>
   if( sock_is_sending & (1<<sn) )
 8001bbc:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <send+0x124>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	4133      	asrs	r3, r6
 8001bc2:	f013 0f01 	tst.w	r3, #1
 8001bc6:	d019      	beq.n	8001bfc <send+0x7c>
   {
      tmp = getSn_IR(sn);
 8001bc8:	f507 7400 	add.w	r4, r7, #512	; 0x200
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f7ff fcd1 	bl	8001574 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8001bd2:	f010 0f10 	tst.w	r0, #16
 8001bd6:	d105      	bne.n	8001be4 <send+0x64>
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001bd8:	f010 0f08 	tst.w	r0, #8
 8001bdc:	d119      	bne.n	8001c12 <send+0x92>
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
 8001bde:	2000      	movs	r0, #0
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 8001be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
 8001be4:	2110      	movs	r1, #16
 8001be6:	4620      	mov	r0, r4
 8001be8:	f7ff fcf6 	bl	80015d8 <WIZCHIP_WRITE>
         sock_is_sending &= ~(1<<sn);         
 8001bec:	2301      	movs	r3, #1
 8001bee:	fa03 f206 	lsl.w	r2, r3, r6
 8001bf2:	492c      	ldr	r1, [pc, #176]	; (8001ca4 <send+0x124>)
 8001bf4:	880b      	ldrh	r3, [r1, #0]
 8001bf6:	ea23 0302 	bic.w	r3, r3, r2
 8001bfa:	800b      	strh	r3, [r1, #0]
   freesize = getSn_TxMAX(sn);
 8001bfc:	f507 50f8 	add.w	r0, r7, #7936	; 0x1f00
 8001c00:	f7ff fcb8 	bl	8001574 <WIZCHIP_READ>
 8001c04:	b284      	uxth	r4, r0
 8001c06:	02a4      	lsls	r4, r4, #10
 8001c08:	b2a4      	uxth	r4, r4
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001c0a:	42a5      	cmp	r5, r4
 8001c0c:	d80f      	bhi.n	8001c2e <send+0xae>
 8001c0e:	462c      	mov	r4, r5
 8001c10:	e00d      	b.n	8001c2e <send+0xae>
         close(sn);
 8001c12:	4630      	mov	r0, r6
 8001c14:	f7ff fe4e 	bl	80018b4 <close>
         return SOCKERR_TIMEOUT;
 8001c18:	f06f 000c 	mvn.w	r0, #12
 8001c1c:	e7e0      	b.n	8001be0 <send+0x60>
         close(sn);
 8001c1e:	4630      	mov	r0, r6
 8001c20:	f7ff fe48 	bl	80018b4 <close>
         return SOCKERR_SOCKSTATUS;
 8001c24:	f06f 0006 	mvn.w	r0, #6
 8001c28:	e7da      	b.n	8001be0 <send+0x60>
      if(len <= freesize) break;
 8001c2a:	42a5      	cmp	r5, r4
 8001c2c:	d215      	bcs.n	8001c5a <send+0xda>
      freesize = getSn_TX_FSR(sn);
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f7ff fd84 	bl	800173c <getSn_TX_FSR>
 8001c34:	4605      	mov	r5, r0
      tmp = getSn_SR(sn);
 8001c36:	4640      	mov	r0, r8
 8001c38:	f7ff fc9c 	bl	8001574 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001c3c:	2817      	cmp	r0, #23
 8001c3e:	d001      	beq.n	8001c44 <send+0xc4>
 8001c40:	281c      	cmp	r0, #28
 8001c42:	d1ec      	bne.n	8001c1e <send+0x9e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001c44:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <send+0x128>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	fa43 f309 	asr.w	r3, r3, r9
 8001c4c:	f013 0f01 	tst.w	r3, #1
 8001c50:	d0eb      	beq.n	8001c2a <send+0xaa>
 8001c52:	42a5      	cmp	r5, r4
 8001c54:	d2e9      	bcs.n	8001c2a <send+0xaa>
 8001c56:	2000      	movs	r0, #0
 8001c58:	e7c2      	b.n	8001be0 <send+0x60>
   wiz_send_data(sn, buf, len);
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	4651      	mov	r1, sl
 8001c5e:	4630      	mov	r0, r6
 8001c60:	f7ff fdca 	bl	80017f8 <wiz_send_data>
   setSn_CR(sn,Sn_CR_SEND);
 8001c64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001c68:	2120      	movs	r1, #32
 8001c6a:	4638      	mov	r0, r7
 8001c6c:	f7ff fcb4 	bl	80015d8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001c70:	4638      	mov	r0, r7
 8001c72:	f7ff fc7f 	bl	8001574 <WIZCHIP_READ>
 8001c76:	2800      	cmp	r0, #0
 8001c78:	d1fa      	bne.n	8001c70 <send+0xf0>
   sock_is_sending |= (1 << sn);
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	fa03 f606 	lsl.w	r6, r3, r6
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <send+0x124>)
 8001c82:	881a      	ldrh	r2, [r3, #0]
 8001c84:	4316      	orrs	r6, r2
 8001c86:	801e      	strh	r6, [r3, #0]
   return (int32_t)len;
 8001c88:	4620      	mov	r0, r4
 8001c8a:	e7a9      	b.n	8001be0 <send+0x60>
   CHECK_SOCKNUM();
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001c90:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001c92:	f06f 0004 	mvn.w	r0, #4
 8001c96:	e7a3      	b.n	8001be0 <send+0x60>
   CHECK_SOCKDATA();
 8001c98:	f06f 000d 	mvn.w	r0, #13
 8001c9c:	e7a0      	b.n	8001be0 <send+0x60>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001c9e:	f06f 0006 	mvn.w	r0, #6
 8001ca2:	e79d      	b.n	8001be0 <send+0x60>
 8001ca4:	20000162 	.word	0x20000162
 8001ca8:	20000160 	.word	0x20000160

08001cac <ClrSiS>:

void ClrSiS (uint8_t sn){
	sock_is_sending &= ~(1 << sn);
 8001cac:	2301      	movs	r3, #1
 8001cae:	fa03 f000 	lsl.w	r0, r3, r0
 8001cb2:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <ClrSiS+0x14>)
 8001cb4:	8813      	ldrh	r3, [r2, #0]
 8001cb6:	ea23 0000 	bic.w	r0, r3, r0
 8001cba:	8010      	strh	r0, [r2, #0]
}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000162 	.word	0x20000162

08001cc4 <recv>:
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001cc4:	2808      	cmp	r0, #8
 8001cc6:	d864      	bhi.n	8001d92 <recv+0xce>
{
 8001cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ccc:	4614      	mov	r4, r2
 8001cce:	4689      	mov	r9, r1
 8001cd0:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001cd2:	4607      	mov	r7, r0
 8001cd4:	0085      	lsls	r5, r0, #2
 8001cd6:	3501      	adds	r5, #1
 8001cd8:	00ed      	lsls	r5, r5, #3
 8001cda:	4628      	mov	r0, r5
 8001cdc:	f7ff fc4a 	bl	8001574 <WIZCHIP_READ>
 8001ce0:	f000 000f 	and.w	r0, r0, #15
 8001ce4:	2801      	cmp	r0, #1
 8001ce6:	d157      	bne.n	8001d98 <recv+0xd4>
   CHECK_SOCKDATA();
 8001ce8:	2c00      	cmp	r4, #0
 8001cea:	d058      	beq.n	8001d9e <recv+0xda>
   
   recvsize = getSn_RxMAX(sn);
 8001cec:	f505 50f0 	add.w	r0, r5, #7680	; 0x1e00
 8001cf0:	f7ff fc40 	bl	8001574 <WIZCHIP_READ>
 8001cf4:	fa1f f880 	uxth.w	r8, r0
 8001cf8:	ea4f 2888 	mov.w	r8, r8, lsl #10
 8001cfc:	fa1f f888 	uxth.w	r8, r8
   if(recvsize < len) len = recvsize;
 8001d00:	4544      	cmp	r4, r8
 8001d02:	d80e      	bhi.n	8001d22 <recv+0x5e>
 8001d04:	46a0      	mov	r8, r4
 8001d06:	e00c      	b.n	8001d22 <recv+0x5e>
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
               {
                  close(sn);
 8001d08:	4630      	mov	r0, r6
 8001d0a:	f7ff fdd3 	bl	80018b4 <close>
                  return SOCKERR_SOCKSTATUS;
 8001d0e:	f06f 0006 	mvn.w	r0, #6
 8001d12:	e03c      	b.n	8001d8e <recv+0xca>
               }
            }
            else
            {
               close(sn);
 8001d14:	4630      	mov	r0, r6
 8001d16:	f7ff fdcd 	bl	80018b4 <close>
               return SOCKERR_SOCKSTATUS;
 8001d1a:	f06f 0006 	mvn.w	r0, #6
 8001d1e:	e036      	b.n	8001d8e <recv+0xca>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
         if(recvsize != 0) break;
 8001d20:	bb0c      	cbnz	r4, 8001d66 <recv+0xa2>
         recvsize = getSn_RX_RSR(sn);
 8001d22:	4630      	mov	r0, r6
 8001d24:	f7ff fd39 	bl	800179a <getSn_RX_RSR>
 8001d28:	4604      	mov	r4, r0
         tmp = getSn_SR(sn);
 8001d2a:	f505 7040 	add.w	r0, r5, #768	; 0x300
 8001d2e:	f7ff fc21 	bl	8001574 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
 8001d32:	2817      	cmp	r0, #23
 8001d34:	d00d      	beq.n	8001d52 <recv+0x8e>
            if(tmp == SOCK_CLOSE_WAIT)
 8001d36:	281c      	cmp	r0, #28
 8001d38:	d1ec      	bne.n	8001d14 <recv+0x50>
               if(recvsize != 0) break;
 8001d3a:	b9a4      	cbnz	r4, 8001d66 <recv+0xa2>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001d3c:	4630      	mov	r0, r6
 8001d3e:	f7ff fcfd 	bl	800173c <getSn_TX_FSR>
 8001d42:	4682      	mov	sl, r0
 8001d44:	f505 50f8 	add.w	r0, r5, #7936	; 0x1f00
 8001d48:	f7ff fc14 	bl	8001574 <WIZCHIP_READ>
 8001d4c:	ebba 2f80 	cmp.w	sl, r0, lsl #10
 8001d50:	d0da      	beq.n	8001d08 <recv+0x44>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <recv+0xe0>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	413b      	asrs	r3, r7
 8001d58:	f013 0f01 	tst.w	r3, #1
 8001d5c:	d0e0      	beq.n	8001d20 <recv+0x5c>
 8001d5e:	2c00      	cmp	r4, #0
 8001d60:	d1de      	bne.n	8001d20 <recv+0x5c>
 8001d62:	2000      	movs	r0, #0
 8001d64:	e013      	b.n	8001d8e <recv+0xca>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001d66:	4544      	cmp	r4, r8
 8001d68:	d300      	bcc.n	8001d6c <recv+0xa8>
 8001d6a:	4644      	mov	r4, r8
   wiz_recv_data(sn, buf, len);
 8001d6c:	4622      	mov	r2, r4
 8001d6e:	4649      	mov	r1, r9
 8001d70:	4630      	mov	r0, r6
 8001d72:	f7ff fd70 	bl	8001856 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8001d76:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8001d7a:	2140      	movs	r1, #64	; 0x40
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	f7ff fc2b 	bl	80015d8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001d82:	4628      	mov	r0, r5
 8001d84:	f7ff fbf6 	bl	8001574 <WIZCHIP_READ>
 8001d88:	2800      	cmp	r0, #0
 8001d8a:	d1fa      	bne.n	8001d82 <recv+0xbe>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001d8c:	4620      	mov	r0, r4
}
 8001d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   CHECK_SOCKNUM();
 8001d92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001d96:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001d98:	f06f 0004 	mvn.w	r0, #4
 8001d9c:	e7f7      	b.n	8001d8e <recv+0xca>
   CHECK_SOCKDATA();
 8001d9e:	f06f 000d 	mvn.w	r0, #13
 8001da2:	e7f4      	b.n	8001d8e <recv+0xca>
 8001da4:	20000160 	.word	0x20000160

08001da8 <getsockopt>:
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
   CHECK_SOCKNUM();
 8001da8:	2808      	cmp	r0, #8
 8001daa:	f200 80a3 	bhi.w	8001ef4 <getsockopt+0x14c>
{
 8001dae:	b570      	push	{r4, r5, r6, lr}
 8001db0:	4615      	mov	r5, r2
 8001db2:	4604      	mov	r4, r0
   switch(sotype)
 8001db4:	290c      	cmp	r1, #12
 8001db6:	f200 80a0 	bhi.w	8001efa <getsockopt+0x152>
 8001dba:	e8df f001 	tbb	[pc, r1]
 8001dbe:	1107      	.short	0x1107
 8001dc0:	4338251b 	.word	0x4338251b
 8001dc4:	6c67569e 	.word	0x6c67569e
 8001dc8:	7b71      	.short	0x7b71
 8001dca:	8f          	.byte	0x8f
 8001dcb:	00          	.byte	0x00
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8001dcc:	0080      	lsls	r0, r0, #2
 8001dce:	3001      	adds	r0, #1
 8001dd0:	00c0      	lsls	r0, r0, #3
 8001dd2:	f7ff fbcf 	bl	8001574 <WIZCHIP_READ>
 8001dd6:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8001dda:	7028      	strb	r0, [r5, #0]
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
 8001ddc:	2001      	movs	r0, #1
}
 8001dde:	bd70      	pop	{r4, r5, r6, pc}
         *(uint8_t*) arg = getSn_TTL(sn);
 8001de0:	0080      	lsls	r0, r0, #2
 8001de2:	3001      	adds	r0, #1
 8001de4:	00c0      	lsls	r0, r0, #3
 8001de6:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
 8001dea:	f7ff fbc3 	bl	8001574 <WIZCHIP_READ>
 8001dee:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001df0:	2001      	movs	r0, #1
         break;
 8001df2:	e7f4      	b.n	8001dde <getsockopt+0x36>
         *(uint8_t*) arg = getSn_TOS(sn);
 8001df4:	0080      	lsls	r0, r0, #2
 8001df6:	3001      	adds	r0, #1
 8001df8:	00c0      	lsls	r0, r0, #3
 8001dfa:	f500 50a8 	add.w	r0, r0, #5376	; 0x1500
 8001dfe:	f7ff fbb9 	bl	8001574 <WIZCHIP_READ>
 8001e02:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001e04:	2001      	movs	r0, #1
         break;
 8001e06:	e7ea      	b.n	8001dde <getsockopt+0x36>
         *(uint16_t*) arg = getSn_MSSR(sn);
 8001e08:	0084      	lsls	r4, r0, #2
 8001e0a:	3401      	adds	r4, #1
 8001e0c:	00e4      	lsls	r4, r4, #3
 8001e0e:	f504 5090 	add.w	r0, r4, #4608	; 0x1200
 8001e12:	f7ff fbaf 	bl	8001574 <WIZCHIP_READ>
 8001e16:	b286      	uxth	r6, r0
 8001e18:	0236      	lsls	r6, r6, #8
 8001e1a:	b2b6      	uxth	r6, r6
 8001e1c:	f504 5098 	add.w	r0, r4, #4864	; 0x1300
 8001e20:	f7ff fba8 	bl	8001574 <WIZCHIP_READ>
 8001e24:	fa16 f080 	uxtah	r0, r6, r0
 8001e28:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001e2a:	2001      	movs	r0, #1
         break;
 8001e2c:	e7d7      	b.n	8001dde <getsockopt+0x36>
         getSn_DIPR(sn, (uint8_t*)arg);
 8001e2e:	0080      	lsls	r0, r0, #2
 8001e30:	3001      	adds	r0, #1
 8001e32:	00c0      	lsls	r0, r0, #3
 8001e34:	2204      	movs	r2, #4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8001e3c:	f7ff fc00 	bl	8001640 <WIZCHIP_READ_BUF>
   return SOCK_OK;
 8001e40:	2001      	movs	r0, #1
         break;
 8001e42:	e7cc      	b.n	8001dde <getsockopt+0x36>
         *(uint16_t*) arg = getSn_DPORT(sn);
 8001e44:	0084      	lsls	r4, r0, #2
 8001e46:	3401      	adds	r4, #1
 8001e48:	00e4      	lsls	r4, r4, #3
 8001e4a:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 8001e4e:	f7ff fb91 	bl	8001574 <WIZCHIP_READ>
 8001e52:	b286      	uxth	r6, r0
 8001e54:	0236      	lsls	r6, r6, #8
 8001e56:	b2b6      	uxth	r6, r6
 8001e58:	f504 5088 	add.w	r0, r4, #4352	; 0x1100
 8001e5c:	f7ff fb8a 	bl	8001574 <WIZCHIP_READ>
 8001e60:	fa16 f080 	uxtah	r0, r6, r0
 8001e64:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001e66:	2001      	movs	r0, #1
         break;
 8001e68:	e7b9      	b.n	8001dde <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 8001e6a:	0084      	lsls	r4, r0, #2
 8001e6c:	3401      	adds	r4, #1
 8001e6e:	00e4      	lsls	r4, r4, #3
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff fb7f 	bl	8001574 <WIZCHIP_READ>
 8001e76:	f000 000f 	and.w	r0, r0, #15
 8001e7a:	2801      	cmp	r0, #1
 8001e7c:	d140      	bne.n	8001f00 <getsockopt+0x158>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8001e7e:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
 8001e82:	f7ff fb77 	bl	8001574 <WIZCHIP_READ>
 8001e86:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001e88:	2001      	movs	r0, #1
         break;
 8001e8a:	e7a8      	b.n	8001dde <getsockopt+0x36>
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 8001e8c:	f7ff fc56 	bl	800173c <getSn_TX_FSR>
 8001e90:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001e92:	2001      	movs	r0, #1
         break;
 8001e94:	e7a3      	b.n	8001dde <getsockopt+0x36>
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 8001e96:	f7ff fc80 	bl	800179a <getSn_RX_RSR>
 8001e9a:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001e9c:	2001      	movs	r0, #1
         break;
 8001e9e:	e79e      	b.n	8001dde <getsockopt+0x36>
         *(uint8_t*) arg = getSn_SR(sn);
 8001ea0:	0080      	lsls	r0, r0, #2
 8001ea2:	3001      	adds	r0, #1
 8001ea4:	00c0      	lsls	r0, r0, #3
 8001ea6:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8001eaa:	f7ff fb63 	bl	8001574 <WIZCHIP_READ>
 8001eae:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001eb0:	2001      	movs	r0, #1
         break;
 8001eb2:	e794      	b.n	8001dde <getsockopt+0x36>
         if(getSn_MR(sn) & Sn_MR_TCP)
 8001eb4:	0080      	lsls	r0, r0, #2
 8001eb6:	3001      	adds	r0, #1
 8001eb8:	00c0      	lsls	r0, r0, #3
 8001eba:	f7ff fb5b 	bl	8001574 <WIZCHIP_READ>
 8001ebe:	f010 0f01 	tst.w	r0, #1
 8001ec2:	d105      	bne.n	8001ed0 <getsockopt+0x128>
            *(uint16_t*)arg = sock_remained_size[sn];
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <getsockopt+0x164>)
 8001ec6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001eca:	802b      	strh	r3, [r5, #0]
   return SOCK_OK;
 8001ecc:	2001      	movs	r0, #1
 8001ece:	e786      	b.n	8001dde <getsockopt+0x36>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff fc62 	bl	800179a <getSn_RX_RSR>
 8001ed6:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001ed8:	2001      	movs	r0, #1
 8001eda:	e780      	b.n	8001dde <getsockopt+0x36>
         if((getSn_MR(sn) == Sn_MR_TCP))
 8001edc:	0080      	lsls	r0, r0, #2
 8001ede:	3001      	adds	r0, #1
 8001ee0:	00c0      	lsls	r0, r0, #3
 8001ee2:	f7ff fb47 	bl	8001574 <WIZCHIP_READ>
 8001ee6:	2801      	cmp	r0, #1
 8001ee8:	d00d      	beq.n	8001f06 <getsockopt+0x15e>
         *(uint8_t*)arg = sock_pack_info[sn];
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <getsockopt+0x168>)
 8001eec:	5d1b      	ldrb	r3, [r3, r4]
 8001eee:	702b      	strb	r3, [r5, #0]
   return SOCK_OK;
 8001ef0:	2001      	movs	r0, #1
         break;
 8001ef2:	e774      	b.n	8001dde <getsockopt+0x36>
   CHECK_SOCKNUM();
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001ef8:	4770      	bx	lr
         return SOCKERR_SOCKOPT;
 8001efa:	f06f 0001 	mvn.w	r0, #1
 8001efe:	e76e      	b.n	8001dde <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 8001f00:	f06f 0004 	mvn.w	r0, #4
 8001f04:	e76b      	b.n	8001dde <getsockopt+0x36>
             return SOCKERR_SOCKMODE;
 8001f06:	f06f 0004 	mvn.w	r0, #4
 8001f0a:	e768      	b.n	8001dde <getsockopt+0x36>
 8001f0c:	2000016c 	.word	0x2000016c
 8001f10:	20000164 	.word	0x20000164

08001f14 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001f14:	4770      	bx	lr

08001f16 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001f16:	4770      	bx	lr

08001f18 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001f18:	4770      	bx	lr

08001f1a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001f1a:	4770      	bx	lr

08001f1c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001f1c:	7800      	ldrb	r0, [r0, #0]
 8001f1e:	4770      	bx	lr

08001f20 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001f20:	7001      	strb	r1, [r0, #0]
 8001f22:	4770      	bx	lr

08001f24 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001f24:	2000      	movs	r0, #0
 8001f26:	4770      	bx	lr

08001f28 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001f28:	4770      	bx	lr

08001f2a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8001f2a:	4770      	bx	lr

08001f2c <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001f2c:	4770      	bx	lr
	...

08001f30 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 8001f30:	b120      	cbz	r0, 8001f3c <reg_wizchip_cs_cbfunc+0xc>
 8001f32:	b119      	cbz	r1, 8001f3c <reg_wizchip_cs_cbfunc+0xc>
      WIZCHIP.CS._select   = wizchip_cs_select;
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <reg_wizchip_cs_cbfunc+0x18>)
 8001f36:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001f38:	6199      	str	r1, [r3, #24]
   }
}
 8001f3a:	4770      	bx	lr
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001f3c:	4b02      	ldr	r3, [pc, #8]	; (8001f48 <reg_wizchip_cs_cbfunc+0x18>)
 8001f3e:	4a03      	ldr	r2, [pc, #12]	; (8001f4c <reg_wizchip_cs_cbfunc+0x1c>)
 8001f40:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001f42:	4a03      	ldr	r2, [pc, #12]	; (8001f50 <reg_wizchip_cs_cbfunc+0x20>)
 8001f44:	619a      	str	r2, [r3, #24]
 8001f46:	4770      	bx	lr
 8001f48:	20000004 	.word	0x20000004
 8001f4c:	08001f19 	.word	0x08001f19
 8001f50:	08001f1b 	.word	0x08001f1b

08001f54 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <reg_wizchip_spi_cbfunc+0x24>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001f5c:	d0fa      	beq.n	8001f54 <reg_wizchip_spi_cbfunc>
   
   if(!spi_rb || !spi_wb)
 8001f5e:	b120      	cbz	r0, 8001f6a <reg_wizchip_spi_cbfunc+0x16>
 8001f60:	b119      	cbz	r1, 8001f6a <reg_wizchip_spi_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <reg_wizchip_spi_cbfunc+0x24>)
 8001f64:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001f66:	6219      	str	r1, [r3, #32]
   }
}
 8001f68:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001f6a:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <reg_wizchip_spi_cbfunc+0x24>)
 8001f6c:	4a03      	ldr	r2, [pc, #12]	; (8001f7c <reg_wizchip_spi_cbfunc+0x28>)
 8001f6e:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001f70:	4a03      	ldr	r2, [pc, #12]	; (8001f80 <reg_wizchip_spi_cbfunc+0x2c>)
 8001f72:	621a      	str	r2, [r3, #32]
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000004 	.word	0x20000004
 8001f7c:	08001f25 	.word	0x08001f25
 8001f80:	08001f29 	.word	0x08001f29

08001f84 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <reg_wizchip_spiburst_cbfunc+0x24>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001f8c:	d0fa      	beq.n	8001f84 <reg_wizchip_spiburst_cbfunc>

   if(!spi_rb || !spi_wb)
 8001f8e:	b120      	cbz	r0, 8001f9a <reg_wizchip_spiburst_cbfunc+0x16>
 8001f90:	b119      	cbz	r1, 8001f9a <reg_wizchip_spiburst_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <reg_wizchip_spiburst_cbfunc+0x24>)
 8001f94:	6258      	str	r0, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001f96:	6299      	str	r1, [r3, #40]	; 0x28
   }
}
 8001f98:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001f9a:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <reg_wizchip_spiburst_cbfunc+0x24>)
 8001f9c:	4a03      	ldr	r2, [pc, #12]	; (8001fac <reg_wizchip_spiburst_cbfunc+0x28>)
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8001fa0:	4a03      	ldr	r2, [pc, #12]	; (8001fb0 <reg_wizchip_spiburst_cbfunc+0x2c>)
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000004 	.word	0x20000004
 8001fac:	08001f2b 	.word	0x08001f2b
 8001fb0:	08001f2d 	.word	0x08001f2d

08001fb4 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001fb4:	b500      	push	{lr}
 8001fb6:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001fb8:	2206      	movs	r2, #6
 8001fba:	a901      	add	r1, sp, #4
 8001fbc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001fc0:	f7ff fb3e 	bl	8001640 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	a905      	add	r1, sp, #20
 8001fc8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fcc:	f7ff fb38 	bl	8001640 <WIZCHIP_READ_BUF>
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	a904      	add	r1, sp, #16
 8001fd4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001fd8:	f7ff fb32 	bl	8001640 <WIZCHIP_READ_BUF>
 8001fdc:	2204      	movs	r2, #4
 8001fde:	a903      	add	r1, sp, #12
 8001fe0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001fe4:	f7ff fb2c 	bl	8001640 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001fe8:	2180      	movs	r1, #128	; 0x80
 8001fea:	2000      	movs	r0, #0
 8001fec:	f7ff faf4 	bl	80015d8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7ff fabf 	bl	8001574 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001ff6:	2206      	movs	r2, #6
 8001ff8:	a901      	add	r1, sp, #4
 8001ffa:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001ffe:	f7ff fb5f 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002002:	2204      	movs	r2, #4
 8002004:	a905      	add	r1, sp, #20
 8002006:	f44f 7080 	mov.w	r0, #256	; 0x100
 800200a:	f7ff fb59 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800200e:	2204      	movs	r2, #4
 8002010:	a904      	add	r1, sp, #16
 8002012:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002016:	f7ff fb53 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800201a:	2204      	movs	r2, #4
 800201c:	a903      	add	r1, sp, #12
 800201e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002022:	f7ff fb4d 	bl	80016c0 <WIZCHIP_WRITE_BUF>
}
 8002026:	b007      	add	sp, #28
 8002028:	f85d fb04 	ldr.w	pc, [sp], #4

0800202c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	4605      	mov	r5, r0
 8002030:	460e      	mov	r6, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8002032:	f7ff ffbf 	bl	8001fb4 <wizchip_sw_reset>
   if(txsize)
 8002036:	b1cd      	cbz	r5, 800206c <wizchip_init+0x40>
   {
      tmp = 0;
 8002038:	2200      	movs	r2, #0
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800203a:	4613      	mov	r3, r2
 800203c:	2b07      	cmp	r3, #7
 800203e:	dc07      	bgt.n	8002050 <wizchip_init+0x24>
		{
			tmp += txsize[i];
 8002040:	5ce9      	ldrb	r1, [r5, r3]
 8002042:	440a      	add	r2, r1
 8002044:	b252      	sxtb	r2, r2

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002046:	2a10      	cmp	r2, #16
 8002048:	dc2f      	bgt.n	80020aa <wizchip_init+0x7e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800204a:	3301      	adds	r3, #1
 800204c:	b25b      	sxtb	r3, r3
 800204e:	e7f5      	b.n	800203c <wizchip_init+0x10>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002050:	2400      	movs	r4, #0
 8002052:	e009      	b.n	8002068 <wizchip_init+0x3c>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002054:	00a0      	lsls	r0, r4, #2
 8002056:	3001      	adds	r0, #1
 8002058:	00c0      	lsls	r0, r0, #3
 800205a:	5d29      	ldrb	r1, [r5, r4]
 800205c:	f500 50f8 	add.w	r0, r0, #7936	; 0x1f00
 8002060:	f7ff faba 	bl	80015d8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002064:	3401      	adds	r4, #1
 8002066:	b264      	sxtb	r4, r4
 8002068:	2c07      	cmp	r4, #7
 800206a:	ddf3      	ble.n	8002054 <wizchip_init+0x28>
		}

	#endif
   }

   if(rxsize)
 800206c:	b15e      	cbz	r6, 8002086 <wizchip_init+0x5a>
   {
      tmp = 0;
 800206e:	2200      	movs	r2, #0
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002070:	4613      	mov	r3, r2
 8002072:	2b07      	cmp	r3, #7
 8002074:	dc09      	bgt.n	800208a <wizchip_init+0x5e>
		{
			tmp += rxsize[i];
 8002076:	5cf1      	ldrb	r1, [r6, r3]
 8002078:	440a      	add	r2, r1
 800207a:	b252      	sxtb	r2, r2
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800207c:	2a10      	cmp	r2, #16
 800207e:	dc17      	bgt.n	80020b0 <wizchip_init+0x84>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002080:	3301      	adds	r3, #1
 8002082:	b25b      	sxtb	r3, r3
 8002084:	e7f5      	b.n	8002072 <wizchip_init+0x46>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 8002086:	2000      	movs	r0, #0
 8002088:	e00e      	b.n	80020a8 <wizchip_init+0x7c>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800208a:	2400      	movs	r4, #0
 800208c:	e009      	b.n	80020a2 <wizchip_init+0x76>
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800208e:	00a0      	lsls	r0, r4, #2
 8002090:	3001      	adds	r0, #1
 8002092:	00c0      	lsls	r0, r0, #3
 8002094:	5d31      	ldrb	r1, [r6, r4]
 8002096:	f500 50f0 	add.w	r0, r0, #7680	; 0x1e00
 800209a:	f7ff fa9d 	bl	80015d8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800209e:	3401      	adds	r4, #1
 80020a0:	b264      	sxtb	r4, r4
 80020a2:	2c07      	cmp	r4, #7
 80020a4:	ddf3      	ble.n	800208e <wizchip_init+0x62>
   return 0;
 80020a6:	2000      	movs	r0, #0
}
 80020a8:	bd70      	pop	{r4, r5, r6, pc}
			if(tmp > 16) return -1;
 80020aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020ae:	e7fb      	b.n	80020a8 <wizchip_init+0x7c>
			if(tmp > 16) return -1;
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020b4:	e7f8      	b.n	80020a8 <wizchip_init+0x7c>

080020b6 <wizchip_getinterrupt>:

#endif   
}

intr_kind wizchip_getinterrupt(void)
{
 80020b6:	b510      	push	{r4, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80020b8:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80020bc:	f7ff fa5a 	bl	8001574 <WIZCHIP_READ>
 80020c0:	f000 04f0 	and.w	r4, r0, #240	; 0xf0
   sir = getSIR();
 80020c4:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80020c8:	f7ff fa54 	bl	8001574 <WIZCHIP_READ>
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80020cc:	b280      	uxth	r0, r0
  ret = (ret << 8) + ir;
 80020ce:	0200      	lsls	r0, r0, #8
 80020d0:	b280      	uxth	r0, r0
 80020d2:	4420      	add	r0, r4
 80020d4:	b280      	uxth	r0, r0
  return (intr_kind)ret;
}
 80020d6:	bd10      	pop	{r4, pc}

080020d8 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80020d8:	b510      	push	{r4, lr}
   uint8_t imr  = (uint8_t)intr;
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80020da:	0a04      	lsrs	r4, r0, #8
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80020dc:	b2c1      	uxtb	r1, r0
 80020de:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80020e2:	f7ff fa79 	bl	80015d8 <WIZCHIP_WRITE>
   setSIMR(simr);
 80020e6:	4621      	mov	r1, r4
 80020e8:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80020ec:	f7ff fa74 	bl	80015d8 <WIZCHIP_WRITE>
#endif   
}
 80020f0:	bd10      	pop	{r4, pc}
	...

080020f4 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80020f4:	b510      	push	{r4, lr}
 80020f6:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 80020f8:	2206      	movs	r2, #6
 80020fa:	4601      	mov	r1, r0
 80020fc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002100:	f7ff fade 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002104:	2204      	movs	r2, #4
 8002106:	f104 010e 	add.w	r1, r4, #14
 800210a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800210e:	f7ff fad7 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002112:	2204      	movs	r2, #4
 8002114:	f104 010a 	add.w	r1, r4, #10
 8002118:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800211c:	f7ff fad0 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002120:	2204      	movs	r2, #4
 8002122:	1da1      	adds	r1, r4, #6
 8002124:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002128:	f7ff faca 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800212c:	7ca2      	ldrb	r2, [r4, #18]
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <wizchip_setnetinfo+0x54>)
 8002130:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002132:	7ce2      	ldrb	r2, [r4, #19]
 8002134:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002136:	7d22      	ldrb	r2, [r4, #20]
 8002138:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800213a:	7d62      	ldrb	r2, [r4, #21]
 800213c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800213e:	7da2      	ldrb	r2, [r4, #22]
 8002140:	4b02      	ldr	r3, [pc, #8]	; (800214c <wizchip_setnetinfo+0x58>)
 8002142:	701a      	strb	r2, [r3, #0]
}
 8002144:	bd10      	pop	{r4, pc}
 8002146:	bf00      	nop
 8002148:	20000180 	.word	0x20000180
 800214c:	2000017c 	.word	0x2000017c

08002150 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002150:	b510      	push	{r4, lr}
 8002152:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 8002154:	2206      	movs	r2, #6
 8002156:	4601      	mov	r1, r0
 8002158:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800215c:	f7ff fa70 	bl	8001640 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002160:	2204      	movs	r2, #4
 8002162:	f104 010e 	add.w	r1, r4, #14
 8002166:	f44f 7080 	mov.w	r0, #256	; 0x100
 800216a:	f7ff fa69 	bl	8001640 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800216e:	2204      	movs	r2, #4
 8002170:	f104 010a 	add.w	r1, r4, #10
 8002174:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002178:	f7ff fa62 	bl	8001640 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800217c:	2204      	movs	r2, #4
 800217e:	1da1      	adds	r1, r4, #6
 8002180:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002184:	f7ff fa5c 	bl	8001640 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <wizchip_getnetinfo+0x54>)
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800218e:	785a      	ldrb	r2, [r3, #1]
 8002190:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002192:	789a      	ldrb	r2, [r3, #2]
 8002194:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002196:	78db      	ldrb	r3, [r3, #3]
 8002198:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 800219a:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <wizchip_getnetinfo+0x58>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	75a3      	strb	r3, [r4, #22]
}
 80021a0:	bd10      	pop	{r4, pc}
 80021a2:	bf00      	nop
 80021a4:	20000180 	.word	0x20000180
 80021a8:	2000017c 	.word	0x2000017c

080021ac <mcp23017_init>:

#define I2C_TIMEOUT		10

void mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c, uint16_t addr)
{
	hdev->hi2c = hi2c;
 80021ac:	6001      	str	r1, [r0, #0]
	hdev->addr = addr << 1;
 80021ae:	0052      	lsls	r2, r2, #1
 80021b0:	8082      	strh	r2, [r0, #4]
}
 80021b2:	4770      	bx	lr

080021b4 <mcp23017_read>:

HAL_StatusTypeDef mcp23017_read(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 80021b4:	b510      	push	{r4, lr}
 80021b6:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Read(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 80021b8:	8884      	ldrh	r4, [r0, #4]
 80021ba:	6800      	ldr	r0, [r0, #0]
 80021bc:	230a      	movs	r3, #10
 80021be:	9302      	str	r3, [sp, #8]
 80021c0:	2301      	movs	r3, #1
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	9200      	str	r2, [sp, #0]
 80021c6:	460a      	mov	r2, r1
 80021c8:	4621      	mov	r1, r4
 80021ca:	f004 f9e9 	bl	80065a0 <HAL_I2C_Mem_Read>
}
 80021ce:	b004      	add	sp, #16
 80021d0:	bd10      	pop	{r4, pc}

080021d2 <mcp23017_write>:

HAL_StatusTypeDef mcp23017_write(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 80021d2:	b510      	push	{r4, lr}
 80021d4:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Write(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 80021d6:	8884      	ldrh	r4, [r0, #4]
 80021d8:	6800      	ldr	r0, [r0, #0]
 80021da:	230a      	movs	r3, #10
 80021dc:	9302      	str	r3, [sp, #8]
 80021de:	2301      	movs	r3, #1
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	9200      	str	r2, [sp, #0]
 80021e4:	460a      	mov	r2, r1
 80021e6:	4621      	mov	r1, r4
 80021e8:	f004 f926 	bl	8006438 <HAL_I2C_Mem_Write>
}
 80021ec:	b004      	add	sp, #16
 80021ee:	bd10      	pop	{r4, pc}

080021f0 <mcp23017_iodir>:

HAL_StatusTypeDef mcp23017_iodir(MCP23017_HandleTypeDef *hdev, uint8_t port, uint8_t iodir)
{
 80021f0:	b500      	push	{lr}
 80021f2:	b083      	sub	sp, #12
	uint8_t data[1] = {iodir};
 80021f4:	ab02      	add	r3, sp, #8
 80021f6:	f803 2d04 	strb.w	r2, [r3, #-4]!
	return mcp23017_write(hdev, REGISTER_IODIRA|port, data);
 80021fa:	461a      	mov	r2, r3
 80021fc:	f7ff ffe9 	bl	80021d2 <mcp23017_write>
}
 8002200:	b003      	add	sp, #12
 8002202:	f85d fb04 	ldr.w	pc, [sp], #4

08002206 <mcp23017_read_gpio>:
	uint8_t data[1] = {pu};
	return mcp23017_write(hdev, REGISTER_GPPUA|port, data);
}

HAL_StatusTypeDef mcp23017_read_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 8002206:	b530      	push	{r4, r5, lr}
 8002208:	b083      	sub	sp, #12
 800220a:	4604      	mov	r4, r0
 800220c:	460d      	mov	r5, r1
	uint8_t data[1];
	HAL_StatusTypeDef status;
	status = mcp23017_read(hdev, REGISTER_GPIOA|port, data);
 800220e:	aa01      	add	r2, sp, #4
 8002210:	f041 0112 	orr.w	r1, r1, #18
 8002214:	f7ff ffce 	bl	80021b4 <mcp23017_read>
	if (status == HAL_OK)
 8002218:	4603      	mov	r3, r0
 800221a:	b918      	cbnz	r0, 8002224 <mcp23017_read_gpio+0x1e>
		hdev->gpio[port] = data[0];
 800221c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002220:	442c      	add	r4, r5
 8002222:	71a2      	strb	r2, [r4, #6]
	return status;
}
 8002224:	4618      	mov	r0, r3
 8002226:	b003      	add	sp, #12
 8002228:	bd30      	pop	{r4, r5, pc}

0800222a <mcp23017_write_gpio>:

HAL_StatusTypeDef mcp23017_write_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 800222a:	b500      	push	{lr}
 800222c:	b083      	sub	sp, #12
	uint8_t data[1] = {hdev->gpio[port]};
 800222e:	1843      	adds	r3, r0, r1
 8002230:	799b      	ldrb	r3, [r3, #6]
 8002232:	aa02      	add	r2, sp, #8
 8002234:	f802 3d04 	strb.w	r3, [r2, #-4]!
	return mcp23017_write(hdev, REGISTER_GPIOA|port, data);
 8002238:	f041 0112 	orr.w	r1, r1, #18
 800223c:	f7ff ffc9 	bl	80021d2 <mcp23017_write>
}
 8002240:	b003      	add	sp, #12
 8002242:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002248 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8002248:	b500      	push	{lr}
 800224a:	b087      	sub	sp, #28
 800224c:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8002250:	2364      	movs	r3, #100	; 0x64
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	f10d 0217 	add.w	r2, sp, #23
 800225a:	f10d 010f 	add.w	r1, sp, #15
 800225e:	4804      	ldr	r0, [pc, #16]	; (8002270 <W25qxx_Spi+0x28>)
 8002260:	f005 faa7 	bl	80077b2 <HAL_SPI_TransmitReceive>
	return ret;	
}
 8002264:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002268:	b007      	add	sp, #28
 800226a:	f85d fb04 	ldr.w	pc, [sp], #4
 800226e:	bf00      	nop
 8002270:	20003354 	.word	0x20003354

08002274 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002274:	b570      	push	{r4, r5, r6, lr}
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
  FLASH_SELECT;
 8002276:	f000 fa63 	bl	8002740 <FLASH_ChipSelect>
  W25qxx_Spi(0x9F);
 800227a:	209f      	movs	r0, #159	; 0x9f
 800227c:	f7ff ffe4 	bl	8002248 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002280:	20a5      	movs	r0, #165	; 0xa5
 8002282:	f7ff ffe1 	bl	8002248 <W25qxx_Spi>
 8002286:	4606      	mov	r6, r0
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002288:	20a5      	movs	r0, #165	; 0xa5
 800228a:	f7ff ffdd 	bl	8002248 <W25qxx_Spi>
 800228e:	4604      	mov	r4, r0
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002290:	20a5      	movs	r0, #165	; 0xa5
 8002292:	f7ff ffd9 	bl	8002248 <W25qxx_Spi>
 8002296:	4605      	mov	r5, r0
  FLASH_DESELECT;
 8002298:	f000 fa64 	bl	8002764 <FLASH_ChipDeselect>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800229c:	0220      	lsls	r0, r4, #8
 800229e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
  return Temp;
}
 80022a2:	4328      	orrs	r0, r5
 80022a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080022a8 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80022a8:	b510      	push	{r4, lr}
  FLASH_SELECT;
 80022aa:	f000 fa49 	bl	8002740 <FLASH_ChipSelect>
  W25qxx_Spi(0x4B);
 80022ae:	204b      	movs	r0, #75	; 0x4b
 80022b0:	f7ff ffca 	bl	8002248 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80022b4:	2400      	movs	r4, #0
 80022b6:	e004      	b.n	80022c2 <W25qxx_ReadUniqID+0x1a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022b8:	20a5      	movs	r0, #165	; 0xa5
 80022ba:	f7ff ffc5 	bl	8002248 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80022be:	3401      	adds	r4, #1
 80022c0:	b2e4      	uxtb	r4, r4
 80022c2:	2c03      	cmp	r4, #3
 80022c4:	d9f8      	bls.n	80022b8 <W25qxx_ReadUniqID+0x10>
	for(uint8_t	i=0;i<8;i++)
 80022c6:	2400      	movs	r4, #0
 80022c8:	e007      	b.n	80022da <W25qxx_ReadUniqID+0x32>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022ca:	20a5      	movs	r0, #165	; 0xa5
 80022cc:	f7ff ffbc 	bl	8002248 <W25qxx_Spi>
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <W25qxx_ReadUniqID+0x3c>)
 80022d2:	4423      	add	r3, r4
 80022d4:	7058      	strb	r0, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 80022d6:	3401      	adds	r4, #1
 80022d8:	b2e4      	uxtb	r4, r4
 80022da:	2c07      	cmp	r4, #7
 80022dc:	d9f5      	bls.n	80022ca <W25qxx_ReadUniqID+0x22>
  FLASH_DESELECT;
 80022de:	f000 fa41 	bl	8002764 <FLASH_ChipDeselect>
}
 80022e2:	bd10      	pop	{r4, pc}
 80022e4:	20002ac8 	.word	0x20002ac8

080022e8 <W25qxx_ReadStatusRegister>:
  FLASH_DESELECT;
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 80022e8:	b510      	push	{r4, lr}
 80022ea:	4604      	mov	r4, r0
	uint8_t	status=0;
	FLASH_SELECT;
 80022ec:	f000 fa28 	bl	8002740 <FLASH_ChipSelect>
	if(SelectStatusRegister_1_2_3==1)
 80022f0:	2c01      	cmp	r4, #1
 80022f2:	d00f      	beq.n	8002314 <W25qxx_ReadStatusRegister+0x2c>
	{
		W25qxx_Spi(0x05);
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister1 = status;
	}
	else if(SelectStatusRegister_1_2_3==2)
 80022f4:	2c02      	cmp	r4, #2
 80022f6:	d018      	beq.n	800232a <W25qxx_ReadStatusRegister+0x42>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister2 = status;
	}
	else
	{
		W25qxx_Spi(0x15);
 80022f8:	2015      	movs	r0, #21
 80022fa:	f7ff ffa5 	bl	8002248 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80022fe:	20a5      	movs	r0, #165	; 0xa5
 8002300:	f7ff ffa2 	bl	8002248 <W25qxx_Spi>
 8002304:	4604      	mov	r4, r0
		w25qxx.StatusRegister3 = status;
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <W25qxx_ReadStatusRegister+0x58>)
 8002308:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	}	
	FLASH_DESELECT;
 800230c:	f000 fa2a 	bl	8002764 <FLASH_ChipDeselect>
	return status;
}
 8002310:	4620      	mov	r0, r4
 8002312:	bd10      	pop	{r4, pc}
		W25qxx_Spi(0x05);
 8002314:	2005      	movs	r0, #5
 8002316:	f7ff ff97 	bl	8002248 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 800231a:	20a5      	movs	r0, #165	; 0xa5
 800231c:	f7ff ff94 	bl	8002248 <W25qxx_Spi>
 8002320:	4604      	mov	r4, r0
		w25qxx.StatusRegister1 = status;
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <W25qxx_ReadStatusRegister+0x58>)
 8002324:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
 8002328:	e7f0      	b.n	800230c <W25qxx_ReadStatusRegister+0x24>
		W25qxx_Spi(0x35);
 800232a:	2035      	movs	r0, #53	; 0x35
 800232c:	f7ff ff8c 	bl	8002248 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8002330:	20a5      	movs	r0, #165	; 0xa5
 8002332:	f7ff ff89 	bl	8002248 <W25qxx_Spi>
 8002336:	4604      	mov	r4, r0
		w25qxx.StatusRegister2 = status;
 8002338:	4b01      	ldr	r3, [pc, #4]	; (8002340 <W25qxx_ReadStatusRegister+0x58>)
 800233a:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
 800233e:	e7e5      	b.n	800230c <W25qxx_ReadStatusRegister+0x24>
 8002340:	20002ac8 	.word	0x20002ac8

08002344 <W25qxx_Init>:
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 FLASH_DESELECT;
}
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8002344:	b510      	push	{r4, lr}
	w25qxx.Lock=1;	
 8002346:	4b42      	ldr	r3, [pc, #264]	; (8002450 <W25qxx_Init+0x10c>)
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 800234e:	e002      	b.n	8002356 <W25qxx_Init+0x12>
		W25qxx_Delay(1);
 8002350:	2001      	movs	r0, #1
 8002352:	f006 fb96 	bl	8008a82 <osDelay>
	while(HAL_GetTick()<100)
 8002356:	f002 ffe7 	bl	8005328 <HAL_GetTick>
 800235a:	2863      	cmp	r0, #99	; 0x63
 800235c:	d9f8      	bls.n	8002350 <W25qxx_Init+0xc>
  FLASH_DESELECT;
 800235e:	f000 fa01 	bl	8002764 <FLASH_ChipDeselect>
  W25qxx_Delay(100);
 8002362:	2064      	movs	r0, #100	; 0x64
 8002364:	f006 fb8d 	bl	8008a82 <osDelay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 8002368:	f7ff ff84 	bl	8002274 <W25qxx_ReadID>
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 800236c:	b280      	uxth	r0, r0
 800236e:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8002372:	3811      	subs	r0, #17
 8002374:	2809      	cmp	r0, #9
 8002376:	d866      	bhi.n	8002446 <W25qxx_Init+0x102>
 8002378:	e8df f000 	tbb	[pc, r0]
 800237c:	4d53595f 	.word	0x4d53595f
 8002380:	343b4147 	.word	0x343b4147
 8002384:	052d      	.short	0x052d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8002386:	4b32      	ldr	r3, [pc, #200]	; (8002450 <W25qxx_Init+0x10c>)
 8002388:	220a      	movs	r2, #10
 800238a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 800238c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002390:	61da      	str	r2, [r3, #28]
				#endif
			w25qxx.Lock=0;	
			return false;
				
	}		
	w25qxx.PageSize=256;
 8002392:	4c2f      	ldr	r4, [pc, #188]	; (8002450 <W25qxx_Init+0x10c>)
 8002394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002398:	8163      	strh	r3, [r4, #10]
	w25qxx.SectorSize=0x1000;
 800239a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800239e:	6123      	str	r3, [r4, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 80023a0:	69e3      	ldr	r3, [r4, #28]
 80023a2:	011a      	lsls	r2, r3, #4
 80023a4:	6162      	str	r2, [r4, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 80023a6:	041b      	lsls	r3, r3, #16
 80023a8:	0a1a      	lsrs	r2, r3, #8
 80023aa:	60e2      	str	r2, [r4, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 80023ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023b0:	61a2      	str	r2, [r4, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 80023b2:	0a9b      	lsrs	r3, r3, #10
 80023b4:	6223      	str	r3, [r4, #32]
	W25qxx_ReadUniqID();
 80023b6:	f7ff ff77 	bl	80022a8 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7ff ff94 	bl	80022e8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80023c0:	2002      	movs	r0, #2
 80023c2:	f7ff ff91 	bl	80022e8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80023c6:	2003      	movs	r0, #3
 80023c8:	f7ff ff8e 	bl	80022e8 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 80023cc:	2300      	movs	r3, #0
 80023ce:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return true;
 80023d2:	2001      	movs	r0, #1
}	
 80023d4:	bd10      	pop	{r4, pc}
			w25qxx.ID=W25Q256;
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <W25qxx_Init+0x10c>)
 80023d8:	2209      	movs	r2, #9
 80023da:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 80023dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e0:	61da      	str	r2, [r3, #28]
		break;
 80023e2:	e7d6      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q128;
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <W25qxx_Init+0x10c>)
 80023e6:	2208      	movs	r2, #8
 80023e8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 80023ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ee:	61da      	str	r2, [r3, #28]
		break;
 80023f0:	e7cf      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q64;
 80023f2:	4b17      	ldr	r3, [pc, #92]	; (8002450 <W25qxx_Init+0x10c>)
 80023f4:	2207      	movs	r2, #7
 80023f6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	61da      	str	r2, [r3, #28]
		break;
 80023fc:	e7c9      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q32;
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <W25qxx_Init+0x10c>)
 8002400:	2206      	movs	r2, #6
 8002402:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8002404:	2240      	movs	r2, #64	; 0x40
 8002406:	61da      	str	r2, [r3, #28]
		break;
 8002408:	e7c3      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q16;
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <W25qxx_Init+0x10c>)
 800240c:	2205      	movs	r2, #5
 800240e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8002410:	2220      	movs	r2, #32
 8002412:	61da      	str	r2, [r3, #28]
		break;
 8002414:	e7bd      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q80;
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <W25qxx_Init+0x10c>)
 8002418:	2204      	movs	r2, #4
 800241a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 800241c:	2210      	movs	r2, #16
 800241e:	61da      	str	r2, [r3, #28]
		break;
 8002420:	e7b7      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q40;
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <W25qxx_Init+0x10c>)
 8002424:	2203      	movs	r2, #3
 8002426:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8002428:	2208      	movs	r2, #8
 800242a:	61da      	str	r2, [r3, #28]
		break;
 800242c:	e7b1      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q20;
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <W25qxx_Init+0x10c>)
 8002430:	2202      	movs	r2, #2
 8002432:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8002434:	2204      	movs	r2, #4
 8002436:	61da      	str	r2, [r3, #28]
		break;
 8002438:	e7ab      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q10;
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <W25qxx_Init+0x10c>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8002440:	2202      	movs	r2, #2
 8002442:	61da      	str	r2, [r3, #28]
		break;
 8002444:	e7a5      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.Lock=0;	
 8002446:	2000      	movs	r0, #0
 8002448:	4b01      	ldr	r3, [pc, #4]	; (8002450 <W25qxx_Init+0x10c>)
 800244a:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
			return false;
 800244e:	e7c1      	b.n	80023d4 <W25qxx_Init+0x90>
 8002450:	20002ac8 	.word	0x20002ac8

08002454 <vModbusInit>:
#include "Modbus.h"
#include "../RuntimeStats/RuntimeStats.h"

void vModbusInit (ModbusHandler *modbus, UART_HandleTypeDef *port, TickType_t timeout){
	modbus -> ModbusSerialPort = port;
 8002454:	6001      	str	r1, [r0, #0]
	modbus -> timeout_t = timeout / portTICK_PERIOD_MS;
 8002456:	6042      	str	r2, [r0, #4]
}
 8002458:	4770      	bx	lr

0800245a <uModbusCalculateCRC>:

uint16_t uModbusCalculateCRC (uint8_t frame_length, uint8_t *frame){
 800245a:	b430      	push	{r4, r5}
	uint16_t calculatedCRC = 0xFFFF;
	uint16_t CRChigh, CRClow;
	for(int i = 0; i < frame_length; i++){
 800245c:	2500      	movs	r5, #0
	uint16_t calculatedCRC = 0xFFFF;
 800245e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	for(int i = 0; i < frame_length; i++){
 8002462:	e00d      	b.n	8002480 <uModbusCalculateCRC+0x26>
		for(int j = 8; j > 0; j--){
			if(calculatedCRC & 0x0001){
				calculatedCRC >>= 1;
				calculatedCRC ^= 0xA001;
			}else{
				calculatedCRC >>= 1;
 8002464:	085b      	lsrs	r3, r3, #1
		for(int j = 8; j > 0; j--){
 8002466:	3a01      	subs	r2, #1
 8002468:	2a00      	cmp	r2, #0
 800246a:	dd07      	ble.n	800247c <uModbusCalculateCRC+0x22>
			if(calculatedCRC & 0x0001){
 800246c:	f013 0f01 	tst.w	r3, #1
 8002470:	d0f8      	beq.n	8002464 <uModbusCalculateCRC+0xa>
				calculatedCRC ^= 0xA001;
 8002472:	f24a 0401 	movw	r4, #40961	; 0xa001
 8002476:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
 800247a:	e7f4      	b.n	8002466 <uModbusCalculateCRC+0xc>
			}
		}
		frame++;
 800247c:	3101      	adds	r1, #1
	for(int i = 0; i < frame_length; i++){
 800247e:	3501      	adds	r5, #1
 8002480:	42a8      	cmp	r0, r5
 8002482:	dd03      	ble.n	800248c <uModbusCalculateCRC+0x32>
		calculatedCRC ^= (*frame);
 8002484:	780a      	ldrb	r2, [r1, #0]
 8002486:	4053      	eors	r3, r2
		for(int j = 8; j > 0; j--){
 8002488:	2208      	movs	r2, #8
 800248a:	e7ed      	b.n	8002468 <uModbusCalculateCRC+0xe>
	}

	CRChigh = (calculatedCRC & 0x00FF) <<8;
 800248c:	0218      	lsls	r0, r3, #8
 800248e:	b280      	uxth	r0, r0
	CRClow = (calculatedCRC & 0xFF00) >>8;
	calculatedCRC = CRChigh + CRClow;
 8002490:	eb00 2013 	add.w	r0, r0, r3, lsr #8

	//calculatedCRC = HAL_CRC_Calculate(&hcrc, frame, frame_length);
	return calculatedCRC;
}
 8002494:	b280      	uxth	r0, r0
 8002496:	bc30      	pop	{r4, r5}
 8002498:	4770      	bx	lr

0800249a <bModbusCheckCRC>:

uint8_t bModbusCheckCRC (uint8_t frame_length, uint8_t *frame){
 800249a:	b570      	push	{r4, r5, r6, lr}
 800249c:	4604      	mov	r4, r0
 800249e:	460d      	mov	r5, r1
	uint16_t crc = uModbusCalculateCRC(frame_length - 2, frame);
 80024a0:	1e86      	subs	r6, r0, #2
 80024a2:	b2f0      	uxtb	r0, r6
 80024a4:	f7ff ffd9 	bl	800245a <uModbusCalculateCRC>
	uint16_t frameCRC = (uint16_t)(*(frame + frame_length - 2));
 80024a8:	5daa      	ldrb	r2, [r5, r6]
	frameCRC <<= 8;
	frameCRC += *(frame + frame_length - 1);
 80024aa:	3c01      	subs	r4, #1
 80024ac:	5d2b      	ldrb	r3, [r5, r4]
 80024ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80024b2:	b29b      	uxth	r3, r3

	if(crc == frameCRC){
 80024b4:	4298      	cmp	r0, r3
 80024b6:	d001      	beq.n	80024bc <bModbusCheckCRC+0x22>
		return 1;
	}

	return 0;
 80024b8:	2000      	movs	r0, #0
}
 80024ba:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 80024bc:	2001      	movs	r0, #1
 80024be:	e7fc      	b.n	80024ba <bModbusCheckCRC+0x20>

080024c0 <vModbusReadInputRegisters>:
	}
	RuntimeStats_ModbusMasterWrongRespInc();
	return Modbus_CRCERR;
}

ModbusState vModbusReadInputRegisters (ModbusHandler *modbus, uint8_t slave_address, uint16_t first_register_address, uint16_t registers_count, uint8_t *response_frame){
 80024c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4606      	mov	r6, r0
 80024ca:	4689      	mov	r9, r1
 80024cc:	f8d7 8030 	ldr.w	r8, [r7, #48]	; 0x30
	uint8_t transmit_frame_buffer[8];
	uint16_t transmitCRC;
	uint8_t received_frame_length = (registers_count * 2) + 5;
 80024d0:	fa5f fe83 	uxtb.w	lr, r3
 80024d4:	ea4f 054e 	mov.w	r5, lr, lsl #1
 80024d8:	b2ed      	uxtb	r5, r5
 80024da:	3505      	adds	r5, #5
 80024dc:	b2ed      	uxtb	r5, r5
	uint8_t received_frame_buffer[received_frame_length];
 80024de:	46ac      	mov	ip, r5
 80024e0:	1de9      	adds	r1, r5, #7
 80024e2:	f401 71fc 	and.w	r1, r1, #504	; 0x1f8
 80024e6:	ebad 0d01 	sub.w	sp, sp, r1
 80024ea:	466c      	mov	r4, sp
	uint32_t ulNotificationValue;
	for(int i = 0; i < received_frame_length; i++){
 80024ec:	2100      	movs	r1, #0
 80024ee:	e002      	b.n	80024f6 <vModbusReadInputRegisters+0x36>
		received_frame_buffer[i] = 0;
 80024f0:	2000      	movs	r0, #0
 80024f2:	5460      	strb	r0, [r4, r1]
	for(int i = 0; i < received_frame_length; i++){
 80024f4:	3101      	adds	r1, #1
 80024f6:	458c      	cmp	ip, r1
 80024f8:	dcfa      	bgt.n	80024f0 <vModbusReadInputRegisters+0x30>

	}
	transmit_frame_buffer[0] = slave_address;
 80024fa:	f887 9000 	strb.w	r9, [r7]
	transmit_frame_buffer[1] = 0x04;
 80024fe:	2104      	movs	r1, #4
 8002500:	7079      	strb	r1, [r7, #1]
	transmit_frame_buffer[2] = (uint8_t)(first_register_address >> 8);
 8002502:	0a11      	lsrs	r1, r2, #8
 8002504:	70b9      	strb	r1, [r7, #2]
	transmit_frame_buffer[3] = (uint8_t)first_register_address;
 8002506:	70fa      	strb	r2, [r7, #3]
	transmit_frame_buffer[4] = (uint8_t)(registers_count >> 8);
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	713b      	strb	r3, [r7, #4]
	transmit_frame_buffer[5] = (uint8_t)(registers_count);
 800250c:	f887 e005 	strb.w	lr, [r7, #5]
	transmitCRC = uModbusCalculateCRC (6, transmit_frame_buffer);
 8002510:	4639      	mov	r1, r7
 8002512:	2006      	movs	r0, #6
 8002514:	f7ff ffa1 	bl	800245a <uModbusCalculateCRC>
	transmit_frame_buffer[6] = (transmitCRC >> 8);
 8002518:	0a03      	lsrs	r3, r0, #8
 800251a:	71bb      	strb	r3, [r7, #6]
	transmit_frame_buffer[7] = (uint8_t)(transmitCRC);
 800251c:	71f8      	strb	r0, [r7, #7]

	//Wy�lij dane;
	HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_SET);
 800251e:	2201      	movs	r2, #1
 8002520:	2102      	movs	r1, #2
 8002522:	482d      	ldr	r0, [pc, #180]	; (80025d8 <vModbusReadInputRegisters+0x118>)
 8002524:	f003 fc4d 	bl	8005dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 8002528:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80025dc <vModbusReadInputRegisters+0x11c>
 800252c:	2200      	movs	r2, #0
 800252e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002532:	4650      	mov	r0, sl
 8002534:	f003 fc45 	bl	8005dc2 <HAL_GPIO_WritePin>
	RuntimeStats_ModbusMasterRqSendInc();
 8002538:	f000 f8ca 	bl	80026d0 <RuntimeStats_ModbusMasterRqSendInc>
	HAL_UART_Transmit_IT(modbus -> ModbusSerialPort, transmit_frame_buffer, 8);
 800253c:	2208      	movs	r2, #8
 800253e:	4639      	mov	r1, r7
 8002540:	6830      	ldr	r0, [r6, #0]
 8002542:	f006 f834 	bl	80085ae <HAL_UART_Transmit_IT>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 8002546:	6871      	ldr	r1, [r6, #4]
 8002548:	2001      	movs	r0, #1
 800254a:	f007 ffad 	bl	800a4a8 <ulTaskNotifyTake>
	HAL_UART_Receive_DMA(modbus -> ModbusSerialPort, received_frame_buffer, received_frame_length);
 800254e:	462a      	mov	r2, r5
 8002550:	4621      	mov	r1, r4
 8002552:	6830      	ldr	r0, [r6, #0]
 8002554:	f006 f850 	bl	80085f8 <HAL_UART_Receive_DMA>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 8002558:	6871      	ldr	r1, [r6, #4]
 800255a:	2001      	movs	r0, #1
 800255c:	f007 ffa4 	bl	800a4a8 <ulTaskNotifyTake>
 8002560:	4683      	mov	fp, r0
	vTaskDelay(1);
 8002562:	2001      	movs	r0, #1
 8002564:	f007 fb90 	bl	8009c88 <vTaskDelay>
	HAL_UART_AbortTransmit(modbus -> ModbusSerialPort);
 8002568:	6830      	ldr	r0, [r6, #0]
 800256a:	f006 f899 	bl	80086a0 <HAL_UART_AbortTransmit>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 800256e:	2201      	movs	r2, #1
 8002570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002574:	4650      	mov	r0, sl
 8002576:	f003 fc24 	bl	8005dc2 <HAL_GPIO_WritePin>
	if(ulNotificationValue){
 800257a:	f1bb 0f00 	cmp.w	fp, #0
 800257e:	d024      	beq.n	80025ca <vModbusReadInputRegisters+0x10a>
		if(bModbusCheckCRC(received_frame_length, received_frame_buffer)){
 8002580:	4621      	mov	r1, r4
 8002582:	4628      	mov	r0, r5
 8002584:	f7ff ff89 	bl	800249a <bModbusCheckCRC>
 8002588:	b1d8      	cbz	r0, 80025c2 <vModbusReadInputRegisters+0x102>
			if(received_frame_buffer[0] == slave_address && received_frame_buffer[1] == 0x04){
 800258a:	7823      	ldrb	r3, [r4, #0]
 800258c:	454b      	cmp	r3, r9
 800258e:	d111      	bne.n	80025b4 <vModbusReadInputRegisters+0xf4>
 8002590:	7863      	ldrb	r3, [r4, #1]
 8002592:	2b04      	cmp	r3, #4
 8002594:	d10e      	bne.n	80025b4 <vModbusReadInputRegisters+0xf4>
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 8002596:	2200      	movs	r2, #0
 8002598:	78a3      	ldrb	r3, [r4, #2]
 800259a:	3302      	adds	r3, #2
 800259c:	429a      	cmp	r2, r3
 800259e:	da05      	bge.n	80025ac <vModbusReadInputRegisters+0xec>
					*response_frame = received_frame_buffer[i + 3];
 80025a0:	1cd3      	adds	r3, r2, #3
 80025a2:	5ce3      	ldrb	r3, [r4, r3]
 80025a4:	f808 3b01 	strb.w	r3, [r8], #1
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 80025a8:	3201      	adds	r2, #1
 80025aa:	e7f5      	b.n	8002598 <vModbusReadInputRegisters+0xd8>
					response_frame++;
				}
				RuntimeStats_ModbusMasterRespOkInc();
 80025ac:	f000 f8a0 	bl	80026f0 <RuntimeStats_ModbusMasterRespOkInc>
				return Modbus_OK;
 80025b0:	2000      	movs	r0, #0
 80025b2:	e002      	b.n	80025ba <vModbusReadInputRegisters+0xfa>
			}
			RuntimeStats_ModbusMasterWrongRespInc();
 80025b4:	f000 f8a4 	bl	8002700 <RuntimeStats_ModbusMasterWrongRespInc>
			return Modbus_CRCERR;
 80025b8:	2002      	movs	r0, #2
		RuntimeStats_ModbusMasterNoRespInc();
		return Modbus_TIMEOUT;
	}
	RuntimeStats_ModbusMasterWrongRespInc();
	return Modbus_CRCERR;
}
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		RuntimeStats_ModbusMasterWrongRespInc();
 80025c2:	f000 f89d 	bl	8002700 <RuntimeStats_ModbusMasterWrongRespInc>
		return Modbus_CRCERR;
 80025c6:	2002      	movs	r0, #2
 80025c8:	e7f7      	b.n	80025ba <vModbusReadInputRegisters+0xfa>
		HAL_UART_AbortReceive_IT(modbus -> ModbusSerialPort);
 80025ca:	6830      	ldr	r0, [r6, #0]
 80025cc:	f006 f9da 	bl	8008984 <HAL_UART_AbortReceive_IT>
		RuntimeStats_ModbusMasterNoRespInc();
 80025d0:	f000 f886 	bl	80026e0 <RuntimeStats_ModbusMasterNoRespInc>
		return Modbus_TIMEOUT;
 80025d4:	2001      	movs	r0, #1
 80025d6:	e7f0      	b.n	80025ba <vModbusReadInputRegisters+0xfa>
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020800 	.word	0x40020800

080025e0 <RB_CreateBuffer>:

RB_Status RB_CreateBuffer(RingBuffer *Buffer, uint8_t Size)
{
	//*Buffer = malloc(sizeof(RingBuffer) + (sizeof(uint8_t) * Size));

	if(Buffer == NULL)
 80025e0:	4603      	mov	r3, r0
 80025e2:	b130      	cbz	r0, 80025f2 <RB_CreateBuffer+0x12>
	{
		return RB_NOTCREATED;
	}

	(Buffer)->Size = 32;
 80025e4:	2220      	movs	r2, #32
 80025e6:	7002      	strb	r2, [r0, #0]
	(Buffer)->Head = 0;
 80025e8:	2000      	movs	r0, #0
 80025ea:	7058      	strb	r0, [r3, #1]
	(Buffer)->Tail = 0;
 80025ec:	7098      	strb	r0, [r3, #2]
	(Buffer)->Elements = 0;
 80025ee:	70d8      	strb	r0, [r3, #3]

	return RB_OK;
 80025f0:	4770      	bx	lr
		return RB_NOTCREATED;
 80025f2:	2002      	movs	r0, #2
}
 80025f4:	4770      	bx	lr

080025f6 <RB_WriteToBuffer>:

RB_Status RB_WriteToBuffer(RingBuffer *Buffer, uint8_t Data)
{
 80025f6:	b430      	push	{r4, r5}
	uint8_t TempHead;

	TempHead = (Buffer->Head + 1) % Buffer->Size;
 80025f8:	7843      	ldrb	r3, [r0, #1]
 80025fa:	1c5d      	adds	r5, r3, #1
 80025fc:	7804      	ldrb	r4, [r0, #0]
 80025fe:	fb95 f2f4 	sdiv	r2, r5, r4
 8002602:	fb04 5212 	mls	r2, r4, r2, r5
 8002606:	b2d2      	uxtb	r2, r2

	if( TempHead == Buffer->Tail) // No room for new data
 8002608:	7885      	ldrb	r5, [r0, #2]
 800260a:	4295      	cmp	r5, r2
 800260c:	d00e      	beq.n	800262c <RB_WriteToBuffer+0x36>
	{
		return RB_NOFREESPACE;
	}
	else
	{
		Buffer->Buffer[Buffer->Head] = Data;
 800260e:	18c2      	adds	r2, r0, r3
 8002610:	7111      	strb	r1, [r2, #4]

		Buffer->Head++;
 8002612:	3301      	adds	r3, #1
 8002614:	b2db      	uxtb	r3, r3
		Buffer->Head %= Buffer->Size;
 8002616:	fbb3 f2f4 	udiv	r2, r3, r4
 800261a:	fb04 3312 	mls	r3, r4, r2, r3
 800261e:	7043      	strb	r3, [r0, #1]

		Buffer->Elements++;
 8002620:	78c3      	ldrb	r3, [r0, #3]
 8002622:	3301      	adds	r3, #1
 8002624:	70c3      	strb	r3, [r0, #3]
	}

	return RB_OK;
 8002626:	2000      	movs	r0, #0
}
 8002628:	bc30      	pop	{r4, r5}
 800262a:	4770      	bx	lr
		return RB_NOFREESPACE;
 800262c:	2003      	movs	r0, #3
 800262e:	e7fb      	b.n	8002628 <RB_WriteToBuffer+0x32>

08002630 <RB_ReadFromBuffer>:

RB_Status RB_ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
	if( Buffer->Tail == Buffer->Head) // No data to read
 8002630:	7883      	ldrb	r3, [r0, #2]
 8002632:	7842      	ldrb	r2, [r0, #1]
 8002634:	4293      	cmp	r3, r2
 8002636:	d010      	beq.n	800265a <RB_ReadFromBuffer+0x2a>
	{
		return RB_NOELEMENTS;
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 8002638:	4403      	add	r3, r0
 800263a:	791b      	ldrb	r3, [r3, #4]
 800263c:	700b      	strb	r3, [r1, #0]

		Buffer->Tail++;
 800263e:	7883      	ldrb	r3, [r0, #2]
 8002640:	3301      	adds	r3, #1
 8002642:	b2db      	uxtb	r3, r3
		Buffer->Tail %= Buffer->Size;
 8002644:	7801      	ldrb	r1, [r0, #0]
 8002646:	fbb3 f2f1 	udiv	r2, r3, r1
 800264a:	fb01 3312 	mls	r3, r1, r2, r3
 800264e:	7083      	strb	r3, [r0, #2]

		Buffer->Elements--;
 8002650:	78c3      	ldrb	r3, [r0, #3]
 8002652:	3b01      	subs	r3, #1
 8002654:	70c3      	strb	r3, [r0, #3]
	}
	return RB_OK;
 8002656:	2000      	movs	r0, #0
 8002658:	4770      	bx	lr
		return RB_NOELEMENTS;
 800265a:	2004      	movs	r0, #4
}
 800265c:	4770      	bx	lr

0800265e <RB_ElementsAvailable>:

uint8_t RB_ElementsAvailable(RingBuffer *Buffer)
{
	return Buffer->Elements;
}
 800265e:	78c0      	ldrb	r0, [r0, #3]
 8002660:	4770      	bx	lr
	...

08002664 <RuntimeStats_TelnetRxInc>:
void RuntimeStats_Init(void){
	memset(&commStats, 0, 48);
}

void RuntimeStats_TelnetRxInc (void){
	commStats.telnetStats.rxFrames++;
 8002664:	4a02      	ldr	r2, [pc, #8]	; (8002670 <RuntimeStats_TelnetRxInc+0xc>)
 8002666:	6813      	ldr	r3, [r2, #0]
 8002668:	3301      	adds	r3, #1
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20002af0 	.word	0x20002af0

08002674 <RuntimeStats_TelnetTxInc>:

void RuntimeStats_TelnetTxInc (void){
	commStats.telnetStats.txFrames++;
 8002674:	4a02      	ldr	r2, [pc, #8]	; (8002680 <RuntimeStats_TelnetTxInc+0xc>)
 8002676:	6853      	ldr	r3, [r2, #4]
 8002678:	3301      	adds	r3, #1
 800267a:	6053      	str	r3, [r2, #4]
}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20002af0 	.word	0x20002af0

08002684 <RuntimeStats_TelnetCurrIPSet>:

void RuntimeStats_TelnetCurrIPSet (uint8_t* ip){
	memcpy(&(commStats.telnetStats.currIP), ip, 4);
 8002684:	6802      	ldr	r2, [r0, #0]
 8002686:	4b01      	ldr	r3, [pc, #4]	; (800268c <RuntimeStats_TelnetCurrIPSet+0x8>)
 8002688:	609a      	str	r2, [r3, #8]
}
 800268a:	4770      	bx	lr
 800268c:	20002af0 	.word	0x20002af0

08002690 <RuntimeStats_TelnetLastIPSet>:

void RuntimeStats_TelnetLastIPSet (void){
	memcpy(&(commStats.telnetStats.lastIP), &(commStats.telnetStats.currIP), 4);
 8002690:	4b02      	ldr	r3, [pc, #8]	; (800269c <RuntimeStats_TelnetLastIPSet+0xc>)
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
	memset(&(commStats.telnetStats.currIP), 0, 4);
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
}
 800269a:	4770      	bx	lr
 800269c:	20002af0 	.word	0x20002af0

080026a0 <RuntimeStats_TelnetGetRxCnt>:

uint32_t RuntimeStats_TelnetGetRxCnt (void){
	return commStats.telnetStats.rxFrames;
}
 80026a0:	4b01      	ldr	r3, [pc, #4]	; (80026a8 <RuntimeStats_TelnetGetRxCnt+0x8>)
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20002af0 	.word	0x20002af0

080026ac <RuntimeStats_TelnetGetTxCnt>:

uint32_t RuntimeStats_TelnetGetTxCnt (void){
	return commStats.telnetStats.txFrames;
}
 80026ac:	4b01      	ldr	r3, [pc, #4]	; (80026b4 <RuntimeStats_TelnetGetTxCnt+0x8>)
 80026ae:	6858      	ldr	r0, [r3, #4]
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20002af0 	.word	0x20002af0

080026b8 <RuntimeStats_TelnetGetCurIP>:

void RuntimeStats_TelnetGetCurIP (uint8_t* ip){
	memcpy(ip, &(commStats.telnetStats.currIP), 4);
 80026b8:	4b01      	ldr	r3, [pc, #4]	; (80026c0 <RuntimeStats_TelnetGetCurIP+0x8>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	6003      	str	r3, [r0, #0]
}
 80026be:	4770      	bx	lr
 80026c0:	20002af0 	.word	0x20002af0

080026c4 <RuntimeStats_TelnetGetLastIP>:

void RuntimeStats_TelnetGetLastIP (uint8_t* ip){
	memcpy(ip, &(commStats.telnetStats.lastIP), 4);
 80026c4:	4b01      	ldr	r3, [pc, #4]	; (80026cc <RuntimeStats_TelnetGetLastIP+0x8>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	6003      	str	r3, [r0, #0]
}
 80026ca:	4770      	bx	lr
 80026cc:	20002af0 	.word	0x20002af0

080026d0 <RuntimeStats_ModbusMasterRqSendInc>:

void RuntimeStats_ModbusMasterRqSendInc (void){
	commStats.mdMAsterStats.rqSend ++;
 80026d0:	4a02      	ldr	r2, [pc, #8]	; (80026dc <RuntimeStats_ModbusMasterRqSendInc+0xc>)
 80026d2:	6a13      	ldr	r3, [r2, #32]
 80026d4:	3301      	adds	r3, #1
 80026d6:	6213      	str	r3, [r2, #32]
}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20002af0 	.word	0x20002af0

080026e0 <RuntimeStats_ModbusMasterNoRespInc>:

void RuntimeStats_ModbusMasterNoRespInc (void){
	commStats.mdMAsterStats.noResp ++;
 80026e0:	4a02      	ldr	r2, [pc, #8]	; (80026ec <RuntimeStats_ModbusMasterNoRespInc+0xc>)
 80026e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80026e4:	3301      	adds	r3, #1
 80026e6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20002af0 	.word	0x20002af0

080026f0 <RuntimeStats_ModbusMasterRespOkInc>:

void RuntimeStats_ModbusMasterRespOkInc (void){
	commStats.mdMAsterStats.respOk ++;
 80026f0:	4a02      	ldr	r2, [pc, #8]	; (80026fc <RuntimeStats_ModbusMasterRespOkInc+0xc>)
 80026f2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80026f4:	3301      	adds	r3, #1
 80026f6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20002af0 	.word	0x20002af0

08002700 <RuntimeStats_ModbusMasterWrongRespInc>:

void RuntimeStats_ModbusMasterWrongRespInc (void){
	commStats.mdMAsterStats.wrongRq ++;
 8002700:	4a02      	ldr	r2, [pc, #8]	; (800270c <RuntimeStats_ModbusMasterWrongRespInc+0xc>)
 8002702:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002704:	3301      	adds	r3, #1
 8002706:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20002af0 	.word	0x20002af0

08002710 <RuntimeStats_ModbusMasterRqSendGet>:

uint32_t RuntimeStats_ModbusMasterRqSendGet (void){
	return commStats.mdMAsterStats.rqSend;
}
 8002710:	4b01      	ldr	r3, [pc, #4]	; (8002718 <RuntimeStats_ModbusMasterRqSendGet+0x8>)
 8002712:	6a18      	ldr	r0, [r3, #32]
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20002af0 	.word	0x20002af0

0800271c <RuntimeStats_ModbusMasterNoRespGet>:

uint32_t RuntimeStats_ModbusMasterNoRespGet (void){
	return commStats.mdMAsterStats.noResp;
}
 800271c:	4b01      	ldr	r3, [pc, #4]	; (8002724 <RuntimeStats_ModbusMasterNoRespGet+0x8>)
 800271e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20002af0 	.word	0x20002af0

08002728 <RuntimeStats_ModbusMasterRespOkGet>:

uint32_t RuntimeStats_ModbusMasterRespOkGet (void){
	return commStats.mdMAsterStats.respOk;
}
 8002728:	4b01      	ldr	r3, [pc, #4]	; (8002730 <RuntimeStats_ModbusMasterRespOkGet+0x8>)
 800272a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20002af0 	.word	0x20002af0

08002734 <RuntimeStats_ModbusMasterWrongRespGet>:

uint32_t RuntimeStats_ModbusMasterWrongRespGet (void){
	return commStats.mdMAsterStats.wrongRq;
}
 8002734:	4b01      	ldr	r3, [pc, #4]	; (800273c <RuntimeStats_ModbusMasterWrongRespGet+0x8>)
 8002736:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20002af0 	.word	0x20002af0

08002740 <FLASH_ChipSelect>:

extern osMutexId SPIMutexHandle;



void FLASH_ChipSelect (void){
 8002740:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 8002742:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <FLASH_ChipSelect+0x1c>)
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	f006 fd7b 	bl	8009244 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 800274e:	2200      	movs	r2, #0
 8002750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <FLASH_ChipSelect+0x20>)
 8002756:	f003 fb34 	bl	8005dc2 <HAL_GPIO_WritePin>
}
 800275a:	bd08      	pop	{r3, pc}
 800275c:	20003430 	.word	0x20003430
 8002760:	40020400 	.word	0x40020400

08002764 <FLASH_ChipDeselect>:

void FLASH_ChipDeselect (void){
 8002764:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8002766:	2201      	movs	r2, #1
 8002768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800276c:	4805      	ldr	r0, [pc, #20]	; (8002784 <FLASH_ChipDeselect+0x20>)
 800276e:	f003 fb28 	bl	8005dc2 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8002772:	2300      	movs	r3, #0
 8002774:	461a      	mov	r2, r3
 8002776:	4619      	mov	r1, r3
 8002778:	4803      	ldr	r0, [pc, #12]	; (8002788 <FLASH_ChipDeselect+0x24>)
 800277a:	6800      	ldr	r0, [r0, #0]
 800277c:	f006 fb6c 	bl	8008e58 <xQueueGenericSend>
}
 8002780:	bd08      	pop	{r3, pc}
 8002782:	bf00      	nop
 8002784:	40020400 	.word	0x40020400
 8002788:	20003430 	.word	0x20003430

0800278c <DataLogTask>:

void DataLogTask(void const * argument)
{
 800278c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DataLog */
	W25qxx_Init();
 800278e:	f7ff fdd9 	bl	8002344 <W25qxx_Init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002792:	2001      	movs	r0, #1
 8002794:	f006 f975 	bl	8008a82 <osDelay>
 8002798:	e7fb      	b.n	8002792 <DataLogTask+0x6>
	...

0800279c <nextion_SendData>:
static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3);
static void nextion_SendConfig(UART_HandleTypeDef* uart);
void NextionBig_DataRcv (void);
void NextionSmall_DataRcv (void);

static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3){
 800279c:	b530      	push	{r4, r5, lr}
 800279e:	b08d      	sub	sp, #52	; 0x34
	char buffor_to_send[40];
	uint8_t buffor_to_send_size;
	current_command = cmd;
 80027a0:	4c28      	ldr	r4, [pc, #160]	; (8002844 <nextion_SendData+0xa8>)
 80027a2:	7021      	strb	r1, [r4, #0]
	if(cmd < NEX_COMMANDS_COUNT && cmd > -1){
 80027a4:	2921      	cmp	r1, #33	; 0x21
 80027a6:	d84b      	bhi.n	8002840 <nextion_SendData+0xa4>
 80027a8:	4605      	mov	r5, r0
		if(cmd == NEX_WAKE || cmd == NEX_SENDME || cmd == NEX_SETTINGS_SAVED || cmd == NEX_SETTINGS_NOT_SAVED
 80027aa:	2901      	cmp	r1, #1
 80027ac:	d919      	bls.n	80027e2 <nextion_SendData+0x46>
 80027ae:	2911      	cmp	r1, #17
 80027b0:	d017      	beq.n	80027e2 <nextion_SendData+0x46>
 80027b2:	2912      	cmp	r1, #18
 80027b4:	d015      	beq.n	80027e2 <nextion_SendData+0x46>
			|| cmd == NEX_SETTINGS_LOCK || cmd == NEX_SETTINGS_UNLOCK){
 80027b6:	2921      	cmp	r1, #33	; 0x21
 80027b8:	d013      	beq.n	80027e2 <nextion_SendData+0x46>
 80027ba:	2920      	cmp	r1, #32
 80027bc:	d011      	beq.n	80027e2 <nextion_SendData+0x46>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
		}else if(cmd == NEX_PHASE_VOLTAGE ||
			cmd == NEX_PHASE_CURRENT ||
 80027be:	f1a1 0018 	sub.w	r0, r1, #24
 80027c2:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_VOLTAGE ||
 80027c4:	2802      	cmp	r0, #2
 80027c6:	d916      	bls.n	80027f6 <nextion_SendData+0x5a>
			cmd == NEX_PHASE_POWER){
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
		}else if(cmd == NEX_PHASE_PRG_BAR ||
			cmd == NEX_CO_HEATER_PHASE_DUTY ||
			cmd == NEX_CWU_HEATER_PHASE_DUTY ||
			cmd == NEX_CWU_TEMP || cmd == NEX_CO_TEMP){
 80027c8:	f1a1 001b 	sub.w	r0, r1, #27
 80027cc:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_PRG_BAR ||
 80027ce:	2804      	cmp	r0, #4
 80027d0:	d81b      	bhi.n	800280a <nextion_SendData+0x6e>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2);
 80027d2:	481d      	ldr	r0, [pc, #116]	; (8002848 <nextion_SendData+0xac>)
 80027d4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80027d8:	a802      	add	r0, sp, #8
 80027da:	f009 fa65 	bl	800bca8 <siprintf>
 80027de:	b2c2      	uxtb	r2, r0
 80027e0:	e006      	b.n	80027f0 <nextion_SendData+0x54>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <nextion_SendData+0xac>)
 80027e4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80027e8:	a802      	add	r0, sp, #8
 80027ea:	f009 fa5d 	bl	800bca8 <siprintf>
 80027ee:	b2c2      	uxtb	r2, r0
		}else{
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
		}
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 80027f0:	4610      	mov	r0, r2
 80027f2:	4613      	mov	r3, r2
 80027f4:	e017      	b.n	8002826 <nextion_SendData+0x8a>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
 80027f6:	4814      	ldr	r0, [pc, #80]	; (8002848 <nextion_SendData+0xac>)
 80027f8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80027fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80027fe:	9000      	str	r0, [sp, #0]
 8002800:	a802      	add	r0, sp, #8
 8002802:	f009 fa51 	bl	800bca8 <siprintf>
 8002806:	b2c2      	uxtb	r2, r0
 8002808:	e7f2      	b.n	80027f0 <nextion_SendData+0x54>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
 800280a:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <nextion_SendData+0xac>)
 800280c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002810:	a802      	add	r0, sp, #8
 8002812:	f009 fa49 	bl	800bca8 <siprintf>
 8002816:	b2c2      	uxtb	r2, r0
 8002818:	e7ea      	b.n	80027f0 <nextion_SendData+0x54>
			buffor_to_send[i] = 0xFF;
 800281a:	a90c      	add	r1, sp, #48	; 0x30
 800281c:	4419      	add	r1, r3
 800281e:	24ff      	movs	r4, #255	; 0xff
 8002820:	f801 4c28 	strb.w	r4, [r1, #-40]
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 8002824:	3301      	adds	r3, #1
 8002826:	1cc1      	adds	r1, r0, #3
 8002828:	4299      	cmp	r1, r3
 800282a:	dcf6      	bgt.n	800281a <nextion_SendData+0x7e>
		}
		buffor_to_send_size += 3;
 800282c:	3203      	adds	r2, #3
		HAL_UART_Transmit(uart, (uint8_t*)buffor_to_send, buffor_to_send_size, 20);
 800282e:	2314      	movs	r3, #20
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	a902      	add	r1, sp, #8
 8002834:	4628      	mov	r0, r5
 8002836:	f005 fe49 	bl	80084cc <HAL_UART_Transmit>
		vTaskDelay(5);
 800283a:	2005      	movs	r0, #5
 800283c:	f007 fa24 	bl	8009c88 <vTaskDelay>
	}
}
 8002840:	b00d      	add	sp, #52	; 0x34
 8002842:	bd30      	pop	{r4, r5, pc}
 8002844:	20002c00 	.word	0x20002c00
 8002848:	0800cbbc 	.word	0x0800cbbc

0800284c <nextion_SendConfig>:
	nextion_SendData(uart, NEX_MINUTE, currTime.Minutes, 0, 0);
	current_command = NEX_SECONDS;
	nextion_SendData(uart, NEX_SECONDS, currTime.Seconds, 0, 0);
}

static void nextion_SendConfig(UART_HandleTypeDef* uart){
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	4606      	mov	r6, r0
	nextion_SendData(uart, NEX_CO_HIGH_TEMP, RegulationTaskData.parameters.CO_hi_temp, 0, 0);
 8002852:	4d27      	ldr	r5, [pc, #156]	; (80028f0 <nextion_SendConfig+0xa4>)
 8002854:	f995 207d 	ldrsb.w	r2, [r5, #125]	; 0x7d
 8002858:	2400      	movs	r4, #0
 800285a:	9400      	str	r4, [sp, #0]
 800285c:	4623      	mov	r3, r4
 800285e:	2108      	movs	r1, #8
 8002860:	f7ff ff9c 	bl	800279c <nextion_SendData>
	nextion_SendData(uart, NEX_CO_LOW_TEMP, RegulationTaskData.parameters.CO_lo_temp, 0, 0);
 8002864:	f995 207e 	ldrsb.w	r2, [r5, #126]	; 0x7e
 8002868:	9400      	str	r4, [sp, #0]
 800286a:	4623      	mov	r3, r4
 800286c:	2109      	movs	r1, #9
 800286e:	4630      	mov	r0, r6
 8002870:	f7ff ff94 	bl	800279c <nextion_SendData>
	nextion_SendData(uart, NEX_CO_HEATER_POWER, (int32_t)RegulationTaskData.parameters.CO_heater_power, 0, 0);
 8002874:	f8d5 2071 	ldr.w	r2, [r5, #113]	; 0x71
 8002878:	9400      	str	r4, [sp, #0]
 800287a:	4623      	mov	r3, r4
 800287c:	ee07 2a90 	vmov	s15, r2
 8002880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002884:	ee17 2a90 	vmov	r2, s15
 8002888:	210a      	movs	r1, #10
 800288a:	4630      	mov	r0, r6
 800288c:	f7ff ff86 	bl	800279c <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_HIGH_TEMP, RegulationTaskData.parameters.CWU_hi_temp, 0, 0);
 8002890:	f995 207f 	ldrsb.w	r2, [r5, #127]	; 0x7f
 8002894:	9400      	str	r4, [sp, #0]
 8002896:	4623      	mov	r3, r4
 8002898:	210b      	movs	r1, #11
 800289a:	4630      	mov	r0, r6
 800289c:	f7ff ff7e 	bl	800279c <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_LOW_TEMP, RegulationTaskData.parameters.CWU_lo_temp, 0, 0);
 80028a0:	f995 2080 	ldrsb.w	r2, [r5, #128]	; 0x80
 80028a4:	9400      	str	r4, [sp, #0]
 80028a6:	4623      	mov	r3, r4
 80028a8:	210c      	movs	r1, #12
 80028aa:	4630      	mov	r0, r6
 80028ac:	f7ff ff76 	bl	800279c <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_HEATER_POWER, (int32_t)RegulationTaskData.parameters.CWU_heater_power, 0, 0);
 80028b0:	f8d5 206d 	ldr.w	r2, [r5, #109]	; 0x6d
 80028b4:	9400      	str	r4, [sp, #0]
 80028b6:	4623      	mov	r3, r4
 80028b8:	ee07 2a90 	vmov	s15, r2
 80028bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028c0:	ee17 2a90 	vmov	r2, s15
 80028c4:	210d      	movs	r1, #13
 80028c6:	4630      	mov	r0, r6
 80028c8:	f7ff ff68 	bl	800279c <nextion_SendData>
	nextion_SendData(uart, NEX_ACC_COEFF, RegulationTaskData.parameters.acumulated_power_coeff, 0, 0);
 80028cc:	f995 207b 	ldrsb.w	r2, [r5, #123]	; 0x7b
 80028d0:	9400      	str	r4, [sp, #0]
 80028d2:	4623      	mov	r3, r4
 80028d4:	210e      	movs	r1, #14
 80028d6:	4630      	mov	r0, r6
 80028d8:	f7ff ff60 	bl	800279c <nextion_SendData>
	nextion_SendData(uart, NEX_HEATER_COEFF, RegulationTaskData.parameters.heater_power_coeff, 0, 0);
 80028dc:	f995 207c 	ldrsb.w	r2, [r5, #124]	; 0x7c
 80028e0:	9400      	str	r4, [sp, #0]
 80028e2:	4623      	mov	r3, r4
 80028e4:	210f      	movs	r1, #15
 80028e6:	4630      	mov	r0, r6
 80028e8:	f7ff ff58 	bl	800279c <nextion_SendData>
}
 80028ec:	b002      	add	sp, #8
 80028ee:	bd70      	pop	{r4, r5, r6, pc}
 80028f0:	20002cd4 	.word	0x20002cd4

080028f4 <nextion_UpdateTime>:
static void nextion_UpdateTime(UART_HandleTypeDef* uart){
 80028f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	4605      	mov	r5, r0
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80028fc:	4f23      	ldr	r7, [pc, #140]	; (800298c <nextion_UpdateTime+0x98>)
 80028fe:	4c24      	ldr	r4, [pc, #144]	; (8002990 <nextion_UpdateTime+0x9c>)
 8002900:	2200      	movs	r2, #0
 8002902:	4639      	mov	r1, r7
 8002904:	4620      	mov	r0, r4
 8002906:	f004 fd29 	bl	800735c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 800290a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8002998 <nextion_UpdateTime+0xa4>
 800290e:	2200      	movs	r2, #0
 8002910:	4641      	mov	r1, r8
 8002912:	4620      	mov	r0, r4
 8002914:	f004 fd4d 	bl	80073b2 <HAL_RTC_GetDate>
	current_command = NEX_YEAR;
 8002918:	4e1e      	ldr	r6, [pc, #120]	; (8002994 <nextion_UpdateTime+0xa0>)
 800291a:	2102      	movs	r1, #2
 800291c:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_YEAR, currDate.Year + 2000, 0, 0);
 800291e:	f898 2003 	ldrb.w	r2, [r8, #3]
 8002922:	2400      	movs	r4, #0
 8002924:	9400      	str	r4, [sp, #0]
 8002926:	4623      	mov	r3, r4
 8002928:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 800292c:	4628      	mov	r0, r5
 800292e:	f7ff ff35 	bl	800279c <nextion_SendData>
	current_command = NEX_MONTH;
 8002932:	2103      	movs	r1, #3
 8002934:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_MONTH, currDate.Month, 0, 0);
 8002936:	f898 2001 	ldrb.w	r2, [r8, #1]
 800293a:	9400      	str	r4, [sp, #0]
 800293c:	4623      	mov	r3, r4
 800293e:	4628      	mov	r0, r5
 8002940:	f7ff ff2c 	bl	800279c <nextion_SendData>
	current_command = NEX_DAY;
 8002944:	2104      	movs	r1, #4
 8002946:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_DAY, currDate.Date, 0, 0);
 8002948:	f898 2002 	ldrb.w	r2, [r8, #2]
 800294c:	9400      	str	r4, [sp, #0]
 800294e:	4623      	mov	r3, r4
 8002950:	4628      	mov	r0, r5
 8002952:	f7ff ff23 	bl	800279c <nextion_SendData>
	current_command = NEX_HOUR;
 8002956:	2105      	movs	r1, #5
 8002958:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_HOUR, currTime.Hours, 0, 0);
 800295a:	783a      	ldrb	r2, [r7, #0]
 800295c:	9400      	str	r4, [sp, #0]
 800295e:	4623      	mov	r3, r4
 8002960:	4628      	mov	r0, r5
 8002962:	f7ff ff1b 	bl	800279c <nextion_SendData>
	current_command = NEX_MINUTE;
 8002966:	2106      	movs	r1, #6
 8002968:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_MINUTE, currTime.Minutes, 0, 0);
 800296a:	787a      	ldrb	r2, [r7, #1]
 800296c:	9400      	str	r4, [sp, #0]
 800296e:	4623      	mov	r3, r4
 8002970:	4628      	mov	r0, r5
 8002972:	f7ff ff13 	bl	800279c <nextion_SendData>
	current_command = NEX_SECONDS;
 8002976:	2107      	movs	r1, #7
 8002978:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_SECONDS, currTime.Seconds, 0, 0);
 800297a:	78ba      	ldrb	r2, [r7, #2]
 800297c:	9400      	str	r4, [sp, #0]
 800297e:	4623      	mov	r3, r4
 8002980:	4628      	mov	r0, r5
 8002982:	f7ff ff0b 	bl	800279c <nextion_SendData>
}
 8002986:	b002      	add	sp, #8
 8002988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800298c:	20002cc0 	.word	0x20002cc0
 8002990:	200032b4 	.word	0x200032b4
 8002994:	20002c00 	.word	0x20002c00
 8002998:	20002d64 	.word	0x20002d64

0800299c <NextionBig_DataRcv>:
		}
	}
  /* USER CODE END UpdateLCD */
}

void NextionBig_DataRcv (void){
 800299c:	b530      	push	{r4, r5, lr}
 800299e:	b083      	sub	sp, #12
	uint8_t stopbyte = 0;
 80029a0:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 80029a2:	e062      	b.n	8002a6a <NextionBig_DataRcv+0xce>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
		start = nextion_big_comm.UartBufferHead;
		if(len > 3){
			if(len > 9){
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
					memcpy(&number, &nextion_big_comm.UART_Buffer[start], 4);
 80029a4:	f102 0320 	add.w	r3, r2, #32
 80029a8:	4d3d      	ldr	r5, [pc, #244]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 80029aa:	442b      	add	r3, r5
 80029ac:	f8d3 0002 	ldr.w	r0, [r3, #2]
					memcpy(&value, &nextion_big_comm.UART_Buffer[start + 5], 4);
 80029b0:	3225      	adds	r2, #37	; 0x25
 80029b2:	442a      	add	r2, r5
 80029b4:	f8d2 1002 	ldr.w	r1, [r2, #2]
					nextion_big.param = number;
 80029b8:	4b3a      	ldr	r3, [pc, #232]	; (8002aa4 <NextionBig_DataRcv+0x108>)
 80029ba:	6058      	str	r0, [r3, #4]
					memcpy(&nextion_big.value, &value, 4);
 80029bc:	6099      	str	r1, [r3, #8]
					Config_ChangeValue(number, value);
 80029be:	f7fe fbed 	bl	800119c <Config_ChangeValue>
					nextion_big_comm.UartBufferHead += 10;
 80029c2:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80029c6:	330a      	adds	r3, #10
 80029c8:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
					xTaskNotifyFromISR(DiplaysHandle, 1, eSetValueWithOverwrite, NULL);
 80029cc:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <NextionBig_DataRcv+0x10c>)
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	2300      	movs	r3, #0
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2203      	movs	r2, #3
 80029d6:	2101      	movs	r1, #1
 80029d8:	f007 fdee 	bl	800a5b8 <xTaskGenericNotifyFromISR>
 80029dc:	e03e      	b.n	8002a5c <NextionBig_DataRcv+0xc0>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 80029de:	3301      	adds	r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	4610      	mov	r0, r2
 80029e4:	1d51      	adds	r1, r2, #5
 80029e6:	428b      	cmp	r3, r1
 80029e8:	da0a      	bge.n	8002a00 <NextionBig_DataRcv+0x64>
					if(nextion_big_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 80029ea:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 80029ee:	492c      	ldr	r1, [pc, #176]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 80029f0:	4401      	add	r1, r0
 80029f2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80029f6:	29ff      	cmp	r1, #255	; 0xff
 80029f8:	d1f1      	bne.n	80029de <NextionBig_DataRcv+0x42>
						stopbyte ++;
 80029fa:	3401      	adds	r4, #1
 80029fc:	b2e4      	uxtb	r4, r4
 80029fe:	e7ee      	b.n	80029de <NextionBig_DataRcv+0x42>
					}
				}
				if(stopbyte == 3){
 8002a00:	2c03      	cmp	r4, #3
 8002a02:	d006      	beq.n	8002a12 <NextionBig_DataRcv+0x76>
							y = 4;
							break;
					}
					nextion_big_comm.UartBufferHead += y;
				}else{
					nextion_big_comm.UartBufferHead ++;
 8002a04:	4a26      	ldr	r2, [pc, #152]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a06:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 8002a10:	e024      	b.n	8002a5c <NextionBig_DataRcv+0xc0>
					switch(nextion_big_comm.UART_Buffer[start]){
 8002a12:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a14:	4413      	add	r3, r2
 8002a16:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002a1a:	2b1a      	cmp	r3, #26
 8002a1c:	d011      	beq.n	8002a42 <NextionBig_DataRcv+0xa6>
 8002a1e:	2b66      	cmp	r3, #102	; 0x66
 8002a20:	d116      	bne.n	8002a50 <NextionBig_DataRcv+0xb4>
							nextion_big.display = nextion_big_comm.UART_Buffer[start + 1];
 8002a22:	3001      	adds	r0, #1
 8002a24:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a26:	4418      	add	r0, r3
 8002a28:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <NextionBig_DataRcv+0x108>)
 8002a2e:	701a      	strb	r2, [r3, #0]
							y = 5;
 8002a30:	2305      	movs	r3, #5
					nextion_big_comm.UartBufferHead += y;
 8002a32:	4a1b      	ldr	r2, [pc, #108]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a34:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 8002a38:	440b      	add	r3, r1
 8002a3a:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 8002a3e:	2400      	movs	r4, #0
 8002a40:	e00c      	b.n	8002a5c <NextionBig_DataRcv+0xc0>
							command_correct[current_command] = 1;
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <NextionBig_DataRcv+0x110>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	4a1a      	ldr	r2, [pc, #104]	; (8002ab0 <NextionBig_DataRcv+0x114>)
 8002a48:	2101      	movs	r1, #1
 8002a4a:	54d1      	strb	r1, [r2, r3]
							y = 4;
 8002a4c:	2304      	movs	r3, #4
							break;
 8002a4e:	e7f0      	b.n	8002a32 <NextionBig_DataRcv+0x96>
							y = 4;
 8002a50:	2304      	movs	r3, #4
 8002a52:	e7ee      	b.n	8002a32 <NextionBig_DataRcv+0x96>
				}
			}

		}else{
			//if(nextion_big_comm.UART_Buffer[start] == 0 || nextion_big_comm.UART_Buffer[start] == 255){
				nextion_big_comm.UartBufferHead++;
 8002a54:	3201      	adds	r2, #1
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a58:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_big_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 8002a5c:	4a10      	ldr	r2, [pc, #64]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a5e:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8002a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a66:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a6c:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 8002a70:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 8002a74:	4291      	cmp	r1, r2
 8002a76:	d011      	beq.n	8002a9c <NextionBig_DataRcv+0x100>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 8002a78:	b2d3      	uxtb	r3, r2
 8002a7a:	1ac9      	subs	r1, r1, r3
 8002a7c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 8002a80:	2903      	cmp	r1, #3
 8002a82:	d9e7      	bls.n	8002a54 <NextionBig_DataRcv+0xb8>
			if(len > 9){
 8002a84:	2909      	cmp	r1, #9
 8002a86:	d906      	bls.n	8002a96 <NextionBig_DataRcv+0xfa>
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
 8002a88:	1d10      	adds	r0, r2, #4
 8002a8a:	4905      	ldr	r1, [pc, #20]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a8c:	4401      	add	r1, r0
 8002a8e:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8002a92:	290a      	cmp	r1, #10
 8002a94:	d086      	beq.n	80029a4 <NextionBig_DataRcv+0x8>
				for(i = start + 1; i < (start + 5); i++){
 8002a96:	3301      	adds	r3, #1
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e7a2      	b.n	80029e2 <NextionBig_DataRcv+0x46>
	}
}
 8002a9c:	b003      	add	sp, #12
 8002a9e:	bd30      	pop	{r4, r5, pc}
 8002aa0:	20002b50 	.word	0x20002b50
 8002aa4:	20002b20 	.word	0x20002b20
 8002aa8:	2000342c 	.word	0x2000342c
 8002aac:	20002c00 	.word	0x20002c00
 8002ab0:	20002b2c 	.word	0x20002b2c

08002ab4 <NextionSmall_DataRcv>:

void NextionSmall_DataRcv (void){
 8002ab4:	b530      	push	{r4, r5, lr}
 8002ab6:	b083      	sub	sp, #12
	uint8_t stopbyte = 0;
 8002ab8:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 8002aba:	e078      	b.n	8002bae <NextionSmall_DataRcv+0xfa>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
		start = nextion_small_comm.UartBufferHead;
		if(len > 3){
			if(len > 9){
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
					memcpy(&number, &nextion_small_comm.UART_Buffer[start], 4);
 8002abc:	f102 0320 	add.w	r3, r2, #32
 8002ac0:	4d49      	ldr	r5, [pc, #292]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002ac2:	442b      	add	r3, r5
 8002ac4:	f8d3 0002 	ldr.w	r0, [r3, #2]
					memcpy(&value, &nextion_small_comm.UART_Buffer[start + 5], 4);
 8002ac8:	3225      	adds	r2, #37	; 0x25
 8002aca:	442a      	add	r2, r5
 8002acc:	f8d2 1002 	ldr.w	r1, [r2, #2]
					nextion_small.param = number;
 8002ad0:	4b46      	ldr	r3, [pc, #280]	; (8002bec <NextionSmall_DataRcv+0x138>)
 8002ad2:	6058      	str	r0, [r3, #4]
					memcpy(&nextion_small.value, &value, 4);
 8002ad4:	6099      	str	r1, [r3, #8]
					Config_ChangeValue(number, value);
 8002ad6:	f7fe fb61 	bl	800119c <Config_ChangeValue>
					nextion_small_comm.UartBufferHead += 10;
 8002ada:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8002ade:	330a      	adds	r3, #10
 8002ae0:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
					xTaskNotifyFromISR(DiplaysHandle, 2, eSetValueWithOverwrite, NULL);
 8002ae4:	4b42      	ldr	r3, [pc, #264]	; (8002bf0 <NextionSmall_DataRcv+0x13c>)
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2203      	movs	r2, #3
 8002aee:	2102      	movs	r1, #2
 8002af0:	f007 fd62 	bl	800a5b8 <xTaskGenericNotifyFromISR>
 8002af4:	e054      	b.n	8002ba0 <NextionSmall_DataRcv+0xec>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 8002af6:	3301      	adds	r3, #1
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	1d51      	adds	r1, r2, #5
 8002afe:	428b      	cmp	r3, r1
 8002b00:	da0a      	bge.n	8002b18 <NextionSmall_DataRcv+0x64>
					if(nextion_small_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 8002b02:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 8002b06:	4938      	ldr	r1, [pc, #224]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002b08:	4401      	add	r1, r0
 8002b0a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8002b0e:	29ff      	cmp	r1, #255	; 0xff
 8002b10:	d1f1      	bne.n	8002af6 <NextionSmall_DataRcv+0x42>
						stopbyte ++;
 8002b12:	3401      	adds	r4, #1
 8002b14:	b2e4      	uxtb	r4, r4
 8002b16:	e7ee      	b.n	8002af6 <NextionSmall_DataRcv+0x42>
					}
				}
				if(stopbyte == 3){
 8002b18:	2c03      	cmp	r4, #3
 8002b1a:	d006      	beq.n	8002b2a <NextionSmall_DataRcv+0x76>
							y = 4;
							break;
					}
					nextion_small_comm.UartBufferHead += y;
				}else{
					nextion_small_comm.UartBufferHead ++;
 8002b1c:	4a32      	ldr	r2, [pc, #200]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002b1e:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8002b22:	3301      	adds	r3, #1
 8002b24:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 8002b28:	e03a      	b.n	8002ba0 <NextionSmall_DataRcv+0xec>
					switch(nextion_small_comm.UART_Buffer[start]){
 8002b2a:	4b2f      	ldr	r3, [pc, #188]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002b32:	2b86      	cmp	r3, #134	; 0x86
 8002b34:	d024      	beq.n	8002b80 <NextionSmall_DataRcv+0xcc>
 8002b36:	d813      	bhi.n	8002b60 <NextionSmall_DataRcv+0xac>
 8002b38:	2b1a      	cmp	r3, #26
 8002b3a:	d01a      	beq.n	8002b72 <NextionSmall_DataRcv+0xbe>
 8002b3c:	2b66      	cmp	r3, #102	; 0x66
 8002b3e:	d129      	bne.n	8002b94 <NextionSmall_DataRcv+0xe0>
							nextion_small.display = nextion_small_comm.UART_Buffer[start + 1];
 8002b40:	3001      	adds	r0, #1
 8002b42:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002b44:	4418      	add	r0, r3
 8002b46:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8002b4a:	4b28      	ldr	r3, [pc, #160]	; (8002bec <NextionSmall_DataRcv+0x138>)
 8002b4c:	701a      	strb	r2, [r3, #0]
							y = 5;
 8002b4e:	2305      	movs	r3, #5
					nextion_small_comm.UartBufferHead += y;
 8002b50:	4a25      	ldr	r2, [pc, #148]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002b52:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 8002b56:	440b      	add	r3, r1
 8002b58:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 8002b5c:	2400      	movs	r4, #0
 8002b5e:	e01f      	b.n	8002ba0 <NextionSmall_DataRcv+0xec>
					switch(nextion_small_comm.UART_Buffer[start]){
 8002b60:	2b87      	cmp	r3, #135	; 0x87
 8002b62:	d012      	beq.n	8002b8a <NextionSmall_DataRcv+0xd6>
 8002b64:	2b88      	cmp	r3, #136	; 0x88
 8002b66:	d115      	bne.n	8002b94 <NextionSmall_DataRcv+0xe0>
							nextion_small.ready = 1;
 8002b68:	4b20      	ldr	r3, [pc, #128]	; (8002bec <NextionSmall_DataRcv+0x138>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	70da      	strb	r2, [r3, #3]
							y = 4;
 8002b6e:	2304      	movs	r3, #4
							break;
 8002b70:	e7ee      	b.n	8002b50 <NextionSmall_DataRcv+0x9c>
							command_correct[current_command] = 1;
 8002b72:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <NextionSmall_DataRcv+0x140>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	4a20      	ldr	r2, [pc, #128]	; (8002bf8 <NextionSmall_DataRcv+0x144>)
 8002b78:	2101      	movs	r1, #1
 8002b7a:	54d1      	strb	r1, [r2, r3]
							y = 4;
 8002b7c:	2304      	movs	r3, #4
							break;
 8002b7e:	e7e7      	b.n	8002b50 <NextionSmall_DataRcv+0x9c>
							nextion_small.sleep = 1;
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <NextionSmall_DataRcv+0x138>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	709a      	strb	r2, [r3, #2]
							y = 4;
 8002b86:	2304      	movs	r3, #4
							break;
 8002b88:	e7e2      	b.n	8002b50 <NextionSmall_DataRcv+0x9c>
							nextion_small.sleep = 0;
 8002b8a:	4b18      	ldr	r3, [pc, #96]	; (8002bec <NextionSmall_DataRcv+0x138>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	709a      	strb	r2, [r3, #2]
							y = 4;
 8002b90:	2304      	movs	r3, #4
							break;
 8002b92:	e7dd      	b.n	8002b50 <NextionSmall_DataRcv+0x9c>
							y = 4;
 8002b94:	2304      	movs	r3, #4
 8002b96:	e7db      	b.n	8002b50 <NextionSmall_DataRcv+0x9c>
				}
			}

		}else{
			//if(nextion_small_comm.UART_Buffer[start] == 0 || nextion_small_comm.UART_Buffer[start] == 255){
				nextion_small_comm.UartBufferHead++;
 8002b98:	3201      	adds	r2, #1
 8002b9a:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002b9c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_small_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 8002ba0:	4a11      	ldr	r2, [pc, #68]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002ba2:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8002ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002baa:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002bb0:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 8002bb4:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 8002bb8:	4291      	cmp	r1, r2
 8002bba:	d012      	beq.n	8002be2 <NextionSmall_DataRcv+0x12e>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 8002bbc:	b2d3      	uxtb	r3, r2
 8002bbe:	1ac9      	subs	r1, r1, r3
 8002bc0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 8002bc4:	2903      	cmp	r1, #3
 8002bc6:	d9e7      	bls.n	8002b98 <NextionSmall_DataRcv+0xe4>
			if(len > 9){
 8002bc8:	2909      	cmp	r1, #9
 8002bca:	d907      	bls.n	8002bdc <NextionSmall_DataRcv+0x128>
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
 8002bcc:	1d10      	adds	r0, r2, #4
 8002bce:	4906      	ldr	r1, [pc, #24]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002bd0:	4401      	add	r1, r0
 8002bd2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8002bd6:	290a      	cmp	r1, #10
 8002bd8:	f43f af70 	beq.w	8002abc <NextionSmall_DataRcv+0x8>
				for(i = start + 1; i < (start + 5); i++){
 8002bdc:	3301      	adds	r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	e78b      	b.n	8002afa <NextionSmall_DataRcv+0x46>
	}
}
 8002be2:	b003      	add	sp, #12
 8002be4:	bd30      	pop	{r4, r5, pc}
 8002be6:	bf00      	nop
 8002be8:	20002c04 	.word	0x20002c04
 8002bec:	20002cb4 	.word	0x20002cb4
 8002bf0:	2000342c 	.word	0x2000342c
 8002bf4:	20002c00 	.word	0x20002c00
 8002bf8:	20002b2c 	.word	0x20002b2c

08002bfc <DisplayTask>:
{
 8002bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c00:	ed2d 8b02 	vpush	{d8}
 8002c04:	b089      	sub	sp, #36	; 0x24
	nextion_small.display = 30;
 8002c06:	4a84      	ldr	r2, [pc, #528]	; (8002e18 <DisplayTask+0x21c>)
 8002c08:	231e      	movs	r3, #30
 8002c0a:	7013      	strb	r3, [r2, #0]
	nextion_small.last_display = 30;
 8002c0c:	7053      	strb	r3, [r2, #1]
	nextion_big.display = 30;
 8002c0e:	4d83      	ldr	r5, [pc, #524]	; (8002e1c <DisplayTask+0x220>)
 8002c10:	702b      	strb	r3, [r5, #0]
	nextion_big.last_display = 30;
 8002c12:	706b      	strb	r3, [r5, #1]
	UARTDMA_Init(&nextion_small_comm, NEXTION_SMALL_UART);
 8002c14:	4e82      	ldr	r6, [pc, #520]	; (8002e20 <DisplayTask+0x224>)
 8002c16:	4c83      	ldr	r4, [pc, #524]	; (8002e24 <DisplayTask+0x228>)
 8002c18:	4631      	mov	r1, r6
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f000 ff8b 	bl	8003b36 <UARTDMA_Init>
	UARTDMA_Init(&nextion_big_comm, NEXTION_BIG_UART);
 8002c20:	4f81      	ldr	r7, [pc, #516]	; (8002e28 <DisplayTask+0x22c>)
 8002c22:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8002e4c <DisplayTask+0x250>
 8002c26:	4639      	mov	r1, r7
 8002c28:	4640      	mov	r0, r8
 8002c2a:	f000 ff84 	bl	8003b36 <UARTDMA_Init>
	nextion_big_comm.callback = NextionBig_DataRcv;
 8002c2e:	4b7f      	ldr	r3, [pc, #508]	; (8002e2c <DisplayTask+0x230>)
 8002c30:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
	nextion_small_comm.callback = NextionSmall_DataRcv;
 8002c34:	4b7e      	ldr	r3, [pc, #504]	; (8002e30 <DisplayTask+0x234>)
 8002c36:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	Config_GetEthernetConfig(&configuration);
 8002c3a:	a803      	add	r0, sp, #12
 8002c3c:	f7fe fb44 	bl	80012c8 <Config_GetEthernetConfig>
	RegulationTask_GetData(&RegulationTaskData);
 8002c40:	487c      	ldr	r0, [pc, #496]	; (8002e34 <DisplayTask+0x238>)
 8002c42:	f000 ff17 	bl	8003a74 <RegulationTask_GetData>
	vTaskDelay(1000);
 8002c46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c4a:	f007 f81d 	bl	8009c88 <vTaskDelay>
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8002c4e:	4c7a      	ldr	r4, [pc, #488]	; (8002e38 <DisplayTask+0x23c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	497a      	ldr	r1, [pc, #488]	; (8002e3c <DisplayTask+0x240>)
 8002c54:	4620      	mov	r0, r4
 8002c56:	f004 fb81 	bl	800735c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	4978      	ldr	r1, [pc, #480]	; (8002e40 <DisplayTask+0x244>)
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f004 fba7 	bl	80073b2 <HAL_RTC_GetDate>
	nextion_SendData(NEXTION_SMALL_UART, NEX_WAKE, 0, 0, 0);
 8002c64:	2400      	movs	r4, #0
 8002c66:	9400      	str	r4, [sp, #0]
 8002c68:	4623      	mov	r3, r4
 8002c6a:	4622      	mov	r2, r4
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	4630      	mov	r0, r6
 8002c70:	f7ff fd94 	bl	800279c <nextion_SendData>
	vTaskDelay(1);
 8002c74:	2001      	movs	r0, #1
 8002c76:	f007 f807 	bl	8009c88 <vTaskDelay>
	nextion_SendData(NEXTION_SMALL_UART, NEX_SENDME, 0, 0, 0);
 8002c7a:	9400      	str	r4, [sp, #0]
 8002c7c:	4623      	mov	r3, r4
 8002c7e:	4622      	mov	r2, r4
 8002c80:	2101      	movs	r1, #1
 8002c82:	4630      	mov	r0, r6
 8002c84:	f7ff fd8a 	bl	800279c <nextion_SendData>
	vTaskDelay(1);
 8002c88:	2001      	movs	r0, #1
 8002c8a:	f006 fffd 	bl	8009c88 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002c8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c92:	2001      	movs	r0, #1
 8002c94:	f007 fc08 	bl	800a4a8 <ulTaskNotifyTake>
	nextion_SendData(NEXTION_BIG_UART, NEX_SENDME, 0, 0, 0);
 8002c98:	9400      	str	r4, [sp, #0]
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	4622      	mov	r2, r4
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4638      	mov	r0, r7
 8002ca2:	f7ff fd7b 	bl	800279c <nextion_SendData>
	vTaskDelay(1);
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	f006 ffee 	bl	8009c88 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002cac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f007 fbf9 	bl	800a4a8 <ulTaskNotifyTake>
	if(nextion_big.display != 30){
 8002cb6:	782b      	ldrb	r3, [r5, #0]
 8002cb8:	2b1e      	cmp	r3, #30
 8002cba:	d005      	beq.n	8002cc8 <DisplayTask+0xcc>
		nextion_UpdateTime(NEXTION_BIG_UART);
 8002cbc:	4638      	mov	r0, r7
 8002cbe:	f7ff fe19 	bl	80028f4 <nextion_UpdateTime>
		nextion_SendConfig(NEXTION_BIG_UART);
 8002cc2:	4638      	mov	r0, r7
 8002cc4:	f7ff fdc2 	bl	800284c <nextion_SendConfig>
	if(nextion_small.display != 30){
 8002cc8:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <DisplayTask+0x21c>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b1e      	cmp	r3, #30
 8002cce:	d002      	beq.n	8002cd6 <DisplayTask+0xda>
		nextion_SendConfig(NEXTION_SMALL_UART);
 8002cd0:	4853      	ldr	r0, [pc, #332]	; (8002e20 <DisplayTask+0x224>)
 8002cd2:	f7ff fdbb 	bl	800284c <nextion_SendConfig>
{
 8002cd6:	f04f 0900 	mov.w	r9, #0
 8002cda:	46ca      	mov	sl, r9
 8002cdc:	e02a      	b.n	8002d34 <DisplayTask+0x138>
				nextion_UpdateTime(NEXTION_BIG_UART);
 8002cde:	4852      	ldr	r0, [pc, #328]	; (8002e28 <DisplayTask+0x22c>)
 8002ce0:	f7ff fe08 	bl	80028f4 <nextion_UpdateTime>
				if(nextion_small.display != 30){
 8002ce4:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <DisplayTask+0x21c>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b1e      	cmp	r3, #30
 8002cea:	d031      	beq.n	8002d50 <DisplayTask+0x154>
					nextion_SendData(NEXTION_SMALL_UART, NEX_SETTINGS_LOCK, 0, 0, 0);
 8002cec:	2200      	movs	r2, #0
 8002cee:	9200      	str	r2, [sp, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	2121      	movs	r1, #33	; 0x21
 8002cf4:	484a      	ldr	r0, [pc, #296]	; (8002e20 <DisplayTask+0x224>)
 8002cf6:	f7ff fd51 	bl	800279c <nextion_SendData>
 8002cfa:	e029      	b.n	8002d50 <DisplayTask+0x154>
					nextion_SendData(NEXTION_SMALL_UART, NEX_SETTINGS_UNLOCK, 0, 0, 0);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	9200      	str	r2, [sp, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	2120      	movs	r1, #32
 8002d04:	4846      	ldr	r0, [pc, #280]	; (8002e20 <DisplayTask+0x224>)
 8002d06:	f7ff fd49 	bl	800279c <nextion_SendData>
 8002d0a:	e021      	b.n	8002d50 <DisplayTask+0x154>
				if(nextion_big.display != 30){
 8002d0c:	4b43      	ldr	r3, [pc, #268]	; (8002e1c <DisplayTask+0x220>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b1e      	cmp	r3, #30
 8002d12:	d133      	bne.n	8002d7c <DisplayTask+0x180>
		if(nextion_big.display == 1){
 8002d14:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <DisplayTask+0x220>)
 8002d16:	781d      	ldrb	r5, [r3, #0]
 8002d18:	2d01      	cmp	r5, #1
 8002d1a:	d037      	beq.n	8002d8c <DisplayTask+0x190>
		vTaskDelay(1000);
 8002d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d20:	f006 ffb2 	bl	8009c88 <vTaskDelay>
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002d24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d28:	2001      	movs	r0, #1
 8002d2a:	f007 fbbd 	bl	800a4a8 <ulTaskNotifyTake>
		if(ulNotificationValue > 0){
 8002d2e:	2800      	cmp	r0, #0
 8002d30:	f040 812c 	bne.w	8002f8c <DisplayTask+0x390>
		RegulationTask_GetData(&RegulationTaskData);
 8002d34:	483f      	ldr	r0, [pc, #252]	; (8002e34 <DisplayTask+0x238>)
 8002d36:	f000 fe9d 	bl	8003a74 <RegulationTask_GetData>
		if(nextion_big.display != nextion_big.last_display){
 8002d3a:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <DisplayTask+0x220>)
 8002d3c:	781a      	ldrb	r2, [r3, #0]
 8002d3e:	785b      	ldrb	r3, [r3, #1]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d008      	beq.n	8002d56 <DisplayTask+0x15a>
			if(nextion_big.display == 2){
 8002d44:	2a02      	cmp	r2, #2
 8002d46:	d0ca      	beq.n	8002cde <DisplayTask+0xe2>
				if(nextion_small.display != 30){
 8002d48:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <DisplayTask+0x21c>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b1e      	cmp	r3, #30
 8002d4e:	d1d5      	bne.n	8002cfc <DisplayTask+0x100>
			nextion_big.last_display = nextion_big.display;
 8002d50:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <DisplayTask+0x220>)
 8002d52:	781a      	ldrb	r2, [r3, #0]
 8002d54:	705a      	strb	r2, [r3, #1]
		if(nextion_small.display != nextion_small.last_display){
 8002d56:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <DisplayTask+0x21c>)
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	785b      	ldrb	r3, [r3, #1]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d0d9      	beq.n	8002d14 <DisplayTask+0x118>
			if(nextion_small.display == 1){
 8002d60:	2a01      	cmp	r2, #1
 8002d62:	d0d3      	beq.n	8002d0c <DisplayTask+0x110>
				if(nextion_big.display != 30){
 8002d64:	4b2d      	ldr	r3, [pc, #180]	; (8002e1c <DisplayTask+0x220>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b1e      	cmp	r3, #30
 8002d6a:	d0d3      	beq.n	8002d14 <DisplayTask+0x118>
					nextion_SendData(NEXTION_BIG_UART, NEX_SETTINGS_UNLOCK, 0, 0, 0);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	9200      	str	r2, [sp, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	2120      	movs	r1, #32
 8002d74:	482c      	ldr	r0, [pc, #176]	; (8002e28 <DisplayTask+0x22c>)
 8002d76:	f7ff fd11 	bl	800279c <nextion_SendData>
 8002d7a:	e7cb      	b.n	8002d14 <DisplayTask+0x118>
					nextion_SendData(NEXTION_BIG_UART, NEX_SETTINGS_LOCK, 0, 0, 0);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	9200      	str	r2, [sp, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	2121      	movs	r1, #33	; 0x21
 8002d84:	4828      	ldr	r0, [pc, #160]	; (8002e28 <DisplayTask+0x22c>)
 8002d86:	f7ff fd09 	bl	800279c <nextion_SendData>
 8002d8a:	e7c3      	b.n	8002d14 <DisplayTask+0x118>
			nextion_SendData(NEXTION_BIG_UART, NEX_COUNTER_PRESENCE, RegulationTaskData.counter.counter_present, 0, 0);
 8002d8c:	4e29      	ldr	r6, [pc, #164]	; (8002e34 <DisplayTask+0x238>)
 8002d8e:	7832      	ldrb	r2, [r6, #0]
 8002d90:	4f25      	ldr	r7, [pc, #148]	; (8002e28 <DisplayTask+0x22c>)
 8002d92:	2400      	movs	r4, #0
 8002d94:	9400      	str	r4, [sp, #0]
 8002d96:	4623      	mov	r3, r4
 8002d98:	2113      	movs	r1, #19
 8002d9a:	4638      	mov	r0, r7
 8002d9c:	f7ff fcfe 	bl	800279c <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_TSENS_PRESENCE, RegulationTaskData.counter.temperatures_present, 0, 0);
 8002da0:	78b2      	ldrb	r2, [r6, #2]
 8002da2:	9400      	str	r4, [sp, #0]
 8002da4:	4623      	mov	r3, r4
 8002da6:	2114      	movs	r1, #20
 8002da8:	4638      	mov	r0, r7
 8002daa:	f7ff fcf7 	bl	800279c <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_MAIN_SW, RegulationTaskData.ControlWord.MainSwitch_State, 0, 0);
 8002dae:	f896 2068 	ldrb.w	r2, [r6, #104]	; 0x68
 8002db2:	9400      	str	r4, [sp, #0]
 8002db4:	4623      	mov	r3, r4
 8002db6:	f002 0201 	and.w	r2, r2, #1
 8002dba:	2115      	movs	r1, #21
 8002dbc:	4638      	mov	r0, r7
 8002dbe:	f7ff fced 	bl	800279c <nextion_SendData>
			if(RegulationTaskData.ControlWord.CWUHeaterError || RegulationTaskData.IOsignals.signals.input4){
 8002dc2:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8002dc4:	4a1f      	ldr	r2, [pc, #124]	; (8002e44 <DisplayTask+0x248>)
 8002dc6:	421a      	tst	r2, r3
 8002dc8:	d106      	bne.n	8002dd8 <DisplayTask+0x1dc>
			}else if(RegulationTaskData.ControlWord.CWUHeaterStateOut){
 8002dca:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
 8002dce:	f013 0f01 	tst.w	r3, #1
 8002dd2:	d015      	beq.n	8002e00 <DisplayTask+0x204>
				pic = 2;
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	e000      	b.n	8002dda <DisplayTask+0x1de>
				pic = 3;
 8002dd8:	2203      	movs	r2, #3
			nextion_SendData(NEXTION_BIG_UART, NEX_CWU_PIC, pic, 0, 0);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	2116      	movs	r1, #22
 8002de0:	4811      	ldr	r0, [pc, #68]	; (8002e28 <DisplayTask+0x22c>)
 8002de2:	f7ff fcdb 	bl	800279c <nextion_SendData>
			if(RegulationTaskData.ControlWord.COHeaterError || RegulationTaskData.IOsignals.signals.input5){
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <DisplayTask+0x238>)
 8002de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dea:	4a17      	ldr	r2, [pc, #92]	; (8002e48 <DisplayTask+0x24c>)
 8002dec:	421a      	tst	r2, r3
 8002dee:	d109      	bne.n	8002e04 <DisplayTask+0x208>
			}else if(RegulationTaskData.ControlWord.COHeaterStateOut){
 8002df0:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <DisplayTask+0x238>)
 8002df2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002df6:	f013 0f01 	tst.w	r3, #1
 8002dfa:	d004      	beq.n	8002e06 <DisplayTask+0x20a>
				pic = 2;
 8002dfc:	2502      	movs	r5, #2
 8002dfe:	e002      	b.n	8002e06 <DisplayTask+0x20a>
				pic = 1;
 8002e00:	462a      	mov	r2, r5
 8002e02:	e7ea      	b.n	8002dda <DisplayTask+0x1de>
				pic = 3;
 8002e04:	2503      	movs	r5, #3
			nextion_SendData(NEXTION_BIG_UART, NEX_CO_PIC, pic, 0, 0);
 8002e06:	2400      	movs	r4, #0
 8002e08:	9400      	str	r4, [sp, #0]
 8002e0a:	4623      	mov	r3, r4
 8002e0c:	462a      	mov	r2, r5
 8002e0e:	2117      	movs	r1, #23
 8002e10:	4805      	ldr	r0, [pc, #20]	; (8002e28 <DisplayTask+0x22c>)
 8002e12:	f7ff fcc3 	bl	800279c <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 8002e16:	e0b5      	b.n	8002f84 <DisplayTask+0x388>
 8002e18:	20002cb4 	.word	0x20002cb4
 8002e1c:	20002b20 	.word	0x20002b20
 8002e20:	20003230 	.word	0x20003230
 8002e24:	20002c04 	.word	0x20002c04
 8002e28:	20003314 	.word	0x20003314
 8002e2c:	0800299d 	.word	0x0800299d
 8002e30:	08002ab5 	.word	0x08002ab5
 8002e34:	20002cd4 	.word	0x20002cd4
 8002e38:	200032b4 	.word	0x200032b4
 8002e3c:	20002cc0 	.word	0x20002cc0
 8002e40:	20002d64 	.word	0x20002d64
 8002e44:	10000001 	.word	0x10000001
 8002e48:	08000001 	.word	0x08000001
 8002e4c:	20002b50 	.word	0x20002b50
				rest = (uint32_t)(RegulationTaskData.counter.voltages[i] * 10.0) % 10;
 8002e50:	4d59      	ldr	r5, [pc, #356]	; (8002fb8 <DisplayTask+0x3bc>)
 8002e52:	f104 030a 	add.w	r3, r4, #10
 8002e56:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002e5a:	ed93 8a00 	vldr	s16, [r3]
 8002e5e:	ee18 0a10 	vmov	r0, s16
 8002e62:	f7fd fb79 	bl	8000558 <__aeabi_f2d>
 8002e66:	2200      	movs	r2, #0
 8002e68:	4b54      	ldr	r3, [pc, #336]	; (8002fbc <DisplayTask+0x3c0>)
 8002e6a:	f7fd fbcd 	bl	8000608 <__aeabi_dmul>
 8002e6e:	f7fd fddd 	bl	8000a2c <__aeabi_d2uiz>
 8002e72:	f8df b160 	ldr.w	fp, [pc, #352]	; 8002fd4 <DisplayTask+0x3d8>
 8002e76:	fbab 2300 	umull	r2, r3, fp, r0
 8002e7a:	08db      	lsrs	r3, r3, #3
 8002e7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e80:	005a      	lsls	r2, r3, #1
 8002e82:	1a83      	subs	r3, r0, r2
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_VOLTAGE, i + 1, (uint32_t)RegulationTaskData.counter.voltages[i], rest);
 8002e84:	1c66      	adds	r6, r4, #1
 8002e86:	4f4e      	ldr	r7, [pc, #312]	; (8002fc0 <DisplayTask+0x3c4>)
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002e8e:	ee17 3a90 	vmov	r3, s15
 8002e92:	4632      	mov	r2, r6
 8002e94:	2118      	movs	r1, #24
 8002e96:	4638      	mov	r0, r7
 8002e98:	f7ff fc80 	bl	800279c <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.currents[i] * 100.0) % 100;
 8002e9c:	f104 030c 	add.w	r3, r4, #12
 8002ea0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002ea4:	ed93 8a01 	vldr	s16, [r3, #4]
 8002ea8:	ee18 0a10 	vmov	r0, s16
 8002eac:	f7fd fb54 	bl	8000558 <__aeabi_f2d>
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	4b44      	ldr	r3, [pc, #272]	; (8002fc4 <DisplayTask+0x3c8>)
 8002eb4:	f7fd fba8 	bl	8000608 <__aeabi_dmul>
 8002eb8:	f7fd fdb8 	bl	8000a2c <__aeabi_d2uiz>
 8002ebc:	4b42      	ldr	r3, [pc, #264]	; (8002fc8 <DisplayTask+0x3cc>)
 8002ebe:	fba3 2300 	umull	r2, r3, r3, r0
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	2264      	movs	r2, #100	; 0x64
 8002ec6:	fb02 0313 	mls	r3, r2, r3, r0
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_CURRENT, i + 1, (uint32_t)RegulationTaskData.counter.currents[i], rest);
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002ed0:	ee17 3a90 	vmov	r3, s15
 8002ed4:	4632      	mov	r2, r6
 8002ed6:	2119      	movs	r1, #25
 8002ed8:	4638      	mov	r0, r7
 8002eda:	f7ff fc5f 	bl	800279c <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.powers[i] * 10.0) % 10;
 8002ede:	f104 0810 	add.w	r8, r4, #16
 8002ee2:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 8002ee6:	ed98 8a00 	vldr	s16, [r8]
 8002eea:	ee18 0a10 	vmov	r0, s16
 8002eee:	f7fd fb33 	bl	8000558 <__aeabi_f2d>
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <DisplayTask+0x3c0>)
 8002ef6:	f7fd fb87 	bl	8000608 <__aeabi_dmul>
 8002efa:	f7fd fd97 	bl	8000a2c <__aeabi_d2uiz>
 8002efe:	fbab 3200 	umull	r3, r2, fp, r0
 8002f02:	08d2      	lsrs	r2, r2, #3
 8002f04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002f08:	0053      	lsls	r3, r2, #1
 8002f0a:	1ac2      	subs	r2, r0, r3
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_POWER, i + 1, (uint32_t)RegulationTaskData.counter.powers[i], rest);
 8002f0c:	9200      	str	r2, [sp, #0]
 8002f0e:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002f12:	ee17 3a90 	vmov	r3, s15
 8002f16:	4632      	mov	r2, r6
 8002f18:	211a      	movs	r1, #26
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	f7ff fc3e 	bl	800279c <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.powers[i] / RegulationTaskData.parameters.net_max_power * 100.0);
 8002f20:	edd8 7a00 	vldr	s15, [r8]
 8002f24:	f8d5 0075 	ldr.w	r0, [r5, #117]	; 0x75
 8002f28:	ee07 0a10 	vmov	s14, r0
 8002f2c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002f30:	ee17 0a90 	vmov	r0, s15
 8002f34:	f7fd fb10 	bl	8000558 <__aeabi_f2d>
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <DisplayTask+0x3c8>)
 8002f3c:	f7fd fb64 	bl	8000608 <__aeabi_dmul>
 8002f40:	f7fd fd74 	bl	8000a2c <__aeabi_d2uiz>
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_PRG_BAR, i + 1, rest, 0);
 8002f44:	f04f 0800 	mov.w	r8, #0
 8002f48:	f8cd 8000 	str.w	r8, [sp]
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4632      	mov	r2, r6
 8002f50:	211b      	movs	r1, #27
 8002f52:	4638      	mov	r0, r7
 8002f54:	f7ff fc22 	bl	800279c <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_CO_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CO_heater_PWM[i], 0);
 8002f58:	1d23      	adds	r3, r4, #4
 8002f5a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002f5e:	885b      	ldrh	r3, [r3, #2]
 8002f60:	f8cd 8000 	str.w	r8, [sp]
 8002f64:	4632      	mov	r2, r6
 8002f66:	211c      	movs	r1, #28
 8002f68:	4638      	mov	r0, r7
 8002f6a:	f7ff fc17 	bl	800279c <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_CWU_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CWU_heater_PWM[i], 0);
 8002f6e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8002f72:	88a3      	ldrh	r3, [r4, #4]
 8002f74:	f8cd 8000 	str.w	r8, [sp]
 8002f78:	4632      	mov	r2, r6
 8002f7a:	211d      	movs	r1, #29
 8002f7c:	4638      	mov	r0, r7
 8002f7e:	f7ff fc0d 	bl	800279c <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 8002f82:	b2f4      	uxtb	r4, r6
 8002f84:	2c02      	cmp	r4, #2
 8002f86:	f67f af63 	bls.w	8002e50 <DisplayTask+0x254>
 8002f8a:	e6c7      	b.n	8002d1c <DisplayTask+0x120>
			if(ulNotificationValue == 1){
 8002f8c:	2801      	cmp	r0, #1
 8002f8e:	d006      	beq.n	8002f9e <DisplayTask+0x3a2>
			}else if(ulNotificationValue == 2){
 8002f90:	2802      	cmp	r0, #2
 8002f92:	d00a      	beq.n	8002faa <DisplayTask+0x3ae>
			Config_ChangeValue(param, (void*)valPtr);
 8002f94:	4649      	mov	r1, r9
 8002f96:	4650      	mov	r0, sl
 8002f98:	f7fe f900 	bl	800119c <Config_ChangeValue>
 8002f9c:	e6ca      	b.n	8002d34 <DisplayTask+0x138>
				param = nextion_big.param;
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <DisplayTask+0x3d0>)
 8002fa0:	f8d3 a004 	ldr.w	sl, [r3, #4]
				valPtr = &nextion_big.value[0];
 8002fa4:	f103 0908 	add.w	r9, r3, #8
 8002fa8:	e7f4      	b.n	8002f94 <DisplayTask+0x398>
				param = nextion_small.param;
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <DisplayTask+0x3d4>)
 8002fac:	f8d3 a004 	ldr.w	sl, [r3, #4]
				valPtr = &nextion_small.value[0];
 8002fb0:	f103 0908 	add.w	r9, r3, #8
 8002fb4:	e7ee      	b.n	8002f94 <DisplayTask+0x398>
 8002fb6:	bf00      	nop
 8002fb8:	20002cd4 	.word	0x20002cd4
 8002fbc:	40240000 	.word	0x40240000
 8002fc0:	20003314 	.word	0x20003314
 8002fc4:	40590000 	.word	0x40590000
 8002fc8:	51eb851f 	.word	0x51eb851f
 8002fcc:	20002b20 	.word	0x20002b20
 8002fd0:	20002cb4 	.word	0x20002cb4
 8002fd4:	cccccccd 	.word	0xcccccccd

08002fd8 <W5500_WriteBuff>:

static void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
}

static void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8002fd8:	b508      	push	{r3, lr}
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fde:	460a      	mov	r2, r1
 8002fe0:	4601      	mov	r1, r0
 8002fe2:	4802      	ldr	r0, [pc, #8]	; (8002fec <W5500_WriteBuff+0x14>)
 8002fe4:	f004 fb18 	bl	8007618 <HAL_SPI_Transmit>
}
 8002fe8:	bd08      	pop	{r3, pc}
 8002fea:	bf00      	nop
 8002fec:	20003354 	.word	0x20003354

08002ff0 <W5500_WriteByte>:
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
    return byte;
}

static void W5500_WriteByte(uint8_t byte) {
 8002ff0:	b500      	push	{lr}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	ab02      	add	r3, sp, #8
 8002ff6:	f803 0d01 	strb.w	r0, [r3, #-1]!
    W5500_WriteBuff(&byte, sizeof(byte));
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ffeb 	bl	8002fd8 <W5500_WriteBuff>
}
 8003002:	b003      	add	sp, #12
 8003004:	f85d fb04 	ldr.w	pc, [sp], #4

08003008 <W5500_ReadBuff>:
static void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8003008:	b508      	push	{r3, lr}
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 800300a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800300e:	460a      	mov	r2, r1
 8003010:	4601      	mov	r1, r0
 8003012:	4802      	ldr	r0, [pc, #8]	; (800301c <W5500_ReadBuff+0x14>)
 8003014:	f004 fce4 	bl	80079e0 <HAL_SPI_Receive>
}
 8003018:	bd08      	pop	{r3, pc}
 800301a:	bf00      	nop
 800301c:	20003354 	.word	0x20003354

08003020 <W5500_ReadByte>:
static uint8_t W5500_ReadByte(void) {
 8003020:	b500      	push	{lr}
 8003022:	b083      	sub	sp, #12
    W5500_ReadBuff(&byte, sizeof(byte));
 8003024:	2101      	movs	r1, #1
 8003026:	f10d 0007 	add.w	r0, sp, #7
 800302a:	f7ff ffed 	bl	8003008 <W5500_ReadBuff>
}
 800302e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003032:	b003      	add	sp, #12
 8003034:	f85d fb04 	ldr.w	pc, [sp], #4

08003038 <cs_desel>:
static void cs_desel() {
 8003038:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET); //CS HIGH
 800303a:	2201      	movs	r2, #1
 800303c:	2110      	movs	r1, #16
 800303e:	4805      	ldr	r0, [pc, #20]	; (8003054 <cs_desel+0x1c>)
 8003040:	f002 febf 	bl	8005dc2 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8003044:	2300      	movs	r3, #0
 8003046:	461a      	mov	r2, r3
 8003048:	4619      	mov	r1, r3
 800304a:	4803      	ldr	r0, [pc, #12]	; (8003058 <cs_desel+0x20>)
 800304c:	6800      	ldr	r0, [r0, #0]
 800304e:	f005 ff03 	bl	8008e58 <xQueueGenericSend>
}
 8003052:	bd08      	pop	{r3, pc}
 8003054:	40020000 	.word	0x40020000
 8003058:	20003430 	.word	0x20003430

0800305c <cs_sel>:
static void cs_sel() {
 800305c:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 800305e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <cs_sel+0x1c>)
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	f006 f8ed 	bl	8009244 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET); //CS LOW
 800306a:	2200      	movs	r2, #0
 800306c:	2110      	movs	r1, #16
 800306e:	4803      	ldr	r0, [pc, #12]	; (800307c <cs_sel+0x20>)
 8003070:	f002 fea7 	bl	8005dc2 <HAL_GPIO_WritePin>
}
 8003074:	bd08      	pop	{r3, pc}
 8003076:	bf00      	nop
 8003078:	20003430 	.word	0x20003430
 800307c:	40020000 	.word	0x40020000

08003080 <EthernetTask>:
	                     .gw 	= {192, 168, 0, 1}};					// Gateway address

EthernetConfig_t ethConf;

void EthernetTask(void const * argument)
{
 8003080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003084:	b086      	sub	sp, #24
	uint8_t first_frame = 1;
	uint8_t remoteIP[4][4];
	uint16_t remotePort[4];
	int32_t rcvSize = 0;

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8003086:	49a1      	ldr	r1, [pc, #644]	; (800330c <EthernetTask+0x28c>)
 8003088:	48a1      	ldr	r0, [pc, #644]	; (8003310 <EthernetTask+0x290>)
 800308a:	f7fe ff51 	bl	8001f30 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 800308e:	49a1      	ldr	r1, [pc, #644]	; (8003314 <EthernetTask+0x294>)
 8003090:	48a1      	ldr	r0, [pc, #644]	; (8003318 <EthernetTask+0x298>)
 8003092:	f7fe ff5f 	bl	8001f54 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8003096:	49a1      	ldr	r1, [pc, #644]	; (800331c <EthernetTask+0x29c>)
 8003098:	48a1      	ldr	r0, [pc, #644]	; (8003320 <EthernetTask+0x2a0>)
 800309a:	f7fe ff73 	bl	8001f84 <reg_wizchip_spiburst_cbfunc>

	CLI_Init();
 800309e:	f7fe f847 	bl	8001130 <CLI_Init>

	if(Config_GetEthernetConfig(&ethConf) != CONF_OK){
 80030a2:	48a0      	ldr	r0, [pc, #640]	; (8003324 <EthernetTask+0x2a4>)
 80030a4:	f7fe f910 	bl	80012c8 <Config_GetEthernetConfig>
 80030a8:	b110      	cbz	r0, 80030b0 <EthernetTask+0x30>
		vTaskSuspend(NULL);
 80030aa:	2000      	movs	r0, #0
 80030ac:	f006 fe70 	bl	8009d90 <vTaskSuspend>
	}

	memcpy(&netInfo.gw, &ethConf.gatewayAddress, 4);
 80030b0:	4b9c      	ldr	r3, [pc, #624]	; (8003324 <EthernetTask+0x2a4>)
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	4c9c      	ldr	r4, [pc, #624]	; (8003328 <EthernetTask+0x2a8>)
 80030b6:	f8c4 200e 	str.w	r2, [r4, #14]
	memcpy(&netInfo.ip, &ethConf.ipAddress, 4);
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	f8c4 2006 	str.w	r2, [r4, #6]
	memcpy(&netInfo.mac, &ethConf.macAddress, 6);
 80030c0:	461a      	mov	r2, r3
 80030c2:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 80030c6:	6020      	str	r0, [r4, #0]
 80030c8:	8892      	ldrh	r2, [r2, #4]
 80030ca:	80a2      	strh	r2, [r4, #4]
	memcpy(&netInfo.sn, &ethConf.subnetMask, 4);
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f8c4 300a 	str.w	r3, [r4, #10]
	wizchip_init(bufSize, bufSize);
 80030d2:	4896      	ldr	r0, [pc, #600]	; (800332c <EthernetTask+0x2ac>)
 80030d4:	4601      	mov	r1, r0
 80030d6:	f7fe ffa9 	bl	800202c <wizchip_init>

	wizchip_setnetinfo(&netInfo);
 80030da:	4620      	mov	r0, r4
 80030dc:	f7ff f80a 	bl	80020f4 <wizchip_setnetinfo>
	wizchip_setinterruptmask(IK_SOCK_3);
 80030e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80030e4:	f7fe fff8 	bl	80020d8 <wizchip_setinterruptmask>
	wizchip_getnetinfo(&netInfo);
 80030e8:	4620      	mov	r0, r4
 80030ea:	f7ff f831 	bl	8002150 <wizchip_getnetinfo>
	//if(socket(2, Sn_MR_TCP, 1883, 0) == 0){

	//}

	// Telnet Port (CLI, debug)
	if(socket(3, Sn_MR_TCP, 23, SF_TCP_NODELAY) == 3){
 80030ee:	2320      	movs	r3, #32
 80030f0:	2217      	movs	r2, #23
 80030f2:	2101      	movs	r1, #1
 80030f4:	2003      	movs	r0, #3
 80030f6:	f7fe fc19 	bl	800192c <socket>
 80030fa:	2803      	cmp	r0, #3
 80030fc:	d108      	bne.n	8003110 <EthernetTask+0x90>
		if(listen(3) == SOCK_OK) {
 80030fe:	f7fe fcc1 	bl	8001a84 <listen>
 8003102:	2801      	cmp	r0, #1
 8003104:	d104      	bne.n	8003110 <EthernetTask+0x90>
			setSn_IMR(3, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 8003106:	211f      	movs	r1, #31
 8003108:	f642 4068 	movw	r0, #11368	; 0x2c68
 800310c:	f7fe fa64 	bl	80015d8 <WIZCHIP_WRITE>
{
 8003110:	2701      	movs	r7, #1
	}

  /* Infinite loop */
	for(;;)
	{
		if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 8003112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003116:	2200      	movs	r2, #0
 8003118:	4619      	mov	r1, r3
 800311a:	4618      	mov	r0, r3
 800311c:	f007 fa00 	bl	800a520 <xTaskNotifyWait>
 8003120:	2801      	cmp	r0, #1
 8003122:	d1f6      	bne.n	8003112 <EthernetTask+0x92>
 8003124:	e0c5      	b.n	80032b2 <EthernetTask+0x232>
				if(interruptSource & IK_IP_CONFLICT){

				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_0){
					interrupt = getSn_IR(0);
 8003126:	f44f 7002 	mov.w	r0, #520	; 0x208
 800312a:	f7fe fa23 	bl	8001574 <WIZCHIP_READ>
					if(interrupt & Sn_IR_CON){
 800312e:	f010 0f01 	tst.w	r0, #1
 8003132:	f000 80cc 	beq.w	80032ce <EthernetTask+0x24e>
						getsockopt(0, SO_DESTIP, &remoteIP[0]);
 8003136:	aa02      	add	r2, sp, #8
 8003138:	2104      	movs	r1, #4
 800313a:	2000      	movs	r0, #0
 800313c:	f7fe fe34 	bl	8001da8 <getsockopt>
						getsockopt(0, SO_DESTPORT, (uint8_t*)&remotePort[0]);
 8003140:	466a      	mov	r2, sp
 8003142:	2105      	movs	r1, #5
 8003144:	2000      	movs	r0, #0
 8003146:	f7fe fe2f 	bl	8001da8 <getsockopt>
 800314a:	e0c0      	b.n	80032ce <EthernetTask+0x24e>
					}
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_1){
					interrupt = getSn_IR(1);
 800314c:	f44f 700a 	mov.w	r0, #552	; 0x228
 8003150:	f7fe fa10 	bl	8001574 <WIZCHIP_READ>
					if(interrupt & Sn_IR_CON){
 8003154:	f010 0f01 	tst.w	r0, #1
 8003158:	f000 80bd 	beq.w	80032d6 <EthernetTask+0x256>
						getsockopt(1, SO_DESTIP, &remoteIP[1]);
 800315c:	aa03      	add	r2, sp, #12
 800315e:	2104      	movs	r1, #4
 8003160:	2001      	movs	r0, #1
 8003162:	f7fe fe21 	bl	8001da8 <getsockopt>
						getsockopt(1, SO_DESTPORT, (uint8_t*)&remotePort[1]);
 8003166:	f10d 0202 	add.w	r2, sp, #2
 800316a:	2105      	movs	r1, #5
 800316c:	2001      	movs	r0, #1
 800316e:	f7fe fe1b 	bl	8001da8 <getsockopt>
 8003172:	e0b0      	b.n	80032d6 <EthernetTask+0x256>

					}
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_2){
					interrupt = getSn_IR(2);
 8003174:	f44f 7012 	mov.w	r0, #584	; 0x248
 8003178:	f7fe f9fc 	bl	8001574 <WIZCHIP_READ>
 800317c:	e0af      	b.n	80032de <EthernetTask+0x25e>
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_3){
					freesize = getSn_TxMAX(3);
 800317e:	f641 7068 	movw	r0, #8040	; 0x1f68
 8003182:	f7fe f9f7 	bl	8001574 <WIZCHIP_READ>
 8003186:	b280      	uxth	r0, r0
 8003188:	0280      	lsls	r0, r0, #10
 800318a:	4b69      	ldr	r3, [pc, #420]	; (8003330 <EthernetTask+0x2b0>)
 800318c:	8018      	strh	r0, [r3, #0]
					interrupt = getSn_IR(3);
 800318e:	f44f 701a 	mov.w	r0, #616	; 0x268
 8003192:	f7fe f9ef 	bl	8001574 <WIZCHIP_READ>
 8003196:	4605      	mov	r5, r0
					setSn_IR(3, interrupt);
 8003198:	f000 011f 	and.w	r1, r0, #31
 800319c:	f44f 701a 	mov.w	r0, #616	; 0x268
 80031a0:	f7fe fa1a 	bl	80015d8 <WIZCHIP_WRITE>
					if(interrupt & Sn_IR_CON){
 80031a4:	f015 0f01 	tst.w	r5, #1
 80031a8:	d128      	bne.n	80031fc <EthernetTask+0x17c>
						RuntimeStats_TelnetTxInc();
						freesize = send(3, (uint8_t*)gretMsg, 47);
						first_frame = 1;
					}

					if(interrupt & Sn_IR_RECV){
 80031aa:	f015 0f04 	tst.w	r5, #4
 80031ae:	d007      	beq.n	80031c0 <EthernetTask+0x140>
						if(first_frame == 0){
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d03c      	beq.n	800322e <EthernetTask+0x1ae>
								freesize = send(3, txBuf, strlen((char*)txBuf));
								vTaskDelay(1);
							}while(xMoreDataToFollow != pdFALSE);
							rcvSize = 0;
						}else{
							recv(3, rcvBuf, 128);
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	495f      	ldr	r1, [pc, #380]	; (8003334 <EthernetTask+0x2b4>)
 80031b8:	2003      	movs	r0, #3
 80031ba:	f7fe fd83 	bl	8001cc4 <recv>
							first_frame = 0;
 80031be:	2700      	movs	r7, #0
						}
					}

					if(interrupt & Sn_IR_SENDOK){
 80031c0:	f015 0f10 	tst.w	r5, #16
 80031c4:	d164      	bne.n	8003290 <EthernetTask+0x210>
						ClrSiS(3);
					}

					if(interrupt & Sn_IR_DISCON || interrupt & Sn_IR_TIMEOUT){
 80031c6:	f015 0f0a 	tst.w	r5, #10
 80031ca:	f000 808c 	beq.w	80032e6 <EthernetTask+0x266>
						RuntimeStats_TelnetLastIPSet();
 80031ce:	f7ff fa5f 	bl	8002690 <RuntimeStats_TelnetLastIPSet>
						disconnect(3);
 80031d2:	2003      	movs	r0, #3
 80031d4:	f7fe fc8c 	bl	8001af0 <disconnect>
						if(socket(3, Sn_MR_TCP, 23, SF_TCP_NODELAY) == 3){
 80031d8:	2320      	movs	r3, #32
 80031da:	2217      	movs	r2, #23
 80031dc:	2101      	movs	r1, #1
 80031de:	2003      	movs	r0, #3
 80031e0:	f7fe fba4 	bl	800192c <socket>
 80031e4:	2803      	cmp	r0, #3
 80031e6:	d17e      	bne.n	80032e6 <EthernetTask+0x266>
							if(listen(3) == SOCK_OK) {
 80031e8:	f7fe fc4c 	bl	8001a84 <listen>
 80031ec:	2801      	cmp	r0, #1
 80031ee:	d17a      	bne.n	80032e6 <EthernetTask+0x266>
								setSn_IMR(3, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 80031f0:	211f      	movs	r1, #31
 80031f2:	f642 4068 	movw	r0, #11368	; 0x2c68
 80031f6:	f7fe f9ef 	bl	80015d8 <WIZCHIP_WRITE>
 80031fa:	e074      	b.n	80032e6 <EthernetTask+0x266>
						getsockopt(3, SO_DESTIP, &remoteIP[3]);
 80031fc:	aa05      	add	r2, sp, #20
 80031fe:	2104      	movs	r1, #4
 8003200:	2003      	movs	r0, #3
 8003202:	f7fe fdd1 	bl	8001da8 <getsockopt>
						getsockopt(3, SO_DESTPORT, (uint8_t*)&remotePort[3]);
 8003206:	f10d 0206 	add.w	r2, sp, #6
 800320a:	2105      	movs	r1, #5
 800320c:	2003      	movs	r0, #3
 800320e:	f7fe fdcb 	bl	8001da8 <getsockopt>
						RuntimeStats_TelnetCurrIPSet(&remoteIP[3][0]);
 8003212:	a805      	add	r0, sp, #20
 8003214:	f7ff fa36 	bl	8002684 <RuntimeStats_TelnetCurrIPSet>
						RuntimeStats_TelnetTxInc();
 8003218:	f7ff fa2c 	bl	8002674 <RuntimeStats_TelnetTxInc>
						freesize = send(3, (uint8_t*)gretMsg, 47);
 800321c:	222f      	movs	r2, #47	; 0x2f
 800321e:	4946      	ldr	r1, [pc, #280]	; (8003338 <EthernetTask+0x2b8>)
 8003220:	2003      	movs	r0, #3
 8003222:	f7fe fcad 	bl	8001b80 <send>
 8003226:	4b42      	ldr	r3, [pc, #264]	; (8003330 <EthernetTask+0x2b0>)
 8003228:	8018      	strh	r0, [r3, #0]
						first_frame = 1;
 800322a:	2701      	movs	r7, #1
 800322c:	e7bd      	b.n	80031aa <EthernetTask+0x12a>
							RuntimeStats_TelnetRxInc();
 800322e:	f7ff fa19 	bl	8002664 <RuntimeStats_TelnetRxInc>
							rcvSize += recv(3, &rcvBuf[rcvSize], RX_BUF_SIZE);
 8003232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003236:	493f      	ldr	r1, [pc, #252]	; (8003334 <EthernetTask+0x2b4>)
 8003238:	2003      	movs	r0, #3
 800323a:	f7fe fd43 	bl	8001cc4 <recv>
							while(((rcvBuf[rcvSize - 1] == '\r') || (rcvBuf[rcvSize - 1] == '\n')) && (rcvSize > 0)){
 800323e:	e005      	b.n	800324c <EthernetTask+0x1cc>
 8003240:	2800      	cmp	r0, #0
 8003242:	dd0a      	ble.n	800325a <EthernetTask+0x1da>
								rcvBuf[rcvSize - 1] = 0;
 8003244:	4a3b      	ldr	r2, [pc, #236]	; (8003334 <EthernetTask+0x2b4>)
 8003246:	2100      	movs	r1, #0
 8003248:	54d1      	strb	r1, [r2, r3]
								rcvSize--;
 800324a:	4618      	mov	r0, r3
							while(((rcvBuf[rcvSize - 1] == '\r') || (rcvBuf[rcvSize - 1] == '\n')) && (rcvSize > 0)){
 800324c:	1e43      	subs	r3, r0, #1
 800324e:	4a39      	ldr	r2, [pc, #228]	; (8003334 <EthernetTask+0x2b4>)
 8003250:	5cd2      	ldrb	r2, [r2, r3]
 8003252:	2a0d      	cmp	r2, #13
 8003254:	d0f4      	beq.n	8003240 <EthernetTask+0x1c0>
 8003256:	2a0a      	cmp	r2, #10
 8003258:	d0f2      	beq.n	8003240 <EthernetTask+0x1c0>
								xMoreDataToFollow = FreeRTOS_CLIProcessCommand(&rcvBuf, &txBuf, TX_BUF_SIZE);
 800325a:	4e38      	ldr	r6, [pc, #224]	; (800333c <EthernetTask+0x2bc>)
 800325c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003260:	4631      	mov	r1, r6
 8003262:	4834      	ldr	r0, [pc, #208]	; (8003334 <EthernetTask+0x2b4>)
 8003264:	f008 f868 	bl	800b338 <FreeRTOS_CLIProcessCommand>
 8003268:	4680      	mov	r8, r0
								RuntimeStats_TelnetTxInc();
 800326a:	f7ff fa03 	bl	8002674 <RuntimeStats_TelnetTxInc>
								freesize = send(3, txBuf, strlen((char*)txBuf));
 800326e:	4630      	mov	r0, r6
 8003270:	f7fc ffb6 	bl	80001e0 <strlen>
 8003274:	b282      	uxth	r2, r0
 8003276:	4631      	mov	r1, r6
 8003278:	2003      	movs	r0, #3
 800327a:	f7fe fc81 	bl	8001b80 <send>
 800327e:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <EthernetTask+0x2b0>)
 8003280:	8018      	strh	r0, [r3, #0]
								vTaskDelay(1);
 8003282:	2001      	movs	r0, #1
 8003284:	f006 fd00 	bl	8009c88 <vTaskDelay>
							}while(xMoreDataToFollow != pdFALSE);
 8003288:	f1b8 0f00 	cmp.w	r8, #0
 800328c:	d1e5      	bne.n	800325a <EthernetTask+0x1da>
 800328e:	e797      	b.n	80031c0 <EthernetTask+0x140>
						ClrSiS(3);
 8003290:	2003      	movs	r0, #3
 8003292:	f7fe fd0b 	bl	8001cac <ClrSiS>
 8003296:	e796      	b.n	80031c6 <EthernetTask+0x146>
					}

				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_4){
					interrupt = getSn_IR(4);
 8003298:	f44f 7022 	mov.w	r0, #648	; 0x288
 800329c:	f7fe f96a 	bl	8001574 <WIZCHIP_READ>
 80032a0:	e024      	b.n	80032ec <EthernetTask+0x26c>
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_5){
					interrupt = getSn_IR(5);
 80032a2:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 80032a6:	f7fe f965 	bl	8001574 <WIZCHIP_READ>
 80032aa:	e022      	b.n	80032f2 <EthernetTask+0x272>
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_6){
					interrupt = getSn_IR(6);
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_7){
 80032ac:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80032b0:	d127      	bne.n	8003302 <EthernetTask+0x282>
			while(HAL_GPIO_ReadPin(ETH_INT_GPIO_Port, ETH_INT_Pin) == 0){
 80032b2:	2102      	movs	r1, #2
 80032b4:	4822      	ldr	r0, [pc, #136]	; (8003340 <EthernetTask+0x2c0>)
 80032b6:	f002 fd7d 	bl	8005db4 <HAL_GPIO_ReadPin>
 80032ba:	2800      	cmp	r0, #0
 80032bc:	f47f af29 	bne.w	8003112 <EthernetTask+0x92>
				interruptSource = wizchip_getinterrupt();
 80032c0:	f7fe fef9 	bl	80020b6 <wizchip_getinterrupt>
 80032c4:	4604      	mov	r4, r0
				if(interruptSource & IK_SOCK_0){
 80032c6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80032ca:	f47f af2c 	bne.w	8003126 <EthernetTask+0xa6>
				if(interruptSource & IK_SOCK_1){
 80032ce:	f414 7f00 	tst.w	r4, #512	; 0x200
 80032d2:	f47f af3b 	bne.w	800314c <EthernetTask+0xcc>
				if(interruptSource & IK_SOCK_2){
 80032d6:	f414 6f80 	tst.w	r4, #1024	; 0x400
 80032da:	f47f af4b 	bne.w	8003174 <EthernetTask+0xf4>
				if(interruptSource & IK_SOCK_3){
 80032de:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80032e2:	f47f af4c 	bne.w	800317e <EthernetTask+0xfe>
				if(interruptSource & IK_SOCK_4){
 80032e6:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 80032ea:	d1d5      	bne.n	8003298 <EthernetTask+0x218>
				if(interruptSource & IK_SOCK_5){
 80032ec:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 80032f0:	d1d7      	bne.n	80032a2 <EthernetTask+0x222>
				if(interruptSource & IK_SOCK_6){
 80032f2:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 80032f6:	d0d9      	beq.n	80032ac <EthernetTask+0x22c>
					interrupt = getSn_IR(6);
 80032f8:	f44f 7032 	mov.w	r0, #712	; 0x2c8
 80032fc:	f7fe f93a 	bl	8001574 <WIZCHIP_READ>
 8003300:	e7d4      	b.n	80032ac <EthernetTask+0x22c>
					interrupt = getSn_IR(7);
 8003302:	f44f 703a 	mov.w	r0, #744	; 0x2e8
 8003306:	f7fe f935 	bl	8001574 <WIZCHIP_READ>
 800330a:	e7d2      	b.n	80032b2 <EthernetTask+0x232>
 800330c:	08003039 	.word	0x08003039
 8003310:	0800305d 	.word	0x0800305d
 8003314:	08002ff1 	.word	0x08002ff1
 8003318:	08003021 	.word	0x08003021
 800331c:	08002fd9 	.word	0x08002fd9
 8003320:	08003009 	.word	0x08003009
 8003324:	20002f6c 	.word	0x20002f6c
 8003328:	20000038 	.word	0x20000038
 800332c:	20000030 	.word	0x20000030
 8003330:	20002d68 	.word	0x20002d68
 8003334:	20002d6c 	.word	0x20002d6c
 8003338:	0800cea8 	.word	0x0800cea8
 800333c:	20002e6c 	.word	0x20002e6c
 8003340:	40020400 	.word	0x40020400

08003344 <NRF_ChipSelect>:

void NRF_ChipSelect (void);

void NRF_ChipDeselect (void);

void NRF_ChipSelect (void){
 8003344:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 8003346:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <NRF_ChipSelect+0x1c>)
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	f005 ff79 	bl	8009244 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 8003352:	2200      	movs	r2, #0
 8003354:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003358:	4802      	ldr	r0, [pc, #8]	; (8003364 <NRF_ChipSelect+0x20>)
 800335a:	f002 fd32 	bl	8005dc2 <HAL_GPIO_WritePin>
}
 800335e:	bd08      	pop	{r3, pc}
 8003360:	20003430 	.word	0x20003430
 8003364:	40020400 	.word	0x40020400

08003368 <NRF_ChipDeselect>:

void NRF_ChipDeselect (void){
 8003368:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_SET);
 800336a:	2201      	movs	r2, #1
 800336c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003370:	4805      	ldr	r0, [pc, #20]	; (8003388 <NRF_ChipDeselect+0x20>)
 8003372:	f002 fd26 	bl	8005dc2 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8003376:	2300      	movs	r3, #0
 8003378:	461a      	mov	r2, r3
 800337a:	4619      	mov	r1, r3
 800337c:	4803      	ldr	r0, [pc, #12]	; (800338c <NRF_ChipDeselect+0x24>)
 800337e:	6800      	ldr	r0, [r0, #0]
 8003380:	f005 fd6a 	bl	8008e58 <xQueueGenericSend>
}
 8003384:	bd08      	pop	{r3, pc}
 8003386:	bf00      	nop
 8003388:	40020400 	.word	0x40020400
 800338c:	20003430 	.word	0x20003430

08003390 <RadioTask>:

void RadioTask(void const * argument)
{
 8003390:	b508      	push	{r3, lr}
	const uint8_t ecoIOinitMSG[] = "IsAlive";
  /* USER CODE BEGIN RadioComm */
	nRF24_Init(&hspi1);
 8003392:	480e      	ldr	r0, [pc, #56]	; (80033cc <RadioTask+0x3c>)
 8003394:	f001 ff0a 	bl	80051ac <nRF24_Init>
	nRF24_SetRXAddress(0, "_ECOE");
 8003398:	490d      	ldr	r1, [pc, #52]	; (80033d0 <RadioTask+0x40>)
 800339a:	2000      	movs	r0, #0
 800339c:	f001 fd55 	bl	8004e4a <nRF24_SetRXAddress>
	nRF24_SetRXAddress(1, "_ECOI");
 80033a0:	490c      	ldr	r1, [pc, #48]	; (80033d4 <RadioTask+0x44>)
 80033a2:	2001      	movs	r0, #1
 80033a4:	f001 fd51 	bl	8004e4a <nRF24_SetRXAddress>
	nRF24_SetTXAddress("_ECOM");
 80033a8:	480b      	ldr	r0, [pc, #44]	; (80033d8 <RadioTask+0x48>)
 80033aa:	f001 fd91 	bl	8004ed0 <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 80033ae:	f001 fd6d 	bl	8004e8c <nRF24_RX_Mode>
	//nRF24_SendData((uint8_t*)ecoIOinitMSG, sizeof(ecoIOinitMSG));

  /* Infinite loop */
  for(;;)
  {
	  if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 80033b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033b6:	2200      	movs	r2, #0
 80033b8:	4619      	mov	r1, r3
 80033ba:	4618      	mov	r0, r3
 80033bc:	f007 f8b0 	bl	800a520 <xTaskNotifyWait>
 80033c0:	2801      	cmp	r0, #1
 80033c2:	d1f6      	bne.n	80033b2 <RadioTask+0x22>
		  nRF24_Event();
 80033c4:	f001 fec4 	bl	8005150 <nRF24_Event>
 80033c8:	e7f3      	b.n	80033b2 <RadioTask+0x22>
 80033ca:	bf00      	nop
 80033cc:	20003354 	.word	0x20003354
 80033d0:	0800ced8 	.word	0x0800ced8
 80033d4:	0800cee0 	.word	0x0800cee0
 80033d8:	0800cee8 	.word	0x0800cee8

080033dc <fModbusParseFloat>:
#define CWU_HEATER_PHASE_POWER 		1

float fModbusParseFloat (uint8_t* in_data){
	union float_bytes buffor;

	buffor.bytes[3] = *in_data;
 80033dc:	7802      	ldrb	r2, [r0, #0]
 80033de:	2300      	movs	r3, #0
 80033e0:	f362 631f 	bfi	r3, r2, #24, #8
	in_data ++;
	buffor.bytes[2] = *in_data;
 80033e4:	7842      	ldrb	r2, [r0, #1]
 80033e6:	f362 4317 	bfi	r3, r2, #16, #8
	in_data ++;
	buffor.bytes[1] = *in_data;
 80033ea:	7882      	ldrb	r2, [r0, #2]
 80033ec:	f362 230f 	bfi	r3, r2, #8, #8
	in_data ++;
	buffor.bytes[0] = *in_data;
 80033f0:	78c2      	ldrb	r2, [r0, #3]
 80033f2:	f362 0307 	bfi	r3, r2, #0, #8

	return buffor.value;
 80033f6:	ee00 3a10 	vmov	s0, r3
}
 80033fa:	4770      	bx	lr

080033fc <RegulationTask>:

void RegulationTask(void const * argument)
{
 80033fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fe:	ed2d 8b04 	vpush	{d8-d9}
 8003402:	b0a5      	sub	sp, #148	; 0x94
	uint8_t counter_data_raw[36];
	uint8_t imported_exported_power_raw[8];
	uint8_t receieves = 0;
	uint8_t temperatures_raw[SENSOR_NUMBER * 2];

	regulationData.configStatus = Config_GetRegConfig(&regulationData.parameters);
 8003404:	4cc9      	ldr	r4, [pc, #804]	; (800372c <RegulationTask+0x330>)
 8003406:	4620      	mov	r0, r4
 8003408:	f7fd ff7a 	bl	8001300 <Config_GetRegConfig>
 800340c:	f804 0c01 	strb.w	r0, [r4, #-1]

	HAL_TIM_PWM_Init(&htim1);
 8003410:	4ec7      	ldr	r6, [pc, #796]	; (8003730 <RegulationTask+0x334>)
 8003412:	4630      	mov	r0, r6
 8003414:	f004 fd53 	bl	8007ebe <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 8003418:	4dc6      	ldr	r5, [pc, #792]	; (8003734 <RegulationTask+0x338>)
 800341a:	4628      	mov	r0, r5
 800341c:	f004 fd4f 	bl	8007ebe <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim3);
 8003420:	4cc5      	ldr	r4, [pc, #788]	; (8003738 <RegulationTask+0x33c>)
 8003422:	4620      	mov	r0, r4
 8003424:	f004 fd4b 	bl	8007ebe <HAL_TIM_PWM_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003428:	2100      	movs	r1, #0
 800342a:	4630      	mov	r0, r6
 800342c:	f004 fe12 	bl	8008054 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003430:	2104      	movs	r1, #4
 8003432:	4630      	mov	r0, r6
 8003434:	f004 fe0e 	bl	8008054 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003438:	2108      	movs	r1, #8
 800343a:	4630      	mov	r0, r6
 800343c:	f004 fe0a 	bl	8008054 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003440:	2100      	movs	r1, #0
 8003442:	4628      	mov	r0, r5
 8003444:	f004 fe06 	bl	8008054 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003448:	2104      	movs	r1, #4
 800344a:	4628      	mov	r0, r5
 800344c:	f004 fe02 	bl	8008054 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003450:	2108      	movs	r1, #8
 8003452:	4628      	mov	r0, r5
 8003454:	f004 fdfe 	bl	8008054 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003458:	2100      	movs	r1, #0
 800345a:	4620      	mov	r0, r4
 800345c:	f004 fdfa 	bl	8008054 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003460:	2104      	movs	r1, #4
 8003462:	4620      	mov	r0, r4
 8003464:	f004 fdf6 	bl	8008054 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003468:	2108      	movs	r1, #8
 800346a:	4620      	mov	r0, r4
 800346c:	f004 fdf2 	bl	8008054 <HAL_TIM_PWM_Start>

	TIM1 -> CCR1 = 500;
 8003470:	4ab2      	ldr	r2, [pc, #712]	; (800373c <RegulationTask+0x340>)
 8003472:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003476:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1 -> CCR2 = 500;
 8003478:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1 -> CCR3 = 500;
 800347a:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM2 -> CCR1 = 500;
 800347c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003480:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2 -> CCR2 = 500;
 8003482:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2 -> CCR3 = 500;
 8003484:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM3 -> CCR1 = 500;
 8003486:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800348a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3 -> CCR2 = 500;
 800348c:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3 -> CCR3 = 500;
 800348e:	63d3      	str	r3, [r2, #60]	; 0x3c

	//Uchwyty i inne struktury
	mbPort.task =  xTaskGetCurrentTaskHandle();
 8003490:	f006 fe86 	bl	800a1a0 <xTaskGetCurrentTaskHandle>
 8003494:	9023      	str	r0, [sp, #140]	; 0x8c

	mcp23017_init(&expander1, &hi2c1, 0b0100111);
 8003496:	4caa      	ldr	r4, [pc, #680]	; (8003740 <RegulationTask+0x344>)
 8003498:	2227      	movs	r2, #39	; 0x27
 800349a:	49aa      	ldr	r1, [pc, #680]	; (8003744 <RegulationTask+0x348>)
 800349c:	4620      	mov	r0, r4
 800349e:	f7fe fe85 	bl	80021ac <mcp23017_init>
	mcp23017_iodir(&expander1, 1, 0xFF);
 80034a2:	22ff      	movs	r2, #255	; 0xff
 80034a4:	2101      	movs	r1, #1
 80034a6:	4620      	mov	r0, r4
 80034a8:	f7fe fea2 	bl	80021f0 <mcp23017_iodir>
	mcp23017_iodir(&expander1, 0, 0x03);
 80034ac:	2203      	movs	r2, #3
 80034ae:	2100      	movs	r1, #0
 80034b0:	4620      	mov	r0, r4
 80034b2:	f7fe fe9d 	bl	80021f0 <mcp23017_iodir>
	expander1.gpio[0] = 0b11111100;
 80034b6:	23fc      	movs	r3, #252	; 0xfc
 80034b8:	71a3      	strb	r3, [r4, #6]
	mcp23017_write_gpio(&expander1, 0);
 80034ba:	2100      	movs	r1, #0
 80034bc:	4620      	mov	r0, r4
 80034be:	f7fe feb4 	bl	800222a <mcp23017_write_gpio>

	vTaskDelay(1000);
 80034c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034c6:	f006 fbdf 	bl	8009c88 <vTaskDelay>

	expander1.gpio[0] = 0;
 80034ca:	2100      	movs	r1, #0
 80034cc:	71a1      	strb	r1, [r4, #6]
	mcp23017_write_gpio(&expander1, 0);
 80034ce:	4620      	mov	r0, r4
 80034d0:	f7fe feab 	bl	800222a <mcp23017_write_gpio>
	vModbusInit(&mbPort, &huart2, 100);
 80034d4:	2264      	movs	r2, #100	; 0x64
 80034d6:	499c      	ldr	r1, [pc, #624]	; (8003748 <RegulationTask+0x34c>)
 80034d8:	a821      	add	r0, sp, #132	; 0x84
 80034da:	f7fe ffbb 	bl	8002454 <vModbusInit>
	float exported_power = 0;
 80034de:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 800374c <RegulationTask+0x350>
	float imported_power = 0;
 80034e2:	eef0 8a48 	vmov.f32	s17, s16
 80034e6:	e07d      	b.n	80035e4 <RegulationTask+0x1e8>
		receieves = 0;

		if(regulationData.IOsignals.signals.input2 != regulationData.IOsignals.signals.output1){
			regulationData.ControlWord.CWUHeaterError = HIGH;
		}else{
			regulationData.ControlWord.CWUHeaterError = LOW;
 80034e8:	4b99      	ldr	r3, [pc, #612]	; (8003750 <RegulationTask+0x354>)
 80034ea:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80034ee:	f36f 0200 	bfc	r2, #0, #1
 80034f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80034f6:	e091      	b.n	800361c <RegulationTask+0x220>
		}

		if(regulationData.IOsignals.signals.input3 != regulationData.IOsignals.signals.output2){
			regulationData.ControlWord.COHeaterError = HIGH;
		}else{
			regulationData.ControlWord.COHeaterError = LOW;
 80034f8:	4b95      	ldr	r3, [pc, #596]	; (8003750 <RegulationTask+0x354>)
 80034fa:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80034fe:	f36f 0200 	bfc	r2, #0, #1
 8003502:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003506:	e09c      	b.n	8003642 <RegulationTask+0x246>
		}

		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
			receieves += 1;
			for(uint8_t i = 0; i < 3; i++){
				regulationData.counter.voltages[i] = fModbusParseFloat(counter_data_raw + i * 4);
 8003508:	00a6      	lsls	r6, r4, #2
 800350a:	ab0a      	add	r3, sp, #40	; 0x28
 800350c:	1998      	adds	r0, r3, r6
 800350e:	f7ff ff65 	bl	80033dc <fModbusParseFloat>
 8003512:	4d8f      	ldr	r5, [pc, #572]	; (8003750 <RegulationTask+0x354>)
 8003514:	f104 030a 	add.w	r3, r4, #10
 8003518:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800351c:	ed83 0a00 	vstr	s0, [r3]
				regulationData.counter.currents[i] = fModbusParseFloat(counter_data_raw + 12 + i * 4);
 8003520:	f106 000c 	add.w	r0, r6, #12
 8003524:	ab0a      	add	r3, sp, #40	; 0x28
 8003526:	4418      	add	r0, r3
 8003528:	f7ff ff58 	bl	80033dc <fModbusParseFloat>
 800352c:	f104 030c 	add.w	r3, r4, #12
 8003530:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003534:	ed83 0a01 	vstr	s0, [r3, #4]
				regulationData.counter.powers[i] = fModbusParseFloat(counter_data_raw + 24 + 4 * i);
 8003538:	f106 0018 	add.w	r0, r6, #24
 800353c:	ab0a      	add	r3, sp, #40	; 0x28
 800353e:	4418      	add	r0, r3
 8003540:	f7ff ff4c 	bl	80033dc <fModbusParseFloat>
 8003544:	f104 0310 	add.w	r3, r4, #16
 8003548:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800354c:	ed85 0a00 	vstr	s0, [r5]
			for(uint8_t i = 0; i < 3; i++){
 8003550:	3401      	adds	r4, #1
 8003552:	b2e4      	uxtb	r4, r4
 8003554:	2c02      	cmp	r4, #2
 8003556:	d9d7      	bls.n	8003508 <RegulationTask+0x10c>
			receieves += 1;
 8003558:	2501      	movs	r5, #1
 800355a:	e07d      	b.n	8003658 <RegulationTask+0x25c>
			for(uint8_t i = 0; i < 3; i++){
 800355c:	2400      	movs	r4, #0
 800355e:	e7f9      	b.n	8003554 <RegulationTask+0x158>
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);

			if(regulationData.counter.power_in_buffor > 0){
				regulationData.counter.power_in_buffor -= (imported_power - last_imported_power);
			}else{
				regulationData.counter.power_in_buffor = 0;
 8003560:	4b7b      	ldr	r3, [pc, #492]	; (8003750 <RegulationTask+0x354>)
 8003562:	2200      	movs	r2, #0
 8003564:	64da      	str	r2, [r3, #76]	; 0x4c
			}
			regulationData.counter.power_in_buffor += (exported_power - last_exported_power) * ACUMULATED_POWER_FACTOR;
 8003566:	ee30 8a48 	vsub.f32	s16, s0, s16
 800356a:	eddf 7a78 	vldr	s15, [pc, #480]	; 800374c <RegulationTask+0x350>
 800356e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003572:	4b77      	ldr	r3, [pc, #476]	; (8003750 <RegulationTask+0x354>)
 8003574:	ed93 8a13 	vldr	s16, [r3, #76]	; 0x4c
 8003578:	ee38 8a27 	vadd.f32	s16, s16, s15
 800357c:	ed83 8a13 	vstr	s16, [r3, #76]	; 0x4c
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 8003580:	eeb0 8a40 	vmov.f32	s16, s0
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 8003584:	eef0 8a49 	vmov.f32	s17, s18
		}

		if(vModbusReadInputRegisters(&mbPort, TEMPERATURE_ADDRESS, 0, SENSOR_NUMBER, temperatures_raw) == Modbus_OK){
 8003588:	ab03      	add	r3, sp, #12
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	230a      	movs	r3, #10
 800358e:	2200      	movs	r2, #0
 8003590:	2102      	movs	r1, #2
 8003592:	a821      	add	r0, sp, #132	; 0x84
 8003594:	f7fe ff94 	bl	80024c0 <vModbusReadInputRegisters>
 8003598:	2800      	cmp	r0, #0
 800359a:	f000 8081 	beq.w	80036a0 <RegulationTask+0x2a4>
				temperatures[i] = temp / DEC_PLACES;
			}
			memcpy(&regulationData.counter.CWU_temps[0], &temperatures[0], 24);
		}

		regulationData.counter.counter_present = 1;
 800359e:	4b6c      	ldr	r3, [pc, #432]	; (8003750 <RegulationTask+0x354>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]
		regulationData.counter.temperatures_present = 1;
 80035a4:	709a      	strb	r2, [r3, #2]
		if(receieves == 7){
 80035a6:	2d07      	cmp	r5, #7
 80035a8:	f000 8196 	beq.w	80038d8 <RegulationTask+0x4dc>

		}else{

		}

		TIM3 -> CCR1 = regulationData.counter.CWU_heater_PWM[0];
 80035ac:	4b68      	ldr	r3, [pc, #416]	; (8003750 <RegulationTask+0x354>)
 80035ae:	8899      	ldrh	r1, [r3, #4]
 80035b0:	4a68      	ldr	r2, [pc, #416]	; (8003754 <RegulationTask+0x358>)
 80035b2:	6351      	str	r1, [r2, #52]	; 0x34
		TIM3 -> CCR2 = regulationData.counter.CWU_heater_PWM[1];
 80035b4:	88d9      	ldrh	r1, [r3, #6]
 80035b6:	6391      	str	r1, [r2, #56]	; 0x38
		TIM3 -> CCR3 = regulationData.counter.CWU_heater_PWM[2];
 80035b8:	8919      	ldrh	r1, [r3, #8]
 80035ba:	63d1      	str	r1, [r2, #60]	; 0x3c

		TIM1 -> CCR1 = regulationData.counter.CO_heater_PWM[0];
 80035bc:	8959      	ldrh	r1, [r3, #10]
 80035be:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 80035c2:	6351      	str	r1, [r2, #52]	; 0x34
		TIM1 -> CCR2 = regulationData.counter.CO_heater_PWM[1];
 80035c4:	8999      	ldrh	r1, [r3, #12]
 80035c6:	6391      	str	r1, [r2, #56]	; 0x38
		TIM1 -> CCR3 = regulationData.counter.CO_heater_PWM[2];
 80035c8:	89d9      	ldrh	r1, [r3, #14]
 80035ca:	63d1      	str	r1, [r2, #60]	; 0x3c

		expander1.gpio[MCP23017_PORTA] = regulationData.IOsignals.ports.portA;
 80035cc:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80035d0:	485b      	ldr	r0, [pc, #364]	; (8003740 <RegulationTask+0x344>)
 80035d2:	7183      	strb	r3, [r0, #6]
		mcp23017_write_gpio(&expander1, 0);
 80035d4:	2100      	movs	r1, #0
 80035d6:	f7fe fe28 	bl	800222a <mcp23017_write_gpio>
		vTaskDelayUntil(&xLastWakeTime, xDelay);
 80035da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80035de:	a820      	add	r0, sp, #128	; 0x80
 80035e0:	f006 fb00 	bl	8009be4 <vTaskDelayUntil>
		mcp23017_read_gpio(&expander1, 0);
 80035e4:	4c56      	ldr	r4, [pc, #344]	; (8003740 <RegulationTask+0x344>)
 80035e6:	2100      	movs	r1, #0
 80035e8:	4620      	mov	r0, r4
 80035ea:	f7fe fe0c 	bl	8002206 <mcp23017_read_gpio>
		mcp23017_read_gpio(&expander1, 1);
 80035ee:	2101      	movs	r1, #1
 80035f0:	4620      	mov	r0, r4
 80035f2:	f7fe fe08 	bl	8002206 <mcp23017_read_gpio>
		regulationData.IOsignals.bytes[0] = expander1.gpio[0];
 80035f6:	79a2      	ldrb	r2, [r4, #6]
 80035f8:	4955      	ldr	r1, [pc, #340]	; (8003750 <RegulationTask+0x354>)
 80035fa:	f881 206a 	strb.w	r2, [r1, #106]	; 0x6a
		regulationData.IOsignals.bytes[1] = expander1.gpio[1];
 80035fe:	79e3      	ldrb	r3, [r4, #7]
 8003600:	f881 306b 	strb.w	r3, [r1, #107]	; 0x6b
		if(regulationData.IOsignals.signals.input2 != regulationData.IOsignals.signals.output1){
 8003604:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003608:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 800360c:	f43f af6c 	beq.w	80034e8 <RegulationTask+0xec>
			regulationData.ControlWord.CWUHeaterError = HIGH;
 8003610:	f891 3068 	ldrb.w	r3, [r1, #104]	; 0x68
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	f881 3068 	strb.w	r3, [r1, #104]	; 0x68
		if(regulationData.IOsignals.signals.input3 != regulationData.IOsignals.signals.output2){
 800361c:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <RegulationTask+0x354>)
 800361e:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 8003622:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8003626:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800362a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800362e:	429a      	cmp	r2, r3
 8003630:	f43f af62 	beq.w	80034f8 <RegulationTask+0xfc>
			regulationData.ControlWord.COHeaterError = HIGH;
 8003634:	4a46      	ldr	r2, [pc, #280]	; (8003750 <RegulationTask+0x354>)
 8003636:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
 8003642:	ab0a      	add	r3, sp, #40	; 0x28
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	2312      	movs	r3, #18
 8003648:	2200      	movs	r2, #0
 800364a:	2101      	movs	r1, #1
 800364c:	a821      	add	r0, sp, #132	; 0x84
 800364e:	f7fe ff37 	bl	80024c0 <vModbusReadInputRegisters>
 8003652:	2800      	cmp	r0, #0
 8003654:	d082      	beq.n	800355c <RegulationTask+0x160>
		receieves = 0;
 8003656:	2500      	movs	r5, #0
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, IMPORTED_ACTIVE_POWER, 4, imported_exported_power_raw) == Modbus_OK){
 8003658:	ab08      	add	r3, sp, #32
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2304      	movs	r3, #4
 800365e:	2248      	movs	r2, #72	; 0x48
 8003660:	2101      	movs	r1, #1
 8003662:	a821      	add	r0, sp, #132	; 0x84
 8003664:	f7fe ff2c 	bl	80024c0 <vModbusReadInputRegisters>
 8003668:	2800      	cmp	r0, #0
 800366a:	d18d      	bne.n	8003588 <RegulationTask+0x18c>
			receieves += 2;
 800366c:	3502      	adds	r5, #2
 800366e:	b2ed      	uxtb	r5, r5
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 8003670:	a808      	add	r0, sp, #32
 8003672:	f7ff feb3 	bl	80033dc <fModbusParseFloat>
 8003676:	eeb0 9a40 	vmov.f32	s18, s0
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 800367a:	a809      	add	r0, sp, #36	; 0x24
 800367c:	f7ff feae 	bl	80033dc <fModbusParseFloat>
			if(regulationData.counter.power_in_buffor > 0){
 8003680:	4b33      	ldr	r3, [pc, #204]	; (8003750 <RegulationTask+0x354>)
 8003682:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003686:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800368a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368e:	f77f af67 	ble.w	8003560 <RegulationTask+0x164>
				regulationData.counter.power_in_buffor -= (imported_power - last_imported_power);
 8003692:	ee79 8a68 	vsub.f32	s17, s18, s17
 8003696:	ee77 7ae8 	vsub.f32	s15, s15, s17
 800369a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 800369e:	e762      	b.n	8003566 <RegulationTask+0x16a>
			receieves += 4;
 80036a0:	3504      	adds	r5, #4
 80036a2:	b2ed      	uxtb	r5, r5
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 80036a4:	2400      	movs	r4, #0
 80036a6:	e01b      	b.n	80036e0 <RegulationTask+0x2e4>
				int16_t temp = temperatures_raw[i * 2];
 80036a8:	0063      	lsls	r3, r4, #1
 80036aa:	aa24      	add	r2, sp, #144	; 0x90
 80036ac:	441a      	add	r2, r3
 80036ae:	f812 2c84 	ldrb.w	r2, [r2, #-132]
				temp += temperatures_raw[i*2 + 1];
 80036b2:	3301      	adds	r3, #1
 80036b4:	a924      	add	r1, sp, #144	; 0x90
 80036b6:	440b      	add	r3, r1
 80036b8:	f813 0c84 	ldrb.w	r0, [r3, #-132]
 80036bc:	eb00 2002 	add.w	r0, r0, r2, lsl #8
				temperatures[i] = temp / DEC_PLACES;
 80036c0:	b200      	sxth	r0, r0
 80036c2:	f7fc ff37 	bl	8000534 <__aeabi_i2d>
 80036c6:	2200      	movs	r2, #0
 80036c8:	4b23      	ldr	r3, [pc, #140]	; (8003758 <RegulationTask+0x35c>)
 80036ca:	f7fd f8c7 	bl	800085c <__aeabi_ddiv>
 80036ce:	f7fd f9cd 	bl	8000a6c <__aeabi_d2f>
 80036d2:	ab24      	add	r3, sp, #144	; 0x90
 80036d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80036d8:	f843 0c38 	str.w	r0, [r3, #-56]
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 80036dc:	3401      	adds	r4, #1
 80036de:	b2e4      	uxtb	r4, r4
 80036e0:	2c09      	cmp	r4, #9
 80036e2:	d9e1      	bls.n	80036a8 <RegulationTask+0x2ac>
			memcpy(&regulationData.counter.CWU_temps[0], &temperatures[0], 24);
 80036e4:	4c1d      	ldr	r4, [pc, #116]	; (800375c <RegulationTask+0x360>)
 80036e6:	ae16      	add	r6, sp, #88	; 0x58
 80036e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80036ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036ec:	e896 0003 	ldmia.w	r6, {r0, r1}
 80036f0:	e884 0003 	stmia.w	r4, {r0, r1}
 80036f4:	e753      	b.n	800359e <RegulationTask+0x1a2>
					available_power[i]  = -regulationData.counter.powers[i] * regulationData.parameters.heater_power_coeff / 100.0f;
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <RegulationTask+0x354>)
 80036f8:	f993 307c 	ldrsb.w	r3, [r3, #124]	; 0x7c
 80036fc:	ee07 3a10 	vmov	s14, r3
 8003700:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003704:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8003708:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003760 <RegulationTask+0x364>
 800370c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003710:	ab24      	add	r3, sp, #144	; 0x90
 8003712:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003716:	ed03 7a11 	vstr	s14, [r3, #-68]	; 0xffffffbc
 800371a:	e081      	b.n	8003820 <RegulationTask+0x424>
					regulationData.counter.CO_heater_max_power[i] = 0.0f;
 800371c:	1d2b      	adds	r3, r5, #4
 800371e:	4a0c      	ldr	r2, [pc, #48]	; (8003750 <RegulationTask+0x354>)
 8003720:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	e0a2      	b.n	8003870 <RegulationTask+0x474>
 800372a:	bf00      	nop
 800372c:	20002fed 	.word	0x20002fed
 8003730:	200032d4 	.word	0x200032d4
 8003734:	200033ac 	.word	0x200033ac
 8003738:	20003148 	.word	0x20003148
 800373c:	40010000 	.word	0x40010000
 8003740:	20003010 	.word	0x20003010
 8003744:	200030ec 	.word	0x200030ec
 8003748:	200033ec 	.word	0x200033ec
 800374c:	00000000 	.word	0x00000000
 8003750:	20002f80 	.word	0x20002f80
 8003754:	40000400 	.word	0x40000400
 8003758:	40240000 	.word	0x40240000
 800375c:	20002fd0 	.word	0x20002fd0
 8003760:	42c80000 	.word	0x42c80000
					regulationData.counter.CWU_heater_max_power[i] = 0.0f;
 8003764:	1dab      	adds	r3, r5, #6
 8003766:	4ac0      	ldr	r2, [pc, #768]	; (8003a68 <RegulationTask+0x66c>)
 8003768:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800376c:	2200      	movs	r2, #0
 800376e:	605a      	str	r2, [r3, #4]
				if(regulationData.counter.voltages[i] > 200.0){
 8003770:	f105 030a 	add.w	r3, r5, #10
 8003774:	4abc      	ldr	r2, [pc, #752]	; (8003a68 <RegulationTask+0x66c>)
 8003776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800377a:	ed93 7a00 	vldr	s14, [r3]
 800377e:	eddf 7abb 	vldr	s15, [pc, #748]	; 8003a6c <RegulationTask+0x670>
 8003782:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378a:	f340 809b 	ble.w	80038c4 <RegulationTask+0x4c8>
					regulationData.counter.CO_heater_PWM[i] = (uint32_t)(regulationData.counter.CO_heater_max_power[i] * 1000.0);
 800378e:	4616      	mov	r6, r2
 8003790:	1d2f      	adds	r7, r5, #4
 8003792:	eb02 0387 	add.w	r3, r2, r7, lsl #2
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	f7fc fede 	bl	8000558 <__aeabi_f2d>
 800379c:	2200      	movs	r2, #0
 800379e:	4bb4      	ldr	r3, [pc, #720]	; (8003a70 <RegulationTask+0x674>)
 80037a0:	f7fc ff32 	bl	8000608 <__aeabi_dmul>
 80037a4:	f7fd f942 	bl	8000a2c <__aeabi_d2uiz>
 80037a8:	eb06 0747 	add.w	r7, r6, r7, lsl #1
 80037ac:	8078      	strh	r0, [r7, #2]
					regulationData.counter.CWU_heater_PWM[i] = (uint32_t)(regulationData.counter.CWU_heater_max_power[i] * 1000.0);
 80037ae:	1dab      	adds	r3, r5, #6
 80037b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80037b4:	6858      	ldr	r0, [r3, #4]
 80037b6:	f7fc fecf 	bl	8000558 <__aeabi_f2d>
 80037ba:	2200      	movs	r2, #0
 80037bc:	4bac      	ldr	r3, [pc, #688]	; (8003a70 <RegulationTask+0x674>)
 80037be:	f7fc ff23 	bl	8000608 <__aeabi_dmul>
 80037c2:	f7fd f933 	bl	8000a2c <__aeabi_d2uiz>
 80037c6:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 80037ca:	80a8      	strh	r0, [r5, #4]
			for(uint8_t i = 0; i < 3; i ++){
 80037cc:	3401      	adds	r4, #1
 80037ce:	b2e4      	uxtb	r4, r4
 80037d0:	2c02      	cmp	r4, #2
 80037d2:	f200 8083 	bhi.w	80038dc <RegulationTask+0x4e0>
				if(regulationData.counter.powers[i] > 0){
 80037d6:	4625      	mov	r5, r4
 80037d8:	f104 0310 	add.w	r3, r4, #16
 80037dc:	4aa2      	ldr	r2, [pc, #648]	; (8003a68 <RegulationTask+0x66c>)
 80037de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80037e2:	edd3 7a00 	vldr	s15, [r3]
 80037e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ee:	dd82      	ble.n	80036f6 <RegulationTask+0x2fa>
					available_power[i] = ((regulationData.parameters.net_max_power / 3.0f) - regulationData.counter.powers[i]) * regulationData.parameters.heater_power_coeff;
 80037f0:	4613      	mov	r3, r2
 80037f2:	f8d2 2075 	ldr.w	r2, [r2, #117]	; 0x75
 80037f6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80037fa:	ee07 2a10 	vmov	s14, r2
 80037fe:	ee87 7a26 	vdiv.f32	s14, s14, s13
 8003802:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003806:	f993 307c 	ldrsb.w	r3, [r3, #124]	; 0x7c
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003816:	ab24      	add	r3, sp, #144	; 0x90
 8003818:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800381c:	ed43 7a11 	vstr	s15, [r3, #-68]	; 0xffffffbc
				if(regulationData.parameters.CO_heater_power > 0.0f){
 8003820:	4b91      	ldr	r3, [pc, #580]	; (8003a68 <RegulationTask+0x66c>)
 8003822:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800382e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003832:	f77f af73 	ble.w	800371c <RegulationTask+0x320>
					regulationData.counter.CO_heater_max_power[i] = available_power[i] / regulationData.parameters.CO_heater_power / 3.0f;
 8003836:	ab24      	add	r3, sp, #144	; 0x90
 8003838:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800383c:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 8003840:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003844:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800384c:	1d2b      	adds	r3, r5, #4
 800384e:	4a86      	ldr	r2, [pc, #536]	; (8003a68 <RegulationTask+0x66c>)
 8003850:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003854:	edc3 7a00 	vstr	s15, [r3]
					if(regulationData.counter.CO_heater_max_power[i] > 1.0f) regulationData.counter.CO_heater_max_power[i] = 1.0f;
 8003858:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800385c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003864:	dd04      	ble.n	8003870 <RegulationTask+0x474>
 8003866:	1d2b      	adds	r3, r5, #4
 8003868:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800386c:	ed83 7a00 	vstr	s14, [r3]
				if(regulationData.parameters.CWU_heater_power > 0.0f){
 8003870:	4b7d      	ldr	r3, [pc, #500]	; (8003a68 <RegulationTask+0x66c>)
 8003872:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003882:	f77f af6f 	ble.w	8003764 <RegulationTask+0x368>
					regulationData.counter.CWU_heater_max_power[i] = available_power[i] / regulationData.parameters.CWU_heater_power / 3.0f;
 8003886:	ab24      	add	r3, sp, #144	; 0x90
 8003888:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800388c:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 8003890:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003894:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800389c:	1dab      	adds	r3, r5, #6
 800389e:	4a72      	ldr	r2, [pc, #456]	; (8003a68 <RegulationTask+0x66c>)
 80038a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80038a4:	edc3 7a01 	vstr	s15, [r3, #4]
					if(regulationData.counter.CWU_heater_max_power[i] > 1.0f) regulationData.counter.CWU_heater_max_power[i] = 1.0f;
 80038a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b4:	f77f af5c 	ble.w	8003770 <RegulationTask+0x374>
 80038b8:	1dab      	adds	r3, r5, #6
 80038ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80038be:	ed83 7a01 	vstr	s14, [r3, #4]
 80038c2:	e755      	b.n	8003770 <RegulationTask+0x374>
					regulationData.counter.CO_heater_PWM[i] = 0;
 80038c4:	4b68      	ldr	r3, [pc, #416]	; (8003a68 <RegulationTask+0x66c>)
 80038c6:	1d2a      	adds	r2, r5, #4
 80038c8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80038cc:	2100      	movs	r1, #0
 80038ce:	8051      	strh	r1, [r2, #2]
					regulationData.counter.CWU_heater_PWM[i] = 0;
 80038d0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80038d4:	80a9      	strh	r1, [r5, #4]
 80038d6:	e779      	b.n	80037cc <RegulationTask+0x3d0>
			for(uint8_t i = 0; i < 3; i ++){
 80038d8:	2400      	movs	r4, #0
 80038da:	e779      	b.n	80037d0 <RegulationTask+0x3d4>
			if(regulationData.counter.CWU_temps[0] < regulationData.parameters.CWU_hi_temp){
 80038dc:	4b62      	ldr	r3, [pc, #392]	; (8003a68 <RegulationTask+0x66c>)
 80038de:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80038e2:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f6:	d515      	bpl.n	8003924 <RegulationTask+0x528>
				if(regulationData.counter.CWU_temps[1] < regulationData.parameters.CWU_lo_temp){
 80038f8:	4b5b      	ldr	r3, [pc, #364]	; (8003a68 <RegulationTask+0x66c>)
 80038fa:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80038fe:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003902:	ee07 3a90 	vmov	s15, r3
 8003906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800390a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800390e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003912:	d50e      	bpl.n	8003932 <RegulationTask+0x536>
					regulationData.ControlWord.CWUHeaterStateOut = HIGH;
 8003914:	4a54      	ldr	r2, [pc, #336]	; (8003a68 <RegulationTask+0x66c>)
 8003916:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8003922:	e006      	b.n	8003932 <RegulationTask+0x536>
				regulationData.ControlWord.CWUHeaterStateOut = LOW;
 8003924:	4b50      	ldr	r3, [pc, #320]	; (8003a68 <RegulationTask+0x66c>)
 8003926:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800392a:	f36f 0200 	bfc	r2, #0, #1
 800392e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.counter.CO_temps[0] < regulationData.parameters.CO_hi_temp){
 8003932:	4b4d      	ldr	r3, [pc, #308]	; (8003a68 <RegulationTask+0x66c>)
 8003934:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003938:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394c:	d515      	bpl.n	800397a <RegulationTask+0x57e>
				if(regulationData.counter.CO_temps[3] < regulationData.parameters.CO_lo_temp){
 800394e:	4b46      	ldr	r3, [pc, #280]	; (8003a68 <RegulationTask+0x66c>)
 8003950:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8003954:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003958:	ee07 3a90 	vmov	s15, r3
 800395c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003968:	d50e      	bpl.n	8003988 <RegulationTask+0x58c>
					regulationData.ControlWord.COHeaterStateOut = HIGH;
 800396a:	4a3f      	ldr	r2, [pc, #252]	; (8003a68 <RegulationTask+0x66c>)
 800396c:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8003978:	e006      	b.n	8003988 <RegulationTask+0x58c>
				regulationData.ControlWord.COHeaterStateOut = LOW;
 800397a:	4b3b      	ldr	r3, [pc, #236]	; (8003a68 <RegulationTask+0x66c>)
 800397c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003980:	f36f 0200 	bfc	r2, #0, #1
 8003984:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.ControlWord.COHeaterStateOut){
 8003988:	4b37      	ldr	r3, [pc, #220]	; (8003a68 <RegulationTask+0x66c>)
 800398a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800398e:	f013 0f01 	tst.w	r3, #1
 8003992:	d006      	beq.n	80039a2 <RegulationTask+0x5a6>
				regulationData.ControlWord.CWUHeaterStateOut = LOW;
 8003994:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <RegulationTask+0x66c>)
 8003996:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800399a:	f36f 0200 	bfc	r2, #0, #1
 800399e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.IOsignals.signals.input1 == HIGH){
 80039a2:	4b31      	ldr	r3, [pc, #196]	; (8003a68 <RegulationTask+0x66c>)
 80039a4:	f993 306b 	ldrsb.w	r3, [r3, #107]	; 0x6b
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	da47      	bge.n	8003a3c <RegulationTask+0x640>
				if(regulationData.IOsignals.signals.input4 == LOW ||
 80039ac:	4b2e      	ldr	r3, [pc, #184]	; (8003a68 <RegulationTask+0x66c>)
 80039ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039b0:	f023 436f 	bic.w	r3, r3, #4009754624	; 0xef000000
 80039b4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80039b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039bc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80039c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c4:	d006      	beq.n	80039d4 <RegulationTask+0x5d8>
					regulationData.ControlWord.CWUHeaterStateOut = LOW;
 80039c6:	4b28      	ldr	r3, [pc, #160]	; (8003a68 <RegulationTask+0x66c>)
 80039c8:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80039cc:	f36f 0200 	bfc	r2, #0, #1
 80039d0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				if(regulationData.IOsignals.signals.input5 == LOW &&
 80039d4:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <RegulationTask+0x66c>)
 80039d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039d8:	f023 4377 	bic.w	r3, r3, #4143972352	; 0xf7000000
 80039dc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80039e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039e4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d00a      	beq.n	8003a02 <RegulationTask+0x606>
				if(regulationData.ControlWord.CWUHeaterStateOut == LOW){
 80039ec:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <RegulationTask+0x66c>)
 80039ee:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80039f2:	f013 0301 	ands.w	r3, r3, #1
 80039f6:	d015      	beq.n	8003a24 <RegulationTask+0x628>
				if(regulationData.ControlWord.COHeaterStateOut == LOW){
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f47f add7 	bne.w	80035ac <RegulationTask+0x1b0>
					for(int i = 0; i < 3; i++){
 80039fe:	2300      	movs	r3, #0
 8003a00:	e019      	b.n	8003a36 <RegulationTask+0x63a>
					regulationData.ControlWord.CWUHeaterStateOut = LOW;
 8003a02:	4b19      	ldr	r3, [pc, #100]	; (8003a68 <RegulationTask+0x66c>)
 8003a04:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003a08:	f36f 0200 	bfc	r2, #0, #1
 8003a0c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003a10:	e7ec      	b.n	80039ec <RegulationTask+0x5f0>
						regulationData.counter.CWU_heater_PWM[i] = 0;
 8003a12:	4915      	ldr	r1, [pc, #84]	; (8003a68 <RegulationTask+0x66c>)
 8003a14:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8003a18:	2000      	movs	r0, #0
 8003a1a:	8088      	strh	r0, [r1, #4]
					for(int i = 0; i < 3; i++){
 8003a1c:	3201      	adds	r2, #1
 8003a1e:	2a02      	cmp	r2, #2
 8003a20:	ddf7      	ble.n	8003a12 <RegulationTask+0x616>
 8003a22:	e7e9      	b.n	80039f8 <RegulationTask+0x5fc>
 8003a24:	2200      	movs	r2, #0
 8003a26:	e7fa      	b.n	8003a1e <RegulationTask+0x622>
						regulationData.counter.CO_heater_PWM[i] = 0;
 8003a28:	1d19      	adds	r1, r3, #4
 8003a2a:	4a0f      	ldr	r2, [pc, #60]	; (8003a68 <RegulationTask+0x66c>)
 8003a2c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8003a30:	2100      	movs	r1, #0
 8003a32:	8051      	strh	r1, [r2, #2]
					for(int i = 0; i < 3; i++){
 8003a34:	3301      	adds	r3, #1
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	ddf6      	ble.n	8003a28 <RegulationTask+0x62c>
 8003a3a:	e5b7      	b.n	80035ac <RegulationTask+0x1b0>
				regulationData.ControlWord.COHeaterStateOut = LOW;
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <RegulationTask+0x66c>)
 8003a3e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003a42:	f36f 0200 	bfc	r2, #0, #1
 8003a46:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				for(int i = 0; i < 3; i++){
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e009      	b.n	8003a62 <RegulationTask+0x666>
					regulationData.counter.CO_heater_PWM[i] = 0;
 8003a4e:	4a06      	ldr	r2, [pc, #24]	; (8003a68 <RegulationTask+0x66c>)
 8003a50:	1d19      	adds	r1, r3, #4
 8003a52:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003a56:	2000      	movs	r0, #0
 8003a58:	8048      	strh	r0, [r1, #2]
					regulationData.counter.CWU_heater_PWM[i] = 0;
 8003a5a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003a5e:	8090      	strh	r0, [r2, #4]
				for(int i = 0; i < 3; i++){
 8003a60:	3301      	adds	r3, #1
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	ddf3      	ble.n	8003a4e <RegulationTask+0x652>
 8003a66:	e5a1      	b.n	80035ac <RegulationTask+0x1b0>
 8003a68:	20002f80 	.word	0x20002f80
 8003a6c:	43480000 	.word	0x43480000
 8003a70:	408f4000 	.word	0x408f4000

08003a74 <RegulationTask_GetData>:
	}
  /* USER CODE END PowerRegulation */
}

void RegulationTask_GetData (RegTaskData_t* destination){
 8003a74:	b508      	push	{r3, lr}
	memcpy(destination, &regulationData, sizeof(RegTaskData_t));
 8003a76:	2290      	movs	r2, #144	; 0x90
 8003a78:	4901      	ldr	r1, [pc, #4]	; (8003a80 <RegulationTask_GetData+0xc>)
 8003a7a:	f008 f901 	bl	800bc80 <memcpy>
}
 8003a7e:	bd08      	pop	{r3, pc}
 8003a80:	20002f80 	.word	0x20002f80

08003a84 <UARTDMA_UartIrqHandler>:



void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8003a84:	6802      	ldr	r2, [r0, #0]
 8003a86:	6813      	ldr	r3, [r2, #0]
 8003a88:	6819      	ldr	r1, [r3, #0]
 8003a8a:	f011 0f10 	tst.w	r1, #16
 8003a8e:	d00e      	beq.n	8003aae <UARTDMA_UartIrqHandler+0x2a>
{
 8003a90:	b082      	sub	sp, #8
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8003a92:	6819      	ldr	r1, [r3, #0]
 8003a94:	9101      	str	r1, [sp, #4]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	9301      	str	r3, [sp, #4]
		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8003a9a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	6813      	ldr	r3, [r2, #0]
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	6013      	str	r3, [r2, #0]
		tmp = tmp; // For unused warning
 8003aa6:	9b01      	ldr	r3, [sp, #4]
 8003aa8:	9301      	str	r3, [sp, #4]
	}
}
 8003aaa:	b002      	add	sp, #8
 8003aac:	4770      	bx	lr
 8003aae:	4770      	bx	lr

08003ab0 <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma){
 8003ab0:	b570      	push	{r4, r5, r6, lr}
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t Reserved0;
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8003ab2:	6803      	ldr	r3, [r0, #0]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab6:	6d9d      	ldr	r5, [r3, #88]	; 0x58

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	f012 0f10 	tst.w	r2, #16
 8003ac0:	d038      	beq.n	8003b34 <UARTDMA_DmaIrqHandler+0x84>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8003ac2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ac4:	2320      	movs	r3, #32
 8003ac6:	4093      	lsls	r3, r2
 8003ac8:	60ab      	str	r3, [r5, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8003aca:	6803      	ldr	r3, [r0, #0]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685e      	ldr	r6, [r3, #4]
 8003ad2:	f1c6 061e 	rsb	r6, r6, #30

		//huartdma->length += Length;
		huartdma->length = Length;
 8003ad6:	f880 60a2 	strb.w	r6, [r0, #162]	; 0xa2

		for(i = 0; i < Length; i++){
 8003ada:	2200      	movs	r2, #0
 8003adc:	e00c      	b.n	8003af8 <UARTDMA_DmaIrqHandler+0x48>
			huartdma->UART_Buffer[huartdma->UartBufferTail] = huartdma->DMA_RX_Buffer[i];
 8003ade:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8003ae2:	1881      	adds	r1, r0, r2
 8003ae4:	790c      	ldrb	r4, [r1, #4]
 8003ae6:	18c1      	adds	r1, r0, r3
 8003ae8:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
			huartdma->UartBufferTail++;
 8003aec:	3301      	adds	r3, #1
			huartdma->UartBufferTail &= 127;
 8003aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af2:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		for(i = 0; i < Length; i++){
 8003af6:	3201      	adds	r2, #1
 8003af8:	42b2      	cmp	r2, r6
 8003afa:	d3f0      	bcc.n	8003ade <UARTDMA_DmaIrqHandler+0x2e>
 8003afc:	4604      	mov	r4, r0
		}

		huartdma -> callback();
 8003afe:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 8003b02:	4798      	blx	r3

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8003b04:	4623      	mov	r3, r4
 8003b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b0c:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8003b0e:	223f      	movs	r2, #63	; 0x3f
 8003b10:	408a      	lsls	r2, r1
 8003b12:	60aa      	str	r2, [r5, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8003b14:	6822      	ldr	r2, [r4, #0]
 8003b16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	60d3      	str	r3, [r2, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	221e      	movs	r2, #30
 8003b24:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	6813      	ldr	r3, [r2, #0]
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6013      	str	r3, [r2, #0]
	}
}
 8003b34:	bd70      	pop	{r4, r5, r6, pc}

08003b36 <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8003b36:	b510      	push	{r4, lr}
 8003b38:	4604      	mov	r4, r0
	huartdma->huart = huart;
 8003b3a:	6001      	str	r1, [r0, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8003b3c:	680a      	ldr	r2, [r1, #0]
 8003b3e:	68d3      	ldr	r3, [r2, #12]
 8003b40:	f043 0310 	orr.w	r3, r3, #16
 8003b44:	60d3      	str	r3, [r2, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8003b46:	4601      	mov	r1, r0
 8003b48:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	6813      	ldr	r3, [r2, #0]
 8003b52:	f043 0310 	orr.w	r3, r3, #16
 8003b56:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8003b58:	221e      	movs	r2, #30
 8003b5a:	6800      	ldr	r0, [r0, #0]
 8003b5c:	f004 fd4c 	bl	80085f8 <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_HTIE; // Disable DMA Half Complete interrupt
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	6813      	ldr	r3, [r2, #0]
 8003b68:	f023 0308 	bic.w	r3, r3, #8
 8003b6c:	6013      	str	r3, [r2, #0]
}
 8003b6e:	bd10      	pop	{r4, pc}

08003b70 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <vApplicationGetIdleTaskMemory+0x10>)
 8003b72:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003b74:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <vApplicationGetIdleTaskMemory+0x14>)
 8003b76:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003b78:	2380      	movs	r3, #128	; 0x80
 8003b7a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000384 	.word	0x20000384
 8003b84:	20000184 	.word	0x20000184

08003b88 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <vApplicationGetTimerTaskMemory+0x10>)
 8003b8a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <vApplicationGetTimerTaskMemory+0x14>)
 8003b8e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b94:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8003b96:	4770      	bx	lr
 8003b98:	200007e8 	.word	0x200007e8
 8003b9c:	200003e8 	.word	0x200003e8

08003ba0 <ConfigSaveTmr>:
__weak void ConfigSaveTmr(void const * argument)
{
  /* USER CODE BEGIN ConfigSaveTmr */
  
  /* USER CODE END ConfigSaveTmr */
}
 8003ba0:	4770      	bx	lr
	...

08003ba4 <MX_GPIO_Init>:
{
 8003ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003baa:	2400      	movs	r4, #0
 8003bac:	9405      	str	r4, [sp, #20]
 8003bae:	9406      	str	r4, [sp, #24]
 8003bb0:	9407      	str	r4, [sp, #28]
 8003bb2:	9408      	str	r4, [sp, #32]
 8003bb4:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bb6:	9401      	str	r4, [sp, #4]
 8003bb8:	4b46      	ldr	r3, [pc, #280]	; (8003cd4 <MX_GPIO_Init+0x130>)
 8003bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bbc:	f042 0204 	orr.w	r2, r2, #4
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30
 8003bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bc4:	f002 0204 	and.w	r2, r2, #4
 8003bc8:	9201      	str	r2, [sp, #4]
 8003bca:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bcc:	9402      	str	r4, [sp, #8]
 8003bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
 8003bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003bdc:	9202      	str	r2, [sp, #8]
 8003bde:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be0:	9403      	str	r4, [sp, #12]
 8003be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be4:	f042 0201 	orr.w	r2, r2, #1
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
 8003bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bec:	f002 0201 	and.w	r2, r2, #1
 8003bf0:	9203      	str	r2, [sp, #12]
 8003bf2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf4:	9404      	str	r4, [sp, #16]
 8003bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf8:	f042 0202 	orr.w	r2, r2, #2
 8003bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	9304      	str	r3, [sp, #16]
 8003c06:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 8003c08:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8003ce8 <MX_GPIO_Init+0x144>
 8003c0c:	4622      	mov	r2, r4
 8003c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c12:	4640      	mov	r0, r8
 8003c14:	f002 f8d5 	bl	8005dc2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 8003c18:	4d2f      	ldr	r5, [pc, #188]	; (8003cd8 <MX_GPIO_Init+0x134>)
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	2102      	movs	r1, #2
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f002 f8cf 	bl	8005dc2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8003c24:	2201      	movs	r2, #1
 8003c26:	2110      	movs	r1, #16
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f002 f8ca 	bl	8005dc2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin, GPIO_PIN_SET);
 8003c2e:	4e2b      	ldr	r6, [pc, #172]	; (8003cdc <MX_GPIO_Init+0x138>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	f246 0104 	movw	r1, #24580	; 0x6004
 8003c36:	4630      	mov	r0, r6
 8003c38:	f002 f8c3 	bl	8005dc2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8003c3c:	4622      	mov	r2, r4
 8003c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c42:	4630      	mov	r0, r6
 8003c44:	f002 f8bd 	bl	8005dc2 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUILT_IN_LED_Pin;
 8003c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c4c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c4e:	2701      	movs	r7, #1
 8003c50:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c52:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c54:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BUILT_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8003c56:	a905      	add	r1, sp, #20
 8003c58:	4640      	mov	r0, r8
 8003c5a:	f001 ffd9 	bl	8005c10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MASTER_TE_Pin|ETH_CS_Pin;
 8003c5e:	2312      	movs	r3, #18
 8003c60:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c62:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c64:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c66:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c68:	a905      	add	r1, sp, #20
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	f001 ffd0 	bl	8005c10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ETH_INT_Pin|PG24V_Pin;
 8003c70:	f241 0302 	movw	r3, #4098	; 0x1002
 8003c74:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c76:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <MX_GPIO_Init+0x13c>)
 8003c78:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c7c:	a905      	add	r1, sp, #20
 8003c7e:	4630      	mov	r0, r6
 8003c80:	f001 ffc6 	bl	8005c10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin|NRF_CE_Pin;
 8003c84:	f24e 0304 	movw	r3, #57348	; 0xe004
 8003c88:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c8a:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c90:	a905      	add	r1, sp, #20
 8003c92:	4630      	mov	r0, r6
 8003c94:	f001 ffbc 	bl	8005c10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NRF_INT_Pin;
 8003c98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c9e:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <MX_GPIO_Init+0x140>)
 8003ca0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(NRF_INT_GPIO_Port, &GPIO_InitStruct);
 8003ca4:	a905      	add	r1, sp, #20
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f001 ffb2 	bl	8005c10 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 10, 0);
 8003cac:	4622      	mov	r2, r4
 8003cae:	210a      	movs	r1, #10
 8003cb0:	2007      	movs	r0, #7
 8003cb2:	f001 fcdf 	bl	8005674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003cb6:	2007      	movs	r0, #7
 8003cb8:	f001 fd10 	bl	80056dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 9, 0);
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	2109      	movs	r1, #9
 8003cc0:	2028      	movs	r0, #40	; 0x28
 8003cc2:	f001 fcd7 	bl	8005674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003cc6:	2028      	movs	r0, #40	; 0x28
 8003cc8:	f001 fd08 	bl	80056dc <HAL_NVIC_EnableIRQ>
}
 8003ccc:	b00a      	add	sp, #40	; 0x28
 8003cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40020000 	.word	0x40020000
 8003cdc:	40020400 	.word	0x40020400
 8003ce0:	10210000 	.word	0x10210000
 8003ce4:	10110000 	.word	0x10110000
 8003ce8:	40020800 	.word	0x40020800

08003cec <MX_DMA_Init>:
{
 8003cec:	b510      	push	{r4, lr}
 8003cee:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003cf0:	2400      	movs	r4, #0
 8003cf2:	9400      	str	r4, [sp, #0]
 8003cf4:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <MX_DMA_Init+0x64>)
 8003cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8003cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d00:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003d04:	9200      	str	r2, [sp, #0]
 8003d06:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d08:	9401      	str	r4, [sp, #4]
 8003d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003d10:	631a      	str	r2, [r3, #48]	; 0x30
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8003d1c:	4622      	mov	r2, r4
 8003d1e:	2105      	movs	r1, #5
 8003d20:	2010      	movs	r0, #16
 8003d22:	f001 fca7 	bl	8005674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003d26:	2010      	movs	r0, #16
 8003d28:	f001 fcd8 	bl	80056dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003d2c:	4622      	mov	r2, r4
 8003d2e:	2105      	movs	r1, #5
 8003d30:	2039      	movs	r0, #57	; 0x39
 8003d32:	f001 fc9f 	bl	8005674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003d36:	2039      	movs	r0, #57	; 0x39
 8003d38:	f001 fcd0 	bl	80056dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	2105      	movs	r1, #5
 8003d40:	203a      	movs	r0, #58	; 0x3a
 8003d42:	f001 fc97 	bl	8005674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003d46:	203a      	movs	r0, #58	; 0x3a
 8003d48:	f001 fcc8 	bl	80056dc <HAL_NVIC_EnableIRQ>
}
 8003d4c:	b002      	add	sp, #8
 8003d4e:	bd10      	pop	{r4, pc}
 8003d50:	40023800 	.word	0x40023800

08003d54 <StartDefaultTask>:
{
 8003d54:	b508      	push	{r3, lr}
    osDelay(10000000);
 8003d56:	4802      	ldr	r0, [pc, #8]	; (8003d60 <StartDefaultTask+0xc>)
 8003d58:	f004 fe93 	bl	8008a82 <osDelay>
 8003d5c:	e7fb      	b.n	8003d56 <StartDefaultTask+0x2>
 8003d5e:	bf00      	nop
 8003d60:	00989680 	.word	0x00989680

08003d64 <TestTask>:
{
 8003d64:	b508      	push	{r3, lr}
    osDelay(1);
 8003d66:	2001      	movs	r0, #1
 8003d68:	f004 fe8b 	bl	8008a82 <osDelay>
 8003d6c:	e7fb      	b.n	8003d66 <TestTask+0x2>

08003d6e <HAL_UART_RxCpltCallback>:
}
 8003d6e:	4770      	bx	lr

08003d70 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003d70:	b508      	push	{r3, lr}
	if(huart -> Instance == USART2){
 8003d72:	6802      	ldr	r2, [r0, #0]
 8003d74:	4b07      	ldr	r3, [pc, #28]	; (8003d94 <HAL_UART_TxCpltCallback+0x24>)
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d000      	beq.n	8003d7c <HAL_UART_TxCpltCallback+0xc>
}
 8003d7a:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d82:	4805      	ldr	r0, [pc, #20]	; (8003d98 <HAL_UART_TxCpltCallback+0x28>)
 8003d84:	f002 f81d 	bl	8005dc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	4803      	ldr	r0, [pc, #12]	; (8003d9c <HAL_UART_TxCpltCallback+0x2c>)
 8003d8e:	f002 f818 	bl	8005dc2 <HAL_GPIO_WritePin>
}
 8003d92:	e7f2      	b.n	8003d7a <HAL_UART_TxCpltCallback+0xa>
 8003d94:	40004400 	.word	0x40004400
 8003d98:	40020800 	.word	0x40020800
 8003d9c:	40020000 	.word	0x40020000

08003da0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003da0:	b510      	push	{r4, lr}
 8003da2:	4604      	mov	r4, r0
	if(GPIO_Pin & NRF_INT_Pin){
 8003da4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003da8:	d106      	bne.n	8003db8 <HAL_GPIO_EXTI_Callback+0x18>
	if(GPIO_Pin & ETH_INT_Pin){
 8003daa:	f014 0f02 	tst.w	r4, #2
 8003dae:	d109      	bne.n	8003dc4 <HAL_GPIO_EXTI_Callback+0x24>
	if(GPIO_Pin & PG24V_Pin){
 8003db0:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8003db4:	d10c      	bne.n	8003dd0 <HAL_GPIO_EXTI_Callback+0x30>
}
 8003db6:	bd10      	pop	{r4, pc}
		vTaskNotifyGiveFromISR(nRF24L01Handle, NULL);
 8003db8:	2100      	movs	r1, #0
 8003dba:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_GPIO_EXTI_Callback+0x48>)
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	f006 fc97 	bl	800a6f0 <vTaskNotifyGiveFromISR>
 8003dc2:	e7f2      	b.n	8003daa <HAL_GPIO_EXTI_Callback+0xa>
		vTaskNotifyGiveFromISR(EthernetHandle, NULL);
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4b09      	ldr	r3, [pc, #36]	; (8003dec <HAL_GPIO_EXTI_Callback+0x4c>)
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	f006 fc91 	bl	800a6f0 <vTaskNotifyGiveFromISR>
 8003dce:	e7ef      	b.n	8003db0 <HAL_GPIO_EXTI_Callback+0x10>
		value = HAL_RTCEx_BKUPRead(&hrtc, 0);
 8003dd0:	4c07      	ldr	r4, [pc, #28]	; (8003df0 <HAL_GPIO_EXTI_Callback+0x50>)
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f003 fb12 	bl	80073fe <HAL_RTCEx_BKUPRead>
		HAL_RTCEx_BKUPWrite(&hrtc, 0, value);
 8003dda:	1c42      	adds	r2, r0, #1
 8003ddc:	2100      	movs	r1, #0
 8003dde:	4620      	mov	r0, r4
 8003de0:	f003 fb08 	bl	80073f4 <HAL_RTCEx_BKUPWrite>
}
 8003de4:	e7e7      	b.n	8003db6 <HAL_GPIO_EXTI_Callback+0x16>
 8003de6:	bf00      	nop
 8003de8:	20003018 	.word	0x20003018
 8003dec:	20003438 	.word	0x20003438
 8003df0:	200032b4 	.word	0x200032b4

08003df4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM11){
 8003df6:	6802      	ldr	r2, [r0, #0]
 8003df8:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d004      	beq.n	8003e08 <HAL_TIM_PeriodElapsedCallback+0x14>
		ulHighFreqTimerTicks ++;
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8003dfe:	6802      	ldr	r2, [r0, #0]
 8003e00:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d005      	beq.n	8003e12 <HAL_TIM_PeriodElapsedCallback+0x1e>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003e06:	bd08      	pop	{r3, pc}
		ulHighFreqTimerTicks ++;
 8003e08:	4a05      	ldr	r2, [pc, #20]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003e0a:	6813      	ldr	r3, [r2, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	e7f5      	b.n	8003dfe <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
 8003e12:	f001 fa7d 	bl	8005310 <HAL_IncTick>
}
 8003e16:	e7f6      	b.n	8003e06 <HAL_TIM_PeriodElapsedCallback+0x12>
 8003e18:	40014800 	.word	0x40014800
 8003e1c:	40014400 	.word	0x40014400
 8003e20:	20003434 	.word	0x20003434

08003e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e24:	e7fe      	b.n	8003e24 <Error_Handler>
	...

08003e28 <MX_I2C1_Init>:
{
 8003e28:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8003e2a:	480a      	ldr	r0, [pc, #40]	; (8003e54 <MX_I2C1_Init+0x2c>)
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <MX_I2C1_Init+0x30>)
 8003e2e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <MX_I2C1_Init+0x34>)
 8003e32:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e34:	2300      	movs	r3, #0
 8003e36:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e38:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e3e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e40:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e42:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e44:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e46:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e48:	f002 fa1c 	bl	8006284 <HAL_I2C_Init>
 8003e4c:	b900      	cbnz	r0, 8003e50 <MX_I2C1_Init+0x28>
}
 8003e4e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003e50:	f7ff ffe8 	bl	8003e24 <Error_Handler>
 8003e54:	200030ec 	.word	0x200030ec
 8003e58:	40005400 	.word	0x40005400
 8003e5c:	000186a0 	.word	0x000186a0

08003e60 <MX_SPI1_Init>:
{
 8003e60:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8003e62:	480d      	ldr	r0, [pc, #52]	; (8003e98 <MX_SPI1_Init+0x38>)
 8003e64:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <MX_SPI1_Init+0x3c>)
 8003e66:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e68:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003e6c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e72:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e74:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e76:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e7c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003e7e:	2218      	movs	r2, #24
 8003e80:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e82:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e84:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e86:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003e88:	230a      	movs	r3, #10
 8003e8a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e8c:	f003 fb84 	bl	8007598 <HAL_SPI_Init>
 8003e90:	b900      	cbnz	r0, 8003e94 <MX_SPI1_Init+0x34>
}
 8003e92:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003e94:	f7ff ffc6 	bl	8003e24 <Error_Handler>
 8003e98:	20003354 	.word	0x20003354
 8003e9c:	40013000 	.word	0x40013000

08003ea0 <MX_TIM1_Init>:
{
 8003ea0:	b510      	push	{r4, lr}
 8003ea2:	b092      	sub	sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ea4:	2400      	movs	r4, #0
 8003ea6:	9410      	str	r4, [sp, #64]	; 0x40
 8003ea8:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003eaa:	9409      	str	r4, [sp, #36]	; 0x24
 8003eac:	940a      	str	r4, [sp, #40]	; 0x28
 8003eae:	940b      	str	r4, [sp, #44]	; 0x2c
 8003eb0:	940c      	str	r4, [sp, #48]	; 0x30
 8003eb2:	940d      	str	r4, [sp, #52]	; 0x34
 8003eb4:	940e      	str	r4, [sp, #56]	; 0x38
 8003eb6:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003eb8:	2220      	movs	r2, #32
 8003eba:	4621      	mov	r1, r4
 8003ebc:	a801      	add	r0, sp, #4
 8003ebe:	f007 feea 	bl	800bc96 <memset>
  htim1.Instance = TIM1;
 8003ec2:	482b      	ldr	r0, [pc, #172]	; (8003f70 <MX_TIM1_Init+0xd0>)
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <MX_TIM1_Init+0xd4>)
 8003ec6:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 42000-1;
 8003ec8:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8003ecc:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ece:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 999;
 8003ed0:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003ed4:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eda:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003edc:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ede:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ee0:	f003 ffed 	bl	8007ebe <HAL_TIM_PWM_Init>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d136      	bne.n	8003f56 <MX_TIM1_Init+0xb6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eec:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003eee:	a910      	add	r1, sp, #64	; 0x40
 8003ef0:	481f      	ldr	r0, [pc, #124]	; (8003f70 <MX_TIM1_Init+0xd0>)
 8003ef2:	f004 f8cd 	bl	8008090 <HAL_TIMEx_MasterConfigSynchronization>
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	d12f      	bne.n	8003f5a <MX_TIM1_Init+0xba>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003efa:	2360      	movs	r3, #96	; 0x60
 8003efc:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003efe:	2200      	movs	r2, #0
 8003f00:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f02:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f04:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f06:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f08:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f0a:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f0c:	a909      	add	r1, sp, #36	; 0x24
 8003f0e:	4818      	ldr	r0, [pc, #96]	; (8003f70 <MX_TIM1_Init+0xd0>)
 8003f10:	f004 f820 	bl	8007f54 <HAL_TIM_PWM_ConfigChannel>
 8003f14:	bb18      	cbnz	r0, 8003f5e <MX_TIM1_Init+0xbe>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f16:	2204      	movs	r2, #4
 8003f18:	a909      	add	r1, sp, #36	; 0x24
 8003f1a:	4815      	ldr	r0, [pc, #84]	; (8003f70 <MX_TIM1_Init+0xd0>)
 8003f1c:	f004 f81a 	bl	8007f54 <HAL_TIM_PWM_ConfigChannel>
 8003f20:	b9f8      	cbnz	r0, 8003f62 <MX_TIM1_Init+0xc2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f22:	2208      	movs	r2, #8
 8003f24:	a909      	add	r1, sp, #36	; 0x24
 8003f26:	4812      	ldr	r0, [pc, #72]	; (8003f70 <MX_TIM1_Init+0xd0>)
 8003f28:	f004 f814 	bl	8007f54 <HAL_TIM_PWM_ConfigChannel>
 8003f2c:	b9d8      	cbnz	r0, 8003f66 <MX_TIM1_Init+0xc6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f32:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f34:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f36:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f38:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f3e:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f40:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f42:	a901      	add	r1, sp, #4
 8003f44:	480a      	ldr	r0, [pc, #40]	; (8003f70 <MX_TIM1_Init+0xd0>)
 8003f46:	f004 f8df 	bl	8008108 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f4a:	b970      	cbnz	r0, 8003f6a <MX_TIM1_Init+0xca>
  HAL_TIM_MspPostInit(&htim1);
 8003f4c:	4808      	ldr	r0, [pc, #32]	; (8003f70 <MX_TIM1_Init+0xd0>)
 8003f4e:	f000 fbcf 	bl	80046f0 <HAL_TIM_MspPostInit>
}
 8003f52:	b012      	add	sp, #72	; 0x48
 8003f54:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003f56:	f7ff ff65 	bl	8003e24 <Error_Handler>
    Error_Handler();
 8003f5a:	f7ff ff63 	bl	8003e24 <Error_Handler>
    Error_Handler();
 8003f5e:	f7ff ff61 	bl	8003e24 <Error_Handler>
    Error_Handler();
 8003f62:	f7ff ff5f 	bl	8003e24 <Error_Handler>
    Error_Handler();
 8003f66:	f7ff ff5d 	bl	8003e24 <Error_Handler>
    Error_Handler();
 8003f6a:	f7ff ff5b 	bl	8003e24 <Error_Handler>
 8003f6e:	bf00      	nop
 8003f70:	200032d4 	.word	0x200032d4
 8003f74:	40010000 	.word	0x40010000

08003f78 <MX_TIM3_Init>:
{
 8003f78:	b500      	push	{lr}
 8003f7a:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	9308      	str	r3, [sp, #32]
 8003f80:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	9302      	str	r3, [sp, #8]
 8003f86:	9303      	str	r3, [sp, #12]
 8003f88:	9304      	str	r3, [sp, #16]
 8003f8a:	9305      	str	r3, [sp, #20]
 8003f8c:	9306      	str	r3, [sp, #24]
 8003f8e:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8003f90:	4820      	ldr	r0, [pc, #128]	; (8004014 <MX_TIM3_Init+0x9c>)
 8003f92:	4a21      	ldr	r2, [pc, #132]	; (8004018 <MX_TIM3_Init+0xa0>)
 8003f94:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 42000 - 1;
 8003f96:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8003f9a:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f9c:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8003f9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003fa2:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003fa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fa8:	6102      	str	r2, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003faa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003fac:	f003 ff87 	bl	8007ebe <HAL_TIM_PWM_Init>
 8003fb0:	bb28      	cbnz	r0, 8003ffe <MX_TIM3_Init+0x86>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fb6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fb8:	a908      	add	r1, sp, #32
 8003fba:	4816      	ldr	r0, [pc, #88]	; (8004014 <MX_TIM3_Init+0x9c>)
 8003fbc:	f004 f868 	bl	8008090 <HAL_TIMEx_MasterConfigSynchronization>
 8003fc0:	b9f8      	cbnz	r0, 8004002 <MX_TIM3_Init+0x8a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fc2:	2360      	movs	r3, #96	; 0x60
 8003fc4:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fca:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fcc:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fce:	a901      	add	r1, sp, #4
 8003fd0:	4810      	ldr	r0, [pc, #64]	; (8004014 <MX_TIM3_Init+0x9c>)
 8003fd2:	f003 ffbf 	bl	8007f54 <HAL_TIM_PWM_ConfigChannel>
 8003fd6:	b9b0      	cbnz	r0, 8004006 <MX_TIM3_Init+0x8e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fd8:	2204      	movs	r2, #4
 8003fda:	eb0d 0102 	add.w	r1, sp, r2
 8003fde:	480d      	ldr	r0, [pc, #52]	; (8004014 <MX_TIM3_Init+0x9c>)
 8003fe0:	f003 ffb8 	bl	8007f54 <HAL_TIM_PWM_ConfigChannel>
 8003fe4:	b988      	cbnz	r0, 800400a <MX_TIM3_Init+0x92>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	a901      	add	r1, sp, #4
 8003fea:	480a      	ldr	r0, [pc, #40]	; (8004014 <MX_TIM3_Init+0x9c>)
 8003fec:	f003 ffb2 	bl	8007f54 <HAL_TIM_PWM_ConfigChannel>
 8003ff0:	b968      	cbnz	r0, 800400e <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8003ff2:	4808      	ldr	r0, [pc, #32]	; (8004014 <MX_TIM3_Init+0x9c>)
 8003ff4:	f000 fb7c 	bl	80046f0 <HAL_TIM_MspPostInit>
}
 8003ff8:	b00b      	add	sp, #44	; 0x2c
 8003ffa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003ffe:	f7ff ff11 	bl	8003e24 <Error_Handler>
    Error_Handler();
 8004002:	f7ff ff0f 	bl	8003e24 <Error_Handler>
    Error_Handler();
 8004006:	f7ff ff0d 	bl	8003e24 <Error_Handler>
    Error_Handler();
 800400a:	f7ff ff0b 	bl	8003e24 <Error_Handler>
    Error_Handler();
 800400e:	f7ff ff09 	bl	8003e24 <Error_Handler>
 8004012:	bf00      	nop
 8004014:	20003148 	.word	0x20003148
 8004018:	40000400 	.word	0x40000400

0800401c <MX_USART1_UART_Init>:
{
 800401c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800401e:	480a      	ldr	r0, [pc, #40]	; (8004048 <MX_USART1_UART_Init+0x2c>)
 8004020:	4b0a      	ldr	r3, [pc, #40]	; (800404c <MX_USART1_UART_Init+0x30>)
 8004022:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8004024:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004028:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800402a:	2300      	movs	r3, #0
 800402c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800402e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004030:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004032:	220c      	movs	r2, #12
 8004034:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004036:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004038:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800403a:	f004 fa18 	bl	800846e <HAL_UART_Init>
 800403e:	b900      	cbnz	r0, 8004042 <MX_USART1_UART_Init+0x26>
}
 8004040:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004042:	f7ff feef 	bl	8003e24 <Error_Handler>
 8004046:	bf00      	nop
 8004048:	20003230 	.word	0x20003230
 800404c:	40011000 	.word	0x40011000

08004050 <MX_USART2_UART_Init>:
{
 8004050:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8004052:	480a      	ldr	r0, [pc, #40]	; (800407c <MX_USART2_UART_Init+0x2c>)
 8004054:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <MX_USART2_UART_Init+0x30>)
 8004056:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004058:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800405c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800405e:	2300      	movs	r3, #0
 8004060:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004062:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004064:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004066:	220c      	movs	r2, #12
 8004068:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800406a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800406c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800406e:	f004 f9fe 	bl	800846e <HAL_UART_Init>
 8004072:	b900      	cbnz	r0, 8004076 <MX_USART2_UART_Init+0x26>
}
 8004074:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004076:	f7ff fed5 	bl	8003e24 <Error_Handler>
 800407a:	bf00      	nop
 800407c:	200033ec 	.word	0x200033ec
 8004080:	40004400 	.word	0x40004400

08004084 <MX_USART6_UART_Init>:
{
 8004084:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 8004086:	480a      	ldr	r0, [pc, #40]	; (80040b0 <MX_USART6_UART_Init+0x2c>)
 8004088:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <MX_USART6_UART_Init+0x30>)
 800408a:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 19200;
 800408c:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8004090:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004092:	2300      	movs	r3, #0
 8004094:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004096:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004098:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800409a:	220c      	movs	r2, #12
 800409c:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800409e:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80040a0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80040a2:	f004 f9e4 	bl	800846e <HAL_UART_Init>
 80040a6:	b900      	cbnz	r0, 80040aa <MX_USART6_UART_Init+0x26>
}
 80040a8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80040aa:	f7ff febb 	bl	8003e24 <Error_Handler>
 80040ae:	bf00      	nop
 80040b0:	20003314 	.word	0x20003314
 80040b4:	40011400 	.word	0x40011400

080040b8 <MX_TIM2_Init>:
{
 80040b8:	b500      	push	{lr}
 80040ba:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040bc:	2300      	movs	r3, #0
 80040be:	9308      	str	r3, [sp, #32]
 80040c0:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040c2:	9301      	str	r3, [sp, #4]
 80040c4:	9302      	str	r3, [sp, #8]
 80040c6:	9303      	str	r3, [sp, #12]
 80040c8:	9304      	str	r3, [sp, #16]
 80040ca:	9305      	str	r3, [sp, #20]
 80040cc:	9306      	str	r3, [sp, #24]
 80040ce:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 80040d0:	481d      	ldr	r0, [pc, #116]	; (8004148 <MX_TIM2_Init+0x90>)
 80040d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80040d6:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 80040d8:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040da:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 80040dc:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040de:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040e0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80040e2:	f003 feec 	bl	8007ebe <HAL_TIM_PWM_Init>
 80040e6:	bb28      	cbnz	r0, 8004134 <MX_TIM2_Init+0x7c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040e8:	2300      	movs	r3, #0
 80040ea:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040ec:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80040ee:	a908      	add	r1, sp, #32
 80040f0:	4815      	ldr	r0, [pc, #84]	; (8004148 <MX_TIM2_Init+0x90>)
 80040f2:	f003 ffcd 	bl	8008090 <HAL_TIMEx_MasterConfigSynchronization>
 80040f6:	b9f8      	cbnz	r0, 8004138 <MX_TIM2_Init+0x80>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040f8:	2360      	movs	r3, #96	; 0x60
 80040fa:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80040fc:	2200      	movs	r2, #0
 80040fe:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004100:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004102:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004104:	a901      	add	r1, sp, #4
 8004106:	4810      	ldr	r0, [pc, #64]	; (8004148 <MX_TIM2_Init+0x90>)
 8004108:	f003 ff24 	bl	8007f54 <HAL_TIM_PWM_ConfigChannel>
 800410c:	b9b0      	cbnz	r0, 800413c <MX_TIM2_Init+0x84>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800410e:	2204      	movs	r2, #4
 8004110:	eb0d 0102 	add.w	r1, sp, r2
 8004114:	480c      	ldr	r0, [pc, #48]	; (8004148 <MX_TIM2_Init+0x90>)
 8004116:	f003 ff1d 	bl	8007f54 <HAL_TIM_PWM_ConfigChannel>
 800411a:	b988      	cbnz	r0, 8004140 <MX_TIM2_Init+0x88>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800411c:	2208      	movs	r2, #8
 800411e:	a901      	add	r1, sp, #4
 8004120:	4809      	ldr	r0, [pc, #36]	; (8004148 <MX_TIM2_Init+0x90>)
 8004122:	f003 ff17 	bl	8007f54 <HAL_TIM_PWM_ConfigChannel>
 8004126:	b968      	cbnz	r0, 8004144 <MX_TIM2_Init+0x8c>
  HAL_TIM_MspPostInit(&htim2);
 8004128:	4807      	ldr	r0, [pc, #28]	; (8004148 <MX_TIM2_Init+0x90>)
 800412a:	f000 fae1 	bl	80046f0 <HAL_TIM_MspPostInit>
}
 800412e:	b00b      	add	sp, #44	; 0x2c
 8004130:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004134:	f7ff fe76 	bl	8003e24 <Error_Handler>
    Error_Handler();
 8004138:	f7ff fe74 	bl	8003e24 <Error_Handler>
    Error_Handler();
 800413c:	f7ff fe72 	bl	8003e24 <Error_Handler>
    Error_Handler();
 8004140:	f7ff fe70 	bl	8003e24 <Error_Handler>
    Error_Handler();
 8004144:	f7ff fe6e 	bl	8003e24 <Error_Handler>
 8004148:	200033ac 	.word	0x200033ac

0800414c <MX_ADC1_Init>:
{
 800414c:	b500      	push	{lr}
 800414e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8004150:	2300      	movs	r3, #0
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	9302      	str	r3, [sp, #8]
 8004158:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800415a:	4814      	ldr	r0, [pc, #80]	; (80041ac <MX_ADC1_Init+0x60>)
 800415c:	4a14      	ldr	r2, [pc, #80]	; (80041b0 <MX_ADC1_Init+0x64>)
 800415e:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004160:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004164:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004166:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004168:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800416a:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800416c:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004170:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004172:	4a10      	ldr	r2, [pc, #64]	; (80041b4 <MX_ADC1_Init+0x68>)
 8004174:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004176:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004178:	2201      	movs	r2, #1
 800417a:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800417c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004180:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004182:	f001 f971 	bl	8005468 <HAL_ADC_Init>
 8004186:	b968      	cbnz	r0, 80041a4 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8004188:	2312      	movs	r3, #18
 800418a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800418c:	2301      	movs	r3, #1
 800418e:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004190:	2300      	movs	r3, #0
 8004192:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004194:	4669      	mov	r1, sp
 8004196:	4805      	ldr	r0, [pc, #20]	; (80041ac <MX_ADC1_Init+0x60>)
 8004198:	f001 f992 	bl	80054c0 <HAL_ADC_ConfigChannel>
 800419c:	b920      	cbnz	r0, 80041a8 <MX_ADC1_Init+0x5c>
}
 800419e:	b005      	add	sp, #20
 80041a0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80041a4:	f7ff fe3e 	bl	8003e24 <Error_Handler>
    Error_Handler();
 80041a8:	f7ff fe3c 	bl	8003e24 <Error_Handler>
 80041ac:	20003188 	.word	0x20003188
 80041b0:	40012000 	.word	0x40012000
 80041b4:	0f000001 	.word	0x0f000001

080041b8 <MX_RTC_Init>:
{
 80041b8:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 80041ba:	4809      	ldr	r0, [pc, #36]	; (80041e0 <MX_RTC_Init+0x28>)
 80041bc:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <MX_RTC_Init+0x2c>)
 80041be:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80041c0:	2300      	movs	r3, #0
 80041c2:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80041c4:	227f      	movs	r2, #127	; 0x7f
 80041c6:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80041c8:	22ff      	movs	r2, #255	; 0xff
 80041ca:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80041cc:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80041ce:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80041d0:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80041d2:	f003 f858 	bl	8007286 <HAL_RTC_Init>
 80041d6:	b900      	cbnz	r0, 80041da <MX_RTC_Init+0x22>
}
 80041d8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80041da:	f7ff fe23 	bl	8003e24 <Error_Handler>
 80041de:	bf00      	nop
 80041e0:	200032b4 	.word	0x200032b4
 80041e4:	40002800 	.word	0x40002800

080041e8 <MX_CRC_Init>:
{
 80041e8:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 80041ea:	4804      	ldr	r0, [pc, #16]	; (80041fc <MX_CRC_Init+0x14>)
 80041ec:	4b04      	ldr	r3, [pc, #16]	; (8004200 <MX_CRC_Init+0x18>)
 80041ee:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80041f0:	f001 fa82 	bl	80056f8 <HAL_CRC_Init>
 80041f4:	b900      	cbnz	r0, 80041f8 <MX_CRC_Init+0x10>
}
 80041f6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80041f8:	f7ff fe14 	bl	8003e24 <Error_Handler>
 80041fc:	20003140 	.word	0x20003140
 8004200:	40023000 	.word	0x40023000

08004204 <MX_TIM11_Init>:
{
 8004204:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 8004206:	4808      	ldr	r0, [pc, #32]	; (8004228 <MX_TIM11_Init+0x24>)
 8004208:	4b08      	ldr	r3, [pc, #32]	; (800422c <MX_TIM11_Init+0x28>)
 800420a:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004210:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 8400 - 1;
 8004212:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004216:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004218:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800421a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800421c:	f003 fe36 	bl	8007e8c <HAL_TIM_Base_Init>
 8004220:	b900      	cbnz	r0, 8004224 <MX_TIM11_Init+0x20>
}
 8004222:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004224:	f7ff fdfe 	bl	8003e24 <Error_Handler>
 8004228:	20003270 	.word	0x20003270
 800422c:	40014800 	.word	0x40014800

08004230 <SystemClock_Config>:
{
 8004230:	b500      	push	{lr}
 8004232:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004234:	2230      	movs	r2, #48	; 0x30
 8004236:	2100      	movs	r1, #0
 8004238:	eb0d 0002 	add.w	r0, sp, r2
 800423c:	f007 fd2b 	bl	800bc96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004240:	2300      	movs	r3, #0
 8004242:	9307      	str	r3, [sp, #28]
 8004244:	9308      	str	r3, [sp, #32]
 8004246:	9309      	str	r3, [sp, #36]	; 0x24
 8004248:	930a      	str	r3, [sp, #40]	; 0x28
 800424a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800424c:	9302      	str	r3, [sp, #8]
 800424e:	9303      	str	r3, [sp, #12]
 8004250:	9304      	str	r3, [sp, #16]
 8004252:	9305      	str	r3, [sp, #20]
 8004254:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	4a27      	ldr	r2, [pc, #156]	; (80042f8 <SystemClock_Config+0xc8>)
 800425a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800425c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004260:	6411      	str	r1, [r2, #64]	; 0x40
 8004262:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004264:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004268:	9200      	str	r2, [sp, #0]
 800426a:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	4a23      	ldr	r2, [pc, #140]	; (80042fc <SystemClock_Config+0xcc>)
 8004270:	6813      	ldr	r3, [r2, #0]
 8004272:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	6813      	ldr	r3, [r2, #0]
 800427e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004282:	9301      	str	r3, [sp, #4]
 8004284:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8004286:	2305      	movs	r3, #5
 8004288:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800428a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800428e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004290:	2301      	movs	r3, #1
 8004292:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004294:	2302      	movs	r3, #2
 8004296:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004298:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800429c:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800429e:	2219      	movs	r2, #25
 80042a0:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80042a2:	22a8      	movs	r2, #168	; 0xa8
 80042a4:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042a6:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80042a8:	2304      	movs	r3, #4
 80042aa:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042ac:	a80c      	add	r0, sp, #48	; 0x30
 80042ae:	f002 fbab 	bl	8006a08 <HAL_RCC_OscConfig>
 80042b2:	b9d8      	cbnz	r0, 80042ec <SystemClock_Config+0xbc>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042b4:	230f      	movs	r3, #15
 80042b6:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042b8:	2102      	movs	r1, #2
 80042ba:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042bc:	2300      	movs	r3, #0
 80042be:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80042c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042c4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042c6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80042c8:	a807      	add	r0, sp, #28
 80042ca:	f002 fde9 	bl	8006ea0 <HAL_RCC_ClockConfig>
 80042ce:	b978      	cbnz	r0, 80042f0 <SystemClock_Config+0xc0>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80042d0:	2302      	movs	r3, #2
 80042d2:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80042d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042d8:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042da:	a802      	add	r0, sp, #8
 80042dc:	f002 fee8 	bl	80070b0 <HAL_RCCEx_PeriphCLKConfig>
 80042e0:	b940      	cbnz	r0, 80042f4 <SystemClock_Config+0xc4>
  HAL_RCC_EnableCSS();
 80042e2:	f002 fd83 	bl	8006dec <HAL_RCC_EnableCSS>
}
 80042e6:	b019      	add	sp, #100	; 0x64
 80042e8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80042ec:	f7ff fd9a 	bl	8003e24 <Error_Handler>
    Error_Handler();
 80042f0:	f7ff fd98 	bl	8003e24 <Error_Handler>
    Error_Handler();
 80042f4:	f7ff fd96 	bl	8003e24 <Error_Handler>
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40007000 	.word	0x40007000

08004300 <main>:
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b0b6      	sub	sp, #216	; 0xd8
  HAL_Init();
 8004304:	f000 ffea 	bl	80052dc <HAL_Init>
  SystemClock_Config();
 8004308:	f7ff ff92 	bl	8004230 <SystemClock_Config>
  MX_GPIO_Init();
 800430c:	f7ff fc4a 	bl	8003ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004310:	f7ff fcec 	bl	8003cec <MX_DMA_Init>
  MX_I2C1_Init();
 8004314:	f7ff fd88 	bl	8003e28 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004318:	f7ff fda2 	bl	8003e60 <MX_SPI1_Init>
  MX_TIM1_Init();
 800431c:	f7ff fdc0 	bl	8003ea0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8004320:	f7ff fe2a 	bl	8003f78 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004324:	f7ff fe7a 	bl	800401c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004328:	f7ff fe92 	bl	8004050 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800432c:	f7ff feaa 	bl	8004084 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8004330:	f7ff fec2 	bl	80040b8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8004334:	f7ff ff0a 	bl	800414c <MX_ADC1_Init>
  MX_RTC_Init();
 8004338:	f7ff ff3e 	bl	80041b8 <MX_RTC_Init>
  MX_CRC_Init();
 800433c:	f7ff ff54 	bl	80041e8 <MX_CRC_Init>
  MX_TIM11_Init();
 8004340:	f7ff ff60 	bl	8004204 <MX_TIM11_Init>
  Config_Init(&hi2c1);
 8004344:	483f      	ldr	r0, [pc, #252]	; (8004444 <main+0x144>)
 8004346:	f7fd f819 	bl	800137c <Config_Init>
  osMutexDef(SPIMutex);
 800434a:	2500      	movs	r5, #0
 800434c:	9534      	str	r5, [sp, #208]	; 0xd0
 800434e:	9535      	str	r5, [sp, #212]	; 0xd4
  SPIMutexHandle = osMutexCreate(osMutex(SPIMutex));
 8004350:	a834      	add	r0, sp, #208	; 0xd0
 8004352:	f004 fbc1 	bl	8008ad8 <osMutexCreate>
 8004356:	4b3c      	ldr	r3, [pc, #240]	; (8004448 <main+0x148>)
 8004358:	6018      	str	r0, [r3, #0]
  osTimerDef(Config, ConfigSaveTmr);
 800435a:	4b3c      	ldr	r3, [pc, #240]	; (800444c <main+0x14c>)
 800435c:	9332      	str	r3, [sp, #200]	; 0xc8
 800435e:	9533      	str	r5, [sp, #204]	; 0xcc
  ConfigHandle = osTimerCreate(osTimer(Config), osTimerOnce, NULL);
 8004360:	462a      	mov	r2, r5
 8004362:	4629      	mov	r1, r5
 8004364:	a832      	add	r0, sp, #200	; 0xc8
 8004366:	f004 fb95 	bl	8008a94 <osTimerCreate>
 800436a:	4b39      	ldr	r3, [pc, #228]	; (8004450 <main+0x150>)
 800436c:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800436e:	4c39      	ldr	r4, [pc, #228]	; (8004454 <main+0x154>)
 8004370:	ae2b      	add	r6, sp, #172	; 0xac
 8004372:	4627      	mov	r7, r4
 8004374:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004376:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004378:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800437c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004380:	4629      	mov	r1, r5
 8004382:	a82b      	add	r0, sp, #172	; 0xac
 8004384:	f004 fb47 	bl	8008a16 <osThreadCreate>
 8004388:	4b33      	ldr	r3, [pc, #204]	; (8004458 <main+0x158>)
 800438a:	6018      	str	r0, [r3, #0]
  osThreadDef(PowerRegulation, RegulationTask, osPriorityRealtime, 0, 256);
 800438c:	ae24      	add	r6, sp, #144	; 0x90
 800438e:	f104 071c 	add.w	r7, r4, #28
 8004392:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004394:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004396:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800439a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  PowerRegulationHandle = osThreadCreate(osThread(PowerRegulation), NULL);
 800439e:	4629      	mov	r1, r5
 80043a0:	a824      	add	r0, sp, #144	; 0x90
 80043a2:	f004 fb38 	bl	8008a16 <osThreadCreate>
 80043a6:	4b2d      	ldr	r3, [pc, #180]	; (800445c <main+0x15c>)
 80043a8:	6018      	str	r0, [r3, #0]
  osThreadDef(Diplays, DisplayTask, osPriorityNormal, 0, 256);
 80043aa:	ae1d      	add	r6, sp, #116	; 0x74
 80043ac:	f104 0738 	add.w	r7, r4, #56	; 0x38
 80043b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80043b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80043b4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80043b8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DiplaysHandle = osThreadCreate(osThread(Diplays), NULL);
 80043bc:	4629      	mov	r1, r5
 80043be:	a81d      	add	r0, sp, #116	; 0x74
 80043c0:	f004 fb29 	bl	8008a16 <osThreadCreate>
 80043c4:	4b26      	ldr	r3, [pc, #152]	; (8004460 <main+0x160>)
 80043c6:	6018      	str	r0, [r3, #0]
  osThreadDef(Test, TestTask, osPriorityLow, 0, 128);
 80043c8:	ae16      	add	r6, sp, #88	; 0x58
 80043ca:	f104 0754 	add.w	r7, r4, #84	; 0x54
 80043ce:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80043d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80043d2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80043d6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TestHandle = osThreadCreate(osThread(Test), NULL);
 80043da:	4629      	mov	r1, r5
 80043dc:	a816      	add	r0, sp, #88	; 0x58
 80043de:	f004 fb1a 	bl	8008a16 <osThreadCreate>
 80043e2:	4b20      	ldr	r3, [pc, #128]	; (8004464 <main+0x164>)
 80043e4:	6018      	str	r0, [r3, #0]
  osThreadDef(Ethernet, EthernetTask, osPriorityHigh, 0, 256);
 80043e6:	ae0f      	add	r6, sp, #60	; 0x3c
 80043e8:	f104 0770 	add.w	r7, r4, #112	; 0x70
 80043ec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80043ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80043f0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80043f4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  EthernetHandle = osThreadCreate(osThread(Ethernet), NULL);
 80043f8:	4629      	mov	r1, r5
 80043fa:	a80f      	add	r0, sp, #60	; 0x3c
 80043fc:	f004 fb0b 	bl	8008a16 <osThreadCreate>
 8004400:	4b19      	ldr	r3, [pc, #100]	; (8004468 <main+0x168>)
 8004402:	6018      	str	r0, [r3, #0]
  osThreadDef(nRF24L01, RadioTask, osPriorityAboveNormal, 0, 256);
 8004404:	ae08      	add	r6, sp, #32
 8004406:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 800440a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800440c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800440e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004412:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  nRF24L01Handle = osThreadCreate(osThread(nRF24L01), NULL);
 8004416:	4629      	mov	r1, r5
 8004418:	a808      	add	r0, sp, #32
 800441a:	f004 fafc 	bl	8008a16 <osThreadCreate>
 800441e:	4b13      	ldr	r3, [pc, #76]	; (800446c <main+0x16c>)
 8004420:	6018      	str	r0, [r3, #0]
  osThreadDef(DataLog, DataLogTask, osPriorityBelowNormal, 0, 256);
 8004422:	ae01      	add	r6, sp, #4
 8004424:	34a8      	adds	r4, #168	; 0xa8
 8004426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004428:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800442a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800442e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DataLogHandle = osThreadCreate(osThread(DataLog), NULL);
 8004432:	4629      	mov	r1, r5
 8004434:	a801      	add	r0, sp, #4
 8004436:	f004 faee 	bl	8008a16 <osThreadCreate>
 800443a:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <main+0x170>)
 800443c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800443e:	f004 fae5 	bl	8008a0c <osKernelStart>
 8004442:	e7fe      	b.n	8004442 <main+0x142>
 8004444:	200030ec 	.word	0x200030ec
 8004448:	20003430 	.word	0x20003430
 800444c:	08003ba1 	.word	0x08003ba1
 8004450:	200030e8 	.word	0x200030e8
 8004454:	0800c518 	.word	0x0800c518
 8004458:	20003020 	.word	0x20003020
 800445c:	200030e4 	.word	0x200030e4
 8004460:	2000342c 	.word	0x2000342c
 8004464:	200032b0 	.word	0x200032b0
 8004468:	20003438 	.word	0x20003438
 800446c:	20003018 	.word	0x20003018
 8004470:	2000301c 	.word	0x2000301c

08004474 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004474:	b500      	push	{lr}
 8004476:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004478:	2200      	movs	r2, #0
 800447a:	9200      	str	r2, [sp, #0]
 800447c:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <HAL_MspInit+0x40>)
 800447e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004480:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004484:	6459      	str	r1, [r3, #68]	; 0x44
 8004486:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004488:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800448c:	9100      	str	r1, [sp, #0]
 800448e:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004490:	9201      	str	r2, [sp, #4]
 8004492:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004494:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004498:	6419      	str	r1, [r3, #64]	; 0x40
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a0:	9301      	str	r3, [sp, #4]
 80044a2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80044a4:	210f      	movs	r1, #15
 80044a6:	f06f 0001 	mvn.w	r0, #1
 80044aa:	f001 f8e3 	bl	8005674 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044ae:	b003      	add	sp, #12
 80044b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80044b4:	40023800 	.word	0x40023800

080044b8 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 80044b8:	6802      	ldr	r2, [r0, #0]
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <HAL_ADC_MspInit+0x28>)
 80044bc:	429a      	cmp	r2, r3
 80044be:	d000      	beq.n	80044c2 <HAL_ADC_MspInit+0xa>
 80044c0:	4770      	bx	lr
{
 80044c2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80044c4:	2300      	movs	r3, #0
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_ADC_MspInit+0x2c>)
 80044ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d0:	645a      	str	r2, [r3, #68]	; 0x44
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80044dc:	b002      	add	sp, #8
 80044de:	4770      	bx	lr
 80044e0:	40012000 	.word	0x40012000
 80044e4:	40023800 	.word	0x40023800

080044e8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80044e8:	6802      	ldr	r2, [r0, #0]
 80044ea:	4b09      	ldr	r3, [pc, #36]	; (8004510 <HAL_CRC_MspInit+0x28>)
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d000      	beq.n	80044f2 <HAL_CRC_MspInit+0xa>
 80044f0:	4770      	bx	lr
{
 80044f2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80044f4:	2300      	movs	r3, #0
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_CRC_MspInit+0x2c>)
 80044fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800450c:	b002      	add	sp, #8
 800450e:	4770      	bx	lr
 8004510:	40023000 	.word	0x40023000
 8004514:	40023800 	.word	0x40023800

08004518 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004518:	b530      	push	{r4, r5, lr}
 800451a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800451c:	2300      	movs	r3, #0
 800451e:	9303      	str	r3, [sp, #12]
 8004520:	9304      	str	r3, [sp, #16]
 8004522:	9305      	str	r3, [sp, #20]
 8004524:	9306      	str	r3, [sp, #24]
 8004526:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8004528:	6802      	ldr	r2, [r0, #0]
 800452a:	4b15      	ldr	r3, [pc, #84]	; (8004580 <HAL_I2C_MspInit+0x68>)
 800452c:	429a      	cmp	r2, r3
 800452e:	d001      	beq.n	8004534 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004530:	b009      	add	sp, #36	; 0x24
 8004532:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004534:	2500      	movs	r5, #0
 8004536:	9501      	str	r5, [sp, #4]
 8004538:	4c12      	ldr	r4, [pc, #72]	; (8004584 <HAL_I2C_MspInit+0x6c>)
 800453a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800453c:	f043 0302 	orr.w	r3, r3, #2
 8004540:	6323      	str	r3, [r4, #48]	; 0x30
 8004542:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	9301      	str	r3, [sp, #4]
 800454a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800454c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004550:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004552:	2312      	movs	r3, #18
 8004554:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004556:	2301      	movs	r3, #1
 8004558:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800455a:	2303      	movs	r3, #3
 800455c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800455e:	2304      	movs	r3, #4
 8004560:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004562:	a903      	add	r1, sp, #12
 8004564:	4808      	ldr	r0, [pc, #32]	; (8004588 <HAL_I2C_MspInit+0x70>)
 8004566:	f001 fb53 	bl	8005c10 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800456a:	9502      	str	r5, [sp, #8]
 800456c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800456e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004572:	6423      	str	r3, [r4, #64]	; 0x40
 8004574:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800457a:	9302      	str	r3, [sp, #8]
 800457c:	9b02      	ldr	r3, [sp, #8]
}
 800457e:	e7d7      	b.n	8004530 <HAL_I2C_MspInit+0x18>
 8004580:	40005400 	.word	0x40005400
 8004584:	40023800 	.word	0x40023800
 8004588:	40020400 	.word	0x40020400

0800458c <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 800458c:	6802      	ldr	r2, [r0, #0]
 800458e:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <HAL_RTC_MspInit+0x14>)
 8004590:	429a      	cmp	r2, r3
 8004592:	d000      	beq.n	8004596 <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004594:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8004596:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <HAL_RTC_MspInit+0x18>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]
}
 800459c:	e7fa      	b.n	8004594 <HAL_RTC_MspInit+0x8>
 800459e:	bf00      	nop
 80045a0:	40002800 	.word	0x40002800
 80045a4:	42470e3c 	.word	0x42470e3c

080045a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045a8:	b500      	push	{lr}
 80045aa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ac:	2300      	movs	r3, #0
 80045ae:	9303      	str	r3, [sp, #12]
 80045b0:	9304      	str	r3, [sp, #16]
 80045b2:	9305      	str	r3, [sp, #20]
 80045b4:	9306      	str	r3, [sp, #24]
 80045b6:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 80045b8:	6802      	ldr	r2, [r0, #0]
 80045ba:	4b15      	ldr	r3, [pc, #84]	; (8004610 <HAL_SPI_MspInit+0x68>)
 80045bc:	429a      	cmp	r2, r3
 80045be:	d002      	beq.n	80045c6 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80045c0:	b009      	add	sp, #36	; 0x24
 80045c2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045c6:	2100      	movs	r1, #0
 80045c8:	9101      	str	r1, [sp, #4]
 80045ca:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80045ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045d4:	645a      	str	r2, [r3, #68]	; 0x44
 80045d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80045dc:	9201      	str	r2, [sp, #4]
 80045de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045e0:	9102      	str	r1, [sp, #8]
 80045e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e4:	f042 0201 	orr.w	r2, r2, #1
 80045e8:	631a      	str	r2, [r3, #48]	; 0x30
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	9302      	str	r3, [sp, #8]
 80045f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80045f4:	23e0      	movs	r3, #224	; 0xe0
 80045f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f8:	2302      	movs	r3, #2
 80045fa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045fc:	2303      	movs	r3, #3
 80045fe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004600:	2305      	movs	r3, #5
 8004602:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004604:	a903      	add	r1, sp, #12
 8004606:	4803      	ldr	r0, [pc, #12]	; (8004614 <HAL_SPI_MspInit+0x6c>)
 8004608:	f001 fb02 	bl	8005c10 <HAL_GPIO_Init>
}
 800460c:	e7d8      	b.n	80045c0 <HAL_SPI_MspInit+0x18>
 800460e:	bf00      	nop
 8004610:	40013000 	.word	0x40013000
 8004614:	40020000 	.word	0x40020000

08004618 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004618:	b510      	push	{r4, lr}
 800461a:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 800461c:	6803      	ldr	r3, [r0, #0]
 800461e:	4a21      	ldr	r2, [pc, #132]	; (80046a4 <HAL_TIM_PWM_MspInit+0x8c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d007      	beq.n	8004634 <HAL_TIM_PWM_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 8004624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004628:	d021      	beq.n	800466e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 800462a:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <HAL_TIM_PWM_MspInit+0x90>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d02b      	beq.n	8004688 <HAL_TIM_PWM_MspInit+0x70>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004630:	b004      	add	sp, #16
 8004632:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004634:	2400      	movs	r4, #0
 8004636:	9401      	str	r4, [sp, #4]
 8004638:	4b1c      	ldr	r3, [pc, #112]	; (80046ac <HAL_TIM_PWM_MspInit+0x94>)
 800463a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800463c:	f042 0201 	orr.w	r2, r2, #1
 8004640:	645a      	str	r2, [r3, #68]	; 0x44
 8004642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	9301      	str	r3, [sp, #4]
 800464a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800464c:	4622      	mov	r2, r4
 800464e:	4621      	mov	r1, r4
 8004650:	2019      	movs	r0, #25
 8004652:	f001 f80f 	bl	8005674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004656:	2019      	movs	r0, #25
 8004658:	f001 f840 	bl	80056dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800465c:	4622      	mov	r2, r4
 800465e:	2105      	movs	r1, #5
 8004660:	201a      	movs	r0, #26
 8004662:	f001 f807 	bl	8005674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004666:	201a      	movs	r0, #26
 8004668:	f001 f838 	bl	80056dc <HAL_NVIC_EnableIRQ>
 800466c:	e7e0      	b.n	8004630 <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	9302      	str	r3, [sp, #8]
 8004672:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <HAL_TIM_PWM_MspInit+0x94>)
 8004674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	9302      	str	r3, [sp, #8]
 8004684:	9b02      	ldr	r3, [sp, #8]
 8004686:	e7d3      	b.n	8004630 <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004688:	2300      	movs	r3, #0
 800468a:	9303      	str	r3, [sp, #12]
 800468c:	4b07      	ldr	r3, [pc, #28]	; (80046ac <HAL_TIM_PWM_MspInit+0x94>)
 800468e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004690:	f042 0202 	orr.w	r2, r2, #2
 8004694:	641a      	str	r2, [r3, #64]	; 0x40
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	9303      	str	r3, [sp, #12]
 800469e:	9b03      	ldr	r3, [sp, #12]
}
 80046a0:	e7c6      	b.n	8004630 <HAL_TIM_PWM_MspInit+0x18>
 80046a2:	bf00      	nop
 80046a4:	40010000 	.word	0x40010000
 80046a8:	40000400 	.word	0x40000400
 80046ac:	40023800 	.word	0x40023800

080046b0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 80046b0:	6802      	ldr	r2, [r0, #0]
 80046b2:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <HAL_TIM_Base_MspInit+0x3c>)
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d000      	beq.n	80046ba <HAL_TIM_Base_MspInit+0xa>
 80046b8:	4770      	bx	lr
{
 80046ba:	b500      	push	{lr}
 80046bc:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80046be:	2200      	movs	r2, #0
 80046c0:	9201      	str	r2, [sp, #4]
 80046c2:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 80046c6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80046c8:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80046cc:	6459      	str	r1, [r3, #68]	; 0x44
 80046ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	9b01      	ldr	r3, [sp, #4]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80046d8:	2105      	movs	r1, #5
 80046da:	201a      	movs	r0, #26
 80046dc:	f000 ffca 	bl	8005674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80046e0:	201a      	movs	r0, #26
 80046e2:	f000 fffb 	bl	80056dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80046e6:	b003      	add	sp, #12
 80046e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80046ec:	40014800 	.word	0x40014800

080046f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f4:	2300      	movs	r3, #0
 80046f6:	9305      	str	r3, [sp, #20]
 80046f8:	9306      	str	r3, [sp, #24]
 80046fa:	9307      	str	r3, [sp, #28]
 80046fc:	9308      	str	r3, [sp, #32]
 80046fe:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim->Instance==TIM1)
 8004700:	6803      	ldr	r3, [r0, #0]
 8004702:	4a32      	ldr	r2, [pc, #200]	; (80047cc <HAL_TIM_MspPostInit+0xdc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d007      	beq.n	8004718 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8004708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470c:	d01c      	beq.n	8004748 <HAL_TIM_MspPostInit+0x58>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 800470e:	4a30      	ldr	r2, [pc, #192]	; (80047d0 <HAL_TIM_MspPostInit+0xe0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d045      	beq.n	80047a0 <HAL_TIM_MspPostInit+0xb0>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004714:	b00a      	add	sp, #40	; 0x28
 8004716:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004718:	2300      	movs	r3, #0
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	4b2d      	ldr	r3, [pc, #180]	; (80047d4 <HAL_TIM_MspPostInit+0xe4>)
 800471e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	9301      	str	r3, [sp, #4]
 800472e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004730:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004734:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004736:	2302      	movs	r3, #2
 8004738:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800473a:	2301      	movs	r3, #1
 800473c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473e:	a905      	add	r1, sp, #20
 8004740:	4825      	ldr	r0, [pc, #148]	; (80047d8 <HAL_TIM_MspPostInit+0xe8>)
 8004742:	f001 fa65 	bl	8005c10 <HAL_GPIO_Init>
 8004746:	e7e5      	b.n	8004714 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004748:	2400      	movs	r4, #0
 800474a:	9402      	str	r4, [sp, #8]
 800474c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8004750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	631a      	str	r2, [r3, #48]	; 0x30
 8004758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800475a:	f002 0201 	and.w	r2, r2, #1
 800475e:	9202      	str	r2, [sp, #8]
 8004760:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004762:	9403      	str	r4, [sp, #12]
 8004764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004766:	f042 0202 	orr.w	r2, r2, #2
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	9303      	str	r3, [sp, #12]
 8004774:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004776:	2501      	movs	r5, #1
 8004778:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477a:	2602      	movs	r6, #2
 800477c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800477e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004780:	a905      	add	r1, sp, #20
 8004782:	4815      	ldr	r0, [pc, #84]	; (80047d8 <HAL_TIM_MspPostInit+0xe8>)
 8004784:	f001 fa44 	bl	8005c10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8004788:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800478c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004790:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004792:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004794:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004796:	a905      	add	r1, sp, #20
 8004798:	4810      	ldr	r0, [pc, #64]	; (80047dc <HAL_TIM_MspPostInit+0xec>)
 800479a:	f001 fa39 	bl	8005c10 <HAL_GPIO_Init>
 800479e:	e7b9      	b.n	8004714 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047a0:	2300      	movs	r3, #0
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_TIM_MspPostInit+0xe4>)
 80047a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a8:	f042 0202 	orr.w	r2, r2, #2
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	9304      	str	r3, [sp, #16]
 80047b6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 80047b8:	2331      	movs	r3, #49	; 0x31
 80047ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047bc:	2302      	movs	r3, #2
 80047be:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047c0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047c2:	a905      	add	r1, sp, #20
 80047c4:	4805      	ldr	r0, [pc, #20]	; (80047dc <HAL_TIM_MspPostInit+0xec>)
 80047c6:	f001 fa23 	bl	8005c10 <HAL_GPIO_Init>
}
 80047ca:	e7a3      	b.n	8004714 <HAL_TIM_MspPostInit+0x24>
 80047cc:	40010000 	.word	0x40010000
 80047d0:	40000400 	.word	0x40000400
 80047d4:	40023800 	.word	0x40023800
 80047d8:	40020000 	.word	0x40020000
 80047dc:	40020400 	.word	0x40020400

080047e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047e0:	b530      	push	{r4, r5, lr}
 80047e2:	b08d      	sub	sp, #52	; 0x34
 80047e4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e6:	2300      	movs	r3, #0
 80047e8:	9307      	str	r3, [sp, #28]
 80047ea:	9308      	str	r3, [sp, #32]
 80047ec:	9309      	str	r3, [sp, #36]	; 0x24
 80047ee:	930a      	str	r3, [sp, #40]	; 0x28
 80047f0:	930b      	str	r3, [sp, #44]	; 0x2c
  if(huart->Instance==USART1)
 80047f2:	6803      	ldr	r3, [r0, #0]
 80047f4:	4a6e      	ldr	r2, [pc, #440]	; (80049b0 <HAL_UART_MspInit+0x1d0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d008      	beq.n	800480c <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80047fa:	4a6e      	ldr	r2, [pc, #440]	; (80049b4 <HAL_UART_MspInit+0x1d4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d04b      	beq.n	8004898 <HAL_UART_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8004800:	4a6d      	ldr	r2, [pc, #436]	; (80049b8 <HAL_UART_MspInit+0x1d8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	f000 808c 	beq.w	8004920 <HAL_UART_MspInit+0x140>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004808:	b00d      	add	sp, #52	; 0x34
 800480a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800480c:	2500      	movs	r5, #0
 800480e:	9501      	str	r5, [sp, #4]
 8004810:	4b6a      	ldr	r3, [pc, #424]	; (80049bc <HAL_UART_MspInit+0x1dc>)
 8004812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004814:	f042 0210 	orr.w	r2, r2, #16
 8004818:	645a      	str	r2, [r3, #68]	; 0x44
 800481a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800481c:	f002 0210 	and.w	r2, r2, #16
 8004820:	9201      	str	r2, [sp, #4]
 8004822:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004824:	9502      	str	r5, [sp, #8]
 8004826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004828:	f042 0202 	orr.w	r2, r2, #2
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	9302      	str	r3, [sp, #8]
 8004836:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004838:	23c0      	movs	r3, #192	; 0xc0
 800483a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483c:	2302      	movs	r3, #2
 800483e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004840:	2303      	movs	r3, #3
 8004842:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004844:	2307      	movs	r3, #7
 8004846:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004848:	a907      	add	r1, sp, #28
 800484a:	485d      	ldr	r0, [pc, #372]	; (80049c0 <HAL_UART_MspInit+0x1e0>)
 800484c:	f001 f9e0 	bl	8005c10 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004850:	485c      	ldr	r0, [pc, #368]	; (80049c4 <HAL_UART_MspInit+0x1e4>)
 8004852:	4b5d      	ldr	r3, [pc, #372]	; (80049c8 <HAL_UART_MspInit+0x1e8>)
 8004854:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004856:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800485a:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800485c:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800485e:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004864:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004866:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004868:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800486a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800486e:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004870:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004872:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004874:	f000 ffe4 	bl	8005840 <HAL_DMA_Init>
 8004878:	b958      	cbnz	r0, 8004892 <HAL_UART_MspInit+0xb2>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800487a:	4b52      	ldr	r3, [pc, #328]	; (80049c4 <HAL_UART_MspInit+0x1e4>)
 800487c:	6363      	str	r3, [r4, #52]	; 0x34
 800487e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8004880:	2200      	movs	r2, #0
 8004882:	2107      	movs	r1, #7
 8004884:	2025      	movs	r0, #37	; 0x25
 8004886:	f000 fef5 	bl	8005674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800488a:	2025      	movs	r0, #37	; 0x25
 800488c:	f000 ff26 	bl	80056dc <HAL_NVIC_EnableIRQ>
 8004890:	e7ba      	b.n	8004808 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8004892:	f7ff fac7 	bl	8003e24 <Error_Handler>
 8004896:	e7f0      	b.n	800487a <HAL_UART_MspInit+0x9a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004898:	2500      	movs	r5, #0
 800489a:	9503      	str	r5, [sp, #12]
 800489c:	4b47      	ldr	r3, [pc, #284]	; (80049bc <HAL_UART_MspInit+0x1dc>)
 800489e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80048a4:	641a      	str	r2, [r3, #64]	; 0x40
 80048a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048a8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80048ac:	9203      	str	r2, [sp, #12]
 80048ae:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b0:	9504      	str	r5, [sp, #16]
 80048b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	9304      	str	r3, [sp, #16]
 80048c2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80048c4:	230c      	movs	r3, #12
 80048c6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c8:	2302      	movs	r3, #2
 80048ca:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048cc:	2303      	movs	r3, #3
 80048ce:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048d0:	2307      	movs	r3, #7
 80048d2:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d4:	a907      	add	r1, sp, #28
 80048d6:	483d      	ldr	r0, [pc, #244]	; (80049cc <HAL_UART_MspInit+0x1ec>)
 80048d8:	f001 f99a 	bl	8005c10 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80048dc:	483c      	ldr	r0, [pc, #240]	; (80049d0 <HAL_UART_MspInit+0x1f0>)
 80048de:	4b3d      	ldr	r3, [pc, #244]	; (80049d4 <HAL_UART_MspInit+0x1f4>)
 80048e0:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80048e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048e6:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048e8:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048ea:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f0:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048f2:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048f4:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80048f6:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048f8:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048fa:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80048fc:	f000 ffa0 	bl	8005840 <HAL_DMA_Init>
 8004900:	b958      	cbnz	r0, 800491a <HAL_UART_MspInit+0x13a>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004902:	4b33      	ldr	r3, [pc, #204]	; (80049d0 <HAL_UART_MspInit+0x1f0>)
 8004904:	6363      	str	r3, [r4, #52]	; 0x34
 8004906:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 8004908:	2200      	movs	r2, #0
 800490a:	2108      	movs	r1, #8
 800490c:	2026      	movs	r0, #38	; 0x26
 800490e:	f000 feb1 	bl	8005674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004912:	2026      	movs	r0, #38	; 0x26
 8004914:	f000 fee2 	bl	80056dc <HAL_NVIC_EnableIRQ>
 8004918:	e776      	b.n	8004808 <HAL_UART_MspInit+0x28>
      Error_Handler();
 800491a:	f7ff fa83 	bl	8003e24 <Error_Handler>
 800491e:	e7f0      	b.n	8004902 <HAL_UART_MspInit+0x122>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004920:	2500      	movs	r5, #0
 8004922:	9505      	str	r5, [sp, #20]
 8004924:	4b25      	ldr	r3, [pc, #148]	; (80049bc <HAL_UART_MspInit+0x1dc>)
 8004926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004928:	f042 0220 	orr.w	r2, r2, #32
 800492c:	645a      	str	r2, [r3, #68]	; 0x44
 800492e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004930:	f002 0220 	and.w	r2, r2, #32
 8004934:	9205      	str	r2, [sp, #20]
 8004936:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004938:	9506      	str	r5, [sp, #24]
 800493a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	9306      	str	r3, [sp, #24]
 800494a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800494c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004950:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004952:	2302      	movs	r3, #2
 8004954:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004956:	2303      	movs	r3, #3
 8004958:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800495a:	2308      	movs	r3, #8
 800495c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800495e:	a907      	add	r1, sp, #28
 8004960:	481a      	ldr	r0, [pc, #104]	; (80049cc <HAL_UART_MspInit+0x1ec>)
 8004962:	f001 f955 	bl	8005c10 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004966:	481c      	ldr	r0, [pc, #112]	; (80049d8 <HAL_UART_MspInit+0x1f8>)
 8004968:	4b1c      	ldr	r3, [pc, #112]	; (80049dc <HAL_UART_MspInit+0x1fc>)
 800496a:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800496c:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8004970:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004972:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004974:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800497a:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800497c:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800497e:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004984:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004986:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004988:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800498a:	f000 ff59 	bl	8005840 <HAL_DMA_Init>
 800498e:	b958      	cbnz	r0, 80049a8 <HAL_UART_MspInit+0x1c8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004990:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <HAL_UART_MspInit+0x1f8>)
 8004992:	6363      	str	r3, [r4, #52]	; 0x34
 8004994:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8004996:	2200      	movs	r2, #0
 8004998:	2106      	movs	r1, #6
 800499a:	2047      	movs	r0, #71	; 0x47
 800499c:	f000 fe6a 	bl	8005674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80049a0:	2047      	movs	r0, #71	; 0x47
 80049a2:	f000 fe9b 	bl	80056dc <HAL_NVIC_EnableIRQ>
}
 80049a6:	e72f      	b.n	8004808 <HAL_UART_MspInit+0x28>
      Error_Handler();
 80049a8:	f7ff fa3c 	bl	8003e24 <Error_Handler>
 80049ac:	e7f0      	b.n	8004990 <HAL_UART_MspInit+0x1b0>
 80049ae:	bf00      	nop
 80049b0:	40011000 	.word	0x40011000
 80049b4:	40004400 	.word	0x40004400
 80049b8:	40011400 	.word	0x40011400
 80049bc:	40023800 	.word	0x40023800
 80049c0:	40020400 	.word	0x40020400
 80049c4:	200031d0 	.word	0x200031d0
 80049c8:	40026440 	.word	0x40026440
 80049cc:	40020000 	.word	0x40020000
 80049d0:	20003024 	.word	0x20003024
 80049d4:	40026088 	.word	0x40026088
 80049d8:	20003084 	.word	0x20003084
 80049dc:	40026428 	.word	0x40026428

080049e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049e0:	b510      	push	{r4, lr}
 80049e2:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;

  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80049e4:	2200      	movs	r2, #0
 80049e6:	4601      	mov	r1, r0
 80049e8:	2019      	movs	r0, #25
 80049ea:	f000 fe43 	bl	8005674 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80049ee:	2019      	movs	r0, #25
 80049f0:	f000 fe74 	bl	80056dc <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80049f4:	2400      	movs	r4, #0
 80049f6:	9401      	str	r4, [sp, #4]
 80049f8:	4b13      	ldr	r3, [pc, #76]	; (8004a48 <HAL_InitTick+0x68>)
 80049fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049fc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004a00:	645a      	str	r2, [r3, #68]	; 0x44
 8004a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a08:	9301      	str	r3, [sp, #4]
 8004a0a:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004a0c:	a902      	add	r1, sp, #8
 8004a0e:	a803      	add	r0, sp, #12
 8004a10:	f002 fb1c 	bl	800704c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004a14:	f002 fb0a 	bl	800702c <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <HAL_InitTick+0x6c>)
 8004a1a:	fba3 2300 	umull	r2, r3, r3, r0
 8004a1e:	0c9b      	lsrs	r3, r3, #18
 8004a20:	3b01      	subs	r3, #1

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8004a22:	480b      	ldr	r0, [pc, #44]	; (8004a50 <HAL_InitTick+0x70>)
 8004a24:	4a0b      	ldr	r2, [pc, #44]	; (8004a54 <HAL_InitTick+0x74>)
 8004a26:	6002      	str	r2, [r0, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8004a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a2c:	60c2      	str	r2, [r0, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8004a2e:	6043      	str	r3, [r0, #4]
  htim10.Init.ClockDivision = 0;
 8004a30:	6104      	str	r4, [r0, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a32:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8004a34:	f003 fa2a 	bl	8007e8c <HAL_TIM_Base_Init>
 8004a38:	b110      	cbz	r0, 8004a40 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
  }

  /* Return function status */
  return HAL_ERROR;
 8004a3a:	2001      	movs	r0, #1
}
 8004a3c:	b008      	add	sp, #32
 8004a3e:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim10);
 8004a40:	4803      	ldr	r0, [pc, #12]	; (8004a50 <HAL_InitTick+0x70>)
 8004a42:	f003 f903 	bl	8007c4c <HAL_TIM_Base_Start_IT>
 8004a46:	e7f9      	b.n	8004a3c <HAL_InitTick+0x5c>
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	431bde83 	.word	0x431bde83
 8004a50:	2000343c 	.word	0x2000343c
 8004a54:	40014400 	.word	0x40014400

08004a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004a5a:	f002 fb17 	bl	800708c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a5e:	bd08      	pop	{r3, pc}

08004a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a60:	e7fe      	b.n	8004a60 <HardFault_Handler>

08004a62 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a62:	e7fe      	b.n	8004a62 <MemManage_Handler>

08004a64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a64:	e7fe      	b.n	8004a64 <BusFault_Handler>

08004a66 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a66:	e7fe      	b.n	8004a66 <UsageFault_Handler>

08004a68 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a68:	4770      	bx	lr

08004a6a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004a6a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004a6c:	2002      	movs	r0, #2
 8004a6e:	f001 f9af 	bl	8005dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004a72:	bd08      	pop	{r3, pc}

08004a74 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004a74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004a76:	4802      	ldr	r0, [pc, #8]	; (8004a80 <DMA1_Stream5_IRQHandler+0xc>)
 8004a78:	f000 ffda 	bl	8005a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004a7c:	bd08      	pop	{r3, pc}
 8004a7e:	bf00      	nop
 8004a80:	20003024 	.word	0x20003024

08004a84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a86:	4803      	ldr	r0, [pc, #12]	; (8004a94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a88:	f003 f8f5 	bl	8007c76 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004a8c:	4802      	ldr	r0, [pc, #8]	; (8004a98 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004a8e:	f003 f8f2 	bl	8007c76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a92:	bd08      	pop	{r3, pc}
 8004a94:	200032d4 	.word	0x200032d4
 8004a98:	2000343c 	.word	0x2000343c

08004a9c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004a9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a9e:	4803      	ldr	r0, [pc, #12]	; (8004aac <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004aa0:	f003 f8e9 	bl	8007c76 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004aa4:	4802      	ldr	r0, [pc, #8]	; (8004ab0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004aa6:	f003 f8e6 	bl	8007c76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004aaa:	bd08      	pop	{r3, pc}
 8004aac:	200032d4 	.word	0x200032d4
 8004ab0:	20003270 	.word	0x20003270

08004ab4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ab4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_small_comm);
 8004ab6:	4802      	ldr	r0, [pc, #8]	; (8004ac0 <USART1_IRQHandler+0xc>)
 8004ab8:	f7fe ffe4 	bl	8003a84 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004abc:	bd08      	pop	{r3, pc}
 8004abe:	bf00      	nop
 8004ac0:	20002c04 	.word	0x20002c04

08004ac4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ac4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ac6:	4802      	ldr	r0, [pc, #8]	; (8004ad0 <USART2_IRQHandler+0xc>)
 8004ac8:	f003 febe 	bl	8008848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004acc:	bd08      	pop	{r3, pc}
 8004ace:	bf00      	nop
 8004ad0:	200033ec 	.word	0x200033ec

08004ad4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ad4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004ad6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004ada:	f001 f979 	bl	8005dd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004ade:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004ae2:	f001 f975 	bl	8005dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004ae6:	bd08      	pop	{r3, pc}

08004ae8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004ae8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_big_comm);
 8004aea:	4802      	ldr	r0, [pc, #8]	; (8004af4 <DMA2_Stream1_IRQHandler+0xc>)
 8004aec:	f7fe ffe0 	bl	8003ab0 <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004af0:	bd08      	pop	{r3, pc}
 8004af2:	bf00      	nop
 8004af4:	20002b50 	.word	0x20002b50

08004af8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004af8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_small_comm);
 8004afa:	4802      	ldr	r0, [pc, #8]	; (8004b04 <DMA2_Stream2_IRQHandler+0xc>)
 8004afc:	f7fe ffd8 	bl	8003ab0 <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004b00:	bd08      	pop	{r3, pc}
 8004b02:	bf00      	nop
 8004b04:	20002c04 	.word	0x20002c04

08004b08 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004b08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_big_comm);
 8004b0a:	4802      	ldr	r0, [pc, #8]	; (8004b14 <USART6_IRQHandler+0xc>)
 8004b0c:	f7fe ffba 	bl	8003a84 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004b10:	bd08      	pop	{r3, pc}
 8004b12:	bf00      	nop
 8004b14:	20002b50 	.word	0x20002b50

08004b18 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004b18:	b508      	push	{r3, lr}
 8004b1a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004b1c:	4a0b      	ldr	r2, [pc, #44]	; (8004b4c <_sbrk+0x34>)
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	b142      	cbz	r2, 8004b34 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8004b22:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <_sbrk+0x34>)
 8004b24:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004b26:	4403      	add	r3, r0
 8004b28:	466a      	mov	r2, sp
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d806      	bhi.n	8004b3c <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8004b2e:	4a07      	ldr	r2, [pc, #28]	; (8004b4c <_sbrk+0x34>)
 8004b30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8004b32:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8004b34:	4a05      	ldr	r2, [pc, #20]	; (8004b4c <_sbrk+0x34>)
 8004b36:	4906      	ldr	r1, [pc, #24]	; (8004b50 <_sbrk+0x38>)
 8004b38:	6011      	str	r1, [r2, #0]
 8004b3a:	e7f2      	b.n	8004b22 <_sbrk+0xa>
		errno = ENOMEM;
 8004b3c:	f007 f876 	bl	800bc2c <__errno>
 8004b40:	230c      	movs	r3, #12
 8004b42:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b48:	e7f3      	b.n	8004b32 <_sbrk+0x1a>
 8004b4a:	bf00      	nop
 8004b4c:	2000084c 	.word	0x2000084c
 8004b50:	20003510 	.word	0x20003510

08004b54 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <SystemInit+0x18>)
 8004b56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b5a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b66:	609a      	str	r2, [r3, #8]
#endif
}
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	e000ed00 	.word	0xe000ed00

08004b70 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8004b70:	b508      	push	{r3, lr}
	vTaskDelay(Time);
 8004b72:	f005 f889 	bl	8009c88 <vTaskDelay>
}
 8004b76:	bd08      	pop	{r3, pc}

08004b78 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8004b78:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8004b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b7e:	460a      	mov	r2, r1
 8004b80:	4601      	mov	r1, r0
 8004b82:	4802      	ldr	r0, [pc, #8]	; (8004b8c <nRF24_SendSpi+0x14>)
 8004b84:	6800      	ldr	r0, [r0, #0]
 8004b86:	f002 fd47 	bl	8007618 <HAL_SPI_Transmit>
}
 8004b8a:	bd08      	pop	{r3, pc}
 8004b8c:	2000085c 	.word	0x2000085c

08004b90 <nRF24_WriteRegister>:

	NRF24_CSN_HIGH;
}

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8004b90:	b500      	push	{lr}
 8004b92:	b083      	sub	sp, #12
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8004b94:	f040 0020 	orr.w	r0, r0, #32
 8004b98:	f88d 0004 	strb.w	r0, [sp, #4]
	tmp[1] = val;
 8004b9c:	f88d 1005 	strb.w	r1, [sp, #5]

	NRF24_CSN_LOW;
 8004ba0:	f7fe fbd0 	bl	8003344 <NRF_ChipSelect>

	nRF24_SendSpi(tmp, 2);
 8004ba4:	2102      	movs	r1, #2
 8004ba6:	a801      	add	r0, sp, #4
 8004ba8:	f7ff ffe6 	bl	8004b78 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8004bac:	f7fe fbdc 	bl	8003368 <NRF_ChipDeselect>
}
 8004bb0:	b003      	add	sp, #12
 8004bb2:	f85d fb04 	ldr.w	pc, [sp], #4

08004bb6 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8004bb6:	b570      	push	{r4, r5, r6, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	460d      	mov	r5, r1
 8004bbc:	4616      	mov	r6, r2
	reg = NRF24_CMD_W_REGISTER | reg;
 8004bbe:	f040 0020 	orr.w	r0, r0, #32
 8004bc2:	ac02      	add	r4, sp, #8
 8004bc4:	f804 0d01 	strb.w	r0, [r4, #-1]!

	NRF24_CSN_LOW;
 8004bc8:	f7fe fbbc 	bl	8003344 <NRF_ChipSelect>

	nRF24_SendSpi(&reg, 1);
 8004bcc:	2101      	movs	r1, #1
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f7ff ffd2 	bl	8004b78 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f7ff ffce 	bl	8004b78 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8004bdc:	f7fe fbc4 	bl	8003368 <NRF_ChipDeselect>
}
 8004be0:	b002      	add	sp, #8
 8004be2:	bd70      	pop	{r4, r5, r6, pc}

08004be4 <nRF24_ReadSpi>:
{
 8004be4:	b508      	push	{r3, lr}
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8004be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bea:	460a      	mov	r2, r1
 8004bec:	4601      	mov	r1, r0
 8004bee:	4802      	ldr	r0, [pc, #8]	; (8004bf8 <nRF24_ReadSpi+0x14>)
 8004bf0:	6800      	ldr	r0, [r0, #0]
 8004bf2:	f002 fef5 	bl	80079e0 <HAL_SPI_Receive>
}
 8004bf6:	bd08      	pop	{r3, pc}
 8004bf8:	2000085c 	.word	0x2000085c

08004bfc <nRF24_ReadRegister>:
{
 8004bfc:	b510      	push	{r4, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	ac04      	add	r4, sp, #16
 8004c02:	f804 0d09 	strb.w	r0, [r4, #-9]!
	NRF24_CSN_LOW;
 8004c06:	f7fe fb9d 	bl	8003344 <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f7ff ffb3 	bl	8004b78 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8004c12:	2101      	movs	r1, #1
 8004c14:	f10d 000f 	add.w	r0, sp, #15
 8004c18:	f7ff ffe4 	bl	8004be4 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8004c1c:	f7fe fba4 	bl	8003368 <NRF_ChipDeselect>
}
 8004c20:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8004c24:	b004      	add	sp, #16
 8004c26:	bd10      	pop	{r4, pc}

08004c28 <nRF24_ReadRegisters>:
{
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	460d      	mov	r5, r1
 8004c2e:	4616      	mov	r6, r2
 8004c30:	ac02      	add	r4, sp, #8
 8004c32:	f804 0d01 	strb.w	r0, [r4, #-1]!
	NRF24_CSN_LOW;
 8004c36:	f7fe fb85 	bl	8003344 <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f7ff ff9b 	bl	8004b78 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8004c42:	4631      	mov	r1, r6
 8004c44:	4628      	mov	r0, r5
 8004c46:	f7ff ffcd 	bl	8004be4 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8004c4a:	f7fe fb8d 	bl	8003368 <NRF_ChipDeselect>
}
 8004c4e:	b002      	add	sp, #8
 8004c50:	bd70      	pop	{r4, r5, r6, pc}

08004c52 <nRF24_ReadConfig>:

	nRF24_Delay_ms(1);
}

uint8_t nRF24_ReadConfig(void)
{
 8004c52:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8004c54:	2000      	movs	r0, #0
 8004c56:	f7ff ffd1 	bl	8004bfc <nRF24_ReadRegister>
}
 8004c5a:	bd08      	pop	{r3, pc}

08004c5c <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8004c5c:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8004c5e:	4601      	mov	r1, r0
 8004c60:	2000      	movs	r0, #0
 8004c62:	f7ff ff95 	bl	8004b90 <nRF24_WriteRegister>
}
 8004c66:	bd08      	pop	{r3, pc}

08004c68 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8004c68:	b510      	push	{r4, lr}
 8004c6a:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8004c6c:	2006      	movs	r0, #6
 8004c6e:	f7ff ffc5 	bl	8004bfc <nRF24_ReadRegister>
	rf_setup &= 0xF8; // Clear PWR bits
 8004c72:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	rf_setup |= (lev<<1);
 8004c76:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8004c7a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8004c7e:	2006      	movs	r0, #6
 8004c80:	f7ff ff86 	bl	8004b90 <nRF24_WriteRegister>
}
 8004c84:	bd10      	pop	{r4, pc}

08004c86 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8004c86:	b510      	push	{r4, lr}
 8004c88:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8004c8a:	2006      	movs	r0, #6
 8004c8c:	f7ff ffb6 	bl	8004bfc <nRF24_ReadRegister>
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8004c90:	f000 01d7 	and.w	r1, r0, #215	; 0xd7
	if(dr == NRF24_RF_DR_250KBPS)
 8004c94:	2c02      	cmp	r4, #2
 8004c96:	d005      	beq.n	8004ca4 <nRF24_SetDataRate+0x1e>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
	else if(dr == NRF24_RF_DR_2MBPS)
 8004c98:	2c01      	cmp	r4, #1
 8004c9a:	d006      	beq.n	8004caa <nRF24_SetDataRate+0x24>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8004c9c:	2006      	movs	r0, #6
 8004c9e:	f7ff ff77 	bl	8004b90 <nRF24_WriteRegister>
}
 8004ca2:	bd10      	pop	{r4, pc}
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8004ca4:	f041 0120 	orr.w	r1, r1, #32
 8004ca8:	e7f8      	b.n	8004c9c <nRF24_SetDataRate+0x16>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8004caa:	f041 0108 	orr.w	r1, r1, #8
 8004cae:	e7f5      	b.n	8004c9c <nRF24_SetDataRate+0x16>

08004cb0 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8004cb0:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_STATUS));
 8004cb2:	2007      	movs	r0, #7
 8004cb4:	f7ff ffa2 	bl	8004bfc <nRF24_ReadRegister>
}
 8004cb8:	bd08      	pop	{r3, pc}

08004cba <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8004cba:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_STATUS, st);
 8004cbc:	4601      	mov	r1, r0
 8004cbe:	2007      	movs	r0, #7
 8004cc0:	f7ff ff66 	bl	8004b90 <nRF24_WriteRegister>
}
 8004cc4:	bd08      	pop	{r3, pc}

08004cc6 <nRF24_ReadFifoStatus>:
//
// FIFO Status
//

uint8_t nRF24_ReadFifoStatus(void)
{
 8004cc6:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 8004cc8:	2017      	movs	r0, #23
 8004cca:	f7ff ff97 	bl	8004bfc <nRF24_ReadRegister>
}
 8004cce:	bd08      	pop	{r3, pc}

08004cd0 <nRF24_IsBitSetInFifoStatus>:
{
	nRF24_WriteRegister(NRF24_FIFO_STATUS, st);
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8004cd0:	b510      	push	{r4, lr}
 8004cd2:	4604      	mov	r4, r0
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8004cd4:	f7ff fff7 	bl	8004cc6 <nRF24_ReadFifoStatus>

	if(FifoStatus & (1<<Bit))
 8004cd8:	4120      	asrs	r0, r4
 8004cda:	f010 0f01 	tst.w	r0, #1
 8004cde:	d101      	bne.n	8004ce4 <nRF24_IsBitSetInFifoStatus+0x14>
	{
		return 1;
	}

	return 0;
 8004ce0:	2000      	movs	r0, #0
}
 8004ce2:	bd10      	pop	{r4, pc}
		return 1;
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	e7fc      	b.n	8004ce2 <nRF24_IsBitSetInFifoStatus+0x12>

08004ce8 <nRF24_IsRxEmpty>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_FULL);
}

uint8_t nRF24_IsRxEmpty(void)
{
 8004ce8:	b508      	push	{r3, lr}
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
 8004cea:	2000      	movs	r0, #0
 8004cec:	f7ff fff0 	bl	8004cd0 <nRF24_IsBitSetInFifoStatus>
}
 8004cf0:	bd08      	pop	{r3, pc}

08004cf2 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8004cf2:	b510      	push	{r4, lr}
 8004cf4:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8004cf6:	ac02      	add	r4, sp, #8
 8004cf8:	23e2      	movs	r3, #226	; 0xe2
 8004cfa:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8004cfe:	f7fe fb21 	bl	8003344 <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8004d02:	2101      	movs	r1, #1
 8004d04:	4620      	mov	r0, r4
 8004d06:	f7ff ff37 	bl	8004b78 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8004d0a:	f7fe fb2d 	bl	8003368 <NRF_ChipDeselect>
}
 8004d0e:	b002      	add	sp, #8
 8004d10:	bd10      	pop	{r4, pc}

08004d12 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8004d12:	b510      	push	{r4, lr}
 8004d14:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8004d16:	ac02      	add	r4, sp, #8
 8004d18:	23e1      	movs	r3, #225	; 0xe1
 8004d1a:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8004d1e:	f7fe fb11 	bl	8003344 <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8004d22:	2101      	movs	r1, #1
 8004d24:	4620      	mov	r0, r4
 8004d26:	f7ff ff27 	bl	8004b78 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8004d2a:	f7fe fb1d 	bl	8003368 <NRF_ChipDeselect>
}
 8004d2e:	b002      	add	sp, #8
 8004d30:	bd10      	pop	{r4, pc}
	...

08004d34 <nRF24_TX_Mode>:
{
 8004d34:	b508      	push	{r3, lr}
	NRF24_CE_LOW;
 8004d36:	2200      	movs	r2, #0
 8004d38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d3c:	480a      	ldr	r0, [pc, #40]	; (8004d68 <nRF24_TX_Mode+0x34>)
 8004d3e:	f001 f840 	bl	8005dc2 <HAL_GPIO_WritePin>
	uint8_t config = nRF24_ReadConfig();
 8004d42:	f7ff ff86 	bl	8004c52 <nRF24_ReadConfig>
 8004d46:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	nRF24_WriteConfig(config);
 8004d4a:	f040 0002 	orr.w	r0, r0, #2
 8004d4e:	f7ff ff85 	bl	8004c5c <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8004d52:	2070      	movs	r0, #112	; 0x70
 8004d54:	f7ff ffb1 	bl	8004cba <nRF24_WriteStatus>
	nRF24_FlushRX();
 8004d58:	f7ff ffcb 	bl	8004cf2 <nRF24_FlushRX>
	nRF24_FlushTX();
 8004d5c:	f7ff ffd9 	bl	8004d12 <nRF24_FlushTX>
	nRF24_Delay_ms(1);
 8004d60:	2001      	movs	r0, #1
 8004d62:	f7ff ff05 	bl	8004b70 <nRF24_Delay_ms>
}
 8004d66:	bd08      	pop	{r3, pc}
 8004d68:	40020400 	.word	0x40020400

08004d6c <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8004d6c:	b510      	push	{r4, lr}
 8004d6e:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004d70:	f7ff ff6f 	bl	8004c52 <nRF24_ReadConfig>

	if(onoff)
 8004d74:	b924      	cbnz	r4, 8004d80 <nRF24_EnableCRC+0x14>
		config |= (1<<NRF24_EN_CRC);
	else
		config &= ~(1<<NRF24_EN_CRC);
 8004d76:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
	nRF24_WriteConfig(config);
 8004d7a:	f7ff ff6f 	bl	8004c5c <nRF24_WriteConfig>
}
 8004d7e:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_EN_CRC);
 8004d80:	f040 0008 	orr.w	r0, r0, #8
 8004d84:	b2c0      	uxtb	r0, r0
 8004d86:	e7f8      	b.n	8004d7a <nRF24_EnableCRC+0xe>

08004d88 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004d8c:	f7ff ff61 	bl	8004c52 <nRF24_ReadConfig>
	if(crcl == NRF24_CRC_WIDTH_2B)
 8004d90:	2c01      	cmp	r4, #1
 8004d92:	d004      	beq.n	8004d9e <nRF24_SetCRCLength+0x16>
		config |= (1<<NRF24_CRCO);
	else
		config &= ~(1<<NRF24_CRCO);
 8004d94:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
	nRF24_WriteConfig(config);
 8004d98:	f7ff ff60 	bl	8004c5c <nRF24_WriteConfig>
}
 8004d9c:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_CRCO);
 8004d9e:	f040 0004 	orr.w	r0, r0, #4
 8004da2:	b2c0      	uxtb	r0, r0
 8004da4:	e7f8      	b.n	8004d98 <nRF24_SetCRCLength+0x10>

08004da6 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8004da6:	b508      	push	{r3, lr}
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8004da8:	f001 010f 	and.w	r1, r1, #15
 8004dac:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8004db0:	b2c9      	uxtb	r1, r1
 8004db2:	2004      	movs	r0, #4
 8004db4:	f7ff feec 	bl	8004b90 <nRF24_WriteRegister>
}
 8004db8:	bd08      	pop	{r3, pc}

08004dba <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8004dba:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8004dbc:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8004dc0:	2005      	movs	r0, #5
 8004dc2:	f7ff fee5 	bl	8004b90 <nRF24_WriteRegister>
}
 8004dc6:	bd08      	pop	{r3, pc}

08004dc8 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4604      	mov	r4, r0
 8004dcc:	460d      	mov	r5, r1
	if(pipe > 5)
 8004dce:	2805      	cmp	r0, #5
 8004dd0:	d900      	bls.n	8004dd4 <nRF24_EnablePipe+0xc>
		pipe = 5; // Block too high pipe number
 8004dd2:	2405      	movs	r4, #5
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8004dd4:	2002      	movs	r0, #2
 8004dd6:	f7ff ff11 	bl	8004bfc <nRF24_ReadRegister>
	if(onoff == 1)
 8004dda:	2d01      	cmp	r5, #1
 8004ddc:	d008      	beq.n	8004df0 <nRF24_EnablePipe+0x28>
		enable_pipe |= (1<<pipe);
	else
		enable_pipe &= ~(1<<pipe);
 8004dde:	2101      	movs	r1, #1
 8004de0:	40a1      	lsls	r1, r4
 8004de2:	ea20 0101 	bic.w	r1, r0, r1
 8004de6:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8004de8:	2002      	movs	r0, #2
 8004dea:	f7ff fed1 	bl	8004b90 <nRF24_WriteRegister>
}
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
		enable_pipe |= (1<<pipe);
 8004df0:	2101      	movs	r1, #1
 8004df2:	40a1      	lsls	r1, r4
 8004df4:	4301      	orrs	r1, r0
 8004df6:	b2c9      	uxtb	r1, r1
 8004df8:	e7f6      	b.n	8004de8 <nRF24_EnablePipe+0x20>

08004dfa <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8004dfa:	b538      	push	{r3, r4, r5, lr}
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	460d      	mov	r5, r1
	if(pipe > 5)
 8004e00:	2805      	cmp	r0, #5
 8004e02:	d900      	bls.n	8004e06 <nRF24_AutoACK+0xc>
		pipe = 5; // Block too high pipe number
 8004e04:	2405      	movs	r4, #5
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8004e06:	2001      	movs	r0, #1
 8004e08:	f7ff fef8 	bl	8004bfc <nRF24_ReadRegister>
	if(onoff == 1)
 8004e0c:	2d01      	cmp	r5, #1
 8004e0e:	d008      	beq.n	8004e22 <nRF24_AutoACK+0x28>
		enaa |= (1<<pipe);
	else
		enaa &= ~(1<<pipe);
 8004e10:	2101      	movs	r1, #1
 8004e12:	40a1      	lsls	r1, r4
 8004e14:	ea20 0101 	bic.w	r1, r0, r1
 8004e18:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	f7ff feb8 	bl	8004b90 <nRF24_WriteRegister>
}
 8004e20:	bd38      	pop	{r3, r4, r5, pc}
		enaa |= (1<<pipe);
 8004e22:	2101      	movs	r1, #1
 8004e24:	40a1      	lsls	r1, r4
 8004e26:	4301      	orrs	r1, r0
 8004e28:	b2c9      	uxtb	r1, r1
 8004e2a:	e7f6      	b.n	8004e1a <nRF24_AutoACK+0x20>

08004e2c <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8004e2c:	b508      	push	{r3, lr}
	if(size > 5)
 8004e2e:	2805      	cmp	r0, #5
 8004e30:	d803      	bhi.n	8004e3a <nRF24_SetAddressWidth+0xe>
		size = 5; // Maximum are 5 bytes
	if(size < 3)
 8004e32:	2802      	cmp	r0, #2
 8004e34:	d802      	bhi.n	8004e3c <nRF24_SetAddressWidth+0x10>
		size = 3; // Minimum are 3 bytes
 8004e36:	2003      	movs	r0, #3
 8004e38:	e000      	b.n	8004e3c <nRF24_SetAddressWidth+0x10>
		size = 5; // Maximum are 5 bytes
 8004e3a:	2005      	movs	r0, #5
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8004e3c:	1e81      	subs	r1, r0, #2
 8004e3e:	f001 0103 	and.w	r1, r1, #3
 8004e42:	2003      	movs	r0, #3
 8004e44:	f7ff fea4 	bl	8004b90 <nRF24_WriteRegister>
}
 8004e48:	bd08      	pop	{r3, pc}

08004e4a <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8004e4a:	b510      	push	{r4, lr}
 8004e4c:	b082      	sub	sp, #8
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8004e4e:	2801      	cmp	r0, #1
 8004e50:	d815      	bhi.n	8004e7e <nRF24_SetRXAddress+0x34>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004e52:	2300      	movs	r3, #0
 8004e54:	e009      	b.n	8004e6a <nRF24_SetRXAddress+0x20>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8004e56:	f1c3 0204 	rsb	r2, r3, #4
 8004e5a:	5ccc      	ldrb	r4, [r1, r3]
 8004e5c:	f10d 0c08 	add.w	ip, sp, #8
 8004e60:	4462      	add	r2, ip
 8004e62:	f802 4c08 	strb.w	r4, [r2, #-8]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004e66:	3301      	adds	r3, #1
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d9f3      	bls.n	8004e56 <nRF24_SetRXAddress+0xc>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8004e6e:	300a      	adds	r0, #10
 8004e70:	2205      	movs	r2, #5
 8004e72:	4669      	mov	r1, sp
 8004e74:	b2c0      	uxtb	r0, r0
 8004e76:	f7ff fe9e 	bl	8004bb6 <nRF24_WriteRegisters>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
}
 8004e7a:	b002      	add	sp, #8
 8004e7c:	bd10      	pop	{r4, pc}
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8004e7e:	300a      	adds	r0, #10
 8004e80:	7909      	ldrb	r1, [r1, #4]
 8004e82:	b2c0      	uxtb	r0, r0
 8004e84:	f7ff fe84 	bl	8004b90 <nRF24_WriteRegister>
}
 8004e88:	e7f7      	b.n	8004e7a <nRF24_SetRXAddress+0x30>
	...

08004e8c <nRF24_RX_Mode>:
{
 8004e8c:	b510      	push	{r4, lr}
	uint8_t config = nRF24_ReadConfig();
 8004e8e:	f7ff fee0 	bl	8004c52 <nRF24_ReadConfig>
 8004e92:	4604      	mov	r4, r0
	nRF24_SetRXAddress(0, addr_p0_backup);
 8004e94:	490c      	ldr	r1, [pc, #48]	; (8004ec8 <nRF24_RX_Mode+0x3c>)
 8004e96:	2000      	movs	r0, #0
 8004e98:	f7ff ffd7 	bl	8004e4a <nRF24_SetRXAddress>
	config |= (1<<NRF24_PRIM_RX);
 8004e9c:	f044 0003 	orr.w	r0, r4, #3
	nRF24_WriteConfig(config);
 8004ea0:	b2c0      	uxtb	r0, r0
 8004ea2:	f7ff fedb 	bl	8004c5c <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8004ea6:	2070      	movs	r0, #112	; 0x70
 8004ea8:	f7ff ff07 	bl	8004cba <nRF24_WriteStatus>
	nRF24_FlushRX();
 8004eac:	f7ff ff21 	bl	8004cf2 <nRF24_FlushRX>
	nRF24_FlushTX();
 8004eb0:	f7ff ff2f 	bl	8004d12 <nRF24_FlushTX>
	NRF24_CE_HIGH;
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eba:	4804      	ldr	r0, [pc, #16]	; (8004ecc <nRF24_RX_Mode+0x40>)
 8004ebc:	f000 ff81 	bl	8005dc2 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	f7ff fe55 	bl	8004b70 <nRF24_Delay_ms>
}
 8004ec6:	bd10      	pop	{r4, pc}
 8004ec8:	20000854 	.word	0x20000854
 8004ecc:	40020400 	.word	0x40020400

08004ed0 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	4604      	mov	r4, r0
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8004ed6:	2205      	movs	r2, #5
 8004ed8:	4669      	mov	r1, sp
 8004eda:	200a      	movs	r0, #10
 8004edc:	f7ff fea4 	bl	8004c28 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e009      	b.n	8004ef8 <nRF24_SetTXAddress+0x28>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8004ee4:	f1c3 0204 	rsb	r2, r3, #4
 8004ee8:	a902      	add	r1, sp, #8
 8004eea:	4419      	add	r1, r3
 8004eec:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8004ef0:	490f      	ldr	r1, [pc, #60]	; (8004f30 <nRF24_SetTXAddress+0x60>)
 8004ef2:	5488      	strb	r0, [r1, r2]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d9f3      	bls.n	8004ee4 <nRF24_SetTXAddress+0x14>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004efc:	2300      	movs	r3, #0
 8004efe:	e008      	b.n	8004f12 <nRF24_SetTXAddress+0x42>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8004f00:	f1c3 0204 	rsb	r2, r3, #4
 8004f04:	5ce1      	ldrb	r1, [r4, r3]
 8004f06:	a802      	add	r0, sp, #8
 8004f08:	4402      	add	r2, r0
 8004f0a:	f802 1c08 	strb.w	r1, [r2, #-8]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004f0e:	3301      	adds	r3, #1
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d9f4      	bls.n	8004f00 <nRF24_SetTXAddress+0x30>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8004f16:	2205      	movs	r2, #5
 8004f18:	4669      	mov	r1, sp
 8004f1a:	200a      	movs	r0, #10
 8004f1c:	f7ff fe4b 	bl	8004bb6 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8004f20:	2205      	movs	r2, #5
 8004f22:	4669      	mov	r1, sp
 8004f24:	2010      	movs	r0, #16
 8004f26:	f7ff fe46 	bl	8004bb6 <nRF24_WriteRegisters>
}
 8004f2a:	b002      	add	sp, #8
 8004f2c:	bd10      	pop	{r4, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000854 	.word	0x20000854

08004f34 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8004f34:	b508      	push	{r3, lr}
	uint8_t status = nRF24_ReadStatus();
 8004f36:	f7ff febb 	bl	8004cb0 <nRF24_ReadStatus>
	status |= (7<<4); // Clear bits 4, 5, 6.
 8004f3a:	f040 0070 	orr.w	r0, r0, #112	; 0x70
	nRF24_WriteStatus(status);
 8004f3e:	b2c0      	uxtb	r0, r0
 8004f40:	f7ff febb 	bl	8004cba <nRF24_WriteStatus>
}
 8004f44:	bd08      	pop	{r3, pc}

08004f46 <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8004f46:	b508      	push	{r3, lr}
    uint8_t result = 0;

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8004f48:	2060      	movs	r0, #96	; 0x60
 8004f4a:	f7ff fe57 	bl	8004bfc <nRF24_ReadRegister>

    if (result > 32) // Something went wrong :)
 8004f4e:	2820      	cmp	r0, #32
 8004f50:	d800      	bhi.n	8004f54 <nRF24_GetDynamicPayloadSize+0xe>
        nRF24_FlushRX();
        nRF24_Delay_ms(2);
        return 0;
    }
    return result;
}
 8004f52:	bd08      	pop	{r3, pc}
        nRF24_FlushRX();
 8004f54:	f7ff fecd 	bl	8004cf2 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8004f58:	2002      	movs	r0, #2
 8004f5a:	f7ff fe09 	bl	8004b70 <nRF24_Delay_ms>
        return 0;
 8004f5e:	2000      	movs	r0, #0
 8004f60:	e7f7      	b.n	8004f52 <nRF24_GetDynamicPayloadSize+0xc>

08004f62 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8004f62:	b510      	push	{r4, lr}
 8004f64:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004f66:	f7ff fe74 	bl	8004c52 <nRF24_ReadConfig>

	if(!onoff)
 8004f6a:	b124      	cbz	r4, 8004f76 <nRF24_EnableRXDataReadyIRQ+0x14>
		config |= (1<<NRF24_RX_DR);
	else
		config &= ~(1<<NRF24_RX_DR);
 8004f6c:	f000 00bf 	and.w	r0, r0, #191	; 0xbf

	nRF24_WriteConfig(config);
 8004f70:	f7ff fe74 	bl	8004c5c <nRF24_WriteConfig>
}
 8004f74:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_RX_DR);
 8004f76:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004f7a:	b2c0      	uxtb	r0, r0
 8004f7c:	e7f8      	b.n	8004f70 <nRF24_EnableRXDataReadyIRQ+0xe>

08004f7e <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8004f7e:	b510      	push	{r4, lr}
 8004f80:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004f82:	f7ff fe66 	bl	8004c52 <nRF24_ReadConfig>

	if(!onoff)
 8004f86:	b124      	cbz	r4, 8004f92 <nRF24_EnableTXDataSentIRQ+0x14>
		config |= (1<<NRF24_TX_DS);
	else
		config &= ~(1<<NRF24_TX_DS);
 8004f88:	f000 00df 	and.w	r0, r0, #223	; 0xdf

	nRF24_WriteConfig(config);
 8004f8c:	f7ff fe66 	bl	8004c5c <nRF24_WriteConfig>
}
 8004f90:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_TX_DS);
 8004f92:	f040 0020 	orr.w	r0, r0, #32
 8004f96:	b2c0      	uxtb	r0, r0
 8004f98:	e7f8      	b.n	8004f8c <nRF24_EnableTXDataSentIRQ+0xe>

08004f9a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8004f9a:	b510      	push	{r4, lr}
 8004f9c:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004f9e:	f7ff fe58 	bl	8004c52 <nRF24_ReadConfig>

	if(!onoff)
 8004fa2:	b124      	cbz	r4, 8004fae <nRF24_EnableMaxRetransmitIRQ+0x14>
		config |= (1<<NRF24_MAX_RT);
	else
		config &= ~(1<<NRF24_MAX_RT);
 8004fa4:	f000 00ef 	and.w	r0, r0, #239	; 0xef

	nRF24_WriteConfig(config);
 8004fa8:	f7ff fe58 	bl	8004c5c <nRF24_WriteConfig>
}
 8004fac:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_MAX_RT);
 8004fae:	f040 0010 	orr.w	r0, r0, #16
 8004fb2:	b2c0      	uxtb	r0, r0
 8004fb4:	e7f8      	b.n	8004fa8 <nRF24_EnableMaxRetransmitIRQ+0xe>

08004fb6 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8004fb6:	b508      	push	{r3, lr}
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8004fb8:	460a      	mov	r2, r1
 8004fba:	4601      	mov	r1, r0
 8004fbc:	20a0      	movs	r0, #160	; 0xa0
 8004fbe:	f7ff fdfa 	bl	8004bb6 <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 8004fc2:	bd08      	pop	{r3, pc}

08004fc4 <nRF24_ReadRXPaylaod>:
		status = nRF24_ReadStatus();
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	460d      	mov	r5, r1
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8004fca:	f7ff ffbc 	bl	8004f46 <nRF24_GetDynamicPayloadSize>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	7028      	strb	r0, [r5, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	2061      	movs	r0, #97	; 0x61
 8004fd6:	f7ff fe27 	bl	8004c28 <nRF24_ReadRegisters>
#else
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 8004fda:	2101      	movs	r1, #1
 8004fdc:	2007      	movs	r0, #7
 8004fde:	f7ff fdd7 	bl	8004b90 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 8004fe2:	f7ff fe65 	bl	8004cb0 <nRF24_ReadStatus>
 8004fe6:	f010 0f20 	tst.w	r0, #32
 8004fea:	d100      	bne.n	8004fee <nRF24_ReadRXPaylaod+0x2a>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8004fec:	bd38      	pop	{r3, r4, r5, pc}
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8004fee:	2120      	movs	r1, #32
 8004ff0:	2007      	movs	r0, #7
 8004ff2:	f7ff fdcd 	bl	8004b90 <nRF24_WriteRegister>
}
 8004ff6:	e7f9      	b.n	8004fec <nRF24_ReadRXPaylaod+0x28>

08004ff8 <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
	if(Size > 32)
 8004ff8:	2920      	cmp	r1, #32
 8004ffa:	d901      	bls.n	8005000 <nRF24_SendPacket+0x8>
		return NRF24_NO_TRANSMITTED_PACKET;
 8004ffc:	2001      	movs	r0, #1
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_WaitTX();
#endif

	return NRF24_TRANSMITTED_PACKET;
}
 8004ffe:	4770      	bx	lr
{
 8005000:	b508      	push	{r3, lr}
	nRF24_WriteTXPayload(Data, Size);
 8005002:	f7ff ffd8 	bl	8004fb6 <nRF24_WriteTXPayload>
	return NRF24_TRANSMITTED_PACKET;
 8005006:	2000      	movs	r0, #0
}
 8005008:	bd08      	pop	{r3, pc}
	...

0800500c <nRF24_IsSomtehingToSend>:
{
	return RB_ElementsAvailable(&RXBuffer)?1:0;
}

uint8_t nRF24_IsSomtehingToSend(void)
{
 800500c:	b508      	push	{r3, lr}
	return RB_ElementsAvailable(&TXBuffer)?1:0;
 800500e:	4803      	ldr	r0, [pc, #12]	; (800501c <nRF24_IsSomtehingToSend+0x10>)
 8005010:	f7fd fb25 	bl	800265e <RB_ElementsAvailable>
}
 8005014:	3000      	adds	r0, #0
 8005016:	bf18      	it	ne
 8005018:	2001      	movne	r0, #1
 800501a:	bd08      	pop	{r3, pc}
 800501c:	2000347c 	.word	0x2000347c

08005020 <nRF24_ReceivePacket>:
	return nRF24_IsSomtehingToRead();
#endif
}

nRF24_RX_Status nRF24_ReceivePacket(uint8_t* Data, uint8_t *Size)
{
 8005020:	b508      	push	{r3, lr}
#if (NRF24_USE_INTERRUPT == 0)
	if(nRF24_RXAvailable())
	{
#endif
		nRF24_ReadRXPaylaod(Data, Size);
 8005022:	f7ff ffcf 	bl	8004fc4 <nRF24_ReadRXPaylaod>
#if (NRF24_USE_INTERRUPT == 0)
	}
	return NRF24_NO_RECEIVED_PACKET;
#endif

}
 8005026:	2000      	movs	r0, #0
 8005028:	bd08      	pop	{r3, pc}
	...

0800502c <nRF24_CheckTXAndSend>:
	return NRF24_TRANSMITTED_PACKET;
#endif
}
#if (NRF24_USE_RINGBUFFER == 1)
void nRF24_CheckTXAndSend(void)
{
 800502c:	b530      	push	{r4, r5, lr}
 800502e:	b089      	sub	sp, #36	; 0x24
	uint8_t i, DataCounter;
	uint8_t TXPacket[32];

	if(nRF24_IsSomtehingToSend() && Nrf24TXFreeFlag)
 8005030:	f7ff ffec 	bl	800500c <nRF24_IsSomtehingToSend>
 8005034:	b110      	cbz	r0, 800503c <nRF24_CheckTXAndSend+0x10>
 8005036:	4b19      	ldr	r3, [pc, #100]	; (800509c <nRF24_CheckTXAndSend+0x70>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	b91b      	cbnz	r3, 8005044 <nRF24_CheckTXAndSend+0x18>
		nRF24_SendPacket(TXPacket, DataCounter);
		NRF24_CE_HIGH;
		nRF24_Delay_ms(1);
		NRF24_CE_LOW;
	}else{
		nRF24_RX_Mode();
 800503c:	f7ff ff26 	bl	8004e8c <nRF24_RX_Mode>
	}
}
 8005040:	b009      	add	sp, #36	; 0x24
 8005042:	bd30      	pop	{r4, r5, pc}
		nRF24_TX_Mode();
 8005044:	f7ff fe76 	bl	8004d34 <nRF24_TX_Mode>
		Nrf24TXFreeFlag = 0;
 8005048:	4b14      	ldr	r3, [pc, #80]	; (800509c <nRF24_CheckTXAndSend+0x70>)
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
		DataCounter = RB_ElementsAvailable(&TXBuffer);
 800504e:	4814      	ldr	r0, [pc, #80]	; (80050a0 <nRF24_CheckTXAndSend+0x74>)
 8005050:	f7fd fb05 	bl	800265e <RB_ElementsAvailable>
 8005054:	4605      	mov	r5, r0
		if(DataCounter > 32)
 8005056:	2820      	cmp	r0, #32
 8005058:	d900      	bls.n	800505c <nRF24_CheckTXAndSend+0x30>
			DataCounter = 32; // Max Payload
 800505a:	2520      	movs	r5, #32
		for(i = 0; i < DataCounter; i++)
 800505c:	2400      	movs	r4, #0
 800505e:	e006      	b.n	800506e <nRF24_CheckTXAndSend+0x42>
			RB_ReadFromBuffer(&TXBuffer, &TXPacket[i]);
 8005060:	eb0d 0104 	add.w	r1, sp, r4
 8005064:	480e      	ldr	r0, [pc, #56]	; (80050a0 <nRF24_CheckTXAndSend+0x74>)
 8005066:	f7fd fae3 	bl	8002630 <RB_ReadFromBuffer>
		for(i = 0; i < DataCounter; i++)
 800506a:	3401      	adds	r4, #1
 800506c:	b2e4      	uxtb	r4, r4
 800506e:	42ac      	cmp	r4, r5
 8005070:	d3f6      	bcc.n	8005060 <nRF24_CheckTXAndSend+0x34>
		nRF24_SendPacket(TXPacket, DataCounter);
 8005072:	4629      	mov	r1, r5
 8005074:	4668      	mov	r0, sp
 8005076:	f7ff ffbf 	bl	8004ff8 <nRF24_SendPacket>
		NRF24_CE_HIGH;
 800507a:	4c0a      	ldr	r4, [pc, #40]	; (80050a4 <nRF24_CheckTXAndSend+0x78>)
 800507c:	2201      	movs	r2, #1
 800507e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005082:	4620      	mov	r0, r4
 8005084:	f000 fe9d 	bl	8005dc2 <HAL_GPIO_WritePin>
		nRF24_Delay_ms(1);
 8005088:	2001      	movs	r0, #1
 800508a:	f7ff fd71 	bl	8004b70 <nRF24_Delay_ms>
		NRF24_CE_LOW;
 800508e:	2200      	movs	r2, #0
 8005090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005094:	4620      	mov	r0, r4
 8005096:	f000 fe94 	bl	8005dc2 <HAL_GPIO_WritePin>
 800509a:	e7d1      	b.n	8005040 <nRF24_CheckTXAndSend+0x14>
 800509c:	20000851 	.word	0x20000851
 80050a0:	2000347c 	.word	0x2000347c
 80050a4:	40020400 	.word	0x40020400

080050a8 <nRF24_ReceiveData>:
#endif
#if (NRF24_USE_INTERRUPT == 1)
void nRF24_ReceiveData(void)
{
 80050a8:	b510      	push	{r4, lr}
 80050aa:	b08a      	sub	sp, #40	; 0x28
 80050ac:	e00f      	b.n	80050ce <nRF24_ReceiveData+0x26>
	{
		nRF24_ReceivePacket(RXPacket, &DataCounter);

		for(i = 0; i < DataCounter; i++)
		{
			RB_WriteToBuffer(&RXBuffer, RXPacket[i]);
 80050ae:	ab0a      	add	r3, sp, #40	; 0x28
 80050b0:	4423      	add	r3, r4
 80050b2:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 80050b6:	480a      	ldr	r0, [pc, #40]	; (80050e0 <nRF24_ReceiveData+0x38>)
 80050b8:	f7fd fa9d 	bl	80025f6 <RB_WriteToBuffer>
		for(i = 0; i < DataCounter; i++)
 80050bc:	3401      	adds	r4, #1
 80050be:	b2e4      	uxtb	r4, r4
 80050c0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80050c4:	42a3      	cmp	r3, r4
 80050c6:	d8f2      	bhi.n	80050ae <nRF24_ReceiveData+0x6>
		}

	}while(!nRF24_IsRxEmpty());
 80050c8:	f7ff fe0e 	bl	8004ce8 <nRF24_IsRxEmpty>
 80050cc:	b930      	cbnz	r0, 80050dc <nRF24_ReceiveData+0x34>
		nRF24_ReceivePacket(RXPacket, &DataCounter);
 80050ce:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80050d2:	a801      	add	r0, sp, #4
 80050d4:	f7ff ffa4 	bl	8005020 <nRF24_ReceivePacket>
		for(i = 0; i < DataCounter; i++)
 80050d8:	2400      	movs	r4, #0
 80050da:	e7f1      	b.n	80050c0 <nRF24_ReceiveData+0x18>
#endif
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_ReceivePacket(RXBuffer, &RXDataCounter);
#endif
}
 80050dc:	b00a      	add	sp, #40	; 0x28
 80050de:	bd10      	pop	{r4, pc}
 80050e0:	200034a0 	.word	0x200034a0

080050e4 <nRF24_IRQ_Read>:
{
	Nrf24InterruptFlag = 1;
}

void nRF24_IRQ_Read(void)
{
 80050e4:	b508      	push	{r3, lr}
	if(Nrf24InterruptFlag == 1)
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <nRF24_IRQ_Read+0x54>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d000      	beq.n	80050f2 <nRF24_IRQ_Read+0xe>
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
		}

		nRF24_WriteStatus(ClearIrq);
	}
}
 80050f0:	bd08      	pop	{r3, pc}
		Nrf24InterruptFlag = 0;
 80050f2:	4b11      	ldr	r3, [pc, #68]	; (8005138 <nRF24_IRQ_Read+0x54>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
		uint8_t status = nRF24_ReadStatus();
 80050f8:	f7ff fdda 	bl	8004cb0 <nRF24_ReadStatus>
 80050fc:	4603      	mov	r3, r0
		if ((status & (1 << NRF24_RX_DR)))
 80050fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005102:	d016      	beq.n	8005132 <nRF24_IRQ_Read+0x4e>
			nrf24_rx_flag = 1;
 8005104:	4a0d      	ldr	r2, [pc, #52]	; (800513c <nRF24_IRQ_Read+0x58>)
 8005106:	2101      	movs	r1, #1
 8005108:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 800510a:	2040      	movs	r0, #64	; 0x40
		if ((status & (1 << NRF24_TX_DS)))
 800510c:	f013 0f20 	tst.w	r3, #32
 8005110:	d004      	beq.n	800511c <nRF24_IRQ_Read+0x38>
			nrf24_tx_flag = 1;
 8005112:	4a0b      	ldr	r2, [pc, #44]	; (8005140 <nRF24_IRQ_Read+0x5c>)
 8005114:	2101      	movs	r1, #1
 8005116:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8005118:	f040 0020 	orr.w	r0, r0, #32
		if ((status & (1 << NRF24_MAX_RT)))
 800511c:	f013 0f10 	tst.w	r3, #16
 8005120:	d004      	beq.n	800512c <nRF24_IRQ_Read+0x48>
			nrf24_mr_flag = 1;
 8005122:	4b08      	ldr	r3, [pc, #32]	; (8005144 <nRF24_IRQ_Read+0x60>)
 8005124:	2201      	movs	r2, #1
 8005126:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 8005128:	f040 0010 	orr.w	r0, r0, #16
		nRF24_WriteStatus(ClearIrq);
 800512c:	f7ff fdc5 	bl	8004cba <nRF24_WriteStatus>
}
 8005130:	e7de      	b.n	80050f0 <nRF24_IRQ_Read+0xc>
		uint8_t ClearIrq = 0;
 8005132:	2000      	movs	r0, #0
 8005134:	e7ea      	b.n	800510c <nRF24_IRQ_Read+0x28>
 8005136:	bf00      	nop
 8005138:	20000850 	.word	0x20000850
 800513c:	20000861 	.word	0x20000861
 8005140:	20000862 	.word	0x20000862
 8005144:	20000860 	.word	0x20000860

08005148 <nRF24_EventRxCallback>:
//

__weak void nRF24_EventRxCallback(void)
{

}
 8005148:	4770      	bx	lr

0800514a <nRF24_EventTxCallback>:

__weak void nRF24_EventTxCallback(void)
{

}
 800514a:	4770      	bx	lr

0800514c <nRF24_EventMrCallback>:

__weak void nRF24_EventMrCallback(void)
{

}
 800514c:	4770      	bx	lr
	...

08005150 <nRF24_Event>:

void nRF24_Event(void)
{
 8005150:	b508      	push	{r3, lr}
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8005152:	f7ff ffc7 	bl	80050e4 <nRF24_IRQ_Read>

#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_CheckTXAndSend();
 8005156:	f7ff ff69 	bl	800502c <nRF24_CheckTXAndSend>
#endif

	if(nrf24_rx_flag)
 800515a:	4b10      	ldr	r3, [pc, #64]	; (800519c <nRF24_Event+0x4c>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	b933      	cbnz	r3, 800516e <nRF24_Event+0x1e>
#endif
		nRF24_EventRxCallback();
		nrf24_rx_flag = 0;
	}

	if(nrf24_tx_flag)
 8005160:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <nRF24_Event+0x50>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	b95b      	cbnz	r3, 800517e <nRF24_Event+0x2e>
#endif
		nRF24_EventTxCallback();
		nrf24_tx_flag = 0;
	}

	if(nrf24_mr_flag)
 8005166:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <nRF24_Event+0x54>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	b98b      	cbnz	r3, 8005190 <nRF24_Event+0x40>
	{
		nRF24_EventMrCallback();
		nrf24_mr_flag = 0;
	}
}
 800516c:	bd08      	pop	{r3, pc}
		nRF24_ReceiveData();
 800516e:	f7ff ff9b 	bl	80050a8 <nRF24_ReceiveData>
		nRF24_EventRxCallback();
 8005172:	f7ff ffe9 	bl	8005148 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 8005176:	4b09      	ldr	r3, [pc, #36]	; (800519c <nRF24_Event+0x4c>)
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	e7f0      	b.n	8005160 <nRF24_Event+0x10>
		Nrf24TXFreeFlag = 1;
 800517e:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <nRF24_Event+0x58>)
 8005180:	2201      	movs	r2, #1
 8005182:	701a      	strb	r2, [r3, #0]
		nRF24_EventTxCallback();
 8005184:	f7ff ffe1 	bl	800514a <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <nRF24_Event+0x50>)
 800518a:	2200      	movs	r2, #0
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	e7ea      	b.n	8005166 <nRF24_Event+0x16>
		nRF24_EventMrCallback();
 8005190:	f7ff ffdc 	bl	800514c <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8005194:	4b03      	ldr	r3, [pc, #12]	; (80051a4 <nRF24_Event+0x54>)
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
}
 800519a:	e7e7      	b.n	800516c <nRF24_Event+0x1c>
 800519c:	20000861 	.word	0x20000861
 80051a0:	20000862 	.word	0x20000862
 80051a4:	20000860 	.word	0x20000860
 80051a8:	20000851 	.word	0x20000851

080051ac <nRF24_Init>:
#endif

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80051ac:	b508      	push	{r3, lr}
	hspi_nrf = hspi;
 80051ae:	4b31      	ldr	r3, [pc, #196]	; (8005274 <nRF24_Init+0xc8>)
 80051b0:	6018      	str	r0, [r3, #0]

	NRF24_CE_LOW;
 80051b2:	2200      	movs	r2, #0
 80051b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051b8:	482f      	ldr	r0, [pc, #188]	; (8005278 <nRF24_Init+0xcc>)
 80051ba:	f000 fe02 	bl	8005dc2 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80051be:	f7fe f8d3 	bl	8003368 <NRF_ChipDeselect>

	nRF24_Delay_ms(5); // Wait for radio power up
 80051c2:	2005      	movs	r0, #5
 80051c4:	f7ff fcd4 	bl	8004b70 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80051c8:	2003      	movs	r0, #3
 80051ca:	f7ff fd4d 	bl	8004c68 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 80051ce:	2002      	movs	r0, #2
 80051d0:	f7ff fd59 	bl	8004c86 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80051d4:	2001      	movs	r0, #1
 80051d6:	f7ff fdc9 	bl	8004d6c <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_2B); // CRC Length 1 byte
 80051da:	2001      	movs	r0, #1
 80051dc:	f7ff fdd4 	bl	8004d88 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 80051e0:	2107      	movs	r1, #7
 80051e2:	2004      	movs	r0, #4
 80051e4:	f7ff fddf 	bl	8004da6 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 80051e8:	201d      	movs	r0, #29
 80051ea:	f7ff fd07 	bl	8004bfc <nRF24_ReadRegister>
 80051ee:	f040 0104 	orr.w	r1, r0, #4
 80051f2:	b2c9      	uxtb	r1, r1
 80051f4:	201d      	movs	r0, #29
 80051f6:	f7ff fccb 	bl	8004b90 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 80051fa:	213f      	movs	r1, #63	; 0x3f
 80051fc:	201c      	movs	r0, #28
 80051fe:	f7ff fcc7 	bl	8004b90 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(110); // Set RF channel for transmission
 8005202:	206e      	movs	r0, #110	; 0x6e
 8005204:	f7ff fdd9 	bl	8004dba <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8005208:	2101      	movs	r1, #1
 800520a:	2000      	movs	r0, #0
 800520c:	f7ff fddc 	bl	8004dc8 <nRF24_EnablePipe>
	nRF24_EnablePipe(1, 1); // Enable pipe 1
 8005210:	2101      	movs	r1, #1
 8005212:	4608      	mov	r0, r1
 8005214:	f7ff fdd8 	bl	8004dc8 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8005218:	2101      	movs	r1, #1
 800521a:	2000      	movs	r0, #0
 800521c:	f7ff fded 	bl	8004dfa <nRF24_AutoACK>
	nRF24_AutoACK(1, 1); // Enable auto ACK for pipe 1
 8005220:	2101      	movs	r1, #1
 8005222:	4608      	mov	r0, r1
 8005224:	f7ff fde9 	bl	8004dfa <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8005228:	2005      	movs	r0, #5
 800522a:	f7ff fdff 	bl	8004e2c <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 800522e:	2001      	movs	r0, #1
 8005230:	f7ff fc9e 	bl	8004b70 <nRF24_Delay_ms>

#if (NRF24_USE_INTERRUPT == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8005234:	2001      	movs	r0, #1
 8005236:	f7ff fe94 	bl	8004f62 <nRF24_EnableRXDataReadyIRQ>
#endif
#if (NRF24_USE_INTERRUPT == 0)
	nRF24_EnableRXDataReadyIRQ(0);
#endif
	nRF24_EnableTXDataSentIRQ(0);
 800523a:	2000      	movs	r0, #0
 800523c:	f7ff fe9f 	bl	8004f7e <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8005240:	2000      	movs	r0, #0
 8005242:	f7ff feaa 	bl	8004f9a <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8005246:	2001      	movs	r0, #1
 8005248:	f7ff fc92 	bl	8004b70 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 800524c:	f7ff fe72 	bl	8004f34 <nRF24_ClearInterrupts>
#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8005250:	2001      	movs	r0, #1
 8005252:	f7ff fe86 	bl	8004f62 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8005256:	2001      	movs	r0, #1
 8005258:	f7ff fe91 	bl	8004f7e <nRF24_EnableTXDataSentIRQ>
	Nrf24TXFreeFlag = 1;
 800525c:	4b07      	ldr	r3, [pc, #28]	; (800527c <nRF24_Init+0xd0>)
 800525e:	2201      	movs	r2, #1
 8005260:	701a      	strb	r2, [r3, #0]
	RB_CreateBuffer(&TXBuffer, NRF24_TX_BUFFER_SIZE);
 8005262:	2120      	movs	r1, #32
 8005264:	4806      	ldr	r0, [pc, #24]	; (8005280 <nRF24_Init+0xd4>)
 8005266:	f7fd f9bb 	bl	80025e0 <RB_CreateBuffer>
	RB_CreateBuffer(&RXBuffer, NRF24_RX_BUFFER_SIZE);
 800526a:	2120      	movs	r1, #32
 800526c:	4805      	ldr	r0, [pc, #20]	; (8005284 <nRF24_Init+0xd8>)
 800526e:	f7fd f9b7 	bl	80025e0 <RB_CreateBuffer>
#endif
}
 8005272:	bd08      	pop	{r3, pc}
 8005274:	2000085c 	.word	0x2000085c
 8005278:	40020400 	.word	0x40020400
 800527c:	20000851 	.word	0x20000851
 8005280:	2000347c 	.word	0x2000347c
 8005284:	200034a0 	.word	0x200034a0

08005288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800528c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800528e:	e003      	b.n	8005298 <LoopCopyDataInit>

08005290 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005290:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005292:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005294:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005296:	3104      	adds	r1, #4

08005298 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005298:	480b      	ldr	r0, [pc, #44]	; (80052c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800529a:	4b0c      	ldr	r3, [pc, #48]	; (80052cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800529c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800529e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80052a0:	d3f6      	bcc.n	8005290 <CopyDataInit>
  ldr  r2, =_sbss
 80052a2:	4a0b      	ldr	r2, [pc, #44]	; (80052d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80052a4:	e002      	b.n	80052ac <LoopFillZerobss>

080052a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80052a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80052a8:	f842 3b04 	str.w	r3, [r2], #4

080052ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80052ac:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80052ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80052b0:	d3f9      	bcc.n	80052a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80052b2:	f7ff fc4f 	bl	8004b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052b6:	f006 fcbf 	bl	800bc38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052ba:	f7ff f821 	bl	8004300 <main>
  bx  lr    
 80052be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80052c0:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80052c4:	0800d0c0 	.word	0x0800d0c0
  ldr  r0, =_sdata
 80052c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80052cc:	200000d0 	.word	0x200000d0
  ldr  r2, =_sbss
 80052d0:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 80052d4:	2000350c 	.word	0x2000350c

080052d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052d8:	e7fe      	b.n	80052d8 <ADC_IRQHandler>
	...

080052dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052dc:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80052de:	4b0b      	ldr	r3, [pc, #44]	; (800530c <HAL_Init+0x30>)
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052ee:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052f8:	2003      	movs	r0, #3
 80052fa:	f000 f9a9 	bl	8005650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052fe:	2000      	movs	r0, #0
 8005300:	f7ff fb6e 	bl	80049e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005304:	f7ff f8b6 	bl	8004474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8005308:	2000      	movs	r0, #0
 800530a:	bd08      	pop	{r3, pc}
 800530c:	40023c00 	.word	0x40023c00

08005310 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005310:	4a03      	ldr	r2, [pc, #12]	; (8005320 <HAL_IncTick+0x10>)
 8005312:	6811      	ldr	r1, [r2, #0]
 8005314:	4b03      	ldr	r3, [pc, #12]	; (8005324 <HAL_IncTick+0x14>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	440b      	add	r3, r1
 800531a:	6013      	str	r3, [r2, #0]
}
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	200034c4 	.word	0x200034c4
 8005324:	20000054 	.word	0x20000054

08005328 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005328:	4b01      	ldr	r3, [pc, #4]	; (8005330 <HAL_GetTick+0x8>)
 800532a:	6818      	ldr	r0, [r3, #0]
}
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	200034c4 	.word	0x200034c4

08005334 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005334:	4b4a      	ldr	r3, [pc, #296]	; (8005460 <ADC_Init+0x12c>)
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800533c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	6841      	ldr	r1, [r0, #4]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005346:	6802      	ldr	r2, [r0, #0]
 8005348:	6853      	ldr	r3, [r2, #4]
 800534a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800534e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005350:	6802      	ldr	r2, [r0, #0]
 8005352:	6853      	ldr	r3, [r2, #4]
 8005354:	6901      	ldr	r1, [r0, #16]
 8005356:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800535a:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800535c:	6802      	ldr	r2, [r0, #0]
 800535e:	6853      	ldr	r3, [r2, #4]
 8005360:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005364:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005366:	6802      	ldr	r2, [r0, #0]
 8005368:	6853      	ldr	r3, [r2, #4]
 800536a:	6881      	ldr	r1, [r0, #8]
 800536c:	430b      	orrs	r3, r1
 800536e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005370:	6802      	ldr	r2, [r0, #0]
 8005372:	6893      	ldr	r3, [r2, #8]
 8005374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005378:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800537a:	6802      	ldr	r2, [r0, #0]
 800537c:	6893      	ldr	r3, [r2, #8]
 800537e:	68c1      	ldr	r1, [r0, #12]
 8005380:	430b      	orrs	r3, r1
 8005382:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005384:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005386:	4b37      	ldr	r3, [pc, #220]	; (8005464 <ADC_Init+0x130>)
 8005388:	429a      	cmp	r2, r3
 800538a:	d04b      	beq.n	8005424 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800538c:	6802      	ldr	r2, [r0, #0]
 800538e:	6893      	ldr	r3, [r2, #8]
 8005390:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005394:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005396:	6802      	ldr	r2, [r0, #0]
 8005398:	6893      	ldr	r3, [r2, #8]
 800539a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800539c:	430b      	orrs	r3, r1
 800539e:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053a0:	6802      	ldr	r2, [r0, #0]
 80053a2:	6893      	ldr	r3, [r2, #8]
 80053a4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80053a8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053aa:	6802      	ldr	r2, [r0, #0]
 80053ac:	6893      	ldr	r3, [r2, #8]
 80053ae:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80053b4:	6802      	ldr	r2, [r0, #0]
 80053b6:	6893      	ldr	r3, [r2, #8]
 80053b8:	f023 0302 	bic.w	r3, r3, #2
 80053bc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80053be:	6802      	ldr	r2, [r0, #0]
 80053c0:	6893      	ldr	r3, [r2, #8]
 80053c2:	7e01      	ldrb	r1, [r0, #24]
 80053c4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80053c8:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80053ca:	f890 3020 	ldrb.w	r3, [r0, #32]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d133      	bne.n	800543a <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80053d2:	6802      	ldr	r2, [r0, #0]
 80053d4:	6853      	ldr	r3, [r2, #4]
 80053d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053da:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80053dc:	6802      	ldr	r2, [r0, #0]
 80053de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80053e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053e4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053e6:	6801      	ldr	r1, [r0, #0]
 80053e8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80053ea:	69c2      	ldr	r2, [r0, #28]
 80053ec:	3a01      	subs	r2, #1
 80053ee:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80053f2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80053f4:	6802      	ldr	r2, [r0, #0]
 80053f6:	6893      	ldr	r3, [r2, #8]
 80053f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053fc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80053fe:	6802      	ldr	r2, [r0, #0]
 8005400:	6893      	ldr	r3, [r2, #8]
 8005402:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8005406:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800540a:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800540c:	6802      	ldr	r2, [r0, #0]
 800540e:	6893      	ldr	r3, [r2, #8]
 8005410:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005414:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005416:	6802      	ldr	r2, [r0, #0]
 8005418:	6893      	ldr	r3, [r2, #8]
 800541a:	6941      	ldr	r1, [r0, #20]
 800541c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8005420:	6093      	str	r3, [r2, #8]
}
 8005422:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005424:	6802      	ldr	r2, [r0, #0]
 8005426:	6893      	ldr	r3, [r2, #8]
 8005428:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800542c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800542e:	6802      	ldr	r2, [r0, #0]
 8005430:	6893      	ldr	r3, [r2, #8]
 8005432:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005436:	6093      	str	r3, [r2, #8]
 8005438:	e7bc      	b.n	80053b4 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800543a:	6802      	ldr	r2, [r0, #0]
 800543c:	6853      	ldr	r3, [r2, #4]
 800543e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005442:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005444:	6802      	ldr	r2, [r0, #0]
 8005446:	6853      	ldr	r3, [r2, #4]
 8005448:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800544c:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800544e:	6801      	ldr	r1, [r0, #0]
 8005450:	684b      	ldr	r3, [r1, #4]
 8005452:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005454:	3a01      	subs	r2, #1
 8005456:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800545a:	604b      	str	r3, [r1, #4]
 800545c:	e7be      	b.n	80053dc <ADC_Init+0xa8>
 800545e:	bf00      	nop
 8005460:	40012300 	.word	0x40012300
 8005464:	0f000001 	.word	0x0f000001

08005468 <HAL_ADC_Init>:
  if(hadc == NULL)
 8005468:	b338      	cbz	r0, 80054ba <HAL_ADC_Init+0x52>
{
 800546a:	b510      	push	{r4, lr}
 800546c:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 800546e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005470:	b143      	cbz	r3, 8005484 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005474:	f013 0f10 	tst.w	r3, #16
 8005478:	d00b      	beq.n	8005492 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800547a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800547c:	2300      	movs	r3, #0
 800547e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005482:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8005484:	f7ff f818 	bl	80044b8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005488:	2300      	movs	r3, #0
 800548a:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 800548c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8005490:	e7ef      	b.n	8005472 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8005492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005494:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005498:	f023 0302 	bic.w	r3, r3, #2
 800549c:	f043 0302 	orr.w	r3, r3, #2
 80054a0:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80054a2:	4620      	mov	r0, r4
 80054a4:	f7ff ff46 	bl	8005334 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80054a8:	2000      	movs	r0, #0
 80054aa:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80054ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054ae:	f023 0303 	bic.w	r3, r3, #3
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	6423      	str	r3, [r4, #64]	; 0x40
 80054b8:	e7e0      	b.n	800547c <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80054ba:	2001      	movs	r0, #1
}
 80054bc:	4770      	bx	lr
	...

080054c0 <HAL_ADC_ConfigChannel>:
{
 80054c0:	b430      	push	{r4, r5}
 80054c2:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80054c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	f000 80b7 	beq.w	8005640 <HAL_ADC_ConfigChannel+0x180>
 80054d2:	2301      	movs	r3, #1
 80054d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80054d8:	680b      	ldr	r3, [r1, #0]
 80054da:	2b09      	cmp	r3, #9
 80054dc:	d93e      	bls.n	800555c <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80054de:	6805      	ldr	r5, [r0, #0]
 80054e0:	68ea      	ldr	r2, [r5, #12]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80054e8:	3b1e      	subs	r3, #30
 80054ea:	2407      	movs	r4, #7
 80054ec:	fa04 f303 	lsl.w	r3, r4, r3
 80054f0:	ea22 0303 	bic.w	r3, r2, r3
 80054f4:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80054f6:	6805      	ldr	r5, [r0, #0]
 80054f8:	68ea      	ldr	r2, [r5, #12]
 80054fa:	688c      	ldr	r4, [r1, #8]
 80054fc:	880b      	ldrh	r3, [r1, #0]
 80054fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005502:	3b1e      	subs	r3, #30
 8005504:	fa04 f303 	lsl.w	r3, r4, r3
 8005508:	4313      	orrs	r3, r2
 800550a:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 800550c:	684b      	ldr	r3, [r1, #4]
 800550e:	2b06      	cmp	r3, #6
 8005510:	d83a      	bhi.n	8005588 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005512:	6805      	ldr	r5, [r0, #0]
 8005514:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005516:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800551a:	3b05      	subs	r3, #5
 800551c:	241f      	movs	r4, #31
 800551e:	fa04 f303 	lsl.w	r3, r4, r3
 8005522:	ea22 0303 	bic.w	r3, r2, r3
 8005526:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005528:	6805      	ldr	r5, [r0, #0]
 800552a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800552c:	684b      	ldr	r3, [r1, #4]
 800552e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005532:	3b05      	subs	r3, #5
 8005534:	880c      	ldrh	r4, [r1, #0]
 8005536:	fa04 f303 	lsl.w	r3, r4, r3
 800553a:	4313      	orrs	r3, r2
 800553c:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800553e:	6802      	ldr	r2, [r0, #0]
 8005540:	4b40      	ldr	r3, [pc, #256]	; (8005644 <HAL_ADC_ConfigChannel+0x184>)
 8005542:	429a      	cmp	r2, r3
 8005544:	d050      	beq.n	80055e8 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005546:	6802      	ldr	r2, [r0, #0]
 8005548:	4b3e      	ldr	r3, [pc, #248]	; (8005644 <HAL_ADC_ConfigChannel+0x184>)
 800554a:	429a      	cmp	r2, r3
 800554c:	d055      	beq.n	80055fa <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 800554e:	2300      	movs	r3, #0
 8005550:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8005554:	4618      	mov	r0, r3
}
 8005556:	b002      	add	sp, #8
 8005558:	bc30      	pop	{r4, r5}
 800555a:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800555c:	6805      	ldr	r5, [r0, #0]
 800555e:	692a      	ldr	r2, [r5, #16]
 8005560:	b29b      	uxth	r3, r3
 8005562:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005566:	2407      	movs	r4, #7
 8005568:	fa04 f303 	lsl.w	r3, r4, r3
 800556c:	ea22 0303 	bic.w	r3, r2, r3
 8005570:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005572:	6805      	ldr	r5, [r0, #0]
 8005574:	692a      	ldr	r2, [r5, #16]
 8005576:	688c      	ldr	r4, [r1, #8]
 8005578:	880b      	ldrh	r3, [r1, #0]
 800557a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800557e:	fa04 f303 	lsl.w	r3, r4, r3
 8005582:	4313      	orrs	r3, r2
 8005584:	612b      	str	r3, [r5, #16]
 8005586:	e7c1      	b.n	800550c <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8005588:	2b0c      	cmp	r3, #12
 800558a:	d816      	bhi.n	80055ba <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800558c:	6805      	ldr	r5, [r0, #0]
 800558e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005590:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005594:	3b23      	subs	r3, #35	; 0x23
 8005596:	241f      	movs	r4, #31
 8005598:	fa04 f303 	lsl.w	r3, r4, r3
 800559c:	ea22 0303 	bic.w	r3, r2, r3
 80055a0:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80055a2:	6805      	ldr	r5, [r0, #0]
 80055a4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80055a6:	684b      	ldr	r3, [r1, #4]
 80055a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80055ac:	3b23      	subs	r3, #35	; 0x23
 80055ae:	880c      	ldrh	r4, [r1, #0]
 80055b0:	fa04 f303 	lsl.w	r3, r4, r3
 80055b4:	4313      	orrs	r3, r2
 80055b6:	632b      	str	r3, [r5, #48]	; 0x30
 80055b8:	e7c1      	b.n	800553e <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80055ba:	6805      	ldr	r5, [r0, #0]
 80055bc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80055be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80055c2:	3b41      	subs	r3, #65	; 0x41
 80055c4:	241f      	movs	r4, #31
 80055c6:	fa04 f303 	lsl.w	r3, r4, r3
 80055ca:	ea22 0303 	bic.w	r3, r2, r3
 80055ce:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80055d0:	6805      	ldr	r5, [r0, #0]
 80055d2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80055d4:	684b      	ldr	r3, [r1, #4]
 80055d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80055da:	3b41      	subs	r3, #65	; 0x41
 80055dc:	880c      	ldrh	r4, [r1, #0]
 80055de:	fa04 f303 	lsl.w	r3, r4, r3
 80055e2:	4313      	orrs	r3, r2
 80055e4:	62eb      	str	r3, [r5, #44]	; 0x2c
 80055e6:	e7aa      	b.n	800553e <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80055e8:	680b      	ldr	r3, [r1, #0]
 80055ea:	2b12      	cmp	r3, #18
 80055ec:	d1ab      	bne.n	8005546 <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80055ee:	4a16      	ldr	r2, [pc, #88]	; (8005648 <HAL_ADC_ConfigChannel+0x188>)
 80055f0:	6853      	ldr	r3, [r2, #4]
 80055f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055f6:	6053      	str	r3, [r2, #4]
 80055f8:	e7a5      	b.n	8005546 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80055fa:	680b      	ldr	r3, [r1, #0]
 80055fc:	3b10      	subs	r3, #16
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d8a5      	bhi.n	800554e <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005602:	4a11      	ldr	r2, [pc, #68]	; (8005648 <HAL_ADC_ConfigChannel+0x188>)
 8005604:	6853      	ldr	r3, [r2, #4]
 8005606:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800560a:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800560c:	680b      	ldr	r3, [r1, #0]
 800560e:	2b10      	cmp	r3, #16
 8005610:	d19d      	bne.n	800554e <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005612:	4b0e      	ldr	r3, [pc, #56]	; (800564c <HAL_ADC_ConfigChannel+0x18c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800561a:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 800561e:	f202 3283 	addw	r2, r2, #899	; 0x383
 8005622:	fba2 2303 	umull	r2, r3, r2, r3
 8005626:	0c9b      	lsrs	r3, r3, #18
 8005628:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800562c:	005a      	lsls	r2, r3, #1
 800562e:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8005630:	e002      	b.n	8005638 <HAL_ADC_ConfigChannel+0x178>
        counter--;
 8005632:	9b01      	ldr	r3, [sp, #4]
 8005634:	3b01      	subs	r3, #1
 8005636:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005638:	9b01      	ldr	r3, [sp, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f9      	bne.n	8005632 <HAL_ADC_ConfigChannel+0x172>
 800563e:	e786      	b.n	800554e <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8005640:	2002      	movs	r0, #2
 8005642:	e788      	b.n	8005556 <HAL_ADC_ConfigChannel+0x96>
 8005644:	40012000 	.word	0x40012000
 8005648:	40012300 	.word	0x40012300
 800564c:	20000050 	.word	0x20000050

08005650 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005650:	4a07      	ldr	r2, [pc, #28]	; (8005670 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005652:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005654:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005658:	041b      	lsls	r3, r3, #16
 800565a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800565c:	0200      	lsls	r0, r0, #8
 800565e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005662:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8005664:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8005668:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800566c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800566e:	4770      	bx	lr
 8005670:	e000ed00 	.word	0xe000ed00

08005674 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005674:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005676:	4b17      	ldr	r3, [pc, #92]	; (80056d4 <HAL_NVIC_SetPriority+0x60>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800567e:	f1c3 0407 	rsb	r4, r3, #7
 8005682:	2c04      	cmp	r4, #4
 8005684:	bf28      	it	cs
 8005686:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005688:	1d1d      	adds	r5, r3, #4
 800568a:	2d06      	cmp	r5, #6
 800568c:	d918      	bls.n	80056c0 <HAL_NVIC_SetPriority+0x4c>
 800568e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005690:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005694:	fa05 f404 	lsl.w	r4, r5, r4
 8005698:	ea21 0104 	bic.w	r1, r1, r4
 800569c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800569e:	fa05 f303 	lsl.w	r3, r5, r3
 80056a2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80056a8:	2800      	cmp	r0, #0
 80056aa:	db0b      	blt.n	80056c4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ac:	0109      	lsls	r1, r1, #4
 80056ae:	b2c9      	uxtb	r1, r1
 80056b0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80056b4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80056b8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80056bc:	bc30      	pop	{r4, r5}
 80056be:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056c0:	2300      	movs	r3, #0
 80056c2:	e7e5      	b.n	8005690 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056c4:	f000 000f 	and.w	r0, r0, #15
 80056c8:	0109      	lsls	r1, r1, #4
 80056ca:	b2c9      	uxtb	r1, r1
 80056cc:	4b02      	ldr	r3, [pc, #8]	; (80056d8 <HAL_NVIC_SetPriority+0x64>)
 80056ce:	5419      	strb	r1, [r3, r0]
 80056d0:	e7f4      	b.n	80056bc <HAL_NVIC_SetPriority+0x48>
 80056d2:	bf00      	nop
 80056d4:	e000ed00 	.word	0xe000ed00
 80056d8:	e000ed14 	.word	0xe000ed14

080056dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80056dc:	2800      	cmp	r0, #0
 80056de:	db07      	blt.n	80056f0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056e0:	f000 021f 	and.w	r2, r0, #31
 80056e4:	0940      	lsrs	r0, r0, #5
 80056e6:	2301      	movs	r3, #1
 80056e8:	4093      	lsls	r3, r2
 80056ea:	4a02      	ldr	r2, [pc, #8]	; (80056f4 <HAL_NVIC_EnableIRQ+0x18>)
 80056ec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	e000e100 	.word	0xe000e100

080056f8 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80056f8:	b158      	cbz	r0, 8005712 <HAL_CRC_Init+0x1a>
{
 80056fa:	b510      	push	{r4, lr}
 80056fc:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80056fe:	7943      	ldrb	r3, [r0, #5]
 8005700:	b11b      	cbz	r3, 800570a <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005702:	2301      	movs	r3, #1
 8005704:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8005706:	2000      	movs	r0, #0
}
 8005708:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800570a:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 800570c:	f7fe feec 	bl	80044e8 <HAL_CRC_MspInit>
 8005710:	e7f7      	b.n	8005702 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8005712:	2001      	movs	r0, #1
}
 8005714:	4770      	bx	lr

08005716 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005716:	b430      	push	{r4, r5}
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005718:	2302      	movs	r3, #2
 800571a:	7143      	strb	r3, [r0, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800571c:	6804      	ldr	r4, [r0, #0]
 800571e:	68a3      	ldr	r3, [r4, #8]
 8005720:	f043 0301 	orr.w	r3, r3, #1
 8005724:	60a3      	str	r3, [r4, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8005726:	2300      	movs	r3, #0
 8005728:	e004      	b.n	8005734 <HAL_CRC_Calculate+0x1e>
  {
    hcrc->Instance->DR = pBuffer[index];
 800572a:	6804      	ldr	r4, [r0, #0]
 800572c:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8005730:	6025      	str	r5, [r4, #0]
  for (index = 0U; index < BufferLength; index++)
 8005732:	3301      	adds	r3, #1
 8005734:	4293      	cmp	r3, r2
 8005736:	d3f8      	bcc.n	800572a <HAL_CRC_Calculate+0x14>
  }
  temp = hcrc->Instance->DR;
 8005738:	6803      	ldr	r3, [r0, #0]
 800573a:	681b      	ldr	r3, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800573c:	2201      	movs	r2, #1
 800573e:	7142      	strb	r2, [r0, #5]

  /* Return the CRC computed value */
  return temp;
}
 8005740:	4618      	mov	r0, r3
 8005742:	bc30      	pop	{r4, r5}
 8005744:	4770      	bx	lr

08005746 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005746:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005748:	6805      	ldr	r5, [r0, #0]
 800574a:	682c      	ldr	r4, [r5, #0]
 800574c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8005750:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005752:	6804      	ldr	r4, [r0, #0]
 8005754:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005756:	6883      	ldr	r3, [r0, #8]
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	d005      	beq.n	8005768 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800575c:	6803      	ldr	r3, [r0, #0]
 800575e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8005760:	6803      	ldr	r3, [r0, #0]
 8005762:	60da      	str	r2, [r3, #12]
  }
}
 8005764:	bc30      	pop	{r4, r5}
 8005766:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8005768:	6803      	ldr	r3, [r0, #0]
 800576a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800576c:	6803      	ldr	r3, [r0, #0]
 800576e:	60d9      	str	r1, [r3, #12]
 8005770:	e7f8      	b.n	8005764 <DMA_SetConfig+0x1e>
	...

08005774 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005774:	6802      	ldr	r2, [r0, #0]
 8005776:	b2d3      	uxtb	r3, r2
 8005778:	3b10      	subs	r3, #16
 800577a:	490b      	ldr	r1, [pc, #44]	; (80057a8 <DMA_CalcBaseAndBitshift+0x34>)
 800577c:	fba1 1303 	umull	r1, r3, r1, r3
 8005780:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005782:	490a      	ldr	r1, [pc, #40]	; (80057ac <DMA_CalcBaseAndBitshift+0x38>)
 8005784:	5cc9      	ldrb	r1, [r1, r3]
 8005786:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005788:	2b03      	cmp	r3, #3
 800578a:	d806      	bhi.n	800579a <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800578c:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8005790:	f022 0203 	bic.w	r2, r2, #3
 8005794:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8005796:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8005798:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800579a:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800579e:	f022 0203 	bic.w	r2, r2, #3
 80057a2:	3204      	adds	r2, #4
 80057a4:	6582      	str	r2, [r0, #88]	; 0x58
 80057a6:	e7f6      	b.n	8005796 <DMA_CalcBaseAndBitshift+0x22>
 80057a8:	aaaaaaab 	.word	0xaaaaaaab
 80057ac:	0800cf54 	.word	0x0800cf54

080057b0 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057b2:	6982      	ldr	r2, [r0, #24]
 80057b4:	b992      	cbnz	r2, 80057dc <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d00a      	beq.n	80057d0 <DMA_CheckFifoParam+0x20>
 80057ba:	b11b      	cbz	r3, 80057c4 <DMA_CheckFifoParam+0x14>
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d001      	beq.n	80057c4 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80057c0:	2000      	movs	r0, #0
 80057c2:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80057c6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80057ca:	d12c      	bne.n	8005826 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80057cc:	2000      	movs	r0, #0
 80057ce:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057d0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80057d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057d6:	d028      	beq.n	800582a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80057d8:	2000      	movs	r0, #0
 80057da:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057dc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80057e0:	d005      	beq.n	80057ee <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d929      	bls.n	800583a <DMA_CheckFifoParam+0x8a>
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d015      	beq.n	8005816 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80057ea:	2000      	movs	r0, #0
 80057ec:	4770      	bx	lr
    switch (tmp)
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d803      	bhi.n	80057fa <DMA_CheckFifoParam+0x4a>
 80057f2:	e8df f003 	tbb	[pc, r3]
 80057f6:	041c      	.short	0x041c
 80057f8:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80057fa:	2000      	movs	r0, #0
 80057fc:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005800:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005804:	d115      	bne.n	8005832 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8005806:	2000      	movs	r0, #0
 8005808:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800580a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800580c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005810:	d011      	beq.n	8005836 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8005812:	2000      	movs	r0, #0
 8005814:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005816:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005818:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800581c:	d001      	beq.n	8005822 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 800581e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8005820:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8005822:	2000      	movs	r0, #0
 8005824:	4770      	bx	lr
        status = HAL_ERROR;
 8005826:	2001      	movs	r0, #1
 8005828:	4770      	bx	lr
        status = HAL_ERROR;
 800582a:	2001      	movs	r0, #1
 800582c:	4770      	bx	lr
      status = HAL_ERROR;
 800582e:	2001      	movs	r0, #1
 8005830:	4770      	bx	lr
        status = HAL_ERROR;
 8005832:	2001      	movs	r0, #1
 8005834:	4770      	bx	lr
        status = HAL_ERROR;
 8005836:	2001      	movs	r0, #1
 8005838:	4770      	bx	lr
      status = HAL_ERROR;
 800583a:	2001      	movs	r0, #1
 800583c:	4770      	bx	lr
	...

08005840 <HAL_DMA_Init>:
{
 8005840:	b570      	push	{r4, r5, r6, lr}
 8005842:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005844:	f7ff fd70 	bl	8005328 <HAL_GetTick>
  if(hdma == NULL)
 8005848:	2c00      	cmp	r4, #0
 800584a:	d05b      	beq.n	8005904 <HAL_DMA_Init+0xc4>
 800584c:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800584e:	2300      	movs	r3, #0
 8005850:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8005854:	2302      	movs	r3, #2
 8005856:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800585a:	6822      	ldr	r2, [r4, #0]
 800585c:	6813      	ldr	r3, [r2, #0]
 800585e:	f023 0301 	bic.w	r3, r3, #1
 8005862:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	f012 0f01 	tst.w	r2, #1
 800586c:	d00a      	beq.n	8005884 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800586e:	f7ff fd5b 	bl	8005328 <HAL_GetTick>
 8005872:	1b40      	subs	r0, r0, r5
 8005874:	2805      	cmp	r0, #5
 8005876:	d9f5      	bls.n	8005864 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005878:	2320      	movs	r3, #32
 800587a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800587c:	2003      	movs	r0, #3
 800587e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8005882:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8005884:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005886:	4820      	ldr	r0, [pc, #128]	; (8005908 <HAL_DMA_Init+0xc8>)
 8005888:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800588a:	6861      	ldr	r1, [r4, #4]
 800588c:	68a2      	ldr	r2, [r4, #8]
 800588e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005890:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005892:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005894:	6921      	ldr	r1, [r4, #16]
 8005896:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005898:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800589a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800589c:	69a1      	ldr	r1, [r4, #24]
 800589e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80058a0:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80058a4:	6a21      	ldr	r1, [r4, #32]
 80058a6:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058a8:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058ac:	2904      	cmp	r1, #4
 80058ae:	d01e      	beq.n	80058ee <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80058b0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80058b2:	6826      	ldr	r6, [r4, #0]
 80058b4:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058b6:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80058ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058bc:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d107      	bne.n	80058d2 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80058c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80058c4:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80058c8:	b11b      	cbz	r3, 80058d2 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058ca:	4620      	mov	r0, r4
 80058cc:	f7ff ff70 	bl	80057b0 <DMA_CheckFifoParam>
 80058d0:	b990      	cbnz	r0, 80058f8 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80058d2:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058d4:	4620      	mov	r0, r4
 80058d6:	f7ff ff4d 	bl	8005774 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80058dc:	233f      	movs	r3, #63	; 0x3f
 80058de:	4093      	lsls	r3, r2
 80058e0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058e2:	2000      	movs	r0, #0
 80058e4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80058ec:	e7c9      	b.n	8005882 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80058f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80058f2:	4301      	orrs	r1, r0
 80058f4:	430a      	orrs	r2, r1
 80058f6:	e7db      	b.n	80058b0 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058f8:	2340      	movs	r3, #64	; 0x40
 80058fa:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80058fc:	2001      	movs	r0, #1
 80058fe:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8005902:	e7be      	b.n	8005882 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8005904:	2001      	movs	r0, #1
 8005906:	e7bc      	b.n	8005882 <HAL_DMA_Init+0x42>
 8005908:	f010803f 	.word	0xf010803f

0800590c <HAL_DMA_Start_IT>:
{
 800590c:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800590e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005910:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8005914:	2c01      	cmp	r4, #1
 8005916:	d02c      	beq.n	8005972 <HAL_DMA_Start_IT+0x66>
 8005918:	2401      	movs	r4, #1
 800591a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800591e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8005922:	b2e4      	uxtb	r4, r4
 8005924:	2c01      	cmp	r4, #1
 8005926:	d004      	beq.n	8005932 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8005928:	2300      	movs	r3, #0
 800592a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 800592e:	2002      	movs	r0, #2
}
 8005930:	bd38      	pop	{r3, r4, r5, pc}
 8005932:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005934:	2002      	movs	r0, #2
 8005936:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800593a:	2000      	movs	r0, #0
 800593c:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800593e:	4620      	mov	r0, r4
 8005940:	f7ff ff01 	bl	8005746 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005944:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005946:	233f      	movs	r3, #63	; 0x3f
 8005948:	4093      	lsls	r3, r2
 800594a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800594c:	6822      	ldr	r2, [r4, #0]
 800594e:	6813      	ldr	r3, [r2, #0]
 8005950:	f043 0316 	orr.w	r3, r3, #22
 8005954:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005956:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005958:	b123      	cbz	r3, 8005964 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	6813      	ldr	r3, [r2, #0]
 800595e:	f043 0308 	orr.w	r3, r3, #8
 8005962:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8005964:	6822      	ldr	r2, [r4, #0]
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	f043 0301 	orr.w	r3, r3, #1
 800596c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800596e:	2000      	movs	r0, #0
 8005970:	e7de      	b.n	8005930 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8005972:	2002      	movs	r0, #2
 8005974:	e7dc      	b.n	8005930 <HAL_DMA_Start_IT+0x24>

08005976 <HAL_DMA_Abort>:
{
 8005976:	b570      	push	{r4, r5, r6, lr}
 8005978:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800597a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800597c:	f7ff fcd4 	bl	8005328 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005980:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d006      	beq.n	8005998 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800598a:	2380      	movs	r3, #128	; 0x80
 800598c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800598e:	2300      	movs	r3, #0
 8005990:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8005994:	2001      	movs	r0, #1
}
 8005996:	bd70      	pop	{r4, r5, r6, pc}
 8005998:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800599a:	6822      	ldr	r2, [r4, #0]
 800599c:	6813      	ldr	r3, [r2, #0]
 800599e:	f023 0316 	bic.w	r3, r3, #22
 80059a2:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059a4:	6822      	ldr	r2, [r4, #0]
 80059a6:	6953      	ldr	r3, [r2, #20]
 80059a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ac:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059b0:	b1e3      	cbz	r3, 80059ec <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059b2:	6822      	ldr	r2, [r4, #0]
 80059b4:	6813      	ldr	r3, [r2, #0]
 80059b6:	f023 0308 	bic.w	r3, r3, #8
 80059ba:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80059bc:	6822      	ldr	r2, [r4, #0]
 80059be:	6813      	ldr	r3, [r2, #0]
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f013 0f01 	tst.w	r3, #1
 80059ce:	d011      	beq.n	80059f4 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059d0:	f7ff fcaa 	bl	8005328 <HAL_GetTick>
 80059d4:	1b40      	subs	r0, r0, r5
 80059d6:	2805      	cmp	r0, #5
 80059d8:	d9f5      	bls.n	80059c6 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059da:	2320      	movs	r3, #32
 80059dc:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80059de:	2300      	movs	r3, #0
 80059e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059e4:	2003      	movs	r0, #3
 80059e6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80059ea:	e7d4      	b.n	8005996 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1df      	bne.n	80059b2 <HAL_DMA_Abort+0x3c>
 80059f2:	e7e3      	b.n	80059bc <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059f4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80059f6:	233f      	movs	r3, #63	; 0x3f
 80059f8:	4093      	lsls	r3, r2
 80059fa:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 80059fc:	2000      	movs	r0, #0
 80059fe:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005a08:	e7c5      	b.n	8005996 <HAL_DMA_Abort+0x20>

08005a0a <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a0a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d003      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a14:	2380      	movs	r3, #128	; 0x80
 8005a16:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8005a18:	2001      	movs	r0, #1
 8005a1a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a1c:	2305      	movs	r3, #5
 8005a1e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005a22:	6802      	ldr	r2, [r0, #0]
 8005a24:	6813      	ldr	r3, [r2, #0]
 8005a26:	f023 0301 	bic.w	r3, r3, #1
 8005a2a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005a2c:	2000      	movs	r0, #0
}
 8005a2e:	4770      	bx	lr

08005a30 <HAL_DMA_IRQHandler>:
{
 8005a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a32:	b083      	sub	sp, #12
 8005a34:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a3a:	4b72      	ldr	r3, [pc, #456]	; (8005c04 <HAL_DMA_IRQHandler+0x1d4>)
 8005a3c:	681d      	ldr	r5, [r3, #0]
 8005a3e:	4b72      	ldr	r3, [pc, #456]	; (8005c08 <HAL_DMA_IRQHandler+0x1d8>)
 8005a40:	fba3 3505 	umull	r3, r5, r3, r5
 8005a44:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a46:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8005a48:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a4a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	4093      	lsls	r3, r2
 8005a50:	4233      	tst	r3, r6
 8005a52:	d010      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a54:	6803      	ldr	r3, [r0, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	f012 0f04 	tst.w	r2, #4
 8005a5c:	d00b      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	f022 0204 	bic.w	r2, r2, #4
 8005a64:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a66:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005a68:	2308      	movs	r3, #8
 8005a6a:	4093      	lsls	r3, r2
 8005a6c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a6e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a76:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005a78:	2301      	movs	r3, #1
 8005a7a:	4093      	lsls	r3, r2
 8005a7c:	4233      	tst	r3, r6
 8005a7e:	d009      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a80:	6822      	ldr	r2, [r4, #0]
 8005a82:	6952      	ldr	r2, [r2, #20]
 8005a84:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a88:	d004      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a8a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a8e:	f043 0302 	orr.w	r3, r3, #2
 8005a92:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a94:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005a96:	2304      	movs	r3, #4
 8005a98:	4093      	lsls	r3, r2
 8005a9a:	4233      	tst	r3, r6
 8005a9c:	d009      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a9e:	6822      	ldr	r2, [r4, #0]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	f012 0f02 	tst.w	r2, #2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005aa8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005aaa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005aac:	f043 0304 	orr.w	r3, r3, #4
 8005ab0:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ab2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	4093      	lsls	r3, r2
 8005ab8:	4233      	tst	r3, r6
 8005aba:	d024      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005abc:	6822      	ldr	r2, [r4, #0]
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	f012 0f08 	tst.w	r2, #8
 8005ac4:	d01f      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ac6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005ad0:	d00d      	beq.n	8005aee <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005ad8:	d104      	bne.n	8005ae4 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8005ada:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005adc:	b19b      	cbz	r3, 8005b06 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8005ade:	4620      	mov	r0, r4
 8005ae0:	4798      	blx	r3
 8005ae2:	e010      	b.n	8005b06 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ae4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005ae6:	b173      	cbz	r3, 8005b06 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8005ae8:	4620      	mov	r0, r4
 8005aea:	4798      	blx	r3
 8005aec:	e00b      	b.n	8005b06 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005af4:	d103      	bne.n	8005afe <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	f022 0208 	bic.w	r2, r2, #8
 8005afc:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005afe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b00:	b10b      	cbz	r3, 8005b06 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8005b02:	4620      	mov	r0, r4
 8005b04:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b06:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005b08:	2320      	movs	r3, #32
 8005b0a:	4093      	lsls	r3, r2
 8005b0c:	4233      	tst	r3, r6
 8005b0e:	d055      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b10:	6822      	ldr	r2, [r4, #0]
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	f012 0f10 	tst.w	r2, #16
 8005b18:	d050      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b1a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b1c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b05      	cmp	r3, #5
 8005b24:	d00e      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005b2e:	d033      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005b36:	d12a      	bne.n	8005b8e <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8005b38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d03e      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8005b3e:	4620      	mov	r0, r4
 8005b40:	4798      	blx	r3
 8005b42:	e03b      	b.n	8005bbc <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b44:	6822      	ldr	r2, [r4, #0]
 8005b46:	6813      	ldr	r3, [r2, #0]
 8005b48:	f023 0316 	bic.w	r3, r3, #22
 8005b4c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b4e:	6822      	ldr	r2, [r4, #0]
 8005b50:	6953      	ldr	r3, [r2, #20]
 8005b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b56:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b5a:	b1a3      	cbz	r3, 8005b86 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b5c:	6822      	ldr	r2, [r4, #0]
 8005b5e:	6813      	ldr	r3, [r2, #0]
 8005b60:	f023 0308 	bic.w	r3, r3, #8
 8005b64:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b66:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005b68:	233f      	movs	r3, #63	; 0x3f
 8005b6a:	4093      	lsls	r3, r2
 8005b6c:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005b74:	2301      	movs	r3, #1
 8005b76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005b7a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d03f      	beq.n	8005c00 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8005b80:	4620      	mov	r0, r4
 8005b82:	4798      	blx	r3
 8005b84:	e03c      	b.n	8005c00 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e7      	bne.n	8005b5c <HAL_DMA_IRQHandler+0x12c>
 8005b8c:	e7eb      	b.n	8005b66 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8005b8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b90:	b1a3      	cbz	r3, 8005bbc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8005b92:	4620      	mov	r0, r4
 8005b94:	4798      	blx	r3
 8005b96:	e011      	b.n	8005bbc <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005b9e:	d109      	bne.n	8005bb4 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	f022 0210 	bic.w	r2, r2, #16
 8005ba6:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005bb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005bb6:	b10b      	cbz	r3, 8005bbc <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8005bb8:	4620      	mov	r0, r4
 8005bba:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bbe:	b1fb      	cbz	r3, 8005c00 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005bc0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bc2:	f013 0f01 	tst.w	r3, #1
 8005bc6:	d017      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bc8:	2305      	movs	r3, #5
 8005bca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005bce:	6822      	ldr	r2, [r4, #0]
 8005bd0:	6813      	ldr	r3, [r2, #0]
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8005bd8:	9b01      	ldr	r3, [sp, #4]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	9301      	str	r3, [sp, #4]
 8005bde:	42ab      	cmp	r3, r5
 8005be0:	d804      	bhi.n	8005bec <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f013 0f01 	tst.w	r3, #1
 8005bea:	d1f5      	bne.n	8005bd8 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8005bec:	2300      	movs	r3, #0
 8005bee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005bf8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005bfa:	b10b      	cbz	r3, 8005c00 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	4798      	blx	r3
}
 8005c00:	b003      	add	sp, #12
 8005c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c04:	20000050 	.word	0x20000050
 8005c08:	1b4e81b5 	.word	0x1b4e81b5

08005c0c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005c0c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8005c0e:	4770      	bx	lr

08005c10 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c10:	2300      	movs	r3, #0
 8005c12:	2b0f      	cmp	r3, #15
 8005c14:	f200 80c5 	bhi.w	8005da2 <HAL_GPIO_Init+0x192>
{
 8005c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	e039      	b.n	8005c92 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c1e:	2204      	movs	r2, #4
 8005c20:	e000      	b.n	8005c24 <HAL_GPIO_Init+0x14>
 8005c22:	2200      	movs	r2, #0
 8005c24:	40aa      	lsls	r2, r5
 8005c26:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c28:	3402      	adds	r4, #2
 8005c2a:	4d5e      	ldr	r5, [pc, #376]	; (8005da4 <HAL_GPIO_Init+0x194>)
 8005c2c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c30:	4a5d      	ldr	r2, [pc, #372]	; (8005da8 <HAL_GPIO_Init+0x198>)
 8005c32:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005c34:	43f2      	mvns	r2, r6
 8005c36:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c3a:	684f      	ldr	r7, [r1, #4]
 8005c3c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8005c40:	d001      	beq.n	8005c46 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8005c42:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8005c46:	4c58      	ldr	r4, [pc, #352]	; (8005da8 <HAL_GPIO_Init+0x198>)
 8005c48:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8005c4a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8005c4c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c50:	684f      	ldr	r7, [r1, #4]
 8005c52:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8005c56:	d001      	beq.n	8005c5c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8005c58:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8005c5c:	4c52      	ldr	r4, [pc, #328]	; (8005da8 <HAL_GPIO_Init+0x198>)
 8005c5e:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c60:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8005c62:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c66:	684f      	ldr	r7, [r1, #4]
 8005c68:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8005c6c:	d001      	beq.n	8005c72 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8005c6e:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8005c72:	4c4d      	ldr	r4, [pc, #308]	; (8005da8 <HAL_GPIO_Init+0x198>)
 8005c74:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8005c76:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8005c78:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c7a:	684d      	ldr	r5, [r1, #4]
 8005c7c:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8005c80:	d001      	beq.n	8005c86 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8005c82:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8005c86:	4c48      	ldr	r4, [pc, #288]	; (8005da8 <HAL_GPIO_Init+0x198>)
 8005c88:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	2b0f      	cmp	r3, #15
 8005c8e:	f200 8086 	bhi.w	8005d9e <HAL_GPIO_Init+0x18e>
    ioposition = 0x01U << position;
 8005c92:	2201      	movs	r2, #1
 8005c94:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c96:	680c      	ldr	r4, [r1, #0]
 8005c98:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8005c9c:	42b2      	cmp	r2, r6
 8005c9e:	d1f4      	bne.n	8005c8a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ca0:	684c      	ldr	r4, [r1, #4]
 8005ca2:	1e65      	subs	r5, r4, #1
 8005ca4:	2d01      	cmp	r5, #1
 8005ca6:	d903      	bls.n	8005cb0 <HAL_GPIO_Init+0xa0>
 8005ca8:	2c11      	cmp	r4, #17
 8005caa:	d001      	beq.n	8005cb0 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cac:	2c12      	cmp	r4, #18
 8005cae:	d112      	bne.n	8005cd6 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8005cb0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cb2:	005f      	lsls	r7, r3, #1
 8005cb4:	2403      	movs	r4, #3
 8005cb6:	40bc      	lsls	r4, r7
 8005cb8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cbc:	68cc      	ldr	r4, [r1, #12]
 8005cbe:	40bc      	lsls	r4, r7
 8005cc0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8005cc2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8005cc4:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cc6:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005cca:	684c      	ldr	r4, [r1, #4]
 8005ccc:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8005cd0:	409a      	lsls	r2, r3
 8005cd2:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8005cd4:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8005cd6:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cd8:	005f      	lsls	r7, r3, #1
 8005cda:	2203      	movs	r2, #3
 8005cdc:	40ba      	lsls	r2, r7
 8005cde:	43d2      	mvns	r2, r2
 8005ce0:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ce2:	688d      	ldr	r5, [r1, #8]
 8005ce4:	40bd      	lsls	r5, r7
 8005ce6:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8005ce8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cea:	684c      	ldr	r4, [r1, #4]
 8005cec:	2c02      	cmp	r4, #2
 8005cee:	d001      	beq.n	8005cf4 <HAL_GPIO_Init+0xe4>
 8005cf0:	2c12      	cmp	r4, #18
 8005cf2:	d113      	bne.n	8005d1c <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8005cf4:	08dd      	lsrs	r5, r3, #3
 8005cf6:	3508      	adds	r5, #8
 8005cf8:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cfc:	f003 0407 	and.w	r4, r3, #7
 8005d00:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005d04:	240f      	movs	r4, #15
 8005d06:	fa04 f40c 	lsl.w	r4, r4, ip
 8005d0a:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d0e:	690c      	ldr	r4, [r1, #16]
 8005d10:	fa04 f40c 	lsl.w	r4, r4, ip
 8005d14:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005d18:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8005d1c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d1e:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d20:	684c      	ldr	r4, [r1, #4]
 8005d22:	f004 0403 	and.w	r4, r4, #3
 8005d26:	40bc      	lsls	r4, r7
 8005d28:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8005d2a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d2c:	684a      	ldr	r2, [r1, #4]
 8005d2e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8005d32:	d0aa      	beq.n	8005c8a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d34:	2200      	movs	r2, #0
 8005d36:	9201      	str	r2, [sp, #4]
 8005d38:	4a1c      	ldr	r2, [pc, #112]	; (8005dac <HAL_GPIO_Init+0x19c>)
 8005d3a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005d3c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8005d40:	6454      	str	r4, [r2, #68]	; 0x44
 8005d42:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005d44:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005d48:	9201      	str	r2, [sp, #4]
 8005d4a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005d4c:	089c      	lsrs	r4, r3, #2
 8005d4e:	1ca5      	adds	r5, r4, #2
 8005d50:	4a14      	ldr	r2, [pc, #80]	; (8005da4 <HAL_GPIO_Init+0x194>)
 8005d52:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d56:	f003 0203 	and.w	r2, r3, #3
 8005d5a:	0095      	lsls	r5, r2, #2
 8005d5c:	220f      	movs	r2, #15
 8005d5e:	40aa      	lsls	r2, r5
 8005d60:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d64:	4a12      	ldr	r2, [pc, #72]	; (8005db0 <HAL_GPIO_Init+0x1a0>)
 8005d66:	4290      	cmp	r0, r2
 8005d68:	f43f af5b 	beq.w	8005c22 <HAL_GPIO_Init+0x12>
 8005d6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d70:	4290      	cmp	r0, r2
 8005d72:	d00e      	beq.n	8005d92 <HAL_GPIO_Init+0x182>
 8005d74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d78:	4290      	cmp	r0, r2
 8005d7a:	d00c      	beq.n	8005d96 <HAL_GPIO_Init+0x186>
 8005d7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d80:	4290      	cmp	r0, r2
 8005d82:	d00a      	beq.n	8005d9a <HAL_GPIO_Init+0x18a>
 8005d84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d88:	4290      	cmp	r0, r2
 8005d8a:	f43f af48 	beq.w	8005c1e <HAL_GPIO_Init+0xe>
 8005d8e:	2207      	movs	r2, #7
 8005d90:	e748      	b.n	8005c24 <HAL_GPIO_Init+0x14>
 8005d92:	2201      	movs	r2, #1
 8005d94:	e746      	b.n	8005c24 <HAL_GPIO_Init+0x14>
 8005d96:	2202      	movs	r2, #2
 8005d98:	e744      	b.n	8005c24 <HAL_GPIO_Init+0x14>
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	e742      	b.n	8005c24 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8005d9e:	b003      	add	sp, #12
 8005da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005da2:	4770      	bx	lr
 8005da4:	40013800 	.word	0x40013800
 8005da8:	40013c00 	.word	0x40013c00
 8005dac:	40023800 	.word	0x40023800
 8005db0:	40020000 	.word	0x40020000

08005db4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005db4:	6903      	ldr	r3, [r0, #16]
 8005db6:	4219      	tst	r1, r3
 8005db8:	d101      	bne.n	8005dbe <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005dba:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8005dbc:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8005dbe:	2001      	movs	r0, #1
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005dc2:	b912      	cbnz	r2, 8005dca <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005dc4:	0409      	lsls	r1, r1, #16
 8005dc6:	6181      	str	r1, [r0, #24]
  }
}
 8005dc8:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8005dca:	6181      	str	r1, [r0, #24]
 8005dcc:	4770      	bx	lr
	...

08005dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005dd0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005dd2:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	4203      	tst	r3, r0
 8005dd8:	d100      	bne.n	8005ddc <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8005dda:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ddc:	4b02      	ldr	r3, [pc, #8]	; (8005de8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005dde:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005de0:	f7fd ffde 	bl	8003da0 <HAL_GPIO_EXTI_Callback>
}
 8005de4:	e7f9      	b.n	8005dda <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005de6:	bf00      	nop
 8005de8:	40013c00 	.word	0x40013c00

08005dec <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dec:	6803      	ldr	r3, [r0, #0]
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005df4:	d011      	beq.n	8005e1a <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005df6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dfa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e00:	2220      	movs	r2, #32
 8005e02:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e06:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e0a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005e0c:	f042 0204 	orr.w	r2, r2, #4
 8005e10:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e12:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8005e16:	2001      	movs	r0, #1
 8005e18:	4770      	bx	lr
  }
  return HAL_OK;
 8005e1a:	2000      	movs	r0, #0
}
 8005e1c:	4770      	bx	lr

08005e1e <I2C_WaitOnFlagUntilTimeout>:
{
 8005e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e20:	4606      	mov	r6, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	4617      	mov	r7, r2
 8005e26:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e28:	e022      	b.n	8005e70 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2a:	f7ff fa7d 	bl	8005328 <HAL_GetTick>
 8005e2e:	9b06      	ldr	r3, [sp, #24]
 8005e30:	1ac0      	subs	r0, r0, r3
 8005e32:	42a8      	cmp	r0, r5
 8005e34:	d800      	bhi.n	8005e38 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8005e36:	b9dd      	cbnz	r5, 8005e70 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e42:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e46:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8005e48:	f042 0220 	orr.w	r2, r2, #32
 8005e4c:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005e4e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8005e52:	2001      	movs	r0, #1
 8005e54:	e01a      	b.n	8005e8c <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e56:	6833      	ldr	r3, [r6, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	ea24 0303 	bic.w	r3, r4, r3
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	fab3 f383 	clz	r3, r3
 8005e64:	095b      	lsrs	r3, r3, #5
 8005e66:	429f      	cmp	r7, r3
 8005e68:	d10f      	bne.n	8005e8a <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8005e6a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005e6e:	d1dc      	bne.n	8005e2a <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e70:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d0ee      	beq.n	8005e56 <I2C_WaitOnFlagUntilTimeout+0x38>
 8005e78:	6833      	ldr	r3, [r6, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	ea24 0303 	bic.w	r3, r4, r3
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	fab3 f383 	clz	r3, r3
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	e7ed      	b.n	8005e66 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8005e8a:	2000      	movs	r0, #0
}
 8005e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e90:	4604      	mov	r4, r0
 8005e92:	460d      	mov	r5, r1
 8005e94:	4616      	mov	r6, r2
 8005e96:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e98:	e03c      	b.n	8005f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ea8:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eb4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005eb8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005eba:	f042 0204 	orr.w	r2, r2, #4
 8005ebe:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005ec0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8005ec4:	2001      	movs	r0, #1
 8005ec6:	e033      	b.n	8005f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec8:	f7ff fa2e 	bl	8005328 <HAL_GetTick>
 8005ecc:	1bc0      	subs	r0, r0, r7
 8005ece:	42b0      	cmp	r0, r6
 8005ed0:	d800      	bhi.n	8005ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8005ed2:	b9fe      	cbnz	r6, 8005f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ede:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ee2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005ee4:	f042 0220 	orr.w	r2, r2, #32
 8005ee8:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005eea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005eee:	2001      	movs	r0, #1
 8005ef0:	e01e      	b.n	8005f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	ea25 0303 	bic.w	r3, r5, r3
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3300      	adds	r3, #0
 8005efe:	bf18      	it	ne
 8005f00:	2301      	movne	r3, #1
 8005f02:	b1a3      	cbz	r3, 8005f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	695a      	ldr	r2, [r3, #20]
 8005f08:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005f0c:	d1c5      	bne.n	8005e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8005f0e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8005f12:	d1d9      	bne.n	8005ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f14:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d0ea      	beq.n	8005ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	ea25 0303 	bic.w	r3, r5, r3
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3300      	adds	r3, #0
 8005f28:	bf18      	it	ne
 8005f2a:	2301      	movne	r3, #1
 8005f2c:	e7e9      	b.n	8005f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8005f2e:	2000      	movs	r0, #0
}
 8005f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f32 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005f32:	b570      	push	{r4, r5, r6, lr}
 8005f34:	4604      	mov	r4, r0
 8005f36:	460d      	mov	r5, r1
 8005f38:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f42:	d11c      	bne.n	8005f7e <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f44:	4620      	mov	r0, r4
 8005f46:	f7ff ff51 	bl	8005dec <I2C_IsAcknowledgeFailed>
 8005f4a:	b9d0      	cbnz	r0, 8005f82 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005f4c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005f50:	d0f3      	beq.n	8005f3a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f52:	f7ff f9e9 	bl	8005328 <HAL_GetTick>
 8005f56:	1b80      	subs	r0, r0, r6
 8005f58:	42a8      	cmp	r0, r5
 8005f5a:	d801      	bhi.n	8005f60 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005f5c:	2d00      	cmp	r5, #0
 8005f5e:	d1ec      	bne.n	8005f3a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f60:	2300      	movs	r3, #0
 8005f62:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f64:	2220      	movs	r2, #32
 8005f66:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f6e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f70:	f042 0220 	orr.w	r2, r2, #32
 8005f74:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005f76:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	e000      	b.n	8005f80 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8005f7e:	2000      	movs	r0, #0
}
 8005f80:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005f82:	2001      	movs	r0, #1
 8005f84:	e7fc      	b.n	8005f80 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08005f88 <I2C_RequestMemoryWrite>:
{
 8005f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	4604      	mov	r4, r0
 8005f90:	4688      	mov	r8, r1
 8005f92:	4616      	mov	r6, r2
 8005f94:	461f      	mov	r7, r3
 8005f96:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f98:	6802      	ldr	r2, [r0, #0]
 8005f9a:	6813      	ldr	r3, [r2, #0]
 8005f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa0:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fa2:	9500      	str	r5, [sp, #0]
 8005fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fac:	f7ff ff37 	bl	8005e1e <I2C_WaitOnFlagUntilTimeout>
 8005fb0:	b160      	cbz	r0, 8005fcc <I2C_RequestMemoryWrite+0x44>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005fba:	d04f      	beq.n	800605c <I2C_RequestMemoryWrite+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fc0:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	b004      	add	sp, #16
 8005fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fcc:	6822      	ldr	r2, [r4, #0]
 8005fce:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8005fd2:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fd4:	462b      	mov	r3, r5
 8005fd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fd8:	4921      	ldr	r1, [pc, #132]	; (8006060 <I2C_RequestMemoryWrite+0xd8>)
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f7ff ff57 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fe0:	b108      	cbz	r0, 8005fe6 <I2C_RequestMemoryWrite+0x5e>
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e7ee      	b.n	8005fc4 <I2C_RequestMemoryWrite+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	9303      	str	r3, [sp, #12]
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	695a      	ldr	r2, [r3, #20]
 8005fee:	9203      	str	r2, [sp, #12]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	9303      	str	r3, [sp, #12]
 8005ff4:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ff6:	462a      	mov	r2, r5
 8005ff8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f7ff ff99 	bl	8005f32 <I2C_WaitOnTXEFlagUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	b158      	cbz	r0, 800601c <I2C_RequestMemoryWrite+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006004:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006006:	2b04      	cmp	r3, #4
 8006008:	d001      	beq.n	800600e <I2C_RequestMemoryWrite+0x86>
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e7da      	b.n	8005fc4 <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800600e:	6822      	ldr	r2, [r4, #0]
 8006010:	6813      	ldr	r3, [r2, #0]
 8006012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006016:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e7d3      	b.n	8005fc4 <I2C_RequestMemoryWrite+0x3c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800601c:	2f01      	cmp	r7, #1
 800601e:	d00e      	beq.n	800603e <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	0a32      	lsrs	r2, r6, #8
 8006024:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006026:	462a      	mov	r2, r5
 8006028:	990a      	ldr	r1, [sp, #40]	; 0x28
 800602a:	4620      	mov	r0, r4
 800602c:	f7ff ff81 	bl	8005f32 <I2C_WaitOnTXEFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	b178      	cbz	r0, 8006054 <I2C_RequestMemoryWrite+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006034:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006036:	2b04      	cmp	r3, #4
 8006038:	d005      	beq.n	8006046 <I2C_RequestMemoryWrite+0xbe>
      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e7c2      	b.n	8005fc4 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800603e:	6822      	ldr	r2, [r4, #0]
 8006040:	b2f6      	uxtb	r6, r6
 8006042:	6116      	str	r6, [r2, #16]
 8006044:	e7be      	b.n	8005fc4 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006046:	6822      	ldr	r2, [r4, #0]
 8006048:	6813      	ldr	r3, [r2, #0]
 800604a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800604e:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e7b7      	b.n	8005fc4 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006054:	6822      	ldr	r2, [r4, #0]
 8006056:	b2f6      	uxtb	r6, r6
 8006058:	6116      	str	r6, [r2, #16]
 800605a:	e7b3      	b.n	8005fc4 <I2C_RequestMemoryWrite+0x3c>
    return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e7b1      	b.n	8005fc4 <I2C_RequestMemoryWrite+0x3c>
 8006060:	00010002 	.word	0x00010002

08006064 <I2C_RequestMemoryRead>:
{
 8006064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	4604      	mov	r4, r0
 800606c:	460e      	mov	r6, r1
 800606e:	4617      	mov	r7, r2
 8006070:	4698      	mov	r8, r3
 8006072:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006074:	6802      	ldr	r2, [r0, #0]
 8006076:	6813      	ldr	r3, [r2, #0]
 8006078:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800607c:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800607e:	6802      	ldr	r2, [r0, #0]
 8006080:	6813      	ldr	r3, [r2, #0]
 8006082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006086:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006088:	9500      	str	r5, [sp, #0]
 800608a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608c:	2200      	movs	r2, #0
 800608e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006092:	f7ff fec4 	bl	8005e1e <I2C_WaitOnFlagUntilTimeout>
 8006096:	b168      	cbz	r0, 80060b4 <I2C_RequestMemoryRead+0x50>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80060a0:	f000 8089 	beq.w	80061b6 <I2C_RequestMemoryRead+0x152>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060a8:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	b004      	add	sp, #16
 80060b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060b4:	b2f6      	uxtb	r6, r6
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 80060bc:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060be:	462b      	mov	r3, r5
 80060c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060c2:	493f      	ldr	r1, [pc, #252]	; (80061c0 <I2C_RequestMemoryRead+0x15c>)
 80060c4:	4620      	mov	r0, r4
 80060c6:	f7ff fee2 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060ca:	b108      	cbz	r0, 80060d0 <I2C_RequestMemoryRead+0x6c>
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e7ed      	b.n	80060ac <I2C_RequestMemoryRead+0x48>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060d0:	2300      	movs	r3, #0
 80060d2:	9303      	str	r3, [sp, #12]
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	695a      	ldr	r2, [r3, #20]
 80060d8:	9203      	str	r2, [sp, #12]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	9303      	str	r3, [sp, #12]
 80060de:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060e0:	462a      	mov	r2, r5
 80060e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80060e4:	4620      	mov	r0, r4
 80060e6:	f7ff ff24 	bl	8005f32 <I2C_WaitOnTXEFlagUntilTimeout>
 80060ea:	b158      	cbz	r0, 8006104 <I2C_RequestMemoryRead+0xa0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d001      	beq.n	80060f6 <I2C_RequestMemoryRead+0x92>
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e7da      	b.n	80060ac <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060f6:	6822      	ldr	r2, [r4, #0]
 80060f8:	6813      	ldr	r3, [r2, #0]
 80060fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060fe:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e7d3      	b.n	80060ac <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006104:	f1b8 0f01 	cmp.w	r8, #1
 8006108:	d10d      	bne.n	8006126 <I2C_RequestMemoryRead+0xc2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	b2ff      	uxtb	r7, r7
 800610e:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006110:	462a      	mov	r2, r5
 8006112:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006114:	4620      	mov	r0, r4
 8006116:	f7ff ff0c 	bl	8005f32 <I2C_WaitOnTXEFlagUntilTimeout>
 800611a:	b320      	cbz	r0, 8006166 <I2C_RequestMemoryRead+0x102>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800611c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800611e:	2b04      	cmp	r3, #4
 8006120:	d01a      	beq.n	8006158 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e7c2      	b.n	80060ac <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	0a3a      	lsrs	r2, r7, #8
 800612a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800612c:	462a      	mov	r2, r5
 800612e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006130:	4620      	mov	r0, r4
 8006132:	f7ff fefe 	bl	8005f32 <I2C_WaitOnTXEFlagUntilTimeout>
 8006136:	b158      	cbz	r0, 8006150 <I2C_RequestMemoryRead+0xec>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006138:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800613a:	2b04      	cmp	r3, #4
 800613c:	d001      	beq.n	8006142 <I2C_RequestMemoryRead+0xde>
      return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e7b4      	b.n	80060ac <I2C_RequestMemoryRead+0x48>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006142:	6822      	ldr	r2, [r4, #0]
 8006144:	6813      	ldr	r3, [r2, #0]
 8006146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800614a:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e7ad      	b.n	80060ac <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	b2ff      	uxtb	r7, r7
 8006154:	611f      	str	r7, [r3, #16]
 8006156:	e7db      	b.n	8006110 <I2C_RequestMemoryRead+0xac>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006158:	6822      	ldr	r2, [r4, #0]
 800615a:	6813      	ldr	r3, [r2, #0]
 800615c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006160:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e7a2      	b.n	80060ac <I2C_RequestMemoryRead+0x48>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006166:	6822      	ldr	r2, [r4, #0]
 8006168:	6813      	ldr	r3, [r2, #0]
 800616a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800616e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006170:	9500      	str	r5, [sp, #0]
 8006172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006174:	2200      	movs	r2, #0
 8006176:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800617a:	4620      	mov	r0, r4
 800617c:	f7ff fe4f 	bl	8005e1e <I2C_WaitOnFlagUntilTimeout>
 8006180:	b148      	cbz	r0, 8006196 <I2C_RequestMemoryRead+0x132>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f413 7f80 	tst.w	r3, #256	; 0x100
 800618a:	d016      	beq.n	80061ba <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800618c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006190:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e78a      	b.n	80060ac <I2C_RequestMemoryRead+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	f046 0601 	orr.w	r6, r6, #1
 800619c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800619e:	462b      	mov	r3, r5
 80061a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061a2:	4907      	ldr	r1, [pc, #28]	; (80061c0 <I2C_RequestMemoryRead+0x15c>)
 80061a4:	4620      	mov	r0, r4
 80061a6:	f7ff fe72 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2800      	cmp	r0, #0
 80061ae:	f43f af7d 	beq.w	80060ac <I2C_RequestMemoryRead+0x48>
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e77a      	b.n	80060ac <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e778      	b.n	80060ac <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e776      	b.n	80060ac <I2C_RequestMemoryRead+0x48>
 80061be:	bf00      	nop
 80061c0:	00010002 	.word	0x00010002

080061c4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80061c4:	b570      	push	{r4, r5, r6, lr}
 80061c6:	4604      	mov	r4, r0
 80061c8:	460d      	mov	r5, r1
 80061ca:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	f013 0f04 	tst.w	r3, #4
 80061d4:	d11c      	bne.n	8006210 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061d6:	4620      	mov	r0, r4
 80061d8:	f7ff fe08 	bl	8005dec <I2C_IsAcknowledgeFailed>
 80061dc:	b9d0      	cbnz	r0, 8006214 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80061de:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80061e2:	d0f3      	beq.n	80061cc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e4:	f7ff f8a0 	bl	8005328 <HAL_GetTick>
 80061e8:	1b80      	subs	r0, r0, r6
 80061ea:	42a8      	cmp	r0, r5
 80061ec:	d801      	bhi.n	80061f2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80061ee:	2d00      	cmp	r5, #0
 80061f0:	d1ec      	bne.n	80061cc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061f2:	2300      	movs	r3, #0
 80061f4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061f6:	2220      	movs	r2, #32
 80061f8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006200:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006202:	f042 0220 	orr.w	r2, r2, #32
 8006206:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006208:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800620c:	2001      	movs	r0, #1
 800620e:	e000      	b.n	8006212 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8006210:	2000      	movs	r0, #0
}
 8006212:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006214:	2001      	movs	r0, #1
 8006216:	e7fc      	b.n	8006212 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08006218 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	4605      	mov	r5, r0
 800621c:	460c      	mov	r4, r1
 800621e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	695a      	ldr	r2, [r3, #20]
 8006224:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006228:	d129      	bne.n	800627e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800622a:	695a      	ldr	r2, [r3, #20]
 800622c:	f012 0f10 	tst.w	r2, #16
 8006230:	d115      	bne.n	800625e <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006232:	f7ff f879 	bl	8005328 <HAL_GetTick>
 8006236:	1b80      	subs	r0, r0, r6
 8006238:	42a0      	cmp	r0, r4
 800623a:	d801      	bhi.n	8006240 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 800623c:	2c00      	cmp	r4, #0
 800623e:	d1ef      	bne.n	8006220 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006240:	2300      	movs	r3, #0
 8006242:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006244:	2220      	movs	r2, #32
 8006246:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800624a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800624e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8006250:	f042 0220 	orr.w	r2, r2, #32
 8006254:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006256:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800625a:	2001      	movs	r0, #1
}
 800625c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800625e:	f06f 0210 	mvn.w	r2, #16
 8006262:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006264:	2300      	movs	r3, #0
 8006266:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006268:	2220      	movs	r2, #32
 800626a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800626e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006272:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8006274:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006276:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800627a:	2001      	movs	r0, #1
 800627c:	e7ee      	b.n	800625c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 800627e:	2000      	movs	r0, #0
 8006280:	e7ec      	b.n	800625c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08006284 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006284:	2800      	cmp	r0, #0
 8006286:	f000 80c8 	beq.w	800641a <HAL_I2C_Init+0x196>
{
 800628a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800628e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006292:	2b00      	cmp	r3, #0
 8006294:	d075      	beq.n	8006382 <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006296:	2324      	movs	r3, #36	; 0x24
 8006298:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800629c:	6822      	ldr	r2, [r4, #0]
 800629e:	6813      	ldr	r3, [r2, #0]
 80062a0:	f023 0301 	bic.w	r3, r3, #1
 80062a4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80062a6:	6822      	ldr	r2, [r4, #0]
 80062a8:	6813      	ldr	r3, [r2, #0]
 80062aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ae:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062b0:	6822      	ldr	r2, [r4, #0]
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062b8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062ba:	f000 fea7 	bl	800700c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062be:	6862      	ldr	r2, [r4, #4]
 80062c0:	4b58      	ldr	r3, [pc, #352]	; (8006424 <HAL_I2C_Init+0x1a0>)
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d862      	bhi.n	800638c <HAL_I2C_Init+0x108>
 80062c6:	4b58      	ldr	r3, [pc, #352]	; (8006428 <HAL_I2C_Init+0x1a4>)
 80062c8:	4298      	cmp	r0, r3
 80062ca:	bf8c      	ite	hi
 80062cc:	2300      	movhi	r3, #0
 80062ce:	2301      	movls	r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f040 80a4 	bne.w	800641e <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 80062d6:	4b55      	ldr	r3, [pc, #340]	; (800642c <HAL_I2C_Init+0x1a8>)
 80062d8:	fba3 2300 	umull	r2, r3, r3, r0
 80062dc:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062de:	6821      	ldr	r1, [r4, #0]
 80062e0:	684a      	ldr	r2, [r1, #4]
 80062e2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80062e6:	431a      	orrs	r2, r3
 80062e8:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062ea:	6825      	ldr	r5, [r4, #0]
 80062ec:	6a2a      	ldr	r2, [r5, #32]
 80062ee:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80062f2:	6866      	ldr	r6, [r4, #4]
 80062f4:	494b      	ldr	r1, [pc, #300]	; (8006424 <HAL_I2C_Init+0x1a0>)
 80062f6:	428e      	cmp	r6, r1
 80062f8:	d84e      	bhi.n	8006398 <HAL_I2C_Init+0x114>
 80062fa:	3301      	adds	r3, #1
 80062fc:	4313      	orrs	r3, r2
 80062fe:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006300:	6825      	ldr	r5, [r4, #0]
 8006302:	69e9      	ldr	r1, [r5, #28]
 8006304:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8006308:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800630c:	6863      	ldr	r3, [r4, #4]
 800630e:	4a45      	ldr	r2, [pc, #276]	; (8006424 <HAL_I2C_Init+0x1a0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d84b      	bhi.n	80063ac <HAL_I2C_Init+0x128>
 8006314:	3801      	subs	r0, #1
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	fbb0 f3f3 	udiv	r3, r0, r3
 800631c:	3301      	adds	r3, #1
 800631e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006322:	2b04      	cmp	r3, #4
 8006324:	bf38      	it	cc
 8006326:	2304      	movcc	r3, #4
 8006328:	430b      	orrs	r3, r1
 800632a:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800632c:	6821      	ldr	r1, [r4, #0]
 800632e:	680b      	ldr	r3, [r1, #0]
 8006330:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006334:	69e2      	ldr	r2, [r4, #28]
 8006336:	6a20      	ldr	r0, [r4, #32]
 8006338:	4302      	orrs	r2, r0
 800633a:	4313      	orrs	r3, r2
 800633c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800633e:	6821      	ldr	r1, [r4, #0]
 8006340:	688b      	ldr	r3, [r1, #8]
 8006342:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800634a:	6922      	ldr	r2, [r4, #16]
 800634c:	68e0      	ldr	r0, [r4, #12]
 800634e:	4302      	orrs	r2, r0
 8006350:	4313      	orrs	r3, r2
 8006352:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006354:	6821      	ldr	r1, [r4, #0]
 8006356:	68cb      	ldr	r3, [r1, #12]
 8006358:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800635c:	6962      	ldr	r2, [r4, #20]
 800635e:	69a0      	ldr	r0, [r4, #24]
 8006360:	4302      	orrs	r2, r0
 8006362:	4313      	orrs	r3, r2
 8006364:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006366:	6822      	ldr	r2, [r4, #0]
 8006368:	6813      	ldr	r3, [r2, #0]
 800636a:	f043 0301 	orr.w	r3, r3, #1
 800636e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006370:	2000      	movs	r0, #0
 8006372:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006374:	2320      	movs	r3, #32
 8006376:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800637a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800637c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8006380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006382:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8006386:	f7fe f8c7 	bl	8004518 <HAL_I2C_MspInit>
 800638a:	e784      	b.n	8006296 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800638c:	4b28      	ldr	r3, [pc, #160]	; (8006430 <HAL_I2C_Init+0x1ac>)
 800638e:	4298      	cmp	r0, r3
 8006390:	bf8c      	ite	hi
 8006392:	2300      	movhi	r3, #0
 8006394:	2301      	movls	r3, #1
 8006396:	e79b      	b.n	80062d0 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006398:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800639c:	fb01 f303 	mul.w	r3, r1, r3
 80063a0:	4924      	ldr	r1, [pc, #144]	; (8006434 <HAL_I2C_Init+0x1b0>)
 80063a2:	fba1 1303 	umull	r1, r3, r1, r3
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	3301      	adds	r3, #1
 80063aa:	e7a7      	b.n	80062fc <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063ac:	68a2      	ldr	r2, [r4, #8]
 80063ae:	b9ba      	cbnz	r2, 80063e0 <HAL_I2C_Init+0x15c>
 80063b0:	1e46      	subs	r6, r0, #1
 80063b2:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80063b6:	fbb6 f6f7 	udiv	r6, r6, r7
 80063ba:	3601      	adds	r6, #1
 80063bc:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80063c0:	fab6 f686 	clz	r6, r6
 80063c4:	0976      	lsrs	r6, r6, #5
 80063c6:	bb36      	cbnz	r6, 8006416 <HAL_I2C_Init+0x192>
 80063c8:	b9c2      	cbnz	r2, 80063fc <HAL_I2C_Init+0x178>
 80063ca:	3801      	subs	r0, #1
 80063cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80063d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80063d4:	3301      	adds	r3, #1
 80063d6:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80063da:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80063de:	e7a3      	b.n	8006328 <HAL_I2C_Init+0xa4>
 80063e0:	1e46      	subs	r6, r0, #1
 80063e2:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80063e6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80063ea:	fbb6 f6f7 	udiv	r6, r6, r7
 80063ee:	3601      	adds	r6, #1
 80063f0:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80063f4:	fab6 f686 	clz	r6, r6
 80063f8:	0976      	lsrs	r6, r6, #5
 80063fa:	e7e4      	b.n	80063c6 <HAL_I2C_Init+0x142>
 80063fc:	3801      	subs	r0, #1
 80063fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006402:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006406:	fbb0 f2f3 	udiv	r2, r0, r3
 800640a:	3201      	adds	r2, #1
 800640c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006410:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8006414:	e788      	b.n	8006328 <HAL_I2C_Init+0xa4>
 8006416:	2301      	movs	r3, #1
 8006418:	e786      	b.n	8006328 <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 800641a:	2001      	movs	r0, #1
}
 800641c:	4770      	bx	lr
    return HAL_ERROR;
 800641e:	2001      	movs	r0, #1
 8006420:	e7ae      	b.n	8006380 <HAL_I2C_Init+0xfc>
 8006422:	bf00      	nop
 8006424:	000186a0 	.word	0x000186a0
 8006428:	001e847f 	.word	0x001e847f
 800642c:	431bde83 	.word	0x431bde83
 8006430:	003d08ff 	.word	0x003d08ff
 8006434:	10624dd3 	.word	0x10624dd3

08006438 <HAL_I2C_Mem_Write>:
{
 8006438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	4604      	mov	r4, r0
 8006440:	460e      	mov	r6, r1
 8006442:	4617      	mov	r7, r2
 8006444:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8006446:	f7fe ff6f 	bl	8005328 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800644a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b20      	cmp	r3, #32
 8006452:	d004      	beq.n	800645e <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
}
 8006456:	4618      	mov	r0, r3
 8006458:	b002      	add	sp, #8
 800645a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800645e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006460:	9000      	str	r0, [sp, #0]
 8006462:	2319      	movs	r3, #25
 8006464:	2201      	movs	r2, #1
 8006466:	494c      	ldr	r1, [pc, #304]	; (8006598 <HAL_I2C_Mem_Write+0x160>)
 8006468:	4620      	mov	r0, r4
 800646a:	f7ff fcd8 	bl	8005e1e <I2C_WaitOnFlagUntilTimeout>
 800646e:	2800      	cmp	r0, #0
 8006470:	f040 808b 	bne.w	800658a <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8006474:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006478:	2b01      	cmp	r3, #1
 800647a:	f000 8088 	beq.w	800658e <HAL_I2C_Mem_Write+0x156>
 800647e:	2301      	movs	r3, #1
 8006480:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	f012 0f01 	tst.w	r2, #1
 800648c:	d103      	bne.n	8006496 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	f042 0201 	orr.w	r2, r2, #1
 8006494:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006496:	6822      	ldr	r2, [r4, #0]
 8006498:	6813      	ldr	r3, [r2, #0]
 800649a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800649e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064a0:	2321      	movs	r3, #33	; 0x21
 80064a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064a6:	2340      	movs	r3, #64	; 0x40
 80064a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80064b0:	9b08      	ldr	r3, [sp, #32]
 80064b2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064b4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80064b8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80064bc:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064be:	4b37      	ldr	r3, [pc, #220]	; (800659c <HAL_I2C_Mem_Write+0x164>)
 80064c0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064c2:	9501      	str	r5, [sp, #4]
 80064c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	4643      	mov	r3, r8
 80064ca:	463a      	mov	r2, r7
 80064cc:	4631      	mov	r1, r6
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7ff fd5a 	bl	8005f88 <I2C_RequestMemoryWrite>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d15c      	bne.n	8006592 <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 80064d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d034      	beq.n	8006548 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064de:	462a      	mov	r2, r5
 80064e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064e2:	4620      	mov	r0, r4
 80064e4:	f7ff fd25 	bl	8005f32 <I2C_WaitOnTXEFlagUntilTimeout>
 80064e8:	bb10      	cbnz	r0, 8006530 <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	7812      	ldrb	r2, [r2, #0]
 80064f0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80064f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064f4:	1c4b      	adds	r3, r1, #1
 80064f6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80064f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006500:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006502:	3a01      	subs	r2, #1
 8006504:	b292      	uxth	r2, r2
 8006506:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006508:	6822      	ldr	r2, [r4, #0]
 800650a:	6950      	ldr	r0, [r2, #20]
 800650c:	f010 0f04 	tst.w	r0, #4
 8006510:	d0e2      	beq.n	80064d8 <HAL_I2C_Mem_Write+0xa0>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0e0      	beq.n	80064d8 <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006516:	784b      	ldrb	r3, [r1, #1]
 8006518:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800651a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800651c:	3301      	adds	r3, #1
 800651e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006520:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006522:	3b01      	subs	r3, #1
 8006524:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006526:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006528:	3b01      	subs	r3, #1
 800652a:	b29b      	uxth	r3, r3
 800652c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800652e:	e7d3      	b.n	80064d8 <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006530:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006532:	2b04      	cmp	r3, #4
 8006534:	d001      	beq.n	800653a <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e78d      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800653a:	6822      	ldr	r2, [r4, #0]
 800653c:	6813      	ldr	r3, [r2, #0]
 800653e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006542:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e786      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006548:	462a      	mov	r2, r5
 800654a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800654c:	4620      	mov	r0, r4
 800654e:	f7ff fe39 	bl	80061c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	b158      	cbz	r0, 800656e <HAL_I2C_Mem_Write+0x136>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006558:	2b04      	cmp	r3, #4
 800655a:	d001      	beq.n	8006560 <HAL_I2C_Mem_Write+0x128>
      return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e77a      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006560:	6822      	ldr	r2, [r4, #0]
 8006562:	6813      	ldr	r3, [r2, #0]
 8006564:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006568:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e773      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656e:	6821      	ldr	r1, [r4, #0]
 8006570:	680a      	ldr	r2, [r1, #0]
 8006572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006576:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006578:	2220      	movs	r2, #32
 800657a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800657e:	2200      	movs	r2, #0
 8006580:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8006584:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 8006588:	e765      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 800658a:	2302      	movs	r3, #2
 800658c:	e763      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 800658e:	2302      	movs	r3, #2
 8006590:	e761      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e75f      	b.n	8006456 <HAL_I2C_Mem_Write+0x1e>
 8006596:	bf00      	nop
 8006598:	00100002 	.word	0x00100002
 800659c:	ffff0000 	.word	0xffff0000

080065a0 <HAL_I2C_Mem_Read>:
{
 80065a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a4:	b086      	sub	sp, #24
 80065a6:	4604      	mov	r4, r0
 80065a8:	460e      	mov	r6, r1
 80065aa:	4617      	mov	r7, r2
 80065ac:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 80065ae:	f7fe febb 	bl	8005328 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80065b2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d004      	beq.n	80065c6 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 80065bc:	2602      	movs	r6, #2
}
 80065be:	4630      	mov	r0, r6
 80065c0:	b006      	add	sp, #24
 80065c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065c8:	9000      	str	r0, [sp, #0]
 80065ca:	2319      	movs	r3, #25
 80065cc:	2201      	movs	r2, #1
 80065ce:	499e      	ldr	r1, [pc, #632]	; (8006848 <HAL_I2C_Mem_Read+0x2a8>)
 80065d0:	4620      	mov	r0, r4
 80065d2:	f7ff fc24 	bl	8005e1e <I2C_WaitOnFlagUntilTimeout>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f040 8134 	bne.w	8006844 <HAL_I2C_Mem_Read+0x2a4>
    __HAL_LOCK(hi2c);
 80065dc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	f000 8137 	beq.w	8006854 <HAL_I2C_Mem_Read+0x2b4>
 80065e6:	2301      	movs	r3, #1
 80065e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	f012 0f01 	tst.w	r2, #1
 80065f4:	d103      	bne.n	80065fe <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	f042 0201 	orr.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065fe:	6822      	ldr	r2, [r4, #0]
 8006600:	6813      	ldr	r3, [r2, #0]
 8006602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006606:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006608:	2322      	movs	r3, #34	; 0x22
 800660a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800660e:	2340      	movs	r3, #64	; 0x40
 8006610:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006614:	2300      	movs	r3, #0
 8006616:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800661a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800661c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8006620:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006622:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006624:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006626:	4b89      	ldr	r3, [pc, #548]	; (800684c <HAL_I2C_Mem_Read+0x2ac>)
 8006628:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800662a:	9501      	str	r5, [sp, #4]
 800662c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	4643      	mov	r3, r8
 8006632:	463a      	mov	r2, r7
 8006634:	4631      	mov	r1, r6
 8006636:	4620      	mov	r0, r4
 8006638:	f7ff fd14 	bl	8006064 <I2C_RequestMemoryRead>
 800663c:	4606      	mov	r6, r0
 800663e:	2800      	cmp	r0, #0
 8006640:	f040 810a 	bne.w	8006858 <HAL_I2C_Mem_Read+0x2b8>
    if (hi2c->XferSize == 0U)
 8006644:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006646:	b95b      	cbnz	r3, 8006660 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006648:	9302      	str	r3, [sp, #8]
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	9202      	str	r2, [sp, #8]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	9202      	str	r2, [sp, #8]
 8006654:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	e072      	b.n	8006746 <HAL_I2C_Mem_Read+0x1a6>
    else if (hi2c->XferSize == 1U)
 8006660:	2b01      	cmp	r3, #1
 8006662:	d00a      	beq.n	800667a <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8006664:	2b02      	cmp	r3, #2
 8006666:	d01a      	beq.n	800669e <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006668:	2300      	movs	r3, #0
 800666a:	9305      	str	r3, [sp, #20]
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	695a      	ldr	r2, [r3, #20]
 8006670:	9205      	str	r2, [sp, #20]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	9305      	str	r3, [sp, #20]
 8006676:	9b05      	ldr	r3, [sp, #20]
 8006678:	e065      	b.n	8006746 <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800667a:	6822      	ldr	r2, [r4, #0]
 800667c:	6813      	ldr	r3, [r2, #0]
 800667e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006682:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006684:	2300      	movs	r3, #0
 8006686:	9303      	str	r3, [sp, #12]
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	695a      	ldr	r2, [r3, #20]
 800668c:	9203      	str	r2, [sp, #12]
 800668e:	699a      	ldr	r2, [r3, #24]
 8006690:	9203      	str	r2, [sp, #12]
 8006692:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	e053      	b.n	8006746 <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800669e:	6822      	ldr	r2, [r4, #0]
 80066a0:	6813      	ldr	r3, [r2, #0]
 80066a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066a6:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	6813      	ldr	r3, [r2, #0]
 80066ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80066b0:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066b2:	2300      	movs	r3, #0
 80066b4:	9304      	str	r3, [sp, #16]
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	9204      	str	r2, [sp, #16]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	9304      	str	r3, [sp, #16]
 80066c0:	9b04      	ldr	r3, [sp, #16]
 80066c2:	e040      	b.n	8006746 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066c4:	462a      	mov	r2, r5
 80066c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80066c8:	4620      	mov	r0, r4
 80066ca:	f7ff fda5 	bl	8006218 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	f040 80c4 	bne.w	800685c <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066da:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80066dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066de:	3301      	adds	r3, #1
 80066e0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80066e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80066e4:	3b01      	subs	r3, #1
 80066e6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80066e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066ea:	3b01      	subs	r3, #1
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	8563      	strh	r3, [r4, #42]	; 0x2a
 80066f0:	e029      	b.n	8006746 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066f2:	9500      	str	r5, [sp, #0]
 80066f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066f6:	2200      	movs	r2, #0
 80066f8:	4955      	ldr	r1, [pc, #340]	; (8006850 <HAL_I2C_Mem_Read+0x2b0>)
 80066fa:	4620      	mov	r0, r4
 80066fc:	f7ff fb8f 	bl	8005e1e <I2C_WaitOnFlagUntilTimeout>
 8006700:	2800      	cmp	r0, #0
 8006702:	f040 80ad 	bne.w	8006860 <HAL_I2C_Mem_Read+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006706:	6822      	ldr	r2, [r4, #0]
 8006708:	6813      	ldr	r3, [r2, #0]
 800670a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800670e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	691a      	ldr	r2, [r3, #16]
 8006714:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006716:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006718:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800671a:	1c53      	adds	r3, r2, #1
 800671c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800671e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006720:	3b01      	subs	r3, #1
 8006722:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006724:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006726:	3b01      	subs	r3, #1
 8006728:	b29b      	uxth	r3, r3
 800672a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006734:	3301      	adds	r3, #1
 8006736:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006738:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800673a:	3b01      	subs	r3, #1
 800673c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800673e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006740:	3b01      	subs	r3, #1
 8006742:	b29b      	uxth	r3, r3
 8006744:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006746:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006748:	2b00      	cmp	r3, #0
 800674a:	d072      	beq.n	8006832 <HAL_I2C_Mem_Read+0x292>
      if (hi2c->XferSize <= 3U)
 800674c:	2b03      	cmp	r3, #3
 800674e:	d849      	bhi.n	80067e4 <HAL_I2C_Mem_Read+0x244>
        if (hi2c->XferSize == 1U)
 8006750:	2b01      	cmp	r3, #1
 8006752:	d0b7      	beq.n	80066c4 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8006754:	2b02      	cmp	r3, #2
 8006756:	d0cc      	beq.n	80066f2 <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006758:	9500      	str	r5, [sp, #0]
 800675a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800675c:	2200      	movs	r2, #0
 800675e:	493c      	ldr	r1, [pc, #240]	; (8006850 <HAL_I2C_Mem_Read+0x2b0>)
 8006760:	4620      	mov	r0, r4
 8006762:	f7ff fb5c 	bl	8005e1e <I2C_WaitOnFlagUntilTimeout>
 8006766:	2800      	cmp	r0, #0
 8006768:	d17c      	bne.n	8006864 <HAL_I2C_Mem_Read+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800676a:	6822      	ldr	r2, [r4, #0]
 800676c:	6813      	ldr	r3, [r2, #0]
 800676e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006772:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800677a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800677c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800677e:	3301      	adds	r3, #1
 8006780:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006782:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006784:	3b01      	subs	r3, #1
 8006786:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006788:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800678a:	3b01      	subs	r3, #1
 800678c:	b29b      	uxth	r3, r3
 800678e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006790:	9500      	str	r5, [sp, #0]
 8006792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006794:	2200      	movs	r2, #0
 8006796:	492e      	ldr	r1, [pc, #184]	; (8006850 <HAL_I2C_Mem_Read+0x2b0>)
 8006798:	4620      	mov	r0, r4
 800679a:	f7ff fb40 	bl	8005e1e <I2C_WaitOnFlagUntilTimeout>
 800679e:	2800      	cmp	r0, #0
 80067a0:	d162      	bne.n	8006868 <HAL_I2C_Mem_Read+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a2:	6822      	ldr	r2, [r4, #0]
 80067a4:	6813      	ldr	r3, [r2, #0]
 80067a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067aa:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	691a      	ldr	r2, [r3, #16]
 80067b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80067b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067b6:	1c53      	adds	r3, r2, #1
 80067b8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80067ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80067bc:	3b01      	subs	r3, #1
 80067be:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80067c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80067ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067d0:	3301      	adds	r3, #1
 80067d2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80067d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80067d6:	3b01      	subs	r3, #1
 80067d8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80067da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29b      	uxth	r3, r3
 80067e0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80067e2:	e7b0      	b.n	8006746 <HAL_I2C_Mem_Read+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067e4:	462a      	mov	r2, r5
 80067e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80067e8:	4620      	mov	r0, r4
 80067ea:	f7ff fd15 	bl	8006218 <I2C_WaitOnRXNEFlagUntilTimeout>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d13c      	bne.n	800686c <HAL_I2C_Mem_Read+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	691a      	ldr	r2, [r3, #16]
 80067f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80067fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067fc:	1c53      	adds	r3, r2, #1
 80067fe:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006800:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006802:	3b01      	subs	r3, #1
 8006804:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006806:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006808:	3b01      	subs	r3, #1
 800680a:	b29b      	uxth	r3, r3
 800680c:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	6959      	ldr	r1, [r3, #20]
 8006812:	f011 0f04 	tst.w	r1, #4
 8006816:	d096      	beq.n	8006746 <HAL_I2C_Mem_Read+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800681c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800681e:	3301      	adds	r3, #1
 8006820:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006822:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006824:	3b01      	subs	r3, #1
 8006826:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006828:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800682a:	3b01      	subs	r3, #1
 800682c:	b29b      	uxth	r3, r3
 800682e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006830:	e789      	b.n	8006746 <HAL_I2C_Mem_Read+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006832:	2320      	movs	r3, #32
 8006834:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006838:	2300      	movs	r3, #0
 800683a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800683e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8006842:	e6bc      	b.n	80065be <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 8006844:	2602      	movs	r6, #2
 8006846:	e6ba      	b.n	80065be <HAL_I2C_Mem_Read+0x1e>
 8006848:	00100002 	.word	0x00100002
 800684c:	ffff0000 	.word	0xffff0000
 8006850:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 8006854:	2602      	movs	r6, #2
 8006856:	e6b2      	b.n	80065be <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 8006858:	2601      	movs	r6, #1
 800685a:	e6b0      	b.n	80065be <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 800685c:	2601      	movs	r6, #1
 800685e:	e6ae      	b.n	80065be <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8006860:	2601      	movs	r6, #1
 8006862:	e6ac      	b.n	80065be <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8006864:	2601      	movs	r6, #1
 8006866:	e6aa      	b.n	80065be <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8006868:	2601      	movs	r6, #1
 800686a:	e6a8      	b.n	80065be <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 800686c:	2601      	movs	r6, #1
 800686e:	e6a6      	b.n	80065be <HAL_I2C_Mem_Read+0x1e>

08006870 <HAL_I2C_IsDeviceReady>:
{
 8006870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006874:	b085      	sub	sp, #20
 8006876:	4604      	mov	r4, r0
 8006878:	4688      	mov	r8, r1
 800687a:	4691      	mov	r9, r2
 800687c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800687e:	f7fe fd53 	bl	8005328 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006882:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b20      	cmp	r3, #32
 800688a:	d004      	beq.n	8006896 <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 800688c:	2302      	movs	r3, #2
}
 800688e:	4618      	mov	r0, r3
 8006890:	b005      	add	sp, #20
 8006892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006896:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006898:	9000      	str	r0, [sp, #0]
 800689a:	2319      	movs	r3, #25
 800689c:	2201      	movs	r2, #1
 800689e:	4959      	ldr	r1, [pc, #356]	; (8006a04 <HAL_I2C_IsDeviceReady+0x194>)
 80068a0:	4620      	mov	r0, r4
 80068a2:	f7ff fabc 	bl	8005e1e <I2C_WaitOnFlagUntilTimeout>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	f040 80a1 	bne.w	80069ee <HAL_I2C_IsDeviceReady+0x17e>
    __HAL_LOCK(hi2c);
 80068ac:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	f000 809e 	beq.w	80069f2 <HAL_I2C_IsDeviceReady+0x182>
 80068b6:	2301      	movs	r3, #1
 80068b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	f012 0f01 	tst.w	r2, #1
 80068c4:	d103      	bne.n	80068ce <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	f042 0201 	orr.w	r2, r2, #1
 80068cc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	6813      	ldr	r3, [r2, #0]
 80068d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068d6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80068d8:	2324      	movs	r3, #36	; 0x24
 80068da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068de:	2300      	movs	r3, #0
 80068e0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068e2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80068e6:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 80068e8:	2701      	movs	r7, #1
 80068ea:	e03e      	b.n	800696a <HAL_I2C_IsDeviceReady+0xfa>
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80068f4:	d07f      	beq.n	80069f6 <HAL_I2C_IsDeviceReady+0x186>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068fa:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e7c6      	b.n	800688e <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006900:	23a0      	movs	r3, #160	; 0xa0
 8006902:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	695a      	ldr	r2, [r3, #20]
 800690a:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800690e:	6959      	ldr	r1, [r3, #20]
 8006910:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006914:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2ba0      	cmp	r3, #160	; 0xa0
 800691c:	d009      	beq.n	8006932 <HAL_I2C_IsDeviceReady+0xc2>
 800691e:	b942      	cbnz	r2, 8006932 <HAL_I2C_IsDeviceReady+0xc2>
 8006920:	b939      	cbnz	r1, 8006932 <HAL_I2C_IsDeviceReady+0xc2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006922:	f7fe fd01 	bl	8005328 <HAL_GetTick>
 8006926:	1b80      	subs	r0, r0, r6
 8006928:	42a8      	cmp	r0, r5
 800692a:	d8e9      	bhi.n	8006900 <HAL_I2C_IsDeviceReady+0x90>
 800692c:	2d00      	cmp	r5, #0
 800692e:	d1ea      	bne.n	8006906 <HAL_I2C_IsDeviceReady+0x96>
 8006930:	e7e6      	b.n	8006900 <HAL_I2C_IsDeviceReady+0x90>
      hi2c->State = HAL_I2C_STATE_READY;
 8006932:	2320      	movs	r3, #32
 8006934:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	695a      	ldr	r2, [r3, #20]
 800693c:	f012 0f02 	tst.w	r2, #2
 8006940:	d131      	bne.n	80069a6 <HAL_I2C_IsDeviceReady+0x136>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006948:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006950:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006952:	9600      	str	r6, [sp, #0]
 8006954:	2319      	movs	r3, #25
 8006956:	2201      	movs	r2, #1
 8006958:	492a      	ldr	r1, [pc, #168]	; (8006a04 <HAL_I2C_IsDeviceReady+0x194>)
 800695a:	4620      	mov	r0, r4
 800695c:	f7ff fa5f 	bl	8005e1e <I2C_WaitOnFlagUntilTimeout>
 8006960:	2800      	cmp	r0, #0
 8006962:	d14c      	bne.n	80069fe <HAL_I2C_IsDeviceReady+0x18e>
      I2C_Trials++;
 8006964:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8006966:	454f      	cmp	r7, r9
 8006968:	d239      	bcs.n	80069de <HAL_I2C_IsDeviceReady+0x16e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800696a:	6822      	ldr	r2, [r4, #0]
 800696c:	6813      	ldr	r3, [r2, #0]
 800696e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006972:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006974:	9600      	str	r6, [sp, #0]
 8006976:	462b      	mov	r3, r5
 8006978:	2200      	movs	r2, #0
 800697a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800697e:	4620      	mov	r0, r4
 8006980:	f7ff fa4d 	bl	8005e1e <I2C_WaitOnFlagUntilTimeout>
 8006984:	2800      	cmp	r0, #0
 8006986:	d1b1      	bne.n	80068ec <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 800698e:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8006990:	f7fe fcca 	bl	8005328 <HAL_GetTick>
 8006994:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	695a      	ldr	r2, [r3, #20]
 800699a:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800699e:	6959      	ldr	r1, [r3, #20]
 80069a0:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80069a4:	e7b6      	b.n	8006914 <HAL_I2C_IsDeviceReady+0xa4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ac:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ae:	2300      	movs	r3, #0
 80069b0:	9303      	str	r3, [sp, #12]
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	695a      	ldr	r2, [r3, #20]
 80069b6:	9203      	str	r2, [sp, #12]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	9303      	str	r3, [sp, #12]
 80069bc:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069be:	9600      	str	r6, [sp, #0]
 80069c0:	2319      	movs	r3, #25
 80069c2:	2201      	movs	r2, #1
 80069c4:	490f      	ldr	r1, [pc, #60]	; (8006a04 <HAL_I2C_IsDeviceReady+0x194>)
 80069c6:	4620      	mov	r0, r4
 80069c8:	f7ff fa29 	bl	8005e1e <I2C_WaitOnFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	b9a0      	cbnz	r0, 80069fa <HAL_I2C_IsDeviceReady+0x18a>
        hi2c->State = HAL_I2C_STATE_READY;
 80069d0:	2220      	movs	r2, #32
 80069d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80069d6:	2200      	movs	r2, #0
 80069d8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 80069dc:	e757      	b.n	800688e <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80069de:	2320      	movs	r3, #32
 80069e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80069e4:	2300      	movs	r3, #0
 80069e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e74f      	b.n	800688e <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80069ee:	2302      	movs	r3, #2
 80069f0:	e74d      	b.n	800688e <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80069f2:	2302      	movs	r3, #2
 80069f4:	e74b      	b.n	800688e <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e749      	b.n	800688e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e747      	b.n	800688e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e745      	b.n	800688e <HAL_I2C_IsDeviceReady+0x1e>
 8006a02:	bf00      	nop
 8006a04:	00100002 	.word	0x00100002

08006a08 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	f000 81e0 	beq.w	8006dce <HAL_RCC_OscConfig+0x3c6>
{
 8006a0e:	b570      	push	{r4, r5, r6, lr}
 8006a10:	b082      	sub	sp, #8
 8006a12:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a14:	6803      	ldr	r3, [r0, #0]
 8006a16:	f013 0f01 	tst.w	r3, #1
 8006a1a:	d03b      	beq.n	8006a94 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a1c:	4ba5      	ldr	r3, [pc, #660]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 030c 	and.w	r3, r3, #12
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d02c      	beq.n	8006a82 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a28:	4ba2      	ldr	r3, [pc, #648]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d021      	beq.n	8006a78 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a34:	6863      	ldr	r3, [r4, #4]
 8006a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a3a:	d04f      	beq.n	8006adc <HAL_RCC_OscConfig+0xd4>
 8006a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a40:	d052      	beq.n	8006ae8 <HAL_RCC_OscConfig+0xe0>
 8006a42:	4b9c      	ldr	r3, [pc, #624]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a52:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a54:	6863      	ldr	r3, [r4, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d050      	beq.n	8006afc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a5a:	f7fe fc65 	bl	8005328 <HAL_GetTick>
 8006a5e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a60:	4b94      	ldr	r3, [pc, #592]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006a68:	d114      	bne.n	8006a94 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a6a:	f7fe fc5d 	bl	8005328 <HAL_GetTick>
 8006a6e:	1b40      	subs	r0, r0, r5
 8006a70:	2864      	cmp	r0, #100	; 0x64
 8006a72:	d9f5      	bls.n	8006a60 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8006a74:	2003      	movs	r0, #3
 8006a76:	e1af      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a78:	4b8e      	ldr	r3, [pc, #568]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006a80:	d0d8      	beq.n	8006a34 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a82:	4b8c      	ldr	r3, [pc, #560]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006a8a:	d003      	beq.n	8006a94 <HAL_RCC_OscConfig+0x8c>
 8006a8c:	6863      	ldr	r3, [r4, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 819f 	beq.w	8006dd2 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	f013 0f02 	tst.w	r3, #2
 8006a9a:	d055      	beq.n	8006b48 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a9c:	4b85      	ldr	r3, [pc, #532]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f013 0f0c 	tst.w	r3, #12
 8006aa4:	d03e      	beq.n	8006b24 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aa6:	4b83      	ldr	r3, [pc, #524]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d033      	beq.n	8006b1a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ab2:	68e3      	ldr	r3, [r4, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d068      	beq.n	8006b8a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ab8:	4b7f      	ldr	r3, [pc, #508]	; (8006cb8 <HAL_RCC_OscConfig+0x2b0>)
 8006aba:	2201      	movs	r2, #1
 8006abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006abe:	f7fe fc33 	bl	8005328 <HAL_GetTick>
 8006ac2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac4:	4b7b      	ldr	r3, [pc, #492]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f013 0f02 	tst.w	r3, #2
 8006acc:	d154      	bne.n	8006b78 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ace:	f7fe fc2b 	bl	8005328 <HAL_GetTick>
 8006ad2:	1b40      	subs	r0, r0, r5
 8006ad4:	2802      	cmp	r0, #2
 8006ad6:	d9f5      	bls.n	8006ac4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8006ad8:	2003      	movs	r0, #3
 8006ada:	e17d      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006adc:	4a75      	ldr	r2, [pc, #468]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006ade:	6813      	ldr	r3, [r2, #0]
 8006ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	e7b5      	b.n	8006a54 <HAL_RCC_OscConfig+0x4c>
 8006ae8:	4b72      	ldr	r3, [pc, #456]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	e7ab      	b.n	8006a54 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8006afc:	f7fe fc14 	bl	8005328 <HAL_GetTick>
 8006b00:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b02:	4b6c      	ldr	r3, [pc, #432]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006b0a:	d0c3      	beq.n	8006a94 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b0c:	f7fe fc0c 	bl	8005328 <HAL_GetTick>
 8006b10:	1b40      	subs	r0, r0, r5
 8006b12:	2864      	cmp	r0, #100	; 0x64
 8006b14:	d9f5      	bls.n	8006b02 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8006b16:	2003      	movs	r0, #3
 8006b18:	e15e      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b1a:	4b66      	ldr	r3, [pc, #408]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006b22:	d1c6      	bne.n	8006ab2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b24:	4b63      	ldr	r3, [pc, #396]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f013 0f02 	tst.w	r3, #2
 8006b2c:	d004      	beq.n	8006b38 <HAL_RCC_OscConfig+0x130>
 8006b2e:	68e3      	ldr	r3, [r4, #12]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d001      	beq.n	8006b38 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8006b34:	2001      	movs	r0, #1
 8006b36:	e14f      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b38:	4a5e      	ldr	r2, [pc, #376]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006b3a:	6813      	ldr	r3, [r2, #0]
 8006b3c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006b40:	6921      	ldr	r1, [r4, #16]
 8006b42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006b46:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	f013 0f08 	tst.w	r3, #8
 8006b4e:	d040      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b50:	6963      	ldr	r3, [r4, #20]
 8006b52:	b363      	cbz	r3, 8006bae <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b54:	4b59      	ldr	r3, [pc, #356]	; (8006cbc <HAL_RCC_OscConfig+0x2b4>)
 8006b56:	2201      	movs	r2, #1
 8006b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b5a:	f7fe fbe5 	bl	8005328 <HAL_GetTick>
 8006b5e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b60:	4b54      	ldr	r3, [pc, #336]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b64:	f013 0f02 	tst.w	r3, #2
 8006b68:	d133      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b6a:	f7fe fbdd 	bl	8005328 <HAL_GetTick>
 8006b6e:	1b40      	subs	r0, r0, r5
 8006b70:	2802      	cmp	r0, #2
 8006b72:	d9f5      	bls.n	8006b60 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8006b74:	2003      	movs	r0, #3
 8006b76:	e12f      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b78:	4a4e      	ldr	r2, [pc, #312]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006b7a:	6813      	ldr	r3, [r2, #0]
 8006b7c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006b80:	6921      	ldr	r1, [r4, #16]
 8006b82:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	e7de      	b.n	8006b48 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8006b8a:	4b4b      	ldr	r3, [pc, #300]	; (8006cb8 <HAL_RCC_OscConfig+0x2b0>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006b90:	f7fe fbca 	bl	8005328 <HAL_GetTick>
 8006b94:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b96:	4b47      	ldr	r3, [pc, #284]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f013 0f02 	tst.w	r3, #2
 8006b9e:	d0d3      	beq.n	8006b48 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ba0:	f7fe fbc2 	bl	8005328 <HAL_GetTick>
 8006ba4:	1b40      	subs	r0, r0, r5
 8006ba6:	2802      	cmp	r0, #2
 8006ba8:	d9f5      	bls.n	8006b96 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8006baa:	2003      	movs	r0, #3
 8006bac:	e114      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bae:	4b43      	ldr	r3, [pc, #268]	; (8006cbc <HAL_RCC_OscConfig+0x2b4>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bb4:	f7fe fbb8 	bl	8005328 <HAL_GetTick>
 8006bb8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bba:	4b3e      	ldr	r3, [pc, #248]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bbe:	f013 0f02 	tst.w	r3, #2
 8006bc2:	d006      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bc4:	f7fe fbb0 	bl	8005328 <HAL_GetTick>
 8006bc8:	1b40      	subs	r0, r0, r5
 8006bca:	2802      	cmp	r0, #2
 8006bcc:	d9f5      	bls.n	8006bba <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8006bce:	2003      	movs	r0, #3
 8006bd0:	e102      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	f013 0f04 	tst.w	r3, #4
 8006bd8:	d075      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x2be>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bda:	4b36      	ldr	r3, [pc, #216]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006be2:	d131      	bne.n	8006c48 <HAL_RCC_OscConfig+0x240>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006be4:	2300      	movs	r3, #0
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	4b32      	ldr	r3, [pc, #200]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006bfc:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bfe:	4b30      	ldr	r3, [pc, #192]	; (8006cc0 <HAL_RCC_OscConfig+0x2b8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006c06:	d021      	beq.n	8006c4c <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c08:	68a3      	ldr	r3, [r4, #8]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d032      	beq.n	8006c74 <HAL_RCC_OscConfig+0x26c>
 8006c0e:	2b05      	cmp	r3, #5
 8006c10:	d036      	beq.n	8006c80 <HAL_RCC_OscConfig+0x278>
 8006c12:	4b28      	ldr	r3, [pc, #160]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006c14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c16:	f022 0201 	bic.w	r2, r2, #1
 8006c1a:	671a      	str	r2, [r3, #112]	; 0x70
 8006c1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c1e:	f022 0204 	bic.w	r2, r2, #4
 8006c22:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c24:	68a3      	ldr	r3, [r4, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d034      	beq.n	8006c94 <HAL_RCC_OscConfig+0x28c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c2a:	f7fe fb7d 	bl	8005328 <HAL_GetTick>
 8006c2e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c30:	4b20      	ldr	r3, [pc, #128]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c34:	f013 0f02 	tst.w	r3, #2
 8006c38:	d144      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c3a:	f7fe fb75 	bl	8005328 <HAL_GetTick>
 8006c3e:	1b80      	subs	r0, r0, r6
 8006c40:	2864      	cmp	r0, #100	; 0x64
 8006c42:	d9f5      	bls.n	8006c30 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8006c44:	2003      	movs	r0, #3
 8006c46:	e0c7      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8006c48:	2500      	movs	r5, #0
 8006c4a:	e7d8      	b.n	8006bfe <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c4c:	4a1c      	ldr	r2, [pc, #112]	; (8006cc0 <HAL_RCC_OscConfig+0x2b8>)
 8006c4e:	6813      	ldr	r3, [r2, #0]
 8006c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c54:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006c56:	f7fe fb67 	bl	8005328 <HAL_GetTick>
 8006c5a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c5c:	4b18      	ldr	r3, [pc, #96]	; (8006cc0 <HAL_RCC_OscConfig+0x2b8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006c64:	d1d0      	bne.n	8006c08 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c66:	f7fe fb5f 	bl	8005328 <HAL_GetTick>
 8006c6a:	1b80      	subs	r0, r0, r6
 8006c6c:	2802      	cmp	r0, #2
 8006c6e:	d9f5      	bls.n	8006c5c <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8006c70:	2003      	movs	r0, #3
 8006c72:	e0b1      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c74:	4a0f      	ldr	r2, [pc, #60]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006c76:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006c78:	f043 0301 	orr.w	r3, r3, #1
 8006c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c7e:	e7d1      	b.n	8006c24 <HAL_RCC_OscConfig+0x21c>
 8006c80:	4b0c      	ldr	r3, [pc, #48]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006c82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c84:	f042 0204 	orr.w	r2, r2, #4
 8006c88:	671a      	str	r2, [r3, #112]	; 0x70
 8006c8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c8c:	f042 0201 	orr.w	r2, r2, #1
 8006c90:	671a      	str	r2, [r3, #112]	; 0x70
 8006c92:	e7c7      	b.n	8006c24 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c94:	f7fe fb48 	bl	8005328 <HAL_GetTick>
 8006c98:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c9a:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <HAL_RCC_OscConfig+0x2ac>)
 8006c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9e:	f013 0f02 	tst.w	r3, #2
 8006ca2:	d00f      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ca4:	f7fe fb40 	bl	8005328 <HAL_GetTick>
 8006ca8:	1b80      	subs	r0, r0, r6
 8006caa:	2864      	cmp	r0, #100	; 0x64
 8006cac:	d9f5      	bls.n	8006c9a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006cae:	2003      	movs	r0, #3
 8006cb0:	e092      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
 8006cb2:	bf00      	nop
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	42470000 	.word	0x42470000
 8006cbc:	42470e80 	.word	0x42470e80
 8006cc0:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cc4:	b9ed      	cbnz	r5, 8006d02 <HAL_RCC_OscConfig+0x2fa>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cc6:	69a3      	ldr	r3, [r4, #24]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 8084 	beq.w	8006dd6 <HAL_RCC_OscConfig+0x3ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cce:	4a45      	ldr	r2, [pc, #276]	; (8006de4 <HAL_RCC_OscConfig+0x3dc>)
 8006cd0:	6892      	ldr	r2, [r2, #8]
 8006cd2:	f002 020c 	and.w	r2, r2, #12
 8006cd6:	2a08      	cmp	r2, #8
 8006cd8:	d051      	beq.n	8006d7e <HAL_RCC_OscConfig+0x376>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d017      	beq.n	8006d0e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cde:	4b42      	ldr	r3, [pc, #264]	; (8006de8 <HAL_RCC_OscConfig+0x3e0>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ce4:	f7fe fb20 	bl	8005328 <HAL_GetTick>
 8006ce8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cea:	4b3e      	ldr	r3, [pc, #248]	; (8006de4 <HAL_RCC_OscConfig+0x3dc>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006cf2:	d042      	beq.n	8006d7a <HAL_RCC_OscConfig+0x372>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf4:	f7fe fb18 	bl	8005328 <HAL_GetTick>
 8006cf8:	1b00      	subs	r0, r0, r4
 8006cfa:	2802      	cmp	r0, #2
 8006cfc:	d9f5      	bls.n	8006cea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006cfe:	2003      	movs	r0, #3
 8006d00:	e06a      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d02:	4a38      	ldr	r2, [pc, #224]	; (8006de4 <HAL_RCC_OscConfig+0x3dc>)
 8006d04:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8006d0c:	e7db      	b.n	8006cc6 <HAL_RCC_OscConfig+0x2be>
        __HAL_RCC_PLL_DISABLE();
 8006d0e:	4b36      	ldr	r3, [pc, #216]	; (8006de8 <HAL_RCC_OscConfig+0x3e0>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006d14:	f7fe fb08 	bl	8005328 <HAL_GetTick>
 8006d18:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d1a:	4b32      	ldr	r3, [pc, #200]	; (8006de4 <HAL_RCC_OscConfig+0x3dc>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006d22:	d006      	beq.n	8006d32 <HAL_RCC_OscConfig+0x32a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d24:	f7fe fb00 	bl	8005328 <HAL_GetTick>
 8006d28:	1b40      	subs	r0, r0, r5
 8006d2a:	2802      	cmp	r0, #2
 8006d2c:	d9f5      	bls.n	8006d1a <HAL_RCC_OscConfig+0x312>
            return HAL_TIMEOUT;
 8006d2e:	2003      	movs	r0, #3
 8006d30:	e052      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d32:	69e3      	ldr	r3, [r4, #28]
 8006d34:	6a22      	ldr	r2, [r4, #32]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d3a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006d3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006d40:	0852      	lsrs	r2, r2, #1
 8006d42:	3a01      	subs	r2, #1
 8006d44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006d4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006d4e:	4a25      	ldr	r2, [pc, #148]	; (8006de4 <HAL_RCC_OscConfig+0x3dc>)
 8006d50:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8006d52:	4b25      	ldr	r3, [pc, #148]	; (8006de8 <HAL_RCC_OscConfig+0x3e0>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006d58:	f7fe fae6 	bl	8005328 <HAL_GetTick>
 8006d5c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d5e:	4b21      	ldr	r3, [pc, #132]	; (8006de4 <HAL_RCC_OscConfig+0x3dc>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006d66:	d106      	bne.n	8006d76 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d68:	f7fe fade 	bl	8005328 <HAL_GetTick>
 8006d6c:	1b00      	subs	r0, r0, r4
 8006d6e:	2802      	cmp	r0, #2
 8006d70:	d9f5      	bls.n	8006d5e <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8006d72:	2003      	movs	r0, #3
 8006d74:	e030      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006d76:	2000      	movs	r0, #0
 8006d78:	e02e      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	e02c      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d02c      	beq.n	8006ddc <HAL_RCC_OscConfig+0x3d4>
        pll_config = RCC->PLLCFGR;
 8006d82:	4b18      	ldr	r3, [pc, #96]	; (8006de4 <HAL_RCC_OscConfig+0x3dc>)
 8006d84:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d86:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8006d8a:	69e2      	ldr	r2, [r4, #28]
 8006d8c:	4291      	cmp	r1, r2
 8006d8e:	d001      	beq.n	8006d94 <HAL_RCC_OscConfig+0x38c>
          return HAL_ERROR;
 8006d90:	2001      	movs	r0, #1
 8006d92:	e021      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d98:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d9a:	428a      	cmp	r2, r1
 8006d9c:	d001      	beq.n	8006da2 <HAL_RCC_OscConfig+0x39a>
          return HAL_ERROR;
 8006d9e:	2001      	movs	r0, #1
 8006da0:	e01a      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006da2:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006da4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006da8:	401a      	ands	r2, r3
 8006daa:	428a      	cmp	r2, r1
 8006dac:	d001      	beq.n	8006db2 <HAL_RCC_OscConfig+0x3aa>
          return HAL_ERROR;
 8006dae:	2001      	movs	r0, #1
 8006db0:	e012      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006db2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006db6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006db8:	428a      	cmp	r2, r1
 8006dba:	d001      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x3b8>
          return HAL_ERROR;
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	e00b      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006dc0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006dc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00a      	beq.n	8006de0 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
 8006dca:	2001      	movs	r0, #1
 8006dcc:	e004      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
    return HAL_ERROR;
 8006dce:	2001      	movs	r0, #1
}
 8006dd0:	4770      	bx	lr
        return HAL_ERROR;
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	e000      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8006dd6:	2000      	movs	r0, #0
}
 8006dd8:	b002      	add	sp, #8
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006ddc:	2001      	movs	r0, #1
 8006dde:	e7fb      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8006de0:	2000      	movs	r0, #0
 8006de2:	e7f9      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3d0>
 8006de4:	40023800 	.word	0x40023800
 8006de8:	42470060 	.word	0x42470060

08006dec <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006dec:	4b01      	ldr	r3, [pc, #4]	; (8006df4 <HAL_RCC_EnableCSS+0x8>)
 8006dee:	2201      	movs	r2, #1
 8006df0:	601a      	str	r2, [r3, #0]
}
 8006df2:	4770      	bx	lr
 8006df4:	4247004c 	.word	0x4247004c

08006df8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006df8:	4b26      	ldr	r3, [pc, #152]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f003 030c 	and.w	r3, r3, #12
 8006e00:	2b04      	cmp	r3, #4
 8006e02:	d044      	beq.n	8006e8e <HAL_RCC_GetSysClockFreq+0x96>
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d001      	beq.n	8006e0c <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e08:	4823      	ldr	r0, [pc, #140]	; (8006e98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006e0a:	4770      	bx	lr
{
 8006e0c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e10:	4b20      	ldr	r3, [pc, #128]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006e1e:	d013      	beq.n	8006e48 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e20:	4b1c      	ldr	r3, [pc, #112]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006e22:	6859      	ldr	r1, [r3, #4]
 8006e24:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006e28:	2300      	movs	r3, #0
 8006e2a:	481c      	ldr	r0, [pc, #112]	; (8006e9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8006e2c:	fba1 0100 	umull	r0, r1, r1, r0
 8006e30:	f7f9 fe6c 	bl	8000b0c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e34:	4b17      	ldr	r3, [pc, #92]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8006e40:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006e44:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e48:	4b12      	ldr	r3, [pc, #72]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8006e50:	461e      	mov	r6, r3
 8006e52:	2700      	movs	r7, #0
 8006e54:	015c      	lsls	r4, r3, #5
 8006e56:	2500      	movs	r5, #0
 8006e58:	1ae4      	subs	r4, r4, r3
 8006e5a:	eb65 0507 	sbc.w	r5, r5, r7
 8006e5e:	01a9      	lsls	r1, r5, #6
 8006e60:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8006e64:	01a0      	lsls	r0, r4, #6
 8006e66:	1b00      	subs	r0, r0, r4
 8006e68:	eb61 0105 	sbc.w	r1, r1, r5
 8006e6c:	00cb      	lsls	r3, r1, #3
 8006e6e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006e72:	00c4      	lsls	r4, r0, #3
 8006e74:	19a0      	adds	r0, r4, r6
 8006e76:	eb43 0107 	adc.w	r1, r3, r7
 8006e7a:	028b      	lsls	r3, r1, #10
 8006e7c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8006e80:	0284      	lsls	r4, r0, #10
 8006e82:	4620      	mov	r0, r4
 8006e84:	4619      	mov	r1, r3
 8006e86:	2300      	movs	r3, #0
 8006e88:	f7f9 fe40 	bl	8000b0c <__aeabi_uldivmod>
 8006e8c:	e7d2      	b.n	8006e34 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8006e8e:	4803      	ldr	r0, [pc, #12]	; (8006e9c <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40023800 	.word	0x40023800
 8006e98:	00f42400 	.word	0x00f42400
 8006e9c:	017d7840 	.word	0x017d7840

08006ea0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	f000 809e 	beq.w	8006fe2 <HAL_RCC_ClockConfig+0x142>
{
 8006ea6:	b570      	push	{r4, r5, r6, lr}
 8006ea8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006eaa:	4b50      	ldr	r3, [pc, #320]	; (8006fec <HAL_RCC_ClockConfig+0x14c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 030f 	and.w	r3, r3, #15
 8006eb2:	428b      	cmp	r3, r1
 8006eb4:	d209      	bcs.n	8006eca <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eb6:	b2cb      	uxtb	r3, r1
 8006eb8:	4a4c      	ldr	r2, [pc, #304]	; (8006fec <HAL_RCC_ClockConfig+0x14c>)
 8006eba:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ebc:	6813      	ldr	r3, [r2, #0]
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	428b      	cmp	r3, r1
 8006ec4:	d001      	beq.n	8006eca <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8006ec6:	2001      	movs	r0, #1
}
 8006ec8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	f013 0f02 	tst.w	r3, #2
 8006ed0:	d017      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ed2:	f013 0f04 	tst.w	r3, #4
 8006ed6:	d004      	beq.n	8006ee2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ed8:	4a45      	ldr	r2, [pc, #276]	; (8006ff0 <HAL_RCC_ClockConfig+0x150>)
 8006eda:	6893      	ldr	r3, [r2, #8]
 8006edc:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ee0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	f013 0f08 	tst.w	r3, #8
 8006ee8:	d004      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006eea:	4a41      	ldr	r2, [pc, #260]	; (8006ff0 <HAL_RCC_ClockConfig+0x150>)
 8006eec:	6893      	ldr	r3, [r2, #8]
 8006eee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ef2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ef4:	4a3e      	ldr	r2, [pc, #248]	; (8006ff0 <HAL_RCC_ClockConfig+0x150>)
 8006ef6:	6893      	ldr	r3, [r2, #8]
 8006ef8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006efc:	68a0      	ldr	r0, [r4, #8]
 8006efe:	4303      	orrs	r3, r0
 8006f00:	6093      	str	r3, [r2, #8]
 8006f02:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	f013 0f01 	tst.w	r3, #1
 8006f0a:	d032      	beq.n	8006f72 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f0c:	6863      	ldr	r3, [r4, #4]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d021      	beq.n	8006f56 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f12:	1e9a      	subs	r2, r3, #2
 8006f14:	2a01      	cmp	r2, #1
 8006f16:	d925      	bls.n	8006f64 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f18:	4a35      	ldr	r2, [pc, #212]	; (8006ff0 <HAL_RCC_ClockConfig+0x150>)
 8006f1a:	6812      	ldr	r2, [r2, #0]
 8006f1c:	f012 0f02 	tst.w	r2, #2
 8006f20:	d061      	beq.n	8006fe6 <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f22:	4933      	ldr	r1, [pc, #204]	; (8006ff0 <HAL_RCC_ClockConfig+0x150>)
 8006f24:	688a      	ldr	r2, [r1, #8]
 8006f26:	f022 0203 	bic.w	r2, r2, #3
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006f2e:	f7fe f9fb 	bl	8005328 <HAL_GetTick>
 8006f32:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f34:	4b2e      	ldr	r3, [pc, #184]	; (8006ff0 <HAL_RCC_ClockConfig+0x150>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f003 030c 	and.w	r3, r3, #12
 8006f3c:	6862      	ldr	r2, [r4, #4]
 8006f3e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006f42:	d016      	beq.n	8006f72 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f44:	f7fe f9f0 	bl	8005328 <HAL_GetTick>
 8006f48:	1b80      	subs	r0, r0, r6
 8006f4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f4e:	4298      	cmp	r0, r3
 8006f50:	d9f0      	bls.n	8006f34 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8006f52:	2003      	movs	r0, #3
 8006f54:	e7b8      	b.n	8006ec8 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f56:	4a26      	ldr	r2, [pc, #152]	; (8006ff0 <HAL_RCC_ClockConfig+0x150>)
 8006f58:	6812      	ldr	r2, [r2, #0]
 8006f5a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006f5e:	d1e0      	bne.n	8006f22 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8006f60:	2001      	movs	r0, #1
 8006f62:	e7b1      	b.n	8006ec8 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f64:	4a22      	ldr	r2, [pc, #136]	; (8006ff0 <HAL_RCC_ClockConfig+0x150>)
 8006f66:	6812      	ldr	r2, [r2, #0]
 8006f68:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006f6c:	d1d9      	bne.n	8006f22 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8006f6e:	2001      	movs	r0, #1
 8006f70:	e7aa      	b.n	8006ec8 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f72:	4b1e      	ldr	r3, [pc, #120]	; (8006fec <HAL_RCC_ClockConfig+0x14c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 030f 	and.w	r3, r3, #15
 8006f7a:	42ab      	cmp	r3, r5
 8006f7c:	d909      	bls.n	8006f92 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f7e:	b2ea      	uxtb	r2, r5
 8006f80:	4b1a      	ldr	r3, [pc, #104]	; (8006fec <HAL_RCC_ClockConfig+0x14c>)
 8006f82:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 030f 	and.w	r3, r3, #15
 8006f8a:	42ab      	cmp	r3, r5
 8006f8c:	d001      	beq.n	8006f92 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8006f8e:	2001      	movs	r0, #1
 8006f90:	e79a      	b.n	8006ec8 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	f013 0f04 	tst.w	r3, #4
 8006f98:	d006      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f9a:	4a15      	ldr	r2, [pc, #84]	; (8006ff0 <HAL_RCC_ClockConfig+0x150>)
 8006f9c:	6893      	ldr	r3, [r2, #8]
 8006f9e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006fa2:	68e1      	ldr	r1, [r4, #12]
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	f013 0f08 	tst.w	r3, #8
 8006fae:	d007      	beq.n	8006fc0 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fb0:	4a0f      	ldr	r2, [pc, #60]	; (8006ff0 <HAL_RCC_ClockConfig+0x150>)
 8006fb2:	6893      	ldr	r3, [r2, #8]
 8006fb4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006fb8:	6921      	ldr	r1, [r4, #16]
 8006fba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006fbe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006fc0:	f7ff ff1a 	bl	8006df8 <HAL_RCC_GetSysClockFreq>
 8006fc4:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <HAL_RCC_ClockConfig+0x150>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006fcc:	4a09      	ldr	r2, [pc, #36]	; (8006ff4 <HAL_RCC_ClockConfig+0x154>)
 8006fce:	5cd3      	ldrb	r3, [r2, r3]
 8006fd0:	40d8      	lsrs	r0, r3
 8006fd2:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <HAL_RCC_ClockConfig+0x158>)
 8006fd4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8006fd6:	4b09      	ldr	r3, [pc, #36]	; (8006ffc <HAL_RCC_ClockConfig+0x15c>)
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	f7fd fd01 	bl	80049e0 <HAL_InitTick>
  return HAL_OK;
 8006fde:	2000      	movs	r0, #0
 8006fe0:	e772      	b.n	8006ec8 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8006fe2:	2001      	movs	r0, #1
}
 8006fe4:	4770      	bx	lr
        return HAL_ERROR;
 8006fe6:	2001      	movs	r0, #1
 8006fe8:	e76e      	b.n	8006ec8 <HAL_RCC_ClockConfig+0x28>
 8006fea:	bf00      	nop
 8006fec:	40023c00 	.word	0x40023c00
 8006ff0:	40023800 	.word	0x40023800
 8006ff4:	0800cf3c 	.word	0x0800cf3c
 8006ff8:	20000050 	.word	0x20000050
 8006ffc:	20000058 	.word	0x20000058

08007000 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8007000:	4b01      	ldr	r3, [pc, #4]	; (8007008 <HAL_RCC_GetHCLKFreq+0x8>)
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	20000050 	.word	0x20000050

0800700c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800700c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800700e:	f7ff fff7 	bl	8007000 <HAL_RCC_GetHCLKFreq>
 8007012:	4b04      	ldr	r3, [pc, #16]	; (8007024 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800701a:	4a03      	ldr	r2, [pc, #12]	; (8007028 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800701c:	5cd3      	ldrb	r3, [r2, r3]
}
 800701e:	40d8      	lsrs	r0, r3
 8007020:	bd08      	pop	{r3, pc}
 8007022:	bf00      	nop
 8007024:	40023800 	.word	0x40023800
 8007028:	0800cf4c 	.word	0x0800cf4c

0800702c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800702c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800702e:	f7ff ffe7 	bl	8007000 <HAL_RCC_GetHCLKFreq>
 8007032:	4b04      	ldr	r3, [pc, #16]	; (8007044 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800703a:	4a03      	ldr	r2, [pc, #12]	; (8007048 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800703c:	5cd3      	ldrb	r3, [r2, r3]
}
 800703e:	40d8      	lsrs	r0, r3
 8007040:	bd08      	pop	{r3, pc}
 8007042:	bf00      	nop
 8007044:	40023800 	.word	0x40023800
 8007048:	0800cf4c 	.word	0x0800cf4c

0800704c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800704c:	230f      	movs	r3, #15
 800704e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <HAL_RCC_GetClockConfig+0x34>)
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	f002 0203 	and.w	r2, r2, #3
 8007058:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007060:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8007068:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	08db      	lsrs	r3, r3, #3
 800706e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007072:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007074:	4b03      	ldr	r3, [pc, #12]	; (8007084 <HAL_RCC_GetClockConfig+0x38>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 030f 	and.w	r3, r3, #15
 800707c:	600b      	str	r3, [r1, #0]
}
 800707e:	4770      	bx	lr
 8007080:	40023800 	.word	0x40023800
 8007084:	40023c00 	.word	0x40023c00

08007088 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007088:	4770      	bx	lr
	...

0800708c <HAL_RCC_NMI_IRQHandler>:
{
 800708c:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800708e:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007096:	d100      	bne.n	800709a <HAL_RCC_NMI_IRQHandler+0xe>
}
 8007098:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 800709a:	f7ff fff5 	bl	8007088 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800709e:	4b03      	ldr	r3, [pc, #12]	; (80070ac <HAL_RCC_NMI_IRQHandler+0x20>)
 80070a0:	2280      	movs	r2, #128	; 0x80
 80070a2:	701a      	strb	r2, [r3, #0]
}
 80070a4:	e7f8      	b.n	8007098 <HAL_RCC_NMI_IRQHandler+0xc>
 80070a6:	bf00      	nop
 80070a8:	40023800 	.word	0x40023800
 80070ac:	4002380e 	.word	0x4002380e

080070b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070b0:	b530      	push	{r4, r5, lr}
 80070b2:	b083      	sub	sp, #12
 80070b4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070b6:	6803      	ldr	r3, [r0, #0]
 80070b8:	f013 0f05 	tst.w	r3, #5
 80070bc:	d10e      	bne.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	f013 0f02 	tst.w	r3, #2
 80070c4:	d136      	bne.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	f013 0f08 	tst.w	r3, #8
 80070cc:	f000 8097 	beq.w	80071fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070d0:	7c22      	ldrb	r2, [r4, #16]
 80070d2:	4b4c      	ldr	r3, [pc, #304]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80070d4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80070d6:	2000      	movs	r0, #0
}
 80070d8:	b003      	add	sp, #12
 80070da:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80070dc:	4b4a      	ldr	r3, [pc, #296]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80070e2:	f7fe f921 	bl	8005328 <HAL_GetTick>
 80070e6:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070e8:	4b48      	ldr	r3, [pc, #288]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80070f0:	d006      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80070f2:	f7fe f919 	bl	8005328 <HAL_GetTick>
 80070f6:	1b40      	subs	r0, r0, r5
 80070f8:	2802      	cmp	r0, #2
 80070fa:	d9f5      	bls.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 80070fc:	2003      	movs	r0, #3
 80070fe:	e7eb      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007100:	6862      	ldr	r2, [r4, #4]
 8007102:	68a3      	ldr	r3, [r4, #8]
 8007104:	071b      	lsls	r3, r3, #28
 8007106:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800710a:	4a40      	ldr	r2, [pc, #256]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800710c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8007110:	4b3d      	ldr	r3, [pc, #244]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8007112:	2201      	movs	r2, #1
 8007114:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8007116:	f7fe f907 	bl	8005328 <HAL_GetTick>
 800711a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800711c:	4b3b      	ldr	r3, [pc, #236]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007124:	d1cb      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007126:	f7fe f8ff 	bl	8005328 <HAL_GetTick>
 800712a:	1b40      	subs	r0, r0, r5
 800712c:	2802      	cmp	r0, #2
 800712e:	d9f5      	bls.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        return HAL_TIMEOUT;
 8007130:	2003      	movs	r0, #3
 8007132:	e7d1      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8007134:	2300      	movs	r3, #0
 8007136:	9301      	str	r3, [sp, #4]
 8007138:	4b34      	ldr	r3, [pc, #208]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800713a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800713c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007140:	641a      	str	r2, [r3, #64]	; 0x40
 8007142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007148:	9301      	str	r3, [sp, #4]
 800714a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800714c:	4a30      	ldr	r2, [pc, #192]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800714e:	6813      	ldr	r3, [r2, #0]
 8007150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007154:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007156:	f7fe f8e7 	bl	8005328 <HAL_GetTick>
 800715a:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800715c:	4b2c      	ldr	r3, [pc, #176]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007164:	d106      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007166:	f7fe f8df 	bl	8005328 <HAL_GetTick>
 800716a:	1b40      	subs	r0, r0, r5
 800716c:	2802      	cmp	r0, #2
 800716e:	d9f5      	bls.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 8007170:	2003      	movs	r0, #3
 8007172:	e7b1      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007174:	4b25      	ldr	r3, [pc, #148]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007178:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800717c:	d012      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800717e:	68e2      	ldr	r2, [r4, #12]
 8007180:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007184:	429a      	cmp	r2, r3
 8007186:	d00d      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007188:	4b20      	ldr	r3, [pc, #128]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800718a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800718c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8007190:	4920      	ldr	r1, [pc, #128]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007192:	2001      	movs	r0, #1
 8007194:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007196:	2000      	movs	r0, #0
 8007198:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 800719a:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800719c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719e:	f013 0f01 	tst.w	r3, #1
 80071a2:	d112      	bne.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071a4:	68e3      	ldr	r3, [r4, #12]
 80071a6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80071aa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80071ae:	d01b      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
 80071b0:	4a16      	ldr	r2, [pc, #88]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80071b2:	6893      	ldr	r3, [r2, #8]
 80071b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80071b8:	6093      	str	r3, [r2, #8]
 80071ba:	4914      	ldr	r1, [pc, #80]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80071bc:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80071be:	68e2      	ldr	r2, [r4, #12]
 80071c0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80071c4:	4313      	orrs	r3, r2
 80071c6:	670b      	str	r3, [r1, #112]	; 0x70
 80071c8:	e77d      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 80071ca:	f7fe f8ad 	bl	8005328 <HAL_GetTick>
 80071ce:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d0:	4b0e      	ldr	r3, [pc, #56]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80071d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d4:	f013 0f02 	tst.w	r3, #2
 80071d8:	d1e4      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071da:	f7fe f8a5 	bl	8005328 <HAL_GetTick>
 80071de:	1b40      	subs	r0, r0, r5
 80071e0:	2864      	cmp	r0, #100	; 0x64
 80071e2:	d9f5      	bls.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
 80071e4:	2003      	movs	r0, #3
 80071e6:	e777      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071e8:	4908      	ldr	r1, [pc, #32]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80071ea:	688a      	ldr	r2, [r1, #8]
 80071ec:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80071f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80071f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f8:	4313      	orrs	r3, r2
 80071fa:	608b      	str	r3, [r1, #8]
 80071fc:	e7dd      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x10a>
  return HAL_OK;
 80071fe:	2000      	movs	r0, #0
 8007200:	e76a      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8007202:	bf00      	nop
 8007204:	424711e0 	.word	0x424711e0
 8007208:	42470068 	.word	0x42470068
 800720c:	40023800 	.word	0x40023800
 8007210:	40007000 	.word	0x40007000
 8007214:	42470e40 	.word	0x42470e40

08007218 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800721c:	6802      	ldr	r2, [r0, #0]
 800721e:	68d3      	ldr	r3, [r2, #12]
 8007220:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007224:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007226:	f7fe f87f 	bl	8005328 <HAL_GetTick>
 800722a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f013 0f20 	tst.w	r3, #32
 8007234:	d107      	bne.n	8007246 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007236:	f7fe f877 	bl	8005328 <HAL_GetTick>
 800723a:	1b40      	subs	r0, r0, r5
 800723c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007240:	d9f4      	bls.n	800722c <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8007242:	2003      	movs	r0, #3
 8007244:	e000      	b.n	8007248 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8007246:	2000      	movs	r0, #0
}
 8007248:	bd38      	pop	{r3, r4, r5, pc}

0800724a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800724a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800724c:	6803      	ldr	r3, [r0, #0]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007254:	d001      	beq.n	800725a <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8007256:	2000      	movs	r0, #0
}
 8007258:	bd38      	pop	{r3, r4, r5, pc}
 800725a:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800725c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007260:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8007262:	f7fe f861 	bl	8005328 <HAL_GetTick>
 8007266:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007270:	d107      	bne.n	8007282 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007272:	f7fe f859 	bl	8005328 <HAL_GetTick>
 8007276:	1b40      	subs	r0, r0, r5
 8007278:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800727c:	d9f4      	bls.n	8007268 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 800727e:	2003      	movs	r0, #3
 8007280:	e7ea      	b.n	8007258 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8007282:	2000      	movs	r0, #0
 8007284:	e7e8      	b.n	8007258 <RTC_EnterInitMode+0xe>

08007286 <HAL_RTC_Init>:
{
 8007286:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8007288:	2800      	cmp	r0, #0
 800728a:	d05c      	beq.n	8007346 <HAL_RTC_Init+0xc0>
 800728c:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800728e:	7f43      	ldrb	r3, [r0, #29]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d040      	beq.n	8007316 <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007294:	2302      	movs	r3, #2
 8007296:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	22ca      	movs	r2, #202	; 0xca
 800729c:	625a      	str	r2, [r3, #36]	; 0x24
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	2253      	movs	r2, #83	; 0x53
 80072a2:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80072a4:	4620      	mov	r0, r4
 80072a6:	f7ff ffd0 	bl	800724a <RTC_EnterInitMode>
 80072aa:	4605      	mov	r5, r0
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d136      	bne.n	800731e <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80072b0:	6822      	ldr	r2, [r4, #0]
 80072b2:	6893      	ldr	r3, [r2, #8]
 80072b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80072b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072bc:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80072be:	6821      	ldr	r1, [r4, #0]
 80072c0:	688a      	ldr	r2, [r1, #8]
 80072c2:	6863      	ldr	r3, [r4, #4]
 80072c4:	6920      	ldr	r0, [r4, #16]
 80072c6:	4303      	orrs	r3, r0
 80072c8:	6960      	ldr	r0, [r4, #20]
 80072ca:	4303      	orrs	r3, r0
 80072cc:	4313      	orrs	r3, r2
 80072ce:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	68e2      	ldr	r2, [r4, #12]
 80072d4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80072d6:	6822      	ldr	r2, [r4, #0]
 80072d8:	6913      	ldr	r3, [r2, #16]
 80072da:	68a1      	ldr	r1, [r4, #8]
 80072dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80072e0:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	68d3      	ldr	r3, [r2, #12]
 80072e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ea:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f013 0f20 	tst.w	r3, #32
 80072f4:	d01b      	beq.n	800732e <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80072f6:	6822      	ldr	r2, [r4, #0]
 80072f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80072fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072fe:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007300:	6822      	ldr	r2, [r4, #0]
 8007302:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007304:	69a1      	ldr	r1, [r4, #24]
 8007306:	430b      	orrs	r3, r1
 8007308:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	22ff      	movs	r2, #255	; 0xff
 800730e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8007310:	2301      	movs	r3, #1
 8007312:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8007314:	e009      	b.n	800732a <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 8007316:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8007318:	f7fd f938 	bl	800458c <HAL_RTC_MspInit>
 800731c:	e7ba      	b.n	8007294 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	22ff      	movs	r2, #255	; 0xff
 8007322:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007324:	2304      	movs	r3, #4
 8007326:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8007328:	2501      	movs	r5, #1
}
 800732a:	4628      	mov	r0, r5
 800732c:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800732e:	4620      	mov	r0, r4
 8007330:	f7ff ff72 	bl	8007218 <HAL_RTC_WaitForSynchro>
 8007334:	2800      	cmp	r0, #0
 8007336:	d0de      	beq.n	80072f6 <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	22ff      	movs	r2, #255	; 0xff
 800733c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800733e:	2304      	movs	r3, #4
 8007340:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8007342:	2501      	movs	r5, #1
 8007344:	e7f1      	b.n	800732a <HAL_RTC_Init+0xa4>
     return HAL_ERROR;
 8007346:	2501      	movs	r5, #1
 8007348:	e7ef      	b.n	800732a <HAL_RTC_Init+0xa4>

0800734a <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800734a:	0903      	lsrs	r3, r0, #4
 800734c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007350:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8007352:	f000 000f 	and.w	r0, r0, #15
 8007356:	4410      	add	r0, r2
}
 8007358:	b2c0      	uxtb	r0, r0
 800735a:	4770      	bx	lr

0800735c <HAL_RTC_GetTime>:
{
 800735c:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800735e:	6803      	ldr	r3, [r0, #0]
 8007360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007362:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007364:	6803      	ldr	r3, [r0, #0]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800736c:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800736e:	6803      	ldr	r3, [r0, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007376:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800737a:	0c1d      	lsrs	r5, r3, #16
 800737c:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8007380:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007382:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8007386:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007388:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 800738c:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800738e:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8007392:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8007394:	b95a      	cbnz	r2, 80073ae <HAL_RTC_GetTime+0x52>
 8007396:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007398:	f7ff ffd7 	bl	800734a <RTC_Bcd2ToByte>
 800739c:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800739e:	4630      	mov	r0, r6
 80073a0:	f7ff ffd3 	bl	800734a <RTC_Bcd2ToByte>
 80073a4:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80073a6:	4620      	mov	r0, r4
 80073a8:	f7ff ffcf 	bl	800734a <RTC_Bcd2ToByte>
 80073ac:	70a8      	strb	r0, [r5, #2]
}
 80073ae:	2000      	movs	r0, #0
 80073b0:	bd70      	pop	{r4, r5, r6, pc}

080073b2 <HAL_RTC_GetDate>:
{
 80073b2:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80073b4:	6803      	ldr	r3, [r0, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80073c0:	0c18      	lsrs	r0, r3, #16
 80073c2:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80073c4:	f3c3 2604 	ubfx	r6, r3, #8, #5
 80073c8:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80073ca:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 80073ce:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80073d0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80073d4:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80073d6:	b95a      	cbnz	r2, 80073f0 <HAL_RTC_GetDate+0x3e>
 80073d8:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80073da:	f7ff ffb6 	bl	800734a <RTC_Bcd2ToByte>
 80073de:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80073e0:	4630      	mov	r0, r6
 80073e2:	f7ff ffb2 	bl	800734a <RTC_Bcd2ToByte>
 80073e6:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80073e8:	4628      	mov	r0, r5
 80073ea:	f7ff ffae 	bl	800734a <RTC_Bcd2ToByte>
 80073ee:	70a0      	strb	r0, [r4, #2]
}
 80073f0:	2000      	movs	r0, #0
 80073f2:	bd70      	pop	{r4, r5, r6, pc}

080073f4 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80073f4:	6803      	ldr	r3, [r0, #0]
 80073f6:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80073f8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80073fc:	4770      	bx	lr

080073fe <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80073fe:	6803      	ldr	r3, [r0, #0]
 8007400:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007402:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8007406:	4770      	bx	lr

08007408 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740a:	4605      	mov	r5, r0
 800740c:	460f      	mov	r7, r1
 800740e:	4616      	mov	r6, r2
 8007410:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007412:	682b      	ldr	r3, [r5, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	ea37 0303 	bics.w	r3, r7, r3
 800741a:	bf0c      	ite	eq
 800741c:	2301      	moveq	r3, #1
 800741e:	2300      	movne	r3, #0
 8007420:	42b3      	cmp	r3, r6
 8007422:	d037      	beq.n	8007494 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007424:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007428:	d0f3      	beq.n	8007412 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800742a:	f7fd ff7d 	bl	8005328 <HAL_GetTick>
 800742e:	9b06      	ldr	r3, [sp, #24]
 8007430:	1ac0      	subs	r0, r0, r3
 8007432:	42a0      	cmp	r0, r4
 8007434:	d201      	bcs.n	800743a <SPI_WaitFlagStateUntilTimeout+0x32>
 8007436:	2c00      	cmp	r4, #0
 8007438:	d1eb      	bne.n	8007412 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800743a:	682a      	ldr	r2, [r5, #0]
 800743c:	6853      	ldr	r3, [r2, #4]
 800743e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8007442:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007444:	686b      	ldr	r3, [r5, #4]
 8007446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800744a:	d00b      	beq.n	8007464 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800744c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800744e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007452:	d014      	beq.n	800747e <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007454:	2301      	movs	r3, #1
 8007456:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800745a:	2300      	movs	r3, #0
 800745c:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8007460:	2003      	movs	r0, #3
 8007462:	e018      	b.n	8007496 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007464:	68ab      	ldr	r3, [r5, #8]
 8007466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800746a:	d002      	beq.n	8007472 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800746c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007470:	d1ec      	bne.n	800744c <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8007472:	682a      	ldr	r2, [r5, #0]
 8007474:	6813      	ldr	r3, [r2, #0]
 8007476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	e7e6      	b.n	800744c <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 800747e:	682a      	ldr	r2, [r5, #0]
 8007480:	6813      	ldr	r3, [r2, #0]
 8007482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	682a      	ldr	r2, [r5, #0]
 800748a:	6813      	ldr	r3, [r2, #0]
 800748c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	e7df      	b.n	8007454 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8007494:	2000      	movs	r0, #0
}
 8007496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007498 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007498:	b530      	push	{r4, r5, lr}
 800749a:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800749c:	4c16      	ldr	r4, [pc, #88]	; (80074f8 <SPI_EndRxTxTransaction+0x60>)
 800749e:	6824      	ldr	r4, [r4, #0]
 80074a0:	4d16      	ldr	r5, [pc, #88]	; (80074fc <SPI_EndRxTxTransaction+0x64>)
 80074a2:	fba5 3404 	umull	r3, r4, r5, r4
 80074a6:	0d64      	lsrs	r4, r4, #21
 80074a8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80074ac:	fb05 f404 	mul.w	r4, r5, r4
 80074b0:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074b2:	6844      	ldr	r4, [r0, #4]
 80074b4:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 80074b8:	d00b      	beq.n	80074d2 <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80074ba:	9b03      	ldr	r3, [sp, #12]
 80074bc:	b1c3      	cbz	r3, 80074f0 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 80074be:	9b03      	ldr	r3, [sp, #12]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80074c4:	6803      	ldr	r3, [r0, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80074cc:	d1f5      	bne.n	80074ba <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	e00f      	b.n	80074f2 <SPI_EndRxTxTransaction+0x5a>
 80074d2:	460b      	mov	r3, r1
 80074d4:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074d6:	9200      	str	r2, [sp, #0]
 80074d8:	2200      	movs	r2, #0
 80074da:	2180      	movs	r1, #128	; 0x80
 80074dc:	f7ff ff94 	bl	8007408 <SPI_WaitFlagStateUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	b130      	cbz	r0, 80074f2 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80074e6:	f043 0320 	orr.w	r3, r3, #32
 80074ea:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e000      	b.n	80074f2 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	b005      	add	sp, #20
 80074f6:	bd30      	pop	{r4, r5, pc}
 80074f8:	20000050 	.word	0x20000050
 80074fc:	165e9f81 	.word	0x165e9f81

08007500 <SPI_EndRxTransaction>:
{
 8007500:	b510      	push	{r4, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007506:	6840      	ldr	r0, [r0, #4]
 8007508:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 800750c:	d016      	beq.n	800753c <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800750e:	6860      	ldr	r0, [r4, #4]
 8007510:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8007514:	d12e      	bne.n	8007574 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007516:	68a3      	ldr	r3, [r4, #8]
 8007518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800751c:	d01b      	beq.n	8007556 <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800751e:	9200      	str	r2, [sp, #0]
 8007520:	460b      	mov	r3, r1
 8007522:	2200      	movs	r2, #0
 8007524:	2180      	movs	r1, #128	; 0x80
 8007526:	4620      	mov	r0, r4
 8007528:	f7ff ff6e 	bl	8007408 <SPI_WaitFlagStateUntilTimeout>
 800752c:	4603      	mov	r3, r0
 800752e:	b350      	cbz	r0, 8007586 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007530:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007532:	f043 0320 	orr.w	r3, r3, #32
 8007536:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e024      	b.n	8007586 <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800753c:	68a3      	ldr	r3, [r4, #8]
 800753e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007542:	d002      	beq.n	800754a <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007548:	d1e1      	bne.n	800750e <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 800754a:	6820      	ldr	r0, [r4, #0]
 800754c:	6803      	ldr	r3, [r0, #0]
 800754e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007552:	6003      	str	r3, [r0, #0]
 8007554:	e7db      	b.n	800750e <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007556:	9200      	str	r2, [sp, #0]
 8007558:	460b      	mov	r3, r1
 800755a:	2200      	movs	r2, #0
 800755c:	2101      	movs	r1, #1
 800755e:	4620      	mov	r0, r4
 8007560:	f7ff ff52 	bl	8007408 <SPI_WaitFlagStateUntilTimeout>
 8007564:	4603      	mov	r3, r0
 8007566:	b170      	cbz	r0, 8007586 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007568:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800756a:	f043 0320 	orr.w	r3, r3, #32
 800756e:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e008      	b.n	8007586 <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007574:	9200      	str	r2, [sp, #0]
 8007576:	460b      	mov	r3, r1
 8007578:	2200      	movs	r2, #0
 800757a:	2101      	movs	r1, #1
 800757c:	4620      	mov	r0, r4
 800757e:	f7ff ff43 	bl	8007408 <SPI_WaitFlagStateUntilTimeout>
 8007582:	4603      	mov	r3, r0
 8007584:	b910      	cbnz	r0, 800758c <SPI_EndRxTransaction+0x8c>
}
 8007586:	4618      	mov	r0, r3
 8007588:	b002      	add	sp, #8
 800758a:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800758c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800758e:	f043 0320 	orr.w	r3, r3, #32
 8007592:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e7f6      	b.n	8007586 <SPI_EndRxTransaction+0x86>

08007598 <HAL_SPI_Init>:
  if (hspi == NULL)
 8007598:	2800      	cmp	r0, #0
 800759a:	d03b      	beq.n	8007614 <HAL_SPI_Init+0x7c>
{
 800759c:	b510      	push	{r4, lr}
 800759e:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075a0:	2300      	movs	r3, #0
 80075a2:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80075a4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d02e      	beq.n	800760a <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 80075ac:	2302      	movs	r3, #2
 80075ae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	6813      	ldr	r3, [r2, #0]
 80075b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ba:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80075bc:	6863      	ldr	r3, [r4, #4]
 80075be:	68a2      	ldr	r2, [r4, #8]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	68e2      	ldr	r2, [r4, #12]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	6922      	ldr	r2, [r4, #16]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	6962      	ldr	r2, [r4, #20]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	69a2      	ldr	r2, [r4, #24]
 80075d0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80075d4:	4313      	orrs	r3, r2
 80075d6:	69e2      	ldr	r2, [r4, #28]
 80075d8:	4313      	orrs	r3, r2
 80075da:	6a22      	ldr	r2, [r4, #32]
 80075dc:	4313      	orrs	r3, r2
 80075de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80075e0:	6822      	ldr	r2, [r4, #0]
 80075e2:	430b      	orrs	r3, r1
 80075e4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80075e6:	8b63      	ldrh	r3, [r4, #26]
 80075e8:	f003 0304 	and.w	r3, r3, #4
 80075ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80075ee:	6822      	ldr	r2, [r4, #0]
 80075f0:	430b      	orrs	r3, r1
 80075f2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075f4:	6822      	ldr	r2, [r4, #0]
 80075f6:	69d3      	ldr	r3, [r2, #28]
 80075f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075fc:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075fe:	2000      	movs	r0, #0
 8007600:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007602:	2301      	movs	r3, #1
 8007604:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8007608:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800760a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800760e:	f7fc ffcb 	bl	80045a8 <HAL_SPI_MspInit>
 8007612:	e7cb      	b.n	80075ac <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8007614:	2001      	movs	r0, #1
}
 8007616:	4770      	bx	lr

08007618 <HAL_SPI_Transmit>:
{
 8007618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800761c:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800761e:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8007622:	2c01      	cmp	r4, #1
 8007624:	f000 80c3 	beq.w	80077ae <HAL_SPI_Transmit+0x196>
 8007628:	461d      	mov	r5, r3
 800762a:	4617      	mov	r7, r2
 800762c:	4688      	mov	r8, r1
 800762e:	4604      	mov	r4, r0
 8007630:	2301      	movs	r3, #1
 8007632:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8007636:	f7fd fe77 	bl	8005328 <HAL_GetTick>
 800763a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800763c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b01      	cmp	r3, #1
 8007644:	d009      	beq.n	800765a <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8007646:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007648:	2301      	movs	r3, #1
 800764a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800764e:	2300      	movs	r3, #0
 8007650:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007654:	b002      	add	sp, #8
 8007656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800765a:	f1b8 0f00 	cmp.w	r8, #0
 800765e:	f000 8098 	beq.w	8007792 <HAL_SPI_Transmit+0x17a>
 8007662:	2f00      	cmp	r7, #0
 8007664:	f000 8097 	beq.w	8007796 <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007668:	2303      	movs	r3, #3
 800766a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800766e:	2300      	movs	r3, #0
 8007670:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007672:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007676:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007678:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800767a:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800767c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800767e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007680:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007682:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007684:	68a3      	ldr	r3, [r4, #8]
 8007686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800768a:	d01c      	beq.n	80076c6 <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007694:	d103      	bne.n	800769e <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800769c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800769e:	68e3      	ldr	r3, [r4, #12]
 80076a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076a4:	d015      	beq.n	80076d2 <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076a6:	6863      	ldr	r3, [r4, #4]
 80076a8:	b10b      	cbz	r3, 80076ae <HAL_SPI_Transmit+0x96>
 80076aa:	2f01      	cmp	r7, #1
 80076ac:	d149      	bne.n	8007742 <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	7812      	ldrb	r2, [r2, #0]
 80076b4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076b8:	3301      	adds	r3, #1
 80076ba:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80076bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80076be:	3b01      	subs	r3, #1
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	86e3      	strh	r3, [r4, #54]	; 0x36
 80076c4:	e03d      	b.n	8007742 <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 80076c6:	6822      	ldr	r2, [r4, #0]
 80076c8:	6813      	ldr	r3, [r2, #0]
 80076ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	e7dc      	b.n	800768c <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d2:	6863      	ldr	r3, [r4, #4]
 80076d4:	b10b      	cbz	r3, 80076da <HAL_SPI_Transmit+0xc2>
 80076d6:	2f01      	cmp	r7, #1
 80076d8:	d115      	bne.n	8007706 <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	8812      	ldrh	r2, [r2, #0]
 80076e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076e4:	3302      	adds	r3, #2
 80076e6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80076e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80076ea:	3b01      	subs	r3, #1
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	86e3      	strh	r3, [r4, #54]	; 0x36
 80076f0:	e009      	b.n	8007706 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076f2:	f7fd fe19 	bl	8005328 <HAL_GetTick>
 80076f6:	1b80      	subs	r0, r0, r6
 80076f8:	42a8      	cmp	r0, r5
 80076fa:	d302      	bcc.n	8007702 <HAL_SPI_Transmit+0xea>
 80076fc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007700:	d14b      	bne.n	800779a <HAL_SPI_Transmit+0x182>
 8007702:	2d00      	cmp	r5, #0
 8007704:	d04b      	beq.n	800779e <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 8007706:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007708:	b29b      	uxth	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d02c      	beq.n	8007768 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	689a      	ldr	r2, [r3, #8]
 8007712:	f012 0f02 	tst.w	r2, #2
 8007716:	d0ec      	beq.n	80076f2 <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007718:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800771a:	8812      	ldrh	r2, [r2, #0]
 800771c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800771e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007720:	3302      	adds	r3, #2
 8007722:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007724:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007726:	3b01      	subs	r3, #1
 8007728:	b29b      	uxth	r3, r3
 800772a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800772c:	e7eb      	b.n	8007706 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800772e:	f7fd fdfb 	bl	8005328 <HAL_GetTick>
 8007732:	1b80      	subs	r0, r0, r6
 8007734:	42a8      	cmp	r0, r5
 8007736:	d302      	bcc.n	800773e <HAL_SPI_Transmit+0x126>
 8007738:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800773c:	d131      	bne.n	80077a2 <HAL_SPI_Transmit+0x18a>
 800773e:	2d00      	cmp	r5, #0
 8007740:	d031      	beq.n	80077a6 <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 8007742:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007744:	b29b      	uxth	r3, r3
 8007746:	b17b      	cbz	r3, 8007768 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	f012 0f02 	tst.w	r2, #2
 8007750:	d0ed      	beq.n	800772e <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007752:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007754:	7812      	ldrb	r2, [r2, #0]
 8007756:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007758:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800775a:	3301      	adds	r3, #1
 800775c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800775e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007760:	3b01      	subs	r3, #1
 8007762:	b29b      	uxth	r3, r3
 8007764:	86e3      	strh	r3, [r4, #54]	; 0x36
 8007766:	e7ec      	b.n	8007742 <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007768:	4632      	mov	r2, r6
 800776a:	4629      	mov	r1, r5
 800776c:	4620      	mov	r0, r4
 800776e:	f7ff fe93 	bl	8007498 <SPI_EndRxTxTransaction>
 8007772:	b108      	cbz	r0, 8007778 <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007774:	2320      	movs	r3, #32
 8007776:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007778:	68a3      	ldr	r3, [r4, #8]
 800777a:	b933      	cbnz	r3, 800778a <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800777c:	9301      	str	r3, [sp, #4]
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	9201      	str	r2, [sp, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800778a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800778c:	b96b      	cbnz	r3, 80077aa <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800778e:	2000      	movs	r0, #0
 8007790:	e75a      	b.n	8007648 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8007792:	2001      	movs	r0, #1
 8007794:	e758      	b.n	8007648 <HAL_SPI_Transmit+0x30>
 8007796:	2001      	movs	r0, #1
 8007798:	e756      	b.n	8007648 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 800779a:	2003      	movs	r0, #3
 800779c:	e754      	b.n	8007648 <HAL_SPI_Transmit+0x30>
 800779e:	2003      	movs	r0, #3
 80077a0:	e752      	b.n	8007648 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80077a2:	2003      	movs	r0, #3
 80077a4:	e750      	b.n	8007648 <HAL_SPI_Transmit+0x30>
 80077a6:	2003      	movs	r0, #3
 80077a8:	e74e      	b.n	8007648 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80077aa:	2001      	movs	r0, #1
 80077ac:	e74c      	b.n	8007648 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80077ae:	2002      	movs	r0, #2
 80077b0:	e750      	b.n	8007654 <HAL_SPI_Transmit+0x3c>

080077b2 <HAL_SPI_TransmitReceive>:
{
 80077b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077b6:	b083      	sub	sp, #12
 80077b8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80077bc:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 80077c0:	2c01      	cmp	r4, #1
 80077c2:	f000 810b 	beq.w	80079dc <HAL_SPI_TransmitReceive+0x22a>
 80077c6:	461d      	mov	r5, r3
 80077c8:	4617      	mov	r7, r2
 80077ca:	460e      	mov	r6, r1
 80077cc:	4604      	mov	r4, r0
 80077ce:	2301      	movs	r3, #1
 80077d0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80077d4:	f7fd fda8 	bl	8005328 <HAL_GetTick>
 80077d8:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 80077da:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80077de:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 80077e0:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077e2:	2801      	cmp	r0, #1
 80077e4:	d015      	beq.n	8007812 <HAL_SPI_TransmitReceive+0x60>
 80077e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077ea:	d00a      	beq.n	8007802 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 80077ec:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 80077ee:	2201      	movs	r2, #1
 80077f0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80077f4:	2200      	movs	r2, #0
 80077f6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	b003      	add	sp, #12
 80077fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007802:	68a3      	ldr	r3, [r4, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	f040 80db 	bne.w	80079c0 <HAL_SPI_TransmitReceive+0x20e>
 800780a:	2804      	cmp	r0, #4
 800780c:	d001      	beq.n	8007812 <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 800780e:	2302      	movs	r3, #2
 8007810:	e7ed      	b.n	80077ee <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007812:	2e00      	cmp	r6, #0
 8007814:	f000 80d6 	beq.w	80079c4 <HAL_SPI_TransmitReceive+0x212>
 8007818:	2f00      	cmp	r7, #0
 800781a:	f000 80d5 	beq.w	80079c8 <HAL_SPI_TransmitReceive+0x216>
 800781e:	2d00      	cmp	r5, #0
 8007820:	f000 80d4 	beq.w	80079cc <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007824:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b04      	cmp	r3, #4
 800782c:	d002      	beq.n	8007834 <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800782e:	2305      	movs	r3, #5
 8007830:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007834:	2300      	movs	r3, #0
 8007836:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007838:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800783a:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800783c:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800783e:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007840:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007842:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8007844:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007846:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007850:	d103      	bne.n	800785a <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007858:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800785a:	68e3      	ldr	r3, [r4, #12]
 800785c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007860:	d010      	beq.n	8007884 <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007862:	6863      	ldr	r3, [r4, #4]
 8007864:	b10b      	cbz	r3, 800786a <HAL_SPI_TransmitReceive+0xb8>
 8007866:	2d01      	cmp	r5, #1
 8007868:	d10a      	bne.n	8007880 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800786a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	7812      	ldrb	r2, [r2, #0]
 8007870:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007872:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007874:	3301      	adds	r3, #1
 8007876:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8007878:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800787a:	3b01      	subs	r3, #1
 800787c:	b29b      	uxth	r3, r3
 800787e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8007880:	2501      	movs	r5, #1
 8007882:	e069      	b.n	8007958 <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007884:	6863      	ldr	r3, [r4, #4]
 8007886:	b10b      	cbz	r3, 800788c <HAL_SPI_TransmitReceive+0xda>
 8007888:	2d01      	cmp	r5, #1
 800788a:	d10a      	bne.n	80078a2 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800788c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	8812      	ldrh	r2, [r2, #0]
 8007892:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007894:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007896:	3302      	adds	r3, #2
 8007898:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800789a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800789c:	3b01      	subs	r3, #1
 800789e:	b29b      	uxth	r3, r3
 80078a0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80078a2:	2501      	movs	r5, #1
 80078a4:	e01b      	b.n	80078de <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	f012 0f01 	tst.w	r2, #1
 80078ae:	d00d      	beq.n	80078cc <HAL_SPI_TransmitReceive+0x11a>
 80078b0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80078b2:	b292      	uxth	r2, r2
 80078b4:	b152      	cbz	r2, 80078cc <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80078ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80078be:	3302      	adds	r3, #2
 80078c0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80078c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80078ca:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078cc:	f7fd fd2c 	bl	8005328 <HAL_GetTick>
 80078d0:	eba0 0009 	sub.w	r0, r0, r9
 80078d4:	4540      	cmp	r0, r8
 80078d6:	d302      	bcc.n	80078de <HAL_SPI_TransmitReceive+0x12c>
 80078d8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80078dc:	d178      	bne.n	80079d0 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	b91b      	cbnz	r3, 80078ec <HAL_SPI_TransmitReceive+0x13a>
 80078e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d052      	beq.n	8007992 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	f012 0f02 	tst.w	r2, #2
 80078f4:	d0d7      	beq.n	80078a6 <HAL_SPI_TransmitReceive+0xf4>
 80078f6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80078f8:	b292      	uxth	r2, r2
 80078fa:	2a00      	cmp	r2, #0
 80078fc:	d0d3      	beq.n	80078a6 <HAL_SPI_TransmitReceive+0xf4>
 80078fe:	2d00      	cmp	r5, #0
 8007900:	d0d1      	beq.n	80078a6 <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007902:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007904:	8812      	ldrh	r2, [r2, #0]
 8007906:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007908:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800790a:	3302      	adds	r3, #2
 800790c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800790e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007910:	3b01      	subs	r3, #1
 8007912:	b29b      	uxth	r3, r3
 8007914:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8007916:	2500      	movs	r5, #0
 8007918:	e7c5      	b.n	80078a6 <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	f012 0f01 	tst.w	r2, #1
 8007922:	d00d      	beq.n	8007940 <HAL_SPI_TransmitReceive+0x18e>
 8007924:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007926:	b292      	uxth	r2, r2
 8007928:	b152      	cbz	r2, 8007940 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800792a:	68da      	ldr	r2, [r3, #12]
 800792c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800792e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007930:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007932:	3301      	adds	r3, #1
 8007934:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007936:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007938:	3b01      	subs	r3, #1
 800793a:	b29b      	uxth	r3, r3
 800793c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800793e:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007940:	f7fd fcf2 	bl	8005328 <HAL_GetTick>
 8007944:	eba0 0009 	sub.w	r0, r0, r9
 8007948:	4540      	cmp	r0, r8
 800794a:	d302      	bcc.n	8007952 <HAL_SPI_TransmitReceive+0x1a0>
 800794c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007950:	d140      	bne.n	80079d4 <HAL_SPI_TransmitReceive+0x222>
 8007952:	f1b8 0f00 	cmp.w	r8, #0
 8007956:	d03f      	beq.n	80079d8 <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007958:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800795a:	b29b      	uxth	r3, r3
 800795c:	b913      	cbnz	r3, 8007964 <HAL_SPI_TransmitReceive+0x1b2>
 800795e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007960:	b29b      	uxth	r3, r3
 8007962:	b1b3      	cbz	r3, 8007992 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	f012 0f02 	tst.w	r2, #2
 800796c:	d0d5      	beq.n	800791a <HAL_SPI_TransmitReceive+0x168>
 800796e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8007970:	b292      	uxth	r2, r2
 8007972:	2a00      	cmp	r2, #0
 8007974:	d0d1      	beq.n	800791a <HAL_SPI_TransmitReceive+0x168>
 8007976:	2d00      	cmp	r5, #0
 8007978:	d0cf      	beq.n	800791a <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800797a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800797c:	7812      	ldrb	r2, [r2, #0]
 800797e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8007980:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007982:	3301      	adds	r3, #1
 8007984:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007986:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007988:	3b01      	subs	r3, #1
 800798a:	b29b      	uxth	r3, r3
 800798c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800798e:	2500      	movs	r5, #0
 8007990:	e7c3      	b.n	800791a <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007992:	464a      	mov	r2, r9
 8007994:	4641      	mov	r1, r8
 8007996:	4620      	mov	r0, r4
 8007998:	f7ff fd7e 	bl	8007498 <SPI_EndRxTxTransaction>
 800799c:	4603      	mov	r3, r0
 800799e:	b118      	cbz	r0, 80079a8 <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079a0:	2320      	movs	r3, #32
 80079a2:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
    goto error;
 80079a6:	e722      	b.n	80077ee <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079a8:	68a2      	ldr	r2, [r4, #8]
 80079aa:	2a00      	cmp	r2, #0
 80079ac:	f47f af1f 	bne.w	80077ee <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079b0:	9201      	str	r2, [sp, #4]
 80079b2:	6822      	ldr	r2, [r4, #0]
 80079b4:	68d1      	ldr	r1, [r2, #12]
 80079b6:	9101      	str	r1, [sp, #4]
 80079b8:	6892      	ldr	r2, [r2, #8]
 80079ba:	9201      	str	r2, [sp, #4]
 80079bc:	9a01      	ldr	r2, [sp, #4]
 80079be:	e716      	b.n	80077ee <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 80079c0:	2302      	movs	r3, #2
 80079c2:	e714      	b.n	80077ee <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e712      	b.n	80077ee <HAL_SPI_TransmitReceive+0x3c>
 80079c8:	2301      	movs	r3, #1
 80079ca:	e710      	b.n	80077ee <HAL_SPI_TransmitReceive+0x3c>
 80079cc:	2301      	movs	r3, #1
 80079ce:	e70e      	b.n	80077ee <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e70c      	b.n	80077ee <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e70a      	b.n	80077ee <HAL_SPI_TransmitReceive+0x3c>
 80079d8:	2303      	movs	r3, #3
 80079da:	e708      	b.n	80077ee <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 80079dc:	2302      	movs	r3, #2
 80079de:	e70c      	b.n	80077fa <HAL_SPI_TransmitReceive+0x48>

080079e0 <HAL_SPI_Receive>:
{
 80079e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	4604      	mov	r4, r0
 80079e8:	460f      	mov	r7, r1
 80079ea:	4690      	mov	r8, r2
 80079ec:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80079ee:	6843      	ldr	r3, [r0, #4]
 80079f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079f4:	d019      	beq.n	8007a2a <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 80079f6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	f000 809f 	beq.w	8007b3e <HAL_SPI_Receive+0x15e>
 8007a00:	2301      	movs	r3, #1
 8007a02:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8007a06:	f7fd fc8f 	bl	8005328 <HAL_GetTick>
 8007a0a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007a0c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d015      	beq.n	8007a42 <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 8007a16:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007a24:	b002      	add	sp, #8
 8007a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007a2a:	6883      	ldr	r3, [r0, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1e2      	bne.n	80079f6 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a30:	2304      	movs	r3, #4
 8007a32:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007a36:	9500      	str	r5, [sp, #0]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	460a      	mov	r2, r1
 8007a3c:	f7ff feb9 	bl	80077b2 <HAL_SPI_TransmitReceive>
 8007a40:	e7f0      	b.n	8007a24 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 8007a42:	2f00      	cmp	r7, #0
 8007a44:	d06d      	beq.n	8007b22 <HAL_SPI_Receive+0x142>
 8007a46:	f1b8 0f00 	cmp.w	r8, #0
 8007a4a:	d06c      	beq.n	8007b26 <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a4c:	2304      	movs	r3, #4
 8007a4e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a56:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007a58:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007a5c:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a60:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007a62:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007a64:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007a66:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a68:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a6a:	68a3      	ldr	r3, [r4, #8]
 8007a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a70:	d00b      	beq.n	8007a8a <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007a7a:	d103      	bne.n	8007a84 <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a82:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007a84:	68e3      	ldr	r3, [r4, #12]
 8007a86:	b183      	cbz	r3, 8007aaa <HAL_SPI_Receive+0xca>
 8007a88:	e02c      	b.n	8007ae4 <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 8007a8a:	6822      	ldr	r2, [r4, #0]
 8007a8c:	6813      	ldr	r3, [r2, #0]
 8007a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	e7ed      	b.n	8007a72 <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a96:	f7fd fc47 	bl	8005328 <HAL_GetTick>
 8007a9a:	1b80      	subs	r0, r0, r6
 8007a9c:	42a8      	cmp	r0, r5
 8007a9e:	d302      	bcc.n	8007aa6 <HAL_SPI_Receive+0xc6>
 8007aa0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007aa4:	d141      	bne.n	8007b2a <HAL_SPI_Receive+0x14a>
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	d041      	beq.n	8007b2e <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 8007aaa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d02b      	beq.n	8007b0a <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	689a      	ldr	r2, [r3, #8]
 8007ab6:	f012 0f01 	tst.w	r2, #1
 8007aba:	d0ec      	beq.n	8007a96 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007abc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007abe:	7b1b      	ldrb	r3, [r3, #12]
 8007ac0:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ac2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007ac8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007aca:	3b01      	subs	r3, #1
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007ad0:	e7eb      	b.n	8007aaa <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ad2:	f7fd fc29 	bl	8005328 <HAL_GetTick>
 8007ad6:	1b80      	subs	r0, r0, r6
 8007ad8:	42a8      	cmp	r0, r5
 8007ada:	d302      	bcc.n	8007ae2 <HAL_SPI_Receive+0x102>
 8007adc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007ae0:	d127      	bne.n	8007b32 <HAL_SPI_Receive+0x152>
 8007ae2:	b345      	cbz	r5, 8007b36 <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 8007ae4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	b17b      	cbz	r3, 8007b0a <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	f012 0f01 	tst.w	r2, #1
 8007af2:	d0ee      	beq.n	8007ad2 <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007af8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007afa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007afc:	3302      	adds	r3, #2
 8007afe:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007b00:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b02:	3b01      	subs	r3, #1
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007b08:	e7ec      	b.n	8007ae4 <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b0a:	4632      	mov	r2, r6
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f7ff fcf6 	bl	8007500 <SPI_EndRxTransaction>
 8007b14:	b108      	cbz	r0, 8007b1a <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b16:	2320      	movs	r3, #32
 8007b18:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007b1c:	b96b      	cbnz	r3, 8007b3a <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b1e:	2000      	movs	r0, #0
 8007b20:	e77a      	b.n	8007a18 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8007b22:	2001      	movs	r0, #1
 8007b24:	e778      	b.n	8007a18 <HAL_SPI_Receive+0x38>
 8007b26:	2001      	movs	r0, #1
 8007b28:	e776      	b.n	8007a18 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8007b2a:	2003      	movs	r0, #3
 8007b2c:	e774      	b.n	8007a18 <HAL_SPI_Receive+0x38>
 8007b2e:	2003      	movs	r0, #3
 8007b30:	e772      	b.n	8007a18 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8007b32:	2003      	movs	r0, #3
 8007b34:	e770      	b.n	8007a18 <HAL_SPI_Receive+0x38>
 8007b36:	2003      	movs	r0, #3
 8007b38:	e76e      	b.n	8007a18 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8007b3a:	2001      	movs	r0, #1
 8007b3c:	e76c      	b.n	8007a18 <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 8007b3e:	2002      	movs	r0, #2
 8007b40:	e770      	b.n	8007a24 <HAL_SPI_Receive+0x44>
	...

08007b44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b44:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b46:	6a03      	ldr	r3, [r0, #32]
 8007b48:	f023 0301 	bic.w	r3, r3, #1
 8007b4c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b50:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b52:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b54:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b58:	680d      	ldr	r5, [r1, #0]
 8007b5a:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b5e:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b62:	688b      	ldr	r3, [r1, #8]
 8007b64:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b66:	4d0d      	ldr	r5, [pc, #52]	; (8007b9c <TIM_OC1_SetConfig+0x58>)
 8007b68:	42a8      	cmp	r0, r5
 8007b6a:	d009      	beq.n	8007b80 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b6c:	4d0b      	ldr	r5, [pc, #44]	; (8007b9c <TIM_OC1_SetConfig+0x58>)
 8007b6e:	42a8      	cmp	r0, r5
 8007b70:	d00d      	beq.n	8007b8e <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b72:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b74:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b76:	684a      	ldr	r2, [r1, #4]
 8007b78:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b7a:	6203      	str	r3, [r0, #32]
}
 8007b7c:	bc70      	pop	{r4, r5, r6}
 8007b7e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b80:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007b84:	68cc      	ldr	r4, [r1, #12]
 8007b86:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b88:	f023 0304 	bic.w	r3, r3, #4
 8007b8c:	e7ee      	b.n	8007b6c <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8007b92:	694c      	ldr	r4, [r1, #20]
 8007b94:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b96:	698a      	ldr	r2, [r1, #24]
 8007b98:	4322      	orrs	r2, r4
 8007b9a:	e7ea      	b.n	8007b72 <TIM_OC1_SetConfig+0x2e>
 8007b9c:	40010000 	.word	0x40010000

08007ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ba0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ba2:	6a03      	ldr	r3, [r0, #32]
 8007ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ba8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007baa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bac:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bae:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bb0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb4:	680d      	ldr	r5, [r1, #0]
 8007bb6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bbc:	688d      	ldr	r5, [r1, #8]
 8007bbe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bc2:	4d0f      	ldr	r5, [pc, #60]	; (8007c00 <TIM_OC3_SetConfig+0x60>)
 8007bc4:	42a8      	cmp	r0, r5
 8007bc6:	d009      	beq.n	8007bdc <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bc8:	4d0d      	ldr	r5, [pc, #52]	; (8007c00 <TIM_OC3_SetConfig+0x60>)
 8007bca:	42a8      	cmp	r0, r5
 8007bcc:	d00e      	beq.n	8007bec <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bce:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bd0:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bd2:	684a      	ldr	r2, [r1, #4]
 8007bd4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd6:	6203      	str	r3, [r0, #32]
}
 8007bd8:	bc30      	pop	{r4, r5}
 8007bda:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007be0:	68cd      	ldr	r5, [r1, #12]
 8007be2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bea:	e7ed      	b.n	8007bc8 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bec:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bf0:	694d      	ldr	r5, [r1, #20]
 8007bf2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bf6:	698d      	ldr	r5, [r1, #24]
 8007bf8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8007bfc:	e7e7      	b.n	8007bce <TIM_OC3_SetConfig+0x2e>
 8007bfe:	bf00      	nop
 8007c00:	40010000 	.word	0x40010000

08007c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c04:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c06:	6a03      	ldr	r3, [r0, #32]
 8007c08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c0c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c0e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c10:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c12:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c14:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c18:	680d      	ldr	r5, [r1, #0]
 8007c1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c22:	688d      	ldr	r5, [r1, #8]
 8007c24:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c28:	4d07      	ldr	r5, [pc, #28]	; (8007c48 <TIM_OC4_SetConfig+0x44>)
 8007c2a:	42a8      	cmp	r0, r5
 8007c2c:	d006      	beq.n	8007c3c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c2e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c30:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c32:	684a      	ldr	r2, [r1, #4]
 8007c34:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c36:	6203      	str	r3, [r0, #32]
}
 8007c38:	bc30      	pop	{r4, r5}
 8007c3a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c3c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c40:	694d      	ldr	r5, [r1, #20]
 8007c42:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8007c46:	e7f2      	b.n	8007c2e <TIM_OC4_SetConfig+0x2a>
 8007c48:	40010000 	.word	0x40010000

08007c4c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c4c:	6802      	ldr	r2, [r0, #0]
 8007c4e:	68d3      	ldr	r3, [r2, #12]
 8007c50:	f043 0301 	orr.w	r3, r3, #1
 8007c54:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c56:	6802      	ldr	r2, [r0, #0]
 8007c58:	6893      	ldr	r3, [r2, #8]
 8007c5a:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c5e:	2b06      	cmp	r3, #6
 8007c60:	d003      	beq.n	8007c6a <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8007c62:	6813      	ldr	r3, [r2, #0]
 8007c64:	f043 0301 	orr.w	r3, r3, #1
 8007c68:	6013      	str	r3, [r2, #0]
}
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	4770      	bx	lr

08007c6e <HAL_TIM_OC_DelayElapsedCallback>:
}
 8007c6e:	4770      	bx	lr

08007c70 <HAL_TIM_IC_CaptureCallback>:
}
 8007c70:	4770      	bx	lr

08007c72 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8007c72:	4770      	bx	lr

08007c74 <HAL_TIM_TriggerCallback>:
}
 8007c74:	4770      	bx	lr

08007c76 <HAL_TIM_IRQHandler>:
{
 8007c76:	b510      	push	{r4, lr}
 8007c78:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c7a:	6803      	ldr	r3, [r0, #0]
 8007c7c:	691a      	ldr	r2, [r3, #16]
 8007c7e:	f012 0f02 	tst.w	r2, #2
 8007c82:	d011      	beq.n	8007ca8 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c84:	68da      	ldr	r2, [r3, #12]
 8007c86:	f012 0f02 	tst.w	r2, #2
 8007c8a:	d00d      	beq.n	8007ca8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c8c:	f06f 0202 	mvn.w	r2, #2
 8007c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c92:	2301      	movs	r3, #1
 8007c94:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c96:	6803      	ldr	r3, [r0, #0]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	f013 0f03 	tst.w	r3, #3
 8007c9e:	d070      	beq.n	8007d82 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8007ca0:	f7ff ffe6 	bl	8007c70 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	691a      	ldr	r2, [r3, #16]
 8007cac:	f012 0f04 	tst.w	r2, #4
 8007cb0:	d012      	beq.n	8007cd8 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cb2:	68da      	ldr	r2, [r3, #12]
 8007cb4:	f012 0f04 	tst.w	r2, #4
 8007cb8:	d00e      	beq.n	8007cd8 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cba:	f06f 0204 	mvn.w	r2, #4
 8007cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007ccc:	d05f      	beq.n	8007d8e <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f7ff ffce 	bl	8007c70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	691a      	ldr	r2, [r3, #16]
 8007cdc:	f012 0f08 	tst.w	r2, #8
 8007ce0:	d012      	beq.n	8007d08 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	f012 0f08 	tst.w	r2, #8
 8007ce8:	d00e      	beq.n	8007d08 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cea:	f06f 0208 	mvn.w	r2, #8
 8007cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cf0:	2304      	movs	r3, #4
 8007cf2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	f013 0f03 	tst.w	r3, #3
 8007cfc:	d04e      	beq.n	8007d9c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f7ff ffb6 	bl	8007c70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d04:	2300      	movs	r3, #0
 8007d06:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	691a      	ldr	r2, [r3, #16]
 8007d0c:	f012 0f10 	tst.w	r2, #16
 8007d10:	d012      	beq.n	8007d38 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d12:	68da      	ldr	r2, [r3, #12]
 8007d14:	f012 0f10 	tst.w	r2, #16
 8007d18:	d00e      	beq.n	8007d38 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d1a:	f06f 0210 	mvn.w	r2, #16
 8007d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d20:	2308      	movs	r3, #8
 8007d22:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007d2c:	d03d      	beq.n	8007daa <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f7ff ff9e 	bl	8007c70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d34:	2300      	movs	r3, #0
 8007d36:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	691a      	ldr	r2, [r3, #16]
 8007d3c:	f012 0f01 	tst.w	r2, #1
 8007d40:	d003      	beq.n	8007d4a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	f012 0f01 	tst.w	r2, #1
 8007d48:	d136      	bne.n	8007db8 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	691a      	ldr	r2, [r3, #16]
 8007d4e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007d52:	d003      	beq.n	8007d5c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007d5a:	d134      	bne.n	8007dc6 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	691a      	ldr	r2, [r3, #16]
 8007d60:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007d64:	d003      	beq.n	8007d6e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d66:	68da      	ldr	r2, [r3, #12]
 8007d68:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007d6c:	d132      	bne.n	8007dd4 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	691a      	ldr	r2, [r3, #16]
 8007d72:	f012 0f20 	tst.w	r2, #32
 8007d76:	d003      	beq.n	8007d80 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	f012 0f20 	tst.w	r2, #32
 8007d7e:	d130      	bne.n	8007de2 <HAL_TIM_IRQHandler+0x16c>
}
 8007d80:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d82:	f7ff ff74 	bl	8007c6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d86:	4620      	mov	r0, r4
 8007d88:	f7ff ff73 	bl	8007c72 <HAL_TIM_PWM_PulseFinishedCallback>
 8007d8c:	e78a      	b.n	8007ca4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f7ff ff6d 	bl	8007c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d94:	4620      	mov	r0, r4
 8007d96:	f7ff ff6c 	bl	8007c72 <HAL_TIM_PWM_PulseFinishedCallback>
 8007d9a:	e79b      	b.n	8007cd4 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f7ff ff66 	bl	8007c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da2:	4620      	mov	r0, r4
 8007da4:	f7ff ff65 	bl	8007c72 <HAL_TIM_PWM_PulseFinishedCallback>
 8007da8:	e7ac      	b.n	8007d04 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007daa:	4620      	mov	r0, r4
 8007dac:	f7ff ff5f 	bl	8007c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db0:	4620      	mov	r0, r4
 8007db2:	f7ff ff5e 	bl	8007c72 <HAL_TIM_PWM_PulseFinishedCallback>
 8007db6:	e7bd      	b.n	8007d34 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007db8:	f06f 0201 	mvn.w	r2, #1
 8007dbc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f7fc f818 	bl	8003df4 <HAL_TIM_PeriodElapsedCallback>
 8007dc4:	e7c1      	b.n	8007d4a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f000 f9c5 	bl	800815c <HAL_TIMEx_BreakCallback>
 8007dd2:	e7c3      	b.n	8007d5c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dd8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f7ff ff4a 	bl	8007c74 <HAL_TIM_TriggerCallback>
 8007de0:	e7c5      	b.n	8007d6e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007de2:	f06f 0220 	mvn.w	r2, #32
 8007de6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007de8:	4620      	mov	r0, r4
 8007dea:	f000 f9b6 	bl	800815a <HAL_TIMEx_CommutCallback>
}
 8007dee:	e7c7      	b.n	8007d80 <HAL_TIM_IRQHandler+0x10a>

08007df0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8007df0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007df2:	4a25      	ldr	r2, [pc, #148]	; (8007e88 <TIM_Base_SetConfig+0x98>)
 8007df4:	4290      	cmp	r0, r2
 8007df6:	d00e      	beq.n	8007e16 <TIM_Base_SetConfig+0x26>
 8007df8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007dfc:	d00b      	beq.n	8007e16 <TIM_Base_SetConfig+0x26>
 8007dfe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007e02:	4290      	cmp	r0, r2
 8007e04:	d007      	beq.n	8007e16 <TIM_Base_SetConfig+0x26>
 8007e06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e0a:	4290      	cmp	r0, r2
 8007e0c:	d003      	beq.n	8007e16 <TIM_Base_SetConfig+0x26>
 8007e0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e12:	4290      	cmp	r0, r2
 8007e14:	d103      	bne.n	8007e1e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007e1a:	684a      	ldr	r2, [r1, #4]
 8007e1c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e1e:	4a1a      	ldr	r2, [pc, #104]	; (8007e88 <TIM_Base_SetConfig+0x98>)
 8007e20:	4290      	cmp	r0, r2
 8007e22:	d01a      	beq.n	8007e5a <TIM_Base_SetConfig+0x6a>
 8007e24:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007e28:	d017      	beq.n	8007e5a <TIM_Base_SetConfig+0x6a>
 8007e2a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007e2e:	4290      	cmp	r0, r2
 8007e30:	d013      	beq.n	8007e5a <TIM_Base_SetConfig+0x6a>
 8007e32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e36:	4290      	cmp	r0, r2
 8007e38:	d00f      	beq.n	8007e5a <TIM_Base_SetConfig+0x6a>
 8007e3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e3e:	4290      	cmp	r0, r2
 8007e40:	d00b      	beq.n	8007e5a <TIM_Base_SetConfig+0x6a>
 8007e42:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8007e46:	4290      	cmp	r0, r2
 8007e48:	d007      	beq.n	8007e5a <TIM_Base_SetConfig+0x6a>
 8007e4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e4e:	4290      	cmp	r0, r2
 8007e50:	d003      	beq.n	8007e5a <TIM_Base_SetConfig+0x6a>
 8007e52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e56:	4290      	cmp	r0, r2
 8007e58:	d103      	bne.n	8007e62 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e5e:	68ca      	ldr	r2, [r1, #12]
 8007e60:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e66:	694a      	ldr	r2, [r1, #20]
 8007e68:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007e6a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e6c:	688b      	ldr	r3, [r1, #8]
 8007e6e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007e70:	680b      	ldr	r3, [r1, #0]
 8007e72:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e74:	4b04      	ldr	r3, [pc, #16]	; (8007e88 <TIM_Base_SetConfig+0x98>)
 8007e76:	4298      	cmp	r0, r3
 8007e78:	d002      	beq.n	8007e80 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	6143      	str	r3, [r0, #20]
}
 8007e7e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8007e80:	690b      	ldr	r3, [r1, #16]
 8007e82:	6303      	str	r3, [r0, #48]	; 0x30
 8007e84:	e7f9      	b.n	8007e7a <TIM_Base_SetConfig+0x8a>
 8007e86:	bf00      	nop
 8007e88:	40010000 	.word	0x40010000

08007e8c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007e8c:	b1a8      	cbz	r0, 8007eba <HAL_TIM_Base_Init+0x2e>
{
 8007e8e:	b510      	push	{r4, lr}
 8007e90:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007e92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007e96:	b15b      	cbz	r3, 8007eb0 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8007e98:	2302      	movs	r3, #2
 8007e9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e9e:	1d21      	adds	r1, r4, #4
 8007ea0:	6820      	ldr	r0, [r4, #0]
 8007ea2:	f7ff ffa5 	bl	8007df0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007eac:	2000      	movs	r0, #0
}
 8007eae:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007eb0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007eb4:	f7fc fbfc 	bl	80046b0 <HAL_TIM_Base_MspInit>
 8007eb8:	e7ee      	b.n	8007e98 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8007eba:	2001      	movs	r0, #1
}
 8007ebc:	4770      	bx	lr

08007ebe <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007ebe:	b1a8      	cbz	r0, 8007eec <HAL_TIM_PWM_Init+0x2e>
{
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007ec4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007ec8:	b15b      	cbz	r3, 8007ee2 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8007eca:	2302      	movs	r3, #2
 8007ecc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ed0:	1d21      	adds	r1, r4, #4
 8007ed2:	6820      	ldr	r0, [r4, #0]
 8007ed4:	f7ff ff8c 	bl	8007df0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007ede:	2000      	movs	r0, #0
}
 8007ee0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007ee2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007ee6:	f7fc fb97 	bl	8004618 <HAL_TIM_PWM_MspInit>
 8007eea:	e7ee      	b.n	8007eca <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8007eec:	2001      	movs	r0, #1
}
 8007eee:	4770      	bx	lr

08007ef0 <TIM_OC2_SetConfig>:
{
 8007ef0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ef2:	6a03      	ldr	r3, [r0, #32]
 8007ef4:	f023 0310 	bic.w	r3, r3, #16
 8007ef8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007efa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007efc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007efe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f00:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f04:	680d      	ldr	r5, [r1, #0]
 8007f06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8007f0a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f0e:	688d      	ldr	r5, [r1, #8]
 8007f10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f14:	4d0e      	ldr	r5, [pc, #56]	; (8007f50 <TIM_OC2_SetConfig+0x60>)
 8007f16:	42a8      	cmp	r0, r5
 8007f18:	d009      	beq.n	8007f2e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1a:	4d0d      	ldr	r5, [pc, #52]	; (8007f50 <TIM_OC2_SetConfig+0x60>)
 8007f1c:	42a8      	cmp	r0, r5
 8007f1e:	d00e      	beq.n	8007f3e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8007f20:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007f22:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007f24:	684a      	ldr	r2, [r1, #4]
 8007f26:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007f28:	6203      	str	r3, [r0, #32]
}
 8007f2a:	bc30      	pop	{r4, r5}
 8007f2c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f32:	68cd      	ldr	r5, [r1, #12]
 8007f34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f3c:	e7ed      	b.n	8007f1a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f3e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f42:	694d      	ldr	r5, [r1, #20]
 8007f44:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f48:	698d      	ldr	r5, [r1, #24]
 8007f4a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8007f4e:	e7e7      	b.n	8007f20 <TIM_OC2_SetConfig+0x30>
 8007f50:	40010000 	.word	0x40010000

08007f54 <HAL_TIM_PWM_ConfigChannel>:
{
 8007f54:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007f56:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d066      	beq.n	800802c <HAL_TIM_PWM_ConfigChannel+0xd8>
 8007f5e:	460d      	mov	r5, r1
 8007f60:	4604      	mov	r4, r0
 8007f62:	2301      	movs	r3, #1
 8007f64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007f68:	2302      	movs	r3, #2
 8007f6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8007f6e:	2a0c      	cmp	r2, #12
 8007f70:	d81a      	bhi.n	8007fa8 <HAL_TIM_PWM_ConfigChannel+0x54>
 8007f72:	e8df f002 	tbb	[pc, r2]
 8007f76:	1907      	.short	0x1907
 8007f78:	19201919 	.word	0x19201919
 8007f7c:	19341919 	.word	0x19341919
 8007f80:	1919      	.short	0x1919
 8007f82:	47          	.byte	0x47
 8007f83:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f84:	6800      	ldr	r0, [r0, #0]
 8007f86:	f7ff fddd 	bl	8007b44 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f8a:	6822      	ldr	r2, [r4, #0]
 8007f8c:	6993      	ldr	r3, [r2, #24]
 8007f8e:	f043 0308 	orr.w	r3, r3, #8
 8007f92:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f94:	6822      	ldr	r2, [r4, #0]
 8007f96:	6993      	ldr	r3, [r2, #24]
 8007f98:	f023 0304 	bic.w	r3, r3, #4
 8007f9c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	6993      	ldr	r3, [r2, #24]
 8007fa2:	6929      	ldr	r1, [r5, #16]
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007fae:	2000      	movs	r0, #0
 8007fb0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007fb4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fb6:	6800      	ldr	r0, [r0, #0]
 8007fb8:	f7ff ff9a 	bl	8007ef0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fbc:	6822      	ldr	r2, [r4, #0]
 8007fbe:	6993      	ldr	r3, [r2, #24]
 8007fc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007fc4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fc6:	6822      	ldr	r2, [r4, #0]
 8007fc8:	6993      	ldr	r3, [r2, #24]
 8007fca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fce:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fd0:	6822      	ldr	r2, [r4, #0]
 8007fd2:	6993      	ldr	r3, [r2, #24]
 8007fd4:	6929      	ldr	r1, [r5, #16]
 8007fd6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007fda:	6193      	str	r3, [r2, #24]
      break;
 8007fdc:	e7e4      	b.n	8007fa8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fde:	6800      	ldr	r0, [r0, #0]
 8007fe0:	f7ff fdde 	bl	8007ba0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fe4:	6822      	ldr	r2, [r4, #0]
 8007fe6:	69d3      	ldr	r3, [r2, #28]
 8007fe8:	f043 0308 	orr.w	r3, r3, #8
 8007fec:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fee:	6822      	ldr	r2, [r4, #0]
 8007ff0:	69d3      	ldr	r3, [r2, #28]
 8007ff2:	f023 0304 	bic.w	r3, r3, #4
 8007ff6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ff8:	6822      	ldr	r2, [r4, #0]
 8007ffa:	69d3      	ldr	r3, [r2, #28]
 8007ffc:	6929      	ldr	r1, [r5, #16]
 8007ffe:	430b      	orrs	r3, r1
 8008000:	61d3      	str	r3, [r2, #28]
      break;
 8008002:	e7d1      	b.n	8007fa8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008004:	6800      	ldr	r0, [r0, #0]
 8008006:	f7ff fdfd 	bl	8007c04 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800800a:	6822      	ldr	r2, [r4, #0]
 800800c:	69d3      	ldr	r3, [r2, #28]
 800800e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008012:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008014:	6822      	ldr	r2, [r4, #0]
 8008016:	69d3      	ldr	r3, [r2, #28]
 8008018:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800801c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800801e:	6822      	ldr	r2, [r4, #0]
 8008020:	69d3      	ldr	r3, [r2, #28]
 8008022:	6929      	ldr	r1, [r5, #16]
 8008024:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008028:	61d3      	str	r3, [r2, #28]
      break;
 800802a:	e7bd      	b.n	8007fa8 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 800802c:	2002      	movs	r0, #2
 800802e:	e7c1      	b.n	8007fb4 <HAL_TIM_PWM_ConfigChannel+0x60>

08008030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008030:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008032:	f001 011f 	and.w	r1, r1, #31
 8008036:	2301      	movs	r3, #1
 8008038:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800803c:	6a03      	ldr	r3, [r0, #32]
 800803e:	ea23 0304 	bic.w	r3, r3, r4
 8008042:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008044:	6a03      	ldr	r3, [r0, #32]
 8008046:	408a      	lsls	r2, r1
 8008048:	4313      	orrs	r3, r2
 800804a:	6203      	str	r3, [r0, #32]
}
 800804c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008050:	4770      	bx	lr
	...

08008054 <HAL_TIM_PWM_Start>:
{
 8008054:	b510      	push	{r4, lr}
 8008056:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008058:	2201      	movs	r2, #1
 800805a:	6800      	ldr	r0, [r0, #0]
 800805c:	f7ff ffe8 	bl	8008030 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	4a0a      	ldr	r2, [pc, #40]	; (800808c <HAL_TIM_PWM_Start+0x38>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d00b      	beq.n	8008080 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008068:	6822      	ldr	r2, [r4, #0]
 800806a:	6893      	ldr	r3, [r2, #8]
 800806c:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008070:	2b06      	cmp	r3, #6
 8008072:	d003      	beq.n	800807c <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8008074:	6813      	ldr	r3, [r2, #0]
 8008076:	f043 0301 	orr.w	r3, r3, #1
 800807a:	6013      	str	r3, [r2, #0]
}
 800807c:	2000      	movs	r0, #0
 800807e:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8008080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008086:	645a      	str	r2, [r3, #68]	; 0x44
 8008088:	e7ee      	b.n	8008068 <HAL_TIM_PWM_Start+0x14>
 800808a:	bf00      	nop
 800808c:	40010000 	.word	0x40010000

08008090 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008090:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008094:	2b01      	cmp	r3, #1
 8008096:	d033      	beq.n	8008100 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8008098:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800809a:	2301      	movs	r3, #1
 800809c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a0:	2302      	movs	r3, #2
 80080a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080a6:	6803      	ldr	r3, [r0, #0]
 80080a8:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080aa:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080ac:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080b0:	680a      	ldr	r2, [r1, #0]
 80080b2:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b6:	6803      	ldr	r3, [r0, #0]
 80080b8:	4a12      	ldr	r2, [pc, #72]	; (8008104 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d012      	beq.n	80080e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80080be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c2:	d00f      	beq.n	80080e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80080c4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d00b      	beq.n	80080e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80080cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d007      	beq.n	80080e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80080d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080d8:	4293      	cmp	r3, r2
 80080da:	d003      	beq.n	80080e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80080dc:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d104      	bne.n	80080ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080e4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080e8:	684a      	ldr	r2, [r1, #4]
 80080ea:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080ec:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080ee:	2301      	movs	r3, #1
 80080f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080f4:	2300      	movs	r3, #0
 80080f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80080fa:	4618      	mov	r0, r3
}
 80080fc:	bc30      	pop	{r4, r5}
 80080fe:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008100:	2002      	movs	r0, #2
}
 8008102:	4770      	bx	lr
 8008104:	40010000 	.word	0x40010000

08008108 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008108:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800810c:	2b01      	cmp	r3, #1
 800810e:	d022      	beq.n	8008156 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8008110:	2301      	movs	r3, #1
 8008112:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008116:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800811c:	688a      	ldr	r2, [r1, #8]
 800811e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008120:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008124:	684a      	ldr	r2, [r1, #4]
 8008126:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800812c:	680a      	ldr	r2, [r1, #0]
 800812e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008134:	690a      	ldr	r2, [r1, #16]
 8008136:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008138:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800813c:	694a      	ldr	r2, [r1, #20]
 800813e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008144:	69ca      	ldr	r2, [r1, #28]
 8008146:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008148:	6802      	ldr	r2, [r0, #0]
 800814a:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800814c:	2300      	movs	r3, #0
 800814e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8008152:	4618      	mov	r0, r3
 8008154:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008156:	2002      	movs	r0, #2
}
 8008158:	4770      	bx	lr

0800815a <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800815a:	4770      	bx	lr

0800815c <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800815c:	4770      	bx	lr

0800815e <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800815e:	6802      	ldr	r2, [r0, #0]
 8008160:	68d3      	ldr	r3, [r2, #12]
 8008162:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008166:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008168:	2320      	movs	r3, #32
 800816a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 800816e:	4770      	bx	lr

08008170 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008170:	6802      	ldr	r2, [r0, #0]
 8008172:	68d3      	ldr	r3, [r2, #12]
 8008174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008178:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817a:	6802      	ldr	r2, [r0, #0]
 800817c:	6953      	ldr	r3, [r2, #20]
 800817e:	f023 0301 	bic.w	r3, r3, #1
 8008182:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008184:	2320      	movs	r3, #32
 8008186:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800818a:	4770      	bx	lr

0800818c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800818c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b21      	cmp	r3, #33	; 0x21
 8008194:	d12a      	bne.n	80081ec <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008196:	6883      	ldr	r3, [r0, #8]
 8008198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800819c:	d016      	beq.n	80081cc <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800819e:	6a03      	ldr	r3, [r0, #32]
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	6202      	str	r2, [r0, #32]
 80081a4:	781a      	ldrb	r2, [r3, #0]
 80081a6:	6803      	ldr	r3, [r0, #0]
 80081a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80081aa:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80081ac:	3b01      	subs	r3, #1
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80081b2:	b9eb      	cbnz	r3, 80081f0 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80081b4:	6802      	ldr	r2, [r0, #0]
 80081b6:	68d3      	ldr	r3, [r2, #12]
 80081b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081bc:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80081be:	6802      	ldr	r2, [r0, #0]
 80081c0:	68d3      	ldr	r3, [r2, #12]
 80081c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081c6:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 80081c8:	2000      	movs	r0, #0
 80081ca:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80081cc:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	6802      	ldr	r2, [r0, #0]
 80081d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d6:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80081d8:	6903      	ldr	r3, [r0, #16]
 80081da:	b91b      	cbnz	r3, 80081e4 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 80081dc:	6a03      	ldr	r3, [r0, #32]
 80081de:	3302      	adds	r3, #2
 80081e0:	6203      	str	r3, [r0, #32]
 80081e2:	e7e2      	b.n	80081aa <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 80081e4:	6a03      	ldr	r3, [r0, #32]
 80081e6:	3301      	adds	r3, #1
 80081e8:	6203      	str	r3, [r0, #32]
 80081ea:	e7de      	b.n	80081aa <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 80081ec:	2002      	movs	r0, #2
 80081ee:	4770      	bx	lr
    return HAL_OK;
 80081f0:	2000      	movs	r0, #0
  }
}
 80081f2:	4770      	bx	lr

080081f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081f4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80081f8:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081fa:	6802      	ldr	r2, [r0, #0]
 80081fc:	6913      	ldr	r3, [r2, #16]
 80081fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008202:	68c1      	ldr	r1, [r0, #12]
 8008204:	430b      	orrs	r3, r1
 8008206:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008208:	6883      	ldr	r3, [r0, #8]
 800820a:	6902      	ldr	r2, [r0, #16]
 800820c:	4313      	orrs	r3, r2
 800820e:	6942      	ldr	r2, [r0, #20]
 8008210:	4313      	orrs	r3, r2
 8008212:	69c2      	ldr	r2, [r0, #28]
 8008214:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8008216:	6801      	ldr	r1, [r0, #0]
 8008218:	68cb      	ldr	r3, [r1, #12]
 800821a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800821e:	f023 030c 	bic.w	r3, r3, #12
 8008222:	4313      	orrs	r3, r2
 8008224:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008226:	6802      	ldr	r2, [r0, #0]
 8008228:	6953      	ldr	r3, [r2, #20]
 800822a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800822e:	6981      	ldr	r1, [r0, #24]
 8008230:	430b      	orrs	r3, r1
 8008232:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008234:	69c3      	ldr	r3, [r0, #28]
 8008236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800823a:	d03b      	beq.n	80082b4 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800823c:	6803      	ldr	r3, [r0, #0]
 800823e:	4a71      	ldr	r2, [pc, #452]	; (8008404 <UART_SetConfig+0x210>)
 8008240:	4293      	cmp	r3, r2
 8008242:	f000 80ab 	beq.w	800839c <UART_SetConfig+0x1a8>
 8008246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800824a:	4293      	cmp	r3, r2
 800824c:	f000 80a6 	beq.w	800839c <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008250:	f7fe fedc 	bl	800700c <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008254:	f04f 0900 	mov.w	r9, #0
 8008258:	1806      	adds	r6, r0, r0
 800825a:	eb49 0709 	adc.w	r7, r9, r9
 800825e:	eb16 0b00 	adds.w	fp, r6, r0
 8008262:	eb47 0c09 	adc.w	ip, r7, r9
 8008266:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800826a:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 800826e:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8008272:	4693      	mov	fp, r2
 8008274:	469c      	mov	ip, r3
 8008276:	6863      	ldr	r3, [r4, #4]
 8008278:	009a      	lsls	r2, r3, #2
 800827a:	0f9b      	lsrs	r3, r3, #30
 800827c:	eb10 000b 	adds.w	r0, r0, fp
 8008280:	eb49 010c 	adc.w	r1, r9, ip
 8008284:	f7f8 fc42 	bl	8000b0c <__aeabi_uldivmod>
 8008288:	4d5f      	ldr	r5, [pc, #380]	; (8008408 <UART_SetConfig+0x214>)
 800828a:	fba5 3200 	umull	r3, r2, r5, r0
 800828e:	0951      	lsrs	r1, r2, #5
 8008290:	2264      	movs	r2, #100	; 0x64
 8008292:	fb02 0211 	mls	r2, r2, r1, r0
 8008296:	0113      	lsls	r3, r2, #4
 8008298:	3332      	adds	r3, #50	; 0x32
 800829a:	fba5 2303 	umull	r2, r3, r5, r3
 800829e:	095b      	lsrs	r3, r3, #5
 80082a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80082a4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	6821      	ldr	r1, [r4, #0]
 80082ae:	4413      	add	r3, r2
 80082b0:	608b      	str	r3, [r1, #8]
    }
  }
}
 80082b2:	e0a4      	b.n	80083fe <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082b4:	6803      	ldr	r3, [r0, #0]
 80082b6:	4a53      	ldr	r2, [pc, #332]	; (8008404 <UART_SetConfig+0x210>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d039      	beq.n	8008330 <UART_SetConfig+0x13c>
 80082bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d035      	beq.n	8008330 <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80082c4:	f7fe fea2 	bl	800700c <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082c8:	4683      	mov	fp, r0
 80082ca:	f04f 0c00 	mov.w	ip, #0
 80082ce:	1806      	adds	r6, r0, r0
 80082d0:	eb4c 070c 	adc.w	r7, ip, ip
 80082d4:	eb16 0800 	adds.w	r8, r6, r0
 80082d8:	eb47 090c 	adc.w	r9, r7, ip
 80082dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082e8:	4690      	mov	r8, r2
 80082ea:	4699      	mov	r9, r3
 80082ec:	6862      	ldr	r2, [r4, #4]
 80082ee:	2100      	movs	r1, #0
 80082f0:	1892      	adds	r2, r2, r2
 80082f2:	eb41 0301 	adc.w	r3, r1, r1
 80082f6:	eb1b 0008 	adds.w	r0, fp, r8
 80082fa:	eb4c 0109 	adc.w	r1, ip, r9
 80082fe:	f7f8 fc05 	bl	8000b0c <__aeabi_uldivmod>
 8008302:	4d41      	ldr	r5, [pc, #260]	; (8008408 <UART_SetConfig+0x214>)
 8008304:	fba5 3200 	umull	r3, r2, r5, r0
 8008308:	0951      	lsrs	r1, r2, #5
 800830a:	2264      	movs	r2, #100	; 0x64
 800830c:	fb02 0211 	mls	r2, r2, r1, r0
 8008310:	00d3      	lsls	r3, r2, #3
 8008312:	3332      	adds	r3, #50	; 0x32
 8008314:	fba5 2303 	umull	r2, r3, r5, r3
 8008318:	095b      	lsrs	r3, r3, #5
 800831a:	005a      	lsls	r2, r3, #1
 800831c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8008320:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008324:	f003 0307 	and.w	r3, r3, #7
 8008328:	6821      	ldr	r1, [r4, #0]
 800832a:	4413      	add	r3, r2
 800832c:	608b      	str	r3, [r1, #8]
 800832e:	e066      	b.n	80083fe <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008330:	f7fe fe7c 	bl	800702c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008334:	4680      	mov	r8, r0
 8008336:	f04f 0900 	mov.w	r9, #0
 800833a:	1806      	adds	r6, r0, r0
 800833c:	eb49 0709 	adc.w	r7, r9, r9
 8008340:	eb16 0b00 	adds.w	fp, r6, r0
 8008344:	eb47 0c09 	adc.w	ip, r7, r9
 8008348:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800834c:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8008350:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8008354:	4693      	mov	fp, r2
 8008356:	469c      	mov	ip, r3
 8008358:	6862      	ldr	r2, [r4, #4]
 800835a:	2100      	movs	r1, #0
 800835c:	1892      	adds	r2, r2, r2
 800835e:	eb41 0301 	adc.w	r3, r1, r1
 8008362:	eb18 000b 	adds.w	r0, r8, fp
 8008366:	eb49 010c 	adc.w	r1, r9, ip
 800836a:	f7f8 fbcf 	bl	8000b0c <__aeabi_uldivmod>
 800836e:	4d26      	ldr	r5, [pc, #152]	; (8008408 <UART_SetConfig+0x214>)
 8008370:	fba5 3200 	umull	r3, r2, r5, r0
 8008374:	0951      	lsrs	r1, r2, #5
 8008376:	2264      	movs	r2, #100	; 0x64
 8008378:	fb02 0211 	mls	r2, r2, r1, r0
 800837c:	00d3      	lsls	r3, r2, #3
 800837e:	3332      	adds	r3, #50	; 0x32
 8008380:	fba5 2303 	umull	r2, r3, r5, r3
 8008384:	095b      	lsrs	r3, r3, #5
 8008386:	005a      	lsls	r2, r3, #1
 8008388:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800838c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008390:	f003 0307 	and.w	r3, r3, #7
 8008394:	6821      	ldr	r1, [r4, #0]
 8008396:	4413      	add	r3, r2
 8008398:	608b      	str	r3, [r1, #8]
 800839a:	e030      	b.n	80083fe <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 800839c:	f7fe fe46 	bl	800702c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083a0:	f04f 0900 	mov.w	r9, #0
 80083a4:	1806      	adds	r6, r0, r0
 80083a6:	eb49 0709 	adc.w	r7, r9, r9
 80083aa:	eb16 0b00 	adds.w	fp, r6, r0
 80083ae:	eb47 0c09 	adc.w	ip, r7, r9
 80083b2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80083b6:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80083ba:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 80083be:	4693      	mov	fp, r2
 80083c0:	469c      	mov	ip, r3
 80083c2:	6863      	ldr	r3, [r4, #4]
 80083c4:	009a      	lsls	r2, r3, #2
 80083c6:	0f9b      	lsrs	r3, r3, #30
 80083c8:	eb10 000b 	adds.w	r0, r0, fp
 80083cc:	eb49 010c 	adc.w	r1, r9, ip
 80083d0:	f7f8 fb9c 	bl	8000b0c <__aeabi_uldivmod>
 80083d4:	4d0c      	ldr	r5, [pc, #48]	; (8008408 <UART_SetConfig+0x214>)
 80083d6:	fba5 3200 	umull	r3, r2, r5, r0
 80083da:	0951      	lsrs	r1, r2, #5
 80083dc:	2264      	movs	r2, #100	; 0x64
 80083de:	fb02 0211 	mls	r2, r2, r1, r0
 80083e2:	0113      	lsls	r3, r2, #4
 80083e4:	3332      	adds	r3, #50	; 0x32
 80083e6:	fba5 2303 	umull	r2, r3, r5, r3
 80083ea:	095b      	lsrs	r3, r3, #5
 80083ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80083f0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80083f4:	f003 030f 	and.w	r3, r3, #15
 80083f8:	6821      	ldr	r1, [r4, #0]
 80083fa:	4413      	add	r3, r2
 80083fc:	608b      	str	r3, [r1, #8]
}
 80083fe:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8008402:	bf00      	nop
 8008404:	40011000 	.word	0x40011000
 8008408:	51eb851f 	.word	0x51eb851f

0800840c <UART_WaitOnFlagUntilTimeout>:
{
 800840c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008410:	4605      	mov	r5, r0
 8008412:	460f      	mov	r7, r1
 8008414:	4616      	mov	r6, r2
 8008416:	4698      	mov	r8, r3
 8008418:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800841a:	682b      	ldr	r3, [r5, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	ea37 0303 	bics.w	r3, r7, r3
 8008422:	bf0c      	ite	eq
 8008424:	2301      	moveq	r3, #1
 8008426:	2300      	movne	r3, #0
 8008428:	42b3      	cmp	r3, r6
 800842a:	d11d      	bne.n	8008468 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800842c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8008430:	d0f3      	beq.n	800841a <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008432:	b12c      	cbz	r4, 8008440 <UART_WaitOnFlagUntilTimeout+0x34>
 8008434:	f7fc ff78 	bl	8005328 <HAL_GetTick>
 8008438:	eba0 0008 	sub.w	r0, r0, r8
 800843c:	42a0      	cmp	r0, r4
 800843e:	d9ec      	bls.n	800841a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008440:	682a      	ldr	r2, [r5, #0]
 8008442:	68d3      	ldr	r3, [r2, #12]
 8008444:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008448:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800844a:	682a      	ldr	r2, [r5, #0]
 800844c:	6953      	ldr	r3, [r2, #20]
 800844e:	f023 0301 	bic.w	r3, r3, #1
 8008452:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8008454:	2320      	movs	r3, #32
 8008456:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800845a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800845e:	2300      	movs	r3, #0
 8008460:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8008464:	2003      	movs	r0, #3
 8008466:	e000      	b.n	800846a <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8008468:	2000      	movs	r0, #0
}
 800846a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800846e <HAL_UART_Init>:
  if (huart == NULL)
 800846e:	b358      	cbz	r0, 80084c8 <HAL_UART_Init+0x5a>
{
 8008470:	b510      	push	{r4, lr}
 8008472:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008474:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8008478:	b30b      	cbz	r3, 80084be <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800847a:	2324      	movs	r3, #36	; 0x24
 800847c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8008480:	6822      	ldr	r2, [r4, #0]
 8008482:	68d3      	ldr	r3, [r2, #12]
 8008484:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008488:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800848a:	4620      	mov	r0, r4
 800848c:	f7ff feb2 	bl	80081f4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008490:	6822      	ldr	r2, [r4, #0]
 8008492:	6913      	ldr	r3, [r2, #16]
 8008494:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008498:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800849a:	6822      	ldr	r2, [r4, #0]
 800849c:	6953      	ldr	r3, [r2, #20]
 800849e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80084a2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80084a4:	6822      	ldr	r2, [r4, #0]
 80084a6:	68d3      	ldr	r3, [r2, #12]
 80084a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80084ac:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ae:	2000      	movs	r0, #0
 80084b0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80084b2:	2320      	movs	r3, #32
 80084b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80084b8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80084bc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80084be:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80084c2:	f7fc f98d 	bl	80047e0 <HAL_UART_MspInit>
 80084c6:	e7d8      	b.n	800847a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80084c8:	2001      	movs	r0, #1
}
 80084ca:	4770      	bx	lr

080084cc <HAL_UART_Transmit>:
{
 80084cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084d0:	b083      	sub	sp, #12
 80084d2:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80084d4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b20      	cmp	r3, #32
 80084dc:	d156      	bne.n	800858c <HAL_UART_Transmit+0xc0>
 80084de:	4604      	mov	r4, r0
 80084e0:	460d      	mov	r5, r1
 80084e2:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80084e4:	2900      	cmp	r1, #0
 80084e6:	d056      	beq.n	8008596 <HAL_UART_Transmit+0xca>
 80084e8:	2a00      	cmp	r2, #0
 80084ea:	d056      	beq.n	800859a <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 80084ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d054      	beq.n	800859e <HAL_UART_Transmit+0xd2>
 80084f4:	2301      	movs	r3, #1
 80084f6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084fa:	f04f 0900 	mov.w	r9, #0
 80084fe:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008502:	2321      	movs	r3, #33	; 0x21
 8008504:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8008508:	f7fc ff0e 	bl	8005328 <HAL_GetTick>
 800850c:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800850e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8008512:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8008516:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800851a:	e010      	b.n	800853e <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800851c:	9600      	str	r6, [sp, #0]
 800851e:	463b      	mov	r3, r7
 8008520:	2200      	movs	r2, #0
 8008522:	2180      	movs	r1, #128	; 0x80
 8008524:	4620      	mov	r0, r4
 8008526:	f7ff ff71 	bl	800840c <UART_WaitOnFlagUntilTimeout>
 800852a:	2800      	cmp	r0, #0
 800852c:	d139      	bne.n	80085a2 <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800852e:	882b      	ldrh	r3, [r5, #0]
 8008530:	6822      	ldr	r2, [r4, #0]
 8008532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008536:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008538:	6923      	ldr	r3, [r4, #16]
 800853a:	b9c3      	cbnz	r3, 800856e <HAL_UART_Transmit+0xa2>
          pData += 2U;
 800853c:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 800853e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008540:	b29b      	uxth	r3, r3
 8008542:	b1b3      	cbz	r3, 8008572 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8008544:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008546:	3b01      	subs	r3, #1
 8008548:	b29b      	uxth	r3, r3
 800854a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800854c:	68a3      	ldr	r3, [r4, #8]
 800854e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008552:	d0e3      	beq.n	800851c <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008554:	9600      	str	r6, [sp, #0]
 8008556:	463b      	mov	r3, r7
 8008558:	2200      	movs	r2, #0
 800855a:	2180      	movs	r1, #128	; 0x80
 800855c:	4620      	mov	r0, r4
 800855e:	f7ff ff55 	bl	800840c <UART_WaitOnFlagUntilTimeout>
 8008562:	bb00      	cbnz	r0, 80085a6 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008564:	782a      	ldrb	r2, [r5, #0]
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	605a      	str	r2, [r3, #4]
 800856a:	3501      	adds	r5, #1
 800856c:	e7e7      	b.n	800853e <HAL_UART_Transmit+0x72>
          pData += 1U;
 800856e:	3501      	adds	r5, #1
 8008570:	e7e5      	b.n	800853e <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008572:	9600      	str	r6, [sp, #0]
 8008574:	463b      	mov	r3, r7
 8008576:	2200      	movs	r2, #0
 8008578:	2140      	movs	r1, #64	; 0x40
 800857a:	4620      	mov	r0, r4
 800857c:	f7ff ff46 	bl	800840c <UART_WaitOnFlagUntilTimeout>
 8008580:	4603      	mov	r3, r0
 8008582:	b990      	cbnz	r0, 80085aa <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 8008584:	2220      	movs	r2, #32
 8008586:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    return HAL_OK;
 800858a:	e000      	b.n	800858e <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800858c:	2302      	movs	r3, #2
}
 800858e:	4618      	mov	r0, r3
 8008590:	b003      	add	sp, #12
 8008592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e7f9      	b.n	800858e <HAL_UART_Transmit+0xc2>
 800859a:	2301      	movs	r3, #1
 800859c:	e7f7      	b.n	800858e <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 800859e:	2302      	movs	r3, #2
 80085a0:	e7f5      	b.n	800858e <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e7f3      	b.n	800858e <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e7f1      	b.n	800858e <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e7ef      	b.n	800858e <HAL_UART_Transmit+0xc2>

080085ae <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80085ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b20      	cmp	r3, #32
 80085b6:	d116      	bne.n	80085e6 <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 80085b8:	b1b9      	cbz	r1, 80085ea <HAL_UART_Transmit_IT+0x3c>
 80085ba:	b1c2      	cbz	r2, 80085ee <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 80085bc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d016      	beq.n	80085f2 <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 80085c4:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 80085c6:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 80085c8:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ca:	2300      	movs	r3, #0
 80085cc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085ce:	2221      	movs	r2, #33	; 0x21
 80085d0:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80085d4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80085d8:	6801      	ldr	r1, [r0, #0]
 80085da:	68ca      	ldr	r2, [r1, #12]
 80085dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085e0:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80085e2:	4618      	mov	r0, r3
 80085e4:	4770      	bx	lr
    return HAL_BUSY;
 80085e6:	2002      	movs	r0, #2
 80085e8:	4770      	bx	lr
      return HAL_ERROR;
 80085ea:	2001      	movs	r0, #1
 80085ec:	4770      	bx	lr
 80085ee:	2001      	movs	r0, #1
 80085f0:	4770      	bx	lr
    __HAL_LOCK(huart);
 80085f2:	2002      	movs	r0, #2
}
 80085f4:	4770      	bx	lr
	...

080085f8 <HAL_UART_Receive_DMA>:
{
 80085f8:	b530      	push	{r4, r5, lr}
 80085fa:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 80085fc:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8008600:	b2e4      	uxtb	r4, r4
 8008602:	2c20      	cmp	r4, #32
 8008604:	d13d      	bne.n	8008682 <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 8008606:	2900      	cmp	r1, #0
 8008608:	d03e      	beq.n	8008688 <HAL_UART_Receive_DMA+0x90>
 800860a:	2a00      	cmp	r2, #0
 800860c:	d03e      	beq.n	800868c <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 800860e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8008612:	2b01      	cmp	r3, #1
 8008614:	d03c      	beq.n	8008690 <HAL_UART_Receive_DMA+0x98>
 8008616:	4613      	mov	r3, r2
 8008618:	460a      	mov	r2, r1
 800861a:	4604      	mov	r4, r0
 800861c:	2101      	movs	r1, #1
 800861e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8008622:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8008624:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008626:	2500      	movs	r5, #0
 8008628:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800862a:	2122      	movs	r1, #34	; 0x22
 800862c:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008630:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008632:	4818      	ldr	r0, [pc, #96]	; (8008694 <HAL_UART_Receive_DMA+0x9c>)
 8008634:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008636:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008638:	4817      	ldr	r0, [pc, #92]	; (8008698 <HAL_UART_Receive_DMA+0xa0>)
 800863a:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800863c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800863e:	4817      	ldr	r0, [pc, #92]	; (800869c <HAL_UART_Receive_DMA+0xa4>)
 8008640:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8008642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008644:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008646:	6821      	ldr	r1, [r4, #0]
 8008648:	3104      	adds	r1, #4
 800864a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800864c:	f7fd f95e 	bl	800590c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008650:	9501      	str	r5, [sp, #4]
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	9201      	str	r2, [sp, #4]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	9201      	str	r2, [sp, #4]
 800865c:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 800865e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008662:	68da      	ldr	r2, [r3, #12]
 8008664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008668:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800866a:	6822      	ldr	r2, [r4, #0]
 800866c:	6953      	ldr	r3, [r2, #20]
 800866e:	f043 0301 	orr.w	r3, r3, #1
 8008672:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008674:	6822      	ldr	r2, [r4, #0]
 8008676:	6953      	ldr	r3, [r2, #20]
 8008678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800867c:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 800867e:	4628      	mov	r0, r5
 8008680:	e000      	b.n	8008684 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 8008682:	2002      	movs	r0, #2
}
 8008684:	b003      	add	sp, #12
 8008686:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8008688:	2001      	movs	r0, #1
 800868a:	e7fb      	b.n	8008684 <HAL_UART_Receive_DMA+0x8c>
 800868c:	2001      	movs	r0, #1
 800868e:	e7f9      	b.n	8008684 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 8008690:	2002      	movs	r0, #2
 8008692:	e7f7      	b.n	8008684 <HAL_UART_Receive_DMA+0x8c>
 8008694:	08008709 	.word	0x08008709
 8008698:	080087e5 	.word	0x080087e5
 800869c:	080087f1 	.word	0x080087f1

080086a0 <HAL_UART_AbortTransmit>:
{
 80086a0:	b510      	push	{r4, lr}
 80086a2:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80086a4:	6802      	ldr	r2, [r0, #0]
 80086a6:	68d3      	ldr	r3, [r2, #12]
 80086a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80086ac:	60d3      	str	r3, [r2, #12]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80086ae:	6803      	ldr	r3, [r0, #0]
 80086b0:	695a      	ldr	r2, [r3, #20]
 80086b2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80086b6:	d00b      	beq.n	80086d0 <HAL_UART_AbortTransmit+0x30>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086b8:	695a      	ldr	r2, [r3, #20]
 80086ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086be:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 80086c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80086c2:	b12b      	cbz	r3, 80086d0 <HAL_UART_AbortTransmit+0x30>
      huart->hdmatx->XferAbortCallback = NULL;
 80086c4:	2200      	movs	r2, #0
 80086c6:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80086c8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80086ca:	f7fd f954 	bl	8005976 <HAL_DMA_Abort>
 80086ce:	b928      	cbnz	r0, 80086dc <HAL_UART_AbortTransmit+0x3c>
  huart->TxXferCount = 0x00U;
 80086d0:	2000      	movs	r0, #0
 80086d2:	84e0      	strh	r0, [r4, #38]	; 0x26
  huart->gState = HAL_UART_STATE_READY;
 80086d4:	2320      	movs	r3, #32
 80086d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80086da:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80086dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80086de:	f7fd fa95 	bl	8005c0c <HAL_DMA_GetError>
 80086e2:	2820      	cmp	r0, #32
 80086e4:	d1f4      	bne.n	80086d0 <HAL_UART_AbortTransmit+0x30>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086e6:	2310      	movs	r3, #16
 80086e8:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80086ea:	2003      	movs	r0, #3
 80086ec:	e7f5      	b.n	80086da <HAL_UART_AbortTransmit+0x3a>

080086ee <UART_EndTransmit_IT>:
{
 80086ee:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086f0:	6801      	ldr	r1, [r0, #0]
 80086f2:	68cb      	ldr	r3, [r1, #12]
 80086f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086f8:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80086fa:	2320      	movs	r3, #32
 80086fc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8008700:	f7fb fb36 	bl	8003d70 <HAL_UART_TxCpltCallback>
}
 8008704:	2000      	movs	r0, #0
 8008706:	bd08      	pop	{r3, pc}

08008708 <UART_DMAReceiveCplt>:
{
 8008708:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800870a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800870c:	6802      	ldr	r2, [r0, #0]
 800870e:	6812      	ldr	r2, [r2, #0]
 8008710:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008714:	d113      	bne.n	800873e <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 8008716:	2200      	movs	r2, #0
 8008718:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800871a:	6819      	ldr	r1, [r3, #0]
 800871c:	68ca      	ldr	r2, [r1, #12]
 800871e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008722:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008724:	6819      	ldr	r1, [r3, #0]
 8008726:	694a      	ldr	r2, [r1, #20]
 8008728:	f022 0201 	bic.w	r2, r2, #1
 800872c:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800872e:	6819      	ldr	r1, [r3, #0]
 8008730:	694a      	ldr	r2, [r1, #20]
 8008732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008736:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8008738:	2220      	movs	r2, #32
 800873a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 800873e:	4618      	mov	r0, r3
 8008740:	f7fb fb15 	bl	8003d6e <HAL_UART_RxCpltCallback>
}
 8008744:	bd08      	pop	{r3, pc}

08008746 <UART_Receive_IT>:
{
 8008746:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008748:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b22      	cmp	r3, #34	; 0x22
 8008750:	d145      	bne.n	80087de <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008752:	6883      	ldr	r3, [r0, #8]
 8008754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008758:	d00e      	beq.n	8008778 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800875a:	6903      	ldr	r3, [r0, #16]
 800875c:	bb03      	cbnz	r3, 80087a0 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800875e:	6803      	ldr	r3, [r0, #0]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008764:	1c59      	adds	r1, r3, #1
 8008766:	6281      	str	r1, [r0, #40]	; 0x28
 8008768:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800876a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800876c:	3b01      	subs	r3, #1
 800876e:	b29b      	uxth	r3, r3
 8008770:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8008772:	b1f3      	cbz	r3, 80087b2 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8008774:	2000      	movs	r0, #0
 8008776:	e033      	b.n	80087e0 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008778:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800877a:	6903      	ldr	r3, [r0, #16]
 800877c:	b943      	cbnz	r3, 8008790 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800877e:	6803      	ldr	r3, [r0, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008786:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8008788:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800878a:	3302      	adds	r3, #2
 800878c:	6283      	str	r3, [r0, #40]	; 0x28
 800878e:	e7ec      	b.n	800876a <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008790:	6803      	ldr	r3, [r0, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	b2db      	uxtb	r3, r3
 8008796:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8008798:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800879a:	3301      	adds	r3, #1
 800879c:	6283      	str	r3, [r0, #40]	; 0x28
 800879e:	e7e4      	b.n	800876a <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087a0:	6803      	ldr	r3, [r0, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80087a6:	1c51      	adds	r1, r2, #1
 80087a8:	6281      	str	r1, [r0, #40]	; 0x28
 80087aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ae:	7013      	strb	r3, [r2, #0]
 80087b0:	e7db      	b.n	800876a <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087b2:	6802      	ldr	r2, [r0, #0]
 80087b4:	68d3      	ldr	r3, [r2, #12]
 80087b6:	f023 0320 	bic.w	r3, r3, #32
 80087ba:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087bc:	6802      	ldr	r2, [r0, #0]
 80087be:	68d3      	ldr	r3, [r2, #12]
 80087c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087c4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087c6:	6802      	ldr	r2, [r0, #0]
 80087c8:	6953      	ldr	r3, [r2, #20]
 80087ca:	f023 0301 	bic.w	r3, r3, #1
 80087ce:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80087d0:	2320      	movs	r3, #32
 80087d2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80087d6:	f7fb faca 	bl	8003d6e <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80087da:	2000      	movs	r0, #0
 80087dc:	e000      	b.n	80087e0 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 80087de:	2002      	movs	r0, #2
}
 80087e0:	bd08      	pop	{r3, pc}

080087e2 <HAL_UART_RxHalfCpltCallback>:
}
 80087e2:	4770      	bx	lr

080087e4 <UART_DMARxHalfCplt>:
{
 80087e4:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 80087e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80087e8:	f7ff fffb 	bl	80087e2 <HAL_UART_RxHalfCpltCallback>
}
 80087ec:	bd08      	pop	{r3, pc}

080087ee <HAL_UART_ErrorCallback>:
}
 80087ee:	4770      	bx	lr

080087f0 <UART_DMAError>:
{
 80087f0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087f2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80087f8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b21      	cmp	r3, #33	; 0x21
 8008800:	d010      	beq.n	8008824 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	695a      	ldr	r2, [r3, #20]
 8008806:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800880a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b22      	cmp	r3, #34	; 0x22
 8008812:	d011      	beq.n	8008838 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008814:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008816:	f043 0310 	orr.w	r3, r3, #16
 800881a:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800881c:	4620      	mov	r0, r4
 800881e:	f7ff ffe6 	bl	80087ee <HAL_UART_ErrorCallback>
}
 8008822:	bd10      	pop	{r4, pc}
 8008824:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008828:	2a00      	cmp	r2, #0
 800882a:	d0ea      	beq.n	8008802 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 800882c:	2300      	movs	r3, #0
 800882e:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008830:	4620      	mov	r0, r4
 8008832:	f7ff fc94 	bl	800815e <UART_EndTxTransfer>
 8008836:	e7e4      	b.n	8008802 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008838:	2a00      	cmp	r2, #0
 800883a:	d0eb      	beq.n	8008814 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 800883c:	2300      	movs	r3, #0
 800883e:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008840:	4620      	mov	r0, r4
 8008842:	f7ff fc95 	bl	8008170 <UART_EndRxTransfer>
 8008846:	e7e5      	b.n	8008814 <UART_DMAError+0x24>

08008848 <HAL_UART_IRQHandler>:
{
 8008848:	b510      	push	{r4, lr}
 800884a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800884c:	6802      	ldr	r2, [r0, #0]
 800884e:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008850:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008852:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8008854:	f013 000f 	ands.w	r0, r3, #15
 8008858:	d105      	bne.n	8008866 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800885a:	f013 0f20 	tst.w	r3, #32
 800885e:	d002      	beq.n	8008866 <HAL_UART_IRQHandler+0x1e>
 8008860:	f011 0f20 	tst.w	r1, #32
 8008864:	d156      	bne.n	8008914 <HAL_UART_IRQHandler+0xcc>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008866:	2800      	cmp	r0, #0
 8008868:	d06a      	beq.n	8008940 <HAL_UART_IRQHandler+0xf8>
 800886a:	f012 0201 	ands.w	r2, r2, #1
 800886e:	d102      	bne.n	8008876 <HAL_UART_IRQHandler+0x2e>
 8008870:	f411 7f90 	tst.w	r1, #288	; 0x120
 8008874:	d064      	beq.n	8008940 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008876:	f013 0f01 	tst.w	r3, #1
 800887a:	d006      	beq.n	800888a <HAL_UART_IRQHandler+0x42>
 800887c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8008880:	d003      	beq.n	800888a <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008882:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008884:	f040 0001 	orr.w	r0, r0, #1
 8008888:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800888a:	f013 0f04 	tst.w	r3, #4
 800888e:	d004      	beq.n	800889a <HAL_UART_IRQHandler+0x52>
 8008890:	b11a      	cbz	r2, 800889a <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008892:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008894:	f040 0002 	orr.w	r0, r0, #2
 8008898:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800889a:	f013 0f02 	tst.w	r3, #2
 800889e:	d004      	beq.n	80088aa <HAL_UART_IRQHandler+0x62>
 80088a0:	b11a      	cbz	r2, 80088aa <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80088a4:	f040 0004 	orr.w	r0, r0, #4
 80088a8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80088aa:	f013 0f08 	tst.w	r3, #8
 80088ae:	d007      	beq.n	80088c0 <HAL_UART_IRQHandler+0x78>
 80088b0:	f011 0f20 	tst.w	r1, #32
 80088b4:	d100      	bne.n	80088b8 <HAL_UART_IRQHandler+0x70>
 80088b6:	b11a      	cbz	r2, 80088c0 <HAL_UART_IRQHandler+0x78>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80088ba:	f042 0208 	orr.w	r2, r2, #8
 80088be:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80088c2:	2a00      	cmp	r2, #0
 80088c4:	d048      	beq.n	8008958 <HAL_UART_IRQHandler+0x110>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088c6:	f013 0f20 	tst.w	r3, #32
 80088ca:	d002      	beq.n	80088d2 <HAL_UART_IRQHandler+0x8a>
 80088cc:	f011 0f20 	tst.w	r1, #32
 80088d0:	d124      	bne.n	800891c <HAL_UART_IRQHandler+0xd4>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80088dc:	f012 0f08 	tst.w	r2, #8
 80088e0:	d100      	bne.n	80088e4 <HAL_UART_IRQHandler+0x9c>
 80088e2:	b33b      	cbz	r3, 8008934 <HAL_UART_IRQHandler+0xec>
        UART_EndRxTransfer(huart);
 80088e4:	4620      	mov	r0, r4
 80088e6:	f7ff fc43 	bl	8008170 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	695a      	ldr	r2, [r3, #20]
 80088ee:	f012 0f40 	tst.w	r2, #64	; 0x40
 80088f2:	d01b      	beq.n	800892c <HAL_UART_IRQHandler+0xe4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088f4:	695a      	ldr	r2, [r3, #20]
 80088f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088fa:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80088fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088fe:	b18b      	cbz	r3, 8008924 <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008900:	4a1a      	ldr	r2, [pc, #104]	; (800896c <HAL_UART_IRQHandler+0x124>)
 8008902:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008904:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008906:	f7fd f880 	bl	8005a0a <HAL_DMA_Abort_IT>
 800890a:	b328      	cbz	r0, 8008958 <HAL_UART_IRQHandler+0x110>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800890c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800890e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008910:	4798      	blx	r3
 8008912:	e021      	b.n	8008958 <HAL_UART_IRQHandler+0x110>
      UART_Receive_IT(huart);
 8008914:	4620      	mov	r0, r4
 8008916:	f7ff ff16 	bl	8008746 <UART_Receive_IT>
      return;
 800891a:	e01d      	b.n	8008958 <HAL_UART_IRQHandler+0x110>
        UART_Receive_IT(huart);
 800891c:	4620      	mov	r0, r4
 800891e:	f7ff ff12 	bl	8008746 <UART_Receive_IT>
 8008922:	e7d6      	b.n	80088d2 <HAL_UART_IRQHandler+0x8a>
            HAL_UART_ErrorCallback(huart);
 8008924:	4620      	mov	r0, r4
 8008926:	f7ff ff62 	bl	80087ee <HAL_UART_ErrorCallback>
 800892a:	e015      	b.n	8008958 <HAL_UART_IRQHandler+0x110>
          HAL_UART_ErrorCallback(huart);
 800892c:	4620      	mov	r0, r4
 800892e:	f7ff ff5e 	bl	80087ee <HAL_UART_ErrorCallback>
 8008932:	e011      	b.n	8008958 <HAL_UART_IRQHandler+0x110>
        HAL_UART_ErrorCallback(huart);
 8008934:	4620      	mov	r0, r4
 8008936:	f7ff ff5a 	bl	80087ee <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800893a:	2300      	movs	r3, #0
 800893c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800893e:	e00b      	b.n	8008958 <HAL_UART_IRQHandler+0x110>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008940:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008944:	d002      	beq.n	800894c <HAL_UART_IRQHandler+0x104>
 8008946:	f011 0f80 	tst.w	r1, #128	; 0x80
 800894a:	d106      	bne.n	800895a <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800894c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008950:	d002      	beq.n	8008958 <HAL_UART_IRQHandler+0x110>
 8008952:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008956:	d104      	bne.n	8008962 <HAL_UART_IRQHandler+0x11a>
}
 8008958:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 800895a:	4620      	mov	r0, r4
 800895c:	f7ff fc16 	bl	800818c <UART_Transmit_IT>
    return;
 8008960:	e7fa      	b.n	8008958 <HAL_UART_IRQHandler+0x110>
    UART_EndTransmit_IT(huart);
 8008962:	4620      	mov	r0, r4
 8008964:	f7ff fec3 	bl	80086ee <UART_EndTransmit_IT>
    return;
 8008968:	e7f6      	b.n	8008958 <HAL_UART_IRQHandler+0x110>
 800896a:	bf00      	nop
 800896c:	08008971 	.word	0x08008971

08008970 <UART_DMAAbortOnError>:
{
 8008970:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008972:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8008974:	2300      	movs	r3, #0
 8008976:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008978:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800897a:	f7ff ff38 	bl	80087ee <HAL_UART_ErrorCallback>
}
 800897e:	bd08      	pop	{r3, pc}

08008980 <HAL_UART_AbortReceiveCpltCallback>:
}
 8008980:	4770      	bx	lr
	...

08008984 <HAL_UART_AbortReceive_IT>:
{
 8008984:	b510      	push	{r4, lr}
 8008986:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008988:	6802      	ldr	r2, [r0, #0]
 800898a:	68d3      	ldr	r3, [r2, #12]
 800898c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008990:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008992:	6802      	ldr	r2, [r0, #0]
 8008994:	6953      	ldr	r3, [r2, #20]
 8008996:	f023 0301 	bic.w	r3, r3, #1
 800899a:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800899c:	6803      	ldr	r3, [r0, #0]
 800899e:	695a      	ldr	r2, [r3, #20]
 80089a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80089a4:	d018      	beq.n	80089d8 <HAL_UART_AbortReceive_IT+0x54>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089a6:	695a      	ldr	r2, [r3, #20]
 80089a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089ac:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 80089ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80089b0:	b153      	cbz	r3, 80089c8 <HAL_UART_AbortReceive_IT+0x44>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80089b2:	4a0d      	ldr	r2, [pc, #52]	; (80089e8 <HAL_UART_AbortReceive_IT+0x64>)
 80089b4:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089b6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80089b8:	f7fd f827 	bl	8005a0a <HAL_DMA_Abort_IT>
 80089bc:	b110      	cbz	r0, 80089c4 <HAL_UART_AbortReceive_IT+0x40>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089be:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80089c0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80089c2:	4798      	blx	r3
}
 80089c4:	2000      	movs	r0, #0
 80089c6:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0x00U;
 80089c8:	2300      	movs	r3, #0
 80089ca:	85c3      	strh	r3, [r0, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 80089cc:	2320      	movs	r3, #32
 80089ce:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_AbortReceiveCpltCallback(huart);
 80089d2:	f7ff ffd5 	bl	8008980 <HAL_UART_AbortReceiveCpltCallback>
 80089d6:	e7f5      	b.n	80089c4 <HAL_UART_AbortReceive_IT+0x40>
    huart->RxXferCount = 0x00U;
 80089d8:	2300      	movs	r3, #0
 80089da:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 80089dc:	2320      	movs	r3, #32
 80089de:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 80089e2:	f7ff ffcd 	bl	8008980 <HAL_UART_AbortReceiveCpltCallback>
 80089e6:	e7ed      	b.n	80089c4 <HAL_UART_AbortReceive_IT+0x40>
 80089e8:	080089ed 	.word	0x080089ed

080089ec <UART_DMARxOnlyAbortCallback>:
{
 80089ec:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 80089f4:	2320      	movs	r3, #32
 80089f6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 80089fa:	f7ff ffc1 	bl	8008980 <HAL_UART_AbortReceiveCpltCallback>
}
 80089fe:	bd08      	pop	{r3, pc}

08008a00 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8008a00:	2884      	cmp	r0, #132	; 0x84
 8008a02:	d001      	beq.n	8008a08 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8008a04:	3003      	adds	r0, #3
 8008a06:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008a08:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8008a0a:	4770      	bx	lr

08008a0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008a0c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8008a0e:	f000 ff87 	bl	8009920 <vTaskStartScheduler>
  
  return osOK;
}
 8008a12:	2000      	movs	r0, #0
 8008a14:	bd08      	pop	{r3, pc}

08008a16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008a16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008a20:	6945      	ldr	r5, [r0, #20]
 8008a22:	b1a5      	cbz	r5, 8008a4e <osThreadCreate+0x38>
 8008a24:	6986      	ldr	r6, [r0, #24]
 8008a26:	b196      	cbz	r6, 8008a4e <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a28:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8008a2c:	f8d0 9000 	ldr.w	r9, [r0]
 8008a30:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8008a34:	f7ff ffe4 	bl	8008a00 <makeFreeRtosPriority>
 8008a38:	6922      	ldr	r2, [r4, #16]
 8008a3a:	9602      	str	r6, [sp, #8]
 8008a3c:	9501      	str	r5, [sp, #4]
 8008a3e:	9000      	str	r0, [sp, #0]
 8008a40:	463b      	mov	r3, r7
 8008a42:	4649      	mov	r1, r9
 8008a44:	4640      	mov	r0, r8
 8008a46:	f000 feb6 	bl	80097b6 <xTaskCreateStatic>
 8008a4a:	9005      	str	r0, [sp, #20]
 8008a4c:	e013      	b.n	8008a76 <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a4e:	6865      	ldr	r5, [r4, #4]
 8008a50:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a52:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a56:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8008a5a:	f7ff ffd1 	bl	8008a00 <makeFreeRtosPriority>
 8008a5e:	ab05      	add	r3, sp, #20
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	9000      	str	r0, [sp, #0]
 8008a64:	463b      	mov	r3, r7
 8008a66:	fa1f f288 	uxth.w	r2, r8
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	f000 fedc 	bl	800982a <xTaskCreate>
 8008a72:	2801      	cmp	r0, #1
 8008a74:	d103      	bne.n	8008a7e <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008a76:	9805      	ldr	r0, [sp, #20]
}
 8008a78:	b007      	add	sp, #28
 8008a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 8008a7e:	2000      	movs	r0, #0
 8008a80:	e7fa      	b.n	8008a78 <osThreadCreate+0x62>

08008a82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008a82:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008a84:	4603      	mov	r3, r0
 8008a86:	b900      	cbnz	r0, 8008a8a <osDelay+0x8>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f001 f8fc 	bl	8009c88 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008a90:	2000      	movs	r0, #0
 8008a92:	bd08      	pop	{r3, pc}

08008a94 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8008a94:	b510      	push	{r4, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8008a9a:	6844      	ldr	r4, [r0, #4]
 8008a9c:	b16c      	cbz	r4, 8008aba <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 8008a9e:	2901      	cmp	r1, #1
 8008aa0:	d009      	beq.n	8008ab6 <osTimerCreate+0x22>
 8008aa2:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8008aa4:	6801      	ldr	r1, [r0, #0]
    return xTimerCreateStatic((const char *)"",
 8008aa6:	9401      	str	r4, [sp, #4]
 8008aa8:	9100      	str	r1, [sp, #0]
 8008aaa:	2101      	movs	r1, #1
 8008aac:	4809      	ldr	r0, [pc, #36]	; (8008ad4 <osTimerCreate+0x40>)
 8008aae:	f001 ff65 	bl	800a97c <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8008ab2:	b002      	add	sp, #8
 8008ab4:	bd10      	pop	{r4, pc}
    return xTimerCreateStatic((const char *)"",
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	e7f4      	b.n	8008aa4 <osTimerCreate+0x10>
    return xTimerCreate((const char *)"",
 8008aba:	2901      	cmp	r1, #1
 8008abc:	d007      	beq.n	8008ace <osTimerCreate+0x3a>
 8008abe:	2200      	movs	r2, #0
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8008ac0:	6801      	ldr	r1, [r0, #0]
    return xTimerCreate((const char *)"",
 8008ac2:	9100      	str	r1, [sp, #0]
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	4803      	ldr	r0, [pc, #12]	; (8008ad4 <osTimerCreate+0x40>)
 8008ac8:	f001 ff3c 	bl	800a944 <xTimerCreate>
 8008acc:	e7f1      	b.n	8008ab2 <osTimerCreate+0x1e>
 8008ace:	2201      	movs	r2, #1
 8008ad0:	e7f6      	b.n	8008ac0 <osTimerCreate+0x2c>
 8008ad2:	bf00      	nop
 8008ad4:	0800c700 	.word	0x0800c700

08008ad8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008ad8:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008ada:	6841      	ldr	r1, [r0, #4]
 8008adc:	b119      	cbz	r1, 8008ae6 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008ade:	2001      	movs	r0, #1
 8008ae0:	f000 fa8f 	bl	8009002 <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008ae4:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	f000 fa80 	bl	8008fec <xQueueCreateMutex>
 8008aec:	e7fa      	b.n	8008ae4 <osMutexCreate+0xc>

08008aee <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008aee:	f100 0308 	add.w	r3, r0, #8
 8008af2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008af8:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008afa:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008afc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b02:	4770      	bx	lr

08008b04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b04:	2300      	movs	r3, #0
 8008b06:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b08:	4770      	bx	lr

08008b0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b0a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b0c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b0e:	689a      	ldr	r2, [r3, #8]
 8008b10:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b16:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b18:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008b1a:	6803      	ldr	r3, [r0, #0]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	6003      	str	r3, [r0, #0]
}
 8008b20:	4770      	bx	lr

08008b22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b22:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b24:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b26:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008b2a:	d002      	beq.n	8008b32 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b2c:	f100 0208 	add.w	r2, r0, #8
 8008b30:	e002      	b.n	8008b38 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b32:	6902      	ldr	r2, [r0, #16]
 8008b34:	e004      	b.n	8008b40 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b36:	461a      	mov	r2, r3
 8008b38:	6853      	ldr	r3, [r2, #4]
 8008b3a:	681c      	ldr	r4, [r3, #0]
 8008b3c:	42ac      	cmp	r4, r5
 8008b3e:	d9fa      	bls.n	8008b36 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b40:	6853      	ldr	r3, [r2, #4]
 8008b42:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b44:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b46:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b48:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b4a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008b4c:	6803      	ldr	r3, [r0, #0]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	6003      	str	r3, [r0, #0]
}
 8008b52:	bc30      	pop	{r4, r5}
 8008b54:	4770      	bx	lr

08008b56 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b56:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b58:	6842      	ldr	r2, [r0, #4]
 8008b5a:	6881      	ldr	r1, [r0, #8]
 8008b5c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b5e:	6882      	ldr	r2, [r0, #8]
 8008b60:	6841      	ldr	r1, [r0, #4]
 8008b62:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	4282      	cmp	r2, r0
 8008b68:	d006      	beq.n	8008b78 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	3a01      	subs	r2, #1
 8008b72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b74:	6818      	ldr	r0, [r3, #0]
}
 8008b76:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b78:	6882      	ldr	r2, [r0, #8]
 8008b7a:	605a      	str	r2, [r3, #4]
 8008b7c:	e7f5      	b.n	8008b6a <uxListRemove+0x14>

08008b7e <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008b7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b80:	b123      	cbz	r3, 8008b8c <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008b82:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008b84:	6818      	ldr	r0, [r3, #0]
 8008b86:	f1c0 0007 	rsb	r0, r0, #7
 8008b8a:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008b8c:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8008b8e:	4770      	bx	lr

08008b90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b90:	b510      	push	{r4, lr}
 8008b92:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b94:	f002 f906 	bl	800ada4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b98:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008b9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d004      	beq.n	8008baa <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8008ba0:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8008ba2:	f002 f921 	bl	800ade8 <vPortExitCritical>

	return xReturn;
}
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008baa:	2401      	movs	r4, #1
 8008bac:	e7f9      	b.n	8008ba2 <prvIsQueueFull+0x12>

08008bae <prvIsQueueEmpty>:
{
 8008bae:	b510      	push	{r4, lr}
 8008bb0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008bb2:	f002 f8f7 	bl	800ada4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008bb8:	b123      	cbz	r3, 8008bc4 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8008bba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008bbc:	f002 f914 	bl	800ade8 <vPortExitCritical>
}
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008bc4:	2401      	movs	r4, #1
 8008bc6:	e7f9      	b.n	8008bbc <prvIsQueueEmpty+0xe>

08008bc8 <prvCopyDataToQueue>:
{
 8008bc8:	b570      	push	{r4, r5, r6, lr}
 8008bca:	4604      	mov	r4, r0
 8008bcc:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bce:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008bd0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008bd2:	b95a      	cbnz	r2, 8008bec <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bd4:	6803      	ldr	r3, [r0, #0]
 8008bd6:	b11b      	cbz	r3, 8008be0 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8008bd8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008bda:	3501      	adds	r5, #1
 8008bdc:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8008bde:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008be0:	6880      	ldr	r0, [r0, #8]
 8008be2:	f001 fb4f 	bl	800a284 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	60a3      	str	r3, [r4, #8]
 8008bea:	e7f6      	b.n	8008bda <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008bec:	b96e      	cbnz	r6, 8008c0a <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bee:	6840      	ldr	r0, [r0, #4]
 8008bf0:	f003 f846 	bl	800bc80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bf4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008bf6:	6863      	ldr	r3, [r4, #4]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bfc:	68a2      	ldr	r2, [r4, #8]
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d319      	bcc.n	8008c36 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8008c06:	2000      	movs	r0, #0
 8008c08:	e7e7      	b.n	8008bda <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c0a:	68c0      	ldr	r0, [r0, #12]
 8008c0c:	f003 f838 	bl	800bc80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008c12:	4252      	negs	r2, r2
 8008c14:	68e3      	ldr	r3, [r4, #12]
 8008c16:	4413      	add	r3, r2
 8008c18:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c1a:	6821      	ldr	r1, [r4, #0]
 8008c1c:	428b      	cmp	r3, r1
 8008c1e:	d202      	bcs.n	8008c26 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c20:	68a3      	ldr	r3, [r4, #8]
 8008c22:	441a      	add	r2, r3
 8008c24:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008c26:	2e02      	cmp	r6, #2
 8008c28:	d001      	beq.n	8008c2e <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	e7d5      	b.n	8008bda <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c2e:	b125      	cbz	r5, 8008c3a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8008c30:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8008c32:	2000      	movs	r0, #0
 8008c34:	e7d1      	b.n	8008bda <prvCopyDataToQueue+0x12>
 8008c36:	2000      	movs	r0, #0
 8008c38:	e7cf      	b.n	8008bda <prvCopyDataToQueue+0x12>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	e7cd      	b.n	8008bda <prvCopyDataToQueue+0x12>

08008c3e <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c3e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008c40:	b172      	cbz	r2, 8008c60 <prvCopyDataFromQueue+0x22>
{
 8008c42:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c44:	68c3      	ldr	r3, [r0, #12]
 8008c46:	4413      	add	r3, r2
 8008c48:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c4a:	6884      	ldr	r4, [r0, #8]
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	d301      	bcc.n	8008c54 <prvCopyDataFromQueue+0x16>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c50:	6803      	ldr	r3, [r0, #0]
 8008c52:	60c3      	str	r3, [r0, #12]
 8008c54:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c56:	68c1      	ldr	r1, [r0, #12]
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f003 f811 	bl	800bc80 <memcpy>
}
 8008c5e:	bd10      	pop	{r4, pc}
 8008c60:	4770      	bx	lr

08008c62 <prvUnlockQueue>:
{
 8008c62:	b538      	push	{r3, r4, r5, lr}
 8008c64:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8008c66:	f002 f89d 	bl	800ada4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008c6a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8008c6e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c70:	e003      	b.n	8008c7a <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8008c72:	f001 f9c9 	bl	800a008 <vTaskMissedYield>
			--cTxLock;
 8008c76:	3c01      	subs	r4, #1
 8008c78:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c7a:	2c00      	cmp	r4, #0
 8008c7c:	dd08      	ble.n	8008c90 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c80:	b133      	cbz	r3, 8008c90 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c82:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008c86:	f001 f92d 	bl	8009ee4 <xTaskRemoveFromEventList>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d0f3      	beq.n	8008c76 <prvUnlockQueue+0x14>
 8008c8e:	e7f0      	b.n	8008c72 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8008c90:	23ff      	movs	r3, #255	; 0xff
 8008c92:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008c96:	f002 f8a7 	bl	800ade8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008c9a:	f002 f883 	bl	800ada4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008c9e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8008ca2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ca4:	e003      	b.n	8008cae <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8008ca6:	f001 f9af 	bl	800a008 <vTaskMissedYield>
				--cRxLock;
 8008caa:	3c01      	subs	r4, #1
 8008cac:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cae:	2c00      	cmp	r4, #0
 8008cb0:	dd08      	ble.n	8008cc4 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cb2:	692b      	ldr	r3, [r5, #16]
 8008cb4:	b133      	cbz	r3, 8008cc4 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cb6:	f105 0010 	add.w	r0, r5, #16
 8008cba:	f001 f913 	bl	8009ee4 <xTaskRemoveFromEventList>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d0f3      	beq.n	8008caa <prvUnlockQueue+0x48>
 8008cc2:	e7f0      	b.n	8008ca6 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8008cc4:	23ff      	movs	r3, #255	; 0xff
 8008cc6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008cca:	f002 f88d 	bl	800ade8 <vPortExitCritical>
}
 8008cce:	bd38      	pop	{r3, r4, r5, pc}

08008cd0 <xQueueGenericReset>:
{
 8008cd0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8008cd2:	b940      	cbnz	r0, 8008ce6 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	e7fe      	b.n	8008ce4 <xQueueGenericReset+0x14>
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8008cea:	f002 f85b 	bl	800ada4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cee:	6821      	ldr	r1, [r4, #0]
 8008cf0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cf4:	fb03 1002 	mla	r0, r3, r2, r1
 8008cf8:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cfe:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d00:	3a01      	subs	r2, #1
 8008d02:	fb02 1303 	mla	r3, r2, r3, r1
 8008d06:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d08:	23ff      	movs	r3, #255	; 0xff
 8008d0a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008d12:	b9a5      	cbnz	r5, 8008d3e <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d14:	6923      	ldr	r3, [r4, #16]
 8008d16:	b91b      	cbnz	r3, 8008d20 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8008d18:	f002 f866 	bl	800ade8 <vPortExitCritical>
}
 8008d1c:	2001      	movs	r0, #1
 8008d1e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d20:	f104 0010 	add.w	r0, r4, #16
 8008d24:	f001 f8de 	bl	8009ee4 <xTaskRemoveFromEventList>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d0f5      	beq.n	8008d18 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8008d2c:	4b08      	ldr	r3, [pc, #32]	; (8008d50 <xQueueGenericReset+0x80>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	e7ec      	b.n	8008d18 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d3e:	f104 0010 	add.w	r0, r4, #16
 8008d42:	f7ff fed4 	bl	8008aee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d46:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d4a:	f7ff fed0 	bl	8008aee <vListInitialise>
 8008d4e:	e7e3      	b.n	8008d18 <xQueueGenericReset+0x48>
 8008d50:	e000ed04 	.word	0xe000ed04

08008d54 <prvInitialiseNewQueue>:
{
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	461d      	mov	r5, r3
 8008d58:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	b149      	cbz	r1, 8008d72 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d5e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8008d60:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d62:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d64:	2101      	movs	r1, #1
 8008d66:	4620      	mov	r0, r4
 8008d68:	f7ff ffb2 	bl	8008cd0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008d6c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8008d70:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d72:	6024      	str	r4, [r4, #0]
 8008d74:	e7f4      	b.n	8008d60 <prvInitialiseNewQueue+0xc>

08008d76 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d76:	b940      	cbnz	r0, 8008d8a <xQueueGenericCreateStatic+0x14>
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	e7fe      	b.n	8008d88 <xQueueGenericCreateStatic+0x12>
	{
 8008d8a:	b510      	push	{r4, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8008d90:	b153      	cbz	r3, 8008da8 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d92:	b192      	cbz	r2, 8008dba <xQueueGenericCreateStatic+0x44>
 8008d94:	b989      	cbnz	r1, 8008dba <xQueueGenericCreateStatic+0x44>
 8008d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	e7fe      	b.n	8008da6 <xQueueGenericCreateStatic+0x30>
 8008da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	e7fe      	b.n	8008db8 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dba:	b94a      	cbnz	r2, 8008dd0 <xQueueGenericCreateStatic+0x5a>
 8008dbc:	b141      	cbz	r1, 8008dd0 <xQueueGenericCreateStatic+0x5a>
 8008dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	e7fe      	b.n	8008dce <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008dd0:	2050      	movs	r0, #80	; 0x50
 8008dd2:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008dd4:	9803      	ldr	r0, [sp, #12]
 8008dd6:	2850      	cmp	r0, #80	; 0x50
 8008dd8:	d008      	beq.n	8008dec <xQueueGenericCreateStatic+0x76>
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	e7fe      	b.n	8008dea <xQueueGenericCreateStatic+0x74>
 8008dec:	4620      	mov	r0, r4
 8008dee:	461c      	mov	r4, r3
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008df0:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008df2:	2301      	movs	r3, #1
 8008df4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008df8:	9400      	str	r4, [sp, #0]
 8008dfa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008dfe:	f7ff ffa9 	bl	8008d54 <prvInitialiseNewQueue>
	}
 8008e02:	4620      	mov	r0, r4
 8008e04:	b004      	add	sp, #16
 8008e06:	bd10      	pop	{r4, pc}

08008e08 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e08:	b940      	cbnz	r0, 8008e1c <xQueueGenericCreate+0x14>
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	f383 8811 	msr	BASEPRI, r3
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	e7fe      	b.n	8008e1a <xQueueGenericCreate+0x12>
	{
 8008e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8008e22:	b111      	cbz	r1, 8008e2a <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e24:	fb01 f000 	mul.w	r0, r1, r0
 8008e28:	e000      	b.n	8008e2c <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	4617      	mov	r7, r2
 8008e2e:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e30:	3050      	adds	r0, #80	; 0x50
 8008e32:	f002 f96d 	bl	800b110 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008e36:	4605      	mov	r5, r0
 8008e38:	b150      	cbz	r0, 8008e50 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e40:	9000      	str	r0, [sp, #0]
 8008e42:	463b      	mov	r3, r7
 8008e44:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8008e48:	4621      	mov	r1, r4
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	f7ff ff82 	bl	8008d54 <prvInitialiseNewQueue>
	}
 8008e50:	4628      	mov	r0, r5
 8008e52:	b003      	add	sp, #12
 8008e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008e58 <xQueueGenericSend>:
{
 8008e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008e5e:	b160      	cbz	r0, 8008e7a <xQueueGenericSend+0x22>
 8008e60:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e62:	b999      	cbnz	r1, 8008e8c <xQueueGenericSend+0x34>
 8008e64:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008e66:	b18a      	cbz	r2, 8008e8c <xQueueGenericSend+0x34>
 8008e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6c:	f383 8811 	msr	BASEPRI, r3
 8008e70:	f3bf 8f6f 	isb	sy
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	e7fe      	b.n	8008e78 <xQueueGenericSend+0x20>
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	e7fe      	b.n	8008e8a <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d10b      	bne.n	8008ea8 <xQueueGenericSend+0x50>
 8008e90:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008e92:	2a01      	cmp	r2, #1
 8008e94:	d008      	beq.n	8008ea8 <xQueueGenericSend+0x50>
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	e7fe      	b.n	8008ea6 <xQueueGenericSend+0x4e>
 8008ea8:	461e      	mov	r6, r3
 8008eaa:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008eac:	f001 f97e 	bl	800a1ac <xTaskGetSchedulerState>
 8008eb0:	b950      	cbnz	r0, 8008ec8 <xQueueGenericSend+0x70>
 8008eb2:	9b01      	ldr	r3, [sp, #4]
 8008eb4:	b153      	cbz	r3, 8008ecc <xQueueGenericSend+0x74>
 8008eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	e7fe      	b.n	8008ec6 <xQueueGenericSend+0x6e>
 8008ec8:	2500      	movs	r5, #0
 8008eca:	e03a      	b.n	8008f42 <xQueueGenericSend+0xea>
 8008ecc:	2500      	movs	r5, #0
 8008ece:	e038      	b.n	8008f42 <xQueueGenericSend+0xea>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ed0:	4632      	mov	r2, r6
 8008ed2:	4639      	mov	r1, r7
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f7ff fe77 	bl	8008bc8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008edc:	b94b      	cbnz	r3, 8008ef2 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8008ede:	b1a8      	cbz	r0, 8008f0c <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8008ee0:	4b3b      	ldr	r3, [pc, #236]	; (8008fd0 <xQueueGenericSend+0x178>)
 8008ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	e00c      	b.n	8008f0c <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ef2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008ef6:	f000 fff5 	bl	8009ee4 <xTaskRemoveFromEventList>
 8008efa:	b138      	cbz	r0, 8008f0c <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8008efc:	4b34      	ldr	r3, [pc, #208]	; (8008fd0 <xQueueGenericSend+0x178>)
 8008efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008f0c:	f001 ff6c 	bl	800ade8 <vPortExitCritical>
				return pdPASS;
 8008f10:	2001      	movs	r0, #1
}
 8008f12:	b005      	add	sp, #20
 8008f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8008f16:	f001 ff67 	bl	800ade8 <vPortExitCritical>
					return errQUEUE_FULL;
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	e7f9      	b.n	8008f12 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f1e:	a802      	add	r0, sp, #8
 8008f20:	f001 f826 	bl	8009f70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f24:	2501      	movs	r5, #1
 8008f26:	e019      	b.n	8008f5c <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008f2e:	e021      	b.n	8008f74 <xQueueGenericSend+0x11c>
 8008f30:	2300      	movs	r3, #0
 8008f32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f36:	e023      	b.n	8008f80 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f7ff fe92 	bl	8008c62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f3e:	f000 fdd7 	bl	8009af0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008f42:	f001 ff2f 	bl	800ada4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008f48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d3c0      	bcc.n	8008ed0 <xQueueGenericSend+0x78>
 8008f4e:	2e02      	cmp	r6, #2
 8008f50:	d0be      	beq.n	8008ed0 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f52:	9b01      	ldr	r3, [sp, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d0de      	beq.n	8008f16 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8008f58:	2d00      	cmp	r5, #0
 8008f5a:	d0e0      	beq.n	8008f1e <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8008f5c:	f001 ff44 	bl	800ade8 <vPortExitCritical>
		vTaskSuspendAll();
 8008f60:	f000 fd2c 	bl	80099bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f64:	f001 ff1e 	bl	800ada4 <vPortEnterCritical>
 8008f68:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008f6c:	b25b      	sxtb	r3, r3
 8008f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f72:	d0d9      	beq.n	8008f28 <xQueueGenericSend+0xd0>
 8008f74:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008f78:	b25b      	sxtb	r3, r3
 8008f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f7e:	d0d7      	beq.n	8008f30 <xQueueGenericSend+0xd8>
 8008f80:	f001 ff32 	bl	800ade8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f84:	a901      	add	r1, sp, #4
 8008f86:	a802      	add	r0, sp, #8
 8008f88:	f000 fffe 	bl	8009f88 <xTaskCheckForTimeOut>
 8008f8c:	b9c8      	cbnz	r0, 8008fc2 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f7ff fdfe 	bl	8008b90 <prvIsQueueFull>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d0cf      	beq.n	8008f38 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f98:	9901      	ldr	r1, [sp, #4]
 8008f9a:	f104 0010 	add.w	r0, r4, #16
 8008f9e:	f000 ff6d 	bl	8009e7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f7ff fe5d 	bl	8008c62 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008fa8:	f000 fda2 	bl	8009af0 <xTaskResumeAll>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	d1c8      	bne.n	8008f42 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8008fb0:	4b07      	ldr	r3, [pc, #28]	; (8008fd0 <xQueueGenericSend+0x178>)
 8008fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	f3bf 8f6f 	isb	sy
 8008fc0:	e7bf      	b.n	8008f42 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f7ff fe4d 	bl	8008c62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fc8:	f000 fd92 	bl	8009af0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8008fcc:	2000      	movs	r0, #0
 8008fce:	e7a0      	b.n	8008f12 <xQueueGenericSend+0xba>
 8008fd0:	e000ed04 	.word	0xe000ed04

08008fd4 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8008fd4:	b148      	cbz	r0, 8008fea <prvInitialiseMutex+0x16>
	{
 8008fd6:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008fd8:	2100      	movs	r1, #0
 8008fda:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008fdc:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008fde:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	460a      	mov	r2, r1
 8008fe4:	f7ff ff38 	bl	8008e58 <xQueueGenericSend>
	}
 8008fe8:	bd08      	pop	{r3, pc}
 8008fea:	4770      	bx	lr

08008fec <xQueueCreateMutex>:
	{
 8008fec:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008fee:	4602      	mov	r2, r0
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	2001      	movs	r0, #1
 8008ff4:	f7ff ff08 	bl	8008e08 <xQueueGenericCreate>
 8008ff8:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008ffa:	f7ff ffeb 	bl	8008fd4 <prvInitialiseMutex>
	}
 8008ffe:	4620      	mov	r0, r4
 8009000:	bd10      	pop	{r4, pc}

08009002 <xQueueCreateMutexStatic>:
	{
 8009002:	b510      	push	{r4, lr}
 8009004:	b082      	sub	sp, #8
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009006:	9000      	str	r0, [sp, #0]
 8009008:	460b      	mov	r3, r1
 800900a:	2200      	movs	r2, #0
 800900c:	4611      	mov	r1, r2
 800900e:	2001      	movs	r0, #1
 8009010:	f7ff feb1 	bl	8008d76 <xQueueGenericCreateStatic>
 8009014:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009016:	f7ff ffdd 	bl	8008fd4 <prvInitialiseMutex>
	}
 800901a:	4620      	mov	r0, r4
 800901c:	b002      	add	sp, #8
 800901e:	bd10      	pop	{r4, pc}

08009020 <xQueueGenericSendFromISR>:
{
 8009020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009024:	b160      	cbz	r0, 8009040 <xQueueGenericSendFromISR+0x20>
 8009026:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009028:	b999      	cbnz	r1, 8009052 <xQueueGenericSendFromISR+0x32>
 800902a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800902c:	b188      	cbz	r0, 8009052 <xQueueGenericSendFromISR+0x32>
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	e7fe      	b.n	800903e <xQueueGenericSendFromISR+0x1e>
 8009040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	e7fe      	b.n	8009050 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009052:	2b02      	cmp	r3, #2
 8009054:	d10b      	bne.n	800906e <xQueueGenericSendFromISR+0x4e>
 8009056:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009058:	2801      	cmp	r0, #1
 800905a:	d008      	beq.n	800906e <xQueueGenericSendFromISR+0x4e>
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	e7fe      	b.n	800906c <xQueueGenericSendFromISR+0x4c>
 800906e:	461f      	mov	r7, r3
 8009070:	4690      	mov	r8, r2
 8009072:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009074:	f001 ffc0 	bl	800aff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009078:	f3ef 8611 	mrs	r6, BASEPRI
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800908c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800908e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009090:	429a      	cmp	r2, r3
 8009092:	d303      	bcc.n	800909c <xQueueGenericSendFromISR+0x7c>
 8009094:	2f02      	cmp	r7, #2
 8009096:	d001      	beq.n	800909c <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8009098:	2000      	movs	r0, #0
 800909a:	e00f      	b.n	80090bc <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 800909c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80090a0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090a2:	463a      	mov	r2, r7
 80090a4:	4649      	mov	r1, r9
 80090a6:	4620      	mov	r0, r4
 80090a8:	f7ff fd8e 	bl	8008bc8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80090ac:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80090b0:	d008      	beq.n	80090c4 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090b2:	1c6b      	adds	r3, r5, #1
 80090b4:	b25b      	sxtb	r3, r3
 80090b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80090ba:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090bc:	f386 8811 	msr	BASEPRI, r6
}
 80090c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090c6:	b15b      	cbz	r3, 80090e0 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80090cc:	f000 ff0a 	bl	8009ee4 <xTaskRemoveFromEventList>
 80090d0:	b140      	cbz	r0, 80090e4 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 80090d2:	f1b8 0f00 	cmp.w	r8, #0
 80090d6:	d007      	beq.n	80090e8 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090d8:	2001      	movs	r0, #1
 80090da:	f8c8 0000 	str.w	r0, [r8]
 80090de:	e7ed      	b.n	80090bc <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 80090e0:	2001      	movs	r0, #1
 80090e2:	e7eb      	b.n	80090bc <xQueueGenericSendFromISR+0x9c>
 80090e4:	2001      	movs	r0, #1
 80090e6:	e7e9      	b.n	80090bc <xQueueGenericSendFromISR+0x9c>
 80090e8:	2001      	movs	r0, #1
 80090ea:	e7e7      	b.n	80090bc <xQueueGenericSendFromISR+0x9c>

080090ec <xQueueReceive>:
{
 80090ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ee:	b085      	sub	sp, #20
 80090f0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80090f2:	b160      	cbz	r0, 800910e <xQueueReceive+0x22>
 80090f4:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090f6:	b999      	cbnz	r1, 8009120 <xQueueReceive+0x34>
 80090f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80090fa:	b18b      	cbz	r3, 8009120 <xQueueReceive+0x34>
	__asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	e7fe      	b.n	800910c <xQueueReceive+0x20>
 800910e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	e7fe      	b.n	800911e <xQueueReceive+0x32>
 8009120:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009122:	f001 f843 	bl	800a1ac <xTaskGetSchedulerState>
 8009126:	b950      	cbnz	r0, 800913e <xQueueReceive+0x52>
 8009128:	9b01      	ldr	r3, [sp, #4]
 800912a:	b153      	cbz	r3, 8009142 <xQueueReceive+0x56>
 800912c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009130:	f383 8811 	msr	BASEPRI, r3
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	e7fe      	b.n	800913c <xQueueReceive+0x50>
 800913e:	2600      	movs	r6, #0
 8009140:	e03e      	b.n	80091c0 <xQueueReceive+0xd4>
 8009142:	2600      	movs	r6, #0
 8009144:	e03c      	b.n	80091c0 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009146:	4639      	mov	r1, r7
 8009148:	4620      	mov	r0, r4
 800914a:	f7ff fd78 	bl	8008c3e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800914e:	3d01      	subs	r5, #1
 8009150:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009152:	6923      	ldr	r3, [r4, #16]
 8009154:	b923      	cbnz	r3, 8009160 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 8009156:	f001 fe47 	bl	800ade8 <vPortExitCritical>
				return pdPASS;
 800915a:	2001      	movs	r0, #1
}
 800915c:	b005      	add	sp, #20
 800915e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009160:	f104 0010 	add.w	r0, r4, #16
 8009164:	f000 febe 	bl	8009ee4 <xTaskRemoveFromEventList>
 8009168:	2800      	cmp	r0, #0
 800916a:	d0f4      	beq.n	8009156 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 800916c:	4b34      	ldr	r3, [pc, #208]	; (8009240 <xQueueReceive+0x154>)
 800916e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009172:	601a      	str	r2, [r3, #0]
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	e7eb      	b.n	8009156 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 800917e:	f001 fe33 	bl	800ade8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009182:	2000      	movs	r0, #0
 8009184:	e7ea      	b.n	800915c <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009186:	a802      	add	r0, sp, #8
 8009188:	f000 fef2 	bl	8009f70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800918c:	2601      	movs	r6, #1
 800918e:	e021      	b.n	80091d4 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 8009190:	2300      	movs	r3, #0
 8009192:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009196:	e029      	b.n	80091ec <xQueueReceive+0x100>
 8009198:	2300      	movs	r3, #0
 800919a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800919e:	e02b      	b.n	80091f8 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 80091a0:	4620      	mov	r0, r4
 80091a2:	f7ff fd5e 	bl	8008c62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091a6:	f000 fca3 	bl	8009af0 <xTaskResumeAll>
 80091aa:	e009      	b.n	80091c0 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 80091ac:	4620      	mov	r0, r4
 80091ae:	f7ff fd58 	bl	8008c62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091b2:	f000 fc9d 	bl	8009af0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091b6:	4620      	mov	r0, r4
 80091b8:	f7ff fcf9 	bl	8008bae <prvIsQueueEmpty>
 80091bc:	2800      	cmp	r0, #0
 80091be:	d13d      	bne.n	800923c <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 80091c0:	f001 fdf0 	bl	800ada4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091c4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091c6:	2d00      	cmp	r5, #0
 80091c8:	d1bd      	bne.n	8009146 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80091ca:	9b01      	ldr	r3, [sp, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0d6      	beq.n	800917e <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 80091d0:	2e00      	cmp	r6, #0
 80091d2:	d0d8      	beq.n	8009186 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 80091d4:	f001 fe08 	bl	800ade8 <vPortExitCritical>
		vTaskSuspendAll();
 80091d8:	f000 fbf0 	bl	80099bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091dc:	f001 fde2 	bl	800ada4 <vPortEnterCritical>
 80091e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80091e4:	b25b      	sxtb	r3, r3
 80091e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091ea:	d0d1      	beq.n	8009190 <xQueueReceive+0xa4>
 80091ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80091f0:	b25b      	sxtb	r3, r3
 80091f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091f6:	d0cf      	beq.n	8009198 <xQueueReceive+0xac>
 80091f8:	f001 fdf6 	bl	800ade8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091fc:	a901      	add	r1, sp, #4
 80091fe:	a802      	add	r0, sp, #8
 8009200:	f000 fec2 	bl	8009f88 <xTaskCheckForTimeOut>
 8009204:	2800      	cmp	r0, #0
 8009206:	d1d1      	bne.n	80091ac <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009208:	4620      	mov	r0, r4
 800920a:	f7ff fcd0 	bl	8008bae <prvIsQueueEmpty>
 800920e:	2800      	cmp	r0, #0
 8009210:	d0c6      	beq.n	80091a0 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009212:	9901      	ldr	r1, [sp, #4]
 8009214:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009218:	f000 fe30 	bl	8009e7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800921c:	4620      	mov	r0, r4
 800921e:	f7ff fd20 	bl	8008c62 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009222:	f000 fc65 	bl	8009af0 <xTaskResumeAll>
 8009226:	2800      	cmp	r0, #0
 8009228:	d1ca      	bne.n	80091c0 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 800922a:	4b05      	ldr	r3, [pc, #20]	; (8009240 <xQueueReceive+0x154>)
 800922c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	e7c1      	b.n	80091c0 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 800923c:	2000      	movs	r0, #0
 800923e:	e78d      	b.n	800915c <xQueueReceive+0x70>
 8009240:	e000ed04 	.word	0xe000ed04

08009244 <xQueueSemaphoreTake>:
{
 8009244:	b570      	push	{r4, r5, r6, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800924a:	b940      	cbnz	r0, 800925e <xQueueSemaphoreTake+0x1a>
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	e7fe      	b.n	800925c <xQueueSemaphoreTake+0x18>
 800925e:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8009260:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009262:	b143      	cbz	r3, 8009276 <xQueueSemaphoreTake+0x32>
 8009264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	e7fe      	b.n	8009274 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009276:	f000 ff99 	bl	800a1ac <xTaskGetSchedulerState>
 800927a:	b950      	cbnz	r0, 8009292 <xQueueSemaphoreTake+0x4e>
 800927c:	9b01      	ldr	r3, [sp, #4]
 800927e:	b15b      	cbz	r3, 8009298 <xQueueSemaphoreTake+0x54>
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	e7fe      	b.n	8009290 <xQueueSemaphoreTake+0x4c>
 8009292:	2500      	movs	r5, #0
 8009294:	462e      	mov	r6, r5
 8009296:	e051      	b.n	800933c <xQueueSemaphoreTake+0xf8>
 8009298:	2500      	movs	r5, #0
 800929a:	462e      	mov	r6, r5
 800929c:	e04e      	b.n	800933c <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800929e:	3b01      	subs	r3, #1
 80092a0:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	b913      	cbnz	r3, 80092ac <xQueueSemaphoreTake+0x68>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80092a6:	f001 f8f1 	bl	800a48c <pvTaskIncrementMutexHeldCount>
 80092aa:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092ac:	6923      	ldr	r3, [r4, #16]
 80092ae:	b163      	cbz	r3, 80092ca <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092b0:	f104 0010 	add.w	r0, r4, #16
 80092b4:	f000 fe16 	bl	8009ee4 <xTaskRemoveFromEventList>
 80092b8:	b138      	cbz	r0, 80092ca <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 80092ba:	4b48      	ldr	r3, [pc, #288]	; (80093dc <xQueueSemaphoreTake+0x198>)
 80092bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80092ca:	f001 fd8d 	bl	800ade8 <vPortExitCritical>
				return pdPASS;
 80092ce:	2501      	movs	r5, #1
}
 80092d0:	4628      	mov	r0, r5
 80092d2:	b004      	add	sp, #16
 80092d4:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 80092d6:	b145      	cbz	r5, 80092ea <xQueueSemaphoreTake+0xa6>
 80092d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092dc:	f383 8811 	msr	BASEPRI, r3
 80092e0:	f3bf 8f6f 	isb	sy
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	e7fe      	b.n	80092e8 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 80092ea:	f001 fd7d 	bl	800ade8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80092ee:	e7ef      	b.n	80092d0 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092f0:	a802      	add	r0, sp, #8
 80092f2:	f000 fe3d 	bl	8009f70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092f6:	2601      	movs	r6, #1
 80092f8:	e02a      	b.n	8009350 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 80092fa:	2300      	movs	r3, #0
 80092fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009300:	e032      	b.n	8009368 <xQueueSemaphoreTake+0x124>
 8009302:	2300      	movs	r3, #0
 8009304:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009308:	e034      	b.n	8009374 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 800930a:	f001 fd4b 	bl	800ada4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800930e:	68a0      	ldr	r0, [r4, #8]
 8009310:	f000 ff5c 	bl	800a1cc <xTaskPriorityInherit>
 8009314:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8009316:	f001 fd67 	bl	800ade8 <vPortExitCritical>
 800931a:	e03b      	b.n	8009394 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 800931c:	4620      	mov	r0, r4
 800931e:	f7ff fca0 	bl	8008c62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009322:	f000 fbe5 	bl	8009af0 <xTaskResumeAll>
 8009326:	e009      	b.n	800933c <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 8009328:	4620      	mov	r0, r4
 800932a:	f7ff fc9a 	bl	8008c62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800932e:	f000 fbdf 	bl	8009af0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009332:	4620      	mov	r0, r4
 8009334:	f7ff fc3b 	bl	8008bae <prvIsQueueEmpty>
 8009338:	2800      	cmp	r0, #0
 800933a:	d140      	bne.n	80093be <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 800933c:	f001 fd32 	bl	800ada4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009340:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1ab      	bne.n	800929e <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009346:	9b01      	ldr	r3, [sp, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d0c4      	beq.n	80092d6 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 800934c:	2e00      	cmp	r6, #0
 800934e:	d0cf      	beq.n	80092f0 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 8009350:	f001 fd4a 	bl	800ade8 <vPortExitCritical>
		vTaskSuspendAll();
 8009354:	f000 fb32 	bl	80099bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009358:	f001 fd24 	bl	800ada4 <vPortEnterCritical>
 800935c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009360:	b25b      	sxtb	r3, r3
 8009362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009366:	d0c8      	beq.n	80092fa <xQueueSemaphoreTake+0xb6>
 8009368:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800936c:	b25b      	sxtb	r3, r3
 800936e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009372:	d0c6      	beq.n	8009302 <xQueueSemaphoreTake+0xbe>
 8009374:	f001 fd38 	bl	800ade8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009378:	a901      	add	r1, sp, #4
 800937a:	a802      	add	r0, sp, #8
 800937c:	f000 fe04 	bl	8009f88 <xTaskCheckForTimeOut>
 8009380:	2800      	cmp	r0, #0
 8009382:	d1d1      	bne.n	8009328 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009384:	4620      	mov	r0, r4
 8009386:	f7ff fc12 	bl	8008bae <prvIsQueueEmpty>
 800938a:	2800      	cmp	r0, #0
 800938c:	d0c6      	beq.n	800931c <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d0ba      	beq.n	800930a <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009394:	9901      	ldr	r1, [sp, #4]
 8009396:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800939a:	f000 fd6f 	bl	8009e7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800939e:	4620      	mov	r0, r4
 80093a0:	f7ff fc5f 	bl	8008c62 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093a4:	f000 fba4 	bl	8009af0 <xTaskResumeAll>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d1c7      	bne.n	800933c <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 80093ac:	4b0b      	ldr	r3, [pc, #44]	; (80093dc <xQueueSemaphoreTake+0x198>)
 80093ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	f3bf 8f4f 	dsb	sy
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	e7be      	b.n	800933c <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 80093be:	2d00      	cmp	r5, #0
 80093c0:	d086      	beq.n	80092d0 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 80093c2:	f001 fcef 	bl	800ada4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80093c6:	4620      	mov	r0, r4
 80093c8:	f7ff fbd9 	bl	8008b7e <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80093cc:	4601      	mov	r1, r0
 80093ce:	68a0      	ldr	r0, [r4, #8]
 80093d0:	f000 ffb0 	bl	800a334 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80093d4:	f001 fd08 	bl	800ade8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80093d8:	2500      	movs	r5, #0
 80093da:	e779      	b.n	80092d0 <xQueueSemaphoreTake+0x8c>
 80093dc:	e000ed04 	.word	0xe000ed04

080093e0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093e0:	2300      	movs	r3, #0
 80093e2:	2b07      	cmp	r3, #7
 80093e4:	d80c      	bhi.n	8009400 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80093e6:	4a07      	ldr	r2, [pc, #28]	; (8009404 <vQueueAddToRegistry+0x24>)
 80093e8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80093ec:	b10a      	cbz	r2, 80093f2 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093ee:	3301      	adds	r3, #1
 80093f0:	e7f7      	b.n	80093e2 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80093f2:	4a04      	ldr	r2, [pc, #16]	; (8009404 <vQueueAddToRegistry+0x24>)
 80093f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80093f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093fc:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80093fe:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	200034c8 	.word	0x200034c8

08009408 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	4604      	mov	r4, r0
 800940c:	460d      	mov	r5, r1
 800940e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009410:	f001 fcc8 	bl	800ada4 <vPortEnterCritical>
 8009414:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009418:	b25b      	sxtb	r3, r3
 800941a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800941e:	d00d      	beq.n	800943c <vQueueWaitForMessageRestricted+0x34>
 8009420:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009424:	b25b      	sxtb	r3, r3
 8009426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800942a:	d00b      	beq.n	8009444 <vQueueWaitForMessageRestricted+0x3c>
 800942c:	f001 fcdc 	bl	800ade8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009430:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009432:	b15b      	cbz	r3, 800944c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009434:	4620      	mov	r0, r4
 8009436:	f7ff fc14 	bl	8008c62 <prvUnlockQueue>
	}
 800943a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800943c:	2300      	movs	r3, #0
 800943e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009442:	e7ed      	b.n	8009420 <vQueueWaitForMessageRestricted+0x18>
 8009444:	2300      	movs	r3, #0
 8009446:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800944a:	e7ef      	b.n	800942c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800944c:	4632      	mov	r2, r6
 800944e:	4629      	mov	r1, r5
 8009450:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009454:	f000 fd2a 	bl	8009eac <vTaskPlaceOnEventListRestricted>
 8009458:	e7ec      	b.n	8009434 <vQueueWaitForMessageRestricted+0x2c>

0800945a <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 800945a:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800945c:	e001      	b.n	8009462 <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 800945e:	3001      	adds	r0, #1
			ulCount++;
 8009460:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009462:	7802      	ldrb	r2, [r0, #0]
 8009464:	2aa5      	cmp	r2, #165	; 0xa5
 8009466:	d0fa      	beq.n	800945e <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( configSTACK_DEPTH_TYPE ) ulCount;
	}
 8009468:	f3c3 008f 	ubfx	r0, r3, #2, #16
 800946c:	4770      	bx	lr
	...

08009470 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009470:	4b08      	ldr	r3, [pc, #32]	; (8009494 <prvResetNextTaskUnblockTime+0x24>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	b13b      	cbz	r3, 8009488 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009478:	4b06      	ldr	r3, [pc, #24]	; (8009494 <prvResetNextTaskUnblockTime+0x24>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	4b05      	ldr	r3, [pc, #20]	; (8009498 <prvResetNextTaskUnblockTime+0x28>)
 8009484:	601a      	str	r2, [r3, #0]
	}
}
 8009486:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8009488:	4b03      	ldr	r3, [pc, #12]	; (8009498 <prvResetNextTaskUnblockTime+0x28>)
 800948a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	20000868 	.word	0x20000868
 8009498:	20000940 	.word	0x20000940

0800949c <prvInitialiseNewTask>:
{
 800949c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a0:	4681      	mov	r9, r0
 80094a2:	460d      	mov	r5, r1
 80094a4:	4617      	mov	r7, r2
 80094a6:	469a      	mov	sl, r3
 80094a8:	9e08      	ldr	r6, [sp, #32]
 80094aa:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80094ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80094b0:	0092      	lsls	r2, r2, #2
 80094b2:	21a5      	movs	r1, #165	; 0xa5
 80094b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80094b6:	f002 fbee 	bl	800bc96 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80094ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80094bc:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80094c0:	3a01      	subs	r2, #1
 80094c2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80094c6:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80094ca:	6467      	str	r7, [r4, #68]	; 0x44
	if( pcName != NULL )
 80094cc:	b38d      	cbz	r5, 8009532 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094ce:	2300      	movs	r3, #0
 80094d0:	2b0f      	cmp	r3, #15
 80094d2:	d807      	bhi.n	80094e4 <prvInitialiseNewTask+0x48>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094d4:	5ce9      	ldrb	r1, [r5, r3]
 80094d6:	18e2      	adds	r2, r4, r3
 80094d8:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80094dc:	5cea      	ldrb	r2, [r5, r3]
 80094de:	b10a      	cbz	r2, 80094e4 <prvInitialiseNewTask+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094e0:	3301      	adds	r3, #1
 80094e2:	e7f5      	b.n	80094d0 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094e4:	2300      	movs	r3, #0
 80094e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80094ea:	2e06      	cmp	r6, #6
 80094ec:	d900      	bls.n	80094f0 <prvInitialiseNewTask+0x54>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80094ee:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 80094f0:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80094f2:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80094f4:	2500      	movs	r5, #0
 80094f6:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80094f8:	1d20      	adds	r0, r4, #4
 80094fa:	f7ff fb03 	bl	8008b04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80094fe:	f104 0018 	add.w	r0, r4, #24
 8009502:	f7ff faff 	bl	8008b04 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009506:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009508:	f1c6 0607 	rsb	r6, r6, #7
 800950c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800950e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009510:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
 8009512:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009514:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009518:	4652      	mov	r2, sl
 800951a:	4649      	mov	r1, r9
 800951c:	4638      	mov	r0, r7
 800951e:	f001 fc17 	bl	800ad50 <pxPortInitialiseStack>
 8009522:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009524:	f1b8 0f00 	cmp.w	r8, #0
 8009528:	d001      	beq.n	800952e <prvInitialiseNewTask+0x92>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800952a:	f8c8 4000 	str.w	r4, [r8]
}
 800952e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009532:	2300      	movs	r3, #0
 8009534:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8009538:	e7d7      	b.n	80094ea <prvInitialiseNewTask+0x4e>
	...

0800953c <prvInitialiseTaskLists>:
{
 800953c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800953e:	2400      	movs	r4, #0
 8009540:	e007      	b.n	8009552 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009542:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009546:	0093      	lsls	r3, r2, #2
 8009548:	480e      	ldr	r0, [pc, #56]	; (8009584 <prvInitialiseTaskLists+0x48>)
 800954a:	4418      	add	r0, r3
 800954c:	f7ff facf 	bl	8008aee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009550:	3401      	adds	r4, #1
 8009552:	2c06      	cmp	r4, #6
 8009554:	d9f5      	bls.n	8009542 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8009556:	4d0c      	ldr	r5, [pc, #48]	; (8009588 <prvInitialiseTaskLists+0x4c>)
 8009558:	4628      	mov	r0, r5
 800955a:	f7ff fac8 	bl	8008aee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800955e:	4c0b      	ldr	r4, [pc, #44]	; (800958c <prvInitialiseTaskLists+0x50>)
 8009560:	4620      	mov	r0, r4
 8009562:	f7ff fac4 	bl	8008aee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009566:	480a      	ldr	r0, [pc, #40]	; (8009590 <prvInitialiseTaskLists+0x54>)
 8009568:	f7ff fac1 	bl	8008aee <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800956c:	4809      	ldr	r0, [pc, #36]	; (8009594 <prvInitialiseTaskLists+0x58>)
 800956e:	f7ff fabe 	bl	8008aee <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8009572:	4809      	ldr	r0, [pc, #36]	; (8009598 <prvInitialiseTaskLists+0x5c>)
 8009574:	f7ff fabb 	bl	8008aee <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009578:	4b08      	ldr	r3, [pc, #32]	; (800959c <prvInitialiseTaskLists+0x60>)
 800957a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800957c:	4b08      	ldr	r3, [pc, #32]	; (80095a0 <prvInitialiseTaskLists+0x64>)
 800957e:	601c      	str	r4, [r3, #0]
}
 8009580:	bd38      	pop	{r3, r4, r5, pc}
 8009582:	bf00      	nop
 8009584:	20000870 	.word	0x20000870
 8009588:	20000918 	.word	0x20000918
 800958c:	2000092c 	.word	0x2000092c
 8009590:	20000948 	.word	0x20000948
 8009594:	20000974 	.word	0x20000974
 8009598:	20000960 	.word	0x20000960
 800959c:	20000868 	.word	0x20000868
 80095a0:	2000086c 	.word	0x2000086c

080095a4 <prvAddNewTaskToReadyList>:
{
 80095a4:	b510      	push	{r4, lr}
 80095a6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80095a8:	f001 fbfc 	bl	800ada4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80095ac:	4a21      	ldr	r2, [pc, #132]	; (8009634 <prvAddNewTaskToReadyList+0x90>)
 80095ae:	6813      	ldr	r3, [r2, #0]
 80095b0:	3301      	adds	r3, #1
 80095b2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80095b4:	4b20      	ldr	r3, [pc, #128]	; (8009638 <prvAddNewTaskToReadyList+0x94>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	b15b      	cbz	r3, 80095d2 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80095ba:	4b20      	ldr	r3, [pc, #128]	; (800963c <prvAddNewTaskToReadyList+0x98>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	b96b      	cbnz	r3, 80095dc <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80095c0:	4b1d      	ldr	r3, [pc, #116]	; (8009638 <prvAddNewTaskToReadyList+0x94>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d807      	bhi.n	80095dc <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80095cc:	4b1a      	ldr	r3, [pc, #104]	; (8009638 <prvAddNewTaskToReadyList+0x94>)
 80095ce:	601c      	str	r4, [r3, #0]
 80095d0:	e004      	b.n	80095dc <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80095d2:	4b19      	ldr	r3, [pc, #100]	; (8009638 <prvAddNewTaskToReadyList+0x94>)
 80095d4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095d6:	6813      	ldr	r3, [r2, #0]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d027      	beq.n	800962c <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 80095dc:	4a18      	ldr	r2, [pc, #96]	; (8009640 <prvAddNewTaskToReadyList+0x9c>)
 80095de:	6813      	ldr	r3, [r2, #0]
 80095e0:	3301      	adds	r3, #1
 80095e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80095e4:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 80095e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095e8:	2201      	movs	r2, #1
 80095ea:	409a      	lsls	r2, r3
 80095ec:	4915      	ldr	r1, [pc, #84]	; (8009644 <prvAddNewTaskToReadyList+0xa0>)
 80095ee:	6808      	ldr	r0, [r1, #0]
 80095f0:	4302      	orrs	r2, r0
 80095f2:	600a      	str	r2, [r1, #0]
 80095f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80095f8:	009a      	lsls	r2, r3, #2
 80095fa:	1d21      	adds	r1, r4, #4
 80095fc:	4812      	ldr	r0, [pc, #72]	; (8009648 <prvAddNewTaskToReadyList+0xa4>)
 80095fe:	4410      	add	r0, r2
 8009600:	f7ff fa83 	bl	8008b0a <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009604:	f001 fbf0 	bl	800ade8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009608:	4b0c      	ldr	r3, [pc, #48]	; (800963c <prvAddNewTaskToReadyList+0x98>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	b16b      	cbz	r3, 800962a <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800960e:	4b0a      	ldr	r3, [pc, #40]	; (8009638 <prvAddNewTaskToReadyList+0x94>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009614:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009616:	429a      	cmp	r2, r3
 8009618:	d207      	bcs.n	800962a <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 800961a:	4b0c      	ldr	r3, [pc, #48]	; (800964c <prvAddNewTaskToReadyList+0xa8>)
 800961c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	f3bf 8f6f 	isb	sy
}
 800962a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800962c:	f7ff ff86 	bl	800953c <prvInitialiseTaskLists>
 8009630:	e7d4      	b.n	80095dc <prvAddNewTaskToReadyList+0x38>
 8009632:	bf00      	nop
 8009634:	20000900 	.word	0x20000900
 8009638:	20000864 	.word	0x20000864
 800963c:	2000095c 	.word	0x2000095c
 8009640:	20000910 	.word	0x20000910
 8009644:	20000914 	.word	0x20000914
 8009648:	20000870 	.word	0x20000870
 800964c:	e000ed04 	.word	0xe000ed04

08009650 <prvDeleteTCB>:
	{
 8009650:	b510      	push	{r4, lr}
 8009652:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009654:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8009658:	b933      	cbnz	r3, 8009668 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 800965a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800965c:	f001 fddc 	bl	800b218 <vPortFree>
				vPortFree( pxTCB );
 8009660:	4620      	mov	r0, r4
 8009662:	f001 fdd9 	bl	800b218 <vPortFree>
	}
 8009666:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009668:	2b01      	cmp	r3, #1
 800966a:	d00a      	beq.n	8009682 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800966c:	2b02      	cmp	r3, #2
 800966e:	d0fa      	beq.n	8009666 <prvDeleteTCB+0x16>
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	e7fe      	b.n	8009680 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 8009682:	f001 fdc9 	bl	800b218 <vPortFree>
 8009686:	e7ee      	b.n	8009666 <prvDeleteTCB+0x16>

08009688 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009688:	4b0f      	ldr	r3, [pc, #60]	; (80096c8 <prvCheckTasksWaitingTermination+0x40>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	b1d3      	cbz	r3, 80096c4 <prvCheckTasksWaitingTermination+0x3c>
{
 800968e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8009690:	f001 fb88 	bl	800ada4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009694:	4b0d      	ldr	r3, [pc, #52]	; (80096cc <prvCheckTasksWaitingTermination+0x44>)
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800969a:	1d20      	adds	r0, r4, #4
 800969c:	f7ff fa5b 	bl	8008b56 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80096a0:	4a0b      	ldr	r2, [pc, #44]	; (80096d0 <prvCheckTasksWaitingTermination+0x48>)
 80096a2:	6813      	ldr	r3, [r2, #0]
 80096a4:	3b01      	subs	r3, #1
 80096a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80096a8:	4a07      	ldr	r2, [pc, #28]	; (80096c8 <prvCheckTasksWaitingTermination+0x40>)
 80096aa:	6813      	ldr	r3, [r2, #0]
 80096ac:	3b01      	subs	r3, #1
 80096ae:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80096b0:	f001 fb9a 	bl	800ade8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80096b4:	4620      	mov	r0, r4
 80096b6:	f7ff ffcb 	bl	8009650 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096ba:	4b03      	ldr	r3, [pc, #12]	; (80096c8 <prvCheckTasksWaitingTermination+0x40>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1e6      	bne.n	8009690 <prvCheckTasksWaitingTermination+0x8>
}
 80096c2:	bd10      	pop	{r4, pc}
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	20000904 	.word	0x20000904
 80096cc:	20000974 	.word	0x20000974
 80096d0:	20000900 	.word	0x20000900

080096d4 <prvIdleTask>:
{
 80096d4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80096d6:	f7ff ffd7 	bl	8009688 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096da:	4b06      	ldr	r3, [pc, #24]	; (80096f4 <prvIdleTask+0x20>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d9f9      	bls.n	80096d6 <prvIdleTask+0x2>
				taskYIELD();
 80096e2:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <prvIdleTask+0x24>)
 80096e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e8:	601a      	str	r2, [r3, #0]
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	e7f0      	b.n	80096d6 <prvIdleTask+0x2>
 80096f4:	20000870 	.word	0x20000870
 80096f8:	e000ed04 	.word	0xe000ed04

080096fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	4604      	mov	r4, r0
 8009700:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009702:	4b1d      	ldr	r3, [pc, #116]	; (8009778 <prvAddCurrentTaskToDelayedList+0x7c>)
 8009704:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009706:	4b1d      	ldr	r3, [pc, #116]	; (800977c <prvAddCurrentTaskToDelayedList+0x80>)
 8009708:	6818      	ldr	r0, [r3, #0]
 800970a:	3004      	adds	r0, #4
 800970c:	f7ff fa23 	bl	8008b56 <uxListRemove>
 8009710:	b950      	cbnz	r0, 8009728 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009712:	4b1a      	ldr	r3, [pc, #104]	; (800977c <prvAddCurrentTaskToDelayedList+0x80>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009718:	2301      	movs	r3, #1
 800971a:	fa03 f202 	lsl.w	r2, r3, r2
 800971e:	4918      	ldr	r1, [pc, #96]	; (8009780 <prvAddCurrentTaskToDelayedList+0x84>)
 8009720:	680b      	ldr	r3, [r1, #0]
 8009722:	ea23 0302 	bic.w	r3, r3, r2
 8009726:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009728:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800972c:	d013      	beq.n	8009756 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800972e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009730:	4b12      	ldr	r3, [pc, #72]	; (800977c <prvAddCurrentTaskToDelayedList+0x80>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8009736:	42a5      	cmp	r5, r4
 8009738:	d816      	bhi.n	8009768 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800973a:	4b12      	ldr	r3, [pc, #72]	; (8009784 <prvAddCurrentTaskToDelayedList+0x88>)
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	4b0f      	ldr	r3, [pc, #60]	; (800977c <prvAddCurrentTaskToDelayedList+0x80>)
 8009740:	6819      	ldr	r1, [r3, #0]
 8009742:	3104      	adds	r1, #4
 8009744:	f7ff f9ed 	bl	8008b22 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8009748:	4b0f      	ldr	r3, [pc, #60]	; (8009788 <prvAddCurrentTaskToDelayedList+0x8c>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	42a3      	cmp	r3, r4
 800974e:	d912      	bls.n	8009776 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8009750:	4b0d      	ldr	r3, [pc, #52]	; (8009788 <prvAddCurrentTaskToDelayedList+0x8c>)
 8009752:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009754:	e00f      	b.n	8009776 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009756:	2e00      	cmp	r6, #0
 8009758:	d0e9      	beq.n	800972e <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800975a:	4b08      	ldr	r3, [pc, #32]	; (800977c <prvAddCurrentTaskToDelayedList+0x80>)
 800975c:	6819      	ldr	r1, [r3, #0]
 800975e:	3104      	adds	r1, #4
 8009760:	480a      	ldr	r0, [pc, #40]	; (800978c <prvAddCurrentTaskToDelayedList+0x90>)
 8009762:	f7ff f9d2 	bl	8008b0a <vListInsertEnd>
 8009766:	e006      	b.n	8009776 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009768:	4b09      	ldr	r3, [pc, #36]	; (8009790 <prvAddCurrentTaskToDelayedList+0x94>)
 800976a:	6818      	ldr	r0, [r3, #0]
 800976c:	4b03      	ldr	r3, [pc, #12]	; (800977c <prvAddCurrentTaskToDelayedList+0x80>)
 800976e:	6819      	ldr	r1, [r3, #0]
 8009770:	3104      	adds	r1, #4
 8009772:	f7ff f9d6 	bl	8008b22 <vListInsert>
}
 8009776:	bd70      	pop	{r4, r5, r6, pc}
 8009778:	20000988 	.word	0x20000988
 800977c:	20000864 	.word	0x20000864
 8009780:	20000914 	.word	0x20000914
 8009784:	20000868 	.word	0x20000868
 8009788:	20000940 	.word	0x20000940
 800978c:	20000960 	.word	0x20000960
 8009790:	2000086c 	.word	0x2000086c

08009794 <prvWriteNameToBuffer>:
	{
 8009794:	b510      	push	{r4, lr}
 8009796:	4604      	mov	r4, r0
		strcpy( pcBuffer, pcTaskName );
 8009798:	f002 faa6 	bl	800bce8 <strcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800979c:	4620      	mov	r0, r4
 800979e:	f7f6 fd1f 	bl	80001e0 <strlen>
 80097a2:	e002      	b.n	80097aa <prvWriteNameToBuffer+0x16>
			pcBuffer[ x ] = ' ';
 80097a4:	2320      	movs	r3, #32
 80097a6:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80097a8:	3001      	adds	r0, #1
 80097aa:	280e      	cmp	r0, #14
 80097ac:	d9fa      	bls.n	80097a4 <prvWriteNameToBuffer+0x10>
		pcBuffer[ x ] = ( char ) 0x00;
 80097ae:	2300      	movs	r3, #0
 80097b0:	5423      	strb	r3, [r4, r0]
	}
 80097b2:	4420      	add	r0, r4
 80097b4:	bd10      	pop	{r4, pc}

080097b6 <xTaskCreateStatic>:
	{
 80097b6:	b570      	push	{r4, r5, r6, lr}
 80097b8:	b086      	sub	sp, #24
 80097ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80097bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80097be:	b945      	cbnz	r5, 80097d2 <xTaskCreateStatic+0x1c>
 80097c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	e7fe      	b.n	80097d0 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80097d2:	b944      	cbnz	r4, 80097e6 <xTaskCreateStatic+0x30>
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	e7fe      	b.n	80097e4 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80097e6:	2664      	movs	r6, #100	; 0x64
 80097e8:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097ea:	9e04      	ldr	r6, [sp, #16]
 80097ec:	2e64      	cmp	r6, #100	; 0x64
 80097ee:	d008      	beq.n	8009802 <xTaskCreateStatic+0x4c>
 80097f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	e7fe      	b.n	8009800 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009802:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009804:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009806:	2502      	movs	r5, #2
 8009808:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800980c:	2500      	movs	r5, #0
 800980e:	9503      	str	r5, [sp, #12]
 8009810:	9402      	str	r4, [sp, #8]
 8009812:	ad05      	add	r5, sp, #20
 8009814:	9501      	str	r5, [sp, #4]
 8009816:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009818:	9500      	str	r5, [sp, #0]
 800981a:	f7ff fe3f 	bl	800949c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800981e:	4620      	mov	r0, r4
 8009820:	f7ff fec0 	bl	80095a4 <prvAddNewTaskToReadyList>
	}
 8009824:	9805      	ldr	r0, [sp, #20]
 8009826:	b006      	add	sp, #24
 8009828:	bd70      	pop	{r4, r5, r6, pc}

0800982a <xTaskCreate>:
	{
 800982a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800982e:	b085      	sub	sp, #20
 8009830:	4607      	mov	r7, r0
 8009832:	4688      	mov	r8, r1
 8009834:	4615      	mov	r5, r2
 8009836:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009838:	0090      	lsls	r0, r2, #2
 800983a:	f001 fc69 	bl	800b110 <pvPortMalloc>
			if( pxStack != NULL )
 800983e:	b308      	cbz	r0, 8009884 <xTaskCreate+0x5a>
 8009840:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009842:	2064      	movs	r0, #100	; 0x64
 8009844:	f001 fc64 	bl	800b110 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009848:	4604      	mov	r4, r0
 800984a:	b1b8      	cbz	r0, 800987c <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 800984c:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800984e:	b1e4      	cbz	r4, 800988a <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009850:	2300      	movs	r3, #0
 8009852:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009856:	9303      	str	r3, [sp, #12]
 8009858:	9402      	str	r4, [sp, #8]
 800985a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800985c:	9301      	str	r3, [sp, #4]
 800985e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	464b      	mov	r3, r9
 8009864:	462a      	mov	r2, r5
 8009866:	4641      	mov	r1, r8
 8009868:	4638      	mov	r0, r7
 800986a:	f7ff fe17 	bl	800949c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800986e:	4620      	mov	r0, r4
 8009870:	f7ff fe98 	bl	80095a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009874:	2001      	movs	r0, #1
	}
 8009876:	b005      	add	sp, #20
 8009878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800987c:	4630      	mov	r0, r6
 800987e:	f001 fccb 	bl	800b218 <vPortFree>
 8009882:	e7e4      	b.n	800984e <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009888:	e7f5      	b.n	8009876 <xTaskCreate+0x4c>
 800988a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800988e:	e7f2      	b.n	8009876 <xTaskCreate+0x4c>

08009890 <eTaskGetState>:
	{
 8009890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 8009892:	b1d0      	cbz	r0, 80098ca <eTaskGetState+0x3a>
 8009894:	4604      	mov	r4, r0
		if( pxTCB == pxCurrentTCB )
 8009896:	4b1d      	ldr	r3, [pc, #116]	; (800990c <eTaskGetState+0x7c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4283      	cmp	r3, r0
 800989c:	d029      	beq.n	80098f2 <eTaskGetState+0x62>
			taskENTER_CRITICAL();
 800989e:	f001 fa81 	bl	800ada4 <vPortEnterCritical>
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80098a2:	6965      	ldr	r5, [r4, #20]
				pxDelayedList = pxDelayedTaskList;
 80098a4:	4b1a      	ldr	r3, [pc, #104]	; (8009910 <eTaskGetState+0x80>)
 80098a6:	681f      	ldr	r7, [r3, #0]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80098a8:	4b1a      	ldr	r3, [pc, #104]	; (8009914 <eTaskGetState+0x84>)
 80098aa:	681e      	ldr	r6, [r3, #0]
			taskEXIT_CRITICAL();
 80098ac:	f001 fa9c 	bl	800ade8 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80098b0:	42bd      	cmp	r5, r7
 80098b2:	d020      	beq.n	80098f6 <eTaskGetState+0x66>
 80098b4:	42b5      	cmp	r5, r6
 80098b6:	d020      	beq.n	80098fa <eTaskGetState+0x6a>
				else if( pxStateList == &xSuspendedTaskList )
 80098b8:	4b17      	ldr	r3, [pc, #92]	; (8009918 <eTaskGetState+0x88>)
 80098ba:	429d      	cmp	r5, r3
 80098bc:	d00e      	beq.n	80098dc <eTaskGetState+0x4c>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80098be:	4b17      	ldr	r3, [pc, #92]	; (800991c <eTaskGetState+0x8c>)
 80098c0:	429d      	cmp	r5, r3
 80098c2:	d020      	beq.n	8009906 <eTaskGetState+0x76>
 80098c4:	b19d      	cbz	r5, 80098ee <eTaskGetState+0x5e>
				eReturn = eReady;
 80098c6:	2001      	movs	r0, #1
 80098c8:	e014      	b.n	80098f4 <eTaskGetState+0x64>
 80098ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ce:	f383 8811 	msr	BASEPRI, r3
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	e7fe      	b.n	80098da <eTaskGetState+0x4a>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80098dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80098de:	b973      	cbnz	r3, 80098fe <eTaskGetState+0x6e>
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80098e0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d10b      	bne.n	8009902 <eTaskGetState+0x72>
								eReturn = eBlocked;
 80098ea:	2002      	movs	r0, #2
 80098ec:	e002      	b.n	80098f4 <eTaskGetState+0x64>
					eReturn = eDeleted;
 80098ee:	2004      	movs	r0, #4
 80098f0:	e000      	b.n	80098f4 <eTaskGetState+0x64>
			eReturn = eRunning;
 80098f2:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80098f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				eReturn = eBlocked;
 80098f6:	2002      	movs	r0, #2
 80098f8:	e7fc      	b.n	80098f4 <eTaskGetState+0x64>
 80098fa:	2002      	movs	r0, #2
 80098fc:	e7fa      	b.n	80098f4 <eTaskGetState+0x64>
						eReturn = eBlocked;
 80098fe:	2002      	movs	r0, #2
 8009900:	e7f8      	b.n	80098f4 <eTaskGetState+0x64>
								eReturn = eSuspended;
 8009902:	2003      	movs	r0, #3
 8009904:	e7f6      	b.n	80098f4 <eTaskGetState+0x64>
					eReturn = eDeleted;
 8009906:	2004      	movs	r0, #4
 8009908:	e7f4      	b.n	80098f4 <eTaskGetState+0x64>
 800990a:	bf00      	nop
 800990c:	20000864 	.word	0x20000864
 8009910:	20000868 	.word	0x20000868
 8009914:	2000086c 	.word	0x2000086c
 8009918:	20000960 	.word	0x20000960
 800991c:	20000974 	.word	0x20000974

08009920 <vTaskStartScheduler>:
{
 8009920:	b510      	push	{r4, lr}
 8009922:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009924:	2400      	movs	r4, #0
 8009926:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009928:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800992a:	aa07      	add	r2, sp, #28
 800992c:	a906      	add	r1, sp, #24
 800992e:	a805      	add	r0, sp, #20
 8009930:	f7fa f91e 	bl	8003b70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009934:	9b05      	ldr	r3, [sp, #20]
 8009936:	9302      	str	r3, [sp, #8]
 8009938:	9b06      	ldr	r3, [sp, #24]
 800993a:	9301      	str	r3, [sp, #4]
 800993c:	9400      	str	r4, [sp, #0]
 800993e:	4623      	mov	r3, r4
 8009940:	9a07      	ldr	r2, [sp, #28]
 8009942:	4918      	ldr	r1, [pc, #96]	; (80099a4 <vTaskStartScheduler+0x84>)
 8009944:	4818      	ldr	r0, [pc, #96]	; (80099a8 <vTaskStartScheduler+0x88>)
 8009946:	f7ff ff36 	bl	80097b6 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800994a:	b140      	cbz	r0, 800995e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 800994c:	f000 ffc8 	bl	800a8e0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009950:	2801      	cmp	r0, #1
 8009952:	d006      	beq.n	8009962 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009954:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009958:	d01a      	beq.n	8009990 <vTaskStartScheduler+0x70>
}
 800995a:	b008      	add	sp, #32
 800995c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800995e:	2000      	movs	r0, #0
 8009960:	e7f6      	b.n	8009950 <vTaskStartScheduler+0x30>
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8009972:	4b0e      	ldr	r3, [pc, #56]	; (80099ac <vTaskStartScheduler+0x8c>)
 8009974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009978:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800997a:	4b0d      	ldr	r3, [pc, #52]	; (80099b0 <vTaskStartScheduler+0x90>)
 800997c:	2201      	movs	r2, #1
 800997e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009980:	2300      	movs	r3, #0
 8009982:	4a0c      	ldr	r2, [pc, #48]	; (80099b4 <vTaskStartScheduler+0x94>)
 8009984:	6013      	str	r3, [r2, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009986:	4a0c      	ldr	r2, [pc, #48]	; (80099b8 <vTaskStartScheduler+0x98>)
 8009988:	6013      	str	r3, [r2, #0]
		if( xPortStartScheduler() != pdFALSE )
 800998a:	f001 faad 	bl	800aee8 <xPortStartScheduler>
 800998e:	e7e4      	b.n	800995a <vTaskStartScheduler+0x3a>
 8009990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	e7fe      	b.n	80099a0 <vTaskStartScheduler+0x80>
 80099a2:	bf00      	nop
 80099a4:	0800cf74 	.word	0x0800cf74
 80099a8:	080096d5 	.word	0x080096d5
 80099ac:	20000940 	.word	0x20000940
 80099b0:	2000095c 	.word	0x2000095c
 80099b4:	20000988 	.word	0x20000988
 80099b8:	20003434 	.word	0x20003434

080099bc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80099bc:	4a02      	ldr	r2, [pc, #8]	; (80099c8 <vTaskSuspendAll+0xc>)
 80099be:	6813      	ldr	r3, [r2, #0]
 80099c0:	3301      	adds	r3, #1
 80099c2:	6013      	str	r3, [r2, #0]
}
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	2000090c 	.word	0x2000090c

080099cc <xTaskGetTickCount>:
		xTicks = xTickCount;
 80099cc:	4b01      	ldr	r3, [pc, #4]	; (80099d4 <xTaskGetTickCount+0x8>)
 80099ce:	6818      	ldr	r0, [r3, #0]
}
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	20000988 	.word	0x20000988

080099d8 <xTaskIncrementTick>:
{
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099da:	4b3a      	ldr	r3, [pc, #232]	; (8009ac4 <xTaskIncrementTick+0xec>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d164      	bne.n	8009aac <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099e2:	4b39      	ldr	r3, [pc, #228]	; (8009ac8 <xTaskIncrementTick+0xf0>)
 80099e4:	681d      	ldr	r5, [r3, #0]
 80099e6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80099e8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099ea:	b9c5      	cbnz	r5, 8009a1e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80099ec:	4b37      	ldr	r3, [pc, #220]	; (8009acc <xTaskIncrementTick+0xf4>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	b143      	cbz	r3, 8009a06 <xTaskIncrementTick+0x2e>
 80099f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	e7fe      	b.n	8009a04 <xTaskIncrementTick+0x2c>
 8009a06:	4a31      	ldr	r2, [pc, #196]	; (8009acc <xTaskIncrementTick+0xf4>)
 8009a08:	6811      	ldr	r1, [r2, #0]
 8009a0a:	4b31      	ldr	r3, [pc, #196]	; (8009ad0 <xTaskIncrementTick+0xf8>)
 8009a0c:	6818      	ldr	r0, [r3, #0]
 8009a0e:	6010      	str	r0, [r2, #0]
 8009a10:	6019      	str	r1, [r3, #0]
 8009a12:	4a30      	ldr	r2, [pc, #192]	; (8009ad4 <xTaskIncrementTick+0xfc>)
 8009a14:	6813      	ldr	r3, [r2, #0]
 8009a16:	3301      	adds	r3, #1
 8009a18:	6013      	str	r3, [r2, #0]
 8009a1a:	f7ff fd29 	bl	8009470 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a1e:	4b2e      	ldr	r3, [pc, #184]	; (8009ad8 <xTaskIncrementTick+0x100>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	42ab      	cmp	r3, r5
 8009a24:	d938      	bls.n	8009a98 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8009a26:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a28:	4b2c      	ldr	r3, [pc, #176]	; (8009adc <xTaskIncrementTick+0x104>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009a32:	009a      	lsls	r2, r3, #2
 8009a34:	4b2a      	ldr	r3, [pc, #168]	; (8009ae0 <xTaskIncrementTick+0x108>)
 8009a36:	589b      	ldr	r3, [r3, r2]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d93c      	bls.n	8009ab6 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8009a3c:	2401      	movs	r4, #1
 8009a3e:	e03a      	b.n	8009ab6 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8009a40:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a42:	4b22      	ldr	r3, [pc, #136]	; (8009acc <xTaskIncrementTick+0xf4>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	b343      	cbz	r3, 8009a9c <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a4a:	4b20      	ldr	r3, [pc, #128]	; (8009acc <xTaskIncrementTick+0xf4>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a52:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8009a54:	429d      	cmp	r5, r3
 8009a56:	d326      	bcc.n	8009aa6 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a58:	1d37      	adds	r7, r6, #4
 8009a5a:	4638      	mov	r0, r7
 8009a5c:	f7ff f87b 	bl	8008b56 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a60:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8009a62:	b11b      	cbz	r3, 8009a6c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a64:	f106 0018 	add.w	r0, r6, #24
 8009a68:	f7ff f875 	bl	8008b56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a6c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009a6e:	2201      	movs	r2, #1
 8009a70:	409a      	lsls	r2, r3
 8009a72:	491c      	ldr	r1, [pc, #112]	; (8009ae4 <xTaskIncrementTick+0x10c>)
 8009a74:	6808      	ldr	r0, [r1, #0]
 8009a76:	4302      	orrs	r2, r0
 8009a78:	600a      	str	r2, [r1, #0]
 8009a7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009a7e:	009a      	lsls	r2, r3, #2
 8009a80:	4639      	mov	r1, r7
 8009a82:	4817      	ldr	r0, [pc, #92]	; (8009ae0 <xTaskIncrementTick+0x108>)
 8009a84:	4410      	add	r0, r2
 8009a86:	f7ff f840 	bl	8008b0a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a8a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8009a8c:	4b13      	ldr	r3, [pc, #76]	; (8009adc <xTaskIncrementTick+0x104>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d2d4      	bcs.n	8009a40 <xTaskIncrementTick+0x68>
 8009a96:	e7d4      	b.n	8009a42 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8009a98:	2400      	movs	r4, #0
 8009a9a:	e7d2      	b.n	8009a42 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a9c:	4b0e      	ldr	r3, [pc, #56]	; (8009ad8 <xTaskIncrementTick+0x100>)
 8009a9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009aa2:	601a      	str	r2, [r3, #0]
					break;
 8009aa4:	e7c0      	b.n	8009a28 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8009aa6:	4a0c      	ldr	r2, [pc, #48]	; (8009ad8 <xTaskIncrementTick+0x100>)
 8009aa8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009aaa:	e7bd      	b.n	8009a28 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8009aac:	4a0e      	ldr	r2, [pc, #56]	; (8009ae8 <xTaskIncrementTick+0x110>)
 8009aae:	6813      	ldr	r3, [r2, #0]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009ab4:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8009ab6:	4b0d      	ldr	r3, [pc, #52]	; (8009aec <xTaskIncrementTick+0x114>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	b103      	cbz	r3, 8009abe <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8009abc:	2401      	movs	r4, #1
}
 8009abe:	4620      	mov	r0, r4
 8009ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	2000090c 	.word	0x2000090c
 8009ac8:	20000988 	.word	0x20000988
 8009acc:	20000868 	.word	0x20000868
 8009ad0:	2000086c 	.word	0x2000086c
 8009ad4:	20000944 	.word	0x20000944
 8009ad8:	20000940 	.word	0x20000940
 8009adc:	20000864 	.word	0x20000864
 8009ae0:	20000870 	.word	0x20000870
 8009ae4:	20000914 	.word	0x20000914
 8009ae8:	20000908 	.word	0x20000908
 8009aec:	2000098c 	.word	0x2000098c

08009af0 <xTaskResumeAll>:
{
 8009af0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8009af2:	4b33      	ldr	r3, [pc, #204]	; (8009bc0 <xTaskResumeAll+0xd0>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	b943      	cbnz	r3, 8009b0a <xTaskResumeAll+0x1a>
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	e7fe      	b.n	8009b08 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8009b0a:	f001 f94b 	bl	800ada4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009b0e:	4b2c      	ldr	r3, [pc, #176]	; (8009bc0 <xTaskResumeAll+0xd0>)
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	3a01      	subs	r2, #1
 8009b14:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d14d      	bne.n	8009bb8 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b1c:	4b29      	ldr	r3, [pc, #164]	; (8009bc4 <xTaskResumeAll+0xd4>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	b923      	cbnz	r3, 8009b2c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8009b22:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009b24:	f001 f960 	bl	800ade8 <vPortExitCritical>
}
 8009b28:	4620      	mov	r0, r4
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8009b2c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b2e:	4b26      	ldr	r3, [pc, #152]	; (8009bc8 <xTaskResumeAll+0xd8>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	b31b      	cbz	r3, 8009b7c <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b34:	4b24      	ldr	r3, [pc, #144]	; (8009bc8 <xTaskResumeAll+0xd8>)
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b3a:	f104 0018 	add.w	r0, r4, #24
 8009b3e:	f7ff f80a 	bl	8008b56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b42:	1d25      	adds	r5, r4, #4
 8009b44:	4628      	mov	r0, r5
 8009b46:	f7ff f806 	bl	8008b56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	409a      	lsls	r2, r3
 8009b50:	491e      	ldr	r1, [pc, #120]	; (8009bcc <xTaskResumeAll+0xdc>)
 8009b52:	6808      	ldr	r0, [r1, #0]
 8009b54:	4302      	orrs	r2, r0
 8009b56:	600a      	str	r2, [r1, #0]
 8009b58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009b5c:	009a      	lsls	r2, r3, #2
 8009b5e:	4629      	mov	r1, r5
 8009b60:	481b      	ldr	r0, [pc, #108]	; (8009bd0 <xTaskResumeAll+0xe0>)
 8009b62:	4410      	add	r0, r2
 8009b64:	f7fe ffd1 	bl	8008b0a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009b6a:	4b1a      	ldr	r3, [pc, #104]	; (8009bd4 <xTaskResumeAll+0xe4>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d3dc      	bcc.n	8009b2e <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8009b74:	4b18      	ldr	r3, [pc, #96]	; (8009bd8 <xTaskResumeAll+0xe8>)
 8009b76:	2201      	movs	r2, #1
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	e7d8      	b.n	8009b2e <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8009b7c:	b10c      	cbz	r4, 8009b82 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8009b7e:	f7ff fc77 	bl	8009470 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009b82:	4b16      	ldr	r3, [pc, #88]	; (8009bdc <xTaskResumeAll+0xec>)
 8009b84:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009b86:	b154      	cbz	r4, 8009b9e <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8009b88:	f7ff ff26 	bl	80099d8 <xTaskIncrementTick>
 8009b8c:	b110      	cbz	r0, 8009b94 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8009b8e:	4b12      	ldr	r3, [pc, #72]	; (8009bd8 <xTaskResumeAll+0xe8>)
 8009b90:	2201      	movs	r2, #1
 8009b92:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009b94:	3c01      	subs	r4, #1
 8009b96:	d1f7      	bne.n	8009b88 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8009b98:	4b10      	ldr	r3, [pc, #64]	; (8009bdc <xTaskResumeAll+0xec>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8009b9e:	4b0e      	ldr	r3, [pc, #56]	; (8009bd8 <xTaskResumeAll+0xe8>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	b15b      	cbz	r3, 8009bbc <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8009ba4:	4b0e      	ldr	r3, [pc, #56]	; (8009be0 <xTaskResumeAll+0xf0>)
 8009ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009baa:	601a      	str	r2, [r3, #0]
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009bb4:	2401      	movs	r4, #1
 8009bb6:	e7b5      	b.n	8009b24 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8009bb8:	2400      	movs	r4, #0
 8009bba:	e7b3      	b.n	8009b24 <xTaskResumeAll+0x34>
 8009bbc:	2400      	movs	r4, #0
 8009bbe:	e7b1      	b.n	8009b24 <xTaskResumeAll+0x34>
 8009bc0:	2000090c 	.word	0x2000090c
 8009bc4:	20000900 	.word	0x20000900
 8009bc8:	20000948 	.word	0x20000948
 8009bcc:	20000914 	.word	0x20000914
 8009bd0:	20000870 	.word	0x20000870
 8009bd4:	20000864 	.word	0x20000864
 8009bd8:	2000098c 	.word	0x2000098c
 8009bdc:	20000908 	.word	0x20000908
 8009be0:	e000ed04 	.word	0xe000ed04

08009be4 <vTaskDelayUntil>:
	{
 8009be4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8009be6:	b150      	cbz	r0, 8009bfe <vTaskDelayUntil+0x1a>
 8009be8:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 8009bea:	b989      	cbnz	r1, 8009c10 <vTaskDelayUntil+0x2c>
 8009bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	e7fe      	b.n	8009bfc <vTaskDelayUntil+0x18>
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	e7fe      	b.n	8009c0e <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
 8009c10:	4b1a      	ldr	r3, [pc, #104]	; (8009c7c <vTaskDelayUntil+0x98>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	b143      	cbz	r3, 8009c28 <vTaskDelayUntil+0x44>
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	e7fe      	b.n	8009c26 <vTaskDelayUntil+0x42>
 8009c28:	460c      	mov	r4, r1
		vTaskSuspendAll();
 8009c2a:	f7ff fec7 	bl	80099bc <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8009c2e:	4b14      	ldr	r3, [pc, #80]	; (8009c80 <vTaskDelayUntil+0x9c>)
 8009c30:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009c32:	682a      	ldr	r2, [r5, #0]
 8009c34:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
 8009c36:	4282      	cmp	r2, r0
 8009c38:	d918      	bls.n	8009c6c <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009c3a:	42a2      	cmp	r2, r4
 8009c3c:	d80c      	bhi.n	8009c58 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
 8009c3e:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
 8009c40:	f7ff ff56 	bl	8009af0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009c44:	b938      	cbnz	r0, 8009c56 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
 8009c46:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <vTaskDelayUntil+0xa0>)
 8009c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c4c:	601a      	str	r2, [r3, #0]
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	f3bf 8f6f 	isb	sy
	}
 8009c56:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009c58:	42a0      	cmp	r0, r4
 8009c5a:	d301      	bcc.n	8009c60 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 8009c5c:	602c      	str	r4, [r5, #0]
 8009c5e:	e7ef      	b.n	8009c40 <vTaskDelayUntil+0x5c>
 8009c60:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009c62:	2100      	movs	r1, #0
 8009c64:	1a20      	subs	r0, r4, r0
 8009c66:	f7ff fd49 	bl	80096fc <prvAddCurrentTaskToDelayedList>
 8009c6a:	e7e9      	b.n	8009c40 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009c6c:	42a2      	cmp	r2, r4
 8009c6e:	d801      	bhi.n	8009c74 <vTaskDelayUntil+0x90>
 8009c70:	42a0      	cmp	r0, r4
 8009c72:	d201      	bcs.n	8009c78 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
 8009c74:	602c      	str	r4, [r5, #0]
 8009c76:	e7f4      	b.n	8009c62 <vTaskDelayUntil+0x7e>
 8009c78:	602c      	str	r4, [r5, #0]
 8009c7a:	e7e1      	b.n	8009c40 <vTaskDelayUntil+0x5c>
 8009c7c:	2000090c 	.word	0x2000090c
 8009c80:	20000988 	.word	0x20000988
 8009c84:	e000ed04 	.word	0xe000ed04

08009c88 <vTaskDelay>:
	{
 8009c88:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009c8a:	b1a8      	cbz	r0, 8009cb8 <vTaskDelay+0x30>
 8009c8c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8009c8e:	4b0f      	ldr	r3, [pc, #60]	; (8009ccc <vTaskDelay+0x44>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	b143      	cbz	r3, 8009ca6 <vTaskDelay+0x1e>
 8009c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	e7fe      	b.n	8009ca4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8009ca6:	f7ff fe89 	bl	80099bc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009caa:	2100      	movs	r1, #0
 8009cac:	4620      	mov	r0, r4
 8009cae:	f7ff fd25 	bl	80096fc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009cb2:	f7ff ff1d 	bl	8009af0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009cb6:	b938      	cbnz	r0, 8009cc8 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8009cb8:	4b05      	ldr	r3, [pc, #20]	; (8009cd0 <vTaskDelay+0x48>)
 8009cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cbe:	601a      	str	r2, [r3, #0]
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	f3bf 8f6f 	isb	sy
	}
 8009cc8:	bd10      	pop	{r4, pc}
 8009cca:	bf00      	nop
 8009ccc:	2000090c 	.word	0x2000090c
 8009cd0:	e000ed04 	.word	0xe000ed04

08009cd4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009cd4:	4b27      	ldr	r3, [pc, #156]	; (8009d74 <vTaskSwitchContext+0xa0>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	b11b      	cbz	r3, 8009ce2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009cda:	4b27      	ldr	r3, [pc, #156]	; (8009d78 <vTaskSwitchContext+0xa4>)
 8009cdc:	2201      	movs	r2, #1
 8009cde:	601a      	str	r2, [r3, #0]
 8009ce0:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8009ce2:	4b25      	ldr	r3, [pc, #148]	; (8009d78 <vTaskSwitchContext+0xa4>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009ce8:	4b24      	ldr	r3, [pc, #144]	; (8009d7c <vTaskSwitchContext+0xa8>)
 8009cea:	681a      	ldr	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009cec:	4b24      	ldr	r3, [pc, #144]	; (8009d80 <vTaskSwitchContext+0xac>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d905      	bls.n	8009d00 <vTaskSwitchContext+0x2c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009cf4:	4923      	ldr	r1, [pc, #140]	; (8009d84 <vTaskSwitchContext+0xb0>)
 8009cf6:	6808      	ldr	r0, [r1, #0]
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8009cfc:	440b      	add	r3, r1
 8009cfe:	6583      	str	r3, [r0, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009d00:	4b1f      	ldr	r3, [pc, #124]	; (8009d80 <vTaskSwitchContext+0xac>)
 8009d02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d04:	4b20      	ldr	r3, [pc, #128]	; (8009d88 <vTaskSwitchContext+0xb4>)
 8009d06:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009d08:	fab3 f383 	clz	r3, r3
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	f1c3 031f 	rsb	r3, r3, #31
 8009d12:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009d16:	008a      	lsls	r2, r1, #2
 8009d18:	491c      	ldr	r1, [pc, #112]	; (8009d8c <vTaskSwitchContext+0xb8>)
 8009d1a:	588a      	ldr	r2, [r1, r2]
 8009d1c:	b942      	cbnz	r2, 8009d30 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	e7fe      	b.n	8009d2e <vTaskSwitchContext+0x5a>
{
 8009d30:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d32:	4816      	ldr	r0, [pc, #88]	; (8009d8c <vTaskSwitchContext+0xb8>)
 8009d34:	009a      	lsls	r2, r3, #2
 8009d36:	18d4      	adds	r4, r2, r3
 8009d38:	00a1      	lsls	r1, r4, #2
 8009d3a:	4401      	add	r1, r0
 8009d3c:	684c      	ldr	r4, [r1, #4]
 8009d3e:	6864      	ldr	r4, [r4, #4]
 8009d40:	604c      	str	r4, [r1, #4]
 8009d42:	441a      	add	r2, r3
 8009d44:	0091      	lsls	r1, r2, #2
 8009d46:	3108      	adds	r1, #8
 8009d48:	4408      	add	r0, r1
 8009d4a:	4284      	cmp	r4, r0
 8009d4c:	d00b      	beq.n	8009d66 <vTaskSwitchContext+0x92>
 8009d4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009d52:	009a      	lsls	r2, r3, #2
 8009d54:	4b0d      	ldr	r3, [pc, #52]	; (8009d8c <vTaskSwitchContext+0xb8>)
 8009d56:	4413      	add	r3, r2
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	68da      	ldr	r2, [r3, #12]
 8009d5c:	4b09      	ldr	r3, [pc, #36]	; (8009d84 <vTaskSwitchContext+0xb0>)
 8009d5e:	601a      	str	r2, [r3, #0]
}
 8009d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d64:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d66:	6861      	ldr	r1, [r4, #4]
 8009d68:	4808      	ldr	r0, [pc, #32]	; (8009d8c <vTaskSwitchContext+0xb8>)
 8009d6a:	2214      	movs	r2, #20
 8009d6c:	fb02 0203 	mla	r2, r2, r3, r0
 8009d70:	6051      	str	r1, [r2, #4]
 8009d72:	e7ec      	b.n	8009d4e <vTaskSwitchContext+0x7a>
 8009d74:	2000090c 	.word	0x2000090c
 8009d78:	2000098c 	.word	0x2000098c
 8009d7c:	20003434 	.word	0x20003434
 8009d80:	200008fc 	.word	0x200008fc
 8009d84:	20000864 	.word	0x20000864
 8009d88:	20000914 	.word	0x20000914
 8009d8c:	20000870 	.word	0x20000870

08009d90 <vTaskSuspend>:
	{
 8009d90:	b538      	push	{r3, r4, r5, lr}
 8009d92:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8009d94:	f001 f806 	bl	800ada4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009d98:	b364      	cbz	r4, 8009df4 <vTaskSuspend+0x64>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d9a:	1d25      	adds	r5, r4, #4
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	f7fe feda 	bl	8008b56 <uxListRemove>
 8009da2:	b970      	cbnz	r0, 8009dc2 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009da4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009da6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8009daa:	008b      	lsls	r3, r1, #2
 8009dac:	492b      	ldr	r1, [pc, #172]	; (8009e5c <vTaskSuspend+0xcc>)
 8009dae:	58cb      	ldr	r3, [r1, r3]
 8009db0:	b93b      	cbnz	r3, 8009dc2 <vTaskSuspend+0x32>
 8009db2:	2301      	movs	r3, #1
 8009db4:	fa03 f202 	lsl.w	r2, r3, r2
 8009db8:	4929      	ldr	r1, [pc, #164]	; (8009e60 <vTaskSuspend+0xd0>)
 8009dba:	680b      	ldr	r3, [r1, #0]
 8009dbc:	ea23 0302 	bic.w	r3, r3, r2
 8009dc0:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009dc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009dc4:	b11b      	cbz	r3, 8009dce <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dc6:	f104 0018 	add.w	r0, r4, #24
 8009dca:	f7fe fec4 	bl	8008b56 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009dce:	4629      	mov	r1, r5
 8009dd0:	4824      	ldr	r0, [pc, #144]	; (8009e64 <vTaskSuspend+0xd4>)
 8009dd2:	f7fe fe9a 	bl	8008b0a <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009dd6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d00c      	beq.n	8009dfa <vTaskSuspend+0x6a>
		taskEXIT_CRITICAL();
 8009de0:	f001 f802 	bl	800ade8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8009de4:	4b20      	ldr	r3, [pc, #128]	; (8009e68 <vTaskSuspend+0xd8>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	b95b      	cbnz	r3, 8009e02 <vTaskSuspend+0x72>
		if( pxTCB == pxCurrentTCB )
 8009dea:	4b20      	ldr	r3, [pc, #128]	; (8009e6c <vTaskSuspend+0xdc>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	42a3      	cmp	r3, r4
 8009df0:	d00e      	beq.n	8009e10 <vTaskSuspend+0x80>
	}
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009df4:	4b1d      	ldr	r3, [pc, #116]	; (8009e6c <vTaskSuspend+0xdc>)
 8009df6:	681c      	ldr	r4, [r3, #0]
 8009df8:	e7cf      	b.n	8009d9a <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8009e00:	e7ee      	b.n	8009de0 <vTaskSuspend+0x50>
			taskENTER_CRITICAL();
 8009e02:	f000 ffcf 	bl	800ada4 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8009e06:	f7ff fb33 	bl	8009470 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8009e0a:	f000 ffed 	bl	800ade8 <vPortExitCritical>
 8009e0e:	e7ec      	b.n	8009dea <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
 8009e10:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <vTaskSuspend+0xd8>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	b1a3      	cbz	r3, 8009e40 <vTaskSuspend+0xb0>
				configASSERT( uxSchedulerSuspended == 0 );
 8009e16:	4b16      	ldr	r3, [pc, #88]	; (8009e70 <vTaskSuspend+0xe0>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	b143      	cbz	r3, 8009e2e <vTaskSuspend+0x9e>
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	e7fe      	b.n	8009e2c <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8009e2e:	4b11      	ldr	r3, [pc, #68]	; (8009e74 <vTaskSuspend+0xe4>)
 8009e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e34:	601a      	str	r2, [r3, #0]
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	e7d8      	b.n	8009df2 <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009e40:	4b08      	ldr	r3, [pc, #32]	; (8009e64 <vTaskSuspend+0xd4>)
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <vTaskSuspend+0xe8>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d103      	bne.n	8009e54 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8009e4c:	4b07      	ldr	r3, [pc, #28]	; (8009e6c <vTaskSuspend+0xdc>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
 8009e52:	e7ce      	b.n	8009df2 <vTaskSuspend+0x62>
					vTaskSwitchContext();
 8009e54:	f7ff ff3e 	bl	8009cd4 <vTaskSwitchContext>
	}
 8009e58:	e7cb      	b.n	8009df2 <vTaskSuspend+0x62>
 8009e5a:	bf00      	nop
 8009e5c:	20000870 	.word	0x20000870
 8009e60:	20000914 	.word	0x20000914
 8009e64:	20000960 	.word	0x20000960
 8009e68:	2000095c 	.word	0x2000095c
 8009e6c:	20000864 	.word	0x20000864
 8009e70:	2000090c 	.word	0x2000090c
 8009e74:	e000ed04 	.word	0xe000ed04
 8009e78:	20000900 	.word	0x20000900

08009e7c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009e7c:	b940      	cbnz	r0, 8009e90 <vTaskPlaceOnEventList+0x14>
 8009e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	e7fe      	b.n	8009e8e <vTaskPlaceOnEventList+0x12>
{
 8009e90:	b510      	push	{r4, lr}
 8009e92:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e94:	4b04      	ldr	r3, [pc, #16]	; (8009ea8 <vTaskPlaceOnEventList+0x2c>)
 8009e96:	6819      	ldr	r1, [r3, #0]
 8009e98:	3118      	adds	r1, #24
 8009e9a:	f7fe fe42 	bl	8008b22 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f7ff fc2b 	bl	80096fc <prvAddCurrentTaskToDelayedList>
}
 8009ea6:	bd10      	pop	{r4, pc}
 8009ea8:	20000864 	.word	0x20000864

08009eac <vTaskPlaceOnEventListRestricted>:
	{
 8009eac:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8009eae:	b940      	cbnz	r0, 8009ec2 <vTaskPlaceOnEventListRestricted+0x16>
 8009eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	e7fe      	b.n	8009ec0 <vTaskPlaceOnEventListRestricted+0x14>
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ec6:	4a06      	ldr	r2, [pc, #24]	; (8009ee0 <vTaskPlaceOnEventListRestricted+0x34>)
 8009ec8:	6811      	ldr	r1, [r2, #0]
 8009eca:	3118      	adds	r1, #24
 8009ecc:	f7fe fe1d 	bl	8008b0a <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8009ed0:	b10d      	cbz	r5, 8009ed6 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 8009ed2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f7ff fc0f 	bl	80096fc <prvAddCurrentTaskToDelayedList>
	}
 8009ede:	bd38      	pop	{r3, r4, r5, pc}
 8009ee0:	20000864 	.word	0x20000864

08009ee4 <xTaskRemoveFromEventList>:
{
 8009ee4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ee6:	68c3      	ldr	r3, [r0, #12]
 8009ee8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009eea:	b944      	cbnz	r4, 8009efe <xTaskRemoveFromEventList+0x1a>
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	e7fe      	b.n	8009efc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009efe:	f104 0518 	add.w	r5, r4, #24
 8009f02:	4628      	mov	r0, r5
 8009f04:	f7fe fe27 	bl	8008b56 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f08:	4b13      	ldr	r3, [pc, #76]	; (8009f58 <xTaskRemoveFromEventList+0x74>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	b9e3      	cbnz	r3, 8009f48 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f0e:	1d25      	adds	r5, r4, #4
 8009f10:	4628      	mov	r0, r5
 8009f12:	f7fe fe20 	bl	8008b56 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009f18:	2201      	movs	r2, #1
 8009f1a:	409a      	lsls	r2, r3
 8009f1c:	490f      	ldr	r1, [pc, #60]	; (8009f5c <xTaskRemoveFromEventList+0x78>)
 8009f1e:	6808      	ldr	r0, [r1, #0]
 8009f20:	4302      	orrs	r2, r0
 8009f22:	600a      	str	r2, [r1, #0]
 8009f24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009f28:	009a      	lsls	r2, r3, #2
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	480c      	ldr	r0, [pc, #48]	; (8009f60 <xTaskRemoveFromEventList+0x7c>)
 8009f2e:	4410      	add	r0, r2
 8009f30:	f7fe fdeb 	bl	8008b0a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009f36:	4b0b      	ldr	r3, [pc, #44]	; (8009f64 <xTaskRemoveFromEventList+0x80>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d908      	bls.n	8009f52 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8009f40:	2001      	movs	r0, #1
 8009f42:	4b09      	ldr	r3, [pc, #36]	; (8009f68 <xTaskRemoveFromEventList+0x84>)
 8009f44:	6018      	str	r0, [r3, #0]
}
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f48:	4629      	mov	r1, r5
 8009f4a:	4808      	ldr	r0, [pc, #32]	; (8009f6c <xTaskRemoveFromEventList+0x88>)
 8009f4c:	f7fe fddd 	bl	8008b0a <vListInsertEnd>
 8009f50:	e7f0      	b.n	8009f34 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8009f52:	2000      	movs	r0, #0
	return xReturn;
 8009f54:	e7f7      	b.n	8009f46 <xTaskRemoveFromEventList+0x62>
 8009f56:	bf00      	nop
 8009f58:	2000090c 	.word	0x2000090c
 8009f5c:	20000914 	.word	0x20000914
 8009f60:	20000870 	.word	0x20000870
 8009f64:	20000864 	.word	0x20000864
 8009f68:	2000098c 	.word	0x2000098c
 8009f6c:	20000948 	.word	0x20000948

08009f70 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f70:	4b03      	ldr	r3, [pc, #12]	; (8009f80 <vTaskInternalSetTimeOutState+0x10>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f76:	4b03      	ldr	r3, [pc, #12]	; (8009f84 <vTaskInternalSetTimeOutState+0x14>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	6043      	str	r3, [r0, #4]
}
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	20000944 	.word	0x20000944
 8009f84:	20000988 	.word	0x20000988

08009f88 <xTaskCheckForTimeOut>:
{
 8009f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8009f8a:	b150      	cbz	r0, 8009fa2 <xTaskCheckForTimeOut+0x1a>
 8009f8c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8009f8e:	b989      	cbnz	r1, 8009fb4 <xTaskCheckForTimeOut+0x2c>
 8009f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	e7fe      	b.n	8009fa0 <xTaskCheckForTimeOut+0x18>
 8009fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	e7fe      	b.n	8009fb2 <xTaskCheckForTimeOut+0x2a>
 8009fb4:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8009fb6:	f000 fef5 	bl	800ada4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009fba:	4b11      	ldr	r3, [pc, #68]	; (800a000 <xTaskCheckForTimeOut+0x78>)
 8009fbc:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fbe:	6868      	ldr	r0, [r5, #4]
 8009fc0:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8009fc2:	6823      	ldr	r3, [r4, #0]
 8009fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fc8:	d016      	beq.n	8009ff8 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fca:	682f      	ldr	r7, [r5, #0]
 8009fcc:	4e0d      	ldr	r6, [pc, #52]	; (800a004 <xTaskCheckForTimeOut+0x7c>)
 8009fce:	6836      	ldr	r6, [r6, #0]
 8009fd0:	42b7      	cmp	r7, r6
 8009fd2:	d001      	beq.n	8009fd8 <xTaskCheckForTimeOut+0x50>
 8009fd4:	4288      	cmp	r0, r1
 8009fd6:	d911      	bls.n	8009ffc <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d803      	bhi.n	8009fe4 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009fe0:	2401      	movs	r4, #1
 8009fe2:	e005      	b.n	8009ff0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009fe8:	4628      	mov	r0, r5
 8009fea:	f7ff ffc1 	bl	8009f70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009fee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009ff0:	f000 fefa 	bl	800ade8 <vPortExitCritical>
}
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8009ff8:	2400      	movs	r4, #0
 8009ffa:	e7f9      	b.n	8009ff0 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8009ffc:	2401      	movs	r4, #1
 8009ffe:	e7f7      	b.n	8009ff0 <xTaskCheckForTimeOut+0x68>
 800a000:	20000988 	.word	0x20000988
 800a004:	20000944 	.word	0x20000944

0800a008 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a008:	4b01      	ldr	r3, [pc, #4]	; (800a010 <vTaskMissedYield+0x8>)
 800a00a:	2201      	movs	r2, #1
 800a00c:	601a      	str	r2, [r3, #0]
}
 800a00e:	4770      	bx	lr
 800a010:	2000098c 	.word	0x2000098c

0800a014 <vTaskGetInfo>:
	{
 800a014:	b570      	push	{r4, r5, r6, lr}
 800a016:	460c      	mov	r4, r1
 800a018:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 800a01a:	4605      	mov	r5, r0
 800a01c:	b1d0      	cbz	r0, 800a054 <vTaskGetInfo+0x40>
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800a01e:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800a020:	f105 0234 	add.w	r2, r5, #52	; 0x34
 800a024:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800a026:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800a028:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800a02a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800a02c:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800a02e:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800a030:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800a032:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800a034:	6162      	str	r2, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800a036:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800a038:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 800a03a:	2b05      	cmp	r3, #5
 800a03c:	d019      	beq.n	800a072 <vTaskGetInfo+0x5e>
			if( pxTCB == pxCurrentTCB )
 800a03e:	4a12      	ldr	r2, [pc, #72]	; (800a088 <vTaskGetInfo+0x74>)
 800a040:	6812      	ldr	r2, [r2, #0]
 800a042:	42aa      	cmp	r2, r5
 800a044:	d009      	beq.n	800a05a <vTaskGetInfo+0x46>
				pxTaskStatus->eCurrentState = eState;
 800a046:	7323      	strb	r3, [r4, #12]
					if( eState == eSuspended )
 800a048:	2b03      	cmp	r3, #3
 800a04a:	d009      	beq.n	800a060 <vTaskGetInfo+0x4c>
		if( xGetFreeStackSpace != pdFALSE )
 800a04c:	b9b6      	cbnz	r6, 800a07c <vTaskGetInfo+0x68>
			pxTaskStatus->usStackHighWaterMark = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	8423      	strh	r3, [r4, #32]
	}
 800a052:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
 800a054:	4a0c      	ldr	r2, [pc, #48]	; (800a088 <vTaskGetInfo+0x74>)
 800a056:	6815      	ldr	r5, [r2, #0]
 800a058:	e7e1      	b.n	800a01e <vTaskGetInfo+0xa>
				pxTaskStatus->eCurrentState = eRunning;
 800a05a:	2300      	movs	r3, #0
 800a05c:	7323      	strb	r3, [r4, #12]
 800a05e:	e7f5      	b.n	800a04c <vTaskGetInfo+0x38>
						vTaskSuspendAll();
 800a060:	f7ff fcac 	bl	80099bc <vTaskSuspendAll>
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a064:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a066:	b10b      	cbz	r3, 800a06c <vTaskGetInfo+0x58>
								pxTaskStatus->eCurrentState = eBlocked;
 800a068:	2302      	movs	r3, #2
 800a06a:	7323      	strb	r3, [r4, #12]
						( void ) xTaskResumeAll();
 800a06c:	f7ff fd40 	bl	8009af0 <xTaskResumeAll>
 800a070:	e7ec      	b.n	800a04c <vTaskGetInfo+0x38>
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800a072:	4628      	mov	r0, r5
 800a074:	f7ff fc0c 	bl	8009890 <eTaskGetState>
 800a078:	7320      	strb	r0, [r4, #12]
 800a07a:	e7e7      	b.n	800a04c <vTaskGetInfo+0x38>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800a07c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800a07e:	f7ff f9ec 	bl	800945a <prvTaskCheckFreeStackSpace>
 800a082:	8420      	strh	r0, [r4, #32]
 800a084:	e7e5      	b.n	800a052 <vTaskGetInfo+0x3e>
 800a086:	bf00      	nop
 800a088:	20000864 	.word	0x20000864

0800a08c <prvListTasksWithinSingleList>:
	{
 800a08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800a090:	680b      	ldr	r3, [r1, #0]
 800a092:	b33b      	cbz	r3, 800a0e4 <prvListTasksWithinSingleList+0x58>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a094:	684b      	ldr	r3, [r1, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	604b      	str	r3, [r1, #4]
 800a09a:	f101 0908 	add.w	r9, r1, #8
 800a09e:	454b      	cmp	r3, r9
 800a0a0:	d007      	beq.n	800a0b2 <prvListTasksWithinSingleList+0x26>
 800a0a2:	4690      	mov	r8, r2
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	4607      	mov	r7, r0
 800a0a8:	684b      	ldr	r3, [r1, #4]
 800a0aa:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	UBaseType_t uxTask = 0;
 800a0ae:	2500      	movs	r5, #0
 800a0b0:	e010      	b.n	800a0d4 <prvListTasksWithinSingleList+0x48>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	604b      	str	r3, [r1, #4]
 800a0b6:	e7f4      	b.n	800a0a2 <prvListTasksWithinSingleList+0x16>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0b8:	6863      	ldr	r3, [r4, #4]
 800a0ba:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800a0bc:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800a0c0:	0099      	lsls	r1, r3, #2
 800a0c2:	4643      	mov	r3, r8
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	4439      	add	r1, r7
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	f7ff ffa3 	bl	800a014 <vTaskGetInfo>
				uxTask++;
 800a0ce:	3501      	adds	r5, #1
			} while( pxNextTCB != pxFirstTCB );
 800a0d0:	45b2      	cmp	sl, r6
 800a0d2:	d008      	beq.n	800a0e6 <prvListTasksWithinSingleList+0x5a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0d4:	6863      	ldr	r3, [r4, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	6063      	str	r3, [r4, #4]
 800a0da:	4599      	cmp	r9, r3
 800a0dc:	d1ec      	bne.n	800a0b8 <prvListTasksWithinSingleList+0x2c>
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	6063      	str	r3, [r4, #4]
 800a0e2:	e7e9      	b.n	800a0b8 <prvListTasksWithinSingleList+0x2c>
	UBaseType_t uxTask = 0;
 800a0e4:	2500      	movs	r5, #0
	}
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a0ec <uxTaskGetSystemState>:
	{
 800a0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ee:	4607      	mov	r7, r0
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	4616      	mov	r6, r2
		vTaskSuspendAll();
 800a0f4:	f7ff fc62 	bl	80099bc <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800a0f8:	4b22      	ldr	r3, [pc, #136]	; (800a184 <uxTaskGetSystemState+0x98>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	42a3      	cmp	r3, r4
 800a0fe:	d83c      	bhi.n	800a17a <uxTaskGetSystemState+0x8e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800a100:	2507      	movs	r5, #7
 800a102:	2400      	movs	r4, #0
					uxQueue--;
 800a104:	3d01      	subs	r5, #1
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800a106:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800a10a:	0098      	lsls	r0, r3, #2
 800a10c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800a110:	0093      	lsls	r3, r2, #2
 800a112:	2201      	movs	r2, #1
 800a114:	491c      	ldr	r1, [pc, #112]	; (800a188 <uxTaskGetSystemState+0x9c>)
 800a116:	4419      	add	r1, r3
 800a118:	4438      	add	r0, r7
 800a11a:	f7ff ffb7 	bl	800a08c <prvListTasksWithinSingleList>
 800a11e:	4404      	add	r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a120:	2d00      	cmp	r5, #0
 800a122:	d1ef      	bne.n	800a104 <uxTaskGetSystemState+0x18>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800a124:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800a128:	0098      	lsls	r0, r3, #2
 800a12a:	4b18      	ldr	r3, [pc, #96]	; (800a18c <uxTaskGetSystemState+0xa0>)
 800a12c:	6819      	ldr	r1, [r3, #0]
 800a12e:	2202      	movs	r2, #2
 800a130:	4438      	add	r0, r7
 800a132:	f7ff ffab 	bl	800a08c <prvListTasksWithinSingleList>
 800a136:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800a138:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800a13c:	0098      	lsls	r0, r3, #2
 800a13e:	4b14      	ldr	r3, [pc, #80]	; (800a190 <uxTaskGetSystemState+0xa4>)
 800a140:	6819      	ldr	r1, [r3, #0]
 800a142:	2202      	movs	r2, #2
 800a144:	4438      	add	r0, r7
 800a146:	f7ff ffa1 	bl	800a08c <prvListTasksWithinSingleList>
 800a14a:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800a14c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800a150:	0098      	lsls	r0, r3, #2
 800a152:	2204      	movs	r2, #4
 800a154:	490f      	ldr	r1, [pc, #60]	; (800a194 <uxTaskGetSystemState+0xa8>)
 800a156:	4438      	add	r0, r7
 800a158:	f7ff ff98 	bl	800a08c <prvListTasksWithinSingleList>
 800a15c:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800a15e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800a162:	0098      	lsls	r0, r3, #2
 800a164:	2203      	movs	r2, #3
 800a166:	490c      	ldr	r1, [pc, #48]	; (800a198 <uxTaskGetSystemState+0xac>)
 800a168:	4438      	add	r0, r7
 800a16a:	f7ff ff8f 	bl	800a08c <prvListTasksWithinSingleList>
 800a16e:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 800a170:	b126      	cbz	r6, 800a17c <uxTaskGetSystemState+0x90>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a172:	4b0a      	ldr	r3, [pc, #40]	; (800a19c <uxTaskGetSystemState+0xb0>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	6033      	str	r3, [r6, #0]
 800a178:	e000      	b.n	800a17c <uxTaskGetSystemState+0x90>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800a17a:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 800a17c:	f7ff fcb8 	bl	8009af0 <xTaskResumeAll>
	}
 800a180:	4620      	mov	r0, r4
 800a182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a184:	20000900 	.word	0x20000900
 800a188:	20000870 	.word	0x20000870
 800a18c:	20000868 	.word	0x20000868
 800a190:	2000086c 	.word	0x2000086c
 800a194:	20000974 	.word	0x20000974
 800a198:	20000960 	.word	0x20000960
 800a19c:	20003434 	.word	0x20003434

0800a1a0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800a1a0:	4b01      	ldr	r3, [pc, #4]	; (800a1a8 <xTaskGetCurrentTaskHandle+0x8>)
 800a1a2:	6818      	ldr	r0, [r3, #0]
	}
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	20000864 	.word	0x20000864

0800a1ac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a1ac:	4b05      	ldr	r3, [pc, #20]	; (800a1c4 <xTaskGetSchedulerState+0x18>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	b133      	cbz	r3, 800a1c0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1b2:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <xTaskGetSchedulerState+0x1c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	b10b      	cbz	r3, 800a1bc <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800a1b8:	2000      	movs	r0, #0
	}
 800a1ba:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800a1bc:	2002      	movs	r0, #2
 800a1be:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1c0:	2001      	movs	r0, #1
 800a1c2:	4770      	bx	lr
 800a1c4:	2000095c 	.word	0x2000095c
 800a1c8:	2000090c 	.word	0x2000090c

0800a1cc <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d050      	beq.n	800a272 <xTaskPriorityInherit+0xa6>
	{
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a1d4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800a1d6:	4928      	ldr	r1, [pc, #160]	; (800a278 <xTaskPriorityInherit+0xac>)
 800a1d8:	6809      	ldr	r1, [r1, #0]
 800a1da:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800a1dc:	428a      	cmp	r2, r1
 800a1de:	d23e      	bcs.n	800a25e <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1e0:	6981      	ldr	r1, [r0, #24]
 800a1e2:	2900      	cmp	r1, #0
 800a1e4:	db05      	blt.n	800a1f2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1e6:	4924      	ldr	r1, [pc, #144]	; (800a278 <xTaskPriorityInherit+0xac>)
 800a1e8:	6809      	ldr	r1, [r1, #0]
 800a1ea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800a1ec:	f1c1 0107 	rsb	r1, r1, #7
 800a1f0:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a1f2:	6960      	ldr	r0, [r4, #20]
 800a1f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a1f8:	0091      	lsls	r1, r2, #2
 800a1fa:	4a20      	ldr	r2, [pc, #128]	; (800a27c <xTaskPriorityInherit+0xb0>)
 800a1fc:	440a      	add	r2, r1
 800a1fe:	4290      	cmp	r0, r2
 800a200:	d005      	beq.n	800a20e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a202:	4a1d      	ldr	r2, [pc, #116]	; (800a278 <xTaskPriorityInherit+0xac>)
 800a204:	6812      	ldr	r2, [r2, #0]
 800a206:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a208:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800a20a:	2001      	movs	r0, #1
	}
 800a20c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a20e:	1d25      	adds	r5, r4, #4
 800a210:	4628      	mov	r0, r5
 800a212:	f7fe fca0 	bl	8008b56 <uxListRemove>
 800a216:	b968      	cbnz	r0, 800a234 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a218:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a21a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a21e:	008a      	lsls	r2, r1, #2
 800a220:	4916      	ldr	r1, [pc, #88]	; (800a27c <xTaskPriorityInherit+0xb0>)
 800a222:	588a      	ldr	r2, [r1, r2]
 800a224:	b932      	cbnz	r2, 800a234 <xTaskPriorityInherit+0x68>
 800a226:	2201      	movs	r2, #1
 800a228:	409a      	lsls	r2, r3
 800a22a:	4915      	ldr	r1, [pc, #84]	; (800a280 <xTaskPriorityInherit+0xb4>)
 800a22c:	680b      	ldr	r3, [r1, #0]
 800a22e:	ea23 0302 	bic.w	r3, r3, r2
 800a232:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a234:	4b10      	ldr	r3, [pc, #64]	; (800a278 <xTaskPriorityInherit+0xac>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a23c:	2401      	movs	r4, #1
 800a23e:	fa04 f203 	lsl.w	r2, r4, r3
 800a242:	490f      	ldr	r1, [pc, #60]	; (800a280 <xTaskPriorityInherit+0xb4>)
 800a244:	6808      	ldr	r0, [r1, #0]
 800a246:	4302      	orrs	r2, r0
 800a248:	600a      	str	r2, [r1, #0]
 800a24a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a24e:	009a      	lsls	r2, r3, #2
 800a250:	4629      	mov	r1, r5
 800a252:	480a      	ldr	r0, [pc, #40]	; (800a27c <xTaskPriorityInherit+0xb0>)
 800a254:	4410      	add	r0, r2
 800a256:	f7fe fc58 	bl	8008b0a <vListInsertEnd>
				xReturn = pdTRUE;
 800a25a:	4620      	mov	r0, r4
 800a25c:	e7d6      	b.n	800a20c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a25e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800a260:	4b05      	ldr	r3, [pc, #20]	; (800a278 <xTaskPriorityInherit+0xac>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a266:	429a      	cmp	r2, r3
 800a268:	d201      	bcs.n	800a26e <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
 800a26a:	2001      	movs	r0, #1
		return xReturn;
 800a26c:	e7ce      	b.n	800a20c <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 800a26e:	2000      	movs	r0, #0
 800a270:	e7cc      	b.n	800a20c <xTaskPriorityInherit+0x40>
 800a272:	2000      	movs	r0, #0
	}
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	20000864 	.word	0x20000864
 800a27c:	20000870 	.word	0x20000870
 800a280:	20000914 	.word	0x20000914

0800a284 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800a284:	2800      	cmp	r0, #0
 800a286:	d049      	beq.n	800a31c <xTaskPriorityDisinherit+0x98>
	{
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800a28c:	4a26      	ldr	r2, [pc, #152]	; (800a328 <xTaskPriorityDisinherit+0xa4>)
 800a28e:	6812      	ldr	r2, [r2, #0]
 800a290:	4282      	cmp	r2, r0
 800a292:	d008      	beq.n	800a2a6 <xTaskPriorityDisinherit+0x22>
 800a294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a298:	f383 8811 	msr	BASEPRI, r3
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	e7fe      	b.n	800a2a4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2a6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800a2a8:	b942      	cbnz	r2, 800a2bc <xTaskPriorityDisinherit+0x38>
 800a2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	e7fe      	b.n	800a2ba <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800a2bc:	3a01      	subs	r2, #1
 800a2be:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2c0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800a2c2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a2c4:	4288      	cmp	r0, r1
 800a2c6:	d02b      	beq.n	800a320 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2c8:	bb62      	cbnz	r2, 800a324 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2ca:	1d25      	adds	r5, r4, #4
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	f7fe fc42 	bl	8008b56 <uxListRemove>
 800a2d2:	b970      	cbnz	r0, 800a2f2 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a2d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a2d6:	2314      	movs	r3, #20
 800a2d8:	fb03 f302 	mul.w	r3, r3, r2
 800a2dc:	4913      	ldr	r1, [pc, #76]	; (800a32c <xTaskPriorityDisinherit+0xa8>)
 800a2de:	58cb      	ldr	r3, [r1, r3]
 800a2e0:	b93b      	cbnz	r3, 800a2f2 <xTaskPriorityDisinherit+0x6e>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	fa03 f202 	lsl.w	r2, r3, r2
 800a2e8:	4911      	ldr	r1, [pc, #68]	; (800a330 <xTaskPriorityDisinherit+0xac>)
 800a2ea:	680b      	ldr	r3, [r1, #0]
 800a2ec:	ea23 0302 	bic.w	r3, r3, r2
 800a2f0:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a2f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a2f4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2f6:	f1c3 0207 	rsb	r2, r3, #7
 800a2fa:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a2fc:	2401      	movs	r4, #1
 800a2fe:	fa04 f203 	lsl.w	r2, r4, r3
 800a302:	490b      	ldr	r1, [pc, #44]	; (800a330 <xTaskPriorityDisinherit+0xac>)
 800a304:	6808      	ldr	r0, [r1, #0]
 800a306:	4302      	orrs	r2, r0
 800a308:	600a      	str	r2, [r1, #0]
 800a30a:	4629      	mov	r1, r5
 800a30c:	4a07      	ldr	r2, [pc, #28]	; (800a32c <xTaskPriorityDisinherit+0xa8>)
 800a30e:	2014      	movs	r0, #20
 800a310:	fb00 2003 	mla	r0, r0, r3, r2
 800a314:	f7fe fbf9 	bl	8008b0a <vListInsertEnd>
					xReturn = pdTRUE;
 800a318:	4620      	mov	r0, r4
	}
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800a31c:	2000      	movs	r0, #0
	}
 800a31e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800a320:	2000      	movs	r0, #0
 800a322:	e7fa      	b.n	800a31a <xTaskPriorityDisinherit+0x96>
 800a324:	2000      	movs	r0, #0
		return xReturn;
 800a326:	e7f8      	b.n	800a31a <xTaskPriorityDisinherit+0x96>
 800a328:	20000864 	.word	0x20000864
 800a32c:	20000870 	.word	0x20000870
 800a330:	20000914 	.word	0x20000914

0800a334 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800a334:	2800      	cmp	r0, #0
 800a336:	d055      	beq.n	800a3e4 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
 800a338:	b538      	push	{r3, r4, r5, lr}
 800a33a:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800a33c:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800a33e:	b940      	cbnz	r0, 800a352 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800a340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a344:	f383 8811 	msr	BASEPRI, r3
 800a348:	f3bf 8f6f 	isb	sy
 800a34c:	f3bf 8f4f 	dsb	sy
 800a350:	e7fe      	b.n	800a350 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a352:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a354:	428a      	cmp	r2, r1
 800a356:	d200      	bcs.n	800a35a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a358:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a35a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a35c:	4291      	cmp	r1, r2
 800a35e:	d001      	beq.n	800a364 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a360:	2801      	cmp	r0, #1
 800a362:	d000      	beq.n	800a366 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800a364:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800a366:	4820      	ldr	r0, [pc, #128]	; (800a3e8 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 800a368:	6800      	ldr	r0, [r0, #0]
 800a36a:	4298      	cmp	r0, r3
 800a36c:	d108      	bne.n	800a380 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	e7fe      	b.n	800a37e <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 800a380:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a382:	6998      	ldr	r0, [r3, #24]
 800a384:	2800      	cmp	r0, #0
 800a386:	db02      	blt.n	800a38e <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a388:	f1c2 0207 	rsb	r2, r2, #7
 800a38c:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a38e:	695a      	ldr	r2, [r3, #20]
 800a390:	4816      	ldr	r0, [pc, #88]	; (800a3ec <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800a392:	2414      	movs	r4, #20
 800a394:	fb04 0101 	mla	r1, r4, r1, r0
 800a398:	428a      	cmp	r2, r1
 800a39a:	d1e3      	bne.n	800a364 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800a39c:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a39e:	1d1d      	adds	r5, r3, #4
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	f7fe fbd8 	bl	8008b56 <uxListRemove>
 800a3a6:	b970      	cbnz	r0, 800a3c6 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a3a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a3aa:	2314      	movs	r3, #20
 800a3ac:	fb03 f302 	mul.w	r3, r3, r2
 800a3b0:	490e      	ldr	r1, [pc, #56]	; (800a3ec <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800a3b2:	58cb      	ldr	r3, [r1, r3]
 800a3b4:	b93b      	cbnz	r3, 800a3c6 <vTaskPriorityDisinheritAfterTimeout+0x92>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	fa03 f202 	lsl.w	r2, r3, r2
 800a3bc:	490c      	ldr	r1, [pc, #48]	; (800a3f0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800a3be:	680b      	ldr	r3, [r1, #0]
 800a3c0:	ea23 0302 	bic.w	r3, r3, r2
 800a3c4:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 800a3c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	4093      	lsls	r3, r2
 800a3cc:	4908      	ldr	r1, [pc, #32]	; (800a3f0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800a3ce:	6808      	ldr	r0, [r1, #0]
 800a3d0:	4303      	orrs	r3, r0
 800a3d2:	600b      	str	r3, [r1, #0]
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	4b05      	ldr	r3, [pc, #20]	; (800a3ec <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800a3d8:	2014      	movs	r0, #20
 800a3da:	fb00 3002 	mla	r0, r0, r2, r3
 800a3de:	f7fe fb94 	bl	8008b0a <vListInsertEnd>
	}
 800a3e2:	e7bf      	b.n	800a364 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	20000864 	.word	0x20000864
 800a3ec:	20000870 	.word	0x20000870
 800a3f0:	20000914 	.word	0x20000914

0800a3f4 <vTaskGetRunTimeStats>:
	{
 800a3f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3f8:	b083      	sub	sp, #12
 800a3fa:	4607      	mov	r7, r0
		*pcWriteBuffer = ( char ) 0x00;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	7003      	strb	r3, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800a400:	4b1e      	ldr	r3, [pc, #120]	; (800a47c <vTaskGetRunTimeStats+0x88>)
 800a402:	681c      	ldr	r4, [r3, #0]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800a40a:	0098      	lsls	r0, r3, #2
 800a40c:	f000 fe80 	bl	800b110 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 800a410:	b178      	cbz	r0, 800a432 <vTaskGetRunTimeStats+0x3e>
 800a412:	4680      	mov	r8, r0
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800a414:	aa01      	add	r2, sp, #4
 800a416:	4621      	mov	r1, r4
 800a418:	f7ff fe68 	bl	800a0ec <uxTaskGetSystemState>
 800a41c:	4681      	mov	r9, r0
			ulTotalTime /= 100UL;
 800a41e:	9b01      	ldr	r3, [sp, #4]
 800a420:	4a17      	ldr	r2, [pc, #92]	; (800a480 <vTaskGetRunTimeStats+0x8c>)
 800a422:	fba2 2303 	umull	r2, r3, r2, r3
 800a426:	095b      	lsrs	r3, r3, #5
 800a428:	9301      	str	r3, [sp, #4]
			if( ulTotalTime > 0UL )
 800a42a:	bb2b      	cbnz	r3, 800a478 <vTaskGetRunTimeStats+0x84>
			vPortFree( pxTaskStatusArray );
 800a42c:	4640      	mov	r0, r8
 800a42e:	f000 fef3 	bl	800b218 <vPortFree>
	}
 800a432:	b003      	add	sp, #12
 800a434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800a438:	69a2      	ldr	r2, [r4, #24]
 800a43a:	4912      	ldr	r1, [pc, #72]	; (800a484 <vTaskGetRunTimeStats+0x90>)
 800a43c:	f001 fc34 	bl	800bca8 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800a440:	4638      	mov	r0, r7
 800a442:	f7f5 fecd 	bl	80001e0 <strlen>
 800a446:	4407      	add	r7, r0
				for( x = 0; x < uxArraySize; x++ )
 800a448:	3501      	adds	r5, #1
 800a44a:	454d      	cmp	r5, r9
 800a44c:	d2ee      	bcs.n	800a42c <vTaskGetRunTimeStats+0x38>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800a44e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800a452:	009c      	lsls	r4, r3, #2
 800a454:	4444      	add	r4, r8
 800a456:	69a6      	ldr	r6, [r4, #24]
 800a458:	9b01      	ldr	r3, [sp, #4]
 800a45a:	fbb6 f6f3 	udiv	r6, r6, r3
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800a45e:	6861      	ldr	r1, [r4, #4]
 800a460:	4638      	mov	r0, r7
 800a462:	f7ff f997 	bl	8009794 <prvWriteNameToBuffer>
 800a466:	4607      	mov	r7, r0
					if( ulStatsAsPercentage > 0UL )
 800a468:	2e00      	cmp	r6, #0
 800a46a:	d0e5      	beq.n	800a438 <vTaskGetRunTimeStats+0x44>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800a46c:	4633      	mov	r3, r6
 800a46e:	69a2      	ldr	r2, [r4, #24]
 800a470:	4905      	ldr	r1, [pc, #20]	; (800a488 <vTaskGetRunTimeStats+0x94>)
 800a472:	f001 fc19 	bl	800bca8 <siprintf>
 800a476:	e7e3      	b.n	800a440 <vTaskGetRunTimeStats+0x4c>
				for( x = 0; x < uxArraySize; x++ )
 800a478:	2500      	movs	r5, #0
 800a47a:	e7e6      	b.n	800a44a <vTaskGetRunTimeStats+0x56>
 800a47c:	20000900 	.word	0x20000900
 800a480:	51eb851f 	.word	0x51eb851f
 800a484:	0800cf68 	.word	0x0800cf68
 800a488:	0800cf5c 	.word	0x0800cf5c

0800a48c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800a48c:	4b05      	ldr	r3, [pc, #20]	; (800a4a4 <pvTaskIncrementMutexHeldCount+0x18>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	b123      	cbz	r3, 800a49c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800a492:	4b04      	ldr	r3, [pc, #16]	; (800a4a4 <pvTaskIncrementMutexHeldCount+0x18>)
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a498:	3301      	adds	r3, #1
 800a49a:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
 800a49c:	4b01      	ldr	r3, [pc, #4]	; (800a4a4 <pvTaskIncrementMutexHeldCount+0x18>)
 800a49e:	6818      	ldr	r0, [r3, #0]
	}
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	20000864 	.word	0x20000864

0800a4a8 <ulTaskNotifyTake>:
	{
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	460c      	mov	r4, r1
		taskENTER_CRITICAL();
 800a4ae:	f000 fc79 	bl	800ada4 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800a4b2:	4b19      	ldr	r3, [pc, #100]	; (800a518 <ulTaskNotifyTake+0x70>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4b8:	b92b      	cbnz	r3, 800a4c6 <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a4ba:	4b17      	ldr	r3, [pc, #92]	; (800a518 <ulTaskNotifyTake+0x70>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 800a4c4:	b9ac      	cbnz	r4, 800a4f2 <ulTaskNotifyTake+0x4a>
		taskEXIT_CRITICAL();
 800a4c6:	f000 fc8f 	bl	800ade8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800a4ca:	f000 fc6b 	bl	800ada4 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800a4ce:	4b12      	ldr	r3, [pc, #72]	; (800a518 <ulTaskNotifyTake+0x70>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if( ulReturn != 0UL )
 800a4d4:	b124      	cbz	r4, 800a4e0 <ulTaskNotifyTake+0x38>
				if( xClearCountOnExit != pdFALSE )
 800a4d6:	b9cd      	cbnz	r5, 800a50c <ulTaskNotifyTake+0x64>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800a4d8:	4b0f      	ldr	r3, [pc, #60]	; (800a518 <ulTaskNotifyTake+0x70>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	1e62      	subs	r2, r4, #1
 800a4de:	65da      	str	r2, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a4e0:	4b0d      	ldr	r3, [pc, #52]	; (800a518 <ulTaskNotifyTake+0x70>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 800a4ea:	f000 fc7d 	bl	800ade8 <vPortExitCritical>
	}
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	bd38      	pop	{r3, r4, r5, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4f2:	4611      	mov	r1, r2
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f7ff f901 	bl	80096fc <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800a4fa:	4b08      	ldr	r3, [pc, #32]	; (800a51c <ulTaskNotifyTake+0x74>)
 800a4fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a500:	601a      	str	r2, [r3, #0]
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	e7dc      	b.n	800a4c6 <ulTaskNotifyTake+0x1e>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800a50c:	4b02      	ldr	r3, [pc, #8]	; (800a518 <ulTaskNotifyTake+0x70>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2200      	movs	r2, #0
 800a512:	65da      	str	r2, [r3, #92]	; 0x5c
 800a514:	e7e4      	b.n	800a4e0 <ulTaskNotifyTake+0x38>
 800a516:	bf00      	nop
 800a518:	20000864 	.word	0x20000864
 800a51c:	e000ed04 	.word	0xe000ed04

0800a520 <xTaskNotifyWait>:
	{
 800a520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a522:	4607      	mov	r7, r0
 800a524:	460d      	mov	r5, r1
 800a526:	4614      	mov	r4, r2
 800a528:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 800a52a:	f000 fc3b 	bl	800ada4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a52e:	4b20      	ldr	r3, [pc, #128]	; (800a5b0 <xTaskNotifyWait+0x90>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d00a      	beq.n	800a552 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a53c:	4b1c      	ldr	r3, [pc, #112]	; (800a5b0 <xTaskNotifyWait+0x90>)
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800a542:	ea20 0007 	bic.w	r0, r0, r7
 800a546:	65d0      	str	r0, [r2, #92]	; 0x5c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 800a550:	b9ce      	cbnz	r6, 800a586 <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 800a552:	f000 fc49 	bl	800ade8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800a556:	f000 fc25 	bl	800ada4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800a55a:	b11c      	cbz	r4, 800a564 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a55c:	4b14      	ldr	r3, [pc, #80]	; (800a5b0 <xTaskNotifyWait+0x90>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a562:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a564:	4b12      	ldr	r3, [pc, #72]	; (800a5b0 <xTaskNotifyWait+0x90>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d016      	beq.n	800a5a0 <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 800a572:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a574:	4b0e      	ldr	r3, [pc, #56]	; (800a5b0 <xTaskNotifyWait+0x90>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 800a57e:	f000 fc33 	bl	800ade8 <vPortExitCritical>
	}
 800a582:	4620      	mov	r0, r4
 800a584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a586:	4611      	mov	r1, r2
 800a588:	4630      	mov	r0, r6
 800a58a:	f7ff f8b7 	bl	80096fc <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800a58e:	4b09      	ldr	r3, [pc, #36]	; (800a5b4 <xTaskNotifyWait+0x94>)
 800a590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a594:	601a      	str	r2, [r3, #0]
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	e7d8      	b.n	800a552 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a5a0:	4b03      	ldr	r3, [pc, #12]	; (800a5b0 <xTaskNotifyWait+0x90>)
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800a5a6:	ea23 0505 	bic.w	r5, r3, r5
 800a5aa:	65d5      	str	r5, [r2, #92]	; 0x5c
				xReturn = pdTRUE;
 800a5ac:	2401      	movs	r4, #1
 800a5ae:	e7e1      	b.n	800a574 <xTaskNotifyWait+0x54>
 800a5b0:	20000864 	.word	0x20000864
 800a5b4:	e000ed04 	.word	0xe000ed04

0800a5b8 <xTaskGenericNotifyFromISR>:
	{
 800a5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5bc:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
 800a5be:	b940      	cbnz	r0, 800a5d2 <xTaskGenericNotifyFromISR+0x1a>
 800a5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	e7fe      	b.n	800a5d0 <xTaskGenericNotifyFromISR+0x18>
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	4699      	mov	r9, r3
 800a5d6:	4690      	mov	r8, r2
 800a5d8:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5da:	f000 fd0d 	bl	800aff8 <vPortValidateInterruptPriority>
	__asm volatile
 800a5de:	f3ef 8711 	mrs	r7, BASEPRI
 800a5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e6:	f383 8811 	msr	BASEPRI, r3
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800a5f2:	f1b9 0f00 	cmp.w	r9, #0
 800a5f6:	d002      	beq.n	800a5fe <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a5f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a5fa:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a5fe:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800a602:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a604:	2202      	movs	r2, #2
 800a606:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			switch( eAction )
 800a60a:	f1b8 0f04 	cmp.w	r8, #4
 800a60e:	d81c      	bhi.n	800a64a <xTaskGenericNotifyFromISR+0x92>
 800a610:	e8df f008 	tbb	[pc, r8]
 800a614:	130e0328 	.word	0x130e0328
 800a618:	16          	.byte	0x16
 800a619:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 800a61a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a61c:	4315      	orrs	r5, r2
 800a61e:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a620:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a622:	2b01      	cmp	r3, #1
 800a624:	d024      	beq.n	800a670 <xTaskGenericNotifyFromISR+0xb8>
	__asm volatile
 800a626:	f387 8811 	msr	BASEPRI, r7
	}
 800a62a:	4628      	mov	r0, r5
 800a62c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 800a630:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a632:	3201      	adds	r2, #1
 800a634:	65e2      	str	r2, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a636:	2501      	movs	r5, #1
					break;
 800a638:	e7f3      	b.n	800a622 <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 800a63a:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a63c:	2501      	movs	r5, #1
					break;
 800a63e:	e7f0      	b.n	800a622 <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a640:	2b02      	cmp	r3, #2
 800a642:	d011      	beq.n	800a668 <xTaskGenericNotifyFromISR+0xb0>
						pxTCB->ulNotifiedValue = ulValue;
 800a644:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a646:	2501      	movs	r5, #1
 800a648:	e7eb      	b.n	800a622 <xTaskGenericNotifyFromISR+0x6a>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a64a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a64c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a650:	d00c      	beq.n	800a66c <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 800a652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	e7fe      	b.n	800a662 <xTaskGenericNotifyFromISR+0xaa>
	BaseType_t xReturn = pdPASS;
 800a664:	2501      	movs	r5, #1
 800a666:	e7dc      	b.n	800a622 <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 800a668:	2500      	movs	r5, #0
 800a66a:	e7da      	b.n	800a622 <xTaskGenericNotifyFromISR+0x6a>
	BaseType_t xReturn = pdPASS;
 800a66c:	2501      	movs	r5, #1
 800a66e:	e7d8      	b.n	800a622 <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a670:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a672:	b143      	cbz	r3, 800a686 <xTaskGenericNotifyFromISR+0xce>
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	e7fe      	b.n	800a684 <xTaskGenericNotifyFromISR+0xcc>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a686:	4b14      	ldr	r3, [pc, #80]	; (800a6d8 <xTaskGenericNotifyFromISR+0x120>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	b9fb      	cbnz	r3, 800a6cc <xTaskGenericNotifyFromISR+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a68c:	f104 0804 	add.w	r8, r4, #4
 800a690:	4640      	mov	r0, r8
 800a692:	f7fe fa60 	bl	8008b56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a696:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a698:	2301      	movs	r3, #1
 800a69a:	4093      	lsls	r3, r2
 800a69c:	490f      	ldr	r1, [pc, #60]	; (800a6dc <xTaskGenericNotifyFromISR+0x124>)
 800a69e:	6808      	ldr	r0, [r1, #0]
 800a6a0:	4303      	orrs	r3, r0
 800a6a2:	600b      	str	r3, [r1, #0]
 800a6a4:	4641      	mov	r1, r8
 800a6a6:	4b0e      	ldr	r3, [pc, #56]	; (800a6e0 <xTaskGenericNotifyFromISR+0x128>)
 800a6a8:	2014      	movs	r0, #20
 800a6aa:	fb00 3002 	mla	r0, r0, r2, r3
 800a6ae:	f7fe fa2c 	bl	8008b0a <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a6b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a6b4:	4b0b      	ldr	r3, [pc, #44]	; (800a6e4 <xTaskGenericNotifyFromISR+0x12c>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d9b3      	bls.n	800a626 <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 800a6be:	b10e      	cbz	r6, 800a6c4 <xTaskGenericNotifyFromISR+0x10c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 800a6c4:	4b08      	ldr	r3, [pc, #32]	; (800a6e8 <xTaskGenericNotifyFromISR+0x130>)
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	601a      	str	r2, [r3, #0]
 800a6ca:	e7ac      	b.n	800a626 <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a6cc:	f104 0118 	add.w	r1, r4, #24
 800a6d0:	4806      	ldr	r0, [pc, #24]	; (800a6ec <xTaskGenericNotifyFromISR+0x134>)
 800a6d2:	f7fe fa1a 	bl	8008b0a <vListInsertEnd>
 800a6d6:	e7ec      	b.n	800a6b2 <xTaskGenericNotifyFromISR+0xfa>
 800a6d8:	2000090c 	.word	0x2000090c
 800a6dc:	20000914 	.word	0x20000914
 800a6e0:	20000870 	.word	0x20000870
 800a6e4:	20000864 	.word	0x20000864
 800a6e8:	2000098c 	.word	0x2000098c
 800a6ec:	20000948 	.word	0x20000948

0800a6f0 <vTaskNotifyGiveFromISR>:
	{
 800a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 800a6f2:	b940      	cbnz	r0, 800a706 <vTaskNotifyGiveFromISR+0x16>
 800a6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f8:	f383 8811 	msr	BASEPRI, r3
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	e7fe      	b.n	800a704 <vTaskNotifyGiveFromISR+0x14>
 800a706:	4604      	mov	r4, r0
 800a708:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a70a:	f000 fc75 	bl	800aff8 <vPortValidateInterruptPriority>
	__asm volatile
 800a70e:	f3ef 8611 	mrs	r6, BASEPRI
 800a712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a722:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800a726:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a728:	2202      	movs	r2, #2
 800a72a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			( pxTCB->ulNotifiedValue )++;
 800a72e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a730:	3201      	adds	r2, #1
 800a732:	65e2      	str	r2, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a734:	2b01      	cmp	r3, #1
 800a736:	d002      	beq.n	800a73e <vTaskNotifyGiveFromISR+0x4e>
	__asm volatile
 800a738:	f386 8811 	msr	BASEPRI, r6
	}
 800a73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a73e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a740:	b143      	cbz	r3, 800a754 <vTaskNotifyGiveFromISR+0x64>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	e7fe      	b.n	800a752 <vTaskNotifyGiveFromISR+0x62>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a754:	4b13      	ldr	r3, [pc, #76]	; (800a7a4 <vTaskNotifyGiveFromISR+0xb4>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	b9f3      	cbnz	r3, 800a798 <vTaskNotifyGiveFromISR+0xa8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a75a:	1d27      	adds	r7, r4, #4
 800a75c:	4638      	mov	r0, r7
 800a75e:	f7fe f9fa 	bl	8008b56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a762:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a764:	2301      	movs	r3, #1
 800a766:	4093      	lsls	r3, r2
 800a768:	490f      	ldr	r1, [pc, #60]	; (800a7a8 <vTaskNotifyGiveFromISR+0xb8>)
 800a76a:	6808      	ldr	r0, [r1, #0]
 800a76c:	4303      	orrs	r3, r0
 800a76e:	600b      	str	r3, [r1, #0]
 800a770:	4639      	mov	r1, r7
 800a772:	4b0e      	ldr	r3, [pc, #56]	; (800a7ac <vTaskNotifyGiveFromISR+0xbc>)
 800a774:	2014      	movs	r0, #20
 800a776:	fb00 3002 	mla	r0, r0, r2, r3
 800a77a:	f7fe f9c6 	bl	8008b0a <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a77e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a780:	4b0b      	ldr	r3, [pc, #44]	; (800a7b0 <vTaskNotifyGiveFromISR+0xc0>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a786:	429a      	cmp	r2, r3
 800a788:	d9d6      	bls.n	800a738 <vTaskNotifyGiveFromISR+0x48>
					if( pxHigherPriorityTaskWoken != NULL )
 800a78a:	b10d      	cbz	r5, 800a790 <vTaskNotifyGiveFromISR+0xa0>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a78c:	2301      	movs	r3, #1
 800a78e:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 800a790:	4b08      	ldr	r3, [pc, #32]	; (800a7b4 <vTaskNotifyGiveFromISR+0xc4>)
 800a792:	2201      	movs	r2, #1
 800a794:	601a      	str	r2, [r3, #0]
 800a796:	e7cf      	b.n	800a738 <vTaskNotifyGiveFromISR+0x48>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a798:	f104 0118 	add.w	r1, r4, #24
 800a79c:	4806      	ldr	r0, [pc, #24]	; (800a7b8 <vTaskNotifyGiveFromISR+0xc8>)
 800a79e:	f7fe f9b4 	bl	8008b0a <vListInsertEnd>
 800a7a2:	e7ec      	b.n	800a77e <vTaskNotifyGiveFromISR+0x8e>
 800a7a4:	2000090c 	.word	0x2000090c
 800a7a8:	20000914 	.word	0x20000914
 800a7ac:	20000870 	.word	0x20000870
 800a7b0:	20000864 	.word	0x20000864
 800a7b4:	2000098c 	.word	0x2000098c
 800a7b8:	20000948 	.word	0x20000948

0800a7bc <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a7bc:	4b06      	ldr	r3, [pc, #24]	; (800a7d8 <prvGetNextExpireTime+0x1c>)
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	6813      	ldr	r3, [r2, #0]
 800a7c2:	b92b      	cbnz	r3, 800a7d0 <prvGetNextExpireTime+0x14>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a7c8:	b923      	cbnz	r3, 800a7d4 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7ca:	68d3      	ldr	r3, [r2, #12]
 800a7cc:	6818      	ldr	r0, [r3, #0]
 800a7ce:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	e7f8      	b.n	800a7c6 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a7d4:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800a7d6:	4770      	bx	lr
 800a7d8:	20000990 	.word	0x20000990

0800a7dc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a7dc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a7de:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7e0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a7e2:	4291      	cmp	r1, r2
 800a7e4:	d80c      	bhi.n	800a800 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7e6:	1ad2      	subs	r2, r2, r3
 800a7e8:	6983      	ldr	r3, [r0, #24]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d301      	bcc.n	800a7f2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	e010      	b.n	800a814 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a7f2:	1d01      	adds	r1, r0, #4
 800a7f4:	4b09      	ldr	r3, [pc, #36]	; (800a81c <prvInsertTimerInActiveList+0x40>)
 800a7f6:	6818      	ldr	r0, [r3, #0]
 800a7f8:	f7fe f993 	bl	8008b22 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	e009      	b.n	800a814 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a800:	429a      	cmp	r2, r3
 800a802:	d201      	bcs.n	800a808 <prvInsertTimerInActiveList+0x2c>
 800a804:	4299      	cmp	r1, r3
 800a806:	d206      	bcs.n	800a816 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a808:	1d01      	adds	r1, r0, #4
 800a80a:	4b05      	ldr	r3, [pc, #20]	; (800a820 <prvInsertTimerInActiveList+0x44>)
 800a80c:	6818      	ldr	r0, [r3, #0]
 800a80e:	f7fe f988 	bl	8008b22 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a812:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800a814:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 800a816:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a818:	e7fc      	b.n	800a814 <prvInsertTimerInActiveList+0x38>
 800a81a:	bf00      	nop
 800a81c:	20000994 	.word	0x20000994
 800a820:	20000990 	.word	0x20000990

0800a824 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a824:	b530      	push	{r4, r5, lr}
 800a826:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a828:	f000 fabc 	bl	800ada4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a82c:	4b11      	ldr	r3, [pc, #68]	; (800a874 <prvCheckForValidListAndQueue+0x50>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	b11b      	cbz	r3, 800a83a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a832:	f000 fad9 	bl	800ade8 <vPortExitCritical>
}
 800a836:	b003      	add	sp, #12
 800a838:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800a83a:	4d0f      	ldr	r5, [pc, #60]	; (800a878 <prvCheckForValidListAndQueue+0x54>)
 800a83c:	4628      	mov	r0, r5
 800a83e:	f7fe f956 	bl	8008aee <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a842:	4c0e      	ldr	r4, [pc, #56]	; (800a87c <prvCheckForValidListAndQueue+0x58>)
 800a844:	4620      	mov	r0, r4
 800a846:	f7fe f952 	bl	8008aee <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a84a:	4b0d      	ldr	r3, [pc, #52]	; (800a880 <prvCheckForValidListAndQueue+0x5c>)
 800a84c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a84e:	4b0d      	ldr	r3, [pc, #52]	; (800a884 <prvCheckForValidListAndQueue+0x60>)
 800a850:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a852:	2300      	movs	r3, #0
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	4b0c      	ldr	r3, [pc, #48]	; (800a888 <prvCheckForValidListAndQueue+0x64>)
 800a858:	4a0c      	ldr	r2, [pc, #48]	; (800a88c <prvCheckForValidListAndQueue+0x68>)
 800a85a:	210c      	movs	r1, #12
 800a85c:	200a      	movs	r0, #10
 800a85e:	f7fe fa8a 	bl	8008d76 <xQueueGenericCreateStatic>
 800a862:	4b04      	ldr	r3, [pc, #16]	; (800a874 <prvCheckForValidListAndQueue+0x50>)
 800a864:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800a866:	2800      	cmp	r0, #0
 800a868:	d0e3      	beq.n	800a832 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a86a:	4909      	ldr	r1, [pc, #36]	; (800a890 <prvCheckForValidListAndQueue+0x6c>)
 800a86c:	f7fe fdb8 	bl	80093e0 <vQueueAddToRegistry>
 800a870:	e7df      	b.n	800a832 <prvCheckForValidListAndQueue+0xe>
 800a872:	bf00      	nop
 800a874:	20000a8c 	.word	0x20000a8c
 800a878:	20000a10 	.word	0x20000a10
 800a87c:	20000a24 	.word	0x20000a24
 800a880:	20000990 	.word	0x20000990
 800a884:	20000994 	.word	0x20000994
 800a888:	20000a3c 	.word	0x20000a3c
 800a88c:	20000998 	.word	0x20000998
 800a890:	0800cf7c 	.word	0x0800cf7c

0800a894 <prvInitialiseNewTimer>:
{
 800a894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a898:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a89a:	b941      	cbnz	r1, 800a8ae <prvInitialiseNewTimer+0x1a>
 800a89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a0:	f383 8811 	msr	BASEPRI, r3
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	e7fe      	b.n	800a8ac <prvInitialiseNewTimer+0x18>
 800a8ae:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
 800a8b0:	b1a4      	cbz	r4, 800a8dc <prvInitialiseNewTimer+0x48>
 800a8b2:	461e      	mov	r6, r3
 800a8b4:	4615      	mov	r5, r2
 800a8b6:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
 800a8b8:	f7ff ffb4 	bl	800a824 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 800a8bc:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a8c0:	61a7      	str	r7, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a8c2:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a8c4:	9b06      	ldr	r3, [sp, #24]
 800a8c6:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a8c8:	1d20      	adds	r0, r4, #4
 800a8ca:	f7fe f91b 	bl	8008b04 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a8ce:	b12d      	cbz	r5, 800a8dc <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a8d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a8d4:	f043 0304 	orr.w	r3, r3, #4
 800a8d8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 800a8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a8e0 <xTimerCreateTimerTask>:
{
 800a8e0:	b510      	push	{r4, lr}
 800a8e2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a8e4:	f7ff ff9e 	bl	800a824 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a8e8:	4b12      	ldr	r3, [pc, #72]	; (800a934 <xTimerCreateTimerTask+0x54>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	b1cb      	cbz	r3, 800a922 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a8ee:	2400      	movs	r4, #0
 800a8f0:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a8f2:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a8f4:	aa07      	add	r2, sp, #28
 800a8f6:	a906      	add	r1, sp, #24
 800a8f8:	a805      	add	r0, sp, #20
 800a8fa:	f7f9 f945 	bl	8003b88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a8fe:	9b05      	ldr	r3, [sp, #20]
 800a900:	9302      	str	r3, [sp, #8]
 800a902:	9b06      	ldr	r3, [sp, #24]
 800a904:	9301      	str	r3, [sp, #4]
 800a906:	2302      	movs	r3, #2
 800a908:	9300      	str	r3, [sp, #0]
 800a90a:	4623      	mov	r3, r4
 800a90c:	9a07      	ldr	r2, [sp, #28]
 800a90e:	490a      	ldr	r1, [pc, #40]	; (800a938 <xTimerCreateTimerTask+0x58>)
 800a910:	480a      	ldr	r0, [pc, #40]	; (800a93c <xTimerCreateTimerTask+0x5c>)
 800a912:	f7fe ff50 	bl	80097b6 <xTaskCreateStatic>
 800a916:	4b0a      	ldr	r3, [pc, #40]	; (800a940 <xTimerCreateTimerTask+0x60>)
 800a918:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a91a:	b110      	cbz	r0, 800a922 <xTimerCreateTimerTask+0x42>
}
 800a91c:	2001      	movs	r0, #1
 800a91e:	b008      	add	sp, #32
 800a920:	bd10      	pop	{r4, pc}
 800a922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a926:	f383 8811 	msr	BASEPRI, r3
 800a92a:	f3bf 8f6f 	isb	sy
 800a92e:	f3bf 8f4f 	dsb	sy
 800a932:	e7fe      	b.n	800a932 <xTimerCreateTimerTask+0x52>
 800a934:	20000a8c 	.word	0x20000a8c
 800a938:	0800cf84 	.word	0x0800cf84
 800a93c:	0800acbd 	.word	0x0800acbd
 800a940:	20000a90 	.word	0x20000a90

0800a944 <xTimerCreate>:
	{
 800a944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a948:	b082      	sub	sp, #8
 800a94a:	4605      	mov	r5, r0
 800a94c:	460e      	mov	r6, r1
 800a94e:	4617      	mov	r7, r2
 800a950:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a952:	202c      	movs	r0, #44	; 0x2c
 800a954:	f000 fbdc 	bl	800b110 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800a958:	4604      	mov	r4, r0
 800a95a:	b158      	cbz	r0, 800a974 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 800a95c:	2300      	movs	r3, #0
 800a95e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a962:	9001      	str	r0, [sp, #4]
 800a964:	9b08      	ldr	r3, [sp, #32]
 800a966:	9300      	str	r3, [sp, #0]
 800a968:	4643      	mov	r3, r8
 800a96a:	463a      	mov	r2, r7
 800a96c:	4631      	mov	r1, r6
 800a96e:	4628      	mov	r0, r5
 800a970:	f7ff ff90 	bl	800a894 <prvInitialiseNewTimer>
	}
 800a974:	4620      	mov	r0, r4
 800a976:	b002      	add	sp, #8
 800a978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a97c <xTimerCreateStatic>:
	{
 800a97c:	b530      	push	{r4, r5, lr}
 800a97e:	b085      	sub	sp, #20
 800a980:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a982:	252c      	movs	r5, #44	; 0x2c
 800a984:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a986:	9d03      	ldr	r5, [sp, #12]
 800a988:	2d2c      	cmp	r5, #44	; 0x2c
 800a98a:	d008      	beq.n	800a99e <xTimerCreateStatic+0x22>
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	e7fe      	b.n	800a99c <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a99e:	9d03      	ldr	r5, [sp, #12]
		configASSERT( pxTimerBuffer );
 800a9a0:	b944      	cbnz	r4, 800a9b4 <xTimerCreateStatic+0x38>
 800a9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	e7fe      	b.n	800a9b2 <xTimerCreateStatic+0x36>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a9b4:	2502      	movs	r5, #2
 800a9b6:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a9ba:	9401      	str	r4, [sp, #4]
 800a9bc:	9d08      	ldr	r5, [sp, #32]
 800a9be:	9500      	str	r5, [sp, #0]
 800a9c0:	f7ff ff68 	bl	800a894 <prvInitialiseNewTimer>
	}
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	b005      	add	sp, #20
 800a9c8:	bd30      	pop	{r4, r5, pc}
	...

0800a9cc <xTimerGenericCommand>:
	configASSERT( xTimer );
 800a9cc:	b1c8      	cbz	r0, 800aa02 <xTimerGenericCommand+0x36>
{
 800a9ce:	b530      	push	{r4, r5, lr}
 800a9d0:	b085      	sub	sp, #20
 800a9d2:	4615      	mov	r5, r2
 800a9d4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 800a9d6:	4a17      	ldr	r2, [pc, #92]	; (800aa34 <xTimerGenericCommand+0x68>)
 800a9d8:	6810      	ldr	r0, [r2, #0]
 800a9da:	b340      	cbz	r0, 800aa2e <xTimerGenericCommand+0x62>
 800a9dc:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800a9de:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a9e0:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a9e2:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a9e4:	2905      	cmp	r1, #5
 800a9e6:	dc1d      	bgt.n	800aa24 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a9e8:	f7ff fbe0 	bl	800a1ac <xTaskGetSchedulerState>
 800a9ec:	2802      	cmp	r0, #2
 800a9ee:	d011      	beq.n	800aa14 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	a901      	add	r1, sp, #4
 800a9f6:	480f      	ldr	r0, [pc, #60]	; (800aa34 <xTimerGenericCommand+0x68>)
 800a9f8:	6800      	ldr	r0, [r0, #0]
 800a9fa:	f7fe fa2d 	bl	8008e58 <xQueueGenericSend>
}
 800a9fe:	b005      	add	sp, #20
 800aa00:	bd30      	pop	{r4, r5, pc}
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	e7fe      	b.n	800aa12 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa14:	2300      	movs	r3, #0
 800aa16:	9a08      	ldr	r2, [sp, #32]
 800aa18:	a901      	add	r1, sp, #4
 800aa1a:	4806      	ldr	r0, [pc, #24]	; (800aa34 <xTimerGenericCommand+0x68>)
 800aa1c:	6800      	ldr	r0, [r0, #0]
 800aa1e:	f7fe fa1b 	bl	8008e58 <xQueueGenericSend>
 800aa22:	e7ec      	b.n	800a9fe <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa24:	2300      	movs	r3, #0
 800aa26:	a901      	add	r1, sp, #4
 800aa28:	f7fe fafa 	bl	8009020 <xQueueGenericSendFromISR>
 800aa2c:	e7e7      	b.n	800a9fe <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 800aa2e:	2000      	movs	r0, #0
	return xReturn;
 800aa30:	e7e5      	b.n	800a9fe <xTimerGenericCommand+0x32>
 800aa32:	bf00      	nop
 800aa34:	20000a8c 	.word	0x20000a8c

0800aa38 <prvSwitchTimerLists>:
{
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa3c:	4b1b      	ldr	r3, [pc, #108]	; (800aaac <prvSwitchTimerLists+0x74>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	b362      	cbz	r2, 800aa9e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa48:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa4a:	1d25      	adds	r5, r4, #4
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	f7fe f882 	bl	8008b56 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa52:	6a23      	ldr	r3, [r4, #32]
 800aa54:	4620      	mov	r0, r4
 800aa56:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa58:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa5c:	f013 0f04 	tst.w	r3, #4
 800aa60:	d0ec      	beq.n	800aa3c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa62:	69a3      	ldr	r3, [r4, #24]
 800aa64:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800aa66:	429e      	cmp	r6, r3
 800aa68:	d207      	bcs.n	800aa7a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa6a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa6c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa6e:	4629      	mov	r1, r5
 800aa70:	4b0e      	ldr	r3, [pc, #56]	; (800aaac <prvSwitchTimerLists+0x74>)
 800aa72:	6818      	ldr	r0, [r3, #0]
 800aa74:	f7fe f855 	bl	8008b22 <vListInsert>
 800aa78:	e7e0      	b.n	800aa3c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	9100      	str	r1, [sp, #0]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	4632      	mov	r2, r6
 800aa82:	4620      	mov	r0, r4
 800aa84:	f7ff ffa2 	bl	800a9cc <xTimerGenericCommand>
				configASSERT( xResult );
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d1d7      	bne.n	800aa3c <prvSwitchTimerLists+0x4>
 800aa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	e7fe      	b.n	800aa9c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800aa9e:	4a04      	ldr	r2, [pc, #16]	; (800aab0 <prvSwitchTimerLists+0x78>)
 800aaa0:	6810      	ldr	r0, [r2, #0]
 800aaa2:	4902      	ldr	r1, [pc, #8]	; (800aaac <prvSwitchTimerLists+0x74>)
 800aaa4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800aaa6:	6013      	str	r3, [r2, #0]
}
 800aaa8:	b002      	add	sp, #8
 800aaaa:	bd70      	pop	{r4, r5, r6, pc}
 800aaac:	20000990 	.word	0x20000990
 800aab0:	20000994 	.word	0x20000994

0800aab4 <prvSampleTimeNow>:
{
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800aab8:	f7fe ff88 	bl	80099cc <xTaskGetTickCount>
 800aabc:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800aabe:	4b07      	ldr	r3, [pc, #28]	; (800aadc <prvSampleTimeNow+0x28>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4283      	cmp	r3, r0
 800aac4:	d805      	bhi.n	800aad2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800aac6:	2300      	movs	r3, #0
 800aac8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800aaca:	4b04      	ldr	r3, [pc, #16]	; (800aadc <prvSampleTimeNow+0x28>)
 800aacc:	601c      	str	r4, [r3, #0]
}
 800aace:	4620      	mov	r0, r4
 800aad0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800aad2:	f7ff ffb1 	bl	800aa38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aad6:	2301      	movs	r3, #1
 800aad8:	602b      	str	r3, [r5, #0]
 800aada:	e7f6      	b.n	800aaca <prvSampleTimeNow+0x16>
 800aadc:	20000a38 	.word	0x20000a38

0800aae0 <prvProcessExpiredTimer>:
{
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	4605      	mov	r5, r0
 800aae6:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae8:	4b17      	ldr	r3, [pc, #92]	; (800ab48 <prvProcessExpiredTimer+0x68>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aaf0:	1d20      	adds	r0, r4, #4
 800aaf2:	f7fe f830 	bl	8008b56 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aaf6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aafa:	f013 0f04 	tst.w	r3, #4
 800aafe:	d108      	bne.n	800ab12 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab00:	f023 0301 	bic.w	r3, r3, #1
 800ab04:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab08:	6a23      	ldr	r3, [r4, #32]
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	4798      	blx	r3
}
 800ab0e:	b002      	add	sp, #8
 800ab10:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab12:	69a1      	ldr	r1, [r4, #24]
 800ab14:	462b      	mov	r3, r5
 800ab16:	4632      	mov	r2, r6
 800ab18:	4429      	add	r1, r5
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f7ff fe5e 	bl	800a7dc <prvInsertTimerInActiveList>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d0f1      	beq.n	800ab08 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab24:	2100      	movs	r1, #0
 800ab26:	9100      	str	r1, [sp, #0]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	462a      	mov	r2, r5
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f7ff ff4d 	bl	800a9cc <xTimerGenericCommand>
			configASSERT( xResult );
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d1e8      	bne.n	800ab08 <prvProcessExpiredTimer+0x28>
 800ab36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	e7fe      	b.n	800ab46 <prvProcessExpiredTimer+0x66>
 800ab48:	20000990 	.word	0x20000990

0800ab4c <prvProcessTimerOrBlockTask>:
{
 800ab4c:	b570      	push	{r4, r5, r6, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	4606      	mov	r6, r0
 800ab52:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800ab54:	f7fe ff32 	bl	80099bc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab58:	a801      	add	r0, sp, #4
 800ab5a:	f7ff ffab 	bl	800aab4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800ab5e:	9b01      	ldr	r3, [sp, #4]
 800ab60:	bb23      	cbnz	r3, 800abac <prvProcessTimerOrBlockTask+0x60>
 800ab62:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab64:	b90c      	cbnz	r4, 800ab6a <prvProcessTimerOrBlockTask+0x1e>
 800ab66:	42b0      	cmp	r0, r6
 800ab68:	d217      	bcs.n	800ab9a <prvProcessTimerOrBlockTask+0x4e>
				if( xListWasEmpty != pdFALSE )
 800ab6a:	b124      	cbz	r4, 800ab76 <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab6c:	4b11      	ldr	r3, [pc, #68]	; (800abb4 <prvProcessTimerOrBlockTask+0x68>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	b9cb      	cbnz	r3, 800aba8 <prvProcessTimerOrBlockTask+0x5c>
 800ab74:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab76:	4622      	mov	r2, r4
 800ab78:	1b71      	subs	r1, r6, r5
 800ab7a:	4b0f      	ldr	r3, [pc, #60]	; (800abb8 <prvProcessTimerOrBlockTask+0x6c>)
 800ab7c:	6818      	ldr	r0, [r3, #0]
 800ab7e:	f7fe fc43 	bl	8009408 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab82:	f7fe ffb5 	bl	8009af0 <xTaskResumeAll>
 800ab86:	b998      	cbnz	r0, 800abb0 <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 800ab88:	4b0c      	ldr	r3, [pc, #48]	; (800abbc <prvProcessTimerOrBlockTask+0x70>)
 800ab8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab8e:	601a      	str	r2, [r3, #0]
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	e00a      	b.n	800abb0 <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
 800ab9a:	f7fe ffa9 	bl	8009af0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ab9e:	4629      	mov	r1, r5
 800aba0:	4630      	mov	r0, r6
 800aba2:	f7ff ff9d 	bl	800aae0 <prvProcessExpiredTimer>
 800aba6:	e003      	b.n	800abb0 <prvProcessTimerOrBlockTask+0x64>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aba8:	2400      	movs	r4, #0
 800abaa:	e7e4      	b.n	800ab76 <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 800abac:	f7fe ffa0 	bl	8009af0 <xTaskResumeAll>
}
 800abb0:	b002      	add	sp, #8
 800abb2:	bd70      	pop	{r4, r5, r6, pc}
 800abb4:	20000994 	.word	0x20000994
 800abb8:	20000a8c 	.word	0x20000a8c
 800abbc:	e000ed04 	.word	0xe000ed04

0800abc0 <prvProcessReceivedCommands>:
{
 800abc0:	b530      	push	{r4, r5, lr}
 800abc2:	b087      	sub	sp, #28
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abc4:	2200      	movs	r2, #0
 800abc6:	a903      	add	r1, sp, #12
 800abc8:	4b3b      	ldr	r3, [pc, #236]	; (800acb8 <prvProcessReceivedCommands+0xf8>)
 800abca:	6818      	ldr	r0, [r3, #0]
 800abcc:	f7fe fa8e 	bl	80090ec <xQueueReceive>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d06f      	beq.n	800acb4 <prvProcessReceivedCommands+0xf4>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	dbf4      	blt.n	800abc4 <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800abda:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800abdc:	6963      	ldr	r3, [r4, #20]
 800abde:	b113      	cbz	r3, 800abe6 <prvProcessReceivedCommands+0x26>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abe0:	1d20      	adds	r0, r4, #4
 800abe2:	f7fd ffb8 	bl	8008b56 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abe6:	a802      	add	r0, sp, #8
 800abe8:	f7ff ff64 	bl	800aab4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800abec:	9b03      	ldr	r3, [sp, #12]
 800abee:	2b09      	cmp	r3, #9
 800abf0:	d8e8      	bhi.n	800abc4 <prvProcessReceivedCommands+0x4>
 800abf2:	e8df f003 	tbb	[pc, r3]
 800abf6:	0505      	.short	0x0505
 800abf8:	51383105 	.word	0x51383105
 800abfc:	38310505 	.word	0x38310505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac00:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ac04:	f043 0301 	orr.w	r3, r3, #1
 800ac08:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac0c:	9904      	ldr	r1, [sp, #16]
 800ac0e:	69a5      	ldr	r5, [r4, #24]
 800ac10:	460b      	mov	r3, r1
 800ac12:	4602      	mov	r2, r0
 800ac14:	4429      	add	r1, r5
 800ac16:	4620      	mov	r0, r4
 800ac18:	f7ff fde0 	bl	800a7dc <prvInsertTimerInActiveList>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d0d1      	beq.n	800abc4 <prvProcessReceivedCommands+0x4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac20:	6a23      	ldr	r3, [r4, #32]
 800ac22:	4620      	mov	r0, r4
 800ac24:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac26:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ac2a:	f013 0f04 	tst.w	r3, #4
 800ac2e:	d0c9      	beq.n	800abc4 <prvProcessReceivedCommands+0x4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac30:	69a2      	ldr	r2, [r4, #24]
 800ac32:	2100      	movs	r1, #0
 800ac34:	9100      	str	r1, [sp, #0]
 800ac36:	460b      	mov	r3, r1
 800ac38:	9804      	ldr	r0, [sp, #16]
 800ac3a:	4402      	add	r2, r0
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f7ff fec5 	bl	800a9cc <xTimerGenericCommand>
							configASSERT( xResult );
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d1be      	bne.n	800abc4 <prvProcessReceivedCommands+0x4>
 800ac46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4a:	f383 8811 	msr	BASEPRI, r3
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	e7fe      	b.n	800ac56 <prvProcessReceivedCommands+0x96>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac58:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ac5c:	f023 0301 	bic.w	r3, r3, #1
 800ac60:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800ac64:	e7ae      	b.n	800abc4 <prvProcessReceivedCommands+0x4>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac66:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ac6a:	f043 0301 	orr.w	r3, r3, #1
 800ac6e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac72:	9904      	ldr	r1, [sp, #16]
 800ac74:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac76:	b131      	cbz	r1, 800ac86 <prvProcessReceivedCommands+0xc6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac78:	4603      	mov	r3, r0
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	4401      	add	r1, r0
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f7ff fdac 	bl	800a7dc <prvInsertTimerInActiveList>
					break;
 800ac84:	e79e      	b.n	800abc4 <prvProcessReceivedCommands+0x4>
 800ac86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8a:	f383 8811 	msr	BASEPRI, r3
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	f3bf 8f4f 	dsb	sy
 800ac96:	e7fe      	b.n	800ac96 <prvProcessReceivedCommands+0xd6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ac98:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ac9c:	f013 0f02 	tst.w	r3, #2
 800aca0:	d004      	beq.n	800acac <prvProcessReceivedCommands+0xec>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aca2:	f023 0301 	bic.w	r3, r3, #1
 800aca6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800acaa:	e78b      	b.n	800abc4 <prvProcessReceivedCommands+0x4>
							vPortFree( pxTimer );
 800acac:	4620      	mov	r0, r4
 800acae:	f000 fab3 	bl	800b218 <vPortFree>
 800acb2:	e787      	b.n	800abc4 <prvProcessReceivedCommands+0x4>
}
 800acb4:	b007      	add	sp, #28
 800acb6:	bd30      	pop	{r4, r5, pc}
 800acb8:	20000a8c 	.word	0x20000a8c

0800acbc <prvTimerTask>:
{
 800acbc:	b500      	push	{lr}
 800acbe:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acc0:	a801      	add	r0, sp, #4
 800acc2:	f7ff fd7b 	bl	800a7bc <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800acc6:	9901      	ldr	r1, [sp, #4]
 800acc8:	f7ff ff40 	bl	800ab4c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800accc:	f7ff ff78 	bl	800abc0 <prvProcessReceivedCommands>
 800acd0:	e7f6      	b.n	800acc0 <prvTimerTask+0x4>
	...

0800acd4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800acd4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acda:	4b0d      	ldr	r3, [pc, #52]	; (800ad10 <prvTaskExitError+0x3c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ace2:	d008      	beq.n	800acf6 <prvTaskExitError+0x22>
 800ace4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	e7fe      	b.n	800acf4 <prvTaskExitError+0x20>
 800acf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfa:	f383 8811 	msr	BASEPRI, r3
 800acfe:	f3bf 8f6f 	isb	sy
 800ad02:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad06:	9b01      	ldr	r3, [sp, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d0fc      	beq.n	800ad06 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad0c:	b002      	add	sp, #8
 800ad0e:	4770      	bx	lr
 800ad10:	2000005c 	.word	0x2000005c

0800ad14 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad14:	4808      	ldr	r0, [pc, #32]	; (800ad38 <prvPortStartFirstTask+0x24>)
 800ad16:	6800      	ldr	r0, [r0, #0]
 800ad18:	6800      	ldr	r0, [r0, #0]
 800ad1a:	f380 8808 	msr	MSP, r0
 800ad1e:	f04f 0000 	mov.w	r0, #0
 800ad22:	f380 8814 	msr	CONTROL, r0
 800ad26:	b662      	cpsie	i
 800ad28:	b661      	cpsie	f
 800ad2a:	f3bf 8f4f 	dsb	sy
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	df00      	svc	0
 800ad34:	bf00      	nop
 800ad36:	0000      	.short	0x0000
 800ad38:	e000ed08 	.word	0xe000ed08

0800ad3c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad3c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad4c <vPortEnableVFP+0x10>
 800ad40:	6801      	ldr	r1, [r0, #0]
 800ad42:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad46:	6001      	str	r1, [r0, #0]
 800ad48:	4770      	bx	lr
 800ad4a:	0000      	.short	0x0000
 800ad4c:	e000ed88 	.word	0xe000ed88

0800ad50 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad54:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad58:	f021 0101 	bic.w	r1, r1, #1
 800ad5c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad60:	4b05      	ldr	r3, [pc, #20]	; (800ad78 <pxPortInitialiseStack+0x28>)
 800ad62:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad66:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad6a:	f06f 0302 	mvn.w	r3, #2
 800ad6e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800ad72:	3844      	subs	r0, #68	; 0x44
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	0800acd5 	.word	0x0800acd5
 800ad7c:	00000000 	.word	0x00000000

0800ad80 <SVC_Handler>:
	__asm volatile (
 800ad80:	4b07      	ldr	r3, [pc, #28]	; (800ada0 <pxCurrentTCBConst2>)
 800ad82:	6819      	ldr	r1, [r3, #0]
 800ad84:	6808      	ldr	r0, [r1, #0]
 800ad86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8a:	f380 8809 	msr	PSP, r0
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f04f 0000 	mov.w	r0, #0
 800ad96:	f380 8811 	msr	BASEPRI, r0
 800ad9a:	4770      	bx	lr
 800ad9c:	f3af 8000 	nop.w

0800ada0 <pxCurrentTCBConst2>:
 800ada0:	20000864 	.word	0x20000864

0800ada4 <vPortEnterCritical>:
 800ada4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800adb4:	4a0a      	ldr	r2, [pc, #40]	; (800ade0 <vPortEnterCritical+0x3c>)
 800adb6:	6813      	ldr	r3, [r2, #0]
 800adb8:	3301      	adds	r3, #1
 800adba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d000      	beq.n	800adc2 <vPortEnterCritical+0x1e>
}
 800adc0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800adc2:	4b08      	ldr	r3, [pc, #32]	; (800ade4 <vPortEnterCritical+0x40>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800adca:	d0f9      	beq.n	800adc0 <vPortEnterCritical+0x1c>
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	e7fe      	b.n	800addc <vPortEnterCritical+0x38>
 800adde:	bf00      	nop
 800ade0:	2000005c 	.word	0x2000005c
 800ade4:	e000ed04 	.word	0xe000ed04

0800ade8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800ade8:	4b09      	ldr	r3, [pc, #36]	; (800ae10 <vPortExitCritical+0x28>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	b943      	cbnz	r3, 800ae00 <vPortExitCritical+0x18>
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	e7fe      	b.n	800adfe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800ae00:	3b01      	subs	r3, #1
 800ae02:	4a03      	ldr	r2, [pc, #12]	; (800ae10 <vPortExitCritical+0x28>)
 800ae04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae06:	b90b      	cbnz	r3, 800ae0c <vPortExitCritical+0x24>
	__asm volatile
 800ae08:	f383 8811 	msr	BASEPRI, r3
}
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	2000005c 	.word	0x2000005c
	...

0800ae20 <PendSV_Handler>:
	__asm volatile
 800ae20:	f3ef 8009 	mrs	r0, PSP
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	4b15      	ldr	r3, [pc, #84]	; (800ae80 <pxCurrentTCBConst>)
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	f01e 0f10 	tst.w	lr, #16
 800ae30:	bf08      	it	eq
 800ae32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae3a:	6010      	str	r0, [r2, #0]
 800ae3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ae44:	f380 8811 	msr	BASEPRI, r0
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f7fe ff40 	bl	8009cd4 <vTaskSwitchContext>
 800ae54:	f04f 0000 	mov.w	r0, #0
 800ae58:	f380 8811 	msr	BASEPRI, r0
 800ae5c:	bc09      	pop	{r0, r3}
 800ae5e:	6819      	ldr	r1, [r3, #0]
 800ae60:	6808      	ldr	r0, [r1, #0]
 800ae62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae66:	f01e 0f10 	tst.w	lr, #16
 800ae6a:	bf08      	it	eq
 800ae6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae70:	f380 8809 	msr	PSP, r0
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	f3af 8000 	nop.w

0800ae80 <pxCurrentTCBConst>:
 800ae80:	20000864 	.word	0x20000864

0800ae84 <SysTick_Handler>:
{
 800ae84:	b508      	push	{r3, lr}
	__asm volatile
 800ae86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8a:	f383 8811 	msr	BASEPRI, r3
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800ae96:	f7fe fd9f 	bl	80099d8 <xTaskIncrementTick>
 800ae9a:	b118      	cbz	r0, 800aea4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae9c:	4b03      	ldr	r3, [pc, #12]	; (800aeac <SysTick_Handler+0x28>)
 800ae9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aea2:	601a      	str	r2, [r3, #0]
	__asm volatile
 800aea4:	2300      	movs	r3, #0
 800aea6:	f383 8811 	msr	BASEPRI, r3
}
 800aeaa:	bd08      	pop	{r3, pc}
 800aeac:	e000ed04 	.word	0xe000ed04

0800aeb0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aeb0:	4a08      	ldr	r2, [pc, #32]	; (800aed4 <vPortSetupTimerInterrupt+0x24>)
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aeb6:	4908      	ldr	r1, [pc, #32]	; (800aed8 <vPortSetupTimerInterrupt+0x28>)
 800aeb8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aeba:	4b08      	ldr	r3, [pc, #32]	; (800aedc <vPortSetupTimerInterrupt+0x2c>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4908      	ldr	r1, [pc, #32]	; (800aee0 <vPortSetupTimerInterrupt+0x30>)
 800aec0:	fba1 1303 	umull	r1, r3, r1, r3
 800aec4:	099b      	lsrs	r3, r3, #6
 800aec6:	3b01      	subs	r3, #1
 800aec8:	4906      	ldr	r1, [pc, #24]	; (800aee4 <vPortSetupTimerInterrupt+0x34>)
 800aeca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aecc:	2307      	movs	r3, #7
 800aece:	6013      	str	r3, [r2, #0]
}
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	e000e010 	.word	0xe000e010
 800aed8:	e000e018 	.word	0xe000e018
 800aedc:	20000050 	.word	0x20000050
 800aee0:	10624dd3 	.word	0x10624dd3
 800aee4:	e000e014 	.word	0xe000e014

0800aee8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aee8:	4b3a      	ldr	r3, [pc, #232]	; (800afd4 <xPortStartScheduler+0xec>)
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	4b3a      	ldr	r3, [pc, #232]	; (800afd8 <xPortStartScheduler+0xf0>)
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d00d      	beq.n	800af0e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aef2:	4b38      	ldr	r3, [pc, #224]	; (800afd4 <xPortStartScheduler+0xec>)
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	4b39      	ldr	r3, [pc, #228]	; (800afdc <xPortStartScheduler+0xf4>)
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d111      	bne.n	800af20 <xPortStartScheduler+0x38>
	__asm volatile
 800aefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af00:	f383 8811 	msr	BASEPRI, r3
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	e7fe      	b.n	800af0c <xPortStartScheduler+0x24>
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	e7fe      	b.n	800af1e <xPortStartScheduler+0x36>
{
 800af20:	b510      	push	{r4, lr}
 800af22:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af24:	4b2e      	ldr	r3, [pc, #184]	; (800afe0 <xPortStartScheduler+0xf8>)
 800af26:	781a      	ldrb	r2, [r3, #0]
 800af28:	b2d2      	uxtb	r2, r2
 800af2a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af2c:	22ff      	movs	r2, #255	; 0xff
 800af2e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	b2db      	uxtb	r3, r3
 800af34:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af38:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800af3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800af40:	4a28      	ldr	r2, [pc, #160]	; (800afe4 <xPortStartScheduler+0xfc>)
 800af42:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af44:	4b28      	ldr	r3, [pc, #160]	; (800afe8 <xPortStartScheduler+0x100>)
 800af46:	2207      	movs	r2, #7
 800af48:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af4a:	e009      	b.n	800af60 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800af4c:	4a26      	ldr	r2, [pc, #152]	; (800afe8 <xPortStartScheduler+0x100>)
 800af4e:	6813      	ldr	r3, [r2, #0]
 800af50:	3b01      	subs	r3, #1
 800af52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800af54:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800af58:	005b      	lsls	r3, r3, #1
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af60:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800af64:	f013 0f80 	tst.w	r3, #128	; 0x80
 800af68:	d1f0      	bne.n	800af4c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800af6a:	4b1f      	ldr	r3, [pc, #124]	; (800afe8 <xPortStartScheduler+0x100>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b03      	cmp	r3, #3
 800af70:	d008      	beq.n	800af84 <xPortStartScheduler+0x9c>
 800af72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af76:	f383 8811 	msr	BASEPRI, r3
 800af7a:	f3bf 8f6f 	isb	sy
 800af7e:	f3bf 8f4f 	dsb	sy
 800af82:	e7fe      	b.n	800af82 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800af84:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800af86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af8a:	4a17      	ldr	r2, [pc, #92]	; (800afe8 <xPortStartScheduler+0x100>)
 800af8c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800af8e:	9b01      	ldr	r3, [sp, #4]
 800af90:	b2db      	uxtb	r3, r3
 800af92:	4a13      	ldr	r2, [pc, #76]	; (800afe0 <xPortStartScheduler+0xf8>)
 800af94:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800af96:	4b15      	ldr	r3, [pc, #84]	; (800afec <xPortStartScheduler+0x104>)
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800af9e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800afa6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800afa8:	f7ff ff82 	bl	800aeb0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800afac:	2400      	movs	r4, #0
 800afae:	4b10      	ldr	r3, [pc, #64]	; (800aff0 <xPortStartScheduler+0x108>)
 800afb0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800afb2:	f7ff fec3 	bl	800ad3c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800afb6:	4a0f      	ldr	r2, [pc, #60]	; (800aff4 <xPortStartScheduler+0x10c>)
 800afb8:	6813      	ldr	r3, [r2, #0]
 800afba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800afbe:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800afc0:	f7ff fea8 	bl	800ad14 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800afc4:	f7fe fe86 	bl	8009cd4 <vTaskSwitchContext>
	prvTaskExitError();
 800afc8:	f7ff fe84 	bl	800acd4 <prvTaskExitError>
}
 800afcc:	4620      	mov	r0, r4
 800afce:	b002      	add	sp, #8
 800afd0:	bd10      	pop	{r4, pc}
 800afd2:	bf00      	nop
 800afd4:	e000ed00 	.word	0xe000ed00
 800afd8:	410fc271 	.word	0x410fc271
 800afdc:	410fc270 	.word	0x410fc270
 800afe0:	e000e400 	.word	0xe000e400
 800afe4:	20000a94 	.word	0x20000a94
 800afe8:	20000a98 	.word	0x20000a98
 800afec:	e000ed20 	.word	0xe000ed20
 800aff0:	2000005c 	.word	0x2000005c
 800aff4:	e000ef34 	.word	0xe000ef34

0800aff8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aff8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800affc:	2b0f      	cmp	r3, #15
 800affe:	d90f      	bls.n	800b020 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b000:	4a10      	ldr	r2, [pc, #64]	; (800b044 <vPortValidateInterruptPriority+0x4c>)
 800b002:	5c9b      	ldrb	r3, [r3, r2]
 800b004:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b006:	4a10      	ldr	r2, [pc, #64]	; (800b048 <vPortValidateInterruptPriority+0x50>)
 800b008:	7812      	ldrb	r2, [r2, #0]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d908      	bls.n	800b020 <vPortValidateInterruptPriority+0x28>
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	e7fe      	b.n	800b01e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b020:	4b0a      	ldr	r3, [pc, #40]	; (800b04c <vPortValidateInterruptPriority+0x54>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b028:	4a09      	ldr	r2, [pc, #36]	; (800b050 <vPortValidateInterruptPriority+0x58>)
 800b02a:	6812      	ldr	r2, [r2, #0]
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d908      	bls.n	800b042 <vPortValidateInterruptPriority+0x4a>
 800b030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b034:	f383 8811 	msr	BASEPRI, r3
 800b038:	f3bf 8f6f 	isb	sy
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	e7fe      	b.n	800b040 <vPortValidateInterruptPriority+0x48>
	}
 800b042:	4770      	bx	lr
 800b044:	e000e3f0 	.word	0xe000e3f0
 800b048:	20000a94 	.word	0x20000a94
 800b04c:	e000ed0c 	.word	0xe000ed0c
 800b050:	20000a98 	.word	0x20000a98

0800b054 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b054:	4a12      	ldr	r2, [pc, #72]	; (800b0a0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b056:	f012 0f07 	tst.w	r2, #7
 800b05a:	d01e      	beq.n	800b09a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b05c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b05e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b062:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 800b066:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b068:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b06a:	480e      	ldr	r0, [pc, #56]	; (800b0a4 <prvHeapInit+0x50>)
 800b06c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b06e:	2100      	movs	r1, #0
 800b070:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b072:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800b074:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b076:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800b07a:	480b      	ldr	r0, [pc, #44]	; (800b0a8 <prvHeapInit+0x54>)
 800b07c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800b07e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b080:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b082:	1a99      	subs	r1, r3, r2
 800b084:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b086:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b088:	4b08      	ldr	r3, [pc, #32]	; (800b0ac <prvHeapInit+0x58>)
 800b08a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b08c:	4b08      	ldr	r3, [pc, #32]	; (800b0b0 <prvHeapInit+0x5c>)
 800b08e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b090:	4b08      	ldr	r3, [pc, #32]	; (800b0b4 <prvHeapInit+0x60>)
 800b092:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b096:	601a      	str	r2, [r3, #0]
}
 800b098:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b09a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b09e:	e7e4      	b.n	800b06a <prvHeapInit+0x16>
 800b0a0:	20000aa0 	.word	0x20000aa0
 800b0a4:	20002aac 	.word	0x20002aac
 800b0a8:	20000a9c 	.word	0x20000a9c
 800b0ac:	20002aa8 	.word	0x20002aa8
 800b0b0:	20002aa4 	.word	0x20002aa4
 800b0b4:	20002aa0 	.word	0x20002aa0

0800b0b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0b8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b0ba:	4b13      	ldr	r3, [pc, #76]	; (800b108 <prvInsertBlockIntoFreeList+0x50>)
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	4282      	cmp	r2, r0
 800b0c0:	d31b      	bcc.n	800b0fa <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b0c2:	6859      	ldr	r1, [r3, #4]
 800b0c4:	185c      	adds	r4, r3, r1
 800b0c6:	4284      	cmp	r4, r0
 800b0c8:	d103      	bne.n	800b0d2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b0ca:	6840      	ldr	r0, [r0, #4]
 800b0cc:	4401      	add	r1, r0
 800b0ce:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b0d0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b0d2:	6841      	ldr	r1, [r0, #4]
 800b0d4:	1844      	adds	r4, r0, r1
 800b0d6:	42a2      	cmp	r2, r4
 800b0d8:	d113      	bne.n	800b102 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b0da:	4c0c      	ldr	r4, [pc, #48]	; (800b10c <prvInsertBlockIntoFreeList+0x54>)
 800b0dc:	6824      	ldr	r4, [r4, #0]
 800b0de:	42a2      	cmp	r2, r4
 800b0e0:	d00d      	beq.n	800b0fe <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b0e2:	6852      	ldr	r2, [r2, #4]
 800b0e4:	4411      	add	r1, r2
 800b0e6:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	6812      	ldr	r2, [r2, #0]
 800b0ec:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0ee:	4298      	cmp	r0, r3
 800b0f0:	d000      	beq.n	800b0f4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0f2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0f8:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	e7de      	b.n	800b0bc <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b0fe:	6004      	str	r4, [r0, #0]
 800b100:	e7f5      	b.n	800b0ee <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b102:	6002      	str	r2, [r0, #0]
 800b104:	e7f3      	b.n	800b0ee <prvInsertBlockIntoFreeList+0x36>
 800b106:	bf00      	nop
 800b108:	20002aac 	.word	0x20002aac
 800b10c:	20000a9c 	.word	0x20000a9c

0800b110 <pvPortMalloc>:
{
 800b110:	b570      	push	{r4, r5, r6, lr}
 800b112:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b114:	f7fe fc52 	bl	80099bc <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b118:	4b3a      	ldr	r3, [pc, #232]	; (800b204 <pvPortMalloc+0xf4>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	b1bb      	cbz	r3, 800b14e <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b11e:	4b3a      	ldr	r3, [pc, #232]	; (800b208 <pvPortMalloc+0xf8>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	421c      	tst	r4, r3
 800b124:	d163      	bne.n	800b1ee <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 800b126:	b1ac      	cbz	r4, 800b154 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 800b128:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b12a:	f014 0f07 	tst.w	r4, #7
 800b12e:	d011      	beq.n	800b154 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b130:	f024 0407 	bic.w	r4, r4, #7
 800b134:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b136:	f004 0307 	and.w	r3, r4, #7
 800b13a:	b15b      	cbz	r3, 800b154 <pvPortMalloc+0x44>
 800b13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	e7fe      	b.n	800b14c <pvPortMalloc+0x3c>
			prvHeapInit();
 800b14e:	f7ff ff81 	bl	800b054 <prvHeapInit>
 800b152:	e7e4      	b.n	800b11e <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b154:	2c00      	cmp	r4, #0
 800b156:	d04c      	beq.n	800b1f2 <pvPortMalloc+0xe2>
 800b158:	4b2c      	ldr	r3, [pc, #176]	; (800b20c <pvPortMalloc+0xfc>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	42a3      	cmp	r3, r4
 800b15e:	d34a      	bcc.n	800b1f6 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 800b160:	4b2b      	ldr	r3, [pc, #172]	; (800b210 <pvPortMalloc+0x100>)
 800b162:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b164:	e001      	b.n	800b16a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 800b166:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800b168:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b16a:	686a      	ldr	r2, [r5, #4]
 800b16c:	42a2      	cmp	r2, r4
 800b16e:	d202      	bcs.n	800b176 <pvPortMalloc+0x66>
 800b170:	682a      	ldr	r2, [r5, #0]
 800b172:	2a00      	cmp	r2, #0
 800b174:	d1f7      	bne.n	800b166 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 800b176:	4a23      	ldr	r2, [pc, #140]	; (800b204 <pvPortMalloc+0xf4>)
 800b178:	6812      	ldr	r2, [r2, #0]
 800b17a:	42aa      	cmp	r2, r5
 800b17c:	d03d      	beq.n	800b1fa <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b17e:	681e      	ldr	r6, [r3, #0]
 800b180:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b182:	682a      	ldr	r2, [r5, #0]
 800b184:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b186:	686b      	ldr	r3, [r5, #4]
 800b188:	1b1b      	subs	r3, r3, r4
 800b18a:	2b10      	cmp	r3, #16
 800b18c:	d910      	bls.n	800b1b0 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b18e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b190:	f010 0f07 	tst.w	r0, #7
 800b194:	d008      	beq.n	800b1a8 <pvPortMalloc+0x98>
 800b196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19a:	f383 8811 	msr	BASEPRI, r3
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f3bf 8f4f 	dsb	sy
 800b1a6:	e7fe      	b.n	800b1a6 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b1a8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b1aa:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b1ac:	f7ff ff84 	bl	800b0b8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b1b0:	686a      	ldr	r2, [r5, #4]
 800b1b2:	4916      	ldr	r1, [pc, #88]	; (800b20c <pvPortMalloc+0xfc>)
 800b1b4:	680b      	ldr	r3, [r1, #0]
 800b1b6:	1a9b      	subs	r3, r3, r2
 800b1b8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b1ba:	4916      	ldr	r1, [pc, #88]	; (800b214 <pvPortMalloc+0x104>)
 800b1bc:	6809      	ldr	r1, [r1, #0]
 800b1be:	428b      	cmp	r3, r1
 800b1c0:	d201      	bcs.n	800b1c6 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b1c2:	4914      	ldr	r1, [pc, #80]	; (800b214 <pvPortMalloc+0x104>)
 800b1c4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b1c6:	4b10      	ldr	r3, [pc, #64]	; (800b208 <pvPortMalloc+0xf8>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800b1d2:	f7fe fc8d 	bl	8009af0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1d6:	f016 0f07 	tst.w	r6, #7
 800b1da:	d010      	beq.n	800b1fe <pvPortMalloc+0xee>
 800b1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	e7fe      	b.n	800b1ec <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 800b1ee:	2600      	movs	r6, #0
 800b1f0:	e7ef      	b.n	800b1d2 <pvPortMalloc+0xc2>
 800b1f2:	2600      	movs	r6, #0
 800b1f4:	e7ed      	b.n	800b1d2 <pvPortMalloc+0xc2>
 800b1f6:	2600      	movs	r6, #0
 800b1f8:	e7eb      	b.n	800b1d2 <pvPortMalloc+0xc2>
 800b1fa:	2600      	movs	r6, #0
 800b1fc:	e7e9      	b.n	800b1d2 <pvPortMalloc+0xc2>
}
 800b1fe:	4630      	mov	r0, r6
 800b200:	bd70      	pop	{r4, r5, r6, pc}
 800b202:	bf00      	nop
 800b204:	20000a9c 	.word	0x20000a9c
 800b208:	20002aa0 	.word	0x20002aa0
 800b20c:	20002aa4 	.word	0x20002aa4
 800b210:	20002aac 	.word	0x20002aac
 800b214:	20002aa8 	.word	0x20002aa8

0800b218 <vPortFree>:
	if( pv != NULL )
 800b218:	b380      	cbz	r0, 800b27c <vPortFree+0x64>
{
 800b21a:	b538      	push	{r3, r4, r5, lr}
 800b21c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800b21e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b222:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b226:	4916      	ldr	r1, [pc, #88]	; (800b280 <vPortFree+0x68>)
 800b228:	6809      	ldr	r1, [r1, #0]
 800b22a:	420a      	tst	r2, r1
 800b22c:	d108      	bne.n	800b240 <vPortFree+0x28>
 800b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	e7fe      	b.n	800b23e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b240:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800b244:	b140      	cbz	r0, 800b258 <vPortFree+0x40>
 800b246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	e7fe      	b.n	800b256 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b258:	ea22 0201 	bic.w	r2, r2, r1
 800b25c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800b260:	f7fe fbac 	bl	80099bc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b264:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800b268:	4a06      	ldr	r2, [pc, #24]	; (800b284 <vPortFree+0x6c>)
 800b26a:	6813      	ldr	r3, [r2, #0]
 800b26c:	440b      	add	r3, r1
 800b26e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b270:	4628      	mov	r0, r5
 800b272:	f7ff ff21 	bl	800b0b8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800b276:	f7fe fc3b 	bl	8009af0 <xTaskResumeAll>
}
 800b27a:	bd38      	pop	{r3, r4, r5, pc}
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	20002aa0 	.word	0x20002aa0
 800b284:	20002aa4 	.word	0x20002aa4

0800b288 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 800b288:	4603      	mov	r3, r0
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;
 800b28a:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800b28c:	4608      	mov	r0, r1

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800b28e:	e004      	b.n	800b29a <prvGetNumberOfParameters+0x12>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800b290:	b911      	cbnz	r1, 800b298 <prvGetNumberOfParameters+0x10>
			{
				cParameters++;
 800b292:	3001      	adds	r0, #1
 800b294:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800b296:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800b298:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800b29a:	781a      	ldrb	r2, [r3, #0]
 800b29c:	b11a      	cbz	r2, 800b2a6 <prvGetNumberOfParameters+0x1e>
		if( ( *pcCommandString ) == ' ' )
 800b29e:	2a20      	cmp	r2, #32
 800b2a0:	d0f6      	beq.n	800b290 <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	e7f8      	b.n	800b298 <prvGetNumberOfParameters+0x10>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800b2a6:	b901      	cbnz	r1, 800b2aa <prvGetNumberOfParameters+0x22>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800b2a8:	4770      	bx	lr
		cParameters--;
 800b2aa:	3801      	subs	r0, #1
 800b2ac:	b240      	sxtb	r0, r0
 800b2ae:	e7fb      	b.n	800b2a8 <prvGetNumberOfParameters+0x20>

0800b2b0 <prvHelpCommand>:
{
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	460a      	mov	r2, r1
	if( pxCommand == NULL )
 800b2b4:	4b09      	ldr	r3, [pc, #36]	; (800b2dc <prvHelpCommand+0x2c>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	b153      	cbz	r3, 800b2d0 <prvHelpCommand+0x20>
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800b2ba:	4c08      	ldr	r4, [pc, #32]	; (800b2dc <prvHelpCommand+0x2c>)
 800b2bc:	6825      	ldr	r5, [r4, #0]
 800b2be:	682b      	ldr	r3, [r5, #0]
 800b2c0:	6859      	ldr	r1, [r3, #4]
 800b2c2:	f000 fd2b 	bl	800bd1c <strncpy>
	pxCommand = pxCommand->pxNext;
 800b2c6:	686b      	ldr	r3, [r5, #4]
 800b2c8:	6023      	str	r3, [r4, #0]
	if( pxCommand == NULL )
 800b2ca:	b12b      	cbz	r3, 800b2d8 <prvHelpCommand+0x28>
		xReturn = pdTRUE;
 800b2cc:	2001      	movs	r0, #1
}
 800b2ce:	bd38      	pop	{r3, r4, r5, pc}
		pxCommand = &xRegisteredCommands;
 800b2d0:	4b02      	ldr	r3, [pc, #8]	; (800b2dc <prvHelpCommand+0x2c>)
 800b2d2:	4903      	ldr	r1, [pc, #12]	; (800b2e0 <prvHelpCommand+0x30>)
 800b2d4:	6019      	str	r1, [r3, #0]
 800b2d6:	e7f0      	b.n	800b2ba <prvHelpCommand+0xa>
		xReturn = pdFALSE;
 800b2d8:	2000      	movs	r0, #0
 800b2da:	e7f8      	b.n	800b2ce <prvHelpCommand+0x1e>
 800b2dc:	20002ab8 	.word	0x20002ab8
 800b2e0:	20000064 	.word	0x20000064

0800b2e4 <FreeRTOS_CLIRegisterCommand>:
{
 800b2e4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxCommandToRegister );
 800b2e6:	b940      	cbnz	r0, 800b2fa <FreeRTOS_CLIRegisterCommand+0x16>
 800b2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ec:	f383 8811 	msr	BASEPRI, r3
 800b2f0:	f3bf 8f6f 	isb	sy
 800b2f4:	f3bf 8f4f 	dsb	sy
 800b2f8:	e7fe      	b.n	800b2f8 <FreeRTOS_CLIRegisterCommand+0x14>
 800b2fa:	4605      	mov	r5, r0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800b2fc:	2008      	movs	r0, #8
 800b2fe:	f7ff ff07 	bl	800b110 <pvPortMalloc>
	configASSERT( pxNewListItem );
 800b302:	4604      	mov	r4, r0
 800b304:	b940      	cbnz	r0, 800b318 <FreeRTOS_CLIRegisterCommand+0x34>
 800b306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30a:	f383 8811 	msr	BASEPRI, r3
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	f3bf 8f4f 	dsb	sy
 800b316:	e7fe      	b.n	800b316 <FreeRTOS_CLIRegisterCommand+0x32>
		taskENTER_CRITICAL();
 800b318:	f7ff fd44 	bl	800ada4 <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800b31c:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800b31e:	2300      	movs	r3, #0
 800b320:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800b322:	4b04      	ldr	r3, [pc, #16]	; (800b334 <FreeRTOS_CLIRegisterCommand+0x50>)
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800b328:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800b32a:	f7ff fd5d 	bl	800ade8 <vPortExitCritical>
}
 800b32e:	2001      	movs	r0, #1
 800b330:	bd38      	pop	{r3, r4, r5, pc}
 800b332:	bf00      	nop
 800b334:	20000060 	.word	0x20000060

0800b338 <FreeRTOS_CLIProcessCommand>:
{
 800b338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b33c:	4606      	mov	r6, r0
 800b33e:	4689      	mov	r9, r1
 800b340:	4690      	mov	r8, r2
	if( pxCommand == NULL )
 800b342:	4b2a      	ldr	r3, [pc, #168]	; (800b3ec <FreeRTOS_CLIProcessCommand+0xb4>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	b1ab      	cbz	r3, 800b374 <FreeRTOS_CLIProcessCommand+0x3c>
BaseType_t xReturn = pdTRUE;
 800b348:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800b34a:	4b28      	ldr	r3, [pc, #160]	; (800b3ec <FreeRTOS_CLIProcessCommand+0xb4>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	b10b      	cbz	r3, 800b354 <FreeRTOS_CLIProcessCommand+0x1c>
 800b350:	2c00      	cmp	r4, #0
 800b352:	d03b      	beq.n	800b3cc <FreeRTOS_CLIProcessCommand+0x94>
	else if( pxCommand != NULL )
 800b354:	2b00      	cmp	r3, #0
 800b356:	d042      	beq.n	800b3de <FreeRTOS_CLIProcessCommand+0xa6>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	4632      	mov	r2, r6
 800b35e:	4641      	mov	r1, r8
 800b360:	4648      	mov	r0, r9
 800b362:	4798      	blx	r3
		if( xReturn == pdFALSE )
 800b364:	4604      	mov	r4, r0
 800b366:	b910      	cbnz	r0, 800b36e <FreeRTOS_CLIProcessCommand+0x36>
			pxCommand = NULL;
 800b368:	4b20      	ldr	r3, [pc, #128]	; (800b3ec <FreeRTOS_CLIProcessCommand+0xb4>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	601a      	str	r2, [r3, #0]
}
 800b36e:	4620      	mov	r0, r4
 800b370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800b374:	4b1d      	ldr	r3, [pc, #116]	; (800b3ec <FreeRTOS_CLIProcessCommand+0xb4>)
 800b376:	4a1e      	ldr	r2, [pc, #120]	; (800b3f0 <FreeRTOS_CLIProcessCommand+0xb8>)
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	e008      	b.n	800b38e <FreeRTOS_CLIProcessCommand+0x56>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800b37c:	4602      	mov	r2, r0
 800b37e:	4629      	mov	r1, r5
 800b380:	4630      	mov	r0, r6
 800b382:	f000 fcb9 	bl	800bcf8 <strncmp>
 800b386:	b180      	cbz	r0, 800b3aa <FreeRTOS_CLIProcessCommand+0x72>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800b388:	6862      	ldr	r2, [r4, #4]
 800b38a:	4b18      	ldr	r3, [pc, #96]	; (800b3ec <FreeRTOS_CLIProcessCommand+0xb4>)
 800b38c:	601a      	str	r2, [r3, #0]
 800b38e:	4b17      	ldr	r3, [pc, #92]	; (800b3ec <FreeRTOS_CLIProcessCommand+0xb4>)
 800b390:	681c      	ldr	r4, [r3, #0]
 800b392:	b1cc      	cbz	r4, 800b3c8 <FreeRTOS_CLIProcessCommand+0x90>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800b394:	6827      	ldr	r7, [r4, #0]
 800b396:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 800b398:	4628      	mov	r0, r5
 800b39a:	f7f4 ff21 	bl	80001e0 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800b39e:	5c33      	ldrb	r3, [r6, r0]
 800b3a0:	2b20      	cmp	r3, #32
 800b3a2:	d0eb      	beq.n	800b37c <FreeRTOS_CLIProcessCommand+0x44>
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1ef      	bne.n	800b388 <FreeRTOS_CLIProcessCommand+0x50>
 800b3a8:	e7e8      	b.n	800b37c <FreeRTOS_CLIProcessCommand+0x44>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800b3aa:	f997 400c 	ldrsb.w	r4, [r7, #12]
 800b3ae:	2c00      	cmp	r4, #0
 800b3b0:	da01      	bge.n	800b3b6 <FreeRTOS_CLIProcessCommand+0x7e>
BaseType_t xReturn = pdTRUE;
 800b3b2:	2401      	movs	r4, #1
 800b3b4:	e7c9      	b.n	800b34a <FreeRTOS_CLIProcessCommand+0x12>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	f7ff ff66 	bl	800b288 <prvGetNumberOfParameters>
 800b3bc:	4284      	cmp	r4, r0
 800b3be:	d001      	beq.n	800b3c4 <FreeRTOS_CLIProcessCommand+0x8c>
							xReturn = pdFALSE;
 800b3c0:	2400      	movs	r4, #0
 800b3c2:	e7c2      	b.n	800b34a <FreeRTOS_CLIProcessCommand+0x12>
BaseType_t xReturn = pdTRUE;
 800b3c4:	2401      	movs	r4, #1
 800b3c6:	e7c0      	b.n	800b34a <FreeRTOS_CLIProcessCommand+0x12>
 800b3c8:	2401      	movs	r4, #1
 800b3ca:	e7be      	b.n	800b34a <FreeRTOS_CLIProcessCommand+0x12>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800b3cc:	4642      	mov	r2, r8
 800b3ce:	4909      	ldr	r1, [pc, #36]	; (800b3f4 <FreeRTOS_CLIProcessCommand+0xbc>)
 800b3d0:	4648      	mov	r0, r9
 800b3d2:	f000 fca3 	bl	800bd1c <strncpy>
		pxCommand = NULL;
 800b3d6:	4b05      	ldr	r3, [pc, #20]	; (800b3ec <FreeRTOS_CLIProcessCommand+0xb4>)
 800b3d8:	2200      	movs	r2, #0
 800b3da:	601a      	str	r2, [r3, #0]
 800b3dc:	e7c7      	b.n	800b36e <FreeRTOS_CLIProcessCommand+0x36>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800b3de:	4642      	mov	r2, r8
 800b3e0:	4905      	ldr	r1, [pc, #20]	; (800b3f8 <FreeRTOS_CLIProcessCommand+0xc0>)
 800b3e2:	4648      	mov	r0, r9
 800b3e4:	f000 fc9a 	bl	800bd1c <strncpy>
		xReturn = pdFALSE;
 800b3e8:	2400      	movs	r4, #0
	return xReturn;
 800b3ea:	e7c0      	b.n	800b36e <FreeRTOS_CLIProcessCommand+0x36>
 800b3ec:	20002ab4 	.word	0x20002ab4
 800b3f0:	20000064 	.word	0x20000064
 800b3f4:	0800cf8c 	.word	0x0800cf8c
 800b3f8:	0800cfe4 	.word	0x0800cfe4

0800b3fc <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d200      	bcs.n	800b402 <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 800b400:	5488      	strb	r0, [r1, r2]
  }
}
 800b402:	4770      	bx	lr

0800b404 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800b404:	4770      	bx	lr

0800b406 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
 800b406:	2300      	movs	r3, #0
  while (_is_digit(**str)) {
 800b408:	e007      	b.n	800b41a <_atoi+0x14>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800b40a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b40e:	005a      	lsls	r2, r3, #1
 800b410:	1c4b      	adds	r3, r1, #1
 800b412:	6003      	str	r3, [r0, #0]
 800b414:	780b      	ldrb	r3, [r1, #0]
 800b416:	4413      	add	r3, r2
 800b418:	3b30      	subs	r3, #48	; 0x30
  while (_is_digit(**str)) {
 800b41a:	6801      	ldr	r1, [r0, #0]
 800b41c:	780a      	ldrb	r2, [r1, #0]
  return (ch >= '0') && (ch <= '9');
 800b41e:	3a30      	subs	r2, #48	; 0x30
 800b420:	b2d2      	uxtb	r2, r2
  while (_is_digit(**str)) {
 800b422:	2a09      	cmp	r2, #9
 800b424:	d9f1      	bls.n	800b40a <_atoi+0x4>
  }
  return i;
}
 800b426:	4618      	mov	r0, r3
 800b428:	4770      	bx	lr

0800b42a <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800b42a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42e:	b083      	sub	sp, #12
 800b430:	4605      	mov	r5, r0
 800b432:	9101      	str	r1, [sp, #4]
 800b434:	4693      	mov	fp, r2
 800b436:	461e      	mov	r6, r3
 800b438:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800b43c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b43e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800b442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b444:	f013 0f03 	tst.w	r3, #3
 800b448:	d114      	bne.n	800b474 <_out_rev+0x4a>
    for (size_t i = len; i < width; i++) {
 800b44a:	4627      	mov	r7, r4
 800b44c:	e007      	b.n	800b45e <_out_rev+0x34>
      out(' ', buffer, idx++, maxlen);
 800b44e:	f102 0a01 	add.w	sl, r2, #1
 800b452:	4633      	mov	r3, r6
 800b454:	9901      	ldr	r1, [sp, #4]
 800b456:	2020      	movs	r0, #32
 800b458:	47a8      	blx	r5
    for (size_t i = len; i < width; i++) {
 800b45a:	3701      	adds	r7, #1
      out(' ', buffer, idx++, maxlen);
 800b45c:	4652      	mov	r2, sl
    for (size_t i = len; i < width; i++) {
 800b45e:	4547      	cmp	r7, r8
 800b460:	d3f5      	bcc.n	800b44e <_out_rev+0x24>
 800b462:	e007      	b.n	800b474 <_out_rev+0x4a>
    }
  }

  // reverse string
  while (len) {
    out(buf[--len], buffer, idx++, maxlen);
 800b464:	3c01      	subs	r4, #1
 800b466:	1c57      	adds	r7, r2, #1
 800b468:	4633      	mov	r3, r6
 800b46a:	9901      	ldr	r1, [sp, #4]
 800b46c:	f819 0004 	ldrb.w	r0, [r9, r4]
 800b470:	47a8      	blx	r5
 800b472:	463a      	mov	r2, r7
  while (len) {
 800b474:	2c00      	cmp	r4, #0
 800b476:	d1f5      	bne.n	800b464 <_out_rev+0x3a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800b478:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b47a:	f013 0f02 	tst.w	r3, #2
 800b47e:	d106      	bne.n	800b48e <_out_rev+0x64>
 800b480:	e009      	b.n	800b496 <_out_rev+0x6c>
    while (idx - start_idx < width) {
      out(' ', buffer, idx++, maxlen);
 800b482:	1c54      	adds	r4, r2, #1
 800b484:	4633      	mov	r3, r6
 800b486:	9901      	ldr	r1, [sp, #4]
 800b488:	2020      	movs	r0, #32
 800b48a:	47a8      	blx	r5
 800b48c:	4622      	mov	r2, r4
    while (idx - start_idx < width) {
 800b48e:	eba2 030b 	sub.w	r3, r2, fp
 800b492:	4543      	cmp	r3, r8
 800b494:	d3f5      	bcc.n	800b482 <_out_rev+0x58>
    }
  }

  return idx;
}
 800b496:	4610      	mov	r0, r2
 800b498:	b003      	add	sp, #12
 800b49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b49e <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b49e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4a2:	b085      	sub	sp, #20
 800b4a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b4a6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b4a8:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 800b4ac:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800b4b0:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800b4b4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800b4b6:	9d12      	ldr	r5, [sp, #72]	; 0x48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800b4b8:	f015 0f02 	tst.w	r5, #2
 800b4bc:	d121      	bne.n	800b502 <_ntoa_format+0x64>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800b4be:	b17f      	cbz	r7, 800b4e0 <_ntoa_format+0x42>
 800b4c0:	f015 0f01 	tst.w	r5, #1
 800b4c4:	d00c      	beq.n	800b4e0 <_ntoa_format+0x42>
 800b4c6:	f1b9 0f00 	cmp.w	r9, #0
 800b4ca:	d102      	bne.n	800b4d2 <_ntoa_format+0x34>
 800b4cc:	f015 0f0c 	tst.w	r5, #12
 800b4d0:	d006      	beq.n	800b4e0 <_ntoa_format+0x42>
      width--;
 800b4d2:	3f01      	subs	r7, #1
 800b4d4:	e004      	b.n	800b4e0 <_ntoa_format+0x42>
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 800b4d6:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800b4da:	f806 c004 	strb.w	ip, [r6, r4]
 800b4de:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b4e0:	4574      	cmp	r4, lr
 800b4e2:	d207      	bcs.n	800b4f4 <_ntoa_format+0x56>
 800b4e4:	2c1f      	cmp	r4, #31
 800b4e6:	d9f6      	bls.n	800b4d6 <_ntoa_format+0x38>
 800b4e8:	e004      	b.n	800b4f4 <_ntoa_format+0x56>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 800b4ea:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800b4ee:	f806 c004 	strb.w	ip, [r6, r4]
 800b4f2:	3401      	adds	r4, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b4f4:	f015 0f01 	tst.w	r5, #1
 800b4f8:	d003      	beq.n	800b502 <_ntoa_format+0x64>
 800b4fa:	42bc      	cmp	r4, r7
 800b4fc:	d201      	bcs.n	800b502 <_ntoa_format+0x64>
 800b4fe:	2c1f      	cmp	r4, #31
 800b500:	d9f3      	bls.n	800b4ea <_ntoa_format+0x4c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800b502:	f015 0f10 	tst.w	r5, #16
 800b506:	d017      	beq.n	800b538 <_ntoa_format+0x9a>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800b508:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800b50c:	d104      	bne.n	800b518 <_ntoa_format+0x7a>
 800b50e:	b11c      	cbz	r4, 800b518 <_ntoa_format+0x7a>
 800b510:	4574      	cmp	r4, lr
 800b512:	d022      	beq.n	800b55a <_ntoa_format+0xbc>
 800b514:	42bc      	cmp	r4, r7
 800b516:	d020      	beq.n	800b55a <_ntoa_format+0xbc>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b518:	f1b8 0f10 	cmp.w	r8, #16
 800b51c:	d029      	beq.n	800b572 <_ntoa_format+0xd4>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b51e:	f1b8 0f10 	cmp.w	r8, #16
 800b522:	d031      	beq.n	800b588 <_ntoa_format+0xea>
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b524:	f1b8 0f02 	cmp.w	r8, #2
 800b528:	d039      	beq.n	800b59e <_ntoa_format+0x100>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800b52a:	2c1f      	cmp	r4, #31
 800b52c:	d804      	bhi.n	800b538 <_ntoa_format+0x9a>
      buf[len++] = '0';
 800b52e:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800b532:	f806 c004 	strb.w	ip, [r6, r4]
 800b536:	3401      	adds	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800b538:	2c1f      	cmp	r4, #31
 800b53a:	d83d      	bhi.n	800b5b8 <_ntoa_format+0x11a>
    if (negative) {
 800b53c:	f1b9 0f00 	cmp.w	r9, #0
 800b540:	d135      	bne.n	800b5ae <_ntoa_format+0x110>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
 800b542:	f015 0f04 	tst.w	r5, #4
 800b546:	d140      	bne.n	800b5ca <_ntoa_format+0x12c>
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
 800b548:	f015 0f08 	tst.w	r5, #8
 800b54c:	d034      	beq.n	800b5b8 <_ntoa_format+0x11a>
      buf[len++] = ' ';
 800b54e:	f04f 0c20 	mov.w	ip, #32
 800b552:	f806 c004 	strb.w	ip, [r6, r4]
 800b556:	3401      	adds	r4, #1
 800b558:	e02e      	b.n	800b5b8 <_ntoa_format+0x11a>
      if (len && (base == 16U)) {
 800b55a:	f1b4 0c01 	subs.w	ip, r4, #1
 800b55e:	d006      	beq.n	800b56e <_ntoa_format+0xd0>
 800b560:	f1b8 0f10 	cmp.w	r8, #16
 800b564:	d001      	beq.n	800b56a <_ntoa_format+0xcc>
      len--;
 800b566:	4664      	mov	r4, ip
 800b568:	e7d6      	b.n	800b518 <_ntoa_format+0x7a>
        len--;
 800b56a:	3c02      	subs	r4, #2
 800b56c:	e7d4      	b.n	800b518 <_ntoa_format+0x7a>
      len--;
 800b56e:	4664      	mov	r4, ip
 800b570:	e7d2      	b.n	800b518 <_ntoa_format+0x7a>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b572:	f015 0f20 	tst.w	r5, #32
 800b576:	d1d2      	bne.n	800b51e <_ntoa_format+0x80>
 800b578:	2c1f      	cmp	r4, #31
 800b57a:	d8d0      	bhi.n	800b51e <_ntoa_format+0x80>
      buf[len++] = 'x';
 800b57c:	f04f 0c78 	mov.w	ip, #120	; 0x78
 800b580:	f806 c004 	strb.w	ip, [r6, r4]
 800b584:	3401      	adds	r4, #1
 800b586:	e7d0      	b.n	800b52a <_ntoa_format+0x8c>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b588:	f015 0f20 	tst.w	r5, #32
 800b58c:	d0ca      	beq.n	800b524 <_ntoa_format+0x86>
 800b58e:	2c1f      	cmp	r4, #31
 800b590:	d8c8      	bhi.n	800b524 <_ntoa_format+0x86>
      buf[len++] = 'X';
 800b592:	f04f 0c58 	mov.w	ip, #88	; 0x58
 800b596:	f806 c004 	strb.w	ip, [r6, r4]
 800b59a:	3401      	adds	r4, #1
 800b59c:	e7c5      	b.n	800b52a <_ntoa_format+0x8c>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b59e:	2c1f      	cmp	r4, #31
 800b5a0:	d8c3      	bhi.n	800b52a <_ntoa_format+0x8c>
      buf[len++] = 'b';
 800b5a2:	f04f 0c62 	mov.w	ip, #98	; 0x62
 800b5a6:	f806 c004 	strb.w	ip, [r6, r4]
 800b5aa:	3401      	adds	r4, #1
 800b5ac:	e7bd      	b.n	800b52a <_ntoa_format+0x8c>
      buf[len++] = '-';
 800b5ae:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 800b5b2:	f806 c004 	strb.w	ip, [r6, r4]
 800b5b6:	3401      	adds	r4, #1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800b5b8:	9503      	str	r5, [sp, #12]
 800b5ba:	9702      	str	r7, [sp, #8]
 800b5bc:	9401      	str	r4, [sp, #4]
 800b5be:	9600      	str	r6, [sp, #0]
 800b5c0:	f7ff ff33 	bl	800b42a <_out_rev>
}
 800b5c4:	b005      	add	sp, #20
 800b5c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      buf[len++] = '+';  // ignore the space if the '+' exists
 800b5ca:	f04f 0c2b 	mov.w	ip, #43	; 0x2b
 800b5ce:	f806 c004 	strb.w	ip, [r6, r4]
 800b5d2:	3401      	adds	r4, #1
 800b5d4:	e7f0      	b.n	800b5b8 <_ntoa_format+0x11a>

0800b5d6 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5da:	b090      	sub	sp, #64	; 0x40
 800b5dc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800b5de:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b5e0:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 800b5e4:	b90d      	cbnz	r5, 800b5ea <_ntoa_long+0x14>
    flags &= ~FLAGS_HASH;
 800b5e6:	f02c 0c10 	bic.w	ip, ip, #16
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800b5ea:	f41c 6680 	ands.w	r6, ip, #1024	; 0x400
 800b5ee:	d019      	beq.n	800b624 <_ntoa_long+0x4e>
 800b5f0:	b32d      	cbz	r5, 800b63e <_ntoa_long+0x68>
 800b5f2:	2600      	movs	r6, #0
 800b5f4:	e016      	b.n	800b624 <_ntoa_long+0x4e>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b5f6:	f01c 0f20 	tst.w	ip, #32
 800b5fa:	d01d      	beq.n	800b638 <_ntoa_long+0x62>
 800b5fc:	f04f 0e41 	mov.w	lr, #65	; 0x41
 800b600:	4474      	add	r4, lr
 800b602:	b2e4      	uxtb	r4, r4
 800b604:	3c0a      	subs	r4, #10
 800b606:	b2e4      	uxtb	r4, r4
 800b608:	f106 0e01 	add.w	lr, r6, #1
 800b60c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800b610:	4446      	add	r6, r8
 800b612:	f806 4c20 	strb.w	r4, [r6, #-32]
      value /= base;
 800b616:	fbb5 f5f7 	udiv	r5, r5, r7
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800b61a:	b195      	cbz	r5, 800b642 <_ntoa_long+0x6c>
 800b61c:	f1be 0f1f 	cmp.w	lr, #31
 800b620:	d80f      	bhi.n	800b642 <_ntoa_long+0x6c>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b622:	4676      	mov	r6, lr
      const char digit = (char)(value % base);
 800b624:	fbb5 f4f7 	udiv	r4, r5, r7
 800b628:	fb07 5414 	mls	r4, r7, r4, r5
 800b62c:	b2e4      	uxtb	r4, r4
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b62e:	2c09      	cmp	r4, #9
 800b630:	d8e1      	bhi.n	800b5f6 <_ntoa_long+0x20>
 800b632:	3430      	adds	r4, #48	; 0x30
 800b634:	b2e4      	uxtb	r4, r4
 800b636:	e7e7      	b.n	800b608 <_ntoa_long+0x32>
 800b638:	f04f 0e61 	mov.w	lr, #97	; 0x61
 800b63c:	e7e0      	b.n	800b600 <_ntoa_long+0x2a>
  size_t len = 0U;
 800b63e:	f04f 0e00 	mov.w	lr, #0
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800b642:	f8cd c018 	str.w	ip, [sp, #24]
 800b646:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800b648:	9405      	str	r4, [sp, #20]
 800b64a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800b64c:	9404      	str	r4, [sp, #16]
 800b64e:	9703      	str	r7, [sp, #12]
 800b650:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 800b654:	9402      	str	r4, [sp, #8]
 800b656:	f8cd e004 	str.w	lr, [sp, #4]
 800b65a:	ac08      	add	r4, sp, #32
 800b65c:	9400      	str	r4, [sp, #0]
 800b65e:	f7ff ff1e 	bl	800b49e <_ntoa_format>
}
 800b662:	b010      	add	sp, #64	; 0x40
 800b664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b668 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800b668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66c:	b08b      	sub	sp, #44	; 0x2c
 800b66e:	4606      	mov	r6, r0
 800b670:	4615      	mov	r5, r2
 800b672:	9309      	str	r3, [sp, #36]	; 0x24
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 800b674:	9106      	str	r1, [sp, #24]
 800b676:	2900      	cmp	r1, #0
 800b678:	f000 82b1 	beq.w	800bbde <_vsnprintf+0x576>
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800b67c:	2400      	movs	r4, #0
  while (*format)
 800b67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b680:	7818      	ldrb	r0, [r3, #0]
 800b682:	2800      	cmp	r0, #0
 800b684:	f000 82ad 	beq.w	800bbe2 <_vsnprintf+0x57a>
    if (*format != '%') {
 800b688:	2825      	cmp	r0, #37	; 0x25
 800b68a:	d009      	beq.n	800b6a0 <_vsnprintf+0x38>
      out(*format, buffer, idx++, maxlen);
 800b68c:	1c67      	adds	r7, r4, #1
 800b68e:	462b      	mov	r3, r5
 800b690:	4622      	mov	r2, r4
 800b692:	9906      	ldr	r1, [sp, #24]
 800b694:	47b0      	blx	r6
      format++;
 800b696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b698:	3301      	adds	r3, #1
 800b69a:	9309      	str	r3, [sp, #36]	; 0x24
      out(*format, buffer, idx++, maxlen);
 800b69c:	463c      	mov	r4, r7
      continue;
 800b69e:	e7ee      	b.n	800b67e <_vsnprintf+0x16>
      format++;
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	9309      	str	r3, [sp, #36]	; 0x24
    flags = 0U;
 800b6a4:	2700      	movs	r7, #0
 800b6a6:	e02d      	b.n	800b704 <_vsnprintf+0x9c>
  return (ch >= '0') && (ch <= '9');
 800b6a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b6ac:	b2db      	uxtb	r3, r3
    if (_is_digit(*format)) {
 800b6ae:	2b09      	cmp	r3, #9
 800b6b0:	d968      	bls.n	800b784 <_vsnprintf+0x11c>
    else if (*format == '*') {
 800b6b2:	292a      	cmp	r1, #42	; 0x2a
 800b6b4:	d06b      	beq.n	800b78e <_vsnprintf+0x126>
    width = 0U;
 800b6b6:	f04f 0a00 	mov.w	sl, #0
    if (*format == '.') {
 800b6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6bc:	781a      	ldrb	r2, [r3, #0]
 800b6be:	2a2e      	cmp	r2, #46	; 0x2e
 800b6c0:	d075      	beq.n	800b7ae <_vsnprintf+0x146>
    precision = 0U;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	9307      	str	r3, [sp, #28]
    switch (*format) {
 800b6c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6c8:	7813      	ldrb	r3, [r2, #0]
 800b6ca:	3b68      	subs	r3, #104	; 0x68
 800b6cc:	2b12      	cmp	r3, #18
 800b6ce:	f200 80ad 	bhi.w	800b82c <_vsnprintf+0x1c4>
 800b6d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b6d6:	0099      	.short	0x0099
 800b6d8:	00a700ab 	.word	0x00a700ab
 800b6dc:	008b00ab 	.word	0x008b00ab
 800b6e0:	00ab00ab 	.word	0x00ab00ab
 800b6e4:	00ab00ab 	.word	0x00ab00ab
 800b6e8:	00ab00ab 	.word	0x00ab00ab
 800b6ec:	00ab00ab 	.word	0x00ab00ab
 800b6f0:	00ab00ab 	.word	0x00ab00ab
 800b6f4:	00ab00ab 	.word	0x00ab00ab
 800b6f8:	010800ab 	.word	0x010800ab
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800b6fc:	f047 0701 	orr.w	r7, r7, #1
 800b700:	3301      	adds	r3, #1
 800b702:	9309      	str	r3, [sp, #36]	; 0x24
      switch (*format) {
 800b704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b706:	7819      	ldrb	r1, [r3, #0]
 800b708:	f1a1 0220 	sub.w	r2, r1, #32
 800b70c:	2a10      	cmp	r2, #16
 800b70e:	d8cb      	bhi.n	800b6a8 <_vsnprintf+0x40>
 800b710:	a001      	add	r0, pc, #4	; (adr r0, 800b718 <_vsnprintf+0xb0>)
 800b712:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800b716:	bf00      	nop
 800b718:	0800b771 	.word	0x0800b771
 800b71c:	0800b6a9 	.word	0x0800b6a9
 800b720:	0800b6a9 	.word	0x0800b6a9
 800b724:	0800b77b 	.word	0x0800b77b
 800b728:	0800b6a9 	.word	0x0800b6a9
 800b72c:	0800b6a9 	.word	0x0800b6a9
 800b730:	0800b6a9 	.word	0x0800b6a9
 800b734:	0800b6a9 	.word	0x0800b6a9
 800b738:	0800b6a9 	.word	0x0800b6a9
 800b73c:	0800b6a9 	.word	0x0800b6a9
 800b740:	0800b6a9 	.word	0x0800b6a9
 800b744:	0800b767 	.word	0x0800b767
 800b748:	0800b6a9 	.word	0x0800b6a9
 800b74c:	0800b75d 	.word	0x0800b75d
 800b750:	0800b6a9 	.word	0x0800b6a9
 800b754:	0800b6a9 	.word	0x0800b6a9
 800b758:	0800b6fd 	.word	0x0800b6fd
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800b75c:	f047 0702 	orr.w	r7, r7, #2
 800b760:	3301      	adds	r3, #1
 800b762:	9309      	str	r3, [sp, #36]	; 0x24
 800b764:	e7ce      	b.n	800b704 <_vsnprintf+0x9c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800b766:	f047 0704 	orr.w	r7, r7, #4
 800b76a:	3301      	adds	r3, #1
 800b76c:	9309      	str	r3, [sp, #36]	; 0x24
 800b76e:	e7c9      	b.n	800b704 <_vsnprintf+0x9c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800b770:	f047 0708 	orr.w	r7, r7, #8
 800b774:	3301      	adds	r3, #1
 800b776:	9309      	str	r3, [sp, #36]	; 0x24
 800b778:	e7c4      	b.n	800b704 <_vsnprintf+0x9c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800b77a:	f047 0710 	orr.w	r7, r7, #16
 800b77e:	3301      	adds	r3, #1
 800b780:	9309      	str	r3, [sp, #36]	; 0x24
 800b782:	e7bf      	b.n	800b704 <_vsnprintf+0x9c>
      width = _atoi(&format);
 800b784:	a809      	add	r0, sp, #36	; 0x24
 800b786:	f7ff fe3e 	bl	800b406 <_atoi>
 800b78a:	4682      	mov	sl, r0
 800b78c:	e795      	b.n	800b6ba <_vsnprintf+0x52>
      const int w = va_arg(va, int);
 800b78e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b790:	1d1a      	adds	r2, r3, #4
 800b792:	9214      	str	r2, [sp, #80]	; 0x50
 800b794:	681b      	ldr	r3, [r3, #0]
      if (w < 0) {
 800b796:	2b00      	cmp	r3, #0
 800b798:	db04      	blt.n	800b7a4 <_vsnprintf+0x13c>
        width = (unsigned int)w;
 800b79a:	469a      	mov	sl, r3
      format++;
 800b79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b79e:	3301      	adds	r3, #1
 800b7a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b7a2:	e78a      	b.n	800b6ba <_vsnprintf+0x52>
        flags |= FLAGS_LEFT;    // reverse padding
 800b7a4:	f047 0702 	orr.w	r7, r7, #2
        width = (unsigned int)-w;
 800b7a8:	f1c3 0a00 	rsb	sl, r3, #0
 800b7ac:	e7f6      	b.n	800b79c <_vsnprintf+0x134>
      flags |= FLAGS_PRECISION;
 800b7ae:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
      format++;
 800b7b2:	1c5a      	adds	r2, r3, #1
 800b7b4:	9209      	str	r2, [sp, #36]	; 0x24
      if (_is_digit(*format)) {
 800b7b6:	785a      	ldrb	r2, [r3, #1]
  return (ch >= '0') && (ch <= '9');
 800b7b8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b7bc:	b2db      	uxtb	r3, r3
      if (_is_digit(*format)) {
 800b7be:	2b09      	cmp	r3, #9
 800b7c0:	d904      	bls.n	800b7cc <_vsnprintf+0x164>
      else if (*format == '*') {
 800b7c2:	2a2a      	cmp	r2, #42	; 0x2a
 800b7c4:	d007      	beq.n	800b7d6 <_vsnprintf+0x16e>
    precision = 0U;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	9307      	str	r3, [sp, #28]
 800b7ca:	e77c      	b.n	800b6c6 <_vsnprintf+0x5e>
        precision = _atoi(&format);
 800b7cc:	a809      	add	r0, sp, #36	; 0x24
 800b7ce:	f7ff fe1a 	bl	800b406 <_atoi>
 800b7d2:	9007      	str	r0, [sp, #28]
 800b7d4:	e777      	b.n	800b6c6 <_vsnprintf+0x5e>
        const int prec = (int)va_arg(va, int);
 800b7d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7d8:	1d1a      	adds	r2, r3, #4
 800b7da:	9214      	str	r2, [sp, #80]	; 0x50
 800b7dc:	681b      	ldr	r3, [r3, #0]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800b7de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b7e2:	9307      	str	r3, [sp, #28]
        format++;
 800b7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ea:	e76c      	b.n	800b6c6 <_vsnprintf+0x5e>
        flags |= FLAGS_LONG;
 800b7ec:	f447 7180 	orr.w	r1, r7, #256	; 0x100
        format++;
 800b7f0:	1c53      	adds	r3, r2, #1
 800b7f2:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == 'l') {
 800b7f4:	7852      	ldrb	r2, [r2, #1]
 800b7f6:	2a6c      	cmp	r2, #108	; 0x6c
 800b7f8:	d001      	beq.n	800b7fe <_vsnprintf+0x196>
        flags |= FLAGS_LONG;
 800b7fa:	460f      	mov	r7, r1
 800b7fc:	e016      	b.n	800b82c <_vsnprintf+0x1c4>
          flags |= FLAGS_LONG_LONG;
 800b7fe:	f447 7740 	orr.w	r7, r7, #768	; 0x300
          format++;
 800b802:	3301      	adds	r3, #1
 800b804:	9309      	str	r3, [sp, #36]	; 0x24
 800b806:	e011      	b.n	800b82c <_vsnprintf+0x1c4>
        flags |= FLAGS_SHORT;
 800b808:	f047 0180 	orr.w	r1, r7, #128	; 0x80
        format++;
 800b80c:	1c53      	adds	r3, r2, #1
 800b80e:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == 'h') {
 800b810:	7852      	ldrb	r2, [r2, #1]
 800b812:	2a68      	cmp	r2, #104	; 0x68
 800b814:	d001      	beq.n	800b81a <_vsnprintf+0x1b2>
        flags |= FLAGS_SHORT;
 800b816:	460f      	mov	r7, r1
 800b818:	e008      	b.n	800b82c <_vsnprintf+0x1c4>
          flags |= FLAGS_CHAR;
 800b81a:	f047 07c0 	orr.w	r7, r7, #192	; 0xc0
          format++;
 800b81e:	3301      	adds	r3, #1
 800b820:	9309      	str	r3, [sp, #36]	; 0x24
 800b822:	e003      	b.n	800b82c <_vsnprintf+0x1c4>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800b824:	f447 7700 	orr.w	r7, r7, #512	; 0x200
        format++;
 800b828:	3201      	adds	r2, #1
 800b82a:	9209      	str	r2, [sp, #36]	; 0x24
    switch (*format) {
 800b82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b82e:	7818      	ldrb	r0, [r3, #0]
 800b830:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 800b834:	2b53      	cmp	r3, #83	; 0x53
 800b836:	f200 81c8 	bhi.w	800bbca <_vsnprintf+0x562>
 800b83a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b83e:	01bb      	.short	0x01bb
 800b840:	01c601c6 	.word	0x01c601c6
 800b844:	01c601c6 	.word	0x01c601c6
 800b848:	01c601c6 	.word	0x01c601c6
 800b84c:	01c601c6 	.word	0x01c601c6
 800b850:	01c601c6 	.word	0x01c601c6
 800b854:	01c601c6 	.word	0x01c601c6
 800b858:	01c601c6 	.word	0x01c601c6
 800b85c:	01c601c6 	.word	0x01c601c6
 800b860:	01c601c6 	.word	0x01c601c6
 800b864:	01c601c6 	.word	0x01c601c6
 800b868:	01c601c6 	.word	0x01c601c6
 800b86c:	01c601c6 	.word	0x01c601c6
 800b870:	01c601c6 	.word	0x01c601c6
 800b874:	01c601c6 	.word	0x01c601c6
 800b878:	01c601c6 	.word	0x01c601c6
 800b87c:	01c601c6 	.word	0x01c601c6
 800b880:	01c601c6 	.word	0x01c601c6
 800b884:	01c601c6 	.word	0x01c601c6
 800b888:	01c601c6 	.word	0x01c601c6
 800b88c:	01c601c6 	.word	0x01c601c6
 800b890:	01c601c6 	.word	0x01c601c6
 800b894:	01c601c6 	.word	0x01c601c6
 800b898:	01c601c6 	.word	0x01c601c6
 800b89c:	01c601c6 	.word	0x01c601c6
 800b8a0:	01c601c6 	.word	0x01c601c6
 800b8a4:	01c60059 	.word	0x01c60059
 800b8a8:	01c601c6 	.word	0x01c601c6
 800b8ac:	01c601c6 	.word	0x01c601c6
 800b8b0:	01c601c6 	.word	0x01c601c6
 800b8b4:	01c601c6 	.word	0x01c601c6
 800b8b8:	010c0059 	.word	0x010c0059
 800b8bc:	01c60059 	.word	0x01c60059
 800b8c0:	01c601c6 	.word	0x01c601c6
 800b8c4:	005901c6 	.word	0x005901c6
 800b8c8:	01c601c6 	.word	0x01c601c6
 800b8cc:	01c601c6 	.word	0x01c601c6
 800b8d0:	005901c6 	.word	0x005901c6
 800b8d4:	01c601a0 	.word	0x01c601a0
 800b8d8:	014001c6 	.word	0x014001c6
 800b8dc:	005901c6 	.word	0x005901c6
 800b8e0:	01c601c6 	.word	0x01c601c6
 800b8e4:	0059      	.short	0x0059
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800b8e6:	f447 7780 	orr.w	r7, r7, #256	; 0x100
        format++;
 800b8ea:	3201      	adds	r2, #1
 800b8ec:	9209      	str	r2, [sp, #36]	; 0x24
        break;
 800b8ee:	e79d      	b.n	800b82c <_vsnprintf+0x1c4>
        if (*format == 'x' || *format == 'X') {
 800b8f0:	2878      	cmp	r0, #120	; 0x78
 800b8f2:	d009      	beq.n	800b908 <_vsnprintf+0x2a0>
 800b8f4:	2858      	cmp	r0, #88	; 0x58
 800b8f6:	d037      	beq.n	800b968 <_vsnprintf+0x300>
        else if (*format == 'o') {
 800b8f8:	286f      	cmp	r0, #111	; 0x6f
 800b8fa:	d037      	beq.n	800b96c <_vsnprintf+0x304>
        else if (*format == 'b') {
 800b8fc:	2862      	cmp	r0, #98	; 0x62
 800b8fe:	d037      	beq.n	800b970 <_vsnprintf+0x308>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800b900:	f027 0710 	bic.w	r7, r7, #16
          base = 10U;
 800b904:	230a      	movs	r3, #10
 800b906:	e000      	b.n	800b90a <_vsnprintf+0x2a2>
          base = 16U;
 800b908:	2310      	movs	r3, #16
        if (*format == 'X') {
 800b90a:	2858      	cmp	r0, #88	; 0x58
 800b90c:	d032      	beq.n	800b974 <_vsnprintf+0x30c>
        if ((*format != 'i') && (*format != 'd')) {
 800b90e:	2869      	cmp	r0, #105	; 0x69
 800b910:	d003      	beq.n	800b91a <_vsnprintf+0x2b2>
 800b912:	2864      	cmp	r0, #100	; 0x64
 800b914:	d001      	beq.n	800b91a <_vsnprintf+0x2b2>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800b916:	f027 070c 	bic.w	r7, r7, #12
        if (flags & FLAGS_PRECISION) {
 800b91a:	f417 6f80 	tst.w	r7, #1024	; 0x400
 800b91e:	d001      	beq.n	800b924 <_vsnprintf+0x2bc>
          flags &= ~FLAGS_ZEROPAD;
 800b920:	f027 0701 	bic.w	r7, r7, #1
        if ((*format == 'i') || (*format == 'd')) {
 800b924:	2869      	cmp	r0, #105	; 0x69
 800b926:	d028      	beq.n	800b97a <_vsnprintf+0x312>
 800b928:	2864      	cmp	r0, #100	; 0x64
 800b92a:	d026      	beq.n	800b97a <_vsnprintf+0x312>
          if (flags & FLAGS_LONG_LONG) {
 800b92c:	f417 7f00 	tst.w	r7, #512	; 0x200
 800b930:	d144      	bne.n	800b9bc <_vsnprintf+0x354>
          else if (flags & FLAGS_LONG) {
 800b932:	f417 7f80 	tst.w	r7, #256	; 0x100
 800b936:	d16c      	bne.n	800ba12 <_vsnprintf+0x3aa>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800b938:	f017 0f40 	tst.w	r7, #64	; 0x40
 800b93c:	d07e      	beq.n	800ba3c <_vsnprintf+0x3d4>
 800b93e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b940:	1d11      	adds	r1, r2, #4
 800b942:	9114      	str	r1, [sp, #80]	; 0x50
 800b944:	7812      	ldrb	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800b946:	9705      	str	r7, [sp, #20]
 800b948:	f8cd a010 	str.w	sl, [sp, #16]
 800b94c:	9907      	ldr	r1, [sp, #28]
 800b94e:	9103      	str	r1, [sp, #12]
 800b950:	9302      	str	r3, [sp, #8]
 800b952:	2300      	movs	r3, #0
 800b954:	9301      	str	r3, [sp, #4]
 800b956:	9200      	str	r2, [sp, #0]
 800b958:	462b      	mov	r3, r5
 800b95a:	4622      	mov	r2, r4
 800b95c:	9906      	ldr	r1, [sp, #24]
 800b95e:	4630      	mov	r0, r6
 800b960:	f7ff fe39 	bl	800b5d6 <_ntoa_long>
 800b964:	4604      	mov	r4, r0
 800b966:	e029      	b.n	800b9bc <_vsnprintf+0x354>
          base = 16U;
 800b968:	2310      	movs	r3, #16
 800b96a:	e7ce      	b.n	800b90a <_vsnprintf+0x2a2>
          base =  8U;
 800b96c:	2308      	movs	r3, #8
 800b96e:	e7cc      	b.n	800b90a <_vsnprintf+0x2a2>
          base =  2U;
 800b970:	2302      	movs	r3, #2
 800b972:	e7ca      	b.n	800b90a <_vsnprintf+0x2a2>
          flags |= FLAGS_UPPERCASE;
 800b974:	f047 0720 	orr.w	r7, r7, #32
 800b978:	e7c9      	b.n	800b90e <_vsnprintf+0x2a6>
          if (flags & FLAGS_LONG_LONG) {
 800b97a:	f417 7f00 	tst.w	r7, #512	; 0x200
 800b97e:	d11d      	bne.n	800b9bc <_vsnprintf+0x354>
          else if (flags & FLAGS_LONG) {
 800b980:	f417 7f80 	tst.w	r7, #256	; 0x100
 800b984:	d11e      	bne.n	800b9c4 <_vsnprintf+0x35c>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800b986:	f017 0f40 	tst.w	r7, #64	; 0x40
 800b98a:	d034      	beq.n	800b9f6 <_vsnprintf+0x38e>
 800b98c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b98e:	1d11      	adds	r1, r2, #4
 800b990:	9114      	str	r1, [sp, #80]	; 0x50
 800b992:	7812      	ldrb	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800b994:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800b998:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800b99c:	0fd2      	lsrs	r2, r2, #31
 800b99e:	9705      	str	r7, [sp, #20]
 800b9a0:	f8cd a010 	str.w	sl, [sp, #16]
 800b9a4:	9807      	ldr	r0, [sp, #28]
 800b9a6:	9003      	str	r0, [sp, #12]
 800b9a8:	9302      	str	r3, [sp, #8]
 800b9aa:	9201      	str	r2, [sp, #4]
 800b9ac:	9100      	str	r1, [sp, #0]
 800b9ae:	462b      	mov	r3, r5
 800b9b0:	4622      	mov	r2, r4
 800b9b2:	9906      	ldr	r1, [sp, #24]
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f7ff fe0e 	bl	800b5d6 <_ntoa_long>
 800b9ba:	4604      	mov	r4, r0
        format++;
 800b9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9be:	3301      	adds	r3, #1
 800b9c0:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800b9c2:	e65c      	b.n	800b67e <_vsnprintf+0x16>
            const long value = va_arg(va, long);
 800b9c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b9c6:	1d11      	adds	r1, r2, #4
 800b9c8:	9114      	str	r1, [sp, #80]	; 0x50
 800b9ca:	6812      	ldr	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800b9cc:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800b9d0:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800b9d4:	0fd2      	lsrs	r2, r2, #31
 800b9d6:	9705      	str	r7, [sp, #20]
 800b9d8:	f8cd a010 	str.w	sl, [sp, #16]
 800b9dc:	9807      	ldr	r0, [sp, #28]
 800b9de:	9003      	str	r0, [sp, #12]
 800b9e0:	9302      	str	r3, [sp, #8]
 800b9e2:	9201      	str	r2, [sp, #4]
 800b9e4:	9100      	str	r1, [sp, #0]
 800b9e6:	462b      	mov	r3, r5
 800b9e8:	4622      	mov	r2, r4
 800b9ea:	9906      	ldr	r1, [sp, #24]
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	f7ff fdf2 	bl	800b5d6 <_ntoa_long>
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	e7e2      	b.n	800b9bc <_vsnprintf+0x354>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800b9f6:	f017 0f80 	tst.w	r7, #128	; 0x80
 800b9fa:	d005      	beq.n	800ba08 <_vsnprintf+0x3a0>
 800b9fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b9fe:	1d11      	adds	r1, r2, #4
 800ba00:	9114      	str	r1, [sp, #80]	; 0x50
 800ba02:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ba06:	e7c5      	b.n	800b994 <_vsnprintf+0x32c>
 800ba08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba0a:	1d11      	adds	r1, r2, #4
 800ba0c:	9114      	str	r1, [sp, #80]	; 0x50
 800ba0e:	6812      	ldr	r2, [r2, #0]
 800ba10:	e7c0      	b.n	800b994 <_vsnprintf+0x32c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800ba12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba14:	1d11      	adds	r1, r2, #4
 800ba16:	9114      	str	r1, [sp, #80]	; 0x50
 800ba18:	6812      	ldr	r2, [r2, #0]
 800ba1a:	9705      	str	r7, [sp, #20]
 800ba1c:	f8cd a010 	str.w	sl, [sp, #16]
 800ba20:	9907      	ldr	r1, [sp, #28]
 800ba22:	9103      	str	r1, [sp, #12]
 800ba24:	9302      	str	r3, [sp, #8]
 800ba26:	2300      	movs	r3, #0
 800ba28:	9301      	str	r3, [sp, #4]
 800ba2a:	9200      	str	r2, [sp, #0]
 800ba2c:	462b      	mov	r3, r5
 800ba2e:	4622      	mov	r2, r4
 800ba30:	9906      	ldr	r1, [sp, #24]
 800ba32:	4630      	mov	r0, r6
 800ba34:	f7ff fdcf 	bl	800b5d6 <_ntoa_long>
 800ba38:	4604      	mov	r4, r0
 800ba3a:	e7bf      	b.n	800b9bc <_vsnprintf+0x354>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800ba3c:	f017 0f80 	tst.w	r7, #128	; 0x80
 800ba40:	d004      	beq.n	800ba4c <_vsnprintf+0x3e4>
 800ba42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba44:	1d11      	adds	r1, r2, #4
 800ba46:	9114      	str	r1, [sp, #80]	; 0x50
 800ba48:	8812      	ldrh	r2, [r2, #0]
 800ba4a:	e77c      	b.n	800b946 <_vsnprintf+0x2de>
 800ba4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba4e:	1d11      	adds	r1, r2, #4
 800ba50:	9114      	str	r1, [sp, #80]	; 0x50
 800ba52:	6812      	ldr	r2, [r2, #0]
 800ba54:	e777      	b.n	800b946 <_vsnprintf+0x2de>
        if (!(flags & FLAGS_LEFT)) {
 800ba56:	f017 0702 	ands.w	r7, r7, #2
 800ba5a:	d01e      	beq.n	800ba9a <_vsnprintf+0x432>
        unsigned int l = 1U;
 800ba5c:	f04f 0801 	mov.w	r8, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800ba60:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ba62:	1d03      	adds	r3, r0, #4
 800ba64:	9314      	str	r3, [sp, #80]	; 0x50
 800ba66:	f104 0901 	add.w	r9, r4, #1
 800ba6a:	462b      	mov	r3, r5
 800ba6c:	4622      	mov	r2, r4
 800ba6e:	9906      	ldr	r1, [sp, #24]
 800ba70:	7800      	ldrb	r0, [r0, #0]
 800ba72:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
 800ba74:	b9a7      	cbnz	r7, 800baa0 <_vsnprintf+0x438>
        format++;
 800ba76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba78:	3301      	adds	r3, #1
 800ba7a:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800ba7c:	464c      	mov	r4, r9
 800ba7e:	e5fe      	b.n	800b67e <_vsnprintf+0x16>
            out(' ', buffer, idx++, maxlen);
 800ba80:	1c54      	adds	r4, r2, #1
 800ba82:	462b      	mov	r3, r5
 800ba84:	9906      	ldr	r1, [sp, #24]
 800ba86:	2020      	movs	r0, #32
 800ba88:	47b0      	blx	r6
          while (l++ < width) {
 800ba8a:	4643      	mov	r3, r8
            out(' ', buffer, idx++, maxlen);
 800ba8c:	4622      	mov	r2, r4
          while (l++ < width) {
 800ba8e:	f103 0801 	add.w	r8, r3, #1
 800ba92:	459a      	cmp	sl, r3
 800ba94:	d8f4      	bhi.n	800ba80 <_vsnprintf+0x418>
 800ba96:	4614      	mov	r4, r2
 800ba98:	e7e2      	b.n	800ba60 <_vsnprintf+0x3f8>
        unsigned int l = 1U;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	4622      	mov	r2, r4
 800ba9e:	e7f6      	b.n	800ba8e <_vsnprintf+0x426>
 800baa0:	464a      	mov	r2, r9
 800baa2:	e006      	b.n	800bab2 <_vsnprintf+0x44a>
            out(' ', buffer, idx++, maxlen);
 800baa4:	1c57      	adds	r7, r2, #1
 800baa6:	462b      	mov	r3, r5
 800baa8:	9906      	ldr	r1, [sp, #24]
 800baaa:	2020      	movs	r0, #32
 800baac:	47b0      	blx	r6
          while (l++ < width) {
 800baae:	46a0      	mov	r8, r4
            out(' ', buffer, idx++, maxlen);
 800bab0:	463a      	mov	r2, r7
          while (l++ < width) {
 800bab2:	f108 0401 	add.w	r4, r8, #1
 800bab6:	45c2      	cmp	sl, r8
 800bab8:	d8f4      	bhi.n	800baa4 <_vsnprintf+0x43c>
 800baba:	4691      	mov	r9, r2
 800babc:	e7db      	b.n	800ba76 <_vsnprintf+0x40e>
        const char* p = va_arg(va, char*);
 800babe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bac0:	1d1a      	adds	r2, r3, #4
 800bac2:	9214      	str	r2, [sp, #80]	; 0x50
 800bac4:	f8d3 8000 	ldr.w	r8, [r3]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800bac8:	9b07      	ldr	r3, [sp, #28]
 800baca:	b9f3      	cbnz	r3, 800bb0a <_vsnprintf+0x4a2>
 800bacc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bad0:	46c1      	mov	r9, r8
 800bad2:	e002      	b.n	800bada <_vsnprintf+0x472>
  for (s = str; *s && maxsize--; ++s);
 800bad4:	f109 0901 	add.w	r9, r9, #1
 800bad8:	4613      	mov	r3, r2
 800bada:	f899 2000 	ldrb.w	r2, [r9]
 800bade:	b112      	cbz	r2, 800bae6 <_vsnprintf+0x47e>
 800bae0:	1e5a      	subs	r2, r3, #1
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1f6      	bne.n	800bad4 <_vsnprintf+0x46c>
  return (unsigned int)(s - str);
 800bae6:	eba9 0908 	sub.w	r9, r9, r8
        if (flags & FLAGS_PRECISION) {
 800baea:	f417 6b80 	ands.w	fp, r7, #1024	; 0x400
 800baee:	d003      	beq.n	800baf8 <_vsnprintf+0x490>
          l = (l < precision ? l : precision);
 800baf0:	9b07      	ldr	r3, [sp, #28]
 800baf2:	4599      	cmp	r9, r3
 800baf4:	bf28      	it	cs
 800baf6:	4699      	movcs	r9, r3
        if (!(flags & FLAGS_LEFT)) {
 800baf8:	f017 0302 	ands.w	r3, r7, #2
 800bafc:	9308      	str	r3, [sp, #32]
 800bafe:	d006      	beq.n	800bb0e <_vsnprintf+0x4a6>
 800bb00:	4622      	mov	r2, r4
 800bb02:	465c      	mov	r4, fp
 800bb04:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800bb08:	e01b      	b.n	800bb42 <_vsnprintf+0x4da>
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800bb0a:	9b07      	ldr	r3, [sp, #28]
 800bb0c:	e7e0      	b.n	800bad0 <_vsnprintf+0x468>
 800bb0e:	4622      	mov	r2, r4
 800bb10:	e006      	b.n	800bb20 <_vsnprintf+0x4b8>
            out(' ', buffer, idx++, maxlen);
 800bb12:	1c54      	adds	r4, r2, #1
 800bb14:	462b      	mov	r3, r5
 800bb16:	9906      	ldr	r1, [sp, #24]
 800bb18:	2020      	movs	r0, #32
 800bb1a:	47b0      	blx	r6
          while (l++ < width) {
 800bb1c:	46b9      	mov	r9, r7
            out(' ', buffer, idx++, maxlen);
 800bb1e:	4622      	mov	r2, r4
          while (l++ < width) {
 800bb20:	f109 0701 	add.w	r7, r9, #1
 800bb24:	45ca      	cmp	sl, r9
 800bb26:	d8f4      	bhi.n	800bb12 <_vsnprintf+0x4aa>
 800bb28:	46b9      	mov	r9, r7
 800bb2a:	465c      	mov	r4, fp
 800bb2c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800bb30:	e007      	b.n	800bb42 <_vsnprintf+0x4da>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800bb32:	469b      	mov	fp, r3
          out(*(p++), buffer, idx++, maxlen);
 800bb34:	f108 0801 	add.w	r8, r8, #1
 800bb38:	1c57      	adds	r7, r2, #1
 800bb3a:	462b      	mov	r3, r5
 800bb3c:	9906      	ldr	r1, [sp, #24]
 800bb3e:	47b0      	blx	r6
 800bb40:	463a      	mov	r2, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800bb42:	f898 0000 	ldrb.w	r0, [r8]
 800bb46:	b130      	cbz	r0, 800bb56 <_vsnprintf+0x4ee>
 800bb48:	2c00      	cmp	r4, #0
 800bb4a:	d0f3      	beq.n	800bb34 <_vsnprintf+0x4cc>
 800bb4c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800bb50:	f1bb 0f00 	cmp.w	fp, #0
 800bb54:	d1ed      	bne.n	800bb32 <_vsnprintf+0x4ca>
 800bb56:	4614      	mov	r4, r2
        if (flags & FLAGS_LEFT) {
 800bb58:	9b08      	ldr	r3, [sp, #32]
 800bb5a:	b953      	cbnz	r3, 800bb72 <_vsnprintf+0x50a>
        format++;
 800bb5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb5e:	3301      	adds	r3, #1
 800bb60:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800bb62:	e58c      	b.n	800b67e <_vsnprintf+0x16>
            out(' ', buffer, idx++, maxlen);
 800bb64:	1c57      	adds	r7, r2, #1
 800bb66:	462b      	mov	r3, r5
 800bb68:	9906      	ldr	r1, [sp, #24]
 800bb6a:	2020      	movs	r0, #32
 800bb6c:	47b0      	blx	r6
          while (l++ < width) {
 800bb6e:	46a1      	mov	r9, r4
            out(' ', buffer, idx++, maxlen);
 800bb70:	463a      	mov	r2, r7
          while (l++ < width) {
 800bb72:	f109 0401 	add.w	r4, r9, #1
 800bb76:	45ca      	cmp	sl, r9
 800bb78:	d8f4      	bhi.n	800bb64 <_vsnprintf+0x4fc>
 800bb7a:	4614      	mov	r4, r2
 800bb7c:	e7ee      	b.n	800bb5c <_vsnprintf+0x4f4>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800bb7e:	f047 0721 	orr.w	r7, r7, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800bb82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb84:	1d1a      	adds	r2, r3, #4
 800bb86:	9214      	str	r2, [sp, #80]	; 0x50
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	9705      	str	r7, [sp, #20]
 800bb8c:	2208      	movs	r2, #8
 800bb8e:	9204      	str	r2, [sp, #16]
 800bb90:	9a07      	ldr	r2, [sp, #28]
 800bb92:	9203      	str	r2, [sp, #12]
 800bb94:	2210      	movs	r2, #16
 800bb96:	9202      	str	r2, [sp, #8]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	9201      	str	r2, [sp, #4]
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	462b      	mov	r3, r5
 800bba0:	4622      	mov	r2, r4
 800bba2:	9906      	ldr	r1, [sp, #24]
 800bba4:	4630      	mov	r0, r6
 800bba6:	f7ff fd16 	bl	800b5d6 <_ntoa_long>
 800bbaa:	4604      	mov	r4, r0
        format++;
 800bbac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbae:	3301      	adds	r3, #1
 800bbb0:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800bbb2:	e564      	b.n	800b67e <_vsnprintf+0x16>
        out('%', buffer, idx++, maxlen);
 800bbb4:	1c67      	adds	r7, r4, #1
 800bbb6:	462b      	mov	r3, r5
 800bbb8:	4622      	mov	r2, r4
 800bbba:	9906      	ldr	r1, [sp, #24]
 800bbbc:	2025      	movs	r0, #37	; 0x25
 800bbbe:	47b0      	blx	r6
        format++;
 800bbc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	9309      	str	r3, [sp, #36]	; 0x24
        out('%', buffer, idx++, maxlen);
 800bbc6:	463c      	mov	r4, r7
        break;
 800bbc8:	e559      	b.n	800b67e <_vsnprintf+0x16>

      default :
        out(*format, buffer, idx++, maxlen);
 800bbca:	1c67      	adds	r7, r4, #1
 800bbcc:	462b      	mov	r3, r5
 800bbce:	4622      	mov	r2, r4
 800bbd0:	9906      	ldr	r1, [sp, #24]
 800bbd2:	47b0      	blx	r6
        format++;
 800bbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	9309      	str	r3, [sp, #36]	; 0x24
        out(*format, buffer, idx++, maxlen);
 800bbda:	463c      	mov	r4, r7
        break;
 800bbdc:	e54f      	b.n	800b67e <_vsnprintf+0x16>
    out = _out_null;
 800bbde:	4e07      	ldr	r6, [pc, #28]	; (800bbfc <_vsnprintf+0x594>)
 800bbe0:	e54c      	b.n	800b67c <_vsnprintf+0x14>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800bbe2:	42ac      	cmp	r4, r5
 800bbe4:	d308      	bcc.n	800bbf8 <_vsnprintf+0x590>
 800bbe6:	1e6a      	subs	r2, r5, #1
 800bbe8:	462b      	mov	r3, r5
 800bbea:	9906      	ldr	r1, [sp, #24]
 800bbec:	2000      	movs	r0, #0
 800bbee:	47b0      	blx	r6

  // return written chars without terminating \0
  return (int)idx;
}
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	b00b      	add	sp, #44	; 0x2c
 800bbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800bbf8:	4622      	mov	r2, r4
 800bbfa:	e7f5      	b.n	800bbe8 <_vsnprintf+0x580>
 800bbfc:	0800b405 	.word	0x0800b405

0800bc00 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 800bc00:	b40e      	push	{r1, r2, r3}
 800bc02:	b500      	push	{lr}
 800bc04:	b084      	sub	sp, #16
 800bc06:	aa05      	add	r2, sp, #20
 800bc08:	f852 3b04 	ldr.w	r3, [r2], #4
  va_list va;
  va_start(va, format);
 800bc0c:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800bc0e:	9200      	str	r2, [sp, #0]
 800bc10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc14:	4601      	mov	r1, r0
 800bc16:	4804      	ldr	r0, [pc, #16]	; (800bc28 <sprintf_+0x28>)
 800bc18:	f7ff fd26 	bl	800b668 <_vsnprintf>
  va_end(va);
  return ret;
}
 800bc1c:	b004      	add	sp, #16
 800bc1e:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc22:	b003      	add	sp, #12
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	0800b3fd 	.word	0x0800b3fd

0800bc2c <__errno>:
 800bc2c:	4b01      	ldr	r3, [pc, #4]	; (800bc34 <__errno+0x8>)
 800bc2e:	6818      	ldr	r0, [r3, #0]
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	2000006c 	.word	0x2000006c

0800bc38 <__libc_init_array>:
 800bc38:	b570      	push	{r4, r5, r6, lr}
 800bc3a:	4e0d      	ldr	r6, [pc, #52]	; (800bc70 <__libc_init_array+0x38>)
 800bc3c:	4c0d      	ldr	r4, [pc, #52]	; (800bc74 <__libc_init_array+0x3c>)
 800bc3e:	1ba4      	subs	r4, r4, r6
 800bc40:	10a4      	asrs	r4, r4, #2
 800bc42:	2500      	movs	r5, #0
 800bc44:	42a5      	cmp	r5, r4
 800bc46:	d109      	bne.n	800bc5c <__libc_init_array+0x24>
 800bc48:	4e0b      	ldr	r6, [pc, #44]	; (800bc78 <__libc_init_array+0x40>)
 800bc4a:	4c0c      	ldr	r4, [pc, #48]	; (800bc7c <__libc_init_array+0x44>)
 800bc4c:	f000 fc58 	bl	800c500 <_init>
 800bc50:	1ba4      	subs	r4, r4, r6
 800bc52:	10a4      	asrs	r4, r4, #2
 800bc54:	2500      	movs	r5, #0
 800bc56:	42a5      	cmp	r5, r4
 800bc58:	d105      	bne.n	800bc66 <__libc_init_array+0x2e>
 800bc5a:	bd70      	pop	{r4, r5, r6, pc}
 800bc5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc60:	4798      	blx	r3
 800bc62:	3501      	adds	r5, #1
 800bc64:	e7ee      	b.n	800bc44 <__libc_init_array+0xc>
 800bc66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc6a:	4798      	blx	r3
 800bc6c:	3501      	adds	r5, #1
 800bc6e:	e7f2      	b.n	800bc56 <__libc_init_array+0x1e>
 800bc70:	0800d0b8 	.word	0x0800d0b8
 800bc74:	0800d0b8 	.word	0x0800d0b8
 800bc78:	0800d0b8 	.word	0x0800d0b8
 800bc7c:	0800d0bc 	.word	0x0800d0bc

0800bc80 <memcpy>:
 800bc80:	b510      	push	{r4, lr}
 800bc82:	1e43      	subs	r3, r0, #1
 800bc84:	440a      	add	r2, r1
 800bc86:	4291      	cmp	r1, r2
 800bc88:	d100      	bne.n	800bc8c <memcpy+0xc>
 800bc8a:	bd10      	pop	{r4, pc}
 800bc8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc94:	e7f7      	b.n	800bc86 <memcpy+0x6>

0800bc96 <memset>:
 800bc96:	4402      	add	r2, r0
 800bc98:	4603      	mov	r3, r0
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d100      	bne.n	800bca0 <memset+0xa>
 800bc9e:	4770      	bx	lr
 800bca0:	f803 1b01 	strb.w	r1, [r3], #1
 800bca4:	e7f9      	b.n	800bc9a <memset+0x4>
	...

0800bca8 <siprintf>:
 800bca8:	b40e      	push	{r1, r2, r3}
 800bcaa:	b500      	push	{lr}
 800bcac:	b09c      	sub	sp, #112	; 0x70
 800bcae:	ab1d      	add	r3, sp, #116	; 0x74
 800bcb0:	9002      	str	r0, [sp, #8]
 800bcb2:	9006      	str	r0, [sp, #24]
 800bcb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bcb8:	4809      	ldr	r0, [pc, #36]	; (800bce0 <siprintf+0x38>)
 800bcba:	9107      	str	r1, [sp, #28]
 800bcbc:	9104      	str	r1, [sp, #16]
 800bcbe:	4909      	ldr	r1, [pc, #36]	; (800bce4 <siprintf+0x3c>)
 800bcc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcc4:	9105      	str	r1, [sp, #20]
 800bcc6:	6800      	ldr	r0, [r0, #0]
 800bcc8:	9301      	str	r3, [sp, #4]
 800bcca:	a902      	add	r1, sp, #8
 800bccc:	f000 f896 	bl	800bdfc <_svfiprintf_r>
 800bcd0:	9b02      	ldr	r3, [sp, #8]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	701a      	strb	r2, [r3, #0]
 800bcd6:	b01c      	add	sp, #112	; 0x70
 800bcd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcdc:	b003      	add	sp, #12
 800bcde:	4770      	bx	lr
 800bce0:	2000006c 	.word	0x2000006c
 800bce4:	ffff0208 	.word	0xffff0208

0800bce8 <strcpy>:
 800bce8:	4603      	mov	r3, r0
 800bcea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcee:	f803 2b01 	strb.w	r2, [r3], #1
 800bcf2:	2a00      	cmp	r2, #0
 800bcf4:	d1f9      	bne.n	800bcea <strcpy+0x2>
 800bcf6:	4770      	bx	lr

0800bcf8 <strncmp>:
 800bcf8:	b510      	push	{r4, lr}
 800bcfa:	b16a      	cbz	r2, 800bd18 <strncmp+0x20>
 800bcfc:	3901      	subs	r1, #1
 800bcfe:	1884      	adds	r4, r0, r2
 800bd00:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bd04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d103      	bne.n	800bd14 <strncmp+0x1c>
 800bd0c:	42a0      	cmp	r0, r4
 800bd0e:	d001      	beq.n	800bd14 <strncmp+0x1c>
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1f5      	bne.n	800bd00 <strncmp+0x8>
 800bd14:	1a98      	subs	r0, r3, r2
 800bd16:	bd10      	pop	{r4, pc}
 800bd18:	4610      	mov	r0, r2
 800bd1a:	e7fc      	b.n	800bd16 <strncmp+0x1e>

0800bd1c <strncpy>:
 800bd1c:	b570      	push	{r4, r5, r6, lr}
 800bd1e:	3901      	subs	r1, #1
 800bd20:	4604      	mov	r4, r0
 800bd22:	b902      	cbnz	r2, 800bd26 <strncpy+0xa>
 800bd24:	bd70      	pop	{r4, r5, r6, pc}
 800bd26:	4623      	mov	r3, r4
 800bd28:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800bd2c:	f803 5b01 	strb.w	r5, [r3], #1
 800bd30:	1e56      	subs	r6, r2, #1
 800bd32:	b92d      	cbnz	r5, 800bd40 <strncpy+0x24>
 800bd34:	4414      	add	r4, r2
 800bd36:	42a3      	cmp	r3, r4
 800bd38:	d0f4      	beq.n	800bd24 <strncpy+0x8>
 800bd3a:	f803 5b01 	strb.w	r5, [r3], #1
 800bd3e:	e7fa      	b.n	800bd36 <strncpy+0x1a>
 800bd40:	461c      	mov	r4, r3
 800bd42:	4632      	mov	r2, r6
 800bd44:	e7ed      	b.n	800bd22 <strncpy+0x6>

0800bd46 <__ssputs_r>:
 800bd46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd4a:	688e      	ldr	r6, [r1, #8]
 800bd4c:	429e      	cmp	r6, r3
 800bd4e:	4682      	mov	sl, r0
 800bd50:	460c      	mov	r4, r1
 800bd52:	4690      	mov	r8, r2
 800bd54:	4699      	mov	r9, r3
 800bd56:	d837      	bhi.n	800bdc8 <__ssputs_r+0x82>
 800bd58:	898a      	ldrh	r2, [r1, #12]
 800bd5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd5e:	d031      	beq.n	800bdc4 <__ssputs_r+0x7e>
 800bd60:	6825      	ldr	r5, [r4, #0]
 800bd62:	6909      	ldr	r1, [r1, #16]
 800bd64:	1a6f      	subs	r7, r5, r1
 800bd66:	6965      	ldr	r5, [r4, #20]
 800bd68:	2302      	movs	r3, #2
 800bd6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd6e:	fb95 f5f3 	sdiv	r5, r5, r3
 800bd72:	f109 0301 	add.w	r3, r9, #1
 800bd76:	443b      	add	r3, r7
 800bd78:	429d      	cmp	r5, r3
 800bd7a:	bf38      	it	cc
 800bd7c:	461d      	movcc	r5, r3
 800bd7e:	0553      	lsls	r3, r2, #21
 800bd80:	d530      	bpl.n	800bde4 <__ssputs_r+0x9e>
 800bd82:	4629      	mov	r1, r5
 800bd84:	f000 fb22 	bl	800c3cc <_malloc_r>
 800bd88:	4606      	mov	r6, r0
 800bd8a:	b950      	cbnz	r0, 800bda2 <__ssputs_r+0x5c>
 800bd8c:	230c      	movs	r3, #12
 800bd8e:	f8ca 3000 	str.w	r3, [sl]
 800bd92:	89a3      	ldrh	r3, [r4, #12]
 800bd94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd98:	81a3      	strh	r3, [r4, #12]
 800bd9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bda2:	463a      	mov	r2, r7
 800bda4:	6921      	ldr	r1, [r4, #16]
 800bda6:	f7ff ff6b 	bl	800bc80 <memcpy>
 800bdaa:	89a3      	ldrh	r3, [r4, #12]
 800bdac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bdb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdb4:	81a3      	strh	r3, [r4, #12]
 800bdb6:	6126      	str	r6, [r4, #16]
 800bdb8:	6165      	str	r5, [r4, #20]
 800bdba:	443e      	add	r6, r7
 800bdbc:	1bed      	subs	r5, r5, r7
 800bdbe:	6026      	str	r6, [r4, #0]
 800bdc0:	60a5      	str	r5, [r4, #8]
 800bdc2:	464e      	mov	r6, r9
 800bdc4:	454e      	cmp	r6, r9
 800bdc6:	d900      	bls.n	800bdca <__ssputs_r+0x84>
 800bdc8:	464e      	mov	r6, r9
 800bdca:	4632      	mov	r2, r6
 800bdcc:	4641      	mov	r1, r8
 800bdce:	6820      	ldr	r0, [r4, #0]
 800bdd0:	f000 fa94 	bl	800c2fc <memmove>
 800bdd4:	68a3      	ldr	r3, [r4, #8]
 800bdd6:	1b9b      	subs	r3, r3, r6
 800bdd8:	60a3      	str	r3, [r4, #8]
 800bdda:	6823      	ldr	r3, [r4, #0]
 800bddc:	441e      	add	r6, r3
 800bdde:	6026      	str	r6, [r4, #0]
 800bde0:	2000      	movs	r0, #0
 800bde2:	e7dc      	b.n	800bd9e <__ssputs_r+0x58>
 800bde4:	462a      	mov	r2, r5
 800bde6:	f000 fb4b 	bl	800c480 <_realloc_r>
 800bdea:	4606      	mov	r6, r0
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d1e2      	bne.n	800bdb6 <__ssputs_r+0x70>
 800bdf0:	6921      	ldr	r1, [r4, #16]
 800bdf2:	4650      	mov	r0, sl
 800bdf4:	f000 fa9c 	bl	800c330 <_free_r>
 800bdf8:	e7c8      	b.n	800bd8c <__ssputs_r+0x46>
	...

0800bdfc <_svfiprintf_r>:
 800bdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be00:	461d      	mov	r5, r3
 800be02:	898b      	ldrh	r3, [r1, #12]
 800be04:	061f      	lsls	r7, r3, #24
 800be06:	b09d      	sub	sp, #116	; 0x74
 800be08:	4680      	mov	r8, r0
 800be0a:	460c      	mov	r4, r1
 800be0c:	4616      	mov	r6, r2
 800be0e:	d50f      	bpl.n	800be30 <_svfiprintf_r+0x34>
 800be10:	690b      	ldr	r3, [r1, #16]
 800be12:	b96b      	cbnz	r3, 800be30 <_svfiprintf_r+0x34>
 800be14:	2140      	movs	r1, #64	; 0x40
 800be16:	f000 fad9 	bl	800c3cc <_malloc_r>
 800be1a:	6020      	str	r0, [r4, #0]
 800be1c:	6120      	str	r0, [r4, #16]
 800be1e:	b928      	cbnz	r0, 800be2c <_svfiprintf_r+0x30>
 800be20:	230c      	movs	r3, #12
 800be22:	f8c8 3000 	str.w	r3, [r8]
 800be26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be2a:	e0c8      	b.n	800bfbe <_svfiprintf_r+0x1c2>
 800be2c:	2340      	movs	r3, #64	; 0x40
 800be2e:	6163      	str	r3, [r4, #20]
 800be30:	2300      	movs	r3, #0
 800be32:	9309      	str	r3, [sp, #36]	; 0x24
 800be34:	2320      	movs	r3, #32
 800be36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be3a:	2330      	movs	r3, #48	; 0x30
 800be3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be40:	9503      	str	r5, [sp, #12]
 800be42:	f04f 0b01 	mov.w	fp, #1
 800be46:	4637      	mov	r7, r6
 800be48:	463d      	mov	r5, r7
 800be4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800be4e:	b10b      	cbz	r3, 800be54 <_svfiprintf_r+0x58>
 800be50:	2b25      	cmp	r3, #37	; 0x25
 800be52:	d13e      	bne.n	800bed2 <_svfiprintf_r+0xd6>
 800be54:	ebb7 0a06 	subs.w	sl, r7, r6
 800be58:	d00b      	beq.n	800be72 <_svfiprintf_r+0x76>
 800be5a:	4653      	mov	r3, sl
 800be5c:	4632      	mov	r2, r6
 800be5e:	4621      	mov	r1, r4
 800be60:	4640      	mov	r0, r8
 800be62:	f7ff ff70 	bl	800bd46 <__ssputs_r>
 800be66:	3001      	adds	r0, #1
 800be68:	f000 80a4 	beq.w	800bfb4 <_svfiprintf_r+0x1b8>
 800be6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be6e:	4453      	add	r3, sl
 800be70:	9309      	str	r3, [sp, #36]	; 0x24
 800be72:	783b      	ldrb	r3, [r7, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	f000 809d 	beq.w	800bfb4 <_svfiprintf_r+0x1b8>
 800be7a:	2300      	movs	r3, #0
 800be7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be84:	9304      	str	r3, [sp, #16]
 800be86:	9307      	str	r3, [sp, #28]
 800be88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be8c:	931a      	str	r3, [sp, #104]	; 0x68
 800be8e:	462f      	mov	r7, r5
 800be90:	2205      	movs	r2, #5
 800be92:	f817 1b01 	ldrb.w	r1, [r7], #1
 800be96:	4850      	ldr	r0, [pc, #320]	; (800bfd8 <_svfiprintf_r+0x1dc>)
 800be98:	f7f4 f9aa 	bl	80001f0 <memchr>
 800be9c:	9b04      	ldr	r3, [sp, #16]
 800be9e:	b9d0      	cbnz	r0, 800bed6 <_svfiprintf_r+0xda>
 800bea0:	06d9      	lsls	r1, r3, #27
 800bea2:	bf44      	itt	mi
 800bea4:	2220      	movmi	r2, #32
 800bea6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800beaa:	071a      	lsls	r2, r3, #28
 800beac:	bf44      	itt	mi
 800beae:	222b      	movmi	r2, #43	; 0x2b
 800beb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800beb4:	782a      	ldrb	r2, [r5, #0]
 800beb6:	2a2a      	cmp	r2, #42	; 0x2a
 800beb8:	d015      	beq.n	800bee6 <_svfiprintf_r+0xea>
 800beba:	9a07      	ldr	r2, [sp, #28]
 800bebc:	462f      	mov	r7, r5
 800bebe:	2000      	movs	r0, #0
 800bec0:	250a      	movs	r5, #10
 800bec2:	4639      	mov	r1, r7
 800bec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bec8:	3b30      	subs	r3, #48	; 0x30
 800beca:	2b09      	cmp	r3, #9
 800becc:	d94d      	bls.n	800bf6a <_svfiprintf_r+0x16e>
 800bece:	b1b8      	cbz	r0, 800bf00 <_svfiprintf_r+0x104>
 800bed0:	e00f      	b.n	800bef2 <_svfiprintf_r+0xf6>
 800bed2:	462f      	mov	r7, r5
 800bed4:	e7b8      	b.n	800be48 <_svfiprintf_r+0x4c>
 800bed6:	4a40      	ldr	r2, [pc, #256]	; (800bfd8 <_svfiprintf_r+0x1dc>)
 800bed8:	1a80      	subs	r0, r0, r2
 800beda:	fa0b f000 	lsl.w	r0, fp, r0
 800bede:	4318      	orrs	r0, r3
 800bee0:	9004      	str	r0, [sp, #16]
 800bee2:	463d      	mov	r5, r7
 800bee4:	e7d3      	b.n	800be8e <_svfiprintf_r+0x92>
 800bee6:	9a03      	ldr	r2, [sp, #12]
 800bee8:	1d11      	adds	r1, r2, #4
 800beea:	6812      	ldr	r2, [r2, #0]
 800beec:	9103      	str	r1, [sp, #12]
 800beee:	2a00      	cmp	r2, #0
 800bef0:	db01      	blt.n	800bef6 <_svfiprintf_r+0xfa>
 800bef2:	9207      	str	r2, [sp, #28]
 800bef4:	e004      	b.n	800bf00 <_svfiprintf_r+0x104>
 800bef6:	4252      	negs	r2, r2
 800bef8:	f043 0302 	orr.w	r3, r3, #2
 800befc:	9207      	str	r2, [sp, #28]
 800befe:	9304      	str	r3, [sp, #16]
 800bf00:	783b      	ldrb	r3, [r7, #0]
 800bf02:	2b2e      	cmp	r3, #46	; 0x2e
 800bf04:	d10c      	bne.n	800bf20 <_svfiprintf_r+0x124>
 800bf06:	787b      	ldrb	r3, [r7, #1]
 800bf08:	2b2a      	cmp	r3, #42	; 0x2a
 800bf0a:	d133      	bne.n	800bf74 <_svfiprintf_r+0x178>
 800bf0c:	9b03      	ldr	r3, [sp, #12]
 800bf0e:	1d1a      	adds	r2, r3, #4
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	9203      	str	r2, [sp, #12]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	bfb8      	it	lt
 800bf18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bf1c:	3702      	adds	r7, #2
 800bf1e:	9305      	str	r3, [sp, #20]
 800bf20:	4d2e      	ldr	r5, [pc, #184]	; (800bfdc <_svfiprintf_r+0x1e0>)
 800bf22:	7839      	ldrb	r1, [r7, #0]
 800bf24:	2203      	movs	r2, #3
 800bf26:	4628      	mov	r0, r5
 800bf28:	f7f4 f962 	bl	80001f0 <memchr>
 800bf2c:	b138      	cbz	r0, 800bf3e <_svfiprintf_r+0x142>
 800bf2e:	2340      	movs	r3, #64	; 0x40
 800bf30:	1b40      	subs	r0, r0, r5
 800bf32:	fa03 f000 	lsl.w	r0, r3, r0
 800bf36:	9b04      	ldr	r3, [sp, #16]
 800bf38:	4303      	orrs	r3, r0
 800bf3a:	3701      	adds	r7, #1
 800bf3c:	9304      	str	r3, [sp, #16]
 800bf3e:	7839      	ldrb	r1, [r7, #0]
 800bf40:	4827      	ldr	r0, [pc, #156]	; (800bfe0 <_svfiprintf_r+0x1e4>)
 800bf42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf46:	2206      	movs	r2, #6
 800bf48:	1c7e      	adds	r6, r7, #1
 800bf4a:	f7f4 f951 	bl	80001f0 <memchr>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d038      	beq.n	800bfc4 <_svfiprintf_r+0x1c8>
 800bf52:	4b24      	ldr	r3, [pc, #144]	; (800bfe4 <_svfiprintf_r+0x1e8>)
 800bf54:	bb13      	cbnz	r3, 800bf9c <_svfiprintf_r+0x1a0>
 800bf56:	9b03      	ldr	r3, [sp, #12]
 800bf58:	3307      	adds	r3, #7
 800bf5a:	f023 0307 	bic.w	r3, r3, #7
 800bf5e:	3308      	adds	r3, #8
 800bf60:	9303      	str	r3, [sp, #12]
 800bf62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf64:	444b      	add	r3, r9
 800bf66:	9309      	str	r3, [sp, #36]	; 0x24
 800bf68:	e76d      	b.n	800be46 <_svfiprintf_r+0x4a>
 800bf6a:	fb05 3202 	mla	r2, r5, r2, r3
 800bf6e:	2001      	movs	r0, #1
 800bf70:	460f      	mov	r7, r1
 800bf72:	e7a6      	b.n	800bec2 <_svfiprintf_r+0xc6>
 800bf74:	2300      	movs	r3, #0
 800bf76:	3701      	adds	r7, #1
 800bf78:	9305      	str	r3, [sp, #20]
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	250a      	movs	r5, #10
 800bf7e:	4638      	mov	r0, r7
 800bf80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf84:	3a30      	subs	r2, #48	; 0x30
 800bf86:	2a09      	cmp	r2, #9
 800bf88:	d903      	bls.n	800bf92 <_svfiprintf_r+0x196>
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d0c8      	beq.n	800bf20 <_svfiprintf_r+0x124>
 800bf8e:	9105      	str	r1, [sp, #20]
 800bf90:	e7c6      	b.n	800bf20 <_svfiprintf_r+0x124>
 800bf92:	fb05 2101 	mla	r1, r5, r1, r2
 800bf96:	2301      	movs	r3, #1
 800bf98:	4607      	mov	r7, r0
 800bf9a:	e7f0      	b.n	800bf7e <_svfiprintf_r+0x182>
 800bf9c:	ab03      	add	r3, sp, #12
 800bf9e:	9300      	str	r3, [sp, #0]
 800bfa0:	4622      	mov	r2, r4
 800bfa2:	4b11      	ldr	r3, [pc, #68]	; (800bfe8 <_svfiprintf_r+0x1ec>)
 800bfa4:	a904      	add	r1, sp, #16
 800bfa6:	4640      	mov	r0, r8
 800bfa8:	f3af 8000 	nop.w
 800bfac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800bfb0:	4681      	mov	r9, r0
 800bfb2:	d1d6      	bne.n	800bf62 <_svfiprintf_r+0x166>
 800bfb4:	89a3      	ldrh	r3, [r4, #12]
 800bfb6:	065b      	lsls	r3, r3, #25
 800bfb8:	f53f af35 	bmi.w	800be26 <_svfiprintf_r+0x2a>
 800bfbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfbe:	b01d      	add	sp, #116	; 0x74
 800bfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc4:	ab03      	add	r3, sp, #12
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	4622      	mov	r2, r4
 800bfca:	4b07      	ldr	r3, [pc, #28]	; (800bfe8 <_svfiprintf_r+0x1ec>)
 800bfcc:	a904      	add	r1, sp, #16
 800bfce:	4640      	mov	r0, r8
 800bfd0:	f000 f882 	bl	800c0d8 <_printf_i>
 800bfd4:	e7ea      	b.n	800bfac <_svfiprintf_r+0x1b0>
 800bfd6:	bf00      	nop
 800bfd8:	0800d07c 	.word	0x0800d07c
 800bfdc:	0800d082 	.word	0x0800d082
 800bfe0:	0800d086 	.word	0x0800d086
 800bfe4:	00000000 	.word	0x00000000
 800bfe8:	0800bd47 	.word	0x0800bd47

0800bfec <_printf_common>:
 800bfec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bff0:	4691      	mov	r9, r2
 800bff2:	461f      	mov	r7, r3
 800bff4:	688a      	ldr	r2, [r1, #8]
 800bff6:	690b      	ldr	r3, [r1, #16]
 800bff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bffc:	4293      	cmp	r3, r2
 800bffe:	bfb8      	it	lt
 800c000:	4613      	movlt	r3, r2
 800c002:	f8c9 3000 	str.w	r3, [r9]
 800c006:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c00a:	4606      	mov	r6, r0
 800c00c:	460c      	mov	r4, r1
 800c00e:	b112      	cbz	r2, 800c016 <_printf_common+0x2a>
 800c010:	3301      	adds	r3, #1
 800c012:	f8c9 3000 	str.w	r3, [r9]
 800c016:	6823      	ldr	r3, [r4, #0]
 800c018:	0699      	lsls	r1, r3, #26
 800c01a:	bf42      	ittt	mi
 800c01c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c020:	3302      	addmi	r3, #2
 800c022:	f8c9 3000 	strmi.w	r3, [r9]
 800c026:	6825      	ldr	r5, [r4, #0]
 800c028:	f015 0506 	ands.w	r5, r5, #6
 800c02c:	d107      	bne.n	800c03e <_printf_common+0x52>
 800c02e:	f104 0a19 	add.w	sl, r4, #25
 800c032:	68e3      	ldr	r3, [r4, #12]
 800c034:	f8d9 2000 	ldr.w	r2, [r9]
 800c038:	1a9b      	subs	r3, r3, r2
 800c03a:	42ab      	cmp	r3, r5
 800c03c:	dc28      	bgt.n	800c090 <_printf_common+0xa4>
 800c03e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c042:	6822      	ldr	r2, [r4, #0]
 800c044:	3300      	adds	r3, #0
 800c046:	bf18      	it	ne
 800c048:	2301      	movne	r3, #1
 800c04a:	0692      	lsls	r2, r2, #26
 800c04c:	d42d      	bmi.n	800c0aa <_printf_common+0xbe>
 800c04e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c052:	4639      	mov	r1, r7
 800c054:	4630      	mov	r0, r6
 800c056:	47c0      	blx	r8
 800c058:	3001      	adds	r0, #1
 800c05a:	d020      	beq.n	800c09e <_printf_common+0xb2>
 800c05c:	6823      	ldr	r3, [r4, #0]
 800c05e:	68e5      	ldr	r5, [r4, #12]
 800c060:	f8d9 2000 	ldr.w	r2, [r9]
 800c064:	f003 0306 	and.w	r3, r3, #6
 800c068:	2b04      	cmp	r3, #4
 800c06a:	bf08      	it	eq
 800c06c:	1aad      	subeq	r5, r5, r2
 800c06e:	68a3      	ldr	r3, [r4, #8]
 800c070:	6922      	ldr	r2, [r4, #16]
 800c072:	bf0c      	ite	eq
 800c074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c078:	2500      	movne	r5, #0
 800c07a:	4293      	cmp	r3, r2
 800c07c:	bfc4      	itt	gt
 800c07e:	1a9b      	subgt	r3, r3, r2
 800c080:	18ed      	addgt	r5, r5, r3
 800c082:	f04f 0900 	mov.w	r9, #0
 800c086:	341a      	adds	r4, #26
 800c088:	454d      	cmp	r5, r9
 800c08a:	d11a      	bne.n	800c0c2 <_printf_common+0xd6>
 800c08c:	2000      	movs	r0, #0
 800c08e:	e008      	b.n	800c0a2 <_printf_common+0xb6>
 800c090:	2301      	movs	r3, #1
 800c092:	4652      	mov	r2, sl
 800c094:	4639      	mov	r1, r7
 800c096:	4630      	mov	r0, r6
 800c098:	47c0      	blx	r8
 800c09a:	3001      	adds	r0, #1
 800c09c:	d103      	bne.n	800c0a6 <_printf_common+0xba>
 800c09e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a6:	3501      	adds	r5, #1
 800c0a8:	e7c3      	b.n	800c032 <_printf_common+0x46>
 800c0aa:	18e1      	adds	r1, r4, r3
 800c0ac:	1c5a      	adds	r2, r3, #1
 800c0ae:	2030      	movs	r0, #48	; 0x30
 800c0b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0b4:	4422      	add	r2, r4
 800c0b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0be:	3302      	adds	r3, #2
 800c0c0:	e7c5      	b.n	800c04e <_printf_common+0x62>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	4622      	mov	r2, r4
 800c0c6:	4639      	mov	r1, r7
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	47c0      	blx	r8
 800c0cc:	3001      	adds	r0, #1
 800c0ce:	d0e6      	beq.n	800c09e <_printf_common+0xb2>
 800c0d0:	f109 0901 	add.w	r9, r9, #1
 800c0d4:	e7d8      	b.n	800c088 <_printf_common+0x9c>
	...

0800c0d8 <_printf_i>:
 800c0d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	7e09      	ldrb	r1, [r1, #24]
 800c0e4:	b085      	sub	sp, #20
 800c0e6:	296e      	cmp	r1, #110	; 0x6e
 800c0e8:	4617      	mov	r7, r2
 800c0ea:	4606      	mov	r6, r0
 800c0ec:	4698      	mov	r8, r3
 800c0ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0f0:	f000 80b3 	beq.w	800c25a <_printf_i+0x182>
 800c0f4:	d822      	bhi.n	800c13c <_printf_i+0x64>
 800c0f6:	2963      	cmp	r1, #99	; 0x63
 800c0f8:	d036      	beq.n	800c168 <_printf_i+0x90>
 800c0fa:	d80a      	bhi.n	800c112 <_printf_i+0x3a>
 800c0fc:	2900      	cmp	r1, #0
 800c0fe:	f000 80b9 	beq.w	800c274 <_printf_i+0x19c>
 800c102:	2958      	cmp	r1, #88	; 0x58
 800c104:	f000 8083 	beq.w	800c20e <_printf_i+0x136>
 800c108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c10c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c110:	e032      	b.n	800c178 <_printf_i+0xa0>
 800c112:	2964      	cmp	r1, #100	; 0x64
 800c114:	d001      	beq.n	800c11a <_printf_i+0x42>
 800c116:	2969      	cmp	r1, #105	; 0x69
 800c118:	d1f6      	bne.n	800c108 <_printf_i+0x30>
 800c11a:	6820      	ldr	r0, [r4, #0]
 800c11c:	6813      	ldr	r3, [r2, #0]
 800c11e:	0605      	lsls	r5, r0, #24
 800c120:	f103 0104 	add.w	r1, r3, #4
 800c124:	d52a      	bpl.n	800c17c <_printf_i+0xa4>
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	6011      	str	r1, [r2, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	da03      	bge.n	800c136 <_printf_i+0x5e>
 800c12e:	222d      	movs	r2, #45	; 0x2d
 800c130:	425b      	negs	r3, r3
 800c132:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c136:	486f      	ldr	r0, [pc, #444]	; (800c2f4 <_printf_i+0x21c>)
 800c138:	220a      	movs	r2, #10
 800c13a:	e039      	b.n	800c1b0 <_printf_i+0xd8>
 800c13c:	2973      	cmp	r1, #115	; 0x73
 800c13e:	f000 809d 	beq.w	800c27c <_printf_i+0x1a4>
 800c142:	d808      	bhi.n	800c156 <_printf_i+0x7e>
 800c144:	296f      	cmp	r1, #111	; 0x6f
 800c146:	d020      	beq.n	800c18a <_printf_i+0xb2>
 800c148:	2970      	cmp	r1, #112	; 0x70
 800c14a:	d1dd      	bne.n	800c108 <_printf_i+0x30>
 800c14c:	6823      	ldr	r3, [r4, #0]
 800c14e:	f043 0320 	orr.w	r3, r3, #32
 800c152:	6023      	str	r3, [r4, #0]
 800c154:	e003      	b.n	800c15e <_printf_i+0x86>
 800c156:	2975      	cmp	r1, #117	; 0x75
 800c158:	d017      	beq.n	800c18a <_printf_i+0xb2>
 800c15a:	2978      	cmp	r1, #120	; 0x78
 800c15c:	d1d4      	bne.n	800c108 <_printf_i+0x30>
 800c15e:	2378      	movs	r3, #120	; 0x78
 800c160:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c164:	4864      	ldr	r0, [pc, #400]	; (800c2f8 <_printf_i+0x220>)
 800c166:	e055      	b.n	800c214 <_printf_i+0x13c>
 800c168:	6813      	ldr	r3, [r2, #0]
 800c16a:	1d19      	adds	r1, r3, #4
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	6011      	str	r1, [r2, #0]
 800c170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c178:	2301      	movs	r3, #1
 800c17a:	e08c      	b.n	800c296 <_printf_i+0x1be>
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	6011      	str	r1, [r2, #0]
 800c180:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c184:	bf18      	it	ne
 800c186:	b21b      	sxthne	r3, r3
 800c188:	e7cf      	b.n	800c12a <_printf_i+0x52>
 800c18a:	6813      	ldr	r3, [r2, #0]
 800c18c:	6825      	ldr	r5, [r4, #0]
 800c18e:	1d18      	adds	r0, r3, #4
 800c190:	6010      	str	r0, [r2, #0]
 800c192:	0628      	lsls	r0, r5, #24
 800c194:	d501      	bpl.n	800c19a <_printf_i+0xc2>
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	e002      	b.n	800c1a0 <_printf_i+0xc8>
 800c19a:	0668      	lsls	r0, r5, #25
 800c19c:	d5fb      	bpl.n	800c196 <_printf_i+0xbe>
 800c19e:	881b      	ldrh	r3, [r3, #0]
 800c1a0:	4854      	ldr	r0, [pc, #336]	; (800c2f4 <_printf_i+0x21c>)
 800c1a2:	296f      	cmp	r1, #111	; 0x6f
 800c1a4:	bf14      	ite	ne
 800c1a6:	220a      	movne	r2, #10
 800c1a8:	2208      	moveq	r2, #8
 800c1aa:	2100      	movs	r1, #0
 800c1ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1b0:	6865      	ldr	r5, [r4, #4]
 800c1b2:	60a5      	str	r5, [r4, #8]
 800c1b4:	2d00      	cmp	r5, #0
 800c1b6:	f2c0 8095 	blt.w	800c2e4 <_printf_i+0x20c>
 800c1ba:	6821      	ldr	r1, [r4, #0]
 800c1bc:	f021 0104 	bic.w	r1, r1, #4
 800c1c0:	6021      	str	r1, [r4, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d13d      	bne.n	800c242 <_printf_i+0x16a>
 800c1c6:	2d00      	cmp	r5, #0
 800c1c8:	f040 808e 	bne.w	800c2e8 <_printf_i+0x210>
 800c1cc:	4665      	mov	r5, ip
 800c1ce:	2a08      	cmp	r2, #8
 800c1d0:	d10b      	bne.n	800c1ea <_printf_i+0x112>
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	07db      	lsls	r3, r3, #31
 800c1d6:	d508      	bpl.n	800c1ea <_printf_i+0x112>
 800c1d8:	6923      	ldr	r3, [r4, #16]
 800c1da:	6862      	ldr	r2, [r4, #4]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	bfde      	ittt	le
 800c1e0:	2330      	movle	r3, #48	; 0x30
 800c1e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1e6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c1ea:	ebac 0305 	sub.w	r3, ip, r5
 800c1ee:	6123      	str	r3, [r4, #16]
 800c1f0:	f8cd 8000 	str.w	r8, [sp]
 800c1f4:	463b      	mov	r3, r7
 800c1f6:	aa03      	add	r2, sp, #12
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	f7ff fef6 	bl	800bfec <_printf_common>
 800c200:	3001      	adds	r0, #1
 800c202:	d14d      	bne.n	800c2a0 <_printf_i+0x1c8>
 800c204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c208:	b005      	add	sp, #20
 800c20a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c20e:	4839      	ldr	r0, [pc, #228]	; (800c2f4 <_printf_i+0x21c>)
 800c210:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c214:	6813      	ldr	r3, [r2, #0]
 800c216:	6821      	ldr	r1, [r4, #0]
 800c218:	1d1d      	adds	r5, r3, #4
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	6015      	str	r5, [r2, #0]
 800c21e:	060a      	lsls	r2, r1, #24
 800c220:	d50b      	bpl.n	800c23a <_printf_i+0x162>
 800c222:	07ca      	lsls	r2, r1, #31
 800c224:	bf44      	itt	mi
 800c226:	f041 0120 	orrmi.w	r1, r1, #32
 800c22a:	6021      	strmi	r1, [r4, #0]
 800c22c:	b91b      	cbnz	r3, 800c236 <_printf_i+0x15e>
 800c22e:	6822      	ldr	r2, [r4, #0]
 800c230:	f022 0220 	bic.w	r2, r2, #32
 800c234:	6022      	str	r2, [r4, #0]
 800c236:	2210      	movs	r2, #16
 800c238:	e7b7      	b.n	800c1aa <_printf_i+0xd2>
 800c23a:	064d      	lsls	r5, r1, #25
 800c23c:	bf48      	it	mi
 800c23e:	b29b      	uxthmi	r3, r3
 800c240:	e7ef      	b.n	800c222 <_printf_i+0x14a>
 800c242:	4665      	mov	r5, ip
 800c244:	fbb3 f1f2 	udiv	r1, r3, r2
 800c248:	fb02 3311 	mls	r3, r2, r1, r3
 800c24c:	5cc3      	ldrb	r3, [r0, r3]
 800c24e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c252:	460b      	mov	r3, r1
 800c254:	2900      	cmp	r1, #0
 800c256:	d1f5      	bne.n	800c244 <_printf_i+0x16c>
 800c258:	e7b9      	b.n	800c1ce <_printf_i+0xf6>
 800c25a:	6813      	ldr	r3, [r2, #0]
 800c25c:	6825      	ldr	r5, [r4, #0]
 800c25e:	6961      	ldr	r1, [r4, #20]
 800c260:	1d18      	adds	r0, r3, #4
 800c262:	6010      	str	r0, [r2, #0]
 800c264:	0628      	lsls	r0, r5, #24
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	d501      	bpl.n	800c26e <_printf_i+0x196>
 800c26a:	6019      	str	r1, [r3, #0]
 800c26c:	e002      	b.n	800c274 <_printf_i+0x19c>
 800c26e:	066a      	lsls	r2, r5, #25
 800c270:	d5fb      	bpl.n	800c26a <_printf_i+0x192>
 800c272:	8019      	strh	r1, [r3, #0]
 800c274:	2300      	movs	r3, #0
 800c276:	6123      	str	r3, [r4, #16]
 800c278:	4665      	mov	r5, ip
 800c27a:	e7b9      	b.n	800c1f0 <_printf_i+0x118>
 800c27c:	6813      	ldr	r3, [r2, #0]
 800c27e:	1d19      	adds	r1, r3, #4
 800c280:	6011      	str	r1, [r2, #0]
 800c282:	681d      	ldr	r5, [r3, #0]
 800c284:	6862      	ldr	r2, [r4, #4]
 800c286:	2100      	movs	r1, #0
 800c288:	4628      	mov	r0, r5
 800c28a:	f7f3 ffb1 	bl	80001f0 <memchr>
 800c28e:	b108      	cbz	r0, 800c294 <_printf_i+0x1bc>
 800c290:	1b40      	subs	r0, r0, r5
 800c292:	6060      	str	r0, [r4, #4]
 800c294:	6863      	ldr	r3, [r4, #4]
 800c296:	6123      	str	r3, [r4, #16]
 800c298:	2300      	movs	r3, #0
 800c29a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c29e:	e7a7      	b.n	800c1f0 <_printf_i+0x118>
 800c2a0:	6923      	ldr	r3, [r4, #16]
 800c2a2:	462a      	mov	r2, r5
 800c2a4:	4639      	mov	r1, r7
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	47c0      	blx	r8
 800c2aa:	3001      	adds	r0, #1
 800c2ac:	d0aa      	beq.n	800c204 <_printf_i+0x12c>
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	079b      	lsls	r3, r3, #30
 800c2b2:	d413      	bmi.n	800c2dc <_printf_i+0x204>
 800c2b4:	68e0      	ldr	r0, [r4, #12]
 800c2b6:	9b03      	ldr	r3, [sp, #12]
 800c2b8:	4298      	cmp	r0, r3
 800c2ba:	bfb8      	it	lt
 800c2bc:	4618      	movlt	r0, r3
 800c2be:	e7a3      	b.n	800c208 <_printf_i+0x130>
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	464a      	mov	r2, r9
 800c2c4:	4639      	mov	r1, r7
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	47c0      	blx	r8
 800c2ca:	3001      	adds	r0, #1
 800c2cc:	d09a      	beq.n	800c204 <_printf_i+0x12c>
 800c2ce:	3501      	adds	r5, #1
 800c2d0:	68e3      	ldr	r3, [r4, #12]
 800c2d2:	9a03      	ldr	r2, [sp, #12]
 800c2d4:	1a9b      	subs	r3, r3, r2
 800c2d6:	42ab      	cmp	r3, r5
 800c2d8:	dcf2      	bgt.n	800c2c0 <_printf_i+0x1e8>
 800c2da:	e7eb      	b.n	800c2b4 <_printf_i+0x1dc>
 800c2dc:	2500      	movs	r5, #0
 800c2de:	f104 0919 	add.w	r9, r4, #25
 800c2e2:	e7f5      	b.n	800c2d0 <_printf_i+0x1f8>
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1ac      	bne.n	800c242 <_printf_i+0x16a>
 800c2e8:	7803      	ldrb	r3, [r0, #0]
 800c2ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2f2:	e76c      	b.n	800c1ce <_printf_i+0xf6>
 800c2f4:	0800d08d 	.word	0x0800d08d
 800c2f8:	0800d09e 	.word	0x0800d09e

0800c2fc <memmove>:
 800c2fc:	4288      	cmp	r0, r1
 800c2fe:	b510      	push	{r4, lr}
 800c300:	eb01 0302 	add.w	r3, r1, r2
 800c304:	d807      	bhi.n	800c316 <memmove+0x1a>
 800c306:	1e42      	subs	r2, r0, #1
 800c308:	4299      	cmp	r1, r3
 800c30a:	d00a      	beq.n	800c322 <memmove+0x26>
 800c30c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c310:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c314:	e7f8      	b.n	800c308 <memmove+0xc>
 800c316:	4283      	cmp	r3, r0
 800c318:	d9f5      	bls.n	800c306 <memmove+0xa>
 800c31a:	1881      	adds	r1, r0, r2
 800c31c:	1ad2      	subs	r2, r2, r3
 800c31e:	42d3      	cmn	r3, r2
 800c320:	d100      	bne.n	800c324 <memmove+0x28>
 800c322:	bd10      	pop	{r4, pc}
 800c324:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c328:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c32c:	e7f7      	b.n	800c31e <memmove+0x22>
	...

0800c330 <_free_r>:
 800c330:	b538      	push	{r3, r4, r5, lr}
 800c332:	4605      	mov	r5, r0
 800c334:	2900      	cmp	r1, #0
 800c336:	d045      	beq.n	800c3c4 <_free_r+0x94>
 800c338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c33c:	1f0c      	subs	r4, r1, #4
 800c33e:	2b00      	cmp	r3, #0
 800c340:	bfb8      	it	lt
 800c342:	18e4      	addlt	r4, r4, r3
 800c344:	f000 f8d2 	bl	800c4ec <__malloc_lock>
 800c348:	4a1f      	ldr	r2, [pc, #124]	; (800c3c8 <_free_r+0x98>)
 800c34a:	6813      	ldr	r3, [r2, #0]
 800c34c:	4610      	mov	r0, r2
 800c34e:	b933      	cbnz	r3, 800c35e <_free_r+0x2e>
 800c350:	6063      	str	r3, [r4, #4]
 800c352:	6014      	str	r4, [r2, #0]
 800c354:	4628      	mov	r0, r5
 800c356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c35a:	f000 b8c8 	b.w	800c4ee <__malloc_unlock>
 800c35e:	42a3      	cmp	r3, r4
 800c360:	d90c      	bls.n	800c37c <_free_r+0x4c>
 800c362:	6821      	ldr	r1, [r4, #0]
 800c364:	1862      	adds	r2, r4, r1
 800c366:	4293      	cmp	r3, r2
 800c368:	bf04      	itt	eq
 800c36a:	681a      	ldreq	r2, [r3, #0]
 800c36c:	685b      	ldreq	r3, [r3, #4]
 800c36e:	6063      	str	r3, [r4, #4]
 800c370:	bf04      	itt	eq
 800c372:	1852      	addeq	r2, r2, r1
 800c374:	6022      	streq	r2, [r4, #0]
 800c376:	6004      	str	r4, [r0, #0]
 800c378:	e7ec      	b.n	800c354 <_free_r+0x24>
 800c37a:	4613      	mov	r3, r2
 800c37c:	685a      	ldr	r2, [r3, #4]
 800c37e:	b10a      	cbz	r2, 800c384 <_free_r+0x54>
 800c380:	42a2      	cmp	r2, r4
 800c382:	d9fa      	bls.n	800c37a <_free_r+0x4a>
 800c384:	6819      	ldr	r1, [r3, #0]
 800c386:	1858      	adds	r0, r3, r1
 800c388:	42a0      	cmp	r0, r4
 800c38a:	d10b      	bne.n	800c3a4 <_free_r+0x74>
 800c38c:	6820      	ldr	r0, [r4, #0]
 800c38e:	4401      	add	r1, r0
 800c390:	1858      	adds	r0, r3, r1
 800c392:	4282      	cmp	r2, r0
 800c394:	6019      	str	r1, [r3, #0]
 800c396:	d1dd      	bne.n	800c354 <_free_r+0x24>
 800c398:	6810      	ldr	r0, [r2, #0]
 800c39a:	6852      	ldr	r2, [r2, #4]
 800c39c:	605a      	str	r2, [r3, #4]
 800c39e:	4401      	add	r1, r0
 800c3a0:	6019      	str	r1, [r3, #0]
 800c3a2:	e7d7      	b.n	800c354 <_free_r+0x24>
 800c3a4:	d902      	bls.n	800c3ac <_free_r+0x7c>
 800c3a6:	230c      	movs	r3, #12
 800c3a8:	602b      	str	r3, [r5, #0]
 800c3aa:	e7d3      	b.n	800c354 <_free_r+0x24>
 800c3ac:	6820      	ldr	r0, [r4, #0]
 800c3ae:	1821      	adds	r1, r4, r0
 800c3b0:	428a      	cmp	r2, r1
 800c3b2:	bf04      	itt	eq
 800c3b4:	6811      	ldreq	r1, [r2, #0]
 800c3b6:	6852      	ldreq	r2, [r2, #4]
 800c3b8:	6062      	str	r2, [r4, #4]
 800c3ba:	bf04      	itt	eq
 800c3bc:	1809      	addeq	r1, r1, r0
 800c3be:	6021      	streq	r1, [r4, #0]
 800c3c0:	605c      	str	r4, [r3, #4]
 800c3c2:	e7c7      	b.n	800c354 <_free_r+0x24>
 800c3c4:	bd38      	pop	{r3, r4, r5, pc}
 800c3c6:	bf00      	nop
 800c3c8:	20002abc 	.word	0x20002abc

0800c3cc <_malloc_r>:
 800c3cc:	b570      	push	{r4, r5, r6, lr}
 800c3ce:	1ccd      	adds	r5, r1, #3
 800c3d0:	f025 0503 	bic.w	r5, r5, #3
 800c3d4:	3508      	adds	r5, #8
 800c3d6:	2d0c      	cmp	r5, #12
 800c3d8:	bf38      	it	cc
 800c3da:	250c      	movcc	r5, #12
 800c3dc:	2d00      	cmp	r5, #0
 800c3de:	4606      	mov	r6, r0
 800c3e0:	db01      	blt.n	800c3e6 <_malloc_r+0x1a>
 800c3e2:	42a9      	cmp	r1, r5
 800c3e4:	d903      	bls.n	800c3ee <_malloc_r+0x22>
 800c3e6:	230c      	movs	r3, #12
 800c3e8:	6033      	str	r3, [r6, #0]
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	bd70      	pop	{r4, r5, r6, pc}
 800c3ee:	f000 f87d 	bl	800c4ec <__malloc_lock>
 800c3f2:	4a21      	ldr	r2, [pc, #132]	; (800c478 <_malloc_r+0xac>)
 800c3f4:	6814      	ldr	r4, [r2, #0]
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	b991      	cbnz	r1, 800c420 <_malloc_r+0x54>
 800c3fa:	4c20      	ldr	r4, [pc, #128]	; (800c47c <_malloc_r+0xb0>)
 800c3fc:	6823      	ldr	r3, [r4, #0]
 800c3fe:	b91b      	cbnz	r3, 800c408 <_malloc_r+0x3c>
 800c400:	4630      	mov	r0, r6
 800c402:	f000 f863 	bl	800c4cc <_sbrk_r>
 800c406:	6020      	str	r0, [r4, #0]
 800c408:	4629      	mov	r1, r5
 800c40a:	4630      	mov	r0, r6
 800c40c:	f000 f85e 	bl	800c4cc <_sbrk_r>
 800c410:	1c43      	adds	r3, r0, #1
 800c412:	d124      	bne.n	800c45e <_malloc_r+0x92>
 800c414:	230c      	movs	r3, #12
 800c416:	6033      	str	r3, [r6, #0]
 800c418:	4630      	mov	r0, r6
 800c41a:	f000 f868 	bl	800c4ee <__malloc_unlock>
 800c41e:	e7e4      	b.n	800c3ea <_malloc_r+0x1e>
 800c420:	680b      	ldr	r3, [r1, #0]
 800c422:	1b5b      	subs	r3, r3, r5
 800c424:	d418      	bmi.n	800c458 <_malloc_r+0x8c>
 800c426:	2b0b      	cmp	r3, #11
 800c428:	d90f      	bls.n	800c44a <_malloc_r+0x7e>
 800c42a:	600b      	str	r3, [r1, #0]
 800c42c:	50cd      	str	r5, [r1, r3]
 800c42e:	18cc      	adds	r4, r1, r3
 800c430:	4630      	mov	r0, r6
 800c432:	f000 f85c 	bl	800c4ee <__malloc_unlock>
 800c436:	f104 000b 	add.w	r0, r4, #11
 800c43a:	1d23      	adds	r3, r4, #4
 800c43c:	f020 0007 	bic.w	r0, r0, #7
 800c440:	1ac3      	subs	r3, r0, r3
 800c442:	d0d3      	beq.n	800c3ec <_malloc_r+0x20>
 800c444:	425a      	negs	r2, r3
 800c446:	50e2      	str	r2, [r4, r3]
 800c448:	e7d0      	b.n	800c3ec <_malloc_r+0x20>
 800c44a:	428c      	cmp	r4, r1
 800c44c:	684b      	ldr	r3, [r1, #4]
 800c44e:	bf16      	itet	ne
 800c450:	6063      	strne	r3, [r4, #4]
 800c452:	6013      	streq	r3, [r2, #0]
 800c454:	460c      	movne	r4, r1
 800c456:	e7eb      	b.n	800c430 <_malloc_r+0x64>
 800c458:	460c      	mov	r4, r1
 800c45a:	6849      	ldr	r1, [r1, #4]
 800c45c:	e7cc      	b.n	800c3f8 <_malloc_r+0x2c>
 800c45e:	1cc4      	adds	r4, r0, #3
 800c460:	f024 0403 	bic.w	r4, r4, #3
 800c464:	42a0      	cmp	r0, r4
 800c466:	d005      	beq.n	800c474 <_malloc_r+0xa8>
 800c468:	1a21      	subs	r1, r4, r0
 800c46a:	4630      	mov	r0, r6
 800c46c:	f000 f82e 	bl	800c4cc <_sbrk_r>
 800c470:	3001      	adds	r0, #1
 800c472:	d0cf      	beq.n	800c414 <_malloc_r+0x48>
 800c474:	6025      	str	r5, [r4, #0]
 800c476:	e7db      	b.n	800c430 <_malloc_r+0x64>
 800c478:	20002abc 	.word	0x20002abc
 800c47c:	20002ac0 	.word	0x20002ac0

0800c480 <_realloc_r>:
 800c480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c482:	4607      	mov	r7, r0
 800c484:	4614      	mov	r4, r2
 800c486:	460e      	mov	r6, r1
 800c488:	b921      	cbnz	r1, 800c494 <_realloc_r+0x14>
 800c48a:	4611      	mov	r1, r2
 800c48c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c490:	f7ff bf9c 	b.w	800c3cc <_malloc_r>
 800c494:	b922      	cbnz	r2, 800c4a0 <_realloc_r+0x20>
 800c496:	f7ff ff4b 	bl	800c330 <_free_r>
 800c49a:	4625      	mov	r5, r4
 800c49c:	4628      	mov	r0, r5
 800c49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4a0:	f000 f826 	bl	800c4f0 <_malloc_usable_size_r>
 800c4a4:	42a0      	cmp	r0, r4
 800c4a6:	d20f      	bcs.n	800c4c8 <_realloc_r+0x48>
 800c4a8:	4621      	mov	r1, r4
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	f7ff ff8e 	bl	800c3cc <_malloc_r>
 800c4b0:	4605      	mov	r5, r0
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	d0f2      	beq.n	800c49c <_realloc_r+0x1c>
 800c4b6:	4631      	mov	r1, r6
 800c4b8:	4622      	mov	r2, r4
 800c4ba:	f7ff fbe1 	bl	800bc80 <memcpy>
 800c4be:	4631      	mov	r1, r6
 800c4c0:	4638      	mov	r0, r7
 800c4c2:	f7ff ff35 	bl	800c330 <_free_r>
 800c4c6:	e7e9      	b.n	800c49c <_realloc_r+0x1c>
 800c4c8:	4635      	mov	r5, r6
 800c4ca:	e7e7      	b.n	800c49c <_realloc_r+0x1c>

0800c4cc <_sbrk_r>:
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	4c06      	ldr	r4, [pc, #24]	; (800c4e8 <_sbrk_r+0x1c>)
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	4605      	mov	r5, r0
 800c4d4:	4608      	mov	r0, r1
 800c4d6:	6023      	str	r3, [r4, #0]
 800c4d8:	f7f8 fb1e 	bl	8004b18 <_sbrk>
 800c4dc:	1c43      	adds	r3, r0, #1
 800c4de:	d102      	bne.n	800c4e6 <_sbrk_r+0x1a>
 800c4e0:	6823      	ldr	r3, [r4, #0]
 800c4e2:	b103      	cbz	r3, 800c4e6 <_sbrk_r+0x1a>
 800c4e4:	602b      	str	r3, [r5, #0]
 800c4e6:	bd38      	pop	{r3, r4, r5, pc}
 800c4e8:	20003508 	.word	0x20003508

0800c4ec <__malloc_lock>:
 800c4ec:	4770      	bx	lr

0800c4ee <__malloc_unlock>:
 800c4ee:	4770      	bx	lr

0800c4f0 <_malloc_usable_size_r>:
 800c4f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4f4:	1f18      	subs	r0, r3, #4
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	bfbc      	itt	lt
 800c4fa:	580b      	ldrlt	r3, [r1, r0]
 800c4fc:	18c0      	addlt	r0, r0, r3
 800c4fe:	4770      	bx	lr

0800c500 <_init>:
 800c500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c502:	bf00      	nop
 800c504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c506:	bc08      	pop	{r3}
 800c508:	469e      	mov	lr, r3
 800c50a:	4770      	bx	lr

0800c50c <_fini>:
 800c50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50e:	bf00      	nop
 800c510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c512:	bc08      	pop	{r3}
 800c514:	469e      	mov	lr, r3
 800c516:	4770      	bx	lr

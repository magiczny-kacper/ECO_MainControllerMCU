
Suncontroller CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e0  0800cf4c  0800cf4c  0001cf4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e12c  0800e12c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e12c  0800e12c  0001e12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e134  0800e134  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e134  0800e134  0001e134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e138  0800e138  0001e138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800e13c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033dc  200000d0  0800e20c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034ac  0800e20c  000234ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042c4a  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007a09  00000000  00000000  00062d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001cc03  00000000  00000000  0006a753  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002608  00000000  00000000  00087358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002670  00000000  00000000  00089960  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000a9d9  00000000  00000000  0008bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00023159  00000000  00000000  000969a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ac6da  00000000  00000000  000b9b02  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001661dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072ec  00000000  00000000  00166258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cf34 	.word	0x0800cf34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	0800cf34 	.word	0x0800cf34

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <xCLI_EreaseEE>:
	FreeRTOS_CLIRegisterCommand(&xSetTimeCmd);
	FreeRTOS_CLIRegisterCommand(&xSetDateCmd);
	FreeRTOS_CLIRegisterCommand(&xResetCmd);
}

BaseType_t xCLI_EreaseEE( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8000e0c:	b510      	push	{r4, lr}
 8000e0e:	4604      	mov	r4, r0
	(void) pcCommandString;
	(void) xWriteBufferLen;
	EE_StatusTypeDef retval = EE_Erease();
 8000e10:	f000 fe66 	bl	8001ae0 <EE_Erease>
	if(retval == EE_OK){
 8000e14:	b128      	cbz	r0, 8000e22 <xCLI_EreaseEE+0x16>
		DataLog_LogEvent(EV_EE_CLR);
		sprintf(pcWriteBuffer, "Wyczyszczono.\r\n");
	}else{
		sprintf(pcWriteBuffer, "Nie wyczyszczono.\r\n");
 8000e16:	4907      	ldr	r1, [pc, #28]	; (8000e34 <xCLI_EreaseEE+0x28>)
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f00b fc0b 	bl	800c634 <sprintf_>
	}
	return pdFALSE;
}
 8000e1e:	2000      	movs	r0, #0
 8000e20:	bd10      	pop	{r4, pc}
		DataLog_LogEvent(EV_EE_CLR);
 8000e22:	2007      	movs	r0, #7
 8000e24:	f001 fcf8 	bl	8002818 <DataLog_LogEvent>
		sprintf(pcWriteBuffer, "Wyczyszczono.\r\n");
 8000e28:	4903      	ldr	r1, [pc, #12]	; (8000e38 <xCLI_EreaseEE+0x2c>)
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f00b fc02 	bl	800c634 <sprintf_>
 8000e30:	e7f5      	b.n	8000e1e <xCLI_EreaseEE+0x12>
 8000e32:	bf00      	nop
 8000e34:	0800d3bc 	.word	0x0800d3bc
 8000e38:	0800d3ac 	.word	0x0800d3ac

08000e3c <xCLI_ShowConfig>:

BaseType_t xCLI_ShowConfig( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8000e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e40:	b095      	sub	sp, #84	; 0x54
 8000e42:	9011      	str	r0, [sp, #68]	; 0x44
	static ConfigStruct_t config;
	static CONFStatus_t configStatus;
	BaseType_t retVal = pdTRUE;
	static uint8_t step = 0;

	switch (step){
 8000e44:	4b6e      	ldr	r3, [pc, #440]	; (8001000 <xCLI_ShowConfig+0x1c4>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b05      	cmp	r3, #5
 8000e4a:	f200 80d0 	bhi.w	8000fee <xCLI_ShowConfig+0x1b2>
 8000e4e:	e8df f003 	tbb	[pc, r3]
 8000e52:	3303      	.short	0x3303
 8000e54:	c1ac997c 	.word	0xc1ac997c
		case 0:
			configStatus = Config_GetConfig(&config);
 8000e58:	486a      	ldr	r0, [pc, #424]	; (8001004 <xCLI_ShowConfig+0x1c8>)
 8000e5a:	f000 fcb3 	bl	80017c4 <Config_GetConfig>
			switch(configStatus){
 8000e5e:	3005      	adds	r0, #5
 8000e60:	2805      	cmp	r0, #5
 8000e62:	d824      	bhi.n	8000eae <xCLI_ShowConfig+0x72>
 8000e64:	e8df f000 	tbb	[pc, r0]
 8000e68:	23140f03 	.word	0x23140f03
 8000e6c:	1e19      	.short	0x1e19
				case CONF_ERR_NOCONF:
					sprintf(pcWriteBuffer, "No configuration in memory.\r\n");
 8000e6e:	4966      	ldr	r1, [pc, #408]	; (8001008 <xCLI_ShowConfig+0x1cc>)
 8000e70:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e72:	f00b fbdf 	bl	800c634 <sprintf_>
					break;
				default:
					sprintf(pcWriteBuffer, "Unexpected error.\r\n");
 					break;
 			}
			step++;
 8000e76:	4a62      	ldr	r2, [pc, #392]	; (8001000 <xCLI_ShowConfig+0x1c4>)
 8000e78:	7813      	ldrb	r3, [r2, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000e7e:	2001      	movs	r0, #1
			retVal = pdFALSE;
			break;
	}

	return retVal;
}
 8000e80:	b015      	add	sp, #84	; 0x54
 8000e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					sprintf(pcWriteBuffer, "Configuration CRC error.\r\n");
 8000e86:	4961      	ldr	r1, [pc, #388]	; (800100c <xCLI_ShowConfig+0x1d0>)
 8000e88:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e8a:	f00b fbd3 	bl	800c634 <sprintf_>
					break;
 8000e8e:	e7f2      	b.n	8000e76 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Cannot access I2C bus.\r\n");
 8000e90:	495f      	ldr	r1, [pc, #380]	; (8001010 <xCLI_ShowConfig+0x1d4>)
 8000e92:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e94:	f00b fbce 	bl	800c634 <sprintf_>
					break;
 8000e98:	e7ed      	b.n	8000e76 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Memory access timeout.\r\n");
 8000e9a:	495e      	ldr	r1, [pc, #376]	; (8001014 <xCLI_ShowConfig+0x1d8>)
 8000e9c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e9e:	f00b fbc9 	bl	800c634 <sprintf_>
					break;
 8000ea2:	e7e8      	b.n	8000e76 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Configuration loaded.\r\n");
 8000ea4:	495c      	ldr	r1, [pc, #368]	; (8001018 <xCLI_ShowConfig+0x1dc>)
 8000ea6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ea8:	f00b fbc4 	bl	800c634 <sprintf_>
					break;
 8000eac:	e7e3      	b.n	8000e76 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Unexpected error.\r\n");
 8000eae:	495b      	ldr	r1, [pc, #364]	; (800101c <xCLI_ShowConfig+0x1e0>)
 8000eb0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000eb2:	f00b fbbf 	bl	800c634 <sprintf_>
 					break;
 8000eb6:	e7de      	b.n	8000e76 <xCLI_ShowConfig+0x3a>
					config.EthernetConfig.ipAddress[0], config.EthernetConfig.ipAddress[1],
 8000eb8:	4b52      	ldr	r3, [pc, #328]	; (8001004 <xCLI_ShowConfig+0x1c8>)
 8000eba:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000ebe:	9212      	str	r2, [sp, #72]	; 0x48
 8000ec0:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8000ec4:	9113      	str	r1, [sp, #76]	; 0x4c
					config.EthernetConfig.ipAddress[2], config.EthernetConfig.ipAddress[3],
 8000ec6:	f893 4022 	ldrb.w	r4, [r3, #34]	; 0x22
 8000eca:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8000ece:	9001      	str	r0, [sp, #4]
					config.EthernetConfig.gatewayAddress[0], config.EthernetConfig.gatewayAddress[1],
 8000ed0:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8000ed4:	9002      	str	r0, [sp, #8]
 8000ed6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
					config.EthernetConfig.gatewayAddress[2], config.EthernetConfig.gatewayAddress[3],
 8000eda:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8000ede:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
					config.EthernetConfig.subnetMask[0], config.EthernetConfig.subnetMask[1],
 8000ee2:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 8000ee6:	f893 6025 	ldrb.w	r6, [r3, #37]	; 0x25
					config.EthernetConfig.subnetMask[2], config.EthernetConfig.subnetMask[3],
 8000eea:	f893 7026 	ldrb.w	r7, [r3, #38]	; 0x26
 8000eee:	f893 c027 	ldrb.w	ip, [r3, #39]	; 0x27
					config.EthernetConfig.macAddress[0], config.EthernetConfig.macAddress[1],
 8000ef2:	f893 e02c 	ldrb.w	lr, [r3, #44]	; 0x2c
 8000ef6:	f893 802d 	ldrb.w	r8, [r3, #45]	; 0x2d
					config.EthernetConfig.macAddress[2], config.EthernetConfig.macAddress[3],
 8000efa:	f893 902e 	ldrb.w	r9, [r3, #46]	; 0x2e
 8000efe:	f893 a02f 	ldrb.w	sl, [r3, #47]	; 0x2f
					config.EthernetConfig.macAddress[4], config.EthernetConfig.macAddress[5]);
 8000f02:	f893 b030 	ldrb.w	fp, [r3, #48]	; 0x30
 8000f06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
			sprintf(pcWriteBuffer, "Ethernet configuration:\r\n"
 8000f0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f0c:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8000f10:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8000f14:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8000f18:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8000f1c:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8000f20:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8000f24:	9708      	str	r7, [sp, #32]
 8000f26:	9607      	str	r6, [sp, #28]
 8000f28:	9506      	str	r5, [sp, #24]
 8000f2a:	9005      	str	r0, [sp, #20]
 8000f2c:	9104      	str	r1, [sp, #16]
 8000f2e:	9203      	str	r2, [sp, #12]
 8000f30:	9400      	str	r4, [sp, #0]
 8000f32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000f34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000f36:	493a      	ldr	r1, [pc, #232]	; (8001020 <xCLI_ShowConfig+0x1e4>)
 8000f38:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f3a:	f00b fb7b 	bl	800c634 <sprintf_>
			step++;
 8000f3e:	4a30      	ldr	r2, [pc, #192]	; (8001000 <xCLI_ShowConfig+0x1c4>)
 8000f40:	7813      	ldrb	r3, [r2, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000f46:	2001      	movs	r0, #1
			break;
 8000f48:	e79a      	b.n	8000e80 <xCLI_ShowConfig+0x44>
					(uint32_t)config.RegulationConfig.CWU_heater_power,
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <xCLI_ShowConfig+0x1c8>)
 8000f4c:	ed93 7a00 	vldr	s14, [r3]
					(uint32_t)config.RegulationConfig.CO_heater_power,
 8000f50:	edd3 6a01 	vldr	s13, [r3, #4]
					(uint32_t)config.RegulationConfig.net_max_power);
 8000f54:	edd3 7a02 	vldr	s15, [r3, #8]
			sprintf(pcWriteBuffer, "Regulation configuration:\r\n"
 8000f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f5c:	edcd 7a00 	vstr	s15, [sp]
 8000f60:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8000f64:	ee17 3a90 	vmov	r3, s15
 8000f68:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000f6c:	ee17 2a90 	vmov	r2, s15
 8000f70:	492c      	ldr	r1, [pc, #176]	; (8001024 <xCLI_ShowConfig+0x1e8>)
 8000f72:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f74:	f00b fb5e 	bl	800c634 <sprintf_>
			step++;
 8000f78:	4a21      	ldr	r2, [pc, #132]	; (8001000 <xCLI_ShowConfig+0x1c4>)
 8000f7a:	7813      	ldrb	r3, [r2, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000f80:	2001      	movs	r0, #1
			break;
 8000f82:	e77d      	b.n	8000e80 <xCLI_ShowConfig+0x44>
					config.RegulationConfig.counter_address,
 8000f84:	491f      	ldr	r1, [pc, #124]	; (8001004 <xCLI_ShowConfig+0x1c8>)
 8000f86:	7b0a      	ldrb	r2, [r1, #12]
					config.RegulationConfig.temperature_address,
 8000f88:	7b4b      	ldrb	r3, [r1, #13]
					config.RegulationConfig.acumulated_power_coeff,
 8000f8a:	f991 000e 	ldrsb.w	r0, [r1, #14]
					config.RegulationConfig.heater_power_coeff);
 8000f8e:	f991 100f 	ldrsb.w	r1, [r1, #15]
			sprintf(pcWriteBuffer, "    Counter address: %d\r\n"
 8000f92:	9101      	str	r1, [sp, #4]
 8000f94:	9000      	str	r0, [sp, #0]
 8000f96:	4924      	ldr	r1, [pc, #144]	; (8001028 <xCLI_ShowConfig+0x1ec>)
 8000f98:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f9a:	f00b fb4b 	bl	800c634 <sprintf_>
			step++;
 8000f9e:	4a18      	ldr	r2, [pc, #96]	; (8001000 <xCLI_ShowConfig+0x1c4>)
 8000fa0:	7813      	ldrb	r3, [r2, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fa6:	2001      	movs	r0, #1
			break;
 8000fa8:	e76a      	b.n	8000e80 <xCLI_ShowConfig+0x44>
					config.RegulationConfig.CO_hi_temp,
 8000faa:	4916      	ldr	r1, [pc, #88]	; (8001004 <xCLI_ShowConfig+0x1c8>)
 8000fac:	f991 2010 	ldrsb.w	r2, [r1, #16]
					config.RegulationConfig.CO_lo_temp,
 8000fb0:	f991 3011 	ldrsb.w	r3, [r1, #17]
					config.RegulationConfig.CWU_hi_temp,
 8000fb4:	f991 0012 	ldrsb.w	r0, [r1, #18]
					config.RegulationConfig.CWU_lo_temp);
 8000fb8:	f991 1013 	ldrsb.w	r1, [r1, #19]
			sprintf(pcWriteBuffer, "    CO high temperature: %d C\r\n"
 8000fbc:	9101      	str	r1, [sp, #4]
 8000fbe:	9000      	str	r0, [sp, #0]
 8000fc0:	491a      	ldr	r1, [pc, #104]	; (800102c <xCLI_ShowConfig+0x1f0>)
 8000fc2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000fc4:	f00b fb36 	bl	800c634 <sprintf_>
			step++;
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <xCLI_ShowConfig+0x1c4>)
 8000fca:	7813      	ldrb	r3, [r2, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fd0:	2001      	movs	r0, #1
			break;
 8000fd2:	e755      	b.n	8000e80 <xCLI_ShowConfig+0x44>
					"CRC: 0x%08x\r\n", config.dummy, config.crc);
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <xCLI_ShowConfig+0x1c8>)
			sprintf(pcWriteBuffer, "Magic word: 0x%04x\r\n"
 8000fd6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000fd8:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8000fda:	4915      	ldr	r1, [pc, #84]	; (8001030 <xCLI_ShowConfig+0x1f4>)
 8000fdc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000fde:	f00b fb29 	bl	800c634 <sprintf_>
			step++;
 8000fe2:	4a07      	ldr	r2, [pc, #28]	; (8001000 <xCLI_ShowConfig+0x1c4>)
 8000fe4:	7813      	ldrb	r3, [r2, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fea:	2001      	movs	r0, #1
			break;
 8000fec:	e748      	b.n	8000e80 <xCLI_ShowConfig+0x44>
			step = 0;
 8000fee:	2500      	movs	r5, #0
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <xCLI_ShowConfig+0x1c4>)
 8000ff2:	701d      	strb	r5, [r3, #0]
			sprintf(pcWriteBuffer, "\r\n");
 8000ff4:	490f      	ldr	r1, [pc, #60]	; (8001034 <xCLI_ShowConfig+0x1f8>)
 8000ff6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ff8:	f00b fb1c 	bl	800c634 <sprintf_>
			retVal = pdFALSE;
 8000ffc:	4628      	mov	r0, r5
	return retVal;
 8000ffe:	e73f      	b.n	8000e80 <xCLI_ShowConfig+0x44>
 8001000:	2000012c 	.word	0x2000012c
 8001004:	200000ec 	.word	0x200000ec
 8001008:	0800d5b8 	.word	0x0800d5b8
 800100c:	0800d5d8 	.word	0x0800d5d8
 8001010:	0800d5f4 	.word	0x0800d5f4
 8001014:	0800d610 	.word	0x0800d610
 8001018:	0800d62c 	.word	0x0800d62c
 800101c:	0800d644 	.word	0x0800d644
 8001020:	0800d658 	.word	0x0800d658
 8001024:	0800d6e0 	.word	0x0800d6e0
 8001028:	0800d750 	.word	0x0800d750
 800102c:	0800d7d4 	.word	0x0800d7d4
 8001030:	0800d854 	.word	0x0800d854
 8001034:	0800d56c 	.word	0x0800d56c

08001038 <xCLI_GetSystemStatus>:

BaseType_t xCLI_GetSystemStatus( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8001038:	b530      	push	{r4, r5, lr}
 800103a:	b08b      	sub	sp, #44	; 0x2c
 800103c:	4605      	mov	r5, r0
	(void) xWriteBufferLen;

	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800103e:	4c0f      	ldr	r4, [pc, #60]	; (800107c <xCLI_GetSystemStatus+0x44>)
 8001040:	2200      	movs	r2, #0
 8001042:	a904      	add	r1, sp, #16
 8001044:	4620      	mov	r0, r4
 8001046:	f006 feb4 	bl	8007db2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800104a:	2200      	movs	r2, #0
 800104c:	a909      	add	r1, sp, #36	; 0x24
 800104e:	4620      	mov	r0, r4
 8001050:	f006 feda 	bl	8007e08 <HAL_RTC_GetDate>

	sprintf(pcWriteBuffer, "    %02d.%02d.%02d %02d:%02d\r\n",
			date.Date, date.Month, date.Year, time.Hours, time.Minutes);
 8001054:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8001058:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800105c:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 8001060:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001064:	f89d 4011 	ldrb.w	r4, [sp, #17]
	sprintf(pcWriteBuffer, "    %02d.%02d.%02d %02d:%02d\r\n",
 8001068:	9402      	str	r4, [sp, #8]
 800106a:	9001      	str	r0, [sp, #4]
 800106c:	9100      	str	r1, [sp, #0]
 800106e:	4904      	ldr	r1, [pc, #16]	; (8001080 <xCLI_GetSystemStatus+0x48>)
 8001070:	4628      	mov	r0, r5
 8001072:	f00b fadf 	bl	800c634 <sprintf_>
	return pdFALSE;
}
 8001076:	2000      	movs	r0, #0
 8001078:	b00b      	add	sp, #44	; 0x2c
 800107a:	bd30      	pop	{r4, r5, pc}
 800107c:	20003250 	.word	0x20003250
 8001080:	0800d570 	.word	0x0800d570

08001084 <xCLI_GetRtosStats>:

BaseType_t xCLI_GetRtosStats( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8001084:	b508      	push	{r3, lr}
	(void) pcCommandString;
	(void) xWriteBufferLen;
	vTaskGetRunTimeStats(pcWriteBuffer);
 8001086:	f009 fea3 	bl	800add0 <vTaskGetRunTimeStats>
	return pdFALSE;
}
 800108a:	2000      	movs	r0, #0
 800108c:	bd08      	pop	{r3, pc}
	...

08001090 <xCLI_GetCommStats>:

BaseType_t xCLI_GetCommStats( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8001090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001092:	b085      	sub	sp, #20
 8001094:	4605      	mov	r5, r0
	BaseType_t retVal = pdTRUE;
	static uint8_t step = 0;

	uint8_t ipArr[4];

	switch(step){
 8001096:	4b34      	ldr	r3, [pc, #208]	; (8001168 <xCLI_GetCommStats+0xd8>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b03      	cmp	r3, #3
 800109c:	d85c      	bhi.n	8001158 <xCLI_GetCommStats+0xc8>
 800109e:	e8df f003 	tbb	[pc, r3]
 80010a2:	1a02      	.short	0x1a02
 80010a4:	4231      	.short	0x4231

		case 0:
			RuntimeStats_TelnetGetCurIP(ipArr);
 80010a6:	a803      	add	r0, sp, #12
 80010a8:	f001 ff84 	bl	8002fb4 <RuntimeStats_TelnetGetCurIP>
			sprintf(pcWriteBuffer, "Telnet statistics:\r\n"
					"    Current IP connected: %d.%d.%d.%d\r\n",
					ipArr[0], ipArr[1], ipArr[2], ipArr[3]);
 80010ac:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80010b0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80010b4:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80010b8:	f89d 000f 	ldrb.w	r0, [sp, #15]
			sprintf(pcWriteBuffer, "Telnet statistics:\r\n"
 80010bc:	9001      	str	r0, [sp, #4]
 80010be:	9100      	str	r1, [sp, #0]
 80010c0:	492a      	ldr	r1, [pc, #168]	; (800116c <xCLI_GetCommStats+0xdc>)
 80010c2:	4628      	mov	r0, r5
 80010c4:	f00b fab6 	bl	800c634 <sprintf_>
			step++;
 80010c8:	4a27      	ldr	r2, [pc, #156]	; (8001168 <xCLI_GetCommStats+0xd8>)
 80010ca:	7813      	ldrb	r3, [r2, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 80010d0:	2001      	movs	r0, #1
			sprintf(pcWriteBuffer, "\r\n");
			retVal = pdFALSE;
			break;
	}
	return retVal;
}
 80010d2:	b005      	add	sp, #20
 80010d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RuntimeStats_TelnetGetLastIP(ipArr);
 80010d6:	a803      	add	r0, sp, #12
 80010d8:	f001 ff72 	bl	8002fc0 <RuntimeStats_TelnetGetLastIP>
					ipArr[0], ipArr[1], ipArr[2], ipArr[3]);
 80010dc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80010e0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80010e4:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80010e8:	f89d 000f 	ldrb.w	r0, [sp, #15]
			sprintf(pcWriteBuffer, "    Last IP connected: %d.%d.%d.%d\r\n",
 80010ec:	9001      	str	r0, [sp, #4]
 80010ee:	9100      	str	r1, [sp, #0]
 80010f0:	491f      	ldr	r1, [pc, #124]	; (8001170 <xCLI_GetCommStats+0xe0>)
 80010f2:	4628      	mov	r0, r5
 80010f4:	f00b fa9e 	bl	800c634 <sprintf_>
			step++;
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <xCLI_GetCommStats+0xd8>)
 80010fa:	7813      	ldrb	r3, [r2, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8001100:	2001      	movs	r0, #1
			break;
 8001102:	e7e6      	b.n	80010d2 <xCLI_GetCommStats+0x42>
			sprintf(pcWriteBuffer, "    TX count: %d\r\n    RX count: %d\r\n",
 8001104:	f001 ff50 	bl	8002fa8 <RuntimeStats_TelnetGetTxCnt>
 8001108:	4604      	mov	r4, r0
 800110a:	f001 ff47 	bl	8002f9c <RuntimeStats_TelnetGetRxCnt>
 800110e:	4603      	mov	r3, r0
 8001110:	4622      	mov	r2, r4
 8001112:	4918      	ldr	r1, [pc, #96]	; (8001174 <xCLI_GetCommStats+0xe4>)
 8001114:	4628      	mov	r0, r5
 8001116:	f00b fa8d 	bl	800c634 <sprintf_>
			step++;
 800111a:	4a13      	ldr	r2, [pc, #76]	; (8001168 <xCLI_GetCommStats+0xd8>)
 800111c:	7813      	ldrb	r3, [r2, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8001122:	2001      	movs	r0, #1
			break;
 8001124:	e7d5      	b.n	80010d2 <xCLI_GetCommStats+0x42>
			sprintf(pcWriteBuffer, "Modbus statistics:\r\n"
 8001126:	f001 ff71 	bl	800300c <RuntimeStats_ModbusMasterRqSendGet>
 800112a:	4604      	mov	r4, r0
 800112c:	f001 ff7a 	bl	8003024 <RuntimeStats_ModbusMasterRespOkGet>
 8001130:	4606      	mov	r6, r0
 8001132:	f001 ff71 	bl	8003018 <RuntimeStats_ModbusMasterNoRespGet>
 8001136:	4607      	mov	r7, r0
 8001138:	f001 ff7a 	bl	8003030 <RuntimeStats_ModbusMasterWrongRespGet>
 800113c:	9001      	str	r0, [sp, #4]
 800113e:	9700      	str	r7, [sp, #0]
 8001140:	4633      	mov	r3, r6
 8001142:	4622      	mov	r2, r4
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <xCLI_GetCommStats+0xe8>)
 8001146:	4628      	mov	r0, r5
 8001148:	f00b fa74 	bl	800c634 <sprintf_>
			step++;
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <xCLI_GetCommStats+0xd8>)
 800114e:	7813      	ldrb	r3, [r2, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8001154:	2001      	movs	r0, #1
			break;
 8001156:	e7bc      	b.n	80010d2 <xCLI_GetCommStats+0x42>
			step = 0;
 8001158:	2400      	movs	r4, #0
 800115a:	4b03      	ldr	r3, [pc, #12]	; (8001168 <xCLI_GetCommStats+0xd8>)
 800115c:	701c      	strb	r4, [r3, #0]
			sprintf(pcWriteBuffer, "\r\n");
 800115e:	4907      	ldr	r1, [pc, #28]	; (800117c <xCLI_GetCommStats+0xec>)
 8001160:	f00b fa68 	bl	800c634 <sprintf_>
			retVal = pdFALSE;
 8001164:	4620      	mov	r0, r4
	return retVal;
 8001166:	e7b4      	b.n	80010d2 <xCLI_GetCommStats+0x42>
 8001168:	2000012d 	.word	0x2000012d
 800116c:	0800d3dc 	.word	0x0800d3dc
 8001170:	0800d418 	.word	0x0800d418
 8001174:	0800d440 	.word	0x0800d440
 8001178:	0800d468 	.word	0x0800d468
 800117c:	0800d56c 	.word	0x0800d56c

08001180 <xCLI_WriteTestEvent>:

BaseType_t xCLI_WriteTestEvent( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8001180:	b510      	push	{r4, lr}
 8001182:	4604      	mov	r4, r0
	(void) pcCommandString;
	(void) xWriteBufferLen;
	DataLog_LogEvent(EV_TEST);
 8001184:	2004      	movs	r0, #4
 8001186:	f001 fb47 	bl	8002818 <DataLog_LogEvent>
	sprintf(pcWriteBuffer, "    Done.\r\n    Current pointer: %d\r\n", DataLog_GetCurrentMemPointer());
 800118a:	f001 fbcb 	bl	8002924 <DataLog_GetCurrentMemPointer>
 800118e:	4602      	mov	r2, r0
 8001190:	4902      	ldr	r1, [pc, #8]	; (800119c <xCLI_WriteTestEvent+0x1c>)
 8001192:	4620      	mov	r0, r4
 8001194:	f00b fa4e 	bl	800c634 <sprintf_>
	return pdFALSE;
}
 8001198:	2000      	movs	r0, #0
 800119a:	bd10      	pop	{r4, pc}
 800119c:	0800d950 	.word	0x0800d950

080011a0 <xCLI_EreaseFlash>:

BaseType_t xCLI_EreaseFlash( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 80011a0:	b510      	push	{r4, lr}
 80011a2:	4604      	mov	r4, r0
	(void) pcCommandString;
	(void) xWriteBufferLen;

	DataLog_EreaseMemory();
 80011a4:	f001 fbac 	bl	8002900 <DataLog_EreaseMemory>
	sprintf(pcWriteBuffer, "    Done.\r\n");
 80011a8:	4902      	ldr	r1, [pc, #8]	; (80011b4 <xCLI_EreaseFlash+0x14>)
 80011aa:	4620      	mov	r0, r4
 80011ac:	f00b fa42 	bl	800c634 <sprintf_>

	return pdFALSE;
}
 80011b0:	2000      	movs	r0, #0
 80011b2:	bd10      	pop	{r4, pc}
 80011b4:	0800d3d0 	.word	0x0800d3d0

080011b8 <xCLI_Reset>:

BaseType_t xCLI_Reset( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 80011b8:	b508      	push	{r3, lr}
	HAL_NVIC_SystemReset();
 80011ba:	f004 febf 	bl	8005f3c <HAL_NVIC_SystemReset>
}
 80011be:	bd08      	pop	{r3, pc}

080011c0 <xCLI_ShowIO>:

BaseType_t xCLI_ShowIO( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 80011c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011c4:	b091      	sub	sp, #68	; 0x44
 80011c6:	900f      	str	r0, [sp, #60]	; 0x3c
	(void) pcCommandString;
	(void) xWriteBufferLen;
	RegTaskData_t* ptr;

	ptr = RegulationTask_GetData();
 80011c8:	f003 f862 	bl	8004290 <RegulationTask_GetData>
			"    9:  %d\r\n    10: %d\r\n"
			"Outputs:\r\n"
			"    1:  %d\r\n    2:  %d\r\n"
			"    3:  %d\r\n    4:  %d\r\n"
			"    5:  %d\r\n    6:  %d\r\n",
			ptr->IOsignals.signals.input1, ptr->IOsignals.signals.input2,
 80011cc:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
			ptr->IOsignals.signals.input3, ptr->IOsignals.signals.input4,
 80011d0:	f3c2 0380 	ubfx	r3, r2, #2, #1
 80011d4:	930e      	str	r3, [sp, #56]	; 0x38
 80011d6:	f3c2 01c0 	ubfx	r1, r2, #3, #1
			ptr->IOsignals.signals.input5, ptr->IOsignals.signals.input6,
 80011da:	f3c2 1400 	ubfx	r4, r2, #4, #1
 80011de:	f3c2 1540 	ubfx	r5, r2, #5, #1
			ptr->IOsignals.signals.input7, ptr->IOsignals.signals.input8,
 80011e2:	f3c2 1680 	ubfx	r6, r2, #6, #1
 80011e6:	09d7      	lsrs	r7, r2, #7
			ptr->IOsignals.signals.input9, ptr->IOsignals.signals.input10,
 80011e8:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80011ec:	f3c3 0040 	ubfx	r0, r3, #1, #1
 80011f0:	f003 0c01 	and.w	ip, r3, #1
			ptr->IOsignals.signals.output1, ptr->IOsignals.signals.output2,
 80011f4:	ea4f 1ed3 	mov.w	lr, r3, lsr #7
 80011f8:	f3c3 1880 	ubfx	r8, r3, #6, #1
			ptr->IOsignals.signals.output3, ptr->IOsignals.signals.output4,
 80011fc:	f3c3 1940 	ubfx	r9, r3, #5, #1
 8001200:	f3c3 1a00 	ubfx	sl, r3, #4, #1
			ptr->IOsignals.signals.output5, ptr->IOsignals.signals.output6);
 8001204:	f3c3 0bc0 	ubfx	fp, r3, #3, #1
 8001208:	f3c3 0380 	ubfx	r3, r3, #2, #1
	sprintf(pcWriteBuffer, "Inputs: \r\n"
 800120c:	930d      	str	r3, [sp, #52]	; 0x34
 800120e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8001212:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8001216:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800121a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800121e:	f8cd e020 	str.w	lr, [sp, #32]
 8001222:	f8cd c01c 	str.w	ip, [sp, #28]
 8001226:	9006      	str	r0, [sp, #24]
 8001228:	9705      	str	r7, [sp, #20]
 800122a:	9604      	str	r6, [sp, #16]
 800122c:	9503      	str	r5, [sp, #12]
 800122e:	9402      	str	r4, [sp, #8]
 8001230:	9101      	str	r1, [sp, #4]
 8001232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	f3c2 0340 	ubfx	r3, r2, #1, #1
 800123a:	f002 0201 	and.w	r2, r2, #1
 800123e:	4904      	ldr	r1, [pc, #16]	; (8001250 <xCLI_ShowIO+0x90>)
 8001240:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001242:	f00b f9f7 	bl	800c634 <sprintf_>

	return pdFALSE;
}
 8001246:	2000      	movs	r0, #0
 8001248:	b011      	add	sp, #68	; 0x44
 800124a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800124e:	bf00      	nop
 8001250:	0800d878 	.word	0x0800d878

08001254 <xCLI_GetLastEvent>:

BaseType_t xCLI_GetLastEvent( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8001254:	b510      	push	{r4, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	4604      	mov	r4, r0
	(void) pcCommandString;
	(void) xWriteBufferLen;

	DataLogEvent_t lastEvent;

	DataLog_GetLastEvent(&lastEvent);
 800125a:	4668      	mov	r0, sp
 800125c:	f001 fb14 	bl	8002888 <DataLog_GetLastEvent>

	DataLog_TranslateEvent(&lastEvent, pcWriteBuffer);
 8001260:	4621      	mov	r1, r4
 8001262:	4668      	mov	r0, sp
 8001264:	f001 fb64 	bl	8002930 <DataLog_TranslateEvent>

	return pdFALSE;
}
 8001268:	2000      	movs	r0, #0
 800126a:	b004      	add	sp, #16
 800126c:	bd10      	pop	{r4, pc}
	...

08001270 <xCLI_GetEvents>:

BaseType_t xCLI_GetEvents( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8001270:	b570      	push	{r4, r5, r6, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	4604      	mov	r4, r0
	static uint8_t step = 0;

	BaseType_t retVal = pdTRUE;
	DataLogEvent_t event;

	switch (step){
 8001276:	4b30      	ldr	r3, [pc, #192]	; (8001338 <xCLI_GetEvents+0xc8>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b14b      	cbz	r3, 8001290 <xCLI_GetEvents+0x20>
 800127c:	2b01      	cmp	r3, #1
 800127e:	d03a      	beq.n	80012f6 <xCLI_GetEvents+0x86>
			}

			break;

		default:
			step = 0;
 8001280:	2500      	movs	r5, #0
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <xCLI_GetEvents+0xc8>)
 8001284:	701d      	strb	r5, [r3, #0]
			sprintf(pcWriteBuffer, "\r\n");
 8001286:	492d      	ldr	r1, [pc, #180]	; (800133c <xCLI_GetEvents+0xcc>)
 8001288:	f00b f9d4 	bl	800c634 <sprintf_>
			retVal = pdFALSE;
 800128c:	4628      	mov	r0, r5
			break;
 800128e:	e02b      	b.n	80012e8 <xCLI_GetEvents+0x78>
 8001290:	4610      	mov	r0, r2
			parameter = FreeRTOS_CLIGetParameter(pcCommandString, 1, &len);
 8001292:	f10d 0217 	add.w	r2, sp, #23
 8001296:	2101      	movs	r1, #1
 8001298:	f00a fda0 	bl	800bddc <FreeRTOS_CLIGetParameter>
			for(uint8_t i = len; i > 0; i--){
 800129c:	f89d 2017 	ldrb.w	r2, [sp, #23]
	uint32_t mul = 1;
 80012a0:	2301      	movs	r3, #1
			for(uint8_t i = len; i > 0; i--){
 80012a2:	e00b      	b.n	80012bc <xCLI_GetEvents+0x4c>
				par += (*(parameter + i - 1) - '0') * mul;
 80012a4:	3a01      	subs	r2, #1
 80012a6:	5681      	ldrsb	r1, [r0, r2]
 80012a8:	3930      	subs	r1, #48	; 0x30
 80012aa:	4d25      	ldr	r5, [pc, #148]	; (8001340 <xCLI_GetEvents+0xd0>)
 80012ac:	682e      	ldr	r6, [r5, #0]
 80012ae:	fb03 6101 	mla	r1, r3, r1, r6
 80012b2:	6029      	str	r1, [r5, #0]
				mul *= 10;
 80012b4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80012b8:	004b      	lsls	r3, r1, #1
			for(uint8_t i = len; i > 0; i--){
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	2a00      	cmp	r2, #0
 80012be:	d1f1      	bne.n	80012a4 <xCLI_GetEvents+0x34>
			if(par > DataLog_GetSavedEventsCnt()){
 80012c0:	f001 fb56 	bl	8002970 <DataLog_GetSavedEventsCnt>
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <xCLI_GetEvents+0xd0>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4290      	cmp	r0, r2
 80012ca:	d20f      	bcs.n	80012ec <xCLI_GetEvents+0x7c>
				par = DataLog_GetSavedEventsCnt();
 80012cc:	f001 fb50 	bl	8002970 <DataLog_GetSavedEventsCnt>
 80012d0:	4602      	mov	r2, r0
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <xCLI_GetEvents+0xd0>)
 80012d4:	6018      	str	r0, [r3, #0]
				sprintf(pcWriteBuffer, "Only %d events to read...\r\n", par);
 80012d6:	491b      	ldr	r1, [pc, #108]	; (8001344 <xCLI_GetEvents+0xd4>)
 80012d8:	4620      	mov	r0, r4
 80012da:	f00b f9ab 	bl	800c634 <sprintf_>
			step++;
 80012de:	4a16      	ldr	r2, [pc, #88]	; (8001338 <xCLI_GetEvents+0xc8>)
 80012e0:	7813      	ldrb	r3, [r2, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 80012e6:	2001      	movs	r0, #1
	}

	return retVal;
}
 80012e8:	b006      	add	sp, #24
 80012ea:	bd70      	pop	{r4, r5, r6, pc}
				sprintf(pcWriteBuffer, "Reading %d events...\r\n", par);
 80012ec:	4916      	ldr	r1, [pc, #88]	; (8001348 <xCLI_GetEvents+0xd8>)
 80012ee:	4620      	mov	r0, r4
 80012f0:	f00b f9a0 	bl	800c634 <sprintf_>
 80012f4:	e7f3      	b.n	80012de <xCLI_GetEvents+0x6e>
			if(DL_OK == DataLog_GetLastEventsN(&event, par)){
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <xCLI_GetEvents+0xd0>)
 80012f8:	6819      	ldr	r1, [r3, #0]
 80012fa:	a801      	add	r0, sp, #4
 80012fc:	f001 fb3e 	bl	800297c <DataLog_GetLastEventsN>
 8001300:	b980      	cbnz	r0, 8001324 <xCLI_GetEvents+0xb4>
				DataLog_TranslateEvent(&event, pcWriteBuffer);
 8001302:	4621      	mov	r1, r4
 8001304:	a801      	add	r0, sp, #4
 8001306:	f001 fb13 	bl	8002930 <DataLog_TranslateEvent>
				par --;
 800130a:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <xCLI_GetEvents+0xd0>)
 800130c:	6813      	ldr	r3, [r2, #0]
 800130e:	3b01      	subs	r3, #1
 8001310:	6013      	str	r3, [r2, #0]
			if(par == 0){
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <xCLI_GetEvents+0xd0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b96b      	cbnz	r3, 8001334 <xCLI_GetEvents+0xc4>
				step++;
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <xCLI_GetEvents+0xc8>)
 800131a:	7813      	ldrb	r3, [r2, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8001320:	2001      	movs	r0, #1
 8001322:	e7e1      	b.n	80012e8 <xCLI_GetEvents+0x78>
				sprintf(pcWriteBuffer, "No more events.\r\n");
 8001324:	4909      	ldr	r1, [pc, #36]	; (800134c <xCLI_GetEvents+0xdc>)
 8001326:	4620      	mov	r0, r4
 8001328:	f00b f984 	bl	800c634 <sprintf_>
				par = 0;
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <xCLI_GetEvents+0xd0>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e7ee      	b.n	8001312 <xCLI_GetEvents+0xa2>
	BaseType_t retVal = pdTRUE;
 8001334:	2001      	movs	r0, #1
	return retVal;
 8001336:	e7d7      	b.n	80012e8 <xCLI_GetEvents+0x78>
 8001338:	2000012e 	.word	0x2000012e
 800133c:	0800d56c 	.word	0x0800d56c
 8001340:	20000124 	.word	0x20000124
 8001344:	0800d4e8 	.word	0x0800d4e8
 8001348:	0800d504 	.word	0x0800d504
 800134c:	0800d51c 	.word	0x0800d51c

08001350 <xCLI_GetEventsRaw>:

BaseType_t xCLI_GetEventsRaw( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8001350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001354:	b099      	sub	sp, #100	; 0x64
 8001356:	900f      	str	r0, [sp, #60]	; 0x3c
	static uint8_t step = 0;

	BaseType_t retVal = pdTRUE;
	DataLogEvent_t event;

	switch (step){
 8001358:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <xCLI_GetEventsRaw+0x140>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b153      	cbz	r3, 8001374 <xCLI_GetEventsRaw+0x24>
 800135e:	2b01      	cmp	r3, #1
 8001360:	d03c      	beq.n	80013dc <xCLI_GetEventsRaw+0x8c>
			}

			break;

		default:
			step = 0;
 8001362:	2400      	movs	r4, #0
 8001364:	4b4a      	ldr	r3, [pc, #296]	; (8001490 <xCLI_GetEventsRaw+0x140>)
 8001366:	701c      	strb	r4, [r3, #0]
			sprintf(pcWriteBuffer, "\r\n");
 8001368:	494a      	ldr	r1, [pc, #296]	; (8001494 <xCLI_GetEventsRaw+0x144>)
 800136a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800136c:	f00b f962 	bl	800c634 <sprintf_>
			retVal = pdFALSE;
 8001370:	4620      	mov	r0, r4
			break;
 8001372:	e02b      	b.n	80013cc <xCLI_GetEventsRaw+0x7c>
 8001374:	4610      	mov	r0, r2
			parameter = FreeRTOS_CLIGetParameter(pcCommandString, 1, &len);
 8001376:	f10d 025f 	add.w	r2, sp, #95	; 0x5f
 800137a:	2101      	movs	r1, #1
 800137c:	f00a fd2e 	bl	800bddc <FreeRTOS_CLIGetParameter>
			for(uint8_t i = len; i > 0; i--){
 8001380:	f89d 405f 	ldrb.w	r4, [sp, #95]	; 0x5f
	uint32_t mul = 1;
 8001384:	2301      	movs	r3, #1
			for(uint8_t i = len; i > 0; i--){
 8001386:	e00b      	b.n	80013a0 <xCLI_GetEventsRaw+0x50>
				par += (*(parameter + i - 1) - '0') * mul;
 8001388:	3c01      	subs	r4, #1
 800138a:	5702      	ldrsb	r2, [r0, r4]
 800138c:	3a30      	subs	r2, #48	; 0x30
 800138e:	4942      	ldr	r1, [pc, #264]	; (8001498 <xCLI_GetEventsRaw+0x148>)
 8001390:	680d      	ldr	r5, [r1, #0]
 8001392:	fb03 5202 	mla	r2, r3, r2, r5
 8001396:	600a      	str	r2, [r1, #0]
				mul *= 10;
 8001398:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800139c:	0053      	lsls	r3, r2, #1
			for(uint8_t i = len; i > 0; i--){
 800139e:	b2e4      	uxtb	r4, r4
 80013a0:	2c00      	cmp	r4, #0
 80013a2:	d1f1      	bne.n	8001388 <xCLI_GetEventsRaw+0x38>
			if(par > DataLog_GetSavedEventsCnt()){
 80013a4:	f001 fae4 	bl	8002970 <DataLog_GetSavedEventsCnt>
 80013a8:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <xCLI_GetEventsRaw+0x148>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4290      	cmp	r0, r2
 80013ae:	d210      	bcs.n	80013d2 <xCLI_GetEventsRaw+0x82>
				par = DataLog_GetSavedEventsCnt();
 80013b0:	f001 fade 	bl	8002970 <DataLog_GetSavedEventsCnt>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <xCLI_GetEventsRaw+0x148>)
 80013b8:	6018      	str	r0, [r3, #0]
				sprintf(pcWriteBuffer, "Only %d events to read...\r\n", par);
 80013ba:	4938      	ldr	r1, [pc, #224]	; (800149c <xCLI_GetEventsRaw+0x14c>)
 80013bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80013be:	f00b f939 	bl	800c634 <sprintf_>
			step++;
 80013c2:	4a33      	ldr	r2, [pc, #204]	; (8001490 <xCLI_GetEventsRaw+0x140>)
 80013c4:	7813      	ldrb	r3, [r2, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 80013ca:	2001      	movs	r0, #1
	}

	return retVal;
}
 80013cc:	b019      	add	sp, #100	; 0x64
 80013ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				sprintf(pcWriteBuffer, "Reading %d events...\r\n", par);
 80013d2:	4933      	ldr	r1, [pc, #204]	; (80014a0 <xCLI_GetEventsRaw+0x150>)
 80013d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80013d6:	f00b f92d 	bl	800c634 <sprintf_>
 80013da:	e7f2      	b.n	80013c2 <xCLI_GetEventsRaw+0x72>
			if(DL_OK == DataLog_GetLastEventsN(&event, par)){
 80013dc:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <xCLI_GetEventsRaw+0x148>)
 80013de:	6819      	ldr	r1, [r3, #0]
 80013e0:	a813      	add	r0, sp, #76	; 0x4c
 80013e2:	f001 facb 	bl	800297c <DataLog_GetLastEventsN>
 80013e6:	2800      	cmp	r0, #0
 80013e8:	d148      	bne.n	800147c <xCLI_GetEventsRaw+0x12c>
						event.bytes[0], event.bytes[1], event.bytes[2], event.bytes[3],
 80013ea:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80013ee:	9310      	str	r3, [sp, #64]	; 0x40
 80013f0:	f89d 104d 	ldrb.w	r1, [sp, #77]	; 0x4d
 80013f4:	9111      	str	r1, [sp, #68]	; 0x44
 80013f6:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 80013fa:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
						event.bytes[4], event.bytes[5], event.bytes[6], event.bytes[7],
 80013fe:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8001402:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
 8001406:	f89d 4052 	ldrb.w	r4, [sp, #82]	; 0x52
 800140a:	f89d 5053 	ldrb.w	r5, [sp, #83]	; 0x53
						event.bytes[8], event.bytes[9], event.bytes[10], event.bytes[11],
 800140e:	f89d 6054 	ldrb.w	r6, [sp, #84]	; 0x54
 8001412:	f89d 7055 	ldrb.w	r7, [sp, #85]	; 0x55
 8001416:	f89d c056 	ldrb.w	ip, [sp, #86]	; 0x56
 800141a:	f89d e057 	ldrb.w	lr, [sp, #87]	; 0x57
						event.bytes[12], event.bytes[13], event.bytes[14], event.bytes[15]);
 800141e:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8001422:	f89d 9059 	ldrb.w	r9, [sp, #89]	; 0x59
 8001426:	f89d a05a 	ldrb.w	sl, [sp, #90]	; 0x5a
 800142a:	f89d b05b 	ldrb.w	fp, [sp, #91]	; 0x5b
				sprintf(pcWriteBuffer, "%02d %02d %02d %02d %02d %02d %d %d %d %d %d %d %d %d %d %d \r\n",
 800142e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8001432:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8001436:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 800143a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800143e:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8001442:	f8cd c020 	str.w	ip, [sp, #32]
 8001446:	9707      	str	r7, [sp, #28]
 8001448:	9606      	str	r6, [sp, #24]
 800144a:	9505      	str	r5, [sp, #20]
 800144c:	9404      	str	r4, [sp, #16]
 800144e:	9003      	str	r0, [sp, #12]
 8001450:	9102      	str	r1, [sp, #8]
 8001452:	9201      	str	r2, [sp, #4]
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001458:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800145a:	4912      	ldr	r1, [pc, #72]	; (80014a4 <xCLI_GetEventsRaw+0x154>)
 800145c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800145e:	f00b f8e9 	bl	800c634 <sprintf_>
				par --;
 8001462:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <xCLI_GetEventsRaw+0x148>)
 8001464:	6813      	ldr	r3, [r2, #0]
 8001466:	3b01      	subs	r3, #1
 8001468:	6013      	str	r3, [r2, #0]
			if(par == 0){
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <xCLI_GetEventsRaw+0x148>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	b96b      	cbnz	r3, 800148c <xCLI_GetEventsRaw+0x13c>
				step++;
 8001470:	4a07      	ldr	r2, [pc, #28]	; (8001490 <xCLI_GetEventsRaw+0x140>)
 8001472:	7813      	ldrb	r3, [r2, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8001478:	2001      	movs	r0, #1
 800147a:	e7a7      	b.n	80013cc <xCLI_GetEventsRaw+0x7c>
				sprintf(pcWriteBuffer, "No more events.\r\n");
 800147c:	490a      	ldr	r1, [pc, #40]	; (80014a8 <xCLI_GetEventsRaw+0x158>)
 800147e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001480:	f00b f8d8 	bl	800c634 <sprintf_>
				par = 0;
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <xCLI_GetEventsRaw+0x148>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	e7ee      	b.n	800146a <xCLI_GetEventsRaw+0x11a>
	BaseType_t retVal = pdTRUE;
 800148c:	2001      	movs	r0, #1
	return retVal;
 800148e:	e79d      	b.n	80013cc <xCLI_GetEventsRaw+0x7c>
 8001490:	2000012f 	.word	0x2000012f
 8001494:	0800d56c 	.word	0x0800d56c
 8001498:	20000128 	.word	0x20000128
 800149c:	0800d4e8 	.word	0x0800d4e8
 80014a0:	0800d504 	.word	0x0800d504
 80014a4:	0800d530 	.word	0x0800d530
 80014a8:	0800d51c 	.word	0x0800d51c

080014ac <xCLI_SetTime>:

BaseType_t xCLI_SetTime( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 80014ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	4607      	mov	r7, r0
 80014b4:	4614      	mov	r4, r2
	int8_t* parameter, len;
	RTC_TimeTypeDef time;
	uint8_t hour, minute, second;

	parameter = FreeRTOS_CLIGetParameter((char*)pcCommandString, 1, &len);
 80014b6:	f10d 0217 	add.w	r2, sp, #23
 80014ba:	2101      	movs	r1, #1
 80014bc:	4620      	mov	r0, r4
 80014be:	f00a fc8d 	bl	800bddc <FreeRTOS_CLIGetParameter>
	hour = (*parameter - '0') * 10 + (*(parameter + 1) - '0');
 80014c2:	f990 3000 	ldrsb.w	r3, [r0]
 80014c6:	3b30      	subs	r3, #48	; 0x30
 80014c8:	7846      	ldrb	r6, [r0, #1]
 80014ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014ce:	005a      	lsls	r2, r3, #1
 80014d0:	4416      	add	r6, r2
 80014d2:	b2f6      	uxtb	r6, r6
 80014d4:	3e30      	subs	r6, #48	; 0x30
 80014d6:	b2f6      	uxtb	r6, r6

	parameter = FreeRTOS_CLIGetParameter((char*)pcCommandString, 2, &len);
 80014d8:	f10d 0217 	add.w	r2, sp, #23
 80014dc:	2102      	movs	r1, #2
 80014de:	4620      	mov	r0, r4
 80014e0:	f00a fc7c 	bl	800bddc <FreeRTOS_CLIGetParameter>
	minute = (*parameter - '0') * 10 + (*(parameter + 1) - '0');
 80014e4:	f990 3000 	ldrsb.w	r3, [r0]
 80014e8:	3b30      	subs	r3, #48	; 0x30
 80014ea:	7845      	ldrb	r5, [r0, #1]
 80014ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014f0:	005a      	lsls	r2, r3, #1
 80014f2:	4415      	add	r5, r2
 80014f4:	b2ed      	uxtb	r5, r5
 80014f6:	3d30      	subs	r5, #48	; 0x30
 80014f8:	b2ed      	uxtb	r5, r5

	parameter = FreeRTOS_CLIGetParameter((char*)pcCommandString, 3, &len);
 80014fa:	f10d 0217 	add.w	r2, sp, #23
 80014fe:	2103      	movs	r1, #3
 8001500:	4620      	mov	r0, r4
 8001502:	f00a fc6b 	bl	800bddc <FreeRTOS_CLIGetParameter>
	second = (*parameter - '0') * 10 + (*(parameter + 1) - '0');
 8001506:	f990 3000 	ldrsb.w	r3, [r0]
 800150a:	3b30      	subs	r3, #48	; 0x30
 800150c:	7844      	ldrb	r4, [r0, #1]
 800150e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001512:	005a      	lsls	r2, r3, #1
 8001514:	4414      	add	r4, r2
 8001516:	b2e4      	uxtb	r4, r4
 8001518:	3c30      	subs	r4, #48	; 0x30
 800151a:	b2e4      	uxtb	r4, r4

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800151c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800155c <xCLI_SetTime+0xb0>
 8001520:	2200      	movs	r2, #0
 8001522:	4669      	mov	r1, sp
 8001524:	4640      	mov	r0, r8
 8001526:	f006 fc44 	bl	8007db2 <HAL_RTC_GetTime>
	time.Hours = hour;
 800152a:	f88d 6000 	strb.w	r6, [sp]
	time.Minutes = minute;
 800152e:	f88d 5001 	strb.w	r5, [sp, #1]
	time.Seconds = second;
 8001532:	f88d 4002 	strb.w	r4, [sp, #2]

	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001536:	2200      	movs	r2, #0
 8001538:	4669      	mov	r1, sp
 800153a:	4640      	mov	r0, r8
 800153c:	f006 fb44 	bl	8007bc8 <HAL_RTC_SetTime>
	DataLog_LogEvent(EV_RTC_UPDATE);
 8001540:	2001      	movs	r0, #1
 8001542:	f001 f969 	bl	8002818 <DataLog_LogEvent>
	sprintf(pcWriteBuffer, "    Time changed.\r\n");
 8001546:	4904      	ldr	r1, [pc, #16]	; (8001558 <xCLI_SetTime+0xac>)
 8001548:	4638      	mov	r0, r7
 800154a:	f00b f873 	bl	800c634 <sprintf_>
	return pdFALSE;
}
 800154e:	2000      	movs	r0, #0
 8001550:	b006      	add	sp, #24
 8001552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001556:	bf00      	nop
 8001558:	0800d5a4 	.word	0x0800d5a4
 800155c:	20003250 	.word	0x20003250

08001560 <xCLI_SetDate>:

BaseType_t xCLI_SetDate( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8001560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001564:	b088      	sub	sp, #32
 8001566:	4607      	mov	r7, r0
 8001568:	4614      	mov	r4, r2
	int8_t* parameter, len;
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	uint8_t day, month, year;

	parameter = FreeRTOS_CLIGetParameter((char*)pcCommandString, 1, &len);
 800156a:	f10d 021f 	add.w	r2, sp, #31
 800156e:	2101      	movs	r1, #1
 8001570:	4620      	mov	r0, r4
 8001572:	f00a fc33 	bl	800bddc <FreeRTOS_CLIGetParameter>
	day = (*parameter - '0') * 10 + (*(parameter + 1) - '0');
 8001576:	f990 3000 	ldrsb.w	r3, [r0]
 800157a:	3b30      	subs	r3, #48	; 0x30
 800157c:	7846      	ldrb	r6, [r0, #1]
 800157e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001582:	005a      	lsls	r2, r3, #1
 8001584:	4416      	add	r6, r2
 8001586:	b2f6      	uxtb	r6, r6
 8001588:	3e30      	subs	r6, #48	; 0x30
 800158a:	b2f6      	uxtb	r6, r6

	parameter = FreeRTOS_CLIGetParameter((char*)pcCommandString, 2, &len);
 800158c:	f10d 021f 	add.w	r2, sp, #31
 8001590:	2102      	movs	r1, #2
 8001592:	4620      	mov	r0, r4
 8001594:	f00a fc22 	bl	800bddc <FreeRTOS_CLIGetParameter>
	month = (*parameter - '0') * 10 + (*(parameter + 1) - '0');
 8001598:	f990 3000 	ldrsb.w	r3, [r0]
 800159c:	3b30      	subs	r3, #48	; 0x30
 800159e:	7845      	ldrb	r5, [r0, #1]
 80015a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015a4:	005a      	lsls	r2, r3, #1
 80015a6:	4415      	add	r5, r2
 80015a8:	b2ed      	uxtb	r5, r5
 80015aa:	3d30      	subs	r5, #48	; 0x30
 80015ac:	b2ed      	uxtb	r5, r5

	parameter = FreeRTOS_CLIGetParameter((char*)pcCommandString, 3, &len);
 80015ae:	f10d 021f 	add.w	r2, sp, #31
 80015b2:	2103      	movs	r1, #3
 80015b4:	4620      	mov	r0, r4
 80015b6:	f00a fc11 	bl	800bddc <FreeRTOS_CLIGetParameter>
	year = (*parameter - '0') * 10 + (*(parameter + 1) - '0');
 80015ba:	f990 3000 	ldrsb.w	r3, [r0]
 80015be:	3b30      	subs	r3, #48	; 0x30
 80015c0:	7844      	ldrb	r4, [r0, #1]
 80015c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015c6:	005a      	lsls	r2, r3, #1
 80015c8:	4414      	add	r4, r2
 80015ca:	b2e4      	uxtb	r4, r4
 80015cc:	3c30      	subs	r4, #48	; 0x30
 80015ce:	b2e4      	uxtb	r4, r4

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80015d0:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8001618 <xCLI_SetDate+0xb8>
 80015d4:	2200      	movs	r2, #0
 80015d6:	a902      	add	r1, sp, #8
 80015d8:	4640      	mov	r0, r8
 80015da:	f006 fbea 	bl	8007db2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80015de:	2200      	movs	r2, #0
 80015e0:	a901      	add	r1, sp, #4
 80015e2:	4640      	mov	r0, r8
 80015e4:	f006 fc10 	bl	8007e08 <HAL_RTC_GetDate>
	date.Date = day;
 80015e8:	f88d 6006 	strb.w	r6, [sp, #6]
	date.Month = month;
 80015ec:	f88d 5005 	strb.w	r5, [sp, #5]
	date.Year = year;
 80015f0:	f88d 4007 	strb.w	r4, [sp, #7]

	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80015f4:	2200      	movs	r2, #0
 80015f6:	a901      	add	r1, sp, #4
 80015f8:	4640      	mov	r0, r8
 80015fa:	f006 fb64 	bl	8007cc6 <HAL_RTC_SetDate>
	DataLog_LogEvent(EV_RTC_UPDATE);
 80015fe:	2001      	movs	r0, #1
 8001600:	f001 f90a 	bl	8002818 <DataLog_LogEvent>
	sprintf(pcWriteBuffer, "    Date changed.\r\n");
 8001604:	4903      	ldr	r1, [pc, #12]	; (8001614 <xCLI_SetDate+0xb4>)
 8001606:	4638      	mov	r0, r7
 8001608:	f00b f814 	bl	800c634 <sprintf_>
	return pdFALSE;
}
 800160c:	2000      	movs	r0, #0
 800160e:	b008      	add	sp, #32
 8001610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001614:	0800d590 	.word	0x0800d590
 8001618:	20003250 	.word	0x20003250

0800161c <CLI_Init>:
void CLI_Init (void){
 800161c:	b508      	push	{r3, lr}
	FreeRTOS_CLIRegisterCommand(&xEreaseEECmd);
 800161e:	4815      	ldr	r0, [pc, #84]	; (8001674 <CLI_Init+0x58>)
 8001620:	f00a fb50 	bl	800bcc4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xEreaseFlashCmd);
 8001624:	4814      	ldr	r0, [pc, #80]	; (8001678 <CLI_Init+0x5c>)
 8001626:	f00a fb4d 	bl	800bcc4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xShowConfigCmd);
 800162a:	4814      	ldr	r0, [pc, #80]	; (800167c <CLI_Init+0x60>)
 800162c:	f00a fb4a 	bl	800bcc4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetSysStatusCmd);
 8001630:	4813      	ldr	r0, [pc, #76]	; (8001680 <CLI_Init+0x64>)
 8001632:	f00a fb47 	bl	800bcc4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetRtosStatsCmd);
 8001636:	4813      	ldr	r0, [pc, #76]	; (8001684 <CLI_Init+0x68>)
 8001638:	f00a fb44 	bl	800bcc4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetCommStatsCmd);
 800163c:	4812      	ldr	r0, [pc, #72]	; (8001688 <CLI_Init+0x6c>)
 800163e:	f00a fb41 	bl	800bcc4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetIOCmd);
 8001642:	4812      	ldr	r0, [pc, #72]	; (800168c <CLI_Init+0x70>)
 8001644:	f00a fb3e 	bl	800bcc4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetLastEventCmd);
 8001648:	4811      	ldr	r0, [pc, #68]	; (8001690 <CLI_Init+0x74>)
 800164a:	f00a fb3b 	bl	800bcc4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetLastEventsCmd);
 800164e:	4811      	ldr	r0, [pc, #68]	; (8001694 <CLI_Init+0x78>)
 8001650:	f00a fb38 	bl	800bcc4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetLastEventsRawCmd);
 8001654:	4810      	ldr	r0, [pc, #64]	; (8001698 <CLI_Init+0x7c>)
 8001656:	f00a fb35 	bl	800bcc4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xWriteTestEventCmd);
 800165a:	4810      	ldr	r0, [pc, #64]	; (800169c <CLI_Init+0x80>)
 800165c:	f00a fb32 	bl	800bcc4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xSetTimeCmd);
 8001660:	480f      	ldr	r0, [pc, #60]	; (80016a0 <CLI_Init+0x84>)
 8001662:	f00a fb2f 	bl	800bcc4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xSetDateCmd);
 8001666:	480f      	ldr	r0, [pc, #60]	; (80016a4 <CLI_Init+0x88>)
 8001668:	f00a fb2c 	bl	800bcc4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xResetCmd);
 800166c:	480e      	ldr	r0, [pc, #56]	; (80016a8 <CLI_Init+0x8c>)
 800166e:	f00a fb29 	bl	800bcc4 <FreeRTOS_CLIRegisterCommand>
}
 8001672:	bd08      	pop	{r3, pc}
 8001674:	0800d978 	.word	0x0800d978
 8001678:	0800d988 	.word	0x0800d988
 800167c:	0800da38 	.word	0x0800da38
 8001680:	0800d9f8 	.word	0x0800d9f8
 8001684:	0800d9e8 	.word	0x0800d9e8
 8001688:	0800d998 	.word	0x0800d998
 800168c:	0800d9a8 	.word	0x0800d9a8
 8001690:	0800d9b8 	.word	0x0800d9b8
 8001694:	0800d9c8 	.word	0x0800d9c8
 8001698:	0800d9d8 	.word	0x0800d9d8
 800169c:	0800da48 	.word	0x0800da48
 80016a0:	0800da28 	.word	0x0800da28
 80016a4:	0800da18 	.word	0x0800da18
 80016a8:	0800da08 	.word	0x0800da08

080016ac <Config_CalculateCRC>:
		configuration.dummy = MAGIC_WORD;
		configuration.crc = Config_CalculateCRC();
	}
}

static uint32_t Config_CalculateCRC (void){
 80016ac:	b508      	push	{r3, lr}
	return HAL_CRC_Calculate(&hcrc, (uint32_t*)&configuration, (CONFIG_BYTES_LEN - 2)/4);
 80016ae:	220d      	movs	r2, #13
 80016b0:	4902      	ldr	r1, [pc, #8]	; (80016bc <Config_CalculateCRC+0x10>)
 80016b2:	4803      	ldr	r0, [pc, #12]	; (80016c0 <Config_CalculateCRC+0x14>)
 80016b4:	f004 fc63 	bl	8005f7e <HAL_CRC_Calculate>
}
 80016b8:	bd08      	pop	{r3, pc}
 80016ba:	bf00      	nop
 80016bc:	20000134 	.word	0x20000134
 80016c0:	200030dc 	.word	0x200030dc

080016c4 <Config_CheckData>:

static CONFStatus_t Config_CheckData (void){
 80016c4:	b510      	push	{r4, lr}
	CONFStatus_t retval;
	uint32_t readCRC, actualCRC;

	readCRC = configuration.crc;
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <Config_CheckData+0x18>)
 80016c8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
	actualCRC = Config_CalculateCRC();
 80016ca:	f7ff ffef 	bl	80016ac <Config_CalculateCRC>

	if(readCRC != actualCRC){
 80016ce:	4284      	cmp	r4, r0
 80016d0:	d101      	bne.n	80016d6 <Config_CheckData+0x12>
		if(configuration.dummy != MAGIC_WORD){
			retval = CONF_ERR_NOCONF;
		}
		retval = CONF_ERR_CRC;
	}else{
		retval = CONF_OK;
 80016d2:	2000      	movs	r0, #0
	}
	return retval;
}
 80016d4:	bd10      	pop	{r4, pc}
		retval = CONF_ERR_CRC;
 80016d6:	f06f 0003 	mvn.w	r0, #3
 80016da:	e7fb      	b.n	80016d4 <Config_CheckData+0x10>
 80016dc:	20000134 	.word	0x20000134

080016e0 <Config_ChangeValue>:
	if(value != NULL && param < PARAM_NUMS){
 80016e0:	2900      	cmp	r1, #0
 80016e2:	d061      	beq.n	80017a8 <Config_ChangeValue+0xc8>
 80016e4:	2811      	cmp	r0, #17
 80016e6:	d85f      	bhi.n	80017a8 <Config_ChangeValue+0xc8>
void Config_ChangeValue(uint32_t param, void* value){
 80016e8:	b510      	push	{r4, lr}
		switch(param){
 80016ea:	2811      	cmp	r0, #17
 80016ec:	d80d      	bhi.n	800170a <Config_ChangeValue+0x2a>
 80016ee:	e8df f000 	tbb	[pc, r0]
 80016f2:	1409      	.short	0x1409
 80016f4:	24201c18 	.word	0x24201c18
 80016f8:	34302c28 	.word	0x34302c28
 80016fc:	44403c38 	.word	0x44403c38
 8001700:	56514c48 	.word	0x56514c48
				memcpy(&configuration.RegulationConfig.CWU_heater_power, value, 4);
 8001704:	680a      	ldr	r2, [r1, #0]
 8001706:	4b29      	ldr	r3, [pc, #164]	; (80017ac <Config_ChangeValue+0xcc>)
 8001708:	601a      	str	r2, [r3, #0]
		configuration.dummy = MAGIC_WORD;
 800170a:	4c28      	ldr	r4, [pc, #160]	; (80017ac <Config_ChangeValue+0xcc>)
 800170c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8001710:	8663      	strh	r3, [r4, #50]	; 0x32
		configuration.crc = Config_CalculateCRC();
 8001712:	f7ff ffcb 	bl	80016ac <Config_CalculateCRC>
 8001716:	6360      	str	r0, [r4, #52]	; 0x34
}
 8001718:	bd10      	pop	{r4, pc}
				memcpy(&configuration.RegulationConfig.CO_heater_power, value, 4);
 800171a:	680a      	ldr	r2, [r1, #0]
 800171c:	4b23      	ldr	r3, [pc, #140]	; (80017ac <Config_ChangeValue+0xcc>)
 800171e:	605a      	str	r2, [r3, #4]
				break;
 8001720:	e7f3      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.net_max_power, value, 4);
 8001722:	680a      	ldr	r2, [r1, #0]
 8001724:	4b21      	ldr	r3, [pc, #132]	; (80017ac <Config_ChangeValue+0xcc>)
 8001726:	609a      	str	r2, [r3, #8]
				break;
 8001728:	e7ef      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.counter_address, value, 1);
 800172a:	780a      	ldrb	r2, [r1, #0]
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <Config_ChangeValue+0xcc>)
 800172e:	731a      	strb	r2, [r3, #12]
				break;
 8001730:	e7eb      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.temperature_address, value, 1);
 8001732:	780a      	ldrb	r2, [r1, #0]
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <Config_ChangeValue+0xcc>)
 8001736:	735a      	strb	r2, [r3, #13]
				break;
 8001738:	e7e7      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.acumulated_power_coeff, value, 1);
 800173a:	780a      	ldrb	r2, [r1, #0]
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <Config_ChangeValue+0xcc>)
 800173e:	739a      	strb	r2, [r3, #14]
				break;
 8001740:	e7e3      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.heater_power_coeff, value, 1);
 8001742:	780a      	ldrb	r2, [r1, #0]
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <Config_ChangeValue+0xcc>)
 8001746:	73da      	strb	r2, [r3, #15]
				break;
 8001748:	e7df      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CO_hi_temp, value, 1);
 800174a:	780a      	ldrb	r2, [r1, #0]
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <Config_ChangeValue+0xcc>)
 800174e:	741a      	strb	r2, [r3, #16]
				break;
 8001750:	e7db      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CO_lo_temp, value, 1);
 8001752:	780a      	ldrb	r2, [r1, #0]
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <Config_ChangeValue+0xcc>)
 8001756:	745a      	strb	r2, [r3, #17]
				break;
 8001758:	e7d7      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CWU_hi_temp, value, 1);
 800175a:	780a      	ldrb	r2, [r1, #0]
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <Config_ChangeValue+0xcc>)
 800175e:	749a      	strb	r2, [r3, #18]
				break;
 8001760:	e7d3      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CWU_lo_temp, value, 1);
 8001762:	780a      	ldrb	r2, [r1, #0]
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <Config_ChangeValue+0xcc>)
 8001766:	74da      	strb	r2, [r3, #19]
				break;
 8001768:	e7cf      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.exported_power, value, 4);
 800176a:	680a      	ldr	r2, [r1, #0]
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <Config_ChangeValue+0xcc>)
 800176e:	615a      	str	r2, [r3, #20]
				break;
 8001770:	e7cb      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.imported_power, value, 4);
 8001772:	680a      	ldr	r2, [r1, #0]
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <Config_ChangeValue+0xcc>)
 8001776:	619a      	str	r2, [r3, #24]
				break;
 8001778:	e7c7      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.acumulated_power, value, 4);
 800177a:	680a      	ldr	r2, [r1, #0]
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <Config_ChangeValue+0xcc>)
 800177e:	61da      	str	r2, [r3, #28]
				break;
 8001780:	e7c3      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.ipAddress[0], value, 4);
 8001782:	680a      	ldr	r2, [r1, #0]
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <Config_ChangeValue+0xcc>)
 8001786:	621a      	str	r2, [r3, #32]
				break;
 8001788:	e7bf      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.subnetMask[0], value, 1);
 800178a:	780a      	ldrb	r2, [r1, #0]
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <Config_ChangeValue+0xcc>)
 800178e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				break;
 8001792:	e7ba      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.gatewayAddress[0], value, 1);
 8001794:	780a      	ldrb	r2, [r1, #0]
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <Config_ChangeValue+0xcc>)
 8001798:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				break;
 800179c:	e7b5      	b.n	800170a <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.macAddress[0], value, 1);
 800179e:	780a      	ldrb	r2, [r1, #0]
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <Config_ChangeValue+0xcc>)
 80017a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				break;
 80017a6:	e7b0      	b.n	800170a <Config_ChangeValue+0x2a>
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000134 	.word	0x20000134

080017b0 <Config_Save>:

CONFStatus_t Config_Save (void){
 80017b0:	b508      	push	{r3, lr}
	CONFStatus_t retval;
	retval = (CONFStatus_t)EE_Write(&configuration, 0, CONFIG_BYTES_LEN);
 80017b2:	2238      	movs	r2, #56	; 0x38
 80017b4:	2100      	movs	r1, #0
 80017b6:	4802      	ldr	r0, [pc, #8]	; (80017c0 <Config_Save+0x10>)
 80017b8:	f000 f902 	bl	80019c0 <EE_Write>
	return retval;
}
 80017bc:	bd08      	pop	{r3, pc}
 80017be:	bf00      	nop
 80017c0:	20000134 	.word	0x20000134

080017c4 <Config_GetConfig>:
ConfigLoadStatus_t Config_GetConfigStatus(void){
	return configuartionStatus;
}

CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 80017c4:	b1c0      	cbz	r0, 80017f8 <Config_GetConfig+0x34>
CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
 80017c6:	b4f0      	push	{r4, r5, r6, r7}
 80017c8:	4604      	mov	r4, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <Config_GetConfig+0x40>)
 80017cc:	f993 3000 	ldrsb.w	r3, [r3]
 80017d0:	b9ab      	cbnz	r3, 80017fe <Config_GetConfig+0x3a>
		memcpy(config, &configuration, CONFIG_BYTES_LEN);
 80017d2:	4d0d      	ldr	r5, [pc, #52]	; (8001808 <Config_GetConfig+0x44>)
 80017d4:	f105 0730 	add.w	r7, r5, #48	; 0x30
 80017d8:	462e      	mov	r6, r5
 80017da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80017dc:	6020      	str	r0, [r4, #0]
 80017de:	6061      	str	r1, [r4, #4]
 80017e0:	60a2      	str	r2, [r4, #8]
 80017e2:	60e3      	str	r3, [r4, #12]
 80017e4:	4635      	mov	r5, r6
 80017e6:	3410      	adds	r4, #16
 80017e8:	42be      	cmp	r6, r7
 80017ea:	d1f5      	bne.n	80017d8 <Config_GetConfig+0x14>
 80017ec:	cd03      	ldmia	r5!, {r0, r1}
 80017ee:	6020      	str	r0, [r4, #0]
 80017f0:	6061      	str	r1, [r4, #4]
		return CONF_OK;
 80017f2:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 80017f4:	bcf0      	pop	{r4, r5, r6, r7}
 80017f6:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 80017f8:	f06f 0001 	mvn.w	r0, #1
}
 80017fc:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 80017fe:	f06f 0004 	mvn.w	r0, #4
 8001802:	e7f7      	b.n	80017f4 <Config_GetConfig+0x30>
 8001804:	20000130 	.word	0x20000130
 8001808:	20000134 	.word	0x20000134

0800180c <Config_GetEthernetConfig>:

CONFStatus_t Config_GetEthernetConfig (EthernetConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 800180c:	b180      	cbz	r0, 8001830 <Config_GetEthernetConfig+0x24>
CONFStatus_t Config_GetEthernetConfig (EthernetConfig_t* config){
 800180e:	b430      	push	{r4, r5}
 8001810:	4605      	mov	r5, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <Config_GetEthernetConfig+0x30>)
 8001814:	f993 3000 	ldrsb.w	r3, [r3]
 8001818:	b96b      	cbnz	r3, 8001836 <Config_GetEthernetConfig+0x2a>
		memcpy(config, &configuration.EthernetConfig, ETH_CONFIG_BYTES_LEN);
 800181a:	4c09      	ldr	r4, [pc, #36]	; (8001840 <Config_GetEthernetConfig+0x34>)
 800181c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181e:	6028      	str	r0, [r5, #0]
 8001820:	6069      	str	r1, [r5, #4]
 8001822:	60aa      	str	r2, [r5, #8]
 8001824:	60eb      	str	r3, [r5, #12]
 8001826:	8823      	ldrh	r3, [r4, #0]
 8001828:	822b      	strh	r3, [r5, #16]
		return CONF_OK;
 800182a:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 800182c:	bc30      	pop	{r4, r5}
 800182e:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 8001830:	f06f 0001 	mvn.w	r0, #1
}
 8001834:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 8001836:	f06f 0004 	mvn.w	r0, #4
 800183a:	e7f7      	b.n	800182c <Config_GetEthernetConfig+0x20>
 800183c:	20000130 	.word	0x20000130
 8001840:	20000154 	.word	0x20000154

08001844 <Config_GetRegConfig>:

CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8001844:	b198      	cbz	r0, 800186e <Config_GetRegConfig+0x2a>
CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
 8001846:	b430      	push	{r4, r5}
 8001848:	4605      	mov	r5, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <Config_GetRegConfig+0x38>)
 800184c:	f993 3000 	ldrsb.w	r3, [r3]
 8001850:	b983      	cbnz	r3, 8001874 <Config_GetRegConfig+0x30>
		memcpy(config, &configuration.RegulationConfig, REG_CONFIG_BYTES_LEN);
 8001852:	4c0b      	ldr	r4, [pc, #44]	; (8001880 <Config_GetRegConfig+0x3c>)
 8001854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001856:	6028      	str	r0, [r5, #0]
 8001858:	6069      	str	r1, [r5, #4]
 800185a:	60aa      	str	r2, [r5, #8]
 800185c:	60eb      	str	r3, [r5, #12]
 800185e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001860:	6128      	str	r0, [r5, #16]
 8001862:	6169      	str	r1, [r5, #20]
 8001864:	61aa      	str	r2, [r5, #24]
 8001866:	61eb      	str	r3, [r5, #28]
		return CONF_OK;
 8001868:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 800186a:	bc30      	pop	{r4, r5}
 800186c:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 800186e:	f06f 0001 	mvn.w	r0, #1
}
 8001872:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 8001874:	f06f 0004 	mvn.w	r0, #4
 8001878:	e7f7      	b.n	800186a <Config_GetRegConfig+0x26>
 800187a:	bf00      	nop
 800187c:	20000130 	.word	0x20000130
 8001880:	20000134 	.word	0x20000134

08001884 <Config_Copy>:

CONFStatus_t Config_Copy (ConfigStruct_t* dest, ConfigStruct_t* src){
	if((dest == NULL) || (src == NULL)) return CONF_ERR_NULL;
 8001884:	b1b0      	cbz	r0, 80018b4 <Config_Copy+0x30>
 8001886:	b1c1      	cbz	r1, 80018ba <Config_Copy+0x36>
CONFStatus_t Config_Copy (ConfigStruct_t* dest, ConfigStruct_t* src){
 8001888:	b470      	push	{r4, r5, r6}
	memcpy(dest, src, CONFIG_BYTES_LEN);
 800188a:	460a      	mov	r2, r1
 800188c:	3130      	adds	r1, #48	; 0x30
 800188e:	6816      	ldr	r6, [r2, #0]
 8001890:	6855      	ldr	r5, [r2, #4]
 8001892:	6894      	ldr	r4, [r2, #8]
 8001894:	68d3      	ldr	r3, [r2, #12]
 8001896:	6006      	str	r6, [r0, #0]
 8001898:	6045      	str	r5, [r0, #4]
 800189a:	6084      	str	r4, [r0, #8]
 800189c:	60c3      	str	r3, [r0, #12]
 800189e:	3210      	adds	r2, #16
 80018a0:	3010      	adds	r0, #16
 80018a2:	428a      	cmp	r2, r1
 80018a4:	d1f3      	bne.n	800188e <Config_Copy+0xa>
 80018a6:	6811      	ldr	r1, [r2, #0]
 80018a8:	6853      	ldr	r3, [r2, #4]
 80018aa:	6001      	str	r1, [r0, #0]
 80018ac:	6043      	str	r3, [r0, #4]
	return CONF_OK;
 80018ae:	2000      	movs	r0, #0
}
 80018b0:	bc70      	pop	{r4, r5, r6}
 80018b2:	4770      	bx	lr
	if((dest == NULL) || (src == NULL)) return CONF_ERR_NULL;
 80018b4:	f06f 0001 	mvn.w	r0, #1
 80018b8:	4770      	bx	lr
 80018ba:	f06f 0001 	mvn.w	r0, #1
}
 80018be:	4770      	bx	lr

080018c0 <Config_Init>:
CONFStatus_t Config_Init(I2C_HandleTypeDef* iic){
 80018c0:	b510      	push	{r4, lr}
	configuartionStatus = CONF_STAT_INIT;
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <Config_Init+0x5c>)
 80018c4:	22ff      	movs	r2, #255	; 0xff
 80018c6:	701a      	strb	r2, [r3, #0]
	retval |= EE_Init(iic);
 80018c8:	f000 f82e 	bl	8001928 <EE_Init>
	retval = EE_Read(&configuration, 0, CONFIG_BYTES_LEN);
 80018cc:	2238      	movs	r2, #56	; 0x38
 80018ce:	2100      	movs	r1, #0
 80018d0:	4813      	ldr	r0, [pc, #76]	; (8001920 <Config_Init+0x60>)
 80018d2:	f000 f833 	bl	800193c <EE_Read>
 80018d6:	4603      	mov	r3, r0
	if(retval == EE_OK){
 80018d8:	b138      	cbz	r0, 80018ea <Config_Init+0x2a>
	if(retval == CONF_OK){
 80018da:	b153      	cbz	r3, 80018f2 <Config_Init+0x32>
		if((retval == CONF_ERR_NOCONF) || (retval == CONF_ERR_CRC)){
 80018dc:	1d5a      	adds	r2, r3, #5
 80018de:	2a01      	cmp	r2, #1
 80018e0:	d90c      	bls.n	80018fc <Config_Init+0x3c>
			configuartionStatus = CONF_STAT_ERROR;
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <Config_Init+0x5c>)
 80018e4:	21fd      	movs	r1, #253	; 0xfd
 80018e6:	7011      	strb	r1, [r2, #0]
 80018e8:	e006      	b.n	80018f8 <Config_Init+0x38>
		retval = Config_CheckData();
 80018ea:	f7ff feeb 	bl	80016c4 <Config_CheckData>
 80018ee:	4603      	mov	r3, r0
 80018f0:	e7f3      	b.n	80018da <Config_Init+0x1a>
		configuartionStatus = CONF_STAT_LOADED;
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <Config_Init+0x5c>)
 80018f4:	2100      	movs	r1, #0
 80018f6:	7011      	strb	r1, [r2, #0]
}
 80018f8:	b258      	sxtb	r0, r3
 80018fa:	bd10      	pop	{r4, pc}
			Config_Copy(&configuration, &defaultConfig);
 80018fc:	4c08      	ldr	r4, [pc, #32]	; (8001920 <Config_Init+0x60>)
 80018fe:	4909      	ldr	r1, [pc, #36]	; (8001924 <Config_Init+0x64>)
 8001900:	4620      	mov	r0, r4
 8001902:	f7ff ffbf 	bl	8001884 <Config_Copy>
			configuration.crc = Config_CalculateCRC();
 8001906:	f7ff fed1 	bl	80016ac <Config_CalculateCRC>
 800190a:	6360      	str	r0, [r4, #52]	; 0x34
			retval = Config_Save();
 800190c:	f7ff ff50 	bl	80017b0 <Config_Save>
 8001910:	4603      	mov	r3, r0
			configuartionStatus = CONF_STAT_LOADED;
 8001912:	4a02      	ldr	r2, [pc, #8]	; (800191c <Config_Init+0x5c>)
 8001914:	2100      	movs	r1, #0
 8001916:	7011      	strb	r1, [r2, #0]
 8001918:	e7ee      	b.n	80018f8 <Config_Init+0x38>
 800191a:	bf00      	nop
 800191c:	20000130 	.word	0x20000130
 8001920:	20000134 	.word	0x20000134
 8001924:	0800da58 	.word	0x0800da58

08001928 <EE_Init>:

extern osMutexId I2CMutexHandle;
I2C_HandleTypeDef* ee_iic;

EE_StatusTypeDef EE_Init (I2C_HandleTypeDef* hi2c){
	if(hi2c != NULL){
 8001928:	b118      	cbz	r0, 8001932 <EE_Init+0xa>
		ee_iic = hi2c;
 800192a:	4a03      	ldr	r2, [pc, #12]	; (8001938 <EE_Init+0x10>)
 800192c:	6010      	str	r0, [r2, #0]
		return EE_OK;
 800192e:	2000      	movs	r0, #0
 8001930:	4770      	bx	lr
	}
	return EE_ERR_NULL;
 8001932:	f06f 0001 	mvn.w	r0, #1
}
 8001936:	4770      	bx	lr
 8001938:	20002b74 	.word	0x20002b74

0800193c <EE_Read>:

EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;

	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 800193c:	b360      	cbz	r0, 8001998 <EE_Read+0x5c>
EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
 800193e:	b570      	push	{r4, r5, r6, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	4606      	mov	r6, r0
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8001944:	b35a      	cbz	r2, 800199e <EE_Read+0x62>
 8001946:	4614      	mov	r4, r2
 8001948:	460d      	mov	r5, r1

	dataBuf = (uint8_t*)data;
	if(pdTRUE == xSemaphoreTake(I2CMutexHandle, 100)){
 800194a:	2164      	movs	r1, #100	; 0x64
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <EE_Read+0x7c>)
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	f008 f9b8 	bl	8009cc4 <xQueueSemaphoreTake>
 8001954:	2801      	cmp	r0, #1
 8001956:	d125      	bne.n	80019a4 <EE_Read+0x68>
		i2cStatus= HAL_I2C_Mem_Read(ee_iic, EE_ADDR, addr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <EE_Read+0x80>)
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	b2a3      	uxth	r3, r4
 800195e:	1ca2      	adds	r2, r4, #2
 8001960:	0092      	lsls	r2, r2, #2
 8001962:	9202      	str	r2, [sp, #8]
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	9600      	str	r6, [sp, #0]
 8001968:	2301      	movs	r3, #1
 800196a:	462a      	mov	r2, r5
 800196c:	21a0      	movs	r1, #160	; 0xa0
 800196e:	f005 fa4b 	bl	8006e08 <HAL_I2C_Mem_Read>
 8001972:	4604      	mov	r4, r0
		xSemaphoreGive(I2CMutexHandle);
 8001974:	2300      	movs	r3, #0
 8001976:	461a      	mov	r2, r3
 8001978:	4619      	mov	r1, r3
 800197a:	480f      	ldr	r0, [pc, #60]	; (80019b8 <EE_Read+0x7c>)
 800197c:	6800      	ldr	r0, [r0, #0]
 800197e:	f007 ffab 	bl	80098d8 <xQueueGenericSend>
	}else{
		return EE_ERR_TIMEOUT;
	}
	if(i2cStatus == HAL_OK){
 8001982:	b194      	cbz	r4, 80019aa <EE_Read+0x6e>
		return EE_OK;
	}else if(i2cStatus == HAL_ERROR){
 8001984:	2c01      	cmp	r4, #1
 8001986:	d013      	beq.n	80019b0 <EE_Read+0x74>
		return EE_ERR_TIMEOUT;
	}else if(i2cStatus == HAL_BUSY){
 8001988:	2c02      	cmp	r4, #2
 800198a:	d002      	beq.n	8001992 <EE_Read+0x56>
		return EE_ERR_BUSY;
	}else{
		return EE_ERR_TIMEOUT;
 800198c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001990:	e00c      	b.n	80019ac <EE_Read+0x70>
		return EE_ERR_BUSY;
 8001992:	f06f 0002 	mvn.w	r0, #2
 8001996:	e009      	b.n	80019ac <EE_Read+0x70>
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8001998:	f06f 0001 	mvn.w	r0, #1
	}
}
 800199c:	4770      	bx	lr
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 800199e:	f06f 0001 	mvn.w	r0, #1
 80019a2:	e003      	b.n	80019ac <EE_Read+0x70>
		return EE_ERR_TIMEOUT;
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019a8:	e000      	b.n	80019ac <EE_Read+0x70>
		return EE_OK;
 80019aa:	2000      	movs	r0, #0
}
 80019ac:	b004      	add	sp, #16
 80019ae:	bd70      	pop	{r4, r5, r6, pc}
		return EE_ERR_TIMEOUT;
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019b4:	e7fa      	b.n	80019ac <EE_Read+0x70>
 80019b6:	bf00      	nop
 80019b8:	200033c8 	.word	0x200033c8
 80019bc:	20002b74 	.word	0x20002b74

080019c0 <EE_Write>:

EE_StatusTypeDef EE_Write (void* data, uint32_t addr, uint32_t len){
 80019c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019c4:	b084      	sub	sp, #16
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;
	uint32_t datalen, i, pages, rest, bytelen, addrCpy;
	uint8_t eeBlock, eeAddr;

	if(data == NULL || len <= 0 || len >= EE_SIZE) return retval;
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d07a      	beq.n	8001ac0 <EE_Write+0x100>
 80019ca:	460e      	mov	r6, r1
 80019cc:	4614      	mov	r4, r2
 80019ce:	4607      	mov	r7, r0
 80019d0:	2a00      	cmp	r2, #0
 80019d2:	d078      	beq.n	8001ac6 <EE_Write+0x106>
 80019d4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80019d8:	d278      	bcs.n	8001acc <EE_Write+0x10c>

	eeBlock = addr / EE_BLOCK_SIZE;
 80019da:	f3c1 2507 	ubfx	r5, r1, #8, #8
	eeAddr = addr % EE_BLOCK_SIZE;
 80019de:	fa5f f881 	uxtb.w	r8, r1

	dataBuf = (uint8_t*)data;
	datalen = len;
	addrCpy = addr;

	if(pdFALSE == xSemaphoreTake(I2CMutexHandle, 100)){
 80019e2:	2164      	movs	r1, #100	; 0x64
 80019e4:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <EE_Write+0x118>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	f008 f96c 	bl	8009cc4 <xQueueSemaphoreTake>
 80019ec:	2800      	cmp	r0, #0
 80019ee:	d070      	beq.n	8001ad2 <EE_Write+0x112>
		return EE_ERR_TIMEOUT;
	}

	if(len <= EE_PAGE_SIZE){
 80019f0:	2c10      	cmp	r4, #16
 80019f2:	d90a      	bls.n	8001a0a <EE_Write+0x4a>
			retval = EE_OK;
		}
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
	}else{
		pages = datalen >> 4;
 80019f4:	ea4f 1914 	mov.w	r9, r4, lsr #4
		rest = datalen % 16;
		if(rest) pages ++;
 80019f8:	f014 080f 	ands.w	r8, r4, #15
 80019fc:	d001      	beq.n	8001a02 <EE_Write+0x42>
 80019fe:	f109 0901 	add.w	r9, r9, #1
		for(i = 0; i < pages; i++){
 8001a02:	2500      	movs	r5, #0
	EE_StatusTypeDef retval = EE_ERR_NULL;
 8001a04:	f06f 0a01 	mvn.w	sl, #1
		for(i = 0; i < pages; i++){
 8001a08:	e037      	b.n	8001a7a <EE_Write+0xba>
		i2cStatus= HAL_I2C_Mem_Write(ee_iic, EE_ADDR + eeBlock, eeAddr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 8001a0a:	4b34      	ldr	r3, [pc, #208]	; (8001adc <EE_Write+0x11c>)
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	b2a3      	uxth	r3, r4
 8001a10:	3402      	adds	r4, #2
 8001a12:	00a4      	lsls	r4, r4, #2
 8001a14:	9402      	str	r4, [sp, #8]
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	9700      	str	r7, [sp, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	4642      	mov	r2, r8
 8001a1e:	f105 01a0 	add.w	r1, r5, #160	; 0xa0
 8001a22:	f005 f93d 	bl	8006ca0 <HAL_I2C_Mem_Write>
		if(i2cStatus == HAL_OK){
 8001a26:	b130      	cbz	r0, 8001a36 <EE_Write+0x76>
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001a28:	2801      	cmp	r0, #1
 8001a2a:	d03d      	beq.n	8001aa8 <EE_Write+0xe8>
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 8001a2c:	2802      	cmp	r0, #2
 8001a2e:	d03e      	beq.n	8001aae <EE_Write+0xee>
	EE_StatusTypeDef retval = EE_ERR_NULL;
 8001a30:	f06f 0a01 	mvn.w	sl, #1
 8001a34:	e02d      	b.n	8001a92 <EE_Write+0xd2>
			vTaskDelay(EE_BYTE_WRITE_TIME * (len + 2));
 8001a36:	4620      	mov	r0, r4
 8001a38:	f008 fe14 	bl	800a664 <vTaskDelay>
			retval = EE_OK;
 8001a3c:	f04f 0a00 	mov.w	sl, #0
 8001a40:	e027      	b.n	8001a92 <EE_Write+0xd2>
			if(i == pages - 1){
				bytelen = rest;
 8001a42:	4644      	mov	r4, r8
			}else{
				bytelen = 16;
			}
			i2cStatus = HAL_I2C_Mem_Write(ee_iic, EE_ADDR, addrCpy, 1, dataBuf, bytelen, EE_BYTE_WRITE_TIME * (bytelen + 2));
 8001a44:	4b25      	ldr	r3, [pc, #148]	; (8001adc <EE_Write+0x11c>)
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	1ca3      	adds	r3, r4, #2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	9401      	str	r4, [sp, #4]
 8001a50:	9700      	str	r7, [sp, #0]
 8001a52:	2301      	movs	r3, #1
 8001a54:	b2b2      	uxth	r2, r6
 8001a56:	21a0      	movs	r1, #160	; 0xa0
 8001a58:	f005 f922 	bl	8006ca0 <HAL_I2C_Mem_Write>
			if(i2cStatus == HAL_OK){
 8001a5c:	b9a8      	cbnz	r0, 8001a8a <EE_Write+0xca>
				dataBuf += bytelen;
 8001a5e:	4427      	add	r7, r4
				addrCpy += bytelen;
 8001a60:	4426      	add	r6, r4
				retval = EE_OK;
				while(HAL_I2C_IsDeviceReady(ee_iic, EE_ADDR, 10, 10) != HAL_OK);
 8001a62:	230a      	movs	r3, #10
 8001a64:	461a      	mov	r2, r3
 8001a66:	21a0      	movs	r1, #160	; 0xa0
 8001a68:	481c      	ldr	r0, [pc, #112]	; (8001adc <EE_Write+0x11c>)
 8001a6a:	6800      	ldr	r0, [r0, #0]
 8001a6c:	f005 fb34 	bl	80070d8 <HAL_I2C_IsDeviceReady>
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d1f6      	bne.n	8001a62 <EE_Write+0xa2>
		for(i = 0; i < pages; i++){
 8001a74:	3501      	adds	r5, #1
				retval = EE_OK;
 8001a76:	f04f 0a00 	mov.w	sl, #0
		for(i = 0; i < pages; i++){
 8001a7a:	454d      	cmp	r5, r9
 8001a7c:	d209      	bcs.n	8001a92 <EE_Write+0xd2>
			if(i == pages - 1){
 8001a7e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8001a82:	42ab      	cmp	r3, r5
 8001a84:	d0dd      	beq.n	8001a42 <EE_Write+0x82>
				bytelen = 16;
 8001a86:	2410      	movs	r4, #16
 8001a88:	e7dc      	b.n	8001a44 <EE_Write+0x84>
				//vTaskDelay((bytelen + 2) * EE_BYTE_WRITE_TIME);
			}else{
				if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001a8a:	2801      	cmp	r0, #1
 8001a8c:	d012      	beq.n	8001ab4 <EE_Write+0xf4>
				else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 8001a8e:	2802      	cmp	r0, #2
 8001a90:	d013      	beq.n	8001aba <EE_Write+0xfa>
				break;
			}
		}
	}
	xSemaphoreGive(I2CMutexHandle);
 8001a92:	2300      	movs	r3, #0
 8001a94:	461a      	mov	r2, r3
 8001a96:	4619      	mov	r1, r3
 8001a98:	480f      	ldr	r0, [pc, #60]	; (8001ad8 <EE_Write+0x118>)
 8001a9a:	6800      	ldr	r0, [r0, #0]
 8001a9c:	f007 ff1c 	bl	80098d8 <xQueueGenericSend>
	return retval;
}
 8001aa0:	4650      	mov	r0, sl
 8001aa2:	b004      	add	sp, #16
 8001aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001aa8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8001aac:	e7f1      	b.n	8001a92 <EE_Write+0xd2>
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 8001aae:	f06f 0a02 	mvn.w	sl, #2
 8001ab2:	e7ee      	b.n	8001a92 <EE_Write+0xd2>
				if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001ab4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8001ab8:	e7eb      	b.n	8001a92 <EE_Write+0xd2>
				else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 8001aba:	f06f 0a02 	mvn.w	sl, #2
 8001abe:	e7e8      	b.n	8001a92 <EE_Write+0xd2>
	if(data == NULL || len <= 0 || len >= EE_SIZE) return retval;
 8001ac0:	f06f 0a01 	mvn.w	sl, #1
 8001ac4:	e7ec      	b.n	8001aa0 <EE_Write+0xe0>
 8001ac6:	f06f 0a01 	mvn.w	sl, #1
 8001aca:	e7e9      	b.n	8001aa0 <EE_Write+0xe0>
 8001acc:	f06f 0a01 	mvn.w	sl, #1
 8001ad0:	e7e6      	b.n	8001aa0 <EE_Write+0xe0>
		return EE_ERR_TIMEOUT;
 8001ad2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8001ad6:	e7e3      	b.n	8001aa0 <EE_Write+0xe0>
 8001ad8:	200033c8 	.word	0x200033c8
 8001adc:	20002b74 	.word	0x20002b74

08001ae0 <EE_Erease>:

EE_StatusTypeDef EE_Erease (void){
 8001ae0:	b530      	push	{r4, r5, lr}
 8001ae2:	b085      	sub	sp, #20
	uint32_t i;
	int32_t retval = 0;
	uint8_t blankData[16];
	memset(blankData, 255, 16);
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	9302      	str	r3, [sp, #8]
 8001aee:	9303      	str	r3, [sp, #12]
	int32_t retval = 0;
 8001af0:	2500      	movs	r5, #0

	for(i = 0; i < EE_SIZE; i += 16){
 8001af2:	462c      	mov	r4, r5
 8001af4:	e006      	b.n	8001b04 <EE_Erease+0x24>
		retval |= EE_Write(blankData, i, 16);
 8001af6:	2210      	movs	r2, #16
 8001af8:	4621      	mov	r1, r4
 8001afa:	4668      	mov	r0, sp
 8001afc:	f7ff ff60 	bl	80019c0 <EE_Write>
 8001b00:	4305      	orrs	r5, r0
	for(i = 0; i < EE_SIZE; i += 16){
 8001b02:	3410      	adds	r4, #16
 8001b04:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001b08:	d3f5      	bcc.n	8001af6 <EE_Erease+0x16>
	}
	return retval;
}
 8001b0a:	b268      	sxtb	r0, r5
 8001b0c:	b005      	add	sp, #20
 8001b0e:	bd30      	pop	{r4, r5, pc}

08001b10 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001b10:	b530      	push	{r4, r5, lr}
 8001b12:	b083      	sub	sp, #12
 8001b14:	4605      	mov	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001b16:	4c16      	ldr	r4, [pc, #88]	; (8001b70 <WIZCHIP_READ+0x60>)
 8001b18:	68e3      	ldr	r3, [r4, #12]
 8001b1a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001b1c:	6963      	ldr	r3, [r4, #20]
 8001b1e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b22:	b9b3      	cbnz	r3, 8001b52 <WIZCHIP_READ+0x42>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001b24:	4c12      	ldr	r4, [pc, #72]	; (8001b70 <WIZCHIP_READ+0x60>)
 8001b26:	6a23      	ldr	r3, [r4, #32]
 8001b28:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8001b2c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001b2e:	6a23      	ldr	r3, [r4, #32]
 8001b30:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8001b34:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001b36:	6a23      	ldr	r3, [r4, #32]
 8001b38:	b2e8      	uxtb	r0, r5
 8001b3a:	4798      	blx	r3
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001b3c:	4c0c      	ldr	r4, [pc, #48]	; (8001b70 <WIZCHIP_READ+0x60>)
 8001b3e:	69e3      	ldr	r3, [r4, #28]
 8001b40:	4798      	blx	r3
 8001b42:	4605      	mov	r5, r0

   WIZCHIP.CS._deselect();
 8001b44:	69a3      	ldr	r3, [r4, #24]
 8001b46:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001b48:	6923      	ldr	r3, [r4, #16]
 8001b4a:	4798      	blx	r3
   return ret;
}
 8001b4c:	4628      	mov	r0, r5
 8001b4e:	b003      	add	sp, #12
 8001b50:	bd30      	pop	{r4, r5, pc}
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001b52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0e5      	beq.n	8001b24 <WIZCHIP_READ+0x14>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001b58:	0c2a      	lsrs	r2, r5, #16
 8001b5a:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001b5e:	0a2a      	lsrs	r2, r5, #8
 8001b60:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001b64:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001b68:	2103      	movs	r1, #3
 8001b6a:	a801      	add	r0, sp, #4
 8001b6c:	4798      	blx	r3
 8001b6e:	e7e5      	b.n	8001b3c <WIZCHIP_READ+0x2c>
 8001b70:	20000004 	.word	0x20000004

08001b74 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	4604      	mov	r4, r0
 8001b7a:	460e      	mov	r6, r1
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001b7c:	4d16      	ldr	r5, [pc, #88]	; (8001bd8 <WIZCHIP_WRITE+0x64>)
 8001b7e:	68eb      	ldr	r3, [r5, #12]
 8001b80:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001b82:	696b      	ldr	r3, [r5, #20]
 8001b84:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001b86:	f044 0404 	orr.w	r4, r4, #4

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001b8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001b8c:	b1a3      	cbz	r3, 8001bb8 <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001b8e:	0c22      	lsrs	r2, r4, #16
 8001b90:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001b94:	0a22      	lsrs	r2, r4, #8
 8001b96:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001b9a:	f88d 4006 	strb.w	r4, [sp, #6]
		spi_data[3] = wb;
 8001b9e:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001ba2:	2104      	movs	r1, #4
 8001ba4:	eb0d 0001 	add.w	r0, sp, r1
 8001ba8:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001baa:	4c0b      	ldr	r4, [pc, #44]	; (8001bd8 <WIZCHIP_WRITE+0x64>)
 8001bac:	69a3      	ldr	r3, [r4, #24]
 8001bae:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001bb0:	6923      	ldr	r3, [r4, #16]
 8001bb2:	4798      	blx	r3
}
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001bb8:	6a2b      	ldr	r3, [r5, #32]
 8001bba:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001bbe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001bc0:	6a2b      	ldr	r3, [r5, #32]
 8001bc2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001bc6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001bc8:	6a2b      	ldr	r3, [r5, #32]
 8001bca:	b2e0      	uxtb	r0, r4
 8001bcc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001bce:	6a2b      	ldr	r3, [r5, #32]
 8001bd0:	4630      	mov	r0, r6
 8001bd2:	4798      	blx	r3
 8001bd4:	e7e9      	b.n	8001baa <WIZCHIP_WRITE+0x36>
 8001bd6:	bf00      	nop
 8001bd8:	20000004 	.word	0x20000004

08001bdc <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bde:	b083      	sub	sp, #12
 8001be0:	4604      	mov	r4, r0
 8001be2:	460e      	mov	r6, r1
 8001be4:	4615      	mov	r5, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001be6:	4f1c      	ldr	r7, [pc, #112]	; (8001c58 <WIZCHIP_READ_BUF+0x7c>)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	b96b      	cbnz	r3, 8001c10 <WIZCHIP_READ_BUF+0x34>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001bf4:	4f18      	ldr	r7, [pc, #96]	; (8001c58 <WIZCHIP_READ_BUF+0x7c>)
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001bfc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001c04:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	b2e0      	uxtb	r0, r4
 8001c0a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001c0c:	2400      	movs	r4, #0
 8001c0e:	e019      	b.n	8001c44 <WIZCHIP_READ_BUF+0x68>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0ee      	beq.n	8001bf4 <WIZCHIP_READ_BUF+0x18>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001c16:	0c22      	lsrs	r2, r4, #16
 8001c18:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001c1c:	0a22      	lsrs	r2, r4, #8
 8001c1e:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001c22:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001c26:	2103      	movs	r1, #3
 8001c28:	a801      	add	r0, sp, #4
 8001c2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <WIZCHIP_READ_BUF+0x7c>)
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	4629      	mov	r1, r5
 8001c32:	4630      	mov	r0, r6
 8001c34:	4798      	blx	r3
 8001c36:	e007      	b.n	8001c48 <WIZCHIP_READ_BUF+0x6c>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <WIZCHIP_READ_BUF+0x7c>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	4798      	blx	r3
 8001c3e:	5530      	strb	r0, [r6, r4]
		for(i = 0; i < len; i++)
 8001c40:	3401      	adds	r4, #1
 8001c42:	b2a4      	uxth	r4, r4
 8001c44:	42ac      	cmp	r4, r5
 8001c46:	d3f7      	bcc.n	8001c38 <WIZCHIP_READ_BUF+0x5c>
   }

   WIZCHIP.CS._deselect();
 8001c48:	4c03      	ldr	r4, [pc, #12]	; (8001c58 <WIZCHIP_READ_BUF+0x7c>)
 8001c4a:	69a3      	ldr	r3, [r4, #24]
 8001c4c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001c4e:	6923      	ldr	r3, [r4, #16]
 8001c50:	4798      	blx	r3
}
 8001c52:	b003      	add	sp, #12
 8001c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000004 	.word	0x20000004

08001c5c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	4604      	mov	r4, r0
 8001c62:	460f      	mov	r7, r1
 8001c64:	4616      	mov	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001c66:	4d1b      	ldr	r5, [pc, #108]	; (8001cd4 <WIZCHIP_WRITE_BUF+0x78>)
 8001c68:	68eb      	ldr	r3, [r5, #12]
 8001c6a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001c6c:	696b      	ldr	r3, [r5, #20]
 8001c6e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001c70:	f044 0404 	orr.w	r4, r4, #4

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001c74:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001c76:	b1b3      	cbz	r3, 8001ca6 <WIZCHIP_WRITE_BUF+0x4a>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001c78:	0c22      	lsrs	r2, r4, #16
 8001c7a:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001c7e:	0a22      	lsrs	r2, r4, #8
 8001c80:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001c84:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001c88:	2103      	movs	r1, #3
 8001c8a:	a801      	add	r0, sp, #4
 8001c8c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <WIZCHIP_WRITE_BUF+0x78>)
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	4631      	mov	r1, r6
 8001c94:	4638      	mov	r0, r7
 8001c96:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001c98:	4c0e      	ldr	r4, [pc, #56]	; (8001cd4 <WIZCHIP_WRITE_BUF+0x78>)
 8001c9a:	69a3      	ldr	r3, [r4, #24]
 8001c9c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001c9e:	6923      	ldr	r3, [r4, #16]
 8001ca0:	4798      	blx	r3
}
 8001ca2:	b003      	add	sp, #12
 8001ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001ca6:	6a2b      	ldr	r3, [r5, #32]
 8001ca8:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001cac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001cae:	6a2b      	ldr	r3, [r5, #32]
 8001cb0:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001cb4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001cb6:	6a2b      	ldr	r3, [r5, #32]
 8001cb8:	b2e0      	uxtb	r0, r4
 8001cba:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001cbc:	2400      	movs	r4, #0
 8001cbe:	e005      	b.n	8001ccc <WIZCHIP_WRITE_BUF+0x70>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <WIZCHIP_WRITE_BUF+0x78>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	5d38      	ldrb	r0, [r7, r4]
 8001cc6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001cc8:	3401      	adds	r4, #1
 8001cca:	b2a4      	uxth	r4, r4
 8001ccc:	42b4      	cmp	r4, r6
 8001cce:	d3f7      	bcc.n	8001cc0 <WIZCHIP_WRITE_BUF+0x64>
 8001cd0:	e7e2      	b.n	8001c98 <WIZCHIP_WRITE_BUF+0x3c>
 8001cd2:	bf00      	nop
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cdc:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 8001cde:	2500      	movs	r5, #0
 8001ce0:	e001      	b.n	8001ce6 <getSn_TX_FSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
 8001ce2:	42a5      	cmp	r5, r4
 8001ce4:	d024      	beq.n	8001d30 <getSn_TX_FSR+0x58>
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001ce6:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8001cea:	f108 0801 	add.w	r8, r8, #1
 8001cee:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001cf2:	f508 5600 	add.w	r6, r8, #8192	; 0x2000
 8001cf6:	4630      	mov	r0, r6
 8001cf8:	f7ff ff0a 	bl	8001b10 <WIZCHIP_READ>
 8001cfc:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001cfe:	0224      	lsls	r4, r4, #8
 8001d00:	b2a4      	uxth	r4, r4
 8001d02:	f508 5804 	add.w	r8, r8, #8448	; 0x2100
 8001d06:	4640      	mov	r0, r8
 8001d08:	f7ff ff02 	bl	8001b10 <WIZCHIP_READ>
 8001d0c:	fa14 f480 	uxtah	r4, r4, r0
 8001d10:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 8001d12:	2c00      	cmp	r4, #0
 8001d14:	d0e5      	beq.n	8001ce2 <getSn_TX_FSR+0xa>
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001d16:	4630      	mov	r0, r6
 8001d18:	f7ff fefa 	bl	8001b10 <WIZCHIP_READ>
 8001d1c:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001d1e:	022d      	lsls	r5, r5, #8
 8001d20:	b2ad      	uxth	r5, r5
 8001d22:	4640      	mov	r0, r8
 8001d24:	f7ff fef4 	bl	8001b10 <WIZCHIP_READ>
 8001d28:	fa15 f580 	uxtah	r5, r5, r0
 8001d2c:	b2ad      	uxth	r5, r5
 8001d2e:	e7d8      	b.n	8001ce2 <getSn_TX_FSR+0xa>
   return val;
}
 8001d30:	4628      	mov	r0, r5
 8001d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001d36 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d3a:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 8001d3c:	2500      	movs	r5, #0
 8001d3e:	e001      	b.n	8001d44 <getSn_RX_RSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
 8001d40:	42a5      	cmp	r5, r4
 8001d42:	d024      	beq.n	8001d8e <getSn_RX_RSR+0x58>
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001d44:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8001d48:	f108 0801 	add.w	r8, r8, #1
 8001d4c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001d50:	f508 5618 	add.w	r6, r8, #9728	; 0x2600
 8001d54:	4630      	mov	r0, r6
 8001d56:	f7ff fedb 	bl	8001b10 <WIZCHIP_READ>
 8001d5a:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001d5c:	0224      	lsls	r4, r4, #8
 8001d5e:	b2a4      	uxth	r4, r4
 8001d60:	f508 581c 	add.w	r8, r8, #9984	; 0x2700
 8001d64:	4640      	mov	r0, r8
 8001d66:	f7ff fed3 	bl	8001b10 <WIZCHIP_READ>
 8001d6a:	fa14 f480 	uxtah	r4, r4, r0
 8001d6e:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 8001d70:	2c00      	cmp	r4, #0
 8001d72:	d0e5      	beq.n	8001d40 <getSn_RX_RSR+0xa>
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001d74:	4630      	mov	r0, r6
 8001d76:	f7ff fecb 	bl	8001b10 <WIZCHIP_READ>
 8001d7a:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001d7c:	022d      	lsls	r5, r5, #8
 8001d7e:	b2ad      	uxth	r5, r5
 8001d80:	4640      	mov	r0, r8
 8001d82:	f7ff fec5 	bl	8001b10 <WIZCHIP_READ>
 8001d86:	fa15 f580 	uxtah	r5, r5, r0
 8001d8a:	b2ad      	uxth	r5, r5
 8001d8c:	e7d8      	b.n	8001d40 <getSn_RX_RSR+0xa>
   return val;
}
 8001d8e:	4628      	mov	r0, r5
 8001d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001d94 <wiz_send_data>:
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 8001d94:	b902      	cbnz	r2, 8001d98 <wiz_send_data+0x4>
 8001d96:	4770      	bx	lr
{
 8001d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d9c:	4615      	mov	r5, r2
 8001d9e:	460f      	mov	r7, r1
   ptr = getSn_TX_WR(sn);
 8001da0:	0084      	lsls	r4, r0, #2
 8001da2:	f104 0901 	add.w	r9, r4, #1
 8001da6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001daa:	f509 5810 	add.w	r8, r9, #9216	; 0x2400
 8001dae:	4640      	mov	r0, r8
 8001db0:	f7ff feae 	bl	8001b10 <WIZCHIP_READ>
 8001db4:	b286      	uxth	r6, r0
 8001db6:	0236      	lsls	r6, r6, #8
 8001db8:	b2b6      	uxth	r6, r6
 8001dba:	f509 5914 	add.w	r9, r9, #9472	; 0x2500
 8001dbe:	4648      	mov	r0, r9
 8001dc0:	f7ff fea6 	bl	8001b10 <WIZCHIP_READ>
 8001dc4:	fa16 f680 	uxtah	r6, r6, r0
 8001dc8:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001dca:	1ca0      	adds	r0, r4, #2
 8001dcc:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001dce:	462a      	mov	r2, r5
 8001dd0:	4639      	mov	r1, r7
 8001dd2:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8001dd6:	f7ff ff41 	bl	8001c5c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001dda:	4435      	add	r5, r6
 8001ddc:	b2ad      	uxth	r5, r5
   setSn_TX_WR(sn,ptr);
 8001dde:	0a29      	lsrs	r1, r5, #8
 8001de0:	4640      	mov	r0, r8
 8001de2:	f7ff fec7 	bl	8001b74 <WIZCHIP_WRITE>
 8001de6:	b2e9      	uxtb	r1, r5
 8001de8:	4648      	mov	r0, r9
 8001dea:	f7ff fec3 	bl	8001b74 <WIZCHIP_WRITE>
}
 8001dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001df2 <wiz_recv_data>:
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 8001df2:	b902      	cbnz	r2, 8001df6 <wiz_recv_data+0x4>
 8001df4:	4770      	bx	lr
{
 8001df6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dfa:	4615      	mov	r5, r2
 8001dfc:	460f      	mov	r7, r1
   ptr = getSn_RX_RD(sn);
 8001dfe:	0084      	lsls	r4, r0, #2
 8001e00:	f104 0901 	add.w	r9, r4, #1
 8001e04:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001e08:	f509 5820 	add.w	r8, r9, #10240	; 0x2800
 8001e0c:	4640      	mov	r0, r8
 8001e0e:	f7ff fe7f 	bl	8001b10 <WIZCHIP_READ>
 8001e12:	b286      	uxth	r6, r0
 8001e14:	0236      	lsls	r6, r6, #8
 8001e16:	b2b6      	uxth	r6, r6
 8001e18:	f509 5924 	add.w	r9, r9, #10496	; 0x2900
 8001e1c:	4648      	mov	r0, r9
 8001e1e:	f7ff fe77 	bl	8001b10 <WIZCHIP_READ>
 8001e22:	fa16 f680 	uxtah	r6, r6, r0
 8001e26:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8001e28:	1ce0      	adds	r0, r4, #3
 8001e2a:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001e2c:	462a      	mov	r2, r5
 8001e2e:	4639      	mov	r1, r7
 8001e30:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8001e34:	f7ff fed2 	bl	8001bdc <WIZCHIP_READ_BUF>
   ptr += len;
 8001e38:	4435      	add	r5, r6
 8001e3a:	b2ad      	uxth	r5, r5
   
   setSn_RX_RD(sn,ptr);
 8001e3c:	0a29      	lsrs	r1, r5, #8
 8001e3e:	4640      	mov	r0, r8
 8001e40:	f7ff fe98 	bl	8001b74 <WIZCHIP_WRITE>
 8001e44:	b2e9      	uxtb	r1, r5
 8001e46:	4648      	mov	r0, r9
 8001e48:	f7ff fe94 	bl	8001b74 <WIZCHIP_WRITE>
}
 8001e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001e50 <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 8001e50:	2808      	cmp	r0, #8
 8001e52:	d82e      	bhi.n	8001eb2 <close+0x62>
{
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4606      	mov	r6, r0
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001e58:	0084      	lsls	r4, r0, #2
 8001e5a:	3401      	adds	r4, #1
 8001e5c:	00e4      	lsls	r4, r4, #3
 8001e5e:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8001e62:	2110      	movs	r1, #16
 8001e64:	4628      	mov	r0, r5
 8001e66:	f7ff fe85 	bl	8001b74 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001e6a:	4628      	mov	r0, r5
 8001e6c:	f7ff fe50 	bl	8001b10 <WIZCHIP_READ>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	d1fa      	bne.n	8001e6a <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001e74:	211f      	movs	r1, #31
 8001e76:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8001e7a:	f7ff fe7b 	bl	8001b74 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001e7e:	2301      	movs	r3, #1
 8001e80:	40b3      	lsls	r3, r6
 8001e82:	43db      	mvns	r3, r3
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	490c      	ldr	r1, [pc, #48]	; (8001eb8 <close+0x68>)
 8001e88:	880a      	ldrh	r2, [r1, #0]
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001e8e:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <close+0x6c>)
 8001e90:	8811      	ldrh	r1, [r2, #0]
 8001e92:	400b      	ands	r3, r1
 8001e94:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <close+0x70>)
 8001e9a:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
	sock_pack_info[sn] = 0;
 8001e9e:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <close+0x74>)
 8001ea0:	5593      	strb	r3, [r2, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001ea2:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8001ea6:	f7ff fe33 	bl	8001b10 <WIZCHIP_READ>
 8001eaa:	2800      	cmp	r0, #0
 8001eac:	d1f9      	bne.n	8001ea2 <close+0x52>
	return SOCK_OK;
 8001eae:	2001      	movs	r0, #1
}
 8001eb0:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 8001eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001eb6:	4770      	bx	lr
 8001eb8:	2000016c 	.word	0x2000016c
 8001ebc:	2000016e 	.word	0x2000016e
 8001ec0:	20000178 	.word	0x20000178
 8001ec4:	20000170 	.word	0x20000170

08001ec8 <socket>:
	CHECK_SOCKNUM();
 8001ec8:	2808      	cmp	r0, #8
 8001eca:	f200 8093 	bhi.w	8001ff4 <socket+0x12c>
{
 8001ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	4605      	mov	r5, r0
 8001ed6:	460f      	mov	r7, r1
 8001ed8:	4690      	mov	r8, r2
 8001eda:	461e      	mov	r6, r3
	switch(protocol)
 8001edc:	2901      	cmp	r1, #1
 8001ede:	d062      	beq.n	8001fa6 <socket+0xde>
 8001ee0:	2900      	cmp	r1, #0
 8001ee2:	f000 808a 	beq.w	8001ffa <socket+0x132>
 8001ee6:	2904      	cmp	r1, #4
 8001ee8:	f200 8087 	bhi.w	8001ffa <socket+0x132>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001eec:	f016 0f04 	tst.w	r6, #4
 8001ef0:	f040 8086 	bne.w	8002000 <socket+0x138>
	if(flag != 0)
 8001ef4:	b11e      	cbz	r6, 8001efe <socket+0x36>
   	switch(protocol)
 8001ef6:	2f01      	cmp	r7, #1
 8001ef8:	d062      	beq.n	8001fc0 <socket+0xf8>
 8001efa:	2f02      	cmp	r7, #2
 8001efc:	d066      	beq.n	8001fcc <socket+0x104>
	close(sn);
 8001efe:	4628      	mov	r0, r5
 8001f00:	f7ff ffa6 	bl	8001e50 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001f04:	00ac      	lsls	r4, r5, #2
 8001f06:	3401      	adds	r4, #1
 8001f08:	00e4      	lsls	r4, r4, #3
 8001f0a:	f026 010f 	bic.w	r1, r6, #15
 8001f0e:	b249      	sxtb	r1, r1
 8001f10:	4339      	orrs	r1, r7
 8001f12:	b2c9      	uxtb	r1, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	f7ff fe2d 	bl	8001b74 <WIZCHIP_WRITE>
	if(!port)
 8001f1a:	f1b8 0f00 	cmp.w	r8, #0
 8001f1e:	d10a      	bne.n	8001f36 <socket+0x6e>
	   port = sock_any_port++;
 8001f20:	4a3a      	ldr	r2, [pc, #232]	; (800200c <socket+0x144>)
 8001f22:	f8b2 8000 	ldrh.w	r8, [r2]
 8001f26:	f108 0301 	add.w	r3, r8, #1
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001f2e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d059      	beq.n	8001fea <socket+0x122>
   setSn_PORT(sn,port);	
 8001f36:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8001f3a:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8001f3e:	f7ff fe19 	bl	8001b74 <WIZCHIP_WRITE>
 8001f42:	fa5f f188 	uxtb.w	r1, r8
 8001f46:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 8001f4a:	f7ff fe13 	bl	8001b74 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001f4e:	f504 7780 	add.w	r7, r4, #256	; 0x100
 8001f52:	2101      	movs	r1, #1
 8001f54:	4638      	mov	r0, r7
 8001f56:	f7ff fe0d 	bl	8001b74 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001f5a:	4638      	mov	r0, r7
 8001f5c:	f7ff fdd8 	bl	8001b10 <WIZCHIP_READ>
 8001f60:	2800      	cmp	r0, #0
 8001f62:	d1fa      	bne.n	8001f5a <socket+0x92>
   sock_io_mode &= ~(1 <<sn);
 8001f64:	2201      	movs	r2, #1
 8001f66:	40aa      	lsls	r2, r5
 8001f68:	43d2      	mvns	r2, r2
 8001f6a:	b212      	sxth	r2, r2
 8001f6c:	4928      	ldr	r1, [pc, #160]	; (8002010 <socket+0x148>)
 8001f6e:	880b      	ldrh	r3, [r1, #0]
 8001f70:	4013      	ands	r3, r2
 8001f72:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001f74:	f006 0601 	and.w	r6, r6, #1
 8001f78:	40ae      	lsls	r6, r5
 8001f7a:	431e      	orrs	r6, r3
 8001f7c:	800e      	strh	r6, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8001f7e:	4b25      	ldr	r3, [pc, #148]	; (8002014 <socket+0x14c>)
 8001f80:	8819      	ldrh	r1, [r3, #0]
 8001f82:	400a      	ands	r2, r1
 8001f84:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	4a23      	ldr	r2, [pc, #140]	; (8002018 <socket+0x150>)
 8001f8a:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 8001f8e:	4a23      	ldr	r2, [pc, #140]	; (800201c <socket+0x154>)
 8001f90:	5553      	strb	r3, [r2, r5]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001f92:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8001f96:	f7ff fdbb 	bl	8001b10 <WIZCHIP_READ>
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	d0f9      	beq.n	8001f92 <socket+0xca>
   return (int8_t)sn;
 8001f9e:	b268      	sxtb	r0, r5
}	   
 8001fa0:	b002      	add	sp, #8
 8001fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            getSIPR((uint8_t*)&taddr);
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	eb0d 0102 	add.w	r1, sp, r2
 8001fac:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001fb0:	f7ff fe14 	bl	8001bdc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001fb4:	9b01      	ldr	r3, [sp, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d198      	bne.n	8001eec <socket+0x24>
 8001fba:	f06f 0002 	mvn.w	r0, #2
 8001fbe:	e7ef      	b.n	8001fa0 <socket+0xd8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001fc0:	f016 0f21 	tst.w	r6, #33	; 0x21
 8001fc4:	d19b      	bne.n	8001efe <socket+0x36>
 8001fc6:	f06f 0005 	mvn.w	r0, #5
 8001fca:	e7e9      	b.n	8001fa0 <socket+0xd8>
   	      if(flag & SF_IGMP_VER2)
 8001fcc:	f016 0f20 	tst.w	r6, #32
 8001fd0:	d002      	beq.n	8001fd8 <socket+0x110>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001fd2:	f016 0f80 	tst.w	r6, #128	; 0x80
 8001fd6:	d016      	beq.n	8002006 <socket+0x13e>
      	      if(flag & SF_UNI_BLOCK)
 8001fd8:	f016 0f10 	tst.w	r6, #16
 8001fdc:	d08f      	beq.n	8001efe <socket+0x36>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001fde:	f016 0f80 	tst.w	r6, #128	; 0x80
 8001fe2:	d18c      	bne.n	8001efe <socket+0x36>
 8001fe4:	f06f 0005 	mvn.w	r0, #5
 8001fe8:	e7da      	b.n	8001fa0 <socket+0xd8>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <socket+0x144>)
 8001fec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001ff0:	801a      	strh	r2, [r3, #0]
 8001ff2:	e7a0      	b.n	8001f36 <socket+0x6e>
	CHECK_SOCKNUM();
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}	   
 8001ff8:	4770      	bx	lr
         return SOCKERR_SOCKMODE;
 8001ffa:	f06f 0004 	mvn.w	r0, #4
 8001ffe:	e7cf      	b.n	8001fa0 <socket+0xd8>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002000:	f06f 0005 	mvn.w	r0, #5
 8002004:	e7cc      	b.n	8001fa0 <socket+0xd8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002006:	f06f 0005 	mvn.w	r0, #5
 800200a:	e7c9      	b.n	8001fa0 <socket+0xd8>
 800200c:	20000000 	.word	0x20000000
 8002010:	2000016c 	.word	0x2000016c
 8002014:	2000016e 	.word	0x2000016e
 8002018:	20000178 	.word	0x20000178
 800201c:	20000170 	.word	0x20000170

08002020 <listen>:

int8_t listen(uint8_t sn)
{
	CHECK_SOCKNUM();
 8002020:	2808      	cmp	r0, #8
 8002022:	d82a      	bhi.n	800207a <listen+0x5a>
{
 8002024:	b570      	push	{r4, r5, r6, lr}
 8002026:	4605      	mov	r5, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002028:	0084      	lsls	r4, r0, #2
 800202a:	3401      	adds	r4, #1
 800202c:	00e4      	lsls	r4, r4, #3
 800202e:	4620      	mov	r0, r4
 8002030:	f7ff fd6e 	bl	8001b10 <WIZCHIP_READ>
 8002034:	f000 000f 	and.w	r0, r0, #15
 8002038:	2801      	cmp	r0, #1
 800203a:	d121      	bne.n	8002080 <listen+0x60>
	CHECK_SOCKINIT();
 800203c:	f504 7640 	add.w	r6, r4, #768	; 0x300
 8002040:	4630      	mov	r0, r6
 8002042:	f7ff fd65 	bl	8001b10 <WIZCHIP_READ>
 8002046:	2813      	cmp	r0, #19
 8002048:	d11d      	bne.n	8002086 <listen+0x66>
	setSn_CR(sn,Sn_CR_LISTEN);
 800204a:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800204e:	2102      	movs	r1, #2
 8002050:	4620      	mov	r0, r4
 8002052:	f7ff fd8f 	bl	8001b74 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8002056:	4620      	mov	r0, r4
 8002058:	f7ff fd5a 	bl	8001b10 <WIZCHIP_READ>
 800205c:	2800      	cmp	r0, #0
 800205e:	d1fa      	bne.n	8002056 <listen+0x36>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002060:	4630      	mov	r0, r6
 8002062:	f7ff fd55 	bl	8001b10 <WIZCHIP_READ>
 8002066:	2814      	cmp	r0, #20
 8002068:	d101      	bne.n	800206e <listen+0x4e>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 800206a:	2001      	movs	r0, #1
}
 800206c:	bd70      	pop	{r4, r5, r6, pc}
         close(sn);
 800206e:	4628      	mov	r0, r5
 8002070:	f7ff feee 	bl	8001e50 <close>
         return SOCKERR_SOCKCLOSED;
 8002074:	f06f 0003 	mvn.w	r0, #3
 8002078:	e7f8      	b.n	800206c <listen+0x4c>
	CHECK_SOCKNUM();
 800207a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800207e:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002080:	f06f 0004 	mvn.w	r0, #4
 8002084:	e7f2      	b.n	800206c <listen+0x4c>
	CHECK_SOCKINIT();
 8002086:	f06f 0002 	mvn.w	r0, #2
 800208a:	e7ef      	b.n	800206c <listen+0x4c>

0800208c <disconnect>:
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
 800208c:	2808      	cmp	r0, #8
 800208e:	d838      	bhi.n	8002102 <disconnect+0x76>
{
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002094:	0084      	lsls	r4, r0, #2
 8002096:	3401      	adds	r4, #1
 8002098:	00e4      	lsls	r4, r4, #3
 800209a:	4620      	mov	r0, r4
 800209c:	f7ff fd38 	bl	8001b10 <WIZCHIP_READ>
 80020a0:	f000 000f 	and.w	r0, r0, #15
 80020a4:	2801      	cmp	r0, #1
 80020a6:	d12f      	bne.n	8002108 <disconnect+0x7c>
	setSn_CR(sn,Sn_CR_DISCON);
 80020a8:	f504 7580 	add.w	r5, r4, #256	; 0x100
 80020ac:	2108      	movs	r1, #8
 80020ae:	4628      	mov	r0, r5
 80020b0:	f7ff fd60 	bl	8001b74 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80020b4:	4628      	mov	r0, r5
 80020b6:	f7ff fd2b 	bl	8001b10 <WIZCHIP_READ>
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d1fa      	bne.n	80020b4 <disconnect+0x28>
	sock_is_sending &= ~(1<<sn);
 80020be:	2301      	movs	r3, #1
 80020c0:	fa03 f206 	lsl.w	r2, r3, r6
 80020c4:	4913      	ldr	r1, [pc, #76]	; (8002114 <disconnect+0x88>)
 80020c6:	880b      	ldrh	r3, [r1, #0]
 80020c8:	ea23 0302 	bic.w	r3, r3, r2
 80020cc:	800b      	strh	r3, [r1, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <disconnect+0x8c>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	4133      	asrs	r3, r6
 80020d4:	f013 0f01 	tst.w	r3, #1
 80020d8:	d119      	bne.n	800210e <disconnect+0x82>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80020da:	f504 7040 	add.w	r0, r4, #768	; 0x300
 80020de:	f7ff fd17 	bl	8001b10 <WIZCHIP_READ>
 80020e2:	b160      	cbz	r0, 80020fe <disconnect+0x72>
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80020e4:	f504 7000 	add.w	r0, r4, #512	; 0x200
 80020e8:	f7ff fd12 	bl	8001b10 <WIZCHIP_READ>
 80020ec:	f010 0f08 	tst.w	r0, #8
 80020f0:	d0f3      	beq.n	80020da <disconnect+0x4e>
	   {
	      close(sn);
 80020f2:	4630      	mov	r0, r6
 80020f4:	f7ff feac 	bl	8001e50 <close>
	      return SOCKERR_TIMEOUT;
 80020f8:	f06f 000c 	mvn.w	r0, #12
 80020fc:	e008      	b.n	8002110 <disconnect+0x84>
	   }
	}
	return SOCK_OK;
 80020fe:	2001      	movs	r0, #1
 8002100:	e006      	b.n	8002110 <disconnect+0x84>
   CHECK_SOCKNUM();
 8002102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002106:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002108:	f06f 0004 	mvn.w	r0, #4
 800210c:	e000      	b.n	8002110 <disconnect+0x84>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800210e:	2000      	movs	r0, #0
}
 8002110:	bd70      	pop	{r4, r5, r6, pc}
 8002112:	bf00      	nop
 8002114:	2000016e 	.word	0x2000016e
 8002118:	2000016c 	.word	0x2000016c

0800211c <send>:
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
 800211c:	2808      	cmp	r0, #8
 800211e:	f200 8083 	bhi.w	8002228 <send+0x10c>
{
 8002122:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002126:	4615      	mov	r5, r2
 8002128:	468a      	mov	sl, r1
 800212a:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 800212c:	4681      	mov	r9, r0
 800212e:	0087      	lsls	r7, r0, #2
 8002130:	3701      	adds	r7, #1
 8002132:	00ff      	lsls	r7, r7, #3
 8002134:	4638      	mov	r0, r7
 8002136:	f7ff fceb 	bl	8001b10 <WIZCHIP_READ>
 800213a:	f000 000f 	and.w	r0, r0, #15
 800213e:	2801      	cmp	r0, #1
 8002140:	d175      	bne.n	800222e <send+0x112>
   CHECK_SOCKDATA();
 8002142:	2d00      	cmp	r5, #0
 8002144:	d076      	beq.n	8002234 <send+0x118>
   tmp = getSn_SR(sn);
 8002146:	f507 7840 	add.w	r8, r7, #768	; 0x300
 800214a:	4640      	mov	r0, r8
 800214c:	f7ff fce0 	bl	8001b10 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002150:	2817      	cmp	r0, #23
 8002152:	d001      	beq.n	8002158 <send+0x3c>
 8002154:	281c      	cmp	r0, #28
 8002156:	d170      	bne.n	800223a <send+0x11e>
   if( sock_is_sending & (1<<sn) )
 8002158:	4b39      	ldr	r3, [pc, #228]	; (8002240 <send+0x124>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	4133      	asrs	r3, r6
 800215e:	f013 0f01 	tst.w	r3, #1
 8002162:	d019      	beq.n	8002198 <send+0x7c>
   {
      tmp = getSn_IR(sn);
 8002164:	f507 7400 	add.w	r4, r7, #512	; 0x200
 8002168:	4620      	mov	r0, r4
 800216a:	f7ff fcd1 	bl	8001b10 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 800216e:	f010 0f10 	tst.w	r0, #16
 8002172:	d105      	bne.n	8002180 <send+0x64>
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8002174:	f010 0f08 	tst.w	r0, #8
 8002178:	d119      	bne.n	80021ae <send+0x92>
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
 800217a:	2000      	movs	r0, #0
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 800217c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
 8002180:	2110      	movs	r1, #16
 8002182:	4620      	mov	r0, r4
 8002184:	f7ff fcf6 	bl	8001b74 <WIZCHIP_WRITE>
         sock_is_sending &= ~(1<<sn);         
 8002188:	2301      	movs	r3, #1
 800218a:	fa03 f206 	lsl.w	r2, r3, r6
 800218e:	492c      	ldr	r1, [pc, #176]	; (8002240 <send+0x124>)
 8002190:	880b      	ldrh	r3, [r1, #0]
 8002192:	ea23 0302 	bic.w	r3, r3, r2
 8002196:	800b      	strh	r3, [r1, #0]
   freesize = getSn_TxMAX(sn);
 8002198:	f507 50f8 	add.w	r0, r7, #7936	; 0x1f00
 800219c:	f7ff fcb8 	bl	8001b10 <WIZCHIP_READ>
 80021a0:	b284      	uxth	r4, r0
 80021a2:	02a4      	lsls	r4, r4, #10
 80021a4:	b2a4      	uxth	r4, r4
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80021a6:	42a5      	cmp	r5, r4
 80021a8:	d80f      	bhi.n	80021ca <send+0xae>
 80021aa:	462c      	mov	r4, r5
 80021ac:	e00d      	b.n	80021ca <send+0xae>
         close(sn);
 80021ae:	4630      	mov	r0, r6
 80021b0:	f7ff fe4e 	bl	8001e50 <close>
         return SOCKERR_TIMEOUT;
 80021b4:	f06f 000c 	mvn.w	r0, #12
 80021b8:	e7e0      	b.n	800217c <send+0x60>
         close(sn);
 80021ba:	4630      	mov	r0, r6
 80021bc:	f7ff fe48 	bl	8001e50 <close>
         return SOCKERR_SOCKSTATUS;
 80021c0:	f06f 0006 	mvn.w	r0, #6
 80021c4:	e7da      	b.n	800217c <send+0x60>
      if(len <= freesize) break;
 80021c6:	42a5      	cmp	r5, r4
 80021c8:	d215      	bcs.n	80021f6 <send+0xda>
      freesize = getSn_TX_FSR(sn);
 80021ca:	4630      	mov	r0, r6
 80021cc:	f7ff fd84 	bl	8001cd8 <getSn_TX_FSR>
 80021d0:	4605      	mov	r5, r0
      tmp = getSn_SR(sn);
 80021d2:	4640      	mov	r0, r8
 80021d4:	f7ff fc9c 	bl	8001b10 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80021d8:	2817      	cmp	r0, #23
 80021da:	d001      	beq.n	80021e0 <send+0xc4>
 80021dc:	281c      	cmp	r0, #28
 80021de:	d1ec      	bne.n	80021ba <send+0x9e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80021e0:	4b18      	ldr	r3, [pc, #96]	; (8002244 <send+0x128>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	fa43 f309 	asr.w	r3, r3, r9
 80021e8:	f013 0f01 	tst.w	r3, #1
 80021ec:	d0eb      	beq.n	80021c6 <send+0xaa>
 80021ee:	42a5      	cmp	r5, r4
 80021f0:	d2e9      	bcs.n	80021c6 <send+0xaa>
 80021f2:	2000      	movs	r0, #0
 80021f4:	e7c2      	b.n	800217c <send+0x60>
   wiz_send_data(sn, buf, len);
 80021f6:	4622      	mov	r2, r4
 80021f8:	4651      	mov	r1, sl
 80021fa:	4630      	mov	r0, r6
 80021fc:	f7ff fdca 	bl	8001d94 <wiz_send_data>
   setSn_CR(sn,Sn_CR_SEND);
 8002200:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002204:	2120      	movs	r1, #32
 8002206:	4638      	mov	r0, r7
 8002208:	f7ff fcb4 	bl	8001b74 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800220c:	4638      	mov	r0, r7
 800220e:	f7ff fc7f 	bl	8001b10 <WIZCHIP_READ>
 8002212:	2800      	cmp	r0, #0
 8002214:	d1fa      	bne.n	800220c <send+0xf0>
   sock_is_sending |= (1 << sn);
 8002216:	2301      	movs	r3, #1
 8002218:	fa03 f606 	lsl.w	r6, r3, r6
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <send+0x124>)
 800221e:	881a      	ldrh	r2, [r3, #0]
 8002220:	4316      	orrs	r6, r2
 8002222:	801e      	strh	r6, [r3, #0]
   return (int32_t)len;
 8002224:	4620      	mov	r0, r4
 8002226:	e7a9      	b.n	800217c <send+0x60>
   CHECK_SOCKNUM();
 8002228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800222c:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 800222e:	f06f 0004 	mvn.w	r0, #4
 8002232:	e7a3      	b.n	800217c <send+0x60>
   CHECK_SOCKDATA();
 8002234:	f06f 000d 	mvn.w	r0, #13
 8002238:	e7a0      	b.n	800217c <send+0x60>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800223a:	f06f 0006 	mvn.w	r0, #6
 800223e:	e79d      	b.n	800217c <send+0x60>
 8002240:	2000016e 	.word	0x2000016e
 8002244:	2000016c 	.word	0x2000016c

08002248 <ClrSiS>:

void ClrSiS (uint8_t sn){
	sock_is_sending &= ~(1 << sn);
 8002248:	2301      	movs	r3, #1
 800224a:	fa03 f000 	lsl.w	r0, r3, r0
 800224e:	4a03      	ldr	r2, [pc, #12]	; (800225c <ClrSiS+0x14>)
 8002250:	8813      	ldrh	r3, [r2, #0]
 8002252:	ea23 0000 	bic.w	r0, r3, r0
 8002256:	8010      	strh	r0, [r2, #0]
}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	2000016e 	.word	0x2000016e

08002260 <recv>:
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8002260:	2808      	cmp	r0, #8
 8002262:	d864      	bhi.n	800232e <recv+0xce>
{
 8002264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002268:	4614      	mov	r4, r2
 800226a:	4689      	mov	r9, r1
 800226c:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 800226e:	4607      	mov	r7, r0
 8002270:	0085      	lsls	r5, r0, #2
 8002272:	3501      	adds	r5, #1
 8002274:	00ed      	lsls	r5, r5, #3
 8002276:	4628      	mov	r0, r5
 8002278:	f7ff fc4a 	bl	8001b10 <WIZCHIP_READ>
 800227c:	f000 000f 	and.w	r0, r0, #15
 8002280:	2801      	cmp	r0, #1
 8002282:	d157      	bne.n	8002334 <recv+0xd4>
   CHECK_SOCKDATA();
 8002284:	2c00      	cmp	r4, #0
 8002286:	d058      	beq.n	800233a <recv+0xda>
   
   recvsize = getSn_RxMAX(sn);
 8002288:	f505 50f0 	add.w	r0, r5, #7680	; 0x1e00
 800228c:	f7ff fc40 	bl	8001b10 <WIZCHIP_READ>
 8002290:	fa1f f880 	uxth.w	r8, r0
 8002294:	ea4f 2888 	mov.w	r8, r8, lsl #10
 8002298:	fa1f f888 	uxth.w	r8, r8
   if(recvsize < len) len = recvsize;
 800229c:	4544      	cmp	r4, r8
 800229e:	d80e      	bhi.n	80022be <recv+0x5e>
 80022a0:	46a0      	mov	r8, r4
 80022a2:	e00c      	b.n	80022be <recv+0x5e>
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
               {
                  close(sn);
 80022a4:	4630      	mov	r0, r6
 80022a6:	f7ff fdd3 	bl	8001e50 <close>
                  return SOCKERR_SOCKSTATUS;
 80022aa:	f06f 0006 	mvn.w	r0, #6
 80022ae:	e03c      	b.n	800232a <recv+0xca>
               }
            }
            else
            {
               close(sn);
 80022b0:	4630      	mov	r0, r6
 80022b2:	f7ff fdcd 	bl	8001e50 <close>
               return SOCKERR_SOCKSTATUS;
 80022b6:	f06f 0006 	mvn.w	r0, #6
 80022ba:	e036      	b.n	800232a <recv+0xca>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
         if(recvsize != 0) break;
 80022bc:	bb0c      	cbnz	r4, 8002302 <recv+0xa2>
         recvsize = getSn_RX_RSR(sn);
 80022be:	4630      	mov	r0, r6
 80022c0:	f7ff fd39 	bl	8001d36 <getSn_RX_RSR>
 80022c4:	4604      	mov	r4, r0
         tmp = getSn_SR(sn);
 80022c6:	f505 7040 	add.w	r0, r5, #768	; 0x300
 80022ca:	f7ff fc21 	bl	8001b10 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
 80022ce:	2817      	cmp	r0, #23
 80022d0:	d00d      	beq.n	80022ee <recv+0x8e>
            if(tmp == SOCK_CLOSE_WAIT)
 80022d2:	281c      	cmp	r0, #28
 80022d4:	d1ec      	bne.n	80022b0 <recv+0x50>
               if(recvsize != 0) break;
 80022d6:	b9a4      	cbnz	r4, 8002302 <recv+0xa2>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80022d8:	4630      	mov	r0, r6
 80022da:	f7ff fcfd 	bl	8001cd8 <getSn_TX_FSR>
 80022de:	4682      	mov	sl, r0
 80022e0:	f505 50f8 	add.w	r0, r5, #7936	; 0x1f00
 80022e4:	f7ff fc14 	bl	8001b10 <WIZCHIP_READ>
 80022e8:	ebba 2f80 	cmp.w	sl, r0, lsl #10
 80022ec:	d0da      	beq.n	80022a4 <recv+0x44>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <recv+0xe0>)
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	413b      	asrs	r3, r7
 80022f4:	f013 0f01 	tst.w	r3, #1
 80022f8:	d0e0      	beq.n	80022bc <recv+0x5c>
 80022fa:	2c00      	cmp	r4, #0
 80022fc:	d1de      	bne.n	80022bc <recv+0x5c>
 80022fe:	2000      	movs	r0, #0
 8002300:	e013      	b.n	800232a <recv+0xca>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002302:	4544      	cmp	r4, r8
 8002304:	d300      	bcc.n	8002308 <recv+0xa8>
 8002306:	4644      	mov	r4, r8
   wiz_recv_data(sn, buf, len);
 8002308:	4622      	mov	r2, r4
 800230a:	4649      	mov	r1, r9
 800230c:	4630      	mov	r0, r6
 800230e:	f7ff fd70 	bl	8001df2 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8002312:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8002316:	2140      	movs	r1, #64	; 0x40
 8002318:	4628      	mov	r0, r5
 800231a:	f7ff fc2b 	bl	8001b74 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800231e:	4628      	mov	r0, r5
 8002320:	f7ff fbf6 	bl	8001b10 <WIZCHIP_READ>
 8002324:	2800      	cmp	r0, #0
 8002326:	d1fa      	bne.n	800231e <recv+0xbe>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002328:	4620      	mov	r0, r4
}
 800232a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   CHECK_SOCKNUM();
 800232e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002332:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002334:	f06f 0004 	mvn.w	r0, #4
 8002338:	e7f7      	b.n	800232a <recv+0xca>
   CHECK_SOCKDATA();
 800233a:	f06f 000d 	mvn.w	r0, #13
 800233e:	e7f4      	b.n	800232a <recv+0xca>
 8002340:	2000016c 	.word	0x2000016c

08002344 <getsockopt>:
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
   CHECK_SOCKNUM();
 8002344:	2808      	cmp	r0, #8
 8002346:	f200 80a3 	bhi.w	8002490 <getsockopt+0x14c>
{
 800234a:	b570      	push	{r4, r5, r6, lr}
 800234c:	4615      	mov	r5, r2
 800234e:	4604      	mov	r4, r0
   switch(sotype)
 8002350:	290c      	cmp	r1, #12
 8002352:	f200 80a0 	bhi.w	8002496 <getsockopt+0x152>
 8002356:	e8df f001 	tbb	[pc, r1]
 800235a:	1107      	.short	0x1107
 800235c:	4338251b 	.word	0x4338251b
 8002360:	6c67569e 	.word	0x6c67569e
 8002364:	7b71      	.short	0x7b71
 8002366:	8f          	.byte	0x8f
 8002367:	00          	.byte	0x00
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8002368:	0080      	lsls	r0, r0, #2
 800236a:	3001      	adds	r0, #1
 800236c:	00c0      	lsls	r0, r0, #3
 800236e:	f7ff fbcf 	bl	8001b10 <WIZCHIP_READ>
 8002372:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8002376:	7028      	strb	r0, [r5, #0]
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
 8002378:	2001      	movs	r0, #1
}
 800237a:	bd70      	pop	{r4, r5, r6, pc}
         *(uint8_t*) arg = getSn_TTL(sn);
 800237c:	0080      	lsls	r0, r0, #2
 800237e:	3001      	adds	r0, #1
 8002380:	00c0      	lsls	r0, r0, #3
 8002382:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
 8002386:	f7ff fbc3 	bl	8001b10 <WIZCHIP_READ>
 800238a:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 800238c:	2001      	movs	r0, #1
         break;
 800238e:	e7f4      	b.n	800237a <getsockopt+0x36>
         *(uint8_t*) arg = getSn_TOS(sn);
 8002390:	0080      	lsls	r0, r0, #2
 8002392:	3001      	adds	r0, #1
 8002394:	00c0      	lsls	r0, r0, #3
 8002396:	f500 50a8 	add.w	r0, r0, #5376	; 0x1500
 800239a:	f7ff fbb9 	bl	8001b10 <WIZCHIP_READ>
 800239e:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 80023a0:	2001      	movs	r0, #1
         break;
 80023a2:	e7ea      	b.n	800237a <getsockopt+0x36>
         *(uint16_t*) arg = getSn_MSSR(sn);
 80023a4:	0084      	lsls	r4, r0, #2
 80023a6:	3401      	adds	r4, #1
 80023a8:	00e4      	lsls	r4, r4, #3
 80023aa:	f504 5090 	add.w	r0, r4, #4608	; 0x1200
 80023ae:	f7ff fbaf 	bl	8001b10 <WIZCHIP_READ>
 80023b2:	b286      	uxth	r6, r0
 80023b4:	0236      	lsls	r6, r6, #8
 80023b6:	b2b6      	uxth	r6, r6
 80023b8:	f504 5098 	add.w	r0, r4, #4864	; 0x1300
 80023bc:	f7ff fba8 	bl	8001b10 <WIZCHIP_READ>
 80023c0:	fa16 f080 	uxtah	r0, r6, r0
 80023c4:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 80023c6:	2001      	movs	r0, #1
         break;
 80023c8:	e7d7      	b.n	800237a <getsockopt+0x36>
         getSn_DIPR(sn, (uint8_t*)arg);
 80023ca:	0080      	lsls	r0, r0, #2
 80023cc:	3001      	adds	r0, #1
 80023ce:	00c0      	lsls	r0, r0, #3
 80023d0:	2204      	movs	r2, #4
 80023d2:	4629      	mov	r1, r5
 80023d4:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 80023d8:	f7ff fc00 	bl	8001bdc <WIZCHIP_READ_BUF>
   return SOCK_OK;
 80023dc:	2001      	movs	r0, #1
         break;
 80023de:	e7cc      	b.n	800237a <getsockopt+0x36>
         *(uint16_t*) arg = getSn_DPORT(sn);
 80023e0:	0084      	lsls	r4, r0, #2
 80023e2:	3401      	adds	r4, #1
 80023e4:	00e4      	lsls	r4, r4, #3
 80023e6:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 80023ea:	f7ff fb91 	bl	8001b10 <WIZCHIP_READ>
 80023ee:	b286      	uxth	r6, r0
 80023f0:	0236      	lsls	r6, r6, #8
 80023f2:	b2b6      	uxth	r6, r6
 80023f4:	f504 5088 	add.w	r0, r4, #4352	; 0x1100
 80023f8:	f7ff fb8a 	bl	8001b10 <WIZCHIP_READ>
 80023fc:	fa16 f080 	uxtah	r0, r6, r0
 8002400:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8002402:	2001      	movs	r0, #1
         break;
 8002404:	e7b9      	b.n	800237a <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 8002406:	0084      	lsls	r4, r0, #2
 8002408:	3401      	adds	r4, #1
 800240a:	00e4      	lsls	r4, r4, #3
 800240c:	4620      	mov	r0, r4
 800240e:	f7ff fb7f 	bl	8001b10 <WIZCHIP_READ>
 8002412:	f000 000f 	and.w	r0, r0, #15
 8002416:	2801      	cmp	r0, #1
 8002418:	d140      	bne.n	800249c <getsockopt+0x158>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 800241a:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
 800241e:	f7ff fb77 	bl	8001b10 <WIZCHIP_READ>
 8002422:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8002424:	2001      	movs	r0, #1
         break;
 8002426:	e7a8      	b.n	800237a <getsockopt+0x36>
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 8002428:	f7ff fc56 	bl	8001cd8 <getSn_TX_FSR>
 800242c:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 800242e:	2001      	movs	r0, #1
         break;
 8002430:	e7a3      	b.n	800237a <getsockopt+0x36>
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 8002432:	f7ff fc80 	bl	8001d36 <getSn_RX_RSR>
 8002436:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8002438:	2001      	movs	r0, #1
         break;
 800243a:	e79e      	b.n	800237a <getsockopt+0x36>
         *(uint8_t*) arg = getSn_SR(sn);
 800243c:	0080      	lsls	r0, r0, #2
 800243e:	3001      	adds	r0, #1
 8002440:	00c0      	lsls	r0, r0, #3
 8002442:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8002446:	f7ff fb63 	bl	8001b10 <WIZCHIP_READ>
 800244a:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 800244c:	2001      	movs	r0, #1
         break;
 800244e:	e794      	b.n	800237a <getsockopt+0x36>
         if(getSn_MR(sn) & Sn_MR_TCP)
 8002450:	0080      	lsls	r0, r0, #2
 8002452:	3001      	adds	r0, #1
 8002454:	00c0      	lsls	r0, r0, #3
 8002456:	f7ff fb5b 	bl	8001b10 <WIZCHIP_READ>
 800245a:	f010 0f01 	tst.w	r0, #1
 800245e:	d105      	bne.n	800246c <getsockopt+0x128>
            *(uint16_t*)arg = sock_remained_size[sn];
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <getsockopt+0x164>)
 8002462:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002466:	802b      	strh	r3, [r5, #0]
   return SOCK_OK;
 8002468:	2001      	movs	r0, #1
 800246a:	e786      	b.n	800237a <getsockopt+0x36>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 800246c:	4620      	mov	r0, r4
 800246e:	f7ff fc62 	bl	8001d36 <getSn_RX_RSR>
 8002472:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8002474:	2001      	movs	r0, #1
 8002476:	e780      	b.n	800237a <getsockopt+0x36>
         if((getSn_MR(sn) == Sn_MR_TCP))
 8002478:	0080      	lsls	r0, r0, #2
 800247a:	3001      	adds	r0, #1
 800247c:	00c0      	lsls	r0, r0, #3
 800247e:	f7ff fb47 	bl	8001b10 <WIZCHIP_READ>
 8002482:	2801      	cmp	r0, #1
 8002484:	d00d      	beq.n	80024a2 <getsockopt+0x15e>
         *(uint8_t*)arg = sock_pack_info[sn];
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <getsockopt+0x168>)
 8002488:	5d1b      	ldrb	r3, [r3, r4]
 800248a:	702b      	strb	r3, [r5, #0]
   return SOCK_OK;
 800248c:	2001      	movs	r0, #1
         break;
 800248e:	e774      	b.n	800237a <getsockopt+0x36>
   CHECK_SOCKNUM();
 8002490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002494:	4770      	bx	lr
         return SOCKERR_SOCKOPT;
 8002496:	f06f 0001 	mvn.w	r0, #1
 800249a:	e76e      	b.n	800237a <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 800249c:	f06f 0004 	mvn.w	r0, #4
 80024a0:	e76b      	b.n	800237a <getsockopt+0x36>
             return SOCKERR_SOCKMODE;
 80024a2:	f06f 0004 	mvn.w	r0, #4
 80024a6:	e768      	b.n	800237a <getsockopt+0x36>
 80024a8:	20000178 	.word	0x20000178
 80024ac:	20000170 	.word	0x20000170

080024b0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80024b0:	4770      	bx	lr

080024b2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80024b2:	4770      	bx	lr

080024b4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80024b4:	4770      	bx	lr

080024b6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80024b6:	4770      	bx	lr

080024b8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80024b8:	7800      	ldrb	r0, [r0, #0]
 80024ba:	4770      	bx	lr

080024bc <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80024bc:	7001      	strb	r1, [r0, #0]
 80024be:	4770      	bx	lr

080024c0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80024c0:	2000      	movs	r0, #0
 80024c2:	4770      	bx	lr

080024c4 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80024c4:	4770      	bx	lr

080024c6 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80024c6:	4770      	bx	lr

080024c8 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80024c8:	4770      	bx	lr
	...

080024cc <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 80024cc:	b120      	cbz	r0, 80024d8 <reg_wizchip_cs_cbfunc+0xc>
 80024ce:	b119      	cbz	r1, 80024d8 <reg_wizchip_cs_cbfunc+0xc>
      WIZCHIP.CS._select   = wizchip_cs_select;
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <reg_wizchip_cs_cbfunc+0x18>)
 80024d2:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80024d4:	6199      	str	r1, [r3, #24]
   }
}
 80024d6:	4770      	bx	lr
      WIZCHIP.CS._select   = wizchip_cs_select;
 80024d8:	4b02      	ldr	r3, [pc, #8]	; (80024e4 <reg_wizchip_cs_cbfunc+0x18>)
 80024da:	4a03      	ldr	r2, [pc, #12]	; (80024e8 <reg_wizchip_cs_cbfunc+0x1c>)
 80024dc:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80024de:	4a03      	ldr	r2, [pc, #12]	; (80024ec <reg_wizchip_cs_cbfunc+0x20>)
 80024e0:	619a      	str	r2, [r3, #24]
 80024e2:	4770      	bx	lr
 80024e4:	20000004 	.word	0x20000004
 80024e8:	080024b5 	.word	0x080024b5
 80024ec:	080024b7 	.word	0x080024b7

080024f0 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <reg_wizchip_spi_cbfunc+0x24>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80024f8:	d0fa      	beq.n	80024f0 <reg_wizchip_spi_cbfunc>
   
   if(!spi_rb || !spi_wb)
 80024fa:	b120      	cbz	r0, 8002506 <reg_wizchip_spi_cbfunc+0x16>
 80024fc:	b119      	cbz	r1, 8002506 <reg_wizchip_spi_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <reg_wizchip_spi_cbfunc+0x24>)
 8002500:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002502:	6219      	str	r1, [r3, #32]
   }
}
 8002504:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002506:	4b03      	ldr	r3, [pc, #12]	; (8002514 <reg_wizchip_spi_cbfunc+0x24>)
 8002508:	4a03      	ldr	r2, [pc, #12]	; (8002518 <reg_wizchip_spi_cbfunc+0x28>)
 800250a:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800250c:	4a03      	ldr	r2, [pc, #12]	; (800251c <reg_wizchip_spi_cbfunc+0x2c>)
 800250e:	621a      	str	r2, [r3, #32]
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	20000004 	.word	0x20000004
 8002518:	080024c1 	.word	0x080024c1
 800251c:	080024c5 	.word	0x080024c5

08002520 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <reg_wizchip_spiburst_cbfunc+0x24>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002528:	d0fa      	beq.n	8002520 <reg_wizchip_spiburst_cbfunc>

   if(!spi_rb || !spi_wb)
 800252a:	b120      	cbz	r0, 8002536 <reg_wizchip_spiburst_cbfunc+0x16>
 800252c:	b119      	cbz	r1, 8002536 <reg_wizchip_spiburst_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <reg_wizchip_spiburst_cbfunc+0x24>)
 8002530:	6258      	str	r0, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8002532:	6299      	str	r1, [r3, #40]	; 0x28
   }
}
 8002534:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8002536:	4b03      	ldr	r3, [pc, #12]	; (8002544 <reg_wizchip_spiburst_cbfunc+0x24>)
 8002538:	4a03      	ldr	r2, [pc, #12]	; (8002548 <reg_wizchip_spiburst_cbfunc+0x28>)
 800253a:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800253c:	4a03      	ldr	r2, [pc, #12]	; (800254c <reg_wizchip_spiburst_cbfunc+0x2c>)
 800253e:	629a      	str	r2, [r3, #40]	; 0x28
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000004 	.word	0x20000004
 8002548:	080024c7 	.word	0x080024c7
 800254c:	080024c9 	.word	0x080024c9

08002550 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8002550:	b500      	push	{lr}
 8002552:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8002554:	2206      	movs	r2, #6
 8002556:	a901      	add	r1, sp, #4
 8002558:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800255c:	f7ff fb3e 	bl	8001bdc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002560:	2204      	movs	r2, #4
 8002562:	a905      	add	r1, sp, #20
 8002564:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002568:	f7ff fb38 	bl	8001bdc <WIZCHIP_READ_BUF>
 800256c:	2204      	movs	r2, #4
 800256e:	a904      	add	r1, sp, #16
 8002570:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002574:	f7ff fb32 	bl	8001bdc <WIZCHIP_READ_BUF>
 8002578:	2204      	movs	r2, #4
 800257a:	a903      	add	r1, sp, #12
 800257c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002580:	f7ff fb2c 	bl	8001bdc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002584:	2180      	movs	r1, #128	; 0x80
 8002586:	2000      	movs	r0, #0
 8002588:	f7ff faf4 	bl	8001b74 <WIZCHIP_WRITE>
   getMR(); // for delay
 800258c:	2000      	movs	r0, #0
 800258e:	f7ff fabf 	bl	8001b10 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8002592:	2206      	movs	r2, #6
 8002594:	a901      	add	r1, sp, #4
 8002596:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800259a:	f7ff fb5f 	bl	8001c5c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800259e:	2204      	movs	r2, #4
 80025a0:	a905      	add	r1, sp, #20
 80025a2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025a6:	f7ff fb59 	bl	8001c5c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80025aa:	2204      	movs	r2, #4
 80025ac:	a904      	add	r1, sp, #16
 80025ae:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80025b2:	f7ff fb53 	bl	8001c5c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80025b6:	2204      	movs	r2, #4
 80025b8:	a903      	add	r1, sp, #12
 80025ba:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80025be:	f7ff fb4d 	bl	8001c5c <WIZCHIP_WRITE_BUF>
}
 80025c2:	b007      	add	sp, #28
 80025c4:	f85d fb04 	ldr.w	pc, [sp], #4

080025c8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80025c8:	b570      	push	{r4, r5, r6, lr}
 80025ca:	4605      	mov	r5, r0
 80025cc:	460e      	mov	r6, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 80025ce:	f7ff ffbf 	bl	8002550 <wizchip_sw_reset>
   if(txsize)
 80025d2:	b1cd      	cbz	r5, 8002608 <wizchip_init+0x40>
   {
      tmp = 0;
 80025d4:	2200      	movs	r2, #0
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80025d6:	4613      	mov	r3, r2
 80025d8:	2b07      	cmp	r3, #7
 80025da:	dc07      	bgt.n	80025ec <wizchip_init+0x24>
		{
			tmp += txsize[i];
 80025dc:	5ce9      	ldrb	r1, [r5, r3]
 80025de:	440a      	add	r2, r1
 80025e0:	b252      	sxtb	r2, r2

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80025e2:	2a10      	cmp	r2, #16
 80025e4:	dc2f      	bgt.n	8002646 <wizchip_init+0x7e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80025e6:	3301      	adds	r3, #1
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	e7f5      	b.n	80025d8 <wizchip_init+0x10>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80025ec:	2400      	movs	r4, #0
 80025ee:	e009      	b.n	8002604 <wizchip_init+0x3c>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80025f0:	00a0      	lsls	r0, r4, #2
 80025f2:	3001      	adds	r0, #1
 80025f4:	00c0      	lsls	r0, r0, #3
 80025f6:	5d29      	ldrb	r1, [r5, r4]
 80025f8:	f500 50f8 	add.w	r0, r0, #7936	; 0x1f00
 80025fc:	f7ff faba 	bl	8001b74 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002600:	3401      	adds	r4, #1
 8002602:	b264      	sxtb	r4, r4
 8002604:	2c07      	cmp	r4, #7
 8002606:	ddf3      	ble.n	80025f0 <wizchip_init+0x28>
		}

	#endif
   }

   if(rxsize)
 8002608:	b15e      	cbz	r6, 8002622 <wizchip_init+0x5a>
   {
      tmp = 0;
 800260a:	2200      	movs	r2, #0
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800260c:	4613      	mov	r3, r2
 800260e:	2b07      	cmp	r3, #7
 8002610:	dc09      	bgt.n	8002626 <wizchip_init+0x5e>
		{
			tmp += rxsize[i];
 8002612:	5cf1      	ldrb	r1, [r6, r3]
 8002614:	440a      	add	r2, r1
 8002616:	b252      	sxtb	r2, r2
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002618:	2a10      	cmp	r2, #16
 800261a:	dc17      	bgt.n	800264c <wizchip_init+0x84>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800261c:	3301      	adds	r3, #1
 800261e:	b25b      	sxtb	r3, r3
 8002620:	e7f5      	b.n	800260e <wizchip_init+0x46>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 8002622:	2000      	movs	r0, #0
 8002624:	e00e      	b.n	8002644 <wizchip_init+0x7c>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002626:	2400      	movs	r4, #0
 8002628:	e009      	b.n	800263e <wizchip_init+0x76>
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800262a:	00a0      	lsls	r0, r4, #2
 800262c:	3001      	adds	r0, #1
 800262e:	00c0      	lsls	r0, r0, #3
 8002630:	5d31      	ldrb	r1, [r6, r4]
 8002632:	f500 50f0 	add.w	r0, r0, #7680	; 0x1e00
 8002636:	f7ff fa9d 	bl	8001b74 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800263a:	3401      	adds	r4, #1
 800263c:	b264      	sxtb	r4, r4
 800263e:	2c07      	cmp	r4, #7
 8002640:	ddf3      	ble.n	800262a <wizchip_init+0x62>
   return 0;
 8002642:	2000      	movs	r0, #0
}
 8002644:	bd70      	pop	{r4, r5, r6, pc}
			if(tmp > 16) return -1;
 8002646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800264a:	e7fb      	b.n	8002644 <wizchip_init+0x7c>
			if(tmp > 16) return -1;
 800264c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002650:	e7f8      	b.n	8002644 <wizchip_init+0x7c>

08002652 <wizchip_getinterrupt>:

#endif   
}

intr_kind wizchip_getinterrupt(void)
{
 8002652:	b510      	push	{r4, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8002654:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002658:	f7ff fa5a 	bl	8001b10 <WIZCHIP_READ>
 800265c:	f000 04f0 	and.w	r4, r0, #240	; 0xf0
   sir = getSIR();
 8002660:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002664:	f7ff fa54 	bl	8001b10 <WIZCHIP_READ>
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002668:	b280      	uxth	r0, r0
  ret = (ret << 8) + ir;
 800266a:	0200      	lsls	r0, r0, #8
 800266c:	b280      	uxth	r0, r0
 800266e:	4420      	add	r0, r4
 8002670:	b280      	uxth	r0, r0
  return (intr_kind)ret;
}
 8002672:	bd10      	pop	{r4, pc}

08002674 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002674:	b510      	push	{r4, lr}
   uint8_t imr  = (uint8_t)intr;
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002676:	0a04      	lsrs	r4, r0, #8
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002678:	b2c1      	uxtb	r1, r0
 800267a:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800267e:	f7ff fa79 	bl	8001b74 <WIZCHIP_WRITE>
   setSIMR(simr);
 8002682:	4621      	mov	r1, r4
 8002684:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002688:	f7ff fa74 	bl	8001b74 <WIZCHIP_WRITE>
#endif   
}
 800268c:	bd10      	pop	{r4, pc}
	...

08002690 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002690:	b510      	push	{r4, lr}
 8002692:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 8002694:	2206      	movs	r2, #6
 8002696:	4601      	mov	r1, r0
 8002698:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800269c:	f7ff fade 	bl	8001c5c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80026a0:	2204      	movs	r2, #4
 80026a2:	f104 010e 	add.w	r1, r4, #14
 80026a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026aa:	f7ff fad7 	bl	8001c5c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80026ae:	2204      	movs	r2, #4
 80026b0:	f104 010a 	add.w	r1, r4, #10
 80026b4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80026b8:	f7ff fad0 	bl	8001c5c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80026bc:	2204      	movs	r2, #4
 80026be:	1da1      	adds	r1, r4, #6
 80026c0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80026c4:	f7ff faca 	bl	8001c5c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80026c8:	7ca2      	ldrb	r2, [r4, #18]
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <wizchip_setnetinfo+0x54>)
 80026cc:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80026ce:	7ce2      	ldrb	r2, [r4, #19]
 80026d0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80026d2:	7d22      	ldrb	r2, [r4, #20]
 80026d4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80026d6:	7d62      	ldrb	r2, [r4, #21]
 80026d8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80026da:	7da2      	ldrb	r2, [r4, #22]
 80026dc:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <wizchip_setnetinfo+0x58>)
 80026de:	701a      	strb	r2, [r3, #0]
}
 80026e0:	bd10      	pop	{r4, pc}
 80026e2:	bf00      	nop
 80026e4:	2000018c 	.word	0x2000018c
 80026e8:	20000188 	.word	0x20000188

080026ec <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80026ec:	b510      	push	{r4, lr}
 80026ee:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 80026f0:	2206      	movs	r2, #6
 80026f2:	4601      	mov	r1, r0
 80026f4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80026f8:	f7ff fa70 	bl	8001bdc <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80026fc:	2204      	movs	r2, #4
 80026fe:	f104 010e 	add.w	r1, r4, #14
 8002702:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002706:	f7ff fa69 	bl	8001bdc <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800270a:	2204      	movs	r2, #4
 800270c:	f104 010a 	add.w	r1, r4, #10
 8002710:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002714:	f7ff fa62 	bl	8001bdc <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002718:	2204      	movs	r2, #4
 800271a:	1da1      	adds	r1, r4, #6
 800271c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002720:	f7ff fa5c 	bl	8001bdc <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <wizchip_getnetinfo+0x54>)
 8002726:	781a      	ldrb	r2, [r3, #0]
 8002728:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800272a:	785a      	ldrb	r2, [r3, #1]
 800272c:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800272e:	789a      	ldrb	r2, [r3, #2]
 8002730:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002732:	78db      	ldrb	r3, [r3, #3]
 8002734:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002736:	4b03      	ldr	r3, [pc, #12]	; (8002744 <wizchip_getnetinfo+0x58>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	75a3      	strb	r3, [r4, #22]
}
 800273c:	bd10      	pop	{r4, pc}
 800273e:	bf00      	nop
 8002740:	2000018c 	.word	0x2000018c
 8002744:	20000188 	.word	0x20000188

08002748 <mcp23017_init>:

#define I2C_TIMEOUT		10

void mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c, uint16_t addr)
{
	hdev->hi2c = hi2c;
 8002748:	6001      	str	r1, [r0, #0]
	hdev->addr = addr << 1;
 800274a:	0052      	lsls	r2, r2, #1
 800274c:	8082      	strh	r2, [r0, #4]
}
 800274e:	4770      	bx	lr

08002750 <mcp23017_read>:

HAL_StatusTypeDef mcp23017_read(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 8002750:	b510      	push	{r4, lr}
 8002752:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Read(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 8002754:	8884      	ldrh	r4, [r0, #4]
 8002756:	6800      	ldr	r0, [r0, #0]
 8002758:	230a      	movs	r3, #10
 800275a:	9302      	str	r3, [sp, #8]
 800275c:	2301      	movs	r3, #1
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	9200      	str	r2, [sp, #0]
 8002762:	460a      	mov	r2, r1
 8002764:	4621      	mov	r1, r4
 8002766:	f004 fb4f 	bl	8006e08 <HAL_I2C_Mem_Read>
}
 800276a:	b004      	add	sp, #16
 800276c:	bd10      	pop	{r4, pc}

0800276e <mcp23017_write>:

HAL_StatusTypeDef mcp23017_write(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 800276e:	b510      	push	{r4, lr}
 8002770:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Write(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 8002772:	8884      	ldrh	r4, [r0, #4]
 8002774:	6800      	ldr	r0, [r0, #0]
 8002776:	230a      	movs	r3, #10
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	2301      	movs	r3, #1
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	9200      	str	r2, [sp, #0]
 8002780:	460a      	mov	r2, r1
 8002782:	4621      	mov	r1, r4
 8002784:	f004 fa8c 	bl	8006ca0 <HAL_I2C_Mem_Write>
}
 8002788:	b004      	add	sp, #16
 800278a:	bd10      	pop	{r4, pc}

0800278c <mcp23017_iodir>:

HAL_StatusTypeDef mcp23017_iodir(MCP23017_HandleTypeDef *hdev, uint8_t port, uint8_t iodir)
{
 800278c:	b500      	push	{lr}
 800278e:	b083      	sub	sp, #12
	uint8_t data[1] = {iodir};
 8002790:	ab02      	add	r3, sp, #8
 8002792:	f803 2d04 	strb.w	r2, [r3, #-4]!
	return mcp23017_write(hdev, REGISTER_IODIRA|port, data);
 8002796:	461a      	mov	r2, r3
 8002798:	f7ff ffe9 	bl	800276e <mcp23017_write>
}
 800279c:	b003      	add	sp, #12
 800279e:	f85d fb04 	ldr.w	pc, [sp], #4

080027a2 <mcp23017_read_gpio>:
	uint8_t data[1] = {pu};
	return mcp23017_write(hdev, REGISTER_GPPUA|port, data);
}

HAL_StatusTypeDef mcp23017_read_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 80027a2:	b530      	push	{r4, r5, lr}
 80027a4:	b083      	sub	sp, #12
 80027a6:	4604      	mov	r4, r0
 80027a8:	460d      	mov	r5, r1
	uint8_t data[1];
	HAL_StatusTypeDef status;
	status = mcp23017_read(hdev, REGISTER_GPIOA|port, data);
 80027aa:	aa01      	add	r2, sp, #4
 80027ac:	f041 0112 	orr.w	r1, r1, #18
 80027b0:	f7ff ffce 	bl	8002750 <mcp23017_read>
	if (status == HAL_OK)
 80027b4:	4603      	mov	r3, r0
 80027b6:	b918      	cbnz	r0, 80027c0 <mcp23017_read_gpio+0x1e>
		hdev->gpio[port] = data[0];
 80027b8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80027bc:	442c      	add	r4, r5
 80027be:	71a2      	strb	r2, [r4, #6]
	return status;
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	b003      	add	sp, #12
 80027c4:	bd30      	pop	{r4, r5, pc}

080027c6 <mcp23017_write_gpio>:

HAL_StatusTypeDef mcp23017_write_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 80027c6:	b500      	push	{lr}
 80027c8:	b083      	sub	sp, #12
	uint8_t data[1] = {hdev->gpio[port]};
 80027ca:	1843      	adds	r3, r0, r1
 80027cc:	799b      	ldrb	r3, [r3, #6]
 80027ce:	aa02      	add	r2, sp, #8
 80027d0:	f802 3d04 	strb.w	r3, [r2, #-4]!
	return mcp23017_write(hdev, REGISTER_GPIOA|port, data);
 80027d4:	f041 0112 	orr.w	r1, r1, #18
 80027d8:	f7ff ffc9 	bl	800276e <mcp23017_write>
}
 80027dc:	b003      	add	sp, #12
 80027de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080027e4 <DataLog_UpdateMemPointer>:
}
/**
 *
 * @param inc
 */
static void DataLog_UpdateMemPointer (uint8_t inc){
 80027e4:	b508      	push	{r3, lr}
	logHead.nextSavedLog += sizeof(DataLogEvent_t);
 80027e6:	4a09      	ldr	r2, [pc, #36]	; (800280c <DataLog_UpdateMemPointer+0x28>)
 80027e8:	6813      	ldr	r3, [r2, #0]
 80027ea:	3310      	adds	r3, #16
 80027ec:	6013      	str	r3, [r2, #0]

	if(logHead.nextSavedLog >= w25qxx.CapacityInKiloByte * 1024){
 80027ee:	4a08      	ldr	r2, [pc, #32]	; (8002810 <DataLog_UpdateMemPointer+0x2c>)
 80027f0:	6a12      	ldr	r2, [r2, #32]
 80027f2:	ebb3 2f82 	cmp.w	r3, r2, lsl #10
 80027f6:	d302      	bcc.n	80027fe <DataLog_UpdateMemPointer+0x1a>
		logHead.nextSavedLog = 0;
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <DataLog_UpdateMemPointer+0x28>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
	}

	HAL_RTCEx_BKUPWrite(&hrtc, 1, logHead.nextSavedLog);
 80027fe:	4b03      	ldr	r3, [pc, #12]	; (800280c <DataLog_UpdateMemPointer+0x28>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	2101      	movs	r1, #1
 8002804:	4803      	ldr	r0, [pc, #12]	; (8002814 <DataLog_UpdateMemPointer+0x30>)
 8002806:	f005 fb20 	bl	8007e4a <HAL_RTCEx_BKUPWrite>
}
 800280a:	bd08      	pop	{r3, pc}
 800280c:	20000190 	.word	0x20000190
 8002810:	20002b78 	.word	0x20002b78
 8002814:	20003250 	.word	0x20003250

08002818 <DataLog_LogEvent>:
DataLogStatus_t DataLog_LogEvent (DataLogEventCode_t event){
 8002818:	b530      	push	{r4, r5, lr}
 800281a:	b08b      	sub	sp, #44	; 0x2c
 800281c:	4605      	mov	r5, r0
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800281e:	4c18      	ldr	r4, [pc, #96]	; (8002880 <DataLog_LogEvent+0x68>)
 8002820:	2200      	movs	r2, #0
 8002822:	a901      	add	r1, sp, #4
 8002824:	4620      	mov	r0, r4
 8002826:	f005 fac4 	bl	8007db2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800282a:	2200      	movs	r2, #0
 800282c:	4669      	mov	r1, sp
 800282e:	4620      	mov	r0, r4
 8002830:	f005 faea 	bl	8007e08 <HAL_RTC_GetDate>
	eventS.timestamp.fields.seconds = time.Seconds;
 8002834:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002838:	f88d 3018 	strb.w	r3, [sp, #24]
	eventS.timestamp.fields.minutes = time.Minutes;
 800283c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002840:	f88d 3019 	strb.w	r3, [sp, #25]
	eventS.timestamp.fields.hours = time.Hours;
 8002844:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002848:	f88d 301a 	strb.w	r3, [sp, #26]
	eventS.timestamp.fields.day = date.Date;
 800284c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002850:	f88d 301b 	strb.w	r3, [sp, #27]
	eventS.timestamp.fields.month = date.Month;
 8002854:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002858:	f88d 301c 	strb.w	r3, [sp, #28]
	eventS.timestamp.fields.year = date.Year;
 800285c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002860:	f88d 301d 	strb.w	r3, [sp, #29]
	eventS.timestamp.fields.empty = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	f8ad 301e 	strh.w	r3, [sp, #30]
	eventS.eventCode = event;
 800286a:	9508      	str	r5, [sp, #32]
	eventS.reserved = 0;
 800286c:	9309      	str	r3, [sp, #36]	; 0x24
	xQueueSend(DataLogQueueHandle, &eventS, 10);
 800286e:	220a      	movs	r2, #10
 8002870:	a906      	add	r1, sp, #24
 8002872:	4804      	ldr	r0, [pc, #16]	; (8002884 <DataLog_LogEvent+0x6c>)
 8002874:	6800      	ldr	r0, [r0, #0]
 8002876:	f007 f82f 	bl	80098d8 <xQueueGenericSend>
}
 800287a:	b00b      	add	sp, #44	; 0x2c
 800287c:	bd30      	pop	{r4, r5, pc}
 800287e:	bf00      	nop
 8002880:	20003250 	.word	0x20003250
 8002884:	2000324c 	.word	0x2000324c

08002888 <DataLog_GetLastEvent>:
void DataLog_GetLastEvent (DataLogEvent_t* event){
 8002888:	b508      	push	{r3, lr}
	W25qxx_ReadBytes((uint8_t*)event, logHead.nextSavedLog - 16, 16);
 800288a:	4b03      	ldr	r3, [pc, #12]	; (8002898 <DataLog_GetLastEvent+0x10>)
 800288c:	6819      	ldr	r1, [r3, #0]
 800288e:	2210      	movs	r2, #16
 8002890:	3910      	subs	r1, #16
 8002892:	f000 fa13 	bl	8002cbc <W25qxx_ReadBytes>
}
 8002896:	bd08      	pop	{r3, pc}
 8002898:	20000190 	.word	0x20000190

0800289c <DataLog_Init>:
DataLogStatus_t DataLog_Init (void){
 800289c:	b510      	push	{r4, lr}
 800289e:	b084      	sub	sp, #16
	if(W25qxx_Init() == true){
 80028a0:	f000 f928 	bl	8002af4 <W25qxx_Init>
 80028a4:	b950      	cbnz	r0, 80028bc <DataLog_Init+0x20>
	DataLogStatus_t retval = DL_NO_FLASH;
 80028a6:	2401      	movs	r4, #1
	logHead.nextSavedLog = HAL_RTCEx_BKUPRead(&hrtc, 1);
 80028a8:	2101      	movs	r1, #1
 80028aa:	4809      	ldr	r0, [pc, #36]	; (80028d0 <DataLog_Init+0x34>)
 80028ac:	f005 fad2 	bl	8007e54 <HAL_RTCEx_BKUPRead>
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <DataLog_Init+0x38>)
 80028b2:	6018      	str	r0, [r3, #0]
	if(retval == DL_OK){
 80028b4:	b124      	cbz	r4, 80028c0 <DataLog_Init+0x24>
}
 80028b6:	4620      	mov	r0, r4
 80028b8:	b004      	add	sp, #16
 80028ba:	bd10      	pop	{r4, pc}
		retval = DL_OK;
 80028bc:	2400      	movs	r4, #0
 80028be:	e7f3      	b.n	80028a8 <DataLog_Init+0xc>
		DataLog_LogEvent(EV_STARTUP);
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7ff ffa9 	bl	8002818 <DataLog_LogEvent>
		DataLog_GetLastEvent(&lastEvent);
 80028c6:	4668      	mov	r0, sp
 80028c8:	f7ff ffde 	bl	8002888 <DataLog_GetLastEvent>
 80028cc:	e7f3      	b.n	80028b6 <DataLog_Init+0x1a>
 80028ce:	bf00      	nop
 80028d0:	20003250 	.word	0x20003250
 80028d4:	20000190 	.word	0x20000190

080028d8 <DataLog_SaveEvent>:
void DataLog_SaveEvent (DataLogEvent_t* event){
 80028d8:	b538      	push	{r3, r4, r5, lr}
 80028da:	4605      	mov	r5, r0
	for(int i = 0; i < 16; i++){
 80028dc:	2400      	movs	r4, #0
 80028de:	e006      	b.n	80028ee <DataLog_SaveEvent+0x16>
		W25qxx_WriteByte(event->bytes[i], logHead.nextSavedLog + i);
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <DataLog_SaveEvent+0x24>)
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	4421      	add	r1, r4
 80028e6:	5d28      	ldrb	r0, [r5, r4]
 80028e8:	f000 f9ae 	bl	8002c48 <W25qxx_WriteByte>
	for(int i = 0; i < 16; i++){
 80028ec:	3401      	adds	r4, #1
 80028ee:	2c0f      	cmp	r4, #15
 80028f0:	ddf6      	ble.n	80028e0 <DataLog_SaveEvent+0x8>
	DataLog_UpdateMemPointer(1);
 80028f2:	2001      	movs	r0, #1
 80028f4:	f7ff ff76 	bl	80027e4 <DataLog_UpdateMemPointer>
}
 80028f8:	bd38      	pop	{r3, r4, r5, pc}
 80028fa:	bf00      	nop
 80028fc:	20000190 	.word	0x20000190

08002900 <DataLog_EreaseMemory>:
void DataLog_EreaseMemory (void){
 8002900:	b508      	push	{r3, lr}
	W25qxx_EraseChip();
 8002902:	f000 f97f 	bl	8002c04 <W25qxx_EraseChip>
	logHead.nextSavedLog = 0;
 8002906:	2200      	movs	r2, #0
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <DataLog_EreaseMemory+0x1c>)
 800290a:	601a      	str	r2, [r3, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, 1, logHead.nextSavedLog);
 800290c:	2101      	movs	r1, #1
 800290e:	4804      	ldr	r0, [pc, #16]	; (8002920 <DataLog_EreaseMemory+0x20>)
 8002910:	f005 fa9b 	bl	8007e4a <HAL_RTCEx_BKUPWrite>
	DataLog_LogEvent(EV_FLASH_CLR);
 8002914:	2005      	movs	r0, #5
 8002916:	f7ff ff7f 	bl	8002818 <DataLog_LogEvent>
}
 800291a:	bd08      	pop	{r3, pc}
 800291c:	20000190 	.word	0x20000190
 8002920:	20003250 	.word	0x20003250

08002924 <DataLog_GetCurrentMemPointer>:
}
 8002924:	4b01      	ldr	r3, [pc, #4]	; (800292c <DataLog_GetCurrentMemPointer+0x8>)
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000190 	.word	0x20000190

08002930 <DataLog_TranslateEvent>:
uint32_t DataLog_TranslateEvent (DataLogEvent_t* event, char* output){
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002932:	b085      	sub	sp, #20
	if(event->eventCode < EVENT_CNT){
 8002934:	6885      	ldr	r5, [r0, #8]
 8002936:	2d07      	cmp	r5, #7
 8002938:	d902      	bls.n	8002940 <DataLog_TranslateEvent+0x10>
	uint32_t len = 0;
 800293a:	2000      	movs	r0, #0
}
 800293c:	b005      	add	sp, #20
 800293e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002940:	460e      	mov	r6, r1
 8002942:	4604      	mov	r4, r0
		len = sprintf(output, eventsStr[event->eventCode], event->timestamp.fields.day,
 8002944:	78c2      	ldrb	r2, [r0, #3]
				event->timestamp.fields.month, event->timestamp.fields.year,
 8002946:	7903      	ldrb	r3, [r0, #4]
 8002948:	7940      	ldrb	r0, [r0, #5]
				event->timestamp.fields.hours, event->timestamp.fields.minutes,
 800294a:	78a7      	ldrb	r7, [r4, #2]
 800294c:	f894 c001 	ldrb.w	ip, [r4, #1]
				event->timestamp.fields.seconds);
 8002950:	7824      	ldrb	r4, [r4, #0]
		len = sprintf(output, eventsStr[event->eventCode], event->timestamp.fields.day,
 8002952:	4906      	ldr	r1, [pc, #24]	; (800296c <DataLog_TranslateEvent+0x3c>)
 8002954:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8002958:	9403      	str	r4, [sp, #12]
 800295a:	f8cd c008 	str.w	ip, [sp, #8]
 800295e:	9701      	str	r7, [sp, #4]
 8002960:	9000      	str	r0, [sp, #0]
 8002962:	4630      	mov	r0, r6
 8002964:	f009 feba 	bl	800c6dc <siprintf>
 8002968:	e7e8      	b.n	800293c <DataLog_TranslateEvent+0xc>
 800296a:	bf00      	nop
 800296c:	0800da90 	.word	0x0800da90

08002970 <DataLog_GetSavedEventsCnt>:
	return logHead.nextSavedLog / 16;
 8002970:	4b01      	ldr	r3, [pc, #4]	; (8002978 <DataLog_GetSavedEventsCnt+0x8>)
 8002972:	6818      	ldr	r0, [r3, #0]
}
 8002974:	0900      	lsrs	r0, r0, #4
 8002976:	4770      	bx	lr
 8002978:	20000190 	.word	0x20000190

0800297c <DataLog_GetLastEventsN>:
DataLogStatus_t DataLog_GetLastEventsN(DataLogEvent_t* events, uint32_t event){
 800297c:	b538      	push	{r3, r4, r5, lr}
 800297e:	4605      	mov	r5, r0
 8002980:	460c      	mov	r4, r1
	eventsSaved = DataLog_GetSavedEventsCnt();
 8002982:	f7ff fff5 	bl	8002970 <DataLog_GetSavedEventsCnt>
	if((eventsSaved == 0) || (event > eventsSaved)){
 8002986:	b108      	cbz	r0, 800298c <DataLog_GetLastEventsN+0x10>
 8002988:	42a0      	cmp	r0, r4
 800298a:	d201      	bcs.n	8002990 <DataLog_GetLastEventsN+0x14>
}
 800298c:	2000      	movs	r0, #0
 800298e:	bd38      	pop	{r3, r4, r5, pc}
	W25qxx_ReadBytes((uint8_t*)events, logHead.nextSavedLog - (event * 16), 16);
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <DataLog_GetLastEventsN+0x28>)
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	2210      	movs	r2, #16
 8002996:	eba1 1104 	sub.w	r1, r1, r4, lsl #4
 800299a:	4628      	mov	r0, r5
 800299c:	f000 f98e 	bl	8002cbc <W25qxx_ReadBytes>
	return DL_OK;
 80029a0:	e7f4      	b.n	800298c <DataLog_GetLastEventsN+0x10>
 80029a2:	bf00      	nop
 80029a4:	20000190 	.word	0x20000190

080029a8 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 80029a8:	b500      	push	{lr}
 80029aa:	b087      	sub	sp, #28
 80029ac:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 80029b0:	2364      	movs	r3, #100	; 0x64
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2301      	movs	r3, #1
 80029b6:	f10d 0217 	add.w	r2, sp, #23
 80029ba:	f10d 010f 	add.w	r1, sp, #15
 80029be:	4804      	ldr	r0, [pc, #16]	; (80029d0 <W25qxx_Spi+0x28>)
 80029c0:	f005 fc23 	bl	800820a <HAL_SPI_TransmitReceive>
	return ret;	
}
 80029c4:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80029c8:	b007      	add	sp, #28
 80029ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80029ce:	bf00      	nop
 80029d0:	200032f0 	.word	0x200032f0

080029d4 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80029d4:	b570      	push	{r4, r5, r6, lr}
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
  FLASH_SELECT;
 80029d6:	f000 fb31 	bl	800303c <FLASH_ChipSelect>
  W25qxx_Spi(0x9F);
 80029da:	209f      	movs	r0, #159	; 0x9f
 80029dc:	f7ff ffe4 	bl	80029a8 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80029e0:	20a5      	movs	r0, #165	; 0xa5
 80029e2:	f7ff ffe1 	bl	80029a8 <W25qxx_Spi>
 80029e6:	4606      	mov	r6, r0
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80029e8:	20a5      	movs	r0, #165	; 0xa5
 80029ea:	f7ff ffdd 	bl	80029a8 <W25qxx_Spi>
 80029ee:	4604      	mov	r4, r0
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80029f0:	20a5      	movs	r0, #165	; 0xa5
 80029f2:	f7ff ffd9 	bl	80029a8 <W25qxx_Spi>
 80029f6:	4605      	mov	r5, r0
  FLASH_DESELECT;
 80029f8:	f000 fb32 	bl	8003060 <FLASH_ChipDeselect>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80029fc:	0220      	lsls	r0, r4, #8
 80029fe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
  return Temp;
}
 8002a02:	4328      	orrs	r0, r5
 8002a04:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a08 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002a08:	b510      	push	{r4, lr}
  FLASH_SELECT;
 8002a0a:	f000 fb17 	bl	800303c <FLASH_ChipSelect>
  W25qxx_Spi(0x4B);
 8002a0e:	204b      	movs	r0, #75	; 0x4b
 8002a10:	f7ff ffca 	bl	80029a8 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8002a14:	2400      	movs	r4, #0
 8002a16:	e004      	b.n	8002a22 <W25qxx_ReadUniqID+0x1a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002a18:	20a5      	movs	r0, #165	; 0xa5
 8002a1a:	f7ff ffc5 	bl	80029a8 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8002a1e:	3401      	adds	r4, #1
 8002a20:	b2e4      	uxtb	r4, r4
 8002a22:	2c03      	cmp	r4, #3
 8002a24:	d9f8      	bls.n	8002a18 <W25qxx_ReadUniqID+0x10>
	for(uint8_t	i=0;i<8;i++)
 8002a26:	2400      	movs	r4, #0
 8002a28:	e007      	b.n	8002a3a <W25qxx_ReadUniqID+0x32>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002a2a:	20a5      	movs	r0, #165	; 0xa5
 8002a2c:	f7ff ffbc 	bl	80029a8 <W25qxx_Spi>
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <W25qxx_ReadUniqID+0x3c>)
 8002a32:	4423      	add	r3, r4
 8002a34:	7058      	strb	r0, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8002a36:	3401      	adds	r4, #1
 8002a38:	b2e4      	uxtb	r4, r4
 8002a3a:	2c07      	cmp	r4, #7
 8002a3c:	d9f5      	bls.n	8002a2a <W25qxx_ReadUniqID+0x22>
  FLASH_DESELECT;
 8002a3e:	f000 fb0f 	bl	8003060 <FLASH_ChipDeselect>
}
 8002a42:	bd10      	pop	{r4, pc}
 8002a44:	20002b78 	.word	0x20002b78

08002a48 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8002a48:	b508      	push	{r3, lr}
  FLASH_SELECT;
 8002a4a:	f000 faf7 	bl	800303c <FLASH_ChipSelect>
  W25qxx_Spi(0x06);
 8002a4e:	2006      	movs	r0, #6
 8002a50:	f7ff ffaa 	bl	80029a8 <W25qxx_Spi>
  FLASH_DESELECT;
 8002a54:	f000 fb04 	bl	8003060 <FLASH_ChipDeselect>
	W25qxx_Delay(1);
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f006 fd3e 	bl	80094da <osDelay>
}
 8002a5e:	bd08      	pop	{r3, pc}

08002a60 <W25qxx_ReadStatusRegister>:
  FLASH_DESELECT;
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8002a60:	b510      	push	{r4, lr}
 8002a62:	4604      	mov	r4, r0
	uint8_t	status=0;
	FLASH_SELECT;
 8002a64:	f000 faea 	bl	800303c <FLASH_ChipSelect>
	if(SelectStatusRegister_1_2_3==1)
 8002a68:	2c01      	cmp	r4, #1
 8002a6a:	d00f      	beq.n	8002a8c <W25qxx_ReadStatusRegister+0x2c>
	{
		W25qxx_Spi(0x05);
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister1 = status;
	}
	else if(SelectStatusRegister_1_2_3==2)
 8002a6c:	2c02      	cmp	r4, #2
 8002a6e:	d018      	beq.n	8002aa2 <W25qxx_ReadStatusRegister+0x42>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister2 = status;
	}
	else
	{
		W25qxx_Spi(0x15);
 8002a70:	2015      	movs	r0, #21
 8002a72:	f7ff ff99 	bl	80029a8 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8002a76:	20a5      	movs	r0, #165	; 0xa5
 8002a78:	f7ff ff96 	bl	80029a8 <W25qxx_Spi>
 8002a7c:	4604      	mov	r4, r0
		w25qxx.StatusRegister3 = status;
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <W25qxx_ReadStatusRegister+0x58>)
 8002a80:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	}	
	FLASH_DESELECT;
 8002a84:	f000 faec 	bl	8003060 <FLASH_ChipDeselect>
	return status;
}
 8002a88:	4620      	mov	r0, r4
 8002a8a:	bd10      	pop	{r4, pc}
		W25qxx_Spi(0x05);
 8002a8c:	2005      	movs	r0, #5
 8002a8e:	f7ff ff8b 	bl	80029a8 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8002a92:	20a5      	movs	r0, #165	; 0xa5
 8002a94:	f7ff ff88 	bl	80029a8 <W25qxx_Spi>
 8002a98:	4604      	mov	r4, r0
		w25qxx.StatusRegister1 = status;
 8002a9a:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <W25qxx_ReadStatusRegister+0x58>)
 8002a9c:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
 8002aa0:	e7f0      	b.n	8002a84 <W25qxx_ReadStatusRegister+0x24>
		W25qxx_Spi(0x35);
 8002aa2:	2035      	movs	r0, #53	; 0x35
 8002aa4:	f7ff ff80 	bl	80029a8 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8002aa8:	20a5      	movs	r0, #165	; 0xa5
 8002aaa:	f7ff ff7d 	bl	80029a8 <W25qxx_Spi>
 8002aae:	4604      	mov	r4, r0
		w25qxx.StatusRegister2 = status;
 8002ab0:	4b01      	ldr	r3, [pc, #4]	; (8002ab8 <W25qxx_ReadStatusRegister+0x58>)
 8002ab2:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
 8002ab6:	e7e5      	b.n	8002a84 <W25qxx_ReadStatusRegister+0x24>
 8002ab8:	20002b78 	.word	0x20002b78

08002abc <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  FLASH_DESELECT;
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8002abc:	b510      	push	{r4, lr}
	W25qxx_Delay(1);
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f006 fd0b 	bl	80094da <osDelay>
	FLASH_SELECT;
 8002ac4:	f000 faba 	bl	800303c <FLASH_ChipSelect>
	W25qxx_Spi(0x05);
 8002ac8:	2005      	movs	r0, #5
 8002aca:	f7ff ff6d 	bl	80029a8 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002ace:	20a5      	movs	r0, #165	; 0xa5
 8002ad0:	f7ff ff6a 	bl	80029a8 <W25qxx_Spi>
 8002ad4:	4c06      	ldr	r4, [pc, #24]	; (8002af0 <W25qxx_WaitForWriteEnd+0x34>)
 8002ad6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
		W25qxx_Delay(10);
 8002ada:	200a      	movs	r0, #10
 8002adc:	f006 fcfd 	bl	80094da <osDelay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8002ae0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002ae4:	f013 0f01 	tst.w	r3, #1
 8002ae8:	d1f1      	bne.n	8002ace <W25qxx_WaitForWriteEnd+0x12>
 FLASH_DESELECT;
 8002aea:	f000 fab9 	bl	8003060 <FLASH_ChipDeselect>
}
 8002aee:	bd10      	pop	{r4, pc}
 8002af0:	20002b78 	.word	0x20002b78

08002af4 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8002af4:	b510      	push	{r4, lr}
	w25qxx.Lock=1;	
 8002af6:	4b42      	ldr	r3, [pc, #264]	; (8002c00 <W25qxx_Init+0x10c>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8002afe:	e002      	b.n	8002b06 <W25qxx_Init+0x12>
		W25qxx_Delay(1);
 8002b00:	2001      	movs	r0, #1
 8002b02:	f006 fcea 	bl	80094da <osDelay>
	while(HAL_GetTick()<100)
 8002b06:	f003 f831 	bl	8005b6c <HAL_GetTick>
 8002b0a:	2863      	cmp	r0, #99	; 0x63
 8002b0c:	d9f8      	bls.n	8002b00 <W25qxx_Init+0xc>
  FLASH_DESELECT;
 8002b0e:	f000 faa7 	bl	8003060 <FLASH_ChipDeselect>
  W25qxx_Delay(100);
 8002b12:	2064      	movs	r0, #100	; 0x64
 8002b14:	f006 fce1 	bl	80094da <osDelay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 8002b18:	f7ff ff5c 	bl	80029d4 <W25qxx_ReadID>
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8002b1c:	b280      	uxth	r0, r0
 8002b1e:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8002b22:	3811      	subs	r0, #17
 8002b24:	2809      	cmp	r0, #9
 8002b26:	d866      	bhi.n	8002bf6 <W25qxx_Init+0x102>
 8002b28:	e8df f000 	tbb	[pc, r0]
 8002b2c:	4d53595f 	.word	0x4d53595f
 8002b30:	343b4147 	.word	0x343b4147
 8002b34:	052d      	.short	0x052d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8002b36:	4b32      	ldr	r3, [pc, #200]	; (8002c00 <W25qxx_Init+0x10c>)
 8002b38:	220a      	movs	r2, #10
 8002b3a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8002b3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b40:	61da      	str	r2, [r3, #28]
				#endif
			w25qxx.Lock=0;	
			return false;
				
	}		
	w25qxx.PageSize=256;
 8002b42:	4c2f      	ldr	r4, [pc, #188]	; (8002c00 <W25qxx_Init+0x10c>)
 8002b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b48:	8163      	strh	r3, [r4, #10]
	w25qxx.SectorSize=0x1000;
 8002b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b4e:	6123      	str	r3, [r4, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8002b50:	69e3      	ldr	r3, [r4, #28]
 8002b52:	011a      	lsls	r2, r3, #4
 8002b54:	6162      	str	r2, [r4, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8002b56:	041b      	lsls	r3, r3, #16
 8002b58:	0a1a      	lsrs	r2, r3, #8
 8002b5a:	60e2      	str	r2, [r4, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8002b5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b60:	61a2      	str	r2, [r4, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8002b62:	0a9b      	lsrs	r3, r3, #10
 8002b64:	6223      	str	r3, [r4, #32]
	W25qxx_ReadUniqID();
 8002b66:	f7ff ff4f 	bl	8002a08 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f7ff ff78 	bl	8002a60 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002b70:	2002      	movs	r0, #2
 8002b72:	f7ff ff75 	bl	8002a60 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002b76:	2003      	movs	r0, #3
 8002b78:	f7ff ff72 	bl	8002a60 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return true;
 8002b82:	2001      	movs	r0, #1
}	
 8002b84:	bd10      	pop	{r4, pc}
			w25qxx.ID=W25Q256;
 8002b86:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <W25qxx_Init+0x10c>)
 8002b88:	2209      	movs	r2, #9
 8002b8a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8002b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b90:	61da      	str	r2, [r3, #28]
		break;
 8002b92:	e7d6      	b.n	8002b42 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q128;
 8002b94:	4b1a      	ldr	r3, [pc, #104]	; (8002c00 <W25qxx_Init+0x10c>)
 8002b96:	2208      	movs	r2, #8
 8002b98:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8002b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b9e:	61da      	str	r2, [r3, #28]
		break;
 8002ba0:	e7cf      	b.n	8002b42 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q64;
 8002ba2:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <W25qxx_Init+0x10c>)
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	61da      	str	r2, [r3, #28]
		break;
 8002bac:	e7c9      	b.n	8002b42 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q32;
 8002bae:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <W25qxx_Init+0x10c>)
 8002bb0:	2206      	movs	r2, #6
 8002bb2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8002bb4:	2240      	movs	r2, #64	; 0x40
 8002bb6:	61da      	str	r2, [r3, #28]
		break;
 8002bb8:	e7c3      	b.n	8002b42 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q16;
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <W25qxx_Init+0x10c>)
 8002bbc:	2205      	movs	r2, #5
 8002bbe:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	61da      	str	r2, [r3, #28]
		break;
 8002bc4:	e7bd      	b.n	8002b42 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q80;
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <W25qxx_Init+0x10c>)
 8002bc8:	2204      	movs	r2, #4
 8002bca:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8002bcc:	2210      	movs	r2, #16
 8002bce:	61da      	str	r2, [r3, #28]
		break;
 8002bd0:	e7b7      	b.n	8002b42 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q40;
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <W25qxx_Init+0x10c>)
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8002bd8:	2208      	movs	r2, #8
 8002bda:	61da      	str	r2, [r3, #28]
		break;
 8002bdc:	e7b1      	b.n	8002b42 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q20;
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <W25qxx_Init+0x10c>)
 8002be0:	2202      	movs	r2, #2
 8002be2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8002be4:	2204      	movs	r2, #4
 8002be6:	61da      	str	r2, [r3, #28]
		break;
 8002be8:	e7ab      	b.n	8002b42 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q10;
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <W25qxx_Init+0x10c>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	61da      	str	r2, [r3, #28]
		break;
 8002bf4:	e7a5      	b.n	8002b42 <W25qxx_Init+0x4e>
			w25qxx.Lock=0;	
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	4b01      	ldr	r3, [pc, #4]	; (8002c00 <W25qxx_Init+0x10c>)
 8002bfa:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
			return false;
 8002bfe:	e7c1      	b.n	8002b84 <W25qxx_Init+0x90>
 8002c00:	20002b78 	.word	0x20002b78

08002c04 <W25qxx_EraseChip>:
//###################################################################################################################
void	W25qxx_EraseChip(void)
{
 8002c04:	b510      	push	{r4, lr}
	while(w25qxx.Lock==1)
 8002c06:	e002      	b.n	8002c0e <W25qxx_EraseChip+0xa>
		W25qxx_Delay(1);
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f006 fc66 	bl	80094da <osDelay>
	while(w25qxx.Lock==1)
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <W25qxx_EraseChip+0x40>)
 8002c10:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d0f7      	beq.n	8002c08 <W25qxx_EraseChip+0x4>
	w25qxx.Lock=1;	
 8002c18:	4c0a      	ldr	r4, [pc, #40]	; (8002c44 <W25qxx_EraseChip+0x40>)
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseChip Begin...\r\n");
	#endif
	W25qxx_WriteEnable();
 8002c20:	f7ff ff12 	bl	8002a48 <W25qxx_WriteEnable>
	FLASH_SELECT;
 8002c24:	f000 fa0a 	bl	800303c <FLASH_ChipSelect>
  W25qxx_Spi(0xC7);
 8002c28:	20c7      	movs	r0, #199	; 0xc7
 8002c2a:	f7ff febd 	bl	80029a8 <W25qxx_Spi>
  FLASH_DESELECT;
 8002c2e:	f000 fa17 	bl	8003060 <FLASH_ChipDeselect>
	W25qxx_WaitForWriteEnd();
 8002c32:	f7ff ff43 	bl	8002abc <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms!\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(10);
 8002c36:	200a      	movs	r0, #10
 8002c38:	f006 fc4f 	bl	80094da <osDelay>
	w25qxx.Lock=0;	
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
 8002c42:	bd10      	pop	{r4, pc}
 8002c44:	20002b78 	.word	0x20002b78

08002c48 <W25qxx_WriteByte>:
	w25qxx.Lock=0;
	return false;
}
//###################################################################################################################
void W25qxx_WriteByte(uint8_t pBuffer, uint32_t WriteAddr_inBytes)
{
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	4606      	mov	r6, r0
 8002c4c:	460c      	mov	r4, r1
	while(w25qxx.Lock==1)
 8002c4e:	e002      	b.n	8002c56 <W25qxx_WriteByte+0xe>
		W25qxx_Delay(1);
 8002c50:	2001      	movs	r0, #1
 8002c52:	f006 fc42 	bl	80094da <osDelay>
	while(w25qxx.Lock==1)
 8002c56:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <W25qxx_WriteByte+0x70>)
 8002c58:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d0f7      	beq.n	8002c50 <W25qxx_WriteByte+0x8>
	w25qxx.Lock=1;
 8002c60:	4d15      	ldr	r5, [pc, #84]	; (8002cb8 <W25qxx_WriteByte+0x70>)
 8002c62:	2301      	movs	r3, #1
 8002c64:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx WriteByte 0x%02X at address %d begin...",pBuffer,WriteAddr_inBytes);
	#endif
	W25qxx_WaitForWriteEnd();
 8002c68:	f7ff ff28 	bl	8002abc <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 8002c6c:	f7ff feec 	bl	8002a48 <W25qxx_WriteEnable>
  FLASH_SELECT;
 8002c70:	f000 f9e4 	bl	800303c <FLASH_ChipSelect>
  W25qxx_Spi(0x02);
 8002c74:	2002      	movs	r0, #2
 8002c76:	f7ff fe97 	bl	80029a8 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8002c7a:	782b      	ldrb	r3, [r5, #0]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d816      	bhi.n	8002cae <W25qxx_WriteByte+0x66>
		W25qxx_Spi((WriteAddr_inBytes & 0xFF000000) >> 24);
  W25qxx_Spi((WriteAddr_inBytes & 0xFF0000) >> 16);
 8002c80:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8002c84:	f7ff fe90 	bl	80029a8 <W25qxx_Spi>
  W25qxx_Spi((WriteAddr_inBytes & 0xFF00) >> 8);
 8002c88:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8002c8c:	f7ff fe8c 	bl	80029a8 <W25qxx_Spi>
  W25qxx_Spi(WriteAddr_inBytes & 0xFF);
 8002c90:	b2e0      	uxtb	r0, r4
 8002c92:	f7ff fe89 	bl	80029a8 <W25qxx_Spi>
  W25qxx_Spi(pBuffer);
 8002c96:	4630      	mov	r0, r6
 8002c98:	f7ff fe86 	bl	80029a8 <W25qxx_Spi>
	FLASH_DESELECT;
 8002c9c:	f000 f9e0 	bl	8003060 <FLASH_ChipDeselect>
  W25qxx_WaitForWriteEnd();
 8002ca0:	f7ff ff0c 	bl	8002abc <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WriteByte done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	w25qxx.Lock=0;
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <W25qxx_WriteByte+0x70>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002cac:	bd70      	pop	{r4, r5, r6, pc}
		W25qxx_Spi((WriteAddr_inBytes & 0xFF000000) >> 24);
 8002cae:	0e20      	lsrs	r0, r4, #24
 8002cb0:	f7ff fe7a 	bl	80029a8 <W25qxx_Spi>
 8002cb4:	e7e4      	b.n	8002c80 <W25qxx_WriteByte+0x38>
 8002cb6:	bf00      	nop
 8002cb8:	20002b78 	.word	0x20002b78

08002cbc <W25qxx_ReadBytes>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	4606      	mov	r6, r0
 8002cc0:	460c      	mov	r4, r1
 8002cc2:	4617      	mov	r7, r2
	while(w25qxx.Lock==1)
 8002cc4:	e002      	b.n	8002ccc <W25qxx_ReadBytes+0x10>
		W25qxx_Delay(1);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f006 fc07 	bl	80094da <osDelay>
	while(w25qxx.Lock==1)
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <W25qxx_ReadBytes+0x78>)
 8002cce:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d0f7      	beq.n	8002cc6 <W25qxx_ReadBytes+0xa>
	w25qxx.Lock=1;
 8002cd6:	4d17      	ldr	r5, [pc, #92]	; (8002d34 <W25qxx_ReadBytes+0x78>)
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
	#endif	
	FLASH_SELECT;
 8002cde:	f000 f9ad 	bl	800303c <FLASH_ChipSelect>
	W25qxx_Spi(0x0B);
 8002ce2:	200b      	movs	r0, #11
 8002ce4:	f7ff fe60 	bl	80029a8 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8002ce8:	782b      	ldrb	r3, [r5, #0]
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d81e      	bhi.n	8002d2c <W25qxx_ReadBytes+0x70>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8002cee:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8002cf2:	f7ff fe59 	bl	80029a8 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8002cf6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8002cfa:	f7ff fe55 	bl	80029a8 <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 8002cfe:	b2e0      	uxtb	r0, r4
 8002d00:	f7ff fe52 	bl	80029a8 <W25qxx_Spi>
	W25qxx_Spi(0);
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7ff fe4f 	bl	80029a8 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 8002d0a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002d0e:	b2ba      	uxth	r2, r7
 8002d10:	4631      	mov	r1, r6
 8002d12:	4809      	ldr	r0, [pc, #36]	; (8002d38 <W25qxx_ReadBytes+0x7c>)
 8002d14:	f005 fb90 	bl	8008438 <HAL_SPI_Receive>
	FLASH_DESELECT;
 8002d18:	f000 f9a2 	bl	8003060 <FLASH_ChipDeselect>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f006 fbdc 	bl	80094da <osDelay>
	w25qxx.Lock=0;
 8002d22:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <W25qxx_ReadBytes+0x78>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8002d2c:	0e20      	lsrs	r0, r4, #24
 8002d2e:	f7ff fe3b 	bl	80029a8 <W25qxx_Spi>
 8002d32:	e7dc      	b.n	8002cee <W25qxx_ReadBytes+0x32>
 8002d34:	20002b78 	.word	0x20002b78
 8002d38:	200032f0 	.word	0x200032f0

08002d3c <vModbusInit>:
 * @param modbus Pointer for modbus configuration structure
 * @param port Pointer for HAL Uart structure
 * @param timeout Request timeout
 */
void vModbusInit (ModbusHandler *modbus, UART_HandleTypeDef *port, TickType_t timeout){
	modbus -> ModbusSerialPort = port;
 8002d3c:	6001      	str	r1, [r0, #0]
	modbus -> timeout_t = timeout / portTICK_PERIOD_MS;
 8002d3e:	6042      	str	r2, [r0, #4]
}
 8002d40:	4770      	bx	lr

08002d42 <uModbusCalculateCRC>:
 * @brief Calculates CRC of given frame
 * @param frame_length Length of frame
 * @param frame Pointer to frame to calculate CRC.
 * @return Calculated CRC
 */
uint16_t uModbusCalculateCRC (uint8_t frame_length, uint8_t *frame){
 8002d42:	b430      	push	{r4, r5}
	uint16_t calculatedCRC = 0xFFFF;
	uint16_t CRChigh, CRClow;
	for(int i = 0; i < frame_length; i++){
 8002d44:	2500      	movs	r5, #0
	uint16_t calculatedCRC = 0xFFFF;
 8002d46:	f64f 73ff 	movw	r3, #65535	; 0xffff
	for(int i = 0; i < frame_length; i++){
 8002d4a:	e00d      	b.n	8002d68 <uModbusCalculateCRC+0x26>
		for(int j = 8; j > 0; j--){
			if(calculatedCRC & 0x0001){
				calculatedCRC >>= 1;
				calculatedCRC ^= 0xA001;
			}else{
				calculatedCRC >>= 1;
 8002d4c:	085b      	lsrs	r3, r3, #1
		for(int j = 8; j > 0; j--){
 8002d4e:	3a01      	subs	r2, #1
 8002d50:	2a00      	cmp	r2, #0
 8002d52:	dd07      	ble.n	8002d64 <uModbusCalculateCRC+0x22>
			if(calculatedCRC & 0x0001){
 8002d54:	f013 0f01 	tst.w	r3, #1
 8002d58:	d0f8      	beq.n	8002d4c <uModbusCalculateCRC+0xa>
				calculatedCRC ^= 0xA001;
 8002d5a:	f24a 0401 	movw	r4, #40961	; 0xa001
 8002d5e:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
 8002d62:	e7f4      	b.n	8002d4e <uModbusCalculateCRC+0xc>
			}
		}
		frame++;
 8002d64:	3101      	adds	r1, #1
	for(int i = 0; i < frame_length; i++){
 8002d66:	3501      	adds	r5, #1
 8002d68:	42a8      	cmp	r0, r5
 8002d6a:	dd03      	ble.n	8002d74 <uModbusCalculateCRC+0x32>
		calculatedCRC ^= (*frame);
 8002d6c:	780a      	ldrb	r2, [r1, #0]
 8002d6e:	4053      	eors	r3, r2
		for(int j = 8; j > 0; j--){
 8002d70:	2208      	movs	r2, #8
 8002d72:	e7ed      	b.n	8002d50 <uModbusCalculateCRC+0xe>
	}

	CRChigh = (calculatedCRC & 0x00FF) <<8;
 8002d74:	0218      	lsls	r0, r3, #8
 8002d76:	b280      	uxth	r0, r0
	CRClow = (calculatedCRC & 0xFF00) >>8;
	calculatedCRC = CRChigh + CRClow;
 8002d78:	eb00 2013 	add.w	r0, r0, r3, lsr #8

	return calculatedCRC;
}
 8002d7c:	b280      	uxth	r0, r0
 8002d7e:	bc30      	pop	{r4, r5}
 8002d80:	4770      	bx	lr

08002d82 <bModbusCheckCRC>:
 * @brief Checks if CRC form given frame is correct.
 * @param frame_length Length of frame (with CRC).
 * @param frame Pointer to frame to check.
 * @return Returns 0 if CRC is incorrect, else, 1.
 */
uint8_t bModbusCheckCRC (uint8_t frame_length, uint8_t *frame){
 8002d82:	b570      	push	{r4, r5, r6, lr}
 8002d84:	4604      	mov	r4, r0
 8002d86:	460d      	mov	r5, r1
	uint16_t crc = uModbusCalculateCRC(frame_length - 2, frame);
 8002d88:	1e86      	subs	r6, r0, #2
 8002d8a:	b2f0      	uxtb	r0, r6
 8002d8c:	f7ff ffd9 	bl	8002d42 <uModbusCalculateCRC>
	uint16_t frameCRC = (uint16_t)(*(frame + frame_length - 2));
 8002d90:	5daa      	ldrb	r2, [r5, r6]
	frameCRC <<= 8;
	frameCRC += *(frame + frame_length - 1);
 8002d92:	3c01      	subs	r4, #1
 8002d94:	5d2b      	ldrb	r3, [r5, r4]
 8002d96:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002d9a:	b29b      	uxth	r3, r3

	if(crc == frameCRC){
 8002d9c:	4298      	cmp	r0, r3
 8002d9e:	d001      	beq.n	8002da4 <bModbusCheckCRC+0x22>
		return 1;
	}

	return 0;
 8002da0:	2000      	movs	r0, #0
}
 8002da2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8002da4:	2001      	movs	r0, #1
 8002da6:	e7fc      	b.n	8002da2 <bModbusCheckCRC+0x20>

08002da8 <vModbusReadInputRegisters>:
	}
	RuntimeStats_ModbusMasterWrongRespInc();
	return Modbus_CRCERR;
}

ModbusState_t vModbusReadInputRegisters (ModbusHandler *modbus, uint8_t slave_address, uint16_t first_register_address, uint16_t registers_count, uint8_t *response_frame){
 8002da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4606      	mov	r6, r0
 8002db2:	4689      	mov	r9, r1
 8002db4:	f8d7 8030 	ldr.w	r8, [r7, #48]	; 0x30
	uint8_t transmit_frame_buffer[8];
	uint16_t transmitCRC;
	uint8_t received_frame_length = (registers_count * 2) + 5;
 8002db8:	fa5f fe83 	uxtb.w	lr, r3
 8002dbc:	ea4f 054e 	mov.w	r5, lr, lsl #1
 8002dc0:	b2ed      	uxtb	r5, r5
 8002dc2:	3505      	adds	r5, #5
 8002dc4:	b2ed      	uxtb	r5, r5
	uint8_t received_frame_buffer[received_frame_length];
 8002dc6:	46ac      	mov	ip, r5
 8002dc8:	1de9      	adds	r1, r5, #7
 8002dca:	f401 71fc 	and.w	r1, r1, #504	; 0x1f8
 8002dce:	ebad 0d01 	sub.w	sp, sp, r1
 8002dd2:	466c      	mov	r4, sp
	uint32_t ulNotificationValue;
	for(int i = 0; i < received_frame_length; i++){
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	e002      	b.n	8002dde <vModbusReadInputRegisters+0x36>
		received_frame_buffer[i] = 0;
 8002dd8:	2000      	movs	r0, #0
 8002dda:	5460      	strb	r0, [r4, r1]
	for(int i = 0; i < received_frame_length; i++){
 8002ddc:	3101      	adds	r1, #1
 8002dde:	458c      	cmp	ip, r1
 8002de0:	dcfa      	bgt.n	8002dd8 <vModbusReadInputRegisters+0x30>

	}
	transmit_frame_buffer[0] = slave_address;
 8002de2:	f887 9000 	strb.w	r9, [r7]
	transmit_frame_buffer[1] = 0x04;
 8002de6:	2104      	movs	r1, #4
 8002de8:	7079      	strb	r1, [r7, #1]
	transmit_frame_buffer[2] = (uint8_t)(first_register_address >> 8);
 8002dea:	0a11      	lsrs	r1, r2, #8
 8002dec:	70b9      	strb	r1, [r7, #2]
	transmit_frame_buffer[3] = (uint8_t)first_register_address;
 8002dee:	70fa      	strb	r2, [r7, #3]
	transmit_frame_buffer[4] = (uint8_t)(registers_count >> 8);
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	713b      	strb	r3, [r7, #4]
	transmit_frame_buffer[5] = (uint8_t)(registers_count);
 8002df4:	f887 e005 	strb.w	lr, [r7, #5]
	transmitCRC = uModbusCalculateCRC (6, transmit_frame_buffer);
 8002df8:	4639      	mov	r1, r7
 8002dfa:	2006      	movs	r0, #6
 8002dfc:	f7ff ffa1 	bl	8002d42 <uModbusCalculateCRC>
	transmit_frame_buffer[6] = (transmitCRC >> 8);
 8002e00:	0a03      	lsrs	r3, r0, #8
 8002e02:	71bb      	strb	r3, [r7, #6]
	transmit_frame_buffer[7] = (uint8_t)(transmitCRC);
 8002e04:	71f8      	strb	r0, [r7, #7]

	//Wy�lij dane;
	HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_SET);
 8002e06:	2201      	movs	r2, #1
 8002e08:	2102      	movs	r1, #2
 8002e0a:	482d      	ldr	r0, [pc, #180]	; (8002ec0 <vModbusReadInputRegisters+0x118>)
 8002e0c:	f003 fc0d 	bl	800662a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 8002e10:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8002ec4 <vModbusReadInputRegisters+0x11c>
 8002e14:	2200      	movs	r2, #0
 8002e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e1a:	4650      	mov	r0, sl
 8002e1c:	f003 fc05 	bl	800662a <HAL_GPIO_WritePin>
	RuntimeStats_ModbusMasterRqSendInc();
 8002e20:	f000 f8d4 	bl	8002fcc <RuntimeStats_ModbusMasterRqSendInc>
	HAL_UART_Transmit_IT(modbus -> ModbusSerialPort, transmit_frame_buffer, 8);
 8002e24:	2208      	movs	r2, #8
 8002e26:	4639      	mov	r1, r7
 8002e28:	6830      	ldr	r0, [r6, #0]
 8002e2a:	f006 f8ec 	bl	8009006 <HAL_UART_Transmit_IT>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 8002e2e:	6871      	ldr	r1, [r6, #4]
 8002e30:	2001      	movs	r0, #1
 8002e32:	f008 f827 	bl	800ae84 <ulTaskNotifyTake>
	HAL_UART_Receive_DMA(modbus -> ModbusSerialPort, received_frame_buffer, received_frame_length);
 8002e36:	462a      	mov	r2, r5
 8002e38:	4621      	mov	r1, r4
 8002e3a:	6830      	ldr	r0, [r6, #0]
 8002e3c:	f006 f908 	bl	8009050 <HAL_UART_Receive_DMA>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 8002e40:	6871      	ldr	r1, [r6, #4]
 8002e42:	2001      	movs	r0, #1
 8002e44:	f008 f81e 	bl	800ae84 <ulTaskNotifyTake>
 8002e48:	4683      	mov	fp, r0
	vTaskDelay(1);
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f007 fc0a 	bl	800a664 <vTaskDelay>
	HAL_UART_AbortTransmit(modbus -> ModbusSerialPort);
 8002e50:	6830      	ldr	r0, [r6, #0]
 8002e52:	f006 f951 	bl	80090f8 <HAL_UART_AbortTransmit>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 8002e56:	2201      	movs	r2, #1
 8002e58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e5c:	4650      	mov	r0, sl
 8002e5e:	f003 fbe4 	bl	800662a <HAL_GPIO_WritePin>
	if(ulNotificationValue){
 8002e62:	f1bb 0f00 	cmp.w	fp, #0
 8002e66:	d024      	beq.n	8002eb2 <vModbusReadInputRegisters+0x10a>
		if(bModbusCheckCRC(received_frame_length, received_frame_buffer)){
 8002e68:	4621      	mov	r1, r4
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	f7ff ff89 	bl	8002d82 <bModbusCheckCRC>
 8002e70:	b1d8      	cbz	r0, 8002eaa <vModbusReadInputRegisters+0x102>
			if(received_frame_buffer[0] == slave_address && received_frame_buffer[1] == 0x04){
 8002e72:	7823      	ldrb	r3, [r4, #0]
 8002e74:	454b      	cmp	r3, r9
 8002e76:	d111      	bne.n	8002e9c <vModbusReadInputRegisters+0xf4>
 8002e78:	7863      	ldrb	r3, [r4, #1]
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d10e      	bne.n	8002e9c <vModbusReadInputRegisters+0xf4>
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 8002e7e:	2200      	movs	r2, #0
 8002e80:	78a3      	ldrb	r3, [r4, #2]
 8002e82:	3302      	adds	r3, #2
 8002e84:	429a      	cmp	r2, r3
 8002e86:	da05      	bge.n	8002e94 <vModbusReadInputRegisters+0xec>
					*response_frame = received_frame_buffer[i + 3];
 8002e88:	1cd3      	adds	r3, r2, #3
 8002e8a:	5ce3      	ldrb	r3, [r4, r3]
 8002e8c:	f808 3b01 	strb.w	r3, [r8], #1
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 8002e90:	3201      	adds	r2, #1
 8002e92:	e7f5      	b.n	8002e80 <vModbusReadInputRegisters+0xd8>
					response_frame++;
				}
				RuntimeStats_ModbusMasterRespOkInc();
 8002e94:	f000 f8aa 	bl	8002fec <RuntimeStats_ModbusMasterRespOkInc>
				return Modbus_OK;
 8002e98:	2000      	movs	r0, #0
 8002e9a:	e002      	b.n	8002ea2 <vModbusReadInputRegisters+0xfa>
			}
			RuntimeStats_ModbusMasterWrongRespInc();
 8002e9c:	f000 f8ae 	bl	8002ffc <RuntimeStats_ModbusMasterWrongRespInc>
			return Modbus_CRCERR;
 8002ea0:	2002      	movs	r0, #2
		RuntimeStats_ModbusMasterNoRespInc();
		return Modbus_TIMEOUT;
	}
	RuntimeStats_ModbusMasterWrongRespInc();
	return Modbus_CRCERR;
}
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		RuntimeStats_ModbusMasterWrongRespInc();
 8002eaa:	f000 f8a7 	bl	8002ffc <RuntimeStats_ModbusMasterWrongRespInc>
		return Modbus_CRCERR;
 8002eae:	2002      	movs	r0, #2
 8002eb0:	e7f7      	b.n	8002ea2 <vModbusReadInputRegisters+0xfa>
		HAL_UART_AbortReceive_IT(modbus -> ModbusSerialPort);
 8002eb2:	6830      	ldr	r0, [r6, #0]
 8002eb4:	f006 fa92 	bl	80093dc <HAL_UART_AbortReceive_IT>
		RuntimeStats_ModbusMasterNoRespInc();
 8002eb8:	f000 f890 	bl	8002fdc <RuntimeStats_ModbusMasterNoRespInc>
		return Modbus_TIMEOUT;
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	e7f0      	b.n	8002ea2 <vModbusReadInputRegisters+0xfa>
 8002ec0:	40020000 	.word	0x40020000
 8002ec4:	40020800 	.word	0x40020800

08002ec8 <vModbusReceieveResponseCallback>:
	}
	RuntimeStats_ModbusMasterWrongRespInc();
	return Modbus_CRCERR;
}

void vModbusReceieveResponseCallback (ModbusHandler *modbus){
 8002ec8:	b510      	push	{r4, lr}
 8002eca:	4604      	mov	r4, r0
	vTaskNotifyGiveFromISR(modbus -> task, NULL);
 8002ecc:	2100      	movs	r1, #0
 8002ece:	6880      	ldr	r0, [r0, #8]
 8002ed0:	f008 f8fc 	bl	800b0cc <vTaskNotifyGiveFromISR>
	HAL_UART_AbortReceive_IT(modbus -> ModbusSerialPort);
 8002ed4:	6820      	ldr	r0, [r4, #0]
 8002ed6:	f006 fa81 	bl	80093dc <HAL_UART_AbortReceive_IT>
}
 8002eda:	bd10      	pop	{r4, pc}

08002edc <RB_CreateBuffer>:

RB_Status RB_CreateBuffer(RingBuffer *Buffer, uint8_t Size)
{
	//*Buffer = malloc(sizeof(RingBuffer) + (sizeof(uint8_t) * Size));

	if(Buffer == NULL)
 8002edc:	4603      	mov	r3, r0
 8002ede:	b130      	cbz	r0, 8002eee <RB_CreateBuffer+0x12>
	{
		return RB_NOTCREATED;
	}

	(Buffer)->Size = 32;
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	7002      	strb	r2, [r0, #0]
	(Buffer)->Head = 0;
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	7058      	strb	r0, [r3, #1]
	(Buffer)->Tail = 0;
 8002ee8:	7098      	strb	r0, [r3, #2]
	(Buffer)->Elements = 0;
 8002eea:	70d8      	strb	r0, [r3, #3]

	return RB_OK;
 8002eec:	4770      	bx	lr
		return RB_NOTCREATED;
 8002eee:	2002      	movs	r0, #2
}
 8002ef0:	4770      	bx	lr

08002ef2 <RB_WriteToBuffer>:

RB_Status RB_WriteToBuffer(RingBuffer *Buffer, uint8_t Data)
{
 8002ef2:	b430      	push	{r4, r5}
	uint8_t TempHead;

	TempHead = (Buffer->Head + 1) % Buffer->Size;
 8002ef4:	7843      	ldrb	r3, [r0, #1]
 8002ef6:	1c5d      	adds	r5, r3, #1
 8002ef8:	7804      	ldrb	r4, [r0, #0]
 8002efa:	fb95 f2f4 	sdiv	r2, r5, r4
 8002efe:	fb04 5212 	mls	r2, r4, r2, r5
 8002f02:	b2d2      	uxtb	r2, r2

	if( TempHead == Buffer->Tail) // No room for new data
 8002f04:	7885      	ldrb	r5, [r0, #2]
 8002f06:	4295      	cmp	r5, r2
 8002f08:	d00e      	beq.n	8002f28 <RB_WriteToBuffer+0x36>
	{
		return RB_NOFREESPACE;
	}
	else
	{
		Buffer->Buffer[Buffer->Head] = Data;
 8002f0a:	18c2      	adds	r2, r0, r3
 8002f0c:	7111      	strb	r1, [r2, #4]

		Buffer->Head++;
 8002f0e:	3301      	adds	r3, #1
 8002f10:	b2db      	uxtb	r3, r3
		Buffer->Head %= Buffer->Size;
 8002f12:	fbb3 f2f4 	udiv	r2, r3, r4
 8002f16:	fb04 3312 	mls	r3, r4, r2, r3
 8002f1a:	7043      	strb	r3, [r0, #1]

		Buffer->Elements++;
 8002f1c:	78c3      	ldrb	r3, [r0, #3]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	70c3      	strb	r3, [r0, #3]
	}

	return RB_OK;
 8002f22:	2000      	movs	r0, #0
}
 8002f24:	bc30      	pop	{r4, r5}
 8002f26:	4770      	bx	lr
		return RB_NOFREESPACE;
 8002f28:	2003      	movs	r0, #3
 8002f2a:	e7fb      	b.n	8002f24 <RB_WriteToBuffer+0x32>

08002f2c <RB_ReadFromBuffer>:

RB_Status RB_ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
	if( Buffer->Tail == Buffer->Head) // No data to read
 8002f2c:	7883      	ldrb	r3, [r0, #2]
 8002f2e:	7842      	ldrb	r2, [r0, #1]
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d010      	beq.n	8002f56 <RB_ReadFromBuffer+0x2a>
	{
		return RB_NOELEMENTS;
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 8002f34:	4403      	add	r3, r0
 8002f36:	791b      	ldrb	r3, [r3, #4]
 8002f38:	700b      	strb	r3, [r1, #0]

		Buffer->Tail++;
 8002f3a:	7883      	ldrb	r3, [r0, #2]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	b2db      	uxtb	r3, r3
		Buffer->Tail %= Buffer->Size;
 8002f40:	7801      	ldrb	r1, [r0, #0]
 8002f42:	fbb3 f2f1 	udiv	r2, r3, r1
 8002f46:	fb01 3312 	mls	r3, r1, r2, r3
 8002f4a:	7083      	strb	r3, [r0, #2]

		Buffer->Elements--;
 8002f4c:	78c3      	ldrb	r3, [r0, #3]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	70c3      	strb	r3, [r0, #3]
	}
	return RB_OK;
 8002f52:	2000      	movs	r0, #0
 8002f54:	4770      	bx	lr
		return RB_NOELEMENTS;
 8002f56:	2004      	movs	r0, #4
}
 8002f58:	4770      	bx	lr

08002f5a <RB_ElementsAvailable>:

uint8_t RB_ElementsAvailable(RingBuffer *Buffer)
{
	return Buffer->Elements;
}
 8002f5a:	78c0      	ldrb	r0, [r0, #3]
 8002f5c:	4770      	bx	lr
	...

08002f60 <RuntimeStats_TelnetRxInc>:
void RuntimeStats_Init(void){
	memset(&commStats, 0, 48);
}

void RuntimeStats_TelnetRxInc (void){
	commStats.telnetStats.rxFrames++;
 8002f60:	4a02      	ldr	r2, [pc, #8]	; (8002f6c <RuntimeStats_TelnetRxInc+0xc>)
 8002f62:	6813      	ldr	r3, [r2, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	6013      	str	r3, [r2, #0]
}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20002ba0 	.word	0x20002ba0

08002f70 <RuntimeStats_TelnetTxInc>:

void RuntimeStats_TelnetTxInc (void){
	commStats.telnetStats.txFrames++;
 8002f70:	4a02      	ldr	r2, [pc, #8]	; (8002f7c <RuntimeStats_TelnetTxInc+0xc>)
 8002f72:	6853      	ldr	r3, [r2, #4]
 8002f74:	3301      	adds	r3, #1
 8002f76:	6053      	str	r3, [r2, #4]
}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20002ba0 	.word	0x20002ba0

08002f80 <RuntimeStats_TelnetCurrIPSet>:

void RuntimeStats_TelnetCurrIPSet (uint8_t* ip){
	memcpy(&(commStats.telnetStats.currIP), ip, 4);
 8002f80:	6802      	ldr	r2, [r0, #0]
 8002f82:	4b01      	ldr	r3, [pc, #4]	; (8002f88 <RuntimeStats_TelnetCurrIPSet+0x8>)
 8002f84:	609a      	str	r2, [r3, #8]
}
 8002f86:	4770      	bx	lr
 8002f88:	20002ba0 	.word	0x20002ba0

08002f8c <RuntimeStats_TelnetLastIPSet>:

void RuntimeStats_TelnetLastIPSet (void){
	memcpy(&(commStats.telnetStats.lastIP), &(commStats.telnetStats.currIP), 4);
 8002f8c:	4b02      	ldr	r3, [pc, #8]	; (8002f98 <RuntimeStats_TelnetLastIPSet+0xc>)
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
	memset(&(commStats.telnetStats.currIP), 0, 4);
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
}
 8002f96:	4770      	bx	lr
 8002f98:	20002ba0 	.word	0x20002ba0

08002f9c <RuntimeStats_TelnetGetRxCnt>:

uint32_t RuntimeStats_TelnetGetRxCnt (void){
	return commStats.telnetStats.rxFrames;
}
 8002f9c:	4b01      	ldr	r3, [pc, #4]	; (8002fa4 <RuntimeStats_TelnetGetRxCnt+0x8>)
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20002ba0 	.word	0x20002ba0

08002fa8 <RuntimeStats_TelnetGetTxCnt>:

uint32_t RuntimeStats_TelnetGetTxCnt (void){
	return commStats.telnetStats.txFrames;
}
 8002fa8:	4b01      	ldr	r3, [pc, #4]	; (8002fb0 <RuntimeStats_TelnetGetTxCnt+0x8>)
 8002faa:	6858      	ldr	r0, [r3, #4]
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20002ba0 	.word	0x20002ba0

08002fb4 <RuntimeStats_TelnetGetCurIP>:

void RuntimeStats_TelnetGetCurIP (uint8_t* ip){
	memcpy(ip, &(commStats.telnetStats.currIP), 4);
 8002fb4:	4b01      	ldr	r3, [pc, #4]	; (8002fbc <RuntimeStats_TelnetGetCurIP+0x8>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	6003      	str	r3, [r0, #0]
}
 8002fba:	4770      	bx	lr
 8002fbc:	20002ba0 	.word	0x20002ba0

08002fc0 <RuntimeStats_TelnetGetLastIP>:

void RuntimeStats_TelnetGetLastIP (uint8_t* ip){
	memcpy(ip, &(commStats.telnetStats.lastIP), 4);
 8002fc0:	4b01      	ldr	r3, [pc, #4]	; (8002fc8 <RuntimeStats_TelnetGetLastIP+0x8>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	6003      	str	r3, [r0, #0]
}
 8002fc6:	4770      	bx	lr
 8002fc8:	20002ba0 	.word	0x20002ba0

08002fcc <RuntimeStats_ModbusMasterRqSendInc>:

void RuntimeStats_ModbusMasterRqSendInc (void){
	commStats.mdMAsterStats.rqSend ++;
 8002fcc:	4a02      	ldr	r2, [pc, #8]	; (8002fd8 <RuntimeStats_ModbusMasterRqSendInc+0xc>)
 8002fce:	6a13      	ldr	r3, [r2, #32]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	6213      	str	r3, [r2, #32]
}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20002ba0 	.word	0x20002ba0

08002fdc <RuntimeStats_ModbusMasterNoRespInc>:

void RuntimeStats_ModbusMasterNoRespInc (void){
	commStats.mdMAsterStats.noResp ++;
 8002fdc:	4a02      	ldr	r2, [pc, #8]	; (8002fe8 <RuntimeStats_ModbusMasterNoRespInc+0xc>)
 8002fde:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20002ba0 	.word	0x20002ba0

08002fec <RuntimeStats_ModbusMasterRespOkInc>:

void RuntimeStats_ModbusMasterRespOkInc (void){
	commStats.mdMAsterStats.respOk ++;
 8002fec:	4a02      	ldr	r2, [pc, #8]	; (8002ff8 <RuntimeStats_ModbusMasterRespOkInc+0xc>)
 8002fee:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20002ba0 	.word	0x20002ba0

08002ffc <RuntimeStats_ModbusMasterWrongRespInc>:

void RuntimeStats_ModbusMasterWrongRespInc (void){
	commStats.mdMAsterStats.wrongRq ++;
 8002ffc:	4a02      	ldr	r2, [pc, #8]	; (8003008 <RuntimeStats_ModbusMasterWrongRespInc+0xc>)
 8002ffe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003000:	3301      	adds	r3, #1
 8003002:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20002ba0 	.word	0x20002ba0

0800300c <RuntimeStats_ModbusMasterRqSendGet>:

uint32_t RuntimeStats_ModbusMasterRqSendGet (void){
	return commStats.mdMAsterStats.rqSend;
}
 800300c:	4b01      	ldr	r3, [pc, #4]	; (8003014 <RuntimeStats_ModbusMasterRqSendGet+0x8>)
 800300e:	6a18      	ldr	r0, [r3, #32]
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20002ba0 	.word	0x20002ba0

08003018 <RuntimeStats_ModbusMasterNoRespGet>:

uint32_t RuntimeStats_ModbusMasterNoRespGet (void){
	return commStats.mdMAsterStats.noResp;
}
 8003018:	4b01      	ldr	r3, [pc, #4]	; (8003020 <RuntimeStats_ModbusMasterNoRespGet+0x8>)
 800301a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	20002ba0 	.word	0x20002ba0

08003024 <RuntimeStats_ModbusMasterRespOkGet>:

uint32_t RuntimeStats_ModbusMasterRespOkGet (void){
	return commStats.mdMAsterStats.respOk;
}
 8003024:	4b01      	ldr	r3, [pc, #4]	; (800302c <RuntimeStats_ModbusMasterRespOkGet+0x8>)
 8003026:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20002ba0 	.word	0x20002ba0

08003030 <RuntimeStats_ModbusMasterWrongRespGet>:

uint32_t RuntimeStats_ModbusMasterWrongRespGet (void){
	return commStats.mdMAsterStats.wrongRq;
}
 8003030:	4b01      	ldr	r3, [pc, #4]	; (8003038 <RuntimeStats_ModbusMasterWrongRespGet+0x8>)
 8003032:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20002ba0 	.word	0x20002ba0

0800303c <FLASH_ChipSelect>:
extern osMutexId SPIMutexHandle;
extern osMessageQId DataLogQueueHandle;

static DataLogEvent_t event;

void FLASH_ChipSelect (void){
 800303c:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 800303e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <FLASH_ChipSelect+0x1c>)
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	f006 fe3d 	bl	8009cc4 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 800304a:	2200      	movs	r2, #0
 800304c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003050:	4802      	ldr	r0, [pc, #8]	; (800305c <FLASH_ChipSelect+0x20>)
 8003052:	f003 faea 	bl	800662a <HAL_GPIO_WritePin>
}
 8003056:	bd08      	pop	{r3, pc}
 8003058:	200033d0 	.word	0x200033d0
 800305c:	40020400 	.word	0x40020400

08003060 <FLASH_ChipDeselect>:

void FLASH_ChipDeselect (void){
 8003060:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8003062:	2201      	movs	r2, #1
 8003064:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003068:	4805      	ldr	r0, [pc, #20]	; (8003080 <FLASH_ChipDeselect+0x20>)
 800306a:	f003 fade 	bl	800662a <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 800306e:	2300      	movs	r3, #0
 8003070:	461a      	mov	r2, r3
 8003072:	4619      	mov	r1, r3
 8003074:	4803      	ldr	r0, [pc, #12]	; (8003084 <FLASH_ChipDeselect+0x24>)
 8003076:	6800      	ldr	r0, [r0, #0]
 8003078:	f006 fc2e 	bl	80098d8 <xQueueGenericSend>
}
 800307c:	bd08      	pop	{r3, pc}
 800307e:	bf00      	nop
 8003080:	40020400 	.word	0x40020400
 8003084:	200033d0 	.word	0x200033d0

08003088 <DataLogTask>:

void DataLogTask(void const * argument)
{
 8003088:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DataLog */
	if(DataLog_Init() != DL_OK){
 800308a:	f7ff fc07 	bl	800289c <DataLog_Init>
 800308e:	b110      	cbz	r0, 8003096 <DataLogTask+0xe>
		vTaskSuspend(NULL);
 8003090:	2000      	movs	r0, #0
 8003092:	f007 fb6b 	bl	800a76c <vTaskSuspend>
	}
  /* Infinite loop */
	for(;;)
	{
		if(pdPASS == xQueueReceive(DataLogQueueHandle, &event, portMAX_DELAY)){
 8003096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800309a:	4905      	ldr	r1, [pc, #20]	; (80030b0 <DataLogTask+0x28>)
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <DataLogTask+0x2c>)
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	f006 fd64 	bl	8009b6c <xQueueReceive>
 80030a4:	2801      	cmp	r0, #1
 80030a6:	d1f6      	bne.n	8003096 <DataLogTask+0xe>
			DataLog_SaveEvent(&event);
 80030a8:	4801      	ldr	r0, [pc, #4]	; (80030b0 <DataLogTask+0x28>)
 80030aa:	f7ff fc15 	bl	80028d8 <DataLog_SaveEvent>
 80030ae:	e7f2      	b.n	8003096 <DataLogTask+0xe>
 80030b0:	20000194 	.word	0x20000194
 80030b4:	2000324c 	.word	0x2000324c

080030b8 <nextion_SendData>:
static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3);
static void nextion_SendConfig(UART_HandleTypeDef* uart);
void NextionBig_DataRcv (void);
void NextionSmall_DataRcv (void);

static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3){
 80030b8:	b530      	push	{r4, r5, lr}
 80030ba:	b08d      	sub	sp, #52	; 0x34
	char buffor_to_send[40];
	uint8_t buffor_to_send_size;
	current_command = cmd;
 80030bc:	4c28      	ldr	r4, [pc, #160]	; (8003160 <nextion_SendData+0xa8>)
 80030be:	7021      	strb	r1, [r4, #0]
	if(cmd < NEX_COMMANDS_COUNT && cmd > -1){
 80030c0:	2921      	cmp	r1, #33	; 0x21
 80030c2:	d84b      	bhi.n	800315c <nextion_SendData+0xa4>
 80030c4:	4605      	mov	r5, r0
		if(cmd == NEX_WAKE || cmd == NEX_SENDME || cmd == NEX_SETTINGS_SAVED || cmd == NEX_SETTINGS_NOT_SAVED
 80030c6:	2901      	cmp	r1, #1
 80030c8:	d919      	bls.n	80030fe <nextion_SendData+0x46>
 80030ca:	2911      	cmp	r1, #17
 80030cc:	d017      	beq.n	80030fe <nextion_SendData+0x46>
 80030ce:	2912      	cmp	r1, #18
 80030d0:	d015      	beq.n	80030fe <nextion_SendData+0x46>
			|| cmd == NEX_SETTINGS_LOCK || cmd == NEX_SETTINGS_UNLOCK){
 80030d2:	2921      	cmp	r1, #33	; 0x21
 80030d4:	d013      	beq.n	80030fe <nextion_SendData+0x46>
 80030d6:	2920      	cmp	r1, #32
 80030d8:	d011      	beq.n	80030fe <nextion_SendData+0x46>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
		}else if(cmd == NEX_PHASE_VOLTAGE ||
			cmd == NEX_PHASE_CURRENT ||
 80030da:	f1a1 0018 	sub.w	r0, r1, #24
 80030de:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_VOLTAGE ||
 80030e0:	2802      	cmp	r0, #2
 80030e2:	d916      	bls.n	8003112 <nextion_SendData+0x5a>
			cmd == NEX_PHASE_POWER){
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
		}else if(cmd == NEX_PHASE_PRG_BAR ||
			cmd == NEX_CO_HEATER_PHASE_DUTY ||
			cmd == NEX_CWU_HEATER_PHASE_DUTY ||
			cmd == NEX_CWU_TEMP || cmd == NEX_CO_TEMP){
 80030e4:	f1a1 001b 	sub.w	r0, r1, #27
 80030e8:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_PRG_BAR ||
 80030ea:	2804      	cmp	r0, #4
 80030ec:	d81b      	bhi.n	8003126 <nextion_SendData+0x6e>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2);
 80030ee:	481d      	ldr	r0, [pc, #116]	; (8003164 <nextion_SendData+0xac>)
 80030f0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80030f4:	a802      	add	r0, sp, #8
 80030f6:	f009 faf1 	bl	800c6dc <siprintf>
 80030fa:	b2c2      	uxtb	r2, r0
 80030fc:	e006      	b.n	800310c <nextion_SendData+0x54>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
 80030fe:	4b19      	ldr	r3, [pc, #100]	; (8003164 <nextion_SendData+0xac>)
 8003100:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003104:	a802      	add	r0, sp, #8
 8003106:	f009 fae9 	bl	800c6dc <siprintf>
 800310a:	b2c2      	uxtb	r2, r0
		}else{
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
		}
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 800310c:	4610      	mov	r0, r2
 800310e:	4613      	mov	r3, r2
 8003110:	e017      	b.n	8003142 <nextion_SendData+0x8a>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
 8003112:	4814      	ldr	r0, [pc, #80]	; (8003164 <nextion_SendData+0xac>)
 8003114:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8003118:	9810      	ldr	r0, [sp, #64]	; 0x40
 800311a:	9000      	str	r0, [sp, #0]
 800311c:	a802      	add	r0, sp, #8
 800311e:	f009 fadd 	bl	800c6dc <siprintf>
 8003122:	b2c2      	uxtb	r2, r0
 8003124:	e7f2      	b.n	800310c <nextion_SendData+0x54>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
 8003126:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <nextion_SendData+0xac>)
 8003128:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800312c:	a802      	add	r0, sp, #8
 800312e:	f009 fad5 	bl	800c6dc <siprintf>
 8003132:	b2c2      	uxtb	r2, r0
 8003134:	e7ea      	b.n	800310c <nextion_SendData+0x54>
			buffor_to_send[i] = 0xFF;
 8003136:	a90c      	add	r1, sp, #48	; 0x30
 8003138:	4419      	add	r1, r3
 800313a:	24ff      	movs	r4, #255	; 0xff
 800313c:	f801 4c28 	strb.w	r4, [r1, #-40]
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 8003140:	3301      	adds	r3, #1
 8003142:	1cc1      	adds	r1, r0, #3
 8003144:	4299      	cmp	r1, r3
 8003146:	dcf6      	bgt.n	8003136 <nextion_SendData+0x7e>
		}
		buffor_to_send_size += 3;
 8003148:	3203      	adds	r2, #3
		HAL_UART_Transmit(uart, (uint8_t*)buffor_to_send, buffor_to_send_size, 20);
 800314a:	2314      	movs	r3, #20
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	a902      	add	r1, sp, #8
 8003150:	4628      	mov	r0, r5
 8003152:	f005 fee7 	bl	8008f24 <HAL_UART_Transmit>
		vTaskDelay(5);
 8003156:	2005      	movs	r0, #5
 8003158:	f007 fa84 	bl	800a664 <vTaskDelay>
	}
}
 800315c:	b00d      	add	sp, #52	; 0x34
 800315e:	bd30      	pop	{r4, r5, pc}
 8003160:	20002cb0 	.word	0x20002cb0
 8003164:	0800dc40 	.word	0x0800dc40

08003168 <nextion_SendConfig>:
	nextion_SendData(uart, NEX_MINUTE, currTime.Minutes, 0, 0);
	current_command = NEX_SECONDS;
	nextion_SendData(uart, NEX_SECONDS, currTime.Seconds, 0, 0);
}

static void nextion_SendConfig(UART_HandleTypeDef* uart){
 8003168:	b530      	push	{r4, r5, lr}
 800316a:	b083      	sub	sp, #12
 800316c:	4605      	mov	r5, r0
	nextion_SendData(uart, NEX_CO_HIGH_TEMP, RegulationTaskData.parameters.CO_hi_temp, 0, 0);
 800316e:	2400      	movs	r4, #0
 8003170:	9400      	str	r4, [sp, #0]
 8003172:	4623      	mov	r3, r4
 8003174:	4622      	mov	r2, r4
 8003176:	2108      	movs	r1, #8
 8003178:	f7ff ff9e 	bl	80030b8 <nextion_SendData>
	nextion_SendData(uart, NEX_CO_LOW_TEMP, RegulationTaskData.parameters.CO_lo_temp, 0, 0);
 800317c:	9400      	str	r4, [sp, #0]
 800317e:	4623      	mov	r3, r4
 8003180:	4622      	mov	r2, r4
 8003182:	2109      	movs	r1, #9
 8003184:	4628      	mov	r0, r5
 8003186:	f7ff ff97 	bl	80030b8 <nextion_SendData>
	nextion_SendData(uart, NEX_CO_HEATER_POWER, (int32_t)RegulationTaskData.parameters.CO_heater_power, 0, 0);
 800318a:	9400      	str	r4, [sp, #0]
 800318c:	4623      	mov	r3, r4
 800318e:	4622      	mov	r2, r4
 8003190:	210a      	movs	r1, #10
 8003192:	4628      	mov	r0, r5
 8003194:	f7ff ff90 	bl	80030b8 <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_HIGH_TEMP, RegulationTaskData.parameters.CWU_hi_temp, 0, 0);
 8003198:	9400      	str	r4, [sp, #0]
 800319a:	4623      	mov	r3, r4
 800319c:	4622      	mov	r2, r4
 800319e:	210b      	movs	r1, #11
 80031a0:	4628      	mov	r0, r5
 80031a2:	f7ff ff89 	bl	80030b8 <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_LOW_TEMP, RegulationTaskData.parameters.CWU_lo_temp, 0, 0);
 80031a6:	9400      	str	r4, [sp, #0]
 80031a8:	4623      	mov	r3, r4
 80031aa:	4622      	mov	r2, r4
 80031ac:	210c      	movs	r1, #12
 80031ae:	4628      	mov	r0, r5
 80031b0:	f7ff ff82 	bl	80030b8 <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_HEATER_POWER, (int32_t)RegulationTaskData.parameters.CWU_heater_power, 0, 0);
 80031b4:	9400      	str	r4, [sp, #0]
 80031b6:	4623      	mov	r3, r4
 80031b8:	4622      	mov	r2, r4
 80031ba:	210d      	movs	r1, #13
 80031bc:	4628      	mov	r0, r5
 80031be:	f7ff ff7b 	bl	80030b8 <nextion_SendData>
	nextion_SendData(uart, NEX_ACC_COEFF, RegulationTaskData.parameters.acumulated_power_coeff, 0, 0);
 80031c2:	9400      	str	r4, [sp, #0]
 80031c4:	4623      	mov	r3, r4
 80031c6:	4622      	mov	r2, r4
 80031c8:	210e      	movs	r1, #14
 80031ca:	4628      	mov	r0, r5
 80031cc:	f7ff ff74 	bl	80030b8 <nextion_SendData>
	nextion_SendData(uart, NEX_HEATER_COEFF, RegulationTaskData.parameters.heater_power_coeff, 0, 0);
 80031d0:	9400      	str	r4, [sp, #0]
 80031d2:	4623      	mov	r3, r4
 80031d4:	4622      	mov	r2, r4
 80031d6:	210f      	movs	r1, #15
 80031d8:	4628      	mov	r0, r5
 80031da:	f7ff ff6d 	bl	80030b8 <nextion_SendData>
}
 80031de:	b003      	add	sp, #12
 80031e0:	bd30      	pop	{r4, r5, pc}
	...

080031e4 <nextion_UpdateTime>:
static void nextion_UpdateTime(UART_HandleTypeDef* uart){
 80031e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	4605      	mov	r5, r0
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80031ec:	4f23      	ldr	r7, [pc, #140]	; (800327c <nextion_UpdateTime+0x98>)
 80031ee:	4c24      	ldr	r4, [pc, #144]	; (8003280 <nextion_UpdateTime+0x9c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	4639      	mov	r1, r7
 80031f4:	4620      	mov	r0, r4
 80031f6:	f004 fddc 	bl	8007db2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 80031fa:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8003288 <nextion_UpdateTime+0xa4>
 80031fe:	2200      	movs	r2, #0
 8003200:	4641      	mov	r1, r8
 8003202:	4620      	mov	r0, r4
 8003204:	f004 fe00 	bl	8007e08 <HAL_RTC_GetDate>
	current_command = NEX_YEAR;
 8003208:	4e1e      	ldr	r6, [pc, #120]	; (8003284 <nextion_UpdateTime+0xa0>)
 800320a:	2102      	movs	r1, #2
 800320c:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_YEAR, currDate.Year + 2000, 0, 0);
 800320e:	f898 2003 	ldrb.w	r2, [r8, #3]
 8003212:	2400      	movs	r4, #0
 8003214:	9400      	str	r4, [sp, #0]
 8003216:	4623      	mov	r3, r4
 8003218:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 800321c:	4628      	mov	r0, r5
 800321e:	f7ff ff4b 	bl	80030b8 <nextion_SendData>
	current_command = NEX_MONTH;
 8003222:	2103      	movs	r1, #3
 8003224:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_MONTH, currDate.Month, 0, 0);
 8003226:	f898 2001 	ldrb.w	r2, [r8, #1]
 800322a:	9400      	str	r4, [sp, #0]
 800322c:	4623      	mov	r3, r4
 800322e:	4628      	mov	r0, r5
 8003230:	f7ff ff42 	bl	80030b8 <nextion_SendData>
	current_command = NEX_DAY;
 8003234:	2104      	movs	r1, #4
 8003236:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_DAY, currDate.Date, 0, 0);
 8003238:	f898 2002 	ldrb.w	r2, [r8, #2]
 800323c:	9400      	str	r4, [sp, #0]
 800323e:	4623      	mov	r3, r4
 8003240:	4628      	mov	r0, r5
 8003242:	f7ff ff39 	bl	80030b8 <nextion_SendData>
	current_command = NEX_HOUR;
 8003246:	2105      	movs	r1, #5
 8003248:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_HOUR, currTime.Hours, 0, 0);
 800324a:	783a      	ldrb	r2, [r7, #0]
 800324c:	9400      	str	r4, [sp, #0]
 800324e:	4623      	mov	r3, r4
 8003250:	4628      	mov	r0, r5
 8003252:	f7ff ff31 	bl	80030b8 <nextion_SendData>
	current_command = NEX_MINUTE;
 8003256:	2106      	movs	r1, #6
 8003258:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_MINUTE, currTime.Minutes, 0, 0);
 800325a:	787a      	ldrb	r2, [r7, #1]
 800325c:	9400      	str	r4, [sp, #0]
 800325e:	4623      	mov	r3, r4
 8003260:	4628      	mov	r0, r5
 8003262:	f7ff ff29 	bl	80030b8 <nextion_SendData>
	current_command = NEX_SECONDS;
 8003266:	2107      	movs	r1, #7
 8003268:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_SECONDS, currTime.Seconds, 0, 0);
 800326a:	78ba      	ldrb	r2, [r7, #2]
 800326c:	9400      	str	r4, [sp, #0]
 800326e:	4623      	mov	r3, r4
 8003270:	4628      	mov	r0, r5
 8003272:	f7ff ff21 	bl	80030b8 <nextion_SendData>
}
 8003276:	b002      	add	sp, #8
 8003278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800327c:	20002d70 	.word	0x20002d70
 8003280:	20003250 	.word	0x20003250
 8003284:	20002cb0 	.word	0x20002cb0
 8003288:	20002d84 	.word	0x20002d84

0800328c <NextionBig_DataRcv>:
		}
	}
  /* USER CODE END UpdateLCD */
}

void NextionBig_DataRcv (void){
 800328c:	b530      	push	{r4, r5, lr}
 800328e:	b083      	sub	sp, #12
	uint8_t stopbyte = 0;
 8003290:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 8003292:	e062      	b.n	800335a <NextionBig_DataRcv+0xce>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
		start = nextion_big_comm.UartBufferHead;
		if(len > 3){
			if(len > 9){
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
					memcpy(&number, &nextion_big_comm.UART_Buffer[start], 4);
 8003294:	f102 0320 	add.w	r3, r2, #32
 8003298:	4d3d      	ldr	r5, [pc, #244]	; (8003390 <NextionBig_DataRcv+0x104>)
 800329a:	442b      	add	r3, r5
 800329c:	f8d3 0002 	ldr.w	r0, [r3, #2]
					memcpy(&value, &nextion_big_comm.UART_Buffer[start + 5], 4);
 80032a0:	3225      	adds	r2, #37	; 0x25
 80032a2:	442a      	add	r2, r5
 80032a4:	f8d2 1002 	ldr.w	r1, [r2, #2]
					nextion_big.param = number;
 80032a8:	4b3a      	ldr	r3, [pc, #232]	; (8003394 <NextionBig_DataRcv+0x108>)
 80032aa:	6058      	str	r0, [r3, #4]
					memcpy(&nextion_big.value, &value, 4);
 80032ac:	6099      	str	r1, [r3, #8]
					Config_ChangeValue(number, value);
 80032ae:	f7fe fa17 	bl	80016e0 <Config_ChangeValue>
					nextion_big_comm.UartBufferHead += 10;
 80032b2:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80032b6:	330a      	adds	r3, #10
 80032b8:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
					xTaskNotifyFromISR(DiplaysHandle, 1, eSetValueWithOverwrite, NULL);
 80032bc:	4b36      	ldr	r3, [pc, #216]	; (8003398 <NextionBig_DataRcv+0x10c>)
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	2300      	movs	r3, #0
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	2203      	movs	r2, #3
 80032c6:	2101      	movs	r1, #1
 80032c8:	f007 fe64 	bl	800af94 <xTaskGenericNotifyFromISR>
 80032cc:	e03e      	b.n	800334c <NextionBig_DataRcv+0xc0>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 80032ce:	3301      	adds	r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	1d51      	adds	r1, r2, #5
 80032d6:	428b      	cmp	r3, r1
 80032d8:	da0a      	bge.n	80032f0 <NextionBig_DataRcv+0x64>
					if(nextion_big_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 80032da:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 80032de:	492c      	ldr	r1, [pc, #176]	; (8003390 <NextionBig_DataRcv+0x104>)
 80032e0:	4401      	add	r1, r0
 80032e2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80032e6:	29ff      	cmp	r1, #255	; 0xff
 80032e8:	d1f1      	bne.n	80032ce <NextionBig_DataRcv+0x42>
						stopbyte ++;
 80032ea:	3401      	adds	r4, #1
 80032ec:	b2e4      	uxtb	r4, r4
 80032ee:	e7ee      	b.n	80032ce <NextionBig_DataRcv+0x42>
					}
				}
				if(stopbyte == 3){
 80032f0:	2c03      	cmp	r4, #3
 80032f2:	d006      	beq.n	8003302 <NextionBig_DataRcv+0x76>
							y = 4;
							break;
					}
					nextion_big_comm.UartBufferHead += y;
				}else{
					nextion_big_comm.UartBufferHead ++;
 80032f4:	4a26      	ldr	r2, [pc, #152]	; (8003390 <NextionBig_DataRcv+0x104>)
 80032f6:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 80032fa:	3301      	adds	r3, #1
 80032fc:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 8003300:	e024      	b.n	800334c <NextionBig_DataRcv+0xc0>
					switch(nextion_big_comm.UART_Buffer[start]){
 8003302:	4b23      	ldr	r3, [pc, #140]	; (8003390 <NextionBig_DataRcv+0x104>)
 8003304:	4413      	add	r3, r2
 8003306:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800330a:	2b1a      	cmp	r3, #26
 800330c:	d011      	beq.n	8003332 <NextionBig_DataRcv+0xa6>
 800330e:	2b66      	cmp	r3, #102	; 0x66
 8003310:	d116      	bne.n	8003340 <NextionBig_DataRcv+0xb4>
							nextion_big.display = nextion_big_comm.UART_Buffer[start + 1];
 8003312:	3001      	adds	r0, #1
 8003314:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <NextionBig_DataRcv+0x104>)
 8003316:	4418      	add	r0, r3
 8003318:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 800331c:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <NextionBig_DataRcv+0x108>)
 800331e:	701a      	strb	r2, [r3, #0]
							y = 5;
 8003320:	2305      	movs	r3, #5
					nextion_big_comm.UartBufferHead += y;
 8003322:	4a1b      	ldr	r2, [pc, #108]	; (8003390 <NextionBig_DataRcv+0x104>)
 8003324:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 8003328:	440b      	add	r3, r1
 800332a:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 800332e:	2400      	movs	r4, #0
 8003330:	e00c      	b.n	800334c <NextionBig_DataRcv+0xc0>
							command_correct[current_command] = 1;
 8003332:	4b1a      	ldr	r3, [pc, #104]	; (800339c <NextionBig_DataRcv+0x110>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	4a1a      	ldr	r2, [pc, #104]	; (80033a0 <NextionBig_DataRcv+0x114>)
 8003338:	2101      	movs	r1, #1
 800333a:	54d1      	strb	r1, [r2, r3]
							y = 4;
 800333c:	2304      	movs	r3, #4
							break;
 800333e:	e7f0      	b.n	8003322 <NextionBig_DataRcv+0x96>
							y = 4;
 8003340:	2304      	movs	r3, #4
 8003342:	e7ee      	b.n	8003322 <NextionBig_DataRcv+0x96>
				}
			}

		}else{
			//if(nextion_big_comm.UART_Buffer[start] == 0 || nextion_big_comm.UART_Buffer[start] == 255){
				nextion_big_comm.UartBufferHead++;
 8003344:	3201      	adds	r2, #1
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <NextionBig_DataRcv+0x104>)
 8003348:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_big_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 800334c:	4a10      	ldr	r2, [pc, #64]	; (8003390 <NextionBig_DataRcv+0x104>)
 800334e:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8003352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003356:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <NextionBig_DataRcv+0x104>)
 800335c:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 8003360:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 8003364:	4291      	cmp	r1, r2
 8003366:	d011      	beq.n	800338c <NextionBig_DataRcv+0x100>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 8003368:	b2d3      	uxtb	r3, r2
 800336a:	1ac9      	subs	r1, r1, r3
 800336c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 8003370:	2903      	cmp	r1, #3
 8003372:	d9e7      	bls.n	8003344 <NextionBig_DataRcv+0xb8>
			if(len > 9){
 8003374:	2909      	cmp	r1, #9
 8003376:	d906      	bls.n	8003386 <NextionBig_DataRcv+0xfa>
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
 8003378:	1d10      	adds	r0, r2, #4
 800337a:	4905      	ldr	r1, [pc, #20]	; (8003390 <NextionBig_DataRcv+0x104>)
 800337c:	4401      	add	r1, r0
 800337e:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8003382:	290a      	cmp	r1, #10
 8003384:	d086      	beq.n	8003294 <NextionBig_DataRcv+0x8>
				for(i = start + 1; i < (start + 5); i++){
 8003386:	3301      	adds	r3, #1
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e7a2      	b.n	80032d2 <NextionBig_DataRcv+0x46>
	}
}
 800338c:	b003      	add	sp, #12
 800338e:	bd30      	pop	{r4, r5, pc}
 8003390:	20002c00 	.word	0x20002c00
 8003394:	20002bd0 	.word	0x20002bd0
 8003398:	200033cc 	.word	0x200033cc
 800339c:	20002cb0 	.word	0x20002cb0
 80033a0:	20002bdc 	.word	0x20002bdc

080033a4 <NextionSmall_DataRcv>:

void NextionSmall_DataRcv (void){
 80033a4:	b530      	push	{r4, r5, lr}
 80033a6:	b083      	sub	sp, #12
	uint8_t stopbyte = 0;
 80033a8:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 80033aa:	e078      	b.n	800349e <NextionSmall_DataRcv+0xfa>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
		start = nextion_small_comm.UartBufferHead;
		if(len > 3){
			if(len > 9){
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
					memcpy(&number, &nextion_small_comm.UART_Buffer[start], 4);
 80033ac:	f102 0320 	add.w	r3, r2, #32
 80033b0:	4d49      	ldr	r5, [pc, #292]	; (80034d8 <NextionSmall_DataRcv+0x134>)
 80033b2:	442b      	add	r3, r5
 80033b4:	f8d3 0002 	ldr.w	r0, [r3, #2]
					memcpy(&value, &nextion_small_comm.UART_Buffer[start + 5], 4);
 80033b8:	3225      	adds	r2, #37	; 0x25
 80033ba:	442a      	add	r2, r5
 80033bc:	f8d2 1002 	ldr.w	r1, [r2, #2]
					nextion_small.param = number;
 80033c0:	4b46      	ldr	r3, [pc, #280]	; (80034dc <NextionSmall_DataRcv+0x138>)
 80033c2:	6058      	str	r0, [r3, #4]
					memcpy(&nextion_small.value, &value, 4);
 80033c4:	6099      	str	r1, [r3, #8]
					Config_ChangeValue(number, value);
 80033c6:	f7fe f98b 	bl	80016e0 <Config_ChangeValue>
					nextion_small_comm.UartBufferHead += 10;
 80033ca:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80033ce:	330a      	adds	r3, #10
 80033d0:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
					xTaskNotifyFromISR(DiplaysHandle, 2, eSetValueWithOverwrite, NULL);
 80033d4:	4b42      	ldr	r3, [pc, #264]	; (80034e0 <NextionSmall_DataRcv+0x13c>)
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	2300      	movs	r3, #0
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	2203      	movs	r2, #3
 80033de:	2102      	movs	r1, #2
 80033e0:	f007 fdd8 	bl	800af94 <xTaskGenericNotifyFromISR>
 80033e4:	e054      	b.n	8003490 <NextionSmall_DataRcv+0xec>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 80033e6:	3301      	adds	r3, #1
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	4610      	mov	r0, r2
 80033ec:	1d51      	adds	r1, r2, #5
 80033ee:	428b      	cmp	r3, r1
 80033f0:	da0a      	bge.n	8003408 <NextionSmall_DataRcv+0x64>
					if(nextion_small_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 80033f2:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 80033f6:	4938      	ldr	r1, [pc, #224]	; (80034d8 <NextionSmall_DataRcv+0x134>)
 80033f8:	4401      	add	r1, r0
 80033fa:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80033fe:	29ff      	cmp	r1, #255	; 0xff
 8003400:	d1f1      	bne.n	80033e6 <NextionSmall_DataRcv+0x42>
						stopbyte ++;
 8003402:	3401      	adds	r4, #1
 8003404:	b2e4      	uxtb	r4, r4
 8003406:	e7ee      	b.n	80033e6 <NextionSmall_DataRcv+0x42>
					}
				}
				if(stopbyte == 3){
 8003408:	2c03      	cmp	r4, #3
 800340a:	d006      	beq.n	800341a <NextionSmall_DataRcv+0x76>
							y = 4;
							break;
					}
					nextion_small_comm.UartBufferHead += y;
				}else{
					nextion_small_comm.UartBufferHead ++;
 800340c:	4a32      	ldr	r2, [pc, #200]	; (80034d8 <NextionSmall_DataRcv+0x134>)
 800340e:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8003412:	3301      	adds	r3, #1
 8003414:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 8003418:	e03a      	b.n	8003490 <NextionSmall_DataRcv+0xec>
					switch(nextion_small_comm.UART_Buffer[start]){
 800341a:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <NextionSmall_DataRcv+0x134>)
 800341c:	4413      	add	r3, r2
 800341e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003422:	2b86      	cmp	r3, #134	; 0x86
 8003424:	d024      	beq.n	8003470 <NextionSmall_DataRcv+0xcc>
 8003426:	d813      	bhi.n	8003450 <NextionSmall_DataRcv+0xac>
 8003428:	2b1a      	cmp	r3, #26
 800342a:	d01a      	beq.n	8003462 <NextionSmall_DataRcv+0xbe>
 800342c:	2b66      	cmp	r3, #102	; 0x66
 800342e:	d129      	bne.n	8003484 <NextionSmall_DataRcv+0xe0>
							nextion_small.display = nextion_small_comm.UART_Buffer[start + 1];
 8003430:	3001      	adds	r0, #1
 8003432:	4b29      	ldr	r3, [pc, #164]	; (80034d8 <NextionSmall_DataRcv+0x134>)
 8003434:	4418      	add	r0, r3
 8003436:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 800343a:	4b28      	ldr	r3, [pc, #160]	; (80034dc <NextionSmall_DataRcv+0x138>)
 800343c:	701a      	strb	r2, [r3, #0]
							y = 5;
 800343e:	2305      	movs	r3, #5
					nextion_small_comm.UartBufferHead += y;
 8003440:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <NextionSmall_DataRcv+0x134>)
 8003442:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 8003446:	440b      	add	r3, r1
 8003448:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 800344c:	2400      	movs	r4, #0
 800344e:	e01f      	b.n	8003490 <NextionSmall_DataRcv+0xec>
					switch(nextion_small_comm.UART_Buffer[start]){
 8003450:	2b87      	cmp	r3, #135	; 0x87
 8003452:	d012      	beq.n	800347a <NextionSmall_DataRcv+0xd6>
 8003454:	2b88      	cmp	r3, #136	; 0x88
 8003456:	d115      	bne.n	8003484 <NextionSmall_DataRcv+0xe0>
							nextion_small.ready = 1;
 8003458:	4b20      	ldr	r3, [pc, #128]	; (80034dc <NextionSmall_DataRcv+0x138>)
 800345a:	2201      	movs	r2, #1
 800345c:	70da      	strb	r2, [r3, #3]
							y = 4;
 800345e:	2304      	movs	r3, #4
							break;
 8003460:	e7ee      	b.n	8003440 <NextionSmall_DataRcv+0x9c>
							command_correct[current_command] = 1;
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <NextionSmall_DataRcv+0x140>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	4a20      	ldr	r2, [pc, #128]	; (80034e8 <NextionSmall_DataRcv+0x144>)
 8003468:	2101      	movs	r1, #1
 800346a:	54d1      	strb	r1, [r2, r3]
							y = 4;
 800346c:	2304      	movs	r3, #4
							break;
 800346e:	e7e7      	b.n	8003440 <NextionSmall_DataRcv+0x9c>
							nextion_small.sleep = 1;
 8003470:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <NextionSmall_DataRcv+0x138>)
 8003472:	2201      	movs	r2, #1
 8003474:	709a      	strb	r2, [r3, #2]
							y = 4;
 8003476:	2304      	movs	r3, #4
							break;
 8003478:	e7e2      	b.n	8003440 <NextionSmall_DataRcv+0x9c>
							nextion_small.sleep = 0;
 800347a:	4b18      	ldr	r3, [pc, #96]	; (80034dc <NextionSmall_DataRcv+0x138>)
 800347c:	2200      	movs	r2, #0
 800347e:	709a      	strb	r2, [r3, #2]
							y = 4;
 8003480:	2304      	movs	r3, #4
							break;
 8003482:	e7dd      	b.n	8003440 <NextionSmall_DataRcv+0x9c>
							y = 4;
 8003484:	2304      	movs	r3, #4
 8003486:	e7db      	b.n	8003440 <NextionSmall_DataRcv+0x9c>
				}
			}

		}else{
			//if(nextion_small_comm.UART_Buffer[start] == 0 || nextion_small_comm.UART_Buffer[start] == 255){
				nextion_small_comm.UartBufferHead++;
 8003488:	3201      	adds	r2, #1
 800348a:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <NextionSmall_DataRcv+0x134>)
 800348c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_small_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 8003490:	4a11      	ldr	r2, [pc, #68]	; (80034d8 <NextionSmall_DataRcv+0x134>)
 8003492:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8003496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800349a:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 800349e:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <NextionSmall_DataRcv+0x134>)
 80034a0:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 80034a4:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 80034a8:	4291      	cmp	r1, r2
 80034aa:	d012      	beq.n	80034d2 <NextionSmall_DataRcv+0x12e>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 80034ac:	b2d3      	uxtb	r3, r2
 80034ae:	1ac9      	subs	r1, r1, r3
 80034b0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 80034b4:	2903      	cmp	r1, #3
 80034b6:	d9e7      	bls.n	8003488 <NextionSmall_DataRcv+0xe4>
			if(len > 9){
 80034b8:	2909      	cmp	r1, #9
 80034ba:	d907      	bls.n	80034cc <NextionSmall_DataRcv+0x128>
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
 80034bc:	1d10      	adds	r0, r2, #4
 80034be:	4906      	ldr	r1, [pc, #24]	; (80034d8 <NextionSmall_DataRcv+0x134>)
 80034c0:	4401      	add	r1, r0
 80034c2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80034c6:	290a      	cmp	r1, #10
 80034c8:	f43f af70 	beq.w	80033ac <NextionSmall_DataRcv+0x8>
				for(i = start + 1; i < (start + 5); i++){
 80034cc:	3301      	adds	r3, #1
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	e78b      	b.n	80033ea <NextionSmall_DataRcv+0x46>
	}
}
 80034d2:	b003      	add	sp, #12
 80034d4:	bd30      	pop	{r4, r5, pc}
 80034d6:	bf00      	nop
 80034d8:	20002cb4 	.word	0x20002cb4
 80034dc:	20002d64 	.word	0x20002d64
 80034e0:	200033cc 	.word	0x200033cc
 80034e4:	20002cb0 	.word	0x20002cb0
 80034e8:	20002bdc 	.word	0x20002bdc

080034ec <DisplayTask>:
{
 80034ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034f0:	b088      	sub	sp, #32
	nextion_small.display = 30;
 80034f2:	4a99      	ldr	r2, [pc, #612]	; (8003758 <DisplayTask+0x26c>)
 80034f4:	231e      	movs	r3, #30
 80034f6:	7013      	strb	r3, [r2, #0]
	nextion_small.last_display = 30;
 80034f8:	7053      	strb	r3, [r2, #1]
	nextion_big.display = 30;
 80034fa:	4d98      	ldr	r5, [pc, #608]	; (800375c <DisplayTask+0x270>)
 80034fc:	702b      	strb	r3, [r5, #0]
	nextion_big.last_display = 30;
 80034fe:	706b      	strb	r3, [r5, #1]
	UARTDMA_Init(&nextion_small_comm, NEXTION_SMALL_UART);
 8003500:	4e97      	ldr	r6, [pc, #604]	; (8003760 <DisplayTask+0x274>)
 8003502:	4c98      	ldr	r4, [pc, #608]	; (8003764 <DisplayTask+0x278>)
 8003504:	4631      	mov	r1, r6
 8003506:	4620      	mov	r0, r4
 8003508:	f000 ff1f 	bl	800434a <UARTDMA_Init>
	UARTDMA_Init(&nextion_big_comm, NEXTION_BIG_UART);
 800350c:	4f96      	ldr	r7, [pc, #600]	; (8003768 <DisplayTask+0x27c>)
 800350e:	f8df 8278 	ldr.w	r8, [pc, #632]	; 8003788 <DisplayTask+0x29c>
 8003512:	4639      	mov	r1, r7
 8003514:	4640      	mov	r0, r8
 8003516:	f000 ff18 	bl	800434a <UARTDMA_Init>
	nextion_big_comm.callback = NextionBig_DataRcv;
 800351a:	4b94      	ldr	r3, [pc, #592]	; (800376c <DisplayTask+0x280>)
 800351c:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
	nextion_small_comm.callback = NextionSmall_DataRcv;
 8003520:	4b93      	ldr	r3, [pc, #588]	; (8003770 <DisplayTask+0x284>)
 8003522:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	Config_GetEthernetConfig(&configuration);
 8003526:	a803      	add	r0, sp, #12
 8003528:	f7fe f970 	bl	800180c <Config_GetEthernetConfig>
	vTaskDelay(1000);
 800352c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003530:	f007 f898 	bl	800a664 <vTaskDelay>
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8003534:	4c8f      	ldr	r4, [pc, #572]	; (8003774 <DisplayTask+0x288>)
 8003536:	2200      	movs	r2, #0
 8003538:	498f      	ldr	r1, [pc, #572]	; (8003778 <DisplayTask+0x28c>)
 800353a:	4620      	mov	r0, r4
 800353c:	f004 fc39 	bl	8007db2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 8003540:	2200      	movs	r2, #0
 8003542:	498e      	ldr	r1, [pc, #568]	; (800377c <DisplayTask+0x290>)
 8003544:	4620      	mov	r0, r4
 8003546:	f004 fc5f 	bl	8007e08 <HAL_RTC_GetDate>
	nextion_SendData(NEXTION_SMALL_UART, NEX_WAKE, 0, 0, 0);
 800354a:	2400      	movs	r4, #0
 800354c:	9400      	str	r4, [sp, #0]
 800354e:	4623      	mov	r3, r4
 8003550:	4622      	mov	r2, r4
 8003552:	4621      	mov	r1, r4
 8003554:	4630      	mov	r0, r6
 8003556:	f7ff fdaf 	bl	80030b8 <nextion_SendData>
	vTaskDelay(1);
 800355a:	2001      	movs	r0, #1
 800355c:	f007 f882 	bl	800a664 <vTaskDelay>
	nextion_SendData(NEXTION_SMALL_UART, NEX_SENDME, 0, 0, 0);
 8003560:	9400      	str	r4, [sp, #0]
 8003562:	4623      	mov	r3, r4
 8003564:	4622      	mov	r2, r4
 8003566:	2101      	movs	r1, #1
 8003568:	4630      	mov	r0, r6
 800356a:	f7ff fda5 	bl	80030b8 <nextion_SendData>
	vTaskDelay(1);
 800356e:	2001      	movs	r0, #1
 8003570:	f007 f878 	bl	800a664 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8003574:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003578:	2001      	movs	r0, #1
 800357a:	f007 fc83 	bl	800ae84 <ulTaskNotifyTake>
	nextion_SendData(NEXTION_BIG_UART, NEX_SENDME, 0, 0, 0);
 800357e:	9400      	str	r4, [sp, #0]
 8003580:	4623      	mov	r3, r4
 8003582:	4622      	mov	r2, r4
 8003584:	2101      	movs	r1, #1
 8003586:	4638      	mov	r0, r7
 8003588:	f7ff fd96 	bl	80030b8 <nextion_SendData>
	vTaskDelay(1);
 800358c:	2001      	movs	r0, #1
 800358e:	f007 f869 	bl	800a664 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8003592:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003596:	2001      	movs	r0, #1
 8003598:	f007 fc74 	bl	800ae84 <ulTaskNotifyTake>
	if(nextion_big.display != 30){
 800359c:	782b      	ldrb	r3, [r5, #0]
 800359e:	2b1e      	cmp	r3, #30
 80035a0:	d005      	beq.n	80035ae <DisplayTask+0xc2>
		nextion_UpdateTime(NEXTION_BIG_UART);
 80035a2:	4638      	mov	r0, r7
 80035a4:	f7ff fe1e 	bl	80031e4 <nextion_UpdateTime>
		nextion_SendConfig(NEXTION_BIG_UART);
 80035a8:	4638      	mov	r0, r7
 80035aa:	f7ff fddd 	bl	8003168 <nextion_SendConfig>
	if(nextion_small.display != 30){
 80035ae:	4b6a      	ldr	r3, [pc, #424]	; (8003758 <DisplayTask+0x26c>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b1e      	cmp	r3, #30
 80035b4:	d002      	beq.n	80035bc <DisplayTask+0xd0>
		nextion_SendConfig(NEXTION_SMALL_UART);
 80035b6:	486a      	ldr	r0, [pc, #424]	; (8003760 <DisplayTask+0x274>)
 80035b8:	f7ff fdd6 	bl	8003168 <nextion_SendConfig>
{
 80035bc:	2600      	movs	r6, #0
 80035be:	4637      	mov	r7, r6
 80035c0:	e02a      	b.n	8003618 <DisplayTask+0x12c>
				nextion_UpdateTime(NEXTION_BIG_UART);
 80035c2:	4869      	ldr	r0, [pc, #420]	; (8003768 <DisplayTask+0x27c>)
 80035c4:	f7ff fe0e 	bl	80031e4 <nextion_UpdateTime>
				if(nextion_small.display != 30){
 80035c8:	4b63      	ldr	r3, [pc, #396]	; (8003758 <DisplayTask+0x26c>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b1e      	cmp	r3, #30
 80035ce:	d02e      	beq.n	800362e <DisplayTask+0x142>
					nextion_SendData(NEXTION_SMALL_UART, NEX_SETTINGS_LOCK, 0, 0, 0);
 80035d0:	2200      	movs	r2, #0
 80035d2:	9200      	str	r2, [sp, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	2121      	movs	r1, #33	; 0x21
 80035d8:	4861      	ldr	r0, [pc, #388]	; (8003760 <DisplayTask+0x274>)
 80035da:	f7ff fd6d 	bl	80030b8 <nextion_SendData>
 80035de:	e026      	b.n	800362e <DisplayTask+0x142>
					nextion_SendData(NEXTION_SMALL_UART, NEX_SETTINGS_UNLOCK, 0, 0, 0);
 80035e0:	2200      	movs	r2, #0
 80035e2:	9200      	str	r2, [sp, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	2120      	movs	r1, #32
 80035e8:	485d      	ldr	r0, [pc, #372]	; (8003760 <DisplayTask+0x274>)
 80035ea:	f7ff fd65 	bl	80030b8 <nextion_SendData>
 80035ee:	e01e      	b.n	800362e <DisplayTask+0x142>
				if(nextion_big.display != 30){
 80035f0:	4b5a      	ldr	r3, [pc, #360]	; (800375c <DisplayTask+0x270>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b1e      	cmp	r3, #30
 80035f6:	d130      	bne.n	800365a <DisplayTask+0x16e>
		if(nextion_big.display == 1){
 80035f8:	4b58      	ldr	r3, [pc, #352]	; (800375c <DisplayTask+0x270>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d034      	beq.n	800366a <DisplayTask+0x17e>
		vTaskDelay(1000);
 8003600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003604:	f007 f82e 	bl	800a664 <vTaskDelay>
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8003608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800360c:	2001      	movs	r0, #1
 800360e:	f007 fc39 	bl	800ae84 <ulTaskNotifyTake>
		if(ulNotificationValue > 0){
 8003612:	2800      	cmp	r0, #0
 8003614:	f040 808f 	bne.w	8003736 <DisplayTask+0x24a>
		if(nextion_big.display != nextion_big.last_display){
 8003618:	4b50      	ldr	r3, [pc, #320]	; (800375c <DisplayTask+0x270>)
 800361a:	781a      	ldrb	r2, [r3, #0]
 800361c:	785b      	ldrb	r3, [r3, #1]
 800361e:	429a      	cmp	r2, r3
 8003620:	d008      	beq.n	8003634 <DisplayTask+0x148>
			if(nextion_big.display == 2){
 8003622:	2a02      	cmp	r2, #2
 8003624:	d0cd      	beq.n	80035c2 <DisplayTask+0xd6>
				if(nextion_small.display != 30){
 8003626:	4b4c      	ldr	r3, [pc, #304]	; (8003758 <DisplayTask+0x26c>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b1e      	cmp	r3, #30
 800362c:	d1d8      	bne.n	80035e0 <DisplayTask+0xf4>
			nextion_big.last_display = nextion_big.display;
 800362e:	4b4b      	ldr	r3, [pc, #300]	; (800375c <DisplayTask+0x270>)
 8003630:	781a      	ldrb	r2, [r3, #0]
 8003632:	705a      	strb	r2, [r3, #1]
		if(nextion_small.display != nextion_small.last_display){
 8003634:	4b48      	ldr	r3, [pc, #288]	; (8003758 <DisplayTask+0x26c>)
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	785b      	ldrb	r3, [r3, #1]
 800363a:	429a      	cmp	r2, r3
 800363c:	d0dc      	beq.n	80035f8 <DisplayTask+0x10c>
			if(nextion_small.display == 1){
 800363e:	2a01      	cmp	r2, #1
 8003640:	d0d6      	beq.n	80035f0 <DisplayTask+0x104>
				if(nextion_big.display != 30){
 8003642:	4b46      	ldr	r3, [pc, #280]	; (800375c <DisplayTask+0x270>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b1e      	cmp	r3, #30
 8003648:	d0d6      	beq.n	80035f8 <DisplayTask+0x10c>
					nextion_SendData(NEXTION_BIG_UART, NEX_SETTINGS_UNLOCK, 0, 0, 0);
 800364a:	2200      	movs	r2, #0
 800364c:	9200      	str	r2, [sp, #0]
 800364e:	4613      	mov	r3, r2
 8003650:	2120      	movs	r1, #32
 8003652:	4845      	ldr	r0, [pc, #276]	; (8003768 <DisplayTask+0x27c>)
 8003654:	f7ff fd30 	bl	80030b8 <nextion_SendData>
 8003658:	e7ce      	b.n	80035f8 <DisplayTask+0x10c>
					nextion_SendData(NEXTION_BIG_UART, NEX_SETTINGS_LOCK, 0, 0, 0);
 800365a:	2200      	movs	r2, #0
 800365c:	9200      	str	r2, [sp, #0]
 800365e:	4613      	mov	r3, r2
 8003660:	2121      	movs	r1, #33	; 0x21
 8003662:	4841      	ldr	r0, [pc, #260]	; (8003768 <DisplayTask+0x27c>)
 8003664:	f7ff fd28 	bl	80030b8 <nextion_SendData>
 8003668:	e7c6      	b.n	80035f8 <DisplayTask+0x10c>
			nextion_SendData(NEXTION_BIG_UART, NEX_COUNTER_PRESENCE, RegulationTaskData.counter.counter_present, 0, 0);
 800366a:	4d3f      	ldr	r5, [pc, #252]	; (8003768 <DisplayTask+0x27c>)
 800366c:	2400      	movs	r4, #0
 800366e:	9400      	str	r4, [sp, #0]
 8003670:	4623      	mov	r3, r4
 8003672:	4622      	mov	r2, r4
 8003674:	2113      	movs	r1, #19
 8003676:	4628      	mov	r0, r5
 8003678:	f7ff fd1e 	bl	80030b8 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_TSENS_PRESENCE, RegulationTaskData.counter.temperatures_present, 0, 0);
 800367c:	9400      	str	r4, [sp, #0]
 800367e:	4623      	mov	r3, r4
 8003680:	4622      	mov	r2, r4
 8003682:	2114      	movs	r1, #20
 8003684:	4628      	mov	r0, r5
 8003686:	f7ff fd17 	bl	80030b8 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_MAIN_SW, RegulationTaskData.ControlWord.MainSwitch_State, 0, 0);
 800368a:	9400      	str	r4, [sp, #0]
 800368c:	4623      	mov	r3, r4
 800368e:	4622      	mov	r2, r4
 8003690:	2115      	movs	r1, #21
 8003692:	4628      	mov	r0, r5
 8003694:	f7ff fd10 	bl	80030b8 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_CWU_PIC, pic, 0, 0);
 8003698:	9400      	str	r4, [sp, #0]
 800369a:	4623      	mov	r3, r4
 800369c:	2201      	movs	r2, #1
 800369e:	2116      	movs	r1, #22
 80036a0:	4628      	mov	r0, r5
 80036a2:	f7ff fd09 	bl	80030b8 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_CO_PIC, pic, 0, 0);
 80036a6:	9400      	str	r4, [sp, #0]
 80036a8:	4623      	mov	r3, r4
 80036aa:	2201      	movs	r2, #1
 80036ac:	2117      	movs	r1, #23
 80036ae:	4628      	mov	r0, r5
 80036b0:	f7ff fd02 	bl	80030b8 <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 80036b4:	e03c      	b.n	8003730 <DisplayTask+0x244>
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_VOLTAGE, i + 1, (uint32_t)RegulationTaskData.counter.voltages[i], rest);
 80036b6:	3401      	adds	r4, #1
 80036b8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8003768 <DisplayTask+0x27c>
 80036bc:	2500      	movs	r5, #0
 80036be:	9500      	str	r5, [sp, #0]
 80036c0:	462b      	mov	r3, r5
 80036c2:	4622      	mov	r2, r4
 80036c4:	2118      	movs	r1, #24
 80036c6:	4640      	mov	r0, r8
 80036c8:	f7ff fcf6 	bl	80030b8 <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_CURRENT, i + 1, (uint32_t)RegulationTaskData.counter.currents[i], rest);
 80036cc:	9500      	str	r5, [sp, #0]
 80036ce:	462b      	mov	r3, r5
 80036d0:	4622      	mov	r2, r4
 80036d2:	2119      	movs	r1, #25
 80036d4:	4640      	mov	r0, r8
 80036d6:	f7ff fcef 	bl	80030b8 <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_POWER, i + 1, (uint32_t)RegulationTaskData.counter.powers[i], rest);
 80036da:	9500      	str	r5, [sp, #0]
 80036dc:	462b      	mov	r3, r5
 80036de:	4622      	mov	r2, r4
 80036e0:	211a      	movs	r1, #26
 80036e2:	4640      	mov	r0, r8
 80036e4:	f7ff fce8 	bl	80030b8 <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.powers[i] / RegulationTaskData.parameters.net_max_power * 100.0);
 80036e8:	eddf 7a25 	vldr	s15, [pc, #148]	; 8003780 <DisplayTask+0x294>
 80036ec:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 80036f0:	ee17 0a90 	vmov	r0, s15
 80036f4:	f7fc ff30 	bl	8000558 <__aeabi_f2d>
 80036f8:	2200      	movs	r2, #0
 80036fa:	4b22      	ldr	r3, [pc, #136]	; (8003784 <DisplayTask+0x298>)
 80036fc:	f7fc ff84 	bl	8000608 <__aeabi_dmul>
 8003700:	f7fd f994 	bl	8000a2c <__aeabi_d2uiz>
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_PRG_BAR, i + 1, rest, 0);
 8003704:	9500      	str	r5, [sp, #0]
 8003706:	4603      	mov	r3, r0
 8003708:	4622      	mov	r2, r4
 800370a:	211b      	movs	r1, #27
 800370c:	4640      	mov	r0, r8
 800370e:	f7ff fcd3 	bl	80030b8 <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_CO_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CO_heater_PWM[i], 0);
 8003712:	9500      	str	r5, [sp, #0]
 8003714:	462b      	mov	r3, r5
 8003716:	4622      	mov	r2, r4
 8003718:	211c      	movs	r1, #28
 800371a:	4640      	mov	r0, r8
 800371c:	f7ff fccc 	bl	80030b8 <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_CWU_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CWU_heater_PWM[i], 0);
 8003720:	9500      	str	r5, [sp, #0]
 8003722:	462b      	mov	r3, r5
 8003724:	4622      	mov	r2, r4
 8003726:	211d      	movs	r1, #29
 8003728:	4640      	mov	r0, r8
 800372a:	f7ff fcc5 	bl	80030b8 <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 800372e:	b2e4      	uxtb	r4, r4
 8003730:	2c02      	cmp	r4, #2
 8003732:	d9c0      	bls.n	80036b6 <DisplayTask+0x1ca>
 8003734:	e764      	b.n	8003600 <DisplayTask+0x114>
			if(ulNotificationValue == 1){
 8003736:	2801      	cmp	r0, #1
 8003738:	d006      	beq.n	8003748 <DisplayTask+0x25c>
			}else if(ulNotificationValue == 2){
 800373a:	2802      	cmp	r0, #2
 800373c:	d008      	beq.n	8003750 <DisplayTask+0x264>
			Config_ChangeValue(param, (void*)valPtr);
 800373e:	4631      	mov	r1, r6
 8003740:	4638      	mov	r0, r7
 8003742:	f7fd ffcd 	bl	80016e0 <Config_ChangeValue>
 8003746:	e767      	b.n	8003618 <DisplayTask+0x12c>
				param = nextion_big.param;
 8003748:	4e04      	ldr	r6, [pc, #16]	; (800375c <DisplayTask+0x270>)
 800374a:	6877      	ldr	r7, [r6, #4]
				valPtr = &nextion_big.value[0];
 800374c:	3608      	adds	r6, #8
 800374e:	e7f6      	b.n	800373e <DisplayTask+0x252>
				param = nextion_small.param;
 8003750:	4e01      	ldr	r6, [pc, #4]	; (8003758 <DisplayTask+0x26c>)
 8003752:	6877      	ldr	r7, [r6, #4]
				valPtr = &nextion_small.value[0];
 8003754:	3608      	adds	r6, #8
 8003756:	e7f2      	b.n	800373e <DisplayTask+0x252>
 8003758:	20002d64 	.word	0x20002d64
 800375c:	20002bd0 	.word	0x20002bd0
 8003760:	200031cc 	.word	0x200031cc
 8003764:	20002cb4 	.word	0x20002cb4
 8003768:	200032b0 	.word	0x200032b0
 800376c:	0800328d 	.word	0x0800328d
 8003770:	080033a5 	.word	0x080033a5
 8003774:	20003250 	.word	0x20003250
 8003778:	20002d70 	.word	0x20002d70
 800377c:	20002d84 	.word	0x20002d84
 8003780:	00000000 	.word	0x00000000
 8003784:	40590000 	.word	0x40590000
 8003788:	20002c00 	.word	0x20002c00

0800378c <W5500_WriteBuff>:

static void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
}

static void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 800378c:	b508      	push	{r3, lr}
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 800378e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003792:	460a      	mov	r2, r1
 8003794:	4601      	mov	r1, r0
 8003796:	4802      	ldr	r0, [pc, #8]	; (80037a0 <W5500_WriteBuff+0x14>)
 8003798:	f004 fc6a 	bl	8008070 <HAL_SPI_Transmit>
}
 800379c:	bd08      	pop	{r3, pc}
 800379e:	bf00      	nop
 80037a0:	200032f0 	.word	0x200032f0

080037a4 <W5500_WriteByte>:
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
    return byte;
}

static void W5500_WriteByte(uint8_t byte) {
 80037a4:	b500      	push	{lr}
 80037a6:	b083      	sub	sp, #12
 80037a8:	ab02      	add	r3, sp, #8
 80037aa:	f803 0d01 	strb.w	r0, [r3, #-1]!
    W5500_WriteBuff(&byte, sizeof(byte));
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ffeb 	bl	800378c <W5500_WriteBuff>
}
 80037b6:	b003      	add	sp, #12
 80037b8:	f85d fb04 	ldr.w	pc, [sp], #4

080037bc <W5500_ReadBuff>:
static void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 80037bc:	b508      	push	{r3, lr}
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 80037be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037c2:	460a      	mov	r2, r1
 80037c4:	4601      	mov	r1, r0
 80037c6:	4802      	ldr	r0, [pc, #8]	; (80037d0 <W5500_ReadBuff+0x14>)
 80037c8:	f004 fe36 	bl	8008438 <HAL_SPI_Receive>
}
 80037cc:	bd08      	pop	{r3, pc}
 80037ce:	bf00      	nop
 80037d0:	200032f0 	.word	0x200032f0

080037d4 <W5500_ReadByte>:
static uint8_t W5500_ReadByte(void) {
 80037d4:	b500      	push	{lr}
 80037d6:	b083      	sub	sp, #12
    W5500_ReadBuff(&byte, sizeof(byte));
 80037d8:	2101      	movs	r1, #1
 80037da:	f10d 0007 	add.w	r0, sp, #7
 80037de:	f7ff ffed 	bl	80037bc <W5500_ReadBuff>
}
 80037e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80037e6:	b003      	add	sp, #12
 80037e8:	f85d fb04 	ldr.w	pc, [sp], #4

080037ec <cs_desel>:
static void cs_desel() {
 80037ec:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET); //CS HIGH
 80037ee:	2201      	movs	r2, #1
 80037f0:	2110      	movs	r1, #16
 80037f2:	4805      	ldr	r0, [pc, #20]	; (8003808 <cs_desel+0x1c>)
 80037f4:	f002 ff19 	bl	800662a <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 80037f8:	2300      	movs	r3, #0
 80037fa:	461a      	mov	r2, r3
 80037fc:	4619      	mov	r1, r3
 80037fe:	4803      	ldr	r0, [pc, #12]	; (800380c <cs_desel+0x20>)
 8003800:	6800      	ldr	r0, [r0, #0]
 8003802:	f006 f869 	bl	80098d8 <xQueueGenericSend>
}
 8003806:	bd08      	pop	{r3, pc}
 8003808:	40020000 	.word	0x40020000
 800380c:	200033d0 	.word	0x200033d0

08003810 <cs_sel>:
static void cs_sel() {
 8003810:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 8003812:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <cs_sel+0x1c>)
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	f006 fa53 	bl	8009cc4 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET); //CS LOW
 800381e:	2200      	movs	r2, #0
 8003820:	2110      	movs	r1, #16
 8003822:	4803      	ldr	r0, [pc, #12]	; (8003830 <cs_sel+0x20>)
 8003824:	f002 ff01 	bl	800662a <HAL_GPIO_WritePin>
}
 8003828:	bd08      	pop	{r3, pc}
 800382a:	bf00      	nop
 800382c:	200033d0 	.word	0x200033d0
 8003830:	40020000 	.word	0x40020000

08003834 <EthernetTask>:
	                     .gw 	= {192, 168, 0, 1}};					// Gateway address

EthernetConfig_t ethConf;

void EthernetTask(void const * argument)
{
 8003834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003838:	b086      	sub	sp, #24
	uint8_t first_frame = 1;
	uint8_t remoteIP[4][4];
	uint16_t remotePort[4];
	int32_t rcvSize = 0;

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 800383a:	49ae      	ldr	r1, [pc, #696]	; (8003af4 <EthernetTask+0x2c0>)
 800383c:	48ae      	ldr	r0, [pc, #696]	; (8003af8 <EthernetTask+0x2c4>)
 800383e:	f7fe fe45 	bl	80024cc <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8003842:	49ae      	ldr	r1, [pc, #696]	; (8003afc <EthernetTask+0x2c8>)
 8003844:	48ae      	ldr	r0, [pc, #696]	; (8003b00 <EthernetTask+0x2cc>)
 8003846:	f7fe fe53 	bl	80024f0 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 800384a:	49ae      	ldr	r1, [pc, #696]	; (8003b04 <EthernetTask+0x2d0>)
 800384c:	48ae      	ldr	r0, [pc, #696]	; (8003b08 <EthernetTask+0x2d4>)
 800384e:	f7fe fe67 	bl	8002520 <reg_wizchip_spiburst_cbfunc>

	CLI_Init();
 8003852:	f7fd fee3 	bl	800161c <CLI_Init>

	if(Config_GetEthernetConfig(&ethConf) != CONF_OK){
 8003856:	48ad      	ldr	r0, [pc, #692]	; (8003b0c <EthernetTask+0x2d8>)
 8003858:	f7fd ffd8 	bl	800180c <Config_GetEthernetConfig>
 800385c:	b110      	cbz	r0, 8003864 <EthernetTask+0x30>
		vTaskSuspend(NULL);
 800385e:	2000      	movs	r0, #0
 8003860:	f006 ff84 	bl	800a76c <vTaskSuspend>
	}

	memcpy(&netInfo.gw, &ethConf.gatewayAddress, 4);
 8003864:	4ba9      	ldr	r3, [pc, #676]	; (8003b0c <EthernetTask+0x2d8>)
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	4ca9      	ldr	r4, [pc, #676]	; (8003b10 <EthernetTask+0x2dc>)
 800386a:	f8c4 200e 	str.w	r2, [r4, #14]
	memcpy(&netInfo.ip, &ethConf.ipAddress, 4);
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	f8c4 2006 	str.w	r2, [r4, #6]
	memcpy(&netInfo.mac, &ethConf.macAddress, 6);
 8003874:	461a      	mov	r2, r3
 8003876:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 800387a:	6020      	str	r0, [r4, #0]
 800387c:	8892      	ldrh	r2, [r2, #4]
 800387e:	80a2      	strh	r2, [r4, #4]
	memcpy(&netInfo.sn, &ethConf.subnetMask, 4);
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f8c4 300a 	str.w	r3, [r4, #10]

	wizchip_sw_reset();
 8003886:	f7fe fe63 	bl	8002550 <wizchip_sw_reset>
	wizchip_init(bufSize, bufSize);
 800388a:	48a2      	ldr	r0, [pc, #648]	; (8003b14 <EthernetTask+0x2e0>)
 800388c:	4601      	mov	r1, r0
 800388e:	f7fe fe9b 	bl	80025c8 <wizchip_init>

	wizchip_setnetinfo(&netInfo);
 8003892:	4620      	mov	r0, r4
 8003894:	f7fe fefc 	bl	8002690 <wizchip_setnetinfo>
	wizchip_setinterruptmask(IK_SOCK_3);
 8003898:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800389c:	f7fe feea 	bl	8002674 <wizchip_setinterruptmask>
	wizchip_getnetinfo(&netInfo);
 80038a0:	4620      	mov	r0, r4
 80038a2:	f7fe ff23 	bl	80026ec <wizchip_getnetinfo>

	// Modbus Port
	if(socket(0, Sn_MR_TCP, 502, 0) == 0) {
 80038a6:	2300      	movs	r3, #0
 80038a8:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 80038ac:	2101      	movs	r1, #1
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe fb0a 	bl	8001ec8 <socket>
 80038b4:	b908      	cbnz	r0, 80038ba <EthernetTask+0x86>
		  	  /* Put socket in LISTEN mode. This means we are creating a TCP server */
		if(listen(0) == SOCK_OK) {
 80038b6:	f7fe fbb3 	bl	8002020 <listen>
	//if(socket(2, Sn_MR_TCP, 1883, 0) == 0){

	//}

	// Telnet Port (CLI, debug)
	if(socket(3, Sn_MR_TCP, 23, SF_TCP_NODELAY) == 3){
 80038ba:	2320      	movs	r3, #32
 80038bc:	2217      	movs	r2, #23
 80038be:	2101      	movs	r1, #1
 80038c0:	2003      	movs	r0, #3
 80038c2:	f7fe fb01 	bl	8001ec8 <socket>
 80038c6:	2803      	cmp	r0, #3
 80038c8:	d108      	bne.n	80038dc <EthernetTask+0xa8>
		if(listen(3) == SOCK_OK) {
 80038ca:	f7fe fba9 	bl	8002020 <listen>
 80038ce:	2801      	cmp	r0, #1
 80038d0:	d104      	bne.n	80038dc <EthernetTask+0xa8>
			setSn_IMR(3, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 80038d2:	211f      	movs	r1, #31
 80038d4:	f642 4068 	movw	r0, #11368	; 0x2c68
 80038d8:	f7fe f94c 	bl	8001b74 <WIZCHIP_WRITE>
{
 80038dc:	2701      	movs	r7, #1
	}

  /* Infinite loop */
	for(;;)
	{
		if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 80038de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038e2:	2200      	movs	r2, #0
 80038e4:	4619      	mov	r1, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	f007 fb08 	bl	800aefc <xTaskNotifyWait>
 80038ec:	2801      	cmp	r0, #1
 80038ee:	d1f6      	bne.n	80038de <EthernetTask+0xaa>
 80038f0:	e0d3      	b.n	8003a9a <EthernetTask+0x266>
				if(interruptSource & IK_IP_CONFLICT){

				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_0){
					interrupt = getSn_IR(0);
 80038f2:	f44f 7002 	mov.w	r0, #520	; 0x208
 80038f6:	f7fe f90b 	bl	8001b10 <WIZCHIP_READ>
					if(interrupt & Sn_IR_CON){
 80038fa:	f010 0f01 	tst.w	r0, #1
 80038fe:	f000 80da 	beq.w	8003ab6 <EthernetTask+0x282>
						getsockopt(0, SO_DESTIP, &remoteIP[0]);
 8003902:	aa02      	add	r2, sp, #8
 8003904:	2104      	movs	r1, #4
 8003906:	2000      	movs	r0, #0
 8003908:	f7fe fd1c 	bl	8002344 <getsockopt>
						getsockopt(0, SO_DESTPORT, (uint8_t*)&remotePort[0]);
 800390c:	466a      	mov	r2, sp
 800390e:	2105      	movs	r1, #5
 8003910:	2000      	movs	r0, #0
 8003912:	f7fe fd17 	bl	8002344 <getsockopt>
 8003916:	e0ce      	b.n	8003ab6 <EthernetTask+0x282>
					}
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_1){
					interrupt = getSn_IR(1);
 8003918:	f44f 700a 	mov.w	r0, #552	; 0x228
 800391c:	f7fe f8f8 	bl	8001b10 <WIZCHIP_READ>
					if(interrupt & Sn_IR_CON){
 8003920:	f010 0f01 	tst.w	r0, #1
 8003924:	f000 80cb 	beq.w	8003abe <EthernetTask+0x28a>
						getsockopt(1, SO_DESTIP, &remoteIP[1]);
 8003928:	aa03      	add	r2, sp, #12
 800392a:	2104      	movs	r1, #4
 800392c:	2001      	movs	r0, #1
 800392e:	f7fe fd09 	bl	8002344 <getsockopt>
						getsockopt(1, SO_DESTPORT, (uint8_t*)&remotePort[1]);
 8003932:	f10d 0202 	add.w	r2, sp, #2
 8003936:	2105      	movs	r1, #5
 8003938:	2001      	movs	r0, #1
 800393a:	f7fe fd03 	bl	8002344 <getsockopt>
 800393e:	e0be      	b.n	8003abe <EthernetTask+0x28a>

					}
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_2){
					interrupt = getSn_IR(2);
 8003940:	f44f 7012 	mov.w	r0, #584	; 0x248
 8003944:	f7fe f8e4 	bl	8001b10 <WIZCHIP_READ>
 8003948:	e0bd      	b.n	8003ac6 <EthernetTask+0x292>
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_3){
					freesize = getSn_TxMAX(3);
 800394a:	f641 7068 	movw	r0, #8040	; 0x1f68
 800394e:	f7fe f8df 	bl	8001b10 <WIZCHIP_READ>
 8003952:	b280      	uxth	r0, r0
 8003954:	0280      	lsls	r0, r0, #10
 8003956:	4b70      	ldr	r3, [pc, #448]	; (8003b18 <EthernetTask+0x2e4>)
 8003958:	8018      	strh	r0, [r3, #0]
					interrupt = getSn_IR(3);
 800395a:	f44f 701a 	mov.w	r0, #616	; 0x268
 800395e:	f7fe f8d7 	bl	8001b10 <WIZCHIP_READ>
 8003962:	4605      	mov	r5, r0
					setSn_IR(3, interrupt);
 8003964:	f000 011f 	and.w	r1, r0, #31
 8003968:	f44f 701a 	mov.w	r0, #616	; 0x268
 800396c:	f7fe f902 	bl	8001b74 <WIZCHIP_WRITE>
					if(interrupt & Sn_IR_CON){
 8003970:	f015 0f01 	tst.w	r5, #1
 8003974:	d12d      	bne.n	80039d2 <EthernetTask+0x19e>
						DataLog_LogEvent(EV_TELNET_CONN);
						freesize = send(3, (uint8_t*)gretMsg, 47);
						first_frame = 1;
					}

					if(interrupt & Sn_IR_RECV){
 8003976:	f015 0f04 	tst.w	r5, #4
 800397a:	d007      	beq.n	800398c <EthernetTask+0x158>
						if(first_frame == 0){
 800397c:	2f00      	cmp	r7, #0
 800397e:	d044      	beq.n	8003a0a <EthernetTask+0x1d6>
								freesize = send(3, txBuf, strlen((char*)txBuf));
								vTaskDelay(1);
							}while(xMoreDataToFollow != pdFALSE);
							rcvSize = 0;
						}else{
							recv(3, rcvBuf, 128);
 8003980:	2280      	movs	r2, #128	; 0x80
 8003982:	4966      	ldr	r1, [pc, #408]	; (8003b1c <EthernetTask+0x2e8>)
 8003984:	2003      	movs	r0, #3
 8003986:	f7fe fc6b 	bl	8002260 <recv>
							first_frame = 0;
 800398a:	2700      	movs	r7, #0
						}
					}

					if(interrupt & Sn_IR_SENDOK){
 800398c:	f015 0f10 	tst.w	r5, #16
 8003990:	d16c      	bne.n	8003a6c <EthernetTask+0x238>
						memset(txBuf, 0, TX_BUF_SIZE);
						ClrSiS(3);
					}

					if(interrupt & Sn_IR_DISCON || interrupt & Sn_IR_TIMEOUT){
 8003992:	f015 0f0a 	tst.w	r5, #10
 8003996:	f000 809a 	beq.w	8003ace <EthernetTask+0x29a>
						RuntimeStats_TelnetLastIPSet();
 800399a:	f7ff faf7 	bl	8002f8c <RuntimeStats_TelnetLastIPSet>
						DataLog_LogEvent(EV_TELNET_DISCON);
 800399e:	2003      	movs	r0, #3
 80039a0:	f7fe ff3a 	bl	8002818 <DataLog_LogEvent>
						disconnect(3);
 80039a4:	2003      	movs	r0, #3
 80039a6:	f7fe fb71 	bl	800208c <disconnect>
						if(socket(3, Sn_MR_TCP, 23, SF_TCP_NODELAY) == 3){
 80039aa:	2320      	movs	r3, #32
 80039ac:	2217      	movs	r2, #23
 80039ae:	2101      	movs	r1, #1
 80039b0:	2003      	movs	r0, #3
 80039b2:	f7fe fa89 	bl	8001ec8 <socket>
 80039b6:	2803      	cmp	r0, #3
 80039b8:	f040 8089 	bne.w	8003ace <EthernetTask+0x29a>
							if(listen(3) == SOCK_OK) {
 80039bc:	f7fe fb30 	bl	8002020 <listen>
 80039c0:	2801      	cmp	r0, #1
 80039c2:	f040 8084 	bne.w	8003ace <EthernetTask+0x29a>
								setSn_IMR(3, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 80039c6:	211f      	movs	r1, #31
 80039c8:	f642 4068 	movw	r0, #11368	; 0x2c68
 80039cc:	f7fe f8d2 	bl	8001b74 <WIZCHIP_WRITE>
 80039d0:	e07d      	b.n	8003ace <EthernetTask+0x29a>
						getsockopt(3, SO_DESTIP, &remoteIP[3]);
 80039d2:	aa05      	add	r2, sp, #20
 80039d4:	2104      	movs	r1, #4
 80039d6:	2003      	movs	r0, #3
 80039d8:	f7fe fcb4 	bl	8002344 <getsockopt>
						getsockopt(3, SO_DESTPORT, (uint8_t*)&remotePort[3]);
 80039dc:	f10d 0206 	add.w	r2, sp, #6
 80039e0:	2105      	movs	r1, #5
 80039e2:	2003      	movs	r0, #3
 80039e4:	f7fe fcae 	bl	8002344 <getsockopt>
						RuntimeStats_TelnetCurrIPSet(&remoteIP[3][0]);
 80039e8:	a805      	add	r0, sp, #20
 80039ea:	f7ff fac9 	bl	8002f80 <RuntimeStats_TelnetCurrIPSet>
						RuntimeStats_TelnetTxInc();
 80039ee:	f7ff fabf 	bl	8002f70 <RuntimeStats_TelnetTxInc>
						DataLog_LogEvent(EV_TELNET_CONN);
 80039f2:	2002      	movs	r0, #2
 80039f4:	f7fe ff10 	bl	8002818 <DataLog_LogEvent>
						freesize = send(3, (uint8_t*)gretMsg, 47);
 80039f8:	222f      	movs	r2, #47	; 0x2f
 80039fa:	4949      	ldr	r1, [pc, #292]	; (8003b20 <EthernetTask+0x2ec>)
 80039fc:	2003      	movs	r0, #3
 80039fe:	f7fe fb8d 	bl	800211c <send>
 8003a02:	4b45      	ldr	r3, [pc, #276]	; (8003b18 <EthernetTask+0x2e4>)
 8003a04:	8018      	strh	r0, [r3, #0]
						first_frame = 1;
 8003a06:	2701      	movs	r7, #1
 8003a08:	e7b5      	b.n	8003976 <EthernetTask+0x142>
							RuntimeStats_TelnetRxInc();
 8003a0a:	f7ff faa9 	bl	8002f60 <RuntimeStats_TelnetRxInc>
							rcvSize += recv(3, &rcvBuf[rcvSize], RX_BUF_SIZE);
 8003a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a12:	4942      	ldr	r1, [pc, #264]	; (8003b1c <EthernetTask+0x2e8>)
 8003a14:	2003      	movs	r0, #3
 8003a16:	f7fe fc23 	bl	8002260 <recv>
							while(((rcvBuf[rcvSize - 1] == '\r') || (rcvBuf[rcvSize - 1] == '\n')) && (rcvSize > 0)){
 8003a1a:	e005      	b.n	8003a28 <EthernetTask+0x1f4>
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	dd0a      	ble.n	8003a36 <EthernetTask+0x202>
								rcvBuf[rcvSize - 1] = 0;
 8003a20:	4a3e      	ldr	r2, [pc, #248]	; (8003b1c <EthernetTask+0x2e8>)
 8003a22:	2100      	movs	r1, #0
 8003a24:	54d1      	strb	r1, [r2, r3]
								rcvSize--;
 8003a26:	4618      	mov	r0, r3
							while(((rcvBuf[rcvSize - 1] == '\r') || (rcvBuf[rcvSize - 1] == '\n')) && (rcvSize > 0)){
 8003a28:	1e43      	subs	r3, r0, #1
 8003a2a:	4a3c      	ldr	r2, [pc, #240]	; (8003b1c <EthernetTask+0x2e8>)
 8003a2c:	5cd2      	ldrb	r2, [r2, r3]
 8003a2e:	2a0d      	cmp	r2, #13
 8003a30:	d0f4      	beq.n	8003a1c <EthernetTask+0x1e8>
 8003a32:	2a0a      	cmp	r2, #10
 8003a34:	d0f2      	beq.n	8003a1c <EthernetTask+0x1e8>
								xMoreDataToFollow = FreeRTOS_CLIProcessCommand(&rcvBuf, &txBuf, TX_BUF_SIZE);
 8003a36:	4e3b      	ldr	r6, [pc, #236]	; (8003b24 <EthernetTask+0x2f0>)
 8003a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a3c:	4631      	mov	r1, r6
 8003a3e:	4837      	ldr	r0, [pc, #220]	; (8003b1c <EthernetTask+0x2e8>)
 8003a40:	f008 f96a 	bl	800bd18 <FreeRTOS_CLIProcessCommand>
 8003a44:	4680      	mov	r8, r0
								RuntimeStats_TelnetTxInc();
 8003a46:	f7ff fa93 	bl	8002f70 <RuntimeStats_TelnetTxInc>
								freesize = send(3, txBuf, strlen((char*)txBuf));
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	f7fc fbc8 	bl	80001e0 <strlen>
 8003a50:	b282      	uxth	r2, r0
 8003a52:	4631      	mov	r1, r6
 8003a54:	2003      	movs	r0, #3
 8003a56:	f7fe fb61 	bl	800211c <send>
 8003a5a:	4b2f      	ldr	r3, [pc, #188]	; (8003b18 <EthernetTask+0x2e4>)
 8003a5c:	8018      	strh	r0, [r3, #0]
								vTaskDelay(1);
 8003a5e:	2001      	movs	r0, #1
 8003a60:	f006 fe00 	bl	800a664 <vTaskDelay>
							}while(xMoreDataToFollow != pdFALSE);
 8003a64:	f1b8 0f00 	cmp.w	r8, #0
 8003a68:	d1e5      	bne.n	8003a36 <EthernetTask+0x202>
 8003a6a:	e78f      	b.n	800398c <EthernetTask+0x158>
						memset(txBuf, 0, TX_BUF_SIZE);
 8003a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a70:	2100      	movs	r1, #0
 8003a72:	482c      	ldr	r0, [pc, #176]	; (8003b24 <EthernetTask+0x2f0>)
 8003a74:	f008 fe29 	bl	800c6ca <memset>
						ClrSiS(3);
 8003a78:	2003      	movs	r0, #3
 8003a7a:	f7fe fbe5 	bl	8002248 <ClrSiS>
 8003a7e:	e788      	b.n	8003992 <EthernetTask+0x15e>
					}

				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_4){
					interrupt = getSn_IR(4);
 8003a80:	f44f 7022 	mov.w	r0, #648	; 0x288
 8003a84:	f7fe f844 	bl	8001b10 <WIZCHIP_READ>
 8003a88:	e024      	b.n	8003ad4 <EthernetTask+0x2a0>
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_5){
					interrupt = getSn_IR(5);
 8003a8a:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 8003a8e:	f7fe f83f 	bl	8001b10 <WIZCHIP_READ>
 8003a92:	e022      	b.n	8003ada <EthernetTask+0x2a6>
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_6){
					interrupt = getSn_IR(6);
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_7){
 8003a94:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8003a98:	d127      	bne.n	8003aea <EthernetTask+0x2b6>
			while(HAL_GPIO_ReadPin(ETH_INT_GPIO_Port, ETH_INT_Pin) == 0){
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	4822      	ldr	r0, [pc, #136]	; (8003b28 <EthernetTask+0x2f4>)
 8003a9e:	f002 fdbd 	bl	800661c <HAL_GPIO_ReadPin>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	f47f af1b 	bne.w	80038de <EthernetTask+0xaa>
				interruptSource = wizchip_getinterrupt();
 8003aa8:	f7fe fdd3 	bl	8002652 <wizchip_getinterrupt>
 8003aac:	4604      	mov	r4, r0
				if(interruptSource & IK_SOCK_0){
 8003aae:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003ab2:	f47f af1e 	bne.w	80038f2 <EthernetTask+0xbe>
				if(interruptSource & IK_SOCK_1){
 8003ab6:	f414 7f00 	tst.w	r4, #512	; 0x200
 8003aba:	f47f af2d 	bne.w	8003918 <EthernetTask+0xe4>
				if(interruptSource & IK_SOCK_2){
 8003abe:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8003ac2:	f47f af3d 	bne.w	8003940 <EthernetTask+0x10c>
				if(interruptSource & IK_SOCK_3){
 8003ac6:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8003aca:	f47f af3e 	bne.w	800394a <EthernetTask+0x116>
				if(interruptSource & IK_SOCK_4){
 8003ace:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8003ad2:	d1d5      	bne.n	8003a80 <EthernetTask+0x24c>
				if(interruptSource & IK_SOCK_5){
 8003ad4:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8003ad8:	d1d7      	bne.n	8003a8a <EthernetTask+0x256>
				if(interruptSource & IK_SOCK_6){
 8003ada:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8003ade:	d0d9      	beq.n	8003a94 <EthernetTask+0x260>
					interrupt = getSn_IR(6);
 8003ae0:	f44f 7032 	mov.w	r0, #712	; 0x2c8
 8003ae4:	f7fe f814 	bl	8001b10 <WIZCHIP_READ>
 8003ae8:	e7d4      	b.n	8003a94 <EthernetTask+0x260>
					interrupt = getSn_IR(7);
 8003aea:	f44f 703a 	mov.w	r0, #744	; 0x2e8
 8003aee:	f7fe f80f 	bl	8001b10 <WIZCHIP_READ>
 8003af2:	e7d2      	b.n	8003a9a <EthernetTask+0x266>
 8003af4:	080037ed 	.word	0x080037ed
 8003af8:	08003811 	.word	0x08003811
 8003afc:	080037a5 	.word	0x080037a5
 8003b00:	080037d5 	.word	0x080037d5
 8003b04:	0800378d 	.word	0x0800378d
 8003b08:	080037bd 	.word	0x080037bd
 8003b0c:	20002f8c 	.word	0x20002f8c
 8003b10:	20000038 	.word	0x20000038
 8003b14:	20000030 	.word	0x20000030
 8003b18:	20002d88 	.word	0x20002d88
 8003b1c:	20002d8c 	.word	0x20002d8c
 8003b20:	0800df2c 	.word	0x0800df2c
 8003b24:	20002e8c 	.word	0x20002e8c
 8003b28:	40020400 	.word	0x40020400

08003b2c <NRF_ChipSelect>:

void NRF_ChipSelect (void);

void NRF_ChipDeselect (void);

void NRF_ChipSelect (void){
 8003b2c:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 8003b2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <NRF_ChipSelect+0x1c>)
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	f006 f8c5 	bl	8009cc4 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <NRF_ChipSelect+0x20>)
 8003b42:	f002 fd72 	bl	800662a <HAL_GPIO_WritePin>
}
 8003b46:	bd08      	pop	{r3, pc}
 8003b48:	200033d0 	.word	0x200033d0
 8003b4c:	40020400 	.word	0x40020400

08003b50 <NRF_ChipDeselect>:

void NRF_ChipDeselect (void){
 8003b50:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_SET);
 8003b52:	2201      	movs	r2, #1
 8003b54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b58:	4805      	ldr	r0, [pc, #20]	; (8003b70 <NRF_ChipDeselect+0x20>)
 8003b5a:	f002 fd66 	bl	800662a <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	461a      	mov	r2, r3
 8003b62:	4619      	mov	r1, r3
 8003b64:	4803      	ldr	r0, [pc, #12]	; (8003b74 <NRF_ChipDeselect+0x24>)
 8003b66:	6800      	ldr	r0, [r0, #0]
 8003b68:	f005 feb6 	bl	80098d8 <xQueueGenericSend>
}
 8003b6c:	bd08      	pop	{r3, pc}
 8003b6e:	bf00      	nop
 8003b70:	40020400 	.word	0x40020400
 8003b74:	200033d0 	.word	0x200033d0

08003b78 <RadioTask>:

void RadioTask(void const * argument)
{
 8003b78:	b508      	push	{r3, lr}
	const uint8_t ecoIOinitMSG[] = "IsAlive";
  /* USER CODE BEGIN RadioComm */
	nRF24_Init(&hspi1);
 8003b7a:	480e      	ldr	r0, [pc, #56]	; (8003bb4 <RadioTask+0x3c>)
 8003b7c:	f001 ff38 	bl	80059f0 <nRF24_Init>
	nRF24_SetRXAddress(0, "_ECOE");
 8003b80:	490d      	ldr	r1, [pc, #52]	; (8003bb8 <RadioTask+0x40>)
 8003b82:	2000      	movs	r0, #0
 8003b84:	f001 fd83 	bl	800568e <nRF24_SetRXAddress>
	nRF24_SetRXAddress(1, "_ECOI");
 8003b88:	490c      	ldr	r1, [pc, #48]	; (8003bbc <RadioTask+0x44>)
 8003b8a:	2001      	movs	r0, #1
 8003b8c:	f001 fd7f 	bl	800568e <nRF24_SetRXAddress>
	nRF24_SetTXAddress("_ECOM");
 8003b90:	480b      	ldr	r0, [pc, #44]	; (8003bc0 <RadioTask+0x48>)
 8003b92:	f001 fdbf 	bl	8005714 <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 8003b96:	f001 fd9b 	bl	80056d0 <nRF24_RX_Mode>
	//nRF24_SendData((uint8_t*)ecoIOinitMSG, sizeof(ecoIOinitMSG));

  /* Infinite loop */
  for(;;)
  {
	  if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f007 f9aa 	bl	800aefc <xTaskNotifyWait>
 8003ba8:	2801      	cmp	r0, #1
 8003baa:	d1f6      	bne.n	8003b9a <RadioTask+0x22>
		  nRF24_Event();
 8003bac:	f001 fef2 	bl	8005994 <nRF24_Event>
 8003bb0:	e7f3      	b.n	8003b9a <RadioTask+0x22>
 8003bb2:	bf00      	nop
 8003bb4:	200032f0 	.word	0x200032f0
 8003bb8:	0800df5c 	.word	0x0800df5c
 8003bbc:	0800df64 	.word	0x0800df64
 8003bc0:	0800df6c 	.word	0x0800df6c

08003bc4 <fModbusParseFloat>:
#define CWU_HEATER_PHASE_POWER 		1

float fModbusParseFloat (uint8_t* in_data){
	union float_bytes buffor;

	buffor.bytes[3] = *in_data;
 8003bc4:	7802      	ldrb	r2, [r0, #0]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f362 631f 	bfi	r3, r2, #24, #8
	in_data ++;
	buffor.bytes[2] = *in_data;
 8003bcc:	7842      	ldrb	r2, [r0, #1]
 8003bce:	f362 4317 	bfi	r3, r2, #16, #8
	in_data ++;
	buffor.bytes[1] = *in_data;
 8003bd2:	7882      	ldrb	r2, [r0, #2]
 8003bd4:	f362 230f 	bfi	r3, r2, #8, #8
	in_data ++;
	buffor.bytes[0] = *in_data;
 8003bd8:	78c2      	ldrb	r2, [r0, #3]
 8003bda:	f362 0307 	bfi	r3, r2, #0, #8

	return buffor.value;
 8003bde:	ee00 3a10 	vmov	s0, r3
}
 8003be2:	4770      	bx	lr

08003be4 <RegulationTask>:

ModbusHandler mbPort;

void RegulationTask(void const * argument)
{
 8003be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be6:	ed2d 8b04 	vpush	{d8-d9}
 8003bea:	b0a1      	sub	sp, #132	; 0x84
	uint8_t counter_data_raw[36];
	uint8_t imported_exported_power_raw[8];
	uint8_t receieves = 0;
	uint8_t temperatures_raw[SENSOR_NUMBER * 2];

	regulationData.configStatus = Config_GetRegConfig(&regulationData.parameters);
 8003bec:	4cce      	ldr	r4, [pc, #824]	; (8003f28 <RegulationTask+0x344>)
 8003bee:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 8003bf2:	f7fd fe27 	bl	8001844 <Config_GetRegConfig>
 8003bf6:	f884 006c 	strb.w	r0, [r4, #108]	; 0x6c

	HAL_TIM_PWM_Init(&htim1);
 8003bfa:	4ecc      	ldr	r6, [pc, #816]	; (8003f2c <RegulationTask+0x348>)
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	f004 fe8a 	bl	8008916 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 8003c02:	4dcb      	ldr	r5, [pc, #812]	; (8003f30 <RegulationTask+0x34c>)
 8003c04:	4628      	mov	r0, r5
 8003c06:	f004 fe86 	bl	8008916 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim3);
 8003c0a:	4cca      	ldr	r4, [pc, #808]	; (8003f34 <RegulationTask+0x350>)
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f004 fe82 	bl	8008916 <HAL_TIM_PWM_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003c12:	2100      	movs	r1, #0
 8003c14:	4630      	mov	r0, r6
 8003c16:	f004 ff49 	bl	8008aac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003c1a:	2104      	movs	r1, #4
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	f004 ff45 	bl	8008aac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003c22:	2108      	movs	r1, #8
 8003c24:	4630      	mov	r0, r6
 8003c26:	f004 ff41 	bl	8008aac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	f004 ff3d 	bl	8008aac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003c32:	2104      	movs	r1, #4
 8003c34:	4628      	mov	r0, r5
 8003c36:	f004 ff39 	bl	8008aac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003c3a:	2108      	movs	r1, #8
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f004 ff35 	bl	8008aac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003c42:	2100      	movs	r1, #0
 8003c44:	4620      	mov	r0, r4
 8003c46:	f004 ff31 	bl	8008aac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003c4a:	2104      	movs	r1, #4
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	f004 ff2d 	bl	8008aac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003c52:	2108      	movs	r1, #8
 8003c54:	4620      	mov	r0, r4
 8003c56:	f004 ff29 	bl	8008aac <HAL_TIM_PWM_Start>

	TIM1 -> CCR1 = 500;
 8003c5a:	4ab7      	ldr	r2, [pc, #732]	; (8003f38 <RegulationTask+0x354>)
 8003c5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c60:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1 -> CCR2 = 500;
 8003c62:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1 -> CCR3 = 500;
 8003c64:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM2 -> CCR1 = 500;
 8003c66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c6a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2 -> CCR2 = 500;
 8003c6c:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2 -> CCR3 = 500;
 8003c6e:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM3 -> CCR1 = 500;
 8003c70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c74:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3 -> CCR2 = 500;
 8003c76:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3 -> CCR3 = 500;
 8003c78:	63d3      	str	r3, [r2, #60]	; 0x3c

	//Uchwyty i inne struktury
	mbPort.task =  xTaskGetCurrentTaskHandle();
 8003c7a:	f006 ff7f 	bl	800ab7c <xTaskGetCurrentTaskHandle>
 8003c7e:	4daf      	ldr	r5, [pc, #700]	; (8003f3c <RegulationTask+0x358>)
 8003c80:	60a8      	str	r0, [r5, #8]

	mcp23017_init(&expander1, &hi2c1, 0b0100111);
 8003c82:	4caf      	ldr	r4, [pc, #700]	; (8003f40 <RegulationTask+0x35c>)
 8003c84:	2227      	movs	r2, #39	; 0x27
 8003c86:	49af      	ldr	r1, [pc, #700]	; (8003f44 <RegulationTask+0x360>)
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f7fe fd5d 	bl	8002748 <mcp23017_init>
	mcp23017_iodir(&expander1, 1, 0xFF);
 8003c8e:	22ff      	movs	r2, #255	; 0xff
 8003c90:	2101      	movs	r1, #1
 8003c92:	4620      	mov	r0, r4
 8003c94:	f7fe fd7a 	bl	800278c <mcp23017_iodir>
	mcp23017_iodir(&expander1, 0, 0x03);
 8003c98:	2203      	movs	r2, #3
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f7fe fd75 	bl	800278c <mcp23017_iodir>
	expander1.gpio[0] = 0b11111100;
 8003ca2:	23fc      	movs	r3, #252	; 0xfc
 8003ca4:	71a3      	strb	r3, [r4, #6]
	mcp23017_write_gpio(&expander1, 0);
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f7fe fd8c 	bl	80027c6 <mcp23017_write_gpio>

	vTaskDelay(1000);
 8003cae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cb2:	f006 fcd7 	bl	800a664 <vTaskDelay>

	expander1.gpio[0] = 0;
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	71a1      	strb	r1, [r4, #6]
	mcp23017_write_gpio(&expander1, 0);
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f7fe fd83 	bl	80027c6 <mcp23017_write_gpio>
	vModbusInit(&mbPort, &huart2, 100);
 8003cc0:	2264      	movs	r2, #100	; 0x64
 8003cc2:	49a1      	ldr	r1, [pc, #644]	; (8003f48 <RegulationTask+0x364>)
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	f7ff f839 	bl	8002d3c <vModbusInit>
	float exported_power = 0;
 8003cca:	ed9f 8aa0 	vldr	s16, [pc, #640]	; 8003f4c <RegulationTask+0x368>
	float imported_power = 0;
 8003cce:	eef0 8a48 	vmov.f32	s17, s16
 8003cd2:	e08a      	b.n	8003dea <RegulationTask+0x206>
		receieves = 0;

		if(regulationData.IOsignals.signals.input2 != regulationData.IOsignals.signals.output2){
			regulationData.ControlWord.CWUHeaterError = HIGH;
		}else{
			regulationData.ControlWord.CWUHeaterError = LOW;
 8003cd4:	4b94      	ldr	r3, [pc, #592]	; (8003f28 <RegulationTask+0x344>)
 8003cd6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003cda:	f36f 0200 	bfc	r2, #0, #1
 8003cde:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003ce2:	e09f      	b.n	8003e24 <RegulationTask+0x240>
		}

		if(regulationData.IOsignals.signals.input3 != regulationData.IOsignals.signals.output3){
			regulationData.ControlWord.COHeaterError = HIGH;
		}else{
			regulationData.ControlWord.COHeaterError = LOW;
 8003ce4:	4b90      	ldr	r3, [pc, #576]	; (8003f28 <RegulationTask+0x344>)
 8003ce6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003cea:	f36f 0200 	bfc	r2, #0, #1
 8003cee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003cf2:	e0aa      	b.n	8003e4a <RegulationTask+0x266>
		}

		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
			receieves += 1;
			for(uint8_t i = 0; i < 3; i++){
				regulationData.counter.voltages[i] = fModbusParseFloat(counter_data_raw + i * 4);
 8003cf4:	00a6      	lsls	r6, r4, #2
 8003cf6:	ab0a      	add	r3, sp, #40	; 0x28
 8003cf8:	1998      	adds	r0, r3, r6
 8003cfa:	f7ff ff63 	bl	8003bc4 <fModbusParseFloat>
 8003cfe:	4d8a      	ldr	r5, [pc, #552]	; (8003f28 <RegulationTask+0x344>)
 8003d00:	f104 030a 	add.w	r3, r4, #10
 8003d04:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003d08:	ed83 0a00 	vstr	s0, [r3]
				regulationData.counter.currents[i] = fModbusParseFloat(counter_data_raw + 12 + i * 4);
 8003d0c:	f106 000c 	add.w	r0, r6, #12
 8003d10:	ab0a      	add	r3, sp, #40	; 0x28
 8003d12:	4418      	add	r0, r3
 8003d14:	f7ff ff56 	bl	8003bc4 <fModbusParseFloat>
 8003d18:	f104 030c 	add.w	r3, r4, #12
 8003d1c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003d20:	ed83 0a01 	vstr	s0, [r3, #4]
				regulationData.counter.powers[i] = fModbusParseFloat(counter_data_raw + 24 + 4 * i);
 8003d24:	f106 0018 	add.w	r0, r6, #24
 8003d28:	ab0a      	add	r3, sp, #40	; 0x28
 8003d2a:	4418      	add	r0, r3
 8003d2c:	f7ff ff4a 	bl	8003bc4 <fModbusParseFloat>
 8003d30:	f104 0310 	add.w	r3, r4, #16
 8003d34:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8003d38:	ed85 0a00 	vstr	s0, [r5]
			for(uint8_t i = 0; i < 3; i++){
 8003d3c:	3401      	adds	r4, #1
 8003d3e:	b2e4      	uxtb	r4, r4
 8003d40:	2c02      	cmp	r4, #2
 8003d42:	d9d7      	bls.n	8003cf4 <RegulationTask+0x110>
			receieves += 1;
 8003d44:	2501      	movs	r5, #1
 8003d46:	e08c      	b.n	8003e62 <RegulationTask+0x27e>
			for(uint8_t i = 0; i < 3; i++){
 8003d48:	2400      	movs	r4, #0
 8003d4a:	e7f9      	b.n	8003d40 <RegulationTask+0x15c>
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);

			if(regulationData.counter.power_in_buffor > 0){
				regulationData.counter.power_in_buffor -= (imported_power - last_imported_power);
			}else{
				regulationData.counter.power_in_buffor = 0;
 8003d4c:	4b76      	ldr	r3, [pc, #472]	; (8003f28 <RegulationTask+0x344>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	64da      	str	r2, [r3, #76]	; 0x4c
			}
			regulationData.counter.power_in_buffor += (exported_power - last_exported_power) * ACUMULATED_POWER_FACTOR;
 8003d52:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003d56:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8003f4c <RegulationTask+0x368>
 8003d5a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003d5e:	4b72      	ldr	r3, [pc, #456]	; (8003f28 <RegulationTask+0x344>)
 8003d60:	ed93 8a13 	vldr	s16, [r3, #76]	; 0x4c
 8003d64:	ee38 8a27 	vadd.f32	s16, s16, s15
 8003d68:	ed83 8a13 	vstr	s16, [r3, #76]	; 0x4c
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 8003d6c:	eeb0 8a40 	vmov.f32	s16, s0
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 8003d70:	eef0 8a49 	vmov.f32	s17, s18
		}

		if(vModbusReadInputRegisters(&mbPort, TEMPERATURE_ADDRESS, 0, SENSOR_NUMBER, temperatures_raw) == Modbus_OK){
 8003d74:	ab03      	add	r3, sp, #12
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	230a      	movs	r3, #10
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	486f      	ldr	r0, [pc, #444]	; (8003f3c <RegulationTask+0x358>)
 8003d80:	f7ff f812 	bl	8002da8 <vModbusReadInputRegisters>
 8003d84:	2800      	cmp	r0, #0
 8003d86:	f000 8091 	beq.w	8003eac <RegulationTask+0x2c8>
				temperatures[i] = temp / DEC_PLACES;
			}
			memcpy(&regulationData.counter.CWU_temps[0], &temperatures[0], 24);
		}

		regulationData.counter.counter_present = 1;
 8003d8a:	4b67      	ldr	r3, [pc, #412]	; (8003f28 <RegulationTask+0x344>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	701a      	strb	r2, [r3, #0]
		regulationData.counter.temperatures_present = 1;
 8003d90:	709a      	strb	r2, [r3, #2]
		if(receieves == 7){
 8003d92:	2d07      	cmp	r5, #7
 8003d94:	f000 81a4 	beq.w	80040e0 <RegulationTask+0x4fc>

		}else{

		}

		if((regulationData.ControlWord.COHeaterStateOut == 0) && (regulationData.ControlWord.CWUHeaterStateOut == 0)){
 8003d98:	4b63      	ldr	r3, [pc, #396]	; (8003f28 <RegulationTask+0x344>)
 8003d9a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003d9e:	f013 0f01 	tst.w	r3, #1
 8003da2:	f040 8266 	bne.w	8004272 <RegulationTask+0x68e>
			regulationData.IOsignals.signals.output1 = 1;
 8003da6:	4a60      	ldr	r2, [pc, #384]	; (8003f28 <RegulationTask+0x344>)
 8003da8:	f892 306a 	ldrb.w	r3, [r2, #106]	; 0x6a
 8003dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db0:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
		}else{
			regulationData.IOsignals.signals.output1 = 0;
		}

		TIM3 -> CCR1 = regulationData.counter.CWU_heater_PWM[0];
 8003db4:	4b5c      	ldr	r3, [pc, #368]	; (8003f28 <RegulationTask+0x344>)
 8003db6:	8899      	ldrh	r1, [r3, #4]
 8003db8:	4a65      	ldr	r2, [pc, #404]	; (8003f50 <RegulationTask+0x36c>)
 8003dba:	6351      	str	r1, [r2, #52]	; 0x34
		TIM3 -> CCR2 = regulationData.counter.CWU_heater_PWM[1];
 8003dbc:	88d9      	ldrh	r1, [r3, #6]
 8003dbe:	6391      	str	r1, [r2, #56]	; 0x38
		TIM3 -> CCR3 = regulationData.counter.CWU_heater_PWM[2];
 8003dc0:	8919      	ldrh	r1, [r3, #8]
 8003dc2:	63d1      	str	r1, [r2, #60]	; 0x3c

		TIM1 -> CCR1 = regulationData.counter.CO_heater_PWM[0];
 8003dc4:	8959      	ldrh	r1, [r3, #10]
 8003dc6:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8003dca:	6351      	str	r1, [r2, #52]	; 0x34
		TIM1 -> CCR2 = regulationData.counter.CO_heater_PWM[1];
 8003dcc:	8999      	ldrh	r1, [r3, #12]
 8003dce:	6391      	str	r1, [r2, #56]	; 0x38
		TIM1 -> CCR3 = regulationData.counter.CO_heater_PWM[2];
 8003dd0:	89d9      	ldrh	r1, [r3, #14]
 8003dd2:	63d1      	str	r1, [r2, #60]	; 0x3c

		expander1.gpio[MCP23017_PORTA] = regulationData.IOsignals.ports.portA;
 8003dd4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003dd8:	4859      	ldr	r0, [pc, #356]	; (8003f40 <RegulationTask+0x35c>)
 8003dda:	7183      	strb	r3, [r0, #6]
		mcp23017_write_gpio(&expander1, 0);
 8003ddc:	2100      	movs	r1, #0
 8003dde:	f7fe fcf2 	bl	80027c6 <mcp23017_write_gpio>
		//vTaskDelayUntil(&xLastWakeTime, xDelay);
		vTaskDelay(1000);
 8003de2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003de6:	f006 fc3d 	bl	800a664 <vTaskDelay>
		mcp23017_read_gpio(&expander1, 0);
 8003dea:	4c55      	ldr	r4, [pc, #340]	; (8003f40 <RegulationTask+0x35c>)
 8003dec:	2100      	movs	r1, #0
 8003dee:	4620      	mov	r0, r4
 8003df0:	f7fe fcd7 	bl	80027a2 <mcp23017_read_gpio>
		mcp23017_read_gpio(&expander1, 1);
 8003df4:	2101      	movs	r1, #1
 8003df6:	4620      	mov	r0, r4
 8003df8:	f7fe fcd3 	bl	80027a2 <mcp23017_read_gpio>
		regulationData.IOsignals.bytes[0] = expander1.gpio[0];
 8003dfc:	79a3      	ldrb	r3, [r4, #6]
 8003dfe:	494a      	ldr	r1, [pc, #296]	; (8003f28 <RegulationTask+0x344>)
 8003e00:	f881 306a 	strb.w	r3, [r1, #106]	; 0x6a
		regulationData.IOsignals.bytes[1] = expander1.gpio[1];
 8003e04:	79e2      	ldrb	r2, [r4, #7]
 8003e06:	f881 206b 	strb.w	r2, [r1, #107]	; 0x6b
		if(regulationData.IOsignals.signals.input2 != regulationData.IOsignals.signals.output2){
 8003e0a:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8003e0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e12:	429a      	cmp	r2, r3
 8003e14:	f43f af5e 	beq.w	8003cd4 <RegulationTask+0xf0>
			regulationData.ControlWord.CWUHeaterError = HIGH;
 8003e18:	f891 3068 	ldrb.w	r3, [r1, #104]	; 0x68
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	f881 3068 	strb.w	r3, [r1, #104]	; 0x68
		if(regulationData.IOsignals.signals.input3 != regulationData.IOsignals.signals.output3){
 8003e24:	4b40      	ldr	r3, [pc, #256]	; (8003f28 <RegulationTask+0x344>)
 8003e26:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 8003e2a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8003e2e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003e32:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003e36:	429a      	cmp	r2, r3
 8003e38:	f43f af54 	beq.w	8003ce4 <RegulationTask+0x100>
			regulationData.ControlWord.COHeaterError = HIGH;
 8003e3c:	4a3a      	ldr	r2, [pc, #232]	; (8003f28 <RegulationTask+0x344>)
 8003e3e:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
 8003e4a:	ab0a      	add	r3, sp, #40	; 0x28
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	2312      	movs	r3, #18
 8003e50:	2200      	movs	r2, #0
 8003e52:	2101      	movs	r1, #1
 8003e54:	4839      	ldr	r0, [pc, #228]	; (8003f3c <RegulationTask+0x358>)
 8003e56:	f7fe ffa7 	bl	8002da8 <vModbusReadInputRegisters>
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	f43f af74 	beq.w	8003d48 <RegulationTask+0x164>
		receieves = 0;
 8003e60:	2500      	movs	r5, #0
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, IMPORTED_ACTIVE_POWER, 4, imported_exported_power_raw) == Modbus_OK){
 8003e62:	ab08      	add	r3, sp, #32
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	2304      	movs	r3, #4
 8003e68:	2248      	movs	r2, #72	; 0x48
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	4833      	ldr	r0, [pc, #204]	; (8003f3c <RegulationTask+0x358>)
 8003e6e:	f7fe ff9b 	bl	8002da8 <vModbusReadInputRegisters>
 8003e72:	2800      	cmp	r0, #0
 8003e74:	f47f af7e 	bne.w	8003d74 <RegulationTask+0x190>
			receieves += 2;
 8003e78:	3502      	adds	r5, #2
 8003e7a:	b2ed      	uxtb	r5, r5
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 8003e7c:	a808      	add	r0, sp, #32
 8003e7e:	f7ff fea1 	bl	8003bc4 <fModbusParseFloat>
 8003e82:	eeb0 9a40 	vmov.f32	s18, s0
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 8003e86:	a809      	add	r0, sp, #36	; 0x24
 8003e88:	f7ff fe9c 	bl	8003bc4 <fModbusParseFloat>
			if(regulationData.counter.power_in_buffor > 0){
 8003e8c:	4b26      	ldr	r3, [pc, #152]	; (8003f28 <RegulationTask+0x344>)
 8003e8e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003e92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9a:	f77f af57 	ble.w	8003d4c <RegulationTask+0x168>
				regulationData.counter.power_in_buffor -= (imported_power - last_imported_power);
 8003e9e:	ee79 8a68 	vsub.f32	s17, s18, s17
 8003ea2:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8003ea6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 8003eaa:	e752      	b.n	8003d52 <RegulationTask+0x16e>
			receieves += 4;
 8003eac:	3504      	adds	r5, #4
 8003eae:	b2ed      	uxtb	r5, r5
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 8003eb0:	2400      	movs	r4, #0
 8003eb2:	e01b      	b.n	8003eec <RegulationTask+0x308>
				int16_t temp = temperatures_raw[i * 2];
 8003eb4:	0063      	lsls	r3, r4, #1
 8003eb6:	aa20      	add	r2, sp, #128	; 0x80
 8003eb8:	441a      	add	r2, r3
 8003eba:	f812 2c74 	ldrb.w	r2, [r2, #-116]
				temp += temperatures_raw[i*2 + 1];
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	a920      	add	r1, sp, #128	; 0x80
 8003ec2:	440b      	add	r3, r1
 8003ec4:	f813 0c74 	ldrb.w	r0, [r3, #-116]
 8003ec8:	eb00 2002 	add.w	r0, r0, r2, lsl #8
				temperatures[i] = temp / DEC_PLACES;
 8003ecc:	b200      	sxth	r0, r0
 8003ece:	f7fc fb31 	bl	8000534 <__aeabi_i2d>
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	4b1f      	ldr	r3, [pc, #124]	; (8003f54 <RegulationTask+0x370>)
 8003ed6:	f7fc fcc1 	bl	800085c <__aeabi_ddiv>
 8003eda:	f7fc fdc7 	bl	8000a6c <__aeabi_d2f>
 8003ede:	ab20      	add	r3, sp, #128	; 0x80
 8003ee0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003ee4:	f843 0c28 	str.w	r0, [r3, #-40]
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 8003ee8:	3401      	adds	r4, #1
 8003eea:	b2e4      	uxtb	r4, r4
 8003eec:	2c09      	cmp	r4, #9
 8003eee:	d9e1      	bls.n	8003eb4 <RegulationTask+0x2d0>
			memcpy(&regulationData.counter.CWU_temps[0], &temperatures[0], 24);
 8003ef0:	4c19      	ldr	r4, [pc, #100]	; (8003f58 <RegulationTask+0x374>)
 8003ef2:	ae16      	add	r6, sp, #88	; 0x58
 8003ef4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ef8:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003efc:	e884 0003 	stmia.w	r4, {r0, r1}
 8003f00:	e743      	b.n	8003d8a <RegulationTask+0x1a6>
					available_power[i]  = -regulationData.counter.powers[i] * regulationData.parameters.heater_power_coeff / 100.0f;
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <RegulationTask+0x344>)
 8003f04:	f993 307c 	ldrsb.w	r3, [r3, #124]	; 0x7c
 8003f08:	ee07 3a10 	vmov	s14, r3
 8003f0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003f10:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8003f14:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003f5c <RegulationTask+0x378>
 8003f18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003f1c:	ab20      	add	r3, sp, #128	; 0x80
 8003f1e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003f22:	ed03 7a0d 	vstr	s14, [r3, #-52]	; 0xffffffcc
 8003f26:	e080      	b.n	800402a <RegulationTask+0x446>
 8003f28:	200001a4 	.word	0x200001a4
 8003f2c:	20003270 	.word	0x20003270
 8003f30:	20003348 	.word	0x20003348
 8003f34:	200030e4 	.word	0x200030e4
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	20002fa0 	.word	0x20002fa0
 8003f40:	20002fac 	.word	0x20002fac
 8003f44:	20003088 	.word	0x20003088
 8003f48:	20003388 	.word	0x20003388
 8003f4c:	00000000 	.word	0x00000000
 8003f50:	40000400 	.word	0x40000400
 8003f54:	40240000 	.word	0x40240000
 8003f58:	200001f4 	.word	0x200001f4
 8003f5c:	42c80000 	.word	0x42c80000
					regulationData.counter.CO_heater_max_power[i] = 0.0f;
 8003f60:	1d2b      	adds	r3, r5, #4
 8003f62:	4ac8      	ldr	r2, [pc, #800]	; (8004284 <RegulationTask+0x6a0>)
 8003f64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	e084      	b.n	8004078 <RegulationTask+0x494>
					regulationData.counter.CWU_heater_max_power[i] = 0.0f;
 8003f6e:	1dab      	adds	r3, r5, #6
 8003f70:	4ac4      	ldr	r2, [pc, #784]	; (8004284 <RegulationTask+0x6a0>)
 8003f72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003f76:	2200      	movs	r2, #0
 8003f78:	605a      	str	r2, [r3, #4]
				if(regulationData.counter.voltages[i] > 200.0){
 8003f7a:	f105 030a 	add.w	r3, r5, #10
 8003f7e:	4ac1      	ldr	r2, [pc, #772]	; (8004284 <RegulationTask+0x6a0>)
 8003f80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003f84:	ed93 7a00 	vldr	s14, [r3]
 8003f88:	eddf 7abf 	vldr	s15, [pc, #764]	; 8004288 <RegulationTask+0x6a4>
 8003f8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f94:	f340 809a 	ble.w	80040cc <RegulationTask+0x4e8>
					regulationData.counter.CO_heater_PWM[i] = (uint32_t)(regulationData.counter.CO_heater_max_power[i] * 1000.0);
 8003f98:	4616      	mov	r6, r2
 8003f9a:	1d2f      	adds	r7, r5, #4
 8003f9c:	eb02 0387 	add.w	r3, r2, r7, lsl #2
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	f7fc fad9 	bl	8000558 <__aeabi_f2d>
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	4bb8      	ldr	r3, [pc, #736]	; (800428c <RegulationTask+0x6a8>)
 8003faa:	f7fc fb2d 	bl	8000608 <__aeabi_dmul>
 8003fae:	f7fc fd3d 	bl	8000a2c <__aeabi_d2uiz>
 8003fb2:	eb06 0747 	add.w	r7, r6, r7, lsl #1
 8003fb6:	8078      	strh	r0, [r7, #2]
					regulationData.counter.CWU_heater_PWM[i] = (uint32_t)(regulationData.counter.CWU_heater_max_power[i] * 1000.0);
 8003fb8:	1dab      	adds	r3, r5, #6
 8003fba:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003fbe:	6858      	ldr	r0, [r3, #4]
 8003fc0:	f7fc faca 	bl	8000558 <__aeabi_f2d>
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	4bb1      	ldr	r3, [pc, #708]	; (800428c <RegulationTask+0x6a8>)
 8003fc8:	f7fc fb1e 	bl	8000608 <__aeabi_dmul>
 8003fcc:	f7fc fd2e 	bl	8000a2c <__aeabi_d2uiz>
 8003fd0:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 8003fd4:	80a8      	strh	r0, [r5, #4]
			for(uint8_t i = 0; i < 3; i ++){
 8003fd6:	3401      	adds	r4, #1
 8003fd8:	b2e4      	uxtb	r4, r4
 8003fda:	2c02      	cmp	r4, #2
 8003fdc:	f200 8082 	bhi.w	80040e4 <RegulationTask+0x500>
				if(regulationData.counter.powers[i] > 0){
 8003fe0:	4625      	mov	r5, r4
 8003fe2:	f104 0310 	add.w	r3, r4, #16
 8003fe6:	4aa7      	ldr	r2, [pc, #668]	; (8004284 <RegulationTask+0x6a0>)
 8003fe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003fec:	edd3 7a00 	vldr	s15, [r3]
 8003ff0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff8:	dd83      	ble.n	8003f02 <RegulationTask+0x31e>
					available_power[i] = ((regulationData.parameters.net_max_power / 3.0f) - regulationData.counter.powers[i]) * regulationData.parameters.heater_power_coeff;
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	f8d2 2075 	ldr.w	r2, [r2, #117]	; 0x75
 8004000:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004004:	ee07 2a10 	vmov	s14, r2
 8004008:	ee87 7a26 	vdiv.f32	s14, s14, s13
 800400c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004010:	f993 307c 	ldrsb.w	r3, [r3, #124]	; 0x7c
 8004014:	ee07 3a90 	vmov	s15, r3
 8004018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800401c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004020:	ab20      	add	r3, sp, #128	; 0x80
 8004022:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004026:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
				if(regulationData.parameters.CO_heater_power > 0.0f){
 800402a:	4b96      	ldr	r3, [pc, #600]	; (8004284 <RegulationTask+0x6a0>)
 800402c:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403c:	dd90      	ble.n	8003f60 <RegulationTask+0x37c>
					regulationData.counter.CO_heater_max_power[i] = available_power[i] / regulationData.parameters.CO_heater_power / 3.0f;
 800403e:	ab20      	add	r3, sp, #128	; 0x80
 8004040:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004044:	ed13 7a0d 	vldr	s14, [r3, #-52]	; 0xffffffcc
 8004048:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800404c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004054:	1d2b      	adds	r3, r5, #4
 8004056:	4a8b      	ldr	r2, [pc, #556]	; (8004284 <RegulationTask+0x6a0>)
 8004058:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800405c:	edc3 7a00 	vstr	s15, [r3]
					if(regulationData.counter.CO_heater_max_power[i] > 1.0f) regulationData.counter.CO_heater_max_power[i] = 1.0f;
 8004060:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406c:	dd04      	ble.n	8004078 <RegulationTask+0x494>
 800406e:	1d2b      	adds	r3, r5, #4
 8004070:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004074:	ed83 7a00 	vstr	s14, [r3]
				if(regulationData.parameters.CWU_heater_power > 0.0f){
 8004078:	4b82      	ldr	r3, [pc, #520]	; (8004284 <RegulationTask+0x6a0>)
 800407a:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800408a:	f77f af70 	ble.w	8003f6e <RegulationTask+0x38a>
					regulationData.counter.CWU_heater_max_power[i] = available_power[i] / regulationData.parameters.CWU_heater_power / 3.0f;
 800408e:	ab20      	add	r3, sp, #128	; 0x80
 8004090:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004094:	ed13 7a0d 	vldr	s14, [r3, #-52]	; 0xffffffcc
 8004098:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800409c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80040a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040a4:	1dab      	adds	r3, r5, #6
 80040a6:	4a77      	ldr	r2, [pc, #476]	; (8004284 <RegulationTask+0x6a0>)
 80040a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80040ac:	edc3 7a01 	vstr	s15, [r3, #4]
					if(regulationData.counter.CWU_heater_max_power[i] > 1.0f) regulationData.counter.CWU_heater_max_power[i] = 1.0f;
 80040b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040bc:	f77f af5d 	ble.w	8003f7a <RegulationTask+0x396>
 80040c0:	1dab      	adds	r3, r5, #6
 80040c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80040c6:	ed83 7a01 	vstr	s14, [r3, #4]
 80040ca:	e756      	b.n	8003f7a <RegulationTask+0x396>
					regulationData.counter.CO_heater_PWM[i] = 0;
 80040cc:	4b6d      	ldr	r3, [pc, #436]	; (8004284 <RegulationTask+0x6a0>)
 80040ce:	1d2a      	adds	r2, r5, #4
 80040d0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80040d4:	2100      	movs	r1, #0
 80040d6:	8051      	strh	r1, [r2, #2]
					regulationData.counter.CWU_heater_PWM[i] = 0;
 80040d8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80040dc:	80a9      	strh	r1, [r5, #4]
 80040de:	e77a      	b.n	8003fd6 <RegulationTask+0x3f2>
			for(uint8_t i = 0; i < 3; i ++){
 80040e0:	2400      	movs	r4, #0
 80040e2:	e77a      	b.n	8003fda <RegulationTask+0x3f6>
			if(regulationData.counter.CWU_temps[0] < regulationData.parameters.CWU_hi_temp){
 80040e4:	4b67      	ldr	r3, [pc, #412]	; (8004284 <RegulationTask+0x6a0>)
 80040e6:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80040ea:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fe:	d515      	bpl.n	800412c <RegulationTask+0x548>
				if(regulationData.counter.CWU_temps[1] < regulationData.parameters.CWU_lo_temp){
 8004100:	4b60      	ldr	r3, [pc, #384]	; (8004284 <RegulationTask+0x6a0>)
 8004102:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8004106:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411a:	d50e      	bpl.n	800413a <RegulationTask+0x556>
					regulationData.ControlWord.CWUHeaterStateOut = HIGH;
 800411c:	4a59      	ldr	r2, [pc, #356]	; (8004284 <RegulationTask+0x6a0>)
 800411e:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 800412a:	e006      	b.n	800413a <RegulationTask+0x556>
				regulationData.ControlWord.CWUHeaterStateOut = LOW;
 800412c:	4b55      	ldr	r3, [pc, #340]	; (8004284 <RegulationTask+0x6a0>)
 800412e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8004132:	f36f 0200 	bfc	r2, #0, #1
 8004136:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.counter.CO_temps[0] < regulationData.parameters.CO_hi_temp){
 800413a:	4b52      	ldr	r3, [pc, #328]	; (8004284 <RegulationTask+0x6a0>)
 800413c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8004140:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8004144:	ee07 3a90 	vmov	s15, r3
 8004148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800414c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004154:	d515      	bpl.n	8004182 <RegulationTask+0x59e>
				if(regulationData.counter.CO_temps[3] < regulationData.parameters.CO_lo_temp){
 8004156:	4b4b      	ldr	r3, [pc, #300]	; (8004284 <RegulationTask+0x6a0>)
 8004158:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800415c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8004160:	ee07 3a90 	vmov	s15, r3
 8004164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004168:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800416c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004170:	d50e      	bpl.n	8004190 <RegulationTask+0x5ac>
					regulationData.ControlWord.COHeaterStateOut = HIGH;
 8004172:	4a44      	ldr	r2, [pc, #272]	; (8004284 <RegulationTask+0x6a0>)
 8004174:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8004180:	e006      	b.n	8004190 <RegulationTask+0x5ac>
				regulationData.ControlWord.COHeaterStateOut = LOW;
 8004182:	4b40      	ldr	r3, [pc, #256]	; (8004284 <RegulationTask+0x6a0>)
 8004184:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8004188:	f36f 0200 	bfc	r2, #0, #1
 800418c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.ControlWord.COHeaterStateOut){
 8004190:	4b3c      	ldr	r3, [pc, #240]	; (8004284 <RegulationTask+0x6a0>)
 8004192:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004196:	f013 0f01 	tst.w	r3, #1
 800419a:	d006      	beq.n	80041aa <RegulationTask+0x5c6>
				regulationData.ControlWord.CWUHeaterStateOut = LOW;
 800419c:	4b39      	ldr	r3, [pc, #228]	; (8004284 <RegulationTask+0x6a0>)
 800419e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80041a2:	f36f 0200 	bfc	r2, #0, #1
 80041a6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.IOsignals.signals.input1 == HIGH){
 80041aa:	4b36      	ldr	r3, [pc, #216]	; (8004284 <RegulationTask+0x6a0>)
 80041ac:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80041b0:	f013 0f01 	tst.w	r3, #1
 80041b4:	d047      	beq.n	8004246 <RegulationTask+0x662>
				if(regulationData.IOsignals.signals.input4 == LOW ||
 80041b6:	4b33      	ldr	r3, [pc, #204]	; (8004284 <RegulationTask+0x6a0>)
 80041b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041ba:	f023 4377 	bic.w	r3, r3, #4143972352	; 0xf7000000
 80041be:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80041c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041c6:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80041ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ce:	d006      	beq.n	80041de <RegulationTask+0x5fa>
					regulationData.ControlWord.CWUHeaterStateOut = LOW;
 80041d0:	4b2c      	ldr	r3, [pc, #176]	; (8004284 <RegulationTask+0x6a0>)
 80041d2:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80041d6:	f36f 0200 	bfc	r2, #0, #1
 80041da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				if(regulationData.IOsignals.signals.input5 == LOW &&
 80041de:	4b29      	ldr	r3, [pc, #164]	; (8004284 <RegulationTask+0x6a0>)
 80041e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041e2:	f023 436f 	bic.w	r3, r3, #4009754624	; 0xef000000
 80041e6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80041ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ee:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d00a      	beq.n	800420c <RegulationTask+0x628>
				if(regulationData.ControlWord.CWUHeaterStateOut == LOW){
 80041f6:	4b23      	ldr	r3, [pc, #140]	; (8004284 <RegulationTask+0x6a0>)
 80041f8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80041fc:	f013 0301 	ands.w	r3, r3, #1
 8004200:	d015      	beq.n	800422e <RegulationTask+0x64a>
				if(regulationData.ControlWord.COHeaterStateOut == LOW){
 8004202:	2b00      	cmp	r3, #0
 8004204:	f47f adc8 	bne.w	8003d98 <RegulationTask+0x1b4>
					for(int i = 0; i < 3; i++){
 8004208:	2300      	movs	r3, #0
 800420a:	e019      	b.n	8004240 <RegulationTask+0x65c>
					regulationData.ControlWord.CWUHeaterStateOut = LOW;
 800420c:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <RegulationTask+0x6a0>)
 800420e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8004212:	f36f 0200 	bfc	r2, #0, #1
 8004216:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800421a:	e7ec      	b.n	80041f6 <RegulationTask+0x612>
						regulationData.counter.CWU_heater_PWM[i] = 0;
 800421c:	4919      	ldr	r1, [pc, #100]	; (8004284 <RegulationTask+0x6a0>)
 800421e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8004222:	2000      	movs	r0, #0
 8004224:	8088      	strh	r0, [r1, #4]
					for(int i = 0; i < 3; i++){
 8004226:	3201      	adds	r2, #1
 8004228:	2a02      	cmp	r2, #2
 800422a:	ddf7      	ble.n	800421c <RegulationTask+0x638>
 800422c:	e7e9      	b.n	8004202 <RegulationTask+0x61e>
 800422e:	2200      	movs	r2, #0
 8004230:	e7fa      	b.n	8004228 <RegulationTask+0x644>
						regulationData.counter.CO_heater_PWM[i] = 0;
 8004232:	1d19      	adds	r1, r3, #4
 8004234:	4a13      	ldr	r2, [pc, #76]	; (8004284 <RegulationTask+0x6a0>)
 8004236:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800423a:	2100      	movs	r1, #0
 800423c:	8051      	strh	r1, [r2, #2]
					for(int i = 0; i < 3; i++){
 800423e:	3301      	adds	r3, #1
 8004240:	2b02      	cmp	r3, #2
 8004242:	ddf6      	ble.n	8004232 <RegulationTask+0x64e>
 8004244:	e5a8      	b.n	8003d98 <RegulationTask+0x1b4>
				regulationData.ControlWord.COHeaterStateOut = LOW;
 8004246:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <RegulationTask+0x6a0>)
 8004248:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800424c:	f36f 0200 	bfc	r2, #0, #1
 8004250:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				for(int i = 0; i < 3; i++){
 8004254:	2300      	movs	r3, #0
 8004256:	e009      	b.n	800426c <RegulationTask+0x688>
					regulationData.counter.CO_heater_PWM[i] = 0;
 8004258:	4a0a      	ldr	r2, [pc, #40]	; (8004284 <RegulationTask+0x6a0>)
 800425a:	1d19      	adds	r1, r3, #4
 800425c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004260:	2000      	movs	r0, #0
 8004262:	8048      	strh	r0, [r1, #2]
					regulationData.counter.CWU_heater_PWM[i] = 0;
 8004264:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004268:	8090      	strh	r0, [r2, #4]
				for(int i = 0; i < 3; i++){
 800426a:	3301      	adds	r3, #1
 800426c:	2b02      	cmp	r3, #2
 800426e:	ddf3      	ble.n	8004258 <RegulationTask+0x674>
 8004270:	e592      	b.n	8003d98 <RegulationTask+0x1b4>
			regulationData.IOsignals.signals.output1 = 0;
 8004272:	4b04      	ldr	r3, [pc, #16]	; (8004284 <RegulationTask+0x6a0>)
 8004274:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 8004278:	f36f 12c7 	bfc	r2, #7, #1
 800427c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8004280:	e598      	b.n	8003db4 <RegulationTask+0x1d0>
 8004282:	bf00      	nop
 8004284:	200001a4 	.word	0x200001a4
 8004288:	43480000 	.word	0x43480000
 800428c:	408f4000 	.word	0x408f4000

08004290 <RegulationTask_GetData>:
  /* USER CODE END PowerRegulation */
}

RegTaskData_t* RegulationTask_GetData (void){
	return &regulationData;
}
 8004290:	4800      	ldr	r0, [pc, #0]	; (8004294 <RegulationTask_GetData+0x4>)
 8004292:	4770      	bx	lr
 8004294:	200001a4 	.word	0x200001a4

08004298 <UARTDMA_UartIrqHandler>:



void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8004298:	6802      	ldr	r2, [r0, #0]
 800429a:	6813      	ldr	r3, [r2, #0]
 800429c:	6819      	ldr	r1, [r3, #0]
 800429e:	f011 0f10 	tst.w	r1, #16
 80042a2:	d00e      	beq.n	80042c2 <UARTDMA_UartIrqHandler+0x2a>
{
 80042a4:	b082      	sub	sp, #8
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80042a6:	6819      	ldr	r1, [r3, #0]
 80042a8:	9101      	str	r1, [sp, #4]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	9301      	str	r3, [sp, #4]
		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80042ae:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	6813      	ldr	r3, [r2, #0]
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	6013      	str	r3, [r2, #0]
		tmp = tmp; // For unused warning
 80042ba:	9b01      	ldr	r3, [sp, #4]
 80042bc:	9301      	str	r3, [sp, #4]
	}
}
 80042be:	b002      	add	sp, #8
 80042c0:	4770      	bx	lr
 80042c2:	4770      	bx	lr

080042c4 <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma){
 80042c4:	b570      	push	{r4, r5, r6, lr}
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t Reserved0;
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 80042c6:	6803      	ldr	r3, [r0, #0]
 80042c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ca:	6d9d      	ldr	r5, [r3, #88]	; 0x58

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	f012 0f10 	tst.w	r2, #16
 80042d4:	d038      	beq.n	8004348 <UARTDMA_DmaIrqHandler+0x84>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 80042d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042d8:	2320      	movs	r3, #32
 80042da:	4093      	lsls	r3, r2
 80042dc:	60ab      	str	r3, [r5, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 80042de:	6803      	ldr	r3, [r0, #0]
 80042e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685e      	ldr	r6, [r3, #4]
 80042e6:	f1c6 061e 	rsb	r6, r6, #30

		//huartdma->length += Length;
		huartdma->length = Length;
 80042ea:	f880 60a2 	strb.w	r6, [r0, #162]	; 0xa2

		for(i = 0; i < Length; i++){
 80042ee:	2200      	movs	r2, #0
 80042f0:	e00c      	b.n	800430c <UARTDMA_DmaIrqHandler+0x48>
			huartdma->UART_Buffer[huartdma->UartBufferTail] = huartdma->DMA_RX_Buffer[i];
 80042f2:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 80042f6:	1881      	adds	r1, r0, r2
 80042f8:	790c      	ldrb	r4, [r1, #4]
 80042fa:	18c1      	adds	r1, r0, r3
 80042fc:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
			huartdma->UartBufferTail++;
 8004300:	3301      	adds	r3, #1
			huartdma->UartBufferTail &= 127;
 8004302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004306:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		for(i = 0; i < Length; i++){
 800430a:	3201      	adds	r2, #1
 800430c:	42b2      	cmp	r2, r6
 800430e:	d3f0      	bcc.n	80042f2 <UARTDMA_DmaIrqHandler+0x2e>
 8004310:	4604      	mov	r4, r0
		}

		huartdma -> callback();
 8004312:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 8004316:	4798      	blx	r3

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8004318:	4623      	mov	r3, r4
 800431a:	f853 2b04 	ldr.w	r2, [r3], #4
 800431e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004320:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8004322:	223f      	movs	r2, #63	; 0x3f
 8004324:	408a      	lsls	r2, r1
 8004326:	60aa      	str	r2, [r5, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8004328:	6822      	ldr	r2, [r4, #0]
 800432a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	60d3      	str	r3, [r2, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	221e      	movs	r2, #30
 8004338:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	6813      	ldr	r3, [r2, #0]
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	6013      	str	r3, [r2, #0]
	}
}
 8004348:	bd70      	pop	{r4, r5, r6, pc}

0800434a <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800434a:	b510      	push	{r4, lr}
 800434c:	4604      	mov	r4, r0
	huartdma->huart = huart;
 800434e:	6001      	str	r1, [r0, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8004350:	680a      	ldr	r2, [r1, #0]
 8004352:	68d3      	ldr	r3, [r2, #12]
 8004354:	f043 0310 	orr.w	r3, r3, #16
 8004358:	60d3      	str	r3, [r2, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800435a:	4601      	mov	r1, r0
 800435c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	6813      	ldr	r3, [r2, #0]
 8004366:	f043 0310 	orr.w	r3, r3, #16
 800436a:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 800436c:	221e      	movs	r2, #30
 800436e:	6800      	ldr	r0, [r0, #0]
 8004370:	f004 fe6e 	bl	8009050 <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_HTIE; // Disable DMA Half Complete interrupt
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	6813      	ldr	r3, [r2, #0]
 800437c:	f023 0308 	bic.w	r3, r3, #8
 8004380:	6013      	str	r3, [r2, #0]
}
 8004382:	bd10      	pop	{r4, pc}

08004384 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004384:	4b03      	ldr	r3, [pc, #12]	; (8004394 <vApplicationGetIdleTaskMemory+0x10>)
 8004386:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <vApplicationGetIdleTaskMemory+0x14>)
 800438a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800438c:	2380      	movs	r3, #128	; 0x80
 800438e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	20000434 	.word	0x20000434
 8004398:	20000234 	.word	0x20000234

0800439c <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <vApplicationGetTimerTaskMemory+0x10>)
 800439e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80043a0:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <vApplicationGetTimerTaskMemory+0x14>)
 80043a2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80043a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043a8:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 80043aa:	4770      	bx	lr
 80043ac:	20000898 	.word	0x20000898
 80043b0:	20000498 	.word	0x20000498

080043b4 <ConfigSaveTmr>:
__weak void ConfigSaveTmr(void const * argument)
{
  /* USER CODE BEGIN ConfigSaveTmr */
  
  /* USER CODE END ConfigSaveTmr */
}
 80043b4:	4770      	bx	lr
	...

080043b8 <MX_GPIO_Init>:
{
 80043b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043bc:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043be:	2400      	movs	r4, #0
 80043c0:	9405      	str	r4, [sp, #20]
 80043c2:	9406      	str	r4, [sp, #24]
 80043c4:	9407      	str	r4, [sp, #28]
 80043c6:	9408      	str	r4, [sp, #32]
 80043c8:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ca:	9401      	str	r4, [sp, #4]
 80043cc:	4b46      	ldr	r3, [pc, #280]	; (80044e8 <MX_GPIO_Init+0x130>)
 80043ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043d0:	f042 0204 	orr.w	r2, r2, #4
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
 80043d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043d8:	f002 0204 	and.w	r2, r2, #4
 80043dc:	9201      	str	r2, [sp, #4]
 80043de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043e0:	9402      	str	r4, [sp, #8]
 80043e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
 80043ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80043f0:	9202      	str	r2, [sp, #8]
 80043f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f4:	9403      	str	r4, [sp, #12]
 80043f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f8:	f042 0201 	orr.w	r2, r2, #1
 80043fc:	631a      	str	r2, [r3, #48]	; 0x30
 80043fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004400:	f002 0201 	and.w	r2, r2, #1
 8004404:	9203      	str	r2, [sp, #12]
 8004406:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004408:	9404      	str	r4, [sp, #16]
 800440a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800440c:	f042 0202 	orr.w	r2, r2, #2
 8004410:	631a      	str	r2, [r3, #48]	; 0x30
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	9304      	str	r3, [sp, #16]
 800441a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 800441c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80044fc <MX_GPIO_Init+0x144>
 8004420:	4622      	mov	r2, r4
 8004422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004426:	4640      	mov	r0, r8
 8004428:	f002 f8ff 	bl	800662a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 800442c:	4d2f      	ldr	r5, [pc, #188]	; (80044ec <MX_GPIO_Init+0x134>)
 800442e:	4622      	mov	r2, r4
 8004430:	2102      	movs	r1, #2
 8004432:	4628      	mov	r0, r5
 8004434:	f002 f8f9 	bl	800662a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8004438:	2201      	movs	r2, #1
 800443a:	2110      	movs	r1, #16
 800443c:	4628      	mov	r0, r5
 800443e:	f002 f8f4 	bl	800662a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin, GPIO_PIN_SET);
 8004442:	4e2b      	ldr	r6, [pc, #172]	; (80044f0 <MX_GPIO_Init+0x138>)
 8004444:	2201      	movs	r2, #1
 8004446:	f246 0104 	movw	r1, #24580	; 0x6004
 800444a:	4630      	mov	r0, r6
 800444c:	f002 f8ed 	bl	800662a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8004450:	4622      	mov	r2, r4
 8004452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004456:	4630      	mov	r0, r6
 8004458:	f002 f8e7 	bl	800662a <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUILT_IN_LED_Pin;
 800445c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004460:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004462:	2701      	movs	r7, #1
 8004464:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004466:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004468:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BUILT_IN_LED_GPIO_Port, &GPIO_InitStruct);
 800446a:	a905      	add	r1, sp, #20
 800446c:	4640      	mov	r0, r8
 800446e:	f002 f803 	bl	8006478 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MASTER_TE_Pin|ETH_CS_Pin;
 8004472:	2312      	movs	r3, #18
 8004474:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004476:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004478:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800447c:	a905      	add	r1, sp, #20
 800447e:	4628      	mov	r0, r5
 8004480:	f001 fffa 	bl	8006478 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ETH_INT_Pin|PG24V_Pin;
 8004484:	f241 0302 	movw	r3, #4098	; 0x1002
 8004488:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800448a:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <MX_GPIO_Init+0x13c>)
 800448c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004490:	a905      	add	r1, sp, #20
 8004492:	4630      	mov	r0, r6
 8004494:	f001 fff0 	bl	8006478 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin|NRF_CE_Pin;
 8004498:	f24e 0304 	movw	r3, #57348	; 0xe004
 800449c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800449e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a4:	a905      	add	r1, sp, #20
 80044a6:	4630      	mov	r0, r6
 80044a8:	f001 ffe6 	bl	8006478 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NRF_INT_Pin;
 80044ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <MX_GPIO_Init+0x140>)
 80044b4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(NRF_INT_GPIO_Port, &GPIO_InitStruct);
 80044b8:	a905      	add	r1, sp, #20
 80044ba:	4628      	mov	r0, r5
 80044bc:	f001 ffdc 	bl	8006478 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 10, 0);
 80044c0:	4622      	mov	r2, r4
 80044c2:	210a      	movs	r1, #10
 80044c4:	2007      	movs	r0, #7
 80044c6:	f001 fcf7 	bl	8005eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80044ca:	2007      	movs	r0, #7
 80044cc:	f001 fd28 	bl	8005f20 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 9, 0);
 80044d0:	4622      	mov	r2, r4
 80044d2:	2109      	movs	r1, #9
 80044d4:	2028      	movs	r0, #40	; 0x28
 80044d6:	f001 fcef 	bl	8005eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80044da:	2028      	movs	r0, #40	; 0x28
 80044dc:	f001 fd20 	bl	8005f20 <HAL_NVIC_EnableIRQ>
}
 80044e0:	b00a      	add	sp, #40	; 0x28
 80044e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044e6:	bf00      	nop
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40020000 	.word	0x40020000
 80044f0:	40020400 	.word	0x40020400
 80044f4:	10210000 	.word	0x10210000
 80044f8:	10110000 	.word	0x10110000
 80044fc:	40020800 	.word	0x40020800

08004500 <MX_DMA_Init>:
{
 8004500:	b510      	push	{r4, lr}
 8004502:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004504:	2400      	movs	r4, #0
 8004506:	9400      	str	r4, [sp, #0]
 8004508:	4b16      	ldr	r3, [pc, #88]	; (8004564 <MX_DMA_Init+0x64>)
 800450a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
 8004512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004514:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8004518:	9200      	str	r2, [sp, #0]
 800451a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800451c:	9401      	str	r4, [sp, #4]
 800451e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004520:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8004530:	4622      	mov	r2, r4
 8004532:	2105      	movs	r1, #5
 8004534:	2010      	movs	r0, #16
 8004536:	f001 fcbf 	bl	8005eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800453a:	2010      	movs	r0, #16
 800453c:	f001 fcf0 	bl	8005f20 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8004540:	4622      	mov	r2, r4
 8004542:	2105      	movs	r1, #5
 8004544:	2039      	movs	r0, #57	; 0x39
 8004546:	f001 fcb7 	bl	8005eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800454a:	2039      	movs	r0, #57	; 0x39
 800454c:	f001 fce8 	bl	8005f20 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8004550:	4622      	mov	r2, r4
 8004552:	2105      	movs	r1, #5
 8004554:	203a      	movs	r0, #58	; 0x3a
 8004556:	f001 fcaf 	bl	8005eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800455a:	203a      	movs	r0, #58	; 0x3a
 800455c:	f001 fce0 	bl	8005f20 <HAL_NVIC_EnableIRQ>
}
 8004560:	b002      	add	sp, #8
 8004562:	bd10      	pop	{r4, pc}
 8004564:	40023800 	.word	0x40023800

08004568 <StartDefaultTask>:
{
 8004568:	b508      	push	{r3, lr}
    vTaskSuspend(NULL);
 800456a:	2000      	movs	r0, #0
 800456c:	f006 f8fe 	bl	800a76c <vTaskSuspend>
 8004570:	e7fb      	b.n	800456a <StartDefaultTask+0x2>
	...

08004574 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004574:	b508      	push	{r3, lr}
	if(huart -> Instance == USART2){
 8004576:	6802      	ldr	r2, [r0, #0]
 8004578:	4b03      	ldr	r3, [pc, #12]	; (8004588 <HAL_UART_RxCpltCallback+0x14>)
 800457a:	429a      	cmp	r2, r3
 800457c:	d000      	beq.n	8004580 <HAL_UART_RxCpltCallback+0xc>
}
 800457e:	bd08      	pop	{r3, pc}
		vModbusReceieveResponseCallback(&mbPort);
 8004580:	4802      	ldr	r0, [pc, #8]	; (800458c <HAL_UART_RxCpltCallback+0x18>)
 8004582:	f7fe fca1 	bl	8002ec8 <vModbusReceieveResponseCallback>
}
 8004586:	e7fa      	b.n	800457e <HAL_UART_RxCpltCallback+0xa>
 8004588:	40004400 	.word	0x40004400
 800458c:	20002fa0 	.word	0x20002fa0

08004590 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004590:	b508      	push	{r3, lr}
	if(huart -> Instance == USART2){
 8004592:	6802      	ldr	r2, [r0, #0]
 8004594:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <HAL_UART_TxCpltCallback+0x30>)
 8004596:	429a      	cmp	r2, r3
 8004598:	d000      	beq.n	800459c <HAL_UART_TxCpltCallback+0xc>
}
 800459a:	bd08      	pop	{r3, pc}
		vTaskNotifyGiveFromISR((TaskHandle_t)mbPort.task, NULL);
 800459c:	2100      	movs	r1, #0
 800459e:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_UART_TxCpltCallback+0x34>)
 80045a0:	6898      	ldr	r0, [r3, #8]
 80045a2:	f006 fd93 	bl	800b0cc <vTaskNotifyGiveFromISR>
		HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 80045a6:	2201      	movs	r2, #1
 80045a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045ac:	4806      	ldr	r0, [pc, #24]	; (80045c8 <HAL_UART_TxCpltCallback+0x38>)
 80045ae:	f002 f83c 	bl	800662a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 80045b2:	2200      	movs	r2, #0
 80045b4:	2102      	movs	r1, #2
 80045b6:	4805      	ldr	r0, [pc, #20]	; (80045cc <HAL_UART_TxCpltCallback+0x3c>)
 80045b8:	f002 f837 	bl	800662a <HAL_GPIO_WritePin>
}
 80045bc:	e7ed      	b.n	800459a <HAL_UART_TxCpltCallback+0xa>
 80045be:	bf00      	nop
 80045c0:	40004400 	.word	0x40004400
 80045c4:	20002fa0 	.word	0x20002fa0
 80045c8:	40020800 	.word	0x40020800
 80045cc:	40020000 	.word	0x40020000

080045d0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80045d0:	b510      	push	{r4, lr}
 80045d2:	4604      	mov	r4, r0
	if(GPIO_Pin & NRF_INT_Pin){
 80045d4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80045d8:	d106      	bne.n	80045e8 <HAL_GPIO_EXTI_Callback+0x18>
	if(GPIO_Pin & ETH_INT_Pin){
 80045da:	f014 0f02 	tst.w	r4, #2
 80045de:	d109      	bne.n	80045f4 <HAL_GPIO_EXTI_Callback+0x24>
	if(GPIO_Pin & PG24V_Pin){
 80045e0:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 80045e4:	d10c      	bne.n	8004600 <HAL_GPIO_EXTI_Callback+0x30>
}
 80045e6:	bd10      	pop	{r4, pc}
		vTaskNotifyGiveFromISR(nRF24L01Handle, NULL);
 80045e8:	2100      	movs	r1, #0
 80045ea:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <HAL_GPIO_EXTI_Callback+0x48>)
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	f006 fd6d 	bl	800b0cc <vTaskNotifyGiveFromISR>
 80045f2:	e7f2      	b.n	80045da <HAL_GPIO_EXTI_Callback+0xa>
		vTaskNotifyGiveFromISR(EthernetHandle, NULL);
 80045f4:	2100      	movs	r1, #0
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_GPIO_EXTI_Callback+0x4c>)
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	f006 fd67 	bl	800b0cc <vTaskNotifyGiveFromISR>
 80045fe:	e7ef      	b.n	80045e0 <HAL_GPIO_EXTI_Callback+0x10>
		value = HAL_RTCEx_BKUPRead(&hrtc, 0);
 8004600:	4c07      	ldr	r4, [pc, #28]	; (8004620 <HAL_GPIO_EXTI_Callback+0x50>)
 8004602:	2100      	movs	r1, #0
 8004604:	4620      	mov	r0, r4
 8004606:	f003 fc25 	bl	8007e54 <HAL_RTCEx_BKUPRead>
		HAL_RTCEx_BKUPWrite(&hrtc, 0, value);
 800460a:	1c42      	adds	r2, r0, #1
 800460c:	2100      	movs	r1, #0
 800460e:	4620      	mov	r0, r4
 8004610:	f003 fc1b 	bl	8007e4a <HAL_RTCEx_BKUPWrite>
}
 8004614:	e7e7      	b.n	80045e6 <HAL_GPIO_EXTI_Callback+0x16>
 8004616:	bf00      	nop
 8004618:	20002fb4 	.word	0x20002fb4
 800461c:	200033d8 	.word	0x200033d8
 8004620:	20003250 	.word	0x20003250

08004624 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM11){
 8004626:	6802      	ldr	r2, [r0, #0]
 8004628:	4b07      	ldr	r3, [pc, #28]	; (8004648 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800462a:	429a      	cmp	r2, r3
 800462c:	d004      	beq.n	8004638 <HAL_TIM_PeriodElapsedCallback+0x14>
		ulHighFreqTimerTicks ++;
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800462e:	6802      	ldr	r2, [r0, #0]
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8004632:	429a      	cmp	r2, r3
 8004634:	d005      	beq.n	8004642 <HAL_TIM_PeriodElapsedCallback+0x1e>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004636:	bd08      	pop	{r3, pc}
		ulHighFreqTimerTicks ++;
 8004638:	4a05      	ldr	r2, [pc, #20]	; (8004650 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800463a:	6813      	ldr	r3, [r2, #0]
 800463c:	3301      	adds	r3, #1
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	e7f5      	b.n	800462e <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
 8004642:	f001 fa87 	bl	8005b54 <HAL_IncTick>
}
 8004646:	e7f6      	b.n	8004636 <HAL_TIM_PeriodElapsedCallback+0x12>
 8004648:	40014800 	.word	0x40014800
 800464c:	40014400 	.word	0x40014400
 8004650:	200033d4 	.word	0x200033d4

08004654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004654:	e7fe      	b.n	8004654 <Error_Handler>
	...

08004658 <MX_I2C1_Init>:
{
 8004658:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800465a:	480a      	ldr	r0, [pc, #40]	; (8004684 <MX_I2C1_Init+0x2c>)
 800465c:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <MX_I2C1_Init+0x30>)
 800465e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <MX_I2C1_Init+0x34>)
 8004662:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004664:	2300      	movs	r3, #0
 8004666:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004668:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800466a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800466e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004670:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004672:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004674:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004676:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004678:	f002 fa38 	bl	8006aec <HAL_I2C_Init>
 800467c:	b900      	cbnz	r0, 8004680 <MX_I2C1_Init+0x28>
}
 800467e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004680:	f7ff ffe8 	bl	8004654 <Error_Handler>
 8004684:	20003088 	.word	0x20003088
 8004688:	40005400 	.word	0x40005400
 800468c:	000186a0 	.word	0x000186a0

08004690 <MX_SPI1_Init>:
{
 8004690:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8004692:	480d      	ldr	r0, [pc, #52]	; (80046c8 <MX_SPI1_Init+0x38>)
 8004694:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <MX_SPI1_Init+0x3c>)
 8004696:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004698:	f44f 7382 	mov.w	r3, #260	; 0x104
 800469c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800469e:	2300      	movs	r3, #0
 80046a0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80046a2:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046a4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046a6:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80046a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ac:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80046ae:	2218      	movs	r2, #24
 80046b0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046b2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80046b4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046b6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80046b8:	230a      	movs	r3, #10
 80046ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80046bc:	f003 fc98 	bl	8007ff0 <HAL_SPI_Init>
 80046c0:	b900      	cbnz	r0, 80046c4 <MX_SPI1_Init+0x34>
}
 80046c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80046c4:	f7ff ffc6 	bl	8004654 <Error_Handler>
 80046c8:	200032f0 	.word	0x200032f0
 80046cc:	40013000 	.word	0x40013000

080046d0 <MX_TIM1_Init>:
{
 80046d0:	b510      	push	{r4, lr}
 80046d2:	b092      	sub	sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046d4:	2400      	movs	r4, #0
 80046d6:	9410      	str	r4, [sp, #64]	; 0x40
 80046d8:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046da:	9409      	str	r4, [sp, #36]	; 0x24
 80046dc:	940a      	str	r4, [sp, #40]	; 0x28
 80046de:	940b      	str	r4, [sp, #44]	; 0x2c
 80046e0:	940c      	str	r4, [sp, #48]	; 0x30
 80046e2:	940d      	str	r4, [sp, #52]	; 0x34
 80046e4:	940e      	str	r4, [sp, #56]	; 0x38
 80046e6:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80046e8:	2220      	movs	r2, #32
 80046ea:	4621      	mov	r1, r4
 80046ec:	a801      	add	r0, sp, #4
 80046ee:	f007 ffec 	bl	800c6ca <memset>
  htim1.Instance = TIM1;
 80046f2:	482b      	ldr	r0, [pc, #172]	; (80047a0 <MX_TIM1_Init+0xd0>)
 80046f4:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <MX_TIM1_Init+0xd4>)
 80046f6:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 42000-1;
 80046f8:	f24a 430f 	movw	r3, #41999	; 0xa40f
 80046fc:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046fe:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 999;
 8004700:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004704:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8004706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800470a:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800470c:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800470e:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004710:	f004 f901 	bl	8008916 <HAL_TIM_PWM_Init>
 8004714:	2800      	cmp	r0, #0
 8004716:	d136      	bne.n	8004786 <MX_TIM1_Init+0xb6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004718:	2300      	movs	r3, #0
 800471a:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800471c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800471e:	a910      	add	r1, sp, #64	; 0x40
 8004720:	481f      	ldr	r0, [pc, #124]	; (80047a0 <MX_TIM1_Init+0xd0>)
 8004722:	f004 f9e1 	bl	8008ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8004726:	2800      	cmp	r0, #0
 8004728:	d12f      	bne.n	800478a <MX_TIM1_Init+0xba>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800472a:	2360      	movs	r3, #96	; 0x60
 800472c:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800472e:	2200      	movs	r2, #0
 8004730:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004732:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004734:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004736:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004738:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800473a:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800473c:	a909      	add	r1, sp, #36	; 0x24
 800473e:	4818      	ldr	r0, [pc, #96]	; (80047a0 <MX_TIM1_Init+0xd0>)
 8004740:	f004 f934 	bl	80089ac <HAL_TIM_PWM_ConfigChannel>
 8004744:	bb18      	cbnz	r0, 800478e <MX_TIM1_Init+0xbe>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004746:	2204      	movs	r2, #4
 8004748:	a909      	add	r1, sp, #36	; 0x24
 800474a:	4815      	ldr	r0, [pc, #84]	; (80047a0 <MX_TIM1_Init+0xd0>)
 800474c:	f004 f92e 	bl	80089ac <HAL_TIM_PWM_ConfigChannel>
 8004750:	b9f8      	cbnz	r0, 8004792 <MX_TIM1_Init+0xc2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004752:	2208      	movs	r2, #8
 8004754:	a909      	add	r1, sp, #36	; 0x24
 8004756:	4812      	ldr	r0, [pc, #72]	; (80047a0 <MX_TIM1_Init+0xd0>)
 8004758:	f004 f928 	bl	80089ac <HAL_TIM_PWM_ConfigChannel>
 800475c:	b9d8      	cbnz	r0, 8004796 <MX_TIM1_Init+0xc6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800475e:	2300      	movs	r3, #0
 8004760:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004762:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004764:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004766:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004768:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800476a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800476e:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004770:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004772:	a901      	add	r1, sp, #4
 8004774:	480a      	ldr	r0, [pc, #40]	; (80047a0 <MX_TIM1_Init+0xd0>)
 8004776:	f004 f9f3 	bl	8008b60 <HAL_TIMEx_ConfigBreakDeadTime>
 800477a:	b970      	cbnz	r0, 800479a <MX_TIM1_Init+0xca>
  HAL_TIM_MspPostInit(&htim1);
 800477c:	4808      	ldr	r0, [pc, #32]	; (80047a0 <MX_TIM1_Init+0xd0>)
 800477e:	f000 fbd9 	bl	8004f34 <HAL_TIM_MspPostInit>
}
 8004782:	b012      	add	sp, #72	; 0x48
 8004784:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004786:	f7ff ff65 	bl	8004654 <Error_Handler>
    Error_Handler();
 800478a:	f7ff ff63 	bl	8004654 <Error_Handler>
    Error_Handler();
 800478e:	f7ff ff61 	bl	8004654 <Error_Handler>
    Error_Handler();
 8004792:	f7ff ff5f 	bl	8004654 <Error_Handler>
    Error_Handler();
 8004796:	f7ff ff5d 	bl	8004654 <Error_Handler>
    Error_Handler();
 800479a:	f7ff ff5b 	bl	8004654 <Error_Handler>
 800479e:	bf00      	nop
 80047a0:	20003270 	.word	0x20003270
 80047a4:	40010000 	.word	0x40010000

080047a8 <MX_TIM3_Init>:
{
 80047a8:	b500      	push	{lr}
 80047aa:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047ac:	2300      	movs	r3, #0
 80047ae:	9308      	str	r3, [sp, #32]
 80047b0:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047b2:	9301      	str	r3, [sp, #4]
 80047b4:	9302      	str	r3, [sp, #8]
 80047b6:	9303      	str	r3, [sp, #12]
 80047b8:	9304      	str	r3, [sp, #16]
 80047ba:	9305      	str	r3, [sp, #20]
 80047bc:	9306      	str	r3, [sp, #24]
 80047be:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 80047c0:	4820      	ldr	r0, [pc, #128]	; (8004844 <MX_TIM3_Init+0x9c>)
 80047c2:	4a21      	ldr	r2, [pc, #132]	; (8004848 <MX_TIM3_Init+0xa0>)
 80047c4:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 42000 - 1;
 80047c6:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80047ca:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047cc:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 80047ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047d2:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80047d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047d8:	6102      	str	r2, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047da:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80047dc:	f004 f89b 	bl	8008916 <HAL_TIM_PWM_Init>
 80047e0:	bb28      	cbnz	r0, 800482e <MX_TIM3_Init+0x86>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047e2:	2300      	movs	r3, #0
 80047e4:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047e6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80047e8:	a908      	add	r1, sp, #32
 80047ea:	4816      	ldr	r0, [pc, #88]	; (8004844 <MX_TIM3_Init+0x9c>)
 80047ec:	f004 f97c 	bl	8008ae8 <HAL_TIMEx_MasterConfigSynchronization>
 80047f0:	b9f8      	cbnz	r0, 8004832 <MX_TIM3_Init+0x8a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047f2:	2360      	movs	r3, #96	; 0x60
 80047f4:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80047f6:	2200      	movs	r2, #0
 80047f8:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047fa:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047fc:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047fe:	a901      	add	r1, sp, #4
 8004800:	4810      	ldr	r0, [pc, #64]	; (8004844 <MX_TIM3_Init+0x9c>)
 8004802:	f004 f8d3 	bl	80089ac <HAL_TIM_PWM_ConfigChannel>
 8004806:	b9b0      	cbnz	r0, 8004836 <MX_TIM3_Init+0x8e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004808:	2204      	movs	r2, #4
 800480a:	eb0d 0102 	add.w	r1, sp, r2
 800480e:	480d      	ldr	r0, [pc, #52]	; (8004844 <MX_TIM3_Init+0x9c>)
 8004810:	f004 f8cc 	bl	80089ac <HAL_TIM_PWM_ConfigChannel>
 8004814:	b988      	cbnz	r0, 800483a <MX_TIM3_Init+0x92>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004816:	2208      	movs	r2, #8
 8004818:	a901      	add	r1, sp, #4
 800481a:	480a      	ldr	r0, [pc, #40]	; (8004844 <MX_TIM3_Init+0x9c>)
 800481c:	f004 f8c6 	bl	80089ac <HAL_TIM_PWM_ConfigChannel>
 8004820:	b968      	cbnz	r0, 800483e <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8004822:	4808      	ldr	r0, [pc, #32]	; (8004844 <MX_TIM3_Init+0x9c>)
 8004824:	f000 fb86 	bl	8004f34 <HAL_TIM_MspPostInit>
}
 8004828:	b00b      	add	sp, #44	; 0x2c
 800482a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800482e:	f7ff ff11 	bl	8004654 <Error_Handler>
    Error_Handler();
 8004832:	f7ff ff0f 	bl	8004654 <Error_Handler>
    Error_Handler();
 8004836:	f7ff ff0d 	bl	8004654 <Error_Handler>
    Error_Handler();
 800483a:	f7ff ff0b 	bl	8004654 <Error_Handler>
    Error_Handler();
 800483e:	f7ff ff09 	bl	8004654 <Error_Handler>
 8004842:	bf00      	nop
 8004844:	200030e4 	.word	0x200030e4
 8004848:	40000400 	.word	0x40000400

0800484c <MX_USART1_UART_Init>:
{
 800484c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800484e:	480a      	ldr	r0, [pc, #40]	; (8004878 <MX_USART1_UART_Init+0x2c>)
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <MX_USART1_UART_Init+0x30>)
 8004852:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8004854:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004858:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800485a:	2300      	movs	r3, #0
 800485c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800485e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004860:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004862:	220c      	movs	r2, #12
 8004864:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004866:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004868:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800486a:	f004 fb2c 	bl	8008ec6 <HAL_UART_Init>
 800486e:	b900      	cbnz	r0, 8004872 <MX_USART1_UART_Init+0x26>
}
 8004870:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004872:	f7ff feef 	bl	8004654 <Error_Handler>
 8004876:	bf00      	nop
 8004878:	200031cc 	.word	0x200031cc
 800487c:	40011000 	.word	0x40011000

08004880 <MX_USART2_UART_Init>:
{
 8004880:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8004882:	480a      	ldr	r0, [pc, #40]	; (80048ac <MX_USART2_UART_Init+0x2c>)
 8004884:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <MX_USART2_UART_Init+0x30>)
 8004886:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004888:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800488c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800488e:	2300      	movs	r3, #0
 8004890:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004892:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004894:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004896:	220c      	movs	r2, #12
 8004898:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800489a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800489c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800489e:	f004 fb12 	bl	8008ec6 <HAL_UART_Init>
 80048a2:	b900      	cbnz	r0, 80048a6 <MX_USART2_UART_Init+0x26>
}
 80048a4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80048a6:	f7ff fed5 	bl	8004654 <Error_Handler>
 80048aa:	bf00      	nop
 80048ac:	20003388 	.word	0x20003388
 80048b0:	40004400 	.word	0x40004400

080048b4 <MX_USART6_UART_Init>:
{
 80048b4:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 80048b6:	480a      	ldr	r0, [pc, #40]	; (80048e0 <MX_USART6_UART_Init+0x2c>)
 80048b8:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <MX_USART6_UART_Init+0x30>)
 80048ba:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 19200;
 80048bc:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80048c0:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80048c2:	2300      	movs	r3, #0
 80048c4:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80048c6:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80048c8:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80048ca:	220c      	movs	r2, #12
 80048cc:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ce:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80048d0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80048d2:	f004 faf8 	bl	8008ec6 <HAL_UART_Init>
 80048d6:	b900      	cbnz	r0, 80048da <MX_USART6_UART_Init+0x26>
}
 80048d8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80048da:	f7ff febb 	bl	8004654 <Error_Handler>
 80048de:	bf00      	nop
 80048e0:	200032b0 	.word	0x200032b0
 80048e4:	40011400 	.word	0x40011400

080048e8 <MX_TIM2_Init>:
{
 80048e8:	b500      	push	{lr}
 80048ea:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048ec:	2300      	movs	r3, #0
 80048ee:	9308      	str	r3, [sp, #32]
 80048f0:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	9302      	str	r3, [sp, #8]
 80048f6:	9303      	str	r3, [sp, #12]
 80048f8:	9304      	str	r3, [sp, #16]
 80048fa:	9305      	str	r3, [sp, #20]
 80048fc:	9306      	str	r3, [sp, #24]
 80048fe:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8004900:	481d      	ldr	r0, [pc, #116]	; (8004978 <MX_TIM2_Init+0x90>)
 8004902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004906:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8004908:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800490a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 800490c:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800490e:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004910:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004912:	f004 f800 	bl	8008916 <HAL_TIM_PWM_Init>
 8004916:	bb28      	cbnz	r0, 8004964 <MX_TIM2_Init+0x7c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004918:	2300      	movs	r3, #0
 800491a:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800491c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800491e:	a908      	add	r1, sp, #32
 8004920:	4815      	ldr	r0, [pc, #84]	; (8004978 <MX_TIM2_Init+0x90>)
 8004922:	f004 f8e1 	bl	8008ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8004926:	b9f8      	cbnz	r0, 8004968 <MX_TIM2_Init+0x80>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004928:	2360      	movs	r3, #96	; 0x60
 800492a:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800492c:	2200      	movs	r2, #0
 800492e:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004930:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004932:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004934:	a901      	add	r1, sp, #4
 8004936:	4810      	ldr	r0, [pc, #64]	; (8004978 <MX_TIM2_Init+0x90>)
 8004938:	f004 f838 	bl	80089ac <HAL_TIM_PWM_ConfigChannel>
 800493c:	b9b0      	cbnz	r0, 800496c <MX_TIM2_Init+0x84>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800493e:	2204      	movs	r2, #4
 8004940:	eb0d 0102 	add.w	r1, sp, r2
 8004944:	480c      	ldr	r0, [pc, #48]	; (8004978 <MX_TIM2_Init+0x90>)
 8004946:	f004 f831 	bl	80089ac <HAL_TIM_PWM_ConfigChannel>
 800494a:	b988      	cbnz	r0, 8004970 <MX_TIM2_Init+0x88>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800494c:	2208      	movs	r2, #8
 800494e:	a901      	add	r1, sp, #4
 8004950:	4809      	ldr	r0, [pc, #36]	; (8004978 <MX_TIM2_Init+0x90>)
 8004952:	f004 f82b 	bl	80089ac <HAL_TIM_PWM_ConfigChannel>
 8004956:	b968      	cbnz	r0, 8004974 <MX_TIM2_Init+0x8c>
  HAL_TIM_MspPostInit(&htim2);
 8004958:	4807      	ldr	r0, [pc, #28]	; (8004978 <MX_TIM2_Init+0x90>)
 800495a:	f000 faeb 	bl	8004f34 <HAL_TIM_MspPostInit>
}
 800495e:	b00b      	add	sp, #44	; 0x2c
 8004960:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004964:	f7ff fe76 	bl	8004654 <Error_Handler>
    Error_Handler();
 8004968:	f7ff fe74 	bl	8004654 <Error_Handler>
    Error_Handler();
 800496c:	f7ff fe72 	bl	8004654 <Error_Handler>
    Error_Handler();
 8004970:	f7ff fe70 	bl	8004654 <Error_Handler>
    Error_Handler();
 8004974:	f7ff fe6e 	bl	8004654 <Error_Handler>
 8004978:	20003348 	.word	0x20003348

0800497c <MX_ADC1_Init>:
{
 800497c:	b500      	push	{lr}
 800497e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8004980:	2300      	movs	r3, #0
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	9302      	str	r3, [sp, #8]
 8004988:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800498a:	4814      	ldr	r0, [pc, #80]	; (80049dc <MX_ADC1_Init+0x60>)
 800498c:	4a14      	ldr	r2, [pc, #80]	; (80049e0 <MX_ADC1_Init+0x64>)
 800498e:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004990:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004994:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004996:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004998:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800499a:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800499c:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80049a0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80049a2:	4a10      	ldr	r2, [pc, #64]	; (80049e4 <MX_ADC1_Init+0x68>)
 80049a4:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80049a6:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 80049a8:	2201      	movs	r2, #1
 80049aa:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80049ac:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80049b0:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80049b2:	f001 f97b 	bl	8005cac <HAL_ADC_Init>
 80049b6:	b968      	cbnz	r0, 80049d4 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80049b8:	2312      	movs	r3, #18
 80049ba:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80049bc:	2301      	movs	r3, #1
 80049be:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80049c0:	2300      	movs	r3, #0
 80049c2:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80049c4:	4669      	mov	r1, sp
 80049c6:	4805      	ldr	r0, [pc, #20]	; (80049dc <MX_ADC1_Init+0x60>)
 80049c8:	f001 f99c 	bl	8005d04 <HAL_ADC_ConfigChannel>
 80049cc:	b920      	cbnz	r0, 80049d8 <MX_ADC1_Init+0x5c>
}
 80049ce:	b005      	add	sp, #20
 80049d0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80049d4:	f7ff fe3e 	bl	8004654 <Error_Handler>
    Error_Handler();
 80049d8:	f7ff fe3c 	bl	8004654 <Error_Handler>
 80049dc:	20003124 	.word	0x20003124
 80049e0:	40012000 	.word	0x40012000
 80049e4:	0f000001 	.word	0x0f000001

080049e8 <MX_RTC_Init>:
{
 80049e8:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 80049ea:	4809      	ldr	r0, [pc, #36]	; (8004a10 <MX_RTC_Init+0x28>)
 80049ec:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <MX_RTC_Init+0x2c>)
 80049ee:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80049f0:	2300      	movs	r3, #0
 80049f2:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80049f4:	227f      	movs	r2, #127	; 0x7f
 80049f6:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80049f8:	22ff      	movs	r2, #255	; 0xff
 80049fa:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80049fc:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80049fe:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004a00:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004a02:	f003 f874 	bl	8007aee <HAL_RTC_Init>
 8004a06:	b900      	cbnz	r0, 8004a0a <MX_RTC_Init+0x22>
}
 8004a08:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004a0a:	f7ff fe23 	bl	8004654 <Error_Handler>
 8004a0e:	bf00      	nop
 8004a10:	20003250 	.word	0x20003250
 8004a14:	40002800 	.word	0x40002800

08004a18 <MX_CRC_Init>:
{
 8004a18:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8004a1a:	4804      	ldr	r0, [pc, #16]	; (8004a2c <MX_CRC_Init+0x14>)
 8004a1c:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <MX_CRC_Init+0x18>)
 8004a1e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004a20:	f001 fa9e 	bl	8005f60 <HAL_CRC_Init>
 8004a24:	b900      	cbnz	r0, 8004a28 <MX_CRC_Init+0x10>
}
 8004a26:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004a28:	f7ff fe14 	bl	8004654 <Error_Handler>
 8004a2c:	200030dc 	.word	0x200030dc
 8004a30:	40023000 	.word	0x40023000

08004a34 <MX_TIM11_Init>:
{
 8004a34:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 8004a36:	4808      	ldr	r0, [pc, #32]	; (8004a58 <MX_TIM11_Init+0x24>)
 8004a38:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <MX_TIM11_Init+0x28>)
 8004a3a:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a40:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 840 - 1;
 8004a42:	f240 3247 	movw	r2, #839	; 0x347
 8004a46:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a48:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a4a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004a4c:	f003 ff4a 	bl	80088e4 <HAL_TIM_Base_Init>
 8004a50:	b900      	cbnz	r0, 8004a54 <MX_TIM11_Init+0x20>
}
 8004a52:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004a54:	f7ff fdfe 	bl	8004654 <Error_Handler>
 8004a58:	2000320c 	.word	0x2000320c
 8004a5c:	40014800 	.word	0x40014800

08004a60 <SystemClock_Config>:
{
 8004a60:	b500      	push	{lr}
 8004a62:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a64:	2230      	movs	r2, #48	; 0x30
 8004a66:	2100      	movs	r1, #0
 8004a68:	eb0d 0002 	add.w	r0, sp, r2
 8004a6c:	f007 fe2d 	bl	800c6ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a70:	2300      	movs	r3, #0
 8004a72:	9307      	str	r3, [sp, #28]
 8004a74:	9308      	str	r3, [sp, #32]
 8004a76:	9309      	str	r3, [sp, #36]	; 0x24
 8004a78:	930a      	str	r3, [sp, #40]	; 0x28
 8004a7a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a7c:	9302      	str	r3, [sp, #8]
 8004a7e:	9303      	str	r3, [sp, #12]
 8004a80:	9304      	str	r3, [sp, #16]
 8004a82:	9305      	str	r3, [sp, #20]
 8004a84:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	4a27      	ldr	r2, [pc, #156]	; (8004b28 <SystemClock_Config+0xc8>)
 8004a8a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004a8c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004a90:	6411      	str	r1, [r2, #64]	; 0x40
 8004a92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a94:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004a98:	9200      	str	r2, [sp, #0]
 8004a9a:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	4a23      	ldr	r2, [pc, #140]	; (8004b2c <SystemClock_Config+0xcc>)
 8004aa0:	6813      	ldr	r3, [r2, #0]
 8004aa2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	6813      	ldr	r3, [r2, #0]
 8004aae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ab2:	9301      	str	r3, [sp, #4]
 8004ab4:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8004ab6:	2305      	movs	r3, #5
 8004ab8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004abe:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ac8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004acc:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004ace:	2219      	movs	r2, #25
 8004ad0:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004ad2:	22a8      	movs	r2, #168	; 0xa8
 8004ad4:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ad6:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004ad8:	2304      	movs	r3, #4
 8004ada:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004adc:	a80c      	add	r0, sp, #48	; 0x30
 8004ade:	f002 fbc7 	bl	8007270 <HAL_RCC_OscConfig>
 8004ae2:	b9d8      	cbnz	r0, 8004b1c <SystemClock_Config+0xbc>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ae4:	230f      	movs	r3, #15
 8004ae6:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ae8:	2102      	movs	r1, #2
 8004aea:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004aec:	2300      	movs	r3, #0
 8004aee:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004af0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004af4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004af6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004af8:	a807      	add	r0, sp, #28
 8004afa:	f002 fe05 	bl	8007708 <HAL_RCC_ClockConfig>
 8004afe:	b978      	cbnz	r0, 8004b20 <SystemClock_Config+0xc0>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004b00:	2302      	movs	r3, #2
 8004b02:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b08:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b0a:	a802      	add	r0, sp, #8
 8004b0c:	f002 ff04 	bl	8007918 <HAL_RCCEx_PeriphCLKConfig>
 8004b10:	b940      	cbnz	r0, 8004b24 <SystemClock_Config+0xc4>
  HAL_RCC_EnableCSS();
 8004b12:	f002 fd9f 	bl	8007654 <HAL_RCC_EnableCSS>
}
 8004b16:	b019      	add	sp, #100	; 0x64
 8004b18:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004b1c:	f7ff fd9a 	bl	8004654 <Error_Handler>
    Error_Handler();
 8004b20:	f7ff fd98 	bl	8004654 <Error_Handler>
    Error_Handler();
 8004b24:	f7ff fd96 	bl	8004654 <Error_Handler>
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40007000 	.word	0x40007000

08004b30 <main>:
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b0b4      	sub	sp, #208	; 0xd0
  HAL_Init();
 8004b34:	f000 fff4 	bl	8005b20 <HAL_Init>
  SystemClock_Config();
 8004b38:	f7ff ff92 	bl	8004a60 <SystemClock_Config>
  MX_GPIO_Init();
 8004b3c:	f7ff fc3c 	bl	80043b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004b40:	f7ff fcde 	bl	8004500 <MX_DMA_Init>
  MX_I2C1_Init();
 8004b44:	f7ff fd88 	bl	8004658 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004b48:	f7ff fda2 	bl	8004690 <MX_SPI1_Init>
  MX_TIM1_Init();
 8004b4c:	f7ff fdc0 	bl	80046d0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8004b50:	f7ff fe2a 	bl	80047a8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004b54:	f7ff fe7a 	bl	800484c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004b58:	f7ff fe92 	bl	8004880 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8004b5c:	f7ff feaa 	bl	80048b4 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8004b60:	f7ff fec2 	bl	80048e8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8004b64:	f7ff ff0a 	bl	800497c <MX_ADC1_Init>
  MX_RTC_Init();
 8004b68:	f7ff ff3e 	bl	80049e8 <MX_RTC_Init>
  MX_CRC_Init();
 8004b6c:	f7ff ff54 	bl	8004a18 <MX_CRC_Init>
  MX_TIM11_Init();
 8004b70:	f7ff ff60 	bl	8004a34 <MX_TIM11_Init>
  HAL_TIM_Base_Start_IT(&htim11);
 8004b74:	4843      	ldr	r0, [pc, #268]	; (8004c84 <main+0x154>)
 8004b76:	f003 fd95 	bl	80086a4 <HAL_TIM_Base_Start_IT>
  osMutexDef(SPIMutex);
 8004b7a:	2500      	movs	r5, #0
 8004b7c:	9532      	str	r5, [sp, #200]	; 0xc8
 8004b7e:	9533      	str	r5, [sp, #204]	; 0xcc
  SPIMutexHandle = osMutexCreate(osMutex(SPIMutex));
 8004b80:	a832      	add	r0, sp, #200	; 0xc8
 8004b82:	f004 fcd5 	bl	8009530 <osMutexCreate>
 8004b86:	4b40      	ldr	r3, [pc, #256]	; (8004c88 <main+0x158>)
 8004b88:	6018      	str	r0, [r3, #0]
  osMutexDef(I2CMutex);
 8004b8a:	9530      	str	r5, [sp, #192]	; 0xc0
 8004b8c:	9531      	str	r5, [sp, #196]	; 0xc4
  I2CMutexHandle = osMutexCreate(osMutex(I2CMutex));
 8004b8e:	a830      	add	r0, sp, #192	; 0xc0
 8004b90:	f004 fcce 	bl	8009530 <osMutexCreate>
 8004b94:	4b3d      	ldr	r3, [pc, #244]	; (8004c8c <main+0x15c>)
 8004b96:	6018      	str	r0, [r3, #0]
  Config_Init(&hi2c1);
 8004b98:	483d      	ldr	r0, [pc, #244]	; (8004c90 <main+0x160>)
 8004b9a:	f7fc fe91 	bl	80018c0 <Config_Init>
  osTimerDef(Config, ConfigSaveTmr);
 8004b9e:	4b3d      	ldr	r3, [pc, #244]	; (8004c94 <main+0x164>)
 8004ba0:	932e      	str	r3, [sp, #184]	; 0xb8
 8004ba2:	952f      	str	r5, [sp, #188]	; 0xbc
  ConfigHandle = osTimerCreate(osTimer(Config), osTimerOnce, NULL);
 8004ba4:	462a      	mov	r2, r5
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	a82e      	add	r0, sp, #184	; 0xb8
 8004baa:	f004 fc9f 	bl	80094ec <osTimerCreate>
 8004bae:	4b3a      	ldr	r3, [pc, #232]	; (8004c98 <main+0x168>)
 8004bb0:	6018      	str	r0, [r3, #0]
  osMessageQDef(DataLogQueue, 16, 16);
 8004bb2:	4c3a      	ldr	r4, [pc, #232]	; (8004c9c <main+0x16c>)
 8004bb4:	ae2a      	add	r6, sp, #168	; 0xa8
 8004bb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004bba:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  DataLogQueueHandle = osMessageCreate(osMessageQ(DataLogQueue), NULL);
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f004 fcc0 	bl	8009546 <osMessageCreate>
 8004bc6:	4b36      	ldr	r3, [pc, #216]	; (8004ca0 <main+0x170>)
 8004bc8:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8004bca:	ae23      	add	r6, sp, #140	; 0x8c
 8004bcc:	f104 0710 	add.w	r7, r4, #16
 8004bd0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004bd2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004bd4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004bd8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004bdc:	4629      	mov	r1, r5
 8004bde:	a823      	add	r0, sp, #140	; 0x8c
 8004be0:	f004 fc45 	bl	800946e <osThreadCreate>
 8004be4:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <main+0x174>)
 8004be6:	6018      	str	r0, [r3, #0]
  osThreadDef(PowerRegulation, RegulationTask, osPriorityRealtime, 0, 256);
 8004be8:	ae1c      	add	r6, sp, #112	; 0x70
 8004bea:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8004bee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004bf0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004bf2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004bf6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  PowerRegulationHandle = osThreadCreate(osThread(PowerRegulation), NULL);
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	a81c      	add	r0, sp, #112	; 0x70
 8004bfe:	f004 fc36 	bl	800946e <osThreadCreate>
 8004c02:	4b29      	ldr	r3, [pc, #164]	; (8004ca8 <main+0x178>)
 8004c04:	6018      	str	r0, [r3, #0]
  osThreadDef(Diplays, DisplayTask, osPriorityNormal, 0, 256);
 8004c06:	ae15      	add	r6, sp, #84	; 0x54
 8004c08:	f104 0748 	add.w	r7, r4, #72	; 0x48
 8004c0c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004c0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004c10:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004c14:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DiplaysHandle = osThreadCreate(osThread(Diplays), NULL);
 8004c18:	4629      	mov	r1, r5
 8004c1a:	a815      	add	r0, sp, #84	; 0x54
 8004c1c:	f004 fc27 	bl	800946e <osThreadCreate>
 8004c20:	4b22      	ldr	r3, [pc, #136]	; (8004cac <main+0x17c>)
 8004c22:	6018      	str	r0, [r3, #0]
  osThreadDef(Ethernet, EthernetTask, osPriorityHigh, 0, 256);
 8004c24:	ae0e      	add	r6, sp, #56	; 0x38
 8004c26:	f104 0764 	add.w	r7, r4, #100	; 0x64
 8004c2a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004c2c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004c2e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004c32:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  EthernetHandle = osThreadCreate(osThread(Ethernet), NULL);
 8004c36:	4629      	mov	r1, r5
 8004c38:	a80e      	add	r0, sp, #56	; 0x38
 8004c3a:	f004 fc18 	bl	800946e <osThreadCreate>
 8004c3e:	4b1c      	ldr	r3, [pc, #112]	; (8004cb0 <main+0x180>)
 8004c40:	6018      	str	r0, [r3, #0]
  osThreadDef(nRF24L01, RadioTask, osPriorityAboveNormal, 0, 256);
 8004c42:	ae07      	add	r6, sp, #28
 8004c44:	f104 0780 	add.w	r7, r4, #128	; 0x80
 8004c48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004c4a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004c4c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004c50:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  nRF24L01Handle = osThreadCreate(osThread(nRF24L01), NULL);
 8004c54:	4629      	mov	r1, r5
 8004c56:	a807      	add	r0, sp, #28
 8004c58:	f004 fc09 	bl	800946e <osThreadCreate>
 8004c5c:	4b15      	ldr	r3, [pc, #84]	; (8004cb4 <main+0x184>)
 8004c5e:	6018      	str	r0, [r3, #0]
  osThreadDef(DataLog, DataLogTask, osPriorityBelowNormal, 0, 256);
 8004c60:	466e      	mov	r6, sp
 8004c62:	349c      	adds	r4, #156	; 0x9c
 8004c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c66:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004c68:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004c6c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DataLogHandle = osThreadCreate(osThread(DataLog), NULL);
 8004c70:	4629      	mov	r1, r5
 8004c72:	4668      	mov	r0, sp
 8004c74:	f004 fbfb 	bl	800946e <osThreadCreate>
 8004c78:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <main+0x188>)
 8004c7a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8004c7c:	f004 fbf2 	bl	8009464 <osKernelStart>
 8004c80:	e7fe      	b.n	8004c80 <main+0x150>
 8004c82:	bf00      	nop
 8004c84:	2000320c 	.word	0x2000320c
 8004c88:	200033d0 	.word	0x200033d0
 8004c8c:	200033c8 	.word	0x200033c8
 8004c90:	20003088 	.word	0x20003088
 8004c94:	080043b5 	.word	0x080043b5
 8004c98:	20003084 	.word	0x20003084
 8004c9c:	0800cf4c 	.word	0x0800cf4c
 8004ca0:	2000324c 	.word	0x2000324c
 8004ca4:	20002fbc 	.word	0x20002fbc
 8004ca8:	20003080 	.word	0x20003080
 8004cac:	200033cc 	.word	0x200033cc
 8004cb0:	200033d8 	.word	0x200033d8
 8004cb4:	20002fb4 	.word	0x20002fb4
 8004cb8:	20002fb8 	.word	0x20002fb8

08004cbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cbc:	b500      	push	{lr}
 8004cbe:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	9200      	str	r2, [sp, #0]
 8004cc4:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <HAL_MspInit+0x40>)
 8004cc6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004cc8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004ccc:	6459      	str	r1, [r3, #68]	; 0x44
 8004cce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004cd0:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8004cd4:	9100      	str	r1, [sp, #0]
 8004cd6:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cd8:	9201      	str	r2, [sp, #4]
 8004cda:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004cdc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004ce0:	6419      	str	r1, [r3, #64]	; 0x40
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	9301      	str	r3, [sp, #4]
 8004cea:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004cec:	210f      	movs	r1, #15
 8004cee:	f06f 0001 	mvn.w	r0, #1
 8004cf2:	f001 f8e1 	bl	8005eb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cf6:	b003      	add	sp, #12
 8004cf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cfc:	40023800 	.word	0x40023800

08004d00 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8004d00:	6802      	ldr	r2, [r0, #0]
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_ADC_MspInit+0x28>)
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d000      	beq.n	8004d0a <HAL_ADC_MspInit+0xa>
 8004d08:	4770      	bx	lr
{
 8004d0a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <HAL_ADC_MspInit+0x2c>)
 8004d12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
 8004d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	9301      	str	r3, [sp, #4]
 8004d22:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004d24:	b002      	add	sp, #8
 8004d26:	4770      	bx	lr
 8004d28:	40012000 	.word	0x40012000
 8004d2c:	40023800 	.word	0x40023800

08004d30 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8004d30:	6802      	ldr	r2, [r0, #0]
 8004d32:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <HAL_CRC_MspInit+0x28>)
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d000      	beq.n	8004d3a <HAL_CRC_MspInit+0xa>
 8004d38:	4770      	bx	lr
{
 8004d3a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <HAL_CRC_MspInit+0x2c>)
 8004d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d48:	631a      	str	r2, [r3, #48]	; 0x30
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d50:	9301      	str	r3, [sp, #4]
 8004d52:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004d54:	b002      	add	sp, #8
 8004d56:	4770      	bx	lr
 8004d58:	40023000 	.word	0x40023000
 8004d5c:	40023800 	.word	0x40023800

08004d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004d60:	b530      	push	{r4, r5, lr}
 8004d62:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d64:	2300      	movs	r3, #0
 8004d66:	9303      	str	r3, [sp, #12]
 8004d68:	9304      	str	r3, [sp, #16]
 8004d6a:	9305      	str	r3, [sp, #20]
 8004d6c:	9306      	str	r3, [sp, #24]
 8004d6e:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8004d70:	6802      	ldr	r2, [r0, #0]
 8004d72:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <HAL_I2C_MspInit+0x64>)
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004d78:	b009      	add	sp, #36	; 0x24
 8004d7a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d7c:	2500      	movs	r5, #0
 8004d7e:	9501      	str	r5, [sp, #4]
 8004d80:	4c11      	ldr	r4, [pc, #68]	; (8004dc8 <HAL_I2C_MspInit+0x68>)
 8004d82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d84:	f043 0302 	orr.w	r3, r3, #2
 8004d88:	6323      	str	r3, [r4, #48]	; 0x30
 8004d8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	9301      	str	r3, [sp, #4]
 8004d92:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004d94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d9a:	2312      	movs	r3, #18
 8004d9c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004da2:	2304      	movs	r3, #4
 8004da4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004da6:	a903      	add	r1, sp, #12
 8004da8:	4808      	ldr	r0, [pc, #32]	; (8004dcc <HAL_I2C_MspInit+0x6c>)
 8004daa:	f001 fb65 	bl	8006478 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004dae:	9502      	str	r5, [sp, #8]
 8004db0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004db2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004db6:	6423      	str	r3, [r4, #64]	; 0x40
 8004db8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dbe:	9302      	str	r3, [sp, #8]
 8004dc0:	9b02      	ldr	r3, [sp, #8]
}
 8004dc2:	e7d9      	b.n	8004d78 <HAL_I2C_MspInit+0x18>
 8004dc4:	40005400 	.word	0x40005400
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	40020400 	.word	0x40020400

08004dd0 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8004dd0:	6802      	ldr	r2, [r0, #0]
 8004dd2:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <HAL_RTC_MspInit+0x14>)
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d000      	beq.n	8004dda <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004dd8:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8004dda:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <HAL_RTC_MspInit+0x18>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
}
 8004de0:	e7fa      	b.n	8004dd8 <HAL_RTC_MspInit+0x8>
 8004de2:	bf00      	nop
 8004de4:	40002800 	.word	0x40002800
 8004de8:	42470e3c 	.word	0x42470e3c

08004dec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004dec:	b500      	push	{lr}
 8004dee:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df0:	2300      	movs	r3, #0
 8004df2:	9303      	str	r3, [sp, #12]
 8004df4:	9304      	str	r3, [sp, #16]
 8004df6:	9305      	str	r3, [sp, #20]
 8004df8:	9306      	str	r3, [sp, #24]
 8004dfa:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8004dfc:	6802      	ldr	r2, [r0, #0]
 8004dfe:	4b15      	ldr	r3, [pc, #84]	; (8004e54 <HAL_SPI_MspInit+0x68>)
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d002      	beq.n	8004e0a <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004e04:	b009      	add	sp, #36	; 0x24
 8004e06:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	9101      	str	r1, [sp, #4]
 8004e0e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8004e12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e18:	645a      	str	r2, [r3, #68]	; 0x44
 8004e1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e1c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e20:	9201      	str	r2, [sp, #4]
 8004e22:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e24:	9102      	str	r1, [sp, #8]
 8004e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	9302      	str	r3, [sp, #8]
 8004e36:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004e38:	23e0      	movs	r3, #224	; 0xe0
 8004e3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e40:	2303      	movs	r3, #3
 8004e42:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e44:	2305      	movs	r3, #5
 8004e46:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e48:	a903      	add	r1, sp, #12
 8004e4a:	4803      	ldr	r0, [pc, #12]	; (8004e58 <HAL_SPI_MspInit+0x6c>)
 8004e4c:	f001 fb14 	bl	8006478 <HAL_GPIO_Init>
}
 8004e50:	e7d8      	b.n	8004e04 <HAL_SPI_MspInit+0x18>
 8004e52:	bf00      	nop
 8004e54:	40013000 	.word	0x40013000
 8004e58:	40020000 	.word	0x40020000

08004e5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 8004e60:	6803      	ldr	r3, [r0, #0]
 8004e62:	4a21      	ldr	r2, [pc, #132]	; (8004ee8 <HAL_TIM_PWM_MspInit+0x8c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d007      	beq.n	8004e78 <HAL_TIM_PWM_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 8004e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6c:	d021      	beq.n	8004eb2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 8004e6e:	4a1f      	ldr	r2, [pc, #124]	; (8004eec <HAL_TIM_PWM_MspInit+0x90>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d02b      	beq.n	8004ecc <HAL_TIM_PWM_MspInit+0x70>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004e74:	b004      	add	sp, #16
 8004e76:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e78:	2400      	movs	r4, #0
 8004e7a:	9401      	str	r4, [sp, #4]
 8004e7c:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <HAL_TIM_PWM_MspInit+0x94>)
 8004e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e80:	f042 0201 	orr.w	r2, r2, #1
 8004e84:	645a      	str	r2, [r3, #68]	; 0x44
 8004e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	9301      	str	r3, [sp, #4]
 8004e8e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004e90:	4622      	mov	r2, r4
 8004e92:	4621      	mov	r1, r4
 8004e94:	2019      	movs	r0, #25
 8004e96:	f001 f80f 	bl	8005eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004e9a:	2019      	movs	r0, #25
 8004e9c:	f001 f840 	bl	8005f20 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	2105      	movs	r1, #5
 8004ea4:	201a      	movs	r0, #26
 8004ea6:	f001 f807 	bl	8005eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004eaa:	201a      	movs	r0, #26
 8004eac:	f001 f838 	bl	8005f20 <HAL_NVIC_EnableIRQ>
 8004eb0:	e7e0      	b.n	8004e74 <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	9302      	str	r3, [sp, #8]
 8004eb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <HAL_TIM_PWM_MspInit+0x94>)
 8004eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eba:	f042 0201 	orr.w	r2, r2, #1
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	9302      	str	r3, [sp, #8]
 8004ec8:	9b02      	ldr	r3, [sp, #8]
 8004eca:	e7d3      	b.n	8004e74 <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ecc:	2300      	movs	r3, #0
 8004ece:	9303      	str	r3, [sp, #12]
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <HAL_TIM_PWM_MspInit+0x94>)
 8004ed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ed4:	f042 0202 	orr.w	r2, r2, #2
 8004ed8:	641a      	str	r2, [r3, #64]	; 0x40
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	9303      	str	r3, [sp, #12]
 8004ee2:	9b03      	ldr	r3, [sp, #12]
}
 8004ee4:	e7c6      	b.n	8004e74 <HAL_TIM_PWM_MspInit+0x18>
 8004ee6:	bf00      	nop
 8004ee8:	40010000 	.word	0x40010000
 8004eec:	40000400 	.word	0x40000400
 8004ef0:	40023800 	.word	0x40023800

08004ef4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 8004ef4:	6802      	ldr	r2, [r0, #0]
 8004ef6:	4b0e      	ldr	r3, [pc, #56]	; (8004f30 <HAL_TIM_Base_MspInit+0x3c>)
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d000      	beq.n	8004efe <HAL_TIM_Base_MspInit+0xa>
 8004efc:	4770      	bx	lr
{
 8004efe:	b500      	push	{lr}
 8004f00:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004f02:	2200      	movs	r2, #0
 8004f04:	9201      	str	r2, [sp, #4]
 8004f06:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8004f0a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004f0c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8004f10:	6459      	str	r1, [r3, #68]	; 0x44
 8004f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	9b01      	ldr	r3, [sp, #4]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8004f1c:	2105      	movs	r1, #5
 8004f1e:	201a      	movs	r0, #26
 8004f20:	f000 ffca 	bl	8005eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004f24:	201a      	movs	r0, #26
 8004f26:	f000 fffb 	bl	8005f20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004f2a:	b003      	add	sp, #12
 8004f2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f30:	40014800 	.word	0x40014800

08004f34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9305      	str	r3, [sp, #20]
 8004f3c:	9306      	str	r3, [sp, #24]
 8004f3e:	9307      	str	r3, [sp, #28]
 8004f40:	9308      	str	r3, [sp, #32]
 8004f42:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim->Instance==TIM1)
 8004f44:	6803      	ldr	r3, [r0, #0]
 8004f46:	4a32      	ldr	r2, [pc, #200]	; (8005010 <HAL_TIM_MspPostInit+0xdc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d007      	beq.n	8004f5c <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8004f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f50:	d01c      	beq.n	8004f8c <HAL_TIM_MspPostInit+0x58>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8004f52:	4a30      	ldr	r2, [pc, #192]	; (8005014 <HAL_TIM_MspPostInit+0xe0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d045      	beq.n	8004fe4 <HAL_TIM_MspPostInit+0xb0>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004f58:	b00a      	add	sp, #40	; 0x28
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <HAL_TIM_MspPostInit+0xe4>)
 8004f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f64:	f042 0201 	orr.w	r2, r2, #1
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004f74:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004f78:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f82:	a905      	add	r1, sp, #20
 8004f84:	4825      	ldr	r0, [pc, #148]	; (800501c <HAL_TIM_MspPostInit+0xe8>)
 8004f86:	f001 fa77 	bl	8006478 <HAL_GPIO_Init>
 8004f8a:	e7e5      	b.n	8004f58 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f8c:	2400      	movs	r4, #0
 8004f8e:	9402      	str	r4, [sp, #8]
 8004f90:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8004f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f9e:	f002 0201 	and.w	r2, r2, #1
 8004fa2:	9202      	str	r2, [sp, #8]
 8004fa4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fa6:	9403      	str	r4, [sp, #12]
 8004fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004faa:	f042 0202 	orr.w	r2, r2, #2
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	9303      	str	r3, [sp, #12]
 8004fb8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004fba:	2501      	movs	r5, #1
 8004fbc:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fbe:	2602      	movs	r6, #2
 8004fc0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004fc2:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc4:	a905      	add	r1, sp, #20
 8004fc6:	4815      	ldr	r0, [pc, #84]	; (800501c <HAL_TIM_MspPostInit+0xe8>)
 8004fc8:	f001 fa56 	bl	8006478 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8004fcc:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8004fd0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004fd8:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fda:	a905      	add	r1, sp, #20
 8004fdc:	4810      	ldr	r0, [pc, #64]	; (8005020 <HAL_TIM_MspPostInit+0xec>)
 8004fde:	f001 fa4b 	bl	8006478 <HAL_GPIO_Init>
 8004fe2:	e7b9      	b.n	8004f58 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9304      	str	r3, [sp, #16]
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <HAL_TIM_MspPostInit+0xe4>)
 8004fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fec:	f042 0202 	orr.w	r2, r2, #2
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	9304      	str	r3, [sp, #16]
 8004ffa:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8004ffc:	2331      	movs	r3, #49	; 0x31
 8004ffe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005000:	2302      	movs	r3, #2
 8005002:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005004:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005006:	a905      	add	r1, sp, #20
 8005008:	4805      	ldr	r0, [pc, #20]	; (8005020 <HAL_TIM_MspPostInit+0xec>)
 800500a:	f001 fa35 	bl	8006478 <HAL_GPIO_Init>
}
 800500e:	e7a3      	b.n	8004f58 <HAL_TIM_MspPostInit+0x24>
 8005010:	40010000 	.word	0x40010000
 8005014:	40000400 	.word	0x40000400
 8005018:	40023800 	.word	0x40023800
 800501c:	40020000 	.word	0x40020000
 8005020:	40020400 	.word	0x40020400

08005024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005024:	b530      	push	{r4, r5, lr}
 8005026:	b08d      	sub	sp, #52	; 0x34
 8005028:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800502a:	2300      	movs	r3, #0
 800502c:	9307      	str	r3, [sp, #28]
 800502e:	9308      	str	r3, [sp, #32]
 8005030:	9309      	str	r3, [sp, #36]	; 0x24
 8005032:	930a      	str	r3, [sp, #40]	; 0x28
 8005034:	930b      	str	r3, [sp, #44]	; 0x2c
  if(huart->Instance==USART1)
 8005036:	6803      	ldr	r3, [r0, #0]
 8005038:	4a6e      	ldr	r2, [pc, #440]	; (80051f4 <HAL_UART_MspInit+0x1d0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d008      	beq.n	8005050 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800503e:	4a6e      	ldr	r2, [pc, #440]	; (80051f8 <HAL_UART_MspInit+0x1d4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d04b      	beq.n	80050dc <HAL_UART_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8005044:	4a6d      	ldr	r2, [pc, #436]	; (80051fc <HAL_UART_MspInit+0x1d8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	f000 808c 	beq.w	8005164 <HAL_UART_MspInit+0x140>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800504c:	b00d      	add	sp, #52	; 0x34
 800504e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8005050:	2500      	movs	r5, #0
 8005052:	9501      	str	r5, [sp, #4]
 8005054:	4b6a      	ldr	r3, [pc, #424]	; (8005200 <HAL_UART_MspInit+0x1dc>)
 8005056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005058:	f042 0210 	orr.w	r2, r2, #16
 800505c:	645a      	str	r2, [r3, #68]	; 0x44
 800505e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005060:	f002 0210 	and.w	r2, r2, #16
 8005064:	9201      	str	r2, [sp, #4]
 8005066:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005068:	9502      	str	r5, [sp, #8]
 800506a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506c:	f042 0202 	orr.w	r2, r2, #2
 8005070:	631a      	str	r2, [r3, #48]	; 0x30
 8005072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	9302      	str	r3, [sp, #8]
 800507a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800507c:	23c0      	movs	r3, #192	; 0xc0
 800507e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005080:	2302      	movs	r3, #2
 8005082:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005084:	2303      	movs	r3, #3
 8005086:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005088:	2307      	movs	r3, #7
 800508a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800508c:	a907      	add	r1, sp, #28
 800508e:	485d      	ldr	r0, [pc, #372]	; (8005204 <HAL_UART_MspInit+0x1e0>)
 8005090:	f001 f9f2 	bl	8006478 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005094:	485c      	ldr	r0, [pc, #368]	; (8005208 <HAL_UART_MspInit+0x1e4>)
 8005096:	4b5d      	ldr	r3, [pc, #372]	; (800520c <HAL_UART_MspInit+0x1e8>)
 8005098:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800509a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800509e:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050a0:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050a2:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050a8:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050aa:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050ac:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80050ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050b2:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80050b4:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050b6:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80050b8:	f000 fff6 	bl	80060a8 <HAL_DMA_Init>
 80050bc:	b958      	cbnz	r0, 80050d6 <HAL_UART_MspInit+0xb2>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80050be:	4b52      	ldr	r3, [pc, #328]	; (8005208 <HAL_UART_MspInit+0x1e4>)
 80050c0:	6363      	str	r3, [r4, #52]	; 0x34
 80050c2:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80050c4:	2200      	movs	r2, #0
 80050c6:	2107      	movs	r1, #7
 80050c8:	2025      	movs	r0, #37	; 0x25
 80050ca:	f000 fef5 	bl	8005eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050ce:	2025      	movs	r0, #37	; 0x25
 80050d0:	f000 ff26 	bl	8005f20 <HAL_NVIC_EnableIRQ>
 80050d4:	e7ba      	b.n	800504c <HAL_UART_MspInit+0x28>
      Error_Handler();
 80050d6:	f7ff fabd 	bl	8004654 <Error_Handler>
 80050da:	e7f0      	b.n	80050be <HAL_UART_MspInit+0x9a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80050dc:	2500      	movs	r5, #0
 80050de:	9503      	str	r5, [sp, #12]
 80050e0:	4b47      	ldr	r3, [pc, #284]	; (8005200 <HAL_UART_MspInit+0x1dc>)
 80050e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80050e8:	641a      	str	r2, [r3, #64]	; 0x40
 80050ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ec:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80050f0:	9203      	str	r2, [sp, #12]
 80050f2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050f4:	9504      	str	r5, [sp, #16]
 80050f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f8:	f042 0201 	orr.w	r2, r2, #1
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	9304      	str	r3, [sp, #16]
 8005106:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005108:	230c      	movs	r3, #12
 800510a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800510c:	2302      	movs	r3, #2
 800510e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005110:	2303      	movs	r3, #3
 8005112:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005114:	2307      	movs	r3, #7
 8005116:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005118:	a907      	add	r1, sp, #28
 800511a:	483d      	ldr	r0, [pc, #244]	; (8005210 <HAL_UART_MspInit+0x1ec>)
 800511c:	f001 f9ac 	bl	8006478 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005120:	483c      	ldr	r0, [pc, #240]	; (8005214 <HAL_UART_MspInit+0x1f0>)
 8005122:	4b3d      	ldr	r3, [pc, #244]	; (8005218 <HAL_UART_MspInit+0x1f4>)
 8005124:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005126:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800512a:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800512c:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800512e:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005134:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005136:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005138:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800513a:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800513c:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800513e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005140:	f000 ffb2 	bl	80060a8 <HAL_DMA_Init>
 8005144:	b958      	cbnz	r0, 800515e <HAL_UART_MspInit+0x13a>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005146:	4b33      	ldr	r3, [pc, #204]	; (8005214 <HAL_UART_MspInit+0x1f0>)
 8005148:	6363      	str	r3, [r4, #52]	; 0x34
 800514a:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 800514c:	2200      	movs	r2, #0
 800514e:	2108      	movs	r1, #8
 8005150:	2026      	movs	r0, #38	; 0x26
 8005152:	f000 feb1 	bl	8005eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005156:	2026      	movs	r0, #38	; 0x26
 8005158:	f000 fee2 	bl	8005f20 <HAL_NVIC_EnableIRQ>
 800515c:	e776      	b.n	800504c <HAL_UART_MspInit+0x28>
      Error_Handler();
 800515e:	f7ff fa79 	bl	8004654 <Error_Handler>
 8005162:	e7f0      	b.n	8005146 <HAL_UART_MspInit+0x122>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005164:	2500      	movs	r5, #0
 8005166:	9505      	str	r5, [sp, #20]
 8005168:	4b25      	ldr	r3, [pc, #148]	; (8005200 <HAL_UART_MspInit+0x1dc>)
 800516a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800516c:	f042 0220 	orr.w	r2, r2, #32
 8005170:	645a      	str	r2, [r3, #68]	; 0x44
 8005172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005174:	f002 0220 	and.w	r2, r2, #32
 8005178:	9205      	str	r2, [sp, #20]
 800517a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800517c:	9506      	str	r5, [sp, #24]
 800517e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005180:	f042 0201 	orr.w	r2, r2, #1
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	9306      	str	r3, [sp, #24]
 800518e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005190:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005194:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005196:	2302      	movs	r3, #2
 8005198:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800519a:	2303      	movs	r3, #3
 800519c:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800519e:	2308      	movs	r3, #8
 80051a0:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051a2:	a907      	add	r1, sp, #28
 80051a4:	481a      	ldr	r0, [pc, #104]	; (8005210 <HAL_UART_MspInit+0x1ec>)
 80051a6:	f001 f967 	bl	8006478 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80051aa:	481c      	ldr	r0, [pc, #112]	; (800521c <HAL_UART_MspInit+0x1f8>)
 80051ac:	4b1c      	ldr	r3, [pc, #112]	; (8005220 <HAL_UART_MspInit+0x1fc>)
 80051ae:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80051b0:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 80051b4:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051b6:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051b8:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051be:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051c0:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051c2:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80051c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051c8:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051ca:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051cc:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80051ce:	f000 ff6b 	bl	80060a8 <HAL_DMA_Init>
 80051d2:	b958      	cbnz	r0, 80051ec <HAL_UART_MspInit+0x1c8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80051d4:	4b11      	ldr	r3, [pc, #68]	; (800521c <HAL_UART_MspInit+0x1f8>)
 80051d6:	6363      	str	r3, [r4, #52]	; 0x34
 80051d8:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 80051da:	2200      	movs	r2, #0
 80051dc:	2106      	movs	r1, #6
 80051de:	2047      	movs	r0, #71	; 0x47
 80051e0:	f000 fe6a 	bl	8005eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80051e4:	2047      	movs	r0, #71	; 0x47
 80051e6:	f000 fe9b 	bl	8005f20 <HAL_NVIC_EnableIRQ>
}
 80051ea:	e72f      	b.n	800504c <HAL_UART_MspInit+0x28>
      Error_Handler();
 80051ec:	f7ff fa32 	bl	8004654 <Error_Handler>
 80051f0:	e7f0      	b.n	80051d4 <HAL_UART_MspInit+0x1b0>
 80051f2:	bf00      	nop
 80051f4:	40011000 	.word	0x40011000
 80051f8:	40004400 	.word	0x40004400
 80051fc:	40011400 	.word	0x40011400
 8005200:	40023800 	.word	0x40023800
 8005204:	40020400 	.word	0x40020400
 8005208:	2000316c 	.word	0x2000316c
 800520c:	40026440 	.word	0x40026440
 8005210:	40020000 	.word	0x40020000
 8005214:	20002fc0 	.word	0x20002fc0
 8005218:	40026088 	.word	0x40026088
 800521c:	20003020 	.word	0x20003020
 8005220:	40026428 	.word	0x40026428

08005224 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005224:	b510      	push	{r4, lr}
 8005226:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;

  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8005228:	2200      	movs	r2, #0
 800522a:	4601      	mov	r1, r0
 800522c:	2019      	movs	r0, #25
 800522e:	f000 fe43 	bl	8005eb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005232:	2019      	movs	r0, #25
 8005234:	f000 fe74 	bl	8005f20 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8005238:	2400      	movs	r4, #0
 800523a:	9401      	str	r4, [sp, #4]
 800523c:	4b13      	ldr	r3, [pc, #76]	; (800528c <HAL_InitTick+0x68>)
 800523e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005240:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005244:	645a      	str	r2, [r3, #68]	; 0x44
 8005246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005250:	a902      	add	r1, sp, #8
 8005252:	a803      	add	r0, sp, #12
 8005254:	f002 fb2e 	bl	80078b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005258:	f002 fb1c 	bl	8007894 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800525c:	4b0c      	ldr	r3, [pc, #48]	; (8005290 <HAL_InitTick+0x6c>)
 800525e:	fba3 2300 	umull	r2, r3, r3, r0
 8005262:	0c9b      	lsrs	r3, r3, #18
 8005264:	3b01      	subs	r3, #1

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8005266:	480b      	ldr	r0, [pc, #44]	; (8005294 <HAL_InitTick+0x70>)
 8005268:	4a0b      	ldr	r2, [pc, #44]	; (8005298 <HAL_InitTick+0x74>)
 800526a:	6002      	str	r2, [r0, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 800526c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005270:	60c2      	str	r2, [r0, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8005272:	6043      	str	r3, [r0, #4]
  htim10.Init.ClockDivision = 0;
 8005274:	6104      	str	r4, [r0, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005276:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8005278:	f003 fb34 	bl	80088e4 <HAL_TIM_Base_Init>
 800527c:	b110      	cbz	r0, 8005284 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
  }

  /* Return function status */
  return HAL_ERROR;
 800527e:	2001      	movs	r0, #1
}
 8005280:	b008      	add	sp, #32
 8005282:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim10);
 8005284:	4803      	ldr	r0, [pc, #12]	; (8005294 <HAL_InitTick+0x70>)
 8005286:	f003 fa0d 	bl	80086a4 <HAL_TIM_Base_Start_IT>
 800528a:	e7f9      	b.n	8005280 <HAL_InitTick+0x5c>
 800528c:	40023800 	.word	0x40023800
 8005290:	431bde83 	.word	0x431bde83
 8005294:	200033dc 	.word	0x200033dc
 8005298:	40014400 	.word	0x40014400

0800529c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800529c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800529e:	f002 fb29 	bl	80078f4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80052a2:	bd08      	pop	{r3, pc}

080052a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052a4:	e7fe      	b.n	80052a4 <HardFault_Handler>

080052a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052a6:	e7fe      	b.n	80052a6 <MemManage_Handler>

080052a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052a8:	e7fe      	b.n	80052a8 <BusFault_Handler>

080052aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052aa:	e7fe      	b.n	80052aa <UsageFault_Handler>

080052ac <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052ac:	4770      	bx	lr

080052ae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80052ae:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80052b0:	2002      	movs	r0, #2
 80052b2:	f001 f9c1 	bl	8006638 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80052b6:	bd08      	pop	{r3, pc}

080052b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80052b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80052ba:	4802      	ldr	r0, [pc, #8]	; (80052c4 <DMA1_Stream5_IRQHandler+0xc>)
 80052bc:	f000 ffec 	bl	8006298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80052c0:	bd08      	pop	{r3, pc}
 80052c2:	bf00      	nop
 80052c4:	20002fc0 	.word	0x20002fc0

080052c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80052c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80052ca:	4803      	ldr	r0, [pc, #12]	; (80052d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80052cc:	f003 f9ff 	bl	80086ce <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80052d0:	4802      	ldr	r0, [pc, #8]	; (80052dc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80052d2:	f003 f9fc 	bl	80086ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80052d6:	bd08      	pop	{r3, pc}
 80052d8:	20003270 	.word	0x20003270
 80052dc:	200033dc 	.word	0x200033dc

080052e0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80052e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80052e2:	4803      	ldr	r0, [pc, #12]	; (80052f0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80052e4:	f003 f9f3 	bl	80086ce <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80052e8:	4802      	ldr	r0, [pc, #8]	; (80052f4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80052ea:	f003 f9f0 	bl	80086ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80052ee:	bd08      	pop	{r3, pc}
 80052f0:	20003270 	.word	0x20003270
 80052f4:	2000320c 	.word	0x2000320c

080052f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80052f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_small_comm);
 80052fa:	4802      	ldr	r0, [pc, #8]	; (8005304 <USART1_IRQHandler+0xc>)
 80052fc:	f7fe ffcc 	bl	8004298 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005300:	bd08      	pop	{r3, pc}
 8005302:	bf00      	nop
 8005304:	20002cb4 	.word	0x20002cb4

08005308 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005308:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800530a:	4802      	ldr	r0, [pc, #8]	; (8005314 <USART2_IRQHandler+0xc>)
 800530c:	f003 ffc8 	bl	80092a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005310:	bd08      	pop	{r3, pc}
 8005312:	bf00      	nop
 8005314:	20003388 	.word	0x20003388

08005318 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005318:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800531a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800531e:	f001 f98b 	bl	8006638 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005322:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005326:	f001 f987 	bl	8006638 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800532a:	bd08      	pop	{r3, pc}

0800532c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800532c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_big_comm);
 800532e:	4802      	ldr	r0, [pc, #8]	; (8005338 <DMA2_Stream1_IRQHandler+0xc>)
 8005330:	f7fe ffc8 	bl	80042c4 <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005334:	bd08      	pop	{r3, pc}
 8005336:	bf00      	nop
 8005338:	20002c00 	.word	0x20002c00

0800533c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800533c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_small_comm);
 800533e:	4802      	ldr	r0, [pc, #8]	; (8005348 <DMA2_Stream2_IRQHandler+0xc>)
 8005340:	f7fe ffc0 	bl	80042c4 <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005344:	bd08      	pop	{r3, pc}
 8005346:	bf00      	nop
 8005348:	20002cb4 	.word	0x20002cb4

0800534c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800534c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_big_comm);
 800534e:	4802      	ldr	r0, [pc, #8]	; (8005358 <USART6_IRQHandler+0xc>)
 8005350:	f7fe ffa2 	bl	8004298 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005354:	bd08      	pop	{r3, pc}
 8005356:	bf00      	nop
 8005358:	20002c00 	.word	0x20002c00

0800535c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800535c:	b508      	push	{r3, lr}
 800535e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005360:	4a0b      	ldr	r2, [pc, #44]	; (8005390 <_sbrk+0x34>)
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	b142      	cbz	r2, 8005378 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8005366:	4a0a      	ldr	r2, [pc, #40]	; (8005390 <_sbrk+0x34>)
 8005368:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800536a:	4403      	add	r3, r0
 800536c:	466a      	mov	r2, sp
 800536e:	4293      	cmp	r3, r2
 8005370:	d806      	bhi.n	8005380 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8005372:	4a07      	ldr	r2, [pc, #28]	; (8005390 <_sbrk+0x34>)
 8005374:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8005376:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8005378:	4a05      	ldr	r2, [pc, #20]	; (8005390 <_sbrk+0x34>)
 800537a:	4906      	ldr	r1, [pc, #24]	; (8005394 <_sbrk+0x38>)
 800537c:	6011      	str	r1, [r2, #0]
 800537e:	e7f2      	b.n	8005366 <_sbrk+0xa>
		errno = ENOMEM;
 8005380:	f007 f96e 	bl	800c660 <__errno>
 8005384:	230c      	movs	r3, #12
 8005386:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800538c:	e7f3      	b.n	8005376 <_sbrk+0x1a>
 800538e:	bf00      	nop
 8005390:	200008fc 	.word	0x200008fc
 8005394:	200034b0 	.word	0x200034b0

08005398 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <SystemInit+0x18>)
 800539a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800539e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80053a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80053a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053aa:	609a      	str	r2, [r3, #8]
#endif
}
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	e000ed00 	.word	0xe000ed00

080053b4 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 80053b4:	b508      	push	{r3, lr}
	vTaskDelay(Time);
 80053b6:	f005 f955 	bl	800a664 <vTaskDelay>
}
 80053ba:	bd08      	pop	{r3, pc}

080053bc <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 80053bc:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 80053be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053c2:	460a      	mov	r2, r1
 80053c4:	4601      	mov	r1, r0
 80053c6:	4802      	ldr	r0, [pc, #8]	; (80053d0 <nRF24_SendSpi+0x14>)
 80053c8:	6800      	ldr	r0, [r0, #0]
 80053ca:	f002 fe51 	bl	8008070 <HAL_SPI_Transmit>
}
 80053ce:	bd08      	pop	{r3, pc}
 80053d0:	2000090c 	.word	0x2000090c

080053d4 <nRF24_WriteRegister>:

	NRF24_CSN_HIGH;
}

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 80053d4:	b500      	push	{lr}
 80053d6:	b083      	sub	sp, #12
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 80053d8:	f040 0020 	orr.w	r0, r0, #32
 80053dc:	f88d 0004 	strb.w	r0, [sp, #4]
	tmp[1] = val;
 80053e0:	f88d 1005 	strb.w	r1, [sp, #5]

	NRF24_CSN_LOW;
 80053e4:	f7fe fba2 	bl	8003b2c <NRF_ChipSelect>

	nRF24_SendSpi(tmp, 2);
 80053e8:	2102      	movs	r1, #2
 80053ea:	a801      	add	r0, sp, #4
 80053ec:	f7ff ffe6 	bl	80053bc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80053f0:	f7fe fbae 	bl	8003b50 <NRF_ChipDeselect>
}
 80053f4:	b003      	add	sp, #12
 80053f6:	f85d fb04 	ldr.w	pc, [sp], #4

080053fa <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 80053fa:	b570      	push	{r4, r5, r6, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	460d      	mov	r5, r1
 8005400:	4616      	mov	r6, r2
	reg = NRF24_CMD_W_REGISTER | reg;
 8005402:	f040 0020 	orr.w	r0, r0, #32
 8005406:	ac02      	add	r4, sp, #8
 8005408:	f804 0d01 	strb.w	r0, [r4, #-1]!

	NRF24_CSN_LOW;
 800540c:	f7fe fb8e 	bl	8003b2c <NRF_ChipSelect>

	nRF24_SendSpi(&reg, 1);
 8005410:	2101      	movs	r1, #1
 8005412:	4620      	mov	r0, r4
 8005414:	f7ff ffd2 	bl	80053bc <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8005418:	4631      	mov	r1, r6
 800541a:	4628      	mov	r0, r5
 800541c:	f7ff ffce 	bl	80053bc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8005420:	f7fe fb96 	bl	8003b50 <NRF_ChipDeselect>
}
 8005424:	b002      	add	sp, #8
 8005426:	bd70      	pop	{r4, r5, r6, pc}

08005428 <nRF24_ReadSpi>:
{
 8005428:	b508      	push	{r3, lr}
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 800542a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800542e:	460a      	mov	r2, r1
 8005430:	4601      	mov	r1, r0
 8005432:	4802      	ldr	r0, [pc, #8]	; (800543c <nRF24_ReadSpi+0x14>)
 8005434:	6800      	ldr	r0, [r0, #0]
 8005436:	f002 ffff 	bl	8008438 <HAL_SPI_Receive>
}
 800543a:	bd08      	pop	{r3, pc}
 800543c:	2000090c 	.word	0x2000090c

08005440 <nRF24_ReadRegister>:
{
 8005440:	b510      	push	{r4, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	ac04      	add	r4, sp, #16
 8005446:	f804 0d09 	strb.w	r0, [r4, #-9]!
	NRF24_CSN_LOW;
 800544a:	f7fe fb6f 	bl	8003b2c <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 800544e:	2101      	movs	r1, #1
 8005450:	4620      	mov	r0, r4
 8005452:	f7ff ffb3 	bl	80053bc <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8005456:	2101      	movs	r1, #1
 8005458:	f10d 000f 	add.w	r0, sp, #15
 800545c:	f7ff ffe4 	bl	8005428 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8005460:	f7fe fb76 	bl	8003b50 <NRF_ChipDeselect>
}
 8005464:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8005468:	b004      	add	sp, #16
 800546a:	bd10      	pop	{r4, pc}

0800546c <nRF24_ReadRegisters>:
{
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	460d      	mov	r5, r1
 8005472:	4616      	mov	r6, r2
 8005474:	ac02      	add	r4, sp, #8
 8005476:	f804 0d01 	strb.w	r0, [r4, #-1]!
	NRF24_CSN_LOW;
 800547a:	f7fe fb57 	bl	8003b2c <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 800547e:	2101      	movs	r1, #1
 8005480:	4620      	mov	r0, r4
 8005482:	f7ff ff9b 	bl	80053bc <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8005486:	4631      	mov	r1, r6
 8005488:	4628      	mov	r0, r5
 800548a:	f7ff ffcd 	bl	8005428 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 800548e:	f7fe fb5f 	bl	8003b50 <NRF_ChipDeselect>
}
 8005492:	b002      	add	sp, #8
 8005494:	bd70      	pop	{r4, r5, r6, pc}

08005496 <nRF24_ReadConfig>:

	nRF24_Delay_ms(1);
}

uint8_t nRF24_ReadConfig(void)
{
 8005496:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8005498:	2000      	movs	r0, #0
 800549a:	f7ff ffd1 	bl	8005440 <nRF24_ReadRegister>
}
 800549e:	bd08      	pop	{r3, pc}

080054a0 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 80054a0:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 80054a2:	4601      	mov	r1, r0
 80054a4:	2000      	movs	r0, #0
 80054a6:	f7ff ff95 	bl	80053d4 <nRF24_WriteRegister>
}
 80054aa:	bd08      	pop	{r3, pc}

080054ac <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 80054ac:	b510      	push	{r4, lr}
 80054ae:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80054b0:	2006      	movs	r0, #6
 80054b2:	f7ff ffc5 	bl	8005440 <nRF24_ReadRegister>
	rf_setup &= 0xF8; // Clear PWR bits
 80054b6:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	rf_setup |= (lev<<1);
 80054ba:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80054be:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80054c2:	2006      	movs	r0, #6
 80054c4:	f7ff ff86 	bl	80053d4 <nRF24_WriteRegister>
}
 80054c8:	bd10      	pop	{r4, pc}

080054ca <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80054ca:	b510      	push	{r4, lr}
 80054cc:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80054ce:	2006      	movs	r0, #6
 80054d0:	f7ff ffb6 	bl	8005440 <nRF24_ReadRegister>
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80054d4:	f000 01d7 	and.w	r1, r0, #215	; 0xd7
	if(dr == NRF24_RF_DR_250KBPS)
 80054d8:	2c02      	cmp	r4, #2
 80054da:	d005      	beq.n	80054e8 <nRF24_SetDataRate+0x1e>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
	else if(dr == NRF24_RF_DR_2MBPS)
 80054dc:	2c01      	cmp	r4, #1
 80054de:	d006      	beq.n	80054ee <nRF24_SetDataRate+0x24>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80054e0:	2006      	movs	r0, #6
 80054e2:	f7ff ff77 	bl	80053d4 <nRF24_WriteRegister>
}
 80054e6:	bd10      	pop	{r4, pc}
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80054e8:	f041 0120 	orr.w	r1, r1, #32
 80054ec:	e7f8      	b.n	80054e0 <nRF24_SetDataRate+0x16>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80054ee:	f041 0108 	orr.w	r1, r1, #8
 80054f2:	e7f5      	b.n	80054e0 <nRF24_SetDataRate+0x16>

080054f4 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 80054f4:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_STATUS));
 80054f6:	2007      	movs	r0, #7
 80054f8:	f7ff ffa2 	bl	8005440 <nRF24_ReadRegister>
}
 80054fc:	bd08      	pop	{r3, pc}

080054fe <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 80054fe:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_STATUS, st);
 8005500:	4601      	mov	r1, r0
 8005502:	2007      	movs	r0, #7
 8005504:	f7ff ff66 	bl	80053d4 <nRF24_WriteRegister>
}
 8005508:	bd08      	pop	{r3, pc}

0800550a <nRF24_ReadFifoStatus>:
//
// FIFO Status
//

uint8_t nRF24_ReadFifoStatus(void)
{
 800550a:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 800550c:	2017      	movs	r0, #23
 800550e:	f7ff ff97 	bl	8005440 <nRF24_ReadRegister>
}
 8005512:	bd08      	pop	{r3, pc}

08005514 <nRF24_IsBitSetInFifoStatus>:
{
	nRF24_WriteRegister(NRF24_FIFO_STATUS, st);
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8005514:	b510      	push	{r4, lr}
 8005516:	4604      	mov	r4, r0
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8005518:	f7ff fff7 	bl	800550a <nRF24_ReadFifoStatus>

	if(FifoStatus & (1<<Bit))
 800551c:	4120      	asrs	r0, r4
 800551e:	f010 0f01 	tst.w	r0, #1
 8005522:	d101      	bne.n	8005528 <nRF24_IsBitSetInFifoStatus+0x14>
	{
		return 1;
	}

	return 0;
 8005524:	2000      	movs	r0, #0
}
 8005526:	bd10      	pop	{r4, pc}
		return 1;
 8005528:	2001      	movs	r0, #1
 800552a:	e7fc      	b.n	8005526 <nRF24_IsBitSetInFifoStatus+0x12>

0800552c <nRF24_IsRxEmpty>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_FULL);
}

uint8_t nRF24_IsRxEmpty(void)
{
 800552c:	b508      	push	{r3, lr}
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
 800552e:	2000      	movs	r0, #0
 8005530:	f7ff fff0 	bl	8005514 <nRF24_IsBitSetInFifoStatus>
}
 8005534:	bd08      	pop	{r3, pc}

08005536 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8005536:	b510      	push	{r4, lr}
 8005538:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800553a:	ac02      	add	r4, sp, #8
 800553c:	23e2      	movs	r3, #226	; 0xe2
 800553e:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8005542:	f7fe faf3 	bl	8003b2c <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8005546:	2101      	movs	r1, #1
 8005548:	4620      	mov	r0, r4
 800554a:	f7ff ff37 	bl	80053bc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800554e:	f7fe faff 	bl	8003b50 <NRF_ChipDeselect>
}
 8005552:	b002      	add	sp, #8
 8005554:	bd10      	pop	{r4, pc}

08005556 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8005556:	b510      	push	{r4, lr}
 8005558:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_TX;
 800555a:	ac02      	add	r4, sp, #8
 800555c:	23e1      	movs	r3, #225	; 0xe1
 800555e:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8005562:	f7fe fae3 	bl	8003b2c <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8005566:	2101      	movs	r1, #1
 8005568:	4620      	mov	r0, r4
 800556a:	f7ff ff27 	bl	80053bc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800556e:	f7fe faef 	bl	8003b50 <NRF_ChipDeselect>
}
 8005572:	b002      	add	sp, #8
 8005574:	bd10      	pop	{r4, pc}
	...

08005578 <nRF24_TX_Mode>:
{
 8005578:	b508      	push	{r3, lr}
	NRF24_CE_LOW;
 800557a:	2200      	movs	r2, #0
 800557c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005580:	480a      	ldr	r0, [pc, #40]	; (80055ac <nRF24_TX_Mode+0x34>)
 8005582:	f001 f852 	bl	800662a <HAL_GPIO_WritePin>
	uint8_t config = nRF24_ReadConfig();
 8005586:	f7ff ff86 	bl	8005496 <nRF24_ReadConfig>
 800558a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	nRF24_WriteConfig(config);
 800558e:	f040 0002 	orr.w	r0, r0, #2
 8005592:	f7ff ff85 	bl	80054a0 <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8005596:	2070      	movs	r0, #112	; 0x70
 8005598:	f7ff ffb1 	bl	80054fe <nRF24_WriteStatus>
	nRF24_FlushRX();
 800559c:	f7ff ffcb 	bl	8005536 <nRF24_FlushRX>
	nRF24_FlushTX();
 80055a0:	f7ff ffd9 	bl	8005556 <nRF24_FlushTX>
	nRF24_Delay_ms(1);
 80055a4:	2001      	movs	r0, #1
 80055a6:	f7ff ff05 	bl	80053b4 <nRF24_Delay_ms>
}
 80055aa:	bd08      	pop	{r3, pc}
 80055ac:	40020400 	.word	0x40020400

080055b0 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80055b0:	b510      	push	{r4, lr}
 80055b2:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 80055b4:	f7ff ff6f 	bl	8005496 <nRF24_ReadConfig>

	if(onoff)
 80055b8:	b924      	cbnz	r4, 80055c4 <nRF24_EnableCRC+0x14>
		config |= (1<<NRF24_EN_CRC);
	else
		config &= ~(1<<NRF24_EN_CRC);
 80055ba:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
	nRF24_WriteConfig(config);
 80055be:	f7ff ff6f 	bl	80054a0 <nRF24_WriteConfig>
}
 80055c2:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_EN_CRC);
 80055c4:	f040 0008 	orr.w	r0, r0, #8
 80055c8:	b2c0      	uxtb	r0, r0
 80055ca:	e7f8      	b.n	80055be <nRF24_EnableCRC+0xe>

080055cc <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80055cc:	b510      	push	{r4, lr}
 80055ce:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 80055d0:	f7ff ff61 	bl	8005496 <nRF24_ReadConfig>
	if(crcl == NRF24_CRC_WIDTH_2B)
 80055d4:	2c01      	cmp	r4, #1
 80055d6:	d004      	beq.n	80055e2 <nRF24_SetCRCLength+0x16>
		config |= (1<<NRF24_CRCO);
	else
		config &= ~(1<<NRF24_CRCO);
 80055d8:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
	nRF24_WriteConfig(config);
 80055dc:	f7ff ff60 	bl	80054a0 <nRF24_WriteConfig>
}
 80055e0:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_CRCO);
 80055e2:	f040 0004 	orr.w	r0, r0, #4
 80055e6:	b2c0      	uxtb	r0, r0
 80055e8:	e7f8      	b.n	80055dc <nRF24_SetCRCLength+0x10>

080055ea <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 80055ea:	b508      	push	{r3, lr}
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80055ec:	f001 010f 	and.w	r1, r1, #15
 80055f0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80055f4:	b2c9      	uxtb	r1, r1
 80055f6:	2004      	movs	r0, #4
 80055f8:	f7ff feec 	bl	80053d4 <nRF24_WriteRegister>
}
 80055fc:	bd08      	pop	{r3, pc}

080055fe <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 80055fe:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8005600:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8005604:	2005      	movs	r0, #5
 8005606:	f7ff fee5 	bl	80053d4 <nRF24_WriteRegister>
}
 800560a:	bd08      	pop	{r3, pc}

0800560c <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4604      	mov	r4, r0
 8005610:	460d      	mov	r5, r1
	if(pipe > 5)
 8005612:	2805      	cmp	r0, #5
 8005614:	d900      	bls.n	8005618 <nRF24_EnablePipe+0xc>
		pipe = 5; // Block too high pipe number
 8005616:	2405      	movs	r4, #5
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8005618:	2002      	movs	r0, #2
 800561a:	f7ff ff11 	bl	8005440 <nRF24_ReadRegister>
	if(onoff == 1)
 800561e:	2d01      	cmp	r5, #1
 8005620:	d008      	beq.n	8005634 <nRF24_EnablePipe+0x28>
		enable_pipe |= (1<<pipe);
	else
		enable_pipe &= ~(1<<pipe);
 8005622:	2101      	movs	r1, #1
 8005624:	40a1      	lsls	r1, r4
 8005626:	ea20 0101 	bic.w	r1, r0, r1
 800562a:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800562c:	2002      	movs	r0, #2
 800562e:	f7ff fed1 	bl	80053d4 <nRF24_WriteRegister>
}
 8005632:	bd38      	pop	{r3, r4, r5, pc}
		enable_pipe |= (1<<pipe);
 8005634:	2101      	movs	r1, #1
 8005636:	40a1      	lsls	r1, r4
 8005638:	4301      	orrs	r1, r0
 800563a:	b2c9      	uxtb	r1, r1
 800563c:	e7f6      	b.n	800562c <nRF24_EnablePipe+0x20>

0800563e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800563e:	b538      	push	{r3, r4, r5, lr}
 8005640:	4604      	mov	r4, r0
 8005642:	460d      	mov	r5, r1
	if(pipe > 5)
 8005644:	2805      	cmp	r0, #5
 8005646:	d900      	bls.n	800564a <nRF24_AutoACK+0xc>
		pipe = 5; // Block too high pipe number
 8005648:	2405      	movs	r4, #5
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 800564a:	2001      	movs	r0, #1
 800564c:	f7ff fef8 	bl	8005440 <nRF24_ReadRegister>
	if(onoff == 1)
 8005650:	2d01      	cmp	r5, #1
 8005652:	d008      	beq.n	8005666 <nRF24_AutoACK+0x28>
		enaa |= (1<<pipe);
	else
		enaa &= ~(1<<pipe);
 8005654:	2101      	movs	r1, #1
 8005656:	40a1      	lsls	r1, r4
 8005658:	ea20 0101 	bic.w	r1, r0, r1
 800565c:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 800565e:	2001      	movs	r0, #1
 8005660:	f7ff feb8 	bl	80053d4 <nRF24_WriteRegister>
}
 8005664:	bd38      	pop	{r3, r4, r5, pc}
		enaa |= (1<<pipe);
 8005666:	2101      	movs	r1, #1
 8005668:	40a1      	lsls	r1, r4
 800566a:	4301      	orrs	r1, r0
 800566c:	b2c9      	uxtb	r1, r1
 800566e:	e7f6      	b.n	800565e <nRF24_AutoACK+0x20>

08005670 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8005670:	b508      	push	{r3, lr}
	if(size > 5)
 8005672:	2805      	cmp	r0, #5
 8005674:	d803      	bhi.n	800567e <nRF24_SetAddressWidth+0xe>
		size = 5; // Maximum are 5 bytes
	if(size < 3)
 8005676:	2802      	cmp	r0, #2
 8005678:	d802      	bhi.n	8005680 <nRF24_SetAddressWidth+0x10>
		size = 3; // Minimum are 3 bytes
 800567a:	2003      	movs	r0, #3
 800567c:	e000      	b.n	8005680 <nRF24_SetAddressWidth+0x10>
		size = 5; // Maximum are 5 bytes
 800567e:	2005      	movs	r0, #5
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8005680:	1e81      	subs	r1, r0, #2
 8005682:	f001 0103 	and.w	r1, r1, #3
 8005686:	2003      	movs	r0, #3
 8005688:	f7ff fea4 	bl	80053d4 <nRF24_WriteRegister>
}
 800568c:	bd08      	pop	{r3, pc}

0800568e <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 800568e:	b510      	push	{r4, lr}
 8005690:	b082      	sub	sp, #8
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8005692:	2801      	cmp	r0, #1
 8005694:	d815      	bhi.n	80056c2 <nRF24_SetRXAddress+0x34>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8005696:	2300      	movs	r3, #0
 8005698:	e009      	b.n	80056ae <nRF24_SetRXAddress+0x20>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800569a:	f1c3 0204 	rsb	r2, r3, #4
 800569e:	5ccc      	ldrb	r4, [r1, r3]
 80056a0:	f10d 0c08 	add.w	ip, sp, #8
 80056a4:	4462      	add	r2, ip
 80056a6:	f802 4c08 	strb.w	r4, [r2, #-8]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80056aa:	3301      	adds	r3, #1
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d9f3      	bls.n	800569a <nRF24_SetRXAddress+0xc>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80056b2:	300a      	adds	r0, #10
 80056b4:	2205      	movs	r2, #5
 80056b6:	4669      	mov	r1, sp
 80056b8:	b2c0      	uxtb	r0, r0
 80056ba:	f7ff fe9e 	bl	80053fa <nRF24_WriteRegisters>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
}
 80056be:	b002      	add	sp, #8
 80056c0:	bd10      	pop	{r4, pc}
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 80056c2:	300a      	adds	r0, #10
 80056c4:	7909      	ldrb	r1, [r1, #4]
 80056c6:	b2c0      	uxtb	r0, r0
 80056c8:	f7ff fe84 	bl	80053d4 <nRF24_WriteRegister>
}
 80056cc:	e7f7      	b.n	80056be <nRF24_SetRXAddress+0x30>
	...

080056d0 <nRF24_RX_Mode>:
{
 80056d0:	b510      	push	{r4, lr}
	uint8_t config = nRF24_ReadConfig();
 80056d2:	f7ff fee0 	bl	8005496 <nRF24_ReadConfig>
 80056d6:	4604      	mov	r4, r0
	nRF24_SetRXAddress(0, addr_p0_backup);
 80056d8:	490c      	ldr	r1, [pc, #48]	; (800570c <nRF24_RX_Mode+0x3c>)
 80056da:	2000      	movs	r0, #0
 80056dc:	f7ff ffd7 	bl	800568e <nRF24_SetRXAddress>
	config |= (1<<NRF24_PRIM_RX);
 80056e0:	f044 0003 	orr.w	r0, r4, #3
	nRF24_WriteConfig(config);
 80056e4:	b2c0      	uxtb	r0, r0
 80056e6:	f7ff fedb 	bl	80054a0 <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80056ea:	2070      	movs	r0, #112	; 0x70
 80056ec:	f7ff ff07 	bl	80054fe <nRF24_WriteStatus>
	nRF24_FlushRX();
 80056f0:	f7ff ff21 	bl	8005536 <nRF24_FlushRX>
	nRF24_FlushTX();
 80056f4:	f7ff ff2f 	bl	8005556 <nRF24_FlushTX>
	NRF24_CE_HIGH;
 80056f8:	2201      	movs	r2, #1
 80056fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056fe:	4804      	ldr	r0, [pc, #16]	; (8005710 <nRF24_RX_Mode+0x40>)
 8005700:	f000 ff93 	bl	800662a <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8005704:	2001      	movs	r0, #1
 8005706:	f7ff fe55 	bl	80053b4 <nRF24_Delay_ms>
}
 800570a:	bd10      	pop	{r4, pc}
 800570c:	20000904 	.word	0x20000904
 8005710:	40020400 	.word	0x40020400

08005714 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8005714:	b510      	push	{r4, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	4604      	mov	r4, r0
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800571a:	2205      	movs	r2, #5
 800571c:	4669      	mov	r1, sp
 800571e:	200a      	movs	r0, #10
 8005720:	f7ff fea4 	bl	800546c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8005724:	2300      	movs	r3, #0
 8005726:	e009      	b.n	800573c <nRF24_SetTXAddress+0x28>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8005728:	f1c3 0204 	rsb	r2, r3, #4
 800572c:	a902      	add	r1, sp, #8
 800572e:	4419      	add	r1, r3
 8005730:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8005734:	490f      	ldr	r1, [pc, #60]	; (8005774 <nRF24_SetTXAddress+0x60>)
 8005736:	5488      	strb	r0, [r1, r2]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8005738:	3301      	adds	r3, #1
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b04      	cmp	r3, #4
 800573e:	d9f3      	bls.n	8005728 <nRF24_SetTXAddress+0x14>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8005740:	2300      	movs	r3, #0
 8005742:	e008      	b.n	8005756 <nRF24_SetTXAddress+0x42>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8005744:	f1c3 0204 	rsb	r2, r3, #4
 8005748:	5ce1      	ldrb	r1, [r4, r3]
 800574a:	a802      	add	r0, sp, #8
 800574c:	4402      	add	r2, r0
 800574e:	f802 1c08 	strb.w	r1, [r2, #-8]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8005752:	3301      	adds	r3, #1
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b04      	cmp	r3, #4
 8005758:	d9f4      	bls.n	8005744 <nRF24_SetTXAddress+0x30>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 800575a:	2205      	movs	r2, #5
 800575c:	4669      	mov	r1, sp
 800575e:	200a      	movs	r0, #10
 8005760:	f7ff fe4b 	bl	80053fa <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8005764:	2205      	movs	r2, #5
 8005766:	4669      	mov	r1, sp
 8005768:	2010      	movs	r0, #16
 800576a:	f7ff fe46 	bl	80053fa <nRF24_WriteRegisters>
}
 800576e:	b002      	add	sp, #8
 8005770:	bd10      	pop	{r4, pc}
 8005772:	bf00      	nop
 8005774:	20000904 	.word	0x20000904

08005778 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8005778:	b508      	push	{r3, lr}
	uint8_t status = nRF24_ReadStatus();
 800577a:	f7ff febb 	bl	80054f4 <nRF24_ReadStatus>
	status |= (7<<4); // Clear bits 4, 5, 6.
 800577e:	f040 0070 	orr.w	r0, r0, #112	; 0x70
	nRF24_WriteStatus(status);
 8005782:	b2c0      	uxtb	r0, r0
 8005784:	f7ff febb 	bl	80054fe <nRF24_WriteStatus>
}
 8005788:	bd08      	pop	{r3, pc}

0800578a <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 800578a:	b508      	push	{r3, lr}
    uint8_t result = 0;

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 800578c:	2060      	movs	r0, #96	; 0x60
 800578e:	f7ff fe57 	bl	8005440 <nRF24_ReadRegister>

    if (result > 32) // Something went wrong :)
 8005792:	2820      	cmp	r0, #32
 8005794:	d800      	bhi.n	8005798 <nRF24_GetDynamicPayloadSize+0xe>
        nRF24_FlushRX();
        nRF24_Delay_ms(2);
        return 0;
    }
    return result;
}
 8005796:	bd08      	pop	{r3, pc}
        nRF24_FlushRX();
 8005798:	f7ff fecd 	bl	8005536 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 800579c:	2002      	movs	r0, #2
 800579e:	f7ff fe09 	bl	80053b4 <nRF24_Delay_ms>
        return 0;
 80057a2:	2000      	movs	r0, #0
 80057a4:	e7f7      	b.n	8005796 <nRF24_GetDynamicPayloadSize+0xc>

080057a6 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 80057a6:	b510      	push	{r4, lr}
 80057a8:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 80057aa:	f7ff fe74 	bl	8005496 <nRF24_ReadConfig>

	if(!onoff)
 80057ae:	b124      	cbz	r4, 80057ba <nRF24_EnableRXDataReadyIRQ+0x14>
		config |= (1<<NRF24_RX_DR);
	else
		config &= ~(1<<NRF24_RX_DR);
 80057b0:	f000 00bf 	and.w	r0, r0, #191	; 0xbf

	nRF24_WriteConfig(config);
 80057b4:	f7ff fe74 	bl	80054a0 <nRF24_WriteConfig>
}
 80057b8:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_RX_DR);
 80057ba:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80057be:	b2c0      	uxtb	r0, r0
 80057c0:	e7f8      	b.n	80057b4 <nRF24_EnableRXDataReadyIRQ+0xe>

080057c2 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 80057c2:	b510      	push	{r4, lr}
 80057c4:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 80057c6:	f7ff fe66 	bl	8005496 <nRF24_ReadConfig>

	if(!onoff)
 80057ca:	b124      	cbz	r4, 80057d6 <nRF24_EnableTXDataSentIRQ+0x14>
		config |= (1<<NRF24_TX_DS);
	else
		config &= ~(1<<NRF24_TX_DS);
 80057cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf

	nRF24_WriteConfig(config);
 80057d0:	f7ff fe66 	bl	80054a0 <nRF24_WriteConfig>
}
 80057d4:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_TX_DS);
 80057d6:	f040 0020 	orr.w	r0, r0, #32
 80057da:	b2c0      	uxtb	r0, r0
 80057dc:	e7f8      	b.n	80057d0 <nRF24_EnableTXDataSentIRQ+0xe>

080057de <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 80057de:	b510      	push	{r4, lr}
 80057e0:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 80057e2:	f7ff fe58 	bl	8005496 <nRF24_ReadConfig>

	if(!onoff)
 80057e6:	b124      	cbz	r4, 80057f2 <nRF24_EnableMaxRetransmitIRQ+0x14>
		config |= (1<<NRF24_MAX_RT);
	else
		config &= ~(1<<NRF24_MAX_RT);
 80057e8:	f000 00ef 	and.w	r0, r0, #239	; 0xef

	nRF24_WriteConfig(config);
 80057ec:	f7ff fe58 	bl	80054a0 <nRF24_WriteConfig>
}
 80057f0:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_MAX_RT);
 80057f2:	f040 0010 	orr.w	r0, r0, #16
 80057f6:	b2c0      	uxtb	r0, r0
 80057f8:	e7f8      	b.n	80057ec <nRF24_EnableMaxRetransmitIRQ+0xe>

080057fa <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 80057fa:	b508      	push	{r3, lr}
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 80057fc:	460a      	mov	r2, r1
 80057fe:	4601      	mov	r1, r0
 8005800:	20a0      	movs	r0, #160	; 0xa0
 8005802:	f7ff fdfa 	bl	80053fa <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 8005806:	bd08      	pop	{r3, pc}

08005808 <nRF24_ReadRXPaylaod>:
		status = nRF24_ReadStatus();
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	4604      	mov	r4, r0
 800580c:	460d      	mov	r5, r1
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 800580e:	f7ff ffbc 	bl	800578a <nRF24_GetDynamicPayloadSize>
 8005812:	4602      	mov	r2, r0
 8005814:	7028      	strb	r0, [r5, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8005816:	4621      	mov	r1, r4
 8005818:	2061      	movs	r0, #97	; 0x61
 800581a:	f7ff fe27 	bl	800546c <nRF24_ReadRegisters>
#else
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 800581e:	2101      	movs	r1, #1
 8005820:	2007      	movs	r0, #7
 8005822:	f7ff fdd7 	bl	80053d4 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 8005826:	f7ff fe65 	bl	80054f4 <nRF24_ReadStatus>
 800582a:	f010 0f20 	tst.w	r0, #32
 800582e:	d100      	bne.n	8005832 <nRF24_ReadRXPaylaod+0x2a>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8005830:	bd38      	pop	{r3, r4, r5, pc}
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8005832:	2120      	movs	r1, #32
 8005834:	2007      	movs	r0, #7
 8005836:	f7ff fdcd 	bl	80053d4 <nRF24_WriteRegister>
}
 800583a:	e7f9      	b.n	8005830 <nRF24_ReadRXPaylaod+0x28>

0800583c <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
	if(Size > 32)
 800583c:	2920      	cmp	r1, #32
 800583e:	d901      	bls.n	8005844 <nRF24_SendPacket+0x8>
		return NRF24_NO_TRANSMITTED_PACKET;
 8005840:	2001      	movs	r0, #1
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_WaitTX();
#endif

	return NRF24_TRANSMITTED_PACKET;
}
 8005842:	4770      	bx	lr
{
 8005844:	b508      	push	{r3, lr}
	nRF24_WriteTXPayload(Data, Size);
 8005846:	f7ff ffd8 	bl	80057fa <nRF24_WriteTXPayload>
	return NRF24_TRANSMITTED_PACKET;
 800584a:	2000      	movs	r0, #0
}
 800584c:	bd08      	pop	{r3, pc}
	...

08005850 <nRF24_IsSomtehingToSend>:
{
	return RB_ElementsAvailable(&RXBuffer)?1:0;
}

uint8_t nRF24_IsSomtehingToSend(void)
{
 8005850:	b508      	push	{r3, lr}
	return RB_ElementsAvailable(&TXBuffer)?1:0;
 8005852:	4803      	ldr	r0, [pc, #12]	; (8005860 <nRF24_IsSomtehingToSend+0x10>)
 8005854:	f7fd fb81 	bl	8002f5a <RB_ElementsAvailable>
}
 8005858:	3000      	adds	r0, #0
 800585a:	bf18      	it	ne
 800585c:	2001      	movne	r0, #1
 800585e:	bd08      	pop	{r3, pc}
 8005860:	2000341c 	.word	0x2000341c

08005864 <nRF24_ReceivePacket>:
	return nRF24_IsSomtehingToRead();
#endif
}

nRF24_RX_Status nRF24_ReceivePacket(uint8_t* Data, uint8_t *Size)
{
 8005864:	b508      	push	{r3, lr}
#if (NRF24_USE_INTERRUPT == 0)
	if(nRF24_RXAvailable())
	{
#endif
		nRF24_ReadRXPaylaod(Data, Size);
 8005866:	f7ff ffcf 	bl	8005808 <nRF24_ReadRXPaylaod>
#if (NRF24_USE_INTERRUPT == 0)
	}
	return NRF24_NO_RECEIVED_PACKET;
#endif

}
 800586a:	2000      	movs	r0, #0
 800586c:	bd08      	pop	{r3, pc}
	...

08005870 <nRF24_CheckTXAndSend>:
	return NRF24_TRANSMITTED_PACKET;
#endif
}
#if (NRF24_USE_RINGBUFFER == 1)
void nRF24_CheckTXAndSend(void)
{
 8005870:	b530      	push	{r4, r5, lr}
 8005872:	b089      	sub	sp, #36	; 0x24
	uint8_t i, DataCounter;
	uint8_t TXPacket[32];

	if(nRF24_IsSomtehingToSend() && Nrf24TXFreeFlag)
 8005874:	f7ff ffec 	bl	8005850 <nRF24_IsSomtehingToSend>
 8005878:	b110      	cbz	r0, 8005880 <nRF24_CheckTXAndSend+0x10>
 800587a:	4b19      	ldr	r3, [pc, #100]	; (80058e0 <nRF24_CheckTXAndSend+0x70>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	b91b      	cbnz	r3, 8005888 <nRF24_CheckTXAndSend+0x18>
		nRF24_SendPacket(TXPacket, DataCounter);
		NRF24_CE_HIGH;
		nRF24_Delay_ms(1);
		NRF24_CE_LOW;
	}else{
		nRF24_RX_Mode();
 8005880:	f7ff ff26 	bl	80056d0 <nRF24_RX_Mode>
	}
}
 8005884:	b009      	add	sp, #36	; 0x24
 8005886:	bd30      	pop	{r4, r5, pc}
		nRF24_TX_Mode();
 8005888:	f7ff fe76 	bl	8005578 <nRF24_TX_Mode>
		Nrf24TXFreeFlag = 0;
 800588c:	4b14      	ldr	r3, [pc, #80]	; (80058e0 <nRF24_CheckTXAndSend+0x70>)
 800588e:	2200      	movs	r2, #0
 8005890:	701a      	strb	r2, [r3, #0]
		DataCounter = RB_ElementsAvailable(&TXBuffer);
 8005892:	4814      	ldr	r0, [pc, #80]	; (80058e4 <nRF24_CheckTXAndSend+0x74>)
 8005894:	f7fd fb61 	bl	8002f5a <RB_ElementsAvailable>
 8005898:	4605      	mov	r5, r0
		if(DataCounter > 32)
 800589a:	2820      	cmp	r0, #32
 800589c:	d900      	bls.n	80058a0 <nRF24_CheckTXAndSend+0x30>
			DataCounter = 32; // Max Payload
 800589e:	2520      	movs	r5, #32
		for(i = 0; i < DataCounter; i++)
 80058a0:	2400      	movs	r4, #0
 80058a2:	e006      	b.n	80058b2 <nRF24_CheckTXAndSend+0x42>
			RB_ReadFromBuffer(&TXBuffer, &TXPacket[i]);
 80058a4:	eb0d 0104 	add.w	r1, sp, r4
 80058a8:	480e      	ldr	r0, [pc, #56]	; (80058e4 <nRF24_CheckTXAndSend+0x74>)
 80058aa:	f7fd fb3f 	bl	8002f2c <RB_ReadFromBuffer>
		for(i = 0; i < DataCounter; i++)
 80058ae:	3401      	adds	r4, #1
 80058b0:	b2e4      	uxtb	r4, r4
 80058b2:	42ac      	cmp	r4, r5
 80058b4:	d3f6      	bcc.n	80058a4 <nRF24_CheckTXAndSend+0x34>
		nRF24_SendPacket(TXPacket, DataCounter);
 80058b6:	4629      	mov	r1, r5
 80058b8:	4668      	mov	r0, sp
 80058ba:	f7ff ffbf 	bl	800583c <nRF24_SendPacket>
		NRF24_CE_HIGH;
 80058be:	4c0a      	ldr	r4, [pc, #40]	; (80058e8 <nRF24_CheckTXAndSend+0x78>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058c6:	4620      	mov	r0, r4
 80058c8:	f000 feaf 	bl	800662a <HAL_GPIO_WritePin>
		nRF24_Delay_ms(1);
 80058cc:	2001      	movs	r0, #1
 80058ce:	f7ff fd71 	bl	80053b4 <nRF24_Delay_ms>
		NRF24_CE_LOW;
 80058d2:	2200      	movs	r2, #0
 80058d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058d8:	4620      	mov	r0, r4
 80058da:	f000 fea6 	bl	800662a <HAL_GPIO_WritePin>
 80058de:	e7d1      	b.n	8005884 <nRF24_CheckTXAndSend+0x14>
 80058e0:	20000901 	.word	0x20000901
 80058e4:	2000341c 	.word	0x2000341c
 80058e8:	40020400 	.word	0x40020400

080058ec <nRF24_ReceiveData>:
#endif
#if (NRF24_USE_INTERRUPT == 1)
void nRF24_ReceiveData(void)
{
 80058ec:	b510      	push	{r4, lr}
 80058ee:	b08a      	sub	sp, #40	; 0x28
 80058f0:	e00f      	b.n	8005912 <nRF24_ReceiveData+0x26>
	{
		nRF24_ReceivePacket(RXPacket, &DataCounter);

		for(i = 0; i < DataCounter; i++)
		{
			RB_WriteToBuffer(&RXBuffer, RXPacket[i]);
 80058f2:	ab0a      	add	r3, sp, #40	; 0x28
 80058f4:	4423      	add	r3, r4
 80058f6:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 80058fa:	480a      	ldr	r0, [pc, #40]	; (8005924 <nRF24_ReceiveData+0x38>)
 80058fc:	f7fd faf9 	bl	8002ef2 <RB_WriteToBuffer>
		for(i = 0; i < DataCounter; i++)
 8005900:	3401      	adds	r4, #1
 8005902:	b2e4      	uxtb	r4, r4
 8005904:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8005908:	42a3      	cmp	r3, r4
 800590a:	d8f2      	bhi.n	80058f2 <nRF24_ReceiveData+0x6>
		}

	}while(!nRF24_IsRxEmpty());
 800590c:	f7ff fe0e 	bl	800552c <nRF24_IsRxEmpty>
 8005910:	b930      	cbnz	r0, 8005920 <nRF24_ReceiveData+0x34>
		nRF24_ReceivePacket(RXPacket, &DataCounter);
 8005912:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8005916:	a801      	add	r0, sp, #4
 8005918:	f7ff ffa4 	bl	8005864 <nRF24_ReceivePacket>
		for(i = 0; i < DataCounter; i++)
 800591c:	2400      	movs	r4, #0
 800591e:	e7f1      	b.n	8005904 <nRF24_ReceiveData+0x18>
#endif
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_ReceivePacket(RXBuffer, &RXDataCounter);
#endif
}
 8005920:	b00a      	add	sp, #40	; 0x28
 8005922:	bd10      	pop	{r4, pc}
 8005924:	20003440 	.word	0x20003440

08005928 <nRF24_IRQ_Read>:
{
	Nrf24InterruptFlag = 1;
}

void nRF24_IRQ_Read(void)
{
 8005928:	b508      	push	{r3, lr}
	if(Nrf24InterruptFlag == 1)
 800592a:	4b14      	ldr	r3, [pc, #80]	; (800597c <nRF24_IRQ_Read+0x54>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d000      	beq.n	8005936 <nRF24_IRQ_Read+0xe>
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
		}

		nRF24_WriteStatus(ClearIrq);
	}
}
 8005934:	bd08      	pop	{r3, pc}
		Nrf24InterruptFlag = 0;
 8005936:	4b11      	ldr	r3, [pc, #68]	; (800597c <nRF24_IRQ_Read+0x54>)
 8005938:	2200      	movs	r2, #0
 800593a:	701a      	strb	r2, [r3, #0]
		uint8_t status = nRF24_ReadStatus();
 800593c:	f7ff fdda 	bl	80054f4 <nRF24_ReadStatus>
 8005940:	4603      	mov	r3, r0
		if ((status & (1 << NRF24_RX_DR)))
 8005942:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005946:	d016      	beq.n	8005976 <nRF24_IRQ_Read+0x4e>
			nrf24_rx_flag = 1;
 8005948:	4a0d      	ldr	r2, [pc, #52]	; (8005980 <nRF24_IRQ_Read+0x58>)
 800594a:	2101      	movs	r1, #1
 800594c:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 800594e:	2040      	movs	r0, #64	; 0x40
		if ((status & (1 << NRF24_TX_DS)))
 8005950:	f013 0f20 	tst.w	r3, #32
 8005954:	d004      	beq.n	8005960 <nRF24_IRQ_Read+0x38>
			nrf24_tx_flag = 1;
 8005956:	4a0b      	ldr	r2, [pc, #44]	; (8005984 <nRF24_IRQ_Read+0x5c>)
 8005958:	2101      	movs	r1, #1
 800595a:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 800595c:	f040 0020 	orr.w	r0, r0, #32
		if ((status & (1 << NRF24_MAX_RT)))
 8005960:	f013 0f10 	tst.w	r3, #16
 8005964:	d004      	beq.n	8005970 <nRF24_IRQ_Read+0x48>
			nrf24_mr_flag = 1;
 8005966:	4b08      	ldr	r3, [pc, #32]	; (8005988 <nRF24_IRQ_Read+0x60>)
 8005968:	2201      	movs	r2, #1
 800596a:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 800596c:	f040 0010 	orr.w	r0, r0, #16
		nRF24_WriteStatus(ClearIrq);
 8005970:	f7ff fdc5 	bl	80054fe <nRF24_WriteStatus>
}
 8005974:	e7de      	b.n	8005934 <nRF24_IRQ_Read+0xc>
		uint8_t ClearIrq = 0;
 8005976:	2000      	movs	r0, #0
 8005978:	e7ea      	b.n	8005950 <nRF24_IRQ_Read+0x28>
 800597a:	bf00      	nop
 800597c:	20000900 	.word	0x20000900
 8005980:	20000911 	.word	0x20000911
 8005984:	20000912 	.word	0x20000912
 8005988:	20000910 	.word	0x20000910

0800598c <nRF24_EventRxCallback>:
//

__weak void nRF24_EventRxCallback(void)
{

}
 800598c:	4770      	bx	lr

0800598e <nRF24_EventTxCallback>:

__weak void nRF24_EventTxCallback(void)
{

}
 800598e:	4770      	bx	lr

08005990 <nRF24_EventMrCallback>:

__weak void nRF24_EventMrCallback(void)
{

}
 8005990:	4770      	bx	lr
	...

08005994 <nRF24_Event>:

void nRF24_Event(void)
{
 8005994:	b508      	push	{r3, lr}
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8005996:	f7ff ffc7 	bl	8005928 <nRF24_IRQ_Read>

#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_CheckTXAndSend();
 800599a:	f7ff ff69 	bl	8005870 <nRF24_CheckTXAndSend>
#endif

	if(nrf24_rx_flag)
 800599e:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <nRF24_Event+0x4c>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	b933      	cbnz	r3, 80059b2 <nRF24_Event+0x1e>
#endif
		nRF24_EventRxCallback();
		nrf24_rx_flag = 0;
	}

	if(nrf24_tx_flag)
 80059a4:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <nRF24_Event+0x50>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	b95b      	cbnz	r3, 80059c2 <nRF24_Event+0x2e>
#endif
		nRF24_EventTxCallback();
		nrf24_tx_flag = 0;
	}

	if(nrf24_mr_flag)
 80059aa:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <nRF24_Event+0x54>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	b98b      	cbnz	r3, 80059d4 <nRF24_Event+0x40>
	{
		nRF24_EventMrCallback();
		nrf24_mr_flag = 0;
	}
}
 80059b0:	bd08      	pop	{r3, pc}
		nRF24_ReceiveData();
 80059b2:	f7ff ff9b 	bl	80058ec <nRF24_ReceiveData>
		nRF24_EventRxCallback();
 80059b6:	f7ff ffe9 	bl	800598c <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 80059ba:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <nRF24_Event+0x4c>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e7f0      	b.n	80059a4 <nRF24_Event+0x10>
		Nrf24TXFreeFlag = 1;
 80059c2:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <nRF24_Event+0x58>)
 80059c4:	2201      	movs	r2, #1
 80059c6:	701a      	strb	r2, [r3, #0]
		nRF24_EventTxCallback();
 80059c8:	f7ff ffe1 	bl	800598e <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 80059cc:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <nRF24_Event+0x50>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	701a      	strb	r2, [r3, #0]
 80059d2:	e7ea      	b.n	80059aa <nRF24_Event+0x16>
		nRF24_EventMrCallback();
 80059d4:	f7ff ffdc 	bl	8005990 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 80059d8:	4b03      	ldr	r3, [pc, #12]	; (80059e8 <nRF24_Event+0x54>)
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
}
 80059de:	e7e7      	b.n	80059b0 <nRF24_Event+0x1c>
 80059e0:	20000911 	.word	0x20000911
 80059e4:	20000912 	.word	0x20000912
 80059e8:	20000910 	.word	0x20000910
 80059ec:	20000901 	.word	0x20000901

080059f0 <nRF24_Init>:
#endif

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80059f0:	b508      	push	{r3, lr}
	hspi_nrf = hspi;
 80059f2:	4b31      	ldr	r3, [pc, #196]	; (8005ab8 <nRF24_Init+0xc8>)
 80059f4:	6018      	str	r0, [r3, #0]

	NRF24_CE_LOW;
 80059f6:	2200      	movs	r2, #0
 80059f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059fc:	482f      	ldr	r0, [pc, #188]	; (8005abc <nRF24_Init+0xcc>)
 80059fe:	f000 fe14 	bl	800662a <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8005a02:	f7fe f8a5 	bl	8003b50 <NRF_ChipDeselect>

	nRF24_Delay_ms(5); // Wait for radio power up
 8005a06:	2005      	movs	r0, #5
 8005a08:	f7ff fcd4 	bl	80053b4 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8005a0c:	2003      	movs	r0, #3
 8005a0e:	f7ff fd4d 	bl	80054ac <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8005a12:	2002      	movs	r0, #2
 8005a14:	f7ff fd59 	bl	80054ca <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8005a18:	2001      	movs	r0, #1
 8005a1a:	f7ff fdc9 	bl	80055b0 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_2B); // CRC Length 1 byte
 8005a1e:	2001      	movs	r0, #1
 8005a20:	f7ff fdd4 	bl	80055cc <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8005a24:	2107      	movs	r1, #7
 8005a26:	2004      	movs	r0, #4
 8005a28:	f7ff fddf 	bl	80055ea <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8005a2c:	201d      	movs	r0, #29
 8005a2e:	f7ff fd07 	bl	8005440 <nRF24_ReadRegister>
 8005a32:	f040 0104 	orr.w	r1, r0, #4
 8005a36:	b2c9      	uxtb	r1, r1
 8005a38:	201d      	movs	r0, #29
 8005a3a:	f7ff fccb 	bl	80053d4 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8005a3e:	213f      	movs	r1, #63	; 0x3f
 8005a40:	201c      	movs	r0, #28
 8005a42:	f7ff fcc7 	bl	80053d4 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(110); // Set RF channel for transmission
 8005a46:	206e      	movs	r0, #110	; 0x6e
 8005a48:	f7ff fdd9 	bl	80055fe <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	2000      	movs	r0, #0
 8005a50:	f7ff fddc 	bl	800560c <nRF24_EnablePipe>
	nRF24_EnablePipe(1, 1); // Enable pipe 1
 8005a54:	2101      	movs	r1, #1
 8005a56:	4608      	mov	r0, r1
 8005a58:	f7ff fdd8 	bl	800560c <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	2000      	movs	r0, #0
 8005a60:	f7ff fded 	bl	800563e <nRF24_AutoACK>
	nRF24_AutoACK(1, 1); // Enable auto ACK for pipe 1
 8005a64:	2101      	movs	r1, #1
 8005a66:	4608      	mov	r0, r1
 8005a68:	f7ff fde9 	bl	800563e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8005a6c:	2005      	movs	r0, #5
 8005a6e:	f7ff fdff 	bl	8005670 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 8005a72:	2001      	movs	r0, #1
 8005a74:	f7ff fc9e 	bl	80053b4 <nRF24_Delay_ms>

#if (NRF24_USE_INTERRUPT == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8005a78:	2001      	movs	r0, #1
 8005a7a:	f7ff fe94 	bl	80057a6 <nRF24_EnableRXDataReadyIRQ>
#endif
#if (NRF24_USE_INTERRUPT == 0)
	nRF24_EnableRXDataReadyIRQ(0);
#endif
	nRF24_EnableTXDataSentIRQ(0);
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f7ff fe9f 	bl	80057c2 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8005a84:	2000      	movs	r0, #0
 8005a86:	f7ff feaa 	bl	80057de <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	f7ff fc92 	bl	80053b4 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8005a90:	f7ff fe72 	bl	8005778 <nRF24_ClearInterrupts>
#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8005a94:	2001      	movs	r0, #1
 8005a96:	f7ff fe86 	bl	80057a6 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	f7ff fe91 	bl	80057c2 <nRF24_EnableTXDataSentIRQ>
	Nrf24TXFreeFlag = 1;
 8005aa0:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <nRF24_Init+0xd0>)
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	701a      	strb	r2, [r3, #0]
	RB_CreateBuffer(&TXBuffer, NRF24_TX_BUFFER_SIZE);
 8005aa6:	2120      	movs	r1, #32
 8005aa8:	4806      	ldr	r0, [pc, #24]	; (8005ac4 <nRF24_Init+0xd4>)
 8005aaa:	f7fd fa17 	bl	8002edc <RB_CreateBuffer>
	RB_CreateBuffer(&RXBuffer, NRF24_RX_BUFFER_SIZE);
 8005aae:	2120      	movs	r1, #32
 8005ab0:	4805      	ldr	r0, [pc, #20]	; (8005ac8 <nRF24_Init+0xd8>)
 8005ab2:	f7fd fa13 	bl	8002edc <RB_CreateBuffer>
#endif
}
 8005ab6:	bd08      	pop	{r3, pc}
 8005ab8:	2000090c 	.word	0x2000090c
 8005abc:	40020400 	.word	0x40020400
 8005ac0:	20000901 	.word	0x20000901
 8005ac4:	2000341c 	.word	0x2000341c
 8005ac8:	20003440 	.word	0x20003440

08005acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005ad0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005ad2:	e003      	b.n	8005adc <LoopCopyDataInit>

08005ad4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005ad4:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005ad6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005ad8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005ada:	3104      	adds	r1, #4

08005adc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005adc:	480b      	ldr	r0, [pc, #44]	; (8005b0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005ade:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005ae0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005ae2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005ae4:	d3f6      	bcc.n	8005ad4 <CopyDataInit>
  ldr  r2, =_sbss
 8005ae6:	4a0b      	ldr	r2, [pc, #44]	; (8005b14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005ae8:	e002      	b.n	8005af0 <LoopFillZerobss>

08005aea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005aea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005aec:	f842 3b04 	str.w	r3, [r2], #4

08005af0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005af0:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005af2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005af4:	d3f9      	bcc.n	8005aea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005af6:	f7ff fc4f 	bl	8005398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005afa:	f006 fdb7 	bl	800c66c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005afe:	f7ff f817 	bl	8004b30 <main>
  bx  lr    
 8005b02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b04:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8005b08:	0800e13c 	.word	0x0800e13c
  ldr  r0, =_sdata
 8005b0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005b10:	200000d0 	.word	0x200000d0
  ldr  r2, =_sbss
 8005b14:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 8005b18:	200034ac 	.word	0x200034ac

08005b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b1c:	e7fe      	b.n	8005b1c <ADC_IRQHandler>
	...

08005b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b20:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b22:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <HAL_Init+0x30>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b2a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b32:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b3c:	2003      	movs	r0, #3
 8005b3e:	f000 f9a9 	bl	8005e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b42:	2000      	movs	r0, #0
 8005b44:	f7ff fb6e 	bl	8005224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b48:	f7ff f8b8 	bl	8004cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	bd08      	pop	{r3, pc}
 8005b50:	40023c00 	.word	0x40023c00

08005b54 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005b54:	4a03      	ldr	r2, [pc, #12]	; (8005b64 <HAL_IncTick+0x10>)
 8005b56:	6811      	ldr	r1, [r2, #0]
 8005b58:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <HAL_IncTick+0x14>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	440b      	add	r3, r1
 8005b5e:	6013      	str	r3, [r2, #0]
}
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20003464 	.word	0x20003464
 8005b68:	20000054 	.word	0x20000054

08005b6c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005b6c:	4b01      	ldr	r3, [pc, #4]	; (8005b74 <HAL_GetTick+0x8>)
 8005b6e:	6818      	ldr	r0, [r3, #0]
}
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20003464 	.word	0x20003464

08005b78 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005b78:	4b4a      	ldr	r3, [pc, #296]	; (8005ca4 <ADC_Init+0x12c>)
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005b80:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	6841      	ldr	r1, [r0, #4]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b8a:	6802      	ldr	r2, [r0, #0]
 8005b8c:	6853      	ldr	r3, [r2, #4]
 8005b8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b92:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b94:	6802      	ldr	r2, [r0, #0]
 8005b96:	6853      	ldr	r3, [r2, #4]
 8005b98:	6901      	ldr	r1, [r0, #16]
 8005b9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b9e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005ba0:	6802      	ldr	r2, [r0, #0]
 8005ba2:	6853      	ldr	r3, [r2, #4]
 8005ba4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005ba8:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005baa:	6802      	ldr	r2, [r0, #0]
 8005bac:	6853      	ldr	r3, [r2, #4]
 8005bae:	6881      	ldr	r1, [r0, #8]
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005bb4:	6802      	ldr	r2, [r0, #0]
 8005bb6:	6893      	ldr	r3, [r2, #8]
 8005bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bbc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005bbe:	6802      	ldr	r2, [r0, #0]
 8005bc0:	6893      	ldr	r3, [r2, #8]
 8005bc2:	68c1      	ldr	r1, [r0, #12]
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005bc8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005bca:	4b37      	ldr	r3, [pc, #220]	; (8005ca8 <ADC_Init+0x130>)
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d04b      	beq.n	8005c68 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bd0:	6802      	ldr	r2, [r0, #0]
 8005bd2:	6893      	ldr	r3, [r2, #8]
 8005bd4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005bd8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005bda:	6802      	ldr	r2, [r0, #0]
 8005bdc:	6893      	ldr	r3, [r2, #8]
 8005bde:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005be0:	430b      	orrs	r3, r1
 8005be2:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005be4:	6802      	ldr	r2, [r0, #0]
 8005be6:	6893      	ldr	r3, [r2, #8]
 8005be8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005bec:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005bee:	6802      	ldr	r2, [r0, #0]
 8005bf0:	6893      	ldr	r3, [r2, #8]
 8005bf2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005bf8:	6802      	ldr	r2, [r0, #0]
 8005bfa:	6893      	ldr	r3, [r2, #8]
 8005bfc:	f023 0302 	bic.w	r3, r3, #2
 8005c00:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005c02:	6802      	ldr	r2, [r0, #0]
 8005c04:	6893      	ldr	r3, [r2, #8]
 8005c06:	7e01      	ldrb	r1, [r0, #24]
 8005c08:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8005c0c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c0e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d133      	bne.n	8005c7e <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c16:	6802      	ldr	r2, [r0, #0]
 8005c18:	6853      	ldr	r3, [r2, #4]
 8005c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c1e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005c20:	6802      	ldr	r2, [r0, #0]
 8005c22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005c24:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c28:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005c2a:	6801      	ldr	r1, [r0, #0]
 8005c2c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005c2e:	69c2      	ldr	r2, [r0, #28]
 8005c30:	3a01      	subs	r2, #1
 8005c32:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005c36:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005c38:	6802      	ldr	r2, [r0, #0]
 8005c3a:	6893      	ldr	r3, [r2, #8]
 8005c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c40:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005c42:	6802      	ldr	r2, [r0, #0]
 8005c44:	6893      	ldr	r3, [r2, #8]
 8005c46:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8005c4a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8005c4e:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005c50:	6802      	ldr	r2, [r0, #0]
 8005c52:	6893      	ldr	r3, [r2, #8]
 8005c54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c58:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005c5a:	6802      	ldr	r2, [r0, #0]
 8005c5c:	6893      	ldr	r3, [r2, #8]
 8005c5e:	6941      	ldr	r1, [r0, #20]
 8005c60:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8005c64:	6093      	str	r3, [r2, #8]
}
 8005c66:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c68:	6802      	ldr	r2, [r0, #0]
 8005c6a:	6893      	ldr	r3, [r2, #8]
 8005c6c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005c70:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c72:	6802      	ldr	r2, [r0, #0]
 8005c74:	6893      	ldr	r3, [r2, #8]
 8005c76:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005c7a:	6093      	str	r3, [r2, #8]
 8005c7c:	e7bc      	b.n	8005bf8 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c7e:	6802      	ldr	r2, [r0, #0]
 8005c80:	6853      	ldr	r3, [r2, #4]
 8005c82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c86:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c88:	6802      	ldr	r2, [r0, #0]
 8005c8a:	6853      	ldr	r3, [r2, #4]
 8005c8c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005c90:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c92:	6801      	ldr	r1, [r0, #0]
 8005c94:	684b      	ldr	r3, [r1, #4]
 8005c96:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005c98:	3a01      	subs	r2, #1
 8005c9a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8005c9e:	604b      	str	r3, [r1, #4]
 8005ca0:	e7be      	b.n	8005c20 <ADC_Init+0xa8>
 8005ca2:	bf00      	nop
 8005ca4:	40012300 	.word	0x40012300
 8005ca8:	0f000001 	.word	0x0f000001

08005cac <HAL_ADC_Init>:
  if(hadc == NULL)
 8005cac:	b338      	cbz	r0, 8005cfe <HAL_ADC_Init+0x52>
{
 8005cae:	b510      	push	{r4, lr}
 8005cb0:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005cb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005cb4:	b143      	cbz	r3, 8005cc8 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cb8:	f013 0f10 	tst.w	r3, #16
 8005cbc:	d00b      	beq.n	8005cd6 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8005cbe:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005cc6:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8005cc8:	f7ff f81a 	bl	8004d00 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005ccc:	2300      	movs	r3, #0
 8005cce:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8005cd0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8005cd4:	e7ef      	b.n	8005cb6 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8005cd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005cdc:	f023 0302 	bic.w	r3, r3, #2
 8005ce0:	f043 0302 	orr.w	r3, r3, #2
 8005ce4:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f7ff ff46 	bl	8005b78 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8005cec:	2000      	movs	r0, #0
 8005cee:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005cf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	6423      	str	r3, [r4, #64]	; 0x40
 8005cfc:	e7e0      	b.n	8005cc0 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8005cfe:	2001      	movs	r0, #1
}
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_ADC_ConfigChannel>:
{
 8005d04:	b430      	push	{r4, r5}
 8005d06:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8005d0c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	f000 80b7 	beq.w	8005e84 <HAL_ADC_ConfigChannel+0x180>
 8005d16:	2301      	movs	r3, #1
 8005d18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005d1c:	680b      	ldr	r3, [r1, #0]
 8005d1e:	2b09      	cmp	r3, #9
 8005d20:	d93e      	bls.n	8005da0 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d22:	6805      	ldr	r5, [r0, #0]
 8005d24:	68ea      	ldr	r2, [r5, #12]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005d2c:	3b1e      	subs	r3, #30
 8005d2e:	2407      	movs	r4, #7
 8005d30:	fa04 f303 	lsl.w	r3, r4, r3
 8005d34:	ea22 0303 	bic.w	r3, r2, r3
 8005d38:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d3a:	6805      	ldr	r5, [r0, #0]
 8005d3c:	68ea      	ldr	r2, [r5, #12]
 8005d3e:	688c      	ldr	r4, [r1, #8]
 8005d40:	880b      	ldrh	r3, [r1, #0]
 8005d42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005d46:	3b1e      	subs	r3, #30
 8005d48:	fa04 f303 	lsl.w	r3, r4, r3
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8005d50:	684b      	ldr	r3, [r1, #4]
 8005d52:	2b06      	cmp	r3, #6
 8005d54:	d83a      	bhi.n	8005dcc <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d56:	6805      	ldr	r5, [r0, #0]
 8005d58:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005d5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005d5e:	3b05      	subs	r3, #5
 8005d60:	241f      	movs	r4, #31
 8005d62:	fa04 f303 	lsl.w	r3, r4, r3
 8005d66:	ea22 0303 	bic.w	r3, r2, r3
 8005d6a:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d6c:	6805      	ldr	r5, [r0, #0]
 8005d6e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005d70:	684b      	ldr	r3, [r1, #4]
 8005d72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005d76:	3b05      	subs	r3, #5
 8005d78:	880c      	ldrh	r4, [r1, #0]
 8005d7a:	fa04 f303 	lsl.w	r3, r4, r3
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005d82:	6802      	ldr	r2, [r0, #0]
 8005d84:	4b40      	ldr	r3, [pc, #256]	; (8005e88 <HAL_ADC_ConfigChannel+0x184>)
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d050      	beq.n	8005e2c <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005d8a:	6802      	ldr	r2, [r0, #0]
 8005d8c:	4b3e      	ldr	r3, [pc, #248]	; (8005e88 <HAL_ADC_ConfigChannel+0x184>)
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d055      	beq.n	8005e3e <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 8005d92:	2300      	movs	r3, #0
 8005d94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8005d98:	4618      	mov	r0, r3
}
 8005d9a:	b002      	add	sp, #8
 8005d9c:	bc30      	pop	{r4, r5}
 8005d9e:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005da0:	6805      	ldr	r5, [r0, #0]
 8005da2:	692a      	ldr	r2, [r5, #16]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005daa:	2407      	movs	r4, #7
 8005dac:	fa04 f303 	lsl.w	r3, r4, r3
 8005db0:	ea22 0303 	bic.w	r3, r2, r3
 8005db4:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005db6:	6805      	ldr	r5, [r0, #0]
 8005db8:	692a      	ldr	r2, [r5, #16]
 8005dba:	688c      	ldr	r4, [r1, #8]
 8005dbc:	880b      	ldrh	r3, [r1, #0]
 8005dbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005dc2:	fa04 f303 	lsl.w	r3, r4, r3
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	612b      	str	r3, [r5, #16]
 8005dca:	e7c1      	b.n	8005d50 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8005dcc:	2b0c      	cmp	r3, #12
 8005dce:	d816      	bhi.n	8005dfe <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005dd0:	6805      	ldr	r5, [r0, #0]
 8005dd2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005dd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005dd8:	3b23      	subs	r3, #35	; 0x23
 8005dda:	241f      	movs	r4, #31
 8005ddc:	fa04 f303 	lsl.w	r3, r4, r3
 8005de0:	ea22 0303 	bic.w	r3, r2, r3
 8005de4:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005de6:	6805      	ldr	r5, [r0, #0]
 8005de8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005dea:	684b      	ldr	r3, [r1, #4]
 8005dec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005df0:	3b23      	subs	r3, #35	; 0x23
 8005df2:	880c      	ldrh	r4, [r1, #0]
 8005df4:	fa04 f303 	lsl.w	r3, r4, r3
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	632b      	str	r3, [r5, #48]	; 0x30
 8005dfc:	e7c1      	b.n	8005d82 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005dfe:	6805      	ldr	r5, [r0, #0]
 8005e00:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005e02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e06:	3b41      	subs	r3, #65	; 0x41
 8005e08:	241f      	movs	r4, #31
 8005e0a:	fa04 f303 	lsl.w	r3, r4, r3
 8005e0e:	ea22 0303 	bic.w	r3, r2, r3
 8005e12:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e14:	6805      	ldr	r5, [r0, #0]
 8005e16:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005e18:	684b      	ldr	r3, [r1, #4]
 8005e1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e1e:	3b41      	subs	r3, #65	; 0x41
 8005e20:	880c      	ldrh	r4, [r1, #0]
 8005e22:	fa04 f303 	lsl.w	r3, r4, r3
 8005e26:	4313      	orrs	r3, r2
 8005e28:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005e2a:	e7aa      	b.n	8005d82 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e2c:	680b      	ldr	r3, [r1, #0]
 8005e2e:	2b12      	cmp	r3, #18
 8005e30:	d1ab      	bne.n	8005d8a <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005e32:	4a16      	ldr	r2, [pc, #88]	; (8005e8c <HAL_ADC_ConfigChannel+0x188>)
 8005e34:	6853      	ldr	r3, [r2, #4]
 8005e36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e3a:	6053      	str	r3, [r2, #4]
 8005e3c:	e7a5      	b.n	8005d8a <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e3e:	680b      	ldr	r3, [r1, #0]
 8005e40:	3b10      	subs	r3, #16
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d8a5      	bhi.n	8005d92 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005e46:	4a11      	ldr	r2, [pc, #68]	; (8005e8c <HAL_ADC_ConfigChannel+0x188>)
 8005e48:	6853      	ldr	r3, [r2, #4]
 8005e4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e4e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005e50:	680b      	ldr	r3, [r1, #0]
 8005e52:	2b10      	cmp	r3, #16
 8005e54:	d19d      	bne.n	8005d92 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005e56:	4b0e      	ldr	r3, [pc, #56]	; (8005e90 <HAL_ADC_ConfigChannel+0x18c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8005e5e:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8005e62:	f202 3283 	addw	r2, r2, #899	; 0x383
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	0c9b      	lsrs	r3, r3, #18
 8005e6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e70:	005a      	lsls	r2, r3, #1
 8005e72:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8005e74:	e002      	b.n	8005e7c <HAL_ADC_ConfigChannel+0x178>
        counter--;
 8005e76:	9b01      	ldr	r3, [sp, #4]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005e7c:	9b01      	ldr	r3, [sp, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f9      	bne.n	8005e76 <HAL_ADC_ConfigChannel+0x172>
 8005e82:	e786      	b.n	8005d92 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8005e84:	2002      	movs	r0, #2
 8005e86:	e788      	b.n	8005d9a <HAL_ADC_ConfigChannel+0x96>
 8005e88:	40012000 	.word	0x40012000
 8005e8c:	40012300 	.word	0x40012300
 8005e90:	20000050 	.word	0x20000050

08005e94 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e94:	4a07      	ldr	r2, [pc, #28]	; (8005eb4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005e96:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005e9c:	041b      	lsls	r3, r3, #16
 8005e9e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ea0:	0200      	lsls	r0, r0, #8
 8005ea2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ea6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8005ea8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8005eac:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005eb0:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005eb2:	4770      	bx	lr
 8005eb4:	e000ed00 	.word	0xe000ed00

08005eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005eb8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005eba:	4b17      	ldr	r3, [pc, #92]	; (8005f18 <HAL_NVIC_SetPriority+0x60>)
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ec2:	f1c3 0407 	rsb	r4, r3, #7
 8005ec6:	2c04      	cmp	r4, #4
 8005ec8:	bf28      	it	cs
 8005eca:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ecc:	1d1d      	adds	r5, r3, #4
 8005ece:	2d06      	cmp	r5, #6
 8005ed0:	d918      	bls.n	8005f04 <HAL_NVIC_SetPriority+0x4c>
 8005ed2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ed4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005ed8:	fa05 f404 	lsl.w	r4, r5, r4
 8005edc:	ea21 0104 	bic.w	r1, r1, r4
 8005ee0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ee2:	fa05 f303 	lsl.w	r3, r5, r3
 8005ee6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005eea:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005eec:	2800      	cmp	r0, #0
 8005eee:	db0b      	blt.n	8005f08 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef0:	0109      	lsls	r1, r1, #4
 8005ef2:	b2c9      	uxtb	r1, r1
 8005ef4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005ef8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005efc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005f00:	bc30      	pop	{r4, r5}
 8005f02:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f04:	2300      	movs	r3, #0
 8005f06:	e7e5      	b.n	8005ed4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f08:	f000 000f 	and.w	r0, r0, #15
 8005f0c:	0109      	lsls	r1, r1, #4
 8005f0e:	b2c9      	uxtb	r1, r1
 8005f10:	4b02      	ldr	r3, [pc, #8]	; (8005f1c <HAL_NVIC_SetPriority+0x64>)
 8005f12:	5419      	strb	r1, [r3, r0]
 8005f14:	e7f4      	b.n	8005f00 <HAL_NVIC_SetPriority+0x48>
 8005f16:	bf00      	nop
 8005f18:	e000ed00 	.word	0xe000ed00
 8005f1c:	e000ed14 	.word	0xe000ed14

08005f20 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005f20:	2800      	cmp	r0, #0
 8005f22:	db07      	blt.n	8005f34 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f24:	f000 021f 	and.w	r2, r0, #31
 8005f28:	0940      	lsrs	r0, r0, #5
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4093      	lsls	r3, r2
 8005f2e:	4a02      	ldr	r2, [pc, #8]	; (8005f38 <HAL_NVIC_EnableIRQ+0x18>)
 8005f30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	e000e100 	.word	0xe000e100

08005f3c <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005f3c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005f40:	4905      	ldr	r1, [pc, #20]	; (8005f58 <HAL_NVIC_SystemReset+0x1c>)
 8005f42:	68ca      	ldr	r2, [r1, #12]
 8005f44:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005f48:	4b04      	ldr	r3, [pc, #16]	; (8005f5c <HAL_NVIC_SystemReset+0x20>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60cb      	str	r3, [r1, #12]
 8005f4e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005f52:	bf00      	nop
 8005f54:	e7fd      	b.n	8005f52 <HAL_NVIC_SystemReset+0x16>
 8005f56:	bf00      	nop
 8005f58:	e000ed00 	.word	0xe000ed00
 8005f5c:	05fa0004 	.word	0x05fa0004

08005f60 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005f60:	b158      	cbz	r0, 8005f7a <HAL_CRC_Init+0x1a>
{
 8005f62:	b510      	push	{r4, lr}
 8005f64:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005f66:	7943      	ldrb	r3, [r0, #5]
 8005f68:	b11b      	cbz	r3, 8005f72 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8005f6e:	2000      	movs	r0, #0
}
 8005f70:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8005f72:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8005f74:	f7fe fedc 	bl	8004d30 <HAL_CRC_MspInit>
 8005f78:	e7f7      	b.n	8005f6a <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8005f7a:	2001      	movs	r0, #1
}
 8005f7c:	4770      	bx	lr

08005f7e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005f7e:	b430      	push	{r4, r5}
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005f80:	2302      	movs	r3, #2
 8005f82:	7143      	strb	r3, [r0, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005f84:	6804      	ldr	r4, [r0, #0]
 8005f86:	68a3      	ldr	r3, [r4, #8]
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	60a3      	str	r3, [r4, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e004      	b.n	8005f9c <HAL_CRC_Calculate+0x1e>
  {
    hcrc->Instance->DR = pBuffer[index];
 8005f92:	6804      	ldr	r4, [r0, #0]
 8005f94:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8005f98:	6025      	str	r5, [r4, #0]
  for (index = 0U; index < BufferLength; index++)
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d3f8      	bcc.n	8005f92 <HAL_CRC_Calculate+0x14>
  }
  temp = hcrc->Instance->DR;
 8005fa0:	6803      	ldr	r3, [r0, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	7142      	strb	r2, [r0, #5]

  /* Return the CRC computed value */
  return temp;
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	bc30      	pop	{r4, r5}
 8005fac:	4770      	bx	lr

08005fae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fae:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005fb0:	6805      	ldr	r5, [r0, #0]
 8005fb2:	682c      	ldr	r4, [r5, #0]
 8005fb4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8005fb8:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005fba:	6804      	ldr	r4, [r0, #0]
 8005fbc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fbe:	6883      	ldr	r3, [r0, #8]
 8005fc0:	2b40      	cmp	r3, #64	; 0x40
 8005fc2:	d005      	beq.n	8005fd0 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8005fc4:	6803      	ldr	r3, [r0, #0]
 8005fc6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8005fc8:	6803      	ldr	r3, [r0, #0]
 8005fca:	60da      	str	r2, [r3, #12]
  }
}
 8005fcc:	bc30      	pop	{r4, r5}
 8005fce:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8005fd0:	6803      	ldr	r3, [r0, #0]
 8005fd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005fd4:	6803      	ldr	r3, [r0, #0]
 8005fd6:	60d9      	str	r1, [r3, #12]
 8005fd8:	e7f8      	b.n	8005fcc <DMA_SetConfig+0x1e>
	...

08005fdc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005fdc:	6802      	ldr	r2, [r0, #0]
 8005fde:	b2d3      	uxtb	r3, r2
 8005fe0:	3b10      	subs	r3, #16
 8005fe2:	490b      	ldr	r1, [pc, #44]	; (8006010 <DMA_CalcBaseAndBitshift+0x34>)
 8005fe4:	fba1 1303 	umull	r1, r3, r1, r3
 8005fe8:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005fea:	490a      	ldr	r1, [pc, #40]	; (8006014 <DMA_CalcBaseAndBitshift+0x38>)
 8005fec:	5cc9      	ldrb	r1, [r1, r3]
 8005fee:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ff0:	2b03      	cmp	r3, #3
 8005ff2:	d806      	bhi.n	8006002 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ff4:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8005ff8:	f022 0203 	bic.w	r2, r2, #3
 8005ffc:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8005ffe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8006000:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006002:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8006006:	f022 0203 	bic.w	r2, r2, #3
 800600a:	3204      	adds	r2, #4
 800600c:	6582      	str	r2, [r0, #88]	; 0x58
 800600e:	e7f6      	b.n	8005ffe <DMA_CalcBaseAndBitshift+0x22>
 8006010:	aaaaaaab 	.word	0xaaaaaaab
 8006014:	0800dfd0 	.word	0x0800dfd0

08006018 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006018:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800601a:	6982      	ldr	r2, [r0, #24]
 800601c:	b992      	cbnz	r2, 8006044 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800601e:	2b01      	cmp	r3, #1
 8006020:	d00a      	beq.n	8006038 <DMA_CheckFifoParam+0x20>
 8006022:	b11b      	cbz	r3, 800602c <DMA_CheckFifoParam+0x14>
 8006024:	2b02      	cmp	r3, #2
 8006026:	d001      	beq.n	800602c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8006028:	2000      	movs	r0, #0
 800602a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800602c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800602e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006032:	d12c      	bne.n	800608e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8006034:	2000      	movs	r0, #0
 8006036:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006038:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800603a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800603e:	d028      	beq.n	8006092 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8006040:	2000      	movs	r0, #0
 8006042:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006044:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006048:	d005      	beq.n	8006056 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800604a:	2b02      	cmp	r3, #2
 800604c:	d929      	bls.n	80060a2 <DMA_CheckFifoParam+0x8a>
 800604e:	2b03      	cmp	r3, #3
 8006050:	d015      	beq.n	800607e <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8006052:	2000      	movs	r0, #0
 8006054:	4770      	bx	lr
    switch (tmp)
 8006056:	2b03      	cmp	r3, #3
 8006058:	d803      	bhi.n	8006062 <DMA_CheckFifoParam+0x4a>
 800605a:	e8df f003 	tbb	[pc, r3]
 800605e:	041c      	.short	0x041c
 8006060:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8006062:	2000      	movs	r0, #0
 8006064:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006066:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006068:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800606c:	d115      	bne.n	800609a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800606e:	2000      	movs	r0, #0
 8006070:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006072:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006074:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006078:	d011      	beq.n	800609e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800607a:	2000      	movs	r0, #0
 800607c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800607e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006080:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006084:	d001      	beq.n	800608a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8006086:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8006088:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800608a:	2000      	movs	r0, #0
 800608c:	4770      	bx	lr
        status = HAL_ERROR;
 800608e:	2001      	movs	r0, #1
 8006090:	4770      	bx	lr
        status = HAL_ERROR;
 8006092:	2001      	movs	r0, #1
 8006094:	4770      	bx	lr
      status = HAL_ERROR;
 8006096:	2001      	movs	r0, #1
 8006098:	4770      	bx	lr
        status = HAL_ERROR;
 800609a:	2001      	movs	r0, #1
 800609c:	4770      	bx	lr
        status = HAL_ERROR;
 800609e:	2001      	movs	r0, #1
 80060a0:	4770      	bx	lr
      status = HAL_ERROR;
 80060a2:	2001      	movs	r0, #1
 80060a4:	4770      	bx	lr
	...

080060a8 <HAL_DMA_Init>:
{
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80060ac:	f7ff fd5e 	bl	8005b6c <HAL_GetTick>
  if(hdma == NULL)
 80060b0:	2c00      	cmp	r4, #0
 80060b2:	d05b      	beq.n	800616c <HAL_DMA_Init+0xc4>
 80060b4:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80060b6:	2300      	movs	r3, #0
 80060b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80060bc:	2302      	movs	r3, #2
 80060be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	6813      	ldr	r3, [r2, #0]
 80060c6:	f023 0301 	bic.w	r3, r3, #1
 80060ca:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	f012 0f01 	tst.w	r2, #1
 80060d4:	d00a      	beq.n	80060ec <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060d6:	f7ff fd49 	bl	8005b6c <HAL_GetTick>
 80060da:	1b40      	subs	r0, r0, r5
 80060dc:	2805      	cmp	r0, #5
 80060de:	d9f5      	bls.n	80060cc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060e0:	2320      	movs	r3, #32
 80060e2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060e4:	2003      	movs	r0, #3
 80060e6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80060ea:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80060ec:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80060ee:	4820      	ldr	r0, [pc, #128]	; (8006170 <HAL_DMA_Init+0xc8>)
 80060f0:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060f2:	6861      	ldr	r1, [r4, #4]
 80060f4:	68a2      	ldr	r2, [r4, #8]
 80060f6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060f8:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060fa:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060fc:	6921      	ldr	r1, [r4, #16]
 80060fe:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006100:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006102:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006104:	69a1      	ldr	r1, [r4, #24]
 8006106:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8006108:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800610a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800610c:	6a21      	ldr	r1, [r4, #32]
 800610e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006110:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006112:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006114:	2904      	cmp	r1, #4
 8006116:	d01e      	beq.n	8006156 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8006118:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800611a:	6826      	ldr	r6, [r4, #0]
 800611c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800611e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8006122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006124:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006126:	2b04      	cmp	r3, #4
 8006128:	d107      	bne.n	800613a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800612a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800612c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800612e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006130:	b11b      	cbz	r3, 800613a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006132:	4620      	mov	r0, r4
 8006134:	f7ff ff70 	bl	8006018 <DMA_CheckFifoParam>
 8006138:	b990      	cbnz	r0, 8006160 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800613a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800613c:	4620      	mov	r0, r4
 800613e:	f7ff ff4d 	bl	8005fdc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006142:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006144:	233f      	movs	r3, #63	; 0x3f
 8006146:	4093      	lsls	r3, r2
 8006148:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800614a:	2000      	movs	r0, #0
 800614c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800614e:	2301      	movs	r3, #1
 8006150:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8006154:	e7c9      	b.n	80060ea <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006156:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006158:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800615a:	4301      	orrs	r1, r0
 800615c:	430a      	orrs	r2, r1
 800615e:	e7db      	b.n	8006118 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006160:	2340      	movs	r3, #64	; 0x40
 8006162:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8006164:	2001      	movs	r0, #1
 8006166:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800616a:	e7be      	b.n	80060ea <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 800616c:	2001      	movs	r0, #1
 800616e:	e7bc      	b.n	80060ea <HAL_DMA_Init+0x42>
 8006170:	f010803f 	.word	0xf010803f

08006174 <HAL_DMA_Start_IT>:
{
 8006174:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006176:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8006178:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800617c:	2c01      	cmp	r4, #1
 800617e:	d02c      	beq.n	80061da <HAL_DMA_Start_IT+0x66>
 8006180:	2401      	movs	r4, #1
 8006182:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8006186:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800618a:	b2e4      	uxtb	r4, r4
 800618c:	2c01      	cmp	r4, #1
 800618e:	d004      	beq.n	800619a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8006190:	2300      	movs	r3, #0
 8006192:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8006196:	2002      	movs	r0, #2
}
 8006198:	bd38      	pop	{r3, r4, r5, pc}
 800619a:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 800619c:	2002      	movs	r0, #2
 800619e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061a2:	2000      	movs	r0, #0
 80061a4:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061a6:	4620      	mov	r0, r4
 80061a8:	f7ff ff01 	bl	8005fae <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061ac:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80061ae:	233f      	movs	r3, #63	; 0x3f
 80061b0:	4093      	lsls	r3, r2
 80061b2:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80061b4:	6822      	ldr	r2, [r4, #0]
 80061b6:	6813      	ldr	r3, [r2, #0]
 80061b8:	f043 0316 	orr.w	r3, r3, #22
 80061bc:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80061be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061c0:	b123      	cbz	r3, 80061cc <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80061c2:	6822      	ldr	r2, [r4, #0]
 80061c4:	6813      	ldr	r3, [r2, #0]
 80061c6:	f043 0308 	orr.w	r3, r3, #8
 80061ca:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80061cc:	6822      	ldr	r2, [r4, #0]
 80061ce:	6813      	ldr	r3, [r2, #0]
 80061d0:	f043 0301 	orr.w	r3, r3, #1
 80061d4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061d6:	2000      	movs	r0, #0
 80061d8:	e7de      	b.n	8006198 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80061da:	2002      	movs	r0, #2
 80061dc:	e7dc      	b.n	8006198 <HAL_DMA_Start_IT+0x24>

080061de <HAL_DMA_Abort>:
{
 80061de:	b570      	push	{r4, r5, r6, lr}
 80061e0:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061e2:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80061e4:	f7ff fcc2 	bl	8005b6c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061e8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d006      	beq.n	8006200 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061f2:	2380      	movs	r3, #128	; 0x80
 80061f4:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80061f6:	2300      	movs	r3, #0
 80061f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80061fc:	2001      	movs	r0, #1
}
 80061fe:	bd70      	pop	{r4, r5, r6, pc}
 8006200:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006202:	6822      	ldr	r2, [r4, #0]
 8006204:	6813      	ldr	r3, [r2, #0]
 8006206:	f023 0316 	bic.w	r3, r3, #22
 800620a:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800620c:	6822      	ldr	r2, [r4, #0]
 800620e:	6953      	ldr	r3, [r2, #20]
 8006210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006214:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006218:	b1e3      	cbz	r3, 8006254 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800621a:	6822      	ldr	r2, [r4, #0]
 800621c:	6813      	ldr	r3, [r2, #0]
 800621e:	f023 0308 	bic.w	r3, r3, #8
 8006222:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006224:	6822      	ldr	r2, [r4, #0]
 8006226:	6813      	ldr	r3, [r2, #0]
 8006228:	f023 0301 	bic.w	r3, r3, #1
 800622c:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f013 0f01 	tst.w	r3, #1
 8006236:	d011      	beq.n	800625c <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006238:	f7ff fc98 	bl	8005b6c <HAL_GetTick>
 800623c:	1b40      	subs	r0, r0, r5
 800623e:	2805      	cmp	r0, #5
 8006240:	d9f5      	bls.n	800622e <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006242:	2320      	movs	r3, #32
 8006244:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8006246:	2300      	movs	r3, #0
 8006248:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800624c:	2003      	movs	r0, #3
 800624e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8006252:	e7d4      	b.n	80061fe <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006254:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1df      	bne.n	800621a <HAL_DMA_Abort+0x3c>
 800625a:	e7e3      	b.n	8006224 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800625c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800625e:	233f      	movs	r3, #63	; 0x3f
 8006260:	4093      	lsls	r3, r2
 8006262:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8006264:	2000      	movs	r0, #0
 8006266:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800626a:	2301      	movs	r3, #1
 800626c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8006270:	e7c5      	b.n	80061fe <HAL_DMA_Abort+0x20>

08006272 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006272:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d003      	beq.n	8006284 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800627c:	2380      	movs	r3, #128	; 0x80
 800627e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8006280:	2001      	movs	r0, #1
 8006282:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8006284:	2305      	movs	r3, #5
 8006286:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800628a:	6802      	ldr	r2, [r0, #0]
 800628c:	6813      	ldr	r3, [r2, #0]
 800628e:	f023 0301 	bic.w	r3, r3, #1
 8006292:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006294:	2000      	movs	r0, #0
}
 8006296:	4770      	bx	lr

08006298 <HAL_DMA_IRQHandler>:
{
 8006298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800629a:	b083      	sub	sp, #12
 800629c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062a2:	4b72      	ldr	r3, [pc, #456]	; (800646c <HAL_DMA_IRQHandler+0x1d4>)
 80062a4:	681d      	ldr	r5, [r3, #0]
 80062a6:	4b72      	ldr	r3, [pc, #456]	; (8006470 <HAL_DMA_IRQHandler+0x1d8>)
 80062a8:	fba3 3505 	umull	r3, r5, r3, r5
 80062ac:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062ae:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80062b0:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80062b2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80062b4:	2308      	movs	r3, #8
 80062b6:	4093      	lsls	r3, r2
 80062b8:	4233      	tst	r3, r6
 80062ba:	d010      	beq.n	80062de <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80062bc:	6803      	ldr	r3, [r0, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	f012 0f04 	tst.w	r2, #4
 80062c4:	d00b      	beq.n	80062de <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	f022 0204 	bic.w	r2, r2, #4
 80062cc:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80062ce:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80062d0:	2308      	movs	r3, #8
 80062d2:	4093      	lsls	r3, r2
 80062d4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80062de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80062e0:	2301      	movs	r3, #1
 80062e2:	4093      	lsls	r3, r2
 80062e4:	4233      	tst	r3, r6
 80062e6:	d009      	beq.n	80062fc <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80062e8:	6822      	ldr	r2, [r4, #0]
 80062ea:	6952      	ldr	r2, [r2, #20]
 80062ec:	f012 0f80 	tst.w	r2, #128	; 0x80
 80062f0:	d004      	beq.n	80062fc <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80062f2:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80062f6:	f043 0302 	orr.w	r3, r3, #2
 80062fa:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80062fc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80062fe:	2304      	movs	r3, #4
 8006300:	4093      	lsls	r3, r2
 8006302:	4233      	tst	r3, r6
 8006304:	d009      	beq.n	800631a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006306:	6822      	ldr	r2, [r4, #0]
 8006308:	6812      	ldr	r2, [r2, #0]
 800630a:	f012 0f02 	tst.w	r2, #2
 800630e:	d004      	beq.n	800631a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006310:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006312:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006314:	f043 0304 	orr.w	r3, r3, #4
 8006318:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800631a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800631c:	2310      	movs	r3, #16
 800631e:	4093      	lsls	r3, r2
 8006320:	4233      	tst	r3, r6
 8006322:	d024      	beq.n	800636e <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006324:	6822      	ldr	r2, [r4, #0]
 8006326:	6812      	ldr	r2, [r2, #0]
 8006328:	f012 0f08 	tst.w	r2, #8
 800632c:	d01f      	beq.n	800636e <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800632e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8006338:	d00d      	beq.n	8006356 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006340:	d104      	bne.n	800634c <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8006342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006344:	b19b      	cbz	r3, 800636e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8006346:	4620      	mov	r0, r4
 8006348:	4798      	blx	r3
 800634a:	e010      	b.n	800636e <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800634c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800634e:	b173      	cbz	r3, 800636e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8006350:	4620      	mov	r0, r4
 8006352:	4798      	blx	r3
 8006354:	e00b      	b.n	800636e <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	f412 7f80 	tst.w	r2, #256	; 0x100
 800635c:	d103      	bne.n	8006366 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	f022 0208 	bic.w	r2, r2, #8
 8006364:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8006366:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006368:	b10b      	cbz	r3, 800636e <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800636a:	4620      	mov	r0, r4
 800636c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800636e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006370:	2320      	movs	r3, #32
 8006372:	4093      	lsls	r3, r2
 8006374:	4233      	tst	r3, r6
 8006376:	d055      	beq.n	8006424 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006378:	6822      	ldr	r2, [r4, #0]
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	f012 0f10 	tst.w	r2, #16
 8006380:	d050      	beq.n	8006424 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006382:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006384:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b05      	cmp	r3, #5
 800638c:	d00e      	beq.n	80063ac <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8006396:	d033      	beq.n	8006400 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800639e:	d12a      	bne.n	80063f6 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80063a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d03e      	beq.n	8006424 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80063a6:	4620      	mov	r0, r4
 80063a8:	4798      	blx	r3
 80063aa:	e03b      	b.n	8006424 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063ac:	6822      	ldr	r2, [r4, #0]
 80063ae:	6813      	ldr	r3, [r2, #0]
 80063b0:	f023 0316 	bic.w	r3, r3, #22
 80063b4:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	6953      	ldr	r3, [r2, #20]
 80063ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063be:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063c2:	b1a3      	cbz	r3, 80063ee <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063c4:	6822      	ldr	r2, [r4, #0]
 80063c6:	6813      	ldr	r3, [r2, #0]
 80063c8:	f023 0308 	bic.w	r3, r3, #8
 80063cc:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80063d0:	233f      	movs	r3, #63	; 0x3f
 80063d2:	4093      	lsls	r3, r2
 80063d4:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80063d6:	2300      	movs	r3, #0
 80063d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80063dc:	2301      	movs	r3, #1
 80063de:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80063e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d03f      	beq.n	8006468 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80063e8:	4620      	mov	r0, r4
 80063ea:	4798      	blx	r3
 80063ec:	e03c      	b.n	8006468 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e7      	bne.n	80063c4 <HAL_DMA_IRQHandler+0x12c>
 80063f4:	e7eb      	b.n	80063ce <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80063f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80063f8:	b1a3      	cbz	r3, 8006424 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80063fa:	4620      	mov	r0, r4
 80063fc:	4798      	blx	r3
 80063fe:	e011      	b.n	8006424 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006406:	d109      	bne.n	800641c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	f022 0210 	bic.w	r2, r2, #16
 800640e:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8006410:	2300      	movs	r3, #0
 8006412:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8006416:	2301      	movs	r3, #1
 8006418:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800641c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800641e:	b10b      	cbz	r3, 8006424 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8006420:	4620      	mov	r0, r4
 8006422:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006424:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006426:	b1fb      	cbz	r3, 8006468 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006428:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800642a:	f013 0f01 	tst.w	r3, #1
 800642e:	d017      	beq.n	8006460 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8006430:	2305      	movs	r3, #5
 8006432:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8006436:	6822      	ldr	r2, [r4, #0]
 8006438:	6813      	ldr	r3, [r2, #0]
 800643a:	f023 0301 	bic.w	r3, r3, #1
 800643e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8006440:	9b01      	ldr	r3, [sp, #4]
 8006442:	3301      	adds	r3, #1
 8006444:	9301      	str	r3, [sp, #4]
 8006446:	42ab      	cmp	r3, r5
 8006448:	d804      	bhi.n	8006454 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f013 0f01 	tst.w	r3, #1
 8006452:	d1f5      	bne.n	8006440 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8006454:	2300      	movs	r3, #0
 8006456:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800645a:	2301      	movs	r3, #1
 800645c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8006460:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006462:	b10b      	cbz	r3, 8006468 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8006464:	4620      	mov	r0, r4
 8006466:	4798      	blx	r3
}
 8006468:	b003      	add	sp, #12
 800646a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800646c:	20000050 	.word	0x20000050
 8006470:	1b4e81b5 	.word	0x1b4e81b5

08006474 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8006474:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8006476:	4770      	bx	lr

08006478 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006478:	2300      	movs	r3, #0
 800647a:	2b0f      	cmp	r3, #15
 800647c:	f200 80c5 	bhi.w	800660a <HAL_GPIO_Init+0x192>
{
 8006480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006482:	b083      	sub	sp, #12
 8006484:	e039      	b.n	80064fa <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006486:	2204      	movs	r2, #4
 8006488:	e000      	b.n	800648c <HAL_GPIO_Init+0x14>
 800648a:	2200      	movs	r2, #0
 800648c:	40aa      	lsls	r2, r5
 800648e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006490:	3402      	adds	r4, #2
 8006492:	4d5e      	ldr	r5, [pc, #376]	; (800660c <HAL_GPIO_Init+0x194>)
 8006494:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006498:	4a5d      	ldr	r2, [pc, #372]	; (8006610 <HAL_GPIO_Init+0x198>)
 800649a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800649c:	43f2      	mvns	r2, r6
 800649e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80064a2:	684f      	ldr	r7, [r1, #4]
 80064a4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80064a8:	d001      	beq.n	80064ae <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80064aa:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 80064ae:	4c58      	ldr	r4, [pc, #352]	; (8006610 <HAL_GPIO_Init+0x198>)
 80064b0:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 80064b2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80064b4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80064b8:	684f      	ldr	r7, [r1, #4]
 80064ba:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80064be:	d001      	beq.n	80064c4 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80064c0:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 80064c4:	4c52      	ldr	r4, [pc, #328]	; (8006610 <HAL_GPIO_Init+0x198>)
 80064c6:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064c8:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80064ca:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80064ce:	684f      	ldr	r7, [r1, #4]
 80064d0:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80064d4:	d001      	beq.n	80064da <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80064d6:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 80064da:	4c4d      	ldr	r4, [pc, #308]	; (8006610 <HAL_GPIO_Init+0x198>)
 80064dc:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80064de:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80064e0:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80064e2:	684d      	ldr	r5, [r1, #4]
 80064e4:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 80064e8:	d001      	beq.n	80064ee <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80064ea:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 80064ee:	4c48      	ldr	r4, [pc, #288]	; (8006610 <HAL_GPIO_Init+0x198>)
 80064f0:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064f2:	3301      	adds	r3, #1
 80064f4:	2b0f      	cmp	r3, #15
 80064f6:	f200 8086 	bhi.w	8006606 <HAL_GPIO_Init+0x18e>
    ioposition = 0x01U << position;
 80064fa:	2201      	movs	r2, #1
 80064fc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064fe:	680c      	ldr	r4, [r1, #0]
 8006500:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8006504:	42b2      	cmp	r2, r6
 8006506:	d1f4      	bne.n	80064f2 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006508:	684c      	ldr	r4, [r1, #4]
 800650a:	1e65      	subs	r5, r4, #1
 800650c:	2d01      	cmp	r5, #1
 800650e:	d903      	bls.n	8006518 <HAL_GPIO_Init+0xa0>
 8006510:	2c11      	cmp	r4, #17
 8006512:	d001      	beq.n	8006518 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006514:	2c12      	cmp	r4, #18
 8006516:	d112      	bne.n	800653e <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8006518:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800651a:	005f      	lsls	r7, r3, #1
 800651c:	2403      	movs	r4, #3
 800651e:	40bc      	lsls	r4, r7
 8006520:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006524:	68cc      	ldr	r4, [r1, #12]
 8006526:	40bc      	lsls	r4, r7
 8006528:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800652a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800652c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800652e:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006532:	684c      	ldr	r4, [r1, #4]
 8006534:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8006538:	409a      	lsls	r2, r3
 800653a:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800653c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800653e:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006540:	005f      	lsls	r7, r3, #1
 8006542:	2203      	movs	r2, #3
 8006544:	40ba      	lsls	r2, r7
 8006546:	43d2      	mvns	r2, r2
 8006548:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800654a:	688d      	ldr	r5, [r1, #8]
 800654c:	40bd      	lsls	r5, r7
 800654e:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8006550:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006552:	684c      	ldr	r4, [r1, #4]
 8006554:	2c02      	cmp	r4, #2
 8006556:	d001      	beq.n	800655c <HAL_GPIO_Init+0xe4>
 8006558:	2c12      	cmp	r4, #18
 800655a:	d113      	bne.n	8006584 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 800655c:	08dd      	lsrs	r5, r3, #3
 800655e:	3508      	adds	r5, #8
 8006560:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006564:	f003 0407 	and.w	r4, r3, #7
 8006568:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800656c:	240f      	movs	r4, #15
 800656e:	fa04 f40c 	lsl.w	r4, r4, ip
 8006572:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006576:	690c      	ldr	r4, [r1, #16]
 8006578:	fa04 f40c 	lsl.w	r4, r4, ip
 800657c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8006580:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8006584:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006586:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006588:	684c      	ldr	r4, [r1, #4]
 800658a:	f004 0403 	and.w	r4, r4, #3
 800658e:	40bc      	lsls	r4, r7
 8006590:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8006592:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006594:	684a      	ldr	r2, [r1, #4]
 8006596:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800659a:	d0aa      	beq.n	80064f2 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800659c:	2200      	movs	r2, #0
 800659e:	9201      	str	r2, [sp, #4]
 80065a0:	4a1c      	ldr	r2, [pc, #112]	; (8006614 <HAL_GPIO_Init+0x19c>)
 80065a2:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80065a4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80065a8:	6454      	str	r4, [r2, #68]	; 0x44
 80065aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80065ac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80065b0:	9201      	str	r2, [sp, #4]
 80065b2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80065b4:	089c      	lsrs	r4, r3, #2
 80065b6:	1ca5      	adds	r5, r4, #2
 80065b8:	4a14      	ldr	r2, [pc, #80]	; (800660c <HAL_GPIO_Init+0x194>)
 80065ba:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065be:	f003 0203 	and.w	r2, r3, #3
 80065c2:	0095      	lsls	r5, r2, #2
 80065c4:	220f      	movs	r2, #15
 80065c6:	40aa      	lsls	r2, r5
 80065c8:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80065cc:	4a12      	ldr	r2, [pc, #72]	; (8006618 <HAL_GPIO_Init+0x1a0>)
 80065ce:	4290      	cmp	r0, r2
 80065d0:	f43f af5b 	beq.w	800648a <HAL_GPIO_Init+0x12>
 80065d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065d8:	4290      	cmp	r0, r2
 80065da:	d00e      	beq.n	80065fa <HAL_GPIO_Init+0x182>
 80065dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065e0:	4290      	cmp	r0, r2
 80065e2:	d00c      	beq.n	80065fe <HAL_GPIO_Init+0x186>
 80065e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065e8:	4290      	cmp	r0, r2
 80065ea:	d00a      	beq.n	8006602 <HAL_GPIO_Init+0x18a>
 80065ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065f0:	4290      	cmp	r0, r2
 80065f2:	f43f af48 	beq.w	8006486 <HAL_GPIO_Init+0xe>
 80065f6:	2207      	movs	r2, #7
 80065f8:	e748      	b.n	800648c <HAL_GPIO_Init+0x14>
 80065fa:	2201      	movs	r2, #1
 80065fc:	e746      	b.n	800648c <HAL_GPIO_Init+0x14>
 80065fe:	2202      	movs	r2, #2
 8006600:	e744      	b.n	800648c <HAL_GPIO_Init+0x14>
 8006602:	2203      	movs	r2, #3
 8006604:	e742      	b.n	800648c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8006606:	b003      	add	sp, #12
 8006608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800660a:	4770      	bx	lr
 800660c:	40013800 	.word	0x40013800
 8006610:	40013c00 	.word	0x40013c00
 8006614:	40023800 	.word	0x40023800
 8006618:	40020000 	.word	0x40020000

0800661c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800661c:	6903      	ldr	r3, [r0, #16]
 800661e:	4219      	tst	r1, r3
 8006620:	d101      	bne.n	8006626 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006622:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8006624:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8006626:	2001      	movs	r0, #1
 8006628:	4770      	bx	lr

0800662a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800662a:	b912      	cbnz	r2, 8006632 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800662c:	0409      	lsls	r1, r1, #16
 800662e:	6181      	str	r1, [r0, #24]
  }
}
 8006630:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8006632:	6181      	str	r1, [r0, #24]
 8006634:	4770      	bx	lr
	...

08006638 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006638:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800663a:	4b05      	ldr	r3, [pc, #20]	; (8006650 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	4203      	tst	r3, r0
 8006640:	d100      	bne.n	8006644 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8006642:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006644:	4b02      	ldr	r3, [pc, #8]	; (8006650 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8006646:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006648:	f7fd ffc2 	bl	80045d0 <HAL_GPIO_EXTI_Callback>
}
 800664c:	e7f9      	b.n	8006642 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800664e:	bf00      	nop
 8006650:	40013c00 	.word	0x40013c00

08006654 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006654:	6803      	ldr	r3, [r0, #0]
 8006656:	695a      	ldr	r2, [r3, #20]
 8006658:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800665c:	d011      	beq.n	8006682 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800665e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006662:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006664:	2300      	movs	r3, #0
 8006666:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006668:	2220      	movs	r2, #32
 800666a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800666e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006672:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006674:	f042 0204 	orr.w	r2, r2, #4
 8006678:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800667a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 800667e:	2001      	movs	r0, #1
 8006680:	4770      	bx	lr
  }
  return HAL_OK;
 8006682:	2000      	movs	r0, #0
}
 8006684:	4770      	bx	lr

08006686 <I2C_WaitOnFlagUntilTimeout>:
{
 8006686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006688:	4606      	mov	r6, r0
 800668a:	460c      	mov	r4, r1
 800668c:	4617      	mov	r7, r2
 800668e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006690:	e022      	b.n	80066d8 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006692:	f7ff fa6b 	bl	8005b6c <HAL_GetTick>
 8006696:	9b06      	ldr	r3, [sp, #24]
 8006698:	1ac0      	subs	r0, r0, r3
 800669a:	42a8      	cmp	r0, r5
 800669c:	d800      	bhi.n	80066a0 <I2C_WaitOnFlagUntilTimeout+0x1a>
 800669e:	b9dd      	cbnz	r5, 80066d8 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066a0:	2300      	movs	r3, #0
 80066a2:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066a4:	2220      	movs	r2, #32
 80066a6:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066aa:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066ae:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80066b0:	f042 0220 	orr.w	r2, r2, #32
 80066b4:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80066b6:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 80066ba:	2001      	movs	r0, #1
 80066bc:	e01a      	b.n	80066f4 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066be:	6833      	ldr	r3, [r6, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	ea24 0303 	bic.w	r3, r4, r3
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	fab3 f383 	clz	r3, r3
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	429f      	cmp	r7, r3
 80066d0:	d10f      	bne.n	80066f2 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80066d2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80066d6:	d1dc      	bne.n	8006692 <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066d8:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d0ee      	beq.n	80066be <I2C_WaitOnFlagUntilTimeout+0x38>
 80066e0:	6833      	ldr	r3, [r6, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	ea24 0303 	bic.w	r3, r4, r3
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	fab3 f383 	clz	r3, r3
 80066ee:	095b      	lsrs	r3, r3, #5
 80066f0:	e7ed      	b.n	80066ce <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 80066f2:	2000      	movs	r0, #0
}
 80066f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080066f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80066f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f8:	4604      	mov	r4, r0
 80066fa:	460d      	mov	r5, r1
 80066fc:	4616      	mov	r6, r2
 80066fe:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006700:	e03c      	b.n	800677c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006708:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006710:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006712:	2300      	movs	r3, #0
 8006714:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006716:	2220      	movs	r2, #32
 8006718:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800671c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006720:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006722:	f042 0204 	orr.w	r2, r2, #4
 8006726:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006728:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 800672c:	2001      	movs	r0, #1
 800672e:	e033      	b.n	8006798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006730:	f7ff fa1c 	bl	8005b6c <HAL_GetTick>
 8006734:	1bc0      	subs	r0, r0, r7
 8006736:	42b0      	cmp	r0, r6
 8006738:	d800      	bhi.n	800673c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 800673a:	b9fe      	cbnz	r6, 800677c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800673c:	2300      	movs	r3, #0
 800673e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006740:	2220      	movs	r2, #32
 8006742:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006746:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800674a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800674c:	f042 0220 	orr.w	r2, r2, #32
 8006750:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006752:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8006756:	2001      	movs	r0, #1
 8006758:	e01e      	b.n	8006798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	ea25 0303 	bic.w	r3, r5, r3
 8006762:	b29b      	uxth	r3, r3
 8006764:	3300      	adds	r3, #0
 8006766:	bf18      	it	ne
 8006768:	2301      	movne	r3, #1
 800676a:	b1a3      	cbz	r3, 8006796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	695a      	ldr	r2, [r3, #20]
 8006770:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006774:	d1c5      	bne.n	8006702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8006776:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800677a:	d1d9      	bne.n	8006730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800677c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8006780:	2b01      	cmp	r3, #1
 8006782:	d0ea      	beq.n	800675a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	ea25 0303 	bic.w	r3, r5, r3
 800678c:	b29b      	uxth	r3, r3
 800678e:	3300      	adds	r3, #0
 8006790:	bf18      	it	ne
 8006792:	2301      	movne	r3, #1
 8006794:	e7e9      	b.n	800676a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8006796:	2000      	movs	r0, #0
}
 8006798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800679a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800679a:	b570      	push	{r4, r5, r6, lr}
 800679c:	4604      	mov	r4, r0
 800679e:	460d      	mov	r5, r1
 80067a0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80067aa:	d11c      	bne.n	80067e6 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067ac:	4620      	mov	r0, r4
 80067ae:	f7ff ff51 	bl	8006654 <I2C_IsAcknowledgeFailed>
 80067b2:	b9d0      	cbnz	r0, 80067ea <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80067b4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80067b8:	d0f3      	beq.n	80067a2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ba:	f7ff f9d7 	bl	8005b6c <HAL_GetTick>
 80067be:	1b80      	subs	r0, r0, r6
 80067c0:	42a8      	cmp	r0, r5
 80067c2:	d801      	bhi.n	80067c8 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80067c4:	2d00      	cmp	r5, #0
 80067c6:	d1ec      	bne.n	80067a2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067c8:	2300      	movs	r3, #0
 80067ca:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067cc:	2220      	movs	r2, #32
 80067ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80067d8:	f042 0220 	orr.w	r2, r2, #32
 80067dc:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80067de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80067e2:	2001      	movs	r0, #1
 80067e4:	e000      	b.n	80067e8 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80067e6:	2000      	movs	r0, #0
}
 80067e8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80067ea:	2001      	movs	r0, #1
 80067ec:	e7fc      	b.n	80067e8 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

080067f0 <I2C_RequestMemoryWrite>:
{
 80067f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	4604      	mov	r4, r0
 80067f8:	4688      	mov	r8, r1
 80067fa:	4616      	mov	r6, r2
 80067fc:	461f      	mov	r7, r3
 80067fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006800:	6802      	ldr	r2, [r0, #0]
 8006802:	6813      	ldr	r3, [r2, #0]
 8006804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006808:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800680a:	9500      	str	r5, [sp, #0]
 800680c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680e:	2200      	movs	r2, #0
 8006810:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006814:	f7ff ff37 	bl	8006686 <I2C_WaitOnFlagUntilTimeout>
 8006818:	b160      	cbz	r0, 8006834 <I2C_RequestMemoryWrite+0x44>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006822:	d04f      	beq.n	80068c4 <I2C_RequestMemoryWrite+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006828:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
}
 800682c:	4618      	mov	r0, r3
 800682e:	b004      	add	sp, #16
 8006830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006834:	6822      	ldr	r2, [r4, #0]
 8006836:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 800683a:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800683c:	462b      	mov	r3, r5
 800683e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006840:	4921      	ldr	r1, [pc, #132]	; (80068c8 <I2C_RequestMemoryWrite+0xd8>)
 8006842:	4620      	mov	r0, r4
 8006844:	f7ff ff57 	bl	80066f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006848:	b108      	cbz	r0, 800684e <I2C_RequestMemoryWrite+0x5e>
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e7ee      	b.n	800682c <I2C_RequestMemoryWrite+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800684e:	2300      	movs	r3, #0
 8006850:	9303      	str	r3, [sp, #12]
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	695a      	ldr	r2, [r3, #20]
 8006856:	9203      	str	r2, [sp, #12]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	9303      	str	r3, [sp, #12]
 800685c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800685e:	462a      	mov	r2, r5
 8006860:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006862:	4620      	mov	r0, r4
 8006864:	f7ff ff99 	bl	800679a <I2C_WaitOnTXEFlagUntilTimeout>
 8006868:	4603      	mov	r3, r0
 800686a:	b158      	cbz	r0, 8006884 <I2C_RequestMemoryWrite+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800686c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800686e:	2b04      	cmp	r3, #4
 8006870:	d001      	beq.n	8006876 <I2C_RequestMemoryWrite+0x86>
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e7da      	b.n	800682c <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006876:	6822      	ldr	r2, [r4, #0]
 8006878:	6813      	ldr	r3, [r2, #0]
 800687a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800687e:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e7d3      	b.n	800682c <I2C_RequestMemoryWrite+0x3c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006884:	2f01      	cmp	r7, #1
 8006886:	d00e      	beq.n	80068a6 <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	0a32      	lsrs	r2, r6, #8
 800688c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800688e:	462a      	mov	r2, r5
 8006890:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006892:	4620      	mov	r0, r4
 8006894:	f7ff ff81 	bl	800679a <I2C_WaitOnTXEFlagUntilTimeout>
 8006898:	4603      	mov	r3, r0
 800689a:	b178      	cbz	r0, 80068bc <I2C_RequestMemoryWrite+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800689c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d005      	beq.n	80068ae <I2C_RequestMemoryWrite+0xbe>
      return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e7c2      	b.n	800682c <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068a6:	6822      	ldr	r2, [r4, #0]
 80068a8:	b2f6      	uxtb	r6, r6
 80068aa:	6116      	str	r6, [r2, #16]
 80068ac:	e7be      	b.n	800682c <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ae:	6822      	ldr	r2, [r4, #0]
 80068b0:	6813      	ldr	r3, [r2, #0]
 80068b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068b6:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e7b7      	b.n	800682c <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068bc:	6822      	ldr	r2, [r4, #0]
 80068be:	b2f6      	uxtb	r6, r6
 80068c0:	6116      	str	r6, [r2, #16]
 80068c2:	e7b3      	b.n	800682c <I2C_RequestMemoryWrite+0x3c>
    return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e7b1      	b.n	800682c <I2C_RequestMemoryWrite+0x3c>
 80068c8:	00010002 	.word	0x00010002

080068cc <I2C_RequestMemoryRead>:
{
 80068cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	4604      	mov	r4, r0
 80068d4:	460e      	mov	r6, r1
 80068d6:	4617      	mov	r7, r2
 80068d8:	4698      	mov	r8, r3
 80068da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068dc:	6802      	ldr	r2, [r0, #0]
 80068de:	6813      	ldr	r3, [r2, #0]
 80068e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068e4:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068e6:	6802      	ldr	r2, [r0, #0]
 80068e8:	6813      	ldr	r3, [r2, #0]
 80068ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ee:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068f0:	9500      	str	r5, [sp, #0]
 80068f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068f4:	2200      	movs	r2, #0
 80068f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068fa:	f7ff fec4 	bl	8006686 <I2C_WaitOnFlagUntilTimeout>
 80068fe:	b168      	cbz	r0, 800691c <I2C_RequestMemoryRead+0x50>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006908:	f000 8089 	beq.w	8006a1e <I2C_RequestMemoryRead+0x152>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800690c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006910:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
}
 8006914:	4618      	mov	r0, r3
 8006916:	b004      	add	sp, #16
 8006918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800691c:	b2f6      	uxtb	r6, r6
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 8006924:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006926:	462b      	mov	r3, r5
 8006928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800692a:	493f      	ldr	r1, [pc, #252]	; (8006a28 <I2C_RequestMemoryRead+0x15c>)
 800692c:	4620      	mov	r0, r4
 800692e:	f7ff fee2 	bl	80066f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006932:	b108      	cbz	r0, 8006938 <I2C_RequestMemoryRead+0x6c>
    return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e7ed      	b.n	8006914 <I2C_RequestMemoryRead+0x48>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006938:	2300      	movs	r3, #0
 800693a:	9303      	str	r3, [sp, #12]
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	695a      	ldr	r2, [r3, #20]
 8006940:	9203      	str	r2, [sp, #12]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	9303      	str	r3, [sp, #12]
 8006946:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006948:	462a      	mov	r2, r5
 800694a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800694c:	4620      	mov	r0, r4
 800694e:	f7ff ff24 	bl	800679a <I2C_WaitOnTXEFlagUntilTimeout>
 8006952:	b158      	cbz	r0, 800696c <I2C_RequestMemoryRead+0xa0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006954:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006956:	2b04      	cmp	r3, #4
 8006958:	d001      	beq.n	800695e <I2C_RequestMemoryRead+0x92>
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e7da      	b.n	8006914 <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800695e:	6822      	ldr	r2, [r4, #0]
 8006960:	6813      	ldr	r3, [r2, #0]
 8006962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006966:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e7d3      	b.n	8006914 <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800696c:	f1b8 0f01 	cmp.w	r8, #1
 8006970:	d10d      	bne.n	800698e <I2C_RequestMemoryRead+0xc2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	b2ff      	uxtb	r7, r7
 8006976:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006978:	462a      	mov	r2, r5
 800697a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800697c:	4620      	mov	r0, r4
 800697e:	f7ff ff0c 	bl	800679a <I2C_WaitOnTXEFlagUntilTimeout>
 8006982:	b320      	cbz	r0, 80069ce <I2C_RequestMemoryRead+0x102>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006984:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006986:	2b04      	cmp	r3, #4
 8006988:	d01a      	beq.n	80069c0 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e7c2      	b.n	8006914 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	0a3a      	lsrs	r2, r7, #8
 8006992:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006994:	462a      	mov	r2, r5
 8006996:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006998:	4620      	mov	r0, r4
 800699a:	f7ff fefe 	bl	800679a <I2C_WaitOnTXEFlagUntilTimeout>
 800699e:	b158      	cbz	r0, 80069b8 <I2C_RequestMemoryRead+0xec>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d001      	beq.n	80069aa <I2C_RequestMemoryRead+0xde>
      return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e7b4      	b.n	8006914 <I2C_RequestMemoryRead+0x48>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069aa:	6822      	ldr	r2, [r4, #0]
 80069ac:	6813      	ldr	r3, [r2, #0]
 80069ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069b2:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e7ad      	b.n	8006914 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	b2ff      	uxtb	r7, r7
 80069bc:	611f      	str	r7, [r3, #16]
 80069be:	e7db      	b.n	8006978 <I2C_RequestMemoryRead+0xac>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c0:	6822      	ldr	r2, [r4, #0]
 80069c2:	6813      	ldr	r3, [r2, #0]
 80069c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069c8:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e7a2      	b.n	8006914 <I2C_RequestMemoryRead+0x48>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069ce:	6822      	ldr	r2, [r4, #0]
 80069d0:	6813      	ldr	r3, [r2, #0]
 80069d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d6:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069d8:	9500      	str	r5, [sp, #0]
 80069da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069dc:	2200      	movs	r2, #0
 80069de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069e2:	4620      	mov	r0, r4
 80069e4:	f7ff fe4f 	bl	8006686 <I2C_WaitOnFlagUntilTimeout>
 80069e8:	b148      	cbz	r0, 80069fe <I2C_RequestMemoryRead+0x132>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80069f2:	d016      	beq.n	8006a22 <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069f8:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e78a      	b.n	8006914 <I2C_RequestMemoryRead+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	f046 0601 	orr.w	r6, r6, #1
 8006a04:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a06:	462b      	mov	r3, r5
 8006a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a0a:	4907      	ldr	r1, [pc, #28]	; (8006a28 <I2C_RequestMemoryRead+0x15c>)
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f7ff fe72 	bl	80066f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2800      	cmp	r0, #0
 8006a16:	f43f af7d 	beq.w	8006914 <I2C_RequestMemoryRead+0x48>
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e77a      	b.n	8006914 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e778      	b.n	8006914 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e776      	b.n	8006914 <I2C_RequestMemoryRead+0x48>
 8006a26:	bf00      	nop
 8006a28:	00010002 	.word	0x00010002

08006a2c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	4604      	mov	r4, r0
 8006a30:	460d      	mov	r5, r1
 8006a32:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	f013 0f04 	tst.w	r3, #4
 8006a3c:	d11c      	bne.n	8006a78 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f7ff fe08 	bl	8006654 <I2C_IsAcknowledgeFailed>
 8006a44:	b9d0      	cbnz	r0, 8006a7c <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8006a46:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8006a4a:	d0f3      	beq.n	8006a34 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4c:	f7ff f88e 	bl	8005b6c <HAL_GetTick>
 8006a50:	1b80      	subs	r0, r0, r6
 8006a52:	42a8      	cmp	r0, r5
 8006a54:	d801      	bhi.n	8006a5a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8006a56:	2d00      	cmp	r5, #0
 8006a58:	d1ec      	bne.n	8006a34 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a68:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006a6a:	f042 0220 	orr.w	r2, r2, #32
 8006a6e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006a70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8006a74:	2001      	movs	r0, #1
 8006a76:	e000      	b.n	8006a7a <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8006a78:	2000      	movs	r0, #0
}
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	e7fc      	b.n	8006a7a <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08006a80 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	4605      	mov	r5, r0
 8006a84:	460c      	mov	r4, r1
 8006a86:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	695a      	ldr	r2, [r3, #20]
 8006a8c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006a90:	d129      	bne.n	8006ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a92:	695a      	ldr	r2, [r3, #20]
 8006a94:	f012 0f10 	tst.w	r2, #16
 8006a98:	d115      	bne.n	8006ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a9a:	f7ff f867 	bl	8005b6c <HAL_GetTick>
 8006a9e:	1b80      	subs	r0, r0, r6
 8006aa0:	42a0      	cmp	r0, r4
 8006aa2:	d801      	bhi.n	8006aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8006aa4:	2c00      	cmp	r4, #0
 8006aa6:	d1ef      	bne.n	8006a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006aac:	2220      	movs	r2, #32
 8006aae:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ab2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ab6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8006ab8:	f042 0220 	orr.w	r2, r2, #32
 8006abc:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006abe:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8006ac2:	2001      	movs	r0, #1
}
 8006ac4:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ac6:	f06f 0210 	mvn.w	r2, #16
 8006aca:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006acc:	2300      	movs	r3, #0
 8006ace:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ad6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ada:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8006adc:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006ade:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	e7ee      	b.n	8006ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	e7ec      	b.n	8006ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08006aec <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006aec:	2800      	cmp	r0, #0
 8006aee:	f000 80c8 	beq.w	8006c82 <HAL_I2C_Init+0x196>
{
 8006af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af4:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006af6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d075      	beq.n	8006bea <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006afe:	2324      	movs	r3, #36	; 0x24
 8006b00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8006b04:	6822      	ldr	r2, [r4, #0]
 8006b06:	6813      	ldr	r3, [r2, #0]
 8006b08:	f023 0301 	bic.w	r3, r3, #1
 8006b0c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006b0e:	6822      	ldr	r2, [r4, #0]
 8006b10:	6813      	ldr	r3, [r2, #0]
 8006b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b16:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006b18:	6822      	ldr	r2, [r4, #0]
 8006b1a:	6813      	ldr	r3, [r2, #0]
 8006b1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b20:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b22:	f000 fea7 	bl	8007874 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b26:	6862      	ldr	r2, [r4, #4]
 8006b28:	4b58      	ldr	r3, [pc, #352]	; (8006c8c <HAL_I2C_Init+0x1a0>)
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d862      	bhi.n	8006bf4 <HAL_I2C_Init+0x108>
 8006b2e:	4b58      	ldr	r3, [pc, #352]	; (8006c90 <HAL_I2C_Init+0x1a4>)
 8006b30:	4298      	cmp	r0, r3
 8006b32:	bf8c      	ite	hi
 8006b34:	2300      	movhi	r3, #0
 8006b36:	2301      	movls	r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f040 80a4 	bne.w	8006c86 <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 8006b3e:	4b55      	ldr	r3, [pc, #340]	; (8006c94 <HAL_I2C_Init+0x1a8>)
 8006b40:	fba3 2300 	umull	r2, r3, r3, r0
 8006b44:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b46:	6821      	ldr	r1, [r4, #0]
 8006b48:	684a      	ldr	r2, [r1, #4]
 8006b4a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b52:	6825      	ldr	r5, [r4, #0]
 8006b54:	6a2a      	ldr	r2, [r5, #32]
 8006b56:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006b5a:	6866      	ldr	r6, [r4, #4]
 8006b5c:	494b      	ldr	r1, [pc, #300]	; (8006c8c <HAL_I2C_Init+0x1a0>)
 8006b5e:	428e      	cmp	r6, r1
 8006b60:	d84e      	bhi.n	8006c00 <HAL_I2C_Init+0x114>
 8006b62:	3301      	adds	r3, #1
 8006b64:	4313      	orrs	r3, r2
 8006b66:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b68:	6825      	ldr	r5, [r4, #0]
 8006b6a:	69e9      	ldr	r1, [r5, #28]
 8006b6c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8006b70:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006b74:	6863      	ldr	r3, [r4, #4]
 8006b76:	4a45      	ldr	r2, [pc, #276]	; (8006c8c <HAL_I2C_Init+0x1a0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d84b      	bhi.n	8006c14 <HAL_I2C_Init+0x128>
 8006b7c:	3801      	subs	r0, #1
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b84:	3301      	adds	r3, #1
 8006b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	bf38      	it	cc
 8006b8e:	2304      	movcc	r3, #4
 8006b90:	430b      	orrs	r3, r1
 8006b92:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b94:	6821      	ldr	r1, [r4, #0]
 8006b96:	680b      	ldr	r3, [r1, #0]
 8006b98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b9c:	69e2      	ldr	r2, [r4, #28]
 8006b9e:	6a20      	ldr	r0, [r4, #32]
 8006ba0:	4302      	orrs	r2, r0
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ba6:	6821      	ldr	r1, [r4, #0]
 8006ba8:	688b      	ldr	r3, [r1, #8]
 8006baa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006bae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006bb2:	6922      	ldr	r2, [r4, #16]
 8006bb4:	68e0      	ldr	r0, [r4, #12]
 8006bb6:	4302      	orrs	r2, r0
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006bbc:	6821      	ldr	r1, [r4, #0]
 8006bbe:	68cb      	ldr	r3, [r1, #12]
 8006bc0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006bc4:	6962      	ldr	r2, [r4, #20]
 8006bc6:	69a0      	ldr	r0, [r4, #24]
 8006bc8:	4302      	orrs	r2, r0
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006bce:	6822      	ldr	r2, [r4, #0]
 8006bd0:	6813      	ldr	r3, [r2, #0]
 8006bd2:	f043 0301 	orr.w	r3, r3, #1
 8006bd6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bd8:	2000      	movs	r0, #0
 8006bda:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006bdc:	2320      	movs	r3, #32
 8006bde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006be2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006be4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8006be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006bea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8006bee:	f7fe f8b7 	bl	8004d60 <HAL_I2C_MspInit>
 8006bf2:	e784      	b.n	8006afe <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006bf4:	4b28      	ldr	r3, [pc, #160]	; (8006c98 <HAL_I2C_Init+0x1ac>)
 8006bf6:	4298      	cmp	r0, r3
 8006bf8:	bf8c      	ite	hi
 8006bfa:	2300      	movhi	r3, #0
 8006bfc:	2301      	movls	r3, #1
 8006bfe:	e79b      	b.n	8006b38 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006c00:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006c04:	fb01 f303 	mul.w	r3, r1, r3
 8006c08:	4924      	ldr	r1, [pc, #144]	; (8006c9c <HAL_I2C_Init+0x1b0>)
 8006c0a:	fba1 1303 	umull	r1, r3, r1, r3
 8006c0e:	099b      	lsrs	r3, r3, #6
 8006c10:	3301      	adds	r3, #1
 8006c12:	e7a7      	b.n	8006b64 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006c14:	68a2      	ldr	r2, [r4, #8]
 8006c16:	b9ba      	cbnz	r2, 8006c48 <HAL_I2C_Init+0x15c>
 8006c18:	1e46      	subs	r6, r0, #1
 8006c1a:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8006c1e:	fbb6 f6f7 	udiv	r6, r6, r7
 8006c22:	3601      	adds	r6, #1
 8006c24:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8006c28:	fab6 f686 	clz	r6, r6
 8006c2c:	0976      	lsrs	r6, r6, #5
 8006c2e:	bb36      	cbnz	r6, 8006c7e <HAL_I2C_Init+0x192>
 8006c30:	b9c2      	cbnz	r2, 8006c64 <HAL_I2C_Init+0x178>
 8006c32:	3801      	subs	r0, #1
 8006c34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006c38:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8006c42:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8006c46:	e7a3      	b.n	8006b90 <HAL_I2C_Init+0xa4>
 8006c48:	1e46      	subs	r6, r0, #1
 8006c4a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8006c4e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8006c52:	fbb6 f6f7 	udiv	r6, r6, r7
 8006c56:	3601      	adds	r6, #1
 8006c58:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8006c5c:	fab6 f686 	clz	r6, r6
 8006c60:	0976      	lsrs	r6, r6, #5
 8006c62:	e7e4      	b.n	8006c2e <HAL_I2C_Init+0x142>
 8006c64:	3801      	subs	r0, #1
 8006c66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c6e:	fbb0 f2f3 	udiv	r2, r0, r3
 8006c72:	3201      	adds	r2, #1
 8006c74:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006c78:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8006c7c:	e788      	b.n	8006b90 <HAL_I2C_Init+0xa4>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e786      	b.n	8006b90 <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 8006c82:	2001      	movs	r0, #1
}
 8006c84:	4770      	bx	lr
    return HAL_ERROR;
 8006c86:	2001      	movs	r0, #1
 8006c88:	e7ae      	b.n	8006be8 <HAL_I2C_Init+0xfc>
 8006c8a:	bf00      	nop
 8006c8c:	000186a0 	.word	0x000186a0
 8006c90:	001e847f 	.word	0x001e847f
 8006c94:	431bde83 	.word	0x431bde83
 8006c98:	003d08ff 	.word	0x003d08ff
 8006c9c:	10624dd3 	.word	0x10624dd3

08006ca0 <HAL_I2C_Mem_Write>:
{
 8006ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	460e      	mov	r6, r1
 8006caa:	4617      	mov	r7, r2
 8006cac:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8006cae:	f7fe ff5d 	bl	8005b6c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cb2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	d004      	beq.n	8006cc6 <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 8006cbc:	2302      	movs	r3, #2
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	b002      	add	sp, #8
 8006cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cc8:	9000      	str	r0, [sp, #0]
 8006cca:	2319      	movs	r3, #25
 8006ccc:	2201      	movs	r2, #1
 8006cce:	494c      	ldr	r1, [pc, #304]	; (8006e00 <HAL_I2C_Mem_Write+0x160>)
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f7ff fcd8 	bl	8006686 <I2C_WaitOnFlagUntilTimeout>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f040 808b 	bne.w	8006df2 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8006cdc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	f000 8088 	beq.w	8006df6 <HAL_I2C_Mem_Write+0x156>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	f012 0f01 	tst.w	r2, #1
 8006cf4:	d103      	bne.n	8006cfe <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	f042 0201 	orr.w	r2, r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cfe:	6822      	ldr	r2, [r4, #0]
 8006d00:	6813      	ldr	r3, [r2, #0]
 8006d02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d06:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d08:	2321      	movs	r3, #33	; 0x21
 8006d0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d0e:	2340      	movs	r3, #64	; 0x40
 8006d10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d14:	2300      	movs	r3, #0
 8006d16:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006d18:	9b08      	ldr	r3, [sp, #32]
 8006d1a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d1c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8006d20:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d24:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d26:	4b37      	ldr	r3, [pc, #220]	; (8006e04 <HAL_I2C_Mem_Write+0x164>)
 8006d28:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d2a:	9501      	str	r5, [sp, #4]
 8006d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	4643      	mov	r3, r8
 8006d32:	463a      	mov	r2, r7
 8006d34:	4631      	mov	r1, r6
 8006d36:	4620      	mov	r0, r4
 8006d38:	f7ff fd5a 	bl	80067f0 <I2C_RequestMemoryWrite>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d15c      	bne.n	8006dfa <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 8006d40:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d034      	beq.n	8006db0 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d46:	462a      	mov	r2, r5
 8006d48:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f7ff fd25 	bl	800679a <I2C_WaitOnTXEFlagUntilTimeout>
 8006d50:	bb10      	cbnz	r0, 8006d98 <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	7812      	ldrb	r2, [r2, #0]
 8006d58:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006d5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006d5c:	1c4b      	adds	r3, r1, #1
 8006d5e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006d60:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006d68:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006d6a:	3a01      	subs	r2, #1
 8006d6c:	b292      	uxth	r2, r2
 8006d6e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006d70:	6822      	ldr	r2, [r4, #0]
 8006d72:	6950      	ldr	r0, [r2, #20]
 8006d74:	f010 0f04 	tst.w	r0, #4
 8006d78:	d0e2      	beq.n	8006d40 <HAL_I2C_Mem_Write+0xa0>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0e0      	beq.n	8006d40 <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d7e:	784b      	ldrb	r3, [r1, #1]
 8006d80:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8006d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d84:	3301      	adds	r3, #1
 8006d86:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006d88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006d8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006d96:	e7d3      	b.n	8006d40 <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	d001      	beq.n	8006da2 <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e78d      	b.n	8006cbe <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da2:	6822      	ldr	r2, [r4, #0]
 8006da4:	6813      	ldr	r3, [r2, #0]
 8006da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006daa:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e786      	b.n	8006cbe <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006db0:	462a      	mov	r2, r5
 8006db2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006db4:	4620      	mov	r0, r4
 8006db6:	f7ff fe39 	bl	8006a2c <I2C_WaitOnBTFFlagUntilTimeout>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	b158      	cbz	r0, 8006dd6 <HAL_I2C_Mem_Write+0x136>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d001      	beq.n	8006dc8 <HAL_I2C_Mem_Write+0x128>
      return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e77a      	b.n	8006cbe <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc8:	6822      	ldr	r2, [r4, #0]
 8006dca:	6813      	ldr	r3, [r2, #0]
 8006dcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dd0:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e773      	b.n	8006cbe <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dd6:	6821      	ldr	r1, [r4, #0]
 8006dd8:	680a      	ldr	r2, [r1, #0]
 8006dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dde:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006de0:	2220      	movs	r2, #32
 8006de2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006de6:	2200      	movs	r2, #0
 8006de8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8006dec:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 8006df0:	e765      	b.n	8006cbe <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 8006df2:	2302      	movs	r3, #2
 8006df4:	e763      	b.n	8006cbe <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 8006df6:	2302      	movs	r3, #2
 8006df8:	e761      	b.n	8006cbe <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e75f      	b.n	8006cbe <HAL_I2C_Mem_Write+0x1e>
 8006dfe:	bf00      	nop
 8006e00:	00100002 	.word	0x00100002
 8006e04:	ffff0000 	.word	0xffff0000

08006e08 <HAL_I2C_Mem_Read>:
{
 8006e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0c:	b086      	sub	sp, #24
 8006e0e:	4604      	mov	r4, r0
 8006e10:	460e      	mov	r6, r1
 8006e12:	4617      	mov	r7, r2
 8006e14:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8006e16:	f7fe fea9 	bl	8005b6c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e1a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	d004      	beq.n	8006e2e <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8006e24:	2602      	movs	r6, #2
}
 8006e26:	4630      	mov	r0, r6
 8006e28:	b006      	add	sp, #24
 8006e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e2e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e30:	9000      	str	r0, [sp, #0]
 8006e32:	2319      	movs	r3, #25
 8006e34:	2201      	movs	r2, #1
 8006e36:	499e      	ldr	r1, [pc, #632]	; (80070b0 <HAL_I2C_Mem_Read+0x2a8>)
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f7ff fc24 	bl	8006686 <I2C_WaitOnFlagUntilTimeout>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	f040 8134 	bne.w	80070ac <HAL_I2C_Mem_Read+0x2a4>
    __HAL_LOCK(hi2c);
 8006e44:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	f000 8137 	beq.w	80070bc <HAL_I2C_Mem_Read+0x2b4>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	f012 0f01 	tst.w	r2, #1
 8006e5c:	d103      	bne.n	8006e66 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	f042 0201 	orr.w	r2, r2, #1
 8006e64:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e66:	6822      	ldr	r2, [r4, #0]
 8006e68:	6813      	ldr	r3, [r2, #0]
 8006e6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e6e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e70:	2322      	movs	r3, #34	; 0x22
 8006e72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e76:	2340      	movs	r3, #64	; 0x40
 8006e78:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006e80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e82:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e84:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8006e88:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006e8c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e8e:	4b89      	ldr	r3, [pc, #548]	; (80070b4 <HAL_I2C_Mem_Read+0x2ac>)
 8006e90:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e92:	9501      	str	r5, [sp, #4]
 8006e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	4643      	mov	r3, r8
 8006e9a:	463a      	mov	r2, r7
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f7ff fd14 	bl	80068cc <I2C_RequestMemoryRead>
 8006ea4:	4606      	mov	r6, r0
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	f040 810a 	bne.w	80070c0 <HAL_I2C_Mem_Read+0x2b8>
    if (hi2c->XferSize == 0U)
 8006eac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006eae:	b95b      	cbnz	r3, 8006ec8 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eb0:	9302      	str	r3, [sp, #8]
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	695a      	ldr	r2, [r3, #20]
 8006eb6:	9202      	str	r2, [sp, #8]
 8006eb8:	699a      	ldr	r2, [r3, #24]
 8006eba:	9202      	str	r2, [sp, #8]
 8006ebc:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	e072      	b.n	8006fae <HAL_I2C_Mem_Read+0x1a6>
    else if (hi2c->XferSize == 1U)
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d00a      	beq.n	8006ee2 <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d01a      	beq.n	8006f06 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	9305      	str	r3, [sp, #20]
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	695a      	ldr	r2, [r3, #20]
 8006ed8:	9205      	str	r2, [sp, #20]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	9305      	str	r3, [sp, #20]
 8006ede:	9b05      	ldr	r3, [sp, #20]
 8006ee0:	e065      	b.n	8006fae <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee2:	6822      	ldr	r2, [r4, #0]
 8006ee4:	6813      	ldr	r3, [r2, #0]
 8006ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eea:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eec:	2300      	movs	r3, #0
 8006eee:	9303      	str	r3, [sp, #12]
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	695a      	ldr	r2, [r3, #20]
 8006ef4:	9203      	str	r2, [sp, #12]
 8006ef6:	699a      	ldr	r2, [r3, #24]
 8006ef8:	9203      	str	r2, [sp, #12]
 8006efa:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	e053      	b.n	8006fae <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f06:	6822      	ldr	r2, [r4, #0]
 8006f08:	6813      	ldr	r3, [r2, #0]
 8006f0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f0e:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f10:	6822      	ldr	r2, [r4, #0]
 8006f12:	6813      	ldr	r3, [r2, #0]
 8006f14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f18:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	9304      	str	r3, [sp, #16]
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	695a      	ldr	r2, [r3, #20]
 8006f22:	9204      	str	r2, [sp, #16]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	9304      	str	r3, [sp, #16]
 8006f28:	9b04      	ldr	r3, [sp, #16]
 8006f2a:	e040      	b.n	8006fae <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f2c:	462a      	mov	r2, r5
 8006f2e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006f30:	4620      	mov	r0, r4
 8006f32:	f7ff fda5 	bl	8006a80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	f040 80c4 	bne.w	80070c4 <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	691a      	ldr	r2, [r3, #16]
 8006f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f42:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f46:	3301      	adds	r3, #1
 8006f48:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006f4a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006f50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f52:	3b01      	subs	r3, #1
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006f58:	e029      	b.n	8006fae <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f5a:	9500      	str	r5, [sp, #0]
 8006f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f5e:	2200      	movs	r2, #0
 8006f60:	4955      	ldr	r1, [pc, #340]	; (80070b8 <HAL_I2C_Mem_Read+0x2b0>)
 8006f62:	4620      	mov	r0, r4
 8006f64:	f7ff fb8f 	bl	8006686 <I2C_WaitOnFlagUntilTimeout>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	f040 80ad 	bne.w	80070c8 <HAL_I2C_Mem_Read+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f6e:	6822      	ldr	r2, [r4, #0]
 8006f70:	6813      	ldr	r3, [r2, #0]
 8006f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f76:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f7e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006f80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f82:	1c53      	adds	r3, r2, #1
 8006f84:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006f86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006f8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006fa0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006fa6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006fae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d072      	beq.n	800709a <HAL_I2C_Mem_Read+0x292>
      if (hi2c->XferSize <= 3U)
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d849      	bhi.n	800704c <HAL_I2C_Mem_Read+0x244>
        if (hi2c->XferSize == 1U)
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d0b7      	beq.n	8006f2c <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d0cc      	beq.n	8006f5a <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fc0:	9500      	str	r5, [sp, #0]
 8006fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	493c      	ldr	r1, [pc, #240]	; (80070b8 <HAL_I2C_Mem_Read+0x2b0>)
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f7ff fb5c 	bl	8006686 <I2C_WaitOnFlagUntilTimeout>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	d17c      	bne.n	80070cc <HAL_I2C_Mem_Read+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fd2:	6822      	ldr	r2, [r4, #0]
 8006fd4:	6813      	ldr	r3, [r2, #0]
 8006fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fda:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fe2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006fea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006fec:	3b01      	subs	r3, #1
 8006fee:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006ff0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ff8:	9500      	str	r5, [sp, #0]
 8006ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	492e      	ldr	r1, [pc, #184]	; (80070b8 <HAL_I2C_Mem_Read+0x2b0>)
 8007000:	4620      	mov	r0, r4
 8007002:	f7ff fb40 	bl	8006686 <I2C_WaitOnFlagUntilTimeout>
 8007006:	2800      	cmp	r0, #0
 8007008:	d162      	bne.n	80070d0 <HAL_I2C_Mem_Read+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800700a:	6822      	ldr	r2, [r4, #0]
 800700c:	6813      	ldr	r3, [r2, #0]
 800700e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007012:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	691a      	ldr	r2, [r3, #16]
 8007018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800701a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800701c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800701e:	1c53      	adds	r3, r2, #1
 8007020:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8007022:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007024:	3b01      	subs	r3, #1
 8007026:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007028:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800702a:	3b01      	subs	r3, #1
 800702c:	b29b      	uxth	r3, r3
 800702e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8007036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007038:	3301      	adds	r3, #1
 800703a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800703c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800703e:	3b01      	subs	r3, #1
 8007040:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007042:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007044:	3b01      	subs	r3, #1
 8007046:	b29b      	uxth	r3, r3
 8007048:	8563      	strh	r3, [r4, #42]	; 0x2a
 800704a:	e7b0      	b.n	8006fae <HAL_I2C_Mem_Read+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800704c:	462a      	mov	r2, r5
 800704e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007050:	4620      	mov	r0, r4
 8007052:	f7ff fd15 	bl	8006a80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007056:	2800      	cmp	r0, #0
 8007058:	d13c      	bne.n	80070d4 <HAL_I2C_Mem_Read+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	691a      	ldr	r2, [r3, #16]
 800705e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007060:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007062:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007064:	1c53      	adds	r3, r2, #1
 8007066:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8007068:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800706a:	3b01      	subs	r3, #1
 800706c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800706e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007070:	3b01      	subs	r3, #1
 8007072:	b29b      	uxth	r3, r3
 8007074:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	6959      	ldr	r1, [r3, #20]
 800707a:	f011 0f04 	tst.w	r1, #4
 800707e:	d096      	beq.n	8006fae <HAL_I2C_Mem_Read+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8007084:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007086:	3301      	adds	r3, #1
 8007088:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800708a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800708c:	3b01      	subs	r3, #1
 800708e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8007090:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007092:	3b01      	subs	r3, #1
 8007094:	b29b      	uxth	r3, r3
 8007096:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007098:	e789      	b.n	8006fae <HAL_I2C_Mem_Read+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800709a:	2320      	movs	r3, #32
 800709c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a0:	2300      	movs	r3, #0
 80070a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80070a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80070aa:	e6bc      	b.n	8006e26 <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 80070ac:	2602      	movs	r6, #2
 80070ae:	e6ba      	b.n	8006e26 <HAL_I2C_Mem_Read+0x1e>
 80070b0:	00100002 	.word	0x00100002
 80070b4:	ffff0000 	.word	0xffff0000
 80070b8:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 80070bc:	2602      	movs	r6, #2
 80070be:	e6b2      	b.n	8006e26 <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 80070c0:	2601      	movs	r6, #1
 80070c2:	e6b0      	b.n	8006e26 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80070c4:	2601      	movs	r6, #1
 80070c6:	e6ae      	b.n	8006e26 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80070c8:	2601      	movs	r6, #1
 80070ca:	e6ac      	b.n	8006e26 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80070cc:	2601      	movs	r6, #1
 80070ce:	e6aa      	b.n	8006e26 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80070d0:	2601      	movs	r6, #1
 80070d2:	e6a8      	b.n	8006e26 <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 80070d4:	2601      	movs	r6, #1
 80070d6:	e6a6      	b.n	8006e26 <HAL_I2C_Mem_Read+0x1e>

080070d8 <HAL_I2C_IsDeviceReady>:
{
 80070d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070dc:	b085      	sub	sp, #20
 80070de:	4604      	mov	r4, r0
 80070e0:	4688      	mov	r8, r1
 80070e2:	4691      	mov	r9, r2
 80070e4:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80070e6:	f7fe fd41 	bl	8005b6c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80070ea:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d004      	beq.n	80070fe <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 80070f4:	2302      	movs	r3, #2
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	b005      	add	sp, #20
 80070fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070fe:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007100:	9000      	str	r0, [sp, #0]
 8007102:	2319      	movs	r3, #25
 8007104:	2201      	movs	r2, #1
 8007106:	4959      	ldr	r1, [pc, #356]	; (800726c <HAL_I2C_IsDeviceReady+0x194>)
 8007108:	4620      	mov	r0, r4
 800710a:	f7ff fabc 	bl	8006686 <I2C_WaitOnFlagUntilTimeout>
 800710e:	2800      	cmp	r0, #0
 8007110:	f040 80a1 	bne.w	8007256 <HAL_I2C_IsDeviceReady+0x17e>
    __HAL_LOCK(hi2c);
 8007114:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007118:	2b01      	cmp	r3, #1
 800711a:	f000 809e 	beq.w	800725a <HAL_I2C_IsDeviceReady+0x182>
 800711e:	2301      	movs	r3, #1
 8007120:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	f012 0f01 	tst.w	r2, #1
 800712c:	d103      	bne.n	8007136 <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	f042 0201 	orr.w	r2, r2, #1
 8007134:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007136:	6822      	ldr	r2, [r4, #0]
 8007138:	6813      	ldr	r3, [r2, #0]
 800713a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800713e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007140:	2324      	movs	r3, #36	; 0x24
 8007142:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007146:	2300      	movs	r3, #0
 8007148:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800714a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800714e:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8007150:	2701      	movs	r7, #1
 8007152:	e03e      	b.n	80071d2 <HAL_I2C_IsDeviceReady+0xfa>
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f413 7f80 	tst.w	r3, #256	; 0x100
 800715c:	d07f      	beq.n	800725e <HAL_I2C_IsDeviceReady+0x186>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800715e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007162:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e7c6      	b.n	80070f6 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007168:	23a0      	movs	r3, #160	; 0xa0
 800716a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	695a      	ldr	r2, [r3, #20]
 8007172:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007176:	6959      	ldr	r1, [r3, #20]
 8007178:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800717c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2ba0      	cmp	r3, #160	; 0xa0
 8007184:	d009      	beq.n	800719a <HAL_I2C_IsDeviceReady+0xc2>
 8007186:	b942      	cbnz	r2, 800719a <HAL_I2C_IsDeviceReady+0xc2>
 8007188:	b939      	cbnz	r1, 800719a <HAL_I2C_IsDeviceReady+0xc2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800718a:	f7fe fcef 	bl	8005b6c <HAL_GetTick>
 800718e:	1b80      	subs	r0, r0, r6
 8007190:	42a8      	cmp	r0, r5
 8007192:	d8e9      	bhi.n	8007168 <HAL_I2C_IsDeviceReady+0x90>
 8007194:	2d00      	cmp	r5, #0
 8007196:	d1ea      	bne.n	800716e <HAL_I2C_IsDeviceReady+0x96>
 8007198:	e7e6      	b.n	8007168 <HAL_I2C_IsDeviceReady+0x90>
      hi2c->State = HAL_I2C_STATE_READY;
 800719a:	2320      	movs	r3, #32
 800719c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	695a      	ldr	r2, [r3, #20]
 80071a4:	f012 0f02 	tst.w	r2, #2
 80071a8:	d131      	bne.n	800720e <HAL_I2C_IsDeviceReady+0x136>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071b8:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071ba:	9600      	str	r6, [sp, #0]
 80071bc:	2319      	movs	r3, #25
 80071be:	2201      	movs	r2, #1
 80071c0:	492a      	ldr	r1, [pc, #168]	; (800726c <HAL_I2C_IsDeviceReady+0x194>)
 80071c2:	4620      	mov	r0, r4
 80071c4:	f7ff fa5f 	bl	8006686 <I2C_WaitOnFlagUntilTimeout>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d14c      	bne.n	8007266 <HAL_I2C_IsDeviceReady+0x18e>
      I2C_Trials++;
 80071cc:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80071ce:	454f      	cmp	r7, r9
 80071d0:	d239      	bcs.n	8007246 <HAL_I2C_IsDeviceReady+0x16e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071d2:	6822      	ldr	r2, [r4, #0]
 80071d4:	6813      	ldr	r3, [r2, #0]
 80071d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071da:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80071dc:	9600      	str	r6, [sp, #0]
 80071de:	462b      	mov	r3, r5
 80071e0:	2200      	movs	r2, #0
 80071e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071e6:	4620      	mov	r0, r4
 80071e8:	f7ff fa4d 	bl	8006686 <I2C_WaitOnFlagUntilTimeout>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	d1b1      	bne.n	8007154 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 80071f6:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80071f8:	f7fe fcb8 	bl	8005b6c <HAL_GetTick>
 80071fc:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	695a      	ldr	r2, [r3, #20]
 8007202:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007206:	6959      	ldr	r1, [r3, #20]
 8007208:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800720c:	e7b6      	b.n	800717c <HAL_I2C_IsDeviceReady+0xa4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007214:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007216:	2300      	movs	r3, #0
 8007218:	9303      	str	r3, [sp, #12]
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	695a      	ldr	r2, [r3, #20]
 800721e:	9203      	str	r2, [sp, #12]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	9303      	str	r3, [sp, #12]
 8007224:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007226:	9600      	str	r6, [sp, #0]
 8007228:	2319      	movs	r3, #25
 800722a:	2201      	movs	r2, #1
 800722c:	490f      	ldr	r1, [pc, #60]	; (800726c <HAL_I2C_IsDeviceReady+0x194>)
 800722e:	4620      	mov	r0, r4
 8007230:	f7ff fa29 	bl	8006686 <I2C_WaitOnFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	b9a0      	cbnz	r0, 8007262 <HAL_I2C_IsDeviceReady+0x18a>
        hi2c->State = HAL_I2C_STATE_READY;
 8007238:	2220      	movs	r2, #32
 800723a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800723e:	2200      	movs	r2, #0
 8007240:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8007244:	e757      	b.n	80070f6 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007246:	2320      	movs	r3, #32
 8007248:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800724c:	2300      	movs	r3, #0
 800724e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e74f      	b.n	80070f6 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8007256:	2302      	movs	r3, #2
 8007258:	e74d      	b.n	80070f6 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 800725a:	2302      	movs	r3, #2
 800725c:	e74b      	b.n	80070f6 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e749      	b.n	80070f6 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e747      	b.n	80070f6 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e745      	b.n	80070f6 <HAL_I2C_IsDeviceReady+0x1e>
 800726a:	bf00      	nop
 800726c:	00100002 	.word	0x00100002

08007270 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007270:	2800      	cmp	r0, #0
 8007272:	f000 81e0 	beq.w	8007636 <HAL_RCC_OscConfig+0x3c6>
{
 8007276:	b570      	push	{r4, r5, r6, lr}
 8007278:	b082      	sub	sp, #8
 800727a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800727c:	6803      	ldr	r3, [r0, #0]
 800727e:	f013 0f01 	tst.w	r3, #1
 8007282:	d03b      	beq.n	80072fc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007284:	4ba5      	ldr	r3, [pc, #660]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f003 030c 	and.w	r3, r3, #12
 800728c:	2b04      	cmp	r3, #4
 800728e:	d02c      	beq.n	80072ea <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007290:	4ba2      	ldr	r3, [pc, #648]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007298:	2b08      	cmp	r3, #8
 800729a:	d021      	beq.n	80072e0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800729c:	6863      	ldr	r3, [r4, #4]
 800729e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a2:	d04f      	beq.n	8007344 <HAL_RCC_OscConfig+0xd4>
 80072a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072a8:	d052      	beq.n	8007350 <HAL_RCC_OscConfig+0xe0>
 80072aa:	4b9c      	ldr	r3, [pc, #624]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072bc:	6863      	ldr	r3, [r4, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d050      	beq.n	8007364 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072c2:	f7fe fc53 	bl	8005b6c <HAL_GetTick>
 80072c6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072c8:	4b94      	ldr	r3, [pc, #592]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80072d0:	d114      	bne.n	80072fc <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072d2:	f7fe fc4b 	bl	8005b6c <HAL_GetTick>
 80072d6:	1b40      	subs	r0, r0, r5
 80072d8:	2864      	cmp	r0, #100	; 0x64
 80072da:	d9f5      	bls.n	80072c8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80072dc:	2003      	movs	r0, #3
 80072de:	e1af      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072e0:	4b8e      	ldr	r3, [pc, #568]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80072e8:	d0d8      	beq.n	800729c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072ea:	4b8c      	ldr	r3, [pc, #560]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80072f2:	d003      	beq.n	80072fc <HAL_RCC_OscConfig+0x8c>
 80072f4:	6863      	ldr	r3, [r4, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 819f 	beq.w	800763a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	f013 0f02 	tst.w	r3, #2
 8007302:	d055      	beq.n	80073b0 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007304:	4b85      	ldr	r3, [pc, #532]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f013 0f0c 	tst.w	r3, #12
 800730c:	d03e      	beq.n	800738c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800730e:	4b83      	ldr	r3, [pc, #524]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007316:	2b08      	cmp	r3, #8
 8007318:	d033      	beq.n	8007382 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800731a:	68e3      	ldr	r3, [r4, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d068      	beq.n	80073f2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007320:	4b7f      	ldr	r3, [pc, #508]	; (8007520 <HAL_RCC_OscConfig+0x2b0>)
 8007322:	2201      	movs	r2, #1
 8007324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007326:	f7fe fc21 	bl	8005b6c <HAL_GetTick>
 800732a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800732c:	4b7b      	ldr	r3, [pc, #492]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f013 0f02 	tst.w	r3, #2
 8007334:	d154      	bne.n	80073e0 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007336:	f7fe fc19 	bl	8005b6c <HAL_GetTick>
 800733a:	1b40      	subs	r0, r0, r5
 800733c:	2802      	cmp	r0, #2
 800733e:	d9f5      	bls.n	800732c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8007340:	2003      	movs	r0, #3
 8007342:	e17d      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007344:	4a75      	ldr	r2, [pc, #468]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 8007346:	6813      	ldr	r3, [r2, #0]
 8007348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	e7b5      	b.n	80072bc <HAL_RCC_OscConfig+0x4c>
 8007350:	4b72      	ldr	r3, [pc, #456]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	e7ab      	b.n	80072bc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8007364:	f7fe fc02 	bl	8005b6c <HAL_GetTick>
 8007368:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800736a:	4b6c      	ldr	r3, [pc, #432]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007372:	d0c3      	beq.n	80072fc <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007374:	f7fe fbfa 	bl	8005b6c <HAL_GetTick>
 8007378:	1b40      	subs	r0, r0, r5
 800737a:	2864      	cmp	r0, #100	; 0x64
 800737c:	d9f5      	bls.n	800736a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800737e:	2003      	movs	r0, #3
 8007380:	e15e      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007382:	4b66      	ldr	r3, [pc, #408]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800738a:	d1c6      	bne.n	800731a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800738c:	4b63      	ldr	r3, [pc, #396]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f013 0f02 	tst.w	r3, #2
 8007394:	d004      	beq.n	80073a0 <HAL_RCC_OscConfig+0x130>
 8007396:	68e3      	ldr	r3, [r4, #12]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d001      	beq.n	80073a0 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 800739c:	2001      	movs	r0, #1
 800739e:	e14f      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073a0:	4a5e      	ldr	r2, [pc, #376]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 80073a2:	6813      	ldr	r3, [r2, #0]
 80073a4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80073a8:	6921      	ldr	r1, [r4, #16]
 80073aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80073ae:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	f013 0f08 	tst.w	r3, #8
 80073b6:	d040      	beq.n	800743a <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073b8:	6963      	ldr	r3, [r4, #20]
 80073ba:	b363      	cbz	r3, 8007416 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073bc:	4b59      	ldr	r3, [pc, #356]	; (8007524 <HAL_RCC_OscConfig+0x2b4>)
 80073be:	2201      	movs	r2, #1
 80073c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c2:	f7fe fbd3 	bl	8005b6c <HAL_GetTick>
 80073c6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073c8:	4b54      	ldr	r3, [pc, #336]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 80073ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073cc:	f013 0f02 	tst.w	r3, #2
 80073d0:	d133      	bne.n	800743a <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073d2:	f7fe fbcb 	bl	8005b6c <HAL_GetTick>
 80073d6:	1b40      	subs	r0, r0, r5
 80073d8:	2802      	cmp	r0, #2
 80073da:	d9f5      	bls.n	80073c8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80073dc:	2003      	movs	r0, #3
 80073de:	e12f      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073e0:	4a4e      	ldr	r2, [pc, #312]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 80073e2:	6813      	ldr	r3, [r2, #0]
 80073e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80073e8:	6921      	ldr	r1, [r4, #16]
 80073ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	e7de      	b.n	80073b0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80073f2:	4b4b      	ldr	r3, [pc, #300]	; (8007520 <HAL_RCC_OscConfig+0x2b0>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80073f8:	f7fe fbb8 	bl	8005b6c <HAL_GetTick>
 80073fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073fe:	4b47      	ldr	r3, [pc, #284]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f013 0f02 	tst.w	r3, #2
 8007406:	d0d3      	beq.n	80073b0 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007408:	f7fe fbb0 	bl	8005b6c <HAL_GetTick>
 800740c:	1b40      	subs	r0, r0, r5
 800740e:	2802      	cmp	r0, #2
 8007410:	d9f5      	bls.n	80073fe <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8007412:	2003      	movs	r0, #3
 8007414:	e114      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007416:	4b43      	ldr	r3, [pc, #268]	; (8007524 <HAL_RCC_OscConfig+0x2b4>)
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800741c:	f7fe fba6 	bl	8005b6c <HAL_GetTick>
 8007420:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007422:	4b3e      	ldr	r3, [pc, #248]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 8007424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007426:	f013 0f02 	tst.w	r3, #2
 800742a:	d006      	beq.n	800743a <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800742c:	f7fe fb9e 	bl	8005b6c <HAL_GetTick>
 8007430:	1b40      	subs	r0, r0, r5
 8007432:	2802      	cmp	r0, #2
 8007434:	d9f5      	bls.n	8007422 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8007436:	2003      	movs	r0, #3
 8007438:	e102      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	f013 0f04 	tst.w	r3, #4
 8007440:	d075      	beq.n	800752e <HAL_RCC_OscConfig+0x2be>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007442:	4b36      	ldr	r3, [pc, #216]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800744a:	d131      	bne.n	80074b0 <HAL_RCC_OscConfig+0x240>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800744c:	2300      	movs	r3, #0
 800744e:	9301      	str	r3, [sp, #4]
 8007450:	4b32      	ldr	r3, [pc, #200]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 8007452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007454:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007458:	641a      	str	r2, [r3, #64]	; 0x40
 800745a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007460:	9301      	str	r3, [sp, #4]
 8007462:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007464:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007466:	4b30      	ldr	r3, [pc, #192]	; (8007528 <HAL_RCC_OscConfig+0x2b8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800746e:	d021      	beq.n	80074b4 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007470:	68a3      	ldr	r3, [r4, #8]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d032      	beq.n	80074dc <HAL_RCC_OscConfig+0x26c>
 8007476:	2b05      	cmp	r3, #5
 8007478:	d036      	beq.n	80074e8 <HAL_RCC_OscConfig+0x278>
 800747a:	4b28      	ldr	r3, [pc, #160]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 800747c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800747e:	f022 0201 	bic.w	r2, r2, #1
 8007482:	671a      	str	r2, [r3, #112]	; 0x70
 8007484:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007486:	f022 0204 	bic.w	r2, r2, #4
 800748a:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800748c:	68a3      	ldr	r3, [r4, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d034      	beq.n	80074fc <HAL_RCC_OscConfig+0x28c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007492:	f7fe fb6b 	bl	8005b6c <HAL_GetTick>
 8007496:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007498:	4b20      	ldr	r3, [pc, #128]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 800749a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749c:	f013 0f02 	tst.w	r3, #2
 80074a0:	d144      	bne.n	800752c <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074a2:	f7fe fb63 	bl	8005b6c <HAL_GetTick>
 80074a6:	1b80      	subs	r0, r0, r6
 80074a8:	2864      	cmp	r0, #100	; 0x64
 80074aa:	d9f5      	bls.n	8007498 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 80074ac:	2003      	movs	r0, #3
 80074ae:	e0c7      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 80074b0:	2500      	movs	r5, #0
 80074b2:	e7d8      	b.n	8007466 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074b4:	4a1c      	ldr	r2, [pc, #112]	; (8007528 <HAL_RCC_OscConfig+0x2b8>)
 80074b6:	6813      	ldr	r3, [r2, #0]
 80074b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074bc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80074be:	f7fe fb55 	bl	8005b6c <HAL_GetTick>
 80074c2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074c4:	4b18      	ldr	r3, [pc, #96]	; (8007528 <HAL_RCC_OscConfig+0x2b8>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80074cc:	d1d0      	bne.n	8007470 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074ce:	f7fe fb4d 	bl	8005b6c <HAL_GetTick>
 80074d2:	1b80      	subs	r0, r0, r6
 80074d4:	2802      	cmp	r0, #2
 80074d6:	d9f5      	bls.n	80074c4 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 80074d8:	2003      	movs	r0, #3
 80074da:	e0b1      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074dc:	4a0f      	ldr	r2, [pc, #60]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 80074de:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80074e0:	f043 0301 	orr.w	r3, r3, #1
 80074e4:	6713      	str	r3, [r2, #112]	; 0x70
 80074e6:	e7d1      	b.n	800748c <HAL_RCC_OscConfig+0x21c>
 80074e8:	4b0c      	ldr	r3, [pc, #48]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 80074ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074ec:	f042 0204 	orr.w	r2, r2, #4
 80074f0:	671a      	str	r2, [r3, #112]	; 0x70
 80074f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074f4:	f042 0201 	orr.w	r2, r2, #1
 80074f8:	671a      	str	r2, [r3, #112]	; 0x70
 80074fa:	e7c7      	b.n	800748c <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074fc:	f7fe fb36 	bl	8005b6c <HAL_GetTick>
 8007500:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007502:	4b06      	ldr	r3, [pc, #24]	; (800751c <HAL_RCC_OscConfig+0x2ac>)
 8007504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007506:	f013 0f02 	tst.w	r3, #2
 800750a:	d00f      	beq.n	800752c <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800750c:	f7fe fb2e 	bl	8005b6c <HAL_GetTick>
 8007510:	1b80      	subs	r0, r0, r6
 8007512:	2864      	cmp	r0, #100	; 0x64
 8007514:	d9f5      	bls.n	8007502 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8007516:	2003      	movs	r0, #3
 8007518:	e092      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
 800751a:	bf00      	nop
 800751c:	40023800 	.word	0x40023800
 8007520:	42470000 	.word	0x42470000
 8007524:	42470e80 	.word	0x42470e80
 8007528:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800752c:	b9ed      	cbnz	r5, 800756a <HAL_RCC_OscConfig+0x2fa>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800752e:	69a3      	ldr	r3, [r4, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 8084 	beq.w	800763e <HAL_RCC_OscConfig+0x3ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007536:	4a45      	ldr	r2, [pc, #276]	; (800764c <HAL_RCC_OscConfig+0x3dc>)
 8007538:	6892      	ldr	r2, [r2, #8]
 800753a:	f002 020c 	and.w	r2, r2, #12
 800753e:	2a08      	cmp	r2, #8
 8007540:	d051      	beq.n	80075e6 <HAL_RCC_OscConfig+0x376>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007542:	2b02      	cmp	r3, #2
 8007544:	d017      	beq.n	8007576 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007546:	4b42      	ldr	r3, [pc, #264]	; (8007650 <HAL_RCC_OscConfig+0x3e0>)
 8007548:	2200      	movs	r2, #0
 800754a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800754c:	f7fe fb0e 	bl	8005b6c <HAL_GetTick>
 8007550:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007552:	4b3e      	ldr	r3, [pc, #248]	; (800764c <HAL_RCC_OscConfig+0x3dc>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800755a:	d042      	beq.n	80075e2 <HAL_RCC_OscConfig+0x372>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800755c:	f7fe fb06 	bl	8005b6c <HAL_GetTick>
 8007560:	1b00      	subs	r0, r0, r4
 8007562:	2802      	cmp	r0, #2
 8007564:	d9f5      	bls.n	8007552 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007566:	2003      	movs	r0, #3
 8007568:	e06a      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_DISABLE();
 800756a:	4a38      	ldr	r2, [pc, #224]	; (800764c <HAL_RCC_OscConfig+0x3dc>)
 800756c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800756e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007572:	6413      	str	r3, [r2, #64]	; 0x40
 8007574:	e7db      	b.n	800752e <HAL_RCC_OscConfig+0x2be>
        __HAL_RCC_PLL_DISABLE();
 8007576:	4b36      	ldr	r3, [pc, #216]	; (8007650 <HAL_RCC_OscConfig+0x3e0>)
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800757c:	f7fe faf6 	bl	8005b6c <HAL_GetTick>
 8007580:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007582:	4b32      	ldr	r3, [pc, #200]	; (800764c <HAL_RCC_OscConfig+0x3dc>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800758a:	d006      	beq.n	800759a <HAL_RCC_OscConfig+0x32a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800758c:	f7fe faee 	bl	8005b6c <HAL_GetTick>
 8007590:	1b40      	subs	r0, r0, r5
 8007592:	2802      	cmp	r0, #2
 8007594:	d9f5      	bls.n	8007582 <HAL_RCC_OscConfig+0x312>
            return HAL_TIMEOUT;
 8007596:	2003      	movs	r0, #3
 8007598:	e052      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800759a:	69e3      	ldr	r3, [r4, #28]
 800759c:	6a22      	ldr	r2, [r4, #32]
 800759e:	4313      	orrs	r3, r2
 80075a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80075a2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80075a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80075a8:	0852      	lsrs	r2, r2, #1
 80075aa:	3a01      	subs	r2, #1
 80075ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80075b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80075b6:	4a25      	ldr	r2, [pc, #148]	; (800764c <HAL_RCC_OscConfig+0x3dc>)
 80075b8:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80075ba:	4b25      	ldr	r3, [pc, #148]	; (8007650 <HAL_RCC_OscConfig+0x3e0>)
 80075bc:	2201      	movs	r2, #1
 80075be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80075c0:	f7fe fad4 	bl	8005b6c <HAL_GetTick>
 80075c4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075c6:	4b21      	ldr	r3, [pc, #132]	; (800764c <HAL_RCC_OscConfig+0x3dc>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80075ce:	d106      	bne.n	80075de <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075d0:	f7fe facc 	bl	8005b6c <HAL_GetTick>
 80075d4:	1b00      	subs	r0, r0, r4
 80075d6:	2802      	cmp	r0, #2
 80075d8:	d9f5      	bls.n	80075c6 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 80075da:	2003      	movs	r0, #3
 80075dc:	e030      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80075de:	2000      	movs	r0, #0
 80075e0:	e02e      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
 80075e2:	2000      	movs	r0, #0
 80075e4:	e02c      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d02c      	beq.n	8007644 <HAL_RCC_OscConfig+0x3d4>
        pll_config = RCC->PLLCFGR;
 80075ea:	4b18      	ldr	r3, [pc, #96]	; (800764c <HAL_RCC_OscConfig+0x3dc>)
 80075ec:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ee:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80075f2:	69e2      	ldr	r2, [r4, #28]
 80075f4:	4291      	cmp	r1, r2
 80075f6:	d001      	beq.n	80075fc <HAL_RCC_OscConfig+0x38c>
          return HAL_ERROR;
 80075f8:	2001      	movs	r0, #1
 80075fa:	e021      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007600:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007602:	428a      	cmp	r2, r1
 8007604:	d001      	beq.n	800760a <HAL_RCC_OscConfig+0x39a>
          return HAL_ERROR;
 8007606:	2001      	movs	r0, #1
 8007608:	e01a      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800760a:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800760c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8007610:	401a      	ands	r2, r3
 8007612:	428a      	cmp	r2, r1
 8007614:	d001      	beq.n	800761a <HAL_RCC_OscConfig+0x3aa>
          return HAL_ERROR;
 8007616:	2001      	movs	r0, #1
 8007618:	e012      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800761a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800761e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007620:	428a      	cmp	r2, r1
 8007622:	d001      	beq.n	8007628 <HAL_RCC_OscConfig+0x3b8>
          return HAL_ERROR;
 8007624:	2001      	movs	r0, #1
 8007626:	e00b      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007628:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800762c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800762e:	4293      	cmp	r3, r2
 8007630:	d00a      	beq.n	8007648 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
 8007632:	2001      	movs	r0, #1
 8007634:	e004      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
    return HAL_ERROR;
 8007636:	2001      	movs	r0, #1
}
 8007638:	4770      	bx	lr
        return HAL_ERROR;
 800763a:	2001      	movs	r0, #1
 800763c:	e000      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 800763e:	2000      	movs	r0, #0
}
 8007640:	b002      	add	sp, #8
 8007642:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8007644:	2001      	movs	r0, #1
 8007646:	e7fb      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8007648:	2000      	movs	r0, #0
 800764a:	e7f9      	b.n	8007640 <HAL_RCC_OscConfig+0x3d0>
 800764c:	40023800 	.word	0x40023800
 8007650:	42470060 	.word	0x42470060

08007654 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007654:	4b01      	ldr	r3, [pc, #4]	; (800765c <HAL_RCC_EnableCSS+0x8>)
 8007656:	2201      	movs	r2, #1
 8007658:	601a      	str	r2, [r3, #0]
}
 800765a:	4770      	bx	lr
 800765c:	4247004c 	.word	0x4247004c

08007660 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007660:	4b26      	ldr	r3, [pc, #152]	; (80076fc <HAL_RCC_GetSysClockFreq+0x9c>)
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 030c 	and.w	r3, r3, #12
 8007668:	2b04      	cmp	r3, #4
 800766a:	d044      	beq.n	80076f6 <HAL_RCC_GetSysClockFreq+0x96>
 800766c:	2b08      	cmp	r3, #8
 800766e:	d001      	beq.n	8007674 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007670:	4823      	ldr	r0, [pc, #140]	; (8007700 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007672:	4770      	bx	lr
{
 8007674:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007678:	4b20      	ldr	r3, [pc, #128]	; (80076fc <HAL_RCC_GetSysClockFreq+0x9c>)
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007686:	d013      	beq.n	80076b0 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007688:	4b1c      	ldr	r3, [pc, #112]	; (80076fc <HAL_RCC_GetSysClockFreq+0x9c>)
 800768a:	6859      	ldr	r1, [r3, #4]
 800768c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007690:	2300      	movs	r3, #0
 8007692:	481c      	ldr	r0, [pc, #112]	; (8007704 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007694:	fba1 0100 	umull	r0, r1, r1, r0
 8007698:	f7f9 fa38 	bl	8000b0c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800769c:	4b17      	ldr	r3, [pc, #92]	; (80076fc <HAL_RCC_GetSysClockFreq+0x9c>)
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80076a4:	3301      	adds	r3, #1
 80076a6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80076a8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80076ac:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076b0:	4b12      	ldr	r3, [pc, #72]	; (80076fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80076b8:	461e      	mov	r6, r3
 80076ba:	2700      	movs	r7, #0
 80076bc:	015c      	lsls	r4, r3, #5
 80076be:	2500      	movs	r5, #0
 80076c0:	1ae4      	subs	r4, r4, r3
 80076c2:	eb65 0507 	sbc.w	r5, r5, r7
 80076c6:	01a9      	lsls	r1, r5, #6
 80076c8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80076cc:	01a0      	lsls	r0, r4, #6
 80076ce:	1b00      	subs	r0, r0, r4
 80076d0:	eb61 0105 	sbc.w	r1, r1, r5
 80076d4:	00cb      	lsls	r3, r1, #3
 80076d6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80076da:	00c4      	lsls	r4, r0, #3
 80076dc:	19a0      	adds	r0, r4, r6
 80076de:	eb43 0107 	adc.w	r1, r3, r7
 80076e2:	028b      	lsls	r3, r1, #10
 80076e4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80076e8:	0284      	lsls	r4, r0, #10
 80076ea:	4620      	mov	r0, r4
 80076ec:	4619      	mov	r1, r3
 80076ee:	2300      	movs	r3, #0
 80076f0:	f7f9 fa0c 	bl	8000b0c <__aeabi_uldivmod>
 80076f4:	e7d2      	b.n	800769c <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 80076f6:	4803      	ldr	r0, [pc, #12]	; (8007704 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	40023800 	.word	0x40023800
 8007700:	00f42400 	.word	0x00f42400
 8007704:	017d7840 	.word	0x017d7840

08007708 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007708:	2800      	cmp	r0, #0
 800770a:	f000 809e 	beq.w	800784a <HAL_RCC_ClockConfig+0x142>
{
 800770e:	b570      	push	{r4, r5, r6, lr}
 8007710:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007712:	4b50      	ldr	r3, [pc, #320]	; (8007854 <HAL_RCC_ClockConfig+0x14c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	428b      	cmp	r3, r1
 800771c:	d209      	bcs.n	8007732 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800771e:	b2cb      	uxtb	r3, r1
 8007720:	4a4c      	ldr	r2, [pc, #304]	; (8007854 <HAL_RCC_ClockConfig+0x14c>)
 8007722:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007724:	6813      	ldr	r3, [r2, #0]
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	428b      	cmp	r3, r1
 800772c:	d001      	beq.n	8007732 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 800772e:	2001      	movs	r0, #1
}
 8007730:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	f013 0f02 	tst.w	r3, #2
 8007738:	d017      	beq.n	800776a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800773a:	f013 0f04 	tst.w	r3, #4
 800773e:	d004      	beq.n	800774a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007740:	4a45      	ldr	r2, [pc, #276]	; (8007858 <HAL_RCC_ClockConfig+0x150>)
 8007742:	6893      	ldr	r3, [r2, #8]
 8007744:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007748:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	f013 0f08 	tst.w	r3, #8
 8007750:	d004      	beq.n	800775c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007752:	4a41      	ldr	r2, [pc, #260]	; (8007858 <HAL_RCC_ClockConfig+0x150>)
 8007754:	6893      	ldr	r3, [r2, #8]
 8007756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800775a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800775c:	4a3e      	ldr	r2, [pc, #248]	; (8007858 <HAL_RCC_ClockConfig+0x150>)
 800775e:	6893      	ldr	r3, [r2, #8]
 8007760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007764:	68a0      	ldr	r0, [r4, #8]
 8007766:	4303      	orrs	r3, r0
 8007768:	6093      	str	r3, [r2, #8]
 800776a:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	f013 0f01 	tst.w	r3, #1
 8007772:	d032      	beq.n	80077da <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007774:	6863      	ldr	r3, [r4, #4]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d021      	beq.n	80077be <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800777a:	1e9a      	subs	r2, r3, #2
 800777c:	2a01      	cmp	r2, #1
 800777e:	d925      	bls.n	80077cc <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007780:	4a35      	ldr	r2, [pc, #212]	; (8007858 <HAL_RCC_ClockConfig+0x150>)
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	f012 0f02 	tst.w	r2, #2
 8007788:	d061      	beq.n	800784e <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800778a:	4933      	ldr	r1, [pc, #204]	; (8007858 <HAL_RCC_ClockConfig+0x150>)
 800778c:	688a      	ldr	r2, [r1, #8]
 800778e:	f022 0203 	bic.w	r2, r2, #3
 8007792:	4313      	orrs	r3, r2
 8007794:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8007796:	f7fe f9e9 	bl	8005b6c <HAL_GetTick>
 800779a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800779c:	4b2e      	ldr	r3, [pc, #184]	; (8007858 <HAL_RCC_ClockConfig+0x150>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f003 030c 	and.w	r3, r3, #12
 80077a4:	6862      	ldr	r2, [r4, #4]
 80077a6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80077aa:	d016      	beq.n	80077da <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077ac:	f7fe f9de 	bl	8005b6c <HAL_GetTick>
 80077b0:	1b80      	subs	r0, r0, r6
 80077b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80077b6:	4298      	cmp	r0, r3
 80077b8:	d9f0      	bls.n	800779c <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 80077ba:	2003      	movs	r0, #3
 80077bc:	e7b8      	b.n	8007730 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077be:	4a26      	ldr	r2, [pc, #152]	; (8007858 <HAL_RCC_ClockConfig+0x150>)
 80077c0:	6812      	ldr	r2, [r2, #0]
 80077c2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80077c6:	d1e0      	bne.n	800778a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80077c8:	2001      	movs	r0, #1
 80077ca:	e7b1      	b.n	8007730 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077cc:	4a22      	ldr	r2, [pc, #136]	; (8007858 <HAL_RCC_ClockConfig+0x150>)
 80077ce:	6812      	ldr	r2, [r2, #0]
 80077d0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80077d4:	d1d9      	bne.n	800778a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80077d6:	2001      	movs	r0, #1
 80077d8:	e7aa      	b.n	8007730 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077da:	4b1e      	ldr	r3, [pc, #120]	; (8007854 <HAL_RCC_ClockConfig+0x14c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 030f 	and.w	r3, r3, #15
 80077e2:	42ab      	cmp	r3, r5
 80077e4:	d909      	bls.n	80077fa <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077e6:	b2ea      	uxtb	r2, r5
 80077e8:	4b1a      	ldr	r3, [pc, #104]	; (8007854 <HAL_RCC_ClockConfig+0x14c>)
 80077ea:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 030f 	and.w	r3, r3, #15
 80077f2:	42ab      	cmp	r3, r5
 80077f4:	d001      	beq.n	80077fa <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 80077f6:	2001      	movs	r0, #1
 80077f8:	e79a      	b.n	8007730 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	f013 0f04 	tst.w	r3, #4
 8007800:	d006      	beq.n	8007810 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007802:	4a15      	ldr	r2, [pc, #84]	; (8007858 <HAL_RCC_ClockConfig+0x150>)
 8007804:	6893      	ldr	r3, [r2, #8]
 8007806:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800780a:	68e1      	ldr	r1, [r4, #12]
 800780c:	430b      	orrs	r3, r1
 800780e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	f013 0f08 	tst.w	r3, #8
 8007816:	d007      	beq.n	8007828 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007818:	4a0f      	ldr	r2, [pc, #60]	; (8007858 <HAL_RCC_ClockConfig+0x150>)
 800781a:	6893      	ldr	r3, [r2, #8]
 800781c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007820:	6921      	ldr	r1, [r4, #16]
 8007822:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007826:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007828:	f7ff ff1a 	bl	8007660 <HAL_RCC_GetSysClockFreq>
 800782c:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <HAL_RCC_ClockConfig+0x150>)
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007834:	4a09      	ldr	r2, [pc, #36]	; (800785c <HAL_RCC_ClockConfig+0x154>)
 8007836:	5cd3      	ldrb	r3, [r2, r3]
 8007838:	40d8      	lsrs	r0, r3
 800783a:	4b09      	ldr	r3, [pc, #36]	; (8007860 <HAL_RCC_ClockConfig+0x158>)
 800783c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <HAL_RCC_ClockConfig+0x15c>)
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	f7fd fcef 	bl	8005224 <HAL_InitTick>
  return HAL_OK;
 8007846:	2000      	movs	r0, #0
 8007848:	e772      	b.n	8007730 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800784a:	2001      	movs	r0, #1
}
 800784c:	4770      	bx	lr
        return HAL_ERROR;
 800784e:	2001      	movs	r0, #1
 8007850:	e76e      	b.n	8007730 <HAL_RCC_ClockConfig+0x28>
 8007852:	bf00      	nop
 8007854:	40023c00 	.word	0x40023c00
 8007858:	40023800 	.word	0x40023800
 800785c:	0800dfb8 	.word	0x0800dfb8
 8007860:	20000050 	.word	0x20000050
 8007864:	20000058 	.word	0x20000058

08007868 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8007868:	4b01      	ldr	r3, [pc, #4]	; (8007870 <HAL_RCC_GetHCLKFreq+0x8>)
 800786a:	6818      	ldr	r0, [r3, #0]
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	20000050 	.word	0x20000050

08007874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007874:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007876:	f7ff fff7 	bl	8007868 <HAL_RCC_GetHCLKFreq>
 800787a:	4b04      	ldr	r3, [pc, #16]	; (800788c <HAL_RCC_GetPCLK1Freq+0x18>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8007882:	4a03      	ldr	r2, [pc, #12]	; (8007890 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007884:	5cd3      	ldrb	r3, [r2, r3]
}
 8007886:	40d8      	lsrs	r0, r3
 8007888:	bd08      	pop	{r3, pc}
 800788a:	bf00      	nop
 800788c:	40023800 	.word	0x40023800
 8007890:	0800dfc8 	.word	0x0800dfc8

08007894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007894:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007896:	f7ff ffe7 	bl	8007868 <HAL_RCC_GetHCLKFreq>
 800789a:	4b04      	ldr	r3, [pc, #16]	; (80078ac <HAL_RCC_GetPCLK2Freq+0x18>)
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80078a2:	4a03      	ldr	r2, [pc, #12]	; (80078b0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80078a4:	5cd3      	ldrb	r3, [r2, r3]
}
 80078a6:	40d8      	lsrs	r0, r3
 80078a8:	bd08      	pop	{r3, pc}
 80078aa:	bf00      	nop
 80078ac:	40023800 	.word	0x40023800
 80078b0:	0800dfc8 	.word	0x0800dfc8

080078b4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80078b4:	230f      	movs	r3, #15
 80078b6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80078b8:	4b0b      	ldr	r3, [pc, #44]	; (80078e8 <HAL_RCC_GetClockConfig+0x34>)
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	f002 0203 	and.w	r2, r2, #3
 80078c0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80078c8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80078d0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	08db      	lsrs	r3, r3, #3
 80078d6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80078da:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80078dc:	4b03      	ldr	r3, [pc, #12]	; (80078ec <HAL_RCC_GetClockConfig+0x38>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 030f 	and.w	r3, r3, #15
 80078e4:	600b      	str	r3, [r1, #0]
}
 80078e6:	4770      	bx	lr
 80078e8:	40023800 	.word	0x40023800
 80078ec:	40023c00 	.word	0x40023c00

080078f0 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80078f0:	4770      	bx	lr
	...

080078f4 <HAL_RCC_NMI_IRQHandler>:
{
 80078f4:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80078f6:	4b06      	ldr	r3, [pc, #24]	; (8007910 <HAL_RCC_NMI_IRQHandler+0x1c>)
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80078fe:	d100      	bne.n	8007902 <HAL_RCC_NMI_IRQHandler+0xe>
}
 8007900:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8007902:	f7ff fff5 	bl	80078f0 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007906:	4b03      	ldr	r3, [pc, #12]	; (8007914 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007908:	2280      	movs	r2, #128	; 0x80
 800790a:	701a      	strb	r2, [r3, #0]
}
 800790c:	e7f8      	b.n	8007900 <HAL_RCC_NMI_IRQHandler+0xc>
 800790e:	bf00      	nop
 8007910:	40023800 	.word	0x40023800
 8007914:	4002380e 	.word	0x4002380e

08007918 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007918:	b530      	push	{r4, r5, lr}
 800791a:	b083      	sub	sp, #12
 800791c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800791e:	6803      	ldr	r3, [r0, #0]
 8007920:	f013 0f05 	tst.w	r3, #5
 8007924:	d10e      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	f013 0f02 	tst.w	r3, #2
 800792c:	d136      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	f013 0f08 	tst.w	r3, #8
 8007934:	f000 8097 	beq.w	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007938:	7c22      	ldrb	r2, [r4, #16]
 800793a:	4b4c      	ldr	r3, [pc, #304]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800793c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800793e:	2000      	movs	r0, #0
}
 8007940:	b003      	add	sp, #12
 8007942:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8007944:	4b4a      	ldr	r3, [pc, #296]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800794a:	f7fe f90f 	bl	8005b6c <HAL_GetTick>
 800794e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007950:	4b48      	ldr	r3, [pc, #288]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007958:	d006      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800795a:	f7fe f907 	bl	8005b6c <HAL_GetTick>
 800795e:	1b40      	subs	r0, r0, r5
 8007960:	2802      	cmp	r0, #2
 8007962:	d9f5      	bls.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8007964:	2003      	movs	r0, #3
 8007966:	e7eb      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007968:	6862      	ldr	r2, [r4, #4]
 800796a:	68a3      	ldr	r3, [r4, #8]
 800796c:	071b      	lsls	r3, r3, #28
 800796e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007972:	4a40      	ldr	r2, [pc, #256]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007974:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8007978:	4b3d      	ldr	r3, [pc, #244]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800797a:	2201      	movs	r2, #1
 800797c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800797e:	f7fe f8f5 	bl	8005b6c <HAL_GetTick>
 8007982:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007984:	4b3b      	ldr	r3, [pc, #236]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800798c:	d1cb      	bne.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800798e:	f7fe f8ed 	bl	8005b6c <HAL_GetTick>
 8007992:	1b40      	subs	r0, r0, r5
 8007994:	2802      	cmp	r0, #2
 8007996:	d9f5      	bls.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        return HAL_TIMEOUT;
 8007998:	2003      	movs	r0, #3
 800799a:	e7d1      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 800799c:	2300      	movs	r3, #0
 800799e:	9301      	str	r3, [sp, #4]
 80079a0:	4b34      	ldr	r3, [pc, #208]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80079a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80079a8:	641a      	str	r2, [r3, #64]	; 0x40
 80079aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b0:	9301      	str	r3, [sp, #4]
 80079b2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80079b4:	4a30      	ldr	r2, [pc, #192]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079b6:	6813      	ldr	r3, [r2, #0]
 80079b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079bc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80079be:	f7fe f8d5 	bl	8005b6c <HAL_GetTick>
 80079c2:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80079c4:	4b2c      	ldr	r3, [pc, #176]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80079cc:	d106      	bne.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80079ce:	f7fe f8cd 	bl	8005b6c <HAL_GetTick>
 80079d2:	1b40      	subs	r0, r0, r5
 80079d4:	2802      	cmp	r0, #2
 80079d6:	d9f5      	bls.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 80079d8:	2003      	movs	r0, #3
 80079da:	e7b1      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079dc:	4b25      	ldr	r3, [pc, #148]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80079de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079e0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80079e4:	d012      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80079e6:	68e2      	ldr	r2, [r4, #12]
 80079e8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d00d      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079f0:	4b20      	ldr	r3, [pc, #128]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80079f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80079f8:	4920      	ldr	r1, [pc, #128]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80079fa:	2001      	movs	r0, #1
 80079fc:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079fe:	2000      	movs	r0, #0
 8007a00:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8007a02:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a06:	f013 0f01 	tst.w	r3, #1
 8007a0a:	d112      	bne.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a0c:	68e3      	ldr	r3, [r4, #12]
 8007a0e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007a12:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007a16:	d01b      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8007a18:	4a16      	ldr	r2, [pc, #88]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007a1a:	6893      	ldr	r3, [r2, #8]
 8007a1c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007a20:	6093      	str	r3, [r2, #8]
 8007a22:	4914      	ldr	r1, [pc, #80]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007a24:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8007a26:	68e2      	ldr	r2, [r4, #12]
 8007a28:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	670b      	str	r3, [r1, #112]	; 0x70
 8007a30:	e77d      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8007a32:	f7fe f89b 	bl	8005b6c <HAL_GetTick>
 8007a36:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a38:	4b0e      	ldr	r3, [pc, #56]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a3c:	f013 0f02 	tst.w	r3, #2
 8007a40:	d1e4      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a42:	f7fe f893 	bl	8005b6c <HAL_GetTick>
 8007a46:	1b40      	subs	r0, r0, r5
 8007a48:	2864      	cmp	r0, #100	; 0x64
 8007a4a:	d9f5      	bls.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
 8007a4c:	2003      	movs	r0, #3
 8007a4e:	e777      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a50:	4908      	ldr	r1, [pc, #32]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007a52:	688a      	ldr	r2, [r1, #8]
 8007a54:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8007a58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a60:	4313      	orrs	r3, r2
 8007a62:	608b      	str	r3, [r1, #8]
 8007a64:	e7dd      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  return HAL_OK;
 8007a66:	2000      	movs	r0, #0
 8007a68:	e76a      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8007a6a:	bf00      	nop
 8007a6c:	424711e0 	.word	0x424711e0
 8007a70:	42470068 	.word	0x42470068
 8007a74:	40023800 	.word	0x40023800
 8007a78:	40007000 	.word	0x40007000
 8007a7c:	42470e40 	.word	0x42470e40

08007a80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007a84:	6802      	ldr	r2, [r0, #0]
 8007a86:	68d3      	ldr	r3, [r2, #12]
 8007a88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a8c:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a8e:	f7fe f86d 	bl	8005b6c <HAL_GetTick>
 8007a92:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f013 0f20 	tst.w	r3, #32
 8007a9c:	d107      	bne.n	8007aae <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007a9e:	f7fe f865 	bl	8005b6c <HAL_GetTick>
 8007aa2:	1b40      	subs	r0, r0, r5
 8007aa4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007aa8:	d9f4      	bls.n	8007a94 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8007aaa:	2003      	movs	r0, #3
 8007aac:	e000      	b.n	8007ab0 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8007aae:	2000      	movs	r0, #0
}
 8007ab0:	bd38      	pop	{r3, r4, r5, pc}

08007ab2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007ab2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ab4:	6803      	ldr	r3, [r0, #0]
 8007ab6:	68da      	ldr	r2, [r3, #12]
 8007ab8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007abc:	d001      	beq.n	8007ac2 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8007abe:	2000      	movs	r0, #0
}
 8007ac0:	bd38      	pop	{r3, r4, r5, pc}
 8007ac2:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ac8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8007aca:	f7fe f84f 	bl	8005b6c <HAL_GetTick>
 8007ace:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007ad8:	d107      	bne.n	8007aea <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007ada:	f7fe f847 	bl	8005b6c <HAL_GetTick>
 8007ade:	1b40      	subs	r0, r0, r5
 8007ae0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007ae4:	d9f4      	bls.n	8007ad0 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8007ae6:	2003      	movs	r0, #3
 8007ae8:	e7ea      	b.n	8007ac0 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8007aea:	2000      	movs	r0, #0
 8007aec:	e7e8      	b.n	8007ac0 <RTC_EnterInitMode+0xe>

08007aee <HAL_RTC_Init>:
{
 8007aee:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d05c      	beq.n	8007bae <HAL_RTC_Init+0xc0>
 8007af4:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007af6:	7f43      	ldrb	r3, [r0, #29]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d040      	beq.n	8007b7e <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007afc:	2302      	movs	r3, #2
 8007afe:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	22ca      	movs	r2, #202	; 0xca
 8007b04:	625a      	str	r2, [r3, #36]	; 0x24
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	2253      	movs	r2, #83	; 0x53
 8007b0a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f7ff ffd0 	bl	8007ab2 <RTC_EnterInitMode>
 8007b12:	4605      	mov	r5, r0
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d136      	bne.n	8007b86 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007b18:	6822      	ldr	r2, [r4, #0]
 8007b1a:	6893      	ldr	r3, [r2, #8]
 8007b1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b24:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007b26:	6821      	ldr	r1, [r4, #0]
 8007b28:	688a      	ldr	r2, [r1, #8]
 8007b2a:	6863      	ldr	r3, [r4, #4]
 8007b2c:	6920      	ldr	r0, [r4, #16]
 8007b2e:	4303      	orrs	r3, r0
 8007b30:	6960      	ldr	r0, [r4, #20]
 8007b32:	4303      	orrs	r3, r0
 8007b34:	4313      	orrs	r3, r2
 8007b36:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	68e2      	ldr	r2, [r4, #12]
 8007b3c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007b3e:	6822      	ldr	r2, [r4, #0]
 8007b40:	6913      	ldr	r3, [r2, #16]
 8007b42:	68a1      	ldr	r1, [r4, #8]
 8007b44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007b48:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007b4a:	6822      	ldr	r2, [r4, #0]
 8007b4c:	68d3      	ldr	r3, [r2, #12]
 8007b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b52:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f013 0f20 	tst.w	r3, #32
 8007b5c:	d01b      	beq.n	8007b96 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007b5e:	6822      	ldr	r2, [r4, #0]
 8007b60:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b66:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007b68:	6822      	ldr	r2, [r4, #0]
 8007b6a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007b6c:	69a1      	ldr	r1, [r4, #24]
 8007b6e:	430b      	orrs	r3, r1
 8007b70:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	22ff      	movs	r2, #255	; 0xff
 8007b76:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8007b7c:	e009      	b.n	8007b92 <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 8007b7e:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8007b80:	f7fd f926 	bl	8004dd0 <HAL_RTC_MspInit>
 8007b84:	e7ba      	b.n	8007afc <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	22ff      	movs	r2, #255	; 0xff
 8007b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007b8c:	2304      	movs	r3, #4
 8007b8e:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8007b90:	2501      	movs	r5, #1
}
 8007b92:	4628      	mov	r0, r5
 8007b94:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b96:	4620      	mov	r0, r4
 8007b98:	f7ff ff72 	bl	8007a80 <HAL_RTC_WaitForSynchro>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d0de      	beq.n	8007b5e <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	22ff      	movs	r2, #255	; 0xff
 8007ba4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ba6:	2304      	movs	r3, #4
 8007ba8:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8007baa:	2501      	movs	r5, #1
 8007bac:	e7f1      	b.n	8007b92 <HAL_RTC_Init+0xa4>
     return HAL_ERROR;
 8007bae:	2501      	movs	r5, #1
 8007bb0:	e7ef      	b.n	8007b92 <HAL_RTC_Init+0xa4>

08007bb2 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8007bb2:	2300      	movs	r3, #0

  while(Value >= 10U)
 8007bb4:	e002      	b.n	8007bbc <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8007bb6:	3301      	adds	r3, #1
    Value -= 10U;
 8007bb8:	380a      	subs	r0, #10
 8007bba:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8007bbc:	2809      	cmp	r0, #9
 8007bbe:	d8fa      	bhi.n	8007bb6 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	b2db      	uxtb	r3, r3
}
 8007bc4:	4318      	orrs	r0, r3
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_RTC_SetTime>:
{
 8007bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8007bca:	7f03      	ldrb	r3, [r0, #28]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d078      	beq.n	8007cc2 <HAL_RTC_SetTime+0xfa>
 8007bd0:	460d      	mov	r5, r1
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007bd8:	2302      	movs	r3, #2
 8007bda:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8007bdc:	2a00      	cmp	r2, #0
 8007bde:	d146      	bne.n	8007c6e <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007be0:	6803      	ldr	r3, [r0, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007be8:	d101      	bne.n	8007bee <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007bee:	7828      	ldrb	r0, [r5, #0]
 8007bf0:	f7ff ffdf 	bl	8007bb2 <RTC_ByteToBcd2>
 8007bf4:	0406      	lsls	r6, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007bf6:	7868      	ldrb	r0, [r5, #1]
 8007bf8:	f7ff ffdb 	bl	8007bb2 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007bfc:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007c00:	78a8      	ldrb	r0, [r5, #2]
 8007c02:	f7ff ffd6 	bl	8007bb2 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007c06:	4330      	orrs	r0, r6
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007c08:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007c0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	22ca      	movs	r2, #202	; 0xca
 8007c12:	625a      	str	r2, [r3, #36]	; 0x24
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	2253      	movs	r2, #83	; 0x53
 8007c18:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f7ff ff49 	bl	8007ab2 <RTC_EnterInitMode>
 8007c20:	4607      	mov	r7, r0
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d135      	bne.n	8007c92 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 8007c2c:	f026 46fe 	bic.w	r6, r6, #2130706432	; 0x7f000000
 8007c30:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007c32:	6822      	ldr	r2, [r4, #0]
 8007c34:	6893      	ldr	r3, [r2, #8]
 8007c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c3a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007c3c:	6821      	ldr	r1, [r4, #0]
 8007c3e:	688b      	ldr	r3, [r1, #8]
 8007c40:	68ea      	ldr	r2, [r5, #12]
 8007c42:	6928      	ldr	r0, [r5, #16]
 8007c44:	4302      	orrs	r2, r0
 8007c46:	4313      	orrs	r3, r2
 8007c48:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007c4a:	6822      	ldr	r2, [r4, #0]
 8007c4c:	68d3      	ldr	r3, [r2, #12]
 8007c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c52:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f013 0f20 	tst.w	r3, #32
 8007c5c:	d023      	beq.n	8007ca6 <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	22ff      	movs	r2, #255	; 0xff
 8007c62:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8007c64:	2301      	movs	r3, #1
 8007c66:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8007c68:	2300      	movs	r3, #0
 8007c6a:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8007c6c:	e019      	b.n	8007ca2 <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007c6e:	6803      	ldr	r3, [r0, #0]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007c76:	d101      	bne.n	8007c7c <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007c7c:	782b      	ldrb	r3, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007c7e:	7868      	ldrb	r0, [r5, #1]
 8007c80:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007c82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8007c86:	78ab      	ldrb	r3, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007c88:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007c8a:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007c8c:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8007c90:	e7bd      	b.n	8007c0e <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	22ff      	movs	r2, #255	; 0xff
 8007c96:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007c98:	2304      	movs	r3, #4
 8007c9a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8007ca0:	2701      	movs	r7, #1
}
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f7ff feea 	bl	8007a80 <HAL_RTC_WaitForSynchro>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d0d6      	beq.n	8007c5e <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	22ff      	movs	r2, #255	; 0xff
 8007cb4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007cb6:	2304      	movs	r3, #4
 8007cb8:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8007cba:	2300      	movs	r3, #0
 8007cbc:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8007cbe:	2701      	movs	r7, #1
 8007cc0:	e7ef      	b.n	8007ca2 <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8007cc2:	2702      	movs	r7, #2
 8007cc4:	e7ed      	b.n	8007ca2 <HAL_RTC_SetTime+0xda>

08007cc6 <HAL_RTC_SetDate>:
{
 8007cc6:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8007cc8:	7f03      	ldrb	r3, [r0, #28]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d066      	beq.n	8007d9c <HAL_RTC_SetDate+0xd6>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007cd6:	b93a      	cbnz	r2, 8007ce8 <HAL_RTC_SetDate+0x22>
 8007cd8:	784b      	ldrb	r3, [r1, #1]
 8007cda:	f013 0f10 	tst.w	r3, #16
 8007cde:	d003      	beq.n	8007ce8 <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007ce0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8007ce4:	330a      	adds	r3, #10
 8007ce6:	704b      	strb	r3, [r1, #1]
 8007ce8:	460e      	mov	r6, r1
 8007cea:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8007cec:	2a00      	cmp	r2, #0
 8007cee:	d132      	bne.n	8007d56 <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007cf0:	78c8      	ldrb	r0, [r1, #3]
 8007cf2:	f7ff ff5e 	bl	8007bb2 <RTC_ByteToBcd2>
 8007cf6:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007cf8:	7870      	ldrb	r0, [r6, #1]
 8007cfa:	f7ff ff5a 	bl	8007bb2 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007cfe:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007d02:	78b0      	ldrb	r0, [r6, #2]
 8007d04:	f7ff ff55 	bl	8007bb2 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007d08:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));
 8007d0a:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007d0c:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	22ca      	movs	r2, #202	; 0xca
 8007d14:	625a      	str	r2, [r3, #36]	; 0x24
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	2253      	movs	r2, #83	; 0x53
 8007d1a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f7ff fec8 	bl	8007ab2 <RTC_EnterInitMode>
 8007d22:	4606      	mov	r6, r0
 8007d24:	bb10      	cbnz	r0, 8007d6c <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8007d2c:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8007d30:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007d32:	6822      	ldr	r2, [r4, #0]
 8007d34:	68d3      	ldr	r3, [r2, #12]
 8007d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d3a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f013 0f20 	tst.w	r3, #32
 8007d44:	d01c      	beq.n	8007d80 <HAL_RTC_SetDate+0xba>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	22ff      	movs	r2, #255	; 0xff
 8007d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8007d50:	2300      	movs	r3, #0
 8007d52:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 8007d54:	e012      	b.n	8007d7c <HAL_RTC_SetDate+0xb6>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007d56:	78cd      	ldrb	r5, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007d58:	7848      	ldrb	r0, [r1, #1]
 8007d5a:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007d5c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 8007d60:	788d      	ldrb	r5, [r1, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007d62:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007d64:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007d66:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8007d6a:	e7d1      	b.n	8007d10 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	22ff      	movs	r2, #255	; 0xff
 8007d70:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d72:	2304      	movs	r3, #4
 8007d74:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8007d76:	2300      	movs	r3, #0
 8007d78:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8007d7a:	2601      	movs	r6, #1
}
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d80:	4620      	mov	r0, r4
 8007d82:	f7ff fe7d 	bl	8007a80 <HAL_RTC_WaitForSynchro>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d0dd      	beq.n	8007d46 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	22ff      	movs	r2, #255	; 0xff
 8007d8e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007d90:	2304      	movs	r3, #4
 8007d92:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8007d94:	2300      	movs	r3, #0
 8007d96:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8007d98:	2601      	movs	r6, #1
 8007d9a:	e7ef      	b.n	8007d7c <HAL_RTC_SetDate+0xb6>
 __HAL_LOCK(hrtc);
 8007d9c:	2602      	movs	r6, #2
 8007d9e:	e7ed      	b.n	8007d7c <HAL_RTC_SetDate+0xb6>

08007da0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007da0:	0903      	lsrs	r3, r0, #4
 8007da2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007da6:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8007da8:	f000 000f 	and.w	r0, r0, #15
 8007dac:	4410      	add	r0, r2
}
 8007dae:	b2c0      	uxtb	r0, r0
 8007db0:	4770      	bx	lr

08007db2 <HAL_RTC_GetTime>:
{
 8007db2:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007db4:	6803      	ldr	r3, [r0, #0]
 8007db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db8:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007dba:	6803      	ldr	r3, [r0, #0]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007dc2:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007dc4:	6803      	ldr	r3, [r0, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007dcc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007dd0:	0c1d      	lsrs	r5, r3, #16
 8007dd2:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8007dd6:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007dd8:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8007ddc:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007dde:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8007de2:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007de4:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8007de8:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8007dea:	b95a      	cbnz	r2, 8007e04 <HAL_RTC_GetTime+0x52>
 8007dec:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007dee:	f7ff ffd7 	bl	8007da0 <RTC_Bcd2ToByte>
 8007df2:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007df4:	4630      	mov	r0, r6
 8007df6:	f7ff ffd3 	bl	8007da0 <RTC_Bcd2ToByte>
 8007dfa:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f7ff ffcf 	bl	8007da0 <RTC_Bcd2ToByte>
 8007e02:	70a8      	strb	r0, [r5, #2]
}
 8007e04:	2000      	movs	r0, #0
 8007e06:	bd70      	pop	{r4, r5, r6, pc}

08007e08 <HAL_RTC_GetDate>:
{
 8007e08:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007e0a:	6803      	ldr	r3, [r0, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e12:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007e16:	0c18      	lsrs	r0, r3, #16
 8007e18:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007e1a:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8007e1e:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007e20:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8007e24:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007e26:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007e2a:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8007e2c:	b95a      	cbnz	r2, 8007e46 <HAL_RTC_GetDate+0x3e>
 8007e2e:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007e30:	f7ff ffb6 	bl	8007da0 <RTC_Bcd2ToByte>
 8007e34:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007e36:	4630      	mov	r0, r6
 8007e38:	f7ff ffb2 	bl	8007da0 <RTC_Bcd2ToByte>
 8007e3c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f7ff ffae 	bl	8007da0 <RTC_Bcd2ToByte>
 8007e44:	70a0      	strb	r0, [r4, #2]
}
 8007e46:	2000      	movs	r0, #0
 8007e48:	bd70      	pop	{r4, r5, r6, pc}

08007e4a <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8007e4a:	6803      	ldr	r3, [r0, #0]
 8007e4c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007e4e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8007e52:	4770      	bx	lr

08007e54 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8007e54:	6803      	ldr	r3, [r0, #0]
 8007e56:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007e58:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8007e5c:	4770      	bx	lr

08007e5e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e60:	4605      	mov	r5, r0
 8007e62:	460f      	mov	r7, r1
 8007e64:	4616      	mov	r6, r2
 8007e66:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	ea37 0303 	bics.w	r3, r7, r3
 8007e70:	bf0c      	ite	eq
 8007e72:	2301      	moveq	r3, #1
 8007e74:	2300      	movne	r3, #0
 8007e76:	42b3      	cmp	r3, r6
 8007e78:	d037      	beq.n	8007eea <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e7a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007e7e:	d0f3      	beq.n	8007e68 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007e80:	f7fd fe74 	bl	8005b6c <HAL_GetTick>
 8007e84:	9b06      	ldr	r3, [sp, #24]
 8007e86:	1ac0      	subs	r0, r0, r3
 8007e88:	42a0      	cmp	r0, r4
 8007e8a:	d201      	bcs.n	8007e90 <SPI_WaitFlagStateUntilTimeout+0x32>
 8007e8c:	2c00      	cmp	r4, #0
 8007e8e:	d1eb      	bne.n	8007e68 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e90:	682a      	ldr	r2, [r5, #0]
 8007e92:	6853      	ldr	r3, [r2, #4]
 8007e94:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8007e98:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e9a:	686b      	ldr	r3, [r5, #4]
 8007e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ea0:	d00b      	beq.n	8007eba <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ea2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ea8:	d014      	beq.n	8007ed4 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8007eb6:	2003      	movs	r0, #3
 8007eb8:	e018      	b.n	8007eec <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eba:	68ab      	ldr	r3, [r5, #8]
 8007ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec0:	d002      	beq.n	8007ec8 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ec6:	d1ec      	bne.n	8007ea2 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8007ec8:	682a      	ldr	r2, [r5, #0]
 8007eca:	6813      	ldr	r3, [r2, #0]
 8007ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ed0:	6013      	str	r3, [r2, #0]
 8007ed2:	e7e6      	b.n	8007ea2 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8007ed4:	682a      	ldr	r2, [r5, #0]
 8007ed6:	6813      	ldr	r3, [r2, #0]
 8007ed8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	682a      	ldr	r2, [r5, #0]
 8007ee0:	6813      	ldr	r3, [r2, #0]
 8007ee2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ee6:	6013      	str	r3, [r2, #0]
 8007ee8:	e7df      	b.n	8007eaa <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8007eea:	2000      	movs	r0, #0
}
 8007eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ef0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ef0:	b530      	push	{r4, r5, lr}
 8007ef2:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ef4:	4c16      	ldr	r4, [pc, #88]	; (8007f50 <SPI_EndRxTxTransaction+0x60>)
 8007ef6:	6824      	ldr	r4, [r4, #0]
 8007ef8:	4d16      	ldr	r5, [pc, #88]	; (8007f54 <SPI_EndRxTxTransaction+0x64>)
 8007efa:	fba5 3404 	umull	r3, r4, r5, r4
 8007efe:	0d64      	lsrs	r4, r4, #21
 8007f00:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8007f04:	fb05 f404 	mul.w	r4, r5, r4
 8007f08:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f0a:	6844      	ldr	r4, [r0, #4]
 8007f0c:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8007f10:	d00b      	beq.n	8007f2a <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f12:	9b03      	ldr	r3, [sp, #12]
 8007f14:	b1c3      	cbz	r3, 8007f48 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8007f16:	9b03      	ldr	r3, [sp, #12]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f1c:	6803      	ldr	r3, [r0, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007f24:	d1f5      	bne.n	8007f12 <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	e00f      	b.n	8007f4a <SPI_EndRxTxTransaction+0x5a>
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f2e:	9200      	str	r2, [sp, #0]
 8007f30:	2200      	movs	r2, #0
 8007f32:	2180      	movs	r1, #128	; 0x80
 8007f34:	f7ff ff93 	bl	8007e5e <SPI_WaitFlagStateUntilTimeout>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	b130      	cbz	r0, 8007f4a <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007f3e:	f043 0320 	orr.w	r3, r3, #32
 8007f42:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e000      	b.n	8007f4a <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	b005      	add	sp, #20
 8007f4e:	bd30      	pop	{r4, r5, pc}
 8007f50:	20000050 	.word	0x20000050
 8007f54:	165e9f81 	.word	0x165e9f81

08007f58 <SPI_EndRxTransaction>:
{
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f5e:	6840      	ldr	r0, [r0, #4]
 8007f60:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8007f64:	d016      	beq.n	8007f94 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f66:	6860      	ldr	r0, [r4, #4]
 8007f68:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8007f6c:	d12e      	bne.n	8007fcc <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007f6e:	68a3      	ldr	r3, [r4, #8]
 8007f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f74:	d01b      	beq.n	8007fae <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f76:	9200      	str	r2, [sp, #0]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2180      	movs	r1, #128	; 0x80
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f7ff ff6d 	bl	8007e5e <SPI_WaitFlagStateUntilTimeout>
 8007f84:	4603      	mov	r3, r0
 8007f86:	b350      	cbz	r0, 8007fde <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007f8a:	f043 0320 	orr.w	r3, r3, #32
 8007f8e:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e024      	b.n	8007fde <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f94:	68a3      	ldr	r3, [r4, #8]
 8007f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f9a:	d002      	beq.n	8007fa2 <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fa0:	d1e1      	bne.n	8007f66 <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 8007fa2:	6820      	ldr	r0, [r4, #0]
 8007fa4:	6803      	ldr	r3, [r0, #0]
 8007fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007faa:	6003      	str	r3, [r0, #0]
 8007fac:	e7db      	b.n	8007f66 <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007fae:	9200      	str	r2, [sp, #0]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f7ff ff51 	bl	8007e5e <SPI_WaitFlagStateUntilTimeout>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	b170      	cbz	r0, 8007fde <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fc0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007fc2:	f043 0320 	orr.w	r3, r3, #32
 8007fc6:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e008      	b.n	8007fde <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007fcc:	9200      	str	r2, [sp, #0]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f7ff ff42 	bl	8007e5e <SPI_WaitFlagStateUntilTimeout>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	b910      	cbnz	r0, 8007fe4 <SPI_EndRxTransaction+0x8c>
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	b002      	add	sp, #8
 8007fe2:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fe4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007fe6:	f043 0320 	orr.w	r3, r3, #32
 8007fea:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e7f6      	b.n	8007fde <SPI_EndRxTransaction+0x86>

08007ff0 <HAL_SPI_Init>:
  if (hspi == NULL)
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d03b      	beq.n	800806c <HAL_SPI_Init+0x7c>
{
 8007ff4:	b510      	push	{r4, lr}
 8007ff6:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ffc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8008000:	2b00      	cmp	r3, #0
 8008002:	d02e      	beq.n	8008062 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8008004:	2302      	movs	r3, #2
 8008006:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800800a:	6822      	ldr	r2, [r4, #0]
 800800c:	6813      	ldr	r3, [r2, #0]
 800800e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008012:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008014:	6863      	ldr	r3, [r4, #4]
 8008016:	68a2      	ldr	r2, [r4, #8]
 8008018:	4313      	orrs	r3, r2
 800801a:	68e2      	ldr	r2, [r4, #12]
 800801c:	4313      	orrs	r3, r2
 800801e:	6922      	ldr	r2, [r4, #16]
 8008020:	4313      	orrs	r3, r2
 8008022:	6962      	ldr	r2, [r4, #20]
 8008024:	4313      	orrs	r3, r2
 8008026:	69a2      	ldr	r2, [r4, #24]
 8008028:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800802c:	4313      	orrs	r3, r2
 800802e:	69e2      	ldr	r2, [r4, #28]
 8008030:	4313      	orrs	r3, r2
 8008032:	6a22      	ldr	r2, [r4, #32]
 8008034:	4313      	orrs	r3, r2
 8008036:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008038:	6822      	ldr	r2, [r4, #0]
 800803a:	430b      	orrs	r3, r1
 800803c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800803e:	8b63      	ldrh	r3, [r4, #26]
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008046:	6822      	ldr	r2, [r4, #0]
 8008048:	430b      	orrs	r3, r1
 800804a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800804c:	6822      	ldr	r2, [r4, #0]
 800804e:	69d3      	ldr	r3, [r2, #28]
 8008050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008054:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008056:	2000      	movs	r0, #0
 8008058:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800805a:	2301      	movs	r3, #1
 800805c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8008060:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8008062:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8008066:	f7fc fec1 	bl	8004dec <HAL_SPI_MspInit>
 800806a:	e7cb      	b.n	8008004 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 800806c:	2001      	movs	r0, #1
}
 800806e:	4770      	bx	lr

08008070 <HAL_SPI_Transmit>:
{
 8008070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008074:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8008076:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800807a:	2c01      	cmp	r4, #1
 800807c:	f000 80c3 	beq.w	8008206 <HAL_SPI_Transmit+0x196>
 8008080:	461d      	mov	r5, r3
 8008082:	4617      	mov	r7, r2
 8008084:	4688      	mov	r8, r1
 8008086:	4604      	mov	r4, r0
 8008088:	2301      	movs	r3, #1
 800808a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800808e:	f7fd fd6d 	bl	8005b6c <HAL_GetTick>
 8008092:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8008094:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b01      	cmp	r3, #1
 800809c:	d009      	beq.n	80080b2 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800809e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80080a0:	2301      	movs	r3, #1
 80080a2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80080a6:	2300      	movs	r3, #0
 80080a8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80080ac:	b002      	add	sp, #8
 80080ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80080b2:	f1b8 0f00 	cmp.w	r8, #0
 80080b6:	f000 8098 	beq.w	80081ea <HAL_SPI_Transmit+0x17a>
 80080ba:	2f00      	cmp	r7, #0
 80080bc:	f000 8097 	beq.w	80081ee <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80080c0:	2303      	movs	r3, #3
 80080c2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080c6:	2300      	movs	r3, #0
 80080c8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80080ca:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80080ce:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80080d0:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80080d2:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80080d4:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80080d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80080d8:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80080da:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080dc:	68a3      	ldr	r3, [r4, #8]
 80080de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080e2:	d01c      	beq.n	800811e <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80080ec:	d103      	bne.n	80080f6 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080f4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80080f6:	68e3      	ldr	r3, [r4, #12]
 80080f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080fc:	d015      	beq.n	800812a <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080fe:	6863      	ldr	r3, [r4, #4]
 8008100:	b10b      	cbz	r3, 8008106 <HAL_SPI_Transmit+0x96>
 8008102:	2f01      	cmp	r7, #1
 8008104:	d149      	bne.n	800819a <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008106:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	7812      	ldrb	r2, [r2, #0]
 800810c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800810e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008110:	3301      	adds	r3, #1
 8008112:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8008114:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008116:	3b01      	subs	r3, #1
 8008118:	b29b      	uxth	r3, r3
 800811a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800811c:	e03d      	b.n	800819a <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 800811e:	6822      	ldr	r2, [r4, #0]
 8008120:	6813      	ldr	r3, [r2, #0]
 8008122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	e7dc      	b.n	80080e4 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800812a:	6863      	ldr	r3, [r4, #4]
 800812c:	b10b      	cbz	r3, 8008132 <HAL_SPI_Transmit+0xc2>
 800812e:	2f01      	cmp	r7, #1
 8008130:	d115      	bne.n	800815e <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008132:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	8812      	ldrh	r2, [r2, #0]
 8008138:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800813a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800813c:	3302      	adds	r3, #2
 800813e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8008140:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008142:	3b01      	subs	r3, #1
 8008144:	b29b      	uxth	r3, r3
 8008146:	86e3      	strh	r3, [r4, #54]	; 0x36
 8008148:	e009      	b.n	800815e <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800814a:	f7fd fd0f 	bl	8005b6c <HAL_GetTick>
 800814e:	1b80      	subs	r0, r0, r6
 8008150:	42a8      	cmp	r0, r5
 8008152:	d302      	bcc.n	800815a <HAL_SPI_Transmit+0xea>
 8008154:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008158:	d14b      	bne.n	80081f2 <HAL_SPI_Transmit+0x182>
 800815a:	2d00      	cmp	r5, #0
 800815c:	d04b      	beq.n	80081f6 <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 800815e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008160:	b29b      	uxth	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d02c      	beq.n	80081c0 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	689a      	ldr	r2, [r3, #8]
 800816a:	f012 0f02 	tst.w	r2, #2
 800816e:	d0ec      	beq.n	800814a <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008170:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008172:	8812      	ldrh	r2, [r2, #0]
 8008174:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008176:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008178:	3302      	adds	r3, #2
 800817a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800817c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800817e:	3b01      	subs	r3, #1
 8008180:	b29b      	uxth	r3, r3
 8008182:	86e3      	strh	r3, [r4, #54]	; 0x36
 8008184:	e7eb      	b.n	800815e <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008186:	f7fd fcf1 	bl	8005b6c <HAL_GetTick>
 800818a:	1b80      	subs	r0, r0, r6
 800818c:	42a8      	cmp	r0, r5
 800818e:	d302      	bcc.n	8008196 <HAL_SPI_Transmit+0x126>
 8008190:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008194:	d131      	bne.n	80081fa <HAL_SPI_Transmit+0x18a>
 8008196:	2d00      	cmp	r5, #0
 8008198:	d031      	beq.n	80081fe <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 800819a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800819c:	b29b      	uxth	r3, r3
 800819e:	b17b      	cbz	r3, 80081c0 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	f012 0f02 	tst.w	r2, #2
 80081a8:	d0ed      	beq.n	8008186 <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80081ac:	7812      	ldrb	r2, [r2, #0]
 80081ae:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80081b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80081b2:	3301      	adds	r3, #1
 80081b4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80081b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80081b8:	3b01      	subs	r3, #1
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	86e3      	strh	r3, [r4, #54]	; 0x36
 80081be:	e7ec      	b.n	800819a <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081c0:	4632      	mov	r2, r6
 80081c2:	4629      	mov	r1, r5
 80081c4:	4620      	mov	r0, r4
 80081c6:	f7ff fe93 	bl	8007ef0 <SPI_EndRxTxTransaction>
 80081ca:	b108      	cbz	r0, 80081d0 <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081cc:	2320      	movs	r3, #32
 80081ce:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081d0:	68a3      	ldr	r3, [r4, #8]
 80081d2:	b933      	cbnz	r3, 80081e2 <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	9201      	str	r2, [sp, #4]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80081e4:	b96b      	cbnz	r3, 8008202 <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081e6:	2000      	movs	r0, #0
 80081e8:	e75a      	b.n	80080a0 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80081ea:	2001      	movs	r0, #1
 80081ec:	e758      	b.n	80080a0 <HAL_SPI_Transmit+0x30>
 80081ee:	2001      	movs	r0, #1
 80081f0:	e756      	b.n	80080a0 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80081f2:	2003      	movs	r0, #3
 80081f4:	e754      	b.n	80080a0 <HAL_SPI_Transmit+0x30>
 80081f6:	2003      	movs	r0, #3
 80081f8:	e752      	b.n	80080a0 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80081fa:	2003      	movs	r0, #3
 80081fc:	e750      	b.n	80080a0 <HAL_SPI_Transmit+0x30>
 80081fe:	2003      	movs	r0, #3
 8008200:	e74e      	b.n	80080a0 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8008202:	2001      	movs	r0, #1
 8008204:	e74c      	b.n	80080a0 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8008206:	2002      	movs	r0, #2
 8008208:	e750      	b.n	80080ac <HAL_SPI_Transmit+0x3c>

0800820a <HAL_SPI_TransmitReceive>:
{
 800820a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800820e:	b083      	sub	sp, #12
 8008210:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8008214:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8008218:	2c01      	cmp	r4, #1
 800821a:	f000 810b 	beq.w	8008434 <HAL_SPI_TransmitReceive+0x22a>
 800821e:	461d      	mov	r5, r3
 8008220:	4617      	mov	r7, r2
 8008222:	460e      	mov	r6, r1
 8008224:	4604      	mov	r4, r0
 8008226:	2301      	movs	r3, #1
 8008228:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800822c:	f7fd fc9e 	bl	8005b6c <HAL_GetTick>
 8008230:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8008232:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8008236:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8008238:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800823a:	2801      	cmp	r0, #1
 800823c:	d015      	beq.n	800826a <HAL_SPI_TransmitReceive+0x60>
 800823e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008242:	d00a      	beq.n	800825a <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 8008244:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8008246:	2201      	movs	r2, #1
 8008248:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800824c:	2200      	movs	r2, #0
 800824e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8008252:	4618      	mov	r0, r3
 8008254:	b003      	add	sp, #12
 8008256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800825a:	68a3      	ldr	r3, [r4, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	f040 80db 	bne.w	8008418 <HAL_SPI_TransmitReceive+0x20e>
 8008262:	2804      	cmp	r0, #4
 8008264:	d001      	beq.n	800826a <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 8008266:	2302      	movs	r3, #2
 8008268:	e7ed      	b.n	8008246 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800826a:	2e00      	cmp	r6, #0
 800826c:	f000 80d6 	beq.w	800841c <HAL_SPI_TransmitReceive+0x212>
 8008270:	2f00      	cmp	r7, #0
 8008272:	f000 80d5 	beq.w	8008420 <HAL_SPI_TransmitReceive+0x216>
 8008276:	2d00      	cmp	r5, #0
 8008278:	f000 80d4 	beq.w	8008424 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800827c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b04      	cmp	r3, #4
 8008284:	d002      	beq.n	800828c <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008286:	2305      	movs	r3, #5
 8008288:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800828c:	2300      	movs	r3, #0
 800828e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008290:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008292:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008294:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008296:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008298:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800829a:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 800829c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800829e:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80082a8:	d103      	bne.n	80082b2 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082b0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80082b2:	68e3      	ldr	r3, [r4, #12]
 80082b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082b8:	d010      	beq.n	80082dc <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082ba:	6863      	ldr	r3, [r4, #4]
 80082bc:	b10b      	cbz	r3, 80082c2 <HAL_SPI_TransmitReceive+0xb8>
 80082be:	2d01      	cmp	r5, #1
 80082c0:	d10a      	bne.n	80082d8 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	7812      	ldrb	r2, [r2, #0]
 80082c8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80082ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80082cc:	3301      	adds	r3, #1
 80082ce:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80082d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80082d2:	3b01      	subs	r3, #1
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80082d8:	2501      	movs	r5, #1
 80082da:	e069      	b.n	80083b0 <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082dc:	6863      	ldr	r3, [r4, #4]
 80082de:	b10b      	cbz	r3, 80082e4 <HAL_SPI_TransmitReceive+0xda>
 80082e0:	2d01      	cmp	r5, #1
 80082e2:	d10a      	bne.n	80082fa <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082e4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	8812      	ldrh	r2, [r2, #0]
 80082ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80082ee:	3302      	adds	r3, #2
 80082f0:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80082f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80082f4:	3b01      	subs	r3, #1
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80082fa:	2501      	movs	r5, #1
 80082fc:	e01b      	b.n	8008336 <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	689a      	ldr	r2, [r3, #8]
 8008302:	f012 0f01 	tst.w	r2, #1
 8008306:	d00d      	beq.n	8008324 <HAL_SPI_TransmitReceive+0x11a>
 8008308:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800830a:	b292      	uxth	r2, r2
 800830c:	b152      	cbz	r2, 8008324 <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800830e:	68da      	ldr	r2, [r3, #12]
 8008310:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008312:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008314:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008316:	3302      	adds	r3, #2
 8008318:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800831a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800831c:	3b01      	subs	r3, #1
 800831e:	b29b      	uxth	r3, r3
 8008320:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8008322:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008324:	f7fd fc22 	bl	8005b6c <HAL_GetTick>
 8008328:	eba0 0009 	sub.w	r0, r0, r9
 800832c:	4540      	cmp	r0, r8
 800832e:	d302      	bcc.n	8008336 <HAL_SPI_TransmitReceive+0x12c>
 8008330:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8008334:	d178      	bne.n	8008428 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008336:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008338:	b29b      	uxth	r3, r3
 800833a:	b91b      	cbnz	r3, 8008344 <HAL_SPI_TransmitReceive+0x13a>
 800833c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800833e:	b29b      	uxth	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	d052      	beq.n	80083ea <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	f012 0f02 	tst.w	r2, #2
 800834c:	d0d7      	beq.n	80082fe <HAL_SPI_TransmitReceive+0xf4>
 800834e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8008350:	b292      	uxth	r2, r2
 8008352:	2a00      	cmp	r2, #0
 8008354:	d0d3      	beq.n	80082fe <HAL_SPI_TransmitReceive+0xf4>
 8008356:	2d00      	cmp	r5, #0
 8008358:	d0d1      	beq.n	80082fe <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800835a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800835c:	8812      	ldrh	r2, [r2, #0]
 800835e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008360:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008362:	3302      	adds	r3, #2
 8008364:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8008366:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008368:	3b01      	subs	r3, #1
 800836a:	b29b      	uxth	r3, r3
 800836c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800836e:	2500      	movs	r5, #0
 8008370:	e7c5      	b.n	80082fe <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	689a      	ldr	r2, [r3, #8]
 8008376:	f012 0f01 	tst.w	r2, #1
 800837a:	d00d      	beq.n	8008398 <HAL_SPI_TransmitReceive+0x18e>
 800837c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800837e:	b292      	uxth	r2, r2
 8008380:	b152      	cbz	r2, 8008398 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008382:	68da      	ldr	r2, [r3, #12]
 8008384:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008386:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008388:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800838a:	3301      	adds	r3, #1
 800838c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800838e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008390:	3b01      	subs	r3, #1
 8008392:	b29b      	uxth	r3, r3
 8008394:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8008396:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008398:	f7fd fbe8 	bl	8005b6c <HAL_GetTick>
 800839c:	eba0 0009 	sub.w	r0, r0, r9
 80083a0:	4540      	cmp	r0, r8
 80083a2:	d302      	bcc.n	80083aa <HAL_SPI_TransmitReceive+0x1a0>
 80083a4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80083a8:	d140      	bne.n	800842c <HAL_SPI_TransmitReceive+0x222>
 80083aa:	f1b8 0f00 	cmp.w	r8, #0
 80083ae:	d03f      	beq.n	8008430 <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	b913      	cbnz	r3, 80083bc <HAL_SPI_TransmitReceive+0x1b2>
 80083b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	b1b3      	cbz	r3, 80083ea <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	f012 0f02 	tst.w	r2, #2
 80083c4:	d0d5      	beq.n	8008372 <HAL_SPI_TransmitReceive+0x168>
 80083c6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80083c8:	b292      	uxth	r2, r2
 80083ca:	2a00      	cmp	r2, #0
 80083cc:	d0d1      	beq.n	8008372 <HAL_SPI_TransmitReceive+0x168>
 80083ce:	2d00      	cmp	r5, #0
 80083d0:	d0cf      	beq.n	8008372 <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80083d4:	7812      	ldrb	r2, [r2, #0]
 80083d6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80083d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80083da:	3301      	adds	r3, #1
 80083dc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80083de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80083e0:	3b01      	subs	r3, #1
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80083e6:	2500      	movs	r5, #0
 80083e8:	e7c3      	b.n	8008372 <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083ea:	464a      	mov	r2, r9
 80083ec:	4641      	mov	r1, r8
 80083ee:	4620      	mov	r0, r4
 80083f0:	f7ff fd7e 	bl	8007ef0 <SPI_EndRxTxTransaction>
 80083f4:	4603      	mov	r3, r0
 80083f6:	b118      	cbz	r0, 8008400 <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083f8:	2320      	movs	r3, #32
 80083fa:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
    goto error;
 80083fe:	e722      	b.n	8008246 <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008400:	68a2      	ldr	r2, [r4, #8]
 8008402:	2a00      	cmp	r2, #0
 8008404:	f47f af1f 	bne.w	8008246 <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008408:	9201      	str	r2, [sp, #4]
 800840a:	6822      	ldr	r2, [r4, #0]
 800840c:	68d1      	ldr	r1, [r2, #12]
 800840e:	9101      	str	r1, [sp, #4]
 8008410:	6892      	ldr	r2, [r2, #8]
 8008412:	9201      	str	r2, [sp, #4]
 8008414:	9a01      	ldr	r2, [sp, #4]
 8008416:	e716      	b.n	8008246 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 8008418:	2302      	movs	r3, #2
 800841a:	e714      	b.n	8008246 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e712      	b.n	8008246 <HAL_SPI_TransmitReceive+0x3c>
 8008420:	2301      	movs	r3, #1
 8008422:	e710      	b.n	8008246 <HAL_SPI_TransmitReceive+0x3c>
 8008424:	2301      	movs	r3, #1
 8008426:	e70e      	b.n	8008246 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e70c      	b.n	8008246 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e70a      	b.n	8008246 <HAL_SPI_TransmitReceive+0x3c>
 8008430:	2303      	movs	r3, #3
 8008432:	e708      	b.n	8008246 <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8008434:	2302      	movs	r3, #2
 8008436:	e70c      	b.n	8008252 <HAL_SPI_TransmitReceive+0x48>

08008438 <HAL_SPI_Receive>:
{
 8008438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	4604      	mov	r4, r0
 8008440:	460f      	mov	r7, r1
 8008442:	4690      	mov	r8, r2
 8008444:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008446:	6843      	ldr	r3, [r0, #4]
 8008448:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800844c:	d019      	beq.n	8008482 <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 800844e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8008452:	2b01      	cmp	r3, #1
 8008454:	f000 809f 	beq.w	8008596 <HAL_SPI_Receive+0x15e>
 8008458:	2301      	movs	r3, #1
 800845a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800845e:	f7fd fb85 	bl	8005b6c <HAL_GetTick>
 8008462:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8008464:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b01      	cmp	r3, #1
 800846c:	d015      	beq.n	800849a <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 800846e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8008470:	2301      	movs	r3, #1
 8008472:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008476:	2300      	movs	r3, #0
 8008478:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800847c:	b002      	add	sp, #8
 800847e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008482:	6883      	ldr	r3, [r0, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e2      	bne.n	800844e <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008488:	2304      	movs	r3, #4
 800848a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800848e:	9500      	str	r5, [sp, #0]
 8008490:	4613      	mov	r3, r2
 8008492:	460a      	mov	r2, r1
 8008494:	f7ff feb9 	bl	800820a <HAL_SPI_TransmitReceive>
 8008498:	e7f0      	b.n	800847c <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 800849a:	2f00      	cmp	r7, #0
 800849c:	d06d      	beq.n	800857a <HAL_SPI_Receive+0x142>
 800849e:	f1b8 0f00 	cmp.w	r8, #0
 80084a2:	d06c      	beq.n	800857e <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80084a4:	2304      	movs	r3, #4
 80084a6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084aa:	2300      	movs	r3, #0
 80084ac:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80084ae:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80084b0:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80084b4:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80084b8:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80084ba:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80084bc:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 80084be:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80084c0:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084c2:	68a3      	ldr	r3, [r4, #8]
 80084c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084c8:	d00b      	beq.n	80084e2 <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	f012 0f40 	tst.w	r2, #64	; 0x40
 80084d2:	d103      	bne.n	80084dc <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084da:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80084dc:	68e3      	ldr	r3, [r4, #12]
 80084de:	b183      	cbz	r3, 8008502 <HAL_SPI_Receive+0xca>
 80084e0:	e02c      	b.n	800853c <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 80084e2:	6822      	ldr	r2, [r4, #0]
 80084e4:	6813      	ldr	r3, [r2, #0]
 80084e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	e7ed      	b.n	80084ca <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084ee:	f7fd fb3d 	bl	8005b6c <HAL_GetTick>
 80084f2:	1b80      	subs	r0, r0, r6
 80084f4:	42a8      	cmp	r0, r5
 80084f6:	d302      	bcc.n	80084fe <HAL_SPI_Receive+0xc6>
 80084f8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80084fc:	d141      	bne.n	8008582 <HAL_SPI_Receive+0x14a>
 80084fe:	2d00      	cmp	r5, #0
 8008500:	d041      	beq.n	8008586 <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 8008502:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008504:	b29b      	uxth	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d02b      	beq.n	8008562 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	689a      	ldr	r2, [r3, #8]
 800850e:	f012 0f01 	tst.w	r2, #1
 8008512:	d0ec      	beq.n	80084ee <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008514:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008516:	7b1b      	ldrb	r3, [r3, #12]
 8008518:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800851a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800851c:	3301      	adds	r3, #1
 800851e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8008520:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008522:	3b01      	subs	r3, #1
 8008524:	b29b      	uxth	r3, r3
 8008526:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008528:	e7eb      	b.n	8008502 <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800852a:	f7fd fb1f 	bl	8005b6c <HAL_GetTick>
 800852e:	1b80      	subs	r0, r0, r6
 8008530:	42a8      	cmp	r0, r5
 8008532:	d302      	bcc.n	800853a <HAL_SPI_Receive+0x102>
 8008534:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008538:	d127      	bne.n	800858a <HAL_SPI_Receive+0x152>
 800853a:	b345      	cbz	r5, 800858e <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 800853c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800853e:	b29b      	uxth	r3, r3
 8008540:	b17b      	cbz	r3, 8008562 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	689a      	ldr	r2, [r3, #8]
 8008546:	f012 0f01 	tst.w	r2, #1
 800854a:	d0ee      	beq.n	800852a <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008550:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008552:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008554:	3302      	adds	r3, #2
 8008556:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8008558:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800855a:	3b01      	subs	r3, #1
 800855c:	b29b      	uxth	r3, r3
 800855e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008560:	e7ec      	b.n	800853c <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008562:	4632      	mov	r2, r6
 8008564:	4629      	mov	r1, r5
 8008566:	4620      	mov	r0, r4
 8008568:	f7ff fcf6 	bl	8007f58 <SPI_EndRxTransaction>
 800856c:	b108      	cbz	r0, 8008572 <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800856e:	2320      	movs	r3, #32
 8008570:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008572:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008574:	b96b      	cbnz	r3, 8008592 <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008576:	2000      	movs	r0, #0
 8008578:	e77a      	b.n	8008470 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 800857a:	2001      	movs	r0, #1
 800857c:	e778      	b.n	8008470 <HAL_SPI_Receive+0x38>
 800857e:	2001      	movs	r0, #1
 8008580:	e776      	b.n	8008470 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8008582:	2003      	movs	r0, #3
 8008584:	e774      	b.n	8008470 <HAL_SPI_Receive+0x38>
 8008586:	2003      	movs	r0, #3
 8008588:	e772      	b.n	8008470 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800858a:	2003      	movs	r0, #3
 800858c:	e770      	b.n	8008470 <HAL_SPI_Receive+0x38>
 800858e:	2003      	movs	r0, #3
 8008590:	e76e      	b.n	8008470 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8008592:	2001      	movs	r0, #1
 8008594:	e76c      	b.n	8008470 <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 8008596:	2002      	movs	r0, #2
 8008598:	e770      	b.n	800847c <HAL_SPI_Receive+0x44>
	...

0800859c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800859c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800859e:	6a03      	ldr	r3, [r0, #32]
 80085a0:	f023 0301 	bic.w	r3, r3, #1
 80085a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085a8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085aa:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085ac:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085b0:	680d      	ldr	r5, [r1, #0]
 80085b2:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085b6:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085ba:	688b      	ldr	r3, [r1, #8]
 80085bc:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085be:	4d0d      	ldr	r5, [pc, #52]	; (80085f4 <TIM_OC1_SetConfig+0x58>)
 80085c0:	42a8      	cmp	r0, r5
 80085c2:	d009      	beq.n	80085d8 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085c4:	4d0b      	ldr	r5, [pc, #44]	; (80085f4 <TIM_OC1_SetConfig+0x58>)
 80085c6:	42a8      	cmp	r0, r5
 80085c8:	d00d      	beq.n	80085e6 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ca:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085cc:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085ce:	684a      	ldr	r2, [r1, #4]
 80085d0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085d2:	6203      	str	r3, [r0, #32]
}
 80085d4:	bc70      	pop	{r4, r5, r6}
 80085d6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80085d8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80085dc:	68cc      	ldr	r4, [r1, #12]
 80085de:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80085e0:	f023 0304 	bic.w	r3, r3, #4
 80085e4:	e7ee      	b.n	80085c4 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80085ea:	694c      	ldr	r4, [r1, #20]
 80085ec:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 80085ee:	698a      	ldr	r2, [r1, #24]
 80085f0:	4322      	orrs	r2, r4
 80085f2:	e7ea      	b.n	80085ca <TIM_OC1_SetConfig+0x2e>
 80085f4:	40010000 	.word	0x40010000

080085f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085f8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085fa:	6a03      	ldr	r3, [r0, #32]
 80085fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008600:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008602:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008604:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008606:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008608:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800860c:	680d      	ldr	r5, [r1, #0]
 800860e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008614:	688d      	ldr	r5, [r1, #8]
 8008616:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800861a:	4d0f      	ldr	r5, [pc, #60]	; (8008658 <TIM_OC3_SetConfig+0x60>)
 800861c:	42a8      	cmp	r0, r5
 800861e:	d009      	beq.n	8008634 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008620:	4d0d      	ldr	r5, [pc, #52]	; (8008658 <TIM_OC3_SetConfig+0x60>)
 8008622:	42a8      	cmp	r0, r5
 8008624:	d00e      	beq.n	8008644 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008626:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008628:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800862a:	684a      	ldr	r2, [r1, #4]
 800862c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800862e:	6203      	str	r3, [r0, #32]
}
 8008630:	bc30      	pop	{r4, r5}
 8008632:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8008634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008638:	68cd      	ldr	r5, [r1, #12]
 800863a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800863e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008642:	e7ed      	b.n	8008620 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008644:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008648:	694d      	ldr	r5, [r1, #20]
 800864a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800864e:	698d      	ldr	r5, [r1, #24]
 8008650:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8008654:	e7e7      	b.n	8008626 <TIM_OC3_SetConfig+0x2e>
 8008656:	bf00      	nop
 8008658:	40010000 	.word	0x40010000

0800865c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800865c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800865e:	6a03      	ldr	r3, [r0, #32]
 8008660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008664:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008666:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008668:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800866a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800866c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008670:	680d      	ldr	r5, [r1, #0]
 8008672:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800867a:	688d      	ldr	r5, [r1, #8]
 800867c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008680:	4d07      	ldr	r5, [pc, #28]	; (80086a0 <TIM_OC4_SetConfig+0x44>)
 8008682:	42a8      	cmp	r0, r5
 8008684:	d006      	beq.n	8008694 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008686:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008688:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800868a:	684a      	ldr	r2, [r1, #4]
 800868c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800868e:	6203      	str	r3, [r0, #32]
}
 8008690:	bc30      	pop	{r4, r5}
 8008692:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008694:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008698:	694d      	ldr	r5, [r1, #20]
 800869a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800869e:	e7f2      	b.n	8008686 <TIM_OC4_SetConfig+0x2a>
 80086a0:	40010000 	.word	0x40010000

080086a4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086a4:	6802      	ldr	r2, [r0, #0]
 80086a6:	68d3      	ldr	r3, [r2, #12]
 80086a8:	f043 0301 	orr.w	r3, r3, #1
 80086ac:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086ae:	6802      	ldr	r2, [r0, #0]
 80086b0:	6893      	ldr	r3, [r2, #8]
 80086b2:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086b6:	2b06      	cmp	r3, #6
 80086b8:	d003      	beq.n	80086c2 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 80086ba:	6813      	ldr	r3, [r2, #0]
 80086bc:	f043 0301 	orr.w	r3, r3, #1
 80086c0:	6013      	str	r3, [r2, #0]
}
 80086c2:	2000      	movs	r0, #0
 80086c4:	4770      	bx	lr

080086c6 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80086c6:	4770      	bx	lr

080086c8 <HAL_TIM_IC_CaptureCallback>:
}
 80086c8:	4770      	bx	lr

080086ca <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80086ca:	4770      	bx	lr

080086cc <HAL_TIM_TriggerCallback>:
}
 80086cc:	4770      	bx	lr

080086ce <HAL_TIM_IRQHandler>:
{
 80086ce:	b510      	push	{r4, lr}
 80086d0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086d2:	6803      	ldr	r3, [r0, #0]
 80086d4:	691a      	ldr	r2, [r3, #16]
 80086d6:	f012 0f02 	tst.w	r2, #2
 80086da:	d011      	beq.n	8008700 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	f012 0f02 	tst.w	r2, #2
 80086e2:	d00d      	beq.n	8008700 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086e4:	f06f 0202 	mvn.w	r2, #2
 80086e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086ea:	2301      	movs	r3, #1
 80086ec:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086ee:	6803      	ldr	r3, [r0, #0]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	f013 0f03 	tst.w	r3, #3
 80086f6:	d070      	beq.n	80087da <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80086f8:	f7ff ffe6 	bl	80086c8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086fc:	2300      	movs	r3, #0
 80086fe:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	691a      	ldr	r2, [r3, #16]
 8008704:	f012 0f04 	tst.w	r2, #4
 8008708:	d012      	beq.n	8008730 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800870a:	68da      	ldr	r2, [r3, #12]
 800870c:	f012 0f04 	tst.w	r2, #4
 8008710:	d00e      	beq.n	8008730 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008712:	f06f 0204 	mvn.w	r2, #4
 8008716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008718:	2302      	movs	r3, #2
 800871a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008724:	d05f      	beq.n	80087e6 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8008726:	4620      	mov	r0, r4
 8008728:	f7ff ffce 	bl	80086c8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800872c:	2300      	movs	r3, #0
 800872e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	691a      	ldr	r2, [r3, #16]
 8008734:	f012 0f08 	tst.w	r2, #8
 8008738:	d012      	beq.n	8008760 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800873a:	68da      	ldr	r2, [r3, #12]
 800873c:	f012 0f08 	tst.w	r2, #8
 8008740:	d00e      	beq.n	8008760 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008742:	f06f 0208 	mvn.w	r2, #8
 8008746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008748:	2304      	movs	r3, #4
 800874a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	f013 0f03 	tst.w	r3, #3
 8008754:	d04e      	beq.n	80087f4 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8008756:	4620      	mov	r0, r4
 8008758:	f7ff ffb6 	bl	80086c8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800875c:	2300      	movs	r3, #0
 800875e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	691a      	ldr	r2, [r3, #16]
 8008764:	f012 0f10 	tst.w	r2, #16
 8008768:	d012      	beq.n	8008790 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800876a:	68da      	ldr	r2, [r3, #12]
 800876c:	f012 0f10 	tst.w	r2, #16
 8008770:	d00e      	beq.n	8008790 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008772:	f06f 0210 	mvn.w	r2, #16
 8008776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008778:	2308      	movs	r3, #8
 800877a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008784:	d03d      	beq.n	8008802 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8008786:	4620      	mov	r0, r4
 8008788:	f7ff ff9e 	bl	80086c8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800878c:	2300      	movs	r3, #0
 800878e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	691a      	ldr	r2, [r3, #16]
 8008794:	f012 0f01 	tst.w	r2, #1
 8008798:	d003      	beq.n	80087a2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800879a:	68da      	ldr	r2, [r3, #12]
 800879c:	f012 0f01 	tst.w	r2, #1
 80087a0:	d136      	bne.n	8008810 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	691a      	ldr	r2, [r3, #16]
 80087a6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80087aa:	d003      	beq.n	80087b4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	f012 0f80 	tst.w	r2, #128	; 0x80
 80087b2:	d134      	bne.n	800881e <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	691a      	ldr	r2, [r3, #16]
 80087b8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80087bc:	d003      	beq.n	80087c6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80087be:	68da      	ldr	r2, [r3, #12]
 80087c0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80087c4:	d132      	bne.n	800882c <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	691a      	ldr	r2, [r3, #16]
 80087ca:	f012 0f20 	tst.w	r2, #32
 80087ce:	d003      	beq.n	80087d8 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087d0:	68da      	ldr	r2, [r3, #12]
 80087d2:	f012 0f20 	tst.w	r2, #32
 80087d6:	d130      	bne.n	800883a <HAL_TIM_IRQHandler+0x16c>
}
 80087d8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087da:	f7ff ff74 	bl	80086c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087de:	4620      	mov	r0, r4
 80087e0:	f7ff ff73 	bl	80086ca <HAL_TIM_PWM_PulseFinishedCallback>
 80087e4:	e78a      	b.n	80086fc <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087e6:	4620      	mov	r0, r4
 80087e8:	f7ff ff6d 	bl	80086c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087ec:	4620      	mov	r0, r4
 80087ee:	f7ff ff6c 	bl	80086ca <HAL_TIM_PWM_PulseFinishedCallback>
 80087f2:	e79b      	b.n	800872c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087f4:	4620      	mov	r0, r4
 80087f6:	f7ff ff66 	bl	80086c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087fa:	4620      	mov	r0, r4
 80087fc:	f7ff ff65 	bl	80086ca <HAL_TIM_PWM_PulseFinishedCallback>
 8008800:	e7ac      	b.n	800875c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008802:	4620      	mov	r0, r4
 8008804:	f7ff ff5f 	bl	80086c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008808:	4620      	mov	r0, r4
 800880a:	f7ff ff5e 	bl	80086ca <HAL_TIM_PWM_PulseFinishedCallback>
 800880e:	e7bd      	b.n	800878c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008810:	f06f 0201 	mvn.w	r2, #1
 8008814:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008816:	4620      	mov	r0, r4
 8008818:	f7fb ff04 	bl	8004624 <HAL_TIM_PeriodElapsedCallback>
 800881c:	e7c1      	b.n	80087a2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800881e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008822:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008824:	4620      	mov	r0, r4
 8008826:	f000 f9c5 	bl	8008bb4 <HAL_TIMEx_BreakCallback>
 800882a:	e7c3      	b.n	80087b4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800882c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008830:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008832:	4620      	mov	r0, r4
 8008834:	f7ff ff4a 	bl	80086cc <HAL_TIM_TriggerCallback>
 8008838:	e7c5      	b.n	80087c6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800883a:	f06f 0220 	mvn.w	r2, #32
 800883e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008840:	4620      	mov	r0, r4
 8008842:	f000 f9b6 	bl	8008bb2 <HAL_TIMEx_CommutCallback>
}
 8008846:	e7c7      	b.n	80087d8 <HAL_TIM_IRQHandler+0x10a>

08008848 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8008848:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800884a:	4a25      	ldr	r2, [pc, #148]	; (80088e0 <TIM_Base_SetConfig+0x98>)
 800884c:	4290      	cmp	r0, r2
 800884e:	d00e      	beq.n	800886e <TIM_Base_SetConfig+0x26>
 8008850:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008854:	d00b      	beq.n	800886e <TIM_Base_SetConfig+0x26>
 8008856:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800885a:	4290      	cmp	r0, r2
 800885c:	d007      	beq.n	800886e <TIM_Base_SetConfig+0x26>
 800885e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008862:	4290      	cmp	r0, r2
 8008864:	d003      	beq.n	800886e <TIM_Base_SetConfig+0x26>
 8008866:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800886a:	4290      	cmp	r0, r2
 800886c:	d103      	bne.n	8008876 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800886e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008872:	684a      	ldr	r2, [r1, #4]
 8008874:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008876:	4a1a      	ldr	r2, [pc, #104]	; (80088e0 <TIM_Base_SetConfig+0x98>)
 8008878:	4290      	cmp	r0, r2
 800887a:	d01a      	beq.n	80088b2 <TIM_Base_SetConfig+0x6a>
 800887c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008880:	d017      	beq.n	80088b2 <TIM_Base_SetConfig+0x6a>
 8008882:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008886:	4290      	cmp	r0, r2
 8008888:	d013      	beq.n	80088b2 <TIM_Base_SetConfig+0x6a>
 800888a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800888e:	4290      	cmp	r0, r2
 8008890:	d00f      	beq.n	80088b2 <TIM_Base_SetConfig+0x6a>
 8008892:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008896:	4290      	cmp	r0, r2
 8008898:	d00b      	beq.n	80088b2 <TIM_Base_SetConfig+0x6a>
 800889a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800889e:	4290      	cmp	r0, r2
 80088a0:	d007      	beq.n	80088b2 <TIM_Base_SetConfig+0x6a>
 80088a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088a6:	4290      	cmp	r0, r2
 80088a8:	d003      	beq.n	80088b2 <TIM_Base_SetConfig+0x6a>
 80088aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088ae:	4290      	cmp	r0, r2
 80088b0:	d103      	bne.n	80088ba <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80088b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088b6:	68ca      	ldr	r2, [r1, #12]
 80088b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088be:	694a      	ldr	r2, [r1, #20]
 80088c0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80088c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088c4:	688b      	ldr	r3, [r1, #8]
 80088c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80088c8:	680b      	ldr	r3, [r1, #0]
 80088ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088cc:	4b04      	ldr	r3, [pc, #16]	; (80088e0 <TIM_Base_SetConfig+0x98>)
 80088ce:	4298      	cmp	r0, r3
 80088d0:	d002      	beq.n	80088d8 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 80088d2:	2301      	movs	r3, #1
 80088d4:	6143      	str	r3, [r0, #20]
}
 80088d6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80088d8:	690b      	ldr	r3, [r1, #16]
 80088da:	6303      	str	r3, [r0, #48]	; 0x30
 80088dc:	e7f9      	b.n	80088d2 <TIM_Base_SetConfig+0x8a>
 80088de:	bf00      	nop
 80088e0:	40010000 	.word	0x40010000

080088e4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80088e4:	b1a8      	cbz	r0, 8008912 <HAL_TIM_Base_Init+0x2e>
{
 80088e6:	b510      	push	{r4, lr}
 80088e8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80088ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80088ee:	b15b      	cbz	r3, 8008908 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80088f0:	2302      	movs	r3, #2
 80088f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088f6:	1d21      	adds	r1, r4, #4
 80088f8:	6820      	ldr	r0, [r4, #0]
 80088fa:	f7ff ffa5 	bl	8008848 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80088fe:	2301      	movs	r3, #1
 8008900:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008904:	2000      	movs	r0, #0
}
 8008906:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008908:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800890c:	f7fc faf2 	bl	8004ef4 <HAL_TIM_Base_MspInit>
 8008910:	e7ee      	b.n	80088f0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008912:	2001      	movs	r0, #1
}
 8008914:	4770      	bx	lr

08008916 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008916:	b1a8      	cbz	r0, 8008944 <HAL_TIM_PWM_Init+0x2e>
{
 8008918:	b510      	push	{r4, lr}
 800891a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800891c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008920:	b15b      	cbz	r3, 800893a <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8008922:	2302      	movs	r3, #2
 8008924:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008928:	1d21      	adds	r1, r4, #4
 800892a:	6820      	ldr	r0, [r4, #0]
 800892c:	f7ff ff8c 	bl	8008848 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8008930:	2301      	movs	r3, #1
 8008932:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008936:	2000      	movs	r0, #0
}
 8008938:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800893a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800893e:	f7fc fa8d 	bl	8004e5c <HAL_TIM_PWM_MspInit>
 8008942:	e7ee      	b.n	8008922 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8008944:	2001      	movs	r0, #1
}
 8008946:	4770      	bx	lr

08008948 <TIM_OC2_SetConfig>:
{
 8008948:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800894a:	6a03      	ldr	r3, [r0, #32]
 800894c:	f023 0310 	bic.w	r3, r3, #16
 8008950:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8008952:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8008954:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008956:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008958:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800895c:	680d      	ldr	r5, [r1, #0]
 800895e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8008962:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008966:	688d      	ldr	r5, [r1, #8]
 8008968:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800896c:	4d0e      	ldr	r5, [pc, #56]	; (80089a8 <TIM_OC2_SetConfig+0x60>)
 800896e:	42a8      	cmp	r0, r5
 8008970:	d009      	beq.n	8008986 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008972:	4d0d      	ldr	r5, [pc, #52]	; (80089a8 <TIM_OC2_SetConfig+0x60>)
 8008974:	42a8      	cmp	r0, r5
 8008976:	d00e      	beq.n	8008996 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8008978:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800897a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800897c:	684a      	ldr	r2, [r1, #4]
 800897e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008980:	6203      	str	r3, [r0, #32]
}
 8008982:	bc30      	pop	{r4, r5}
 8008984:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8008986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800898a:	68cd      	ldr	r5, [r1, #12]
 800898c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008994:	e7ed      	b.n	8008972 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008996:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800899a:	694d      	ldr	r5, [r1, #20]
 800899c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089a0:	698d      	ldr	r5, [r1, #24]
 80089a2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80089a6:	e7e7      	b.n	8008978 <TIM_OC2_SetConfig+0x30>
 80089a8:	40010000 	.word	0x40010000

080089ac <HAL_TIM_PWM_ConfigChannel>:
{
 80089ac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80089ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d066      	beq.n	8008a84 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80089b6:	460d      	mov	r5, r1
 80089b8:	4604      	mov	r4, r0
 80089ba:	2301      	movs	r3, #1
 80089bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80089c0:	2302      	movs	r3, #2
 80089c2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80089c6:	2a0c      	cmp	r2, #12
 80089c8:	d81a      	bhi.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x54>
 80089ca:	e8df f002 	tbb	[pc, r2]
 80089ce:	1907      	.short	0x1907
 80089d0:	19201919 	.word	0x19201919
 80089d4:	19341919 	.word	0x19341919
 80089d8:	1919      	.short	0x1919
 80089da:	47          	.byte	0x47
 80089db:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089dc:	6800      	ldr	r0, [r0, #0]
 80089de:	f7ff fddd 	bl	800859c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089e2:	6822      	ldr	r2, [r4, #0]
 80089e4:	6993      	ldr	r3, [r2, #24]
 80089e6:	f043 0308 	orr.w	r3, r3, #8
 80089ea:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089ec:	6822      	ldr	r2, [r4, #0]
 80089ee:	6993      	ldr	r3, [r2, #24]
 80089f0:	f023 0304 	bic.w	r3, r3, #4
 80089f4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089f6:	6822      	ldr	r2, [r4, #0]
 80089f8:	6993      	ldr	r3, [r2, #24]
 80089fa:	6929      	ldr	r1, [r5, #16]
 80089fc:	430b      	orrs	r3, r1
 80089fe:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8008a00:	2301      	movs	r3, #1
 8008a02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008a06:	2000      	movs	r0, #0
 8008a08:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8008a0c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a0e:	6800      	ldr	r0, [r0, #0]
 8008a10:	f7ff ff9a 	bl	8008948 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a14:	6822      	ldr	r2, [r4, #0]
 8008a16:	6993      	ldr	r3, [r2, #24]
 8008a18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008a1c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a1e:	6822      	ldr	r2, [r4, #0]
 8008a20:	6993      	ldr	r3, [r2, #24]
 8008a22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a26:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a28:	6822      	ldr	r2, [r4, #0]
 8008a2a:	6993      	ldr	r3, [r2, #24]
 8008a2c:	6929      	ldr	r1, [r5, #16]
 8008a2e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008a32:	6193      	str	r3, [r2, #24]
      break;
 8008a34:	e7e4      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a36:	6800      	ldr	r0, [r0, #0]
 8008a38:	f7ff fdde 	bl	80085f8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a3c:	6822      	ldr	r2, [r4, #0]
 8008a3e:	69d3      	ldr	r3, [r2, #28]
 8008a40:	f043 0308 	orr.w	r3, r3, #8
 8008a44:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a46:	6822      	ldr	r2, [r4, #0]
 8008a48:	69d3      	ldr	r3, [r2, #28]
 8008a4a:	f023 0304 	bic.w	r3, r3, #4
 8008a4e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a50:	6822      	ldr	r2, [r4, #0]
 8008a52:	69d3      	ldr	r3, [r2, #28]
 8008a54:	6929      	ldr	r1, [r5, #16]
 8008a56:	430b      	orrs	r3, r1
 8008a58:	61d3      	str	r3, [r2, #28]
      break;
 8008a5a:	e7d1      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a5c:	6800      	ldr	r0, [r0, #0]
 8008a5e:	f7ff fdfd 	bl	800865c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a62:	6822      	ldr	r2, [r4, #0]
 8008a64:	69d3      	ldr	r3, [r2, #28]
 8008a66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008a6a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a6c:	6822      	ldr	r2, [r4, #0]
 8008a6e:	69d3      	ldr	r3, [r2, #28]
 8008a70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a74:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a76:	6822      	ldr	r2, [r4, #0]
 8008a78:	69d3      	ldr	r3, [r2, #28]
 8008a7a:	6929      	ldr	r1, [r5, #16]
 8008a7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008a80:	61d3      	str	r3, [r2, #28]
      break;
 8008a82:	e7bd      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8008a84:	2002      	movs	r0, #2
 8008a86:	e7c1      	b.n	8008a0c <HAL_TIM_PWM_ConfigChannel+0x60>

08008a88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a88:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a8a:	f001 011f 	and.w	r1, r1, #31
 8008a8e:	2301      	movs	r3, #1
 8008a90:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a94:	6a03      	ldr	r3, [r0, #32]
 8008a96:	ea23 0304 	bic.w	r3, r3, r4
 8008a9a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a9c:	6a03      	ldr	r3, [r0, #32]
 8008a9e:	408a      	lsls	r2, r1
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	6203      	str	r3, [r0, #32]
}
 8008aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aa8:	4770      	bx	lr
	...

08008aac <HAL_TIM_PWM_Start>:
{
 8008aac:	b510      	push	{r4, lr}
 8008aae:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	6800      	ldr	r0, [r0, #0]
 8008ab4:	f7ff ffe8 	bl	8008a88 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	4a0a      	ldr	r2, [pc, #40]	; (8008ae4 <HAL_TIM_PWM_Start+0x38>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d00b      	beq.n	8008ad8 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ac0:	6822      	ldr	r2, [r4, #0]
 8008ac2:	6893      	ldr	r3, [r2, #8]
 8008ac4:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac8:	2b06      	cmp	r3, #6
 8008aca:	d003      	beq.n	8008ad4 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8008acc:	6813      	ldr	r3, [r2, #0]
 8008ace:	f043 0301 	orr.w	r3, r3, #1
 8008ad2:	6013      	str	r3, [r2, #0]
}
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8008ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ade:	645a      	str	r2, [r3, #68]	; 0x44
 8008ae0:	e7ee      	b.n	8008ac0 <HAL_TIM_PWM_Start+0x14>
 8008ae2:	bf00      	nop
 8008ae4:	40010000 	.word	0x40010000

08008ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ae8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d033      	beq.n	8008b58 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8008af0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8008af2:	2301      	movs	r3, #1
 8008af4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008af8:	2302      	movs	r3, #2
 8008afa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008afe:	6803      	ldr	r3, [r0, #0]
 8008b00:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b02:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b04:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b08:	680a      	ldr	r2, [r1, #0]
 8008b0a:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b0e:	6803      	ldr	r3, [r0, #0]
 8008b10:	4a12      	ldr	r2, [pc, #72]	; (8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d012      	beq.n	8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8008b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b1a:	d00f      	beq.n	8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8008b1c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d00b      	beq.n	8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8008b24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d007      	beq.n	8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8008b2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d003      	beq.n	8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8008b34:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d104      	bne.n	8008b46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b3c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b40:	684a      	ldr	r2, [r1, #4]
 8008b42:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b44:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b46:	2301      	movs	r3, #1
 8008b48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8008b52:	4618      	mov	r0, r3
}
 8008b54:	bc30      	pop	{r4, r5}
 8008b56:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008b58:	2002      	movs	r0, #2
}
 8008b5a:	4770      	bx	lr
 8008b5c:	40010000 	.word	0x40010000

08008b60 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d022      	beq.n	8008bae <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b6e:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b74:	688a      	ldr	r2, [r1, #8]
 8008b76:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b7c:	684a      	ldr	r2, [r1, #4]
 8008b7e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b84:	680a      	ldr	r2, [r1, #0]
 8008b86:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b8c:	690a      	ldr	r2, [r1, #16]
 8008b8e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b94:	694a      	ldr	r2, [r1, #20]
 8008b96:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b9c:	69ca      	ldr	r2, [r1, #28]
 8008b9e:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ba0:	6802      	ldr	r2, [r0, #0]
 8008ba2:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8008baa:	4618      	mov	r0, r3
 8008bac:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008bae:	2002      	movs	r0, #2
}
 8008bb0:	4770      	bx	lr

08008bb2 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bb4:	4770      	bx	lr

08008bb6 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008bb6:	6802      	ldr	r2, [r0, #0]
 8008bb8:	68d3      	ldr	r3, [r2, #12]
 8008bba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008bbe:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bc0:	2320      	movs	r3, #32
 8008bc2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8008bc6:	4770      	bx	lr

08008bc8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bc8:	6802      	ldr	r2, [r0, #0]
 8008bca:	68d3      	ldr	r3, [r2, #12]
 8008bcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bd0:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bd2:	6802      	ldr	r2, [r0, #0]
 8008bd4:	6953      	ldr	r3, [r2, #20]
 8008bd6:	f023 0301 	bic.w	r3, r3, #1
 8008bda:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bdc:	2320      	movs	r3, #32
 8008bde:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8008be2:	4770      	bx	lr

08008be4 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008be4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b21      	cmp	r3, #33	; 0x21
 8008bec:	d12a      	bne.n	8008c44 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008bee:	6883      	ldr	r3, [r0, #8]
 8008bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bf4:	d016      	beq.n	8008c24 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bf6:	6a03      	ldr	r3, [r0, #32]
 8008bf8:	1c5a      	adds	r2, r3, #1
 8008bfa:	6202      	str	r2, [r0, #32]
 8008bfc:	781a      	ldrb	r2, [r3, #0]
 8008bfe:	6803      	ldr	r3, [r0, #0]
 8008c00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c02:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8008c04:	3b01      	subs	r3, #1
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	84c3      	strh	r3, [r0, #38]	; 0x26
 8008c0a:	b9eb      	cbnz	r3, 8008c48 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c0c:	6802      	ldr	r2, [r0, #0]
 8008c0e:	68d3      	ldr	r3, [r2, #12]
 8008c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c14:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c16:	6802      	ldr	r2, [r0, #0]
 8008c18:	68d3      	ldr	r3, [r2, #12]
 8008c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c1e:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8008c20:	2000      	movs	r0, #0
 8008c22:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008c24:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	6802      	ldr	r2, [r0, #0]
 8008c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c2e:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008c30:	6903      	ldr	r3, [r0, #16]
 8008c32:	b91b      	cbnz	r3, 8008c3c <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8008c34:	6a03      	ldr	r3, [r0, #32]
 8008c36:	3302      	adds	r3, #2
 8008c38:	6203      	str	r3, [r0, #32]
 8008c3a:	e7e2      	b.n	8008c02 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8008c3c:	6a03      	ldr	r3, [r0, #32]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	6203      	str	r3, [r0, #32]
 8008c42:	e7de      	b.n	8008c02 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8008c44:	2002      	movs	r0, #2
 8008c46:	4770      	bx	lr
    return HAL_OK;
 8008c48:	2000      	movs	r0, #0
  }
}
 8008c4a:	4770      	bx	lr

08008c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c4c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8008c50:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c52:	6802      	ldr	r2, [r0, #0]
 8008c54:	6913      	ldr	r3, [r2, #16]
 8008c56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008c5a:	68c1      	ldr	r1, [r0, #12]
 8008c5c:	430b      	orrs	r3, r1
 8008c5e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c60:	6883      	ldr	r3, [r0, #8]
 8008c62:	6902      	ldr	r2, [r0, #16]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	6942      	ldr	r2, [r0, #20]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	69c2      	ldr	r2, [r0, #28]
 8008c6c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8008c6e:	6801      	ldr	r1, [r0, #0]
 8008c70:	68cb      	ldr	r3, [r1, #12]
 8008c72:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008c76:	f023 030c 	bic.w	r3, r3, #12
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c7e:	6802      	ldr	r2, [r0, #0]
 8008c80:	6953      	ldr	r3, [r2, #20]
 8008c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c86:	6981      	ldr	r1, [r0, #24]
 8008c88:	430b      	orrs	r3, r1
 8008c8a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c8c:	69c3      	ldr	r3, [r0, #28]
 8008c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c92:	d03b      	beq.n	8008d0c <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c94:	6803      	ldr	r3, [r0, #0]
 8008c96:	4a71      	ldr	r2, [pc, #452]	; (8008e5c <UART_SetConfig+0x210>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	f000 80ab 	beq.w	8008df4 <UART_SetConfig+0x1a8>
 8008c9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	f000 80a6 	beq.w	8008df4 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ca8:	f7fe fde4 	bl	8007874 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cac:	f04f 0900 	mov.w	r9, #0
 8008cb0:	1806      	adds	r6, r0, r0
 8008cb2:	eb49 0709 	adc.w	r7, r9, r9
 8008cb6:	eb16 0b00 	adds.w	fp, r6, r0
 8008cba:	eb47 0c09 	adc.w	ip, r7, r9
 8008cbe:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8008cc2:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8008cc6:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8008cca:	4693      	mov	fp, r2
 8008ccc:	469c      	mov	ip, r3
 8008cce:	6863      	ldr	r3, [r4, #4]
 8008cd0:	009a      	lsls	r2, r3, #2
 8008cd2:	0f9b      	lsrs	r3, r3, #30
 8008cd4:	eb10 000b 	adds.w	r0, r0, fp
 8008cd8:	eb49 010c 	adc.w	r1, r9, ip
 8008cdc:	f7f7 ff16 	bl	8000b0c <__aeabi_uldivmod>
 8008ce0:	4d5f      	ldr	r5, [pc, #380]	; (8008e60 <UART_SetConfig+0x214>)
 8008ce2:	fba5 3200 	umull	r3, r2, r5, r0
 8008ce6:	0951      	lsrs	r1, r2, #5
 8008ce8:	2264      	movs	r2, #100	; 0x64
 8008cea:	fb02 0211 	mls	r2, r2, r1, r0
 8008cee:	0113      	lsls	r3, r2, #4
 8008cf0:	3332      	adds	r3, #50	; 0x32
 8008cf2:	fba5 2303 	umull	r2, r3, r5, r3
 8008cf6:	095b      	lsrs	r3, r3, #5
 8008cf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008cfc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008d00:	f003 030f 	and.w	r3, r3, #15
 8008d04:	6821      	ldr	r1, [r4, #0]
 8008d06:	4413      	add	r3, r2
 8008d08:	608b      	str	r3, [r1, #8]
    }
  }
}
 8008d0a:	e0a4      	b.n	8008e56 <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d0c:	6803      	ldr	r3, [r0, #0]
 8008d0e:	4a53      	ldr	r2, [pc, #332]	; (8008e5c <UART_SetConfig+0x210>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d039      	beq.n	8008d88 <UART_SetConfig+0x13c>
 8008d14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d035      	beq.n	8008d88 <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d1c:	f7fe fdaa 	bl	8007874 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d20:	4683      	mov	fp, r0
 8008d22:	f04f 0c00 	mov.w	ip, #0
 8008d26:	1806      	adds	r6, r0, r0
 8008d28:	eb4c 070c 	adc.w	r7, ip, ip
 8008d2c:	eb16 0800 	adds.w	r8, r6, r0
 8008d30:	eb47 090c 	adc.w	r9, r7, ip
 8008d34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d40:	4690      	mov	r8, r2
 8008d42:	4699      	mov	r9, r3
 8008d44:	6862      	ldr	r2, [r4, #4]
 8008d46:	2100      	movs	r1, #0
 8008d48:	1892      	adds	r2, r2, r2
 8008d4a:	eb41 0301 	adc.w	r3, r1, r1
 8008d4e:	eb1b 0008 	adds.w	r0, fp, r8
 8008d52:	eb4c 0109 	adc.w	r1, ip, r9
 8008d56:	f7f7 fed9 	bl	8000b0c <__aeabi_uldivmod>
 8008d5a:	4d41      	ldr	r5, [pc, #260]	; (8008e60 <UART_SetConfig+0x214>)
 8008d5c:	fba5 3200 	umull	r3, r2, r5, r0
 8008d60:	0951      	lsrs	r1, r2, #5
 8008d62:	2264      	movs	r2, #100	; 0x64
 8008d64:	fb02 0211 	mls	r2, r2, r1, r0
 8008d68:	00d3      	lsls	r3, r2, #3
 8008d6a:	3332      	adds	r3, #50	; 0x32
 8008d6c:	fba5 2303 	umull	r2, r3, r5, r3
 8008d70:	095b      	lsrs	r3, r3, #5
 8008d72:	005a      	lsls	r2, r3, #1
 8008d74:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8008d78:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008d7c:	f003 0307 	and.w	r3, r3, #7
 8008d80:	6821      	ldr	r1, [r4, #0]
 8008d82:	4413      	add	r3, r2
 8008d84:	608b      	str	r3, [r1, #8]
 8008d86:	e066      	b.n	8008e56 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d88:	f7fe fd84 	bl	8007894 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d8c:	4680      	mov	r8, r0
 8008d8e:	f04f 0900 	mov.w	r9, #0
 8008d92:	1806      	adds	r6, r0, r0
 8008d94:	eb49 0709 	adc.w	r7, r9, r9
 8008d98:	eb16 0b00 	adds.w	fp, r6, r0
 8008d9c:	eb47 0c09 	adc.w	ip, r7, r9
 8008da0:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8008da4:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8008da8:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8008dac:	4693      	mov	fp, r2
 8008dae:	469c      	mov	ip, r3
 8008db0:	6862      	ldr	r2, [r4, #4]
 8008db2:	2100      	movs	r1, #0
 8008db4:	1892      	adds	r2, r2, r2
 8008db6:	eb41 0301 	adc.w	r3, r1, r1
 8008dba:	eb18 000b 	adds.w	r0, r8, fp
 8008dbe:	eb49 010c 	adc.w	r1, r9, ip
 8008dc2:	f7f7 fea3 	bl	8000b0c <__aeabi_uldivmod>
 8008dc6:	4d26      	ldr	r5, [pc, #152]	; (8008e60 <UART_SetConfig+0x214>)
 8008dc8:	fba5 3200 	umull	r3, r2, r5, r0
 8008dcc:	0951      	lsrs	r1, r2, #5
 8008dce:	2264      	movs	r2, #100	; 0x64
 8008dd0:	fb02 0211 	mls	r2, r2, r1, r0
 8008dd4:	00d3      	lsls	r3, r2, #3
 8008dd6:	3332      	adds	r3, #50	; 0x32
 8008dd8:	fba5 2303 	umull	r2, r3, r5, r3
 8008ddc:	095b      	lsrs	r3, r3, #5
 8008dde:	005a      	lsls	r2, r3, #1
 8008de0:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8008de4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008de8:	f003 0307 	and.w	r3, r3, #7
 8008dec:	6821      	ldr	r1, [r4, #0]
 8008dee:	4413      	add	r3, r2
 8008df0:	608b      	str	r3, [r1, #8]
 8008df2:	e030      	b.n	8008e56 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008df4:	f7fe fd4e 	bl	8007894 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008df8:	f04f 0900 	mov.w	r9, #0
 8008dfc:	1806      	adds	r6, r0, r0
 8008dfe:	eb49 0709 	adc.w	r7, r9, r9
 8008e02:	eb16 0b00 	adds.w	fp, r6, r0
 8008e06:	eb47 0c09 	adc.w	ip, r7, r9
 8008e0a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8008e0e:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8008e12:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8008e16:	4693      	mov	fp, r2
 8008e18:	469c      	mov	ip, r3
 8008e1a:	6863      	ldr	r3, [r4, #4]
 8008e1c:	009a      	lsls	r2, r3, #2
 8008e1e:	0f9b      	lsrs	r3, r3, #30
 8008e20:	eb10 000b 	adds.w	r0, r0, fp
 8008e24:	eb49 010c 	adc.w	r1, r9, ip
 8008e28:	f7f7 fe70 	bl	8000b0c <__aeabi_uldivmod>
 8008e2c:	4d0c      	ldr	r5, [pc, #48]	; (8008e60 <UART_SetConfig+0x214>)
 8008e2e:	fba5 3200 	umull	r3, r2, r5, r0
 8008e32:	0951      	lsrs	r1, r2, #5
 8008e34:	2264      	movs	r2, #100	; 0x64
 8008e36:	fb02 0211 	mls	r2, r2, r1, r0
 8008e3a:	0113      	lsls	r3, r2, #4
 8008e3c:	3332      	adds	r3, #50	; 0x32
 8008e3e:	fba5 2303 	umull	r2, r3, r5, r3
 8008e42:	095b      	lsrs	r3, r3, #5
 8008e44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008e48:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008e4c:	f003 030f 	and.w	r3, r3, #15
 8008e50:	6821      	ldr	r1, [r4, #0]
 8008e52:	4413      	add	r3, r2
 8008e54:	608b      	str	r3, [r1, #8]
}
 8008e56:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8008e5a:	bf00      	nop
 8008e5c:	40011000 	.word	0x40011000
 8008e60:	51eb851f 	.word	0x51eb851f

08008e64 <UART_WaitOnFlagUntilTimeout>:
{
 8008e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e68:	4605      	mov	r5, r0
 8008e6a:	460f      	mov	r7, r1
 8008e6c:	4616      	mov	r6, r2
 8008e6e:	4698      	mov	r8, r3
 8008e70:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e72:	682b      	ldr	r3, [r5, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	ea37 0303 	bics.w	r3, r7, r3
 8008e7a:	bf0c      	ite	eq
 8008e7c:	2301      	moveq	r3, #1
 8008e7e:	2300      	movne	r3, #0
 8008e80:	42b3      	cmp	r3, r6
 8008e82:	d11d      	bne.n	8008ec0 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8008e84:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8008e88:	d0f3      	beq.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008e8a:	b12c      	cbz	r4, 8008e98 <UART_WaitOnFlagUntilTimeout+0x34>
 8008e8c:	f7fc fe6e 	bl	8005b6c <HAL_GetTick>
 8008e90:	eba0 0008 	sub.w	r0, r0, r8
 8008e94:	42a0      	cmp	r0, r4
 8008e96:	d9ec      	bls.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e98:	682a      	ldr	r2, [r5, #0]
 8008e9a:	68d3      	ldr	r3, [r2, #12]
 8008e9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ea0:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea2:	682a      	ldr	r2, [r5, #0]
 8008ea4:	6953      	ldr	r3, [r2, #20]
 8008ea6:	f023 0301 	bic.w	r3, r3, #1
 8008eaa:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8008eac:	2320      	movs	r3, #32
 8008eae:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008eb2:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8008ebc:	2003      	movs	r0, #3
 8008ebe:	e000      	b.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8008ec0:	2000      	movs	r0, #0
}
 8008ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008ec6 <HAL_UART_Init>:
  if (huart == NULL)
 8008ec6:	b358      	cbz	r0, 8008f20 <HAL_UART_Init+0x5a>
{
 8008ec8:	b510      	push	{r4, lr}
 8008eca:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008ecc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8008ed0:	b30b      	cbz	r3, 8008f16 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8008ed2:	2324      	movs	r3, #36	; 0x24
 8008ed4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8008ed8:	6822      	ldr	r2, [r4, #0]
 8008eda:	68d3      	ldr	r3, [r2, #12]
 8008edc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ee0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f7ff feb2 	bl	8008c4c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ee8:	6822      	ldr	r2, [r4, #0]
 8008eea:	6913      	ldr	r3, [r2, #16]
 8008eec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008ef0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ef2:	6822      	ldr	r2, [r4, #0]
 8008ef4:	6953      	ldr	r3, [r2, #20]
 8008ef6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8008efa:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8008efc:	6822      	ldr	r2, [r4, #0]
 8008efe:	68d3      	ldr	r3, [r2, #12]
 8008f00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008f04:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f06:	2000      	movs	r0, #0
 8008f08:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008f0a:	2320      	movs	r3, #32
 8008f0c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008f10:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8008f14:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008f16:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8008f1a:	f7fc f883 	bl	8005024 <HAL_UART_MspInit>
 8008f1e:	e7d8      	b.n	8008ed2 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8008f20:	2001      	movs	r0, #1
}
 8008f22:	4770      	bx	lr

08008f24 <HAL_UART_Transmit>:
{
 8008f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f28:	b083      	sub	sp, #12
 8008f2a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008f2c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b20      	cmp	r3, #32
 8008f34:	d156      	bne.n	8008fe4 <HAL_UART_Transmit+0xc0>
 8008f36:	4604      	mov	r4, r0
 8008f38:	460d      	mov	r5, r1
 8008f3a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8008f3c:	2900      	cmp	r1, #0
 8008f3e:	d056      	beq.n	8008fee <HAL_UART_Transmit+0xca>
 8008f40:	2a00      	cmp	r2, #0
 8008f42:	d056      	beq.n	8008ff2 <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 8008f44:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d054      	beq.n	8008ff6 <HAL_UART_Transmit+0xd2>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f52:	f04f 0900 	mov.w	r9, #0
 8008f56:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f5a:	2321      	movs	r3, #33	; 0x21
 8008f5c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8008f60:	f7fc fe04 	bl	8005b6c <HAL_GetTick>
 8008f64:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8008f66:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f6a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8008f6e:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8008f72:	e010      	b.n	8008f96 <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f74:	9600      	str	r6, [sp, #0]
 8008f76:	463b      	mov	r3, r7
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2180      	movs	r1, #128	; 0x80
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f7ff ff71 	bl	8008e64 <UART_WaitOnFlagUntilTimeout>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d139      	bne.n	8008ffa <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008f86:	882b      	ldrh	r3, [r5, #0]
 8008f88:	6822      	ldr	r2, [r4, #0]
 8008f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f8e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008f90:	6923      	ldr	r3, [r4, #16]
 8008f92:	b9c3      	cbnz	r3, 8008fc6 <HAL_UART_Transmit+0xa2>
          pData += 2U;
 8008f94:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8008f96:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	b1b3      	cbz	r3, 8008fca <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8008f9c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008fa4:	68a3      	ldr	r3, [r4, #8]
 8008fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008faa:	d0e3      	beq.n	8008f74 <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fac:	9600      	str	r6, [sp, #0]
 8008fae:	463b      	mov	r3, r7
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2180      	movs	r1, #128	; 0x80
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f7ff ff55 	bl	8008e64 <UART_WaitOnFlagUntilTimeout>
 8008fba:	bb00      	cbnz	r0, 8008ffe <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008fbc:	782a      	ldrb	r2, [r5, #0]
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	605a      	str	r2, [r3, #4]
 8008fc2:	3501      	adds	r5, #1
 8008fc4:	e7e7      	b.n	8008f96 <HAL_UART_Transmit+0x72>
          pData += 1U;
 8008fc6:	3501      	adds	r5, #1
 8008fc8:	e7e5      	b.n	8008f96 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fca:	9600      	str	r6, [sp, #0]
 8008fcc:	463b      	mov	r3, r7
 8008fce:	2200      	movs	r2, #0
 8008fd0:	2140      	movs	r1, #64	; 0x40
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f7ff ff46 	bl	8008e64 <UART_WaitOnFlagUntilTimeout>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	b990      	cbnz	r0, 8009002 <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 8008fdc:	2220      	movs	r2, #32
 8008fde:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    return HAL_OK;
 8008fe2:	e000      	b.n	8008fe6 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8008fe4:	2302      	movs	r3, #2
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	b003      	add	sp, #12
 8008fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e7f9      	b.n	8008fe6 <HAL_UART_Transmit+0xc2>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e7f7      	b.n	8008fe6 <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e7f5      	b.n	8008fe6 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e7f3      	b.n	8008fe6 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	e7f1      	b.n	8008fe6 <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e7ef      	b.n	8008fe6 <HAL_UART_Transmit+0xc2>

08009006 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8009006:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b20      	cmp	r3, #32
 800900e:	d116      	bne.n	800903e <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 8009010:	b1b9      	cbz	r1, 8009042 <HAL_UART_Transmit_IT+0x3c>
 8009012:	b1c2      	cbz	r2, 8009046 <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8009014:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8009018:	2b01      	cmp	r3, #1
 800901a:	d016      	beq.n	800904a <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 800901c:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800901e:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8009020:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009022:	2300      	movs	r3, #0
 8009024:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009026:	2221      	movs	r2, #33	; 0x21
 8009028:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800902c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009030:	6801      	ldr	r1, [r0, #0]
 8009032:	68ca      	ldr	r2, [r1, #12]
 8009034:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009038:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800903a:	4618      	mov	r0, r3
 800903c:	4770      	bx	lr
    return HAL_BUSY;
 800903e:	2002      	movs	r0, #2
 8009040:	4770      	bx	lr
      return HAL_ERROR;
 8009042:	2001      	movs	r0, #1
 8009044:	4770      	bx	lr
 8009046:	2001      	movs	r0, #1
 8009048:	4770      	bx	lr
    __HAL_LOCK(huart);
 800904a:	2002      	movs	r0, #2
}
 800904c:	4770      	bx	lr
	...

08009050 <HAL_UART_Receive_DMA>:
{
 8009050:	b530      	push	{r4, r5, lr}
 8009052:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8009054:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8009058:	b2e4      	uxtb	r4, r4
 800905a:	2c20      	cmp	r4, #32
 800905c:	d13d      	bne.n	80090da <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 800905e:	2900      	cmp	r1, #0
 8009060:	d03e      	beq.n	80090e0 <HAL_UART_Receive_DMA+0x90>
 8009062:	2a00      	cmp	r2, #0
 8009064:	d03e      	beq.n	80090e4 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 8009066:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800906a:	2b01      	cmp	r3, #1
 800906c:	d03c      	beq.n	80090e8 <HAL_UART_Receive_DMA+0x98>
 800906e:	4613      	mov	r3, r2
 8009070:	460a      	mov	r2, r1
 8009072:	4604      	mov	r4, r0
 8009074:	2101      	movs	r1, #1
 8009076:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 800907a:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 800907c:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800907e:	2500      	movs	r5, #0
 8009080:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009082:	2122      	movs	r1, #34	; 0x22
 8009084:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009088:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800908a:	4818      	ldr	r0, [pc, #96]	; (80090ec <HAL_UART_Receive_DMA+0x9c>)
 800908c:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800908e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009090:	4817      	ldr	r0, [pc, #92]	; (80090f0 <HAL_UART_Receive_DMA+0xa0>)
 8009092:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009096:	4817      	ldr	r0, [pc, #92]	; (80090f4 <HAL_UART_Receive_DMA+0xa4>)
 8009098:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800909a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800909c:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800909e:	6821      	ldr	r1, [r4, #0]
 80090a0:	3104      	adds	r1, #4
 80090a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80090a4:	f7fd f866 	bl	8006174 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80090a8:	9501      	str	r5, [sp, #4]
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	9201      	str	r2, [sp, #4]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	9201      	str	r2, [sp, #4]
 80090b4:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 80090b6:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ba:	68da      	ldr	r2, [r3, #12]
 80090bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090c0:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c2:	6822      	ldr	r2, [r4, #0]
 80090c4:	6953      	ldr	r3, [r2, #20]
 80090c6:	f043 0301 	orr.w	r3, r3, #1
 80090ca:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090cc:	6822      	ldr	r2, [r4, #0]
 80090ce:	6953      	ldr	r3, [r2, #20]
 80090d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090d4:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80090d6:	4628      	mov	r0, r5
 80090d8:	e000      	b.n	80090dc <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 80090da:	2002      	movs	r0, #2
}
 80090dc:	b003      	add	sp, #12
 80090de:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 80090e0:	2001      	movs	r0, #1
 80090e2:	e7fb      	b.n	80090dc <HAL_UART_Receive_DMA+0x8c>
 80090e4:	2001      	movs	r0, #1
 80090e6:	e7f9      	b.n	80090dc <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 80090e8:	2002      	movs	r0, #2
 80090ea:	e7f7      	b.n	80090dc <HAL_UART_Receive_DMA+0x8c>
 80090ec:	08009161 	.word	0x08009161
 80090f0:	0800923d 	.word	0x0800923d
 80090f4:	08009249 	.word	0x08009249

080090f8 <HAL_UART_AbortTransmit>:
{
 80090f8:	b510      	push	{r4, lr}
 80090fa:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80090fc:	6802      	ldr	r2, [r0, #0]
 80090fe:	68d3      	ldr	r3, [r2, #12]
 8009100:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009104:	60d3      	str	r3, [r2, #12]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009106:	6803      	ldr	r3, [r0, #0]
 8009108:	695a      	ldr	r2, [r3, #20]
 800910a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800910e:	d00b      	beq.n	8009128 <HAL_UART_AbortTransmit+0x30>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009110:	695a      	ldr	r2, [r3, #20]
 8009112:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009116:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 8009118:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800911a:	b12b      	cbz	r3, 8009128 <HAL_UART_AbortTransmit+0x30>
      huart->hdmatx->XferAbortCallback = NULL;
 800911c:	2200      	movs	r2, #0
 800911e:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009120:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8009122:	f7fd f85c 	bl	80061de <HAL_DMA_Abort>
 8009126:	b928      	cbnz	r0, 8009134 <HAL_UART_AbortTransmit+0x3c>
  huart->TxXferCount = 0x00U;
 8009128:	2000      	movs	r0, #0
 800912a:	84e0      	strh	r0, [r4, #38]	; 0x26
  huart->gState = HAL_UART_STATE_READY;
 800912c:	2320      	movs	r3, #32
 800912e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8009132:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009134:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009136:	f7fd f99d 	bl	8006474 <HAL_DMA_GetError>
 800913a:	2820      	cmp	r0, #32
 800913c:	d1f4      	bne.n	8009128 <HAL_UART_AbortTransmit+0x30>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800913e:	2310      	movs	r3, #16
 8009140:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8009142:	2003      	movs	r0, #3
 8009144:	e7f5      	b.n	8009132 <HAL_UART_AbortTransmit+0x3a>

08009146 <UART_EndTransmit_IT>:
{
 8009146:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009148:	6801      	ldr	r1, [r0, #0]
 800914a:	68cb      	ldr	r3, [r1, #12]
 800914c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009150:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8009152:	2320      	movs	r3, #32
 8009154:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8009158:	f7fb fa1a 	bl	8004590 <HAL_UART_TxCpltCallback>
}
 800915c:	2000      	movs	r0, #0
 800915e:	bd08      	pop	{r3, pc}

08009160 <UART_DMAReceiveCplt>:
{
 8009160:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009162:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009164:	6802      	ldr	r2, [r0, #0]
 8009166:	6812      	ldr	r2, [r2, #0]
 8009168:	f412 7f80 	tst.w	r2, #256	; 0x100
 800916c:	d113      	bne.n	8009196 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 800916e:	2200      	movs	r2, #0
 8009170:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009172:	6819      	ldr	r1, [r3, #0]
 8009174:	68ca      	ldr	r2, [r1, #12]
 8009176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800917a:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917c:	6819      	ldr	r1, [r3, #0]
 800917e:	694a      	ldr	r2, [r1, #20]
 8009180:	f022 0201 	bic.w	r2, r2, #1
 8009184:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009186:	6819      	ldr	r1, [r3, #0]
 8009188:	694a      	ldr	r2, [r1, #20]
 800918a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800918e:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8009190:	2220      	movs	r2, #32
 8009192:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8009196:	4618      	mov	r0, r3
 8009198:	f7fb f9ec 	bl	8004574 <HAL_UART_RxCpltCallback>
}
 800919c:	bd08      	pop	{r3, pc}

0800919e <UART_Receive_IT>:
{
 800919e:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091a0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b22      	cmp	r3, #34	; 0x22
 80091a8:	d145      	bne.n	8009236 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80091aa:	6883      	ldr	r3, [r0, #8]
 80091ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b0:	d00e      	beq.n	80091d0 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80091b2:	6903      	ldr	r3, [r0, #16]
 80091b4:	bb03      	cbnz	r3, 80091f8 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80091b6:	6803      	ldr	r3, [r0, #0]
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80091bc:	1c59      	adds	r1, r3, #1
 80091be:	6281      	str	r1, [r0, #40]	; 0x28
 80091c0:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 80091c2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80091c4:	3b01      	subs	r3, #1
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80091ca:	b1f3      	cbz	r3, 800920a <UART_Receive_IT+0x6c>
    return HAL_OK;
 80091cc:	2000      	movs	r0, #0
 80091ce:	e033      	b.n	8009238 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80091d0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 80091d2:	6903      	ldr	r3, [r0, #16]
 80091d4:	b943      	cbnz	r3, 80091e8 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80091d6:	6803      	ldr	r3, [r0, #0]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091de:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 80091e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80091e2:	3302      	adds	r3, #2
 80091e4:	6283      	str	r3, [r0, #40]	; 0x28
 80091e6:	e7ec      	b.n	80091c2 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80091e8:	6803      	ldr	r3, [r0, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 80091f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80091f2:	3301      	adds	r3, #1
 80091f4:	6283      	str	r3, [r0, #40]	; 0x28
 80091f6:	e7e4      	b.n	80091c2 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80091f8:	6803      	ldr	r3, [r0, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80091fe:	1c51      	adds	r1, r2, #1
 8009200:	6281      	str	r1, [r0, #40]	; 0x28
 8009202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009206:	7013      	strb	r3, [r2, #0]
 8009208:	e7db      	b.n	80091c2 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800920a:	6802      	ldr	r2, [r0, #0]
 800920c:	68d3      	ldr	r3, [r2, #12]
 800920e:	f023 0320 	bic.w	r3, r3, #32
 8009212:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009214:	6802      	ldr	r2, [r0, #0]
 8009216:	68d3      	ldr	r3, [r2, #12]
 8009218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800921c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800921e:	6802      	ldr	r2, [r0, #0]
 8009220:	6953      	ldr	r3, [r2, #20]
 8009222:	f023 0301 	bic.w	r3, r3, #1
 8009226:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8009228:	2320      	movs	r3, #32
 800922a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800922e:	f7fb f9a1 	bl	8004574 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8009232:	2000      	movs	r0, #0
 8009234:	e000      	b.n	8009238 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8009236:	2002      	movs	r0, #2
}
 8009238:	bd08      	pop	{r3, pc}

0800923a <HAL_UART_RxHalfCpltCallback>:
}
 800923a:	4770      	bx	lr

0800923c <UART_DMARxHalfCplt>:
{
 800923c:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800923e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8009240:	f7ff fffb 	bl	800923a <HAL_UART_RxHalfCpltCallback>
}
 8009244:	bd08      	pop	{r3, pc}

08009246 <HAL_UART_ErrorCallback>:
}
 8009246:	4770      	bx	lr

08009248 <UART_DMAError>:
{
 8009248:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800924a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009250:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b21      	cmp	r3, #33	; 0x21
 8009258:	d010      	beq.n	800927c <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	695a      	ldr	r2, [r3, #20]
 800925e:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009262:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b22      	cmp	r3, #34	; 0x22
 800926a:	d011      	beq.n	8009290 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800926c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800926e:	f043 0310 	orr.w	r3, r3, #16
 8009272:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8009274:	4620      	mov	r0, r4
 8009276:	f7ff ffe6 	bl	8009246 <HAL_UART_ErrorCallback>
}
 800927a:	bd10      	pop	{r4, pc}
 800927c:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009280:	2a00      	cmp	r2, #0
 8009282:	d0ea      	beq.n	800925a <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8009284:	2300      	movs	r3, #0
 8009286:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009288:	4620      	mov	r0, r4
 800928a:	f7ff fc94 	bl	8008bb6 <UART_EndTxTransfer>
 800928e:	e7e4      	b.n	800925a <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009290:	2a00      	cmp	r2, #0
 8009292:	d0eb      	beq.n	800926c <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8009294:	2300      	movs	r3, #0
 8009296:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009298:	4620      	mov	r0, r4
 800929a:	f7ff fc95 	bl	8008bc8 <UART_EndRxTransfer>
 800929e:	e7e5      	b.n	800926c <UART_DMAError+0x24>

080092a0 <HAL_UART_IRQHandler>:
{
 80092a0:	b510      	push	{r4, lr}
 80092a2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80092a4:	6802      	ldr	r2, [r0, #0]
 80092a6:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092a8:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092aa:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 80092ac:	f013 000f 	ands.w	r0, r3, #15
 80092b0:	d105      	bne.n	80092be <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80092b2:	f013 0f20 	tst.w	r3, #32
 80092b6:	d002      	beq.n	80092be <HAL_UART_IRQHandler+0x1e>
 80092b8:	f011 0f20 	tst.w	r1, #32
 80092bc:	d156      	bne.n	800936c <HAL_UART_IRQHandler+0xcc>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80092be:	2800      	cmp	r0, #0
 80092c0:	d06a      	beq.n	8009398 <HAL_UART_IRQHandler+0xf8>
 80092c2:	f012 0201 	ands.w	r2, r2, #1
 80092c6:	d102      	bne.n	80092ce <HAL_UART_IRQHandler+0x2e>
 80092c8:	f411 7f90 	tst.w	r1, #288	; 0x120
 80092cc:	d064      	beq.n	8009398 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80092ce:	f013 0f01 	tst.w	r3, #1
 80092d2:	d006      	beq.n	80092e2 <HAL_UART_IRQHandler+0x42>
 80092d4:	f411 7f80 	tst.w	r1, #256	; 0x100
 80092d8:	d003      	beq.n	80092e2 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80092dc:	f040 0001 	orr.w	r0, r0, #1
 80092e0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092e2:	f013 0f04 	tst.w	r3, #4
 80092e6:	d004      	beq.n	80092f2 <HAL_UART_IRQHandler+0x52>
 80092e8:	b11a      	cbz	r2, 80092f2 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80092ec:	f040 0002 	orr.w	r0, r0, #2
 80092f0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092f2:	f013 0f02 	tst.w	r3, #2
 80092f6:	d004      	beq.n	8009302 <HAL_UART_IRQHandler+0x62>
 80092f8:	b11a      	cbz	r2, 8009302 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80092fc:	f040 0004 	orr.w	r0, r0, #4
 8009300:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009302:	f013 0f08 	tst.w	r3, #8
 8009306:	d007      	beq.n	8009318 <HAL_UART_IRQHandler+0x78>
 8009308:	f011 0f20 	tst.w	r1, #32
 800930c:	d100      	bne.n	8009310 <HAL_UART_IRQHandler+0x70>
 800930e:	b11a      	cbz	r2, 8009318 <HAL_UART_IRQHandler+0x78>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009310:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009312:	f042 0208 	orr.w	r2, r2, #8
 8009316:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009318:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800931a:	2a00      	cmp	r2, #0
 800931c:	d048      	beq.n	80093b0 <HAL_UART_IRQHandler+0x110>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800931e:	f013 0f20 	tst.w	r3, #32
 8009322:	d002      	beq.n	800932a <HAL_UART_IRQHandler+0x8a>
 8009324:	f011 0f20 	tst.w	r1, #32
 8009328:	d124      	bne.n	8009374 <HAL_UART_IRQHandler+0xd4>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009332:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009334:	f012 0f08 	tst.w	r2, #8
 8009338:	d100      	bne.n	800933c <HAL_UART_IRQHandler+0x9c>
 800933a:	b33b      	cbz	r3, 800938c <HAL_UART_IRQHandler+0xec>
        UART_EndRxTransfer(huart);
 800933c:	4620      	mov	r0, r4
 800933e:	f7ff fc43 	bl	8008bc8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	695a      	ldr	r2, [r3, #20]
 8009346:	f012 0f40 	tst.w	r2, #64	; 0x40
 800934a:	d01b      	beq.n	8009384 <HAL_UART_IRQHandler+0xe4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800934c:	695a      	ldr	r2, [r3, #20]
 800934e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009352:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8009354:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009356:	b18b      	cbz	r3, 800937c <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009358:	4a1a      	ldr	r2, [pc, #104]	; (80093c4 <HAL_UART_IRQHandler+0x124>)
 800935a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800935c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800935e:	f7fc ff88 	bl	8006272 <HAL_DMA_Abort_IT>
 8009362:	b328      	cbz	r0, 80093b0 <HAL_UART_IRQHandler+0x110>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009364:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009366:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009368:	4798      	blx	r3
 800936a:	e021      	b.n	80093b0 <HAL_UART_IRQHandler+0x110>
      UART_Receive_IT(huart);
 800936c:	4620      	mov	r0, r4
 800936e:	f7ff ff16 	bl	800919e <UART_Receive_IT>
      return;
 8009372:	e01d      	b.n	80093b0 <HAL_UART_IRQHandler+0x110>
        UART_Receive_IT(huart);
 8009374:	4620      	mov	r0, r4
 8009376:	f7ff ff12 	bl	800919e <UART_Receive_IT>
 800937a:	e7d6      	b.n	800932a <HAL_UART_IRQHandler+0x8a>
            HAL_UART_ErrorCallback(huart);
 800937c:	4620      	mov	r0, r4
 800937e:	f7ff ff62 	bl	8009246 <HAL_UART_ErrorCallback>
 8009382:	e015      	b.n	80093b0 <HAL_UART_IRQHandler+0x110>
          HAL_UART_ErrorCallback(huart);
 8009384:	4620      	mov	r0, r4
 8009386:	f7ff ff5e 	bl	8009246 <HAL_UART_ErrorCallback>
 800938a:	e011      	b.n	80093b0 <HAL_UART_IRQHandler+0x110>
        HAL_UART_ErrorCallback(huart);
 800938c:	4620      	mov	r0, r4
 800938e:	f7ff ff5a 	bl	8009246 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009392:	2300      	movs	r3, #0
 8009394:	63e3      	str	r3, [r4, #60]	; 0x3c
 8009396:	e00b      	b.n	80093b0 <HAL_UART_IRQHandler+0x110>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009398:	f013 0f80 	tst.w	r3, #128	; 0x80
 800939c:	d002      	beq.n	80093a4 <HAL_UART_IRQHandler+0x104>
 800939e:	f011 0f80 	tst.w	r1, #128	; 0x80
 80093a2:	d106      	bne.n	80093b2 <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80093a8:	d002      	beq.n	80093b0 <HAL_UART_IRQHandler+0x110>
 80093aa:	f011 0f40 	tst.w	r1, #64	; 0x40
 80093ae:	d104      	bne.n	80093ba <HAL_UART_IRQHandler+0x11a>
}
 80093b0:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 80093b2:	4620      	mov	r0, r4
 80093b4:	f7ff fc16 	bl	8008be4 <UART_Transmit_IT>
    return;
 80093b8:	e7fa      	b.n	80093b0 <HAL_UART_IRQHandler+0x110>
    UART_EndTransmit_IT(huart);
 80093ba:	4620      	mov	r0, r4
 80093bc:	f7ff fec3 	bl	8009146 <UART_EndTransmit_IT>
    return;
 80093c0:	e7f6      	b.n	80093b0 <HAL_UART_IRQHandler+0x110>
 80093c2:	bf00      	nop
 80093c4:	080093c9 	.word	0x080093c9

080093c8 <UART_DMAAbortOnError>:
{
 80093c8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80093d0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80093d2:	f7ff ff38 	bl	8009246 <HAL_UART_ErrorCallback>
}
 80093d6:	bd08      	pop	{r3, pc}

080093d8 <HAL_UART_AbortReceiveCpltCallback>:
}
 80093d8:	4770      	bx	lr
	...

080093dc <HAL_UART_AbortReceive_IT>:
{
 80093dc:	b510      	push	{r4, lr}
 80093de:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093e0:	6802      	ldr	r2, [r0, #0]
 80093e2:	68d3      	ldr	r3, [r2, #12]
 80093e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093e8:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ea:	6802      	ldr	r2, [r0, #0]
 80093ec:	6953      	ldr	r3, [r2, #20]
 80093ee:	f023 0301 	bic.w	r3, r3, #1
 80093f2:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093f4:	6803      	ldr	r3, [r0, #0]
 80093f6:	695a      	ldr	r2, [r3, #20]
 80093f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80093fc:	d018      	beq.n	8009430 <HAL_UART_AbortReceive_IT+0x54>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093fe:	695a      	ldr	r2, [r3, #20]
 8009400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009404:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 8009406:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009408:	b153      	cbz	r3, 8009420 <HAL_UART_AbortReceive_IT+0x44>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800940a:	4a0d      	ldr	r2, [pc, #52]	; (8009440 <HAL_UART_AbortReceive_IT+0x64>)
 800940c:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800940e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8009410:	f7fc ff2f 	bl	8006272 <HAL_DMA_Abort_IT>
 8009414:	b110      	cbz	r0, 800941c <HAL_UART_AbortReceive_IT+0x40>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009416:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009418:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800941a:	4798      	blx	r3
}
 800941c:	2000      	movs	r0, #0
 800941e:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0x00U;
 8009420:	2300      	movs	r3, #0
 8009422:	85c3      	strh	r3, [r0, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 8009424:	2320      	movs	r3, #32
 8009426:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_AbortReceiveCpltCallback(huart);
 800942a:	f7ff ffd5 	bl	80093d8 <HAL_UART_AbortReceiveCpltCallback>
 800942e:	e7f5      	b.n	800941c <HAL_UART_AbortReceive_IT+0x40>
    huart->RxXferCount = 0x00U;
 8009430:	2300      	movs	r3, #0
 8009432:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 8009434:	2320      	movs	r3, #32
 8009436:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 800943a:	f7ff ffcd 	bl	80093d8 <HAL_UART_AbortReceiveCpltCallback>
 800943e:	e7ed      	b.n	800941c <HAL_UART_AbortReceive_IT+0x40>
 8009440:	08009445 	.word	0x08009445

08009444 <UART_DMARxOnlyAbortCallback>:
{
 8009444:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009446:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8009448:	2300      	movs	r3, #0
 800944a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 800944c:	2320      	movs	r3, #32
 800944e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 8009452:	f7ff ffc1 	bl	80093d8 <HAL_UART_AbortReceiveCpltCallback>
}
 8009456:	bd08      	pop	{r3, pc}

08009458 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8009458:	2884      	cmp	r0, #132	; 0x84
 800945a:	d001      	beq.n	8009460 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 800945c:	3003      	adds	r0, #3
 800945e:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009460:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8009462:	4770      	bx	lr

08009464 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009464:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8009466:	f000 ff9b 	bl	800a3a0 <vTaskStartScheduler>
  
  return osOK;
}
 800946a:	2000      	movs	r0, #0
 800946c:	bd08      	pop	{r3, pc}

0800946e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800946e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009472:	b087      	sub	sp, #28
 8009474:	4604      	mov	r4, r0
 8009476:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009478:	6945      	ldr	r5, [r0, #20]
 800947a:	b1a5      	cbz	r5, 80094a6 <osThreadCreate+0x38>
 800947c:	6986      	ldr	r6, [r0, #24]
 800947e:	b196      	cbz	r6, 80094a6 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009480:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8009484:	f8d0 9000 	ldr.w	r9, [r0]
 8009488:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800948c:	f7ff ffe4 	bl	8009458 <makeFreeRtosPriority>
 8009490:	6922      	ldr	r2, [r4, #16]
 8009492:	9602      	str	r6, [sp, #8]
 8009494:	9501      	str	r5, [sp, #4]
 8009496:	9000      	str	r0, [sp, #0]
 8009498:	463b      	mov	r3, r7
 800949a:	4649      	mov	r1, r9
 800949c:	4640      	mov	r0, r8
 800949e:	f000 feca 	bl	800a236 <xTaskCreateStatic>
 80094a2:	9005      	str	r0, [sp, #20]
 80094a4:	e013      	b.n	80094ce <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80094a6:	6865      	ldr	r5, [r4, #4]
 80094a8:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80094aa:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80094ae:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80094b2:	f7ff ffd1 	bl	8009458 <makeFreeRtosPriority>
 80094b6:	ab05      	add	r3, sp, #20
 80094b8:	9301      	str	r3, [sp, #4]
 80094ba:	9000      	str	r0, [sp, #0]
 80094bc:	463b      	mov	r3, r7
 80094be:	fa1f f288 	uxth.w	r2, r8
 80094c2:	4631      	mov	r1, r6
 80094c4:	4628      	mov	r0, r5
 80094c6:	f000 fef0 	bl	800a2aa <xTaskCreate>
 80094ca:	2801      	cmp	r0, #1
 80094cc:	d103      	bne.n	80094d6 <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80094ce:	9805      	ldr	r0, [sp, #20]
}
 80094d0:	b007      	add	sp, #28
 80094d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 80094d6:	2000      	movs	r0, #0
 80094d8:	e7fa      	b.n	80094d0 <osThreadCreate+0x62>

080094da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80094da:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80094dc:	4603      	mov	r3, r0
 80094de:	b900      	cbnz	r0, 80094e2 <osDelay+0x8>
 80094e0:	2301      	movs	r3, #1
 80094e2:	4618      	mov	r0, r3
 80094e4:	f001 f8be 	bl	800a664 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80094e8:	2000      	movs	r0, #0
 80094ea:	bd08      	pop	{r3, pc}

080094ec <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80094ec:	b510      	push	{r4, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80094f2:	6844      	ldr	r4, [r0, #4]
 80094f4:	b16c      	cbz	r4, 8009512 <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 80094f6:	2901      	cmp	r1, #1
 80094f8:	d009      	beq.n	800950e <osTimerCreate+0x22>
 80094fa:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80094fc:	6801      	ldr	r1, [r0, #0]
    return xTimerCreateStatic((const char *)"",
 80094fe:	9401      	str	r4, [sp, #4]
 8009500:	9100      	str	r1, [sp, #0]
 8009502:	2101      	movs	r1, #1
 8009504:	4809      	ldr	r0, [pc, #36]	; (800952c <osTimerCreate+0x40>)
 8009506:	f001 ff27 	bl	800b358 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 800950a:	b002      	add	sp, #8
 800950c:	bd10      	pop	{r4, pc}
    return xTimerCreateStatic((const char *)"",
 800950e:	2201      	movs	r2, #1
 8009510:	e7f4      	b.n	80094fc <osTimerCreate+0x10>
    return xTimerCreate((const char *)"",
 8009512:	2901      	cmp	r1, #1
 8009514:	d007      	beq.n	8009526 <osTimerCreate+0x3a>
 8009516:	2200      	movs	r2, #0
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8009518:	6801      	ldr	r1, [r0, #0]
    return xTimerCreate((const char *)"",
 800951a:	9100      	str	r1, [sp, #0]
 800951c:	2101      	movs	r1, #1
 800951e:	4803      	ldr	r0, [pc, #12]	; (800952c <osTimerCreate+0x40>)
 8009520:	f001 fefe 	bl	800b320 <xTimerCreate>
 8009524:	e7f1      	b.n	800950a <osTimerCreate+0x1e>
 8009526:	2201      	movs	r2, #1
 8009528:	e7f6      	b.n	8009518 <osTimerCreate+0x2c>
 800952a:	bf00      	nop
 800952c:	0800db78 	.word	0x0800db78

08009530 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009530:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009532:	6841      	ldr	r1, [r0, #4]
 8009534:	b119      	cbz	r1, 800953e <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009536:	2001      	movs	r0, #1
 8009538:	f000 faa3 	bl	8009a82 <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800953c:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 800953e:	2001      	movs	r0, #1
 8009540:	f000 fa94 	bl	8009a6c <xQueueCreateMutex>
 8009544:	e7fa      	b.n	800953c <osMutexCreate+0xc>

08009546 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009546:	b510      	push	{r4, lr}
 8009548:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800954a:	6882      	ldr	r2, [r0, #8]
 800954c:	b10a      	cbz	r2, 8009552 <osMessageCreate+0xc>
 800954e:	68c3      	ldr	r3, [r0, #12]
 8009550:	b933      	cbnz	r3, 8009560 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009552:	2200      	movs	r2, #0
 8009554:	6841      	ldr	r1, [r0, #4]
 8009556:	6800      	ldr	r0, [r0, #0]
 8009558:	f000 f996 	bl	8009888 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800955c:	b002      	add	sp, #8
 800955e:	bd10      	pop	{r4, pc}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009560:	6841      	ldr	r1, [r0, #4]
 8009562:	6800      	ldr	r0, [r0, #0]
 8009564:	2400      	movs	r4, #0
 8009566:	9400      	str	r4, [sp, #0]
 8009568:	f000 f945 	bl	80097f6 <xQueueGenericCreateStatic>
 800956c:	e7f6      	b.n	800955c <osMessageCreate+0x16>

0800956e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800956e:	f100 0308 	add.w	r3, r0, #8
 8009572:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009578:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800957a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800957c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800957e:	2300      	movs	r3, #0
 8009580:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009582:	4770      	bx	lr

08009584 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009584:	2300      	movs	r3, #0
 8009586:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009588:	4770      	bx	lr

0800958a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800958a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800958c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009592:	689a      	ldr	r2, [r3, #8]
 8009594:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009596:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009598:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800959a:	6803      	ldr	r3, [r0, #0]
 800959c:	3301      	adds	r3, #1
 800959e:	6003      	str	r3, [r0, #0]
}
 80095a0:	4770      	bx	lr

080095a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095a2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80095a4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80095a6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80095aa:	d002      	beq.n	80095b2 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80095ac:	f100 0208 	add.w	r2, r0, #8
 80095b0:	e002      	b.n	80095b8 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 80095b2:	6902      	ldr	r2, [r0, #16]
 80095b4:	e004      	b.n	80095c0 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80095b6:	461a      	mov	r2, r3
 80095b8:	6853      	ldr	r3, [r2, #4]
 80095ba:	681c      	ldr	r4, [r3, #0]
 80095bc:	42ac      	cmp	r4, r5
 80095be:	d9fa      	bls.n	80095b6 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80095c0:	6853      	ldr	r3, [r2, #4]
 80095c2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80095c4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80095c6:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80095c8:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80095ca:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80095cc:	6803      	ldr	r3, [r0, #0]
 80095ce:	3301      	adds	r3, #1
 80095d0:	6003      	str	r3, [r0, #0]
}
 80095d2:	bc30      	pop	{r4, r5}
 80095d4:	4770      	bx	lr

080095d6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80095d6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095d8:	6842      	ldr	r2, [r0, #4]
 80095da:	6881      	ldr	r1, [r0, #8]
 80095dc:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095de:	6882      	ldr	r2, [r0, #8]
 80095e0:	6841      	ldr	r1, [r0, #4]
 80095e2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	4282      	cmp	r2, r0
 80095e8:	d006      	beq.n	80095f8 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095ea:	2200      	movs	r2, #0
 80095ec:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	3a01      	subs	r2, #1
 80095f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095f4:	6818      	ldr	r0, [r3, #0]
}
 80095f6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095f8:	6882      	ldr	r2, [r0, #8]
 80095fa:	605a      	str	r2, [r3, #4]
 80095fc:	e7f5      	b.n	80095ea <uxListRemove+0x14>

080095fe <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80095fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009600:	b123      	cbz	r3, 800960c <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009602:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009604:	6818      	ldr	r0, [r3, #0]
 8009606:	f1c0 0007 	rsb	r0, r0, #7
 800960a:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800960c:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800960e:	4770      	bx	lr

08009610 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009610:	b510      	push	{r4, lr}
 8009612:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009614:	f002 f8b6 	bl	800b784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009618:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800961a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800961c:	429a      	cmp	r2, r3
 800961e:	d004      	beq.n	800962a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8009620:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8009622:	f002 f8d1 	bl	800b7c8 <vPortExitCritical>

	return xReturn;
}
 8009626:	4620      	mov	r0, r4
 8009628:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800962a:	2401      	movs	r4, #1
 800962c:	e7f9      	b.n	8009622 <prvIsQueueFull+0x12>

0800962e <prvIsQueueEmpty>:
{
 800962e:	b510      	push	{r4, lr}
 8009630:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009632:	f002 f8a7 	bl	800b784 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009636:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009638:	b123      	cbz	r3, 8009644 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 800963a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800963c:	f002 f8c4 	bl	800b7c8 <vPortExitCritical>
}
 8009640:	4620      	mov	r0, r4
 8009642:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8009644:	2401      	movs	r4, #1
 8009646:	e7f9      	b.n	800963c <prvIsQueueEmpty+0xe>

08009648 <prvCopyDataToQueue>:
{
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	4604      	mov	r4, r0
 800964c:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800964e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009650:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009652:	b95a      	cbnz	r2, 800966c <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009654:	6803      	ldr	r3, [r0, #0]
 8009656:	b11b      	cbz	r3, 8009660 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8009658:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800965a:	3501      	adds	r5, #1
 800965c:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800965e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009660:	6880      	ldr	r0, [r0, #8]
 8009662:	f001 fafd 	bl	800ac60 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009666:	2300      	movs	r3, #0
 8009668:	60a3      	str	r3, [r4, #8]
 800966a:	e7f6      	b.n	800965a <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800966c:	b96e      	cbnz	r6, 800968a <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800966e:	6840      	ldr	r0, [r0, #4]
 8009670:	f003 f820 	bl	800c6b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009674:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009676:	6863      	ldr	r3, [r4, #4]
 8009678:	4413      	add	r3, r2
 800967a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800967c:	68a2      	ldr	r2, [r4, #8]
 800967e:	4293      	cmp	r3, r2
 8009680:	d319      	bcc.n	80096b6 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8009686:	2000      	movs	r0, #0
 8009688:	e7e7      	b.n	800965a <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800968a:	68c0      	ldr	r0, [r0, #12]
 800968c:	f003 f812 	bl	800c6b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009690:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009692:	4252      	negs	r2, r2
 8009694:	68e3      	ldr	r3, [r4, #12]
 8009696:	4413      	add	r3, r2
 8009698:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800969a:	6821      	ldr	r1, [r4, #0]
 800969c:	428b      	cmp	r3, r1
 800969e:	d202      	bcs.n	80096a6 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80096a0:	68a3      	ldr	r3, [r4, #8]
 80096a2:	441a      	add	r2, r3
 80096a4:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80096a6:	2e02      	cmp	r6, #2
 80096a8:	d001      	beq.n	80096ae <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80096aa:	2000      	movs	r0, #0
 80096ac:	e7d5      	b.n	800965a <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096ae:	b125      	cbz	r5, 80096ba <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80096b0:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80096b2:	2000      	movs	r0, #0
 80096b4:	e7d1      	b.n	800965a <prvCopyDataToQueue+0x12>
 80096b6:	2000      	movs	r0, #0
 80096b8:	e7cf      	b.n	800965a <prvCopyDataToQueue+0x12>
 80096ba:	2000      	movs	r0, #0
 80096bc:	e7cd      	b.n	800965a <prvCopyDataToQueue+0x12>

080096be <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80096be:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80096c0:	b172      	cbz	r2, 80096e0 <prvCopyDataFromQueue+0x22>
{
 80096c2:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096c4:	68c3      	ldr	r3, [r0, #12]
 80096c6:	4413      	add	r3, r2
 80096c8:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80096ca:	6884      	ldr	r4, [r0, #8]
 80096cc:	42a3      	cmp	r3, r4
 80096ce:	d301      	bcc.n	80096d4 <prvCopyDataFromQueue+0x16>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80096d0:	6803      	ldr	r3, [r0, #0]
 80096d2:	60c3      	str	r3, [r0, #12]
 80096d4:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096d6:	68c1      	ldr	r1, [r0, #12]
 80096d8:	4620      	mov	r0, r4
 80096da:	f002 ffeb 	bl	800c6b4 <memcpy>
}
 80096de:	bd10      	pop	{r4, pc}
 80096e0:	4770      	bx	lr

080096e2 <prvUnlockQueue>:
{
 80096e2:	b538      	push	{r3, r4, r5, lr}
 80096e4:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80096e6:	f002 f84d 	bl	800b784 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80096ea:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80096ee:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096f0:	e003      	b.n	80096fa <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80096f2:	f001 f977 	bl	800a9e4 <vTaskMissedYield>
			--cTxLock;
 80096f6:	3c01      	subs	r4, #1
 80096f8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096fa:	2c00      	cmp	r4, #0
 80096fc:	dd08      	ble.n	8009710 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009700:	b133      	cbz	r3, 8009710 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009702:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009706:	f001 f8db 	bl	800a8c0 <xTaskRemoveFromEventList>
 800970a:	2800      	cmp	r0, #0
 800970c:	d0f3      	beq.n	80096f6 <prvUnlockQueue+0x14>
 800970e:	e7f0      	b.n	80096f2 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8009710:	23ff      	movs	r3, #255	; 0xff
 8009712:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009716:	f002 f857 	bl	800b7c8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800971a:	f002 f833 	bl	800b784 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800971e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8009722:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009724:	e003      	b.n	800972e <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8009726:	f001 f95d 	bl	800a9e4 <vTaskMissedYield>
				--cRxLock;
 800972a:	3c01      	subs	r4, #1
 800972c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800972e:	2c00      	cmp	r4, #0
 8009730:	dd08      	ble.n	8009744 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009732:	692b      	ldr	r3, [r5, #16]
 8009734:	b133      	cbz	r3, 8009744 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009736:	f105 0010 	add.w	r0, r5, #16
 800973a:	f001 f8c1 	bl	800a8c0 <xTaskRemoveFromEventList>
 800973e:	2800      	cmp	r0, #0
 8009740:	d0f3      	beq.n	800972a <prvUnlockQueue+0x48>
 8009742:	e7f0      	b.n	8009726 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8009744:	23ff      	movs	r3, #255	; 0xff
 8009746:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800974a:	f002 f83d 	bl	800b7c8 <vPortExitCritical>
}
 800974e:	bd38      	pop	{r3, r4, r5, pc}

08009750 <xQueueGenericReset>:
{
 8009750:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8009752:	b940      	cbnz	r0, 8009766 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	e7fe      	b.n	8009764 <xQueueGenericReset+0x14>
 8009766:	4604      	mov	r4, r0
 8009768:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800976a:	f002 f80b 	bl	800b784 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800976e:	6821      	ldr	r1, [r4, #0]
 8009770:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009774:	fb03 1002 	mla	r0, r3, r2, r1
 8009778:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800977a:	2000      	movs	r0, #0
 800977c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800977e:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009780:	3a01      	subs	r2, #1
 8009782:	fb02 1303 	mla	r3, r2, r3, r1
 8009786:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009788:	23ff      	movs	r3, #255	; 0xff
 800978a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800978e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8009792:	b9a5      	cbnz	r5, 80097be <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009794:	6923      	ldr	r3, [r4, #16]
 8009796:	b91b      	cbnz	r3, 80097a0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8009798:	f002 f816 	bl	800b7c8 <vPortExitCritical>
}
 800979c:	2001      	movs	r0, #1
 800979e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097a0:	f104 0010 	add.w	r0, r4, #16
 80097a4:	f001 f88c 	bl	800a8c0 <xTaskRemoveFromEventList>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d0f5      	beq.n	8009798 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 80097ac:	4b08      	ldr	r3, [pc, #32]	; (80097d0 <xQueueGenericReset+0x80>)
 80097ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	e7ec      	b.n	8009798 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80097be:	f104 0010 	add.w	r0, r4, #16
 80097c2:	f7ff fed4 	bl	800956e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80097c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80097ca:	f7ff fed0 	bl	800956e <vListInitialise>
 80097ce:	e7e3      	b.n	8009798 <xQueueGenericReset+0x48>
 80097d0:	e000ed04 	.word	0xe000ed04

080097d4 <prvInitialiseNewQueue>:
{
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	461d      	mov	r5, r3
 80097d8:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80097da:	460b      	mov	r3, r1
 80097dc:	b149      	cbz	r1, 80097f2 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80097de:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80097e0:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80097e2:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097e4:	2101      	movs	r1, #1
 80097e6:	4620      	mov	r0, r4
 80097e8:	f7ff ffb2 	bl	8009750 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80097ec:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80097f0:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80097f2:	6024      	str	r4, [r4, #0]
 80097f4:	e7f4      	b.n	80097e0 <prvInitialiseNewQueue+0xc>

080097f6 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097f6:	b940      	cbnz	r0, 800980a <xQueueGenericCreateStatic+0x14>
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	e7fe      	b.n	8009808 <xQueueGenericCreateStatic+0x12>
	{
 800980a:	b510      	push	{r4, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8009810:	b153      	cbz	r3, 8009828 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009812:	b192      	cbz	r2, 800983a <xQueueGenericCreateStatic+0x44>
 8009814:	b989      	cbnz	r1, 800983a <xQueueGenericCreateStatic+0x44>
 8009816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	e7fe      	b.n	8009826 <xQueueGenericCreateStatic+0x30>
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	e7fe      	b.n	8009838 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800983a:	b94a      	cbnz	r2, 8009850 <xQueueGenericCreateStatic+0x5a>
 800983c:	b141      	cbz	r1, 8009850 <xQueueGenericCreateStatic+0x5a>
 800983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	e7fe      	b.n	800984e <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009850:	2050      	movs	r0, #80	; 0x50
 8009852:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009854:	9803      	ldr	r0, [sp, #12]
 8009856:	2850      	cmp	r0, #80	; 0x50
 8009858:	d008      	beq.n	800986c <xQueueGenericCreateStatic+0x76>
 800985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	e7fe      	b.n	800986a <xQueueGenericCreateStatic+0x74>
 800986c:	4620      	mov	r0, r4
 800986e:	461c      	mov	r4, r3
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009870:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009872:	2301      	movs	r3, #1
 8009874:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009878:	9400      	str	r4, [sp, #0]
 800987a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800987e:	f7ff ffa9 	bl	80097d4 <prvInitialiseNewQueue>
	}
 8009882:	4620      	mov	r0, r4
 8009884:	b004      	add	sp, #16
 8009886:	bd10      	pop	{r4, pc}

08009888 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009888:	b940      	cbnz	r0, 800989c <xQueueGenericCreate+0x14>
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	e7fe      	b.n	800989a <xQueueGenericCreate+0x12>
	{
 800989c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800989e:	b083      	sub	sp, #12
 80098a0:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 80098a2:	b111      	cbz	r1, 80098aa <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098a4:	fb01 f000 	mul.w	r0, r1, r0
 80098a8:	e000      	b.n	80098ac <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 80098aa:	2000      	movs	r0, #0
 80098ac:	4617      	mov	r7, r2
 80098ae:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80098b0:	3050      	adds	r0, #80	; 0x50
 80098b2:	f002 f91d 	bl	800baf0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80098b6:	4605      	mov	r5, r0
 80098b8:	b150      	cbz	r0, 80098d0 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80098ba:	2300      	movs	r3, #0
 80098bc:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80098c0:	9000      	str	r0, [sp, #0]
 80098c2:	463b      	mov	r3, r7
 80098c4:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80098c8:	4621      	mov	r1, r4
 80098ca:	4630      	mov	r0, r6
 80098cc:	f7ff ff82 	bl	80097d4 <prvInitialiseNewQueue>
	}
 80098d0:	4628      	mov	r0, r5
 80098d2:	b003      	add	sp, #12
 80098d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080098d8 <xQueueGenericSend>:
{
 80098d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098da:	b085      	sub	sp, #20
 80098dc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80098de:	b160      	cbz	r0, 80098fa <xQueueGenericSend+0x22>
 80098e0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098e2:	b999      	cbnz	r1, 800990c <xQueueGenericSend+0x34>
 80098e4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80098e6:	b18a      	cbz	r2, 800990c <xQueueGenericSend+0x34>
 80098e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ec:	f383 8811 	msr	BASEPRI, r3
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	e7fe      	b.n	80098f8 <xQueueGenericSend+0x20>
 80098fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	e7fe      	b.n	800990a <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800990c:	2b02      	cmp	r3, #2
 800990e:	d10b      	bne.n	8009928 <xQueueGenericSend+0x50>
 8009910:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009912:	2a01      	cmp	r2, #1
 8009914:	d008      	beq.n	8009928 <xQueueGenericSend+0x50>
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	e7fe      	b.n	8009926 <xQueueGenericSend+0x4e>
 8009928:	461e      	mov	r6, r3
 800992a:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800992c:	f001 f92c 	bl	800ab88 <xTaskGetSchedulerState>
 8009930:	b950      	cbnz	r0, 8009948 <xQueueGenericSend+0x70>
 8009932:	9b01      	ldr	r3, [sp, #4]
 8009934:	b153      	cbz	r3, 800994c <xQueueGenericSend+0x74>
 8009936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993a:	f383 8811 	msr	BASEPRI, r3
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f3bf 8f4f 	dsb	sy
 8009946:	e7fe      	b.n	8009946 <xQueueGenericSend+0x6e>
 8009948:	2500      	movs	r5, #0
 800994a:	e03a      	b.n	80099c2 <xQueueGenericSend+0xea>
 800994c:	2500      	movs	r5, #0
 800994e:	e038      	b.n	80099c2 <xQueueGenericSend+0xea>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009950:	4632      	mov	r2, r6
 8009952:	4639      	mov	r1, r7
 8009954:	4620      	mov	r0, r4
 8009956:	f7ff fe77 	bl	8009648 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800995a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800995c:	b94b      	cbnz	r3, 8009972 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 800995e:	b1a8      	cbz	r0, 800998c <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8009960:	4b3b      	ldr	r3, [pc, #236]	; (8009a50 <xQueueGenericSend+0x178>)
 8009962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009966:	601a      	str	r2, [r3, #0]
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	e00c      	b.n	800998c <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009972:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009976:	f000 ffa3 	bl	800a8c0 <xTaskRemoveFromEventList>
 800997a:	b138      	cbz	r0, 800998c <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 800997c:	4b34      	ldr	r3, [pc, #208]	; (8009a50 <xQueueGenericSend+0x178>)
 800997e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800998c:	f001 ff1c 	bl	800b7c8 <vPortExitCritical>
				return pdPASS;
 8009990:	2001      	movs	r0, #1
}
 8009992:	b005      	add	sp, #20
 8009994:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8009996:	f001 ff17 	bl	800b7c8 <vPortExitCritical>
					return errQUEUE_FULL;
 800999a:	2000      	movs	r0, #0
 800999c:	e7f9      	b.n	8009992 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800999e:	a802      	add	r0, sp, #8
 80099a0:	f000 ffd4 	bl	800a94c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099a4:	2501      	movs	r5, #1
 80099a6:	e019      	b.n	80099dc <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 80099a8:	2300      	movs	r3, #0
 80099aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80099ae:	e021      	b.n	80099f4 <xQueueGenericSend+0x11c>
 80099b0:	2300      	movs	r3, #0
 80099b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099b6:	e023      	b.n	8009a00 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 80099b8:	4620      	mov	r0, r4
 80099ba:	f7ff fe92 	bl	80096e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099be:	f000 fdd7 	bl	800a570 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80099c2:	f001 fedf 	bl	800b784 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80099c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d3c0      	bcc.n	8009950 <xQueueGenericSend+0x78>
 80099ce:	2e02      	cmp	r6, #2
 80099d0:	d0be      	beq.n	8009950 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 80099d2:	9b01      	ldr	r3, [sp, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d0de      	beq.n	8009996 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 80099d8:	2d00      	cmp	r5, #0
 80099da:	d0e0      	beq.n	800999e <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 80099dc:	f001 fef4 	bl	800b7c8 <vPortExitCritical>
		vTaskSuspendAll();
 80099e0:	f000 fd2c 	bl	800a43c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099e4:	f001 fece 	bl	800b784 <vPortEnterCritical>
 80099e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80099ec:	b25b      	sxtb	r3, r3
 80099ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099f2:	d0d9      	beq.n	80099a8 <xQueueGenericSend+0xd0>
 80099f4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80099f8:	b25b      	sxtb	r3, r3
 80099fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099fe:	d0d7      	beq.n	80099b0 <xQueueGenericSend+0xd8>
 8009a00:	f001 fee2 	bl	800b7c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a04:	a901      	add	r1, sp, #4
 8009a06:	a802      	add	r0, sp, #8
 8009a08:	f000 ffac 	bl	800a964 <xTaskCheckForTimeOut>
 8009a0c:	b9c8      	cbnz	r0, 8009a42 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f7ff fdfe 	bl	8009610 <prvIsQueueFull>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d0cf      	beq.n	80099b8 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a18:	9901      	ldr	r1, [sp, #4]
 8009a1a:	f104 0010 	add.w	r0, r4, #16
 8009a1e:	f000 ff1b 	bl	800a858 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a22:	4620      	mov	r0, r4
 8009a24:	f7ff fe5d 	bl	80096e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a28:	f000 fda2 	bl	800a570 <xTaskResumeAll>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d1c8      	bne.n	80099c2 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8009a30:	4b07      	ldr	r3, [pc, #28]	; (8009a50 <xQueueGenericSend+0x178>)
 8009a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	e7bf      	b.n	80099c2 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8009a42:	4620      	mov	r0, r4
 8009a44:	f7ff fe4d 	bl	80096e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a48:	f000 fd92 	bl	800a570 <xTaskResumeAll>
			return errQUEUE_FULL;
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	e7a0      	b.n	8009992 <xQueueGenericSend+0xba>
 8009a50:	e000ed04 	.word	0xe000ed04

08009a54 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8009a54:	b148      	cbz	r0, 8009a6a <prvInitialiseMutex+0x16>
	{
 8009a56:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a58:	2100      	movs	r1, #0
 8009a5a:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009a5c:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009a5e:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009a60:	460b      	mov	r3, r1
 8009a62:	460a      	mov	r2, r1
 8009a64:	f7ff ff38 	bl	80098d8 <xQueueGenericSend>
	}
 8009a68:	bd08      	pop	{r3, pc}
 8009a6a:	4770      	bx	lr

08009a6c <xQueueCreateMutex>:
	{
 8009a6c:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009a6e:	4602      	mov	r2, r0
 8009a70:	2100      	movs	r1, #0
 8009a72:	2001      	movs	r0, #1
 8009a74:	f7ff ff08 	bl	8009888 <xQueueGenericCreate>
 8009a78:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009a7a:	f7ff ffeb 	bl	8009a54 <prvInitialiseMutex>
	}
 8009a7e:	4620      	mov	r0, r4
 8009a80:	bd10      	pop	{r4, pc}

08009a82 <xQueueCreateMutexStatic>:
	{
 8009a82:	b510      	push	{r4, lr}
 8009a84:	b082      	sub	sp, #8
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009a86:	9000      	str	r0, [sp, #0]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	2001      	movs	r0, #1
 8009a90:	f7ff feb1 	bl	80097f6 <xQueueGenericCreateStatic>
 8009a94:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009a96:	f7ff ffdd 	bl	8009a54 <prvInitialiseMutex>
	}
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	b002      	add	sp, #8
 8009a9e:	bd10      	pop	{r4, pc}

08009aa0 <xQueueGenericSendFromISR>:
{
 8009aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009aa4:	b160      	cbz	r0, 8009ac0 <xQueueGenericSendFromISR+0x20>
 8009aa6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009aa8:	b999      	cbnz	r1, 8009ad2 <xQueueGenericSendFromISR+0x32>
 8009aaa:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8009aac:	b188      	cbz	r0, 8009ad2 <xQueueGenericSendFromISR+0x32>
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	e7fe      	b.n	8009abe <xQueueGenericSendFromISR+0x1e>
 8009ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	e7fe      	b.n	8009ad0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d10b      	bne.n	8009aee <xQueueGenericSendFromISR+0x4e>
 8009ad6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009ad8:	2801      	cmp	r0, #1
 8009ada:	d008      	beq.n	8009aee <xQueueGenericSendFromISR+0x4e>
 8009adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae0:	f383 8811 	msr	BASEPRI, r3
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	e7fe      	b.n	8009aec <xQueueGenericSendFromISR+0x4c>
 8009aee:	461f      	mov	r7, r3
 8009af0:	4690      	mov	r8, r2
 8009af2:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009af4:	f001 ff70 	bl	800b9d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009af8:	f3ef 8611 	mrs	r6, BASEPRI
 8009afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b0c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009b0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d303      	bcc.n	8009b1c <xQueueGenericSendFromISR+0x7c>
 8009b14:	2f02      	cmp	r7, #2
 8009b16:	d001      	beq.n	8009b1c <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8009b18:	2000      	movs	r0, #0
 8009b1a:	e00f      	b.n	8009b3c <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b1c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8009b20:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b22:	463a      	mov	r2, r7
 8009b24:	4649      	mov	r1, r9
 8009b26:	4620      	mov	r0, r4
 8009b28:	f7ff fd8e 	bl	8009648 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009b2c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8009b30:	d008      	beq.n	8009b44 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b32:	1c6b      	adds	r3, r5, #1
 8009b34:	b25b      	sxtb	r3, r3
 8009b36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8009b3a:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b3c:	f386 8811 	msr	BASEPRI, r6
}
 8009b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b46:	b15b      	cbz	r3, 8009b60 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009b4c:	f000 feb8 	bl	800a8c0 <xTaskRemoveFromEventList>
 8009b50:	b140      	cbz	r0, 8009b64 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8009b52:	f1b8 0f00 	cmp.w	r8, #0
 8009b56:	d007      	beq.n	8009b68 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b58:	2001      	movs	r0, #1
 8009b5a:	f8c8 0000 	str.w	r0, [r8]
 8009b5e:	e7ed      	b.n	8009b3c <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8009b60:	2001      	movs	r0, #1
 8009b62:	e7eb      	b.n	8009b3c <xQueueGenericSendFromISR+0x9c>
 8009b64:	2001      	movs	r0, #1
 8009b66:	e7e9      	b.n	8009b3c <xQueueGenericSendFromISR+0x9c>
 8009b68:	2001      	movs	r0, #1
 8009b6a:	e7e7      	b.n	8009b3c <xQueueGenericSendFromISR+0x9c>

08009b6c <xQueueReceive>:
{
 8009b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009b72:	b160      	cbz	r0, 8009b8e <xQueueReceive+0x22>
 8009b74:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b76:	b999      	cbnz	r1, 8009ba0 <xQueueReceive+0x34>
 8009b78:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009b7a:	b18b      	cbz	r3, 8009ba0 <xQueueReceive+0x34>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	e7fe      	b.n	8009b8c <xQueueReceive+0x20>
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	e7fe      	b.n	8009b9e <xQueueReceive+0x32>
 8009ba0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ba2:	f000 fff1 	bl	800ab88 <xTaskGetSchedulerState>
 8009ba6:	b950      	cbnz	r0, 8009bbe <xQueueReceive+0x52>
 8009ba8:	9b01      	ldr	r3, [sp, #4]
 8009baa:	b153      	cbz	r3, 8009bc2 <xQueueReceive+0x56>
 8009bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	e7fe      	b.n	8009bbc <xQueueReceive+0x50>
 8009bbe:	2600      	movs	r6, #0
 8009bc0:	e03e      	b.n	8009c40 <xQueueReceive+0xd4>
 8009bc2:	2600      	movs	r6, #0
 8009bc4:	e03c      	b.n	8009c40 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f7ff fd78 	bl	80096be <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bce:	3d01      	subs	r5, #1
 8009bd0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bd2:	6923      	ldr	r3, [r4, #16]
 8009bd4:	b923      	cbnz	r3, 8009be0 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 8009bd6:	f001 fdf7 	bl	800b7c8 <vPortExitCritical>
				return pdPASS;
 8009bda:	2001      	movs	r0, #1
}
 8009bdc:	b005      	add	sp, #20
 8009bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009be0:	f104 0010 	add.w	r0, r4, #16
 8009be4:	f000 fe6c 	bl	800a8c0 <xTaskRemoveFromEventList>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d0f4      	beq.n	8009bd6 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 8009bec:	4b34      	ldr	r3, [pc, #208]	; (8009cc0 <xQueueReceive+0x154>)
 8009bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf2:	601a      	str	r2, [r3, #0]
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	e7eb      	b.n	8009bd6 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 8009bfe:	f001 fde3 	bl	800b7c8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009c02:	2000      	movs	r0, #0
 8009c04:	e7ea      	b.n	8009bdc <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c06:	a802      	add	r0, sp, #8
 8009c08:	f000 fea0 	bl	800a94c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c0c:	2601      	movs	r6, #1
 8009c0e:	e021      	b.n	8009c54 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 8009c10:	2300      	movs	r3, #0
 8009c12:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009c16:	e029      	b.n	8009c6c <xQueueReceive+0x100>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c1e:	e02b      	b.n	8009c78 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 8009c20:	4620      	mov	r0, r4
 8009c22:	f7ff fd5e 	bl	80096e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c26:	f000 fca3 	bl	800a570 <xTaskResumeAll>
 8009c2a:	e009      	b.n	8009c40 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	f7ff fd58 	bl	80096e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c32:	f000 fc9d 	bl	800a570 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c36:	4620      	mov	r0, r4
 8009c38:	f7ff fcf9 	bl	800962e <prvIsQueueEmpty>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d13d      	bne.n	8009cbc <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 8009c40:	f001 fda0 	bl	800b784 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c44:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c46:	2d00      	cmp	r5, #0
 8009c48:	d1bd      	bne.n	8009bc6 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c4a:	9b01      	ldr	r3, [sp, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d0d6      	beq.n	8009bfe <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8009c50:	2e00      	cmp	r6, #0
 8009c52:	d0d8      	beq.n	8009c06 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 8009c54:	f001 fdb8 	bl	800b7c8 <vPortExitCritical>
		vTaskSuspendAll();
 8009c58:	f000 fbf0 	bl	800a43c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c5c:	f001 fd92 	bl	800b784 <vPortEnterCritical>
 8009c60:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009c64:	b25b      	sxtb	r3, r3
 8009c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c6a:	d0d1      	beq.n	8009c10 <xQueueReceive+0xa4>
 8009c6c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009c70:	b25b      	sxtb	r3, r3
 8009c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c76:	d0cf      	beq.n	8009c18 <xQueueReceive+0xac>
 8009c78:	f001 fda6 	bl	800b7c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c7c:	a901      	add	r1, sp, #4
 8009c7e:	a802      	add	r0, sp, #8
 8009c80:	f000 fe70 	bl	800a964 <xTaskCheckForTimeOut>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d1d1      	bne.n	8009c2c <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f7ff fcd0 	bl	800962e <prvIsQueueEmpty>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d0c6      	beq.n	8009c20 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c92:	9901      	ldr	r1, [sp, #4]
 8009c94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009c98:	f000 fdde 	bl	800a858 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f7ff fd20 	bl	80096e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ca2:	f000 fc65 	bl	800a570 <xTaskResumeAll>
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d1ca      	bne.n	8009c40 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 8009caa:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <xQueueReceive+0x154>)
 8009cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	e7c1      	b.n	8009c40 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	e78d      	b.n	8009bdc <xQueueReceive+0x70>
 8009cc0:	e000ed04 	.word	0xe000ed04

08009cc4 <xQueueSemaphoreTake>:
{
 8009cc4:	b570      	push	{r4, r5, r6, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009cca:	b940      	cbnz	r0, 8009cde <xQueueSemaphoreTake+0x1a>
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	e7fe      	b.n	8009cdc <xQueueSemaphoreTake+0x18>
 8009cde:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8009ce0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009ce2:	b143      	cbz	r3, 8009cf6 <xQueueSemaphoreTake+0x32>
 8009ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	e7fe      	b.n	8009cf4 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cf6:	f000 ff47 	bl	800ab88 <xTaskGetSchedulerState>
 8009cfa:	b950      	cbnz	r0, 8009d12 <xQueueSemaphoreTake+0x4e>
 8009cfc:	9b01      	ldr	r3, [sp, #4]
 8009cfe:	b15b      	cbz	r3, 8009d18 <xQueueSemaphoreTake+0x54>
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	e7fe      	b.n	8009d10 <xQueueSemaphoreTake+0x4c>
 8009d12:	2500      	movs	r5, #0
 8009d14:	462e      	mov	r6, r5
 8009d16:	e051      	b.n	8009dbc <xQueueSemaphoreTake+0xf8>
 8009d18:	2500      	movs	r5, #0
 8009d1a:	462e      	mov	r6, r5
 8009d1c:	e04e      	b.n	8009dbc <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	b913      	cbnz	r3, 8009d2c <xQueueSemaphoreTake+0x68>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009d26:	f001 f89f 	bl	800ae68 <pvTaskIncrementMutexHeldCount>
 8009d2a:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d2c:	6923      	ldr	r3, [r4, #16]
 8009d2e:	b163      	cbz	r3, 8009d4a <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d30:	f104 0010 	add.w	r0, r4, #16
 8009d34:	f000 fdc4 	bl	800a8c0 <xTaskRemoveFromEventList>
 8009d38:	b138      	cbz	r0, 8009d4a <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 8009d3a:	4b48      	ldr	r3, [pc, #288]	; (8009e5c <xQueueSemaphoreTake+0x198>)
 8009d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d40:	601a      	str	r2, [r3, #0]
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009d4a:	f001 fd3d 	bl	800b7c8 <vPortExitCritical>
				return pdPASS;
 8009d4e:	2501      	movs	r5, #1
}
 8009d50:	4628      	mov	r0, r5
 8009d52:	b004      	add	sp, #16
 8009d54:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009d56:	b145      	cbz	r5, 8009d6a <xQueueSemaphoreTake+0xa6>
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	e7fe      	b.n	8009d68 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 8009d6a:	f001 fd2d 	bl	800b7c8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009d6e:	e7ef      	b.n	8009d50 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d70:	a802      	add	r0, sp, #8
 8009d72:	f000 fdeb 	bl	800a94c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d76:	2601      	movs	r6, #1
 8009d78:	e02a      	b.n	8009dd0 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009d80:	e032      	b.n	8009de8 <xQueueSemaphoreTake+0x124>
 8009d82:	2300      	movs	r3, #0
 8009d84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d88:	e034      	b.n	8009df4 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 8009d8a:	f001 fcfb 	bl	800b784 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d8e:	68a0      	ldr	r0, [r4, #8]
 8009d90:	f000 ff0a 	bl	800aba8 <xTaskPriorityInherit>
 8009d94:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8009d96:	f001 fd17 	bl	800b7c8 <vPortExitCritical>
 8009d9a:	e03b      	b.n	8009e14 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f7ff fca0 	bl	80096e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009da2:	f000 fbe5 	bl	800a570 <xTaskResumeAll>
 8009da6:	e009      	b.n	8009dbc <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 8009da8:	4620      	mov	r0, r4
 8009daa:	f7ff fc9a 	bl	80096e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009dae:	f000 fbdf 	bl	800a570 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009db2:	4620      	mov	r0, r4
 8009db4:	f7ff fc3b 	bl	800962e <prvIsQueueEmpty>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d140      	bne.n	8009e3e <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 8009dbc:	f001 fce2 	bl	800b784 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009dc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1ab      	bne.n	8009d1e <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009dc6:	9b01      	ldr	r3, [sp, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d0c4      	beq.n	8009d56 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8009dcc:	2e00      	cmp	r6, #0
 8009dce:	d0cf      	beq.n	8009d70 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 8009dd0:	f001 fcfa 	bl	800b7c8 <vPortExitCritical>
		vTaskSuspendAll();
 8009dd4:	f000 fb32 	bl	800a43c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dd8:	f001 fcd4 	bl	800b784 <vPortEnterCritical>
 8009ddc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009de0:	b25b      	sxtb	r3, r3
 8009de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009de6:	d0c8      	beq.n	8009d7a <xQueueSemaphoreTake+0xb6>
 8009de8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009dec:	b25b      	sxtb	r3, r3
 8009dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009df2:	d0c6      	beq.n	8009d82 <xQueueSemaphoreTake+0xbe>
 8009df4:	f001 fce8 	bl	800b7c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009df8:	a901      	add	r1, sp, #4
 8009dfa:	a802      	add	r0, sp, #8
 8009dfc:	f000 fdb2 	bl	800a964 <xTaskCheckForTimeOut>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d1d1      	bne.n	8009da8 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e04:	4620      	mov	r0, r4
 8009e06:	f7ff fc12 	bl	800962e <prvIsQueueEmpty>
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	d0c6      	beq.n	8009d9c <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d0ba      	beq.n	8009d8a <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e14:	9901      	ldr	r1, [sp, #4]
 8009e16:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e1a:	f000 fd1d 	bl	800a858 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f7ff fc5f 	bl	80096e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e24:	f000 fba4 	bl	800a570 <xTaskResumeAll>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d1c7      	bne.n	8009dbc <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 8009e2c:	4b0b      	ldr	r3, [pc, #44]	; (8009e5c <xQueueSemaphoreTake+0x198>)
 8009e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	e7be      	b.n	8009dbc <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 8009e3e:	2d00      	cmp	r5, #0
 8009e40:	d086      	beq.n	8009d50 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 8009e42:	f001 fc9f 	bl	800b784 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009e46:	4620      	mov	r0, r4
 8009e48:	f7ff fbd9 	bl	80095fe <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009e4c:	4601      	mov	r1, r0
 8009e4e:	68a0      	ldr	r0, [r4, #8]
 8009e50:	f000 ff5e 	bl	800ad10 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8009e54:	f001 fcb8 	bl	800b7c8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8009e58:	2500      	movs	r5, #0
 8009e5a:	e779      	b.n	8009d50 <xQueueSemaphoreTake+0x8c>
 8009e5c:	e000ed04 	.word	0xe000ed04

08009e60 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e60:	2300      	movs	r3, #0
 8009e62:	2b07      	cmp	r3, #7
 8009e64:	d80c      	bhi.n	8009e80 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009e66:	4a07      	ldr	r2, [pc, #28]	; (8009e84 <vQueueAddToRegistry+0x24>)
 8009e68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009e6c:	b10a      	cbz	r2, 8009e72 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e6e:	3301      	adds	r3, #1
 8009e70:	e7f7      	b.n	8009e62 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009e72:	4a04      	ldr	r2, [pc, #16]	; (8009e84 <vQueueAddToRegistry+0x24>)
 8009e74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009e78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e7c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009e7e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20003468 	.word	0x20003468

08009e88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e88:	b570      	push	{r4, r5, r6, lr}
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	460d      	mov	r5, r1
 8009e8e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009e90:	f001 fc78 	bl	800b784 <vPortEnterCritical>
 8009e94:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009e98:	b25b      	sxtb	r3, r3
 8009e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e9e:	d00d      	beq.n	8009ebc <vQueueWaitForMessageRestricted+0x34>
 8009ea0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009ea4:	b25b      	sxtb	r3, r3
 8009ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009eaa:	d00b      	beq.n	8009ec4 <vQueueWaitForMessageRestricted+0x3c>
 8009eac:	f001 fc8c 	bl	800b7c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009eb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009eb2:	b15b      	cbz	r3, 8009ecc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f7ff fc14 	bl	80096e2 <prvUnlockQueue>
	}
 8009eba:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009ec2:	e7ed      	b.n	8009ea0 <vQueueWaitForMessageRestricted+0x18>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009eca:	e7ef      	b.n	8009eac <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009ecc:	4632      	mov	r2, r6
 8009ece:	4629      	mov	r1, r5
 8009ed0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009ed4:	f000 fcd8 	bl	800a888 <vTaskPlaceOnEventListRestricted>
 8009ed8:	e7ec      	b.n	8009eb4 <vQueueWaitForMessageRestricted+0x2c>

08009eda <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 8009eda:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009edc:	e001      	b.n	8009ee2 <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 8009ede:	3001      	adds	r0, #1
			ulCount++;
 8009ee0:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009ee2:	7802      	ldrb	r2, [r0, #0]
 8009ee4:	2aa5      	cmp	r2, #165	; 0xa5
 8009ee6:	d0fa      	beq.n	8009ede <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( configSTACK_DEPTH_TYPE ) ulCount;
	}
 8009ee8:	f3c3 008f 	ubfx	r0, r3, #2, #16
 8009eec:	4770      	bx	lr
	...

08009ef0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ef0:	4b08      	ldr	r3, [pc, #32]	; (8009f14 <prvResetNextTaskUnblockTime+0x24>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	b13b      	cbz	r3, 8009f08 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ef8:	4b06      	ldr	r3, [pc, #24]	; (8009f14 <prvResetNextTaskUnblockTime+0x24>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	4b05      	ldr	r3, [pc, #20]	; (8009f18 <prvResetNextTaskUnblockTime+0x28>)
 8009f04:	601a      	str	r2, [r3, #0]
	}
}
 8009f06:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f08:	4b03      	ldr	r3, [pc, #12]	; (8009f18 <prvResetNextTaskUnblockTime+0x28>)
 8009f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f0e:	601a      	str	r2, [r3, #0]
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	20000918 	.word	0x20000918
 8009f18:	200009f0 	.word	0x200009f0

08009f1c <prvInitialiseNewTask>:
{
 8009f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f20:	4681      	mov	r9, r0
 8009f22:	460d      	mov	r5, r1
 8009f24:	4617      	mov	r7, r2
 8009f26:	469a      	mov	sl, r3
 8009f28:	9e08      	ldr	r6, [sp, #32]
 8009f2a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8009f2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f30:	0092      	lsls	r2, r2, #2
 8009f32:	21a5      	movs	r1, #165	; 0xa5
 8009f34:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009f36:	f002 fbc8 	bl	800c6ca <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009f3c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8009f40:	3a01      	subs	r2, #1
 8009f42:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f46:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8009f4a:	6467      	str	r7, [r4, #68]	; 0x44
	if( pcName != NULL )
 8009f4c:	b38d      	cbz	r5, 8009fb2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f4e:	2300      	movs	r3, #0
 8009f50:	2b0f      	cmp	r3, #15
 8009f52:	d807      	bhi.n	8009f64 <prvInitialiseNewTask+0x48>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f54:	5ce9      	ldrb	r1, [r5, r3]
 8009f56:	18e2      	adds	r2, r4, r3
 8009f58:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8009f5c:	5cea      	ldrb	r2, [r5, r3]
 8009f5e:	b10a      	cbz	r2, 8009f64 <prvInitialiseNewTask+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f60:	3301      	adds	r3, #1
 8009f62:	e7f5      	b.n	8009f50 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f64:	2300      	movs	r3, #0
 8009f66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f6a:	2e06      	cmp	r6, #6
 8009f6c:	d900      	bls.n	8009f70 <prvInitialiseNewTask+0x54>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f6e:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8009f70:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009f72:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8009f74:	2500      	movs	r5, #0
 8009f76:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f78:	1d20      	adds	r0, r4, #4
 8009f7a:	f7ff fb03 	bl	8009584 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f7e:	f104 0018 	add.w	r0, r4, #24
 8009f82:	f7ff faff 	bl	8009584 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f86:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f88:	f1c6 0607 	rsb	r6, r6, #7
 8009f8c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f8e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009f90:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
 8009f92:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f94:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f98:	4652      	mov	r2, sl
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	f001 fbc5 	bl	800b72c <pxPortInitialiseStack>
 8009fa2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009fa4:	f1b8 0f00 	cmp.w	r8, #0
 8009fa8:	d001      	beq.n	8009fae <prvInitialiseNewTask+0x92>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009faa:	f8c8 4000 	str.w	r4, [r8]
}
 8009fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8009fb8:	e7d7      	b.n	8009f6a <prvInitialiseNewTask+0x4e>
	...

08009fbc <prvInitialiseTaskLists>:
{
 8009fbc:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fbe:	2400      	movs	r4, #0
 8009fc0:	e007      	b.n	8009fd2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009fc2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009fc6:	0093      	lsls	r3, r2, #2
 8009fc8:	480e      	ldr	r0, [pc, #56]	; (800a004 <prvInitialiseTaskLists+0x48>)
 8009fca:	4418      	add	r0, r3
 8009fcc:	f7ff facf 	bl	800956e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fd0:	3401      	adds	r4, #1
 8009fd2:	2c06      	cmp	r4, #6
 8009fd4:	d9f5      	bls.n	8009fc2 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8009fd6:	4d0c      	ldr	r5, [pc, #48]	; (800a008 <prvInitialiseTaskLists+0x4c>)
 8009fd8:	4628      	mov	r0, r5
 8009fda:	f7ff fac8 	bl	800956e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009fde:	4c0b      	ldr	r4, [pc, #44]	; (800a00c <prvInitialiseTaskLists+0x50>)
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f7ff fac4 	bl	800956e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009fe6:	480a      	ldr	r0, [pc, #40]	; (800a010 <prvInitialiseTaskLists+0x54>)
 8009fe8:	f7ff fac1 	bl	800956e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009fec:	4809      	ldr	r0, [pc, #36]	; (800a014 <prvInitialiseTaskLists+0x58>)
 8009fee:	f7ff fabe 	bl	800956e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8009ff2:	4809      	ldr	r0, [pc, #36]	; (800a018 <prvInitialiseTaskLists+0x5c>)
 8009ff4:	f7ff fabb 	bl	800956e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ff8:	4b08      	ldr	r3, [pc, #32]	; (800a01c <prvInitialiseTaskLists+0x60>)
 8009ffa:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ffc:	4b08      	ldr	r3, [pc, #32]	; (800a020 <prvInitialiseTaskLists+0x64>)
 8009ffe:	601c      	str	r4, [r3, #0]
}
 800a000:	bd38      	pop	{r3, r4, r5, pc}
 800a002:	bf00      	nop
 800a004:	20000920 	.word	0x20000920
 800a008:	200009c8 	.word	0x200009c8
 800a00c:	200009dc 	.word	0x200009dc
 800a010:	200009f8 	.word	0x200009f8
 800a014:	20000a24 	.word	0x20000a24
 800a018:	20000a10 	.word	0x20000a10
 800a01c:	20000918 	.word	0x20000918
 800a020:	2000091c 	.word	0x2000091c

0800a024 <prvAddNewTaskToReadyList>:
{
 800a024:	b510      	push	{r4, lr}
 800a026:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a028:	f001 fbac 	bl	800b784 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800a02c:	4a21      	ldr	r2, [pc, #132]	; (800a0b4 <prvAddNewTaskToReadyList+0x90>)
 800a02e:	6813      	ldr	r3, [r2, #0]
 800a030:	3301      	adds	r3, #1
 800a032:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a034:	4b20      	ldr	r3, [pc, #128]	; (800a0b8 <prvAddNewTaskToReadyList+0x94>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	b15b      	cbz	r3, 800a052 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800a03a:	4b20      	ldr	r3, [pc, #128]	; (800a0bc <prvAddNewTaskToReadyList+0x98>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	b96b      	cbnz	r3, 800a05c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a040:	4b1d      	ldr	r3, [pc, #116]	; (800a0b8 <prvAddNewTaskToReadyList+0x94>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a046:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a048:	429a      	cmp	r2, r3
 800a04a:	d807      	bhi.n	800a05c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800a04c:	4b1a      	ldr	r3, [pc, #104]	; (800a0b8 <prvAddNewTaskToReadyList+0x94>)
 800a04e:	601c      	str	r4, [r3, #0]
 800a050:	e004      	b.n	800a05c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800a052:	4b19      	ldr	r3, [pc, #100]	; (800a0b8 <prvAddNewTaskToReadyList+0x94>)
 800a054:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a056:	6813      	ldr	r3, [r2, #0]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d027      	beq.n	800a0ac <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 800a05c:	4a18      	ldr	r2, [pc, #96]	; (800a0c0 <prvAddNewTaskToReadyList+0x9c>)
 800a05e:	6813      	ldr	r3, [r2, #0]
 800a060:	3301      	adds	r3, #1
 800a062:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a064:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 800a066:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a068:	2201      	movs	r2, #1
 800a06a:	409a      	lsls	r2, r3
 800a06c:	4915      	ldr	r1, [pc, #84]	; (800a0c4 <prvAddNewTaskToReadyList+0xa0>)
 800a06e:	6808      	ldr	r0, [r1, #0]
 800a070:	4302      	orrs	r2, r0
 800a072:	600a      	str	r2, [r1, #0]
 800a074:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a078:	009a      	lsls	r2, r3, #2
 800a07a:	1d21      	adds	r1, r4, #4
 800a07c:	4812      	ldr	r0, [pc, #72]	; (800a0c8 <prvAddNewTaskToReadyList+0xa4>)
 800a07e:	4410      	add	r0, r2
 800a080:	f7ff fa83 	bl	800958a <vListInsertEnd>
	taskEXIT_CRITICAL();
 800a084:	f001 fba0 	bl	800b7c8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800a088:	4b0c      	ldr	r3, [pc, #48]	; (800a0bc <prvAddNewTaskToReadyList+0x98>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	b16b      	cbz	r3, 800a0aa <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a08e:	4b0a      	ldr	r3, [pc, #40]	; (800a0b8 <prvAddNewTaskToReadyList+0x94>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a094:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a096:	429a      	cmp	r2, r3
 800a098:	d207      	bcs.n	800a0aa <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 800a09a:	4b0c      	ldr	r3, [pc, #48]	; (800a0cc <prvAddNewTaskToReadyList+0xa8>)
 800a09c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	f3bf 8f6f 	isb	sy
}
 800a0aa:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800a0ac:	f7ff ff86 	bl	8009fbc <prvInitialiseTaskLists>
 800a0b0:	e7d4      	b.n	800a05c <prvAddNewTaskToReadyList+0x38>
 800a0b2:	bf00      	nop
 800a0b4:	200009b0 	.word	0x200009b0
 800a0b8:	20000914 	.word	0x20000914
 800a0bc:	20000a0c 	.word	0x20000a0c
 800a0c0:	200009c0 	.word	0x200009c0
 800a0c4:	200009c4 	.word	0x200009c4
 800a0c8:	20000920 	.word	0x20000920
 800a0cc:	e000ed04 	.word	0xe000ed04

0800a0d0 <prvDeleteTCB>:
	{
 800a0d0:	b510      	push	{r4, lr}
 800a0d2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a0d4:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800a0d8:	b933      	cbnz	r3, 800a0e8 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 800a0da:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800a0dc:	f001 fd8c 	bl	800bbf8 <vPortFree>
				vPortFree( pxTCB );
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f001 fd89 	bl	800bbf8 <vPortFree>
	}
 800a0e6:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d00a      	beq.n	800a102 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d0fa      	beq.n	800a0e6 <prvDeleteTCB+0x16>
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	e7fe      	b.n	800a100 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 800a102:	f001 fd79 	bl	800bbf8 <vPortFree>
 800a106:	e7ee      	b.n	800a0e6 <prvDeleteTCB+0x16>

0800a108 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a108:	4b0f      	ldr	r3, [pc, #60]	; (800a148 <prvCheckTasksWaitingTermination+0x40>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	b1d3      	cbz	r3, 800a144 <prvCheckTasksWaitingTermination+0x3c>
{
 800a10e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800a110:	f001 fb38 	bl	800b784 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a114:	4b0d      	ldr	r3, [pc, #52]	; (800a14c <prvCheckTasksWaitingTermination+0x44>)
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a11a:	1d20      	adds	r0, r4, #4
 800a11c:	f7ff fa5b 	bl	80095d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a120:	4a0b      	ldr	r2, [pc, #44]	; (800a150 <prvCheckTasksWaitingTermination+0x48>)
 800a122:	6813      	ldr	r3, [r2, #0]
 800a124:	3b01      	subs	r3, #1
 800a126:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a128:	4a07      	ldr	r2, [pc, #28]	; (800a148 <prvCheckTasksWaitingTermination+0x40>)
 800a12a:	6813      	ldr	r3, [r2, #0]
 800a12c:	3b01      	subs	r3, #1
 800a12e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800a130:	f001 fb4a 	bl	800b7c8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a134:	4620      	mov	r0, r4
 800a136:	f7ff ffcb 	bl	800a0d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a13a:	4b03      	ldr	r3, [pc, #12]	; (800a148 <prvCheckTasksWaitingTermination+0x40>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1e6      	bne.n	800a110 <prvCheckTasksWaitingTermination+0x8>
}
 800a142:	bd10      	pop	{r4, pc}
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	200009b4 	.word	0x200009b4
 800a14c:	20000a24 	.word	0x20000a24
 800a150:	200009b0 	.word	0x200009b0

0800a154 <prvIdleTask>:
{
 800a154:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800a156:	f7ff ffd7 	bl	800a108 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a15a:	4b06      	ldr	r3, [pc, #24]	; (800a174 <prvIdleTask+0x20>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d9f9      	bls.n	800a156 <prvIdleTask+0x2>
				taskYIELD();
 800a162:	4b05      	ldr	r3, [pc, #20]	; (800a178 <prvIdleTask+0x24>)
 800a164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a168:	601a      	str	r2, [r3, #0]
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	e7f0      	b.n	800a156 <prvIdleTask+0x2>
 800a174:	20000920 	.word	0x20000920
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a17c:	b570      	push	{r4, r5, r6, lr}
 800a17e:	4604      	mov	r4, r0
 800a180:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a182:	4b1d      	ldr	r3, [pc, #116]	; (800a1f8 <prvAddCurrentTaskToDelayedList+0x7c>)
 800a184:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a186:	4b1d      	ldr	r3, [pc, #116]	; (800a1fc <prvAddCurrentTaskToDelayedList+0x80>)
 800a188:	6818      	ldr	r0, [r3, #0]
 800a18a:	3004      	adds	r0, #4
 800a18c:	f7ff fa23 	bl	80095d6 <uxListRemove>
 800a190:	b950      	cbnz	r0, 800a1a8 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a192:	4b1a      	ldr	r3, [pc, #104]	; (800a1fc <prvAddCurrentTaskToDelayedList+0x80>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a198:	2301      	movs	r3, #1
 800a19a:	fa03 f202 	lsl.w	r2, r3, r2
 800a19e:	4918      	ldr	r1, [pc, #96]	; (800a200 <prvAddCurrentTaskToDelayedList+0x84>)
 800a1a0:	680b      	ldr	r3, [r1, #0]
 800a1a2:	ea23 0302 	bic.w	r3, r3, r2
 800a1a6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1a8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800a1ac:	d013      	beq.n	800a1d6 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1ae:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1b0:	4b12      	ldr	r3, [pc, #72]	; (800a1fc <prvAddCurrentTaskToDelayedList+0x80>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800a1b6:	42a5      	cmp	r5, r4
 800a1b8:	d816      	bhi.n	800a1e8 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1ba:	4b12      	ldr	r3, [pc, #72]	; (800a204 <prvAddCurrentTaskToDelayedList+0x88>)
 800a1bc:	6818      	ldr	r0, [r3, #0]
 800a1be:	4b0f      	ldr	r3, [pc, #60]	; (800a1fc <prvAddCurrentTaskToDelayedList+0x80>)
 800a1c0:	6819      	ldr	r1, [r3, #0]
 800a1c2:	3104      	adds	r1, #4
 800a1c4:	f7ff f9ed 	bl	80095a2 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800a1c8:	4b0f      	ldr	r3, [pc, #60]	; (800a208 <prvAddCurrentTaskToDelayedList+0x8c>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	42a3      	cmp	r3, r4
 800a1ce:	d912      	bls.n	800a1f6 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800a1d0:	4b0d      	ldr	r3, [pc, #52]	; (800a208 <prvAddCurrentTaskToDelayedList+0x8c>)
 800a1d2:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1d4:	e00f      	b.n	800a1f6 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1d6:	2e00      	cmp	r6, #0
 800a1d8:	d0e9      	beq.n	800a1ae <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1da:	4b08      	ldr	r3, [pc, #32]	; (800a1fc <prvAddCurrentTaskToDelayedList+0x80>)
 800a1dc:	6819      	ldr	r1, [r3, #0]
 800a1de:	3104      	adds	r1, #4
 800a1e0:	480a      	ldr	r0, [pc, #40]	; (800a20c <prvAddCurrentTaskToDelayedList+0x90>)
 800a1e2:	f7ff f9d2 	bl	800958a <vListInsertEnd>
 800a1e6:	e006      	b.n	800a1f6 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1e8:	4b09      	ldr	r3, [pc, #36]	; (800a210 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1ea:	6818      	ldr	r0, [r3, #0]
 800a1ec:	4b03      	ldr	r3, [pc, #12]	; (800a1fc <prvAddCurrentTaskToDelayedList+0x80>)
 800a1ee:	6819      	ldr	r1, [r3, #0]
 800a1f0:	3104      	adds	r1, #4
 800a1f2:	f7ff f9d6 	bl	80095a2 <vListInsert>
}
 800a1f6:	bd70      	pop	{r4, r5, r6, pc}
 800a1f8:	20000a38 	.word	0x20000a38
 800a1fc:	20000914 	.word	0x20000914
 800a200:	200009c4 	.word	0x200009c4
 800a204:	20000918 	.word	0x20000918
 800a208:	200009f0 	.word	0x200009f0
 800a20c:	20000a10 	.word	0x20000a10
 800a210:	2000091c 	.word	0x2000091c

0800a214 <prvWriteNameToBuffer>:
	{
 800a214:	b510      	push	{r4, lr}
 800a216:	4604      	mov	r4, r0
		strcpy( pcBuffer, pcTaskName );
 800a218:	f002 fa80 	bl	800c71c <strcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800a21c:	4620      	mov	r0, r4
 800a21e:	f7f5 ffdf 	bl	80001e0 <strlen>
 800a222:	e002      	b.n	800a22a <prvWriteNameToBuffer+0x16>
			pcBuffer[ x ] = ' ';
 800a224:	2320      	movs	r3, #32
 800a226:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800a228:	3001      	adds	r0, #1
 800a22a:	280e      	cmp	r0, #14
 800a22c:	d9fa      	bls.n	800a224 <prvWriteNameToBuffer+0x10>
		pcBuffer[ x ] = ( char ) 0x00;
 800a22e:	2300      	movs	r3, #0
 800a230:	5423      	strb	r3, [r4, r0]
	}
 800a232:	4420      	add	r0, r4
 800a234:	bd10      	pop	{r4, pc}

0800a236 <xTaskCreateStatic>:
	{
 800a236:	b570      	push	{r4, r5, r6, lr}
 800a238:	b086      	sub	sp, #24
 800a23a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a23c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800a23e:	b945      	cbnz	r5, 800a252 <xTaskCreateStatic+0x1c>
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	e7fe      	b.n	800a250 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800a252:	b944      	cbnz	r4, 800a266 <xTaskCreateStatic+0x30>
 800a254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a258:	f383 8811 	msr	BASEPRI, r3
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	e7fe      	b.n	800a264 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a266:	2664      	movs	r6, #100	; 0x64
 800a268:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a26a:	9e04      	ldr	r6, [sp, #16]
 800a26c:	2e64      	cmp	r6, #100	; 0x64
 800a26e:	d008      	beq.n	800a282 <xTaskCreateStatic+0x4c>
 800a270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a274:	f383 8811 	msr	BASEPRI, r3
 800a278:	f3bf 8f6f 	isb	sy
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	e7fe      	b.n	800a280 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a282:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a284:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a286:	2502      	movs	r5, #2
 800a288:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a28c:	2500      	movs	r5, #0
 800a28e:	9503      	str	r5, [sp, #12]
 800a290:	9402      	str	r4, [sp, #8]
 800a292:	ad05      	add	r5, sp, #20
 800a294:	9501      	str	r5, [sp, #4]
 800a296:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a298:	9500      	str	r5, [sp, #0]
 800a29a:	f7ff fe3f 	bl	8009f1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f7ff fec0 	bl	800a024 <prvAddNewTaskToReadyList>
	}
 800a2a4:	9805      	ldr	r0, [sp, #20]
 800a2a6:	b006      	add	sp, #24
 800a2a8:	bd70      	pop	{r4, r5, r6, pc}

0800a2aa <xTaskCreate>:
	{
 800a2aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	4607      	mov	r7, r0
 800a2b2:	4688      	mov	r8, r1
 800a2b4:	4615      	mov	r5, r2
 800a2b6:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a2b8:	0090      	lsls	r0, r2, #2
 800a2ba:	f001 fc19 	bl	800baf0 <pvPortMalloc>
			if( pxStack != NULL )
 800a2be:	b308      	cbz	r0, 800a304 <xTaskCreate+0x5a>
 800a2c0:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a2c2:	2064      	movs	r0, #100	; 0x64
 800a2c4:	f001 fc14 	bl	800baf0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	b1b8      	cbz	r0, 800a2fc <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 800a2cc:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800a2ce:	b1e4      	cbz	r4, 800a30a <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a2d6:	9303      	str	r3, [sp, #12]
 800a2d8:	9402      	str	r4, [sp, #8]
 800a2da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	464b      	mov	r3, r9
 800a2e4:	462a      	mov	r2, r5
 800a2e6:	4641      	mov	r1, r8
 800a2e8:	4638      	mov	r0, r7
 800a2ea:	f7ff fe17 	bl	8009f1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f7ff fe98 	bl	800a024 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a2f4:	2001      	movs	r0, #1
	}
 800a2f6:	b005      	add	sp, #20
 800a2f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	f001 fc7b 	bl	800bbf8 <vPortFree>
 800a302:	e7e4      	b.n	800a2ce <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a308:	e7f5      	b.n	800a2f6 <xTaskCreate+0x4c>
 800a30a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800a30e:	e7f2      	b.n	800a2f6 <xTaskCreate+0x4c>

0800a310 <eTaskGetState>:
	{
 800a310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 800a312:	b1d0      	cbz	r0, 800a34a <eTaskGetState+0x3a>
 800a314:	4604      	mov	r4, r0
		if( pxTCB == pxCurrentTCB )
 800a316:	4b1d      	ldr	r3, [pc, #116]	; (800a38c <eTaskGetState+0x7c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4283      	cmp	r3, r0
 800a31c:	d029      	beq.n	800a372 <eTaskGetState+0x62>
			taskENTER_CRITICAL();
 800a31e:	f001 fa31 	bl	800b784 <vPortEnterCritical>
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800a322:	6965      	ldr	r5, [r4, #20]
				pxDelayedList = pxDelayedTaskList;
 800a324:	4b1a      	ldr	r3, [pc, #104]	; (800a390 <eTaskGetState+0x80>)
 800a326:	681f      	ldr	r7, [r3, #0]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800a328:	4b1a      	ldr	r3, [pc, #104]	; (800a394 <eTaskGetState+0x84>)
 800a32a:	681e      	ldr	r6, [r3, #0]
			taskEXIT_CRITICAL();
 800a32c:	f001 fa4c 	bl	800b7c8 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800a330:	42bd      	cmp	r5, r7
 800a332:	d020      	beq.n	800a376 <eTaskGetState+0x66>
 800a334:	42b5      	cmp	r5, r6
 800a336:	d020      	beq.n	800a37a <eTaskGetState+0x6a>
				else if( pxStateList == &xSuspendedTaskList )
 800a338:	4b17      	ldr	r3, [pc, #92]	; (800a398 <eTaskGetState+0x88>)
 800a33a:	429d      	cmp	r5, r3
 800a33c:	d00e      	beq.n	800a35c <eTaskGetState+0x4c>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800a33e:	4b17      	ldr	r3, [pc, #92]	; (800a39c <eTaskGetState+0x8c>)
 800a340:	429d      	cmp	r5, r3
 800a342:	d020      	beq.n	800a386 <eTaskGetState+0x76>
 800a344:	b19d      	cbz	r5, 800a36e <eTaskGetState+0x5e>
				eReturn = eReady;
 800a346:	2001      	movs	r0, #1
 800a348:	e014      	b.n	800a374 <eTaskGetState+0x64>
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	e7fe      	b.n	800a35a <eTaskGetState+0x4a>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800a35c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a35e:	b973      	cbnz	r3, 800a37e <eTaskGetState+0x6e>
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a360:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b01      	cmp	r3, #1
 800a368:	d10b      	bne.n	800a382 <eTaskGetState+0x72>
								eReturn = eBlocked;
 800a36a:	2002      	movs	r0, #2
 800a36c:	e002      	b.n	800a374 <eTaskGetState+0x64>
					eReturn = eDeleted;
 800a36e:	2004      	movs	r0, #4
 800a370:	e000      	b.n	800a374 <eTaskGetState+0x64>
			eReturn = eRunning;
 800a372:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				eReturn = eBlocked;
 800a376:	2002      	movs	r0, #2
 800a378:	e7fc      	b.n	800a374 <eTaskGetState+0x64>
 800a37a:	2002      	movs	r0, #2
 800a37c:	e7fa      	b.n	800a374 <eTaskGetState+0x64>
						eReturn = eBlocked;
 800a37e:	2002      	movs	r0, #2
 800a380:	e7f8      	b.n	800a374 <eTaskGetState+0x64>
								eReturn = eSuspended;
 800a382:	2003      	movs	r0, #3
 800a384:	e7f6      	b.n	800a374 <eTaskGetState+0x64>
					eReturn = eDeleted;
 800a386:	2004      	movs	r0, #4
 800a388:	e7f4      	b.n	800a374 <eTaskGetState+0x64>
 800a38a:	bf00      	nop
 800a38c:	20000914 	.word	0x20000914
 800a390:	20000918 	.word	0x20000918
 800a394:	2000091c 	.word	0x2000091c
 800a398:	20000a10 	.word	0x20000a10
 800a39c:	20000a24 	.word	0x20000a24

0800a3a0 <vTaskStartScheduler>:
{
 800a3a0:	b510      	push	{r4, lr}
 800a3a2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a3a4:	2400      	movs	r4, #0
 800a3a6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a3a8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a3aa:	aa07      	add	r2, sp, #28
 800a3ac:	a906      	add	r1, sp, #24
 800a3ae:	a805      	add	r0, sp, #20
 800a3b0:	f7f9 ffe8 	bl	8004384 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a3b4:	9b05      	ldr	r3, [sp, #20]
 800a3b6:	9302      	str	r3, [sp, #8]
 800a3b8:	9b06      	ldr	r3, [sp, #24]
 800a3ba:	9301      	str	r3, [sp, #4]
 800a3bc:	9400      	str	r4, [sp, #0]
 800a3be:	4623      	mov	r3, r4
 800a3c0:	9a07      	ldr	r2, [sp, #28]
 800a3c2:	4918      	ldr	r1, [pc, #96]	; (800a424 <vTaskStartScheduler+0x84>)
 800a3c4:	4818      	ldr	r0, [pc, #96]	; (800a428 <vTaskStartScheduler+0x88>)
 800a3c6:	f7ff ff36 	bl	800a236 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800a3ca:	b140      	cbz	r0, 800a3de <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 800a3cc:	f000 ff76 	bl	800b2bc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800a3d0:	2801      	cmp	r0, #1
 800a3d2:	d006      	beq.n	800a3e2 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a3d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a3d8:	d01a      	beq.n	800a410 <vTaskStartScheduler+0x70>
}
 800a3da:	b008      	add	sp, #32
 800a3dc:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800a3de:	2000      	movs	r0, #0
 800a3e0:	e7f6      	b.n	800a3d0 <vTaskStartScheduler+0x30>
 800a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3f2:	4b0e      	ldr	r3, [pc, #56]	; (800a42c <vTaskStartScheduler+0x8c>)
 800a3f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a3fa:	4b0d      	ldr	r3, [pc, #52]	; (800a430 <vTaskStartScheduler+0x90>)
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a400:	2300      	movs	r3, #0
 800a402:	4a0c      	ldr	r2, [pc, #48]	; (800a434 <vTaskStartScheduler+0x94>)
 800a404:	6013      	str	r3, [r2, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a406:	4a0c      	ldr	r2, [pc, #48]	; (800a438 <vTaskStartScheduler+0x98>)
 800a408:	6013      	str	r3, [r2, #0]
		if( xPortStartScheduler() != pdFALSE )
 800a40a:	f001 fa5d 	bl	800b8c8 <xPortStartScheduler>
 800a40e:	e7e4      	b.n	800a3da <vTaskStartScheduler+0x3a>
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	e7fe      	b.n	800a420 <vTaskStartScheduler+0x80>
 800a422:	bf00      	nop
 800a424:	0800dff0 	.word	0x0800dff0
 800a428:	0800a155 	.word	0x0800a155
 800a42c:	200009f0 	.word	0x200009f0
 800a430:	20000a0c 	.word	0x20000a0c
 800a434:	20000a38 	.word	0x20000a38
 800a438:	200033d4 	.word	0x200033d4

0800a43c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a43c:	4a02      	ldr	r2, [pc, #8]	; (800a448 <vTaskSuspendAll+0xc>)
 800a43e:	6813      	ldr	r3, [r2, #0]
 800a440:	3301      	adds	r3, #1
 800a442:	6013      	str	r3, [r2, #0]
}
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	200009bc 	.word	0x200009bc

0800a44c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800a44c:	4b01      	ldr	r3, [pc, #4]	; (800a454 <xTaskGetTickCount+0x8>)
 800a44e:	6818      	ldr	r0, [r3, #0]
}
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	20000a38 	.word	0x20000a38

0800a458 <xTaskIncrementTick>:
{
 800a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a45a:	4b3a      	ldr	r3, [pc, #232]	; (800a544 <xTaskIncrementTick+0xec>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d164      	bne.n	800a52c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a462:	4b39      	ldr	r3, [pc, #228]	; (800a548 <xTaskIncrementTick+0xf0>)
 800a464:	681d      	ldr	r5, [r3, #0]
 800a466:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800a468:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a46a:	b9c5      	cbnz	r5, 800a49e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800a46c:	4b37      	ldr	r3, [pc, #220]	; (800a54c <xTaskIncrementTick+0xf4>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	b143      	cbz	r3, 800a486 <xTaskIncrementTick+0x2e>
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	e7fe      	b.n	800a484 <xTaskIncrementTick+0x2c>
 800a486:	4a31      	ldr	r2, [pc, #196]	; (800a54c <xTaskIncrementTick+0xf4>)
 800a488:	6811      	ldr	r1, [r2, #0]
 800a48a:	4b31      	ldr	r3, [pc, #196]	; (800a550 <xTaskIncrementTick+0xf8>)
 800a48c:	6818      	ldr	r0, [r3, #0]
 800a48e:	6010      	str	r0, [r2, #0]
 800a490:	6019      	str	r1, [r3, #0]
 800a492:	4a30      	ldr	r2, [pc, #192]	; (800a554 <xTaskIncrementTick+0xfc>)
 800a494:	6813      	ldr	r3, [r2, #0]
 800a496:	3301      	adds	r3, #1
 800a498:	6013      	str	r3, [r2, #0]
 800a49a:	f7ff fd29 	bl	8009ef0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a49e:	4b2e      	ldr	r3, [pc, #184]	; (800a558 <xTaskIncrementTick+0x100>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	42ab      	cmp	r3, r5
 800a4a4:	d938      	bls.n	800a518 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 800a4a6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a4a8:	4b2c      	ldr	r3, [pc, #176]	; (800a55c <xTaskIncrementTick+0x104>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a4b2:	009a      	lsls	r2, r3, #2
 800a4b4:	4b2a      	ldr	r3, [pc, #168]	; (800a560 <xTaskIncrementTick+0x108>)
 800a4b6:	589b      	ldr	r3, [r3, r2]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d93c      	bls.n	800a536 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 800a4bc:	2401      	movs	r4, #1
 800a4be:	e03a      	b.n	800a536 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 800a4c0:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4c2:	4b22      	ldr	r3, [pc, #136]	; (800a54c <xTaskIncrementTick+0xf4>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	b343      	cbz	r3, 800a51c <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ca:	4b20      	ldr	r3, [pc, #128]	; (800a54c <xTaskIncrementTick+0xf4>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4d2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800a4d4:	429d      	cmp	r5, r3
 800a4d6:	d326      	bcc.n	800a526 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4d8:	1d37      	adds	r7, r6, #4
 800a4da:	4638      	mov	r0, r7
 800a4dc:	f7ff f87b 	bl	80095d6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4e0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800a4e2:	b11b      	cbz	r3, 800a4ec <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4e4:	f106 0018 	add.w	r0, r6, #24
 800a4e8:	f7ff f875 	bl	80095d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4ec:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	409a      	lsls	r2, r3
 800a4f2:	491c      	ldr	r1, [pc, #112]	; (800a564 <xTaskIncrementTick+0x10c>)
 800a4f4:	6808      	ldr	r0, [r1, #0]
 800a4f6:	4302      	orrs	r2, r0
 800a4f8:	600a      	str	r2, [r1, #0]
 800a4fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a4fe:	009a      	lsls	r2, r3, #2
 800a500:	4639      	mov	r1, r7
 800a502:	4817      	ldr	r0, [pc, #92]	; (800a560 <xTaskIncrementTick+0x108>)
 800a504:	4410      	add	r0, r2
 800a506:	f7ff f840 	bl	800958a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a50a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800a50c:	4b13      	ldr	r3, [pc, #76]	; (800a55c <xTaskIncrementTick+0x104>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a512:	429a      	cmp	r2, r3
 800a514:	d2d4      	bcs.n	800a4c0 <xTaskIncrementTick+0x68>
 800a516:	e7d4      	b.n	800a4c2 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 800a518:	2400      	movs	r4, #0
 800a51a:	e7d2      	b.n	800a4c2 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a51c:	4b0e      	ldr	r3, [pc, #56]	; (800a558 <xTaskIncrementTick+0x100>)
 800a51e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a522:	601a      	str	r2, [r3, #0]
					break;
 800a524:	e7c0      	b.n	800a4a8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800a526:	4a0c      	ldr	r2, [pc, #48]	; (800a558 <xTaskIncrementTick+0x100>)
 800a528:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a52a:	e7bd      	b.n	800a4a8 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800a52c:	4a0e      	ldr	r2, [pc, #56]	; (800a568 <xTaskIncrementTick+0x110>)
 800a52e:	6813      	ldr	r3, [r2, #0]
 800a530:	3301      	adds	r3, #1
 800a532:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800a534:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800a536:	4b0d      	ldr	r3, [pc, #52]	; (800a56c <xTaskIncrementTick+0x114>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	b103      	cbz	r3, 800a53e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800a53c:	2401      	movs	r4, #1
}
 800a53e:	4620      	mov	r0, r4
 800a540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a542:	bf00      	nop
 800a544:	200009bc 	.word	0x200009bc
 800a548:	20000a38 	.word	0x20000a38
 800a54c:	20000918 	.word	0x20000918
 800a550:	2000091c 	.word	0x2000091c
 800a554:	200009f4 	.word	0x200009f4
 800a558:	200009f0 	.word	0x200009f0
 800a55c:	20000914 	.word	0x20000914
 800a560:	20000920 	.word	0x20000920
 800a564:	200009c4 	.word	0x200009c4
 800a568:	200009b8 	.word	0x200009b8
 800a56c:	20000a3c 	.word	0x20000a3c

0800a570 <xTaskResumeAll>:
{
 800a570:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800a572:	4b33      	ldr	r3, [pc, #204]	; (800a640 <xTaskResumeAll+0xd0>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	b943      	cbnz	r3, 800a58a <xTaskResumeAll+0x1a>
 800a578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	e7fe      	b.n	800a588 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800a58a:	f001 f8fb 	bl	800b784 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a58e:	4b2c      	ldr	r3, [pc, #176]	; (800a640 <xTaskResumeAll+0xd0>)
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	3a01      	subs	r2, #1
 800a594:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d14d      	bne.n	800a638 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a59c:	4b29      	ldr	r3, [pc, #164]	; (800a644 <xTaskResumeAll+0xd4>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	b923      	cbnz	r3, 800a5ac <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 800a5a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a5a4:	f001 f910 	bl	800b7c8 <vPortExitCritical>
}
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 800a5ac:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5ae:	4b26      	ldr	r3, [pc, #152]	; (800a648 <xTaskResumeAll+0xd8>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	b31b      	cbz	r3, 800a5fc <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b4:	4b24      	ldr	r3, [pc, #144]	; (800a648 <xTaskResumeAll+0xd8>)
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5ba:	f104 0018 	add.w	r0, r4, #24
 800a5be:	f7ff f80a 	bl	80095d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5c2:	1d25      	adds	r5, r4, #4
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	f7ff f806 	bl	80095d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	409a      	lsls	r2, r3
 800a5d0:	491e      	ldr	r1, [pc, #120]	; (800a64c <xTaskResumeAll+0xdc>)
 800a5d2:	6808      	ldr	r0, [r1, #0]
 800a5d4:	4302      	orrs	r2, r0
 800a5d6:	600a      	str	r2, [r1, #0]
 800a5d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a5dc:	009a      	lsls	r2, r3, #2
 800a5de:	4629      	mov	r1, r5
 800a5e0:	481b      	ldr	r0, [pc, #108]	; (800a650 <xTaskResumeAll+0xe0>)
 800a5e2:	4410      	add	r0, r2
 800a5e4:	f7fe ffd1 	bl	800958a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a5ea:	4b1a      	ldr	r3, [pc, #104]	; (800a654 <xTaskResumeAll+0xe4>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d3dc      	bcc.n	800a5ae <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 800a5f4:	4b18      	ldr	r3, [pc, #96]	; (800a658 <xTaskResumeAll+0xe8>)
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]
 800a5fa:	e7d8      	b.n	800a5ae <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 800a5fc:	b10c      	cbz	r4, 800a602 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800a5fe:	f7ff fc77 	bl	8009ef0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a602:	4b16      	ldr	r3, [pc, #88]	; (800a65c <xTaskResumeAll+0xec>)
 800a604:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a606:	b154      	cbz	r4, 800a61e <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 800a608:	f7ff ff26 	bl	800a458 <xTaskIncrementTick>
 800a60c:	b110      	cbz	r0, 800a614 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800a60e:	4b12      	ldr	r3, [pc, #72]	; (800a658 <xTaskResumeAll+0xe8>)
 800a610:	2201      	movs	r2, #1
 800a612:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a614:	3c01      	subs	r4, #1
 800a616:	d1f7      	bne.n	800a608 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 800a618:	4b10      	ldr	r3, [pc, #64]	; (800a65c <xTaskResumeAll+0xec>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800a61e:	4b0e      	ldr	r3, [pc, #56]	; (800a658 <xTaskResumeAll+0xe8>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	b15b      	cbz	r3, 800a63c <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 800a624:	4b0e      	ldr	r3, [pc, #56]	; (800a660 <xTaskResumeAll+0xf0>)
 800a626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a62a:	601a      	str	r2, [r3, #0]
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a634:	2401      	movs	r4, #1
 800a636:	e7b5      	b.n	800a5a4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800a638:	2400      	movs	r4, #0
 800a63a:	e7b3      	b.n	800a5a4 <xTaskResumeAll+0x34>
 800a63c:	2400      	movs	r4, #0
 800a63e:	e7b1      	b.n	800a5a4 <xTaskResumeAll+0x34>
 800a640:	200009bc 	.word	0x200009bc
 800a644:	200009b0 	.word	0x200009b0
 800a648:	200009f8 	.word	0x200009f8
 800a64c:	200009c4 	.word	0x200009c4
 800a650:	20000920 	.word	0x20000920
 800a654:	20000914 	.word	0x20000914
 800a658:	20000a3c 	.word	0x20000a3c
 800a65c:	200009b8 	.word	0x200009b8
 800a660:	e000ed04 	.word	0xe000ed04

0800a664 <vTaskDelay>:
	{
 800a664:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a666:	b1a8      	cbz	r0, 800a694 <vTaskDelay+0x30>
 800a668:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800a66a:	4b0f      	ldr	r3, [pc, #60]	; (800a6a8 <vTaskDelay+0x44>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	b143      	cbz	r3, 800a682 <vTaskDelay+0x1e>
 800a670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	e7fe      	b.n	800a680 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800a682:	f7ff fedb 	bl	800a43c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a686:	2100      	movs	r1, #0
 800a688:	4620      	mov	r0, r4
 800a68a:	f7ff fd77 	bl	800a17c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a68e:	f7ff ff6f 	bl	800a570 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a692:	b938      	cbnz	r0, 800a6a4 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 800a694:	4b05      	ldr	r3, [pc, #20]	; (800a6ac <vTaskDelay+0x48>)
 800a696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	f3bf 8f6f 	isb	sy
	}
 800a6a4:	bd10      	pop	{r4, pc}
 800a6a6:	bf00      	nop
 800a6a8:	200009bc 	.word	0x200009bc
 800a6ac:	e000ed04 	.word	0xe000ed04

0800a6b0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a6b0:	4b27      	ldr	r3, [pc, #156]	; (800a750 <vTaskSwitchContext+0xa0>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	b11b      	cbz	r3, 800a6be <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800a6b6:	4b27      	ldr	r3, [pc, #156]	; (800a754 <vTaskSwitchContext+0xa4>)
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800a6be:	4b25      	ldr	r3, [pc, #148]	; (800a754 <vTaskSwitchContext+0xa4>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a6c4:	4b24      	ldr	r3, [pc, #144]	; (800a758 <vTaskSwitchContext+0xa8>)
 800a6c6:	681a      	ldr	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a6c8:	4b24      	ldr	r3, [pc, #144]	; (800a75c <vTaskSwitchContext+0xac>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d905      	bls.n	800a6dc <vTaskSwitchContext+0x2c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a6d0:	4923      	ldr	r1, [pc, #140]	; (800a760 <vTaskSwitchContext+0xb0>)
 800a6d2:	6808      	ldr	r0, [r1, #0]
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800a6d8:	440b      	add	r3, r1
 800a6da:	6583      	str	r3, [r0, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a6dc:	4b1f      	ldr	r3, [pc, #124]	; (800a75c <vTaskSwitchContext+0xac>)
 800a6de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6e0:	4b20      	ldr	r3, [pc, #128]	; (800a764 <vTaskSwitchContext+0xb4>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a6e4:	fab3 f383 	clz	r3, r3
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	f1c3 031f 	rsb	r3, r3, #31
 800a6ee:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a6f2:	008a      	lsls	r2, r1, #2
 800a6f4:	491c      	ldr	r1, [pc, #112]	; (800a768 <vTaskSwitchContext+0xb8>)
 800a6f6:	588a      	ldr	r2, [r1, r2]
 800a6f8:	b942      	cbnz	r2, 800a70c <vTaskSwitchContext+0x5c>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	e7fe      	b.n	800a70a <vTaskSwitchContext+0x5a>
{
 800a70c:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a70e:	4816      	ldr	r0, [pc, #88]	; (800a768 <vTaskSwitchContext+0xb8>)
 800a710:	009a      	lsls	r2, r3, #2
 800a712:	18d4      	adds	r4, r2, r3
 800a714:	00a1      	lsls	r1, r4, #2
 800a716:	4401      	add	r1, r0
 800a718:	684c      	ldr	r4, [r1, #4]
 800a71a:	6864      	ldr	r4, [r4, #4]
 800a71c:	604c      	str	r4, [r1, #4]
 800a71e:	441a      	add	r2, r3
 800a720:	0091      	lsls	r1, r2, #2
 800a722:	3108      	adds	r1, #8
 800a724:	4408      	add	r0, r1
 800a726:	4284      	cmp	r4, r0
 800a728:	d00b      	beq.n	800a742 <vTaskSwitchContext+0x92>
 800a72a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a72e:	009a      	lsls	r2, r3, #2
 800a730:	4b0d      	ldr	r3, [pc, #52]	; (800a768 <vTaskSwitchContext+0xb8>)
 800a732:	4413      	add	r3, r2
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	68da      	ldr	r2, [r3, #12]
 800a738:	4b09      	ldr	r3, [pc, #36]	; (800a760 <vTaskSwitchContext+0xb0>)
 800a73a:	601a      	str	r2, [r3, #0]
}
 800a73c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a740:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a742:	6861      	ldr	r1, [r4, #4]
 800a744:	4808      	ldr	r0, [pc, #32]	; (800a768 <vTaskSwitchContext+0xb8>)
 800a746:	2214      	movs	r2, #20
 800a748:	fb02 0203 	mla	r2, r2, r3, r0
 800a74c:	6051      	str	r1, [r2, #4]
 800a74e:	e7ec      	b.n	800a72a <vTaskSwitchContext+0x7a>
 800a750:	200009bc 	.word	0x200009bc
 800a754:	20000a3c 	.word	0x20000a3c
 800a758:	200033d4 	.word	0x200033d4
 800a75c:	200009ac 	.word	0x200009ac
 800a760:	20000914 	.word	0x20000914
 800a764:	200009c4 	.word	0x200009c4
 800a768:	20000920 	.word	0x20000920

0800a76c <vTaskSuspend>:
	{
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 800a770:	f001 f808 	bl	800b784 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a774:	b364      	cbz	r4, 800a7d0 <vTaskSuspend+0x64>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a776:	1d25      	adds	r5, r4, #4
 800a778:	4628      	mov	r0, r5
 800a77a:	f7fe ff2c 	bl	80095d6 <uxListRemove>
 800a77e:	b970      	cbnz	r0, 800a79e <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a780:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a782:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800a786:	008b      	lsls	r3, r1, #2
 800a788:	492b      	ldr	r1, [pc, #172]	; (800a838 <vTaskSuspend+0xcc>)
 800a78a:	58cb      	ldr	r3, [r1, r3]
 800a78c:	b93b      	cbnz	r3, 800a79e <vTaskSuspend+0x32>
 800a78e:	2301      	movs	r3, #1
 800a790:	fa03 f202 	lsl.w	r2, r3, r2
 800a794:	4929      	ldr	r1, [pc, #164]	; (800a83c <vTaskSuspend+0xd0>)
 800a796:	680b      	ldr	r3, [r1, #0]
 800a798:	ea23 0302 	bic.w	r3, r3, r2
 800a79c:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a79e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a7a0:	b11b      	cbz	r3, 800a7aa <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7a2:	f104 0018 	add.w	r0, r4, #24
 800a7a6:	f7fe ff16 	bl	80095d6 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	4824      	ldr	r0, [pc, #144]	; (800a840 <vTaskSuspend+0xd4>)
 800a7ae:	f7fe feec 	bl	800958a <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a7b2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d00c      	beq.n	800a7d6 <vTaskSuspend+0x6a>
		taskEXIT_CRITICAL();
 800a7bc:	f001 f804 	bl	800b7c8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800a7c0:	4b20      	ldr	r3, [pc, #128]	; (800a844 <vTaskSuspend+0xd8>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	b95b      	cbnz	r3, 800a7de <vTaskSuspend+0x72>
		if( pxTCB == pxCurrentTCB )
 800a7c6:	4b20      	ldr	r3, [pc, #128]	; (800a848 <vTaskSuspend+0xdc>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	42a3      	cmp	r3, r4
 800a7cc:	d00e      	beq.n	800a7ec <vTaskSuspend+0x80>
	}
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a7d0:	4b1d      	ldr	r3, [pc, #116]	; (800a848 <vTaskSuspend+0xdc>)
 800a7d2:	681c      	ldr	r4, [r3, #0]
 800a7d4:	e7cf      	b.n	800a776 <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800a7dc:	e7ee      	b.n	800a7bc <vTaskSuspend+0x50>
			taskENTER_CRITICAL();
 800a7de:	f000 ffd1 	bl	800b784 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 800a7e2:	f7ff fb85 	bl	8009ef0 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 800a7e6:	f000 ffef 	bl	800b7c8 <vPortExitCritical>
 800a7ea:	e7ec      	b.n	800a7c6 <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
 800a7ec:	4b15      	ldr	r3, [pc, #84]	; (800a844 <vTaskSuspend+0xd8>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	b1a3      	cbz	r3, 800a81c <vTaskSuspend+0xb0>
				configASSERT( uxSchedulerSuspended == 0 );
 800a7f2:	4b16      	ldr	r3, [pc, #88]	; (800a84c <vTaskSuspend+0xe0>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	b143      	cbz	r3, 800a80a <vTaskSuspend+0x9e>
 800a7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	e7fe      	b.n	800a808 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 800a80a:	4b11      	ldr	r3, [pc, #68]	; (800a850 <vTaskSuspend+0xe4>)
 800a80c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a810:	601a      	str	r2, [r3, #0]
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	e7d8      	b.n	800a7ce <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a81c:	4b08      	ldr	r3, [pc, #32]	; (800a840 <vTaskSuspend+0xd4>)
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	4b0c      	ldr	r3, [pc, #48]	; (800a854 <vTaskSuspend+0xe8>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	429a      	cmp	r2, r3
 800a826:	d103      	bne.n	800a830 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 800a828:	4b07      	ldr	r3, [pc, #28]	; (800a848 <vTaskSuspend+0xdc>)
 800a82a:	2200      	movs	r2, #0
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	e7ce      	b.n	800a7ce <vTaskSuspend+0x62>
					vTaskSwitchContext();
 800a830:	f7ff ff3e 	bl	800a6b0 <vTaskSwitchContext>
	}
 800a834:	e7cb      	b.n	800a7ce <vTaskSuspend+0x62>
 800a836:	bf00      	nop
 800a838:	20000920 	.word	0x20000920
 800a83c:	200009c4 	.word	0x200009c4
 800a840:	20000a10 	.word	0x20000a10
 800a844:	20000a0c 	.word	0x20000a0c
 800a848:	20000914 	.word	0x20000914
 800a84c:	200009bc 	.word	0x200009bc
 800a850:	e000ed04 	.word	0xe000ed04
 800a854:	200009b0 	.word	0x200009b0

0800a858 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800a858:	b940      	cbnz	r0, 800a86c <vTaskPlaceOnEventList+0x14>
 800a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	e7fe      	b.n	800a86a <vTaskPlaceOnEventList+0x12>
{
 800a86c:	b510      	push	{r4, lr}
 800a86e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a870:	4b04      	ldr	r3, [pc, #16]	; (800a884 <vTaskPlaceOnEventList+0x2c>)
 800a872:	6819      	ldr	r1, [r3, #0]
 800a874:	3118      	adds	r1, #24
 800a876:	f7fe fe94 	bl	80095a2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a87a:	2101      	movs	r1, #1
 800a87c:	4620      	mov	r0, r4
 800a87e:	f7ff fc7d 	bl	800a17c <prvAddCurrentTaskToDelayedList>
}
 800a882:	bd10      	pop	{r4, pc}
 800a884:	20000914 	.word	0x20000914

0800a888 <vTaskPlaceOnEventListRestricted>:
	{
 800a888:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800a88a:	b940      	cbnz	r0, 800a89e <vTaskPlaceOnEventListRestricted+0x16>
 800a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	e7fe      	b.n	800a89c <vTaskPlaceOnEventListRestricted+0x14>
 800a89e:	460c      	mov	r4, r1
 800a8a0:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a8a2:	4a06      	ldr	r2, [pc, #24]	; (800a8bc <vTaskPlaceOnEventListRestricted+0x34>)
 800a8a4:	6811      	ldr	r1, [r2, #0]
 800a8a6:	3118      	adds	r1, #24
 800a8a8:	f7fe fe6f 	bl	800958a <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800a8ac:	b10d      	cbz	r5, 800a8b2 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 800a8ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a8b2:	4629      	mov	r1, r5
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f7ff fc61 	bl	800a17c <prvAddCurrentTaskToDelayedList>
	}
 800a8ba:	bd38      	pop	{r3, r4, r5, pc}
 800a8bc:	20000914 	.word	0x20000914

0800a8c0 <xTaskRemoveFromEventList>:
{
 800a8c0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8c2:	68c3      	ldr	r3, [r0, #12]
 800a8c4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a8c6:	b944      	cbnz	r4, 800a8da <xTaskRemoveFromEventList+0x1a>
 800a8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	e7fe      	b.n	800a8d8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8da:	f104 0518 	add.w	r5, r4, #24
 800a8de:	4628      	mov	r0, r5
 800a8e0:	f7fe fe79 	bl	80095d6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8e4:	4b13      	ldr	r3, [pc, #76]	; (800a934 <xTaskRemoveFromEventList+0x74>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	b9e3      	cbnz	r3, 800a924 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8ea:	1d25      	adds	r5, r4, #4
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	f7fe fe72 	bl	80095d6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a8f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	409a      	lsls	r2, r3
 800a8f8:	490f      	ldr	r1, [pc, #60]	; (800a938 <xTaskRemoveFromEventList+0x78>)
 800a8fa:	6808      	ldr	r0, [r1, #0]
 800a8fc:	4302      	orrs	r2, r0
 800a8fe:	600a      	str	r2, [r1, #0]
 800a900:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a904:	009a      	lsls	r2, r3, #2
 800a906:	4629      	mov	r1, r5
 800a908:	480c      	ldr	r0, [pc, #48]	; (800a93c <xTaskRemoveFromEventList+0x7c>)
 800a90a:	4410      	add	r0, r2
 800a90c:	f7fe fe3d 	bl	800958a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a910:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a912:	4b0b      	ldr	r3, [pc, #44]	; (800a940 <xTaskRemoveFromEventList+0x80>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a918:	429a      	cmp	r2, r3
 800a91a:	d908      	bls.n	800a92e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800a91c:	2001      	movs	r0, #1
 800a91e:	4b09      	ldr	r3, [pc, #36]	; (800a944 <xTaskRemoveFromEventList+0x84>)
 800a920:	6018      	str	r0, [r3, #0]
}
 800a922:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a924:	4629      	mov	r1, r5
 800a926:	4808      	ldr	r0, [pc, #32]	; (800a948 <xTaskRemoveFromEventList+0x88>)
 800a928:	f7fe fe2f 	bl	800958a <vListInsertEnd>
 800a92c:	e7f0      	b.n	800a910 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 800a92e:	2000      	movs	r0, #0
	return xReturn;
 800a930:	e7f7      	b.n	800a922 <xTaskRemoveFromEventList+0x62>
 800a932:	bf00      	nop
 800a934:	200009bc 	.word	0x200009bc
 800a938:	200009c4 	.word	0x200009c4
 800a93c:	20000920 	.word	0x20000920
 800a940:	20000914 	.word	0x20000914
 800a944:	20000a3c 	.word	0x20000a3c
 800a948:	200009f8 	.word	0x200009f8

0800a94c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a94c:	4b03      	ldr	r3, [pc, #12]	; (800a95c <vTaskInternalSetTimeOutState+0x10>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a952:	4b03      	ldr	r3, [pc, #12]	; (800a960 <vTaskInternalSetTimeOutState+0x14>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	6043      	str	r3, [r0, #4]
}
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	200009f4 	.word	0x200009f4
 800a960:	20000a38 	.word	0x20000a38

0800a964 <xTaskCheckForTimeOut>:
{
 800a964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800a966:	b150      	cbz	r0, 800a97e <xTaskCheckForTimeOut+0x1a>
 800a968:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800a96a:	b989      	cbnz	r1, 800a990 <xTaskCheckForTimeOut+0x2c>
 800a96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a970:	f383 8811 	msr	BASEPRI, r3
 800a974:	f3bf 8f6f 	isb	sy
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	e7fe      	b.n	800a97c <xTaskCheckForTimeOut+0x18>
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	e7fe      	b.n	800a98e <xTaskCheckForTimeOut+0x2a>
 800a990:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 800a992:	f000 fef7 	bl	800b784 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a996:	4b11      	ldr	r3, [pc, #68]	; (800a9dc <xTaskCheckForTimeOut+0x78>)
 800a998:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a99a:	6868      	ldr	r0, [r5, #4]
 800a99c:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9a4:	d016      	beq.n	800a9d4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9a6:	682f      	ldr	r7, [r5, #0]
 800a9a8:	4e0d      	ldr	r6, [pc, #52]	; (800a9e0 <xTaskCheckForTimeOut+0x7c>)
 800a9aa:	6836      	ldr	r6, [r6, #0]
 800a9ac:	42b7      	cmp	r7, r6
 800a9ae:	d001      	beq.n	800a9b4 <xTaskCheckForTimeOut+0x50>
 800a9b0:	4288      	cmp	r0, r1
 800a9b2:	d911      	bls.n	800a9d8 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d803      	bhi.n	800a9c0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800a9bc:	2401      	movs	r4, #1
 800a9be:	e005      	b.n	800a9cc <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800a9c0:	1a9b      	subs	r3, r3, r2
 800a9c2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	f7ff ffc1 	bl	800a94c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a9ca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a9cc:	f000 fefc 	bl	800b7c8 <vPortExitCritical>
}
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800a9d4:	2400      	movs	r4, #0
 800a9d6:	e7f9      	b.n	800a9cc <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 800a9d8:	2401      	movs	r4, #1
 800a9da:	e7f7      	b.n	800a9cc <xTaskCheckForTimeOut+0x68>
 800a9dc:	20000a38 	.word	0x20000a38
 800a9e0:	200009f4 	.word	0x200009f4

0800a9e4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a9e4:	4b01      	ldr	r3, [pc, #4]	; (800a9ec <vTaskMissedYield+0x8>)
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	601a      	str	r2, [r3, #0]
}
 800a9ea:	4770      	bx	lr
 800a9ec:	20000a3c 	.word	0x20000a3c

0800a9f0 <vTaskGetInfo>:
	{
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	b1d0      	cbz	r0, 800aa30 <vTaskGetInfo+0x40>
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800a9fa:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800a9fc:	f105 0234 	add.w	r2, r5, #52	; 0x34
 800aa00:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800aa02:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800aa04:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800aa06:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800aa08:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800aa0a:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800aa0c:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800aa0e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800aa10:	6162      	str	r2, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800aa12:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800aa14:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 800aa16:	2b05      	cmp	r3, #5
 800aa18:	d019      	beq.n	800aa4e <vTaskGetInfo+0x5e>
			if( pxTCB == pxCurrentTCB )
 800aa1a:	4a12      	ldr	r2, [pc, #72]	; (800aa64 <vTaskGetInfo+0x74>)
 800aa1c:	6812      	ldr	r2, [r2, #0]
 800aa1e:	42aa      	cmp	r2, r5
 800aa20:	d009      	beq.n	800aa36 <vTaskGetInfo+0x46>
				pxTaskStatus->eCurrentState = eState;
 800aa22:	7323      	strb	r3, [r4, #12]
					if( eState == eSuspended )
 800aa24:	2b03      	cmp	r3, #3
 800aa26:	d009      	beq.n	800aa3c <vTaskGetInfo+0x4c>
		if( xGetFreeStackSpace != pdFALSE )
 800aa28:	b9b6      	cbnz	r6, 800aa58 <vTaskGetInfo+0x68>
			pxTaskStatus->usStackHighWaterMark = 0;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	8423      	strh	r3, [r4, #32]
	}
 800aa2e:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
 800aa30:	4a0c      	ldr	r2, [pc, #48]	; (800aa64 <vTaskGetInfo+0x74>)
 800aa32:	6815      	ldr	r5, [r2, #0]
 800aa34:	e7e1      	b.n	800a9fa <vTaskGetInfo+0xa>
				pxTaskStatus->eCurrentState = eRunning;
 800aa36:	2300      	movs	r3, #0
 800aa38:	7323      	strb	r3, [r4, #12]
 800aa3a:	e7f5      	b.n	800aa28 <vTaskGetInfo+0x38>
						vTaskSuspendAll();
 800aa3c:	f7ff fcfe 	bl	800a43c <vTaskSuspendAll>
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa40:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800aa42:	b10b      	cbz	r3, 800aa48 <vTaskGetInfo+0x58>
								pxTaskStatus->eCurrentState = eBlocked;
 800aa44:	2302      	movs	r3, #2
 800aa46:	7323      	strb	r3, [r4, #12]
						( void ) xTaskResumeAll();
 800aa48:	f7ff fd92 	bl	800a570 <xTaskResumeAll>
 800aa4c:	e7ec      	b.n	800aa28 <vTaskGetInfo+0x38>
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f7ff fc5e 	bl	800a310 <eTaskGetState>
 800aa54:	7320      	strb	r0, [r4, #12]
 800aa56:	e7e7      	b.n	800aa28 <vTaskGetInfo+0x38>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800aa58:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800aa5a:	f7ff fa3e 	bl	8009eda <prvTaskCheckFreeStackSpace>
 800aa5e:	8420      	strh	r0, [r4, #32]
 800aa60:	e7e5      	b.n	800aa2e <vTaskGetInfo+0x3e>
 800aa62:	bf00      	nop
 800aa64:	20000914 	.word	0x20000914

0800aa68 <prvListTasksWithinSingleList>:
	{
 800aa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800aa6c:	680b      	ldr	r3, [r1, #0]
 800aa6e:	b33b      	cbz	r3, 800aac0 <prvListTasksWithinSingleList+0x58>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa70:	684b      	ldr	r3, [r1, #4]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	604b      	str	r3, [r1, #4]
 800aa76:	f101 0908 	add.w	r9, r1, #8
 800aa7a:	454b      	cmp	r3, r9
 800aa7c:	d007      	beq.n	800aa8e <prvListTasksWithinSingleList+0x26>
 800aa7e:	4690      	mov	r8, r2
 800aa80:	460c      	mov	r4, r1
 800aa82:	4607      	mov	r7, r0
 800aa84:	684b      	ldr	r3, [r1, #4]
 800aa86:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	UBaseType_t uxTask = 0;
 800aa8a:	2500      	movs	r5, #0
 800aa8c:	e010      	b.n	800aab0 <prvListTasksWithinSingleList+0x48>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	604b      	str	r3, [r1, #4]
 800aa92:	e7f4      	b.n	800aa7e <prvListTasksWithinSingleList+0x16>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa94:	6863      	ldr	r3, [r4, #4]
 800aa96:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800aa98:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800aa9c:	0099      	lsls	r1, r3, #2
 800aa9e:	4643      	mov	r3, r8
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	4439      	add	r1, r7
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	f7ff ffa3 	bl	800a9f0 <vTaskGetInfo>
				uxTask++;
 800aaaa:	3501      	adds	r5, #1
			} while( pxNextTCB != pxFirstTCB );
 800aaac:	45b2      	cmp	sl, r6
 800aaae:	d008      	beq.n	800aac2 <prvListTasksWithinSingleList+0x5a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aab0:	6863      	ldr	r3, [r4, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	6063      	str	r3, [r4, #4]
 800aab6:	4599      	cmp	r9, r3
 800aab8:	d1ec      	bne.n	800aa94 <prvListTasksWithinSingleList+0x2c>
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	6063      	str	r3, [r4, #4]
 800aabe:	e7e9      	b.n	800aa94 <prvListTasksWithinSingleList+0x2c>
	UBaseType_t uxTask = 0;
 800aac0:	2500      	movs	r5, #0
	}
 800aac2:	4628      	mov	r0, r5
 800aac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800aac8 <uxTaskGetSystemState>:
	{
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	4607      	mov	r7, r0
 800aacc:	460c      	mov	r4, r1
 800aace:	4616      	mov	r6, r2
		vTaskSuspendAll();
 800aad0:	f7ff fcb4 	bl	800a43c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800aad4:	4b22      	ldr	r3, [pc, #136]	; (800ab60 <uxTaskGetSystemState+0x98>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	42a3      	cmp	r3, r4
 800aada:	d83c      	bhi.n	800ab56 <uxTaskGetSystemState+0x8e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800aadc:	2507      	movs	r5, #7
 800aade:	2400      	movs	r4, #0
					uxQueue--;
 800aae0:	3d01      	subs	r5, #1
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800aae2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800aae6:	0098      	lsls	r0, r3, #2
 800aae8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800aaec:	0093      	lsls	r3, r2, #2
 800aaee:	2201      	movs	r2, #1
 800aaf0:	491c      	ldr	r1, [pc, #112]	; (800ab64 <uxTaskGetSystemState+0x9c>)
 800aaf2:	4419      	add	r1, r3
 800aaf4:	4438      	add	r0, r7
 800aaf6:	f7ff ffb7 	bl	800aa68 <prvListTasksWithinSingleList>
 800aafa:	4404      	add	r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aafc:	2d00      	cmp	r5, #0
 800aafe:	d1ef      	bne.n	800aae0 <uxTaskGetSystemState+0x18>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800ab00:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800ab04:	0098      	lsls	r0, r3, #2
 800ab06:	4b18      	ldr	r3, [pc, #96]	; (800ab68 <uxTaskGetSystemState+0xa0>)
 800ab08:	6819      	ldr	r1, [r3, #0]
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	4438      	add	r0, r7
 800ab0e:	f7ff ffab 	bl	800aa68 <prvListTasksWithinSingleList>
 800ab12:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800ab14:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800ab18:	0098      	lsls	r0, r3, #2
 800ab1a:	4b14      	ldr	r3, [pc, #80]	; (800ab6c <uxTaskGetSystemState+0xa4>)
 800ab1c:	6819      	ldr	r1, [r3, #0]
 800ab1e:	2202      	movs	r2, #2
 800ab20:	4438      	add	r0, r7
 800ab22:	f7ff ffa1 	bl	800aa68 <prvListTasksWithinSingleList>
 800ab26:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800ab28:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800ab2c:	0098      	lsls	r0, r3, #2
 800ab2e:	2204      	movs	r2, #4
 800ab30:	490f      	ldr	r1, [pc, #60]	; (800ab70 <uxTaskGetSystemState+0xa8>)
 800ab32:	4438      	add	r0, r7
 800ab34:	f7ff ff98 	bl	800aa68 <prvListTasksWithinSingleList>
 800ab38:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800ab3a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800ab3e:	0098      	lsls	r0, r3, #2
 800ab40:	2203      	movs	r2, #3
 800ab42:	490c      	ldr	r1, [pc, #48]	; (800ab74 <uxTaskGetSystemState+0xac>)
 800ab44:	4438      	add	r0, r7
 800ab46:	f7ff ff8f 	bl	800aa68 <prvListTasksWithinSingleList>
 800ab4a:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 800ab4c:	b126      	cbz	r6, 800ab58 <uxTaskGetSystemState+0x90>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ab4e:	4b0a      	ldr	r3, [pc, #40]	; (800ab78 <uxTaskGetSystemState+0xb0>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6033      	str	r3, [r6, #0]
 800ab54:	e000      	b.n	800ab58 <uxTaskGetSystemState+0x90>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800ab56:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 800ab58:	f7ff fd0a 	bl	800a570 <xTaskResumeAll>
	}
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab60:	200009b0 	.word	0x200009b0
 800ab64:	20000920 	.word	0x20000920
 800ab68:	20000918 	.word	0x20000918
 800ab6c:	2000091c 	.word	0x2000091c
 800ab70:	20000a24 	.word	0x20000a24
 800ab74:	20000a10 	.word	0x20000a10
 800ab78:	200033d4 	.word	0x200033d4

0800ab7c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800ab7c:	4b01      	ldr	r3, [pc, #4]	; (800ab84 <xTaskGetCurrentTaskHandle+0x8>)
 800ab7e:	6818      	ldr	r0, [r3, #0]
	}
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	20000914 	.word	0x20000914

0800ab88 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ab88:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <xTaskGetSchedulerState+0x18>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	b133      	cbz	r3, 800ab9c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab8e:	4b05      	ldr	r3, [pc, #20]	; (800aba4 <xTaskGetSchedulerState+0x1c>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	b10b      	cbz	r3, 800ab98 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab94:	2000      	movs	r0, #0
	}
 800ab96:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800ab98:	2002      	movs	r0, #2
 800ab9a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab9c:	2001      	movs	r0, #1
 800ab9e:	4770      	bx	lr
 800aba0:	20000a0c 	.word	0x20000a0c
 800aba4:	200009bc 	.word	0x200009bc

0800aba8 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d050      	beq.n	800ac4e <xTaskPriorityInherit+0xa6>
	{
 800abac:	b538      	push	{r3, r4, r5, lr}
 800abae:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800abb0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800abb2:	4928      	ldr	r1, [pc, #160]	; (800ac54 <xTaskPriorityInherit+0xac>)
 800abb4:	6809      	ldr	r1, [r1, #0]
 800abb6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800abb8:	428a      	cmp	r2, r1
 800abba:	d23e      	bcs.n	800ac3a <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800abbc:	6981      	ldr	r1, [r0, #24]
 800abbe:	2900      	cmp	r1, #0
 800abc0:	db05      	blt.n	800abce <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abc2:	4924      	ldr	r1, [pc, #144]	; (800ac54 <xTaskPriorityInherit+0xac>)
 800abc4:	6809      	ldr	r1, [r1, #0]
 800abc6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800abc8:	f1c1 0107 	rsb	r1, r1, #7
 800abcc:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800abce:	6960      	ldr	r0, [r4, #20]
 800abd0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800abd4:	0091      	lsls	r1, r2, #2
 800abd6:	4a20      	ldr	r2, [pc, #128]	; (800ac58 <xTaskPriorityInherit+0xb0>)
 800abd8:	440a      	add	r2, r1
 800abda:	4290      	cmp	r0, r2
 800abdc:	d005      	beq.n	800abea <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abde:	4a1d      	ldr	r2, [pc, #116]	; (800ac54 <xTaskPriorityInherit+0xac>)
 800abe0:	6812      	ldr	r2, [r2, #0]
 800abe2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800abe4:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800abe6:	2001      	movs	r0, #1
	}
 800abe8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abea:	1d25      	adds	r5, r4, #4
 800abec:	4628      	mov	r0, r5
 800abee:	f7fe fcf2 	bl	80095d6 <uxListRemove>
 800abf2:	b968      	cbnz	r0, 800ac10 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800abf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800abf6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800abfa:	008a      	lsls	r2, r1, #2
 800abfc:	4916      	ldr	r1, [pc, #88]	; (800ac58 <xTaskPriorityInherit+0xb0>)
 800abfe:	588a      	ldr	r2, [r1, r2]
 800ac00:	b932      	cbnz	r2, 800ac10 <xTaskPriorityInherit+0x68>
 800ac02:	2201      	movs	r2, #1
 800ac04:	409a      	lsls	r2, r3
 800ac06:	4915      	ldr	r1, [pc, #84]	; (800ac5c <xTaskPriorityInherit+0xb4>)
 800ac08:	680b      	ldr	r3, [r1, #0]
 800ac0a:	ea23 0302 	bic.w	r3, r3, r2
 800ac0e:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac10:	4b10      	ldr	r3, [pc, #64]	; (800ac54 <xTaskPriorityInherit+0xac>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac16:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ac18:	2401      	movs	r4, #1
 800ac1a:	fa04 f203 	lsl.w	r2, r4, r3
 800ac1e:	490f      	ldr	r1, [pc, #60]	; (800ac5c <xTaskPriorityInherit+0xb4>)
 800ac20:	6808      	ldr	r0, [r1, #0]
 800ac22:	4302      	orrs	r2, r0
 800ac24:	600a      	str	r2, [r1, #0]
 800ac26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ac2a:	009a      	lsls	r2, r3, #2
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	480a      	ldr	r0, [pc, #40]	; (800ac58 <xTaskPriorityInherit+0xb0>)
 800ac30:	4410      	add	r0, r2
 800ac32:	f7fe fcaa 	bl	800958a <vListInsertEnd>
				xReturn = pdTRUE;
 800ac36:	4620      	mov	r0, r4
 800ac38:	e7d6      	b.n	800abe8 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ac3a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ac3c:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <xTaskPriorityInherit+0xac>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d201      	bcs.n	800ac4a <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
 800ac46:	2001      	movs	r0, #1
		return xReturn;
 800ac48:	e7ce      	b.n	800abe8 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	e7cc      	b.n	800abe8 <xTaskPriorityInherit+0x40>
 800ac4e:	2000      	movs	r0, #0
	}
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	20000914 	.word	0x20000914
 800ac58:	20000920 	.word	0x20000920
 800ac5c:	200009c4 	.word	0x200009c4

0800ac60 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d049      	beq.n	800acf8 <xTaskPriorityDisinherit+0x98>
	{
 800ac64:	b538      	push	{r3, r4, r5, lr}
 800ac66:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800ac68:	4a26      	ldr	r2, [pc, #152]	; (800ad04 <xTaskPriorityDisinherit+0xa4>)
 800ac6a:	6812      	ldr	r2, [r2, #0]
 800ac6c:	4282      	cmp	r2, r0
 800ac6e:	d008      	beq.n	800ac82 <xTaskPriorityDisinherit+0x22>
 800ac70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	e7fe      	b.n	800ac80 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac82:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800ac84:	b942      	cbnz	r2, 800ac98 <xTaskPriorityDisinherit+0x38>
 800ac86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8a:	f383 8811 	msr	BASEPRI, r3
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	f3bf 8f4f 	dsb	sy
 800ac96:	e7fe      	b.n	800ac96 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800ac98:	3a01      	subs	r2, #1
 800ac9a:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac9c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800ac9e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800aca0:	4288      	cmp	r0, r1
 800aca2:	d02b      	beq.n	800acfc <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aca4:	bb62      	cbnz	r2, 800ad00 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aca6:	1d25      	adds	r5, r4, #4
 800aca8:	4628      	mov	r0, r5
 800acaa:	f7fe fc94 	bl	80095d6 <uxListRemove>
 800acae:	b970      	cbnz	r0, 800acce <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800acb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800acb2:	2314      	movs	r3, #20
 800acb4:	fb03 f302 	mul.w	r3, r3, r2
 800acb8:	4913      	ldr	r1, [pc, #76]	; (800ad08 <xTaskPriorityDisinherit+0xa8>)
 800acba:	58cb      	ldr	r3, [r1, r3]
 800acbc:	b93b      	cbnz	r3, 800acce <xTaskPriorityDisinherit+0x6e>
 800acbe:	2301      	movs	r3, #1
 800acc0:	fa03 f202 	lsl.w	r2, r3, r2
 800acc4:	4911      	ldr	r1, [pc, #68]	; (800ad0c <xTaskPriorityDisinherit+0xac>)
 800acc6:	680b      	ldr	r3, [r1, #0]
 800acc8:	ea23 0302 	bic.w	r3, r3, r2
 800accc:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800acd0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acd2:	f1c3 0207 	rsb	r2, r3, #7
 800acd6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800acd8:	2401      	movs	r4, #1
 800acda:	fa04 f203 	lsl.w	r2, r4, r3
 800acde:	490b      	ldr	r1, [pc, #44]	; (800ad0c <xTaskPriorityDisinherit+0xac>)
 800ace0:	6808      	ldr	r0, [r1, #0]
 800ace2:	4302      	orrs	r2, r0
 800ace4:	600a      	str	r2, [r1, #0]
 800ace6:	4629      	mov	r1, r5
 800ace8:	4a07      	ldr	r2, [pc, #28]	; (800ad08 <xTaskPriorityDisinherit+0xa8>)
 800acea:	2014      	movs	r0, #20
 800acec:	fb00 2003 	mla	r0, r0, r3, r2
 800acf0:	f7fe fc4b 	bl	800958a <vListInsertEnd>
					xReturn = pdTRUE;
 800acf4:	4620      	mov	r0, r4
	}
 800acf6:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800acf8:	2000      	movs	r0, #0
	}
 800acfa:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800acfc:	2000      	movs	r0, #0
 800acfe:	e7fa      	b.n	800acf6 <xTaskPriorityDisinherit+0x96>
 800ad00:	2000      	movs	r0, #0
		return xReturn;
 800ad02:	e7f8      	b.n	800acf6 <xTaskPriorityDisinherit+0x96>
 800ad04:	20000914 	.word	0x20000914
 800ad08:	20000920 	.word	0x20000920
 800ad0c:	200009c4 	.word	0x200009c4

0800ad10 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d055      	beq.n	800adc0 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800ad18:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800ad1a:	b940      	cbnz	r0, 800ad2e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800ad1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	e7fe      	b.n	800ad2c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ad2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad30:	428a      	cmp	r2, r1
 800ad32:	d200      	bcs.n	800ad36 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ad34:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ad38:	4291      	cmp	r1, r2
 800ad3a:	d001      	beq.n	800ad40 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad3c:	2801      	cmp	r0, #1
 800ad3e:	d000      	beq.n	800ad42 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800ad40:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800ad42:	4820      	ldr	r0, [pc, #128]	; (800adc4 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 800ad44:	6800      	ldr	r0, [r0, #0]
 800ad46:	4298      	cmp	r0, r3
 800ad48:	d108      	bne.n	800ad5c <vTaskPriorityDisinheritAfterTimeout+0x4c>
 800ad4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	e7fe      	b.n	800ad5a <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 800ad5c:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad5e:	6998      	ldr	r0, [r3, #24]
 800ad60:	2800      	cmp	r0, #0
 800ad62:	db02      	blt.n	800ad6a <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad64:	f1c2 0207 	rsb	r2, r2, #7
 800ad68:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad6a:	695a      	ldr	r2, [r3, #20]
 800ad6c:	4816      	ldr	r0, [pc, #88]	; (800adc8 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800ad6e:	2414      	movs	r4, #20
 800ad70:	fb04 0101 	mla	r1, r4, r1, r0
 800ad74:	428a      	cmp	r2, r1
 800ad76:	d1e3      	bne.n	800ad40 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800ad78:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad7a:	1d1d      	adds	r5, r3, #4
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	f7fe fc2a 	bl	80095d6 <uxListRemove>
 800ad82:	b970      	cbnz	r0, 800ada2 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ad84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ad86:	2314      	movs	r3, #20
 800ad88:	fb03 f302 	mul.w	r3, r3, r2
 800ad8c:	490e      	ldr	r1, [pc, #56]	; (800adc8 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800ad8e:	58cb      	ldr	r3, [r1, r3]
 800ad90:	b93b      	cbnz	r3, 800ada2 <vTaskPriorityDisinheritAfterTimeout+0x92>
 800ad92:	2301      	movs	r3, #1
 800ad94:	fa03 f202 	lsl.w	r2, r3, r2
 800ad98:	490c      	ldr	r1, [pc, #48]	; (800adcc <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800ad9a:	680b      	ldr	r3, [r1, #0]
 800ad9c:	ea23 0302 	bic.w	r3, r3, r2
 800ada0:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 800ada2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ada4:	2301      	movs	r3, #1
 800ada6:	4093      	lsls	r3, r2
 800ada8:	4908      	ldr	r1, [pc, #32]	; (800adcc <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800adaa:	6808      	ldr	r0, [r1, #0]
 800adac:	4303      	orrs	r3, r0
 800adae:	600b      	str	r3, [r1, #0]
 800adb0:	4629      	mov	r1, r5
 800adb2:	4b05      	ldr	r3, [pc, #20]	; (800adc8 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800adb4:	2014      	movs	r0, #20
 800adb6:	fb00 3002 	mla	r0, r0, r2, r3
 800adba:	f7fe fbe6 	bl	800958a <vListInsertEnd>
	}
 800adbe:	e7bf      	b.n	800ad40 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	20000914 	.word	0x20000914
 800adc8:	20000920 	.word	0x20000920
 800adcc:	200009c4 	.word	0x200009c4

0800add0 <vTaskGetRunTimeStats>:
	{
 800add0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800add4:	b083      	sub	sp, #12
 800add6:	4607      	mov	r7, r0
		*pcWriteBuffer = ( char ) 0x00;
 800add8:	2300      	movs	r3, #0
 800adda:	7003      	strb	r3, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800addc:	4b1e      	ldr	r3, [pc, #120]	; (800ae58 <vTaskGetRunTimeStats+0x88>)
 800adde:	681c      	ldr	r4, [r3, #0]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800ade6:	0098      	lsls	r0, r3, #2
 800ade8:	f000 fe82 	bl	800baf0 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 800adec:	b178      	cbz	r0, 800ae0e <vTaskGetRunTimeStats+0x3e>
 800adee:	4680      	mov	r8, r0
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800adf0:	aa01      	add	r2, sp, #4
 800adf2:	4621      	mov	r1, r4
 800adf4:	f7ff fe68 	bl	800aac8 <uxTaskGetSystemState>
 800adf8:	4681      	mov	r9, r0
			ulTotalTime /= 100UL;
 800adfa:	9b01      	ldr	r3, [sp, #4]
 800adfc:	4a17      	ldr	r2, [pc, #92]	; (800ae5c <vTaskGetRunTimeStats+0x8c>)
 800adfe:	fba2 2303 	umull	r2, r3, r2, r3
 800ae02:	095b      	lsrs	r3, r3, #5
 800ae04:	9301      	str	r3, [sp, #4]
			if( ulTotalTime > 0UL )
 800ae06:	bb2b      	cbnz	r3, 800ae54 <vTaskGetRunTimeStats+0x84>
			vPortFree( pxTaskStatusArray );
 800ae08:	4640      	mov	r0, r8
 800ae0a:	f000 fef5 	bl	800bbf8 <vPortFree>
	}
 800ae0e:	b003      	add	sp, #12
 800ae10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800ae14:	69a2      	ldr	r2, [r4, #24]
 800ae16:	4912      	ldr	r1, [pc, #72]	; (800ae60 <vTaskGetRunTimeStats+0x90>)
 800ae18:	f001 fc60 	bl	800c6dc <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800ae1c:	4638      	mov	r0, r7
 800ae1e:	f7f5 f9df 	bl	80001e0 <strlen>
 800ae22:	4407      	add	r7, r0
				for( x = 0; x < uxArraySize; x++ )
 800ae24:	3501      	adds	r5, #1
 800ae26:	454d      	cmp	r5, r9
 800ae28:	d2ee      	bcs.n	800ae08 <vTaskGetRunTimeStats+0x38>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ae2a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800ae2e:	009c      	lsls	r4, r3, #2
 800ae30:	4444      	add	r4, r8
 800ae32:	69a6      	ldr	r6, [r4, #24]
 800ae34:	9b01      	ldr	r3, [sp, #4]
 800ae36:	fbb6 f6f3 	udiv	r6, r6, r3
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ae3a:	6861      	ldr	r1, [r4, #4]
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	f7ff f9e9 	bl	800a214 <prvWriteNameToBuffer>
 800ae42:	4607      	mov	r7, r0
					if( ulStatsAsPercentage > 0UL )
 800ae44:	2e00      	cmp	r6, #0
 800ae46:	d0e5      	beq.n	800ae14 <vTaskGetRunTimeStats+0x44>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800ae48:	4633      	mov	r3, r6
 800ae4a:	69a2      	ldr	r2, [r4, #24]
 800ae4c:	4905      	ldr	r1, [pc, #20]	; (800ae64 <vTaskGetRunTimeStats+0x94>)
 800ae4e:	f001 fc45 	bl	800c6dc <siprintf>
 800ae52:	e7e3      	b.n	800ae1c <vTaskGetRunTimeStats+0x4c>
				for( x = 0; x < uxArraySize; x++ )
 800ae54:	2500      	movs	r5, #0
 800ae56:	e7e6      	b.n	800ae26 <vTaskGetRunTimeStats+0x56>
 800ae58:	200009b0 	.word	0x200009b0
 800ae5c:	51eb851f 	.word	0x51eb851f
 800ae60:	0800dfe4 	.word	0x0800dfe4
 800ae64:	0800dfd8 	.word	0x0800dfd8

0800ae68 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800ae68:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <pvTaskIncrementMutexHeldCount+0x18>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	b123      	cbz	r3, 800ae78 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae6e:	4b04      	ldr	r3, [pc, #16]	; (800ae80 <pvTaskIncrementMutexHeldCount+0x18>)
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ae74:	3301      	adds	r3, #1
 800ae76:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
 800ae78:	4b01      	ldr	r3, [pc, #4]	; (800ae80 <pvTaskIncrementMutexHeldCount+0x18>)
 800ae7a:	6818      	ldr	r0, [r3, #0]
	}
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	20000914 	.word	0x20000914

0800ae84 <ulTaskNotifyTake>:
	{
 800ae84:	b538      	push	{r3, r4, r5, lr}
 800ae86:	4605      	mov	r5, r0
 800ae88:	460c      	mov	r4, r1
		taskENTER_CRITICAL();
 800ae8a:	f000 fc7b 	bl	800b784 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ae8e:	4b19      	ldr	r3, [pc, #100]	; (800aef4 <ulTaskNotifyTake+0x70>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae94:	b92b      	cbnz	r3, 800aea2 <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ae96:	4b17      	ldr	r3, [pc, #92]	; (800aef4 <ulTaskNotifyTake+0x70>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 800aea0:	b9ac      	cbnz	r4, 800aece <ulTaskNotifyTake+0x4a>
		taskEXIT_CRITICAL();
 800aea2:	f000 fc91 	bl	800b7c8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800aea6:	f000 fc6d 	bl	800b784 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800aeaa:	4b12      	ldr	r3, [pc, #72]	; (800aef4 <ulTaskNotifyTake+0x70>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if( ulReturn != 0UL )
 800aeb0:	b124      	cbz	r4, 800aebc <ulTaskNotifyTake+0x38>
				if( xClearCountOnExit != pdFALSE )
 800aeb2:	b9cd      	cbnz	r5, 800aee8 <ulTaskNotifyTake+0x64>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800aeb4:	4b0f      	ldr	r3, [pc, #60]	; (800aef4 <ulTaskNotifyTake+0x70>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	1e62      	subs	r2, r4, #1
 800aeba:	65da      	str	r2, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aebc:	4b0d      	ldr	r3, [pc, #52]	; (800aef4 <ulTaskNotifyTake+0x70>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 800aec6:	f000 fc7f 	bl	800b7c8 <vPortExitCritical>
	}
 800aeca:	4620      	mov	r0, r4
 800aecc:	bd38      	pop	{r3, r4, r5, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aece:	4611      	mov	r1, r2
 800aed0:	4620      	mov	r0, r4
 800aed2:	f7ff f953 	bl	800a17c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800aed6:	4b08      	ldr	r3, [pc, #32]	; (800aef8 <ulTaskNotifyTake+0x74>)
 800aed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aedc:	601a      	str	r2, [r3, #0]
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	e7dc      	b.n	800aea2 <ulTaskNotifyTake+0x1e>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800aee8:	4b02      	ldr	r3, [pc, #8]	; (800aef4 <ulTaskNotifyTake+0x70>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2200      	movs	r2, #0
 800aeee:	65da      	str	r2, [r3, #92]	; 0x5c
 800aef0:	e7e4      	b.n	800aebc <ulTaskNotifyTake+0x38>
 800aef2:	bf00      	nop
 800aef4:	20000914 	.word	0x20000914
 800aef8:	e000ed04 	.word	0xe000ed04

0800aefc <xTaskNotifyWait>:
	{
 800aefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefe:	4607      	mov	r7, r0
 800af00:	460d      	mov	r5, r1
 800af02:	4614      	mov	r4, r2
 800af04:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 800af06:	f000 fc3d 	bl	800b784 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800af0a:	4b20      	ldr	r3, [pc, #128]	; (800af8c <xTaskNotifyWait+0x90>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800af12:	b2db      	uxtb	r3, r3
 800af14:	2b02      	cmp	r3, #2
 800af16:	d00a      	beq.n	800af2e <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800af18:	4b1c      	ldr	r3, [pc, #112]	; (800af8c <xTaskNotifyWait+0x90>)
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800af1e:	ea20 0007 	bic.w	r0, r0, r7
 800af22:	65d0      	str	r0, [r2, #92]	; 0x5c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 800af2c:	b9ce      	cbnz	r6, 800af62 <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 800af2e:	f000 fc4b 	bl	800b7c8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800af32:	f000 fc27 	bl	800b784 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800af36:	b11c      	cbz	r4, 800af40 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800af38:	4b14      	ldr	r3, [pc, #80]	; (800af8c <xTaskNotifyWait+0x90>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af3e:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800af40:	4b12      	ldr	r3, [pc, #72]	; (800af8c <xTaskNotifyWait+0x90>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d016      	beq.n	800af7c <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 800af4e:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af50:	4b0e      	ldr	r3, [pc, #56]	; (800af8c <xTaskNotifyWait+0x90>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2200      	movs	r2, #0
 800af56:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 800af5a:	f000 fc35 	bl	800b7c8 <vPortExitCritical>
	}
 800af5e:	4620      	mov	r0, r4
 800af60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800af62:	4611      	mov	r1, r2
 800af64:	4630      	mov	r0, r6
 800af66:	f7ff f909 	bl	800a17c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800af6a:	4b09      	ldr	r3, [pc, #36]	; (800af90 <xTaskNotifyWait+0x94>)
 800af6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af70:	601a      	str	r2, [r3, #0]
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	e7d8      	b.n	800af2e <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800af7c:	4b03      	ldr	r3, [pc, #12]	; (800af8c <xTaskNotifyWait+0x90>)
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800af82:	ea23 0505 	bic.w	r5, r3, r5
 800af86:	65d5      	str	r5, [r2, #92]	; 0x5c
				xReturn = pdTRUE;
 800af88:	2401      	movs	r4, #1
 800af8a:	e7e1      	b.n	800af50 <xTaskNotifyWait+0x54>
 800af8c:	20000914 	.word	0x20000914
 800af90:	e000ed04 	.word	0xe000ed04

0800af94 <xTaskGenericNotifyFromISR>:
	{
 800af94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af98:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
 800af9a:	b940      	cbnz	r0, 800afae <xTaskGenericNotifyFromISR+0x1a>
 800af9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	e7fe      	b.n	800afac <xTaskGenericNotifyFromISR+0x18>
 800afae:	4604      	mov	r4, r0
 800afb0:	4699      	mov	r9, r3
 800afb2:	4690      	mov	r8, r2
 800afb4:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afb6:	f000 fd0f 	bl	800b9d8 <vPortValidateInterruptPriority>
	__asm volatile
 800afba:	f3ef 8711 	mrs	r7, BASEPRI
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800afce:	f1b9 0f00 	cmp.w	r9, #0
 800afd2:	d002      	beq.n	800afda <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800afd4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800afd6:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800afda:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800afde:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800afe0:	2202      	movs	r2, #2
 800afe2:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			switch( eAction )
 800afe6:	f1b8 0f04 	cmp.w	r8, #4
 800afea:	d81c      	bhi.n	800b026 <xTaskGenericNotifyFromISR+0x92>
 800afec:	e8df f008 	tbb	[pc, r8]
 800aff0:	130e0328 	.word	0x130e0328
 800aff4:	16          	.byte	0x16
 800aff5:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 800aff6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800aff8:	4315      	orrs	r5, r2
 800affa:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800affc:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800affe:	2b01      	cmp	r3, #1
 800b000:	d024      	beq.n	800b04c <xTaskGenericNotifyFromISR+0xb8>
	__asm volatile
 800b002:	f387 8811 	msr	BASEPRI, r7
	}
 800b006:	4628      	mov	r0, r5
 800b008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 800b00c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b00e:	3201      	adds	r2, #1
 800b010:	65e2      	str	r2, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800b012:	2501      	movs	r5, #1
					break;
 800b014:	e7f3      	b.n	800affe <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 800b016:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800b018:	2501      	movs	r5, #1
					break;
 800b01a:	e7f0      	b.n	800affe <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b01c:	2b02      	cmp	r3, #2
 800b01e:	d011      	beq.n	800b044 <xTaskGenericNotifyFromISR+0xb0>
						pxTCB->ulNotifiedValue = ulValue;
 800b020:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800b022:	2501      	movs	r5, #1
 800b024:	e7eb      	b.n	800affe <xTaskGenericNotifyFromISR+0x6a>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b026:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b028:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b02c:	d00c      	beq.n	800b048 <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 800b02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	e7fe      	b.n	800b03e <xTaskGenericNotifyFromISR+0xaa>
	BaseType_t xReturn = pdPASS;
 800b040:	2501      	movs	r5, #1
 800b042:	e7dc      	b.n	800affe <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 800b044:	2500      	movs	r5, #0
 800b046:	e7da      	b.n	800affe <xTaskGenericNotifyFromISR+0x6a>
	BaseType_t xReturn = pdPASS;
 800b048:	2501      	movs	r5, #1
 800b04a:	e7d8      	b.n	800affe <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b04c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b04e:	b143      	cbz	r3, 800b062 <xTaskGenericNotifyFromISR+0xce>
 800b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b054:	f383 8811 	msr	BASEPRI, r3
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	e7fe      	b.n	800b060 <xTaskGenericNotifyFromISR+0xcc>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b062:	4b14      	ldr	r3, [pc, #80]	; (800b0b4 <xTaskGenericNotifyFromISR+0x120>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	b9fb      	cbnz	r3, 800b0a8 <xTaskGenericNotifyFromISR+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b068:	f104 0804 	add.w	r8, r4, #4
 800b06c:	4640      	mov	r0, r8
 800b06e:	f7fe fab2 	bl	80095d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b072:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b074:	2301      	movs	r3, #1
 800b076:	4093      	lsls	r3, r2
 800b078:	490f      	ldr	r1, [pc, #60]	; (800b0b8 <xTaskGenericNotifyFromISR+0x124>)
 800b07a:	6808      	ldr	r0, [r1, #0]
 800b07c:	4303      	orrs	r3, r0
 800b07e:	600b      	str	r3, [r1, #0]
 800b080:	4641      	mov	r1, r8
 800b082:	4b0e      	ldr	r3, [pc, #56]	; (800b0bc <xTaskGenericNotifyFromISR+0x128>)
 800b084:	2014      	movs	r0, #20
 800b086:	fb00 3002 	mla	r0, r0, r2, r3
 800b08a:	f7fe fa7e 	bl	800958a <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b08e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b090:	4b0b      	ldr	r3, [pc, #44]	; (800b0c0 <xTaskGenericNotifyFromISR+0x12c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	429a      	cmp	r2, r3
 800b098:	d9b3      	bls.n	800b002 <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 800b09a:	b10e      	cbz	r6, 800b0a0 <xTaskGenericNotifyFromISR+0x10c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b09c:	2301      	movs	r3, #1
 800b09e:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 800b0a0:	4b08      	ldr	r3, [pc, #32]	; (800b0c4 <xTaskGenericNotifyFromISR+0x130>)
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	601a      	str	r2, [r3, #0]
 800b0a6:	e7ac      	b.n	800b002 <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b0a8:	f104 0118 	add.w	r1, r4, #24
 800b0ac:	4806      	ldr	r0, [pc, #24]	; (800b0c8 <xTaskGenericNotifyFromISR+0x134>)
 800b0ae:	f7fe fa6c 	bl	800958a <vListInsertEnd>
 800b0b2:	e7ec      	b.n	800b08e <xTaskGenericNotifyFromISR+0xfa>
 800b0b4:	200009bc 	.word	0x200009bc
 800b0b8:	200009c4 	.word	0x200009c4
 800b0bc:	20000920 	.word	0x20000920
 800b0c0:	20000914 	.word	0x20000914
 800b0c4:	20000a3c 	.word	0x20000a3c
 800b0c8:	200009f8 	.word	0x200009f8

0800b0cc <vTaskNotifyGiveFromISR>:
	{
 800b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 800b0ce:	b940      	cbnz	r0, 800b0e2 <vTaskNotifyGiveFromISR+0x16>
 800b0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	e7fe      	b.n	800b0e0 <vTaskNotifyGiveFromISR+0x14>
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0e6:	f000 fc77 	bl	800b9d8 <vPortValidateInterruptPriority>
	__asm volatile
 800b0ea:	f3ef 8611 	mrs	r6, BASEPRI
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b0fe:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800b102:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b104:	2202      	movs	r2, #2
 800b106:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			( pxTCB->ulNotifiedValue )++;
 800b10a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b10c:	3201      	adds	r2, #1
 800b10e:	65e2      	str	r2, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b110:	2b01      	cmp	r3, #1
 800b112:	d002      	beq.n	800b11a <vTaskNotifyGiveFromISR+0x4e>
	__asm volatile
 800b114:	f386 8811 	msr	BASEPRI, r6
	}
 800b118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b11a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b11c:	b143      	cbz	r3, 800b130 <vTaskNotifyGiveFromISR+0x64>
	__asm volatile
 800b11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b122:	f383 8811 	msr	BASEPRI, r3
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	e7fe      	b.n	800b12e <vTaskNotifyGiveFromISR+0x62>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b130:	4b13      	ldr	r3, [pc, #76]	; (800b180 <vTaskNotifyGiveFromISR+0xb4>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	b9f3      	cbnz	r3, 800b174 <vTaskNotifyGiveFromISR+0xa8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b136:	1d27      	adds	r7, r4, #4
 800b138:	4638      	mov	r0, r7
 800b13a:	f7fe fa4c 	bl	80095d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b13e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b140:	2301      	movs	r3, #1
 800b142:	4093      	lsls	r3, r2
 800b144:	490f      	ldr	r1, [pc, #60]	; (800b184 <vTaskNotifyGiveFromISR+0xb8>)
 800b146:	6808      	ldr	r0, [r1, #0]
 800b148:	4303      	orrs	r3, r0
 800b14a:	600b      	str	r3, [r1, #0]
 800b14c:	4639      	mov	r1, r7
 800b14e:	4b0e      	ldr	r3, [pc, #56]	; (800b188 <vTaskNotifyGiveFromISR+0xbc>)
 800b150:	2014      	movs	r0, #20
 800b152:	fb00 3002 	mla	r0, r0, r2, r3
 800b156:	f7fe fa18 	bl	800958a <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b15a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b15c:	4b0b      	ldr	r3, [pc, #44]	; (800b18c <vTaskNotifyGiveFromISR+0xc0>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b162:	429a      	cmp	r2, r3
 800b164:	d9d6      	bls.n	800b114 <vTaskNotifyGiveFromISR+0x48>
					if( pxHigherPriorityTaskWoken != NULL )
 800b166:	b10d      	cbz	r5, 800b16c <vTaskNotifyGiveFromISR+0xa0>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b168:	2301      	movs	r3, #1
 800b16a:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 800b16c:	4b08      	ldr	r3, [pc, #32]	; (800b190 <vTaskNotifyGiveFromISR+0xc4>)
 800b16e:	2201      	movs	r2, #1
 800b170:	601a      	str	r2, [r3, #0]
 800b172:	e7cf      	b.n	800b114 <vTaskNotifyGiveFromISR+0x48>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b174:	f104 0118 	add.w	r1, r4, #24
 800b178:	4806      	ldr	r0, [pc, #24]	; (800b194 <vTaskNotifyGiveFromISR+0xc8>)
 800b17a:	f7fe fa06 	bl	800958a <vListInsertEnd>
 800b17e:	e7ec      	b.n	800b15a <vTaskNotifyGiveFromISR+0x8e>
 800b180:	200009bc 	.word	0x200009bc
 800b184:	200009c4 	.word	0x200009c4
 800b188:	20000920 	.word	0x20000920
 800b18c:	20000914 	.word	0x20000914
 800b190:	20000a3c 	.word	0x20000a3c
 800b194:	200009f8 	.word	0x200009f8

0800b198 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b198:	4b06      	ldr	r3, [pc, #24]	; (800b1b4 <prvGetNextExpireTime+0x1c>)
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	6813      	ldr	r3, [r2, #0]
 800b19e:	b92b      	cbnz	r3, 800b1ac <prvGetNextExpireTime+0x14>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b1a4:	b923      	cbnz	r3, 800b1b0 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1a6:	68d3      	ldr	r3, [r2, #12]
 800b1a8:	6818      	ldr	r0, [r3, #0]
 800b1aa:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	e7f8      	b.n	800b1a2 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b1b0:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800b1b2:	4770      	bx	lr
 800b1b4:	20000a40 	.word	0x20000a40

0800b1b8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b1b8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b1ba:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1bc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b1be:	4291      	cmp	r1, r2
 800b1c0:	d80c      	bhi.n	800b1dc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1c2:	1ad2      	subs	r2, r2, r3
 800b1c4:	6983      	ldr	r3, [r0, #24]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d301      	bcc.n	800b1ce <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b1ca:	2001      	movs	r0, #1
 800b1cc:	e010      	b.n	800b1f0 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b1ce:	1d01      	adds	r1, r0, #4
 800b1d0:	4b09      	ldr	r3, [pc, #36]	; (800b1f8 <prvInsertTimerInActiveList+0x40>)
 800b1d2:	6818      	ldr	r0, [r3, #0]
 800b1d4:	f7fe f9e5 	bl	80095a2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800b1d8:	2000      	movs	r0, #0
 800b1da:	e009      	b.n	800b1f0 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d201      	bcs.n	800b1e4 <prvInsertTimerInActiveList+0x2c>
 800b1e0:	4299      	cmp	r1, r3
 800b1e2:	d206      	bcs.n	800b1f2 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1e4:	1d01      	adds	r1, r0, #4
 800b1e6:	4b05      	ldr	r3, [pc, #20]	; (800b1fc <prvInsertTimerInActiveList+0x44>)
 800b1e8:	6818      	ldr	r0, [r3, #0]
 800b1ea:	f7fe f9da 	bl	80095a2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800b1ee:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800b1f0:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 800b1f2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800b1f4:	e7fc      	b.n	800b1f0 <prvInsertTimerInActiveList+0x38>
 800b1f6:	bf00      	nop
 800b1f8:	20000a44 	.word	0x20000a44
 800b1fc:	20000a40 	.word	0x20000a40

0800b200 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b200:	b530      	push	{r4, r5, lr}
 800b202:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b204:	f000 fabe 	bl	800b784 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b208:	4b11      	ldr	r3, [pc, #68]	; (800b250 <prvCheckForValidListAndQueue+0x50>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	b11b      	cbz	r3, 800b216 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b20e:	f000 fadb 	bl	800b7c8 <vPortExitCritical>
}
 800b212:	b003      	add	sp, #12
 800b214:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800b216:	4d0f      	ldr	r5, [pc, #60]	; (800b254 <prvCheckForValidListAndQueue+0x54>)
 800b218:	4628      	mov	r0, r5
 800b21a:	f7fe f9a8 	bl	800956e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b21e:	4c0e      	ldr	r4, [pc, #56]	; (800b258 <prvCheckForValidListAndQueue+0x58>)
 800b220:	4620      	mov	r0, r4
 800b222:	f7fe f9a4 	bl	800956e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b226:	4b0d      	ldr	r3, [pc, #52]	; (800b25c <prvCheckForValidListAndQueue+0x5c>)
 800b228:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b22a:	4b0d      	ldr	r3, [pc, #52]	; (800b260 <prvCheckForValidListAndQueue+0x60>)
 800b22c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b22e:	2300      	movs	r3, #0
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	4b0c      	ldr	r3, [pc, #48]	; (800b264 <prvCheckForValidListAndQueue+0x64>)
 800b234:	4a0c      	ldr	r2, [pc, #48]	; (800b268 <prvCheckForValidListAndQueue+0x68>)
 800b236:	210c      	movs	r1, #12
 800b238:	200a      	movs	r0, #10
 800b23a:	f7fe fadc 	bl	80097f6 <xQueueGenericCreateStatic>
 800b23e:	4b04      	ldr	r3, [pc, #16]	; (800b250 <prvCheckForValidListAndQueue+0x50>)
 800b240:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800b242:	2800      	cmp	r0, #0
 800b244:	d0e3      	beq.n	800b20e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b246:	4909      	ldr	r1, [pc, #36]	; (800b26c <prvCheckForValidListAndQueue+0x6c>)
 800b248:	f7fe fe0a 	bl	8009e60 <vQueueAddToRegistry>
 800b24c:	e7df      	b.n	800b20e <prvCheckForValidListAndQueue+0xe>
 800b24e:	bf00      	nop
 800b250:	20000b3c 	.word	0x20000b3c
 800b254:	20000ac0 	.word	0x20000ac0
 800b258:	20000ad4 	.word	0x20000ad4
 800b25c:	20000a40 	.word	0x20000a40
 800b260:	20000a44 	.word	0x20000a44
 800b264:	20000aec 	.word	0x20000aec
 800b268:	20000a48 	.word	0x20000a48
 800b26c:	0800dff8 	.word	0x0800dff8

0800b270 <prvInitialiseNewTimer>:
{
 800b270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b274:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b276:	b941      	cbnz	r1, 800b28a <prvInitialiseNewTimer+0x1a>
 800b278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27c:	f383 8811 	msr	BASEPRI, r3
 800b280:	f3bf 8f6f 	isb	sy
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	e7fe      	b.n	800b288 <prvInitialiseNewTimer+0x18>
 800b28a:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
 800b28c:	b1a4      	cbz	r4, 800b2b8 <prvInitialiseNewTimer+0x48>
 800b28e:	461e      	mov	r6, r3
 800b290:	4615      	mov	r5, r2
 800b292:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
 800b294:	f7ff ffb4 	bl	800b200 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 800b298:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b29c:	61a7      	str	r7, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b29e:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b2a0:	9b06      	ldr	r3, [sp, #24]
 800b2a2:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b2a4:	1d20      	adds	r0, r4, #4
 800b2a6:	f7fe f96d 	bl	8009584 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b2aa:	b12d      	cbz	r5, 800b2b8 <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b2ac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b2b0:	f043 0304 	orr.w	r3, r3, #4
 800b2b4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 800b2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b2bc <xTimerCreateTimerTask>:
{
 800b2bc:	b510      	push	{r4, lr}
 800b2be:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800b2c0:	f7ff ff9e 	bl	800b200 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800b2c4:	4b12      	ldr	r3, [pc, #72]	; (800b310 <xTimerCreateTimerTask+0x54>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	b1cb      	cbz	r3, 800b2fe <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b2ca:	2400      	movs	r4, #0
 800b2cc:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b2ce:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b2d0:	aa07      	add	r2, sp, #28
 800b2d2:	a906      	add	r1, sp, #24
 800b2d4:	a805      	add	r0, sp, #20
 800b2d6:	f7f9 f861 	bl	800439c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b2da:	9b05      	ldr	r3, [sp, #20]
 800b2dc:	9302      	str	r3, [sp, #8]
 800b2de:	9b06      	ldr	r3, [sp, #24]
 800b2e0:	9301      	str	r3, [sp, #4]
 800b2e2:	2302      	movs	r3, #2
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	4623      	mov	r3, r4
 800b2e8:	9a07      	ldr	r2, [sp, #28]
 800b2ea:	490a      	ldr	r1, [pc, #40]	; (800b314 <xTimerCreateTimerTask+0x58>)
 800b2ec:	480a      	ldr	r0, [pc, #40]	; (800b318 <xTimerCreateTimerTask+0x5c>)
 800b2ee:	f7fe ffa2 	bl	800a236 <xTaskCreateStatic>
 800b2f2:	4b0a      	ldr	r3, [pc, #40]	; (800b31c <xTimerCreateTimerTask+0x60>)
 800b2f4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800b2f6:	b110      	cbz	r0, 800b2fe <xTimerCreateTimerTask+0x42>
}
 800b2f8:	2001      	movs	r0, #1
 800b2fa:	b008      	add	sp, #32
 800b2fc:	bd10      	pop	{r4, pc}
 800b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	e7fe      	b.n	800b30e <xTimerCreateTimerTask+0x52>
 800b310:	20000b3c 	.word	0x20000b3c
 800b314:	0800e000 	.word	0x0800e000
 800b318:	0800b699 	.word	0x0800b699
 800b31c:	20000b40 	.word	0x20000b40

0800b320 <xTimerCreate>:
	{
 800b320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b324:	b082      	sub	sp, #8
 800b326:	4605      	mov	r5, r0
 800b328:	460e      	mov	r6, r1
 800b32a:	4617      	mov	r7, r2
 800b32c:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b32e:	202c      	movs	r0, #44	; 0x2c
 800b330:	f000 fbde 	bl	800baf0 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800b334:	4604      	mov	r4, r0
 800b336:	b158      	cbz	r0, 800b350 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 800b338:	2300      	movs	r3, #0
 800b33a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b33e:	9001      	str	r0, [sp, #4]
 800b340:	9b08      	ldr	r3, [sp, #32]
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	4643      	mov	r3, r8
 800b346:	463a      	mov	r2, r7
 800b348:	4631      	mov	r1, r6
 800b34a:	4628      	mov	r0, r5
 800b34c:	f7ff ff90 	bl	800b270 <prvInitialiseNewTimer>
	}
 800b350:	4620      	mov	r0, r4
 800b352:	b002      	add	sp, #8
 800b354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b358 <xTimerCreateStatic>:
	{
 800b358:	b530      	push	{r4, r5, lr}
 800b35a:	b085      	sub	sp, #20
 800b35c:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b35e:	252c      	movs	r5, #44	; 0x2c
 800b360:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b362:	9d03      	ldr	r5, [sp, #12]
 800b364:	2d2c      	cmp	r5, #44	; 0x2c
 800b366:	d008      	beq.n	800b37a <xTimerCreateStatic+0x22>
 800b368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36c:	f383 8811 	msr	BASEPRI, r3
 800b370:	f3bf 8f6f 	isb	sy
 800b374:	f3bf 8f4f 	dsb	sy
 800b378:	e7fe      	b.n	800b378 <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b37a:	9d03      	ldr	r5, [sp, #12]
		configASSERT( pxTimerBuffer );
 800b37c:	b944      	cbnz	r4, 800b390 <xTimerCreateStatic+0x38>
 800b37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	e7fe      	b.n	800b38e <xTimerCreateStatic+0x36>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b390:	2502      	movs	r5, #2
 800b392:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b396:	9401      	str	r4, [sp, #4]
 800b398:	9d08      	ldr	r5, [sp, #32]
 800b39a:	9500      	str	r5, [sp, #0]
 800b39c:	f7ff ff68 	bl	800b270 <prvInitialiseNewTimer>
	}
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	b005      	add	sp, #20
 800b3a4:	bd30      	pop	{r4, r5, pc}
	...

0800b3a8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800b3a8:	b1c8      	cbz	r0, 800b3de <xTimerGenericCommand+0x36>
{
 800b3aa:	b530      	push	{r4, r5, lr}
 800b3ac:	b085      	sub	sp, #20
 800b3ae:	4615      	mov	r5, r2
 800b3b0:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 800b3b2:	4a17      	ldr	r2, [pc, #92]	; (800b410 <xTimerGenericCommand+0x68>)
 800b3b4:	6810      	ldr	r0, [r2, #0]
 800b3b6:	b340      	cbz	r0, 800b40a <xTimerGenericCommand+0x62>
 800b3b8:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800b3ba:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b3bc:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b3be:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b3c0:	2905      	cmp	r1, #5
 800b3c2:	dc1d      	bgt.n	800b400 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b3c4:	f7ff fbe0 	bl	800ab88 <xTaskGetSchedulerState>
 800b3c8:	2802      	cmp	r0, #2
 800b3ca:	d011      	beq.n	800b3f0 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	a901      	add	r1, sp, #4
 800b3d2:	480f      	ldr	r0, [pc, #60]	; (800b410 <xTimerGenericCommand+0x68>)
 800b3d4:	6800      	ldr	r0, [r0, #0]
 800b3d6:	f7fe fa7f 	bl	80098d8 <xQueueGenericSend>
}
 800b3da:	b005      	add	sp, #20
 800b3dc:	bd30      	pop	{r4, r5, pc}
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	e7fe      	b.n	800b3ee <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	9a08      	ldr	r2, [sp, #32]
 800b3f4:	a901      	add	r1, sp, #4
 800b3f6:	4806      	ldr	r0, [pc, #24]	; (800b410 <xTimerGenericCommand+0x68>)
 800b3f8:	6800      	ldr	r0, [r0, #0]
 800b3fa:	f7fe fa6d 	bl	80098d8 <xQueueGenericSend>
 800b3fe:	e7ec      	b.n	800b3da <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b400:	2300      	movs	r3, #0
 800b402:	a901      	add	r1, sp, #4
 800b404:	f7fe fb4c 	bl	8009aa0 <xQueueGenericSendFromISR>
 800b408:	e7e7      	b.n	800b3da <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 800b40a:	2000      	movs	r0, #0
	return xReturn;
 800b40c:	e7e5      	b.n	800b3da <xTimerGenericCommand+0x32>
 800b40e:	bf00      	nop
 800b410:	20000b3c 	.word	0x20000b3c

0800b414 <prvSwitchTimerLists>:
{
 800b414:	b570      	push	{r4, r5, r6, lr}
 800b416:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b418:	4b1b      	ldr	r3, [pc, #108]	; (800b488 <prvSwitchTimerLists+0x74>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	b362      	cbz	r2, 800b47a <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b424:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b426:	1d25      	adds	r5, r4, #4
 800b428:	4628      	mov	r0, r5
 800b42a:	f7fe f8d4 	bl	80095d6 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b42e:	6a23      	ldr	r3, [r4, #32]
 800b430:	4620      	mov	r0, r4
 800b432:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b434:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b438:	f013 0f04 	tst.w	r3, #4
 800b43c:	d0ec      	beq.n	800b418 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b43e:	69a3      	ldr	r3, [r4, #24]
 800b440:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800b442:	429e      	cmp	r6, r3
 800b444:	d207      	bcs.n	800b456 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b446:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b448:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b44a:	4629      	mov	r1, r5
 800b44c:	4b0e      	ldr	r3, [pc, #56]	; (800b488 <prvSwitchTimerLists+0x74>)
 800b44e:	6818      	ldr	r0, [r3, #0]
 800b450:	f7fe f8a7 	bl	80095a2 <vListInsert>
 800b454:	e7e0      	b.n	800b418 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b456:	2100      	movs	r1, #0
 800b458:	9100      	str	r1, [sp, #0]
 800b45a:	460b      	mov	r3, r1
 800b45c:	4632      	mov	r2, r6
 800b45e:	4620      	mov	r0, r4
 800b460:	f7ff ffa2 	bl	800b3a8 <xTimerGenericCommand>
				configASSERT( xResult );
 800b464:	2800      	cmp	r0, #0
 800b466:	d1d7      	bne.n	800b418 <prvSwitchTimerLists+0x4>
 800b468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	e7fe      	b.n	800b478 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800b47a:	4a04      	ldr	r2, [pc, #16]	; (800b48c <prvSwitchTimerLists+0x78>)
 800b47c:	6810      	ldr	r0, [r2, #0]
 800b47e:	4902      	ldr	r1, [pc, #8]	; (800b488 <prvSwitchTimerLists+0x74>)
 800b480:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800b482:	6013      	str	r3, [r2, #0]
}
 800b484:	b002      	add	sp, #8
 800b486:	bd70      	pop	{r4, r5, r6, pc}
 800b488:	20000a40 	.word	0x20000a40
 800b48c:	20000a44 	.word	0x20000a44

0800b490 <prvSampleTimeNow>:
{
 800b490:	b538      	push	{r3, r4, r5, lr}
 800b492:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800b494:	f7fe ffda 	bl	800a44c <xTaskGetTickCount>
 800b498:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800b49a:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <prvSampleTimeNow+0x28>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4283      	cmp	r3, r0
 800b4a0:	d805      	bhi.n	800b4ae <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800b4a6:	4b04      	ldr	r3, [pc, #16]	; (800b4b8 <prvSampleTimeNow+0x28>)
 800b4a8:	601c      	str	r4, [r3, #0]
}
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800b4ae:	f7ff ffb1 	bl	800b414 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	602b      	str	r3, [r5, #0]
 800b4b6:	e7f6      	b.n	800b4a6 <prvSampleTimeNow+0x16>
 800b4b8:	20000ae8 	.word	0x20000ae8

0800b4bc <prvProcessExpiredTimer>:
{
 800b4bc:	b570      	push	{r4, r5, r6, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	4605      	mov	r5, r0
 800b4c2:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4c4:	4b17      	ldr	r3, [pc, #92]	; (800b524 <prvProcessExpiredTimer+0x68>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4cc:	1d20      	adds	r0, r4, #4
 800b4ce:	f7fe f882 	bl	80095d6 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4d2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b4d6:	f013 0f04 	tst.w	r3, #4
 800b4da:	d108      	bne.n	800b4ee <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4dc:	f023 0301 	bic.w	r3, r3, #1
 800b4e0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4e4:	6a23      	ldr	r3, [r4, #32]
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	4798      	blx	r3
}
 800b4ea:	b002      	add	sp, #8
 800b4ec:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b4ee:	69a1      	ldr	r1, [r4, #24]
 800b4f0:	462b      	mov	r3, r5
 800b4f2:	4632      	mov	r2, r6
 800b4f4:	4429      	add	r1, r5
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f7ff fe5e 	bl	800b1b8 <prvInsertTimerInActiveList>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d0f1      	beq.n	800b4e4 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b500:	2100      	movs	r1, #0
 800b502:	9100      	str	r1, [sp, #0]
 800b504:	460b      	mov	r3, r1
 800b506:	462a      	mov	r2, r5
 800b508:	4620      	mov	r0, r4
 800b50a:	f7ff ff4d 	bl	800b3a8 <xTimerGenericCommand>
			configASSERT( xResult );
 800b50e:	2800      	cmp	r0, #0
 800b510:	d1e8      	bne.n	800b4e4 <prvProcessExpiredTimer+0x28>
 800b512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b516:	f383 8811 	msr	BASEPRI, r3
 800b51a:	f3bf 8f6f 	isb	sy
 800b51e:	f3bf 8f4f 	dsb	sy
 800b522:	e7fe      	b.n	800b522 <prvProcessExpiredTimer+0x66>
 800b524:	20000a40 	.word	0x20000a40

0800b528 <prvProcessTimerOrBlockTask>:
{
 800b528:	b570      	push	{r4, r5, r6, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	4606      	mov	r6, r0
 800b52e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800b530:	f7fe ff84 	bl	800a43c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b534:	a801      	add	r0, sp, #4
 800b536:	f7ff ffab 	bl	800b490 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800b53a:	9b01      	ldr	r3, [sp, #4]
 800b53c:	bb23      	cbnz	r3, 800b588 <prvProcessTimerOrBlockTask+0x60>
 800b53e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b540:	b90c      	cbnz	r4, 800b546 <prvProcessTimerOrBlockTask+0x1e>
 800b542:	42b0      	cmp	r0, r6
 800b544:	d217      	bcs.n	800b576 <prvProcessTimerOrBlockTask+0x4e>
				if( xListWasEmpty != pdFALSE )
 800b546:	b124      	cbz	r4, 800b552 <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b548:	4b11      	ldr	r3, [pc, #68]	; (800b590 <prvProcessTimerOrBlockTask+0x68>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	b9cb      	cbnz	r3, 800b584 <prvProcessTimerOrBlockTask+0x5c>
 800b550:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b552:	4622      	mov	r2, r4
 800b554:	1b71      	subs	r1, r6, r5
 800b556:	4b0f      	ldr	r3, [pc, #60]	; (800b594 <prvProcessTimerOrBlockTask+0x6c>)
 800b558:	6818      	ldr	r0, [r3, #0]
 800b55a:	f7fe fc95 	bl	8009e88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b55e:	f7ff f807 	bl	800a570 <xTaskResumeAll>
 800b562:	b998      	cbnz	r0, 800b58c <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 800b564:	4b0c      	ldr	r3, [pc, #48]	; (800b598 <prvProcessTimerOrBlockTask+0x70>)
 800b566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b56a:	601a      	str	r2, [r3, #0]
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	f3bf 8f6f 	isb	sy
 800b574:	e00a      	b.n	800b58c <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
 800b576:	f7fe fffb 	bl	800a570 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b57a:	4629      	mov	r1, r5
 800b57c:	4630      	mov	r0, r6
 800b57e:	f7ff ff9d 	bl	800b4bc <prvProcessExpiredTimer>
 800b582:	e003      	b.n	800b58c <prvProcessTimerOrBlockTask+0x64>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b584:	2400      	movs	r4, #0
 800b586:	e7e4      	b.n	800b552 <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 800b588:	f7fe fff2 	bl	800a570 <xTaskResumeAll>
}
 800b58c:	b002      	add	sp, #8
 800b58e:	bd70      	pop	{r4, r5, r6, pc}
 800b590:	20000a44 	.word	0x20000a44
 800b594:	20000b3c 	.word	0x20000b3c
 800b598:	e000ed04 	.word	0xe000ed04

0800b59c <prvProcessReceivedCommands>:
{
 800b59c:	b530      	push	{r4, r5, lr}
 800b59e:	b087      	sub	sp, #28
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	a903      	add	r1, sp, #12
 800b5a4:	4b3b      	ldr	r3, [pc, #236]	; (800b694 <prvProcessReceivedCommands+0xf8>)
 800b5a6:	6818      	ldr	r0, [r3, #0]
 800b5a8:	f7fe fae0 	bl	8009b6c <xQueueReceive>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d06f      	beq.n	800b690 <prvProcessReceivedCommands+0xf4>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b5b0:	9b03      	ldr	r3, [sp, #12]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	dbf4      	blt.n	800b5a0 <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b5b6:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b5b8:	6963      	ldr	r3, [r4, #20]
 800b5ba:	b113      	cbz	r3, 800b5c2 <prvProcessReceivedCommands+0x26>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5bc:	1d20      	adds	r0, r4, #4
 800b5be:	f7fe f80a 	bl	80095d6 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5c2:	a802      	add	r0, sp, #8
 800b5c4:	f7ff ff64 	bl	800b490 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800b5c8:	9b03      	ldr	r3, [sp, #12]
 800b5ca:	2b09      	cmp	r3, #9
 800b5cc:	d8e8      	bhi.n	800b5a0 <prvProcessReceivedCommands+0x4>
 800b5ce:	e8df f003 	tbb	[pc, r3]
 800b5d2:	0505      	.short	0x0505
 800b5d4:	51383105 	.word	0x51383105
 800b5d8:	38310505 	.word	0x38310505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b5dc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b5e0:	f043 0301 	orr.w	r3, r3, #1
 800b5e4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b5e8:	9904      	ldr	r1, [sp, #16]
 800b5ea:	69a5      	ldr	r5, [r4, #24]
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	4429      	add	r1, r5
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f7ff fde0 	bl	800b1b8 <prvInsertTimerInActiveList>
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d0d1      	beq.n	800b5a0 <prvProcessReceivedCommands+0x4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5fc:	6a23      	ldr	r3, [r4, #32]
 800b5fe:	4620      	mov	r0, r4
 800b600:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b602:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b606:	f013 0f04 	tst.w	r3, #4
 800b60a:	d0c9      	beq.n	800b5a0 <prvProcessReceivedCommands+0x4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b60c:	69a2      	ldr	r2, [r4, #24]
 800b60e:	2100      	movs	r1, #0
 800b610:	9100      	str	r1, [sp, #0]
 800b612:	460b      	mov	r3, r1
 800b614:	9804      	ldr	r0, [sp, #16]
 800b616:	4402      	add	r2, r0
 800b618:	4620      	mov	r0, r4
 800b61a:	f7ff fec5 	bl	800b3a8 <xTimerGenericCommand>
							configASSERT( xResult );
 800b61e:	2800      	cmp	r0, #0
 800b620:	d1be      	bne.n	800b5a0 <prvProcessReceivedCommands+0x4>
 800b622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b626:	f383 8811 	msr	BASEPRI, r3
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	e7fe      	b.n	800b632 <prvProcessReceivedCommands+0x96>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b634:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b638:	f023 0301 	bic.w	r3, r3, #1
 800b63c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800b640:	e7ae      	b.n	800b5a0 <prvProcessReceivedCommands+0x4>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b642:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b646:	f043 0301 	orr.w	r3, r3, #1
 800b64a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b64e:	9904      	ldr	r1, [sp, #16]
 800b650:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b652:	b131      	cbz	r1, 800b662 <prvProcessReceivedCommands+0xc6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b654:	4603      	mov	r3, r0
 800b656:	4602      	mov	r2, r0
 800b658:	4401      	add	r1, r0
 800b65a:	4620      	mov	r0, r4
 800b65c:	f7ff fdac 	bl	800b1b8 <prvInsertTimerInActiveList>
					break;
 800b660:	e79e      	b.n	800b5a0 <prvProcessReceivedCommands+0x4>
 800b662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b666:	f383 8811 	msr	BASEPRI, r3
 800b66a:	f3bf 8f6f 	isb	sy
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	e7fe      	b.n	800b672 <prvProcessReceivedCommands+0xd6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b674:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b678:	f013 0f02 	tst.w	r3, #2
 800b67c:	d004      	beq.n	800b688 <prvProcessReceivedCommands+0xec>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b67e:	f023 0301 	bic.w	r3, r3, #1
 800b682:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800b686:	e78b      	b.n	800b5a0 <prvProcessReceivedCommands+0x4>
							vPortFree( pxTimer );
 800b688:	4620      	mov	r0, r4
 800b68a:	f000 fab5 	bl	800bbf8 <vPortFree>
 800b68e:	e787      	b.n	800b5a0 <prvProcessReceivedCommands+0x4>
}
 800b690:	b007      	add	sp, #28
 800b692:	bd30      	pop	{r4, r5, pc}
 800b694:	20000b3c 	.word	0x20000b3c

0800b698 <prvTimerTask>:
{
 800b698:	b500      	push	{lr}
 800b69a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b69c:	a801      	add	r0, sp, #4
 800b69e:	f7ff fd7b 	bl	800b198 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6a2:	9901      	ldr	r1, [sp, #4]
 800b6a4:	f7ff ff40 	bl	800b528 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800b6a8:	f7ff ff78 	bl	800b59c <prvProcessReceivedCommands>
 800b6ac:	e7f6      	b.n	800b69c <prvTimerTask+0x4>
	...

0800b6b0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b6b0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b6b6:	4b0d      	ldr	r3, [pc, #52]	; (800b6ec <prvTaskExitError+0x3c>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6be:	d008      	beq.n	800b6d2 <prvTaskExitError+0x22>
 800b6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c4:	f383 8811 	msr	BASEPRI, r3
 800b6c8:	f3bf 8f6f 	isb	sy
 800b6cc:	f3bf 8f4f 	dsb	sy
 800b6d0:	e7fe      	b.n	800b6d0 <prvTaskExitError+0x20>
 800b6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d6:	f383 8811 	msr	BASEPRI, r3
 800b6da:	f3bf 8f6f 	isb	sy
 800b6de:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b6e2:	9b01      	ldr	r3, [sp, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d0fc      	beq.n	800b6e2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b6e8:	b002      	add	sp, #8
 800b6ea:	4770      	bx	lr
 800b6ec:	2000005c 	.word	0x2000005c

0800b6f0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b6f0:	4808      	ldr	r0, [pc, #32]	; (800b714 <prvPortStartFirstTask+0x24>)
 800b6f2:	6800      	ldr	r0, [r0, #0]
 800b6f4:	6800      	ldr	r0, [r0, #0]
 800b6f6:	f380 8808 	msr	MSP, r0
 800b6fa:	f04f 0000 	mov.w	r0, #0
 800b6fe:	f380 8814 	msr	CONTROL, r0
 800b702:	b662      	cpsie	i
 800b704:	b661      	cpsie	f
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	df00      	svc	0
 800b710:	bf00      	nop
 800b712:	0000      	.short	0x0000
 800b714:	e000ed08 	.word	0xe000ed08

0800b718 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b718:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b728 <vPortEnableVFP+0x10>
 800b71c:	6801      	ldr	r1, [r0, #0]
 800b71e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b722:	6001      	str	r1, [r0, #0]
 800b724:	4770      	bx	lr
 800b726:	0000      	.short	0x0000
 800b728:	e000ed88 	.word	0xe000ed88

0800b72c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b72c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b730:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b734:	f021 0101 	bic.w	r1, r1, #1
 800b738:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b73c:	4b05      	ldr	r3, [pc, #20]	; (800b754 <pxPortInitialiseStack+0x28>)
 800b73e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b742:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b746:	f06f 0302 	mvn.w	r3, #2
 800b74a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800b74e:	3844      	subs	r0, #68	; 0x44
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	0800b6b1 	.word	0x0800b6b1
	...

0800b760 <SVC_Handler>:
	__asm volatile (
 800b760:	4b07      	ldr	r3, [pc, #28]	; (800b780 <pxCurrentTCBConst2>)
 800b762:	6819      	ldr	r1, [r3, #0]
 800b764:	6808      	ldr	r0, [r1, #0]
 800b766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76a:	f380 8809 	msr	PSP, r0
 800b76e:	f3bf 8f6f 	isb	sy
 800b772:	f04f 0000 	mov.w	r0, #0
 800b776:	f380 8811 	msr	BASEPRI, r0
 800b77a:	4770      	bx	lr
 800b77c:	f3af 8000 	nop.w

0800b780 <pxCurrentTCBConst2>:
 800b780:	20000914 	.word	0x20000914

0800b784 <vPortEnterCritical>:
 800b784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b788:	f383 8811 	msr	BASEPRI, r3
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b794:	4a0a      	ldr	r2, [pc, #40]	; (800b7c0 <vPortEnterCritical+0x3c>)
 800b796:	6813      	ldr	r3, [r2, #0]
 800b798:	3301      	adds	r3, #1
 800b79a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d000      	beq.n	800b7a2 <vPortEnterCritical+0x1e>
}
 800b7a0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b7a2:	4b08      	ldr	r3, [pc, #32]	; (800b7c4 <vPortEnterCritical+0x40>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b7aa:	d0f9      	beq.n	800b7a0 <vPortEnterCritical+0x1c>
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	e7fe      	b.n	800b7bc <vPortEnterCritical+0x38>
 800b7be:	bf00      	nop
 800b7c0:	2000005c 	.word	0x2000005c
 800b7c4:	e000ed04 	.word	0xe000ed04

0800b7c8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b7c8:	4b09      	ldr	r3, [pc, #36]	; (800b7f0 <vPortExitCritical+0x28>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	b943      	cbnz	r3, 800b7e0 <vPortExitCritical+0x18>
 800b7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	e7fe      	b.n	800b7de <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	4a03      	ldr	r2, [pc, #12]	; (800b7f0 <vPortExitCritical+0x28>)
 800b7e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b7e6:	b90b      	cbnz	r3, 800b7ec <vPortExitCritical+0x24>
	__asm volatile
 800b7e8:	f383 8811 	msr	BASEPRI, r3
}
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	2000005c 	.word	0x2000005c
	...

0800b800 <PendSV_Handler>:
	__asm volatile
 800b800:	f3ef 8009 	mrs	r0, PSP
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	4b15      	ldr	r3, [pc, #84]	; (800b860 <pxCurrentTCBConst>)
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	f01e 0f10 	tst.w	lr, #16
 800b810:	bf08      	it	eq
 800b812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81a:	6010      	str	r0, [r2, #0]
 800b81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b820:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b824:	f380 8811 	msr	BASEPRI, r0
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	f7fe ff3e 	bl	800a6b0 <vTaskSwitchContext>
 800b834:	f04f 0000 	mov.w	r0, #0
 800b838:	f380 8811 	msr	BASEPRI, r0
 800b83c:	bc09      	pop	{r0, r3}
 800b83e:	6819      	ldr	r1, [r3, #0]
 800b840:	6808      	ldr	r0, [r1, #0]
 800b842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b846:	f01e 0f10 	tst.w	lr, #16
 800b84a:	bf08      	it	eq
 800b84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b850:	f380 8809 	msr	PSP, r0
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	f3af 8000 	nop.w

0800b860 <pxCurrentTCBConst>:
 800b860:	20000914 	.word	0x20000914

0800b864 <SysTick_Handler>:
{
 800b864:	b508      	push	{r3, lr}
	__asm volatile
 800b866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86a:	f383 8811 	msr	BASEPRI, r3
 800b86e:	f3bf 8f6f 	isb	sy
 800b872:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b876:	f7fe fdef 	bl	800a458 <xTaskIncrementTick>
 800b87a:	b118      	cbz	r0, 800b884 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b87c:	4b03      	ldr	r3, [pc, #12]	; (800b88c <SysTick_Handler+0x28>)
 800b87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b882:	601a      	str	r2, [r3, #0]
	__asm volatile
 800b884:	2300      	movs	r3, #0
 800b886:	f383 8811 	msr	BASEPRI, r3
}
 800b88a:	bd08      	pop	{r3, pc}
 800b88c:	e000ed04 	.word	0xe000ed04

0800b890 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b890:	4a08      	ldr	r2, [pc, #32]	; (800b8b4 <vPortSetupTimerInterrupt+0x24>)
 800b892:	2300      	movs	r3, #0
 800b894:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b896:	4908      	ldr	r1, [pc, #32]	; (800b8b8 <vPortSetupTimerInterrupt+0x28>)
 800b898:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b89a:	4b08      	ldr	r3, [pc, #32]	; (800b8bc <vPortSetupTimerInterrupt+0x2c>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4908      	ldr	r1, [pc, #32]	; (800b8c0 <vPortSetupTimerInterrupt+0x30>)
 800b8a0:	fba1 1303 	umull	r1, r3, r1, r3
 800b8a4:	099b      	lsrs	r3, r3, #6
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	4906      	ldr	r1, [pc, #24]	; (800b8c4 <vPortSetupTimerInterrupt+0x34>)
 800b8aa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b8ac:	2307      	movs	r3, #7
 800b8ae:	6013      	str	r3, [r2, #0]
}
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop
 800b8b4:	e000e010 	.word	0xe000e010
 800b8b8:	e000e018 	.word	0xe000e018
 800b8bc:	20000050 	.word	0x20000050
 800b8c0:	10624dd3 	.word	0x10624dd3
 800b8c4:	e000e014 	.word	0xe000e014

0800b8c8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b8c8:	4b3a      	ldr	r3, [pc, #232]	; (800b9b4 <xPortStartScheduler+0xec>)
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	4b3a      	ldr	r3, [pc, #232]	; (800b9b8 <xPortStartScheduler+0xf0>)
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d00d      	beq.n	800b8ee <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b8d2:	4b38      	ldr	r3, [pc, #224]	; (800b9b4 <xPortStartScheduler+0xec>)
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	4b39      	ldr	r3, [pc, #228]	; (800b9bc <xPortStartScheduler+0xf4>)
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d111      	bne.n	800b900 <xPortStartScheduler+0x38>
	__asm volatile
 800b8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	e7fe      	b.n	800b8ec <xPortStartScheduler+0x24>
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	e7fe      	b.n	800b8fe <xPortStartScheduler+0x36>
{
 800b900:	b510      	push	{r4, lr}
 800b902:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b904:	4b2e      	ldr	r3, [pc, #184]	; (800b9c0 <xPortStartScheduler+0xf8>)
 800b906:	781a      	ldrb	r2, [r3, #0]
 800b908:	b2d2      	uxtb	r2, r2
 800b90a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b90c:	22ff      	movs	r2, #255	; 0xff
 800b90e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	b2db      	uxtb	r3, r3
 800b914:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b918:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b91c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b920:	4a28      	ldr	r2, [pc, #160]	; (800b9c4 <xPortStartScheduler+0xfc>)
 800b922:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b924:	4b28      	ldr	r3, [pc, #160]	; (800b9c8 <xPortStartScheduler+0x100>)
 800b926:	2207      	movs	r2, #7
 800b928:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b92a:	e009      	b.n	800b940 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800b92c:	4a26      	ldr	r2, [pc, #152]	; (800b9c8 <xPortStartScheduler+0x100>)
 800b92e:	6813      	ldr	r3, [r2, #0]
 800b930:	3b01      	subs	r3, #1
 800b932:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b934:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b938:	005b      	lsls	r3, r3, #1
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b940:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b944:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b948:	d1f0      	bne.n	800b92c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b94a:	4b1f      	ldr	r3, [pc, #124]	; (800b9c8 <xPortStartScheduler+0x100>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2b03      	cmp	r3, #3
 800b950:	d008      	beq.n	800b964 <xPortStartScheduler+0x9c>
 800b952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b956:	f383 8811 	msr	BASEPRI, r3
 800b95a:	f3bf 8f6f 	isb	sy
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	e7fe      	b.n	800b962 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b964:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b96a:	4a17      	ldr	r2, [pc, #92]	; (800b9c8 <xPortStartScheduler+0x100>)
 800b96c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b96e:	9b01      	ldr	r3, [sp, #4]
 800b970:	b2db      	uxtb	r3, r3
 800b972:	4a13      	ldr	r2, [pc, #76]	; (800b9c0 <xPortStartScheduler+0xf8>)
 800b974:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b976:	4b15      	ldr	r3, [pc, #84]	; (800b9cc <xPortStartScheduler+0x104>)
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800b97e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800b986:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800b988:	f7ff ff82 	bl	800b890 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b98c:	2400      	movs	r4, #0
 800b98e:	4b10      	ldr	r3, [pc, #64]	; (800b9d0 <xPortStartScheduler+0x108>)
 800b990:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800b992:	f7ff fec1 	bl	800b718 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b996:	4a0f      	ldr	r2, [pc, #60]	; (800b9d4 <xPortStartScheduler+0x10c>)
 800b998:	6813      	ldr	r3, [r2, #0]
 800b99a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b99e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800b9a0:	f7ff fea6 	bl	800b6f0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b9a4:	f7fe fe84 	bl	800a6b0 <vTaskSwitchContext>
	prvTaskExitError();
 800b9a8:	f7ff fe82 	bl	800b6b0 <prvTaskExitError>
}
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	b002      	add	sp, #8
 800b9b0:	bd10      	pop	{r4, pc}
 800b9b2:	bf00      	nop
 800b9b4:	e000ed00 	.word	0xe000ed00
 800b9b8:	410fc271 	.word	0x410fc271
 800b9bc:	410fc270 	.word	0x410fc270
 800b9c0:	e000e400 	.word	0xe000e400
 800b9c4:	20000b44 	.word	0x20000b44
 800b9c8:	20000b48 	.word	0x20000b48
 800b9cc:	e000ed20 	.word	0xe000ed20
 800b9d0:	2000005c 	.word	0x2000005c
 800b9d4:	e000ef34 	.word	0xe000ef34

0800b9d8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b9d8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b9dc:	2b0f      	cmp	r3, #15
 800b9de:	d90f      	bls.n	800ba00 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b9e0:	4a10      	ldr	r2, [pc, #64]	; (800ba24 <vPortValidateInterruptPriority+0x4c>)
 800b9e2:	5c9b      	ldrb	r3, [r3, r2]
 800b9e4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b9e6:	4a10      	ldr	r2, [pc, #64]	; (800ba28 <vPortValidateInterruptPriority+0x50>)
 800b9e8:	7812      	ldrb	r2, [r2, #0]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d908      	bls.n	800ba00 <vPortValidateInterruptPriority+0x28>
 800b9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	e7fe      	b.n	800b9fe <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba00:	4b0a      	ldr	r3, [pc, #40]	; (800ba2c <vPortValidateInterruptPriority+0x54>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba08:	4a09      	ldr	r2, [pc, #36]	; (800ba30 <vPortValidateInterruptPriority+0x58>)
 800ba0a:	6812      	ldr	r2, [r2, #0]
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d908      	bls.n	800ba22 <vPortValidateInterruptPriority+0x4a>
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	e7fe      	b.n	800ba20 <vPortValidateInterruptPriority+0x48>
	}
 800ba22:	4770      	bx	lr
 800ba24:	e000e3f0 	.word	0xe000e3f0
 800ba28:	20000b44 	.word	0x20000b44
 800ba2c:	e000ed0c 	.word	0xe000ed0c
 800ba30:	20000b48 	.word	0x20000b48

0800ba34 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba34:	4a12      	ldr	r2, [pc, #72]	; (800ba80 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba36:	f012 0f07 	tst.w	r2, #7
 800ba3a:	d01e      	beq.n	800ba7a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba3c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba3e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba42:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 800ba46:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba48:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba4a:	480e      	ldr	r0, [pc, #56]	; (800ba84 <prvHeapInit+0x50>)
 800ba4c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba4e:	2100      	movs	r1, #0
 800ba50:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba52:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800ba54:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba56:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800ba5a:	480b      	ldr	r0, [pc, #44]	; (800ba88 <prvHeapInit+0x54>)
 800ba5c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800ba5e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba60:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba62:	1a99      	subs	r1, r3, r2
 800ba64:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba66:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba68:	4b08      	ldr	r3, [pc, #32]	; (800ba8c <prvHeapInit+0x58>)
 800ba6a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba6c:	4b08      	ldr	r3, [pc, #32]	; (800ba90 <prvHeapInit+0x5c>)
 800ba6e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba70:	4b08      	ldr	r3, [pc, #32]	; (800ba94 <prvHeapInit+0x60>)
 800ba72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba76:	601a      	str	r2, [r3, #0]
}
 800ba78:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba7e:	e7e4      	b.n	800ba4a <prvHeapInit+0x16>
 800ba80:	20000b50 	.word	0x20000b50
 800ba84:	20002b5c 	.word	0x20002b5c
 800ba88:	20000b4c 	.word	0x20000b4c
 800ba8c:	20002b58 	.word	0x20002b58
 800ba90:	20002b54 	.word	0x20002b54
 800ba94:	20002b50 	.word	0x20002b50

0800ba98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba98:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba9a:	4b13      	ldr	r3, [pc, #76]	; (800bae8 <prvInsertBlockIntoFreeList+0x50>)
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	4282      	cmp	r2, r0
 800baa0:	d31b      	bcc.n	800bada <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800baa2:	6859      	ldr	r1, [r3, #4]
 800baa4:	185c      	adds	r4, r3, r1
 800baa6:	4284      	cmp	r4, r0
 800baa8:	d103      	bne.n	800bab2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800baaa:	6840      	ldr	r0, [r0, #4]
 800baac:	4401      	add	r1, r0
 800baae:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bab0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bab2:	6841      	ldr	r1, [r0, #4]
 800bab4:	1844      	adds	r4, r0, r1
 800bab6:	42a2      	cmp	r2, r4
 800bab8:	d113      	bne.n	800bae2 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800baba:	4c0c      	ldr	r4, [pc, #48]	; (800baec <prvInsertBlockIntoFreeList+0x54>)
 800babc:	6824      	ldr	r4, [r4, #0]
 800babe:	42a2      	cmp	r2, r4
 800bac0:	d00d      	beq.n	800bade <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bac2:	6852      	ldr	r2, [r2, #4]
 800bac4:	4411      	add	r1, r2
 800bac6:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	6812      	ldr	r2, [r2, #0]
 800bacc:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bace:	4298      	cmp	r0, r3
 800bad0:	d000      	beq.n	800bad4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bad2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bad8:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bada:	4613      	mov	r3, r2
 800badc:	e7de      	b.n	800ba9c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bade:	6004      	str	r4, [r0, #0]
 800bae0:	e7f5      	b.n	800bace <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bae2:	6002      	str	r2, [r0, #0]
 800bae4:	e7f3      	b.n	800bace <prvInsertBlockIntoFreeList+0x36>
 800bae6:	bf00      	nop
 800bae8:	20002b5c 	.word	0x20002b5c
 800baec:	20000b4c 	.word	0x20000b4c

0800baf0 <pvPortMalloc>:
{
 800baf0:	b570      	push	{r4, r5, r6, lr}
 800baf2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800baf4:	f7fe fca2 	bl	800a43c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800baf8:	4b3a      	ldr	r3, [pc, #232]	; (800bbe4 <pvPortMalloc+0xf4>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	b1bb      	cbz	r3, 800bb2e <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bafe:	4b3a      	ldr	r3, [pc, #232]	; (800bbe8 <pvPortMalloc+0xf8>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	421c      	tst	r4, r3
 800bb04:	d163      	bne.n	800bbce <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 800bb06:	b1ac      	cbz	r4, 800bb34 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 800bb08:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb0a:	f014 0f07 	tst.w	r4, #7
 800bb0e:	d011      	beq.n	800bb34 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb10:	f024 0407 	bic.w	r4, r4, #7
 800bb14:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb16:	f004 0307 	and.w	r3, r4, #7
 800bb1a:	b15b      	cbz	r3, 800bb34 <pvPortMalloc+0x44>
 800bb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	e7fe      	b.n	800bb2c <pvPortMalloc+0x3c>
			prvHeapInit();
 800bb2e:	f7ff ff81 	bl	800ba34 <prvHeapInit>
 800bb32:	e7e4      	b.n	800bafe <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb34:	2c00      	cmp	r4, #0
 800bb36:	d04c      	beq.n	800bbd2 <pvPortMalloc+0xe2>
 800bb38:	4b2c      	ldr	r3, [pc, #176]	; (800bbec <pvPortMalloc+0xfc>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	42a3      	cmp	r3, r4
 800bb3e:	d34a      	bcc.n	800bbd6 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 800bb40:	4b2b      	ldr	r3, [pc, #172]	; (800bbf0 <pvPortMalloc+0x100>)
 800bb42:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb44:	e001      	b.n	800bb4a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 800bb46:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb48:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb4a:	686a      	ldr	r2, [r5, #4]
 800bb4c:	42a2      	cmp	r2, r4
 800bb4e:	d202      	bcs.n	800bb56 <pvPortMalloc+0x66>
 800bb50:	682a      	ldr	r2, [r5, #0]
 800bb52:	2a00      	cmp	r2, #0
 800bb54:	d1f7      	bne.n	800bb46 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 800bb56:	4a23      	ldr	r2, [pc, #140]	; (800bbe4 <pvPortMalloc+0xf4>)
 800bb58:	6812      	ldr	r2, [r2, #0]
 800bb5a:	42aa      	cmp	r2, r5
 800bb5c:	d03d      	beq.n	800bbda <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb5e:	681e      	ldr	r6, [r3, #0]
 800bb60:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb62:	682a      	ldr	r2, [r5, #0]
 800bb64:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb66:	686b      	ldr	r3, [r5, #4]
 800bb68:	1b1b      	subs	r3, r3, r4
 800bb6a:	2b10      	cmp	r3, #16
 800bb6c:	d910      	bls.n	800bb90 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb6e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb70:	f010 0f07 	tst.w	r0, #7
 800bb74:	d008      	beq.n	800bb88 <pvPortMalloc+0x98>
 800bb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	e7fe      	b.n	800bb86 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb88:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb8a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb8c:	f7ff ff84 	bl	800ba98 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb90:	686a      	ldr	r2, [r5, #4]
 800bb92:	4916      	ldr	r1, [pc, #88]	; (800bbec <pvPortMalloc+0xfc>)
 800bb94:	680b      	ldr	r3, [r1, #0]
 800bb96:	1a9b      	subs	r3, r3, r2
 800bb98:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb9a:	4916      	ldr	r1, [pc, #88]	; (800bbf4 <pvPortMalloc+0x104>)
 800bb9c:	6809      	ldr	r1, [r1, #0]
 800bb9e:	428b      	cmp	r3, r1
 800bba0:	d201      	bcs.n	800bba6 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bba2:	4914      	ldr	r1, [pc, #80]	; (800bbf4 <pvPortMalloc+0x104>)
 800bba4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bba6:	4b10      	ldr	r3, [pc, #64]	; (800bbe8 <pvPortMalloc+0xf8>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800bbb2:	f7fe fcdd 	bl	800a570 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbb6:	f016 0f07 	tst.w	r6, #7
 800bbba:	d010      	beq.n	800bbde <pvPortMalloc+0xee>
 800bbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc0:	f383 8811 	msr	BASEPRI, r3
 800bbc4:	f3bf 8f6f 	isb	sy
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	e7fe      	b.n	800bbcc <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 800bbce:	2600      	movs	r6, #0
 800bbd0:	e7ef      	b.n	800bbb2 <pvPortMalloc+0xc2>
 800bbd2:	2600      	movs	r6, #0
 800bbd4:	e7ed      	b.n	800bbb2 <pvPortMalloc+0xc2>
 800bbd6:	2600      	movs	r6, #0
 800bbd8:	e7eb      	b.n	800bbb2 <pvPortMalloc+0xc2>
 800bbda:	2600      	movs	r6, #0
 800bbdc:	e7e9      	b.n	800bbb2 <pvPortMalloc+0xc2>
}
 800bbde:	4630      	mov	r0, r6
 800bbe0:	bd70      	pop	{r4, r5, r6, pc}
 800bbe2:	bf00      	nop
 800bbe4:	20000b4c 	.word	0x20000b4c
 800bbe8:	20002b50 	.word	0x20002b50
 800bbec:	20002b54 	.word	0x20002b54
 800bbf0:	20002b5c 	.word	0x20002b5c
 800bbf4:	20002b58 	.word	0x20002b58

0800bbf8 <vPortFree>:
	if( pv != NULL )
 800bbf8:	b380      	cbz	r0, 800bc5c <vPortFree+0x64>
{
 800bbfa:	b538      	push	{r3, r4, r5, lr}
 800bbfc:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800bbfe:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc02:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800bc06:	4916      	ldr	r1, [pc, #88]	; (800bc60 <vPortFree+0x68>)
 800bc08:	6809      	ldr	r1, [r1, #0]
 800bc0a:	420a      	tst	r2, r1
 800bc0c:	d108      	bne.n	800bc20 <vPortFree+0x28>
 800bc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc12:	f383 8811 	msr	BASEPRI, r3
 800bc16:	f3bf 8f6f 	isb	sy
 800bc1a:	f3bf 8f4f 	dsb	sy
 800bc1e:	e7fe      	b.n	800bc1e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc20:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800bc24:	b140      	cbz	r0, 800bc38 <vPortFree+0x40>
 800bc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	e7fe      	b.n	800bc36 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc38:	ea22 0201 	bic.w	r2, r2, r1
 800bc3c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800bc40:	f7fe fbfc 	bl	800a43c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc44:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800bc48:	4a06      	ldr	r2, [pc, #24]	; (800bc64 <vPortFree+0x6c>)
 800bc4a:	6813      	ldr	r3, [r2, #0]
 800bc4c:	440b      	add	r3, r1
 800bc4e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc50:	4628      	mov	r0, r5
 800bc52:	f7ff ff21 	bl	800ba98 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800bc56:	f7fe fc8b 	bl	800a570 <xTaskResumeAll>
}
 800bc5a:	bd38      	pop	{r3, r4, r5, pc}
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	20002b50 	.word	0x20002b50
 800bc64:	20002b54 	.word	0x20002b54

0800bc68 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 800bc68:	4603      	mov	r3, r0
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;
 800bc6a:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800bc6c:	4608      	mov	r0, r1

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800bc6e:	e004      	b.n	800bc7a <prvGetNumberOfParameters+0x12>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800bc70:	b911      	cbnz	r1, 800bc78 <prvGetNumberOfParameters+0x10>
			{
				cParameters++;
 800bc72:	3001      	adds	r0, #1
 800bc74:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800bc76:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800bc78:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800bc7a:	781a      	ldrb	r2, [r3, #0]
 800bc7c:	b11a      	cbz	r2, 800bc86 <prvGetNumberOfParameters+0x1e>
		if( ( *pcCommandString ) == ' ' )
 800bc7e:	2a20      	cmp	r2, #32
 800bc80:	d0f6      	beq.n	800bc70 <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800bc82:	2100      	movs	r1, #0
 800bc84:	e7f8      	b.n	800bc78 <prvGetNumberOfParameters+0x10>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800bc86:	b901      	cbnz	r1, 800bc8a <prvGetNumberOfParameters+0x22>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800bc88:	4770      	bx	lr
		cParameters--;
 800bc8a:	3801      	subs	r0, #1
 800bc8c:	b240      	sxtb	r0, r0
 800bc8e:	e7fb      	b.n	800bc88 <prvGetNumberOfParameters+0x20>

0800bc90 <prvHelpCommand>:
{
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	460a      	mov	r2, r1
	if( pxCommand == NULL )
 800bc94:	4b09      	ldr	r3, [pc, #36]	; (800bcbc <prvHelpCommand+0x2c>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	b153      	cbz	r3, 800bcb0 <prvHelpCommand+0x20>
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800bc9a:	4c08      	ldr	r4, [pc, #32]	; (800bcbc <prvHelpCommand+0x2c>)
 800bc9c:	6825      	ldr	r5, [r4, #0]
 800bc9e:	682b      	ldr	r3, [r5, #0]
 800bca0:	6859      	ldr	r1, [r3, #4]
 800bca2:	f000 fd55 	bl	800c750 <strncpy>
	pxCommand = pxCommand->pxNext;
 800bca6:	686b      	ldr	r3, [r5, #4]
 800bca8:	6023      	str	r3, [r4, #0]
	if( pxCommand == NULL )
 800bcaa:	b12b      	cbz	r3, 800bcb8 <prvHelpCommand+0x28>
		xReturn = pdTRUE;
 800bcac:	2001      	movs	r0, #1
}
 800bcae:	bd38      	pop	{r3, r4, r5, pc}
		pxCommand = &xRegisteredCommands;
 800bcb0:	4b02      	ldr	r3, [pc, #8]	; (800bcbc <prvHelpCommand+0x2c>)
 800bcb2:	4903      	ldr	r1, [pc, #12]	; (800bcc0 <prvHelpCommand+0x30>)
 800bcb4:	6019      	str	r1, [r3, #0]
 800bcb6:	e7f0      	b.n	800bc9a <prvHelpCommand+0xa>
		xReturn = pdFALSE;
 800bcb8:	2000      	movs	r0, #0
 800bcba:	e7f8      	b.n	800bcae <prvHelpCommand+0x1e>
 800bcbc:	20002b68 	.word	0x20002b68
 800bcc0:	20000064 	.word	0x20000064

0800bcc4 <FreeRTOS_CLIRegisterCommand>:
{
 800bcc4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxCommandToRegister );
 800bcc6:	b940      	cbnz	r0, 800bcda <FreeRTOS_CLIRegisterCommand+0x16>
 800bcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bccc:	f383 8811 	msr	BASEPRI, r3
 800bcd0:	f3bf 8f6f 	isb	sy
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	e7fe      	b.n	800bcd8 <FreeRTOS_CLIRegisterCommand+0x14>
 800bcda:	4605      	mov	r5, r0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800bcdc:	2008      	movs	r0, #8
 800bcde:	f7ff ff07 	bl	800baf0 <pvPortMalloc>
	configASSERT( pxNewListItem );
 800bce2:	4604      	mov	r4, r0
 800bce4:	b940      	cbnz	r0, 800bcf8 <FreeRTOS_CLIRegisterCommand+0x34>
 800bce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcea:	f383 8811 	msr	BASEPRI, r3
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	f3bf 8f4f 	dsb	sy
 800bcf6:	e7fe      	b.n	800bcf6 <FreeRTOS_CLIRegisterCommand+0x32>
		taskENTER_CRITICAL();
 800bcf8:	f7ff fd44 	bl	800b784 <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800bcfc:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800bd02:	4b04      	ldr	r3, [pc, #16]	; (800bd14 <FreeRTOS_CLIRegisterCommand+0x50>)
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800bd08:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800bd0a:	f7ff fd5d 	bl	800b7c8 <vPortExitCritical>
}
 800bd0e:	2001      	movs	r0, #1
 800bd10:	bd38      	pop	{r3, r4, r5, pc}
 800bd12:	bf00      	nop
 800bd14:	20000060 	.word	0x20000060

0800bd18 <FreeRTOS_CLIProcessCommand>:
{
 800bd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd1c:	4606      	mov	r6, r0
 800bd1e:	4689      	mov	r9, r1
 800bd20:	4690      	mov	r8, r2
	if( pxCommand == NULL )
 800bd22:	4b2a      	ldr	r3, [pc, #168]	; (800bdcc <FreeRTOS_CLIProcessCommand+0xb4>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	b1ab      	cbz	r3, 800bd54 <FreeRTOS_CLIProcessCommand+0x3c>
BaseType_t xReturn = pdTRUE;
 800bd28:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800bd2a:	4b28      	ldr	r3, [pc, #160]	; (800bdcc <FreeRTOS_CLIProcessCommand+0xb4>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	b10b      	cbz	r3, 800bd34 <FreeRTOS_CLIProcessCommand+0x1c>
 800bd30:	2c00      	cmp	r4, #0
 800bd32:	d03b      	beq.n	800bdac <FreeRTOS_CLIProcessCommand+0x94>
	else if( pxCommand != NULL )
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d042      	beq.n	800bdbe <FreeRTOS_CLIProcessCommand+0xa6>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	4632      	mov	r2, r6
 800bd3e:	4641      	mov	r1, r8
 800bd40:	4648      	mov	r0, r9
 800bd42:	4798      	blx	r3
		if( xReturn == pdFALSE )
 800bd44:	4604      	mov	r4, r0
 800bd46:	b910      	cbnz	r0, 800bd4e <FreeRTOS_CLIProcessCommand+0x36>
			pxCommand = NULL;
 800bd48:	4b20      	ldr	r3, [pc, #128]	; (800bdcc <FreeRTOS_CLIProcessCommand+0xb4>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	601a      	str	r2, [r3, #0]
}
 800bd4e:	4620      	mov	r0, r4
 800bd50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800bd54:	4b1d      	ldr	r3, [pc, #116]	; (800bdcc <FreeRTOS_CLIProcessCommand+0xb4>)
 800bd56:	4a1e      	ldr	r2, [pc, #120]	; (800bdd0 <FreeRTOS_CLIProcessCommand+0xb8>)
 800bd58:	601a      	str	r2, [r3, #0]
 800bd5a:	e008      	b.n	800bd6e <FreeRTOS_CLIProcessCommand+0x56>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	4629      	mov	r1, r5
 800bd60:	4630      	mov	r0, r6
 800bd62:	f000 fce3 	bl	800c72c <strncmp>
 800bd66:	b180      	cbz	r0, 800bd8a <FreeRTOS_CLIProcessCommand+0x72>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800bd68:	6862      	ldr	r2, [r4, #4]
 800bd6a:	4b18      	ldr	r3, [pc, #96]	; (800bdcc <FreeRTOS_CLIProcessCommand+0xb4>)
 800bd6c:	601a      	str	r2, [r3, #0]
 800bd6e:	4b17      	ldr	r3, [pc, #92]	; (800bdcc <FreeRTOS_CLIProcessCommand+0xb4>)
 800bd70:	681c      	ldr	r4, [r3, #0]
 800bd72:	b1cc      	cbz	r4, 800bda8 <FreeRTOS_CLIProcessCommand+0x90>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800bd74:	6827      	ldr	r7, [r4, #0]
 800bd76:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 800bd78:	4628      	mov	r0, r5
 800bd7a:	f7f4 fa31 	bl	80001e0 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800bd7e:	5c33      	ldrb	r3, [r6, r0]
 800bd80:	2b20      	cmp	r3, #32
 800bd82:	d0eb      	beq.n	800bd5c <FreeRTOS_CLIProcessCommand+0x44>
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1ef      	bne.n	800bd68 <FreeRTOS_CLIProcessCommand+0x50>
 800bd88:	e7e8      	b.n	800bd5c <FreeRTOS_CLIProcessCommand+0x44>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800bd8a:	f997 400c 	ldrsb.w	r4, [r7, #12]
 800bd8e:	2c00      	cmp	r4, #0
 800bd90:	da01      	bge.n	800bd96 <FreeRTOS_CLIProcessCommand+0x7e>
BaseType_t xReturn = pdTRUE;
 800bd92:	2401      	movs	r4, #1
 800bd94:	e7c9      	b.n	800bd2a <FreeRTOS_CLIProcessCommand+0x12>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800bd96:	4630      	mov	r0, r6
 800bd98:	f7ff ff66 	bl	800bc68 <prvGetNumberOfParameters>
 800bd9c:	4284      	cmp	r4, r0
 800bd9e:	d001      	beq.n	800bda4 <FreeRTOS_CLIProcessCommand+0x8c>
							xReturn = pdFALSE;
 800bda0:	2400      	movs	r4, #0
 800bda2:	e7c2      	b.n	800bd2a <FreeRTOS_CLIProcessCommand+0x12>
BaseType_t xReturn = pdTRUE;
 800bda4:	2401      	movs	r4, #1
 800bda6:	e7c0      	b.n	800bd2a <FreeRTOS_CLIProcessCommand+0x12>
 800bda8:	2401      	movs	r4, #1
 800bdaa:	e7be      	b.n	800bd2a <FreeRTOS_CLIProcessCommand+0x12>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800bdac:	4642      	mov	r2, r8
 800bdae:	4909      	ldr	r1, [pc, #36]	; (800bdd4 <FreeRTOS_CLIProcessCommand+0xbc>)
 800bdb0:	4648      	mov	r0, r9
 800bdb2:	f000 fccd 	bl	800c750 <strncpy>
		pxCommand = NULL;
 800bdb6:	4b05      	ldr	r3, [pc, #20]	; (800bdcc <FreeRTOS_CLIProcessCommand+0xb4>)
 800bdb8:	2200      	movs	r2, #0
 800bdba:	601a      	str	r2, [r3, #0]
 800bdbc:	e7c7      	b.n	800bd4e <FreeRTOS_CLIProcessCommand+0x36>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800bdbe:	4642      	mov	r2, r8
 800bdc0:	4905      	ldr	r1, [pc, #20]	; (800bdd8 <FreeRTOS_CLIProcessCommand+0xc0>)
 800bdc2:	4648      	mov	r0, r9
 800bdc4:	f000 fcc4 	bl	800c750 <strncpy>
		xReturn = pdFALSE;
 800bdc8:	2400      	movs	r4, #0
	return xReturn;
 800bdca:	e7c0      	b.n	800bd4e <FreeRTOS_CLIProcessCommand+0x36>
 800bdcc:	20002b64 	.word	0x20002b64
 800bdd0:	20000064 	.word	0x20000064
 800bdd4:	0800e008 	.word	0x0800e008
 800bdd8:	0800e060 	.word	0x0800e060

0800bddc <FreeRTOS_CLIGetParameter>:
{
 800bddc:	b410      	push	{r4}
	*pxParameterStringLength = 0;
 800bdde:	2400      	movs	r4, #0
 800bde0:	6014      	str	r4, [r2, #0]
	while( uxParametersFound < uxWantedParameter )
 800bde2:	e00d      	b.n	800be00 <FreeRTOS_CLIGetParameter+0x24>
			pcCommandString++;
 800bde4:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800bde6:	7803      	ldrb	r3, [r0, #0]
 800bde8:	b11b      	cbz	r3, 800bdf2 <FreeRTOS_CLIGetParameter+0x16>
 800bdea:	2b20      	cmp	r3, #32
 800bdec:	d1fa      	bne.n	800bde4 <FreeRTOS_CLIGetParameter+0x8>
 800bdee:	e000      	b.n	800bdf2 <FreeRTOS_CLIGetParameter+0x16>
			pcCommandString++;
 800bdf0:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800bdf2:	7803      	ldrb	r3, [r0, #0]
 800bdf4:	2b20      	cmp	r3, #32
 800bdf6:	d0fb      	beq.n	800bdf0 <FreeRTOS_CLIGetParameter+0x14>
		if( *pcCommandString != 0x00 )
 800bdf8:	b1bb      	cbz	r3, 800be2a <FreeRTOS_CLIGetParameter+0x4e>
			uxParametersFound++;
 800bdfa:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800bdfc:	42a1      	cmp	r1, r4
 800bdfe:	d012      	beq.n	800be26 <FreeRTOS_CLIGetParameter+0x4a>
	while( uxParametersFound < uxWantedParameter )
 800be00:	428c      	cmp	r4, r1
 800be02:	d3f0      	bcc.n	800bde6 <FreeRTOS_CLIGetParameter+0xa>
const char *pcReturn = NULL;
 800be04:	2000      	movs	r0, #0
}
 800be06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be0a:	4770      	bx	lr
					( *pxParameterStringLength )++;
 800be0c:	6813      	ldr	r3, [r2, #0]
 800be0e:	3301      	adds	r3, #1
 800be10:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800be12:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800be14:	780b      	ldrb	r3, [r1, #0]
 800be16:	b10b      	cbz	r3, 800be1c <FreeRTOS_CLIGetParameter+0x40>
 800be18:	2b20      	cmp	r3, #32
 800be1a:	d1f7      	bne.n	800be0c <FreeRTOS_CLIGetParameter+0x30>
				if( *pxParameterStringLength == 0 )
 800be1c:	6813      	ldr	r3, [r2, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d1f1      	bne.n	800be06 <FreeRTOS_CLIGetParameter+0x2a>
					pcReturn = NULL;
 800be22:	2000      	movs	r0, #0
	return pcReturn;
 800be24:	e7ef      	b.n	800be06 <FreeRTOS_CLIGetParameter+0x2a>
 800be26:	4601      	mov	r1, r0
 800be28:	e7f4      	b.n	800be14 <FreeRTOS_CLIGetParameter+0x38>
const char *pcReturn = NULL;
 800be2a:	2000      	movs	r0, #0
 800be2c:	e7eb      	b.n	800be06 <FreeRTOS_CLIGetParameter+0x2a>

0800be2e <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 800be2e:	429a      	cmp	r2, r3
 800be30:	d200      	bcs.n	800be34 <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 800be32:	5488      	strb	r0, [r1, r2]
  }
}
 800be34:	4770      	bx	lr

0800be36 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800be36:	4770      	bx	lr

0800be38 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
 800be38:	2300      	movs	r3, #0
  while (_is_digit(**str)) {
 800be3a:	e007      	b.n	800be4c <_atoi+0x14>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800be3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800be40:	005a      	lsls	r2, r3, #1
 800be42:	1c4b      	adds	r3, r1, #1
 800be44:	6003      	str	r3, [r0, #0]
 800be46:	780b      	ldrb	r3, [r1, #0]
 800be48:	4413      	add	r3, r2
 800be4a:	3b30      	subs	r3, #48	; 0x30
  while (_is_digit(**str)) {
 800be4c:	6801      	ldr	r1, [r0, #0]
 800be4e:	780a      	ldrb	r2, [r1, #0]
  return (ch >= '0') && (ch <= '9');
 800be50:	3a30      	subs	r2, #48	; 0x30
 800be52:	b2d2      	uxtb	r2, r2
  while (_is_digit(**str)) {
 800be54:	2a09      	cmp	r2, #9
 800be56:	d9f1      	bls.n	800be3c <_atoi+0x4>
  }
  return i;
}
 800be58:	4618      	mov	r0, r3
 800be5a:	4770      	bx	lr

0800be5c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800be5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be60:	b083      	sub	sp, #12
 800be62:	4605      	mov	r5, r0
 800be64:	9101      	str	r1, [sp, #4]
 800be66:	4693      	mov	fp, r2
 800be68:	461e      	mov	r6, r3
 800be6a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800be6e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800be70:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800be74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be76:	f013 0f03 	tst.w	r3, #3
 800be7a:	d114      	bne.n	800bea6 <_out_rev+0x4a>
    for (size_t i = len; i < width; i++) {
 800be7c:	4627      	mov	r7, r4
 800be7e:	e007      	b.n	800be90 <_out_rev+0x34>
      out(' ', buffer, idx++, maxlen);
 800be80:	f102 0a01 	add.w	sl, r2, #1
 800be84:	4633      	mov	r3, r6
 800be86:	9901      	ldr	r1, [sp, #4]
 800be88:	2020      	movs	r0, #32
 800be8a:	47a8      	blx	r5
    for (size_t i = len; i < width; i++) {
 800be8c:	3701      	adds	r7, #1
      out(' ', buffer, idx++, maxlen);
 800be8e:	4652      	mov	r2, sl
    for (size_t i = len; i < width; i++) {
 800be90:	4547      	cmp	r7, r8
 800be92:	d3f5      	bcc.n	800be80 <_out_rev+0x24>
 800be94:	e007      	b.n	800bea6 <_out_rev+0x4a>
    }
  }

  // reverse string
  while (len) {
    out(buf[--len], buffer, idx++, maxlen);
 800be96:	3c01      	subs	r4, #1
 800be98:	1c57      	adds	r7, r2, #1
 800be9a:	4633      	mov	r3, r6
 800be9c:	9901      	ldr	r1, [sp, #4]
 800be9e:	f819 0004 	ldrb.w	r0, [r9, r4]
 800bea2:	47a8      	blx	r5
 800bea4:	463a      	mov	r2, r7
  while (len) {
 800bea6:	2c00      	cmp	r4, #0
 800bea8:	d1f5      	bne.n	800be96 <_out_rev+0x3a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800beaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800beac:	f013 0f02 	tst.w	r3, #2
 800beb0:	d106      	bne.n	800bec0 <_out_rev+0x64>
 800beb2:	e009      	b.n	800bec8 <_out_rev+0x6c>
    while (idx - start_idx < width) {
      out(' ', buffer, idx++, maxlen);
 800beb4:	1c54      	adds	r4, r2, #1
 800beb6:	4633      	mov	r3, r6
 800beb8:	9901      	ldr	r1, [sp, #4]
 800beba:	2020      	movs	r0, #32
 800bebc:	47a8      	blx	r5
 800bebe:	4622      	mov	r2, r4
    while (idx - start_idx < width) {
 800bec0:	eba2 030b 	sub.w	r3, r2, fp
 800bec4:	4543      	cmp	r3, r8
 800bec6:	d3f5      	bcc.n	800beb4 <_out_rev+0x58>
    }
  }

  return idx;
}
 800bec8:	4610      	mov	r0, r2
 800beca:	b003      	add	sp, #12
 800becc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bed0 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800bed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bed4:	b085      	sub	sp, #20
 800bed6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bed8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800beda:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 800bede:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800bee2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800bee6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800bee8:	9d12      	ldr	r5, [sp, #72]	; 0x48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800beea:	f015 0f02 	tst.w	r5, #2
 800beee:	d121      	bne.n	800bf34 <_ntoa_format+0x64>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800bef0:	b17f      	cbz	r7, 800bf12 <_ntoa_format+0x42>
 800bef2:	f015 0f01 	tst.w	r5, #1
 800bef6:	d00c      	beq.n	800bf12 <_ntoa_format+0x42>
 800bef8:	f1b9 0f00 	cmp.w	r9, #0
 800befc:	d102      	bne.n	800bf04 <_ntoa_format+0x34>
 800befe:	f015 0f0c 	tst.w	r5, #12
 800bf02:	d006      	beq.n	800bf12 <_ntoa_format+0x42>
      width--;
 800bf04:	3f01      	subs	r7, #1
 800bf06:	e004      	b.n	800bf12 <_ntoa_format+0x42>
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 800bf08:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800bf0c:	f806 c004 	strb.w	ip, [r6, r4]
 800bf10:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800bf12:	4574      	cmp	r4, lr
 800bf14:	d207      	bcs.n	800bf26 <_ntoa_format+0x56>
 800bf16:	2c1f      	cmp	r4, #31
 800bf18:	d9f6      	bls.n	800bf08 <_ntoa_format+0x38>
 800bf1a:	e004      	b.n	800bf26 <_ntoa_format+0x56>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 800bf1c:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800bf20:	f806 c004 	strb.w	ip, [r6, r4]
 800bf24:	3401      	adds	r4, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800bf26:	f015 0f01 	tst.w	r5, #1
 800bf2a:	d003      	beq.n	800bf34 <_ntoa_format+0x64>
 800bf2c:	42bc      	cmp	r4, r7
 800bf2e:	d201      	bcs.n	800bf34 <_ntoa_format+0x64>
 800bf30:	2c1f      	cmp	r4, #31
 800bf32:	d9f3      	bls.n	800bf1c <_ntoa_format+0x4c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800bf34:	f015 0f10 	tst.w	r5, #16
 800bf38:	d017      	beq.n	800bf6a <_ntoa_format+0x9a>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800bf3a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800bf3e:	d104      	bne.n	800bf4a <_ntoa_format+0x7a>
 800bf40:	b11c      	cbz	r4, 800bf4a <_ntoa_format+0x7a>
 800bf42:	4574      	cmp	r4, lr
 800bf44:	d022      	beq.n	800bf8c <_ntoa_format+0xbc>
 800bf46:	42bc      	cmp	r4, r7
 800bf48:	d020      	beq.n	800bf8c <_ntoa_format+0xbc>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800bf4a:	f1b8 0f10 	cmp.w	r8, #16
 800bf4e:	d029      	beq.n	800bfa4 <_ntoa_format+0xd4>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800bf50:	f1b8 0f10 	cmp.w	r8, #16
 800bf54:	d031      	beq.n	800bfba <_ntoa_format+0xea>
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800bf56:	f1b8 0f02 	cmp.w	r8, #2
 800bf5a:	d039      	beq.n	800bfd0 <_ntoa_format+0x100>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800bf5c:	2c1f      	cmp	r4, #31
 800bf5e:	d804      	bhi.n	800bf6a <_ntoa_format+0x9a>
      buf[len++] = '0';
 800bf60:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800bf64:	f806 c004 	strb.w	ip, [r6, r4]
 800bf68:	3401      	adds	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800bf6a:	2c1f      	cmp	r4, #31
 800bf6c:	d83d      	bhi.n	800bfea <_ntoa_format+0x11a>
    if (negative) {
 800bf6e:	f1b9 0f00 	cmp.w	r9, #0
 800bf72:	d135      	bne.n	800bfe0 <_ntoa_format+0x110>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
 800bf74:	f015 0f04 	tst.w	r5, #4
 800bf78:	d140      	bne.n	800bffc <_ntoa_format+0x12c>
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
 800bf7a:	f015 0f08 	tst.w	r5, #8
 800bf7e:	d034      	beq.n	800bfea <_ntoa_format+0x11a>
      buf[len++] = ' ';
 800bf80:	f04f 0c20 	mov.w	ip, #32
 800bf84:	f806 c004 	strb.w	ip, [r6, r4]
 800bf88:	3401      	adds	r4, #1
 800bf8a:	e02e      	b.n	800bfea <_ntoa_format+0x11a>
      if (len && (base == 16U)) {
 800bf8c:	f1b4 0c01 	subs.w	ip, r4, #1
 800bf90:	d006      	beq.n	800bfa0 <_ntoa_format+0xd0>
 800bf92:	f1b8 0f10 	cmp.w	r8, #16
 800bf96:	d001      	beq.n	800bf9c <_ntoa_format+0xcc>
      len--;
 800bf98:	4664      	mov	r4, ip
 800bf9a:	e7d6      	b.n	800bf4a <_ntoa_format+0x7a>
        len--;
 800bf9c:	3c02      	subs	r4, #2
 800bf9e:	e7d4      	b.n	800bf4a <_ntoa_format+0x7a>
      len--;
 800bfa0:	4664      	mov	r4, ip
 800bfa2:	e7d2      	b.n	800bf4a <_ntoa_format+0x7a>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800bfa4:	f015 0f20 	tst.w	r5, #32
 800bfa8:	d1d2      	bne.n	800bf50 <_ntoa_format+0x80>
 800bfaa:	2c1f      	cmp	r4, #31
 800bfac:	d8d0      	bhi.n	800bf50 <_ntoa_format+0x80>
      buf[len++] = 'x';
 800bfae:	f04f 0c78 	mov.w	ip, #120	; 0x78
 800bfb2:	f806 c004 	strb.w	ip, [r6, r4]
 800bfb6:	3401      	adds	r4, #1
 800bfb8:	e7d0      	b.n	800bf5c <_ntoa_format+0x8c>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800bfba:	f015 0f20 	tst.w	r5, #32
 800bfbe:	d0ca      	beq.n	800bf56 <_ntoa_format+0x86>
 800bfc0:	2c1f      	cmp	r4, #31
 800bfc2:	d8c8      	bhi.n	800bf56 <_ntoa_format+0x86>
      buf[len++] = 'X';
 800bfc4:	f04f 0c58 	mov.w	ip, #88	; 0x58
 800bfc8:	f806 c004 	strb.w	ip, [r6, r4]
 800bfcc:	3401      	adds	r4, #1
 800bfce:	e7c5      	b.n	800bf5c <_ntoa_format+0x8c>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800bfd0:	2c1f      	cmp	r4, #31
 800bfd2:	d8c3      	bhi.n	800bf5c <_ntoa_format+0x8c>
      buf[len++] = 'b';
 800bfd4:	f04f 0c62 	mov.w	ip, #98	; 0x62
 800bfd8:	f806 c004 	strb.w	ip, [r6, r4]
 800bfdc:	3401      	adds	r4, #1
 800bfde:	e7bd      	b.n	800bf5c <_ntoa_format+0x8c>
      buf[len++] = '-';
 800bfe0:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 800bfe4:	f806 c004 	strb.w	ip, [r6, r4]
 800bfe8:	3401      	adds	r4, #1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800bfea:	9503      	str	r5, [sp, #12]
 800bfec:	9702      	str	r7, [sp, #8]
 800bfee:	9401      	str	r4, [sp, #4]
 800bff0:	9600      	str	r6, [sp, #0]
 800bff2:	f7ff ff33 	bl	800be5c <_out_rev>
}
 800bff6:	b005      	add	sp, #20
 800bff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      buf[len++] = '+';  // ignore the space if the '+' exists
 800bffc:	f04f 0c2b 	mov.w	ip, #43	; 0x2b
 800c000:	f806 c004 	strb.w	ip, [r6, r4]
 800c004:	3401      	adds	r4, #1
 800c006:	e7f0      	b.n	800bfea <_ntoa_format+0x11a>

0800c008 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800c008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c00c:	b090      	sub	sp, #64	; 0x40
 800c00e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800c010:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800c012:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 800c016:	b90d      	cbnz	r5, 800c01c <_ntoa_long+0x14>
    flags &= ~FLAGS_HASH;
 800c018:	f02c 0c10 	bic.w	ip, ip, #16
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800c01c:	f41c 6680 	ands.w	r6, ip, #1024	; 0x400
 800c020:	d019      	beq.n	800c056 <_ntoa_long+0x4e>
 800c022:	b32d      	cbz	r5, 800c070 <_ntoa_long+0x68>
 800c024:	2600      	movs	r6, #0
 800c026:	e016      	b.n	800c056 <_ntoa_long+0x4e>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800c028:	f01c 0f20 	tst.w	ip, #32
 800c02c:	d01d      	beq.n	800c06a <_ntoa_long+0x62>
 800c02e:	f04f 0e41 	mov.w	lr, #65	; 0x41
 800c032:	4474      	add	r4, lr
 800c034:	b2e4      	uxtb	r4, r4
 800c036:	3c0a      	subs	r4, #10
 800c038:	b2e4      	uxtb	r4, r4
 800c03a:	f106 0e01 	add.w	lr, r6, #1
 800c03e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800c042:	4446      	add	r6, r8
 800c044:	f806 4c20 	strb.w	r4, [r6, #-32]
      value /= base;
 800c048:	fbb5 f5f7 	udiv	r5, r5, r7
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800c04c:	b195      	cbz	r5, 800c074 <_ntoa_long+0x6c>
 800c04e:	f1be 0f1f 	cmp.w	lr, #31
 800c052:	d80f      	bhi.n	800c074 <_ntoa_long+0x6c>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800c054:	4676      	mov	r6, lr
      const char digit = (char)(value % base);
 800c056:	fbb5 f4f7 	udiv	r4, r5, r7
 800c05a:	fb07 5414 	mls	r4, r7, r4, r5
 800c05e:	b2e4      	uxtb	r4, r4
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800c060:	2c09      	cmp	r4, #9
 800c062:	d8e1      	bhi.n	800c028 <_ntoa_long+0x20>
 800c064:	3430      	adds	r4, #48	; 0x30
 800c066:	b2e4      	uxtb	r4, r4
 800c068:	e7e7      	b.n	800c03a <_ntoa_long+0x32>
 800c06a:	f04f 0e61 	mov.w	lr, #97	; 0x61
 800c06e:	e7e0      	b.n	800c032 <_ntoa_long+0x2a>
  size_t len = 0U;
 800c070:	f04f 0e00 	mov.w	lr, #0
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800c074:	f8cd c018 	str.w	ip, [sp, #24]
 800c078:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800c07a:	9405      	str	r4, [sp, #20]
 800c07c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800c07e:	9404      	str	r4, [sp, #16]
 800c080:	9703      	str	r7, [sp, #12]
 800c082:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 800c086:	9402      	str	r4, [sp, #8]
 800c088:	f8cd e004 	str.w	lr, [sp, #4]
 800c08c:	ac08      	add	r4, sp, #32
 800c08e:	9400      	str	r4, [sp, #0]
 800c090:	f7ff ff1e 	bl	800bed0 <_ntoa_format>
}
 800c094:	b010      	add	sp, #64	; 0x40
 800c096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800c09c <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800c09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a0:	b08b      	sub	sp, #44	; 0x2c
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	4615      	mov	r5, r2
 800c0a6:	9309      	str	r3, [sp, #36]	; 0x24
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 800c0a8:	9106      	str	r1, [sp, #24]
 800c0aa:	2900      	cmp	r1, #0
 800c0ac:	f000 82b1 	beq.w	800c612 <_vsnprintf+0x576>
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800c0b0:	2400      	movs	r4, #0
  while (*format)
 800c0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0b4:	7818      	ldrb	r0, [r3, #0]
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	f000 82ad 	beq.w	800c616 <_vsnprintf+0x57a>
    if (*format != '%') {
 800c0bc:	2825      	cmp	r0, #37	; 0x25
 800c0be:	d009      	beq.n	800c0d4 <_vsnprintf+0x38>
      out(*format, buffer, idx++, maxlen);
 800c0c0:	1c67      	adds	r7, r4, #1
 800c0c2:	462b      	mov	r3, r5
 800c0c4:	4622      	mov	r2, r4
 800c0c6:	9906      	ldr	r1, [sp, #24]
 800c0c8:	47b0      	blx	r6
      format++;
 800c0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	9309      	str	r3, [sp, #36]	; 0x24
      out(*format, buffer, idx++, maxlen);
 800c0d0:	463c      	mov	r4, r7
      continue;
 800c0d2:	e7ee      	b.n	800c0b2 <_vsnprintf+0x16>
      format++;
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	9309      	str	r3, [sp, #36]	; 0x24
    flags = 0U;
 800c0d8:	2700      	movs	r7, #0
 800c0da:	e02d      	b.n	800c138 <_vsnprintf+0x9c>
  return (ch >= '0') && (ch <= '9');
 800c0dc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c0e0:	b2db      	uxtb	r3, r3
    if (_is_digit(*format)) {
 800c0e2:	2b09      	cmp	r3, #9
 800c0e4:	d968      	bls.n	800c1b8 <_vsnprintf+0x11c>
    else if (*format == '*') {
 800c0e6:	292a      	cmp	r1, #42	; 0x2a
 800c0e8:	d06b      	beq.n	800c1c2 <_vsnprintf+0x126>
    width = 0U;
 800c0ea:	f04f 0a00 	mov.w	sl, #0
    if (*format == '.') {
 800c0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0f0:	781a      	ldrb	r2, [r3, #0]
 800c0f2:	2a2e      	cmp	r2, #46	; 0x2e
 800c0f4:	d075      	beq.n	800c1e2 <_vsnprintf+0x146>
    precision = 0U;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	9307      	str	r3, [sp, #28]
    switch (*format) {
 800c0fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0fc:	7813      	ldrb	r3, [r2, #0]
 800c0fe:	3b68      	subs	r3, #104	; 0x68
 800c100:	2b12      	cmp	r3, #18
 800c102:	f200 80ad 	bhi.w	800c260 <_vsnprintf+0x1c4>
 800c106:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c10a:	0099      	.short	0x0099
 800c10c:	00a700ab 	.word	0x00a700ab
 800c110:	008b00ab 	.word	0x008b00ab
 800c114:	00ab00ab 	.word	0x00ab00ab
 800c118:	00ab00ab 	.word	0x00ab00ab
 800c11c:	00ab00ab 	.word	0x00ab00ab
 800c120:	00ab00ab 	.word	0x00ab00ab
 800c124:	00ab00ab 	.word	0x00ab00ab
 800c128:	00ab00ab 	.word	0x00ab00ab
 800c12c:	010800ab 	.word	0x010800ab
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800c130:	f047 0701 	orr.w	r7, r7, #1
 800c134:	3301      	adds	r3, #1
 800c136:	9309      	str	r3, [sp, #36]	; 0x24
      switch (*format) {
 800c138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c13a:	7819      	ldrb	r1, [r3, #0]
 800c13c:	f1a1 0220 	sub.w	r2, r1, #32
 800c140:	2a10      	cmp	r2, #16
 800c142:	d8cb      	bhi.n	800c0dc <_vsnprintf+0x40>
 800c144:	a001      	add	r0, pc, #4	; (adr r0, 800c14c <_vsnprintf+0xb0>)
 800c146:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800c14a:	bf00      	nop
 800c14c:	0800c1a5 	.word	0x0800c1a5
 800c150:	0800c0dd 	.word	0x0800c0dd
 800c154:	0800c0dd 	.word	0x0800c0dd
 800c158:	0800c1af 	.word	0x0800c1af
 800c15c:	0800c0dd 	.word	0x0800c0dd
 800c160:	0800c0dd 	.word	0x0800c0dd
 800c164:	0800c0dd 	.word	0x0800c0dd
 800c168:	0800c0dd 	.word	0x0800c0dd
 800c16c:	0800c0dd 	.word	0x0800c0dd
 800c170:	0800c0dd 	.word	0x0800c0dd
 800c174:	0800c0dd 	.word	0x0800c0dd
 800c178:	0800c19b 	.word	0x0800c19b
 800c17c:	0800c0dd 	.word	0x0800c0dd
 800c180:	0800c191 	.word	0x0800c191
 800c184:	0800c0dd 	.word	0x0800c0dd
 800c188:	0800c0dd 	.word	0x0800c0dd
 800c18c:	0800c131 	.word	0x0800c131
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800c190:	f047 0702 	orr.w	r7, r7, #2
 800c194:	3301      	adds	r3, #1
 800c196:	9309      	str	r3, [sp, #36]	; 0x24
 800c198:	e7ce      	b.n	800c138 <_vsnprintf+0x9c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800c19a:	f047 0704 	orr.w	r7, r7, #4
 800c19e:	3301      	adds	r3, #1
 800c1a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a2:	e7c9      	b.n	800c138 <_vsnprintf+0x9c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800c1a4:	f047 0708 	orr.w	r7, r7, #8
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ac:	e7c4      	b.n	800c138 <_vsnprintf+0x9c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800c1ae:	f047 0710 	orr.w	r7, r7, #16
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b6:	e7bf      	b.n	800c138 <_vsnprintf+0x9c>
      width = _atoi(&format);
 800c1b8:	a809      	add	r0, sp, #36	; 0x24
 800c1ba:	f7ff fe3d 	bl	800be38 <_atoi>
 800c1be:	4682      	mov	sl, r0
 800c1c0:	e795      	b.n	800c0ee <_vsnprintf+0x52>
      const int w = va_arg(va, int);
 800c1c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1c4:	1d1a      	adds	r2, r3, #4
 800c1c6:	9214      	str	r2, [sp, #80]	; 0x50
 800c1c8:	681b      	ldr	r3, [r3, #0]
      if (w < 0) {
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	db04      	blt.n	800c1d8 <_vsnprintf+0x13c>
        width = (unsigned int)w;
 800c1ce:	469a      	mov	sl, r3
      format++;
 800c1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1d6:	e78a      	b.n	800c0ee <_vsnprintf+0x52>
        flags |= FLAGS_LEFT;    // reverse padding
 800c1d8:	f047 0702 	orr.w	r7, r7, #2
        width = (unsigned int)-w;
 800c1dc:	f1c3 0a00 	rsb	sl, r3, #0
 800c1e0:	e7f6      	b.n	800c1d0 <_vsnprintf+0x134>
      flags |= FLAGS_PRECISION;
 800c1e2:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
      format++;
 800c1e6:	1c5a      	adds	r2, r3, #1
 800c1e8:	9209      	str	r2, [sp, #36]	; 0x24
      if (_is_digit(*format)) {
 800c1ea:	785a      	ldrb	r2, [r3, #1]
  return (ch >= '0') && (ch <= '9');
 800c1ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c1f0:	b2db      	uxtb	r3, r3
      if (_is_digit(*format)) {
 800c1f2:	2b09      	cmp	r3, #9
 800c1f4:	d904      	bls.n	800c200 <_vsnprintf+0x164>
      else if (*format == '*') {
 800c1f6:	2a2a      	cmp	r2, #42	; 0x2a
 800c1f8:	d007      	beq.n	800c20a <_vsnprintf+0x16e>
    precision = 0U;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	9307      	str	r3, [sp, #28]
 800c1fe:	e77c      	b.n	800c0fa <_vsnprintf+0x5e>
        precision = _atoi(&format);
 800c200:	a809      	add	r0, sp, #36	; 0x24
 800c202:	f7ff fe19 	bl	800be38 <_atoi>
 800c206:	9007      	str	r0, [sp, #28]
 800c208:	e777      	b.n	800c0fa <_vsnprintf+0x5e>
        const int prec = (int)va_arg(va, int);
 800c20a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c20c:	1d1a      	adds	r2, r3, #4
 800c20e:	9214      	str	r2, [sp, #80]	; 0x50
 800c210:	681b      	ldr	r3, [r3, #0]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800c212:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c216:	9307      	str	r3, [sp, #28]
        format++;
 800c218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c21a:	3301      	adds	r3, #1
 800c21c:	9309      	str	r3, [sp, #36]	; 0x24
 800c21e:	e76c      	b.n	800c0fa <_vsnprintf+0x5e>
        flags |= FLAGS_LONG;
 800c220:	f447 7180 	orr.w	r1, r7, #256	; 0x100
        format++;
 800c224:	1c53      	adds	r3, r2, #1
 800c226:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == 'l') {
 800c228:	7852      	ldrb	r2, [r2, #1]
 800c22a:	2a6c      	cmp	r2, #108	; 0x6c
 800c22c:	d001      	beq.n	800c232 <_vsnprintf+0x196>
        flags |= FLAGS_LONG;
 800c22e:	460f      	mov	r7, r1
 800c230:	e016      	b.n	800c260 <_vsnprintf+0x1c4>
          flags |= FLAGS_LONG_LONG;
 800c232:	f447 7740 	orr.w	r7, r7, #768	; 0x300
          format++;
 800c236:	3301      	adds	r3, #1
 800c238:	9309      	str	r3, [sp, #36]	; 0x24
 800c23a:	e011      	b.n	800c260 <_vsnprintf+0x1c4>
        flags |= FLAGS_SHORT;
 800c23c:	f047 0180 	orr.w	r1, r7, #128	; 0x80
        format++;
 800c240:	1c53      	adds	r3, r2, #1
 800c242:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == 'h') {
 800c244:	7852      	ldrb	r2, [r2, #1]
 800c246:	2a68      	cmp	r2, #104	; 0x68
 800c248:	d001      	beq.n	800c24e <_vsnprintf+0x1b2>
        flags |= FLAGS_SHORT;
 800c24a:	460f      	mov	r7, r1
 800c24c:	e008      	b.n	800c260 <_vsnprintf+0x1c4>
          flags |= FLAGS_CHAR;
 800c24e:	f047 07c0 	orr.w	r7, r7, #192	; 0xc0
          format++;
 800c252:	3301      	adds	r3, #1
 800c254:	9309      	str	r3, [sp, #36]	; 0x24
 800c256:	e003      	b.n	800c260 <_vsnprintf+0x1c4>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800c258:	f447 7700 	orr.w	r7, r7, #512	; 0x200
        format++;
 800c25c:	3201      	adds	r2, #1
 800c25e:	9209      	str	r2, [sp, #36]	; 0x24
    switch (*format) {
 800c260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c262:	7818      	ldrb	r0, [r3, #0]
 800c264:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 800c268:	2b53      	cmp	r3, #83	; 0x53
 800c26a:	f200 81c8 	bhi.w	800c5fe <_vsnprintf+0x562>
 800c26e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c272:	01bb      	.short	0x01bb
 800c274:	01c601c6 	.word	0x01c601c6
 800c278:	01c601c6 	.word	0x01c601c6
 800c27c:	01c601c6 	.word	0x01c601c6
 800c280:	01c601c6 	.word	0x01c601c6
 800c284:	01c601c6 	.word	0x01c601c6
 800c288:	01c601c6 	.word	0x01c601c6
 800c28c:	01c601c6 	.word	0x01c601c6
 800c290:	01c601c6 	.word	0x01c601c6
 800c294:	01c601c6 	.word	0x01c601c6
 800c298:	01c601c6 	.word	0x01c601c6
 800c29c:	01c601c6 	.word	0x01c601c6
 800c2a0:	01c601c6 	.word	0x01c601c6
 800c2a4:	01c601c6 	.word	0x01c601c6
 800c2a8:	01c601c6 	.word	0x01c601c6
 800c2ac:	01c601c6 	.word	0x01c601c6
 800c2b0:	01c601c6 	.word	0x01c601c6
 800c2b4:	01c601c6 	.word	0x01c601c6
 800c2b8:	01c601c6 	.word	0x01c601c6
 800c2bc:	01c601c6 	.word	0x01c601c6
 800c2c0:	01c601c6 	.word	0x01c601c6
 800c2c4:	01c601c6 	.word	0x01c601c6
 800c2c8:	01c601c6 	.word	0x01c601c6
 800c2cc:	01c601c6 	.word	0x01c601c6
 800c2d0:	01c601c6 	.word	0x01c601c6
 800c2d4:	01c601c6 	.word	0x01c601c6
 800c2d8:	01c60059 	.word	0x01c60059
 800c2dc:	01c601c6 	.word	0x01c601c6
 800c2e0:	01c601c6 	.word	0x01c601c6
 800c2e4:	01c601c6 	.word	0x01c601c6
 800c2e8:	01c601c6 	.word	0x01c601c6
 800c2ec:	010c0059 	.word	0x010c0059
 800c2f0:	01c60059 	.word	0x01c60059
 800c2f4:	01c601c6 	.word	0x01c601c6
 800c2f8:	005901c6 	.word	0x005901c6
 800c2fc:	01c601c6 	.word	0x01c601c6
 800c300:	01c601c6 	.word	0x01c601c6
 800c304:	005901c6 	.word	0x005901c6
 800c308:	01c601a0 	.word	0x01c601a0
 800c30c:	014001c6 	.word	0x014001c6
 800c310:	005901c6 	.word	0x005901c6
 800c314:	01c601c6 	.word	0x01c601c6
 800c318:	0059      	.short	0x0059
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800c31a:	f447 7780 	orr.w	r7, r7, #256	; 0x100
        format++;
 800c31e:	3201      	adds	r2, #1
 800c320:	9209      	str	r2, [sp, #36]	; 0x24
        break;
 800c322:	e79d      	b.n	800c260 <_vsnprintf+0x1c4>
        if (*format == 'x' || *format == 'X') {
 800c324:	2878      	cmp	r0, #120	; 0x78
 800c326:	d009      	beq.n	800c33c <_vsnprintf+0x2a0>
 800c328:	2858      	cmp	r0, #88	; 0x58
 800c32a:	d037      	beq.n	800c39c <_vsnprintf+0x300>
        else if (*format == 'o') {
 800c32c:	286f      	cmp	r0, #111	; 0x6f
 800c32e:	d037      	beq.n	800c3a0 <_vsnprintf+0x304>
        else if (*format == 'b') {
 800c330:	2862      	cmp	r0, #98	; 0x62
 800c332:	d037      	beq.n	800c3a4 <_vsnprintf+0x308>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800c334:	f027 0710 	bic.w	r7, r7, #16
          base = 10U;
 800c338:	230a      	movs	r3, #10
 800c33a:	e000      	b.n	800c33e <_vsnprintf+0x2a2>
          base = 16U;
 800c33c:	2310      	movs	r3, #16
        if (*format == 'X') {
 800c33e:	2858      	cmp	r0, #88	; 0x58
 800c340:	d032      	beq.n	800c3a8 <_vsnprintf+0x30c>
        if ((*format != 'i') && (*format != 'd')) {
 800c342:	2869      	cmp	r0, #105	; 0x69
 800c344:	d003      	beq.n	800c34e <_vsnprintf+0x2b2>
 800c346:	2864      	cmp	r0, #100	; 0x64
 800c348:	d001      	beq.n	800c34e <_vsnprintf+0x2b2>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800c34a:	f027 070c 	bic.w	r7, r7, #12
        if (flags & FLAGS_PRECISION) {
 800c34e:	f417 6f80 	tst.w	r7, #1024	; 0x400
 800c352:	d001      	beq.n	800c358 <_vsnprintf+0x2bc>
          flags &= ~FLAGS_ZEROPAD;
 800c354:	f027 0701 	bic.w	r7, r7, #1
        if ((*format == 'i') || (*format == 'd')) {
 800c358:	2869      	cmp	r0, #105	; 0x69
 800c35a:	d028      	beq.n	800c3ae <_vsnprintf+0x312>
 800c35c:	2864      	cmp	r0, #100	; 0x64
 800c35e:	d026      	beq.n	800c3ae <_vsnprintf+0x312>
          if (flags & FLAGS_LONG_LONG) {
 800c360:	f417 7f00 	tst.w	r7, #512	; 0x200
 800c364:	d144      	bne.n	800c3f0 <_vsnprintf+0x354>
          else if (flags & FLAGS_LONG) {
 800c366:	f417 7f80 	tst.w	r7, #256	; 0x100
 800c36a:	d16c      	bne.n	800c446 <_vsnprintf+0x3aa>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800c36c:	f017 0f40 	tst.w	r7, #64	; 0x40
 800c370:	d07e      	beq.n	800c470 <_vsnprintf+0x3d4>
 800c372:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c374:	1d11      	adds	r1, r2, #4
 800c376:	9114      	str	r1, [sp, #80]	; 0x50
 800c378:	7812      	ldrb	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800c37a:	9705      	str	r7, [sp, #20]
 800c37c:	f8cd a010 	str.w	sl, [sp, #16]
 800c380:	9907      	ldr	r1, [sp, #28]
 800c382:	9103      	str	r1, [sp, #12]
 800c384:	9302      	str	r3, [sp, #8]
 800c386:	2300      	movs	r3, #0
 800c388:	9301      	str	r3, [sp, #4]
 800c38a:	9200      	str	r2, [sp, #0]
 800c38c:	462b      	mov	r3, r5
 800c38e:	4622      	mov	r2, r4
 800c390:	9906      	ldr	r1, [sp, #24]
 800c392:	4630      	mov	r0, r6
 800c394:	f7ff fe38 	bl	800c008 <_ntoa_long>
 800c398:	4604      	mov	r4, r0
 800c39a:	e029      	b.n	800c3f0 <_vsnprintf+0x354>
          base = 16U;
 800c39c:	2310      	movs	r3, #16
 800c39e:	e7ce      	b.n	800c33e <_vsnprintf+0x2a2>
          base =  8U;
 800c3a0:	2308      	movs	r3, #8
 800c3a2:	e7cc      	b.n	800c33e <_vsnprintf+0x2a2>
          base =  2U;
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	e7ca      	b.n	800c33e <_vsnprintf+0x2a2>
          flags |= FLAGS_UPPERCASE;
 800c3a8:	f047 0720 	orr.w	r7, r7, #32
 800c3ac:	e7c9      	b.n	800c342 <_vsnprintf+0x2a6>
          if (flags & FLAGS_LONG_LONG) {
 800c3ae:	f417 7f00 	tst.w	r7, #512	; 0x200
 800c3b2:	d11d      	bne.n	800c3f0 <_vsnprintf+0x354>
          else if (flags & FLAGS_LONG) {
 800c3b4:	f417 7f80 	tst.w	r7, #256	; 0x100
 800c3b8:	d11e      	bne.n	800c3f8 <_vsnprintf+0x35c>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800c3ba:	f017 0f40 	tst.w	r7, #64	; 0x40
 800c3be:	d034      	beq.n	800c42a <_vsnprintf+0x38e>
 800c3c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c3c2:	1d11      	adds	r1, r2, #4
 800c3c4:	9114      	str	r1, [sp, #80]	; 0x50
 800c3c6:	7812      	ldrb	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800c3c8:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800c3cc:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800c3d0:	0fd2      	lsrs	r2, r2, #31
 800c3d2:	9705      	str	r7, [sp, #20]
 800c3d4:	f8cd a010 	str.w	sl, [sp, #16]
 800c3d8:	9807      	ldr	r0, [sp, #28]
 800c3da:	9003      	str	r0, [sp, #12]
 800c3dc:	9302      	str	r3, [sp, #8]
 800c3de:	9201      	str	r2, [sp, #4]
 800c3e0:	9100      	str	r1, [sp, #0]
 800c3e2:	462b      	mov	r3, r5
 800c3e4:	4622      	mov	r2, r4
 800c3e6:	9906      	ldr	r1, [sp, #24]
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	f7ff fe0d 	bl	800c008 <_ntoa_long>
 800c3ee:	4604      	mov	r4, r0
        format++;
 800c3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800c3f6:	e65c      	b.n	800c0b2 <_vsnprintf+0x16>
            const long value = va_arg(va, long);
 800c3f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c3fa:	1d11      	adds	r1, r2, #4
 800c3fc:	9114      	str	r1, [sp, #80]	; 0x50
 800c3fe:	6812      	ldr	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800c400:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800c404:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800c408:	0fd2      	lsrs	r2, r2, #31
 800c40a:	9705      	str	r7, [sp, #20]
 800c40c:	f8cd a010 	str.w	sl, [sp, #16]
 800c410:	9807      	ldr	r0, [sp, #28]
 800c412:	9003      	str	r0, [sp, #12]
 800c414:	9302      	str	r3, [sp, #8]
 800c416:	9201      	str	r2, [sp, #4]
 800c418:	9100      	str	r1, [sp, #0]
 800c41a:	462b      	mov	r3, r5
 800c41c:	4622      	mov	r2, r4
 800c41e:	9906      	ldr	r1, [sp, #24]
 800c420:	4630      	mov	r0, r6
 800c422:	f7ff fdf1 	bl	800c008 <_ntoa_long>
 800c426:	4604      	mov	r4, r0
 800c428:	e7e2      	b.n	800c3f0 <_vsnprintf+0x354>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800c42a:	f017 0f80 	tst.w	r7, #128	; 0x80
 800c42e:	d005      	beq.n	800c43c <_vsnprintf+0x3a0>
 800c430:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c432:	1d11      	adds	r1, r2, #4
 800c434:	9114      	str	r1, [sp, #80]	; 0x50
 800c436:	f9b2 2000 	ldrsh.w	r2, [r2]
 800c43a:	e7c5      	b.n	800c3c8 <_vsnprintf+0x32c>
 800c43c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c43e:	1d11      	adds	r1, r2, #4
 800c440:	9114      	str	r1, [sp, #80]	; 0x50
 800c442:	6812      	ldr	r2, [r2, #0]
 800c444:	e7c0      	b.n	800c3c8 <_vsnprintf+0x32c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800c446:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c448:	1d11      	adds	r1, r2, #4
 800c44a:	9114      	str	r1, [sp, #80]	; 0x50
 800c44c:	6812      	ldr	r2, [r2, #0]
 800c44e:	9705      	str	r7, [sp, #20]
 800c450:	f8cd a010 	str.w	sl, [sp, #16]
 800c454:	9907      	ldr	r1, [sp, #28]
 800c456:	9103      	str	r1, [sp, #12]
 800c458:	9302      	str	r3, [sp, #8]
 800c45a:	2300      	movs	r3, #0
 800c45c:	9301      	str	r3, [sp, #4]
 800c45e:	9200      	str	r2, [sp, #0]
 800c460:	462b      	mov	r3, r5
 800c462:	4622      	mov	r2, r4
 800c464:	9906      	ldr	r1, [sp, #24]
 800c466:	4630      	mov	r0, r6
 800c468:	f7ff fdce 	bl	800c008 <_ntoa_long>
 800c46c:	4604      	mov	r4, r0
 800c46e:	e7bf      	b.n	800c3f0 <_vsnprintf+0x354>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800c470:	f017 0f80 	tst.w	r7, #128	; 0x80
 800c474:	d004      	beq.n	800c480 <_vsnprintf+0x3e4>
 800c476:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c478:	1d11      	adds	r1, r2, #4
 800c47a:	9114      	str	r1, [sp, #80]	; 0x50
 800c47c:	8812      	ldrh	r2, [r2, #0]
 800c47e:	e77c      	b.n	800c37a <_vsnprintf+0x2de>
 800c480:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c482:	1d11      	adds	r1, r2, #4
 800c484:	9114      	str	r1, [sp, #80]	; 0x50
 800c486:	6812      	ldr	r2, [r2, #0]
 800c488:	e777      	b.n	800c37a <_vsnprintf+0x2de>
        if (!(flags & FLAGS_LEFT)) {
 800c48a:	f017 0702 	ands.w	r7, r7, #2
 800c48e:	d01e      	beq.n	800c4ce <_vsnprintf+0x432>
        unsigned int l = 1U;
 800c490:	f04f 0801 	mov.w	r8, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800c494:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c496:	1d03      	adds	r3, r0, #4
 800c498:	9314      	str	r3, [sp, #80]	; 0x50
 800c49a:	f104 0901 	add.w	r9, r4, #1
 800c49e:	462b      	mov	r3, r5
 800c4a0:	4622      	mov	r2, r4
 800c4a2:	9906      	ldr	r1, [sp, #24]
 800c4a4:	7800      	ldrb	r0, [r0, #0]
 800c4a6:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
 800c4a8:	b9a7      	cbnz	r7, 800c4d4 <_vsnprintf+0x438>
        format++;
 800c4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800c4b0:	464c      	mov	r4, r9
 800c4b2:	e5fe      	b.n	800c0b2 <_vsnprintf+0x16>
            out(' ', buffer, idx++, maxlen);
 800c4b4:	1c54      	adds	r4, r2, #1
 800c4b6:	462b      	mov	r3, r5
 800c4b8:	9906      	ldr	r1, [sp, #24]
 800c4ba:	2020      	movs	r0, #32
 800c4bc:	47b0      	blx	r6
          while (l++ < width) {
 800c4be:	4643      	mov	r3, r8
            out(' ', buffer, idx++, maxlen);
 800c4c0:	4622      	mov	r2, r4
          while (l++ < width) {
 800c4c2:	f103 0801 	add.w	r8, r3, #1
 800c4c6:	459a      	cmp	sl, r3
 800c4c8:	d8f4      	bhi.n	800c4b4 <_vsnprintf+0x418>
 800c4ca:	4614      	mov	r4, r2
 800c4cc:	e7e2      	b.n	800c494 <_vsnprintf+0x3f8>
        unsigned int l = 1U;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	4622      	mov	r2, r4
 800c4d2:	e7f6      	b.n	800c4c2 <_vsnprintf+0x426>
 800c4d4:	464a      	mov	r2, r9
 800c4d6:	e006      	b.n	800c4e6 <_vsnprintf+0x44a>
            out(' ', buffer, idx++, maxlen);
 800c4d8:	1c57      	adds	r7, r2, #1
 800c4da:	462b      	mov	r3, r5
 800c4dc:	9906      	ldr	r1, [sp, #24]
 800c4de:	2020      	movs	r0, #32
 800c4e0:	47b0      	blx	r6
          while (l++ < width) {
 800c4e2:	46a0      	mov	r8, r4
            out(' ', buffer, idx++, maxlen);
 800c4e4:	463a      	mov	r2, r7
          while (l++ < width) {
 800c4e6:	f108 0401 	add.w	r4, r8, #1
 800c4ea:	45c2      	cmp	sl, r8
 800c4ec:	d8f4      	bhi.n	800c4d8 <_vsnprintf+0x43c>
 800c4ee:	4691      	mov	r9, r2
 800c4f0:	e7db      	b.n	800c4aa <_vsnprintf+0x40e>
        const char* p = va_arg(va, char*);
 800c4f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4f4:	1d1a      	adds	r2, r3, #4
 800c4f6:	9214      	str	r2, [sp, #80]	; 0x50
 800c4f8:	f8d3 8000 	ldr.w	r8, [r3]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800c4fc:	9b07      	ldr	r3, [sp, #28]
 800c4fe:	b9f3      	cbnz	r3, 800c53e <_vsnprintf+0x4a2>
 800c500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c504:	46c1      	mov	r9, r8
 800c506:	e002      	b.n	800c50e <_vsnprintf+0x472>
  for (s = str; *s && maxsize--; ++s);
 800c508:	f109 0901 	add.w	r9, r9, #1
 800c50c:	4613      	mov	r3, r2
 800c50e:	f899 2000 	ldrb.w	r2, [r9]
 800c512:	b112      	cbz	r2, 800c51a <_vsnprintf+0x47e>
 800c514:	1e5a      	subs	r2, r3, #1
 800c516:	2b00      	cmp	r3, #0
 800c518:	d1f6      	bne.n	800c508 <_vsnprintf+0x46c>
  return (unsigned int)(s - str);
 800c51a:	eba9 0908 	sub.w	r9, r9, r8
        if (flags & FLAGS_PRECISION) {
 800c51e:	f417 6b80 	ands.w	fp, r7, #1024	; 0x400
 800c522:	d003      	beq.n	800c52c <_vsnprintf+0x490>
          l = (l < precision ? l : precision);
 800c524:	9b07      	ldr	r3, [sp, #28]
 800c526:	4599      	cmp	r9, r3
 800c528:	bf28      	it	cs
 800c52a:	4699      	movcs	r9, r3
        if (!(flags & FLAGS_LEFT)) {
 800c52c:	f017 0302 	ands.w	r3, r7, #2
 800c530:	9308      	str	r3, [sp, #32]
 800c532:	d006      	beq.n	800c542 <_vsnprintf+0x4a6>
 800c534:	4622      	mov	r2, r4
 800c536:	465c      	mov	r4, fp
 800c538:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800c53c:	e01b      	b.n	800c576 <_vsnprintf+0x4da>
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800c53e:	9b07      	ldr	r3, [sp, #28]
 800c540:	e7e0      	b.n	800c504 <_vsnprintf+0x468>
 800c542:	4622      	mov	r2, r4
 800c544:	e006      	b.n	800c554 <_vsnprintf+0x4b8>
            out(' ', buffer, idx++, maxlen);
 800c546:	1c54      	adds	r4, r2, #1
 800c548:	462b      	mov	r3, r5
 800c54a:	9906      	ldr	r1, [sp, #24]
 800c54c:	2020      	movs	r0, #32
 800c54e:	47b0      	blx	r6
          while (l++ < width) {
 800c550:	46b9      	mov	r9, r7
            out(' ', buffer, idx++, maxlen);
 800c552:	4622      	mov	r2, r4
          while (l++ < width) {
 800c554:	f109 0701 	add.w	r7, r9, #1
 800c558:	45ca      	cmp	sl, r9
 800c55a:	d8f4      	bhi.n	800c546 <_vsnprintf+0x4aa>
 800c55c:	46b9      	mov	r9, r7
 800c55e:	465c      	mov	r4, fp
 800c560:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800c564:	e007      	b.n	800c576 <_vsnprintf+0x4da>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800c566:	469b      	mov	fp, r3
          out(*(p++), buffer, idx++, maxlen);
 800c568:	f108 0801 	add.w	r8, r8, #1
 800c56c:	1c57      	adds	r7, r2, #1
 800c56e:	462b      	mov	r3, r5
 800c570:	9906      	ldr	r1, [sp, #24]
 800c572:	47b0      	blx	r6
 800c574:	463a      	mov	r2, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800c576:	f898 0000 	ldrb.w	r0, [r8]
 800c57a:	b130      	cbz	r0, 800c58a <_vsnprintf+0x4ee>
 800c57c:	2c00      	cmp	r4, #0
 800c57e:	d0f3      	beq.n	800c568 <_vsnprintf+0x4cc>
 800c580:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800c584:	f1bb 0f00 	cmp.w	fp, #0
 800c588:	d1ed      	bne.n	800c566 <_vsnprintf+0x4ca>
 800c58a:	4614      	mov	r4, r2
        if (flags & FLAGS_LEFT) {
 800c58c:	9b08      	ldr	r3, [sp, #32]
 800c58e:	b953      	cbnz	r3, 800c5a6 <_vsnprintf+0x50a>
        format++;
 800c590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c592:	3301      	adds	r3, #1
 800c594:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800c596:	e58c      	b.n	800c0b2 <_vsnprintf+0x16>
            out(' ', buffer, idx++, maxlen);
 800c598:	1c57      	adds	r7, r2, #1
 800c59a:	462b      	mov	r3, r5
 800c59c:	9906      	ldr	r1, [sp, #24]
 800c59e:	2020      	movs	r0, #32
 800c5a0:	47b0      	blx	r6
          while (l++ < width) {
 800c5a2:	46a1      	mov	r9, r4
            out(' ', buffer, idx++, maxlen);
 800c5a4:	463a      	mov	r2, r7
          while (l++ < width) {
 800c5a6:	f109 0401 	add.w	r4, r9, #1
 800c5aa:	45ca      	cmp	sl, r9
 800c5ac:	d8f4      	bhi.n	800c598 <_vsnprintf+0x4fc>
 800c5ae:	4614      	mov	r4, r2
 800c5b0:	e7ee      	b.n	800c590 <_vsnprintf+0x4f4>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800c5b2:	f047 0721 	orr.w	r7, r7, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800c5b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c5b8:	1d1a      	adds	r2, r3, #4
 800c5ba:	9214      	str	r2, [sp, #80]	; 0x50
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	9705      	str	r7, [sp, #20]
 800c5c0:	2208      	movs	r2, #8
 800c5c2:	9204      	str	r2, [sp, #16]
 800c5c4:	9a07      	ldr	r2, [sp, #28]
 800c5c6:	9203      	str	r2, [sp, #12]
 800c5c8:	2210      	movs	r2, #16
 800c5ca:	9202      	str	r2, [sp, #8]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	9201      	str	r2, [sp, #4]
 800c5d0:	9300      	str	r3, [sp, #0]
 800c5d2:	462b      	mov	r3, r5
 800c5d4:	4622      	mov	r2, r4
 800c5d6:	9906      	ldr	r1, [sp, #24]
 800c5d8:	4630      	mov	r0, r6
 800c5da:	f7ff fd15 	bl	800c008 <_ntoa_long>
 800c5de:	4604      	mov	r4, r0
        format++;
 800c5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800c5e6:	e564      	b.n	800c0b2 <_vsnprintf+0x16>
        out('%', buffer, idx++, maxlen);
 800c5e8:	1c67      	adds	r7, r4, #1
 800c5ea:	462b      	mov	r3, r5
 800c5ec:	4622      	mov	r2, r4
 800c5ee:	9906      	ldr	r1, [sp, #24]
 800c5f0:	2025      	movs	r0, #37	; 0x25
 800c5f2:	47b0      	blx	r6
        format++;
 800c5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	9309      	str	r3, [sp, #36]	; 0x24
        out('%', buffer, idx++, maxlen);
 800c5fa:	463c      	mov	r4, r7
        break;
 800c5fc:	e559      	b.n	800c0b2 <_vsnprintf+0x16>

      default :
        out(*format, buffer, idx++, maxlen);
 800c5fe:	1c67      	adds	r7, r4, #1
 800c600:	462b      	mov	r3, r5
 800c602:	4622      	mov	r2, r4
 800c604:	9906      	ldr	r1, [sp, #24]
 800c606:	47b0      	blx	r6
        format++;
 800c608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c60a:	3301      	adds	r3, #1
 800c60c:	9309      	str	r3, [sp, #36]	; 0x24
        out(*format, buffer, idx++, maxlen);
 800c60e:	463c      	mov	r4, r7
        break;
 800c610:	e54f      	b.n	800c0b2 <_vsnprintf+0x16>
    out = _out_null;
 800c612:	4e07      	ldr	r6, [pc, #28]	; (800c630 <_vsnprintf+0x594>)
 800c614:	e54c      	b.n	800c0b0 <_vsnprintf+0x14>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800c616:	42ac      	cmp	r4, r5
 800c618:	d308      	bcc.n	800c62c <_vsnprintf+0x590>
 800c61a:	1e6a      	subs	r2, r5, #1
 800c61c:	462b      	mov	r3, r5
 800c61e:	9906      	ldr	r1, [sp, #24]
 800c620:	2000      	movs	r0, #0
 800c622:	47b0      	blx	r6

  // return written chars without terminating \0
  return (int)idx;
}
 800c624:	4620      	mov	r0, r4
 800c626:	b00b      	add	sp, #44	; 0x2c
 800c628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800c62c:	4622      	mov	r2, r4
 800c62e:	e7f5      	b.n	800c61c <_vsnprintf+0x580>
 800c630:	0800be37 	.word	0x0800be37

0800c634 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 800c634:	b40e      	push	{r1, r2, r3}
 800c636:	b500      	push	{lr}
 800c638:	b084      	sub	sp, #16
 800c63a:	aa05      	add	r2, sp, #20
 800c63c:	f852 3b04 	ldr.w	r3, [r2], #4
  va_list va;
  va_start(va, format);
 800c640:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800c642:	9200      	str	r2, [sp, #0]
 800c644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c648:	4601      	mov	r1, r0
 800c64a:	4804      	ldr	r0, [pc, #16]	; (800c65c <sprintf_+0x28>)
 800c64c:	f7ff fd26 	bl	800c09c <_vsnprintf>
  va_end(va);
  return ret;
}
 800c650:	b004      	add	sp, #16
 800c652:	f85d eb04 	ldr.w	lr, [sp], #4
 800c656:	b003      	add	sp, #12
 800c658:	4770      	bx	lr
 800c65a:	bf00      	nop
 800c65c:	0800be2f 	.word	0x0800be2f

0800c660 <__errno>:
 800c660:	4b01      	ldr	r3, [pc, #4]	; (800c668 <__errno+0x8>)
 800c662:	6818      	ldr	r0, [r3, #0]
 800c664:	4770      	bx	lr
 800c666:	bf00      	nop
 800c668:	2000006c 	.word	0x2000006c

0800c66c <__libc_init_array>:
 800c66c:	b570      	push	{r4, r5, r6, lr}
 800c66e:	4e0d      	ldr	r6, [pc, #52]	; (800c6a4 <__libc_init_array+0x38>)
 800c670:	4c0d      	ldr	r4, [pc, #52]	; (800c6a8 <__libc_init_array+0x3c>)
 800c672:	1ba4      	subs	r4, r4, r6
 800c674:	10a4      	asrs	r4, r4, #2
 800c676:	2500      	movs	r5, #0
 800c678:	42a5      	cmp	r5, r4
 800c67a:	d109      	bne.n	800c690 <__libc_init_array+0x24>
 800c67c:	4e0b      	ldr	r6, [pc, #44]	; (800c6ac <__libc_init_array+0x40>)
 800c67e:	4c0c      	ldr	r4, [pc, #48]	; (800c6b0 <__libc_init_array+0x44>)
 800c680:	f000 fc58 	bl	800cf34 <_init>
 800c684:	1ba4      	subs	r4, r4, r6
 800c686:	10a4      	asrs	r4, r4, #2
 800c688:	2500      	movs	r5, #0
 800c68a:	42a5      	cmp	r5, r4
 800c68c:	d105      	bne.n	800c69a <__libc_init_array+0x2e>
 800c68e:	bd70      	pop	{r4, r5, r6, pc}
 800c690:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c694:	4798      	blx	r3
 800c696:	3501      	adds	r5, #1
 800c698:	e7ee      	b.n	800c678 <__libc_init_array+0xc>
 800c69a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c69e:	4798      	blx	r3
 800c6a0:	3501      	adds	r5, #1
 800c6a2:	e7f2      	b.n	800c68a <__libc_init_array+0x1e>
 800c6a4:	0800e134 	.word	0x0800e134
 800c6a8:	0800e134 	.word	0x0800e134
 800c6ac:	0800e134 	.word	0x0800e134
 800c6b0:	0800e138 	.word	0x0800e138

0800c6b4 <memcpy>:
 800c6b4:	b510      	push	{r4, lr}
 800c6b6:	1e43      	subs	r3, r0, #1
 800c6b8:	440a      	add	r2, r1
 800c6ba:	4291      	cmp	r1, r2
 800c6bc:	d100      	bne.n	800c6c0 <memcpy+0xc>
 800c6be:	bd10      	pop	{r4, pc}
 800c6c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6c8:	e7f7      	b.n	800c6ba <memcpy+0x6>

0800c6ca <memset>:
 800c6ca:	4402      	add	r2, r0
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d100      	bne.n	800c6d4 <memset+0xa>
 800c6d2:	4770      	bx	lr
 800c6d4:	f803 1b01 	strb.w	r1, [r3], #1
 800c6d8:	e7f9      	b.n	800c6ce <memset+0x4>
	...

0800c6dc <siprintf>:
 800c6dc:	b40e      	push	{r1, r2, r3}
 800c6de:	b500      	push	{lr}
 800c6e0:	b09c      	sub	sp, #112	; 0x70
 800c6e2:	ab1d      	add	r3, sp, #116	; 0x74
 800c6e4:	9002      	str	r0, [sp, #8]
 800c6e6:	9006      	str	r0, [sp, #24]
 800c6e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c6ec:	4809      	ldr	r0, [pc, #36]	; (800c714 <siprintf+0x38>)
 800c6ee:	9107      	str	r1, [sp, #28]
 800c6f0:	9104      	str	r1, [sp, #16]
 800c6f2:	4909      	ldr	r1, [pc, #36]	; (800c718 <siprintf+0x3c>)
 800c6f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6f8:	9105      	str	r1, [sp, #20]
 800c6fa:	6800      	ldr	r0, [r0, #0]
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	a902      	add	r1, sp, #8
 800c700:	f000 f896 	bl	800c830 <_svfiprintf_r>
 800c704:	9b02      	ldr	r3, [sp, #8]
 800c706:	2200      	movs	r2, #0
 800c708:	701a      	strb	r2, [r3, #0]
 800c70a:	b01c      	add	sp, #112	; 0x70
 800c70c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c710:	b003      	add	sp, #12
 800c712:	4770      	bx	lr
 800c714:	2000006c 	.word	0x2000006c
 800c718:	ffff0208 	.word	0xffff0208

0800c71c <strcpy>:
 800c71c:	4603      	mov	r3, r0
 800c71e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c722:	f803 2b01 	strb.w	r2, [r3], #1
 800c726:	2a00      	cmp	r2, #0
 800c728:	d1f9      	bne.n	800c71e <strcpy+0x2>
 800c72a:	4770      	bx	lr

0800c72c <strncmp>:
 800c72c:	b510      	push	{r4, lr}
 800c72e:	b16a      	cbz	r2, 800c74c <strncmp+0x20>
 800c730:	3901      	subs	r1, #1
 800c732:	1884      	adds	r4, r0, r2
 800c734:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c738:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d103      	bne.n	800c748 <strncmp+0x1c>
 800c740:	42a0      	cmp	r0, r4
 800c742:	d001      	beq.n	800c748 <strncmp+0x1c>
 800c744:	2b00      	cmp	r3, #0
 800c746:	d1f5      	bne.n	800c734 <strncmp+0x8>
 800c748:	1a98      	subs	r0, r3, r2
 800c74a:	bd10      	pop	{r4, pc}
 800c74c:	4610      	mov	r0, r2
 800c74e:	e7fc      	b.n	800c74a <strncmp+0x1e>

0800c750 <strncpy>:
 800c750:	b570      	push	{r4, r5, r6, lr}
 800c752:	3901      	subs	r1, #1
 800c754:	4604      	mov	r4, r0
 800c756:	b902      	cbnz	r2, 800c75a <strncpy+0xa>
 800c758:	bd70      	pop	{r4, r5, r6, pc}
 800c75a:	4623      	mov	r3, r4
 800c75c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800c760:	f803 5b01 	strb.w	r5, [r3], #1
 800c764:	1e56      	subs	r6, r2, #1
 800c766:	b92d      	cbnz	r5, 800c774 <strncpy+0x24>
 800c768:	4414      	add	r4, r2
 800c76a:	42a3      	cmp	r3, r4
 800c76c:	d0f4      	beq.n	800c758 <strncpy+0x8>
 800c76e:	f803 5b01 	strb.w	r5, [r3], #1
 800c772:	e7fa      	b.n	800c76a <strncpy+0x1a>
 800c774:	461c      	mov	r4, r3
 800c776:	4632      	mov	r2, r6
 800c778:	e7ed      	b.n	800c756 <strncpy+0x6>

0800c77a <__ssputs_r>:
 800c77a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c77e:	688e      	ldr	r6, [r1, #8]
 800c780:	429e      	cmp	r6, r3
 800c782:	4682      	mov	sl, r0
 800c784:	460c      	mov	r4, r1
 800c786:	4690      	mov	r8, r2
 800c788:	4699      	mov	r9, r3
 800c78a:	d837      	bhi.n	800c7fc <__ssputs_r+0x82>
 800c78c:	898a      	ldrh	r2, [r1, #12]
 800c78e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c792:	d031      	beq.n	800c7f8 <__ssputs_r+0x7e>
 800c794:	6825      	ldr	r5, [r4, #0]
 800c796:	6909      	ldr	r1, [r1, #16]
 800c798:	1a6f      	subs	r7, r5, r1
 800c79a:	6965      	ldr	r5, [r4, #20]
 800c79c:	2302      	movs	r3, #2
 800c79e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7a2:	fb95 f5f3 	sdiv	r5, r5, r3
 800c7a6:	f109 0301 	add.w	r3, r9, #1
 800c7aa:	443b      	add	r3, r7
 800c7ac:	429d      	cmp	r5, r3
 800c7ae:	bf38      	it	cc
 800c7b0:	461d      	movcc	r5, r3
 800c7b2:	0553      	lsls	r3, r2, #21
 800c7b4:	d530      	bpl.n	800c818 <__ssputs_r+0x9e>
 800c7b6:	4629      	mov	r1, r5
 800c7b8:	f000 fb22 	bl	800ce00 <_malloc_r>
 800c7bc:	4606      	mov	r6, r0
 800c7be:	b950      	cbnz	r0, 800c7d6 <__ssputs_r+0x5c>
 800c7c0:	230c      	movs	r3, #12
 800c7c2:	f8ca 3000 	str.w	r3, [sl]
 800c7c6:	89a3      	ldrh	r3, [r4, #12]
 800c7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7cc:	81a3      	strh	r3, [r4, #12]
 800c7ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7d6:	463a      	mov	r2, r7
 800c7d8:	6921      	ldr	r1, [r4, #16]
 800c7da:	f7ff ff6b 	bl	800c6b4 <memcpy>
 800c7de:	89a3      	ldrh	r3, [r4, #12]
 800c7e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7e8:	81a3      	strh	r3, [r4, #12]
 800c7ea:	6126      	str	r6, [r4, #16]
 800c7ec:	6165      	str	r5, [r4, #20]
 800c7ee:	443e      	add	r6, r7
 800c7f0:	1bed      	subs	r5, r5, r7
 800c7f2:	6026      	str	r6, [r4, #0]
 800c7f4:	60a5      	str	r5, [r4, #8]
 800c7f6:	464e      	mov	r6, r9
 800c7f8:	454e      	cmp	r6, r9
 800c7fa:	d900      	bls.n	800c7fe <__ssputs_r+0x84>
 800c7fc:	464e      	mov	r6, r9
 800c7fe:	4632      	mov	r2, r6
 800c800:	4641      	mov	r1, r8
 800c802:	6820      	ldr	r0, [r4, #0]
 800c804:	f000 fa94 	bl	800cd30 <memmove>
 800c808:	68a3      	ldr	r3, [r4, #8]
 800c80a:	1b9b      	subs	r3, r3, r6
 800c80c:	60a3      	str	r3, [r4, #8]
 800c80e:	6823      	ldr	r3, [r4, #0]
 800c810:	441e      	add	r6, r3
 800c812:	6026      	str	r6, [r4, #0]
 800c814:	2000      	movs	r0, #0
 800c816:	e7dc      	b.n	800c7d2 <__ssputs_r+0x58>
 800c818:	462a      	mov	r2, r5
 800c81a:	f000 fb4b 	bl	800ceb4 <_realloc_r>
 800c81e:	4606      	mov	r6, r0
 800c820:	2800      	cmp	r0, #0
 800c822:	d1e2      	bne.n	800c7ea <__ssputs_r+0x70>
 800c824:	6921      	ldr	r1, [r4, #16]
 800c826:	4650      	mov	r0, sl
 800c828:	f000 fa9c 	bl	800cd64 <_free_r>
 800c82c:	e7c8      	b.n	800c7c0 <__ssputs_r+0x46>
	...

0800c830 <_svfiprintf_r>:
 800c830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c834:	461d      	mov	r5, r3
 800c836:	898b      	ldrh	r3, [r1, #12]
 800c838:	061f      	lsls	r7, r3, #24
 800c83a:	b09d      	sub	sp, #116	; 0x74
 800c83c:	4680      	mov	r8, r0
 800c83e:	460c      	mov	r4, r1
 800c840:	4616      	mov	r6, r2
 800c842:	d50f      	bpl.n	800c864 <_svfiprintf_r+0x34>
 800c844:	690b      	ldr	r3, [r1, #16]
 800c846:	b96b      	cbnz	r3, 800c864 <_svfiprintf_r+0x34>
 800c848:	2140      	movs	r1, #64	; 0x40
 800c84a:	f000 fad9 	bl	800ce00 <_malloc_r>
 800c84e:	6020      	str	r0, [r4, #0]
 800c850:	6120      	str	r0, [r4, #16]
 800c852:	b928      	cbnz	r0, 800c860 <_svfiprintf_r+0x30>
 800c854:	230c      	movs	r3, #12
 800c856:	f8c8 3000 	str.w	r3, [r8]
 800c85a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c85e:	e0c8      	b.n	800c9f2 <_svfiprintf_r+0x1c2>
 800c860:	2340      	movs	r3, #64	; 0x40
 800c862:	6163      	str	r3, [r4, #20]
 800c864:	2300      	movs	r3, #0
 800c866:	9309      	str	r3, [sp, #36]	; 0x24
 800c868:	2320      	movs	r3, #32
 800c86a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c86e:	2330      	movs	r3, #48	; 0x30
 800c870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c874:	9503      	str	r5, [sp, #12]
 800c876:	f04f 0b01 	mov.w	fp, #1
 800c87a:	4637      	mov	r7, r6
 800c87c:	463d      	mov	r5, r7
 800c87e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c882:	b10b      	cbz	r3, 800c888 <_svfiprintf_r+0x58>
 800c884:	2b25      	cmp	r3, #37	; 0x25
 800c886:	d13e      	bne.n	800c906 <_svfiprintf_r+0xd6>
 800c888:	ebb7 0a06 	subs.w	sl, r7, r6
 800c88c:	d00b      	beq.n	800c8a6 <_svfiprintf_r+0x76>
 800c88e:	4653      	mov	r3, sl
 800c890:	4632      	mov	r2, r6
 800c892:	4621      	mov	r1, r4
 800c894:	4640      	mov	r0, r8
 800c896:	f7ff ff70 	bl	800c77a <__ssputs_r>
 800c89a:	3001      	adds	r0, #1
 800c89c:	f000 80a4 	beq.w	800c9e8 <_svfiprintf_r+0x1b8>
 800c8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a2:	4453      	add	r3, sl
 800c8a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c8a6:	783b      	ldrb	r3, [r7, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f000 809d 	beq.w	800c9e8 <_svfiprintf_r+0x1b8>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8b8:	9304      	str	r3, [sp, #16]
 800c8ba:	9307      	str	r3, [sp, #28]
 800c8bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8c0:	931a      	str	r3, [sp, #104]	; 0x68
 800c8c2:	462f      	mov	r7, r5
 800c8c4:	2205      	movs	r2, #5
 800c8c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c8ca:	4850      	ldr	r0, [pc, #320]	; (800ca0c <_svfiprintf_r+0x1dc>)
 800c8cc:	f7f3 fc90 	bl	80001f0 <memchr>
 800c8d0:	9b04      	ldr	r3, [sp, #16]
 800c8d2:	b9d0      	cbnz	r0, 800c90a <_svfiprintf_r+0xda>
 800c8d4:	06d9      	lsls	r1, r3, #27
 800c8d6:	bf44      	itt	mi
 800c8d8:	2220      	movmi	r2, #32
 800c8da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c8de:	071a      	lsls	r2, r3, #28
 800c8e0:	bf44      	itt	mi
 800c8e2:	222b      	movmi	r2, #43	; 0x2b
 800c8e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c8e8:	782a      	ldrb	r2, [r5, #0]
 800c8ea:	2a2a      	cmp	r2, #42	; 0x2a
 800c8ec:	d015      	beq.n	800c91a <_svfiprintf_r+0xea>
 800c8ee:	9a07      	ldr	r2, [sp, #28]
 800c8f0:	462f      	mov	r7, r5
 800c8f2:	2000      	movs	r0, #0
 800c8f4:	250a      	movs	r5, #10
 800c8f6:	4639      	mov	r1, r7
 800c8f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8fc:	3b30      	subs	r3, #48	; 0x30
 800c8fe:	2b09      	cmp	r3, #9
 800c900:	d94d      	bls.n	800c99e <_svfiprintf_r+0x16e>
 800c902:	b1b8      	cbz	r0, 800c934 <_svfiprintf_r+0x104>
 800c904:	e00f      	b.n	800c926 <_svfiprintf_r+0xf6>
 800c906:	462f      	mov	r7, r5
 800c908:	e7b8      	b.n	800c87c <_svfiprintf_r+0x4c>
 800c90a:	4a40      	ldr	r2, [pc, #256]	; (800ca0c <_svfiprintf_r+0x1dc>)
 800c90c:	1a80      	subs	r0, r0, r2
 800c90e:	fa0b f000 	lsl.w	r0, fp, r0
 800c912:	4318      	orrs	r0, r3
 800c914:	9004      	str	r0, [sp, #16]
 800c916:	463d      	mov	r5, r7
 800c918:	e7d3      	b.n	800c8c2 <_svfiprintf_r+0x92>
 800c91a:	9a03      	ldr	r2, [sp, #12]
 800c91c:	1d11      	adds	r1, r2, #4
 800c91e:	6812      	ldr	r2, [r2, #0]
 800c920:	9103      	str	r1, [sp, #12]
 800c922:	2a00      	cmp	r2, #0
 800c924:	db01      	blt.n	800c92a <_svfiprintf_r+0xfa>
 800c926:	9207      	str	r2, [sp, #28]
 800c928:	e004      	b.n	800c934 <_svfiprintf_r+0x104>
 800c92a:	4252      	negs	r2, r2
 800c92c:	f043 0302 	orr.w	r3, r3, #2
 800c930:	9207      	str	r2, [sp, #28]
 800c932:	9304      	str	r3, [sp, #16]
 800c934:	783b      	ldrb	r3, [r7, #0]
 800c936:	2b2e      	cmp	r3, #46	; 0x2e
 800c938:	d10c      	bne.n	800c954 <_svfiprintf_r+0x124>
 800c93a:	787b      	ldrb	r3, [r7, #1]
 800c93c:	2b2a      	cmp	r3, #42	; 0x2a
 800c93e:	d133      	bne.n	800c9a8 <_svfiprintf_r+0x178>
 800c940:	9b03      	ldr	r3, [sp, #12]
 800c942:	1d1a      	adds	r2, r3, #4
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	9203      	str	r2, [sp, #12]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	bfb8      	it	lt
 800c94c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c950:	3702      	adds	r7, #2
 800c952:	9305      	str	r3, [sp, #20]
 800c954:	4d2e      	ldr	r5, [pc, #184]	; (800ca10 <_svfiprintf_r+0x1e0>)
 800c956:	7839      	ldrb	r1, [r7, #0]
 800c958:	2203      	movs	r2, #3
 800c95a:	4628      	mov	r0, r5
 800c95c:	f7f3 fc48 	bl	80001f0 <memchr>
 800c960:	b138      	cbz	r0, 800c972 <_svfiprintf_r+0x142>
 800c962:	2340      	movs	r3, #64	; 0x40
 800c964:	1b40      	subs	r0, r0, r5
 800c966:	fa03 f000 	lsl.w	r0, r3, r0
 800c96a:	9b04      	ldr	r3, [sp, #16]
 800c96c:	4303      	orrs	r3, r0
 800c96e:	3701      	adds	r7, #1
 800c970:	9304      	str	r3, [sp, #16]
 800c972:	7839      	ldrb	r1, [r7, #0]
 800c974:	4827      	ldr	r0, [pc, #156]	; (800ca14 <_svfiprintf_r+0x1e4>)
 800c976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c97a:	2206      	movs	r2, #6
 800c97c:	1c7e      	adds	r6, r7, #1
 800c97e:	f7f3 fc37 	bl	80001f0 <memchr>
 800c982:	2800      	cmp	r0, #0
 800c984:	d038      	beq.n	800c9f8 <_svfiprintf_r+0x1c8>
 800c986:	4b24      	ldr	r3, [pc, #144]	; (800ca18 <_svfiprintf_r+0x1e8>)
 800c988:	bb13      	cbnz	r3, 800c9d0 <_svfiprintf_r+0x1a0>
 800c98a:	9b03      	ldr	r3, [sp, #12]
 800c98c:	3307      	adds	r3, #7
 800c98e:	f023 0307 	bic.w	r3, r3, #7
 800c992:	3308      	adds	r3, #8
 800c994:	9303      	str	r3, [sp, #12]
 800c996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c998:	444b      	add	r3, r9
 800c99a:	9309      	str	r3, [sp, #36]	; 0x24
 800c99c:	e76d      	b.n	800c87a <_svfiprintf_r+0x4a>
 800c99e:	fb05 3202 	mla	r2, r5, r2, r3
 800c9a2:	2001      	movs	r0, #1
 800c9a4:	460f      	mov	r7, r1
 800c9a6:	e7a6      	b.n	800c8f6 <_svfiprintf_r+0xc6>
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	3701      	adds	r7, #1
 800c9ac:	9305      	str	r3, [sp, #20]
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	250a      	movs	r5, #10
 800c9b2:	4638      	mov	r0, r7
 800c9b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9b8:	3a30      	subs	r2, #48	; 0x30
 800c9ba:	2a09      	cmp	r2, #9
 800c9bc:	d903      	bls.n	800c9c6 <_svfiprintf_r+0x196>
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d0c8      	beq.n	800c954 <_svfiprintf_r+0x124>
 800c9c2:	9105      	str	r1, [sp, #20]
 800c9c4:	e7c6      	b.n	800c954 <_svfiprintf_r+0x124>
 800c9c6:	fb05 2101 	mla	r1, r5, r1, r2
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	4607      	mov	r7, r0
 800c9ce:	e7f0      	b.n	800c9b2 <_svfiprintf_r+0x182>
 800c9d0:	ab03      	add	r3, sp, #12
 800c9d2:	9300      	str	r3, [sp, #0]
 800c9d4:	4622      	mov	r2, r4
 800c9d6:	4b11      	ldr	r3, [pc, #68]	; (800ca1c <_svfiprintf_r+0x1ec>)
 800c9d8:	a904      	add	r1, sp, #16
 800c9da:	4640      	mov	r0, r8
 800c9dc:	f3af 8000 	nop.w
 800c9e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c9e4:	4681      	mov	r9, r0
 800c9e6:	d1d6      	bne.n	800c996 <_svfiprintf_r+0x166>
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	065b      	lsls	r3, r3, #25
 800c9ec:	f53f af35 	bmi.w	800c85a <_svfiprintf_r+0x2a>
 800c9f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9f2:	b01d      	add	sp, #116	; 0x74
 800c9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f8:	ab03      	add	r3, sp, #12
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	4622      	mov	r2, r4
 800c9fe:	4b07      	ldr	r3, [pc, #28]	; (800ca1c <_svfiprintf_r+0x1ec>)
 800ca00:	a904      	add	r1, sp, #16
 800ca02:	4640      	mov	r0, r8
 800ca04:	f000 f882 	bl	800cb0c <_printf_i>
 800ca08:	e7ea      	b.n	800c9e0 <_svfiprintf_r+0x1b0>
 800ca0a:	bf00      	nop
 800ca0c:	0800e0f8 	.word	0x0800e0f8
 800ca10:	0800e0fe 	.word	0x0800e0fe
 800ca14:	0800e102 	.word	0x0800e102
 800ca18:	00000000 	.word	0x00000000
 800ca1c:	0800c77b 	.word	0x0800c77b

0800ca20 <_printf_common>:
 800ca20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca24:	4691      	mov	r9, r2
 800ca26:	461f      	mov	r7, r3
 800ca28:	688a      	ldr	r2, [r1, #8]
 800ca2a:	690b      	ldr	r3, [r1, #16]
 800ca2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca30:	4293      	cmp	r3, r2
 800ca32:	bfb8      	it	lt
 800ca34:	4613      	movlt	r3, r2
 800ca36:	f8c9 3000 	str.w	r3, [r9]
 800ca3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca3e:	4606      	mov	r6, r0
 800ca40:	460c      	mov	r4, r1
 800ca42:	b112      	cbz	r2, 800ca4a <_printf_common+0x2a>
 800ca44:	3301      	adds	r3, #1
 800ca46:	f8c9 3000 	str.w	r3, [r9]
 800ca4a:	6823      	ldr	r3, [r4, #0]
 800ca4c:	0699      	lsls	r1, r3, #26
 800ca4e:	bf42      	ittt	mi
 800ca50:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ca54:	3302      	addmi	r3, #2
 800ca56:	f8c9 3000 	strmi.w	r3, [r9]
 800ca5a:	6825      	ldr	r5, [r4, #0]
 800ca5c:	f015 0506 	ands.w	r5, r5, #6
 800ca60:	d107      	bne.n	800ca72 <_printf_common+0x52>
 800ca62:	f104 0a19 	add.w	sl, r4, #25
 800ca66:	68e3      	ldr	r3, [r4, #12]
 800ca68:	f8d9 2000 	ldr.w	r2, [r9]
 800ca6c:	1a9b      	subs	r3, r3, r2
 800ca6e:	42ab      	cmp	r3, r5
 800ca70:	dc28      	bgt.n	800cac4 <_printf_common+0xa4>
 800ca72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ca76:	6822      	ldr	r2, [r4, #0]
 800ca78:	3300      	adds	r3, #0
 800ca7a:	bf18      	it	ne
 800ca7c:	2301      	movne	r3, #1
 800ca7e:	0692      	lsls	r2, r2, #26
 800ca80:	d42d      	bmi.n	800cade <_printf_common+0xbe>
 800ca82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca86:	4639      	mov	r1, r7
 800ca88:	4630      	mov	r0, r6
 800ca8a:	47c0      	blx	r8
 800ca8c:	3001      	adds	r0, #1
 800ca8e:	d020      	beq.n	800cad2 <_printf_common+0xb2>
 800ca90:	6823      	ldr	r3, [r4, #0]
 800ca92:	68e5      	ldr	r5, [r4, #12]
 800ca94:	f8d9 2000 	ldr.w	r2, [r9]
 800ca98:	f003 0306 	and.w	r3, r3, #6
 800ca9c:	2b04      	cmp	r3, #4
 800ca9e:	bf08      	it	eq
 800caa0:	1aad      	subeq	r5, r5, r2
 800caa2:	68a3      	ldr	r3, [r4, #8]
 800caa4:	6922      	ldr	r2, [r4, #16]
 800caa6:	bf0c      	ite	eq
 800caa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800caac:	2500      	movne	r5, #0
 800caae:	4293      	cmp	r3, r2
 800cab0:	bfc4      	itt	gt
 800cab2:	1a9b      	subgt	r3, r3, r2
 800cab4:	18ed      	addgt	r5, r5, r3
 800cab6:	f04f 0900 	mov.w	r9, #0
 800caba:	341a      	adds	r4, #26
 800cabc:	454d      	cmp	r5, r9
 800cabe:	d11a      	bne.n	800caf6 <_printf_common+0xd6>
 800cac0:	2000      	movs	r0, #0
 800cac2:	e008      	b.n	800cad6 <_printf_common+0xb6>
 800cac4:	2301      	movs	r3, #1
 800cac6:	4652      	mov	r2, sl
 800cac8:	4639      	mov	r1, r7
 800caca:	4630      	mov	r0, r6
 800cacc:	47c0      	blx	r8
 800cace:	3001      	adds	r0, #1
 800cad0:	d103      	bne.n	800cada <_printf_common+0xba>
 800cad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cada:	3501      	adds	r5, #1
 800cadc:	e7c3      	b.n	800ca66 <_printf_common+0x46>
 800cade:	18e1      	adds	r1, r4, r3
 800cae0:	1c5a      	adds	r2, r3, #1
 800cae2:	2030      	movs	r0, #48	; 0x30
 800cae4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cae8:	4422      	add	r2, r4
 800caea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800caee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800caf2:	3302      	adds	r3, #2
 800caf4:	e7c5      	b.n	800ca82 <_printf_common+0x62>
 800caf6:	2301      	movs	r3, #1
 800caf8:	4622      	mov	r2, r4
 800cafa:	4639      	mov	r1, r7
 800cafc:	4630      	mov	r0, r6
 800cafe:	47c0      	blx	r8
 800cb00:	3001      	adds	r0, #1
 800cb02:	d0e6      	beq.n	800cad2 <_printf_common+0xb2>
 800cb04:	f109 0901 	add.w	r9, r9, #1
 800cb08:	e7d8      	b.n	800cabc <_printf_common+0x9c>
	...

0800cb0c <_printf_i>:
 800cb0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cb14:	460c      	mov	r4, r1
 800cb16:	7e09      	ldrb	r1, [r1, #24]
 800cb18:	b085      	sub	sp, #20
 800cb1a:	296e      	cmp	r1, #110	; 0x6e
 800cb1c:	4617      	mov	r7, r2
 800cb1e:	4606      	mov	r6, r0
 800cb20:	4698      	mov	r8, r3
 800cb22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb24:	f000 80b3 	beq.w	800cc8e <_printf_i+0x182>
 800cb28:	d822      	bhi.n	800cb70 <_printf_i+0x64>
 800cb2a:	2963      	cmp	r1, #99	; 0x63
 800cb2c:	d036      	beq.n	800cb9c <_printf_i+0x90>
 800cb2e:	d80a      	bhi.n	800cb46 <_printf_i+0x3a>
 800cb30:	2900      	cmp	r1, #0
 800cb32:	f000 80b9 	beq.w	800cca8 <_printf_i+0x19c>
 800cb36:	2958      	cmp	r1, #88	; 0x58
 800cb38:	f000 8083 	beq.w	800cc42 <_printf_i+0x136>
 800cb3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cb44:	e032      	b.n	800cbac <_printf_i+0xa0>
 800cb46:	2964      	cmp	r1, #100	; 0x64
 800cb48:	d001      	beq.n	800cb4e <_printf_i+0x42>
 800cb4a:	2969      	cmp	r1, #105	; 0x69
 800cb4c:	d1f6      	bne.n	800cb3c <_printf_i+0x30>
 800cb4e:	6820      	ldr	r0, [r4, #0]
 800cb50:	6813      	ldr	r3, [r2, #0]
 800cb52:	0605      	lsls	r5, r0, #24
 800cb54:	f103 0104 	add.w	r1, r3, #4
 800cb58:	d52a      	bpl.n	800cbb0 <_printf_i+0xa4>
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	6011      	str	r1, [r2, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	da03      	bge.n	800cb6a <_printf_i+0x5e>
 800cb62:	222d      	movs	r2, #45	; 0x2d
 800cb64:	425b      	negs	r3, r3
 800cb66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cb6a:	486f      	ldr	r0, [pc, #444]	; (800cd28 <_printf_i+0x21c>)
 800cb6c:	220a      	movs	r2, #10
 800cb6e:	e039      	b.n	800cbe4 <_printf_i+0xd8>
 800cb70:	2973      	cmp	r1, #115	; 0x73
 800cb72:	f000 809d 	beq.w	800ccb0 <_printf_i+0x1a4>
 800cb76:	d808      	bhi.n	800cb8a <_printf_i+0x7e>
 800cb78:	296f      	cmp	r1, #111	; 0x6f
 800cb7a:	d020      	beq.n	800cbbe <_printf_i+0xb2>
 800cb7c:	2970      	cmp	r1, #112	; 0x70
 800cb7e:	d1dd      	bne.n	800cb3c <_printf_i+0x30>
 800cb80:	6823      	ldr	r3, [r4, #0]
 800cb82:	f043 0320 	orr.w	r3, r3, #32
 800cb86:	6023      	str	r3, [r4, #0]
 800cb88:	e003      	b.n	800cb92 <_printf_i+0x86>
 800cb8a:	2975      	cmp	r1, #117	; 0x75
 800cb8c:	d017      	beq.n	800cbbe <_printf_i+0xb2>
 800cb8e:	2978      	cmp	r1, #120	; 0x78
 800cb90:	d1d4      	bne.n	800cb3c <_printf_i+0x30>
 800cb92:	2378      	movs	r3, #120	; 0x78
 800cb94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb98:	4864      	ldr	r0, [pc, #400]	; (800cd2c <_printf_i+0x220>)
 800cb9a:	e055      	b.n	800cc48 <_printf_i+0x13c>
 800cb9c:	6813      	ldr	r3, [r2, #0]
 800cb9e:	1d19      	adds	r1, r3, #4
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	6011      	str	r1, [r2, #0]
 800cba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbac:	2301      	movs	r3, #1
 800cbae:	e08c      	b.n	800ccca <_printf_i+0x1be>
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	6011      	str	r1, [r2, #0]
 800cbb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cbb8:	bf18      	it	ne
 800cbba:	b21b      	sxthne	r3, r3
 800cbbc:	e7cf      	b.n	800cb5e <_printf_i+0x52>
 800cbbe:	6813      	ldr	r3, [r2, #0]
 800cbc0:	6825      	ldr	r5, [r4, #0]
 800cbc2:	1d18      	adds	r0, r3, #4
 800cbc4:	6010      	str	r0, [r2, #0]
 800cbc6:	0628      	lsls	r0, r5, #24
 800cbc8:	d501      	bpl.n	800cbce <_printf_i+0xc2>
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	e002      	b.n	800cbd4 <_printf_i+0xc8>
 800cbce:	0668      	lsls	r0, r5, #25
 800cbd0:	d5fb      	bpl.n	800cbca <_printf_i+0xbe>
 800cbd2:	881b      	ldrh	r3, [r3, #0]
 800cbd4:	4854      	ldr	r0, [pc, #336]	; (800cd28 <_printf_i+0x21c>)
 800cbd6:	296f      	cmp	r1, #111	; 0x6f
 800cbd8:	bf14      	ite	ne
 800cbda:	220a      	movne	r2, #10
 800cbdc:	2208      	moveq	r2, #8
 800cbde:	2100      	movs	r1, #0
 800cbe0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbe4:	6865      	ldr	r5, [r4, #4]
 800cbe6:	60a5      	str	r5, [r4, #8]
 800cbe8:	2d00      	cmp	r5, #0
 800cbea:	f2c0 8095 	blt.w	800cd18 <_printf_i+0x20c>
 800cbee:	6821      	ldr	r1, [r4, #0]
 800cbf0:	f021 0104 	bic.w	r1, r1, #4
 800cbf4:	6021      	str	r1, [r4, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d13d      	bne.n	800cc76 <_printf_i+0x16a>
 800cbfa:	2d00      	cmp	r5, #0
 800cbfc:	f040 808e 	bne.w	800cd1c <_printf_i+0x210>
 800cc00:	4665      	mov	r5, ip
 800cc02:	2a08      	cmp	r2, #8
 800cc04:	d10b      	bne.n	800cc1e <_printf_i+0x112>
 800cc06:	6823      	ldr	r3, [r4, #0]
 800cc08:	07db      	lsls	r3, r3, #31
 800cc0a:	d508      	bpl.n	800cc1e <_printf_i+0x112>
 800cc0c:	6923      	ldr	r3, [r4, #16]
 800cc0e:	6862      	ldr	r2, [r4, #4]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	bfde      	ittt	le
 800cc14:	2330      	movle	r3, #48	; 0x30
 800cc16:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc1a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cc1e:	ebac 0305 	sub.w	r3, ip, r5
 800cc22:	6123      	str	r3, [r4, #16]
 800cc24:	f8cd 8000 	str.w	r8, [sp]
 800cc28:	463b      	mov	r3, r7
 800cc2a:	aa03      	add	r2, sp, #12
 800cc2c:	4621      	mov	r1, r4
 800cc2e:	4630      	mov	r0, r6
 800cc30:	f7ff fef6 	bl	800ca20 <_printf_common>
 800cc34:	3001      	adds	r0, #1
 800cc36:	d14d      	bne.n	800ccd4 <_printf_i+0x1c8>
 800cc38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc3c:	b005      	add	sp, #20
 800cc3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc42:	4839      	ldr	r0, [pc, #228]	; (800cd28 <_printf_i+0x21c>)
 800cc44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cc48:	6813      	ldr	r3, [r2, #0]
 800cc4a:	6821      	ldr	r1, [r4, #0]
 800cc4c:	1d1d      	adds	r5, r3, #4
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	6015      	str	r5, [r2, #0]
 800cc52:	060a      	lsls	r2, r1, #24
 800cc54:	d50b      	bpl.n	800cc6e <_printf_i+0x162>
 800cc56:	07ca      	lsls	r2, r1, #31
 800cc58:	bf44      	itt	mi
 800cc5a:	f041 0120 	orrmi.w	r1, r1, #32
 800cc5e:	6021      	strmi	r1, [r4, #0]
 800cc60:	b91b      	cbnz	r3, 800cc6a <_printf_i+0x15e>
 800cc62:	6822      	ldr	r2, [r4, #0]
 800cc64:	f022 0220 	bic.w	r2, r2, #32
 800cc68:	6022      	str	r2, [r4, #0]
 800cc6a:	2210      	movs	r2, #16
 800cc6c:	e7b7      	b.n	800cbde <_printf_i+0xd2>
 800cc6e:	064d      	lsls	r5, r1, #25
 800cc70:	bf48      	it	mi
 800cc72:	b29b      	uxthmi	r3, r3
 800cc74:	e7ef      	b.n	800cc56 <_printf_i+0x14a>
 800cc76:	4665      	mov	r5, ip
 800cc78:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc7c:	fb02 3311 	mls	r3, r2, r1, r3
 800cc80:	5cc3      	ldrb	r3, [r0, r3]
 800cc82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cc86:	460b      	mov	r3, r1
 800cc88:	2900      	cmp	r1, #0
 800cc8a:	d1f5      	bne.n	800cc78 <_printf_i+0x16c>
 800cc8c:	e7b9      	b.n	800cc02 <_printf_i+0xf6>
 800cc8e:	6813      	ldr	r3, [r2, #0]
 800cc90:	6825      	ldr	r5, [r4, #0]
 800cc92:	6961      	ldr	r1, [r4, #20]
 800cc94:	1d18      	adds	r0, r3, #4
 800cc96:	6010      	str	r0, [r2, #0]
 800cc98:	0628      	lsls	r0, r5, #24
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	d501      	bpl.n	800cca2 <_printf_i+0x196>
 800cc9e:	6019      	str	r1, [r3, #0]
 800cca0:	e002      	b.n	800cca8 <_printf_i+0x19c>
 800cca2:	066a      	lsls	r2, r5, #25
 800cca4:	d5fb      	bpl.n	800cc9e <_printf_i+0x192>
 800cca6:	8019      	strh	r1, [r3, #0]
 800cca8:	2300      	movs	r3, #0
 800ccaa:	6123      	str	r3, [r4, #16]
 800ccac:	4665      	mov	r5, ip
 800ccae:	e7b9      	b.n	800cc24 <_printf_i+0x118>
 800ccb0:	6813      	ldr	r3, [r2, #0]
 800ccb2:	1d19      	adds	r1, r3, #4
 800ccb4:	6011      	str	r1, [r2, #0]
 800ccb6:	681d      	ldr	r5, [r3, #0]
 800ccb8:	6862      	ldr	r2, [r4, #4]
 800ccba:	2100      	movs	r1, #0
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	f7f3 fa97 	bl	80001f0 <memchr>
 800ccc2:	b108      	cbz	r0, 800ccc8 <_printf_i+0x1bc>
 800ccc4:	1b40      	subs	r0, r0, r5
 800ccc6:	6060      	str	r0, [r4, #4]
 800ccc8:	6863      	ldr	r3, [r4, #4]
 800ccca:	6123      	str	r3, [r4, #16]
 800cccc:	2300      	movs	r3, #0
 800ccce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccd2:	e7a7      	b.n	800cc24 <_printf_i+0x118>
 800ccd4:	6923      	ldr	r3, [r4, #16]
 800ccd6:	462a      	mov	r2, r5
 800ccd8:	4639      	mov	r1, r7
 800ccda:	4630      	mov	r0, r6
 800ccdc:	47c0      	blx	r8
 800ccde:	3001      	adds	r0, #1
 800cce0:	d0aa      	beq.n	800cc38 <_printf_i+0x12c>
 800cce2:	6823      	ldr	r3, [r4, #0]
 800cce4:	079b      	lsls	r3, r3, #30
 800cce6:	d413      	bmi.n	800cd10 <_printf_i+0x204>
 800cce8:	68e0      	ldr	r0, [r4, #12]
 800ccea:	9b03      	ldr	r3, [sp, #12]
 800ccec:	4298      	cmp	r0, r3
 800ccee:	bfb8      	it	lt
 800ccf0:	4618      	movlt	r0, r3
 800ccf2:	e7a3      	b.n	800cc3c <_printf_i+0x130>
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	464a      	mov	r2, r9
 800ccf8:	4639      	mov	r1, r7
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	47c0      	blx	r8
 800ccfe:	3001      	adds	r0, #1
 800cd00:	d09a      	beq.n	800cc38 <_printf_i+0x12c>
 800cd02:	3501      	adds	r5, #1
 800cd04:	68e3      	ldr	r3, [r4, #12]
 800cd06:	9a03      	ldr	r2, [sp, #12]
 800cd08:	1a9b      	subs	r3, r3, r2
 800cd0a:	42ab      	cmp	r3, r5
 800cd0c:	dcf2      	bgt.n	800ccf4 <_printf_i+0x1e8>
 800cd0e:	e7eb      	b.n	800cce8 <_printf_i+0x1dc>
 800cd10:	2500      	movs	r5, #0
 800cd12:	f104 0919 	add.w	r9, r4, #25
 800cd16:	e7f5      	b.n	800cd04 <_printf_i+0x1f8>
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d1ac      	bne.n	800cc76 <_printf_i+0x16a>
 800cd1c:	7803      	ldrb	r3, [r0, #0]
 800cd1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd26:	e76c      	b.n	800cc02 <_printf_i+0xf6>
 800cd28:	0800e109 	.word	0x0800e109
 800cd2c:	0800e11a 	.word	0x0800e11a

0800cd30 <memmove>:
 800cd30:	4288      	cmp	r0, r1
 800cd32:	b510      	push	{r4, lr}
 800cd34:	eb01 0302 	add.w	r3, r1, r2
 800cd38:	d807      	bhi.n	800cd4a <memmove+0x1a>
 800cd3a:	1e42      	subs	r2, r0, #1
 800cd3c:	4299      	cmp	r1, r3
 800cd3e:	d00a      	beq.n	800cd56 <memmove+0x26>
 800cd40:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd44:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cd48:	e7f8      	b.n	800cd3c <memmove+0xc>
 800cd4a:	4283      	cmp	r3, r0
 800cd4c:	d9f5      	bls.n	800cd3a <memmove+0xa>
 800cd4e:	1881      	adds	r1, r0, r2
 800cd50:	1ad2      	subs	r2, r2, r3
 800cd52:	42d3      	cmn	r3, r2
 800cd54:	d100      	bne.n	800cd58 <memmove+0x28>
 800cd56:	bd10      	pop	{r4, pc}
 800cd58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd5c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cd60:	e7f7      	b.n	800cd52 <memmove+0x22>
	...

0800cd64 <_free_r>:
 800cd64:	b538      	push	{r3, r4, r5, lr}
 800cd66:	4605      	mov	r5, r0
 800cd68:	2900      	cmp	r1, #0
 800cd6a:	d045      	beq.n	800cdf8 <_free_r+0x94>
 800cd6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd70:	1f0c      	subs	r4, r1, #4
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	bfb8      	it	lt
 800cd76:	18e4      	addlt	r4, r4, r3
 800cd78:	f000 f8d2 	bl	800cf20 <__malloc_lock>
 800cd7c:	4a1f      	ldr	r2, [pc, #124]	; (800cdfc <_free_r+0x98>)
 800cd7e:	6813      	ldr	r3, [r2, #0]
 800cd80:	4610      	mov	r0, r2
 800cd82:	b933      	cbnz	r3, 800cd92 <_free_r+0x2e>
 800cd84:	6063      	str	r3, [r4, #4]
 800cd86:	6014      	str	r4, [r2, #0]
 800cd88:	4628      	mov	r0, r5
 800cd8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd8e:	f000 b8c8 	b.w	800cf22 <__malloc_unlock>
 800cd92:	42a3      	cmp	r3, r4
 800cd94:	d90c      	bls.n	800cdb0 <_free_r+0x4c>
 800cd96:	6821      	ldr	r1, [r4, #0]
 800cd98:	1862      	adds	r2, r4, r1
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	bf04      	itt	eq
 800cd9e:	681a      	ldreq	r2, [r3, #0]
 800cda0:	685b      	ldreq	r3, [r3, #4]
 800cda2:	6063      	str	r3, [r4, #4]
 800cda4:	bf04      	itt	eq
 800cda6:	1852      	addeq	r2, r2, r1
 800cda8:	6022      	streq	r2, [r4, #0]
 800cdaa:	6004      	str	r4, [r0, #0]
 800cdac:	e7ec      	b.n	800cd88 <_free_r+0x24>
 800cdae:	4613      	mov	r3, r2
 800cdb0:	685a      	ldr	r2, [r3, #4]
 800cdb2:	b10a      	cbz	r2, 800cdb8 <_free_r+0x54>
 800cdb4:	42a2      	cmp	r2, r4
 800cdb6:	d9fa      	bls.n	800cdae <_free_r+0x4a>
 800cdb8:	6819      	ldr	r1, [r3, #0]
 800cdba:	1858      	adds	r0, r3, r1
 800cdbc:	42a0      	cmp	r0, r4
 800cdbe:	d10b      	bne.n	800cdd8 <_free_r+0x74>
 800cdc0:	6820      	ldr	r0, [r4, #0]
 800cdc2:	4401      	add	r1, r0
 800cdc4:	1858      	adds	r0, r3, r1
 800cdc6:	4282      	cmp	r2, r0
 800cdc8:	6019      	str	r1, [r3, #0]
 800cdca:	d1dd      	bne.n	800cd88 <_free_r+0x24>
 800cdcc:	6810      	ldr	r0, [r2, #0]
 800cdce:	6852      	ldr	r2, [r2, #4]
 800cdd0:	605a      	str	r2, [r3, #4]
 800cdd2:	4401      	add	r1, r0
 800cdd4:	6019      	str	r1, [r3, #0]
 800cdd6:	e7d7      	b.n	800cd88 <_free_r+0x24>
 800cdd8:	d902      	bls.n	800cde0 <_free_r+0x7c>
 800cdda:	230c      	movs	r3, #12
 800cddc:	602b      	str	r3, [r5, #0]
 800cdde:	e7d3      	b.n	800cd88 <_free_r+0x24>
 800cde0:	6820      	ldr	r0, [r4, #0]
 800cde2:	1821      	adds	r1, r4, r0
 800cde4:	428a      	cmp	r2, r1
 800cde6:	bf04      	itt	eq
 800cde8:	6811      	ldreq	r1, [r2, #0]
 800cdea:	6852      	ldreq	r2, [r2, #4]
 800cdec:	6062      	str	r2, [r4, #4]
 800cdee:	bf04      	itt	eq
 800cdf0:	1809      	addeq	r1, r1, r0
 800cdf2:	6021      	streq	r1, [r4, #0]
 800cdf4:	605c      	str	r4, [r3, #4]
 800cdf6:	e7c7      	b.n	800cd88 <_free_r+0x24>
 800cdf8:	bd38      	pop	{r3, r4, r5, pc}
 800cdfa:	bf00      	nop
 800cdfc:	20002b6c 	.word	0x20002b6c

0800ce00 <_malloc_r>:
 800ce00:	b570      	push	{r4, r5, r6, lr}
 800ce02:	1ccd      	adds	r5, r1, #3
 800ce04:	f025 0503 	bic.w	r5, r5, #3
 800ce08:	3508      	adds	r5, #8
 800ce0a:	2d0c      	cmp	r5, #12
 800ce0c:	bf38      	it	cc
 800ce0e:	250c      	movcc	r5, #12
 800ce10:	2d00      	cmp	r5, #0
 800ce12:	4606      	mov	r6, r0
 800ce14:	db01      	blt.n	800ce1a <_malloc_r+0x1a>
 800ce16:	42a9      	cmp	r1, r5
 800ce18:	d903      	bls.n	800ce22 <_malloc_r+0x22>
 800ce1a:	230c      	movs	r3, #12
 800ce1c:	6033      	str	r3, [r6, #0]
 800ce1e:	2000      	movs	r0, #0
 800ce20:	bd70      	pop	{r4, r5, r6, pc}
 800ce22:	f000 f87d 	bl	800cf20 <__malloc_lock>
 800ce26:	4a21      	ldr	r2, [pc, #132]	; (800ceac <_malloc_r+0xac>)
 800ce28:	6814      	ldr	r4, [r2, #0]
 800ce2a:	4621      	mov	r1, r4
 800ce2c:	b991      	cbnz	r1, 800ce54 <_malloc_r+0x54>
 800ce2e:	4c20      	ldr	r4, [pc, #128]	; (800ceb0 <_malloc_r+0xb0>)
 800ce30:	6823      	ldr	r3, [r4, #0]
 800ce32:	b91b      	cbnz	r3, 800ce3c <_malloc_r+0x3c>
 800ce34:	4630      	mov	r0, r6
 800ce36:	f000 f863 	bl	800cf00 <_sbrk_r>
 800ce3a:	6020      	str	r0, [r4, #0]
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	4630      	mov	r0, r6
 800ce40:	f000 f85e 	bl	800cf00 <_sbrk_r>
 800ce44:	1c43      	adds	r3, r0, #1
 800ce46:	d124      	bne.n	800ce92 <_malloc_r+0x92>
 800ce48:	230c      	movs	r3, #12
 800ce4a:	6033      	str	r3, [r6, #0]
 800ce4c:	4630      	mov	r0, r6
 800ce4e:	f000 f868 	bl	800cf22 <__malloc_unlock>
 800ce52:	e7e4      	b.n	800ce1e <_malloc_r+0x1e>
 800ce54:	680b      	ldr	r3, [r1, #0]
 800ce56:	1b5b      	subs	r3, r3, r5
 800ce58:	d418      	bmi.n	800ce8c <_malloc_r+0x8c>
 800ce5a:	2b0b      	cmp	r3, #11
 800ce5c:	d90f      	bls.n	800ce7e <_malloc_r+0x7e>
 800ce5e:	600b      	str	r3, [r1, #0]
 800ce60:	50cd      	str	r5, [r1, r3]
 800ce62:	18cc      	adds	r4, r1, r3
 800ce64:	4630      	mov	r0, r6
 800ce66:	f000 f85c 	bl	800cf22 <__malloc_unlock>
 800ce6a:	f104 000b 	add.w	r0, r4, #11
 800ce6e:	1d23      	adds	r3, r4, #4
 800ce70:	f020 0007 	bic.w	r0, r0, #7
 800ce74:	1ac3      	subs	r3, r0, r3
 800ce76:	d0d3      	beq.n	800ce20 <_malloc_r+0x20>
 800ce78:	425a      	negs	r2, r3
 800ce7a:	50e2      	str	r2, [r4, r3]
 800ce7c:	e7d0      	b.n	800ce20 <_malloc_r+0x20>
 800ce7e:	428c      	cmp	r4, r1
 800ce80:	684b      	ldr	r3, [r1, #4]
 800ce82:	bf16      	itet	ne
 800ce84:	6063      	strne	r3, [r4, #4]
 800ce86:	6013      	streq	r3, [r2, #0]
 800ce88:	460c      	movne	r4, r1
 800ce8a:	e7eb      	b.n	800ce64 <_malloc_r+0x64>
 800ce8c:	460c      	mov	r4, r1
 800ce8e:	6849      	ldr	r1, [r1, #4]
 800ce90:	e7cc      	b.n	800ce2c <_malloc_r+0x2c>
 800ce92:	1cc4      	adds	r4, r0, #3
 800ce94:	f024 0403 	bic.w	r4, r4, #3
 800ce98:	42a0      	cmp	r0, r4
 800ce9a:	d005      	beq.n	800cea8 <_malloc_r+0xa8>
 800ce9c:	1a21      	subs	r1, r4, r0
 800ce9e:	4630      	mov	r0, r6
 800cea0:	f000 f82e 	bl	800cf00 <_sbrk_r>
 800cea4:	3001      	adds	r0, #1
 800cea6:	d0cf      	beq.n	800ce48 <_malloc_r+0x48>
 800cea8:	6025      	str	r5, [r4, #0]
 800ceaa:	e7db      	b.n	800ce64 <_malloc_r+0x64>
 800ceac:	20002b6c 	.word	0x20002b6c
 800ceb0:	20002b70 	.word	0x20002b70

0800ceb4 <_realloc_r>:
 800ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb6:	4607      	mov	r7, r0
 800ceb8:	4614      	mov	r4, r2
 800ceba:	460e      	mov	r6, r1
 800cebc:	b921      	cbnz	r1, 800cec8 <_realloc_r+0x14>
 800cebe:	4611      	mov	r1, r2
 800cec0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cec4:	f7ff bf9c 	b.w	800ce00 <_malloc_r>
 800cec8:	b922      	cbnz	r2, 800ced4 <_realloc_r+0x20>
 800ceca:	f7ff ff4b 	bl	800cd64 <_free_r>
 800cece:	4625      	mov	r5, r4
 800ced0:	4628      	mov	r0, r5
 800ced2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ced4:	f000 f826 	bl	800cf24 <_malloc_usable_size_r>
 800ced8:	42a0      	cmp	r0, r4
 800ceda:	d20f      	bcs.n	800cefc <_realloc_r+0x48>
 800cedc:	4621      	mov	r1, r4
 800cede:	4638      	mov	r0, r7
 800cee0:	f7ff ff8e 	bl	800ce00 <_malloc_r>
 800cee4:	4605      	mov	r5, r0
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d0f2      	beq.n	800ced0 <_realloc_r+0x1c>
 800ceea:	4631      	mov	r1, r6
 800ceec:	4622      	mov	r2, r4
 800ceee:	f7ff fbe1 	bl	800c6b4 <memcpy>
 800cef2:	4631      	mov	r1, r6
 800cef4:	4638      	mov	r0, r7
 800cef6:	f7ff ff35 	bl	800cd64 <_free_r>
 800cefa:	e7e9      	b.n	800ced0 <_realloc_r+0x1c>
 800cefc:	4635      	mov	r5, r6
 800cefe:	e7e7      	b.n	800ced0 <_realloc_r+0x1c>

0800cf00 <_sbrk_r>:
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	4c06      	ldr	r4, [pc, #24]	; (800cf1c <_sbrk_r+0x1c>)
 800cf04:	2300      	movs	r3, #0
 800cf06:	4605      	mov	r5, r0
 800cf08:	4608      	mov	r0, r1
 800cf0a:	6023      	str	r3, [r4, #0]
 800cf0c:	f7f8 fa26 	bl	800535c <_sbrk>
 800cf10:	1c43      	adds	r3, r0, #1
 800cf12:	d102      	bne.n	800cf1a <_sbrk_r+0x1a>
 800cf14:	6823      	ldr	r3, [r4, #0]
 800cf16:	b103      	cbz	r3, 800cf1a <_sbrk_r+0x1a>
 800cf18:	602b      	str	r3, [r5, #0]
 800cf1a:	bd38      	pop	{r3, r4, r5, pc}
 800cf1c:	200034a8 	.word	0x200034a8

0800cf20 <__malloc_lock>:
 800cf20:	4770      	bx	lr

0800cf22 <__malloc_unlock>:
 800cf22:	4770      	bx	lr

0800cf24 <_malloc_usable_size_r>:
 800cf24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf28:	1f18      	subs	r0, r3, #4
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	bfbc      	itt	lt
 800cf2e:	580b      	ldrlt	r3, [r1, r0]
 800cf30:	18c0      	addlt	r0, r0, r3
 800cf32:	4770      	bx	lr

0800cf34 <_init>:
 800cf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf36:	bf00      	nop
 800cf38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf3a:	bc08      	pop	{r3}
 800cf3c:	469e      	mov	lr, r3
 800cf3e:	4770      	bx	lr

0800cf40 <_fini>:
 800cf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf42:	bf00      	nop
 800cf44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf46:	bc08      	pop	{r3}
 800cf48:	469e      	mov	lr, r3
 800cf4a:	4770      	bx	lr


Suncontroller CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdf8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a2c  0800bf98  0800bf98  0001bf98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9c4  0800c9c4  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9c4  0800c9c4  0001c9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9cc  0800c9cc  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9cc  0800c9cc  0001c9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9d0  0800c9d0  0001c9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800c9d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003328  200000b8  0800ca8c  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200033e0  0800ca8c  000233e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004004f  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000077c1  00000000  00000000  00060137  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c007  00000000  00000000  000678f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002558  00000000  00000000  00083900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002620  00000000  00000000  00085e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000a60a  00000000  00000000  00088478  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00022ac2  00000000  00000000  00092a82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ac289  00000000  00000000  000b5544  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001617cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000700c  00000000  00000000  00161848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b8 	.word	0x200000b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bf80 	.word	0x0800bf80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	0800bf80 	.word	0x0800bf80

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <xCLI_GetSystemStatus>:
	(void) xWriteBufferLen;

	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;

}
 8000e0c:	4770      	bx	lr
	...

08000e10 <xCLI_EreaseEE>:
BaseType_t xCLI_EreaseEE( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8000e10:	b510      	push	{r4, lr}
 8000e12:	4604      	mov	r4, r0
	EE_StatusTypeDef retval = EE_Erease();
 8000e14:	f000 fb18 	bl	8001448 <EE_Erease>
	if(retval == EE_OK){
 8000e18:	b128      	cbz	r0, 8000e26 <xCLI_EreaseEE+0x16>
		sprintf(pcWriteBuffer, "Nie wyczyszczono.\r\n");
 8000e1a:	4905      	ldr	r1, [pc, #20]	; (8000e30 <xCLI_EreaseEE+0x20>)
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f00a fc37 	bl	800b690 <sprintf_>
}
 8000e22:	2000      	movs	r0, #0
 8000e24:	bd10      	pop	{r4, pc}
		sprintf(pcWriteBuffer, "Wyczyszczono.\r\n");
 8000e26:	4903      	ldr	r1, [pc, #12]	; (8000e34 <xCLI_EreaseEE+0x24>)
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f00a fc31 	bl	800b690 <sprintf_>
 8000e2e:	e7f8      	b.n	8000e22 <xCLI_EreaseEE+0x12>
 8000e30:	0800c18c 	.word	0x0800c18c
 8000e34:	0800c17c 	.word	0x0800c17c

08000e38 <xCLI_ShowConfig>:
BaseType_t xCLI_ShowConfig( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8000e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e3c:	b095      	sub	sp, #84	; 0x54
 8000e3e:	9011      	str	r0, [sp, #68]	; 0x44
	switch (step){
 8000e40:	4b6e      	ldr	r3, [pc, #440]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b05      	cmp	r3, #5
 8000e46:	f200 80d0 	bhi.w	8000fea <xCLI_ShowConfig+0x1b2>
 8000e4a:	e8df f003 	tbb	[pc, r3]
 8000e4e:	3303      	.short	0x3303
 8000e50:	c1ac997c 	.word	0xc1ac997c
			configStatus = Config_GetConfig(&config);
 8000e54:	486a      	ldr	r0, [pc, #424]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000e56:	f000 f995 	bl	8001184 <Config_GetConfig>
			switch(configStatus){
 8000e5a:	3005      	adds	r0, #5
 8000e5c:	2805      	cmp	r0, #5
 8000e5e:	d824      	bhi.n	8000eaa <xCLI_ShowConfig+0x72>
 8000e60:	e8df f000 	tbb	[pc, r0]
 8000e64:	23140f03 	.word	0x23140f03
 8000e68:	1e19      	.short	0x1e19
					sprintf(pcWriteBuffer, "No configuration in memory.\r\n");
 8000e6a:	4966      	ldr	r1, [pc, #408]	; (8001004 <xCLI_ShowConfig+0x1cc>)
 8000e6c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e6e:	f00a fc0f 	bl	800b690 <sprintf_>
			step++;
 8000e72:	4a62      	ldr	r2, [pc, #392]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000e74:	7813      	ldrb	r3, [r2, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000e7a:	2001      	movs	r0, #1
}
 8000e7c:	b015      	add	sp, #84	; 0x54
 8000e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					sprintf(pcWriteBuffer, "Configuration CRC error.\r\n");
 8000e82:	4961      	ldr	r1, [pc, #388]	; (8001008 <xCLI_ShowConfig+0x1d0>)
 8000e84:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e86:	f00a fc03 	bl	800b690 <sprintf_>
					break;
 8000e8a:	e7f2      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Cannot access I2C bus.\r\n");
 8000e8c:	495f      	ldr	r1, [pc, #380]	; (800100c <xCLI_ShowConfig+0x1d4>)
 8000e8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e90:	f00a fbfe 	bl	800b690 <sprintf_>
					break;
 8000e94:	e7ed      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Memory access timeout.\r\n");
 8000e96:	495e      	ldr	r1, [pc, #376]	; (8001010 <xCLI_ShowConfig+0x1d8>)
 8000e98:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e9a:	f00a fbf9 	bl	800b690 <sprintf_>
					break;
 8000e9e:	e7e8      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Configuration loaded.\r\n");
 8000ea0:	495c      	ldr	r1, [pc, #368]	; (8001014 <xCLI_ShowConfig+0x1dc>)
 8000ea2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ea4:	f00a fbf4 	bl	800b690 <sprintf_>
					break;
 8000ea8:	e7e3      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Unexpected error.\r\n");
 8000eaa:	495b      	ldr	r1, [pc, #364]	; (8001018 <xCLI_ShowConfig+0x1e0>)
 8000eac:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000eae:	f00a fbef 	bl	800b690 <sprintf_>
 					break;
 8000eb2:	e7de      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					config.EthernetConfig.ipAddress[0], config.EthernetConfig.ipAddress[1],
 8000eb4:	4b52      	ldr	r3, [pc, #328]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000eb6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000eba:	9212      	str	r2, [sp, #72]	; 0x48
 8000ebc:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8000ec0:	9113      	str	r1, [sp, #76]	; 0x4c
					config.EthernetConfig.ipAddress[2], config.EthernetConfig.ipAddress[3],
 8000ec2:	f893 4022 	ldrb.w	r4, [r3, #34]	; 0x22
 8000ec6:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8000eca:	9001      	str	r0, [sp, #4]
					config.EthernetConfig.gatewayAddress[0], config.EthernetConfig.gatewayAddress[1],
 8000ecc:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8000ed0:	9002      	str	r0, [sp, #8]
 8000ed2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
					config.EthernetConfig.gatewayAddress[2], config.EthernetConfig.gatewayAddress[3],
 8000ed6:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8000eda:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
					config.EthernetConfig.subnetMask[0], config.EthernetConfig.subnetMask[1],
 8000ede:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 8000ee2:	f893 6025 	ldrb.w	r6, [r3, #37]	; 0x25
					config.EthernetConfig.subnetMask[2], config.EthernetConfig.subnetMask[3],
 8000ee6:	f893 7026 	ldrb.w	r7, [r3, #38]	; 0x26
 8000eea:	f893 c027 	ldrb.w	ip, [r3, #39]	; 0x27
					config.EthernetConfig.macAddress[0], config.EthernetConfig.macAddress[1],
 8000eee:	f893 e02c 	ldrb.w	lr, [r3, #44]	; 0x2c
 8000ef2:	f893 802d 	ldrb.w	r8, [r3, #45]	; 0x2d
					config.EthernetConfig.macAddress[2], config.EthernetConfig.macAddress[3],
 8000ef6:	f893 902e 	ldrb.w	r9, [r3, #46]	; 0x2e
 8000efa:	f893 a02f 	ldrb.w	sl, [r3, #47]	; 0x2f
					config.EthernetConfig.macAddress[4], config.EthernetConfig.macAddress[5]);
 8000efe:	f893 b030 	ldrb.w	fp, [r3, #48]	; 0x30
 8000f02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
			sprintf(pcWriteBuffer, "Ethernet configuration:\r\n"
 8000f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f08:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8000f0c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8000f10:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8000f14:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8000f18:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8000f1c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8000f20:	9708      	str	r7, [sp, #32]
 8000f22:	9607      	str	r6, [sp, #28]
 8000f24:	9506      	str	r5, [sp, #24]
 8000f26:	9005      	str	r0, [sp, #20]
 8000f28:	9104      	str	r1, [sp, #16]
 8000f2a:	9203      	str	r2, [sp, #12]
 8000f2c:	9400      	str	r4, [sp, #0]
 8000f2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000f30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000f32:	493a      	ldr	r1, [pc, #232]	; (800101c <xCLI_ShowConfig+0x1e4>)
 8000f34:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f36:	f00a fbab 	bl	800b690 <sprintf_>
			step++;
 8000f3a:	4a30      	ldr	r2, [pc, #192]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000f3c:	7813      	ldrb	r3, [r2, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000f42:	2001      	movs	r0, #1
			break;
 8000f44:	e79a      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					(uint32_t)config.RegulationConfig.CWU_heater_power,
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000f48:	ed93 7a00 	vldr	s14, [r3]
					(uint32_t)config.RegulationConfig.CO_heater_power,
 8000f4c:	edd3 6a01 	vldr	s13, [r3, #4]
					(uint32_t)config.RegulationConfig.net_max_power);
 8000f50:	edd3 7a02 	vldr	s15, [r3, #8]
			sprintf(pcWriteBuffer, "Regulation configuration:\r\n"
 8000f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f58:	edcd 7a00 	vstr	s15, [sp]
 8000f5c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8000f60:	ee17 3a90 	vmov	r3, s15
 8000f64:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000f68:	ee17 2a90 	vmov	r2, s15
 8000f6c:	492c      	ldr	r1, [pc, #176]	; (8001020 <xCLI_ShowConfig+0x1e8>)
 8000f6e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f70:	f00a fb8e 	bl	800b690 <sprintf_>
			step++;
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000f76:	7813      	ldrb	r3, [r2, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000f7c:	2001      	movs	r0, #1
			break;
 8000f7e:	e77d      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					config.RegulationConfig.counter_address,
 8000f80:	491f      	ldr	r1, [pc, #124]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000f82:	7b0a      	ldrb	r2, [r1, #12]
					config.RegulationConfig.temperature_address,
 8000f84:	7b4b      	ldrb	r3, [r1, #13]
					config.RegulationConfig.acumulated_power_coeff,
 8000f86:	f991 000e 	ldrsb.w	r0, [r1, #14]
					config.RegulationConfig.heater_power_coeff);
 8000f8a:	f991 100f 	ldrsb.w	r1, [r1, #15]
			sprintf(pcWriteBuffer, "    Counter address: %d\r\n"
 8000f8e:	9101      	str	r1, [sp, #4]
 8000f90:	9000      	str	r0, [sp, #0]
 8000f92:	4924      	ldr	r1, [pc, #144]	; (8001024 <xCLI_ShowConfig+0x1ec>)
 8000f94:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f96:	f00a fb7b 	bl	800b690 <sprintf_>
			step++;
 8000f9a:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000f9c:	7813      	ldrb	r3, [r2, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fa2:	2001      	movs	r0, #1
			break;
 8000fa4:	e76a      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					config.RegulationConfig.CO_hi_temp,
 8000fa6:	4916      	ldr	r1, [pc, #88]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000fa8:	f991 2010 	ldrsb.w	r2, [r1, #16]
					config.RegulationConfig.CO_lo_temp,
 8000fac:	f991 3011 	ldrsb.w	r3, [r1, #17]
					config.RegulationConfig.CWU_hi_temp,
 8000fb0:	f991 0012 	ldrsb.w	r0, [r1, #18]
					config.RegulationConfig.CWU_lo_temp);
 8000fb4:	f991 1013 	ldrsb.w	r1, [r1, #19]
			sprintf(pcWriteBuffer, "    CO high temperature: %d C\r\n"
 8000fb8:	9101      	str	r1, [sp, #4]
 8000fba:	9000      	str	r0, [sp, #0]
 8000fbc:	491a      	ldr	r1, [pc, #104]	; (8001028 <xCLI_ShowConfig+0x1f0>)
 8000fbe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000fc0:	f00a fb66 	bl	800b690 <sprintf_>
			step++;
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000fc6:	7813      	ldrb	r3, [r2, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fcc:	2001      	movs	r0, #1
			break;
 8000fce:	e755      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					"CRC: 0x%08x\r\n", config.dummy, config.crc);
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <xCLI_ShowConfig+0x1c8>)
			sprintf(pcWriteBuffer, "Magic word: 0x%04x\r\n"
 8000fd2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000fd4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8000fd6:	4915      	ldr	r1, [pc, #84]	; (800102c <xCLI_ShowConfig+0x1f4>)
 8000fd8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000fda:	f00a fb59 	bl	800b690 <sprintf_>
			step++;
 8000fde:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000fe0:	7813      	ldrb	r3, [r2, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fe6:	2001      	movs	r0, #1
			break;
 8000fe8:	e748      	b.n	8000e7c <xCLI_ShowConfig+0x44>
			step = 0;
 8000fea:	2500      	movs	r5, #0
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000fee:	701d      	strb	r5, [r3, #0]
			sprintf(pcWriteBuffer, "\r\n");
 8000ff0:	490f      	ldr	r1, [pc, #60]	; (8001030 <xCLI_ShowConfig+0x1f8>)
 8000ff2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ff4:	f00a fb4c 	bl	800b690 <sprintf_>
			retVal = pdFALSE;
 8000ff8:	4628      	mov	r0, r5
	return retVal;
 8000ffa:	e73f      	b.n	8000e7c <xCLI_ShowConfig+0x44>
 8000ffc:	2000010c 	.word	0x2000010c
 8001000:	200000d4 	.word	0x200000d4
 8001004:	0800c1a0 	.word	0x0800c1a0
 8001008:	0800c1c0 	.word	0x0800c1c0
 800100c:	0800c1dc 	.word	0x0800c1dc
 8001010:	0800c1f8 	.word	0x0800c1f8
 8001014:	0800c214 	.word	0x0800c214
 8001018:	0800c22c 	.word	0x0800c22c
 800101c:	0800c240 	.word	0x0800c240
 8001020:	0800c2c8 	.word	0x0800c2c8
 8001024:	0800c338 	.word	0x0800c338
 8001028:	0800c3bc 	.word	0x0800c3bc
 800102c:	0800c43c 	.word	0x0800c43c
 8001030:	0800c140 	.word	0x0800c140

08001034 <CLI_Init>:
void CLI_Init (void){
 8001034:	b508      	push	{r3, lr}
	FreeRTOS_CLIRegisterCommand(&xEreaseEECmd);
 8001036:	4808      	ldr	r0, [pc, #32]	; (8001058 <CLI_Init+0x24>)
 8001038:	f009 fe9c 	bl	800ad74 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xShowConfigCmd);
 800103c:	4807      	ldr	r0, [pc, #28]	; (800105c <CLI_Init+0x28>)
 800103e:	f009 fe99 	bl	800ad74 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetSysStatusCmd);
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <CLI_Init+0x2c>)
 8001044:	f009 fe96 	bl	800ad74 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetRtosStatsCmd);
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <CLI_Init+0x30>)
 800104a:	f009 fe93 	bl	800ad74 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetCommStatsCmd);
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <CLI_Init+0x34>)
 8001050:	f009 fe90 	bl	800ad74 <FreeRTOS_CLIRegisterCommand>
}
 8001054:	bd08      	pop	{r3, pc}
 8001056:	bf00      	nop
 8001058:	0800c460 	.word	0x0800c460
 800105c:	0800c4a0 	.word	0x0800c4a0
 8001060:	0800c490 	.word	0x0800c490
 8001064:	0800c480 	.word	0x0800c480
 8001068:	0800c470 	.word	0x0800c470

0800106c <Config_CalculateCRC>:
		configuration.dummy = MAGIC_WORD;
		configuration.crc = Config_CalculateCRC();
	}
}

static uint32_t Config_CalculateCRC (void){
 800106c:	b508      	push	{r3, lr}
	return HAL_CRC_Calculate(&hcrc, (uint32_t*)&configuration, (CONFIG_BYTES_LEN - 2)/4);
 800106e:	220d      	movs	r2, #13
 8001070:	4902      	ldr	r1, [pc, #8]	; (800107c <Config_CalculateCRC+0x10>)
 8001072:	4803      	ldr	r0, [pc, #12]	; (8001080 <Config_CalculateCRC+0x14>)
 8001074:	f004 fa81 	bl	800557a <HAL_CRC_Calculate>
}
 8001078:	bd08      	pop	{r3, pc}
 800107a:	bf00      	nop
 800107c:	20000110 	.word	0x20000110
 8001080:	20003014 	.word	0x20003014

08001084 <Config_CheckData>:

static CONFStatus_t Config_CheckData (void){
 8001084:	b510      	push	{r4, lr}
	CONFStatus_t retval;
	uint32_t readCRC, actualCRC;

	readCRC = configuration.crc;
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <Config_CheckData+0x18>)
 8001088:	6b5c      	ldr	r4, [r3, #52]	; 0x34
	actualCRC = Config_CalculateCRC();
 800108a:	f7ff ffef 	bl	800106c <Config_CalculateCRC>

	if(readCRC != actualCRC){
 800108e:	4284      	cmp	r4, r0
 8001090:	d101      	bne.n	8001096 <Config_CheckData+0x12>
		if(configuration.dummy != MAGIC_WORD){
			retval = CONF_ERR_NOCONF;
		}
		retval = CONF_ERR_CRC;
	}else{
		retval = CONF_OK;
 8001092:	2000      	movs	r0, #0
	}
	return retval;
}
 8001094:	bd10      	pop	{r4, pc}
		retval = CONF_ERR_CRC;
 8001096:	f06f 0003 	mvn.w	r0, #3
 800109a:	e7fb      	b.n	8001094 <Config_CheckData+0x10>
 800109c:	20000110 	.word	0x20000110

080010a0 <Config_ChangeValue>:
	if(value != NULL && param < PARAM_NUMS){
 80010a0:	2900      	cmp	r1, #0
 80010a2:	d061      	beq.n	8001168 <Config_ChangeValue+0xc8>
 80010a4:	2811      	cmp	r0, #17
 80010a6:	d85f      	bhi.n	8001168 <Config_ChangeValue+0xc8>
void Config_ChangeValue(uint32_t param, void* value){
 80010a8:	b510      	push	{r4, lr}
		switch(param){
 80010aa:	2811      	cmp	r0, #17
 80010ac:	d80d      	bhi.n	80010ca <Config_ChangeValue+0x2a>
 80010ae:	e8df f000 	tbb	[pc, r0]
 80010b2:	1409      	.short	0x1409
 80010b4:	24201c18 	.word	0x24201c18
 80010b8:	34302c28 	.word	0x34302c28
 80010bc:	44403c38 	.word	0x44403c38
 80010c0:	56514c48 	.word	0x56514c48
				memcpy(&configuration.RegulationConfig.CWU_heater_power, value, 4);
 80010c4:	680a      	ldr	r2, [r1, #0]
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <Config_ChangeValue+0xcc>)
 80010c8:	601a      	str	r2, [r3, #0]
		configuration.dummy = MAGIC_WORD;
 80010ca:	4c28      	ldr	r4, [pc, #160]	; (800116c <Config_ChangeValue+0xcc>)
 80010cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80010d0:	8663      	strh	r3, [r4, #50]	; 0x32
		configuration.crc = Config_CalculateCRC();
 80010d2:	f7ff ffcb 	bl	800106c <Config_CalculateCRC>
 80010d6:	6360      	str	r0, [r4, #52]	; 0x34
}
 80010d8:	bd10      	pop	{r4, pc}
				memcpy(&configuration.RegulationConfig.CO_heater_power, value, 4);
 80010da:	680a      	ldr	r2, [r1, #0]
 80010dc:	4b23      	ldr	r3, [pc, #140]	; (800116c <Config_ChangeValue+0xcc>)
 80010de:	605a      	str	r2, [r3, #4]
				break;
 80010e0:	e7f3      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.net_max_power, value, 4);
 80010e2:	680a      	ldr	r2, [r1, #0]
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <Config_ChangeValue+0xcc>)
 80010e6:	609a      	str	r2, [r3, #8]
				break;
 80010e8:	e7ef      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.counter_address, value, 1);
 80010ea:	780a      	ldrb	r2, [r1, #0]
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <Config_ChangeValue+0xcc>)
 80010ee:	731a      	strb	r2, [r3, #12]
				break;
 80010f0:	e7eb      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.temperature_address, value, 1);
 80010f2:	780a      	ldrb	r2, [r1, #0]
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <Config_ChangeValue+0xcc>)
 80010f6:	735a      	strb	r2, [r3, #13]
				break;
 80010f8:	e7e7      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.acumulated_power_coeff, value, 1);
 80010fa:	780a      	ldrb	r2, [r1, #0]
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <Config_ChangeValue+0xcc>)
 80010fe:	739a      	strb	r2, [r3, #14]
				break;
 8001100:	e7e3      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.heater_power_coeff, value, 1);
 8001102:	780a      	ldrb	r2, [r1, #0]
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <Config_ChangeValue+0xcc>)
 8001106:	73da      	strb	r2, [r3, #15]
				break;
 8001108:	e7df      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CO_hi_temp, value, 1);
 800110a:	780a      	ldrb	r2, [r1, #0]
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <Config_ChangeValue+0xcc>)
 800110e:	741a      	strb	r2, [r3, #16]
				break;
 8001110:	e7db      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CO_lo_temp, value, 1);
 8001112:	780a      	ldrb	r2, [r1, #0]
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <Config_ChangeValue+0xcc>)
 8001116:	745a      	strb	r2, [r3, #17]
				break;
 8001118:	e7d7      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CWU_hi_temp, value, 1);
 800111a:	780a      	ldrb	r2, [r1, #0]
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <Config_ChangeValue+0xcc>)
 800111e:	749a      	strb	r2, [r3, #18]
				break;
 8001120:	e7d3      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CWU_lo_temp, value, 1);
 8001122:	780a      	ldrb	r2, [r1, #0]
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <Config_ChangeValue+0xcc>)
 8001126:	74da      	strb	r2, [r3, #19]
				break;
 8001128:	e7cf      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.exported_power, value, 4);
 800112a:	680a      	ldr	r2, [r1, #0]
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <Config_ChangeValue+0xcc>)
 800112e:	615a      	str	r2, [r3, #20]
				break;
 8001130:	e7cb      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.imported_power, value, 4);
 8001132:	680a      	ldr	r2, [r1, #0]
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <Config_ChangeValue+0xcc>)
 8001136:	619a      	str	r2, [r3, #24]
				break;
 8001138:	e7c7      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.acumulated_power, value, 4);
 800113a:	680a      	ldr	r2, [r1, #0]
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <Config_ChangeValue+0xcc>)
 800113e:	61da      	str	r2, [r3, #28]
				break;
 8001140:	e7c3      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.ipAddress[0], value, 4);
 8001142:	680a      	ldr	r2, [r1, #0]
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <Config_ChangeValue+0xcc>)
 8001146:	621a      	str	r2, [r3, #32]
				break;
 8001148:	e7bf      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.subnetMask[0], value, 1);
 800114a:	780a      	ldrb	r2, [r1, #0]
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <Config_ChangeValue+0xcc>)
 800114e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				break;
 8001152:	e7ba      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.gatewayAddress[0], value, 1);
 8001154:	780a      	ldrb	r2, [r1, #0]
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <Config_ChangeValue+0xcc>)
 8001158:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				break;
 800115c:	e7b5      	b.n	80010ca <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.macAddress[0], value, 1);
 800115e:	780a      	ldrb	r2, [r1, #0]
 8001160:	4b02      	ldr	r3, [pc, #8]	; (800116c <Config_ChangeValue+0xcc>)
 8001162:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				break;
 8001166:	e7b0      	b.n	80010ca <Config_ChangeValue+0x2a>
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000110 	.word	0x20000110

08001170 <Config_Save>:

CONFStatus_t Config_Save (void){
 8001170:	b508      	push	{r3, lr}
	CONFStatus_t retval;
	retval = (CONFStatus_t)EE_Write(&configuration, 0, CONFIG_BYTES_LEN);
 8001172:	2238      	movs	r2, #56	; 0x38
 8001174:	2100      	movs	r1, #0
 8001176:	4802      	ldr	r0, [pc, #8]	; (8001180 <Config_Save+0x10>)
 8001178:	f000 f8ec 	bl	8001354 <EE_Write>
	return retval;
}
 800117c:	bd08      	pop	{r3, pc}
 800117e:	bf00      	nop
 8001180:	20000110 	.word	0x20000110

08001184 <Config_GetConfig>:
ConfigLoadStatus_t Config_GetConfigStatus(void){
	return configuartionStatus;
}

CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8001184:	b1c0      	cbz	r0, 80011b8 <Config_GetConfig+0x34>
CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
 8001186:	b4f0      	push	{r4, r5, r6, r7}
 8001188:	4604      	mov	r4, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <Config_GetConfig+0x40>)
 800118c:	f993 3000 	ldrsb.w	r3, [r3]
 8001190:	b9ab      	cbnz	r3, 80011be <Config_GetConfig+0x3a>
		memcpy(config, &configuration, CONFIG_BYTES_LEN);
 8001192:	4d0d      	ldr	r5, [pc, #52]	; (80011c8 <Config_GetConfig+0x44>)
 8001194:	f105 0730 	add.w	r7, r5, #48	; 0x30
 8001198:	462e      	mov	r6, r5
 800119a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800119c:	6020      	str	r0, [r4, #0]
 800119e:	6061      	str	r1, [r4, #4]
 80011a0:	60a2      	str	r2, [r4, #8]
 80011a2:	60e3      	str	r3, [r4, #12]
 80011a4:	4635      	mov	r5, r6
 80011a6:	3410      	adds	r4, #16
 80011a8:	42be      	cmp	r6, r7
 80011aa:	d1f5      	bne.n	8001198 <Config_GetConfig+0x14>
 80011ac:	cd03      	ldmia	r5!, {r0, r1}
 80011ae:	6020      	str	r0, [r4, #0]
 80011b0:	6061      	str	r1, [r4, #4]
		return CONF_OK;
 80011b2:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 80011b4:	bcf0      	pop	{r4, r5, r6, r7}
 80011b6:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 80011b8:	f06f 0001 	mvn.w	r0, #1
}
 80011bc:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 80011be:	f06f 0004 	mvn.w	r0, #4
 80011c2:	e7f7      	b.n	80011b4 <Config_GetConfig+0x30>
 80011c4:	2000010d 	.word	0x2000010d
 80011c8:	20000110 	.word	0x20000110

080011cc <Config_GetEthernetConfig>:

CONFStatus_t Config_GetEthernetConfig (EthernetConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 80011cc:	b180      	cbz	r0, 80011f0 <Config_GetEthernetConfig+0x24>
CONFStatus_t Config_GetEthernetConfig (EthernetConfig_t* config){
 80011ce:	b430      	push	{r4, r5}
 80011d0:	4605      	mov	r5, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <Config_GetEthernetConfig+0x30>)
 80011d4:	f993 3000 	ldrsb.w	r3, [r3]
 80011d8:	b96b      	cbnz	r3, 80011f6 <Config_GetEthernetConfig+0x2a>
		memcpy(config, &configuration.EthernetConfig, ETH_CONFIG_BYTES_LEN);
 80011da:	4c09      	ldr	r4, [pc, #36]	; (8001200 <Config_GetEthernetConfig+0x34>)
 80011dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011de:	6028      	str	r0, [r5, #0]
 80011e0:	6069      	str	r1, [r5, #4]
 80011e2:	60aa      	str	r2, [r5, #8]
 80011e4:	60eb      	str	r3, [r5, #12]
 80011e6:	8823      	ldrh	r3, [r4, #0]
 80011e8:	822b      	strh	r3, [r5, #16]
		return CONF_OK;
 80011ea:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 80011ec:	bc30      	pop	{r4, r5}
 80011ee:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 80011f0:	f06f 0001 	mvn.w	r0, #1
}
 80011f4:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 80011f6:	f06f 0004 	mvn.w	r0, #4
 80011fa:	e7f7      	b.n	80011ec <Config_GetEthernetConfig+0x20>
 80011fc:	2000010d 	.word	0x2000010d
 8001200:	20000130 	.word	0x20000130

08001204 <Config_GetRegConfig>:

CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8001204:	b198      	cbz	r0, 800122e <Config_GetRegConfig+0x2a>
CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
 8001206:	b430      	push	{r4, r5}
 8001208:	4605      	mov	r5, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <Config_GetRegConfig+0x38>)
 800120c:	f993 3000 	ldrsb.w	r3, [r3]
 8001210:	b983      	cbnz	r3, 8001234 <Config_GetRegConfig+0x30>
		memcpy(config, &configuration.RegulationConfig, REG_CONFIG_BYTES_LEN);
 8001212:	4c0b      	ldr	r4, [pc, #44]	; (8001240 <Config_GetRegConfig+0x3c>)
 8001214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001216:	6028      	str	r0, [r5, #0]
 8001218:	6069      	str	r1, [r5, #4]
 800121a:	60aa      	str	r2, [r5, #8]
 800121c:	60eb      	str	r3, [r5, #12]
 800121e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001220:	6128      	str	r0, [r5, #16]
 8001222:	6169      	str	r1, [r5, #20]
 8001224:	61aa      	str	r2, [r5, #24]
 8001226:	61eb      	str	r3, [r5, #28]
		return CONF_OK;
 8001228:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 800122a:	bc30      	pop	{r4, r5}
 800122c:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 800122e:	f06f 0001 	mvn.w	r0, #1
}
 8001232:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 8001234:	f06f 0004 	mvn.w	r0, #4
 8001238:	e7f7      	b.n	800122a <Config_GetRegConfig+0x26>
 800123a:	bf00      	nop
 800123c:	2000010d 	.word	0x2000010d
 8001240:	20000110 	.word	0x20000110

08001244 <Config_Copy>:

CONFStatus_t Config_Copy (ConfigStruct_t* dest, ConfigStruct_t* src){
	if((dest == NULL) || (src == NULL)) return CONF_ERR_NULL;
 8001244:	b1b0      	cbz	r0, 8001274 <Config_Copy+0x30>
 8001246:	b1c1      	cbz	r1, 800127a <Config_Copy+0x36>
CONFStatus_t Config_Copy (ConfigStruct_t* dest, ConfigStruct_t* src){
 8001248:	b470      	push	{r4, r5, r6}
	memcpy(dest, src, CONFIG_BYTES_LEN);
 800124a:	460a      	mov	r2, r1
 800124c:	3130      	adds	r1, #48	; 0x30
 800124e:	6816      	ldr	r6, [r2, #0]
 8001250:	6855      	ldr	r5, [r2, #4]
 8001252:	6894      	ldr	r4, [r2, #8]
 8001254:	68d3      	ldr	r3, [r2, #12]
 8001256:	6006      	str	r6, [r0, #0]
 8001258:	6045      	str	r5, [r0, #4]
 800125a:	6084      	str	r4, [r0, #8]
 800125c:	60c3      	str	r3, [r0, #12]
 800125e:	3210      	adds	r2, #16
 8001260:	3010      	adds	r0, #16
 8001262:	428a      	cmp	r2, r1
 8001264:	d1f3      	bne.n	800124e <Config_Copy+0xa>
 8001266:	6811      	ldr	r1, [r2, #0]
 8001268:	6853      	ldr	r3, [r2, #4]
 800126a:	6001      	str	r1, [r0, #0]
 800126c:	6043      	str	r3, [r0, #4]
	return CONF_OK;
 800126e:	2000      	movs	r0, #0
}
 8001270:	bc70      	pop	{r4, r5, r6}
 8001272:	4770      	bx	lr
	if((dest == NULL) || (src == NULL)) return CONF_ERR_NULL;
 8001274:	f06f 0001 	mvn.w	r0, #1
 8001278:	4770      	bx	lr
 800127a:	f06f 0001 	mvn.w	r0, #1
}
 800127e:	4770      	bx	lr

08001280 <Config_Init>:
CONFStatus_t Config_Init(I2C_HandleTypeDef* iic){
 8001280:	b510      	push	{r4, lr}
	configuartionStatus = CONF_STAT_INIT;
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <Config_Init+0x5c>)
 8001284:	22ff      	movs	r2, #255	; 0xff
 8001286:	701a      	strb	r2, [r3, #0]
	retval |= EE_Init(iic);
 8001288:	f000 f82e 	bl	80012e8 <EE_Init>
	retval = EE_Read(&configuration, 0, CONFIG_BYTES_LEN);
 800128c:	2238      	movs	r2, #56	; 0x38
 800128e:	2100      	movs	r1, #0
 8001290:	4813      	ldr	r0, [pc, #76]	; (80012e0 <Config_Init+0x60>)
 8001292:	f000 f833 	bl	80012fc <EE_Read>
 8001296:	4603      	mov	r3, r0
	if(retval == EE_OK){
 8001298:	b138      	cbz	r0, 80012aa <Config_Init+0x2a>
	if(retval == CONF_OK){
 800129a:	b153      	cbz	r3, 80012b2 <Config_Init+0x32>
		if((retval == CONF_ERR_NOCONF) || (retval == CONF_ERR_CRC)){
 800129c:	1d5a      	adds	r2, r3, #5
 800129e:	2a01      	cmp	r2, #1
 80012a0:	d90c      	bls.n	80012bc <Config_Init+0x3c>
			configuartionStatus = CONF_STAT_ERROR;
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <Config_Init+0x5c>)
 80012a4:	21fd      	movs	r1, #253	; 0xfd
 80012a6:	7011      	strb	r1, [r2, #0]
 80012a8:	e006      	b.n	80012b8 <Config_Init+0x38>
		retval = Config_CheckData();
 80012aa:	f7ff feeb 	bl	8001084 <Config_CheckData>
 80012ae:	4603      	mov	r3, r0
 80012b0:	e7f3      	b.n	800129a <Config_Init+0x1a>
		configuartionStatus = CONF_STAT_LOADED;
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <Config_Init+0x5c>)
 80012b4:	2100      	movs	r1, #0
 80012b6:	7011      	strb	r1, [r2, #0]
}
 80012b8:	b258      	sxtb	r0, r3
 80012ba:	bd10      	pop	{r4, pc}
			Config_Copy(&configuration, &defaultConfig);
 80012bc:	4c08      	ldr	r4, [pc, #32]	; (80012e0 <Config_Init+0x60>)
 80012be:	4909      	ldr	r1, [pc, #36]	; (80012e4 <Config_Init+0x64>)
 80012c0:	4620      	mov	r0, r4
 80012c2:	f7ff ffbf 	bl	8001244 <Config_Copy>
			configuration.crc = Config_CalculateCRC();
 80012c6:	f7ff fed1 	bl	800106c <Config_CalculateCRC>
 80012ca:	6360      	str	r0, [r4, #52]	; 0x34
			retval = Config_Save();
 80012cc:	f7ff ff50 	bl	8001170 <Config_Save>
 80012d0:	4603      	mov	r3, r0
			configuartionStatus = CONF_STAT_NOCONF;
 80012d2:	4a02      	ldr	r2, [pc, #8]	; (80012dc <Config_Init+0x5c>)
 80012d4:	21fe      	movs	r1, #254	; 0xfe
 80012d6:	7011      	strb	r1, [r2, #0]
 80012d8:	e7ee      	b.n	80012b8 <Config_Init+0x38>
 80012da:	bf00      	nop
 80012dc:	2000010d 	.word	0x2000010d
 80012e0:	20000110 	.word	0x20000110
 80012e4:	0800c4b0 	.word	0x0800c4b0

080012e8 <EE_Init>:
#include "stm32f4xx_hal_i2c.h"

I2C_HandleTypeDef* ee_iic;

EE_StatusTypeDef EE_Init (I2C_HandleTypeDef* hi2c){
	if(hi2c != NULL){
 80012e8:	b118      	cbz	r0, 80012f2 <EE_Init+0xa>
		ee_iic = hi2c;
 80012ea:	4a03      	ldr	r2, [pc, #12]	; (80012f8 <EE_Init+0x10>)
 80012ec:	6010      	str	r0, [r2, #0]
		return EE_OK;
 80012ee:	2000      	movs	r0, #0
 80012f0:	4770      	bx	lr
	}
	return EE_ERR_NULL;
 80012f2:	f06f 0001 	mvn.w	r0, #1
}
 80012f6:	4770      	bx	lr
 80012f8:	20002aac 	.word	0x20002aac

080012fc <EE_Read>:

EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;

	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 80012fc:	b1e0      	cbz	r0, 8001338 <EE_Read+0x3c>
EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
 80012fe:	b510      	push	{r4, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	4604      	mov	r4, r0
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8001304:	b1da      	cbz	r2, 800133e <EE_Read+0x42>
 8001306:	4613      	mov	r3, r2
 8001308:	460a      	mov	r2, r1

	dataBuf = (uint8_t*)data;
	i2cStatus= HAL_I2C_Mem_Read(ee_iic, EE_ADDR, addr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 800130a:	4911      	ldr	r1, [pc, #68]	; (8001350 <EE_Read+0x54>)
 800130c:	6808      	ldr	r0, [r1, #0]
 800130e:	b299      	uxth	r1, r3
 8001310:	3302      	adds	r3, #2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	9302      	str	r3, [sp, #8]
 8001316:	9101      	str	r1, [sp, #4]
 8001318:	9400      	str	r4, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	21a0      	movs	r1, #160	; 0xa0
 800131e:	f005 f871 	bl	8006404 <HAL_I2C_Mem_Read>
	if(i2cStatus == HAL_OK){
 8001322:	b178      	cbz	r0, 8001344 <EE_Read+0x48>
		return EE_OK;
	}else if(i2cStatus == HAL_ERROR){
 8001324:	2801      	cmp	r0, #1
 8001326:	d010      	beq.n	800134a <EE_Read+0x4e>
		return EE_ERR_TIMEOUT;
	}else if(i2cStatus == HAL_BUSY){
 8001328:	2802      	cmp	r0, #2
 800132a:	d002      	beq.n	8001332 <EE_Read+0x36>
		return EE_ERR_BUSY;
	}else{
		return EE_ERR_TIMEOUT;
 800132c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001330:	e009      	b.n	8001346 <EE_Read+0x4a>
		return EE_ERR_BUSY;
 8001332:	f06f 0002 	mvn.w	r0, #2
 8001336:	e006      	b.n	8001346 <EE_Read+0x4a>
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8001338:	f06f 0001 	mvn.w	r0, #1
	}
}
 800133c:	4770      	bx	lr
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 800133e:	f06f 0001 	mvn.w	r0, #1
 8001342:	e000      	b.n	8001346 <EE_Read+0x4a>
		return EE_OK;
 8001344:	2000      	movs	r0, #0
}
 8001346:	b004      	add	sp, #16
 8001348:	bd10      	pop	{r4, pc}
		return EE_ERR_TIMEOUT;
 800134a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800134e:	e7fa      	b.n	8001346 <EE_Read+0x4a>
 8001350:	20002aac 	.word	0x20002aac

08001354 <EE_Write>:

EE_StatusTypeDef EE_Write (void* data, uint32_t addr, uint32_t len){
 8001354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001358:	b084      	sub	sp, #16
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;
	uint32_t datalen, i, pages, rest, bytelen, addrCpy;
	uint8_t eeBlock, eeAddr;

	if(data == NULL || len <= 0 || len >= EE_SIZE) return retval;
 800135a:	2800      	cmp	r0, #0
 800135c:	d05d      	beq.n	800141a <EE_Write+0xc6>
 800135e:	460e      	mov	r6, r1
 8001360:	4607      	mov	r7, r0
 8001362:	2a00      	cmp	r2, #0
 8001364:	d05c      	beq.n	8001420 <EE_Write+0xcc>
 8001366:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800136a:	d25c      	bcs.n	8001426 <EE_Write+0xd2>

	eeBlock = addr / EE_BLOCK_SIZE;
 800136c:	f3c1 2107 	ubfx	r1, r1, #8, #8
	eeAddr = addr % EE_BLOCK_SIZE;
 8001370:	b2f5      	uxtb	r5, r6

	dataBuf = (uint8_t*)data;
	datalen = len;
	addrCpy = addr;

	if(len <= EE_PAGE_SIZE){
 8001372:	2a10      	cmp	r2, #16
 8001374:	d90a      	bls.n	800138c <EE_Write+0x38>
			retval = EE_OK;
		}
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
	}else{
		pages = datalen >> 4;
 8001376:	ea4f 1812 	mov.w	r8, r2, lsr #4
		rest = datalen % 16;
		if(rest) pages ++;
 800137a:	f012 090f 	ands.w	r9, r2, #15
 800137e:	d001      	beq.n	8001384 <EE_Write+0x30>
 8001380:	f108 0801 	add.w	r8, r8, #1
		for(i = 0; i < pages; i++){
 8001384:	2500      	movs	r5, #0
	EE_StatusTypeDef retval = EE_ERR_NULL;
 8001386:	f06f 0a01 	mvn.w	sl, #1
		for(i = 0; i < pages; i++){
 800138a:	e036      	b.n	80013fa <EE_Write+0xa6>
		i2cStatus= HAL_I2C_Mem_Write(ee_iic, EE_ADDR + eeBlock, eeAddr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <EE_Write+0xf0>)
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	b293      	uxth	r3, r2
 8001392:	1c94      	adds	r4, r2, #2
 8001394:	00a4      	lsls	r4, r4, #2
 8001396:	9402      	str	r4, [sp, #8]
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	9700      	str	r7, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	462a      	mov	r2, r5
 80013a0:	31a0      	adds	r1, #160	; 0xa0
 80013a2:	f004 ff7b 	bl	800629c <HAL_I2C_Mem_Write>
		if(i2cStatus == HAL_OK){
 80013a6:	b130      	cbz	r0, 80013b6 <EE_Write+0x62>
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 80013a8:	2801      	cmp	r0, #1
 80013aa:	d03f      	beq.n	800142c <EE_Write+0xd8>
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 80013ac:	2802      	cmp	r0, #2
 80013ae:	d040      	beq.n	8001432 <EE_Write+0xde>
	EE_StatusTypeDef retval = EE_ERR_NULL;
 80013b0:	f06f 0a01 	mvn.w	sl, #1
 80013b4:	e02d      	b.n	8001412 <EE_Write+0xbe>
			vTaskDelay(EE_BYTE_WRITE_TIME * (len + 2));
 80013b6:	4620      	mov	r0, r4
 80013b8:	f008 fb32 	bl	8009a20 <vTaskDelay>
			retval = EE_OK;
 80013bc:	f04f 0a00 	mov.w	sl, #0
 80013c0:	e027      	b.n	8001412 <EE_Write+0xbe>
			if(i == pages - 1){
				bytelen = rest;
 80013c2:	464c      	mov	r4, r9
			}else{
				bytelen = 16;
			}
			i2cStatus = HAL_I2C_Mem_Write(ee_iic, EE_ADDR, addrCpy, 1, dataBuf, bytelen, EE_BYTE_WRITE_TIME * (bytelen + 2));
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <EE_Write+0xf0>)
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	1ca3      	adds	r3, r4, #2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	9302      	str	r3, [sp, #8]
 80013ce:	9401      	str	r4, [sp, #4]
 80013d0:	9700      	str	r7, [sp, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	b2b2      	uxth	r2, r6
 80013d6:	21a0      	movs	r1, #160	; 0xa0
 80013d8:	f004 ff60 	bl	800629c <HAL_I2C_Mem_Write>
			if(i2cStatus == HAL_OK){
 80013dc:	b9a8      	cbnz	r0, 800140a <EE_Write+0xb6>
				dataBuf += bytelen;
 80013de:	4427      	add	r7, r4
				addrCpy += bytelen;
 80013e0:	4426      	add	r6, r4
				retval = EE_OK;
				while(HAL_I2C_IsDeviceReady(ee_iic, EE_ADDR, 10, 10) != HAL_OK);
 80013e2:	230a      	movs	r3, #10
 80013e4:	461a      	mov	r2, r3
 80013e6:	21a0      	movs	r1, #160	; 0xa0
 80013e8:	4816      	ldr	r0, [pc, #88]	; (8001444 <EE_Write+0xf0>)
 80013ea:	6800      	ldr	r0, [r0, #0]
 80013ec:	f005 f972 	bl	80066d4 <HAL_I2C_IsDeviceReady>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d1f6      	bne.n	80013e2 <EE_Write+0x8e>
		for(i = 0; i < pages; i++){
 80013f4:	3501      	adds	r5, #1
				retval = EE_OK;
 80013f6:	f04f 0a00 	mov.w	sl, #0
		for(i = 0; i < pages; i++){
 80013fa:	4545      	cmp	r5, r8
 80013fc:	d209      	bcs.n	8001412 <EE_Write+0xbe>
			if(i == pages - 1){
 80013fe:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8001402:	42ab      	cmp	r3, r5
 8001404:	d0dd      	beq.n	80013c2 <EE_Write+0x6e>
				bytelen = 16;
 8001406:	2410      	movs	r4, #16
 8001408:	e7dc      	b.n	80013c4 <EE_Write+0x70>
				//vTaskDelay((bytelen + 2) * EE_BYTE_WRITE_TIME);
			}else{
				if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 800140a:	2801      	cmp	r0, #1
 800140c:	d014      	beq.n	8001438 <EE_Write+0xe4>
				else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 800140e:	2802      	cmp	r0, #2
 8001410:	d015      	beq.n	800143e <EE_Write+0xea>
				break;
			}
		}
	}
	return retval;
}
 8001412:	4650      	mov	r0, sl
 8001414:	b004      	add	sp, #16
 8001416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if(data == NULL || len <= 0 || len >= EE_SIZE) return retval;
 800141a:	f06f 0a01 	mvn.w	sl, #1
 800141e:	e7f8      	b.n	8001412 <EE_Write+0xbe>
 8001420:	f06f 0a01 	mvn.w	sl, #1
 8001424:	e7f5      	b.n	8001412 <EE_Write+0xbe>
 8001426:	f06f 0a01 	mvn.w	sl, #1
 800142a:	e7f2      	b.n	8001412 <EE_Write+0xbe>
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 800142c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8001430:	e7ef      	b.n	8001412 <EE_Write+0xbe>
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 8001432:	f06f 0a02 	mvn.w	sl, #2
 8001436:	e7ec      	b.n	8001412 <EE_Write+0xbe>
				if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001438:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800143c:	e7e9      	b.n	8001412 <EE_Write+0xbe>
				else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 800143e:	f06f 0a02 	mvn.w	sl, #2
 8001442:	e7e6      	b.n	8001412 <EE_Write+0xbe>
 8001444:	20002aac 	.word	0x20002aac

08001448 <EE_Erease>:

EE_StatusTypeDef EE_Erease (void){
 8001448:	b530      	push	{r4, r5, lr}
 800144a:	b085      	sub	sp, #20
	uint32_t i;
	int32_t retval = 0;
	uint8_t blankData[16];
	memset(blankData, 255, 16);
 800144c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	9302      	str	r3, [sp, #8]
 8001456:	9303      	str	r3, [sp, #12]
	int32_t retval = 0;
 8001458:	2500      	movs	r5, #0

	for(i = 0; i < EE_SIZE; i += 16){
 800145a:	462c      	mov	r4, r5
 800145c:	e006      	b.n	800146c <EE_Erease+0x24>
		retval |= EE_Write(blankData, i, 16);
 800145e:	2210      	movs	r2, #16
 8001460:	4621      	mov	r1, r4
 8001462:	4668      	mov	r0, sp
 8001464:	f7ff ff76 	bl	8001354 <EE_Write>
 8001468:	4305      	orrs	r5, r0
	for(i = 0; i < EE_SIZE; i += 16){
 800146a:	3410      	adds	r4, #16
 800146c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001470:	d3f5      	bcc.n	800145e <EE_Erease+0x16>
	}
	return retval;
}
 8001472:	b268      	sxtb	r0, r5
 8001474:	b005      	add	sp, #20
 8001476:	bd30      	pop	{r4, r5, pc}

08001478 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001478:	b530      	push	{r4, r5, lr}
 800147a:	b083      	sub	sp, #12
 800147c:	4605      	mov	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800147e:	4c16      	ldr	r4, [pc, #88]	; (80014d8 <WIZCHIP_READ+0x60>)
 8001480:	68e3      	ldr	r3, [r4, #12]
 8001482:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001484:	6963      	ldr	r3, [r4, #20]
 8001486:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800148a:	b9b3      	cbnz	r3, 80014ba <WIZCHIP_READ+0x42>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800148c:	4c12      	ldr	r4, [pc, #72]	; (80014d8 <WIZCHIP_READ+0x60>)
 800148e:	6a23      	ldr	r3, [r4, #32]
 8001490:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8001494:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001496:	6a23      	ldr	r3, [r4, #32]
 8001498:	f3c5 2007 	ubfx	r0, r5, #8, #8
 800149c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800149e:	6a23      	ldr	r3, [r4, #32]
 80014a0:	b2e8      	uxtb	r0, r5
 80014a2:	4798      	blx	r3
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80014a4:	4c0c      	ldr	r4, [pc, #48]	; (80014d8 <WIZCHIP_READ+0x60>)
 80014a6:	69e3      	ldr	r3, [r4, #28]
 80014a8:	4798      	blx	r3
 80014aa:	4605      	mov	r5, r0

   WIZCHIP.CS._deselect();
 80014ac:	69a3      	ldr	r3, [r4, #24]
 80014ae:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80014b0:	6923      	ldr	r3, [r4, #16]
 80014b2:	4798      	blx	r3
   return ret;
}
 80014b4:	4628      	mov	r0, r5
 80014b6:	b003      	add	sp, #12
 80014b8:	bd30      	pop	{r4, r5, pc}
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80014ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0e5      	beq.n	800148c <WIZCHIP_READ+0x14>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80014c0:	0c2a      	lsrs	r2, r5, #16
 80014c2:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80014c6:	0a2a      	lsrs	r2, r5, #8
 80014c8:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80014cc:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80014d0:	2103      	movs	r1, #3
 80014d2:	a801      	add	r0, sp, #4
 80014d4:	4798      	blx	r3
 80014d6:	e7e5      	b.n	80014a4 <WIZCHIP_READ+0x2c>
 80014d8:	20000004 	.word	0x20000004

080014dc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80014dc:	b570      	push	{r4, r5, r6, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	4604      	mov	r4, r0
 80014e2:	460e      	mov	r6, r1
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80014e4:	4d16      	ldr	r5, [pc, #88]	; (8001540 <WIZCHIP_WRITE+0x64>)
 80014e6:	68eb      	ldr	r3, [r5, #12]
 80014e8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80014ea:	696b      	ldr	r3, [r5, #20]
 80014ec:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80014ee:	f044 0404 	orr.w	r4, r4, #4

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80014f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80014f4:	b1a3      	cbz	r3, 8001520 <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80014f6:	0c22      	lsrs	r2, r4, #16
 80014f8:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80014fc:	0a22      	lsrs	r2, r4, #8
 80014fe:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001502:	f88d 4006 	strb.w	r4, [sp, #6]
		spi_data[3] = wb;
 8001506:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800150a:	2104      	movs	r1, #4
 800150c:	eb0d 0001 	add.w	r0, sp, r1
 8001510:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001512:	4c0b      	ldr	r4, [pc, #44]	; (8001540 <WIZCHIP_WRITE+0x64>)
 8001514:	69a3      	ldr	r3, [r4, #24]
 8001516:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001518:	6923      	ldr	r3, [r4, #16]
 800151a:	4798      	blx	r3
}
 800151c:	b002      	add	sp, #8
 800151e:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001520:	6a2b      	ldr	r3, [r5, #32]
 8001522:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001526:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001528:	6a2b      	ldr	r3, [r5, #32]
 800152a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800152e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001530:	6a2b      	ldr	r3, [r5, #32]
 8001532:	b2e0      	uxtb	r0, r4
 8001534:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001536:	6a2b      	ldr	r3, [r5, #32]
 8001538:	4630      	mov	r0, r6
 800153a:	4798      	blx	r3
 800153c:	e7e9      	b.n	8001512 <WIZCHIP_WRITE+0x36>
 800153e:	bf00      	nop
 8001540:	20000004 	.word	0x20000004

08001544 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001546:	b083      	sub	sp, #12
 8001548:	4604      	mov	r4, r0
 800154a:	460e      	mov	r6, r1
 800154c:	4615      	mov	r5, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800154e:	4f1c      	ldr	r7, [pc, #112]	; (80015c0 <WIZCHIP_READ_BUF+0x7c>)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	b96b      	cbnz	r3, 8001578 <WIZCHIP_READ_BUF+0x34>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800155c:	4f18      	ldr	r7, [pc, #96]	; (80015c0 <WIZCHIP_READ_BUF+0x7c>)
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001564:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001566:	6a3b      	ldr	r3, [r7, #32]
 8001568:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800156c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	b2e0      	uxtb	r0, r4
 8001572:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001574:	2400      	movs	r4, #0
 8001576:	e019      	b.n	80015ac <WIZCHIP_READ_BUF+0x68>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0ee      	beq.n	800155c <WIZCHIP_READ_BUF+0x18>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800157e:	0c22      	lsrs	r2, r4, #16
 8001580:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001584:	0a22      	lsrs	r2, r4, #8
 8001586:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800158a:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800158e:	2103      	movs	r1, #3
 8001590:	a801      	add	r0, sp, #4
 8001592:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <WIZCHIP_READ_BUF+0x7c>)
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	4629      	mov	r1, r5
 800159a:	4630      	mov	r0, r6
 800159c:	4798      	blx	r3
 800159e:	e007      	b.n	80015b0 <WIZCHIP_READ_BUF+0x6c>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <WIZCHIP_READ_BUF+0x7c>)
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	4798      	blx	r3
 80015a6:	5530      	strb	r0, [r6, r4]
		for(i = 0; i < len; i++)
 80015a8:	3401      	adds	r4, #1
 80015aa:	b2a4      	uxth	r4, r4
 80015ac:	42ac      	cmp	r4, r5
 80015ae:	d3f7      	bcc.n	80015a0 <WIZCHIP_READ_BUF+0x5c>
   }

   WIZCHIP.CS._deselect();
 80015b0:	4c03      	ldr	r4, [pc, #12]	; (80015c0 <WIZCHIP_READ_BUF+0x7c>)
 80015b2:	69a3      	ldr	r3, [r4, #24]
 80015b4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80015b6:	6923      	ldr	r3, [r4, #16]
 80015b8:	4798      	blx	r3
}
 80015ba:	b003      	add	sp, #12
 80015bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000004 	.word	0x20000004

080015c4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80015c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c6:	b083      	sub	sp, #12
 80015c8:	4604      	mov	r4, r0
 80015ca:	460f      	mov	r7, r1
 80015cc:	4616      	mov	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80015ce:	4d1b      	ldr	r5, [pc, #108]	; (800163c <WIZCHIP_WRITE_BUF+0x78>)
 80015d0:	68eb      	ldr	r3, [r5, #12]
 80015d2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80015d4:	696b      	ldr	r3, [r5, #20]
 80015d6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80015d8:	f044 0404 	orr.w	r4, r4, #4

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80015dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80015de:	b1b3      	cbz	r3, 800160e <WIZCHIP_WRITE_BUF+0x4a>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80015e0:	0c22      	lsrs	r2, r4, #16
 80015e2:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80015e6:	0a22      	lsrs	r2, r4, #8
 80015e8:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80015ec:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80015f0:	2103      	movs	r1, #3
 80015f2:	a801      	add	r0, sp, #4
 80015f4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <WIZCHIP_WRITE_BUF+0x78>)
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	4631      	mov	r1, r6
 80015fc:	4638      	mov	r0, r7
 80015fe:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001600:	4c0e      	ldr	r4, [pc, #56]	; (800163c <WIZCHIP_WRITE_BUF+0x78>)
 8001602:	69a3      	ldr	r3, [r4, #24]
 8001604:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001606:	6923      	ldr	r3, [r4, #16]
 8001608:	4798      	blx	r3
}
 800160a:	b003      	add	sp, #12
 800160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800160e:	6a2b      	ldr	r3, [r5, #32]
 8001610:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001614:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001616:	6a2b      	ldr	r3, [r5, #32]
 8001618:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800161c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800161e:	6a2b      	ldr	r3, [r5, #32]
 8001620:	b2e0      	uxtb	r0, r4
 8001622:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001624:	2400      	movs	r4, #0
 8001626:	e005      	b.n	8001634 <WIZCHIP_WRITE_BUF+0x70>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <WIZCHIP_WRITE_BUF+0x78>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	5d38      	ldrb	r0, [r7, r4]
 800162e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001630:	3401      	adds	r4, #1
 8001632:	b2a4      	uxth	r4, r4
 8001634:	42b4      	cmp	r4, r6
 8001636:	d3f7      	bcc.n	8001628 <WIZCHIP_WRITE_BUF+0x64>
 8001638:	e7e2      	b.n	8001600 <WIZCHIP_WRITE_BUF+0x3c>
 800163a:	bf00      	nop
 800163c:	20000004 	.word	0x20000004

08001640 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001644:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 8001646:	2500      	movs	r5, #0
 8001648:	e001      	b.n	800164e <getSn_TX_FSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
 800164a:	42a5      	cmp	r5, r4
 800164c:	d024      	beq.n	8001698 <getSn_TX_FSR+0x58>
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800164e:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8001652:	f108 0801 	add.w	r8, r8, #1
 8001656:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800165a:	f508 5600 	add.w	r6, r8, #8192	; 0x2000
 800165e:	4630      	mov	r0, r6
 8001660:	f7ff ff0a 	bl	8001478 <WIZCHIP_READ>
 8001664:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001666:	0224      	lsls	r4, r4, #8
 8001668:	b2a4      	uxth	r4, r4
 800166a:	f508 5804 	add.w	r8, r8, #8448	; 0x2100
 800166e:	4640      	mov	r0, r8
 8001670:	f7ff ff02 	bl	8001478 <WIZCHIP_READ>
 8001674:	fa14 f480 	uxtah	r4, r4, r0
 8001678:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 800167a:	2c00      	cmp	r4, #0
 800167c:	d0e5      	beq.n	800164a <getSn_TX_FSR+0xa>
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800167e:	4630      	mov	r0, r6
 8001680:	f7ff fefa 	bl	8001478 <WIZCHIP_READ>
 8001684:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001686:	022d      	lsls	r5, r5, #8
 8001688:	b2ad      	uxth	r5, r5
 800168a:	4640      	mov	r0, r8
 800168c:	f7ff fef4 	bl	8001478 <WIZCHIP_READ>
 8001690:	fa15 f580 	uxtah	r5, r5, r0
 8001694:	b2ad      	uxth	r5, r5
 8001696:	e7d8      	b.n	800164a <getSn_TX_FSR+0xa>
   return val;
}
 8001698:	4628      	mov	r0, r5
 800169a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800169e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800169e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016a2:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 80016a4:	2500      	movs	r5, #0
 80016a6:	e001      	b.n	80016ac <getSn_RX_RSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
 80016a8:	42a5      	cmp	r5, r4
 80016aa:	d024      	beq.n	80016f6 <getSn_RX_RSR+0x58>
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80016ac:	ea4f 0887 	mov.w	r8, r7, lsl #2
 80016b0:	f108 0801 	add.w	r8, r8, #1
 80016b4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80016b8:	f508 5618 	add.w	r6, r8, #9728	; 0x2600
 80016bc:	4630      	mov	r0, r6
 80016be:	f7ff fedb 	bl	8001478 <WIZCHIP_READ>
 80016c2:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80016c4:	0224      	lsls	r4, r4, #8
 80016c6:	b2a4      	uxth	r4, r4
 80016c8:	f508 581c 	add.w	r8, r8, #9984	; 0x2700
 80016cc:	4640      	mov	r0, r8
 80016ce:	f7ff fed3 	bl	8001478 <WIZCHIP_READ>
 80016d2:	fa14 f480 	uxtah	r4, r4, r0
 80016d6:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 80016d8:	2c00      	cmp	r4, #0
 80016da:	d0e5      	beq.n	80016a8 <getSn_RX_RSR+0xa>
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80016dc:	4630      	mov	r0, r6
 80016de:	f7ff fecb 	bl	8001478 <WIZCHIP_READ>
 80016e2:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80016e4:	022d      	lsls	r5, r5, #8
 80016e6:	b2ad      	uxth	r5, r5
 80016e8:	4640      	mov	r0, r8
 80016ea:	f7ff fec5 	bl	8001478 <WIZCHIP_READ>
 80016ee:	fa15 f580 	uxtah	r5, r5, r0
 80016f2:	b2ad      	uxth	r5, r5
 80016f4:	e7d8      	b.n	80016a8 <getSn_RX_RSR+0xa>
   return val;
}
 80016f6:	4628      	mov	r0, r5
 80016f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080016fc <wiz_send_data>:
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 80016fc:	b902      	cbnz	r2, 8001700 <wiz_send_data+0x4>
 80016fe:	4770      	bx	lr
{
 8001700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001704:	4615      	mov	r5, r2
 8001706:	460f      	mov	r7, r1
   ptr = getSn_TX_WR(sn);
 8001708:	0084      	lsls	r4, r0, #2
 800170a:	f104 0901 	add.w	r9, r4, #1
 800170e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001712:	f509 5810 	add.w	r8, r9, #9216	; 0x2400
 8001716:	4640      	mov	r0, r8
 8001718:	f7ff feae 	bl	8001478 <WIZCHIP_READ>
 800171c:	b286      	uxth	r6, r0
 800171e:	0236      	lsls	r6, r6, #8
 8001720:	b2b6      	uxth	r6, r6
 8001722:	f509 5914 	add.w	r9, r9, #9472	; 0x2500
 8001726:	4648      	mov	r0, r9
 8001728:	f7ff fea6 	bl	8001478 <WIZCHIP_READ>
 800172c:	fa16 f680 	uxtah	r6, r6, r0
 8001730:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001732:	1ca0      	adds	r0, r4, #2
 8001734:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001736:	462a      	mov	r2, r5
 8001738:	4639      	mov	r1, r7
 800173a:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 800173e:	f7ff ff41 	bl	80015c4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001742:	4435      	add	r5, r6
 8001744:	b2ad      	uxth	r5, r5
   setSn_TX_WR(sn,ptr);
 8001746:	0a29      	lsrs	r1, r5, #8
 8001748:	4640      	mov	r0, r8
 800174a:	f7ff fec7 	bl	80014dc <WIZCHIP_WRITE>
 800174e:	b2e9      	uxtb	r1, r5
 8001750:	4648      	mov	r0, r9
 8001752:	f7ff fec3 	bl	80014dc <WIZCHIP_WRITE>
}
 8001756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800175a <wiz_recv_data>:
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 800175a:	b902      	cbnz	r2, 800175e <wiz_recv_data+0x4>
 800175c:	4770      	bx	lr
{
 800175e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001762:	4615      	mov	r5, r2
 8001764:	460f      	mov	r7, r1
   ptr = getSn_RX_RD(sn);
 8001766:	0084      	lsls	r4, r0, #2
 8001768:	f104 0901 	add.w	r9, r4, #1
 800176c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001770:	f509 5820 	add.w	r8, r9, #10240	; 0x2800
 8001774:	4640      	mov	r0, r8
 8001776:	f7ff fe7f 	bl	8001478 <WIZCHIP_READ>
 800177a:	b286      	uxth	r6, r0
 800177c:	0236      	lsls	r6, r6, #8
 800177e:	b2b6      	uxth	r6, r6
 8001780:	f509 5924 	add.w	r9, r9, #10496	; 0x2900
 8001784:	4648      	mov	r0, r9
 8001786:	f7ff fe77 	bl	8001478 <WIZCHIP_READ>
 800178a:	fa16 f680 	uxtah	r6, r6, r0
 800178e:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8001790:	1ce0      	adds	r0, r4, #3
 8001792:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001794:	462a      	mov	r2, r5
 8001796:	4639      	mov	r1, r7
 8001798:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 800179c:	f7ff fed2 	bl	8001544 <WIZCHIP_READ_BUF>
   ptr += len;
 80017a0:	4435      	add	r5, r6
 80017a2:	b2ad      	uxth	r5, r5
   
   setSn_RX_RD(sn,ptr);
 80017a4:	0a29      	lsrs	r1, r5, #8
 80017a6:	4640      	mov	r0, r8
 80017a8:	f7ff fe98 	bl	80014dc <WIZCHIP_WRITE>
 80017ac:	b2e9      	uxtb	r1, r5
 80017ae:	4648      	mov	r0, r9
 80017b0:	f7ff fe94 	bl	80014dc <WIZCHIP_WRITE>
}
 80017b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080017b8 <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 80017b8:	2808      	cmp	r0, #8
 80017ba:	d82e      	bhi.n	800181a <close+0x62>
{
 80017bc:	b570      	push	{r4, r5, r6, lr}
 80017be:	4606      	mov	r6, r0
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80017c0:	0084      	lsls	r4, r0, #2
 80017c2:	3401      	adds	r4, #1
 80017c4:	00e4      	lsls	r4, r4, #3
 80017c6:	f504 7580 	add.w	r5, r4, #256	; 0x100
 80017ca:	2110      	movs	r1, #16
 80017cc:	4628      	mov	r0, r5
 80017ce:	f7ff fe85 	bl	80014dc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80017d2:	4628      	mov	r0, r5
 80017d4:	f7ff fe50 	bl	8001478 <WIZCHIP_READ>
 80017d8:	2800      	cmp	r0, #0
 80017da:	d1fa      	bne.n	80017d2 <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80017dc:	211f      	movs	r1, #31
 80017de:	f504 7000 	add.w	r0, r4, #512	; 0x200
 80017e2:	f7ff fe7b 	bl	80014dc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80017e6:	2301      	movs	r3, #1
 80017e8:	40b3      	lsls	r3, r6
 80017ea:	43db      	mvns	r3, r3
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	490c      	ldr	r1, [pc, #48]	; (8001820 <close+0x68>)
 80017f0:	880a      	ldrh	r2, [r1, #0]
 80017f2:	401a      	ands	r2, r3
 80017f4:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80017f6:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <close+0x6c>)
 80017f8:	8811      	ldrh	r1, [r2, #0]
 80017fa:	400b      	ands	r3, r1
 80017fc:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	4a09      	ldr	r2, [pc, #36]	; (8001828 <close+0x70>)
 8001802:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
	sock_pack_info[sn] = 0;
 8001806:	4a09      	ldr	r2, [pc, #36]	; (800182c <close+0x74>)
 8001808:	5593      	strb	r3, [r2, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800180a:	f504 7040 	add.w	r0, r4, #768	; 0x300
 800180e:	f7ff fe33 	bl	8001478 <WIZCHIP_READ>
 8001812:	2800      	cmp	r0, #0
 8001814:	d1f9      	bne.n	800180a <close+0x52>
	return SOCK_OK;
 8001816:	2001      	movs	r0, #1
}
 8001818:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 800181a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800181e:	4770      	bx	lr
 8001820:	20000148 	.word	0x20000148
 8001824:	2000014a 	.word	0x2000014a
 8001828:	20000154 	.word	0x20000154
 800182c:	2000014c 	.word	0x2000014c

08001830 <socket>:
	CHECK_SOCKNUM();
 8001830:	2808      	cmp	r0, #8
 8001832:	f200 8093 	bhi.w	800195c <socket+0x12c>
{
 8001836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	4605      	mov	r5, r0
 800183e:	460f      	mov	r7, r1
 8001840:	4690      	mov	r8, r2
 8001842:	461e      	mov	r6, r3
	switch(protocol)
 8001844:	2901      	cmp	r1, #1
 8001846:	d062      	beq.n	800190e <socket+0xde>
 8001848:	2900      	cmp	r1, #0
 800184a:	f000 808a 	beq.w	8001962 <socket+0x132>
 800184e:	2904      	cmp	r1, #4
 8001850:	f200 8087 	bhi.w	8001962 <socket+0x132>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001854:	f016 0f04 	tst.w	r6, #4
 8001858:	f040 8086 	bne.w	8001968 <socket+0x138>
	if(flag != 0)
 800185c:	b11e      	cbz	r6, 8001866 <socket+0x36>
   	switch(protocol)
 800185e:	2f01      	cmp	r7, #1
 8001860:	d062      	beq.n	8001928 <socket+0xf8>
 8001862:	2f02      	cmp	r7, #2
 8001864:	d066      	beq.n	8001934 <socket+0x104>
	close(sn);
 8001866:	4628      	mov	r0, r5
 8001868:	f7ff ffa6 	bl	80017b8 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800186c:	00ac      	lsls	r4, r5, #2
 800186e:	3401      	adds	r4, #1
 8001870:	00e4      	lsls	r4, r4, #3
 8001872:	f026 010f 	bic.w	r1, r6, #15
 8001876:	b249      	sxtb	r1, r1
 8001878:	4339      	orrs	r1, r7
 800187a:	b2c9      	uxtb	r1, r1
 800187c:	4620      	mov	r0, r4
 800187e:	f7ff fe2d 	bl	80014dc <WIZCHIP_WRITE>
	if(!port)
 8001882:	f1b8 0f00 	cmp.w	r8, #0
 8001886:	d10a      	bne.n	800189e <socket+0x6e>
	   port = sock_any_port++;
 8001888:	4a3a      	ldr	r2, [pc, #232]	; (8001974 <socket+0x144>)
 800188a:	f8b2 8000 	ldrh.w	r8, [r2]
 800188e:	f108 0301 	add.w	r3, r8, #1
 8001892:	b29b      	uxth	r3, r3
 8001894:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001896:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800189a:	4293      	cmp	r3, r2
 800189c:	d059      	beq.n	8001952 <socket+0x122>
   setSn_PORT(sn,port);	
 800189e:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80018a2:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 80018a6:	f7ff fe19 	bl	80014dc <WIZCHIP_WRITE>
 80018aa:	fa5f f188 	uxtb.w	r1, r8
 80018ae:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 80018b2:	f7ff fe13 	bl	80014dc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80018b6:	f504 7780 	add.w	r7, r4, #256	; 0x100
 80018ba:	2101      	movs	r1, #1
 80018bc:	4638      	mov	r0, r7
 80018be:	f7ff fe0d 	bl	80014dc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80018c2:	4638      	mov	r0, r7
 80018c4:	f7ff fdd8 	bl	8001478 <WIZCHIP_READ>
 80018c8:	2800      	cmp	r0, #0
 80018ca:	d1fa      	bne.n	80018c2 <socket+0x92>
   sock_io_mode &= ~(1 <<sn);
 80018cc:	2201      	movs	r2, #1
 80018ce:	40aa      	lsls	r2, r5
 80018d0:	43d2      	mvns	r2, r2
 80018d2:	b212      	sxth	r2, r2
 80018d4:	4928      	ldr	r1, [pc, #160]	; (8001978 <socket+0x148>)
 80018d6:	880b      	ldrh	r3, [r1, #0]
 80018d8:	4013      	ands	r3, r2
 80018da:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80018dc:	f006 0601 	and.w	r6, r6, #1
 80018e0:	40ae      	lsls	r6, r5
 80018e2:	431e      	orrs	r6, r3
 80018e4:	800e      	strh	r6, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 80018e6:	4b25      	ldr	r3, [pc, #148]	; (800197c <socket+0x14c>)
 80018e8:	8819      	ldrh	r1, [r3, #0]
 80018ea:	400a      	ands	r2, r1
 80018ec:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	4a23      	ldr	r2, [pc, #140]	; (8001980 <socket+0x150>)
 80018f2:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 80018f6:	4a23      	ldr	r2, [pc, #140]	; (8001984 <socket+0x154>)
 80018f8:	5553      	strb	r3, [r2, r5]
   while(getSn_SR(sn) == SOCK_CLOSED);
 80018fa:	f504 7040 	add.w	r0, r4, #768	; 0x300
 80018fe:	f7ff fdbb 	bl	8001478 <WIZCHIP_READ>
 8001902:	2800      	cmp	r0, #0
 8001904:	d0f9      	beq.n	80018fa <socket+0xca>
   return (int8_t)sn;
 8001906:	b268      	sxtb	r0, r5
}	   
 8001908:	b002      	add	sp, #8
 800190a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            getSIPR((uint8_t*)&taddr);
 800190e:	2204      	movs	r2, #4
 8001910:	eb0d 0102 	add.w	r1, sp, r2
 8001914:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001918:	f7ff fe14 	bl	8001544 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800191c:	9b01      	ldr	r3, [sp, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d198      	bne.n	8001854 <socket+0x24>
 8001922:	f06f 0002 	mvn.w	r0, #2
 8001926:	e7ef      	b.n	8001908 <socket+0xd8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001928:	f016 0f21 	tst.w	r6, #33	; 0x21
 800192c:	d19b      	bne.n	8001866 <socket+0x36>
 800192e:	f06f 0005 	mvn.w	r0, #5
 8001932:	e7e9      	b.n	8001908 <socket+0xd8>
   	      if(flag & SF_IGMP_VER2)
 8001934:	f016 0f20 	tst.w	r6, #32
 8001938:	d002      	beq.n	8001940 <socket+0x110>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800193a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800193e:	d016      	beq.n	800196e <socket+0x13e>
      	      if(flag & SF_UNI_BLOCK)
 8001940:	f016 0f10 	tst.w	r6, #16
 8001944:	d08f      	beq.n	8001866 <socket+0x36>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001946:	f016 0f80 	tst.w	r6, #128	; 0x80
 800194a:	d18c      	bne.n	8001866 <socket+0x36>
 800194c:	f06f 0005 	mvn.w	r0, #5
 8001950:	e7da      	b.n	8001908 <socket+0xd8>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <socket+0x144>)
 8001954:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001958:	801a      	strh	r2, [r3, #0]
 800195a:	e7a0      	b.n	800189e <socket+0x6e>
	CHECK_SOCKNUM();
 800195c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}	   
 8001960:	4770      	bx	lr
         return SOCKERR_SOCKMODE;
 8001962:	f06f 0004 	mvn.w	r0, #4
 8001966:	e7cf      	b.n	8001908 <socket+0xd8>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001968:	f06f 0005 	mvn.w	r0, #5
 800196c:	e7cc      	b.n	8001908 <socket+0xd8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800196e:	f06f 0005 	mvn.w	r0, #5
 8001972:	e7c9      	b.n	8001908 <socket+0xd8>
 8001974:	20000000 	.word	0x20000000
 8001978:	20000148 	.word	0x20000148
 800197c:	2000014a 	.word	0x2000014a
 8001980:	20000154 	.word	0x20000154
 8001984:	2000014c 	.word	0x2000014c

08001988 <listen>:

int8_t listen(uint8_t sn)
{
	CHECK_SOCKNUM();
 8001988:	2808      	cmp	r0, #8
 800198a:	d82a      	bhi.n	80019e2 <listen+0x5a>
{
 800198c:	b570      	push	{r4, r5, r6, lr}
 800198e:	4605      	mov	r5, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001990:	0084      	lsls	r4, r0, #2
 8001992:	3401      	adds	r4, #1
 8001994:	00e4      	lsls	r4, r4, #3
 8001996:	4620      	mov	r0, r4
 8001998:	f7ff fd6e 	bl	8001478 <WIZCHIP_READ>
 800199c:	f000 000f 	and.w	r0, r0, #15
 80019a0:	2801      	cmp	r0, #1
 80019a2:	d121      	bne.n	80019e8 <listen+0x60>
	CHECK_SOCKINIT();
 80019a4:	f504 7640 	add.w	r6, r4, #768	; 0x300
 80019a8:	4630      	mov	r0, r6
 80019aa:	f7ff fd65 	bl	8001478 <WIZCHIP_READ>
 80019ae:	2813      	cmp	r0, #19
 80019b0:	d11d      	bne.n	80019ee <listen+0x66>
	setSn_CR(sn,Sn_CR_LISTEN);
 80019b2:	f504 7480 	add.w	r4, r4, #256	; 0x100
 80019b6:	2102      	movs	r1, #2
 80019b8:	4620      	mov	r0, r4
 80019ba:	f7ff fd8f 	bl	80014dc <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80019be:	4620      	mov	r0, r4
 80019c0:	f7ff fd5a 	bl	8001478 <WIZCHIP_READ>
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d1fa      	bne.n	80019be <listen+0x36>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80019c8:	4630      	mov	r0, r6
 80019ca:	f7ff fd55 	bl	8001478 <WIZCHIP_READ>
 80019ce:	2814      	cmp	r0, #20
 80019d0:	d101      	bne.n	80019d6 <listen+0x4e>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 80019d2:	2001      	movs	r0, #1
}
 80019d4:	bd70      	pop	{r4, r5, r6, pc}
         close(sn);
 80019d6:	4628      	mov	r0, r5
 80019d8:	f7ff feee 	bl	80017b8 <close>
         return SOCKERR_SOCKCLOSED;
 80019dc:	f06f 0003 	mvn.w	r0, #3
 80019e0:	e7f8      	b.n	80019d4 <listen+0x4c>
	CHECK_SOCKNUM();
 80019e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80019e6:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 80019e8:	f06f 0004 	mvn.w	r0, #4
 80019ec:	e7f2      	b.n	80019d4 <listen+0x4c>
	CHECK_SOCKINIT();
 80019ee:	f06f 0002 	mvn.w	r0, #2
 80019f2:	e7ef      	b.n	80019d4 <listen+0x4c>

080019f4 <disconnect>:
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
 80019f4:	2808      	cmp	r0, #8
 80019f6:	d838      	bhi.n	8001a6a <disconnect+0x76>
{
 80019f8:	b570      	push	{r4, r5, r6, lr}
 80019fa:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 80019fc:	0084      	lsls	r4, r0, #2
 80019fe:	3401      	adds	r4, #1
 8001a00:	00e4      	lsls	r4, r4, #3
 8001a02:	4620      	mov	r0, r4
 8001a04:	f7ff fd38 	bl	8001478 <WIZCHIP_READ>
 8001a08:	f000 000f 	and.w	r0, r0, #15
 8001a0c:	2801      	cmp	r0, #1
 8001a0e:	d12f      	bne.n	8001a70 <disconnect+0x7c>
	setSn_CR(sn,Sn_CR_DISCON);
 8001a10:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8001a14:	2108      	movs	r1, #8
 8001a16:	4628      	mov	r0, r5
 8001a18:	f7ff fd60 	bl	80014dc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001a1c:	4628      	mov	r0, r5
 8001a1e:	f7ff fd2b 	bl	8001478 <WIZCHIP_READ>
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d1fa      	bne.n	8001a1c <disconnect+0x28>
	sock_is_sending &= ~(1<<sn);
 8001a26:	2301      	movs	r3, #1
 8001a28:	fa03 f206 	lsl.w	r2, r3, r6
 8001a2c:	4913      	ldr	r1, [pc, #76]	; (8001a7c <disconnect+0x88>)
 8001a2e:	880b      	ldrh	r3, [r1, #0]
 8001a30:	ea23 0302 	bic.w	r3, r3, r2
 8001a34:	800b      	strh	r3, [r1, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <disconnect+0x8c>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	4133      	asrs	r3, r6
 8001a3c:	f013 0f01 	tst.w	r3, #1
 8001a40:	d119      	bne.n	8001a76 <disconnect+0x82>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001a42:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8001a46:	f7ff fd17 	bl	8001478 <WIZCHIP_READ>
 8001a4a:	b160      	cbz	r0, 8001a66 <disconnect+0x72>
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001a4c:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8001a50:	f7ff fd12 	bl	8001478 <WIZCHIP_READ>
 8001a54:	f010 0f08 	tst.w	r0, #8
 8001a58:	d0f3      	beq.n	8001a42 <disconnect+0x4e>
	   {
	      close(sn);
 8001a5a:	4630      	mov	r0, r6
 8001a5c:	f7ff feac 	bl	80017b8 <close>
	      return SOCKERR_TIMEOUT;
 8001a60:	f06f 000c 	mvn.w	r0, #12
 8001a64:	e008      	b.n	8001a78 <disconnect+0x84>
	   }
	}
	return SOCK_OK;
 8001a66:	2001      	movs	r0, #1
 8001a68:	e006      	b.n	8001a78 <disconnect+0x84>
   CHECK_SOCKNUM();
 8001a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001a6e:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001a70:	f06f 0004 	mvn.w	r0, #4
 8001a74:	e000      	b.n	8001a78 <disconnect+0x84>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001a76:	2000      	movs	r0, #0
}
 8001a78:	bd70      	pop	{r4, r5, r6, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000014a 	.word	0x2000014a
 8001a80:	20000148 	.word	0x20000148

08001a84 <send>:
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
 8001a84:	2808      	cmp	r0, #8
 8001a86:	f200 8083 	bhi.w	8001b90 <send+0x10c>
{
 8001a8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a8e:	4615      	mov	r5, r2
 8001a90:	468a      	mov	sl, r1
 8001a92:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001a94:	4681      	mov	r9, r0
 8001a96:	0087      	lsls	r7, r0, #2
 8001a98:	3701      	adds	r7, #1
 8001a9a:	00ff      	lsls	r7, r7, #3
 8001a9c:	4638      	mov	r0, r7
 8001a9e:	f7ff fceb 	bl	8001478 <WIZCHIP_READ>
 8001aa2:	f000 000f 	and.w	r0, r0, #15
 8001aa6:	2801      	cmp	r0, #1
 8001aa8:	d175      	bne.n	8001b96 <send+0x112>
   CHECK_SOCKDATA();
 8001aaa:	2d00      	cmp	r5, #0
 8001aac:	d076      	beq.n	8001b9c <send+0x118>
   tmp = getSn_SR(sn);
 8001aae:	f507 7840 	add.w	r8, r7, #768	; 0x300
 8001ab2:	4640      	mov	r0, r8
 8001ab4:	f7ff fce0 	bl	8001478 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001ab8:	2817      	cmp	r0, #23
 8001aba:	d001      	beq.n	8001ac0 <send+0x3c>
 8001abc:	281c      	cmp	r0, #28
 8001abe:	d170      	bne.n	8001ba2 <send+0x11e>
   if( sock_is_sending & (1<<sn) )
 8001ac0:	4b39      	ldr	r3, [pc, #228]	; (8001ba8 <send+0x124>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	4133      	asrs	r3, r6
 8001ac6:	f013 0f01 	tst.w	r3, #1
 8001aca:	d019      	beq.n	8001b00 <send+0x7c>
   {
      tmp = getSn_IR(sn);
 8001acc:	f507 7400 	add.w	r4, r7, #512	; 0x200
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f7ff fcd1 	bl	8001478 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8001ad6:	f010 0f10 	tst.w	r0, #16
 8001ada:	d105      	bne.n	8001ae8 <send+0x64>
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001adc:	f010 0f08 	tst.w	r0, #8
 8001ae0:	d119      	bne.n	8001b16 <send+0x92>
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
 8001ae2:	2000      	movs	r0, #0
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 8001ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
 8001ae8:	2110      	movs	r1, #16
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff fcf6 	bl	80014dc <WIZCHIP_WRITE>
         sock_is_sending &= ~(1<<sn);         
 8001af0:	2301      	movs	r3, #1
 8001af2:	fa03 f206 	lsl.w	r2, r3, r6
 8001af6:	492c      	ldr	r1, [pc, #176]	; (8001ba8 <send+0x124>)
 8001af8:	880b      	ldrh	r3, [r1, #0]
 8001afa:	ea23 0302 	bic.w	r3, r3, r2
 8001afe:	800b      	strh	r3, [r1, #0]
   freesize = getSn_TxMAX(sn);
 8001b00:	f507 50f8 	add.w	r0, r7, #7936	; 0x1f00
 8001b04:	f7ff fcb8 	bl	8001478 <WIZCHIP_READ>
 8001b08:	b284      	uxth	r4, r0
 8001b0a:	02a4      	lsls	r4, r4, #10
 8001b0c:	b2a4      	uxth	r4, r4
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001b0e:	42a5      	cmp	r5, r4
 8001b10:	d80f      	bhi.n	8001b32 <send+0xae>
 8001b12:	462c      	mov	r4, r5
 8001b14:	e00d      	b.n	8001b32 <send+0xae>
         close(sn);
 8001b16:	4630      	mov	r0, r6
 8001b18:	f7ff fe4e 	bl	80017b8 <close>
         return SOCKERR_TIMEOUT;
 8001b1c:	f06f 000c 	mvn.w	r0, #12
 8001b20:	e7e0      	b.n	8001ae4 <send+0x60>
         close(sn);
 8001b22:	4630      	mov	r0, r6
 8001b24:	f7ff fe48 	bl	80017b8 <close>
         return SOCKERR_SOCKSTATUS;
 8001b28:	f06f 0006 	mvn.w	r0, #6
 8001b2c:	e7da      	b.n	8001ae4 <send+0x60>
      if(len <= freesize) break;
 8001b2e:	42a5      	cmp	r5, r4
 8001b30:	d215      	bcs.n	8001b5e <send+0xda>
      freesize = getSn_TX_FSR(sn);
 8001b32:	4630      	mov	r0, r6
 8001b34:	f7ff fd84 	bl	8001640 <getSn_TX_FSR>
 8001b38:	4605      	mov	r5, r0
      tmp = getSn_SR(sn);
 8001b3a:	4640      	mov	r0, r8
 8001b3c:	f7ff fc9c 	bl	8001478 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001b40:	2817      	cmp	r0, #23
 8001b42:	d001      	beq.n	8001b48 <send+0xc4>
 8001b44:	281c      	cmp	r0, #28
 8001b46:	d1ec      	bne.n	8001b22 <send+0x9e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <send+0x128>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	fa43 f309 	asr.w	r3, r3, r9
 8001b50:	f013 0f01 	tst.w	r3, #1
 8001b54:	d0eb      	beq.n	8001b2e <send+0xaa>
 8001b56:	42a5      	cmp	r5, r4
 8001b58:	d2e9      	bcs.n	8001b2e <send+0xaa>
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	e7c2      	b.n	8001ae4 <send+0x60>
   wiz_send_data(sn, buf, len);
 8001b5e:	4622      	mov	r2, r4
 8001b60:	4651      	mov	r1, sl
 8001b62:	4630      	mov	r0, r6
 8001b64:	f7ff fdca 	bl	80016fc <wiz_send_data>
   setSn_CR(sn,Sn_CR_SEND);
 8001b68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001b6c:	2120      	movs	r1, #32
 8001b6e:	4638      	mov	r0, r7
 8001b70:	f7ff fcb4 	bl	80014dc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001b74:	4638      	mov	r0, r7
 8001b76:	f7ff fc7f 	bl	8001478 <WIZCHIP_READ>
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	d1fa      	bne.n	8001b74 <send+0xf0>
   sock_is_sending |= (1 << sn);
 8001b7e:	2301      	movs	r3, #1
 8001b80:	fa03 f606 	lsl.w	r6, r3, r6
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <send+0x124>)
 8001b86:	881a      	ldrh	r2, [r3, #0]
 8001b88:	4316      	orrs	r6, r2
 8001b8a:	801e      	strh	r6, [r3, #0]
   return (int32_t)len;
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	e7a9      	b.n	8001ae4 <send+0x60>
   CHECK_SOCKNUM();
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001b94:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001b96:	f06f 0004 	mvn.w	r0, #4
 8001b9a:	e7a3      	b.n	8001ae4 <send+0x60>
   CHECK_SOCKDATA();
 8001b9c:	f06f 000d 	mvn.w	r0, #13
 8001ba0:	e7a0      	b.n	8001ae4 <send+0x60>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001ba2:	f06f 0006 	mvn.w	r0, #6
 8001ba6:	e79d      	b.n	8001ae4 <send+0x60>
 8001ba8:	2000014a 	.word	0x2000014a
 8001bac:	20000148 	.word	0x20000148

08001bb0 <ClrSiS>:

void ClrSiS (uint8_t sn){
	sock_is_sending &= ~(1 << sn);
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	fa03 f000 	lsl.w	r0, r3, r0
 8001bb6:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <ClrSiS+0x14>)
 8001bb8:	8813      	ldrh	r3, [r2, #0]
 8001bba:	ea23 0000 	bic.w	r0, r3, r0
 8001bbe:	8010      	strh	r0, [r2, #0]
}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	2000014a 	.word	0x2000014a

08001bc8 <recv>:
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001bc8:	2808      	cmp	r0, #8
 8001bca:	d864      	bhi.n	8001c96 <recv+0xce>
{
 8001bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bd0:	4614      	mov	r4, r2
 8001bd2:	4689      	mov	r9, r1
 8001bd4:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001bd6:	4607      	mov	r7, r0
 8001bd8:	0085      	lsls	r5, r0, #2
 8001bda:	3501      	adds	r5, #1
 8001bdc:	00ed      	lsls	r5, r5, #3
 8001bde:	4628      	mov	r0, r5
 8001be0:	f7ff fc4a 	bl	8001478 <WIZCHIP_READ>
 8001be4:	f000 000f 	and.w	r0, r0, #15
 8001be8:	2801      	cmp	r0, #1
 8001bea:	d157      	bne.n	8001c9c <recv+0xd4>
   CHECK_SOCKDATA();
 8001bec:	2c00      	cmp	r4, #0
 8001bee:	d058      	beq.n	8001ca2 <recv+0xda>
   
   recvsize = getSn_RxMAX(sn);
 8001bf0:	f505 50f0 	add.w	r0, r5, #7680	; 0x1e00
 8001bf4:	f7ff fc40 	bl	8001478 <WIZCHIP_READ>
 8001bf8:	fa1f f880 	uxth.w	r8, r0
 8001bfc:	ea4f 2888 	mov.w	r8, r8, lsl #10
 8001c00:	fa1f f888 	uxth.w	r8, r8
   if(recvsize < len) len = recvsize;
 8001c04:	4544      	cmp	r4, r8
 8001c06:	d80e      	bhi.n	8001c26 <recv+0x5e>
 8001c08:	46a0      	mov	r8, r4
 8001c0a:	e00c      	b.n	8001c26 <recv+0x5e>
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
               {
                  close(sn);
 8001c0c:	4630      	mov	r0, r6
 8001c0e:	f7ff fdd3 	bl	80017b8 <close>
                  return SOCKERR_SOCKSTATUS;
 8001c12:	f06f 0006 	mvn.w	r0, #6
 8001c16:	e03c      	b.n	8001c92 <recv+0xca>
               }
            }
            else
            {
               close(sn);
 8001c18:	4630      	mov	r0, r6
 8001c1a:	f7ff fdcd 	bl	80017b8 <close>
               return SOCKERR_SOCKSTATUS;
 8001c1e:	f06f 0006 	mvn.w	r0, #6
 8001c22:	e036      	b.n	8001c92 <recv+0xca>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
         if(recvsize != 0) break;
 8001c24:	bb0c      	cbnz	r4, 8001c6a <recv+0xa2>
         recvsize = getSn_RX_RSR(sn);
 8001c26:	4630      	mov	r0, r6
 8001c28:	f7ff fd39 	bl	800169e <getSn_RX_RSR>
 8001c2c:	4604      	mov	r4, r0
         tmp = getSn_SR(sn);
 8001c2e:	f505 7040 	add.w	r0, r5, #768	; 0x300
 8001c32:	f7ff fc21 	bl	8001478 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
 8001c36:	2817      	cmp	r0, #23
 8001c38:	d00d      	beq.n	8001c56 <recv+0x8e>
            if(tmp == SOCK_CLOSE_WAIT)
 8001c3a:	281c      	cmp	r0, #28
 8001c3c:	d1ec      	bne.n	8001c18 <recv+0x50>
               if(recvsize != 0) break;
 8001c3e:	b9a4      	cbnz	r4, 8001c6a <recv+0xa2>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001c40:	4630      	mov	r0, r6
 8001c42:	f7ff fcfd 	bl	8001640 <getSn_TX_FSR>
 8001c46:	4682      	mov	sl, r0
 8001c48:	f505 50f8 	add.w	r0, r5, #7936	; 0x1f00
 8001c4c:	f7ff fc14 	bl	8001478 <WIZCHIP_READ>
 8001c50:	ebba 2f80 	cmp.w	sl, r0, lsl #10
 8001c54:	d0da      	beq.n	8001c0c <recv+0x44>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <recv+0xe0>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	413b      	asrs	r3, r7
 8001c5c:	f013 0f01 	tst.w	r3, #1
 8001c60:	d0e0      	beq.n	8001c24 <recv+0x5c>
 8001c62:	2c00      	cmp	r4, #0
 8001c64:	d1de      	bne.n	8001c24 <recv+0x5c>
 8001c66:	2000      	movs	r0, #0
 8001c68:	e013      	b.n	8001c92 <recv+0xca>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001c6a:	4544      	cmp	r4, r8
 8001c6c:	d300      	bcc.n	8001c70 <recv+0xa8>
 8001c6e:	4644      	mov	r4, r8
   wiz_recv_data(sn, buf, len);
 8001c70:	4622      	mov	r2, r4
 8001c72:	4649      	mov	r1, r9
 8001c74:	4630      	mov	r0, r6
 8001c76:	f7ff fd70 	bl	800175a <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8001c7a:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8001c7e:	2140      	movs	r1, #64	; 0x40
 8001c80:	4628      	mov	r0, r5
 8001c82:	f7ff fc2b 	bl	80014dc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001c86:	4628      	mov	r0, r5
 8001c88:	f7ff fbf6 	bl	8001478 <WIZCHIP_READ>
 8001c8c:	2800      	cmp	r0, #0
 8001c8e:	d1fa      	bne.n	8001c86 <recv+0xbe>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001c90:	4620      	mov	r0, r4
}
 8001c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   CHECK_SOCKNUM();
 8001c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001c9a:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001c9c:	f06f 0004 	mvn.w	r0, #4
 8001ca0:	e7f7      	b.n	8001c92 <recv+0xca>
   CHECK_SOCKDATA();
 8001ca2:	f06f 000d 	mvn.w	r0, #13
 8001ca6:	e7f4      	b.n	8001c92 <recv+0xca>
 8001ca8:	20000148 	.word	0x20000148

08001cac <getsockopt>:
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
   CHECK_SOCKNUM();
 8001cac:	2808      	cmp	r0, #8
 8001cae:	f200 80a3 	bhi.w	8001df8 <getsockopt+0x14c>
{
 8001cb2:	b570      	push	{r4, r5, r6, lr}
 8001cb4:	4615      	mov	r5, r2
 8001cb6:	4604      	mov	r4, r0
   switch(sotype)
 8001cb8:	290c      	cmp	r1, #12
 8001cba:	f200 80a0 	bhi.w	8001dfe <getsockopt+0x152>
 8001cbe:	e8df f001 	tbb	[pc, r1]
 8001cc2:	1107      	.short	0x1107
 8001cc4:	4338251b 	.word	0x4338251b
 8001cc8:	6c67569e 	.word	0x6c67569e
 8001ccc:	7b71      	.short	0x7b71
 8001cce:	8f          	.byte	0x8f
 8001ccf:	00          	.byte	0x00
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8001cd0:	0080      	lsls	r0, r0, #2
 8001cd2:	3001      	adds	r0, #1
 8001cd4:	00c0      	lsls	r0, r0, #3
 8001cd6:	f7ff fbcf 	bl	8001478 <WIZCHIP_READ>
 8001cda:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8001cde:	7028      	strb	r0, [r5, #0]
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
 8001ce0:	2001      	movs	r0, #1
}
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}
         *(uint8_t*) arg = getSn_TTL(sn);
 8001ce4:	0080      	lsls	r0, r0, #2
 8001ce6:	3001      	adds	r0, #1
 8001ce8:	00c0      	lsls	r0, r0, #3
 8001cea:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
 8001cee:	f7ff fbc3 	bl	8001478 <WIZCHIP_READ>
 8001cf2:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001cf4:	2001      	movs	r0, #1
         break;
 8001cf6:	e7f4      	b.n	8001ce2 <getsockopt+0x36>
         *(uint8_t*) arg = getSn_TOS(sn);
 8001cf8:	0080      	lsls	r0, r0, #2
 8001cfa:	3001      	adds	r0, #1
 8001cfc:	00c0      	lsls	r0, r0, #3
 8001cfe:	f500 50a8 	add.w	r0, r0, #5376	; 0x1500
 8001d02:	f7ff fbb9 	bl	8001478 <WIZCHIP_READ>
 8001d06:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001d08:	2001      	movs	r0, #1
         break;
 8001d0a:	e7ea      	b.n	8001ce2 <getsockopt+0x36>
         *(uint16_t*) arg = getSn_MSSR(sn);
 8001d0c:	0084      	lsls	r4, r0, #2
 8001d0e:	3401      	adds	r4, #1
 8001d10:	00e4      	lsls	r4, r4, #3
 8001d12:	f504 5090 	add.w	r0, r4, #4608	; 0x1200
 8001d16:	f7ff fbaf 	bl	8001478 <WIZCHIP_READ>
 8001d1a:	b286      	uxth	r6, r0
 8001d1c:	0236      	lsls	r6, r6, #8
 8001d1e:	b2b6      	uxth	r6, r6
 8001d20:	f504 5098 	add.w	r0, r4, #4864	; 0x1300
 8001d24:	f7ff fba8 	bl	8001478 <WIZCHIP_READ>
 8001d28:	fa16 f080 	uxtah	r0, r6, r0
 8001d2c:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001d2e:	2001      	movs	r0, #1
         break;
 8001d30:	e7d7      	b.n	8001ce2 <getsockopt+0x36>
         getSn_DIPR(sn, (uint8_t*)arg);
 8001d32:	0080      	lsls	r0, r0, #2
 8001d34:	3001      	adds	r0, #1
 8001d36:	00c0      	lsls	r0, r0, #3
 8001d38:	2204      	movs	r2, #4
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8001d40:	f7ff fc00 	bl	8001544 <WIZCHIP_READ_BUF>
   return SOCK_OK;
 8001d44:	2001      	movs	r0, #1
         break;
 8001d46:	e7cc      	b.n	8001ce2 <getsockopt+0x36>
         *(uint16_t*) arg = getSn_DPORT(sn);
 8001d48:	0084      	lsls	r4, r0, #2
 8001d4a:	3401      	adds	r4, #1
 8001d4c:	00e4      	lsls	r4, r4, #3
 8001d4e:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 8001d52:	f7ff fb91 	bl	8001478 <WIZCHIP_READ>
 8001d56:	b286      	uxth	r6, r0
 8001d58:	0236      	lsls	r6, r6, #8
 8001d5a:	b2b6      	uxth	r6, r6
 8001d5c:	f504 5088 	add.w	r0, r4, #4352	; 0x1100
 8001d60:	f7ff fb8a 	bl	8001478 <WIZCHIP_READ>
 8001d64:	fa16 f080 	uxtah	r0, r6, r0
 8001d68:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001d6a:	2001      	movs	r0, #1
         break;
 8001d6c:	e7b9      	b.n	8001ce2 <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 8001d6e:	0084      	lsls	r4, r0, #2
 8001d70:	3401      	adds	r4, #1
 8001d72:	00e4      	lsls	r4, r4, #3
 8001d74:	4620      	mov	r0, r4
 8001d76:	f7ff fb7f 	bl	8001478 <WIZCHIP_READ>
 8001d7a:	f000 000f 	and.w	r0, r0, #15
 8001d7e:	2801      	cmp	r0, #1
 8001d80:	d140      	bne.n	8001e04 <getsockopt+0x158>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8001d82:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
 8001d86:	f7ff fb77 	bl	8001478 <WIZCHIP_READ>
 8001d8a:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001d8c:	2001      	movs	r0, #1
         break;
 8001d8e:	e7a8      	b.n	8001ce2 <getsockopt+0x36>
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 8001d90:	f7ff fc56 	bl	8001640 <getSn_TX_FSR>
 8001d94:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001d96:	2001      	movs	r0, #1
         break;
 8001d98:	e7a3      	b.n	8001ce2 <getsockopt+0x36>
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 8001d9a:	f7ff fc80 	bl	800169e <getSn_RX_RSR>
 8001d9e:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001da0:	2001      	movs	r0, #1
         break;
 8001da2:	e79e      	b.n	8001ce2 <getsockopt+0x36>
         *(uint8_t*) arg = getSn_SR(sn);
 8001da4:	0080      	lsls	r0, r0, #2
 8001da6:	3001      	adds	r0, #1
 8001da8:	00c0      	lsls	r0, r0, #3
 8001daa:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8001dae:	f7ff fb63 	bl	8001478 <WIZCHIP_READ>
 8001db2:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001db4:	2001      	movs	r0, #1
         break;
 8001db6:	e794      	b.n	8001ce2 <getsockopt+0x36>
         if(getSn_MR(sn) & Sn_MR_TCP)
 8001db8:	0080      	lsls	r0, r0, #2
 8001dba:	3001      	adds	r0, #1
 8001dbc:	00c0      	lsls	r0, r0, #3
 8001dbe:	f7ff fb5b 	bl	8001478 <WIZCHIP_READ>
 8001dc2:	f010 0f01 	tst.w	r0, #1
 8001dc6:	d105      	bne.n	8001dd4 <getsockopt+0x128>
            *(uint16_t*)arg = sock_remained_size[sn];
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <getsockopt+0x164>)
 8001dca:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001dce:	802b      	strh	r3, [r5, #0]
   return SOCK_OK;
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	e786      	b.n	8001ce2 <getsockopt+0x36>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f7ff fc62 	bl	800169e <getSn_RX_RSR>
 8001dda:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001ddc:	2001      	movs	r0, #1
 8001dde:	e780      	b.n	8001ce2 <getsockopt+0x36>
         if((getSn_MR(sn) == Sn_MR_TCP))
 8001de0:	0080      	lsls	r0, r0, #2
 8001de2:	3001      	adds	r0, #1
 8001de4:	00c0      	lsls	r0, r0, #3
 8001de6:	f7ff fb47 	bl	8001478 <WIZCHIP_READ>
 8001dea:	2801      	cmp	r0, #1
 8001dec:	d00d      	beq.n	8001e0a <getsockopt+0x15e>
         *(uint8_t*)arg = sock_pack_info[sn];
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <getsockopt+0x168>)
 8001df0:	5d1b      	ldrb	r3, [r3, r4]
 8001df2:	702b      	strb	r3, [r5, #0]
   return SOCK_OK;
 8001df4:	2001      	movs	r0, #1
         break;
 8001df6:	e774      	b.n	8001ce2 <getsockopt+0x36>
   CHECK_SOCKNUM();
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001dfc:	4770      	bx	lr
         return SOCKERR_SOCKOPT;
 8001dfe:	f06f 0001 	mvn.w	r0, #1
 8001e02:	e76e      	b.n	8001ce2 <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 8001e04:	f06f 0004 	mvn.w	r0, #4
 8001e08:	e76b      	b.n	8001ce2 <getsockopt+0x36>
             return SOCKERR_SOCKMODE;
 8001e0a:	f06f 0004 	mvn.w	r0, #4
 8001e0e:	e768      	b.n	8001ce2 <getsockopt+0x36>
 8001e10:	20000154 	.word	0x20000154
 8001e14:	2000014c 	.word	0x2000014c

08001e18 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001e18:	4770      	bx	lr

08001e1a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001e1a:	4770      	bx	lr

08001e1c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001e1c:	4770      	bx	lr

08001e1e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001e1e:	4770      	bx	lr

08001e20 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001e20:	7800      	ldrb	r0, [r0, #0]
 8001e22:	4770      	bx	lr

08001e24 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001e24:	7001      	strb	r1, [r0, #0]
 8001e26:	4770      	bx	lr

08001e28 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001e28:	2000      	movs	r0, #0
 8001e2a:	4770      	bx	lr

08001e2c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001e2c:	4770      	bx	lr

08001e2e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8001e2e:	4770      	bx	lr

08001e30 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001e30:	4770      	bx	lr
	...

08001e34 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 8001e34:	b120      	cbz	r0, 8001e40 <reg_wizchip_cs_cbfunc+0xc>
 8001e36:	b119      	cbz	r1, 8001e40 <reg_wizchip_cs_cbfunc+0xc>
      WIZCHIP.CS._select   = wizchip_cs_select;
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <reg_wizchip_cs_cbfunc+0x18>)
 8001e3a:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001e3c:	6199      	str	r1, [r3, #24]
   }
}
 8001e3e:	4770      	bx	lr
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001e40:	4b02      	ldr	r3, [pc, #8]	; (8001e4c <reg_wizchip_cs_cbfunc+0x18>)
 8001e42:	4a03      	ldr	r2, [pc, #12]	; (8001e50 <reg_wizchip_cs_cbfunc+0x1c>)
 8001e44:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001e46:	4a03      	ldr	r2, [pc, #12]	; (8001e54 <reg_wizchip_cs_cbfunc+0x20>)
 8001e48:	619a      	str	r2, [r3, #24]
 8001e4a:	4770      	bx	lr
 8001e4c:	20000004 	.word	0x20000004
 8001e50:	08001e1d 	.word	0x08001e1d
 8001e54:	08001e1f 	.word	0x08001e1f

08001e58 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <reg_wizchip_spi_cbfunc+0x24>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001e60:	d0fa      	beq.n	8001e58 <reg_wizchip_spi_cbfunc>
   
   if(!spi_rb || !spi_wb)
 8001e62:	b120      	cbz	r0, 8001e6e <reg_wizchip_spi_cbfunc+0x16>
 8001e64:	b119      	cbz	r1, 8001e6e <reg_wizchip_spi_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <reg_wizchip_spi_cbfunc+0x24>)
 8001e68:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001e6a:	6219      	str	r1, [r3, #32]
   }
}
 8001e6c:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001e6e:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <reg_wizchip_spi_cbfunc+0x24>)
 8001e70:	4a03      	ldr	r2, [pc, #12]	; (8001e80 <reg_wizchip_spi_cbfunc+0x28>)
 8001e72:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001e74:	4a03      	ldr	r2, [pc, #12]	; (8001e84 <reg_wizchip_spi_cbfunc+0x2c>)
 8001e76:	621a      	str	r2, [r3, #32]
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000004 	.word	0x20000004
 8001e80:	08001e29 	.word	0x08001e29
 8001e84:	08001e2d 	.word	0x08001e2d

08001e88 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <reg_wizchip_spiburst_cbfunc+0x24>)
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001e90:	d0fa      	beq.n	8001e88 <reg_wizchip_spiburst_cbfunc>

   if(!spi_rb || !spi_wb)
 8001e92:	b120      	cbz	r0, 8001e9e <reg_wizchip_spiburst_cbfunc+0x16>
 8001e94:	b119      	cbz	r1, 8001e9e <reg_wizchip_spiburst_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <reg_wizchip_spiburst_cbfunc+0x24>)
 8001e98:	6258      	str	r0, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001e9a:	6299      	str	r1, [r3, #40]	; 0x28
   }
}
 8001e9c:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001e9e:	4b03      	ldr	r3, [pc, #12]	; (8001eac <reg_wizchip_spiburst_cbfunc+0x24>)
 8001ea0:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <reg_wizchip_spiburst_cbfunc+0x28>)
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8001ea4:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <reg_wizchip_spiburst_cbfunc+0x2c>)
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000004 	.word	0x20000004
 8001eb0:	08001e2f 	.word	0x08001e2f
 8001eb4:	08001e31 	.word	0x08001e31

08001eb8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001eb8:	b500      	push	{lr}
 8001eba:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001ebc:	2206      	movs	r2, #6
 8001ebe:	a901      	add	r1, sp, #4
 8001ec0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001ec4:	f7ff fb3e 	bl	8001544 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001ec8:	2204      	movs	r2, #4
 8001eca:	a905      	add	r1, sp, #20
 8001ecc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ed0:	f7ff fb38 	bl	8001544 <WIZCHIP_READ_BUF>
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	a904      	add	r1, sp, #16
 8001ed8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001edc:	f7ff fb32 	bl	8001544 <WIZCHIP_READ_BUF>
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	a903      	add	r1, sp, #12
 8001ee4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001ee8:	f7ff fb2c 	bl	8001544 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7ff faf4 	bl	80014dc <WIZCHIP_WRITE>
   getMR(); // for delay
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff fabf 	bl	8001478 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001efa:	2206      	movs	r2, #6
 8001efc:	a901      	add	r1, sp, #4
 8001efe:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001f02:	f7ff fb5f 	bl	80015c4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001f06:	2204      	movs	r2, #4
 8001f08:	a905      	add	r1, sp, #20
 8001f0a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f0e:	f7ff fb59 	bl	80015c4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001f12:	2204      	movs	r2, #4
 8001f14:	a904      	add	r1, sp, #16
 8001f16:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001f1a:	f7ff fb53 	bl	80015c4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001f1e:	2204      	movs	r2, #4
 8001f20:	a903      	add	r1, sp, #12
 8001f22:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001f26:	f7ff fb4d 	bl	80015c4 <WIZCHIP_WRITE_BUF>
}
 8001f2a:	b007      	add	sp, #28
 8001f2c:	f85d fb04 	ldr.w	pc, [sp], #4

08001f30 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001f30:	b570      	push	{r4, r5, r6, lr}
 8001f32:	4605      	mov	r5, r0
 8001f34:	460e      	mov	r6, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8001f36:	f7ff ffbf 	bl	8001eb8 <wizchip_sw_reset>
   if(txsize)
 8001f3a:	b1cd      	cbz	r5, 8001f70 <wizchip_init+0x40>
   {
      tmp = 0;
 8001f3c:	2200      	movs	r2, #0
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f3e:	4613      	mov	r3, r2
 8001f40:	2b07      	cmp	r3, #7
 8001f42:	dc07      	bgt.n	8001f54 <wizchip_init+0x24>
		{
			tmp += txsize[i];
 8001f44:	5ce9      	ldrb	r1, [r5, r3]
 8001f46:	440a      	add	r2, r1
 8001f48:	b252      	sxtb	r2, r2

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001f4a:	2a10      	cmp	r2, #16
 8001f4c:	dc2f      	bgt.n	8001fae <wizchip_init+0x7e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f4e:	3301      	adds	r3, #1
 8001f50:	b25b      	sxtb	r3, r3
 8001f52:	e7f5      	b.n	8001f40 <wizchip_init+0x10>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f54:	2400      	movs	r4, #0
 8001f56:	e009      	b.n	8001f6c <wizchip_init+0x3c>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001f58:	00a0      	lsls	r0, r4, #2
 8001f5a:	3001      	adds	r0, #1
 8001f5c:	00c0      	lsls	r0, r0, #3
 8001f5e:	5d29      	ldrb	r1, [r5, r4]
 8001f60:	f500 50f8 	add.w	r0, r0, #7936	; 0x1f00
 8001f64:	f7ff faba 	bl	80014dc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f68:	3401      	adds	r4, #1
 8001f6a:	b264      	sxtb	r4, r4
 8001f6c:	2c07      	cmp	r4, #7
 8001f6e:	ddf3      	ble.n	8001f58 <wizchip_init+0x28>
		}

	#endif
   }

   if(rxsize)
 8001f70:	b15e      	cbz	r6, 8001f8a <wizchip_init+0x5a>
   {
      tmp = 0;
 8001f72:	2200      	movs	r2, #0
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f74:	4613      	mov	r3, r2
 8001f76:	2b07      	cmp	r3, #7
 8001f78:	dc09      	bgt.n	8001f8e <wizchip_init+0x5e>
		{
			tmp += rxsize[i];
 8001f7a:	5cf1      	ldrb	r1, [r6, r3]
 8001f7c:	440a      	add	r2, r1
 8001f7e:	b252      	sxtb	r2, r2
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001f80:	2a10      	cmp	r2, #16
 8001f82:	dc17      	bgt.n	8001fb4 <wizchip_init+0x84>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f84:	3301      	adds	r3, #1
 8001f86:	b25b      	sxtb	r3, r3
 8001f88:	e7f5      	b.n	8001f76 <wizchip_init+0x46>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	e00e      	b.n	8001fac <wizchip_init+0x7c>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f8e:	2400      	movs	r4, #0
 8001f90:	e009      	b.n	8001fa6 <wizchip_init+0x76>
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001f92:	00a0      	lsls	r0, r4, #2
 8001f94:	3001      	adds	r0, #1
 8001f96:	00c0      	lsls	r0, r0, #3
 8001f98:	5d31      	ldrb	r1, [r6, r4]
 8001f9a:	f500 50f0 	add.w	r0, r0, #7680	; 0x1e00
 8001f9e:	f7ff fa9d 	bl	80014dc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fa2:	3401      	adds	r4, #1
 8001fa4:	b264      	sxtb	r4, r4
 8001fa6:	2c07      	cmp	r4, #7
 8001fa8:	ddf3      	ble.n	8001f92 <wizchip_init+0x62>
   return 0;
 8001faa:	2000      	movs	r0, #0
}
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
			if(tmp > 16) return -1;
 8001fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fb2:	e7fb      	b.n	8001fac <wizchip_init+0x7c>
			if(tmp > 16) return -1;
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fb8:	e7f8      	b.n	8001fac <wizchip_init+0x7c>

08001fba <wizchip_getinterrupt>:

#endif   
}

intr_kind wizchip_getinterrupt(void)
{
 8001fba:	b510      	push	{r4, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8001fbc:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001fc0:	f7ff fa5a 	bl	8001478 <WIZCHIP_READ>
 8001fc4:	f000 04f0 	and.w	r4, r0, #240	; 0xf0
   sir = getSIR();
 8001fc8:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8001fcc:	f7ff fa54 	bl	8001478 <WIZCHIP_READ>
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8001fd0:	b280      	uxth	r0, r0
  ret = (ret << 8) + ir;
 8001fd2:	0200      	lsls	r0, r0, #8
 8001fd4:	b280      	uxth	r0, r0
 8001fd6:	4420      	add	r0, r4
 8001fd8:	b280      	uxth	r0, r0
  return (intr_kind)ret;
}
 8001fda:	bd10      	pop	{r4, pc}

08001fdc <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8001fdc:	b510      	push	{r4, lr}
   uint8_t imr  = (uint8_t)intr;
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8001fde:	0a04      	lsrs	r4, r0, #8
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8001fe0:	b2c1      	uxtb	r1, r0
 8001fe2:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8001fe6:	f7ff fa79 	bl	80014dc <WIZCHIP_WRITE>
   setSIMR(simr);
 8001fea:	4621      	mov	r1, r4
 8001fec:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001ff0:	f7ff fa74 	bl	80014dc <WIZCHIP_WRITE>
#endif   
}
 8001ff4:	bd10      	pop	{r4, pc}
	...

08001ff8 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001ff8:	b510      	push	{r4, lr}
 8001ffa:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 8001ffc:	2206      	movs	r2, #6
 8001ffe:	4601      	mov	r1, r0
 8002000:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002004:	f7ff fade 	bl	80015c4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002008:	2204      	movs	r2, #4
 800200a:	f104 010e 	add.w	r1, r4, #14
 800200e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002012:	f7ff fad7 	bl	80015c4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002016:	2204      	movs	r2, #4
 8002018:	f104 010a 	add.w	r1, r4, #10
 800201c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002020:	f7ff fad0 	bl	80015c4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002024:	2204      	movs	r2, #4
 8002026:	1da1      	adds	r1, r4, #6
 8002028:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800202c:	f7ff faca 	bl	80015c4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002030:	7ca2      	ldrb	r2, [r4, #18]
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <wizchip_setnetinfo+0x54>)
 8002034:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002036:	7ce2      	ldrb	r2, [r4, #19]
 8002038:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800203a:	7d22      	ldrb	r2, [r4, #20]
 800203c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800203e:	7d62      	ldrb	r2, [r4, #21]
 8002040:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002042:	7da2      	ldrb	r2, [r4, #22]
 8002044:	4b02      	ldr	r3, [pc, #8]	; (8002050 <wizchip_setnetinfo+0x58>)
 8002046:	701a      	strb	r2, [r3, #0]
}
 8002048:	bd10      	pop	{r4, pc}
 800204a:	bf00      	nop
 800204c:	20000168 	.word	0x20000168
 8002050:	20000164 	.word	0x20000164

08002054 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002054:	b510      	push	{r4, lr}
 8002056:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 8002058:	2206      	movs	r2, #6
 800205a:	4601      	mov	r1, r0
 800205c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002060:	f7ff fa70 	bl	8001544 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002064:	2204      	movs	r2, #4
 8002066:	f104 010e 	add.w	r1, r4, #14
 800206a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800206e:	f7ff fa69 	bl	8001544 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002072:	2204      	movs	r2, #4
 8002074:	f104 010a 	add.w	r1, r4, #10
 8002078:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800207c:	f7ff fa62 	bl	8001544 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002080:	2204      	movs	r2, #4
 8002082:	1da1      	adds	r1, r4, #6
 8002084:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002088:	f7ff fa5c 	bl	8001544 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <wizchip_getnetinfo+0x54>)
 800208e:	781a      	ldrb	r2, [r3, #0]
 8002090:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002092:	785a      	ldrb	r2, [r3, #1]
 8002094:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002096:	789a      	ldrb	r2, [r3, #2]
 8002098:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800209a:	78db      	ldrb	r3, [r3, #3]
 800209c:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 800209e:	4b03      	ldr	r3, [pc, #12]	; (80020ac <wizchip_getnetinfo+0x58>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	75a3      	strb	r3, [r4, #22]
}
 80020a4:	bd10      	pop	{r4, pc}
 80020a6:	bf00      	nop
 80020a8:	20000168 	.word	0x20000168
 80020ac:	20000164 	.word	0x20000164

080020b0 <mcp23017_init>:

#define I2C_TIMEOUT		10

void mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c, uint16_t addr)
{
	hdev->hi2c = hi2c;
 80020b0:	6001      	str	r1, [r0, #0]
	hdev->addr = addr << 1;
 80020b2:	0052      	lsls	r2, r2, #1
 80020b4:	8082      	strh	r2, [r0, #4]
}
 80020b6:	4770      	bx	lr

080020b8 <mcp23017_read>:

HAL_StatusTypeDef mcp23017_read(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 80020b8:	b510      	push	{r4, lr}
 80020ba:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Read(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 80020bc:	8884      	ldrh	r4, [r0, #4]
 80020be:	6800      	ldr	r0, [r0, #0]
 80020c0:	230a      	movs	r3, #10
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	2301      	movs	r3, #1
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	9200      	str	r2, [sp, #0]
 80020ca:	460a      	mov	r2, r1
 80020cc:	4621      	mov	r1, r4
 80020ce:	f004 f999 	bl	8006404 <HAL_I2C_Mem_Read>
}
 80020d2:	b004      	add	sp, #16
 80020d4:	bd10      	pop	{r4, pc}

080020d6 <mcp23017_write>:

HAL_StatusTypeDef mcp23017_write(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 80020d6:	b510      	push	{r4, lr}
 80020d8:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Write(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 80020da:	8884      	ldrh	r4, [r0, #4]
 80020dc:	6800      	ldr	r0, [r0, #0]
 80020de:	230a      	movs	r3, #10
 80020e0:	9302      	str	r3, [sp, #8]
 80020e2:	2301      	movs	r3, #1
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	9200      	str	r2, [sp, #0]
 80020e8:	460a      	mov	r2, r1
 80020ea:	4621      	mov	r1, r4
 80020ec:	f004 f8d6 	bl	800629c <HAL_I2C_Mem_Write>
}
 80020f0:	b004      	add	sp, #16
 80020f2:	bd10      	pop	{r4, pc}

080020f4 <mcp23017_iodir>:

HAL_StatusTypeDef mcp23017_iodir(MCP23017_HandleTypeDef *hdev, uint8_t port, uint8_t iodir)
{
 80020f4:	b500      	push	{lr}
 80020f6:	b083      	sub	sp, #12
	uint8_t data[1] = {iodir};
 80020f8:	ab02      	add	r3, sp, #8
 80020fa:	f803 2d04 	strb.w	r2, [r3, #-4]!
	return mcp23017_write(hdev, REGISTER_IODIRA|port, data);
 80020fe:	461a      	mov	r2, r3
 8002100:	f7ff ffe9 	bl	80020d6 <mcp23017_write>
}
 8002104:	b003      	add	sp, #12
 8002106:	f85d fb04 	ldr.w	pc, [sp], #4

0800210a <mcp23017_read_gpio>:
	uint8_t data[1] = {pu};
	return mcp23017_write(hdev, REGISTER_GPPUA|port, data);
}

HAL_StatusTypeDef mcp23017_read_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 800210a:	b530      	push	{r4, r5, lr}
 800210c:	b083      	sub	sp, #12
 800210e:	4604      	mov	r4, r0
 8002110:	460d      	mov	r5, r1
	uint8_t data[1];
	HAL_StatusTypeDef status;
	status = mcp23017_read(hdev, REGISTER_GPIOA|port, data);
 8002112:	aa01      	add	r2, sp, #4
 8002114:	f041 0112 	orr.w	r1, r1, #18
 8002118:	f7ff ffce 	bl	80020b8 <mcp23017_read>
	if (status == HAL_OK)
 800211c:	4603      	mov	r3, r0
 800211e:	b918      	cbnz	r0, 8002128 <mcp23017_read_gpio+0x1e>
		hdev->gpio[port] = data[0];
 8002120:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002124:	442c      	add	r4, r5
 8002126:	71a2      	strb	r2, [r4, #6]
	return status;
}
 8002128:	4618      	mov	r0, r3
 800212a:	b003      	add	sp, #12
 800212c:	bd30      	pop	{r4, r5, pc}

0800212e <mcp23017_write_gpio>:

HAL_StatusTypeDef mcp23017_write_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 800212e:	b500      	push	{lr}
 8002130:	b083      	sub	sp, #12
	uint8_t data[1] = {hdev->gpio[port]};
 8002132:	1843      	adds	r3, r0, r1
 8002134:	799b      	ldrb	r3, [r3, #6]
 8002136:	aa02      	add	r2, sp, #8
 8002138:	f802 3d04 	strb.w	r3, [r2, #-4]!
	return mcp23017_write(hdev, REGISTER_GPIOA|port, data);
 800213c:	f041 0112 	orr.w	r1, r1, #18
 8002140:	f7ff ffc9 	bl	80020d6 <mcp23017_write>
}
 8002144:	b003      	add	sp, #12
 8002146:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800214c <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 800214c:	b500      	push	{lr}
 800214e:	b087      	sub	sp, #28
 8002150:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8002154:	2364      	movs	r3, #100	; 0x64
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2301      	movs	r3, #1
 800215a:	f10d 0217 	add.w	r2, sp, #23
 800215e:	f10d 010f 	add.w	r1, sp, #15
 8002162:	4804      	ldr	r0, [pc, #16]	; (8002174 <W25qxx_Spi+0x28>)
 8002164:	f005 fa53 	bl	800760e <HAL_SPI_TransmitReceive>
	return ret;	
}
 8002168:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800216c:	b007      	add	sp, #28
 800216e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002172:	bf00      	nop
 8002174:	20003228 	.word	0x20003228

08002178 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002178:	b570      	push	{r4, r5, r6, lr}
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
  FLASH_SELECT;
 800217a:	f000 fa0b 	bl	8002594 <FLASH_ChipSelect>
  W25qxx_Spi(0x9F);
 800217e:	209f      	movs	r0, #159	; 0x9f
 8002180:	f7ff ffe4 	bl	800214c <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002184:	20a5      	movs	r0, #165	; 0xa5
 8002186:	f7ff ffe1 	bl	800214c <W25qxx_Spi>
 800218a:	4606      	mov	r6, r0
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800218c:	20a5      	movs	r0, #165	; 0xa5
 800218e:	f7ff ffdd 	bl	800214c <W25qxx_Spi>
 8002192:	4604      	mov	r4, r0
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002194:	20a5      	movs	r0, #165	; 0xa5
 8002196:	f7ff ffd9 	bl	800214c <W25qxx_Spi>
 800219a:	4605      	mov	r5, r0
  FLASH_DESELECT;
 800219c:	f000 fa0c 	bl	80025b8 <FLASH_ChipDeselect>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80021a0:	0220      	lsls	r0, r4, #8
 80021a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
  return Temp;
}
 80021a6:	4328      	orrs	r0, r5
 80021a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080021ac <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80021ac:	b510      	push	{r4, lr}
  FLASH_SELECT;
 80021ae:	f000 f9f1 	bl	8002594 <FLASH_ChipSelect>
  W25qxx_Spi(0x4B);
 80021b2:	204b      	movs	r0, #75	; 0x4b
 80021b4:	f7ff ffca 	bl	800214c <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80021b8:	2400      	movs	r4, #0
 80021ba:	e004      	b.n	80021c6 <W25qxx_ReadUniqID+0x1a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80021bc:	20a5      	movs	r0, #165	; 0xa5
 80021be:	f7ff ffc5 	bl	800214c <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80021c2:	3401      	adds	r4, #1
 80021c4:	b2e4      	uxtb	r4, r4
 80021c6:	2c03      	cmp	r4, #3
 80021c8:	d9f8      	bls.n	80021bc <W25qxx_ReadUniqID+0x10>
	for(uint8_t	i=0;i<8;i++)
 80021ca:	2400      	movs	r4, #0
 80021cc:	e007      	b.n	80021de <W25qxx_ReadUniqID+0x32>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80021ce:	20a5      	movs	r0, #165	; 0xa5
 80021d0:	f7ff ffbc 	bl	800214c <W25qxx_Spi>
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <W25qxx_ReadUniqID+0x3c>)
 80021d6:	4423      	add	r3, r4
 80021d8:	7058      	strb	r0, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 80021da:	3401      	adds	r4, #1
 80021dc:	b2e4      	uxtb	r4, r4
 80021de:	2c07      	cmp	r4, #7
 80021e0:	d9f5      	bls.n	80021ce <W25qxx_ReadUniqID+0x22>
  FLASH_DESELECT;
 80021e2:	f000 f9e9 	bl	80025b8 <FLASH_ChipDeselect>
}
 80021e6:	bd10      	pop	{r4, pc}
 80021e8:	20002ab0 	.word	0x20002ab0

080021ec <W25qxx_ReadStatusRegister>:
  FLASH_DESELECT;
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 80021ec:	b510      	push	{r4, lr}
 80021ee:	4604      	mov	r4, r0
	uint8_t	status=0;
	FLASH_SELECT;
 80021f0:	f000 f9d0 	bl	8002594 <FLASH_ChipSelect>
	if(SelectStatusRegister_1_2_3==1)
 80021f4:	2c01      	cmp	r4, #1
 80021f6:	d00f      	beq.n	8002218 <W25qxx_ReadStatusRegister+0x2c>
	{
		W25qxx_Spi(0x05);
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister1 = status;
	}
	else if(SelectStatusRegister_1_2_3==2)
 80021f8:	2c02      	cmp	r4, #2
 80021fa:	d018      	beq.n	800222e <W25qxx_ReadStatusRegister+0x42>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister2 = status;
	}
	else
	{
		W25qxx_Spi(0x15);
 80021fc:	2015      	movs	r0, #21
 80021fe:	f7ff ffa5 	bl	800214c <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8002202:	20a5      	movs	r0, #165	; 0xa5
 8002204:	f7ff ffa2 	bl	800214c <W25qxx_Spi>
 8002208:	4604      	mov	r4, r0
		w25qxx.StatusRegister3 = status;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <W25qxx_ReadStatusRegister+0x58>)
 800220c:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	}	
	FLASH_DESELECT;
 8002210:	f000 f9d2 	bl	80025b8 <FLASH_ChipDeselect>
	return status;
}
 8002214:	4620      	mov	r0, r4
 8002216:	bd10      	pop	{r4, pc}
		W25qxx_Spi(0x05);
 8002218:	2005      	movs	r0, #5
 800221a:	f7ff ff97 	bl	800214c <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 800221e:	20a5      	movs	r0, #165	; 0xa5
 8002220:	f7ff ff94 	bl	800214c <W25qxx_Spi>
 8002224:	4604      	mov	r4, r0
		w25qxx.StatusRegister1 = status;
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <W25qxx_ReadStatusRegister+0x58>)
 8002228:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
 800222c:	e7f0      	b.n	8002210 <W25qxx_ReadStatusRegister+0x24>
		W25qxx_Spi(0x35);
 800222e:	2035      	movs	r0, #53	; 0x35
 8002230:	f7ff ff8c 	bl	800214c <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8002234:	20a5      	movs	r0, #165	; 0xa5
 8002236:	f7ff ff89 	bl	800214c <W25qxx_Spi>
 800223a:	4604      	mov	r4, r0
		w25qxx.StatusRegister2 = status;
 800223c:	4b01      	ldr	r3, [pc, #4]	; (8002244 <W25qxx_ReadStatusRegister+0x58>)
 800223e:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
 8002242:	e7e5      	b.n	8002210 <W25qxx_ReadStatusRegister+0x24>
 8002244:	20002ab0 	.word	0x20002ab0

08002248 <W25qxx_Init>:
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 FLASH_DESELECT;
}
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8002248:	b510      	push	{r4, lr}
	w25qxx.Lock=1;	
 800224a:	4b42      	ldr	r3, [pc, #264]	; (8002354 <W25qxx_Init+0x10c>)
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8002252:	e002      	b.n	800225a <W25qxx_Init+0x12>
		W25qxx_Delay(1);
 8002254:	2001      	movs	r0, #1
 8002256:	f006 fb42 	bl	80088de <osDelay>
	while(HAL_GetTick()<100)
 800225a:	f002 ff97 	bl	800518c <HAL_GetTick>
 800225e:	2863      	cmp	r0, #99	; 0x63
 8002260:	d9f8      	bls.n	8002254 <W25qxx_Init+0xc>
  FLASH_DESELECT;
 8002262:	f000 f9a9 	bl	80025b8 <FLASH_ChipDeselect>
  W25qxx_Delay(100);
 8002266:	2064      	movs	r0, #100	; 0x64
 8002268:	f006 fb39 	bl	80088de <osDelay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 800226c:	f7ff ff84 	bl	8002178 <W25qxx_ReadID>
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8002270:	b280      	uxth	r0, r0
 8002272:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8002276:	3811      	subs	r0, #17
 8002278:	2809      	cmp	r0, #9
 800227a:	d866      	bhi.n	800234a <W25qxx_Init+0x102>
 800227c:	e8df f000 	tbb	[pc, r0]
 8002280:	4d53595f 	.word	0x4d53595f
 8002284:	343b4147 	.word	0x343b4147
 8002288:	052d      	.short	0x052d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 800228a:	4b32      	ldr	r3, [pc, #200]	; (8002354 <W25qxx_Init+0x10c>)
 800228c:	220a      	movs	r2, #10
 800228e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8002290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002294:	61da      	str	r2, [r3, #28]
				#endif
			w25qxx.Lock=0;	
			return false;
				
	}		
	w25qxx.PageSize=256;
 8002296:	4c2f      	ldr	r4, [pc, #188]	; (8002354 <W25qxx_Init+0x10c>)
 8002298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800229c:	8163      	strh	r3, [r4, #10]
	w25qxx.SectorSize=0x1000;
 800229e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a2:	6123      	str	r3, [r4, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 80022a4:	69e3      	ldr	r3, [r4, #28]
 80022a6:	011a      	lsls	r2, r3, #4
 80022a8:	6162      	str	r2, [r4, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 80022aa:	041b      	lsls	r3, r3, #16
 80022ac:	0a1a      	lsrs	r2, r3, #8
 80022ae:	60e2      	str	r2, [r4, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 80022b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022b4:	61a2      	str	r2, [r4, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 80022b6:	0a9b      	lsrs	r3, r3, #10
 80022b8:	6223      	str	r3, [r4, #32]
	W25qxx_ReadUniqID();
 80022ba:	f7ff ff77 	bl	80021ac <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80022be:	2001      	movs	r0, #1
 80022c0:	f7ff ff94 	bl	80021ec <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80022c4:	2002      	movs	r0, #2
 80022c6:	f7ff ff91 	bl	80021ec <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80022ca:	2003      	movs	r0, #3
 80022cc:	f7ff ff8e 	bl	80021ec <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 80022d0:	2300      	movs	r3, #0
 80022d2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return true;
 80022d6:	2001      	movs	r0, #1
}	
 80022d8:	bd10      	pop	{r4, pc}
			w25qxx.ID=W25Q256;
 80022da:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <W25qxx_Init+0x10c>)
 80022dc:	2209      	movs	r2, #9
 80022de:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 80022e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022e4:	61da      	str	r2, [r3, #28]
		break;
 80022e6:	e7d6      	b.n	8002296 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q128;
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <W25qxx_Init+0x10c>)
 80022ea:	2208      	movs	r2, #8
 80022ec:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 80022ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f2:	61da      	str	r2, [r3, #28]
		break;
 80022f4:	e7cf      	b.n	8002296 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q64;
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <W25qxx_Init+0x10c>)
 80022f8:	2207      	movs	r2, #7
 80022fa:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 80022fc:	2280      	movs	r2, #128	; 0x80
 80022fe:	61da      	str	r2, [r3, #28]
		break;
 8002300:	e7c9      	b.n	8002296 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q32;
 8002302:	4b14      	ldr	r3, [pc, #80]	; (8002354 <W25qxx_Init+0x10c>)
 8002304:	2206      	movs	r2, #6
 8002306:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8002308:	2240      	movs	r2, #64	; 0x40
 800230a:	61da      	str	r2, [r3, #28]
		break;
 800230c:	e7c3      	b.n	8002296 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q16;
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <W25qxx_Init+0x10c>)
 8002310:	2205      	movs	r2, #5
 8002312:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8002314:	2220      	movs	r2, #32
 8002316:	61da      	str	r2, [r3, #28]
		break;
 8002318:	e7bd      	b.n	8002296 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q80;
 800231a:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <W25qxx_Init+0x10c>)
 800231c:	2204      	movs	r2, #4
 800231e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8002320:	2210      	movs	r2, #16
 8002322:	61da      	str	r2, [r3, #28]
		break;
 8002324:	e7b7      	b.n	8002296 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q40;
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <W25qxx_Init+0x10c>)
 8002328:	2203      	movs	r2, #3
 800232a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 800232c:	2208      	movs	r2, #8
 800232e:	61da      	str	r2, [r3, #28]
		break;
 8002330:	e7b1      	b.n	8002296 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q20;
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <W25qxx_Init+0x10c>)
 8002334:	2202      	movs	r2, #2
 8002336:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8002338:	2204      	movs	r2, #4
 800233a:	61da      	str	r2, [r3, #28]
		break;
 800233c:	e7ab      	b.n	8002296 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q10;
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <W25qxx_Init+0x10c>)
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8002344:	2202      	movs	r2, #2
 8002346:	61da      	str	r2, [r3, #28]
		break;
 8002348:	e7a5      	b.n	8002296 <W25qxx_Init+0x4e>
			w25qxx.Lock=0;	
 800234a:	2000      	movs	r0, #0
 800234c:	4b01      	ldr	r3, [pc, #4]	; (8002354 <W25qxx_Init+0x10c>)
 800234e:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
			return false;
 8002352:	e7c1      	b.n	80022d8 <W25qxx_Init+0x90>
 8002354:	20002ab0 	.word	0x20002ab0

08002358 <vModbusInit>:
#include "Modbus.h"

void vModbusInit (ModbusHandler *modbus, UART_HandleTypeDef *port, TickType_t timeout){
	modbus -> ModbusSerialPort = port;
 8002358:	6001      	str	r1, [r0, #0]
	modbus -> timeout_t = timeout / portTICK_PERIOD_MS;
 800235a:	6042      	str	r2, [r0, #4]
}
 800235c:	4770      	bx	lr

0800235e <uModbusCalculateCRC>:

uint16_t uModbusCalculateCRC (uint8_t frame_length, uint8_t *frame){
 800235e:	b430      	push	{r4, r5}
	uint16_t calculatedCRC = 0xFFFF;
	uint16_t CRChigh, CRClow;
	for(int i = 0; i < frame_length; i++){
 8002360:	2500      	movs	r5, #0
	uint16_t calculatedCRC = 0xFFFF;
 8002362:	f64f 73ff 	movw	r3, #65535	; 0xffff
	for(int i = 0; i < frame_length; i++){
 8002366:	e00d      	b.n	8002384 <uModbusCalculateCRC+0x26>
		for(int j = 8; j > 0; j--){
			if(calculatedCRC & 0x0001){
				calculatedCRC >>= 1;
				calculatedCRC ^= 0xA001;
			}else{
				calculatedCRC >>= 1;
 8002368:	085b      	lsrs	r3, r3, #1
		for(int j = 8; j > 0; j--){
 800236a:	3a01      	subs	r2, #1
 800236c:	2a00      	cmp	r2, #0
 800236e:	dd07      	ble.n	8002380 <uModbusCalculateCRC+0x22>
			if(calculatedCRC & 0x0001){
 8002370:	f013 0f01 	tst.w	r3, #1
 8002374:	d0f8      	beq.n	8002368 <uModbusCalculateCRC+0xa>
				calculatedCRC ^= 0xA001;
 8002376:	f24a 0401 	movw	r4, #40961	; 0xa001
 800237a:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
 800237e:	e7f4      	b.n	800236a <uModbusCalculateCRC+0xc>
			}
		}
		frame++;
 8002380:	3101      	adds	r1, #1
	for(int i = 0; i < frame_length; i++){
 8002382:	3501      	adds	r5, #1
 8002384:	42a8      	cmp	r0, r5
 8002386:	dd03      	ble.n	8002390 <uModbusCalculateCRC+0x32>
		calculatedCRC ^= (*frame);
 8002388:	780a      	ldrb	r2, [r1, #0]
 800238a:	4053      	eors	r3, r2
		for(int j = 8; j > 0; j--){
 800238c:	2208      	movs	r2, #8
 800238e:	e7ed      	b.n	800236c <uModbusCalculateCRC+0xe>
	}

	CRChigh = (calculatedCRC & 0x00FF) <<8;
 8002390:	0218      	lsls	r0, r3, #8
 8002392:	b280      	uxth	r0, r0
	CRClow = (calculatedCRC & 0xFF00) >>8;
	calculatedCRC = CRChigh + CRClow;
 8002394:	eb00 2013 	add.w	r0, r0, r3, lsr #8

	//calculatedCRC = HAL_CRC_Calculate(&hcrc, frame, frame_length);
	return calculatedCRC;
}
 8002398:	b280      	uxth	r0, r0
 800239a:	bc30      	pop	{r4, r5}
 800239c:	4770      	bx	lr

0800239e <bModbusCheckCRC>:

uint8_t bModbusCheckCRC (uint8_t frame_length, uint8_t *frame){
 800239e:	b570      	push	{r4, r5, r6, lr}
 80023a0:	4604      	mov	r4, r0
 80023a2:	460d      	mov	r5, r1
	uint16_t crc = uModbusCalculateCRC(frame_length - 2, frame);
 80023a4:	1e86      	subs	r6, r0, #2
 80023a6:	b2f0      	uxtb	r0, r6
 80023a8:	f7ff ffd9 	bl	800235e <uModbusCalculateCRC>
	uint16_t frameCRC = (uint16_t)(*(frame + frame_length - 2));
 80023ac:	5daa      	ldrb	r2, [r5, r6]
	frameCRC <<= 8;
	frameCRC += *(frame + frame_length - 1);
 80023ae:	3c01      	subs	r4, #1
 80023b0:	5d2b      	ldrb	r3, [r5, r4]
 80023b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80023b6:	b29b      	uxth	r3, r3

	if(crc == frameCRC){
 80023b8:	4298      	cmp	r0, r3
 80023ba:	d001      	beq.n	80023c0 <bModbusCheckCRC+0x22>
		return 1;
	}

	return 0;
 80023bc:	2000      	movs	r0, #0
}
 80023be:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 80023c0:	2001      	movs	r0, #1
 80023c2:	e7fc      	b.n	80023be <bModbusCheckCRC+0x20>

080023c4 <vModbusReadInputRegisters>:
		return Modbus_TIMEOUT;
	}
	return Modbus_CRCERR;
}

ModbusState vModbusReadInputRegisters (ModbusHandler *modbus, uint8_t slave_address, uint16_t first_register_address, uint16_t registers_count, uint8_t *response_frame){
 80023c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4606      	mov	r6, r0
 80023ce:	4689      	mov	r9, r1
 80023d0:	f8d7 8030 	ldr.w	r8, [r7, #48]	; 0x30
	uint8_t transmit_frame_buffer[8];
	uint16_t transmitCRC;
	uint8_t received_frame_length = (registers_count * 2) + 5;
 80023d4:	fa5f fe83 	uxtb.w	lr, r3
 80023d8:	ea4f 044e 	mov.w	r4, lr, lsl #1
 80023dc:	b2e4      	uxtb	r4, r4
 80023de:	3405      	adds	r4, #5
 80023e0:	b2e4      	uxtb	r4, r4
	uint8_t received_frame_buffer[received_frame_length];
 80023e2:	46a4      	mov	ip, r4
 80023e4:	1de1      	adds	r1, r4, #7
 80023e6:	f401 71fc 	and.w	r1, r1, #504	; 0x1f8
 80023ea:	ebad 0d01 	sub.w	sp, sp, r1
 80023ee:	466d      	mov	r5, sp
	uint32_t ulNotificationValue;
	for(int i = 0; i < received_frame_length; i++){
 80023f0:	2100      	movs	r1, #0
 80023f2:	e002      	b.n	80023fa <vModbusReadInputRegisters+0x36>
		received_frame_buffer[i] = 0;
 80023f4:	2000      	movs	r0, #0
 80023f6:	5468      	strb	r0, [r5, r1]
	for(int i = 0; i < received_frame_length; i++){
 80023f8:	3101      	adds	r1, #1
 80023fa:	458c      	cmp	ip, r1
 80023fc:	dcfa      	bgt.n	80023f4 <vModbusReadInputRegisters+0x30>

	}
	transmit_frame_buffer[0] = slave_address;
 80023fe:	f887 9000 	strb.w	r9, [r7]
	transmit_frame_buffer[1] = 0x04;
 8002402:	2104      	movs	r1, #4
 8002404:	7079      	strb	r1, [r7, #1]
	transmit_frame_buffer[2] = (uint8_t)(first_register_address >> 8);
 8002406:	0a11      	lsrs	r1, r2, #8
 8002408:	70b9      	strb	r1, [r7, #2]
	transmit_frame_buffer[3] = (uint8_t)first_register_address;
 800240a:	70fa      	strb	r2, [r7, #3]
	transmit_frame_buffer[4] = (uint8_t)(registers_count >> 8);
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	713b      	strb	r3, [r7, #4]
	transmit_frame_buffer[5] = (uint8_t)(registers_count);
 8002410:	f887 e005 	strb.w	lr, [r7, #5]
	transmitCRC = uModbusCalculateCRC (6, transmit_frame_buffer);
 8002414:	4639      	mov	r1, r7
 8002416:	2006      	movs	r0, #6
 8002418:	f7ff ffa1 	bl	800235e <uModbusCalculateCRC>
	transmit_frame_buffer[6] = (transmitCRC >> 8);
 800241c:	0a03      	lsrs	r3, r0, #8
 800241e:	71bb      	strb	r3, [r7, #6]
	transmit_frame_buffer[7] = (uint8_t)(transmitCRC);
 8002420:	71f8      	strb	r0, [r7, #7]

	//Wy�lij dane;
	HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_SET);
 8002422:	2201      	movs	r2, #1
 8002424:	2102      	movs	r1, #2
 8002426:	4829      	ldr	r0, [pc, #164]	; (80024cc <vModbusReadInputRegisters+0x108>)
 8002428:	f003 fbfd 	bl	8005c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 800242c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 80024d0 <vModbusReadInputRegisters+0x10c>
 8002430:	2200      	movs	r2, #0
 8002432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002436:	4650      	mov	r0, sl
 8002438:	f003 fbf5 	bl	8005c26 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(modbus -> ModbusSerialPort, transmit_frame_buffer, 8);
 800243c:	2208      	movs	r2, #8
 800243e:	4639      	mov	r1, r7
 8002440:	6830      	ldr	r0, [r6, #0]
 8002442:	f005 ffe2 	bl	800840a <HAL_UART_Transmit_IT>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 8002446:	6871      	ldr	r1, [r6, #4]
 8002448:	2001      	movs	r0, #1
 800244a:	f007 fd71 	bl	8009f30 <ulTaskNotifyTake>
	HAL_UART_Receive_DMA(modbus -> ModbusSerialPort, received_frame_buffer, received_frame_length);
 800244e:	4622      	mov	r2, r4
 8002450:	4629      	mov	r1, r5
 8002452:	6830      	ldr	r0, [r6, #0]
 8002454:	f005 fffe 	bl	8008454 <HAL_UART_Receive_DMA>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 8002458:	6871      	ldr	r1, [r6, #4]
 800245a:	2001      	movs	r0, #1
 800245c:	f007 fd68 	bl	8009f30 <ulTaskNotifyTake>
 8002460:	4683      	mov	fp, r0
	vTaskDelay(1);
 8002462:	2001      	movs	r0, #1
 8002464:	f007 fadc 	bl	8009a20 <vTaskDelay>
	HAL_UART_AbortTransmit(modbus -> ModbusSerialPort);
 8002468:	6830      	ldr	r0, [r6, #0]
 800246a:	f006 f847 	bl	80084fc <HAL_UART_AbortTransmit>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 800246e:	2201      	movs	r2, #1
 8002470:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002474:	4650      	mov	r0, sl
 8002476:	f003 fbd6 	bl	8005c26 <HAL_GPIO_WritePin>
	if(ulNotificationValue){
 800247a:	f1bb 0f00 	cmp.w	fp, #0
 800247e:	d019      	beq.n	80024b4 <vModbusReadInputRegisters+0xf0>
		if(bModbusCheckCRC(received_frame_length, received_frame_buffer)){
 8002480:	4629      	mov	r1, r5
 8002482:	4620      	mov	r0, r4
 8002484:	f7ff ff8b 	bl	800239e <bModbusCheckCRC>
 8002488:	b1e0      	cbz	r0, 80024c4 <vModbusReadInputRegisters+0x100>
			if(received_frame_buffer[0] == slave_address && received_frame_buffer[1] == 0x04){
 800248a:	782b      	ldrb	r3, [r5, #0]
 800248c:	454b      	cmp	r3, r9
 800248e:	d11b      	bne.n	80024c8 <vModbusReadInputRegisters+0x104>
 8002490:	786b      	ldrb	r3, [r5, #1]
 8002492:	2b04      	cmp	r3, #4
 8002494:	d101      	bne.n	800249a <vModbusReadInputRegisters+0xd6>
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 8002496:	2200      	movs	r2, #0
 8002498:	e006      	b.n	80024a8 <vModbusReadInputRegisters+0xe4>
				return Modbus_OK;
			}
#ifdef __DEBUG
			printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
			return Modbus_CRCERR;
 800249a:	2002      	movs	r0, #2
 800249c:	e00e      	b.n	80024bc <vModbusReadInputRegisters+0xf8>
					*response_frame = received_frame_buffer[i + 3];
 800249e:	1cd3      	adds	r3, r2, #3
 80024a0:	5ceb      	ldrb	r3, [r5, r3]
 80024a2:	f808 3b01 	strb.w	r3, [r8], #1
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 80024a6:	3201      	adds	r2, #1
 80024a8:	78ab      	ldrb	r3, [r5, #2]
 80024aa:	3302      	adds	r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	dbf6      	blt.n	800249e <vModbusReadInputRegisters+0xda>
				return Modbus_OK;
 80024b0:	2000      	movs	r0, #0
 80024b2:	e003      	b.n	80024bc <vModbusReadInputRegisters+0xf8>
#ifdef __DEBUG
		printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
		return Modbus_CRCERR;
	}else{
		HAL_UART_AbortReceive_IT(modbus -> ModbusSerialPort);
 80024b4:	6830      	ldr	r0, [r6, #0]
 80024b6:	f006 f993 	bl	80087e0 <HAL_UART_AbortReceive_IT>
#ifdef __DEBUG
		printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
		return Modbus_TIMEOUT;
 80024ba:	2001      	movs	r0, #1
	}
#ifdef __DEBUG
	printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
	return Modbus_CRCERR;
}
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return Modbus_CRCERR;
 80024c4:	2002      	movs	r0, #2
 80024c6:	e7f9      	b.n	80024bc <vModbusReadInputRegisters+0xf8>
			return Modbus_CRCERR;
 80024c8:	2002      	movs	r0, #2
 80024ca:	e7f7      	b.n	80024bc <vModbusReadInputRegisters+0xf8>
 80024cc:	40020000 	.word	0x40020000
 80024d0:	40020800 	.word	0x40020800

080024d4 <RB_CreateBuffer>:

RB_Status RB_CreateBuffer(RingBuffer *Buffer, uint8_t Size)
{
	//*Buffer = malloc(sizeof(RingBuffer) + (sizeof(uint8_t) * Size));

	if(Buffer == NULL)
 80024d4:	4603      	mov	r3, r0
 80024d6:	b130      	cbz	r0, 80024e6 <RB_CreateBuffer+0x12>
	{
		return RB_NOTCREATED;
	}

	(Buffer)->Size = 32;
 80024d8:	2220      	movs	r2, #32
 80024da:	7002      	strb	r2, [r0, #0]
	(Buffer)->Head = 0;
 80024dc:	2000      	movs	r0, #0
 80024de:	7058      	strb	r0, [r3, #1]
	(Buffer)->Tail = 0;
 80024e0:	7098      	strb	r0, [r3, #2]
	(Buffer)->Elements = 0;
 80024e2:	70d8      	strb	r0, [r3, #3]

	return RB_OK;
 80024e4:	4770      	bx	lr
		return RB_NOTCREATED;
 80024e6:	2002      	movs	r0, #2
}
 80024e8:	4770      	bx	lr

080024ea <RB_WriteToBuffer>:

RB_Status RB_WriteToBuffer(RingBuffer *Buffer, uint8_t Data)
{
 80024ea:	b430      	push	{r4, r5}
	uint8_t TempHead;

	TempHead = (Buffer->Head + 1) % Buffer->Size;
 80024ec:	7843      	ldrb	r3, [r0, #1]
 80024ee:	1c5d      	adds	r5, r3, #1
 80024f0:	7804      	ldrb	r4, [r0, #0]
 80024f2:	fb95 f2f4 	sdiv	r2, r5, r4
 80024f6:	fb04 5212 	mls	r2, r4, r2, r5
 80024fa:	b2d2      	uxtb	r2, r2

	if( TempHead == Buffer->Tail) // No room for new data
 80024fc:	7885      	ldrb	r5, [r0, #2]
 80024fe:	4295      	cmp	r5, r2
 8002500:	d00e      	beq.n	8002520 <RB_WriteToBuffer+0x36>
	{
		return RB_NOFREESPACE;
	}
	else
	{
		Buffer->Buffer[Buffer->Head] = Data;
 8002502:	18c2      	adds	r2, r0, r3
 8002504:	7111      	strb	r1, [r2, #4]

		Buffer->Head++;
 8002506:	3301      	adds	r3, #1
 8002508:	b2db      	uxtb	r3, r3
		Buffer->Head %= Buffer->Size;
 800250a:	fbb3 f2f4 	udiv	r2, r3, r4
 800250e:	fb04 3312 	mls	r3, r4, r2, r3
 8002512:	7043      	strb	r3, [r0, #1]

		Buffer->Elements++;
 8002514:	78c3      	ldrb	r3, [r0, #3]
 8002516:	3301      	adds	r3, #1
 8002518:	70c3      	strb	r3, [r0, #3]
	}

	return RB_OK;
 800251a:	2000      	movs	r0, #0
}
 800251c:	bc30      	pop	{r4, r5}
 800251e:	4770      	bx	lr
		return RB_NOFREESPACE;
 8002520:	2003      	movs	r0, #3
 8002522:	e7fb      	b.n	800251c <RB_WriteToBuffer+0x32>

08002524 <RB_ReadFromBuffer>:

RB_Status RB_ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
	if( Buffer->Tail == Buffer->Head) // No data to read
 8002524:	7883      	ldrb	r3, [r0, #2]
 8002526:	7842      	ldrb	r2, [r0, #1]
 8002528:	4293      	cmp	r3, r2
 800252a:	d010      	beq.n	800254e <RB_ReadFromBuffer+0x2a>
	{
		return RB_NOELEMENTS;
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 800252c:	4403      	add	r3, r0
 800252e:	791b      	ldrb	r3, [r3, #4]
 8002530:	700b      	strb	r3, [r1, #0]

		Buffer->Tail++;
 8002532:	7883      	ldrb	r3, [r0, #2]
 8002534:	3301      	adds	r3, #1
 8002536:	b2db      	uxtb	r3, r3
		Buffer->Tail %= Buffer->Size;
 8002538:	7801      	ldrb	r1, [r0, #0]
 800253a:	fbb3 f2f1 	udiv	r2, r3, r1
 800253e:	fb01 3312 	mls	r3, r1, r2, r3
 8002542:	7083      	strb	r3, [r0, #2]

		Buffer->Elements--;
 8002544:	78c3      	ldrb	r3, [r0, #3]
 8002546:	3b01      	subs	r3, #1
 8002548:	70c3      	strb	r3, [r0, #3]
	}
	return RB_OK;
 800254a:	2000      	movs	r0, #0
 800254c:	4770      	bx	lr
		return RB_NOELEMENTS;
 800254e:	2004      	movs	r0, #4
}
 8002550:	4770      	bx	lr

08002552 <RB_ElementsAvailable>:

uint8_t RB_ElementsAvailable(RingBuffer *Buffer)
{
	return Buffer->Elements;
}
 8002552:	78c0      	ldrb	r0, [r0, #3]
 8002554:	4770      	bx	lr
	...

08002558 <RuntimeStats_TelnetRxInc>:
void RuntimeStats_Init(void){
	memset(&commStats, 0, 48);
}

void RuntimeStats_TelnetRxInc (void){
	commStats.telnetStats.rxFrames++;
 8002558:	4a02      	ldr	r2, [pc, #8]	; (8002564 <RuntimeStats_TelnetRxInc+0xc>)
 800255a:	6813      	ldr	r3, [r2, #0]
 800255c:	3301      	adds	r3, #1
 800255e:	6013      	str	r3, [r2, #0]
}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20002ad8 	.word	0x20002ad8

08002568 <RuntimeStats_TelnetTxInc>:

void RuntimeStats_TelnetTxInc (void){
	commStats.telnetStats.txFrames++;
 8002568:	4a02      	ldr	r2, [pc, #8]	; (8002574 <RuntimeStats_TelnetTxInc+0xc>)
 800256a:	6853      	ldr	r3, [r2, #4]
 800256c:	3301      	adds	r3, #1
 800256e:	6053      	str	r3, [r2, #4]
}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20002ad8 	.word	0x20002ad8

08002578 <RuntimeStats_TelnetCurrIPSet>:

void RuntimeStats_TelnetCurrIPSet (uint8_t* ip){
	memcpy(&(commStats.telnetStats.currIP), ip, 4);
 8002578:	6802      	ldr	r2, [r0, #0]
 800257a:	4b01      	ldr	r3, [pc, #4]	; (8002580 <RuntimeStats_TelnetCurrIPSet+0x8>)
 800257c:	609a      	str	r2, [r3, #8]
}
 800257e:	4770      	bx	lr
 8002580:	20002ad8 	.word	0x20002ad8

08002584 <RuntimeStats_TelnetLastIPSet>:

void RuntimeStats_TelnetLastIPSet (void){
	memcpy(&(commStats.telnetStats.lastIP), &(commStats.telnetStats.currIP), 4);
 8002584:	4b02      	ldr	r3, [pc, #8]	; (8002590 <RuntimeStats_TelnetLastIPSet+0xc>)
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
	memset(&(commStats.telnetStats.currIP), 0, 4);
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
}
 800258e:	4770      	bx	lr
 8002590:	20002ad8 	.word	0x20002ad8

08002594 <FLASH_ChipSelect>:

extern osMutexId SPIMutexHandle;



void FLASH_ChipSelect (void){
 8002594:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 8002596:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <FLASH_ChipSelect+0x1c>)
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	f006 fd7f 	bl	80090a0 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 80025a2:	2200      	movs	r2, #0
 80025a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025a8:	4802      	ldr	r0, [pc, #8]	; (80025b4 <FLASH_ChipSelect+0x20>)
 80025aa:	f003 fb3c 	bl	8005c26 <HAL_GPIO_WritePin>
}
 80025ae:	bd08      	pop	{r3, pc}
 80025b0:	20003304 	.word	0x20003304
 80025b4:	40020400 	.word	0x40020400

080025b8 <FLASH_ChipDeselect>:

void FLASH_ChipDeselect (void){
 80025b8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80025ba:	2201      	movs	r2, #1
 80025bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025c0:	4805      	ldr	r0, [pc, #20]	; (80025d8 <FLASH_ChipDeselect+0x20>)
 80025c2:	f003 fb30 	bl	8005c26 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 80025c6:	2300      	movs	r3, #0
 80025c8:	461a      	mov	r2, r3
 80025ca:	4619      	mov	r1, r3
 80025cc:	4803      	ldr	r0, [pc, #12]	; (80025dc <FLASH_ChipDeselect+0x24>)
 80025ce:	6800      	ldr	r0, [r0, #0]
 80025d0:	f006 fb70 	bl	8008cb4 <xQueueGenericSend>
}
 80025d4:	bd08      	pop	{r3, pc}
 80025d6:	bf00      	nop
 80025d8:	40020400 	.word	0x40020400
 80025dc:	20003304 	.word	0x20003304

080025e0 <DataLogTask>:

void DataLogTask(void const * argument)
{
 80025e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DataLog */
	W25qxx_Init();
 80025e2:	f7ff fe31 	bl	8002248 <W25qxx_Init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80025e6:	2001      	movs	r0, #1
 80025e8:	f006 f979 	bl	80088de <osDelay>
 80025ec:	e7fb      	b.n	80025e6 <DataLogTask+0x6>
	...

080025f0 <nextion_SendData>:
static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3);
static void nextion_SendConfig(UART_HandleTypeDef* uart);
void NextionBig_DataRcv (void);
void NextionSmall_DataRcv (void);

static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3){
 80025f0:	b530      	push	{r4, r5, lr}
 80025f2:	b08d      	sub	sp, #52	; 0x34
	char buffor_to_send[40];
	uint8_t buffor_to_send_size;
	current_command = cmd;
 80025f4:	4c28      	ldr	r4, [pc, #160]	; (8002698 <nextion_SendData+0xa8>)
 80025f6:	7021      	strb	r1, [r4, #0]
	if(cmd < NEX_COMMANDS_COUNT && cmd > -1){
 80025f8:	2921      	cmp	r1, #33	; 0x21
 80025fa:	d84b      	bhi.n	8002694 <nextion_SendData+0xa4>
 80025fc:	4605      	mov	r5, r0
		if(cmd == NEX_WAKE || cmd == NEX_SENDME || cmd == NEX_SETTINGS_SAVED || cmd == NEX_SETTINGS_NOT_SAVED
 80025fe:	2901      	cmp	r1, #1
 8002600:	d919      	bls.n	8002636 <nextion_SendData+0x46>
 8002602:	2911      	cmp	r1, #17
 8002604:	d017      	beq.n	8002636 <nextion_SendData+0x46>
 8002606:	2912      	cmp	r1, #18
 8002608:	d015      	beq.n	8002636 <nextion_SendData+0x46>
			|| cmd == NEX_SETTINGS_LOCK || cmd == NEX_SETTINGS_UNLOCK){
 800260a:	2921      	cmp	r1, #33	; 0x21
 800260c:	d013      	beq.n	8002636 <nextion_SendData+0x46>
 800260e:	2920      	cmp	r1, #32
 8002610:	d011      	beq.n	8002636 <nextion_SendData+0x46>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
		}else if(cmd == NEX_PHASE_VOLTAGE ||
			cmd == NEX_PHASE_CURRENT ||
 8002612:	f1a1 0018 	sub.w	r0, r1, #24
 8002616:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_VOLTAGE ||
 8002618:	2802      	cmp	r0, #2
 800261a:	d916      	bls.n	800264a <nextion_SendData+0x5a>
			cmd == NEX_PHASE_POWER){
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
		}else if(cmd == NEX_PHASE_PRG_BAR ||
			cmd == NEX_CO_HEATER_PHASE_DUTY ||
			cmd == NEX_CWU_HEATER_PHASE_DUTY ||
			cmd == NEX_CWU_TEMP || cmd == NEX_CO_TEMP){
 800261c:	f1a1 001b 	sub.w	r0, r1, #27
 8002620:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_PRG_BAR ||
 8002622:	2804      	cmp	r0, #4
 8002624:	d81b      	bhi.n	800265e <nextion_SendData+0x6e>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2);
 8002626:	481d      	ldr	r0, [pc, #116]	; (800269c <nextion_SendData+0xac>)
 8002628:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800262c:	a802      	add	r0, sp, #8
 800262e:	f009 f883 	bl	800b738 <siprintf>
 8002632:	b2c2      	uxtb	r2, r0
 8002634:	e006      	b.n	8002644 <nextion_SendData+0x54>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
 8002636:	4b19      	ldr	r3, [pc, #100]	; (800269c <nextion_SendData+0xac>)
 8002638:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800263c:	a802      	add	r0, sp, #8
 800263e:	f009 f87b 	bl	800b738 <siprintf>
 8002642:	b2c2      	uxtb	r2, r0
		}else{
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
		}
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 8002644:	4610      	mov	r0, r2
 8002646:	4613      	mov	r3, r2
 8002648:	e017      	b.n	800267a <nextion_SendData+0x8a>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
 800264a:	4814      	ldr	r0, [pc, #80]	; (800269c <nextion_SendData+0xac>)
 800264c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002650:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002652:	9000      	str	r0, [sp, #0]
 8002654:	a802      	add	r0, sp, #8
 8002656:	f009 f86f 	bl	800b738 <siprintf>
 800265a:	b2c2      	uxtb	r2, r0
 800265c:	e7f2      	b.n	8002644 <nextion_SendData+0x54>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <nextion_SendData+0xac>)
 8002660:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002664:	a802      	add	r0, sp, #8
 8002666:	f009 f867 	bl	800b738 <siprintf>
 800266a:	b2c2      	uxtb	r2, r0
 800266c:	e7ea      	b.n	8002644 <nextion_SendData+0x54>
			buffor_to_send[i] = 0xFF;
 800266e:	a90c      	add	r1, sp, #48	; 0x30
 8002670:	4419      	add	r1, r3
 8002672:	24ff      	movs	r4, #255	; 0xff
 8002674:	f801 4c28 	strb.w	r4, [r1, #-40]
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 8002678:	3301      	adds	r3, #1
 800267a:	1cc1      	adds	r1, r0, #3
 800267c:	4299      	cmp	r1, r3
 800267e:	dcf6      	bgt.n	800266e <nextion_SendData+0x7e>
		}
		buffor_to_send_size += 3;
 8002680:	3203      	adds	r2, #3
		HAL_UART_Transmit(uart, (uint8_t*)buffor_to_send, buffor_to_send_size, 20);
 8002682:	2314      	movs	r3, #20
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	a902      	add	r1, sp, #8
 8002688:	4628      	mov	r0, r5
 800268a:	f005 fe4d 	bl	8008328 <HAL_UART_Transmit>
		vTaskDelay(5);
 800268e:	2005      	movs	r0, #5
 8002690:	f007 f9c6 	bl	8009a20 <vTaskDelay>
	}
}
 8002694:	b00d      	add	sp, #52	; 0x34
 8002696:	bd30      	pop	{r4, r5, pc}
 8002698:	20002be8 	.word	0x20002be8
 800269c:	0800c4e8 	.word	0x0800c4e8

080026a0 <nextion_SendConfig>:
	nextion_SendData(uart, NEX_MINUTE, currTime.Minutes, 0, 0);
	current_command = NEX_SECONDS;
	nextion_SendData(uart, NEX_SECONDS, currTime.Seconds, 0, 0);
}

static void nextion_SendConfig(UART_HandleTypeDef* uart){
 80026a0:	b570      	push	{r4, r5, r6, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	4606      	mov	r6, r0
	nextion_SendData(uart, NEX_CO_HIGH_TEMP, RegulationTaskData.parameters.CO_hi_temp, 0, 0);
 80026a6:	4d27      	ldr	r5, [pc, #156]	; (8002744 <nextion_SendConfig+0xa4>)
 80026a8:	f995 207d 	ldrsb.w	r2, [r5, #125]	; 0x7d
 80026ac:	2400      	movs	r4, #0
 80026ae:	9400      	str	r4, [sp, #0]
 80026b0:	4623      	mov	r3, r4
 80026b2:	2108      	movs	r1, #8
 80026b4:	f7ff ff9c 	bl	80025f0 <nextion_SendData>
	nextion_SendData(uart, NEX_CO_LOW_TEMP, RegulationTaskData.parameters.CO_lo_temp, 0, 0);
 80026b8:	f995 207e 	ldrsb.w	r2, [r5, #126]	; 0x7e
 80026bc:	9400      	str	r4, [sp, #0]
 80026be:	4623      	mov	r3, r4
 80026c0:	2109      	movs	r1, #9
 80026c2:	4630      	mov	r0, r6
 80026c4:	f7ff ff94 	bl	80025f0 <nextion_SendData>
	nextion_SendData(uart, NEX_CO_HEATER_POWER, (int32_t)RegulationTaskData.parameters.CO_heater_power, 0, 0);
 80026c8:	f8d5 2071 	ldr.w	r2, [r5, #113]	; 0x71
 80026cc:	9400      	str	r4, [sp, #0]
 80026ce:	4623      	mov	r3, r4
 80026d0:	ee07 2a90 	vmov	s15, r2
 80026d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026d8:	ee17 2a90 	vmov	r2, s15
 80026dc:	210a      	movs	r1, #10
 80026de:	4630      	mov	r0, r6
 80026e0:	f7ff ff86 	bl	80025f0 <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_HIGH_TEMP, RegulationTaskData.parameters.CWU_hi_temp, 0, 0);
 80026e4:	f995 207f 	ldrsb.w	r2, [r5, #127]	; 0x7f
 80026e8:	9400      	str	r4, [sp, #0]
 80026ea:	4623      	mov	r3, r4
 80026ec:	210b      	movs	r1, #11
 80026ee:	4630      	mov	r0, r6
 80026f0:	f7ff ff7e 	bl	80025f0 <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_LOW_TEMP, RegulationTaskData.parameters.CWU_lo_temp, 0, 0);
 80026f4:	f995 2080 	ldrsb.w	r2, [r5, #128]	; 0x80
 80026f8:	9400      	str	r4, [sp, #0]
 80026fa:	4623      	mov	r3, r4
 80026fc:	210c      	movs	r1, #12
 80026fe:	4630      	mov	r0, r6
 8002700:	f7ff ff76 	bl	80025f0 <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_HEATER_POWER, (int32_t)RegulationTaskData.parameters.CWU_heater_power, 0, 0);
 8002704:	f8d5 206d 	ldr.w	r2, [r5, #109]	; 0x6d
 8002708:	9400      	str	r4, [sp, #0]
 800270a:	4623      	mov	r3, r4
 800270c:	ee07 2a90 	vmov	s15, r2
 8002710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002714:	ee17 2a90 	vmov	r2, s15
 8002718:	210d      	movs	r1, #13
 800271a:	4630      	mov	r0, r6
 800271c:	f7ff ff68 	bl	80025f0 <nextion_SendData>
	nextion_SendData(uart, NEX_ACC_COEFF, RegulationTaskData.parameters.acumulated_power_coeff, 0, 0);
 8002720:	f995 207b 	ldrsb.w	r2, [r5, #123]	; 0x7b
 8002724:	9400      	str	r4, [sp, #0]
 8002726:	4623      	mov	r3, r4
 8002728:	210e      	movs	r1, #14
 800272a:	4630      	mov	r0, r6
 800272c:	f7ff ff60 	bl	80025f0 <nextion_SendData>
	nextion_SendData(uart, NEX_HEATER_COEFF, RegulationTaskData.parameters.heater_power_coeff, 0, 0);
 8002730:	f995 207c 	ldrsb.w	r2, [r5, #124]	; 0x7c
 8002734:	9400      	str	r4, [sp, #0]
 8002736:	4623      	mov	r3, r4
 8002738:	210f      	movs	r1, #15
 800273a:	4630      	mov	r0, r6
 800273c:	f7ff ff58 	bl	80025f0 <nextion_SendData>
}
 8002740:	b002      	add	sp, #8
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	20002cbc 	.word	0x20002cbc

08002748 <nextion_UpdateTime>:
static void nextion_UpdateTime(UART_HandleTypeDef* uart){
 8002748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	4605      	mov	r5, r0
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8002750:	4f23      	ldr	r7, [pc, #140]	; (80027e0 <nextion_UpdateTime+0x98>)
 8002752:	4c24      	ldr	r4, [pc, #144]	; (80027e4 <nextion_UpdateTime+0x9c>)
 8002754:	2200      	movs	r2, #0
 8002756:	4639      	mov	r1, r7
 8002758:	4620      	mov	r0, r4
 800275a:	f004 fd31 	bl	80071c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 800275e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80027ec <nextion_UpdateTime+0xa4>
 8002762:	2200      	movs	r2, #0
 8002764:	4641      	mov	r1, r8
 8002766:	4620      	mov	r0, r4
 8002768:	f004 fd55 	bl	8007216 <HAL_RTC_GetDate>
	current_command = NEX_YEAR;
 800276c:	4e1e      	ldr	r6, [pc, #120]	; (80027e8 <nextion_UpdateTime+0xa0>)
 800276e:	2102      	movs	r1, #2
 8002770:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_YEAR, currDate.Year + 2000, 0, 0);
 8002772:	f898 2003 	ldrb.w	r2, [r8, #3]
 8002776:	2400      	movs	r4, #0
 8002778:	9400      	str	r4, [sp, #0]
 800277a:	4623      	mov	r3, r4
 800277c:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 8002780:	4628      	mov	r0, r5
 8002782:	f7ff ff35 	bl	80025f0 <nextion_SendData>
	current_command = NEX_MONTH;
 8002786:	2103      	movs	r1, #3
 8002788:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_MONTH, currDate.Month, 0, 0);
 800278a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800278e:	9400      	str	r4, [sp, #0]
 8002790:	4623      	mov	r3, r4
 8002792:	4628      	mov	r0, r5
 8002794:	f7ff ff2c 	bl	80025f0 <nextion_SendData>
	current_command = NEX_DAY;
 8002798:	2104      	movs	r1, #4
 800279a:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_DAY, currDate.Date, 0, 0);
 800279c:	f898 2002 	ldrb.w	r2, [r8, #2]
 80027a0:	9400      	str	r4, [sp, #0]
 80027a2:	4623      	mov	r3, r4
 80027a4:	4628      	mov	r0, r5
 80027a6:	f7ff ff23 	bl	80025f0 <nextion_SendData>
	current_command = NEX_HOUR;
 80027aa:	2105      	movs	r1, #5
 80027ac:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_HOUR, currTime.Hours, 0, 0);
 80027ae:	783a      	ldrb	r2, [r7, #0]
 80027b0:	9400      	str	r4, [sp, #0]
 80027b2:	4623      	mov	r3, r4
 80027b4:	4628      	mov	r0, r5
 80027b6:	f7ff ff1b 	bl	80025f0 <nextion_SendData>
	current_command = NEX_MINUTE;
 80027ba:	2106      	movs	r1, #6
 80027bc:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_MINUTE, currTime.Minutes, 0, 0);
 80027be:	787a      	ldrb	r2, [r7, #1]
 80027c0:	9400      	str	r4, [sp, #0]
 80027c2:	4623      	mov	r3, r4
 80027c4:	4628      	mov	r0, r5
 80027c6:	f7ff ff13 	bl	80025f0 <nextion_SendData>
	current_command = NEX_SECONDS;
 80027ca:	2107      	movs	r1, #7
 80027cc:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_SECONDS, currTime.Seconds, 0, 0);
 80027ce:	78ba      	ldrb	r2, [r7, #2]
 80027d0:	9400      	str	r4, [sp, #0]
 80027d2:	4623      	mov	r3, r4
 80027d4:	4628      	mov	r0, r5
 80027d6:	f7ff ff0b 	bl	80025f0 <nextion_SendData>
}
 80027da:	b002      	add	sp, #8
 80027dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027e0:	20002ca8 	.word	0x20002ca8
 80027e4:	20003188 	.word	0x20003188
 80027e8:	20002be8 	.word	0x20002be8
 80027ec:	20002d4c 	.word	0x20002d4c

080027f0 <NextionBig_DataRcv>:
		}
	}
  /* USER CODE END UpdateLCD */
}

void NextionBig_DataRcv (void){
 80027f0:	b530      	push	{r4, r5, lr}
 80027f2:	b083      	sub	sp, #12
	uint8_t stopbyte = 0;
 80027f4:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 80027f6:	e062      	b.n	80028be <NextionBig_DataRcv+0xce>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
		start = nextion_big_comm.UartBufferHead;
		if(len > 3){
			if(len > 9){
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
					memcpy(&number, &nextion_big_comm.UART_Buffer[start], 4);
 80027f8:	f102 0320 	add.w	r3, r2, #32
 80027fc:	4d3d      	ldr	r5, [pc, #244]	; (80028f4 <NextionBig_DataRcv+0x104>)
 80027fe:	442b      	add	r3, r5
 8002800:	f8d3 0002 	ldr.w	r0, [r3, #2]
					memcpy(&value, &nextion_big_comm.UART_Buffer[start + 5], 4);
 8002804:	3225      	adds	r2, #37	; 0x25
 8002806:	442a      	add	r2, r5
 8002808:	f8d2 1002 	ldr.w	r1, [r2, #2]
					nextion_big.param = number;
 800280c:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <NextionBig_DataRcv+0x108>)
 800280e:	6058      	str	r0, [r3, #4]
					memcpy(&nextion_big.value, &value, 4);
 8002810:	6099      	str	r1, [r3, #8]
					Config_ChangeValue(number, value);
 8002812:	f7fe fc45 	bl	80010a0 <Config_ChangeValue>
					nextion_big_comm.UartBufferHead += 10;
 8002816:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800281a:	330a      	adds	r3, #10
 800281c:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
					xTaskNotifyFromISR(DiplaysHandle, 1, eSetValueWithOverwrite, NULL);
 8002820:	4b36      	ldr	r3, [pc, #216]	; (80028fc <NextionBig_DataRcv+0x10c>)
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	2300      	movs	r3, #0
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2203      	movs	r2, #3
 800282a:	2101      	movs	r1, #1
 800282c:	f007 fc08 	bl	800a040 <xTaskGenericNotifyFromISR>
 8002830:	e03e      	b.n	80028b0 <NextionBig_DataRcv+0xc0>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 8002832:	3301      	adds	r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	4610      	mov	r0, r2
 8002838:	1d51      	adds	r1, r2, #5
 800283a:	428b      	cmp	r3, r1
 800283c:	da0a      	bge.n	8002854 <NextionBig_DataRcv+0x64>
					if(nextion_big_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 800283e:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 8002842:	492c      	ldr	r1, [pc, #176]	; (80028f4 <NextionBig_DataRcv+0x104>)
 8002844:	4401      	add	r1, r0
 8002846:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 800284a:	29ff      	cmp	r1, #255	; 0xff
 800284c:	d1f1      	bne.n	8002832 <NextionBig_DataRcv+0x42>
						stopbyte ++;
 800284e:	3401      	adds	r4, #1
 8002850:	b2e4      	uxtb	r4, r4
 8002852:	e7ee      	b.n	8002832 <NextionBig_DataRcv+0x42>
					}
				}
				if(stopbyte == 3){
 8002854:	2c03      	cmp	r4, #3
 8002856:	d006      	beq.n	8002866 <NextionBig_DataRcv+0x76>
							y = 4;
							break;
					}
					nextion_big_comm.UartBufferHead += y;
				}else{
					nextion_big_comm.UartBufferHead ++;
 8002858:	4a26      	ldr	r2, [pc, #152]	; (80028f4 <NextionBig_DataRcv+0x104>)
 800285a:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 800285e:	3301      	adds	r3, #1
 8002860:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 8002864:	e024      	b.n	80028b0 <NextionBig_DataRcv+0xc0>
					switch(nextion_big_comm.UART_Buffer[start]){
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <NextionBig_DataRcv+0x104>)
 8002868:	4413      	add	r3, r2
 800286a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800286e:	2b1a      	cmp	r3, #26
 8002870:	d011      	beq.n	8002896 <NextionBig_DataRcv+0xa6>
 8002872:	2b66      	cmp	r3, #102	; 0x66
 8002874:	d116      	bne.n	80028a4 <NextionBig_DataRcv+0xb4>
							nextion_big.display = nextion_big_comm.UART_Buffer[start + 1];
 8002876:	3001      	adds	r0, #1
 8002878:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <NextionBig_DataRcv+0x104>)
 800287a:	4418      	add	r0, r3
 800287c:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <NextionBig_DataRcv+0x108>)
 8002882:	701a      	strb	r2, [r3, #0]
							y = 5;
 8002884:	2305      	movs	r3, #5
					nextion_big_comm.UartBufferHead += y;
 8002886:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <NextionBig_DataRcv+0x104>)
 8002888:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 800288c:	440b      	add	r3, r1
 800288e:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 8002892:	2400      	movs	r4, #0
 8002894:	e00c      	b.n	80028b0 <NextionBig_DataRcv+0xc0>
							command_correct[current_command] = 1;
 8002896:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <NextionBig_DataRcv+0x110>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <NextionBig_DataRcv+0x114>)
 800289c:	2101      	movs	r1, #1
 800289e:	54d1      	strb	r1, [r2, r3]
							y = 4;
 80028a0:	2304      	movs	r3, #4
							break;
 80028a2:	e7f0      	b.n	8002886 <NextionBig_DataRcv+0x96>
							y = 4;
 80028a4:	2304      	movs	r3, #4
 80028a6:	e7ee      	b.n	8002886 <NextionBig_DataRcv+0x96>
				}
			}

		}else{
			//if(nextion_big_comm.UART_Buffer[start] == 0 || nextion_big_comm.UART_Buffer[start] == 255){
				nextion_big_comm.UartBufferHead++;
 80028a8:	3201      	adds	r2, #1
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <NextionBig_DataRcv+0x104>)
 80028ac:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_big_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 80028b0:	4a10      	ldr	r2, [pc, #64]	; (80028f4 <NextionBig_DataRcv+0x104>)
 80028b2:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 80028b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028ba:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <NextionBig_DataRcv+0x104>)
 80028c0:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 80028c4:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 80028c8:	4291      	cmp	r1, r2
 80028ca:	d011      	beq.n	80028f0 <NextionBig_DataRcv+0x100>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 80028cc:	b2d3      	uxtb	r3, r2
 80028ce:	1ac9      	subs	r1, r1, r3
 80028d0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 80028d4:	2903      	cmp	r1, #3
 80028d6:	d9e7      	bls.n	80028a8 <NextionBig_DataRcv+0xb8>
			if(len > 9){
 80028d8:	2909      	cmp	r1, #9
 80028da:	d906      	bls.n	80028ea <NextionBig_DataRcv+0xfa>
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
 80028dc:	1d10      	adds	r0, r2, #4
 80028de:	4905      	ldr	r1, [pc, #20]	; (80028f4 <NextionBig_DataRcv+0x104>)
 80028e0:	4401      	add	r1, r0
 80028e2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80028e6:	290a      	cmp	r1, #10
 80028e8:	d086      	beq.n	80027f8 <NextionBig_DataRcv+0x8>
				for(i = start + 1; i < (start + 5); i++){
 80028ea:	3301      	adds	r3, #1
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	e7a2      	b.n	8002836 <NextionBig_DataRcv+0x46>
	}
}
 80028f0:	b003      	add	sp, #12
 80028f2:	bd30      	pop	{r4, r5, pc}
 80028f4:	20002b38 	.word	0x20002b38
 80028f8:	20002b08 	.word	0x20002b08
 80028fc:	20003300 	.word	0x20003300
 8002900:	20002be8 	.word	0x20002be8
 8002904:	20002b14 	.word	0x20002b14

08002908 <NextionSmall_DataRcv>:

void NextionSmall_DataRcv (void){
 8002908:	b530      	push	{r4, r5, lr}
 800290a:	b083      	sub	sp, #12
	uint8_t stopbyte = 0;
 800290c:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 800290e:	e078      	b.n	8002a02 <NextionSmall_DataRcv+0xfa>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
		start = nextion_small_comm.UartBufferHead;
		if(len > 3){
			if(len > 9){
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
					memcpy(&number, &nextion_small_comm.UART_Buffer[start], 4);
 8002910:	f102 0320 	add.w	r3, r2, #32
 8002914:	4d49      	ldr	r5, [pc, #292]	; (8002a3c <NextionSmall_DataRcv+0x134>)
 8002916:	442b      	add	r3, r5
 8002918:	f8d3 0002 	ldr.w	r0, [r3, #2]
					memcpy(&value, &nextion_small_comm.UART_Buffer[start + 5], 4);
 800291c:	3225      	adds	r2, #37	; 0x25
 800291e:	442a      	add	r2, r5
 8002920:	f8d2 1002 	ldr.w	r1, [r2, #2]
					nextion_small.param = number;
 8002924:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <NextionSmall_DataRcv+0x138>)
 8002926:	6058      	str	r0, [r3, #4]
					memcpy(&nextion_small.value, &value, 4);
 8002928:	6099      	str	r1, [r3, #8]
					Config_ChangeValue(number, value);
 800292a:	f7fe fbb9 	bl	80010a0 <Config_ChangeValue>
					nextion_small_comm.UartBufferHead += 10;
 800292e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8002932:	330a      	adds	r3, #10
 8002934:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
					xTaskNotifyFromISR(DiplaysHandle, 2, eSetValueWithOverwrite, NULL);
 8002938:	4b42      	ldr	r3, [pc, #264]	; (8002a44 <NextionSmall_DataRcv+0x13c>)
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	2300      	movs	r3, #0
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	2203      	movs	r2, #3
 8002942:	2102      	movs	r1, #2
 8002944:	f007 fb7c 	bl	800a040 <xTaskGenericNotifyFromISR>
 8002948:	e054      	b.n	80029f4 <NextionSmall_DataRcv+0xec>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 800294a:	3301      	adds	r3, #1
 800294c:	b2db      	uxtb	r3, r3
 800294e:	4610      	mov	r0, r2
 8002950:	1d51      	adds	r1, r2, #5
 8002952:	428b      	cmp	r3, r1
 8002954:	da0a      	bge.n	800296c <NextionSmall_DataRcv+0x64>
					if(nextion_small_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 8002956:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 800295a:	4938      	ldr	r1, [pc, #224]	; (8002a3c <NextionSmall_DataRcv+0x134>)
 800295c:	4401      	add	r1, r0
 800295e:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8002962:	29ff      	cmp	r1, #255	; 0xff
 8002964:	d1f1      	bne.n	800294a <NextionSmall_DataRcv+0x42>
						stopbyte ++;
 8002966:	3401      	adds	r4, #1
 8002968:	b2e4      	uxtb	r4, r4
 800296a:	e7ee      	b.n	800294a <NextionSmall_DataRcv+0x42>
					}
				}
				if(stopbyte == 3){
 800296c:	2c03      	cmp	r4, #3
 800296e:	d006      	beq.n	800297e <NextionSmall_DataRcv+0x76>
							y = 4;
							break;
					}
					nextion_small_comm.UartBufferHead += y;
				}else{
					nextion_small_comm.UartBufferHead ++;
 8002970:	4a32      	ldr	r2, [pc, #200]	; (8002a3c <NextionSmall_DataRcv+0x134>)
 8002972:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8002976:	3301      	adds	r3, #1
 8002978:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 800297c:	e03a      	b.n	80029f4 <NextionSmall_DataRcv+0xec>
					switch(nextion_small_comm.UART_Buffer[start]){
 800297e:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <NextionSmall_DataRcv+0x134>)
 8002980:	4413      	add	r3, r2
 8002982:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002986:	2b86      	cmp	r3, #134	; 0x86
 8002988:	d024      	beq.n	80029d4 <NextionSmall_DataRcv+0xcc>
 800298a:	d813      	bhi.n	80029b4 <NextionSmall_DataRcv+0xac>
 800298c:	2b1a      	cmp	r3, #26
 800298e:	d01a      	beq.n	80029c6 <NextionSmall_DataRcv+0xbe>
 8002990:	2b66      	cmp	r3, #102	; 0x66
 8002992:	d129      	bne.n	80029e8 <NextionSmall_DataRcv+0xe0>
							nextion_small.display = nextion_small_comm.UART_Buffer[start + 1];
 8002994:	3001      	adds	r0, #1
 8002996:	4b29      	ldr	r3, [pc, #164]	; (8002a3c <NextionSmall_DataRcv+0x134>)
 8002998:	4418      	add	r0, r3
 800299a:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 800299e:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <NextionSmall_DataRcv+0x138>)
 80029a0:	701a      	strb	r2, [r3, #0]
							y = 5;
 80029a2:	2305      	movs	r3, #5
					nextion_small_comm.UartBufferHead += y;
 80029a4:	4a25      	ldr	r2, [pc, #148]	; (8002a3c <NextionSmall_DataRcv+0x134>)
 80029a6:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 80029aa:	440b      	add	r3, r1
 80029ac:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 80029b0:	2400      	movs	r4, #0
 80029b2:	e01f      	b.n	80029f4 <NextionSmall_DataRcv+0xec>
					switch(nextion_small_comm.UART_Buffer[start]){
 80029b4:	2b87      	cmp	r3, #135	; 0x87
 80029b6:	d012      	beq.n	80029de <NextionSmall_DataRcv+0xd6>
 80029b8:	2b88      	cmp	r3, #136	; 0x88
 80029ba:	d115      	bne.n	80029e8 <NextionSmall_DataRcv+0xe0>
							nextion_small.ready = 1;
 80029bc:	4b20      	ldr	r3, [pc, #128]	; (8002a40 <NextionSmall_DataRcv+0x138>)
 80029be:	2201      	movs	r2, #1
 80029c0:	70da      	strb	r2, [r3, #3]
							y = 4;
 80029c2:	2304      	movs	r3, #4
							break;
 80029c4:	e7ee      	b.n	80029a4 <NextionSmall_DataRcv+0x9c>
							command_correct[current_command] = 1;
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <NextionSmall_DataRcv+0x140>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	4a20      	ldr	r2, [pc, #128]	; (8002a4c <NextionSmall_DataRcv+0x144>)
 80029cc:	2101      	movs	r1, #1
 80029ce:	54d1      	strb	r1, [r2, r3]
							y = 4;
 80029d0:	2304      	movs	r3, #4
							break;
 80029d2:	e7e7      	b.n	80029a4 <NextionSmall_DataRcv+0x9c>
							nextion_small.sleep = 1;
 80029d4:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <NextionSmall_DataRcv+0x138>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	709a      	strb	r2, [r3, #2]
							y = 4;
 80029da:	2304      	movs	r3, #4
							break;
 80029dc:	e7e2      	b.n	80029a4 <NextionSmall_DataRcv+0x9c>
							nextion_small.sleep = 0;
 80029de:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <NextionSmall_DataRcv+0x138>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	709a      	strb	r2, [r3, #2]
							y = 4;
 80029e4:	2304      	movs	r3, #4
							break;
 80029e6:	e7dd      	b.n	80029a4 <NextionSmall_DataRcv+0x9c>
							y = 4;
 80029e8:	2304      	movs	r3, #4
 80029ea:	e7db      	b.n	80029a4 <NextionSmall_DataRcv+0x9c>
				}
			}

		}else{
			//if(nextion_small_comm.UART_Buffer[start] == 0 || nextion_small_comm.UART_Buffer[start] == 255){
				nextion_small_comm.UartBufferHead++;
 80029ec:	3201      	adds	r2, #1
 80029ee:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <NextionSmall_DataRcv+0x134>)
 80029f0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_small_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 80029f4:	4a11      	ldr	r2, [pc, #68]	; (8002a3c <NextionSmall_DataRcv+0x134>)
 80029f6:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 80029fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029fe:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <NextionSmall_DataRcv+0x134>)
 8002a04:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 8002a08:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 8002a0c:	4291      	cmp	r1, r2
 8002a0e:	d012      	beq.n	8002a36 <NextionSmall_DataRcv+0x12e>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 8002a10:	b2d3      	uxtb	r3, r2
 8002a12:	1ac9      	subs	r1, r1, r3
 8002a14:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 8002a18:	2903      	cmp	r1, #3
 8002a1a:	d9e7      	bls.n	80029ec <NextionSmall_DataRcv+0xe4>
			if(len > 9){
 8002a1c:	2909      	cmp	r1, #9
 8002a1e:	d907      	bls.n	8002a30 <NextionSmall_DataRcv+0x128>
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
 8002a20:	1d10      	adds	r0, r2, #4
 8002a22:	4906      	ldr	r1, [pc, #24]	; (8002a3c <NextionSmall_DataRcv+0x134>)
 8002a24:	4401      	add	r1, r0
 8002a26:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8002a2a:	290a      	cmp	r1, #10
 8002a2c:	f43f af70 	beq.w	8002910 <NextionSmall_DataRcv+0x8>
				for(i = start + 1; i < (start + 5); i++){
 8002a30:	3301      	adds	r3, #1
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	e78b      	b.n	800294e <NextionSmall_DataRcv+0x46>
	}
}
 8002a36:	b003      	add	sp, #12
 8002a38:	bd30      	pop	{r4, r5, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20002bec 	.word	0x20002bec
 8002a40:	20002c9c 	.word	0x20002c9c
 8002a44:	20003300 	.word	0x20003300
 8002a48:	20002be8 	.word	0x20002be8
 8002a4c:	20002b14 	.word	0x20002b14

08002a50 <DisplayTask>:
{
 8002a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a54:	ed2d 8b02 	vpush	{d8}
 8002a58:	b089      	sub	sp, #36	; 0x24
	nextion_small.display = 30;
 8002a5a:	4a84      	ldr	r2, [pc, #528]	; (8002c6c <DisplayTask+0x21c>)
 8002a5c:	231e      	movs	r3, #30
 8002a5e:	7013      	strb	r3, [r2, #0]
	nextion_small.last_display = 30;
 8002a60:	7053      	strb	r3, [r2, #1]
	nextion_big.display = 30;
 8002a62:	4d83      	ldr	r5, [pc, #524]	; (8002c70 <DisplayTask+0x220>)
 8002a64:	702b      	strb	r3, [r5, #0]
	nextion_big.last_display = 30;
 8002a66:	706b      	strb	r3, [r5, #1]
	UARTDMA_Init(&nextion_small_comm, NEXTION_SMALL_UART);
 8002a68:	4e82      	ldr	r6, [pc, #520]	; (8002c74 <DisplayTask+0x224>)
 8002a6a:	4c83      	ldr	r4, [pc, #524]	; (8002c78 <DisplayTask+0x228>)
 8002a6c:	4631      	mov	r1, r6
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f000 ff9f 	bl	80039b2 <UARTDMA_Init>
	UARTDMA_Init(&nextion_big_comm, NEXTION_BIG_UART);
 8002a74:	4f81      	ldr	r7, [pc, #516]	; (8002c7c <DisplayTask+0x22c>)
 8002a76:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8002ca0 <DisplayTask+0x250>
 8002a7a:	4639      	mov	r1, r7
 8002a7c:	4640      	mov	r0, r8
 8002a7e:	f000 ff98 	bl	80039b2 <UARTDMA_Init>
	nextion_big_comm.callback = NextionBig_DataRcv;
 8002a82:	4b7f      	ldr	r3, [pc, #508]	; (8002c80 <DisplayTask+0x230>)
 8002a84:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
	nextion_small_comm.callback = NextionSmall_DataRcv;
 8002a88:	4b7e      	ldr	r3, [pc, #504]	; (8002c84 <DisplayTask+0x234>)
 8002a8a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	Config_GetEthernetConfig(&configuration);
 8002a8e:	a803      	add	r0, sp, #12
 8002a90:	f7fe fb9c 	bl	80011cc <Config_GetEthernetConfig>
	RegulationTask_GetData(&RegulationTaskData);
 8002a94:	487c      	ldr	r0, [pc, #496]	; (8002c88 <DisplayTask+0x238>)
 8002a96:	f000 ff25 	bl	80038e4 <RegulationTask_GetData>
	vTaskDelay(1000);
 8002a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a9e:	f006 ffbf 	bl	8009a20 <vTaskDelay>
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8002aa2:	4c7a      	ldr	r4, [pc, #488]	; (8002c8c <DisplayTask+0x23c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	497a      	ldr	r1, [pc, #488]	; (8002c90 <DisplayTask+0x240>)
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f004 fb89 	bl	80071c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	4978      	ldr	r1, [pc, #480]	; (8002c94 <DisplayTask+0x244>)
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f004 fbaf 	bl	8007216 <HAL_RTC_GetDate>
	nextion_SendData(NEXTION_SMALL_UART, NEX_WAKE, 0, 0, 0);
 8002ab8:	2400      	movs	r4, #0
 8002aba:	9400      	str	r4, [sp, #0]
 8002abc:	4623      	mov	r3, r4
 8002abe:	4622      	mov	r2, r4
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	4630      	mov	r0, r6
 8002ac4:	f7ff fd94 	bl	80025f0 <nextion_SendData>
	vTaskDelay(1);
 8002ac8:	2001      	movs	r0, #1
 8002aca:	f006 ffa9 	bl	8009a20 <vTaskDelay>
	nextion_SendData(NEXTION_SMALL_UART, NEX_SENDME, 0, 0, 0);
 8002ace:	9400      	str	r4, [sp, #0]
 8002ad0:	4623      	mov	r3, r4
 8002ad2:	4622      	mov	r2, r4
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	4630      	mov	r0, r6
 8002ad8:	f7ff fd8a 	bl	80025f0 <nextion_SendData>
	vTaskDelay(1);
 8002adc:	2001      	movs	r0, #1
 8002ade:	f006 ff9f 	bl	8009a20 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002ae2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f007 fa22 	bl	8009f30 <ulTaskNotifyTake>
	nextion_SendData(NEXTION_BIG_UART, NEX_SENDME, 0, 0, 0);
 8002aec:	9400      	str	r4, [sp, #0]
 8002aee:	4623      	mov	r3, r4
 8002af0:	4622      	mov	r2, r4
 8002af2:	2101      	movs	r1, #1
 8002af4:	4638      	mov	r0, r7
 8002af6:	f7ff fd7b 	bl	80025f0 <nextion_SendData>
	vTaskDelay(1);
 8002afa:	2001      	movs	r0, #1
 8002afc:	f006 ff90 	bl	8009a20 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002b00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b04:	2001      	movs	r0, #1
 8002b06:	f007 fa13 	bl	8009f30 <ulTaskNotifyTake>
	if(nextion_big.display != 30){
 8002b0a:	782b      	ldrb	r3, [r5, #0]
 8002b0c:	2b1e      	cmp	r3, #30
 8002b0e:	d005      	beq.n	8002b1c <DisplayTask+0xcc>
		nextion_UpdateTime(NEXTION_BIG_UART);
 8002b10:	4638      	mov	r0, r7
 8002b12:	f7ff fe19 	bl	8002748 <nextion_UpdateTime>
		nextion_SendConfig(NEXTION_BIG_UART);
 8002b16:	4638      	mov	r0, r7
 8002b18:	f7ff fdc2 	bl	80026a0 <nextion_SendConfig>
	if(nextion_small.display != 30){
 8002b1c:	4b53      	ldr	r3, [pc, #332]	; (8002c6c <DisplayTask+0x21c>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b1e      	cmp	r3, #30
 8002b22:	d002      	beq.n	8002b2a <DisplayTask+0xda>
		nextion_SendConfig(NEXTION_SMALL_UART);
 8002b24:	4853      	ldr	r0, [pc, #332]	; (8002c74 <DisplayTask+0x224>)
 8002b26:	f7ff fdbb 	bl	80026a0 <nextion_SendConfig>
{
 8002b2a:	f04f 0900 	mov.w	r9, #0
 8002b2e:	46ca      	mov	sl, r9
 8002b30:	e02a      	b.n	8002b88 <DisplayTask+0x138>
				nextion_UpdateTime(NEXTION_BIG_UART);
 8002b32:	4852      	ldr	r0, [pc, #328]	; (8002c7c <DisplayTask+0x22c>)
 8002b34:	f7ff fe08 	bl	8002748 <nextion_UpdateTime>
				if(nextion_small.display != 30){
 8002b38:	4b4c      	ldr	r3, [pc, #304]	; (8002c6c <DisplayTask+0x21c>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b1e      	cmp	r3, #30
 8002b3e:	d031      	beq.n	8002ba4 <DisplayTask+0x154>
					nextion_SendData(NEXTION_SMALL_UART, NEX_SETTINGS_LOCK, 0, 0, 0);
 8002b40:	2200      	movs	r2, #0
 8002b42:	9200      	str	r2, [sp, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	2121      	movs	r1, #33	; 0x21
 8002b48:	484a      	ldr	r0, [pc, #296]	; (8002c74 <DisplayTask+0x224>)
 8002b4a:	f7ff fd51 	bl	80025f0 <nextion_SendData>
 8002b4e:	e029      	b.n	8002ba4 <DisplayTask+0x154>
					nextion_SendData(NEXTION_SMALL_UART, NEX_SETTINGS_UNLOCK, 0, 0, 0);
 8002b50:	2200      	movs	r2, #0
 8002b52:	9200      	str	r2, [sp, #0]
 8002b54:	4613      	mov	r3, r2
 8002b56:	2120      	movs	r1, #32
 8002b58:	4846      	ldr	r0, [pc, #280]	; (8002c74 <DisplayTask+0x224>)
 8002b5a:	f7ff fd49 	bl	80025f0 <nextion_SendData>
 8002b5e:	e021      	b.n	8002ba4 <DisplayTask+0x154>
				if(nextion_big.display != 30){
 8002b60:	4b43      	ldr	r3, [pc, #268]	; (8002c70 <DisplayTask+0x220>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b1e      	cmp	r3, #30
 8002b66:	d133      	bne.n	8002bd0 <DisplayTask+0x180>
		if(nextion_big.display == 1){
 8002b68:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <DisplayTask+0x220>)
 8002b6a:	781d      	ldrb	r5, [r3, #0]
 8002b6c:	2d01      	cmp	r5, #1
 8002b6e:	d037      	beq.n	8002be0 <DisplayTask+0x190>
		vTaskDelay(1000);
 8002b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b74:	f006 ff54 	bl	8009a20 <vTaskDelay>
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002b78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f007 f9d7 	bl	8009f30 <ulTaskNotifyTake>
		if(ulNotificationValue > 0){
 8002b82:	2800      	cmp	r0, #0
 8002b84:	f040 812c 	bne.w	8002de0 <DisplayTask+0x390>
		RegulationTask_GetData(&RegulationTaskData);
 8002b88:	483f      	ldr	r0, [pc, #252]	; (8002c88 <DisplayTask+0x238>)
 8002b8a:	f000 feab 	bl	80038e4 <RegulationTask_GetData>
		if(nextion_big.display != nextion_big.last_display){
 8002b8e:	4b38      	ldr	r3, [pc, #224]	; (8002c70 <DisplayTask+0x220>)
 8002b90:	781a      	ldrb	r2, [r3, #0]
 8002b92:	785b      	ldrb	r3, [r3, #1]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d008      	beq.n	8002baa <DisplayTask+0x15a>
			if(nextion_big.display == 2){
 8002b98:	2a02      	cmp	r2, #2
 8002b9a:	d0ca      	beq.n	8002b32 <DisplayTask+0xe2>
				if(nextion_small.display != 30){
 8002b9c:	4b33      	ldr	r3, [pc, #204]	; (8002c6c <DisplayTask+0x21c>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b1e      	cmp	r3, #30
 8002ba2:	d1d5      	bne.n	8002b50 <DisplayTask+0x100>
			nextion_big.last_display = nextion_big.display;
 8002ba4:	4b32      	ldr	r3, [pc, #200]	; (8002c70 <DisplayTask+0x220>)
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	705a      	strb	r2, [r3, #1]
		if(nextion_small.display != nextion_small.last_display){
 8002baa:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <DisplayTask+0x21c>)
 8002bac:	781a      	ldrb	r2, [r3, #0]
 8002bae:	785b      	ldrb	r3, [r3, #1]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d0d9      	beq.n	8002b68 <DisplayTask+0x118>
			if(nextion_small.display == 1){
 8002bb4:	2a01      	cmp	r2, #1
 8002bb6:	d0d3      	beq.n	8002b60 <DisplayTask+0x110>
				if(nextion_big.display != 30){
 8002bb8:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <DisplayTask+0x220>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b1e      	cmp	r3, #30
 8002bbe:	d0d3      	beq.n	8002b68 <DisplayTask+0x118>
					nextion_SendData(NEXTION_BIG_UART, NEX_SETTINGS_UNLOCK, 0, 0, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	9200      	str	r2, [sp, #0]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	2120      	movs	r1, #32
 8002bc8:	482c      	ldr	r0, [pc, #176]	; (8002c7c <DisplayTask+0x22c>)
 8002bca:	f7ff fd11 	bl	80025f0 <nextion_SendData>
 8002bce:	e7cb      	b.n	8002b68 <DisplayTask+0x118>
					nextion_SendData(NEXTION_BIG_UART, NEX_SETTINGS_LOCK, 0, 0, 0);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	9200      	str	r2, [sp, #0]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	2121      	movs	r1, #33	; 0x21
 8002bd8:	4828      	ldr	r0, [pc, #160]	; (8002c7c <DisplayTask+0x22c>)
 8002bda:	f7ff fd09 	bl	80025f0 <nextion_SendData>
 8002bde:	e7c3      	b.n	8002b68 <DisplayTask+0x118>
			nextion_SendData(NEXTION_BIG_UART, NEX_COUNTER_PRESENCE, RegulationTaskData.counter.counter_present, 0, 0);
 8002be0:	4e29      	ldr	r6, [pc, #164]	; (8002c88 <DisplayTask+0x238>)
 8002be2:	7832      	ldrb	r2, [r6, #0]
 8002be4:	4f25      	ldr	r7, [pc, #148]	; (8002c7c <DisplayTask+0x22c>)
 8002be6:	2400      	movs	r4, #0
 8002be8:	9400      	str	r4, [sp, #0]
 8002bea:	4623      	mov	r3, r4
 8002bec:	2113      	movs	r1, #19
 8002bee:	4638      	mov	r0, r7
 8002bf0:	f7ff fcfe 	bl	80025f0 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_TSENS_PRESENCE, RegulationTaskData.counter.temperatures_present, 0, 0);
 8002bf4:	78b2      	ldrb	r2, [r6, #2]
 8002bf6:	9400      	str	r4, [sp, #0]
 8002bf8:	4623      	mov	r3, r4
 8002bfa:	2114      	movs	r1, #20
 8002bfc:	4638      	mov	r0, r7
 8002bfe:	f7ff fcf7 	bl	80025f0 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_MAIN_SW, RegulationTaskData.ControlWord.MainSwitch_State, 0, 0);
 8002c02:	f896 2068 	ldrb.w	r2, [r6, #104]	; 0x68
 8002c06:	9400      	str	r4, [sp, #0]
 8002c08:	4623      	mov	r3, r4
 8002c0a:	f002 0201 	and.w	r2, r2, #1
 8002c0e:	2115      	movs	r1, #21
 8002c10:	4638      	mov	r0, r7
 8002c12:	f7ff fced 	bl	80025f0 <nextion_SendData>
			if(RegulationTaskData.ControlWord.CWUHeaterError || RegulationTaskData.IOsignals.signals.input4){
 8002c16:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8002c18:	4a1f      	ldr	r2, [pc, #124]	; (8002c98 <DisplayTask+0x248>)
 8002c1a:	421a      	tst	r2, r3
 8002c1c:	d106      	bne.n	8002c2c <DisplayTask+0x1dc>
			}else if(RegulationTaskData.ControlWord.CWUHeaterStateOut){
 8002c1e:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
 8002c22:	f013 0f01 	tst.w	r3, #1
 8002c26:	d015      	beq.n	8002c54 <DisplayTask+0x204>
				pic = 2;
 8002c28:	2202      	movs	r2, #2
 8002c2a:	e000      	b.n	8002c2e <DisplayTask+0x1de>
				pic = 3;
 8002c2c:	2203      	movs	r2, #3
			nextion_SendData(NEXTION_BIG_UART, NEX_CWU_PIC, pic, 0, 0);
 8002c2e:	2300      	movs	r3, #0
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2116      	movs	r1, #22
 8002c34:	4811      	ldr	r0, [pc, #68]	; (8002c7c <DisplayTask+0x22c>)
 8002c36:	f7ff fcdb 	bl	80025f0 <nextion_SendData>
			if(RegulationTaskData.ControlWord.COHeaterError || RegulationTaskData.IOsignals.signals.input5){
 8002c3a:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <DisplayTask+0x238>)
 8002c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c3e:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <DisplayTask+0x24c>)
 8002c40:	421a      	tst	r2, r3
 8002c42:	d109      	bne.n	8002c58 <DisplayTask+0x208>
			}else if(RegulationTaskData.ControlWord.COHeaterStateOut){
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <DisplayTask+0x238>)
 8002c46:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002c4a:	f013 0f01 	tst.w	r3, #1
 8002c4e:	d004      	beq.n	8002c5a <DisplayTask+0x20a>
				pic = 2;
 8002c50:	2502      	movs	r5, #2
 8002c52:	e002      	b.n	8002c5a <DisplayTask+0x20a>
				pic = 1;
 8002c54:	462a      	mov	r2, r5
 8002c56:	e7ea      	b.n	8002c2e <DisplayTask+0x1de>
				pic = 3;
 8002c58:	2503      	movs	r5, #3
			nextion_SendData(NEXTION_BIG_UART, NEX_CO_PIC, pic, 0, 0);
 8002c5a:	2400      	movs	r4, #0
 8002c5c:	9400      	str	r4, [sp, #0]
 8002c5e:	4623      	mov	r3, r4
 8002c60:	462a      	mov	r2, r5
 8002c62:	2117      	movs	r1, #23
 8002c64:	4805      	ldr	r0, [pc, #20]	; (8002c7c <DisplayTask+0x22c>)
 8002c66:	f7ff fcc3 	bl	80025f0 <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 8002c6a:	e0b5      	b.n	8002dd8 <DisplayTask+0x388>
 8002c6c:	20002c9c 	.word	0x20002c9c
 8002c70:	20002b08 	.word	0x20002b08
 8002c74:	20003104 	.word	0x20003104
 8002c78:	20002bec 	.word	0x20002bec
 8002c7c:	200031e8 	.word	0x200031e8
 8002c80:	080027f1 	.word	0x080027f1
 8002c84:	08002909 	.word	0x08002909
 8002c88:	20002cbc 	.word	0x20002cbc
 8002c8c:	20003188 	.word	0x20003188
 8002c90:	20002ca8 	.word	0x20002ca8
 8002c94:	20002d4c 	.word	0x20002d4c
 8002c98:	10000001 	.word	0x10000001
 8002c9c:	08000001 	.word	0x08000001
 8002ca0:	20002b38 	.word	0x20002b38
				rest = (uint32_t)(RegulationTaskData.counter.voltages[i] * 10.0) % 10;
 8002ca4:	4d59      	ldr	r5, [pc, #356]	; (8002e0c <DisplayTask+0x3bc>)
 8002ca6:	f104 030a 	add.w	r3, r4, #10
 8002caa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002cae:	ed93 8a00 	vldr	s16, [r3]
 8002cb2:	ee18 0a10 	vmov	r0, s16
 8002cb6:	f7fd fc4f 	bl	8000558 <__aeabi_f2d>
 8002cba:	2200      	movs	r2, #0
 8002cbc:	4b54      	ldr	r3, [pc, #336]	; (8002e10 <DisplayTask+0x3c0>)
 8002cbe:	f7fd fca3 	bl	8000608 <__aeabi_dmul>
 8002cc2:	f7fd feb3 	bl	8000a2c <__aeabi_d2uiz>
 8002cc6:	f8df b160 	ldr.w	fp, [pc, #352]	; 8002e28 <DisplayTask+0x3d8>
 8002cca:	fbab 2300 	umull	r2, r3, fp, r0
 8002cce:	08db      	lsrs	r3, r3, #3
 8002cd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002cd4:	005a      	lsls	r2, r3, #1
 8002cd6:	1a83      	subs	r3, r0, r2
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_VOLTAGE, i + 1, (uint32_t)RegulationTaskData.counter.voltages[i], rest);
 8002cd8:	1c66      	adds	r6, r4, #1
 8002cda:	4f4e      	ldr	r7, [pc, #312]	; (8002e14 <DisplayTask+0x3c4>)
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002ce2:	ee17 3a90 	vmov	r3, s15
 8002ce6:	4632      	mov	r2, r6
 8002ce8:	2118      	movs	r1, #24
 8002cea:	4638      	mov	r0, r7
 8002cec:	f7ff fc80 	bl	80025f0 <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.currents[i] * 100.0) % 100;
 8002cf0:	f104 030c 	add.w	r3, r4, #12
 8002cf4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002cf8:	ed93 8a01 	vldr	s16, [r3, #4]
 8002cfc:	ee18 0a10 	vmov	r0, s16
 8002d00:	f7fd fc2a 	bl	8000558 <__aeabi_f2d>
 8002d04:	2200      	movs	r2, #0
 8002d06:	4b44      	ldr	r3, [pc, #272]	; (8002e18 <DisplayTask+0x3c8>)
 8002d08:	f7fd fc7e 	bl	8000608 <__aeabi_dmul>
 8002d0c:	f7fd fe8e 	bl	8000a2c <__aeabi_d2uiz>
 8002d10:	4b42      	ldr	r3, [pc, #264]	; (8002e1c <DisplayTask+0x3cc>)
 8002d12:	fba3 2300 	umull	r2, r3, r3, r0
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	2264      	movs	r2, #100	; 0x64
 8002d1a:	fb02 0313 	mls	r3, r2, r3, r0
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_CURRENT, i + 1, (uint32_t)RegulationTaskData.counter.currents[i], rest);
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002d24:	ee17 3a90 	vmov	r3, s15
 8002d28:	4632      	mov	r2, r6
 8002d2a:	2119      	movs	r1, #25
 8002d2c:	4638      	mov	r0, r7
 8002d2e:	f7ff fc5f 	bl	80025f0 <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.powers[i] * 10.0) % 10;
 8002d32:	f104 0810 	add.w	r8, r4, #16
 8002d36:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 8002d3a:	ed98 8a00 	vldr	s16, [r8]
 8002d3e:	ee18 0a10 	vmov	r0, s16
 8002d42:	f7fd fc09 	bl	8000558 <__aeabi_f2d>
 8002d46:	2200      	movs	r2, #0
 8002d48:	4b31      	ldr	r3, [pc, #196]	; (8002e10 <DisplayTask+0x3c0>)
 8002d4a:	f7fd fc5d 	bl	8000608 <__aeabi_dmul>
 8002d4e:	f7fd fe6d 	bl	8000a2c <__aeabi_d2uiz>
 8002d52:	fbab 3200 	umull	r3, r2, fp, r0
 8002d56:	08d2      	lsrs	r2, r2, #3
 8002d58:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d5c:	0053      	lsls	r3, r2, #1
 8002d5e:	1ac2      	subs	r2, r0, r3
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_POWER, i + 1, (uint32_t)RegulationTaskData.counter.powers[i], rest);
 8002d60:	9200      	str	r2, [sp, #0]
 8002d62:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002d66:	ee17 3a90 	vmov	r3, s15
 8002d6a:	4632      	mov	r2, r6
 8002d6c:	211a      	movs	r1, #26
 8002d6e:	4638      	mov	r0, r7
 8002d70:	f7ff fc3e 	bl	80025f0 <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.powers[i] / RegulationTaskData.parameters.net_max_power * 100.0);
 8002d74:	edd8 7a00 	vldr	s15, [r8]
 8002d78:	f8d5 0075 	ldr.w	r0, [r5, #117]	; 0x75
 8002d7c:	ee07 0a10 	vmov	s14, r0
 8002d80:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002d84:	ee17 0a90 	vmov	r0, s15
 8002d88:	f7fd fbe6 	bl	8000558 <__aeabi_f2d>
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	4b22      	ldr	r3, [pc, #136]	; (8002e18 <DisplayTask+0x3c8>)
 8002d90:	f7fd fc3a 	bl	8000608 <__aeabi_dmul>
 8002d94:	f7fd fe4a 	bl	8000a2c <__aeabi_d2uiz>
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_PRG_BAR, i + 1, rest, 0);
 8002d98:	f04f 0800 	mov.w	r8, #0
 8002d9c:	f8cd 8000 	str.w	r8, [sp]
 8002da0:	4603      	mov	r3, r0
 8002da2:	4632      	mov	r2, r6
 8002da4:	211b      	movs	r1, #27
 8002da6:	4638      	mov	r0, r7
 8002da8:	f7ff fc22 	bl	80025f0 <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_CO_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CO_heater_PWM[i], 0);
 8002dac:	1d23      	adds	r3, r4, #4
 8002dae:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002db2:	885b      	ldrh	r3, [r3, #2]
 8002db4:	f8cd 8000 	str.w	r8, [sp]
 8002db8:	4632      	mov	r2, r6
 8002dba:	211c      	movs	r1, #28
 8002dbc:	4638      	mov	r0, r7
 8002dbe:	f7ff fc17 	bl	80025f0 <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_CWU_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CWU_heater_PWM[i], 0);
 8002dc2:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8002dc6:	88a3      	ldrh	r3, [r4, #4]
 8002dc8:	f8cd 8000 	str.w	r8, [sp]
 8002dcc:	4632      	mov	r2, r6
 8002dce:	211d      	movs	r1, #29
 8002dd0:	4638      	mov	r0, r7
 8002dd2:	f7ff fc0d 	bl	80025f0 <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 8002dd6:	b2f4      	uxtb	r4, r6
 8002dd8:	2c02      	cmp	r4, #2
 8002dda:	f67f af63 	bls.w	8002ca4 <DisplayTask+0x254>
 8002dde:	e6c7      	b.n	8002b70 <DisplayTask+0x120>
			if(ulNotificationValue == 1){
 8002de0:	2801      	cmp	r0, #1
 8002de2:	d006      	beq.n	8002df2 <DisplayTask+0x3a2>
			}else if(ulNotificationValue == 2){
 8002de4:	2802      	cmp	r0, #2
 8002de6:	d00a      	beq.n	8002dfe <DisplayTask+0x3ae>
			Config_ChangeValue(param, (void*)valPtr);
 8002de8:	4649      	mov	r1, r9
 8002dea:	4650      	mov	r0, sl
 8002dec:	f7fe f958 	bl	80010a0 <Config_ChangeValue>
 8002df0:	e6ca      	b.n	8002b88 <DisplayTask+0x138>
				param = nextion_big.param;
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <DisplayTask+0x3d0>)
 8002df4:	f8d3 a004 	ldr.w	sl, [r3, #4]
				valPtr = &nextion_big.value[0];
 8002df8:	f103 0908 	add.w	r9, r3, #8
 8002dfc:	e7f4      	b.n	8002de8 <DisplayTask+0x398>
				param = nextion_small.param;
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <DisplayTask+0x3d4>)
 8002e00:	f8d3 a004 	ldr.w	sl, [r3, #4]
				valPtr = &nextion_small.value[0];
 8002e04:	f103 0908 	add.w	r9, r3, #8
 8002e08:	e7ee      	b.n	8002de8 <DisplayTask+0x398>
 8002e0a:	bf00      	nop
 8002e0c:	20002cbc 	.word	0x20002cbc
 8002e10:	40240000 	.word	0x40240000
 8002e14:	200031e8 	.word	0x200031e8
 8002e18:	40590000 	.word	0x40590000
 8002e1c:	51eb851f 	.word	0x51eb851f
 8002e20:	20002b08 	.word	0x20002b08
 8002e24:	20002c9c 	.word	0x20002c9c
 8002e28:	cccccccd 	.word	0xcccccccd

08002e2c <W5500_WriteBuff>:

static void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
}

static void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8002e2c:	b508      	push	{r3, lr}
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e32:	460a      	mov	r2, r1
 8002e34:	4601      	mov	r1, r0
 8002e36:	4802      	ldr	r0, [pc, #8]	; (8002e40 <W5500_WriteBuff+0x14>)
 8002e38:	f004 fb1c 	bl	8007474 <HAL_SPI_Transmit>
}
 8002e3c:	bd08      	pop	{r3, pc}
 8002e3e:	bf00      	nop
 8002e40:	20003228 	.word	0x20003228

08002e44 <W5500_WriteByte>:
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
    return byte;
}

static void W5500_WriteByte(uint8_t byte) {
 8002e44:	b500      	push	{lr}
 8002e46:	b083      	sub	sp, #12
 8002e48:	ab02      	add	r3, sp, #8
 8002e4a:	f803 0d01 	strb.w	r0, [r3, #-1]!
    W5500_WriteBuff(&byte, sizeof(byte));
 8002e4e:	2101      	movs	r1, #1
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ffeb 	bl	8002e2c <W5500_WriteBuff>
}
 8002e56:	b003      	add	sp, #12
 8002e58:	f85d fb04 	ldr.w	pc, [sp], #4

08002e5c <W5500_ReadBuff>:
static void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8002e5c:	b508      	push	{r3, lr}
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e62:	460a      	mov	r2, r1
 8002e64:	4601      	mov	r1, r0
 8002e66:	4802      	ldr	r0, [pc, #8]	; (8002e70 <W5500_ReadBuff+0x14>)
 8002e68:	f004 fce8 	bl	800783c <HAL_SPI_Receive>
}
 8002e6c:	bd08      	pop	{r3, pc}
 8002e6e:	bf00      	nop
 8002e70:	20003228 	.word	0x20003228

08002e74 <W5500_ReadByte>:
static uint8_t W5500_ReadByte(void) {
 8002e74:	b500      	push	{lr}
 8002e76:	b083      	sub	sp, #12
    W5500_ReadBuff(&byte, sizeof(byte));
 8002e78:	2101      	movs	r1, #1
 8002e7a:	f10d 0007 	add.w	r0, sp, #7
 8002e7e:	f7ff ffed 	bl	8002e5c <W5500_ReadBuff>
}
 8002e82:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002e86:	b003      	add	sp, #12
 8002e88:	f85d fb04 	ldr.w	pc, [sp], #4

08002e8c <cs_desel>:
static void cs_desel() {
 8002e8c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET); //CS HIGH
 8002e8e:	2201      	movs	r2, #1
 8002e90:	2110      	movs	r1, #16
 8002e92:	4805      	ldr	r0, [pc, #20]	; (8002ea8 <cs_desel+0x1c>)
 8002e94:	f002 fec7 	bl	8005c26 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4803      	ldr	r0, [pc, #12]	; (8002eac <cs_desel+0x20>)
 8002ea0:	6800      	ldr	r0, [r0, #0]
 8002ea2:	f005 ff07 	bl	8008cb4 <xQueueGenericSend>
}
 8002ea6:	bd08      	pop	{r3, pc}
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	20003304 	.word	0x20003304

08002eb0 <cs_sel>:
static void cs_sel() {
 8002eb0:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 8002eb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <cs_sel+0x1c>)
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	f006 f8f1 	bl	80090a0 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET); //CS LOW
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2110      	movs	r1, #16
 8002ec2:	4803      	ldr	r0, [pc, #12]	; (8002ed0 <cs_sel+0x20>)
 8002ec4:	f002 feaf 	bl	8005c26 <HAL_GPIO_WritePin>
}
 8002ec8:	bd08      	pop	{r3, pc}
 8002eca:	bf00      	nop
 8002ecc:	20003304 	.word	0x20003304
 8002ed0:	40020000 	.word	0x40020000

08002ed4 <EthernetTask>:

uint16_t freesize;
uint8_t rcvBuf[128], txBuf[128], bufSize[] = {2, 2, 2, 2, 2};

void EthernetTask(void const * argument)
{
 8002ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed8:	b08c      	sub	sp, #48	; 0x30
	uint8_t first_frame = 1;
	uint8_t remoteIP[4][4];
	uint16_t remotePort[4];
	int32_t rcvSize = 0;

	CLI_Init();
 8002eda:	f7fe f8ab 	bl	8001034 <CLI_Init>

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8002ede:	49a9      	ldr	r1, [pc, #676]	; (8003184 <EthernetTask+0x2b0>)
 8002ee0:	48a9      	ldr	r0, [pc, #676]	; (8003188 <EthernetTask+0x2b4>)
 8002ee2:	f7fe ffa7 	bl	8001e34 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8002ee6:	49a9      	ldr	r1, [pc, #676]	; (800318c <EthernetTask+0x2b8>)
 8002ee8:	48a9      	ldr	r0, [pc, #676]	; (8003190 <EthernetTask+0x2bc>)
 8002eea:	f7fe ffb5 	bl	8001e58 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8002eee:	49a9      	ldr	r1, [pc, #676]	; (8003194 <EthernetTask+0x2c0>)
 8002ef0:	48a9      	ldr	r0, [pc, #676]	; (8003198 <EthernetTask+0x2c4>)
 8002ef2:	f7fe ffc9 	bl	8001e88 <reg_wizchip_spiburst_cbfunc>
	wizchip_init(bufSize, bufSize);
 8002ef6:	48a9      	ldr	r0, [pc, #676]	; (800319c <EthernetTask+0x2c8>)
 8002ef8:	4601      	mov	r1, r0
 8002efa:	f7ff f819 	bl	8001f30 <wizchip_init>
	wiz_NetInfo netInfo = {	.mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8002efe:	2300      	movs	r3, #0
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	9302      	str	r3, [sp, #8]
 8002f04:	9303      	str	r3, [sp, #12]
 8002f06:	9304      	str	r3, [sp, #16]
 8002f08:	f8cd 3013 	str.w	r3, [sp, #19]
 8002f0c:	2308      	movs	r3, #8
 8002f0e:	f88d 3001 	strb.w	r3, [sp, #1]
 8002f12:	23dc      	movs	r3, #220	; 0xdc
 8002f14:	f88d 3002 	strb.w	r3, [sp, #2]
 8002f18:	23ab      	movs	r3, #171	; 0xab
 8002f1a:	f88d 3003 	strb.w	r3, [sp, #3]
 8002f1e:	23cd      	movs	r3, #205	; 0xcd
 8002f20:	f88d 3004 	strb.w	r3, [sp, #4]
 8002f24:	23ef      	movs	r3, #239	; 0xef
 8002f26:	f88d 3005 	strb.w	r3, [sp, #5]
 8002f2a:	23c0      	movs	r3, #192	; 0xc0
 8002f2c:	f88d 3006 	strb.w	r3, [sp, #6]
 8002f30:	21a8      	movs	r1, #168	; 0xa8
 8002f32:	f88d 1007 	strb.w	r1, [sp, #7]
 8002f36:	f88d 3009 	strb.w	r3, [sp, #9]
 8002f3a:	22ff      	movs	r2, #255	; 0xff
 8002f3c:	f88d 200a 	strb.w	r2, [sp, #10]
 8002f40:	f88d 200b 	strb.w	r2, [sp, #11]
 8002f44:	f88d 200c 	strb.w	r2, [sp, #12]
 8002f48:	f88d 300e 	strb.w	r3, [sp, #14]
 8002f4c:	f88d 100f 	strb.w	r1, [sp, #15]
 8002f50:	2401      	movs	r4, #1
 8002f52:	f88d 4011 	strb.w	r4, [sp, #17]
		                  	 .ip 	= {192, 168, 0, 192},					// IP address
		                     .sn 	= {255, 255, 255, 0},					// Subnet mask
		                     .gw 	= {192, 168, 0, 1}};					// Gateway address
	wizchip_setnetinfo(&netInfo);
 8002f56:	4668      	mov	r0, sp
 8002f58:	f7ff f84e 	bl	8001ff8 <wizchip_setnetinfo>
	wizchip_setinterruptmask(IK_SOCK_3);
 8002f5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002f60:	f7ff f83c 	bl	8001fdc <wizchip_setinterruptmask>
	wizchip_getnetinfo(&netInfo);
 8002f64:	4668      	mov	r0, sp
 8002f66:	f7ff f875 	bl	8002054 <wizchip_getnetinfo>
	//if(socket(2, Sn_MR_TCP, 1883, 0) == 0){

	//}

	// Telnet Port (CLI, debug)
	if(socket(3, Sn_MR_TCP, 23, SF_TCP_NODELAY) == 3){
 8002f6a:	2320      	movs	r3, #32
 8002f6c:	2217      	movs	r2, #23
 8002f6e:	4621      	mov	r1, r4
 8002f70:	2003      	movs	r0, #3
 8002f72:	f7fe fc5d 	bl	8001830 <socket>
 8002f76:	2803      	cmp	r0, #3
 8002f78:	d108      	bne.n	8002f8c <EthernetTask+0xb8>
		if(listen(3) == SOCK_OK) {
 8002f7a:	f7fe fd05 	bl	8001988 <listen>
 8002f7e:	42a0      	cmp	r0, r4
 8002f80:	d104      	bne.n	8002f8c <EthernetTask+0xb8>
			setSn_IMR(3, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 8002f82:	211f      	movs	r1, #31
 8002f84:	f642 4068 	movw	r0, #11368	; 0x2c68
 8002f88:	f7fe faa8 	bl	80014dc <WIZCHIP_WRITE>
{
 8002f8c:	2701      	movs	r7, #1
	}

  /* Infinite loop */
	for(;;)
	{
		if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f92:	2200      	movs	r2, #0
 8002f94:	4619      	mov	r1, r3
 8002f96:	4618      	mov	r0, r3
 8002f98:	f007 f806 	bl	8009fa8 <xTaskNotifyWait>
 8002f9c:	2801      	cmp	r0, #1
 8002f9e:	d1f6      	bne.n	8002f8e <EthernetTask+0xba>
 8002fa0:	e0c3      	b.n	800312a <EthernetTask+0x256>
				if(interruptSource & IK_IP_CONFLICT){

				}

				if(interruptSource & IK_SOCK_0){
					interrupt = getSn_IR(0);
 8002fa2:	f44f 7002 	mov.w	r0, #520	; 0x208
 8002fa6:	f7fe fa67 	bl	8001478 <WIZCHIP_READ>
					if(interrupt & Sn_IR_CON){
 8002faa:	f010 0f01 	tst.w	r0, #1
 8002fae:	f000 80ca 	beq.w	8003146 <EthernetTask+0x272>
						getsockopt(0, SO_DESTIP, &remoteIP[0]);
 8002fb2:	aa08      	add	r2, sp, #32
 8002fb4:	2104      	movs	r1, #4
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f7fe fe78 	bl	8001cac <getsockopt>
						getsockopt(0, SO_DESTPORT, (uint8_t*)&remotePort[0]);
 8002fbc:	aa06      	add	r2, sp, #24
 8002fbe:	2105      	movs	r1, #5
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f7fe fe73 	bl	8001cac <getsockopt>
 8002fc6:	e0be      	b.n	8003146 <EthernetTask+0x272>
					}
				}

				if(interruptSource & IK_SOCK_1){
					interrupt = getSn_IR(1);
 8002fc8:	f44f 700a 	mov.w	r0, #552	; 0x228
 8002fcc:	f7fe fa54 	bl	8001478 <WIZCHIP_READ>
					if(interrupt & Sn_IR_CON){
 8002fd0:	f010 0f01 	tst.w	r0, #1
 8002fd4:	f000 80bb 	beq.w	800314e <EthernetTask+0x27a>
						getsockopt(1, SO_DESTIP, &remoteIP[1]);
 8002fd8:	aa09      	add	r2, sp, #36	; 0x24
 8002fda:	2104      	movs	r1, #4
 8002fdc:	2001      	movs	r0, #1
 8002fde:	f7fe fe65 	bl	8001cac <getsockopt>
						getsockopt(1, SO_DESTPORT, (uint8_t*)&remotePort[1]);
 8002fe2:	f10d 021a 	add.w	r2, sp, #26
 8002fe6:	2105      	movs	r1, #5
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f7fe fe5f 	bl	8001cac <getsockopt>
 8002fee:	e0ae      	b.n	800314e <EthernetTask+0x27a>

					}
				}

				if(interruptSource & IK_SOCK_2){
					interrupt = getSn_IR(2);
 8002ff0:	f44f 7012 	mov.w	r0, #584	; 0x248
 8002ff4:	f7fe fa40 	bl	8001478 <WIZCHIP_READ>
 8002ff8:	e0ad      	b.n	8003156 <EthernetTask+0x282>
				}

				if(interruptSource & IK_SOCK_3){
					freesize = getSn_TxMAX(3);
 8002ffa:	f641 7068 	movw	r0, #8040	; 0x1f68
 8002ffe:	f7fe fa3b 	bl	8001478 <WIZCHIP_READ>
 8003002:	b280      	uxth	r0, r0
 8003004:	0280      	lsls	r0, r0, #10
 8003006:	4b66      	ldr	r3, [pc, #408]	; (80031a0 <EthernetTask+0x2cc>)
 8003008:	8018      	strh	r0, [r3, #0]
					interrupt = getSn_IR(3);
 800300a:	f44f 701a 	mov.w	r0, #616	; 0x268
 800300e:	f7fe fa33 	bl	8001478 <WIZCHIP_READ>
 8003012:	4605      	mov	r5, r0
					setSn_IR(3, interrupt);
 8003014:	f000 011f 	and.w	r1, r0, #31
 8003018:	f44f 701a 	mov.w	r0, #616	; 0x268
 800301c:	f7fe fa5e 	bl	80014dc <WIZCHIP_WRITE>
					if(interrupt & Sn_IR_CON){
 8003020:	f015 0f01 	tst.w	r5, #1
 8003024:	d128      	bne.n	8003078 <EthernetTask+0x1a4>
						RuntimeStats_TelnetTxInc();
						freesize = send(3, (uint8_t*)gretMsg, 47);
						first_frame = 1;
					}

					if(interrupt & Sn_IR_RECV){
 8003026:	f015 0f04 	tst.w	r5, #4
 800302a:	d007      	beq.n	800303c <EthernetTask+0x168>
						if(first_frame == 0){
 800302c:	2f00      	cmp	r7, #0
 800302e:	d03c      	beq.n	80030aa <EthernetTask+0x1d6>
								freesize = send(3, txBuf, strlen((char*)txBuf));
								vTaskDelay(1);
							}while(xMoreDataToFollow != pdFALSE);
							rcvSize = 0;
						}else{
							recv(3, rcvBuf, 128);
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	495c      	ldr	r1, [pc, #368]	; (80031a4 <EthernetTask+0x2d0>)
 8003034:	2003      	movs	r0, #3
 8003036:	f7fe fdc7 	bl	8001bc8 <recv>
							first_frame = 0;
 800303a:	2700      	movs	r7, #0
						}
					}

					if(interrupt & Sn_IR_SENDOK){
 800303c:	f015 0f10 	tst.w	r5, #16
 8003040:	d162      	bne.n	8003108 <EthernetTask+0x234>
						ClrSiS(3);
					}

					if(interrupt & Sn_IR_DISCON || interrupt & Sn_IR_TIMEOUT){
 8003042:	f015 0f0a 	tst.w	r5, #10
 8003046:	f000 808a 	beq.w	800315e <EthernetTask+0x28a>
						RuntimeStats_TelnetLastIPSet();
 800304a:	f7ff fa9b 	bl	8002584 <RuntimeStats_TelnetLastIPSet>
						disconnect(3);
 800304e:	2003      	movs	r0, #3
 8003050:	f7fe fcd0 	bl	80019f4 <disconnect>
						if(socket(3, Sn_MR_TCP, 23, SF_TCP_NODELAY) == 3){
 8003054:	2320      	movs	r3, #32
 8003056:	2217      	movs	r2, #23
 8003058:	2101      	movs	r1, #1
 800305a:	2003      	movs	r0, #3
 800305c:	f7fe fbe8 	bl	8001830 <socket>
 8003060:	2803      	cmp	r0, #3
 8003062:	d17c      	bne.n	800315e <EthernetTask+0x28a>
							if(listen(3) == SOCK_OK) {
 8003064:	f7fe fc90 	bl	8001988 <listen>
 8003068:	2801      	cmp	r0, #1
 800306a:	d178      	bne.n	800315e <EthernetTask+0x28a>
								setSn_IMR(3, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 800306c:	211f      	movs	r1, #31
 800306e:	f642 4068 	movw	r0, #11368	; 0x2c68
 8003072:	f7fe fa33 	bl	80014dc <WIZCHIP_WRITE>
 8003076:	e072      	b.n	800315e <EthernetTask+0x28a>
						getsockopt(3, SO_DESTIP, &remoteIP[3]);
 8003078:	aa0b      	add	r2, sp, #44	; 0x2c
 800307a:	2104      	movs	r1, #4
 800307c:	2003      	movs	r0, #3
 800307e:	f7fe fe15 	bl	8001cac <getsockopt>
						getsockopt(3, SO_DESTPORT, (uint8_t*)&remotePort[3]);
 8003082:	f10d 021e 	add.w	r2, sp, #30
 8003086:	2105      	movs	r1, #5
 8003088:	2003      	movs	r0, #3
 800308a:	f7fe fe0f 	bl	8001cac <getsockopt>
						RuntimeStats_TelnetCurrIPSet(&remoteIP[3][0]);
 800308e:	a80b      	add	r0, sp, #44	; 0x2c
 8003090:	f7ff fa72 	bl	8002578 <RuntimeStats_TelnetCurrIPSet>
						RuntimeStats_TelnetTxInc();
 8003094:	f7ff fa68 	bl	8002568 <RuntimeStats_TelnetTxInc>
						freesize = send(3, (uint8_t*)gretMsg, 47);
 8003098:	222f      	movs	r2, #47	; 0x2f
 800309a:	4943      	ldr	r1, [pc, #268]	; (80031a8 <EthernetTask+0x2d4>)
 800309c:	2003      	movs	r0, #3
 800309e:	f7fe fcf1 	bl	8001a84 <send>
 80030a2:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <EthernetTask+0x2cc>)
 80030a4:	8018      	strh	r0, [r3, #0]
						first_frame = 1;
 80030a6:	2701      	movs	r7, #1
 80030a8:	e7bd      	b.n	8003026 <EthernetTask+0x152>
							RuntimeStats_TelnetRxInc();
 80030aa:	f7ff fa55 	bl	8002558 <RuntimeStats_TelnetRxInc>
							rcvSize += recv(3, &rcvBuf[rcvSize], 128);
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	493c      	ldr	r1, [pc, #240]	; (80031a4 <EthernetTask+0x2d0>)
 80030b2:	2003      	movs	r0, #3
 80030b4:	f7fe fd88 	bl	8001bc8 <recv>
							while(((rcvBuf[rcvSize - 1] == '\r') || (rcvBuf[rcvSize - 1] == '\n')) && (rcvSize > 0)){
 80030b8:	e005      	b.n	80030c6 <EthernetTask+0x1f2>
 80030ba:	2800      	cmp	r0, #0
 80030bc:	dd0a      	ble.n	80030d4 <EthernetTask+0x200>
								rcvBuf[rcvSize - 1] = 0;
 80030be:	4a39      	ldr	r2, [pc, #228]	; (80031a4 <EthernetTask+0x2d0>)
 80030c0:	2100      	movs	r1, #0
 80030c2:	54d1      	strb	r1, [r2, r3]
								rcvSize--;
 80030c4:	4618      	mov	r0, r3
							while(((rcvBuf[rcvSize - 1] == '\r') || (rcvBuf[rcvSize - 1] == '\n')) && (rcvSize > 0)){
 80030c6:	1e43      	subs	r3, r0, #1
 80030c8:	4a36      	ldr	r2, [pc, #216]	; (80031a4 <EthernetTask+0x2d0>)
 80030ca:	5cd2      	ldrb	r2, [r2, r3]
 80030cc:	2a0d      	cmp	r2, #13
 80030ce:	d0f4      	beq.n	80030ba <EthernetTask+0x1e6>
 80030d0:	2a0a      	cmp	r2, #10
 80030d2:	d0f2      	beq.n	80030ba <EthernetTask+0x1e6>
								xMoreDataToFollow = FreeRTOS_CLIProcessCommand(&rcvBuf, &txBuf, 128);
 80030d4:	4e35      	ldr	r6, [pc, #212]	; (80031ac <EthernetTask+0x2d8>)
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	4631      	mov	r1, r6
 80030da:	4832      	ldr	r0, [pc, #200]	; (80031a4 <EthernetTask+0x2d0>)
 80030dc:	f007 fe74 	bl	800adc8 <FreeRTOS_CLIProcessCommand>
 80030e0:	4680      	mov	r8, r0
								RuntimeStats_TelnetTxInc();
 80030e2:	f7ff fa41 	bl	8002568 <RuntimeStats_TelnetTxInc>
								freesize = send(3, txBuf, strlen((char*)txBuf));
 80030e6:	4630      	mov	r0, r6
 80030e8:	f7fd f87a 	bl	80001e0 <strlen>
 80030ec:	b282      	uxth	r2, r0
 80030ee:	4631      	mov	r1, r6
 80030f0:	2003      	movs	r0, #3
 80030f2:	f7fe fcc7 	bl	8001a84 <send>
 80030f6:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <EthernetTask+0x2cc>)
 80030f8:	8018      	strh	r0, [r3, #0]
								vTaskDelay(1);
 80030fa:	2001      	movs	r0, #1
 80030fc:	f006 fc90 	bl	8009a20 <vTaskDelay>
							}while(xMoreDataToFollow != pdFALSE);
 8003100:	f1b8 0f00 	cmp.w	r8, #0
 8003104:	d1e6      	bne.n	80030d4 <EthernetTask+0x200>
 8003106:	e799      	b.n	800303c <EthernetTask+0x168>
						ClrSiS(3);
 8003108:	2003      	movs	r0, #3
 800310a:	f7fe fd51 	bl	8001bb0 <ClrSiS>
 800310e:	e798      	b.n	8003042 <EthernetTask+0x16e>
					}

				}

				if(interruptSource & IK_SOCK_4){
					interrupt = getSn_IR(4);
 8003110:	f44f 7022 	mov.w	r0, #648	; 0x288
 8003114:	f7fe f9b0 	bl	8001478 <WIZCHIP_READ>
 8003118:	e024      	b.n	8003164 <EthernetTask+0x290>
				}

				if(interruptSource & IK_SOCK_5){
					interrupt = getSn_IR(5);
 800311a:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 800311e:	f7fe f9ab 	bl	8001478 <WIZCHIP_READ>
 8003122:	e022      	b.n	800316a <EthernetTask+0x296>

				if(interruptSource & IK_SOCK_6){
					interrupt = getSn_IR(6);
				}

				if(interruptSource & IK_SOCK_7){
 8003124:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8003128:	d127      	bne.n	800317a <EthernetTask+0x2a6>
			while(HAL_GPIO_ReadPin(ETH_INT_GPIO_Port, ETH_INT_Pin) == 0){
 800312a:	2102      	movs	r1, #2
 800312c:	4820      	ldr	r0, [pc, #128]	; (80031b0 <EthernetTask+0x2dc>)
 800312e:	f002 fd73 	bl	8005c18 <HAL_GPIO_ReadPin>
 8003132:	2800      	cmp	r0, #0
 8003134:	f47f af2b 	bne.w	8002f8e <EthernetTask+0xba>
				interruptSource = wizchip_getinterrupt();
 8003138:	f7fe ff3f 	bl	8001fba <wizchip_getinterrupt>
 800313c:	4604      	mov	r4, r0
				if(interruptSource & IK_SOCK_0){
 800313e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003142:	f47f af2e 	bne.w	8002fa2 <EthernetTask+0xce>
				if(interruptSource & IK_SOCK_1){
 8003146:	f414 7f00 	tst.w	r4, #512	; 0x200
 800314a:	f47f af3d 	bne.w	8002fc8 <EthernetTask+0xf4>
				if(interruptSource & IK_SOCK_2){
 800314e:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8003152:	f47f af4d 	bne.w	8002ff0 <EthernetTask+0x11c>
				if(interruptSource & IK_SOCK_3){
 8003156:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800315a:	f47f af4e 	bne.w	8002ffa <EthernetTask+0x126>
				if(interruptSource & IK_SOCK_4){
 800315e:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8003162:	d1d5      	bne.n	8003110 <EthernetTask+0x23c>
				if(interruptSource & IK_SOCK_5){
 8003164:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8003168:	d1d7      	bne.n	800311a <EthernetTask+0x246>
				if(interruptSource & IK_SOCK_6){
 800316a:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 800316e:	d0d9      	beq.n	8003124 <EthernetTask+0x250>
					interrupt = getSn_IR(6);
 8003170:	f44f 7032 	mov.w	r0, #712	; 0x2c8
 8003174:	f7fe f980 	bl	8001478 <WIZCHIP_READ>
 8003178:	e7d4      	b.n	8003124 <EthernetTask+0x250>
					interrupt = getSn_IR(7);
 800317a:	f44f 703a 	mov.w	r0, #744	; 0x2e8
 800317e:	f7fe f97b 	bl	8001478 <WIZCHIP_READ>
 8003182:	e7d2      	b.n	800312a <EthernetTask+0x256>
 8003184:	08002e8d 	.word	0x08002e8d
 8003188:	08002eb1 	.word	0x08002eb1
 800318c:	08002e45 	.word	0x08002e45
 8003190:	08002e75 	.word	0x08002e75
 8003194:	08002e2d 	.word	0x08002e2d
 8003198:	08002e5d 	.word	0x08002e5d
 800319c:	20000030 	.word	0x20000030
 80031a0:	20002d50 	.word	0x20002d50
 80031a4:	20002d54 	.word	0x20002d54
 80031a8:	0800c7d4 	.word	0x0800c7d4
 80031ac:	20002dd4 	.word	0x20002dd4
 80031b0:	40020400 	.word	0x40020400

080031b4 <NRF_ChipSelect>:

void NRF_ChipSelect (void);

void NRF_ChipDeselect (void);

void NRF_ChipSelect (void){
 80031b4:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 80031b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <NRF_ChipSelect+0x1c>)
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	f005 ff6f 	bl	80090a0 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 80031c2:	2200      	movs	r2, #0
 80031c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <NRF_ChipSelect+0x20>)
 80031ca:	f002 fd2c 	bl	8005c26 <HAL_GPIO_WritePin>
}
 80031ce:	bd08      	pop	{r3, pc}
 80031d0:	20003304 	.word	0x20003304
 80031d4:	40020400 	.word	0x40020400

080031d8 <NRF_ChipDeselect>:

void NRF_ChipDeselect (void){
 80031d8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_SET);
 80031da:	2201      	movs	r2, #1
 80031dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031e0:	4805      	ldr	r0, [pc, #20]	; (80031f8 <NRF_ChipDeselect+0x20>)
 80031e2:	f002 fd20 	bl	8005c26 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 80031e6:	2300      	movs	r3, #0
 80031e8:	461a      	mov	r2, r3
 80031ea:	4619      	mov	r1, r3
 80031ec:	4803      	ldr	r0, [pc, #12]	; (80031fc <NRF_ChipDeselect+0x24>)
 80031ee:	6800      	ldr	r0, [r0, #0]
 80031f0:	f005 fd60 	bl	8008cb4 <xQueueGenericSend>
}
 80031f4:	bd08      	pop	{r3, pc}
 80031f6:	bf00      	nop
 80031f8:	40020400 	.word	0x40020400
 80031fc:	20003304 	.word	0x20003304

08003200 <RadioTask>:

void RadioTask(void const * argument)
{
 8003200:	b508      	push	{r3, lr}
	const uint8_t ecoIOinitMSG[] = "IsAlive";
  /* USER CODE BEGIN RadioComm */
	nRF24_Init(&hspi1);
 8003202:	480e      	ldr	r0, [pc, #56]	; (800323c <RadioTask+0x3c>)
 8003204:	f001 ff04 	bl	8005010 <nRF24_Init>
	nRF24_SetRXAddress(0, "_ECOE");
 8003208:	490d      	ldr	r1, [pc, #52]	; (8003240 <RadioTask+0x40>)
 800320a:	2000      	movs	r0, #0
 800320c:	f001 fd4f 	bl	8004cae <nRF24_SetRXAddress>
	nRF24_SetRXAddress(1, "_ECOI");
 8003210:	490c      	ldr	r1, [pc, #48]	; (8003244 <RadioTask+0x44>)
 8003212:	2001      	movs	r0, #1
 8003214:	f001 fd4b 	bl	8004cae <nRF24_SetRXAddress>
	nRF24_SetTXAddress("_ECOM");
 8003218:	480b      	ldr	r0, [pc, #44]	; (8003248 <RadioTask+0x48>)
 800321a:	f001 fd8b 	bl	8004d34 <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 800321e:	f001 fd67 	bl	8004cf0 <nRF24_RX_Mode>
	//nRF24_SendData((uint8_t*)ecoIOinitMSG, sizeof(ecoIOinitMSG));

  /* Infinite loop */
  for(;;)
  {
	  if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 8003222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003226:	2200      	movs	r2, #0
 8003228:	4619      	mov	r1, r3
 800322a:	4618      	mov	r0, r3
 800322c:	f006 febc 	bl	8009fa8 <xTaskNotifyWait>
 8003230:	2801      	cmp	r0, #1
 8003232:	d1f6      	bne.n	8003222 <RadioTask+0x22>
		  nRF24_Event();
 8003234:	f001 febe 	bl	8004fb4 <nRF24_Event>
 8003238:	e7f3      	b.n	8003222 <RadioTask+0x22>
 800323a:	bf00      	nop
 800323c:	20003228 	.word	0x20003228
 8003240:	0800c804 	.word	0x0800c804
 8003244:	0800c80c 	.word	0x0800c80c
 8003248:	0800c814 	.word	0x0800c814

0800324c <fModbusParseFloat>:
#define CWU_HEATER_PHASE_POWER 		1

float fModbusParseFloat (uint8_t* in_data){
	union float_bytes buffor;

	buffor.bytes[3] = *in_data;
 800324c:	7802      	ldrb	r2, [r0, #0]
 800324e:	2300      	movs	r3, #0
 8003250:	f362 631f 	bfi	r3, r2, #24, #8
	in_data ++;
	buffor.bytes[2] = *in_data;
 8003254:	7842      	ldrb	r2, [r0, #1]
 8003256:	f362 4317 	bfi	r3, r2, #16, #8
	in_data ++;
	buffor.bytes[1] = *in_data;
 800325a:	7882      	ldrb	r2, [r0, #2]
 800325c:	f362 230f 	bfi	r3, r2, #8, #8
	in_data ++;
	buffor.bytes[0] = *in_data;
 8003260:	78c2      	ldrb	r2, [r0, #3]
 8003262:	f362 0307 	bfi	r3, r2, #0, #8

	return buffor.value;
 8003266:	ee00 3a10 	vmov	s0, r3
}
 800326a:	4770      	bx	lr

0800326c <RegulationTask>:

void RegulationTask(void const * argument)
{
 800326c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800326e:	ed2d 8b04 	vpush	{d8-d9}
 8003272:	b0a5      	sub	sp, #148	; 0x94
	uint8_t counter_data_raw[36];
	uint8_t imported_exported_power_raw[8];
	uint8_t receieves = 0;
	uint8_t temperatures_raw[SENSOR_NUMBER * 2];

	regulationData.configStatus = Config_GetRegConfig(&regulationData.parameters);
 8003274:	4cc9      	ldr	r4, [pc, #804]	; (800359c <RegulationTask+0x330>)
 8003276:	4620      	mov	r0, r4
 8003278:	f7fd ffc4 	bl	8001204 <Config_GetRegConfig>
 800327c:	f804 0c01 	strb.w	r0, [r4, #-1]

	HAL_TIM_PWM_Init(&htim1);
 8003280:	4ec7      	ldr	r6, [pc, #796]	; (80035a0 <RegulationTask+0x334>)
 8003282:	4630      	mov	r0, r6
 8003284:	f004 fd49 	bl	8007d1a <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 8003288:	4dc6      	ldr	r5, [pc, #792]	; (80035a4 <RegulationTask+0x338>)
 800328a:	4628      	mov	r0, r5
 800328c:	f004 fd45 	bl	8007d1a <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim3);
 8003290:	4cc5      	ldr	r4, [pc, #788]	; (80035a8 <RegulationTask+0x33c>)
 8003292:	4620      	mov	r0, r4
 8003294:	f004 fd41 	bl	8007d1a <HAL_TIM_PWM_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003298:	2100      	movs	r1, #0
 800329a:	4630      	mov	r0, r6
 800329c:	f004 fe08 	bl	8007eb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80032a0:	2104      	movs	r1, #4
 80032a2:	4630      	mov	r0, r6
 80032a4:	f004 fe04 	bl	8007eb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80032a8:	2108      	movs	r1, #8
 80032aa:	4630      	mov	r0, r6
 80032ac:	f004 fe00 	bl	8007eb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80032b0:	2100      	movs	r1, #0
 80032b2:	4628      	mov	r0, r5
 80032b4:	f004 fdfc 	bl	8007eb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80032b8:	2104      	movs	r1, #4
 80032ba:	4628      	mov	r0, r5
 80032bc:	f004 fdf8 	bl	8007eb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80032c0:	2108      	movs	r1, #8
 80032c2:	4628      	mov	r0, r5
 80032c4:	f004 fdf4 	bl	8007eb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80032c8:	2100      	movs	r1, #0
 80032ca:	4620      	mov	r0, r4
 80032cc:	f004 fdf0 	bl	8007eb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80032d0:	2104      	movs	r1, #4
 80032d2:	4620      	mov	r0, r4
 80032d4:	f004 fdec 	bl	8007eb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80032d8:	2108      	movs	r1, #8
 80032da:	4620      	mov	r0, r4
 80032dc:	f004 fde8 	bl	8007eb0 <HAL_TIM_PWM_Start>

	TIM1 -> CCR1 = 500;
 80032e0:	4ab2      	ldr	r2, [pc, #712]	; (80035ac <RegulationTask+0x340>)
 80032e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80032e6:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1 -> CCR2 = 500;
 80032e8:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1 -> CCR3 = 500;
 80032ea:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM2 -> CCR1 = 500;
 80032ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032f0:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2 -> CCR2 = 500;
 80032f2:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2 -> CCR3 = 500;
 80032f4:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM3 -> CCR1 = 500;
 80032f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032fa:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3 -> CCR2 = 500;
 80032fc:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3 -> CCR3 = 500;
 80032fe:	63d3      	str	r3, [r2, #60]	; 0x3c

	//Uchwyty i inne struktury
	mbPort.task =  xTaskGetCurrentTaskHandle();
 8003300:	f006 fcde 	bl	8009cc0 <xTaskGetCurrentTaskHandle>
 8003304:	9023      	str	r0, [sp, #140]	; 0x8c

	mcp23017_init(&expander1, &hi2c1, 0b0100111);
 8003306:	4caa      	ldr	r4, [pc, #680]	; (80035b0 <RegulationTask+0x344>)
 8003308:	2227      	movs	r2, #39	; 0x27
 800330a:	49aa      	ldr	r1, [pc, #680]	; (80035b4 <RegulationTask+0x348>)
 800330c:	4620      	mov	r0, r4
 800330e:	f7fe fecf 	bl	80020b0 <mcp23017_init>
	mcp23017_iodir(&expander1, 1, 0xFF);
 8003312:	22ff      	movs	r2, #255	; 0xff
 8003314:	2101      	movs	r1, #1
 8003316:	4620      	mov	r0, r4
 8003318:	f7fe feec 	bl	80020f4 <mcp23017_iodir>
	mcp23017_iodir(&expander1, 0, 0x03);
 800331c:	2203      	movs	r2, #3
 800331e:	2100      	movs	r1, #0
 8003320:	4620      	mov	r0, r4
 8003322:	f7fe fee7 	bl	80020f4 <mcp23017_iodir>
	expander1.gpio[0] = 0b11111100;
 8003326:	23fc      	movs	r3, #252	; 0xfc
 8003328:	71a3      	strb	r3, [r4, #6]
	mcp23017_write_gpio(&expander1, 0);
 800332a:	2100      	movs	r1, #0
 800332c:	4620      	mov	r0, r4
 800332e:	f7fe fefe 	bl	800212e <mcp23017_write_gpio>

	vTaskDelay(1000);
 8003332:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003336:	f006 fb73 	bl	8009a20 <vTaskDelay>

	expander1.gpio[0] = 0;
 800333a:	2100      	movs	r1, #0
 800333c:	71a1      	strb	r1, [r4, #6]
	mcp23017_write_gpio(&expander1, 0);
 800333e:	4620      	mov	r0, r4
 8003340:	f7fe fef5 	bl	800212e <mcp23017_write_gpio>
	vModbusInit(&mbPort, &huart2, 100);
 8003344:	2264      	movs	r2, #100	; 0x64
 8003346:	499c      	ldr	r1, [pc, #624]	; (80035b8 <RegulationTask+0x34c>)
 8003348:	a821      	add	r0, sp, #132	; 0x84
 800334a:	f7ff f805 	bl	8002358 <vModbusInit>
	float exported_power = 0;
 800334e:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 80035bc <RegulationTask+0x350>
	float imported_power = 0;
 8003352:	eef0 8a48 	vmov.f32	s17, s16
 8003356:	e07d      	b.n	8003454 <RegulationTask+0x1e8>
		receieves = 0;

		if(regulationData.IOsignals.signals.input2 != regulationData.IOsignals.signals.output1){
			regulationData.ControlWord.CWUHeaterError = HIGH;
		}else{
			regulationData.ControlWord.CWUHeaterError = LOW;
 8003358:	4b99      	ldr	r3, [pc, #612]	; (80035c0 <RegulationTask+0x354>)
 800335a:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800335e:	f36f 0200 	bfc	r2, #0, #1
 8003362:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003366:	e091      	b.n	800348c <RegulationTask+0x220>
		}

		if(regulationData.IOsignals.signals.input3 != regulationData.IOsignals.signals.output2){
			regulationData.ControlWord.COHeaterError = HIGH;
		}else{
			regulationData.ControlWord.COHeaterError = LOW;
 8003368:	4b95      	ldr	r3, [pc, #596]	; (80035c0 <RegulationTask+0x354>)
 800336a:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800336e:	f36f 0200 	bfc	r2, #0, #1
 8003372:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003376:	e09c      	b.n	80034b2 <RegulationTask+0x246>
		}

		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
			receieves += 1;
			for(uint8_t i = 0; i < 3; i++){
				regulationData.counter.voltages[i] = fModbusParseFloat(counter_data_raw + i * 4);
 8003378:	00a6      	lsls	r6, r4, #2
 800337a:	ab0a      	add	r3, sp, #40	; 0x28
 800337c:	1998      	adds	r0, r3, r6
 800337e:	f7ff ff65 	bl	800324c <fModbusParseFloat>
 8003382:	4d8f      	ldr	r5, [pc, #572]	; (80035c0 <RegulationTask+0x354>)
 8003384:	f104 030a 	add.w	r3, r4, #10
 8003388:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800338c:	ed83 0a00 	vstr	s0, [r3]
				regulationData.counter.currents[i] = fModbusParseFloat(counter_data_raw + 12 + i * 4);
 8003390:	f106 000c 	add.w	r0, r6, #12
 8003394:	ab0a      	add	r3, sp, #40	; 0x28
 8003396:	4418      	add	r0, r3
 8003398:	f7ff ff58 	bl	800324c <fModbusParseFloat>
 800339c:	f104 030c 	add.w	r3, r4, #12
 80033a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80033a4:	ed83 0a01 	vstr	s0, [r3, #4]
				regulationData.counter.powers[i] = fModbusParseFloat(counter_data_raw + 24 + 4 * i);
 80033a8:	f106 0018 	add.w	r0, r6, #24
 80033ac:	ab0a      	add	r3, sp, #40	; 0x28
 80033ae:	4418      	add	r0, r3
 80033b0:	f7ff ff4c 	bl	800324c <fModbusParseFloat>
 80033b4:	f104 0310 	add.w	r3, r4, #16
 80033b8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80033bc:	ed85 0a00 	vstr	s0, [r5]
			for(uint8_t i = 0; i < 3; i++){
 80033c0:	3401      	adds	r4, #1
 80033c2:	b2e4      	uxtb	r4, r4
 80033c4:	2c02      	cmp	r4, #2
 80033c6:	d9d7      	bls.n	8003378 <RegulationTask+0x10c>
			receieves += 1;
 80033c8:	2501      	movs	r5, #1
 80033ca:	e07d      	b.n	80034c8 <RegulationTask+0x25c>
			for(uint8_t i = 0; i < 3; i++){
 80033cc:	2400      	movs	r4, #0
 80033ce:	e7f9      	b.n	80033c4 <RegulationTask+0x158>
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);

			if(regulationData.counter.power_in_buffor > 0){
				regulationData.counter.power_in_buffor -= (imported_power - last_imported_power);
			}else{
				regulationData.counter.power_in_buffor = 0;
 80033d0:	4b7b      	ldr	r3, [pc, #492]	; (80035c0 <RegulationTask+0x354>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	64da      	str	r2, [r3, #76]	; 0x4c
			}
			regulationData.counter.power_in_buffor += (exported_power - last_exported_power) * ACUMULATED_POWER_FACTOR;
 80033d6:	ee30 8a48 	vsub.f32	s16, s0, s16
 80033da:	eddf 7a78 	vldr	s15, [pc, #480]	; 80035bc <RegulationTask+0x350>
 80033de:	ee68 7a27 	vmul.f32	s15, s16, s15
 80033e2:	4b77      	ldr	r3, [pc, #476]	; (80035c0 <RegulationTask+0x354>)
 80033e4:	ed93 8a13 	vldr	s16, [r3, #76]	; 0x4c
 80033e8:	ee38 8a27 	vadd.f32	s16, s16, s15
 80033ec:	ed83 8a13 	vstr	s16, [r3, #76]	; 0x4c
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 80033f0:	eeb0 8a40 	vmov.f32	s16, s0
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 80033f4:	eef0 8a49 	vmov.f32	s17, s18
		}

		if(vModbusReadInputRegisters(&mbPort, TEMPERATURE_ADDRESS, 0, SENSOR_NUMBER, temperatures_raw) == Modbus_OK){
 80033f8:	ab03      	add	r3, sp, #12
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	230a      	movs	r3, #10
 80033fe:	2200      	movs	r2, #0
 8003400:	2102      	movs	r1, #2
 8003402:	a821      	add	r0, sp, #132	; 0x84
 8003404:	f7fe ffde 	bl	80023c4 <vModbusReadInputRegisters>
 8003408:	2800      	cmp	r0, #0
 800340a:	f000 8081 	beq.w	8003510 <RegulationTask+0x2a4>
				temperatures[i] = temp / DEC_PLACES;
			}
			memcpy(&regulationData.counter.CWU_temps[0], &temperatures[0], 24);
		}

		regulationData.counter.counter_present = 1;
 800340e:	4b6c      	ldr	r3, [pc, #432]	; (80035c0 <RegulationTask+0x354>)
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
		regulationData.counter.temperatures_present = 1;
 8003414:	709a      	strb	r2, [r3, #2]
		if(receieves == 7){
 8003416:	2d07      	cmp	r5, #7
 8003418:	f000 8196 	beq.w	8003748 <RegulationTask+0x4dc>

		}else{

		}

		TIM3 -> CCR1 = regulationData.counter.CWU_heater_PWM[0];
 800341c:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <RegulationTask+0x354>)
 800341e:	8899      	ldrh	r1, [r3, #4]
 8003420:	4a68      	ldr	r2, [pc, #416]	; (80035c4 <RegulationTask+0x358>)
 8003422:	6351      	str	r1, [r2, #52]	; 0x34
		TIM3 -> CCR2 = regulationData.counter.CWU_heater_PWM[1];
 8003424:	88d9      	ldrh	r1, [r3, #6]
 8003426:	6391      	str	r1, [r2, #56]	; 0x38
		TIM3 -> CCR3 = regulationData.counter.CWU_heater_PWM[2];
 8003428:	8919      	ldrh	r1, [r3, #8]
 800342a:	63d1      	str	r1, [r2, #60]	; 0x3c

		TIM1 -> CCR1 = regulationData.counter.CO_heater_PWM[0];
 800342c:	8959      	ldrh	r1, [r3, #10]
 800342e:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8003432:	6351      	str	r1, [r2, #52]	; 0x34
		TIM1 -> CCR2 = regulationData.counter.CO_heater_PWM[1];
 8003434:	8999      	ldrh	r1, [r3, #12]
 8003436:	6391      	str	r1, [r2, #56]	; 0x38
		TIM1 -> CCR3 = regulationData.counter.CO_heater_PWM[2];
 8003438:	89d9      	ldrh	r1, [r3, #14]
 800343a:	63d1      	str	r1, [r2, #60]	; 0x3c

		expander1.gpio[MCP23017_PORTA] = regulationData.IOsignals.ports.portA;
 800343c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003440:	485b      	ldr	r0, [pc, #364]	; (80035b0 <RegulationTask+0x344>)
 8003442:	7183      	strb	r3, [r0, #6]
		mcp23017_write_gpio(&expander1, 0);
 8003444:	2100      	movs	r1, #0
 8003446:	f7fe fe72 	bl	800212e <mcp23017_write_gpio>
		vTaskDelayUntil(&xLastWakeTime, xDelay);
 800344a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800344e:	a820      	add	r0, sp, #128	; 0x80
 8003450:	f006 fa94 	bl	800997c <vTaskDelayUntil>
		mcp23017_read_gpio(&expander1, 0);
 8003454:	4c56      	ldr	r4, [pc, #344]	; (80035b0 <RegulationTask+0x344>)
 8003456:	2100      	movs	r1, #0
 8003458:	4620      	mov	r0, r4
 800345a:	f7fe fe56 	bl	800210a <mcp23017_read_gpio>
		mcp23017_read_gpio(&expander1, 1);
 800345e:	2101      	movs	r1, #1
 8003460:	4620      	mov	r0, r4
 8003462:	f7fe fe52 	bl	800210a <mcp23017_read_gpio>
		regulationData.IOsignals.bytes[0] = expander1.gpio[0];
 8003466:	79a2      	ldrb	r2, [r4, #6]
 8003468:	4955      	ldr	r1, [pc, #340]	; (80035c0 <RegulationTask+0x354>)
 800346a:	f881 206a 	strb.w	r2, [r1, #106]	; 0x6a
		regulationData.IOsignals.bytes[1] = expander1.gpio[1];
 800346e:	79e3      	ldrb	r3, [r4, #7]
 8003470:	f881 306b 	strb.w	r3, [r1, #107]	; 0x6b
		if(regulationData.IOsignals.signals.input2 != regulationData.IOsignals.signals.output1){
 8003474:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003478:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 800347c:	f43f af6c 	beq.w	8003358 <RegulationTask+0xec>
			regulationData.ControlWord.CWUHeaterError = HIGH;
 8003480:	f891 3068 	ldrb.w	r3, [r1, #104]	; 0x68
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	f881 3068 	strb.w	r3, [r1, #104]	; 0x68
		if(regulationData.IOsignals.signals.input3 != regulationData.IOsignals.signals.output2){
 800348c:	4b4c      	ldr	r3, [pc, #304]	; (80035c0 <RegulationTask+0x354>)
 800348e:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 8003492:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8003496:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800349a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800349e:	429a      	cmp	r2, r3
 80034a0:	f43f af62 	beq.w	8003368 <RegulationTask+0xfc>
			regulationData.ControlWord.COHeaterError = HIGH;
 80034a4:	4a46      	ldr	r2, [pc, #280]	; (80035c0 <RegulationTask+0x354>)
 80034a6:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
 80034b2:	ab0a      	add	r3, sp, #40	; 0x28
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	2312      	movs	r3, #18
 80034b8:	2200      	movs	r2, #0
 80034ba:	2101      	movs	r1, #1
 80034bc:	a821      	add	r0, sp, #132	; 0x84
 80034be:	f7fe ff81 	bl	80023c4 <vModbusReadInputRegisters>
 80034c2:	2800      	cmp	r0, #0
 80034c4:	d082      	beq.n	80033cc <RegulationTask+0x160>
		receieves = 0;
 80034c6:	2500      	movs	r5, #0
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, IMPORTED_ACTIVE_POWER, 4, imported_exported_power_raw) == Modbus_OK){
 80034c8:	ab08      	add	r3, sp, #32
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	2304      	movs	r3, #4
 80034ce:	2248      	movs	r2, #72	; 0x48
 80034d0:	2101      	movs	r1, #1
 80034d2:	a821      	add	r0, sp, #132	; 0x84
 80034d4:	f7fe ff76 	bl	80023c4 <vModbusReadInputRegisters>
 80034d8:	2800      	cmp	r0, #0
 80034da:	d18d      	bne.n	80033f8 <RegulationTask+0x18c>
			receieves += 2;
 80034dc:	3502      	adds	r5, #2
 80034de:	b2ed      	uxtb	r5, r5
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 80034e0:	a808      	add	r0, sp, #32
 80034e2:	f7ff feb3 	bl	800324c <fModbusParseFloat>
 80034e6:	eeb0 9a40 	vmov.f32	s18, s0
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 80034ea:	a809      	add	r0, sp, #36	; 0x24
 80034ec:	f7ff feae 	bl	800324c <fModbusParseFloat>
			if(regulationData.counter.power_in_buffor > 0){
 80034f0:	4b33      	ldr	r3, [pc, #204]	; (80035c0 <RegulationTask+0x354>)
 80034f2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80034f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fe:	f77f af67 	ble.w	80033d0 <RegulationTask+0x164>
				regulationData.counter.power_in_buffor -= (imported_power - last_imported_power);
 8003502:	ee79 8a68 	vsub.f32	s17, s18, s17
 8003506:	ee77 7ae8 	vsub.f32	s15, s15, s17
 800350a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 800350e:	e762      	b.n	80033d6 <RegulationTask+0x16a>
			receieves += 4;
 8003510:	3504      	adds	r5, #4
 8003512:	b2ed      	uxtb	r5, r5
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 8003514:	2400      	movs	r4, #0
 8003516:	e01b      	b.n	8003550 <RegulationTask+0x2e4>
				int16_t temp = temperatures_raw[i * 2];
 8003518:	0063      	lsls	r3, r4, #1
 800351a:	aa24      	add	r2, sp, #144	; 0x90
 800351c:	441a      	add	r2, r3
 800351e:	f812 2c84 	ldrb.w	r2, [r2, #-132]
				temp += temperatures_raw[i*2 + 1];
 8003522:	3301      	adds	r3, #1
 8003524:	a924      	add	r1, sp, #144	; 0x90
 8003526:	440b      	add	r3, r1
 8003528:	f813 0c84 	ldrb.w	r0, [r3, #-132]
 800352c:	eb00 2002 	add.w	r0, r0, r2, lsl #8
				temperatures[i] = temp / DEC_PLACES;
 8003530:	b200      	sxth	r0, r0
 8003532:	f7fc ffff 	bl	8000534 <__aeabi_i2d>
 8003536:	2200      	movs	r2, #0
 8003538:	4b23      	ldr	r3, [pc, #140]	; (80035c8 <RegulationTask+0x35c>)
 800353a:	f7fd f98f 	bl	800085c <__aeabi_ddiv>
 800353e:	f7fd fa95 	bl	8000a6c <__aeabi_d2f>
 8003542:	ab24      	add	r3, sp, #144	; 0x90
 8003544:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003548:	f843 0c38 	str.w	r0, [r3, #-56]
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 800354c:	3401      	adds	r4, #1
 800354e:	b2e4      	uxtb	r4, r4
 8003550:	2c09      	cmp	r4, #9
 8003552:	d9e1      	bls.n	8003518 <RegulationTask+0x2ac>
			memcpy(&regulationData.counter.CWU_temps[0], &temperatures[0], 24);
 8003554:	4c1d      	ldr	r4, [pc, #116]	; (80035cc <RegulationTask+0x360>)
 8003556:	ae16      	add	r6, sp, #88	; 0x58
 8003558:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800355a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800355c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003560:	e884 0003 	stmia.w	r4, {r0, r1}
 8003564:	e753      	b.n	800340e <RegulationTask+0x1a2>
					available_power[i]  = -regulationData.counter.powers[i] * regulationData.parameters.heater_power_coeff / 100.0f;
 8003566:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <RegulationTask+0x354>)
 8003568:	f993 307c 	ldrsb.w	r3, [r3, #124]	; 0x7c
 800356c:	ee07 3a10 	vmov	s14, r3
 8003570:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003574:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8003578:	eddf 6a15 	vldr	s13, [pc, #84]	; 80035d0 <RegulationTask+0x364>
 800357c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003580:	ab24      	add	r3, sp, #144	; 0x90
 8003582:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003586:	ed03 7a11 	vstr	s14, [r3, #-68]	; 0xffffffbc
 800358a:	e081      	b.n	8003690 <RegulationTask+0x424>
					regulationData.counter.CO_heater_max_power[i] = 0.0f;
 800358c:	1d2b      	adds	r3, r5, #4
 800358e:	4a0c      	ldr	r2, [pc, #48]	; (80035c0 <RegulationTask+0x354>)
 8003590:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	e0a2      	b.n	80036e0 <RegulationTask+0x474>
 800359a:	bf00      	nop
 800359c:	20002ec1 	.word	0x20002ec1
 80035a0:	200031a8 	.word	0x200031a8
 80035a4:	20003280 	.word	0x20003280
 80035a8:	2000301c 	.word	0x2000301c
 80035ac:	40010000 	.word	0x40010000
 80035b0:	20002ee4 	.word	0x20002ee4
 80035b4:	20002fc0 	.word	0x20002fc0
 80035b8:	200032c0 	.word	0x200032c0
 80035bc:	00000000 	.word	0x00000000
 80035c0:	20002e54 	.word	0x20002e54
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40240000 	.word	0x40240000
 80035cc:	20002ea4 	.word	0x20002ea4
 80035d0:	42c80000 	.word	0x42c80000
					regulationData.counter.CWU_heater_max_power[i] = 0.0f;
 80035d4:	1dab      	adds	r3, r5, #6
 80035d6:	4ac0      	ldr	r2, [pc, #768]	; (80038d8 <RegulationTask+0x66c>)
 80035d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80035dc:	2200      	movs	r2, #0
 80035de:	605a      	str	r2, [r3, #4]
				if(regulationData.counter.voltages[i] > 200.0){
 80035e0:	f105 030a 	add.w	r3, r5, #10
 80035e4:	4abc      	ldr	r2, [pc, #752]	; (80038d8 <RegulationTask+0x66c>)
 80035e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80035ea:	ed93 7a00 	vldr	s14, [r3]
 80035ee:	eddf 7abb 	vldr	s15, [pc, #748]	; 80038dc <RegulationTask+0x670>
 80035f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fa:	f340 809b 	ble.w	8003734 <RegulationTask+0x4c8>
					regulationData.counter.CO_heater_PWM[i] = (uint32_t)(regulationData.counter.CO_heater_max_power[i] * 1000.0);
 80035fe:	4616      	mov	r6, r2
 8003600:	1d2f      	adds	r7, r5, #4
 8003602:	eb02 0387 	add.w	r3, r2, r7, lsl #2
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	f7fc ffa6 	bl	8000558 <__aeabi_f2d>
 800360c:	2200      	movs	r2, #0
 800360e:	4bb4      	ldr	r3, [pc, #720]	; (80038e0 <RegulationTask+0x674>)
 8003610:	f7fc fffa 	bl	8000608 <__aeabi_dmul>
 8003614:	f7fd fa0a 	bl	8000a2c <__aeabi_d2uiz>
 8003618:	eb06 0747 	add.w	r7, r6, r7, lsl #1
 800361c:	8078      	strh	r0, [r7, #2]
					regulationData.counter.CWU_heater_PWM[i] = (uint32_t)(regulationData.counter.CWU_heater_max_power[i] * 1000.0);
 800361e:	1dab      	adds	r3, r5, #6
 8003620:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003624:	6858      	ldr	r0, [r3, #4]
 8003626:	f7fc ff97 	bl	8000558 <__aeabi_f2d>
 800362a:	2200      	movs	r2, #0
 800362c:	4bac      	ldr	r3, [pc, #688]	; (80038e0 <RegulationTask+0x674>)
 800362e:	f7fc ffeb 	bl	8000608 <__aeabi_dmul>
 8003632:	f7fd f9fb 	bl	8000a2c <__aeabi_d2uiz>
 8003636:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 800363a:	80a8      	strh	r0, [r5, #4]
			for(uint8_t i = 0; i < 3; i ++){
 800363c:	3401      	adds	r4, #1
 800363e:	b2e4      	uxtb	r4, r4
 8003640:	2c02      	cmp	r4, #2
 8003642:	f200 8083 	bhi.w	800374c <RegulationTask+0x4e0>
				if(regulationData.counter.powers[i] > 0){
 8003646:	4625      	mov	r5, r4
 8003648:	f104 0310 	add.w	r3, r4, #16
 800364c:	4aa2      	ldr	r2, [pc, #648]	; (80038d8 <RegulationTask+0x66c>)
 800364e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003652:	edd3 7a00 	vldr	s15, [r3]
 8003656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800365a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365e:	dd82      	ble.n	8003566 <RegulationTask+0x2fa>
					available_power[i] = ((regulationData.parameters.net_max_power / 3.0f) - regulationData.counter.powers[i]) * regulationData.parameters.heater_power_coeff;
 8003660:	4613      	mov	r3, r2
 8003662:	f8d2 2075 	ldr.w	r2, [r2, #117]	; 0x75
 8003666:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800366a:	ee07 2a10 	vmov	s14, r2
 800366e:	ee87 7a26 	vdiv.f32	s14, s14, s13
 8003672:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003676:	f993 307c 	ldrsb.w	r3, [r3, #124]	; 0x7c
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003682:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003686:	ab24      	add	r3, sp, #144	; 0x90
 8003688:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800368c:	ed43 7a11 	vstr	s15, [r3, #-68]	; 0xffffffbc
				if(regulationData.parameters.CO_heater_power > 0.0f){
 8003690:	4b91      	ldr	r3, [pc, #580]	; (80038d8 <RegulationTask+0x66c>)
 8003692:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800369e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a2:	f77f af73 	ble.w	800358c <RegulationTask+0x320>
					regulationData.counter.CO_heater_max_power[i] = available_power[i] / regulationData.parameters.CO_heater_power / 3.0f;
 80036a6:	ab24      	add	r3, sp, #144	; 0x90
 80036a8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80036ac:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 80036b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036b4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80036b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036bc:	1d2b      	adds	r3, r5, #4
 80036be:	4a86      	ldr	r2, [pc, #536]	; (80038d8 <RegulationTask+0x66c>)
 80036c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80036c4:	edc3 7a00 	vstr	s15, [r3]
					if(regulationData.counter.CO_heater_max_power[i] > 1.0f) regulationData.counter.CO_heater_max_power[i] = 1.0f;
 80036c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d4:	dd04      	ble.n	80036e0 <RegulationTask+0x474>
 80036d6:	1d2b      	adds	r3, r5, #4
 80036d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80036dc:	ed83 7a00 	vstr	s14, [r3]
				if(regulationData.parameters.CWU_heater_power > 0.0f){
 80036e0:	4b7d      	ldr	r3, [pc, #500]	; (80038d8 <RegulationTask+0x66c>)
 80036e2:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f2:	f77f af6f 	ble.w	80035d4 <RegulationTask+0x368>
					regulationData.counter.CWU_heater_max_power[i] = available_power[i] / regulationData.parameters.CWU_heater_power / 3.0f;
 80036f6:	ab24      	add	r3, sp, #144	; 0x90
 80036f8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80036fc:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 8003700:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003704:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800370c:	1dab      	adds	r3, r5, #6
 800370e:	4a72      	ldr	r2, [pc, #456]	; (80038d8 <RegulationTask+0x66c>)
 8003710:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003714:	edc3 7a01 	vstr	s15, [r3, #4]
					if(regulationData.counter.CWU_heater_max_power[i] > 1.0f) regulationData.counter.CWU_heater_max_power[i] = 1.0f;
 8003718:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800371c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003724:	f77f af5c 	ble.w	80035e0 <RegulationTask+0x374>
 8003728:	1dab      	adds	r3, r5, #6
 800372a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800372e:	ed83 7a01 	vstr	s14, [r3, #4]
 8003732:	e755      	b.n	80035e0 <RegulationTask+0x374>
					regulationData.counter.CO_heater_PWM[i] = 0;
 8003734:	4b68      	ldr	r3, [pc, #416]	; (80038d8 <RegulationTask+0x66c>)
 8003736:	1d2a      	adds	r2, r5, #4
 8003738:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800373c:	2100      	movs	r1, #0
 800373e:	8051      	strh	r1, [r2, #2]
					regulationData.counter.CWU_heater_PWM[i] = 0;
 8003740:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003744:	80a9      	strh	r1, [r5, #4]
 8003746:	e779      	b.n	800363c <RegulationTask+0x3d0>
			for(uint8_t i = 0; i < 3; i ++){
 8003748:	2400      	movs	r4, #0
 800374a:	e779      	b.n	8003640 <RegulationTask+0x3d4>
			if(regulationData.counter.CWU_temps[0] < regulationData.parameters.CWU_hi_temp){
 800374c:	4b62      	ldr	r3, [pc, #392]	; (80038d8 <RegulationTask+0x66c>)
 800374e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003752:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800375e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003766:	d515      	bpl.n	8003794 <RegulationTask+0x528>
				if(regulationData.counter.CWU_temps[1] < regulationData.parameters.CWU_lo_temp){
 8003768:	4b5b      	ldr	r3, [pc, #364]	; (80038d8 <RegulationTask+0x66c>)
 800376a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800376e:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800377a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	d50e      	bpl.n	80037a2 <RegulationTask+0x536>
					regulationData.ControlWord.CWUHeaterStateOut = HIGH;
 8003784:	4a54      	ldr	r2, [pc, #336]	; (80038d8 <RegulationTask+0x66c>)
 8003786:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8003792:	e006      	b.n	80037a2 <RegulationTask+0x536>
				regulationData.ControlWord.CWUHeaterStateOut = LOW;
 8003794:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <RegulationTask+0x66c>)
 8003796:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800379a:	f36f 0200 	bfc	r2, #0, #1
 800379e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.counter.CO_temps[0] < regulationData.parameters.CO_hi_temp){
 80037a2:	4b4d      	ldr	r3, [pc, #308]	; (80038d8 <RegulationTask+0x66c>)
 80037a4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80037a8:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 80037ac:	ee07 3a90 	vmov	s15, r3
 80037b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037bc:	d515      	bpl.n	80037ea <RegulationTask+0x57e>
				if(regulationData.counter.CO_temps[3] < regulationData.parameters.CO_lo_temp){
 80037be:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <RegulationTask+0x66c>)
 80037c0:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80037c4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d8:	d50e      	bpl.n	80037f8 <RegulationTask+0x58c>
					regulationData.ControlWord.COHeaterStateOut = HIGH;
 80037da:	4a3f      	ldr	r2, [pc, #252]	; (80038d8 <RegulationTask+0x66c>)
 80037dc:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 80037e8:	e006      	b.n	80037f8 <RegulationTask+0x58c>
				regulationData.ControlWord.COHeaterStateOut = LOW;
 80037ea:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <RegulationTask+0x66c>)
 80037ec:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80037f0:	f36f 0200 	bfc	r2, #0, #1
 80037f4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.ControlWord.COHeaterStateOut){
 80037f8:	4b37      	ldr	r3, [pc, #220]	; (80038d8 <RegulationTask+0x66c>)
 80037fa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80037fe:	f013 0f01 	tst.w	r3, #1
 8003802:	d006      	beq.n	8003812 <RegulationTask+0x5a6>
				regulationData.ControlWord.CWUHeaterStateOut = LOW;
 8003804:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <RegulationTask+0x66c>)
 8003806:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800380a:	f36f 0200 	bfc	r2, #0, #1
 800380e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.IOsignals.signals.input1 == HIGH){
 8003812:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <RegulationTask+0x66c>)
 8003814:	f993 306b 	ldrsb.w	r3, [r3, #107]	; 0x6b
 8003818:	2b00      	cmp	r3, #0
 800381a:	da47      	bge.n	80038ac <RegulationTask+0x640>
				if(regulationData.IOsignals.signals.input4 == LOW ||
 800381c:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <RegulationTask+0x66c>)
 800381e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003820:	f023 436f 	bic.w	r3, r3, #4009754624	; 0xef000000
 8003824:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003828:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800382c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003834:	d006      	beq.n	8003844 <RegulationTask+0x5d8>
					regulationData.ControlWord.CWUHeaterStateOut = LOW;
 8003836:	4b28      	ldr	r3, [pc, #160]	; (80038d8 <RegulationTask+0x66c>)
 8003838:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800383c:	f36f 0200 	bfc	r2, #0, #1
 8003840:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				if(regulationData.IOsignals.signals.input5 == LOW &&
 8003844:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <RegulationTask+0x66c>)
 8003846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003848:	f023 4377 	bic.w	r3, r3, #4143972352	; 0xf7000000
 800384c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003850:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003854:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003858:	2b01      	cmp	r3, #1
 800385a:	d00a      	beq.n	8003872 <RegulationTask+0x606>
				if(regulationData.ControlWord.CWUHeaterStateOut == LOW){
 800385c:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <RegulationTask+0x66c>)
 800385e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003862:	f013 0301 	ands.w	r3, r3, #1
 8003866:	d015      	beq.n	8003894 <RegulationTask+0x628>
				if(regulationData.ControlWord.COHeaterStateOut == LOW){
 8003868:	2b00      	cmp	r3, #0
 800386a:	f47f add7 	bne.w	800341c <RegulationTask+0x1b0>
					for(int i = 0; i < 3; i++){
 800386e:	2300      	movs	r3, #0
 8003870:	e019      	b.n	80038a6 <RegulationTask+0x63a>
					regulationData.ControlWord.CWUHeaterStateOut = LOW;
 8003872:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <RegulationTask+0x66c>)
 8003874:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003878:	f36f 0200 	bfc	r2, #0, #1
 800387c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003880:	e7ec      	b.n	800385c <RegulationTask+0x5f0>
						regulationData.counter.CWU_heater_PWM[i] = 0;
 8003882:	4915      	ldr	r1, [pc, #84]	; (80038d8 <RegulationTask+0x66c>)
 8003884:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8003888:	2000      	movs	r0, #0
 800388a:	8088      	strh	r0, [r1, #4]
					for(int i = 0; i < 3; i++){
 800388c:	3201      	adds	r2, #1
 800388e:	2a02      	cmp	r2, #2
 8003890:	ddf7      	ble.n	8003882 <RegulationTask+0x616>
 8003892:	e7e9      	b.n	8003868 <RegulationTask+0x5fc>
 8003894:	2200      	movs	r2, #0
 8003896:	e7fa      	b.n	800388e <RegulationTask+0x622>
						regulationData.counter.CO_heater_PWM[i] = 0;
 8003898:	1d19      	adds	r1, r3, #4
 800389a:	4a0f      	ldr	r2, [pc, #60]	; (80038d8 <RegulationTask+0x66c>)
 800389c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80038a0:	2100      	movs	r1, #0
 80038a2:	8051      	strh	r1, [r2, #2]
					for(int i = 0; i < 3; i++){
 80038a4:	3301      	adds	r3, #1
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	ddf6      	ble.n	8003898 <RegulationTask+0x62c>
 80038aa:	e5b7      	b.n	800341c <RegulationTask+0x1b0>
				regulationData.ControlWord.COHeaterStateOut = LOW;
 80038ac:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <RegulationTask+0x66c>)
 80038ae:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80038b2:	f36f 0200 	bfc	r2, #0, #1
 80038b6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				for(int i = 0; i < 3; i++){
 80038ba:	2300      	movs	r3, #0
 80038bc:	e009      	b.n	80038d2 <RegulationTask+0x666>
					regulationData.counter.CO_heater_PWM[i] = 0;
 80038be:	4a06      	ldr	r2, [pc, #24]	; (80038d8 <RegulationTask+0x66c>)
 80038c0:	1d19      	adds	r1, r3, #4
 80038c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80038c6:	2000      	movs	r0, #0
 80038c8:	8048      	strh	r0, [r1, #2]
					regulationData.counter.CWU_heater_PWM[i] = 0;
 80038ca:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80038ce:	8090      	strh	r0, [r2, #4]
				for(int i = 0; i < 3; i++){
 80038d0:	3301      	adds	r3, #1
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	ddf3      	ble.n	80038be <RegulationTask+0x652>
 80038d6:	e5a1      	b.n	800341c <RegulationTask+0x1b0>
 80038d8:	20002e54 	.word	0x20002e54
 80038dc:	43480000 	.word	0x43480000
 80038e0:	408f4000 	.word	0x408f4000

080038e4 <RegulationTask_GetData>:
	}
  /* USER CODE END PowerRegulation */
}

void RegulationTask_GetData (RegTaskData_t* destination){
 80038e4:	b508      	push	{r3, lr}
	memcpy(destination, &regulationData, sizeof(RegTaskData_t));
 80038e6:	2290      	movs	r2, #144	; 0x90
 80038e8:	4901      	ldr	r1, [pc, #4]	; (80038f0 <RegulationTask_GetData+0xc>)
 80038ea:	f007 ff11 	bl	800b710 <memcpy>
}
 80038ee:	bd08      	pop	{r3, pc}
 80038f0:	20002e54 	.word	0x20002e54

080038f4 <TestTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TestTask */
void TestTask(void const * argument)
{
 80038f4:	b508      	push	{r3, lr}

  /* Infinite loop */
  for(;;)
  {

    vTaskDelay(1000);
 80038f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038fa:	f006 f891 	bl	8009a20 <vTaskDelay>
 80038fe:	e7fa      	b.n	80038f6 <TestTask+0x2>

08003900 <UARTDMA_UartIrqHandler>:



void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8003900:	6802      	ldr	r2, [r0, #0]
 8003902:	6813      	ldr	r3, [r2, #0]
 8003904:	6819      	ldr	r1, [r3, #0]
 8003906:	f011 0f10 	tst.w	r1, #16
 800390a:	d00e      	beq.n	800392a <UARTDMA_UartIrqHandler+0x2a>
{
 800390c:	b082      	sub	sp, #8
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	9101      	str	r1, [sp, #4]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	9301      	str	r3, [sp, #4]
		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8003916:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	f023 0301 	bic.w	r3, r3, #1
 8003920:	6013      	str	r3, [r2, #0]
		tmp = tmp; // For unused warning
 8003922:	9b01      	ldr	r3, [sp, #4]
 8003924:	9301      	str	r3, [sp, #4]
	}
}
 8003926:	b002      	add	sp, #8
 8003928:	4770      	bx	lr
 800392a:	4770      	bx	lr

0800392c <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma){
 800392c:	b570      	push	{r4, r5, r6, lr}
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t Reserved0;
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 800392e:	6803      	ldr	r3, [r0, #0]
 8003930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003932:	6d9d      	ldr	r5, [r3, #88]	; 0x58

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	f012 0f10 	tst.w	r2, #16
 800393c:	d038      	beq.n	80039b0 <UARTDMA_DmaIrqHandler+0x84>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 800393e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003940:	2320      	movs	r3, #32
 8003942:	4093      	lsls	r3, r2
 8003944:	60ab      	str	r3, [r5, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8003946:	6803      	ldr	r3, [r0, #0]
 8003948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685e      	ldr	r6, [r3, #4]
 800394e:	f1c6 061e 	rsb	r6, r6, #30

		//huartdma->length += Length;
		huartdma->length = Length;
 8003952:	f880 60a2 	strb.w	r6, [r0, #162]	; 0xa2

		for(i = 0; i < Length; i++){
 8003956:	2200      	movs	r2, #0
 8003958:	e00c      	b.n	8003974 <UARTDMA_DmaIrqHandler+0x48>
			huartdma->UART_Buffer[huartdma->UartBufferTail] = huartdma->DMA_RX_Buffer[i];
 800395a:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 800395e:	1881      	adds	r1, r0, r2
 8003960:	790c      	ldrb	r4, [r1, #4]
 8003962:	18c1      	adds	r1, r0, r3
 8003964:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
			huartdma->UartBufferTail++;
 8003968:	3301      	adds	r3, #1
			huartdma->UartBufferTail &= 127;
 800396a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800396e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		for(i = 0; i < Length; i++){
 8003972:	3201      	adds	r2, #1
 8003974:	42b2      	cmp	r2, r6
 8003976:	d3f0      	bcc.n	800395a <UARTDMA_DmaIrqHandler+0x2e>
 8003978:	4604      	mov	r4, r0
		}

		huartdma -> callback();
 800397a:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 800397e:	4798      	blx	r3

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8003980:	4623      	mov	r3, r4
 8003982:	f853 2b04 	ldr.w	r2, [r3], #4
 8003986:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003988:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 800398a:	223f      	movs	r2, #63	; 0x3f
 800398c:	408a      	lsls	r2, r1
 800398e:	60aa      	str	r2, [r5, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8003990:	6822      	ldr	r2, [r4, #0]
 8003992:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	60d3      	str	r3, [r2, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	221e      	movs	r2, #30
 80039a0:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	6813      	ldr	r3, [r2, #0]
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6013      	str	r3, [r2, #0]
	}
}
 80039b0:	bd70      	pop	{r4, r5, r6, pc}

080039b2 <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 80039b2:	b510      	push	{r4, lr}
 80039b4:	4604      	mov	r4, r0
	huartdma->huart = huart;
 80039b6:	6001      	str	r1, [r0, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 80039b8:	680a      	ldr	r2, [r1, #0]
 80039ba:	68d3      	ldr	r3, [r2, #12]
 80039bc:	f043 0310 	orr.w	r3, r3, #16
 80039c0:	60d3      	str	r3, [r2, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 80039c2:	4601      	mov	r1, r0
 80039c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80039c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	6813      	ldr	r3, [r2, #0]
 80039ce:	f043 0310 	orr.w	r3, r3, #16
 80039d2:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 80039d4:	221e      	movs	r2, #30
 80039d6:	6800      	ldr	r0, [r0, #0]
 80039d8:	f004 fd3c 	bl	8008454 <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_HTIE; // Disable DMA Half Complete interrupt
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	6813      	ldr	r3, [r2, #0]
 80039e4:	f023 0308 	bic.w	r3, r3, #8
 80039e8:	6013      	str	r3, [r2, #0]
}
 80039ea:	bd10      	pop	{r4, pc}

080039ec <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80039ec:	4b03      	ldr	r3, [pc, #12]	; (80039fc <vApplicationGetIdleTaskMemory+0x10>)
 80039ee:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <vApplicationGetIdleTaskMemory+0x14>)
 80039f2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	2000036c 	.word	0x2000036c
 8003a00:	2000016c 	.word	0x2000016c

08003a04 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <vApplicationGetTimerTaskMemory+0x10>)
 8003a06:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8003a08:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <vApplicationGetTimerTaskMemory+0x14>)
 8003a0a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a10:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8003a12:	4770      	bx	lr
 8003a14:	200007d0 	.word	0x200007d0
 8003a18:	200003d0 	.word	0x200003d0

08003a1c <ConfigSaveTmr>:
__weak void ConfigSaveTmr(void const * argument)
{
  /* USER CODE BEGIN ConfigSaveTmr */
  
  /* USER CODE END ConfigSaveTmr */
}
 8003a1c:	4770      	bx	lr
	...

08003a20 <MX_GPIO_Init>:
{
 8003a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a24:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a26:	2400      	movs	r4, #0
 8003a28:	9405      	str	r4, [sp, #20]
 8003a2a:	9406      	str	r4, [sp, #24]
 8003a2c:	9407      	str	r4, [sp, #28]
 8003a2e:	9408      	str	r4, [sp, #32]
 8003a30:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a32:	9401      	str	r4, [sp, #4]
 8003a34:	4b46      	ldr	r3, [pc, #280]	; (8003b50 <MX_GPIO_Init+0x130>)
 8003a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a38:	f042 0204 	orr.w	r2, r2, #4
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a40:	f002 0204 	and.w	r2, r2, #4
 8003a44:	9201      	str	r2, [sp, #4]
 8003a46:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a48:	9402      	str	r4, [sp, #8]
 8003a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30
 8003a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a54:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003a58:	9202      	str	r2, [sp, #8]
 8003a5a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5c:	9403      	str	r4, [sp, #12]
 8003a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
 8003a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a68:	f002 0201 	and.w	r2, r2, #1
 8003a6c:	9203      	str	r2, [sp, #12]
 8003a6e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a70:	9404      	str	r4, [sp, #16]
 8003a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a74:	f042 0202 	orr.w	r2, r2, #2
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	9304      	str	r3, [sp, #16]
 8003a82:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 8003a84:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8003b64 <MX_GPIO_Init+0x144>
 8003a88:	4622      	mov	r2, r4
 8003a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a8e:	4640      	mov	r0, r8
 8003a90:	f002 f8c9 	bl	8005c26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 8003a94:	4d2f      	ldr	r5, [pc, #188]	; (8003b54 <MX_GPIO_Init+0x134>)
 8003a96:	4622      	mov	r2, r4
 8003a98:	2102      	movs	r1, #2
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f002 f8c3 	bl	8005c26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	2110      	movs	r1, #16
 8003aa4:	4628      	mov	r0, r5
 8003aa6:	f002 f8be 	bl	8005c26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin, GPIO_PIN_SET);
 8003aaa:	4e2b      	ldr	r6, [pc, #172]	; (8003b58 <MX_GPIO_Init+0x138>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	f246 0104 	movw	r1, #24580	; 0x6004
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f002 f8b7 	bl	8005c26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8003ab8:	4622      	mov	r2, r4
 8003aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003abe:	4630      	mov	r0, r6
 8003ac0:	f002 f8b1 	bl	8005c26 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUILT_IN_LED_Pin;
 8003ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ac8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aca:	2701      	movs	r7, #1
 8003acc:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BUILT_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8003ad2:	a905      	add	r1, sp, #20
 8003ad4:	4640      	mov	r0, r8
 8003ad6:	f001 ffcd 	bl	8005a74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MASTER_TE_Pin|ETH_CS_Pin;
 8003ada:	2312      	movs	r3, #18
 8003adc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ade:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae4:	a905      	add	r1, sp, #20
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f001 ffc4 	bl	8005a74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ETH_INT_Pin|PG24V_Pin;
 8003aec:	f241 0302 	movw	r3, #4098	; 0x1002
 8003af0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003af2:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <MX_GPIO_Init+0x13c>)
 8003af4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af8:	a905      	add	r1, sp, #20
 8003afa:	4630      	mov	r0, r6
 8003afc:	f001 ffba 	bl	8005a74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin|NRF_CE_Pin;
 8003b00:	f24e 0304 	movw	r3, #57348	; 0xe004
 8003b04:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b06:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0c:	a905      	add	r1, sp, #20
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f001 ffb0 	bl	8005a74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NRF_INT_Pin;
 8003b14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b18:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b1a:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <MX_GPIO_Init+0x140>)
 8003b1c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(NRF_INT_GPIO_Port, &GPIO_InitStruct);
 8003b20:	a905      	add	r1, sp, #20
 8003b22:	4628      	mov	r0, r5
 8003b24:	f001 ffa6 	bl	8005a74 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8003b28:	4622      	mov	r2, r4
 8003b2a:	2105      	movs	r1, #5
 8003b2c:	2007      	movs	r0, #7
 8003b2e:	f001 fcd3 	bl	80054d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003b32:	2007      	movs	r0, #7
 8003b34:	f001 fd04 	bl	8005540 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003b38:	4622      	mov	r2, r4
 8003b3a:	2105      	movs	r1, #5
 8003b3c:	2028      	movs	r0, #40	; 0x28
 8003b3e:	f001 fccb 	bl	80054d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b42:	2028      	movs	r0, #40	; 0x28
 8003b44:	f001 fcfc 	bl	8005540 <HAL_NVIC_EnableIRQ>
}
 8003b48:	b00a      	add	sp, #40	; 0x28
 8003b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40020000 	.word	0x40020000
 8003b58:	40020400 	.word	0x40020400
 8003b5c:	10210000 	.word	0x10210000
 8003b60:	10110000 	.word	0x10110000
 8003b64:	40020800 	.word	0x40020800

08003b68 <MX_DMA_Init>:
{
 8003b68:	b510      	push	{r4, lr}
 8003b6a:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b6c:	2400      	movs	r4, #0
 8003b6e:	9400      	str	r4, [sp, #0]
 8003b70:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <MX_DMA_Init+0x64>)
 8003b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b74:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
 8003b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003b80:	9200      	str	r2, [sp, #0]
 8003b82:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b84:	9401      	str	r4, [sp, #4]
 8003b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b88:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8003b98:	4622      	mov	r2, r4
 8003b9a:	2105      	movs	r1, #5
 8003b9c:	2010      	movs	r0, #16
 8003b9e:	f001 fc9b 	bl	80054d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003ba2:	2010      	movs	r0, #16
 8003ba4:	f001 fccc 	bl	8005540 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003ba8:	4622      	mov	r2, r4
 8003baa:	2105      	movs	r1, #5
 8003bac:	2039      	movs	r0, #57	; 0x39
 8003bae:	f001 fc93 	bl	80054d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003bb2:	2039      	movs	r0, #57	; 0x39
 8003bb4:	f001 fcc4 	bl	8005540 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8003bb8:	4622      	mov	r2, r4
 8003bba:	2105      	movs	r1, #5
 8003bbc:	203a      	movs	r0, #58	; 0x3a
 8003bbe:	f001 fc8b 	bl	80054d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003bc2:	203a      	movs	r0, #58	; 0x3a
 8003bc4:	f001 fcbc 	bl	8005540 <HAL_NVIC_EnableIRQ>
}
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd10      	pop	{r4, pc}
 8003bcc:	40023800 	.word	0x40023800

08003bd0 <StartDefaultTask>:
{
 8003bd0:	b508      	push	{r3, lr}
    osDelay(1);
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	f004 fe83 	bl	80088de <osDelay>
 8003bd8:	e7fb      	b.n	8003bd2 <StartDefaultTask+0x2>

08003bda <HAL_UART_RxCpltCallback>:
}
 8003bda:	4770      	bx	lr

08003bdc <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003bdc:	b508      	push	{r3, lr}
	if(huart -> Instance == USART2){
 8003bde:	6802      	ldr	r2, [r0, #0]
 8003be0:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <HAL_UART_TxCpltCallback+0x24>)
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d000      	beq.n	8003be8 <HAL_UART_TxCpltCallback+0xc>
}
 8003be6:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 8003be8:	2201      	movs	r2, #1
 8003bea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bee:	4805      	ldr	r0, [pc, #20]	; (8003c04 <HAL_UART_TxCpltCallback+0x28>)
 8003bf0:	f002 f819 	bl	8005c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	4803      	ldr	r0, [pc, #12]	; (8003c08 <HAL_UART_TxCpltCallback+0x2c>)
 8003bfa:	f002 f814 	bl	8005c26 <HAL_GPIO_WritePin>
}
 8003bfe:	e7f2      	b.n	8003be6 <HAL_UART_TxCpltCallback+0xa>
 8003c00:	40004400 	.word	0x40004400
 8003c04:	40020800 	.word	0x40020800
 8003c08:	40020000 	.word	0x40020000

08003c0c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003c0c:	b510      	push	{r4, lr}
 8003c0e:	4604      	mov	r4, r0
	if(GPIO_Pin & NRF_INT_Pin){
 8003c10:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003c14:	d106      	bne.n	8003c24 <HAL_GPIO_EXTI_Callback+0x18>
	if(GPIO_Pin & ETH_INT_Pin){
 8003c16:	f014 0f02 	tst.w	r4, #2
 8003c1a:	d109      	bne.n	8003c30 <HAL_GPIO_EXTI_Callback+0x24>
	if(GPIO_Pin & PG24V_Pin){
 8003c1c:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8003c20:	d10c      	bne.n	8003c3c <HAL_GPIO_EXTI_Callback+0x30>
}
 8003c22:	bd10      	pop	{r4, pc}
		vTaskNotifyGiveFromISR(nRF24L01Handle, NULL);
 8003c24:	2100      	movs	r1, #0
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	f006 faa5 	bl	800a178 <vTaskNotifyGiveFromISR>
 8003c2e:	e7f2      	b.n	8003c16 <HAL_GPIO_EXTI_Callback+0xa>
		vTaskNotifyGiveFromISR(EthernetHandle, NULL);
 8003c30:	2100      	movs	r1, #0
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_GPIO_EXTI_Callback+0x40>)
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	f006 fa9f 	bl	800a178 <vTaskNotifyGiveFromISR>
 8003c3a:	e7ef      	b.n	8003c1c <HAL_GPIO_EXTI_Callback+0x10>
		HAL_RTCEx_BKUPWrite(&hrtc, 0, 123456);
 8003c3c:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <HAL_GPIO_EXTI_Callback+0x44>)
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4804      	ldr	r0, [pc, #16]	; (8003c54 <HAL_GPIO_EXTI_Callback+0x48>)
 8003c42:	f003 fb09 	bl	8007258 <HAL_RTCEx_BKUPWrite>
}
 8003c46:	e7ec      	b.n	8003c22 <HAL_GPIO_EXTI_Callback+0x16>
 8003c48:	20002eec 	.word	0x20002eec
 8003c4c:	2000330c 	.word	0x2000330c
 8003c50:	0001e240 	.word	0x0001e240
 8003c54:	20003188 	.word	0x20003188

08003c58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM11){
 8003c5a:	6802      	ldr	r2, [r0, #0]
 8003c5c:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d004      	beq.n	8003c6c <HAL_TIM_PeriodElapsedCallback+0x14>
		ulHighFreqTimerTicks ++;
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8003c62:	6802      	ldr	r2, [r0, #0]
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d005      	beq.n	8003c76 <HAL_TIM_PeriodElapsedCallback+0x1e>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003c6a:	bd08      	pop	{r3, pc}
		ulHighFreqTimerTicks ++;
 8003c6c:	4a05      	ldr	r2, [pc, #20]	; (8003c84 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003c6e:	6813      	ldr	r3, [r2, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	e7f5      	b.n	8003c62 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
 8003c76:	f001 fa7d 	bl	8005174 <HAL_IncTick>
}
 8003c7a:	e7f6      	b.n	8003c6a <HAL_TIM_PeriodElapsedCallback+0x12>
 8003c7c:	40014800 	.word	0x40014800
 8003c80:	40014400 	.word	0x40014400
 8003c84:	20003308 	.word	0x20003308

08003c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c88:	e7fe      	b.n	8003c88 <Error_Handler>
	...

08003c8c <MX_I2C1_Init>:
{
 8003c8c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8003c8e:	480a      	ldr	r0, [pc, #40]	; (8003cb8 <MX_I2C1_Init+0x2c>)
 8003c90:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <MX_I2C1_Init+0x30>)
 8003c92:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <MX_I2C1_Init+0x34>)
 8003c96:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c9c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ca2:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ca4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ca6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ca8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003caa:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003cac:	f002 fa1c 	bl	80060e8 <HAL_I2C_Init>
 8003cb0:	b900      	cbnz	r0, 8003cb4 <MX_I2C1_Init+0x28>
}
 8003cb2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003cb4:	f7ff ffe8 	bl	8003c88 <Error_Handler>
 8003cb8:	20002fc0 	.word	0x20002fc0
 8003cbc:	40005400 	.word	0x40005400
 8003cc0:	000186a0 	.word	0x000186a0

08003cc4 <MX_SPI1_Init>:
{
 8003cc4:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8003cc6:	480d      	ldr	r0, [pc, #52]	; (8003cfc <MX_SPI1_Init+0x38>)
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <MX_SPI1_Init+0x3c>)
 8003cca:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ccc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003cd0:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cd6:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cd8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cda:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ce0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003ce2:	2218      	movs	r2, #24
 8003ce4:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ce6:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ce8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cea:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cec:	230a      	movs	r3, #10
 8003cee:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cf0:	f003 fb80 	bl	80073f4 <HAL_SPI_Init>
 8003cf4:	b900      	cbnz	r0, 8003cf8 <MX_SPI1_Init+0x34>
}
 8003cf6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003cf8:	f7ff ffc6 	bl	8003c88 <Error_Handler>
 8003cfc:	20003228 	.word	0x20003228
 8003d00:	40013000 	.word	0x40013000

08003d04 <MX_TIM1_Init>:
{
 8003d04:	b510      	push	{r4, lr}
 8003d06:	b092      	sub	sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d08:	2400      	movs	r4, #0
 8003d0a:	9410      	str	r4, [sp, #64]	; 0x40
 8003d0c:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d0e:	9409      	str	r4, [sp, #36]	; 0x24
 8003d10:	940a      	str	r4, [sp, #40]	; 0x28
 8003d12:	940b      	str	r4, [sp, #44]	; 0x2c
 8003d14:	940c      	str	r4, [sp, #48]	; 0x30
 8003d16:	940d      	str	r4, [sp, #52]	; 0x34
 8003d18:	940e      	str	r4, [sp, #56]	; 0x38
 8003d1a:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	4621      	mov	r1, r4
 8003d20:	a801      	add	r0, sp, #4
 8003d22:	f007 fd00 	bl	800b726 <memset>
  htim1.Instance = TIM1;
 8003d26:	482b      	ldr	r0, [pc, #172]	; (8003dd4 <MX_TIM1_Init+0xd0>)
 8003d28:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <MX_TIM1_Init+0xd4>)
 8003d2a:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 42000-1;
 8003d2c:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8003d30:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d32:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 999;
 8003d34:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003d38:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d3e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d40:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d42:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003d44:	f003 ffe9 	bl	8007d1a <HAL_TIM_PWM_Init>
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	d136      	bne.n	8003dba <MX_TIM1_Init+0xb6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d50:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d52:	a910      	add	r1, sp, #64	; 0x40
 8003d54:	481f      	ldr	r0, [pc, #124]	; (8003dd4 <MX_TIM1_Init+0xd0>)
 8003d56:	f004 f8c9 	bl	8007eec <HAL_TIMEx_MasterConfigSynchronization>
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d12f      	bne.n	8003dbe <MX_TIM1_Init+0xba>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d5e:	2360      	movs	r3, #96	; 0x60
 8003d60:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003d62:	2200      	movs	r2, #0
 8003d64:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d66:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d68:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d6a:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d6c:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d6e:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d70:	a909      	add	r1, sp, #36	; 0x24
 8003d72:	4818      	ldr	r0, [pc, #96]	; (8003dd4 <MX_TIM1_Init+0xd0>)
 8003d74:	f004 f81c 	bl	8007db0 <HAL_TIM_PWM_ConfigChannel>
 8003d78:	bb18      	cbnz	r0, 8003dc2 <MX_TIM1_Init+0xbe>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	a909      	add	r1, sp, #36	; 0x24
 8003d7e:	4815      	ldr	r0, [pc, #84]	; (8003dd4 <MX_TIM1_Init+0xd0>)
 8003d80:	f004 f816 	bl	8007db0 <HAL_TIM_PWM_ConfigChannel>
 8003d84:	b9f8      	cbnz	r0, 8003dc6 <MX_TIM1_Init+0xc2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d86:	2208      	movs	r2, #8
 8003d88:	a909      	add	r1, sp, #36	; 0x24
 8003d8a:	4812      	ldr	r0, [pc, #72]	; (8003dd4 <MX_TIM1_Init+0xd0>)
 8003d8c:	f004 f810 	bl	8007db0 <HAL_TIM_PWM_ConfigChannel>
 8003d90:	b9d8      	cbnz	r0, 8003dca <MX_TIM1_Init+0xc6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d96:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d98:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d9a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d9c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003da2:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003da4:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003da6:	a901      	add	r1, sp, #4
 8003da8:	480a      	ldr	r0, [pc, #40]	; (8003dd4 <MX_TIM1_Init+0xd0>)
 8003daa:	f004 f8db 	bl	8007f64 <HAL_TIMEx_ConfigBreakDeadTime>
 8003dae:	b970      	cbnz	r0, 8003dce <MX_TIM1_Init+0xca>
  HAL_TIM_MspPostInit(&htim1);
 8003db0:	4808      	ldr	r0, [pc, #32]	; (8003dd4 <MX_TIM1_Init+0xd0>)
 8003db2:	f000 fbcf 	bl	8004554 <HAL_TIM_MspPostInit>
}
 8003db6:	b012      	add	sp, #72	; 0x48
 8003db8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003dba:	f7ff ff65 	bl	8003c88 <Error_Handler>
    Error_Handler();
 8003dbe:	f7ff ff63 	bl	8003c88 <Error_Handler>
    Error_Handler();
 8003dc2:	f7ff ff61 	bl	8003c88 <Error_Handler>
    Error_Handler();
 8003dc6:	f7ff ff5f 	bl	8003c88 <Error_Handler>
    Error_Handler();
 8003dca:	f7ff ff5d 	bl	8003c88 <Error_Handler>
    Error_Handler();
 8003dce:	f7ff ff5b 	bl	8003c88 <Error_Handler>
 8003dd2:	bf00      	nop
 8003dd4:	200031a8 	.word	0x200031a8
 8003dd8:	40010000 	.word	0x40010000

08003ddc <MX_TIM3_Init>:
{
 8003ddc:	b500      	push	{lr}
 8003dde:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003de0:	2300      	movs	r3, #0
 8003de2:	9308      	str	r3, [sp, #32]
 8003de4:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	9302      	str	r3, [sp, #8]
 8003dea:	9303      	str	r3, [sp, #12]
 8003dec:	9304      	str	r3, [sp, #16]
 8003dee:	9305      	str	r3, [sp, #20]
 8003df0:	9306      	str	r3, [sp, #24]
 8003df2:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8003df4:	4820      	ldr	r0, [pc, #128]	; (8003e78 <MX_TIM3_Init+0x9c>)
 8003df6:	4a21      	ldr	r2, [pc, #132]	; (8003e7c <MX_TIM3_Init+0xa0>)
 8003df8:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 42000 - 1;
 8003dfa:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8003dfe:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e00:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8003e02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e06:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003e08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e0c:	6102      	str	r2, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e0e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003e10:	f003 ff83 	bl	8007d1a <HAL_TIM_PWM_Init>
 8003e14:	bb28      	cbnz	r0, 8003e62 <MX_TIM3_Init+0x86>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e16:	2300      	movs	r3, #0
 8003e18:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e1a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e1c:	a908      	add	r1, sp, #32
 8003e1e:	4816      	ldr	r0, [pc, #88]	; (8003e78 <MX_TIM3_Init+0x9c>)
 8003e20:	f004 f864 	bl	8007eec <HAL_TIMEx_MasterConfigSynchronization>
 8003e24:	b9f8      	cbnz	r0, 8003e66 <MX_TIM3_Init+0x8a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e26:	2360      	movs	r3, #96	; 0x60
 8003e28:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e2e:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e30:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e32:	a901      	add	r1, sp, #4
 8003e34:	4810      	ldr	r0, [pc, #64]	; (8003e78 <MX_TIM3_Init+0x9c>)
 8003e36:	f003 ffbb 	bl	8007db0 <HAL_TIM_PWM_ConfigChannel>
 8003e3a:	b9b0      	cbnz	r0, 8003e6a <MX_TIM3_Init+0x8e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	eb0d 0102 	add.w	r1, sp, r2
 8003e42:	480d      	ldr	r0, [pc, #52]	; (8003e78 <MX_TIM3_Init+0x9c>)
 8003e44:	f003 ffb4 	bl	8007db0 <HAL_TIM_PWM_ConfigChannel>
 8003e48:	b988      	cbnz	r0, 8003e6e <MX_TIM3_Init+0x92>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e4a:	2208      	movs	r2, #8
 8003e4c:	a901      	add	r1, sp, #4
 8003e4e:	480a      	ldr	r0, [pc, #40]	; (8003e78 <MX_TIM3_Init+0x9c>)
 8003e50:	f003 ffae 	bl	8007db0 <HAL_TIM_PWM_ConfigChannel>
 8003e54:	b968      	cbnz	r0, 8003e72 <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8003e56:	4808      	ldr	r0, [pc, #32]	; (8003e78 <MX_TIM3_Init+0x9c>)
 8003e58:	f000 fb7c 	bl	8004554 <HAL_TIM_MspPostInit>
}
 8003e5c:	b00b      	add	sp, #44	; 0x2c
 8003e5e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003e62:	f7ff ff11 	bl	8003c88 <Error_Handler>
    Error_Handler();
 8003e66:	f7ff ff0f 	bl	8003c88 <Error_Handler>
    Error_Handler();
 8003e6a:	f7ff ff0d 	bl	8003c88 <Error_Handler>
    Error_Handler();
 8003e6e:	f7ff ff0b 	bl	8003c88 <Error_Handler>
    Error_Handler();
 8003e72:	f7ff ff09 	bl	8003c88 <Error_Handler>
 8003e76:	bf00      	nop
 8003e78:	2000301c 	.word	0x2000301c
 8003e7c:	40000400 	.word	0x40000400

08003e80 <MX_USART1_UART_Init>:
{
 8003e80:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8003e82:	480a      	ldr	r0, [pc, #40]	; (8003eac <MX_USART1_UART_Init+0x2c>)
 8003e84:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <MX_USART1_UART_Init+0x30>)
 8003e86:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003e88:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003e8c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e92:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e94:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e96:	220c      	movs	r2, #12
 8003e98:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e9a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e9c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e9e:	f004 fa14 	bl	80082ca <HAL_UART_Init>
 8003ea2:	b900      	cbnz	r0, 8003ea6 <MX_USART1_UART_Init+0x26>
}
 8003ea4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003ea6:	f7ff feef 	bl	8003c88 <Error_Handler>
 8003eaa:	bf00      	nop
 8003eac:	20003104 	.word	0x20003104
 8003eb0:	40011000 	.word	0x40011000

08003eb4 <MX_USART2_UART_Init>:
{
 8003eb4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8003eb6:	480a      	ldr	r0, [pc, #40]	; (8003ee0 <MX_USART2_UART_Init+0x2c>)
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <MX_USART2_UART_Init+0x30>)
 8003eba:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8003ebc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003ec0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ec6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ec8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003eca:	220c      	movs	r2, #12
 8003ecc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ece:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ed0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ed2:	f004 f9fa 	bl	80082ca <HAL_UART_Init>
 8003ed6:	b900      	cbnz	r0, 8003eda <MX_USART2_UART_Init+0x26>
}
 8003ed8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003eda:	f7ff fed5 	bl	8003c88 <Error_Handler>
 8003ede:	bf00      	nop
 8003ee0:	200032c0 	.word	0x200032c0
 8003ee4:	40004400 	.word	0x40004400

08003ee8 <MX_USART6_UART_Init>:
{
 8003ee8:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 8003eea:	480a      	ldr	r0, [pc, #40]	; (8003f14 <MX_USART6_UART_Init+0x2c>)
 8003eec:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <MX_USART6_UART_Init+0x30>)
 8003eee:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 19200;
 8003ef0:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8003ef4:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003efa:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003efc:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003efe:	220c      	movs	r2, #12
 8003f00:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f02:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f04:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003f06:	f004 f9e0 	bl	80082ca <HAL_UART_Init>
 8003f0a:	b900      	cbnz	r0, 8003f0e <MX_USART6_UART_Init+0x26>
}
 8003f0c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003f0e:	f7ff febb 	bl	8003c88 <Error_Handler>
 8003f12:	bf00      	nop
 8003f14:	200031e8 	.word	0x200031e8
 8003f18:	40011400 	.word	0x40011400

08003f1c <MX_TIM2_Init>:
{
 8003f1c:	b500      	push	{lr}
 8003f1e:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f20:	2300      	movs	r3, #0
 8003f22:	9308      	str	r3, [sp, #32]
 8003f24:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	9302      	str	r3, [sp, #8]
 8003f2a:	9303      	str	r3, [sp, #12]
 8003f2c:	9304      	str	r3, [sp, #16]
 8003f2e:	9305      	str	r3, [sp, #20]
 8003f30:	9306      	str	r3, [sp, #24]
 8003f32:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8003f34:	481d      	ldr	r0, [pc, #116]	; (8003fac <MX_TIM2_Init+0x90>)
 8003f36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f3a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8003f3c:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f3e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 8003f40:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f42:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f44:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003f46:	f003 fee8 	bl	8007d1a <HAL_TIM_PWM_Init>
 8003f4a:	bb28      	cbnz	r0, 8003f98 <MX_TIM2_Init+0x7c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f50:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f52:	a908      	add	r1, sp, #32
 8003f54:	4815      	ldr	r0, [pc, #84]	; (8003fac <MX_TIM2_Init+0x90>)
 8003f56:	f003 ffc9 	bl	8007eec <HAL_TIMEx_MasterConfigSynchronization>
 8003f5a:	b9f8      	cbnz	r0, 8003f9c <MX_TIM2_Init+0x80>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f5c:	2360      	movs	r3, #96	; 0x60
 8003f5e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8003f60:	2200      	movs	r2, #0
 8003f62:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f64:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f66:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f68:	a901      	add	r1, sp, #4
 8003f6a:	4810      	ldr	r0, [pc, #64]	; (8003fac <MX_TIM2_Init+0x90>)
 8003f6c:	f003 ff20 	bl	8007db0 <HAL_TIM_PWM_ConfigChannel>
 8003f70:	b9b0      	cbnz	r0, 8003fa0 <MX_TIM2_Init+0x84>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f72:	2204      	movs	r2, #4
 8003f74:	eb0d 0102 	add.w	r1, sp, r2
 8003f78:	480c      	ldr	r0, [pc, #48]	; (8003fac <MX_TIM2_Init+0x90>)
 8003f7a:	f003 ff19 	bl	8007db0 <HAL_TIM_PWM_ConfigChannel>
 8003f7e:	b988      	cbnz	r0, 8003fa4 <MX_TIM2_Init+0x88>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f80:	2208      	movs	r2, #8
 8003f82:	a901      	add	r1, sp, #4
 8003f84:	4809      	ldr	r0, [pc, #36]	; (8003fac <MX_TIM2_Init+0x90>)
 8003f86:	f003 ff13 	bl	8007db0 <HAL_TIM_PWM_ConfigChannel>
 8003f8a:	b968      	cbnz	r0, 8003fa8 <MX_TIM2_Init+0x8c>
  HAL_TIM_MspPostInit(&htim2);
 8003f8c:	4807      	ldr	r0, [pc, #28]	; (8003fac <MX_TIM2_Init+0x90>)
 8003f8e:	f000 fae1 	bl	8004554 <HAL_TIM_MspPostInit>
}
 8003f92:	b00b      	add	sp, #44	; 0x2c
 8003f94:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003f98:	f7ff fe76 	bl	8003c88 <Error_Handler>
    Error_Handler();
 8003f9c:	f7ff fe74 	bl	8003c88 <Error_Handler>
    Error_Handler();
 8003fa0:	f7ff fe72 	bl	8003c88 <Error_Handler>
    Error_Handler();
 8003fa4:	f7ff fe70 	bl	8003c88 <Error_Handler>
    Error_Handler();
 8003fa8:	f7ff fe6e 	bl	8003c88 <Error_Handler>
 8003fac:	20003280 	.word	0x20003280

08003fb0 <MX_ADC1_Init>:
{
 8003fb0:	b500      	push	{lr}
 8003fb2:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	9302      	str	r3, [sp, #8]
 8003fbc:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8003fbe:	4814      	ldr	r0, [pc, #80]	; (8004010 <MX_ADC1_Init+0x60>)
 8003fc0:	4a14      	ldr	r2, [pc, #80]	; (8004014 <MX_ADC1_Init+0x64>)
 8003fc2:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003fc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fc8:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003fca:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003fcc:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003fce:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003fd0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003fd4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003fd6:	4a10      	ldr	r2, [pc, #64]	; (8004018 <MX_ADC1_Init+0x68>)
 8003fd8:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fda:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003fdc:	2201      	movs	r2, #1
 8003fde:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003fe0:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003fe4:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003fe6:	f001 f971 	bl	80052cc <HAL_ADC_Init>
 8003fea:	b968      	cbnz	r0, 8004008 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8003fec:	2312      	movs	r3, #18
 8003fee:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ff8:	4669      	mov	r1, sp
 8003ffa:	4805      	ldr	r0, [pc, #20]	; (8004010 <MX_ADC1_Init+0x60>)
 8003ffc:	f001 f992 	bl	8005324 <HAL_ADC_ConfigChannel>
 8004000:	b920      	cbnz	r0, 800400c <MX_ADC1_Init+0x5c>
}
 8004002:	b005      	add	sp, #20
 8004004:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004008:	f7ff fe3e 	bl	8003c88 <Error_Handler>
    Error_Handler();
 800400c:	f7ff fe3c 	bl	8003c88 <Error_Handler>
 8004010:	2000305c 	.word	0x2000305c
 8004014:	40012000 	.word	0x40012000
 8004018:	0f000001 	.word	0x0f000001

0800401c <MX_RTC_Init>:
{
 800401c:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 800401e:	4809      	ldr	r0, [pc, #36]	; (8004044 <MX_RTC_Init+0x28>)
 8004020:	4b09      	ldr	r3, [pc, #36]	; (8004048 <MX_RTC_Init+0x2c>)
 8004022:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004024:	2300      	movs	r3, #0
 8004026:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004028:	227f      	movs	r2, #127	; 0x7f
 800402a:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800402c:	22ff      	movs	r2, #255	; 0xff
 800402e:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004030:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004032:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004034:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004036:	f003 f858 	bl	80070ea <HAL_RTC_Init>
 800403a:	b900      	cbnz	r0, 800403e <MX_RTC_Init+0x22>
}
 800403c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800403e:	f7ff fe23 	bl	8003c88 <Error_Handler>
 8004042:	bf00      	nop
 8004044:	20003188 	.word	0x20003188
 8004048:	40002800 	.word	0x40002800

0800404c <MX_CRC_Init>:
{
 800404c:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800404e:	4804      	ldr	r0, [pc, #16]	; (8004060 <MX_CRC_Init+0x14>)
 8004050:	4b04      	ldr	r3, [pc, #16]	; (8004064 <MX_CRC_Init+0x18>)
 8004052:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004054:	f001 fa82 	bl	800555c <HAL_CRC_Init>
 8004058:	b900      	cbnz	r0, 800405c <MX_CRC_Init+0x10>
}
 800405a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800405c:	f7ff fe14 	bl	8003c88 <Error_Handler>
 8004060:	20003014 	.word	0x20003014
 8004064:	40023000 	.word	0x40023000

08004068 <MX_TIM11_Init>:
{
 8004068:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 800406a:	4808      	ldr	r0, [pc, #32]	; (800408c <MX_TIM11_Init+0x24>)
 800406c:	4b08      	ldr	r3, [pc, #32]	; (8004090 <MX_TIM11_Init+0x28>)
 800406e:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004074:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 8400 - 1;
 8004076:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800407a:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800407c:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800407e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004080:	f003 fe32 	bl	8007ce8 <HAL_TIM_Base_Init>
 8004084:	b900      	cbnz	r0, 8004088 <MX_TIM11_Init+0x20>
}
 8004086:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004088:	f7ff fdfe 	bl	8003c88 <Error_Handler>
 800408c:	20003144 	.word	0x20003144
 8004090:	40014800 	.word	0x40014800

08004094 <SystemClock_Config>:
{
 8004094:	b500      	push	{lr}
 8004096:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004098:	2230      	movs	r2, #48	; 0x30
 800409a:	2100      	movs	r1, #0
 800409c:	eb0d 0002 	add.w	r0, sp, r2
 80040a0:	f007 fb41 	bl	800b726 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040a4:	2300      	movs	r3, #0
 80040a6:	9307      	str	r3, [sp, #28]
 80040a8:	9308      	str	r3, [sp, #32]
 80040aa:	9309      	str	r3, [sp, #36]	; 0x24
 80040ac:	930a      	str	r3, [sp, #40]	; 0x28
 80040ae:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040b0:	9302      	str	r3, [sp, #8]
 80040b2:	9303      	str	r3, [sp, #12]
 80040b4:	9304      	str	r3, [sp, #16]
 80040b6:	9305      	str	r3, [sp, #20]
 80040b8:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	4a27      	ldr	r2, [pc, #156]	; (800415c <SystemClock_Config+0xc8>)
 80040be:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80040c0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80040c4:	6411      	str	r1, [r2, #64]	; 0x40
 80040c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040c8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80040cc:	9200      	str	r2, [sp, #0]
 80040ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	4a23      	ldr	r2, [pc, #140]	; (8004160 <SystemClock_Config+0xcc>)
 80040d4:	6813      	ldr	r3, [r2, #0]
 80040d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80040da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	6813      	ldr	r3, [r2, #0]
 80040e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80040ea:	2305      	movs	r3, #5
 80040ec:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80040ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040f2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80040f4:	2301      	movs	r3, #1
 80040f6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040f8:	2302      	movs	r3, #2
 80040fa:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004100:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004102:	2219      	movs	r2, #25
 8004104:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004106:	22a8      	movs	r2, #168	; 0xa8
 8004108:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800410a:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800410c:	2304      	movs	r3, #4
 800410e:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004110:	a80c      	add	r0, sp, #48	; 0x30
 8004112:	f002 fbab 	bl	800686c <HAL_RCC_OscConfig>
 8004116:	b9d8      	cbnz	r0, 8004150 <SystemClock_Config+0xbc>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004118:	230f      	movs	r3, #15
 800411a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800411c:	2102      	movs	r1, #2
 800411e:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004120:	2300      	movs	r3, #0
 8004122:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004124:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004128:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800412a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800412c:	a807      	add	r0, sp, #28
 800412e:	f002 fde9 	bl	8006d04 <HAL_RCC_ClockConfig>
 8004132:	b978      	cbnz	r0, 8004154 <SystemClock_Config+0xc0>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004134:	2302      	movs	r3, #2
 8004136:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800413c:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800413e:	a802      	add	r0, sp, #8
 8004140:	f002 fee8 	bl	8006f14 <HAL_RCCEx_PeriphCLKConfig>
 8004144:	b940      	cbnz	r0, 8004158 <SystemClock_Config+0xc4>
  HAL_RCC_EnableCSS();
 8004146:	f002 fd83 	bl	8006c50 <HAL_RCC_EnableCSS>
}
 800414a:	b019      	add	sp, #100	; 0x64
 800414c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004150:	f7ff fd9a 	bl	8003c88 <Error_Handler>
    Error_Handler();
 8004154:	f7ff fd98 	bl	8003c88 <Error_Handler>
    Error_Handler();
 8004158:	f7ff fd96 	bl	8003c88 <Error_Handler>
 800415c:	40023800 	.word	0x40023800
 8004160:	40007000 	.word	0x40007000

08004164 <main>:
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b0b6      	sub	sp, #216	; 0xd8
  HAL_Init();
 8004168:	f000 ffea 	bl	8005140 <HAL_Init>
  SystemClock_Config();
 800416c:	f7ff ff92 	bl	8004094 <SystemClock_Config>
  MX_GPIO_Init();
 8004170:	f7ff fc56 	bl	8003a20 <MX_GPIO_Init>
  MX_DMA_Init();
 8004174:	f7ff fcf8 	bl	8003b68 <MX_DMA_Init>
  MX_I2C1_Init();
 8004178:	f7ff fd88 	bl	8003c8c <MX_I2C1_Init>
  MX_SPI1_Init();
 800417c:	f7ff fda2 	bl	8003cc4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8004180:	f7ff fdc0 	bl	8003d04 <MX_TIM1_Init>
  MX_TIM3_Init();
 8004184:	f7ff fe2a 	bl	8003ddc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004188:	f7ff fe7a 	bl	8003e80 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800418c:	f7ff fe92 	bl	8003eb4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8004190:	f7ff feaa 	bl	8003ee8 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8004194:	f7ff fec2 	bl	8003f1c <MX_TIM2_Init>
  MX_ADC1_Init();
 8004198:	f7ff ff0a 	bl	8003fb0 <MX_ADC1_Init>
  MX_RTC_Init();
 800419c:	f7ff ff3e 	bl	800401c <MX_RTC_Init>
  MX_CRC_Init();
 80041a0:	f7ff ff54 	bl	800404c <MX_CRC_Init>
  MX_TIM11_Init();
 80041a4:	f7ff ff60 	bl	8004068 <MX_TIM11_Init>
  Config_Init(&hi2c1);
 80041a8:	483f      	ldr	r0, [pc, #252]	; (80042a8 <main+0x144>)
 80041aa:	f7fd f869 	bl	8001280 <Config_Init>
  osMutexDef(SPIMutex);
 80041ae:	2500      	movs	r5, #0
 80041b0:	9534      	str	r5, [sp, #208]	; 0xd0
 80041b2:	9535      	str	r5, [sp, #212]	; 0xd4
  SPIMutexHandle = osMutexCreate(osMutex(SPIMutex));
 80041b4:	a834      	add	r0, sp, #208	; 0xd0
 80041b6:	f004 fbbd 	bl	8008934 <osMutexCreate>
 80041ba:	4b3c      	ldr	r3, [pc, #240]	; (80042ac <main+0x148>)
 80041bc:	6018      	str	r0, [r3, #0]
  osTimerDef(Config, ConfigSaveTmr);
 80041be:	4b3c      	ldr	r3, [pc, #240]	; (80042b0 <main+0x14c>)
 80041c0:	9332      	str	r3, [sp, #200]	; 0xc8
 80041c2:	9533      	str	r5, [sp, #204]	; 0xcc
  ConfigHandle = osTimerCreate(osTimer(Config), osTimerOnce, NULL);
 80041c4:	462a      	mov	r2, r5
 80041c6:	4629      	mov	r1, r5
 80041c8:	a832      	add	r0, sp, #200	; 0xc8
 80041ca:	f004 fb91 	bl	80088f0 <osTimerCreate>
 80041ce:	4b39      	ldr	r3, [pc, #228]	; (80042b4 <main+0x150>)
 80041d0:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80041d2:	4c39      	ldr	r4, [pc, #228]	; (80042b8 <main+0x154>)
 80041d4:	ae2b      	add	r6, sp, #172	; 0xac
 80041d6:	4627      	mov	r7, r4
 80041d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80041da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80041dc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80041e0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80041e4:	4629      	mov	r1, r5
 80041e6:	a82b      	add	r0, sp, #172	; 0xac
 80041e8:	f004 fb43 	bl	8008872 <osThreadCreate>
 80041ec:	4b33      	ldr	r3, [pc, #204]	; (80042bc <main+0x158>)
 80041ee:	6018      	str	r0, [r3, #0]
  osThreadDef(PowerRegulation, RegulationTask, osPriorityRealtime, 0, 256);
 80041f0:	ae24      	add	r6, sp, #144	; 0x90
 80041f2:	f104 071c 	add.w	r7, r4, #28
 80041f6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80041f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80041fa:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80041fe:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  PowerRegulationHandle = osThreadCreate(osThread(PowerRegulation), NULL);
 8004202:	4629      	mov	r1, r5
 8004204:	a824      	add	r0, sp, #144	; 0x90
 8004206:	f004 fb34 	bl	8008872 <osThreadCreate>
 800420a:	4b2d      	ldr	r3, [pc, #180]	; (80042c0 <main+0x15c>)
 800420c:	6018      	str	r0, [r3, #0]
  osThreadDef(Diplays, DisplayTask, osPriorityNormal, 0, 256);
 800420e:	ae1d      	add	r6, sp, #116	; 0x74
 8004210:	f104 0738 	add.w	r7, r4, #56	; 0x38
 8004214:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004216:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004218:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800421c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DiplaysHandle = osThreadCreate(osThread(Diplays), NULL);
 8004220:	4629      	mov	r1, r5
 8004222:	a81d      	add	r0, sp, #116	; 0x74
 8004224:	f004 fb25 	bl	8008872 <osThreadCreate>
 8004228:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <main+0x160>)
 800422a:	6018      	str	r0, [r3, #0]
  osThreadDef(Test, TestTask, osPriorityLow, 0, 128);
 800422c:	ae16      	add	r6, sp, #88	; 0x58
 800422e:	f104 0754 	add.w	r7, r4, #84	; 0x54
 8004232:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004234:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004236:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800423a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TestHandle = osThreadCreate(osThread(Test), NULL);
 800423e:	4629      	mov	r1, r5
 8004240:	a816      	add	r0, sp, #88	; 0x58
 8004242:	f004 fb16 	bl	8008872 <osThreadCreate>
 8004246:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <main+0x164>)
 8004248:	6018      	str	r0, [r3, #0]
  osThreadDef(Ethernet, EthernetTask, osPriorityHigh, 0, 256);
 800424a:	ae0f      	add	r6, sp, #60	; 0x3c
 800424c:	f104 0770 	add.w	r7, r4, #112	; 0x70
 8004250:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004252:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004254:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004258:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  EthernetHandle = osThreadCreate(osThread(Ethernet), NULL);
 800425c:	4629      	mov	r1, r5
 800425e:	a80f      	add	r0, sp, #60	; 0x3c
 8004260:	f004 fb07 	bl	8008872 <osThreadCreate>
 8004264:	4b19      	ldr	r3, [pc, #100]	; (80042cc <main+0x168>)
 8004266:	6018      	str	r0, [r3, #0]
  osThreadDef(nRF24L01, RadioTask, osPriorityAboveNormal, 0, 256);
 8004268:	ae08      	add	r6, sp, #32
 800426a:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 800426e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004270:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004272:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004276:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  nRF24L01Handle = osThreadCreate(osThread(nRF24L01), NULL);
 800427a:	4629      	mov	r1, r5
 800427c:	a808      	add	r0, sp, #32
 800427e:	f004 faf8 	bl	8008872 <osThreadCreate>
 8004282:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <main+0x16c>)
 8004284:	6018      	str	r0, [r3, #0]
  osThreadDef(DataLog, DataLogTask, osPriorityBelowNormal, 0, 256);
 8004286:	ae01      	add	r6, sp, #4
 8004288:	34a8      	adds	r4, #168	; 0xa8
 800428a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800428c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800428e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004292:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DataLogHandle = osThreadCreate(osThread(DataLog), NULL);
 8004296:	4629      	mov	r1, r5
 8004298:	a801      	add	r0, sp, #4
 800429a:	f004 faea 	bl	8008872 <osThreadCreate>
 800429e:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <main+0x170>)
 80042a0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80042a2:	f004 fae1 	bl	8008868 <osKernelStart>
 80042a6:	e7fe      	b.n	80042a6 <main+0x142>
 80042a8:	20002fc0 	.word	0x20002fc0
 80042ac:	20003304 	.word	0x20003304
 80042b0:	08003a1d 	.word	0x08003a1d
 80042b4:	20002fbc 	.word	0x20002fbc
 80042b8:	0800bf98 	.word	0x0800bf98
 80042bc:	20002ef4 	.word	0x20002ef4
 80042c0:	20002fb8 	.word	0x20002fb8
 80042c4:	20003300 	.word	0x20003300
 80042c8:	20003184 	.word	0x20003184
 80042cc:	2000330c 	.word	0x2000330c
 80042d0:	20002eec 	.word	0x20002eec
 80042d4:	20002ef0 	.word	0x20002ef0

080042d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042d8:	b500      	push	{lr}
 80042da:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042dc:	2200      	movs	r2, #0
 80042de:	9200      	str	r2, [sp, #0]
 80042e0:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <HAL_MspInit+0x40>)
 80042e2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80042e4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80042e8:	6459      	str	r1, [r3, #68]	; 0x44
 80042ea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80042ec:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80042f0:	9100      	str	r1, [sp, #0]
 80042f2:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042f4:	9201      	str	r2, [sp, #4]
 80042f6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042f8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80042fc:	6419      	str	r1, [r3, #64]	; 0x40
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004308:	210f      	movs	r1, #15
 800430a:	f06f 0001 	mvn.w	r0, #1
 800430e:	f001 f8e3 	bl	80054d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004312:	b003      	add	sp, #12
 8004314:	f85d fb04 	ldr.w	pc, [sp], #4
 8004318:	40023800 	.word	0x40023800

0800431c <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 800431c:	6802      	ldr	r2, [r0, #0]
 800431e:	4b09      	ldr	r3, [pc, #36]	; (8004344 <HAL_ADC_MspInit+0x28>)
 8004320:	429a      	cmp	r2, r3
 8004322:	d000      	beq.n	8004326 <HAL_ADC_MspInit+0xa>
 8004324:	4770      	bx	lr
{
 8004326:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004328:	2300      	movs	r3, #0
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	4b06      	ldr	r3, [pc, #24]	; (8004348 <HAL_ADC_MspInit+0x2c>)
 800432e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004334:	645a      	str	r2, [r3, #68]	; 0x44
 8004336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004340:	b002      	add	sp, #8
 8004342:	4770      	bx	lr
 8004344:	40012000 	.word	0x40012000
 8004348:	40023800 	.word	0x40023800

0800434c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800434c:	6802      	ldr	r2, [r0, #0]
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <HAL_CRC_MspInit+0x28>)
 8004350:	429a      	cmp	r2, r3
 8004352:	d000      	beq.n	8004356 <HAL_CRC_MspInit+0xa>
 8004354:	4770      	bx	lr
{
 8004356:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004358:	2300      	movs	r3, #0
 800435a:	9301      	str	r3, [sp, #4]
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_CRC_MspInit+0x2c>)
 800435e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004360:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004364:	631a      	str	r2, [r3, #48]	; 0x30
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004370:	b002      	add	sp, #8
 8004372:	4770      	bx	lr
 8004374:	40023000 	.word	0x40023000
 8004378:	40023800 	.word	0x40023800

0800437c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800437c:	b530      	push	{r4, r5, lr}
 800437e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004380:	2300      	movs	r3, #0
 8004382:	9303      	str	r3, [sp, #12]
 8004384:	9304      	str	r3, [sp, #16]
 8004386:	9305      	str	r3, [sp, #20]
 8004388:	9306      	str	r3, [sp, #24]
 800438a:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 800438c:	6802      	ldr	r2, [r0, #0]
 800438e:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <HAL_I2C_MspInit+0x68>)
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004394:	b009      	add	sp, #36	; 0x24
 8004396:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004398:	2500      	movs	r5, #0
 800439a:	9501      	str	r5, [sp, #4]
 800439c:	4c12      	ldr	r4, [pc, #72]	; (80043e8 <HAL_I2C_MspInit+0x6c>)
 800439e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80043a0:	f043 0302 	orr.w	r3, r3, #2
 80043a4:	6323      	str	r3, [r4, #48]	; 0x30
 80043a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80043b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043b6:	2312      	movs	r3, #18
 80043b8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043ba:	2301      	movs	r3, #1
 80043bc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043be:	2303      	movs	r3, #3
 80043c0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80043c2:	2304      	movs	r3, #4
 80043c4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043c6:	a903      	add	r1, sp, #12
 80043c8:	4808      	ldr	r0, [pc, #32]	; (80043ec <HAL_I2C_MspInit+0x70>)
 80043ca:	f001 fb53 	bl	8005a74 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80043ce:	9502      	str	r5, [sp, #8]
 80043d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043d6:	6423      	str	r3, [r4, #64]	; 0x40
 80043d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043de:	9302      	str	r3, [sp, #8]
 80043e0:	9b02      	ldr	r3, [sp, #8]
}
 80043e2:	e7d7      	b.n	8004394 <HAL_I2C_MspInit+0x18>
 80043e4:	40005400 	.word	0x40005400
 80043e8:	40023800 	.word	0x40023800
 80043ec:	40020400 	.word	0x40020400

080043f0 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80043f0:	6802      	ldr	r2, [r0, #0]
 80043f2:	4b04      	ldr	r3, [pc, #16]	; (8004404 <HAL_RTC_MspInit+0x14>)
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d000      	beq.n	80043fa <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80043f8:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 80043fa:	4b03      	ldr	r3, [pc, #12]	; (8004408 <HAL_RTC_MspInit+0x18>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
}
 8004400:	e7fa      	b.n	80043f8 <HAL_RTC_MspInit+0x8>
 8004402:	bf00      	nop
 8004404:	40002800 	.word	0x40002800
 8004408:	42470e3c 	.word	0x42470e3c

0800440c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800440c:	b500      	push	{lr}
 800440e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004410:	2300      	movs	r3, #0
 8004412:	9303      	str	r3, [sp, #12]
 8004414:	9304      	str	r3, [sp, #16]
 8004416:	9305      	str	r3, [sp, #20]
 8004418:	9306      	str	r3, [sp, #24]
 800441a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 800441c:	6802      	ldr	r2, [r0, #0]
 800441e:	4b15      	ldr	r3, [pc, #84]	; (8004474 <HAL_SPI_MspInit+0x68>)
 8004420:	429a      	cmp	r2, r3
 8004422:	d002      	beq.n	800442a <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004424:	b009      	add	sp, #36	; 0x24
 8004426:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 800442a:	2100      	movs	r1, #0
 800442c:	9101      	str	r1, [sp, #4]
 800442e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8004432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004434:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004438:	645a      	str	r2, [r3, #68]	; 0x44
 800443a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800443c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004440:	9201      	str	r2, [sp, #4]
 8004442:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004444:	9102      	str	r1, [sp, #8]
 8004446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	9302      	str	r3, [sp, #8]
 8004456:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004458:	23e0      	movs	r3, #224	; 0xe0
 800445a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445c:	2302      	movs	r3, #2
 800445e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004460:	2303      	movs	r3, #3
 8004462:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004464:	2305      	movs	r3, #5
 8004466:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004468:	a903      	add	r1, sp, #12
 800446a:	4803      	ldr	r0, [pc, #12]	; (8004478 <HAL_SPI_MspInit+0x6c>)
 800446c:	f001 fb02 	bl	8005a74 <HAL_GPIO_Init>
}
 8004470:	e7d8      	b.n	8004424 <HAL_SPI_MspInit+0x18>
 8004472:	bf00      	nop
 8004474:	40013000 	.word	0x40013000
 8004478:	40020000 	.word	0x40020000

0800447c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800447c:	b510      	push	{r4, lr}
 800447e:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 8004480:	6803      	ldr	r3, [r0, #0]
 8004482:	4a21      	ldr	r2, [pc, #132]	; (8004508 <HAL_TIM_PWM_MspInit+0x8c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d007      	beq.n	8004498 <HAL_TIM_PWM_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 8004488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448c:	d021      	beq.n	80044d2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 800448e:	4a1f      	ldr	r2, [pc, #124]	; (800450c <HAL_TIM_PWM_MspInit+0x90>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d02b      	beq.n	80044ec <HAL_TIM_PWM_MspInit+0x70>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004494:	b004      	add	sp, #16
 8004496:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004498:	2400      	movs	r4, #0
 800449a:	9401      	str	r4, [sp, #4]
 800449c:	4b1c      	ldr	r3, [pc, #112]	; (8004510 <HAL_TIM_PWM_MspInit+0x94>)
 800449e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	645a      	str	r2, [r3, #68]	; 0x44
 80044a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80044b0:	4622      	mov	r2, r4
 80044b2:	4621      	mov	r1, r4
 80044b4:	2019      	movs	r0, #25
 80044b6:	f001 f80f 	bl	80054d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80044ba:	2019      	movs	r0, #25
 80044bc:	f001 f840 	bl	8005540 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80044c0:	4622      	mov	r2, r4
 80044c2:	2105      	movs	r1, #5
 80044c4:	201a      	movs	r0, #26
 80044c6:	f001 f807 	bl	80054d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80044ca:	201a      	movs	r0, #26
 80044cc:	f001 f838 	bl	8005540 <HAL_NVIC_EnableIRQ>
 80044d0:	e7e0      	b.n	8004494 <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	9302      	str	r3, [sp, #8]
 80044d6:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <HAL_TIM_PWM_MspInit+0x94>)
 80044d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	641a      	str	r2, [r3, #64]	; 0x40
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	9302      	str	r3, [sp, #8]
 80044e8:	9b02      	ldr	r3, [sp, #8]
 80044ea:	e7d3      	b.n	8004494 <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044ec:	2300      	movs	r3, #0
 80044ee:	9303      	str	r3, [sp, #12]
 80044f0:	4b07      	ldr	r3, [pc, #28]	; (8004510 <HAL_TIM_PWM_MspInit+0x94>)
 80044f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f4:	f042 0202 	orr.w	r2, r2, #2
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	9303      	str	r3, [sp, #12]
 8004502:	9b03      	ldr	r3, [sp, #12]
}
 8004504:	e7c6      	b.n	8004494 <HAL_TIM_PWM_MspInit+0x18>
 8004506:	bf00      	nop
 8004508:	40010000 	.word	0x40010000
 800450c:	40000400 	.word	0x40000400
 8004510:	40023800 	.word	0x40023800

08004514 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 8004514:	6802      	ldr	r2, [r0, #0]
 8004516:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <HAL_TIM_Base_MspInit+0x3c>)
 8004518:	429a      	cmp	r2, r3
 800451a:	d000      	beq.n	800451e <HAL_TIM_Base_MspInit+0xa>
 800451c:	4770      	bx	lr
{
 800451e:	b500      	push	{lr}
 8004520:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004522:	2200      	movs	r2, #0
 8004524:	9201      	str	r2, [sp, #4]
 8004526:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 800452a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800452c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8004530:	6459      	str	r1, [r3, #68]	; 0x44
 8004532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	9b01      	ldr	r3, [sp, #4]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800453c:	2105      	movs	r1, #5
 800453e:	201a      	movs	r0, #26
 8004540:	f000 ffca 	bl	80054d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004544:	201a      	movs	r0, #26
 8004546:	f000 fffb 	bl	8005540 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800454a:	b003      	add	sp, #12
 800454c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004550:	40014800 	.word	0x40014800

08004554 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004554:	b570      	push	{r4, r5, r6, lr}
 8004556:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004558:	2300      	movs	r3, #0
 800455a:	9305      	str	r3, [sp, #20]
 800455c:	9306      	str	r3, [sp, #24]
 800455e:	9307      	str	r3, [sp, #28]
 8004560:	9308      	str	r3, [sp, #32]
 8004562:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim->Instance==TIM1)
 8004564:	6803      	ldr	r3, [r0, #0]
 8004566:	4a32      	ldr	r2, [pc, #200]	; (8004630 <HAL_TIM_MspPostInit+0xdc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d007      	beq.n	800457c <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 800456c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004570:	d01c      	beq.n	80045ac <HAL_TIM_MspPostInit+0x58>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8004572:	4a30      	ldr	r2, [pc, #192]	; (8004634 <HAL_TIM_MspPostInit+0xe0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d045      	beq.n	8004604 <HAL_TIM_MspPostInit+0xb0>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004578:	b00a      	add	sp, #40	; 0x28
 800457a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800457c:	2300      	movs	r3, #0
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	4b2d      	ldr	r3, [pc, #180]	; (8004638 <HAL_TIM_MspPostInit+0xe4>)
 8004582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	631a      	str	r2, [r3, #48]	; 0x30
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	9301      	str	r3, [sp, #4]
 8004592:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004594:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004598:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459a:	2302      	movs	r3, #2
 800459c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800459e:	2301      	movs	r3, #1
 80045a0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a2:	a905      	add	r1, sp, #20
 80045a4:	4825      	ldr	r0, [pc, #148]	; (800463c <HAL_TIM_MspPostInit+0xe8>)
 80045a6:	f001 fa65 	bl	8005a74 <HAL_GPIO_Init>
 80045aa:	e7e5      	b.n	8004578 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ac:	2400      	movs	r4, #0
 80045ae:	9402      	str	r4, [sp, #8]
 80045b0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80045b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
 80045bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045be:	f002 0201 	and.w	r2, r2, #1
 80045c2:	9202      	str	r2, [sp, #8]
 80045c4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045c6:	9403      	str	r4, [sp, #12]
 80045c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ca:	f042 0202 	orr.w	r2, r2, #2
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	9303      	str	r3, [sp, #12]
 80045d8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80045da:	2501      	movs	r5, #1
 80045dc:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045de:	2602      	movs	r6, #2
 80045e0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80045e2:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e4:	a905      	add	r1, sp, #20
 80045e6:	4815      	ldr	r0, [pc, #84]	; (800463c <HAL_TIM_MspPostInit+0xe8>)
 80045e8:	f001 fa44 	bl	8005a74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80045ec:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80045f0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80045f8:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045fa:	a905      	add	r1, sp, #20
 80045fc:	4810      	ldr	r0, [pc, #64]	; (8004640 <HAL_TIM_MspPostInit+0xec>)
 80045fe:	f001 fa39 	bl	8005a74 <HAL_GPIO_Init>
 8004602:	e7b9      	b.n	8004578 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004604:	2300      	movs	r3, #0
 8004606:	9304      	str	r3, [sp, #16]
 8004608:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_TIM_MspPostInit+0xe4>)
 800460a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800460c:	f042 0202 	orr.w	r2, r2, #2
 8004610:	631a      	str	r2, [r3, #48]	; 0x30
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	9304      	str	r3, [sp, #16]
 800461a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 800461c:	2331      	movs	r3, #49	; 0x31
 800461e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004620:	2302      	movs	r3, #2
 8004622:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004624:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004626:	a905      	add	r1, sp, #20
 8004628:	4805      	ldr	r0, [pc, #20]	; (8004640 <HAL_TIM_MspPostInit+0xec>)
 800462a:	f001 fa23 	bl	8005a74 <HAL_GPIO_Init>
}
 800462e:	e7a3      	b.n	8004578 <HAL_TIM_MspPostInit+0x24>
 8004630:	40010000 	.word	0x40010000
 8004634:	40000400 	.word	0x40000400
 8004638:	40023800 	.word	0x40023800
 800463c:	40020000 	.word	0x40020000
 8004640:	40020400 	.word	0x40020400

08004644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004644:	b530      	push	{r4, r5, lr}
 8004646:	b08d      	sub	sp, #52	; 0x34
 8004648:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800464a:	2300      	movs	r3, #0
 800464c:	9307      	str	r3, [sp, #28]
 800464e:	9308      	str	r3, [sp, #32]
 8004650:	9309      	str	r3, [sp, #36]	; 0x24
 8004652:	930a      	str	r3, [sp, #40]	; 0x28
 8004654:	930b      	str	r3, [sp, #44]	; 0x2c
  if(huart->Instance==USART1)
 8004656:	6803      	ldr	r3, [r0, #0]
 8004658:	4a6e      	ldr	r2, [pc, #440]	; (8004814 <HAL_UART_MspInit+0x1d0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d008      	beq.n	8004670 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800465e:	4a6e      	ldr	r2, [pc, #440]	; (8004818 <HAL_UART_MspInit+0x1d4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d04b      	beq.n	80046fc <HAL_UART_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8004664:	4a6d      	ldr	r2, [pc, #436]	; (800481c <HAL_UART_MspInit+0x1d8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	f000 808c 	beq.w	8004784 <HAL_UART_MspInit+0x140>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800466c:	b00d      	add	sp, #52	; 0x34
 800466e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004670:	2500      	movs	r5, #0
 8004672:	9501      	str	r5, [sp, #4]
 8004674:	4b6a      	ldr	r3, [pc, #424]	; (8004820 <HAL_UART_MspInit+0x1dc>)
 8004676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004678:	f042 0210 	orr.w	r2, r2, #16
 800467c:	645a      	str	r2, [r3, #68]	; 0x44
 800467e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004680:	f002 0210 	and.w	r2, r2, #16
 8004684:	9201      	str	r2, [sp, #4]
 8004686:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004688:	9502      	str	r5, [sp, #8]
 800468a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800468c:	f042 0202 	orr.w	r2, r2, #2
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	9302      	str	r3, [sp, #8]
 800469a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800469c:	23c0      	movs	r3, #192	; 0xc0
 800469e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a0:	2302      	movs	r3, #2
 80046a2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a4:	2303      	movs	r3, #3
 80046a6:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046a8:	2307      	movs	r3, #7
 80046aa:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ac:	a907      	add	r1, sp, #28
 80046ae:	485d      	ldr	r0, [pc, #372]	; (8004824 <HAL_UART_MspInit+0x1e0>)
 80046b0:	f001 f9e0 	bl	8005a74 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80046b4:	485c      	ldr	r0, [pc, #368]	; (8004828 <HAL_UART_MspInit+0x1e4>)
 80046b6:	4b5d      	ldr	r3, [pc, #372]	; (800482c <HAL_UART_MspInit+0x1e8>)
 80046b8:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80046ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046be:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046c0:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046c2:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046c8:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046ca:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046cc:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80046ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046d2:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80046d4:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046d6:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80046d8:	f000 ffe4 	bl	80056a4 <HAL_DMA_Init>
 80046dc:	b958      	cbnz	r0, 80046f6 <HAL_UART_MspInit+0xb2>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80046de:	4b52      	ldr	r3, [pc, #328]	; (8004828 <HAL_UART_MspInit+0x1e4>)
 80046e0:	6363      	str	r3, [r4, #52]	; 0x34
 80046e2:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80046e4:	2200      	movs	r2, #0
 80046e6:	2105      	movs	r1, #5
 80046e8:	2025      	movs	r0, #37	; 0x25
 80046ea:	f000 fef5 	bl	80054d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80046ee:	2025      	movs	r0, #37	; 0x25
 80046f0:	f000 ff26 	bl	8005540 <HAL_NVIC_EnableIRQ>
 80046f4:	e7ba      	b.n	800466c <HAL_UART_MspInit+0x28>
      Error_Handler();
 80046f6:	f7ff fac7 	bl	8003c88 <Error_Handler>
 80046fa:	e7f0      	b.n	80046de <HAL_UART_MspInit+0x9a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80046fc:	2500      	movs	r5, #0
 80046fe:	9503      	str	r5, [sp, #12]
 8004700:	4b47      	ldr	r3, [pc, #284]	; (8004820 <HAL_UART_MspInit+0x1dc>)
 8004702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004704:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
 800470a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800470c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004710:	9203      	str	r2, [sp, #12]
 8004712:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004714:	9504      	str	r5, [sp, #16]
 8004716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	9304      	str	r3, [sp, #16]
 8004726:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004728:	230c      	movs	r3, #12
 800472a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472c:	2302      	movs	r3, #2
 800472e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004730:	2303      	movs	r3, #3
 8004732:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004734:	2307      	movs	r3, #7
 8004736:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004738:	a907      	add	r1, sp, #28
 800473a:	483d      	ldr	r0, [pc, #244]	; (8004830 <HAL_UART_MspInit+0x1ec>)
 800473c:	f001 f99a 	bl	8005a74 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004740:	483c      	ldr	r0, [pc, #240]	; (8004834 <HAL_UART_MspInit+0x1f0>)
 8004742:	4b3d      	ldr	r3, [pc, #244]	; (8004838 <HAL_UART_MspInit+0x1f4>)
 8004744:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004746:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800474a:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800474c:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800474e:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004754:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004756:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004758:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800475a:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800475c:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800475e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004760:	f000 ffa0 	bl	80056a4 <HAL_DMA_Init>
 8004764:	b958      	cbnz	r0, 800477e <HAL_UART_MspInit+0x13a>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004766:	4b33      	ldr	r3, [pc, #204]	; (8004834 <HAL_UART_MspInit+0x1f0>)
 8004768:	6363      	str	r3, [r4, #52]	; 0x34
 800476a:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800476c:	2200      	movs	r2, #0
 800476e:	2105      	movs	r1, #5
 8004770:	2026      	movs	r0, #38	; 0x26
 8004772:	f000 feb1 	bl	80054d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004776:	2026      	movs	r0, #38	; 0x26
 8004778:	f000 fee2 	bl	8005540 <HAL_NVIC_EnableIRQ>
 800477c:	e776      	b.n	800466c <HAL_UART_MspInit+0x28>
      Error_Handler();
 800477e:	f7ff fa83 	bl	8003c88 <Error_Handler>
 8004782:	e7f0      	b.n	8004766 <HAL_UART_MspInit+0x122>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004784:	2500      	movs	r5, #0
 8004786:	9505      	str	r5, [sp, #20]
 8004788:	4b25      	ldr	r3, [pc, #148]	; (8004820 <HAL_UART_MspInit+0x1dc>)
 800478a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800478c:	f042 0220 	orr.w	r2, r2, #32
 8004790:	645a      	str	r2, [r3, #68]	; 0x44
 8004792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004794:	f002 0220 	and.w	r2, r2, #32
 8004798:	9205      	str	r2, [sp, #20]
 800479a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800479c:	9506      	str	r5, [sp, #24]
 800479e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a0:	f042 0201 	orr.w	r2, r2, #1
 80047a4:	631a      	str	r2, [r3, #48]	; 0x30
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	9306      	str	r3, [sp, #24]
 80047ae:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80047b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80047b4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b6:	2302      	movs	r3, #2
 80047b8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ba:	2303      	movs	r3, #3
 80047bc:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80047be:	2308      	movs	r3, #8
 80047c0:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047c2:	a907      	add	r1, sp, #28
 80047c4:	481a      	ldr	r0, [pc, #104]	; (8004830 <HAL_UART_MspInit+0x1ec>)
 80047c6:	f001 f955 	bl	8005a74 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80047ca:	481c      	ldr	r0, [pc, #112]	; (800483c <HAL_UART_MspInit+0x1f8>)
 80047cc:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <HAL_UART_MspInit+0x1fc>)
 80047ce:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80047d0:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 80047d4:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047d6:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047d8:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047de:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047e0:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047e2:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80047e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047e8:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047ea:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047ec:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80047ee:	f000 ff59 	bl	80056a4 <HAL_DMA_Init>
 80047f2:	b958      	cbnz	r0, 800480c <HAL_UART_MspInit+0x1c8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80047f4:	4b11      	ldr	r3, [pc, #68]	; (800483c <HAL_UART_MspInit+0x1f8>)
 80047f6:	6363      	str	r3, [r4, #52]	; 0x34
 80047f8:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80047fa:	2200      	movs	r2, #0
 80047fc:	2105      	movs	r1, #5
 80047fe:	2047      	movs	r0, #71	; 0x47
 8004800:	f000 fe6a 	bl	80054d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004804:	2047      	movs	r0, #71	; 0x47
 8004806:	f000 fe9b 	bl	8005540 <HAL_NVIC_EnableIRQ>
}
 800480a:	e72f      	b.n	800466c <HAL_UART_MspInit+0x28>
      Error_Handler();
 800480c:	f7ff fa3c 	bl	8003c88 <Error_Handler>
 8004810:	e7f0      	b.n	80047f4 <HAL_UART_MspInit+0x1b0>
 8004812:	bf00      	nop
 8004814:	40011000 	.word	0x40011000
 8004818:	40004400 	.word	0x40004400
 800481c:	40011400 	.word	0x40011400
 8004820:	40023800 	.word	0x40023800
 8004824:	40020400 	.word	0x40020400
 8004828:	200030a4 	.word	0x200030a4
 800482c:	40026440 	.word	0x40026440
 8004830:	40020000 	.word	0x40020000
 8004834:	20002ef8 	.word	0x20002ef8
 8004838:	40026088 	.word	0x40026088
 800483c:	20002f58 	.word	0x20002f58
 8004840:	40026428 	.word	0x40026428

08004844 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004844:	b510      	push	{r4, lr}
 8004846:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004848:	2200      	movs	r2, #0
 800484a:	4601      	mov	r1, r0
 800484c:	2019      	movs	r0, #25
 800484e:	f000 fe43 	bl	80054d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8004852:	2019      	movs	r0, #25
 8004854:	f000 fe74 	bl	8005540 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8004858:	2400      	movs	r4, #0
 800485a:	9401      	str	r4, [sp, #4]
 800485c:	4b13      	ldr	r3, [pc, #76]	; (80048ac <HAL_InitTick+0x68>)
 800485e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004860:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004864:	645a      	str	r2, [r3, #68]	; 0x44
 8004866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486c:	9301      	str	r3, [sp, #4]
 800486e:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004870:	a902      	add	r1, sp, #8
 8004872:	a803      	add	r0, sp, #12
 8004874:	f002 fb1c 	bl	8006eb0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004878:	f002 fb0a 	bl	8006e90 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800487c:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <HAL_InitTick+0x6c>)
 800487e:	fba3 2300 	umull	r2, r3, r3, r0
 8004882:	0c9b      	lsrs	r3, r3, #18
 8004884:	3b01      	subs	r3, #1
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8004886:	480b      	ldr	r0, [pc, #44]	; (80048b4 <HAL_InitTick+0x70>)
 8004888:	4a0b      	ldr	r2, [pc, #44]	; (80048b8 <HAL_InitTick+0x74>)
 800488a:	6002      	str	r2, [r0, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 800488c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004890:	60c2      	str	r2, [r0, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8004892:	6043      	str	r3, [r0, #4]
  htim10.Init.ClockDivision = 0;
 8004894:	6104      	str	r4, [r0, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004896:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8004898:	f003 fa26 	bl	8007ce8 <HAL_TIM_Base_Init>
 800489c:	b110      	cbz	r0, 80048a4 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800489e:	2001      	movs	r0, #1
}
 80048a0:	b008      	add	sp, #32
 80048a2:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim10);
 80048a4:	4803      	ldr	r0, [pc, #12]	; (80048b4 <HAL_InitTick+0x70>)
 80048a6:	f003 f8ff 	bl	8007aa8 <HAL_TIM_Base_Start_IT>
 80048aa:	e7f9      	b.n	80048a0 <HAL_InitTick+0x5c>
 80048ac:	40023800 	.word	0x40023800
 80048b0:	431bde83 	.word	0x431bde83
 80048b4:	20003310 	.word	0x20003310
 80048b8:	40014400 	.word	0x40014400

080048bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80048be:	f002 fb17 	bl	8006ef0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80048c2:	bd08      	pop	{r3, pc}

080048c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048c4:	e7fe      	b.n	80048c4 <HardFault_Handler>

080048c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048c6:	e7fe      	b.n	80048c6 <MemManage_Handler>

080048c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048c8:	e7fe      	b.n	80048c8 <BusFault_Handler>

080048ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048ca:	e7fe      	b.n	80048ca <UsageFault_Handler>

080048cc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048cc:	4770      	bx	lr

080048ce <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80048ce:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80048d0:	2002      	movs	r0, #2
 80048d2:	f001 f9af 	bl	8005c34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80048d6:	bd08      	pop	{r3, pc}

080048d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80048d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80048da:	4802      	ldr	r0, [pc, #8]	; (80048e4 <DMA1_Stream5_IRQHandler+0xc>)
 80048dc:	f000 ffda 	bl	8005894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80048e0:	bd08      	pop	{r3, pc}
 80048e2:	bf00      	nop
 80048e4:	20002ef8 	.word	0x20002ef8

080048e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80048e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048ea:	4803      	ldr	r0, [pc, #12]	; (80048f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80048ec:	f003 f8f1 	bl	8007ad2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80048f0:	4802      	ldr	r0, [pc, #8]	; (80048fc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80048f2:	f003 f8ee 	bl	8007ad2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80048f6:	bd08      	pop	{r3, pc}
 80048f8:	200031a8 	.word	0x200031a8
 80048fc:	20003310 	.word	0x20003310

08004900 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004900:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004902:	4803      	ldr	r0, [pc, #12]	; (8004910 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004904:	f003 f8e5 	bl	8007ad2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004908:	4802      	ldr	r0, [pc, #8]	; (8004914 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800490a:	f003 f8e2 	bl	8007ad2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800490e:	bd08      	pop	{r3, pc}
 8004910:	200031a8 	.word	0x200031a8
 8004914:	20003144 	.word	0x20003144

08004918 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004918:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_small_comm);
 800491a:	4802      	ldr	r0, [pc, #8]	; (8004924 <USART1_IRQHandler+0xc>)
 800491c:	f7fe fff0 	bl	8003900 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004920:	bd08      	pop	{r3, pc}
 8004922:	bf00      	nop
 8004924:	20002bec 	.word	0x20002bec

08004928 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004928:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800492a:	4802      	ldr	r0, [pc, #8]	; (8004934 <USART2_IRQHandler+0xc>)
 800492c:	f003 feba 	bl	80086a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004930:	bd08      	pop	{r3, pc}
 8004932:	bf00      	nop
 8004934:	200032c0 	.word	0x200032c0

08004938 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004938:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800493a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800493e:	f001 f979 	bl	8005c34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004942:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004946:	f001 f975 	bl	8005c34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800494a:	bd08      	pop	{r3, pc}

0800494c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800494c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_big_comm);
 800494e:	4802      	ldr	r0, [pc, #8]	; (8004958 <DMA2_Stream1_IRQHandler+0xc>)
 8004950:	f7fe ffec 	bl	800392c <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004954:	bd08      	pop	{r3, pc}
 8004956:	bf00      	nop
 8004958:	20002b38 	.word	0x20002b38

0800495c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800495c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_small_comm);
 800495e:	4802      	ldr	r0, [pc, #8]	; (8004968 <DMA2_Stream2_IRQHandler+0xc>)
 8004960:	f7fe ffe4 	bl	800392c <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004964:	bd08      	pop	{r3, pc}
 8004966:	bf00      	nop
 8004968:	20002bec 	.word	0x20002bec

0800496c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800496c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_big_comm);
 800496e:	4802      	ldr	r0, [pc, #8]	; (8004978 <USART6_IRQHandler+0xc>)
 8004970:	f7fe ffc6 	bl	8003900 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004974:	bd08      	pop	{r3, pc}
 8004976:	bf00      	nop
 8004978:	20002b38 	.word	0x20002b38

0800497c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800497c:	b508      	push	{r3, lr}
 800497e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004980:	4a0b      	ldr	r2, [pc, #44]	; (80049b0 <_sbrk+0x34>)
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	b142      	cbz	r2, 8004998 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8004986:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <_sbrk+0x34>)
 8004988:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800498a:	4403      	add	r3, r0
 800498c:	466a      	mov	r2, sp
 800498e:	4293      	cmp	r3, r2
 8004990:	d806      	bhi.n	80049a0 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8004992:	4a07      	ldr	r2, [pc, #28]	; (80049b0 <_sbrk+0x34>)
 8004994:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8004996:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8004998:	4a05      	ldr	r2, [pc, #20]	; (80049b0 <_sbrk+0x34>)
 800499a:	4906      	ldr	r1, [pc, #24]	; (80049b4 <_sbrk+0x38>)
 800499c:	6011      	str	r1, [r2, #0]
 800499e:	e7f2      	b.n	8004986 <_sbrk+0xa>
		errno = ENOMEM;
 80049a0:	f006 fe8c 	bl	800b6bc <__errno>
 80049a4:	230c      	movs	r3, #12
 80049a6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049ac:	e7f3      	b.n	8004996 <_sbrk+0x1a>
 80049ae:	bf00      	nop
 80049b0:	20000834 	.word	0x20000834
 80049b4:	200033e0 	.word	0x200033e0

080049b8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049b8:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <SystemInit+0x18>)
 80049ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049be:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80049c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049ca:	609a      	str	r2, [r3, #8]
#endif
}
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	e000ed00 	.word	0xe000ed00

080049d4 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 80049d4:	b508      	push	{r3, lr}
	vTaskDelay(Time);
 80049d6:	f005 f823 	bl	8009a20 <vTaskDelay>
}
 80049da:	bd08      	pop	{r3, pc}

080049dc <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 80049dc:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 80049de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049e2:	460a      	mov	r2, r1
 80049e4:	4601      	mov	r1, r0
 80049e6:	4802      	ldr	r0, [pc, #8]	; (80049f0 <nRF24_SendSpi+0x14>)
 80049e8:	6800      	ldr	r0, [r0, #0]
 80049ea:	f002 fd43 	bl	8007474 <HAL_SPI_Transmit>
}
 80049ee:	bd08      	pop	{r3, pc}
 80049f0:	20000844 	.word	0x20000844

080049f4 <nRF24_WriteRegister>:

	NRF24_CSN_HIGH;
}

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 80049f4:	b500      	push	{lr}
 80049f6:	b083      	sub	sp, #12
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 80049f8:	f040 0020 	orr.w	r0, r0, #32
 80049fc:	f88d 0004 	strb.w	r0, [sp, #4]
	tmp[1] = val;
 8004a00:	f88d 1005 	strb.w	r1, [sp, #5]

	NRF24_CSN_LOW;
 8004a04:	f7fe fbd6 	bl	80031b4 <NRF_ChipSelect>

	nRF24_SendSpi(tmp, 2);
 8004a08:	2102      	movs	r1, #2
 8004a0a:	a801      	add	r0, sp, #4
 8004a0c:	f7ff ffe6 	bl	80049dc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8004a10:	f7fe fbe2 	bl	80031d8 <NRF_ChipDeselect>
}
 8004a14:	b003      	add	sp, #12
 8004a16:	f85d fb04 	ldr.w	pc, [sp], #4

08004a1a <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8004a1a:	b570      	push	{r4, r5, r6, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	460d      	mov	r5, r1
 8004a20:	4616      	mov	r6, r2
	reg = NRF24_CMD_W_REGISTER | reg;
 8004a22:	f040 0020 	orr.w	r0, r0, #32
 8004a26:	ac02      	add	r4, sp, #8
 8004a28:	f804 0d01 	strb.w	r0, [r4, #-1]!

	NRF24_CSN_LOW;
 8004a2c:	f7fe fbc2 	bl	80031b4 <NRF_ChipSelect>

	nRF24_SendSpi(&reg, 1);
 8004a30:	2101      	movs	r1, #1
 8004a32:	4620      	mov	r0, r4
 8004a34:	f7ff ffd2 	bl	80049dc <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8004a38:	4631      	mov	r1, r6
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	f7ff ffce 	bl	80049dc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8004a40:	f7fe fbca 	bl	80031d8 <NRF_ChipDeselect>
}
 8004a44:	b002      	add	sp, #8
 8004a46:	bd70      	pop	{r4, r5, r6, pc}

08004a48 <nRF24_ReadSpi>:
{
 8004a48:	b508      	push	{r3, lr}
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8004a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a4e:	460a      	mov	r2, r1
 8004a50:	4601      	mov	r1, r0
 8004a52:	4802      	ldr	r0, [pc, #8]	; (8004a5c <nRF24_ReadSpi+0x14>)
 8004a54:	6800      	ldr	r0, [r0, #0]
 8004a56:	f002 fef1 	bl	800783c <HAL_SPI_Receive>
}
 8004a5a:	bd08      	pop	{r3, pc}
 8004a5c:	20000844 	.word	0x20000844

08004a60 <nRF24_ReadRegister>:
{
 8004a60:	b510      	push	{r4, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	ac04      	add	r4, sp, #16
 8004a66:	f804 0d09 	strb.w	r0, [r4, #-9]!
	NRF24_CSN_LOW;
 8004a6a:	f7fe fba3 	bl	80031b4 <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 8004a6e:	2101      	movs	r1, #1
 8004a70:	4620      	mov	r0, r4
 8004a72:	f7ff ffb3 	bl	80049dc <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8004a76:	2101      	movs	r1, #1
 8004a78:	f10d 000f 	add.w	r0, sp, #15
 8004a7c:	f7ff ffe4 	bl	8004a48 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8004a80:	f7fe fbaa 	bl	80031d8 <NRF_ChipDeselect>
}
 8004a84:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8004a88:	b004      	add	sp, #16
 8004a8a:	bd10      	pop	{r4, pc}

08004a8c <nRF24_ReadRegisters>:
{
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	460d      	mov	r5, r1
 8004a92:	4616      	mov	r6, r2
 8004a94:	ac02      	add	r4, sp, #8
 8004a96:	f804 0d01 	strb.w	r0, [r4, #-1]!
	NRF24_CSN_LOW;
 8004a9a:	f7fe fb8b 	bl	80031b4 <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f7ff ff9b 	bl	80049dc <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f7ff ffcd 	bl	8004a48 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8004aae:	f7fe fb93 	bl	80031d8 <NRF_ChipDeselect>
}
 8004ab2:	b002      	add	sp, #8
 8004ab4:	bd70      	pop	{r4, r5, r6, pc}

08004ab6 <nRF24_ReadConfig>:

	nRF24_Delay_ms(1);
}

uint8_t nRF24_ReadConfig(void)
{
 8004ab6:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8004ab8:	2000      	movs	r0, #0
 8004aba:	f7ff ffd1 	bl	8004a60 <nRF24_ReadRegister>
}
 8004abe:	bd08      	pop	{r3, pc}

08004ac0 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8004ac0:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	f7ff ff95 	bl	80049f4 <nRF24_WriteRegister>
}
 8004aca:	bd08      	pop	{r3, pc}

08004acc <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8004acc:	b510      	push	{r4, lr}
 8004ace:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8004ad0:	2006      	movs	r0, #6
 8004ad2:	f7ff ffc5 	bl	8004a60 <nRF24_ReadRegister>
	rf_setup &= 0xF8; // Clear PWR bits
 8004ad6:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	rf_setup |= (lev<<1);
 8004ada:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8004ade:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8004ae2:	2006      	movs	r0, #6
 8004ae4:	f7ff ff86 	bl	80049f4 <nRF24_WriteRegister>
}
 8004ae8:	bd10      	pop	{r4, pc}

08004aea <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8004aea:	b510      	push	{r4, lr}
 8004aec:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8004aee:	2006      	movs	r0, #6
 8004af0:	f7ff ffb6 	bl	8004a60 <nRF24_ReadRegister>
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8004af4:	f000 01d7 	and.w	r1, r0, #215	; 0xd7
	if(dr == NRF24_RF_DR_250KBPS)
 8004af8:	2c02      	cmp	r4, #2
 8004afa:	d005      	beq.n	8004b08 <nRF24_SetDataRate+0x1e>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
	else if(dr == NRF24_RF_DR_2MBPS)
 8004afc:	2c01      	cmp	r4, #1
 8004afe:	d006      	beq.n	8004b0e <nRF24_SetDataRate+0x24>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8004b00:	2006      	movs	r0, #6
 8004b02:	f7ff ff77 	bl	80049f4 <nRF24_WriteRegister>
}
 8004b06:	bd10      	pop	{r4, pc}
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8004b08:	f041 0120 	orr.w	r1, r1, #32
 8004b0c:	e7f8      	b.n	8004b00 <nRF24_SetDataRate+0x16>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8004b0e:	f041 0108 	orr.w	r1, r1, #8
 8004b12:	e7f5      	b.n	8004b00 <nRF24_SetDataRate+0x16>

08004b14 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8004b14:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_STATUS));
 8004b16:	2007      	movs	r0, #7
 8004b18:	f7ff ffa2 	bl	8004a60 <nRF24_ReadRegister>
}
 8004b1c:	bd08      	pop	{r3, pc}

08004b1e <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8004b1e:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_STATUS, st);
 8004b20:	4601      	mov	r1, r0
 8004b22:	2007      	movs	r0, #7
 8004b24:	f7ff ff66 	bl	80049f4 <nRF24_WriteRegister>
}
 8004b28:	bd08      	pop	{r3, pc}

08004b2a <nRF24_ReadFifoStatus>:
//
// FIFO Status
//

uint8_t nRF24_ReadFifoStatus(void)
{
 8004b2a:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 8004b2c:	2017      	movs	r0, #23
 8004b2e:	f7ff ff97 	bl	8004a60 <nRF24_ReadRegister>
}
 8004b32:	bd08      	pop	{r3, pc}

08004b34 <nRF24_IsBitSetInFifoStatus>:
{
	nRF24_WriteRegister(NRF24_FIFO_STATUS, st);
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8004b34:	b510      	push	{r4, lr}
 8004b36:	4604      	mov	r4, r0
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8004b38:	f7ff fff7 	bl	8004b2a <nRF24_ReadFifoStatus>

	if(FifoStatus & (1<<Bit))
 8004b3c:	4120      	asrs	r0, r4
 8004b3e:	f010 0f01 	tst.w	r0, #1
 8004b42:	d101      	bne.n	8004b48 <nRF24_IsBitSetInFifoStatus+0x14>
	{
		return 1;
	}

	return 0;
 8004b44:	2000      	movs	r0, #0
}
 8004b46:	bd10      	pop	{r4, pc}
		return 1;
 8004b48:	2001      	movs	r0, #1
 8004b4a:	e7fc      	b.n	8004b46 <nRF24_IsBitSetInFifoStatus+0x12>

08004b4c <nRF24_IsRxEmpty>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_FULL);
}

uint8_t nRF24_IsRxEmpty(void)
{
 8004b4c:	b508      	push	{r3, lr}
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
 8004b4e:	2000      	movs	r0, #0
 8004b50:	f7ff fff0 	bl	8004b34 <nRF24_IsBitSetInFifoStatus>
}
 8004b54:	bd08      	pop	{r3, pc}

08004b56 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8004b56:	b510      	push	{r4, lr}
 8004b58:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8004b5a:	ac02      	add	r4, sp, #8
 8004b5c:	23e2      	movs	r3, #226	; 0xe2
 8004b5e:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8004b62:	f7fe fb27 	bl	80031b4 <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8004b66:	2101      	movs	r1, #1
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f7ff ff37 	bl	80049dc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8004b6e:	f7fe fb33 	bl	80031d8 <NRF_ChipDeselect>
}
 8004b72:	b002      	add	sp, #8
 8004b74:	bd10      	pop	{r4, pc}

08004b76 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8004b76:	b510      	push	{r4, lr}
 8004b78:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8004b7a:	ac02      	add	r4, sp, #8
 8004b7c:	23e1      	movs	r3, #225	; 0xe1
 8004b7e:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8004b82:	f7fe fb17 	bl	80031b4 <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8004b86:	2101      	movs	r1, #1
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f7ff ff27 	bl	80049dc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8004b8e:	f7fe fb23 	bl	80031d8 <NRF_ChipDeselect>
}
 8004b92:	b002      	add	sp, #8
 8004b94:	bd10      	pop	{r4, pc}
	...

08004b98 <nRF24_TX_Mode>:
{
 8004b98:	b508      	push	{r3, lr}
	NRF24_CE_LOW;
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ba0:	480a      	ldr	r0, [pc, #40]	; (8004bcc <nRF24_TX_Mode+0x34>)
 8004ba2:	f001 f840 	bl	8005c26 <HAL_GPIO_WritePin>
	uint8_t config = nRF24_ReadConfig();
 8004ba6:	f7ff ff86 	bl	8004ab6 <nRF24_ReadConfig>
 8004baa:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	nRF24_WriteConfig(config);
 8004bae:	f040 0002 	orr.w	r0, r0, #2
 8004bb2:	f7ff ff85 	bl	8004ac0 <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8004bb6:	2070      	movs	r0, #112	; 0x70
 8004bb8:	f7ff ffb1 	bl	8004b1e <nRF24_WriteStatus>
	nRF24_FlushRX();
 8004bbc:	f7ff ffcb 	bl	8004b56 <nRF24_FlushRX>
	nRF24_FlushTX();
 8004bc0:	f7ff ffd9 	bl	8004b76 <nRF24_FlushTX>
	nRF24_Delay_ms(1);
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	f7ff ff05 	bl	80049d4 <nRF24_Delay_ms>
}
 8004bca:	bd08      	pop	{r3, pc}
 8004bcc:	40020400 	.word	0x40020400

08004bd0 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004bd4:	f7ff ff6f 	bl	8004ab6 <nRF24_ReadConfig>

	if(onoff)
 8004bd8:	b924      	cbnz	r4, 8004be4 <nRF24_EnableCRC+0x14>
		config |= (1<<NRF24_EN_CRC);
	else
		config &= ~(1<<NRF24_EN_CRC);
 8004bda:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
	nRF24_WriteConfig(config);
 8004bde:	f7ff ff6f 	bl	8004ac0 <nRF24_WriteConfig>
}
 8004be2:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_EN_CRC);
 8004be4:	f040 0008 	orr.w	r0, r0, #8
 8004be8:	b2c0      	uxtb	r0, r0
 8004bea:	e7f8      	b.n	8004bde <nRF24_EnableCRC+0xe>

08004bec <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8004bec:	b510      	push	{r4, lr}
 8004bee:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004bf0:	f7ff ff61 	bl	8004ab6 <nRF24_ReadConfig>
	if(crcl == NRF24_CRC_WIDTH_2B)
 8004bf4:	2c01      	cmp	r4, #1
 8004bf6:	d004      	beq.n	8004c02 <nRF24_SetCRCLength+0x16>
		config |= (1<<NRF24_CRCO);
	else
		config &= ~(1<<NRF24_CRCO);
 8004bf8:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
	nRF24_WriteConfig(config);
 8004bfc:	f7ff ff60 	bl	8004ac0 <nRF24_WriteConfig>
}
 8004c00:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_CRCO);
 8004c02:	f040 0004 	orr.w	r0, r0, #4
 8004c06:	b2c0      	uxtb	r0, r0
 8004c08:	e7f8      	b.n	8004bfc <nRF24_SetCRCLength+0x10>

08004c0a <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8004c0a:	b508      	push	{r3, lr}
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8004c0c:	f001 010f 	and.w	r1, r1, #15
 8004c10:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8004c14:	b2c9      	uxtb	r1, r1
 8004c16:	2004      	movs	r0, #4
 8004c18:	f7ff feec 	bl	80049f4 <nRF24_WriteRegister>
}
 8004c1c:	bd08      	pop	{r3, pc}

08004c1e <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8004c1e:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8004c20:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8004c24:	2005      	movs	r0, #5
 8004c26:	f7ff fee5 	bl	80049f4 <nRF24_WriteRegister>
}
 8004c2a:	bd08      	pop	{r3, pc}

08004c2c <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4604      	mov	r4, r0
 8004c30:	460d      	mov	r5, r1
	if(pipe > 5)
 8004c32:	2805      	cmp	r0, #5
 8004c34:	d900      	bls.n	8004c38 <nRF24_EnablePipe+0xc>
		pipe = 5; // Block too high pipe number
 8004c36:	2405      	movs	r4, #5
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8004c38:	2002      	movs	r0, #2
 8004c3a:	f7ff ff11 	bl	8004a60 <nRF24_ReadRegister>
	if(onoff == 1)
 8004c3e:	2d01      	cmp	r5, #1
 8004c40:	d008      	beq.n	8004c54 <nRF24_EnablePipe+0x28>
		enable_pipe |= (1<<pipe);
	else
		enable_pipe &= ~(1<<pipe);
 8004c42:	2101      	movs	r1, #1
 8004c44:	40a1      	lsls	r1, r4
 8004c46:	ea20 0101 	bic.w	r1, r0, r1
 8004c4a:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8004c4c:	2002      	movs	r0, #2
 8004c4e:	f7ff fed1 	bl	80049f4 <nRF24_WriteRegister>
}
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
		enable_pipe |= (1<<pipe);
 8004c54:	2101      	movs	r1, #1
 8004c56:	40a1      	lsls	r1, r4
 8004c58:	4301      	orrs	r1, r0
 8004c5a:	b2c9      	uxtb	r1, r1
 8004c5c:	e7f6      	b.n	8004c4c <nRF24_EnablePipe+0x20>

08004c5e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8004c5e:	b538      	push	{r3, r4, r5, lr}
 8004c60:	4604      	mov	r4, r0
 8004c62:	460d      	mov	r5, r1
	if(pipe > 5)
 8004c64:	2805      	cmp	r0, #5
 8004c66:	d900      	bls.n	8004c6a <nRF24_AutoACK+0xc>
		pipe = 5; // Block too high pipe number
 8004c68:	2405      	movs	r4, #5
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	f7ff fef8 	bl	8004a60 <nRF24_ReadRegister>
	if(onoff == 1)
 8004c70:	2d01      	cmp	r5, #1
 8004c72:	d008      	beq.n	8004c86 <nRF24_AutoACK+0x28>
		enaa |= (1<<pipe);
	else
		enaa &= ~(1<<pipe);
 8004c74:	2101      	movs	r1, #1
 8004c76:	40a1      	lsls	r1, r4
 8004c78:	ea20 0101 	bic.w	r1, r0, r1
 8004c7c:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8004c7e:	2001      	movs	r0, #1
 8004c80:	f7ff feb8 	bl	80049f4 <nRF24_WriteRegister>
}
 8004c84:	bd38      	pop	{r3, r4, r5, pc}
		enaa |= (1<<pipe);
 8004c86:	2101      	movs	r1, #1
 8004c88:	40a1      	lsls	r1, r4
 8004c8a:	4301      	orrs	r1, r0
 8004c8c:	b2c9      	uxtb	r1, r1
 8004c8e:	e7f6      	b.n	8004c7e <nRF24_AutoACK+0x20>

08004c90 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8004c90:	b508      	push	{r3, lr}
	if(size > 5)
 8004c92:	2805      	cmp	r0, #5
 8004c94:	d803      	bhi.n	8004c9e <nRF24_SetAddressWidth+0xe>
		size = 5; // Maximum are 5 bytes
	if(size < 3)
 8004c96:	2802      	cmp	r0, #2
 8004c98:	d802      	bhi.n	8004ca0 <nRF24_SetAddressWidth+0x10>
		size = 3; // Minimum are 3 bytes
 8004c9a:	2003      	movs	r0, #3
 8004c9c:	e000      	b.n	8004ca0 <nRF24_SetAddressWidth+0x10>
		size = 5; // Maximum are 5 bytes
 8004c9e:	2005      	movs	r0, #5
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8004ca0:	1e81      	subs	r1, r0, #2
 8004ca2:	f001 0103 	and.w	r1, r1, #3
 8004ca6:	2003      	movs	r0, #3
 8004ca8:	f7ff fea4 	bl	80049f4 <nRF24_WriteRegister>
}
 8004cac:	bd08      	pop	{r3, pc}

08004cae <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8004cae:	b510      	push	{r4, lr}
 8004cb0:	b082      	sub	sp, #8
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8004cb2:	2801      	cmp	r0, #1
 8004cb4:	d815      	bhi.n	8004ce2 <nRF24_SetRXAddress+0x34>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e009      	b.n	8004cce <nRF24_SetRXAddress+0x20>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8004cba:	f1c3 0204 	rsb	r2, r3, #4
 8004cbe:	5ccc      	ldrb	r4, [r1, r3]
 8004cc0:	f10d 0c08 	add.w	ip, sp, #8
 8004cc4:	4462      	add	r2, ip
 8004cc6:	f802 4c08 	strb.w	r4, [r2, #-8]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004cca:	3301      	adds	r3, #1
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d9f3      	bls.n	8004cba <nRF24_SetRXAddress+0xc>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8004cd2:	300a      	adds	r0, #10
 8004cd4:	2205      	movs	r2, #5
 8004cd6:	4669      	mov	r1, sp
 8004cd8:	b2c0      	uxtb	r0, r0
 8004cda:	f7ff fe9e 	bl	8004a1a <nRF24_WriteRegisters>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
}
 8004cde:	b002      	add	sp, #8
 8004ce0:	bd10      	pop	{r4, pc}
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8004ce2:	300a      	adds	r0, #10
 8004ce4:	7909      	ldrb	r1, [r1, #4]
 8004ce6:	b2c0      	uxtb	r0, r0
 8004ce8:	f7ff fe84 	bl	80049f4 <nRF24_WriteRegister>
}
 8004cec:	e7f7      	b.n	8004cde <nRF24_SetRXAddress+0x30>
	...

08004cf0 <nRF24_RX_Mode>:
{
 8004cf0:	b510      	push	{r4, lr}
	uint8_t config = nRF24_ReadConfig();
 8004cf2:	f7ff fee0 	bl	8004ab6 <nRF24_ReadConfig>
 8004cf6:	4604      	mov	r4, r0
	nRF24_SetRXAddress(0, addr_p0_backup);
 8004cf8:	490c      	ldr	r1, [pc, #48]	; (8004d2c <nRF24_RX_Mode+0x3c>)
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	f7ff ffd7 	bl	8004cae <nRF24_SetRXAddress>
	config |= (1<<NRF24_PRIM_RX);
 8004d00:	f044 0003 	orr.w	r0, r4, #3
	nRF24_WriteConfig(config);
 8004d04:	b2c0      	uxtb	r0, r0
 8004d06:	f7ff fedb 	bl	8004ac0 <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8004d0a:	2070      	movs	r0, #112	; 0x70
 8004d0c:	f7ff ff07 	bl	8004b1e <nRF24_WriteStatus>
	nRF24_FlushRX();
 8004d10:	f7ff ff21 	bl	8004b56 <nRF24_FlushRX>
	nRF24_FlushTX();
 8004d14:	f7ff ff2f 	bl	8004b76 <nRF24_FlushTX>
	NRF24_CE_HIGH;
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d1e:	4804      	ldr	r0, [pc, #16]	; (8004d30 <nRF24_RX_Mode+0x40>)
 8004d20:	f000 ff81 	bl	8005c26 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8004d24:	2001      	movs	r0, #1
 8004d26:	f7ff fe55 	bl	80049d4 <nRF24_Delay_ms>
}
 8004d2a:	bd10      	pop	{r4, pc}
 8004d2c:	2000083c 	.word	0x2000083c
 8004d30:	40020400 	.word	0x40020400

08004d34 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8004d34:	b510      	push	{r4, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	4604      	mov	r4, r0
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8004d3a:	2205      	movs	r2, #5
 8004d3c:	4669      	mov	r1, sp
 8004d3e:	200a      	movs	r0, #10
 8004d40:	f7ff fea4 	bl	8004a8c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004d44:	2300      	movs	r3, #0
 8004d46:	e009      	b.n	8004d5c <nRF24_SetTXAddress+0x28>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8004d48:	f1c3 0204 	rsb	r2, r3, #4
 8004d4c:	a902      	add	r1, sp, #8
 8004d4e:	4419      	add	r1, r3
 8004d50:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8004d54:	490f      	ldr	r1, [pc, #60]	; (8004d94 <nRF24_SetTXAddress+0x60>)
 8004d56:	5488      	strb	r0, [r1, r2]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004d58:	3301      	adds	r3, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d9f3      	bls.n	8004d48 <nRF24_SetTXAddress+0x14>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004d60:	2300      	movs	r3, #0
 8004d62:	e008      	b.n	8004d76 <nRF24_SetTXAddress+0x42>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8004d64:	f1c3 0204 	rsb	r2, r3, #4
 8004d68:	5ce1      	ldrb	r1, [r4, r3]
 8004d6a:	a802      	add	r0, sp, #8
 8004d6c:	4402      	add	r2, r0
 8004d6e:	f802 1c08 	strb.w	r1, [r2, #-8]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004d72:	3301      	adds	r3, #1
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d9f4      	bls.n	8004d64 <nRF24_SetTXAddress+0x30>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8004d7a:	2205      	movs	r2, #5
 8004d7c:	4669      	mov	r1, sp
 8004d7e:	200a      	movs	r0, #10
 8004d80:	f7ff fe4b 	bl	8004a1a <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8004d84:	2205      	movs	r2, #5
 8004d86:	4669      	mov	r1, sp
 8004d88:	2010      	movs	r0, #16
 8004d8a:	f7ff fe46 	bl	8004a1a <nRF24_WriteRegisters>
}
 8004d8e:	b002      	add	sp, #8
 8004d90:	bd10      	pop	{r4, pc}
 8004d92:	bf00      	nop
 8004d94:	2000083c 	.word	0x2000083c

08004d98 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8004d98:	b508      	push	{r3, lr}
	uint8_t status = nRF24_ReadStatus();
 8004d9a:	f7ff febb 	bl	8004b14 <nRF24_ReadStatus>
	status |= (7<<4); // Clear bits 4, 5, 6.
 8004d9e:	f040 0070 	orr.w	r0, r0, #112	; 0x70
	nRF24_WriteStatus(status);
 8004da2:	b2c0      	uxtb	r0, r0
 8004da4:	f7ff febb 	bl	8004b1e <nRF24_WriteStatus>
}
 8004da8:	bd08      	pop	{r3, pc}

08004daa <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8004daa:	b508      	push	{r3, lr}
    uint8_t result = 0;

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8004dac:	2060      	movs	r0, #96	; 0x60
 8004dae:	f7ff fe57 	bl	8004a60 <nRF24_ReadRegister>

    if (result > 32) // Something went wrong :)
 8004db2:	2820      	cmp	r0, #32
 8004db4:	d800      	bhi.n	8004db8 <nRF24_GetDynamicPayloadSize+0xe>
        nRF24_FlushRX();
        nRF24_Delay_ms(2);
        return 0;
    }
    return result;
}
 8004db6:	bd08      	pop	{r3, pc}
        nRF24_FlushRX();
 8004db8:	f7ff fecd 	bl	8004b56 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8004dbc:	2002      	movs	r0, #2
 8004dbe:	f7ff fe09 	bl	80049d4 <nRF24_Delay_ms>
        return 0;
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	e7f7      	b.n	8004db6 <nRF24_GetDynamicPayloadSize+0xc>

08004dc6 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8004dc6:	b510      	push	{r4, lr}
 8004dc8:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004dca:	f7ff fe74 	bl	8004ab6 <nRF24_ReadConfig>

	if(!onoff)
 8004dce:	b124      	cbz	r4, 8004dda <nRF24_EnableRXDataReadyIRQ+0x14>
		config |= (1<<NRF24_RX_DR);
	else
		config &= ~(1<<NRF24_RX_DR);
 8004dd0:	f000 00bf 	and.w	r0, r0, #191	; 0xbf

	nRF24_WriteConfig(config);
 8004dd4:	f7ff fe74 	bl	8004ac0 <nRF24_WriteConfig>
}
 8004dd8:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_RX_DR);
 8004dda:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004dde:	b2c0      	uxtb	r0, r0
 8004de0:	e7f8      	b.n	8004dd4 <nRF24_EnableRXDataReadyIRQ+0xe>

08004de2 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8004de2:	b510      	push	{r4, lr}
 8004de4:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004de6:	f7ff fe66 	bl	8004ab6 <nRF24_ReadConfig>

	if(!onoff)
 8004dea:	b124      	cbz	r4, 8004df6 <nRF24_EnableTXDataSentIRQ+0x14>
		config |= (1<<NRF24_TX_DS);
	else
		config &= ~(1<<NRF24_TX_DS);
 8004dec:	f000 00df 	and.w	r0, r0, #223	; 0xdf

	nRF24_WriteConfig(config);
 8004df0:	f7ff fe66 	bl	8004ac0 <nRF24_WriteConfig>
}
 8004df4:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_TX_DS);
 8004df6:	f040 0020 	orr.w	r0, r0, #32
 8004dfa:	b2c0      	uxtb	r0, r0
 8004dfc:	e7f8      	b.n	8004df0 <nRF24_EnableTXDataSentIRQ+0xe>

08004dfe <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8004dfe:	b510      	push	{r4, lr}
 8004e00:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004e02:	f7ff fe58 	bl	8004ab6 <nRF24_ReadConfig>

	if(!onoff)
 8004e06:	b124      	cbz	r4, 8004e12 <nRF24_EnableMaxRetransmitIRQ+0x14>
		config |= (1<<NRF24_MAX_RT);
	else
		config &= ~(1<<NRF24_MAX_RT);
 8004e08:	f000 00ef 	and.w	r0, r0, #239	; 0xef

	nRF24_WriteConfig(config);
 8004e0c:	f7ff fe58 	bl	8004ac0 <nRF24_WriteConfig>
}
 8004e10:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_MAX_RT);
 8004e12:	f040 0010 	orr.w	r0, r0, #16
 8004e16:	b2c0      	uxtb	r0, r0
 8004e18:	e7f8      	b.n	8004e0c <nRF24_EnableMaxRetransmitIRQ+0xe>

08004e1a <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8004e1a:	b508      	push	{r3, lr}
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8004e1c:	460a      	mov	r2, r1
 8004e1e:	4601      	mov	r1, r0
 8004e20:	20a0      	movs	r0, #160	; 0xa0
 8004e22:	f7ff fdfa 	bl	8004a1a <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 8004e26:	bd08      	pop	{r3, pc}

08004e28 <nRF24_ReadRXPaylaod>:
		status = nRF24_ReadStatus();
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	460d      	mov	r5, r1
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8004e2e:	f7ff ffbc 	bl	8004daa <nRF24_GetDynamicPayloadSize>
 8004e32:	4602      	mov	r2, r0
 8004e34:	7028      	strb	r0, [r5, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8004e36:	4621      	mov	r1, r4
 8004e38:	2061      	movs	r0, #97	; 0x61
 8004e3a:	f7ff fe27 	bl	8004a8c <nRF24_ReadRegisters>
#else
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 8004e3e:	2101      	movs	r1, #1
 8004e40:	2007      	movs	r0, #7
 8004e42:	f7ff fdd7 	bl	80049f4 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 8004e46:	f7ff fe65 	bl	8004b14 <nRF24_ReadStatus>
 8004e4a:	f010 0f20 	tst.w	r0, #32
 8004e4e:	d100      	bne.n	8004e52 <nRF24_ReadRXPaylaod+0x2a>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8004e50:	bd38      	pop	{r3, r4, r5, pc}
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8004e52:	2120      	movs	r1, #32
 8004e54:	2007      	movs	r0, #7
 8004e56:	f7ff fdcd 	bl	80049f4 <nRF24_WriteRegister>
}
 8004e5a:	e7f9      	b.n	8004e50 <nRF24_ReadRXPaylaod+0x28>

08004e5c <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
	if(Size > 32)
 8004e5c:	2920      	cmp	r1, #32
 8004e5e:	d901      	bls.n	8004e64 <nRF24_SendPacket+0x8>
		return NRF24_NO_TRANSMITTED_PACKET;
 8004e60:	2001      	movs	r0, #1
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_WaitTX();
#endif

	return NRF24_TRANSMITTED_PACKET;
}
 8004e62:	4770      	bx	lr
{
 8004e64:	b508      	push	{r3, lr}
	nRF24_WriteTXPayload(Data, Size);
 8004e66:	f7ff ffd8 	bl	8004e1a <nRF24_WriteTXPayload>
	return NRF24_TRANSMITTED_PACKET;
 8004e6a:	2000      	movs	r0, #0
}
 8004e6c:	bd08      	pop	{r3, pc}
	...

08004e70 <nRF24_IsSomtehingToSend>:
{
	return RB_ElementsAvailable(&RXBuffer)?1:0;
}

uint8_t nRF24_IsSomtehingToSend(void)
{
 8004e70:	b508      	push	{r3, lr}
	return RB_ElementsAvailable(&TXBuffer)?1:0;
 8004e72:	4803      	ldr	r0, [pc, #12]	; (8004e80 <nRF24_IsSomtehingToSend+0x10>)
 8004e74:	f7fd fb6d 	bl	8002552 <RB_ElementsAvailable>
}
 8004e78:	3000      	adds	r0, #0
 8004e7a:	bf18      	it	ne
 8004e7c:	2001      	movne	r0, #1
 8004e7e:	bd08      	pop	{r3, pc}
 8004e80:	20003350 	.word	0x20003350

08004e84 <nRF24_ReceivePacket>:
	return nRF24_IsSomtehingToRead();
#endif
}

nRF24_RX_Status nRF24_ReceivePacket(uint8_t* Data, uint8_t *Size)
{
 8004e84:	b508      	push	{r3, lr}
#if (NRF24_USE_INTERRUPT == 0)
	if(nRF24_RXAvailable())
	{
#endif
		nRF24_ReadRXPaylaod(Data, Size);
 8004e86:	f7ff ffcf 	bl	8004e28 <nRF24_ReadRXPaylaod>
#if (NRF24_USE_INTERRUPT == 0)
	}
	return NRF24_NO_RECEIVED_PACKET;
#endif

}
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	bd08      	pop	{r3, pc}
	...

08004e90 <nRF24_CheckTXAndSend>:
	return NRF24_TRANSMITTED_PACKET;
#endif
}
#if (NRF24_USE_RINGBUFFER == 1)
void nRF24_CheckTXAndSend(void)
{
 8004e90:	b530      	push	{r4, r5, lr}
 8004e92:	b089      	sub	sp, #36	; 0x24
	uint8_t i, DataCounter;
	uint8_t TXPacket[32];

	if(nRF24_IsSomtehingToSend() && Nrf24TXFreeFlag)
 8004e94:	f7ff ffec 	bl	8004e70 <nRF24_IsSomtehingToSend>
 8004e98:	b110      	cbz	r0, 8004ea0 <nRF24_CheckTXAndSend+0x10>
 8004e9a:	4b19      	ldr	r3, [pc, #100]	; (8004f00 <nRF24_CheckTXAndSend+0x70>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	b91b      	cbnz	r3, 8004ea8 <nRF24_CheckTXAndSend+0x18>
		nRF24_SendPacket(TXPacket, DataCounter);
		NRF24_CE_HIGH;
		nRF24_Delay_ms(1);
		NRF24_CE_LOW;
	}else{
		nRF24_RX_Mode();
 8004ea0:	f7ff ff26 	bl	8004cf0 <nRF24_RX_Mode>
	}
}
 8004ea4:	b009      	add	sp, #36	; 0x24
 8004ea6:	bd30      	pop	{r4, r5, pc}
		nRF24_TX_Mode();
 8004ea8:	f7ff fe76 	bl	8004b98 <nRF24_TX_Mode>
		Nrf24TXFreeFlag = 0;
 8004eac:	4b14      	ldr	r3, [pc, #80]	; (8004f00 <nRF24_CheckTXAndSend+0x70>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	701a      	strb	r2, [r3, #0]
		DataCounter = RB_ElementsAvailable(&TXBuffer);
 8004eb2:	4814      	ldr	r0, [pc, #80]	; (8004f04 <nRF24_CheckTXAndSend+0x74>)
 8004eb4:	f7fd fb4d 	bl	8002552 <RB_ElementsAvailable>
 8004eb8:	4605      	mov	r5, r0
		if(DataCounter > 32)
 8004eba:	2820      	cmp	r0, #32
 8004ebc:	d900      	bls.n	8004ec0 <nRF24_CheckTXAndSend+0x30>
			DataCounter = 32; // Max Payload
 8004ebe:	2520      	movs	r5, #32
		for(i = 0; i < DataCounter; i++)
 8004ec0:	2400      	movs	r4, #0
 8004ec2:	e006      	b.n	8004ed2 <nRF24_CheckTXAndSend+0x42>
			RB_ReadFromBuffer(&TXBuffer, &TXPacket[i]);
 8004ec4:	eb0d 0104 	add.w	r1, sp, r4
 8004ec8:	480e      	ldr	r0, [pc, #56]	; (8004f04 <nRF24_CheckTXAndSend+0x74>)
 8004eca:	f7fd fb2b 	bl	8002524 <RB_ReadFromBuffer>
		for(i = 0; i < DataCounter; i++)
 8004ece:	3401      	adds	r4, #1
 8004ed0:	b2e4      	uxtb	r4, r4
 8004ed2:	42ac      	cmp	r4, r5
 8004ed4:	d3f6      	bcc.n	8004ec4 <nRF24_CheckTXAndSend+0x34>
		nRF24_SendPacket(TXPacket, DataCounter);
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	4668      	mov	r0, sp
 8004eda:	f7ff ffbf 	bl	8004e5c <nRF24_SendPacket>
		NRF24_CE_HIGH;
 8004ede:	4c0a      	ldr	r4, [pc, #40]	; (8004f08 <nRF24_CheckTXAndSend+0x78>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f000 fe9d 	bl	8005c26 <HAL_GPIO_WritePin>
		nRF24_Delay_ms(1);
 8004eec:	2001      	movs	r0, #1
 8004eee:	f7ff fd71 	bl	80049d4 <nRF24_Delay_ms>
		NRF24_CE_LOW;
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f000 fe94 	bl	8005c26 <HAL_GPIO_WritePin>
 8004efe:	e7d1      	b.n	8004ea4 <nRF24_CheckTXAndSend+0x14>
 8004f00:	20000839 	.word	0x20000839
 8004f04:	20003350 	.word	0x20003350
 8004f08:	40020400 	.word	0x40020400

08004f0c <nRF24_ReceiveData>:
#endif
#if (NRF24_USE_INTERRUPT == 1)
void nRF24_ReceiveData(void)
{
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	b08a      	sub	sp, #40	; 0x28
 8004f10:	e00f      	b.n	8004f32 <nRF24_ReceiveData+0x26>
	{
		nRF24_ReceivePacket(RXPacket, &DataCounter);

		for(i = 0; i < DataCounter; i++)
		{
			RB_WriteToBuffer(&RXBuffer, RXPacket[i]);
 8004f12:	ab0a      	add	r3, sp, #40	; 0x28
 8004f14:	4423      	add	r3, r4
 8004f16:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 8004f1a:	480a      	ldr	r0, [pc, #40]	; (8004f44 <nRF24_ReceiveData+0x38>)
 8004f1c:	f7fd fae5 	bl	80024ea <RB_WriteToBuffer>
		for(i = 0; i < DataCounter; i++)
 8004f20:	3401      	adds	r4, #1
 8004f22:	b2e4      	uxtb	r4, r4
 8004f24:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8004f28:	42a3      	cmp	r3, r4
 8004f2a:	d8f2      	bhi.n	8004f12 <nRF24_ReceiveData+0x6>
		}

	}while(!nRF24_IsRxEmpty());
 8004f2c:	f7ff fe0e 	bl	8004b4c <nRF24_IsRxEmpty>
 8004f30:	b930      	cbnz	r0, 8004f40 <nRF24_ReceiveData+0x34>
		nRF24_ReceivePacket(RXPacket, &DataCounter);
 8004f32:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8004f36:	a801      	add	r0, sp, #4
 8004f38:	f7ff ffa4 	bl	8004e84 <nRF24_ReceivePacket>
		for(i = 0; i < DataCounter; i++)
 8004f3c:	2400      	movs	r4, #0
 8004f3e:	e7f1      	b.n	8004f24 <nRF24_ReceiveData+0x18>
#endif
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_ReceivePacket(RXBuffer, &RXDataCounter);
#endif
}
 8004f40:	b00a      	add	sp, #40	; 0x28
 8004f42:	bd10      	pop	{r4, pc}
 8004f44:	20003374 	.word	0x20003374

08004f48 <nRF24_IRQ_Read>:
{
	Nrf24InterruptFlag = 1;
}

void nRF24_IRQ_Read(void)
{
 8004f48:	b508      	push	{r3, lr}
	if(Nrf24InterruptFlag == 1)
 8004f4a:	4b14      	ldr	r3, [pc, #80]	; (8004f9c <nRF24_IRQ_Read+0x54>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d000      	beq.n	8004f56 <nRF24_IRQ_Read+0xe>
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
		}

		nRF24_WriteStatus(ClearIrq);
	}
}
 8004f54:	bd08      	pop	{r3, pc}
		Nrf24InterruptFlag = 0;
 8004f56:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <nRF24_IRQ_Read+0x54>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
		uint8_t status = nRF24_ReadStatus();
 8004f5c:	f7ff fdda 	bl	8004b14 <nRF24_ReadStatus>
 8004f60:	4603      	mov	r3, r0
		if ((status & (1 << NRF24_RX_DR)))
 8004f62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f66:	d016      	beq.n	8004f96 <nRF24_IRQ_Read+0x4e>
			nrf24_rx_flag = 1;
 8004f68:	4a0d      	ldr	r2, [pc, #52]	; (8004fa0 <nRF24_IRQ_Read+0x58>)
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8004f6e:	2040      	movs	r0, #64	; 0x40
		if ((status & (1 << NRF24_TX_DS)))
 8004f70:	f013 0f20 	tst.w	r3, #32
 8004f74:	d004      	beq.n	8004f80 <nRF24_IRQ_Read+0x38>
			nrf24_tx_flag = 1;
 8004f76:	4a0b      	ldr	r2, [pc, #44]	; (8004fa4 <nRF24_IRQ_Read+0x5c>)
 8004f78:	2101      	movs	r1, #1
 8004f7a:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8004f7c:	f040 0020 	orr.w	r0, r0, #32
		if ((status & (1 << NRF24_MAX_RT)))
 8004f80:	f013 0f10 	tst.w	r3, #16
 8004f84:	d004      	beq.n	8004f90 <nRF24_IRQ_Read+0x48>
			nrf24_mr_flag = 1;
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <nRF24_IRQ_Read+0x60>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 8004f8c:	f040 0010 	orr.w	r0, r0, #16
		nRF24_WriteStatus(ClearIrq);
 8004f90:	f7ff fdc5 	bl	8004b1e <nRF24_WriteStatus>
}
 8004f94:	e7de      	b.n	8004f54 <nRF24_IRQ_Read+0xc>
		uint8_t ClearIrq = 0;
 8004f96:	2000      	movs	r0, #0
 8004f98:	e7ea      	b.n	8004f70 <nRF24_IRQ_Read+0x28>
 8004f9a:	bf00      	nop
 8004f9c:	20000838 	.word	0x20000838
 8004fa0:	20000849 	.word	0x20000849
 8004fa4:	2000084a 	.word	0x2000084a
 8004fa8:	20000848 	.word	0x20000848

08004fac <nRF24_EventRxCallback>:
//

__weak void nRF24_EventRxCallback(void)
{

}
 8004fac:	4770      	bx	lr

08004fae <nRF24_EventTxCallback>:

__weak void nRF24_EventTxCallback(void)
{

}
 8004fae:	4770      	bx	lr

08004fb0 <nRF24_EventMrCallback>:

__weak void nRF24_EventMrCallback(void)
{

}
 8004fb0:	4770      	bx	lr
	...

08004fb4 <nRF24_Event>:

void nRF24_Event(void)
{
 8004fb4:	b508      	push	{r3, lr}
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8004fb6:	f7ff ffc7 	bl	8004f48 <nRF24_IRQ_Read>

#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_CheckTXAndSend();
 8004fba:	f7ff ff69 	bl	8004e90 <nRF24_CheckTXAndSend>
#endif

	if(nrf24_rx_flag)
 8004fbe:	4b10      	ldr	r3, [pc, #64]	; (8005000 <nRF24_Event+0x4c>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	b933      	cbnz	r3, 8004fd2 <nRF24_Event+0x1e>
#endif
		nRF24_EventRxCallback();
		nrf24_rx_flag = 0;
	}

	if(nrf24_tx_flag)
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <nRF24_Event+0x50>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	b95b      	cbnz	r3, 8004fe2 <nRF24_Event+0x2e>
#endif
		nRF24_EventTxCallback();
		nrf24_tx_flag = 0;
	}

	if(nrf24_mr_flag)
 8004fca:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <nRF24_Event+0x54>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	b98b      	cbnz	r3, 8004ff4 <nRF24_Event+0x40>
	{
		nRF24_EventMrCallback();
		nrf24_mr_flag = 0;
	}
}
 8004fd0:	bd08      	pop	{r3, pc}
		nRF24_ReceiveData();
 8004fd2:	f7ff ff9b 	bl	8004f0c <nRF24_ReceiveData>
		nRF24_EventRxCallback();
 8004fd6:	f7ff ffe9 	bl	8004fac <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 8004fda:	4b09      	ldr	r3, [pc, #36]	; (8005000 <nRF24_Event+0x4c>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e7f0      	b.n	8004fc4 <nRF24_Event+0x10>
		Nrf24TXFreeFlag = 1;
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	; (800500c <nRF24_Event+0x58>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	701a      	strb	r2, [r3, #0]
		nRF24_EventTxCallback();
 8004fe8:	f7ff ffe1 	bl	8004fae <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <nRF24_Event+0x50>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	e7ea      	b.n	8004fca <nRF24_Event+0x16>
		nRF24_EventMrCallback();
 8004ff4:	f7ff ffdc 	bl	8004fb0 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8004ff8:	4b03      	ldr	r3, [pc, #12]	; (8005008 <nRF24_Event+0x54>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
}
 8004ffe:	e7e7      	b.n	8004fd0 <nRF24_Event+0x1c>
 8005000:	20000849 	.word	0x20000849
 8005004:	2000084a 	.word	0x2000084a
 8005008:	20000848 	.word	0x20000848
 800500c:	20000839 	.word	0x20000839

08005010 <nRF24_Init>:
#endif

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8005010:	b508      	push	{r3, lr}
	hspi_nrf = hspi;
 8005012:	4b31      	ldr	r3, [pc, #196]	; (80050d8 <nRF24_Init+0xc8>)
 8005014:	6018      	str	r0, [r3, #0]

	NRF24_CE_LOW;
 8005016:	2200      	movs	r2, #0
 8005018:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800501c:	482f      	ldr	r0, [pc, #188]	; (80050dc <nRF24_Init+0xcc>)
 800501e:	f000 fe02 	bl	8005c26 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8005022:	f7fe f8d9 	bl	80031d8 <NRF_ChipDeselect>

	nRF24_Delay_ms(5); // Wait for radio power up
 8005026:	2005      	movs	r0, #5
 8005028:	f7ff fcd4 	bl	80049d4 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 800502c:	2003      	movs	r0, #3
 800502e:	f7ff fd4d 	bl	8004acc <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8005032:	2002      	movs	r0, #2
 8005034:	f7ff fd59 	bl	8004aea <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8005038:	2001      	movs	r0, #1
 800503a:	f7ff fdc9 	bl	8004bd0 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_2B); // CRC Length 1 byte
 800503e:	2001      	movs	r0, #1
 8005040:	f7ff fdd4 	bl	8004bec <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8005044:	2107      	movs	r1, #7
 8005046:	2004      	movs	r0, #4
 8005048:	f7ff fddf 	bl	8004c0a <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 800504c:	201d      	movs	r0, #29
 800504e:	f7ff fd07 	bl	8004a60 <nRF24_ReadRegister>
 8005052:	f040 0104 	orr.w	r1, r0, #4
 8005056:	b2c9      	uxtb	r1, r1
 8005058:	201d      	movs	r0, #29
 800505a:	f7ff fccb 	bl	80049f4 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 800505e:	213f      	movs	r1, #63	; 0x3f
 8005060:	201c      	movs	r0, #28
 8005062:	f7ff fcc7 	bl	80049f4 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(110); // Set RF channel for transmission
 8005066:	206e      	movs	r0, #110	; 0x6e
 8005068:	f7ff fdd9 	bl	8004c1e <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 800506c:	2101      	movs	r1, #1
 800506e:	2000      	movs	r0, #0
 8005070:	f7ff fddc 	bl	8004c2c <nRF24_EnablePipe>
	nRF24_EnablePipe(1, 1); // Enable pipe 1
 8005074:	2101      	movs	r1, #1
 8005076:	4608      	mov	r0, r1
 8005078:	f7ff fdd8 	bl	8004c2c <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800507c:	2101      	movs	r1, #1
 800507e:	2000      	movs	r0, #0
 8005080:	f7ff fded 	bl	8004c5e <nRF24_AutoACK>
	nRF24_AutoACK(1, 1); // Enable auto ACK for pipe 1
 8005084:	2101      	movs	r1, #1
 8005086:	4608      	mov	r0, r1
 8005088:	f7ff fde9 	bl	8004c5e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 800508c:	2005      	movs	r0, #5
 800508e:	f7ff fdff 	bl	8004c90 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 8005092:	2001      	movs	r0, #1
 8005094:	f7ff fc9e 	bl	80049d4 <nRF24_Delay_ms>

#if (NRF24_USE_INTERRUPT == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8005098:	2001      	movs	r0, #1
 800509a:	f7ff fe94 	bl	8004dc6 <nRF24_EnableRXDataReadyIRQ>
#endif
#if (NRF24_USE_INTERRUPT == 0)
	nRF24_EnableRXDataReadyIRQ(0);
#endif
	nRF24_EnableTXDataSentIRQ(0);
 800509e:	2000      	movs	r0, #0
 80050a0:	f7ff fe9f 	bl	8004de2 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80050a4:	2000      	movs	r0, #0
 80050a6:	f7ff feaa 	bl	8004dfe <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 80050aa:	2001      	movs	r0, #1
 80050ac:	f7ff fc92 	bl	80049d4 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 80050b0:	f7ff fe72 	bl	8004d98 <nRF24_ClearInterrupts>
#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 80050b4:	2001      	movs	r0, #1
 80050b6:	f7ff fe86 	bl	8004dc6 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 80050ba:	2001      	movs	r0, #1
 80050bc:	f7ff fe91 	bl	8004de2 <nRF24_EnableTXDataSentIRQ>
	Nrf24TXFreeFlag = 1;
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <nRF24_Init+0xd0>)
 80050c2:	2201      	movs	r2, #1
 80050c4:	701a      	strb	r2, [r3, #0]
	RB_CreateBuffer(&TXBuffer, NRF24_TX_BUFFER_SIZE);
 80050c6:	2120      	movs	r1, #32
 80050c8:	4806      	ldr	r0, [pc, #24]	; (80050e4 <nRF24_Init+0xd4>)
 80050ca:	f7fd fa03 	bl	80024d4 <RB_CreateBuffer>
	RB_CreateBuffer(&RXBuffer, NRF24_RX_BUFFER_SIZE);
 80050ce:	2120      	movs	r1, #32
 80050d0:	4805      	ldr	r0, [pc, #20]	; (80050e8 <nRF24_Init+0xd8>)
 80050d2:	f7fd f9ff 	bl	80024d4 <RB_CreateBuffer>
#endif
}
 80050d6:	bd08      	pop	{r3, pc}
 80050d8:	20000844 	.word	0x20000844
 80050dc:	40020400 	.word	0x40020400
 80050e0:	20000839 	.word	0x20000839
 80050e4:	20003350 	.word	0x20003350
 80050e8:	20003374 	.word	0x20003374

080050ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80050ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005124 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80050f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80050f2:	e003      	b.n	80050fc <LoopCopyDataInit>

080050f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80050f4:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80050f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80050f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80050fa:	3104      	adds	r1, #4

080050fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80050fc:	480b      	ldr	r0, [pc, #44]	; (800512c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80050fe:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005100:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005102:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005104:	d3f6      	bcc.n	80050f4 <CopyDataInit>
  ldr  r2, =_sbss
 8005106:	4a0b      	ldr	r2, [pc, #44]	; (8005134 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005108:	e002      	b.n	8005110 <LoopFillZerobss>

0800510a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800510a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800510c:	f842 3b04 	str.w	r3, [r2], #4

08005110 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005110:	4b09      	ldr	r3, [pc, #36]	; (8005138 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005112:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005114:	d3f9      	bcc.n	800510a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005116:	f7ff fc4f 	bl	80049b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800511a:	f006 fad5 	bl	800b6c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800511e:	f7ff f821 	bl	8004164 <main>
  bx  lr    
 8005122:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005124:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8005128:	0800c9d4 	.word	0x0800c9d4
  ldr  r0, =_sdata
 800512c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005130:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 8005134:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 8005138:	200033e0 	.word	0x200033e0

0800513c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800513c:	e7fe      	b.n	800513c <ADC_IRQHandler>
	...

08005140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005140:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005142:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <HAL_Init+0x30>)
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005152:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800515a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800515c:	2003      	movs	r0, #3
 800515e:	f000 f9a9 	bl	80054b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005162:	2000      	movs	r0, #0
 8005164:	f7ff fb6e 	bl	8004844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005168:	f7ff f8b6 	bl	80042d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800516c:	2000      	movs	r0, #0
 800516e:	bd08      	pop	{r3, pc}
 8005170:	40023c00 	.word	0x40023c00

08005174 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005174:	4a03      	ldr	r2, [pc, #12]	; (8005184 <HAL_IncTick+0x10>)
 8005176:	6811      	ldr	r1, [r2, #0]
 8005178:	4b03      	ldr	r3, [pc, #12]	; (8005188 <HAL_IncTick+0x14>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	440b      	add	r3, r1
 800517e:	6013      	str	r3, [r2, #0]
}
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20003398 	.word	0x20003398
 8005188:	2000003c 	.word	0x2000003c

0800518c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800518c:	4b01      	ldr	r3, [pc, #4]	; (8005194 <HAL_GetTick+0x8>)
 800518e:	6818      	ldr	r0, [r3, #0]
}
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20003398 	.word	0x20003398

08005198 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005198:	4b4a      	ldr	r3, [pc, #296]	; (80052c4 <ADC_Init+0x12c>)
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80051a0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	6841      	ldr	r1, [r0, #4]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80051aa:	6802      	ldr	r2, [r0, #0]
 80051ac:	6853      	ldr	r3, [r2, #4]
 80051ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80051b4:	6802      	ldr	r2, [r0, #0]
 80051b6:	6853      	ldr	r3, [r2, #4]
 80051b8:	6901      	ldr	r1, [r0, #16]
 80051ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80051be:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80051c0:	6802      	ldr	r2, [r0, #0]
 80051c2:	6853      	ldr	r3, [r2, #4]
 80051c4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80051c8:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80051ca:	6802      	ldr	r2, [r0, #0]
 80051cc:	6853      	ldr	r3, [r2, #4]
 80051ce:	6881      	ldr	r1, [r0, #8]
 80051d0:	430b      	orrs	r3, r1
 80051d2:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80051d4:	6802      	ldr	r2, [r0, #0]
 80051d6:	6893      	ldr	r3, [r2, #8]
 80051d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051dc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80051de:	6802      	ldr	r2, [r0, #0]
 80051e0:	6893      	ldr	r3, [r2, #8]
 80051e2:	68c1      	ldr	r1, [r0, #12]
 80051e4:	430b      	orrs	r3, r1
 80051e6:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80051ea:	4b37      	ldr	r3, [pc, #220]	; (80052c8 <ADC_Init+0x130>)
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d04b      	beq.n	8005288 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051f0:	6802      	ldr	r2, [r0, #0]
 80051f2:	6893      	ldr	r3, [r2, #8]
 80051f4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80051f8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80051fa:	6802      	ldr	r2, [r0, #0]
 80051fc:	6893      	ldr	r3, [r2, #8]
 80051fe:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005200:	430b      	orrs	r3, r1
 8005202:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005204:	6802      	ldr	r2, [r0, #0]
 8005206:	6893      	ldr	r3, [r2, #8]
 8005208:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800520c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800520e:	6802      	ldr	r2, [r0, #0]
 8005210:	6893      	ldr	r3, [r2, #8]
 8005212:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005214:	430b      	orrs	r3, r1
 8005216:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005218:	6802      	ldr	r2, [r0, #0]
 800521a:	6893      	ldr	r3, [r2, #8]
 800521c:	f023 0302 	bic.w	r3, r3, #2
 8005220:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005222:	6802      	ldr	r2, [r0, #0]
 8005224:	6893      	ldr	r3, [r2, #8]
 8005226:	7e01      	ldrb	r1, [r0, #24]
 8005228:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800522c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800522e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d133      	bne.n	800529e <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005236:	6802      	ldr	r2, [r0, #0]
 8005238:	6853      	ldr	r3, [r2, #4]
 800523a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800523e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005240:	6802      	ldr	r2, [r0, #0]
 8005242:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005244:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005248:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800524a:	6801      	ldr	r1, [r0, #0]
 800524c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800524e:	69c2      	ldr	r2, [r0, #28]
 8005250:	3a01      	subs	r2, #1
 8005252:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005256:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005258:	6802      	ldr	r2, [r0, #0]
 800525a:	6893      	ldr	r3, [r2, #8]
 800525c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005260:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005262:	6802      	ldr	r2, [r0, #0]
 8005264:	6893      	ldr	r3, [r2, #8]
 8005266:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 800526a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800526e:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005270:	6802      	ldr	r2, [r0, #0]
 8005272:	6893      	ldr	r3, [r2, #8]
 8005274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005278:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800527a:	6802      	ldr	r2, [r0, #0]
 800527c:	6893      	ldr	r3, [r2, #8]
 800527e:	6941      	ldr	r1, [r0, #20]
 8005280:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8005284:	6093      	str	r3, [r2, #8]
}
 8005286:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005288:	6802      	ldr	r2, [r0, #0]
 800528a:	6893      	ldr	r3, [r2, #8]
 800528c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005290:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005292:	6802      	ldr	r2, [r0, #0]
 8005294:	6893      	ldr	r3, [r2, #8]
 8005296:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800529a:	6093      	str	r3, [r2, #8]
 800529c:	e7bc      	b.n	8005218 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800529e:	6802      	ldr	r2, [r0, #0]
 80052a0:	6853      	ldr	r3, [r2, #4]
 80052a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052a6:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80052a8:	6802      	ldr	r2, [r0, #0]
 80052aa:	6853      	ldr	r3, [r2, #4]
 80052ac:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80052b0:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80052b2:	6801      	ldr	r1, [r0, #0]
 80052b4:	684b      	ldr	r3, [r1, #4]
 80052b6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80052b8:	3a01      	subs	r2, #1
 80052ba:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80052be:	604b      	str	r3, [r1, #4]
 80052c0:	e7be      	b.n	8005240 <ADC_Init+0xa8>
 80052c2:	bf00      	nop
 80052c4:	40012300 	.word	0x40012300
 80052c8:	0f000001 	.word	0x0f000001

080052cc <HAL_ADC_Init>:
  if(hadc == NULL)
 80052cc:	b338      	cbz	r0, 800531e <HAL_ADC_Init+0x52>
{
 80052ce:	b510      	push	{r4, lr}
 80052d0:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80052d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80052d4:	b143      	cbz	r3, 80052e8 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052d8:	f013 0f10 	tst.w	r3, #16
 80052dc:	d00b      	beq.n	80052f6 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80052de:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80052e0:	2300      	movs	r3, #0
 80052e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80052e6:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80052e8:	f7ff f818 	bl	800431c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80052ec:	2300      	movs	r3, #0
 80052ee:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80052f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80052f4:	e7ef      	b.n	80052d6 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80052f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80052fc:	f023 0302 	bic.w	r3, r3, #2
 8005300:	f043 0302 	orr.w	r3, r3, #2
 8005304:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8005306:	4620      	mov	r0, r4
 8005308:	f7ff ff46 	bl	8005198 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 800530c:	2000      	movs	r0, #0
 800530e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005310:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005312:	f023 0303 	bic.w	r3, r3, #3
 8005316:	f043 0301 	orr.w	r3, r3, #1
 800531a:	6423      	str	r3, [r4, #64]	; 0x40
 800531c:	e7e0      	b.n	80052e0 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800531e:	2001      	movs	r0, #1
}
 8005320:	4770      	bx	lr
	...

08005324 <HAL_ADC_ConfigChannel>:
{
 8005324:	b430      	push	{r4, r5}
 8005326:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800532c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	f000 80b7 	beq.w	80054a4 <HAL_ADC_ConfigChannel+0x180>
 8005336:	2301      	movs	r3, #1
 8005338:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800533c:	680b      	ldr	r3, [r1, #0]
 800533e:	2b09      	cmp	r3, #9
 8005340:	d93e      	bls.n	80053c0 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005342:	6805      	ldr	r5, [r0, #0]
 8005344:	68ea      	ldr	r2, [r5, #12]
 8005346:	b29b      	uxth	r3, r3
 8005348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800534c:	3b1e      	subs	r3, #30
 800534e:	2407      	movs	r4, #7
 8005350:	fa04 f303 	lsl.w	r3, r4, r3
 8005354:	ea22 0303 	bic.w	r3, r2, r3
 8005358:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800535a:	6805      	ldr	r5, [r0, #0]
 800535c:	68ea      	ldr	r2, [r5, #12]
 800535e:	688c      	ldr	r4, [r1, #8]
 8005360:	880b      	ldrh	r3, [r1, #0]
 8005362:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005366:	3b1e      	subs	r3, #30
 8005368:	fa04 f303 	lsl.w	r3, r4, r3
 800536c:	4313      	orrs	r3, r2
 800536e:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8005370:	684b      	ldr	r3, [r1, #4]
 8005372:	2b06      	cmp	r3, #6
 8005374:	d83a      	bhi.n	80053ec <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005376:	6805      	ldr	r5, [r0, #0]
 8005378:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800537a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800537e:	3b05      	subs	r3, #5
 8005380:	241f      	movs	r4, #31
 8005382:	fa04 f303 	lsl.w	r3, r4, r3
 8005386:	ea22 0303 	bic.w	r3, r2, r3
 800538a:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800538c:	6805      	ldr	r5, [r0, #0]
 800538e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005390:	684b      	ldr	r3, [r1, #4]
 8005392:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005396:	3b05      	subs	r3, #5
 8005398:	880c      	ldrh	r4, [r1, #0]
 800539a:	fa04 f303 	lsl.w	r3, r4, r3
 800539e:	4313      	orrs	r3, r2
 80053a0:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80053a2:	6802      	ldr	r2, [r0, #0]
 80053a4:	4b40      	ldr	r3, [pc, #256]	; (80054a8 <HAL_ADC_ConfigChannel+0x184>)
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d050      	beq.n	800544c <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80053aa:	6802      	ldr	r2, [r0, #0]
 80053ac:	4b3e      	ldr	r3, [pc, #248]	; (80054a8 <HAL_ADC_ConfigChannel+0x184>)
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d055      	beq.n	800545e <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 80053b2:	2300      	movs	r3, #0
 80053b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80053b8:	4618      	mov	r0, r3
}
 80053ba:	b002      	add	sp, #8
 80053bc:	bc30      	pop	{r4, r5}
 80053be:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80053c0:	6805      	ldr	r5, [r0, #0]
 80053c2:	692a      	ldr	r2, [r5, #16]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80053ca:	2407      	movs	r4, #7
 80053cc:	fa04 f303 	lsl.w	r3, r4, r3
 80053d0:	ea22 0303 	bic.w	r3, r2, r3
 80053d4:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80053d6:	6805      	ldr	r5, [r0, #0]
 80053d8:	692a      	ldr	r2, [r5, #16]
 80053da:	688c      	ldr	r4, [r1, #8]
 80053dc:	880b      	ldrh	r3, [r1, #0]
 80053de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80053e2:	fa04 f303 	lsl.w	r3, r4, r3
 80053e6:	4313      	orrs	r3, r2
 80053e8:	612b      	str	r3, [r5, #16]
 80053ea:	e7c1      	b.n	8005370 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 80053ec:	2b0c      	cmp	r3, #12
 80053ee:	d816      	bhi.n	800541e <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80053f0:	6805      	ldr	r5, [r0, #0]
 80053f2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80053f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80053f8:	3b23      	subs	r3, #35	; 0x23
 80053fa:	241f      	movs	r4, #31
 80053fc:	fa04 f303 	lsl.w	r3, r4, r3
 8005400:	ea22 0303 	bic.w	r3, r2, r3
 8005404:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005406:	6805      	ldr	r5, [r0, #0]
 8005408:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800540a:	684b      	ldr	r3, [r1, #4]
 800540c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005410:	3b23      	subs	r3, #35	; 0x23
 8005412:	880c      	ldrh	r4, [r1, #0]
 8005414:	fa04 f303 	lsl.w	r3, r4, r3
 8005418:	4313      	orrs	r3, r2
 800541a:	632b      	str	r3, [r5, #48]	; 0x30
 800541c:	e7c1      	b.n	80053a2 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800541e:	6805      	ldr	r5, [r0, #0]
 8005420:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005422:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005426:	3b41      	subs	r3, #65	; 0x41
 8005428:	241f      	movs	r4, #31
 800542a:	fa04 f303 	lsl.w	r3, r4, r3
 800542e:	ea22 0303 	bic.w	r3, r2, r3
 8005432:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005434:	6805      	ldr	r5, [r0, #0]
 8005436:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005438:	684b      	ldr	r3, [r1, #4]
 800543a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800543e:	3b41      	subs	r3, #65	; 0x41
 8005440:	880c      	ldrh	r4, [r1, #0]
 8005442:	fa04 f303 	lsl.w	r3, r4, r3
 8005446:	4313      	orrs	r3, r2
 8005448:	62eb      	str	r3, [r5, #44]	; 0x2c
 800544a:	e7aa      	b.n	80053a2 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800544c:	680b      	ldr	r3, [r1, #0]
 800544e:	2b12      	cmp	r3, #18
 8005450:	d1ab      	bne.n	80053aa <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005452:	4a16      	ldr	r2, [pc, #88]	; (80054ac <HAL_ADC_ConfigChannel+0x188>)
 8005454:	6853      	ldr	r3, [r2, #4]
 8005456:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800545a:	6053      	str	r3, [r2, #4]
 800545c:	e7a5      	b.n	80053aa <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800545e:	680b      	ldr	r3, [r1, #0]
 8005460:	3b10      	subs	r3, #16
 8005462:	2b01      	cmp	r3, #1
 8005464:	d8a5      	bhi.n	80053b2 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005466:	4a11      	ldr	r2, [pc, #68]	; (80054ac <HAL_ADC_ConfigChannel+0x188>)
 8005468:	6853      	ldr	r3, [r2, #4]
 800546a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800546e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005470:	680b      	ldr	r3, [r1, #0]
 8005472:	2b10      	cmp	r3, #16
 8005474:	d19d      	bne.n	80053b2 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005476:	4b0e      	ldr	r3, [pc, #56]	; (80054b0 <HAL_ADC_ConfigChannel+0x18c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800547e:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8005482:	f202 3283 	addw	r2, r2, #899	; 0x383
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	0c9b      	lsrs	r3, r3, #18
 800548c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005490:	005a      	lsls	r2, r3, #1
 8005492:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8005494:	e002      	b.n	800549c <HAL_ADC_ConfigChannel+0x178>
        counter--;
 8005496:	9b01      	ldr	r3, [sp, #4]
 8005498:	3b01      	subs	r3, #1
 800549a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800549c:	9b01      	ldr	r3, [sp, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f9      	bne.n	8005496 <HAL_ADC_ConfigChannel+0x172>
 80054a2:	e786      	b.n	80053b2 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 80054a4:	2002      	movs	r0, #2
 80054a6:	e788      	b.n	80053ba <HAL_ADC_ConfigChannel+0x96>
 80054a8:	40012000 	.word	0x40012000
 80054ac:	40012300 	.word	0x40012300
 80054b0:	20000038 	.word	0x20000038

080054b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054b4:	4a07      	ldr	r2, [pc, #28]	; (80054d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80054b6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80054bc:	041b      	lsls	r3, r3, #16
 80054be:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054c0:	0200      	lsls	r0, r0, #8
 80054c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054c6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80054c8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80054cc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80054d0:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80054d2:	4770      	bx	lr
 80054d4:	e000ed00 	.word	0xe000ed00

080054d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054d8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054da:	4b17      	ldr	r3, [pc, #92]	; (8005538 <HAL_NVIC_SetPriority+0x60>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054e2:	f1c3 0407 	rsb	r4, r3, #7
 80054e6:	2c04      	cmp	r4, #4
 80054e8:	bf28      	it	cs
 80054ea:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054ec:	1d1d      	adds	r5, r3, #4
 80054ee:	2d06      	cmp	r5, #6
 80054f0:	d918      	bls.n	8005524 <HAL_NVIC_SetPriority+0x4c>
 80054f2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80054f8:	fa05 f404 	lsl.w	r4, r5, r4
 80054fc:	ea21 0104 	bic.w	r1, r1, r4
 8005500:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005502:	fa05 f303 	lsl.w	r3, r5, r3
 8005506:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800550a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800550c:	2800      	cmp	r0, #0
 800550e:	db0b      	blt.n	8005528 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005510:	0109      	lsls	r1, r1, #4
 8005512:	b2c9      	uxtb	r1, r1
 8005514:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005518:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800551c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005520:	bc30      	pop	{r4, r5}
 8005522:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005524:	2300      	movs	r3, #0
 8005526:	e7e5      	b.n	80054f4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005528:	f000 000f 	and.w	r0, r0, #15
 800552c:	0109      	lsls	r1, r1, #4
 800552e:	b2c9      	uxtb	r1, r1
 8005530:	4b02      	ldr	r3, [pc, #8]	; (800553c <HAL_NVIC_SetPriority+0x64>)
 8005532:	5419      	strb	r1, [r3, r0]
 8005534:	e7f4      	b.n	8005520 <HAL_NVIC_SetPriority+0x48>
 8005536:	bf00      	nop
 8005538:	e000ed00 	.word	0xe000ed00
 800553c:	e000ed14 	.word	0xe000ed14

08005540 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005540:	2800      	cmp	r0, #0
 8005542:	db07      	blt.n	8005554 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005544:	f000 021f 	and.w	r2, r0, #31
 8005548:	0940      	lsrs	r0, r0, #5
 800554a:	2301      	movs	r3, #1
 800554c:	4093      	lsls	r3, r2
 800554e:	4a02      	ldr	r2, [pc, #8]	; (8005558 <HAL_NVIC_EnableIRQ+0x18>)
 8005550:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	e000e100 	.word	0xe000e100

0800555c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800555c:	b158      	cbz	r0, 8005576 <HAL_CRC_Init+0x1a>
{
 800555e:	b510      	push	{r4, lr}
 8005560:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005562:	7943      	ldrb	r3, [r0, #5]
 8005564:	b11b      	cbz	r3, 800556e <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005566:	2301      	movs	r3, #1
 8005568:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800556a:	2000      	movs	r0, #0
}
 800556c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800556e:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8005570:	f7fe feec 	bl	800434c <HAL_CRC_MspInit>
 8005574:	e7f7      	b.n	8005566 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8005576:	2001      	movs	r0, #1
}
 8005578:	4770      	bx	lr

0800557a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800557a:	b430      	push	{r4, r5}
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800557c:	2302      	movs	r3, #2
 800557e:	7143      	strb	r3, [r0, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005580:	6804      	ldr	r4, [r0, #0]
 8005582:	68a3      	ldr	r3, [r4, #8]
 8005584:	f043 0301 	orr.w	r3, r3, #1
 8005588:	60a3      	str	r3, [r4, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800558a:	2300      	movs	r3, #0
 800558c:	e004      	b.n	8005598 <HAL_CRC_Calculate+0x1e>
  {
    hcrc->Instance->DR = pBuffer[index];
 800558e:	6804      	ldr	r4, [r0, #0]
 8005590:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8005594:	6025      	str	r5, [r4, #0]
  for (index = 0U; index < BufferLength; index++)
 8005596:	3301      	adds	r3, #1
 8005598:	4293      	cmp	r3, r2
 800559a:	d3f8      	bcc.n	800558e <HAL_CRC_Calculate+0x14>
  }
  temp = hcrc->Instance->DR;
 800559c:	6803      	ldr	r3, [r0, #0]
 800559e:	681b      	ldr	r3, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80055a0:	2201      	movs	r2, #1
 80055a2:	7142      	strb	r2, [r0, #5]

  /* Return the CRC computed value */
  return temp;
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	bc30      	pop	{r4, r5}
 80055a8:	4770      	bx	lr

080055aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055aa:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055ac:	6805      	ldr	r5, [r0, #0]
 80055ae:	682c      	ldr	r4, [r5, #0]
 80055b0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80055b4:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80055b6:	6804      	ldr	r4, [r0, #0]
 80055b8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055ba:	6883      	ldr	r3, [r0, #8]
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d005      	beq.n	80055cc <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80055c0:	6803      	ldr	r3, [r0, #0]
 80055c2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80055c4:	6803      	ldr	r3, [r0, #0]
 80055c6:	60da      	str	r2, [r3, #12]
  }
}
 80055c8:	bc30      	pop	{r4, r5}
 80055ca:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80055cc:	6803      	ldr	r3, [r0, #0]
 80055ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80055d0:	6803      	ldr	r3, [r0, #0]
 80055d2:	60d9      	str	r1, [r3, #12]
 80055d4:	e7f8      	b.n	80055c8 <DMA_SetConfig+0x1e>
	...

080055d8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055d8:	6802      	ldr	r2, [r0, #0]
 80055da:	b2d3      	uxtb	r3, r2
 80055dc:	3b10      	subs	r3, #16
 80055de:	490b      	ldr	r1, [pc, #44]	; (800560c <DMA_CalcBaseAndBitshift+0x34>)
 80055e0:	fba1 1303 	umull	r1, r3, r1, r3
 80055e4:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055e6:	490a      	ldr	r1, [pc, #40]	; (8005610 <DMA_CalcBaseAndBitshift+0x38>)
 80055e8:	5cc9      	ldrb	r1, [r1, r3]
 80055ea:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d806      	bhi.n	80055fe <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80055f0:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80055f4:	f022 0203 	bic.w	r2, r2, #3
 80055f8:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80055fa:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80055fc:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80055fe:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8005602:	f022 0203 	bic.w	r2, r2, #3
 8005606:	3204      	adds	r2, #4
 8005608:	6582      	str	r2, [r0, #88]	; 0x58
 800560a:	e7f6      	b.n	80055fa <DMA_CalcBaseAndBitshift+0x22>
 800560c:	aaaaaaab 	.word	0xaaaaaaab
 8005610:	0800c880 	.word	0x0800c880

08005614 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005614:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005616:	6982      	ldr	r2, [r0, #24]
 8005618:	b992      	cbnz	r2, 8005640 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800561a:	2b01      	cmp	r3, #1
 800561c:	d00a      	beq.n	8005634 <DMA_CheckFifoParam+0x20>
 800561e:	b11b      	cbz	r3, 8005628 <DMA_CheckFifoParam+0x14>
 8005620:	2b02      	cmp	r3, #2
 8005622:	d001      	beq.n	8005628 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8005624:	2000      	movs	r0, #0
 8005626:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005628:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800562a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800562e:	d12c      	bne.n	800568a <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8005630:	2000      	movs	r0, #0
 8005632:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005634:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005636:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800563a:	d028      	beq.n	800568e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800563c:	2000      	movs	r0, #0
 800563e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005640:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005644:	d005      	beq.n	8005652 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005646:	2b02      	cmp	r3, #2
 8005648:	d929      	bls.n	800569e <DMA_CheckFifoParam+0x8a>
 800564a:	2b03      	cmp	r3, #3
 800564c:	d015      	beq.n	800567a <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 800564e:	2000      	movs	r0, #0
 8005650:	4770      	bx	lr
    switch (tmp)
 8005652:	2b03      	cmp	r3, #3
 8005654:	d803      	bhi.n	800565e <DMA_CheckFifoParam+0x4a>
 8005656:	e8df f003 	tbb	[pc, r3]
 800565a:	041c      	.short	0x041c
 800565c:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800565e:	2000      	movs	r0, #0
 8005660:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005662:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005664:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005668:	d115      	bne.n	8005696 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800566a:	2000      	movs	r0, #0
 800566c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800566e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005670:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005674:	d011      	beq.n	800569a <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8005676:	2000      	movs	r0, #0
 8005678:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800567a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800567c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005680:	d001      	beq.n	8005686 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8005682:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8005684:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8005686:	2000      	movs	r0, #0
 8005688:	4770      	bx	lr
        status = HAL_ERROR;
 800568a:	2001      	movs	r0, #1
 800568c:	4770      	bx	lr
        status = HAL_ERROR;
 800568e:	2001      	movs	r0, #1
 8005690:	4770      	bx	lr
      status = HAL_ERROR;
 8005692:	2001      	movs	r0, #1
 8005694:	4770      	bx	lr
        status = HAL_ERROR;
 8005696:	2001      	movs	r0, #1
 8005698:	4770      	bx	lr
        status = HAL_ERROR;
 800569a:	2001      	movs	r0, #1
 800569c:	4770      	bx	lr
      status = HAL_ERROR;
 800569e:	2001      	movs	r0, #1
 80056a0:	4770      	bx	lr
	...

080056a4 <HAL_DMA_Init>:
{
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80056a8:	f7ff fd70 	bl	800518c <HAL_GetTick>
  if(hdma == NULL)
 80056ac:	2c00      	cmp	r4, #0
 80056ae:	d05b      	beq.n	8005768 <HAL_DMA_Init+0xc4>
 80056b0:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80056b2:	2300      	movs	r3, #0
 80056b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80056b8:	2302      	movs	r3, #2
 80056ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80056be:	6822      	ldr	r2, [r4, #0]
 80056c0:	6813      	ldr	r3, [r2, #0]
 80056c2:	f023 0301 	bic.w	r3, r3, #1
 80056c6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	f012 0f01 	tst.w	r2, #1
 80056d0:	d00a      	beq.n	80056e8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056d2:	f7ff fd5b 	bl	800518c <HAL_GetTick>
 80056d6:	1b40      	subs	r0, r0, r5
 80056d8:	2805      	cmp	r0, #5
 80056da:	d9f5      	bls.n	80056c8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056dc:	2320      	movs	r3, #32
 80056de:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056e0:	2003      	movs	r0, #3
 80056e2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80056e6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80056e8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056ea:	4820      	ldr	r0, [pc, #128]	; (800576c <HAL_DMA_Init+0xc8>)
 80056ec:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056ee:	6861      	ldr	r1, [r4, #4]
 80056f0:	68a2      	ldr	r2, [r4, #8]
 80056f2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056f4:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056f6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056f8:	6921      	ldr	r1, [r4, #16]
 80056fa:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056fc:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056fe:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005700:	69a1      	ldr	r1, [r4, #24]
 8005702:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8005704:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005706:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8005708:	6a21      	ldr	r1, [r4, #32]
 800570a:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800570c:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800570e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005710:	2904      	cmp	r1, #4
 8005712:	d01e      	beq.n	8005752 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8005714:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8005716:	6826      	ldr	r6, [r4, #0]
 8005718:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800571a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800571e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005720:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005722:	2b04      	cmp	r3, #4
 8005724:	d107      	bne.n	8005736 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8005726:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005728:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800572a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800572c:	b11b      	cbz	r3, 8005736 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800572e:	4620      	mov	r0, r4
 8005730:	f7ff ff70 	bl	8005614 <DMA_CheckFifoParam>
 8005734:	b990      	cbnz	r0, 800575c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8005736:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005738:	4620      	mov	r0, r4
 800573a:	f7ff ff4d 	bl	80055d8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800573e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005740:	233f      	movs	r3, #63	; 0x3f
 8005742:	4093      	lsls	r3, r2
 8005744:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005746:	2000      	movs	r0, #0
 8005748:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800574a:	2301      	movs	r3, #1
 800574c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005750:	e7c9      	b.n	80056e6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005752:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005754:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005756:	4301      	orrs	r1, r0
 8005758:	430a      	orrs	r2, r1
 800575a:	e7db      	b.n	8005714 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800575c:	2340      	movs	r3, #64	; 0x40
 800575e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005760:	2001      	movs	r0, #1
 8005762:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8005766:	e7be      	b.n	80056e6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8005768:	2001      	movs	r0, #1
 800576a:	e7bc      	b.n	80056e6 <HAL_DMA_Init+0x42>
 800576c:	f010803f 	.word	0xf010803f

08005770 <HAL_DMA_Start_IT>:
{
 8005770:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005772:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005774:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8005778:	2c01      	cmp	r4, #1
 800577a:	d02c      	beq.n	80057d6 <HAL_DMA_Start_IT+0x66>
 800577c:	2401      	movs	r4, #1
 800577e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005782:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8005786:	b2e4      	uxtb	r4, r4
 8005788:	2c01      	cmp	r4, #1
 800578a:	d004      	beq.n	8005796 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 800578c:	2300      	movs	r3, #0
 800578e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8005792:	2002      	movs	r0, #2
}
 8005794:	bd38      	pop	{r3, r4, r5, pc}
 8005796:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005798:	2002      	movs	r0, #2
 800579a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800579e:	2000      	movs	r0, #0
 80057a0:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057a2:	4620      	mov	r0, r4
 80057a4:	f7ff ff01 	bl	80055aa <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057a8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80057aa:	233f      	movs	r3, #63	; 0x3f
 80057ac:	4093      	lsls	r3, r2
 80057ae:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80057b0:	6822      	ldr	r2, [r4, #0]
 80057b2:	6813      	ldr	r3, [r2, #0]
 80057b4:	f043 0316 	orr.w	r3, r3, #22
 80057b8:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80057ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057bc:	b123      	cbz	r3, 80057c8 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80057be:	6822      	ldr	r2, [r4, #0]
 80057c0:	6813      	ldr	r3, [r2, #0]
 80057c2:	f043 0308 	orr.w	r3, r3, #8
 80057c6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80057c8:	6822      	ldr	r2, [r4, #0]
 80057ca:	6813      	ldr	r3, [r2, #0]
 80057cc:	f043 0301 	orr.w	r3, r3, #1
 80057d0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057d2:	2000      	movs	r0, #0
 80057d4:	e7de      	b.n	8005794 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80057d6:	2002      	movs	r0, #2
 80057d8:	e7dc      	b.n	8005794 <HAL_DMA_Start_IT+0x24>

080057da <HAL_DMA_Abort>:
{
 80057da:	b570      	push	{r4, r5, r6, lr}
 80057dc:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057de:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80057e0:	f7ff fcd4 	bl	800518c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057e4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d006      	beq.n	80057fc <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057ee:	2380      	movs	r3, #128	; 0x80
 80057f0:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80057f2:	2300      	movs	r3, #0
 80057f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80057f8:	2001      	movs	r0, #1
}
 80057fa:	bd70      	pop	{r4, r5, r6, pc}
 80057fc:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057fe:	6822      	ldr	r2, [r4, #0]
 8005800:	6813      	ldr	r3, [r2, #0]
 8005802:	f023 0316 	bic.w	r3, r3, #22
 8005806:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005808:	6822      	ldr	r2, [r4, #0]
 800580a:	6953      	ldr	r3, [r2, #20]
 800580c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005810:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005814:	b1e3      	cbz	r3, 8005850 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005816:	6822      	ldr	r2, [r4, #0]
 8005818:	6813      	ldr	r3, [r2, #0]
 800581a:	f023 0308 	bic.w	r3, r3, #8
 800581e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005820:	6822      	ldr	r2, [r4, #0]
 8005822:	6813      	ldr	r3, [r2, #0]
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f013 0f01 	tst.w	r3, #1
 8005832:	d011      	beq.n	8005858 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005834:	f7ff fcaa 	bl	800518c <HAL_GetTick>
 8005838:	1b40      	subs	r0, r0, r5
 800583a:	2805      	cmp	r0, #5
 800583c:	d9f5      	bls.n	800582a <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800583e:	2320      	movs	r3, #32
 8005840:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8005842:	2300      	movs	r3, #0
 8005844:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005848:	2003      	movs	r0, #3
 800584a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 800584e:	e7d4      	b.n	80057fa <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005850:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1df      	bne.n	8005816 <HAL_DMA_Abort+0x3c>
 8005856:	e7e3      	b.n	8005820 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005858:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800585a:	233f      	movs	r3, #63	; 0x3f
 800585c:	4093      	lsls	r3, r2
 800585e:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8005860:	2000      	movs	r0, #0
 8005862:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005866:	2301      	movs	r3, #1
 8005868:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800586c:	e7c5      	b.n	80057fa <HAL_DMA_Abort+0x20>

0800586e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800586e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d003      	beq.n	8005880 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800587c:	2001      	movs	r0, #1
 800587e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8005880:	2305      	movs	r3, #5
 8005882:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005886:	6802      	ldr	r2, [r0, #0]
 8005888:	6813      	ldr	r3, [r2, #0]
 800588a:	f023 0301 	bic.w	r3, r3, #1
 800588e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005890:	2000      	movs	r0, #0
}
 8005892:	4770      	bx	lr

08005894 <HAL_DMA_IRQHandler>:
{
 8005894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005896:	b083      	sub	sp, #12
 8005898:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800589e:	4b72      	ldr	r3, [pc, #456]	; (8005a68 <HAL_DMA_IRQHandler+0x1d4>)
 80058a0:	681d      	ldr	r5, [r3, #0]
 80058a2:	4b72      	ldr	r3, [pc, #456]	; (8005a6c <HAL_DMA_IRQHandler+0x1d8>)
 80058a4:	fba3 3505 	umull	r3, r5, r3, r5
 80058a8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058aa:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80058ac:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80058ae:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80058b0:	2308      	movs	r3, #8
 80058b2:	4093      	lsls	r3, r2
 80058b4:	4233      	tst	r3, r6
 80058b6:	d010      	beq.n	80058da <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80058b8:	6803      	ldr	r3, [r0, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	f012 0f04 	tst.w	r2, #4
 80058c0:	d00b      	beq.n	80058da <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	f022 0204 	bic.w	r2, r2, #4
 80058c8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80058ca:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80058cc:	2308      	movs	r3, #8
 80058ce:	4093      	lsls	r3, r2
 80058d0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058d2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80058da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80058dc:	2301      	movs	r3, #1
 80058de:	4093      	lsls	r3, r2
 80058e0:	4233      	tst	r3, r6
 80058e2:	d009      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80058e4:	6822      	ldr	r2, [r4, #0]
 80058e6:	6952      	ldr	r2, [r2, #20]
 80058e8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80058ec:	d004      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80058ee:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80058f2:	f043 0302 	orr.w	r3, r3, #2
 80058f6:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058f8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80058fa:	2304      	movs	r3, #4
 80058fc:	4093      	lsls	r3, r2
 80058fe:	4233      	tst	r3, r6
 8005900:	d009      	beq.n	8005916 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	f012 0f02 	tst.w	r2, #2
 800590a:	d004      	beq.n	8005916 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800590c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800590e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005910:	f043 0304 	orr.w	r3, r3, #4
 8005914:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005916:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005918:	2310      	movs	r3, #16
 800591a:	4093      	lsls	r3, r2
 800591c:	4233      	tst	r3, r6
 800591e:	d024      	beq.n	800596a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005920:	6822      	ldr	r2, [r4, #0]
 8005922:	6812      	ldr	r2, [r2, #0]
 8005924:	f012 0f08 	tst.w	r2, #8
 8005928:	d01f      	beq.n	800596a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800592a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005934:	d00d      	beq.n	8005952 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800593c:	d104      	bne.n	8005948 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800593e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005940:	b19b      	cbz	r3, 800596a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8005942:	4620      	mov	r0, r4
 8005944:	4798      	blx	r3
 8005946:	e010      	b.n	800596a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005948:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800594a:	b173      	cbz	r3, 800596a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800594c:	4620      	mov	r0, r4
 800594e:	4798      	blx	r3
 8005950:	e00b      	b.n	800596a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005958:	d103      	bne.n	8005962 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	f022 0208 	bic.w	r2, r2, #8
 8005960:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005964:	b10b      	cbz	r3, 800596a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8005966:	4620      	mov	r0, r4
 8005968:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800596a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800596c:	2320      	movs	r3, #32
 800596e:	4093      	lsls	r3, r2
 8005970:	4233      	tst	r3, r6
 8005972:	d055      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005974:	6822      	ldr	r2, [r4, #0]
 8005976:	6812      	ldr	r2, [r2, #0]
 8005978:	f012 0f10 	tst.w	r2, #16
 800597c:	d050      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800597e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005980:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b05      	cmp	r3, #5
 8005988:	d00e      	beq.n	80059a8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005992:	d033      	beq.n	80059fc <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800599a:	d12a      	bne.n	80059f2 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 800599c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d03e      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80059a2:	4620      	mov	r0, r4
 80059a4:	4798      	blx	r3
 80059a6:	e03b      	b.n	8005a20 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059a8:	6822      	ldr	r2, [r4, #0]
 80059aa:	6813      	ldr	r3, [r2, #0]
 80059ac:	f023 0316 	bic.w	r3, r3, #22
 80059b0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059b2:	6822      	ldr	r2, [r4, #0]
 80059b4:	6953      	ldr	r3, [r2, #20]
 80059b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ba:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059be:	b1a3      	cbz	r3, 80059ea <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059c0:	6822      	ldr	r2, [r4, #0]
 80059c2:	6813      	ldr	r3, [r2, #0]
 80059c4:	f023 0308 	bic.w	r3, r3, #8
 80059c8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80059cc:	233f      	movs	r3, #63	; 0x3f
 80059ce:	4093      	lsls	r3, r2
 80059d0:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80059d2:	2300      	movs	r3, #0
 80059d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80059d8:	2301      	movs	r3, #1
 80059da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80059de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d03f      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80059e4:	4620      	mov	r0, r4
 80059e6:	4798      	blx	r3
 80059e8:	e03c      	b.n	8005a64 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e7      	bne.n	80059c0 <HAL_DMA_IRQHandler+0x12c>
 80059f0:	e7eb      	b.n	80059ca <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80059f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059f4:	b1a3      	cbz	r3, 8005a20 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80059f6:	4620      	mov	r0, r4
 80059f8:	4798      	blx	r3
 80059fa:	e011      	b.n	8005a20 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005a02:	d109      	bne.n	8005a18 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	f022 0210 	bic.w	r2, r2, #16
 8005a0a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005a18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a1a:	b10b      	cbz	r3, 8005a20 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a22:	b1fb      	cbz	r3, 8005a64 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a26:	f013 0f01 	tst.w	r3, #1
 8005a2a:	d017      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a2c:	2305      	movs	r3, #5
 8005a2e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005a32:	6822      	ldr	r2, [r4, #0]
 8005a34:	6813      	ldr	r3, [r2, #0]
 8005a36:	f023 0301 	bic.w	r3, r3, #1
 8005a3a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8005a3c:	9b01      	ldr	r3, [sp, #4]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	9301      	str	r3, [sp, #4]
 8005a42:	42ab      	cmp	r3, r5
 8005a44:	d804      	bhi.n	8005a50 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f013 0f01 	tst.w	r3, #1
 8005a4e:	d1f5      	bne.n	8005a3c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8005a50:	2300      	movs	r3, #0
 8005a52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005a56:	2301      	movs	r3, #1
 8005a58:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005a5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005a5e:	b10b      	cbz	r3, 8005a64 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8005a60:	4620      	mov	r0, r4
 8005a62:	4798      	blx	r3
}
 8005a64:	b003      	add	sp, #12
 8005a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a68:	20000038 	.word	0x20000038
 8005a6c:	1b4e81b5 	.word	0x1b4e81b5

08005a70 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005a70:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8005a72:	4770      	bx	lr

08005a74 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a74:	2300      	movs	r3, #0
 8005a76:	2b0f      	cmp	r3, #15
 8005a78:	f200 80c5 	bhi.w	8005c06 <HAL_GPIO_Init+0x192>
{
 8005a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	e039      	b.n	8005af6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a82:	2204      	movs	r2, #4
 8005a84:	e000      	b.n	8005a88 <HAL_GPIO_Init+0x14>
 8005a86:	2200      	movs	r2, #0
 8005a88:	40aa      	lsls	r2, r5
 8005a8a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a8c:	3402      	adds	r4, #2
 8005a8e:	4d5e      	ldr	r5, [pc, #376]	; (8005c08 <HAL_GPIO_Init+0x194>)
 8005a90:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a94:	4a5d      	ldr	r2, [pc, #372]	; (8005c0c <HAL_GPIO_Init+0x198>)
 8005a96:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005a98:	43f2      	mvns	r2, r6
 8005a9a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a9e:	684f      	ldr	r7, [r1, #4]
 8005aa0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8005aa4:	d001      	beq.n	8005aaa <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8005aa6:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8005aaa:	4c58      	ldr	r4, [pc, #352]	; (8005c0c <HAL_GPIO_Init+0x198>)
 8005aac:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8005aae:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8005ab0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ab4:	684f      	ldr	r7, [r1, #4]
 8005ab6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8005aba:	d001      	beq.n	8005ac0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8005abc:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8005ac0:	4c52      	ldr	r4, [pc, #328]	; (8005c0c <HAL_GPIO_Init+0x198>)
 8005ac2:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ac4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8005ac6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005aca:	684f      	ldr	r7, [r1, #4]
 8005acc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8005ad0:	d001      	beq.n	8005ad6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8005ad2:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8005ad6:	4c4d      	ldr	r4, [pc, #308]	; (8005c0c <HAL_GPIO_Init+0x198>)
 8005ad8:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8005ada:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8005adc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ade:	684d      	ldr	r5, [r1, #4]
 8005ae0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8005ae4:	d001      	beq.n	8005aea <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8005ae6:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8005aea:	4c48      	ldr	r4, [pc, #288]	; (8005c0c <HAL_GPIO_Init+0x198>)
 8005aec:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aee:	3301      	adds	r3, #1
 8005af0:	2b0f      	cmp	r3, #15
 8005af2:	f200 8086 	bhi.w	8005c02 <HAL_GPIO_Init+0x18e>
    ioposition = 0x01U << position;
 8005af6:	2201      	movs	r2, #1
 8005af8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005afa:	680c      	ldr	r4, [r1, #0]
 8005afc:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8005b00:	42b2      	cmp	r2, r6
 8005b02:	d1f4      	bne.n	8005aee <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b04:	684c      	ldr	r4, [r1, #4]
 8005b06:	1e65      	subs	r5, r4, #1
 8005b08:	2d01      	cmp	r5, #1
 8005b0a:	d903      	bls.n	8005b14 <HAL_GPIO_Init+0xa0>
 8005b0c:	2c11      	cmp	r4, #17
 8005b0e:	d001      	beq.n	8005b14 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b10:	2c12      	cmp	r4, #18
 8005b12:	d112      	bne.n	8005b3a <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8005b14:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b16:	005f      	lsls	r7, r3, #1
 8005b18:	2403      	movs	r4, #3
 8005b1a:	40bc      	lsls	r4, r7
 8005b1c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b20:	68cc      	ldr	r4, [r1, #12]
 8005b22:	40bc      	lsls	r4, r7
 8005b24:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8005b26:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8005b28:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b2a:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005b2e:	684c      	ldr	r4, [r1, #4]
 8005b30:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8005b34:	409a      	lsls	r2, r3
 8005b36:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8005b38:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8005b3a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b3c:	005f      	lsls	r7, r3, #1
 8005b3e:	2203      	movs	r2, #3
 8005b40:	40ba      	lsls	r2, r7
 8005b42:	43d2      	mvns	r2, r2
 8005b44:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b46:	688d      	ldr	r5, [r1, #8]
 8005b48:	40bd      	lsls	r5, r7
 8005b4a:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8005b4c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b4e:	684c      	ldr	r4, [r1, #4]
 8005b50:	2c02      	cmp	r4, #2
 8005b52:	d001      	beq.n	8005b58 <HAL_GPIO_Init+0xe4>
 8005b54:	2c12      	cmp	r4, #18
 8005b56:	d113      	bne.n	8005b80 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8005b58:	08dd      	lsrs	r5, r3, #3
 8005b5a:	3508      	adds	r5, #8
 8005b5c:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b60:	f003 0407 	and.w	r4, r3, #7
 8005b64:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005b68:	240f      	movs	r4, #15
 8005b6a:	fa04 f40c 	lsl.w	r4, r4, ip
 8005b6e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b72:	690c      	ldr	r4, [r1, #16]
 8005b74:	fa04 f40c 	lsl.w	r4, r4, ip
 8005b78:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005b7c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8005b80:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b82:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b84:	684c      	ldr	r4, [r1, #4]
 8005b86:	f004 0403 	and.w	r4, r4, #3
 8005b8a:	40bc      	lsls	r4, r7
 8005b8c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8005b8e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b90:	684a      	ldr	r2, [r1, #4]
 8005b92:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8005b96:	d0aa      	beq.n	8005aee <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b98:	2200      	movs	r2, #0
 8005b9a:	9201      	str	r2, [sp, #4]
 8005b9c:	4a1c      	ldr	r2, [pc, #112]	; (8005c10 <HAL_GPIO_Init+0x19c>)
 8005b9e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005ba0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8005ba4:	6454      	str	r4, [r2, #68]	; 0x44
 8005ba6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005ba8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005bac:	9201      	str	r2, [sp, #4]
 8005bae:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005bb0:	089c      	lsrs	r4, r3, #2
 8005bb2:	1ca5      	adds	r5, r4, #2
 8005bb4:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <HAL_GPIO_Init+0x194>)
 8005bb6:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bba:	f003 0203 	and.w	r2, r3, #3
 8005bbe:	0095      	lsls	r5, r2, #2
 8005bc0:	220f      	movs	r2, #15
 8005bc2:	40aa      	lsls	r2, r5
 8005bc4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bc8:	4a12      	ldr	r2, [pc, #72]	; (8005c14 <HAL_GPIO_Init+0x1a0>)
 8005bca:	4290      	cmp	r0, r2
 8005bcc:	f43f af5b 	beq.w	8005a86 <HAL_GPIO_Init+0x12>
 8005bd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bd4:	4290      	cmp	r0, r2
 8005bd6:	d00e      	beq.n	8005bf6 <HAL_GPIO_Init+0x182>
 8005bd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bdc:	4290      	cmp	r0, r2
 8005bde:	d00c      	beq.n	8005bfa <HAL_GPIO_Init+0x186>
 8005be0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005be4:	4290      	cmp	r0, r2
 8005be6:	d00a      	beq.n	8005bfe <HAL_GPIO_Init+0x18a>
 8005be8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bec:	4290      	cmp	r0, r2
 8005bee:	f43f af48 	beq.w	8005a82 <HAL_GPIO_Init+0xe>
 8005bf2:	2207      	movs	r2, #7
 8005bf4:	e748      	b.n	8005a88 <HAL_GPIO_Init+0x14>
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	e746      	b.n	8005a88 <HAL_GPIO_Init+0x14>
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	e744      	b.n	8005a88 <HAL_GPIO_Init+0x14>
 8005bfe:	2203      	movs	r2, #3
 8005c00:	e742      	b.n	8005a88 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8005c02:	b003      	add	sp, #12
 8005c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c06:	4770      	bx	lr
 8005c08:	40013800 	.word	0x40013800
 8005c0c:	40013c00 	.word	0x40013c00
 8005c10:	40023800 	.word	0x40023800
 8005c14:	40020000 	.word	0x40020000

08005c18 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c18:	6903      	ldr	r3, [r0, #16]
 8005c1a:	4219      	tst	r1, r3
 8005c1c:	d101      	bne.n	8005c22 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c1e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8005c20:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8005c22:	2001      	movs	r0, #1
 8005c24:	4770      	bx	lr

08005c26 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c26:	b912      	cbnz	r2, 8005c2e <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c28:	0409      	lsls	r1, r1, #16
 8005c2a:	6181      	str	r1, [r0, #24]
  }
}
 8005c2c:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8005c2e:	6181      	str	r1, [r0, #24]
 8005c30:	4770      	bx	lr
	...

08005c34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c34:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c36:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	4203      	tst	r3, r0
 8005c3c:	d100      	bne.n	8005c40 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8005c3e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c40:	4b02      	ldr	r3, [pc, #8]	; (8005c4c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005c42:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c44:	f7fd ffe2 	bl	8003c0c <HAL_GPIO_EXTI_Callback>
}
 8005c48:	e7f9      	b.n	8005c3e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005c4a:	bf00      	nop
 8005c4c:	40013c00 	.word	0x40013c00

08005c50 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c50:	6803      	ldr	r3, [r0, #0]
 8005c52:	695a      	ldr	r2, [r3, #20]
 8005c54:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005c58:	d011      	beq.n	8005c7e <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c5e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c60:	2300      	movs	r3, #0
 8005c62:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c64:	2220      	movs	r2, #32
 8005c66:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c6a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c6e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005c70:	f042 0204 	orr.w	r2, r2, #4
 8005c74:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c76:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8005c7a:	2001      	movs	r0, #1
 8005c7c:	4770      	bx	lr
  }
  return HAL_OK;
 8005c7e:	2000      	movs	r0, #0
}
 8005c80:	4770      	bx	lr

08005c82 <I2C_WaitOnFlagUntilTimeout>:
{
 8005c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c84:	4606      	mov	r6, r0
 8005c86:	460c      	mov	r4, r1
 8005c88:	4617      	mov	r7, r2
 8005c8a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c8c:	e022      	b.n	8005cd4 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c8e:	f7ff fa7d 	bl	800518c <HAL_GetTick>
 8005c92:	9b06      	ldr	r3, [sp, #24]
 8005c94:	1ac0      	subs	r0, r0, r3
 8005c96:	42a8      	cmp	r0, r5
 8005c98:	d800      	bhi.n	8005c9c <I2C_WaitOnFlagUntilTimeout+0x1a>
 8005c9a:	b9dd      	cbnz	r5, 8005cd4 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ca6:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005caa:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8005cac:	f042 0220 	orr.w	r2, r2, #32
 8005cb0:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005cb2:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8005cb6:	2001      	movs	r0, #1
 8005cb8:	e01a      	b.n	8005cf0 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cba:	6833      	ldr	r3, [r6, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	ea24 0303 	bic.w	r3, r4, r3
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	fab3 f383 	clz	r3, r3
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	429f      	cmp	r7, r3
 8005ccc:	d10f      	bne.n	8005cee <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8005cce:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005cd2:	d1dc      	bne.n	8005c8e <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cd4:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d0ee      	beq.n	8005cba <I2C_WaitOnFlagUntilTimeout+0x38>
 8005cdc:	6833      	ldr	r3, [r6, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	ea24 0303 	bic.w	r3, r4, r3
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	fab3 f383 	clz	r3, r3
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	e7ed      	b.n	8005cca <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8005cee:	2000      	movs	r0, #0
}
 8005cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	460d      	mov	r5, r1
 8005cf8:	4616      	mov	r6, r2
 8005cfa:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cfc:	e03c      	b.n	8005d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d04:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d0c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d12:	2220      	movs	r2, #32
 8005d14:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005d1e:	f042 0204 	orr.w	r2, r2, #4
 8005d22:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005d24:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8005d28:	2001      	movs	r0, #1
 8005d2a:	e033      	b.n	8005d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d2c:	f7ff fa2e 	bl	800518c <HAL_GetTick>
 8005d30:	1bc0      	subs	r0, r0, r7
 8005d32:	42b0      	cmp	r0, r6
 8005d34:	d800      	bhi.n	8005d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8005d36:	b9fe      	cbnz	r6, 8005d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005d48:	f042 0220 	orr.w	r2, r2, #32
 8005d4c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005d4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005d52:	2001      	movs	r0, #1
 8005d54:	e01e      	b.n	8005d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	ea25 0303 	bic.w	r3, r5, r3
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3300      	adds	r3, #0
 8005d62:	bf18      	it	ne
 8005d64:	2301      	movne	r3, #1
 8005d66:	b1a3      	cbz	r3, 8005d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	695a      	ldr	r2, [r3, #20]
 8005d6c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005d70:	d1c5      	bne.n	8005cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8005d72:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8005d76:	d1d9      	bne.n	8005d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d78:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d0ea      	beq.n	8005d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	ea25 0303 	bic.w	r3, r5, r3
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3300      	adds	r3, #0
 8005d8c:	bf18      	it	ne
 8005d8e:	2301      	movne	r3, #1
 8005d90:	e7e9      	b.n	8005d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8005d92:	2000      	movs	r0, #0
}
 8005d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d96 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005d96:	b570      	push	{r4, r5, r6, lr}
 8005d98:	4604      	mov	r4, r0
 8005d9a:	460d      	mov	r5, r1
 8005d9c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005da6:	d11c      	bne.n	8005de2 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005da8:	4620      	mov	r0, r4
 8005daa:	f7ff ff51 	bl	8005c50 <I2C_IsAcknowledgeFailed>
 8005dae:	b9d0      	cbnz	r0, 8005de6 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005db0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005db4:	d0f3      	beq.n	8005d9e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db6:	f7ff f9e9 	bl	800518c <HAL_GetTick>
 8005dba:	1b80      	subs	r0, r0, r6
 8005dbc:	42a8      	cmp	r0, r5
 8005dbe:	d801      	bhi.n	8005dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005dc0:	2d00      	cmp	r5, #0
 8005dc2:	d1ec      	bne.n	8005d9e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dd2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005dd4:	f042 0220 	orr.w	r2, r2, #32
 8005dd8:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005dda:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005dde:	2001      	movs	r0, #1
 8005de0:	e000      	b.n	8005de4 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8005de2:	2000      	movs	r0, #0
}
 8005de4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005de6:	2001      	movs	r0, #1
 8005de8:	e7fc      	b.n	8005de4 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08005dec <I2C_RequestMemoryWrite>:
{
 8005dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	4604      	mov	r4, r0
 8005df4:	4688      	mov	r8, r1
 8005df6:	4616      	mov	r6, r2
 8005df8:	461f      	mov	r7, r3
 8005dfa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dfc:	6802      	ldr	r2, [r0, #0]
 8005dfe:	6813      	ldr	r3, [r2, #0]
 8005e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e04:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e06:	9500      	str	r5, [sp, #0]
 8005e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e10:	f7ff ff37 	bl	8005c82 <I2C_WaitOnFlagUntilTimeout>
 8005e14:	b160      	cbz	r0, 8005e30 <I2C_RequestMemoryWrite+0x44>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005e1e:	d04f      	beq.n	8005ec0 <I2C_RequestMemoryWrite+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e24:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	b004      	add	sp, #16
 8005e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e30:	6822      	ldr	r2, [r4, #0]
 8005e32:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8005e36:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e38:	462b      	mov	r3, r5
 8005e3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e3c:	4921      	ldr	r1, [pc, #132]	; (8005ec4 <I2C_RequestMemoryWrite+0xd8>)
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f7ff ff57 	bl	8005cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e44:	b108      	cbz	r0, 8005e4a <I2C_RequestMemoryWrite+0x5e>
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e7ee      	b.n	8005e28 <I2C_RequestMemoryWrite+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	9303      	str	r3, [sp, #12]
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	695a      	ldr	r2, [r3, #20]
 8005e52:	9203      	str	r2, [sp, #12]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	9303      	str	r3, [sp, #12]
 8005e58:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e5a:	462a      	mov	r2, r5
 8005e5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f7ff ff99 	bl	8005d96 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	b158      	cbz	r0, 8005e80 <I2C_RequestMemoryWrite+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d001      	beq.n	8005e72 <I2C_RequestMemoryWrite+0x86>
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e7da      	b.n	8005e28 <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	6813      	ldr	r3, [r2, #0]
 8005e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e7a:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e7d3      	b.n	8005e28 <I2C_RequestMemoryWrite+0x3c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e80:	2f01      	cmp	r7, #1
 8005e82:	d00e      	beq.n	8005ea2 <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	0a32      	lsrs	r2, r6, #8
 8005e88:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e8a:	462a      	mov	r2, r5
 8005e8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f7ff ff81 	bl	8005d96 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e94:	4603      	mov	r3, r0
 8005e96:	b178      	cbz	r0, 8005eb8 <I2C_RequestMemoryWrite+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d005      	beq.n	8005eaa <I2C_RequestMemoryWrite+0xbe>
      return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e7c2      	b.n	8005e28 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ea2:	6822      	ldr	r2, [r4, #0]
 8005ea4:	b2f6      	uxtb	r6, r6
 8005ea6:	6116      	str	r6, [r2, #16]
 8005ea8:	e7be      	b.n	8005e28 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eaa:	6822      	ldr	r2, [r4, #0]
 8005eac:	6813      	ldr	r3, [r2, #0]
 8005eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eb2:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e7b7      	b.n	8005e28 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eb8:	6822      	ldr	r2, [r4, #0]
 8005eba:	b2f6      	uxtb	r6, r6
 8005ebc:	6116      	str	r6, [r2, #16]
 8005ebe:	e7b3      	b.n	8005e28 <I2C_RequestMemoryWrite+0x3c>
    return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e7b1      	b.n	8005e28 <I2C_RequestMemoryWrite+0x3c>
 8005ec4:	00010002 	.word	0x00010002

08005ec8 <I2C_RequestMemoryRead>:
{
 8005ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	4604      	mov	r4, r0
 8005ed0:	460e      	mov	r6, r1
 8005ed2:	4617      	mov	r7, r2
 8005ed4:	4698      	mov	r8, r3
 8005ed6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed8:	6802      	ldr	r2, [r0, #0]
 8005eda:	6813      	ldr	r3, [r2, #0]
 8005edc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ee0:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ee2:	6802      	ldr	r2, [r0, #0]
 8005ee4:	6813      	ldr	r3, [r2, #0]
 8005ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eea:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eec:	9500      	str	r5, [sp, #0]
 8005eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ef6:	f7ff fec4 	bl	8005c82 <I2C_WaitOnFlagUntilTimeout>
 8005efa:	b168      	cbz	r0, 8005f18 <I2C_RequestMemoryRead+0x50>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005f04:	f000 8089 	beq.w	800601a <I2C_RequestMemoryRead+0x152>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f0c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	b004      	add	sp, #16
 8005f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f18:	b2f6      	uxtb	r6, r6
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 8005f20:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f22:	462b      	mov	r3, r5
 8005f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f26:	493f      	ldr	r1, [pc, #252]	; (8006024 <I2C_RequestMemoryRead+0x15c>)
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f7ff fee2 	bl	8005cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f2e:	b108      	cbz	r0, 8005f34 <I2C_RequestMemoryRead+0x6c>
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e7ed      	b.n	8005f10 <I2C_RequestMemoryRead+0x48>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f34:	2300      	movs	r3, #0
 8005f36:	9303      	str	r3, [sp, #12]
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	695a      	ldr	r2, [r3, #20]
 8005f3c:	9203      	str	r2, [sp, #12]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	9303      	str	r3, [sp, #12]
 8005f42:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f44:	462a      	mov	r2, r5
 8005f46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f7ff ff24 	bl	8005d96 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f4e:	b158      	cbz	r0, 8005f68 <I2C_RequestMemoryRead+0xa0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d001      	beq.n	8005f5a <I2C_RequestMemoryRead+0x92>
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e7da      	b.n	8005f10 <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5a:	6822      	ldr	r2, [r4, #0]
 8005f5c:	6813      	ldr	r3, [r2, #0]
 8005f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f62:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e7d3      	b.n	8005f10 <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f68:	f1b8 0f01 	cmp.w	r8, #1
 8005f6c:	d10d      	bne.n	8005f8a <I2C_RequestMemoryRead+0xc2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	b2ff      	uxtb	r7, r7
 8005f72:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f74:	462a      	mov	r2, r5
 8005f76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f7ff ff0c 	bl	8005d96 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f7e:	b320      	cbz	r0, 8005fca <I2C_RequestMemoryRead+0x102>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d01a      	beq.n	8005fbc <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e7c2      	b.n	8005f10 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	0a3a      	lsrs	r2, r7, #8
 8005f8e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f90:	462a      	mov	r2, r5
 8005f92:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f94:	4620      	mov	r0, r4
 8005f96:	f7ff fefe 	bl	8005d96 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f9a:	b158      	cbz	r0, 8005fb4 <I2C_RequestMemoryRead+0xec>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d001      	beq.n	8005fa6 <I2C_RequestMemoryRead+0xde>
      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e7b4      	b.n	8005f10 <I2C_RequestMemoryRead+0x48>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa6:	6822      	ldr	r2, [r4, #0]
 8005fa8:	6813      	ldr	r3, [r2, #0]
 8005faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fae:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e7ad      	b.n	8005f10 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	b2ff      	uxtb	r7, r7
 8005fb8:	611f      	str	r7, [r3, #16]
 8005fba:	e7db      	b.n	8005f74 <I2C_RequestMemoryRead+0xac>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbc:	6822      	ldr	r2, [r4, #0]
 8005fbe:	6813      	ldr	r3, [r2, #0]
 8005fc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fc4:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e7a2      	b.n	8005f10 <I2C_RequestMemoryRead+0x48>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fca:	6822      	ldr	r2, [r4, #0]
 8005fcc:	6813      	ldr	r3, [r2, #0]
 8005fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fd4:	9500      	str	r5, [sp, #0]
 8005fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f7ff fe4f 	bl	8005c82 <I2C_WaitOnFlagUntilTimeout>
 8005fe4:	b148      	cbz	r0, 8005ffa <I2C_RequestMemoryRead+0x132>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005fee:	d016      	beq.n	800601e <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ff4:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e78a      	b.n	8005f10 <I2C_RequestMemoryRead+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	f046 0601 	orr.w	r6, r6, #1
 8006000:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006002:	462b      	mov	r3, r5
 8006004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006006:	4907      	ldr	r1, [pc, #28]	; (8006024 <I2C_RequestMemoryRead+0x15c>)
 8006008:	4620      	mov	r0, r4
 800600a:	f7ff fe72 	bl	8005cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800600e:	4603      	mov	r3, r0
 8006010:	2800      	cmp	r0, #0
 8006012:	f43f af7d 	beq.w	8005f10 <I2C_RequestMemoryRead+0x48>
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e77a      	b.n	8005f10 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e778      	b.n	8005f10 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e776      	b.n	8005f10 <I2C_RequestMemoryRead+0x48>
 8006022:	bf00      	nop
 8006024:	00010002 	.word	0x00010002

08006028 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8006028:	b570      	push	{r4, r5, r6, lr}
 800602a:	4604      	mov	r4, r0
 800602c:	460d      	mov	r5, r1
 800602e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	f013 0f04 	tst.w	r3, #4
 8006038:	d11c      	bne.n	8006074 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800603a:	4620      	mov	r0, r4
 800603c:	f7ff fe08 	bl	8005c50 <I2C_IsAcknowledgeFailed>
 8006040:	b9d0      	cbnz	r0, 8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8006042:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8006046:	d0f3      	beq.n	8006030 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006048:	f7ff f8a0 	bl	800518c <HAL_GetTick>
 800604c:	1b80      	subs	r0, r0, r6
 800604e:	42a8      	cmp	r0, r5
 8006050:	d801      	bhi.n	8006056 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8006052:	2d00      	cmp	r5, #0
 8006054:	d1ec      	bne.n	8006030 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006056:	2300      	movs	r3, #0
 8006058:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800605a:	2220      	movs	r2, #32
 800605c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006060:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006064:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006066:	f042 0220 	orr.w	r2, r2, #32
 800606a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800606c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8006070:	2001      	movs	r0, #1
 8006072:	e000      	b.n	8006076 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8006074:	2000      	movs	r0, #0
}
 8006076:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006078:	2001      	movs	r0, #1
 800607a:	e7fc      	b.n	8006076 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

0800607c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4605      	mov	r5, r0
 8006080:	460c      	mov	r4, r1
 8006082:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	695a      	ldr	r2, [r3, #20]
 8006088:	f012 0f40 	tst.w	r2, #64	; 0x40
 800608c:	d129      	bne.n	80060e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800608e:	695a      	ldr	r2, [r3, #20]
 8006090:	f012 0f10 	tst.w	r2, #16
 8006094:	d115      	bne.n	80060c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006096:	f7ff f879 	bl	800518c <HAL_GetTick>
 800609a:	1b80      	subs	r0, r0, r6
 800609c:	42a0      	cmp	r0, r4
 800609e:	d801      	bhi.n	80060a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 80060a0:	2c00      	cmp	r4, #0
 80060a2:	d1ef      	bne.n	8006084 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060a4:	2300      	movs	r3, #0
 80060a6:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060a8:	2220      	movs	r2, #32
 80060aa:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ae:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060b2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80060b4:	f042 0220 	orr.w	r2, r2, #32
 80060b8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80060ba:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80060be:	2001      	movs	r0, #1
}
 80060c0:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060c2:	f06f 0210 	mvn.w	r2, #16
 80060c6:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060c8:	2300      	movs	r3, #0
 80060ca:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060cc:	2220      	movs	r2, #32
 80060ce:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060d2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060d6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80060d8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80060da:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80060de:	2001      	movs	r0, #1
 80060e0:	e7ee      	b.n	80060c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 80060e2:	2000      	movs	r0, #0
 80060e4:	e7ec      	b.n	80060c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

080060e8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80060e8:	2800      	cmp	r0, #0
 80060ea:	f000 80c8 	beq.w	800627e <HAL_I2C_Init+0x196>
{
 80060ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d075      	beq.n	80061e6 <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80060fa:	2324      	movs	r3, #36	; 0x24
 80060fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8006100:	6822      	ldr	r2, [r4, #0]
 8006102:	6813      	ldr	r3, [r2, #0]
 8006104:	f023 0301 	bic.w	r3, r3, #1
 8006108:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	6813      	ldr	r3, [r2, #0]
 800610e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006112:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006114:	6822      	ldr	r2, [r4, #0]
 8006116:	6813      	ldr	r3, [r2, #0]
 8006118:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800611c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800611e:	f000 fea7 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006122:	6862      	ldr	r2, [r4, #4]
 8006124:	4b58      	ldr	r3, [pc, #352]	; (8006288 <HAL_I2C_Init+0x1a0>)
 8006126:	429a      	cmp	r2, r3
 8006128:	d862      	bhi.n	80061f0 <HAL_I2C_Init+0x108>
 800612a:	4b58      	ldr	r3, [pc, #352]	; (800628c <HAL_I2C_Init+0x1a4>)
 800612c:	4298      	cmp	r0, r3
 800612e:	bf8c      	ite	hi
 8006130:	2300      	movhi	r3, #0
 8006132:	2301      	movls	r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	f040 80a4 	bne.w	8006282 <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 800613a:	4b55      	ldr	r3, [pc, #340]	; (8006290 <HAL_I2C_Init+0x1a8>)
 800613c:	fba3 2300 	umull	r2, r3, r3, r0
 8006140:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006142:	6821      	ldr	r1, [r4, #0]
 8006144:	684a      	ldr	r2, [r1, #4]
 8006146:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800614a:	431a      	orrs	r2, r3
 800614c:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800614e:	6825      	ldr	r5, [r4, #0]
 8006150:	6a2a      	ldr	r2, [r5, #32]
 8006152:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006156:	6866      	ldr	r6, [r4, #4]
 8006158:	494b      	ldr	r1, [pc, #300]	; (8006288 <HAL_I2C_Init+0x1a0>)
 800615a:	428e      	cmp	r6, r1
 800615c:	d84e      	bhi.n	80061fc <HAL_I2C_Init+0x114>
 800615e:	3301      	adds	r3, #1
 8006160:	4313      	orrs	r3, r2
 8006162:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006164:	6825      	ldr	r5, [r4, #0]
 8006166:	69e9      	ldr	r1, [r5, #28]
 8006168:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800616c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006170:	6863      	ldr	r3, [r4, #4]
 8006172:	4a45      	ldr	r2, [pc, #276]	; (8006288 <HAL_I2C_Init+0x1a0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d84b      	bhi.n	8006210 <HAL_I2C_Init+0x128>
 8006178:	3801      	subs	r0, #1
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006180:	3301      	adds	r3, #1
 8006182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006186:	2b04      	cmp	r3, #4
 8006188:	bf38      	it	cc
 800618a:	2304      	movcc	r3, #4
 800618c:	430b      	orrs	r3, r1
 800618e:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006190:	6821      	ldr	r1, [r4, #0]
 8006192:	680b      	ldr	r3, [r1, #0]
 8006194:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006198:	69e2      	ldr	r2, [r4, #28]
 800619a:	6a20      	ldr	r0, [r4, #32]
 800619c:	4302      	orrs	r2, r0
 800619e:	4313      	orrs	r3, r2
 80061a0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061a2:	6821      	ldr	r1, [r4, #0]
 80061a4:	688b      	ldr	r3, [r1, #8]
 80061a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80061aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061ae:	6922      	ldr	r2, [r4, #16]
 80061b0:	68e0      	ldr	r0, [r4, #12]
 80061b2:	4302      	orrs	r2, r0
 80061b4:	4313      	orrs	r3, r2
 80061b6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061b8:	6821      	ldr	r1, [r4, #0]
 80061ba:	68cb      	ldr	r3, [r1, #12]
 80061bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061c0:	6962      	ldr	r2, [r4, #20]
 80061c2:	69a0      	ldr	r0, [r4, #24]
 80061c4:	4302      	orrs	r2, r0
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80061ca:	6822      	ldr	r2, [r4, #0]
 80061cc:	6813      	ldr	r3, [r2, #0]
 80061ce:	f043 0301 	orr.w	r3, r3, #1
 80061d2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061d4:	2000      	movs	r0, #0
 80061d6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061d8:	2320      	movs	r3, #32
 80061da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061de:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80061e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80061e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80061ea:	f7fe f8c7 	bl	800437c <HAL_I2C_MspInit>
 80061ee:	e784      	b.n	80060fa <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061f0:	4b28      	ldr	r3, [pc, #160]	; (8006294 <HAL_I2C_Init+0x1ac>)
 80061f2:	4298      	cmp	r0, r3
 80061f4:	bf8c      	ite	hi
 80061f6:	2300      	movhi	r3, #0
 80061f8:	2301      	movls	r3, #1
 80061fa:	e79b      	b.n	8006134 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061fc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006200:	fb01 f303 	mul.w	r3, r1, r3
 8006204:	4924      	ldr	r1, [pc, #144]	; (8006298 <HAL_I2C_Init+0x1b0>)
 8006206:	fba1 1303 	umull	r1, r3, r1, r3
 800620a:	099b      	lsrs	r3, r3, #6
 800620c:	3301      	adds	r3, #1
 800620e:	e7a7      	b.n	8006160 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006210:	68a2      	ldr	r2, [r4, #8]
 8006212:	b9ba      	cbnz	r2, 8006244 <HAL_I2C_Init+0x15c>
 8006214:	1e46      	subs	r6, r0, #1
 8006216:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800621a:	fbb6 f6f7 	udiv	r6, r6, r7
 800621e:	3601      	adds	r6, #1
 8006220:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8006224:	fab6 f686 	clz	r6, r6
 8006228:	0976      	lsrs	r6, r6, #5
 800622a:	bb36      	cbnz	r6, 800627a <HAL_I2C_Init+0x192>
 800622c:	b9c2      	cbnz	r2, 8006260 <HAL_I2C_Init+0x178>
 800622e:	3801      	subs	r0, #1
 8006230:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006234:	fbb0 f3f3 	udiv	r3, r0, r3
 8006238:	3301      	adds	r3, #1
 800623a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800623e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8006242:	e7a3      	b.n	800618c <HAL_I2C_Init+0xa4>
 8006244:	1e46      	subs	r6, r0, #1
 8006246:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800624a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800624e:	fbb6 f6f7 	udiv	r6, r6, r7
 8006252:	3601      	adds	r6, #1
 8006254:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8006258:	fab6 f686 	clz	r6, r6
 800625c:	0976      	lsrs	r6, r6, #5
 800625e:	e7e4      	b.n	800622a <HAL_I2C_Init+0x142>
 8006260:	3801      	subs	r0, #1
 8006262:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006266:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800626a:	fbb0 f2f3 	udiv	r2, r0, r3
 800626e:	3201      	adds	r2, #1
 8006270:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006274:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8006278:	e788      	b.n	800618c <HAL_I2C_Init+0xa4>
 800627a:	2301      	movs	r3, #1
 800627c:	e786      	b.n	800618c <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 800627e:	2001      	movs	r0, #1
}
 8006280:	4770      	bx	lr
    return HAL_ERROR;
 8006282:	2001      	movs	r0, #1
 8006284:	e7ae      	b.n	80061e4 <HAL_I2C_Init+0xfc>
 8006286:	bf00      	nop
 8006288:	000186a0 	.word	0x000186a0
 800628c:	001e847f 	.word	0x001e847f
 8006290:	431bde83 	.word	0x431bde83
 8006294:	003d08ff 	.word	0x003d08ff
 8006298:	10624dd3 	.word	0x10624dd3

0800629c <HAL_I2C_Mem_Write>:
{
 800629c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a0:	b082      	sub	sp, #8
 80062a2:	4604      	mov	r4, r0
 80062a4:	460e      	mov	r6, r1
 80062a6:	4617      	mov	r7, r2
 80062a8:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 80062aa:	f7fe ff6f 	bl	800518c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80062ae:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b20      	cmp	r3, #32
 80062b6:	d004      	beq.n	80062c2 <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 80062b8:	2302      	movs	r3, #2
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	b002      	add	sp, #8
 80062be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062c4:	9000      	str	r0, [sp, #0]
 80062c6:	2319      	movs	r3, #25
 80062c8:	2201      	movs	r2, #1
 80062ca:	494c      	ldr	r1, [pc, #304]	; (80063fc <HAL_I2C_Mem_Write+0x160>)
 80062cc:	4620      	mov	r0, r4
 80062ce:	f7ff fcd8 	bl	8005c82 <I2C_WaitOnFlagUntilTimeout>
 80062d2:	2800      	cmp	r0, #0
 80062d4:	f040 808b 	bne.w	80063ee <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 80062d8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80062dc:	2b01      	cmp	r3, #1
 80062de:	f000 8088 	beq.w	80063f2 <HAL_I2C_Mem_Write+0x156>
 80062e2:	2301      	movs	r3, #1
 80062e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	f012 0f01 	tst.w	r2, #1
 80062f0:	d103      	bne.n	80062fa <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	f042 0201 	orr.w	r2, r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062fa:	6822      	ldr	r2, [r4, #0]
 80062fc:	6813      	ldr	r3, [r2, #0]
 80062fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006302:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006304:	2321      	movs	r3, #33	; 0x21
 8006306:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800630a:	2340      	movs	r3, #64	; 0x40
 800630c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006310:	2300      	movs	r3, #0
 8006312:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006314:	9b08      	ldr	r3, [sp, #32]
 8006316:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006318:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800631c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800631e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006320:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006322:	4b37      	ldr	r3, [pc, #220]	; (8006400 <HAL_I2C_Mem_Write+0x164>)
 8006324:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006326:	9501      	str	r5, [sp, #4]
 8006328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	4643      	mov	r3, r8
 800632e:	463a      	mov	r2, r7
 8006330:	4631      	mov	r1, r6
 8006332:	4620      	mov	r0, r4
 8006334:	f7ff fd5a 	bl	8005dec <I2C_RequestMemoryWrite>
 8006338:	2800      	cmp	r0, #0
 800633a:	d15c      	bne.n	80063f6 <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 800633c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800633e:	2b00      	cmp	r3, #0
 8006340:	d034      	beq.n	80063ac <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006342:	462a      	mov	r2, r5
 8006344:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006346:	4620      	mov	r0, r4
 8006348:	f7ff fd25 	bl	8005d96 <I2C_WaitOnTXEFlagUntilTimeout>
 800634c:	bb10      	cbnz	r0, 8006394 <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800634e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	7812      	ldrb	r2, [r2, #0]
 8006354:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006356:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006358:	1c4b      	adds	r3, r1, #1
 800635a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800635c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800635e:	3b01      	subs	r3, #1
 8006360:	b29b      	uxth	r3, r3
 8006362:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006364:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006366:	3a01      	subs	r2, #1
 8006368:	b292      	uxth	r2, r2
 800636a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800636c:	6822      	ldr	r2, [r4, #0]
 800636e:	6950      	ldr	r0, [r2, #20]
 8006370:	f010 0f04 	tst.w	r0, #4
 8006374:	d0e2      	beq.n	800633c <HAL_I2C_Mem_Write+0xa0>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0e0      	beq.n	800633c <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800637a:	784b      	ldrb	r3, [r1, #1]
 800637c:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800637e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006380:	3301      	adds	r3, #1
 8006382:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006384:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006386:	3b01      	subs	r3, #1
 8006388:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800638a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800638c:	3b01      	subs	r3, #1
 800638e:	b29b      	uxth	r3, r3
 8006390:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006392:	e7d3      	b.n	800633c <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006394:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006396:	2b04      	cmp	r3, #4
 8006398:	d001      	beq.n	800639e <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e78d      	b.n	80062ba <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800639e:	6822      	ldr	r2, [r4, #0]
 80063a0:	6813      	ldr	r3, [r2, #0]
 80063a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063a6:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e786      	b.n	80062ba <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ac:	462a      	mov	r2, r5
 80063ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80063b0:	4620      	mov	r0, r4
 80063b2:	f7ff fe39 	bl	8006028 <I2C_WaitOnBTFFlagUntilTimeout>
 80063b6:	4603      	mov	r3, r0
 80063b8:	b158      	cbz	r0, 80063d2 <HAL_I2C_Mem_Write+0x136>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d001      	beq.n	80063c4 <HAL_I2C_Mem_Write+0x128>
      return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e77a      	b.n	80062ba <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c4:	6822      	ldr	r2, [r4, #0]
 80063c6:	6813      	ldr	r3, [r2, #0]
 80063c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063cc:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e773      	b.n	80062ba <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d2:	6821      	ldr	r1, [r4, #0]
 80063d4:	680a      	ldr	r2, [r1, #0]
 80063d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063da:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80063dc:	2220      	movs	r2, #32
 80063de:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e2:	2200      	movs	r2, #0
 80063e4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80063e8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 80063ec:	e765      	b.n	80062ba <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 80063ee:	2302      	movs	r3, #2
 80063f0:	e763      	b.n	80062ba <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 80063f2:	2302      	movs	r3, #2
 80063f4:	e761      	b.n	80062ba <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e75f      	b.n	80062ba <HAL_I2C_Mem_Write+0x1e>
 80063fa:	bf00      	nop
 80063fc:	00100002 	.word	0x00100002
 8006400:	ffff0000 	.word	0xffff0000

08006404 <HAL_I2C_Mem_Read>:
{
 8006404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006408:	b086      	sub	sp, #24
 800640a:	4604      	mov	r4, r0
 800640c:	460e      	mov	r6, r1
 800640e:	4617      	mov	r7, r2
 8006410:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8006412:	f7fe febb 	bl	800518c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006416:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b20      	cmp	r3, #32
 800641e:	d004      	beq.n	800642a <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8006420:	2602      	movs	r6, #2
}
 8006422:	4630      	mov	r0, r6
 8006424:	b006      	add	sp, #24
 8006426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800642a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800642c:	9000      	str	r0, [sp, #0]
 800642e:	2319      	movs	r3, #25
 8006430:	2201      	movs	r2, #1
 8006432:	499e      	ldr	r1, [pc, #632]	; (80066ac <HAL_I2C_Mem_Read+0x2a8>)
 8006434:	4620      	mov	r0, r4
 8006436:	f7ff fc24 	bl	8005c82 <I2C_WaitOnFlagUntilTimeout>
 800643a:	2800      	cmp	r0, #0
 800643c:	f040 8134 	bne.w	80066a8 <HAL_I2C_Mem_Read+0x2a4>
    __HAL_LOCK(hi2c);
 8006440:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006444:	2b01      	cmp	r3, #1
 8006446:	f000 8137 	beq.w	80066b8 <HAL_I2C_Mem_Read+0x2b4>
 800644a:	2301      	movs	r3, #1
 800644c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	f012 0f01 	tst.w	r2, #1
 8006458:	d103      	bne.n	8006462 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	f042 0201 	orr.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006462:	6822      	ldr	r2, [r4, #0]
 8006464:	6813      	ldr	r3, [r2, #0]
 8006466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800646a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800646c:	2322      	movs	r3, #34	; 0x22
 800646e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006472:	2340      	movs	r3, #64	; 0x40
 8006474:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006478:	2300      	movs	r3, #0
 800647a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800647c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800647e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006480:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8006484:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006486:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006488:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800648a:	4b89      	ldr	r3, [pc, #548]	; (80066b0 <HAL_I2C_Mem_Read+0x2ac>)
 800648c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800648e:	9501      	str	r5, [sp, #4]
 8006490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	4643      	mov	r3, r8
 8006496:	463a      	mov	r2, r7
 8006498:	4631      	mov	r1, r6
 800649a:	4620      	mov	r0, r4
 800649c:	f7ff fd14 	bl	8005ec8 <I2C_RequestMemoryRead>
 80064a0:	4606      	mov	r6, r0
 80064a2:	2800      	cmp	r0, #0
 80064a4:	f040 810a 	bne.w	80066bc <HAL_I2C_Mem_Read+0x2b8>
    if (hi2c->XferSize == 0U)
 80064a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80064aa:	b95b      	cbnz	r3, 80064c4 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ac:	9302      	str	r3, [sp, #8]
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	9202      	str	r2, [sp, #8]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	9202      	str	r2, [sp, #8]
 80064b8:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	e072      	b.n	80065aa <HAL_I2C_Mem_Read+0x1a6>
    else if (hi2c->XferSize == 1U)
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d00a      	beq.n	80064de <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d01a      	beq.n	8006502 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064cc:	2300      	movs	r3, #0
 80064ce:	9305      	str	r3, [sp, #20]
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	695a      	ldr	r2, [r3, #20]
 80064d4:	9205      	str	r2, [sp, #20]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	9305      	str	r3, [sp, #20]
 80064da:	9b05      	ldr	r3, [sp, #20]
 80064dc:	e065      	b.n	80065aa <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064de:	6822      	ldr	r2, [r4, #0]
 80064e0:	6813      	ldr	r3, [r2, #0]
 80064e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064e6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064e8:	2300      	movs	r3, #0
 80064ea:	9303      	str	r3, [sp, #12]
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	695a      	ldr	r2, [r3, #20]
 80064f0:	9203      	str	r2, [sp, #12]
 80064f2:	699a      	ldr	r2, [r3, #24]
 80064f4:	9203      	str	r2, [sp, #12]
 80064f6:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	e053      	b.n	80065aa <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006502:	6822      	ldr	r2, [r4, #0]
 8006504:	6813      	ldr	r3, [r2, #0]
 8006506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800650a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800650c:	6822      	ldr	r2, [r4, #0]
 800650e:	6813      	ldr	r3, [r2, #0]
 8006510:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006514:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006516:	2300      	movs	r3, #0
 8006518:	9304      	str	r3, [sp, #16]
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	695a      	ldr	r2, [r3, #20]
 800651e:	9204      	str	r2, [sp, #16]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	9304      	str	r3, [sp, #16]
 8006524:	9b04      	ldr	r3, [sp, #16]
 8006526:	e040      	b.n	80065aa <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006528:	462a      	mov	r2, r5
 800652a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800652c:	4620      	mov	r0, r4
 800652e:	f7ff fda5 	bl	800607c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006532:	2800      	cmp	r0, #0
 8006534:	f040 80c4 	bne.w	80066c0 <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800653e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006542:	3301      	adds	r3, #1
 8006544:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006546:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006548:	3b01      	subs	r3, #1
 800654a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800654c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800654e:	3b01      	subs	r3, #1
 8006550:	b29b      	uxth	r3, r3
 8006552:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006554:	e029      	b.n	80065aa <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006556:	9500      	str	r5, [sp, #0]
 8006558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800655a:	2200      	movs	r2, #0
 800655c:	4955      	ldr	r1, [pc, #340]	; (80066b4 <HAL_I2C_Mem_Read+0x2b0>)
 800655e:	4620      	mov	r0, r4
 8006560:	f7ff fb8f 	bl	8005c82 <I2C_WaitOnFlagUntilTimeout>
 8006564:	2800      	cmp	r0, #0
 8006566:	f040 80ad 	bne.w	80066c4 <HAL_I2C_Mem_Read+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656a:	6822      	ldr	r2, [r4, #0]
 800656c:	6813      	ldr	r3, [r2, #0]
 800656e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006572:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	691a      	ldr	r2, [r3, #16]
 8006578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800657a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800657c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800657e:	1c53      	adds	r3, r2, #1
 8006580:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006582:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006584:	3b01      	subs	r3, #1
 8006586:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006588:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800658a:	3b01      	subs	r3, #1
 800658c:	b29b      	uxth	r3, r3
 800658e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006598:	3301      	adds	r3, #1
 800659a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800659c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800659e:	3b01      	subs	r3, #1
 80065a0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80065a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d072      	beq.n	8006696 <HAL_I2C_Mem_Read+0x292>
      if (hi2c->XferSize <= 3U)
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d849      	bhi.n	8006648 <HAL_I2C_Mem_Read+0x244>
        if (hi2c->XferSize == 1U)
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d0b7      	beq.n	8006528 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d0cc      	beq.n	8006556 <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065bc:	9500      	str	r5, [sp, #0]
 80065be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065c0:	2200      	movs	r2, #0
 80065c2:	493c      	ldr	r1, [pc, #240]	; (80066b4 <HAL_I2C_Mem_Read+0x2b0>)
 80065c4:	4620      	mov	r0, r4
 80065c6:	f7ff fb5c 	bl	8005c82 <I2C_WaitOnFlagUntilTimeout>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d17c      	bne.n	80066c8 <HAL_I2C_Mem_Read+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ce:	6822      	ldr	r2, [r4, #0]
 80065d0:	6813      	ldr	r3, [r2, #0]
 80065d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065d6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065de:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80065e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065e2:	3301      	adds	r3, #1
 80065e4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80065e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80065e8:	3b01      	subs	r3, #1
 80065ea:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80065ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80065ee:	3b01      	subs	r3, #1
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065f4:	9500      	str	r5, [sp, #0]
 80065f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065f8:	2200      	movs	r2, #0
 80065fa:	492e      	ldr	r1, [pc, #184]	; (80066b4 <HAL_I2C_Mem_Read+0x2b0>)
 80065fc:	4620      	mov	r0, r4
 80065fe:	f7ff fb40 	bl	8005c82 <I2C_WaitOnFlagUntilTimeout>
 8006602:	2800      	cmp	r0, #0
 8006604:	d162      	bne.n	80066cc <HAL_I2C_Mem_Read+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006606:	6822      	ldr	r2, [r4, #0]
 8006608:	6813      	ldr	r3, [r2, #0]
 800660a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800660e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006616:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006618:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800661a:	1c53      	adds	r3, r2, #1
 800661c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800661e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006620:	3b01      	subs	r3, #1
 8006622:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006624:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006626:	3b01      	subs	r3, #1
 8006628:	b29b      	uxth	r3, r3
 800662a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006634:	3301      	adds	r3, #1
 8006636:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006638:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800663a:	3b01      	subs	r3, #1
 800663c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800663e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006640:	3b01      	subs	r3, #1
 8006642:	b29b      	uxth	r3, r3
 8006644:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006646:	e7b0      	b.n	80065aa <HAL_I2C_Mem_Read+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006648:	462a      	mov	r2, r5
 800664a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800664c:	4620      	mov	r0, r4
 800664e:	f7ff fd15 	bl	800607c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006652:	2800      	cmp	r0, #0
 8006654:	d13c      	bne.n	80066d0 <HAL_I2C_Mem_Read+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	691a      	ldr	r2, [r3, #16]
 800665a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800665c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800665e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006660:	1c53      	adds	r3, r2, #1
 8006662:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006664:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006666:	3b01      	subs	r3, #1
 8006668:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800666a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800666c:	3b01      	subs	r3, #1
 800666e:	b29b      	uxth	r3, r3
 8006670:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	6959      	ldr	r1, [r3, #20]
 8006676:	f011 0f04 	tst.w	r1, #4
 800667a:	d096      	beq.n	80065aa <HAL_I2C_Mem_Read+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006682:	3301      	adds	r3, #1
 8006684:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006686:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006688:	3b01      	subs	r3, #1
 800668a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800668c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800668e:	3b01      	subs	r3, #1
 8006690:	b29b      	uxth	r3, r3
 8006692:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006694:	e789      	b.n	80065aa <HAL_I2C_Mem_Read+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006696:	2320      	movs	r3, #32
 8006698:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800669c:	2300      	movs	r3, #0
 800669e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80066a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80066a6:	e6bc      	b.n	8006422 <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 80066a8:	2602      	movs	r6, #2
 80066aa:	e6ba      	b.n	8006422 <HAL_I2C_Mem_Read+0x1e>
 80066ac:	00100002 	.word	0x00100002
 80066b0:	ffff0000 	.word	0xffff0000
 80066b4:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 80066b8:	2602      	movs	r6, #2
 80066ba:	e6b2      	b.n	8006422 <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 80066bc:	2601      	movs	r6, #1
 80066be:	e6b0      	b.n	8006422 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80066c0:	2601      	movs	r6, #1
 80066c2:	e6ae      	b.n	8006422 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80066c4:	2601      	movs	r6, #1
 80066c6:	e6ac      	b.n	8006422 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80066c8:	2601      	movs	r6, #1
 80066ca:	e6aa      	b.n	8006422 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80066cc:	2601      	movs	r6, #1
 80066ce:	e6a8      	b.n	8006422 <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 80066d0:	2601      	movs	r6, #1
 80066d2:	e6a6      	b.n	8006422 <HAL_I2C_Mem_Read+0x1e>

080066d4 <HAL_I2C_IsDeviceReady>:
{
 80066d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066d8:	b085      	sub	sp, #20
 80066da:	4604      	mov	r4, r0
 80066dc:	4688      	mov	r8, r1
 80066de:	4691      	mov	r9, r2
 80066e0:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80066e2:	f7fe fd53 	bl	800518c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80066e6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b20      	cmp	r3, #32
 80066ee:	d004      	beq.n	80066fa <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 80066f0:	2302      	movs	r3, #2
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	b005      	add	sp, #20
 80066f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066fa:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066fc:	9000      	str	r0, [sp, #0]
 80066fe:	2319      	movs	r3, #25
 8006700:	2201      	movs	r2, #1
 8006702:	4959      	ldr	r1, [pc, #356]	; (8006868 <HAL_I2C_IsDeviceReady+0x194>)
 8006704:	4620      	mov	r0, r4
 8006706:	f7ff fabc 	bl	8005c82 <I2C_WaitOnFlagUntilTimeout>
 800670a:	2800      	cmp	r0, #0
 800670c:	f040 80a1 	bne.w	8006852 <HAL_I2C_IsDeviceReady+0x17e>
    __HAL_LOCK(hi2c);
 8006710:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006714:	2b01      	cmp	r3, #1
 8006716:	f000 809e 	beq.w	8006856 <HAL_I2C_IsDeviceReady+0x182>
 800671a:	2301      	movs	r3, #1
 800671c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	f012 0f01 	tst.w	r2, #1
 8006728:	d103      	bne.n	8006732 <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	f042 0201 	orr.w	r2, r2, #1
 8006730:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006732:	6822      	ldr	r2, [r4, #0]
 8006734:	6813      	ldr	r3, [r2, #0]
 8006736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800673a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800673c:	2324      	movs	r3, #36	; 0x24
 800673e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006742:	2300      	movs	r3, #0
 8006744:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006746:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800674a:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 800674c:	2701      	movs	r7, #1
 800674e:	e03e      	b.n	80067ce <HAL_I2C_IsDeviceReady+0xfa>
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006758:	d07f      	beq.n	800685a <HAL_I2C_IsDeviceReady+0x186>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800675a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800675e:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e7c6      	b.n	80066f2 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006764:	23a0      	movs	r3, #160	; 0xa0
 8006766:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	695a      	ldr	r2, [r3, #20]
 800676e:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006772:	6959      	ldr	r1, [r3, #20]
 8006774:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006778:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2ba0      	cmp	r3, #160	; 0xa0
 8006780:	d009      	beq.n	8006796 <HAL_I2C_IsDeviceReady+0xc2>
 8006782:	b942      	cbnz	r2, 8006796 <HAL_I2C_IsDeviceReady+0xc2>
 8006784:	b939      	cbnz	r1, 8006796 <HAL_I2C_IsDeviceReady+0xc2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006786:	f7fe fd01 	bl	800518c <HAL_GetTick>
 800678a:	1b80      	subs	r0, r0, r6
 800678c:	42a8      	cmp	r0, r5
 800678e:	d8e9      	bhi.n	8006764 <HAL_I2C_IsDeviceReady+0x90>
 8006790:	2d00      	cmp	r5, #0
 8006792:	d1ea      	bne.n	800676a <HAL_I2C_IsDeviceReady+0x96>
 8006794:	e7e6      	b.n	8006764 <HAL_I2C_IsDeviceReady+0x90>
      hi2c->State = HAL_I2C_STATE_READY;
 8006796:	2320      	movs	r3, #32
 8006798:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	695a      	ldr	r2, [r3, #20]
 80067a0:	f012 0f02 	tst.w	r2, #2
 80067a4:	d131      	bne.n	800680a <HAL_I2C_IsDeviceReady+0x136>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ac:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067b4:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067b6:	9600      	str	r6, [sp, #0]
 80067b8:	2319      	movs	r3, #25
 80067ba:	2201      	movs	r2, #1
 80067bc:	492a      	ldr	r1, [pc, #168]	; (8006868 <HAL_I2C_IsDeviceReady+0x194>)
 80067be:	4620      	mov	r0, r4
 80067c0:	f7ff fa5f 	bl	8005c82 <I2C_WaitOnFlagUntilTimeout>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d14c      	bne.n	8006862 <HAL_I2C_IsDeviceReady+0x18e>
      I2C_Trials++;
 80067c8:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80067ca:	454f      	cmp	r7, r9
 80067cc:	d239      	bcs.n	8006842 <HAL_I2C_IsDeviceReady+0x16e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067ce:	6822      	ldr	r2, [r4, #0]
 80067d0:	6813      	ldr	r3, [r2, #0]
 80067d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067d6:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80067d8:	9600      	str	r6, [sp, #0]
 80067da:	462b      	mov	r3, r5
 80067dc:	2200      	movs	r2, #0
 80067de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067e2:	4620      	mov	r0, r4
 80067e4:	f7ff fa4d 	bl	8005c82 <I2C_WaitOnFlagUntilTimeout>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d1b1      	bne.n	8006750 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 80067f2:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80067f4:	f7fe fcca 	bl	800518c <HAL_GetTick>
 80067f8:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	695a      	ldr	r2, [r3, #20]
 80067fe:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006802:	6959      	ldr	r1, [r3, #20]
 8006804:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006808:	e7b6      	b.n	8006778 <HAL_I2C_IsDeviceReady+0xa4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006810:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006812:	2300      	movs	r3, #0
 8006814:	9303      	str	r3, [sp, #12]
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	695a      	ldr	r2, [r3, #20]
 800681a:	9203      	str	r2, [sp, #12]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	9303      	str	r3, [sp, #12]
 8006820:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006822:	9600      	str	r6, [sp, #0]
 8006824:	2319      	movs	r3, #25
 8006826:	2201      	movs	r2, #1
 8006828:	490f      	ldr	r1, [pc, #60]	; (8006868 <HAL_I2C_IsDeviceReady+0x194>)
 800682a:	4620      	mov	r0, r4
 800682c:	f7ff fa29 	bl	8005c82 <I2C_WaitOnFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	b9a0      	cbnz	r0, 800685e <HAL_I2C_IsDeviceReady+0x18a>
        hi2c->State = HAL_I2C_STATE_READY;
 8006834:	2220      	movs	r2, #32
 8006836:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800683a:	2200      	movs	r2, #0
 800683c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8006840:	e757      	b.n	80066f2 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006842:	2320      	movs	r3, #32
 8006844:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8006848:	2300      	movs	r3, #0
 800684a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e74f      	b.n	80066f2 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8006852:	2302      	movs	r3, #2
 8006854:	e74d      	b.n	80066f2 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8006856:	2302      	movs	r3, #2
 8006858:	e74b      	b.n	80066f2 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e749      	b.n	80066f2 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e747      	b.n	80066f2 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e745      	b.n	80066f2 <HAL_I2C_IsDeviceReady+0x1e>
 8006866:	bf00      	nop
 8006868:	00100002 	.word	0x00100002

0800686c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800686c:	2800      	cmp	r0, #0
 800686e:	f000 81e0 	beq.w	8006c32 <HAL_RCC_OscConfig+0x3c6>
{
 8006872:	b570      	push	{r4, r5, r6, lr}
 8006874:	b082      	sub	sp, #8
 8006876:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006878:	6803      	ldr	r3, [r0, #0]
 800687a:	f013 0f01 	tst.w	r3, #1
 800687e:	d03b      	beq.n	80068f8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006880:	4ba5      	ldr	r3, [pc, #660]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 030c 	and.w	r3, r3, #12
 8006888:	2b04      	cmp	r3, #4
 800688a:	d02c      	beq.n	80068e6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800688c:	4ba2      	ldr	r3, [pc, #648]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006894:	2b08      	cmp	r3, #8
 8006896:	d021      	beq.n	80068dc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006898:	6863      	ldr	r3, [r4, #4]
 800689a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800689e:	d04f      	beq.n	8006940 <HAL_RCC_OscConfig+0xd4>
 80068a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068a4:	d052      	beq.n	800694c <HAL_RCC_OscConfig+0xe0>
 80068a6:	4b9c      	ldr	r3, [pc, #624]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068b8:	6863      	ldr	r3, [r4, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d050      	beq.n	8006960 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068be:	f7fe fc65 	bl	800518c <HAL_GetTick>
 80068c2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068c4:	4b94      	ldr	r3, [pc, #592]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80068cc:	d114      	bne.n	80068f8 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068ce:	f7fe fc5d 	bl	800518c <HAL_GetTick>
 80068d2:	1b40      	subs	r0, r0, r5
 80068d4:	2864      	cmp	r0, #100	; 0x64
 80068d6:	d9f5      	bls.n	80068c4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80068d8:	2003      	movs	r0, #3
 80068da:	e1af      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068dc:	4b8e      	ldr	r3, [pc, #568]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80068e4:	d0d8      	beq.n	8006898 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e6:	4b8c      	ldr	r3, [pc, #560]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80068ee:	d003      	beq.n	80068f8 <HAL_RCC_OscConfig+0x8c>
 80068f0:	6863      	ldr	r3, [r4, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 819f 	beq.w	8006c36 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	f013 0f02 	tst.w	r3, #2
 80068fe:	d055      	beq.n	80069ac <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006900:	4b85      	ldr	r3, [pc, #532]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f013 0f0c 	tst.w	r3, #12
 8006908:	d03e      	beq.n	8006988 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800690a:	4b83      	ldr	r3, [pc, #524]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006912:	2b08      	cmp	r3, #8
 8006914:	d033      	beq.n	800697e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006916:	68e3      	ldr	r3, [r4, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d068      	beq.n	80069ee <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800691c:	4b7f      	ldr	r3, [pc, #508]	; (8006b1c <HAL_RCC_OscConfig+0x2b0>)
 800691e:	2201      	movs	r2, #1
 8006920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006922:	f7fe fc33 	bl	800518c <HAL_GetTick>
 8006926:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006928:	4b7b      	ldr	r3, [pc, #492]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f013 0f02 	tst.w	r3, #2
 8006930:	d154      	bne.n	80069dc <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006932:	f7fe fc2b 	bl	800518c <HAL_GetTick>
 8006936:	1b40      	subs	r0, r0, r5
 8006938:	2802      	cmp	r0, #2
 800693a:	d9f5      	bls.n	8006928 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800693c:	2003      	movs	r0, #3
 800693e:	e17d      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006940:	4a75      	ldr	r2, [pc, #468]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006942:	6813      	ldr	r3, [r2, #0]
 8006944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	e7b5      	b.n	80068b8 <HAL_RCC_OscConfig+0x4c>
 800694c:	4b72      	ldr	r3, [pc, #456]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	e7ab      	b.n	80068b8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8006960:	f7fe fc14 	bl	800518c <HAL_GetTick>
 8006964:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006966:	4b6c      	ldr	r3, [pc, #432]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800696e:	d0c3      	beq.n	80068f8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006970:	f7fe fc0c 	bl	800518c <HAL_GetTick>
 8006974:	1b40      	subs	r0, r0, r5
 8006976:	2864      	cmp	r0, #100	; 0x64
 8006978:	d9f5      	bls.n	8006966 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800697a:	2003      	movs	r0, #3
 800697c:	e15e      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800697e:	4b66      	ldr	r3, [pc, #408]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006986:	d1c6      	bne.n	8006916 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006988:	4b63      	ldr	r3, [pc, #396]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f013 0f02 	tst.w	r3, #2
 8006990:	d004      	beq.n	800699c <HAL_RCC_OscConfig+0x130>
 8006992:	68e3      	ldr	r3, [r4, #12]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d001      	beq.n	800699c <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8006998:	2001      	movs	r0, #1
 800699a:	e14f      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800699c:	4a5e      	ldr	r2, [pc, #376]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 800699e:	6813      	ldr	r3, [r2, #0]
 80069a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80069a4:	6921      	ldr	r1, [r4, #16]
 80069a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80069aa:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	f013 0f08 	tst.w	r3, #8
 80069b2:	d040      	beq.n	8006a36 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069b4:	6963      	ldr	r3, [r4, #20]
 80069b6:	b363      	cbz	r3, 8006a12 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069b8:	4b59      	ldr	r3, [pc, #356]	; (8006b20 <HAL_RCC_OscConfig+0x2b4>)
 80069ba:	2201      	movs	r2, #1
 80069bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069be:	f7fe fbe5 	bl	800518c <HAL_GetTick>
 80069c2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069c4:	4b54      	ldr	r3, [pc, #336]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80069c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c8:	f013 0f02 	tst.w	r3, #2
 80069cc:	d133      	bne.n	8006a36 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069ce:	f7fe fbdd 	bl	800518c <HAL_GetTick>
 80069d2:	1b40      	subs	r0, r0, r5
 80069d4:	2802      	cmp	r0, #2
 80069d6:	d9f5      	bls.n	80069c4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80069d8:	2003      	movs	r0, #3
 80069da:	e12f      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069dc:	4a4e      	ldr	r2, [pc, #312]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80069de:	6813      	ldr	r3, [r2, #0]
 80069e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80069e4:	6921      	ldr	r1, [r4, #16]
 80069e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	e7de      	b.n	80069ac <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80069ee:	4b4b      	ldr	r3, [pc, #300]	; (8006b1c <HAL_RCC_OscConfig+0x2b0>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80069f4:	f7fe fbca 	bl	800518c <HAL_GetTick>
 80069f8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069fa:	4b47      	ldr	r3, [pc, #284]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f013 0f02 	tst.w	r3, #2
 8006a02:	d0d3      	beq.n	80069ac <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a04:	f7fe fbc2 	bl	800518c <HAL_GetTick>
 8006a08:	1b40      	subs	r0, r0, r5
 8006a0a:	2802      	cmp	r0, #2
 8006a0c:	d9f5      	bls.n	80069fa <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8006a0e:	2003      	movs	r0, #3
 8006a10:	e114      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a12:	4b43      	ldr	r3, [pc, #268]	; (8006b20 <HAL_RCC_OscConfig+0x2b4>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a18:	f7fe fbb8 	bl	800518c <HAL_GetTick>
 8006a1c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a1e:	4b3e      	ldr	r3, [pc, #248]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a22:	f013 0f02 	tst.w	r3, #2
 8006a26:	d006      	beq.n	8006a36 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a28:	f7fe fbb0 	bl	800518c <HAL_GetTick>
 8006a2c:	1b40      	subs	r0, r0, r5
 8006a2e:	2802      	cmp	r0, #2
 8006a30:	d9f5      	bls.n	8006a1e <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8006a32:	2003      	movs	r0, #3
 8006a34:	e102      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	f013 0f04 	tst.w	r3, #4
 8006a3c:	d075      	beq.n	8006b2a <HAL_RCC_OscConfig+0x2be>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a3e:	4b36      	ldr	r3, [pc, #216]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006a46:	d131      	bne.n	8006aac <HAL_RCC_OscConfig+0x240>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a48:	2300      	movs	r3, #0
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	4b32      	ldr	r3, [pc, #200]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a54:	641a      	str	r2, [r3, #64]	; 0x40
 8006a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a5c:	9301      	str	r3, [sp, #4]
 8006a5e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006a60:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a62:	4b30      	ldr	r3, [pc, #192]	; (8006b24 <HAL_RCC_OscConfig+0x2b8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006a6a:	d021      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a6c:	68a3      	ldr	r3, [r4, #8]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d032      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x26c>
 8006a72:	2b05      	cmp	r3, #5
 8006a74:	d036      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x278>
 8006a76:	4b28      	ldr	r3, [pc, #160]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006a78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a7a:	f022 0201 	bic.w	r2, r2, #1
 8006a7e:	671a      	str	r2, [r3, #112]	; 0x70
 8006a80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a82:	f022 0204 	bic.w	r2, r2, #4
 8006a86:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a88:	68a3      	ldr	r3, [r4, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d034      	beq.n	8006af8 <HAL_RCC_OscConfig+0x28c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a8e:	f7fe fb7d 	bl	800518c <HAL_GetTick>
 8006a92:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a94:	4b20      	ldr	r3, [pc, #128]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a98:	f013 0f02 	tst.w	r3, #2
 8006a9c:	d144      	bne.n	8006b28 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a9e:	f7fe fb75 	bl	800518c <HAL_GetTick>
 8006aa2:	1b80      	subs	r0, r0, r6
 8006aa4:	2864      	cmp	r0, #100	; 0x64
 8006aa6:	d9f5      	bls.n	8006a94 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8006aa8:	2003      	movs	r0, #3
 8006aaa:	e0c7      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8006aac:	2500      	movs	r5, #0
 8006aae:	e7d8      	b.n	8006a62 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ab0:	4a1c      	ldr	r2, [pc, #112]	; (8006b24 <HAL_RCC_OscConfig+0x2b8>)
 8006ab2:	6813      	ldr	r3, [r2, #0]
 8006ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006aba:	f7fe fb67 	bl	800518c <HAL_GetTick>
 8006abe:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac0:	4b18      	ldr	r3, [pc, #96]	; (8006b24 <HAL_RCC_OscConfig+0x2b8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006ac8:	d1d0      	bne.n	8006a6c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aca:	f7fe fb5f 	bl	800518c <HAL_GetTick>
 8006ace:	1b80      	subs	r0, r0, r6
 8006ad0:	2802      	cmp	r0, #2
 8006ad2:	d9f5      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8006ad4:	2003      	movs	r0, #3
 8006ad6:	e0b1      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ad8:	4a0f      	ldr	r2, [pc, #60]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006ada:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006adc:	f043 0301 	orr.w	r3, r3, #1
 8006ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae2:	e7d1      	b.n	8006a88 <HAL_RCC_OscConfig+0x21c>
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006ae6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ae8:	f042 0204 	orr.w	r2, r2, #4
 8006aec:	671a      	str	r2, [r3, #112]	; 0x70
 8006aee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006af0:	f042 0201 	orr.w	r2, r2, #1
 8006af4:	671a      	str	r2, [r3, #112]	; 0x70
 8006af6:	e7c7      	b.n	8006a88 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006af8:	f7fe fb48 	bl	800518c <HAL_GetTick>
 8006afc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006afe:	4b06      	ldr	r3, [pc, #24]	; (8006b18 <HAL_RCC_OscConfig+0x2ac>)
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	f013 0f02 	tst.w	r3, #2
 8006b06:	d00f      	beq.n	8006b28 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b08:	f7fe fb40 	bl	800518c <HAL_GetTick>
 8006b0c:	1b80      	subs	r0, r0, r6
 8006b0e:	2864      	cmp	r0, #100	; 0x64
 8006b10:	d9f5      	bls.n	8006afe <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006b12:	2003      	movs	r0, #3
 8006b14:	e092      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
 8006b16:	bf00      	nop
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	42470000 	.word	0x42470000
 8006b20:	42470e80 	.word	0x42470e80
 8006b24:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b28:	b9ed      	cbnz	r5, 8006b66 <HAL_RCC_OscConfig+0x2fa>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b2a:	69a3      	ldr	r3, [r4, #24]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 8084 	beq.w	8006c3a <HAL_RCC_OscConfig+0x3ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b32:	4a45      	ldr	r2, [pc, #276]	; (8006c48 <HAL_RCC_OscConfig+0x3dc>)
 8006b34:	6892      	ldr	r2, [r2, #8]
 8006b36:	f002 020c 	and.w	r2, r2, #12
 8006b3a:	2a08      	cmp	r2, #8
 8006b3c:	d051      	beq.n	8006be2 <HAL_RCC_OscConfig+0x376>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d017      	beq.n	8006b72 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b42:	4b42      	ldr	r3, [pc, #264]	; (8006c4c <HAL_RCC_OscConfig+0x3e0>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b48:	f7fe fb20 	bl	800518c <HAL_GetTick>
 8006b4c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b4e:	4b3e      	ldr	r3, [pc, #248]	; (8006c48 <HAL_RCC_OscConfig+0x3dc>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006b56:	d042      	beq.n	8006bde <HAL_RCC_OscConfig+0x372>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b58:	f7fe fb18 	bl	800518c <HAL_GetTick>
 8006b5c:	1b00      	subs	r0, r0, r4
 8006b5e:	2802      	cmp	r0, #2
 8006b60:	d9f5      	bls.n	8006b4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006b62:	2003      	movs	r0, #3
 8006b64:	e06a      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b66:	4a38      	ldr	r2, [pc, #224]	; (8006c48 <HAL_RCC_OscConfig+0x3dc>)
 8006b68:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8006b70:	e7db      	b.n	8006b2a <HAL_RCC_OscConfig+0x2be>
        __HAL_RCC_PLL_DISABLE();
 8006b72:	4b36      	ldr	r3, [pc, #216]	; (8006c4c <HAL_RCC_OscConfig+0x3e0>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006b78:	f7fe fb08 	bl	800518c <HAL_GetTick>
 8006b7c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b7e:	4b32      	ldr	r3, [pc, #200]	; (8006c48 <HAL_RCC_OscConfig+0x3dc>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006b86:	d006      	beq.n	8006b96 <HAL_RCC_OscConfig+0x32a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b88:	f7fe fb00 	bl	800518c <HAL_GetTick>
 8006b8c:	1b40      	subs	r0, r0, r5
 8006b8e:	2802      	cmp	r0, #2
 8006b90:	d9f5      	bls.n	8006b7e <HAL_RCC_OscConfig+0x312>
            return HAL_TIMEOUT;
 8006b92:	2003      	movs	r0, #3
 8006b94:	e052      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b96:	69e3      	ldr	r3, [r4, #28]
 8006b98:	6a22      	ldr	r2, [r4, #32]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b9e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006ba2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006ba4:	0852      	lsrs	r2, r2, #1
 8006ba6:	3a01      	subs	r2, #1
 8006ba8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006bae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006bb2:	4a25      	ldr	r2, [pc, #148]	; (8006c48 <HAL_RCC_OscConfig+0x3dc>)
 8006bb4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8006bb6:	4b25      	ldr	r3, [pc, #148]	; (8006c4c <HAL_RCC_OscConfig+0x3e0>)
 8006bb8:	2201      	movs	r2, #1
 8006bba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006bbc:	f7fe fae6 	bl	800518c <HAL_GetTick>
 8006bc0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc2:	4b21      	ldr	r3, [pc, #132]	; (8006c48 <HAL_RCC_OscConfig+0x3dc>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006bca:	d106      	bne.n	8006bda <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bcc:	f7fe fade 	bl	800518c <HAL_GetTick>
 8006bd0:	1b00      	subs	r0, r0, r4
 8006bd2:	2802      	cmp	r0, #2
 8006bd4:	d9f5      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8006bd6:	2003      	movs	r0, #3
 8006bd8:	e030      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006bda:	2000      	movs	r0, #0
 8006bdc:	e02e      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
 8006bde:	2000      	movs	r0, #0
 8006be0:	e02c      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d02c      	beq.n	8006c40 <HAL_RCC_OscConfig+0x3d4>
        pll_config = RCC->PLLCFGR;
 8006be6:	4b18      	ldr	r3, [pc, #96]	; (8006c48 <HAL_RCC_OscConfig+0x3dc>)
 8006be8:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bea:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8006bee:	69e2      	ldr	r2, [r4, #28]
 8006bf0:	4291      	cmp	r1, r2
 8006bf2:	d001      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x38c>
          return HAL_ERROR;
 8006bf4:	2001      	movs	r0, #1
 8006bf6:	e021      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bf8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bfc:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bfe:	428a      	cmp	r2, r1
 8006c00:	d001      	beq.n	8006c06 <HAL_RCC_OscConfig+0x39a>
          return HAL_ERROR;
 8006c02:	2001      	movs	r0, #1
 8006c04:	e01a      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c06:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c08:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006c0c:	401a      	ands	r2, r3
 8006c0e:	428a      	cmp	r2, r1
 8006c10:	d001      	beq.n	8006c16 <HAL_RCC_OscConfig+0x3aa>
          return HAL_ERROR;
 8006c12:	2001      	movs	r0, #1
 8006c14:	e012      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c1c:	428a      	cmp	r2, r1
 8006c1e:	d001      	beq.n	8006c24 <HAL_RCC_OscConfig+0x3b8>
          return HAL_ERROR;
 8006c20:	2001      	movs	r0, #1
 8006c22:	e00b      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006c24:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006c28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00a      	beq.n	8006c44 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
 8006c2e:	2001      	movs	r0, #1
 8006c30:	e004      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
    return HAL_ERROR;
 8006c32:	2001      	movs	r0, #1
}
 8006c34:	4770      	bx	lr
        return HAL_ERROR;
 8006c36:	2001      	movs	r0, #1
 8006c38:	e000      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8006c3a:	2000      	movs	r0, #0
}
 8006c3c:	b002      	add	sp, #8
 8006c3e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006c40:	2001      	movs	r0, #1
 8006c42:	e7fb      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8006c44:	2000      	movs	r0, #0
 8006c46:	e7f9      	b.n	8006c3c <HAL_RCC_OscConfig+0x3d0>
 8006c48:	40023800 	.word	0x40023800
 8006c4c:	42470060 	.word	0x42470060

08006c50 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006c50:	4b01      	ldr	r3, [pc, #4]	; (8006c58 <HAL_RCC_EnableCSS+0x8>)
 8006c52:	2201      	movs	r2, #1
 8006c54:	601a      	str	r2, [r3, #0]
}
 8006c56:	4770      	bx	lr
 8006c58:	4247004c 	.word	0x4247004c

08006c5c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c5c:	4b26      	ldr	r3, [pc, #152]	; (8006cf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f003 030c 	and.w	r3, r3, #12
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d044      	beq.n	8006cf2 <HAL_RCC_GetSysClockFreq+0x96>
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d001      	beq.n	8006c70 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c6c:	4823      	ldr	r0, [pc, #140]	; (8006cfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8006c6e:	4770      	bx	lr
{
 8006c70:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c74:	4b20      	ldr	r3, [pc, #128]	; (8006cf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006c82:	d013      	beq.n	8006cac <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c84:	4b1c      	ldr	r3, [pc, #112]	; (8006cf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006c86:	6859      	ldr	r1, [r3, #4]
 8006c88:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	481c      	ldr	r0, [pc, #112]	; (8006d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006c90:	fba1 0100 	umull	r0, r1, r1, r0
 8006c94:	f7f9 ff3a 	bl	8000b0c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c98:	4b17      	ldr	r3, [pc, #92]	; (8006cf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8006ca4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006ca8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cac:	4b12      	ldr	r3, [pc, #72]	; (8006cf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8006cb4:	461e      	mov	r6, r3
 8006cb6:	2700      	movs	r7, #0
 8006cb8:	015c      	lsls	r4, r3, #5
 8006cba:	2500      	movs	r5, #0
 8006cbc:	1ae4      	subs	r4, r4, r3
 8006cbe:	eb65 0507 	sbc.w	r5, r5, r7
 8006cc2:	01a9      	lsls	r1, r5, #6
 8006cc4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8006cc8:	01a0      	lsls	r0, r4, #6
 8006cca:	1b00      	subs	r0, r0, r4
 8006ccc:	eb61 0105 	sbc.w	r1, r1, r5
 8006cd0:	00cb      	lsls	r3, r1, #3
 8006cd2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006cd6:	00c4      	lsls	r4, r0, #3
 8006cd8:	19a0      	adds	r0, r4, r6
 8006cda:	eb43 0107 	adc.w	r1, r3, r7
 8006cde:	028b      	lsls	r3, r1, #10
 8006ce0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8006ce4:	0284      	lsls	r4, r0, #10
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	4619      	mov	r1, r3
 8006cea:	2300      	movs	r3, #0
 8006cec:	f7f9 ff0e 	bl	8000b0c <__aeabi_uldivmod>
 8006cf0:	e7d2      	b.n	8006c98 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8006cf2:	4803      	ldr	r0, [pc, #12]	; (8006d00 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	00f42400 	.word	0x00f42400
 8006d00:	017d7840 	.word	0x017d7840

08006d04 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006d04:	2800      	cmp	r0, #0
 8006d06:	f000 809e 	beq.w	8006e46 <HAL_RCC_ClockConfig+0x142>
{
 8006d0a:	b570      	push	{r4, r5, r6, lr}
 8006d0c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d0e:	4b50      	ldr	r3, [pc, #320]	; (8006e50 <HAL_RCC_ClockConfig+0x14c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	428b      	cmp	r3, r1
 8006d18:	d209      	bcs.n	8006d2e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d1a:	b2cb      	uxtb	r3, r1
 8006d1c:	4a4c      	ldr	r2, [pc, #304]	; (8006e50 <HAL_RCC_ClockConfig+0x14c>)
 8006d1e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d20:	6813      	ldr	r3, [r2, #0]
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	428b      	cmp	r3, r1
 8006d28:	d001      	beq.n	8006d2e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8006d2a:	2001      	movs	r0, #1
}
 8006d2c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	f013 0f02 	tst.w	r3, #2
 8006d34:	d017      	beq.n	8006d66 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d36:	f013 0f04 	tst.w	r3, #4
 8006d3a:	d004      	beq.n	8006d46 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d3c:	4a45      	ldr	r2, [pc, #276]	; (8006e54 <HAL_RCC_ClockConfig+0x150>)
 8006d3e:	6893      	ldr	r3, [r2, #8]
 8006d40:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d44:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	f013 0f08 	tst.w	r3, #8
 8006d4c:	d004      	beq.n	8006d58 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d4e:	4a41      	ldr	r2, [pc, #260]	; (8006e54 <HAL_RCC_ClockConfig+0x150>)
 8006d50:	6893      	ldr	r3, [r2, #8]
 8006d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d56:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d58:	4a3e      	ldr	r2, [pc, #248]	; (8006e54 <HAL_RCC_ClockConfig+0x150>)
 8006d5a:	6893      	ldr	r3, [r2, #8]
 8006d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d60:	68a0      	ldr	r0, [r4, #8]
 8006d62:	4303      	orrs	r3, r0
 8006d64:	6093      	str	r3, [r2, #8]
 8006d66:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	f013 0f01 	tst.w	r3, #1
 8006d6e:	d032      	beq.n	8006dd6 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d70:	6863      	ldr	r3, [r4, #4]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d021      	beq.n	8006dba <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d76:	1e9a      	subs	r2, r3, #2
 8006d78:	2a01      	cmp	r2, #1
 8006d7a:	d925      	bls.n	8006dc8 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d7c:	4a35      	ldr	r2, [pc, #212]	; (8006e54 <HAL_RCC_ClockConfig+0x150>)
 8006d7e:	6812      	ldr	r2, [r2, #0]
 8006d80:	f012 0f02 	tst.w	r2, #2
 8006d84:	d061      	beq.n	8006e4a <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d86:	4933      	ldr	r1, [pc, #204]	; (8006e54 <HAL_RCC_ClockConfig+0x150>)
 8006d88:	688a      	ldr	r2, [r1, #8]
 8006d8a:	f022 0203 	bic.w	r2, r2, #3
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006d92:	f7fe f9fb 	bl	800518c <HAL_GetTick>
 8006d96:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d98:	4b2e      	ldr	r3, [pc, #184]	; (8006e54 <HAL_RCC_ClockConfig+0x150>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 030c 	and.w	r3, r3, #12
 8006da0:	6862      	ldr	r2, [r4, #4]
 8006da2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006da6:	d016      	beq.n	8006dd6 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006da8:	f7fe f9f0 	bl	800518c <HAL_GetTick>
 8006dac:	1b80      	subs	r0, r0, r6
 8006dae:	f241 3388 	movw	r3, #5000	; 0x1388
 8006db2:	4298      	cmp	r0, r3
 8006db4:	d9f0      	bls.n	8006d98 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8006db6:	2003      	movs	r0, #3
 8006db8:	e7b8      	b.n	8006d2c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dba:	4a26      	ldr	r2, [pc, #152]	; (8006e54 <HAL_RCC_ClockConfig+0x150>)
 8006dbc:	6812      	ldr	r2, [r2, #0]
 8006dbe:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006dc2:	d1e0      	bne.n	8006d86 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8006dc4:	2001      	movs	r0, #1
 8006dc6:	e7b1      	b.n	8006d2c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dc8:	4a22      	ldr	r2, [pc, #136]	; (8006e54 <HAL_RCC_ClockConfig+0x150>)
 8006dca:	6812      	ldr	r2, [r2, #0]
 8006dcc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006dd0:	d1d9      	bne.n	8006d86 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	e7aa      	b.n	8006d2c <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dd6:	4b1e      	ldr	r3, [pc, #120]	; (8006e50 <HAL_RCC_ClockConfig+0x14c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 030f 	and.w	r3, r3, #15
 8006dde:	42ab      	cmp	r3, r5
 8006de0:	d909      	bls.n	8006df6 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006de2:	b2ea      	uxtb	r2, r5
 8006de4:	4b1a      	ldr	r3, [pc, #104]	; (8006e50 <HAL_RCC_ClockConfig+0x14c>)
 8006de6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	42ab      	cmp	r3, r5
 8006df0:	d001      	beq.n	8006df6 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8006df2:	2001      	movs	r0, #1
 8006df4:	e79a      	b.n	8006d2c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	f013 0f04 	tst.w	r3, #4
 8006dfc:	d006      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dfe:	4a15      	ldr	r2, [pc, #84]	; (8006e54 <HAL_RCC_ClockConfig+0x150>)
 8006e00:	6893      	ldr	r3, [r2, #8]
 8006e02:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006e06:	68e1      	ldr	r1, [r4, #12]
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	f013 0f08 	tst.w	r3, #8
 8006e12:	d007      	beq.n	8006e24 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e14:	4a0f      	ldr	r2, [pc, #60]	; (8006e54 <HAL_RCC_ClockConfig+0x150>)
 8006e16:	6893      	ldr	r3, [r2, #8]
 8006e18:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006e1c:	6921      	ldr	r1, [r4, #16]
 8006e1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006e22:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e24:	f7ff ff1a 	bl	8006c5c <HAL_RCC_GetSysClockFreq>
 8006e28:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <HAL_RCC_ClockConfig+0x150>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006e30:	4a09      	ldr	r2, [pc, #36]	; (8006e58 <HAL_RCC_ClockConfig+0x154>)
 8006e32:	5cd3      	ldrb	r3, [r2, r3]
 8006e34:	40d8      	lsrs	r0, r3
 8006e36:	4b09      	ldr	r3, [pc, #36]	; (8006e5c <HAL_RCC_ClockConfig+0x158>)
 8006e38:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8006e3a:	4b09      	ldr	r3, [pc, #36]	; (8006e60 <HAL_RCC_ClockConfig+0x15c>)
 8006e3c:	6818      	ldr	r0, [r3, #0]
 8006e3e:	f7fd fd01 	bl	8004844 <HAL_InitTick>
  return HAL_OK;
 8006e42:	2000      	movs	r0, #0
 8006e44:	e772      	b.n	8006d2c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8006e46:	2001      	movs	r0, #1
}
 8006e48:	4770      	bx	lr
        return HAL_ERROR;
 8006e4a:	2001      	movs	r0, #1
 8006e4c:	e76e      	b.n	8006d2c <HAL_RCC_ClockConfig+0x28>
 8006e4e:	bf00      	nop
 8006e50:	40023c00 	.word	0x40023c00
 8006e54:	40023800 	.word	0x40023800
 8006e58:	0800c868 	.word	0x0800c868
 8006e5c:	20000038 	.word	0x20000038
 8006e60:	20000040 	.word	0x20000040

08006e64 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8006e64:	4b01      	ldr	r3, [pc, #4]	; (8006e6c <HAL_RCC_GetHCLKFreq+0x8>)
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20000038 	.word	0x20000038

08006e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e70:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e72:	f7ff fff7 	bl	8006e64 <HAL_RCC_GetHCLKFreq>
 8006e76:	4b04      	ldr	r3, [pc, #16]	; (8006e88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006e7e:	4a03      	ldr	r2, [pc, #12]	; (8006e8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006e80:	5cd3      	ldrb	r3, [r2, r3]
}
 8006e82:	40d8      	lsrs	r0, r3
 8006e84:	bd08      	pop	{r3, pc}
 8006e86:	bf00      	nop
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	0800c878 	.word	0x0800c878

08006e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e90:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e92:	f7ff ffe7 	bl	8006e64 <HAL_RCC_GetHCLKFreq>
 8006e96:	4b04      	ldr	r3, [pc, #16]	; (8006ea8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006e9e:	4a03      	ldr	r2, [pc, #12]	; (8006eac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006ea0:	5cd3      	ldrb	r3, [r2, r3]
}
 8006ea2:	40d8      	lsrs	r0, r3
 8006ea4:	bd08      	pop	{r3, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	0800c878 	.word	0x0800c878

08006eb0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006eb0:	230f      	movs	r3, #15
 8006eb2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <HAL_RCC_GetClockConfig+0x34>)
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	f002 0203 	and.w	r2, r2, #3
 8006ebc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006ec4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8006ecc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	08db      	lsrs	r3, r3, #3
 8006ed2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006ed6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ed8:	4b03      	ldr	r3, [pc, #12]	; (8006ee8 <HAL_RCC_GetClockConfig+0x38>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 030f 	and.w	r3, r3, #15
 8006ee0:	600b      	str	r3, [r1, #0]
}
 8006ee2:	4770      	bx	lr
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	40023c00 	.word	0x40023c00

08006eec <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006eec:	4770      	bx	lr
	...

08006ef0 <HAL_RCC_NMI_IRQHandler>:
{
 8006ef0:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006ef2:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <HAL_RCC_NMI_IRQHandler+0x1c>)
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006efa:	d100      	bne.n	8006efe <HAL_RCC_NMI_IRQHandler+0xe>
}
 8006efc:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8006efe:	f7ff fff5 	bl	8006eec <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006f02:	4b03      	ldr	r3, [pc, #12]	; (8006f10 <HAL_RCC_NMI_IRQHandler+0x20>)
 8006f04:	2280      	movs	r2, #128	; 0x80
 8006f06:	701a      	strb	r2, [r3, #0]
}
 8006f08:	e7f8      	b.n	8006efc <HAL_RCC_NMI_IRQHandler+0xc>
 8006f0a:	bf00      	nop
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	4002380e 	.word	0x4002380e

08006f14 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f14:	b530      	push	{r4, r5, lr}
 8006f16:	b083      	sub	sp, #12
 8006f18:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f1a:	6803      	ldr	r3, [r0, #0]
 8006f1c:	f013 0f05 	tst.w	r3, #5
 8006f20:	d10e      	bne.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	f013 0f02 	tst.w	r3, #2
 8006f28:	d136      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	f013 0f08 	tst.w	r3, #8
 8006f30:	f000 8097 	beq.w	8007062 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f34:	7c22      	ldrb	r2, [r4, #16]
 8006f36:	4b4c      	ldr	r3, [pc, #304]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006f38:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006f3a:	2000      	movs	r0, #0
}
 8006f3c:	b003      	add	sp, #12
 8006f3e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8006f40:	4b4a      	ldr	r3, [pc, #296]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006f46:	f7fe f921 	bl	800518c <HAL_GetTick>
 8006f4a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f4c:	4b48      	ldr	r3, [pc, #288]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006f54:	d006      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f56:	f7fe f919 	bl	800518c <HAL_GetTick>
 8006f5a:	1b40      	subs	r0, r0, r5
 8006f5c:	2802      	cmp	r0, #2
 8006f5e:	d9f5      	bls.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8006f60:	2003      	movs	r0, #3
 8006f62:	e7eb      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006f64:	6862      	ldr	r2, [r4, #4]
 8006f66:	68a3      	ldr	r3, [r4, #8]
 8006f68:	071b      	lsls	r3, r3, #28
 8006f6a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006f6e:	4a40      	ldr	r2, [pc, #256]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006f70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8006f74:	4b3d      	ldr	r3, [pc, #244]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006f7a:	f7fe f907 	bl	800518c <HAL_GetTick>
 8006f7e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f80:	4b3b      	ldr	r3, [pc, #236]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006f88:	d1cb      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f8a:	f7fe f8ff 	bl	800518c <HAL_GetTick>
 8006f8e:	1b40      	subs	r0, r0, r5
 8006f90:	2802      	cmp	r0, #2
 8006f92:	d9f5      	bls.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        return HAL_TIMEOUT;
 8006f94:	2003      	movs	r0, #3
 8006f96:	e7d1      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f98:	2300      	movs	r3, #0
 8006f9a:	9301      	str	r3, [sp, #4]
 8006f9c:	4b34      	ldr	r3, [pc, #208]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fa0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fac:	9301      	str	r3, [sp, #4]
 8006fae:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8006fb0:	4a30      	ldr	r2, [pc, #192]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fb2:	6813      	ldr	r3, [r2, #0]
 8006fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006fba:	f7fe f8e7 	bl	800518c <HAL_GetTick>
 8006fbe:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006fc0:	4b2c      	ldr	r3, [pc, #176]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006fc8:	d106      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006fca:	f7fe f8df 	bl	800518c <HAL_GetTick>
 8006fce:	1b40      	subs	r0, r0, r5
 8006fd0:	2802      	cmp	r0, #2
 8006fd2:	d9f5      	bls.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 8006fd4:	2003      	movs	r0, #3
 8006fd6:	e7b1      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fd8:	4b25      	ldr	r3, [pc, #148]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fdc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006fe0:	d012      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006fe2:	68e2      	ldr	r2, [r4, #12]
 8006fe4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d00d      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fec:	4b20      	ldr	r3, [pc, #128]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006fee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ff0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ff4:	4920      	ldr	r1, [pc, #128]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ff6:	2001      	movs	r0, #1
 8006ff8:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8006ffe:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007002:	f013 0f01 	tst.w	r3, #1
 8007006:	d112      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007008:	68e3      	ldr	r3, [r4, #12]
 800700a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800700e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007012:	d01b      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x138>
 8007014:	4a16      	ldr	r2, [pc, #88]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007016:	6893      	ldr	r3, [r2, #8]
 8007018:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800701c:	6093      	str	r3, [r2, #8]
 800701e:	4914      	ldr	r1, [pc, #80]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007020:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8007022:	68e2      	ldr	r2, [r4, #12]
 8007024:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007028:	4313      	orrs	r3, r2
 800702a:	670b      	str	r3, [r1, #112]	; 0x70
 800702c:	e77d      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 800702e:	f7fe f8ad 	bl	800518c <HAL_GetTick>
 8007032:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007034:	4b0e      	ldr	r3, [pc, #56]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007038:	f013 0f02 	tst.w	r3, #2
 800703c:	d1e4      	bne.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800703e:	f7fe f8a5 	bl	800518c <HAL_GetTick>
 8007042:	1b40      	subs	r0, r0, r5
 8007044:	2864      	cmp	r0, #100	; 0x64
 8007046:	d9f5      	bls.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
 8007048:	2003      	movs	r0, #3
 800704a:	e777      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800704c:	4908      	ldr	r1, [pc, #32]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800704e:	688a      	ldr	r2, [r1, #8]
 8007050:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8007054:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800705c:	4313      	orrs	r3, r2
 800705e:	608b      	str	r3, [r1, #8]
 8007060:	e7dd      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  return HAL_OK;
 8007062:	2000      	movs	r0, #0
 8007064:	e76a      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8007066:	bf00      	nop
 8007068:	424711e0 	.word	0x424711e0
 800706c:	42470068 	.word	0x42470068
 8007070:	40023800 	.word	0x40023800
 8007074:	40007000 	.word	0x40007000
 8007078:	42470e40 	.word	0x42470e40

0800707c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007080:	6802      	ldr	r2, [r0, #0]
 8007082:	68d3      	ldr	r3, [r2, #12]
 8007084:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007088:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800708a:	f7fe f87f 	bl	800518c <HAL_GetTick>
 800708e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f013 0f20 	tst.w	r3, #32
 8007098:	d107      	bne.n	80070aa <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800709a:	f7fe f877 	bl	800518c <HAL_GetTick>
 800709e:	1b40      	subs	r0, r0, r5
 80070a0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80070a4:	d9f4      	bls.n	8007090 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 80070a6:	2003      	movs	r0, #3
 80070a8:	e000      	b.n	80070ac <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 80070aa:	2000      	movs	r0, #0
}
 80070ac:	bd38      	pop	{r3, r4, r5, pc}

080070ae <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80070ae:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80070b0:	6803      	ldr	r3, [r0, #0]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80070b8:	d001      	beq.n	80070be <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80070ba:	2000      	movs	r0, #0
}
 80070bc:	bd38      	pop	{r3, r4, r5, pc}
 80070be:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80070c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070c4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80070c6:	f7fe f861 	bl	800518c <HAL_GetTick>
 80070ca:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80070d4:	d107      	bne.n	80070e6 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80070d6:	f7fe f859 	bl	800518c <HAL_GetTick>
 80070da:	1b40      	subs	r0, r0, r5
 80070dc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80070e0:	d9f4      	bls.n	80070cc <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 80070e2:	2003      	movs	r0, #3
 80070e4:	e7ea      	b.n	80070bc <RTC_EnterInitMode+0xe>
  return HAL_OK;
 80070e6:	2000      	movs	r0, #0
 80070e8:	e7e8      	b.n	80070bc <RTC_EnterInitMode+0xe>

080070ea <HAL_RTC_Init>:
{
 80070ea:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d05c      	beq.n	80071aa <HAL_RTC_Init+0xc0>
 80070f0:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80070f2:	7f43      	ldrb	r3, [r0, #29]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d040      	beq.n	800717a <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80070f8:	2302      	movs	r3, #2
 80070fa:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	22ca      	movs	r2, #202	; 0xca
 8007100:	625a      	str	r2, [r3, #36]	; 0x24
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	2253      	movs	r2, #83	; 0x53
 8007106:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007108:	4620      	mov	r0, r4
 800710a:	f7ff ffd0 	bl	80070ae <RTC_EnterInitMode>
 800710e:	4605      	mov	r5, r0
 8007110:	2800      	cmp	r0, #0
 8007112:	d136      	bne.n	8007182 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007114:	6822      	ldr	r2, [r4, #0]
 8007116:	6893      	ldr	r3, [r2, #8]
 8007118:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800711c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007120:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007122:	6821      	ldr	r1, [r4, #0]
 8007124:	688a      	ldr	r2, [r1, #8]
 8007126:	6863      	ldr	r3, [r4, #4]
 8007128:	6920      	ldr	r0, [r4, #16]
 800712a:	4303      	orrs	r3, r0
 800712c:	6960      	ldr	r0, [r4, #20]
 800712e:	4303      	orrs	r3, r0
 8007130:	4313      	orrs	r3, r2
 8007132:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	68e2      	ldr	r2, [r4, #12]
 8007138:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	6913      	ldr	r3, [r2, #16]
 800713e:	68a1      	ldr	r1, [r4, #8]
 8007140:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007144:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007146:	6822      	ldr	r2, [r4, #0]
 8007148:	68d3      	ldr	r3, [r2, #12]
 800714a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800714e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f013 0f20 	tst.w	r3, #32
 8007158:	d01b      	beq.n	8007192 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800715e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007162:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007164:	6822      	ldr	r2, [r4, #0]
 8007166:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007168:	69a1      	ldr	r1, [r4, #24]
 800716a:	430b      	orrs	r3, r1
 800716c:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	22ff      	movs	r2, #255	; 0xff
 8007172:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8007174:	2301      	movs	r3, #1
 8007176:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8007178:	e009      	b.n	800718e <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 800717a:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800717c:	f7fd f938 	bl	80043f0 <HAL_RTC_MspInit>
 8007180:	e7ba      	b.n	80070f8 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	22ff      	movs	r2, #255	; 0xff
 8007186:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007188:	2304      	movs	r3, #4
 800718a:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 800718c:	2501      	movs	r5, #1
}
 800718e:	4628      	mov	r0, r5
 8007190:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007192:	4620      	mov	r0, r4
 8007194:	f7ff ff72 	bl	800707c <HAL_RTC_WaitForSynchro>
 8007198:	2800      	cmp	r0, #0
 800719a:	d0de      	beq.n	800715a <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800719c:	6823      	ldr	r3, [r4, #0]
 800719e:	22ff      	movs	r2, #255	; 0xff
 80071a0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80071a2:	2304      	movs	r3, #4
 80071a4:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 80071a6:	2501      	movs	r5, #1
 80071a8:	e7f1      	b.n	800718e <HAL_RTC_Init+0xa4>
     return HAL_ERROR;
 80071aa:	2501      	movs	r5, #1
 80071ac:	e7ef      	b.n	800718e <HAL_RTC_Init+0xa4>

080071ae <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80071ae:	0903      	lsrs	r3, r0, #4
 80071b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80071b4:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80071b6:	f000 000f 	and.w	r0, r0, #15
 80071ba:	4410      	add	r0, r2
}
 80071bc:	b2c0      	uxtb	r0, r0
 80071be:	4770      	bx	lr

080071c0 <HAL_RTC_GetTime>:
{
 80071c0:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80071c2:	6803      	ldr	r3, [r0, #0]
 80071c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c6:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80071c8:	6803      	ldr	r3, [r0, #0]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80071d0:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80071d2:	6803      	ldr	r3, [r0, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80071da:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80071de:	0c1d      	lsrs	r5, r3, #16
 80071e0:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 80071e4:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80071e6:	f3c3 2606 	ubfx	r6, r3, #8, #7
 80071ea:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80071ec:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 80071f0:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80071f2:	f005 0540 	and.w	r5, r5, #64	; 0x40
 80071f6:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 80071f8:	b95a      	cbnz	r2, 8007212 <HAL_RTC_GetTime+0x52>
 80071fa:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80071fc:	f7ff ffd7 	bl	80071ae <RTC_Bcd2ToByte>
 8007200:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007202:	4630      	mov	r0, r6
 8007204:	f7ff ffd3 	bl	80071ae <RTC_Bcd2ToByte>
 8007208:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800720a:	4620      	mov	r0, r4
 800720c:	f7ff ffcf 	bl	80071ae <RTC_Bcd2ToByte>
 8007210:	70a8      	strb	r0, [r5, #2]
}
 8007212:	2000      	movs	r0, #0
 8007214:	bd70      	pop	{r4, r5, r6, pc}

08007216 <HAL_RTC_GetDate>:
{
 8007216:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007218:	6803      	ldr	r3, [r0, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007220:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007224:	0c18      	lsrs	r0, r3, #16
 8007226:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007228:	f3c3 2604 	ubfx	r6, r3, #8, #5
 800722c:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800722e:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8007232:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007234:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007238:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 800723a:	b95a      	cbnz	r2, 8007254 <HAL_RTC_GetDate+0x3e>
 800723c:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800723e:	f7ff ffb6 	bl	80071ae <RTC_Bcd2ToByte>
 8007242:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007244:	4630      	mov	r0, r6
 8007246:	f7ff ffb2 	bl	80071ae <RTC_Bcd2ToByte>
 800724a:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800724c:	4628      	mov	r0, r5
 800724e:	f7ff ffae 	bl	80071ae <RTC_Bcd2ToByte>
 8007252:	70a0      	strb	r0, [r4, #2]
}
 8007254:	2000      	movs	r0, #0
 8007256:	bd70      	pop	{r4, r5, r6, pc}

08007258 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8007258:	6803      	ldr	r3, [r0, #0]
 800725a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800725c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8007260:	4770      	bx	lr

08007262 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007264:	4605      	mov	r5, r0
 8007266:	460f      	mov	r7, r1
 8007268:	4616      	mov	r6, r2
 800726a:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	ea37 0303 	bics.w	r3, r7, r3
 8007274:	bf0c      	ite	eq
 8007276:	2301      	moveq	r3, #1
 8007278:	2300      	movne	r3, #0
 800727a:	42b3      	cmp	r3, r6
 800727c:	d037      	beq.n	80072ee <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800727e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007282:	d0f3      	beq.n	800726c <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007284:	f7fd ff82 	bl	800518c <HAL_GetTick>
 8007288:	9b06      	ldr	r3, [sp, #24]
 800728a:	1ac0      	subs	r0, r0, r3
 800728c:	42a0      	cmp	r0, r4
 800728e:	d201      	bcs.n	8007294 <SPI_WaitFlagStateUntilTimeout+0x32>
 8007290:	2c00      	cmp	r4, #0
 8007292:	d1eb      	bne.n	800726c <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007294:	682a      	ldr	r2, [r5, #0]
 8007296:	6853      	ldr	r3, [r2, #4]
 8007298:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800729c:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800729e:	686b      	ldr	r3, [r5, #4]
 80072a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072a4:	d00b      	beq.n	80072be <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80072a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ac:	d014      	beq.n	80072d8 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072b4:	2300      	movs	r3, #0
 80072b6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 80072ba:	2003      	movs	r0, #3
 80072bc:	e018      	b.n	80072f0 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072be:	68ab      	ldr	r3, [r5, #8]
 80072c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072c4:	d002      	beq.n	80072cc <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ca:	d1ec      	bne.n	80072a6 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 80072cc:	682a      	ldr	r2, [r5, #0]
 80072ce:	6813      	ldr	r3, [r2, #0]
 80072d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	e7e6      	b.n	80072a6 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 80072d8:	682a      	ldr	r2, [r5, #0]
 80072da:	6813      	ldr	r3, [r2, #0]
 80072dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	682a      	ldr	r2, [r5, #0]
 80072e4:	6813      	ldr	r3, [r2, #0]
 80072e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	e7df      	b.n	80072ae <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 80072ee:	2000      	movs	r0, #0
}
 80072f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072f4:	b530      	push	{r4, r5, lr}
 80072f6:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80072f8:	4c16      	ldr	r4, [pc, #88]	; (8007354 <SPI_EndRxTxTransaction+0x60>)
 80072fa:	6824      	ldr	r4, [r4, #0]
 80072fc:	4d16      	ldr	r5, [pc, #88]	; (8007358 <SPI_EndRxTxTransaction+0x64>)
 80072fe:	fba5 3404 	umull	r3, r4, r5, r4
 8007302:	0d64      	lsrs	r4, r4, #21
 8007304:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8007308:	fb05 f404 	mul.w	r4, r5, r4
 800730c:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800730e:	6844      	ldr	r4, [r0, #4]
 8007310:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8007314:	d00b      	beq.n	800732e <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007316:	9b03      	ldr	r3, [sp, #12]
 8007318:	b1c3      	cbz	r3, 800734c <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	3b01      	subs	r3, #1
 800731e:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007320:	6803      	ldr	r3, [r0, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007328:	d1f5      	bne.n	8007316 <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	e00f      	b.n	800734e <SPI_EndRxTxTransaction+0x5a>
 800732e:	460b      	mov	r3, r1
 8007330:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007332:	9200      	str	r2, [sp, #0]
 8007334:	2200      	movs	r2, #0
 8007336:	2180      	movs	r1, #128	; 0x80
 8007338:	f7ff ff93 	bl	8007262 <SPI_WaitFlagStateUntilTimeout>
 800733c:	4603      	mov	r3, r0
 800733e:	b130      	cbz	r0, 800734e <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007340:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007342:	f043 0320 	orr.w	r3, r3, #32
 8007346:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e000      	b.n	800734e <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	b005      	add	sp, #20
 8007352:	bd30      	pop	{r4, r5, pc}
 8007354:	20000038 	.word	0x20000038
 8007358:	165e9f81 	.word	0x165e9f81

0800735c <SPI_EndRxTransaction>:
{
 800735c:	b510      	push	{r4, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007362:	6840      	ldr	r0, [r0, #4]
 8007364:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8007368:	d016      	beq.n	8007398 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800736a:	6860      	ldr	r0, [r4, #4]
 800736c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8007370:	d12e      	bne.n	80073d0 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007372:	68a3      	ldr	r3, [r4, #8]
 8007374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007378:	d01b      	beq.n	80073b2 <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800737a:	9200      	str	r2, [sp, #0]
 800737c:	460b      	mov	r3, r1
 800737e:	2200      	movs	r2, #0
 8007380:	2180      	movs	r1, #128	; 0x80
 8007382:	4620      	mov	r0, r4
 8007384:	f7ff ff6d 	bl	8007262 <SPI_WaitFlagStateUntilTimeout>
 8007388:	4603      	mov	r3, r0
 800738a:	b350      	cbz	r0, 80073e2 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800738c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800738e:	f043 0320 	orr.w	r3, r3, #32
 8007392:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e024      	b.n	80073e2 <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007398:	68a3      	ldr	r3, [r4, #8]
 800739a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800739e:	d002      	beq.n	80073a6 <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073a4:	d1e1      	bne.n	800736a <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 80073a6:	6820      	ldr	r0, [r4, #0]
 80073a8:	6803      	ldr	r3, [r0, #0]
 80073aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ae:	6003      	str	r3, [r0, #0]
 80073b0:	e7db      	b.n	800736a <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80073b2:	9200      	str	r2, [sp, #0]
 80073b4:	460b      	mov	r3, r1
 80073b6:	2200      	movs	r2, #0
 80073b8:	2101      	movs	r1, #1
 80073ba:	4620      	mov	r0, r4
 80073bc:	f7ff ff51 	bl	8007262 <SPI_WaitFlagStateUntilTimeout>
 80073c0:	4603      	mov	r3, r0
 80073c2:	b170      	cbz	r0, 80073e2 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80073c6:	f043 0320 	orr.w	r3, r3, #32
 80073ca:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e008      	b.n	80073e2 <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80073d0:	9200      	str	r2, [sp, #0]
 80073d2:	460b      	mov	r3, r1
 80073d4:	2200      	movs	r2, #0
 80073d6:	2101      	movs	r1, #1
 80073d8:	4620      	mov	r0, r4
 80073da:	f7ff ff42 	bl	8007262 <SPI_WaitFlagStateUntilTimeout>
 80073de:	4603      	mov	r3, r0
 80073e0:	b910      	cbnz	r0, 80073e8 <SPI_EndRxTransaction+0x8c>
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	b002      	add	sp, #8
 80073e6:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80073ea:	f043 0320 	orr.w	r3, r3, #32
 80073ee:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e7f6      	b.n	80073e2 <SPI_EndRxTransaction+0x86>

080073f4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d03b      	beq.n	8007470 <HAL_SPI_Init+0x7c>
{
 80073f8:	b510      	push	{r4, lr}
 80073fa:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073fc:	2300      	movs	r3, #0
 80073fe:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007400:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8007404:	2b00      	cmp	r3, #0
 8007406:	d02e      	beq.n	8007466 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8007408:	2302      	movs	r3, #2
 800740a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800740e:	6822      	ldr	r2, [r4, #0]
 8007410:	6813      	ldr	r3, [r2, #0]
 8007412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007416:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007418:	6863      	ldr	r3, [r4, #4]
 800741a:	68a2      	ldr	r2, [r4, #8]
 800741c:	4313      	orrs	r3, r2
 800741e:	68e2      	ldr	r2, [r4, #12]
 8007420:	4313      	orrs	r3, r2
 8007422:	6922      	ldr	r2, [r4, #16]
 8007424:	4313      	orrs	r3, r2
 8007426:	6962      	ldr	r2, [r4, #20]
 8007428:	4313      	orrs	r3, r2
 800742a:	69a2      	ldr	r2, [r4, #24]
 800742c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8007430:	4313      	orrs	r3, r2
 8007432:	69e2      	ldr	r2, [r4, #28]
 8007434:	4313      	orrs	r3, r2
 8007436:	6a22      	ldr	r2, [r4, #32]
 8007438:	4313      	orrs	r3, r2
 800743a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800743c:	6822      	ldr	r2, [r4, #0]
 800743e:	430b      	orrs	r3, r1
 8007440:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007442:	8b63      	ldrh	r3, [r4, #26]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800744a:	6822      	ldr	r2, [r4, #0]
 800744c:	430b      	orrs	r3, r1
 800744e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007450:	6822      	ldr	r2, [r4, #0]
 8007452:	69d3      	ldr	r3, [r2, #28]
 8007454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007458:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800745a:	2000      	movs	r0, #0
 800745c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800745e:	2301      	movs	r3, #1
 8007460:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8007464:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8007466:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800746a:	f7fc ffcf 	bl	800440c <HAL_SPI_MspInit>
 800746e:	e7cb      	b.n	8007408 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8007470:	2001      	movs	r0, #1
}
 8007472:	4770      	bx	lr

08007474 <HAL_SPI_Transmit>:
{
 8007474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007478:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800747a:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800747e:	2c01      	cmp	r4, #1
 8007480:	f000 80c3 	beq.w	800760a <HAL_SPI_Transmit+0x196>
 8007484:	461d      	mov	r5, r3
 8007486:	4617      	mov	r7, r2
 8007488:	4688      	mov	r8, r1
 800748a:	4604      	mov	r4, r0
 800748c:	2301      	movs	r3, #1
 800748e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8007492:	f7fd fe7b 	bl	800518c <HAL_GetTick>
 8007496:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007498:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d009      	beq.n	80074b6 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 80074a2:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80074a4:	2301      	movs	r3, #1
 80074a6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80074aa:	2300      	movs	r3, #0
 80074ac:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80074b0:	b002      	add	sp, #8
 80074b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80074b6:	f1b8 0f00 	cmp.w	r8, #0
 80074ba:	f000 8098 	beq.w	80075ee <HAL_SPI_Transmit+0x17a>
 80074be:	2f00      	cmp	r7, #0
 80074c0:	f000 8097 	beq.w	80075f2 <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074c4:	2303      	movs	r3, #3
 80074c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074ca:	2300      	movs	r3, #0
 80074cc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074ce:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80074d2:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80074d4:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074d6:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80074d8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80074da:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80074dc:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80074de:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074e0:	68a3      	ldr	r3, [r4, #8]
 80074e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e6:	d01c      	beq.n	8007522 <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 80074f0:	d103      	bne.n	80074fa <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074f8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074fa:	68e3      	ldr	r3, [r4, #12]
 80074fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007500:	d015      	beq.n	800752e <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007502:	6863      	ldr	r3, [r4, #4]
 8007504:	b10b      	cbz	r3, 800750a <HAL_SPI_Transmit+0x96>
 8007506:	2f01      	cmp	r7, #1
 8007508:	d149      	bne.n	800759e <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800750a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	7812      	ldrb	r2, [r2, #0]
 8007510:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007512:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007514:	3301      	adds	r3, #1
 8007516:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8007518:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800751a:	3b01      	subs	r3, #1
 800751c:	b29b      	uxth	r3, r3
 800751e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8007520:	e03d      	b.n	800759e <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 8007522:	6822      	ldr	r2, [r4, #0]
 8007524:	6813      	ldr	r3, [r2, #0]
 8007526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800752a:	6013      	str	r3, [r2, #0]
 800752c:	e7dc      	b.n	80074e8 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800752e:	6863      	ldr	r3, [r4, #4]
 8007530:	b10b      	cbz	r3, 8007536 <HAL_SPI_Transmit+0xc2>
 8007532:	2f01      	cmp	r7, #1
 8007534:	d115      	bne.n	8007562 <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007536:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	8812      	ldrh	r2, [r2, #0]
 800753c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800753e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007540:	3302      	adds	r3, #2
 8007542:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8007544:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007546:	3b01      	subs	r3, #1
 8007548:	b29b      	uxth	r3, r3
 800754a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800754c:	e009      	b.n	8007562 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800754e:	f7fd fe1d 	bl	800518c <HAL_GetTick>
 8007552:	1b80      	subs	r0, r0, r6
 8007554:	42a8      	cmp	r0, r5
 8007556:	d302      	bcc.n	800755e <HAL_SPI_Transmit+0xea>
 8007558:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800755c:	d14b      	bne.n	80075f6 <HAL_SPI_Transmit+0x182>
 800755e:	2d00      	cmp	r5, #0
 8007560:	d04b      	beq.n	80075fa <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 8007562:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d02c      	beq.n	80075c4 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	f012 0f02 	tst.w	r2, #2
 8007572:	d0ec      	beq.n	800754e <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007574:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007576:	8812      	ldrh	r2, [r2, #0]
 8007578:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800757a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800757c:	3302      	adds	r3, #2
 800757e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007580:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007582:	3b01      	subs	r3, #1
 8007584:	b29b      	uxth	r3, r3
 8007586:	86e3      	strh	r3, [r4, #54]	; 0x36
 8007588:	e7eb      	b.n	8007562 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800758a:	f7fd fdff 	bl	800518c <HAL_GetTick>
 800758e:	1b80      	subs	r0, r0, r6
 8007590:	42a8      	cmp	r0, r5
 8007592:	d302      	bcc.n	800759a <HAL_SPI_Transmit+0x126>
 8007594:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007598:	d131      	bne.n	80075fe <HAL_SPI_Transmit+0x18a>
 800759a:	2d00      	cmp	r5, #0
 800759c:	d031      	beq.n	8007602 <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 800759e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	b17b      	cbz	r3, 80075c4 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075a4:	6823      	ldr	r3, [r4, #0]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	f012 0f02 	tst.w	r2, #2
 80075ac:	d0ed      	beq.n	800758a <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80075b0:	7812      	ldrb	r2, [r2, #0]
 80075b2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80075b6:	3301      	adds	r3, #1
 80075b8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80075ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29b      	uxth	r3, r3
 80075c0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80075c2:	e7ec      	b.n	800759e <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075c4:	4632      	mov	r2, r6
 80075c6:	4629      	mov	r1, r5
 80075c8:	4620      	mov	r0, r4
 80075ca:	f7ff fe93 	bl	80072f4 <SPI_EndRxTxTransaction>
 80075ce:	b108      	cbz	r0, 80075d4 <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075d0:	2320      	movs	r3, #32
 80075d2:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075d4:	68a3      	ldr	r3, [r4, #8]
 80075d6:	b933      	cbnz	r3, 80075e6 <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075d8:	9301      	str	r3, [sp, #4]
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	9201      	str	r2, [sp, #4]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	9301      	str	r3, [sp, #4]
 80075e4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80075e8:	b96b      	cbnz	r3, 8007606 <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075ea:	2000      	movs	r0, #0
 80075ec:	e75a      	b.n	80074a4 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80075ee:	2001      	movs	r0, #1
 80075f0:	e758      	b.n	80074a4 <HAL_SPI_Transmit+0x30>
 80075f2:	2001      	movs	r0, #1
 80075f4:	e756      	b.n	80074a4 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80075f6:	2003      	movs	r0, #3
 80075f8:	e754      	b.n	80074a4 <HAL_SPI_Transmit+0x30>
 80075fa:	2003      	movs	r0, #3
 80075fc:	e752      	b.n	80074a4 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80075fe:	2003      	movs	r0, #3
 8007600:	e750      	b.n	80074a4 <HAL_SPI_Transmit+0x30>
 8007602:	2003      	movs	r0, #3
 8007604:	e74e      	b.n	80074a4 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8007606:	2001      	movs	r0, #1
 8007608:	e74c      	b.n	80074a4 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 800760a:	2002      	movs	r0, #2
 800760c:	e750      	b.n	80074b0 <HAL_SPI_Transmit+0x3c>

0800760e <HAL_SPI_TransmitReceive>:
{
 800760e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007612:	b083      	sub	sp, #12
 8007614:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8007618:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800761c:	2c01      	cmp	r4, #1
 800761e:	f000 810b 	beq.w	8007838 <HAL_SPI_TransmitReceive+0x22a>
 8007622:	461d      	mov	r5, r3
 8007624:	4617      	mov	r7, r2
 8007626:	460e      	mov	r6, r1
 8007628:	4604      	mov	r4, r0
 800762a:	2301      	movs	r3, #1
 800762c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8007630:	f7fd fdac 	bl	800518c <HAL_GetTick>
 8007634:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8007636:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800763a:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 800763c:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800763e:	2801      	cmp	r0, #1
 8007640:	d015      	beq.n	800766e <HAL_SPI_TransmitReceive+0x60>
 8007642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007646:	d00a      	beq.n	800765e <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 8007648:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 800764a:	2201      	movs	r2, #1
 800764c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007650:	2200      	movs	r2, #0
 8007652:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8007656:	4618      	mov	r0, r3
 8007658:	b003      	add	sp, #12
 800765a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800765e:	68a3      	ldr	r3, [r4, #8]
 8007660:	2b00      	cmp	r3, #0
 8007662:	f040 80db 	bne.w	800781c <HAL_SPI_TransmitReceive+0x20e>
 8007666:	2804      	cmp	r0, #4
 8007668:	d001      	beq.n	800766e <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 800766a:	2302      	movs	r3, #2
 800766c:	e7ed      	b.n	800764a <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800766e:	2e00      	cmp	r6, #0
 8007670:	f000 80d6 	beq.w	8007820 <HAL_SPI_TransmitReceive+0x212>
 8007674:	2f00      	cmp	r7, #0
 8007676:	f000 80d5 	beq.w	8007824 <HAL_SPI_TransmitReceive+0x216>
 800767a:	2d00      	cmp	r5, #0
 800767c:	f000 80d4 	beq.w	8007828 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007680:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b04      	cmp	r3, #4
 8007688:	d002      	beq.n	8007690 <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800768a:	2305      	movs	r3, #5
 800768c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007690:	2300      	movs	r3, #0
 8007692:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007694:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007696:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007698:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800769a:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 800769c:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800769e:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80076a0:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80076a2:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80076ac:	d103      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076b4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076b6:	68e3      	ldr	r3, [r4, #12]
 80076b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076bc:	d010      	beq.n	80076e0 <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076be:	6863      	ldr	r3, [r4, #4]
 80076c0:	b10b      	cbz	r3, 80076c6 <HAL_SPI_TransmitReceive+0xb8>
 80076c2:	2d01      	cmp	r5, #1
 80076c4:	d10a      	bne.n	80076dc <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	7812      	ldrb	r2, [r2, #0]
 80076cc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076d0:	3301      	adds	r3, #1
 80076d2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80076d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80076d6:	3b01      	subs	r3, #1
 80076d8:	b29b      	uxth	r3, r3
 80076da:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80076dc:	2501      	movs	r5, #1
 80076de:	e069      	b.n	80077b4 <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076e0:	6863      	ldr	r3, [r4, #4]
 80076e2:	b10b      	cbz	r3, 80076e8 <HAL_SPI_TransmitReceive+0xda>
 80076e4:	2d01      	cmp	r5, #1
 80076e6:	d10a      	bne.n	80076fe <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	8812      	ldrh	r2, [r2, #0]
 80076ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076f2:	3302      	adds	r3, #2
 80076f4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80076f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80076fe:	2501      	movs	r5, #1
 8007700:	e01b      	b.n	800773a <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	f012 0f01 	tst.w	r2, #1
 800770a:	d00d      	beq.n	8007728 <HAL_SPI_TransmitReceive+0x11a>
 800770c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800770e:	b292      	uxth	r2, r2
 8007710:	b152      	cbz	r2, 8007728 <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007712:	68da      	ldr	r2, [r3, #12]
 8007714:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007716:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007718:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800771a:	3302      	adds	r3, #2
 800771c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800771e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007720:	3b01      	subs	r3, #1
 8007722:	b29b      	uxth	r3, r3
 8007724:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8007726:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007728:	f7fd fd30 	bl	800518c <HAL_GetTick>
 800772c:	eba0 0009 	sub.w	r0, r0, r9
 8007730:	4540      	cmp	r0, r8
 8007732:	d302      	bcc.n	800773a <HAL_SPI_TransmitReceive+0x12c>
 8007734:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007738:	d178      	bne.n	800782c <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800773a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800773c:	b29b      	uxth	r3, r3
 800773e:	b91b      	cbnz	r3, 8007748 <HAL_SPI_TransmitReceive+0x13a>
 8007740:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007742:	b29b      	uxth	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d052      	beq.n	80077ee <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	f012 0f02 	tst.w	r2, #2
 8007750:	d0d7      	beq.n	8007702 <HAL_SPI_TransmitReceive+0xf4>
 8007752:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8007754:	b292      	uxth	r2, r2
 8007756:	2a00      	cmp	r2, #0
 8007758:	d0d3      	beq.n	8007702 <HAL_SPI_TransmitReceive+0xf4>
 800775a:	2d00      	cmp	r5, #0
 800775c:	d0d1      	beq.n	8007702 <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800775e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007760:	8812      	ldrh	r2, [r2, #0]
 8007762:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007764:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007766:	3302      	adds	r3, #2
 8007768:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800776a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800776c:	3b01      	subs	r3, #1
 800776e:	b29b      	uxth	r3, r3
 8007770:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8007772:	2500      	movs	r5, #0
 8007774:	e7c5      	b.n	8007702 <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	f012 0f01 	tst.w	r2, #1
 800777e:	d00d      	beq.n	800779c <HAL_SPI_TransmitReceive+0x18e>
 8007780:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007782:	b292      	uxth	r2, r2
 8007784:	b152      	cbz	r2, 800779c <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800778a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800778c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800778e:	3301      	adds	r3, #1
 8007790:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007792:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007794:	3b01      	subs	r3, #1
 8007796:	b29b      	uxth	r3, r3
 8007798:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800779a:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800779c:	f7fd fcf6 	bl	800518c <HAL_GetTick>
 80077a0:	eba0 0009 	sub.w	r0, r0, r9
 80077a4:	4540      	cmp	r0, r8
 80077a6:	d302      	bcc.n	80077ae <HAL_SPI_TransmitReceive+0x1a0>
 80077a8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80077ac:	d140      	bne.n	8007830 <HAL_SPI_TransmitReceive+0x222>
 80077ae:	f1b8 0f00 	cmp.w	r8, #0
 80077b2:	d03f      	beq.n	8007834 <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	b913      	cbnz	r3, 80077c0 <HAL_SPI_TransmitReceive+0x1b2>
 80077ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80077bc:	b29b      	uxth	r3, r3
 80077be:	b1b3      	cbz	r3, 80077ee <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077c0:	6823      	ldr	r3, [r4, #0]
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	f012 0f02 	tst.w	r2, #2
 80077c8:	d0d5      	beq.n	8007776 <HAL_SPI_TransmitReceive+0x168>
 80077ca:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80077cc:	b292      	uxth	r2, r2
 80077ce:	2a00      	cmp	r2, #0
 80077d0:	d0d1      	beq.n	8007776 <HAL_SPI_TransmitReceive+0x168>
 80077d2:	2d00      	cmp	r5, #0
 80077d4:	d0cf      	beq.n	8007776 <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80077d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80077d8:	7812      	ldrb	r2, [r2, #0]
 80077da:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80077dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80077de:	3301      	adds	r3, #1
 80077e0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80077e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80077e4:	3b01      	subs	r3, #1
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80077ea:	2500      	movs	r5, #0
 80077ec:	e7c3      	b.n	8007776 <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077ee:	464a      	mov	r2, r9
 80077f0:	4641      	mov	r1, r8
 80077f2:	4620      	mov	r0, r4
 80077f4:	f7ff fd7e 	bl	80072f4 <SPI_EndRxTxTransaction>
 80077f8:	4603      	mov	r3, r0
 80077fa:	b118      	cbz	r0, 8007804 <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077fc:	2320      	movs	r3, #32
 80077fe:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
    goto error;
 8007802:	e722      	b.n	800764a <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007804:	68a2      	ldr	r2, [r4, #8]
 8007806:	2a00      	cmp	r2, #0
 8007808:	f47f af1f 	bne.w	800764a <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800780c:	9201      	str	r2, [sp, #4]
 800780e:	6822      	ldr	r2, [r4, #0]
 8007810:	68d1      	ldr	r1, [r2, #12]
 8007812:	9101      	str	r1, [sp, #4]
 8007814:	6892      	ldr	r2, [r2, #8]
 8007816:	9201      	str	r2, [sp, #4]
 8007818:	9a01      	ldr	r2, [sp, #4]
 800781a:	e716      	b.n	800764a <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 800781c:	2302      	movs	r3, #2
 800781e:	e714      	b.n	800764a <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e712      	b.n	800764a <HAL_SPI_TransmitReceive+0x3c>
 8007824:	2301      	movs	r3, #1
 8007826:	e710      	b.n	800764a <HAL_SPI_TransmitReceive+0x3c>
 8007828:	2301      	movs	r3, #1
 800782a:	e70e      	b.n	800764a <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e70c      	b.n	800764a <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e70a      	b.n	800764a <HAL_SPI_TransmitReceive+0x3c>
 8007834:	2303      	movs	r3, #3
 8007836:	e708      	b.n	800764a <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8007838:	2302      	movs	r3, #2
 800783a:	e70c      	b.n	8007656 <HAL_SPI_TransmitReceive+0x48>

0800783c <HAL_SPI_Receive>:
{
 800783c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	4604      	mov	r4, r0
 8007844:	460f      	mov	r7, r1
 8007846:	4690      	mov	r8, r2
 8007848:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800784a:	6843      	ldr	r3, [r0, #4]
 800784c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007850:	d019      	beq.n	8007886 <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 8007852:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8007856:	2b01      	cmp	r3, #1
 8007858:	f000 809f 	beq.w	800799a <HAL_SPI_Receive+0x15e>
 800785c:	2301      	movs	r3, #1
 800785e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8007862:	f7fd fc93 	bl	800518c <HAL_GetTick>
 8007866:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007868:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b01      	cmp	r3, #1
 8007870:	d015      	beq.n	800789e <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 8007872:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007874:	2301      	movs	r3, #1
 8007876:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800787a:	2300      	movs	r3, #0
 800787c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007880:	b002      	add	sp, #8
 8007882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007886:	6883      	ldr	r3, [r0, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e2      	bne.n	8007852 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800788c:	2304      	movs	r3, #4
 800788e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007892:	9500      	str	r5, [sp, #0]
 8007894:	4613      	mov	r3, r2
 8007896:	460a      	mov	r2, r1
 8007898:	f7ff feb9 	bl	800760e <HAL_SPI_TransmitReceive>
 800789c:	e7f0      	b.n	8007880 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 800789e:	2f00      	cmp	r7, #0
 80078a0:	d06d      	beq.n	800797e <HAL_SPI_Receive+0x142>
 80078a2:	f1b8 0f00 	cmp.w	r8, #0
 80078a6:	d06c      	beq.n	8007982 <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80078a8:	2304      	movs	r3, #4
 80078aa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078ae:	2300      	movs	r3, #0
 80078b0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80078b2:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80078b4:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80078b8:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80078bc:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80078be:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80078c0:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 80078c2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078c4:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078c6:	68a3      	ldr	r3, [r4, #8]
 80078c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078cc:	d00b      	beq.n	80078e6 <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80078d6:	d103      	bne.n	80078e0 <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078de:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80078e0:	68e3      	ldr	r3, [r4, #12]
 80078e2:	b183      	cbz	r3, 8007906 <HAL_SPI_Receive+0xca>
 80078e4:	e02c      	b.n	8007940 <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 80078e6:	6822      	ldr	r2, [r4, #0]
 80078e8:	6813      	ldr	r3, [r2, #0]
 80078ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	e7ed      	b.n	80078ce <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078f2:	f7fd fc4b 	bl	800518c <HAL_GetTick>
 80078f6:	1b80      	subs	r0, r0, r6
 80078f8:	42a8      	cmp	r0, r5
 80078fa:	d302      	bcc.n	8007902 <HAL_SPI_Receive+0xc6>
 80078fc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007900:	d141      	bne.n	8007986 <HAL_SPI_Receive+0x14a>
 8007902:	2d00      	cmp	r5, #0
 8007904:	d041      	beq.n	800798a <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 8007906:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007908:	b29b      	uxth	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d02b      	beq.n	8007966 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	689a      	ldr	r2, [r3, #8]
 8007912:	f012 0f01 	tst.w	r2, #1
 8007916:	d0ec      	beq.n	80078f2 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007918:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800791a:	7b1b      	ldrb	r3, [r3, #12]
 800791c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800791e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007920:	3301      	adds	r3, #1
 8007922:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007924:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007926:	3b01      	subs	r3, #1
 8007928:	b29b      	uxth	r3, r3
 800792a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800792c:	e7eb      	b.n	8007906 <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800792e:	f7fd fc2d 	bl	800518c <HAL_GetTick>
 8007932:	1b80      	subs	r0, r0, r6
 8007934:	42a8      	cmp	r0, r5
 8007936:	d302      	bcc.n	800793e <HAL_SPI_Receive+0x102>
 8007938:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800793c:	d127      	bne.n	800798e <HAL_SPI_Receive+0x152>
 800793e:	b345      	cbz	r5, 8007992 <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 8007940:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007942:	b29b      	uxth	r3, r3
 8007944:	b17b      	cbz	r3, 8007966 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	f012 0f01 	tst.w	r2, #1
 800794e:	d0ee      	beq.n	800792e <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007950:	68da      	ldr	r2, [r3, #12]
 8007952:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007954:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007958:	3302      	adds	r3, #2
 800795a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800795c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800795e:	3b01      	subs	r3, #1
 8007960:	b29b      	uxth	r3, r3
 8007962:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007964:	e7ec      	b.n	8007940 <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007966:	4632      	mov	r2, r6
 8007968:	4629      	mov	r1, r5
 800796a:	4620      	mov	r0, r4
 800796c:	f7ff fcf6 	bl	800735c <SPI_EndRxTransaction>
 8007970:	b108      	cbz	r0, 8007976 <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007972:	2320      	movs	r3, #32
 8007974:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007976:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007978:	b96b      	cbnz	r3, 8007996 <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800797a:	2000      	movs	r0, #0
 800797c:	e77a      	b.n	8007874 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 800797e:	2001      	movs	r0, #1
 8007980:	e778      	b.n	8007874 <HAL_SPI_Receive+0x38>
 8007982:	2001      	movs	r0, #1
 8007984:	e776      	b.n	8007874 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8007986:	2003      	movs	r0, #3
 8007988:	e774      	b.n	8007874 <HAL_SPI_Receive+0x38>
 800798a:	2003      	movs	r0, #3
 800798c:	e772      	b.n	8007874 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800798e:	2003      	movs	r0, #3
 8007990:	e770      	b.n	8007874 <HAL_SPI_Receive+0x38>
 8007992:	2003      	movs	r0, #3
 8007994:	e76e      	b.n	8007874 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8007996:	2001      	movs	r0, #1
 8007998:	e76c      	b.n	8007874 <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 800799a:	2002      	movs	r0, #2
 800799c:	e770      	b.n	8007880 <HAL_SPI_Receive+0x44>
	...

080079a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079a0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079a2:	6a03      	ldr	r3, [r0, #32]
 80079a4:	f023 0301 	bic.w	r3, r3, #1
 80079a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ac:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ae:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079b0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079b4:	680d      	ldr	r5, [r1, #0]
 80079b6:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079ba:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079be:	688b      	ldr	r3, [r1, #8]
 80079c0:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079c2:	4d0d      	ldr	r5, [pc, #52]	; (80079f8 <TIM_OC1_SetConfig+0x58>)
 80079c4:	42a8      	cmp	r0, r5
 80079c6:	d009      	beq.n	80079dc <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079c8:	4d0b      	ldr	r5, [pc, #44]	; (80079f8 <TIM_OC1_SetConfig+0x58>)
 80079ca:	42a8      	cmp	r0, r5
 80079cc:	d00d      	beq.n	80079ea <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ce:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079d0:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079d2:	684a      	ldr	r2, [r1, #4]
 80079d4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d6:	6203      	str	r3, [r0, #32]
}
 80079d8:	bc70      	pop	{r4, r5, r6}
 80079da:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80079dc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80079e0:	68cc      	ldr	r4, [r1, #12]
 80079e2:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80079e4:	f023 0304 	bic.w	r3, r3, #4
 80079e8:	e7ee      	b.n	80079c8 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80079ee:	694c      	ldr	r4, [r1, #20]
 80079f0:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 80079f2:	698a      	ldr	r2, [r1, #24]
 80079f4:	4322      	orrs	r2, r4
 80079f6:	e7ea      	b.n	80079ce <TIM_OC1_SetConfig+0x2e>
 80079f8:	40010000 	.word	0x40010000

080079fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079fc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079fe:	6a03      	ldr	r3, [r0, #32]
 8007a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a04:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a06:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a08:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a0a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a0c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a10:	680d      	ldr	r5, [r1, #0]
 8007a12:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a18:	688d      	ldr	r5, [r1, #8]
 8007a1a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a1e:	4d0f      	ldr	r5, [pc, #60]	; (8007a5c <TIM_OC3_SetConfig+0x60>)
 8007a20:	42a8      	cmp	r0, r5
 8007a22:	d009      	beq.n	8007a38 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a24:	4d0d      	ldr	r5, [pc, #52]	; (8007a5c <TIM_OC3_SetConfig+0x60>)
 8007a26:	42a8      	cmp	r0, r5
 8007a28:	d00e      	beq.n	8007a48 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a2a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a2c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a2e:	684a      	ldr	r2, [r1, #4]
 8007a30:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a32:	6203      	str	r3, [r0, #32]
}
 8007a34:	bc30      	pop	{r4, r5}
 8007a36:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a3c:	68cd      	ldr	r5, [r1, #12]
 8007a3e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a46:	e7ed      	b.n	8007a24 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a48:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a4c:	694d      	ldr	r5, [r1, #20]
 8007a4e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a52:	698d      	ldr	r5, [r1, #24]
 8007a54:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8007a58:	e7e7      	b.n	8007a2a <TIM_OC3_SetConfig+0x2e>
 8007a5a:	bf00      	nop
 8007a5c:	40010000 	.word	0x40010000

08007a60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a60:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a62:	6a03      	ldr	r3, [r0, #32]
 8007a64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a6a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a6c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a6e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a70:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a74:	680d      	ldr	r5, [r1, #0]
 8007a76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a7e:	688d      	ldr	r5, [r1, #8]
 8007a80:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a84:	4d07      	ldr	r5, [pc, #28]	; (8007aa4 <TIM_OC4_SetConfig+0x44>)
 8007a86:	42a8      	cmp	r0, r5
 8007a88:	d006      	beq.n	8007a98 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a8a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a8c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a8e:	684a      	ldr	r2, [r1, #4]
 8007a90:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a92:	6203      	str	r3, [r0, #32]
}
 8007a94:	bc30      	pop	{r4, r5}
 8007a96:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a98:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a9c:	694d      	ldr	r5, [r1, #20]
 8007a9e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8007aa2:	e7f2      	b.n	8007a8a <TIM_OC4_SetConfig+0x2a>
 8007aa4:	40010000 	.word	0x40010000

08007aa8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007aa8:	6802      	ldr	r2, [r0, #0]
 8007aaa:	68d3      	ldr	r3, [r2, #12]
 8007aac:	f043 0301 	orr.w	r3, r3, #1
 8007ab0:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ab2:	6802      	ldr	r2, [r0, #0]
 8007ab4:	6893      	ldr	r3, [r2, #8]
 8007ab6:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aba:	2b06      	cmp	r3, #6
 8007abc:	d003      	beq.n	8007ac6 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8007abe:	6813      	ldr	r3, [r2, #0]
 8007ac0:	f043 0301 	orr.w	r3, r3, #1
 8007ac4:	6013      	str	r3, [r2, #0]
}
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	4770      	bx	lr

08007aca <HAL_TIM_OC_DelayElapsedCallback>:
}
 8007aca:	4770      	bx	lr

08007acc <HAL_TIM_IC_CaptureCallback>:
}
 8007acc:	4770      	bx	lr

08007ace <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8007ace:	4770      	bx	lr

08007ad0 <HAL_TIM_TriggerCallback>:
}
 8007ad0:	4770      	bx	lr

08007ad2 <HAL_TIM_IRQHandler>:
{
 8007ad2:	b510      	push	{r4, lr}
 8007ad4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ad6:	6803      	ldr	r3, [r0, #0]
 8007ad8:	691a      	ldr	r2, [r3, #16]
 8007ada:	f012 0f02 	tst.w	r2, #2
 8007ade:	d011      	beq.n	8007b04 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	f012 0f02 	tst.w	r2, #2
 8007ae6:	d00d      	beq.n	8007b04 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ae8:	f06f 0202 	mvn.w	r2, #2
 8007aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007aee:	2301      	movs	r3, #1
 8007af0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007af2:	6803      	ldr	r3, [r0, #0]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	f013 0f03 	tst.w	r3, #3
 8007afa:	d070      	beq.n	8007bde <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8007afc:	f7ff ffe6 	bl	8007acc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b00:	2300      	movs	r3, #0
 8007b02:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	691a      	ldr	r2, [r3, #16]
 8007b08:	f012 0f04 	tst.w	r2, #4
 8007b0c:	d012      	beq.n	8007b34 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	f012 0f04 	tst.w	r2, #4
 8007b14:	d00e      	beq.n	8007b34 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b16:	f06f 0204 	mvn.w	r2, #4
 8007b1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007b28:	d05f      	beq.n	8007bea <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f7ff ffce 	bl	8007acc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b30:	2300      	movs	r3, #0
 8007b32:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	691a      	ldr	r2, [r3, #16]
 8007b38:	f012 0f08 	tst.w	r2, #8
 8007b3c:	d012      	beq.n	8007b64 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b3e:	68da      	ldr	r2, [r3, #12]
 8007b40:	f012 0f08 	tst.w	r2, #8
 8007b44:	d00e      	beq.n	8007b64 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b46:	f06f 0208 	mvn.w	r2, #8
 8007b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b4c:	2304      	movs	r3, #4
 8007b4e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	f013 0f03 	tst.w	r3, #3
 8007b58:	d04e      	beq.n	8007bf8 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f7ff ffb6 	bl	8007acc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b60:	2300      	movs	r3, #0
 8007b62:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	691a      	ldr	r2, [r3, #16]
 8007b68:	f012 0f10 	tst.w	r2, #16
 8007b6c:	d012      	beq.n	8007b94 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b6e:	68da      	ldr	r2, [r3, #12]
 8007b70:	f012 0f10 	tst.w	r2, #16
 8007b74:	d00e      	beq.n	8007b94 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b76:	f06f 0210 	mvn.w	r2, #16
 8007b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b7c:	2308      	movs	r3, #8
 8007b7e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007b88:	d03d      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f7ff ff9e 	bl	8007acc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b90:	2300      	movs	r3, #0
 8007b92:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	f012 0f01 	tst.w	r2, #1
 8007b9c:	d003      	beq.n	8007ba6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	f012 0f01 	tst.w	r2, #1
 8007ba4:	d136      	bne.n	8007c14 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	691a      	ldr	r2, [r3, #16]
 8007baa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007bae:	d003      	beq.n	8007bb8 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007bb6:	d134      	bne.n	8007c22 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	691a      	ldr	r2, [r3, #16]
 8007bbc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007bc0:	d003      	beq.n	8007bca <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bc2:	68da      	ldr	r2, [r3, #12]
 8007bc4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007bc8:	d132      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	691a      	ldr	r2, [r3, #16]
 8007bce:	f012 0f20 	tst.w	r2, #32
 8007bd2:	d003      	beq.n	8007bdc <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bd4:	68da      	ldr	r2, [r3, #12]
 8007bd6:	f012 0f20 	tst.w	r2, #32
 8007bda:	d130      	bne.n	8007c3e <HAL_TIM_IRQHandler+0x16c>
}
 8007bdc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bde:	f7ff ff74 	bl	8007aca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be2:	4620      	mov	r0, r4
 8007be4:	f7ff ff73 	bl	8007ace <HAL_TIM_PWM_PulseFinishedCallback>
 8007be8:	e78a      	b.n	8007b00 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bea:	4620      	mov	r0, r4
 8007bec:	f7ff ff6d 	bl	8007aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f7ff ff6c 	bl	8007ace <HAL_TIM_PWM_PulseFinishedCallback>
 8007bf6:	e79b      	b.n	8007b30 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f7ff ff66 	bl	8007aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f7ff ff65 	bl	8007ace <HAL_TIM_PWM_PulseFinishedCallback>
 8007c04:	e7ac      	b.n	8007b60 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c06:	4620      	mov	r0, r4
 8007c08:	f7ff ff5f 	bl	8007aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f7ff ff5e 	bl	8007ace <HAL_TIM_PWM_PulseFinishedCallback>
 8007c12:	e7bd      	b.n	8007b90 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c14:	f06f 0201 	mvn.w	r2, #1
 8007c18:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f7fc f81c 	bl	8003c58 <HAL_TIM_PeriodElapsedCallback>
 8007c20:	e7c1      	b.n	8007ba6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c26:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 f9c5 	bl	8007fb8 <HAL_TIMEx_BreakCallback>
 8007c2e:	e7c3      	b.n	8007bb8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c34:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007c36:	4620      	mov	r0, r4
 8007c38:	f7ff ff4a 	bl	8007ad0 <HAL_TIM_TriggerCallback>
 8007c3c:	e7c5      	b.n	8007bca <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c3e:	f06f 0220 	mvn.w	r2, #32
 8007c42:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007c44:	4620      	mov	r0, r4
 8007c46:	f000 f9b6 	bl	8007fb6 <HAL_TIMEx_CommutCallback>
}
 8007c4a:	e7c7      	b.n	8007bdc <HAL_TIM_IRQHandler+0x10a>

08007c4c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8007c4c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c4e:	4a25      	ldr	r2, [pc, #148]	; (8007ce4 <TIM_Base_SetConfig+0x98>)
 8007c50:	4290      	cmp	r0, r2
 8007c52:	d00e      	beq.n	8007c72 <TIM_Base_SetConfig+0x26>
 8007c54:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007c58:	d00b      	beq.n	8007c72 <TIM_Base_SetConfig+0x26>
 8007c5a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007c5e:	4290      	cmp	r0, r2
 8007c60:	d007      	beq.n	8007c72 <TIM_Base_SetConfig+0x26>
 8007c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c66:	4290      	cmp	r0, r2
 8007c68:	d003      	beq.n	8007c72 <TIM_Base_SetConfig+0x26>
 8007c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c6e:	4290      	cmp	r0, r2
 8007c70:	d103      	bne.n	8007c7a <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007c76:	684a      	ldr	r2, [r1, #4]
 8007c78:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c7a:	4a1a      	ldr	r2, [pc, #104]	; (8007ce4 <TIM_Base_SetConfig+0x98>)
 8007c7c:	4290      	cmp	r0, r2
 8007c7e:	d01a      	beq.n	8007cb6 <TIM_Base_SetConfig+0x6a>
 8007c80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007c84:	d017      	beq.n	8007cb6 <TIM_Base_SetConfig+0x6a>
 8007c86:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007c8a:	4290      	cmp	r0, r2
 8007c8c:	d013      	beq.n	8007cb6 <TIM_Base_SetConfig+0x6a>
 8007c8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c92:	4290      	cmp	r0, r2
 8007c94:	d00f      	beq.n	8007cb6 <TIM_Base_SetConfig+0x6a>
 8007c96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c9a:	4290      	cmp	r0, r2
 8007c9c:	d00b      	beq.n	8007cb6 <TIM_Base_SetConfig+0x6a>
 8007c9e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8007ca2:	4290      	cmp	r0, r2
 8007ca4:	d007      	beq.n	8007cb6 <TIM_Base_SetConfig+0x6a>
 8007ca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007caa:	4290      	cmp	r0, r2
 8007cac:	d003      	beq.n	8007cb6 <TIM_Base_SetConfig+0x6a>
 8007cae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cb2:	4290      	cmp	r0, r2
 8007cb4:	d103      	bne.n	8007cbe <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cba:	68ca      	ldr	r2, [r1, #12]
 8007cbc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cc2:	694a      	ldr	r2, [r1, #20]
 8007cc4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007cc6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cc8:	688b      	ldr	r3, [r1, #8]
 8007cca:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007ccc:	680b      	ldr	r3, [r1, #0]
 8007cce:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cd0:	4b04      	ldr	r3, [pc, #16]	; (8007ce4 <TIM_Base_SetConfig+0x98>)
 8007cd2:	4298      	cmp	r0, r3
 8007cd4:	d002      	beq.n	8007cdc <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	6143      	str	r3, [r0, #20]
}
 8007cda:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8007cdc:	690b      	ldr	r3, [r1, #16]
 8007cde:	6303      	str	r3, [r0, #48]	; 0x30
 8007ce0:	e7f9      	b.n	8007cd6 <TIM_Base_SetConfig+0x8a>
 8007ce2:	bf00      	nop
 8007ce4:	40010000 	.word	0x40010000

08007ce8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007ce8:	b1a8      	cbz	r0, 8007d16 <HAL_TIM_Base_Init+0x2e>
{
 8007cea:	b510      	push	{r4, lr}
 8007cec:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007cee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007cf2:	b15b      	cbz	r3, 8007d0c <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cfa:	1d21      	adds	r1, r4, #4
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	f7ff ffa5 	bl	8007c4c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007d02:	2301      	movs	r3, #1
 8007d04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007d08:	2000      	movs	r0, #0
}
 8007d0a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007d0c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007d10:	f7fc fc00 	bl	8004514 <HAL_TIM_Base_MspInit>
 8007d14:	e7ee      	b.n	8007cf4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8007d16:	2001      	movs	r0, #1
}
 8007d18:	4770      	bx	lr

08007d1a <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007d1a:	b1a8      	cbz	r0, 8007d48 <HAL_TIM_PWM_Init+0x2e>
{
 8007d1c:	b510      	push	{r4, lr}
 8007d1e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007d20:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007d24:	b15b      	cbz	r3, 8007d3e <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8007d26:	2302      	movs	r3, #2
 8007d28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d2c:	1d21      	adds	r1, r4, #4
 8007d2e:	6820      	ldr	r0, [r4, #0]
 8007d30:	f7ff ff8c 	bl	8007c4c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007d34:	2301      	movs	r3, #1
 8007d36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007d3a:	2000      	movs	r0, #0
}
 8007d3c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007d3e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007d42:	f7fc fb9b 	bl	800447c <HAL_TIM_PWM_MspInit>
 8007d46:	e7ee      	b.n	8007d26 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8007d48:	2001      	movs	r0, #1
}
 8007d4a:	4770      	bx	lr

08007d4c <TIM_OC2_SetConfig>:
{
 8007d4c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d4e:	6a03      	ldr	r3, [r0, #32]
 8007d50:	f023 0310 	bic.w	r3, r3, #16
 8007d54:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007d56:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007d58:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007d5a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d5c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d60:	680d      	ldr	r5, [r1, #0]
 8007d62:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8007d66:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d6a:	688d      	ldr	r5, [r1, #8]
 8007d6c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d70:	4d0e      	ldr	r5, [pc, #56]	; (8007dac <TIM_OC2_SetConfig+0x60>)
 8007d72:	42a8      	cmp	r0, r5
 8007d74:	d009      	beq.n	8007d8a <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d76:	4d0d      	ldr	r5, [pc, #52]	; (8007dac <TIM_OC2_SetConfig+0x60>)
 8007d78:	42a8      	cmp	r0, r5
 8007d7a:	d00e      	beq.n	8007d9a <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8007d7c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007d7e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007d80:	684a      	ldr	r2, [r1, #4]
 8007d82:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007d84:	6203      	str	r3, [r0, #32]
}
 8007d86:	bc30      	pop	{r4, r5}
 8007d88:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d8e:	68cd      	ldr	r5, [r1, #12]
 8007d90:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d98:	e7ed      	b.n	8007d76 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d9a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d9e:	694d      	ldr	r5, [r1, #20]
 8007da0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007da4:	698d      	ldr	r5, [r1, #24]
 8007da6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8007daa:	e7e7      	b.n	8007d7c <TIM_OC2_SetConfig+0x30>
 8007dac:	40010000 	.word	0x40010000

08007db0 <HAL_TIM_PWM_ConfigChannel>:
{
 8007db0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007db2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d066      	beq.n	8007e88 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8007dba:	460d      	mov	r5, r1
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8007dca:	2a0c      	cmp	r2, #12
 8007dcc:	d81a      	bhi.n	8007e04 <HAL_TIM_PWM_ConfigChannel+0x54>
 8007dce:	e8df f002 	tbb	[pc, r2]
 8007dd2:	1907      	.short	0x1907
 8007dd4:	19201919 	.word	0x19201919
 8007dd8:	19341919 	.word	0x19341919
 8007ddc:	1919      	.short	0x1919
 8007dde:	47          	.byte	0x47
 8007ddf:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007de0:	6800      	ldr	r0, [r0, #0]
 8007de2:	f7ff fddd 	bl	80079a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007de6:	6822      	ldr	r2, [r4, #0]
 8007de8:	6993      	ldr	r3, [r2, #24]
 8007dea:	f043 0308 	orr.w	r3, r3, #8
 8007dee:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007df0:	6822      	ldr	r2, [r4, #0]
 8007df2:	6993      	ldr	r3, [r2, #24]
 8007df4:	f023 0304 	bic.w	r3, r3, #4
 8007df8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007dfa:	6822      	ldr	r2, [r4, #0]
 8007dfc:	6993      	ldr	r3, [r2, #24]
 8007dfe:	6929      	ldr	r1, [r5, #16]
 8007e00:	430b      	orrs	r3, r1
 8007e02:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8007e04:	2301      	movs	r3, #1
 8007e06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007e10:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e12:	6800      	ldr	r0, [r0, #0]
 8007e14:	f7ff ff9a 	bl	8007d4c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e18:	6822      	ldr	r2, [r4, #0]
 8007e1a:	6993      	ldr	r3, [r2, #24]
 8007e1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e20:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e22:	6822      	ldr	r2, [r4, #0]
 8007e24:	6993      	ldr	r3, [r2, #24]
 8007e26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e2a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e2c:	6822      	ldr	r2, [r4, #0]
 8007e2e:	6993      	ldr	r3, [r2, #24]
 8007e30:	6929      	ldr	r1, [r5, #16]
 8007e32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007e36:	6193      	str	r3, [r2, #24]
      break;
 8007e38:	e7e4      	b.n	8007e04 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e3a:	6800      	ldr	r0, [r0, #0]
 8007e3c:	f7ff fdde 	bl	80079fc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e40:	6822      	ldr	r2, [r4, #0]
 8007e42:	69d3      	ldr	r3, [r2, #28]
 8007e44:	f043 0308 	orr.w	r3, r3, #8
 8007e48:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e4a:	6822      	ldr	r2, [r4, #0]
 8007e4c:	69d3      	ldr	r3, [r2, #28]
 8007e4e:	f023 0304 	bic.w	r3, r3, #4
 8007e52:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e54:	6822      	ldr	r2, [r4, #0]
 8007e56:	69d3      	ldr	r3, [r2, #28]
 8007e58:	6929      	ldr	r1, [r5, #16]
 8007e5a:	430b      	orrs	r3, r1
 8007e5c:	61d3      	str	r3, [r2, #28]
      break;
 8007e5e:	e7d1      	b.n	8007e04 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e60:	6800      	ldr	r0, [r0, #0]
 8007e62:	f7ff fdfd 	bl	8007a60 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e66:	6822      	ldr	r2, [r4, #0]
 8007e68:	69d3      	ldr	r3, [r2, #28]
 8007e6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e6e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e70:	6822      	ldr	r2, [r4, #0]
 8007e72:	69d3      	ldr	r3, [r2, #28]
 8007e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e78:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e7a:	6822      	ldr	r2, [r4, #0]
 8007e7c:	69d3      	ldr	r3, [r2, #28]
 8007e7e:	6929      	ldr	r1, [r5, #16]
 8007e80:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007e84:	61d3      	str	r3, [r2, #28]
      break;
 8007e86:	e7bd      	b.n	8007e04 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8007e88:	2002      	movs	r0, #2
 8007e8a:	e7c1      	b.n	8007e10 <HAL_TIM_PWM_ConfigChannel+0x60>

08007e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e8c:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e8e:	f001 011f 	and.w	r1, r1, #31
 8007e92:	2301      	movs	r3, #1
 8007e94:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e98:	6a03      	ldr	r3, [r0, #32]
 8007e9a:	ea23 0304 	bic.w	r3, r3, r4
 8007e9e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ea0:	6a03      	ldr	r3, [r0, #32]
 8007ea2:	408a      	lsls	r2, r1
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	6203      	str	r3, [r0, #32]
}
 8007ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eac:	4770      	bx	lr
	...

08007eb0 <HAL_TIM_PWM_Start>:
{
 8007eb0:	b510      	push	{r4, lr}
 8007eb2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	6800      	ldr	r0, [r0, #0]
 8007eb8:	f7ff ffe8 	bl	8007e8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	4a0a      	ldr	r2, [pc, #40]	; (8007ee8 <HAL_TIM_PWM_Start+0x38>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d00b      	beq.n	8007edc <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ec4:	6822      	ldr	r2, [r4, #0]
 8007ec6:	6893      	ldr	r3, [r2, #8]
 8007ec8:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ecc:	2b06      	cmp	r3, #6
 8007ece:	d003      	beq.n	8007ed8 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8007ed0:	6813      	ldr	r3, [r2, #0]
 8007ed2:	f043 0301 	orr.w	r3, r3, #1
 8007ed6:	6013      	str	r3, [r2, #0]
}
 8007ed8:	2000      	movs	r0, #0
 8007eda:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8007edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ee2:	645a      	str	r2, [r3, #68]	; 0x44
 8007ee4:	e7ee      	b.n	8007ec4 <HAL_TIM_PWM_Start+0x14>
 8007ee6:	bf00      	nop
 8007ee8:	40010000 	.word	0x40010000

08007eec <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d033      	beq.n	8007f5c <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8007ef4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007efc:	2302      	movs	r3, #2
 8007efe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f02:	6803      	ldr	r3, [r0, #0]
 8007f04:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f06:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f08:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f0c:	680a      	ldr	r2, [r1, #0]
 8007f0e:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f12:	6803      	ldr	r3, [r0, #0]
 8007f14:	4a12      	ldr	r2, [pc, #72]	; (8007f60 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d012      	beq.n	8007f40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1e:	d00f      	beq.n	8007f40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007f20:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00b      	beq.n	8007f40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007f28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d007      	beq.n	8007f40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007f30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d003      	beq.n	8007f40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007f38:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d104      	bne.n	8007f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f40:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f44:	684a      	ldr	r2, [r1, #4]
 8007f46:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f48:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f50:	2300      	movs	r3, #0
 8007f52:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8007f56:	4618      	mov	r0, r3
}
 8007f58:	bc30      	pop	{r4, r5}
 8007f5a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007f5c:	2002      	movs	r0, #2
}
 8007f5e:	4770      	bx	lr
 8007f60:	40010000 	.word	0x40010000

08007f64 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d022      	beq.n	8007fb2 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f72:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f78:	688a      	ldr	r2, [r1, #8]
 8007f7a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f80:	684a      	ldr	r2, [r1, #4]
 8007f82:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f88:	680a      	ldr	r2, [r1, #0]
 8007f8a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f90:	690a      	ldr	r2, [r1, #16]
 8007f92:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f98:	694a      	ldr	r2, [r1, #20]
 8007f9a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fa0:	69ca      	ldr	r2, [r1, #28]
 8007fa2:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007fa4:	6802      	ldr	r2, [r0, #0]
 8007fa6:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8007fae:	4618      	mov	r0, r3
 8007fb0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007fb2:	2002      	movs	r0, #2
}
 8007fb4:	4770      	bx	lr

08007fb6 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fb8:	4770      	bx	lr

08007fba <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007fba:	6802      	ldr	r2, [r0, #0]
 8007fbc:	68d3      	ldr	r3, [r2, #12]
 8007fbe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007fc2:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fc4:	2320      	movs	r3, #32
 8007fc6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8007fca:	4770      	bx	lr

08007fcc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fcc:	6802      	ldr	r2, [r0, #0]
 8007fce:	68d3      	ldr	r3, [r2, #12]
 8007fd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fd4:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd6:	6802      	ldr	r2, [r0, #0]
 8007fd8:	6953      	ldr	r3, [r2, #20]
 8007fda:	f023 0301 	bic.w	r3, r3, #1
 8007fde:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fe0:	2320      	movs	r3, #32
 8007fe2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8007fe6:	4770      	bx	lr

08007fe8 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fe8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b21      	cmp	r3, #33	; 0x21
 8007ff0:	d12a      	bne.n	8008048 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007ff2:	6883      	ldr	r3, [r0, #8]
 8007ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff8:	d016      	beq.n	8008028 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ffa:	6a03      	ldr	r3, [r0, #32]
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	6202      	str	r2, [r0, #32]
 8008000:	781a      	ldrb	r2, [r3, #0]
 8008002:	6803      	ldr	r3, [r0, #0]
 8008004:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008006:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8008008:	3b01      	subs	r3, #1
 800800a:	b29b      	uxth	r3, r3
 800800c:	84c3      	strh	r3, [r0, #38]	; 0x26
 800800e:	b9eb      	cbnz	r3, 800804c <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008010:	6802      	ldr	r2, [r0, #0]
 8008012:	68d3      	ldr	r3, [r2, #12]
 8008014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008018:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800801a:	6802      	ldr	r2, [r0, #0]
 800801c:	68d3      	ldr	r3, [r2, #12]
 800801e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008022:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8008024:	2000      	movs	r0, #0
 8008026:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008028:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	6802      	ldr	r2, [r0, #0]
 800802e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008032:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008034:	6903      	ldr	r3, [r0, #16]
 8008036:	b91b      	cbnz	r3, 8008040 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8008038:	6a03      	ldr	r3, [r0, #32]
 800803a:	3302      	adds	r3, #2
 800803c:	6203      	str	r3, [r0, #32]
 800803e:	e7e2      	b.n	8008006 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8008040:	6a03      	ldr	r3, [r0, #32]
 8008042:	3301      	adds	r3, #1
 8008044:	6203      	str	r3, [r0, #32]
 8008046:	e7de      	b.n	8008006 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8008048:	2002      	movs	r0, #2
 800804a:	4770      	bx	lr
    return HAL_OK;
 800804c:	2000      	movs	r0, #0
  }
}
 800804e:	4770      	bx	lr

08008050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008050:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8008054:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008056:	6802      	ldr	r2, [r0, #0]
 8008058:	6913      	ldr	r3, [r2, #16]
 800805a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800805e:	68c1      	ldr	r1, [r0, #12]
 8008060:	430b      	orrs	r3, r1
 8008062:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008064:	6883      	ldr	r3, [r0, #8]
 8008066:	6902      	ldr	r2, [r0, #16]
 8008068:	4313      	orrs	r3, r2
 800806a:	6942      	ldr	r2, [r0, #20]
 800806c:	4313      	orrs	r3, r2
 800806e:	69c2      	ldr	r2, [r0, #28]
 8008070:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8008072:	6801      	ldr	r1, [r0, #0]
 8008074:	68cb      	ldr	r3, [r1, #12]
 8008076:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800807a:	f023 030c 	bic.w	r3, r3, #12
 800807e:	4313      	orrs	r3, r2
 8008080:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008082:	6802      	ldr	r2, [r0, #0]
 8008084:	6953      	ldr	r3, [r2, #20]
 8008086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800808a:	6981      	ldr	r1, [r0, #24]
 800808c:	430b      	orrs	r3, r1
 800808e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008090:	69c3      	ldr	r3, [r0, #28]
 8008092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008096:	d03b      	beq.n	8008110 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008098:	6803      	ldr	r3, [r0, #0]
 800809a:	4a71      	ldr	r2, [pc, #452]	; (8008260 <UART_SetConfig+0x210>)
 800809c:	4293      	cmp	r3, r2
 800809e:	f000 80ab 	beq.w	80081f8 <UART_SetConfig+0x1a8>
 80080a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080a6:	4293      	cmp	r3, r2
 80080a8:	f000 80a6 	beq.w	80081f8 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080ac:	f7fe fee0 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080b0:	f04f 0900 	mov.w	r9, #0
 80080b4:	1806      	adds	r6, r0, r0
 80080b6:	eb49 0709 	adc.w	r7, r9, r9
 80080ba:	eb16 0b00 	adds.w	fp, r6, r0
 80080be:	eb47 0c09 	adc.w	ip, r7, r9
 80080c2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80080c6:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80080ca:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 80080ce:	4693      	mov	fp, r2
 80080d0:	469c      	mov	ip, r3
 80080d2:	6863      	ldr	r3, [r4, #4]
 80080d4:	009a      	lsls	r2, r3, #2
 80080d6:	0f9b      	lsrs	r3, r3, #30
 80080d8:	eb10 000b 	adds.w	r0, r0, fp
 80080dc:	eb49 010c 	adc.w	r1, r9, ip
 80080e0:	f7f8 fd14 	bl	8000b0c <__aeabi_uldivmod>
 80080e4:	4d5f      	ldr	r5, [pc, #380]	; (8008264 <UART_SetConfig+0x214>)
 80080e6:	fba5 3200 	umull	r3, r2, r5, r0
 80080ea:	0951      	lsrs	r1, r2, #5
 80080ec:	2264      	movs	r2, #100	; 0x64
 80080ee:	fb02 0211 	mls	r2, r2, r1, r0
 80080f2:	0113      	lsls	r3, r2, #4
 80080f4:	3332      	adds	r3, #50	; 0x32
 80080f6:	fba5 2303 	umull	r2, r3, r5, r3
 80080fa:	095b      	lsrs	r3, r3, #5
 80080fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008100:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008104:	f003 030f 	and.w	r3, r3, #15
 8008108:	6821      	ldr	r1, [r4, #0]
 800810a:	4413      	add	r3, r2
 800810c:	608b      	str	r3, [r1, #8]
    }
  }
}
 800810e:	e0a4      	b.n	800825a <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008110:	6803      	ldr	r3, [r0, #0]
 8008112:	4a53      	ldr	r2, [pc, #332]	; (8008260 <UART_SetConfig+0x210>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d039      	beq.n	800818c <UART_SetConfig+0x13c>
 8008118:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800811c:	4293      	cmp	r3, r2
 800811e:	d035      	beq.n	800818c <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008120:	f7fe fea6 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008124:	4683      	mov	fp, r0
 8008126:	f04f 0c00 	mov.w	ip, #0
 800812a:	1806      	adds	r6, r0, r0
 800812c:	eb4c 070c 	adc.w	r7, ip, ip
 8008130:	eb16 0800 	adds.w	r8, r6, r0
 8008134:	eb47 090c 	adc.w	r9, r7, ip
 8008138:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800813c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008140:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008144:	4690      	mov	r8, r2
 8008146:	4699      	mov	r9, r3
 8008148:	6862      	ldr	r2, [r4, #4]
 800814a:	2100      	movs	r1, #0
 800814c:	1892      	adds	r2, r2, r2
 800814e:	eb41 0301 	adc.w	r3, r1, r1
 8008152:	eb1b 0008 	adds.w	r0, fp, r8
 8008156:	eb4c 0109 	adc.w	r1, ip, r9
 800815a:	f7f8 fcd7 	bl	8000b0c <__aeabi_uldivmod>
 800815e:	4d41      	ldr	r5, [pc, #260]	; (8008264 <UART_SetConfig+0x214>)
 8008160:	fba5 3200 	umull	r3, r2, r5, r0
 8008164:	0951      	lsrs	r1, r2, #5
 8008166:	2264      	movs	r2, #100	; 0x64
 8008168:	fb02 0211 	mls	r2, r2, r1, r0
 800816c:	00d3      	lsls	r3, r2, #3
 800816e:	3332      	adds	r3, #50	; 0x32
 8008170:	fba5 2303 	umull	r2, r3, r5, r3
 8008174:	095b      	lsrs	r3, r3, #5
 8008176:	005a      	lsls	r2, r3, #1
 8008178:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800817c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008180:	f003 0307 	and.w	r3, r3, #7
 8008184:	6821      	ldr	r1, [r4, #0]
 8008186:	4413      	add	r3, r2
 8008188:	608b      	str	r3, [r1, #8]
 800818a:	e066      	b.n	800825a <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 800818c:	f7fe fe80 	bl	8006e90 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008190:	4680      	mov	r8, r0
 8008192:	f04f 0900 	mov.w	r9, #0
 8008196:	1806      	adds	r6, r0, r0
 8008198:	eb49 0709 	adc.w	r7, r9, r9
 800819c:	eb16 0b00 	adds.w	fp, r6, r0
 80081a0:	eb47 0c09 	adc.w	ip, r7, r9
 80081a4:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80081a8:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80081ac:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 80081b0:	4693      	mov	fp, r2
 80081b2:	469c      	mov	ip, r3
 80081b4:	6862      	ldr	r2, [r4, #4]
 80081b6:	2100      	movs	r1, #0
 80081b8:	1892      	adds	r2, r2, r2
 80081ba:	eb41 0301 	adc.w	r3, r1, r1
 80081be:	eb18 000b 	adds.w	r0, r8, fp
 80081c2:	eb49 010c 	adc.w	r1, r9, ip
 80081c6:	f7f8 fca1 	bl	8000b0c <__aeabi_uldivmod>
 80081ca:	4d26      	ldr	r5, [pc, #152]	; (8008264 <UART_SetConfig+0x214>)
 80081cc:	fba5 3200 	umull	r3, r2, r5, r0
 80081d0:	0951      	lsrs	r1, r2, #5
 80081d2:	2264      	movs	r2, #100	; 0x64
 80081d4:	fb02 0211 	mls	r2, r2, r1, r0
 80081d8:	00d3      	lsls	r3, r2, #3
 80081da:	3332      	adds	r3, #50	; 0x32
 80081dc:	fba5 2303 	umull	r2, r3, r5, r3
 80081e0:	095b      	lsrs	r3, r3, #5
 80081e2:	005a      	lsls	r2, r3, #1
 80081e4:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80081e8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80081ec:	f003 0307 	and.w	r3, r3, #7
 80081f0:	6821      	ldr	r1, [r4, #0]
 80081f2:	4413      	add	r3, r2
 80081f4:	608b      	str	r3, [r1, #8]
 80081f6:	e030      	b.n	800825a <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 80081f8:	f7fe fe4a 	bl	8006e90 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081fc:	f04f 0900 	mov.w	r9, #0
 8008200:	1806      	adds	r6, r0, r0
 8008202:	eb49 0709 	adc.w	r7, r9, r9
 8008206:	eb16 0b00 	adds.w	fp, r6, r0
 800820a:	eb47 0c09 	adc.w	ip, r7, r9
 800820e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8008212:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8008216:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800821a:	4693      	mov	fp, r2
 800821c:	469c      	mov	ip, r3
 800821e:	6863      	ldr	r3, [r4, #4]
 8008220:	009a      	lsls	r2, r3, #2
 8008222:	0f9b      	lsrs	r3, r3, #30
 8008224:	eb10 000b 	adds.w	r0, r0, fp
 8008228:	eb49 010c 	adc.w	r1, r9, ip
 800822c:	f7f8 fc6e 	bl	8000b0c <__aeabi_uldivmod>
 8008230:	4d0c      	ldr	r5, [pc, #48]	; (8008264 <UART_SetConfig+0x214>)
 8008232:	fba5 3200 	umull	r3, r2, r5, r0
 8008236:	0951      	lsrs	r1, r2, #5
 8008238:	2264      	movs	r2, #100	; 0x64
 800823a:	fb02 0211 	mls	r2, r2, r1, r0
 800823e:	0113      	lsls	r3, r2, #4
 8008240:	3332      	adds	r3, #50	; 0x32
 8008242:	fba5 2303 	umull	r2, r3, r5, r3
 8008246:	095b      	lsrs	r3, r3, #5
 8008248:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800824c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008250:	f003 030f 	and.w	r3, r3, #15
 8008254:	6821      	ldr	r1, [r4, #0]
 8008256:	4413      	add	r3, r2
 8008258:	608b      	str	r3, [r1, #8]
}
 800825a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 800825e:	bf00      	nop
 8008260:	40011000 	.word	0x40011000
 8008264:	51eb851f 	.word	0x51eb851f

08008268 <UART_WaitOnFlagUntilTimeout>:
{
 8008268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800826c:	4605      	mov	r5, r0
 800826e:	460f      	mov	r7, r1
 8008270:	4616      	mov	r6, r2
 8008272:	4698      	mov	r8, r3
 8008274:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008276:	682b      	ldr	r3, [r5, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	ea37 0303 	bics.w	r3, r7, r3
 800827e:	bf0c      	ite	eq
 8008280:	2301      	moveq	r3, #1
 8008282:	2300      	movne	r3, #0
 8008284:	42b3      	cmp	r3, r6
 8008286:	d11d      	bne.n	80082c4 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8008288:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800828c:	d0f3      	beq.n	8008276 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800828e:	b12c      	cbz	r4, 800829c <UART_WaitOnFlagUntilTimeout+0x34>
 8008290:	f7fc ff7c 	bl	800518c <HAL_GetTick>
 8008294:	eba0 0008 	sub.w	r0, r0, r8
 8008298:	42a0      	cmp	r0, r4
 800829a:	d9ec      	bls.n	8008276 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800829c:	682a      	ldr	r2, [r5, #0]
 800829e:	68d3      	ldr	r3, [r2, #12]
 80082a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082a4:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a6:	682a      	ldr	r2, [r5, #0]
 80082a8:	6953      	ldr	r3, [r2, #20]
 80082aa:	f023 0301 	bic.w	r3, r3, #1
 80082ae:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80082b0:	2320      	movs	r3, #32
 80082b2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80082b6:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80082ba:	2300      	movs	r3, #0
 80082bc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80082c0:	2003      	movs	r0, #3
 80082c2:	e000      	b.n	80082c6 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 80082c4:	2000      	movs	r0, #0
}
 80082c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080082ca <HAL_UART_Init>:
  if (huart == NULL)
 80082ca:	b358      	cbz	r0, 8008324 <HAL_UART_Init+0x5a>
{
 80082cc:	b510      	push	{r4, lr}
 80082ce:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80082d0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80082d4:	b30b      	cbz	r3, 800831a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80082d6:	2324      	movs	r3, #36	; 0x24
 80082d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80082dc:	6822      	ldr	r2, [r4, #0]
 80082de:	68d3      	ldr	r3, [r2, #12]
 80082e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082e4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80082e6:	4620      	mov	r0, r4
 80082e8:	f7ff feb2 	bl	8008050 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ec:	6822      	ldr	r2, [r4, #0]
 80082ee:	6913      	ldr	r3, [r2, #16]
 80082f0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80082f4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082f6:	6822      	ldr	r2, [r4, #0]
 80082f8:	6953      	ldr	r3, [r2, #20]
 80082fa:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80082fe:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8008300:	6822      	ldr	r2, [r4, #0]
 8008302:	68d3      	ldr	r3, [r2, #12]
 8008304:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008308:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800830a:	2000      	movs	r0, #0
 800830c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800830e:	2320      	movs	r3, #32
 8008310:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008314:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8008318:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800831a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800831e:	f7fc f991 	bl	8004644 <HAL_UART_MspInit>
 8008322:	e7d8      	b.n	80082d6 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8008324:	2001      	movs	r0, #1
}
 8008326:	4770      	bx	lr

08008328 <HAL_UART_Transmit>:
{
 8008328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800832c:	b083      	sub	sp, #12
 800832e:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008330:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b20      	cmp	r3, #32
 8008338:	d156      	bne.n	80083e8 <HAL_UART_Transmit+0xc0>
 800833a:	4604      	mov	r4, r0
 800833c:	460d      	mov	r5, r1
 800833e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8008340:	2900      	cmp	r1, #0
 8008342:	d056      	beq.n	80083f2 <HAL_UART_Transmit+0xca>
 8008344:	2a00      	cmp	r2, #0
 8008346:	d056      	beq.n	80083f6 <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 8008348:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800834c:	2b01      	cmp	r3, #1
 800834e:	d054      	beq.n	80083fa <HAL_UART_Transmit+0xd2>
 8008350:	2301      	movs	r3, #1
 8008352:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008356:	f04f 0900 	mov.w	r9, #0
 800835a:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800835e:	2321      	movs	r3, #33	; 0x21
 8008360:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8008364:	f7fc ff12 	bl	800518c <HAL_GetTick>
 8008368:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800836a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800836e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8008372:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8008376:	e010      	b.n	800839a <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008378:	9600      	str	r6, [sp, #0]
 800837a:	463b      	mov	r3, r7
 800837c:	2200      	movs	r2, #0
 800837e:	2180      	movs	r1, #128	; 0x80
 8008380:	4620      	mov	r0, r4
 8008382:	f7ff ff71 	bl	8008268 <UART_WaitOnFlagUntilTimeout>
 8008386:	2800      	cmp	r0, #0
 8008388:	d139      	bne.n	80083fe <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800838a:	882b      	ldrh	r3, [r5, #0]
 800838c:	6822      	ldr	r2, [r4, #0]
 800838e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008392:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008394:	6923      	ldr	r3, [r4, #16]
 8008396:	b9c3      	cbnz	r3, 80083ca <HAL_UART_Transmit+0xa2>
          pData += 2U;
 8008398:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 800839a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800839c:	b29b      	uxth	r3, r3
 800839e:	b1b3      	cbz	r3, 80083ce <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 80083a0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80083a2:	3b01      	subs	r3, #1
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80083a8:	68a3      	ldr	r3, [r4, #8]
 80083aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ae:	d0e3      	beq.n	8008378 <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083b0:	9600      	str	r6, [sp, #0]
 80083b2:	463b      	mov	r3, r7
 80083b4:	2200      	movs	r2, #0
 80083b6:	2180      	movs	r1, #128	; 0x80
 80083b8:	4620      	mov	r0, r4
 80083ba:	f7ff ff55 	bl	8008268 <UART_WaitOnFlagUntilTimeout>
 80083be:	bb00      	cbnz	r0, 8008402 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80083c0:	782a      	ldrb	r2, [r5, #0]
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	605a      	str	r2, [r3, #4]
 80083c6:	3501      	adds	r5, #1
 80083c8:	e7e7      	b.n	800839a <HAL_UART_Transmit+0x72>
          pData += 1U;
 80083ca:	3501      	adds	r5, #1
 80083cc:	e7e5      	b.n	800839a <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083ce:	9600      	str	r6, [sp, #0]
 80083d0:	463b      	mov	r3, r7
 80083d2:	2200      	movs	r2, #0
 80083d4:	2140      	movs	r1, #64	; 0x40
 80083d6:	4620      	mov	r0, r4
 80083d8:	f7ff ff46 	bl	8008268 <UART_WaitOnFlagUntilTimeout>
 80083dc:	4603      	mov	r3, r0
 80083de:	b990      	cbnz	r0, 8008406 <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 80083e0:	2220      	movs	r2, #32
 80083e2:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    return HAL_OK;
 80083e6:	e000      	b.n	80083ea <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80083e8:	2302      	movs	r3, #2
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	b003      	add	sp, #12
 80083ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e7f9      	b.n	80083ea <HAL_UART_Transmit+0xc2>
 80083f6:	2301      	movs	r3, #1
 80083f8:	e7f7      	b.n	80083ea <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 80083fa:	2302      	movs	r3, #2
 80083fc:	e7f5      	b.n	80083ea <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e7f3      	b.n	80083ea <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e7f1      	b.n	80083ea <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e7ef      	b.n	80083ea <HAL_UART_Transmit+0xc2>

0800840a <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800840a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b20      	cmp	r3, #32
 8008412:	d116      	bne.n	8008442 <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 8008414:	b1b9      	cbz	r1, 8008446 <HAL_UART_Transmit_IT+0x3c>
 8008416:	b1c2      	cbz	r2, 800844a <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8008418:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800841c:	2b01      	cmp	r3, #1
 800841e:	d016      	beq.n	800844e <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8008420:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8008422:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8008424:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008426:	2300      	movs	r3, #0
 8008428:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800842a:	2221      	movs	r2, #33	; 0x21
 800842c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8008430:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008434:	6801      	ldr	r1, [r0, #0]
 8008436:	68ca      	ldr	r2, [r1, #12]
 8008438:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800843c:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800843e:	4618      	mov	r0, r3
 8008440:	4770      	bx	lr
    return HAL_BUSY;
 8008442:	2002      	movs	r0, #2
 8008444:	4770      	bx	lr
      return HAL_ERROR;
 8008446:	2001      	movs	r0, #1
 8008448:	4770      	bx	lr
 800844a:	2001      	movs	r0, #1
 800844c:	4770      	bx	lr
    __HAL_LOCK(huart);
 800844e:	2002      	movs	r0, #2
}
 8008450:	4770      	bx	lr
	...

08008454 <HAL_UART_Receive_DMA>:
{
 8008454:	b530      	push	{r4, r5, lr}
 8008456:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8008458:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 800845c:	b2e4      	uxtb	r4, r4
 800845e:	2c20      	cmp	r4, #32
 8008460:	d13d      	bne.n	80084de <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 8008462:	2900      	cmp	r1, #0
 8008464:	d03e      	beq.n	80084e4 <HAL_UART_Receive_DMA+0x90>
 8008466:	2a00      	cmp	r2, #0
 8008468:	d03e      	beq.n	80084e8 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 800846a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800846e:	2b01      	cmp	r3, #1
 8008470:	d03c      	beq.n	80084ec <HAL_UART_Receive_DMA+0x98>
 8008472:	4613      	mov	r3, r2
 8008474:	460a      	mov	r2, r1
 8008476:	4604      	mov	r4, r0
 8008478:	2101      	movs	r1, #1
 800847a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 800847e:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8008480:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008482:	2500      	movs	r5, #0
 8008484:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008486:	2122      	movs	r1, #34	; 0x22
 8008488:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800848c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800848e:	4818      	ldr	r0, [pc, #96]	; (80084f0 <HAL_UART_Receive_DMA+0x9c>)
 8008490:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008492:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008494:	4817      	ldr	r0, [pc, #92]	; (80084f4 <HAL_UART_Receive_DMA+0xa0>)
 8008496:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800849a:	4817      	ldr	r0, [pc, #92]	; (80084f8 <HAL_UART_Receive_DMA+0xa4>)
 800849c:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800849e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084a0:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80084a2:	6821      	ldr	r1, [r4, #0]
 80084a4:	3104      	adds	r1, #4
 80084a6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80084a8:	f7fd f962 	bl	8005770 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80084ac:	9501      	str	r5, [sp, #4]
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	9201      	str	r2, [sp, #4]
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	9201      	str	r2, [sp, #4]
 80084b8:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 80084ba:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084be:	68da      	ldr	r2, [r3, #12]
 80084c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084c4:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c6:	6822      	ldr	r2, [r4, #0]
 80084c8:	6953      	ldr	r3, [r2, #20]
 80084ca:	f043 0301 	orr.w	r3, r3, #1
 80084ce:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084d0:	6822      	ldr	r2, [r4, #0]
 80084d2:	6953      	ldr	r3, [r2, #20]
 80084d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084d8:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80084da:	4628      	mov	r0, r5
 80084dc:	e000      	b.n	80084e0 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 80084de:	2002      	movs	r0, #2
}
 80084e0:	b003      	add	sp, #12
 80084e2:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 80084e4:	2001      	movs	r0, #1
 80084e6:	e7fb      	b.n	80084e0 <HAL_UART_Receive_DMA+0x8c>
 80084e8:	2001      	movs	r0, #1
 80084ea:	e7f9      	b.n	80084e0 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 80084ec:	2002      	movs	r0, #2
 80084ee:	e7f7      	b.n	80084e0 <HAL_UART_Receive_DMA+0x8c>
 80084f0:	08008565 	.word	0x08008565
 80084f4:	08008641 	.word	0x08008641
 80084f8:	0800864d 	.word	0x0800864d

080084fc <HAL_UART_AbortTransmit>:
{
 80084fc:	b510      	push	{r4, lr}
 80084fe:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008500:	6802      	ldr	r2, [r0, #0]
 8008502:	68d3      	ldr	r3, [r2, #12]
 8008504:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008508:	60d3      	str	r3, [r2, #12]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800850a:	6803      	ldr	r3, [r0, #0]
 800850c:	695a      	ldr	r2, [r3, #20]
 800850e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008512:	d00b      	beq.n	800852c <HAL_UART_AbortTransmit+0x30>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008514:	695a      	ldr	r2, [r3, #20]
 8008516:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800851a:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 800851c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800851e:	b12b      	cbz	r3, 800852c <HAL_UART_AbortTransmit+0x30>
      huart->hdmatx->XferAbortCallback = NULL;
 8008520:	2200      	movs	r2, #0
 8008522:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008524:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008526:	f7fd f958 	bl	80057da <HAL_DMA_Abort>
 800852a:	b928      	cbnz	r0, 8008538 <HAL_UART_AbortTransmit+0x3c>
  huart->TxXferCount = 0x00U;
 800852c:	2000      	movs	r0, #0
 800852e:	84e0      	strh	r0, [r4, #38]	; 0x26
  huart->gState = HAL_UART_STATE_READY;
 8008530:	2320      	movs	r3, #32
 8008532:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8008536:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008538:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800853a:	f7fd fa99 	bl	8005a70 <HAL_DMA_GetError>
 800853e:	2820      	cmp	r0, #32
 8008540:	d1f4      	bne.n	800852c <HAL_UART_AbortTransmit+0x30>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008542:	2310      	movs	r3, #16
 8008544:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8008546:	2003      	movs	r0, #3
 8008548:	e7f5      	b.n	8008536 <HAL_UART_AbortTransmit+0x3a>

0800854a <UART_EndTransmit_IT>:
{
 800854a:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800854c:	6801      	ldr	r1, [r0, #0]
 800854e:	68cb      	ldr	r3, [r1, #12]
 8008550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008554:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008556:	2320      	movs	r3, #32
 8008558:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800855c:	f7fb fb3e 	bl	8003bdc <HAL_UART_TxCpltCallback>
}
 8008560:	2000      	movs	r0, #0
 8008562:	bd08      	pop	{r3, pc}

08008564 <UART_DMAReceiveCplt>:
{
 8008564:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008566:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008568:	6802      	ldr	r2, [r0, #0]
 800856a:	6812      	ldr	r2, [r2, #0]
 800856c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008570:	d113      	bne.n	800859a <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 8008572:	2200      	movs	r2, #0
 8008574:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008576:	6819      	ldr	r1, [r3, #0]
 8008578:	68ca      	ldr	r2, [r1, #12]
 800857a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800857e:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008580:	6819      	ldr	r1, [r3, #0]
 8008582:	694a      	ldr	r2, [r1, #20]
 8008584:	f022 0201 	bic.w	r2, r2, #1
 8008588:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800858a:	6819      	ldr	r1, [r3, #0]
 800858c:	694a      	ldr	r2, [r1, #20]
 800858e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008592:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8008594:	2220      	movs	r2, #32
 8008596:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 800859a:	4618      	mov	r0, r3
 800859c:	f7fb fb1d 	bl	8003bda <HAL_UART_RxCpltCallback>
}
 80085a0:	bd08      	pop	{r3, pc}

080085a2 <UART_Receive_IT>:
{
 80085a2:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085a4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b22      	cmp	r3, #34	; 0x22
 80085ac:	d145      	bne.n	800863a <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80085ae:	6883      	ldr	r3, [r0, #8]
 80085b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b4:	d00e      	beq.n	80085d4 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80085b6:	6903      	ldr	r3, [r0, #16]
 80085b8:	bb03      	cbnz	r3, 80085fc <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085ba:	6803      	ldr	r3, [r0, #0]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80085c0:	1c59      	adds	r1, r3, #1
 80085c2:	6281      	str	r1, [r0, #40]	; 0x28
 80085c4:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 80085c6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80085c8:	3b01      	subs	r3, #1
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80085ce:	b1f3      	cbz	r3, 800860e <UART_Receive_IT+0x6c>
    return HAL_OK;
 80085d0:	2000      	movs	r0, #0
 80085d2:	e033      	b.n	800863c <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80085d4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 80085d6:	6903      	ldr	r3, [r0, #16]
 80085d8:	b943      	cbnz	r3, 80085ec <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085da:	6803      	ldr	r3, [r0, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e2:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 80085e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80085e6:	3302      	adds	r3, #2
 80085e8:	6283      	str	r3, [r0, #40]	; 0x28
 80085ea:	e7ec      	b.n	80085c6 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80085ec:	6803      	ldr	r3, [r0, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 80085f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80085f6:	3301      	adds	r3, #1
 80085f8:	6283      	str	r3, [r0, #40]	; 0x28
 80085fa:	e7e4      	b.n	80085c6 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085fc:	6803      	ldr	r3, [r0, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008602:	1c51      	adds	r1, r2, #1
 8008604:	6281      	str	r1, [r0, #40]	; 0x28
 8008606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800860a:	7013      	strb	r3, [r2, #0]
 800860c:	e7db      	b.n	80085c6 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800860e:	6802      	ldr	r2, [r0, #0]
 8008610:	68d3      	ldr	r3, [r2, #12]
 8008612:	f023 0320 	bic.w	r3, r3, #32
 8008616:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008618:	6802      	ldr	r2, [r0, #0]
 800861a:	68d3      	ldr	r3, [r2, #12]
 800861c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008620:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008622:	6802      	ldr	r2, [r0, #0]
 8008624:	6953      	ldr	r3, [r2, #20]
 8008626:	f023 0301 	bic.w	r3, r3, #1
 800862a:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800862c:	2320      	movs	r3, #32
 800862e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8008632:	f7fb fad2 	bl	8003bda <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8008636:	2000      	movs	r0, #0
 8008638:	e000      	b.n	800863c <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 800863a:	2002      	movs	r0, #2
}
 800863c:	bd08      	pop	{r3, pc}

0800863e <HAL_UART_RxHalfCpltCallback>:
}
 800863e:	4770      	bx	lr

08008640 <UART_DMARxHalfCplt>:
{
 8008640:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8008642:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008644:	f7ff fffb 	bl	800863e <HAL_UART_RxHalfCpltCallback>
}
 8008648:	bd08      	pop	{r3, pc}

0800864a <HAL_UART_ErrorCallback>:
}
 800864a:	4770      	bx	lr

0800864c <UART_DMAError>:
{
 800864c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800864e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008654:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b21      	cmp	r3, #33	; 0x21
 800865c:	d010      	beq.n	8008680 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	695a      	ldr	r2, [r3, #20]
 8008662:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008666:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b22      	cmp	r3, #34	; 0x22
 800866e:	d011      	beq.n	8008694 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008670:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008672:	f043 0310 	orr.w	r3, r3, #16
 8008676:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8008678:	4620      	mov	r0, r4
 800867a:	f7ff ffe6 	bl	800864a <HAL_UART_ErrorCallback>
}
 800867e:	bd10      	pop	{r4, pc}
 8008680:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008684:	2a00      	cmp	r2, #0
 8008686:	d0ea      	beq.n	800865e <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8008688:	2300      	movs	r3, #0
 800868a:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800868c:	4620      	mov	r0, r4
 800868e:	f7ff fc94 	bl	8007fba <UART_EndTxTransfer>
 8008692:	e7e4      	b.n	800865e <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008694:	2a00      	cmp	r2, #0
 8008696:	d0eb      	beq.n	8008670 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8008698:	2300      	movs	r3, #0
 800869a:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800869c:	4620      	mov	r0, r4
 800869e:	f7ff fc95 	bl	8007fcc <UART_EndRxTransfer>
 80086a2:	e7e5      	b.n	8008670 <UART_DMAError+0x24>

080086a4 <HAL_UART_IRQHandler>:
{
 80086a4:	b510      	push	{r4, lr}
 80086a6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80086a8:	6802      	ldr	r2, [r0, #0]
 80086aa:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086ac:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086ae:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 80086b0:	f013 000f 	ands.w	r0, r3, #15
 80086b4:	d105      	bne.n	80086c2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086b6:	f013 0f20 	tst.w	r3, #32
 80086ba:	d002      	beq.n	80086c2 <HAL_UART_IRQHandler+0x1e>
 80086bc:	f011 0f20 	tst.w	r1, #32
 80086c0:	d156      	bne.n	8008770 <HAL_UART_IRQHandler+0xcc>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d06a      	beq.n	800879c <HAL_UART_IRQHandler+0xf8>
 80086c6:	f012 0201 	ands.w	r2, r2, #1
 80086ca:	d102      	bne.n	80086d2 <HAL_UART_IRQHandler+0x2e>
 80086cc:	f411 7f90 	tst.w	r1, #288	; 0x120
 80086d0:	d064      	beq.n	800879c <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086d2:	f013 0f01 	tst.w	r3, #1
 80086d6:	d006      	beq.n	80086e6 <HAL_UART_IRQHandler+0x42>
 80086d8:	f411 7f80 	tst.w	r1, #256	; 0x100
 80086dc:	d003      	beq.n	80086e6 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80086e0:	f040 0001 	orr.w	r0, r0, #1
 80086e4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086e6:	f013 0f04 	tst.w	r3, #4
 80086ea:	d004      	beq.n	80086f6 <HAL_UART_IRQHandler+0x52>
 80086ec:	b11a      	cbz	r2, 80086f6 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80086f0:	f040 0002 	orr.w	r0, r0, #2
 80086f4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086f6:	f013 0f02 	tst.w	r3, #2
 80086fa:	d004      	beq.n	8008706 <HAL_UART_IRQHandler+0x62>
 80086fc:	b11a      	cbz	r2, 8008706 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008700:	f040 0004 	orr.w	r0, r0, #4
 8008704:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008706:	f013 0f08 	tst.w	r3, #8
 800870a:	d007      	beq.n	800871c <HAL_UART_IRQHandler+0x78>
 800870c:	f011 0f20 	tst.w	r1, #32
 8008710:	d100      	bne.n	8008714 <HAL_UART_IRQHandler+0x70>
 8008712:	b11a      	cbz	r2, 800871c <HAL_UART_IRQHandler+0x78>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008714:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008716:	f042 0208 	orr.w	r2, r2, #8
 800871a:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800871c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800871e:	2a00      	cmp	r2, #0
 8008720:	d048      	beq.n	80087b4 <HAL_UART_IRQHandler+0x110>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008722:	f013 0f20 	tst.w	r3, #32
 8008726:	d002      	beq.n	800872e <HAL_UART_IRQHandler+0x8a>
 8008728:	f011 0f20 	tst.w	r1, #32
 800872c:	d124      	bne.n	8008778 <HAL_UART_IRQHandler+0xd4>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008736:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008738:	f012 0f08 	tst.w	r2, #8
 800873c:	d100      	bne.n	8008740 <HAL_UART_IRQHandler+0x9c>
 800873e:	b33b      	cbz	r3, 8008790 <HAL_UART_IRQHandler+0xec>
        UART_EndRxTransfer(huart);
 8008740:	4620      	mov	r0, r4
 8008742:	f7ff fc43 	bl	8007fcc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	695a      	ldr	r2, [r3, #20]
 800874a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800874e:	d01b      	beq.n	8008788 <HAL_UART_IRQHandler+0xe4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008750:	695a      	ldr	r2, [r3, #20]
 8008752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008756:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8008758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800875a:	b18b      	cbz	r3, 8008780 <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800875c:	4a1a      	ldr	r2, [pc, #104]	; (80087c8 <HAL_UART_IRQHandler+0x124>)
 800875e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008760:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008762:	f7fd f884 	bl	800586e <HAL_DMA_Abort_IT>
 8008766:	b328      	cbz	r0, 80087b4 <HAL_UART_IRQHandler+0x110>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008768:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800876a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800876c:	4798      	blx	r3
 800876e:	e021      	b.n	80087b4 <HAL_UART_IRQHandler+0x110>
      UART_Receive_IT(huart);
 8008770:	4620      	mov	r0, r4
 8008772:	f7ff ff16 	bl	80085a2 <UART_Receive_IT>
      return;
 8008776:	e01d      	b.n	80087b4 <HAL_UART_IRQHandler+0x110>
        UART_Receive_IT(huart);
 8008778:	4620      	mov	r0, r4
 800877a:	f7ff ff12 	bl	80085a2 <UART_Receive_IT>
 800877e:	e7d6      	b.n	800872e <HAL_UART_IRQHandler+0x8a>
            HAL_UART_ErrorCallback(huart);
 8008780:	4620      	mov	r0, r4
 8008782:	f7ff ff62 	bl	800864a <HAL_UART_ErrorCallback>
 8008786:	e015      	b.n	80087b4 <HAL_UART_IRQHandler+0x110>
          HAL_UART_ErrorCallback(huart);
 8008788:	4620      	mov	r0, r4
 800878a:	f7ff ff5e 	bl	800864a <HAL_UART_ErrorCallback>
 800878e:	e011      	b.n	80087b4 <HAL_UART_IRQHandler+0x110>
        HAL_UART_ErrorCallback(huart);
 8008790:	4620      	mov	r0, r4
 8008792:	f7ff ff5a 	bl	800864a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008796:	2300      	movs	r3, #0
 8008798:	63e3      	str	r3, [r4, #60]	; 0x3c
 800879a:	e00b      	b.n	80087b4 <HAL_UART_IRQHandler+0x110>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800879c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80087a0:	d002      	beq.n	80087a8 <HAL_UART_IRQHandler+0x104>
 80087a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80087a6:	d106      	bne.n	80087b6 <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80087a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80087ac:	d002      	beq.n	80087b4 <HAL_UART_IRQHandler+0x110>
 80087ae:	f011 0f40 	tst.w	r1, #64	; 0x40
 80087b2:	d104      	bne.n	80087be <HAL_UART_IRQHandler+0x11a>
}
 80087b4:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 80087b6:	4620      	mov	r0, r4
 80087b8:	f7ff fc16 	bl	8007fe8 <UART_Transmit_IT>
    return;
 80087bc:	e7fa      	b.n	80087b4 <HAL_UART_IRQHandler+0x110>
    UART_EndTransmit_IT(huart);
 80087be:	4620      	mov	r0, r4
 80087c0:	f7ff fec3 	bl	800854a <UART_EndTransmit_IT>
    return;
 80087c4:	e7f6      	b.n	80087b4 <HAL_UART_IRQHandler+0x110>
 80087c6:	bf00      	nop
 80087c8:	080087cd 	.word	0x080087cd

080087cc <UART_DMAAbortOnError>:
{
 80087cc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80087d4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80087d6:	f7ff ff38 	bl	800864a <HAL_UART_ErrorCallback>
}
 80087da:	bd08      	pop	{r3, pc}

080087dc <HAL_UART_AbortReceiveCpltCallback>:
}
 80087dc:	4770      	bx	lr
	...

080087e0 <HAL_UART_AbortReceive_IT>:
{
 80087e0:	b510      	push	{r4, lr}
 80087e2:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087e4:	6802      	ldr	r2, [r0, #0]
 80087e6:	68d3      	ldr	r3, [r2, #12]
 80087e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087ec:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ee:	6802      	ldr	r2, [r0, #0]
 80087f0:	6953      	ldr	r3, [r2, #20]
 80087f2:	f023 0301 	bic.w	r3, r3, #1
 80087f6:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f8:	6803      	ldr	r3, [r0, #0]
 80087fa:	695a      	ldr	r2, [r3, #20]
 80087fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008800:	d018      	beq.n	8008834 <HAL_UART_AbortReceive_IT+0x54>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008802:	695a      	ldr	r2, [r3, #20]
 8008804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008808:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 800880a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800880c:	b153      	cbz	r3, 8008824 <HAL_UART_AbortReceive_IT+0x44>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800880e:	4a0d      	ldr	r2, [pc, #52]	; (8008844 <HAL_UART_AbortReceive_IT+0x64>)
 8008810:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008812:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8008814:	f7fd f82b 	bl	800586e <HAL_DMA_Abort_IT>
 8008818:	b110      	cbz	r0, 8008820 <HAL_UART_AbortReceive_IT+0x40>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800881a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800881c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800881e:	4798      	blx	r3
}
 8008820:	2000      	movs	r0, #0
 8008822:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0x00U;
 8008824:	2300      	movs	r3, #0
 8008826:	85c3      	strh	r3, [r0, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 8008828:	2320      	movs	r3, #32
 800882a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_AbortReceiveCpltCallback(huart);
 800882e:	f7ff ffd5 	bl	80087dc <HAL_UART_AbortReceiveCpltCallback>
 8008832:	e7f5      	b.n	8008820 <HAL_UART_AbortReceive_IT+0x40>
    huart->RxXferCount = 0x00U;
 8008834:	2300      	movs	r3, #0
 8008836:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 8008838:	2320      	movs	r3, #32
 800883a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 800883e:	f7ff ffcd 	bl	80087dc <HAL_UART_AbortReceiveCpltCallback>
 8008842:	e7ed      	b.n	8008820 <HAL_UART_AbortReceive_IT+0x40>
 8008844:	08008849 	.word	0x08008849

08008848 <UART_DMARxOnlyAbortCallback>:
{
 8008848:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800884a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800884c:	2300      	movs	r3, #0
 800884e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8008850:	2320      	movs	r3, #32
 8008852:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 8008856:	f7ff ffc1 	bl	80087dc <HAL_UART_AbortReceiveCpltCallback>
}
 800885a:	bd08      	pop	{r3, pc}

0800885c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800885c:	2884      	cmp	r0, #132	; 0x84
 800885e:	d001      	beq.n	8008864 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8008860:	3003      	adds	r0, #3
 8008862:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008864:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8008866:	4770      	bx	lr

08008868 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008868:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800886a:	f000 ff25 	bl	80096b8 <vTaskStartScheduler>
  
  return osOK;
}
 800886e:	2000      	movs	r0, #0
 8008870:	bd08      	pop	{r3, pc}

08008872 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008872:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008876:	b087      	sub	sp, #28
 8008878:	4604      	mov	r4, r0
 800887a:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800887c:	6945      	ldr	r5, [r0, #20]
 800887e:	b1a5      	cbz	r5, 80088aa <osThreadCreate+0x38>
 8008880:	6986      	ldr	r6, [r0, #24]
 8008882:	b196      	cbz	r6, 80088aa <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008884:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8008888:	f8d0 9000 	ldr.w	r9, [r0]
 800888c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8008890:	f7ff ffe4 	bl	800885c <makeFreeRtosPriority>
 8008894:	6922      	ldr	r2, [r4, #16]
 8008896:	9602      	str	r6, [sp, #8]
 8008898:	9501      	str	r5, [sp, #4]
 800889a:	9000      	str	r0, [sp, #0]
 800889c:	463b      	mov	r3, r7
 800889e:	4649      	mov	r1, r9
 80088a0:	4640      	mov	r0, r8
 80088a2:	f000 fe9b 	bl	80095dc <xTaskCreateStatic>
 80088a6:	9005      	str	r0, [sp, #20]
 80088a8:	e013      	b.n	80088d2 <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088aa:	6865      	ldr	r5, [r4, #4]
 80088ac:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80088ae:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088b2:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80088b6:	f7ff ffd1 	bl	800885c <makeFreeRtosPriority>
 80088ba:	ab05      	add	r3, sp, #20
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	9000      	str	r0, [sp, #0]
 80088c0:	463b      	mov	r3, r7
 80088c2:	fa1f f288 	uxth.w	r2, r8
 80088c6:	4631      	mov	r1, r6
 80088c8:	4628      	mov	r0, r5
 80088ca:	f000 fec1 	bl	8009650 <xTaskCreate>
 80088ce:	2801      	cmp	r0, #1
 80088d0:	d103      	bne.n	80088da <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80088d2:	9805      	ldr	r0, [sp, #20]
}
 80088d4:	b007      	add	sp, #28
 80088d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 80088da:	2000      	movs	r0, #0
 80088dc:	e7fa      	b.n	80088d4 <osThreadCreate+0x62>

080088de <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80088de:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80088e0:	4603      	mov	r3, r0
 80088e2:	b900      	cbnz	r0, 80088e6 <osDelay+0x8>
 80088e4:	2301      	movs	r3, #1
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 f89a 	bl	8009a20 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80088ec:	2000      	movs	r0, #0
 80088ee:	bd08      	pop	{r3, pc}

080088f0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80088f0:	b510      	push	{r4, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80088f6:	6844      	ldr	r4, [r0, #4]
 80088f8:	b16c      	cbz	r4, 8008916 <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 80088fa:	2901      	cmp	r1, #1
 80088fc:	d009      	beq.n	8008912 <osTimerCreate+0x22>
 80088fe:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8008900:	6801      	ldr	r1, [r0, #0]
    return xTimerCreateStatic((const char *)"",
 8008902:	9401      	str	r4, [sp, #4]
 8008904:	9100      	str	r1, [sp, #0]
 8008906:	2101      	movs	r1, #1
 8008908:	4809      	ldr	r0, [pc, #36]	; (8008930 <osTimerCreate+0x40>)
 800890a:	f001 fd7b 	bl	800a404 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 800890e:	b002      	add	sp, #8
 8008910:	bd10      	pop	{r4, pc}
    return xTimerCreateStatic((const char *)"",
 8008912:	2201      	movs	r2, #1
 8008914:	e7f4      	b.n	8008900 <osTimerCreate+0x10>
    return xTimerCreate((const char *)"",
 8008916:	2901      	cmp	r1, #1
 8008918:	d007      	beq.n	800892a <osTimerCreate+0x3a>
 800891a:	2200      	movs	r2, #0
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800891c:	6801      	ldr	r1, [r0, #0]
    return xTimerCreate((const char *)"",
 800891e:	9100      	str	r1, [sp, #0]
 8008920:	2101      	movs	r1, #1
 8008922:	4803      	ldr	r0, [pc, #12]	; (8008930 <osTimerCreate+0x40>)
 8008924:	f001 fd52 	bl	800a3cc <xTimerCreate>
 8008928:	e7f1      	b.n	800890e <osTimerCreate+0x1e>
 800892a:	2201      	movs	r2, #1
 800892c:	e7f6      	b.n	800891c <osTimerCreate+0x2c>
 800892e:	bf00      	nop
 8008930:	0800c178 	.word	0x0800c178

08008934 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008934:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008936:	6841      	ldr	r1, [r0, #4]
 8008938:	b119      	cbz	r1, 8008942 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800893a:	2001      	movs	r0, #1
 800893c:	f000 fa8f 	bl	8008e5e <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008940:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8008942:	2001      	movs	r0, #1
 8008944:	f000 fa80 	bl	8008e48 <xQueueCreateMutex>
 8008948:	e7fa      	b.n	8008940 <osMutexCreate+0xc>

0800894a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800894a:	f100 0308 	add.w	r3, r0, #8
 800894e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008954:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008956:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008958:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800895e:	4770      	bx	lr

08008960 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008960:	2300      	movs	r3, #0
 8008962:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008964:	4770      	bx	lr

08008966 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008966:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008968:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800896e:	689a      	ldr	r2, [r3, #8]
 8008970:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008972:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008974:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008976:	6803      	ldr	r3, [r0, #0]
 8008978:	3301      	adds	r3, #1
 800897a:	6003      	str	r3, [r0, #0]
}
 800897c:	4770      	bx	lr

0800897e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800897e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008980:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008982:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008986:	d002      	beq.n	800898e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008988:	f100 0208 	add.w	r2, r0, #8
 800898c:	e002      	b.n	8008994 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 800898e:	6902      	ldr	r2, [r0, #16]
 8008990:	e004      	b.n	800899c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008992:	461a      	mov	r2, r3
 8008994:	6853      	ldr	r3, [r2, #4]
 8008996:	681c      	ldr	r4, [r3, #0]
 8008998:	42ac      	cmp	r4, r5
 800899a:	d9fa      	bls.n	8008992 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800899c:	6853      	ldr	r3, [r2, #4]
 800899e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089a0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089a2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80089a4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089a6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80089a8:	6803      	ldr	r3, [r0, #0]
 80089aa:	3301      	adds	r3, #1
 80089ac:	6003      	str	r3, [r0, #0]
}
 80089ae:	bc30      	pop	{r4, r5}
 80089b0:	4770      	bx	lr

080089b2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80089b2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80089b4:	6842      	ldr	r2, [r0, #4]
 80089b6:	6881      	ldr	r1, [r0, #8]
 80089b8:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80089ba:	6882      	ldr	r2, [r0, #8]
 80089bc:	6841      	ldr	r1, [r0, #4]
 80089be:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	4282      	cmp	r2, r0
 80089c4:	d006      	beq.n	80089d4 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80089c6:	2200      	movs	r2, #0
 80089c8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	3a01      	subs	r2, #1
 80089ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80089d0:	6818      	ldr	r0, [r3, #0]
}
 80089d2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80089d4:	6882      	ldr	r2, [r0, #8]
 80089d6:	605a      	str	r2, [r3, #4]
 80089d8:	e7f5      	b.n	80089c6 <uxListRemove+0x14>

080089da <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80089da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80089dc:	b123      	cbz	r3, 80089e8 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80089de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80089e0:	6818      	ldr	r0, [r3, #0]
 80089e2:	f1c0 0007 	rsb	r0, r0, #7
 80089e6:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80089e8:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 80089ea:	4770      	bx	lr

080089ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80089ec:	b510      	push	{r4, lr}
 80089ee:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089f0:	f001 ff20 	bl	800a834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80089f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80089f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d004      	beq.n	8008a06 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80089fc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80089fe:	f001 ff3b 	bl	800a878 <vPortExitCritical>

	return xReturn;
}
 8008a02:	4620      	mov	r0, r4
 8008a04:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008a06:	2401      	movs	r4, #1
 8008a08:	e7f9      	b.n	80089fe <prvIsQueueFull+0x12>

08008a0a <prvIsQueueEmpty>:
{
 8008a0a:	b510      	push	{r4, lr}
 8008a0c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008a0e:	f001 ff11 	bl	800a834 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a14:	b123      	cbz	r3, 8008a20 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8008a16:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008a18:	f001 ff2e 	bl	800a878 <vPortExitCritical>
}
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008a20:	2401      	movs	r4, #1
 8008a22:	e7f9      	b.n	8008a18 <prvIsQueueEmpty+0xe>

08008a24 <prvCopyDataToQueue>:
{
 8008a24:	b570      	push	{r4, r5, r6, lr}
 8008a26:	4604      	mov	r4, r0
 8008a28:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a2a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008a2e:	b95a      	cbnz	r2, 8008a48 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a30:	6803      	ldr	r3, [r0, #0]
 8008a32:	b11b      	cbz	r3, 8008a3c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8008a34:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a36:	3501      	adds	r5, #1
 8008a38:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8008a3a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a3c:	6880      	ldr	r0, [r0, #8]
 8008a3e:	f001 f9b1 	bl	8009da4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60a3      	str	r3, [r4, #8]
 8008a46:	e7f6      	b.n	8008a36 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008a48:	b96e      	cbnz	r6, 8008a66 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a4a:	6840      	ldr	r0, [r0, #4]
 8008a4c:	f002 fe60 	bl	800b710 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008a52:	6863      	ldr	r3, [r4, #4]
 8008a54:	4413      	add	r3, r2
 8008a56:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a58:	68a2      	ldr	r2, [r4, #8]
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d319      	bcc.n	8008a92 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8008a62:	2000      	movs	r0, #0
 8008a64:	e7e7      	b.n	8008a36 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a66:	68c0      	ldr	r0, [r0, #12]
 8008a68:	f002 fe52 	bl	800b710 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008a6e:	4252      	negs	r2, r2
 8008a70:	68e3      	ldr	r3, [r4, #12]
 8008a72:	4413      	add	r3, r2
 8008a74:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a76:	6821      	ldr	r1, [r4, #0]
 8008a78:	428b      	cmp	r3, r1
 8008a7a:	d202      	bcs.n	8008a82 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a7c:	68a3      	ldr	r3, [r4, #8]
 8008a7e:	441a      	add	r2, r3
 8008a80:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008a82:	2e02      	cmp	r6, #2
 8008a84:	d001      	beq.n	8008a8a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008a86:	2000      	movs	r0, #0
 8008a88:	e7d5      	b.n	8008a36 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a8a:	b125      	cbz	r5, 8008a96 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8008a8c:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8008a8e:	2000      	movs	r0, #0
 8008a90:	e7d1      	b.n	8008a36 <prvCopyDataToQueue+0x12>
 8008a92:	2000      	movs	r0, #0
 8008a94:	e7cf      	b.n	8008a36 <prvCopyDataToQueue+0x12>
 8008a96:	2000      	movs	r0, #0
 8008a98:	e7cd      	b.n	8008a36 <prvCopyDataToQueue+0x12>

08008a9a <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a9a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008a9c:	b172      	cbz	r2, 8008abc <prvCopyDataFromQueue+0x22>
{
 8008a9e:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008aa0:	68c3      	ldr	r3, [r0, #12]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008aa6:	6884      	ldr	r4, [r0, #8]
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	d301      	bcc.n	8008ab0 <prvCopyDataFromQueue+0x16>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008aac:	6803      	ldr	r3, [r0, #0]
 8008aae:	60c3      	str	r3, [r0, #12]
 8008ab0:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ab2:	68c1      	ldr	r1, [r0, #12]
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f002 fe2b 	bl	800b710 <memcpy>
}
 8008aba:	bd10      	pop	{r4, pc}
 8008abc:	4770      	bx	lr

08008abe <prvUnlockQueue>:
{
 8008abe:	b538      	push	{r3, r4, r5, lr}
 8008ac0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8008ac2:	f001 feb7 	bl	800a834 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008ac6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8008aca:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008acc:	e003      	b.n	8008ad6 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8008ace:	f001 f8f1 	bl	8009cb4 <vTaskMissedYield>
			--cTxLock;
 8008ad2:	3c01      	subs	r4, #1
 8008ad4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ad6:	2c00      	cmp	r4, #0
 8008ad8:	dd08      	ble.n	8008aec <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ada:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008adc:	b133      	cbz	r3, 8008aec <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ade:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008ae2:	f001 f855 	bl	8009b90 <xTaskRemoveFromEventList>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d0f3      	beq.n	8008ad2 <prvUnlockQueue+0x14>
 8008aea:	e7f0      	b.n	8008ace <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8008aec:	23ff      	movs	r3, #255	; 0xff
 8008aee:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008af2:	f001 fec1 	bl	800a878 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008af6:	f001 fe9d 	bl	800a834 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008afa:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8008afe:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b00:	e003      	b.n	8008b0a <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8008b02:	f001 f8d7 	bl	8009cb4 <vTaskMissedYield>
				--cRxLock;
 8008b06:	3c01      	subs	r4, #1
 8008b08:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b0a:	2c00      	cmp	r4, #0
 8008b0c:	dd08      	ble.n	8008b20 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b0e:	692b      	ldr	r3, [r5, #16]
 8008b10:	b133      	cbz	r3, 8008b20 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b12:	f105 0010 	add.w	r0, r5, #16
 8008b16:	f001 f83b 	bl	8009b90 <xTaskRemoveFromEventList>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d0f3      	beq.n	8008b06 <prvUnlockQueue+0x48>
 8008b1e:	e7f0      	b.n	8008b02 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8008b20:	23ff      	movs	r3, #255	; 0xff
 8008b22:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008b26:	f001 fea7 	bl	800a878 <vPortExitCritical>
}
 8008b2a:	bd38      	pop	{r3, r4, r5, pc}

08008b2c <xQueueGenericReset>:
{
 8008b2c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8008b2e:	b940      	cbnz	r0, 8008b42 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	e7fe      	b.n	8008b40 <xQueueGenericReset+0x14>
 8008b42:	4604      	mov	r4, r0
 8008b44:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8008b46:	f001 fe75 	bl	800a834 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b4a:	6821      	ldr	r1, [r4, #0]
 8008b4c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008b4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b50:	fb03 1002 	mla	r0, r3, r2, r1
 8008b54:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b56:	2000      	movs	r0, #0
 8008b58:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b5a:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b5c:	3a01      	subs	r2, #1
 8008b5e:	fb02 1303 	mla	r3, r2, r3, r1
 8008b62:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b64:	23ff      	movs	r3, #255	; 0xff
 8008b66:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008b6e:	b9a5      	cbnz	r5, 8008b9a <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b70:	6923      	ldr	r3, [r4, #16]
 8008b72:	b91b      	cbnz	r3, 8008b7c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8008b74:	f001 fe80 	bl	800a878 <vPortExitCritical>
}
 8008b78:	2001      	movs	r0, #1
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b7c:	f104 0010 	add.w	r0, r4, #16
 8008b80:	f001 f806 	bl	8009b90 <xTaskRemoveFromEventList>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d0f5      	beq.n	8008b74 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8008b88:	4b08      	ldr	r3, [pc, #32]	; (8008bac <xQueueGenericReset+0x80>)
 8008b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b8e:	601a      	str	r2, [r3, #0]
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	e7ec      	b.n	8008b74 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b9a:	f104 0010 	add.w	r0, r4, #16
 8008b9e:	f7ff fed4 	bl	800894a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ba2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008ba6:	f7ff fed0 	bl	800894a <vListInitialise>
 8008baa:	e7e3      	b.n	8008b74 <xQueueGenericReset+0x48>
 8008bac:	e000ed04 	.word	0xe000ed04

08008bb0 <prvInitialiseNewQueue>:
{
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	461d      	mov	r5, r3
 8008bb4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	b149      	cbz	r1, 8008bce <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008bba:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8008bbc:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008bbe:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f7ff ffb2 	bl	8008b2c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008bc8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8008bcc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008bce:	6024      	str	r4, [r4, #0]
 8008bd0:	e7f4      	b.n	8008bbc <prvInitialiseNewQueue+0xc>

08008bd2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bd2:	b940      	cbnz	r0, 8008be6 <xQueueGenericCreateStatic+0x14>
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	e7fe      	b.n	8008be4 <xQueueGenericCreateStatic+0x12>
	{
 8008be6:	b510      	push	{r4, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8008bec:	b153      	cbz	r3, 8008c04 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008bee:	b192      	cbz	r2, 8008c16 <xQueueGenericCreateStatic+0x44>
 8008bf0:	b989      	cbnz	r1, 8008c16 <xQueueGenericCreateStatic+0x44>
 8008bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf6:	f383 8811 	msr	BASEPRI, r3
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	e7fe      	b.n	8008c02 <xQueueGenericCreateStatic+0x30>
 8008c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	e7fe      	b.n	8008c14 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c16:	b94a      	cbnz	r2, 8008c2c <xQueueGenericCreateStatic+0x5a>
 8008c18:	b141      	cbz	r1, 8008c2c <xQueueGenericCreateStatic+0x5a>
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	e7fe      	b.n	8008c2a <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c2c:	2050      	movs	r0, #80	; 0x50
 8008c2e:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c30:	9803      	ldr	r0, [sp, #12]
 8008c32:	2850      	cmp	r0, #80	; 0x50
 8008c34:	d008      	beq.n	8008c48 <xQueueGenericCreateStatic+0x76>
 8008c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	e7fe      	b.n	8008c46 <xQueueGenericCreateStatic+0x74>
 8008c48:	4620      	mov	r0, r4
 8008c4a:	461c      	mov	r4, r3
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008c4c:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c54:	9400      	str	r4, [sp, #0]
 8008c56:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008c5a:	f7ff ffa9 	bl	8008bb0 <prvInitialiseNewQueue>
	}
 8008c5e:	4620      	mov	r0, r4
 8008c60:	b004      	add	sp, #16
 8008c62:	bd10      	pop	{r4, pc}

08008c64 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c64:	b940      	cbnz	r0, 8008c78 <xQueueGenericCreate+0x14>
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	e7fe      	b.n	8008c76 <xQueueGenericCreate+0x12>
	{
 8008c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8008c7e:	b111      	cbz	r1, 8008c86 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c80:	fb01 f000 	mul.w	r0, r1, r0
 8008c84:	e000      	b.n	8008c88 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8008c86:	2000      	movs	r0, #0
 8008c88:	4617      	mov	r7, r2
 8008c8a:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008c8c:	3050      	adds	r0, #80	; 0x50
 8008c8e:	f001 ff87 	bl	800aba0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008c92:	4605      	mov	r5, r0
 8008c94:	b150      	cbz	r0, 8008cac <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008c96:	2300      	movs	r3, #0
 8008c98:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c9c:	9000      	str	r0, [sp, #0]
 8008c9e:	463b      	mov	r3, r7
 8008ca0:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f7ff ff82 	bl	8008bb0 <prvInitialiseNewQueue>
	}
 8008cac:	4628      	mov	r0, r5
 8008cae:	b003      	add	sp, #12
 8008cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008cb4 <xQueueGenericSend>:
{
 8008cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008cba:	b160      	cbz	r0, 8008cd6 <xQueueGenericSend+0x22>
 8008cbc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cbe:	b999      	cbnz	r1, 8008ce8 <xQueueGenericSend+0x34>
 8008cc0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008cc2:	b18a      	cbz	r2, 8008ce8 <xQueueGenericSend+0x34>
 8008cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	e7fe      	b.n	8008cd4 <xQueueGenericSend+0x20>
 8008cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	e7fe      	b.n	8008ce6 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d10b      	bne.n	8008d04 <xQueueGenericSend+0x50>
 8008cec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008cee:	2a01      	cmp	r2, #1
 8008cf0:	d008      	beq.n	8008d04 <xQueueGenericSend+0x50>
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	e7fe      	b.n	8008d02 <xQueueGenericSend+0x4e>
 8008d04:	461e      	mov	r6, r3
 8008d06:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d08:	f000 ffe0 	bl	8009ccc <xTaskGetSchedulerState>
 8008d0c:	b950      	cbnz	r0, 8008d24 <xQueueGenericSend+0x70>
 8008d0e:	9b01      	ldr	r3, [sp, #4]
 8008d10:	b153      	cbz	r3, 8008d28 <xQueueGenericSend+0x74>
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	e7fe      	b.n	8008d22 <xQueueGenericSend+0x6e>
 8008d24:	2500      	movs	r5, #0
 8008d26:	e03a      	b.n	8008d9e <xQueueGenericSend+0xea>
 8008d28:	2500      	movs	r5, #0
 8008d2a:	e038      	b.n	8008d9e <xQueueGenericSend+0xea>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	4639      	mov	r1, r7
 8008d30:	4620      	mov	r0, r4
 8008d32:	f7ff fe77 	bl	8008a24 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d38:	b94b      	cbnz	r3, 8008d4e <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8008d3a:	b1a8      	cbz	r0, 8008d68 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8008d3c:	4b3b      	ldr	r3, [pc, #236]	; (8008e2c <xQueueGenericSend+0x178>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	e00c      	b.n	8008d68 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d52:	f000 ff1d 	bl	8009b90 <xTaskRemoveFromEventList>
 8008d56:	b138      	cbz	r0, 8008d68 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8008d58:	4b34      	ldr	r3, [pc, #208]	; (8008e2c <xQueueGenericSend+0x178>)
 8008d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008d68:	f001 fd86 	bl	800a878 <vPortExitCritical>
				return pdPASS;
 8008d6c:	2001      	movs	r0, #1
}
 8008d6e:	b005      	add	sp, #20
 8008d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8008d72:	f001 fd81 	bl	800a878 <vPortExitCritical>
					return errQUEUE_FULL;
 8008d76:	2000      	movs	r0, #0
 8008d78:	e7f9      	b.n	8008d6e <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d7a:	a802      	add	r0, sp, #8
 8008d7c:	f000 ff4e 	bl	8009c1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d80:	2501      	movs	r5, #1
 8008d82:	e019      	b.n	8008db8 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8008d84:	2300      	movs	r3, #0
 8008d86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008d8a:	e021      	b.n	8008dd0 <xQueueGenericSend+0x11c>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d92:	e023      	b.n	8008ddc <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8008d94:	4620      	mov	r0, r4
 8008d96:	f7ff fe92 	bl	8008abe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d9a:	f000 fd75 	bl	8009888 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008d9e:	f001 fd49 	bl	800a834 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008da2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008da4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d3c0      	bcc.n	8008d2c <xQueueGenericSend+0x78>
 8008daa:	2e02      	cmp	r6, #2
 8008dac:	d0be      	beq.n	8008d2c <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dae:	9b01      	ldr	r3, [sp, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0de      	beq.n	8008d72 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8008db4:	2d00      	cmp	r5, #0
 8008db6:	d0e0      	beq.n	8008d7a <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8008db8:	f001 fd5e 	bl	800a878 <vPortExitCritical>
		vTaskSuspendAll();
 8008dbc:	f000 fcca 	bl	8009754 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dc0:	f001 fd38 	bl	800a834 <vPortEnterCritical>
 8008dc4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008dc8:	b25b      	sxtb	r3, r3
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dce:	d0d9      	beq.n	8008d84 <xQueueGenericSend+0xd0>
 8008dd0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008dd4:	b25b      	sxtb	r3, r3
 8008dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dda:	d0d7      	beq.n	8008d8c <xQueueGenericSend+0xd8>
 8008ddc:	f001 fd4c 	bl	800a878 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008de0:	a901      	add	r1, sp, #4
 8008de2:	a802      	add	r0, sp, #8
 8008de4:	f000 ff26 	bl	8009c34 <xTaskCheckForTimeOut>
 8008de8:	b9c8      	cbnz	r0, 8008e1e <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008dea:	4620      	mov	r0, r4
 8008dec:	f7ff fdfe 	bl	80089ec <prvIsQueueFull>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d0cf      	beq.n	8008d94 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008df4:	9901      	ldr	r1, [sp, #4]
 8008df6:	f104 0010 	add.w	r0, r4, #16
 8008dfa:	f000 fe95 	bl	8009b28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f7ff fe5d 	bl	8008abe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e04:	f000 fd40 	bl	8009888 <xTaskResumeAll>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d1c8      	bne.n	8008d9e <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8008e0c:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <xQueueGenericSend+0x178>)
 8008e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	e7bf      	b.n	8008d9e <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f7ff fe4d 	bl	8008abe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e24:	f000 fd30 	bl	8009888 <xTaskResumeAll>
			return errQUEUE_FULL;
 8008e28:	2000      	movs	r0, #0
 8008e2a:	e7a0      	b.n	8008d6e <xQueueGenericSend+0xba>
 8008e2c:	e000ed04 	.word	0xe000ed04

08008e30 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8008e30:	b148      	cbz	r0, 8008e46 <prvInitialiseMutex+0x16>
	{
 8008e32:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e34:	2100      	movs	r1, #0
 8008e36:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008e38:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008e3a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	460a      	mov	r2, r1
 8008e40:	f7ff ff38 	bl	8008cb4 <xQueueGenericSend>
	}
 8008e44:	bd08      	pop	{r3, pc}
 8008e46:	4770      	bx	lr

08008e48 <xQueueCreateMutex>:
	{
 8008e48:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	2001      	movs	r0, #1
 8008e50:	f7ff ff08 	bl	8008c64 <xQueueGenericCreate>
 8008e54:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008e56:	f7ff ffeb 	bl	8008e30 <prvInitialiseMutex>
	}
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	bd10      	pop	{r4, pc}

08008e5e <xQueueCreateMutexStatic>:
	{
 8008e5e:	b510      	push	{r4, lr}
 8008e60:	b082      	sub	sp, #8
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008e62:	9000      	str	r0, [sp, #0]
 8008e64:	460b      	mov	r3, r1
 8008e66:	2200      	movs	r2, #0
 8008e68:	4611      	mov	r1, r2
 8008e6a:	2001      	movs	r0, #1
 8008e6c:	f7ff feb1 	bl	8008bd2 <xQueueGenericCreateStatic>
 8008e70:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008e72:	f7ff ffdd 	bl	8008e30 <prvInitialiseMutex>
	}
 8008e76:	4620      	mov	r0, r4
 8008e78:	b002      	add	sp, #8
 8008e7a:	bd10      	pop	{r4, pc}

08008e7c <xQueueGenericSendFromISR>:
{
 8008e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008e80:	b160      	cbz	r0, 8008e9c <xQueueGenericSendFromISR+0x20>
 8008e82:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e84:	b999      	cbnz	r1, 8008eae <xQueueGenericSendFromISR+0x32>
 8008e86:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8008e88:	b188      	cbz	r0, 8008eae <xQueueGenericSendFromISR+0x32>
 8008e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	e7fe      	b.n	8008e9a <xQueueGenericSendFromISR+0x1e>
 8008e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	e7fe      	b.n	8008eac <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d10b      	bne.n	8008eca <xQueueGenericSendFromISR+0x4e>
 8008eb2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008eb4:	2801      	cmp	r0, #1
 8008eb6:	d008      	beq.n	8008eca <xQueueGenericSendFromISR+0x4e>
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	e7fe      	b.n	8008ec8 <xQueueGenericSendFromISR+0x4c>
 8008eca:	461f      	mov	r7, r3
 8008ecc:	4690      	mov	r8, r2
 8008ece:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ed0:	f001 fdda 	bl	800aa88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ed4:	f3ef 8611 	mrs	r6, BASEPRI
 8008ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ee8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008eea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d303      	bcc.n	8008ef8 <xQueueGenericSendFromISR+0x7c>
 8008ef0:	2f02      	cmp	r7, #2
 8008ef2:	d001      	beq.n	8008ef8 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	e00f      	b.n	8008f18 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ef8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8008efc:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008efe:	463a      	mov	r2, r7
 8008f00:	4649      	mov	r1, r9
 8008f02:	4620      	mov	r0, r4
 8008f04:	f7ff fd8e 	bl	8008a24 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008f08:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008f0c:	d008      	beq.n	8008f20 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f0e:	1c6b      	adds	r3, r5, #1
 8008f10:	b25b      	sxtb	r3, r3
 8008f12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8008f16:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f18:	f386 8811 	msr	BASEPRI, r6
}
 8008f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f22:	b15b      	cbz	r3, 8008f3c <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f24:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f28:	f000 fe32 	bl	8009b90 <xTaskRemoveFromEventList>
 8008f2c:	b140      	cbz	r0, 8008f40 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8008f2e:	f1b8 0f00 	cmp.w	r8, #0
 8008f32:	d007      	beq.n	8008f44 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f34:	2001      	movs	r0, #1
 8008f36:	f8c8 0000 	str.w	r0, [r8]
 8008f3a:	e7ed      	b.n	8008f18 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8008f3c:	2001      	movs	r0, #1
 8008f3e:	e7eb      	b.n	8008f18 <xQueueGenericSendFromISR+0x9c>
 8008f40:	2001      	movs	r0, #1
 8008f42:	e7e9      	b.n	8008f18 <xQueueGenericSendFromISR+0x9c>
 8008f44:	2001      	movs	r0, #1
 8008f46:	e7e7      	b.n	8008f18 <xQueueGenericSendFromISR+0x9c>

08008f48 <xQueueReceive>:
{
 8008f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008f4e:	b160      	cbz	r0, 8008f6a <xQueueReceive+0x22>
 8008f50:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f52:	b999      	cbnz	r1, 8008f7c <xQueueReceive+0x34>
 8008f54:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008f56:	b18b      	cbz	r3, 8008f7c <xQueueReceive+0x34>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	e7fe      	b.n	8008f68 <xQueueReceive+0x20>
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	e7fe      	b.n	8008f7a <xQueueReceive+0x32>
 8008f7c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f7e:	f000 fea5 	bl	8009ccc <xTaskGetSchedulerState>
 8008f82:	b950      	cbnz	r0, 8008f9a <xQueueReceive+0x52>
 8008f84:	9b01      	ldr	r3, [sp, #4]
 8008f86:	b153      	cbz	r3, 8008f9e <xQueueReceive+0x56>
 8008f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	e7fe      	b.n	8008f98 <xQueueReceive+0x50>
 8008f9a:	2600      	movs	r6, #0
 8008f9c:	e03e      	b.n	800901c <xQueueReceive+0xd4>
 8008f9e:	2600      	movs	r6, #0
 8008fa0:	e03c      	b.n	800901c <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	f7ff fd78 	bl	8008a9a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008faa:	3d01      	subs	r5, #1
 8008fac:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fae:	6923      	ldr	r3, [r4, #16]
 8008fb0:	b923      	cbnz	r3, 8008fbc <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 8008fb2:	f001 fc61 	bl	800a878 <vPortExitCritical>
				return pdPASS;
 8008fb6:	2001      	movs	r0, #1
}
 8008fb8:	b005      	add	sp, #20
 8008fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fbc:	f104 0010 	add.w	r0, r4, #16
 8008fc0:	f000 fde6 	bl	8009b90 <xTaskRemoveFromEventList>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d0f4      	beq.n	8008fb2 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 8008fc8:	4b34      	ldr	r3, [pc, #208]	; (800909c <xQueueReceive+0x154>)
 8008fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fce:	601a      	str	r2, [r3, #0]
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	e7eb      	b.n	8008fb2 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 8008fda:	f001 fc4d 	bl	800a878 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008fde:	2000      	movs	r0, #0
 8008fe0:	e7ea      	b.n	8008fb8 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fe2:	a802      	add	r0, sp, #8
 8008fe4:	f000 fe1a 	bl	8009c1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fe8:	2601      	movs	r6, #1
 8008fea:	e021      	b.n	8009030 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 8008fec:	2300      	movs	r3, #0
 8008fee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008ff2:	e029      	b.n	8009048 <xQueueReceive+0x100>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ffa:	e02b      	b.n	8009054 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f7ff fd5e 	bl	8008abe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009002:	f000 fc41 	bl	8009888 <xTaskResumeAll>
 8009006:	e009      	b.n	800901c <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8009008:	4620      	mov	r0, r4
 800900a:	f7ff fd58 	bl	8008abe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800900e:	f000 fc3b 	bl	8009888 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009012:	4620      	mov	r0, r4
 8009014:	f7ff fcf9 	bl	8008a0a <prvIsQueueEmpty>
 8009018:	2800      	cmp	r0, #0
 800901a:	d13d      	bne.n	8009098 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 800901c:	f001 fc0a 	bl	800a834 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009020:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009022:	2d00      	cmp	r5, #0
 8009024:	d1bd      	bne.n	8008fa2 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009026:	9b01      	ldr	r3, [sp, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d0d6      	beq.n	8008fda <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 800902c:	2e00      	cmp	r6, #0
 800902e:	d0d8      	beq.n	8008fe2 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 8009030:	f001 fc22 	bl	800a878 <vPortExitCritical>
		vTaskSuspendAll();
 8009034:	f000 fb8e 	bl	8009754 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009038:	f001 fbfc 	bl	800a834 <vPortEnterCritical>
 800903c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009040:	b25b      	sxtb	r3, r3
 8009042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009046:	d0d1      	beq.n	8008fec <xQueueReceive+0xa4>
 8009048:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800904c:	b25b      	sxtb	r3, r3
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009052:	d0cf      	beq.n	8008ff4 <xQueueReceive+0xac>
 8009054:	f001 fc10 	bl	800a878 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009058:	a901      	add	r1, sp, #4
 800905a:	a802      	add	r0, sp, #8
 800905c:	f000 fdea 	bl	8009c34 <xTaskCheckForTimeOut>
 8009060:	2800      	cmp	r0, #0
 8009062:	d1d1      	bne.n	8009008 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009064:	4620      	mov	r0, r4
 8009066:	f7ff fcd0 	bl	8008a0a <prvIsQueueEmpty>
 800906a:	2800      	cmp	r0, #0
 800906c:	d0c6      	beq.n	8008ffc <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800906e:	9901      	ldr	r1, [sp, #4]
 8009070:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009074:	f000 fd58 	bl	8009b28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009078:	4620      	mov	r0, r4
 800907a:	f7ff fd20 	bl	8008abe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800907e:	f000 fc03 	bl	8009888 <xTaskResumeAll>
 8009082:	2800      	cmp	r0, #0
 8009084:	d1ca      	bne.n	800901c <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 8009086:	4b05      	ldr	r3, [pc, #20]	; (800909c <xQueueReceive+0x154>)
 8009088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	e7c1      	b.n	800901c <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 8009098:	2000      	movs	r0, #0
 800909a:	e78d      	b.n	8008fb8 <xQueueReceive+0x70>
 800909c:	e000ed04 	.word	0xe000ed04

080090a0 <xQueueSemaphoreTake>:
{
 80090a0:	b570      	push	{r4, r5, r6, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80090a6:	b940      	cbnz	r0, 80090ba <xQueueSemaphoreTake+0x1a>
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	e7fe      	b.n	80090b8 <xQueueSemaphoreTake+0x18>
 80090ba:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80090bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80090be:	b143      	cbz	r3, 80090d2 <xQueueSemaphoreTake+0x32>
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	e7fe      	b.n	80090d0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090d2:	f000 fdfb 	bl	8009ccc <xTaskGetSchedulerState>
 80090d6:	b950      	cbnz	r0, 80090ee <xQueueSemaphoreTake+0x4e>
 80090d8:	9b01      	ldr	r3, [sp, #4]
 80090da:	b15b      	cbz	r3, 80090f4 <xQueueSemaphoreTake+0x54>
 80090dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	e7fe      	b.n	80090ec <xQueueSemaphoreTake+0x4c>
 80090ee:	2500      	movs	r5, #0
 80090f0:	462e      	mov	r6, r5
 80090f2:	e051      	b.n	8009198 <xQueueSemaphoreTake+0xf8>
 80090f4:	2500      	movs	r5, #0
 80090f6:	462e      	mov	r6, r5
 80090f8:	e04e      	b.n	8009198 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80090fa:	3b01      	subs	r3, #1
 80090fc:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	b913      	cbnz	r3, 8009108 <xQueueSemaphoreTake+0x68>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009102:	f000 ff07 	bl	8009f14 <pvTaskIncrementMutexHeldCount>
 8009106:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009108:	6923      	ldr	r3, [r4, #16]
 800910a:	b163      	cbz	r3, 8009126 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800910c:	f104 0010 	add.w	r0, r4, #16
 8009110:	f000 fd3e 	bl	8009b90 <xTaskRemoveFromEventList>
 8009114:	b138      	cbz	r0, 8009126 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 8009116:	4b48      	ldr	r3, [pc, #288]	; (8009238 <xQueueSemaphoreTake+0x198>)
 8009118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009126:	f001 fba7 	bl	800a878 <vPortExitCritical>
				return pdPASS;
 800912a:	2501      	movs	r5, #1
}
 800912c:	4628      	mov	r0, r5
 800912e:	b004      	add	sp, #16
 8009130:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009132:	b145      	cbz	r5, 8009146 <xQueueSemaphoreTake+0xa6>
 8009134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	e7fe      	b.n	8009144 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 8009146:	f001 fb97 	bl	800a878 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800914a:	e7ef      	b.n	800912c <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800914c:	a802      	add	r0, sp, #8
 800914e:	f000 fd65 	bl	8009c1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009152:	2601      	movs	r6, #1
 8009154:	e02a      	b.n	80091ac <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 8009156:	2300      	movs	r3, #0
 8009158:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800915c:	e032      	b.n	80091c4 <xQueueSemaphoreTake+0x124>
 800915e:	2300      	movs	r3, #0
 8009160:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009164:	e034      	b.n	80091d0 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 8009166:	f001 fb65 	bl	800a834 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800916a:	68a0      	ldr	r0, [r4, #8]
 800916c:	f000 fdbe 	bl	8009cec <xTaskPriorityInherit>
 8009170:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8009172:	f001 fb81 	bl	800a878 <vPortExitCritical>
 8009176:	e03b      	b.n	80091f0 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 8009178:	4620      	mov	r0, r4
 800917a:	f7ff fca0 	bl	8008abe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800917e:	f000 fb83 	bl	8009888 <xTaskResumeAll>
 8009182:	e009      	b.n	8009198 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 8009184:	4620      	mov	r0, r4
 8009186:	f7ff fc9a 	bl	8008abe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800918a:	f000 fb7d 	bl	8009888 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800918e:	4620      	mov	r0, r4
 8009190:	f7ff fc3b 	bl	8008a0a <prvIsQueueEmpty>
 8009194:	2800      	cmp	r0, #0
 8009196:	d140      	bne.n	800921a <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 8009198:	f001 fb4c 	bl	800a834 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800919c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1ab      	bne.n	80090fa <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80091a2:	9b01      	ldr	r3, [sp, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d0c4      	beq.n	8009132 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 80091a8:	2e00      	cmp	r6, #0
 80091aa:	d0cf      	beq.n	800914c <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 80091ac:	f001 fb64 	bl	800a878 <vPortExitCritical>
		vTaskSuspendAll();
 80091b0:	f000 fad0 	bl	8009754 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091b4:	f001 fb3e 	bl	800a834 <vPortEnterCritical>
 80091b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80091bc:	b25b      	sxtb	r3, r3
 80091be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091c2:	d0c8      	beq.n	8009156 <xQueueSemaphoreTake+0xb6>
 80091c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80091c8:	b25b      	sxtb	r3, r3
 80091ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091ce:	d0c6      	beq.n	800915e <xQueueSemaphoreTake+0xbe>
 80091d0:	f001 fb52 	bl	800a878 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091d4:	a901      	add	r1, sp, #4
 80091d6:	a802      	add	r0, sp, #8
 80091d8:	f000 fd2c 	bl	8009c34 <xTaskCheckForTimeOut>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d1d1      	bne.n	8009184 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091e0:	4620      	mov	r0, r4
 80091e2:	f7ff fc12 	bl	8008a0a <prvIsQueueEmpty>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d0c6      	beq.n	8009178 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d0ba      	beq.n	8009166 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091f0:	9901      	ldr	r1, [sp, #4]
 80091f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80091f6:	f000 fc97 	bl	8009b28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091fa:	4620      	mov	r0, r4
 80091fc:	f7ff fc5f 	bl	8008abe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009200:	f000 fb42 	bl	8009888 <xTaskResumeAll>
 8009204:	2800      	cmp	r0, #0
 8009206:	d1c7      	bne.n	8009198 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 8009208:	4b0b      	ldr	r3, [pc, #44]	; (8009238 <xQueueSemaphoreTake+0x198>)
 800920a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	e7be      	b.n	8009198 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 800921a:	2d00      	cmp	r5, #0
 800921c:	d086      	beq.n	800912c <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 800921e:	f001 fb09 	bl	800a834 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009222:	4620      	mov	r0, r4
 8009224:	f7ff fbd9 	bl	80089da <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009228:	4601      	mov	r1, r0
 800922a:	68a0      	ldr	r0, [r4, #8]
 800922c:	f000 fe12 	bl	8009e54 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8009230:	f001 fb22 	bl	800a878 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8009234:	2500      	movs	r5, #0
 8009236:	e779      	b.n	800912c <xQueueSemaphoreTake+0x8c>
 8009238:	e000ed04 	.word	0xe000ed04

0800923c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800923c:	2300      	movs	r3, #0
 800923e:	2b07      	cmp	r3, #7
 8009240:	d80c      	bhi.n	800925c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009242:	4a07      	ldr	r2, [pc, #28]	; (8009260 <vQueueAddToRegistry+0x24>)
 8009244:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009248:	b10a      	cbz	r2, 800924e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800924a:	3301      	adds	r3, #1
 800924c:	e7f7      	b.n	800923e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800924e:	4a04      	ldr	r2, [pc, #16]	; (8009260 <vQueueAddToRegistry+0x24>)
 8009250:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009254:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009258:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800925a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	2000339c 	.word	0x2000339c

08009264 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009264:	b570      	push	{r4, r5, r6, lr}
 8009266:	4604      	mov	r4, r0
 8009268:	460d      	mov	r5, r1
 800926a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800926c:	f001 fae2 	bl	800a834 <vPortEnterCritical>
 8009270:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009274:	b25b      	sxtb	r3, r3
 8009276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800927a:	d00d      	beq.n	8009298 <vQueueWaitForMessageRestricted+0x34>
 800927c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009280:	b25b      	sxtb	r3, r3
 8009282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009286:	d00b      	beq.n	80092a0 <vQueueWaitForMessageRestricted+0x3c>
 8009288:	f001 faf6 	bl	800a878 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800928c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800928e:	b15b      	cbz	r3, 80092a8 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009290:	4620      	mov	r0, r4
 8009292:	f7ff fc14 	bl	8008abe <prvUnlockQueue>
	}
 8009296:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8009298:	2300      	movs	r3, #0
 800929a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800929e:	e7ed      	b.n	800927c <vQueueWaitForMessageRestricted+0x18>
 80092a0:	2300      	movs	r3, #0
 80092a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092a6:	e7ef      	b.n	8009288 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80092a8:	4632      	mov	r2, r6
 80092aa:	4629      	mov	r1, r5
 80092ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80092b0:	f000 fc52 	bl	8009b58 <vTaskPlaceOnEventListRestricted>
 80092b4:	e7ec      	b.n	8009290 <vQueueWaitForMessageRestricted+0x2c>
	...

080092b8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092b8:	4b08      	ldr	r3, [pc, #32]	; (80092dc <prvResetNextTaskUnblockTime+0x24>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	b13b      	cbz	r3, 80092d0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092c0:	4b06      	ldr	r3, [pc, #24]	; (80092dc <prvResetNextTaskUnblockTime+0x24>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <prvResetNextTaskUnblockTime+0x28>)
 80092cc:	601a      	str	r2, [r3, #0]
	}
}
 80092ce:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 80092d0:	4b03      	ldr	r3, [pc, #12]	; (80092e0 <prvResetNextTaskUnblockTime+0x28>)
 80092d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	20000850 	.word	0x20000850
 80092e0:	20000928 	.word	0x20000928

080092e4 <prvInitialiseNewTask>:
{
 80092e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e8:	4681      	mov	r9, r0
 80092ea:	460d      	mov	r5, r1
 80092ec:	4617      	mov	r7, r2
 80092ee:	469a      	mov	sl, r3
 80092f0:	9e08      	ldr	r6, [sp, #32]
 80092f2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80092f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092f8:	0092      	lsls	r2, r2, #2
 80092fa:	21a5      	movs	r1, #165	; 0xa5
 80092fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80092fe:	f002 fa12 	bl	800b726 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009302:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009304:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8009308:	3a01      	subs	r2, #1
 800930a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800930e:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8009312:	6467      	str	r7, [r4, #68]	; 0x44
	if( pcName != NULL )
 8009314:	b38d      	cbz	r5, 800937a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009316:	2300      	movs	r3, #0
 8009318:	2b0f      	cmp	r3, #15
 800931a:	d807      	bhi.n	800932c <prvInitialiseNewTask+0x48>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800931c:	5ce9      	ldrb	r1, [r5, r3]
 800931e:	18e2      	adds	r2, r4, r3
 8009320:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8009324:	5cea      	ldrb	r2, [r5, r3]
 8009326:	b10a      	cbz	r2, 800932c <prvInitialiseNewTask+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009328:	3301      	adds	r3, #1
 800932a:	e7f5      	b.n	8009318 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800932c:	2300      	movs	r3, #0
 800932e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009332:	2e06      	cmp	r6, #6
 8009334:	d900      	bls.n	8009338 <prvInitialiseNewTask+0x54>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009336:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8009338:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800933a:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800933c:	2500      	movs	r5, #0
 800933e:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009340:	1d20      	adds	r0, r4, #4
 8009342:	f7ff fb0d 	bl	8008960 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009346:	f104 0018 	add.w	r0, r4, #24
 800934a:	f7ff fb09 	bl	8008960 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800934e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009350:	f1c6 0607 	rsb	r6, r6, #7
 8009354:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009356:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009358:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
 800935a:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800935c:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009360:	4652      	mov	r2, sl
 8009362:	4649      	mov	r1, r9
 8009364:	4638      	mov	r0, r7
 8009366:	f001 fa37 	bl	800a7d8 <pxPortInitialiseStack>
 800936a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800936c:	f1b8 0f00 	cmp.w	r8, #0
 8009370:	d001      	beq.n	8009376 <prvInitialiseNewTask+0x92>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009372:	f8c8 4000 	str.w	r4, [r8]
}
 8009376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800937a:	2300      	movs	r3, #0
 800937c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8009380:	e7d7      	b.n	8009332 <prvInitialiseNewTask+0x4e>
	...

08009384 <prvInitialiseTaskLists>:
{
 8009384:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009386:	2400      	movs	r4, #0
 8009388:	e007      	b.n	800939a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800938a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800938e:	0093      	lsls	r3, r2, #2
 8009390:	480e      	ldr	r0, [pc, #56]	; (80093cc <prvInitialiseTaskLists+0x48>)
 8009392:	4418      	add	r0, r3
 8009394:	f7ff fad9 	bl	800894a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009398:	3401      	adds	r4, #1
 800939a:	2c06      	cmp	r4, #6
 800939c:	d9f5      	bls.n	800938a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800939e:	4d0c      	ldr	r5, [pc, #48]	; (80093d0 <prvInitialiseTaskLists+0x4c>)
 80093a0:	4628      	mov	r0, r5
 80093a2:	f7ff fad2 	bl	800894a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093a6:	4c0b      	ldr	r4, [pc, #44]	; (80093d4 <prvInitialiseTaskLists+0x50>)
 80093a8:	4620      	mov	r0, r4
 80093aa:	f7ff face 	bl	800894a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093ae:	480a      	ldr	r0, [pc, #40]	; (80093d8 <prvInitialiseTaskLists+0x54>)
 80093b0:	f7ff facb 	bl	800894a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80093b4:	4809      	ldr	r0, [pc, #36]	; (80093dc <prvInitialiseTaskLists+0x58>)
 80093b6:	f7ff fac8 	bl	800894a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80093ba:	4809      	ldr	r0, [pc, #36]	; (80093e0 <prvInitialiseTaskLists+0x5c>)
 80093bc:	f7ff fac5 	bl	800894a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80093c0:	4b08      	ldr	r3, [pc, #32]	; (80093e4 <prvInitialiseTaskLists+0x60>)
 80093c2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80093c4:	4b08      	ldr	r3, [pc, #32]	; (80093e8 <prvInitialiseTaskLists+0x64>)
 80093c6:	601c      	str	r4, [r3, #0]
}
 80093c8:	bd38      	pop	{r3, r4, r5, pc}
 80093ca:	bf00      	nop
 80093cc:	20000858 	.word	0x20000858
 80093d0:	20000900 	.word	0x20000900
 80093d4:	20000914 	.word	0x20000914
 80093d8:	20000930 	.word	0x20000930
 80093dc:	2000095c 	.word	0x2000095c
 80093e0:	20000948 	.word	0x20000948
 80093e4:	20000850 	.word	0x20000850
 80093e8:	20000854 	.word	0x20000854

080093ec <prvAddNewTaskToReadyList>:
{
 80093ec:	b510      	push	{r4, lr}
 80093ee:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80093f0:	f001 fa20 	bl	800a834 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80093f4:	4a21      	ldr	r2, [pc, #132]	; (800947c <prvAddNewTaskToReadyList+0x90>)
 80093f6:	6813      	ldr	r3, [r2, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093fc:	4b20      	ldr	r3, [pc, #128]	; (8009480 <prvAddNewTaskToReadyList+0x94>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	b15b      	cbz	r3, 800941a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8009402:	4b20      	ldr	r3, [pc, #128]	; (8009484 <prvAddNewTaskToReadyList+0x98>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	b96b      	cbnz	r3, 8009424 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009408:	4b1d      	ldr	r3, [pc, #116]	; (8009480 <prvAddNewTaskToReadyList+0x94>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800940e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009410:	429a      	cmp	r2, r3
 8009412:	d807      	bhi.n	8009424 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009414:	4b1a      	ldr	r3, [pc, #104]	; (8009480 <prvAddNewTaskToReadyList+0x94>)
 8009416:	601c      	str	r4, [r3, #0]
 8009418:	e004      	b.n	8009424 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800941a:	4b19      	ldr	r3, [pc, #100]	; (8009480 <prvAddNewTaskToReadyList+0x94>)
 800941c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800941e:	6813      	ldr	r3, [r2, #0]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d027      	beq.n	8009474 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 8009424:	4a18      	ldr	r2, [pc, #96]	; (8009488 <prvAddNewTaskToReadyList+0x9c>)
 8009426:	6813      	ldr	r3, [r2, #0]
 8009428:	3301      	adds	r3, #1
 800942a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800942c:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 800942e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009430:	2201      	movs	r2, #1
 8009432:	409a      	lsls	r2, r3
 8009434:	4915      	ldr	r1, [pc, #84]	; (800948c <prvAddNewTaskToReadyList+0xa0>)
 8009436:	6808      	ldr	r0, [r1, #0]
 8009438:	4302      	orrs	r2, r0
 800943a:	600a      	str	r2, [r1, #0]
 800943c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009440:	009a      	lsls	r2, r3, #2
 8009442:	1d21      	adds	r1, r4, #4
 8009444:	4812      	ldr	r0, [pc, #72]	; (8009490 <prvAddNewTaskToReadyList+0xa4>)
 8009446:	4410      	add	r0, r2
 8009448:	f7ff fa8d 	bl	8008966 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800944c:	f001 fa14 	bl	800a878 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009450:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <prvAddNewTaskToReadyList+0x98>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	b16b      	cbz	r3, 8009472 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009456:	4b0a      	ldr	r3, [pc, #40]	; (8009480 <prvAddNewTaskToReadyList+0x94>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800945e:	429a      	cmp	r2, r3
 8009460:	d207      	bcs.n	8009472 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 8009462:	4b0c      	ldr	r3, [pc, #48]	; (8009494 <prvAddNewTaskToReadyList+0xa8>)
 8009464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	f3bf 8f6f 	isb	sy
}
 8009472:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8009474:	f7ff ff86 	bl	8009384 <prvInitialiseTaskLists>
 8009478:	e7d4      	b.n	8009424 <prvAddNewTaskToReadyList+0x38>
 800947a:	bf00      	nop
 800947c:	200008e8 	.word	0x200008e8
 8009480:	2000084c 	.word	0x2000084c
 8009484:	20000944 	.word	0x20000944
 8009488:	200008f8 	.word	0x200008f8
 800948c:	200008fc 	.word	0x200008fc
 8009490:	20000858 	.word	0x20000858
 8009494:	e000ed04 	.word	0xe000ed04

08009498 <prvDeleteTCB>:
	{
 8009498:	b510      	push	{r4, lr}
 800949a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800949c:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 80094a0:	b933      	cbnz	r3, 80094b0 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 80094a2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80094a4:	f001 fc00 	bl	800aca8 <vPortFree>
				vPortFree( pxTCB );
 80094a8:	4620      	mov	r0, r4
 80094aa:	f001 fbfd 	bl	800aca8 <vPortFree>
	}
 80094ae:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d00a      	beq.n	80094ca <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d0fa      	beq.n	80094ae <prvDeleteTCB+0x16>
 80094b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	e7fe      	b.n	80094c8 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 80094ca:	f001 fbed 	bl	800aca8 <vPortFree>
 80094ce:	e7ee      	b.n	80094ae <prvDeleteTCB+0x16>

080094d0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094d0:	4b0f      	ldr	r3, [pc, #60]	; (8009510 <prvCheckTasksWaitingTermination+0x40>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	b1d3      	cbz	r3, 800950c <prvCheckTasksWaitingTermination+0x3c>
{
 80094d6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80094d8:	f001 f9ac 	bl	800a834 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094dc:	4b0d      	ldr	r3, [pc, #52]	; (8009514 <prvCheckTasksWaitingTermination+0x44>)
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094e2:	1d20      	adds	r0, r4, #4
 80094e4:	f7ff fa65 	bl	80089b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094e8:	4a0b      	ldr	r2, [pc, #44]	; (8009518 <prvCheckTasksWaitingTermination+0x48>)
 80094ea:	6813      	ldr	r3, [r2, #0]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094f0:	4a07      	ldr	r2, [pc, #28]	; (8009510 <prvCheckTasksWaitingTermination+0x40>)
 80094f2:	6813      	ldr	r3, [r2, #0]
 80094f4:	3b01      	subs	r3, #1
 80094f6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80094f8:	f001 f9be 	bl	800a878 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80094fc:	4620      	mov	r0, r4
 80094fe:	f7ff ffcb 	bl	8009498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009502:	4b03      	ldr	r3, [pc, #12]	; (8009510 <prvCheckTasksWaitingTermination+0x40>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1e6      	bne.n	80094d8 <prvCheckTasksWaitingTermination+0x8>
}
 800950a:	bd10      	pop	{r4, pc}
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	200008ec 	.word	0x200008ec
 8009514:	2000095c 	.word	0x2000095c
 8009518:	200008e8 	.word	0x200008e8

0800951c <prvIdleTask>:
{
 800951c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800951e:	f7ff ffd7 	bl	80094d0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009522:	4b06      	ldr	r3, [pc, #24]	; (800953c <prvIdleTask+0x20>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d9f9      	bls.n	800951e <prvIdleTask+0x2>
				taskYIELD();
 800952a:	4b05      	ldr	r3, [pc, #20]	; (8009540 <prvIdleTask+0x24>)
 800952c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	e7f0      	b.n	800951e <prvIdleTask+0x2>
 800953c:	20000858 	.word	0x20000858
 8009540:	e000ed04 	.word	0xe000ed04

08009544 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	4604      	mov	r4, r0
 8009548:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800954a:	4b1d      	ldr	r3, [pc, #116]	; (80095c0 <prvAddCurrentTaskToDelayedList+0x7c>)
 800954c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800954e:	4b1d      	ldr	r3, [pc, #116]	; (80095c4 <prvAddCurrentTaskToDelayedList+0x80>)
 8009550:	6818      	ldr	r0, [r3, #0]
 8009552:	3004      	adds	r0, #4
 8009554:	f7ff fa2d 	bl	80089b2 <uxListRemove>
 8009558:	b950      	cbnz	r0, 8009570 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800955a:	4b1a      	ldr	r3, [pc, #104]	; (80095c4 <prvAddCurrentTaskToDelayedList+0x80>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009560:	2301      	movs	r3, #1
 8009562:	fa03 f202 	lsl.w	r2, r3, r2
 8009566:	4918      	ldr	r1, [pc, #96]	; (80095c8 <prvAddCurrentTaskToDelayedList+0x84>)
 8009568:	680b      	ldr	r3, [r1, #0]
 800956a:	ea23 0302 	bic.w	r3, r3, r2
 800956e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009570:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8009574:	d013      	beq.n	800959e <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009576:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009578:	4b12      	ldr	r3, [pc, #72]	; (80095c4 <prvAddCurrentTaskToDelayedList+0x80>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800957e:	42a5      	cmp	r5, r4
 8009580:	d816      	bhi.n	80095b0 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009582:	4b12      	ldr	r3, [pc, #72]	; (80095cc <prvAddCurrentTaskToDelayedList+0x88>)
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <prvAddCurrentTaskToDelayedList+0x80>)
 8009588:	6819      	ldr	r1, [r3, #0]
 800958a:	3104      	adds	r1, #4
 800958c:	f7ff f9f7 	bl	800897e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8009590:	4b0f      	ldr	r3, [pc, #60]	; (80095d0 <prvAddCurrentTaskToDelayedList+0x8c>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	42a3      	cmp	r3, r4
 8009596:	d912      	bls.n	80095be <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8009598:	4b0d      	ldr	r3, [pc, #52]	; (80095d0 <prvAddCurrentTaskToDelayedList+0x8c>)
 800959a:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800959c:	e00f      	b.n	80095be <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800959e:	2e00      	cmp	r6, #0
 80095a0:	d0e9      	beq.n	8009576 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095a2:	4b08      	ldr	r3, [pc, #32]	; (80095c4 <prvAddCurrentTaskToDelayedList+0x80>)
 80095a4:	6819      	ldr	r1, [r3, #0]
 80095a6:	3104      	adds	r1, #4
 80095a8:	480a      	ldr	r0, [pc, #40]	; (80095d4 <prvAddCurrentTaskToDelayedList+0x90>)
 80095aa:	f7ff f9dc 	bl	8008966 <vListInsertEnd>
 80095ae:	e006      	b.n	80095be <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095b0:	4b09      	ldr	r3, [pc, #36]	; (80095d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80095b2:	6818      	ldr	r0, [r3, #0]
 80095b4:	4b03      	ldr	r3, [pc, #12]	; (80095c4 <prvAddCurrentTaskToDelayedList+0x80>)
 80095b6:	6819      	ldr	r1, [r3, #0]
 80095b8:	3104      	adds	r1, #4
 80095ba:	f7ff f9e0 	bl	800897e <vListInsert>
}
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	20000970 	.word	0x20000970
 80095c4:	2000084c 	.word	0x2000084c
 80095c8:	200008fc 	.word	0x200008fc
 80095cc:	20000850 	.word	0x20000850
 80095d0:	20000928 	.word	0x20000928
 80095d4:	20000948 	.word	0x20000948
 80095d8:	20000854 	.word	0x20000854

080095dc <xTaskCreateStatic>:
	{
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80095e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80095e4:	b945      	cbnz	r5, 80095f8 <xTaskCreateStatic+0x1c>
 80095e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	e7fe      	b.n	80095f6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80095f8:	b944      	cbnz	r4, 800960c <xTaskCreateStatic+0x30>
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	e7fe      	b.n	800960a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800960c:	2664      	movs	r6, #100	; 0x64
 800960e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009610:	9e04      	ldr	r6, [sp, #16]
 8009612:	2e64      	cmp	r6, #100	; 0x64
 8009614:	d008      	beq.n	8009628 <xTaskCreateStatic+0x4c>
 8009616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	e7fe      	b.n	8009626 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009628:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800962a:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800962c:	2502      	movs	r5, #2
 800962e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009632:	2500      	movs	r5, #0
 8009634:	9503      	str	r5, [sp, #12]
 8009636:	9402      	str	r4, [sp, #8]
 8009638:	ad05      	add	r5, sp, #20
 800963a:	9501      	str	r5, [sp, #4]
 800963c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800963e:	9500      	str	r5, [sp, #0]
 8009640:	f7ff fe50 	bl	80092e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009644:	4620      	mov	r0, r4
 8009646:	f7ff fed1 	bl	80093ec <prvAddNewTaskToReadyList>
	}
 800964a:	9805      	ldr	r0, [sp, #20]
 800964c:	b006      	add	sp, #24
 800964e:	bd70      	pop	{r4, r5, r6, pc}

08009650 <xTaskCreate>:
	{
 8009650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009654:	b085      	sub	sp, #20
 8009656:	4607      	mov	r7, r0
 8009658:	4688      	mov	r8, r1
 800965a:	4615      	mov	r5, r2
 800965c:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800965e:	0090      	lsls	r0, r2, #2
 8009660:	f001 fa9e 	bl	800aba0 <pvPortMalloc>
			if( pxStack != NULL )
 8009664:	b308      	cbz	r0, 80096aa <xTaskCreate+0x5a>
 8009666:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009668:	2064      	movs	r0, #100	; 0x64
 800966a:	f001 fa99 	bl	800aba0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800966e:	4604      	mov	r4, r0
 8009670:	b1b8      	cbz	r0, 80096a2 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8009672:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8009674:	b1e4      	cbz	r4, 80096b0 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009676:	2300      	movs	r3, #0
 8009678:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800967c:	9303      	str	r3, [sp, #12]
 800967e:	9402      	str	r4, [sp, #8]
 8009680:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009682:	9301      	str	r3, [sp, #4]
 8009684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	464b      	mov	r3, r9
 800968a:	462a      	mov	r2, r5
 800968c:	4641      	mov	r1, r8
 800968e:	4638      	mov	r0, r7
 8009690:	f7ff fe28 	bl	80092e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009694:	4620      	mov	r0, r4
 8009696:	f7ff fea9 	bl	80093ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800969a:	2001      	movs	r0, #1
	}
 800969c:	b005      	add	sp, #20
 800969e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80096a2:	4630      	mov	r0, r6
 80096a4:	f001 fb00 	bl	800aca8 <vPortFree>
 80096a8:	e7e4      	b.n	8009674 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096ae:	e7f5      	b.n	800969c <xTaskCreate+0x4c>
 80096b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80096b4:	e7f2      	b.n	800969c <xTaskCreate+0x4c>
	...

080096b8 <vTaskStartScheduler>:
{
 80096b8:	b510      	push	{r4, lr}
 80096ba:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096bc:	2400      	movs	r4, #0
 80096be:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096c0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096c2:	aa07      	add	r2, sp, #28
 80096c4:	a906      	add	r1, sp, #24
 80096c6:	a805      	add	r0, sp, #20
 80096c8:	f7fa f990 	bl	80039ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096cc:	9b05      	ldr	r3, [sp, #20]
 80096ce:	9302      	str	r3, [sp, #8]
 80096d0:	9b06      	ldr	r3, [sp, #24]
 80096d2:	9301      	str	r3, [sp, #4]
 80096d4:	9400      	str	r4, [sp, #0]
 80096d6:	4623      	mov	r3, r4
 80096d8:	9a07      	ldr	r2, [sp, #28]
 80096da:	4918      	ldr	r1, [pc, #96]	; (800973c <vTaskStartScheduler+0x84>)
 80096dc:	4818      	ldr	r0, [pc, #96]	; (8009740 <vTaskStartScheduler+0x88>)
 80096de:	f7ff ff7d 	bl	80095dc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80096e2:	b140      	cbz	r0, 80096f6 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 80096e4:	f000 fe40 	bl	800a368 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80096e8:	2801      	cmp	r0, #1
 80096ea:	d006      	beq.n	80096fa <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80096f0:	d01a      	beq.n	8009728 <vTaskStartScheduler+0x70>
}
 80096f2:	b008      	add	sp, #32
 80096f4:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80096f6:	2000      	movs	r0, #0
 80096f8:	e7f6      	b.n	80096e8 <vTaskStartScheduler+0x30>
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800970a:	4b0e      	ldr	r3, [pc, #56]	; (8009744 <vTaskStartScheduler+0x8c>)
 800970c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009710:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009712:	4b0d      	ldr	r3, [pc, #52]	; (8009748 <vTaskStartScheduler+0x90>)
 8009714:	2201      	movs	r2, #1
 8009716:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009718:	2300      	movs	r3, #0
 800971a:	4a0c      	ldr	r2, [pc, #48]	; (800974c <vTaskStartScheduler+0x94>)
 800971c:	6013      	str	r3, [r2, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800971e:	4a0c      	ldr	r2, [pc, #48]	; (8009750 <vTaskStartScheduler+0x98>)
 8009720:	6013      	str	r3, [r2, #0]
		if( xPortStartScheduler() != pdFALSE )
 8009722:	f001 f929 	bl	800a978 <xPortStartScheduler>
 8009726:	e7e4      	b.n	80096f2 <vTaskStartScheduler+0x3a>
 8009728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	e7fe      	b.n	8009738 <vTaskStartScheduler+0x80>
 800973a:	bf00      	nop
 800973c:	0800c888 	.word	0x0800c888
 8009740:	0800951d 	.word	0x0800951d
 8009744:	20000928 	.word	0x20000928
 8009748:	20000944 	.word	0x20000944
 800974c:	20000970 	.word	0x20000970
 8009750:	20003308 	.word	0x20003308

08009754 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009754:	4a02      	ldr	r2, [pc, #8]	; (8009760 <vTaskSuspendAll+0xc>)
 8009756:	6813      	ldr	r3, [r2, #0]
 8009758:	3301      	adds	r3, #1
 800975a:	6013      	str	r3, [r2, #0]
}
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	200008f4 	.word	0x200008f4

08009764 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009764:	4b01      	ldr	r3, [pc, #4]	; (800976c <xTaskGetTickCount+0x8>)
 8009766:	6818      	ldr	r0, [r3, #0]
}
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	20000970 	.word	0x20000970

08009770 <xTaskIncrementTick>:
{
 8009770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009772:	4b3a      	ldr	r3, [pc, #232]	; (800985c <xTaskIncrementTick+0xec>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d164      	bne.n	8009844 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800977a:	4b39      	ldr	r3, [pc, #228]	; (8009860 <xTaskIncrementTick+0xf0>)
 800977c:	681d      	ldr	r5, [r3, #0]
 800977e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009780:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009782:	b9c5      	cbnz	r5, 80097b6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009784:	4b37      	ldr	r3, [pc, #220]	; (8009864 <xTaskIncrementTick+0xf4>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	b143      	cbz	r3, 800979e <xTaskIncrementTick+0x2e>
 800978c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	e7fe      	b.n	800979c <xTaskIncrementTick+0x2c>
 800979e:	4a31      	ldr	r2, [pc, #196]	; (8009864 <xTaskIncrementTick+0xf4>)
 80097a0:	6811      	ldr	r1, [r2, #0]
 80097a2:	4b31      	ldr	r3, [pc, #196]	; (8009868 <xTaskIncrementTick+0xf8>)
 80097a4:	6818      	ldr	r0, [r3, #0]
 80097a6:	6010      	str	r0, [r2, #0]
 80097a8:	6019      	str	r1, [r3, #0]
 80097aa:	4a30      	ldr	r2, [pc, #192]	; (800986c <xTaskIncrementTick+0xfc>)
 80097ac:	6813      	ldr	r3, [r2, #0]
 80097ae:	3301      	adds	r3, #1
 80097b0:	6013      	str	r3, [r2, #0]
 80097b2:	f7ff fd81 	bl	80092b8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097b6:	4b2e      	ldr	r3, [pc, #184]	; (8009870 <xTaskIncrementTick+0x100>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	42ab      	cmp	r3, r5
 80097bc:	d938      	bls.n	8009830 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 80097be:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80097c0:	4b2c      	ldr	r3, [pc, #176]	; (8009874 <xTaskIncrementTick+0x104>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80097ca:	009a      	lsls	r2, r3, #2
 80097cc:	4b2a      	ldr	r3, [pc, #168]	; (8009878 <xTaskIncrementTick+0x108>)
 80097ce:	589b      	ldr	r3, [r3, r2]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d93c      	bls.n	800984e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 80097d4:	2401      	movs	r4, #1
 80097d6:	e03a      	b.n	800984e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 80097d8:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097da:	4b22      	ldr	r3, [pc, #136]	; (8009864 <xTaskIncrementTick+0xf4>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	b343      	cbz	r3, 8009834 <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097e2:	4b20      	ldr	r3, [pc, #128]	; (8009864 <xTaskIncrementTick+0xf4>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097ea:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80097ec:	429d      	cmp	r5, r3
 80097ee:	d326      	bcc.n	800983e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097f0:	1d37      	adds	r7, r6, #4
 80097f2:	4638      	mov	r0, r7
 80097f4:	f7ff f8dd 	bl	80089b2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097f8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80097fa:	b11b      	cbz	r3, 8009804 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097fc:	f106 0018 	add.w	r0, r6, #24
 8009800:	f7ff f8d7 	bl	80089b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009804:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009806:	2201      	movs	r2, #1
 8009808:	409a      	lsls	r2, r3
 800980a:	491c      	ldr	r1, [pc, #112]	; (800987c <xTaskIncrementTick+0x10c>)
 800980c:	6808      	ldr	r0, [r1, #0]
 800980e:	4302      	orrs	r2, r0
 8009810:	600a      	str	r2, [r1, #0]
 8009812:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009816:	009a      	lsls	r2, r3, #2
 8009818:	4639      	mov	r1, r7
 800981a:	4817      	ldr	r0, [pc, #92]	; (8009878 <xTaskIncrementTick+0x108>)
 800981c:	4410      	add	r0, r2
 800981e:	f7ff f8a2 	bl	8008966 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009822:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8009824:	4b13      	ldr	r3, [pc, #76]	; (8009874 <xTaskIncrementTick+0x104>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982a:	429a      	cmp	r2, r3
 800982c:	d2d4      	bcs.n	80097d8 <xTaskIncrementTick+0x68>
 800982e:	e7d4      	b.n	80097da <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8009830:	2400      	movs	r4, #0
 8009832:	e7d2      	b.n	80097da <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009834:	4b0e      	ldr	r3, [pc, #56]	; (8009870 <xTaskIncrementTick+0x100>)
 8009836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800983a:	601a      	str	r2, [r3, #0]
					break;
 800983c:	e7c0      	b.n	80097c0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800983e:	4a0c      	ldr	r2, [pc, #48]	; (8009870 <xTaskIncrementTick+0x100>)
 8009840:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009842:	e7bd      	b.n	80097c0 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8009844:	4a0e      	ldr	r2, [pc, #56]	; (8009880 <xTaskIncrementTick+0x110>)
 8009846:	6813      	ldr	r3, [r2, #0]
 8009848:	3301      	adds	r3, #1
 800984a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800984c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800984e:	4b0d      	ldr	r3, [pc, #52]	; (8009884 <xTaskIncrementTick+0x114>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	b103      	cbz	r3, 8009856 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8009854:	2401      	movs	r4, #1
}
 8009856:	4620      	mov	r0, r4
 8009858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800985a:	bf00      	nop
 800985c:	200008f4 	.word	0x200008f4
 8009860:	20000970 	.word	0x20000970
 8009864:	20000850 	.word	0x20000850
 8009868:	20000854 	.word	0x20000854
 800986c:	2000092c 	.word	0x2000092c
 8009870:	20000928 	.word	0x20000928
 8009874:	2000084c 	.word	0x2000084c
 8009878:	20000858 	.word	0x20000858
 800987c:	200008fc 	.word	0x200008fc
 8009880:	200008f0 	.word	0x200008f0
 8009884:	20000974 	.word	0x20000974

08009888 <xTaskResumeAll>:
{
 8009888:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800988a:	4b33      	ldr	r3, [pc, #204]	; (8009958 <xTaskResumeAll+0xd0>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	b943      	cbnz	r3, 80098a2 <xTaskResumeAll+0x1a>
 8009890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	e7fe      	b.n	80098a0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80098a2:	f000 ffc7 	bl	800a834 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80098a6:	4b2c      	ldr	r3, [pc, #176]	; (8009958 <xTaskResumeAll+0xd0>)
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	3a01      	subs	r2, #1
 80098ac:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d14d      	bne.n	8009950 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80098b4:	4b29      	ldr	r3, [pc, #164]	; (800995c <xTaskResumeAll+0xd4>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	b923      	cbnz	r3, 80098c4 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 80098ba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80098bc:	f000 ffdc 	bl	800a878 <vPortExitCritical>
}
 80098c0:	4620      	mov	r0, r4
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 80098c4:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098c6:	4b26      	ldr	r3, [pc, #152]	; (8009960 <xTaskResumeAll+0xd8>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	b31b      	cbz	r3, 8009914 <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098cc:	4b24      	ldr	r3, [pc, #144]	; (8009960 <xTaskResumeAll+0xd8>)
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098d2:	f104 0018 	add.w	r0, r4, #24
 80098d6:	f7ff f86c 	bl	80089b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098da:	1d25      	adds	r5, r4, #4
 80098dc:	4628      	mov	r0, r5
 80098de:	f7ff f868 	bl	80089b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80098e4:	2201      	movs	r2, #1
 80098e6:	409a      	lsls	r2, r3
 80098e8:	491e      	ldr	r1, [pc, #120]	; (8009964 <xTaskResumeAll+0xdc>)
 80098ea:	6808      	ldr	r0, [r1, #0]
 80098ec:	4302      	orrs	r2, r0
 80098ee:	600a      	str	r2, [r1, #0]
 80098f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80098f4:	009a      	lsls	r2, r3, #2
 80098f6:	4629      	mov	r1, r5
 80098f8:	481b      	ldr	r0, [pc, #108]	; (8009968 <xTaskResumeAll+0xe0>)
 80098fa:	4410      	add	r0, r2
 80098fc:	f7ff f833 	bl	8008966 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009900:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009902:	4b1a      	ldr	r3, [pc, #104]	; (800996c <xTaskResumeAll+0xe4>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009908:	429a      	cmp	r2, r3
 800990a:	d3dc      	bcc.n	80098c6 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 800990c:	4b18      	ldr	r3, [pc, #96]	; (8009970 <xTaskResumeAll+0xe8>)
 800990e:	2201      	movs	r2, #1
 8009910:	601a      	str	r2, [r3, #0]
 8009912:	e7d8      	b.n	80098c6 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8009914:	b10c      	cbz	r4, 800991a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8009916:	f7ff fccf 	bl	80092b8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800991a:	4b16      	ldr	r3, [pc, #88]	; (8009974 <xTaskResumeAll+0xec>)
 800991c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800991e:	b154      	cbz	r4, 8009936 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8009920:	f7ff ff26 	bl	8009770 <xTaskIncrementTick>
 8009924:	b110      	cbz	r0, 800992c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8009926:	4b12      	ldr	r3, [pc, #72]	; (8009970 <xTaskResumeAll+0xe8>)
 8009928:	2201      	movs	r2, #1
 800992a:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800992c:	3c01      	subs	r4, #1
 800992e:	d1f7      	bne.n	8009920 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8009930:	4b10      	ldr	r3, [pc, #64]	; (8009974 <xTaskResumeAll+0xec>)
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8009936:	4b0e      	ldr	r3, [pc, #56]	; (8009970 <xTaskResumeAll+0xe8>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	b15b      	cbz	r3, 8009954 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 800993c:	4b0e      	ldr	r3, [pc, #56]	; (8009978 <xTaskResumeAll+0xf0>)
 800993e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009942:	601a      	str	r2, [r3, #0]
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800994c:	2401      	movs	r4, #1
 800994e:	e7b5      	b.n	80098bc <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8009950:	2400      	movs	r4, #0
 8009952:	e7b3      	b.n	80098bc <xTaskResumeAll+0x34>
 8009954:	2400      	movs	r4, #0
 8009956:	e7b1      	b.n	80098bc <xTaskResumeAll+0x34>
 8009958:	200008f4 	.word	0x200008f4
 800995c:	200008e8 	.word	0x200008e8
 8009960:	20000930 	.word	0x20000930
 8009964:	200008fc 	.word	0x200008fc
 8009968:	20000858 	.word	0x20000858
 800996c:	2000084c 	.word	0x2000084c
 8009970:	20000974 	.word	0x20000974
 8009974:	200008f0 	.word	0x200008f0
 8009978:	e000ed04 	.word	0xe000ed04

0800997c <vTaskDelayUntil>:
	{
 800997c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 800997e:	b150      	cbz	r0, 8009996 <vTaskDelayUntil+0x1a>
 8009980:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 8009982:	b989      	cbnz	r1, 80099a8 <vTaskDelayUntil+0x2c>
 8009984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	e7fe      	b.n	8009994 <vTaskDelayUntil+0x18>
 8009996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	e7fe      	b.n	80099a6 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
 80099a8:	4b1a      	ldr	r3, [pc, #104]	; (8009a14 <vTaskDelayUntil+0x98>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	b143      	cbz	r3, 80099c0 <vTaskDelayUntil+0x44>
 80099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	e7fe      	b.n	80099be <vTaskDelayUntil+0x42>
 80099c0:	460c      	mov	r4, r1
		vTaskSuspendAll();
 80099c2:	f7ff fec7 	bl	8009754 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 80099c6:	4b14      	ldr	r3, [pc, #80]	; (8009a18 <vTaskDelayUntil+0x9c>)
 80099c8:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80099ca:	682a      	ldr	r2, [r5, #0]
 80099cc:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
 80099ce:	4282      	cmp	r2, r0
 80099d0:	d918      	bls.n	8009a04 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80099d2:	42a2      	cmp	r2, r4
 80099d4:	d80c      	bhi.n	80099f0 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
 80099d6:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
 80099d8:	f7ff ff56 	bl	8009888 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80099dc:	b938      	cbnz	r0, 80099ee <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
 80099de:	4b0f      	ldr	r3, [pc, #60]	; (8009a1c <vTaskDelayUntil+0xa0>)
 80099e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099e4:	601a      	str	r2, [r3, #0]
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	f3bf 8f6f 	isb	sy
	}
 80099ee:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80099f0:	42a0      	cmp	r0, r4
 80099f2:	d301      	bcc.n	80099f8 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 80099f4:	602c      	str	r4, [r5, #0]
 80099f6:	e7ef      	b.n	80099d8 <vTaskDelayUntil+0x5c>
 80099f8:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80099fa:	2100      	movs	r1, #0
 80099fc:	1a20      	subs	r0, r4, r0
 80099fe:	f7ff fda1 	bl	8009544 <prvAddCurrentTaskToDelayedList>
 8009a02:	e7e9      	b.n	80099d8 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009a04:	42a2      	cmp	r2, r4
 8009a06:	d801      	bhi.n	8009a0c <vTaskDelayUntil+0x90>
 8009a08:	42a0      	cmp	r0, r4
 8009a0a:	d201      	bcs.n	8009a10 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
 8009a0c:	602c      	str	r4, [r5, #0]
 8009a0e:	e7f4      	b.n	80099fa <vTaskDelayUntil+0x7e>
 8009a10:	602c      	str	r4, [r5, #0]
 8009a12:	e7e1      	b.n	80099d8 <vTaskDelayUntil+0x5c>
 8009a14:	200008f4 	.word	0x200008f4
 8009a18:	20000970 	.word	0x20000970
 8009a1c:	e000ed04 	.word	0xe000ed04

08009a20 <vTaskDelay>:
	{
 8009a20:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a22:	b1a8      	cbz	r0, 8009a50 <vTaskDelay+0x30>
 8009a24:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8009a26:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <vTaskDelay+0x44>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	b143      	cbz	r3, 8009a3e <vTaskDelay+0x1e>
 8009a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a30:	f383 8811 	msr	BASEPRI, r3
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	e7fe      	b.n	8009a3c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8009a3e:	f7ff fe89 	bl	8009754 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a42:	2100      	movs	r1, #0
 8009a44:	4620      	mov	r0, r4
 8009a46:	f7ff fd7d 	bl	8009544 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009a4a:	f7ff ff1d 	bl	8009888 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009a4e:	b938      	cbnz	r0, 8009a60 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8009a50:	4b05      	ldr	r3, [pc, #20]	; (8009a68 <vTaskDelay+0x48>)
 8009a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a56:	601a      	str	r2, [r3, #0]
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	f3bf 8f6f 	isb	sy
	}
 8009a60:	bd10      	pop	{r4, pc}
 8009a62:	bf00      	nop
 8009a64:	200008f4 	.word	0x200008f4
 8009a68:	e000ed04 	.word	0xe000ed04

08009a6c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a6c:	4b27      	ldr	r3, [pc, #156]	; (8009b0c <vTaskSwitchContext+0xa0>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	b11b      	cbz	r3, 8009a7a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009a72:	4b27      	ldr	r3, [pc, #156]	; (8009b10 <vTaskSwitchContext+0xa4>)
 8009a74:	2201      	movs	r2, #1
 8009a76:	601a      	str	r2, [r3, #0]
 8009a78:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8009a7a:	4b25      	ldr	r3, [pc, #148]	; (8009b10 <vTaskSwitchContext+0xa4>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009a80:	4b24      	ldr	r3, [pc, #144]	; (8009b14 <vTaskSwitchContext+0xa8>)
 8009a82:	681a      	ldr	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009a84:	4b24      	ldr	r3, [pc, #144]	; (8009b18 <vTaskSwitchContext+0xac>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d905      	bls.n	8009a98 <vTaskSwitchContext+0x2c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009a8c:	4923      	ldr	r1, [pc, #140]	; (8009b1c <vTaskSwitchContext+0xb0>)
 8009a8e:	6808      	ldr	r0, [r1, #0]
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8009a94:	440b      	add	r3, r1
 8009a96:	6583      	str	r3, [r0, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009a98:	4b1f      	ldr	r3, [pc, #124]	; (8009b18 <vTaskSwitchContext+0xac>)
 8009a9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a9c:	4b20      	ldr	r3, [pc, #128]	; (8009b20 <vTaskSwitchContext+0xb4>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009aa0:	fab3 f383 	clz	r3, r3
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	f1c3 031f 	rsb	r3, r3, #31
 8009aaa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009aae:	008a      	lsls	r2, r1, #2
 8009ab0:	491c      	ldr	r1, [pc, #112]	; (8009b24 <vTaskSwitchContext+0xb8>)
 8009ab2:	588a      	ldr	r2, [r1, r2]
 8009ab4:	b942      	cbnz	r2, 8009ac8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	e7fe      	b.n	8009ac6 <vTaskSwitchContext+0x5a>
{
 8009ac8:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aca:	4816      	ldr	r0, [pc, #88]	; (8009b24 <vTaskSwitchContext+0xb8>)
 8009acc:	009a      	lsls	r2, r3, #2
 8009ace:	18d4      	adds	r4, r2, r3
 8009ad0:	00a1      	lsls	r1, r4, #2
 8009ad2:	4401      	add	r1, r0
 8009ad4:	684c      	ldr	r4, [r1, #4]
 8009ad6:	6864      	ldr	r4, [r4, #4]
 8009ad8:	604c      	str	r4, [r1, #4]
 8009ada:	441a      	add	r2, r3
 8009adc:	0091      	lsls	r1, r2, #2
 8009ade:	3108      	adds	r1, #8
 8009ae0:	4408      	add	r0, r1
 8009ae2:	4284      	cmp	r4, r0
 8009ae4:	d00b      	beq.n	8009afe <vTaskSwitchContext+0x92>
 8009ae6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009aea:	009a      	lsls	r2, r3, #2
 8009aec:	4b0d      	ldr	r3, [pc, #52]	; (8009b24 <vTaskSwitchContext+0xb8>)
 8009aee:	4413      	add	r3, r2
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	68da      	ldr	r2, [r3, #12]
 8009af4:	4b09      	ldr	r3, [pc, #36]	; (8009b1c <vTaskSwitchContext+0xb0>)
 8009af6:	601a      	str	r2, [r3, #0]
}
 8009af8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009afc:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009afe:	6861      	ldr	r1, [r4, #4]
 8009b00:	4808      	ldr	r0, [pc, #32]	; (8009b24 <vTaskSwitchContext+0xb8>)
 8009b02:	2214      	movs	r2, #20
 8009b04:	fb02 0203 	mla	r2, r2, r3, r0
 8009b08:	6051      	str	r1, [r2, #4]
 8009b0a:	e7ec      	b.n	8009ae6 <vTaskSwitchContext+0x7a>
 8009b0c:	200008f4 	.word	0x200008f4
 8009b10:	20000974 	.word	0x20000974
 8009b14:	20003308 	.word	0x20003308
 8009b18:	200008e4 	.word	0x200008e4
 8009b1c:	2000084c 	.word	0x2000084c
 8009b20:	200008fc 	.word	0x200008fc
 8009b24:	20000858 	.word	0x20000858

08009b28 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009b28:	b940      	cbnz	r0, 8009b3c <vTaskPlaceOnEventList+0x14>
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	e7fe      	b.n	8009b3a <vTaskPlaceOnEventList+0x12>
{
 8009b3c:	b510      	push	{r4, lr}
 8009b3e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b40:	4b04      	ldr	r3, [pc, #16]	; (8009b54 <vTaskPlaceOnEventList+0x2c>)
 8009b42:	6819      	ldr	r1, [r3, #0]
 8009b44:	3118      	adds	r1, #24
 8009b46:	f7fe ff1a 	bl	800897e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f7ff fcf9 	bl	8009544 <prvAddCurrentTaskToDelayedList>
}
 8009b52:	bd10      	pop	{r4, pc}
 8009b54:	2000084c 	.word	0x2000084c

08009b58 <vTaskPlaceOnEventListRestricted>:
	{
 8009b58:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8009b5a:	b940      	cbnz	r0, 8009b6e <vTaskPlaceOnEventListRestricted+0x16>
 8009b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	e7fe      	b.n	8009b6c <vTaskPlaceOnEventListRestricted+0x14>
 8009b6e:	460c      	mov	r4, r1
 8009b70:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b72:	4a06      	ldr	r2, [pc, #24]	; (8009b8c <vTaskPlaceOnEventListRestricted+0x34>)
 8009b74:	6811      	ldr	r1, [r2, #0]
 8009b76:	3118      	adds	r1, #24
 8009b78:	f7fe fef5 	bl	8008966 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8009b7c:	b10d      	cbz	r5, 8009b82 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 8009b7e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b82:	4629      	mov	r1, r5
 8009b84:	4620      	mov	r0, r4
 8009b86:	f7ff fcdd 	bl	8009544 <prvAddCurrentTaskToDelayedList>
	}
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	2000084c 	.word	0x2000084c

08009b90 <xTaskRemoveFromEventList>:
{
 8009b90:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b92:	68c3      	ldr	r3, [r0, #12]
 8009b94:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009b96:	b944      	cbnz	r4, 8009baa <xTaskRemoveFromEventList+0x1a>
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	e7fe      	b.n	8009ba8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009baa:	f104 0518 	add.w	r5, r4, #24
 8009bae:	4628      	mov	r0, r5
 8009bb0:	f7fe feff 	bl	80089b2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bb4:	4b13      	ldr	r3, [pc, #76]	; (8009c04 <xTaskRemoveFromEventList+0x74>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	b9e3      	cbnz	r3, 8009bf4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bba:	1d25      	adds	r5, r4, #4
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	f7fe fef8 	bl	80089b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	409a      	lsls	r2, r3
 8009bc8:	490f      	ldr	r1, [pc, #60]	; (8009c08 <xTaskRemoveFromEventList+0x78>)
 8009bca:	6808      	ldr	r0, [r1, #0]
 8009bcc:	4302      	orrs	r2, r0
 8009bce:	600a      	str	r2, [r1, #0]
 8009bd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009bd4:	009a      	lsls	r2, r3, #2
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	480c      	ldr	r0, [pc, #48]	; (8009c0c <xTaskRemoveFromEventList+0x7c>)
 8009bda:	4410      	add	r0, r2
 8009bdc:	f7fe fec3 	bl	8008966 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009be0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009be2:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <xTaskRemoveFromEventList+0x80>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d908      	bls.n	8009bfe <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8009bec:	2001      	movs	r0, #1
 8009bee:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <xTaskRemoveFromEventList+0x84>)
 8009bf0:	6018      	str	r0, [r3, #0]
}
 8009bf2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	4808      	ldr	r0, [pc, #32]	; (8009c18 <xTaskRemoveFromEventList+0x88>)
 8009bf8:	f7fe feb5 	bl	8008966 <vListInsertEnd>
 8009bfc:	e7f0      	b.n	8009be0 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8009bfe:	2000      	movs	r0, #0
	return xReturn;
 8009c00:	e7f7      	b.n	8009bf2 <xTaskRemoveFromEventList+0x62>
 8009c02:	bf00      	nop
 8009c04:	200008f4 	.word	0x200008f4
 8009c08:	200008fc 	.word	0x200008fc
 8009c0c:	20000858 	.word	0x20000858
 8009c10:	2000084c 	.word	0x2000084c
 8009c14:	20000974 	.word	0x20000974
 8009c18:	20000930 	.word	0x20000930

08009c1c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c1c:	4b03      	ldr	r3, [pc, #12]	; (8009c2c <vTaskInternalSetTimeOutState+0x10>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c22:	4b03      	ldr	r3, [pc, #12]	; (8009c30 <vTaskInternalSetTimeOutState+0x14>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6043      	str	r3, [r0, #4]
}
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	2000092c 	.word	0x2000092c
 8009c30:	20000970 	.word	0x20000970

08009c34 <xTaskCheckForTimeOut>:
{
 8009c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8009c36:	b150      	cbz	r0, 8009c4e <xTaskCheckForTimeOut+0x1a>
 8009c38:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8009c3a:	b989      	cbnz	r1, 8009c60 <xTaskCheckForTimeOut+0x2c>
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	e7fe      	b.n	8009c4c <xTaskCheckForTimeOut+0x18>
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	e7fe      	b.n	8009c5e <xTaskCheckForTimeOut+0x2a>
 8009c60:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8009c62:	f000 fde7 	bl	800a834 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009c66:	4b11      	ldr	r3, [pc, #68]	; (8009cac <xTaskCheckForTimeOut+0x78>)
 8009c68:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c6a:	6868      	ldr	r0, [r5, #4]
 8009c6c:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c74:	d016      	beq.n	8009ca4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c76:	682f      	ldr	r7, [r5, #0]
 8009c78:	4e0d      	ldr	r6, [pc, #52]	; (8009cb0 <xTaskCheckForTimeOut+0x7c>)
 8009c7a:	6836      	ldr	r6, [r6, #0]
 8009c7c:	42b7      	cmp	r7, r6
 8009c7e:	d001      	beq.n	8009c84 <xTaskCheckForTimeOut+0x50>
 8009c80:	4288      	cmp	r0, r1
 8009c82:	d911      	bls.n	8009ca8 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d803      	bhi.n	8009c90 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009c8c:	2401      	movs	r4, #1
 8009c8e:	e005      	b.n	8009c9c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8009c90:	1a9b      	subs	r3, r3, r2
 8009c92:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c94:	4628      	mov	r0, r5
 8009c96:	f7ff ffc1 	bl	8009c1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c9a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009c9c:	f000 fdec 	bl	800a878 <vPortExitCritical>
}
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8009ca4:	2400      	movs	r4, #0
 8009ca6:	e7f9      	b.n	8009c9c <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8009ca8:	2401      	movs	r4, #1
 8009caa:	e7f7      	b.n	8009c9c <xTaskCheckForTimeOut+0x68>
 8009cac:	20000970 	.word	0x20000970
 8009cb0:	2000092c 	.word	0x2000092c

08009cb4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009cb4:	4b01      	ldr	r3, [pc, #4]	; (8009cbc <vTaskMissedYield+0x8>)
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	601a      	str	r2, [r3, #0]
}
 8009cba:	4770      	bx	lr
 8009cbc:	20000974 	.word	0x20000974

08009cc0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8009cc0:	4b01      	ldr	r3, [pc, #4]	; (8009cc8 <xTaskGetCurrentTaskHandle+0x8>)
 8009cc2:	6818      	ldr	r0, [r3, #0]
	}
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	2000084c 	.word	0x2000084c

08009ccc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009ccc:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <xTaskGetSchedulerState+0x18>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	b133      	cbz	r3, 8009ce0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cd2:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <xTaskGetSchedulerState+0x1c>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	b10b      	cbz	r3, 8009cdc <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8009cd8:	2000      	movs	r0, #0
	}
 8009cda:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8009cdc:	2002      	movs	r0, #2
 8009cde:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ce0:	2001      	movs	r0, #1
 8009ce2:	4770      	bx	lr
 8009ce4:	20000944 	.word	0x20000944
 8009ce8:	200008f4 	.word	0x200008f4

08009cec <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d050      	beq.n	8009d92 <xTaskPriorityInherit+0xa6>
	{
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009cf4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009cf6:	4928      	ldr	r1, [pc, #160]	; (8009d98 <xTaskPriorityInherit+0xac>)
 8009cf8:	6809      	ldr	r1, [r1, #0]
 8009cfa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009cfc:	428a      	cmp	r2, r1
 8009cfe:	d23e      	bcs.n	8009d7e <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d00:	6981      	ldr	r1, [r0, #24]
 8009d02:	2900      	cmp	r1, #0
 8009d04:	db05      	blt.n	8009d12 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d06:	4924      	ldr	r1, [pc, #144]	; (8009d98 <xTaskPriorityInherit+0xac>)
 8009d08:	6809      	ldr	r1, [r1, #0]
 8009d0a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009d0c:	f1c1 0107 	rsb	r1, r1, #7
 8009d10:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009d12:	6960      	ldr	r0, [r4, #20]
 8009d14:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009d18:	0091      	lsls	r1, r2, #2
 8009d1a:	4a20      	ldr	r2, [pc, #128]	; (8009d9c <xTaskPriorityInherit+0xb0>)
 8009d1c:	440a      	add	r2, r1
 8009d1e:	4290      	cmp	r0, r2
 8009d20:	d005      	beq.n	8009d2e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d22:	4a1d      	ldr	r2, [pc, #116]	; (8009d98 <xTaskPriorityInherit+0xac>)
 8009d24:	6812      	ldr	r2, [r2, #0]
 8009d26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d28:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8009d2a:	2001      	movs	r0, #1
	}
 8009d2c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d2e:	1d25      	adds	r5, r4, #4
 8009d30:	4628      	mov	r0, r5
 8009d32:	f7fe fe3e 	bl	80089b2 <uxListRemove>
 8009d36:	b968      	cbnz	r0, 8009d54 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009d38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009d3a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009d3e:	008a      	lsls	r2, r1, #2
 8009d40:	4916      	ldr	r1, [pc, #88]	; (8009d9c <xTaskPriorityInherit+0xb0>)
 8009d42:	588a      	ldr	r2, [r1, r2]
 8009d44:	b932      	cbnz	r2, 8009d54 <xTaskPriorityInherit+0x68>
 8009d46:	2201      	movs	r2, #1
 8009d48:	409a      	lsls	r2, r3
 8009d4a:	4915      	ldr	r1, [pc, #84]	; (8009da0 <xTaskPriorityInherit+0xb4>)
 8009d4c:	680b      	ldr	r3, [r1, #0]
 8009d4e:	ea23 0302 	bic.w	r3, r3, r2
 8009d52:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d54:	4b10      	ldr	r3, [pc, #64]	; (8009d98 <xTaskPriorityInherit+0xac>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009d5c:	2401      	movs	r4, #1
 8009d5e:	fa04 f203 	lsl.w	r2, r4, r3
 8009d62:	490f      	ldr	r1, [pc, #60]	; (8009da0 <xTaskPriorityInherit+0xb4>)
 8009d64:	6808      	ldr	r0, [r1, #0]
 8009d66:	4302      	orrs	r2, r0
 8009d68:	600a      	str	r2, [r1, #0]
 8009d6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009d6e:	009a      	lsls	r2, r3, #2
 8009d70:	4629      	mov	r1, r5
 8009d72:	480a      	ldr	r0, [pc, #40]	; (8009d9c <xTaskPriorityInherit+0xb0>)
 8009d74:	4410      	add	r0, r2
 8009d76:	f7fe fdf6 	bl	8008966 <vListInsertEnd>
				xReturn = pdTRUE;
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	e7d6      	b.n	8009d2c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009d7e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009d80:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <xTaskPriorityInherit+0xac>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d201      	bcs.n	8009d8e <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
 8009d8a:	2001      	movs	r0, #1
		return xReturn;
 8009d8c:	e7ce      	b.n	8009d2c <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 8009d8e:	2000      	movs	r0, #0
 8009d90:	e7cc      	b.n	8009d2c <xTaskPriorityInherit+0x40>
 8009d92:	2000      	movs	r0, #0
	}
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	2000084c 	.word	0x2000084c
 8009d9c:	20000858 	.word	0x20000858
 8009da0:	200008fc 	.word	0x200008fc

08009da4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d049      	beq.n	8009e3c <xTaskPriorityDisinherit+0x98>
	{
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8009dac:	4a26      	ldr	r2, [pc, #152]	; (8009e48 <xTaskPriorityDisinherit+0xa4>)
 8009dae:	6812      	ldr	r2, [r2, #0]
 8009db0:	4282      	cmp	r2, r0
 8009db2:	d008      	beq.n	8009dc6 <xTaskPriorityDisinherit+0x22>
 8009db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db8:	f383 8811 	msr	BASEPRI, r3
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	e7fe      	b.n	8009dc4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8009dc6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8009dc8:	b942      	cbnz	r2, 8009ddc <xTaskPriorityDisinherit+0x38>
 8009dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	e7fe      	b.n	8009dda <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8009ddc:	3a01      	subs	r2, #1
 8009dde:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009de0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8009de2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009de4:	4288      	cmp	r0, r1
 8009de6:	d02b      	beq.n	8009e40 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009de8:	bb62      	cbnz	r2, 8009e44 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dea:	1d25      	adds	r5, r4, #4
 8009dec:	4628      	mov	r0, r5
 8009dee:	f7fe fde0 	bl	80089b2 <uxListRemove>
 8009df2:	b970      	cbnz	r0, 8009e12 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009df4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009df6:	2314      	movs	r3, #20
 8009df8:	fb03 f302 	mul.w	r3, r3, r2
 8009dfc:	4913      	ldr	r1, [pc, #76]	; (8009e4c <xTaskPriorityDisinherit+0xa8>)
 8009dfe:	58cb      	ldr	r3, [r1, r3]
 8009e00:	b93b      	cbnz	r3, 8009e12 <xTaskPriorityDisinherit+0x6e>
 8009e02:	2301      	movs	r3, #1
 8009e04:	fa03 f202 	lsl.w	r2, r3, r2
 8009e08:	4911      	ldr	r1, [pc, #68]	; (8009e50 <xTaskPriorityDisinherit+0xac>)
 8009e0a:	680b      	ldr	r3, [r1, #0]
 8009e0c:	ea23 0302 	bic.w	r3, r3, r2
 8009e10:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e12:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009e14:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e16:	f1c3 0207 	rsb	r2, r3, #7
 8009e1a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e1c:	2401      	movs	r4, #1
 8009e1e:	fa04 f203 	lsl.w	r2, r4, r3
 8009e22:	490b      	ldr	r1, [pc, #44]	; (8009e50 <xTaskPriorityDisinherit+0xac>)
 8009e24:	6808      	ldr	r0, [r1, #0]
 8009e26:	4302      	orrs	r2, r0
 8009e28:	600a      	str	r2, [r1, #0]
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	4a07      	ldr	r2, [pc, #28]	; (8009e4c <xTaskPriorityDisinherit+0xa8>)
 8009e2e:	2014      	movs	r0, #20
 8009e30:	fb00 2003 	mla	r0, r0, r3, r2
 8009e34:	f7fe fd97 	bl	8008966 <vListInsertEnd>
					xReturn = pdTRUE;
 8009e38:	4620      	mov	r0, r4
	}
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8009e3c:	2000      	movs	r0, #0
	}
 8009e3e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8009e40:	2000      	movs	r0, #0
 8009e42:	e7fa      	b.n	8009e3a <xTaskPriorityDisinherit+0x96>
 8009e44:	2000      	movs	r0, #0
		return xReturn;
 8009e46:	e7f8      	b.n	8009e3a <xTaskPriorityDisinherit+0x96>
 8009e48:	2000084c 	.word	0x2000084c
 8009e4c:	20000858 	.word	0x20000858
 8009e50:	200008fc 	.word	0x200008fc

08009e54 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d055      	beq.n	8009f04 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8009e5c:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8009e5e:	b940      	cbnz	r0, 8009e72 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	e7fe      	b.n	8009e70 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009e72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e74:	428a      	cmp	r2, r1
 8009e76:	d200      	bcs.n	8009e7a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009e78:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009e7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009e7c:	4291      	cmp	r1, r2
 8009e7e:	d001      	beq.n	8009e84 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009e80:	2801      	cmp	r0, #1
 8009e82:	d000      	beq.n	8009e86 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8009e84:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8009e86:	4820      	ldr	r0, [pc, #128]	; (8009f08 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8009e88:	6800      	ldr	r0, [r0, #0]
 8009e8a:	4298      	cmp	r0, r3
 8009e8c:	d108      	bne.n	8009ea0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	e7fe      	b.n	8009e9e <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 8009ea0:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ea2:	6998      	ldr	r0, [r3, #24]
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	db02      	blt.n	8009eae <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ea8:	f1c2 0207 	rsb	r2, r2, #7
 8009eac:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009eae:	695a      	ldr	r2, [r3, #20]
 8009eb0:	4816      	ldr	r0, [pc, #88]	; (8009f0c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009eb2:	2414      	movs	r4, #20
 8009eb4:	fb04 0101 	mla	r1, r4, r1, r0
 8009eb8:	428a      	cmp	r2, r1
 8009eba:	d1e3      	bne.n	8009e84 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8009ebc:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ebe:	1d1d      	adds	r5, r3, #4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f7fe fd76 	bl	80089b2 <uxListRemove>
 8009ec6:	b970      	cbnz	r0, 8009ee6 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009ec8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009eca:	2314      	movs	r3, #20
 8009ecc:	fb03 f302 	mul.w	r3, r3, r2
 8009ed0:	490e      	ldr	r1, [pc, #56]	; (8009f0c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009ed2:	58cb      	ldr	r3, [r1, r3]
 8009ed4:	b93b      	cbnz	r3, 8009ee6 <vTaskPriorityDisinheritAfterTimeout+0x92>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	fa03 f202 	lsl.w	r2, r3, r2
 8009edc:	490c      	ldr	r1, [pc, #48]	; (8009f10 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8009ede:	680b      	ldr	r3, [r1, #0]
 8009ee0:	ea23 0302 	bic.w	r3, r3, r2
 8009ee4:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 8009ee6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009ee8:	2301      	movs	r3, #1
 8009eea:	4093      	lsls	r3, r2
 8009eec:	4908      	ldr	r1, [pc, #32]	; (8009f10 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8009eee:	6808      	ldr	r0, [r1, #0]
 8009ef0:	4303      	orrs	r3, r0
 8009ef2:	600b      	str	r3, [r1, #0]
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	4b05      	ldr	r3, [pc, #20]	; (8009f0c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009ef8:	2014      	movs	r0, #20
 8009efa:	fb00 3002 	mla	r0, r0, r2, r3
 8009efe:	f7fe fd32 	bl	8008966 <vListInsertEnd>
	}
 8009f02:	e7bf      	b.n	8009e84 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	2000084c 	.word	0x2000084c
 8009f0c:	20000858 	.word	0x20000858
 8009f10:	200008fc 	.word	0x200008fc

08009f14 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009f14:	4b05      	ldr	r3, [pc, #20]	; (8009f2c <pvTaskIncrementMutexHeldCount+0x18>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	b123      	cbz	r3, 8009f24 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8009f1a:	4b04      	ldr	r3, [pc, #16]	; (8009f2c <pvTaskIncrementMutexHeldCount+0x18>)
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009f20:	3301      	adds	r3, #1
 8009f22:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
 8009f24:	4b01      	ldr	r3, [pc, #4]	; (8009f2c <pvTaskIncrementMutexHeldCount+0x18>)
 8009f26:	6818      	ldr	r0, [r3, #0]
	}
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	2000084c 	.word	0x2000084c

08009f30 <ulTaskNotifyTake>:
	{
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	4605      	mov	r5, r0
 8009f34:	460c      	mov	r4, r1
		taskENTER_CRITICAL();
 8009f36:	f000 fc7d 	bl	800a834 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009f3a:	4b19      	ldr	r3, [pc, #100]	; (8009fa0 <ulTaskNotifyTake+0x70>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f40:	b92b      	cbnz	r3, 8009f4e <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009f42:	4b17      	ldr	r3, [pc, #92]	; (8009fa0 <ulTaskNotifyTake+0x70>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 8009f4c:	b9ac      	cbnz	r4, 8009f7a <ulTaskNotifyTake+0x4a>
		taskEXIT_CRITICAL();
 8009f4e:	f000 fc93 	bl	800a878 <vPortExitCritical>
		taskENTER_CRITICAL();
 8009f52:	f000 fc6f 	bl	800a834 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009f56:	4b12      	ldr	r3, [pc, #72]	; (8009fa0 <ulTaskNotifyTake+0x70>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if( ulReturn != 0UL )
 8009f5c:	b124      	cbz	r4, 8009f68 <ulTaskNotifyTake+0x38>
				if( xClearCountOnExit != pdFALSE )
 8009f5e:	b9cd      	cbnz	r5, 8009f94 <ulTaskNotifyTake+0x64>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8009f60:	4b0f      	ldr	r3, [pc, #60]	; (8009fa0 <ulTaskNotifyTake+0x70>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	1e62      	subs	r2, r4, #1
 8009f66:	65da      	str	r2, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f68:	4b0d      	ldr	r3, [pc, #52]	; (8009fa0 <ulTaskNotifyTake+0x70>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 8009f72:	f000 fc81 	bl	800a878 <vPortExitCritical>
	}
 8009f76:	4620      	mov	r0, r4
 8009f78:	bd38      	pop	{r3, r4, r5, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f7ff fae1 	bl	8009544 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8009f82:	4b08      	ldr	r3, [pc, #32]	; (8009fa4 <ulTaskNotifyTake+0x74>)
 8009f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	e7dc      	b.n	8009f4e <ulTaskNotifyTake+0x1e>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009f94:	4b02      	ldr	r3, [pc, #8]	; (8009fa0 <ulTaskNotifyTake+0x70>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8009f9c:	e7e4      	b.n	8009f68 <ulTaskNotifyTake+0x38>
 8009f9e:	bf00      	nop
 8009fa0:	2000084c 	.word	0x2000084c
 8009fa4:	e000ed04 	.word	0xe000ed04

08009fa8 <xTaskNotifyWait>:
	{
 8009fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009faa:	4607      	mov	r7, r0
 8009fac:	460d      	mov	r5, r1
 8009fae:	4614      	mov	r4, r2
 8009fb0:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 8009fb2:	f000 fc3f 	bl	800a834 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009fb6:	4b20      	ldr	r3, [pc, #128]	; (800a038 <xTaskNotifyWait+0x90>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d00a      	beq.n	8009fda <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009fc4:	4b1c      	ldr	r3, [pc, #112]	; (800a038 <xTaskNotifyWait+0x90>)
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8009fca:	ea20 0007 	bic.w	r0, r0, r7
 8009fce:	65d0      	str	r0, [r2, #92]	; 0x5c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 8009fd8:	b9ce      	cbnz	r6, 800a00e <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 8009fda:	f000 fc4d 	bl	800a878 <vPortExitCritical>
		taskENTER_CRITICAL();
 8009fde:	f000 fc29 	bl	800a834 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8009fe2:	b11c      	cbz	r4, 8009fec <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009fe4:	4b14      	ldr	r3, [pc, #80]	; (800a038 <xTaskNotifyWait+0x90>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fea:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009fec:	4b12      	ldr	r3, [pc, #72]	; (800a038 <xTaskNotifyWait+0x90>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d016      	beq.n	800a028 <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 8009ffa:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ffc:	4b0e      	ldr	r3, [pc, #56]	; (800a038 <xTaskNotifyWait+0x90>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 800a006:	f000 fc37 	bl	800a878 <vPortExitCritical>
	}
 800a00a:	4620      	mov	r0, r4
 800a00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a00e:	4611      	mov	r1, r2
 800a010:	4630      	mov	r0, r6
 800a012:	f7ff fa97 	bl	8009544 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800a016:	4b09      	ldr	r3, [pc, #36]	; (800a03c <xTaskNotifyWait+0x94>)
 800a018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	e7d8      	b.n	8009fda <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a028:	4b03      	ldr	r3, [pc, #12]	; (800a038 <xTaskNotifyWait+0x90>)
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800a02e:	ea23 0505 	bic.w	r5, r3, r5
 800a032:	65d5      	str	r5, [r2, #92]	; 0x5c
				xReturn = pdTRUE;
 800a034:	2401      	movs	r4, #1
 800a036:	e7e1      	b.n	8009ffc <xTaskNotifyWait+0x54>
 800a038:	2000084c 	.word	0x2000084c
 800a03c:	e000ed04 	.word	0xe000ed04

0800a040 <xTaskGenericNotifyFromISR>:
	{
 800a040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a044:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
 800a046:	b940      	cbnz	r0, 800a05a <xTaskGenericNotifyFromISR+0x1a>
 800a048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	e7fe      	b.n	800a058 <xTaskGenericNotifyFromISR+0x18>
 800a05a:	4604      	mov	r4, r0
 800a05c:	4699      	mov	r9, r3
 800a05e:	4690      	mov	r8, r2
 800a060:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a062:	f000 fd11 	bl	800aa88 <vPortValidateInterruptPriority>
	__asm volatile
 800a066:	f3ef 8711 	mrs	r7, BASEPRI
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800a07a:	f1b9 0f00 	cmp.w	r9, #0
 800a07e:	d002      	beq.n	800a086 <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a080:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a082:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a086:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800a08a:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a08c:	2202      	movs	r2, #2
 800a08e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			switch( eAction )
 800a092:	f1b8 0f04 	cmp.w	r8, #4
 800a096:	d81c      	bhi.n	800a0d2 <xTaskGenericNotifyFromISR+0x92>
 800a098:	e8df f008 	tbb	[pc, r8]
 800a09c:	130e0328 	.word	0x130e0328
 800a0a0:	16          	.byte	0x16
 800a0a1:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 800a0a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a0a4:	4315      	orrs	r5, r2
 800a0a6:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a0a8:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d024      	beq.n	800a0f8 <xTaskGenericNotifyFromISR+0xb8>
	__asm volatile
 800a0ae:	f387 8811 	msr	BASEPRI, r7
	}
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 800a0b8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a0ba:	3201      	adds	r2, #1
 800a0bc:	65e2      	str	r2, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a0be:	2501      	movs	r5, #1
					break;
 800a0c0:	e7f3      	b.n	800a0aa <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 800a0c2:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a0c4:	2501      	movs	r5, #1
					break;
 800a0c6:	e7f0      	b.n	800a0aa <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d011      	beq.n	800a0f0 <xTaskGenericNotifyFromISR+0xb0>
						pxTCB->ulNotifiedValue = ulValue;
 800a0cc:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a0ce:	2501      	movs	r5, #1
 800a0d0:	e7eb      	b.n	800a0aa <xTaskGenericNotifyFromISR+0x6a>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a0d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a0d4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a0d8:	d00c      	beq.n	800a0f4 <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	e7fe      	b.n	800a0ea <xTaskGenericNotifyFromISR+0xaa>
	BaseType_t xReturn = pdPASS;
 800a0ec:	2501      	movs	r5, #1
 800a0ee:	e7dc      	b.n	800a0aa <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 800a0f0:	2500      	movs	r5, #0
 800a0f2:	e7da      	b.n	800a0aa <xTaskGenericNotifyFromISR+0x6a>
	BaseType_t xReturn = pdPASS;
 800a0f4:	2501      	movs	r5, #1
 800a0f6:	e7d8      	b.n	800a0aa <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a0f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a0fa:	b143      	cbz	r3, 800a10e <xTaskGenericNotifyFromISR+0xce>
 800a0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a100:	f383 8811 	msr	BASEPRI, r3
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	e7fe      	b.n	800a10c <xTaskGenericNotifyFromISR+0xcc>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a10e:	4b14      	ldr	r3, [pc, #80]	; (800a160 <xTaskGenericNotifyFromISR+0x120>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	b9fb      	cbnz	r3, 800a154 <xTaskGenericNotifyFromISR+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a114:	f104 0804 	add.w	r8, r4, #4
 800a118:	4640      	mov	r0, r8
 800a11a:	f7fe fc4a 	bl	80089b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a11e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a120:	2301      	movs	r3, #1
 800a122:	4093      	lsls	r3, r2
 800a124:	490f      	ldr	r1, [pc, #60]	; (800a164 <xTaskGenericNotifyFromISR+0x124>)
 800a126:	6808      	ldr	r0, [r1, #0]
 800a128:	4303      	orrs	r3, r0
 800a12a:	600b      	str	r3, [r1, #0]
 800a12c:	4641      	mov	r1, r8
 800a12e:	4b0e      	ldr	r3, [pc, #56]	; (800a168 <xTaskGenericNotifyFromISR+0x128>)
 800a130:	2014      	movs	r0, #20
 800a132:	fb00 3002 	mla	r0, r0, r2, r3
 800a136:	f7fe fc16 	bl	8008966 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a13a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a13c:	4b0b      	ldr	r3, [pc, #44]	; (800a16c <xTaskGenericNotifyFromISR+0x12c>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a142:	429a      	cmp	r2, r3
 800a144:	d9b3      	bls.n	800a0ae <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 800a146:	b10e      	cbz	r6, 800a14c <xTaskGenericNotifyFromISR+0x10c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a148:	2301      	movs	r3, #1
 800a14a:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 800a14c:	4b08      	ldr	r3, [pc, #32]	; (800a170 <xTaskGenericNotifyFromISR+0x130>)
 800a14e:	2201      	movs	r2, #1
 800a150:	601a      	str	r2, [r3, #0]
 800a152:	e7ac      	b.n	800a0ae <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a154:	f104 0118 	add.w	r1, r4, #24
 800a158:	4806      	ldr	r0, [pc, #24]	; (800a174 <xTaskGenericNotifyFromISR+0x134>)
 800a15a:	f7fe fc04 	bl	8008966 <vListInsertEnd>
 800a15e:	e7ec      	b.n	800a13a <xTaskGenericNotifyFromISR+0xfa>
 800a160:	200008f4 	.word	0x200008f4
 800a164:	200008fc 	.word	0x200008fc
 800a168:	20000858 	.word	0x20000858
 800a16c:	2000084c 	.word	0x2000084c
 800a170:	20000974 	.word	0x20000974
 800a174:	20000930 	.word	0x20000930

0800a178 <vTaskNotifyGiveFromISR>:
	{
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 800a17a:	b940      	cbnz	r0, 800a18e <vTaskNotifyGiveFromISR+0x16>
 800a17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	e7fe      	b.n	800a18c <vTaskNotifyGiveFromISR+0x14>
 800a18e:	4604      	mov	r4, r0
 800a190:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a192:	f000 fc79 	bl	800aa88 <vPortValidateInterruptPriority>
	__asm volatile
 800a196:	f3ef 8611 	mrs	r6, BASEPRI
 800a19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19e:	f383 8811 	msr	BASEPRI, r3
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	f3bf 8f4f 	dsb	sy
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a1aa:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800a1ae:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			( pxTCB->ulNotifiedValue )++;
 800a1b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a1b8:	3201      	adds	r2, #1
 800a1ba:	65e2      	str	r2, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d002      	beq.n	800a1c6 <vTaskNotifyGiveFromISR+0x4e>
	__asm volatile
 800a1c0:	f386 8811 	msr	BASEPRI, r6
	}
 800a1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a1c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a1c8:	b143      	cbz	r3, 800a1dc <vTaskNotifyGiveFromISR+0x64>
	__asm volatile
 800a1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	e7fe      	b.n	800a1da <vTaskNotifyGiveFromISR+0x62>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1dc:	4b13      	ldr	r3, [pc, #76]	; (800a22c <vTaskNotifyGiveFromISR+0xb4>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	b9f3      	cbnz	r3, 800a220 <vTaskNotifyGiveFromISR+0xa8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1e2:	1d27      	adds	r7, r4, #4
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	f7fe fbe4 	bl	80089b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	4093      	lsls	r3, r2
 800a1f0:	490f      	ldr	r1, [pc, #60]	; (800a230 <vTaskNotifyGiveFromISR+0xb8>)
 800a1f2:	6808      	ldr	r0, [r1, #0]
 800a1f4:	4303      	orrs	r3, r0
 800a1f6:	600b      	str	r3, [r1, #0]
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	4b0e      	ldr	r3, [pc, #56]	; (800a234 <vTaskNotifyGiveFromISR+0xbc>)
 800a1fc:	2014      	movs	r0, #20
 800a1fe:	fb00 3002 	mla	r0, r0, r2, r3
 800a202:	f7fe fbb0 	bl	8008966 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a206:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a208:	4b0b      	ldr	r3, [pc, #44]	; (800a238 <vTaskNotifyGiveFromISR+0xc0>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20e:	429a      	cmp	r2, r3
 800a210:	d9d6      	bls.n	800a1c0 <vTaskNotifyGiveFromISR+0x48>
					if( pxHigherPriorityTaskWoken != NULL )
 800a212:	b10d      	cbz	r5, 800a218 <vTaskNotifyGiveFromISR+0xa0>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a214:	2301      	movs	r3, #1
 800a216:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 800a218:	4b08      	ldr	r3, [pc, #32]	; (800a23c <vTaskNotifyGiveFromISR+0xc4>)
 800a21a:	2201      	movs	r2, #1
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	e7cf      	b.n	800a1c0 <vTaskNotifyGiveFromISR+0x48>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a220:	f104 0118 	add.w	r1, r4, #24
 800a224:	4806      	ldr	r0, [pc, #24]	; (800a240 <vTaskNotifyGiveFromISR+0xc8>)
 800a226:	f7fe fb9e 	bl	8008966 <vListInsertEnd>
 800a22a:	e7ec      	b.n	800a206 <vTaskNotifyGiveFromISR+0x8e>
 800a22c:	200008f4 	.word	0x200008f4
 800a230:	200008fc 	.word	0x200008fc
 800a234:	20000858 	.word	0x20000858
 800a238:	2000084c 	.word	0x2000084c
 800a23c:	20000974 	.word	0x20000974
 800a240:	20000930 	.word	0x20000930

0800a244 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a244:	4b06      	ldr	r3, [pc, #24]	; (800a260 <prvGetNextExpireTime+0x1c>)
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	6813      	ldr	r3, [r2, #0]
 800a24a:	b92b      	cbnz	r3, 800a258 <prvGetNextExpireTime+0x14>
 800a24c:	2301      	movs	r3, #1
 800a24e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a250:	b923      	cbnz	r3, 800a25c <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a252:	68d3      	ldr	r3, [r2, #12]
 800a254:	6818      	ldr	r0, [r3, #0]
 800a256:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a258:	2300      	movs	r3, #0
 800a25a:	e7f8      	b.n	800a24e <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a25c:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800a25e:	4770      	bx	lr
 800a260:	20000978 	.word	0x20000978

0800a264 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a264:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a266:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a268:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a26a:	4291      	cmp	r1, r2
 800a26c:	d80c      	bhi.n	800a288 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a26e:	1ad2      	subs	r2, r2, r3
 800a270:	6983      	ldr	r3, [r0, #24]
 800a272:	429a      	cmp	r2, r3
 800a274:	d301      	bcc.n	800a27a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a276:	2001      	movs	r0, #1
 800a278:	e010      	b.n	800a29c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a27a:	1d01      	adds	r1, r0, #4
 800a27c:	4b09      	ldr	r3, [pc, #36]	; (800a2a4 <prvInsertTimerInActiveList+0x40>)
 800a27e:	6818      	ldr	r0, [r3, #0]
 800a280:	f7fe fb7d 	bl	800897e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a284:	2000      	movs	r0, #0
 800a286:	e009      	b.n	800a29c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a288:	429a      	cmp	r2, r3
 800a28a:	d201      	bcs.n	800a290 <prvInsertTimerInActiveList+0x2c>
 800a28c:	4299      	cmp	r1, r3
 800a28e:	d206      	bcs.n	800a29e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a290:	1d01      	adds	r1, r0, #4
 800a292:	4b05      	ldr	r3, [pc, #20]	; (800a2a8 <prvInsertTimerInActiveList+0x44>)
 800a294:	6818      	ldr	r0, [r3, #0]
 800a296:	f7fe fb72 	bl	800897e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a29a:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800a29c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 800a29e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a2a0:	e7fc      	b.n	800a29c <prvInsertTimerInActiveList+0x38>
 800a2a2:	bf00      	nop
 800a2a4:	2000097c 	.word	0x2000097c
 800a2a8:	20000978 	.word	0x20000978

0800a2ac <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a2ac:	b530      	push	{r4, r5, lr}
 800a2ae:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a2b0:	f000 fac0 	bl	800a834 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a2b4:	4b11      	ldr	r3, [pc, #68]	; (800a2fc <prvCheckForValidListAndQueue+0x50>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	b11b      	cbz	r3, 800a2c2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2ba:	f000 fadd 	bl	800a878 <vPortExitCritical>
}
 800a2be:	b003      	add	sp, #12
 800a2c0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800a2c2:	4d0f      	ldr	r5, [pc, #60]	; (800a300 <prvCheckForValidListAndQueue+0x54>)
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	f7fe fb40 	bl	800894a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a2ca:	4c0e      	ldr	r4, [pc, #56]	; (800a304 <prvCheckForValidListAndQueue+0x58>)
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f7fe fb3c 	bl	800894a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a2d2:	4b0d      	ldr	r3, [pc, #52]	; (800a308 <prvCheckForValidListAndQueue+0x5c>)
 800a2d4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a2d6:	4b0d      	ldr	r3, [pc, #52]	; (800a30c <prvCheckForValidListAndQueue+0x60>)
 800a2d8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a2da:	2300      	movs	r3, #0
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	4b0c      	ldr	r3, [pc, #48]	; (800a310 <prvCheckForValidListAndQueue+0x64>)
 800a2e0:	4a0c      	ldr	r2, [pc, #48]	; (800a314 <prvCheckForValidListAndQueue+0x68>)
 800a2e2:	210c      	movs	r1, #12
 800a2e4:	200a      	movs	r0, #10
 800a2e6:	f7fe fc74 	bl	8008bd2 <xQueueGenericCreateStatic>
 800a2ea:	4b04      	ldr	r3, [pc, #16]	; (800a2fc <prvCheckForValidListAndQueue+0x50>)
 800a2ec:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	d0e3      	beq.n	800a2ba <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a2f2:	4909      	ldr	r1, [pc, #36]	; (800a318 <prvCheckForValidListAndQueue+0x6c>)
 800a2f4:	f7fe ffa2 	bl	800923c <vQueueAddToRegistry>
 800a2f8:	e7df      	b.n	800a2ba <prvCheckForValidListAndQueue+0xe>
 800a2fa:	bf00      	nop
 800a2fc:	20000a74 	.word	0x20000a74
 800a300:	200009f8 	.word	0x200009f8
 800a304:	20000a0c 	.word	0x20000a0c
 800a308:	20000978 	.word	0x20000978
 800a30c:	2000097c 	.word	0x2000097c
 800a310:	20000a24 	.word	0x20000a24
 800a314:	20000980 	.word	0x20000980
 800a318:	0800c890 	.word	0x0800c890

0800a31c <prvInitialiseNewTimer>:
{
 800a31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a320:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a322:	b941      	cbnz	r1, 800a336 <prvInitialiseNewTimer+0x1a>
 800a324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	e7fe      	b.n	800a334 <prvInitialiseNewTimer+0x18>
 800a336:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
 800a338:	b1a4      	cbz	r4, 800a364 <prvInitialiseNewTimer+0x48>
 800a33a:	461e      	mov	r6, r3
 800a33c:	4615      	mov	r5, r2
 800a33e:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
 800a340:	f7ff ffb4 	bl	800a2ac <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 800a344:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a348:	61a7      	str	r7, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a34a:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a34c:	9b06      	ldr	r3, [sp, #24]
 800a34e:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a350:	1d20      	adds	r0, r4, #4
 800a352:	f7fe fb05 	bl	8008960 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a356:	b12d      	cbz	r5, 800a364 <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a358:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a35c:	f043 0304 	orr.w	r3, r3, #4
 800a360:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 800a364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a368 <xTimerCreateTimerTask>:
{
 800a368:	b510      	push	{r4, lr}
 800a36a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a36c:	f7ff ff9e 	bl	800a2ac <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a370:	4b12      	ldr	r3, [pc, #72]	; (800a3bc <xTimerCreateTimerTask+0x54>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	b1cb      	cbz	r3, 800a3aa <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a376:	2400      	movs	r4, #0
 800a378:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a37a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a37c:	aa07      	add	r2, sp, #28
 800a37e:	a906      	add	r1, sp, #24
 800a380:	a805      	add	r0, sp, #20
 800a382:	f7f9 fb3f 	bl	8003a04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a386:	9b05      	ldr	r3, [sp, #20]
 800a388:	9302      	str	r3, [sp, #8]
 800a38a:	9b06      	ldr	r3, [sp, #24]
 800a38c:	9301      	str	r3, [sp, #4]
 800a38e:	2302      	movs	r3, #2
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	4623      	mov	r3, r4
 800a394:	9a07      	ldr	r2, [sp, #28]
 800a396:	490a      	ldr	r1, [pc, #40]	; (800a3c0 <xTimerCreateTimerTask+0x58>)
 800a398:	480a      	ldr	r0, [pc, #40]	; (800a3c4 <xTimerCreateTimerTask+0x5c>)
 800a39a:	f7ff f91f 	bl	80095dc <xTaskCreateStatic>
 800a39e:	4b0a      	ldr	r3, [pc, #40]	; (800a3c8 <xTimerCreateTimerTask+0x60>)
 800a3a0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a3a2:	b110      	cbz	r0, 800a3aa <xTimerCreateTimerTask+0x42>
}
 800a3a4:	2001      	movs	r0, #1
 800a3a6:	b008      	add	sp, #32
 800a3a8:	bd10      	pop	{r4, pc}
 800a3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ae:	f383 8811 	msr	BASEPRI, r3
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	e7fe      	b.n	800a3ba <xTimerCreateTimerTask+0x52>
 800a3bc:	20000a74 	.word	0x20000a74
 800a3c0:	0800c898 	.word	0x0800c898
 800a3c4:	0800a745 	.word	0x0800a745
 800a3c8:	20000a78 	.word	0x20000a78

0800a3cc <xTimerCreate>:
	{
 800a3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d0:	b082      	sub	sp, #8
 800a3d2:	4605      	mov	r5, r0
 800a3d4:	460e      	mov	r6, r1
 800a3d6:	4617      	mov	r7, r2
 800a3d8:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a3da:	202c      	movs	r0, #44	; 0x2c
 800a3dc:	f000 fbe0 	bl	800aba0 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	b158      	cbz	r0, 800a3fc <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a3ea:	9001      	str	r0, [sp, #4]
 800a3ec:	9b08      	ldr	r3, [sp, #32]
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	4643      	mov	r3, r8
 800a3f2:	463a      	mov	r2, r7
 800a3f4:	4631      	mov	r1, r6
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	f7ff ff90 	bl	800a31c <prvInitialiseNewTimer>
	}
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	b002      	add	sp, #8
 800a400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a404 <xTimerCreateStatic>:
	{
 800a404:	b530      	push	{r4, r5, lr}
 800a406:	b085      	sub	sp, #20
 800a408:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a40a:	252c      	movs	r5, #44	; 0x2c
 800a40c:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a40e:	9d03      	ldr	r5, [sp, #12]
 800a410:	2d2c      	cmp	r5, #44	; 0x2c
 800a412:	d008      	beq.n	800a426 <xTimerCreateStatic+0x22>
 800a414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	e7fe      	b.n	800a424 <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a426:	9d03      	ldr	r5, [sp, #12]
		configASSERT( pxTimerBuffer );
 800a428:	b944      	cbnz	r4, 800a43c <xTimerCreateStatic+0x38>
 800a42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	e7fe      	b.n	800a43a <xTimerCreateStatic+0x36>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a43c:	2502      	movs	r5, #2
 800a43e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a442:	9401      	str	r4, [sp, #4]
 800a444:	9d08      	ldr	r5, [sp, #32]
 800a446:	9500      	str	r5, [sp, #0]
 800a448:	f7ff ff68 	bl	800a31c <prvInitialiseNewTimer>
	}
 800a44c:	4620      	mov	r0, r4
 800a44e:	b005      	add	sp, #20
 800a450:	bd30      	pop	{r4, r5, pc}
	...

0800a454 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800a454:	b1c8      	cbz	r0, 800a48a <xTimerGenericCommand+0x36>
{
 800a456:	b530      	push	{r4, r5, lr}
 800a458:	b085      	sub	sp, #20
 800a45a:	4615      	mov	r5, r2
 800a45c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 800a45e:	4a17      	ldr	r2, [pc, #92]	; (800a4bc <xTimerGenericCommand+0x68>)
 800a460:	6810      	ldr	r0, [r2, #0]
 800a462:	b340      	cbz	r0, 800a4b6 <xTimerGenericCommand+0x62>
 800a464:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800a466:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a468:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a46a:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a46c:	2905      	cmp	r1, #5
 800a46e:	dc1d      	bgt.n	800a4ac <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a470:	f7ff fc2c 	bl	8009ccc <xTaskGetSchedulerState>
 800a474:	2802      	cmp	r0, #2
 800a476:	d011      	beq.n	800a49c <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a478:	2300      	movs	r3, #0
 800a47a:	461a      	mov	r2, r3
 800a47c:	a901      	add	r1, sp, #4
 800a47e:	480f      	ldr	r0, [pc, #60]	; (800a4bc <xTimerGenericCommand+0x68>)
 800a480:	6800      	ldr	r0, [r0, #0]
 800a482:	f7fe fc17 	bl	8008cb4 <xQueueGenericSend>
}
 800a486:	b005      	add	sp, #20
 800a488:	bd30      	pop	{r4, r5, pc}
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	e7fe      	b.n	800a49a <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a49c:	2300      	movs	r3, #0
 800a49e:	9a08      	ldr	r2, [sp, #32]
 800a4a0:	a901      	add	r1, sp, #4
 800a4a2:	4806      	ldr	r0, [pc, #24]	; (800a4bc <xTimerGenericCommand+0x68>)
 800a4a4:	6800      	ldr	r0, [r0, #0]
 800a4a6:	f7fe fc05 	bl	8008cb4 <xQueueGenericSend>
 800a4aa:	e7ec      	b.n	800a486 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	a901      	add	r1, sp, #4
 800a4b0:	f7fe fce4 	bl	8008e7c <xQueueGenericSendFromISR>
 800a4b4:	e7e7      	b.n	800a486 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 800a4b6:	2000      	movs	r0, #0
	return xReturn;
 800a4b8:	e7e5      	b.n	800a486 <xTimerGenericCommand+0x32>
 800a4ba:	bf00      	nop
 800a4bc:	20000a74 	.word	0x20000a74

0800a4c0 <prvSwitchTimerLists>:
{
 800a4c0:	b570      	push	{r4, r5, r6, lr}
 800a4c2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4c4:	4b1b      	ldr	r3, [pc, #108]	; (800a534 <prvSwitchTimerLists+0x74>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	b362      	cbz	r2, 800a526 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4d0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4d2:	1d25      	adds	r5, r4, #4
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	f7fe fa6c 	bl	80089b2 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4da:	6a23      	ldr	r3, [r4, #32]
 800a4dc:	4620      	mov	r0, r4
 800a4de:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4e0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a4e4:	f013 0f04 	tst.w	r3, #4
 800a4e8:	d0ec      	beq.n	800a4c4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a4ea:	69a3      	ldr	r3, [r4, #24]
 800a4ec:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800a4ee:	429e      	cmp	r6, r3
 800a4f0:	d207      	bcs.n	800a502 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a4f2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4f4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	4b0e      	ldr	r3, [pc, #56]	; (800a534 <prvSwitchTimerLists+0x74>)
 800a4fa:	6818      	ldr	r0, [r3, #0]
 800a4fc:	f7fe fa3f 	bl	800897e <vListInsert>
 800a500:	e7e0      	b.n	800a4c4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a502:	2100      	movs	r1, #0
 800a504:	9100      	str	r1, [sp, #0]
 800a506:	460b      	mov	r3, r1
 800a508:	4632      	mov	r2, r6
 800a50a:	4620      	mov	r0, r4
 800a50c:	f7ff ffa2 	bl	800a454 <xTimerGenericCommand>
				configASSERT( xResult );
 800a510:	2800      	cmp	r0, #0
 800a512:	d1d7      	bne.n	800a4c4 <prvSwitchTimerLists+0x4>
 800a514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	e7fe      	b.n	800a524 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800a526:	4a04      	ldr	r2, [pc, #16]	; (800a538 <prvSwitchTimerLists+0x78>)
 800a528:	6810      	ldr	r0, [r2, #0]
 800a52a:	4902      	ldr	r1, [pc, #8]	; (800a534 <prvSwitchTimerLists+0x74>)
 800a52c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800a52e:	6013      	str	r3, [r2, #0]
}
 800a530:	b002      	add	sp, #8
 800a532:	bd70      	pop	{r4, r5, r6, pc}
 800a534:	20000978 	.word	0x20000978
 800a538:	2000097c 	.word	0x2000097c

0800a53c <prvSampleTimeNow>:
{
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800a540:	f7ff f910 	bl	8009764 <xTaskGetTickCount>
 800a544:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800a546:	4b07      	ldr	r3, [pc, #28]	; (800a564 <prvSampleTimeNow+0x28>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4283      	cmp	r3, r0
 800a54c:	d805      	bhi.n	800a55a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800a54e:	2300      	movs	r3, #0
 800a550:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800a552:	4b04      	ldr	r3, [pc, #16]	; (800a564 <prvSampleTimeNow+0x28>)
 800a554:	601c      	str	r4, [r3, #0]
}
 800a556:	4620      	mov	r0, r4
 800a558:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800a55a:	f7ff ffb1 	bl	800a4c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a55e:	2301      	movs	r3, #1
 800a560:	602b      	str	r3, [r5, #0]
 800a562:	e7f6      	b.n	800a552 <prvSampleTimeNow+0x16>
 800a564:	20000a20 	.word	0x20000a20

0800a568 <prvProcessExpiredTimer>:
{
 800a568:	b570      	push	{r4, r5, r6, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	4605      	mov	r5, r0
 800a56e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a570:	4b17      	ldr	r3, [pc, #92]	; (800a5d0 <prvProcessExpiredTimer+0x68>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a578:	1d20      	adds	r0, r4, #4
 800a57a:	f7fe fa1a 	bl	80089b2 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a57e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a582:	f013 0f04 	tst.w	r3, #4
 800a586:	d108      	bne.n	800a59a <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a588:	f023 0301 	bic.w	r3, r3, #1
 800a58c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a590:	6a23      	ldr	r3, [r4, #32]
 800a592:	4620      	mov	r0, r4
 800a594:	4798      	blx	r3
}
 800a596:	b002      	add	sp, #8
 800a598:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a59a:	69a1      	ldr	r1, [r4, #24]
 800a59c:	462b      	mov	r3, r5
 800a59e:	4632      	mov	r2, r6
 800a5a0:	4429      	add	r1, r5
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f7ff fe5e 	bl	800a264 <prvInsertTimerInActiveList>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	d0f1      	beq.n	800a590 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	9100      	str	r1, [sp, #0]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	462a      	mov	r2, r5
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f7ff ff4d 	bl	800a454 <xTimerGenericCommand>
			configASSERT( xResult );
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	d1e8      	bne.n	800a590 <prvProcessExpiredTimer+0x28>
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	e7fe      	b.n	800a5ce <prvProcessExpiredTimer+0x66>
 800a5d0:	20000978 	.word	0x20000978

0800a5d4 <prvProcessTimerOrBlockTask>:
{
 800a5d4:	b570      	push	{r4, r5, r6, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	4606      	mov	r6, r0
 800a5da:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800a5dc:	f7ff f8ba 	bl	8009754 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5e0:	a801      	add	r0, sp, #4
 800a5e2:	f7ff ffab 	bl	800a53c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a5e6:	9b01      	ldr	r3, [sp, #4]
 800a5e8:	bb23      	cbnz	r3, 800a634 <prvProcessTimerOrBlockTask+0x60>
 800a5ea:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a5ec:	b90c      	cbnz	r4, 800a5f2 <prvProcessTimerOrBlockTask+0x1e>
 800a5ee:	42b0      	cmp	r0, r6
 800a5f0:	d217      	bcs.n	800a622 <prvProcessTimerOrBlockTask+0x4e>
				if( xListWasEmpty != pdFALSE )
 800a5f2:	b124      	cbz	r4, 800a5fe <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a5f4:	4b11      	ldr	r3, [pc, #68]	; (800a63c <prvProcessTimerOrBlockTask+0x68>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	b9cb      	cbnz	r3, 800a630 <prvProcessTimerOrBlockTask+0x5c>
 800a5fc:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a5fe:	4622      	mov	r2, r4
 800a600:	1b71      	subs	r1, r6, r5
 800a602:	4b0f      	ldr	r3, [pc, #60]	; (800a640 <prvProcessTimerOrBlockTask+0x6c>)
 800a604:	6818      	ldr	r0, [r3, #0]
 800a606:	f7fe fe2d 	bl	8009264 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a60a:	f7ff f93d 	bl	8009888 <xTaskResumeAll>
 800a60e:	b998      	cbnz	r0, 800a638 <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 800a610:	4b0c      	ldr	r3, [pc, #48]	; (800a644 <prvProcessTimerOrBlockTask+0x70>)
 800a612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	e00a      	b.n	800a638 <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
 800a622:	f7ff f931 	bl	8009888 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a626:	4629      	mov	r1, r5
 800a628:	4630      	mov	r0, r6
 800a62a:	f7ff ff9d 	bl	800a568 <prvProcessExpiredTimer>
 800a62e:	e003      	b.n	800a638 <prvProcessTimerOrBlockTask+0x64>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a630:	2400      	movs	r4, #0
 800a632:	e7e4      	b.n	800a5fe <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 800a634:	f7ff f928 	bl	8009888 <xTaskResumeAll>
}
 800a638:	b002      	add	sp, #8
 800a63a:	bd70      	pop	{r4, r5, r6, pc}
 800a63c:	2000097c 	.word	0x2000097c
 800a640:	20000a74 	.word	0x20000a74
 800a644:	e000ed04 	.word	0xe000ed04

0800a648 <prvProcessReceivedCommands>:
{
 800a648:	b530      	push	{r4, r5, lr}
 800a64a:	b087      	sub	sp, #28
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a64c:	2200      	movs	r2, #0
 800a64e:	a903      	add	r1, sp, #12
 800a650:	4b3b      	ldr	r3, [pc, #236]	; (800a740 <prvProcessReceivedCommands+0xf8>)
 800a652:	6818      	ldr	r0, [r3, #0]
 800a654:	f7fe fc78 	bl	8008f48 <xQueueReceive>
 800a658:	2800      	cmp	r0, #0
 800a65a:	d06f      	beq.n	800a73c <prvProcessReceivedCommands+0xf4>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a65c:	9b03      	ldr	r3, [sp, #12]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	dbf4      	blt.n	800a64c <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a662:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a664:	6963      	ldr	r3, [r4, #20]
 800a666:	b113      	cbz	r3, 800a66e <prvProcessReceivedCommands+0x26>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a668:	1d20      	adds	r0, r4, #4
 800a66a:	f7fe f9a2 	bl	80089b2 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a66e:	a802      	add	r0, sp, #8
 800a670:	f7ff ff64 	bl	800a53c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800a674:	9b03      	ldr	r3, [sp, #12]
 800a676:	2b09      	cmp	r3, #9
 800a678:	d8e8      	bhi.n	800a64c <prvProcessReceivedCommands+0x4>
 800a67a:	e8df f003 	tbb	[pc, r3]
 800a67e:	0505      	.short	0x0505
 800a680:	51383105 	.word	0x51383105
 800a684:	38310505 	.word	0x38310505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a688:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a68c:	f043 0301 	orr.w	r3, r3, #1
 800a690:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a694:	9904      	ldr	r1, [sp, #16]
 800a696:	69a5      	ldr	r5, [r4, #24]
 800a698:	460b      	mov	r3, r1
 800a69a:	4602      	mov	r2, r0
 800a69c:	4429      	add	r1, r5
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f7ff fde0 	bl	800a264 <prvInsertTimerInActiveList>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d0d1      	beq.n	800a64c <prvProcessReceivedCommands+0x4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6a8:	6a23      	ldr	r3, [r4, #32]
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6ae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a6b2:	f013 0f04 	tst.w	r3, #4
 800a6b6:	d0c9      	beq.n	800a64c <prvProcessReceivedCommands+0x4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a6b8:	69a2      	ldr	r2, [r4, #24]
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	9100      	str	r1, [sp, #0]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	9804      	ldr	r0, [sp, #16]
 800a6c2:	4402      	add	r2, r0
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f7ff fec5 	bl	800a454 <xTimerGenericCommand>
							configASSERT( xResult );
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	d1be      	bne.n	800a64c <prvProcessReceivedCommands+0x4>
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	e7fe      	b.n	800a6de <prvProcessReceivedCommands+0x96>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6e0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a6e4:	f023 0301 	bic.w	r3, r3, #1
 800a6e8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800a6ec:	e7ae      	b.n	800a64c <prvProcessReceivedCommands+0x4>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6ee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a6f2:	f043 0301 	orr.w	r3, r3, #1
 800a6f6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a6fa:	9904      	ldr	r1, [sp, #16]
 800a6fc:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a6fe:	b131      	cbz	r1, 800a70e <prvProcessReceivedCommands+0xc6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a700:	4603      	mov	r3, r0
 800a702:	4602      	mov	r2, r0
 800a704:	4401      	add	r1, r0
 800a706:	4620      	mov	r0, r4
 800a708:	f7ff fdac 	bl	800a264 <prvInsertTimerInActiveList>
					break;
 800a70c:	e79e      	b.n	800a64c <prvProcessReceivedCommands+0x4>
 800a70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	e7fe      	b.n	800a71e <prvProcessReceivedCommands+0xd6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a720:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a724:	f013 0f02 	tst.w	r3, #2
 800a728:	d004      	beq.n	800a734 <prvProcessReceivedCommands+0xec>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a72a:	f023 0301 	bic.w	r3, r3, #1
 800a72e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a732:	e78b      	b.n	800a64c <prvProcessReceivedCommands+0x4>
							vPortFree( pxTimer );
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fab7 	bl	800aca8 <vPortFree>
 800a73a:	e787      	b.n	800a64c <prvProcessReceivedCommands+0x4>
}
 800a73c:	b007      	add	sp, #28
 800a73e:	bd30      	pop	{r4, r5, pc}
 800a740:	20000a74 	.word	0x20000a74

0800a744 <prvTimerTask>:
{
 800a744:	b500      	push	{lr}
 800a746:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a748:	a801      	add	r0, sp, #4
 800a74a:	f7ff fd7b 	bl	800a244 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a74e:	9901      	ldr	r1, [sp, #4]
 800a750:	f7ff ff40 	bl	800a5d4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800a754:	f7ff ff78 	bl	800a648 <prvProcessReceivedCommands>
 800a758:	e7f6      	b.n	800a748 <prvTimerTask+0x4>
	...

0800a75c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a75c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800a75e:	2300      	movs	r3, #0
 800a760:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a762:	4b0d      	ldr	r3, [pc, #52]	; (800a798 <prvTaskExitError+0x3c>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a76a:	d008      	beq.n	800a77e <prvTaskExitError+0x22>
 800a76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	e7fe      	b.n	800a77c <prvTaskExitError+0x20>
 800a77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a78e:	9b01      	ldr	r3, [sp, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d0fc      	beq.n	800a78e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a794:	b002      	add	sp, #8
 800a796:	4770      	bx	lr
 800a798:	20000044 	.word	0x20000044

0800a79c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a79c:	4808      	ldr	r0, [pc, #32]	; (800a7c0 <prvPortStartFirstTask+0x24>)
 800a79e:	6800      	ldr	r0, [r0, #0]
 800a7a0:	6800      	ldr	r0, [r0, #0]
 800a7a2:	f380 8808 	msr	MSP, r0
 800a7a6:	f04f 0000 	mov.w	r0, #0
 800a7aa:	f380 8814 	msr	CONTROL, r0
 800a7ae:	b662      	cpsie	i
 800a7b0:	b661      	cpsie	f
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	df00      	svc	0
 800a7bc:	bf00      	nop
 800a7be:	0000      	.short	0x0000
 800a7c0:	e000ed08 	.word	0xe000ed08

0800a7c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a7c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a7d4 <vPortEnableVFP+0x10>
 800a7c8:	6801      	ldr	r1, [r0, #0]
 800a7ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a7ce:	6001      	str	r1, [r0, #0]
 800a7d0:	4770      	bx	lr
 800a7d2:	0000      	.short	0x0000
 800a7d4:	e000ed88 	.word	0xe000ed88

0800a7d8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a7d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7dc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a7e0:	f021 0101 	bic.w	r1, r1, #1
 800a7e4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7e8:	4b05      	ldr	r3, [pc, #20]	; (800a800 <pxPortInitialiseStack+0x28>)
 800a7ea:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7ee:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7f2:	f06f 0302 	mvn.w	r3, #2
 800a7f6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800a7fa:	3844      	subs	r0, #68	; 0x44
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	0800a75d 	.word	0x0800a75d
	...

0800a810 <SVC_Handler>:
	__asm volatile (
 800a810:	4b07      	ldr	r3, [pc, #28]	; (800a830 <pxCurrentTCBConst2>)
 800a812:	6819      	ldr	r1, [r3, #0]
 800a814:	6808      	ldr	r0, [r1, #0]
 800a816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81a:	f380 8809 	msr	PSP, r0
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f04f 0000 	mov.w	r0, #0
 800a826:	f380 8811 	msr	BASEPRI, r0
 800a82a:	4770      	bx	lr
 800a82c:	f3af 8000 	nop.w

0800a830 <pxCurrentTCBConst2>:
 800a830:	2000084c 	.word	0x2000084c

0800a834 <vPortEnterCritical>:
 800a834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a844:	4a0a      	ldr	r2, [pc, #40]	; (800a870 <vPortEnterCritical+0x3c>)
 800a846:	6813      	ldr	r3, [r2, #0]
 800a848:	3301      	adds	r3, #1
 800a84a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d000      	beq.n	800a852 <vPortEnterCritical+0x1e>
}
 800a850:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a852:	4b08      	ldr	r3, [pc, #32]	; (800a874 <vPortEnterCritical+0x40>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a85a:	d0f9      	beq.n	800a850 <vPortEnterCritical+0x1c>
 800a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a860:	f383 8811 	msr	BASEPRI, r3
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	e7fe      	b.n	800a86c <vPortEnterCritical+0x38>
 800a86e:	bf00      	nop
 800a870:	20000044 	.word	0x20000044
 800a874:	e000ed04 	.word	0xe000ed04

0800a878 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a878:	4b09      	ldr	r3, [pc, #36]	; (800a8a0 <vPortExitCritical+0x28>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	b943      	cbnz	r3, 800a890 <vPortExitCritical+0x18>
 800a87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	e7fe      	b.n	800a88e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a890:	3b01      	subs	r3, #1
 800a892:	4a03      	ldr	r2, [pc, #12]	; (800a8a0 <vPortExitCritical+0x28>)
 800a894:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a896:	b90b      	cbnz	r3, 800a89c <vPortExitCritical+0x24>
	__asm volatile
 800a898:	f383 8811 	msr	BASEPRI, r3
}
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	20000044 	.word	0x20000044
	...

0800a8b0 <PendSV_Handler>:
	__asm volatile
 800a8b0:	f3ef 8009 	mrs	r0, PSP
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	4b15      	ldr	r3, [pc, #84]	; (800a910 <pxCurrentTCBConst>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	f01e 0f10 	tst.w	lr, #16
 800a8c0:	bf08      	it	eq
 800a8c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ca:	6010      	str	r0, [r2, #0]
 800a8cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8d4:	f380 8811 	msr	BASEPRI, r0
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f7ff f8c4 	bl	8009a6c <vTaskSwitchContext>
 800a8e4:	f04f 0000 	mov.w	r0, #0
 800a8e8:	f380 8811 	msr	BASEPRI, r0
 800a8ec:	bc09      	pop	{r0, r3}
 800a8ee:	6819      	ldr	r1, [r3, #0]
 800a8f0:	6808      	ldr	r0, [r1, #0]
 800a8f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f6:	f01e 0f10 	tst.w	lr, #16
 800a8fa:	bf08      	it	eq
 800a8fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a900:	f380 8809 	msr	PSP, r0
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	f3af 8000 	nop.w

0800a910 <pxCurrentTCBConst>:
 800a910:	2000084c 	.word	0x2000084c

0800a914 <SysTick_Handler>:
{
 800a914:	b508      	push	{r3, lr}
	__asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a926:	f7fe ff23 	bl	8009770 <xTaskIncrementTick>
 800a92a:	b118      	cbz	r0, 800a934 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a92c:	4b03      	ldr	r3, [pc, #12]	; (800a93c <SysTick_Handler+0x28>)
 800a92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a932:	601a      	str	r2, [r3, #0]
	__asm volatile
 800a934:	2300      	movs	r3, #0
 800a936:	f383 8811 	msr	BASEPRI, r3
}
 800a93a:	bd08      	pop	{r3, pc}
 800a93c:	e000ed04 	.word	0xe000ed04

0800a940 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a940:	4a08      	ldr	r2, [pc, #32]	; (800a964 <vPortSetupTimerInterrupt+0x24>)
 800a942:	2300      	movs	r3, #0
 800a944:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a946:	4908      	ldr	r1, [pc, #32]	; (800a968 <vPortSetupTimerInterrupt+0x28>)
 800a948:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a94a:	4b08      	ldr	r3, [pc, #32]	; (800a96c <vPortSetupTimerInterrupt+0x2c>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4908      	ldr	r1, [pc, #32]	; (800a970 <vPortSetupTimerInterrupt+0x30>)
 800a950:	fba1 1303 	umull	r1, r3, r1, r3
 800a954:	099b      	lsrs	r3, r3, #6
 800a956:	3b01      	subs	r3, #1
 800a958:	4906      	ldr	r1, [pc, #24]	; (800a974 <vPortSetupTimerInterrupt+0x34>)
 800a95a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a95c:	2307      	movs	r3, #7
 800a95e:	6013      	str	r3, [r2, #0]
}
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	e000e010 	.word	0xe000e010
 800a968:	e000e018 	.word	0xe000e018
 800a96c:	20000038 	.word	0x20000038
 800a970:	10624dd3 	.word	0x10624dd3
 800a974:	e000e014 	.word	0xe000e014

0800a978 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a978:	4b3a      	ldr	r3, [pc, #232]	; (800aa64 <xPortStartScheduler+0xec>)
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	4b3a      	ldr	r3, [pc, #232]	; (800aa68 <xPortStartScheduler+0xf0>)
 800a97e:	429a      	cmp	r2, r3
 800a980:	d00d      	beq.n	800a99e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a982:	4b38      	ldr	r3, [pc, #224]	; (800aa64 <xPortStartScheduler+0xec>)
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	4b39      	ldr	r3, [pc, #228]	; (800aa6c <xPortStartScheduler+0xf4>)
 800a988:	429a      	cmp	r2, r3
 800a98a:	d111      	bne.n	800a9b0 <xPortStartScheduler+0x38>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	e7fe      	b.n	800a99c <xPortStartScheduler+0x24>
 800a99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	e7fe      	b.n	800a9ae <xPortStartScheduler+0x36>
{
 800a9b0:	b510      	push	{r4, lr}
 800a9b2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9b4:	4b2e      	ldr	r3, [pc, #184]	; (800aa70 <xPortStartScheduler+0xf8>)
 800a9b6:	781a      	ldrb	r2, [r3, #0]
 800a9b8:	b2d2      	uxtb	r2, r2
 800a9ba:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9bc:	22ff      	movs	r2, #255	; 0xff
 800a9be:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a9cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a9d0:	4a28      	ldr	r2, [pc, #160]	; (800aa74 <xPortStartScheduler+0xfc>)
 800a9d2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9d4:	4b28      	ldr	r3, [pc, #160]	; (800aa78 <xPortStartScheduler+0x100>)
 800a9d6:	2207      	movs	r2, #7
 800a9d8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9da:	e009      	b.n	800a9f0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800a9dc:	4a26      	ldr	r2, [pc, #152]	; (800aa78 <xPortStartScheduler+0x100>)
 800a9de:	6813      	ldr	r3, [r2, #0]
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a9e8:	005b      	lsls	r3, r3, #1
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a9f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a9f8:	d1f0      	bne.n	800a9dc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9fa:	4b1f      	ldr	r3, [pc, #124]	; (800aa78 <xPortStartScheduler+0x100>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2b03      	cmp	r3, #3
 800aa00:	d008      	beq.n	800aa14 <xPortStartScheduler+0x9c>
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	e7fe      	b.n	800aa12 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa14:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa1a:	4a17      	ldr	r2, [pc, #92]	; (800aa78 <xPortStartScheduler+0x100>)
 800aa1c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa1e:	9b01      	ldr	r3, [sp, #4]
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	4a13      	ldr	r2, [pc, #76]	; (800aa70 <xPortStartScheduler+0xf8>)
 800aa24:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa26:	4b15      	ldr	r3, [pc, #84]	; (800aa7c <xPortStartScheduler+0x104>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800aa2e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800aa36:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800aa38:	f7ff ff82 	bl	800a940 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800aa3c:	2400      	movs	r4, #0
 800aa3e:	4b10      	ldr	r3, [pc, #64]	; (800aa80 <xPortStartScheduler+0x108>)
 800aa40:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800aa42:	f7ff febf 	bl	800a7c4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa46:	4a0f      	ldr	r2, [pc, #60]	; (800aa84 <xPortStartScheduler+0x10c>)
 800aa48:	6813      	ldr	r3, [r2, #0]
 800aa4a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aa4e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800aa50:	f7ff fea4 	bl	800a79c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800aa54:	f7ff f80a 	bl	8009a6c <vTaskSwitchContext>
	prvTaskExitError();
 800aa58:	f7ff fe80 	bl	800a75c <prvTaskExitError>
}
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	b002      	add	sp, #8
 800aa60:	bd10      	pop	{r4, pc}
 800aa62:	bf00      	nop
 800aa64:	e000ed00 	.word	0xe000ed00
 800aa68:	410fc271 	.word	0x410fc271
 800aa6c:	410fc270 	.word	0x410fc270
 800aa70:	e000e400 	.word	0xe000e400
 800aa74:	20000a7c 	.word	0x20000a7c
 800aa78:	20000a80 	.word	0x20000a80
 800aa7c:	e000ed20 	.word	0xe000ed20
 800aa80:	20000044 	.word	0x20000044
 800aa84:	e000ef34 	.word	0xe000ef34

0800aa88 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa88:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa8c:	2b0f      	cmp	r3, #15
 800aa8e:	d90f      	bls.n	800aab0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa90:	4a10      	ldr	r2, [pc, #64]	; (800aad4 <vPortValidateInterruptPriority+0x4c>)
 800aa92:	5c9b      	ldrb	r3, [r3, r2]
 800aa94:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa96:	4a10      	ldr	r2, [pc, #64]	; (800aad8 <vPortValidateInterruptPriority+0x50>)
 800aa98:	7812      	ldrb	r2, [r2, #0]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d908      	bls.n	800aab0 <vPortValidateInterruptPriority+0x28>
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	e7fe      	b.n	800aaae <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aab0:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <vPortValidateInterruptPriority+0x54>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aab8:	4a09      	ldr	r2, [pc, #36]	; (800aae0 <vPortValidateInterruptPriority+0x58>)
 800aaba:	6812      	ldr	r2, [r2, #0]
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d908      	bls.n	800aad2 <vPortValidateInterruptPriority+0x4a>
 800aac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac4:	f383 8811 	msr	BASEPRI, r3
 800aac8:	f3bf 8f6f 	isb	sy
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	e7fe      	b.n	800aad0 <vPortValidateInterruptPriority+0x48>
	}
 800aad2:	4770      	bx	lr
 800aad4:	e000e3f0 	.word	0xe000e3f0
 800aad8:	20000a7c 	.word	0x20000a7c
 800aadc:	e000ed0c 	.word	0xe000ed0c
 800aae0:	20000a80 	.word	0x20000a80

0800aae4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aae4:	4a12      	ldr	r2, [pc, #72]	; (800ab30 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aae6:	f012 0f07 	tst.w	r2, #7
 800aaea:	d01e      	beq.n	800ab2a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aaec:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aaee:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aaf2:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 800aaf6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aaf8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aafa:	480e      	ldr	r0, [pc, #56]	; (800ab34 <prvHeapInit+0x50>)
 800aafc:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aafe:	2100      	movs	r1, #0
 800ab00:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab02:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800ab04:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab06:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800ab0a:	480b      	ldr	r0, [pc, #44]	; (800ab38 <prvHeapInit+0x54>)
 800ab0c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800ab0e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab10:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab12:	1a99      	subs	r1, r3, r2
 800ab14:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab16:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab18:	4b08      	ldr	r3, [pc, #32]	; (800ab3c <prvHeapInit+0x58>)
 800ab1a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab1c:	4b08      	ldr	r3, [pc, #32]	; (800ab40 <prvHeapInit+0x5c>)
 800ab1e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab20:	4b08      	ldr	r3, [pc, #32]	; (800ab44 <prvHeapInit+0x60>)
 800ab22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ab26:	601a      	str	r2, [r3, #0]
}
 800ab28:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab2e:	e7e4      	b.n	800aafa <prvHeapInit+0x16>
 800ab30:	20000a88 	.word	0x20000a88
 800ab34:	20002a94 	.word	0x20002a94
 800ab38:	20000a84 	.word	0x20000a84
 800ab3c:	20002a90 	.word	0x20002a90
 800ab40:	20002a8c 	.word	0x20002a8c
 800ab44:	20002a88 	.word	0x20002a88

0800ab48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab48:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab4a:	4b13      	ldr	r3, [pc, #76]	; (800ab98 <prvInsertBlockIntoFreeList+0x50>)
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	4282      	cmp	r2, r0
 800ab50:	d31b      	bcc.n	800ab8a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab52:	6859      	ldr	r1, [r3, #4]
 800ab54:	185c      	adds	r4, r3, r1
 800ab56:	4284      	cmp	r4, r0
 800ab58:	d103      	bne.n	800ab62 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab5a:	6840      	ldr	r0, [r0, #4]
 800ab5c:	4401      	add	r1, r0
 800ab5e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab60:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab62:	6841      	ldr	r1, [r0, #4]
 800ab64:	1844      	adds	r4, r0, r1
 800ab66:	42a2      	cmp	r2, r4
 800ab68:	d113      	bne.n	800ab92 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab6a:	4c0c      	ldr	r4, [pc, #48]	; (800ab9c <prvInsertBlockIntoFreeList+0x54>)
 800ab6c:	6824      	ldr	r4, [r4, #0]
 800ab6e:	42a2      	cmp	r2, r4
 800ab70:	d00d      	beq.n	800ab8e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab72:	6852      	ldr	r2, [r2, #4]
 800ab74:	4411      	add	r1, r2
 800ab76:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	6812      	ldr	r2, [r2, #0]
 800ab7c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab7e:	4298      	cmp	r0, r3
 800ab80:	d000      	beq.n	800ab84 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab82:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab88:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	e7de      	b.n	800ab4c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab8e:	6004      	str	r4, [r0, #0]
 800ab90:	e7f5      	b.n	800ab7e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab92:	6002      	str	r2, [r0, #0]
 800ab94:	e7f3      	b.n	800ab7e <prvInsertBlockIntoFreeList+0x36>
 800ab96:	bf00      	nop
 800ab98:	20002a94 	.word	0x20002a94
 800ab9c:	20000a84 	.word	0x20000a84

0800aba0 <pvPortMalloc>:
{
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800aba4:	f7fe fdd6 	bl	8009754 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800aba8:	4b3a      	ldr	r3, [pc, #232]	; (800ac94 <pvPortMalloc+0xf4>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	b1bb      	cbz	r3, 800abde <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abae:	4b3a      	ldr	r3, [pc, #232]	; (800ac98 <pvPortMalloc+0xf8>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	421c      	tst	r4, r3
 800abb4:	d163      	bne.n	800ac7e <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 800abb6:	b1ac      	cbz	r4, 800abe4 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 800abb8:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abba:	f014 0f07 	tst.w	r4, #7
 800abbe:	d011      	beq.n	800abe4 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abc0:	f024 0407 	bic.w	r4, r4, #7
 800abc4:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abc6:	f004 0307 	and.w	r3, r4, #7
 800abca:	b15b      	cbz	r3, 800abe4 <pvPortMalloc+0x44>
 800abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	e7fe      	b.n	800abdc <pvPortMalloc+0x3c>
			prvHeapInit();
 800abde:	f7ff ff81 	bl	800aae4 <prvHeapInit>
 800abe2:	e7e4      	b.n	800abae <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abe4:	2c00      	cmp	r4, #0
 800abe6:	d04c      	beq.n	800ac82 <pvPortMalloc+0xe2>
 800abe8:	4b2c      	ldr	r3, [pc, #176]	; (800ac9c <pvPortMalloc+0xfc>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	42a3      	cmp	r3, r4
 800abee:	d34a      	bcc.n	800ac86 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 800abf0:	4b2b      	ldr	r3, [pc, #172]	; (800aca0 <pvPortMalloc+0x100>)
 800abf2:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abf4:	e001      	b.n	800abfa <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 800abf6:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800abf8:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abfa:	686a      	ldr	r2, [r5, #4]
 800abfc:	42a2      	cmp	r2, r4
 800abfe:	d202      	bcs.n	800ac06 <pvPortMalloc+0x66>
 800ac00:	682a      	ldr	r2, [r5, #0]
 800ac02:	2a00      	cmp	r2, #0
 800ac04:	d1f7      	bne.n	800abf6 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 800ac06:	4a23      	ldr	r2, [pc, #140]	; (800ac94 <pvPortMalloc+0xf4>)
 800ac08:	6812      	ldr	r2, [r2, #0]
 800ac0a:	42aa      	cmp	r2, r5
 800ac0c:	d03d      	beq.n	800ac8a <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac0e:	681e      	ldr	r6, [r3, #0]
 800ac10:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac12:	682a      	ldr	r2, [r5, #0]
 800ac14:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac16:	686b      	ldr	r3, [r5, #4]
 800ac18:	1b1b      	subs	r3, r3, r4
 800ac1a:	2b10      	cmp	r3, #16
 800ac1c:	d910      	bls.n	800ac40 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac1e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac20:	f010 0f07 	tst.w	r0, #7
 800ac24:	d008      	beq.n	800ac38 <pvPortMalloc+0x98>
 800ac26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2a:	f383 8811 	msr	BASEPRI, r3
 800ac2e:	f3bf 8f6f 	isb	sy
 800ac32:	f3bf 8f4f 	dsb	sy
 800ac36:	e7fe      	b.n	800ac36 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac38:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac3a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac3c:	f7ff ff84 	bl	800ab48 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac40:	686a      	ldr	r2, [r5, #4]
 800ac42:	4916      	ldr	r1, [pc, #88]	; (800ac9c <pvPortMalloc+0xfc>)
 800ac44:	680b      	ldr	r3, [r1, #0]
 800ac46:	1a9b      	subs	r3, r3, r2
 800ac48:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac4a:	4916      	ldr	r1, [pc, #88]	; (800aca4 <pvPortMalloc+0x104>)
 800ac4c:	6809      	ldr	r1, [r1, #0]
 800ac4e:	428b      	cmp	r3, r1
 800ac50:	d201      	bcs.n	800ac56 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac52:	4914      	ldr	r1, [pc, #80]	; (800aca4 <pvPortMalloc+0x104>)
 800ac54:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac56:	4b10      	ldr	r3, [pc, #64]	; (800ac98 <pvPortMalloc+0xf8>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800ac62:	f7fe fe11 	bl	8009888 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac66:	f016 0f07 	tst.w	r6, #7
 800ac6a:	d010      	beq.n	800ac8e <pvPortMalloc+0xee>
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	e7fe      	b.n	800ac7c <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 800ac7e:	2600      	movs	r6, #0
 800ac80:	e7ef      	b.n	800ac62 <pvPortMalloc+0xc2>
 800ac82:	2600      	movs	r6, #0
 800ac84:	e7ed      	b.n	800ac62 <pvPortMalloc+0xc2>
 800ac86:	2600      	movs	r6, #0
 800ac88:	e7eb      	b.n	800ac62 <pvPortMalloc+0xc2>
 800ac8a:	2600      	movs	r6, #0
 800ac8c:	e7e9      	b.n	800ac62 <pvPortMalloc+0xc2>
}
 800ac8e:	4630      	mov	r0, r6
 800ac90:	bd70      	pop	{r4, r5, r6, pc}
 800ac92:	bf00      	nop
 800ac94:	20000a84 	.word	0x20000a84
 800ac98:	20002a88 	.word	0x20002a88
 800ac9c:	20002a8c 	.word	0x20002a8c
 800aca0:	20002a94 	.word	0x20002a94
 800aca4:	20002a90 	.word	0x20002a90

0800aca8 <vPortFree>:
	if( pv != NULL )
 800aca8:	b380      	cbz	r0, 800ad0c <vPortFree+0x64>
{
 800acaa:	b538      	push	{r3, r4, r5, lr}
 800acac:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800acae:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800acb2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800acb6:	4916      	ldr	r1, [pc, #88]	; (800ad10 <vPortFree+0x68>)
 800acb8:	6809      	ldr	r1, [r1, #0]
 800acba:	420a      	tst	r2, r1
 800acbc:	d108      	bne.n	800acd0 <vPortFree+0x28>
 800acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	e7fe      	b.n	800acce <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800acd0:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800acd4:	b140      	cbz	r0, 800ace8 <vPortFree+0x40>
 800acd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	e7fe      	b.n	800ace6 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ace8:	ea22 0201 	bic.w	r2, r2, r1
 800acec:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800acf0:	f7fe fd30 	bl	8009754 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800acf4:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800acf8:	4a06      	ldr	r2, [pc, #24]	; (800ad14 <vPortFree+0x6c>)
 800acfa:	6813      	ldr	r3, [r2, #0]
 800acfc:	440b      	add	r3, r1
 800acfe:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad00:	4628      	mov	r0, r5
 800ad02:	f7ff ff21 	bl	800ab48 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800ad06:	f7fe fdbf 	bl	8009888 <xTaskResumeAll>
}
 800ad0a:	bd38      	pop	{r3, r4, r5, pc}
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	20002a88 	.word	0x20002a88
 800ad14:	20002a8c 	.word	0x20002a8c

0800ad18 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 800ad18:	4603      	mov	r3, r0
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;
 800ad1a:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800ad1c:	4608      	mov	r0, r1

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800ad1e:	e004      	b.n	800ad2a <prvGetNumberOfParameters+0x12>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800ad20:	b911      	cbnz	r1, 800ad28 <prvGetNumberOfParameters+0x10>
			{
				cParameters++;
 800ad22:	3001      	adds	r0, #1
 800ad24:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800ad26:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800ad28:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800ad2a:	781a      	ldrb	r2, [r3, #0]
 800ad2c:	b11a      	cbz	r2, 800ad36 <prvGetNumberOfParameters+0x1e>
		if( ( *pcCommandString ) == ' ' )
 800ad2e:	2a20      	cmp	r2, #32
 800ad30:	d0f6      	beq.n	800ad20 <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800ad32:	2100      	movs	r1, #0
 800ad34:	e7f8      	b.n	800ad28 <prvGetNumberOfParameters+0x10>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800ad36:	b901      	cbnz	r1, 800ad3a <prvGetNumberOfParameters+0x22>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800ad38:	4770      	bx	lr
		cParameters--;
 800ad3a:	3801      	subs	r0, #1
 800ad3c:	b240      	sxtb	r0, r0
 800ad3e:	e7fb      	b.n	800ad38 <prvGetNumberOfParameters+0x20>

0800ad40 <prvHelpCommand>:
{
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	460a      	mov	r2, r1
	if( pxCommand == NULL )
 800ad44:	4b09      	ldr	r3, [pc, #36]	; (800ad6c <prvHelpCommand+0x2c>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	b153      	cbz	r3, 800ad60 <prvHelpCommand+0x20>
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800ad4a:	4c08      	ldr	r4, [pc, #32]	; (800ad6c <prvHelpCommand+0x2c>)
 800ad4c:	6825      	ldr	r5, [r4, #0]
 800ad4e:	682b      	ldr	r3, [r5, #0]
 800ad50:	6859      	ldr	r1, [r3, #4]
 800ad52:	f000 fd23 	bl	800b79c <strncpy>
	pxCommand = pxCommand->pxNext;
 800ad56:	686b      	ldr	r3, [r5, #4]
 800ad58:	6023      	str	r3, [r4, #0]
	if( pxCommand == NULL )
 800ad5a:	b12b      	cbz	r3, 800ad68 <prvHelpCommand+0x28>
		xReturn = pdTRUE;
 800ad5c:	2001      	movs	r0, #1
}
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
		pxCommand = &xRegisteredCommands;
 800ad60:	4b02      	ldr	r3, [pc, #8]	; (800ad6c <prvHelpCommand+0x2c>)
 800ad62:	4903      	ldr	r1, [pc, #12]	; (800ad70 <prvHelpCommand+0x30>)
 800ad64:	6019      	str	r1, [r3, #0]
 800ad66:	e7f0      	b.n	800ad4a <prvHelpCommand+0xa>
		xReturn = pdFALSE;
 800ad68:	2000      	movs	r0, #0
 800ad6a:	e7f8      	b.n	800ad5e <prvHelpCommand+0x1e>
 800ad6c:	20002aa0 	.word	0x20002aa0
 800ad70:	2000004c 	.word	0x2000004c

0800ad74 <FreeRTOS_CLIRegisterCommand>:
{
 800ad74:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxCommandToRegister );
 800ad76:	b940      	cbnz	r0, 800ad8a <FreeRTOS_CLIRegisterCommand+0x16>
 800ad78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	e7fe      	b.n	800ad88 <FreeRTOS_CLIRegisterCommand+0x14>
 800ad8a:	4605      	mov	r5, r0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800ad8c:	2008      	movs	r0, #8
 800ad8e:	f7ff ff07 	bl	800aba0 <pvPortMalloc>
	configASSERT( pxNewListItem );
 800ad92:	4604      	mov	r4, r0
 800ad94:	b940      	cbnz	r0, 800ada8 <FreeRTOS_CLIRegisterCommand+0x34>
 800ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	e7fe      	b.n	800ada6 <FreeRTOS_CLIRegisterCommand+0x32>
		taskENTER_CRITICAL();
 800ada8:	f7ff fd44 	bl	800a834 <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800adac:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800adae:	2300      	movs	r3, #0
 800adb0:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800adb2:	4b04      	ldr	r3, [pc, #16]	; (800adc4 <FreeRTOS_CLIRegisterCommand+0x50>)
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800adb8:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800adba:	f7ff fd5d 	bl	800a878 <vPortExitCritical>
}
 800adbe:	2001      	movs	r0, #1
 800adc0:	bd38      	pop	{r3, r4, r5, pc}
 800adc2:	bf00      	nop
 800adc4:	20000048 	.word	0x20000048

0800adc8 <FreeRTOS_CLIProcessCommand>:
{
 800adc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adcc:	4606      	mov	r6, r0
 800adce:	4689      	mov	r9, r1
 800add0:	4690      	mov	r8, r2
	if( pxCommand == NULL )
 800add2:	4b2a      	ldr	r3, [pc, #168]	; (800ae7c <FreeRTOS_CLIProcessCommand+0xb4>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	b1ab      	cbz	r3, 800ae04 <FreeRTOS_CLIProcessCommand+0x3c>
BaseType_t xReturn = pdTRUE;
 800add8:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800adda:	4b28      	ldr	r3, [pc, #160]	; (800ae7c <FreeRTOS_CLIProcessCommand+0xb4>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	b10b      	cbz	r3, 800ade4 <FreeRTOS_CLIProcessCommand+0x1c>
 800ade0:	2c00      	cmp	r4, #0
 800ade2:	d03b      	beq.n	800ae5c <FreeRTOS_CLIProcessCommand+0x94>
	else if( pxCommand != NULL )
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d042      	beq.n	800ae6e <FreeRTOS_CLIProcessCommand+0xa6>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	4632      	mov	r2, r6
 800adee:	4641      	mov	r1, r8
 800adf0:	4648      	mov	r0, r9
 800adf2:	4798      	blx	r3
		if( xReturn == pdFALSE )
 800adf4:	4604      	mov	r4, r0
 800adf6:	b910      	cbnz	r0, 800adfe <FreeRTOS_CLIProcessCommand+0x36>
			pxCommand = NULL;
 800adf8:	4b20      	ldr	r3, [pc, #128]	; (800ae7c <FreeRTOS_CLIProcessCommand+0xb4>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	601a      	str	r2, [r3, #0]
}
 800adfe:	4620      	mov	r0, r4
 800ae00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ae04:	4b1d      	ldr	r3, [pc, #116]	; (800ae7c <FreeRTOS_CLIProcessCommand+0xb4>)
 800ae06:	4a1e      	ldr	r2, [pc, #120]	; (800ae80 <FreeRTOS_CLIProcessCommand+0xb8>)
 800ae08:	601a      	str	r2, [r3, #0]
 800ae0a:	e008      	b.n	800ae1e <FreeRTOS_CLIProcessCommand+0x56>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	4629      	mov	r1, r5
 800ae10:	4630      	mov	r0, r6
 800ae12:	f000 fcb1 	bl	800b778 <strncmp>
 800ae16:	b180      	cbz	r0, 800ae3a <FreeRTOS_CLIProcessCommand+0x72>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ae18:	6862      	ldr	r2, [r4, #4]
 800ae1a:	4b18      	ldr	r3, [pc, #96]	; (800ae7c <FreeRTOS_CLIProcessCommand+0xb4>)
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	4b17      	ldr	r3, [pc, #92]	; (800ae7c <FreeRTOS_CLIProcessCommand+0xb4>)
 800ae20:	681c      	ldr	r4, [r3, #0]
 800ae22:	b1cc      	cbz	r4, 800ae58 <FreeRTOS_CLIProcessCommand+0x90>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800ae24:	6827      	ldr	r7, [r4, #0]
 800ae26:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 800ae28:	4628      	mov	r0, r5
 800ae2a:	f7f5 f9d9 	bl	80001e0 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ae2e:	5c33      	ldrb	r3, [r6, r0]
 800ae30:	2b20      	cmp	r3, #32
 800ae32:	d0eb      	beq.n	800ae0c <FreeRTOS_CLIProcessCommand+0x44>
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1ef      	bne.n	800ae18 <FreeRTOS_CLIProcessCommand+0x50>
 800ae38:	e7e8      	b.n	800ae0c <FreeRTOS_CLIProcessCommand+0x44>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800ae3a:	f997 400c 	ldrsb.w	r4, [r7, #12]
 800ae3e:	2c00      	cmp	r4, #0
 800ae40:	da01      	bge.n	800ae46 <FreeRTOS_CLIProcessCommand+0x7e>
BaseType_t xReturn = pdTRUE;
 800ae42:	2401      	movs	r4, #1
 800ae44:	e7c9      	b.n	800adda <FreeRTOS_CLIProcessCommand+0x12>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800ae46:	4630      	mov	r0, r6
 800ae48:	f7ff ff66 	bl	800ad18 <prvGetNumberOfParameters>
 800ae4c:	4284      	cmp	r4, r0
 800ae4e:	d001      	beq.n	800ae54 <FreeRTOS_CLIProcessCommand+0x8c>
							xReturn = pdFALSE;
 800ae50:	2400      	movs	r4, #0
 800ae52:	e7c2      	b.n	800adda <FreeRTOS_CLIProcessCommand+0x12>
BaseType_t xReturn = pdTRUE;
 800ae54:	2401      	movs	r4, #1
 800ae56:	e7c0      	b.n	800adda <FreeRTOS_CLIProcessCommand+0x12>
 800ae58:	2401      	movs	r4, #1
 800ae5a:	e7be      	b.n	800adda <FreeRTOS_CLIProcessCommand+0x12>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ae5c:	4642      	mov	r2, r8
 800ae5e:	4909      	ldr	r1, [pc, #36]	; (800ae84 <FreeRTOS_CLIProcessCommand+0xbc>)
 800ae60:	4648      	mov	r0, r9
 800ae62:	f000 fc9b 	bl	800b79c <strncpy>
		pxCommand = NULL;
 800ae66:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <FreeRTOS_CLIProcessCommand+0xb4>)
 800ae68:	2200      	movs	r2, #0
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	e7c7      	b.n	800adfe <FreeRTOS_CLIProcessCommand+0x36>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ae6e:	4642      	mov	r2, r8
 800ae70:	4905      	ldr	r1, [pc, #20]	; (800ae88 <FreeRTOS_CLIProcessCommand+0xc0>)
 800ae72:	4648      	mov	r0, r9
 800ae74:	f000 fc92 	bl	800b79c <strncpy>
		xReturn = pdFALSE;
 800ae78:	2400      	movs	r4, #0
	return xReturn;
 800ae7a:	e7c0      	b.n	800adfe <FreeRTOS_CLIProcessCommand+0x36>
 800ae7c:	20002a9c 	.word	0x20002a9c
 800ae80:	2000004c 	.word	0x2000004c
 800ae84:	0800c8a0 	.word	0x0800c8a0
 800ae88:	0800c8f8 	.word	0x0800c8f8

0800ae8c <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d200      	bcs.n	800ae92 <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 800ae90:	5488      	strb	r0, [r1, r2]
  }
}
 800ae92:	4770      	bx	lr

0800ae94 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800ae94:	4770      	bx	lr

0800ae96 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
 800ae96:	2300      	movs	r3, #0
  while (_is_digit(**str)) {
 800ae98:	e007      	b.n	800aeaa <_atoi+0x14>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800ae9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ae9e:	005a      	lsls	r2, r3, #1
 800aea0:	1c4b      	adds	r3, r1, #1
 800aea2:	6003      	str	r3, [r0, #0]
 800aea4:	780b      	ldrb	r3, [r1, #0]
 800aea6:	4413      	add	r3, r2
 800aea8:	3b30      	subs	r3, #48	; 0x30
  while (_is_digit(**str)) {
 800aeaa:	6801      	ldr	r1, [r0, #0]
 800aeac:	780a      	ldrb	r2, [r1, #0]
  return (ch >= '0') && (ch <= '9');
 800aeae:	3a30      	subs	r2, #48	; 0x30
 800aeb0:	b2d2      	uxtb	r2, r2
  while (_is_digit(**str)) {
 800aeb2:	2a09      	cmp	r2, #9
 800aeb4:	d9f1      	bls.n	800ae9a <_atoi+0x4>
  }
  return i;
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	4770      	bx	lr

0800aeba <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800aeba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aebe:	b083      	sub	sp, #12
 800aec0:	4605      	mov	r5, r0
 800aec2:	9101      	str	r1, [sp, #4]
 800aec4:	4693      	mov	fp, r2
 800aec6:	461e      	mov	r6, r3
 800aec8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800aecc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800aece:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800aed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aed4:	f013 0f03 	tst.w	r3, #3
 800aed8:	d114      	bne.n	800af04 <_out_rev+0x4a>
    for (size_t i = len; i < width; i++) {
 800aeda:	4627      	mov	r7, r4
 800aedc:	e007      	b.n	800aeee <_out_rev+0x34>
      out(' ', buffer, idx++, maxlen);
 800aede:	f102 0a01 	add.w	sl, r2, #1
 800aee2:	4633      	mov	r3, r6
 800aee4:	9901      	ldr	r1, [sp, #4]
 800aee6:	2020      	movs	r0, #32
 800aee8:	47a8      	blx	r5
    for (size_t i = len; i < width; i++) {
 800aeea:	3701      	adds	r7, #1
      out(' ', buffer, idx++, maxlen);
 800aeec:	4652      	mov	r2, sl
    for (size_t i = len; i < width; i++) {
 800aeee:	4547      	cmp	r7, r8
 800aef0:	d3f5      	bcc.n	800aede <_out_rev+0x24>
 800aef2:	e007      	b.n	800af04 <_out_rev+0x4a>
    }
  }

  // reverse string
  while (len) {
    out(buf[--len], buffer, idx++, maxlen);
 800aef4:	3c01      	subs	r4, #1
 800aef6:	1c57      	adds	r7, r2, #1
 800aef8:	4633      	mov	r3, r6
 800aefa:	9901      	ldr	r1, [sp, #4]
 800aefc:	f819 0004 	ldrb.w	r0, [r9, r4]
 800af00:	47a8      	blx	r5
 800af02:	463a      	mov	r2, r7
  while (len) {
 800af04:	2c00      	cmp	r4, #0
 800af06:	d1f5      	bne.n	800aef4 <_out_rev+0x3a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800af08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af0a:	f013 0f02 	tst.w	r3, #2
 800af0e:	d106      	bne.n	800af1e <_out_rev+0x64>
 800af10:	e009      	b.n	800af26 <_out_rev+0x6c>
    while (idx - start_idx < width) {
      out(' ', buffer, idx++, maxlen);
 800af12:	1c54      	adds	r4, r2, #1
 800af14:	4633      	mov	r3, r6
 800af16:	9901      	ldr	r1, [sp, #4]
 800af18:	2020      	movs	r0, #32
 800af1a:	47a8      	blx	r5
 800af1c:	4622      	mov	r2, r4
    while (idx - start_idx < width) {
 800af1e:	eba2 030b 	sub.w	r3, r2, fp
 800af22:	4543      	cmp	r3, r8
 800af24:	d3f5      	bcc.n	800af12 <_out_rev+0x58>
    }
  }

  return idx;
}
 800af26:	4610      	mov	r0, r2
 800af28:	b003      	add	sp, #12
 800af2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af2e <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800af2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af32:	b085      	sub	sp, #20
 800af34:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800af36:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800af38:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 800af3c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800af40:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800af44:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800af46:	9d12      	ldr	r5, [sp, #72]	; 0x48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800af48:	f015 0f02 	tst.w	r5, #2
 800af4c:	d121      	bne.n	800af92 <_ntoa_format+0x64>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800af4e:	b17f      	cbz	r7, 800af70 <_ntoa_format+0x42>
 800af50:	f015 0f01 	tst.w	r5, #1
 800af54:	d00c      	beq.n	800af70 <_ntoa_format+0x42>
 800af56:	f1b9 0f00 	cmp.w	r9, #0
 800af5a:	d102      	bne.n	800af62 <_ntoa_format+0x34>
 800af5c:	f015 0f0c 	tst.w	r5, #12
 800af60:	d006      	beq.n	800af70 <_ntoa_format+0x42>
      width--;
 800af62:	3f01      	subs	r7, #1
 800af64:	e004      	b.n	800af70 <_ntoa_format+0x42>
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 800af66:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800af6a:	f806 c004 	strb.w	ip, [r6, r4]
 800af6e:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800af70:	4574      	cmp	r4, lr
 800af72:	d207      	bcs.n	800af84 <_ntoa_format+0x56>
 800af74:	2c1f      	cmp	r4, #31
 800af76:	d9f6      	bls.n	800af66 <_ntoa_format+0x38>
 800af78:	e004      	b.n	800af84 <_ntoa_format+0x56>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 800af7a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800af7e:	f806 c004 	strb.w	ip, [r6, r4]
 800af82:	3401      	adds	r4, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800af84:	f015 0f01 	tst.w	r5, #1
 800af88:	d003      	beq.n	800af92 <_ntoa_format+0x64>
 800af8a:	42bc      	cmp	r4, r7
 800af8c:	d201      	bcs.n	800af92 <_ntoa_format+0x64>
 800af8e:	2c1f      	cmp	r4, #31
 800af90:	d9f3      	bls.n	800af7a <_ntoa_format+0x4c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800af92:	f015 0f10 	tst.w	r5, #16
 800af96:	d017      	beq.n	800afc8 <_ntoa_format+0x9a>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800af98:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800af9c:	d104      	bne.n	800afa8 <_ntoa_format+0x7a>
 800af9e:	b11c      	cbz	r4, 800afa8 <_ntoa_format+0x7a>
 800afa0:	4574      	cmp	r4, lr
 800afa2:	d022      	beq.n	800afea <_ntoa_format+0xbc>
 800afa4:	42bc      	cmp	r4, r7
 800afa6:	d020      	beq.n	800afea <_ntoa_format+0xbc>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800afa8:	f1b8 0f10 	cmp.w	r8, #16
 800afac:	d029      	beq.n	800b002 <_ntoa_format+0xd4>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800afae:	f1b8 0f10 	cmp.w	r8, #16
 800afb2:	d031      	beq.n	800b018 <_ntoa_format+0xea>
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800afb4:	f1b8 0f02 	cmp.w	r8, #2
 800afb8:	d039      	beq.n	800b02e <_ntoa_format+0x100>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800afba:	2c1f      	cmp	r4, #31
 800afbc:	d804      	bhi.n	800afc8 <_ntoa_format+0x9a>
      buf[len++] = '0';
 800afbe:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800afc2:	f806 c004 	strb.w	ip, [r6, r4]
 800afc6:	3401      	adds	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800afc8:	2c1f      	cmp	r4, #31
 800afca:	d83d      	bhi.n	800b048 <_ntoa_format+0x11a>
    if (negative) {
 800afcc:	f1b9 0f00 	cmp.w	r9, #0
 800afd0:	d135      	bne.n	800b03e <_ntoa_format+0x110>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
 800afd2:	f015 0f04 	tst.w	r5, #4
 800afd6:	d140      	bne.n	800b05a <_ntoa_format+0x12c>
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
 800afd8:	f015 0f08 	tst.w	r5, #8
 800afdc:	d034      	beq.n	800b048 <_ntoa_format+0x11a>
      buf[len++] = ' ';
 800afde:	f04f 0c20 	mov.w	ip, #32
 800afe2:	f806 c004 	strb.w	ip, [r6, r4]
 800afe6:	3401      	adds	r4, #1
 800afe8:	e02e      	b.n	800b048 <_ntoa_format+0x11a>
      if (len && (base == 16U)) {
 800afea:	f1b4 0c01 	subs.w	ip, r4, #1
 800afee:	d006      	beq.n	800affe <_ntoa_format+0xd0>
 800aff0:	f1b8 0f10 	cmp.w	r8, #16
 800aff4:	d001      	beq.n	800affa <_ntoa_format+0xcc>
      len--;
 800aff6:	4664      	mov	r4, ip
 800aff8:	e7d6      	b.n	800afa8 <_ntoa_format+0x7a>
        len--;
 800affa:	3c02      	subs	r4, #2
 800affc:	e7d4      	b.n	800afa8 <_ntoa_format+0x7a>
      len--;
 800affe:	4664      	mov	r4, ip
 800b000:	e7d2      	b.n	800afa8 <_ntoa_format+0x7a>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b002:	f015 0f20 	tst.w	r5, #32
 800b006:	d1d2      	bne.n	800afae <_ntoa_format+0x80>
 800b008:	2c1f      	cmp	r4, #31
 800b00a:	d8d0      	bhi.n	800afae <_ntoa_format+0x80>
      buf[len++] = 'x';
 800b00c:	f04f 0c78 	mov.w	ip, #120	; 0x78
 800b010:	f806 c004 	strb.w	ip, [r6, r4]
 800b014:	3401      	adds	r4, #1
 800b016:	e7d0      	b.n	800afba <_ntoa_format+0x8c>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b018:	f015 0f20 	tst.w	r5, #32
 800b01c:	d0ca      	beq.n	800afb4 <_ntoa_format+0x86>
 800b01e:	2c1f      	cmp	r4, #31
 800b020:	d8c8      	bhi.n	800afb4 <_ntoa_format+0x86>
      buf[len++] = 'X';
 800b022:	f04f 0c58 	mov.w	ip, #88	; 0x58
 800b026:	f806 c004 	strb.w	ip, [r6, r4]
 800b02a:	3401      	adds	r4, #1
 800b02c:	e7c5      	b.n	800afba <_ntoa_format+0x8c>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b02e:	2c1f      	cmp	r4, #31
 800b030:	d8c3      	bhi.n	800afba <_ntoa_format+0x8c>
      buf[len++] = 'b';
 800b032:	f04f 0c62 	mov.w	ip, #98	; 0x62
 800b036:	f806 c004 	strb.w	ip, [r6, r4]
 800b03a:	3401      	adds	r4, #1
 800b03c:	e7bd      	b.n	800afba <_ntoa_format+0x8c>
      buf[len++] = '-';
 800b03e:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 800b042:	f806 c004 	strb.w	ip, [r6, r4]
 800b046:	3401      	adds	r4, #1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800b048:	9503      	str	r5, [sp, #12]
 800b04a:	9702      	str	r7, [sp, #8]
 800b04c:	9401      	str	r4, [sp, #4]
 800b04e:	9600      	str	r6, [sp, #0]
 800b050:	f7ff ff33 	bl	800aeba <_out_rev>
}
 800b054:	b005      	add	sp, #20
 800b056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      buf[len++] = '+';  // ignore the space if the '+' exists
 800b05a:	f04f 0c2b 	mov.w	ip, #43	; 0x2b
 800b05e:	f806 c004 	strb.w	ip, [r6, r4]
 800b062:	3401      	adds	r4, #1
 800b064:	e7f0      	b.n	800b048 <_ntoa_format+0x11a>

0800b066 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b06a:	b090      	sub	sp, #64	; 0x40
 800b06c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800b06e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b070:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 800b074:	b90d      	cbnz	r5, 800b07a <_ntoa_long+0x14>
    flags &= ~FLAGS_HASH;
 800b076:	f02c 0c10 	bic.w	ip, ip, #16
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800b07a:	f41c 6680 	ands.w	r6, ip, #1024	; 0x400
 800b07e:	d019      	beq.n	800b0b4 <_ntoa_long+0x4e>
 800b080:	b32d      	cbz	r5, 800b0ce <_ntoa_long+0x68>
 800b082:	2600      	movs	r6, #0
 800b084:	e016      	b.n	800b0b4 <_ntoa_long+0x4e>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b086:	f01c 0f20 	tst.w	ip, #32
 800b08a:	d01d      	beq.n	800b0c8 <_ntoa_long+0x62>
 800b08c:	f04f 0e41 	mov.w	lr, #65	; 0x41
 800b090:	4474      	add	r4, lr
 800b092:	b2e4      	uxtb	r4, r4
 800b094:	3c0a      	subs	r4, #10
 800b096:	b2e4      	uxtb	r4, r4
 800b098:	f106 0e01 	add.w	lr, r6, #1
 800b09c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800b0a0:	4446      	add	r6, r8
 800b0a2:	f806 4c20 	strb.w	r4, [r6, #-32]
      value /= base;
 800b0a6:	fbb5 f5f7 	udiv	r5, r5, r7
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800b0aa:	b195      	cbz	r5, 800b0d2 <_ntoa_long+0x6c>
 800b0ac:	f1be 0f1f 	cmp.w	lr, #31
 800b0b0:	d80f      	bhi.n	800b0d2 <_ntoa_long+0x6c>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b0b2:	4676      	mov	r6, lr
      const char digit = (char)(value % base);
 800b0b4:	fbb5 f4f7 	udiv	r4, r5, r7
 800b0b8:	fb07 5414 	mls	r4, r7, r4, r5
 800b0bc:	b2e4      	uxtb	r4, r4
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b0be:	2c09      	cmp	r4, #9
 800b0c0:	d8e1      	bhi.n	800b086 <_ntoa_long+0x20>
 800b0c2:	3430      	adds	r4, #48	; 0x30
 800b0c4:	b2e4      	uxtb	r4, r4
 800b0c6:	e7e7      	b.n	800b098 <_ntoa_long+0x32>
 800b0c8:	f04f 0e61 	mov.w	lr, #97	; 0x61
 800b0cc:	e7e0      	b.n	800b090 <_ntoa_long+0x2a>
  size_t len = 0U;
 800b0ce:	f04f 0e00 	mov.w	lr, #0
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800b0d2:	f8cd c018 	str.w	ip, [sp, #24]
 800b0d6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800b0d8:	9405      	str	r4, [sp, #20]
 800b0da:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800b0dc:	9404      	str	r4, [sp, #16]
 800b0de:	9703      	str	r7, [sp, #12]
 800b0e0:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 800b0e4:	9402      	str	r4, [sp, #8]
 800b0e6:	f8cd e004 	str.w	lr, [sp, #4]
 800b0ea:	ac08      	add	r4, sp, #32
 800b0ec:	9400      	str	r4, [sp, #0]
 800b0ee:	f7ff ff1e 	bl	800af2e <_ntoa_format>
}
 800b0f2:	b010      	add	sp, #64	; 0x40
 800b0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b0f8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	b08b      	sub	sp, #44	; 0x2c
 800b0fe:	4606      	mov	r6, r0
 800b100:	4615      	mov	r5, r2
 800b102:	9309      	str	r3, [sp, #36]	; 0x24
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 800b104:	9106      	str	r1, [sp, #24]
 800b106:	2900      	cmp	r1, #0
 800b108:	f000 82b1 	beq.w	800b66e <_vsnprintf+0x576>
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800b10c:	2400      	movs	r4, #0
  while (*format)
 800b10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b110:	7818      	ldrb	r0, [r3, #0]
 800b112:	2800      	cmp	r0, #0
 800b114:	f000 82ad 	beq.w	800b672 <_vsnprintf+0x57a>
    if (*format != '%') {
 800b118:	2825      	cmp	r0, #37	; 0x25
 800b11a:	d009      	beq.n	800b130 <_vsnprintf+0x38>
      out(*format, buffer, idx++, maxlen);
 800b11c:	1c67      	adds	r7, r4, #1
 800b11e:	462b      	mov	r3, r5
 800b120:	4622      	mov	r2, r4
 800b122:	9906      	ldr	r1, [sp, #24]
 800b124:	47b0      	blx	r6
      format++;
 800b126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b128:	3301      	adds	r3, #1
 800b12a:	9309      	str	r3, [sp, #36]	; 0x24
      out(*format, buffer, idx++, maxlen);
 800b12c:	463c      	mov	r4, r7
      continue;
 800b12e:	e7ee      	b.n	800b10e <_vsnprintf+0x16>
      format++;
 800b130:	3301      	adds	r3, #1
 800b132:	9309      	str	r3, [sp, #36]	; 0x24
    flags = 0U;
 800b134:	2700      	movs	r7, #0
 800b136:	e02d      	b.n	800b194 <_vsnprintf+0x9c>
  return (ch >= '0') && (ch <= '9');
 800b138:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b13c:	b2db      	uxtb	r3, r3
    if (_is_digit(*format)) {
 800b13e:	2b09      	cmp	r3, #9
 800b140:	d968      	bls.n	800b214 <_vsnprintf+0x11c>
    else if (*format == '*') {
 800b142:	292a      	cmp	r1, #42	; 0x2a
 800b144:	d06b      	beq.n	800b21e <_vsnprintf+0x126>
    width = 0U;
 800b146:	f04f 0a00 	mov.w	sl, #0
    if (*format == '.') {
 800b14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b14c:	781a      	ldrb	r2, [r3, #0]
 800b14e:	2a2e      	cmp	r2, #46	; 0x2e
 800b150:	d075      	beq.n	800b23e <_vsnprintf+0x146>
    precision = 0U;
 800b152:	2300      	movs	r3, #0
 800b154:	9307      	str	r3, [sp, #28]
    switch (*format) {
 800b156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b158:	7813      	ldrb	r3, [r2, #0]
 800b15a:	3b68      	subs	r3, #104	; 0x68
 800b15c:	2b12      	cmp	r3, #18
 800b15e:	f200 80ad 	bhi.w	800b2bc <_vsnprintf+0x1c4>
 800b162:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b166:	0099      	.short	0x0099
 800b168:	00a700ab 	.word	0x00a700ab
 800b16c:	008b00ab 	.word	0x008b00ab
 800b170:	00ab00ab 	.word	0x00ab00ab
 800b174:	00ab00ab 	.word	0x00ab00ab
 800b178:	00ab00ab 	.word	0x00ab00ab
 800b17c:	00ab00ab 	.word	0x00ab00ab
 800b180:	00ab00ab 	.word	0x00ab00ab
 800b184:	00ab00ab 	.word	0x00ab00ab
 800b188:	010800ab 	.word	0x010800ab
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800b18c:	f047 0701 	orr.w	r7, r7, #1
 800b190:	3301      	adds	r3, #1
 800b192:	9309      	str	r3, [sp, #36]	; 0x24
      switch (*format) {
 800b194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b196:	7819      	ldrb	r1, [r3, #0]
 800b198:	f1a1 0220 	sub.w	r2, r1, #32
 800b19c:	2a10      	cmp	r2, #16
 800b19e:	d8cb      	bhi.n	800b138 <_vsnprintf+0x40>
 800b1a0:	a001      	add	r0, pc, #4	; (adr r0, 800b1a8 <_vsnprintf+0xb0>)
 800b1a2:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800b1a6:	bf00      	nop
 800b1a8:	0800b201 	.word	0x0800b201
 800b1ac:	0800b139 	.word	0x0800b139
 800b1b0:	0800b139 	.word	0x0800b139
 800b1b4:	0800b20b 	.word	0x0800b20b
 800b1b8:	0800b139 	.word	0x0800b139
 800b1bc:	0800b139 	.word	0x0800b139
 800b1c0:	0800b139 	.word	0x0800b139
 800b1c4:	0800b139 	.word	0x0800b139
 800b1c8:	0800b139 	.word	0x0800b139
 800b1cc:	0800b139 	.word	0x0800b139
 800b1d0:	0800b139 	.word	0x0800b139
 800b1d4:	0800b1f7 	.word	0x0800b1f7
 800b1d8:	0800b139 	.word	0x0800b139
 800b1dc:	0800b1ed 	.word	0x0800b1ed
 800b1e0:	0800b139 	.word	0x0800b139
 800b1e4:	0800b139 	.word	0x0800b139
 800b1e8:	0800b18d 	.word	0x0800b18d
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800b1ec:	f047 0702 	orr.w	r7, r7, #2
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1f4:	e7ce      	b.n	800b194 <_vsnprintf+0x9c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800b1f6:	f047 0704 	orr.w	r7, r7, #4
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b1fe:	e7c9      	b.n	800b194 <_vsnprintf+0x9c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800b200:	f047 0708 	orr.w	r7, r7, #8
 800b204:	3301      	adds	r3, #1
 800b206:	9309      	str	r3, [sp, #36]	; 0x24
 800b208:	e7c4      	b.n	800b194 <_vsnprintf+0x9c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800b20a:	f047 0710 	orr.w	r7, r7, #16
 800b20e:	3301      	adds	r3, #1
 800b210:	9309      	str	r3, [sp, #36]	; 0x24
 800b212:	e7bf      	b.n	800b194 <_vsnprintf+0x9c>
      width = _atoi(&format);
 800b214:	a809      	add	r0, sp, #36	; 0x24
 800b216:	f7ff fe3e 	bl	800ae96 <_atoi>
 800b21a:	4682      	mov	sl, r0
 800b21c:	e795      	b.n	800b14a <_vsnprintf+0x52>
      const int w = va_arg(va, int);
 800b21e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b220:	1d1a      	adds	r2, r3, #4
 800b222:	9214      	str	r2, [sp, #80]	; 0x50
 800b224:	681b      	ldr	r3, [r3, #0]
      if (w < 0) {
 800b226:	2b00      	cmp	r3, #0
 800b228:	db04      	blt.n	800b234 <_vsnprintf+0x13c>
        width = (unsigned int)w;
 800b22a:	469a      	mov	sl, r3
      format++;
 800b22c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b22e:	3301      	adds	r3, #1
 800b230:	9309      	str	r3, [sp, #36]	; 0x24
 800b232:	e78a      	b.n	800b14a <_vsnprintf+0x52>
        flags |= FLAGS_LEFT;    // reverse padding
 800b234:	f047 0702 	orr.w	r7, r7, #2
        width = (unsigned int)-w;
 800b238:	f1c3 0a00 	rsb	sl, r3, #0
 800b23c:	e7f6      	b.n	800b22c <_vsnprintf+0x134>
      flags |= FLAGS_PRECISION;
 800b23e:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
      format++;
 800b242:	1c5a      	adds	r2, r3, #1
 800b244:	9209      	str	r2, [sp, #36]	; 0x24
      if (_is_digit(*format)) {
 800b246:	785a      	ldrb	r2, [r3, #1]
  return (ch >= '0') && (ch <= '9');
 800b248:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b24c:	b2db      	uxtb	r3, r3
      if (_is_digit(*format)) {
 800b24e:	2b09      	cmp	r3, #9
 800b250:	d904      	bls.n	800b25c <_vsnprintf+0x164>
      else if (*format == '*') {
 800b252:	2a2a      	cmp	r2, #42	; 0x2a
 800b254:	d007      	beq.n	800b266 <_vsnprintf+0x16e>
    precision = 0U;
 800b256:	2300      	movs	r3, #0
 800b258:	9307      	str	r3, [sp, #28]
 800b25a:	e77c      	b.n	800b156 <_vsnprintf+0x5e>
        precision = _atoi(&format);
 800b25c:	a809      	add	r0, sp, #36	; 0x24
 800b25e:	f7ff fe1a 	bl	800ae96 <_atoi>
 800b262:	9007      	str	r0, [sp, #28]
 800b264:	e777      	b.n	800b156 <_vsnprintf+0x5e>
        const int prec = (int)va_arg(va, int);
 800b266:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b268:	1d1a      	adds	r2, r3, #4
 800b26a:	9214      	str	r2, [sp, #80]	; 0x50
 800b26c:	681b      	ldr	r3, [r3, #0]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800b26e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b272:	9307      	str	r3, [sp, #28]
        format++;
 800b274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b276:	3301      	adds	r3, #1
 800b278:	9309      	str	r3, [sp, #36]	; 0x24
 800b27a:	e76c      	b.n	800b156 <_vsnprintf+0x5e>
        flags |= FLAGS_LONG;
 800b27c:	f447 7180 	orr.w	r1, r7, #256	; 0x100
        format++;
 800b280:	1c53      	adds	r3, r2, #1
 800b282:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == 'l') {
 800b284:	7852      	ldrb	r2, [r2, #1]
 800b286:	2a6c      	cmp	r2, #108	; 0x6c
 800b288:	d001      	beq.n	800b28e <_vsnprintf+0x196>
        flags |= FLAGS_LONG;
 800b28a:	460f      	mov	r7, r1
 800b28c:	e016      	b.n	800b2bc <_vsnprintf+0x1c4>
          flags |= FLAGS_LONG_LONG;
 800b28e:	f447 7740 	orr.w	r7, r7, #768	; 0x300
          format++;
 800b292:	3301      	adds	r3, #1
 800b294:	9309      	str	r3, [sp, #36]	; 0x24
 800b296:	e011      	b.n	800b2bc <_vsnprintf+0x1c4>
        flags |= FLAGS_SHORT;
 800b298:	f047 0180 	orr.w	r1, r7, #128	; 0x80
        format++;
 800b29c:	1c53      	adds	r3, r2, #1
 800b29e:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == 'h') {
 800b2a0:	7852      	ldrb	r2, [r2, #1]
 800b2a2:	2a68      	cmp	r2, #104	; 0x68
 800b2a4:	d001      	beq.n	800b2aa <_vsnprintf+0x1b2>
        flags |= FLAGS_SHORT;
 800b2a6:	460f      	mov	r7, r1
 800b2a8:	e008      	b.n	800b2bc <_vsnprintf+0x1c4>
          flags |= FLAGS_CHAR;
 800b2aa:	f047 07c0 	orr.w	r7, r7, #192	; 0xc0
          format++;
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b2:	e003      	b.n	800b2bc <_vsnprintf+0x1c4>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800b2b4:	f447 7700 	orr.w	r7, r7, #512	; 0x200
        format++;
 800b2b8:	3201      	adds	r2, #1
 800b2ba:	9209      	str	r2, [sp, #36]	; 0x24
    switch (*format) {
 800b2bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2be:	7818      	ldrb	r0, [r3, #0]
 800b2c0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 800b2c4:	2b53      	cmp	r3, #83	; 0x53
 800b2c6:	f200 81c8 	bhi.w	800b65a <_vsnprintf+0x562>
 800b2ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b2ce:	01bb      	.short	0x01bb
 800b2d0:	01c601c6 	.word	0x01c601c6
 800b2d4:	01c601c6 	.word	0x01c601c6
 800b2d8:	01c601c6 	.word	0x01c601c6
 800b2dc:	01c601c6 	.word	0x01c601c6
 800b2e0:	01c601c6 	.word	0x01c601c6
 800b2e4:	01c601c6 	.word	0x01c601c6
 800b2e8:	01c601c6 	.word	0x01c601c6
 800b2ec:	01c601c6 	.word	0x01c601c6
 800b2f0:	01c601c6 	.word	0x01c601c6
 800b2f4:	01c601c6 	.word	0x01c601c6
 800b2f8:	01c601c6 	.word	0x01c601c6
 800b2fc:	01c601c6 	.word	0x01c601c6
 800b300:	01c601c6 	.word	0x01c601c6
 800b304:	01c601c6 	.word	0x01c601c6
 800b308:	01c601c6 	.word	0x01c601c6
 800b30c:	01c601c6 	.word	0x01c601c6
 800b310:	01c601c6 	.word	0x01c601c6
 800b314:	01c601c6 	.word	0x01c601c6
 800b318:	01c601c6 	.word	0x01c601c6
 800b31c:	01c601c6 	.word	0x01c601c6
 800b320:	01c601c6 	.word	0x01c601c6
 800b324:	01c601c6 	.word	0x01c601c6
 800b328:	01c601c6 	.word	0x01c601c6
 800b32c:	01c601c6 	.word	0x01c601c6
 800b330:	01c601c6 	.word	0x01c601c6
 800b334:	01c60059 	.word	0x01c60059
 800b338:	01c601c6 	.word	0x01c601c6
 800b33c:	01c601c6 	.word	0x01c601c6
 800b340:	01c601c6 	.word	0x01c601c6
 800b344:	01c601c6 	.word	0x01c601c6
 800b348:	010c0059 	.word	0x010c0059
 800b34c:	01c60059 	.word	0x01c60059
 800b350:	01c601c6 	.word	0x01c601c6
 800b354:	005901c6 	.word	0x005901c6
 800b358:	01c601c6 	.word	0x01c601c6
 800b35c:	01c601c6 	.word	0x01c601c6
 800b360:	005901c6 	.word	0x005901c6
 800b364:	01c601a0 	.word	0x01c601a0
 800b368:	014001c6 	.word	0x014001c6
 800b36c:	005901c6 	.word	0x005901c6
 800b370:	01c601c6 	.word	0x01c601c6
 800b374:	0059      	.short	0x0059
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800b376:	f447 7780 	orr.w	r7, r7, #256	; 0x100
        format++;
 800b37a:	3201      	adds	r2, #1
 800b37c:	9209      	str	r2, [sp, #36]	; 0x24
        break;
 800b37e:	e79d      	b.n	800b2bc <_vsnprintf+0x1c4>
        if (*format == 'x' || *format == 'X') {
 800b380:	2878      	cmp	r0, #120	; 0x78
 800b382:	d009      	beq.n	800b398 <_vsnprintf+0x2a0>
 800b384:	2858      	cmp	r0, #88	; 0x58
 800b386:	d037      	beq.n	800b3f8 <_vsnprintf+0x300>
        else if (*format == 'o') {
 800b388:	286f      	cmp	r0, #111	; 0x6f
 800b38a:	d037      	beq.n	800b3fc <_vsnprintf+0x304>
        else if (*format == 'b') {
 800b38c:	2862      	cmp	r0, #98	; 0x62
 800b38e:	d037      	beq.n	800b400 <_vsnprintf+0x308>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800b390:	f027 0710 	bic.w	r7, r7, #16
          base = 10U;
 800b394:	230a      	movs	r3, #10
 800b396:	e000      	b.n	800b39a <_vsnprintf+0x2a2>
          base = 16U;
 800b398:	2310      	movs	r3, #16
        if (*format == 'X') {
 800b39a:	2858      	cmp	r0, #88	; 0x58
 800b39c:	d032      	beq.n	800b404 <_vsnprintf+0x30c>
        if ((*format != 'i') && (*format != 'd')) {
 800b39e:	2869      	cmp	r0, #105	; 0x69
 800b3a0:	d003      	beq.n	800b3aa <_vsnprintf+0x2b2>
 800b3a2:	2864      	cmp	r0, #100	; 0x64
 800b3a4:	d001      	beq.n	800b3aa <_vsnprintf+0x2b2>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800b3a6:	f027 070c 	bic.w	r7, r7, #12
        if (flags & FLAGS_PRECISION) {
 800b3aa:	f417 6f80 	tst.w	r7, #1024	; 0x400
 800b3ae:	d001      	beq.n	800b3b4 <_vsnprintf+0x2bc>
          flags &= ~FLAGS_ZEROPAD;
 800b3b0:	f027 0701 	bic.w	r7, r7, #1
        if ((*format == 'i') || (*format == 'd')) {
 800b3b4:	2869      	cmp	r0, #105	; 0x69
 800b3b6:	d028      	beq.n	800b40a <_vsnprintf+0x312>
 800b3b8:	2864      	cmp	r0, #100	; 0x64
 800b3ba:	d026      	beq.n	800b40a <_vsnprintf+0x312>
          if (flags & FLAGS_LONG_LONG) {
 800b3bc:	f417 7f00 	tst.w	r7, #512	; 0x200
 800b3c0:	d144      	bne.n	800b44c <_vsnprintf+0x354>
          else if (flags & FLAGS_LONG) {
 800b3c2:	f417 7f80 	tst.w	r7, #256	; 0x100
 800b3c6:	d16c      	bne.n	800b4a2 <_vsnprintf+0x3aa>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800b3c8:	f017 0f40 	tst.w	r7, #64	; 0x40
 800b3cc:	d07e      	beq.n	800b4cc <_vsnprintf+0x3d4>
 800b3ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3d0:	1d11      	adds	r1, r2, #4
 800b3d2:	9114      	str	r1, [sp, #80]	; 0x50
 800b3d4:	7812      	ldrb	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800b3d6:	9705      	str	r7, [sp, #20]
 800b3d8:	f8cd a010 	str.w	sl, [sp, #16]
 800b3dc:	9907      	ldr	r1, [sp, #28]
 800b3de:	9103      	str	r1, [sp, #12]
 800b3e0:	9302      	str	r3, [sp, #8]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	9301      	str	r3, [sp, #4]
 800b3e6:	9200      	str	r2, [sp, #0]
 800b3e8:	462b      	mov	r3, r5
 800b3ea:	4622      	mov	r2, r4
 800b3ec:	9906      	ldr	r1, [sp, #24]
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f7ff fe39 	bl	800b066 <_ntoa_long>
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	e029      	b.n	800b44c <_vsnprintf+0x354>
          base = 16U;
 800b3f8:	2310      	movs	r3, #16
 800b3fa:	e7ce      	b.n	800b39a <_vsnprintf+0x2a2>
          base =  8U;
 800b3fc:	2308      	movs	r3, #8
 800b3fe:	e7cc      	b.n	800b39a <_vsnprintf+0x2a2>
          base =  2U;
 800b400:	2302      	movs	r3, #2
 800b402:	e7ca      	b.n	800b39a <_vsnprintf+0x2a2>
          flags |= FLAGS_UPPERCASE;
 800b404:	f047 0720 	orr.w	r7, r7, #32
 800b408:	e7c9      	b.n	800b39e <_vsnprintf+0x2a6>
          if (flags & FLAGS_LONG_LONG) {
 800b40a:	f417 7f00 	tst.w	r7, #512	; 0x200
 800b40e:	d11d      	bne.n	800b44c <_vsnprintf+0x354>
          else if (flags & FLAGS_LONG) {
 800b410:	f417 7f80 	tst.w	r7, #256	; 0x100
 800b414:	d11e      	bne.n	800b454 <_vsnprintf+0x35c>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800b416:	f017 0f40 	tst.w	r7, #64	; 0x40
 800b41a:	d034      	beq.n	800b486 <_vsnprintf+0x38e>
 800b41c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b41e:	1d11      	adds	r1, r2, #4
 800b420:	9114      	str	r1, [sp, #80]	; 0x50
 800b422:	7812      	ldrb	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800b424:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800b428:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800b42c:	0fd2      	lsrs	r2, r2, #31
 800b42e:	9705      	str	r7, [sp, #20]
 800b430:	f8cd a010 	str.w	sl, [sp, #16]
 800b434:	9807      	ldr	r0, [sp, #28]
 800b436:	9003      	str	r0, [sp, #12]
 800b438:	9302      	str	r3, [sp, #8]
 800b43a:	9201      	str	r2, [sp, #4]
 800b43c:	9100      	str	r1, [sp, #0]
 800b43e:	462b      	mov	r3, r5
 800b440:	4622      	mov	r2, r4
 800b442:	9906      	ldr	r1, [sp, #24]
 800b444:	4630      	mov	r0, r6
 800b446:	f7ff fe0e 	bl	800b066 <_ntoa_long>
 800b44a:	4604      	mov	r4, r0
        format++;
 800b44c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b44e:	3301      	adds	r3, #1
 800b450:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800b452:	e65c      	b.n	800b10e <_vsnprintf+0x16>
            const long value = va_arg(va, long);
 800b454:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b456:	1d11      	adds	r1, r2, #4
 800b458:	9114      	str	r1, [sp, #80]	; 0x50
 800b45a:	6812      	ldr	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800b45c:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800b460:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800b464:	0fd2      	lsrs	r2, r2, #31
 800b466:	9705      	str	r7, [sp, #20]
 800b468:	f8cd a010 	str.w	sl, [sp, #16]
 800b46c:	9807      	ldr	r0, [sp, #28]
 800b46e:	9003      	str	r0, [sp, #12]
 800b470:	9302      	str	r3, [sp, #8]
 800b472:	9201      	str	r2, [sp, #4]
 800b474:	9100      	str	r1, [sp, #0]
 800b476:	462b      	mov	r3, r5
 800b478:	4622      	mov	r2, r4
 800b47a:	9906      	ldr	r1, [sp, #24]
 800b47c:	4630      	mov	r0, r6
 800b47e:	f7ff fdf2 	bl	800b066 <_ntoa_long>
 800b482:	4604      	mov	r4, r0
 800b484:	e7e2      	b.n	800b44c <_vsnprintf+0x354>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800b486:	f017 0f80 	tst.w	r7, #128	; 0x80
 800b48a:	d005      	beq.n	800b498 <_vsnprintf+0x3a0>
 800b48c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b48e:	1d11      	adds	r1, r2, #4
 800b490:	9114      	str	r1, [sp, #80]	; 0x50
 800b492:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b496:	e7c5      	b.n	800b424 <_vsnprintf+0x32c>
 800b498:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b49a:	1d11      	adds	r1, r2, #4
 800b49c:	9114      	str	r1, [sp, #80]	; 0x50
 800b49e:	6812      	ldr	r2, [r2, #0]
 800b4a0:	e7c0      	b.n	800b424 <_vsnprintf+0x32c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800b4a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4a4:	1d11      	adds	r1, r2, #4
 800b4a6:	9114      	str	r1, [sp, #80]	; 0x50
 800b4a8:	6812      	ldr	r2, [r2, #0]
 800b4aa:	9705      	str	r7, [sp, #20]
 800b4ac:	f8cd a010 	str.w	sl, [sp, #16]
 800b4b0:	9907      	ldr	r1, [sp, #28]
 800b4b2:	9103      	str	r1, [sp, #12]
 800b4b4:	9302      	str	r3, [sp, #8]
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	9301      	str	r3, [sp, #4]
 800b4ba:	9200      	str	r2, [sp, #0]
 800b4bc:	462b      	mov	r3, r5
 800b4be:	4622      	mov	r2, r4
 800b4c0:	9906      	ldr	r1, [sp, #24]
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	f7ff fdcf 	bl	800b066 <_ntoa_long>
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	e7bf      	b.n	800b44c <_vsnprintf+0x354>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800b4cc:	f017 0f80 	tst.w	r7, #128	; 0x80
 800b4d0:	d004      	beq.n	800b4dc <_vsnprintf+0x3e4>
 800b4d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4d4:	1d11      	adds	r1, r2, #4
 800b4d6:	9114      	str	r1, [sp, #80]	; 0x50
 800b4d8:	8812      	ldrh	r2, [r2, #0]
 800b4da:	e77c      	b.n	800b3d6 <_vsnprintf+0x2de>
 800b4dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4de:	1d11      	adds	r1, r2, #4
 800b4e0:	9114      	str	r1, [sp, #80]	; 0x50
 800b4e2:	6812      	ldr	r2, [r2, #0]
 800b4e4:	e777      	b.n	800b3d6 <_vsnprintf+0x2de>
        if (!(flags & FLAGS_LEFT)) {
 800b4e6:	f017 0702 	ands.w	r7, r7, #2
 800b4ea:	d01e      	beq.n	800b52a <_vsnprintf+0x432>
        unsigned int l = 1U;
 800b4ec:	f04f 0801 	mov.w	r8, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800b4f0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b4f2:	1d03      	adds	r3, r0, #4
 800b4f4:	9314      	str	r3, [sp, #80]	; 0x50
 800b4f6:	f104 0901 	add.w	r9, r4, #1
 800b4fa:	462b      	mov	r3, r5
 800b4fc:	4622      	mov	r2, r4
 800b4fe:	9906      	ldr	r1, [sp, #24]
 800b500:	7800      	ldrb	r0, [r0, #0]
 800b502:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
 800b504:	b9a7      	cbnz	r7, 800b530 <_vsnprintf+0x438>
        format++;
 800b506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b508:	3301      	adds	r3, #1
 800b50a:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800b50c:	464c      	mov	r4, r9
 800b50e:	e5fe      	b.n	800b10e <_vsnprintf+0x16>
            out(' ', buffer, idx++, maxlen);
 800b510:	1c54      	adds	r4, r2, #1
 800b512:	462b      	mov	r3, r5
 800b514:	9906      	ldr	r1, [sp, #24]
 800b516:	2020      	movs	r0, #32
 800b518:	47b0      	blx	r6
          while (l++ < width) {
 800b51a:	4643      	mov	r3, r8
            out(' ', buffer, idx++, maxlen);
 800b51c:	4622      	mov	r2, r4
          while (l++ < width) {
 800b51e:	f103 0801 	add.w	r8, r3, #1
 800b522:	459a      	cmp	sl, r3
 800b524:	d8f4      	bhi.n	800b510 <_vsnprintf+0x418>
 800b526:	4614      	mov	r4, r2
 800b528:	e7e2      	b.n	800b4f0 <_vsnprintf+0x3f8>
        unsigned int l = 1U;
 800b52a:	2301      	movs	r3, #1
 800b52c:	4622      	mov	r2, r4
 800b52e:	e7f6      	b.n	800b51e <_vsnprintf+0x426>
 800b530:	464a      	mov	r2, r9
 800b532:	e006      	b.n	800b542 <_vsnprintf+0x44a>
            out(' ', buffer, idx++, maxlen);
 800b534:	1c57      	adds	r7, r2, #1
 800b536:	462b      	mov	r3, r5
 800b538:	9906      	ldr	r1, [sp, #24]
 800b53a:	2020      	movs	r0, #32
 800b53c:	47b0      	blx	r6
          while (l++ < width) {
 800b53e:	46a0      	mov	r8, r4
            out(' ', buffer, idx++, maxlen);
 800b540:	463a      	mov	r2, r7
          while (l++ < width) {
 800b542:	f108 0401 	add.w	r4, r8, #1
 800b546:	45c2      	cmp	sl, r8
 800b548:	d8f4      	bhi.n	800b534 <_vsnprintf+0x43c>
 800b54a:	4691      	mov	r9, r2
 800b54c:	e7db      	b.n	800b506 <_vsnprintf+0x40e>
        const char* p = va_arg(va, char*);
 800b54e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b550:	1d1a      	adds	r2, r3, #4
 800b552:	9214      	str	r2, [sp, #80]	; 0x50
 800b554:	f8d3 8000 	ldr.w	r8, [r3]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800b558:	9b07      	ldr	r3, [sp, #28]
 800b55a:	b9f3      	cbnz	r3, 800b59a <_vsnprintf+0x4a2>
 800b55c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b560:	46c1      	mov	r9, r8
 800b562:	e002      	b.n	800b56a <_vsnprintf+0x472>
  for (s = str; *s && maxsize--; ++s);
 800b564:	f109 0901 	add.w	r9, r9, #1
 800b568:	4613      	mov	r3, r2
 800b56a:	f899 2000 	ldrb.w	r2, [r9]
 800b56e:	b112      	cbz	r2, 800b576 <_vsnprintf+0x47e>
 800b570:	1e5a      	subs	r2, r3, #1
 800b572:	2b00      	cmp	r3, #0
 800b574:	d1f6      	bne.n	800b564 <_vsnprintf+0x46c>
  return (unsigned int)(s - str);
 800b576:	eba9 0908 	sub.w	r9, r9, r8
        if (flags & FLAGS_PRECISION) {
 800b57a:	f417 6b80 	ands.w	fp, r7, #1024	; 0x400
 800b57e:	d003      	beq.n	800b588 <_vsnprintf+0x490>
          l = (l < precision ? l : precision);
 800b580:	9b07      	ldr	r3, [sp, #28]
 800b582:	4599      	cmp	r9, r3
 800b584:	bf28      	it	cs
 800b586:	4699      	movcs	r9, r3
        if (!(flags & FLAGS_LEFT)) {
 800b588:	f017 0302 	ands.w	r3, r7, #2
 800b58c:	9308      	str	r3, [sp, #32]
 800b58e:	d006      	beq.n	800b59e <_vsnprintf+0x4a6>
 800b590:	4622      	mov	r2, r4
 800b592:	465c      	mov	r4, fp
 800b594:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800b598:	e01b      	b.n	800b5d2 <_vsnprintf+0x4da>
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800b59a:	9b07      	ldr	r3, [sp, #28]
 800b59c:	e7e0      	b.n	800b560 <_vsnprintf+0x468>
 800b59e:	4622      	mov	r2, r4
 800b5a0:	e006      	b.n	800b5b0 <_vsnprintf+0x4b8>
            out(' ', buffer, idx++, maxlen);
 800b5a2:	1c54      	adds	r4, r2, #1
 800b5a4:	462b      	mov	r3, r5
 800b5a6:	9906      	ldr	r1, [sp, #24]
 800b5a8:	2020      	movs	r0, #32
 800b5aa:	47b0      	blx	r6
          while (l++ < width) {
 800b5ac:	46b9      	mov	r9, r7
            out(' ', buffer, idx++, maxlen);
 800b5ae:	4622      	mov	r2, r4
          while (l++ < width) {
 800b5b0:	f109 0701 	add.w	r7, r9, #1
 800b5b4:	45ca      	cmp	sl, r9
 800b5b6:	d8f4      	bhi.n	800b5a2 <_vsnprintf+0x4aa>
 800b5b8:	46b9      	mov	r9, r7
 800b5ba:	465c      	mov	r4, fp
 800b5bc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800b5c0:	e007      	b.n	800b5d2 <_vsnprintf+0x4da>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800b5c2:	469b      	mov	fp, r3
          out(*(p++), buffer, idx++, maxlen);
 800b5c4:	f108 0801 	add.w	r8, r8, #1
 800b5c8:	1c57      	adds	r7, r2, #1
 800b5ca:	462b      	mov	r3, r5
 800b5cc:	9906      	ldr	r1, [sp, #24]
 800b5ce:	47b0      	blx	r6
 800b5d0:	463a      	mov	r2, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800b5d2:	f898 0000 	ldrb.w	r0, [r8]
 800b5d6:	b130      	cbz	r0, 800b5e6 <_vsnprintf+0x4ee>
 800b5d8:	2c00      	cmp	r4, #0
 800b5da:	d0f3      	beq.n	800b5c4 <_vsnprintf+0x4cc>
 800b5dc:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800b5e0:	f1bb 0f00 	cmp.w	fp, #0
 800b5e4:	d1ed      	bne.n	800b5c2 <_vsnprintf+0x4ca>
 800b5e6:	4614      	mov	r4, r2
        if (flags & FLAGS_LEFT) {
 800b5e8:	9b08      	ldr	r3, [sp, #32]
 800b5ea:	b953      	cbnz	r3, 800b602 <_vsnprintf+0x50a>
        format++;
 800b5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800b5f2:	e58c      	b.n	800b10e <_vsnprintf+0x16>
            out(' ', buffer, idx++, maxlen);
 800b5f4:	1c57      	adds	r7, r2, #1
 800b5f6:	462b      	mov	r3, r5
 800b5f8:	9906      	ldr	r1, [sp, #24]
 800b5fa:	2020      	movs	r0, #32
 800b5fc:	47b0      	blx	r6
          while (l++ < width) {
 800b5fe:	46a1      	mov	r9, r4
            out(' ', buffer, idx++, maxlen);
 800b600:	463a      	mov	r2, r7
          while (l++ < width) {
 800b602:	f109 0401 	add.w	r4, r9, #1
 800b606:	45ca      	cmp	sl, r9
 800b608:	d8f4      	bhi.n	800b5f4 <_vsnprintf+0x4fc>
 800b60a:	4614      	mov	r4, r2
 800b60c:	e7ee      	b.n	800b5ec <_vsnprintf+0x4f4>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800b60e:	f047 0721 	orr.w	r7, r7, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800b612:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b614:	1d1a      	adds	r2, r3, #4
 800b616:	9214      	str	r2, [sp, #80]	; 0x50
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	9705      	str	r7, [sp, #20]
 800b61c:	2208      	movs	r2, #8
 800b61e:	9204      	str	r2, [sp, #16]
 800b620:	9a07      	ldr	r2, [sp, #28]
 800b622:	9203      	str	r2, [sp, #12]
 800b624:	2210      	movs	r2, #16
 800b626:	9202      	str	r2, [sp, #8]
 800b628:	2200      	movs	r2, #0
 800b62a:	9201      	str	r2, [sp, #4]
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	462b      	mov	r3, r5
 800b630:	4622      	mov	r2, r4
 800b632:	9906      	ldr	r1, [sp, #24]
 800b634:	4630      	mov	r0, r6
 800b636:	f7ff fd16 	bl	800b066 <_ntoa_long>
 800b63a:	4604      	mov	r4, r0
        format++;
 800b63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b63e:	3301      	adds	r3, #1
 800b640:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800b642:	e564      	b.n	800b10e <_vsnprintf+0x16>
        out('%', buffer, idx++, maxlen);
 800b644:	1c67      	adds	r7, r4, #1
 800b646:	462b      	mov	r3, r5
 800b648:	4622      	mov	r2, r4
 800b64a:	9906      	ldr	r1, [sp, #24]
 800b64c:	2025      	movs	r0, #37	; 0x25
 800b64e:	47b0      	blx	r6
        format++;
 800b650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b652:	3301      	adds	r3, #1
 800b654:	9309      	str	r3, [sp, #36]	; 0x24
        out('%', buffer, idx++, maxlen);
 800b656:	463c      	mov	r4, r7
        break;
 800b658:	e559      	b.n	800b10e <_vsnprintf+0x16>

      default :
        out(*format, buffer, idx++, maxlen);
 800b65a:	1c67      	adds	r7, r4, #1
 800b65c:	462b      	mov	r3, r5
 800b65e:	4622      	mov	r2, r4
 800b660:	9906      	ldr	r1, [sp, #24]
 800b662:	47b0      	blx	r6
        format++;
 800b664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b666:	3301      	adds	r3, #1
 800b668:	9309      	str	r3, [sp, #36]	; 0x24
        out(*format, buffer, idx++, maxlen);
 800b66a:	463c      	mov	r4, r7
        break;
 800b66c:	e54f      	b.n	800b10e <_vsnprintf+0x16>
    out = _out_null;
 800b66e:	4e07      	ldr	r6, [pc, #28]	; (800b68c <_vsnprintf+0x594>)
 800b670:	e54c      	b.n	800b10c <_vsnprintf+0x14>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800b672:	42ac      	cmp	r4, r5
 800b674:	d308      	bcc.n	800b688 <_vsnprintf+0x590>
 800b676:	1e6a      	subs	r2, r5, #1
 800b678:	462b      	mov	r3, r5
 800b67a:	9906      	ldr	r1, [sp, #24]
 800b67c:	2000      	movs	r0, #0
 800b67e:	47b0      	blx	r6

  // return written chars without terminating \0
  return (int)idx;
}
 800b680:	4620      	mov	r0, r4
 800b682:	b00b      	add	sp, #44	; 0x2c
 800b684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800b688:	4622      	mov	r2, r4
 800b68a:	e7f5      	b.n	800b678 <_vsnprintf+0x580>
 800b68c:	0800ae95 	.word	0x0800ae95

0800b690 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 800b690:	b40e      	push	{r1, r2, r3}
 800b692:	b500      	push	{lr}
 800b694:	b084      	sub	sp, #16
 800b696:	aa05      	add	r2, sp, #20
 800b698:	f852 3b04 	ldr.w	r3, [r2], #4
  va_list va;
  va_start(va, format);
 800b69c:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800b69e:	9200      	str	r2, [sp, #0]
 800b6a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6a4:	4601      	mov	r1, r0
 800b6a6:	4804      	ldr	r0, [pc, #16]	; (800b6b8 <sprintf_+0x28>)
 800b6a8:	f7ff fd26 	bl	800b0f8 <_vsnprintf>
  va_end(va);
  return ret;
}
 800b6ac:	b004      	add	sp, #16
 800b6ae:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6b2:	b003      	add	sp, #12
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	0800ae8d 	.word	0x0800ae8d

0800b6bc <__errno>:
 800b6bc:	4b01      	ldr	r3, [pc, #4]	; (800b6c4 <__errno+0x8>)
 800b6be:	6818      	ldr	r0, [r3, #0]
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	20000054 	.word	0x20000054

0800b6c8 <__libc_init_array>:
 800b6c8:	b570      	push	{r4, r5, r6, lr}
 800b6ca:	4e0d      	ldr	r6, [pc, #52]	; (800b700 <__libc_init_array+0x38>)
 800b6cc:	4c0d      	ldr	r4, [pc, #52]	; (800b704 <__libc_init_array+0x3c>)
 800b6ce:	1ba4      	subs	r4, r4, r6
 800b6d0:	10a4      	asrs	r4, r4, #2
 800b6d2:	2500      	movs	r5, #0
 800b6d4:	42a5      	cmp	r5, r4
 800b6d6:	d109      	bne.n	800b6ec <__libc_init_array+0x24>
 800b6d8:	4e0b      	ldr	r6, [pc, #44]	; (800b708 <__libc_init_array+0x40>)
 800b6da:	4c0c      	ldr	r4, [pc, #48]	; (800b70c <__libc_init_array+0x44>)
 800b6dc:	f000 fc50 	bl	800bf80 <_init>
 800b6e0:	1ba4      	subs	r4, r4, r6
 800b6e2:	10a4      	asrs	r4, r4, #2
 800b6e4:	2500      	movs	r5, #0
 800b6e6:	42a5      	cmp	r5, r4
 800b6e8:	d105      	bne.n	800b6f6 <__libc_init_array+0x2e>
 800b6ea:	bd70      	pop	{r4, r5, r6, pc}
 800b6ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b6f0:	4798      	blx	r3
 800b6f2:	3501      	adds	r5, #1
 800b6f4:	e7ee      	b.n	800b6d4 <__libc_init_array+0xc>
 800b6f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b6fa:	4798      	blx	r3
 800b6fc:	3501      	adds	r5, #1
 800b6fe:	e7f2      	b.n	800b6e6 <__libc_init_array+0x1e>
 800b700:	0800c9cc 	.word	0x0800c9cc
 800b704:	0800c9cc 	.word	0x0800c9cc
 800b708:	0800c9cc 	.word	0x0800c9cc
 800b70c:	0800c9d0 	.word	0x0800c9d0

0800b710 <memcpy>:
 800b710:	b510      	push	{r4, lr}
 800b712:	1e43      	subs	r3, r0, #1
 800b714:	440a      	add	r2, r1
 800b716:	4291      	cmp	r1, r2
 800b718:	d100      	bne.n	800b71c <memcpy+0xc>
 800b71a:	bd10      	pop	{r4, pc}
 800b71c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b720:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b724:	e7f7      	b.n	800b716 <memcpy+0x6>

0800b726 <memset>:
 800b726:	4402      	add	r2, r0
 800b728:	4603      	mov	r3, r0
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d100      	bne.n	800b730 <memset+0xa>
 800b72e:	4770      	bx	lr
 800b730:	f803 1b01 	strb.w	r1, [r3], #1
 800b734:	e7f9      	b.n	800b72a <memset+0x4>
	...

0800b738 <siprintf>:
 800b738:	b40e      	push	{r1, r2, r3}
 800b73a:	b500      	push	{lr}
 800b73c:	b09c      	sub	sp, #112	; 0x70
 800b73e:	ab1d      	add	r3, sp, #116	; 0x74
 800b740:	9002      	str	r0, [sp, #8]
 800b742:	9006      	str	r0, [sp, #24]
 800b744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b748:	4809      	ldr	r0, [pc, #36]	; (800b770 <siprintf+0x38>)
 800b74a:	9107      	str	r1, [sp, #28]
 800b74c:	9104      	str	r1, [sp, #16]
 800b74e:	4909      	ldr	r1, [pc, #36]	; (800b774 <siprintf+0x3c>)
 800b750:	f853 2b04 	ldr.w	r2, [r3], #4
 800b754:	9105      	str	r1, [sp, #20]
 800b756:	6800      	ldr	r0, [r0, #0]
 800b758:	9301      	str	r3, [sp, #4]
 800b75a:	a902      	add	r1, sp, #8
 800b75c:	f000 f88e 	bl	800b87c <_svfiprintf_r>
 800b760:	9b02      	ldr	r3, [sp, #8]
 800b762:	2200      	movs	r2, #0
 800b764:	701a      	strb	r2, [r3, #0]
 800b766:	b01c      	add	sp, #112	; 0x70
 800b768:	f85d eb04 	ldr.w	lr, [sp], #4
 800b76c:	b003      	add	sp, #12
 800b76e:	4770      	bx	lr
 800b770:	20000054 	.word	0x20000054
 800b774:	ffff0208 	.word	0xffff0208

0800b778 <strncmp>:
 800b778:	b510      	push	{r4, lr}
 800b77a:	b16a      	cbz	r2, 800b798 <strncmp+0x20>
 800b77c:	3901      	subs	r1, #1
 800b77e:	1884      	adds	r4, r0, r2
 800b780:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b784:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b788:	4293      	cmp	r3, r2
 800b78a:	d103      	bne.n	800b794 <strncmp+0x1c>
 800b78c:	42a0      	cmp	r0, r4
 800b78e:	d001      	beq.n	800b794 <strncmp+0x1c>
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1f5      	bne.n	800b780 <strncmp+0x8>
 800b794:	1a98      	subs	r0, r3, r2
 800b796:	bd10      	pop	{r4, pc}
 800b798:	4610      	mov	r0, r2
 800b79a:	e7fc      	b.n	800b796 <strncmp+0x1e>

0800b79c <strncpy>:
 800b79c:	b570      	push	{r4, r5, r6, lr}
 800b79e:	3901      	subs	r1, #1
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	b902      	cbnz	r2, 800b7a6 <strncpy+0xa>
 800b7a4:	bd70      	pop	{r4, r5, r6, pc}
 800b7a6:	4623      	mov	r3, r4
 800b7a8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800b7ac:	f803 5b01 	strb.w	r5, [r3], #1
 800b7b0:	1e56      	subs	r6, r2, #1
 800b7b2:	b92d      	cbnz	r5, 800b7c0 <strncpy+0x24>
 800b7b4:	4414      	add	r4, r2
 800b7b6:	42a3      	cmp	r3, r4
 800b7b8:	d0f4      	beq.n	800b7a4 <strncpy+0x8>
 800b7ba:	f803 5b01 	strb.w	r5, [r3], #1
 800b7be:	e7fa      	b.n	800b7b6 <strncpy+0x1a>
 800b7c0:	461c      	mov	r4, r3
 800b7c2:	4632      	mov	r2, r6
 800b7c4:	e7ed      	b.n	800b7a2 <strncpy+0x6>

0800b7c6 <__ssputs_r>:
 800b7c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7ca:	688e      	ldr	r6, [r1, #8]
 800b7cc:	429e      	cmp	r6, r3
 800b7ce:	4682      	mov	sl, r0
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	4690      	mov	r8, r2
 800b7d4:	4699      	mov	r9, r3
 800b7d6:	d837      	bhi.n	800b848 <__ssputs_r+0x82>
 800b7d8:	898a      	ldrh	r2, [r1, #12]
 800b7da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7de:	d031      	beq.n	800b844 <__ssputs_r+0x7e>
 800b7e0:	6825      	ldr	r5, [r4, #0]
 800b7e2:	6909      	ldr	r1, [r1, #16]
 800b7e4:	1a6f      	subs	r7, r5, r1
 800b7e6:	6965      	ldr	r5, [r4, #20]
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7ee:	fb95 f5f3 	sdiv	r5, r5, r3
 800b7f2:	f109 0301 	add.w	r3, r9, #1
 800b7f6:	443b      	add	r3, r7
 800b7f8:	429d      	cmp	r5, r3
 800b7fa:	bf38      	it	cc
 800b7fc:	461d      	movcc	r5, r3
 800b7fe:	0553      	lsls	r3, r2, #21
 800b800:	d530      	bpl.n	800b864 <__ssputs_r+0x9e>
 800b802:	4629      	mov	r1, r5
 800b804:	f000 fb22 	bl	800be4c <_malloc_r>
 800b808:	4606      	mov	r6, r0
 800b80a:	b950      	cbnz	r0, 800b822 <__ssputs_r+0x5c>
 800b80c:	230c      	movs	r3, #12
 800b80e:	f8ca 3000 	str.w	r3, [sl]
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b818:	81a3      	strh	r3, [r4, #12]
 800b81a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b822:	463a      	mov	r2, r7
 800b824:	6921      	ldr	r1, [r4, #16]
 800b826:	f7ff ff73 	bl	800b710 <memcpy>
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b834:	81a3      	strh	r3, [r4, #12]
 800b836:	6126      	str	r6, [r4, #16]
 800b838:	6165      	str	r5, [r4, #20]
 800b83a:	443e      	add	r6, r7
 800b83c:	1bed      	subs	r5, r5, r7
 800b83e:	6026      	str	r6, [r4, #0]
 800b840:	60a5      	str	r5, [r4, #8]
 800b842:	464e      	mov	r6, r9
 800b844:	454e      	cmp	r6, r9
 800b846:	d900      	bls.n	800b84a <__ssputs_r+0x84>
 800b848:	464e      	mov	r6, r9
 800b84a:	4632      	mov	r2, r6
 800b84c:	4641      	mov	r1, r8
 800b84e:	6820      	ldr	r0, [r4, #0]
 800b850:	f000 fa94 	bl	800bd7c <memmove>
 800b854:	68a3      	ldr	r3, [r4, #8]
 800b856:	1b9b      	subs	r3, r3, r6
 800b858:	60a3      	str	r3, [r4, #8]
 800b85a:	6823      	ldr	r3, [r4, #0]
 800b85c:	441e      	add	r6, r3
 800b85e:	6026      	str	r6, [r4, #0]
 800b860:	2000      	movs	r0, #0
 800b862:	e7dc      	b.n	800b81e <__ssputs_r+0x58>
 800b864:	462a      	mov	r2, r5
 800b866:	f000 fb4b 	bl	800bf00 <_realloc_r>
 800b86a:	4606      	mov	r6, r0
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d1e2      	bne.n	800b836 <__ssputs_r+0x70>
 800b870:	6921      	ldr	r1, [r4, #16]
 800b872:	4650      	mov	r0, sl
 800b874:	f000 fa9c 	bl	800bdb0 <_free_r>
 800b878:	e7c8      	b.n	800b80c <__ssputs_r+0x46>
	...

0800b87c <_svfiprintf_r>:
 800b87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b880:	461d      	mov	r5, r3
 800b882:	898b      	ldrh	r3, [r1, #12]
 800b884:	061f      	lsls	r7, r3, #24
 800b886:	b09d      	sub	sp, #116	; 0x74
 800b888:	4680      	mov	r8, r0
 800b88a:	460c      	mov	r4, r1
 800b88c:	4616      	mov	r6, r2
 800b88e:	d50f      	bpl.n	800b8b0 <_svfiprintf_r+0x34>
 800b890:	690b      	ldr	r3, [r1, #16]
 800b892:	b96b      	cbnz	r3, 800b8b0 <_svfiprintf_r+0x34>
 800b894:	2140      	movs	r1, #64	; 0x40
 800b896:	f000 fad9 	bl	800be4c <_malloc_r>
 800b89a:	6020      	str	r0, [r4, #0]
 800b89c:	6120      	str	r0, [r4, #16]
 800b89e:	b928      	cbnz	r0, 800b8ac <_svfiprintf_r+0x30>
 800b8a0:	230c      	movs	r3, #12
 800b8a2:	f8c8 3000 	str.w	r3, [r8]
 800b8a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8aa:	e0c8      	b.n	800ba3e <_svfiprintf_r+0x1c2>
 800b8ac:	2340      	movs	r3, #64	; 0x40
 800b8ae:	6163      	str	r3, [r4, #20]
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b4:	2320      	movs	r3, #32
 800b8b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8ba:	2330      	movs	r3, #48	; 0x30
 800b8bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8c0:	9503      	str	r5, [sp, #12]
 800b8c2:	f04f 0b01 	mov.w	fp, #1
 800b8c6:	4637      	mov	r7, r6
 800b8c8:	463d      	mov	r5, r7
 800b8ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b8ce:	b10b      	cbz	r3, 800b8d4 <_svfiprintf_r+0x58>
 800b8d0:	2b25      	cmp	r3, #37	; 0x25
 800b8d2:	d13e      	bne.n	800b952 <_svfiprintf_r+0xd6>
 800b8d4:	ebb7 0a06 	subs.w	sl, r7, r6
 800b8d8:	d00b      	beq.n	800b8f2 <_svfiprintf_r+0x76>
 800b8da:	4653      	mov	r3, sl
 800b8dc:	4632      	mov	r2, r6
 800b8de:	4621      	mov	r1, r4
 800b8e0:	4640      	mov	r0, r8
 800b8e2:	f7ff ff70 	bl	800b7c6 <__ssputs_r>
 800b8e6:	3001      	adds	r0, #1
 800b8e8:	f000 80a4 	beq.w	800ba34 <_svfiprintf_r+0x1b8>
 800b8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ee:	4453      	add	r3, sl
 800b8f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b8f2:	783b      	ldrb	r3, [r7, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f000 809d 	beq.w	800ba34 <_svfiprintf_r+0x1b8>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b904:	9304      	str	r3, [sp, #16]
 800b906:	9307      	str	r3, [sp, #28]
 800b908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b90c:	931a      	str	r3, [sp, #104]	; 0x68
 800b90e:	462f      	mov	r7, r5
 800b910:	2205      	movs	r2, #5
 800b912:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b916:	4850      	ldr	r0, [pc, #320]	; (800ba58 <_svfiprintf_r+0x1dc>)
 800b918:	f7f4 fc6a 	bl	80001f0 <memchr>
 800b91c:	9b04      	ldr	r3, [sp, #16]
 800b91e:	b9d0      	cbnz	r0, 800b956 <_svfiprintf_r+0xda>
 800b920:	06d9      	lsls	r1, r3, #27
 800b922:	bf44      	itt	mi
 800b924:	2220      	movmi	r2, #32
 800b926:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b92a:	071a      	lsls	r2, r3, #28
 800b92c:	bf44      	itt	mi
 800b92e:	222b      	movmi	r2, #43	; 0x2b
 800b930:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b934:	782a      	ldrb	r2, [r5, #0]
 800b936:	2a2a      	cmp	r2, #42	; 0x2a
 800b938:	d015      	beq.n	800b966 <_svfiprintf_r+0xea>
 800b93a:	9a07      	ldr	r2, [sp, #28]
 800b93c:	462f      	mov	r7, r5
 800b93e:	2000      	movs	r0, #0
 800b940:	250a      	movs	r5, #10
 800b942:	4639      	mov	r1, r7
 800b944:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b948:	3b30      	subs	r3, #48	; 0x30
 800b94a:	2b09      	cmp	r3, #9
 800b94c:	d94d      	bls.n	800b9ea <_svfiprintf_r+0x16e>
 800b94e:	b1b8      	cbz	r0, 800b980 <_svfiprintf_r+0x104>
 800b950:	e00f      	b.n	800b972 <_svfiprintf_r+0xf6>
 800b952:	462f      	mov	r7, r5
 800b954:	e7b8      	b.n	800b8c8 <_svfiprintf_r+0x4c>
 800b956:	4a40      	ldr	r2, [pc, #256]	; (800ba58 <_svfiprintf_r+0x1dc>)
 800b958:	1a80      	subs	r0, r0, r2
 800b95a:	fa0b f000 	lsl.w	r0, fp, r0
 800b95e:	4318      	orrs	r0, r3
 800b960:	9004      	str	r0, [sp, #16]
 800b962:	463d      	mov	r5, r7
 800b964:	e7d3      	b.n	800b90e <_svfiprintf_r+0x92>
 800b966:	9a03      	ldr	r2, [sp, #12]
 800b968:	1d11      	adds	r1, r2, #4
 800b96a:	6812      	ldr	r2, [r2, #0]
 800b96c:	9103      	str	r1, [sp, #12]
 800b96e:	2a00      	cmp	r2, #0
 800b970:	db01      	blt.n	800b976 <_svfiprintf_r+0xfa>
 800b972:	9207      	str	r2, [sp, #28]
 800b974:	e004      	b.n	800b980 <_svfiprintf_r+0x104>
 800b976:	4252      	negs	r2, r2
 800b978:	f043 0302 	orr.w	r3, r3, #2
 800b97c:	9207      	str	r2, [sp, #28]
 800b97e:	9304      	str	r3, [sp, #16]
 800b980:	783b      	ldrb	r3, [r7, #0]
 800b982:	2b2e      	cmp	r3, #46	; 0x2e
 800b984:	d10c      	bne.n	800b9a0 <_svfiprintf_r+0x124>
 800b986:	787b      	ldrb	r3, [r7, #1]
 800b988:	2b2a      	cmp	r3, #42	; 0x2a
 800b98a:	d133      	bne.n	800b9f4 <_svfiprintf_r+0x178>
 800b98c:	9b03      	ldr	r3, [sp, #12]
 800b98e:	1d1a      	adds	r2, r3, #4
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	9203      	str	r2, [sp, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	bfb8      	it	lt
 800b998:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b99c:	3702      	adds	r7, #2
 800b99e:	9305      	str	r3, [sp, #20]
 800b9a0:	4d2e      	ldr	r5, [pc, #184]	; (800ba5c <_svfiprintf_r+0x1e0>)
 800b9a2:	7839      	ldrb	r1, [r7, #0]
 800b9a4:	2203      	movs	r2, #3
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	f7f4 fc22 	bl	80001f0 <memchr>
 800b9ac:	b138      	cbz	r0, 800b9be <_svfiprintf_r+0x142>
 800b9ae:	2340      	movs	r3, #64	; 0x40
 800b9b0:	1b40      	subs	r0, r0, r5
 800b9b2:	fa03 f000 	lsl.w	r0, r3, r0
 800b9b6:	9b04      	ldr	r3, [sp, #16]
 800b9b8:	4303      	orrs	r3, r0
 800b9ba:	3701      	adds	r7, #1
 800b9bc:	9304      	str	r3, [sp, #16]
 800b9be:	7839      	ldrb	r1, [r7, #0]
 800b9c0:	4827      	ldr	r0, [pc, #156]	; (800ba60 <_svfiprintf_r+0x1e4>)
 800b9c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9c6:	2206      	movs	r2, #6
 800b9c8:	1c7e      	adds	r6, r7, #1
 800b9ca:	f7f4 fc11 	bl	80001f0 <memchr>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d038      	beq.n	800ba44 <_svfiprintf_r+0x1c8>
 800b9d2:	4b24      	ldr	r3, [pc, #144]	; (800ba64 <_svfiprintf_r+0x1e8>)
 800b9d4:	bb13      	cbnz	r3, 800ba1c <_svfiprintf_r+0x1a0>
 800b9d6:	9b03      	ldr	r3, [sp, #12]
 800b9d8:	3307      	adds	r3, #7
 800b9da:	f023 0307 	bic.w	r3, r3, #7
 800b9de:	3308      	adds	r3, #8
 800b9e0:	9303      	str	r3, [sp, #12]
 800b9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e4:	444b      	add	r3, r9
 800b9e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9e8:	e76d      	b.n	800b8c6 <_svfiprintf_r+0x4a>
 800b9ea:	fb05 3202 	mla	r2, r5, r2, r3
 800b9ee:	2001      	movs	r0, #1
 800b9f0:	460f      	mov	r7, r1
 800b9f2:	e7a6      	b.n	800b942 <_svfiprintf_r+0xc6>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	3701      	adds	r7, #1
 800b9f8:	9305      	str	r3, [sp, #20]
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	250a      	movs	r5, #10
 800b9fe:	4638      	mov	r0, r7
 800ba00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba04:	3a30      	subs	r2, #48	; 0x30
 800ba06:	2a09      	cmp	r2, #9
 800ba08:	d903      	bls.n	800ba12 <_svfiprintf_r+0x196>
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d0c8      	beq.n	800b9a0 <_svfiprintf_r+0x124>
 800ba0e:	9105      	str	r1, [sp, #20]
 800ba10:	e7c6      	b.n	800b9a0 <_svfiprintf_r+0x124>
 800ba12:	fb05 2101 	mla	r1, r5, r1, r2
 800ba16:	2301      	movs	r3, #1
 800ba18:	4607      	mov	r7, r0
 800ba1a:	e7f0      	b.n	800b9fe <_svfiprintf_r+0x182>
 800ba1c:	ab03      	add	r3, sp, #12
 800ba1e:	9300      	str	r3, [sp, #0]
 800ba20:	4622      	mov	r2, r4
 800ba22:	4b11      	ldr	r3, [pc, #68]	; (800ba68 <_svfiprintf_r+0x1ec>)
 800ba24:	a904      	add	r1, sp, #16
 800ba26:	4640      	mov	r0, r8
 800ba28:	f3af 8000 	nop.w
 800ba2c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ba30:	4681      	mov	r9, r0
 800ba32:	d1d6      	bne.n	800b9e2 <_svfiprintf_r+0x166>
 800ba34:	89a3      	ldrh	r3, [r4, #12]
 800ba36:	065b      	lsls	r3, r3, #25
 800ba38:	f53f af35 	bmi.w	800b8a6 <_svfiprintf_r+0x2a>
 800ba3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba3e:	b01d      	add	sp, #116	; 0x74
 800ba40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba44:	ab03      	add	r3, sp, #12
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	4622      	mov	r2, r4
 800ba4a:	4b07      	ldr	r3, [pc, #28]	; (800ba68 <_svfiprintf_r+0x1ec>)
 800ba4c:	a904      	add	r1, sp, #16
 800ba4e:	4640      	mov	r0, r8
 800ba50:	f000 f882 	bl	800bb58 <_printf_i>
 800ba54:	e7ea      	b.n	800ba2c <_svfiprintf_r+0x1b0>
 800ba56:	bf00      	nop
 800ba58:	0800c990 	.word	0x0800c990
 800ba5c:	0800c996 	.word	0x0800c996
 800ba60:	0800c99a 	.word	0x0800c99a
 800ba64:	00000000 	.word	0x00000000
 800ba68:	0800b7c7 	.word	0x0800b7c7

0800ba6c <_printf_common>:
 800ba6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba70:	4691      	mov	r9, r2
 800ba72:	461f      	mov	r7, r3
 800ba74:	688a      	ldr	r2, [r1, #8]
 800ba76:	690b      	ldr	r3, [r1, #16]
 800ba78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	bfb8      	it	lt
 800ba80:	4613      	movlt	r3, r2
 800ba82:	f8c9 3000 	str.w	r3, [r9]
 800ba86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba8a:	4606      	mov	r6, r0
 800ba8c:	460c      	mov	r4, r1
 800ba8e:	b112      	cbz	r2, 800ba96 <_printf_common+0x2a>
 800ba90:	3301      	adds	r3, #1
 800ba92:	f8c9 3000 	str.w	r3, [r9]
 800ba96:	6823      	ldr	r3, [r4, #0]
 800ba98:	0699      	lsls	r1, r3, #26
 800ba9a:	bf42      	ittt	mi
 800ba9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800baa0:	3302      	addmi	r3, #2
 800baa2:	f8c9 3000 	strmi.w	r3, [r9]
 800baa6:	6825      	ldr	r5, [r4, #0]
 800baa8:	f015 0506 	ands.w	r5, r5, #6
 800baac:	d107      	bne.n	800babe <_printf_common+0x52>
 800baae:	f104 0a19 	add.w	sl, r4, #25
 800bab2:	68e3      	ldr	r3, [r4, #12]
 800bab4:	f8d9 2000 	ldr.w	r2, [r9]
 800bab8:	1a9b      	subs	r3, r3, r2
 800baba:	42ab      	cmp	r3, r5
 800babc:	dc28      	bgt.n	800bb10 <_printf_common+0xa4>
 800babe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bac2:	6822      	ldr	r2, [r4, #0]
 800bac4:	3300      	adds	r3, #0
 800bac6:	bf18      	it	ne
 800bac8:	2301      	movne	r3, #1
 800baca:	0692      	lsls	r2, r2, #26
 800bacc:	d42d      	bmi.n	800bb2a <_printf_common+0xbe>
 800bace:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bad2:	4639      	mov	r1, r7
 800bad4:	4630      	mov	r0, r6
 800bad6:	47c0      	blx	r8
 800bad8:	3001      	adds	r0, #1
 800bada:	d020      	beq.n	800bb1e <_printf_common+0xb2>
 800badc:	6823      	ldr	r3, [r4, #0]
 800bade:	68e5      	ldr	r5, [r4, #12]
 800bae0:	f8d9 2000 	ldr.w	r2, [r9]
 800bae4:	f003 0306 	and.w	r3, r3, #6
 800bae8:	2b04      	cmp	r3, #4
 800baea:	bf08      	it	eq
 800baec:	1aad      	subeq	r5, r5, r2
 800baee:	68a3      	ldr	r3, [r4, #8]
 800baf0:	6922      	ldr	r2, [r4, #16]
 800baf2:	bf0c      	ite	eq
 800baf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800baf8:	2500      	movne	r5, #0
 800bafa:	4293      	cmp	r3, r2
 800bafc:	bfc4      	itt	gt
 800bafe:	1a9b      	subgt	r3, r3, r2
 800bb00:	18ed      	addgt	r5, r5, r3
 800bb02:	f04f 0900 	mov.w	r9, #0
 800bb06:	341a      	adds	r4, #26
 800bb08:	454d      	cmp	r5, r9
 800bb0a:	d11a      	bne.n	800bb42 <_printf_common+0xd6>
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	e008      	b.n	800bb22 <_printf_common+0xb6>
 800bb10:	2301      	movs	r3, #1
 800bb12:	4652      	mov	r2, sl
 800bb14:	4639      	mov	r1, r7
 800bb16:	4630      	mov	r0, r6
 800bb18:	47c0      	blx	r8
 800bb1a:	3001      	adds	r0, #1
 800bb1c:	d103      	bne.n	800bb26 <_printf_common+0xba>
 800bb1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb26:	3501      	adds	r5, #1
 800bb28:	e7c3      	b.n	800bab2 <_printf_common+0x46>
 800bb2a:	18e1      	adds	r1, r4, r3
 800bb2c:	1c5a      	adds	r2, r3, #1
 800bb2e:	2030      	movs	r0, #48	; 0x30
 800bb30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb34:	4422      	add	r2, r4
 800bb36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb3e:	3302      	adds	r3, #2
 800bb40:	e7c5      	b.n	800bace <_printf_common+0x62>
 800bb42:	2301      	movs	r3, #1
 800bb44:	4622      	mov	r2, r4
 800bb46:	4639      	mov	r1, r7
 800bb48:	4630      	mov	r0, r6
 800bb4a:	47c0      	blx	r8
 800bb4c:	3001      	adds	r0, #1
 800bb4e:	d0e6      	beq.n	800bb1e <_printf_common+0xb2>
 800bb50:	f109 0901 	add.w	r9, r9, #1
 800bb54:	e7d8      	b.n	800bb08 <_printf_common+0x9c>
	...

0800bb58 <_printf_i>:
 800bb58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bb60:	460c      	mov	r4, r1
 800bb62:	7e09      	ldrb	r1, [r1, #24]
 800bb64:	b085      	sub	sp, #20
 800bb66:	296e      	cmp	r1, #110	; 0x6e
 800bb68:	4617      	mov	r7, r2
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	4698      	mov	r8, r3
 800bb6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb70:	f000 80b3 	beq.w	800bcda <_printf_i+0x182>
 800bb74:	d822      	bhi.n	800bbbc <_printf_i+0x64>
 800bb76:	2963      	cmp	r1, #99	; 0x63
 800bb78:	d036      	beq.n	800bbe8 <_printf_i+0x90>
 800bb7a:	d80a      	bhi.n	800bb92 <_printf_i+0x3a>
 800bb7c:	2900      	cmp	r1, #0
 800bb7e:	f000 80b9 	beq.w	800bcf4 <_printf_i+0x19c>
 800bb82:	2958      	cmp	r1, #88	; 0x58
 800bb84:	f000 8083 	beq.w	800bc8e <_printf_i+0x136>
 800bb88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bb90:	e032      	b.n	800bbf8 <_printf_i+0xa0>
 800bb92:	2964      	cmp	r1, #100	; 0x64
 800bb94:	d001      	beq.n	800bb9a <_printf_i+0x42>
 800bb96:	2969      	cmp	r1, #105	; 0x69
 800bb98:	d1f6      	bne.n	800bb88 <_printf_i+0x30>
 800bb9a:	6820      	ldr	r0, [r4, #0]
 800bb9c:	6813      	ldr	r3, [r2, #0]
 800bb9e:	0605      	lsls	r5, r0, #24
 800bba0:	f103 0104 	add.w	r1, r3, #4
 800bba4:	d52a      	bpl.n	800bbfc <_printf_i+0xa4>
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	6011      	str	r1, [r2, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	da03      	bge.n	800bbb6 <_printf_i+0x5e>
 800bbae:	222d      	movs	r2, #45	; 0x2d
 800bbb0:	425b      	negs	r3, r3
 800bbb2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bbb6:	486f      	ldr	r0, [pc, #444]	; (800bd74 <_printf_i+0x21c>)
 800bbb8:	220a      	movs	r2, #10
 800bbba:	e039      	b.n	800bc30 <_printf_i+0xd8>
 800bbbc:	2973      	cmp	r1, #115	; 0x73
 800bbbe:	f000 809d 	beq.w	800bcfc <_printf_i+0x1a4>
 800bbc2:	d808      	bhi.n	800bbd6 <_printf_i+0x7e>
 800bbc4:	296f      	cmp	r1, #111	; 0x6f
 800bbc6:	d020      	beq.n	800bc0a <_printf_i+0xb2>
 800bbc8:	2970      	cmp	r1, #112	; 0x70
 800bbca:	d1dd      	bne.n	800bb88 <_printf_i+0x30>
 800bbcc:	6823      	ldr	r3, [r4, #0]
 800bbce:	f043 0320 	orr.w	r3, r3, #32
 800bbd2:	6023      	str	r3, [r4, #0]
 800bbd4:	e003      	b.n	800bbde <_printf_i+0x86>
 800bbd6:	2975      	cmp	r1, #117	; 0x75
 800bbd8:	d017      	beq.n	800bc0a <_printf_i+0xb2>
 800bbda:	2978      	cmp	r1, #120	; 0x78
 800bbdc:	d1d4      	bne.n	800bb88 <_printf_i+0x30>
 800bbde:	2378      	movs	r3, #120	; 0x78
 800bbe0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bbe4:	4864      	ldr	r0, [pc, #400]	; (800bd78 <_printf_i+0x220>)
 800bbe6:	e055      	b.n	800bc94 <_printf_i+0x13c>
 800bbe8:	6813      	ldr	r3, [r2, #0]
 800bbea:	1d19      	adds	r1, r3, #4
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	6011      	str	r1, [r2, #0]
 800bbf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e08c      	b.n	800bd16 <_printf_i+0x1be>
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	6011      	str	r1, [r2, #0]
 800bc00:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc04:	bf18      	it	ne
 800bc06:	b21b      	sxthne	r3, r3
 800bc08:	e7cf      	b.n	800bbaa <_printf_i+0x52>
 800bc0a:	6813      	ldr	r3, [r2, #0]
 800bc0c:	6825      	ldr	r5, [r4, #0]
 800bc0e:	1d18      	adds	r0, r3, #4
 800bc10:	6010      	str	r0, [r2, #0]
 800bc12:	0628      	lsls	r0, r5, #24
 800bc14:	d501      	bpl.n	800bc1a <_printf_i+0xc2>
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	e002      	b.n	800bc20 <_printf_i+0xc8>
 800bc1a:	0668      	lsls	r0, r5, #25
 800bc1c:	d5fb      	bpl.n	800bc16 <_printf_i+0xbe>
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	4854      	ldr	r0, [pc, #336]	; (800bd74 <_printf_i+0x21c>)
 800bc22:	296f      	cmp	r1, #111	; 0x6f
 800bc24:	bf14      	ite	ne
 800bc26:	220a      	movne	r2, #10
 800bc28:	2208      	moveq	r2, #8
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc30:	6865      	ldr	r5, [r4, #4]
 800bc32:	60a5      	str	r5, [r4, #8]
 800bc34:	2d00      	cmp	r5, #0
 800bc36:	f2c0 8095 	blt.w	800bd64 <_printf_i+0x20c>
 800bc3a:	6821      	ldr	r1, [r4, #0]
 800bc3c:	f021 0104 	bic.w	r1, r1, #4
 800bc40:	6021      	str	r1, [r4, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d13d      	bne.n	800bcc2 <_printf_i+0x16a>
 800bc46:	2d00      	cmp	r5, #0
 800bc48:	f040 808e 	bne.w	800bd68 <_printf_i+0x210>
 800bc4c:	4665      	mov	r5, ip
 800bc4e:	2a08      	cmp	r2, #8
 800bc50:	d10b      	bne.n	800bc6a <_printf_i+0x112>
 800bc52:	6823      	ldr	r3, [r4, #0]
 800bc54:	07db      	lsls	r3, r3, #31
 800bc56:	d508      	bpl.n	800bc6a <_printf_i+0x112>
 800bc58:	6923      	ldr	r3, [r4, #16]
 800bc5a:	6862      	ldr	r2, [r4, #4]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	bfde      	ittt	le
 800bc60:	2330      	movle	r3, #48	; 0x30
 800bc62:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc66:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bc6a:	ebac 0305 	sub.w	r3, ip, r5
 800bc6e:	6123      	str	r3, [r4, #16]
 800bc70:	f8cd 8000 	str.w	r8, [sp]
 800bc74:	463b      	mov	r3, r7
 800bc76:	aa03      	add	r2, sp, #12
 800bc78:	4621      	mov	r1, r4
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	f7ff fef6 	bl	800ba6c <_printf_common>
 800bc80:	3001      	adds	r0, #1
 800bc82:	d14d      	bne.n	800bd20 <_printf_i+0x1c8>
 800bc84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc88:	b005      	add	sp, #20
 800bc8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc8e:	4839      	ldr	r0, [pc, #228]	; (800bd74 <_printf_i+0x21c>)
 800bc90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bc94:	6813      	ldr	r3, [r2, #0]
 800bc96:	6821      	ldr	r1, [r4, #0]
 800bc98:	1d1d      	adds	r5, r3, #4
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	6015      	str	r5, [r2, #0]
 800bc9e:	060a      	lsls	r2, r1, #24
 800bca0:	d50b      	bpl.n	800bcba <_printf_i+0x162>
 800bca2:	07ca      	lsls	r2, r1, #31
 800bca4:	bf44      	itt	mi
 800bca6:	f041 0120 	orrmi.w	r1, r1, #32
 800bcaa:	6021      	strmi	r1, [r4, #0]
 800bcac:	b91b      	cbnz	r3, 800bcb6 <_printf_i+0x15e>
 800bcae:	6822      	ldr	r2, [r4, #0]
 800bcb0:	f022 0220 	bic.w	r2, r2, #32
 800bcb4:	6022      	str	r2, [r4, #0]
 800bcb6:	2210      	movs	r2, #16
 800bcb8:	e7b7      	b.n	800bc2a <_printf_i+0xd2>
 800bcba:	064d      	lsls	r5, r1, #25
 800bcbc:	bf48      	it	mi
 800bcbe:	b29b      	uxthmi	r3, r3
 800bcc0:	e7ef      	b.n	800bca2 <_printf_i+0x14a>
 800bcc2:	4665      	mov	r5, ip
 800bcc4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bcc8:	fb02 3311 	mls	r3, r2, r1, r3
 800bccc:	5cc3      	ldrb	r3, [r0, r3]
 800bcce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	2900      	cmp	r1, #0
 800bcd6:	d1f5      	bne.n	800bcc4 <_printf_i+0x16c>
 800bcd8:	e7b9      	b.n	800bc4e <_printf_i+0xf6>
 800bcda:	6813      	ldr	r3, [r2, #0]
 800bcdc:	6825      	ldr	r5, [r4, #0]
 800bcde:	6961      	ldr	r1, [r4, #20]
 800bce0:	1d18      	adds	r0, r3, #4
 800bce2:	6010      	str	r0, [r2, #0]
 800bce4:	0628      	lsls	r0, r5, #24
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	d501      	bpl.n	800bcee <_printf_i+0x196>
 800bcea:	6019      	str	r1, [r3, #0]
 800bcec:	e002      	b.n	800bcf4 <_printf_i+0x19c>
 800bcee:	066a      	lsls	r2, r5, #25
 800bcf0:	d5fb      	bpl.n	800bcea <_printf_i+0x192>
 800bcf2:	8019      	strh	r1, [r3, #0]
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	6123      	str	r3, [r4, #16]
 800bcf8:	4665      	mov	r5, ip
 800bcfa:	e7b9      	b.n	800bc70 <_printf_i+0x118>
 800bcfc:	6813      	ldr	r3, [r2, #0]
 800bcfe:	1d19      	adds	r1, r3, #4
 800bd00:	6011      	str	r1, [r2, #0]
 800bd02:	681d      	ldr	r5, [r3, #0]
 800bd04:	6862      	ldr	r2, [r4, #4]
 800bd06:	2100      	movs	r1, #0
 800bd08:	4628      	mov	r0, r5
 800bd0a:	f7f4 fa71 	bl	80001f0 <memchr>
 800bd0e:	b108      	cbz	r0, 800bd14 <_printf_i+0x1bc>
 800bd10:	1b40      	subs	r0, r0, r5
 800bd12:	6060      	str	r0, [r4, #4]
 800bd14:	6863      	ldr	r3, [r4, #4]
 800bd16:	6123      	str	r3, [r4, #16]
 800bd18:	2300      	movs	r3, #0
 800bd1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd1e:	e7a7      	b.n	800bc70 <_printf_i+0x118>
 800bd20:	6923      	ldr	r3, [r4, #16]
 800bd22:	462a      	mov	r2, r5
 800bd24:	4639      	mov	r1, r7
 800bd26:	4630      	mov	r0, r6
 800bd28:	47c0      	blx	r8
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	d0aa      	beq.n	800bc84 <_printf_i+0x12c>
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	079b      	lsls	r3, r3, #30
 800bd32:	d413      	bmi.n	800bd5c <_printf_i+0x204>
 800bd34:	68e0      	ldr	r0, [r4, #12]
 800bd36:	9b03      	ldr	r3, [sp, #12]
 800bd38:	4298      	cmp	r0, r3
 800bd3a:	bfb8      	it	lt
 800bd3c:	4618      	movlt	r0, r3
 800bd3e:	e7a3      	b.n	800bc88 <_printf_i+0x130>
 800bd40:	2301      	movs	r3, #1
 800bd42:	464a      	mov	r2, r9
 800bd44:	4639      	mov	r1, r7
 800bd46:	4630      	mov	r0, r6
 800bd48:	47c0      	blx	r8
 800bd4a:	3001      	adds	r0, #1
 800bd4c:	d09a      	beq.n	800bc84 <_printf_i+0x12c>
 800bd4e:	3501      	adds	r5, #1
 800bd50:	68e3      	ldr	r3, [r4, #12]
 800bd52:	9a03      	ldr	r2, [sp, #12]
 800bd54:	1a9b      	subs	r3, r3, r2
 800bd56:	42ab      	cmp	r3, r5
 800bd58:	dcf2      	bgt.n	800bd40 <_printf_i+0x1e8>
 800bd5a:	e7eb      	b.n	800bd34 <_printf_i+0x1dc>
 800bd5c:	2500      	movs	r5, #0
 800bd5e:	f104 0919 	add.w	r9, r4, #25
 800bd62:	e7f5      	b.n	800bd50 <_printf_i+0x1f8>
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1ac      	bne.n	800bcc2 <_printf_i+0x16a>
 800bd68:	7803      	ldrb	r3, [r0, #0]
 800bd6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd72:	e76c      	b.n	800bc4e <_printf_i+0xf6>
 800bd74:	0800c9a1 	.word	0x0800c9a1
 800bd78:	0800c9b2 	.word	0x0800c9b2

0800bd7c <memmove>:
 800bd7c:	4288      	cmp	r0, r1
 800bd7e:	b510      	push	{r4, lr}
 800bd80:	eb01 0302 	add.w	r3, r1, r2
 800bd84:	d807      	bhi.n	800bd96 <memmove+0x1a>
 800bd86:	1e42      	subs	r2, r0, #1
 800bd88:	4299      	cmp	r1, r3
 800bd8a:	d00a      	beq.n	800bda2 <memmove+0x26>
 800bd8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd90:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bd94:	e7f8      	b.n	800bd88 <memmove+0xc>
 800bd96:	4283      	cmp	r3, r0
 800bd98:	d9f5      	bls.n	800bd86 <memmove+0xa>
 800bd9a:	1881      	adds	r1, r0, r2
 800bd9c:	1ad2      	subs	r2, r2, r3
 800bd9e:	42d3      	cmn	r3, r2
 800bda0:	d100      	bne.n	800bda4 <memmove+0x28>
 800bda2:	bd10      	pop	{r4, pc}
 800bda4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bda8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bdac:	e7f7      	b.n	800bd9e <memmove+0x22>
	...

0800bdb0 <_free_r>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	4605      	mov	r5, r0
 800bdb4:	2900      	cmp	r1, #0
 800bdb6:	d045      	beq.n	800be44 <_free_r+0x94>
 800bdb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdbc:	1f0c      	subs	r4, r1, #4
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	bfb8      	it	lt
 800bdc2:	18e4      	addlt	r4, r4, r3
 800bdc4:	f000 f8d2 	bl	800bf6c <__malloc_lock>
 800bdc8:	4a1f      	ldr	r2, [pc, #124]	; (800be48 <_free_r+0x98>)
 800bdca:	6813      	ldr	r3, [r2, #0]
 800bdcc:	4610      	mov	r0, r2
 800bdce:	b933      	cbnz	r3, 800bdde <_free_r+0x2e>
 800bdd0:	6063      	str	r3, [r4, #4]
 800bdd2:	6014      	str	r4, [r2, #0]
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdda:	f000 b8c8 	b.w	800bf6e <__malloc_unlock>
 800bdde:	42a3      	cmp	r3, r4
 800bde0:	d90c      	bls.n	800bdfc <_free_r+0x4c>
 800bde2:	6821      	ldr	r1, [r4, #0]
 800bde4:	1862      	adds	r2, r4, r1
 800bde6:	4293      	cmp	r3, r2
 800bde8:	bf04      	itt	eq
 800bdea:	681a      	ldreq	r2, [r3, #0]
 800bdec:	685b      	ldreq	r3, [r3, #4]
 800bdee:	6063      	str	r3, [r4, #4]
 800bdf0:	bf04      	itt	eq
 800bdf2:	1852      	addeq	r2, r2, r1
 800bdf4:	6022      	streq	r2, [r4, #0]
 800bdf6:	6004      	str	r4, [r0, #0]
 800bdf8:	e7ec      	b.n	800bdd4 <_free_r+0x24>
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	685a      	ldr	r2, [r3, #4]
 800bdfe:	b10a      	cbz	r2, 800be04 <_free_r+0x54>
 800be00:	42a2      	cmp	r2, r4
 800be02:	d9fa      	bls.n	800bdfa <_free_r+0x4a>
 800be04:	6819      	ldr	r1, [r3, #0]
 800be06:	1858      	adds	r0, r3, r1
 800be08:	42a0      	cmp	r0, r4
 800be0a:	d10b      	bne.n	800be24 <_free_r+0x74>
 800be0c:	6820      	ldr	r0, [r4, #0]
 800be0e:	4401      	add	r1, r0
 800be10:	1858      	adds	r0, r3, r1
 800be12:	4282      	cmp	r2, r0
 800be14:	6019      	str	r1, [r3, #0]
 800be16:	d1dd      	bne.n	800bdd4 <_free_r+0x24>
 800be18:	6810      	ldr	r0, [r2, #0]
 800be1a:	6852      	ldr	r2, [r2, #4]
 800be1c:	605a      	str	r2, [r3, #4]
 800be1e:	4401      	add	r1, r0
 800be20:	6019      	str	r1, [r3, #0]
 800be22:	e7d7      	b.n	800bdd4 <_free_r+0x24>
 800be24:	d902      	bls.n	800be2c <_free_r+0x7c>
 800be26:	230c      	movs	r3, #12
 800be28:	602b      	str	r3, [r5, #0]
 800be2a:	e7d3      	b.n	800bdd4 <_free_r+0x24>
 800be2c:	6820      	ldr	r0, [r4, #0]
 800be2e:	1821      	adds	r1, r4, r0
 800be30:	428a      	cmp	r2, r1
 800be32:	bf04      	itt	eq
 800be34:	6811      	ldreq	r1, [r2, #0]
 800be36:	6852      	ldreq	r2, [r2, #4]
 800be38:	6062      	str	r2, [r4, #4]
 800be3a:	bf04      	itt	eq
 800be3c:	1809      	addeq	r1, r1, r0
 800be3e:	6021      	streq	r1, [r4, #0]
 800be40:	605c      	str	r4, [r3, #4]
 800be42:	e7c7      	b.n	800bdd4 <_free_r+0x24>
 800be44:	bd38      	pop	{r3, r4, r5, pc}
 800be46:	bf00      	nop
 800be48:	20002aa4 	.word	0x20002aa4

0800be4c <_malloc_r>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	1ccd      	adds	r5, r1, #3
 800be50:	f025 0503 	bic.w	r5, r5, #3
 800be54:	3508      	adds	r5, #8
 800be56:	2d0c      	cmp	r5, #12
 800be58:	bf38      	it	cc
 800be5a:	250c      	movcc	r5, #12
 800be5c:	2d00      	cmp	r5, #0
 800be5e:	4606      	mov	r6, r0
 800be60:	db01      	blt.n	800be66 <_malloc_r+0x1a>
 800be62:	42a9      	cmp	r1, r5
 800be64:	d903      	bls.n	800be6e <_malloc_r+0x22>
 800be66:	230c      	movs	r3, #12
 800be68:	6033      	str	r3, [r6, #0]
 800be6a:	2000      	movs	r0, #0
 800be6c:	bd70      	pop	{r4, r5, r6, pc}
 800be6e:	f000 f87d 	bl	800bf6c <__malloc_lock>
 800be72:	4a21      	ldr	r2, [pc, #132]	; (800bef8 <_malloc_r+0xac>)
 800be74:	6814      	ldr	r4, [r2, #0]
 800be76:	4621      	mov	r1, r4
 800be78:	b991      	cbnz	r1, 800bea0 <_malloc_r+0x54>
 800be7a:	4c20      	ldr	r4, [pc, #128]	; (800befc <_malloc_r+0xb0>)
 800be7c:	6823      	ldr	r3, [r4, #0]
 800be7e:	b91b      	cbnz	r3, 800be88 <_malloc_r+0x3c>
 800be80:	4630      	mov	r0, r6
 800be82:	f000 f863 	bl	800bf4c <_sbrk_r>
 800be86:	6020      	str	r0, [r4, #0]
 800be88:	4629      	mov	r1, r5
 800be8a:	4630      	mov	r0, r6
 800be8c:	f000 f85e 	bl	800bf4c <_sbrk_r>
 800be90:	1c43      	adds	r3, r0, #1
 800be92:	d124      	bne.n	800bede <_malloc_r+0x92>
 800be94:	230c      	movs	r3, #12
 800be96:	6033      	str	r3, [r6, #0]
 800be98:	4630      	mov	r0, r6
 800be9a:	f000 f868 	bl	800bf6e <__malloc_unlock>
 800be9e:	e7e4      	b.n	800be6a <_malloc_r+0x1e>
 800bea0:	680b      	ldr	r3, [r1, #0]
 800bea2:	1b5b      	subs	r3, r3, r5
 800bea4:	d418      	bmi.n	800bed8 <_malloc_r+0x8c>
 800bea6:	2b0b      	cmp	r3, #11
 800bea8:	d90f      	bls.n	800beca <_malloc_r+0x7e>
 800beaa:	600b      	str	r3, [r1, #0]
 800beac:	50cd      	str	r5, [r1, r3]
 800beae:	18cc      	adds	r4, r1, r3
 800beb0:	4630      	mov	r0, r6
 800beb2:	f000 f85c 	bl	800bf6e <__malloc_unlock>
 800beb6:	f104 000b 	add.w	r0, r4, #11
 800beba:	1d23      	adds	r3, r4, #4
 800bebc:	f020 0007 	bic.w	r0, r0, #7
 800bec0:	1ac3      	subs	r3, r0, r3
 800bec2:	d0d3      	beq.n	800be6c <_malloc_r+0x20>
 800bec4:	425a      	negs	r2, r3
 800bec6:	50e2      	str	r2, [r4, r3]
 800bec8:	e7d0      	b.n	800be6c <_malloc_r+0x20>
 800beca:	428c      	cmp	r4, r1
 800becc:	684b      	ldr	r3, [r1, #4]
 800bece:	bf16      	itet	ne
 800bed0:	6063      	strne	r3, [r4, #4]
 800bed2:	6013      	streq	r3, [r2, #0]
 800bed4:	460c      	movne	r4, r1
 800bed6:	e7eb      	b.n	800beb0 <_malloc_r+0x64>
 800bed8:	460c      	mov	r4, r1
 800beda:	6849      	ldr	r1, [r1, #4]
 800bedc:	e7cc      	b.n	800be78 <_malloc_r+0x2c>
 800bede:	1cc4      	adds	r4, r0, #3
 800bee0:	f024 0403 	bic.w	r4, r4, #3
 800bee4:	42a0      	cmp	r0, r4
 800bee6:	d005      	beq.n	800bef4 <_malloc_r+0xa8>
 800bee8:	1a21      	subs	r1, r4, r0
 800beea:	4630      	mov	r0, r6
 800beec:	f000 f82e 	bl	800bf4c <_sbrk_r>
 800bef0:	3001      	adds	r0, #1
 800bef2:	d0cf      	beq.n	800be94 <_malloc_r+0x48>
 800bef4:	6025      	str	r5, [r4, #0]
 800bef6:	e7db      	b.n	800beb0 <_malloc_r+0x64>
 800bef8:	20002aa4 	.word	0x20002aa4
 800befc:	20002aa8 	.word	0x20002aa8

0800bf00 <_realloc_r>:
 800bf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf02:	4607      	mov	r7, r0
 800bf04:	4614      	mov	r4, r2
 800bf06:	460e      	mov	r6, r1
 800bf08:	b921      	cbnz	r1, 800bf14 <_realloc_r+0x14>
 800bf0a:	4611      	mov	r1, r2
 800bf0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf10:	f7ff bf9c 	b.w	800be4c <_malloc_r>
 800bf14:	b922      	cbnz	r2, 800bf20 <_realloc_r+0x20>
 800bf16:	f7ff ff4b 	bl	800bdb0 <_free_r>
 800bf1a:	4625      	mov	r5, r4
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf20:	f000 f826 	bl	800bf70 <_malloc_usable_size_r>
 800bf24:	42a0      	cmp	r0, r4
 800bf26:	d20f      	bcs.n	800bf48 <_realloc_r+0x48>
 800bf28:	4621      	mov	r1, r4
 800bf2a:	4638      	mov	r0, r7
 800bf2c:	f7ff ff8e 	bl	800be4c <_malloc_r>
 800bf30:	4605      	mov	r5, r0
 800bf32:	2800      	cmp	r0, #0
 800bf34:	d0f2      	beq.n	800bf1c <_realloc_r+0x1c>
 800bf36:	4631      	mov	r1, r6
 800bf38:	4622      	mov	r2, r4
 800bf3a:	f7ff fbe9 	bl	800b710 <memcpy>
 800bf3e:	4631      	mov	r1, r6
 800bf40:	4638      	mov	r0, r7
 800bf42:	f7ff ff35 	bl	800bdb0 <_free_r>
 800bf46:	e7e9      	b.n	800bf1c <_realloc_r+0x1c>
 800bf48:	4635      	mov	r5, r6
 800bf4a:	e7e7      	b.n	800bf1c <_realloc_r+0x1c>

0800bf4c <_sbrk_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	4c06      	ldr	r4, [pc, #24]	; (800bf68 <_sbrk_r+0x1c>)
 800bf50:	2300      	movs	r3, #0
 800bf52:	4605      	mov	r5, r0
 800bf54:	4608      	mov	r0, r1
 800bf56:	6023      	str	r3, [r4, #0]
 800bf58:	f7f8 fd10 	bl	800497c <_sbrk>
 800bf5c:	1c43      	adds	r3, r0, #1
 800bf5e:	d102      	bne.n	800bf66 <_sbrk_r+0x1a>
 800bf60:	6823      	ldr	r3, [r4, #0]
 800bf62:	b103      	cbz	r3, 800bf66 <_sbrk_r+0x1a>
 800bf64:	602b      	str	r3, [r5, #0]
 800bf66:	bd38      	pop	{r3, r4, r5, pc}
 800bf68:	200033dc 	.word	0x200033dc

0800bf6c <__malloc_lock>:
 800bf6c:	4770      	bx	lr

0800bf6e <__malloc_unlock>:
 800bf6e:	4770      	bx	lr

0800bf70 <_malloc_usable_size_r>:
 800bf70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf74:	1f18      	subs	r0, r3, #4
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	bfbc      	itt	lt
 800bf7a:	580b      	ldrlt	r3, [r1, r0]
 800bf7c:	18c0      	addlt	r0, r0, r3
 800bf7e:	4770      	bx	lr

0800bf80 <_init>:
 800bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf82:	bf00      	nop
 800bf84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf86:	bc08      	pop	{r3}
 800bf88:	469e      	mov	lr, r3
 800bf8a:	4770      	bx	lr

0800bf8c <_fini>:
 800bf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf8e:	bf00      	nop
 800bf90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf92:	bc08      	pop	{r3}
 800bf94:	469e      	mov	lr, r3
 800bf96:	4770      	bx	lr

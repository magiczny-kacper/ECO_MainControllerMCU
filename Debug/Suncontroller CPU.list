
Suncontroller CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800b458  0800b458  0001b458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba94  0800ba94  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba94  0800ba94  0001ba94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba9c  0800ba9c  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba9c  0800ba9c  0001ba9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800baa0  0800baa0  0001baa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800baa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032c0  200000b8  0800bb5c  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003378  0800bb5c  00023378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003de35  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000729c  00000000  00000000  0005df1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001ae29  00000000  00000000  000651b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002410  00000000  00000000  0007ffe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002480  00000000  00000000  000823f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000a2d1  00000000  00000000  00084878  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00021e1c  00000000  00000000  0008eb49  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000aba72  00000000  00000000  000b0965  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0015c3d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c6c  00000000  00000000  0015c454  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b8 	.word	0x200000b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b440 	.word	0x0800b440

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	0800b440 	.word	0x0800b440

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <xCLI_EreaseEE>:

void CLI_Init (void){
	FreeRTOS_CLIRegisterCommand(&xEreaseEECmd);
}

BaseType_t xCLI_EreaseEE( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8000e0c:	b538      	push	{r3, r4, r5, lr}
 8000e0e:	4604      	mov	r4, r0
	(void) pcCommandString;
	(void) xWriteBufferLen;
	EE_StatusTypeDef retval = EE_Erease();
 8000e10:	f000 f9e8 	bl	80011e4 <EE_Erease>
	if(retval == EE_OK){
 8000e14:	b148      	cbz	r0, 8000e2a <xCLI_EreaseEE+0x1e>
		sprintf(pcWriteBuffer, "Wyczyszczono.\r\n");
	}else{
		sprintf(pcWriteBuffer, "Nie wyczyszczono.\r\n");
 8000e16:	4d08      	ldr	r5, [pc, #32]	; (8000e38 <xCLI_EreaseEE+0x2c>)
 8000e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1a:	6020      	str	r0, [r4, #0]
 8000e1c:	6061      	str	r1, [r4, #4]
 8000e1e:	60a2      	str	r2, [r4, #8]
 8000e20:	60e3      	str	r3, [r4, #12]
 8000e22:	6828      	ldr	r0, [r5, #0]
 8000e24:	6120      	str	r0, [r4, #16]
	}
	return pdFALSE;
}
 8000e26:	2000      	movs	r0, #0
 8000e28:	bd38      	pop	{r3, r4, r5, pc}
		sprintf(pcWriteBuffer, "Wyczyszczono.\r\n");
 8000e2a:	4d04      	ldr	r5, [pc, #16]	; (8000e3c <xCLI_EreaseEE+0x30>)
 8000e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e2e:	6020      	str	r0, [r4, #0]
 8000e30:	6061      	str	r1, [r4, #4]
 8000e32:	60a2      	str	r2, [r4, #8]
 8000e34:	60e3      	str	r3, [r4, #12]
 8000e36:	e7f6      	b.n	8000e26 <xCLI_EreaseEE+0x1a>
 8000e38:	0800b56c 	.word	0x0800b56c
 8000e3c:	0800b55c 	.word	0x0800b55c

08000e40 <CLI_Init>:
void CLI_Init (void){
 8000e40:	b508      	push	{r3, lr}
	FreeRTOS_CLIRegisterCommand(&xEreaseEECmd);
 8000e42:	4802      	ldr	r0, [pc, #8]	; (8000e4c <CLI_Init+0xc>)
 8000e44:	f009 fe0e 	bl	800aa64 <FreeRTOS_CLIRegisterCommand>
}
 8000e48:	bd08      	pop	{r3, pc}
 8000e4a:	bf00      	nop
 8000e4c:	0800b580 	.word	0x0800b580

08000e50 <Config_CalculateCRC>:
		configuration.dummy = MAGIC_WORD;
		configuration.crc = Config_CalculateCRC();
	}
}

static uint32_t Config_CalculateCRC (void){
 8000e50:	b508      	push	{r3, lr}
	return HAL_CRC_Calculate(&hcrc, (uint32_t*)&configuration, (CONFIG_BYTES_LEN - 2)/4);
 8000e52:	220d      	movs	r2, #13
 8000e54:	4902      	ldr	r1, [pc, #8]	; (8000e60 <Config_CalculateCRC+0x10>)
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <Config_CalculateCRC+0x14>)
 8000e58:	f004 fa07 	bl	800526a <HAL_CRC_Calculate>
}
 8000e5c:	bd08      	pop	{r3, pc}
 8000e5e:	bf00      	nop
 8000e60:	200000d8 	.word	0x200000d8
 8000e64:	20002fac 	.word	0x20002fac

08000e68 <Config_CheckData>:

static CONFStatus_t Config_CheckData (void){
 8000e68:	b510      	push	{r4, lr}
	CONFStatus_t retval;
	uint32_t readCRC, actualCRC;

	readCRC = configuration.crc;
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <Config_CheckData+0x18>)
 8000e6c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
	actualCRC = Config_CalculateCRC();
 8000e6e:	f7ff ffef 	bl	8000e50 <Config_CalculateCRC>

	if(readCRC != actualCRC){
 8000e72:	4284      	cmp	r4, r0
 8000e74:	d101      	bne.n	8000e7a <Config_CheckData+0x12>
		if(configuration.dummy != MAGIC_WORD){
			retval = CONF_ERR_NOCONF;
		}
		retval = CONF_ERR_CRC;
	}else{
		retval = CONF_OK;
 8000e76:	2000      	movs	r0, #0
	}
	return retval;
}
 8000e78:	bd10      	pop	{r4, pc}
		retval = CONF_ERR_CRC;
 8000e7a:	f06f 0003 	mvn.w	r0, #3
 8000e7e:	e7fb      	b.n	8000e78 <Config_CheckData+0x10>
 8000e80:	200000d8 	.word	0x200000d8

08000e84 <Config_ChangeValue>:
	if(value != NULL && param < PARAM_NUMS){
 8000e84:	2900      	cmp	r1, #0
 8000e86:	d061      	beq.n	8000f4c <Config_ChangeValue+0xc8>
 8000e88:	2811      	cmp	r0, #17
 8000e8a:	d85f      	bhi.n	8000f4c <Config_ChangeValue+0xc8>
void Config_ChangeValue(uint32_t param, void* value){
 8000e8c:	b510      	push	{r4, lr}
		switch(param){
 8000e8e:	2811      	cmp	r0, #17
 8000e90:	d80d      	bhi.n	8000eae <Config_ChangeValue+0x2a>
 8000e92:	e8df f000 	tbb	[pc, r0]
 8000e96:	1409      	.short	0x1409
 8000e98:	24201c18 	.word	0x24201c18
 8000e9c:	34302c28 	.word	0x34302c28
 8000ea0:	44403c38 	.word	0x44403c38
 8000ea4:	56514c48 	.word	0x56514c48
				memcpy(&configuration.RegulationConfig.CWU_heater_power, value, 4);
 8000ea8:	680a      	ldr	r2, [r1, #0]
 8000eaa:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000eac:	601a      	str	r2, [r3, #0]
		configuration.dummy = MAGIC_WORD;
 8000eae:	4c28      	ldr	r4, [pc, #160]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000eb0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8000eb4:	8663      	strh	r3, [r4, #50]	; 0x32
		configuration.crc = Config_CalculateCRC();
 8000eb6:	f7ff ffcb 	bl	8000e50 <Config_CalculateCRC>
 8000eba:	6360      	str	r0, [r4, #52]	; 0x34
}
 8000ebc:	bd10      	pop	{r4, pc}
				memcpy(&configuration.RegulationConfig.CO_heater_power, value, 4);
 8000ebe:	680a      	ldr	r2, [r1, #0]
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000ec2:	605a      	str	r2, [r3, #4]
				break;
 8000ec4:	e7f3      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.net_max_power, value, 4);
 8000ec6:	680a      	ldr	r2, [r1, #0]
 8000ec8:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000eca:	609a      	str	r2, [r3, #8]
				break;
 8000ecc:	e7ef      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.counter_address, value, 1);
 8000ece:	780a      	ldrb	r2, [r1, #0]
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000ed2:	731a      	strb	r2, [r3, #12]
				break;
 8000ed4:	e7eb      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.temperature_address, value, 1);
 8000ed6:	780a      	ldrb	r2, [r1, #0]
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000eda:	735a      	strb	r2, [r3, #13]
				break;
 8000edc:	e7e7      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.acumulated_power_coeff, value, 1);
 8000ede:	780a      	ldrb	r2, [r1, #0]
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000ee2:	739a      	strb	r2, [r3, #14]
				break;
 8000ee4:	e7e3      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.heater_power_coeff, value, 1);
 8000ee6:	780a      	ldrb	r2, [r1, #0]
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000eea:	73da      	strb	r2, [r3, #15]
				break;
 8000eec:	e7df      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CO_hi_temp, value, 1);
 8000eee:	780a      	ldrb	r2, [r1, #0]
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000ef2:	741a      	strb	r2, [r3, #16]
				break;
 8000ef4:	e7db      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CO_lo_temp, value, 1);
 8000ef6:	780a      	ldrb	r2, [r1, #0]
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000efa:	745a      	strb	r2, [r3, #17]
				break;
 8000efc:	e7d7      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CWU_hi_temp, value, 1);
 8000efe:	780a      	ldrb	r2, [r1, #0]
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000f02:	749a      	strb	r2, [r3, #18]
				break;
 8000f04:	e7d3      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CWU_lo_temp, value, 1);
 8000f06:	780a      	ldrb	r2, [r1, #0]
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000f0a:	74da      	strb	r2, [r3, #19]
				break;
 8000f0c:	e7cf      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.exported_power, value, 4);
 8000f0e:	680a      	ldr	r2, [r1, #0]
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000f12:	615a      	str	r2, [r3, #20]
				break;
 8000f14:	e7cb      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.imported_power, value, 4);
 8000f16:	680a      	ldr	r2, [r1, #0]
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000f1a:	619a      	str	r2, [r3, #24]
				break;
 8000f1c:	e7c7      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.acumulated_power, value, 4);
 8000f1e:	680a      	ldr	r2, [r1, #0]
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000f22:	61da      	str	r2, [r3, #28]
				break;
 8000f24:	e7c3      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.ipAddress[0], value, 4);
 8000f26:	680a      	ldr	r2, [r1, #0]
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000f2a:	621a      	str	r2, [r3, #32]
				break;
 8000f2c:	e7bf      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.subnetMask[0], value, 1);
 8000f2e:	780a      	ldrb	r2, [r1, #0]
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				break;
 8000f36:	e7ba      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.gatewayAddress[0], value, 1);
 8000f38:	780a      	ldrb	r2, [r1, #0]
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000f3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				break;
 8000f40:	e7b5      	b.n	8000eae <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.macAddress[0], value, 1);
 8000f42:	780a      	ldrb	r2, [r1, #0]
 8000f44:	4b02      	ldr	r3, [pc, #8]	; (8000f50 <Config_ChangeValue+0xcc>)
 8000f46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				break;
 8000f4a:	e7b0      	b.n	8000eae <Config_ChangeValue+0x2a>
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200000d8 	.word	0x200000d8

08000f54 <Config_Save>:

CONFStatus_t Config_Save (void){
 8000f54:	b508      	push	{r3, lr}
	CONFStatus_t retval;
	retval = (CONFStatus_t)EE_Write(&configuration, 0, CONFIG_BYTES_LEN);
 8000f56:	2238      	movs	r2, #56	; 0x38
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4802      	ldr	r0, [pc, #8]	; (8000f64 <Config_Save+0x10>)
 8000f5c:	f000 f8c8 	bl	80010f0 <EE_Write>
	return retval;
}
 8000f60:	bd08      	pop	{r3, pc}
 8000f62:	bf00      	nop
 8000f64:	200000d8 	.word	0x200000d8

08000f68 <Config_GetEthernetConfig>:
	}
	return CONF_ERR_NOCONF;
}

CONFStatus_t Config_GetEthernetConfig (EthernetConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8000f68:	b180      	cbz	r0, 8000f8c <Config_GetEthernetConfig+0x24>
CONFStatus_t Config_GetEthernetConfig (EthernetConfig_t* config){
 8000f6a:	b430      	push	{r4, r5}
 8000f6c:	4605      	mov	r5, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <Config_GetEthernetConfig+0x30>)
 8000f70:	f993 3000 	ldrsb.w	r3, [r3]
 8000f74:	b96b      	cbnz	r3, 8000f92 <Config_GetEthernetConfig+0x2a>
		memcpy(config, &configuration.EthernetConfig, ETH_CONFIG_BYTES_LEN);
 8000f76:	4c09      	ldr	r4, [pc, #36]	; (8000f9c <Config_GetEthernetConfig+0x34>)
 8000f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f7a:	6028      	str	r0, [r5, #0]
 8000f7c:	6069      	str	r1, [r5, #4]
 8000f7e:	60aa      	str	r2, [r5, #8]
 8000f80:	60eb      	str	r3, [r5, #12]
 8000f82:	8823      	ldrh	r3, [r4, #0]
 8000f84:	822b      	strh	r3, [r5, #16]
		return CONF_OK;
 8000f86:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 8000f88:	bc30      	pop	{r4, r5}
 8000f8a:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 8000f8c:	f06f 0001 	mvn.w	r0, #1
}
 8000f90:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 8000f92:	f06f 0004 	mvn.w	r0, #4
 8000f96:	e7f7      	b.n	8000f88 <Config_GetEthernetConfig+0x20>
 8000f98:	200000d4 	.word	0x200000d4
 8000f9c:	200000f8 	.word	0x200000f8

08000fa0 <Config_GetRegConfig>:

CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8000fa0:	b198      	cbz	r0, 8000fca <Config_GetRegConfig+0x2a>
CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
 8000fa2:	b430      	push	{r4, r5}
 8000fa4:	4605      	mov	r5, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <Config_GetRegConfig+0x38>)
 8000fa8:	f993 3000 	ldrsb.w	r3, [r3]
 8000fac:	b983      	cbnz	r3, 8000fd0 <Config_GetRegConfig+0x30>
		memcpy(config, &configuration.RegulationConfig, REG_CONFIG_BYTES_LEN);
 8000fae:	4c0b      	ldr	r4, [pc, #44]	; (8000fdc <Config_GetRegConfig+0x3c>)
 8000fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb2:	6028      	str	r0, [r5, #0]
 8000fb4:	6069      	str	r1, [r5, #4]
 8000fb6:	60aa      	str	r2, [r5, #8]
 8000fb8:	60eb      	str	r3, [r5, #12]
 8000fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fbc:	6128      	str	r0, [r5, #16]
 8000fbe:	6169      	str	r1, [r5, #20]
 8000fc0:	61aa      	str	r2, [r5, #24]
 8000fc2:	61eb      	str	r3, [r5, #28]
		return CONF_OK;
 8000fc4:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 8000fc6:	bc30      	pop	{r4, r5}
 8000fc8:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 8000fca:	f06f 0001 	mvn.w	r0, #1
}
 8000fce:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 8000fd0:	f06f 0004 	mvn.w	r0, #4
 8000fd4:	e7f7      	b.n	8000fc6 <Config_GetRegConfig+0x26>
 8000fd6:	bf00      	nop
 8000fd8:	200000d4 	.word	0x200000d4
 8000fdc:	200000d8 	.word	0x200000d8

08000fe0 <Config_Copy>:

CONFStatus_t Config_Copy (ConfigStruct_t* dest, ConfigStruct_t* src){
	if((dest == NULL) || (src == NULL)) return CONF_ERR_NULL;
 8000fe0:	b1b0      	cbz	r0, 8001010 <Config_Copy+0x30>
 8000fe2:	b1c1      	cbz	r1, 8001016 <Config_Copy+0x36>
CONFStatus_t Config_Copy (ConfigStruct_t* dest, ConfigStruct_t* src){
 8000fe4:	b470      	push	{r4, r5, r6}
	memcpy(dest, src, CONFIG_BYTES_LEN);
 8000fe6:	460a      	mov	r2, r1
 8000fe8:	3130      	adds	r1, #48	; 0x30
 8000fea:	6816      	ldr	r6, [r2, #0]
 8000fec:	6855      	ldr	r5, [r2, #4]
 8000fee:	6894      	ldr	r4, [r2, #8]
 8000ff0:	68d3      	ldr	r3, [r2, #12]
 8000ff2:	6006      	str	r6, [r0, #0]
 8000ff4:	6045      	str	r5, [r0, #4]
 8000ff6:	6084      	str	r4, [r0, #8]
 8000ff8:	60c3      	str	r3, [r0, #12]
 8000ffa:	3210      	adds	r2, #16
 8000ffc:	3010      	adds	r0, #16
 8000ffe:	428a      	cmp	r2, r1
 8001000:	d1f3      	bne.n	8000fea <Config_Copy+0xa>
 8001002:	6811      	ldr	r1, [r2, #0]
 8001004:	6853      	ldr	r3, [r2, #4]
 8001006:	6001      	str	r1, [r0, #0]
 8001008:	6043      	str	r3, [r0, #4]
	return CONF_OK;
 800100a:	2000      	movs	r0, #0
}
 800100c:	bc70      	pop	{r4, r5, r6}
 800100e:	4770      	bx	lr
	if((dest == NULL) || (src == NULL)) return CONF_ERR_NULL;
 8001010:	f06f 0001 	mvn.w	r0, #1
 8001014:	4770      	bx	lr
 8001016:	f06f 0001 	mvn.w	r0, #1
}
 800101a:	4770      	bx	lr

0800101c <Config_Init>:
CONFStatus_t Config_Init(I2C_HandleTypeDef* iic){
 800101c:	b510      	push	{r4, lr}
	configuartionStatus = CONF_STAT_INIT;
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <Config_Init+0x5c>)
 8001020:	22ff      	movs	r2, #255	; 0xff
 8001022:	701a      	strb	r2, [r3, #0]
	retval |= EE_Init(iic);
 8001024:	f000 f82e 	bl	8001084 <EE_Init>
	retval = EE_Read(&configuration, 0, CONFIG_BYTES_LEN);
 8001028:	2238      	movs	r2, #56	; 0x38
 800102a:	2100      	movs	r1, #0
 800102c:	4813      	ldr	r0, [pc, #76]	; (800107c <Config_Init+0x60>)
 800102e:	f000 f833 	bl	8001098 <EE_Read>
 8001032:	4603      	mov	r3, r0
	if(retval == EE_OK){
 8001034:	b138      	cbz	r0, 8001046 <Config_Init+0x2a>
	if(retval == CONF_OK){
 8001036:	b153      	cbz	r3, 800104e <Config_Init+0x32>
		if((retval == CONF_ERR_NOCONF) || (retval == CONF_ERR_CRC)){
 8001038:	1d5a      	adds	r2, r3, #5
 800103a:	2a01      	cmp	r2, #1
 800103c:	d90c      	bls.n	8001058 <Config_Init+0x3c>
			configuartionStatus = CONF_STAT_ERROR;
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <Config_Init+0x5c>)
 8001040:	21fd      	movs	r1, #253	; 0xfd
 8001042:	7011      	strb	r1, [r2, #0]
 8001044:	e006      	b.n	8001054 <Config_Init+0x38>
		retval = Config_CheckData();
 8001046:	f7ff ff0f 	bl	8000e68 <Config_CheckData>
 800104a:	4603      	mov	r3, r0
 800104c:	e7f3      	b.n	8001036 <Config_Init+0x1a>
		configuartionStatus = CONF_STAT_LOADED;
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <Config_Init+0x5c>)
 8001050:	2100      	movs	r1, #0
 8001052:	7011      	strb	r1, [r2, #0]
}
 8001054:	b258      	sxtb	r0, r3
 8001056:	bd10      	pop	{r4, pc}
			Config_Copy(&configuration, &defaultConfig);
 8001058:	4c08      	ldr	r4, [pc, #32]	; (800107c <Config_Init+0x60>)
 800105a:	4909      	ldr	r1, [pc, #36]	; (8001080 <Config_Init+0x64>)
 800105c:	4620      	mov	r0, r4
 800105e:	f7ff ffbf 	bl	8000fe0 <Config_Copy>
			configuration.crc = Config_CalculateCRC();
 8001062:	f7ff fef5 	bl	8000e50 <Config_CalculateCRC>
 8001066:	6360      	str	r0, [r4, #52]	; 0x34
			retval = Config_Save();
 8001068:	f7ff ff74 	bl	8000f54 <Config_Save>
 800106c:	4603      	mov	r3, r0
			configuartionStatus = CONF_STAT_NOCONF;
 800106e:	4a02      	ldr	r2, [pc, #8]	; (8001078 <Config_Init+0x5c>)
 8001070:	21fe      	movs	r1, #254	; 0xfe
 8001072:	7011      	strb	r1, [r2, #0]
 8001074:	e7ee      	b.n	8001054 <Config_Init+0x38>
 8001076:	bf00      	nop
 8001078:	200000d4 	.word	0x200000d4
 800107c:	200000d8 	.word	0x200000d8
 8001080:	0800b590 	.word	0x0800b590

08001084 <EE_Init>:
#include "stm32f4xx_hal_i2c.h"

I2C_HandleTypeDef* ee_iic;

EE_StatusTypeDef EE_Init (I2C_HandleTypeDef* hi2c){
	if(hi2c != NULL){
 8001084:	b118      	cbz	r0, 800108e <EE_Init+0xa>
		ee_iic = hi2c;
 8001086:	4a03      	ldr	r2, [pc, #12]	; (8001094 <EE_Init+0x10>)
 8001088:	6010      	str	r0, [r2, #0]
		return EE_OK;
 800108a:	2000      	movs	r0, #0
 800108c:	4770      	bx	lr
	}
	return EE_ERR_NULL;
 800108e:	f06f 0001 	mvn.w	r0, #1
}
 8001092:	4770      	bx	lr
 8001094:	20002a74 	.word	0x20002a74

08001098 <EE_Read>:

EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;

	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8001098:	b1e0      	cbz	r0, 80010d4 <EE_Read+0x3c>
EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
 800109a:	b510      	push	{r4, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	4604      	mov	r4, r0
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 80010a0:	b1da      	cbz	r2, 80010da <EE_Read+0x42>
 80010a2:	4613      	mov	r3, r2
 80010a4:	460a      	mov	r2, r1

	dataBuf = (uint8_t*)data;
	i2cStatus= HAL_I2C_Mem_Read(ee_iic, EE_ADDR, addr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 80010a6:	4911      	ldr	r1, [pc, #68]	; (80010ec <EE_Read+0x54>)
 80010a8:	6808      	ldr	r0, [r1, #0]
 80010aa:	b299      	uxth	r1, r3
 80010ac:	3302      	adds	r3, #2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	9101      	str	r1, [sp, #4]
 80010b4:	9400      	str	r4, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	21a0      	movs	r1, #160	; 0xa0
 80010ba:	f005 f81b 	bl	80060f4 <HAL_I2C_Mem_Read>
	if(i2cStatus == HAL_OK){
 80010be:	b178      	cbz	r0, 80010e0 <EE_Read+0x48>
		return EE_OK;
	}else if(i2cStatus == HAL_ERROR){
 80010c0:	2801      	cmp	r0, #1
 80010c2:	d010      	beq.n	80010e6 <EE_Read+0x4e>
		return EE_ERR_TIMEOUT;
	}else if(i2cStatus == HAL_BUSY){
 80010c4:	2802      	cmp	r0, #2
 80010c6:	d002      	beq.n	80010ce <EE_Read+0x36>
		return EE_ERR_BUSY;
	}else{
		return EE_ERR_TIMEOUT;
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010cc:	e009      	b.n	80010e2 <EE_Read+0x4a>
		return EE_ERR_BUSY;
 80010ce:	f06f 0002 	mvn.w	r0, #2
 80010d2:	e006      	b.n	80010e2 <EE_Read+0x4a>
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 80010d4:	f06f 0001 	mvn.w	r0, #1
	}
}
 80010d8:	4770      	bx	lr
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 80010da:	f06f 0001 	mvn.w	r0, #1
 80010de:	e000      	b.n	80010e2 <EE_Read+0x4a>
		return EE_OK;
 80010e0:	2000      	movs	r0, #0
}
 80010e2:	b004      	add	sp, #16
 80010e4:	bd10      	pop	{r4, pc}
		return EE_ERR_TIMEOUT;
 80010e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ea:	e7fa      	b.n	80010e2 <EE_Read+0x4a>
 80010ec:	20002a74 	.word	0x20002a74

080010f0 <EE_Write>:

EE_StatusTypeDef EE_Write (void* data, uint32_t addr, uint32_t len){
 80010f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f4:	b084      	sub	sp, #16
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;
	uint32_t datalen, i, pages, rest, bytelen, addrCpy;
	uint8_t eeBlock, eeAddr;

	if(data == NULL || len <= 0 || len >= EE_SIZE) return retval;
 80010f6:	2800      	cmp	r0, #0
 80010f8:	d05d      	beq.n	80011b6 <EE_Write+0xc6>
 80010fa:	460e      	mov	r6, r1
 80010fc:	4607      	mov	r7, r0
 80010fe:	2a00      	cmp	r2, #0
 8001100:	d05c      	beq.n	80011bc <EE_Write+0xcc>
 8001102:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001106:	d25c      	bcs.n	80011c2 <EE_Write+0xd2>

	eeBlock = addr / EE_BLOCK_SIZE;
 8001108:	f3c1 2107 	ubfx	r1, r1, #8, #8
	eeAddr = addr % EE_BLOCK_SIZE;
 800110c:	b2f5      	uxtb	r5, r6

	dataBuf = (uint8_t*)data;
	datalen = len;
	addrCpy = addr;

	if(len <= EE_PAGE_SIZE){
 800110e:	2a10      	cmp	r2, #16
 8001110:	d90a      	bls.n	8001128 <EE_Write+0x38>
			retval = EE_OK;
		}
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
	}else{
		pages = datalen >> 4;
 8001112:	ea4f 1812 	mov.w	r8, r2, lsr #4
		rest = datalen % 16;
		if(rest) pages ++;
 8001116:	f012 090f 	ands.w	r9, r2, #15
 800111a:	d001      	beq.n	8001120 <EE_Write+0x30>
 800111c:	f108 0801 	add.w	r8, r8, #1
		for(i = 0; i < pages; i++){
 8001120:	2500      	movs	r5, #0
	EE_StatusTypeDef retval = EE_ERR_NULL;
 8001122:	f06f 0a01 	mvn.w	sl, #1
		for(i = 0; i < pages; i++){
 8001126:	e036      	b.n	8001196 <EE_Write+0xa6>
		i2cStatus= HAL_I2C_Mem_Write(ee_iic, EE_ADDR + eeBlock, eeAddr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 8001128:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <EE_Write+0xf0>)
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	b293      	uxth	r3, r2
 800112e:	1c94      	adds	r4, r2, #2
 8001130:	00a4      	lsls	r4, r4, #2
 8001132:	9402      	str	r4, [sp, #8]
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	9700      	str	r7, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	462a      	mov	r2, r5
 800113c:	31a0      	adds	r1, #160	; 0xa0
 800113e:	f004 ff25 	bl	8005f8c <HAL_I2C_Mem_Write>
		if(i2cStatus == HAL_OK){
 8001142:	b130      	cbz	r0, 8001152 <EE_Write+0x62>
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001144:	2801      	cmp	r0, #1
 8001146:	d03f      	beq.n	80011c8 <EE_Write+0xd8>
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 8001148:	2802      	cmp	r0, #2
 800114a:	d040      	beq.n	80011ce <EE_Write+0xde>
	EE_StatusTypeDef retval = EE_ERR_NULL;
 800114c:	f06f 0a01 	mvn.w	sl, #1
 8001150:	e02d      	b.n	80011ae <EE_Write+0xbe>
			vTaskDelay(EE_BYTE_WRITE_TIME * (len + 2));
 8001152:	4620      	mov	r0, r4
 8001154:	f008 fadc 	bl	8009710 <vTaskDelay>
			retval = EE_OK;
 8001158:	f04f 0a00 	mov.w	sl, #0
 800115c:	e027      	b.n	80011ae <EE_Write+0xbe>
			if(i == pages - 1){
				bytelen = rest;
 800115e:	464c      	mov	r4, r9
			}else{
				bytelen = 16;
			}
			i2cStatus = HAL_I2C_Mem_Write(ee_iic, EE_ADDR, addrCpy, 1, dataBuf, bytelen, EE_BYTE_WRITE_TIME * (bytelen + 2));
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <EE_Write+0xf0>)
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	1ca3      	adds	r3, r4, #2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	9401      	str	r4, [sp, #4]
 800116c:	9700      	str	r7, [sp, #0]
 800116e:	2301      	movs	r3, #1
 8001170:	b2b2      	uxth	r2, r6
 8001172:	21a0      	movs	r1, #160	; 0xa0
 8001174:	f004 ff0a 	bl	8005f8c <HAL_I2C_Mem_Write>
			if(i2cStatus == HAL_OK){
 8001178:	b9a8      	cbnz	r0, 80011a6 <EE_Write+0xb6>
				dataBuf += bytelen;
 800117a:	4427      	add	r7, r4
				addrCpy += bytelen;
 800117c:	4426      	add	r6, r4
				retval = EE_OK;
				while(HAL_I2C_IsDeviceReady(ee_iic, EE_ADDR, 10, 10) != HAL_OK);
 800117e:	230a      	movs	r3, #10
 8001180:	461a      	mov	r2, r3
 8001182:	21a0      	movs	r1, #160	; 0xa0
 8001184:	4816      	ldr	r0, [pc, #88]	; (80011e0 <EE_Write+0xf0>)
 8001186:	6800      	ldr	r0, [r0, #0]
 8001188:	f005 f91c 	bl	80063c4 <HAL_I2C_IsDeviceReady>
 800118c:	2800      	cmp	r0, #0
 800118e:	d1f6      	bne.n	800117e <EE_Write+0x8e>
		for(i = 0; i < pages; i++){
 8001190:	3501      	adds	r5, #1
				retval = EE_OK;
 8001192:	f04f 0a00 	mov.w	sl, #0
		for(i = 0; i < pages; i++){
 8001196:	4545      	cmp	r5, r8
 8001198:	d209      	bcs.n	80011ae <EE_Write+0xbe>
			if(i == pages - 1){
 800119a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800119e:	42ab      	cmp	r3, r5
 80011a0:	d0dd      	beq.n	800115e <EE_Write+0x6e>
				bytelen = 16;
 80011a2:	2410      	movs	r4, #16
 80011a4:	e7dc      	b.n	8001160 <EE_Write+0x70>
				//vTaskDelay((bytelen + 2) * EE_BYTE_WRITE_TIME);
			}else{
				if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 80011a6:	2801      	cmp	r0, #1
 80011a8:	d014      	beq.n	80011d4 <EE_Write+0xe4>
				else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 80011aa:	2802      	cmp	r0, #2
 80011ac:	d015      	beq.n	80011da <EE_Write+0xea>
				break;
			}
		}
	}
	return retval;
}
 80011ae:	4650      	mov	r0, sl
 80011b0:	b004      	add	sp, #16
 80011b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if(data == NULL || len <= 0 || len >= EE_SIZE) return retval;
 80011b6:	f06f 0a01 	mvn.w	sl, #1
 80011ba:	e7f8      	b.n	80011ae <EE_Write+0xbe>
 80011bc:	f06f 0a01 	mvn.w	sl, #1
 80011c0:	e7f5      	b.n	80011ae <EE_Write+0xbe>
 80011c2:	f06f 0a01 	mvn.w	sl, #1
 80011c6:	e7f2      	b.n	80011ae <EE_Write+0xbe>
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 80011c8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80011cc:	e7ef      	b.n	80011ae <EE_Write+0xbe>
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 80011ce:	f06f 0a02 	mvn.w	sl, #2
 80011d2:	e7ec      	b.n	80011ae <EE_Write+0xbe>
				if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 80011d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80011d8:	e7e9      	b.n	80011ae <EE_Write+0xbe>
				else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 80011da:	f06f 0a02 	mvn.w	sl, #2
 80011de:	e7e6      	b.n	80011ae <EE_Write+0xbe>
 80011e0:	20002a74 	.word	0x20002a74

080011e4 <EE_Erease>:

EE_StatusTypeDef EE_Erease (void){
 80011e4:	b530      	push	{r4, r5, lr}
 80011e6:	b085      	sub	sp, #20
	uint32_t i;
	int32_t retval = 0;
	uint8_t blankData[16];
	memset(blankData, 255, 16);
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	9303      	str	r3, [sp, #12]
	int32_t retval = 0;
 80011f4:	2500      	movs	r5, #0

	for(i = 0; i < EE_SIZE; i += 16){
 80011f6:	462c      	mov	r4, r5
 80011f8:	e006      	b.n	8001208 <EE_Erease+0x24>
		retval |= EE_Write(blankData, i, 16);
 80011fa:	2210      	movs	r2, #16
 80011fc:	4621      	mov	r1, r4
 80011fe:	4668      	mov	r0, sp
 8001200:	f7ff ff76 	bl	80010f0 <EE_Write>
 8001204:	4305      	orrs	r5, r0
	for(i = 0; i < EE_SIZE; i += 16){
 8001206:	3410      	adds	r4, #16
 8001208:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800120c:	d3f5      	bcc.n	80011fa <EE_Erease+0x16>
	}
	return retval;
}
 800120e:	b268      	sxtb	r0, r5
 8001210:	b005      	add	sp, #20
 8001212:	bd30      	pop	{r4, r5, pc}

08001214 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001214:	b530      	push	{r4, r5, lr}
 8001216:	b083      	sub	sp, #12
 8001218:	4605      	mov	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800121a:	4c16      	ldr	r4, [pc, #88]	; (8001274 <WIZCHIP_READ+0x60>)
 800121c:	68e3      	ldr	r3, [r4, #12]
 800121e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001220:	6963      	ldr	r3, [r4, #20]
 8001222:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001226:	b9b3      	cbnz	r3, 8001256 <WIZCHIP_READ+0x42>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001228:	4c12      	ldr	r4, [pc, #72]	; (8001274 <WIZCHIP_READ+0x60>)
 800122a:	6a23      	ldr	r3, [r4, #32]
 800122c:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8001230:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001232:	6a23      	ldr	r3, [r4, #32]
 8001234:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8001238:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800123a:	6a23      	ldr	r3, [r4, #32]
 800123c:	b2e8      	uxtb	r0, r5
 800123e:	4798      	blx	r3
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001240:	4c0c      	ldr	r4, [pc, #48]	; (8001274 <WIZCHIP_READ+0x60>)
 8001242:	69e3      	ldr	r3, [r4, #28]
 8001244:	4798      	blx	r3
 8001246:	4605      	mov	r5, r0

   WIZCHIP.CS._deselect();
 8001248:	69a3      	ldr	r3, [r4, #24]
 800124a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800124c:	6923      	ldr	r3, [r4, #16]
 800124e:	4798      	blx	r3
   return ret;
}
 8001250:	4628      	mov	r0, r5
 8001252:	b003      	add	sp, #12
 8001254:	bd30      	pop	{r4, r5, pc}
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001256:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0e5      	beq.n	8001228 <WIZCHIP_READ+0x14>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800125c:	0c2a      	lsrs	r2, r5, #16
 800125e:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001262:	0a2a      	lsrs	r2, r5, #8
 8001264:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001268:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800126c:	2103      	movs	r1, #3
 800126e:	a801      	add	r0, sp, #4
 8001270:	4798      	blx	r3
 8001272:	e7e5      	b.n	8001240 <WIZCHIP_READ+0x2c>
 8001274:	20000004 	.word	0x20000004

08001278 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001278:	b570      	push	{r4, r5, r6, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	4604      	mov	r4, r0
 800127e:	460e      	mov	r6, r1
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001280:	4d16      	ldr	r5, [pc, #88]	; (80012dc <WIZCHIP_WRITE+0x64>)
 8001282:	68eb      	ldr	r3, [r5, #12]
 8001284:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001286:	696b      	ldr	r3, [r5, #20]
 8001288:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800128a:	f044 0404 	orr.w	r4, r4, #4

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800128e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001290:	b1a3      	cbz	r3, 80012bc <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001292:	0c22      	lsrs	r2, r4, #16
 8001294:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001298:	0a22      	lsrs	r2, r4, #8
 800129a:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800129e:	f88d 4006 	strb.w	r4, [sp, #6]
		spi_data[3] = wb;
 80012a2:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80012a6:	2104      	movs	r1, #4
 80012a8:	eb0d 0001 	add.w	r0, sp, r1
 80012ac:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80012ae:	4c0b      	ldr	r4, [pc, #44]	; (80012dc <WIZCHIP_WRITE+0x64>)
 80012b0:	69a3      	ldr	r3, [r4, #24]
 80012b2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80012b4:	6923      	ldr	r3, [r4, #16]
 80012b6:	4798      	blx	r3
}
 80012b8:	b002      	add	sp, #8
 80012ba:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80012bc:	6a2b      	ldr	r3, [r5, #32]
 80012be:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80012c2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80012c4:	6a2b      	ldr	r3, [r5, #32]
 80012c6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80012ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80012cc:	6a2b      	ldr	r3, [r5, #32]
 80012ce:	b2e0      	uxtb	r0, r4
 80012d0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80012d2:	6a2b      	ldr	r3, [r5, #32]
 80012d4:	4630      	mov	r0, r6
 80012d6:	4798      	blx	r3
 80012d8:	e7e9      	b.n	80012ae <WIZCHIP_WRITE+0x36>
 80012da:	bf00      	nop
 80012dc:	20000004 	.word	0x20000004

080012e0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	b083      	sub	sp, #12
 80012e4:	4604      	mov	r4, r0
 80012e6:	460e      	mov	r6, r1
 80012e8:	4615      	mov	r5, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80012ea:	4f1c      	ldr	r7, [pc, #112]	; (800135c <WIZCHIP_READ_BUF+0x7c>)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4798      	blx	r3
   WIZCHIP.CS._select();
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	b96b      	cbnz	r3, 8001314 <WIZCHIP_READ_BUF+0x34>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80012f8:	4f18      	ldr	r7, [pc, #96]	; (800135c <WIZCHIP_READ_BUF+0x7c>)
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001300:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001308:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	b2e0      	uxtb	r0, r4
 800130e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001310:	2400      	movs	r4, #0
 8001312:	e019      	b.n	8001348 <WIZCHIP_READ_BUF+0x68>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0ee      	beq.n	80012f8 <WIZCHIP_READ_BUF+0x18>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800131a:	0c22      	lsrs	r2, r4, #16
 800131c:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001320:	0a22      	lsrs	r2, r4, #8
 8001322:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001326:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800132a:	2103      	movs	r1, #3
 800132c:	a801      	add	r0, sp, #4
 800132e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <WIZCHIP_READ_BUF+0x7c>)
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	4629      	mov	r1, r5
 8001336:	4630      	mov	r0, r6
 8001338:	4798      	blx	r3
 800133a:	e007      	b.n	800134c <WIZCHIP_READ_BUF+0x6c>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <WIZCHIP_READ_BUF+0x7c>)
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	4798      	blx	r3
 8001342:	5530      	strb	r0, [r6, r4]
		for(i = 0; i < len; i++)
 8001344:	3401      	adds	r4, #1
 8001346:	b2a4      	uxth	r4, r4
 8001348:	42ac      	cmp	r4, r5
 800134a:	d3f7      	bcc.n	800133c <WIZCHIP_READ_BUF+0x5c>
   }

   WIZCHIP.CS._deselect();
 800134c:	4c03      	ldr	r4, [pc, #12]	; (800135c <WIZCHIP_READ_BUF+0x7c>)
 800134e:	69a3      	ldr	r3, [r4, #24]
 8001350:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001352:	6923      	ldr	r3, [r4, #16]
 8001354:	4798      	blx	r3
}
 8001356:	b003      	add	sp, #12
 8001358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800135a:	bf00      	nop
 800135c:	20000004 	.word	0x20000004

08001360 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001362:	b083      	sub	sp, #12
 8001364:	4604      	mov	r4, r0
 8001366:	460f      	mov	r7, r1
 8001368:	4616      	mov	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800136a:	4d1b      	ldr	r5, [pc, #108]	; (80013d8 <WIZCHIP_WRITE_BUF+0x78>)
 800136c:	68eb      	ldr	r3, [r5, #12]
 800136e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001370:	696b      	ldr	r3, [r5, #20]
 8001372:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001374:	f044 0404 	orr.w	r4, r4, #4

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001378:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800137a:	b1b3      	cbz	r3, 80013aa <WIZCHIP_WRITE_BUF+0x4a>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800137c:	0c22      	lsrs	r2, r4, #16
 800137e:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001382:	0a22      	lsrs	r2, r4, #8
 8001384:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001388:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800138c:	2103      	movs	r1, #3
 800138e:	a801      	add	r0, sp, #4
 8001390:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <WIZCHIP_WRITE_BUF+0x78>)
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	4631      	mov	r1, r6
 8001398:	4638      	mov	r0, r7
 800139a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800139c:	4c0e      	ldr	r4, [pc, #56]	; (80013d8 <WIZCHIP_WRITE_BUF+0x78>)
 800139e:	69a3      	ldr	r3, [r4, #24]
 80013a0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80013a2:	6923      	ldr	r3, [r4, #16]
 80013a4:	4798      	blx	r3
}
 80013a6:	b003      	add	sp, #12
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80013aa:	6a2b      	ldr	r3, [r5, #32]
 80013ac:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80013b0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80013b2:	6a2b      	ldr	r3, [r5, #32]
 80013b4:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80013b8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80013ba:	6a2b      	ldr	r3, [r5, #32]
 80013bc:	b2e0      	uxtb	r0, r4
 80013be:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80013c0:	2400      	movs	r4, #0
 80013c2:	e005      	b.n	80013d0 <WIZCHIP_WRITE_BUF+0x70>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <WIZCHIP_WRITE_BUF+0x78>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	5d38      	ldrb	r0, [r7, r4]
 80013ca:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80013cc:	3401      	adds	r4, #1
 80013ce:	b2a4      	uxth	r4, r4
 80013d0:	42b4      	cmp	r4, r6
 80013d2:	d3f7      	bcc.n	80013c4 <WIZCHIP_WRITE_BUF+0x64>
 80013d4:	e7e2      	b.n	800139c <WIZCHIP_WRITE_BUF+0x3c>
 80013d6:	bf00      	nop
 80013d8:	20000004 	.word	0x20000004

080013dc <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80013dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013e0:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 80013e2:	2500      	movs	r5, #0
 80013e4:	e001      	b.n	80013ea <getSn_TX_FSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
 80013e6:	42a5      	cmp	r5, r4
 80013e8:	d024      	beq.n	8001434 <getSn_TX_FSR+0x58>
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80013ea:	ea4f 0887 	mov.w	r8, r7, lsl #2
 80013ee:	f108 0801 	add.w	r8, r8, #1
 80013f2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80013f6:	f508 5600 	add.w	r6, r8, #8192	; 0x2000
 80013fa:	4630      	mov	r0, r6
 80013fc:	f7ff ff0a 	bl	8001214 <WIZCHIP_READ>
 8001400:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001402:	0224      	lsls	r4, r4, #8
 8001404:	b2a4      	uxth	r4, r4
 8001406:	f508 5804 	add.w	r8, r8, #8448	; 0x2100
 800140a:	4640      	mov	r0, r8
 800140c:	f7ff ff02 	bl	8001214 <WIZCHIP_READ>
 8001410:	fa14 f480 	uxtah	r4, r4, r0
 8001414:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 8001416:	2c00      	cmp	r4, #0
 8001418:	d0e5      	beq.n	80013e6 <getSn_TX_FSR+0xa>
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800141a:	4630      	mov	r0, r6
 800141c:	f7ff fefa 	bl	8001214 <WIZCHIP_READ>
 8001420:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001422:	022d      	lsls	r5, r5, #8
 8001424:	b2ad      	uxth	r5, r5
 8001426:	4640      	mov	r0, r8
 8001428:	f7ff fef4 	bl	8001214 <WIZCHIP_READ>
 800142c:	fa15 f580 	uxtah	r5, r5, r0
 8001430:	b2ad      	uxth	r5, r5
 8001432:	e7d8      	b.n	80013e6 <getSn_TX_FSR+0xa>
   return val;
}
 8001434:	4628      	mov	r0, r5
 8001436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800143a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800143a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800143e:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 8001440:	2500      	movs	r5, #0
 8001442:	e001      	b.n	8001448 <getSn_RX_RSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
 8001444:	42a5      	cmp	r5, r4
 8001446:	d024      	beq.n	8001492 <getSn_RX_RSR+0x58>
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001448:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800144c:	f108 0801 	add.w	r8, r8, #1
 8001450:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001454:	f508 5618 	add.w	r6, r8, #9728	; 0x2600
 8001458:	4630      	mov	r0, r6
 800145a:	f7ff fedb 	bl	8001214 <WIZCHIP_READ>
 800145e:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001460:	0224      	lsls	r4, r4, #8
 8001462:	b2a4      	uxth	r4, r4
 8001464:	f508 581c 	add.w	r8, r8, #9984	; 0x2700
 8001468:	4640      	mov	r0, r8
 800146a:	f7ff fed3 	bl	8001214 <WIZCHIP_READ>
 800146e:	fa14 f480 	uxtah	r4, r4, r0
 8001472:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 8001474:	2c00      	cmp	r4, #0
 8001476:	d0e5      	beq.n	8001444 <getSn_RX_RSR+0xa>
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001478:	4630      	mov	r0, r6
 800147a:	f7ff fecb 	bl	8001214 <WIZCHIP_READ>
 800147e:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001480:	022d      	lsls	r5, r5, #8
 8001482:	b2ad      	uxth	r5, r5
 8001484:	4640      	mov	r0, r8
 8001486:	f7ff fec5 	bl	8001214 <WIZCHIP_READ>
 800148a:	fa15 f580 	uxtah	r5, r5, r0
 800148e:	b2ad      	uxth	r5, r5
 8001490:	e7d8      	b.n	8001444 <getSn_RX_RSR+0xa>
   return val;
}
 8001492:	4628      	mov	r0, r5
 8001494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001498 <wiz_send_data>:
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 8001498:	b902      	cbnz	r2, 800149c <wiz_send_data+0x4>
 800149a:	4770      	bx	lr
{
 800149c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014a0:	4615      	mov	r5, r2
 80014a2:	460f      	mov	r7, r1
   ptr = getSn_TX_WR(sn);
 80014a4:	0084      	lsls	r4, r0, #2
 80014a6:	f104 0901 	add.w	r9, r4, #1
 80014aa:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80014ae:	f509 5810 	add.w	r8, r9, #9216	; 0x2400
 80014b2:	4640      	mov	r0, r8
 80014b4:	f7ff feae 	bl	8001214 <WIZCHIP_READ>
 80014b8:	b286      	uxth	r6, r0
 80014ba:	0236      	lsls	r6, r6, #8
 80014bc:	b2b6      	uxth	r6, r6
 80014be:	f509 5914 	add.w	r9, r9, #9472	; 0x2500
 80014c2:	4648      	mov	r0, r9
 80014c4:	f7ff fea6 	bl	8001214 <WIZCHIP_READ>
 80014c8:	fa16 f680 	uxtah	r6, r6, r0
 80014cc:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80014ce:	1ca0      	adds	r0, r4, #2
 80014d0:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80014d2:	462a      	mov	r2, r5
 80014d4:	4639      	mov	r1, r7
 80014d6:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 80014da:	f7ff ff41 	bl	8001360 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80014de:	4435      	add	r5, r6
 80014e0:	b2ad      	uxth	r5, r5
   setSn_TX_WR(sn,ptr);
 80014e2:	0a29      	lsrs	r1, r5, #8
 80014e4:	4640      	mov	r0, r8
 80014e6:	f7ff fec7 	bl	8001278 <WIZCHIP_WRITE>
 80014ea:	b2e9      	uxtb	r1, r5
 80014ec:	4648      	mov	r0, r9
 80014ee:	f7ff fec3 	bl	8001278 <WIZCHIP_WRITE>
}
 80014f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080014f6 <wiz_recv_data>:
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 80014f6:	b902      	cbnz	r2, 80014fa <wiz_recv_data+0x4>
 80014f8:	4770      	bx	lr
{
 80014fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014fe:	4615      	mov	r5, r2
 8001500:	460f      	mov	r7, r1
   ptr = getSn_RX_RD(sn);
 8001502:	0084      	lsls	r4, r0, #2
 8001504:	f104 0901 	add.w	r9, r4, #1
 8001508:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800150c:	f509 5820 	add.w	r8, r9, #10240	; 0x2800
 8001510:	4640      	mov	r0, r8
 8001512:	f7ff fe7f 	bl	8001214 <WIZCHIP_READ>
 8001516:	b286      	uxth	r6, r0
 8001518:	0236      	lsls	r6, r6, #8
 800151a:	b2b6      	uxth	r6, r6
 800151c:	f509 5924 	add.w	r9, r9, #10496	; 0x2900
 8001520:	4648      	mov	r0, r9
 8001522:	f7ff fe77 	bl	8001214 <WIZCHIP_READ>
 8001526:	fa16 f680 	uxtah	r6, r6, r0
 800152a:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800152c:	1ce0      	adds	r0, r4, #3
 800152e:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001530:	462a      	mov	r2, r5
 8001532:	4639      	mov	r1, r7
 8001534:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8001538:	f7ff fed2 	bl	80012e0 <WIZCHIP_READ_BUF>
   ptr += len;
 800153c:	4435      	add	r5, r6
 800153e:	b2ad      	uxth	r5, r5
   
   setSn_RX_RD(sn,ptr);
 8001540:	0a29      	lsrs	r1, r5, #8
 8001542:	4640      	mov	r0, r8
 8001544:	f7ff fe98 	bl	8001278 <WIZCHIP_WRITE>
 8001548:	b2e9      	uxtb	r1, r5
 800154a:	4648      	mov	r0, r9
 800154c:	f7ff fe94 	bl	8001278 <WIZCHIP_WRITE>
}
 8001550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001554 <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 8001554:	2808      	cmp	r0, #8
 8001556:	d82e      	bhi.n	80015b6 <close+0x62>
{
 8001558:	b570      	push	{r4, r5, r6, lr}
 800155a:	4606      	mov	r6, r0
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800155c:	0084      	lsls	r4, r0, #2
 800155e:	3401      	adds	r4, #1
 8001560:	00e4      	lsls	r4, r4, #3
 8001562:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8001566:	2110      	movs	r1, #16
 8001568:	4628      	mov	r0, r5
 800156a:	f7ff fe85 	bl	8001278 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800156e:	4628      	mov	r0, r5
 8001570:	f7ff fe50 	bl	8001214 <WIZCHIP_READ>
 8001574:	2800      	cmp	r0, #0
 8001576:	d1fa      	bne.n	800156e <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001578:	211f      	movs	r1, #31
 800157a:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800157e:	f7ff fe7b 	bl	8001278 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001582:	2301      	movs	r3, #1
 8001584:	40b3      	lsls	r3, r6
 8001586:	43db      	mvns	r3, r3
 8001588:	b21b      	sxth	r3, r3
 800158a:	490c      	ldr	r1, [pc, #48]	; (80015bc <close+0x68>)
 800158c:	880a      	ldrh	r2, [r1, #0]
 800158e:	401a      	ands	r2, r3
 8001590:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <close+0x6c>)
 8001594:	8811      	ldrh	r1, [r2, #0]
 8001596:	400b      	ands	r3, r1
 8001598:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <close+0x70>)
 800159e:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
	sock_pack_info[sn] = 0;
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <close+0x74>)
 80015a4:	5593      	strb	r3, [r2, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80015a6:	f504 7040 	add.w	r0, r4, #768	; 0x300
 80015aa:	f7ff fe33 	bl	8001214 <WIZCHIP_READ>
 80015ae:	2800      	cmp	r0, #0
 80015b0:	d1f9      	bne.n	80015a6 <close+0x52>
	return SOCK_OK;
 80015b2:	2001      	movs	r0, #1
}
 80015b4:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 80015b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80015ba:	4770      	bx	lr
 80015bc:	20000110 	.word	0x20000110
 80015c0:	20000112 	.word	0x20000112
 80015c4:	2000011c 	.word	0x2000011c
 80015c8:	20000114 	.word	0x20000114

080015cc <socket>:
	CHECK_SOCKNUM();
 80015cc:	2808      	cmp	r0, #8
 80015ce:	f200 8093 	bhi.w	80016f8 <socket+0x12c>
{
 80015d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	4605      	mov	r5, r0
 80015da:	460f      	mov	r7, r1
 80015dc:	4690      	mov	r8, r2
 80015de:	461e      	mov	r6, r3
	switch(protocol)
 80015e0:	2901      	cmp	r1, #1
 80015e2:	d062      	beq.n	80016aa <socket+0xde>
 80015e4:	2900      	cmp	r1, #0
 80015e6:	f000 808a 	beq.w	80016fe <socket+0x132>
 80015ea:	2904      	cmp	r1, #4
 80015ec:	f200 8087 	bhi.w	80016fe <socket+0x132>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80015f0:	f016 0f04 	tst.w	r6, #4
 80015f4:	f040 8086 	bne.w	8001704 <socket+0x138>
	if(flag != 0)
 80015f8:	b11e      	cbz	r6, 8001602 <socket+0x36>
   	switch(protocol)
 80015fa:	2f01      	cmp	r7, #1
 80015fc:	d062      	beq.n	80016c4 <socket+0xf8>
 80015fe:	2f02      	cmp	r7, #2
 8001600:	d066      	beq.n	80016d0 <socket+0x104>
	close(sn);
 8001602:	4628      	mov	r0, r5
 8001604:	f7ff ffa6 	bl	8001554 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001608:	00ac      	lsls	r4, r5, #2
 800160a:	3401      	adds	r4, #1
 800160c:	00e4      	lsls	r4, r4, #3
 800160e:	f026 010f 	bic.w	r1, r6, #15
 8001612:	b249      	sxtb	r1, r1
 8001614:	4339      	orrs	r1, r7
 8001616:	b2c9      	uxtb	r1, r1
 8001618:	4620      	mov	r0, r4
 800161a:	f7ff fe2d 	bl	8001278 <WIZCHIP_WRITE>
	if(!port)
 800161e:	f1b8 0f00 	cmp.w	r8, #0
 8001622:	d10a      	bne.n	800163a <socket+0x6e>
	   port = sock_any_port++;
 8001624:	4a3a      	ldr	r2, [pc, #232]	; (8001710 <socket+0x144>)
 8001626:	f8b2 8000 	ldrh.w	r8, [r2]
 800162a:	f108 0301 	add.w	r3, r8, #1
 800162e:	b29b      	uxth	r3, r3
 8001630:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001632:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001636:	4293      	cmp	r3, r2
 8001638:	d059      	beq.n	80016ee <socket+0x122>
   setSn_PORT(sn,port);	
 800163a:	ea4f 2118 	mov.w	r1, r8, lsr #8
 800163e:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8001642:	f7ff fe19 	bl	8001278 <WIZCHIP_WRITE>
 8001646:	fa5f f188 	uxtb.w	r1, r8
 800164a:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 800164e:	f7ff fe13 	bl	8001278 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001652:	f504 7780 	add.w	r7, r4, #256	; 0x100
 8001656:	2101      	movs	r1, #1
 8001658:	4638      	mov	r0, r7
 800165a:	f7ff fe0d 	bl	8001278 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800165e:	4638      	mov	r0, r7
 8001660:	f7ff fdd8 	bl	8001214 <WIZCHIP_READ>
 8001664:	2800      	cmp	r0, #0
 8001666:	d1fa      	bne.n	800165e <socket+0x92>
   sock_io_mode &= ~(1 <<sn);
 8001668:	2201      	movs	r2, #1
 800166a:	40aa      	lsls	r2, r5
 800166c:	43d2      	mvns	r2, r2
 800166e:	b212      	sxth	r2, r2
 8001670:	4928      	ldr	r1, [pc, #160]	; (8001714 <socket+0x148>)
 8001672:	880b      	ldrh	r3, [r1, #0]
 8001674:	4013      	ands	r3, r2
 8001676:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001678:	f006 0601 	and.w	r6, r6, #1
 800167c:	40ae      	lsls	r6, r5
 800167e:	431e      	orrs	r6, r3
 8001680:	800e      	strh	r6, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8001682:	4b25      	ldr	r3, [pc, #148]	; (8001718 <socket+0x14c>)
 8001684:	8819      	ldrh	r1, [r3, #0]
 8001686:	400a      	ands	r2, r1
 8001688:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	4a23      	ldr	r2, [pc, #140]	; (800171c <socket+0x150>)
 800168e:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 8001692:	4a23      	ldr	r2, [pc, #140]	; (8001720 <socket+0x154>)
 8001694:	5553      	strb	r3, [r2, r5]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001696:	f504 7040 	add.w	r0, r4, #768	; 0x300
 800169a:	f7ff fdbb 	bl	8001214 <WIZCHIP_READ>
 800169e:	2800      	cmp	r0, #0
 80016a0:	d0f9      	beq.n	8001696 <socket+0xca>
   return (int8_t)sn;
 80016a2:	b268      	sxtb	r0, r5
}	   
 80016a4:	b002      	add	sp, #8
 80016a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            getSIPR((uint8_t*)&taddr);
 80016aa:	2204      	movs	r2, #4
 80016ac:	eb0d 0102 	add.w	r1, sp, r2
 80016b0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80016b4:	f7ff fe14 	bl	80012e0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80016b8:	9b01      	ldr	r3, [sp, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d198      	bne.n	80015f0 <socket+0x24>
 80016be:	f06f 0002 	mvn.w	r0, #2
 80016c2:	e7ef      	b.n	80016a4 <socket+0xd8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80016c4:	f016 0f21 	tst.w	r6, #33	; 0x21
 80016c8:	d19b      	bne.n	8001602 <socket+0x36>
 80016ca:	f06f 0005 	mvn.w	r0, #5
 80016ce:	e7e9      	b.n	80016a4 <socket+0xd8>
   	      if(flag & SF_IGMP_VER2)
 80016d0:	f016 0f20 	tst.w	r6, #32
 80016d4:	d002      	beq.n	80016dc <socket+0x110>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80016d6:	f016 0f80 	tst.w	r6, #128	; 0x80
 80016da:	d016      	beq.n	800170a <socket+0x13e>
      	      if(flag & SF_UNI_BLOCK)
 80016dc:	f016 0f10 	tst.w	r6, #16
 80016e0:	d08f      	beq.n	8001602 <socket+0x36>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80016e2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80016e6:	d18c      	bne.n	8001602 <socket+0x36>
 80016e8:	f06f 0005 	mvn.w	r0, #5
 80016ec:	e7da      	b.n	80016a4 <socket+0xd8>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <socket+0x144>)
 80016f0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80016f4:	801a      	strh	r2, [r3, #0]
 80016f6:	e7a0      	b.n	800163a <socket+0x6e>
	CHECK_SOCKNUM();
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}	   
 80016fc:	4770      	bx	lr
         return SOCKERR_SOCKMODE;
 80016fe:	f06f 0004 	mvn.w	r0, #4
 8001702:	e7cf      	b.n	80016a4 <socket+0xd8>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001704:	f06f 0005 	mvn.w	r0, #5
 8001708:	e7cc      	b.n	80016a4 <socket+0xd8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800170a:	f06f 0005 	mvn.w	r0, #5
 800170e:	e7c9      	b.n	80016a4 <socket+0xd8>
 8001710:	20000000 	.word	0x20000000
 8001714:	20000110 	.word	0x20000110
 8001718:	20000112 	.word	0x20000112
 800171c:	2000011c 	.word	0x2000011c
 8001720:	20000114 	.word	0x20000114

08001724 <listen>:

int8_t listen(uint8_t sn)
{
	CHECK_SOCKNUM();
 8001724:	2808      	cmp	r0, #8
 8001726:	d82a      	bhi.n	800177e <listen+0x5a>
{
 8001728:	b570      	push	{r4, r5, r6, lr}
 800172a:	4605      	mov	r5, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 800172c:	0084      	lsls	r4, r0, #2
 800172e:	3401      	adds	r4, #1
 8001730:	00e4      	lsls	r4, r4, #3
 8001732:	4620      	mov	r0, r4
 8001734:	f7ff fd6e 	bl	8001214 <WIZCHIP_READ>
 8001738:	f000 000f 	and.w	r0, r0, #15
 800173c:	2801      	cmp	r0, #1
 800173e:	d121      	bne.n	8001784 <listen+0x60>
	CHECK_SOCKINIT();
 8001740:	f504 7640 	add.w	r6, r4, #768	; 0x300
 8001744:	4630      	mov	r0, r6
 8001746:	f7ff fd65 	bl	8001214 <WIZCHIP_READ>
 800174a:	2813      	cmp	r0, #19
 800174c:	d11d      	bne.n	800178a <listen+0x66>
	setSn_CR(sn,Sn_CR_LISTEN);
 800174e:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8001752:	2102      	movs	r1, #2
 8001754:	4620      	mov	r0, r4
 8001756:	f7ff fd8f 	bl	8001278 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800175a:	4620      	mov	r0, r4
 800175c:	f7ff fd5a 	bl	8001214 <WIZCHIP_READ>
 8001760:	2800      	cmp	r0, #0
 8001762:	d1fa      	bne.n	800175a <listen+0x36>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001764:	4630      	mov	r0, r6
 8001766:	f7ff fd55 	bl	8001214 <WIZCHIP_READ>
 800176a:	2814      	cmp	r0, #20
 800176c:	d101      	bne.n	8001772 <listen+0x4e>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 800176e:	2001      	movs	r0, #1
}
 8001770:	bd70      	pop	{r4, r5, r6, pc}
         close(sn);
 8001772:	4628      	mov	r0, r5
 8001774:	f7ff feee 	bl	8001554 <close>
         return SOCKERR_SOCKCLOSED;
 8001778:	f06f 0003 	mvn.w	r0, #3
 800177c:	e7f8      	b.n	8001770 <listen+0x4c>
	CHECK_SOCKNUM();
 800177e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001782:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001784:	f06f 0004 	mvn.w	r0, #4
 8001788:	e7f2      	b.n	8001770 <listen+0x4c>
	CHECK_SOCKINIT();
 800178a:	f06f 0002 	mvn.w	r0, #2
 800178e:	e7ef      	b.n	8001770 <listen+0x4c>

08001790 <disconnect>:
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
 8001790:	2808      	cmp	r0, #8
 8001792:	d838      	bhi.n	8001806 <disconnect+0x76>
{
 8001794:	b570      	push	{r4, r5, r6, lr}
 8001796:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001798:	0084      	lsls	r4, r0, #2
 800179a:	3401      	adds	r4, #1
 800179c:	00e4      	lsls	r4, r4, #3
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff fd38 	bl	8001214 <WIZCHIP_READ>
 80017a4:	f000 000f 	and.w	r0, r0, #15
 80017a8:	2801      	cmp	r0, #1
 80017aa:	d12f      	bne.n	800180c <disconnect+0x7c>
	setSn_CR(sn,Sn_CR_DISCON);
 80017ac:	f504 7580 	add.w	r5, r4, #256	; 0x100
 80017b0:	2108      	movs	r1, #8
 80017b2:	4628      	mov	r0, r5
 80017b4:	f7ff fd60 	bl	8001278 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80017b8:	4628      	mov	r0, r5
 80017ba:	f7ff fd2b 	bl	8001214 <WIZCHIP_READ>
 80017be:	2800      	cmp	r0, #0
 80017c0:	d1fa      	bne.n	80017b8 <disconnect+0x28>
	sock_is_sending &= ~(1<<sn);
 80017c2:	2301      	movs	r3, #1
 80017c4:	fa03 f206 	lsl.w	r2, r3, r6
 80017c8:	4913      	ldr	r1, [pc, #76]	; (8001818 <disconnect+0x88>)
 80017ca:	880b      	ldrh	r3, [r1, #0]
 80017cc:	ea23 0302 	bic.w	r3, r3, r2
 80017d0:	800b      	strh	r3, [r1, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <disconnect+0x8c>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	4133      	asrs	r3, r6
 80017d8:	f013 0f01 	tst.w	r3, #1
 80017dc:	d119      	bne.n	8001812 <disconnect+0x82>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80017de:	f504 7040 	add.w	r0, r4, #768	; 0x300
 80017e2:	f7ff fd17 	bl	8001214 <WIZCHIP_READ>
 80017e6:	b160      	cbz	r0, 8001802 <disconnect+0x72>
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80017e8:	f504 7000 	add.w	r0, r4, #512	; 0x200
 80017ec:	f7ff fd12 	bl	8001214 <WIZCHIP_READ>
 80017f0:	f010 0f08 	tst.w	r0, #8
 80017f4:	d0f3      	beq.n	80017de <disconnect+0x4e>
	   {
	      close(sn);
 80017f6:	4630      	mov	r0, r6
 80017f8:	f7ff feac 	bl	8001554 <close>
	      return SOCKERR_TIMEOUT;
 80017fc:	f06f 000c 	mvn.w	r0, #12
 8001800:	e008      	b.n	8001814 <disconnect+0x84>
	   }
	}
	return SOCK_OK;
 8001802:	2001      	movs	r0, #1
 8001804:	e006      	b.n	8001814 <disconnect+0x84>
   CHECK_SOCKNUM();
 8001806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800180a:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 800180c:	f06f 0004 	mvn.w	r0, #4
 8001810:	e000      	b.n	8001814 <disconnect+0x84>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001812:	2000      	movs	r0, #0
}
 8001814:	bd70      	pop	{r4, r5, r6, pc}
 8001816:	bf00      	nop
 8001818:	20000112 	.word	0x20000112
 800181c:	20000110 	.word	0x20000110

08001820 <send>:
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
 8001820:	2808      	cmp	r0, #8
 8001822:	f200 8083 	bhi.w	800192c <send+0x10c>
{
 8001826:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800182a:	4615      	mov	r5, r2
 800182c:	468a      	mov	sl, r1
 800182e:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001830:	4681      	mov	r9, r0
 8001832:	0087      	lsls	r7, r0, #2
 8001834:	3701      	adds	r7, #1
 8001836:	00ff      	lsls	r7, r7, #3
 8001838:	4638      	mov	r0, r7
 800183a:	f7ff fceb 	bl	8001214 <WIZCHIP_READ>
 800183e:	f000 000f 	and.w	r0, r0, #15
 8001842:	2801      	cmp	r0, #1
 8001844:	d175      	bne.n	8001932 <send+0x112>
   CHECK_SOCKDATA();
 8001846:	2d00      	cmp	r5, #0
 8001848:	d076      	beq.n	8001938 <send+0x118>
   tmp = getSn_SR(sn);
 800184a:	f507 7840 	add.w	r8, r7, #768	; 0x300
 800184e:	4640      	mov	r0, r8
 8001850:	f7ff fce0 	bl	8001214 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001854:	2817      	cmp	r0, #23
 8001856:	d001      	beq.n	800185c <send+0x3c>
 8001858:	281c      	cmp	r0, #28
 800185a:	d170      	bne.n	800193e <send+0x11e>
   if( sock_is_sending & (1<<sn) )
 800185c:	4b39      	ldr	r3, [pc, #228]	; (8001944 <send+0x124>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	4133      	asrs	r3, r6
 8001862:	f013 0f01 	tst.w	r3, #1
 8001866:	d019      	beq.n	800189c <send+0x7c>
   {
      tmp = getSn_IR(sn);
 8001868:	f507 7400 	add.w	r4, r7, #512	; 0x200
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff fcd1 	bl	8001214 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8001872:	f010 0f10 	tst.w	r0, #16
 8001876:	d105      	bne.n	8001884 <send+0x64>
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001878:	f010 0f08 	tst.w	r0, #8
 800187c:	d119      	bne.n	80018b2 <send+0x92>
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
 800187e:	2000      	movs	r0, #0
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 8001880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
 8001884:	2110      	movs	r1, #16
 8001886:	4620      	mov	r0, r4
 8001888:	f7ff fcf6 	bl	8001278 <WIZCHIP_WRITE>
         sock_is_sending &= ~(1<<sn);         
 800188c:	2301      	movs	r3, #1
 800188e:	fa03 f206 	lsl.w	r2, r3, r6
 8001892:	492c      	ldr	r1, [pc, #176]	; (8001944 <send+0x124>)
 8001894:	880b      	ldrh	r3, [r1, #0]
 8001896:	ea23 0302 	bic.w	r3, r3, r2
 800189a:	800b      	strh	r3, [r1, #0]
   freesize = getSn_TxMAX(sn);
 800189c:	f507 50f8 	add.w	r0, r7, #7936	; 0x1f00
 80018a0:	f7ff fcb8 	bl	8001214 <WIZCHIP_READ>
 80018a4:	b284      	uxth	r4, r0
 80018a6:	02a4      	lsls	r4, r4, #10
 80018a8:	b2a4      	uxth	r4, r4
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80018aa:	42a5      	cmp	r5, r4
 80018ac:	d80f      	bhi.n	80018ce <send+0xae>
 80018ae:	462c      	mov	r4, r5
 80018b0:	e00d      	b.n	80018ce <send+0xae>
         close(sn);
 80018b2:	4630      	mov	r0, r6
 80018b4:	f7ff fe4e 	bl	8001554 <close>
         return SOCKERR_TIMEOUT;
 80018b8:	f06f 000c 	mvn.w	r0, #12
 80018bc:	e7e0      	b.n	8001880 <send+0x60>
         close(sn);
 80018be:	4630      	mov	r0, r6
 80018c0:	f7ff fe48 	bl	8001554 <close>
         return SOCKERR_SOCKSTATUS;
 80018c4:	f06f 0006 	mvn.w	r0, #6
 80018c8:	e7da      	b.n	8001880 <send+0x60>
      if(len <= freesize) break;
 80018ca:	42a5      	cmp	r5, r4
 80018cc:	d215      	bcs.n	80018fa <send+0xda>
      freesize = getSn_TX_FSR(sn);
 80018ce:	4630      	mov	r0, r6
 80018d0:	f7ff fd84 	bl	80013dc <getSn_TX_FSR>
 80018d4:	4605      	mov	r5, r0
      tmp = getSn_SR(sn);
 80018d6:	4640      	mov	r0, r8
 80018d8:	f7ff fc9c 	bl	8001214 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80018dc:	2817      	cmp	r0, #23
 80018de:	d001      	beq.n	80018e4 <send+0xc4>
 80018e0:	281c      	cmp	r0, #28
 80018e2:	d1ec      	bne.n	80018be <send+0x9e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <send+0x128>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	fa43 f309 	asr.w	r3, r3, r9
 80018ec:	f013 0f01 	tst.w	r3, #1
 80018f0:	d0eb      	beq.n	80018ca <send+0xaa>
 80018f2:	42a5      	cmp	r5, r4
 80018f4:	d2e9      	bcs.n	80018ca <send+0xaa>
 80018f6:	2000      	movs	r0, #0
 80018f8:	e7c2      	b.n	8001880 <send+0x60>
   wiz_send_data(sn, buf, len);
 80018fa:	4622      	mov	r2, r4
 80018fc:	4651      	mov	r1, sl
 80018fe:	4630      	mov	r0, r6
 8001900:	f7ff fdca 	bl	8001498 <wiz_send_data>
   setSn_CR(sn,Sn_CR_SEND);
 8001904:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001908:	2120      	movs	r1, #32
 800190a:	4638      	mov	r0, r7
 800190c:	f7ff fcb4 	bl	8001278 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001910:	4638      	mov	r0, r7
 8001912:	f7ff fc7f 	bl	8001214 <WIZCHIP_READ>
 8001916:	2800      	cmp	r0, #0
 8001918:	d1fa      	bne.n	8001910 <send+0xf0>
   sock_is_sending |= (1 << sn);
 800191a:	2301      	movs	r3, #1
 800191c:	fa03 f606 	lsl.w	r6, r3, r6
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <send+0x124>)
 8001922:	881a      	ldrh	r2, [r3, #0]
 8001924:	4316      	orrs	r6, r2
 8001926:	801e      	strh	r6, [r3, #0]
   return (int32_t)len;
 8001928:	4620      	mov	r0, r4
 800192a:	e7a9      	b.n	8001880 <send+0x60>
   CHECK_SOCKNUM();
 800192c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001930:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001932:	f06f 0004 	mvn.w	r0, #4
 8001936:	e7a3      	b.n	8001880 <send+0x60>
   CHECK_SOCKDATA();
 8001938:	f06f 000d 	mvn.w	r0, #13
 800193c:	e7a0      	b.n	8001880 <send+0x60>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800193e:	f06f 0006 	mvn.w	r0, #6
 8001942:	e79d      	b.n	8001880 <send+0x60>
 8001944:	20000112 	.word	0x20000112
 8001948:	20000110 	.word	0x20000110

0800194c <ClrSiS>:

void ClrSiS (uint8_t sn){
	sock_is_sending &= ~(1 << sn);
 800194c:	2301      	movs	r3, #1
 800194e:	fa03 f000 	lsl.w	r0, r3, r0
 8001952:	4a03      	ldr	r2, [pc, #12]	; (8001960 <ClrSiS+0x14>)
 8001954:	8813      	ldrh	r3, [r2, #0]
 8001956:	ea23 0000 	bic.w	r0, r3, r0
 800195a:	8010      	strh	r0, [r2, #0]
}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000112 	.word	0x20000112

08001964 <recv>:
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001964:	2808      	cmp	r0, #8
 8001966:	d864      	bhi.n	8001a32 <recv+0xce>
{
 8001968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800196c:	4614      	mov	r4, r2
 800196e:	4689      	mov	r9, r1
 8001970:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001972:	4607      	mov	r7, r0
 8001974:	0085      	lsls	r5, r0, #2
 8001976:	3501      	adds	r5, #1
 8001978:	00ed      	lsls	r5, r5, #3
 800197a:	4628      	mov	r0, r5
 800197c:	f7ff fc4a 	bl	8001214 <WIZCHIP_READ>
 8001980:	f000 000f 	and.w	r0, r0, #15
 8001984:	2801      	cmp	r0, #1
 8001986:	d157      	bne.n	8001a38 <recv+0xd4>
   CHECK_SOCKDATA();
 8001988:	2c00      	cmp	r4, #0
 800198a:	d058      	beq.n	8001a3e <recv+0xda>
   
   recvsize = getSn_RxMAX(sn);
 800198c:	f505 50f0 	add.w	r0, r5, #7680	; 0x1e00
 8001990:	f7ff fc40 	bl	8001214 <WIZCHIP_READ>
 8001994:	fa1f f880 	uxth.w	r8, r0
 8001998:	ea4f 2888 	mov.w	r8, r8, lsl #10
 800199c:	fa1f f888 	uxth.w	r8, r8
   if(recvsize < len) len = recvsize;
 80019a0:	4544      	cmp	r4, r8
 80019a2:	d80e      	bhi.n	80019c2 <recv+0x5e>
 80019a4:	46a0      	mov	r8, r4
 80019a6:	e00c      	b.n	80019c2 <recv+0x5e>
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
               {
                  close(sn);
 80019a8:	4630      	mov	r0, r6
 80019aa:	f7ff fdd3 	bl	8001554 <close>
                  return SOCKERR_SOCKSTATUS;
 80019ae:	f06f 0006 	mvn.w	r0, #6
 80019b2:	e03c      	b.n	8001a2e <recv+0xca>
               }
            }
            else
            {
               close(sn);
 80019b4:	4630      	mov	r0, r6
 80019b6:	f7ff fdcd 	bl	8001554 <close>
               return SOCKERR_SOCKSTATUS;
 80019ba:	f06f 0006 	mvn.w	r0, #6
 80019be:	e036      	b.n	8001a2e <recv+0xca>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
         if(recvsize != 0) break;
 80019c0:	bb0c      	cbnz	r4, 8001a06 <recv+0xa2>
         recvsize = getSn_RX_RSR(sn);
 80019c2:	4630      	mov	r0, r6
 80019c4:	f7ff fd39 	bl	800143a <getSn_RX_RSR>
 80019c8:	4604      	mov	r4, r0
         tmp = getSn_SR(sn);
 80019ca:	f505 7040 	add.w	r0, r5, #768	; 0x300
 80019ce:	f7ff fc21 	bl	8001214 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
 80019d2:	2817      	cmp	r0, #23
 80019d4:	d00d      	beq.n	80019f2 <recv+0x8e>
            if(tmp == SOCK_CLOSE_WAIT)
 80019d6:	281c      	cmp	r0, #28
 80019d8:	d1ec      	bne.n	80019b4 <recv+0x50>
               if(recvsize != 0) break;
 80019da:	b9a4      	cbnz	r4, 8001a06 <recv+0xa2>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80019dc:	4630      	mov	r0, r6
 80019de:	f7ff fcfd 	bl	80013dc <getSn_TX_FSR>
 80019e2:	4682      	mov	sl, r0
 80019e4:	f505 50f8 	add.w	r0, r5, #7936	; 0x1f00
 80019e8:	f7ff fc14 	bl	8001214 <WIZCHIP_READ>
 80019ec:	ebba 2f80 	cmp.w	sl, r0, lsl #10
 80019f0:	d0da      	beq.n	80019a8 <recv+0x44>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <recv+0xe0>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	413b      	asrs	r3, r7
 80019f8:	f013 0f01 	tst.w	r3, #1
 80019fc:	d0e0      	beq.n	80019c0 <recv+0x5c>
 80019fe:	2c00      	cmp	r4, #0
 8001a00:	d1de      	bne.n	80019c0 <recv+0x5c>
 8001a02:	2000      	movs	r0, #0
 8001a04:	e013      	b.n	8001a2e <recv+0xca>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001a06:	4544      	cmp	r4, r8
 8001a08:	d300      	bcc.n	8001a0c <recv+0xa8>
 8001a0a:	4644      	mov	r4, r8
   wiz_recv_data(sn, buf, len);
 8001a0c:	4622      	mov	r2, r4
 8001a0e:	4649      	mov	r1, r9
 8001a10:	4630      	mov	r0, r6
 8001a12:	f7ff fd70 	bl	80014f6 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8001a16:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8001a1a:	2140      	movs	r1, #64	; 0x40
 8001a1c:	4628      	mov	r0, r5
 8001a1e:	f7ff fc2b 	bl	8001278 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001a22:	4628      	mov	r0, r5
 8001a24:	f7ff fbf6 	bl	8001214 <WIZCHIP_READ>
 8001a28:	2800      	cmp	r0, #0
 8001a2a:	d1fa      	bne.n	8001a22 <recv+0xbe>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001a2c:	4620      	mov	r0, r4
}
 8001a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   CHECK_SOCKNUM();
 8001a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001a36:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001a38:	f06f 0004 	mvn.w	r0, #4
 8001a3c:	e7f7      	b.n	8001a2e <recv+0xca>
   CHECK_SOCKDATA();
 8001a3e:	f06f 000d 	mvn.w	r0, #13
 8001a42:	e7f4      	b.n	8001a2e <recv+0xca>
 8001a44:	20000110 	.word	0x20000110

08001a48 <getsockopt>:
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
   CHECK_SOCKNUM();
 8001a48:	2808      	cmp	r0, #8
 8001a4a:	f200 80a3 	bhi.w	8001b94 <getsockopt+0x14c>
{
 8001a4e:	b570      	push	{r4, r5, r6, lr}
 8001a50:	4615      	mov	r5, r2
 8001a52:	4604      	mov	r4, r0
   switch(sotype)
 8001a54:	290c      	cmp	r1, #12
 8001a56:	f200 80a0 	bhi.w	8001b9a <getsockopt+0x152>
 8001a5a:	e8df f001 	tbb	[pc, r1]
 8001a5e:	1107      	.short	0x1107
 8001a60:	4338251b 	.word	0x4338251b
 8001a64:	6c67569e 	.word	0x6c67569e
 8001a68:	7b71      	.short	0x7b71
 8001a6a:	8f          	.byte	0x8f
 8001a6b:	00          	.byte	0x00
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8001a6c:	0080      	lsls	r0, r0, #2
 8001a6e:	3001      	adds	r0, #1
 8001a70:	00c0      	lsls	r0, r0, #3
 8001a72:	f7ff fbcf 	bl	8001214 <WIZCHIP_READ>
 8001a76:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8001a7a:	7028      	strb	r0, [r5, #0]
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
 8001a7c:	2001      	movs	r0, #1
}
 8001a7e:	bd70      	pop	{r4, r5, r6, pc}
         *(uint8_t*) arg = getSn_TTL(sn);
 8001a80:	0080      	lsls	r0, r0, #2
 8001a82:	3001      	adds	r0, #1
 8001a84:	00c0      	lsls	r0, r0, #3
 8001a86:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
 8001a8a:	f7ff fbc3 	bl	8001214 <WIZCHIP_READ>
 8001a8e:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001a90:	2001      	movs	r0, #1
         break;
 8001a92:	e7f4      	b.n	8001a7e <getsockopt+0x36>
         *(uint8_t*) arg = getSn_TOS(sn);
 8001a94:	0080      	lsls	r0, r0, #2
 8001a96:	3001      	adds	r0, #1
 8001a98:	00c0      	lsls	r0, r0, #3
 8001a9a:	f500 50a8 	add.w	r0, r0, #5376	; 0x1500
 8001a9e:	f7ff fbb9 	bl	8001214 <WIZCHIP_READ>
 8001aa2:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001aa4:	2001      	movs	r0, #1
         break;
 8001aa6:	e7ea      	b.n	8001a7e <getsockopt+0x36>
         *(uint16_t*) arg = getSn_MSSR(sn);
 8001aa8:	0084      	lsls	r4, r0, #2
 8001aaa:	3401      	adds	r4, #1
 8001aac:	00e4      	lsls	r4, r4, #3
 8001aae:	f504 5090 	add.w	r0, r4, #4608	; 0x1200
 8001ab2:	f7ff fbaf 	bl	8001214 <WIZCHIP_READ>
 8001ab6:	b286      	uxth	r6, r0
 8001ab8:	0236      	lsls	r6, r6, #8
 8001aba:	b2b6      	uxth	r6, r6
 8001abc:	f504 5098 	add.w	r0, r4, #4864	; 0x1300
 8001ac0:	f7ff fba8 	bl	8001214 <WIZCHIP_READ>
 8001ac4:	fa16 f080 	uxtah	r0, r6, r0
 8001ac8:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001aca:	2001      	movs	r0, #1
         break;
 8001acc:	e7d7      	b.n	8001a7e <getsockopt+0x36>
         getSn_DIPR(sn, (uint8_t*)arg);
 8001ace:	0080      	lsls	r0, r0, #2
 8001ad0:	3001      	adds	r0, #1
 8001ad2:	00c0      	lsls	r0, r0, #3
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8001adc:	f7ff fc00 	bl	80012e0 <WIZCHIP_READ_BUF>
   return SOCK_OK;
 8001ae0:	2001      	movs	r0, #1
         break;
 8001ae2:	e7cc      	b.n	8001a7e <getsockopt+0x36>
         *(uint16_t*) arg = getSn_DPORT(sn);
 8001ae4:	0084      	lsls	r4, r0, #2
 8001ae6:	3401      	adds	r4, #1
 8001ae8:	00e4      	lsls	r4, r4, #3
 8001aea:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 8001aee:	f7ff fb91 	bl	8001214 <WIZCHIP_READ>
 8001af2:	b286      	uxth	r6, r0
 8001af4:	0236      	lsls	r6, r6, #8
 8001af6:	b2b6      	uxth	r6, r6
 8001af8:	f504 5088 	add.w	r0, r4, #4352	; 0x1100
 8001afc:	f7ff fb8a 	bl	8001214 <WIZCHIP_READ>
 8001b00:	fa16 f080 	uxtah	r0, r6, r0
 8001b04:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001b06:	2001      	movs	r0, #1
         break;
 8001b08:	e7b9      	b.n	8001a7e <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 8001b0a:	0084      	lsls	r4, r0, #2
 8001b0c:	3401      	adds	r4, #1
 8001b0e:	00e4      	lsls	r4, r4, #3
 8001b10:	4620      	mov	r0, r4
 8001b12:	f7ff fb7f 	bl	8001214 <WIZCHIP_READ>
 8001b16:	f000 000f 	and.w	r0, r0, #15
 8001b1a:	2801      	cmp	r0, #1
 8001b1c:	d140      	bne.n	8001ba0 <getsockopt+0x158>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8001b1e:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
 8001b22:	f7ff fb77 	bl	8001214 <WIZCHIP_READ>
 8001b26:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001b28:	2001      	movs	r0, #1
         break;
 8001b2a:	e7a8      	b.n	8001a7e <getsockopt+0x36>
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 8001b2c:	f7ff fc56 	bl	80013dc <getSn_TX_FSR>
 8001b30:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001b32:	2001      	movs	r0, #1
         break;
 8001b34:	e7a3      	b.n	8001a7e <getsockopt+0x36>
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 8001b36:	f7ff fc80 	bl	800143a <getSn_RX_RSR>
 8001b3a:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001b3c:	2001      	movs	r0, #1
         break;
 8001b3e:	e79e      	b.n	8001a7e <getsockopt+0x36>
         *(uint8_t*) arg = getSn_SR(sn);
 8001b40:	0080      	lsls	r0, r0, #2
 8001b42:	3001      	adds	r0, #1
 8001b44:	00c0      	lsls	r0, r0, #3
 8001b46:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8001b4a:	f7ff fb63 	bl	8001214 <WIZCHIP_READ>
 8001b4e:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001b50:	2001      	movs	r0, #1
         break;
 8001b52:	e794      	b.n	8001a7e <getsockopt+0x36>
         if(getSn_MR(sn) & Sn_MR_TCP)
 8001b54:	0080      	lsls	r0, r0, #2
 8001b56:	3001      	adds	r0, #1
 8001b58:	00c0      	lsls	r0, r0, #3
 8001b5a:	f7ff fb5b 	bl	8001214 <WIZCHIP_READ>
 8001b5e:	f010 0f01 	tst.w	r0, #1
 8001b62:	d105      	bne.n	8001b70 <getsockopt+0x128>
            *(uint16_t*)arg = sock_remained_size[sn];
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <getsockopt+0x164>)
 8001b66:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001b6a:	802b      	strh	r3, [r5, #0]
   return SOCK_OK;
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	e786      	b.n	8001a7e <getsockopt+0x36>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 8001b70:	4620      	mov	r0, r4
 8001b72:	f7ff fc62 	bl	800143a <getSn_RX_RSR>
 8001b76:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001b78:	2001      	movs	r0, #1
 8001b7a:	e780      	b.n	8001a7e <getsockopt+0x36>
         if((getSn_MR(sn) == Sn_MR_TCP))
 8001b7c:	0080      	lsls	r0, r0, #2
 8001b7e:	3001      	adds	r0, #1
 8001b80:	00c0      	lsls	r0, r0, #3
 8001b82:	f7ff fb47 	bl	8001214 <WIZCHIP_READ>
 8001b86:	2801      	cmp	r0, #1
 8001b88:	d00d      	beq.n	8001ba6 <getsockopt+0x15e>
         *(uint8_t*)arg = sock_pack_info[sn];
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <getsockopt+0x168>)
 8001b8c:	5d1b      	ldrb	r3, [r3, r4]
 8001b8e:	702b      	strb	r3, [r5, #0]
   return SOCK_OK;
 8001b90:	2001      	movs	r0, #1
         break;
 8001b92:	e774      	b.n	8001a7e <getsockopt+0x36>
   CHECK_SOCKNUM();
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001b98:	4770      	bx	lr
         return SOCKERR_SOCKOPT;
 8001b9a:	f06f 0001 	mvn.w	r0, #1
 8001b9e:	e76e      	b.n	8001a7e <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 8001ba0:	f06f 0004 	mvn.w	r0, #4
 8001ba4:	e76b      	b.n	8001a7e <getsockopt+0x36>
             return SOCKERR_SOCKMODE;
 8001ba6:	f06f 0004 	mvn.w	r0, #4
 8001baa:	e768      	b.n	8001a7e <getsockopt+0x36>
 8001bac:	2000011c 	.word	0x2000011c
 8001bb0:	20000114 	.word	0x20000114

08001bb4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001bb4:	4770      	bx	lr

08001bb6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001bb6:	4770      	bx	lr

08001bb8 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001bb8:	4770      	bx	lr

08001bba <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001bba:	4770      	bx	lr

08001bbc <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001bbc:	7800      	ldrb	r0, [r0, #0]
 8001bbe:	4770      	bx	lr

08001bc0 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001bc0:	7001      	strb	r1, [r0, #0]
 8001bc2:	4770      	bx	lr

08001bc4 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	4770      	bx	lr

08001bc8 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001bc8:	4770      	bx	lr

08001bca <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8001bca:	4770      	bx	lr

08001bcc <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001bcc:	4770      	bx	lr
	...

08001bd0 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 8001bd0:	b120      	cbz	r0, 8001bdc <reg_wizchip_cs_cbfunc+0xc>
 8001bd2:	b119      	cbz	r1, 8001bdc <reg_wizchip_cs_cbfunc+0xc>
      WIZCHIP.CS._select   = wizchip_cs_select;
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <reg_wizchip_cs_cbfunc+0x18>)
 8001bd6:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001bd8:	6199      	str	r1, [r3, #24]
   }
}
 8001bda:	4770      	bx	lr
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001bdc:	4b02      	ldr	r3, [pc, #8]	; (8001be8 <reg_wizchip_cs_cbfunc+0x18>)
 8001bde:	4a03      	ldr	r2, [pc, #12]	; (8001bec <reg_wizchip_cs_cbfunc+0x1c>)
 8001be0:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001be2:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <reg_wizchip_cs_cbfunc+0x20>)
 8001be4:	619a      	str	r2, [r3, #24]
 8001be6:	4770      	bx	lr
 8001be8:	20000004 	.word	0x20000004
 8001bec:	08001bb9 	.word	0x08001bb9
 8001bf0:	08001bbb 	.word	0x08001bbb

08001bf4 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <reg_wizchip_spi_cbfunc+0x24>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001bfc:	d0fa      	beq.n	8001bf4 <reg_wizchip_spi_cbfunc>
   
   if(!spi_rb || !spi_wb)
 8001bfe:	b120      	cbz	r0, 8001c0a <reg_wizchip_spi_cbfunc+0x16>
 8001c00:	b119      	cbz	r1, 8001c0a <reg_wizchip_spi_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <reg_wizchip_spi_cbfunc+0x24>)
 8001c04:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001c06:	6219      	str	r1, [r3, #32]
   }
}
 8001c08:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001c0a:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <reg_wizchip_spi_cbfunc+0x24>)
 8001c0c:	4a03      	ldr	r2, [pc, #12]	; (8001c1c <reg_wizchip_spi_cbfunc+0x28>)
 8001c0e:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001c10:	4a03      	ldr	r2, [pc, #12]	; (8001c20 <reg_wizchip_spi_cbfunc+0x2c>)
 8001c12:	621a      	str	r2, [r3, #32]
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	08001bc5 	.word	0x08001bc5
 8001c20:	08001bc9 	.word	0x08001bc9

08001c24 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <reg_wizchip_spiburst_cbfunc+0x24>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001c2c:	d0fa      	beq.n	8001c24 <reg_wizchip_spiburst_cbfunc>

   if(!spi_rb || !spi_wb)
 8001c2e:	b120      	cbz	r0, 8001c3a <reg_wizchip_spiburst_cbfunc+0x16>
 8001c30:	b119      	cbz	r1, 8001c3a <reg_wizchip_spiburst_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <reg_wizchip_spiburst_cbfunc+0x24>)
 8001c34:	6258      	str	r0, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001c36:	6299      	str	r1, [r3, #40]	; 0x28
   }
}
 8001c38:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001c3a:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <reg_wizchip_spiburst_cbfunc+0x24>)
 8001c3c:	4a03      	ldr	r2, [pc, #12]	; (8001c4c <reg_wizchip_spiburst_cbfunc+0x28>)
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8001c40:	4a03      	ldr	r2, [pc, #12]	; (8001c50 <reg_wizchip_spiburst_cbfunc+0x2c>)
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000004 	.word	0x20000004
 8001c4c:	08001bcb 	.word	0x08001bcb
 8001c50:	08001bcd 	.word	0x08001bcd

08001c54 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001c54:	b500      	push	{lr}
 8001c56:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001c58:	2206      	movs	r2, #6
 8001c5a:	a901      	add	r1, sp, #4
 8001c5c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001c60:	f7ff fb3e 	bl	80012e0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001c64:	2204      	movs	r2, #4
 8001c66:	a905      	add	r1, sp, #20
 8001c68:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c6c:	f7ff fb38 	bl	80012e0 <WIZCHIP_READ_BUF>
 8001c70:	2204      	movs	r2, #4
 8001c72:	a904      	add	r1, sp, #16
 8001c74:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001c78:	f7ff fb32 	bl	80012e0 <WIZCHIP_READ_BUF>
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	a903      	add	r1, sp, #12
 8001c80:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001c84:	f7ff fb2c 	bl	80012e0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7ff faf4 	bl	8001278 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001c90:	2000      	movs	r0, #0
 8001c92:	f7ff fabf 	bl	8001214 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001c96:	2206      	movs	r2, #6
 8001c98:	a901      	add	r1, sp, #4
 8001c9a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001c9e:	f7ff fb5f 	bl	8001360 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	a905      	add	r1, sp, #20
 8001ca6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001caa:	f7ff fb59 	bl	8001360 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001cae:	2204      	movs	r2, #4
 8001cb0:	a904      	add	r1, sp, #16
 8001cb2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001cb6:	f7ff fb53 	bl	8001360 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001cba:	2204      	movs	r2, #4
 8001cbc:	a903      	add	r1, sp, #12
 8001cbe:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001cc2:	f7ff fb4d 	bl	8001360 <WIZCHIP_WRITE_BUF>
}
 8001cc6:	b007      	add	sp, #28
 8001cc8:	f85d fb04 	ldr.w	pc, [sp], #4

08001ccc <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	4605      	mov	r5, r0
 8001cd0:	460e      	mov	r6, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8001cd2:	f7ff ffbf 	bl	8001c54 <wizchip_sw_reset>
   if(txsize)
 8001cd6:	b1cd      	cbz	r5, 8001d0c <wizchip_init+0x40>
   {
      tmp = 0;
 8001cd8:	2200      	movs	r2, #0
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001cda:	4613      	mov	r3, r2
 8001cdc:	2b07      	cmp	r3, #7
 8001cde:	dc07      	bgt.n	8001cf0 <wizchip_init+0x24>
		{
			tmp += txsize[i];
 8001ce0:	5ce9      	ldrb	r1, [r5, r3]
 8001ce2:	440a      	add	r2, r1
 8001ce4:	b252      	sxtb	r2, r2

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001ce6:	2a10      	cmp	r2, #16
 8001ce8:	dc2f      	bgt.n	8001d4a <wizchip_init+0x7e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001cea:	3301      	adds	r3, #1
 8001cec:	b25b      	sxtb	r3, r3
 8001cee:	e7f5      	b.n	8001cdc <wizchip_init+0x10>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001cf0:	2400      	movs	r4, #0
 8001cf2:	e009      	b.n	8001d08 <wizchip_init+0x3c>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001cf4:	00a0      	lsls	r0, r4, #2
 8001cf6:	3001      	adds	r0, #1
 8001cf8:	00c0      	lsls	r0, r0, #3
 8001cfa:	5d29      	ldrb	r1, [r5, r4]
 8001cfc:	f500 50f8 	add.w	r0, r0, #7936	; 0x1f00
 8001d00:	f7ff faba 	bl	8001278 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001d04:	3401      	adds	r4, #1
 8001d06:	b264      	sxtb	r4, r4
 8001d08:	2c07      	cmp	r4, #7
 8001d0a:	ddf3      	ble.n	8001cf4 <wizchip_init+0x28>
		}

	#endif
   }

   if(rxsize)
 8001d0c:	b15e      	cbz	r6, 8001d26 <wizchip_init+0x5a>
   {
      tmp = 0;
 8001d0e:	2200      	movs	r2, #0
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001d10:	4613      	mov	r3, r2
 8001d12:	2b07      	cmp	r3, #7
 8001d14:	dc09      	bgt.n	8001d2a <wizchip_init+0x5e>
		{
			tmp += rxsize[i];
 8001d16:	5cf1      	ldrb	r1, [r6, r3]
 8001d18:	440a      	add	r2, r1
 8001d1a:	b252      	sxtb	r2, r2
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001d1c:	2a10      	cmp	r2, #16
 8001d1e:	dc17      	bgt.n	8001d50 <wizchip_init+0x84>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001d20:	3301      	adds	r3, #1
 8001d22:	b25b      	sxtb	r3, r3
 8001d24:	e7f5      	b.n	8001d12 <wizchip_init+0x46>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 8001d26:	2000      	movs	r0, #0
 8001d28:	e00e      	b.n	8001d48 <wizchip_init+0x7c>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001d2a:	2400      	movs	r4, #0
 8001d2c:	e009      	b.n	8001d42 <wizchip_init+0x76>
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001d2e:	00a0      	lsls	r0, r4, #2
 8001d30:	3001      	adds	r0, #1
 8001d32:	00c0      	lsls	r0, r0, #3
 8001d34:	5d31      	ldrb	r1, [r6, r4]
 8001d36:	f500 50f0 	add.w	r0, r0, #7680	; 0x1e00
 8001d3a:	f7ff fa9d 	bl	8001278 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001d3e:	3401      	adds	r4, #1
 8001d40:	b264      	sxtb	r4, r4
 8001d42:	2c07      	cmp	r4, #7
 8001d44:	ddf3      	ble.n	8001d2e <wizchip_init+0x62>
   return 0;
 8001d46:	2000      	movs	r0, #0
}
 8001d48:	bd70      	pop	{r4, r5, r6, pc}
			if(tmp > 16) return -1;
 8001d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d4e:	e7fb      	b.n	8001d48 <wizchip_init+0x7c>
			if(tmp > 16) return -1;
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d54:	e7f8      	b.n	8001d48 <wizchip_init+0x7c>

08001d56 <wizchip_getinterrupt>:

#endif   
}

intr_kind wizchip_getinterrupt(void)
{
 8001d56:	b510      	push	{r4, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8001d58:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001d5c:	f7ff fa5a 	bl	8001214 <WIZCHIP_READ>
 8001d60:	f000 04f0 	and.w	r4, r0, #240	; 0xf0
   sir = getSIR();
 8001d64:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8001d68:	f7ff fa54 	bl	8001214 <WIZCHIP_READ>
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8001d6c:	b280      	uxth	r0, r0
  ret = (ret << 8) + ir;
 8001d6e:	0200      	lsls	r0, r0, #8
 8001d70:	b280      	uxth	r0, r0
 8001d72:	4420      	add	r0, r4
 8001d74:	b280      	uxth	r0, r0
  return (intr_kind)ret;
}
 8001d76:	bd10      	pop	{r4, pc}

08001d78 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8001d78:	b510      	push	{r4, lr}
   uint8_t imr  = (uint8_t)intr;
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8001d7a:	0a04      	lsrs	r4, r0, #8
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8001d7c:	b2c1      	uxtb	r1, r0
 8001d7e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8001d82:	f7ff fa79 	bl	8001278 <WIZCHIP_WRITE>
   setSIMR(simr);
 8001d86:	4621      	mov	r1, r4
 8001d88:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001d8c:	f7ff fa74 	bl	8001278 <WIZCHIP_WRITE>
#endif   
}
 8001d90:	bd10      	pop	{r4, pc}
	...

08001d94 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001d94:	b510      	push	{r4, lr}
 8001d96:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 8001d98:	2206      	movs	r2, #6
 8001d9a:	4601      	mov	r1, r0
 8001d9c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001da0:	f7ff fade 	bl	8001360 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001da4:	2204      	movs	r2, #4
 8001da6:	f104 010e 	add.w	r1, r4, #14
 8001daa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dae:	f7ff fad7 	bl	8001360 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001db2:	2204      	movs	r2, #4
 8001db4:	f104 010a 	add.w	r1, r4, #10
 8001db8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001dbc:	f7ff fad0 	bl	8001360 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	1da1      	adds	r1, r4, #6
 8001dc4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001dc8:	f7ff faca 	bl	8001360 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001dcc:	7ca2      	ldrb	r2, [r4, #18]
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <wizchip_setnetinfo+0x54>)
 8001dd0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001dd2:	7ce2      	ldrb	r2, [r4, #19]
 8001dd4:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001dd6:	7d22      	ldrb	r2, [r4, #20]
 8001dd8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001dda:	7d62      	ldrb	r2, [r4, #21]
 8001ddc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001dde:	7da2      	ldrb	r2, [r4, #22]
 8001de0:	4b02      	ldr	r3, [pc, #8]	; (8001dec <wizchip_setnetinfo+0x58>)
 8001de2:	701a      	strb	r2, [r3, #0]
}
 8001de4:	bd10      	pop	{r4, pc}
 8001de6:	bf00      	nop
 8001de8:	20000130 	.word	0x20000130
 8001dec:	2000012c 	.word	0x2000012c

08001df0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001df0:	b510      	push	{r4, lr}
 8001df2:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 8001df4:	2206      	movs	r2, #6
 8001df6:	4601      	mov	r1, r0
 8001df8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001dfc:	f7ff fa70 	bl	80012e0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001e00:	2204      	movs	r2, #4
 8001e02:	f104 010e 	add.w	r1, r4, #14
 8001e06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e0a:	f7ff fa69 	bl	80012e0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001e0e:	2204      	movs	r2, #4
 8001e10:	f104 010a 	add.w	r1, r4, #10
 8001e14:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001e18:	f7ff fa62 	bl	80012e0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	1da1      	adds	r1, r4, #6
 8001e20:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001e24:	f7ff fa5c 	bl	80012e0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <wizchip_getnetinfo+0x54>)
 8001e2a:	781a      	ldrb	r2, [r3, #0]
 8001e2c:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001e2e:	785a      	ldrb	r2, [r3, #1]
 8001e30:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001e32:	789a      	ldrb	r2, [r3, #2]
 8001e34:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001e36:	78db      	ldrb	r3, [r3, #3]
 8001e38:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001e3a:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <wizchip_getnetinfo+0x58>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	75a3      	strb	r3, [r4, #22]
}
 8001e40:	bd10      	pop	{r4, pc}
 8001e42:	bf00      	nop
 8001e44:	20000130 	.word	0x20000130
 8001e48:	2000012c 	.word	0x2000012c

08001e4c <mcp23017_init>:

#define I2C_TIMEOUT		10

void mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c, uint16_t addr)
{
	hdev->hi2c = hi2c;
 8001e4c:	6001      	str	r1, [r0, #0]
	hdev->addr = addr << 1;
 8001e4e:	0052      	lsls	r2, r2, #1
 8001e50:	8082      	strh	r2, [r0, #4]
}
 8001e52:	4770      	bx	lr

08001e54 <mcp23017_read>:

HAL_StatusTypeDef mcp23017_read(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 8001e54:	b510      	push	{r4, lr}
 8001e56:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Read(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 8001e58:	8884      	ldrh	r4, [r0, #4]
 8001e5a:	6800      	ldr	r0, [r0, #0]
 8001e5c:	230a      	movs	r3, #10
 8001e5e:	9302      	str	r3, [sp, #8]
 8001e60:	2301      	movs	r3, #1
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	9200      	str	r2, [sp, #0]
 8001e66:	460a      	mov	r2, r1
 8001e68:	4621      	mov	r1, r4
 8001e6a:	f004 f943 	bl	80060f4 <HAL_I2C_Mem_Read>
}
 8001e6e:	b004      	add	sp, #16
 8001e70:	bd10      	pop	{r4, pc}

08001e72 <mcp23017_write>:

HAL_StatusTypeDef mcp23017_write(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 8001e72:	b510      	push	{r4, lr}
 8001e74:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Write(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 8001e76:	8884      	ldrh	r4, [r0, #4]
 8001e78:	6800      	ldr	r0, [r0, #0]
 8001e7a:	230a      	movs	r3, #10
 8001e7c:	9302      	str	r3, [sp, #8]
 8001e7e:	2301      	movs	r3, #1
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	9200      	str	r2, [sp, #0]
 8001e84:	460a      	mov	r2, r1
 8001e86:	4621      	mov	r1, r4
 8001e88:	f004 f880 	bl	8005f8c <HAL_I2C_Mem_Write>
}
 8001e8c:	b004      	add	sp, #16
 8001e8e:	bd10      	pop	{r4, pc}

08001e90 <mcp23017_iodir>:

HAL_StatusTypeDef mcp23017_iodir(MCP23017_HandleTypeDef *hdev, uint8_t port, uint8_t iodir)
{
 8001e90:	b500      	push	{lr}
 8001e92:	b083      	sub	sp, #12
	uint8_t data[1] = {iodir};
 8001e94:	ab02      	add	r3, sp, #8
 8001e96:	f803 2d04 	strb.w	r2, [r3, #-4]!
	return mcp23017_write(hdev, REGISTER_IODIRA|port, data);
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f7ff ffe9 	bl	8001e72 <mcp23017_write>
}
 8001ea0:	b003      	add	sp, #12
 8001ea2:	f85d fb04 	ldr.w	pc, [sp], #4

08001ea6 <mcp23017_read_gpio>:
	uint8_t data[1] = {pu};
	return mcp23017_write(hdev, REGISTER_GPPUA|port, data);
}

HAL_StatusTypeDef mcp23017_read_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 8001ea6:	b530      	push	{r4, r5, lr}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	4604      	mov	r4, r0
 8001eac:	460d      	mov	r5, r1
	uint8_t data[1];
	HAL_StatusTypeDef status;
	status = mcp23017_read(hdev, REGISTER_GPIOA|port, data);
 8001eae:	aa01      	add	r2, sp, #4
 8001eb0:	f041 0112 	orr.w	r1, r1, #18
 8001eb4:	f7ff ffce 	bl	8001e54 <mcp23017_read>
	if (status == HAL_OK)
 8001eb8:	4603      	mov	r3, r0
 8001eba:	b918      	cbnz	r0, 8001ec4 <mcp23017_read_gpio+0x1e>
		hdev->gpio[port] = data[0];
 8001ebc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001ec0:	442c      	add	r4, r5
 8001ec2:	71a2      	strb	r2, [r4, #6]
	return status;
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	b003      	add	sp, #12
 8001ec8:	bd30      	pop	{r4, r5, pc}

08001eca <mcp23017_write_gpio>:

HAL_StatusTypeDef mcp23017_write_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 8001eca:	b500      	push	{lr}
 8001ecc:	b083      	sub	sp, #12
	uint8_t data[1] = {hdev->gpio[port]};
 8001ece:	1843      	adds	r3, r0, r1
 8001ed0:	799b      	ldrb	r3, [r3, #6]
 8001ed2:	aa02      	add	r2, sp, #8
 8001ed4:	f802 3d04 	strb.w	r3, [r2, #-4]!
	return mcp23017_write(hdev, REGISTER_GPIOA|port, data);
 8001ed8:	f041 0112 	orr.w	r1, r1, #18
 8001edc:	f7ff ffc9 	bl	8001e72 <mcp23017_write>
}
 8001ee0:	b003      	add	sp, #12
 8001ee2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001ee8 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8001ee8:	b500      	push	{lr}
 8001eea:	b087      	sub	sp, #28
 8001eec:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8001ef0:	2364      	movs	r3, #100	; 0x64
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f10d 0217 	add.w	r2, sp, #23
 8001efa:	f10d 010f 	add.w	r1, sp, #15
 8001efe:	4804      	ldr	r0, [pc, #16]	; (8001f10 <W25qxx_Spi+0x28>)
 8001f00:	f005 f9fd 	bl	80072fe <HAL_SPI_TransmitReceive>
	return ret;	
}
 8001f04:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001f08:	b007      	add	sp, #28
 8001f0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f0e:	bf00      	nop
 8001f10:	200031c0 	.word	0x200031c0

08001f14 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001f14:	b570      	push	{r4, r5, r6, lr}
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
  FLASH_SELECT;
 8001f16:	f000 f9ed 	bl	80022f4 <FLASH_ChipSelect>
  W25qxx_Spi(0x9F);
 8001f1a:	209f      	movs	r0, #159	; 0x9f
 8001f1c:	f7ff ffe4 	bl	8001ee8 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f20:	20a5      	movs	r0, #165	; 0xa5
 8001f22:	f7ff ffe1 	bl	8001ee8 <W25qxx_Spi>
 8001f26:	4606      	mov	r6, r0
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f28:	20a5      	movs	r0, #165	; 0xa5
 8001f2a:	f7ff ffdd 	bl	8001ee8 <W25qxx_Spi>
 8001f2e:	4604      	mov	r4, r0
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f30:	20a5      	movs	r0, #165	; 0xa5
 8001f32:	f7ff ffd9 	bl	8001ee8 <W25qxx_Spi>
 8001f36:	4605      	mov	r5, r0
  FLASH_DESELECT;
 8001f38:	f000 f9ee 	bl	8002318 <FLASH_ChipDeselect>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001f3c:	0220      	lsls	r0, r4, #8
 8001f3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
  return Temp;
}
 8001f42:	4328      	orrs	r0, r5
 8001f44:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f48 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001f48:	b510      	push	{r4, lr}
  FLASH_SELECT;
 8001f4a:	f000 f9d3 	bl	80022f4 <FLASH_ChipSelect>
  W25qxx_Spi(0x4B);
 8001f4e:	204b      	movs	r0, #75	; 0x4b
 8001f50:	f7ff ffca 	bl	8001ee8 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8001f54:	2400      	movs	r4, #0
 8001f56:	e004      	b.n	8001f62 <W25qxx_ReadUniqID+0x1a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f58:	20a5      	movs	r0, #165	; 0xa5
 8001f5a:	f7ff ffc5 	bl	8001ee8 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8001f5e:	3401      	adds	r4, #1
 8001f60:	b2e4      	uxtb	r4, r4
 8001f62:	2c03      	cmp	r4, #3
 8001f64:	d9f8      	bls.n	8001f58 <W25qxx_ReadUniqID+0x10>
	for(uint8_t	i=0;i<8;i++)
 8001f66:	2400      	movs	r4, #0
 8001f68:	e007      	b.n	8001f7a <W25qxx_ReadUniqID+0x32>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f6a:	20a5      	movs	r0, #165	; 0xa5
 8001f6c:	f7ff ffbc 	bl	8001ee8 <W25qxx_Spi>
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <W25qxx_ReadUniqID+0x3c>)
 8001f72:	4423      	add	r3, r4
 8001f74:	7058      	strb	r0, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8001f76:	3401      	adds	r4, #1
 8001f78:	b2e4      	uxtb	r4, r4
 8001f7a:	2c07      	cmp	r4, #7
 8001f7c:	d9f5      	bls.n	8001f6a <W25qxx_ReadUniqID+0x22>
  FLASH_DESELECT;
 8001f7e:	f000 f9cb 	bl	8002318 <FLASH_ChipDeselect>
}
 8001f82:	bd10      	pop	{r4, pc}
 8001f84:	20002a78 	.word	0x20002a78

08001f88 <W25qxx_ReadStatusRegister>:
  FLASH_DESELECT;
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8001f88:	b510      	push	{r4, lr}
 8001f8a:	4604      	mov	r4, r0
	uint8_t	status=0;
	FLASH_SELECT;
 8001f8c:	f000 f9b2 	bl	80022f4 <FLASH_ChipSelect>
	if(SelectStatusRegister_1_2_3==1)
 8001f90:	2c01      	cmp	r4, #1
 8001f92:	d00f      	beq.n	8001fb4 <W25qxx_ReadStatusRegister+0x2c>
	{
		W25qxx_Spi(0x05);
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister1 = status;
	}
	else if(SelectStatusRegister_1_2_3==2)
 8001f94:	2c02      	cmp	r4, #2
 8001f96:	d018      	beq.n	8001fca <W25qxx_ReadStatusRegister+0x42>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister2 = status;
	}
	else
	{
		W25qxx_Spi(0x15);
 8001f98:	2015      	movs	r0, #21
 8001f9a:	f7ff ffa5 	bl	8001ee8 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001f9e:	20a5      	movs	r0, #165	; 0xa5
 8001fa0:	f7ff ffa2 	bl	8001ee8 <W25qxx_Spi>
 8001fa4:	4604      	mov	r4, r0
		w25qxx.StatusRegister3 = status;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <W25qxx_ReadStatusRegister+0x58>)
 8001fa8:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	}	
	FLASH_DESELECT;
 8001fac:	f000 f9b4 	bl	8002318 <FLASH_ChipDeselect>
	return status;
}
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	bd10      	pop	{r4, pc}
		W25qxx_Spi(0x05);
 8001fb4:	2005      	movs	r0, #5
 8001fb6:	f7ff ff97 	bl	8001ee8 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001fba:	20a5      	movs	r0, #165	; 0xa5
 8001fbc:	f7ff ff94 	bl	8001ee8 <W25qxx_Spi>
 8001fc0:	4604      	mov	r4, r0
		w25qxx.StatusRegister1 = status;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <W25qxx_ReadStatusRegister+0x58>)
 8001fc4:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
 8001fc8:	e7f0      	b.n	8001fac <W25qxx_ReadStatusRegister+0x24>
		W25qxx_Spi(0x35);
 8001fca:	2035      	movs	r0, #53	; 0x35
 8001fcc:	f7ff ff8c 	bl	8001ee8 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001fd0:	20a5      	movs	r0, #165	; 0xa5
 8001fd2:	f7ff ff89 	bl	8001ee8 <W25qxx_Spi>
 8001fd6:	4604      	mov	r4, r0
		w25qxx.StatusRegister2 = status;
 8001fd8:	4b01      	ldr	r3, [pc, #4]	; (8001fe0 <W25qxx_ReadStatusRegister+0x58>)
 8001fda:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
 8001fde:	e7e5      	b.n	8001fac <W25qxx_ReadStatusRegister+0x24>
 8001fe0:	20002a78 	.word	0x20002a78

08001fe4 <W25qxx_Init>:
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 FLASH_DESELECT;
}
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8001fe4:	b510      	push	{r4, lr}
	w25qxx.Lock=1;	
 8001fe6:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <W25qxx_Init+0x10c>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8001fee:	e002      	b.n	8001ff6 <W25qxx_Init+0x12>
		W25qxx_Delay(1);
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f006 faec 	bl	80085ce <osDelay>
	while(HAL_GetTick()<100)
 8001ff6:	f002 ff41 	bl	8004e7c <HAL_GetTick>
 8001ffa:	2863      	cmp	r0, #99	; 0x63
 8001ffc:	d9f8      	bls.n	8001ff0 <W25qxx_Init+0xc>
  FLASH_DESELECT;
 8001ffe:	f000 f98b 	bl	8002318 <FLASH_ChipDeselect>
  W25qxx_Delay(100);
 8002002:	2064      	movs	r0, #100	; 0x64
 8002004:	f006 fae3 	bl	80085ce <osDelay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 8002008:	f7ff ff84 	bl	8001f14 <W25qxx_ReadID>
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 800200c:	b280      	uxth	r0, r0
 800200e:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8002012:	3811      	subs	r0, #17
 8002014:	2809      	cmp	r0, #9
 8002016:	d866      	bhi.n	80020e6 <W25qxx_Init+0x102>
 8002018:	e8df f000 	tbb	[pc, r0]
 800201c:	4d53595f 	.word	0x4d53595f
 8002020:	343b4147 	.word	0x343b4147
 8002024:	052d      	.short	0x052d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8002026:	4b32      	ldr	r3, [pc, #200]	; (80020f0 <W25qxx_Init+0x10c>)
 8002028:	220a      	movs	r2, #10
 800202a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 800202c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002030:	61da      	str	r2, [r3, #28]
				#endif
			w25qxx.Lock=0;	
			return false;
				
	}		
	w25qxx.PageSize=256;
 8002032:	4c2f      	ldr	r4, [pc, #188]	; (80020f0 <W25qxx_Init+0x10c>)
 8002034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002038:	8163      	strh	r3, [r4, #10]
	w25qxx.SectorSize=0x1000;
 800203a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203e:	6123      	str	r3, [r4, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8002040:	69e3      	ldr	r3, [r4, #28]
 8002042:	011a      	lsls	r2, r3, #4
 8002044:	6162      	str	r2, [r4, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8002046:	041b      	lsls	r3, r3, #16
 8002048:	0a1a      	lsrs	r2, r3, #8
 800204a:	60e2      	str	r2, [r4, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 800204c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002050:	61a2      	str	r2, [r4, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8002052:	0a9b      	lsrs	r3, r3, #10
 8002054:	6223      	str	r3, [r4, #32]
	W25qxx_ReadUniqID();
 8002056:	f7ff ff77 	bl	8001f48 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800205a:	2001      	movs	r0, #1
 800205c:	f7ff ff94 	bl	8001f88 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002060:	2002      	movs	r0, #2
 8002062:	f7ff ff91 	bl	8001f88 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002066:	2003      	movs	r0, #3
 8002068:	f7ff ff8e 	bl	8001f88 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 800206c:	2300      	movs	r3, #0
 800206e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return true;
 8002072:	2001      	movs	r0, #1
}	
 8002074:	bd10      	pop	{r4, pc}
			w25qxx.ID=W25Q256;
 8002076:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <W25qxx_Init+0x10c>)
 8002078:	2209      	movs	r2, #9
 800207a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 800207c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002080:	61da      	str	r2, [r3, #28]
		break;
 8002082:	e7d6      	b.n	8002032 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q128;
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <W25qxx_Init+0x10c>)
 8002086:	2208      	movs	r2, #8
 8002088:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 800208a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208e:	61da      	str	r2, [r3, #28]
		break;
 8002090:	e7cf      	b.n	8002032 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q64;
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <W25qxx_Init+0x10c>)
 8002094:	2207      	movs	r2, #7
 8002096:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8002098:	2280      	movs	r2, #128	; 0x80
 800209a:	61da      	str	r2, [r3, #28]
		break;
 800209c:	e7c9      	b.n	8002032 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q32;
 800209e:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <W25qxx_Init+0x10c>)
 80020a0:	2206      	movs	r2, #6
 80020a2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 80020a4:	2240      	movs	r2, #64	; 0x40
 80020a6:	61da      	str	r2, [r3, #28]
		break;
 80020a8:	e7c3      	b.n	8002032 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q16;
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <W25qxx_Init+0x10c>)
 80020ac:	2205      	movs	r2, #5
 80020ae:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 80020b0:	2220      	movs	r2, #32
 80020b2:	61da      	str	r2, [r3, #28]
		break;
 80020b4:	e7bd      	b.n	8002032 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q80;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <W25qxx_Init+0x10c>)
 80020b8:	2204      	movs	r2, #4
 80020ba:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 80020bc:	2210      	movs	r2, #16
 80020be:	61da      	str	r2, [r3, #28]
		break;
 80020c0:	e7b7      	b.n	8002032 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q40;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <W25qxx_Init+0x10c>)
 80020c4:	2203      	movs	r2, #3
 80020c6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 80020c8:	2208      	movs	r2, #8
 80020ca:	61da      	str	r2, [r3, #28]
		break;
 80020cc:	e7b1      	b.n	8002032 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q20;
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <W25qxx_Init+0x10c>)
 80020d0:	2202      	movs	r2, #2
 80020d2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 80020d4:	2204      	movs	r2, #4
 80020d6:	61da      	str	r2, [r3, #28]
		break;
 80020d8:	e7ab      	b.n	8002032 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q10;
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <W25qxx_Init+0x10c>)
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 80020e0:	2202      	movs	r2, #2
 80020e2:	61da      	str	r2, [r3, #28]
		break;
 80020e4:	e7a5      	b.n	8002032 <W25qxx_Init+0x4e>
			w25qxx.Lock=0;	
 80020e6:	2000      	movs	r0, #0
 80020e8:	4b01      	ldr	r3, [pc, #4]	; (80020f0 <W25qxx_Init+0x10c>)
 80020ea:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
			return false;
 80020ee:	e7c1      	b.n	8002074 <W25qxx_Init+0x90>
 80020f0:	20002a78 	.word	0x20002a78

080020f4 <vModbusInit>:
#include "Modbus.h"

void vModbusInit (ModbusHandler *modbus, UART_HandleTypeDef *port, TickType_t timeout){
	modbus -> ModbusSerialPort = port;
 80020f4:	6001      	str	r1, [r0, #0]
	modbus -> timeout_t = timeout / portTICK_PERIOD_MS;
 80020f6:	6042      	str	r2, [r0, #4]
}
 80020f8:	4770      	bx	lr

080020fa <uModbusCalculateCRC>:

uint16_t uModbusCalculateCRC (uint8_t frame_length, uint8_t *frame){
 80020fa:	b430      	push	{r4, r5}
	uint16_t calculatedCRC = 0xFFFF;
	uint16_t CRChigh, CRClow;
	for(int i = 0; i < frame_length; i++){
 80020fc:	2500      	movs	r5, #0
	uint16_t calculatedCRC = 0xFFFF;
 80020fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
	for(int i = 0; i < frame_length; i++){
 8002102:	e00d      	b.n	8002120 <uModbusCalculateCRC+0x26>
		for(int j = 8; j > 0; j--){
			if(calculatedCRC & 0x0001){
				calculatedCRC >>= 1;
				calculatedCRC ^= 0xA001;
			}else{
				calculatedCRC >>= 1;
 8002104:	085b      	lsrs	r3, r3, #1
		for(int j = 8; j > 0; j--){
 8002106:	3a01      	subs	r2, #1
 8002108:	2a00      	cmp	r2, #0
 800210a:	dd07      	ble.n	800211c <uModbusCalculateCRC+0x22>
			if(calculatedCRC & 0x0001){
 800210c:	f013 0f01 	tst.w	r3, #1
 8002110:	d0f8      	beq.n	8002104 <uModbusCalculateCRC+0xa>
				calculatedCRC ^= 0xA001;
 8002112:	f24a 0401 	movw	r4, #40961	; 0xa001
 8002116:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
 800211a:	e7f4      	b.n	8002106 <uModbusCalculateCRC+0xc>
			}
		}
		frame++;
 800211c:	3101      	adds	r1, #1
	for(int i = 0; i < frame_length; i++){
 800211e:	3501      	adds	r5, #1
 8002120:	42a8      	cmp	r0, r5
 8002122:	dd03      	ble.n	800212c <uModbusCalculateCRC+0x32>
		calculatedCRC ^= (*frame);
 8002124:	780a      	ldrb	r2, [r1, #0]
 8002126:	4053      	eors	r3, r2
		for(int j = 8; j > 0; j--){
 8002128:	2208      	movs	r2, #8
 800212a:	e7ed      	b.n	8002108 <uModbusCalculateCRC+0xe>
	}

	CRChigh = (calculatedCRC & 0x00FF) <<8;
 800212c:	0218      	lsls	r0, r3, #8
 800212e:	b280      	uxth	r0, r0
	CRClow = (calculatedCRC & 0xFF00) >>8;
	calculatedCRC = CRChigh + CRClow;
 8002130:	eb00 2013 	add.w	r0, r0, r3, lsr #8

	//calculatedCRC = HAL_CRC_Calculate(&hcrc, frame, frame_length);
	return calculatedCRC;
}
 8002134:	b280      	uxth	r0, r0
 8002136:	bc30      	pop	{r4, r5}
 8002138:	4770      	bx	lr

0800213a <bModbusCheckCRC>:

uint8_t bModbusCheckCRC (uint8_t frame_length, uint8_t *frame){
 800213a:	b570      	push	{r4, r5, r6, lr}
 800213c:	4604      	mov	r4, r0
 800213e:	460d      	mov	r5, r1
	uint16_t crc = uModbusCalculateCRC(frame_length - 2, frame);
 8002140:	1e86      	subs	r6, r0, #2
 8002142:	b2f0      	uxtb	r0, r6
 8002144:	f7ff ffd9 	bl	80020fa <uModbusCalculateCRC>
	uint16_t frameCRC = (uint16_t)(*(frame + frame_length - 2));
 8002148:	5daa      	ldrb	r2, [r5, r6]
	frameCRC <<= 8;
	frameCRC += *(frame + frame_length - 1);
 800214a:	3c01      	subs	r4, #1
 800214c:	5d2b      	ldrb	r3, [r5, r4]
 800214e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002152:	b29b      	uxth	r3, r3

	if(crc == frameCRC){
 8002154:	4298      	cmp	r0, r3
 8002156:	d001      	beq.n	800215c <bModbusCheckCRC+0x22>
		return 1;
	}

	return 0;
 8002158:	2000      	movs	r0, #0
}
 800215a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 800215c:	2001      	movs	r0, #1
 800215e:	e7fc      	b.n	800215a <bModbusCheckCRC+0x20>

08002160 <vModbusReadInputRegisters>:
		return Modbus_TIMEOUT;
	}
	return Modbus_CRCERR;
}

ModbusState vModbusReadInputRegisters (ModbusHandler *modbus, uint8_t slave_address, uint16_t first_register_address, uint16_t registers_count, uint8_t *response_frame){
 8002160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	4606      	mov	r6, r0
 800216a:	4689      	mov	r9, r1
 800216c:	f8d7 8030 	ldr.w	r8, [r7, #48]	; 0x30
	uint8_t transmit_frame_buffer[8];
	uint16_t transmitCRC;
	uint8_t received_frame_length = (registers_count * 2) + 5;
 8002170:	fa5f fe83 	uxtb.w	lr, r3
 8002174:	ea4f 044e 	mov.w	r4, lr, lsl #1
 8002178:	b2e4      	uxtb	r4, r4
 800217a:	3405      	adds	r4, #5
 800217c:	b2e4      	uxtb	r4, r4
	uint8_t received_frame_buffer[received_frame_length];
 800217e:	46a4      	mov	ip, r4
 8002180:	1de1      	adds	r1, r4, #7
 8002182:	f401 71fc 	and.w	r1, r1, #504	; 0x1f8
 8002186:	ebad 0d01 	sub.w	sp, sp, r1
 800218a:	466d      	mov	r5, sp
	uint32_t ulNotificationValue;
	for(int i = 0; i < received_frame_length; i++){
 800218c:	2100      	movs	r1, #0
 800218e:	e002      	b.n	8002196 <vModbusReadInputRegisters+0x36>
		received_frame_buffer[i] = 0;
 8002190:	2000      	movs	r0, #0
 8002192:	5468      	strb	r0, [r5, r1]
	for(int i = 0; i < received_frame_length; i++){
 8002194:	3101      	adds	r1, #1
 8002196:	458c      	cmp	ip, r1
 8002198:	dcfa      	bgt.n	8002190 <vModbusReadInputRegisters+0x30>

	}
	transmit_frame_buffer[0] = slave_address;
 800219a:	f887 9000 	strb.w	r9, [r7]
	transmit_frame_buffer[1] = 0x04;
 800219e:	2104      	movs	r1, #4
 80021a0:	7079      	strb	r1, [r7, #1]
	transmit_frame_buffer[2] = (uint8_t)(first_register_address >> 8);
 80021a2:	0a11      	lsrs	r1, r2, #8
 80021a4:	70b9      	strb	r1, [r7, #2]
	transmit_frame_buffer[3] = (uint8_t)first_register_address;
 80021a6:	70fa      	strb	r2, [r7, #3]
	transmit_frame_buffer[4] = (uint8_t)(registers_count >> 8);
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	713b      	strb	r3, [r7, #4]
	transmit_frame_buffer[5] = (uint8_t)(registers_count);
 80021ac:	f887 e005 	strb.w	lr, [r7, #5]
	transmitCRC = uModbusCalculateCRC (6, transmit_frame_buffer);
 80021b0:	4639      	mov	r1, r7
 80021b2:	2006      	movs	r0, #6
 80021b4:	f7ff ffa1 	bl	80020fa <uModbusCalculateCRC>
	transmit_frame_buffer[6] = (transmitCRC >> 8);
 80021b8:	0a03      	lsrs	r3, r0, #8
 80021ba:	71bb      	strb	r3, [r7, #6]
	transmit_frame_buffer[7] = (uint8_t)(transmitCRC);
 80021bc:	71f8      	strb	r0, [r7, #7]

	//Wy�lij dane;
	HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_SET);
 80021be:	2201      	movs	r2, #1
 80021c0:	2102      	movs	r1, #2
 80021c2:	4829      	ldr	r0, [pc, #164]	; (8002268 <vModbusReadInputRegisters+0x108>)
 80021c4:	f003 fba7 	bl	8005916 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 80021c8:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 800226c <vModbusReadInputRegisters+0x10c>
 80021cc:	2200      	movs	r2, #0
 80021ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d2:	4650      	mov	r0, sl
 80021d4:	f003 fb9f 	bl	8005916 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(modbus -> ModbusSerialPort, transmit_frame_buffer, 8);
 80021d8:	2208      	movs	r2, #8
 80021da:	4639      	mov	r1, r7
 80021dc:	6830      	ldr	r0, [r6, #0]
 80021de:	f005 ff8c 	bl	80080fa <HAL_UART_Transmit_IT>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 80021e2:	6871      	ldr	r1, [r6, #4]
 80021e4:	2001      	movs	r0, #1
 80021e6:	f007 fd1b 	bl	8009c20 <ulTaskNotifyTake>
	HAL_UART_Receive_DMA(modbus -> ModbusSerialPort, received_frame_buffer, received_frame_length);
 80021ea:	4622      	mov	r2, r4
 80021ec:	4629      	mov	r1, r5
 80021ee:	6830      	ldr	r0, [r6, #0]
 80021f0:	f005 ffa8 	bl	8008144 <HAL_UART_Receive_DMA>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 80021f4:	6871      	ldr	r1, [r6, #4]
 80021f6:	2001      	movs	r0, #1
 80021f8:	f007 fd12 	bl	8009c20 <ulTaskNotifyTake>
 80021fc:	4683      	mov	fp, r0
	vTaskDelay(1);
 80021fe:	2001      	movs	r0, #1
 8002200:	f007 fa86 	bl	8009710 <vTaskDelay>
	HAL_UART_AbortTransmit(modbus -> ModbusSerialPort);
 8002204:	6830      	ldr	r0, [r6, #0]
 8002206:	f005 fff1 	bl	80081ec <HAL_UART_AbortTransmit>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 800220a:	2201      	movs	r2, #1
 800220c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002210:	4650      	mov	r0, sl
 8002212:	f003 fb80 	bl	8005916 <HAL_GPIO_WritePin>
	if(ulNotificationValue){
 8002216:	f1bb 0f00 	cmp.w	fp, #0
 800221a:	d019      	beq.n	8002250 <vModbusReadInputRegisters+0xf0>
		if(bModbusCheckCRC(received_frame_length, received_frame_buffer)){
 800221c:	4629      	mov	r1, r5
 800221e:	4620      	mov	r0, r4
 8002220:	f7ff ff8b 	bl	800213a <bModbusCheckCRC>
 8002224:	b1e0      	cbz	r0, 8002260 <vModbusReadInputRegisters+0x100>
			if(received_frame_buffer[0] == slave_address && received_frame_buffer[1] == 0x04){
 8002226:	782b      	ldrb	r3, [r5, #0]
 8002228:	454b      	cmp	r3, r9
 800222a:	d11b      	bne.n	8002264 <vModbusReadInputRegisters+0x104>
 800222c:	786b      	ldrb	r3, [r5, #1]
 800222e:	2b04      	cmp	r3, #4
 8002230:	d101      	bne.n	8002236 <vModbusReadInputRegisters+0xd6>
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 8002232:	2200      	movs	r2, #0
 8002234:	e006      	b.n	8002244 <vModbusReadInputRegisters+0xe4>
				return Modbus_OK;
			}
#ifdef __DEBUG
			printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
			return Modbus_CRCERR;
 8002236:	2002      	movs	r0, #2
 8002238:	e00e      	b.n	8002258 <vModbusReadInputRegisters+0xf8>
					*response_frame = received_frame_buffer[i + 3];
 800223a:	1cd3      	adds	r3, r2, #3
 800223c:	5ceb      	ldrb	r3, [r5, r3]
 800223e:	f808 3b01 	strb.w	r3, [r8], #1
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 8002242:	3201      	adds	r2, #1
 8002244:	78ab      	ldrb	r3, [r5, #2]
 8002246:	3302      	adds	r3, #2
 8002248:	429a      	cmp	r2, r3
 800224a:	dbf6      	blt.n	800223a <vModbusReadInputRegisters+0xda>
				return Modbus_OK;
 800224c:	2000      	movs	r0, #0
 800224e:	e003      	b.n	8002258 <vModbusReadInputRegisters+0xf8>
#ifdef __DEBUG
		printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
		return Modbus_CRCERR;
	}else{
		HAL_UART_AbortReceive_IT(modbus -> ModbusSerialPort);
 8002250:	6830      	ldr	r0, [r6, #0]
 8002252:	f006 f93d 	bl	80084d0 <HAL_UART_AbortReceive_IT>
#ifdef __DEBUG
		printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
		return Modbus_TIMEOUT;
 8002256:	2001      	movs	r0, #1
	}
#ifdef __DEBUG
	printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
	return Modbus_CRCERR;
}
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return Modbus_CRCERR;
 8002260:	2002      	movs	r0, #2
 8002262:	e7f9      	b.n	8002258 <vModbusReadInputRegisters+0xf8>
			return Modbus_CRCERR;
 8002264:	2002      	movs	r0, #2
 8002266:	e7f7      	b.n	8002258 <vModbusReadInputRegisters+0xf8>
 8002268:	40020000 	.word	0x40020000
 800226c:	40020800 	.word	0x40020800

08002270 <RB_CreateBuffer>:

RB_Status RB_CreateBuffer(RingBuffer *Buffer, uint8_t Size)
{
	//*Buffer = malloc(sizeof(RingBuffer) + (sizeof(uint8_t) * Size));

	if(Buffer == NULL)
 8002270:	4603      	mov	r3, r0
 8002272:	b130      	cbz	r0, 8002282 <RB_CreateBuffer+0x12>
	{
		return RB_NOTCREATED;
	}

	(Buffer)->Size = 32;
 8002274:	2220      	movs	r2, #32
 8002276:	7002      	strb	r2, [r0, #0]
	(Buffer)->Head = 0;
 8002278:	2000      	movs	r0, #0
 800227a:	7058      	strb	r0, [r3, #1]
	(Buffer)->Tail = 0;
 800227c:	7098      	strb	r0, [r3, #2]
	(Buffer)->Elements = 0;
 800227e:	70d8      	strb	r0, [r3, #3]

	return RB_OK;
 8002280:	4770      	bx	lr
		return RB_NOTCREATED;
 8002282:	2002      	movs	r0, #2
}
 8002284:	4770      	bx	lr

08002286 <RB_WriteToBuffer>:

RB_Status RB_WriteToBuffer(RingBuffer *Buffer, uint8_t Data)
{
 8002286:	b430      	push	{r4, r5}
	uint8_t TempHead;

	TempHead = (Buffer->Head + 1) % Buffer->Size;
 8002288:	7843      	ldrb	r3, [r0, #1]
 800228a:	1c5d      	adds	r5, r3, #1
 800228c:	7804      	ldrb	r4, [r0, #0]
 800228e:	fb95 f2f4 	sdiv	r2, r5, r4
 8002292:	fb04 5212 	mls	r2, r4, r2, r5
 8002296:	b2d2      	uxtb	r2, r2

	if( TempHead == Buffer->Tail) // No room for new data
 8002298:	7885      	ldrb	r5, [r0, #2]
 800229a:	4295      	cmp	r5, r2
 800229c:	d00e      	beq.n	80022bc <RB_WriteToBuffer+0x36>
	{
		return RB_NOFREESPACE;
	}
	else
	{
		Buffer->Buffer[Buffer->Head] = Data;
 800229e:	18c2      	adds	r2, r0, r3
 80022a0:	7111      	strb	r1, [r2, #4]

		Buffer->Head++;
 80022a2:	3301      	adds	r3, #1
 80022a4:	b2db      	uxtb	r3, r3
		Buffer->Head %= Buffer->Size;
 80022a6:	fbb3 f2f4 	udiv	r2, r3, r4
 80022aa:	fb04 3312 	mls	r3, r4, r2, r3
 80022ae:	7043      	strb	r3, [r0, #1]

		Buffer->Elements++;
 80022b0:	78c3      	ldrb	r3, [r0, #3]
 80022b2:	3301      	adds	r3, #1
 80022b4:	70c3      	strb	r3, [r0, #3]
	}

	return RB_OK;
 80022b6:	2000      	movs	r0, #0
}
 80022b8:	bc30      	pop	{r4, r5}
 80022ba:	4770      	bx	lr
		return RB_NOFREESPACE;
 80022bc:	2003      	movs	r0, #3
 80022be:	e7fb      	b.n	80022b8 <RB_WriteToBuffer+0x32>

080022c0 <RB_ReadFromBuffer>:

RB_Status RB_ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
	if( Buffer->Tail == Buffer->Head) // No data to read
 80022c0:	7883      	ldrb	r3, [r0, #2]
 80022c2:	7842      	ldrb	r2, [r0, #1]
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d010      	beq.n	80022ea <RB_ReadFromBuffer+0x2a>
	{
		return RB_NOELEMENTS;
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 80022c8:	4403      	add	r3, r0
 80022ca:	791b      	ldrb	r3, [r3, #4]
 80022cc:	700b      	strb	r3, [r1, #0]

		Buffer->Tail++;
 80022ce:	7883      	ldrb	r3, [r0, #2]
 80022d0:	3301      	adds	r3, #1
 80022d2:	b2db      	uxtb	r3, r3
		Buffer->Tail %= Buffer->Size;
 80022d4:	7801      	ldrb	r1, [r0, #0]
 80022d6:	fbb3 f2f1 	udiv	r2, r3, r1
 80022da:	fb01 3312 	mls	r3, r1, r2, r3
 80022de:	7083      	strb	r3, [r0, #2]

		Buffer->Elements--;
 80022e0:	78c3      	ldrb	r3, [r0, #3]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	70c3      	strb	r3, [r0, #3]
	}
	return RB_OK;
 80022e6:	2000      	movs	r0, #0
 80022e8:	4770      	bx	lr
		return RB_NOELEMENTS;
 80022ea:	2004      	movs	r0, #4
}
 80022ec:	4770      	bx	lr

080022ee <RB_ElementsAvailable>:

uint8_t RB_ElementsAvailable(RingBuffer *Buffer)
{
	return Buffer->Elements;
}
 80022ee:	78c0      	ldrb	r0, [r0, #3]
 80022f0:	4770      	bx	lr
	...

080022f4 <FLASH_ChipSelect>:

extern osMutexId SPIMutexHandle;



void FLASH_ChipSelect (void){
 80022f4:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 80022f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <FLASH_ChipSelect+0x1c>)
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	f006 fd47 	bl	8008d90 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <FLASH_ChipSelect+0x20>)
 800230a:	f003 fb04 	bl	8005916 <HAL_GPIO_WritePin>
}
 800230e:	bd08      	pop	{r3, pc}
 8002310:	2000329c 	.word	0x2000329c
 8002314:	40020400 	.word	0x40020400

08002318 <FLASH_ChipDeselect>:

void FLASH_ChipDeselect (void){
 8002318:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 800231a:	2201      	movs	r2, #1
 800231c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002320:	4805      	ldr	r0, [pc, #20]	; (8002338 <FLASH_ChipDeselect+0x20>)
 8002322:	f003 faf8 	bl	8005916 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8002326:	2300      	movs	r3, #0
 8002328:	461a      	mov	r2, r3
 800232a:	4619      	mov	r1, r3
 800232c:	4803      	ldr	r0, [pc, #12]	; (800233c <FLASH_ChipDeselect+0x24>)
 800232e:	6800      	ldr	r0, [r0, #0]
 8002330:	f006 fb38 	bl	80089a4 <xQueueGenericSend>
}
 8002334:	bd08      	pop	{r3, pc}
 8002336:	bf00      	nop
 8002338:	40020400 	.word	0x40020400
 800233c:	2000329c 	.word	0x2000329c

08002340 <DataLogTask>:

void DataLogTask(void const * argument)
{
 8002340:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DataLog */
	W25qxx_Init();
 8002342:	f7ff fe4f 	bl	8001fe4 <W25qxx_Init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002346:	2001      	movs	r0, #1
 8002348:	f006 f941 	bl	80085ce <osDelay>
 800234c:	e7fb      	b.n	8002346 <DataLogTask+0x6>
	...

08002350 <nextion_SendData>:
static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3);
static void nextion_SendConfig(UART_HandleTypeDef* uart);
void NextionBig_DataRcv (void);
void NextionSmall_DataRcv (void);

static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3){
 8002350:	b530      	push	{r4, r5, lr}
 8002352:	b08d      	sub	sp, #52	; 0x34
	char buffor_to_send[40];
	uint8_t buffor_to_send_size;
	current_command = cmd;
 8002354:	4c28      	ldr	r4, [pc, #160]	; (80023f8 <nextion_SendData+0xa8>)
 8002356:	7021      	strb	r1, [r4, #0]
	if(cmd < NEX_COMMANDS_COUNT && cmd > -1){
 8002358:	2921      	cmp	r1, #33	; 0x21
 800235a:	d84b      	bhi.n	80023f4 <nextion_SendData+0xa4>
 800235c:	4605      	mov	r5, r0
		if(cmd == NEX_WAKE || cmd == NEX_SENDME || cmd == NEX_SETTINGS_SAVED || cmd == NEX_SETTINGS_NOT_SAVED
 800235e:	2901      	cmp	r1, #1
 8002360:	d919      	bls.n	8002396 <nextion_SendData+0x46>
 8002362:	2911      	cmp	r1, #17
 8002364:	d017      	beq.n	8002396 <nextion_SendData+0x46>
 8002366:	2912      	cmp	r1, #18
 8002368:	d015      	beq.n	8002396 <nextion_SendData+0x46>
			|| cmd == NEX_SETTINGS_LOCK || cmd == NEX_SETTINGS_UNLOCK){
 800236a:	2921      	cmp	r1, #33	; 0x21
 800236c:	d013      	beq.n	8002396 <nextion_SendData+0x46>
 800236e:	2920      	cmp	r1, #32
 8002370:	d011      	beq.n	8002396 <nextion_SendData+0x46>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
		}else if(cmd == NEX_PHASE_VOLTAGE ||
			cmd == NEX_PHASE_CURRENT ||
 8002372:	f1a1 0018 	sub.w	r0, r1, #24
 8002376:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_VOLTAGE ||
 8002378:	2802      	cmp	r0, #2
 800237a:	d916      	bls.n	80023aa <nextion_SendData+0x5a>
			cmd == NEX_PHASE_POWER){
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
		}else if(cmd == NEX_PHASE_PRG_BAR ||
			cmd == NEX_CO_HEATER_PHASE_DUTY ||
			cmd == NEX_CWU_HEATER_PHASE_DUTY ||
			cmd == NEX_CWU_TEMP || cmd == NEX_CO_TEMP){
 800237c:	f1a1 001b 	sub.w	r0, r1, #27
 8002380:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_PRG_BAR ||
 8002382:	2804      	cmp	r0, #4
 8002384:	d81b      	bhi.n	80023be <nextion_SendData+0x6e>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2);
 8002386:	481d      	ldr	r0, [pc, #116]	; (80023fc <nextion_SendData+0xac>)
 8002388:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800238c:	a802      	add	r0, sp, #8
 800238e:	f008 fc33 	bl	800abf8 <siprintf>
 8002392:	b2c2      	uxtb	r2, r0
 8002394:	e006      	b.n	80023a4 <nextion_SendData+0x54>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
 8002396:	4b19      	ldr	r3, [pc, #100]	; (80023fc <nextion_SendData+0xac>)
 8002398:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800239c:	a802      	add	r0, sp, #8
 800239e:	f008 fc2b 	bl	800abf8 <siprintf>
 80023a2:	b2c2      	uxtb	r2, r0
		}else{
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
		}
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 80023a4:	4610      	mov	r0, r2
 80023a6:	4613      	mov	r3, r2
 80023a8:	e017      	b.n	80023da <nextion_SendData+0x8a>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
 80023aa:	4814      	ldr	r0, [pc, #80]	; (80023fc <nextion_SendData+0xac>)
 80023ac:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80023b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80023b2:	9000      	str	r0, [sp, #0]
 80023b4:	a802      	add	r0, sp, #8
 80023b6:	f008 fc1f 	bl	800abf8 <siprintf>
 80023ba:	b2c2      	uxtb	r2, r0
 80023bc:	e7f2      	b.n	80023a4 <nextion_SendData+0x54>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <nextion_SendData+0xac>)
 80023c0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80023c4:	a802      	add	r0, sp, #8
 80023c6:	f008 fc17 	bl	800abf8 <siprintf>
 80023ca:	b2c2      	uxtb	r2, r0
 80023cc:	e7ea      	b.n	80023a4 <nextion_SendData+0x54>
			buffor_to_send[i] = 0xFF;
 80023ce:	a90c      	add	r1, sp, #48	; 0x30
 80023d0:	4419      	add	r1, r3
 80023d2:	24ff      	movs	r4, #255	; 0xff
 80023d4:	f801 4c28 	strb.w	r4, [r1, #-40]
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 80023d8:	3301      	adds	r3, #1
 80023da:	1cc1      	adds	r1, r0, #3
 80023dc:	4299      	cmp	r1, r3
 80023de:	dcf6      	bgt.n	80023ce <nextion_SendData+0x7e>
		}
		buffor_to_send_size += 3;
 80023e0:	3203      	adds	r2, #3
		HAL_UART_Transmit(uart, (uint8_t*)buffor_to_send, buffor_to_send_size, 20);
 80023e2:	2314      	movs	r3, #20
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	a902      	add	r1, sp, #8
 80023e8:	4628      	mov	r0, r5
 80023ea:	f005 fe15 	bl	8008018 <HAL_UART_Transmit>
		vTaskDelay(5);
 80023ee:	2005      	movs	r0, #5
 80023f0:	f007 f98e 	bl	8009710 <vTaskDelay>
	}
}
 80023f4:	b00d      	add	sp, #52	; 0x34
 80023f6:	bd30      	pop	{r4, r5, pc}
 80023f8:	20002b80 	.word	0x20002b80
 80023fc:	0800b5c8 	.word	0x0800b5c8

08002400 <nextion_SendConfig>:
	nextion_SendData(uart, NEX_MINUTE, currTime.Minutes, 0, 0);
	current_command = NEX_SECONDS;
	nextion_SendData(uart, NEX_SECONDS, currTime.Seconds, 0, 0);
}

static void nextion_SendConfig(UART_HandleTypeDef* uart){
 8002400:	b570      	push	{r4, r5, r6, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	4606      	mov	r6, r0
	nextion_SendData(uart, NEX_CO_HIGH_TEMP, RegulationTaskData.parameters.CO_hi_temp, 0, 0);
 8002406:	4d27      	ldr	r5, [pc, #156]	; (80024a4 <nextion_SendConfig+0xa4>)
 8002408:	f995 207d 	ldrsb.w	r2, [r5, #125]	; 0x7d
 800240c:	2400      	movs	r4, #0
 800240e:	9400      	str	r4, [sp, #0]
 8002410:	4623      	mov	r3, r4
 8002412:	2108      	movs	r1, #8
 8002414:	f7ff ff9c 	bl	8002350 <nextion_SendData>
	nextion_SendData(uart, NEX_CO_LOW_TEMP, RegulationTaskData.parameters.CO_lo_temp, 0, 0);
 8002418:	f995 207e 	ldrsb.w	r2, [r5, #126]	; 0x7e
 800241c:	9400      	str	r4, [sp, #0]
 800241e:	4623      	mov	r3, r4
 8002420:	2109      	movs	r1, #9
 8002422:	4630      	mov	r0, r6
 8002424:	f7ff ff94 	bl	8002350 <nextion_SendData>
	nextion_SendData(uart, NEX_CO_HEATER_POWER, (int32_t)RegulationTaskData.parameters.CO_heater_power, 0, 0);
 8002428:	f8d5 2071 	ldr.w	r2, [r5, #113]	; 0x71
 800242c:	9400      	str	r4, [sp, #0]
 800242e:	4623      	mov	r3, r4
 8002430:	ee07 2a90 	vmov	s15, r2
 8002434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002438:	ee17 2a90 	vmov	r2, s15
 800243c:	210a      	movs	r1, #10
 800243e:	4630      	mov	r0, r6
 8002440:	f7ff ff86 	bl	8002350 <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_HIGH_TEMP, RegulationTaskData.parameters.CWU_hi_temp, 0, 0);
 8002444:	f995 207f 	ldrsb.w	r2, [r5, #127]	; 0x7f
 8002448:	9400      	str	r4, [sp, #0]
 800244a:	4623      	mov	r3, r4
 800244c:	210b      	movs	r1, #11
 800244e:	4630      	mov	r0, r6
 8002450:	f7ff ff7e 	bl	8002350 <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_LOW_TEMP, RegulationTaskData.parameters.CWU_lo_temp, 0, 0);
 8002454:	f995 2080 	ldrsb.w	r2, [r5, #128]	; 0x80
 8002458:	9400      	str	r4, [sp, #0]
 800245a:	4623      	mov	r3, r4
 800245c:	210c      	movs	r1, #12
 800245e:	4630      	mov	r0, r6
 8002460:	f7ff ff76 	bl	8002350 <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_HEATER_POWER, (int32_t)RegulationTaskData.parameters.CWU_heater_power, 0, 0);
 8002464:	f8d5 206d 	ldr.w	r2, [r5, #109]	; 0x6d
 8002468:	9400      	str	r4, [sp, #0]
 800246a:	4623      	mov	r3, r4
 800246c:	ee07 2a90 	vmov	s15, r2
 8002470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002474:	ee17 2a90 	vmov	r2, s15
 8002478:	210d      	movs	r1, #13
 800247a:	4630      	mov	r0, r6
 800247c:	f7ff ff68 	bl	8002350 <nextion_SendData>
	nextion_SendData(uart, NEX_ACC_COEFF, RegulationTaskData.parameters.acumulated_power_coeff, 0, 0);
 8002480:	f995 207b 	ldrsb.w	r2, [r5, #123]	; 0x7b
 8002484:	9400      	str	r4, [sp, #0]
 8002486:	4623      	mov	r3, r4
 8002488:	210e      	movs	r1, #14
 800248a:	4630      	mov	r0, r6
 800248c:	f7ff ff60 	bl	8002350 <nextion_SendData>
	nextion_SendData(uart, NEX_HEATER_COEFF, RegulationTaskData.parameters.heater_power_coeff, 0, 0);
 8002490:	f995 207c 	ldrsb.w	r2, [r5, #124]	; 0x7c
 8002494:	9400      	str	r4, [sp, #0]
 8002496:	4623      	mov	r3, r4
 8002498:	210f      	movs	r1, #15
 800249a:	4630      	mov	r0, r6
 800249c:	f7ff ff58 	bl	8002350 <nextion_SendData>
}
 80024a0:	b002      	add	sp, #8
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
 80024a4:	20002c54 	.word	0x20002c54

080024a8 <nextion_UpdateTime>:
static void nextion_UpdateTime(UART_HandleTypeDef* uart){
 80024a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	4605      	mov	r5, r0
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80024b0:	4f23      	ldr	r7, [pc, #140]	; (8002540 <nextion_UpdateTime+0x98>)
 80024b2:	4c24      	ldr	r4, [pc, #144]	; (8002544 <nextion_UpdateTime+0x9c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	4639      	mov	r1, r7
 80024b8:	4620      	mov	r0, r4
 80024ba:	f004 fcf9 	bl	8006eb0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 80024be:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800254c <nextion_UpdateTime+0xa4>
 80024c2:	2200      	movs	r2, #0
 80024c4:	4641      	mov	r1, r8
 80024c6:	4620      	mov	r0, r4
 80024c8:	f004 fd1d 	bl	8006f06 <HAL_RTC_GetDate>
	current_command = NEX_YEAR;
 80024cc:	4e1e      	ldr	r6, [pc, #120]	; (8002548 <nextion_UpdateTime+0xa0>)
 80024ce:	2102      	movs	r1, #2
 80024d0:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_YEAR, currDate.Year + 2000, 0, 0);
 80024d2:	f898 2003 	ldrb.w	r2, [r8, #3]
 80024d6:	2400      	movs	r4, #0
 80024d8:	9400      	str	r4, [sp, #0]
 80024da:	4623      	mov	r3, r4
 80024dc:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80024e0:	4628      	mov	r0, r5
 80024e2:	f7ff ff35 	bl	8002350 <nextion_SendData>
	current_command = NEX_MONTH;
 80024e6:	2103      	movs	r1, #3
 80024e8:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_MONTH, currDate.Month, 0, 0);
 80024ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 80024ee:	9400      	str	r4, [sp, #0]
 80024f0:	4623      	mov	r3, r4
 80024f2:	4628      	mov	r0, r5
 80024f4:	f7ff ff2c 	bl	8002350 <nextion_SendData>
	current_command = NEX_DAY;
 80024f8:	2104      	movs	r1, #4
 80024fa:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_DAY, currDate.Date, 0, 0);
 80024fc:	f898 2002 	ldrb.w	r2, [r8, #2]
 8002500:	9400      	str	r4, [sp, #0]
 8002502:	4623      	mov	r3, r4
 8002504:	4628      	mov	r0, r5
 8002506:	f7ff ff23 	bl	8002350 <nextion_SendData>
	current_command = NEX_HOUR;
 800250a:	2105      	movs	r1, #5
 800250c:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_HOUR, currTime.Hours, 0, 0);
 800250e:	783a      	ldrb	r2, [r7, #0]
 8002510:	9400      	str	r4, [sp, #0]
 8002512:	4623      	mov	r3, r4
 8002514:	4628      	mov	r0, r5
 8002516:	f7ff ff1b 	bl	8002350 <nextion_SendData>
	current_command = NEX_MINUTE;
 800251a:	2106      	movs	r1, #6
 800251c:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_MINUTE, currTime.Minutes, 0, 0);
 800251e:	787a      	ldrb	r2, [r7, #1]
 8002520:	9400      	str	r4, [sp, #0]
 8002522:	4623      	mov	r3, r4
 8002524:	4628      	mov	r0, r5
 8002526:	f7ff ff13 	bl	8002350 <nextion_SendData>
	current_command = NEX_SECONDS;
 800252a:	2107      	movs	r1, #7
 800252c:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_SECONDS, currTime.Seconds, 0, 0);
 800252e:	78ba      	ldrb	r2, [r7, #2]
 8002530:	9400      	str	r4, [sp, #0]
 8002532:	4623      	mov	r3, r4
 8002534:	4628      	mov	r0, r5
 8002536:	f7ff ff0b 	bl	8002350 <nextion_SendData>
}
 800253a:	b002      	add	sp, #8
 800253c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002540:	20002c40 	.word	0x20002c40
 8002544:	20003120 	.word	0x20003120
 8002548:	20002b80 	.word	0x20002b80
 800254c:	20002ce4 	.word	0x20002ce4

08002550 <NextionBig_DataRcv>:
		}
	}
  /* USER CODE END UpdateLCD */
}

void NextionBig_DataRcv (void){
 8002550:	b530      	push	{r4, r5, lr}
 8002552:	b083      	sub	sp, #12
	uint8_t stopbyte = 0;
 8002554:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 8002556:	e062      	b.n	800261e <NextionBig_DataRcv+0xce>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
		start = nextion_big_comm.UartBufferHead;
		if(len > 3){
			if(len > 9){
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
					memcpy(&number, &nextion_big_comm.UART_Buffer[start], 4);
 8002558:	f102 0320 	add.w	r3, r2, #32
 800255c:	4d3d      	ldr	r5, [pc, #244]	; (8002654 <NextionBig_DataRcv+0x104>)
 800255e:	442b      	add	r3, r5
 8002560:	f8d3 0002 	ldr.w	r0, [r3, #2]
					memcpy(&value, &nextion_big_comm.UART_Buffer[start + 5], 4);
 8002564:	3225      	adds	r2, #37	; 0x25
 8002566:	442a      	add	r2, r5
 8002568:	f8d2 1002 	ldr.w	r1, [r2, #2]
					nextion_big.param = number;
 800256c:	4b3a      	ldr	r3, [pc, #232]	; (8002658 <NextionBig_DataRcv+0x108>)
 800256e:	6058      	str	r0, [r3, #4]
					memcpy(&nextion_big.value, &value, 4);
 8002570:	6099      	str	r1, [r3, #8]
					Config_ChangeValue(number, value);
 8002572:	f7fe fc87 	bl	8000e84 <Config_ChangeValue>
					nextion_big_comm.UartBufferHead += 10;
 8002576:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800257a:	330a      	adds	r3, #10
 800257c:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
					xTaskNotifyFromISR(DiplaysHandle, 1, eSetValueWithOverwrite, NULL);
 8002580:	4b36      	ldr	r3, [pc, #216]	; (800265c <NextionBig_DataRcv+0x10c>)
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	2300      	movs	r3, #0
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	2203      	movs	r2, #3
 800258a:	2101      	movs	r1, #1
 800258c:	f007 fbd0 	bl	8009d30 <xTaskGenericNotifyFromISR>
 8002590:	e03e      	b.n	8002610 <NextionBig_DataRcv+0xc0>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 8002592:	3301      	adds	r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	4610      	mov	r0, r2
 8002598:	1d51      	adds	r1, r2, #5
 800259a:	428b      	cmp	r3, r1
 800259c:	da0a      	bge.n	80025b4 <NextionBig_DataRcv+0x64>
					if(nextion_big_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 800259e:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 80025a2:	492c      	ldr	r1, [pc, #176]	; (8002654 <NextionBig_DataRcv+0x104>)
 80025a4:	4401      	add	r1, r0
 80025a6:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80025aa:	29ff      	cmp	r1, #255	; 0xff
 80025ac:	d1f1      	bne.n	8002592 <NextionBig_DataRcv+0x42>
						stopbyte ++;
 80025ae:	3401      	adds	r4, #1
 80025b0:	b2e4      	uxtb	r4, r4
 80025b2:	e7ee      	b.n	8002592 <NextionBig_DataRcv+0x42>
					}
				}
				if(stopbyte == 3){
 80025b4:	2c03      	cmp	r4, #3
 80025b6:	d006      	beq.n	80025c6 <NextionBig_DataRcv+0x76>
							y = 4;
							break;
					}
					nextion_big_comm.UartBufferHead += y;
				}else{
					nextion_big_comm.UartBufferHead ++;
 80025b8:	4a26      	ldr	r2, [pc, #152]	; (8002654 <NextionBig_DataRcv+0x104>)
 80025ba:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 80025be:	3301      	adds	r3, #1
 80025c0:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 80025c4:	e024      	b.n	8002610 <NextionBig_DataRcv+0xc0>
					switch(nextion_big_comm.UART_Buffer[start]){
 80025c6:	4b23      	ldr	r3, [pc, #140]	; (8002654 <NextionBig_DataRcv+0x104>)
 80025c8:	4413      	add	r3, r2
 80025ca:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80025ce:	2b1a      	cmp	r3, #26
 80025d0:	d011      	beq.n	80025f6 <NextionBig_DataRcv+0xa6>
 80025d2:	2b66      	cmp	r3, #102	; 0x66
 80025d4:	d116      	bne.n	8002604 <NextionBig_DataRcv+0xb4>
							nextion_big.display = nextion_big_comm.UART_Buffer[start + 1];
 80025d6:	3001      	adds	r0, #1
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <NextionBig_DataRcv+0x104>)
 80025da:	4418      	add	r0, r3
 80025dc:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 80025e0:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <NextionBig_DataRcv+0x108>)
 80025e2:	701a      	strb	r2, [r3, #0]
							y = 5;
 80025e4:	2305      	movs	r3, #5
					nextion_big_comm.UartBufferHead += y;
 80025e6:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <NextionBig_DataRcv+0x104>)
 80025e8:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 80025ec:	440b      	add	r3, r1
 80025ee:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 80025f2:	2400      	movs	r4, #0
 80025f4:	e00c      	b.n	8002610 <NextionBig_DataRcv+0xc0>
							command_correct[current_command] = 1;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <NextionBig_DataRcv+0x110>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	4a1a      	ldr	r2, [pc, #104]	; (8002664 <NextionBig_DataRcv+0x114>)
 80025fc:	2101      	movs	r1, #1
 80025fe:	54d1      	strb	r1, [r2, r3]
							y = 4;
 8002600:	2304      	movs	r3, #4
							break;
 8002602:	e7f0      	b.n	80025e6 <NextionBig_DataRcv+0x96>
							y = 4;
 8002604:	2304      	movs	r3, #4
 8002606:	e7ee      	b.n	80025e6 <NextionBig_DataRcv+0x96>
				}
			}

		}else{
			//if(nextion_big_comm.UART_Buffer[start] == 0 || nextion_big_comm.UART_Buffer[start] == 255){
				nextion_big_comm.UartBufferHead++;
 8002608:	3201      	adds	r2, #1
 800260a:	4b12      	ldr	r3, [pc, #72]	; (8002654 <NextionBig_DataRcv+0x104>)
 800260c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_big_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 8002610:	4a10      	ldr	r2, [pc, #64]	; (8002654 <NextionBig_DataRcv+0x104>)
 8002612:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8002616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800261a:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 800261e:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <NextionBig_DataRcv+0x104>)
 8002620:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 8002624:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 8002628:	4291      	cmp	r1, r2
 800262a:	d011      	beq.n	8002650 <NextionBig_DataRcv+0x100>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 800262c:	b2d3      	uxtb	r3, r2
 800262e:	1ac9      	subs	r1, r1, r3
 8002630:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 8002634:	2903      	cmp	r1, #3
 8002636:	d9e7      	bls.n	8002608 <NextionBig_DataRcv+0xb8>
			if(len > 9){
 8002638:	2909      	cmp	r1, #9
 800263a:	d906      	bls.n	800264a <NextionBig_DataRcv+0xfa>
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
 800263c:	1d10      	adds	r0, r2, #4
 800263e:	4905      	ldr	r1, [pc, #20]	; (8002654 <NextionBig_DataRcv+0x104>)
 8002640:	4401      	add	r1, r0
 8002642:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8002646:	290a      	cmp	r1, #10
 8002648:	d086      	beq.n	8002558 <NextionBig_DataRcv+0x8>
				for(i = start + 1; i < (start + 5); i++){
 800264a:	3301      	adds	r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e7a2      	b.n	8002596 <NextionBig_DataRcv+0x46>
	}
}
 8002650:	b003      	add	sp, #12
 8002652:	bd30      	pop	{r4, r5, pc}
 8002654:	20002ad0 	.word	0x20002ad0
 8002658:	20002aa0 	.word	0x20002aa0
 800265c:	20003298 	.word	0x20003298
 8002660:	20002b80 	.word	0x20002b80
 8002664:	20002aac 	.word	0x20002aac

08002668 <NextionSmall_DataRcv>:

void NextionSmall_DataRcv (void){
 8002668:	b530      	push	{r4, r5, lr}
 800266a:	b083      	sub	sp, #12
	uint8_t stopbyte = 0;
 800266c:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 800266e:	e078      	b.n	8002762 <NextionSmall_DataRcv+0xfa>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
		start = nextion_small_comm.UartBufferHead;
		if(len > 3){
			if(len > 9){
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
					memcpy(&number, &nextion_small_comm.UART_Buffer[start], 4);
 8002670:	f102 0320 	add.w	r3, r2, #32
 8002674:	4d49      	ldr	r5, [pc, #292]	; (800279c <NextionSmall_DataRcv+0x134>)
 8002676:	442b      	add	r3, r5
 8002678:	f8d3 0002 	ldr.w	r0, [r3, #2]
					memcpy(&value, &nextion_small_comm.UART_Buffer[start + 5], 4);
 800267c:	3225      	adds	r2, #37	; 0x25
 800267e:	442a      	add	r2, r5
 8002680:	f8d2 1002 	ldr.w	r1, [r2, #2]
					nextion_small.param = number;
 8002684:	4b46      	ldr	r3, [pc, #280]	; (80027a0 <NextionSmall_DataRcv+0x138>)
 8002686:	6058      	str	r0, [r3, #4]
					memcpy(&nextion_small.value, &value, 4);
 8002688:	6099      	str	r1, [r3, #8]
					Config_ChangeValue(number, value);
 800268a:	f7fe fbfb 	bl	8000e84 <Config_ChangeValue>
					nextion_small_comm.UartBufferHead += 10;
 800268e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8002692:	330a      	adds	r3, #10
 8002694:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
					xTaskNotifyFromISR(DiplaysHandle, 2, eSetValueWithOverwrite, NULL);
 8002698:	4b42      	ldr	r3, [pc, #264]	; (80027a4 <NextionSmall_DataRcv+0x13c>)
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	2300      	movs	r3, #0
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	2203      	movs	r2, #3
 80026a2:	2102      	movs	r1, #2
 80026a4:	f007 fb44 	bl	8009d30 <xTaskGenericNotifyFromISR>
 80026a8:	e054      	b.n	8002754 <NextionSmall_DataRcv+0xec>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 80026aa:	3301      	adds	r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	4610      	mov	r0, r2
 80026b0:	1d51      	adds	r1, r2, #5
 80026b2:	428b      	cmp	r3, r1
 80026b4:	da0a      	bge.n	80026cc <NextionSmall_DataRcv+0x64>
					if(nextion_small_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 80026b6:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 80026ba:	4938      	ldr	r1, [pc, #224]	; (800279c <NextionSmall_DataRcv+0x134>)
 80026bc:	4401      	add	r1, r0
 80026be:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80026c2:	29ff      	cmp	r1, #255	; 0xff
 80026c4:	d1f1      	bne.n	80026aa <NextionSmall_DataRcv+0x42>
						stopbyte ++;
 80026c6:	3401      	adds	r4, #1
 80026c8:	b2e4      	uxtb	r4, r4
 80026ca:	e7ee      	b.n	80026aa <NextionSmall_DataRcv+0x42>
					}
				}
				if(stopbyte == 3){
 80026cc:	2c03      	cmp	r4, #3
 80026ce:	d006      	beq.n	80026de <NextionSmall_DataRcv+0x76>
							y = 4;
							break;
					}
					nextion_small_comm.UartBufferHead += y;
				}else{
					nextion_small_comm.UartBufferHead ++;
 80026d0:	4a32      	ldr	r2, [pc, #200]	; (800279c <NextionSmall_DataRcv+0x134>)
 80026d2:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 80026d6:	3301      	adds	r3, #1
 80026d8:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 80026dc:	e03a      	b.n	8002754 <NextionSmall_DataRcv+0xec>
					switch(nextion_small_comm.UART_Buffer[start]){
 80026de:	4b2f      	ldr	r3, [pc, #188]	; (800279c <NextionSmall_DataRcv+0x134>)
 80026e0:	4413      	add	r3, r2
 80026e2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80026e6:	2b86      	cmp	r3, #134	; 0x86
 80026e8:	d024      	beq.n	8002734 <NextionSmall_DataRcv+0xcc>
 80026ea:	d813      	bhi.n	8002714 <NextionSmall_DataRcv+0xac>
 80026ec:	2b1a      	cmp	r3, #26
 80026ee:	d01a      	beq.n	8002726 <NextionSmall_DataRcv+0xbe>
 80026f0:	2b66      	cmp	r3, #102	; 0x66
 80026f2:	d129      	bne.n	8002748 <NextionSmall_DataRcv+0xe0>
							nextion_small.display = nextion_small_comm.UART_Buffer[start + 1];
 80026f4:	3001      	adds	r0, #1
 80026f6:	4b29      	ldr	r3, [pc, #164]	; (800279c <NextionSmall_DataRcv+0x134>)
 80026f8:	4418      	add	r0, r3
 80026fa:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 80026fe:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <NextionSmall_DataRcv+0x138>)
 8002700:	701a      	strb	r2, [r3, #0]
							y = 5;
 8002702:	2305      	movs	r3, #5
					nextion_small_comm.UartBufferHead += y;
 8002704:	4a25      	ldr	r2, [pc, #148]	; (800279c <NextionSmall_DataRcv+0x134>)
 8002706:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 800270a:	440b      	add	r3, r1
 800270c:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 8002710:	2400      	movs	r4, #0
 8002712:	e01f      	b.n	8002754 <NextionSmall_DataRcv+0xec>
					switch(nextion_small_comm.UART_Buffer[start]){
 8002714:	2b87      	cmp	r3, #135	; 0x87
 8002716:	d012      	beq.n	800273e <NextionSmall_DataRcv+0xd6>
 8002718:	2b88      	cmp	r3, #136	; 0x88
 800271a:	d115      	bne.n	8002748 <NextionSmall_DataRcv+0xe0>
							nextion_small.ready = 1;
 800271c:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <NextionSmall_DataRcv+0x138>)
 800271e:	2201      	movs	r2, #1
 8002720:	70da      	strb	r2, [r3, #3]
							y = 4;
 8002722:	2304      	movs	r3, #4
							break;
 8002724:	e7ee      	b.n	8002704 <NextionSmall_DataRcv+0x9c>
							command_correct[current_command] = 1;
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <NextionSmall_DataRcv+0x140>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	4a20      	ldr	r2, [pc, #128]	; (80027ac <NextionSmall_DataRcv+0x144>)
 800272c:	2101      	movs	r1, #1
 800272e:	54d1      	strb	r1, [r2, r3]
							y = 4;
 8002730:	2304      	movs	r3, #4
							break;
 8002732:	e7e7      	b.n	8002704 <NextionSmall_DataRcv+0x9c>
							nextion_small.sleep = 1;
 8002734:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <NextionSmall_DataRcv+0x138>)
 8002736:	2201      	movs	r2, #1
 8002738:	709a      	strb	r2, [r3, #2]
							y = 4;
 800273a:	2304      	movs	r3, #4
							break;
 800273c:	e7e2      	b.n	8002704 <NextionSmall_DataRcv+0x9c>
							nextion_small.sleep = 0;
 800273e:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <NextionSmall_DataRcv+0x138>)
 8002740:	2200      	movs	r2, #0
 8002742:	709a      	strb	r2, [r3, #2]
							y = 4;
 8002744:	2304      	movs	r3, #4
							break;
 8002746:	e7dd      	b.n	8002704 <NextionSmall_DataRcv+0x9c>
							y = 4;
 8002748:	2304      	movs	r3, #4
 800274a:	e7db      	b.n	8002704 <NextionSmall_DataRcv+0x9c>
				}
			}

		}else{
			//if(nextion_small_comm.UART_Buffer[start] == 0 || nextion_small_comm.UART_Buffer[start] == 255){
				nextion_small_comm.UartBufferHead++;
 800274c:	3201      	adds	r2, #1
 800274e:	4b13      	ldr	r3, [pc, #76]	; (800279c <NextionSmall_DataRcv+0x134>)
 8002750:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_small_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 8002754:	4a11      	ldr	r2, [pc, #68]	; (800279c <NextionSmall_DataRcv+0x134>)
 8002756:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 800275a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800275e:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <NextionSmall_DataRcv+0x134>)
 8002764:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 8002768:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 800276c:	4291      	cmp	r1, r2
 800276e:	d012      	beq.n	8002796 <NextionSmall_DataRcv+0x12e>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 8002770:	b2d3      	uxtb	r3, r2
 8002772:	1ac9      	subs	r1, r1, r3
 8002774:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 8002778:	2903      	cmp	r1, #3
 800277a:	d9e7      	bls.n	800274c <NextionSmall_DataRcv+0xe4>
			if(len > 9){
 800277c:	2909      	cmp	r1, #9
 800277e:	d907      	bls.n	8002790 <NextionSmall_DataRcv+0x128>
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
 8002780:	1d10      	adds	r0, r2, #4
 8002782:	4906      	ldr	r1, [pc, #24]	; (800279c <NextionSmall_DataRcv+0x134>)
 8002784:	4401      	add	r1, r0
 8002786:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 800278a:	290a      	cmp	r1, #10
 800278c:	f43f af70 	beq.w	8002670 <NextionSmall_DataRcv+0x8>
				for(i = start + 1; i < (start + 5); i++){
 8002790:	3301      	adds	r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	e78b      	b.n	80026ae <NextionSmall_DataRcv+0x46>
	}
}
 8002796:	b003      	add	sp, #12
 8002798:	bd30      	pop	{r4, r5, pc}
 800279a:	bf00      	nop
 800279c:	20002b84 	.word	0x20002b84
 80027a0:	20002c34 	.word	0x20002c34
 80027a4:	20003298 	.word	0x20003298
 80027a8:	20002b80 	.word	0x20002b80
 80027ac:	20002aac 	.word	0x20002aac

080027b0 <DisplayTask>:
{
 80027b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b4:	ed2d 8b02 	vpush	{d8}
 80027b8:	b089      	sub	sp, #36	; 0x24
	nextion_small.display = 30;
 80027ba:	4a84      	ldr	r2, [pc, #528]	; (80029cc <DisplayTask+0x21c>)
 80027bc:	231e      	movs	r3, #30
 80027be:	7013      	strb	r3, [r2, #0]
	nextion_small.last_display = 30;
 80027c0:	7053      	strb	r3, [r2, #1]
	nextion_big.display = 30;
 80027c2:	4d83      	ldr	r5, [pc, #524]	; (80029d0 <DisplayTask+0x220>)
 80027c4:	702b      	strb	r3, [r5, #0]
	nextion_big.last_display = 30;
 80027c6:	706b      	strb	r3, [r5, #1]
	UARTDMA_Init(&nextion_small_comm, NEXTION_SMALL_UART);
 80027c8:	4e82      	ldr	r6, [pc, #520]	; (80029d4 <DisplayTask+0x224>)
 80027ca:	4c83      	ldr	r4, [pc, #524]	; (80029d8 <DisplayTask+0x228>)
 80027cc:	4631      	mov	r1, r6
 80027ce:	4620      	mov	r0, r4
 80027d0:	f000 ff8d 	bl	80036ee <UARTDMA_Init>
	UARTDMA_Init(&nextion_big_comm, NEXTION_BIG_UART);
 80027d4:	4f81      	ldr	r7, [pc, #516]	; (80029dc <DisplayTask+0x22c>)
 80027d6:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8002a00 <DisplayTask+0x250>
 80027da:	4639      	mov	r1, r7
 80027dc:	4640      	mov	r0, r8
 80027de:	f000 ff86 	bl	80036ee <UARTDMA_Init>
	nextion_big_comm.callback = NextionBig_DataRcv;
 80027e2:	4b7f      	ldr	r3, [pc, #508]	; (80029e0 <DisplayTask+0x230>)
 80027e4:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
	nextion_small_comm.callback = NextionSmall_DataRcv;
 80027e8:	4b7e      	ldr	r3, [pc, #504]	; (80029e4 <DisplayTask+0x234>)
 80027ea:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	Config_GetEthernetConfig(&configuration);
 80027ee:	a803      	add	r0, sp, #12
 80027f0:	f7fe fbba 	bl	8000f68 <Config_GetEthernetConfig>
	RegulationTask_GetData(&RegulationTaskData);
 80027f4:	487c      	ldr	r0, [pc, #496]	; (80029e8 <DisplayTask+0x238>)
 80027f6:	f000 ff13 	bl	8003620 <RegulationTask_GetData>
	vTaskDelay(1000);
 80027fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027fe:	f006 ff87 	bl	8009710 <vTaskDelay>
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8002802:	4c7a      	ldr	r4, [pc, #488]	; (80029ec <DisplayTask+0x23c>)
 8002804:	2200      	movs	r2, #0
 8002806:	497a      	ldr	r1, [pc, #488]	; (80029f0 <DisplayTask+0x240>)
 8002808:	4620      	mov	r0, r4
 800280a:	f004 fb51 	bl	8006eb0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 800280e:	2200      	movs	r2, #0
 8002810:	4978      	ldr	r1, [pc, #480]	; (80029f4 <DisplayTask+0x244>)
 8002812:	4620      	mov	r0, r4
 8002814:	f004 fb77 	bl	8006f06 <HAL_RTC_GetDate>
	nextion_SendData(NEXTION_SMALL_UART, NEX_WAKE, 0, 0, 0);
 8002818:	2400      	movs	r4, #0
 800281a:	9400      	str	r4, [sp, #0]
 800281c:	4623      	mov	r3, r4
 800281e:	4622      	mov	r2, r4
 8002820:	4621      	mov	r1, r4
 8002822:	4630      	mov	r0, r6
 8002824:	f7ff fd94 	bl	8002350 <nextion_SendData>
	vTaskDelay(1);
 8002828:	2001      	movs	r0, #1
 800282a:	f006 ff71 	bl	8009710 <vTaskDelay>
	nextion_SendData(NEXTION_SMALL_UART, NEX_SENDME, 0, 0, 0);
 800282e:	9400      	str	r4, [sp, #0]
 8002830:	4623      	mov	r3, r4
 8002832:	4622      	mov	r2, r4
 8002834:	2101      	movs	r1, #1
 8002836:	4630      	mov	r0, r6
 8002838:	f7ff fd8a 	bl	8002350 <nextion_SendData>
	vTaskDelay(1);
 800283c:	2001      	movs	r0, #1
 800283e:	f006 ff67 	bl	8009710 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002842:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002846:	2001      	movs	r0, #1
 8002848:	f007 f9ea 	bl	8009c20 <ulTaskNotifyTake>
	nextion_SendData(NEXTION_BIG_UART, NEX_SENDME, 0, 0, 0);
 800284c:	9400      	str	r4, [sp, #0]
 800284e:	4623      	mov	r3, r4
 8002850:	4622      	mov	r2, r4
 8002852:	2101      	movs	r1, #1
 8002854:	4638      	mov	r0, r7
 8002856:	f7ff fd7b 	bl	8002350 <nextion_SendData>
	vTaskDelay(1);
 800285a:	2001      	movs	r0, #1
 800285c:	f006 ff58 	bl	8009710 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002860:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002864:	2001      	movs	r0, #1
 8002866:	f007 f9db 	bl	8009c20 <ulTaskNotifyTake>
	if(nextion_big.display != 30){
 800286a:	782b      	ldrb	r3, [r5, #0]
 800286c:	2b1e      	cmp	r3, #30
 800286e:	d005      	beq.n	800287c <DisplayTask+0xcc>
		nextion_UpdateTime(NEXTION_BIG_UART);
 8002870:	4638      	mov	r0, r7
 8002872:	f7ff fe19 	bl	80024a8 <nextion_UpdateTime>
		nextion_SendConfig(NEXTION_BIG_UART);
 8002876:	4638      	mov	r0, r7
 8002878:	f7ff fdc2 	bl	8002400 <nextion_SendConfig>
	if(nextion_small.display != 30){
 800287c:	4b53      	ldr	r3, [pc, #332]	; (80029cc <DisplayTask+0x21c>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b1e      	cmp	r3, #30
 8002882:	d002      	beq.n	800288a <DisplayTask+0xda>
		nextion_SendConfig(NEXTION_SMALL_UART);
 8002884:	4853      	ldr	r0, [pc, #332]	; (80029d4 <DisplayTask+0x224>)
 8002886:	f7ff fdbb 	bl	8002400 <nextion_SendConfig>
{
 800288a:	f04f 0900 	mov.w	r9, #0
 800288e:	46ca      	mov	sl, r9
 8002890:	e02a      	b.n	80028e8 <DisplayTask+0x138>
				nextion_UpdateTime(NEXTION_BIG_UART);
 8002892:	4852      	ldr	r0, [pc, #328]	; (80029dc <DisplayTask+0x22c>)
 8002894:	f7ff fe08 	bl	80024a8 <nextion_UpdateTime>
				if(nextion_small.display != 30){
 8002898:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <DisplayTask+0x21c>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b1e      	cmp	r3, #30
 800289e:	d031      	beq.n	8002904 <DisplayTask+0x154>
					nextion_SendData(NEXTION_SMALL_UART, NEX_SETTINGS_LOCK, 0, 0, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	9200      	str	r2, [sp, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	2121      	movs	r1, #33	; 0x21
 80028a8:	484a      	ldr	r0, [pc, #296]	; (80029d4 <DisplayTask+0x224>)
 80028aa:	f7ff fd51 	bl	8002350 <nextion_SendData>
 80028ae:	e029      	b.n	8002904 <DisplayTask+0x154>
					nextion_SendData(NEXTION_SMALL_UART, NEX_SETTINGS_UNLOCK, 0, 0, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	9200      	str	r2, [sp, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	2120      	movs	r1, #32
 80028b8:	4846      	ldr	r0, [pc, #280]	; (80029d4 <DisplayTask+0x224>)
 80028ba:	f7ff fd49 	bl	8002350 <nextion_SendData>
 80028be:	e021      	b.n	8002904 <DisplayTask+0x154>
				if(nextion_big.display != 30){
 80028c0:	4b43      	ldr	r3, [pc, #268]	; (80029d0 <DisplayTask+0x220>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b1e      	cmp	r3, #30
 80028c6:	d133      	bne.n	8002930 <DisplayTask+0x180>
		if(nextion_big.display == 1){
 80028c8:	4b41      	ldr	r3, [pc, #260]	; (80029d0 <DisplayTask+0x220>)
 80028ca:	781d      	ldrb	r5, [r3, #0]
 80028cc:	2d01      	cmp	r5, #1
 80028ce:	d037      	beq.n	8002940 <DisplayTask+0x190>
		vTaskDelay(1000);
 80028d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028d4:	f006 ff1c 	bl	8009710 <vTaskDelay>
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 80028d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028dc:	2001      	movs	r0, #1
 80028de:	f007 f99f 	bl	8009c20 <ulTaskNotifyTake>
		if(ulNotificationValue > 0){
 80028e2:	2800      	cmp	r0, #0
 80028e4:	f040 812c 	bne.w	8002b40 <DisplayTask+0x390>
		RegulationTask_GetData(&RegulationTaskData);
 80028e8:	483f      	ldr	r0, [pc, #252]	; (80029e8 <DisplayTask+0x238>)
 80028ea:	f000 fe99 	bl	8003620 <RegulationTask_GetData>
		if(nextion_big.display != nextion_big.last_display){
 80028ee:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <DisplayTask+0x220>)
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d008      	beq.n	800290a <DisplayTask+0x15a>
			if(nextion_big.display == 2){
 80028f8:	2a02      	cmp	r2, #2
 80028fa:	d0ca      	beq.n	8002892 <DisplayTask+0xe2>
				if(nextion_small.display != 30){
 80028fc:	4b33      	ldr	r3, [pc, #204]	; (80029cc <DisplayTask+0x21c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b1e      	cmp	r3, #30
 8002902:	d1d5      	bne.n	80028b0 <DisplayTask+0x100>
			nextion_big.last_display = nextion_big.display;
 8002904:	4b32      	ldr	r3, [pc, #200]	; (80029d0 <DisplayTask+0x220>)
 8002906:	781a      	ldrb	r2, [r3, #0]
 8002908:	705a      	strb	r2, [r3, #1]
		if(nextion_small.display != nextion_small.last_display){
 800290a:	4b30      	ldr	r3, [pc, #192]	; (80029cc <DisplayTask+0x21c>)
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	785b      	ldrb	r3, [r3, #1]
 8002910:	429a      	cmp	r2, r3
 8002912:	d0d9      	beq.n	80028c8 <DisplayTask+0x118>
			if(nextion_small.display == 1){
 8002914:	2a01      	cmp	r2, #1
 8002916:	d0d3      	beq.n	80028c0 <DisplayTask+0x110>
				if(nextion_big.display != 30){
 8002918:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <DisplayTask+0x220>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b1e      	cmp	r3, #30
 800291e:	d0d3      	beq.n	80028c8 <DisplayTask+0x118>
					nextion_SendData(NEXTION_BIG_UART, NEX_SETTINGS_UNLOCK, 0, 0, 0);
 8002920:	2200      	movs	r2, #0
 8002922:	9200      	str	r2, [sp, #0]
 8002924:	4613      	mov	r3, r2
 8002926:	2120      	movs	r1, #32
 8002928:	482c      	ldr	r0, [pc, #176]	; (80029dc <DisplayTask+0x22c>)
 800292a:	f7ff fd11 	bl	8002350 <nextion_SendData>
 800292e:	e7cb      	b.n	80028c8 <DisplayTask+0x118>
					nextion_SendData(NEXTION_BIG_UART, NEX_SETTINGS_LOCK, 0, 0, 0);
 8002930:	2200      	movs	r2, #0
 8002932:	9200      	str	r2, [sp, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	2121      	movs	r1, #33	; 0x21
 8002938:	4828      	ldr	r0, [pc, #160]	; (80029dc <DisplayTask+0x22c>)
 800293a:	f7ff fd09 	bl	8002350 <nextion_SendData>
 800293e:	e7c3      	b.n	80028c8 <DisplayTask+0x118>
			nextion_SendData(NEXTION_BIG_UART, NEX_COUNTER_PRESENCE, RegulationTaskData.counter.counter_present, 0, 0);
 8002940:	4e29      	ldr	r6, [pc, #164]	; (80029e8 <DisplayTask+0x238>)
 8002942:	7832      	ldrb	r2, [r6, #0]
 8002944:	4f25      	ldr	r7, [pc, #148]	; (80029dc <DisplayTask+0x22c>)
 8002946:	2400      	movs	r4, #0
 8002948:	9400      	str	r4, [sp, #0]
 800294a:	4623      	mov	r3, r4
 800294c:	2113      	movs	r1, #19
 800294e:	4638      	mov	r0, r7
 8002950:	f7ff fcfe 	bl	8002350 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_TSENS_PRESENCE, RegulationTaskData.counter.temperatures_present, 0, 0);
 8002954:	78b2      	ldrb	r2, [r6, #2]
 8002956:	9400      	str	r4, [sp, #0]
 8002958:	4623      	mov	r3, r4
 800295a:	2114      	movs	r1, #20
 800295c:	4638      	mov	r0, r7
 800295e:	f7ff fcf7 	bl	8002350 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_MAIN_SW, RegulationTaskData.ControlWord.MainSwitch_State, 0, 0);
 8002962:	f896 2068 	ldrb.w	r2, [r6, #104]	; 0x68
 8002966:	9400      	str	r4, [sp, #0]
 8002968:	4623      	mov	r3, r4
 800296a:	f002 0201 	and.w	r2, r2, #1
 800296e:	2115      	movs	r1, #21
 8002970:	4638      	mov	r0, r7
 8002972:	f7ff fced 	bl	8002350 <nextion_SendData>
			if(RegulationTaskData.ControlWord.CWUHeaterError || RegulationTaskData.IOsignals.signals.input4){
 8002976:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8002978:	4a1f      	ldr	r2, [pc, #124]	; (80029f8 <DisplayTask+0x248>)
 800297a:	421a      	tst	r2, r3
 800297c:	d106      	bne.n	800298c <DisplayTask+0x1dc>
			}else if(RegulationTaskData.ControlWord.CWUHeaterStateOut){
 800297e:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
 8002982:	f013 0f01 	tst.w	r3, #1
 8002986:	d015      	beq.n	80029b4 <DisplayTask+0x204>
				pic = 2;
 8002988:	2202      	movs	r2, #2
 800298a:	e000      	b.n	800298e <DisplayTask+0x1de>
				pic = 3;
 800298c:	2203      	movs	r2, #3
			nextion_SendData(NEXTION_BIG_UART, NEX_CWU_PIC, pic, 0, 0);
 800298e:	2300      	movs	r3, #0
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2116      	movs	r1, #22
 8002994:	4811      	ldr	r0, [pc, #68]	; (80029dc <DisplayTask+0x22c>)
 8002996:	f7ff fcdb 	bl	8002350 <nextion_SendData>
			if(RegulationTaskData.ControlWord.COHeaterError || RegulationTaskData.IOsignals.signals.input5){
 800299a:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <DisplayTask+0x238>)
 800299c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800299e:	4a17      	ldr	r2, [pc, #92]	; (80029fc <DisplayTask+0x24c>)
 80029a0:	421a      	tst	r2, r3
 80029a2:	d109      	bne.n	80029b8 <DisplayTask+0x208>
			}else if(RegulationTaskData.ControlWord.COHeaterStateOut){
 80029a4:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <DisplayTask+0x238>)
 80029a6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80029aa:	f013 0f01 	tst.w	r3, #1
 80029ae:	d004      	beq.n	80029ba <DisplayTask+0x20a>
				pic = 2;
 80029b0:	2502      	movs	r5, #2
 80029b2:	e002      	b.n	80029ba <DisplayTask+0x20a>
				pic = 1;
 80029b4:	462a      	mov	r2, r5
 80029b6:	e7ea      	b.n	800298e <DisplayTask+0x1de>
				pic = 3;
 80029b8:	2503      	movs	r5, #3
			nextion_SendData(NEXTION_BIG_UART, NEX_CO_PIC, pic, 0, 0);
 80029ba:	2400      	movs	r4, #0
 80029bc:	9400      	str	r4, [sp, #0]
 80029be:	4623      	mov	r3, r4
 80029c0:	462a      	mov	r2, r5
 80029c2:	2117      	movs	r1, #23
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <DisplayTask+0x22c>)
 80029c6:	f7ff fcc3 	bl	8002350 <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 80029ca:	e0b5      	b.n	8002b38 <DisplayTask+0x388>
 80029cc:	20002c34 	.word	0x20002c34
 80029d0:	20002aa0 	.word	0x20002aa0
 80029d4:	2000309c 	.word	0x2000309c
 80029d8:	20002b84 	.word	0x20002b84
 80029dc:	20003180 	.word	0x20003180
 80029e0:	08002551 	.word	0x08002551
 80029e4:	08002669 	.word	0x08002669
 80029e8:	20002c54 	.word	0x20002c54
 80029ec:	20003120 	.word	0x20003120
 80029f0:	20002c40 	.word	0x20002c40
 80029f4:	20002ce4 	.word	0x20002ce4
 80029f8:	10000001 	.word	0x10000001
 80029fc:	08000001 	.word	0x08000001
 8002a00:	20002ad0 	.word	0x20002ad0
				rest = (uint32_t)(RegulationTaskData.counter.voltages[i] * 10.0) % 10;
 8002a04:	4d59      	ldr	r5, [pc, #356]	; (8002b6c <DisplayTask+0x3bc>)
 8002a06:	f104 030a 	add.w	r3, r4, #10
 8002a0a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002a0e:	ed93 8a00 	vldr	s16, [r3]
 8002a12:	ee18 0a10 	vmov	r0, s16
 8002a16:	f7fd fd9f 	bl	8000558 <__aeabi_f2d>
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	4b54      	ldr	r3, [pc, #336]	; (8002b70 <DisplayTask+0x3c0>)
 8002a1e:	f7fd fdf3 	bl	8000608 <__aeabi_dmul>
 8002a22:	f7fe f803 	bl	8000a2c <__aeabi_d2uiz>
 8002a26:	f8df b160 	ldr.w	fp, [pc, #352]	; 8002b88 <DisplayTask+0x3d8>
 8002a2a:	fbab 2300 	umull	r2, r3, fp, r0
 8002a2e:	08db      	lsrs	r3, r3, #3
 8002a30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a34:	005a      	lsls	r2, r3, #1
 8002a36:	1a83      	subs	r3, r0, r2
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_VOLTAGE, i + 1, (uint32_t)RegulationTaskData.counter.voltages[i], rest);
 8002a38:	1c66      	adds	r6, r4, #1
 8002a3a:	4f4e      	ldr	r7, [pc, #312]	; (8002b74 <DisplayTask+0x3c4>)
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002a42:	ee17 3a90 	vmov	r3, s15
 8002a46:	4632      	mov	r2, r6
 8002a48:	2118      	movs	r1, #24
 8002a4a:	4638      	mov	r0, r7
 8002a4c:	f7ff fc80 	bl	8002350 <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.currents[i] * 100.0) % 100;
 8002a50:	f104 030c 	add.w	r3, r4, #12
 8002a54:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002a58:	ed93 8a01 	vldr	s16, [r3, #4]
 8002a5c:	ee18 0a10 	vmov	r0, s16
 8002a60:	f7fd fd7a 	bl	8000558 <__aeabi_f2d>
 8002a64:	2200      	movs	r2, #0
 8002a66:	4b44      	ldr	r3, [pc, #272]	; (8002b78 <DisplayTask+0x3c8>)
 8002a68:	f7fd fdce 	bl	8000608 <__aeabi_dmul>
 8002a6c:	f7fd ffde 	bl	8000a2c <__aeabi_d2uiz>
 8002a70:	4b42      	ldr	r3, [pc, #264]	; (8002b7c <DisplayTask+0x3cc>)
 8002a72:	fba3 2300 	umull	r2, r3, r3, r0
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2264      	movs	r2, #100	; 0x64
 8002a7a:	fb02 0313 	mls	r3, r2, r3, r0
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_CURRENT, i + 1, (uint32_t)RegulationTaskData.counter.currents[i], rest);
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002a84:	ee17 3a90 	vmov	r3, s15
 8002a88:	4632      	mov	r2, r6
 8002a8a:	2119      	movs	r1, #25
 8002a8c:	4638      	mov	r0, r7
 8002a8e:	f7ff fc5f 	bl	8002350 <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.powers[i] * 10.0) % 10;
 8002a92:	f104 0810 	add.w	r8, r4, #16
 8002a96:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 8002a9a:	ed98 8a00 	vldr	s16, [r8]
 8002a9e:	ee18 0a10 	vmov	r0, s16
 8002aa2:	f7fd fd59 	bl	8000558 <__aeabi_f2d>
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <DisplayTask+0x3c0>)
 8002aaa:	f7fd fdad 	bl	8000608 <__aeabi_dmul>
 8002aae:	f7fd ffbd 	bl	8000a2c <__aeabi_d2uiz>
 8002ab2:	fbab 3200 	umull	r3, r2, fp, r0
 8002ab6:	08d2      	lsrs	r2, r2, #3
 8002ab8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002abc:	0053      	lsls	r3, r2, #1
 8002abe:	1ac2      	subs	r2, r0, r3
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_POWER, i + 1, (uint32_t)RegulationTaskData.counter.powers[i], rest);
 8002ac0:	9200      	str	r2, [sp, #0]
 8002ac2:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002ac6:	ee17 3a90 	vmov	r3, s15
 8002aca:	4632      	mov	r2, r6
 8002acc:	211a      	movs	r1, #26
 8002ace:	4638      	mov	r0, r7
 8002ad0:	f7ff fc3e 	bl	8002350 <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.powers[i] / RegulationTaskData.parameters.net_max_power * 100.0);
 8002ad4:	edd8 7a00 	vldr	s15, [r8]
 8002ad8:	f8d5 0075 	ldr.w	r0, [r5, #117]	; 0x75
 8002adc:	ee07 0a10 	vmov	s14, r0
 8002ae0:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002ae4:	ee17 0a90 	vmov	r0, s15
 8002ae8:	f7fd fd36 	bl	8000558 <__aeabi_f2d>
 8002aec:	2200      	movs	r2, #0
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <DisplayTask+0x3c8>)
 8002af0:	f7fd fd8a 	bl	8000608 <__aeabi_dmul>
 8002af4:	f7fd ff9a 	bl	8000a2c <__aeabi_d2uiz>
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_PRG_BAR, i + 1, rest, 0);
 8002af8:	f04f 0800 	mov.w	r8, #0
 8002afc:	f8cd 8000 	str.w	r8, [sp]
 8002b00:	4603      	mov	r3, r0
 8002b02:	4632      	mov	r2, r6
 8002b04:	211b      	movs	r1, #27
 8002b06:	4638      	mov	r0, r7
 8002b08:	f7ff fc22 	bl	8002350 <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_CO_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CO_heater_PWM[i], 0);
 8002b0c:	1d23      	adds	r3, r4, #4
 8002b0e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002b12:	885b      	ldrh	r3, [r3, #2]
 8002b14:	f8cd 8000 	str.w	r8, [sp]
 8002b18:	4632      	mov	r2, r6
 8002b1a:	211c      	movs	r1, #28
 8002b1c:	4638      	mov	r0, r7
 8002b1e:	f7ff fc17 	bl	8002350 <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_CWU_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CWU_heater_PWM[i], 0);
 8002b22:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8002b26:	88a3      	ldrh	r3, [r4, #4]
 8002b28:	f8cd 8000 	str.w	r8, [sp]
 8002b2c:	4632      	mov	r2, r6
 8002b2e:	211d      	movs	r1, #29
 8002b30:	4638      	mov	r0, r7
 8002b32:	f7ff fc0d 	bl	8002350 <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 8002b36:	b2f4      	uxtb	r4, r6
 8002b38:	2c02      	cmp	r4, #2
 8002b3a:	f67f af63 	bls.w	8002a04 <DisplayTask+0x254>
 8002b3e:	e6c7      	b.n	80028d0 <DisplayTask+0x120>
			if(ulNotificationValue == 1){
 8002b40:	2801      	cmp	r0, #1
 8002b42:	d006      	beq.n	8002b52 <DisplayTask+0x3a2>
			}else if(ulNotificationValue == 2){
 8002b44:	2802      	cmp	r0, #2
 8002b46:	d00a      	beq.n	8002b5e <DisplayTask+0x3ae>
			Config_ChangeValue(param, (void*)valPtr);
 8002b48:	4649      	mov	r1, r9
 8002b4a:	4650      	mov	r0, sl
 8002b4c:	f7fe f99a 	bl	8000e84 <Config_ChangeValue>
 8002b50:	e6ca      	b.n	80028e8 <DisplayTask+0x138>
				param = nextion_big.param;
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <DisplayTask+0x3d0>)
 8002b54:	f8d3 a004 	ldr.w	sl, [r3, #4]
				valPtr = &nextion_big.value[0];
 8002b58:	f103 0908 	add.w	r9, r3, #8
 8002b5c:	e7f4      	b.n	8002b48 <DisplayTask+0x398>
				param = nextion_small.param;
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <DisplayTask+0x3d4>)
 8002b60:	f8d3 a004 	ldr.w	sl, [r3, #4]
				valPtr = &nextion_small.value[0];
 8002b64:	f103 0908 	add.w	r9, r3, #8
 8002b68:	e7ee      	b.n	8002b48 <DisplayTask+0x398>
 8002b6a:	bf00      	nop
 8002b6c:	20002c54 	.word	0x20002c54
 8002b70:	40240000 	.word	0x40240000
 8002b74:	20003180 	.word	0x20003180
 8002b78:	40590000 	.word	0x40590000
 8002b7c:	51eb851f 	.word	0x51eb851f
 8002b80:	20002aa0 	.word	0x20002aa0
 8002b84:	20002c34 	.word	0x20002c34
 8002b88:	cccccccd 	.word	0xcccccccd

08002b8c <W5500_WriteBuff>:

static void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
}

static void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8002b8c:	b508      	push	{r3, lr}
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8002b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b92:	460a      	mov	r2, r1
 8002b94:	4601      	mov	r1, r0
 8002b96:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <W5500_WriteBuff+0x14>)
 8002b98:	f004 fae4 	bl	8007164 <HAL_SPI_Transmit>
}
 8002b9c:	bd08      	pop	{r3, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200031c0 	.word	0x200031c0

08002ba4 <W5500_WriteByte>:
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
    return byte;
}

static void W5500_WriteByte(uint8_t byte) {
 8002ba4:	b500      	push	{lr}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	ab02      	add	r3, sp, #8
 8002baa:	f803 0d01 	strb.w	r0, [r3, #-1]!
    W5500_WriteBuff(&byte, sizeof(byte));
 8002bae:	2101      	movs	r1, #1
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ffeb 	bl	8002b8c <W5500_WriteBuff>
}
 8002bb6:	b003      	add	sp, #12
 8002bb8:	f85d fb04 	ldr.w	pc, [sp], #4

08002bbc <W5500_ReadBuff>:
static void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8002bbc:	b508      	push	{r3, lr}
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bc2:	460a      	mov	r2, r1
 8002bc4:	4601      	mov	r1, r0
 8002bc6:	4802      	ldr	r0, [pc, #8]	; (8002bd0 <W5500_ReadBuff+0x14>)
 8002bc8:	f004 fcb0 	bl	800752c <HAL_SPI_Receive>
}
 8002bcc:	bd08      	pop	{r3, pc}
 8002bce:	bf00      	nop
 8002bd0:	200031c0 	.word	0x200031c0

08002bd4 <W5500_ReadByte>:
static uint8_t W5500_ReadByte(void) {
 8002bd4:	b500      	push	{lr}
 8002bd6:	b083      	sub	sp, #12
    W5500_ReadBuff(&byte, sizeof(byte));
 8002bd8:	2101      	movs	r1, #1
 8002bda:	f10d 0007 	add.w	r0, sp, #7
 8002bde:	f7ff ffed 	bl	8002bbc <W5500_ReadBuff>
}
 8002be2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002be6:	b003      	add	sp, #12
 8002be8:	f85d fb04 	ldr.w	pc, [sp], #4

08002bec <cs_desel>:
static void cs_desel() {
 8002bec:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET); //CS HIGH
 8002bee:	2201      	movs	r2, #1
 8002bf0:	2110      	movs	r1, #16
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <cs_desel+0x1c>)
 8002bf4:	f002 fe8f 	bl	8005916 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4803      	ldr	r0, [pc, #12]	; (8002c0c <cs_desel+0x20>)
 8002c00:	6800      	ldr	r0, [r0, #0]
 8002c02:	f005 fecf 	bl	80089a4 <xQueueGenericSend>
}
 8002c06:	bd08      	pop	{r3, pc}
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	2000329c 	.word	0x2000329c

08002c10 <cs_sel>:
static void cs_sel() {
 8002c10:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 8002c12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <cs_sel+0x1c>)
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	f006 f8b9 	bl	8008d90 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET); //CS LOW
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2110      	movs	r1, #16
 8002c22:	4803      	ldr	r0, [pc, #12]	; (8002c30 <cs_sel+0x20>)
 8002c24:	f002 fe77 	bl	8005916 <HAL_GPIO_WritePin>
}
 8002c28:	bd08      	pop	{r3, pc}
 8002c2a:	bf00      	nop
 8002c2c:	2000329c 	.word	0x2000329c
 8002c30:	40020000 	.word	0x40020000

08002c34 <EthernetTask>:

uint16_t freesize;
uint8_t rcvBuf[128], txBuf[128], bufSize[] = {2, 2, 2, 2, 2};

void EthernetTask(void const * argument)
{
 8002c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c38:	b08c      	sub	sp, #48	; 0x30
	uint8_t first_frame = 1;
	uint8_t remoteIP[4][4];
	uint16_t remotePort[4];
	int32_t rcvSize = 0;

	CLI_Init();
 8002c3a:	f7fe f901 	bl	8000e40 <CLI_Init>

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8002c3e:	49a3      	ldr	r1, [pc, #652]	; (8002ecc <EthernetTask+0x298>)
 8002c40:	48a3      	ldr	r0, [pc, #652]	; (8002ed0 <EthernetTask+0x29c>)
 8002c42:	f7fe ffc5 	bl	8001bd0 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8002c46:	49a3      	ldr	r1, [pc, #652]	; (8002ed4 <EthernetTask+0x2a0>)
 8002c48:	48a3      	ldr	r0, [pc, #652]	; (8002ed8 <EthernetTask+0x2a4>)
 8002c4a:	f7fe ffd3 	bl	8001bf4 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8002c4e:	49a3      	ldr	r1, [pc, #652]	; (8002edc <EthernetTask+0x2a8>)
 8002c50:	48a3      	ldr	r0, [pc, #652]	; (8002ee0 <EthernetTask+0x2ac>)
 8002c52:	f7fe ffe7 	bl	8001c24 <reg_wizchip_spiburst_cbfunc>
	wizchip_init(bufSize, bufSize);
 8002c56:	48a3      	ldr	r0, [pc, #652]	; (8002ee4 <EthernetTask+0x2b0>)
 8002c58:	4601      	mov	r1, r0
 8002c5a:	f7ff f837 	bl	8001ccc <wizchip_init>
	wiz_NetInfo netInfo = {	.mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	9302      	str	r3, [sp, #8]
 8002c64:	9303      	str	r3, [sp, #12]
 8002c66:	9304      	str	r3, [sp, #16]
 8002c68:	f8cd 3013 	str.w	r3, [sp, #19]
 8002c6c:	2308      	movs	r3, #8
 8002c6e:	f88d 3001 	strb.w	r3, [sp, #1]
 8002c72:	23dc      	movs	r3, #220	; 0xdc
 8002c74:	f88d 3002 	strb.w	r3, [sp, #2]
 8002c78:	23ab      	movs	r3, #171	; 0xab
 8002c7a:	f88d 3003 	strb.w	r3, [sp, #3]
 8002c7e:	23cd      	movs	r3, #205	; 0xcd
 8002c80:	f88d 3004 	strb.w	r3, [sp, #4]
 8002c84:	23ef      	movs	r3, #239	; 0xef
 8002c86:	f88d 3005 	strb.w	r3, [sp, #5]
 8002c8a:	23c0      	movs	r3, #192	; 0xc0
 8002c8c:	f88d 3006 	strb.w	r3, [sp, #6]
 8002c90:	21a8      	movs	r1, #168	; 0xa8
 8002c92:	f88d 1007 	strb.w	r1, [sp, #7]
 8002c96:	f88d 3009 	strb.w	r3, [sp, #9]
 8002c9a:	22ff      	movs	r2, #255	; 0xff
 8002c9c:	f88d 200a 	strb.w	r2, [sp, #10]
 8002ca0:	f88d 200b 	strb.w	r2, [sp, #11]
 8002ca4:	f88d 200c 	strb.w	r2, [sp, #12]
 8002ca8:	f88d 300e 	strb.w	r3, [sp, #14]
 8002cac:	f88d 100f 	strb.w	r1, [sp, #15]
 8002cb0:	2401      	movs	r4, #1
 8002cb2:	f88d 4011 	strb.w	r4, [sp, #17]
		                  	 .ip 	= {192, 168, 0, 192},					// IP address
		                     .sn 	= {255, 255, 255, 0},					// Subnet mask
		                     .gw 	= {192, 168, 0, 1}};					// Gateway address
	wizchip_setnetinfo(&netInfo);
 8002cb6:	4668      	mov	r0, sp
 8002cb8:	f7ff f86c 	bl	8001d94 <wizchip_setnetinfo>
	wizchip_setinterruptmask(IK_SOCK_3);
 8002cbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002cc0:	f7ff f85a 	bl	8001d78 <wizchip_setinterruptmask>
	wizchip_getnetinfo(&netInfo);
 8002cc4:	4668      	mov	r0, sp
 8002cc6:	f7ff f893 	bl	8001df0 <wizchip_getnetinfo>
	//if(socket(2, Sn_MR_TCP, 1883, 0) == 0){

	//}

	// Telnet Port (CLI, debug)
	if(socket(3, Sn_MR_TCP, 23, SF_TCP_NODELAY) == 3){
 8002cca:	2320      	movs	r3, #32
 8002ccc:	2217      	movs	r2, #23
 8002cce:	4621      	mov	r1, r4
 8002cd0:	2003      	movs	r0, #3
 8002cd2:	f7fe fc7b 	bl	80015cc <socket>
 8002cd6:	2803      	cmp	r0, #3
 8002cd8:	d108      	bne.n	8002cec <EthernetTask+0xb8>
		if(listen(3) == SOCK_OK) {
 8002cda:	f7fe fd23 	bl	8001724 <listen>
 8002cde:	42a0      	cmp	r0, r4
 8002ce0:	d104      	bne.n	8002cec <EthernetTask+0xb8>
			setSn_IMR(3, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 8002ce2:	211f      	movs	r1, #31
 8002ce4:	f642 4068 	movw	r0, #11368	; 0x2c68
 8002ce8:	f7fe fac6 	bl	8001278 <WIZCHIP_WRITE>
{
 8002cec:	2701      	movs	r7, #1
	}

  /* Infinite loop */
	for(;;)
	{
		if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f006 ffce 	bl	8009c98 <xTaskNotifyWait>
 8002cfc:	2801      	cmp	r0, #1
 8002cfe:	d1f6      	bne.n	8002cee <EthernetTask+0xba>
 8002d00:	e0b6      	b.n	8002e70 <EthernetTask+0x23c>
				if(interruptSource & IK_IP_CONFLICT){

				}

				if(interruptSource & IK_SOCK_0){
					interrupt = getSn_IR(0);
 8002d02:	f44f 7002 	mov.w	r0, #520	; 0x208
 8002d06:	f7fe fa85 	bl	8001214 <WIZCHIP_READ>
					if(interrupt & Sn_IR_CON){
 8002d0a:	f010 0f01 	tst.w	r0, #1
 8002d0e:	f000 80bd 	beq.w	8002e8c <EthernetTask+0x258>
						getsockopt(0, SO_DESTIP, &remoteIP[0]);
 8002d12:	aa08      	add	r2, sp, #32
 8002d14:	2104      	movs	r1, #4
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7fe fe96 	bl	8001a48 <getsockopt>
						getsockopt(0, SO_DESTPORT, (uint8_t*)&remotePort[0]);
 8002d1c:	aa06      	add	r2, sp, #24
 8002d1e:	2105      	movs	r1, #5
 8002d20:	2000      	movs	r0, #0
 8002d22:	f7fe fe91 	bl	8001a48 <getsockopt>
 8002d26:	e0b1      	b.n	8002e8c <EthernetTask+0x258>
					}
				}

				if(interruptSource & IK_SOCK_1){
					interrupt = getSn_IR(1);
 8002d28:	f44f 700a 	mov.w	r0, #552	; 0x228
 8002d2c:	f7fe fa72 	bl	8001214 <WIZCHIP_READ>
					if(interrupt & Sn_IR_CON){
 8002d30:	f010 0f01 	tst.w	r0, #1
 8002d34:	f000 80ae 	beq.w	8002e94 <EthernetTask+0x260>
						getsockopt(1, SO_DESTIP, &remoteIP[1]);
 8002d38:	aa09      	add	r2, sp, #36	; 0x24
 8002d3a:	2104      	movs	r1, #4
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	f7fe fe83 	bl	8001a48 <getsockopt>
						getsockopt(1, SO_DESTPORT, (uint8_t*)&remotePort[1]);
 8002d42:	f10d 021a 	add.w	r2, sp, #26
 8002d46:	2105      	movs	r1, #5
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f7fe fe7d 	bl	8001a48 <getsockopt>
 8002d4e:	e0a1      	b.n	8002e94 <EthernetTask+0x260>

					}
				}

				if(interruptSource & IK_SOCK_2){
					interrupt = getSn_IR(2);
 8002d50:	f44f 7012 	mov.w	r0, #584	; 0x248
 8002d54:	f7fe fa5e 	bl	8001214 <WIZCHIP_READ>
 8002d58:	e0a0      	b.n	8002e9c <EthernetTask+0x268>
				}

				if(interruptSource & IK_SOCK_3){
					freesize = getSn_TxMAX(3);
 8002d5a:	f641 7068 	movw	r0, #8040	; 0x1f68
 8002d5e:	f7fe fa59 	bl	8001214 <WIZCHIP_READ>
 8002d62:	b280      	uxth	r0, r0
 8002d64:	0280      	lsls	r0, r0, #10
 8002d66:	4b60      	ldr	r3, [pc, #384]	; (8002ee8 <EthernetTask+0x2b4>)
 8002d68:	8018      	strh	r0, [r3, #0]
					interrupt = getSn_IR(3);
 8002d6a:	f44f 701a 	mov.w	r0, #616	; 0x268
 8002d6e:	f7fe fa51 	bl	8001214 <WIZCHIP_READ>
 8002d72:	4605      	mov	r5, r0
					setSn_IR(3, interrupt);
 8002d74:	f000 011f 	and.w	r1, r0, #31
 8002d78:	f44f 701a 	mov.w	r0, #616	; 0x268
 8002d7c:	f7fe fa7c 	bl	8001278 <WIZCHIP_WRITE>
					if(interrupt & Sn_IR_CON){
 8002d80:	f015 0f01 	tst.w	r5, #1
 8002d84:	d124      	bne.n	8002dd0 <EthernetTask+0x19c>
						getsockopt(3, SO_DESTPORT, (uint8_t*)&remotePort[3]);
						freesize = send(3, (uint8_t*)gretMsg, 47);
						first_frame = 1;
					}

					if(interrupt & Sn_IR_RECV){
 8002d86:	f015 0f04 	tst.w	r5, #4
 8002d8a:	d006      	beq.n	8002d9a <EthernetTask+0x166>
						if(first_frame == 0){
 8002d8c:	b3a7      	cbz	r7, 8002df8 <EthernetTask+0x1c4>
								freesize = send(3, txBuf, strlen((char*)txBuf));
								vTaskDelay(1);
							}while(xMoreDataToFollow != pdFALSE);
							rcvSize = 0;
						}else{
							recv(3, rcvBuf, 128);
 8002d8e:	2280      	movs	r2, #128	; 0x80
 8002d90:	4956      	ldr	r1, [pc, #344]	; (8002eec <EthernetTask+0x2b8>)
 8002d92:	2003      	movs	r0, #3
 8002d94:	f7fe fde6 	bl	8001964 <recv>
							first_frame = 0;
 8002d98:	2700      	movs	r7, #0
						}
					}

					if(interrupt & Sn_IR_SENDOK){
 8002d9a:	f015 0f10 	tst.w	r5, #16
 8002d9e:	d156      	bne.n	8002e4e <EthernetTask+0x21a>
						ClrSiS(3);
					}

					if(interrupt & Sn_IR_DISCON || interrupt & Sn_IR_TIMEOUT){
 8002da0:	f015 0f0a 	tst.w	r5, #10
 8002da4:	d07e      	beq.n	8002ea4 <EthernetTask+0x270>
						disconnect(3);
 8002da6:	2003      	movs	r0, #3
 8002da8:	f7fe fcf2 	bl	8001790 <disconnect>
						if(socket(3, Sn_MR_TCP, 23, SF_TCP_NODELAY) == 3){
 8002dac:	2320      	movs	r3, #32
 8002dae:	2217      	movs	r2, #23
 8002db0:	2101      	movs	r1, #1
 8002db2:	2003      	movs	r0, #3
 8002db4:	f7fe fc0a 	bl	80015cc <socket>
 8002db8:	2803      	cmp	r0, #3
 8002dba:	d173      	bne.n	8002ea4 <EthernetTask+0x270>
							if(listen(3) == SOCK_OK) {
 8002dbc:	f7fe fcb2 	bl	8001724 <listen>
 8002dc0:	2801      	cmp	r0, #1
 8002dc2:	d16f      	bne.n	8002ea4 <EthernetTask+0x270>
								setSn_IMR(3, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 8002dc4:	211f      	movs	r1, #31
 8002dc6:	f642 4068 	movw	r0, #11368	; 0x2c68
 8002dca:	f7fe fa55 	bl	8001278 <WIZCHIP_WRITE>
 8002dce:	e069      	b.n	8002ea4 <EthernetTask+0x270>
						getsockopt(3, SO_DESTIP, &remoteIP[3]);
 8002dd0:	aa0b      	add	r2, sp, #44	; 0x2c
 8002dd2:	2104      	movs	r1, #4
 8002dd4:	2003      	movs	r0, #3
 8002dd6:	f7fe fe37 	bl	8001a48 <getsockopt>
						getsockopt(3, SO_DESTPORT, (uint8_t*)&remotePort[3]);
 8002dda:	f10d 021e 	add.w	r2, sp, #30
 8002dde:	2105      	movs	r1, #5
 8002de0:	2003      	movs	r0, #3
 8002de2:	f7fe fe31 	bl	8001a48 <getsockopt>
						freesize = send(3, (uint8_t*)gretMsg, 47);
 8002de6:	222f      	movs	r2, #47	; 0x2f
 8002de8:	4941      	ldr	r1, [pc, #260]	; (8002ef0 <EthernetTask+0x2bc>)
 8002dea:	2003      	movs	r0, #3
 8002dec:	f7fe fd18 	bl	8001820 <send>
 8002df0:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <EthernetTask+0x2b4>)
 8002df2:	8018      	strh	r0, [r3, #0]
						first_frame = 1;
 8002df4:	2701      	movs	r7, #1
 8002df6:	e7c6      	b.n	8002d86 <EthernetTask+0x152>
							rcvSize += recv(3, &rcvBuf[rcvSize], 128);
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	493c      	ldr	r1, [pc, #240]	; (8002eec <EthernetTask+0x2b8>)
 8002dfc:	2003      	movs	r0, #3
 8002dfe:	f7fe fdb1 	bl	8001964 <recv>
							while(((rcvBuf[rcvSize - 1] == '\r') || (rcvBuf[rcvSize - 1] == '\n')) && (rcvSize > 0)){
 8002e02:	e005      	b.n	8002e10 <EthernetTask+0x1dc>
 8002e04:	2800      	cmp	r0, #0
 8002e06:	dd0a      	ble.n	8002e1e <EthernetTask+0x1ea>
								rcvBuf[rcvSize - 1] = 0;
 8002e08:	4a38      	ldr	r2, [pc, #224]	; (8002eec <EthernetTask+0x2b8>)
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	54d1      	strb	r1, [r2, r3]
								rcvSize--;
 8002e0e:	4618      	mov	r0, r3
							while(((rcvBuf[rcvSize - 1] == '\r') || (rcvBuf[rcvSize - 1] == '\n')) && (rcvSize > 0)){
 8002e10:	1e43      	subs	r3, r0, #1
 8002e12:	4a36      	ldr	r2, [pc, #216]	; (8002eec <EthernetTask+0x2b8>)
 8002e14:	5cd2      	ldrb	r2, [r2, r3]
 8002e16:	2a0d      	cmp	r2, #13
 8002e18:	d0f4      	beq.n	8002e04 <EthernetTask+0x1d0>
 8002e1a:	2a0a      	cmp	r2, #10
 8002e1c:	d0f2      	beq.n	8002e04 <EthernetTask+0x1d0>
								xMoreDataToFollow = FreeRTOS_CLIProcessCommand(&rcvBuf, &txBuf, 128);
 8002e1e:	4e35      	ldr	r6, [pc, #212]	; (8002ef4 <EthernetTask+0x2c0>)
 8002e20:	2280      	movs	r2, #128	; 0x80
 8002e22:	4631      	mov	r1, r6
 8002e24:	4831      	ldr	r0, [pc, #196]	; (8002eec <EthernetTask+0x2b8>)
 8002e26:	f007 fe47 	bl	800aab8 <FreeRTOS_CLIProcessCommand>
 8002e2a:	4680      	mov	r8, r0
								freesize = send(3, txBuf, strlen((char*)txBuf));
 8002e2c:	4630      	mov	r0, r6
 8002e2e:	f7fd f9d7 	bl	80001e0 <strlen>
 8002e32:	b282      	uxth	r2, r0
 8002e34:	4631      	mov	r1, r6
 8002e36:	2003      	movs	r0, #3
 8002e38:	f7fe fcf2 	bl	8001820 <send>
 8002e3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <EthernetTask+0x2b4>)
 8002e3e:	8018      	strh	r0, [r3, #0]
								vTaskDelay(1);
 8002e40:	2001      	movs	r0, #1
 8002e42:	f006 fc65 	bl	8009710 <vTaskDelay>
							}while(xMoreDataToFollow != pdFALSE);
 8002e46:	f1b8 0f00 	cmp.w	r8, #0
 8002e4a:	d1e8      	bne.n	8002e1e <EthernetTask+0x1ea>
 8002e4c:	e7a5      	b.n	8002d9a <EthernetTask+0x166>
						ClrSiS(3);
 8002e4e:	2003      	movs	r0, #3
 8002e50:	f7fe fd7c 	bl	800194c <ClrSiS>
 8002e54:	e7a4      	b.n	8002da0 <EthernetTask+0x16c>
					}

				}

				if(interruptSource & IK_SOCK_4){
					interrupt = getSn_IR(4);
 8002e56:	f44f 7022 	mov.w	r0, #648	; 0x288
 8002e5a:	f7fe f9db 	bl	8001214 <WIZCHIP_READ>
 8002e5e:	e024      	b.n	8002eaa <EthernetTask+0x276>
				}

				if(interruptSource & IK_SOCK_5){
					interrupt = getSn_IR(5);
 8002e60:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 8002e64:	f7fe f9d6 	bl	8001214 <WIZCHIP_READ>
 8002e68:	e022      	b.n	8002eb0 <EthernetTask+0x27c>

				if(interruptSource & IK_SOCK_6){
					interrupt = getSn_IR(6);
				}

				if(interruptSource & IK_SOCK_7){
 8002e6a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8002e6e:	d127      	bne.n	8002ec0 <EthernetTask+0x28c>
			while(HAL_GPIO_ReadPin(ETH_INT_GPIO_Port, ETH_INT_Pin) == 0){
 8002e70:	2102      	movs	r1, #2
 8002e72:	4821      	ldr	r0, [pc, #132]	; (8002ef8 <EthernetTask+0x2c4>)
 8002e74:	f002 fd48 	bl	8005908 <HAL_GPIO_ReadPin>
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	f47f af38 	bne.w	8002cee <EthernetTask+0xba>
				interruptSource = wizchip_getinterrupt();
 8002e7e:	f7fe ff6a 	bl	8001d56 <wizchip_getinterrupt>
 8002e82:	4604      	mov	r4, r0
				if(interruptSource & IK_SOCK_0){
 8002e84:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002e88:	f47f af3b 	bne.w	8002d02 <EthernetTask+0xce>
				if(interruptSource & IK_SOCK_1){
 8002e8c:	f414 7f00 	tst.w	r4, #512	; 0x200
 8002e90:	f47f af4a 	bne.w	8002d28 <EthernetTask+0xf4>
				if(interruptSource & IK_SOCK_2){
 8002e94:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8002e98:	f47f af5a 	bne.w	8002d50 <EthernetTask+0x11c>
				if(interruptSource & IK_SOCK_3){
 8002e9c:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8002ea0:	f47f af5b 	bne.w	8002d5a <EthernetTask+0x126>
				if(interruptSource & IK_SOCK_4){
 8002ea4:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8002ea8:	d1d5      	bne.n	8002e56 <EthernetTask+0x222>
				if(interruptSource & IK_SOCK_5){
 8002eaa:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8002eae:	d1d7      	bne.n	8002e60 <EthernetTask+0x22c>
				if(interruptSource & IK_SOCK_6){
 8002eb0:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8002eb4:	d0d9      	beq.n	8002e6a <EthernetTask+0x236>
					interrupt = getSn_IR(6);
 8002eb6:	f44f 7032 	mov.w	r0, #712	; 0x2c8
 8002eba:	f7fe f9ab 	bl	8001214 <WIZCHIP_READ>
 8002ebe:	e7d4      	b.n	8002e6a <EthernetTask+0x236>
					interrupt = getSn_IR(7);
 8002ec0:	f44f 703a 	mov.w	r0, #744	; 0x2e8
 8002ec4:	f7fe f9a6 	bl	8001214 <WIZCHIP_READ>
 8002ec8:	e7d2      	b.n	8002e70 <EthernetTask+0x23c>
 8002eca:	bf00      	nop
 8002ecc:	08002bed 	.word	0x08002bed
 8002ed0:	08002c11 	.word	0x08002c11
 8002ed4:	08002ba5 	.word	0x08002ba5
 8002ed8:	08002bd5 	.word	0x08002bd5
 8002edc:	08002b8d 	.word	0x08002b8d
 8002ee0:	08002bbd 	.word	0x08002bbd
 8002ee4:	20000030 	.word	0x20000030
 8002ee8:	20002ce8 	.word	0x20002ce8
 8002eec:	20002cec 	.word	0x20002cec
 8002ef0:	0800b8b4 	.word	0x0800b8b4
 8002ef4:	20002d6c 	.word	0x20002d6c
 8002ef8:	40020400 	.word	0x40020400

08002efc <NRF_ChipSelect>:

void NRF_ChipSelect (void);

void NRF_ChipDeselect (void);

void NRF_ChipSelect (void){
 8002efc:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 8002efe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <NRF_ChipSelect+0x1c>)
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	f005 ff43 	bl	8008d90 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f10:	4802      	ldr	r0, [pc, #8]	; (8002f1c <NRF_ChipSelect+0x20>)
 8002f12:	f002 fd00 	bl	8005916 <HAL_GPIO_WritePin>
}
 8002f16:	bd08      	pop	{r3, pc}
 8002f18:	2000329c 	.word	0x2000329c
 8002f1c:	40020400 	.word	0x40020400

08002f20 <NRF_ChipDeselect>:

void NRF_ChipDeselect (void){
 8002f20:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_SET);
 8002f22:	2201      	movs	r2, #1
 8002f24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f28:	4805      	ldr	r0, [pc, #20]	; (8002f40 <NRF_ChipDeselect+0x20>)
 8002f2a:	f002 fcf4 	bl	8005916 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	461a      	mov	r2, r3
 8002f32:	4619      	mov	r1, r3
 8002f34:	4803      	ldr	r0, [pc, #12]	; (8002f44 <NRF_ChipDeselect+0x24>)
 8002f36:	6800      	ldr	r0, [r0, #0]
 8002f38:	f005 fd34 	bl	80089a4 <xQueueGenericSend>
}
 8002f3c:	bd08      	pop	{r3, pc}
 8002f3e:	bf00      	nop
 8002f40:	40020400 	.word	0x40020400
 8002f44:	2000329c 	.word	0x2000329c

08002f48 <RadioTask>:

void RadioTask(void const * argument)
{
 8002f48:	b500      	push	{lr}
 8002f4a:	b083      	sub	sp, #12
	const uint8_t ecoIOinitMSG[] = "IsAlive";
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <RadioTask+0x38>)
 8002f4e:	466c      	mov	r4, sp
 8002f50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f54:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE BEGIN RadioComm */
	nRF24_Init(&hspi1);
 8002f58:	480a      	ldr	r0, [pc, #40]	; (8002f84 <RadioTask+0x3c>)
 8002f5a:	f001 fed1 	bl	8004d00 <nRF24_Init>
	//nRF24_SetRXAddress(0, "_ECOE");
	//nRF24_SetRXAddress(1, "_ECOI");
	//nRF24_SetTXAddress("_ECOM");
	//nRF24_TX_Mode();
	nRF24_SendData((uint8_t*)ecoIOinitMSG, sizeof(ecoIOinitMSG));
 8002f5e:	2108      	movs	r1, #8
 8002f60:	4620      	mov	r0, r4
 8002f62:	f001 fdf7 	bl	8004b54 <nRF24_SendData>

  /* Infinite loop */
  for(;;)
  {
	  if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f006 fe92 	bl	8009c98 <xTaskNotifyWait>
 8002f74:	2801      	cmp	r0, #1
 8002f76:	d1f6      	bne.n	8002f66 <RadioTask+0x1e>
		  nRF24_Event();
 8002f78:	f001 fe94 	bl	8004ca4 <nRF24_Event>
 8002f7c:	e7f3      	b.n	8002f66 <RadioTask+0x1e>
 8002f7e:	bf00      	nop
 8002f80:	0800b8e4 	.word	0x0800b8e4
 8002f84:	200031c0 	.word	0x200031c0

08002f88 <fModbusParseFloat>:
#define CWU_HEATER_PHASE_POWER 		1

float fModbusParseFloat (uint8_t* in_data){
	union float_bytes buffor;

	buffor.bytes[3] = *in_data;
 8002f88:	7802      	ldrb	r2, [r0, #0]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f362 631f 	bfi	r3, r2, #24, #8
	in_data ++;
	buffor.bytes[2] = *in_data;
 8002f90:	7842      	ldrb	r2, [r0, #1]
 8002f92:	f362 4317 	bfi	r3, r2, #16, #8
	in_data ++;
	buffor.bytes[1] = *in_data;
 8002f96:	7882      	ldrb	r2, [r0, #2]
 8002f98:	f362 230f 	bfi	r3, r2, #8, #8
	in_data ++;
	buffor.bytes[0] = *in_data;
 8002f9c:	78c2      	ldrb	r2, [r0, #3]
 8002f9e:	f362 0307 	bfi	r3, r2, #0, #8

	return buffor.value;
 8002fa2:	ee00 3a10 	vmov	s0, r3
}
 8002fa6:	4770      	bx	lr

08002fa8 <RegulationTask>:

void RegulationTask(void const * argument)
{
 8002fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002faa:	ed2d 8b04 	vpush	{d8-d9}
 8002fae:	b0a5      	sub	sp, #148	; 0x94
	uint8_t counter_data_raw[36];
	uint8_t imported_exported_power_raw[8];
	uint8_t receieves = 0;
	uint8_t temperatures_raw[SENSOR_NUMBER * 2];

	regulationData.configStatus = Config_GetRegConfig(&regulationData.parameters);
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	; (80032d8 <RegulationTask+0x330>)
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f7fd fff4 	bl	8000fa0 <Config_GetRegConfig>
 8002fb8:	f804 0c01 	strb.w	r0, [r4, #-1]

	HAL_TIM_PWM_Init(&htim1);
 8002fbc:	4ec7      	ldr	r6, [pc, #796]	; (80032dc <RegulationTask+0x334>)
 8002fbe:	4630      	mov	r0, r6
 8002fc0:	f004 fd23 	bl	8007a0a <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 8002fc4:	4dc6      	ldr	r5, [pc, #792]	; (80032e0 <RegulationTask+0x338>)
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	f004 fd1f 	bl	8007a0a <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim3);
 8002fcc:	4cc5      	ldr	r4, [pc, #788]	; (80032e4 <RegulationTask+0x33c>)
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f004 fd1b 	bl	8007a0a <HAL_TIM_PWM_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	f004 fde2 	bl	8007ba0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002fdc:	2104      	movs	r1, #4
 8002fde:	4630      	mov	r0, r6
 8002fe0:	f004 fdde 	bl	8007ba0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002fe4:	2108      	movs	r1, #8
 8002fe6:	4630      	mov	r0, r6
 8002fe8:	f004 fdda 	bl	8007ba0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002fec:	2100      	movs	r1, #0
 8002fee:	4628      	mov	r0, r5
 8002ff0:	f004 fdd6 	bl	8007ba0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002ff4:	2104      	movs	r1, #4
 8002ff6:	4628      	mov	r0, r5
 8002ff8:	f004 fdd2 	bl	8007ba0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002ffc:	2108      	movs	r1, #8
 8002ffe:	4628      	mov	r0, r5
 8003000:	f004 fdce 	bl	8007ba0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003004:	2100      	movs	r1, #0
 8003006:	4620      	mov	r0, r4
 8003008:	f004 fdca 	bl	8007ba0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800300c:	2104      	movs	r1, #4
 800300e:	4620      	mov	r0, r4
 8003010:	f004 fdc6 	bl	8007ba0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003014:	2108      	movs	r1, #8
 8003016:	4620      	mov	r0, r4
 8003018:	f004 fdc2 	bl	8007ba0 <HAL_TIM_PWM_Start>

	TIM1 -> CCR1 = 500;
 800301c:	4ab2      	ldr	r2, [pc, #712]	; (80032e8 <RegulationTask+0x340>)
 800301e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003022:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1 -> CCR2 = 500;
 8003024:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1 -> CCR3 = 500;
 8003026:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM2 -> CCR1 = 500;
 8003028:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800302c:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2 -> CCR2 = 500;
 800302e:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2 -> CCR3 = 500;
 8003030:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM3 -> CCR1 = 500;
 8003032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003036:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3 -> CCR2 = 500;
 8003038:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3 -> CCR3 = 500;
 800303a:	63d3      	str	r3, [r2, #60]	; 0x3c

	//Uchwyty i inne struktury
	mbPort.task =  xTaskGetCurrentTaskHandle();
 800303c:	f006 fcb8 	bl	80099b0 <xTaskGetCurrentTaskHandle>
 8003040:	9023      	str	r0, [sp, #140]	; 0x8c

	mcp23017_init(&expander1, &hi2c1, 0b0100111);
 8003042:	4caa      	ldr	r4, [pc, #680]	; (80032ec <RegulationTask+0x344>)
 8003044:	2227      	movs	r2, #39	; 0x27
 8003046:	49aa      	ldr	r1, [pc, #680]	; (80032f0 <RegulationTask+0x348>)
 8003048:	4620      	mov	r0, r4
 800304a:	f7fe feff 	bl	8001e4c <mcp23017_init>
	mcp23017_iodir(&expander1, 1, 0xFF);
 800304e:	22ff      	movs	r2, #255	; 0xff
 8003050:	2101      	movs	r1, #1
 8003052:	4620      	mov	r0, r4
 8003054:	f7fe ff1c 	bl	8001e90 <mcp23017_iodir>
	mcp23017_iodir(&expander1, 0, 0x03);
 8003058:	2203      	movs	r2, #3
 800305a:	2100      	movs	r1, #0
 800305c:	4620      	mov	r0, r4
 800305e:	f7fe ff17 	bl	8001e90 <mcp23017_iodir>
	expander1.gpio[0] = 0b11111100;
 8003062:	23fc      	movs	r3, #252	; 0xfc
 8003064:	71a3      	strb	r3, [r4, #6]
	mcp23017_write_gpio(&expander1, 0);
 8003066:	2100      	movs	r1, #0
 8003068:	4620      	mov	r0, r4
 800306a:	f7fe ff2e 	bl	8001eca <mcp23017_write_gpio>

	vTaskDelay(1000);
 800306e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003072:	f006 fb4d 	bl	8009710 <vTaskDelay>

	expander1.gpio[0] = 0;
 8003076:	2100      	movs	r1, #0
 8003078:	71a1      	strb	r1, [r4, #6]
	mcp23017_write_gpio(&expander1, 0);
 800307a:	4620      	mov	r0, r4
 800307c:	f7fe ff25 	bl	8001eca <mcp23017_write_gpio>
	vModbusInit(&mbPort, &huart2, 100);
 8003080:	2264      	movs	r2, #100	; 0x64
 8003082:	499c      	ldr	r1, [pc, #624]	; (80032f4 <RegulationTask+0x34c>)
 8003084:	a821      	add	r0, sp, #132	; 0x84
 8003086:	f7ff f835 	bl	80020f4 <vModbusInit>
	float exported_power = 0;
 800308a:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 80032f8 <RegulationTask+0x350>
	float imported_power = 0;
 800308e:	eef0 8a48 	vmov.f32	s17, s16
 8003092:	e07d      	b.n	8003190 <RegulationTask+0x1e8>
		receieves = 0;

		if(regulationData.IOsignals.signals.input2 != regulationData.IOsignals.signals.output1){
			regulationData.ControlWord.CWUHeaterError = HIGH;
		}else{
			regulationData.ControlWord.CWUHeaterError = LOW;
 8003094:	4b99      	ldr	r3, [pc, #612]	; (80032fc <RegulationTask+0x354>)
 8003096:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800309a:	f36f 0200 	bfc	r2, #0, #1
 800309e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80030a2:	e091      	b.n	80031c8 <RegulationTask+0x220>
		}

		if(regulationData.IOsignals.signals.input3 != regulationData.IOsignals.signals.output2){
			regulationData.ControlWord.COHeaterError = HIGH;
		}else{
			regulationData.ControlWord.COHeaterError = LOW;
 80030a4:	4b95      	ldr	r3, [pc, #596]	; (80032fc <RegulationTask+0x354>)
 80030a6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80030aa:	f36f 0200 	bfc	r2, #0, #1
 80030ae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80030b2:	e09c      	b.n	80031ee <RegulationTask+0x246>
		}

		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
			receieves += 1;
			for(uint8_t i = 0; i < 3; i++){
				regulationData.counter.voltages[i] = fModbusParseFloat(counter_data_raw + i * 4);
 80030b4:	00a6      	lsls	r6, r4, #2
 80030b6:	ab0a      	add	r3, sp, #40	; 0x28
 80030b8:	1998      	adds	r0, r3, r6
 80030ba:	f7ff ff65 	bl	8002f88 <fModbusParseFloat>
 80030be:	4d8f      	ldr	r5, [pc, #572]	; (80032fc <RegulationTask+0x354>)
 80030c0:	f104 030a 	add.w	r3, r4, #10
 80030c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80030c8:	ed83 0a00 	vstr	s0, [r3]
				regulationData.counter.currents[i] = fModbusParseFloat(counter_data_raw + 12 + i * 4);
 80030cc:	f106 000c 	add.w	r0, r6, #12
 80030d0:	ab0a      	add	r3, sp, #40	; 0x28
 80030d2:	4418      	add	r0, r3
 80030d4:	f7ff ff58 	bl	8002f88 <fModbusParseFloat>
 80030d8:	f104 030c 	add.w	r3, r4, #12
 80030dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80030e0:	ed83 0a01 	vstr	s0, [r3, #4]
				regulationData.counter.powers[i] = fModbusParseFloat(counter_data_raw + 24 + 4 * i);
 80030e4:	f106 0018 	add.w	r0, r6, #24
 80030e8:	ab0a      	add	r3, sp, #40	; 0x28
 80030ea:	4418      	add	r0, r3
 80030ec:	f7ff ff4c 	bl	8002f88 <fModbusParseFloat>
 80030f0:	f104 0310 	add.w	r3, r4, #16
 80030f4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80030f8:	ed85 0a00 	vstr	s0, [r5]
			for(uint8_t i = 0; i < 3; i++){
 80030fc:	3401      	adds	r4, #1
 80030fe:	b2e4      	uxtb	r4, r4
 8003100:	2c02      	cmp	r4, #2
 8003102:	d9d7      	bls.n	80030b4 <RegulationTask+0x10c>
			receieves += 1;
 8003104:	2501      	movs	r5, #1
 8003106:	e07d      	b.n	8003204 <RegulationTask+0x25c>
			for(uint8_t i = 0; i < 3; i++){
 8003108:	2400      	movs	r4, #0
 800310a:	e7f9      	b.n	8003100 <RegulationTask+0x158>
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);

			if(regulationData.counter.power_in_buffor > 0){
				regulationData.counter.power_in_buffor -= (imported_power - last_imported_power);
			}else{
				regulationData.counter.power_in_buffor = 0;
 800310c:	4b7b      	ldr	r3, [pc, #492]	; (80032fc <RegulationTask+0x354>)
 800310e:	2200      	movs	r2, #0
 8003110:	64da      	str	r2, [r3, #76]	; 0x4c
			}
			regulationData.counter.power_in_buffor += (exported_power - last_exported_power) * ACUMULATED_POWER_FACTOR;
 8003112:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003116:	eddf 7a78 	vldr	s15, [pc, #480]	; 80032f8 <RegulationTask+0x350>
 800311a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800311e:	4b77      	ldr	r3, [pc, #476]	; (80032fc <RegulationTask+0x354>)
 8003120:	ed93 8a13 	vldr	s16, [r3, #76]	; 0x4c
 8003124:	ee38 8a27 	vadd.f32	s16, s16, s15
 8003128:	ed83 8a13 	vstr	s16, [r3, #76]	; 0x4c
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 800312c:	eeb0 8a40 	vmov.f32	s16, s0
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 8003130:	eef0 8a49 	vmov.f32	s17, s18
		}

		if(vModbusReadInputRegisters(&mbPort, TEMPERATURE_ADDRESS, 0, SENSOR_NUMBER, temperatures_raw) == Modbus_OK){
 8003134:	ab03      	add	r3, sp, #12
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	230a      	movs	r3, #10
 800313a:	2200      	movs	r2, #0
 800313c:	2102      	movs	r1, #2
 800313e:	a821      	add	r0, sp, #132	; 0x84
 8003140:	f7ff f80e 	bl	8002160 <vModbusReadInputRegisters>
 8003144:	2800      	cmp	r0, #0
 8003146:	f000 8081 	beq.w	800324c <RegulationTask+0x2a4>
				temperatures[i] = temp / DEC_PLACES;
			}
			memcpy(&regulationData.counter.CWU_temps[0], &temperatures[0], 24);
		}

		regulationData.counter.counter_present = 1;
 800314a:	4b6c      	ldr	r3, [pc, #432]	; (80032fc <RegulationTask+0x354>)
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
		regulationData.counter.temperatures_present = 1;
 8003150:	709a      	strb	r2, [r3, #2]
		if(receieves == 7){
 8003152:	2d07      	cmp	r5, #7
 8003154:	f000 8196 	beq.w	8003484 <RegulationTask+0x4dc>

		}else{

		}

		TIM3 -> CCR1 = regulationData.counter.CWU_heater_PWM[0];
 8003158:	4b68      	ldr	r3, [pc, #416]	; (80032fc <RegulationTask+0x354>)
 800315a:	8899      	ldrh	r1, [r3, #4]
 800315c:	4a68      	ldr	r2, [pc, #416]	; (8003300 <RegulationTask+0x358>)
 800315e:	6351      	str	r1, [r2, #52]	; 0x34
		TIM3 -> CCR2 = regulationData.counter.CWU_heater_PWM[1];
 8003160:	88d9      	ldrh	r1, [r3, #6]
 8003162:	6391      	str	r1, [r2, #56]	; 0x38
		TIM3 -> CCR3 = regulationData.counter.CWU_heater_PWM[2];
 8003164:	8919      	ldrh	r1, [r3, #8]
 8003166:	63d1      	str	r1, [r2, #60]	; 0x3c

		TIM1 -> CCR1 = regulationData.counter.CO_heater_PWM[0];
 8003168:	8959      	ldrh	r1, [r3, #10]
 800316a:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 800316e:	6351      	str	r1, [r2, #52]	; 0x34
		TIM1 -> CCR2 = regulationData.counter.CO_heater_PWM[1];
 8003170:	8999      	ldrh	r1, [r3, #12]
 8003172:	6391      	str	r1, [r2, #56]	; 0x38
		TIM1 -> CCR3 = regulationData.counter.CO_heater_PWM[2];
 8003174:	89d9      	ldrh	r1, [r3, #14]
 8003176:	63d1      	str	r1, [r2, #60]	; 0x3c

		expander1.gpio[MCP23017_PORTA] = regulationData.IOsignals.ports.portA;
 8003178:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800317c:	485b      	ldr	r0, [pc, #364]	; (80032ec <RegulationTask+0x344>)
 800317e:	7183      	strb	r3, [r0, #6]
		mcp23017_write_gpio(&expander1, 0);
 8003180:	2100      	movs	r1, #0
 8003182:	f7fe fea2 	bl	8001eca <mcp23017_write_gpio>
		vTaskDelayUntil(&xLastWakeTime, xDelay);
 8003186:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800318a:	a820      	add	r0, sp, #128	; 0x80
 800318c:	f006 fa6e 	bl	800966c <vTaskDelayUntil>
		mcp23017_read_gpio(&expander1, 0);
 8003190:	4c56      	ldr	r4, [pc, #344]	; (80032ec <RegulationTask+0x344>)
 8003192:	2100      	movs	r1, #0
 8003194:	4620      	mov	r0, r4
 8003196:	f7fe fe86 	bl	8001ea6 <mcp23017_read_gpio>
		mcp23017_read_gpio(&expander1, 1);
 800319a:	2101      	movs	r1, #1
 800319c:	4620      	mov	r0, r4
 800319e:	f7fe fe82 	bl	8001ea6 <mcp23017_read_gpio>
		regulationData.IOsignals.bytes[0] = expander1.gpio[0];
 80031a2:	79a2      	ldrb	r2, [r4, #6]
 80031a4:	4955      	ldr	r1, [pc, #340]	; (80032fc <RegulationTask+0x354>)
 80031a6:	f881 206a 	strb.w	r2, [r1, #106]	; 0x6a
		regulationData.IOsignals.bytes[1] = expander1.gpio[1];
 80031aa:	79e3      	ldrb	r3, [r4, #7]
 80031ac:	f881 306b 	strb.w	r3, [r1, #107]	; 0x6b
		if(regulationData.IOsignals.signals.input2 != regulationData.IOsignals.signals.output1){
 80031b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80031b4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 80031b8:	f43f af6c 	beq.w	8003094 <RegulationTask+0xec>
			regulationData.ControlWord.CWUHeaterError = HIGH;
 80031bc:	f891 3068 	ldrb.w	r3, [r1, #104]	; 0x68
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	f881 3068 	strb.w	r3, [r1, #104]	; 0x68
		if(regulationData.IOsignals.signals.input3 != regulationData.IOsignals.signals.output2){
 80031c8:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <RegulationTask+0x354>)
 80031ca:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 80031ce:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80031d2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80031d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80031da:	429a      	cmp	r2, r3
 80031dc:	f43f af62 	beq.w	80030a4 <RegulationTask+0xfc>
			regulationData.ControlWord.COHeaterError = HIGH;
 80031e0:	4a46      	ldr	r2, [pc, #280]	; (80032fc <RegulationTask+0x354>)
 80031e2:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
 80031ee:	ab0a      	add	r3, sp, #40	; 0x28
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	2312      	movs	r3, #18
 80031f4:	2200      	movs	r2, #0
 80031f6:	2101      	movs	r1, #1
 80031f8:	a821      	add	r0, sp, #132	; 0x84
 80031fa:	f7fe ffb1 	bl	8002160 <vModbusReadInputRegisters>
 80031fe:	2800      	cmp	r0, #0
 8003200:	d082      	beq.n	8003108 <RegulationTask+0x160>
		receieves = 0;
 8003202:	2500      	movs	r5, #0
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, IMPORTED_ACTIVE_POWER, 4, imported_exported_power_raw) == Modbus_OK){
 8003204:	ab08      	add	r3, sp, #32
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	2304      	movs	r3, #4
 800320a:	2248      	movs	r2, #72	; 0x48
 800320c:	2101      	movs	r1, #1
 800320e:	a821      	add	r0, sp, #132	; 0x84
 8003210:	f7fe ffa6 	bl	8002160 <vModbusReadInputRegisters>
 8003214:	2800      	cmp	r0, #0
 8003216:	d18d      	bne.n	8003134 <RegulationTask+0x18c>
			receieves += 2;
 8003218:	3502      	adds	r5, #2
 800321a:	b2ed      	uxtb	r5, r5
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 800321c:	a808      	add	r0, sp, #32
 800321e:	f7ff feb3 	bl	8002f88 <fModbusParseFloat>
 8003222:	eeb0 9a40 	vmov.f32	s18, s0
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 8003226:	a809      	add	r0, sp, #36	; 0x24
 8003228:	f7ff feae 	bl	8002f88 <fModbusParseFloat>
			if(regulationData.counter.power_in_buffor > 0){
 800322c:	4b33      	ldr	r3, [pc, #204]	; (80032fc <RegulationTask+0x354>)
 800322e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323a:	f77f af67 	ble.w	800310c <RegulationTask+0x164>
				regulationData.counter.power_in_buffor -= (imported_power - last_imported_power);
 800323e:	ee79 8a68 	vsub.f32	s17, s18, s17
 8003242:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8003246:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 800324a:	e762      	b.n	8003112 <RegulationTask+0x16a>
			receieves += 4;
 800324c:	3504      	adds	r5, #4
 800324e:	b2ed      	uxtb	r5, r5
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 8003250:	2400      	movs	r4, #0
 8003252:	e01b      	b.n	800328c <RegulationTask+0x2e4>
				int16_t temp = temperatures_raw[i * 2];
 8003254:	0063      	lsls	r3, r4, #1
 8003256:	aa24      	add	r2, sp, #144	; 0x90
 8003258:	441a      	add	r2, r3
 800325a:	f812 2c84 	ldrb.w	r2, [r2, #-132]
				temp += temperatures_raw[i*2 + 1];
 800325e:	3301      	adds	r3, #1
 8003260:	a924      	add	r1, sp, #144	; 0x90
 8003262:	440b      	add	r3, r1
 8003264:	f813 0c84 	ldrb.w	r0, [r3, #-132]
 8003268:	eb00 2002 	add.w	r0, r0, r2, lsl #8
				temperatures[i] = temp / DEC_PLACES;
 800326c:	b200      	sxth	r0, r0
 800326e:	f7fd f961 	bl	8000534 <__aeabi_i2d>
 8003272:	2200      	movs	r2, #0
 8003274:	4b23      	ldr	r3, [pc, #140]	; (8003304 <RegulationTask+0x35c>)
 8003276:	f7fd faf1 	bl	800085c <__aeabi_ddiv>
 800327a:	f7fd fbf7 	bl	8000a6c <__aeabi_d2f>
 800327e:	ab24      	add	r3, sp, #144	; 0x90
 8003280:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003284:	f843 0c38 	str.w	r0, [r3, #-56]
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 8003288:	3401      	adds	r4, #1
 800328a:	b2e4      	uxtb	r4, r4
 800328c:	2c09      	cmp	r4, #9
 800328e:	d9e1      	bls.n	8003254 <RegulationTask+0x2ac>
			memcpy(&regulationData.counter.CWU_temps[0], &temperatures[0], 24);
 8003290:	4c1d      	ldr	r4, [pc, #116]	; (8003308 <RegulationTask+0x360>)
 8003292:	ae16      	add	r6, sp, #88	; 0x58
 8003294:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003298:	e896 0003 	ldmia.w	r6, {r0, r1}
 800329c:	e884 0003 	stmia.w	r4, {r0, r1}
 80032a0:	e753      	b.n	800314a <RegulationTask+0x1a2>
					available_power[i]  = -regulationData.counter.powers[i] * regulationData.parameters.heater_power_coeff / 100.0f;
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <RegulationTask+0x354>)
 80032a4:	f993 307c 	ldrsb.w	r3, [r3, #124]	; 0x7c
 80032a8:	ee07 3a10 	vmov	s14, r3
 80032ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80032b0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80032b4:	eddf 6a15 	vldr	s13, [pc, #84]	; 800330c <RegulationTask+0x364>
 80032b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032bc:	ab24      	add	r3, sp, #144	; 0x90
 80032be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80032c2:	ed03 7a11 	vstr	s14, [r3, #-68]	; 0xffffffbc
 80032c6:	e081      	b.n	80033cc <RegulationTask+0x424>
					regulationData.counter.CO_heater_max_power[i] = 0.0f;
 80032c8:	1d2b      	adds	r3, r5, #4
 80032ca:	4a0c      	ldr	r2, [pc, #48]	; (80032fc <RegulationTask+0x354>)
 80032cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	e0a2      	b.n	800341c <RegulationTask+0x474>
 80032d6:	bf00      	nop
 80032d8:	20002e59 	.word	0x20002e59
 80032dc:	20003140 	.word	0x20003140
 80032e0:	20003218 	.word	0x20003218
 80032e4:	20002fb4 	.word	0x20002fb4
 80032e8:	40010000 	.word	0x40010000
 80032ec:	20002e7c 	.word	0x20002e7c
 80032f0:	20002f58 	.word	0x20002f58
 80032f4:	20003258 	.word	0x20003258
 80032f8:	00000000 	.word	0x00000000
 80032fc:	20002dec 	.word	0x20002dec
 8003300:	40000400 	.word	0x40000400
 8003304:	40240000 	.word	0x40240000
 8003308:	20002e3c 	.word	0x20002e3c
 800330c:	42c80000 	.word	0x42c80000
					regulationData.counter.CWU_heater_max_power[i] = 0.0f;
 8003310:	1dab      	adds	r3, r5, #6
 8003312:	4ac0      	ldr	r2, [pc, #768]	; (8003614 <RegulationTask+0x66c>)
 8003314:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003318:	2200      	movs	r2, #0
 800331a:	605a      	str	r2, [r3, #4]
				if(regulationData.counter.voltages[i] > 200.0){
 800331c:	f105 030a 	add.w	r3, r5, #10
 8003320:	4abc      	ldr	r2, [pc, #752]	; (8003614 <RegulationTask+0x66c>)
 8003322:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003326:	ed93 7a00 	vldr	s14, [r3]
 800332a:	eddf 7abb 	vldr	s15, [pc, #748]	; 8003618 <RegulationTask+0x670>
 800332e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003336:	f340 809b 	ble.w	8003470 <RegulationTask+0x4c8>
					regulationData.counter.CO_heater_PWM[i] = (uint32_t)(regulationData.counter.CO_heater_max_power[i] * 1000.0);
 800333a:	4616      	mov	r6, r2
 800333c:	1d2f      	adds	r7, r5, #4
 800333e:	eb02 0387 	add.w	r3, r2, r7, lsl #2
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	f7fd f908 	bl	8000558 <__aeabi_f2d>
 8003348:	2200      	movs	r2, #0
 800334a:	4bb4      	ldr	r3, [pc, #720]	; (800361c <RegulationTask+0x674>)
 800334c:	f7fd f95c 	bl	8000608 <__aeabi_dmul>
 8003350:	f7fd fb6c 	bl	8000a2c <__aeabi_d2uiz>
 8003354:	eb06 0747 	add.w	r7, r6, r7, lsl #1
 8003358:	8078      	strh	r0, [r7, #2]
					regulationData.counter.CWU_heater_PWM[i] = (uint32_t)(regulationData.counter.CWU_heater_max_power[i] * 1000.0);
 800335a:	1dab      	adds	r3, r5, #6
 800335c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003360:	6858      	ldr	r0, [r3, #4]
 8003362:	f7fd f8f9 	bl	8000558 <__aeabi_f2d>
 8003366:	2200      	movs	r2, #0
 8003368:	4bac      	ldr	r3, [pc, #688]	; (800361c <RegulationTask+0x674>)
 800336a:	f7fd f94d 	bl	8000608 <__aeabi_dmul>
 800336e:	f7fd fb5d 	bl	8000a2c <__aeabi_d2uiz>
 8003372:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 8003376:	80a8      	strh	r0, [r5, #4]
			for(uint8_t i = 0; i < 3; i ++){
 8003378:	3401      	adds	r4, #1
 800337a:	b2e4      	uxtb	r4, r4
 800337c:	2c02      	cmp	r4, #2
 800337e:	f200 8083 	bhi.w	8003488 <RegulationTask+0x4e0>
				if(regulationData.counter.powers[i] > 0){
 8003382:	4625      	mov	r5, r4
 8003384:	f104 0310 	add.w	r3, r4, #16
 8003388:	4aa2      	ldr	r2, [pc, #648]	; (8003614 <RegulationTask+0x66c>)
 800338a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800338e:	edd3 7a00 	vldr	s15, [r3]
 8003392:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339a:	dd82      	ble.n	80032a2 <RegulationTask+0x2fa>
					available_power[i] = ((regulationData.parameters.net_max_power / 3.0f) - regulationData.counter.powers[i]) * regulationData.parameters.heater_power_coeff;
 800339c:	4613      	mov	r3, r2
 800339e:	f8d2 2075 	ldr.w	r2, [r2, #117]	; 0x75
 80033a2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80033a6:	ee07 2a10 	vmov	s14, r2
 80033aa:	ee87 7a26 	vdiv.f32	s14, s14, s13
 80033ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033b2:	f993 307c 	ldrsb.w	r3, [r3, #124]	; 0x7c
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c2:	ab24      	add	r3, sp, #144	; 0x90
 80033c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80033c8:	ed43 7a11 	vstr	s15, [r3, #-68]	; 0xffffffbc
				if(regulationData.parameters.CO_heater_power > 0.0f){
 80033cc:	4b91      	ldr	r3, [pc, #580]	; (8003614 <RegulationTask+0x66c>)
 80033ce:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 80033d2:	ee07 3a90 	vmov	s15, r3
 80033d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033de:	f77f af73 	ble.w	80032c8 <RegulationTask+0x320>
					regulationData.counter.CO_heater_max_power[i] = available_power[i] / regulationData.parameters.CO_heater_power / 3.0f;
 80033e2:	ab24      	add	r3, sp, #144	; 0x90
 80033e4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80033e8:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 80033ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80033f0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80033f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033f8:	1d2b      	adds	r3, r5, #4
 80033fa:	4a86      	ldr	r2, [pc, #536]	; (8003614 <RegulationTask+0x66c>)
 80033fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003400:	edc3 7a00 	vstr	s15, [r3]
					if(regulationData.counter.CO_heater_max_power[i] > 1.0f) regulationData.counter.CO_heater_max_power[i] = 1.0f;
 8003404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800340c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003410:	dd04      	ble.n	800341c <RegulationTask+0x474>
 8003412:	1d2b      	adds	r3, r5, #4
 8003414:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003418:	ed83 7a00 	vstr	s14, [r3]
				if(regulationData.parameters.CWU_heater_power > 0.0f){
 800341c:	4b7d      	ldr	r3, [pc, #500]	; (8003614 <RegulationTask+0x66c>)
 800341e:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800342a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342e:	f77f af6f 	ble.w	8003310 <RegulationTask+0x368>
					regulationData.counter.CWU_heater_max_power[i] = available_power[i] / regulationData.parameters.CWU_heater_power / 3.0f;
 8003432:	ab24      	add	r3, sp, #144	; 0x90
 8003434:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8003438:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 800343c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003440:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003448:	1dab      	adds	r3, r5, #6
 800344a:	4a72      	ldr	r2, [pc, #456]	; (8003614 <RegulationTask+0x66c>)
 800344c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003450:	edc3 7a01 	vstr	s15, [r3, #4]
					if(regulationData.counter.CWU_heater_max_power[i] > 1.0f) regulationData.counter.CWU_heater_max_power[i] = 1.0f;
 8003454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800345c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003460:	f77f af5c 	ble.w	800331c <RegulationTask+0x374>
 8003464:	1dab      	adds	r3, r5, #6
 8003466:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800346a:	ed83 7a01 	vstr	s14, [r3, #4]
 800346e:	e755      	b.n	800331c <RegulationTask+0x374>
					regulationData.counter.CO_heater_PWM[i] = 0;
 8003470:	4b68      	ldr	r3, [pc, #416]	; (8003614 <RegulationTask+0x66c>)
 8003472:	1d2a      	adds	r2, r5, #4
 8003474:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8003478:	2100      	movs	r1, #0
 800347a:	8051      	strh	r1, [r2, #2]
					regulationData.counter.CWU_heater_PWM[i] = 0;
 800347c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003480:	80a9      	strh	r1, [r5, #4]
 8003482:	e779      	b.n	8003378 <RegulationTask+0x3d0>
			for(uint8_t i = 0; i < 3; i ++){
 8003484:	2400      	movs	r4, #0
 8003486:	e779      	b.n	800337c <RegulationTask+0x3d4>
			if(regulationData.counter.CWU_temps[0] < regulationData.parameters.CWU_hi_temp){
 8003488:	4b62      	ldr	r3, [pc, #392]	; (8003614 <RegulationTask+0x66c>)
 800348a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800348e:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800349a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800349e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a2:	d515      	bpl.n	80034d0 <RegulationTask+0x528>
				if(regulationData.counter.CWU_temps[1] < regulationData.parameters.CWU_lo_temp){
 80034a4:	4b5b      	ldr	r3, [pc, #364]	; (8003614 <RegulationTask+0x66c>)
 80034a6:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80034aa:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034be:	d50e      	bpl.n	80034de <RegulationTask+0x536>
					regulationData.ControlWord.CWUHeaterStateOut = HIGH;
 80034c0:	4a54      	ldr	r2, [pc, #336]	; (8003614 <RegulationTask+0x66c>)
 80034c2:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 80034ce:	e006      	b.n	80034de <RegulationTask+0x536>
				regulationData.ControlWord.CWUHeaterStateOut = LOW;
 80034d0:	4b50      	ldr	r3, [pc, #320]	; (8003614 <RegulationTask+0x66c>)
 80034d2:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80034d6:	f36f 0200 	bfc	r2, #0, #1
 80034da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.counter.CO_temps[0] < regulationData.parameters.CO_hi_temp){
 80034de:	4b4d      	ldr	r3, [pc, #308]	; (8003614 <RegulationTask+0x66c>)
 80034e0:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80034e4:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 80034e8:	ee07 3a90 	vmov	s15, r3
 80034ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f8:	d515      	bpl.n	8003526 <RegulationTask+0x57e>
				if(regulationData.counter.CO_temps[3] < regulationData.parameters.CO_lo_temp){
 80034fa:	4b46      	ldr	r3, [pc, #280]	; (8003614 <RegulationTask+0x66c>)
 80034fc:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8003500:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003504:	ee07 3a90 	vmov	s15, r3
 8003508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800350c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003514:	d50e      	bpl.n	8003534 <RegulationTask+0x58c>
					regulationData.ControlWord.COHeaterStateOut = HIGH;
 8003516:	4a3f      	ldr	r2, [pc, #252]	; (8003614 <RegulationTask+0x66c>)
 8003518:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8003524:	e006      	b.n	8003534 <RegulationTask+0x58c>
				regulationData.ControlWord.COHeaterStateOut = LOW;
 8003526:	4b3b      	ldr	r3, [pc, #236]	; (8003614 <RegulationTask+0x66c>)
 8003528:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800352c:	f36f 0200 	bfc	r2, #0, #1
 8003530:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.ControlWord.COHeaterStateOut){
 8003534:	4b37      	ldr	r3, [pc, #220]	; (8003614 <RegulationTask+0x66c>)
 8003536:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800353a:	f013 0f01 	tst.w	r3, #1
 800353e:	d006      	beq.n	800354e <RegulationTask+0x5a6>
				regulationData.ControlWord.CWUHeaterStateOut = LOW;
 8003540:	4b34      	ldr	r3, [pc, #208]	; (8003614 <RegulationTask+0x66c>)
 8003542:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003546:	f36f 0200 	bfc	r2, #0, #1
 800354a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.IOsignals.signals.input1 == HIGH){
 800354e:	4b31      	ldr	r3, [pc, #196]	; (8003614 <RegulationTask+0x66c>)
 8003550:	f993 306b 	ldrsb.w	r3, [r3, #107]	; 0x6b
 8003554:	2b00      	cmp	r3, #0
 8003556:	da47      	bge.n	80035e8 <RegulationTask+0x640>
				if(regulationData.IOsignals.signals.input4 == LOW ||
 8003558:	4b2e      	ldr	r3, [pc, #184]	; (8003614 <RegulationTask+0x66c>)
 800355a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800355c:	f023 436f 	bic.w	r3, r3, #4009754624	; 0xef000000
 8003560:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003564:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003568:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800356c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003570:	d006      	beq.n	8003580 <RegulationTask+0x5d8>
					regulationData.ControlWord.CWUHeaterStateOut = LOW;
 8003572:	4b28      	ldr	r3, [pc, #160]	; (8003614 <RegulationTask+0x66c>)
 8003574:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003578:	f36f 0200 	bfc	r2, #0, #1
 800357c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				if(regulationData.IOsignals.signals.input5 == LOW &&
 8003580:	4b24      	ldr	r3, [pc, #144]	; (8003614 <RegulationTask+0x66c>)
 8003582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003584:	f023 4377 	bic.w	r3, r3, #4143972352	; 0xf7000000
 8003588:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800358c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003590:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003594:	2b01      	cmp	r3, #1
 8003596:	d00a      	beq.n	80035ae <RegulationTask+0x606>
				if(regulationData.ControlWord.CWUHeaterStateOut == LOW){
 8003598:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <RegulationTask+0x66c>)
 800359a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800359e:	f013 0301 	ands.w	r3, r3, #1
 80035a2:	d015      	beq.n	80035d0 <RegulationTask+0x628>
				if(regulationData.ControlWord.COHeaterStateOut == LOW){
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f47f add7 	bne.w	8003158 <RegulationTask+0x1b0>
					for(int i = 0; i < 3; i++){
 80035aa:	2300      	movs	r3, #0
 80035ac:	e019      	b.n	80035e2 <RegulationTask+0x63a>
					regulationData.ControlWord.CWUHeaterStateOut = LOW;
 80035ae:	4b19      	ldr	r3, [pc, #100]	; (8003614 <RegulationTask+0x66c>)
 80035b0:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80035b4:	f36f 0200 	bfc	r2, #0, #1
 80035b8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80035bc:	e7ec      	b.n	8003598 <RegulationTask+0x5f0>
						regulationData.counter.CWU_heater_PWM[i] = 0;
 80035be:	4915      	ldr	r1, [pc, #84]	; (8003614 <RegulationTask+0x66c>)
 80035c0:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80035c4:	2000      	movs	r0, #0
 80035c6:	8088      	strh	r0, [r1, #4]
					for(int i = 0; i < 3; i++){
 80035c8:	3201      	adds	r2, #1
 80035ca:	2a02      	cmp	r2, #2
 80035cc:	ddf7      	ble.n	80035be <RegulationTask+0x616>
 80035ce:	e7e9      	b.n	80035a4 <RegulationTask+0x5fc>
 80035d0:	2200      	movs	r2, #0
 80035d2:	e7fa      	b.n	80035ca <RegulationTask+0x622>
						regulationData.counter.CO_heater_PWM[i] = 0;
 80035d4:	1d19      	adds	r1, r3, #4
 80035d6:	4a0f      	ldr	r2, [pc, #60]	; (8003614 <RegulationTask+0x66c>)
 80035d8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80035dc:	2100      	movs	r1, #0
 80035de:	8051      	strh	r1, [r2, #2]
					for(int i = 0; i < 3; i++){
 80035e0:	3301      	adds	r3, #1
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	ddf6      	ble.n	80035d4 <RegulationTask+0x62c>
 80035e6:	e5b7      	b.n	8003158 <RegulationTask+0x1b0>
				regulationData.ControlWord.COHeaterStateOut = LOW;
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <RegulationTask+0x66c>)
 80035ea:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80035ee:	f36f 0200 	bfc	r2, #0, #1
 80035f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				for(int i = 0; i < 3; i++){
 80035f6:	2300      	movs	r3, #0
 80035f8:	e009      	b.n	800360e <RegulationTask+0x666>
					regulationData.counter.CO_heater_PWM[i] = 0;
 80035fa:	4a06      	ldr	r2, [pc, #24]	; (8003614 <RegulationTask+0x66c>)
 80035fc:	1d19      	adds	r1, r3, #4
 80035fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003602:	2000      	movs	r0, #0
 8003604:	8048      	strh	r0, [r1, #2]
					regulationData.counter.CWU_heater_PWM[i] = 0;
 8003606:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800360a:	8090      	strh	r0, [r2, #4]
				for(int i = 0; i < 3; i++){
 800360c:	3301      	adds	r3, #1
 800360e:	2b02      	cmp	r3, #2
 8003610:	ddf3      	ble.n	80035fa <RegulationTask+0x652>
 8003612:	e5a1      	b.n	8003158 <RegulationTask+0x1b0>
 8003614:	20002dec 	.word	0x20002dec
 8003618:	43480000 	.word	0x43480000
 800361c:	408f4000 	.word	0x408f4000

08003620 <RegulationTask_GetData>:
	}
  /* USER CODE END PowerRegulation */
}

void RegulationTask_GetData (RegTaskData_t* destination){
 8003620:	b508      	push	{r3, lr}
	memcpy(destination, &regulationData, sizeof(RegTaskData_t));
 8003622:	2290      	movs	r2, #144	; 0x90
 8003624:	4901      	ldr	r1, [pc, #4]	; (800362c <RegulationTask_GetData+0xc>)
 8003626:	f007 fad3 	bl	800abd0 <memcpy>
}
 800362a:	bd08      	pop	{r3, pc}
 800362c:	20002dec 	.word	0x20002dec

08003630 <TestTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TestTask */
void TestTask(void const * argument)
{
 8003630:	b508      	push	{r3, lr}

  /* Infinite loop */
  for(;;)
  {

    vTaskDelay(1000);
 8003632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003636:	f006 f86b 	bl	8009710 <vTaskDelay>
 800363a:	e7fa      	b.n	8003632 <TestTask+0x2>

0800363c <UARTDMA_UartIrqHandler>:



void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 800363c:	6802      	ldr	r2, [r0, #0]
 800363e:	6813      	ldr	r3, [r2, #0]
 8003640:	6819      	ldr	r1, [r3, #0]
 8003642:	f011 0f10 	tst.w	r1, #16
 8003646:	d00e      	beq.n	8003666 <UARTDMA_UartIrqHandler+0x2a>
{
 8003648:	b082      	sub	sp, #8
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 800364a:	6819      	ldr	r1, [r3, #0]
 800364c:	9101      	str	r1, [sp, #4]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	9301      	str	r3, [sp, #4]
		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8003652:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	6813      	ldr	r3, [r2, #0]
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	6013      	str	r3, [r2, #0]
		tmp = tmp; // For unused warning
 800365e:	9b01      	ldr	r3, [sp, #4]
 8003660:	9301      	str	r3, [sp, #4]
	}
}
 8003662:	b002      	add	sp, #8
 8003664:	4770      	bx	lr
 8003666:	4770      	bx	lr

08003668 <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma){
 8003668:	b570      	push	{r4, r5, r6, lr}
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t Reserved0;
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 800366a:	6803      	ldr	r3, [r0, #0]
 800366c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366e:	6d9d      	ldr	r5, [r3, #88]	; 0x58

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	f012 0f10 	tst.w	r2, #16
 8003678:	d038      	beq.n	80036ec <UARTDMA_DmaIrqHandler+0x84>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 800367a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800367c:	2320      	movs	r3, #32
 800367e:	4093      	lsls	r3, r2
 8003680:	60ab      	str	r3, [r5, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8003682:	6803      	ldr	r3, [r0, #0]
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685e      	ldr	r6, [r3, #4]
 800368a:	f1c6 061e 	rsb	r6, r6, #30

		//huartdma->length += Length;
		huartdma->length = Length;
 800368e:	f880 60a2 	strb.w	r6, [r0, #162]	; 0xa2

		for(i = 0; i < Length; i++){
 8003692:	2200      	movs	r2, #0
 8003694:	e00c      	b.n	80036b0 <UARTDMA_DmaIrqHandler+0x48>
			huartdma->UART_Buffer[huartdma->UartBufferTail] = huartdma->DMA_RX_Buffer[i];
 8003696:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 800369a:	1881      	adds	r1, r0, r2
 800369c:	790c      	ldrb	r4, [r1, #4]
 800369e:	18c1      	adds	r1, r0, r3
 80036a0:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
			huartdma->UartBufferTail++;
 80036a4:	3301      	adds	r3, #1
			huartdma->UartBufferTail &= 127;
 80036a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036aa:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		for(i = 0; i < Length; i++){
 80036ae:	3201      	adds	r2, #1
 80036b0:	42b2      	cmp	r2, r6
 80036b2:	d3f0      	bcc.n	8003696 <UARTDMA_DmaIrqHandler+0x2e>
 80036b4:	4604      	mov	r4, r0
		}

		huartdma -> callback();
 80036b6:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 80036ba:	4798      	blx	r3

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 80036bc:	4623      	mov	r3, r4
 80036be:	f853 2b04 	ldr.w	r2, [r3], #4
 80036c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036c4:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80036c6:	223f      	movs	r2, #63	; 0x3f
 80036c8:	408a      	lsls	r2, r1
 80036ca:	60aa      	str	r2, [r5, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80036cc:	6822      	ldr	r2, [r4, #0]
 80036ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	60d3      	str	r3, [r2, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	221e      	movs	r2, #30
 80036dc:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	6813      	ldr	r3, [r2, #0]
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	6013      	str	r3, [r2, #0]
	}
}
 80036ec:	bd70      	pop	{r4, r5, r6, pc}

080036ee <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 80036ee:	b510      	push	{r4, lr}
 80036f0:	4604      	mov	r4, r0
	huartdma->huart = huart;
 80036f2:	6001      	str	r1, [r0, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 80036f4:	680a      	ldr	r2, [r1, #0]
 80036f6:	68d3      	ldr	r3, [r2, #12]
 80036f8:	f043 0310 	orr.w	r3, r3, #16
 80036fc:	60d3      	str	r3, [r2, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 80036fe:	4601      	mov	r1, r0
 8003700:	f851 3b04 	ldr.w	r3, [r1], #4
 8003704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	6813      	ldr	r3, [r2, #0]
 800370a:	f043 0310 	orr.w	r3, r3, #16
 800370e:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8003710:	221e      	movs	r2, #30
 8003712:	6800      	ldr	r0, [r0, #0]
 8003714:	f004 fd16 	bl	8008144 <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_HTIE; // Disable DMA Half Complete interrupt
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	6813      	ldr	r3, [r2, #0]
 8003720:	f023 0308 	bic.w	r3, r3, #8
 8003724:	6013      	str	r3, [r2, #0]
}
 8003726:	bd10      	pop	{r4, pc}

08003728 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003728:	4b03      	ldr	r3, [pc, #12]	; (8003738 <vApplicationGetIdleTaskMemory+0x10>)
 800372a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <vApplicationGetIdleTaskMemory+0x14>)
 800372e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000334 	.word	0x20000334
 800373c:	20000134 	.word	0x20000134

08003740 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <vApplicationGetTimerTaskMemory+0x10>)
 8003742:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <vApplicationGetTimerTaskMemory+0x14>)
 8003746:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800374c:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 800374e:	4770      	bx	lr
 8003750:	20000798 	.word	0x20000798
 8003754:	20000398 	.word	0x20000398

08003758 <ConfigSaveTmr>:
__weak void ConfigSaveTmr(void const * argument)
{
  /* USER CODE BEGIN ConfigSaveTmr */
  
  /* USER CODE END ConfigSaveTmr */
}
 8003758:	4770      	bx	lr
	...

0800375c <MX_GPIO_Init>:
{
 800375c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003760:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003762:	2400      	movs	r4, #0
 8003764:	9405      	str	r4, [sp, #20]
 8003766:	9406      	str	r4, [sp, #24]
 8003768:	9407      	str	r4, [sp, #28]
 800376a:	9408      	str	r4, [sp, #32]
 800376c:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800376e:	9401      	str	r4, [sp, #4]
 8003770:	4b46      	ldr	r3, [pc, #280]	; (800388c <MX_GPIO_Init+0x130>)
 8003772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003774:	f042 0204 	orr.w	r2, r2, #4
 8003778:	631a      	str	r2, [r3, #48]	; 0x30
 800377a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800377c:	f002 0204 	and.w	r2, r2, #4
 8003780:	9201      	str	r2, [sp, #4]
 8003782:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003784:	9402      	str	r4, [sp, #8]
 8003786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003788:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
 800378e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003790:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003794:	9202      	str	r2, [sp, #8]
 8003796:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003798:	9403      	str	r4, [sp, #12]
 800379a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
 80037a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a4:	f002 0201 	and.w	r2, r2, #1
 80037a8:	9203      	str	r2, [sp, #12]
 80037aa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ac:	9404      	str	r4, [sp, #16]
 80037ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037b0:	f042 0202 	orr.w	r2, r2, #2
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	9304      	str	r3, [sp, #16]
 80037be:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 80037c0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80038a0 <MX_GPIO_Init+0x144>
 80037c4:	4622      	mov	r2, r4
 80037c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037ca:	4640      	mov	r0, r8
 80037cc:	f002 f8a3 	bl	8005916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 80037d0:	4d2f      	ldr	r5, [pc, #188]	; (8003890 <MX_GPIO_Init+0x134>)
 80037d2:	4622      	mov	r2, r4
 80037d4:	2102      	movs	r1, #2
 80037d6:	4628      	mov	r0, r5
 80037d8:	f002 f89d 	bl	8005916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 80037dc:	2201      	movs	r2, #1
 80037de:	2110      	movs	r1, #16
 80037e0:	4628      	mov	r0, r5
 80037e2:	f002 f898 	bl	8005916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin, GPIO_PIN_SET);
 80037e6:	4e2b      	ldr	r6, [pc, #172]	; (8003894 <MX_GPIO_Init+0x138>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	f246 0104 	movw	r1, #24580	; 0x6004
 80037ee:	4630      	mov	r0, r6
 80037f0:	f002 f891 	bl	8005916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80037f4:	4622      	mov	r2, r4
 80037f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037fa:	4630      	mov	r0, r6
 80037fc:	f002 f88b 	bl	8005916 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUILT_IN_LED_Pin;
 8003800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003804:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003806:	2701      	movs	r7, #1
 8003808:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BUILT_IN_LED_GPIO_Port, &GPIO_InitStruct);
 800380e:	a905      	add	r1, sp, #20
 8003810:	4640      	mov	r0, r8
 8003812:	f001 ffa7 	bl	8005764 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MASTER_TE_Pin|ETH_CS_Pin;
 8003816:	2312      	movs	r3, #18
 8003818:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800381a:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003820:	a905      	add	r1, sp, #20
 8003822:	4628      	mov	r0, r5
 8003824:	f001 ff9e 	bl	8005764 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ETH_INT_Pin|PG24V_Pin;
 8003828:	f241 0302 	movw	r3, #4098	; 0x1002
 800382c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800382e:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <MX_GPIO_Init+0x13c>)
 8003830:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003834:	a905      	add	r1, sp, #20
 8003836:	4630      	mov	r0, r6
 8003838:	f001 ff94 	bl	8005764 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin|NRF_CE_Pin;
 800383c:	f24e 0304 	movw	r3, #57348	; 0xe004
 8003840:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003842:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003846:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003848:	a905      	add	r1, sp, #20
 800384a:	4630      	mov	r0, r6
 800384c:	f001 ff8a 	bl	8005764 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NRF_INT_Pin;
 8003850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003854:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003856:	4b11      	ldr	r3, [pc, #68]	; (800389c <MX_GPIO_Init+0x140>)
 8003858:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(NRF_INT_GPIO_Port, &GPIO_InitStruct);
 800385c:	a905      	add	r1, sp, #20
 800385e:	4628      	mov	r0, r5
 8003860:	f001 ff80 	bl	8005764 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8003864:	4622      	mov	r2, r4
 8003866:	2105      	movs	r1, #5
 8003868:	2007      	movs	r0, #7
 800386a:	f001 fcad 	bl	80051c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800386e:	2007      	movs	r0, #7
 8003870:	f001 fcde 	bl	8005230 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003874:	4622      	mov	r2, r4
 8003876:	2105      	movs	r1, #5
 8003878:	2028      	movs	r0, #40	; 0x28
 800387a:	f001 fca5 	bl	80051c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800387e:	2028      	movs	r0, #40	; 0x28
 8003880:	f001 fcd6 	bl	8005230 <HAL_NVIC_EnableIRQ>
}
 8003884:	b00a      	add	sp, #40	; 0x28
 8003886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	40020000 	.word	0x40020000
 8003894:	40020400 	.word	0x40020400
 8003898:	10210000 	.word	0x10210000
 800389c:	10110000 	.word	0x10110000
 80038a0:	40020800 	.word	0x40020800

080038a4 <MX_DMA_Init>:
{
 80038a4:	b510      	push	{r4, lr}
 80038a6:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038a8:	2400      	movs	r4, #0
 80038aa:	9400      	str	r4, [sp, #0]
 80038ac:	4b16      	ldr	r3, [pc, #88]	; (8003908 <MX_DMA_Init+0x64>)
 80038ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038b0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
 80038b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038b8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80038bc:	9200      	str	r2, [sp, #0]
 80038be:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038c0:	9401      	str	r4, [sp, #4]
 80038c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80038d4:	4622      	mov	r2, r4
 80038d6:	2105      	movs	r1, #5
 80038d8:	2010      	movs	r0, #16
 80038da:	f001 fc75 	bl	80051c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80038de:	2010      	movs	r0, #16
 80038e0:	f001 fca6 	bl	8005230 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80038e4:	4622      	mov	r2, r4
 80038e6:	2105      	movs	r1, #5
 80038e8:	2039      	movs	r0, #57	; 0x39
 80038ea:	f001 fc6d 	bl	80051c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80038ee:	2039      	movs	r0, #57	; 0x39
 80038f0:	f001 fc9e 	bl	8005230 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80038f4:	4622      	mov	r2, r4
 80038f6:	2105      	movs	r1, #5
 80038f8:	203a      	movs	r0, #58	; 0x3a
 80038fa:	f001 fc65 	bl	80051c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80038fe:	203a      	movs	r0, #58	; 0x3a
 8003900:	f001 fc96 	bl	8005230 <HAL_NVIC_EnableIRQ>
}
 8003904:	b002      	add	sp, #8
 8003906:	bd10      	pop	{r4, pc}
 8003908:	40023800 	.word	0x40023800

0800390c <StartDefaultTask>:
{
 800390c:	b508      	push	{r3, lr}
    osDelay(1);
 800390e:	2001      	movs	r0, #1
 8003910:	f004 fe5d 	bl	80085ce <osDelay>
 8003914:	e7fb      	b.n	800390e <StartDefaultTask+0x2>

08003916 <HAL_UART_RxCpltCallback>:
}
 8003916:	4770      	bx	lr

08003918 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003918:	b508      	push	{r3, lr}
	if(huart -> Instance == USART2){
 800391a:	6802      	ldr	r2, [r0, #0]
 800391c:	4b07      	ldr	r3, [pc, #28]	; (800393c <HAL_UART_TxCpltCallback+0x24>)
 800391e:	429a      	cmp	r2, r3
 8003920:	d000      	beq.n	8003924 <HAL_UART_TxCpltCallback+0xc>
}
 8003922:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 8003924:	2201      	movs	r2, #1
 8003926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800392a:	4805      	ldr	r0, [pc, #20]	; (8003940 <HAL_UART_TxCpltCallback+0x28>)
 800392c:	f001 fff3 	bl	8005916 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 8003930:	2200      	movs	r2, #0
 8003932:	2102      	movs	r1, #2
 8003934:	4803      	ldr	r0, [pc, #12]	; (8003944 <HAL_UART_TxCpltCallback+0x2c>)
 8003936:	f001 ffee 	bl	8005916 <HAL_GPIO_WritePin>
}
 800393a:	e7f2      	b.n	8003922 <HAL_UART_TxCpltCallback+0xa>
 800393c:	40004400 	.word	0x40004400
 8003940:	40020800 	.word	0x40020800
 8003944:	40020000 	.word	0x40020000

08003948 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003948:	b510      	push	{r4, lr}
 800394a:	4604      	mov	r4, r0
	if(GPIO_Pin & ETH_INT_Pin){
 800394c:	f010 0f02 	tst.w	r0, #2
 8003950:	d103      	bne.n	800395a <HAL_GPIO_EXTI_Callback+0x12>
	if(GPIO_Pin & PG24V_Pin){
 8003952:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8003956:	d106      	bne.n	8003966 <HAL_GPIO_EXTI_Callback+0x1e>
}
 8003958:	bd10      	pop	{r4, pc}
		vTaskNotifyGiveFromISR(EthernetHandle, NULL);
 800395a:	2100      	movs	r1, #0
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_GPIO_EXTI_Callback+0x2c>)
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	f006 fa82 	bl	8009e68 <vTaskNotifyGiveFromISR>
 8003964:	e7f5      	b.n	8003952 <HAL_GPIO_EXTI_Callback+0xa>
		HAL_RTCEx_BKUPWrite(&hrtc, 0, 123456);
 8003966:	4a04      	ldr	r2, [pc, #16]	; (8003978 <HAL_GPIO_EXTI_Callback+0x30>)
 8003968:	2100      	movs	r1, #0
 800396a:	4804      	ldr	r0, [pc, #16]	; (800397c <HAL_GPIO_EXTI_Callback+0x34>)
 800396c:	f003 faec 	bl	8006f48 <HAL_RTCEx_BKUPWrite>
}
 8003970:	e7f2      	b.n	8003958 <HAL_GPIO_EXTI_Callback+0x10>
 8003972:	bf00      	nop
 8003974:	200032a4 	.word	0x200032a4
 8003978:	0001e240 	.word	0x0001e240
 800397c:	20003120 	.word	0x20003120

08003980 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM11){
 8003982:	6802      	ldr	r2, [r0, #0]
 8003984:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003986:	429a      	cmp	r2, r3
 8003988:	d004      	beq.n	8003994 <HAL_TIM_PeriodElapsedCallback+0x14>
		ulHighFreqTimerTicks ++;
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800398a:	6802      	ldr	r2, [r0, #0]
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800398e:	429a      	cmp	r2, r3
 8003990:	d005      	beq.n	800399e <HAL_TIM_PeriodElapsedCallback+0x1e>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003992:	bd08      	pop	{r3, pc}
		ulHighFreqTimerTicks ++;
 8003994:	4a05      	ldr	r2, [pc, #20]	; (80039ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003996:	6813      	ldr	r3, [r2, #0]
 8003998:	3301      	adds	r3, #1
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	e7f5      	b.n	800398a <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
 800399e:	f001 fa61 	bl	8004e64 <HAL_IncTick>
}
 80039a2:	e7f6      	b.n	8003992 <HAL_TIM_PeriodElapsedCallback+0x12>
 80039a4:	40014800 	.word	0x40014800
 80039a8:	40014400 	.word	0x40014400
 80039ac:	200032a0 	.word	0x200032a0

080039b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039b0:	e7fe      	b.n	80039b0 <Error_Handler>
	...

080039b4 <MX_I2C1_Init>:
{
 80039b4:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80039b6:	480a      	ldr	r0, [pc, #40]	; (80039e0 <MX_I2C1_Init+0x2c>)
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <MX_I2C1_Init+0x30>)
 80039ba:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <MX_I2C1_Init+0x34>)
 80039be:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039c0:	2300      	movs	r3, #0
 80039c2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80039c4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039ca:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039cc:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80039ce:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039d0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039d2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039d4:	f002 fa00 	bl	8005dd8 <HAL_I2C_Init>
 80039d8:	b900      	cbnz	r0, 80039dc <MX_I2C1_Init+0x28>
}
 80039da:	bd08      	pop	{r3, pc}
    Error_Handler();
 80039dc:	f7ff ffe8 	bl	80039b0 <Error_Handler>
 80039e0:	20002f58 	.word	0x20002f58
 80039e4:	40005400 	.word	0x40005400
 80039e8:	000186a0 	.word	0x000186a0

080039ec <MX_SPI1_Init>:
{
 80039ec:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80039ee:	480d      	ldr	r0, [pc, #52]	; (8003a24 <MX_SPI1_Init+0x38>)
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <MX_SPI1_Init+0x3c>)
 80039f2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039f4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80039f8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039fa:	2300      	movs	r3, #0
 80039fc:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039fe:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a00:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a02:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a08:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003a0a:	2218      	movs	r2, #24
 8003a0c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a0e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a10:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a12:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a14:	230a      	movs	r3, #10
 8003a16:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a18:	f003 fb64 	bl	80070e4 <HAL_SPI_Init>
 8003a1c:	b900      	cbnz	r0, 8003a20 <MX_SPI1_Init+0x34>
}
 8003a1e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003a20:	f7ff ffc6 	bl	80039b0 <Error_Handler>
 8003a24:	200031c0 	.word	0x200031c0
 8003a28:	40013000 	.word	0x40013000

08003a2c <MX_TIM1_Init>:
{
 8003a2c:	b510      	push	{r4, lr}
 8003a2e:	b092      	sub	sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a30:	2400      	movs	r4, #0
 8003a32:	9410      	str	r4, [sp, #64]	; 0x40
 8003a34:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a36:	9409      	str	r4, [sp, #36]	; 0x24
 8003a38:	940a      	str	r4, [sp, #40]	; 0x28
 8003a3a:	940b      	str	r4, [sp, #44]	; 0x2c
 8003a3c:	940c      	str	r4, [sp, #48]	; 0x30
 8003a3e:	940d      	str	r4, [sp, #52]	; 0x34
 8003a40:	940e      	str	r4, [sp, #56]	; 0x38
 8003a42:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a44:	2220      	movs	r2, #32
 8003a46:	4621      	mov	r1, r4
 8003a48:	a801      	add	r0, sp, #4
 8003a4a:	f007 f8cc 	bl	800abe6 <memset>
  htim1.Instance = TIM1;
 8003a4e:	482b      	ldr	r0, [pc, #172]	; (8003afc <MX_TIM1_Init+0xd0>)
 8003a50:	4b2b      	ldr	r3, [pc, #172]	; (8003b00 <MX_TIM1_Init+0xd4>)
 8003a52:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 42000-1;
 8003a54:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8003a58:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a5a:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 999;
 8003a5c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003a60:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a66:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a68:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a6a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a6c:	f003 ffcd 	bl	8007a0a <HAL_TIM_PWM_Init>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d136      	bne.n	8003ae2 <MX_TIM1_Init+0xb6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a74:	2300      	movs	r3, #0
 8003a76:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a78:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a7a:	a910      	add	r1, sp, #64	; 0x40
 8003a7c:	481f      	ldr	r0, [pc, #124]	; (8003afc <MX_TIM1_Init+0xd0>)
 8003a7e:	f004 f8ad 	bl	8007bdc <HAL_TIMEx_MasterConfigSynchronization>
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d12f      	bne.n	8003ae6 <MX_TIM1_Init+0xba>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a86:	2360      	movs	r3, #96	; 0x60
 8003a88:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a8e:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a90:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a92:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a94:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a96:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a98:	a909      	add	r1, sp, #36	; 0x24
 8003a9a:	4818      	ldr	r0, [pc, #96]	; (8003afc <MX_TIM1_Init+0xd0>)
 8003a9c:	f004 f800 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8003aa0:	bb18      	cbnz	r0, 8003aea <MX_TIM1_Init+0xbe>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	a909      	add	r1, sp, #36	; 0x24
 8003aa6:	4815      	ldr	r0, [pc, #84]	; (8003afc <MX_TIM1_Init+0xd0>)
 8003aa8:	f003 fffa 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8003aac:	b9f8      	cbnz	r0, 8003aee <MX_TIM1_Init+0xc2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003aae:	2208      	movs	r2, #8
 8003ab0:	a909      	add	r1, sp, #36	; 0x24
 8003ab2:	4812      	ldr	r0, [pc, #72]	; (8003afc <MX_TIM1_Init+0xd0>)
 8003ab4:	f003 fff4 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8003ab8:	b9d8      	cbnz	r0, 8003af2 <MX_TIM1_Init+0xc6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003abe:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ac0:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ac2:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ac4:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ac6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003aca:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003acc:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ace:	a901      	add	r1, sp, #4
 8003ad0:	480a      	ldr	r0, [pc, #40]	; (8003afc <MX_TIM1_Init+0xd0>)
 8003ad2:	f004 f8bf 	bl	8007c54 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ad6:	b970      	cbnz	r0, 8003af6 <MX_TIM1_Init+0xca>
  HAL_TIM_MspPostInit(&htim1);
 8003ad8:	4808      	ldr	r0, [pc, #32]	; (8003afc <MX_TIM1_Init+0xd0>)
 8003ada:	f000 fbcf 	bl	800427c <HAL_TIM_MspPostInit>
}
 8003ade:	b012      	add	sp, #72	; 0x48
 8003ae0:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003ae2:	f7ff ff65 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003ae6:	f7ff ff63 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003aea:	f7ff ff61 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003aee:	f7ff ff5f 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003af2:	f7ff ff5d 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003af6:	f7ff ff5b 	bl	80039b0 <Error_Handler>
 8003afa:	bf00      	nop
 8003afc:	20003140 	.word	0x20003140
 8003b00:	40010000 	.word	0x40010000

08003b04 <MX_TIM3_Init>:
{
 8003b04:	b500      	push	{lr}
 8003b06:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9308      	str	r3, [sp, #32]
 8003b0c:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	9302      	str	r3, [sp, #8]
 8003b12:	9303      	str	r3, [sp, #12]
 8003b14:	9304      	str	r3, [sp, #16]
 8003b16:	9305      	str	r3, [sp, #20]
 8003b18:	9306      	str	r3, [sp, #24]
 8003b1a:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8003b1c:	4820      	ldr	r0, [pc, #128]	; (8003ba0 <MX_TIM3_Init+0x9c>)
 8003b1e:	4a21      	ldr	r2, [pc, #132]	; (8003ba4 <MX_TIM3_Init+0xa0>)
 8003b20:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 42000 - 1;
 8003b22:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8003b26:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b28:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8003b2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b2e:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003b30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b34:	6102      	str	r2, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b36:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003b38:	f003 ff67 	bl	8007a0a <HAL_TIM_PWM_Init>
 8003b3c:	bb28      	cbnz	r0, 8003b8a <MX_TIM3_Init+0x86>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b42:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b44:	a908      	add	r1, sp, #32
 8003b46:	4816      	ldr	r0, [pc, #88]	; (8003ba0 <MX_TIM3_Init+0x9c>)
 8003b48:	f004 f848 	bl	8007bdc <HAL_TIMEx_MasterConfigSynchronization>
 8003b4c:	b9f8      	cbnz	r0, 8003b8e <MX_TIM3_Init+0x8a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b4e:	2360      	movs	r3, #96	; 0x60
 8003b50:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8003b52:	2200      	movs	r2, #0
 8003b54:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b56:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b58:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b5a:	a901      	add	r1, sp, #4
 8003b5c:	4810      	ldr	r0, [pc, #64]	; (8003ba0 <MX_TIM3_Init+0x9c>)
 8003b5e:	f003 ff9f 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8003b62:	b9b0      	cbnz	r0, 8003b92 <MX_TIM3_Init+0x8e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b64:	2204      	movs	r2, #4
 8003b66:	eb0d 0102 	add.w	r1, sp, r2
 8003b6a:	480d      	ldr	r0, [pc, #52]	; (8003ba0 <MX_TIM3_Init+0x9c>)
 8003b6c:	f003 ff98 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8003b70:	b988      	cbnz	r0, 8003b96 <MX_TIM3_Init+0x92>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b72:	2208      	movs	r2, #8
 8003b74:	a901      	add	r1, sp, #4
 8003b76:	480a      	ldr	r0, [pc, #40]	; (8003ba0 <MX_TIM3_Init+0x9c>)
 8003b78:	f003 ff92 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8003b7c:	b968      	cbnz	r0, 8003b9a <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8003b7e:	4808      	ldr	r0, [pc, #32]	; (8003ba0 <MX_TIM3_Init+0x9c>)
 8003b80:	f000 fb7c 	bl	800427c <HAL_TIM_MspPostInit>
}
 8003b84:	b00b      	add	sp, #44	; 0x2c
 8003b86:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003b8a:	f7ff ff11 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003b8e:	f7ff ff0f 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003b92:	f7ff ff0d 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003b96:	f7ff ff0b 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003b9a:	f7ff ff09 	bl	80039b0 <Error_Handler>
 8003b9e:	bf00      	nop
 8003ba0:	20002fb4 	.word	0x20002fb4
 8003ba4:	40000400 	.word	0x40000400

08003ba8 <MX_USART1_UART_Init>:
{
 8003ba8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8003baa:	480a      	ldr	r0, [pc, #40]	; (8003bd4 <MX_USART1_UART_Init+0x2c>)
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <MX_USART1_UART_Init+0x30>)
 8003bae:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003bb0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003bb4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bba:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bbc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bc2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bc6:	f004 f9f8 	bl	8007fba <HAL_UART_Init>
 8003bca:	b900      	cbnz	r0, 8003bce <MX_USART1_UART_Init+0x26>
}
 8003bcc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003bce:	f7ff feef 	bl	80039b0 <Error_Handler>
 8003bd2:	bf00      	nop
 8003bd4:	2000309c 	.word	0x2000309c
 8003bd8:	40011000 	.word	0x40011000

08003bdc <MX_USART2_UART_Init>:
{
 8003bdc:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8003bde:	480a      	ldr	r0, [pc, #40]	; (8003c08 <MX_USART2_UART_Init+0x2c>)
 8003be0:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <MX_USART2_UART_Init+0x30>)
 8003be2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8003be4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003be8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bea:	2300      	movs	r3, #0
 8003bec:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003bee:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003bf0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003bf2:	220c      	movs	r2, #12
 8003bf4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bf6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bf8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bfa:	f004 f9de 	bl	8007fba <HAL_UART_Init>
 8003bfe:	b900      	cbnz	r0, 8003c02 <MX_USART2_UART_Init+0x26>
}
 8003c00:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003c02:	f7ff fed5 	bl	80039b0 <Error_Handler>
 8003c06:	bf00      	nop
 8003c08:	20003258 	.word	0x20003258
 8003c0c:	40004400 	.word	0x40004400

08003c10 <MX_USART6_UART_Init>:
{
 8003c10:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 8003c12:	480a      	ldr	r0, [pc, #40]	; (8003c3c <MX_USART6_UART_Init+0x2c>)
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <MX_USART6_UART_Init+0x30>)
 8003c16:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 19200;
 8003c18:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8003c1c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003c22:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003c24:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003c26:	220c      	movs	r2, #12
 8003c28:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c2a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c2c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003c2e:	f004 f9c4 	bl	8007fba <HAL_UART_Init>
 8003c32:	b900      	cbnz	r0, 8003c36 <MX_USART6_UART_Init+0x26>
}
 8003c34:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003c36:	f7ff febb 	bl	80039b0 <Error_Handler>
 8003c3a:	bf00      	nop
 8003c3c:	20003180 	.word	0x20003180
 8003c40:	40011400 	.word	0x40011400

08003c44 <MX_TIM2_Init>:
{
 8003c44:	b500      	push	{lr}
 8003c46:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9308      	str	r3, [sp, #32]
 8003c4c:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	9302      	str	r3, [sp, #8]
 8003c52:	9303      	str	r3, [sp, #12]
 8003c54:	9304      	str	r3, [sp, #16]
 8003c56:	9305      	str	r3, [sp, #20]
 8003c58:	9306      	str	r3, [sp, #24]
 8003c5a:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8003c5c:	481d      	ldr	r0, [pc, #116]	; (8003cd4 <MX_TIM2_Init+0x90>)
 8003c5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c62:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8003c64:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c66:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 8003c68:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c6a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c6c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003c6e:	f003 fecc 	bl	8007a0a <HAL_TIM_PWM_Init>
 8003c72:	bb28      	cbnz	r0, 8003cc0 <MX_TIM2_Init+0x7c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c74:	2300      	movs	r3, #0
 8003c76:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c78:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c7a:	a908      	add	r1, sp, #32
 8003c7c:	4815      	ldr	r0, [pc, #84]	; (8003cd4 <MX_TIM2_Init+0x90>)
 8003c7e:	f003 ffad 	bl	8007bdc <HAL_TIMEx_MasterConfigSynchronization>
 8003c82:	b9f8      	cbnz	r0, 8003cc4 <MX_TIM2_Init+0x80>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c84:	2360      	movs	r3, #96	; 0x60
 8003c86:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8003c88:	2200      	movs	r2, #0
 8003c8a:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c8c:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c8e:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c90:	a901      	add	r1, sp, #4
 8003c92:	4810      	ldr	r0, [pc, #64]	; (8003cd4 <MX_TIM2_Init+0x90>)
 8003c94:	f003 ff04 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8003c98:	b9b0      	cbnz	r0, 8003cc8 <MX_TIM2_Init+0x84>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	eb0d 0102 	add.w	r1, sp, r2
 8003ca0:	480c      	ldr	r0, [pc, #48]	; (8003cd4 <MX_TIM2_Init+0x90>)
 8003ca2:	f003 fefd 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8003ca6:	b988      	cbnz	r0, 8003ccc <MX_TIM2_Init+0x88>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ca8:	2208      	movs	r2, #8
 8003caa:	a901      	add	r1, sp, #4
 8003cac:	4809      	ldr	r0, [pc, #36]	; (8003cd4 <MX_TIM2_Init+0x90>)
 8003cae:	f003 fef7 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8003cb2:	b968      	cbnz	r0, 8003cd0 <MX_TIM2_Init+0x8c>
  HAL_TIM_MspPostInit(&htim2);
 8003cb4:	4807      	ldr	r0, [pc, #28]	; (8003cd4 <MX_TIM2_Init+0x90>)
 8003cb6:	f000 fae1 	bl	800427c <HAL_TIM_MspPostInit>
}
 8003cba:	b00b      	add	sp, #44	; 0x2c
 8003cbc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003cc0:	f7ff fe76 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003cc4:	f7ff fe74 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003cc8:	f7ff fe72 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003ccc:	f7ff fe70 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003cd0:	f7ff fe6e 	bl	80039b0 <Error_Handler>
 8003cd4:	20003218 	.word	0x20003218

08003cd8 <MX_ADC1_Init>:
{
 8003cd8:	b500      	push	{lr}
 8003cda:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8003cdc:	2300      	movs	r3, #0
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	9302      	str	r3, [sp, #8]
 8003ce4:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8003ce6:	4814      	ldr	r0, [pc, #80]	; (8003d38 <MX_ADC1_Init+0x60>)
 8003ce8:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <MX_ADC1_Init+0x64>)
 8003cea:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003cec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cf0:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003cf2:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003cf4:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003cf6:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003cf8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003cfc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003cfe:	4a10      	ldr	r2, [pc, #64]	; (8003d40 <MX_ADC1_Init+0x68>)
 8003d00:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d02:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003d04:	2201      	movs	r2, #1
 8003d06:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003d08:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d0c:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d0e:	f001 f955 	bl	8004fbc <HAL_ADC_Init>
 8003d12:	b968      	cbnz	r0, 8003d30 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8003d14:	2312      	movs	r3, #18
 8003d16:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d20:	4669      	mov	r1, sp
 8003d22:	4805      	ldr	r0, [pc, #20]	; (8003d38 <MX_ADC1_Init+0x60>)
 8003d24:	f001 f976 	bl	8005014 <HAL_ADC_ConfigChannel>
 8003d28:	b920      	cbnz	r0, 8003d34 <MX_ADC1_Init+0x5c>
}
 8003d2a:	b005      	add	sp, #20
 8003d2c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003d30:	f7ff fe3e 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003d34:	f7ff fe3c 	bl	80039b0 <Error_Handler>
 8003d38:	20002ff4 	.word	0x20002ff4
 8003d3c:	40012000 	.word	0x40012000
 8003d40:	0f000001 	.word	0x0f000001

08003d44 <MX_RTC_Init>:
{
 8003d44:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 8003d46:	4809      	ldr	r0, [pc, #36]	; (8003d6c <MX_RTC_Init+0x28>)
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <MX_RTC_Init+0x2c>)
 8003d4a:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003d50:	227f      	movs	r2, #127	; 0x7f
 8003d52:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8003d54:	22ff      	movs	r2, #255	; 0xff
 8003d56:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d58:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d5a:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d5c:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d5e:	f003 f83c 	bl	8006dda <HAL_RTC_Init>
 8003d62:	b900      	cbnz	r0, 8003d66 <MX_RTC_Init+0x22>
}
 8003d64:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003d66:	f7ff fe23 	bl	80039b0 <Error_Handler>
 8003d6a:	bf00      	nop
 8003d6c:	20003120 	.word	0x20003120
 8003d70:	40002800 	.word	0x40002800

08003d74 <MX_CRC_Init>:
{
 8003d74:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8003d76:	4804      	ldr	r0, [pc, #16]	; (8003d88 <MX_CRC_Init+0x14>)
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <MX_CRC_Init+0x18>)
 8003d7a:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003d7c:	f001 fa66 	bl	800524c <HAL_CRC_Init>
 8003d80:	b900      	cbnz	r0, 8003d84 <MX_CRC_Init+0x10>
}
 8003d82:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003d84:	f7ff fe14 	bl	80039b0 <Error_Handler>
 8003d88:	20002fac 	.word	0x20002fac
 8003d8c:	40023000 	.word	0x40023000

08003d90 <MX_TIM11_Init>:
{
 8003d90:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 8003d92:	4808      	ldr	r0, [pc, #32]	; (8003db4 <MX_TIM11_Init+0x24>)
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <MX_TIM11_Init+0x28>)
 8003d96:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d9c:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 8400 - 1;
 8003d9e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003da2:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da4:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003da6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003da8:	f003 fe16 	bl	80079d8 <HAL_TIM_Base_Init>
 8003dac:	b900      	cbnz	r0, 8003db0 <MX_TIM11_Init+0x20>
}
 8003dae:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003db0:	f7ff fdfe 	bl	80039b0 <Error_Handler>
 8003db4:	200030dc 	.word	0x200030dc
 8003db8:	40014800 	.word	0x40014800

08003dbc <SystemClock_Config>:
{
 8003dbc:	b500      	push	{lr}
 8003dbe:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dc0:	2230      	movs	r2, #48	; 0x30
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	eb0d 0002 	add.w	r0, sp, r2
 8003dc8:	f006 ff0d 	bl	800abe6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dcc:	2300      	movs	r3, #0
 8003dce:	9307      	str	r3, [sp, #28]
 8003dd0:	9308      	str	r3, [sp, #32]
 8003dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8003dd6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dd8:	9302      	str	r3, [sp, #8]
 8003dda:	9303      	str	r3, [sp, #12]
 8003ddc:	9304      	str	r3, [sp, #16]
 8003dde:	9305      	str	r3, [sp, #20]
 8003de0:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	4a27      	ldr	r2, [pc, #156]	; (8003e84 <SystemClock_Config+0xc8>)
 8003de6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003de8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003dec:	6411      	str	r1, [r2, #64]	; 0x40
 8003dee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003df0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003df4:	9200      	str	r2, [sp, #0]
 8003df6:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	4a23      	ldr	r2, [pc, #140]	; (8003e88 <SystemClock_Config+0xcc>)
 8003dfc:	6813      	ldr	r3, [r2, #0]
 8003dfe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	6813      	ldr	r3, [r2, #0]
 8003e0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003e12:	2305      	movs	r3, #5
 8003e14:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e1a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e20:	2302      	movs	r3, #2
 8003e22:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003e28:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003e2a:	2219      	movs	r2, #25
 8003e2c:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003e2e:	22a8      	movs	r2, #168	; 0xa8
 8003e30:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e32:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e34:	2304      	movs	r3, #4
 8003e36:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e38:	a80c      	add	r0, sp, #48	; 0x30
 8003e3a:	f002 fb8f 	bl	800655c <HAL_RCC_OscConfig>
 8003e3e:	b9d8      	cbnz	r0, 8003e78 <SystemClock_Config+0xbc>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e40:	230f      	movs	r3, #15
 8003e42:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e44:	2102      	movs	r1, #2
 8003e46:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e50:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e52:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e54:	a807      	add	r0, sp, #28
 8003e56:	f002 fdcd 	bl	80069f4 <HAL_RCC_ClockConfig>
 8003e5a:	b978      	cbnz	r0, 8003e7c <SystemClock_Config+0xc0>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e64:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e66:	a802      	add	r0, sp, #8
 8003e68:	f002 fecc 	bl	8006c04 <HAL_RCCEx_PeriphCLKConfig>
 8003e6c:	b940      	cbnz	r0, 8003e80 <SystemClock_Config+0xc4>
  HAL_RCC_EnableCSS();
 8003e6e:	f002 fd67 	bl	8006940 <HAL_RCC_EnableCSS>
}
 8003e72:	b019      	add	sp, #100	; 0x64
 8003e74:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003e78:	f7ff fd9a 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003e7c:	f7ff fd98 	bl	80039b0 <Error_Handler>
    Error_Handler();
 8003e80:	f7ff fd96 	bl	80039b0 <Error_Handler>
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40007000 	.word	0x40007000

08003e8c <main>:
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b0b6      	sub	sp, #216	; 0xd8
  HAL_Init();
 8003e90:	f000 ffce 	bl	8004e30 <HAL_Init>
  SystemClock_Config();
 8003e94:	f7ff ff92 	bl	8003dbc <SystemClock_Config>
  MX_GPIO_Init();
 8003e98:	f7ff fc60 	bl	800375c <MX_GPIO_Init>
  MX_DMA_Init();
 8003e9c:	f7ff fd02 	bl	80038a4 <MX_DMA_Init>
  MX_I2C1_Init();
 8003ea0:	f7ff fd88 	bl	80039b4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003ea4:	f7ff fda2 	bl	80039ec <MX_SPI1_Init>
  MX_TIM1_Init();
 8003ea8:	f7ff fdc0 	bl	8003a2c <MX_TIM1_Init>
  MX_TIM3_Init();
 8003eac:	f7ff fe2a 	bl	8003b04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003eb0:	f7ff fe7a 	bl	8003ba8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003eb4:	f7ff fe92 	bl	8003bdc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8003eb8:	f7ff feaa 	bl	8003c10 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8003ebc:	f7ff fec2 	bl	8003c44 <MX_TIM2_Init>
  MX_ADC1_Init();
 8003ec0:	f7ff ff0a 	bl	8003cd8 <MX_ADC1_Init>
  MX_RTC_Init();
 8003ec4:	f7ff ff3e 	bl	8003d44 <MX_RTC_Init>
  MX_CRC_Init();
 8003ec8:	f7ff ff54 	bl	8003d74 <MX_CRC_Init>
  MX_TIM11_Init();
 8003ecc:	f7ff ff60 	bl	8003d90 <MX_TIM11_Init>
  Config_Init(&hi2c1);
 8003ed0:	483f      	ldr	r0, [pc, #252]	; (8003fd0 <main+0x144>)
 8003ed2:	f7fd f8a3 	bl	800101c <Config_Init>
  osMutexDef(SPIMutex);
 8003ed6:	2500      	movs	r5, #0
 8003ed8:	9534      	str	r5, [sp, #208]	; 0xd0
 8003eda:	9535      	str	r5, [sp, #212]	; 0xd4
  SPIMutexHandle = osMutexCreate(osMutex(SPIMutex));
 8003edc:	a834      	add	r0, sp, #208	; 0xd0
 8003ede:	f004 fba1 	bl	8008624 <osMutexCreate>
 8003ee2:	4b3c      	ldr	r3, [pc, #240]	; (8003fd4 <main+0x148>)
 8003ee4:	6018      	str	r0, [r3, #0]
  osTimerDef(Config, ConfigSaveTmr);
 8003ee6:	4b3c      	ldr	r3, [pc, #240]	; (8003fd8 <main+0x14c>)
 8003ee8:	9332      	str	r3, [sp, #200]	; 0xc8
 8003eea:	9533      	str	r5, [sp, #204]	; 0xcc
  ConfigHandle = osTimerCreate(osTimer(Config), osTimerOnce, NULL);
 8003eec:	462a      	mov	r2, r5
 8003eee:	4629      	mov	r1, r5
 8003ef0:	a832      	add	r0, sp, #200	; 0xc8
 8003ef2:	f004 fb75 	bl	80085e0 <osTimerCreate>
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <main+0x150>)
 8003ef8:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8003efa:	4c39      	ldr	r4, [pc, #228]	; (8003fe0 <main+0x154>)
 8003efc:	ae2b      	add	r6, sp, #172	; 0xac
 8003efe:	4627      	mov	r7, r4
 8003f00:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003f02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003f04:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003f08:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	a82b      	add	r0, sp, #172	; 0xac
 8003f10:	f004 fb27 	bl	8008562 <osThreadCreate>
 8003f14:	4b33      	ldr	r3, [pc, #204]	; (8003fe4 <main+0x158>)
 8003f16:	6018      	str	r0, [r3, #0]
  osThreadDef(PowerRegulation, RegulationTask, osPriorityRealtime, 0, 256);
 8003f18:	ae24      	add	r6, sp, #144	; 0x90
 8003f1a:	f104 071c 	add.w	r7, r4, #28
 8003f1e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003f20:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003f22:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003f26:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  PowerRegulationHandle = osThreadCreate(osThread(PowerRegulation), NULL);
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	a824      	add	r0, sp, #144	; 0x90
 8003f2e:	f004 fb18 	bl	8008562 <osThreadCreate>
 8003f32:	4b2d      	ldr	r3, [pc, #180]	; (8003fe8 <main+0x15c>)
 8003f34:	6018      	str	r0, [r3, #0]
  osThreadDef(Diplays, DisplayTask, osPriorityNormal, 0, 256);
 8003f36:	ae1d      	add	r6, sp, #116	; 0x74
 8003f38:	f104 0738 	add.w	r7, r4, #56	; 0x38
 8003f3c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003f3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003f40:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003f44:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DiplaysHandle = osThreadCreate(osThread(Diplays), NULL);
 8003f48:	4629      	mov	r1, r5
 8003f4a:	a81d      	add	r0, sp, #116	; 0x74
 8003f4c:	f004 fb09 	bl	8008562 <osThreadCreate>
 8003f50:	4b26      	ldr	r3, [pc, #152]	; (8003fec <main+0x160>)
 8003f52:	6018      	str	r0, [r3, #0]
  osThreadDef(Test, TestTask, osPriorityLow, 0, 128);
 8003f54:	ae16      	add	r6, sp, #88	; 0x58
 8003f56:	f104 0754 	add.w	r7, r4, #84	; 0x54
 8003f5a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003f5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003f5e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003f62:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TestHandle = osThreadCreate(osThread(Test), NULL);
 8003f66:	4629      	mov	r1, r5
 8003f68:	a816      	add	r0, sp, #88	; 0x58
 8003f6a:	f004 fafa 	bl	8008562 <osThreadCreate>
 8003f6e:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <main+0x164>)
 8003f70:	6018      	str	r0, [r3, #0]
  osThreadDef(Ethernet, EthernetTask, osPriorityHigh, 0, 256);
 8003f72:	ae0f      	add	r6, sp, #60	; 0x3c
 8003f74:	f104 0770 	add.w	r7, r4, #112	; 0x70
 8003f78:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003f7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003f7c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003f80:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  EthernetHandle = osThreadCreate(osThread(Ethernet), NULL);
 8003f84:	4629      	mov	r1, r5
 8003f86:	a80f      	add	r0, sp, #60	; 0x3c
 8003f88:	f004 faeb 	bl	8008562 <osThreadCreate>
 8003f8c:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <main+0x168>)
 8003f8e:	6018      	str	r0, [r3, #0]
  osThreadDef(nRF24L01, RadioTask, osPriorityAboveNormal, 0, 256);
 8003f90:	ae08      	add	r6, sp, #32
 8003f92:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 8003f96:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003f98:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003f9a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003f9e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  nRF24L01Handle = osThreadCreate(osThread(nRF24L01), NULL);
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	a808      	add	r0, sp, #32
 8003fa6:	f004 fadc 	bl	8008562 <osThreadCreate>
 8003faa:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <main+0x16c>)
 8003fac:	6018      	str	r0, [r3, #0]
  osThreadDef(DataLog, DataLogTask, osPriorityBelowNormal, 0, 256);
 8003fae:	ae01      	add	r6, sp, #4
 8003fb0:	34a8      	adds	r4, #168	; 0xa8
 8003fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fb4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003fb6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003fba:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DataLogHandle = osThreadCreate(osThread(DataLog), NULL);
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	a801      	add	r0, sp, #4
 8003fc2:	f004 face 	bl	8008562 <osThreadCreate>
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <main+0x170>)
 8003fc8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003fca:	f004 fac5 	bl	8008558 <osKernelStart>
 8003fce:	e7fe      	b.n	8003fce <main+0x142>
 8003fd0:	20002f58 	.word	0x20002f58
 8003fd4:	2000329c 	.word	0x2000329c
 8003fd8:	08003759 	.word	0x08003759
 8003fdc:	20002f54 	.word	0x20002f54
 8003fe0:	0800b458 	.word	0x0800b458
 8003fe4:	20002e8c 	.word	0x20002e8c
 8003fe8:	20002f50 	.word	0x20002f50
 8003fec:	20003298 	.word	0x20003298
 8003ff0:	2000311c 	.word	0x2000311c
 8003ff4:	200032a4 	.word	0x200032a4
 8003ff8:	20002e84 	.word	0x20002e84
 8003ffc:	20002e88 	.word	0x20002e88

08004000 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004000:	b500      	push	{lr}
 8004002:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004004:	2200      	movs	r2, #0
 8004006:	9200      	str	r2, [sp, #0]
 8004008:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <HAL_MspInit+0x40>)
 800400a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800400c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004010:	6459      	str	r1, [r3, #68]	; 0x44
 8004012:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004014:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8004018:	9100      	str	r1, [sp, #0]
 800401a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800401c:	9201      	str	r2, [sp, #4]
 800401e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004020:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004024:	6419      	str	r1, [r3, #64]	; 0x40
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004030:	210f      	movs	r1, #15
 8004032:	f06f 0001 	mvn.w	r0, #1
 8004036:	f001 f8c7 	bl	80051c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800403a:	b003      	add	sp, #12
 800403c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004040:	40023800 	.word	0x40023800

08004044 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8004044:	6802      	ldr	r2, [r0, #0]
 8004046:	4b09      	ldr	r3, [pc, #36]	; (800406c <HAL_ADC_MspInit+0x28>)
 8004048:	429a      	cmp	r2, r3
 800404a:	d000      	beq.n	800404e <HAL_ADC_MspInit+0xa>
 800404c:	4770      	bx	lr
{
 800404e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004050:	2300      	movs	r3, #0
 8004052:	9301      	str	r3, [sp, #4]
 8004054:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_ADC_MspInit+0x2c>)
 8004056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
 800405e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004068:	b002      	add	sp, #8
 800406a:	4770      	bx	lr
 800406c:	40012000 	.word	0x40012000
 8004070:	40023800 	.word	0x40023800

08004074 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8004074:	6802      	ldr	r2, [r0, #0]
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_CRC_MspInit+0x28>)
 8004078:	429a      	cmp	r2, r3
 800407a:	d000      	beq.n	800407e <HAL_CRC_MspInit+0xa>
 800407c:	4770      	bx	lr
{
 800407e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004080:	2300      	movs	r3, #0
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_CRC_MspInit+0x2c>)
 8004086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004088:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004098:	b002      	add	sp, #8
 800409a:	4770      	bx	lr
 800409c:	40023000 	.word	0x40023000
 80040a0:	40023800 	.word	0x40023800

080040a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040a4:	b530      	push	{r4, r5, lr}
 80040a6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a8:	2300      	movs	r3, #0
 80040aa:	9303      	str	r3, [sp, #12]
 80040ac:	9304      	str	r3, [sp, #16]
 80040ae:	9305      	str	r3, [sp, #20]
 80040b0:	9306      	str	r3, [sp, #24]
 80040b2:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 80040b4:	6802      	ldr	r2, [r0, #0]
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <HAL_I2C_MspInit+0x68>)
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80040bc:	b009      	add	sp, #36	; 0x24
 80040be:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040c0:	2500      	movs	r5, #0
 80040c2:	9501      	str	r5, [sp, #4]
 80040c4:	4c12      	ldr	r4, [pc, #72]	; (8004110 <HAL_I2C_MspInit+0x6c>)
 80040c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040c8:	f043 0302 	orr.w	r3, r3, #2
 80040cc:	6323      	str	r3, [r4, #48]	; 0x30
 80040ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80040d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040de:	2312      	movs	r3, #18
 80040e0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040e2:	2301      	movs	r3, #1
 80040e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e6:	2303      	movs	r3, #3
 80040e8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040ea:	2304      	movs	r3, #4
 80040ec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ee:	a903      	add	r1, sp, #12
 80040f0:	4808      	ldr	r0, [pc, #32]	; (8004114 <HAL_I2C_MspInit+0x70>)
 80040f2:	f001 fb37 	bl	8005764 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040f6:	9502      	str	r5, [sp, #8]
 80040f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040fe:	6423      	str	r3, [r4, #64]	; 0x40
 8004100:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004106:	9302      	str	r3, [sp, #8]
 8004108:	9b02      	ldr	r3, [sp, #8]
}
 800410a:	e7d7      	b.n	80040bc <HAL_I2C_MspInit+0x18>
 800410c:	40005400 	.word	0x40005400
 8004110:	40023800 	.word	0x40023800
 8004114:	40020400 	.word	0x40020400

08004118 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8004118:	6802      	ldr	r2, [r0, #0]
 800411a:	4b04      	ldr	r3, [pc, #16]	; (800412c <HAL_RTC_MspInit+0x14>)
 800411c:	429a      	cmp	r2, r3
 800411e:	d000      	beq.n	8004122 <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004120:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8004122:	4b03      	ldr	r3, [pc, #12]	; (8004130 <HAL_RTC_MspInit+0x18>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]
}
 8004128:	e7fa      	b.n	8004120 <HAL_RTC_MspInit+0x8>
 800412a:	bf00      	nop
 800412c:	40002800 	.word	0x40002800
 8004130:	42470e3c 	.word	0x42470e3c

08004134 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004134:	b500      	push	{lr}
 8004136:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004138:	2300      	movs	r3, #0
 800413a:	9303      	str	r3, [sp, #12]
 800413c:	9304      	str	r3, [sp, #16]
 800413e:	9305      	str	r3, [sp, #20]
 8004140:	9306      	str	r3, [sp, #24]
 8004142:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8004144:	6802      	ldr	r2, [r0, #0]
 8004146:	4b15      	ldr	r3, [pc, #84]	; (800419c <HAL_SPI_MspInit+0x68>)
 8004148:	429a      	cmp	r2, r3
 800414a:	d002      	beq.n	8004152 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800414c:	b009      	add	sp, #36	; 0x24
 800414e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004152:	2100      	movs	r1, #0
 8004154:	9101      	str	r1, [sp, #4]
 8004156:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800415a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800415c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004160:	645a      	str	r2, [r3, #68]	; 0x44
 8004162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004164:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004168:	9201      	str	r2, [sp, #4]
 800416a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800416c:	9102      	str	r1, [sp, #8]
 800416e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004170:	f042 0201 	orr.w	r2, r2, #1
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	9302      	str	r3, [sp, #8]
 800417e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004180:	23e0      	movs	r3, #224	; 0xe0
 8004182:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004184:	2302      	movs	r3, #2
 8004186:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004188:	2303      	movs	r3, #3
 800418a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800418c:	2305      	movs	r3, #5
 800418e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004190:	a903      	add	r1, sp, #12
 8004192:	4803      	ldr	r0, [pc, #12]	; (80041a0 <HAL_SPI_MspInit+0x6c>)
 8004194:	f001 fae6 	bl	8005764 <HAL_GPIO_Init>
}
 8004198:	e7d8      	b.n	800414c <HAL_SPI_MspInit+0x18>
 800419a:	bf00      	nop
 800419c:	40013000 	.word	0x40013000
 80041a0:	40020000 	.word	0x40020000

080041a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80041a4:	b510      	push	{r4, lr}
 80041a6:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 80041a8:	6803      	ldr	r3, [r0, #0]
 80041aa:	4a21      	ldr	r2, [pc, #132]	; (8004230 <HAL_TIM_PWM_MspInit+0x8c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d007      	beq.n	80041c0 <HAL_TIM_PWM_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b4:	d021      	beq.n	80041fa <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 80041b6:	4a1f      	ldr	r2, [pc, #124]	; (8004234 <HAL_TIM_PWM_MspInit+0x90>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d02b      	beq.n	8004214 <HAL_TIM_PWM_MspInit+0x70>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80041bc:	b004      	add	sp, #16
 80041be:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041c0:	2400      	movs	r4, #0
 80041c2:	9401      	str	r4, [sp, #4]
 80041c4:	4b1c      	ldr	r3, [pc, #112]	; (8004238 <HAL_TIM_PWM_MspInit+0x94>)
 80041c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c8:	f042 0201 	orr.w	r2, r2, #1
 80041cc:	645a      	str	r2, [r3, #68]	; 0x44
 80041ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80041d8:	4622      	mov	r2, r4
 80041da:	4621      	mov	r1, r4
 80041dc:	2019      	movs	r0, #25
 80041de:	f000 fff3 	bl	80051c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80041e2:	2019      	movs	r0, #25
 80041e4:	f001 f824 	bl	8005230 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80041e8:	4622      	mov	r2, r4
 80041ea:	2105      	movs	r1, #5
 80041ec:	201a      	movs	r0, #26
 80041ee:	f000 ffeb 	bl	80051c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80041f2:	201a      	movs	r0, #26
 80041f4:	f001 f81c 	bl	8005230 <HAL_NVIC_EnableIRQ>
 80041f8:	e7e0      	b.n	80041bc <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	9302      	str	r3, [sp, #8]
 80041fe:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <HAL_TIM_PWM_MspInit+0x94>)
 8004200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	641a      	str	r2, [r3, #64]	; 0x40
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	9302      	str	r3, [sp, #8]
 8004210:	9b02      	ldr	r3, [sp, #8]
 8004212:	e7d3      	b.n	80041bc <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004214:	2300      	movs	r3, #0
 8004216:	9303      	str	r3, [sp, #12]
 8004218:	4b07      	ldr	r3, [pc, #28]	; (8004238 <HAL_TIM_PWM_MspInit+0x94>)
 800421a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800421c:	f042 0202 	orr.w	r2, r2, #2
 8004220:	641a      	str	r2, [r3, #64]	; 0x40
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	9303      	str	r3, [sp, #12]
 800422a:	9b03      	ldr	r3, [sp, #12]
}
 800422c:	e7c6      	b.n	80041bc <HAL_TIM_PWM_MspInit+0x18>
 800422e:	bf00      	nop
 8004230:	40010000 	.word	0x40010000
 8004234:	40000400 	.word	0x40000400
 8004238:	40023800 	.word	0x40023800

0800423c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 800423c:	6802      	ldr	r2, [r0, #0]
 800423e:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <HAL_TIM_Base_MspInit+0x3c>)
 8004240:	429a      	cmp	r2, r3
 8004242:	d000      	beq.n	8004246 <HAL_TIM_Base_MspInit+0xa>
 8004244:	4770      	bx	lr
{
 8004246:	b500      	push	{lr}
 8004248:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800424a:	2200      	movs	r2, #0
 800424c:	9201      	str	r2, [sp, #4]
 800424e:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8004252:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004254:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8004258:	6459      	str	r1, [r3, #68]	; 0x44
 800425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	9b01      	ldr	r3, [sp, #4]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8004264:	2105      	movs	r1, #5
 8004266:	201a      	movs	r0, #26
 8004268:	f000 ffae 	bl	80051c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800426c:	201a      	movs	r0, #26
 800426e:	f000 ffdf 	bl	8005230 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004272:	b003      	add	sp, #12
 8004274:	f85d fb04 	ldr.w	pc, [sp], #4
 8004278:	40014800 	.word	0x40014800

0800427c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800427c:	b570      	push	{r4, r5, r6, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004280:	2300      	movs	r3, #0
 8004282:	9305      	str	r3, [sp, #20]
 8004284:	9306      	str	r3, [sp, #24]
 8004286:	9307      	str	r3, [sp, #28]
 8004288:	9308      	str	r3, [sp, #32]
 800428a:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim->Instance==TIM1)
 800428c:	6803      	ldr	r3, [r0, #0]
 800428e:	4a32      	ldr	r2, [pc, #200]	; (8004358 <HAL_TIM_MspPostInit+0xdc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d007      	beq.n	80042a4 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8004294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004298:	d01c      	beq.n	80042d4 <HAL_TIM_MspPostInit+0x58>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 800429a:	4a30      	ldr	r2, [pc, #192]	; (800435c <HAL_TIM_MspPostInit+0xe0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d045      	beq.n	800432c <HAL_TIM_MspPostInit+0xb0>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80042a0:	b00a      	add	sp, #40	; 0x28
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042a4:	2300      	movs	r3, #0
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	4b2d      	ldr	r3, [pc, #180]	; (8004360 <HAL_TIM_MspPostInit+0xe4>)
 80042aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ac:	f042 0201 	orr.w	r2, r2, #1
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	9301      	str	r3, [sp, #4]
 80042ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80042bc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80042c0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c2:	2302      	movs	r3, #2
 80042c4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042c6:	2301      	movs	r3, #1
 80042c8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ca:	a905      	add	r1, sp, #20
 80042cc:	4825      	ldr	r0, [pc, #148]	; (8004364 <HAL_TIM_MspPostInit+0xe8>)
 80042ce:	f001 fa49 	bl	8005764 <HAL_GPIO_Init>
 80042d2:	e7e5      	b.n	80042a0 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d4:	2400      	movs	r4, #0
 80042d6:	9402      	str	r4, [sp, #8]
 80042d8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80042dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
 80042e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e6:	f002 0201 	and.w	r2, r2, #1
 80042ea:	9202      	str	r2, [sp, #8]
 80042ec:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ee:	9403      	str	r4, [sp, #12]
 80042f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f2:	f042 0202 	orr.w	r2, r2, #2
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	9303      	str	r3, [sp, #12]
 8004300:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004302:	2501      	movs	r5, #1
 8004304:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004306:	2602      	movs	r6, #2
 8004308:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800430a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800430c:	a905      	add	r1, sp, #20
 800430e:	4815      	ldr	r0, [pc, #84]	; (8004364 <HAL_TIM_MspPostInit+0xe8>)
 8004310:	f001 fa28 	bl	8005764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8004314:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8004318:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431e:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004320:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004322:	a905      	add	r1, sp, #20
 8004324:	4810      	ldr	r0, [pc, #64]	; (8004368 <HAL_TIM_MspPostInit+0xec>)
 8004326:	f001 fa1d 	bl	8005764 <HAL_GPIO_Init>
 800432a:	e7b9      	b.n	80042a0 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800432c:	2300      	movs	r3, #0
 800432e:	9304      	str	r3, [sp, #16]
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_TIM_MspPostInit+0xe4>)
 8004332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004334:	f042 0202 	orr.w	r2, r2, #2
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	9304      	str	r3, [sp, #16]
 8004342:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8004344:	2331      	movs	r3, #49	; 0x31
 8004346:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004348:	2302      	movs	r3, #2
 800434a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800434c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800434e:	a905      	add	r1, sp, #20
 8004350:	4805      	ldr	r0, [pc, #20]	; (8004368 <HAL_TIM_MspPostInit+0xec>)
 8004352:	f001 fa07 	bl	8005764 <HAL_GPIO_Init>
}
 8004356:	e7a3      	b.n	80042a0 <HAL_TIM_MspPostInit+0x24>
 8004358:	40010000 	.word	0x40010000
 800435c:	40000400 	.word	0x40000400
 8004360:	40023800 	.word	0x40023800
 8004364:	40020000 	.word	0x40020000
 8004368:	40020400 	.word	0x40020400

0800436c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800436c:	b530      	push	{r4, r5, lr}
 800436e:	b08d      	sub	sp, #52	; 0x34
 8004370:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004372:	2300      	movs	r3, #0
 8004374:	9307      	str	r3, [sp, #28]
 8004376:	9308      	str	r3, [sp, #32]
 8004378:	9309      	str	r3, [sp, #36]	; 0x24
 800437a:	930a      	str	r3, [sp, #40]	; 0x28
 800437c:	930b      	str	r3, [sp, #44]	; 0x2c
  if(huart->Instance==USART1)
 800437e:	6803      	ldr	r3, [r0, #0]
 8004380:	4a6e      	ldr	r2, [pc, #440]	; (800453c <HAL_UART_MspInit+0x1d0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d008      	beq.n	8004398 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8004386:	4a6e      	ldr	r2, [pc, #440]	; (8004540 <HAL_UART_MspInit+0x1d4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d04b      	beq.n	8004424 <HAL_UART_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 800438c:	4a6d      	ldr	r2, [pc, #436]	; (8004544 <HAL_UART_MspInit+0x1d8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	f000 808c 	beq.w	80044ac <HAL_UART_MspInit+0x140>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004394:	b00d      	add	sp, #52	; 0x34
 8004396:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004398:	2500      	movs	r5, #0
 800439a:	9501      	str	r5, [sp, #4]
 800439c:	4b6a      	ldr	r3, [pc, #424]	; (8004548 <HAL_UART_MspInit+0x1dc>)
 800439e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a0:	f042 0210 	orr.w	r2, r2, #16
 80043a4:	645a      	str	r2, [r3, #68]	; 0x44
 80043a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a8:	f002 0210 	and.w	r2, r2, #16
 80043ac:	9201      	str	r2, [sp, #4]
 80043ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043b0:	9502      	str	r5, [sp, #8]
 80043b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b4:	f042 0202 	orr.w	r2, r2, #2
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	9302      	str	r3, [sp, #8]
 80043c2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043c4:	23c0      	movs	r3, #192	; 0xc0
 80043c6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c8:	2302      	movs	r3, #2
 80043ca:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043cc:	2303      	movs	r3, #3
 80043ce:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043d0:	2307      	movs	r3, #7
 80043d2:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d4:	a907      	add	r1, sp, #28
 80043d6:	485d      	ldr	r0, [pc, #372]	; (800454c <HAL_UART_MspInit+0x1e0>)
 80043d8:	f001 f9c4 	bl	8005764 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80043dc:	485c      	ldr	r0, [pc, #368]	; (8004550 <HAL_UART_MspInit+0x1e4>)
 80043de:	4b5d      	ldr	r3, [pc, #372]	; (8004554 <HAL_UART_MspInit+0x1e8>)
 80043e0:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80043e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043e6:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043e8:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043ea:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043f0:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043f2:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043f4:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80043f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043fa:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043fc:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043fe:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004400:	f000 ffc8 	bl	8005394 <HAL_DMA_Init>
 8004404:	b958      	cbnz	r0, 800441e <HAL_UART_MspInit+0xb2>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004406:	4b52      	ldr	r3, [pc, #328]	; (8004550 <HAL_UART_MspInit+0x1e4>)
 8004408:	6363      	str	r3, [r4, #52]	; 0x34
 800440a:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800440c:	2200      	movs	r2, #0
 800440e:	2105      	movs	r1, #5
 8004410:	2025      	movs	r0, #37	; 0x25
 8004412:	f000 fed9 	bl	80051c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004416:	2025      	movs	r0, #37	; 0x25
 8004418:	f000 ff0a 	bl	8005230 <HAL_NVIC_EnableIRQ>
 800441c:	e7ba      	b.n	8004394 <HAL_UART_MspInit+0x28>
      Error_Handler();
 800441e:	f7ff fac7 	bl	80039b0 <Error_Handler>
 8004422:	e7f0      	b.n	8004406 <HAL_UART_MspInit+0x9a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004424:	2500      	movs	r5, #0
 8004426:	9503      	str	r5, [sp, #12]
 8004428:	4b47      	ldr	r3, [pc, #284]	; (8004548 <HAL_UART_MspInit+0x1dc>)
 800442a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800442c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004430:	641a      	str	r2, [r3, #64]	; 0x40
 8004432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004434:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004438:	9203      	str	r2, [sp, #12]
 800443a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800443c:	9504      	str	r5, [sp, #16]
 800443e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004440:	f042 0201 	orr.w	r2, r2, #1
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	9304      	str	r3, [sp, #16]
 800444e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004450:	230c      	movs	r3, #12
 8004452:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004454:	2302      	movs	r3, #2
 8004456:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004458:	2303      	movs	r3, #3
 800445a:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800445c:	2307      	movs	r3, #7
 800445e:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004460:	a907      	add	r1, sp, #28
 8004462:	483d      	ldr	r0, [pc, #244]	; (8004558 <HAL_UART_MspInit+0x1ec>)
 8004464:	f001 f97e 	bl	8005764 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004468:	483c      	ldr	r0, [pc, #240]	; (800455c <HAL_UART_MspInit+0x1f0>)
 800446a:	4b3d      	ldr	r3, [pc, #244]	; (8004560 <HAL_UART_MspInit+0x1f4>)
 800446c:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800446e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004472:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004474:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004476:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800447c:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800447e:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004480:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004482:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004484:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004486:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004488:	f000 ff84 	bl	8005394 <HAL_DMA_Init>
 800448c:	b958      	cbnz	r0, 80044a6 <HAL_UART_MspInit+0x13a>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800448e:	4b33      	ldr	r3, [pc, #204]	; (800455c <HAL_UART_MspInit+0x1f0>)
 8004490:	6363      	str	r3, [r4, #52]	; 0x34
 8004492:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004494:	2200      	movs	r2, #0
 8004496:	2105      	movs	r1, #5
 8004498:	2026      	movs	r0, #38	; 0x26
 800449a:	f000 fe95 	bl	80051c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800449e:	2026      	movs	r0, #38	; 0x26
 80044a0:	f000 fec6 	bl	8005230 <HAL_NVIC_EnableIRQ>
 80044a4:	e776      	b.n	8004394 <HAL_UART_MspInit+0x28>
      Error_Handler();
 80044a6:	f7ff fa83 	bl	80039b0 <Error_Handler>
 80044aa:	e7f0      	b.n	800448e <HAL_UART_MspInit+0x122>
    __HAL_RCC_USART6_CLK_ENABLE();
 80044ac:	2500      	movs	r5, #0
 80044ae:	9505      	str	r5, [sp, #20]
 80044b0:	4b25      	ldr	r3, [pc, #148]	; (8004548 <HAL_UART_MspInit+0x1dc>)
 80044b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044b4:	f042 0220 	orr.w	r2, r2, #32
 80044b8:	645a      	str	r2, [r3, #68]	; 0x44
 80044ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044bc:	f002 0220 	and.w	r2, r2, #32
 80044c0:	9205      	str	r2, [sp, #20]
 80044c2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c4:	9506      	str	r5, [sp, #24]
 80044c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c8:	f042 0201 	orr.w	r2, r2, #1
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	9306      	str	r3, [sp, #24]
 80044d6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80044d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80044dc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044de:	2302      	movs	r3, #2
 80044e0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e2:	2303      	movs	r3, #3
 80044e4:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80044e6:	2308      	movs	r3, #8
 80044e8:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ea:	a907      	add	r1, sp, #28
 80044ec:	481a      	ldr	r0, [pc, #104]	; (8004558 <HAL_UART_MspInit+0x1ec>)
 80044ee:	f001 f939 	bl	8005764 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80044f2:	481c      	ldr	r0, [pc, #112]	; (8004564 <HAL_UART_MspInit+0x1f8>)
 80044f4:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <HAL_UART_MspInit+0x1fc>)
 80044f6:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80044f8:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 80044fc:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044fe:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004500:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004506:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004508:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800450a:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800450c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004510:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004512:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004514:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004516:	f000 ff3d 	bl	8005394 <HAL_DMA_Init>
 800451a:	b958      	cbnz	r0, 8004534 <HAL_UART_MspInit+0x1c8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800451c:	4b11      	ldr	r3, [pc, #68]	; (8004564 <HAL_UART_MspInit+0x1f8>)
 800451e:	6363      	str	r3, [r4, #52]	; 0x34
 8004520:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004522:	2200      	movs	r2, #0
 8004524:	2105      	movs	r1, #5
 8004526:	2047      	movs	r0, #71	; 0x47
 8004528:	f000 fe4e 	bl	80051c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800452c:	2047      	movs	r0, #71	; 0x47
 800452e:	f000 fe7f 	bl	8005230 <HAL_NVIC_EnableIRQ>
}
 8004532:	e72f      	b.n	8004394 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8004534:	f7ff fa3c 	bl	80039b0 <Error_Handler>
 8004538:	e7f0      	b.n	800451c <HAL_UART_MspInit+0x1b0>
 800453a:	bf00      	nop
 800453c:	40011000 	.word	0x40011000
 8004540:	40004400 	.word	0x40004400
 8004544:	40011400 	.word	0x40011400
 8004548:	40023800 	.word	0x40023800
 800454c:	40020400 	.word	0x40020400
 8004550:	2000303c 	.word	0x2000303c
 8004554:	40026440 	.word	0x40026440
 8004558:	40020000 	.word	0x40020000
 800455c:	20002e90 	.word	0x20002e90
 8004560:	40026088 	.word	0x40026088
 8004564:	20002ef0 	.word	0x20002ef0
 8004568:	40026428 	.word	0x40026428

0800456c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800456c:	b510      	push	{r4, lr}
 800456e:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004570:	2200      	movs	r2, #0
 8004572:	4601      	mov	r1, r0
 8004574:	2019      	movs	r0, #25
 8004576:	f000 fe27 	bl	80051c8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800457a:	2019      	movs	r0, #25
 800457c:	f000 fe58 	bl	8005230 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8004580:	2400      	movs	r4, #0
 8004582:	9401      	str	r4, [sp, #4]
 8004584:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <HAL_InitTick+0x68>)
 8004586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004588:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800458c:	645a      	str	r2, [r3, #68]	; 0x44
 800458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004598:	a902      	add	r1, sp, #8
 800459a:	a803      	add	r0, sp, #12
 800459c:	f002 fb00 	bl	8006ba0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80045a0:	f002 faee 	bl	8006b80 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <HAL_InitTick+0x6c>)
 80045a6:	fba3 2300 	umull	r2, r3, r3, r0
 80045aa:	0c9b      	lsrs	r3, r3, #18
 80045ac:	3b01      	subs	r3, #1
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80045ae:	480b      	ldr	r0, [pc, #44]	; (80045dc <HAL_InitTick+0x70>)
 80045b0:	4a0b      	ldr	r2, [pc, #44]	; (80045e0 <HAL_InitTick+0x74>)
 80045b2:	6002      	str	r2, [r0, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 80045b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045b8:	60c2      	str	r2, [r0, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80045ba:	6043      	str	r3, [r0, #4]
  htim10.Init.ClockDivision = 0;
 80045bc:	6104      	str	r4, [r0, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045be:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80045c0:	f003 fa0a 	bl	80079d8 <HAL_TIM_Base_Init>
 80045c4:	b110      	cbz	r0, 80045cc <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80045c6:	2001      	movs	r0, #1
}
 80045c8:	b008      	add	sp, #32
 80045ca:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim10);
 80045cc:	4803      	ldr	r0, [pc, #12]	; (80045dc <HAL_InitTick+0x70>)
 80045ce:	f003 f8e3 	bl	8007798 <HAL_TIM_Base_Start_IT>
 80045d2:	e7f9      	b.n	80045c8 <HAL_InitTick+0x5c>
 80045d4:	40023800 	.word	0x40023800
 80045d8:	431bde83 	.word	0x431bde83
 80045dc:	200032a8 	.word	0x200032a8
 80045e0:	40014400 	.word	0x40014400

080045e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80045e6:	f002 fafb 	bl	8006be0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80045ea:	bd08      	pop	{r3, pc}

080045ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045ec:	e7fe      	b.n	80045ec <HardFault_Handler>

080045ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045ee:	e7fe      	b.n	80045ee <MemManage_Handler>

080045f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045f0:	e7fe      	b.n	80045f0 <BusFault_Handler>

080045f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045f2:	e7fe      	b.n	80045f2 <UsageFault_Handler>

080045f4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045f4:	4770      	bx	lr

080045f6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80045f6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80045f8:	2002      	movs	r0, #2
 80045fa:	f001 f993 	bl	8005924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80045fe:	bd08      	pop	{r3, pc}

08004600 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004600:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004602:	4802      	ldr	r0, [pc, #8]	; (800460c <DMA1_Stream5_IRQHandler+0xc>)
 8004604:	f000 ffbe 	bl	8005584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004608:	bd08      	pop	{r3, pc}
 800460a:	bf00      	nop
 800460c:	20002e90 	.word	0x20002e90

08004610 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004610:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004612:	4803      	ldr	r0, [pc, #12]	; (8004620 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004614:	f003 f8d5 	bl	80077c2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004618:	4802      	ldr	r0, [pc, #8]	; (8004624 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800461a:	f003 f8d2 	bl	80077c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800461e:	bd08      	pop	{r3, pc}
 8004620:	20003140 	.word	0x20003140
 8004624:	200032a8 	.word	0x200032a8

08004628 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004628:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800462a:	4803      	ldr	r0, [pc, #12]	; (8004638 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800462c:	f003 f8c9 	bl	80077c2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004630:	4802      	ldr	r0, [pc, #8]	; (800463c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004632:	f003 f8c6 	bl	80077c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004636:	bd08      	pop	{r3, pc}
 8004638:	20003140 	.word	0x20003140
 800463c:	200030dc 	.word	0x200030dc

08004640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004640:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_small_comm);
 8004642:	4802      	ldr	r0, [pc, #8]	; (800464c <USART1_IRQHandler+0xc>)
 8004644:	f7fe fffa 	bl	800363c <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004648:	bd08      	pop	{r3, pc}
 800464a:	bf00      	nop
 800464c:	20002b84 	.word	0x20002b84

08004650 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004650:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004652:	4802      	ldr	r0, [pc, #8]	; (800465c <USART2_IRQHandler+0xc>)
 8004654:	f003 fe9e 	bl	8008394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004658:	bd08      	pop	{r3, pc}
 800465a:	bf00      	nop
 800465c:	20003258 	.word	0x20003258

08004660 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004660:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004662:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004666:	f001 f95d 	bl	8005924 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800466a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800466e:	f001 f959 	bl	8005924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004672:	bd08      	pop	{r3, pc}

08004674 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004674:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_big_comm);
 8004676:	4802      	ldr	r0, [pc, #8]	; (8004680 <DMA2_Stream1_IRQHandler+0xc>)
 8004678:	f7fe fff6 	bl	8003668 <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800467c:	bd08      	pop	{r3, pc}
 800467e:	bf00      	nop
 8004680:	20002ad0 	.word	0x20002ad0

08004684 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004684:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_small_comm);
 8004686:	4802      	ldr	r0, [pc, #8]	; (8004690 <DMA2_Stream2_IRQHandler+0xc>)
 8004688:	f7fe ffee 	bl	8003668 <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800468c:	bd08      	pop	{r3, pc}
 800468e:	bf00      	nop
 8004690:	20002b84 	.word	0x20002b84

08004694 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004694:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_big_comm);
 8004696:	4802      	ldr	r0, [pc, #8]	; (80046a0 <USART6_IRQHandler+0xc>)
 8004698:	f7fe ffd0 	bl	800363c <UARTDMA_UartIrqHandler>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800469c:	bd08      	pop	{r3, pc}
 800469e:	bf00      	nop
 80046a0:	20002ad0 	.word	0x20002ad0

080046a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80046a4:	b508      	push	{r3, lr}
 80046a6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80046a8:	4a0b      	ldr	r2, [pc, #44]	; (80046d8 <_sbrk+0x34>)
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	b142      	cbz	r2, 80046c0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80046ae:	4a0a      	ldr	r2, [pc, #40]	; (80046d8 <_sbrk+0x34>)
 80046b0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80046b2:	4403      	add	r3, r0
 80046b4:	466a      	mov	r2, sp
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d806      	bhi.n	80046c8 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80046ba:	4a07      	ldr	r2, [pc, #28]	; (80046d8 <_sbrk+0x34>)
 80046bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80046be:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80046c0:	4a05      	ldr	r2, [pc, #20]	; (80046d8 <_sbrk+0x34>)
 80046c2:	4906      	ldr	r1, [pc, #24]	; (80046dc <_sbrk+0x38>)
 80046c4:	6011      	str	r1, [r2, #0]
 80046c6:	e7f2      	b.n	80046ae <_sbrk+0xa>
		errno = ENOMEM;
 80046c8:	f006 fa58 	bl	800ab7c <__errno>
 80046cc:	230c      	movs	r3, #12
 80046ce:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046d4:	e7f3      	b.n	80046be <_sbrk+0x1a>
 80046d6:	bf00      	nop
 80046d8:	200007fc 	.word	0x200007fc
 80046dc:	20003378 	.word	0x20003378

080046e0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <SystemInit+0x18>)
 80046e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80046e6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80046ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046f2:	609a      	str	r2, [r3, #8]
#endif
}
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	e000ed00 	.word	0xe000ed00

080046fc <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 80046fc:	b508      	push	{r3, lr}
	vTaskDelay(Time);
 80046fe:	f005 f807 	bl	8009710 <vTaskDelay>
}
 8004702:	bd08      	pop	{r3, pc}

08004704 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8004704:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8004706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800470a:	460a      	mov	r2, r1
 800470c:	4601      	mov	r1, r0
 800470e:	4802      	ldr	r0, [pc, #8]	; (8004718 <nRF24_SendSpi+0x14>)
 8004710:	6800      	ldr	r0, [r0, #0]
 8004712:	f002 fd27 	bl	8007164 <HAL_SPI_Transmit>
}
 8004716:	bd08      	pop	{r3, pc}
 8004718:	2000080c 	.word	0x2000080c

0800471c <nRF24_WriteRegister>:

	NRF24_CSN_HIGH;
}

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 800471c:	b500      	push	{lr}
 800471e:	b083      	sub	sp, #12
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8004720:	f040 0020 	orr.w	r0, r0, #32
 8004724:	f88d 0004 	strb.w	r0, [sp, #4]
	tmp[1] = val;
 8004728:	f88d 1005 	strb.w	r1, [sp, #5]

	NRF24_CSN_LOW;
 800472c:	f7fe fbe6 	bl	8002efc <NRF_ChipSelect>

	nRF24_SendSpi(tmp, 2);
 8004730:	2102      	movs	r1, #2
 8004732:	a801      	add	r0, sp, #4
 8004734:	f7ff ffe6 	bl	8004704 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8004738:	f7fe fbf2 	bl	8002f20 <NRF_ChipDeselect>
}
 800473c:	b003      	add	sp, #12
 800473e:	f85d fb04 	ldr.w	pc, [sp], #4

08004742 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8004742:	b570      	push	{r4, r5, r6, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	460d      	mov	r5, r1
 8004748:	4616      	mov	r6, r2
	reg = NRF24_CMD_W_REGISTER | reg;
 800474a:	f040 0020 	orr.w	r0, r0, #32
 800474e:	ac02      	add	r4, sp, #8
 8004750:	f804 0d01 	strb.w	r0, [r4, #-1]!

	NRF24_CSN_LOW;
 8004754:	f7fe fbd2 	bl	8002efc <NRF_ChipSelect>

	nRF24_SendSpi(&reg, 1);
 8004758:	2101      	movs	r1, #1
 800475a:	4620      	mov	r0, r4
 800475c:	f7ff ffd2 	bl	8004704 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8004760:	4631      	mov	r1, r6
 8004762:	4628      	mov	r0, r5
 8004764:	f7ff ffce 	bl	8004704 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8004768:	f7fe fbda 	bl	8002f20 <NRF_ChipDeselect>
}
 800476c:	b002      	add	sp, #8
 800476e:	bd70      	pop	{r4, r5, r6, pc}

08004770 <nRF24_ReadSpi>:
{
 8004770:	b508      	push	{r3, lr}
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8004772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004776:	460a      	mov	r2, r1
 8004778:	4601      	mov	r1, r0
 800477a:	4802      	ldr	r0, [pc, #8]	; (8004784 <nRF24_ReadSpi+0x14>)
 800477c:	6800      	ldr	r0, [r0, #0]
 800477e:	f002 fed5 	bl	800752c <HAL_SPI_Receive>
}
 8004782:	bd08      	pop	{r3, pc}
 8004784:	2000080c 	.word	0x2000080c

08004788 <nRF24_ReadRegister>:
{
 8004788:	b510      	push	{r4, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	ac04      	add	r4, sp, #16
 800478e:	f804 0d09 	strb.w	r0, [r4, #-9]!
	NRF24_CSN_LOW;
 8004792:	f7fe fbb3 	bl	8002efc <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 8004796:	2101      	movs	r1, #1
 8004798:	4620      	mov	r0, r4
 800479a:	f7ff ffb3 	bl	8004704 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 800479e:	2101      	movs	r1, #1
 80047a0:	f10d 000f 	add.w	r0, sp, #15
 80047a4:	f7ff ffe4 	bl	8004770 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 80047a8:	f7fe fbba 	bl	8002f20 <NRF_ChipDeselect>
}
 80047ac:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80047b0:	b004      	add	sp, #16
 80047b2:	bd10      	pop	{r4, pc}

080047b4 <nRF24_ReadRegisters>:
{
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	460d      	mov	r5, r1
 80047ba:	4616      	mov	r6, r2
 80047bc:	ac02      	add	r4, sp, #8
 80047be:	f804 0d01 	strb.w	r0, [r4, #-1]!
	NRF24_CSN_LOW;
 80047c2:	f7fe fb9b 	bl	8002efc <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 80047c6:	2101      	movs	r1, #1
 80047c8:	4620      	mov	r0, r4
 80047ca:	f7ff ff9b 	bl	8004704 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 80047ce:	4631      	mov	r1, r6
 80047d0:	4628      	mov	r0, r5
 80047d2:	f7ff ffcd 	bl	8004770 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 80047d6:	f7fe fba3 	bl	8002f20 <NRF_ChipDeselect>
}
 80047da:	b002      	add	sp, #8
 80047dc:	bd70      	pop	{r4, r5, r6, pc}

080047de <nRF24_ReadConfig>:

	nRF24_Delay_ms(1);
}

uint8_t nRF24_ReadConfig(void)
{
 80047de:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_CONFIG));
 80047e0:	2000      	movs	r0, #0
 80047e2:	f7ff ffd1 	bl	8004788 <nRF24_ReadRegister>
}
 80047e6:	bd08      	pop	{r3, pc}

080047e8 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 80047e8:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 80047ea:	4601      	mov	r1, r0
 80047ec:	2000      	movs	r0, #0
 80047ee:	f7ff ff95 	bl	800471c <nRF24_WriteRegister>
}
 80047f2:	bd08      	pop	{r3, pc}

080047f4 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 80047f4:	b510      	push	{r4, lr}
 80047f6:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80047f8:	2006      	movs	r0, #6
 80047fa:	f7ff ffc5 	bl	8004788 <nRF24_ReadRegister>
	rf_setup &= 0xF8; // Clear PWR bits
 80047fe:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	rf_setup |= (lev<<1);
 8004802:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8004806:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800480a:	2006      	movs	r0, #6
 800480c:	f7ff ff86 	bl	800471c <nRF24_WriteRegister>
}
 8004810:	bd10      	pop	{r4, pc}

08004812 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8004812:	b510      	push	{r4, lr}
 8004814:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8004816:	2006      	movs	r0, #6
 8004818:	f7ff ffb6 	bl	8004788 <nRF24_ReadRegister>
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 800481c:	f000 01d7 	and.w	r1, r0, #215	; 0xd7
	if(dr == NRF24_RF_DR_250KBPS)
 8004820:	2c02      	cmp	r4, #2
 8004822:	d005      	beq.n	8004830 <nRF24_SetDataRate+0x1e>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
	else if(dr == NRF24_RF_DR_2MBPS)
 8004824:	2c01      	cmp	r4, #1
 8004826:	d006      	beq.n	8004836 <nRF24_SetDataRate+0x24>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8004828:	2006      	movs	r0, #6
 800482a:	f7ff ff77 	bl	800471c <nRF24_WriteRegister>
}
 800482e:	bd10      	pop	{r4, pc}
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8004830:	f041 0120 	orr.w	r1, r1, #32
 8004834:	e7f8      	b.n	8004828 <nRF24_SetDataRate+0x16>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8004836:	f041 0108 	orr.w	r1, r1, #8
 800483a:	e7f5      	b.n	8004828 <nRF24_SetDataRate+0x16>

0800483c <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800483c:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_STATUS));
 800483e:	2007      	movs	r0, #7
 8004840:	f7ff ffa2 	bl	8004788 <nRF24_ReadRegister>
}
 8004844:	bd08      	pop	{r3, pc}

08004846 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8004846:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_STATUS, st);
 8004848:	4601      	mov	r1, r0
 800484a:	2007      	movs	r0, #7
 800484c:	f7ff ff66 	bl	800471c <nRF24_WriteRegister>
}
 8004850:	bd08      	pop	{r3, pc}

08004852 <nRF24_ReadFifoStatus>:
//
// FIFO Status
//

uint8_t nRF24_ReadFifoStatus(void)
{
 8004852:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 8004854:	2017      	movs	r0, #23
 8004856:	f7ff ff97 	bl	8004788 <nRF24_ReadRegister>
}
 800485a:	bd08      	pop	{r3, pc}

0800485c <nRF24_IsBitSetInFifoStatus>:
{
	nRF24_WriteRegister(NRF24_FIFO_STATUS, st);
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 800485c:	b510      	push	{r4, lr}
 800485e:	4604      	mov	r4, r0
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8004860:	f7ff fff7 	bl	8004852 <nRF24_ReadFifoStatus>

	if(FifoStatus & (1<<Bit))
 8004864:	4120      	asrs	r0, r4
 8004866:	f010 0f01 	tst.w	r0, #1
 800486a:	d101      	bne.n	8004870 <nRF24_IsBitSetInFifoStatus+0x14>
	{
		return 1;
	}

	return 0;
 800486c:	2000      	movs	r0, #0
}
 800486e:	bd10      	pop	{r4, pc}
		return 1;
 8004870:	2001      	movs	r0, #1
 8004872:	e7fc      	b.n	800486e <nRF24_IsBitSetInFifoStatus+0x12>

08004874 <nRF24_IsRxEmpty>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_FULL);
}

uint8_t nRF24_IsRxEmpty(void)
{
 8004874:	b508      	push	{r3, lr}
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
 8004876:	2000      	movs	r0, #0
 8004878:	f7ff fff0 	bl	800485c <nRF24_IsBitSetInFifoStatus>
}
 800487c:	bd08      	pop	{r3, pc}

0800487e <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 800487e:	b510      	push	{r4, lr}
 8004880:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8004882:	ac02      	add	r4, sp, #8
 8004884:	23e2      	movs	r3, #226	; 0xe2
 8004886:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 800488a:	f7fe fb37 	bl	8002efc <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 800488e:	2101      	movs	r1, #1
 8004890:	4620      	mov	r0, r4
 8004892:	f7ff ff37 	bl	8004704 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8004896:	f7fe fb43 	bl	8002f20 <NRF_ChipDeselect>
}
 800489a:	b002      	add	sp, #8
 800489c:	bd10      	pop	{r4, pc}

0800489e <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 800489e:	b510      	push	{r4, lr}
 80048a0:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80048a2:	ac02      	add	r4, sp, #8
 80048a4:	23e1      	movs	r3, #225	; 0xe1
 80048a6:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 80048aa:	f7fe fb27 	bl	8002efc <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 80048ae:	2101      	movs	r1, #1
 80048b0:	4620      	mov	r0, r4
 80048b2:	f7ff ff27 	bl	8004704 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80048b6:	f7fe fb33 	bl	8002f20 <NRF_ChipDeselect>
}
 80048ba:	b002      	add	sp, #8
 80048bc:	bd10      	pop	{r4, pc}
	...

080048c0 <nRF24_TX_Mode>:
{
 80048c0:	b508      	push	{r3, lr}
	NRF24_CE_LOW;
 80048c2:	2200      	movs	r2, #0
 80048c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048c8:	480a      	ldr	r0, [pc, #40]	; (80048f4 <nRF24_TX_Mode+0x34>)
 80048ca:	f001 f824 	bl	8005916 <HAL_GPIO_WritePin>
	uint8_t config = nRF24_ReadConfig();
 80048ce:	f7ff ff86 	bl	80047de <nRF24_ReadConfig>
 80048d2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	nRF24_WriteConfig(config);
 80048d6:	f040 0002 	orr.w	r0, r0, #2
 80048da:	f7ff ff85 	bl	80047e8 <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80048de:	2070      	movs	r0, #112	; 0x70
 80048e0:	f7ff ffb1 	bl	8004846 <nRF24_WriteStatus>
	nRF24_FlushRX();
 80048e4:	f7ff ffcb 	bl	800487e <nRF24_FlushRX>
	nRF24_FlushTX();
 80048e8:	f7ff ffd9 	bl	800489e <nRF24_FlushTX>
	nRF24_Delay_ms(1);
 80048ec:	2001      	movs	r0, #1
 80048ee:	f7ff ff05 	bl	80046fc <nRF24_Delay_ms>
}
 80048f2:	bd08      	pop	{r3, pc}
 80048f4:	40020400 	.word	0x40020400

080048f8 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80048f8:	b510      	push	{r4, lr}
 80048fa:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 80048fc:	f7ff ff6f 	bl	80047de <nRF24_ReadConfig>

	if(onoff)
 8004900:	b924      	cbnz	r4, 800490c <nRF24_EnableCRC+0x14>
		config |= (1<<NRF24_EN_CRC);
	else
		config &= ~(1<<NRF24_EN_CRC);
 8004902:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
	nRF24_WriteConfig(config);
 8004906:	f7ff ff6f 	bl	80047e8 <nRF24_WriteConfig>
}
 800490a:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_EN_CRC);
 800490c:	f040 0008 	orr.w	r0, r0, #8
 8004910:	b2c0      	uxtb	r0, r0
 8004912:	e7f8      	b.n	8004906 <nRF24_EnableCRC+0xe>

08004914 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8004914:	b510      	push	{r4, lr}
 8004916:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004918:	f7ff ff61 	bl	80047de <nRF24_ReadConfig>
	if(crcl == NRF24_CRC_WIDTH_2B)
 800491c:	2c01      	cmp	r4, #1
 800491e:	d004      	beq.n	800492a <nRF24_SetCRCLength+0x16>
		config |= (1<<NRF24_CRCO);
	else
		config &= ~(1<<NRF24_CRCO);
 8004920:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
	nRF24_WriteConfig(config);
 8004924:	f7ff ff60 	bl	80047e8 <nRF24_WriteConfig>
}
 8004928:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_CRCO);
 800492a:	f040 0004 	orr.w	r0, r0, #4
 800492e:	b2c0      	uxtb	r0, r0
 8004930:	e7f8      	b.n	8004924 <nRF24_SetCRCLength+0x10>

08004932 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8004932:	b508      	push	{r3, lr}
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8004934:	f001 010f 	and.w	r1, r1, #15
 8004938:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800493c:	b2c9      	uxtb	r1, r1
 800493e:	2004      	movs	r0, #4
 8004940:	f7ff feec 	bl	800471c <nRF24_WriteRegister>
}
 8004944:	bd08      	pop	{r3, pc}

08004946 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8004946:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8004948:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 800494c:	2005      	movs	r0, #5
 800494e:	f7ff fee5 	bl	800471c <nRF24_WriteRegister>
}
 8004952:	bd08      	pop	{r3, pc}

08004954 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	4604      	mov	r4, r0
 8004958:	460d      	mov	r5, r1
	if(pipe > 5)
 800495a:	2805      	cmp	r0, #5
 800495c:	d900      	bls.n	8004960 <nRF24_EnablePipe+0xc>
		pipe = 5; // Block too high pipe number
 800495e:	2405      	movs	r4, #5
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8004960:	2002      	movs	r0, #2
 8004962:	f7ff ff11 	bl	8004788 <nRF24_ReadRegister>
	if(onoff == 1)
 8004966:	2d01      	cmp	r5, #1
 8004968:	d008      	beq.n	800497c <nRF24_EnablePipe+0x28>
		enable_pipe |= (1<<pipe);
	else
		enable_pipe &= ~(1<<pipe);
 800496a:	2101      	movs	r1, #1
 800496c:	40a1      	lsls	r1, r4
 800496e:	ea20 0101 	bic.w	r1, r0, r1
 8004972:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8004974:	2002      	movs	r0, #2
 8004976:	f7ff fed1 	bl	800471c <nRF24_WriteRegister>
}
 800497a:	bd38      	pop	{r3, r4, r5, pc}
		enable_pipe |= (1<<pipe);
 800497c:	2101      	movs	r1, #1
 800497e:	40a1      	lsls	r1, r4
 8004980:	4301      	orrs	r1, r0
 8004982:	b2c9      	uxtb	r1, r1
 8004984:	e7f6      	b.n	8004974 <nRF24_EnablePipe+0x20>

08004986 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8004986:	b538      	push	{r3, r4, r5, lr}
 8004988:	4604      	mov	r4, r0
 800498a:	460d      	mov	r5, r1
	if(pipe > 5)
 800498c:	2805      	cmp	r0, #5
 800498e:	d900      	bls.n	8004992 <nRF24_AutoACK+0xc>
		pipe = 5; // Block too high pipe number
 8004990:	2405      	movs	r4, #5
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8004992:	2001      	movs	r0, #1
 8004994:	f7ff fef8 	bl	8004788 <nRF24_ReadRegister>
	if(onoff == 1)
 8004998:	2d01      	cmp	r5, #1
 800499a:	d008      	beq.n	80049ae <nRF24_AutoACK+0x28>
		enaa |= (1<<pipe);
	else
		enaa &= ~(1<<pipe);
 800499c:	2101      	movs	r1, #1
 800499e:	40a1      	lsls	r1, r4
 80049a0:	ea20 0101 	bic.w	r1, r0, r1
 80049a4:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80049a6:	2001      	movs	r0, #1
 80049a8:	f7ff feb8 	bl	800471c <nRF24_WriteRegister>
}
 80049ac:	bd38      	pop	{r3, r4, r5, pc}
		enaa |= (1<<pipe);
 80049ae:	2101      	movs	r1, #1
 80049b0:	40a1      	lsls	r1, r4
 80049b2:	4301      	orrs	r1, r0
 80049b4:	b2c9      	uxtb	r1, r1
 80049b6:	e7f6      	b.n	80049a6 <nRF24_AutoACK+0x20>

080049b8 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80049b8:	b508      	push	{r3, lr}
	if(size > 5)
 80049ba:	2805      	cmp	r0, #5
 80049bc:	d803      	bhi.n	80049c6 <nRF24_SetAddressWidth+0xe>
		size = 5; // Maximum are 5 bytes
	if(size < 3)
 80049be:	2802      	cmp	r0, #2
 80049c0:	d802      	bhi.n	80049c8 <nRF24_SetAddressWidth+0x10>
		size = 3; // Minimum are 3 bytes
 80049c2:	2003      	movs	r0, #3
 80049c4:	e000      	b.n	80049c8 <nRF24_SetAddressWidth+0x10>
		size = 5; // Maximum are 5 bytes
 80049c6:	2005      	movs	r0, #5
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80049c8:	1e81      	subs	r1, r0, #2
 80049ca:	f001 0103 	and.w	r1, r1, #3
 80049ce:	2003      	movs	r0, #3
 80049d0:	f7ff fea4 	bl	800471c <nRF24_WriteRegister>
}
 80049d4:	bd08      	pop	{r3, pc}

080049d6 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 80049d6:	b510      	push	{r4, lr}
 80049d8:	b082      	sub	sp, #8
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 80049da:	2801      	cmp	r0, #1
 80049dc:	d815      	bhi.n	8004a0a <nRF24_SetRXAddress+0x34>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80049de:	2300      	movs	r3, #0
 80049e0:	e009      	b.n	80049f6 <nRF24_SetRXAddress+0x20>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80049e2:	f1c3 0204 	rsb	r2, r3, #4
 80049e6:	5ccc      	ldrb	r4, [r1, r3]
 80049e8:	f10d 0c08 	add.w	ip, sp, #8
 80049ec:	4462      	add	r2, ip
 80049ee:	f802 4c08 	strb.w	r4, [r2, #-8]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80049f2:	3301      	adds	r3, #1
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d9f3      	bls.n	80049e2 <nRF24_SetRXAddress+0xc>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80049fa:	300a      	adds	r0, #10
 80049fc:	2205      	movs	r2, #5
 80049fe:	4669      	mov	r1, sp
 8004a00:	b2c0      	uxtb	r0, r0
 8004a02:	f7ff fe9e 	bl	8004742 <nRF24_WriteRegisters>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
}
 8004a06:	b002      	add	sp, #8
 8004a08:	bd10      	pop	{r4, pc}
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8004a0a:	300a      	adds	r0, #10
 8004a0c:	7909      	ldrb	r1, [r1, #4]
 8004a0e:	b2c0      	uxtb	r0, r0
 8004a10:	f7ff fe84 	bl	800471c <nRF24_WriteRegister>
}
 8004a14:	e7f7      	b.n	8004a06 <nRF24_SetRXAddress+0x30>
	...

08004a18 <nRF24_RX_Mode>:
{
 8004a18:	b510      	push	{r4, lr}
	uint8_t config = nRF24_ReadConfig();
 8004a1a:	f7ff fee0 	bl	80047de <nRF24_ReadConfig>
 8004a1e:	4604      	mov	r4, r0
	nRF24_SetRXAddress(0, addr_p0_backup);
 8004a20:	490c      	ldr	r1, [pc, #48]	; (8004a54 <nRF24_RX_Mode+0x3c>)
 8004a22:	2000      	movs	r0, #0
 8004a24:	f7ff ffd7 	bl	80049d6 <nRF24_SetRXAddress>
	config |= (1<<NRF24_PRIM_RX);
 8004a28:	f044 0003 	orr.w	r0, r4, #3
	nRF24_WriteConfig(config);
 8004a2c:	b2c0      	uxtb	r0, r0
 8004a2e:	f7ff fedb 	bl	80047e8 <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8004a32:	2070      	movs	r0, #112	; 0x70
 8004a34:	f7ff ff07 	bl	8004846 <nRF24_WriteStatus>
	nRF24_FlushRX();
 8004a38:	f7ff ff21 	bl	800487e <nRF24_FlushRX>
	nRF24_FlushTX();
 8004a3c:	f7ff ff2f 	bl	800489e <nRF24_FlushTX>
	NRF24_CE_HIGH;
 8004a40:	2201      	movs	r2, #1
 8004a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a46:	4804      	ldr	r0, [pc, #16]	; (8004a58 <nRF24_RX_Mode+0x40>)
 8004a48:	f000 ff65 	bl	8005916 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	f7ff fe55 	bl	80046fc <nRF24_Delay_ms>
}
 8004a52:	bd10      	pop	{r4, pc}
 8004a54:	20000804 	.word	0x20000804
 8004a58:	40020400 	.word	0x40020400

08004a5c <nRF24_ClearInterrupts>:
	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
}

void nRF24_ClearInterrupts(void)
{
 8004a5c:	b508      	push	{r3, lr}
	uint8_t status = nRF24_ReadStatus();
 8004a5e:	f7ff feed 	bl	800483c <nRF24_ReadStatus>
	status |= (7<<4); // Clear bits 4, 5, 6.
 8004a62:	f040 0070 	orr.w	r0, r0, #112	; 0x70
	nRF24_WriteStatus(status);
 8004a66:	b2c0      	uxtb	r0, r0
 8004a68:	f7ff feed 	bl	8004846 <nRF24_WriteStatus>
}
 8004a6c:	bd08      	pop	{r3, pc}

08004a6e <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8004a6e:	b508      	push	{r3, lr}
    uint8_t result = 0;

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8004a70:	2060      	movs	r0, #96	; 0x60
 8004a72:	f7ff fe89 	bl	8004788 <nRF24_ReadRegister>

    if (result > 32) // Something went wrong :)
 8004a76:	2820      	cmp	r0, #32
 8004a78:	d800      	bhi.n	8004a7c <nRF24_GetDynamicPayloadSize+0xe>
        nRF24_FlushRX();
        nRF24_Delay_ms(2);
        return 0;
    }
    return result;
}
 8004a7a:	bd08      	pop	{r3, pc}
        nRF24_FlushRX();
 8004a7c:	f7ff feff 	bl	800487e <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8004a80:	2002      	movs	r0, #2
 8004a82:	f7ff fe3b 	bl	80046fc <nRF24_Delay_ms>
        return 0;
 8004a86:	2000      	movs	r0, #0
 8004a88:	e7f7      	b.n	8004a7a <nRF24_GetDynamicPayloadSize+0xc>

08004a8a <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8004a8a:	b510      	push	{r4, lr}
 8004a8c:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004a8e:	f7ff fea6 	bl	80047de <nRF24_ReadConfig>

	if(!onoff)
 8004a92:	b124      	cbz	r4, 8004a9e <nRF24_EnableRXDataReadyIRQ+0x14>
		config |= (1<<NRF24_RX_DR);
	else
		config &= ~(1<<NRF24_RX_DR);
 8004a94:	f000 00bf 	and.w	r0, r0, #191	; 0xbf

	nRF24_WriteConfig(config);
 8004a98:	f7ff fea6 	bl	80047e8 <nRF24_WriteConfig>
}
 8004a9c:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_RX_DR);
 8004a9e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004aa2:	b2c0      	uxtb	r0, r0
 8004aa4:	e7f8      	b.n	8004a98 <nRF24_EnableRXDataReadyIRQ+0xe>

08004aa6 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8004aa6:	b510      	push	{r4, lr}
 8004aa8:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004aaa:	f7ff fe98 	bl	80047de <nRF24_ReadConfig>

	if(!onoff)
 8004aae:	b124      	cbz	r4, 8004aba <nRF24_EnableTXDataSentIRQ+0x14>
		config |= (1<<NRF24_TX_DS);
	else
		config &= ~(1<<NRF24_TX_DS);
 8004ab0:	f000 00df 	and.w	r0, r0, #223	; 0xdf

	nRF24_WriteConfig(config);
 8004ab4:	f7ff fe98 	bl	80047e8 <nRF24_WriteConfig>
}
 8004ab8:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_TX_DS);
 8004aba:	f040 0020 	orr.w	r0, r0, #32
 8004abe:	b2c0      	uxtb	r0, r0
 8004ac0:	e7f8      	b.n	8004ab4 <nRF24_EnableTXDataSentIRQ+0xe>

08004ac2 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8004ac2:	b510      	push	{r4, lr}
 8004ac4:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004ac6:	f7ff fe8a 	bl	80047de <nRF24_ReadConfig>

	if(!onoff)
 8004aca:	b124      	cbz	r4, 8004ad6 <nRF24_EnableMaxRetransmitIRQ+0x14>
		config |= (1<<NRF24_MAX_RT);
	else
		config &= ~(1<<NRF24_MAX_RT);
 8004acc:	f000 00ef 	and.w	r0, r0, #239	; 0xef

	nRF24_WriteConfig(config);
 8004ad0:	f7ff fe8a 	bl	80047e8 <nRF24_WriteConfig>
}
 8004ad4:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_MAX_RT);
 8004ad6:	f040 0010 	orr.w	r0, r0, #16
 8004ada:	b2c0      	uxtb	r0, r0
 8004adc:	e7f8      	b.n	8004ad0 <nRF24_EnableMaxRetransmitIRQ+0xe>

08004ade <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8004ade:	b508      	push	{r3, lr}
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8004ae0:	460a      	mov	r2, r1
 8004ae2:	4601      	mov	r1, r0
 8004ae4:	20a0      	movs	r0, #160	; 0xa0
 8004ae6:	f7ff fe2c 	bl	8004742 <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 8004aea:	bd08      	pop	{r3, pc}

08004aec <nRF24_ReadRXPaylaod>:
		status = nRF24_ReadStatus();
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	4604      	mov	r4, r0
 8004af0:	460d      	mov	r5, r1
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8004af2:	f7ff ffbc 	bl	8004a6e <nRF24_GetDynamicPayloadSize>
 8004af6:	4602      	mov	r2, r0
 8004af8:	7028      	strb	r0, [r5, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8004afa:	4621      	mov	r1, r4
 8004afc:	2061      	movs	r0, #97	; 0x61
 8004afe:	f7ff fe59 	bl	80047b4 <nRF24_ReadRegisters>
#else
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 8004b02:	2101      	movs	r1, #1
 8004b04:	2007      	movs	r0, #7
 8004b06:	f7ff fe09 	bl	800471c <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 8004b0a:	f7ff fe97 	bl	800483c <nRF24_ReadStatus>
 8004b0e:	f010 0f20 	tst.w	r0, #32
 8004b12:	d100      	bne.n	8004b16 <nRF24_ReadRXPaylaod+0x2a>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8004b14:	bd38      	pop	{r3, r4, r5, pc}
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8004b16:	2120      	movs	r1, #32
 8004b18:	2007      	movs	r0, #7
 8004b1a:	f7ff fdff 	bl	800471c <nRF24_WriteRegister>
}
 8004b1e:	e7f9      	b.n	8004b14 <nRF24_ReadRXPaylaod+0x28>

08004b20 <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
	if(Size > 32)
 8004b20:	2920      	cmp	r1, #32
 8004b22:	d901      	bls.n	8004b28 <nRF24_SendPacket+0x8>
		return NRF24_NO_TRANSMITTED_PACKET;
 8004b24:	2001      	movs	r0, #1
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_WaitTX();
#endif

	return NRF24_TRANSMITTED_PACKET;
}
 8004b26:	4770      	bx	lr
{
 8004b28:	b508      	push	{r3, lr}
	nRF24_WriteTXPayload(Data, Size);
 8004b2a:	f7ff ffd8 	bl	8004ade <nRF24_WriteTXPayload>
	return NRF24_TRANSMITTED_PACKET;
 8004b2e:	2000      	movs	r0, #0
}
 8004b30:	bd08      	pop	{r3, pc}
	...

08004b34 <nRF24_IsSomtehingToSend>:
{
	return RB_ElementsAvailable(&RXBuffer)?1:0;
}

uint8_t nRF24_IsSomtehingToSend(void)
{
 8004b34:	b508      	push	{r3, lr}
	return RB_ElementsAvailable(&TXBuffer)?1:0;
 8004b36:	4803      	ldr	r0, [pc, #12]	; (8004b44 <nRF24_IsSomtehingToSend+0x10>)
 8004b38:	f7fd fbd9 	bl	80022ee <RB_ElementsAvailable>
}
 8004b3c:	3000      	adds	r0, #0
 8004b3e:	bf18      	it	ne
 8004b40:	2001      	movne	r0, #1
 8004b42:	bd08      	pop	{r3, pc}
 8004b44:	200032e8 	.word	0x200032e8

08004b48 <nRF24_ReceivePacket>:
	return nRF24_IsSomtehingToRead();
#endif
}

nRF24_RX_Status nRF24_ReceivePacket(uint8_t* Data, uint8_t *Size)
{
 8004b48:	b508      	push	{r3, lr}
#if (NRF24_USE_INTERRUPT == 0)
	if(nRF24_RXAvailable())
	{
#endif
		nRF24_ReadRXPaylaod(Data, Size);
 8004b4a:	f7ff ffcf 	bl	8004aec <nRF24_ReadRXPaylaod>
#if (NRF24_USE_INTERRUPT == 0)
	}
	return NRF24_NO_RECEIVED_PACKET;
#endif

}
 8004b4e:	2000      	movs	r0, #0
 8004b50:	bd08      	pop	{r3, pc}
	...

08004b54 <nRF24_SendData>:

nRF24_TX_Status nRF24_SendData(uint8_t* Data, uint8_t Size)
{
 8004b54:	b570      	push	{r4, r5, r6, lr}
 8004b56:	4606      	mov	r6, r0
 8004b58:	460c      	mov	r4, r1
#if (NRF24_USE_RINGBUFFER != 1) // (NRF24_USE_INTERRUPT any)
	return nRF24_SendPacket(Data, Size);
#endif
#if (NRF24_USE_RINGBUFFER == 1)
	uint8_t i = 0;
 8004b5a:	2200      	movs	r2, #0

	while(Size > 0)
 8004b5c:	b154      	cbz	r4, 8004b74 <nRF24_SendData+0x20>
	{
		if(RB_OK == RB_WriteToBuffer(&TXBuffer, Data[i++]))
 8004b5e:	1c53      	adds	r3, r2, #1
 8004b60:	b2dd      	uxtb	r5, r3
 8004b62:	5cb1      	ldrb	r1, [r6, r2]
 8004b64:	4805      	ldr	r0, [pc, #20]	; (8004b7c <nRF24_SendData+0x28>)
 8004b66:	f7fd fb8e 	bl	8002286 <RB_WriteToBuffer>
 8004b6a:	b928      	cbnz	r0, 8004b78 <nRF24_SendData+0x24>
		{
			Size--;
 8004b6c:	3c01      	subs	r4, #1
 8004b6e:	b2e4      	uxtb	r4, r4
		if(RB_OK == RB_WriteToBuffer(&TXBuffer, Data[i++]))
 8004b70:	462a      	mov	r2, r5
 8004b72:	e7f3      	b.n	8004b5c <nRF24_SendData+0x8>
		else
		{
			return NRF24_NO_TRANSMITTED_PACKET;
		}
	}
	return NRF24_TRANSMITTED_PACKET;
 8004b74:	2000      	movs	r0, #0
#endif
}
 8004b76:	bd70      	pop	{r4, r5, r6, pc}
			return NRF24_NO_TRANSMITTED_PACKET;
 8004b78:	2001      	movs	r0, #1
 8004b7a:	e7fc      	b.n	8004b76 <nRF24_SendData+0x22>
 8004b7c:	200032e8 	.word	0x200032e8

08004b80 <nRF24_CheckTXAndSend>:
#if (NRF24_USE_RINGBUFFER == 1)
void nRF24_CheckTXAndSend(void)
{
 8004b80:	b530      	push	{r4, r5, lr}
 8004b82:	b089      	sub	sp, #36	; 0x24
	uint8_t i, DataCounter;
	uint8_t TXPacket[32];

	if(nRF24_IsSomtehingToSend() && Nrf24TXFreeFlag)
 8004b84:	f7ff ffd6 	bl	8004b34 <nRF24_IsSomtehingToSend>
 8004b88:	b110      	cbz	r0, 8004b90 <nRF24_CheckTXAndSend+0x10>
 8004b8a:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <nRF24_CheckTXAndSend+0x70>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	b91b      	cbnz	r3, 8004b98 <nRF24_CheckTXAndSend+0x18>
		nRF24_SendPacket(TXPacket, DataCounter);
		NRF24_CE_HIGH;
		nRF24_Delay_ms(1);
		NRF24_CE_LOW;
	}else{
		nRF24_RX_Mode();
 8004b90:	f7ff ff42 	bl	8004a18 <nRF24_RX_Mode>
	}
}
 8004b94:	b009      	add	sp, #36	; 0x24
 8004b96:	bd30      	pop	{r4, r5, pc}
		nRF24_TX_Mode();
 8004b98:	f7ff fe92 	bl	80048c0 <nRF24_TX_Mode>
		Nrf24TXFreeFlag = 0;
 8004b9c:	4b14      	ldr	r3, [pc, #80]	; (8004bf0 <nRF24_CheckTXAndSend+0x70>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
		DataCounter = RB_ElementsAvailable(&TXBuffer);
 8004ba2:	4814      	ldr	r0, [pc, #80]	; (8004bf4 <nRF24_CheckTXAndSend+0x74>)
 8004ba4:	f7fd fba3 	bl	80022ee <RB_ElementsAvailable>
 8004ba8:	4605      	mov	r5, r0
		if(DataCounter > 32)
 8004baa:	2820      	cmp	r0, #32
 8004bac:	d900      	bls.n	8004bb0 <nRF24_CheckTXAndSend+0x30>
			DataCounter = 32; // Max Payload
 8004bae:	2520      	movs	r5, #32
		for(i = 0; i < DataCounter; i++)
 8004bb0:	2400      	movs	r4, #0
 8004bb2:	e006      	b.n	8004bc2 <nRF24_CheckTXAndSend+0x42>
			RB_ReadFromBuffer(&TXBuffer, &TXPacket[i]);
 8004bb4:	eb0d 0104 	add.w	r1, sp, r4
 8004bb8:	480e      	ldr	r0, [pc, #56]	; (8004bf4 <nRF24_CheckTXAndSend+0x74>)
 8004bba:	f7fd fb81 	bl	80022c0 <RB_ReadFromBuffer>
		for(i = 0; i < DataCounter; i++)
 8004bbe:	3401      	adds	r4, #1
 8004bc0:	b2e4      	uxtb	r4, r4
 8004bc2:	42ac      	cmp	r4, r5
 8004bc4:	d3f6      	bcc.n	8004bb4 <nRF24_CheckTXAndSend+0x34>
		nRF24_SendPacket(TXPacket, DataCounter);
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	4668      	mov	r0, sp
 8004bca:	f7ff ffa9 	bl	8004b20 <nRF24_SendPacket>
		NRF24_CE_HIGH;
 8004bce:	4c0a      	ldr	r4, [pc, #40]	; (8004bf8 <nRF24_CheckTXAndSend+0x78>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f000 fe9d 	bl	8005916 <HAL_GPIO_WritePin>
		nRF24_Delay_ms(1);
 8004bdc:	2001      	movs	r0, #1
 8004bde:	f7ff fd8d 	bl	80046fc <nRF24_Delay_ms>
		NRF24_CE_LOW;
 8004be2:	2200      	movs	r2, #0
 8004be4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004be8:	4620      	mov	r0, r4
 8004bea:	f000 fe94 	bl	8005916 <HAL_GPIO_WritePin>
 8004bee:	e7d1      	b.n	8004b94 <nRF24_CheckTXAndSend+0x14>
 8004bf0:	20000801 	.word	0x20000801
 8004bf4:	200032e8 	.word	0x200032e8
 8004bf8:	40020400 	.word	0x40020400

08004bfc <nRF24_ReceiveData>:
#endif
#if (NRF24_USE_INTERRUPT == 1)
void nRF24_ReceiveData(void)
{
 8004bfc:	b510      	push	{r4, lr}
 8004bfe:	b08a      	sub	sp, #40	; 0x28
 8004c00:	e00f      	b.n	8004c22 <nRF24_ReceiveData+0x26>
	{
		nRF24_ReceivePacket(RXPacket, &DataCounter);

		for(i = 0; i < DataCounter; i++)
		{
			RB_WriteToBuffer(&RXBuffer, RXPacket[i]);
 8004c02:	ab0a      	add	r3, sp, #40	; 0x28
 8004c04:	4423      	add	r3, r4
 8004c06:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 8004c0a:	480a      	ldr	r0, [pc, #40]	; (8004c34 <nRF24_ReceiveData+0x38>)
 8004c0c:	f7fd fb3b 	bl	8002286 <RB_WriteToBuffer>
		for(i = 0; i < DataCounter; i++)
 8004c10:	3401      	adds	r4, #1
 8004c12:	b2e4      	uxtb	r4, r4
 8004c14:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8004c18:	42a3      	cmp	r3, r4
 8004c1a:	d8f2      	bhi.n	8004c02 <nRF24_ReceiveData+0x6>
		}

	}while(!nRF24_IsRxEmpty());
 8004c1c:	f7ff fe2a 	bl	8004874 <nRF24_IsRxEmpty>
 8004c20:	b930      	cbnz	r0, 8004c30 <nRF24_ReceiveData+0x34>
		nRF24_ReceivePacket(RXPacket, &DataCounter);
 8004c22:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8004c26:	a801      	add	r0, sp, #4
 8004c28:	f7ff ff8e 	bl	8004b48 <nRF24_ReceivePacket>
		for(i = 0; i < DataCounter; i++)
 8004c2c:	2400      	movs	r4, #0
 8004c2e:	e7f1      	b.n	8004c14 <nRF24_ReceiveData+0x18>
#endif
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_ReceivePacket(RXBuffer, &RXDataCounter);
#endif
}
 8004c30:	b00a      	add	sp, #40	; 0x28
 8004c32:	bd10      	pop	{r4, pc}
 8004c34:	2000330c 	.word	0x2000330c

08004c38 <nRF24_IRQ_Read>:
{
	Nrf24InterruptFlag = 1;
}

void nRF24_IRQ_Read(void)
{
 8004c38:	b508      	push	{r3, lr}
	if(Nrf24InterruptFlag == 1)
 8004c3a:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <nRF24_IRQ_Read+0x54>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d000      	beq.n	8004c46 <nRF24_IRQ_Read+0xe>
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
		}

		nRF24_WriteStatus(ClearIrq);
	}
}
 8004c44:	bd08      	pop	{r3, pc}
		Nrf24InterruptFlag = 0;
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <nRF24_IRQ_Read+0x54>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]
		uint8_t status = nRF24_ReadStatus();
 8004c4c:	f7ff fdf6 	bl	800483c <nRF24_ReadStatus>
 8004c50:	4603      	mov	r3, r0
		if ((status & (1 << NRF24_RX_DR)))
 8004c52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c56:	d016      	beq.n	8004c86 <nRF24_IRQ_Read+0x4e>
			nrf24_rx_flag = 1;
 8004c58:	4a0d      	ldr	r2, [pc, #52]	; (8004c90 <nRF24_IRQ_Read+0x58>)
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8004c5e:	2040      	movs	r0, #64	; 0x40
		if ((status & (1 << NRF24_TX_DS)))
 8004c60:	f013 0f20 	tst.w	r3, #32
 8004c64:	d004      	beq.n	8004c70 <nRF24_IRQ_Read+0x38>
			nrf24_tx_flag = 1;
 8004c66:	4a0b      	ldr	r2, [pc, #44]	; (8004c94 <nRF24_IRQ_Read+0x5c>)
 8004c68:	2101      	movs	r1, #1
 8004c6a:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8004c6c:	f040 0020 	orr.w	r0, r0, #32
		if ((status & (1 << NRF24_MAX_RT)))
 8004c70:	f013 0f10 	tst.w	r3, #16
 8004c74:	d004      	beq.n	8004c80 <nRF24_IRQ_Read+0x48>
			nrf24_mr_flag = 1;
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <nRF24_IRQ_Read+0x60>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 8004c7c:	f040 0010 	orr.w	r0, r0, #16
		nRF24_WriteStatus(ClearIrq);
 8004c80:	f7ff fde1 	bl	8004846 <nRF24_WriteStatus>
}
 8004c84:	e7de      	b.n	8004c44 <nRF24_IRQ_Read+0xc>
		uint8_t ClearIrq = 0;
 8004c86:	2000      	movs	r0, #0
 8004c88:	e7ea      	b.n	8004c60 <nRF24_IRQ_Read+0x28>
 8004c8a:	bf00      	nop
 8004c8c:	20000800 	.word	0x20000800
 8004c90:	20000811 	.word	0x20000811
 8004c94:	20000812 	.word	0x20000812
 8004c98:	20000810 	.word	0x20000810

08004c9c <nRF24_EventRxCallback>:
//

__weak void nRF24_EventRxCallback(void)
{

}
 8004c9c:	4770      	bx	lr

08004c9e <nRF24_EventTxCallback>:

__weak void nRF24_EventTxCallback(void)
{

}
 8004c9e:	4770      	bx	lr

08004ca0 <nRF24_EventMrCallback>:

__weak void nRF24_EventMrCallback(void)
{

}
 8004ca0:	4770      	bx	lr
	...

08004ca4 <nRF24_Event>:

void nRF24_Event(void)
{
 8004ca4:	b508      	push	{r3, lr}
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8004ca6:	f7ff ffc7 	bl	8004c38 <nRF24_IRQ_Read>

#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_CheckTXAndSend();
 8004caa:	f7ff ff69 	bl	8004b80 <nRF24_CheckTXAndSend>
#endif

	if(nrf24_rx_flag)
 8004cae:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <nRF24_Event+0x4c>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	b933      	cbnz	r3, 8004cc2 <nRF24_Event+0x1e>
#endif
		nRF24_EventRxCallback();
		nrf24_rx_flag = 0;
	}

	if(nrf24_tx_flag)
 8004cb4:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <nRF24_Event+0x50>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	b95b      	cbnz	r3, 8004cd2 <nRF24_Event+0x2e>
#endif
		nRF24_EventTxCallback();
		nrf24_tx_flag = 0;
	}

	if(nrf24_mr_flag)
 8004cba:	4b0f      	ldr	r3, [pc, #60]	; (8004cf8 <nRF24_Event+0x54>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	b98b      	cbnz	r3, 8004ce4 <nRF24_Event+0x40>
	{
		nRF24_EventMrCallback();
		nrf24_mr_flag = 0;
	}
}
 8004cc0:	bd08      	pop	{r3, pc}
		nRF24_ReceiveData();
 8004cc2:	f7ff ff9b 	bl	8004bfc <nRF24_ReceiveData>
		nRF24_EventRxCallback();
 8004cc6:	f7ff ffe9 	bl	8004c9c <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 8004cca:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <nRF24_Event+0x4c>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
 8004cd0:	e7f0      	b.n	8004cb4 <nRF24_Event+0x10>
		Nrf24TXFreeFlag = 1;
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <nRF24_Event+0x58>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	701a      	strb	r2, [r3, #0]
		nRF24_EventTxCallback();
 8004cd8:	f7ff ffe1 	bl	8004c9e <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <nRF24_Event+0x50>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	e7ea      	b.n	8004cba <nRF24_Event+0x16>
		nRF24_EventMrCallback();
 8004ce4:	f7ff ffdc 	bl	8004ca0 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8004ce8:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <nRF24_Event+0x54>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
}
 8004cee:	e7e7      	b.n	8004cc0 <nRF24_Event+0x1c>
 8004cf0:	20000811 	.word	0x20000811
 8004cf4:	20000812 	.word	0x20000812
 8004cf8:	20000810 	.word	0x20000810
 8004cfc:	20000801 	.word	0x20000801

08004d00 <nRF24_Init>:
#endif

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8004d00:	b508      	push	{r3, lr}
	hspi_nrf = hspi;
 8004d02:	4b31      	ldr	r3, [pc, #196]	; (8004dc8 <nRF24_Init+0xc8>)
 8004d04:	6018      	str	r0, [r3, #0]

	NRF24_CE_LOW;
 8004d06:	2200      	movs	r2, #0
 8004d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d0c:	482f      	ldr	r0, [pc, #188]	; (8004dcc <nRF24_Init+0xcc>)
 8004d0e:	f000 fe02 	bl	8005916 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8004d12:	f7fe f905 	bl	8002f20 <NRF_ChipDeselect>

	nRF24_Delay_ms(5); // Wait for radio power up
 8004d16:	2005      	movs	r0, #5
 8004d18:	f7ff fcf0 	bl	80046fc <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8004d1c:	2003      	movs	r0, #3
 8004d1e:	f7ff fd69 	bl	80047f4 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8004d22:	2002      	movs	r0, #2
 8004d24:	f7ff fd75 	bl	8004812 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8004d28:	2001      	movs	r0, #1
 8004d2a:	f7ff fde5 	bl	80048f8 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_2B); // CRC Length 1 byte
 8004d2e:	2001      	movs	r0, #1
 8004d30:	f7ff fdf0 	bl	8004914 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8004d34:	2107      	movs	r1, #7
 8004d36:	2004      	movs	r0, #4
 8004d38:	f7ff fdfb 	bl	8004932 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8004d3c:	201d      	movs	r0, #29
 8004d3e:	f7ff fd23 	bl	8004788 <nRF24_ReadRegister>
 8004d42:	f040 0104 	orr.w	r1, r0, #4
 8004d46:	b2c9      	uxtb	r1, r1
 8004d48:	201d      	movs	r0, #29
 8004d4a:	f7ff fce7 	bl	800471c <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8004d4e:	213f      	movs	r1, #63	; 0x3f
 8004d50:	201c      	movs	r0, #28
 8004d52:	f7ff fce3 	bl	800471c <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(100); // Set RF channel for transmission
 8004d56:	2064      	movs	r0, #100	; 0x64
 8004d58:	f7ff fdf5 	bl	8004946 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	2000      	movs	r0, #0
 8004d60:	f7ff fdf8 	bl	8004954 <nRF24_EnablePipe>
	nRF24_EnablePipe(1, 1); // Enable pipe 1
 8004d64:	2101      	movs	r1, #1
 8004d66:	4608      	mov	r0, r1
 8004d68:	f7ff fdf4 	bl	8004954 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	2000      	movs	r0, #0
 8004d70:	f7ff fe09 	bl	8004986 <nRF24_AutoACK>
	nRF24_AutoACK(1, 1); // Enable auto ACK for pipe 1
 8004d74:	2101      	movs	r1, #1
 8004d76:	4608      	mov	r0, r1
 8004d78:	f7ff fe05 	bl	8004986 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8004d7c:	2005      	movs	r0, #5
 8004d7e:	f7ff fe1b 	bl	80049b8 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 8004d82:	2001      	movs	r0, #1
 8004d84:	f7ff fcba 	bl	80046fc <nRF24_Delay_ms>

#if (NRF24_USE_INTERRUPT == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8004d88:	2001      	movs	r0, #1
 8004d8a:	f7ff fe7e 	bl	8004a8a <nRF24_EnableRXDataReadyIRQ>
#endif
#if (NRF24_USE_INTERRUPT == 0)
	nRF24_EnableRXDataReadyIRQ(0);
#endif
	nRF24_EnableTXDataSentIRQ(0);
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f7ff fe89 	bl	8004aa6 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8004d94:	2000      	movs	r0, #0
 8004d96:	f7ff fe94 	bl	8004ac2 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8004d9a:	2001      	movs	r0, #1
 8004d9c:	f7ff fcae 	bl	80046fc <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8004da0:	f7ff fe5c 	bl	8004a5c <nRF24_ClearInterrupts>
#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8004da4:	2001      	movs	r0, #1
 8004da6:	f7ff fe70 	bl	8004a8a <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8004daa:	2001      	movs	r0, #1
 8004dac:	f7ff fe7b 	bl	8004aa6 <nRF24_EnableTXDataSentIRQ>
	Nrf24TXFreeFlag = 1;
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <nRF24_Init+0xd0>)
 8004db2:	2201      	movs	r2, #1
 8004db4:	701a      	strb	r2, [r3, #0]
	RB_CreateBuffer(&TXBuffer, NRF24_TX_BUFFER_SIZE);
 8004db6:	2120      	movs	r1, #32
 8004db8:	4806      	ldr	r0, [pc, #24]	; (8004dd4 <nRF24_Init+0xd4>)
 8004dba:	f7fd fa59 	bl	8002270 <RB_CreateBuffer>
	RB_CreateBuffer(&RXBuffer, NRF24_RX_BUFFER_SIZE);
 8004dbe:	2120      	movs	r1, #32
 8004dc0:	4805      	ldr	r0, [pc, #20]	; (8004dd8 <nRF24_Init+0xd8>)
 8004dc2:	f7fd fa55 	bl	8002270 <RB_CreateBuffer>
#endif
}
 8004dc6:	bd08      	pop	{r3, pc}
 8004dc8:	2000080c 	.word	0x2000080c
 8004dcc:	40020400 	.word	0x40020400
 8004dd0:	20000801 	.word	0x20000801
 8004dd4:	200032e8 	.word	0x200032e8
 8004dd8:	2000330c 	.word	0x2000330c

08004ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004de0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004de2:	e003      	b.n	8004dec <LoopCopyDataInit>

08004de4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004de4:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004de6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004de8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004dea:	3104      	adds	r1, #4

08004dec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004dec:	480b      	ldr	r0, [pc, #44]	; (8004e1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004dee:	4b0c      	ldr	r3, [pc, #48]	; (8004e20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004df0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004df2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004df4:	d3f6      	bcc.n	8004de4 <CopyDataInit>
  ldr  r2, =_sbss
 8004df6:	4a0b      	ldr	r2, [pc, #44]	; (8004e24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004df8:	e002      	b.n	8004e00 <LoopFillZerobss>

08004dfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004dfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004dfc:	f842 3b04 	str.w	r3, [r2], #4

08004e00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004e00:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004e02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e04:	d3f9      	bcc.n	8004dfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004e06:	f7ff fc6b 	bl	80046e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e0a:	f005 febd 	bl	800ab88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e0e:	f7ff f83d 	bl	8003e8c <main>
  bx  lr    
 8004e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e14:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8004e18:	0800baa4 	.word	0x0800baa4
  ldr  r0, =_sdata
 8004e1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004e20:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 8004e24:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 8004e28:	20003378 	.word	0x20003378

08004e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e2c:	e7fe      	b.n	8004e2c <ADC_IRQHandler>
	...

08004e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e30:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e32:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <HAL_Init+0x30>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e3a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e42:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e4a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e4c:	2003      	movs	r0, #3
 8004e4e:	f000 f9a9 	bl	80051a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e52:	2000      	movs	r0, #0
 8004e54:	f7ff fb8a 	bl	800456c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e58:	f7ff f8d2 	bl	8004000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	bd08      	pop	{r3, pc}
 8004e60:	40023c00 	.word	0x40023c00

08004e64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004e64:	4a03      	ldr	r2, [pc, #12]	; (8004e74 <HAL_IncTick+0x10>)
 8004e66:	6811      	ldr	r1, [r2, #0]
 8004e68:	4b03      	ldr	r3, [pc, #12]	; (8004e78 <HAL_IncTick+0x14>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	440b      	add	r3, r1
 8004e6e:	6013      	str	r3, [r2, #0]
}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20003330 	.word	0x20003330
 8004e78:	2000003c 	.word	0x2000003c

08004e7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004e7c:	4b01      	ldr	r3, [pc, #4]	; (8004e84 <HAL_GetTick+0x8>)
 8004e7e:	6818      	ldr	r0, [r3, #0]
}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20003330 	.word	0x20003330

08004e88 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004e88:	4b4a      	ldr	r3, [pc, #296]	; (8004fb4 <ADC_Init+0x12c>)
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004e90:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	6841      	ldr	r1, [r0, #4]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004e9a:	6802      	ldr	r2, [r0, #0]
 8004e9c:	6853      	ldr	r3, [r2, #4]
 8004e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ea4:	6802      	ldr	r2, [r0, #0]
 8004ea6:	6853      	ldr	r3, [r2, #4]
 8004ea8:	6901      	ldr	r1, [r0, #16]
 8004eaa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004eae:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004eb0:	6802      	ldr	r2, [r0, #0]
 8004eb2:	6853      	ldr	r3, [r2, #4]
 8004eb4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004eb8:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004eba:	6802      	ldr	r2, [r0, #0]
 8004ebc:	6853      	ldr	r3, [r2, #4]
 8004ebe:	6881      	ldr	r1, [r0, #8]
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ec4:	6802      	ldr	r2, [r0, #0]
 8004ec6:	6893      	ldr	r3, [r2, #8]
 8004ec8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ecc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ece:	6802      	ldr	r2, [r0, #0]
 8004ed0:	6893      	ldr	r3, [r2, #8]
 8004ed2:	68c1      	ldr	r1, [r0, #12]
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ed8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004eda:	4b37      	ldr	r3, [pc, #220]	; (8004fb8 <ADC_Init+0x130>)
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d04b      	beq.n	8004f78 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ee0:	6802      	ldr	r2, [r0, #0]
 8004ee2:	6893      	ldr	r3, [r2, #8]
 8004ee4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004ee8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004eea:	6802      	ldr	r2, [r0, #0]
 8004eec:	6893      	ldr	r3, [r2, #8]
 8004eee:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ef4:	6802      	ldr	r2, [r0, #0]
 8004ef6:	6893      	ldr	r3, [r2, #8]
 8004ef8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004efc:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004efe:	6802      	ldr	r2, [r0, #0]
 8004f00:	6893      	ldr	r3, [r2, #8]
 8004f02:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004f04:	430b      	orrs	r3, r1
 8004f06:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f08:	6802      	ldr	r2, [r0, #0]
 8004f0a:	6893      	ldr	r3, [r2, #8]
 8004f0c:	f023 0302 	bic.w	r3, r3, #2
 8004f10:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f12:	6802      	ldr	r2, [r0, #0]
 8004f14:	6893      	ldr	r3, [r2, #8]
 8004f16:	7e01      	ldrb	r1, [r0, #24]
 8004f18:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8004f1c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f1e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d133      	bne.n	8004f8e <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004f26:	6802      	ldr	r2, [r0, #0]
 8004f28:	6853      	ldr	r3, [r2, #4]
 8004f2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f2e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004f30:	6802      	ldr	r2, [r0, #0]
 8004f32:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f38:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004f3a:	6801      	ldr	r1, [r0, #0]
 8004f3c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004f3e:	69c2      	ldr	r2, [r0, #28]
 8004f40:	3a01      	subs	r2, #1
 8004f42:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004f46:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004f48:	6802      	ldr	r2, [r0, #0]
 8004f4a:	6893      	ldr	r3, [r2, #8]
 8004f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f50:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004f52:	6802      	ldr	r2, [r0, #0]
 8004f54:	6893      	ldr	r3, [r2, #8]
 8004f56:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8004f5a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8004f5e:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004f60:	6802      	ldr	r2, [r0, #0]
 8004f62:	6893      	ldr	r3, [r2, #8]
 8004f64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f68:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f6a:	6802      	ldr	r2, [r0, #0]
 8004f6c:	6893      	ldr	r3, [r2, #8]
 8004f6e:	6941      	ldr	r1, [r0, #20]
 8004f70:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8004f74:	6093      	str	r3, [r2, #8]
}
 8004f76:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f78:	6802      	ldr	r2, [r0, #0]
 8004f7a:	6893      	ldr	r3, [r2, #8]
 8004f7c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004f80:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f82:	6802      	ldr	r2, [r0, #0]
 8004f84:	6893      	ldr	r3, [r2, #8]
 8004f86:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004f8a:	6093      	str	r3, [r2, #8]
 8004f8c:	e7bc      	b.n	8004f08 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004f8e:	6802      	ldr	r2, [r0, #0]
 8004f90:	6853      	ldr	r3, [r2, #4]
 8004f92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f96:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004f98:	6802      	ldr	r2, [r0, #0]
 8004f9a:	6853      	ldr	r3, [r2, #4]
 8004f9c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004fa0:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004fa2:	6801      	ldr	r1, [r0, #0]
 8004fa4:	684b      	ldr	r3, [r1, #4]
 8004fa6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004fa8:	3a01      	subs	r2, #1
 8004faa:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8004fae:	604b      	str	r3, [r1, #4]
 8004fb0:	e7be      	b.n	8004f30 <ADC_Init+0xa8>
 8004fb2:	bf00      	nop
 8004fb4:	40012300 	.word	0x40012300
 8004fb8:	0f000001 	.word	0x0f000001

08004fbc <HAL_ADC_Init>:
  if(hadc == NULL)
 8004fbc:	b338      	cbz	r0, 800500e <HAL_ADC_Init+0x52>
{
 8004fbe:	b510      	push	{r4, lr}
 8004fc0:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004fc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004fc4:	b143      	cbz	r3, 8004fd8 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fc8:	f013 0f10 	tst.w	r3, #16
 8004fcc:	d00b      	beq.n	8004fe6 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8004fce:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004fd6:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8004fd8:	f7ff f834 	bl	8004044 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004fdc:	2300      	movs	r3, #0
 8004fde:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8004fe0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8004fe4:	e7ef      	b.n	8004fc6 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8004fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fe8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004fec:	f023 0302 	bic.w	r3, r3, #2
 8004ff0:	f043 0302 	orr.w	r3, r3, #2
 8004ff4:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f7ff ff46 	bl	8004e88 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005002:	f023 0303 	bic.w	r3, r3, #3
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	6423      	str	r3, [r4, #64]	; 0x40
 800500c:	e7e0      	b.n	8004fd0 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800500e:	2001      	movs	r0, #1
}
 8005010:	4770      	bx	lr
	...

08005014 <HAL_ADC_ConfigChannel>:
{
 8005014:	b430      	push	{r4, r5}
 8005016:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800501c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005020:	2b01      	cmp	r3, #1
 8005022:	f000 80b7 	beq.w	8005194 <HAL_ADC_ConfigChannel+0x180>
 8005026:	2301      	movs	r3, #1
 8005028:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800502c:	680b      	ldr	r3, [r1, #0]
 800502e:	2b09      	cmp	r3, #9
 8005030:	d93e      	bls.n	80050b0 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005032:	6805      	ldr	r5, [r0, #0]
 8005034:	68ea      	ldr	r2, [r5, #12]
 8005036:	b29b      	uxth	r3, r3
 8005038:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800503c:	3b1e      	subs	r3, #30
 800503e:	2407      	movs	r4, #7
 8005040:	fa04 f303 	lsl.w	r3, r4, r3
 8005044:	ea22 0303 	bic.w	r3, r2, r3
 8005048:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800504a:	6805      	ldr	r5, [r0, #0]
 800504c:	68ea      	ldr	r2, [r5, #12]
 800504e:	688c      	ldr	r4, [r1, #8]
 8005050:	880b      	ldrh	r3, [r1, #0]
 8005052:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005056:	3b1e      	subs	r3, #30
 8005058:	fa04 f303 	lsl.w	r3, r4, r3
 800505c:	4313      	orrs	r3, r2
 800505e:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8005060:	684b      	ldr	r3, [r1, #4]
 8005062:	2b06      	cmp	r3, #6
 8005064:	d83a      	bhi.n	80050dc <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005066:	6805      	ldr	r5, [r0, #0]
 8005068:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800506a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800506e:	3b05      	subs	r3, #5
 8005070:	241f      	movs	r4, #31
 8005072:	fa04 f303 	lsl.w	r3, r4, r3
 8005076:	ea22 0303 	bic.w	r3, r2, r3
 800507a:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800507c:	6805      	ldr	r5, [r0, #0]
 800507e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005080:	684b      	ldr	r3, [r1, #4]
 8005082:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005086:	3b05      	subs	r3, #5
 8005088:	880c      	ldrh	r4, [r1, #0]
 800508a:	fa04 f303 	lsl.w	r3, r4, r3
 800508e:	4313      	orrs	r3, r2
 8005090:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005092:	6802      	ldr	r2, [r0, #0]
 8005094:	4b40      	ldr	r3, [pc, #256]	; (8005198 <HAL_ADC_ConfigChannel+0x184>)
 8005096:	429a      	cmp	r2, r3
 8005098:	d050      	beq.n	800513c <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800509a:	6802      	ldr	r2, [r0, #0]
 800509c:	4b3e      	ldr	r3, [pc, #248]	; (8005198 <HAL_ADC_ConfigChannel+0x184>)
 800509e:	429a      	cmp	r2, r3
 80050a0:	d055      	beq.n	800514e <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 80050a2:	2300      	movs	r3, #0
 80050a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80050a8:	4618      	mov	r0, r3
}
 80050aa:	b002      	add	sp, #8
 80050ac:	bc30      	pop	{r4, r5}
 80050ae:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80050b0:	6805      	ldr	r5, [r0, #0]
 80050b2:	692a      	ldr	r2, [r5, #16]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80050ba:	2407      	movs	r4, #7
 80050bc:	fa04 f303 	lsl.w	r3, r4, r3
 80050c0:	ea22 0303 	bic.w	r3, r2, r3
 80050c4:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80050c6:	6805      	ldr	r5, [r0, #0]
 80050c8:	692a      	ldr	r2, [r5, #16]
 80050ca:	688c      	ldr	r4, [r1, #8]
 80050cc:	880b      	ldrh	r3, [r1, #0]
 80050ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80050d2:	fa04 f303 	lsl.w	r3, r4, r3
 80050d6:	4313      	orrs	r3, r2
 80050d8:	612b      	str	r3, [r5, #16]
 80050da:	e7c1      	b.n	8005060 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 80050dc:	2b0c      	cmp	r3, #12
 80050de:	d816      	bhi.n	800510e <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80050e0:	6805      	ldr	r5, [r0, #0]
 80050e2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80050e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80050e8:	3b23      	subs	r3, #35	; 0x23
 80050ea:	241f      	movs	r4, #31
 80050ec:	fa04 f303 	lsl.w	r3, r4, r3
 80050f0:	ea22 0303 	bic.w	r3, r2, r3
 80050f4:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80050f6:	6805      	ldr	r5, [r0, #0]
 80050f8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80050fa:	684b      	ldr	r3, [r1, #4]
 80050fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005100:	3b23      	subs	r3, #35	; 0x23
 8005102:	880c      	ldrh	r4, [r1, #0]
 8005104:	fa04 f303 	lsl.w	r3, r4, r3
 8005108:	4313      	orrs	r3, r2
 800510a:	632b      	str	r3, [r5, #48]	; 0x30
 800510c:	e7c1      	b.n	8005092 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800510e:	6805      	ldr	r5, [r0, #0]
 8005110:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005112:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005116:	3b41      	subs	r3, #65	; 0x41
 8005118:	241f      	movs	r4, #31
 800511a:	fa04 f303 	lsl.w	r3, r4, r3
 800511e:	ea22 0303 	bic.w	r3, r2, r3
 8005122:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005124:	6805      	ldr	r5, [r0, #0]
 8005126:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005128:	684b      	ldr	r3, [r1, #4]
 800512a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800512e:	3b41      	subs	r3, #65	; 0x41
 8005130:	880c      	ldrh	r4, [r1, #0]
 8005132:	fa04 f303 	lsl.w	r3, r4, r3
 8005136:	4313      	orrs	r3, r2
 8005138:	62eb      	str	r3, [r5, #44]	; 0x2c
 800513a:	e7aa      	b.n	8005092 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800513c:	680b      	ldr	r3, [r1, #0]
 800513e:	2b12      	cmp	r3, #18
 8005140:	d1ab      	bne.n	800509a <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005142:	4a16      	ldr	r2, [pc, #88]	; (800519c <HAL_ADC_ConfigChannel+0x188>)
 8005144:	6853      	ldr	r3, [r2, #4]
 8005146:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800514a:	6053      	str	r3, [r2, #4]
 800514c:	e7a5      	b.n	800509a <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800514e:	680b      	ldr	r3, [r1, #0]
 8005150:	3b10      	subs	r3, #16
 8005152:	2b01      	cmp	r3, #1
 8005154:	d8a5      	bhi.n	80050a2 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005156:	4a11      	ldr	r2, [pc, #68]	; (800519c <HAL_ADC_ConfigChannel+0x188>)
 8005158:	6853      	ldr	r3, [r2, #4]
 800515a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800515e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005160:	680b      	ldr	r3, [r1, #0]
 8005162:	2b10      	cmp	r3, #16
 8005164:	d19d      	bne.n	80050a2 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005166:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <HAL_ADC_ConfigChannel+0x18c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800516e:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8005172:	f202 3283 	addw	r2, r2, #899	; 0x383
 8005176:	fba2 2303 	umull	r2, r3, r2, r3
 800517a:	0c9b      	lsrs	r3, r3, #18
 800517c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005180:	005a      	lsls	r2, r3, #1
 8005182:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8005184:	e002      	b.n	800518c <HAL_ADC_ConfigChannel+0x178>
        counter--;
 8005186:	9b01      	ldr	r3, [sp, #4]
 8005188:	3b01      	subs	r3, #1
 800518a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800518c:	9b01      	ldr	r3, [sp, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f9      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x172>
 8005192:	e786      	b.n	80050a2 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8005194:	2002      	movs	r0, #2
 8005196:	e788      	b.n	80050aa <HAL_ADC_ConfigChannel+0x96>
 8005198:	40012000 	.word	0x40012000
 800519c:	40012300 	.word	0x40012300
 80051a0:	20000038 	.word	0x20000038

080051a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051a4:	4a07      	ldr	r2, [pc, #28]	; (80051c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80051a6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80051ac:	041b      	lsls	r3, r3, #16
 80051ae:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051b0:	0200      	lsls	r0, r0, #8
 80051b2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051b6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80051b8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80051bc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80051c0:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80051c2:	4770      	bx	lr
 80051c4:	e000ed00 	.word	0xe000ed00

080051c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051c8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051ca:	4b17      	ldr	r3, [pc, #92]	; (8005228 <HAL_NVIC_SetPriority+0x60>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051d2:	f1c3 0407 	rsb	r4, r3, #7
 80051d6:	2c04      	cmp	r4, #4
 80051d8:	bf28      	it	cs
 80051da:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051dc:	1d1d      	adds	r5, r3, #4
 80051de:	2d06      	cmp	r5, #6
 80051e0:	d918      	bls.n	8005214 <HAL_NVIC_SetPriority+0x4c>
 80051e2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80051e8:	fa05 f404 	lsl.w	r4, r5, r4
 80051ec:	ea21 0104 	bic.w	r1, r1, r4
 80051f0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051f2:	fa05 f303 	lsl.w	r3, r5, r3
 80051f6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051fa:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80051fc:	2800      	cmp	r0, #0
 80051fe:	db0b      	blt.n	8005218 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005200:	0109      	lsls	r1, r1, #4
 8005202:	b2c9      	uxtb	r1, r1
 8005204:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005208:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800520c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005210:	bc30      	pop	{r4, r5}
 8005212:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005214:	2300      	movs	r3, #0
 8005216:	e7e5      	b.n	80051e4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005218:	f000 000f 	and.w	r0, r0, #15
 800521c:	0109      	lsls	r1, r1, #4
 800521e:	b2c9      	uxtb	r1, r1
 8005220:	4b02      	ldr	r3, [pc, #8]	; (800522c <HAL_NVIC_SetPriority+0x64>)
 8005222:	5419      	strb	r1, [r3, r0]
 8005224:	e7f4      	b.n	8005210 <HAL_NVIC_SetPriority+0x48>
 8005226:	bf00      	nop
 8005228:	e000ed00 	.word	0xe000ed00
 800522c:	e000ed14 	.word	0xe000ed14

08005230 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005230:	2800      	cmp	r0, #0
 8005232:	db07      	blt.n	8005244 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005234:	f000 021f 	and.w	r2, r0, #31
 8005238:	0940      	lsrs	r0, r0, #5
 800523a:	2301      	movs	r3, #1
 800523c:	4093      	lsls	r3, r2
 800523e:	4a02      	ldr	r2, [pc, #8]	; (8005248 <HAL_NVIC_EnableIRQ+0x18>)
 8005240:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	e000e100 	.word	0xe000e100

0800524c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800524c:	b158      	cbz	r0, 8005266 <HAL_CRC_Init+0x1a>
{
 800524e:	b510      	push	{r4, lr}
 8005250:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005252:	7943      	ldrb	r3, [r0, #5]
 8005254:	b11b      	cbz	r3, 800525e <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005256:	2301      	movs	r3, #1
 8005258:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800525a:	2000      	movs	r0, #0
}
 800525c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800525e:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8005260:	f7fe ff08 	bl	8004074 <HAL_CRC_MspInit>
 8005264:	e7f7      	b.n	8005256 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8005266:	2001      	movs	r0, #1
}
 8005268:	4770      	bx	lr

0800526a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800526a:	b430      	push	{r4, r5}
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800526c:	2302      	movs	r3, #2
 800526e:	7143      	strb	r3, [r0, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005270:	6804      	ldr	r4, [r0, #0]
 8005272:	68a3      	ldr	r3, [r4, #8]
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	60a3      	str	r3, [r4, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800527a:	2300      	movs	r3, #0
 800527c:	e004      	b.n	8005288 <HAL_CRC_Calculate+0x1e>
  {
    hcrc->Instance->DR = pBuffer[index];
 800527e:	6804      	ldr	r4, [r0, #0]
 8005280:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8005284:	6025      	str	r5, [r4, #0]
  for (index = 0U; index < BufferLength; index++)
 8005286:	3301      	adds	r3, #1
 8005288:	4293      	cmp	r3, r2
 800528a:	d3f8      	bcc.n	800527e <HAL_CRC_Calculate+0x14>
  }
  temp = hcrc->Instance->DR;
 800528c:	6803      	ldr	r3, [r0, #0]
 800528e:	681b      	ldr	r3, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005290:	2201      	movs	r2, #1
 8005292:	7142      	strb	r2, [r0, #5]

  /* Return the CRC computed value */
  return temp;
}
 8005294:	4618      	mov	r0, r3
 8005296:	bc30      	pop	{r4, r5}
 8005298:	4770      	bx	lr

0800529a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800529a:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800529c:	6805      	ldr	r5, [r0, #0]
 800529e:	682c      	ldr	r4, [r5, #0]
 80052a0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80052a4:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052a6:	6804      	ldr	r4, [r0, #0]
 80052a8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052aa:	6883      	ldr	r3, [r0, #8]
 80052ac:	2b40      	cmp	r3, #64	; 0x40
 80052ae:	d005      	beq.n	80052bc <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80052b0:	6803      	ldr	r3, [r0, #0]
 80052b2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80052b4:	6803      	ldr	r3, [r0, #0]
 80052b6:	60da      	str	r2, [r3, #12]
  }
}
 80052b8:	bc30      	pop	{r4, r5}
 80052ba:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80052bc:	6803      	ldr	r3, [r0, #0]
 80052be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80052c0:	6803      	ldr	r3, [r0, #0]
 80052c2:	60d9      	str	r1, [r3, #12]
 80052c4:	e7f8      	b.n	80052b8 <DMA_SetConfig+0x1e>
	...

080052c8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052c8:	6802      	ldr	r2, [r0, #0]
 80052ca:	b2d3      	uxtb	r3, r2
 80052cc:	3b10      	subs	r3, #16
 80052ce:	490b      	ldr	r1, [pc, #44]	; (80052fc <DMA_CalcBaseAndBitshift+0x34>)
 80052d0:	fba1 1303 	umull	r1, r3, r1, r3
 80052d4:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80052d6:	490a      	ldr	r1, [pc, #40]	; (8005300 <DMA_CalcBaseAndBitshift+0x38>)
 80052d8:	5cc9      	ldrb	r1, [r1, r3]
 80052da:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d806      	bhi.n	80052ee <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80052e0:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80052e4:	f022 0203 	bic.w	r2, r2, #3
 80052e8:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80052ea:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80052ec:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80052ee:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80052f2:	f022 0203 	bic.w	r2, r2, #3
 80052f6:	3204      	adds	r2, #4
 80052f8:	6582      	str	r2, [r0, #88]	; 0x58
 80052fa:	e7f6      	b.n	80052ea <DMA_CalcBaseAndBitshift+0x22>
 80052fc:	aaaaaaab 	.word	0xaaaaaaab
 8005300:	0800b950 	.word	0x0800b950

08005304 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005304:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005306:	6982      	ldr	r2, [r0, #24]
 8005308:	b992      	cbnz	r2, 8005330 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800530a:	2b01      	cmp	r3, #1
 800530c:	d00a      	beq.n	8005324 <DMA_CheckFifoParam+0x20>
 800530e:	b11b      	cbz	r3, 8005318 <DMA_CheckFifoParam+0x14>
 8005310:	2b02      	cmp	r3, #2
 8005312:	d001      	beq.n	8005318 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8005314:	2000      	movs	r0, #0
 8005316:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005318:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800531a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800531e:	d12c      	bne.n	800537a <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8005320:	2000      	movs	r0, #0
 8005322:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005324:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005326:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800532a:	d028      	beq.n	800537e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800532c:	2000      	movs	r0, #0
 800532e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005330:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005334:	d005      	beq.n	8005342 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005336:	2b02      	cmp	r3, #2
 8005338:	d929      	bls.n	800538e <DMA_CheckFifoParam+0x8a>
 800533a:	2b03      	cmp	r3, #3
 800533c:	d015      	beq.n	800536a <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 800533e:	2000      	movs	r0, #0
 8005340:	4770      	bx	lr
    switch (tmp)
 8005342:	2b03      	cmp	r3, #3
 8005344:	d803      	bhi.n	800534e <DMA_CheckFifoParam+0x4a>
 8005346:	e8df f003 	tbb	[pc, r3]
 800534a:	041c      	.short	0x041c
 800534c:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800534e:	2000      	movs	r0, #0
 8005350:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005352:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005354:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005358:	d115      	bne.n	8005386 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800535a:	2000      	movs	r0, #0
 800535c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800535e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005360:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005364:	d011      	beq.n	800538a <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8005366:	2000      	movs	r0, #0
 8005368:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800536a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800536c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005370:	d001      	beq.n	8005376 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8005372:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8005374:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8005376:	2000      	movs	r0, #0
 8005378:	4770      	bx	lr
        status = HAL_ERROR;
 800537a:	2001      	movs	r0, #1
 800537c:	4770      	bx	lr
        status = HAL_ERROR;
 800537e:	2001      	movs	r0, #1
 8005380:	4770      	bx	lr
      status = HAL_ERROR;
 8005382:	2001      	movs	r0, #1
 8005384:	4770      	bx	lr
        status = HAL_ERROR;
 8005386:	2001      	movs	r0, #1
 8005388:	4770      	bx	lr
        status = HAL_ERROR;
 800538a:	2001      	movs	r0, #1
 800538c:	4770      	bx	lr
      status = HAL_ERROR;
 800538e:	2001      	movs	r0, #1
 8005390:	4770      	bx	lr
	...

08005394 <HAL_DMA_Init>:
{
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005398:	f7ff fd70 	bl	8004e7c <HAL_GetTick>
  if(hdma == NULL)
 800539c:	2c00      	cmp	r4, #0
 800539e:	d05b      	beq.n	8005458 <HAL_DMA_Init+0xc4>
 80053a0:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80053a2:	2300      	movs	r3, #0
 80053a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80053a8:	2302      	movs	r3, #2
 80053aa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80053ae:	6822      	ldr	r2, [r4, #0]
 80053b0:	6813      	ldr	r3, [r2, #0]
 80053b2:	f023 0301 	bic.w	r3, r3, #1
 80053b6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	f012 0f01 	tst.w	r2, #1
 80053c0:	d00a      	beq.n	80053d8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053c2:	f7ff fd5b 	bl	8004e7c <HAL_GetTick>
 80053c6:	1b40      	subs	r0, r0, r5
 80053c8:	2805      	cmp	r0, #5
 80053ca:	d9f5      	bls.n	80053b8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053cc:	2320      	movs	r3, #32
 80053ce:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053d0:	2003      	movs	r0, #3
 80053d2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80053d6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80053d8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053da:	4820      	ldr	r0, [pc, #128]	; (800545c <HAL_DMA_Init+0xc8>)
 80053dc:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053de:	6861      	ldr	r1, [r4, #4]
 80053e0:	68a2      	ldr	r2, [r4, #8]
 80053e2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053e4:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053e6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053e8:	6921      	ldr	r1, [r4, #16]
 80053ea:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ec:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ee:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053f0:	69a1      	ldr	r1, [r4, #24]
 80053f2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80053f4:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053f6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80053f8:	6a21      	ldr	r1, [r4, #32]
 80053fa:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053fc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005400:	2904      	cmp	r1, #4
 8005402:	d01e      	beq.n	8005442 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8005404:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8005406:	6826      	ldr	r6, [r4, #0]
 8005408:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800540a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800540e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005410:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005412:	2b04      	cmp	r3, #4
 8005414:	d107      	bne.n	8005426 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8005416:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005418:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800541a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800541c:	b11b      	cbz	r3, 8005426 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800541e:	4620      	mov	r0, r4
 8005420:	f7ff ff70 	bl	8005304 <DMA_CheckFifoParam>
 8005424:	b990      	cbnz	r0, 800544c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8005426:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005428:	4620      	mov	r0, r4
 800542a:	f7ff ff4d 	bl	80052c8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800542e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005430:	233f      	movs	r3, #63	; 0x3f
 8005432:	4093      	lsls	r3, r2
 8005434:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005436:	2000      	movs	r0, #0
 8005438:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800543a:	2301      	movs	r3, #1
 800543c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005440:	e7c9      	b.n	80053d6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005442:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005444:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005446:	4301      	orrs	r1, r0
 8005448:	430a      	orrs	r2, r1
 800544a:	e7db      	b.n	8005404 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800544c:	2340      	movs	r3, #64	; 0x40
 800544e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005450:	2001      	movs	r0, #1
 8005452:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8005456:	e7be      	b.n	80053d6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8005458:	2001      	movs	r0, #1
 800545a:	e7bc      	b.n	80053d6 <HAL_DMA_Init+0x42>
 800545c:	f010803f 	.word	0xf010803f

08005460 <HAL_DMA_Start_IT>:
{
 8005460:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005462:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005464:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8005468:	2c01      	cmp	r4, #1
 800546a:	d02c      	beq.n	80054c6 <HAL_DMA_Start_IT+0x66>
 800546c:	2401      	movs	r4, #1
 800546e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005472:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8005476:	b2e4      	uxtb	r4, r4
 8005478:	2c01      	cmp	r4, #1
 800547a:	d004      	beq.n	8005486 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 800547c:	2300      	movs	r3, #0
 800547e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8005482:	2002      	movs	r0, #2
}
 8005484:	bd38      	pop	{r3, r4, r5, pc}
 8005486:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005488:	2002      	movs	r0, #2
 800548a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800548e:	2000      	movs	r0, #0
 8005490:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005492:	4620      	mov	r0, r4
 8005494:	f7ff ff01 	bl	800529a <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005498:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800549a:	233f      	movs	r3, #63	; 0x3f
 800549c:	4093      	lsls	r3, r2
 800549e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80054a0:	6822      	ldr	r2, [r4, #0]
 80054a2:	6813      	ldr	r3, [r2, #0]
 80054a4:	f043 0316 	orr.w	r3, r3, #22
 80054a8:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80054aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054ac:	b123      	cbz	r3, 80054b8 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80054ae:	6822      	ldr	r2, [r4, #0]
 80054b0:	6813      	ldr	r3, [r2, #0]
 80054b2:	f043 0308 	orr.w	r3, r3, #8
 80054b6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80054b8:	6822      	ldr	r2, [r4, #0]
 80054ba:	6813      	ldr	r3, [r2, #0]
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054c2:	2000      	movs	r0, #0
 80054c4:	e7de      	b.n	8005484 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80054c6:	2002      	movs	r0, #2
 80054c8:	e7dc      	b.n	8005484 <HAL_DMA_Start_IT+0x24>

080054ca <HAL_DMA_Abort>:
{
 80054ca:	b570      	push	{r4, r5, r6, lr}
 80054cc:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054ce:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80054d0:	f7ff fcd4 	bl	8004e7c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054d4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d006      	beq.n	80054ec <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80054e2:	2300      	movs	r3, #0
 80054e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80054e8:	2001      	movs	r0, #1
}
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054ee:	6822      	ldr	r2, [r4, #0]
 80054f0:	6813      	ldr	r3, [r2, #0]
 80054f2:	f023 0316 	bic.w	r3, r3, #22
 80054f6:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054f8:	6822      	ldr	r2, [r4, #0]
 80054fa:	6953      	ldr	r3, [r2, #20]
 80054fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005500:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005502:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005504:	b1e3      	cbz	r3, 8005540 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005506:	6822      	ldr	r2, [r4, #0]
 8005508:	6813      	ldr	r3, [r2, #0]
 800550a:	f023 0308 	bic.w	r3, r3, #8
 800550e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005510:	6822      	ldr	r2, [r4, #0]
 8005512:	6813      	ldr	r3, [r2, #0]
 8005514:	f023 0301 	bic.w	r3, r3, #1
 8005518:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f013 0f01 	tst.w	r3, #1
 8005522:	d011      	beq.n	8005548 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005524:	f7ff fcaa 	bl	8004e7c <HAL_GetTick>
 8005528:	1b40      	subs	r0, r0, r5
 800552a:	2805      	cmp	r0, #5
 800552c:	d9f5      	bls.n	800551a <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800552e:	2320      	movs	r3, #32
 8005530:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8005532:	2300      	movs	r3, #0
 8005534:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005538:	2003      	movs	r0, #3
 800553a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 800553e:	e7d4      	b.n	80054ea <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005540:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1df      	bne.n	8005506 <HAL_DMA_Abort+0x3c>
 8005546:	e7e3      	b.n	8005510 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005548:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800554a:	233f      	movs	r3, #63	; 0x3f
 800554c:	4093      	lsls	r3, r2
 800554e:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8005550:	2000      	movs	r0, #0
 8005552:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005556:	2301      	movs	r3, #1
 8005558:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800555c:	e7c5      	b.n	80054ea <HAL_DMA_Abort+0x20>

0800555e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800555e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d003      	beq.n	8005570 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005568:	2380      	movs	r3, #128	; 0x80
 800556a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800556c:	2001      	movs	r0, #1
 800556e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8005570:	2305      	movs	r3, #5
 8005572:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005576:	6802      	ldr	r2, [r0, #0]
 8005578:	6813      	ldr	r3, [r2, #0]
 800557a:	f023 0301 	bic.w	r3, r3, #1
 800557e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005580:	2000      	movs	r0, #0
}
 8005582:	4770      	bx	lr

08005584 <HAL_DMA_IRQHandler>:
{
 8005584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005586:	b083      	sub	sp, #12
 8005588:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800558e:	4b72      	ldr	r3, [pc, #456]	; (8005758 <HAL_DMA_IRQHandler+0x1d4>)
 8005590:	681d      	ldr	r5, [r3, #0]
 8005592:	4b72      	ldr	r3, [pc, #456]	; (800575c <HAL_DMA_IRQHandler+0x1d8>)
 8005594:	fba3 3505 	umull	r3, r5, r3, r5
 8005598:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800559a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800559c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800559e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80055a0:	2308      	movs	r3, #8
 80055a2:	4093      	lsls	r3, r2
 80055a4:	4233      	tst	r3, r6
 80055a6:	d010      	beq.n	80055ca <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055a8:	6803      	ldr	r3, [r0, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	f012 0f04 	tst.w	r2, #4
 80055b0:	d00b      	beq.n	80055ca <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	f022 0204 	bic.w	r2, r2, #4
 80055b8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80055ba:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80055bc:	2308      	movs	r3, #8
 80055be:	4093      	lsls	r3, r2
 80055c0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80055ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80055cc:	2301      	movs	r3, #1
 80055ce:	4093      	lsls	r3, r2
 80055d0:	4233      	tst	r3, r6
 80055d2:	d009      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80055d4:	6822      	ldr	r2, [r4, #0]
 80055d6:	6952      	ldr	r2, [r2, #20]
 80055d8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80055dc:	d004      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80055de:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80055e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80055e2:	f043 0302 	orr.w	r3, r3, #2
 80055e6:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80055e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80055ea:	2304      	movs	r3, #4
 80055ec:	4093      	lsls	r3, r2
 80055ee:	4233      	tst	r3, r6
 80055f0:	d009      	beq.n	8005606 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80055f2:	6822      	ldr	r2, [r4, #0]
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	f012 0f02 	tst.w	r2, #2
 80055fa:	d004      	beq.n	8005606 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80055fc:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005600:	f043 0304 	orr.w	r3, r3, #4
 8005604:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005606:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005608:	2310      	movs	r3, #16
 800560a:	4093      	lsls	r3, r2
 800560c:	4233      	tst	r3, r6
 800560e:	d024      	beq.n	800565a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005610:	6822      	ldr	r2, [r4, #0]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	f012 0f08 	tst.w	r2, #8
 8005618:	d01f      	beq.n	800565a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800561a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005624:	d00d      	beq.n	8005642 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800562c:	d104      	bne.n	8005638 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800562e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005630:	b19b      	cbz	r3, 800565a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8005632:	4620      	mov	r0, r4
 8005634:	4798      	blx	r3
 8005636:	e010      	b.n	800565a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005638:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800563a:	b173      	cbz	r3, 800565a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800563c:	4620      	mov	r0, r4
 800563e:	4798      	blx	r3
 8005640:	e00b      	b.n	800565a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005648:	d103      	bne.n	8005652 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	f022 0208 	bic.w	r2, r2, #8
 8005650:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005654:	b10b      	cbz	r3, 800565a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8005656:	4620      	mov	r0, r4
 8005658:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800565a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800565c:	2320      	movs	r3, #32
 800565e:	4093      	lsls	r3, r2
 8005660:	4233      	tst	r3, r6
 8005662:	d055      	beq.n	8005710 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005664:	6822      	ldr	r2, [r4, #0]
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	f012 0f10 	tst.w	r2, #16
 800566c:	d050      	beq.n	8005710 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800566e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005670:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b05      	cmp	r3, #5
 8005678:	d00e      	beq.n	8005698 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005682:	d033      	beq.n	80056ec <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800568a:	d12a      	bne.n	80056e2 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 800568c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800568e:	2b00      	cmp	r3, #0
 8005690:	d03e      	beq.n	8005710 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8005692:	4620      	mov	r0, r4
 8005694:	4798      	blx	r3
 8005696:	e03b      	b.n	8005710 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005698:	6822      	ldr	r2, [r4, #0]
 800569a:	6813      	ldr	r3, [r2, #0]
 800569c:	f023 0316 	bic.w	r3, r3, #22
 80056a0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	6953      	ldr	r3, [r2, #20]
 80056a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056aa:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056ae:	b1a3      	cbz	r3, 80056da <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056b0:	6822      	ldr	r2, [r4, #0]
 80056b2:	6813      	ldr	r3, [r2, #0]
 80056b4:	f023 0308 	bic.w	r3, r3, #8
 80056b8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80056bc:	233f      	movs	r3, #63	; 0x3f
 80056be:	4093      	lsls	r3, r2
 80056c0:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80056c2:	2300      	movs	r3, #0
 80056c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80056ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d03f      	beq.n	8005754 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80056d4:	4620      	mov	r0, r4
 80056d6:	4798      	blx	r3
 80056d8:	e03c      	b.n	8005754 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e7      	bne.n	80056b0 <HAL_DMA_IRQHandler+0x12c>
 80056e0:	e7eb      	b.n	80056ba <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80056e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80056e4:	b1a3      	cbz	r3, 8005710 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80056e6:	4620      	mov	r0, r4
 80056e8:	4798      	blx	r3
 80056ea:	e011      	b.n	8005710 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	f412 7f80 	tst.w	r2, #256	; 0x100
 80056f2:	d109      	bne.n	8005708 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	f022 0210 	bic.w	r2, r2, #16
 80056fa:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80056fc:	2300      	movs	r3, #0
 80056fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005702:	2301      	movs	r3, #1
 8005704:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005708:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800570a:	b10b      	cbz	r3, 8005710 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800570c:	4620      	mov	r0, r4
 800570e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005710:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005712:	b1fb      	cbz	r3, 8005754 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005714:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005716:	f013 0f01 	tst.w	r3, #1
 800571a:	d017      	beq.n	800574c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800571c:	2305      	movs	r3, #5
 800571e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005722:	6822      	ldr	r2, [r4, #0]
 8005724:	6813      	ldr	r3, [r2, #0]
 8005726:	f023 0301 	bic.w	r3, r3, #1
 800572a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800572c:	9b01      	ldr	r3, [sp, #4]
 800572e:	3301      	adds	r3, #1
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	42ab      	cmp	r3, r5
 8005734:	d804      	bhi.n	8005740 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f013 0f01 	tst.w	r3, #1
 800573e:	d1f5      	bne.n	800572c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8005740:	2300      	movs	r3, #0
 8005742:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005746:	2301      	movs	r3, #1
 8005748:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800574c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800574e:	b10b      	cbz	r3, 8005754 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8005750:	4620      	mov	r0, r4
 8005752:	4798      	blx	r3
}
 8005754:	b003      	add	sp, #12
 8005756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005758:	20000038 	.word	0x20000038
 800575c:	1b4e81b5 	.word	0x1b4e81b5

08005760 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005760:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8005762:	4770      	bx	lr

08005764 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005764:	2300      	movs	r3, #0
 8005766:	2b0f      	cmp	r3, #15
 8005768:	f200 80c5 	bhi.w	80058f6 <HAL_GPIO_Init+0x192>
{
 800576c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800576e:	b083      	sub	sp, #12
 8005770:	e039      	b.n	80057e6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005772:	2204      	movs	r2, #4
 8005774:	e000      	b.n	8005778 <HAL_GPIO_Init+0x14>
 8005776:	2200      	movs	r2, #0
 8005778:	40aa      	lsls	r2, r5
 800577a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800577c:	3402      	adds	r4, #2
 800577e:	4d5e      	ldr	r5, [pc, #376]	; (80058f8 <HAL_GPIO_Init+0x194>)
 8005780:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005784:	4a5d      	ldr	r2, [pc, #372]	; (80058fc <HAL_GPIO_Init+0x198>)
 8005786:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005788:	43f2      	mvns	r2, r6
 800578a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800578e:	684f      	ldr	r7, [r1, #4]
 8005790:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8005794:	d001      	beq.n	800579a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8005796:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 800579a:	4c58      	ldr	r4, [pc, #352]	; (80058fc <HAL_GPIO_Init+0x198>)
 800579c:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 800579e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80057a0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057a4:	684f      	ldr	r7, [r1, #4]
 80057a6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80057aa:	d001      	beq.n	80057b0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80057ac:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 80057b0:	4c52      	ldr	r4, [pc, #328]	; (80058fc <HAL_GPIO_Init+0x198>)
 80057b2:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057b4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80057b6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80057ba:	684f      	ldr	r7, [r1, #4]
 80057bc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80057c0:	d001      	beq.n	80057c6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80057c2:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 80057c6:	4c4d      	ldr	r4, [pc, #308]	; (80058fc <HAL_GPIO_Init+0x198>)
 80057c8:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80057ca:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80057cc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057ce:	684d      	ldr	r5, [r1, #4]
 80057d0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 80057d4:	d001      	beq.n	80057da <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80057d6:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 80057da:	4c48      	ldr	r4, [pc, #288]	; (80058fc <HAL_GPIO_Init+0x198>)
 80057dc:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057de:	3301      	adds	r3, #1
 80057e0:	2b0f      	cmp	r3, #15
 80057e2:	f200 8086 	bhi.w	80058f2 <HAL_GPIO_Init+0x18e>
    ioposition = 0x01U << position;
 80057e6:	2201      	movs	r2, #1
 80057e8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057ea:	680c      	ldr	r4, [r1, #0]
 80057ec:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 80057f0:	42b2      	cmp	r2, r6
 80057f2:	d1f4      	bne.n	80057de <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057f4:	684c      	ldr	r4, [r1, #4]
 80057f6:	1e65      	subs	r5, r4, #1
 80057f8:	2d01      	cmp	r5, #1
 80057fa:	d903      	bls.n	8005804 <HAL_GPIO_Init+0xa0>
 80057fc:	2c11      	cmp	r4, #17
 80057fe:	d001      	beq.n	8005804 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005800:	2c12      	cmp	r4, #18
 8005802:	d112      	bne.n	800582a <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8005804:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005806:	005f      	lsls	r7, r3, #1
 8005808:	2403      	movs	r4, #3
 800580a:	40bc      	lsls	r4, r7
 800580c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005810:	68cc      	ldr	r4, [r1, #12]
 8005812:	40bc      	lsls	r4, r7
 8005814:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8005816:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8005818:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800581a:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800581e:	684c      	ldr	r4, [r1, #4]
 8005820:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8005824:	409a      	lsls	r2, r3
 8005826:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8005828:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800582a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800582c:	005f      	lsls	r7, r3, #1
 800582e:	2203      	movs	r2, #3
 8005830:	40ba      	lsls	r2, r7
 8005832:	43d2      	mvns	r2, r2
 8005834:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005836:	688d      	ldr	r5, [r1, #8]
 8005838:	40bd      	lsls	r5, r7
 800583a:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 800583c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800583e:	684c      	ldr	r4, [r1, #4]
 8005840:	2c02      	cmp	r4, #2
 8005842:	d001      	beq.n	8005848 <HAL_GPIO_Init+0xe4>
 8005844:	2c12      	cmp	r4, #18
 8005846:	d113      	bne.n	8005870 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8005848:	08dd      	lsrs	r5, r3, #3
 800584a:	3508      	adds	r5, #8
 800584c:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005850:	f003 0407 	and.w	r4, r3, #7
 8005854:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005858:	240f      	movs	r4, #15
 800585a:	fa04 f40c 	lsl.w	r4, r4, ip
 800585e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005862:	690c      	ldr	r4, [r1, #16]
 8005864:	fa04 f40c 	lsl.w	r4, r4, ip
 8005868:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800586c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8005870:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005872:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005874:	684c      	ldr	r4, [r1, #4]
 8005876:	f004 0403 	and.w	r4, r4, #3
 800587a:	40bc      	lsls	r4, r7
 800587c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800587e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005880:	684a      	ldr	r2, [r1, #4]
 8005882:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8005886:	d0aa      	beq.n	80057de <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005888:	2200      	movs	r2, #0
 800588a:	9201      	str	r2, [sp, #4]
 800588c:	4a1c      	ldr	r2, [pc, #112]	; (8005900 <HAL_GPIO_Init+0x19c>)
 800588e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005890:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8005894:	6454      	str	r4, [r2, #68]	; 0x44
 8005896:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005898:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800589c:	9201      	str	r2, [sp, #4]
 800589e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80058a0:	089c      	lsrs	r4, r3, #2
 80058a2:	1ca5      	adds	r5, r4, #2
 80058a4:	4a14      	ldr	r2, [pc, #80]	; (80058f8 <HAL_GPIO_Init+0x194>)
 80058a6:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058aa:	f003 0203 	and.w	r2, r3, #3
 80058ae:	0095      	lsls	r5, r2, #2
 80058b0:	220f      	movs	r2, #15
 80058b2:	40aa      	lsls	r2, r5
 80058b4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058b8:	4a12      	ldr	r2, [pc, #72]	; (8005904 <HAL_GPIO_Init+0x1a0>)
 80058ba:	4290      	cmp	r0, r2
 80058bc:	f43f af5b 	beq.w	8005776 <HAL_GPIO_Init+0x12>
 80058c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058c4:	4290      	cmp	r0, r2
 80058c6:	d00e      	beq.n	80058e6 <HAL_GPIO_Init+0x182>
 80058c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058cc:	4290      	cmp	r0, r2
 80058ce:	d00c      	beq.n	80058ea <HAL_GPIO_Init+0x186>
 80058d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058d4:	4290      	cmp	r0, r2
 80058d6:	d00a      	beq.n	80058ee <HAL_GPIO_Init+0x18a>
 80058d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058dc:	4290      	cmp	r0, r2
 80058de:	f43f af48 	beq.w	8005772 <HAL_GPIO_Init+0xe>
 80058e2:	2207      	movs	r2, #7
 80058e4:	e748      	b.n	8005778 <HAL_GPIO_Init+0x14>
 80058e6:	2201      	movs	r2, #1
 80058e8:	e746      	b.n	8005778 <HAL_GPIO_Init+0x14>
 80058ea:	2202      	movs	r2, #2
 80058ec:	e744      	b.n	8005778 <HAL_GPIO_Init+0x14>
 80058ee:	2203      	movs	r2, #3
 80058f0:	e742      	b.n	8005778 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80058f2:	b003      	add	sp, #12
 80058f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058f6:	4770      	bx	lr
 80058f8:	40013800 	.word	0x40013800
 80058fc:	40013c00 	.word	0x40013c00
 8005900:	40023800 	.word	0x40023800
 8005904:	40020000 	.word	0x40020000

08005908 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005908:	6903      	ldr	r3, [r0, #16]
 800590a:	4219      	tst	r1, r3
 800590c:	d101      	bne.n	8005912 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800590e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8005910:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8005912:	2001      	movs	r0, #1
 8005914:	4770      	bx	lr

08005916 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005916:	b912      	cbnz	r2, 800591e <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005918:	0409      	lsls	r1, r1, #16
 800591a:	6181      	str	r1, [r0, #24]
  }
}
 800591c:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800591e:	6181      	str	r1, [r0, #24]
 8005920:	4770      	bx	lr
	...

08005924 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005924:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	4203      	tst	r3, r0
 800592c:	d100      	bne.n	8005930 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800592e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005930:	4b02      	ldr	r3, [pc, #8]	; (800593c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005932:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005934:	f7fe f808 	bl	8003948 <HAL_GPIO_EXTI_Callback>
}
 8005938:	e7f9      	b.n	800592e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800593a:	bf00      	nop
 800593c:	40013c00 	.word	0x40013c00

08005940 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005940:	6803      	ldr	r3, [r0, #0]
 8005942:	695a      	ldr	r2, [r3, #20]
 8005944:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005948:	d011      	beq.n	800596e <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800594a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800594e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005950:	2300      	movs	r3, #0
 8005952:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005954:	2220      	movs	r2, #32
 8005956:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800595a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800595e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005960:	f042 0204 	orr.w	r2, r2, #4
 8005964:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005966:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 800596a:	2001      	movs	r0, #1
 800596c:	4770      	bx	lr
  }
  return HAL_OK;
 800596e:	2000      	movs	r0, #0
}
 8005970:	4770      	bx	lr

08005972 <I2C_WaitOnFlagUntilTimeout>:
{
 8005972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005974:	4606      	mov	r6, r0
 8005976:	460c      	mov	r4, r1
 8005978:	4617      	mov	r7, r2
 800597a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800597c:	e022      	b.n	80059c4 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597e:	f7ff fa7d 	bl	8004e7c <HAL_GetTick>
 8005982:	9b06      	ldr	r3, [sp, #24]
 8005984:	1ac0      	subs	r0, r0, r3
 8005986:	42a8      	cmp	r0, r5
 8005988:	d800      	bhi.n	800598c <I2C_WaitOnFlagUntilTimeout+0x1a>
 800598a:	b9dd      	cbnz	r5, 80059c4 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800598c:	2300      	movs	r3, #0
 800598e:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005990:	2220      	movs	r2, #32
 8005992:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005996:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800599a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800599c:	f042 0220 	orr.w	r2, r2, #32
 80059a0:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80059a2:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 80059a6:	2001      	movs	r0, #1
 80059a8:	e01a      	b.n	80059e0 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059aa:	6833      	ldr	r3, [r6, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	ea24 0303 	bic.w	r3, r4, r3
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	fab3 f383 	clz	r3, r3
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	429f      	cmp	r7, r3
 80059bc:	d10f      	bne.n	80059de <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80059be:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80059c2:	d1dc      	bne.n	800597e <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059c4:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d0ee      	beq.n	80059aa <I2C_WaitOnFlagUntilTimeout+0x38>
 80059cc:	6833      	ldr	r3, [r6, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	ea24 0303 	bic.w	r3, r4, r3
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	fab3 f383 	clz	r3, r3
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	e7ed      	b.n	80059ba <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 80059de:	2000      	movs	r0, #0
}
 80059e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080059e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80059e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e4:	4604      	mov	r4, r0
 80059e6:	460d      	mov	r5, r1
 80059e8:	4616      	mov	r6, r2
 80059ea:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059ec:	e03c      	b.n	8005a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059fc:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a02:	2220      	movs	r2, #32
 8005a04:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005a0e:	f042 0204 	orr.w	r2, r2, #4
 8005a12:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005a14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8005a18:	2001      	movs	r0, #1
 8005a1a:	e033      	b.n	8005a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1c:	f7ff fa2e 	bl	8004e7c <HAL_GetTick>
 8005a20:	1bc0      	subs	r0, r0, r7
 8005a22:	42b0      	cmp	r0, r6
 8005a24:	d800      	bhi.n	8005a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8005a26:	b9fe      	cbnz	r6, 8005a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a36:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005a38:	f042 0220 	orr.w	r2, r2, #32
 8005a3c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005a3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005a42:	2001      	movs	r0, #1
 8005a44:	e01e      	b.n	8005a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	ea25 0303 	bic.w	r3, r5, r3
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	3300      	adds	r3, #0
 8005a52:	bf18      	it	ne
 8005a54:	2301      	movne	r3, #1
 8005a56:	b1a3      	cbz	r3, 8005a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	695a      	ldr	r2, [r3, #20]
 8005a5c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005a60:	d1c5      	bne.n	80059ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8005a62:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8005a66:	d1d9      	bne.n	8005a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a68:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d0ea      	beq.n	8005a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	ea25 0303 	bic.w	r3, r5, r3
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3300      	adds	r3, #0
 8005a7c:	bf18      	it	ne
 8005a7e:	2301      	movne	r3, #1
 8005a80:	e7e9      	b.n	8005a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8005a82:	2000      	movs	r0, #0
}
 8005a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a86 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005a86:	b570      	push	{r4, r5, r6, lr}
 8005a88:	4604      	mov	r4, r0
 8005a8a:	460d      	mov	r5, r1
 8005a8c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a96:	d11c      	bne.n	8005ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f7ff ff51 	bl	8005940 <I2C_IsAcknowledgeFailed>
 8005a9e:	b9d0      	cbnz	r0, 8005ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005aa0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005aa4:	d0f3      	beq.n	8005a8e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa6:	f7ff f9e9 	bl	8004e7c <HAL_GetTick>
 8005aaa:	1b80      	subs	r0, r0, r6
 8005aac:	42a8      	cmp	r0, r5
 8005aae:	d801      	bhi.n	8005ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005ab0:	2d00      	cmp	r5, #0
 8005ab2:	d1ec      	bne.n	8005a8e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005abe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ac2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005ac4:	f042 0220 	orr.w	r2, r2, #32
 8005ac8:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005aca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005ace:	2001      	movs	r0, #1
 8005ad0:	e000      	b.n	8005ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8005ad2:	2000      	movs	r0, #0
}
 8005ad4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	e7fc      	b.n	8005ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08005adc <I2C_RequestMemoryWrite>:
{
 8005adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	4688      	mov	r8, r1
 8005ae6:	4616      	mov	r6, r2
 8005ae8:	461f      	mov	r7, r3
 8005aea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aec:	6802      	ldr	r2, [r0, #0]
 8005aee:	6813      	ldr	r3, [r2, #0]
 8005af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af4:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005af6:	9500      	str	r5, [sp, #0]
 8005af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005afa:	2200      	movs	r2, #0
 8005afc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b00:	f7ff ff37 	bl	8005972 <I2C_WaitOnFlagUntilTimeout>
 8005b04:	b160      	cbz	r0, 8005b20 <I2C_RequestMemoryWrite+0x44>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005b0e:	d04f      	beq.n	8005bb0 <I2C_RequestMemoryWrite+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b14:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	b004      	add	sp, #16
 8005b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b20:	6822      	ldr	r2, [r4, #0]
 8005b22:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8005b26:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b28:	462b      	mov	r3, r5
 8005b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b2c:	4921      	ldr	r1, [pc, #132]	; (8005bb4 <I2C_RequestMemoryWrite+0xd8>)
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f7ff ff57 	bl	80059e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b34:	b108      	cbz	r0, 8005b3a <I2C_RequestMemoryWrite+0x5e>
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e7ee      	b.n	8005b18 <I2C_RequestMemoryWrite+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	9303      	str	r3, [sp, #12]
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	9203      	str	r2, [sp, #12]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	9303      	str	r3, [sp, #12]
 8005b48:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b4a:	462a      	mov	r2, r5
 8005b4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f7ff ff99 	bl	8005a86 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	b158      	cbz	r0, 8005b70 <I2C_RequestMemoryWrite+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d001      	beq.n	8005b62 <I2C_RequestMemoryWrite+0x86>
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e7da      	b.n	8005b18 <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b62:	6822      	ldr	r2, [r4, #0]
 8005b64:	6813      	ldr	r3, [r2, #0]
 8005b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b6a:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e7d3      	b.n	8005b18 <I2C_RequestMemoryWrite+0x3c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b70:	2f01      	cmp	r7, #1
 8005b72:	d00e      	beq.n	8005b92 <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	0a32      	lsrs	r2, r6, #8
 8005b78:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b7a:	462a      	mov	r2, r5
 8005b7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f7ff ff81 	bl	8005a86 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	b178      	cbz	r0, 8005ba8 <I2C_RequestMemoryWrite+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d005      	beq.n	8005b9a <I2C_RequestMemoryWrite+0xbe>
      return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e7c2      	b.n	8005b18 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b92:	6822      	ldr	r2, [r4, #0]
 8005b94:	b2f6      	uxtb	r6, r6
 8005b96:	6116      	str	r6, [r2, #16]
 8005b98:	e7be      	b.n	8005b18 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b9a:	6822      	ldr	r2, [r4, #0]
 8005b9c:	6813      	ldr	r3, [r2, #0]
 8005b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ba2:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e7b7      	b.n	8005b18 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ba8:	6822      	ldr	r2, [r4, #0]
 8005baa:	b2f6      	uxtb	r6, r6
 8005bac:	6116      	str	r6, [r2, #16]
 8005bae:	e7b3      	b.n	8005b18 <I2C_RequestMemoryWrite+0x3c>
    return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e7b1      	b.n	8005b18 <I2C_RequestMemoryWrite+0x3c>
 8005bb4:	00010002 	.word	0x00010002

08005bb8 <I2C_RequestMemoryRead>:
{
 8005bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	460e      	mov	r6, r1
 8005bc2:	4617      	mov	r7, r2
 8005bc4:	4698      	mov	r8, r3
 8005bc6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc8:	6802      	ldr	r2, [r0, #0]
 8005bca:	6813      	ldr	r3, [r2, #0]
 8005bcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bd0:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bd2:	6802      	ldr	r2, [r0, #0]
 8005bd4:	6813      	ldr	r3, [r2, #0]
 8005bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bda:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bdc:	9500      	str	r5, [sp, #0]
 8005bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be0:	2200      	movs	r2, #0
 8005be2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005be6:	f7ff fec4 	bl	8005972 <I2C_WaitOnFlagUntilTimeout>
 8005bea:	b168      	cbz	r0, 8005c08 <I2C_RequestMemoryRead+0x50>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005bf4:	f000 8089 	beq.w	8005d0a <I2C_RequestMemoryRead+0x152>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bfc:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	b004      	add	sp, #16
 8005c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c08:	b2f6      	uxtb	r6, r6
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 8005c10:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c12:	462b      	mov	r3, r5
 8005c14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c16:	493f      	ldr	r1, [pc, #252]	; (8005d14 <I2C_RequestMemoryRead+0x15c>)
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f7ff fee2 	bl	80059e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c1e:	b108      	cbz	r0, 8005c24 <I2C_RequestMemoryRead+0x6c>
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e7ed      	b.n	8005c00 <I2C_RequestMemoryRead+0x48>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c24:	2300      	movs	r3, #0
 8005c26:	9303      	str	r3, [sp, #12]
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	695a      	ldr	r2, [r3, #20]
 8005c2c:	9203      	str	r2, [sp, #12]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	9303      	str	r3, [sp, #12]
 8005c32:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c34:	462a      	mov	r2, r5
 8005c36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f7ff ff24 	bl	8005a86 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c3e:	b158      	cbz	r0, 8005c58 <I2C_RequestMemoryRead+0xa0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d001      	beq.n	8005c4a <I2C_RequestMemoryRead+0x92>
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e7da      	b.n	8005c00 <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4a:	6822      	ldr	r2, [r4, #0]
 8005c4c:	6813      	ldr	r3, [r2, #0]
 8005c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c52:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e7d3      	b.n	8005c00 <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c58:	f1b8 0f01 	cmp.w	r8, #1
 8005c5c:	d10d      	bne.n	8005c7a <I2C_RequestMemoryRead+0xc2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	b2ff      	uxtb	r7, r7
 8005c62:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c64:	462a      	mov	r2, r5
 8005c66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f7ff ff0c 	bl	8005a86 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c6e:	b320      	cbz	r0, 8005cba <I2C_RequestMemoryRead+0x102>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d01a      	beq.n	8005cac <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e7c2      	b.n	8005c00 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	0a3a      	lsrs	r2, r7, #8
 8005c7e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c80:	462a      	mov	r2, r5
 8005c82:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c84:	4620      	mov	r0, r4
 8005c86:	f7ff fefe 	bl	8005a86 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c8a:	b158      	cbz	r0, 8005ca4 <I2C_RequestMemoryRead+0xec>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d001      	beq.n	8005c96 <I2C_RequestMemoryRead+0xde>
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e7b4      	b.n	8005c00 <I2C_RequestMemoryRead+0x48>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c96:	6822      	ldr	r2, [r4, #0]
 8005c98:	6813      	ldr	r3, [r2, #0]
 8005c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c9e:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e7ad      	b.n	8005c00 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	b2ff      	uxtb	r7, r7
 8005ca8:	611f      	str	r7, [r3, #16]
 8005caa:	e7db      	b.n	8005c64 <I2C_RequestMemoryRead+0xac>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cac:	6822      	ldr	r2, [r4, #0]
 8005cae:	6813      	ldr	r3, [r2, #0]
 8005cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cb4:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e7a2      	b.n	8005c00 <I2C_RequestMemoryRead+0x48>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cba:	6822      	ldr	r2, [r4, #0]
 8005cbc:	6813      	ldr	r3, [r2, #0]
 8005cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc4:	9500      	str	r5, [sp, #0]
 8005cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f7ff fe4f 	bl	8005972 <I2C_WaitOnFlagUntilTimeout>
 8005cd4:	b148      	cbz	r0, 8005cea <I2C_RequestMemoryRead+0x132>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005cde:	d016      	beq.n	8005d0e <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ce4:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e78a      	b.n	8005c00 <I2C_RequestMemoryRead+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	f046 0601 	orr.w	r6, r6, #1
 8005cf0:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cf2:	462b      	mov	r3, r5
 8005cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cf6:	4907      	ldr	r1, [pc, #28]	; (8005d14 <I2C_RequestMemoryRead+0x15c>)
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f7ff fe72 	bl	80059e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2800      	cmp	r0, #0
 8005d02:	f43f af7d 	beq.w	8005c00 <I2C_RequestMemoryRead+0x48>
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e77a      	b.n	8005c00 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e778      	b.n	8005c00 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e776      	b.n	8005c00 <I2C_RequestMemoryRead+0x48>
 8005d12:	bf00      	nop
 8005d14:	00010002 	.word	0x00010002

08005d18 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	460d      	mov	r5, r1
 8005d1e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	f013 0f04 	tst.w	r3, #4
 8005d28:	d11c      	bne.n	8005d64 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f7ff fe08 	bl	8005940 <I2C_IsAcknowledgeFailed>
 8005d30:	b9d0      	cbnz	r0, 8005d68 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005d32:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005d36:	d0f3      	beq.n	8005d20 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d38:	f7ff f8a0 	bl	8004e7c <HAL_GetTick>
 8005d3c:	1b80      	subs	r0, r0, r6
 8005d3e:	42a8      	cmp	r0, r5
 8005d40:	d801      	bhi.n	8005d46 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8005d42:	2d00      	cmp	r5, #0
 8005d44:	d1ec      	bne.n	8005d20 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d46:	2300      	movs	r3, #0
 8005d48:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005d56:	f042 0220 	orr.w	r2, r2, #32
 8005d5a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005d5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005d60:	2001      	movs	r0, #1
 8005d62:	e000      	b.n	8005d66 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8005d64:	2000      	movs	r0, #0
}
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005d68:	2001      	movs	r0, #1
 8005d6a:	e7fc      	b.n	8005d66 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08005d6c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	4605      	mov	r5, r0
 8005d70:	460c      	mov	r4, r1
 8005d72:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d74:	682b      	ldr	r3, [r5, #0]
 8005d76:	695a      	ldr	r2, [r3, #20]
 8005d78:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005d7c:	d129      	bne.n	8005dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d7e:	695a      	ldr	r2, [r3, #20]
 8005d80:	f012 0f10 	tst.w	r2, #16
 8005d84:	d115      	bne.n	8005db2 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d86:	f7ff f879 	bl	8004e7c <HAL_GetTick>
 8005d8a:	1b80      	subs	r0, r0, r6
 8005d8c:	42a0      	cmp	r0, r4
 8005d8e:	d801      	bhi.n	8005d94 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8005d90:	2c00      	cmp	r4, #0
 8005d92:	d1ef      	bne.n	8005d74 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d94:	2300      	movs	r3, #0
 8005d96:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d9e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005da2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005da4:	f042 0220 	orr.w	r2, r2, #32
 8005da8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005daa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8005dae:	2001      	movs	r0, #1
}
 8005db0:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005db2:	f06f 0210 	mvn.w	r2, #16
 8005db6:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005dc6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005dc8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005dca:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8005dce:	2001      	movs	r0, #1
 8005dd0:	e7ee      	b.n	8005db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	e7ec      	b.n	8005db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08005dd8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	f000 80c8 	beq.w	8005f6e <HAL_I2C_Init+0x196>
{
 8005dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005de2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d075      	beq.n	8005ed6 <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dea:	2324      	movs	r3, #36	; 0x24
 8005dec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005df0:	6822      	ldr	r2, [r4, #0]
 8005df2:	6813      	ldr	r3, [r2, #0]
 8005df4:	f023 0301 	bic.w	r3, r3, #1
 8005df8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005dfa:	6822      	ldr	r2, [r4, #0]
 8005dfc:	6813      	ldr	r3, [r2, #0]
 8005dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e02:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e04:	6822      	ldr	r2, [r4, #0]
 8005e06:	6813      	ldr	r3, [r2, #0]
 8005e08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e0c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e0e:	f000 fea7 	bl	8006b60 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e12:	6862      	ldr	r2, [r4, #4]
 8005e14:	4b58      	ldr	r3, [pc, #352]	; (8005f78 <HAL_I2C_Init+0x1a0>)
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d862      	bhi.n	8005ee0 <HAL_I2C_Init+0x108>
 8005e1a:	4b58      	ldr	r3, [pc, #352]	; (8005f7c <HAL_I2C_Init+0x1a4>)
 8005e1c:	4298      	cmp	r0, r3
 8005e1e:	bf8c      	ite	hi
 8005e20:	2300      	movhi	r3, #0
 8005e22:	2301      	movls	r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f040 80a4 	bne.w	8005f72 <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 8005e2a:	4b55      	ldr	r3, [pc, #340]	; (8005f80 <HAL_I2C_Init+0x1a8>)
 8005e2c:	fba3 2300 	umull	r2, r3, r3, r0
 8005e30:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e32:	6821      	ldr	r1, [r4, #0]
 8005e34:	684a      	ldr	r2, [r1, #4]
 8005e36:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e3e:	6825      	ldr	r5, [r4, #0]
 8005e40:	6a2a      	ldr	r2, [r5, #32]
 8005e42:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005e46:	6866      	ldr	r6, [r4, #4]
 8005e48:	494b      	ldr	r1, [pc, #300]	; (8005f78 <HAL_I2C_Init+0x1a0>)
 8005e4a:	428e      	cmp	r6, r1
 8005e4c:	d84e      	bhi.n	8005eec <HAL_I2C_Init+0x114>
 8005e4e:	3301      	adds	r3, #1
 8005e50:	4313      	orrs	r3, r2
 8005e52:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e54:	6825      	ldr	r5, [r4, #0]
 8005e56:	69e9      	ldr	r1, [r5, #28]
 8005e58:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8005e5c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005e60:	6863      	ldr	r3, [r4, #4]
 8005e62:	4a45      	ldr	r2, [pc, #276]	; (8005f78 <HAL_I2C_Init+0x1a0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d84b      	bhi.n	8005f00 <HAL_I2C_Init+0x128>
 8005e68:	3801      	subs	r0, #1
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e70:	3301      	adds	r3, #1
 8005e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	bf38      	it	cc
 8005e7a:	2304      	movcc	r3, #4
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e80:	6821      	ldr	r1, [r4, #0]
 8005e82:	680b      	ldr	r3, [r1, #0]
 8005e84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e88:	69e2      	ldr	r2, [r4, #28]
 8005e8a:	6a20      	ldr	r0, [r4, #32]
 8005e8c:	4302      	orrs	r2, r0
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e92:	6821      	ldr	r1, [r4, #0]
 8005e94:	688b      	ldr	r3, [r1, #8]
 8005e96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e9e:	6922      	ldr	r2, [r4, #16]
 8005ea0:	68e0      	ldr	r0, [r4, #12]
 8005ea2:	4302      	orrs	r2, r0
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ea8:	6821      	ldr	r1, [r4, #0]
 8005eaa:	68cb      	ldr	r3, [r1, #12]
 8005eac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005eb0:	6962      	ldr	r2, [r4, #20]
 8005eb2:	69a0      	ldr	r0, [r4, #24]
 8005eb4:	4302      	orrs	r2, r0
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005eba:	6822      	ldr	r2, [r4, #0]
 8005ebc:	6813      	ldr	r3, [r2, #0]
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ec8:	2320      	movs	r3, #32
 8005eca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ece:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8005ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005ed6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005eda:	f7fe f8e3 	bl	80040a4 <HAL_I2C_MspInit>
 8005ede:	e784      	b.n	8005dea <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ee0:	4b28      	ldr	r3, [pc, #160]	; (8005f84 <HAL_I2C_Init+0x1ac>)
 8005ee2:	4298      	cmp	r0, r3
 8005ee4:	bf8c      	ite	hi
 8005ee6:	2300      	movhi	r3, #0
 8005ee8:	2301      	movls	r3, #1
 8005eea:	e79b      	b.n	8005e24 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005eec:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	4924      	ldr	r1, [pc, #144]	; (8005f88 <HAL_I2C_Init+0x1b0>)
 8005ef6:	fba1 1303 	umull	r1, r3, r1, r3
 8005efa:	099b      	lsrs	r3, r3, #6
 8005efc:	3301      	adds	r3, #1
 8005efe:	e7a7      	b.n	8005e50 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f00:	68a2      	ldr	r2, [r4, #8]
 8005f02:	b9ba      	cbnz	r2, 8005f34 <HAL_I2C_Init+0x15c>
 8005f04:	1e46      	subs	r6, r0, #1
 8005f06:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8005f0a:	fbb6 f6f7 	udiv	r6, r6, r7
 8005f0e:	3601      	adds	r6, #1
 8005f10:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8005f14:	fab6 f686 	clz	r6, r6
 8005f18:	0976      	lsrs	r6, r6, #5
 8005f1a:	bb36      	cbnz	r6, 8005f6a <HAL_I2C_Init+0x192>
 8005f1c:	b9c2      	cbnz	r2, 8005f50 <HAL_I2C_Init+0x178>
 8005f1e:	3801      	subs	r0, #1
 8005f20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f28:	3301      	adds	r3, #1
 8005f2a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8005f2e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8005f32:	e7a3      	b.n	8005e7c <HAL_I2C_Init+0xa4>
 8005f34:	1e46      	subs	r6, r0, #1
 8005f36:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8005f3a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8005f3e:	fbb6 f6f7 	udiv	r6, r6, r7
 8005f42:	3601      	adds	r6, #1
 8005f44:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8005f48:	fab6 f686 	clz	r6, r6
 8005f4c:	0976      	lsrs	r6, r6, #5
 8005f4e:	e7e4      	b.n	8005f1a <HAL_I2C_Init+0x142>
 8005f50:	3801      	subs	r0, #1
 8005f52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f5a:	fbb0 f2f3 	udiv	r2, r0, r3
 8005f5e:	3201      	adds	r2, #1
 8005f60:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005f64:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8005f68:	e788      	b.n	8005e7c <HAL_I2C_Init+0xa4>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e786      	b.n	8005e7c <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 8005f6e:	2001      	movs	r0, #1
}
 8005f70:	4770      	bx	lr
    return HAL_ERROR;
 8005f72:	2001      	movs	r0, #1
 8005f74:	e7ae      	b.n	8005ed4 <HAL_I2C_Init+0xfc>
 8005f76:	bf00      	nop
 8005f78:	000186a0 	.word	0x000186a0
 8005f7c:	001e847f 	.word	0x001e847f
 8005f80:	431bde83 	.word	0x431bde83
 8005f84:	003d08ff 	.word	0x003d08ff
 8005f88:	10624dd3 	.word	0x10624dd3

08005f8c <HAL_I2C_Mem_Write>:
{
 8005f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f90:	b082      	sub	sp, #8
 8005f92:	4604      	mov	r4, r0
 8005f94:	460e      	mov	r6, r1
 8005f96:	4617      	mov	r7, r2
 8005f98:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8005f9a:	f7fe ff6f 	bl	8004e7c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f9e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d004      	beq.n	8005fb2 <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 8005fa8:	2302      	movs	r3, #2
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	b002      	add	sp, #8
 8005fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fb2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fb4:	9000      	str	r0, [sp, #0]
 8005fb6:	2319      	movs	r3, #25
 8005fb8:	2201      	movs	r2, #1
 8005fba:	494c      	ldr	r1, [pc, #304]	; (80060ec <HAL_I2C_Mem_Write+0x160>)
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f7ff fcd8 	bl	8005972 <I2C_WaitOnFlagUntilTimeout>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	f040 808b 	bne.w	80060de <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8005fc8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	f000 8088 	beq.w	80060e2 <HAL_I2C_Mem_Write+0x156>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	f012 0f01 	tst.w	r2, #1
 8005fe0:	d103      	bne.n	8005fea <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	f042 0201 	orr.w	r2, r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fea:	6822      	ldr	r2, [r4, #0]
 8005fec:	6813      	ldr	r3, [r2, #0]
 8005fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ff2:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ff4:	2321      	movs	r3, #33	; 0x21
 8005ff6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ffa:	2340      	movs	r3, #64	; 0x40
 8005ffc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006000:	2300      	movs	r3, #0
 8006002:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006004:	9b08      	ldr	r3, [sp, #32]
 8006006:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006008:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800600c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800600e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006010:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006012:	4b37      	ldr	r3, [pc, #220]	; (80060f0 <HAL_I2C_Mem_Write+0x164>)
 8006014:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006016:	9501      	str	r5, [sp, #4]
 8006018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	4643      	mov	r3, r8
 800601e:	463a      	mov	r2, r7
 8006020:	4631      	mov	r1, r6
 8006022:	4620      	mov	r0, r4
 8006024:	f7ff fd5a 	bl	8005adc <I2C_RequestMemoryWrite>
 8006028:	2800      	cmp	r0, #0
 800602a:	d15c      	bne.n	80060e6 <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 800602c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800602e:	2b00      	cmp	r3, #0
 8006030:	d034      	beq.n	800609c <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006032:	462a      	mov	r2, r5
 8006034:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006036:	4620      	mov	r0, r4
 8006038:	f7ff fd25 	bl	8005a86 <I2C_WaitOnTXEFlagUntilTimeout>
 800603c:	bb10      	cbnz	r0, 8006084 <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800603e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	7812      	ldrb	r2, [r2, #0]
 8006044:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006046:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006048:	1c4b      	adds	r3, r1, #1
 800604a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800604c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800604e:	3b01      	subs	r3, #1
 8006050:	b29b      	uxth	r3, r3
 8006052:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006054:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006056:	3a01      	subs	r2, #1
 8006058:	b292      	uxth	r2, r2
 800605a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800605c:	6822      	ldr	r2, [r4, #0]
 800605e:	6950      	ldr	r0, [r2, #20]
 8006060:	f010 0f04 	tst.w	r0, #4
 8006064:	d0e2      	beq.n	800602c <HAL_I2C_Mem_Write+0xa0>
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0e0      	beq.n	800602c <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800606a:	784b      	ldrb	r3, [r1, #1]
 800606c:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800606e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006070:	3301      	adds	r3, #1
 8006072:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006074:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006076:	3b01      	subs	r3, #1
 8006078:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800607a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800607c:	3b01      	subs	r3, #1
 800607e:	b29b      	uxth	r3, r3
 8006080:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006082:	e7d3      	b.n	800602c <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006084:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006086:	2b04      	cmp	r3, #4
 8006088:	d001      	beq.n	800608e <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e78d      	b.n	8005faa <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800608e:	6822      	ldr	r2, [r4, #0]
 8006090:	6813      	ldr	r3, [r2, #0]
 8006092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006096:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e786      	b.n	8005faa <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800609c:	462a      	mov	r2, r5
 800609e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80060a0:	4620      	mov	r0, r4
 80060a2:	f7ff fe39 	bl	8005d18 <I2C_WaitOnBTFFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	b158      	cbz	r0, 80060c2 <HAL_I2C_Mem_Write+0x136>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	d001      	beq.n	80060b4 <HAL_I2C_Mem_Write+0x128>
      return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e77a      	b.n	8005faa <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b4:	6822      	ldr	r2, [r4, #0]
 80060b6:	6813      	ldr	r3, [r2, #0]
 80060b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060bc:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e773      	b.n	8005faa <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c2:	6821      	ldr	r1, [r4, #0]
 80060c4:	680a      	ldr	r2, [r1, #0]
 80060c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ca:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80060cc:	2220      	movs	r2, #32
 80060ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d2:	2200      	movs	r2, #0
 80060d4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80060d8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 80060dc:	e765      	b.n	8005faa <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 80060de:	2302      	movs	r3, #2
 80060e0:	e763      	b.n	8005faa <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 80060e2:	2302      	movs	r3, #2
 80060e4:	e761      	b.n	8005faa <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e75f      	b.n	8005faa <HAL_I2C_Mem_Write+0x1e>
 80060ea:	bf00      	nop
 80060ec:	00100002 	.word	0x00100002
 80060f0:	ffff0000 	.word	0xffff0000

080060f4 <HAL_I2C_Mem_Read>:
{
 80060f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f8:	b086      	sub	sp, #24
 80060fa:	4604      	mov	r4, r0
 80060fc:	460e      	mov	r6, r1
 80060fe:	4617      	mov	r7, r2
 8006100:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8006102:	f7fe febb 	bl	8004e7c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006106:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b20      	cmp	r3, #32
 800610e:	d004      	beq.n	800611a <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8006110:	2602      	movs	r6, #2
}
 8006112:	4630      	mov	r0, r6
 8006114:	b006      	add	sp, #24
 8006116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800611a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800611c:	9000      	str	r0, [sp, #0]
 800611e:	2319      	movs	r3, #25
 8006120:	2201      	movs	r2, #1
 8006122:	499e      	ldr	r1, [pc, #632]	; (800639c <HAL_I2C_Mem_Read+0x2a8>)
 8006124:	4620      	mov	r0, r4
 8006126:	f7ff fc24 	bl	8005972 <I2C_WaitOnFlagUntilTimeout>
 800612a:	2800      	cmp	r0, #0
 800612c:	f040 8134 	bne.w	8006398 <HAL_I2C_Mem_Read+0x2a4>
    __HAL_LOCK(hi2c);
 8006130:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006134:	2b01      	cmp	r3, #1
 8006136:	f000 8137 	beq.w	80063a8 <HAL_I2C_Mem_Read+0x2b4>
 800613a:	2301      	movs	r3, #1
 800613c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	f012 0f01 	tst.w	r2, #1
 8006148:	d103      	bne.n	8006152 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	f042 0201 	orr.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006152:	6822      	ldr	r2, [r4, #0]
 8006154:	6813      	ldr	r3, [r2, #0]
 8006156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800615a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800615c:	2322      	movs	r3, #34	; 0x22
 800615e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006162:	2340      	movs	r3, #64	; 0x40
 8006164:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006168:	2300      	movs	r3, #0
 800616a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800616c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800616e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006170:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8006174:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006176:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006178:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800617a:	4b89      	ldr	r3, [pc, #548]	; (80063a0 <HAL_I2C_Mem_Read+0x2ac>)
 800617c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800617e:	9501      	str	r5, [sp, #4]
 8006180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	4643      	mov	r3, r8
 8006186:	463a      	mov	r2, r7
 8006188:	4631      	mov	r1, r6
 800618a:	4620      	mov	r0, r4
 800618c:	f7ff fd14 	bl	8005bb8 <I2C_RequestMemoryRead>
 8006190:	4606      	mov	r6, r0
 8006192:	2800      	cmp	r0, #0
 8006194:	f040 810a 	bne.w	80063ac <HAL_I2C_Mem_Read+0x2b8>
    if (hi2c->XferSize == 0U)
 8006198:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800619a:	b95b      	cbnz	r3, 80061b4 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800619c:	9302      	str	r3, [sp, #8]
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	695a      	ldr	r2, [r3, #20]
 80061a2:	9202      	str	r2, [sp, #8]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	9202      	str	r2, [sp, #8]
 80061a8:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	e072      	b.n	800629a <HAL_I2C_Mem_Read+0x1a6>
    else if (hi2c->XferSize == 1U)
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d00a      	beq.n	80061ce <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d01a      	beq.n	80061f2 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061bc:	2300      	movs	r3, #0
 80061be:	9305      	str	r3, [sp, #20]
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	695a      	ldr	r2, [r3, #20]
 80061c4:	9205      	str	r2, [sp, #20]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	9305      	str	r3, [sp, #20]
 80061ca:	9b05      	ldr	r3, [sp, #20]
 80061cc:	e065      	b.n	800629a <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ce:	6822      	ldr	r2, [r4, #0]
 80061d0:	6813      	ldr	r3, [r2, #0]
 80061d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061d6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061d8:	2300      	movs	r3, #0
 80061da:	9303      	str	r3, [sp, #12]
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	695a      	ldr	r2, [r3, #20]
 80061e0:	9203      	str	r2, [sp, #12]
 80061e2:	699a      	ldr	r2, [r3, #24]
 80061e4:	9203      	str	r2, [sp, #12]
 80061e6:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	e053      	b.n	800629a <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061f2:	6822      	ldr	r2, [r4, #0]
 80061f4:	6813      	ldr	r3, [r2, #0]
 80061f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061fa:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061fc:	6822      	ldr	r2, [r4, #0]
 80061fe:	6813      	ldr	r3, [r2, #0]
 8006200:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006204:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006206:	2300      	movs	r3, #0
 8006208:	9304      	str	r3, [sp, #16]
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	695a      	ldr	r2, [r3, #20]
 800620e:	9204      	str	r2, [sp, #16]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	9304      	str	r3, [sp, #16]
 8006214:	9b04      	ldr	r3, [sp, #16]
 8006216:	e040      	b.n	800629a <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006218:	462a      	mov	r2, r5
 800621a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800621c:	4620      	mov	r0, r4
 800621e:	f7ff fda5 	bl	8005d6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006222:	2800      	cmp	r0, #0
 8006224:	f040 80c4 	bne.w	80063b0 <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800622e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006232:	3301      	adds	r3, #1
 8006234:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006236:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006238:	3b01      	subs	r3, #1
 800623a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800623c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800623e:	3b01      	subs	r3, #1
 8006240:	b29b      	uxth	r3, r3
 8006242:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006244:	e029      	b.n	800629a <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006246:	9500      	str	r5, [sp, #0]
 8006248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800624a:	2200      	movs	r2, #0
 800624c:	4955      	ldr	r1, [pc, #340]	; (80063a4 <HAL_I2C_Mem_Read+0x2b0>)
 800624e:	4620      	mov	r0, r4
 8006250:	f7ff fb8f 	bl	8005972 <I2C_WaitOnFlagUntilTimeout>
 8006254:	2800      	cmp	r0, #0
 8006256:	f040 80ad 	bne.w	80063b4 <HAL_I2C_Mem_Read+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800625a:	6822      	ldr	r2, [r4, #0]
 800625c:	6813      	ldr	r3, [r2, #0]
 800625e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006262:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800626a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800626c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800626e:	1c53      	adds	r3, r2, #1
 8006270:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006272:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006274:	3b01      	subs	r3, #1
 8006276:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006278:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800627a:	3b01      	subs	r3, #1
 800627c:	b29b      	uxth	r3, r3
 800627e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006288:	3301      	adds	r3, #1
 800628a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800628c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800628e:	3b01      	subs	r3, #1
 8006290:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006292:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006294:	3b01      	subs	r3, #1
 8006296:	b29b      	uxth	r3, r3
 8006298:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800629a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800629c:	2b00      	cmp	r3, #0
 800629e:	d072      	beq.n	8006386 <HAL_I2C_Mem_Read+0x292>
      if (hi2c->XferSize <= 3U)
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d849      	bhi.n	8006338 <HAL_I2C_Mem_Read+0x244>
        if (hi2c->XferSize == 1U)
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d0b7      	beq.n	8006218 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d0cc      	beq.n	8006246 <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062ac:	9500      	str	r5, [sp, #0]
 80062ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062b0:	2200      	movs	r2, #0
 80062b2:	493c      	ldr	r1, [pc, #240]	; (80063a4 <HAL_I2C_Mem_Read+0x2b0>)
 80062b4:	4620      	mov	r0, r4
 80062b6:	f7ff fb5c 	bl	8005972 <I2C_WaitOnFlagUntilTimeout>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d17c      	bne.n	80063b8 <HAL_I2C_Mem_Read+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062be:	6822      	ldr	r2, [r4, #0]
 80062c0:	6813      	ldr	r3, [r2, #0]
 80062c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062c6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062ce:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80062d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062d2:	3301      	adds	r3, #1
 80062d4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80062d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80062d8:	3b01      	subs	r3, #1
 80062da:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80062dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062e4:	9500      	str	r5, [sp, #0]
 80062e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062e8:	2200      	movs	r2, #0
 80062ea:	492e      	ldr	r1, [pc, #184]	; (80063a4 <HAL_I2C_Mem_Read+0x2b0>)
 80062ec:	4620      	mov	r0, r4
 80062ee:	f7ff fb40 	bl	8005972 <I2C_WaitOnFlagUntilTimeout>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d162      	bne.n	80063bc <HAL_I2C_Mem_Read+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f6:	6822      	ldr	r2, [r4, #0]
 80062f8:	6813      	ldr	r3, [r2, #0]
 80062fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062fe:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006306:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006308:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800630a:	1c53      	adds	r3, r2, #1
 800630c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800630e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006310:	3b01      	subs	r3, #1
 8006312:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006314:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006316:	3b01      	subs	r3, #1
 8006318:	b29b      	uxth	r3, r3
 800631a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006324:	3301      	adds	r3, #1
 8006326:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006328:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800632a:	3b01      	subs	r3, #1
 800632c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800632e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006330:	3b01      	subs	r3, #1
 8006332:	b29b      	uxth	r3, r3
 8006334:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006336:	e7b0      	b.n	800629a <HAL_I2C_Mem_Read+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006338:	462a      	mov	r2, r5
 800633a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800633c:	4620      	mov	r0, r4
 800633e:	f7ff fd15 	bl	8005d6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006342:	2800      	cmp	r0, #0
 8006344:	d13c      	bne.n	80063c0 <HAL_I2C_Mem_Read+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	691a      	ldr	r2, [r3, #16]
 800634a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800634c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800634e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006350:	1c53      	adds	r3, r2, #1
 8006352:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006354:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006356:	3b01      	subs	r3, #1
 8006358:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800635a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800635c:	3b01      	subs	r3, #1
 800635e:	b29b      	uxth	r3, r3
 8006360:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	6959      	ldr	r1, [r3, #20]
 8006366:	f011 0f04 	tst.w	r1, #4
 800636a:	d096      	beq.n	800629a <HAL_I2C_Mem_Read+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006372:	3301      	adds	r3, #1
 8006374:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006376:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006378:	3b01      	subs	r3, #1
 800637a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800637c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800637e:	3b01      	subs	r3, #1
 8006380:	b29b      	uxth	r3, r3
 8006382:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006384:	e789      	b.n	800629a <HAL_I2C_Mem_Read+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006386:	2320      	movs	r3, #32
 8006388:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800638c:	2300      	movs	r3, #0
 800638e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8006392:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8006396:	e6bc      	b.n	8006112 <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 8006398:	2602      	movs	r6, #2
 800639a:	e6ba      	b.n	8006112 <HAL_I2C_Mem_Read+0x1e>
 800639c:	00100002 	.word	0x00100002
 80063a0:	ffff0000 	.word	0xffff0000
 80063a4:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 80063a8:	2602      	movs	r6, #2
 80063aa:	e6b2      	b.n	8006112 <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 80063ac:	2601      	movs	r6, #1
 80063ae:	e6b0      	b.n	8006112 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80063b0:	2601      	movs	r6, #1
 80063b2:	e6ae      	b.n	8006112 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80063b4:	2601      	movs	r6, #1
 80063b6:	e6ac      	b.n	8006112 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80063b8:	2601      	movs	r6, #1
 80063ba:	e6aa      	b.n	8006112 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80063bc:	2601      	movs	r6, #1
 80063be:	e6a8      	b.n	8006112 <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 80063c0:	2601      	movs	r6, #1
 80063c2:	e6a6      	b.n	8006112 <HAL_I2C_Mem_Read+0x1e>

080063c4 <HAL_I2C_IsDeviceReady>:
{
 80063c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063c8:	b085      	sub	sp, #20
 80063ca:	4604      	mov	r4, r0
 80063cc:	4688      	mov	r8, r1
 80063ce:	4691      	mov	r9, r2
 80063d0:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80063d2:	f7fe fd53 	bl	8004e7c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80063d6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b20      	cmp	r3, #32
 80063de:	d004      	beq.n	80063ea <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 80063e0:	2302      	movs	r3, #2
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	b005      	add	sp, #20
 80063e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063ea:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063ec:	9000      	str	r0, [sp, #0]
 80063ee:	2319      	movs	r3, #25
 80063f0:	2201      	movs	r2, #1
 80063f2:	4959      	ldr	r1, [pc, #356]	; (8006558 <HAL_I2C_IsDeviceReady+0x194>)
 80063f4:	4620      	mov	r0, r4
 80063f6:	f7ff fabc 	bl	8005972 <I2C_WaitOnFlagUntilTimeout>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	f040 80a1 	bne.w	8006542 <HAL_I2C_IsDeviceReady+0x17e>
    __HAL_LOCK(hi2c);
 8006400:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006404:	2b01      	cmp	r3, #1
 8006406:	f000 809e 	beq.w	8006546 <HAL_I2C_IsDeviceReady+0x182>
 800640a:	2301      	movs	r3, #1
 800640c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	f012 0f01 	tst.w	r2, #1
 8006418:	d103      	bne.n	8006422 <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f042 0201 	orr.w	r2, r2, #1
 8006420:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006422:	6822      	ldr	r2, [r4, #0]
 8006424:	6813      	ldr	r3, [r2, #0]
 8006426:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800642a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800642c:	2324      	movs	r3, #36	; 0x24
 800642e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006432:	2300      	movs	r3, #0
 8006434:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006436:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800643a:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 800643c:	2701      	movs	r7, #1
 800643e:	e03e      	b.n	80064be <HAL_I2C_IsDeviceReady+0xfa>
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006448:	d07f      	beq.n	800654a <HAL_I2C_IsDeviceReady+0x186>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800644a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800644e:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e7c6      	b.n	80063e2 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006454:	23a0      	movs	r3, #160	; 0xa0
 8006456:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	695a      	ldr	r2, [r3, #20]
 800645e:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006462:	6959      	ldr	r1, [r3, #20]
 8006464:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006468:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2ba0      	cmp	r3, #160	; 0xa0
 8006470:	d009      	beq.n	8006486 <HAL_I2C_IsDeviceReady+0xc2>
 8006472:	b942      	cbnz	r2, 8006486 <HAL_I2C_IsDeviceReady+0xc2>
 8006474:	b939      	cbnz	r1, 8006486 <HAL_I2C_IsDeviceReady+0xc2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006476:	f7fe fd01 	bl	8004e7c <HAL_GetTick>
 800647a:	1b80      	subs	r0, r0, r6
 800647c:	42a8      	cmp	r0, r5
 800647e:	d8e9      	bhi.n	8006454 <HAL_I2C_IsDeviceReady+0x90>
 8006480:	2d00      	cmp	r5, #0
 8006482:	d1ea      	bne.n	800645a <HAL_I2C_IsDeviceReady+0x96>
 8006484:	e7e6      	b.n	8006454 <HAL_I2C_IsDeviceReady+0x90>
      hi2c->State = HAL_I2C_STATE_READY;
 8006486:	2320      	movs	r3, #32
 8006488:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	695a      	ldr	r2, [r3, #20]
 8006490:	f012 0f02 	tst.w	r2, #2
 8006494:	d131      	bne.n	80064fa <HAL_I2C_IsDeviceReady+0x136>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800649c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064a4:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064a6:	9600      	str	r6, [sp, #0]
 80064a8:	2319      	movs	r3, #25
 80064aa:	2201      	movs	r2, #1
 80064ac:	492a      	ldr	r1, [pc, #168]	; (8006558 <HAL_I2C_IsDeviceReady+0x194>)
 80064ae:	4620      	mov	r0, r4
 80064b0:	f7ff fa5f 	bl	8005972 <I2C_WaitOnFlagUntilTimeout>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d14c      	bne.n	8006552 <HAL_I2C_IsDeviceReady+0x18e>
      I2C_Trials++;
 80064b8:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80064ba:	454f      	cmp	r7, r9
 80064bc:	d239      	bcs.n	8006532 <HAL_I2C_IsDeviceReady+0x16e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064be:	6822      	ldr	r2, [r4, #0]
 80064c0:	6813      	ldr	r3, [r2, #0]
 80064c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c6:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80064c8:	9600      	str	r6, [sp, #0]
 80064ca:	462b      	mov	r3, r5
 80064cc:	2200      	movs	r2, #0
 80064ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064d2:	4620      	mov	r0, r4
 80064d4:	f7ff fa4d 	bl	8005972 <I2C_WaitOnFlagUntilTimeout>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d1b1      	bne.n	8006440 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 80064e2:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80064e4:	f7fe fcca 	bl	8004e7c <HAL_GetTick>
 80064e8:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	695a      	ldr	r2, [r3, #20]
 80064ee:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80064f2:	6959      	ldr	r1, [r3, #20]
 80064f4:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80064f8:	e7b6      	b.n	8006468 <HAL_I2C_IsDeviceReady+0xa4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006500:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006502:	2300      	movs	r3, #0
 8006504:	9303      	str	r3, [sp, #12]
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	695a      	ldr	r2, [r3, #20]
 800650a:	9203      	str	r2, [sp, #12]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	9303      	str	r3, [sp, #12]
 8006510:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006512:	9600      	str	r6, [sp, #0]
 8006514:	2319      	movs	r3, #25
 8006516:	2201      	movs	r2, #1
 8006518:	490f      	ldr	r1, [pc, #60]	; (8006558 <HAL_I2C_IsDeviceReady+0x194>)
 800651a:	4620      	mov	r0, r4
 800651c:	f7ff fa29 	bl	8005972 <I2C_WaitOnFlagUntilTimeout>
 8006520:	4603      	mov	r3, r0
 8006522:	b9a0      	cbnz	r0, 800654e <HAL_I2C_IsDeviceReady+0x18a>
        hi2c->State = HAL_I2C_STATE_READY;
 8006524:	2220      	movs	r2, #32
 8006526:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800652a:	2200      	movs	r2, #0
 800652c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8006530:	e757      	b.n	80063e2 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006532:	2320      	movs	r3, #32
 8006534:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8006538:	2300      	movs	r3, #0
 800653a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e74f      	b.n	80063e2 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8006542:	2302      	movs	r3, #2
 8006544:	e74d      	b.n	80063e2 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8006546:	2302      	movs	r3, #2
 8006548:	e74b      	b.n	80063e2 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e749      	b.n	80063e2 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e747      	b.n	80063e2 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e745      	b.n	80063e2 <HAL_I2C_IsDeviceReady+0x1e>
 8006556:	bf00      	nop
 8006558:	00100002 	.word	0x00100002

0800655c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800655c:	2800      	cmp	r0, #0
 800655e:	f000 81e0 	beq.w	8006922 <HAL_RCC_OscConfig+0x3c6>
{
 8006562:	b570      	push	{r4, r5, r6, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006568:	6803      	ldr	r3, [r0, #0]
 800656a:	f013 0f01 	tst.w	r3, #1
 800656e:	d03b      	beq.n	80065e8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006570:	4ba5      	ldr	r3, [pc, #660]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 030c 	and.w	r3, r3, #12
 8006578:	2b04      	cmp	r3, #4
 800657a:	d02c      	beq.n	80065d6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800657c:	4ba2      	ldr	r3, [pc, #648]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006584:	2b08      	cmp	r3, #8
 8006586:	d021      	beq.n	80065cc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006588:	6863      	ldr	r3, [r4, #4]
 800658a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800658e:	d04f      	beq.n	8006630 <HAL_RCC_OscConfig+0xd4>
 8006590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006594:	d052      	beq.n	800663c <HAL_RCC_OscConfig+0xe0>
 8006596:	4b9c      	ldr	r3, [pc, #624]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065a8:	6863      	ldr	r3, [r4, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d050      	beq.n	8006650 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ae:	f7fe fc65 	bl	8004e7c <HAL_GetTick>
 80065b2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065b4:	4b94      	ldr	r3, [pc, #592]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80065bc:	d114      	bne.n	80065e8 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065be:	f7fe fc5d 	bl	8004e7c <HAL_GetTick>
 80065c2:	1b40      	subs	r0, r0, r5
 80065c4:	2864      	cmp	r0, #100	; 0x64
 80065c6:	d9f5      	bls.n	80065b4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80065c8:	2003      	movs	r0, #3
 80065ca:	e1af      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065cc:	4b8e      	ldr	r3, [pc, #568]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80065d4:	d0d8      	beq.n	8006588 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d6:	4b8c      	ldr	r3, [pc, #560]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80065de:	d003      	beq.n	80065e8 <HAL_RCC_OscConfig+0x8c>
 80065e0:	6863      	ldr	r3, [r4, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 819f 	beq.w	8006926 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	f013 0f02 	tst.w	r3, #2
 80065ee:	d055      	beq.n	800669c <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065f0:	4b85      	ldr	r3, [pc, #532]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f013 0f0c 	tst.w	r3, #12
 80065f8:	d03e      	beq.n	8006678 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065fa:	4b83      	ldr	r3, [pc, #524]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006602:	2b08      	cmp	r3, #8
 8006604:	d033      	beq.n	800666e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006606:	68e3      	ldr	r3, [r4, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d068      	beq.n	80066de <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800660c:	4b7f      	ldr	r3, [pc, #508]	; (800680c <HAL_RCC_OscConfig+0x2b0>)
 800660e:	2201      	movs	r2, #1
 8006610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006612:	f7fe fc33 	bl	8004e7c <HAL_GetTick>
 8006616:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006618:	4b7b      	ldr	r3, [pc, #492]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f013 0f02 	tst.w	r3, #2
 8006620:	d154      	bne.n	80066cc <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006622:	f7fe fc2b 	bl	8004e7c <HAL_GetTick>
 8006626:	1b40      	subs	r0, r0, r5
 8006628:	2802      	cmp	r0, #2
 800662a:	d9f5      	bls.n	8006618 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800662c:	2003      	movs	r0, #3
 800662e:	e17d      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006630:	4a75      	ldr	r2, [pc, #468]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 8006632:	6813      	ldr	r3, [r2, #0]
 8006634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	e7b5      	b.n	80065a8 <HAL_RCC_OscConfig+0x4c>
 800663c:	4b72      	ldr	r3, [pc, #456]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	e7ab      	b.n	80065a8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8006650:	f7fe fc14 	bl	8004e7c <HAL_GetTick>
 8006654:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006656:	4b6c      	ldr	r3, [pc, #432]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800665e:	d0c3      	beq.n	80065e8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006660:	f7fe fc0c 	bl	8004e7c <HAL_GetTick>
 8006664:	1b40      	subs	r0, r0, r5
 8006666:	2864      	cmp	r0, #100	; 0x64
 8006668:	d9f5      	bls.n	8006656 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800666a:	2003      	movs	r0, #3
 800666c:	e15e      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800666e:	4b66      	ldr	r3, [pc, #408]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006676:	d1c6      	bne.n	8006606 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006678:	4b63      	ldr	r3, [pc, #396]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f013 0f02 	tst.w	r3, #2
 8006680:	d004      	beq.n	800668c <HAL_RCC_OscConfig+0x130>
 8006682:	68e3      	ldr	r3, [r4, #12]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d001      	beq.n	800668c <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8006688:	2001      	movs	r0, #1
 800668a:	e14f      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800668c:	4a5e      	ldr	r2, [pc, #376]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 800668e:	6813      	ldr	r3, [r2, #0]
 8006690:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006694:	6921      	ldr	r1, [r4, #16]
 8006696:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800669a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	f013 0f08 	tst.w	r3, #8
 80066a2:	d040      	beq.n	8006726 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066a4:	6963      	ldr	r3, [r4, #20]
 80066a6:	b363      	cbz	r3, 8006702 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066a8:	4b59      	ldr	r3, [pc, #356]	; (8006810 <HAL_RCC_OscConfig+0x2b4>)
 80066aa:	2201      	movs	r2, #1
 80066ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ae:	f7fe fbe5 	bl	8004e7c <HAL_GetTick>
 80066b2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066b4:	4b54      	ldr	r3, [pc, #336]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 80066b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b8:	f013 0f02 	tst.w	r3, #2
 80066bc:	d133      	bne.n	8006726 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066be:	f7fe fbdd 	bl	8004e7c <HAL_GetTick>
 80066c2:	1b40      	subs	r0, r0, r5
 80066c4:	2802      	cmp	r0, #2
 80066c6:	d9f5      	bls.n	80066b4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80066c8:	2003      	movs	r0, #3
 80066ca:	e12f      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066cc:	4a4e      	ldr	r2, [pc, #312]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 80066ce:	6813      	ldr	r3, [r2, #0]
 80066d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80066d4:	6921      	ldr	r1, [r4, #16]
 80066d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	e7de      	b.n	800669c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80066de:	4b4b      	ldr	r3, [pc, #300]	; (800680c <HAL_RCC_OscConfig+0x2b0>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80066e4:	f7fe fbca 	bl	8004e7c <HAL_GetTick>
 80066e8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ea:	4b47      	ldr	r3, [pc, #284]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f013 0f02 	tst.w	r3, #2
 80066f2:	d0d3      	beq.n	800669c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066f4:	f7fe fbc2 	bl	8004e7c <HAL_GetTick>
 80066f8:	1b40      	subs	r0, r0, r5
 80066fa:	2802      	cmp	r0, #2
 80066fc:	d9f5      	bls.n	80066ea <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80066fe:	2003      	movs	r0, #3
 8006700:	e114      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006702:	4b43      	ldr	r3, [pc, #268]	; (8006810 <HAL_RCC_OscConfig+0x2b4>)
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006708:	f7fe fbb8 	bl	8004e7c <HAL_GetTick>
 800670c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800670e:	4b3e      	ldr	r3, [pc, #248]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 8006710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006712:	f013 0f02 	tst.w	r3, #2
 8006716:	d006      	beq.n	8006726 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006718:	f7fe fbb0 	bl	8004e7c <HAL_GetTick>
 800671c:	1b40      	subs	r0, r0, r5
 800671e:	2802      	cmp	r0, #2
 8006720:	d9f5      	bls.n	800670e <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8006722:	2003      	movs	r0, #3
 8006724:	e102      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	f013 0f04 	tst.w	r3, #4
 800672c:	d075      	beq.n	800681a <HAL_RCC_OscConfig+0x2be>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800672e:	4b36      	ldr	r3, [pc, #216]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006736:	d131      	bne.n	800679c <HAL_RCC_OscConfig+0x240>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006738:	2300      	movs	r3, #0
 800673a:	9301      	str	r3, [sp, #4]
 800673c:	4b32      	ldr	r3, [pc, #200]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 800673e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006740:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006744:	641a      	str	r2, [r3, #64]	; 0x40
 8006746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800674c:	9301      	str	r3, [sp, #4]
 800674e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006750:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006752:	4b30      	ldr	r3, [pc, #192]	; (8006814 <HAL_RCC_OscConfig+0x2b8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f413 7f80 	tst.w	r3, #256	; 0x100
 800675a:	d021      	beq.n	80067a0 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800675c:	68a3      	ldr	r3, [r4, #8]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d032      	beq.n	80067c8 <HAL_RCC_OscConfig+0x26c>
 8006762:	2b05      	cmp	r3, #5
 8006764:	d036      	beq.n	80067d4 <HAL_RCC_OscConfig+0x278>
 8006766:	4b28      	ldr	r3, [pc, #160]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 8006768:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800676a:	f022 0201 	bic.w	r2, r2, #1
 800676e:	671a      	str	r2, [r3, #112]	; 0x70
 8006770:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006772:	f022 0204 	bic.w	r2, r2, #4
 8006776:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006778:	68a3      	ldr	r3, [r4, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d034      	beq.n	80067e8 <HAL_RCC_OscConfig+0x28c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677e:	f7fe fb7d 	bl	8004e7c <HAL_GetTick>
 8006782:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006784:	4b20      	ldr	r3, [pc, #128]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 8006786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006788:	f013 0f02 	tst.w	r3, #2
 800678c:	d144      	bne.n	8006818 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800678e:	f7fe fb75 	bl	8004e7c <HAL_GetTick>
 8006792:	1b80      	subs	r0, r0, r6
 8006794:	2864      	cmp	r0, #100	; 0x64
 8006796:	d9f5      	bls.n	8006784 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8006798:	2003      	movs	r0, #3
 800679a:	e0c7      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 800679c:	2500      	movs	r5, #0
 800679e:	e7d8      	b.n	8006752 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067a0:	4a1c      	ldr	r2, [pc, #112]	; (8006814 <HAL_RCC_OscConfig+0x2b8>)
 80067a2:	6813      	ldr	r3, [r2, #0]
 80067a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80067aa:	f7fe fb67 	bl	8004e7c <HAL_GetTick>
 80067ae:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b0:	4b18      	ldr	r3, [pc, #96]	; (8006814 <HAL_RCC_OscConfig+0x2b8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80067b8:	d1d0      	bne.n	800675c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067ba:	f7fe fb5f 	bl	8004e7c <HAL_GetTick>
 80067be:	1b80      	subs	r0, r0, r6
 80067c0:	2802      	cmp	r0, #2
 80067c2:	d9f5      	bls.n	80067b0 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 80067c4:	2003      	movs	r0, #3
 80067c6:	e0b1      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067c8:	4a0f      	ldr	r2, [pc, #60]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 80067ca:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80067cc:	f043 0301 	orr.w	r3, r3, #1
 80067d0:	6713      	str	r3, [r2, #112]	; 0x70
 80067d2:	e7d1      	b.n	8006778 <HAL_RCC_OscConfig+0x21c>
 80067d4:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 80067d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067d8:	f042 0204 	orr.w	r2, r2, #4
 80067dc:	671a      	str	r2, [r3, #112]	; 0x70
 80067de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067e0:	f042 0201 	orr.w	r2, r2, #1
 80067e4:	671a      	str	r2, [r3, #112]	; 0x70
 80067e6:	e7c7      	b.n	8006778 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067e8:	f7fe fb48 	bl	8004e7c <HAL_GetTick>
 80067ec:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067ee:	4b06      	ldr	r3, [pc, #24]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 80067f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f2:	f013 0f02 	tst.w	r3, #2
 80067f6:	d00f      	beq.n	8006818 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067f8:	f7fe fb40 	bl	8004e7c <HAL_GetTick>
 80067fc:	1b80      	subs	r0, r0, r6
 80067fe:	2864      	cmp	r0, #100	; 0x64
 8006800:	d9f5      	bls.n	80067ee <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006802:	2003      	movs	r0, #3
 8006804:	e092      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
 8006806:	bf00      	nop
 8006808:	40023800 	.word	0x40023800
 800680c:	42470000 	.word	0x42470000
 8006810:	42470e80 	.word	0x42470e80
 8006814:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006818:	b9ed      	cbnz	r5, 8006856 <HAL_RCC_OscConfig+0x2fa>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800681a:	69a3      	ldr	r3, [r4, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 8084 	beq.w	800692a <HAL_RCC_OscConfig+0x3ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006822:	4a45      	ldr	r2, [pc, #276]	; (8006938 <HAL_RCC_OscConfig+0x3dc>)
 8006824:	6892      	ldr	r2, [r2, #8]
 8006826:	f002 020c 	and.w	r2, r2, #12
 800682a:	2a08      	cmp	r2, #8
 800682c:	d051      	beq.n	80068d2 <HAL_RCC_OscConfig+0x376>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800682e:	2b02      	cmp	r3, #2
 8006830:	d017      	beq.n	8006862 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006832:	4b42      	ldr	r3, [pc, #264]	; (800693c <HAL_RCC_OscConfig+0x3e0>)
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006838:	f7fe fb20 	bl	8004e7c <HAL_GetTick>
 800683c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800683e:	4b3e      	ldr	r3, [pc, #248]	; (8006938 <HAL_RCC_OscConfig+0x3dc>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006846:	d042      	beq.n	80068ce <HAL_RCC_OscConfig+0x372>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006848:	f7fe fb18 	bl	8004e7c <HAL_GetTick>
 800684c:	1b00      	subs	r0, r0, r4
 800684e:	2802      	cmp	r0, #2
 8006850:	d9f5      	bls.n	800683e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006852:	2003      	movs	r0, #3
 8006854:	e06a      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006856:	4a38      	ldr	r2, [pc, #224]	; (8006938 <HAL_RCC_OscConfig+0x3dc>)
 8006858:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800685a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800685e:	6413      	str	r3, [r2, #64]	; 0x40
 8006860:	e7db      	b.n	800681a <HAL_RCC_OscConfig+0x2be>
        __HAL_RCC_PLL_DISABLE();
 8006862:	4b36      	ldr	r3, [pc, #216]	; (800693c <HAL_RCC_OscConfig+0x3e0>)
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006868:	f7fe fb08 	bl	8004e7c <HAL_GetTick>
 800686c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800686e:	4b32      	ldr	r3, [pc, #200]	; (8006938 <HAL_RCC_OscConfig+0x3dc>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006876:	d006      	beq.n	8006886 <HAL_RCC_OscConfig+0x32a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006878:	f7fe fb00 	bl	8004e7c <HAL_GetTick>
 800687c:	1b40      	subs	r0, r0, r5
 800687e:	2802      	cmp	r0, #2
 8006880:	d9f5      	bls.n	800686e <HAL_RCC_OscConfig+0x312>
            return HAL_TIMEOUT;
 8006882:	2003      	movs	r0, #3
 8006884:	e052      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006886:	69e3      	ldr	r3, [r4, #28]
 8006888:	6a22      	ldr	r2, [r4, #32]
 800688a:	4313      	orrs	r3, r2
 800688c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800688e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006892:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006894:	0852      	lsrs	r2, r2, #1
 8006896:	3a01      	subs	r2, #1
 8006898:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800689c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800689e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80068a2:	4a25      	ldr	r2, [pc, #148]	; (8006938 <HAL_RCC_OscConfig+0x3dc>)
 80068a4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80068a6:	4b25      	ldr	r3, [pc, #148]	; (800693c <HAL_RCC_OscConfig+0x3e0>)
 80068a8:	2201      	movs	r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80068ac:	f7fe fae6 	bl	8004e7c <HAL_GetTick>
 80068b0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068b2:	4b21      	ldr	r3, [pc, #132]	; (8006938 <HAL_RCC_OscConfig+0x3dc>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80068ba:	d106      	bne.n	80068ca <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068bc:	f7fe fade 	bl	8004e7c <HAL_GetTick>
 80068c0:	1b00      	subs	r0, r0, r4
 80068c2:	2802      	cmp	r0, #2
 80068c4:	d9f5      	bls.n	80068b2 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 80068c6:	2003      	movs	r0, #3
 80068c8:	e030      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80068ca:	2000      	movs	r0, #0
 80068cc:	e02e      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
 80068ce:	2000      	movs	r0, #0
 80068d0:	e02c      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d02c      	beq.n	8006930 <HAL_RCC_OscConfig+0x3d4>
        pll_config = RCC->PLLCFGR;
 80068d6:	4b18      	ldr	r3, [pc, #96]	; (8006938 <HAL_RCC_OscConfig+0x3dc>)
 80068d8:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068da:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80068de:	69e2      	ldr	r2, [r4, #28]
 80068e0:	4291      	cmp	r1, r2
 80068e2:	d001      	beq.n	80068e8 <HAL_RCC_OscConfig+0x38c>
          return HAL_ERROR;
 80068e4:	2001      	movs	r0, #1
 80068e6:	e021      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068ec:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ee:	428a      	cmp	r2, r1
 80068f0:	d001      	beq.n	80068f6 <HAL_RCC_OscConfig+0x39a>
          return HAL_ERROR;
 80068f2:	2001      	movs	r0, #1
 80068f4:	e01a      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80068f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068f8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80068fc:	401a      	ands	r2, r3
 80068fe:	428a      	cmp	r2, r1
 8006900:	d001      	beq.n	8006906 <HAL_RCC_OscConfig+0x3aa>
          return HAL_ERROR;
 8006902:	2001      	movs	r0, #1
 8006904:	e012      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006906:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800690a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800690c:	428a      	cmp	r2, r1
 800690e:	d001      	beq.n	8006914 <HAL_RCC_OscConfig+0x3b8>
          return HAL_ERROR;
 8006910:	2001      	movs	r0, #1
 8006912:	e00b      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006914:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006918:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800691a:	4293      	cmp	r3, r2
 800691c:	d00a      	beq.n	8006934 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
 800691e:	2001      	movs	r0, #1
 8006920:	e004      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
    return HAL_ERROR;
 8006922:	2001      	movs	r0, #1
}
 8006924:	4770      	bx	lr
        return HAL_ERROR;
 8006926:	2001      	movs	r0, #1
 8006928:	e000      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 800692a:	2000      	movs	r0, #0
}
 800692c:	b002      	add	sp, #8
 800692e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006930:	2001      	movs	r0, #1
 8006932:	e7fb      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8006934:	2000      	movs	r0, #0
 8006936:	e7f9      	b.n	800692c <HAL_RCC_OscConfig+0x3d0>
 8006938:	40023800 	.word	0x40023800
 800693c:	42470060 	.word	0x42470060

08006940 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006940:	4b01      	ldr	r3, [pc, #4]	; (8006948 <HAL_RCC_EnableCSS+0x8>)
 8006942:	2201      	movs	r2, #1
 8006944:	601a      	str	r2, [r3, #0]
}
 8006946:	4770      	bx	lr
 8006948:	4247004c 	.word	0x4247004c

0800694c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800694c:	4b26      	ldr	r3, [pc, #152]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f003 030c 	and.w	r3, r3, #12
 8006954:	2b04      	cmp	r3, #4
 8006956:	d044      	beq.n	80069e2 <HAL_RCC_GetSysClockFreq+0x96>
 8006958:	2b08      	cmp	r3, #8
 800695a:	d001      	beq.n	8006960 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800695c:	4823      	ldr	r0, [pc, #140]	; (80069ec <HAL_RCC_GetSysClockFreq+0xa0>)
 800695e:	4770      	bx	lr
{
 8006960:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006964:	4b20      	ldr	r3, [pc, #128]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006972:	d013      	beq.n	800699c <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006974:	4b1c      	ldr	r3, [pc, #112]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006976:	6859      	ldr	r1, [r3, #4]
 8006978:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800697c:	2300      	movs	r3, #0
 800697e:	481c      	ldr	r0, [pc, #112]	; (80069f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006980:	fba1 0100 	umull	r0, r1, r1, r0
 8006984:	f7fa f8c2 	bl	8000b0c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006988:	4b17      	ldr	r3, [pc, #92]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006990:	3301      	adds	r3, #1
 8006992:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8006994:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006998:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699c:	4b12      	ldr	r3, [pc, #72]	; (80069e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80069a4:	461e      	mov	r6, r3
 80069a6:	2700      	movs	r7, #0
 80069a8:	015c      	lsls	r4, r3, #5
 80069aa:	2500      	movs	r5, #0
 80069ac:	1ae4      	subs	r4, r4, r3
 80069ae:	eb65 0507 	sbc.w	r5, r5, r7
 80069b2:	01a9      	lsls	r1, r5, #6
 80069b4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80069b8:	01a0      	lsls	r0, r4, #6
 80069ba:	1b00      	subs	r0, r0, r4
 80069bc:	eb61 0105 	sbc.w	r1, r1, r5
 80069c0:	00cb      	lsls	r3, r1, #3
 80069c2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80069c6:	00c4      	lsls	r4, r0, #3
 80069c8:	19a0      	adds	r0, r4, r6
 80069ca:	eb43 0107 	adc.w	r1, r3, r7
 80069ce:	028b      	lsls	r3, r1, #10
 80069d0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80069d4:	0284      	lsls	r4, r0, #10
 80069d6:	4620      	mov	r0, r4
 80069d8:	4619      	mov	r1, r3
 80069da:	2300      	movs	r3, #0
 80069dc:	f7fa f896 	bl	8000b0c <__aeabi_uldivmod>
 80069e0:	e7d2      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 80069e2:	4803      	ldr	r0, [pc, #12]	; (80069f0 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40023800 	.word	0x40023800
 80069ec:	00f42400 	.word	0x00f42400
 80069f0:	017d7840 	.word	0x017d7840

080069f4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80069f4:	2800      	cmp	r0, #0
 80069f6:	f000 809e 	beq.w	8006b36 <HAL_RCC_ClockConfig+0x142>
{
 80069fa:	b570      	push	{r4, r5, r6, lr}
 80069fc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069fe:	4b50      	ldr	r3, [pc, #320]	; (8006b40 <HAL_RCC_ClockConfig+0x14c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	428b      	cmp	r3, r1
 8006a08:	d209      	bcs.n	8006a1e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a0a:	b2cb      	uxtb	r3, r1
 8006a0c:	4a4c      	ldr	r2, [pc, #304]	; (8006b40 <HAL_RCC_ClockConfig+0x14c>)
 8006a0e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a10:	6813      	ldr	r3, [r2, #0]
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	428b      	cmp	r3, r1
 8006a18:	d001      	beq.n	8006a1e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8006a1a:	2001      	movs	r0, #1
}
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	f013 0f02 	tst.w	r3, #2
 8006a24:	d017      	beq.n	8006a56 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a26:	f013 0f04 	tst.w	r3, #4
 8006a2a:	d004      	beq.n	8006a36 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a2c:	4a45      	ldr	r2, [pc, #276]	; (8006b44 <HAL_RCC_ClockConfig+0x150>)
 8006a2e:	6893      	ldr	r3, [r2, #8]
 8006a30:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a34:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	f013 0f08 	tst.w	r3, #8
 8006a3c:	d004      	beq.n	8006a48 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a3e:	4a41      	ldr	r2, [pc, #260]	; (8006b44 <HAL_RCC_ClockConfig+0x150>)
 8006a40:	6893      	ldr	r3, [r2, #8]
 8006a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a46:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a48:	4a3e      	ldr	r2, [pc, #248]	; (8006b44 <HAL_RCC_ClockConfig+0x150>)
 8006a4a:	6893      	ldr	r3, [r2, #8]
 8006a4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a50:	68a0      	ldr	r0, [r4, #8]
 8006a52:	4303      	orrs	r3, r0
 8006a54:	6093      	str	r3, [r2, #8]
 8006a56:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	f013 0f01 	tst.w	r3, #1
 8006a5e:	d032      	beq.n	8006ac6 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a60:	6863      	ldr	r3, [r4, #4]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d021      	beq.n	8006aaa <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a66:	1e9a      	subs	r2, r3, #2
 8006a68:	2a01      	cmp	r2, #1
 8006a6a:	d925      	bls.n	8006ab8 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6c:	4a35      	ldr	r2, [pc, #212]	; (8006b44 <HAL_RCC_ClockConfig+0x150>)
 8006a6e:	6812      	ldr	r2, [r2, #0]
 8006a70:	f012 0f02 	tst.w	r2, #2
 8006a74:	d061      	beq.n	8006b3a <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a76:	4933      	ldr	r1, [pc, #204]	; (8006b44 <HAL_RCC_ClockConfig+0x150>)
 8006a78:	688a      	ldr	r2, [r1, #8]
 8006a7a:	f022 0203 	bic.w	r2, r2, #3
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006a82:	f7fe f9fb 	bl	8004e7c <HAL_GetTick>
 8006a86:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a88:	4b2e      	ldr	r3, [pc, #184]	; (8006b44 <HAL_RCC_ClockConfig+0x150>)
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f003 030c 	and.w	r3, r3, #12
 8006a90:	6862      	ldr	r2, [r4, #4]
 8006a92:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006a96:	d016      	beq.n	8006ac6 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a98:	f7fe f9f0 	bl	8004e7c <HAL_GetTick>
 8006a9c:	1b80      	subs	r0, r0, r6
 8006a9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006aa2:	4298      	cmp	r0, r3
 8006aa4:	d9f0      	bls.n	8006a88 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8006aa6:	2003      	movs	r0, #3
 8006aa8:	e7b8      	b.n	8006a1c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aaa:	4a26      	ldr	r2, [pc, #152]	; (8006b44 <HAL_RCC_ClockConfig+0x150>)
 8006aac:	6812      	ldr	r2, [r2, #0]
 8006aae:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006ab2:	d1e0      	bne.n	8006a76 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8006ab4:	2001      	movs	r0, #1
 8006ab6:	e7b1      	b.n	8006a1c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ab8:	4a22      	ldr	r2, [pc, #136]	; (8006b44 <HAL_RCC_ClockConfig+0x150>)
 8006aba:	6812      	ldr	r2, [r2, #0]
 8006abc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006ac0:	d1d9      	bne.n	8006a76 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8006ac2:	2001      	movs	r0, #1
 8006ac4:	e7aa      	b.n	8006a1c <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ac6:	4b1e      	ldr	r3, [pc, #120]	; (8006b40 <HAL_RCC_ClockConfig+0x14c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	42ab      	cmp	r3, r5
 8006ad0:	d909      	bls.n	8006ae6 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ad2:	b2ea      	uxtb	r2, r5
 8006ad4:	4b1a      	ldr	r3, [pc, #104]	; (8006b40 <HAL_RCC_ClockConfig+0x14c>)
 8006ad6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	42ab      	cmp	r3, r5
 8006ae0:	d001      	beq.n	8006ae6 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	e79a      	b.n	8006a1c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	f013 0f04 	tst.w	r3, #4
 8006aec:	d006      	beq.n	8006afc <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006aee:	4a15      	ldr	r2, [pc, #84]	; (8006b44 <HAL_RCC_ClockConfig+0x150>)
 8006af0:	6893      	ldr	r3, [r2, #8]
 8006af2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006af6:	68e1      	ldr	r1, [r4, #12]
 8006af8:	430b      	orrs	r3, r1
 8006afa:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	f013 0f08 	tst.w	r3, #8
 8006b02:	d007      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b04:	4a0f      	ldr	r2, [pc, #60]	; (8006b44 <HAL_RCC_ClockConfig+0x150>)
 8006b06:	6893      	ldr	r3, [r2, #8]
 8006b08:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006b0c:	6921      	ldr	r1, [r4, #16]
 8006b0e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006b12:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b14:	f7ff ff1a 	bl	800694c <HAL_RCC_GetSysClockFreq>
 8006b18:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <HAL_RCC_ClockConfig+0x150>)
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006b20:	4a09      	ldr	r2, [pc, #36]	; (8006b48 <HAL_RCC_ClockConfig+0x154>)
 8006b22:	5cd3      	ldrb	r3, [r2, r3]
 8006b24:	40d8      	lsrs	r0, r3
 8006b26:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <HAL_RCC_ClockConfig+0x158>)
 8006b28:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8006b2a:	4b09      	ldr	r3, [pc, #36]	; (8006b50 <HAL_RCC_ClockConfig+0x15c>)
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	f7fd fd1d 	bl	800456c <HAL_InitTick>
  return HAL_OK;
 8006b32:	2000      	movs	r0, #0
 8006b34:	e772      	b.n	8006a1c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8006b36:	2001      	movs	r0, #1
}
 8006b38:	4770      	bx	lr
        return HAL_ERROR;
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	e76e      	b.n	8006a1c <HAL_RCC_ClockConfig+0x28>
 8006b3e:	bf00      	nop
 8006b40:	40023c00 	.word	0x40023c00
 8006b44:	40023800 	.word	0x40023800
 8006b48:	0800b938 	.word	0x0800b938
 8006b4c:	20000038 	.word	0x20000038
 8006b50:	20000040 	.word	0x20000040

08006b54 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8006b54:	4b01      	ldr	r3, [pc, #4]	; (8006b5c <HAL_RCC_GetHCLKFreq+0x8>)
 8006b56:	6818      	ldr	r0, [r3, #0]
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	20000038 	.word	0x20000038

08006b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b60:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b62:	f7ff fff7 	bl	8006b54 <HAL_RCC_GetHCLKFreq>
 8006b66:	4b04      	ldr	r3, [pc, #16]	; (8006b78 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006b6e:	4a03      	ldr	r2, [pc, #12]	; (8006b7c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006b70:	5cd3      	ldrb	r3, [r2, r3]
}
 8006b72:	40d8      	lsrs	r0, r3
 8006b74:	bd08      	pop	{r3, pc}
 8006b76:	bf00      	nop
 8006b78:	40023800 	.word	0x40023800
 8006b7c:	0800b948 	.word	0x0800b948

08006b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b80:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b82:	f7ff ffe7 	bl	8006b54 <HAL_RCC_GetHCLKFreq>
 8006b86:	4b04      	ldr	r3, [pc, #16]	; (8006b98 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006b8e:	4a03      	ldr	r2, [pc, #12]	; (8006b9c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006b90:	5cd3      	ldrb	r3, [r2, r3]
}
 8006b92:	40d8      	lsrs	r0, r3
 8006b94:	bd08      	pop	{r3, pc}
 8006b96:	bf00      	nop
 8006b98:	40023800 	.word	0x40023800
 8006b9c:	0800b948 	.word	0x0800b948

08006ba0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ba0:	230f      	movs	r3, #15
 8006ba2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ba4:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <HAL_RCC_GetClockConfig+0x34>)
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	f002 0203 	and.w	r2, r2, #3
 8006bac:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006bb4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8006bbc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	08db      	lsrs	r3, r3, #3
 8006bc2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006bc6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006bc8:	4b03      	ldr	r3, [pc, #12]	; (8006bd8 <HAL_RCC_GetClockConfig+0x38>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	600b      	str	r3, [r1, #0]
}
 8006bd2:	4770      	bx	lr
 8006bd4:	40023800 	.word	0x40023800
 8006bd8:	40023c00 	.word	0x40023c00

08006bdc <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006bdc:	4770      	bx	lr
	...

08006be0 <HAL_RCC_NMI_IRQHandler>:
{
 8006be0:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006be2:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <HAL_RCC_NMI_IRQHandler+0x1c>)
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006bea:	d100      	bne.n	8006bee <HAL_RCC_NMI_IRQHandler+0xe>
}
 8006bec:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8006bee:	f7ff fff5 	bl	8006bdc <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006bf2:	4b03      	ldr	r3, [pc, #12]	; (8006c00 <HAL_RCC_NMI_IRQHandler+0x20>)
 8006bf4:	2280      	movs	r2, #128	; 0x80
 8006bf6:	701a      	strb	r2, [r3, #0]
}
 8006bf8:	e7f8      	b.n	8006bec <HAL_RCC_NMI_IRQHandler+0xc>
 8006bfa:	bf00      	nop
 8006bfc:	40023800 	.word	0x40023800
 8006c00:	4002380e 	.word	0x4002380e

08006c04 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c04:	b530      	push	{r4, r5, lr}
 8006c06:	b083      	sub	sp, #12
 8006c08:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c0a:	6803      	ldr	r3, [r0, #0]
 8006c0c:	f013 0f05 	tst.w	r3, #5
 8006c10:	d10e      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	f013 0f02 	tst.w	r3, #2
 8006c18:	d136      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	f013 0f08 	tst.w	r3, #8
 8006c20:	f000 8097 	beq.w	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c24:	7c22      	ldrb	r2, [r4, #16]
 8006c26:	4b4c      	ldr	r3, [pc, #304]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006c28:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c2a:	2000      	movs	r0, #0
}
 8006c2c:	b003      	add	sp, #12
 8006c2e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8006c30:	4b4a      	ldr	r3, [pc, #296]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006c36:	f7fe f921 	bl	8004e7c <HAL_GetTick>
 8006c3a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c3c:	4b48      	ldr	r3, [pc, #288]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006c44:	d006      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c46:	f7fe f919 	bl	8004e7c <HAL_GetTick>
 8006c4a:	1b40      	subs	r0, r0, r5
 8006c4c:	2802      	cmp	r0, #2
 8006c4e:	d9f5      	bls.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8006c50:	2003      	movs	r0, #3
 8006c52:	e7eb      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006c54:	6862      	ldr	r2, [r4, #4]
 8006c56:	68a3      	ldr	r3, [r4, #8]
 8006c58:	071b      	lsls	r3, r3, #28
 8006c5a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006c5e:	4a40      	ldr	r2, [pc, #256]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006c60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8006c64:	4b3d      	ldr	r3, [pc, #244]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8006c66:	2201      	movs	r2, #1
 8006c68:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006c6a:	f7fe f907 	bl	8004e7c <HAL_GetTick>
 8006c6e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c70:	4b3b      	ldr	r3, [pc, #236]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006c78:	d1cb      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c7a:	f7fe f8ff 	bl	8004e7c <HAL_GetTick>
 8006c7e:	1b40      	subs	r0, r0, r5
 8006c80:	2802      	cmp	r0, #2
 8006c82:	d9f5      	bls.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        return HAL_TIMEOUT;
 8006c84:	2003      	movs	r0, #3
 8006c86:	e7d1      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c88:	2300      	movs	r3, #0
 8006c8a:	9301      	str	r3, [sp, #4]
 8006c8c:	4b34      	ldr	r3, [pc, #208]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006c94:	641a      	str	r2, [r3, #64]	; 0x40
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c9c:	9301      	str	r3, [sp, #4]
 8006c9e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8006ca0:	4a30      	ldr	r2, [pc, #192]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ca2:	6813      	ldr	r3, [r2, #0]
 8006ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ca8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006caa:	f7fe f8e7 	bl	8004e7c <HAL_GetTick>
 8006cae:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cb0:	4b2c      	ldr	r3, [pc, #176]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006cb8:	d106      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006cba:	f7fe f8df 	bl	8004e7c <HAL_GetTick>
 8006cbe:	1b40      	subs	r0, r0, r5
 8006cc0:	2802      	cmp	r0, #2
 8006cc2:	d9f5      	bls.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 8006cc4:	2003      	movs	r0, #3
 8006cc6:	e7b1      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006cc8:	4b25      	ldr	r3, [pc, #148]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ccc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006cd0:	d012      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006cd2:	68e2      	ldr	r2, [r4, #12]
 8006cd4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d00d      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cdc:	4b20      	ldr	r3, [pc, #128]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006cde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ce0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ce4:	4920      	ldr	r1, [pc, #128]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cea:	2000      	movs	r0, #0
 8006cec:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8006cee:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf2:	f013 0f01 	tst.w	r3, #1
 8006cf6:	d112      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cf8:	68e3      	ldr	r3, [r4, #12]
 8006cfa:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006cfe:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006d02:	d01b      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x138>
 8006d04:	4a16      	ldr	r2, [pc, #88]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006d06:	6893      	ldr	r3, [r2, #8]
 8006d08:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d0c:	6093      	str	r3, [r2, #8]
 8006d0e:	4914      	ldr	r1, [pc, #80]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006d10:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8006d12:	68e2      	ldr	r2, [r4, #12]
 8006d14:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	670b      	str	r3, [r1, #112]	; 0x70
 8006d1c:	e77d      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8006d1e:	f7fe f8ad 	bl	8004e7c <HAL_GetTick>
 8006d22:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d24:	4b0e      	ldr	r3, [pc, #56]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d28:	f013 0f02 	tst.w	r3, #2
 8006d2c:	d1e4      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d2e:	f7fe f8a5 	bl	8004e7c <HAL_GetTick>
 8006d32:	1b40      	subs	r0, r0, r5
 8006d34:	2864      	cmp	r0, #100	; 0x64
 8006d36:	d9f5      	bls.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
 8006d38:	2003      	movs	r0, #3
 8006d3a:	e777      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d3c:	4908      	ldr	r1, [pc, #32]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006d3e:	688a      	ldr	r2, [r1, #8]
 8006d40:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8006d44:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	608b      	str	r3, [r1, #8]
 8006d50:	e7dd      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  return HAL_OK;
 8006d52:	2000      	movs	r0, #0
 8006d54:	e76a      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006d56:	bf00      	nop
 8006d58:	424711e0 	.word	0x424711e0
 8006d5c:	42470068 	.word	0x42470068
 8006d60:	40023800 	.word	0x40023800
 8006d64:	40007000 	.word	0x40007000
 8006d68:	42470e40 	.word	0x42470e40

08006d6c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006d70:	6802      	ldr	r2, [r0, #0]
 8006d72:	68d3      	ldr	r3, [r2, #12]
 8006d74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d78:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d7a:	f7fe f87f 	bl	8004e7c <HAL_GetTick>
 8006d7e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f013 0f20 	tst.w	r3, #32
 8006d88:	d107      	bne.n	8006d9a <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006d8a:	f7fe f877 	bl	8004e7c <HAL_GetTick>
 8006d8e:	1b40      	subs	r0, r0, r5
 8006d90:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006d94:	d9f4      	bls.n	8006d80 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8006d96:	2003      	movs	r0, #3
 8006d98:	e000      	b.n	8006d9c <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8006d9a:	2000      	movs	r0, #0
}
 8006d9c:	bd38      	pop	{r3, r4, r5, pc}

08006d9e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006d9e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006da0:	6803      	ldr	r3, [r0, #0]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006da8:	d001      	beq.n	8006dae <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8006daa:	2000      	movs	r0, #0
}
 8006dac:	bd38      	pop	{r3, r4, r5, pc}
 8006dae:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006db0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006db4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8006db6:	f7fe f861 	bl	8004e7c <HAL_GetTick>
 8006dba:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006dc4:	d107      	bne.n	8006dd6 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006dc6:	f7fe f859 	bl	8004e7c <HAL_GetTick>
 8006dca:	1b40      	subs	r0, r0, r5
 8006dcc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006dd0:	d9f4      	bls.n	8006dbc <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8006dd2:	2003      	movs	r0, #3
 8006dd4:	e7ea      	b.n	8006dac <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	e7e8      	b.n	8006dac <RTC_EnterInitMode+0xe>

08006dda <HAL_RTC_Init>:
{
 8006dda:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d05c      	beq.n	8006e9a <HAL_RTC_Init+0xc0>
 8006de0:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006de2:	7f43      	ldrb	r3, [r0, #29]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d040      	beq.n	8006e6a <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006de8:	2302      	movs	r3, #2
 8006dea:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	22ca      	movs	r2, #202	; 0xca
 8006df0:	625a      	str	r2, [r3, #36]	; 0x24
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	2253      	movs	r2, #83	; 0x53
 8006df6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f7ff ffd0 	bl	8006d9e <RTC_EnterInitMode>
 8006dfe:	4605      	mov	r5, r0
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d136      	bne.n	8006e72 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006e04:	6822      	ldr	r2, [r4, #0]
 8006e06:	6893      	ldr	r3, [r2, #8]
 8006e08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e10:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006e12:	6821      	ldr	r1, [r4, #0]
 8006e14:	688a      	ldr	r2, [r1, #8]
 8006e16:	6863      	ldr	r3, [r4, #4]
 8006e18:	6920      	ldr	r0, [r4, #16]
 8006e1a:	4303      	orrs	r3, r0
 8006e1c:	6960      	ldr	r0, [r4, #20]
 8006e1e:	4303      	orrs	r3, r0
 8006e20:	4313      	orrs	r3, r2
 8006e22:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	68e2      	ldr	r2, [r4, #12]
 8006e28:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006e2a:	6822      	ldr	r2, [r4, #0]
 8006e2c:	6913      	ldr	r3, [r2, #16]
 8006e2e:	68a1      	ldr	r1, [r4, #8]
 8006e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006e34:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006e36:	6822      	ldr	r2, [r4, #0]
 8006e38:	68d3      	ldr	r3, [r2, #12]
 8006e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e3e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f013 0f20 	tst.w	r3, #32
 8006e48:	d01b      	beq.n	8006e82 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006e4a:	6822      	ldr	r2, [r4, #0]
 8006e4c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e52:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006e54:	6822      	ldr	r2, [r4, #0]
 8006e56:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006e58:	69a1      	ldr	r1, [r4, #24]
 8006e5a:	430b      	orrs	r3, r1
 8006e5c:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	22ff      	movs	r2, #255	; 0xff
 8006e62:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8006e64:	2301      	movs	r3, #1
 8006e66:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8006e68:	e009      	b.n	8006e7e <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 8006e6a:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8006e6c:	f7fd f954 	bl	8004118 <HAL_RTC_MspInit>
 8006e70:	e7ba      	b.n	8006de8 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	22ff      	movs	r2, #255	; 0xff
 8006e76:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e78:	2304      	movs	r3, #4
 8006e7a:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8006e7c:	2501      	movs	r5, #1
}
 8006e7e:	4628      	mov	r0, r5
 8006e80:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e82:	4620      	mov	r0, r4
 8006e84:	f7ff ff72 	bl	8006d6c <HAL_RTC_WaitForSynchro>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d0de      	beq.n	8006e4a <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	22ff      	movs	r2, #255	; 0xff
 8006e90:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e92:	2304      	movs	r3, #4
 8006e94:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8006e96:	2501      	movs	r5, #1
 8006e98:	e7f1      	b.n	8006e7e <HAL_RTC_Init+0xa4>
     return HAL_ERROR;
 8006e9a:	2501      	movs	r5, #1
 8006e9c:	e7ef      	b.n	8006e7e <HAL_RTC_Init+0xa4>

08006e9e <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006e9e:	0903      	lsrs	r3, r0, #4
 8006ea0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006ea4:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8006ea6:	f000 000f 	and.w	r0, r0, #15
 8006eaa:	4410      	add	r0, r2
}
 8006eac:	b2c0      	uxtb	r0, r0
 8006eae:	4770      	bx	lr

08006eb0 <HAL_RTC_GetTime>:
{
 8006eb0:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006eb2:	6803      	ldr	r3, [r0, #0]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006eb8:	6803      	ldr	r3, [r0, #0]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006ec0:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006ec2:	6803      	ldr	r3, [r0, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006eca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006ece:	0c1d      	lsrs	r5, r3, #16
 8006ed0:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8006ed4:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006ed6:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8006eda:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006edc:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8006ee0:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006ee2:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8006ee6:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8006ee8:	b95a      	cbnz	r2, 8006f02 <HAL_RTC_GetTime+0x52>
 8006eea:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006eec:	f7ff ffd7 	bl	8006e9e <RTC_Bcd2ToByte>
 8006ef0:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f7ff ffd3 	bl	8006e9e <RTC_Bcd2ToByte>
 8006ef8:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006efa:	4620      	mov	r0, r4
 8006efc:	f7ff ffcf 	bl	8006e9e <RTC_Bcd2ToByte>
 8006f00:	70a8      	strb	r0, [r5, #2]
}
 8006f02:	2000      	movs	r0, #0
 8006f04:	bd70      	pop	{r4, r5, r6, pc}

08006f06 <HAL_RTC_GetDate>:
{
 8006f06:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006f08:	6803      	ldr	r3, [r0, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006f14:	0c18      	lsrs	r0, r3, #16
 8006f16:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006f18:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8006f1c:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006f1e:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8006f22:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006f24:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006f28:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8006f2a:	b95a      	cbnz	r2, 8006f44 <HAL_RTC_GetDate+0x3e>
 8006f2c:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006f2e:	f7ff ffb6 	bl	8006e9e <RTC_Bcd2ToByte>
 8006f32:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006f34:	4630      	mov	r0, r6
 8006f36:	f7ff ffb2 	bl	8006e9e <RTC_Bcd2ToByte>
 8006f3a:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f7ff ffae 	bl	8006e9e <RTC_Bcd2ToByte>
 8006f42:	70a0      	strb	r0, [r4, #2]
}
 8006f44:	2000      	movs	r0, #0
 8006f46:	bd70      	pop	{r4, r5, r6, pc}

08006f48 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006f48:	6803      	ldr	r3, [r0, #0]
 8006f4a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006f4c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8006f50:	4770      	bx	lr

08006f52 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f54:	4605      	mov	r5, r0
 8006f56:	460f      	mov	r7, r1
 8006f58:	4616      	mov	r6, r2
 8006f5a:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	ea37 0303 	bics.w	r3, r7, r3
 8006f64:	bf0c      	ite	eq
 8006f66:	2301      	moveq	r3, #1
 8006f68:	2300      	movne	r3, #0
 8006f6a:	42b3      	cmp	r3, r6
 8006f6c:	d037      	beq.n	8006fde <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f6e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8006f72:	d0f3      	beq.n	8006f5c <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006f74:	f7fd ff82 	bl	8004e7c <HAL_GetTick>
 8006f78:	9b06      	ldr	r3, [sp, #24]
 8006f7a:	1ac0      	subs	r0, r0, r3
 8006f7c:	42a0      	cmp	r0, r4
 8006f7e:	d201      	bcs.n	8006f84 <SPI_WaitFlagStateUntilTimeout+0x32>
 8006f80:	2c00      	cmp	r4, #0
 8006f82:	d1eb      	bne.n	8006f5c <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f84:	682a      	ldr	r2, [r5, #0]
 8006f86:	6853      	ldr	r3, [r2, #4]
 8006f88:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006f8c:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f8e:	686b      	ldr	r3, [r5, #4]
 8006f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f94:	d00b      	beq.n	8006fae <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f96:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f9c:	d014      	beq.n	8006fc8 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8006faa:	2003      	movs	r0, #3
 8006fac:	e018      	b.n	8006fe0 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fae:	68ab      	ldr	r3, [r5, #8]
 8006fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb4:	d002      	beq.n	8006fbc <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fba:	d1ec      	bne.n	8006f96 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8006fbc:	682a      	ldr	r2, [r5, #0]
 8006fbe:	6813      	ldr	r3, [r2, #0]
 8006fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	e7e6      	b.n	8006f96 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8006fc8:	682a      	ldr	r2, [r5, #0]
 8006fca:	6813      	ldr	r3, [r2, #0]
 8006fcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	682a      	ldr	r2, [r5, #0]
 8006fd4:	6813      	ldr	r3, [r2, #0]
 8006fd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	e7df      	b.n	8006f9e <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8006fde:	2000      	movs	r0, #0
}
 8006fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fe4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fe4:	b530      	push	{r4, r5, lr}
 8006fe6:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006fe8:	4c16      	ldr	r4, [pc, #88]	; (8007044 <SPI_EndRxTxTransaction+0x60>)
 8006fea:	6824      	ldr	r4, [r4, #0]
 8006fec:	4d16      	ldr	r5, [pc, #88]	; (8007048 <SPI_EndRxTxTransaction+0x64>)
 8006fee:	fba5 3404 	umull	r3, r4, r5, r4
 8006ff2:	0d64      	lsrs	r4, r4, #21
 8006ff4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8006ff8:	fb05 f404 	mul.w	r4, r5, r4
 8006ffc:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ffe:	6844      	ldr	r4, [r0, #4]
 8007000:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8007004:	d00b      	beq.n	800701e <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007006:	9b03      	ldr	r3, [sp, #12]
 8007008:	b1c3      	cbz	r3, 800703c <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 800700a:	9b03      	ldr	r3, [sp, #12]
 800700c:	3b01      	subs	r3, #1
 800700e:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007010:	6803      	ldr	r3, [r0, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007018:	d1f5      	bne.n	8007006 <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	e00f      	b.n	800703e <SPI_EndRxTxTransaction+0x5a>
 800701e:	460b      	mov	r3, r1
 8007020:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007022:	9200      	str	r2, [sp, #0]
 8007024:	2200      	movs	r2, #0
 8007026:	2180      	movs	r1, #128	; 0x80
 8007028:	f7ff ff93 	bl	8006f52 <SPI_WaitFlagStateUntilTimeout>
 800702c:	4603      	mov	r3, r0
 800702e:	b130      	cbz	r0, 800703e <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007030:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007032:	f043 0320 	orr.w	r3, r3, #32
 8007036:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e000      	b.n	800703e <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	b005      	add	sp, #20
 8007042:	bd30      	pop	{r4, r5, pc}
 8007044:	20000038 	.word	0x20000038
 8007048:	165e9f81 	.word	0x165e9f81

0800704c <SPI_EndRxTransaction>:
{
 800704c:	b510      	push	{r4, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007052:	6840      	ldr	r0, [r0, #4]
 8007054:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8007058:	d016      	beq.n	8007088 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800705a:	6860      	ldr	r0, [r4, #4]
 800705c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8007060:	d12e      	bne.n	80070c0 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007062:	68a3      	ldr	r3, [r4, #8]
 8007064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007068:	d01b      	beq.n	80070a2 <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800706a:	9200      	str	r2, [sp, #0]
 800706c:	460b      	mov	r3, r1
 800706e:	2200      	movs	r2, #0
 8007070:	2180      	movs	r1, #128	; 0x80
 8007072:	4620      	mov	r0, r4
 8007074:	f7ff ff6d 	bl	8006f52 <SPI_WaitFlagStateUntilTimeout>
 8007078:	4603      	mov	r3, r0
 800707a:	b350      	cbz	r0, 80070d2 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800707c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800707e:	f043 0320 	orr.w	r3, r3, #32
 8007082:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e024      	b.n	80070d2 <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007088:	68a3      	ldr	r3, [r4, #8]
 800708a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800708e:	d002      	beq.n	8007096 <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007094:	d1e1      	bne.n	800705a <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 8007096:	6820      	ldr	r0, [r4, #0]
 8007098:	6803      	ldr	r3, [r0, #0]
 800709a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800709e:	6003      	str	r3, [r0, #0]
 80070a0:	e7db      	b.n	800705a <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80070a2:	9200      	str	r2, [sp, #0]
 80070a4:	460b      	mov	r3, r1
 80070a6:	2200      	movs	r2, #0
 80070a8:	2101      	movs	r1, #1
 80070aa:	4620      	mov	r0, r4
 80070ac:	f7ff ff51 	bl	8006f52 <SPI_WaitFlagStateUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	b170      	cbz	r0, 80070d2 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80070b6:	f043 0320 	orr.w	r3, r3, #32
 80070ba:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e008      	b.n	80070d2 <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80070c0:	9200      	str	r2, [sp, #0]
 80070c2:	460b      	mov	r3, r1
 80070c4:	2200      	movs	r2, #0
 80070c6:	2101      	movs	r1, #1
 80070c8:	4620      	mov	r0, r4
 80070ca:	f7ff ff42 	bl	8006f52 <SPI_WaitFlagStateUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	b910      	cbnz	r0, 80070d8 <SPI_EndRxTransaction+0x8c>
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	b002      	add	sp, #8
 80070d6:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80070da:	f043 0320 	orr.w	r3, r3, #32
 80070de:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e7f6      	b.n	80070d2 <SPI_EndRxTransaction+0x86>

080070e4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d03b      	beq.n	8007160 <HAL_SPI_Init+0x7c>
{
 80070e8:	b510      	push	{r4, lr}
 80070ea:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070ec:	2300      	movs	r3, #0
 80070ee:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80070f0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d02e      	beq.n	8007156 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 80070f8:	2302      	movs	r3, #2
 80070fa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	6813      	ldr	r3, [r2, #0]
 8007102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007106:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007108:	6863      	ldr	r3, [r4, #4]
 800710a:	68a2      	ldr	r2, [r4, #8]
 800710c:	4313      	orrs	r3, r2
 800710e:	68e2      	ldr	r2, [r4, #12]
 8007110:	4313      	orrs	r3, r2
 8007112:	6922      	ldr	r2, [r4, #16]
 8007114:	4313      	orrs	r3, r2
 8007116:	6962      	ldr	r2, [r4, #20]
 8007118:	4313      	orrs	r3, r2
 800711a:	69a2      	ldr	r2, [r4, #24]
 800711c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8007120:	4313      	orrs	r3, r2
 8007122:	69e2      	ldr	r2, [r4, #28]
 8007124:	4313      	orrs	r3, r2
 8007126:	6a22      	ldr	r2, [r4, #32]
 8007128:	4313      	orrs	r3, r2
 800712a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800712c:	6822      	ldr	r2, [r4, #0]
 800712e:	430b      	orrs	r3, r1
 8007130:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007132:	8b63      	ldrh	r3, [r4, #26]
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	430b      	orrs	r3, r1
 800713e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007140:	6822      	ldr	r2, [r4, #0]
 8007142:	69d3      	ldr	r3, [r2, #28]
 8007144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007148:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800714a:	2000      	movs	r0, #0
 800714c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800714e:	2301      	movs	r3, #1
 8007150:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8007154:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8007156:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800715a:	f7fc ffeb 	bl	8004134 <HAL_SPI_MspInit>
 800715e:	e7cb      	b.n	80070f8 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8007160:	2001      	movs	r0, #1
}
 8007162:	4770      	bx	lr

08007164 <HAL_SPI_Transmit>:
{
 8007164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007168:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800716a:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800716e:	2c01      	cmp	r4, #1
 8007170:	f000 80c3 	beq.w	80072fa <HAL_SPI_Transmit+0x196>
 8007174:	461d      	mov	r5, r3
 8007176:	4617      	mov	r7, r2
 8007178:	4688      	mov	r8, r1
 800717a:	4604      	mov	r4, r0
 800717c:	2301      	movs	r3, #1
 800717e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8007182:	f7fd fe7b 	bl	8004e7c <HAL_GetTick>
 8007186:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007188:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b01      	cmp	r3, #1
 8007190:	d009      	beq.n	80071a6 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8007192:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007194:	2301      	movs	r3, #1
 8007196:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800719a:	2300      	movs	r3, #0
 800719c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80071a0:	b002      	add	sp, #8
 80071a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80071a6:	f1b8 0f00 	cmp.w	r8, #0
 80071aa:	f000 8098 	beq.w	80072de <HAL_SPI_Transmit+0x17a>
 80071ae:	2f00      	cmp	r7, #0
 80071b0:	f000 8097 	beq.w	80072e2 <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071b4:	2303      	movs	r3, #3
 80071b6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071ba:	2300      	movs	r3, #0
 80071bc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80071be:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80071c2:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80071c4:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071c6:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80071c8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80071ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80071cc:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80071ce:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071d0:	68a3      	ldr	r3, [r4, #8]
 80071d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071d6:	d01c      	beq.n	8007212 <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80071e0:	d103      	bne.n	80071ea <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071e8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071ea:	68e3      	ldr	r3, [r4, #12]
 80071ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071f0:	d015      	beq.n	800721e <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071f2:	6863      	ldr	r3, [r4, #4]
 80071f4:	b10b      	cbz	r3, 80071fa <HAL_SPI_Transmit+0x96>
 80071f6:	2f01      	cmp	r7, #1
 80071f8:	d149      	bne.n	800728e <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	7812      	ldrb	r2, [r2, #0]
 8007200:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007202:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007204:	3301      	adds	r3, #1
 8007206:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8007208:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800720a:	3b01      	subs	r3, #1
 800720c:	b29b      	uxth	r3, r3
 800720e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8007210:	e03d      	b.n	800728e <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 8007212:	6822      	ldr	r2, [r4, #0]
 8007214:	6813      	ldr	r3, [r2, #0]
 8007216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	e7dc      	b.n	80071d8 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800721e:	6863      	ldr	r3, [r4, #4]
 8007220:	b10b      	cbz	r3, 8007226 <HAL_SPI_Transmit+0xc2>
 8007222:	2f01      	cmp	r7, #1
 8007224:	d115      	bne.n	8007252 <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007226:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	8812      	ldrh	r2, [r2, #0]
 800722c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800722e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007230:	3302      	adds	r3, #2
 8007232:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8007234:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007236:	3b01      	subs	r3, #1
 8007238:	b29b      	uxth	r3, r3
 800723a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800723c:	e009      	b.n	8007252 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800723e:	f7fd fe1d 	bl	8004e7c <HAL_GetTick>
 8007242:	1b80      	subs	r0, r0, r6
 8007244:	42a8      	cmp	r0, r5
 8007246:	d302      	bcc.n	800724e <HAL_SPI_Transmit+0xea>
 8007248:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800724c:	d14b      	bne.n	80072e6 <HAL_SPI_Transmit+0x182>
 800724e:	2d00      	cmp	r5, #0
 8007250:	d04b      	beq.n	80072ea <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 8007252:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007254:	b29b      	uxth	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d02c      	beq.n	80072b4 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	f012 0f02 	tst.w	r2, #2
 8007262:	d0ec      	beq.n	800723e <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007264:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007266:	8812      	ldrh	r2, [r2, #0]
 8007268:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800726a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800726c:	3302      	adds	r3, #2
 800726e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007270:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007272:	3b01      	subs	r3, #1
 8007274:	b29b      	uxth	r3, r3
 8007276:	86e3      	strh	r3, [r4, #54]	; 0x36
 8007278:	e7eb      	b.n	8007252 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800727a:	f7fd fdff 	bl	8004e7c <HAL_GetTick>
 800727e:	1b80      	subs	r0, r0, r6
 8007280:	42a8      	cmp	r0, r5
 8007282:	d302      	bcc.n	800728a <HAL_SPI_Transmit+0x126>
 8007284:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007288:	d131      	bne.n	80072ee <HAL_SPI_Transmit+0x18a>
 800728a:	2d00      	cmp	r5, #0
 800728c:	d031      	beq.n	80072f2 <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 800728e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007290:	b29b      	uxth	r3, r3
 8007292:	b17b      	cbz	r3, 80072b4 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	f012 0f02 	tst.w	r2, #2
 800729c:	d0ed      	beq.n	800727a <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800729e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80072a0:	7812      	ldrb	r2, [r2, #0]
 80072a2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80072a6:	3301      	adds	r3, #1
 80072a8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80072aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80072ac:	3b01      	subs	r3, #1
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80072b2:	e7ec      	b.n	800728e <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072b4:	4632      	mov	r2, r6
 80072b6:	4629      	mov	r1, r5
 80072b8:	4620      	mov	r0, r4
 80072ba:	f7ff fe93 	bl	8006fe4 <SPI_EndRxTxTransaction>
 80072be:	b108      	cbz	r0, 80072c4 <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072c0:	2320      	movs	r3, #32
 80072c2:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072c4:	68a3      	ldr	r3, [r4, #8]
 80072c6:	b933      	cbnz	r3, 80072d6 <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	9201      	str	r2, [sp, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	9301      	str	r3, [sp, #4]
 80072d4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80072d8:	b96b      	cbnz	r3, 80072f6 <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072da:	2000      	movs	r0, #0
 80072dc:	e75a      	b.n	8007194 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80072de:	2001      	movs	r0, #1
 80072e0:	e758      	b.n	8007194 <HAL_SPI_Transmit+0x30>
 80072e2:	2001      	movs	r0, #1
 80072e4:	e756      	b.n	8007194 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80072e6:	2003      	movs	r0, #3
 80072e8:	e754      	b.n	8007194 <HAL_SPI_Transmit+0x30>
 80072ea:	2003      	movs	r0, #3
 80072ec:	e752      	b.n	8007194 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80072ee:	2003      	movs	r0, #3
 80072f0:	e750      	b.n	8007194 <HAL_SPI_Transmit+0x30>
 80072f2:	2003      	movs	r0, #3
 80072f4:	e74e      	b.n	8007194 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80072f6:	2001      	movs	r0, #1
 80072f8:	e74c      	b.n	8007194 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80072fa:	2002      	movs	r0, #2
 80072fc:	e750      	b.n	80071a0 <HAL_SPI_Transmit+0x3c>

080072fe <HAL_SPI_TransmitReceive>:
{
 80072fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007302:	b083      	sub	sp, #12
 8007304:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8007308:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800730c:	2c01      	cmp	r4, #1
 800730e:	f000 810b 	beq.w	8007528 <HAL_SPI_TransmitReceive+0x22a>
 8007312:	461d      	mov	r5, r3
 8007314:	4617      	mov	r7, r2
 8007316:	460e      	mov	r6, r1
 8007318:	4604      	mov	r4, r0
 800731a:	2301      	movs	r3, #1
 800731c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8007320:	f7fd fdac 	bl	8004e7c <HAL_GetTick>
 8007324:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8007326:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800732a:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 800732c:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800732e:	2801      	cmp	r0, #1
 8007330:	d015      	beq.n	800735e <HAL_SPI_TransmitReceive+0x60>
 8007332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007336:	d00a      	beq.n	800734e <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 8007338:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 800733a:	2201      	movs	r2, #1
 800733c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007340:	2200      	movs	r2, #0
 8007342:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8007346:	4618      	mov	r0, r3
 8007348:	b003      	add	sp, #12
 800734a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800734e:	68a3      	ldr	r3, [r4, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f040 80db 	bne.w	800750c <HAL_SPI_TransmitReceive+0x20e>
 8007356:	2804      	cmp	r0, #4
 8007358:	d001      	beq.n	800735e <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 800735a:	2302      	movs	r3, #2
 800735c:	e7ed      	b.n	800733a <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800735e:	2e00      	cmp	r6, #0
 8007360:	f000 80d6 	beq.w	8007510 <HAL_SPI_TransmitReceive+0x212>
 8007364:	2f00      	cmp	r7, #0
 8007366:	f000 80d5 	beq.w	8007514 <HAL_SPI_TransmitReceive+0x216>
 800736a:	2d00      	cmp	r5, #0
 800736c:	f000 80d4 	beq.w	8007518 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007370:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b04      	cmp	r3, #4
 8007378:	d002      	beq.n	8007380 <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800737a:	2305      	movs	r3, #5
 800737c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007380:	2300      	movs	r3, #0
 8007382:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007384:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007386:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007388:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800738a:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 800738c:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800738e:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8007390:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007392:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	f012 0f40 	tst.w	r2, #64	; 0x40
 800739c:	d103      	bne.n	80073a6 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073a4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073a6:	68e3      	ldr	r3, [r4, #12]
 80073a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ac:	d010      	beq.n	80073d0 <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073ae:	6863      	ldr	r3, [r4, #4]
 80073b0:	b10b      	cbz	r3, 80073b6 <HAL_SPI_TransmitReceive+0xb8>
 80073b2:	2d01      	cmp	r5, #1
 80073b4:	d10a      	bne.n	80073cc <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	7812      	ldrb	r2, [r2, #0]
 80073bc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80073c0:	3301      	adds	r3, #1
 80073c2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80073c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80073c6:	3b01      	subs	r3, #1
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80073cc:	2501      	movs	r5, #1
 80073ce:	e069      	b.n	80074a4 <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073d0:	6863      	ldr	r3, [r4, #4]
 80073d2:	b10b      	cbz	r3, 80073d8 <HAL_SPI_TransmitReceive+0xda>
 80073d4:	2d01      	cmp	r5, #1
 80073d6:	d10a      	bne.n	80073ee <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	8812      	ldrh	r2, [r2, #0]
 80073de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80073e2:	3302      	adds	r3, #2
 80073e4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80073e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80073e8:	3b01      	subs	r3, #1
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80073ee:	2501      	movs	r5, #1
 80073f0:	e01b      	b.n	800742a <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	f012 0f01 	tst.w	r2, #1
 80073fa:	d00d      	beq.n	8007418 <HAL_SPI_TransmitReceive+0x11a>
 80073fc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80073fe:	b292      	uxth	r2, r2
 8007400:	b152      	cbz	r2, 8007418 <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007406:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007408:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800740a:	3302      	adds	r3, #2
 800740c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800740e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007410:	3b01      	subs	r3, #1
 8007412:	b29b      	uxth	r3, r3
 8007414:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8007416:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007418:	f7fd fd30 	bl	8004e7c <HAL_GetTick>
 800741c:	eba0 0009 	sub.w	r0, r0, r9
 8007420:	4540      	cmp	r0, r8
 8007422:	d302      	bcc.n	800742a <HAL_SPI_TransmitReceive+0x12c>
 8007424:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007428:	d178      	bne.n	800751c <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800742a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800742c:	b29b      	uxth	r3, r3
 800742e:	b91b      	cbnz	r3, 8007438 <HAL_SPI_TransmitReceive+0x13a>
 8007430:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007432:	b29b      	uxth	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d052      	beq.n	80074de <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	f012 0f02 	tst.w	r2, #2
 8007440:	d0d7      	beq.n	80073f2 <HAL_SPI_TransmitReceive+0xf4>
 8007442:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8007444:	b292      	uxth	r2, r2
 8007446:	2a00      	cmp	r2, #0
 8007448:	d0d3      	beq.n	80073f2 <HAL_SPI_TransmitReceive+0xf4>
 800744a:	2d00      	cmp	r5, #0
 800744c:	d0d1      	beq.n	80073f2 <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800744e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007450:	8812      	ldrh	r2, [r2, #0]
 8007452:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007454:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007456:	3302      	adds	r3, #2
 8007458:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800745a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800745c:	3b01      	subs	r3, #1
 800745e:	b29b      	uxth	r3, r3
 8007460:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8007462:	2500      	movs	r5, #0
 8007464:	e7c5      	b.n	80073f2 <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	f012 0f01 	tst.w	r2, #1
 800746e:	d00d      	beq.n	800748c <HAL_SPI_TransmitReceive+0x18e>
 8007470:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007472:	b292      	uxth	r2, r2
 8007474:	b152      	cbz	r2, 800748c <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800747a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800747c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800747e:	3301      	adds	r3, #1
 8007480:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007482:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007484:	3b01      	subs	r3, #1
 8007486:	b29b      	uxth	r3, r3
 8007488:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800748a:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800748c:	f7fd fcf6 	bl	8004e7c <HAL_GetTick>
 8007490:	eba0 0009 	sub.w	r0, r0, r9
 8007494:	4540      	cmp	r0, r8
 8007496:	d302      	bcc.n	800749e <HAL_SPI_TransmitReceive+0x1a0>
 8007498:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800749c:	d140      	bne.n	8007520 <HAL_SPI_TransmitReceive+0x222>
 800749e:	f1b8 0f00 	cmp.w	r8, #0
 80074a2:	d03f      	beq.n	8007524 <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	b913      	cbnz	r3, 80074b0 <HAL_SPI_TransmitReceive+0x1b2>
 80074aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	b1b3      	cbz	r3, 80074de <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	f012 0f02 	tst.w	r2, #2
 80074b8:	d0d5      	beq.n	8007466 <HAL_SPI_TransmitReceive+0x168>
 80074ba:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80074bc:	b292      	uxth	r2, r2
 80074be:	2a00      	cmp	r2, #0
 80074c0:	d0d1      	beq.n	8007466 <HAL_SPI_TransmitReceive+0x168>
 80074c2:	2d00      	cmp	r5, #0
 80074c4:	d0cf      	beq.n	8007466 <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80074c8:	7812      	ldrb	r2, [r2, #0]
 80074ca:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80074cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80074ce:	3301      	adds	r3, #1
 80074d0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80074d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80074da:	2500      	movs	r5, #0
 80074dc:	e7c3      	b.n	8007466 <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074de:	464a      	mov	r2, r9
 80074e0:	4641      	mov	r1, r8
 80074e2:	4620      	mov	r0, r4
 80074e4:	f7ff fd7e 	bl	8006fe4 <SPI_EndRxTxTransaction>
 80074e8:	4603      	mov	r3, r0
 80074ea:	b118      	cbz	r0, 80074f4 <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074ec:	2320      	movs	r3, #32
 80074ee:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
    goto error;
 80074f2:	e722      	b.n	800733a <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074f4:	68a2      	ldr	r2, [r4, #8]
 80074f6:	2a00      	cmp	r2, #0
 80074f8:	f47f af1f 	bne.w	800733a <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074fc:	9201      	str	r2, [sp, #4]
 80074fe:	6822      	ldr	r2, [r4, #0]
 8007500:	68d1      	ldr	r1, [r2, #12]
 8007502:	9101      	str	r1, [sp, #4]
 8007504:	6892      	ldr	r2, [r2, #8]
 8007506:	9201      	str	r2, [sp, #4]
 8007508:	9a01      	ldr	r2, [sp, #4]
 800750a:	e716      	b.n	800733a <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 800750c:	2302      	movs	r3, #2
 800750e:	e714      	b.n	800733a <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e712      	b.n	800733a <HAL_SPI_TransmitReceive+0x3c>
 8007514:	2301      	movs	r3, #1
 8007516:	e710      	b.n	800733a <HAL_SPI_TransmitReceive+0x3c>
 8007518:	2301      	movs	r3, #1
 800751a:	e70e      	b.n	800733a <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e70c      	b.n	800733a <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e70a      	b.n	800733a <HAL_SPI_TransmitReceive+0x3c>
 8007524:	2303      	movs	r3, #3
 8007526:	e708      	b.n	800733a <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8007528:	2302      	movs	r3, #2
 800752a:	e70c      	b.n	8007346 <HAL_SPI_TransmitReceive+0x48>

0800752c <HAL_SPI_Receive>:
{
 800752c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	4604      	mov	r4, r0
 8007534:	460f      	mov	r7, r1
 8007536:	4690      	mov	r8, r2
 8007538:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800753a:	6843      	ldr	r3, [r0, #4]
 800753c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007540:	d019      	beq.n	8007576 <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 8007542:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8007546:	2b01      	cmp	r3, #1
 8007548:	f000 809f 	beq.w	800768a <HAL_SPI_Receive+0x15e>
 800754c:	2301      	movs	r3, #1
 800754e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8007552:	f7fd fc93 	bl	8004e7c <HAL_GetTick>
 8007556:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007558:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b01      	cmp	r3, #1
 8007560:	d015      	beq.n	800758e <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 8007562:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007564:	2301      	movs	r3, #1
 8007566:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800756a:	2300      	movs	r3, #0
 800756c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007570:	b002      	add	sp, #8
 8007572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007576:	6883      	ldr	r3, [r0, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1e2      	bne.n	8007542 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800757c:	2304      	movs	r3, #4
 800757e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007582:	9500      	str	r5, [sp, #0]
 8007584:	4613      	mov	r3, r2
 8007586:	460a      	mov	r2, r1
 8007588:	f7ff feb9 	bl	80072fe <HAL_SPI_TransmitReceive>
 800758c:	e7f0      	b.n	8007570 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 800758e:	2f00      	cmp	r7, #0
 8007590:	d06d      	beq.n	800766e <HAL_SPI_Receive+0x142>
 8007592:	f1b8 0f00 	cmp.w	r8, #0
 8007596:	d06c      	beq.n	8007672 <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007598:	2304      	movs	r3, #4
 800759a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800759e:	2300      	movs	r3, #0
 80075a0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80075a2:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80075a4:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80075a8:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80075ac:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80075ae:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80075b0:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 80075b2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80075b4:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075b6:	68a3      	ldr	r3, [r4, #8]
 80075b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075bc:	d00b      	beq.n	80075d6 <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80075c6:	d103      	bne.n	80075d0 <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075ce:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80075d0:	68e3      	ldr	r3, [r4, #12]
 80075d2:	b183      	cbz	r3, 80075f6 <HAL_SPI_Receive+0xca>
 80075d4:	e02c      	b.n	8007630 <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 80075d6:	6822      	ldr	r2, [r4, #0]
 80075d8:	6813      	ldr	r3, [r2, #0]
 80075da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	e7ed      	b.n	80075be <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075e2:	f7fd fc4b 	bl	8004e7c <HAL_GetTick>
 80075e6:	1b80      	subs	r0, r0, r6
 80075e8:	42a8      	cmp	r0, r5
 80075ea:	d302      	bcc.n	80075f2 <HAL_SPI_Receive+0xc6>
 80075ec:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80075f0:	d141      	bne.n	8007676 <HAL_SPI_Receive+0x14a>
 80075f2:	2d00      	cmp	r5, #0
 80075f4:	d041      	beq.n	800767a <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 80075f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d02b      	beq.n	8007656 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	689a      	ldr	r2, [r3, #8]
 8007602:	f012 0f01 	tst.w	r2, #1
 8007606:	d0ec      	beq.n	80075e2 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007608:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800760a:	7b1b      	ldrb	r3, [r3, #12]
 800760c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800760e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007610:	3301      	adds	r3, #1
 8007612:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007614:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007616:	3b01      	subs	r3, #1
 8007618:	b29b      	uxth	r3, r3
 800761a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800761c:	e7eb      	b.n	80075f6 <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800761e:	f7fd fc2d 	bl	8004e7c <HAL_GetTick>
 8007622:	1b80      	subs	r0, r0, r6
 8007624:	42a8      	cmp	r0, r5
 8007626:	d302      	bcc.n	800762e <HAL_SPI_Receive+0x102>
 8007628:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800762c:	d127      	bne.n	800767e <HAL_SPI_Receive+0x152>
 800762e:	b345      	cbz	r5, 8007682 <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 8007630:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007632:	b29b      	uxth	r3, r3
 8007634:	b17b      	cbz	r3, 8007656 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	f012 0f01 	tst.w	r2, #1
 800763e:	d0ee      	beq.n	800761e <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007644:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007646:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007648:	3302      	adds	r3, #2
 800764a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800764c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800764e:	3b01      	subs	r3, #1
 8007650:	b29b      	uxth	r3, r3
 8007652:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007654:	e7ec      	b.n	8007630 <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007656:	4632      	mov	r2, r6
 8007658:	4629      	mov	r1, r5
 800765a:	4620      	mov	r0, r4
 800765c:	f7ff fcf6 	bl	800704c <SPI_EndRxTransaction>
 8007660:	b108      	cbz	r0, 8007666 <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007662:	2320      	movs	r3, #32
 8007664:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007666:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007668:	b96b      	cbnz	r3, 8007686 <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800766a:	2000      	movs	r0, #0
 800766c:	e77a      	b.n	8007564 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 800766e:	2001      	movs	r0, #1
 8007670:	e778      	b.n	8007564 <HAL_SPI_Receive+0x38>
 8007672:	2001      	movs	r0, #1
 8007674:	e776      	b.n	8007564 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8007676:	2003      	movs	r0, #3
 8007678:	e774      	b.n	8007564 <HAL_SPI_Receive+0x38>
 800767a:	2003      	movs	r0, #3
 800767c:	e772      	b.n	8007564 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800767e:	2003      	movs	r0, #3
 8007680:	e770      	b.n	8007564 <HAL_SPI_Receive+0x38>
 8007682:	2003      	movs	r0, #3
 8007684:	e76e      	b.n	8007564 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8007686:	2001      	movs	r0, #1
 8007688:	e76c      	b.n	8007564 <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 800768a:	2002      	movs	r0, #2
 800768c:	e770      	b.n	8007570 <HAL_SPI_Receive+0x44>
	...

08007690 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007690:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007692:	6a03      	ldr	r3, [r0, #32]
 8007694:	f023 0301 	bic.w	r3, r3, #1
 8007698:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800769c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800769e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076a0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076a4:	680d      	ldr	r5, [r1, #0]
 80076a6:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076aa:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076ae:	688b      	ldr	r3, [r1, #8]
 80076b0:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076b2:	4d0d      	ldr	r5, [pc, #52]	; (80076e8 <TIM_OC1_SetConfig+0x58>)
 80076b4:	42a8      	cmp	r0, r5
 80076b6:	d009      	beq.n	80076cc <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b8:	4d0b      	ldr	r5, [pc, #44]	; (80076e8 <TIM_OC1_SetConfig+0x58>)
 80076ba:	42a8      	cmp	r0, r5
 80076bc:	d00d      	beq.n	80076da <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076be:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076c0:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076c2:	684a      	ldr	r2, [r1, #4]
 80076c4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076c6:	6203      	str	r3, [r0, #32]
}
 80076c8:	bc70      	pop	{r4, r5, r6}
 80076ca:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80076cc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80076d0:	68cc      	ldr	r4, [r1, #12]
 80076d2:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80076d4:	f023 0304 	bic.w	r3, r3, #4
 80076d8:	e7ee      	b.n	80076b8 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80076de:	694c      	ldr	r4, [r1, #20]
 80076e0:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 80076e2:	698a      	ldr	r2, [r1, #24]
 80076e4:	4322      	orrs	r2, r4
 80076e6:	e7ea      	b.n	80076be <TIM_OC1_SetConfig+0x2e>
 80076e8:	40010000 	.word	0x40010000

080076ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076ec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076ee:	6a03      	ldr	r3, [r0, #32]
 80076f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076f4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076f6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076fa:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076fc:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007700:	680d      	ldr	r5, [r1, #0]
 8007702:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007708:	688d      	ldr	r5, [r1, #8]
 800770a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800770e:	4d0f      	ldr	r5, [pc, #60]	; (800774c <TIM_OC3_SetConfig+0x60>)
 8007710:	42a8      	cmp	r0, r5
 8007712:	d009      	beq.n	8007728 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007714:	4d0d      	ldr	r5, [pc, #52]	; (800774c <TIM_OC3_SetConfig+0x60>)
 8007716:	42a8      	cmp	r0, r5
 8007718:	d00e      	beq.n	8007738 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800771a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800771c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800771e:	684a      	ldr	r2, [r1, #4]
 8007720:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007722:	6203      	str	r3, [r0, #32]
}
 8007724:	bc30      	pop	{r4, r5}
 8007726:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8007728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800772c:	68cd      	ldr	r5, [r1, #12]
 800772e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007732:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007736:	e7ed      	b.n	8007714 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007738:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800773c:	694d      	ldr	r5, [r1, #20]
 800773e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007742:	698d      	ldr	r5, [r1, #24]
 8007744:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8007748:	e7e7      	b.n	800771a <TIM_OC3_SetConfig+0x2e>
 800774a:	bf00      	nop
 800774c:	40010000 	.word	0x40010000

08007750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007750:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007752:	6a03      	ldr	r3, [r0, #32]
 8007754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007758:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800775a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800775c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800775e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007760:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007764:	680d      	ldr	r5, [r1, #0]
 8007766:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800776a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800776e:	688d      	ldr	r5, [r1, #8]
 8007770:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007774:	4d07      	ldr	r5, [pc, #28]	; (8007794 <TIM_OC4_SetConfig+0x44>)
 8007776:	42a8      	cmp	r0, r5
 8007778:	d006      	beq.n	8007788 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800777a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800777c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800777e:	684a      	ldr	r2, [r1, #4]
 8007780:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007782:	6203      	str	r3, [r0, #32]
}
 8007784:	bc30      	pop	{r4, r5}
 8007786:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007788:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800778c:	694d      	ldr	r5, [r1, #20]
 800778e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8007792:	e7f2      	b.n	800777a <TIM_OC4_SetConfig+0x2a>
 8007794:	40010000 	.word	0x40010000

08007798 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007798:	6802      	ldr	r2, [r0, #0]
 800779a:	68d3      	ldr	r3, [r2, #12]
 800779c:	f043 0301 	orr.w	r3, r3, #1
 80077a0:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077a2:	6802      	ldr	r2, [r0, #0]
 80077a4:	6893      	ldr	r3, [r2, #8]
 80077a6:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077aa:	2b06      	cmp	r3, #6
 80077ac:	d003      	beq.n	80077b6 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 80077ae:	6813      	ldr	r3, [r2, #0]
 80077b0:	f043 0301 	orr.w	r3, r3, #1
 80077b4:	6013      	str	r3, [r2, #0]
}
 80077b6:	2000      	movs	r0, #0
 80077b8:	4770      	bx	lr

080077ba <HAL_TIM_OC_DelayElapsedCallback>:
}
 80077ba:	4770      	bx	lr

080077bc <HAL_TIM_IC_CaptureCallback>:
}
 80077bc:	4770      	bx	lr

080077be <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80077be:	4770      	bx	lr

080077c0 <HAL_TIM_TriggerCallback>:
}
 80077c0:	4770      	bx	lr

080077c2 <HAL_TIM_IRQHandler>:
{
 80077c2:	b510      	push	{r4, lr}
 80077c4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077c6:	6803      	ldr	r3, [r0, #0]
 80077c8:	691a      	ldr	r2, [r3, #16]
 80077ca:	f012 0f02 	tst.w	r2, #2
 80077ce:	d011      	beq.n	80077f4 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077d0:	68da      	ldr	r2, [r3, #12]
 80077d2:	f012 0f02 	tst.w	r2, #2
 80077d6:	d00d      	beq.n	80077f4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077d8:	f06f 0202 	mvn.w	r2, #2
 80077dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077de:	2301      	movs	r3, #1
 80077e0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077e2:	6803      	ldr	r3, [r0, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f013 0f03 	tst.w	r3, #3
 80077ea:	d070      	beq.n	80078ce <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80077ec:	f7ff ffe6 	bl	80077bc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f0:	2300      	movs	r3, #0
 80077f2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	f012 0f04 	tst.w	r2, #4
 80077fc:	d012      	beq.n	8007824 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	f012 0f04 	tst.w	r2, #4
 8007804:	d00e      	beq.n	8007824 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007806:	f06f 0204 	mvn.w	r2, #4
 800780a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800780c:	2302      	movs	r3, #2
 800780e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007818:	d05f      	beq.n	80078da <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800781a:	4620      	mov	r0, r4
 800781c:	f7ff ffce 	bl	80077bc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007820:	2300      	movs	r3, #0
 8007822:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	f012 0f08 	tst.w	r2, #8
 800782c:	d012      	beq.n	8007854 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	f012 0f08 	tst.w	r2, #8
 8007834:	d00e      	beq.n	8007854 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007836:	f06f 0208 	mvn.w	r2, #8
 800783a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800783c:	2304      	movs	r3, #4
 800783e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	69db      	ldr	r3, [r3, #28]
 8007844:	f013 0f03 	tst.w	r3, #3
 8007848:	d04e      	beq.n	80078e8 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800784a:	4620      	mov	r0, r4
 800784c:	f7ff ffb6 	bl	80077bc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007850:	2300      	movs	r3, #0
 8007852:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	691a      	ldr	r2, [r3, #16]
 8007858:	f012 0f10 	tst.w	r2, #16
 800785c:	d012      	beq.n	8007884 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800785e:	68da      	ldr	r2, [r3, #12]
 8007860:	f012 0f10 	tst.w	r2, #16
 8007864:	d00e      	beq.n	8007884 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007866:	f06f 0210 	mvn.w	r2, #16
 800786a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800786c:	2308      	movs	r3, #8
 800786e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007878:	d03d      	beq.n	80078f6 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800787a:	4620      	mov	r0, r4
 800787c:	f7ff ff9e 	bl	80077bc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007880:	2300      	movs	r3, #0
 8007882:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	691a      	ldr	r2, [r3, #16]
 8007888:	f012 0f01 	tst.w	r2, #1
 800788c:	d003      	beq.n	8007896 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800788e:	68da      	ldr	r2, [r3, #12]
 8007890:	f012 0f01 	tst.w	r2, #1
 8007894:	d136      	bne.n	8007904 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800789e:	d003      	beq.n	80078a8 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078a0:	68da      	ldr	r2, [r3, #12]
 80078a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80078a6:	d134      	bne.n	8007912 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	691a      	ldr	r2, [r3, #16]
 80078ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80078b0:	d003      	beq.n	80078ba <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078b2:	68da      	ldr	r2, [r3, #12]
 80078b4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80078b8:	d132      	bne.n	8007920 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	691a      	ldr	r2, [r3, #16]
 80078be:	f012 0f20 	tst.w	r2, #32
 80078c2:	d003      	beq.n	80078cc <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	f012 0f20 	tst.w	r2, #32
 80078ca:	d130      	bne.n	800792e <HAL_TIM_IRQHandler+0x16c>
}
 80078cc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ce:	f7ff ff74 	bl	80077ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d2:	4620      	mov	r0, r4
 80078d4:	f7ff ff73 	bl	80077be <HAL_TIM_PWM_PulseFinishedCallback>
 80078d8:	e78a      	b.n	80077f0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078da:	4620      	mov	r0, r4
 80078dc:	f7ff ff6d 	bl	80077ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e0:	4620      	mov	r0, r4
 80078e2:	f7ff ff6c 	bl	80077be <HAL_TIM_PWM_PulseFinishedCallback>
 80078e6:	e79b      	b.n	8007820 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e8:	4620      	mov	r0, r4
 80078ea:	f7ff ff66 	bl	80077ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ee:	4620      	mov	r0, r4
 80078f0:	f7ff ff65 	bl	80077be <HAL_TIM_PWM_PulseFinishedCallback>
 80078f4:	e7ac      	b.n	8007850 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f6:	4620      	mov	r0, r4
 80078f8:	f7ff ff5f 	bl	80077ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078fc:	4620      	mov	r0, r4
 80078fe:	f7ff ff5e 	bl	80077be <HAL_TIM_PWM_PulseFinishedCallback>
 8007902:	e7bd      	b.n	8007880 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007904:	f06f 0201 	mvn.w	r2, #1
 8007908:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800790a:	4620      	mov	r0, r4
 800790c:	f7fc f838 	bl	8003980 <HAL_TIM_PeriodElapsedCallback>
 8007910:	e7c1      	b.n	8007896 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007912:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007916:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007918:	4620      	mov	r0, r4
 800791a:	f000 f9c5 	bl	8007ca8 <HAL_TIMEx_BreakCallback>
 800791e:	e7c3      	b.n	80078a8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007924:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007926:	4620      	mov	r0, r4
 8007928:	f7ff ff4a 	bl	80077c0 <HAL_TIM_TriggerCallback>
 800792c:	e7c5      	b.n	80078ba <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800792e:	f06f 0220 	mvn.w	r2, #32
 8007932:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007934:	4620      	mov	r0, r4
 8007936:	f000 f9b6 	bl	8007ca6 <HAL_TIMEx_CommutCallback>
}
 800793a:	e7c7      	b.n	80078cc <HAL_TIM_IRQHandler+0x10a>

0800793c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800793c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800793e:	4a25      	ldr	r2, [pc, #148]	; (80079d4 <TIM_Base_SetConfig+0x98>)
 8007940:	4290      	cmp	r0, r2
 8007942:	d00e      	beq.n	8007962 <TIM_Base_SetConfig+0x26>
 8007944:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007948:	d00b      	beq.n	8007962 <TIM_Base_SetConfig+0x26>
 800794a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800794e:	4290      	cmp	r0, r2
 8007950:	d007      	beq.n	8007962 <TIM_Base_SetConfig+0x26>
 8007952:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007956:	4290      	cmp	r0, r2
 8007958:	d003      	beq.n	8007962 <TIM_Base_SetConfig+0x26>
 800795a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800795e:	4290      	cmp	r0, r2
 8007960:	d103      	bne.n	800796a <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007966:	684a      	ldr	r2, [r1, #4]
 8007968:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800796a:	4a1a      	ldr	r2, [pc, #104]	; (80079d4 <TIM_Base_SetConfig+0x98>)
 800796c:	4290      	cmp	r0, r2
 800796e:	d01a      	beq.n	80079a6 <TIM_Base_SetConfig+0x6a>
 8007970:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007974:	d017      	beq.n	80079a6 <TIM_Base_SetConfig+0x6a>
 8007976:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800797a:	4290      	cmp	r0, r2
 800797c:	d013      	beq.n	80079a6 <TIM_Base_SetConfig+0x6a>
 800797e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007982:	4290      	cmp	r0, r2
 8007984:	d00f      	beq.n	80079a6 <TIM_Base_SetConfig+0x6a>
 8007986:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800798a:	4290      	cmp	r0, r2
 800798c:	d00b      	beq.n	80079a6 <TIM_Base_SetConfig+0x6a>
 800798e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8007992:	4290      	cmp	r0, r2
 8007994:	d007      	beq.n	80079a6 <TIM_Base_SetConfig+0x6a>
 8007996:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800799a:	4290      	cmp	r0, r2
 800799c:	d003      	beq.n	80079a6 <TIM_Base_SetConfig+0x6a>
 800799e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079a2:	4290      	cmp	r0, r2
 80079a4:	d103      	bne.n	80079ae <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80079a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079aa:	68ca      	ldr	r2, [r1, #12]
 80079ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079b2:	694a      	ldr	r2, [r1, #20]
 80079b4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80079b6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079b8:	688b      	ldr	r3, [r1, #8]
 80079ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80079bc:	680b      	ldr	r3, [r1, #0]
 80079be:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079c0:	4b04      	ldr	r3, [pc, #16]	; (80079d4 <TIM_Base_SetConfig+0x98>)
 80079c2:	4298      	cmp	r0, r3
 80079c4:	d002      	beq.n	80079cc <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 80079c6:	2301      	movs	r3, #1
 80079c8:	6143      	str	r3, [r0, #20]
}
 80079ca:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80079cc:	690b      	ldr	r3, [r1, #16]
 80079ce:	6303      	str	r3, [r0, #48]	; 0x30
 80079d0:	e7f9      	b.n	80079c6 <TIM_Base_SetConfig+0x8a>
 80079d2:	bf00      	nop
 80079d4:	40010000 	.word	0x40010000

080079d8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80079d8:	b1a8      	cbz	r0, 8007a06 <HAL_TIM_Base_Init+0x2e>
{
 80079da:	b510      	push	{r4, lr}
 80079dc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80079de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80079e2:	b15b      	cbz	r3, 80079fc <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80079e4:	2302      	movs	r3, #2
 80079e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079ea:	1d21      	adds	r1, r4, #4
 80079ec:	6820      	ldr	r0, [r4, #0]
 80079ee:	f7ff ffa5 	bl	800793c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80079f2:	2301      	movs	r3, #1
 80079f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80079f8:	2000      	movs	r0, #0
}
 80079fa:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80079fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007a00:	f7fc fc1c 	bl	800423c <HAL_TIM_Base_MspInit>
 8007a04:	e7ee      	b.n	80079e4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8007a06:	2001      	movs	r0, #1
}
 8007a08:	4770      	bx	lr

08007a0a <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007a0a:	b1a8      	cbz	r0, 8007a38 <HAL_TIM_PWM_Init+0x2e>
{
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007a10:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007a14:	b15b      	cbz	r3, 8007a2e <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8007a16:	2302      	movs	r3, #2
 8007a18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a1c:	1d21      	adds	r1, r4, #4
 8007a1e:	6820      	ldr	r0, [r4, #0]
 8007a20:	f7ff ff8c 	bl	800793c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007a24:	2301      	movs	r3, #1
 8007a26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007a2a:	2000      	movs	r0, #0
}
 8007a2c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007a2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007a32:	f7fc fbb7 	bl	80041a4 <HAL_TIM_PWM_MspInit>
 8007a36:	e7ee      	b.n	8007a16 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8007a38:	2001      	movs	r0, #1
}
 8007a3a:	4770      	bx	lr

08007a3c <TIM_OC2_SetConfig>:
{
 8007a3c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a3e:	6a03      	ldr	r3, [r0, #32]
 8007a40:	f023 0310 	bic.w	r3, r3, #16
 8007a44:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007a46:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007a48:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007a4a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a4c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a50:	680d      	ldr	r5, [r1, #0]
 8007a52:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8007a56:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a5a:	688d      	ldr	r5, [r1, #8]
 8007a5c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a60:	4d0e      	ldr	r5, [pc, #56]	; (8007a9c <TIM_OC2_SetConfig+0x60>)
 8007a62:	42a8      	cmp	r0, r5
 8007a64:	d009      	beq.n	8007a7a <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a66:	4d0d      	ldr	r5, [pc, #52]	; (8007a9c <TIM_OC2_SetConfig+0x60>)
 8007a68:	42a8      	cmp	r0, r5
 8007a6a:	d00e      	beq.n	8007a8a <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8007a6c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007a6e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007a70:	684a      	ldr	r2, [r1, #4]
 8007a72:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007a74:	6203      	str	r3, [r0, #32]
}
 8007a76:	bc30      	pop	{r4, r5}
 8007a78:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a7e:	68cd      	ldr	r5, [r1, #12]
 8007a80:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a88:	e7ed      	b.n	8007a66 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a8a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a8e:	694d      	ldr	r5, [r1, #20]
 8007a90:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a94:	698d      	ldr	r5, [r1, #24]
 8007a96:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8007a9a:	e7e7      	b.n	8007a6c <TIM_OC2_SetConfig+0x30>
 8007a9c:	40010000 	.word	0x40010000

08007aa0 <HAL_TIM_PWM_ConfigChannel>:
{
 8007aa0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007aa2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d066      	beq.n	8007b78 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8007aaa:	460d      	mov	r5, r1
 8007aac:	4604      	mov	r4, r0
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8007aba:	2a0c      	cmp	r2, #12
 8007abc:	d81a      	bhi.n	8007af4 <HAL_TIM_PWM_ConfigChannel+0x54>
 8007abe:	e8df f002 	tbb	[pc, r2]
 8007ac2:	1907      	.short	0x1907
 8007ac4:	19201919 	.word	0x19201919
 8007ac8:	19341919 	.word	0x19341919
 8007acc:	1919      	.short	0x1919
 8007ace:	47          	.byte	0x47
 8007acf:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ad0:	6800      	ldr	r0, [r0, #0]
 8007ad2:	f7ff fddd 	bl	8007690 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ad6:	6822      	ldr	r2, [r4, #0]
 8007ad8:	6993      	ldr	r3, [r2, #24]
 8007ada:	f043 0308 	orr.w	r3, r3, #8
 8007ade:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ae0:	6822      	ldr	r2, [r4, #0]
 8007ae2:	6993      	ldr	r3, [r2, #24]
 8007ae4:	f023 0304 	bic.w	r3, r3, #4
 8007ae8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007aea:	6822      	ldr	r2, [r4, #0]
 8007aec:	6993      	ldr	r3, [r2, #24]
 8007aee:	6929      	ldr	r1, [r5, #16]
 8007af0:	430b      	orrs	r3, r1
 8007af2:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8007af4:	2301      	movs	r3, #1
 8007af6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007afa:	2000      	movs	r0, #0
 8007afc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007b00:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b02:	6800      	ldr	r0, [r0, #0]
 8007b04:	f7ff ff9a 	bl	8007a3c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b08:	6822      	ldr	r2, [r4, #0]
 8007b0a:	6993      	ldr	r3, [r2, #24]
 8007b0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b10:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b12:	6822      	ldr	r2, [r4, #0]
 8007b14:	6993      	ldr	r3, [r2, #24]
 8007b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b1a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b1c:	6822      	ldr	r2, [r4, #0]
 8007b1e:	6993      	ldr	r3, [r2, #24]
 8007b20:	6929      	ldr	r1, [r5, #16]
 8007b22:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007b26:	6193      	str	r3, [r2, #24]
      break;
 8007b28:	e7e4      	b.n	8007af4 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b2a:	6800      	ldr	r0, [r0, #0]
 8007b2c:	f7ff fdde 	bl	80076ec <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b30:	6822      	ldr	r2, [r4, #0]
 8007b32:	69d3      	ldr	r3, [r2, #28]
 8007b34:	f043 0308 	orr.w	r3, r3, #8
 8007b38:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b3a:	6822      	ldr	r2, [r4, #0]
 8007b3c:	69d3      	ldr	r3, [r2, #28]
 8007b3e:	f023 0304 	bic.w	r3, r3, #4
 8007b42:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b44:	6822      	ldr	r2, [r4, #0]
 8007b46:	69d3      	ldr	r3, [r2, #28]
 8007b48:	6929      	ldr	r1, [r5, #16]
 8007b4a:	430b      	orrs	r3, r1
 8007b4c:	61d3      	str	r3, [r2, #28]
      break;
 8007b4e:	e7d1      	b.n	8007af4 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b50:	6800      	ldr	r0, [r0, #0]
 8007b52:	f7ff fdfd 	bl	8007750 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b56:	6822      	ldr	r2, [r4, #0]
 8007b58:	69d3      	ldr	r3, [r2, #28]
 8007b5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b5e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b60:	6822      	ldr	r2, [r4, #0]
 8007b62:	69d3      	ldr	r3, [r2, #28]
 8007b64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b68:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b6a:	6822      	ldr	r2, [r4, #0]
 8007b6c:	69d3      	ldr	r3, [r2, #28]
 8007b6e:	6929      	ldr	r1, [r5, #16]
 8007b70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007b74:	61d3      	str	r3, [r2, #28]
      break;
 8007b76:	e7bd      	b.n	8007af4 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8007b78:	2002      	movs	r0, #2
 8007b7a:	e7c1      	b.n	8007b00 <HAL_TIM_PWM_ConfigChannel+0x60>

08007b7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b7c:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b7e:	f001 011f 	and.w	r1, r1, #31
 8007b82:	2301      	movs	r3, #1
 8007b84:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b88:	6a03      	ldr	r3, [r0, #32]
 8007b8a:	ea23 0304 	bic.w	r3, r3, r4
 8007b8e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b90:	6a03      	ldr	r3, [r0, #32]
 8007b92:	408a      	lsls	r2, r1
 8007b94:	4313      	orrs	r3, r2
 8007b96:	6203      	str	r3, [r0, #32]
}
 8007b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b9c:	4770      	bx	lr
	...

08007ba0 <HAL_TIM_PWM_Start>:
{
 8007ba0:	b510      	push	{r4, lr}
 8007ba2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	6800      	ldr	r0, [r0, #0]
 8007ba8:	f7ff ffe8 	bl	8007b7c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	4a0a      	ldr	r2, [pc, #40]	; (8007bd8 <HAL_TIM_PWM_Start+0x38>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d00b      	beq.n	8007bcc <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bb4:	6822      	ldr	r2, [r4, #0]
 8007bb6:	6893      	ldr	r3, [r2, #8]
 8007bb8:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bbc:	2b06      	cmp	r3, #6
 8007bbe:	d003      	beq.n	8007bc8 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8007bc0:	6813      	ldr	r3, [r2, #0]
 8007bc2:	f043 0301 	orr.w	r3, r3, #1
 8007bc6:	6013      	str	r3, [r2, #0]
}
 8007bc8:	2000      	movs	r0, #0
 8007bca:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8007bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bd2:	645a      	str	r2, [r3, #68]	; 0x44
 8007bd4:	e7ee      	b.n	8007bb4 <HAL_TIM_PWM_Start+0x14>
 8007bd6:	bf00      	nop
 8007bd8:	40010000 	.word	0x40010000

08007bdc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bdc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d033      	beq.n	8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8007be4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8007be6:	2301      	movs	r3, #1
 8007be8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bec:	2302      	movs	r3, #2
 8007bee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bf2:	6803      	ldr	r3, [r0, #0]
 8007bf4:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bf6:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bf8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bfc:	680a      	ldr	r2, [r1, #0]
 8007bfe:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c02:	6803      	ldr	r3, [r0, #0]
 8007c04:	4a12      	ldr	r2, [pc, #72]	; (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d012      	beq.n	8007c30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c0e:	d00f      	beq.n	8007c30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007c10:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d00b      	beq.n	8007c30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007c18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d007      	beq.n	8007c30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007c20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d003      	beq.n	8007c30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007c28:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d104      	bne.n	8007c3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c30:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c34:	684a      	ldr	r2, [r1, #4]
 8007c36:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c38:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c40:	2300      	movs	r3, #0
 8007c42:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8007c46:	4618      	mov	r0, r3
}
 8007c48:	bc30      	pop	{r4, r5}
 8007c4a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007c4c:	2002      	movs	r0, #2
}
 8007c4e:	4770      	bx	lr
 8007c50:	40010000 	.word	0x40010000

08007c54 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d022      	beq.n	8007ca2 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c62:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c68:	688a      	ldr	r2, [r1, #8]
 8007c6a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c70:	684a      	ldr	r2, [r1, #4]
 8007c72:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c78:	680a      	ldr	r2, [r1, #0]
 8007c7a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c80:	690a      	ldr	r2, [r1, #16]
 8007c82:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c88:	694a      	ldr	r2, [r1, #20]
 8007c8a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c90:	69ca      	ldr	r2, [r1, #28]
 8007c92:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c94:	6802      	ldr	r2, [r0, #0]
 8007c96:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007ca2:	2002      	movs	r0, #2
}
 8007ca4:	4770      	bx	lr

08007ca6 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ca8:	4770      	bx	lr

08007caa <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007caa:	6802      	ldr	r2, [r0, #0]
 8007cac:	68d3      	ldr	r3, [r2, #12]
 8007cae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007cb2:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cb4:	2320      	movs	r3, #32
 8007cb6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8007cba:	4770      	bx	lr

08007cbc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cbc:	6802      	ldr	r2, [r0, #0]
 8007cbe:	68d3      	ldr	r3, [r2, #12]
 8007cc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cc4:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc6:	6802      	ldr	r2, [r0, #0]
 8007cc8:	6953      	ldr	r3, [r2, #20]
 8007cca:	f023 0301 	bic.w	r3, r3, #1
 8007cce:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cd0:	2320      	movs	r3, #32
 8007cd2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8007cd6:	4770      	bx	lr

08007cd8 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cd8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b21      	cmp	r3, #33	; 0x21
 8007ce0:	d12a      	bne.n	8007d38 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007ce2:	6883      	ldr	r3, [r0, #8]
 8007ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce8:	d016      	beq.n	8007d18 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cea:	6a03      	ldr	r3, [r0, #32]
 8007cec:	1c5a      	adds	r2, r3, #1
 8007cee:	6202      	str	r2, [r0, #32]
 8007cf0:	781a      	ldrb	r2, [r3, #0]
 8007cf2:	6803      	ldr	r3, [r0, #0]
 8007cf4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007cf6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	84c3      	strh	r3, [r0, #38]	; 0x26
 8007cfe:	b9eb      	cbnz	r3, 8007d3c <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d00:	6802      	ldr	r2, [r0, #0]
 8007d02:	68d3      	ldr	r3, [r2, #12]
 8007d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d08:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d0a:	6802      	ldr	r2, [r0, #0]
 8007d0c:	68d3      	ldr	r3, [r2, #12]
 8007d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d12:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8007d14:	2000      	movs	r0, #0
 8007d16:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007d18:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	6802      	ldr	r2, [r0, #0]
 8007d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d22:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007d24:	6903      	ldr	r3, [r0, #16]
 8007d26:	b91b      	cbnz	r3, 8007d30 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8007d28:	6a03      	ldr	r3, [r0, #32]
 8007d2a:	3302      	adds	r3, #2
 8007d2c:	6203      	str	r3, [r0, #32]
 8007d2e:	e7e2      	b.n	8007cf6 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8007d30:	6a03      	ldr	r3, [r0, #32]
 8007d32:	3301      	adds	r3, #1
 8007d34:	6203      	str	r3, [r0, #32]
 8007d36:	e7de      	b.n	8007cf6 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8007d38:	2002      	movs	r0, #2
 8007d3a:	4770      	bx	lr
    return HAL_OK;
 8007d3c:	2000      	movs	r0, #0
  }
}
 8007d3e:	4770      	bx	lr

08007d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d40:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8007d44:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d46:	6802      	ldr	r2, [r0, #0]
 8007d48:	6913      	ldr	r3, [r2, #16]
 8007d4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007d4e:	68c1      	ldr	r1, [r0, #12]
 8007d50:	430b      	orrs	r3, r1
 8007d52:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d54:	6883      	ldr	r3, [r0, #8]
 8007d56:	6902      	ldr	r2, [r0, #16]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	6942      	ldr	r2, [r0, #20]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	69c2      	ldr	r2, [r0, #28]
 8007d60:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8007d62:	6801      	ldr	r1, [r0, #0]
 8007d64:	68cb      	ldr	r3, [r1, #12]
 8007d66:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007d6a:	f023 030c 	bic.w	r3, r3, #12
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d72:	6802      	ldr	r2, [r0, #0]
 8007d74:	6953      	ldr	r3, [r2, #20]
 8007d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d7a:	6981      	ldr	r1, [r0, #24]
 8007d7c:	430b      	orrs	r3, r1
 8007d7e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d80:	69c3      	ldr	r3, [r0, #28]
 8007d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d86:	d03b      	beq.n	8007e00 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d88:	6803      	ldr	r3, [r0, #0]
 8007d8a:	4a71      	ldr	r2, [pc, #452]	; (8007f50 <UART_SetConfig+0x210>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	f000 80ab 	beq.w	8007ee8 <UART_SetConfig+0x1a8>
 8007d92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d96:	4293      	cmp	r3, r2
 8007d98:	f000 80a6 	beq.w	8007ee8 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d9c:	f7fe fee0 	bl	8006b60 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007da0:	f04f 0900 	mov.w	r9, #0
 8007da4:	1806      	adds	r6, r0, r0
 8007da6:	eb49 0709 	adc.w	r7, r9, r9
 8007daa:	eb16 0b00 	adds.w	fp, r6, r0
 8007dae:	eb47 0c09 	adc.w	ip, r7, r9
 8007db2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8007db6:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8007dba:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8007dbe:	4693      	mov	fp, r2
 8007dc0:	469c      	mov	ip, r3
 8007dc2:	6863      	ldr	r3, [r4, #4]
 8007dc4:	009a      	lsls	r2, r3, #2
 8007dc6:	0f9b      	lsrs	r3, r3, #30
 8007dc8:	eb10 000b 	adds.w	r0, r0, fp
 8007dcc:	eb49 010c 	adc.w	r1, r9, ip
 8007dd0:	f7f8 fe9c 	bl	8000b0c <__aeabi_uldivmod>
 8007dd4:	4d5f      	ldr	r5, [pc, #380]	; (8007f54 <UART_SetConfig+0x214>)
 8007dd6:	fba5 3200 	umull	r3, r2, r5, r0
 8007dda:	0951      	lsrs	r1, r2, #5
 8007ddc:	2264      	movs	r2, #100	; 0x64
 8007dde:	fb02 0211 	mls	r2, r2, r1, r0
 8007de2:	0113      	lsls	r3, r2, #4
 8007de4:	3332      	adds	r3, #50	; 0x32
 8007de6:	fba5 2303 	umull	r2, r3, r5, r3
 8007dea:	095b      	lsrs	r3, r3, #5
 8007dec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007df0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007df4:	f003 030f 	and.w	r3, r3, #15
 8007df8:	6821      	ldr	r1, [r4, #0]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	608b      	str	r3, [r1, #8]
    }
  }
}
 8007dfe:	e0a4      	b.n	8007f4a <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e00:	6803      	ldr	r3, [r0, #0]
 8007e02:	4a53      	ldr	r2, [pc, #332]	; (8007f50 <UART_SetConfig+0x210>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d039      	beq.n	8007e7c <UART_SetConfig+0x13c>
 8007e08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d035      	beq.n	8007e7c <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e10:	f7fe fea6 	bl	8006b60 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e14:	4683      	mov	fp, r0
 8007e16:	f04f 0c00 	mov.w	ip, #0
 8007e1a:	1806      	adds	r6, r0, r0
 8007e1c:	eb4c 070c 	adc.w	r7, ip, ip
 8007e20:	eb16 0800 	adds.w	r8, r6, r0
 8007e24:	eb47 090c 	adc.w	r9, r7, ip
 8007e28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e34:	4690      	mov	r8, r2
 8007e36:	4699      	mov	r9, r3
 8007e38:	6862      	ldr	r2, [r4, #4]
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	1892      	adds	r2, r2, r2
 8007e3e:	eb41 0301 	adc.w	r3, r1, r1
 8007e42:	eb1b 0008 	adds.w	r0, fp, r8
 8007e46:	eb4c 0109 	adc.w	r1, ip, r9
 8007e4a:	f7f8 fe5f 	bl	8000b0c <__aeabi_uldivmod>
 8007e4e:	4d41      	ldr	r5, [pc, #260]	; (8007f54 <UART_SetConfig+0x214>)
 8007e50:	fba5 3200 	umull	r3, r2, r5, r0
 8007e54:	0951      	lsrs	r1, r2, #5
 8007e56:	2264      	movs	r2, #100	; 0x64
 8007e58:	fb02 0211 	mls	r2, r2, r1, r0
 8007e5c:	00d3      	lsls	r3, r2, #3
 8007e5e:	3332      	adds	r3, #50	; 0x32
 8007e60:	fba5 2303 	umull	r2, r3, r5, r3
 8007e64:	095b      	lsrs	r3, r3, #5
 8007e66:	005a      	lsls	r2, r3, #1
 8007e68:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8007e6c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007e70:	f003 0307 	and.w	r3, r3, #7
 8007e74:	6821      	ldr	r1, [r4, #0]
 8007e76:	4413      	add	r3, r2
 8007e78:	608b      	str	r3, [r1, #8]
 8007e7a:	e066      	b.n	8007f4a <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e7c:	f7fe fe80 	bl	8006b80 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e80:	4680      	mov	r8, r0
 8007e82:	f04f 0900 	mov.w	r9, #0
 8007e86:	1806      	adds	r6, r0, r0
 8007e88:	eb49 0709 	adc.w	r7, r9, r9
 8007e8c:	eb16 0b00 	adds.w	fp, r6, r0
 8007e90:	eb47 0c09 	adc.w	ip, r7, r9
 8007e94:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8007e98:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8007e9c:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8007ea0:	4693      	mov	fp, r2
 8007ea2:	469c      	mov	ip, r3
 8007ea4:	6862      	ldr	r2, [r4, #4]
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	1892      	adds	r2, r2, r2
 8007eaa:	eb41 0301 	adc.w	r3, r1, r1
 8007eae:	eb18 000b 	adds.w	r0, r8, fp
 8007eb2:	eb49 010c 	adc.w	r1, r9, ip
 8007eb6:	f7f8 fe29 	bl	8000b0c <__aeabi_uldivmod>
 8007eba:	4d26      	ldr	r5, [pc, #152]	; (8007f54 <UART_SetConfig+0x214>)
 8007ebc:	fba5 3200 	umull	r3, r2, r5, r0
 8007ec0:	0951      	lsrs	r1, r2, #5
 8007ec2:	2264      	movs	r2, #100	; 0x64
 8007ec4:	fb02 0211 	mls	r2, r2, r1, r0
 8007ec8:	00d3      	lsls	r3, r2, #3
 8007eca:	3332      	adds	r3, #50	; 0x32
 8007ecc:	fba5 2303 	umull	r2, r3, r5, r3
 8007ed0:	095b      	lsrs	r3, r3, #5
 8007ed2:	005a      	lsls	r2, r3, #1
 8007ed4:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8007ed8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	6821      	ldr	r1, [r4, #0]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	608b      	str	r3, [r1, #8]
 8007ee6:	e030      	b.n	8007f4a <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ee8:	f7fe fe4a 	bl	8006b80 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007eec:	f04f 0900 	mov.w	r9, #0
 8007ef0:	1806      	adds	r6, r0, r0
 8007ef2:	eb49 0709 	adc.w	r7, r9, r9
 8007ef6:	eb16 0b00 	adds.w	fp, r6, r0
 8007efa:	eb47 0c09 	adc.w	ip, r7, r9
 8007efe:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8007f02:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8007f06:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8007f0a:	4693      	mov	fp, r2
 8007f0c:	469c      	mov	ip, r3
 8007f0e:	6863      	ldr	r3, [r4, #4]
 8007f10:	009a      	lsls	r2, r3, #2
 8007f12:	0f9b      	lsrs	r3, r3, #30
 8007f14:	eb10 000b 	adds.w	r0, r0, fp
 8007f18:	eb49 010c 	adc.w	r1, r9, ip
 8007f1c:	f7f8 fdf6 	bl	8000b0c <__aeabi_uldivmod>
 8007f20:	4d0c      	ldr	r5, [pc, #48]	; (8007f54 <UART_SetConfig+0x214>)
 8007f22:	fba5 3200 	umull	r3, r2, r5, r0
 8007f26:	0951      	lsrs	r1, r2, #5
 8007f28:	2264      	movs	r2, #100	; 0x64
 8007f2a:	fb02 0211 	mls	r2, r2, r1, r0
 8007f2e:	0113      	lsls	r3, r2, #4
 8007f30:	3332      	adds	r3, #50	; 0x32
 8007f32:	fba5 2303 	umull	r2, r3, r5, r3
 8007f36:	095b      	lsrs	r3, r3, #5
 8007f38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f3c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007f40:	f003 030f 	and.w	r3, r3, #15
 8007f44:	6821      	ldr	r1, [r4, #0]
 8007f46:	4413      	add	r3, r2
 8007f48:	608b      	str	r3, [r1, #8]
}
 8007f4a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8007f4e:	bf00      	nop
 8007f50:	40011000 	.word	0x40011000
 8007f54:	51eb851f 	.word	0x51eb851f

08007f58 <UART_WaitOnFlagUntilTimeout>:
{
 8007f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	460f      	mov	r7, r1
 8007f60:	4616      	mov	r6, r2
 8007f62:	4698      	mov	r8, r3
 8007f64:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f66:	682b      	ldr	r3, [r5, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	ea37 0303 	bics.w	r3, r7, r3
 8007f6e:	bf0c      	ite	eq
 8007f70:	2301      	moveq	r3, #1
 8007f72:	2300      	movne	r3, #0
 8007f74:	42b3      	cmp	r3, r6
 8007f76:	d11d      	bne.n	8007fb4 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8007f78:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007f7c:	d0f3      	beq.n	8007f66 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f7e:	b12c      	cbz	r4, 8007f8c <UART_WaitOnFlagUntilTimeout+0x34>
 8007f80:	f7fc ff7c 	bl	8004e7c <HAL_GetTick>
 8007f84:	eba0 0008 	sub.w	r0, r0, r8
 8007f88:	42a0      	cmp	r0, r4
 8007f8a:	d9ec      	bls.n	8007f66 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f8c:	682a      	ldr	r2, [r5, #0]
 8007f8e:	68d3      	ldr	r3, [r2, #12]
 8007f90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f94:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f96:	682a      	ldr	r2, [r5, #0]
 8007f98:	6953      	ldr	r3, [r2, #20]
 8007f9a:	f023 0301 	bic.w	r3, r3, #1
 8007f9e:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007fa6:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8007faa:	2300      	movs	r3, #0
 8007fac:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8007fb0:	2003      	movs	r0, #3
 8007fb2:	e000      	b.n	8007fb6 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8007fb4:	2000      	movs	r0, #0
}
 8007fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007fba <HAL_UART_Init>:
  if (huart == NULL)
 8007fba:	b358      	cbz	r0, 8008014 <HAL_UART_Init+0x5a>
{
 8007fbc:	b510      	push	{r4, lr}
 8007fbe:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007fc0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007fc4:	b30b      	cbz	r3, 800800a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007fc6:	2324      	movs	r3, #36	; 0x24
 8007fc8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8007fcc:	6822      	ldr	r2, [r4, #0]
 8007fce:	68d3      	ldr	r3, [r2, #12]
 8007fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fd4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f7ff feb2 	bl	8007d40 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fdc:	6822      	ldr	r2, [r4, #0]
 8007fde:	6913      	ldr	r3, [r2, #16]
 8007fe0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007fe4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fe6:	6822      	ldr	r2, [r4, #0]
 8007fe8:	6953      	ldr	r3, [r2, #20]
 8007fea:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007fee:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8007ff0:	6822      	ldr	r2, [r4, #0]
 8007ff2:	68d3      	ldr	r3, [r2, #12]
 8007ff4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ff8:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007ffe:	2320      	movs	r3, #32
 8008000:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008004:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8008008:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800800a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800800e:	f7fc f9ad 	bl	800436c <HAL_UART_MspInit>
 8008012:	e7d8      	b.n	8007fc6 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8008014:	2001      	movs	r0, #1
}
 8008016:	4770      	bx	lr

08008018 <HAL_UART_Transmit>:
{
 8008018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800801c:	b083      	sub	sp, #12
 800801e:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008020:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b20      	cmp	r3, #32
 8008028:	d156      	bne.n	80080d8 <HAL_UART_Transmit+0xc0>
 800802a:	4604      	mov	r4, r0
 800802c:	460d      	mov	r5, r1
 800802e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8008030:	2900      	cmp	r1, #0
 8008032:	d056      	beq.n	80080e2 <HAL_UART_Transmit+0xca>
 8008034:	2a00      	cmp	r2, #0
 8008036:	d056      	beq.n	80080e6 <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 8008038:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800803c:	2b01      	cmp	r3, #1
 800803e:	d054      	beq.n	80080ea <HAL_UART_Transmit+0xd2>
 8008040:	2301      	movs	r3, #1
 8008042:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008046:	f04f 0900 	mov.w	r9, #0
 800804a:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800804e:	2321      	movs	r3, #33	; 0x21
 8008050:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8008054:	f7fc ff12 	bl	8004e7c <HAL_GetTick>
 8008058:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800805a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800805e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8008062:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8008066:	e010      	b.n	800808a <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008068:	9600      	str	r6, [sp, #0]
 800806a:	463b      	mov	r3, r7
 800806c:	2200      	movs	r2, #0
 800806e:	2180      	movs	r1, #128	; 0x80
 8008070:	4620      	mov	r0, r4
 8008072:	f7ff ff71 	bl	8007f58 <UART_WaitOnFlagUntilTimeout>
 8008076:	2800      	cmp	r0, #0
 8008078:	d139      	bne.n	80080ee <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800807a:	882b      	ldrh	r3, [r5, #0]
 800807c:	6822      	ldr	r2, [r4, #0]
 800807e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008082:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008084:	6923      	ldr	r3, [r4, #16]
 8008086:	b9c3      	cbnz	r3, 80080ba <HAL_UART_Transmit+0xa2>
          pData += 2U;
 8008088:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 800808a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800808c:	b29b      	uxth	r3, r3
 800808e:	b1b3      	cbz	r3, 80080be <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8008090:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008092:	3b01      	subs	r3, #1
 8008094:	b29b      	uxth	r3, r3
 8008096:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008098:	68a3      	ldr	r3, [r4, #8]
 800809a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800809e:	d0e3      	beq.n	8008068 <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080a0:	9600      	str	r6, [sp, #0]
 80080a2:	463b      	mov	r3, r7
 80080a4:	2200      	movs	r2, #0
 80080a6:	2180      	movs	r1, #128	; 0x80
 80080a8:	4620      	mov	r0, r4
 80080aa:	f7ff ff55 	bl	8007f58 <UART_WaitOnFlagUntilTimeout>
 80080ae:	bb00      	cbnz	r0, 80080f2 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80080b0:	782a      	ldrb	r2, [r5, #0]
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	605a      	str	r2, [r3, #4]
 80080b6:	3501      	adds	r5, #1
 80080b8:	e7e7      	b.n	800808a <HAL_UART_Transmit+0x72>
          pData += 1U;
 80080ba:	3501      	adds	r5, #1
 80080bc:	e7e5      	b.n	800808a <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080be:	9600      	str	r6, [sp, #0]
 80080c0:	463b      	mov	r3, r7
 80080c2:	2200      	movs	r2, #0
 80080c4:	2140      	movs	r1, #64	; 0x40
 80080c6:	4620      	mov	r0, r4
 80080c8:	f7ff ff46 	bl	8007f58 <UART_WaitOnFlagUntilTimeout>
 80080cc:	4603      	mov	r3, r0
 80080ce:	b990      	cbnz	r0, 80080f6 <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 80080d0:	2220      	movs	r2, #32
 80080d2:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    return HAL_OK;
 80080d6:	e000      	b.n	80080da <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80080d8:	2302      	movs	r3, #2
}
 80080da:	4618      	mov	r0, r3
 80080dc:	b003      	add	sp, #12
 80080de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e7f9      	b.n	80080da <HAL_UART_Transmit+0xc2>
 80080e6:	2301      	movs	r3, #1
 80080e8:	e7f7      	b.n	80080da <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 80080ea:	2302      	movs	r3, #2
 80080ec:	e7f5      	b.n	80080da <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e7f3      	b.n	80080da <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e7f1      	b.n	80080da <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e7ef      	b.n	80080da <HAL_UART_Transmit+0xc2>

080080fa <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80080fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b20      	cmp	r3, #32
 8008102:	d116      	bne.n	8008132 <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 8008104:	b1b9      	cbz	r1, 8008136 <HAL_UART_Transmit_IT+0x3c>
 8008106:	b1c2      	cbz	r2, 800813a <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8008108:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800810c:	2b01      	cmp	r3, #1
 800810e:	d016      	beq.n	800813e <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8008110:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8008112:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8008114:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008116:	2300      	movs	r3, #0
 8008118:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800811a:	2221      	movs	r2, #33	; 0x21
 800811c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8008120:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008124:	6801      	ldr	r1, [r0, #0]
 8008126:	68ca      	ldr	r2, [r1, #12]
 8008128:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800812c:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800812e:	4618      	mov	r0, r3
 8008130:	4770      	bx	lr
    return HAL_BUSY;
 8008132:	2002      	movs	r0, #2
 8008134:	4770      	bx	lr
      return HAL_ERROR;
 8008136:	2001      	movs	r0, #1
 8008138:	4770      	bx	lr
 800813a:	2001      	movs	r0, #1
 800813c:	4770      	bx	lr
    __HAL_LOCK(huart);
 800813e:	2002      	movs	r0, #2
}
 8008140:	4770      	bx	lr
	...

08008144 <HAL_UART_Receive_DMA>:
{
 8008144:	b530      	push	{r4, r5, lr}
 8008146:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8008148:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 800814c:	b2e4      	uxtb	r4, r4
 800814e:	2c20      	cmp	r4, #32
 8008150:	d13d      	bne.n	80081ce <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 8008152:	2900      	cmp	r1, #0
 8008154:	d03e      	beq.n	80081d4 <HAL_UART_Receive_DMA+0x90>
 8008156:	2a00      	cmp	r2, #0
 8008158:	d03e      	beq.n	80081d8 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 800815a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800815e:	2b01      	cmp	r3, #1
 8008160:	d03c      	beq.n	80081dc <HAL_UART_Receive_DMA+0x98>
 8008162:	4613      	mov	r3, r2
 8008164:	460a      	mov	r2, r1
 8008166:	4604      	mov	r4, r0
 8008168:	2101      	movs	r1, #1
 800816a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 800816e:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8008170:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008172:	2500      	movs	r5, #0
 8008174:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008176:	2122      	movs	r1, #34	; 0x22
 8008178:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800817c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800817e:	4818      	ldr	r0, [pc, #96]	; (80081e0 <HAL_UART_Receive_DMA+0x9c>)
 8008180:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008182:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008184:	4817      	ldr	r0, [pc, #92]	; (80081e4 <HAL_UART_Receive_DMA+0xa0>)
 8008186:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800818a:	4817      	ldr	r0, [pc, #92]	; (80081e8 <HAL_UART_Receive_DMA+0xa4>)
 800818c:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800818e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008190:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008192:	6821      	ldr	r1, [r4, #0]
 8008194:	3104      	adds	r1, #4
 8008196:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008198:	f7fd f962 	bl	8005460 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 800819c:	9501      	str	r5, [sp, #4]
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	9201      	str	r2, [sp, #4]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	9201      	str	r2, [sp, #4]
 80081a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 80081aa:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081ae:	68da      	ldr	r2, [r3, #12]
 80081b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081b4:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b6:	6822      	ldr	r2, [r4, #0]
 80081b8:	6953      	ldr	r3, [r2, #20]
 80081ba:	f043 0301 	orr.w	r3, r3, #1
 80081be:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081c0:	6822      	ldr	r2, [r4, #0]
 80081c2:	6953      	ldr	r3, [r2, #20]
 80081c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081c8:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80081ca:	4628      	mov	r0, r5
 80081cc:	e000      	b.n	80081d0 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 80081ce:	2002      	movs	r0, #2
}
 80081d0:	b003      	add	sp, #12
 80081d2:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 80081d4:	2001      	movs	r0, #1
 80081d6:	e7fb      	b.n	80081d0 <HAL_UART_Receive_DMA+0x8c>
 80081d8:	2001      	movs	r0, #1
 80081da:	e7f9      	b.n	80081d0 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 80081dc:	2002      	movs	r0, #2
 80081de:	e7f7      	b.n	80081d0 <HAL_UART_Receive_DMA+0x8c>
 80081e0:	08008255 	.word	0x08008255
 80081e4:	08008331 	.word	0x08008331
 80081e8:	0800833d 	.word	0x0800833d

080081ec <HAL_UART_AbortTransmit>:
{
 80081ec:	b510      	push	{r4, lr}
 80081ee:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80081f0:	6802      	ldr	r2, [r0, #0]
 80081f2:	68d3      	ldr	r3, [r2, #12]
 80081f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80081f8:	60d3      	str	r3, [r2, #12]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80081fa:	6803      	ldr	r3, [r0, #0]
 80081fc:	695a      	ldr	r2, [r3, #20]
 80081fe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008202:	d00b      	beq.n	800821c <HAL_UART_AbortTransmit+0x30>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008204:	695a      	ldr	r2, [r3, #20]
 8008206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800820a:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 800820c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800820e:	b12b      	cbz	r3, 800821c <HAL_UART_AbortTransmit+0x30>
      huart->hdmatx->XferAbortCallback = NULL;
 8008210:	2200      	movs	r2, #0
 8008212:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008214:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008216:	f7fd f958 	bl	80054ca <HAL_DMA_Abort>
 800821a:	b928      	cbnz	r0, 8008228 <HAL_UART_AbortTransmit+0x3c>
  huart->TxXferCount = 0x00U;
 800821c:	2000      	movs	r0, #0
 800821e:	84e0      	strh	r0, [r4, #38]	; 0x26
  huart->gState = HAL_UART_STATE_READY;
 8008220:	2320      	movs	r3, #32
 8008222:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8008226:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008228:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800822a:	f7fd fa99 	bl	8005760 <HAL_DMA_GetError>
 800822e:	2820      	cmp	r0, #32
 8008230:	d1f4      	bne.n	800821c <HAL_UART_AbortTransmit+0x30>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008232:	2310      	movs	r3, #16
 8008234:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8008236:	2003      	movs	r0, #3
 8008238:	e7f5      	b.n	8008226 <HAL_UART_AbortTransmit+0x3a>

0800823a <UART_EndTransmit_IT>:
{
 800823a:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800823c:	6801      	ldr	r1, [r0, #0]
 800823e:	68cb      	ldr	r3, [r1, #12]
 8008240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008244:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008246:	2320      	movs	r3, #32
 8008248:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800824c:	f7fb fb64 	bl	8003918 <HAL_UART_TxCpltCallback>
}
 8008250:	2000      	movs	r0, #0
 8008252:	bd08      	pop	{r3, pc}

08008254 <UART_DMAReceiveCplt>:
{
 8008254:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008256:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008258:	6802      	ldr	r2, [r0, #0]
 800825a:	6812      	ldr	r2, [r2, #0]
 800825c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008260:	d113      	bne.n	800828a <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 8008262:	2200      	movs	r2, #0
 8008264:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008266:	6819      	ldr	r1, [r3, #0]
 8008268:	68ca      	ldr	r2, [r1, #12]
 800826a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800826e:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008270:	6819      	ldr	r1, [r3, #0]
 8008272:	694a      	ldr	r2, [r1, #20]
 8008274:	f022 0201 	bic.w	r2, r2, #1
 8008278:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800827a:	6819      	ldr	r1, [r3, #0]
 800827c:	694a      	ldr	r2, [r1, #20]
 800827e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008282:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8008284:	2220      	movs	r2, #32
 8008286:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 800828a:	4618      	mov	r0, r3
 800828c:	f7fb fb43 	bl	8003916 <HAL_UART_RxCpltCallback>
}
 8008290:	bd08      	pop	{r3, pc}

08008292 <UART_Receive_IT>:
{
 8008292:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008294:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b22      	cmp	r3, #34	; 0x22
 800829c:	d145      	bne.n	800832a <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800829e:	6883      	ldr	r3, [r0, #8]
 80082a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a4:	d00e      	beq.n	80082c4 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80082a6:	6903      	ldr	r3, [r0, #16]
 80082a8:	bb03      	cbnz	r3, 80082ec <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082aa:	6803      	ldr	r3, [r0, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80082b0:	1c59      	adds	r1, r3, #1
 80082b2:	6281      	str	r1, [r0, #40]	; 0x28
 80082b4:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 80082b6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80082b8:	3b01      	subs	r3, #1
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80082be:	b1f3      	cbz	r3, 80082fe <UART_Receive_IT+0x6c>
    return HAL_OK;
 80082c0:	2000      	movs	r0, #0
 80082c2:	e033      	b.n	800832c <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80082c4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 80082c6:	6903      	ldr	r3, [r0, #16]
 80082c8:	b943      	cbnz	r3, 80082dc <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082ca:	6803      	ldr	r3, [r0, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d2:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 80082d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80082d6:	3302      	adds	r3, #2
 80082d8:	6283      	str	r3, [r0, #40]	; 0x28
 80082da:	e7ec      	b.n	80082b6 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80082dc:	6803      	ldr	r3, [r0, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 80082e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80082e6:	3301      	adds	r3, #1
 80082e8:	6283      	str	r3, [r0, #40]	; 0x28
 80082ea:	e7e4      	b.n	80082b6 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80082ec:	6803      	ldr	r3, [r0, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80082f2:	1c51      	adds	r1, r2, #1
 80082f4:	6281      	str	r1, [r0, #40]	; 0x28
 80082f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082fa:	7013      	strb	r3, [r2, #0]
 80082fc:	e7db      	b.n	80082b6 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80082fe:	6802      	ldr	r2, [r0, #0]
 8008300:	68d3      	ldr	r3, [r2, #12]
 8008302:	f023 0320 	bic.w	r3, r3, #32
 8008306:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008308:	6802      	ldr	r2, [r0, #0]
 800830a:	68d3      	ldr	r3, [r2, #12]
 800830c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008310:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008312:	6802      	ldr	r2, [r0, #0]
 8008314:	6953      	ldr	r3, [r2, #20]
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800831c:	2320      	movs	r3, #32
 800831e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8008322:	f7fb faf8 	bl	8003916 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8008326:	2000      	movs	r0, #0
 8008328:	e000      	b.n	800832c <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 800832a:	2002      	movs	r0, #2
}
 800832c:	bd08      	pop	{r3, pc}

0800832e <HAL_UART_RxHalfCpltCallback>:
}
 800832e:	4770      	bx	lr

08008330 <UART_DMARxHalfCplt>:
{
 8008330:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8008332:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008334:	f7ff fffb 	bl	800832e <HAL_UART_RxHalfCpltCallback>
}
 8008338:	bd08      	pop	{r3, pc}

0800833a <HAL_UART_ErrorCallback>:
}
 800833a:	4770      	bx	lr

0800833c <UART_DMAError>:
{
 800833c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800833e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008344:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b21      	cmp	r3, #33	; 0x21
 800834c:	d010      	beq.n	8008370 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	695a      	ldr	r2, [r3, #20]
 8008352:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008356:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b22      	cmp	r3, #34	; 0x22
 800835e:	d011      	beq.n	8008384 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008360:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008362:	f043 0310 	orr.w	r3, r3, #16
 8008366:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8008368:	4620      	mov	r0, r4
 800836a:	f7ff ffe6 	bl	800833a <HAL_UART_ErrorCallback>
}
 800836e:	bd10      	pop	{r4, pc}
 8008370:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008374:	2a00      	cmp	r2, #0
 8008376:	d0ea      	beq.n	800834e <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8008378:	2300      	movs	r3, #0
 800837a:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800837c:	4620      	mov	r0, r4
 800837e:	f7ff fc94 	bl	8007caa <UART_EndTxTransfer>
 8008382:	e7e4      	b.n	800834e <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008384:	2a00      	cmp	r2, #0
 8008386:	d0eb      	beq.n	8008360 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8008388:	2300      	movs	r3, #0
 800838a:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800838c:	4620      	mov	r0, r4
 800838e:	f7ff fc95 	bl	8007cbc <UART_EndRxTransfer>
 8008392:	e7e5      	b.n	8008360 <UART_DMAError+0x24>

08008394 <HAL_UART_IRQHandler>:
{
 8008394:	b510      	push	{r4, lr}
 8008396:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008398:	6802      	ldr	r2, [r0, #0]
 800839a:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800839c:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800839e:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 80083a0:	f013 000f 	ands.w	r0, r3, #15
 80083a4:	d105      	bne.n	80083b2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083a6:	f013 0f20 	tst.w	r3, #32
 80083aa:	d002      	beq.n	80083b2 <HAL_UART_IRQHandler+0x1e>
 80083ac:	f011 0f20 	tst.w	r1, #32
 80083b0:	d156      	bne.n	8008460 <HAL_UART_IRQHandler+0xcc>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d06a      	beq.n	800848c <HAL_UART_IRQHandler+0xf8>
 80083b6:	f012 0201 	ands.w	r2, r2, #1
 80083ba:	d102      	bne.n	80083c2 <HAL_UART_IRQHandler+0x2e>
 80083bc:	f411 7f90 	tst.w	r1, #288	; 0x120
 80083c0:	d064      	beq.n	800848c <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80083c2:	f013 0f01 	tst.w	r3, #1
 80083c6:	d006      	beq.n	80083d6 <HAL_UART_IRQHandler+0x42>
 80083c8:	f411 7f80 	tst.w	r1, #256	; 0x100
 80083cc:	d003      	beq.n	80083d6 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80083d0:	f040 0001 	orr.w	r0, r0, #1
 80083d4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083d6:	f013 0f04 	tst.w	r3, #4
 80083da:	d004      	beq.n	80083e6 <HAL_UART_IRQHandler+0x52>
 80083dc:	b11a      	cbz	r2, 80083e6 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80083e0:	f040 0002 	orr.w	r0, r0, #2
 80083e4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083e6:	f013 0f02 	tst.w	r3, #2
 80083ea:	d004      	beq.n	80083f6 <HAL_UART_IRQHandler+0x62>
 80083ec:	b11a      	cbz	r2, 80083f6 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80083f0:	f040 0004 	orr.w	r0, r0, #4
 80083f4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80083f6:	f013 0f08 	tst.w	r3, #8
 80083fa:	d007      	beq.n	800840c <HAL_UART_IRQHandler+0x78>
 80083fc:	f011 0f20 	tst.w	r1, #32
 8008400:	d100      	bne.n	8008404 <HAL_UART_IRQHandler+0x70>
 8008402:	b11a      	cbz	r2, 800840c <HAL_UART_IRQHandler+0x78>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008404:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008406:	f042 0208 	orr.w	r2, r2, #8
 800840a:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800840c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800840e:	2a00      	cmp	r2, #0
 8008410:	d048      	beq.n	80084a4 <HAL_UART_IRQHandler+0x110>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008412:	f013 0f20 	tst.w	r3, #32
 8008416:	d002      	beq.n	800841e <HAL_UART_IRQHandler+0x8a>
 8008418:	f011 0f20 	tst.w	r1, #32
 800841c:	d124      	bne.n	8008468 <HAL_UART_IRQHandler+0xd4>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008426:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008428:	f012 0f08 	tst.w	r2, #8
 800842c:	d100      	bne.n	8008430 <HAL_UART_IRQHandler+0x9c>
 800842e:	b33b      	cbz	r3, 8008480 <HAL_UART_IRQHandler+0xec>
        UART_EndRxTransfer(huart);
 8008430:	4620      	mov	r0, r4
 8008432:	f7ff fc43 	bl	8007cbc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	695a      	ldr	r2, [r3, #20]
 800843a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800843e:	d01b      	beq.n	8008478 <HAL_UART_IRQHandler+0xe4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008440:	695a      	ldr	r2, [r3, #20]
 8008442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008446:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8008448:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800844a:	b18b      	cbz	r3, 8008470 <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800844c:	4a1a      	ldr	r2, [pc, #104]	; (80084b8 <HAL_UART_IRQHandler+0x124>)
 800844e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008450:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008452:	f7fd f884 	bl	800555e <HAL_DMA_Abort_IT>
 8008456:	b328      	cbz	r0, 80084a4 <HAL_UART_IRQHandler+0x110>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008458:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800845a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800845c:	4798      	blx	r3
 800845e:	e021      	b.n	80084a4 <HAL_UART_IRQHandler+0x110>
      UART_Receive_IT(huart);
 8008460:	4620      	mov	r0, r4
 8008462:	f7ff ff16 	bl	8008292 <UART_Receive_IT>
      return;
 8008466:	e01d      	b.n	80084a4 <HAL_UART_IRQHandler+0x110>
        UART_Receive_IT(huart);
 8008468:	4620      	mov	r0, r4
 800846a:	f7ff ff12 	bl	8008292 <UART_Receive_IT>
 800846e:	e7d6      	b.n	800841e <HAL_UART_IRQHandler+0x8a>
            HAL_UART_ErrorCallback(huart);
 8008470:	4620      	mov	r0, r4
 8008472:	f7ff ff62 	bl	800833a <HAL_UART_ErrorCallback>
 8008476:	e015      	b.n	80084a4 <HAL_UART_IRQHandler+0x110>
          HAL_UART_ErrorCallback(huart);
 8008478:	4620      	mov	r0, r4
 800847a:	f7ff ff5e 	bl	800833a <HAL_UART_ErrorCallback>
 800847e:	e011      	b.n	80084a4 <HAL_UART_IRQHandler+0x110>
        HAL_UART_ErrorCallback(huart);
 8008480:	4620      	mov	r0, r4
 8008482:	f7ff ff5a 	bl	800833a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008486:	2300      	movs	r3, #0
 8008488:	63e3      	str	r3, [r4, #60]	; 0x3c
 800848a:	e00b      	b.n	80084a4 <HAL_UART_IRQHandler+0x110>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800848c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008490:	d002      	beq.n	8008498 <HAL_UART_IRQHandler+0x104>
 8008492:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008496:	d106      	bne.n	80084a6 <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008498:	f013 0f40 	tst.w	r3, #64	; 0x40
 800849c:	d002      	beq.n	80084a4 <HAL_UART_IRQHandler+0x110>
 800849e:	f011 0f40 	tst.w	r1, #64	; 0x40
 80084a2:	d104      	bne.n	80084ae <HAL_UART_IRQHandler+0x11a>
}
 80084a4:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 80084a6:	4620      	mov	r0, r4
 80084a8:	f7ff fc16 	bl	8007cd8 <UART_Transmit_IT>
    return;
 80084ac:	e7fa      	b.n	80084a4 <HAL_UART_IRQHandler+0x110>
    UART_EndTransmit_IT(huart);
 80084ae:	4620      	mov	r0, r4
 80084b0:	f7ff fec3 	bl	800823a <UART_EndTransmit_IT>
    return;
 80084b4:	e7f6      	b.n	80084a4 <HAL_UART_IRQHandler+0x110>
 80084b6:	bf00      	nop
 80084b8:	080084bd 	.word	0x080084bd

080084bc <UART_DMAAbortOnError>:
{
 80084bc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084be:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80084c4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80084c6:	f7ff ff38 	bl	800833a <HAL_UART_ErrorCallback>
}
 80084ca:	bd08      	pop	{r3, pc}

080084cc <HAL_UART_AbortReceiveCpltCallback>:
}
 80084cc:	4770      	bx	lr
	...

080084d0 <HAL_UART_AbortReceive_IT>:
{
 80084d0:	b510      	push	{r4, lr}
 80084d2:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084d4:	6802      	ldr	r2, [r0, #0]
 80084d6:	68d3      	ldr	r3, [r2, #12]
 80084d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084dc:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084de:	6802      	ldr	r2, [r0, #0]
 80084e0:	6953      	ldr	r3, [r2, #20]
 80084e2:	f023 0301 	bic.w	r3, r3, #1
 80084e6:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e8:	6803      	ldr	r3, [r0, #0]
 80084ea:	695a      	ldr	r2, [r3, #20]
 80084ec:	f012 0f40 	tst.w	r2, #64	; 0x40
 80084f0:	d018      	beq.n	8008524 <HAL_UART_AbortReceive_IT+0x54>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084f2:	695a      	ldr	r2, [r3, #20]
 80084f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084f8:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 80084fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80084fc:	b153      	cbz	r3, 8008514 <HAL_UART_AbortReceive_IT+0x44>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80084fe:	4a0d      	ldr	r2, [pc, #52]	; (8008534 <HAL_UART_AbortReceive_IT+0x64>)
 8008500:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008502:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8008504:	f7fd f82b 	bl	800555e <HAL_DMA_Abort_IT>
 8008508:	b110      	cbz	r0, 8008510 <HAL_UART_AbortReceive_IT+0x40>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800850a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800850c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800850e:	4798      	blx	r3
}
 8008510:	2000      	movs	r0, #0
 8008512:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0x00U;
 8008514:	2300      	movs	r3, #0
 8008516:	85c3      	strh	r3, [r0, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 8008518:	2320      	movs	r3, #32
 800851a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_AbortReceiveCpltCallback(huart);
 800851e:	f7ff ffd5 	bl	80084cc <HAL_UART_AbortReceiveCpltCallback>
 8008522:	e7f5      	b.n	8008510 <HAL_UART_AbortReceive_IT+0x40>
    huart->RxXferCount = 0x00U;
 8008524:	2300      	movs	r3, #0
 8008526:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 8008528:	2320      	movs	r3, #32
 800852a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 800852e:	f7ff ffcd 	bl	80084cc <HAL_UART_AbortReceiveCpltCallback>
 8008532:	e7ed      	b.n	8008510 <HAL_UART_AbortReceive_IT+0x40>
 8008534:	08008539 	.word	0x08008539

08008538 <UART_DMARxOnlyAbortCallback>:
{
 8008538:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800853a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800853c:	2300      	movs	r3, #0
 800853e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8008540:	2320      	movs	r3, #32
 8008542:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 8008546:	f7ff ffc1 	bl	80084cc <HAL_UART_AbortReceiveCpltCallback>
}
 800854a:	bd08      	pop	{r3, pc}

0800854c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800854c:	2884      	cmp	r0, #132	; 0x84
 800854e:	d001      	beq.n	8008554 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8008550:	3003      	adds	r0, #3
 8008552:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008554:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8008556:	4770      	bx	lr

08008558 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008558:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800855a:	f000 ff25 	bl	80093a8 <vTaskStartScheduler>
  
  return osOK;
}
 800855e:	2000      	movs	r0, #0
 8008560:	bd08      	pop	{r3, pc}

08008562 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008562:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008566:	b087      	sub	sp, #28
 8008568:	4604      	mov	r4, r0
 800856a:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800856c:	6945      	ldr	r5, [r0, #20]
 800856e:	b1a5      	cbz	r5, 800859a <osThreadCreate+0x38>
 8008570:	6986      	ldr	r6, [r0, #24]
 8008572:	b196      	cbz	r6, 800859a <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008574:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8008578:	f8d0 9000 	ldr.w	r9, [r0]
 800857c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8008580:	f7ff ffe4 	bl	800854c <makeFreeRtosPriority>
 8008584:	6922      	ldr	r2, [r4, #16]
 8008586:	9602      	str	r6, [sp, #8]
 8008588:	9501      	str	r5, [sp, #4]
 800858a:	9000      	str	r0, [sp, #0]
 800858c:	463b      	mov	r3, r7
 800858e:	4649      	mov	r1, r9
 8008590:	4640      	mov	r0, r8
 8008592:	f000 fe9b 	bl	80092cc <xTaskCreateStatic>
 8008596:	9005      	str	r0, [sp, #20]
 8008598:	e013      	b.n	80085c2 <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800859a:	6865      	ldr	r5, [r4, #4]
 800859c:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800859e:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085a2:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80085a6:	f7ff ffd1 	bl	800854c <makeFreeRtosPriority>
 80085aa:	ab05      	add	r3, sp, #20
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	9000      	str	r0, [sp, #0]
 80085b0:	463b      	mov	r3, r7
 80085b2:	fa1f f288 	uxth.w	r2, r8
 80085b6:	4631      	mov	r1, r6
 80085b8:	4628      	mov	r0, r5
 80085ba:	f000 fec1 	bl	8009340 <xTaskCreate>
 80085be:	2801      	cmp	r0, #1
 80085c0:	d103      	bne.n	80085ca <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80085c2:	9805      	ldr	r0, [sp, #20]
}
 80085c4:	b007      	add	sp, #28
 80085c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 80085ca:	2000      	movs	r0, #0
 80085cc:	e7fa      	b.n	80085c4 <osThreadCreate+0x62>

080085ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80085ce:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80085d0:	4603      	mov	r3, r0
 80085d2:	b900      	cbnz	r0, 80085d6 <osDelay+0x8>
 80085d4:	2301      	movs	r3, #1
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 f89a 	bl	8009710 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80085dc:	2000      	movs	r0, #0
 80085de:	bd08      	pop	{r3, pc}

080085e0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80085e0:	b510      	push	{r4, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80085e6:	6844      	ldr	r4, [r0, #4]
 80085e8:	b16c      	cbz	r4, 8008606 <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 80085ea:	2901      	cmp	r1, #1
 80085ec:	d009      	beq.n	8008602 <osTimerCreate+0x22>
 80085ee:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80085f0:	6801      	ldr	r1, [r0, #0]
    return xTimerCreateStatic((const char *)"",
 80085f2:	9401      	str	r4, [sp, #4]
 80085f4:	9100      	str	r1, [sp, #0]
 80085f6:	2101      	movs	r1, #1
 80085f8:	4809      	ldr	r0, [pc, #36]	; (8008620 <osTimerCreate+0x40>)
 80085fa:	f001 fd7b 	bl	800a0f4 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 80085fe:	b002      	add	sp, #8
 8008600:	bd10      	pop	{r4, pc}
    return xTimerCreateStatic((const char *)"",
 8008602:	2201      	movs	r2, #1
 8008604:	e7f4      	b.n	80085f0 <osTimerCreate+0x10>
    return xTimerCreate((const char *)"",
 8008606:	2901      	cmp	r1, #1
 8008608:	d007      	beq.n	800861a <osTimerCreate+0x3a>
 800860a:	2200      	movs	r2, #0
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800860c:	6801      	ldr	r1, [r0, #0]
    return xTimerCreate((const char *)"",
 800860e:	9100      	str	r1, [sp, #0]
 8008610:	2101      	movs	r1, #1
 8008612:	4803      	ldr	r0, [pc, #12]	; (8008620 <osTimerCreate+0x40>)
 8008614:	f001 fd52 	bl	800a0bc <xTimerCreate>
 8008618:	e7f1      	b.n	80085fe <osTimerCreate+0x1e>
 800861a:	2201      	movs	r2, #1
 800861c:	e7f6      	b.n	800860c <osTimerCreate+0x2c>
 800861e:	bf00      	nop
 8008620:	0800b558 	.word	0x0800b558

08008624 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008624:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008626:	6841      	ldr	r1, [r0, #4]
 8008628:	b119      	cbz	r1, 8008632 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800862a:	2001      	movs	r0, #1
 800862c:	f000 fa8f 	bl	8008b4e <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008630:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8008632:	2001      	movs	r0, #1
 8008634:	f000 fa80 	bl	8008b38 <xQueueCreateMutex>
 8008638:	e7fa      	b.n	8008630 <osMutexCreate+0xc>

0800863a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800863a:	f100 0308 	add.w	r3, r0, #8
 800863e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008644:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008646:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008648:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800864e:	4770      	bx	lr

08008650 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008650:	2300      	movs	r3, #0
 8008652:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008654:	4770      	bx	lr

08008656 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008656:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008658:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008662:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008664:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008666:	6803      	ldr	r3, [r0, #0]
 8008668:	3301      	adds	r3, #1
 800866a:	6003      	str	r3, [r0, #0]
}
 800866c:	4770      	bx	lr

0800866e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800866e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008670:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008672:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008676:	d002      	beq.n	800867e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008678:	f100 0208 	add.w	r2, r0, #8
 800867c:	e002      	b.n	8008684 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 800867e:	6902      	ldr	r2, [r0, #16]
 8008680:	e004      	b.n	800868c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008682:	461a      	mov	r2, r3
 8008684:	6853      	ldr	r3, [r2, #4]
 8008686:	681c      	ldr	r4, [r3, #0]
 8008688:	42ac      	cmp	r4, r5
 800868a:	d9fa      	bls.n	8008682 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800868c:	6853      	ldr	r3, [r2, #4]
 800868e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008690:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008692:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008694:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008696:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008698:	6803      	ldr	r3, [r0, #0]
 800869a:	3301      	adds	r3, #1
 800869c:	6003      	str	r3, [r0, #0]
}
 800869e:	bc30      	pop	{r4, r5}
 80086a0:	4770      	bx	lr

080086a2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086a2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086a4:	6842      	ldr	r2, [r0, #4]
 80086a6:	6881      	ldr	r1, [r0, #8]
 80086a8:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086aa:	6882      	ldr	r2, [r0, #8]
 80086ac:	6841      	ldr	r1, [r0, #4]
 80086ae:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	4282      	cmp	r2, r0
 80086b4:	d006      	beq.n	80086c4 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086b6:	2200      	movs	r2, #0
 80086b8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	3a01      	subs	r2, #1
 80086be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086c0:	6818      	ldr	r0, [r3, #0]
}
 80086c2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086c4:	6882      	ldr	r2, [r0, #8]
 80086c6:	605a      	str	r2, [r3, #4]
 80086c8:	e7f5      	b.n	80086b6 <uxListRemove+0x14>

080086ca <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80086ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80086cc:	b123      	cbz	r3, 80086d8 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80086ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	f1c0 0007 	rsb	r0, r0, #7
 80086d6:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80086d8:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 80086da:	4770      	bx	lr

080086dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086dc:	b510      	push	{r4, lr}
 80086de:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086e0:	f001 ff20 	bl	800a524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80086e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d004      	beq.n	80086f6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80086ec:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80086ee:	f001 ff3b 	bl	800a568 <vPortExitCritical>

	return xReturn;
}
 80086f2:	4620      	mov	r0, r4
 80086f4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80086f6:	2401      	movs	r4, #1
 80086f8:	e7f9      	b.n	80086ee <prvIsQueueFull+0x12>

080086fa <prvIsQueueEmpty>:
{
 80086fa:	b510      	push	{r4, lr}
 80086fc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80086fe:	f001 ff11 	bl	800a524 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008702:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008704:	b123      	cbz	r3, 8008710 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8008706:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008708:	f001 ff2e 	bl	800a568 <vPortExitCritical>
}
 800870c:	4620      	mov	r0, r4
 800870e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008710:	2401      	movs	r4, #1
 8008712:	e7f9      	b.n	8008708 <prvIsQueueEmpty+0xe>

08008714 <prvCopyDataToQueue>:
{
 8008714:	b570      	push	{r4, r5, r6, lr}
 8008716:	4604      	mov	r4, r0
 8008718:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800871a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800871c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800871e:	b95a      	cbnz	r2, 8008738 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008720:	6803      	ldr	r3, [r0, #0]
 8008722:	b11b      	cbz	r3, 800872c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8008724:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008726:	3501      	adds	r5, #1
 8008728:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800872a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800872c:	6880      	ldr	r0, [r0, #8]
 800872e:	f001 f9b1 	bl	8009a94 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008732:	2300      	movs	r3, #0
 8008734:	60a3      	str	r3, [r4, #8]
 8008736:	e7f6      	b.n	8008726 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008738:	b96e      	cbnz	r6, 8008756 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800873a:	6840      	ldr	r0, [r0, #4]
 800873c:	f002 fa48 	bl	800abd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008740:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008742:	6863      	ldr	r3, [r4, #4]
 8008744:	4413      	add	r3, r2
 8008746:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008748:	68a2      	ldr	r2, [r4, #8]
 800874a:	4293      	cmp	r3, r2
 800874c:	d319      	bcc.n	8008782 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800874e:	6823      	ldr	r3, [r4, #0]
 8008750:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8008752:	2000      	movs	r0, #0
 8008754:	e7e7      	b.n	8008726 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008756:	68c0      	ldr	r0, [r0, #12]
 8008758:	f002 fa3a 	bl	800abd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800875c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800875e:	4252      	negs	r2, r2
 8008760:	68e3      	ldr	r3, [r4, #12]
 8008762:	4413      	add	r3, r2
 8008764:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008766:	6821      	ldr	r1, [r4, #0]
 8008768:	428b      	cmp	r3, r1
 800876a:	d202      	bcs.n	8008772 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800876c:	68a3      	ldr	r3, [r4, #8]
 800876e:	441a      	add	r2, r3
 8008770:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008772:	2e02      	cmp	r6, #2
 8008774:	d001      	beq.n	800877a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008776:	2000      	movs	r0, #0
 8008778:	e7d5      	b.n	8008726 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800877a:	b125      	cbz	r5, 8008786 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800877c:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 800877e:	2000      	movs	r0, #0
 8008780:	e7d1      	b.n	8008726 <prvCopyDataToQueue+0x12>
 8008782:	2000      	movs	r0, #0
 8008784:	e7cf      	b.n	8008726 <prvCopyDataToQueue+0x12>
 8008786:	2000      	movs	r0, #0
 8008788:	e7cd      	b.n	8008726 <prvCopyDataToQueue+0x12>

0800878a <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800878a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800878c:	b172      	cbz	r2, 80087ac <prvCopyDataFromQueue+0x22>
{
 800878e:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008790:	68c3      	ldr	r3, [r0, #12]
 8008792:	4413      	add	r3, r2
 8008794:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008796:	6884      	ldr	r4, [r0, #8]
 8008798:	42a3      	cmp	r3, r4
 800879a:	d301      	bcc.n	80087a0 <prvCopyDataFromQueue+0x16>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800879c:	6803      	ldr	r3, [r0, #0]
 800879e:	60c3      	str	r3, [r0, #12]
 80087a0:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087a2:	68c1      	ldr	r1, [r0, #12]
 80087a4:	4620      	mov	r0, r4
 80087a6:	f002 fa13 	bl	800abd0 <memcpy>
}
 80087aa:	bd10      	pop	{r4, pc}
 80087ac:	4770      	bx	lr

080087ae <prvUnlockQueue>:
{
 80087ae:	b538      	push	{r3, r4, r5, lr}
 80087b0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80087b2:	f001 feb7 	bl	800a524 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80087b6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80087ba:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087bc:	e003      	b.n	80087c6 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80087be:	f001 f8f1 	bl	80099a4 <vTaskMissedYield>
			--cTxLock;
 80087c2:	3c01      	subs	r4, #1
 80087c4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087c6:	2c00      	cmp	r4, #0
 80087c8:	dd08      	ble.n	80087dc <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087cc:	b133      	cbz	r3, 80087dc <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087ce:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80087d2:	f001 f855 	bl	8009880 <xTaskRemoveFromEventList>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d0f3      	beq.n	80087c2 <prvUnlockQueue+0x14>
 80087da:	e7f0      	b.n	80087be <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80087dc:	23ff      	movs	r3, #255	; 0xff
 80087de:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80087e2:	f001 fec1 	bl	800a568 <vPortExitCritical>
	taskENTER_CRITICAL();
 80087e6:	f001 fe9d 	bl	800a524 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80087ea:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80087ee:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087f0:	e003      	b.n	80087fa <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 80087f2:	f001 f8d7 	bl	80099a4 <vTaskMissedYield>
				--cRxLock;
 80087f6:	3c01      	subs	r4, #1
 80087f8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087fa:	2c00      	cmp	r4, #0
 80087fc:	dd08      	ble.n	8008810 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087fe:	692b      	ldr	r3, [r5, #16]
 8008800:	b133      	cbz	r3, 8008810 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008802:	f105 0010 	add.w	r0, r5, #16
 8008806:	f001 f83b 	bl	8009880 <xTaskRemoveFromEventList>
 800880a:	2800      	cmp	r0, #0
 800880c:	d0f3      	beq.n	80087f6 <prvUnlockQueue+0x48>
 800880e:	e7f0      	b.n	80087f2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8008810:	23ff      	movs	r3, #255	; 0xff
 8008812:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008816:	f001 fea7 	bl	800a568 <vPortExitCritical>
}
 800881a:	bd38      	pop	{r3, r4, r5, pc}

0800881c <xQueueGenericReset>:
{
 800881c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800881e:	b940      	cbnz	r0, 8008832 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	e7fe      	b.n	8008830 <xQueueGenericReset+0x14>
 8008832:	4604      	mov	r4, r0
 8008834:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8008836:	f001 fe75 	bl	800a524 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800883a:	6821      	ldr	r1, [r4, #0]
 800883c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800883e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008840:	fb03 1002 	mla	r0, r3, r2, r1
 8008844:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008846:	2000      	movs	r0, #0
 8008848:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800884a:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800884c:	3a01      	subs	r2, #1
 800884e:	fb02 1303 	mla	r3, r2, r3, r1
 8008852:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008854:	23ff      	movs	r3, #255	; 0xff
 8008856:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800885a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800885e:	b9a5      	cbnz	r5, 800888a <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008860:	6923      	ldr	r3, [r4, #16]
 8008862:	b91b      	cbnz	r3, 800886c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8008864:	f001 fe80 	bl	800a568 <vPortExitCritical>
}
 8008868:	2001      	movs	r0, #1
 800886a:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800886c:	f104 0010 	add.w	r0, r4, #16
 8008870:	f001 f806 	bl	8009880 <xTaskRemoveFromEventList>
 8008874:	2800      	cmp	r0, #0
 8008876:	d0f5      	beq.n	8008864 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8008878:	4b08      	ldr	r3, [pc, #32]	; (800889c <xQueueGenericReset+0x80>)
 800887a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	e7ec      	b.n	8008864 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800888a:	f104 0010 	add.w	r0, r4, #16
 800888e:	f7ff fed4 	bl	800863a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008892:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008896:	f7ff fed0 	bl	800863a <vListInitialise>
 800889a:	e7e3      	b.n	8008864 <xQueueGenericReset+0x48>
 800889c:	e000ed04 	.word	0xe000ed04

080088a0 <prvInitialiseNewQueue>:
{
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	461d      	mov	r5, r3
 80088a4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80088a6:	460b      	mov	r3, r1
 80088a8:	b149      	cbz	r1, 80088be <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088aa:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80088ac:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088ae:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088b0:	2101      	movs	r1, #1
 80088b2:	4620      	mov	r0, r4
 80088b4:	f7ff ffb2 	bl	800881c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80088b8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80088bc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088be:	6024      	str	r4, [r4, #0]
 80088c0:	e7f4      	b.n	80088ac <prvInitialiseNewQueue+0xc>

080088c2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088c2:	b940      	cbnz	r0, 80088d6 <xQueueGenericCreateStatic+0x14>
 80088c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	e7fe      	b.n	80088d4 <xQueueGenericCreateStatic+0x12>
	{
 80088d6:	b510      	push	{r4, lr}
 80088d8:	b084      	sub	sp, #16
 80088da:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 80088dc:	b153      	cbz	r3, 80088f4 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80088de:	b192      	cbz	r2, 8008906 <xQueueGenericCreateStatic+0x44>
 80088e0:	b989      	cbnz	r1, 8008906 <xQueueGenericCreateStatic+0x44>
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	e7fe      	b.n	80088f2 <xQueueGenericCreateStatic+0x30>
 80088f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	e7fe      	b.n	8008904 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008906:	b94a      	cbnz	r2, 800891c <xQueueGenericCreateStatic+0x5a>
 8008908:	b141      	cbz	r1, 800891c <xQueueGenericCreateStatic+0x5a>
 800890a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	e7fe      	b.n	800891a <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800891c:	2050      	movs	r0, #80	; 0x50
 800891e:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008920:	9803      	ldr	r0, [sp, #12]
 8008922:	2850      	cmp	r0, #80	; 0x50
 8008924:	d008      	beq.n	8008938 <xQueueGenericCreateStatic+0x76>
 8008926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	e7fe      	b.n	8008936 <xQueueGenericCreateStatic+0x74>
 8008938:	4620      	mov	r0, r4
 800893a:	461c      	mov	r4, r3
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800893c:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800893e:	2301      	movs	r3, #1
 8008940:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008944:	9400      	str	r4, [sp, #0]
 8008946:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800894a:	f7ff ffa9 	bl	80088a0 <prvInitialiseNewQueue>
	}
 800894e:	4620      	mov	r0, r4
 8008950:	b004      	add	sp, #16
 8008952:	bd10      	pop	{r4, pc}

08008954 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008954:	b940      	cbnz	r0, 8008968 <xQueueGenericCreate+0x14>
 8008956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	e7fe      	b.n	8008966 <xQueueGenericCreate+0x12>
	{
 8008968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800896a:	b083      	sub	sp, #12
 800896c:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800896e:	b111      	cbz	r1, 8008976 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008970:	fb01 f000 	mul.w	r0, r1, r0
 8008974:	e000      	b.n	8008978 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8008976:	2000      	movs	r0, #0
 8008978:	4617      	mov	r7, r2
 800897a:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800897c:	3050      	adds	r0, #80	; 0x50
 800897e:	f001 ff87 	bl	800a890 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008982:	4605      	mov	r5, r0
 8008984:	b150      	cbz	r0, 800899c <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008986:	2300      	movs	r3, #0
 8008988:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800898c:	9000      	str	r0, [sp, #0]
 800898e:	463b      	mov	r3, r7
 8008990:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8008994:	4621      	mov	r1, r4
 8008996:	4630      	mov	r0, r6
 8008998:	f7ff ff82 	bl	80088a0 <prvInitialiseNewQueue>
	}
 800899c:	4628      	mov	r0, r5
 800899e:	b003      	add	sp, #12
 80089a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080089a4 <xQueueGenericSend>:
{
 80089a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089a6:	b085      	sub	sp, #20
 80089a8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80089aa:	b160      	cbz	r0, 80089c6 <xQueueGenericSend+0x22>
 80089ac:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089ae:	b999      	cbnz	r1, 80089d8 <xQueueGenericSend+0x34>
 80089b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80089b2:	b18a      	cbz	r2, 80089d8 <xQueueGenericSend+0x34>
 80089b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	e7fe      	b.n	80089c4 <xQueueGenericSend+0x20>
 80089c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	e7fe      	b.n	80089d6 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d10b      	bne.n	80089f4 <xQueueGenericSend+0x50>
 80089dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80089de:	2a01      	cmp	r2, #1
 80089e0:	d008      	beq.n	80089f4 <xQueueGenericSend+0x50>
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	e7fe      	b.n	80089f2 <xQueueGenericSend+0x4e>
 80089f4:	461e      	mov	r6, r3
 80089f6:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089f8:	f000 ffe0 	bl	80099bc <xTaskGetSchedulerState>
 80089fc:	b950      	cbnz	r0, 8008a14 <xQueueGenericSend+0x70>
 80089fe:	9b01      	ldr	r3, [sp, #4]
 8008a00:	b153      	cbz	r3, 8008a18 <xQueueGenericSend+0x74>
 8008a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a06:	f383 8811 	msr	BASEPRI, r3
 8008a0a:	f3bf 8f6f 	isb	sy
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	e7fe      	b.n	8008a12 <xQueueGenericSend+0x6e>
 8008a14:	2500      	movs	r5, #0
 8008a16:	e03a      	b.n	8008a8e <xQueueGenericSend+0xea>
 8008a18:	2500      	movs	r5, #0
 8008a1a:	e038      	b.n	8008a8e <xQueueGenericSend+0xea>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a1c:	4632      	mov	r2, r6
 8008a1e:	4639      	mov	r1, r7
 8008a20:	4620      	mov	r0, r4
 8008a22:	f7ff fe77 	bl	8008714 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a28:	b94b      	cbnz	r3, 8008a3e <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8008a2a:	b1a8      	cbz	r0, 8008a58 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8008a2c:	4b3b      	ldr	r3, [pc, #236]	; (8008b1c <xQueueGenericSend+0x178>)
 8008a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	e00c      	b.n	8008a58 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a42:	f000 ff1d 	bl	8009880 <xTaskRemoveFromEventList>
 8008a46:	b138      	cbz	r0, 8008a58 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8008a48:	4b34      	ldr	r3, [pc, #208]	; (8008b1c <xQueueGenericSend+0x178>)
 8008a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a4e:	601a      	str	r2, [r3, #0]
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008a58:	f001 fd86 	bl	800a568 <vPortExitCritical>
				return pdPASS;
 8008a5c:	2001      	movs	r0, #1
}
 8008a5e:	b005      	add	sp, #20
 8008a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8008a62:	f001 fd81 	bl	800a568 <vPortExitCritical>
					return errQUEUE_FULL;
 8008a66:	2000      	movs	r0, #0
 8008a68:	e7f9      	b.n	8008a5e <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a6a:	a802      	add	r0, sp, #8
 8008a6c:	f000 ff4e 	bl	800990c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a70:	2501      	movs	r5, #1
 8008a72:	e019      	b.n	8008aa8 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8008a74:	2300      	movs	r3, #0
 8008a76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008a7a:	e021      	b.n	8008ac0 <xQueueGenericSend+0x11c>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a82:	e023      	b.n	8008acc <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8008a84:	4620      	mov	r0, r4
 8008a86:	f7ff fe92 	bl	80087ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a8a:	f000 fd75 	bl	8009578 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008a8e:	f001 fd49 	bl	800a524 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008a94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d3c0      	bcc.n	8008a1c <xQueueGenericSend+0x78>
 8008a9a:	2e02      	cmp	r6, #2
 8008a9c:	d0be      	beq.n	8008a1c <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a9e:	9b01      	ldr	r3, [sp, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d0de      	beq.n	8008a62 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8008aa4:	2d00      	cmp	r5, #0
 8008aa6:	d0e0      	beq.n	8008a6a <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8008aa8:	f001 fd5e 	bl	800a568 <vPortExitCritical>
		vTaskSuspendAll();
 8008aac:	f000 fcca 	bl	8009444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ab0:	f001 fd38 	bl	800a524 <vPortEnterCritical>
 8008ab4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008ab8:	b25b      	sxtb	r3, r3
 8008aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008abe:	d0d9      	beq.n	8008a74 <xQueueGenericSend+0xd0>
 8008ac0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008ac4:	b25b      	sxtb	r3, r3
 8008ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aca:	d0d7      	beq.n	8008a7c <xQueueGenericSend+0xd8>
 8008acc:	f001 fd4c 	bl	800a568 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ad0:	a901      	add	r1, sp, #4
 8008ad2:	a802      	add	r0, sp, #8
 8008ad4:	f000 ff26 	bl	8009924 <xTaskCheckForTimeOut>
 8008ad8:	b9c8      	cbnz	r0, 8008b0e <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ada:	4620      	mov	r0, r4
 8008adc:	f7ff fdfe 	bl	80086dc <prvIsQueueFull>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d0cf      	beq.n	8008a84 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ae4:	9901      	ldr	r1, [sp, #4]
 8008ae6:	f104 0010 	add.w	r0, r4, #16
 8008aea:	f000 fe95 	bl	8009818 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008aee:	4620      	mov	r0, r4
 8008af0:	f7ff fe5d 	bl	80087ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008af4:	f000 fd40 	bl	8009578 <xTaskResumeAll>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d1c8      	bne.n	8008a8e <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8008afc:	4b07      	ldr	r3, [pc, #28]	; (8008b1c <xQueueGenericSend+0x178>)
 8008afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	e7bf      	b.n	8008a8e <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f7ff fe4d 	bl	80087ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b14:	f000 fd30 	bl	8009578 <xTaskResumeAll>
			return errQUEUE_FULL;
 8008b18:	2000      	movs	r0, #0
 8008b1a:	e7a0      	b.n	8008a5e <xQueueGenericSend+0xba>
 8008b1c:	e000ed04 	.word	0xe000ed04

08008b20 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8008b20:	b148      	cbz	r0, 8008b36 <prvInitialiseMutex+0x16>
	{
 8008b22:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b24:	2100      	movs	r1, #0
 8008b26:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008b28:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008b2a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	460a      	mov	r2, r1
 8008b30:	f7ff ff38 	bl	80089a4 <xQueueGenericSend>
	}
 8008b34:	bd08      	pop	{r3, pc}
 8008b36:	4770      	bx	lr

08008b38 <xQueueCreateMutex>:
	{
 8008b38:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	2001      	movs	r0, #1
 8008b40:	f7ff ff08 	bl	8008954 <xQueueGenericCreate>
 8008b44:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008b46:	f7ff ffeb 	bl	8008b20 <prvInitialiseMutex>
	}
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	bd10      	pop	{r4, pc}

08008b4e <xQueueCreateMutexStatic>:
	{
 8008b4e:	b510      	push	{r4, lr}
 8008b50:	b082      	sub	sp, #8
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008b52:	9000      	str	r0, [sp, #0]
 8008b54:	460b      	mov	r3, r1
 8008b56:	2200      	movs	r2, #0
 8008b58:	4611      	mov	r1, r2
 8008b5a:	2001      	movs	r0, #1
 8008b5c:	f7ff feb1 	bl	80088c2 <xQueueGenericCreateStatic>
 8008b60:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008b62:	f7ff ffdd 	bl	8008b20 <prvInitialiseMutex>
	}
 8008b66:	4620      	mov	r0, r4
 8008b68:	b002      	add	sp, #8
 8008b6a:	bd10      	pop	{r4, pc}

08008b6c <xQueueGenericSendFromISR>:
{
 8008b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008b70:	b160      	cbz	r0, 8008b8c <xQueueGenericSendFromISR+0x20>
 8008b72:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b74:	b999      	cbnz	r1, 8008b9e <xQueueGenericSendFromISR+0x32>
 8008b76:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8008b78:	b188      	cbz	r0, 8008b9e <xQueueGenericSendFromISR+0x32>
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	e7fe      	b.n	8008b8a <xQueueGenericSendFromISR+0x1e>
 8008b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	e7fe      	b.n	8008b9c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d10b      	bne.n	8008bba <xQueueGenericSendFromISR+0x4e>
 8008ba2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008ba4:	2801      	cmp	r0, #1
 8008ba6:	d008      	beq.n	8008bba <xQueueGenericSendFromISR+0x4e>
 8008ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	e7fe      	b.n	8008bb8 <xQueueGenericSendFromISR+0x4c>
 8008bba:	461f      	mov	r7, r3
 8008bbc:	4690      	mov	r8, r2
 8008bbe:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bc0:	f001 fdda 	bl	800a778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008bc4:	f3ef 8611 	mrs	r6, BASEPRI
 8008bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bd8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008bda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d303      	bcc.n	8008be8 <xQueueGenericSendFromISR+0x7c>
 8008be0:	2f02      	cmp	r7, #2
 8008be2:	d001      	beq.n	8008be8 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8008be4:	2000      	movs	r0, #0
 8008be6:	e00f      	b.n	8008c08 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008be8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8008bec:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bee:	463a      	mov	r2, r7
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f7ff fd8e 	bl	8008714 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008bf8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008bfc:	d008      	beq.n	8008c10 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008bfe:	1c6b      	adds	r3, r5, #1
 8008c00:	b25b      	sxtb	r3, r3
 8008c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8008c06:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c08:	f386 8811 	msr	BASEPRI, r6
}
 8008c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c12:	b15b      	cbz	r3, 8008c2c <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c14:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008c18:	f000 fe32 	bl	8009880 <xTaskRemoveFromEventList>
 8008c1c:	b140      	cbz	r0, 8008c30 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8008c1e:	f1b8 0f00 	cmp.w	r8, #0
 8008c22:	d007      	beq.n	8008c34 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c24:	2001      	movs	r0, #1
 8008c26:	f8c8 0000 	str.w	r0, [r8]
 8008c2a:	e7ed      	b.n	8008c08 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8008c2c:	2001      	movs	r0, #1
 8008c2e:	e7eb      	b.n	8008c08 <xQueueGenericSendFromISR+0x9c>
 8008c30:	2001      	movs	r0, #1
 8008c32:	e7e9      	b.n	8008c08 <xQueueGenericSendFromISR+0x9c>
 8008c34:	2001      	movs	r0, #1
 8008c36:	e7e7      	b.n	8008c08 <xQueueGenericSendFromISR+0x9c>

08008c38 <xQueueReceive>:
{
 8008c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008c3e:	b160      	cbz	r0, 8008c5a <xQueueReceive+0x22>
 8008c40:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c42:	b999      	cbnz	r1, 8008c6c <xQueueReceive+0x34>
 8008c44:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008c46:	b18b      	cbz	r3, 8008c6c <xQueueReceive+0x34>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	e7fe      	b.n	8008c58 <xQueueReceive+0x20>
 8008c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	e7fe      	b.n	8008c6a <xQueueReceive+0x32>
 8008c6c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c6e:	f000 fea5 	bl	80099bc <xTaskGetSchedulerState>
 8008c72:	b950      	cbnz	r0, 8008c8a <xQueueReceive+0x52>
 8008c74:	9b01      	ldr	r3, [sp, #4]
 8008c76:	b153      	cbz	r3, 8008c8e <xQueueReceive+0x56>
 8008c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7c:	f383 8811 	msr	BASEPRI, r3
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	e7fe      	b.n	8008c88 <xQueueReceive+0x50>
 8008c8a:	2600      	movs	r6, #0
 8008c8c:	e03e      	b.n	8008d0c <xQueueReceive+0xd4>
 8008c8e:	2600      	movs	r6, #0
 8008c90:	e03c      	b.n	8008d0c <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c92:	4639      	mov	r1, r7
 8008c94:	4620      	mov	r0, r4
 8008c96:	f7ff fd78 	bl	800878a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c9a:	3d01      	subs	r5, #1
 8008c9c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c9e:	6923      	ldr	r3, [r4, #16]
 8008ca0:	b923      	cbnz	r3, 8008cac <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 8008ca2:	f001 fc61 	bl	800a568 <vPortExitCritical>
				return pdPASS;
 8008ca6:	2001      	movs	r0, #1
}
 8008ca8:	b005      	add	sp, #20
 8008caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cac:	f104 0010 	add.w	r0, r4, #16
 8008cb0:	f000 fde6 	bl	8009880 <xTaskRemoveFromEventList>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d0f4      	beq.n	8008ca2 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 8008cb8:	4b34      	ldr	r3, [pc, #208]	; (8008d8c <xQueueReceive+0x154>)
 8008cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	e7eb      	b.n	8008ca2 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 8008cca:	f001 fc4d 	bl	800a568 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008cce:	2000      	movs	r0, #0
 8008cd0:	e7ea      	b.n	8008ca8 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cd2:	a802      	add	r0, sp, #8
 8008cd4:	f000 fe1a 	bl	800990c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cd8:	2601      	movs	r6, #1
 8008cda:	e021      	b.n	8008d20 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008ce2:	e029      	b.n	8008d38 <xQueueReceive+0x100>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cea:	e02b      	b.n	8008d44 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 8008cec:	4620      	mov	r0, r4
 8008cee:	f7ff fd5e 	bl	80087ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cf2:	f000 fc41 	bl	8009578 <xTaskResumeAll>
 8008cf6:	e009      	b.n	8008d0c <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f7ff fd58 	bl	80087ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cfe:	f000 fc3b 	bl	8009578 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d02:	4620      	mov	r0, r4
 8008d04:	f7ff fcf9 	bl	80086fa <prvIsQueueEmpty>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d13d      	bne.n	8008d88 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 8008d0c:	f001 fc0a 	bl	800a524 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d10:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d12:	2d00      	cmp	r5, #0
 8008d14:	d1bd      	bne.n	8008c92 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d16:	9b01      	ldr	r3, [sp, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d0d6      	beq.n	8008cca <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8008d1c:	2e00      	cmp	r6, #0
 8008d1e:	d0d8      	beq.n	8008cd2 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 8008d20:	f001 fc22 	bl	800a568 <vPortExitCritical>
		vTaskSuspendAll();
 8008d24:	f000 fb8e 	bl	8009444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d28:	f001 fbfc 	bl	800a524 <vPortEnterCritical>
 8008d2c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008d30:	b25b      	sxtb	r3, r3
 8008d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d36:	d0d1      	beq.n	8008cdc <xQueueReceive+0xa4>
 8008d38:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008d3c:	b25b      	sxtb	r3, r3
 8008d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d42:	d0cf      	beq.n	8008ce4 <xQueueReceive+0xac>
 8008d44:	f001 fc10 	bl	800a568 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d48:	a901      	add	r1, sp, #4
 8008d4a:	a802      	add	r0, sp, #8
 8008d4c:	f000 fdea 	bl	8009924 <xTaskCheckForTimeOut>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d1d1      	bne.n	8008cf8 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d54:	4620      	mov	r0, r4
 8008d56:	f7ff fcd0 	bl	80086fa <prvIsQueueEmpty>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	d0c6      	beq.n	8008cec <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d5e:	9901      	ldr	r1, [sp, #4]
 8008d60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d64:	f000 fd58 	bl	8009818 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f7ff fd20 	bl	80087ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d6e:	f000 fc03 	bl	8009578 <xTaskResumeAll>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d1ca      	bne.n	8008d0c <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 8008d76:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <xQueueReceive+0x154>)
 8008d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	e7c1      	b.n	8008d0c <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 8008d88:	2000      	movs	r0, #0
 8008d8a:	e78d      	b.n	8008ca8 <xQueueReceive+0x70>
 8008d8c:	e000ed04 	.word	0xe000ed04

08008d90 <xQueueSemaphoreTake>:
{
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008d96:	b940      	cbnz	r0, 8008daa <xQueueSemaphoreTake+0x1a>
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	e7fe      	b.n	8008da8 <xQueueSemaphoreTake+0x18>
 8008daa:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8008dac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008dae:	b143      	cbz	r3, 8008dc2 <xQueueSemaphoreTake+0x32>
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	e7fe      	b.n	8008dc0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dc2:	f000 fdfb 	bl	80099bc <xTaskGetSchedulerState>
 8008dc6:	b950      	cbnz	r0, 8008dde <xQueueSemaphoreTake+0x4e>
 8008dc8:	9b01      	ldr	r3, [sp, #4]
 8008dca:	b15b      	cbz	r3, 8008de4 <xQueueSemaphoreTake+0x54>
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	e7fe      	b.n	8008ddc <xQueueSemaphoreTake+0x4c>
 8008dde:	2500      	movs	r5, #0
 8008de0:	462e      	mov	r6, r5
 8008de2:	e051      	b.n	8008e88 <xQueueSemaphoreTake+0xf8>
 8008de4:	2500      	movs	r5, #0
 8008de6:	462e      	mov	r6, r5
 8008de8:	e04e      	b.n	8008e88 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008dea:	3b01      	subs	r3, #1
 8008dec:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	b913      	cbnz	r3, 8008df8 <xQueueSemaphoreTake+0x68>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008df2:	f000 ff07 	bl	8009c04 <pvTaskIncrementMutexHeldCount>
 8008df6:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008df8:	6923      	ldr	r3, [r4, #16]
 8008dfa:	b163      	cbz	r3, 8008e16 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dfc:	f104 0010 	add.w	r0, r4, #16
 8008e00:	f000 fd3e 	bl	8009880 <xTaskRemoveFromEventList>
 8008e04:	b138      	cbz	r0, 8008e16 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 8008e06:	4b48      	ldr	r3, [pc, #288]	; (8008f28 <xQueueSemaphoreTake+0x198>)
 8008e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008e16:	f001 fba7 	bl	800a568 <vPortExitCritical>
				return pdPASS;
 8008e1a:	2501      	movs	r5, #1
}
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	b004      	add	sp, #16
 8008e20:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008e22:	b145      	cbz	r5, 8008e36 <xQueueSemaphoreTake+0xa6>
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	e7fe      	b.n	8008e34 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 8008e36:	f001 fb97 	bl	800a568 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008e3a:	e7ef      	b.n	8008e1c <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e3c:	a802      	add	r0, sp, #8
 8008e3e:	f000 fd65 	bl	800990c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e42:	2601      	movs	r6, #1
 8008e44:	e02a      	b.n	8008e9c <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 8008e46:	2300      	movs	r3, #0
 8008e48:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008e4c:	e032      	b.n	8008eb4 <xQueueSemaphoreTake+0x124>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e54:	e034      	b.n	8008ec0 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 8008e56:	f001 fb65 	bl	800a524 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e5a:	68a0      	ldr	r0, [r4, #8]
 8008e5c:	f000 fdbe 	bl	80099dc <xTaskPriorityInherit>
 8008e60:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8008e62:	f001 fb81 	bl	800a568 <vPortExitCritical>
 8008e66:	e03b      	b.n	8008ee0 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f7ff fca0 	bl	80087ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e6e:	f000 fb83 	bl	8009578 <xTaskResumeAll>
 8008e72:	e009      	b.n	8008e88 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 8008e74:	4620      	mov	r0, r4
 8008e76:	f7ff fc9a 	bl	80087ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e7a:	f000 fb7d 	bl	8009578 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f7ff fc3b 	bl	80086fa <prvIsQueueEmpty>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d140      	bne.n	8008f0a <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 8008e88:	f001 fb4c 	bl	800a524 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008e8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1ab      	bne.n	8008dea <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e92:	9b01      	ldr	r3, [sp, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0c4      	beq.n	8008e22 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8008e98:	2e00      	cmp	r6, #0
 8008e9a:	d0cf      	beq.n	8008e3c <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 8008e9c:	f001 fb64 	bl	800a568 <vPortExitCritical>
		vTaskSuspendAll();
 8008ea0:	f000 fad0 	bl	8009444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ea4:	f001 fb3e 	bl	800a524 <vPortEnterCritical>
 8008ea8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008eac:	b25b      	sxtb	r3, r3
 8008eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eb2:	d0c8      	beq.n	8008e46 <xQueueSemaphoreTake+0xb6>
 8008eb4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008eb8:	b25b      	sxtb	r3, r3
 8008eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ebe:	d0c6      	beq.n	8008e4e <xQueueSemaphoreTake+0xbe>
 8008ec0:	f001 fb52 	bl	800a568 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ec4:	a901      	add	r1, sp, #4
 8008ec6:	a802      	add	r0, sp, #8
 8008ec8:	f000 fd2c 	bl	8009924 <xTaskCheckForTimeOut>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d1d1      	bne.n	8008e74 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f7ff fc12 	bl	80086fa <prvIsQueueEmpty>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d0c6      	beq.n	8008e68 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d0ba      	beq.n	8008e56 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ee0:	9901      	ldr	r1, [sp, #4]
 8008ee2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008ee6:	f000 fc97 	bl	8009818 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008eea:	4620      	mov	r0, r4
 8008eec:	f7ff fc5f 	bl	80087ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ef0:	f000 fb42 	bl	8009578 <xTaskResumeAll>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d1c7      	bne.n	8008e88 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 8008ef8:	4b0b      	ldr	r3, [pc, #44]	; (8008f28 <xQueueSemaphoreTake+0x198>)
 8008efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	e7be      	b.n	8008e88 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 8008f0a:	2d00      	cmp	r5, #0
 8008f0c:	d086      	beq.n	8008e1c <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 8008f0e:	f001 fb09 	bl	800a524 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008f12:	4620      	mov	r0, r4
 8008f14:	f7ff fbd9 	bl	80086ca <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008f18:	4601      	mov	r1, r0
 8008f1a:	68a0      	ldr	r0, [r4, #8]
 8008f1c:	f000 fe12 	bl	8009b44 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8008f20:	f001 fb22 	bl	800a568 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8008f24:	2500      	movs	r5, #0
 8008f26:	e779      	b.n	8008e1c <xQueueSemaphoreTake+0x8c>
 8008f28:	e000ed04 	.word	0xe000ed04

08008f2c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	2b07      	cmp	r3, #7
 8008f30:	d80c      	bhi.n	8008f4c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f32:	4a07      	ldr	r2, [pc, #28]	; (8008f50 <vQueueAddToRegistry+0x24>)
 8008f34:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008f38:	b10a      	cbz	r2, 8008f3e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	e7f7      	b.n	8008f2e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f3e:	4a04      	ldr	r2, [pc, #16]	; (8008f50 <vQueueAddToRegistry+0x24>)
 8008f40:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f48:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f4a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	20003334 	.word	0x20003334

08008f54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	4604      	mov	r4, r0
 8008f58:	460d      	mov	r5, r1
 8008f5a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f5c:	f001 fae2 	bl	800a524 <vPortEnterCritical>
 8008f60:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008f64:	b25b      	sxtb	r3, r3
 8008f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f6a:	d00d      	beq.n	8008f88 <vQueueWaitForMessageRestricted+0x34>
 8008f6c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008f70:	b25b      	sxtb	r3, r3
 8008f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f76:	d00b      	beq.n	8008f90 <vQueueWaitForMessageRestricted+0x3c>
 8008f78:	f001 faf6 	bl	800a568 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f7e:	b15b      	cbz	r3, 8008f98 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f80:	4620      	mov	r0, r4
 8008f82:	f7ff fc14 	bl	80087ae <prvUnlockQueue>
	}
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008f8e:	e7ed      	b.n	8008f6c <vQueueWaitForMessageRestricted+0x18>
 8008f90:	2300      	movs	r3, #0
 8008f92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f96:	e7ef      	b.n	8008f78 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f98:	4632      	mov	r2, r6
 8008f9a:	4629      	mov	r1, r5
 8008f9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008fa0:	f000 fc52 	bl	8009848 <vTaskPlaceOnEventListRestricted>
 8008fa4:	e7ec      	b.n	8008f80 <vQueueWaitForMessageRestricted+0x2c>
	...

08008fa8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fa8:	4b08      	ldr	r3, [pc, #32]	; (8008fcc <prvResetNextTaskUnblockTime+0x24>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	b13b      	cbz	r3, 8008fc0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb0:	4b06      	ldr	r3, [pc, #24]	; (8008fcc <prvResetNextTaskUnblockTime+0x24>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <prvResetNextTaskUnblockTime+0x28>)
 8008fbc:	601a      	str	r2, [r3, #0]
	}
}
 8008fbe:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fc0:	4b03      	ldr	r3, [pc, #12]	; (8008fd0 <prvResetNextTaskUnblockTime+0x28>)
 8008fc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	20000818 	.word	0x20000818
 8008fd0:	200008f0 	.word	0x200008f0

08008fd4 <prvInitialiseNewTask>:
{
 8008fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd8:	4681      	mov	r9, r0
 8008fda:	460d      	mov	r5, r1
 8008fdc:	4617      	mov	r7, r2
 8008fde:	469a      	mov	sl, r3
 8008fe0:	9e08      	ldr	r6, [sp, #32]
 8008fe2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8008fe6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fe8:	0092      	lsls	r2, r2, #2
 8008fea:	21a5      	movs	r1, #165	; 0xa5
 8008fec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008fee:	f001 fdfa 	bl	800abe6 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ff2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008ff4:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8008ff8:	3a01      	subs	r2, #1
 8008ffa:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ffe:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8009002:	6467      	str	r7, [r4, #68]	; 0x44
	if( pcName != NULL )
 8009004:	b38d      	cbz	r5, 800906a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009006:	2300      	movs	r3, #0
 8009008:	2b0f      	cmp	r3, #15
 800900a:	d807      	bhi.n	800901c <prvInitialiseNewTask+0x48>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800900c:	5ce9      	ldrb	r1, [r5, r3]
 800900e:	18e2      	adds	r2, r4, r3
 8009010:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8009014:	5cea      	ldrb	r2, [r5, r3]
 8009016:	b10a      	cbz	r2, 800901c <prvInitialiseNewTask+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009018:	3301      	adds	r3, #1
 800901a:	e7f5      	b.n	8009008 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800901c:	2300      	movs	r3, #0
 800901e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009022:	2e06      	cmp	r6, #6
 8009024:	d900      	bls.n	8009028 <prvInitialiseNewTask+0x54>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009026:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8009028:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800902a:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800902c:	2500      	movs	r5, #0
 800902e:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009030:	1d20      	adds	r0, r4, #4
 8009032:	f7ff fb0d 	bl	8008650 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009036:	f104 0018 	add.w	r0, r4, #24
 800903a:	f7ff fb09 	bl	8008650 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800903e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009040:	f1c6 0607 	rsb	r6, r6, #7
 8009044:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009046:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009048:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
 800904a:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800904c:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009050:	4652      	mov	r2, sl
 8009052:	4649      	mov	r1, r9
 8009054:	4638      	mov	r0, r7
 8009056:	f001 fa37 	bl	800a4c8 <pxPortInitialiseStack>
 800905a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800905c:	f1b8 0f00 	cmp.w	r8, #0
 8009060:	d001      	beq.n	8009066 <prvInitialiseNewTask+0x92>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009062:	f8c8 4000 	str.w	r4, [r8]
}
 8009066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800906a:	2300      	movs	r3, #0
 800906c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8009070:	e7d7      	b.n	8009022 <prvInitialiseNewTask+0x4e>
	...

08009074 <prvInitialiseTaskLists>:
{
 8009074:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009076:	2400      	movs	r4, #0
 8009078:	e007      	b.n	800908a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800907a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800907e:	0093      	lsls	r3, r2, #2
 8009080:	480e      	ldr	r0, [pc, #56]	; (80090bc <prvInitialiseTaskLists+0x48>)
 8009082:	4418      	add	r0, r3
 8009084:	f7ff fad9 	bl	800863a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009088:	3401      	adds	r4, #1
 800908a:	2c06      	cmp	r4, #6
 800908c:	d9f5      	bls.n	800907a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800908e:	4d0c      	ldr	r5, [pc, #48]	; (80090c0 <prvInitialiseTaskLists+0x4c>)
 8009090:	4628      	mov	r0, r5
 8009092:	f7ff fad2 	bl	800863a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009096:	4c0b      	ldr	r4, [pc, #44]	; (80090c4 <prvInitialiseTaskLists+0x50>)
 8009098:	4620      	mov	r0, r4
 800909a:	f7ff face 	bl	800863a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800909e:	480a      	ldr	r0, [pc, #40]	; (80090c8 <prvInitialiseTaskLists+0x54>)
 80090a0:	f7ff facb 	bl	800863a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80090a4:	4809      	ldr	r0, [pc, #36]	; (80090cc <prvInitialiseTaskLists+0x58>)
 80090a6:	f7ff fac8 	bl	800863a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80090aa:	4809      	ldr	r0, [pc, #36]	; (80090d0 <prvInitialiseTaskLists+0x5c>)
 80090ac:	f7ff fac5 	bl	800863a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80090b0:	4b08      	ldr	r3, [pc, #32]	; (80090d4 <prvInitialiseTaskLists+0x60>)
 80090b2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090b4:	4b08      	ldr	r3, [pc, #32]	; (80090d8 <prvInitialiseTaskLists+0x64>)
 80090b6:	601c      	str	r4, [r3, #0]
}
 80090b8:	bd38      	pop	{r3, r4, r5, pc}
 80090ba:	bf00      	nop
 80090bc:	20000820 	.word	0x20000820
 80090c0:	200008c8 	.word	0x200008c8
 80090c4:	200008dc 	.word	0x200008dc
 80090c8:	200008f8 	.word	0x200008f8
 80090cc:	20000924 	.word	0x20000924
 80090d0:	20000910 	.word	0x20000910
 80090d4:	20000818 	.word	0x20000818
 80090d8:	2000081c 	.word	0x2000081c

080090dc <prvAddNewTaskToReadyList>:
{
 80090dc:	b510      	push	{r4, lr}
 80090de:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80090e0:	f001 fa20 	bl	800a524 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80090e4:	4a21      	ldr	r2, [pc, #132]	; (800916c <prvAddNewTaskToReadyList+0x90>)
 80090e6:	6813      	ldr	r3, [r2, #0]
 80090e8:	3301      	adds	r3, #1
 80090ea:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80090ec:	4b20      	ldr	r3, [pc, #128]	; (8009170 <prvAddNewTaskToReadyList+0x94>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	b15b      	cbz	r3, 800910a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80090f2:	4b20      	ldr	r3, [pc, #128]	; (8009174 <prvAddNewTaskToReadyList+0x98>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	b96b      	cbnz	r3, 8009114 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090f8:	4b1d      	ldr	r3, [pc, #116]	; (8009170 <prvAddNewTaskToReadyList+0x94>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009100:	429a      	cmp	r2, r3
 8009102:	d807      	bhi.n	8009114 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009104:	4b1a      	ldr	r3, [pc, #104]	; (8009170 <prvAddNewTaskToReadyList+0x94>)
 8009106:	601c      	str	r4, [r3, #0]
 8009108:	e004      	b.n	8009114 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800910a:	4b19      	ldr	r3, [pc, #100]	; (8009170 <prvAddNewTaskToReadyList+0x94>)
 800910c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800910e:	6813      	ldr	r3, [r2, #0]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d027      	beq.n	8009164 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 8009114:	4a18      	ldr	r2, [pc, #96]	; (8009178 <prvAddNewTaskToReadyList+0x9c>)
 8009116:	6813      	ldr	r3, [r2, #0]
 8009118:	3301      	adds	r3, #1
 800911a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800911c:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 800911e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009120:	2201      	movs	r2, #1
 8009122:	409a      	lsls	r2, r3
 8009124:	4915      	ldr	r1, [pc, #84]	; (800917c <prvAddNewTaskToReadyList+0xa0>)
 8009126:	6808      	ldr	r0, [r1, #0]
 8009128:	4302      	orrs	r2, r0
 800912a:	600a      	str	r2, [r1, #0]
 800912c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009130:	009a      	lsls	r2, r3, #2
 8009132:	1d21      	adds	r1, r4, #4
 8009134:	4812      	ldr	r0, [pc, #72]	; (8009180 <prvAddNewTaskToReadyList+0xa4>)
 8009136:	4410      	add	r0, r2
 8009138:	f7ff fa8d 	bl	8008656 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800913c:	f001 fa14 	bl	800a568 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009140:	4b0c      	ldr	r3, [pc, #48]	; (8009174 <prvAddNewTaskToReadyList+0x98>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	b16b      	cbz	r3, 8009162 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009146:	4b0a      	ldr	r3, [pc, #40]	; (8009170 <prvAddNewTaskToReadyList+0x94>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800914e:	429a      	cmp	r2, r3
 8009150:	d207      	bcs.n	8009162 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 8009152:	4b0c      	ldr	r3, [pc, #48]	; (8009184 <prvAddNewTaskToReadyList+0xa8>)
 8009154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	f3bf 8f6f 	isb	sy
}
 8009162:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8009164:	f7ff ff86 	bl	8009074 <prvInitialiseTaskLists>
 8009168:	e7d4      	b.n	8009114 <prvAddNewTaskToReadyList+0x38>
 800916a:	bf00      	nop
 800916c:	200008b0 	.word	0x200008b0
 8009170:	20000814 	.word	0x20000814
 8009174:	2000090c 	.word	0x2000090c
 8009178:	200008c0 	.word	0x200008c0
 800917c:	200008c4 	.word	0x200008c4
 8009180:	20000820 	.word	0x20000820
 8009184:	e000ed04 	.word	0xe000ed04

08009188 <prvDeleteTCB>:
	{
 8009188:	b510      	push	{r4, lr}
 800918a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800918c:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8009190:	b933      	cbnz	r3, 80091a0 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 8009192:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8009194:	f001 fc00 	bl	800a998 <vPortFree>
				vPortFree( pxTCB );
 8009198:	4620      	mov	r0, r4
 800919a:	f001 fbfd 	bl	800a998 <vPortFree>
	}
 800919e:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d00a      	beq.n	80091ba <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d0fa      	beq.n	800919e <prvDeleteTCB+0x16>
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	e7fe      	b.n	80091b8 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 80091ba:	f001 fbed 	bl	800a998 <vPortFree>
 80091be:	e7ee      	b.n	800919e <prvDeleteTCB+0x16>

080091c0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091c0:	4b0f      	ldr	r3, [pc, #60]	; (8009200 <prvCheckTasksWaitingTermination+0x40>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	b1d3      	cbz	r3, 80091fc <prvCheckTasksWaitingTermination+0x3c>
{
 80091c6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80091c8:	f001 f9ac 	bl	800a524 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091cc:	4b0d      	ldr	r3, [pc, #52]	; (8009204 <prvCheckTasksWaitingTermination+0x44>)
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091d2:	1d20      	adds	r0, r4, #4
 80091d4:	f7ff fa65 	bl	80086a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091d8:	4a0b      	ldr	r2, [pc, #44]	; (8009208 <prvCheckTasksWaitingTermination+0x48>)
 80091da:	6813      	ldr	r3, [r2, #0]
 80091dc:	3b01      	subs	r3, #1
 80091de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091e0:	4a07      	ldr	r2, [pc, #28]	; (8009200 <prvCheckTasksWaitingTermination+0x40>)
 80091e2:	6813      	ldr	r3, [r2, #0]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80091e8:	f001 f9be 	bl	800a568 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80091ec:	4620      	mov	r0, r4
 80091ee:	f7ff ffcb 	bl	8009188 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091f2:	4b03      	ldr	r3, [pc, #12]	; (8009200 <prvCheckTasksWaitingTermination+0x40>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e6      	bne.n	80091c8 <prvCheckTasksWaitingTermination+0x8>
}
 80091fa:	bd10      	pop	{r4, pc}
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	200008b4 	.word	0x200008b4
 8009204:	20000924 	.word	0x20000924
 8009208:	200008b0 	.word	0x200008b0

0800920c <prvIdleTask>:
{
 800920c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800920e:	f7ff ffd7 	bl	80091c0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009212:	4b06      	ldr	r3, [pc, #24]	; (800922c <prvIdleTask+0x20>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d9f9      	bls.n	800920e <prvIdleTask+0x2>
				taskYIELD();
 800921a:	4b05      	ldr	r3, [pc, #20]	; (8009230 <prvIdleTask+0x24>)
 800921c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009220:	601a      	str	r2, [r3, #0]
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	e7f0      	b.n	800920e <prvIdleTask+0x2>
 800922c:	20000820 	.word	0x20000820
 8009230:	e000ed04 	.word	0xe000ed04

08009234 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	4604      	mov	r4, r0
 8009238:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800923a:	4b1d      	ldr	r3, [pc, #116]	; (80092b0 <prvAddCurrentTaskToDelayedList+0x7c>)
 800923c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800923e:	4b1d      	ldr	r3, [pc, #116]	; (80092b4 <prvAddCurrentTaskToDelayedList+0x80>)
 8009240:	6818      	ldr	r0, [r3, #0]
 8009242:	3004      	adds	r0, #4
 8009244:	f7ff fa2d 	bl	80086a2 <uxListRemove>
 8009248:	b950      	cbnz	r0, 8009260 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800924a:	4b1a      	ldr	r3, [pc, #104]	; (80092b4 <prvAddCurrentTaskToDelayedList+0x80>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009250:	2301      	movs	r3, #1
 8009252:	fa03 f202 	lsl.w	r2, r3, r2
 8009256:	4918      	ldr	r1, [pc, #96]	; (80092b8 <prvAddCurrentTaskToDelayedList+0x84>)
 8009258:	680b      	ldr	r3, [r1, #0]
 800925a:	ea23 0302 	bic.w	r3, r3, r2
 800925e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009260:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8009264:	d013      	beq.n	800928e <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009266:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009268:	4b12      	ldr	r3, [pc, #72]	; (80092b4 <prvAddCurrentTaskToDelayedList+0x80>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800926e:	42a5      	cmp	r5, r4
 8009270:	d816      	bhi.n	80092a0 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009272:	4b12      	ldr	r3, [pc, #72]	; (80092bc <prvAddCurrentTaskToDelayedList+0x88>)
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	4b0f      	ldr	r3, [pc, #60]	; (80092b4 <prvAddCurrentTaskToDelayedList+0x80>)
 8009278:	6819      	ldr	r1, [r3, #0]
 800927a:	3104      	adds	r1, #4
 800927c:	f7ff f9f7 	bl	800866e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8009280:	4b0f      	ldr	r3, [pc, #60]	; (80092c0 <prvAddCurrentTaskToDelayedList+0x8c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	42a3      	cmp	r3, r4
 8009286:	d912      	bls.n	80092ae <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8009288:	4b0d      	ldr	r3, [pc, #52]	; (80092c0 <prvAddCurrentTaskToDelayedList+0x8c>)
 800928a:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800928c:	e00f      	b.n	80092ae <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800928e:	2e00      	cmp	r6, #0
 8009290:	d0e9      	beq.n	8009266 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009292:	4b08      	ldr	r3, [pc, #32]	; (80092b4 <prvAddCurrentTaskToDelayedList+0x80>)
 8009294:	6819      	ldr	r1, [r3, #0]
 8009296:	3104      	adds	r1, #4
 8009298:	480a      	ldr	r0, [pc, #40]	; (80092c4 <prvAddCurrentTaskToDelayedList+0x90>)
 800929a:	f7ff f9dc 	bl	8008656 <vListInsertEnd>
 800929e:	e006      	b.n	80092ae <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092a0:	4b09      	ldr	r3, [pc, #36]	; (80092c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80092a2:	6818      	ldr	r0, [r3, #0]
 80092a4:	4b03      	ldr	r3, [pc, #12]	; (80092b4 <prvAddCurrentTaskToDelayedList+0x80>)
 80092a6:	6819      	ldr	r1, [r3, #0]
 80092a8:	3104      	adds	r1, #4
 80092aa:	f7ff f9e0 	bl	800866e <vListInsert>
}
 80092ae:	bd70      	pop	{r4, r5, r6, pc}
 80092b0:	20000938 	.word	0x20000938
 80092b4:	20000814 	.word	0x20000814
 80092b8:	200008c4 	.word	0x200008c4
 80092bc:	20000818 	.word	0x20000818
 80092c0:	200008f0 	.word	0x200008f0
 80092c4:	20000910 	.word	0x20000910
 80092c8:	2000081c 	.word	0x2000081c

080092cc <xTaskCreateStatic>:
	{
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80092d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80092d4:	b945      	cbnz	r5, 80092e8 <xTaskCreateStatic+0x1c>
 80092d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	e7fe      	b.n	80092e6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80092e8:	b944      	cbnz	r4, 80092fc <xTaskCreateStatic+0x30>
 80092ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	e7fe      	b.n	80092fa <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80092fc:	2664      	movs	r6, #100	; 0x64
 80092fe:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009300:	9e04      	ldr	r6, [sp, #16]
 8009302:	2e64      	cmp	r6, #100	; 0x64
 8009304:	d008      	beq.n	8009318 <xTaskCreateStatic+0x4c>
 8009306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	e7fe      	b.n	8009316 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009318:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800931a:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800931c:	2502      	movs	r5, #2
 800931e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009322:	2500      	movs	r5, #0
 8009324:	9503      	str	r5, [sp, #12]
 8009326:	9402      	str	r4, [sp, #8]
 8009328:	ad05      	add	r5, sp, #20
 800932a:	9501      	str	r5, [sp, #4]
 800932c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800932e:	9500      	str	r5, [sp, #0]
 8009330:	f7ff fe50 	bl	8008fd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009334:	4620      	mov	r0, r4
 8009336:	f7ff fed1 	bl	80090dc <prvAddNewTaskToReadyList>
	}
 800933a:	9805      	ldr	r0, [sp, #20]
 800933c:	b006      	add	sp, #24
 800933e:	bd70      	pop	{r4, r5, r6, pc}

08009340 <xTaskCreate>:
	{
 8009340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009344:	b085      	sub	sp, #20
 8009346:	4607      	mov	r7, r0
 8009348:	4688      	mov	r8, r1
 800934a:	4615      	mov	r5, r2
 800934c:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800934e:	0090      	lsls	r0, r2, #2
 8009350:	f001 fa9e 	bl	800a890 <pvPortMalloc>
			if( pxStack != NULL )
 8009354:	b308      	cbz	r0, 800939a <xTaskCreate+0x5a>
 8009356:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009358:	2064      	movs	r0, #100	; 0x64
 800935a:	f001 fa99 	bl	800a890 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800935e:	4604      	mov	r4, r0
 8009360:	b1b8      	cbz	r0, 8009392 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8009362:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8009364:	b1e4      	cbz	r4, 80093a0 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009366:	2300      	movs	r3, #0
 8009368:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800936c:	9303      	str	r3, [sp, #12]
 800936e:	9402      	str	r4, [sp, #8]
 8009370:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009372:	9301      	str	r3, [sp, #4]
 8009374:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	464b      	mov	r3, r9
 800937a:	462a      	mov	r2, r5
 800937c:	4641      	mov	r1, r8
 800937e:	4638      	mov	r0, r7
 8009380:	f7ff fe28 	bl	8008fd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009384:	4620      	mov	r0, r4
 8009386:	f7ff fea9 	bl	80090dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800938a:	2001      	movs	r0, #1
	}
 800938c:	b005      	add	sp, #20
 800938e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8009392:	4630      	mov	r0, r6
 8009394:	f001 fb00 	bl	800a998 <vPortFree>
 8009398:	e7e4      	b.n	8009364 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800939a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800939e:	e7f5      	b.n	800938c <xTaskCreate+0x4c>
 80093a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80093a4:	e7f2      	b.n	800938c <xTaskCreate+0x4c>
	...

080093a8 <vTaskStartScheduler>:
{
 80093a8:	b510      	push	{r4, lr}
 80093aa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093ac:	2400      	movs	r4, #0
 80093ae:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093b0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80093b2:	aa07      	add	r2, sp, #28
 80093b4:	a906      	add	r1, sp, #24
 80093b6:	a805      	add	r0, sp, #20
 80093b8:	f7fa f9b6 	bl	8003728 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80093bc:	9b05      	ldr	r3, [sp, #20]
 80093be:	9302      	str	r3, [sp, #8]
 80093c0:	9b06      	ldr	r3, [sp, #24]
 80093c2:	9301      	str	r3, [sp, #4]
 80093c4:	9400      	str	r4, [sp, #0]
 80093c6:	4623      	mov	r3, r4
 80093c8:	9a07      	ldr	r2, [sp, #28]
 80093ca:	4918      	ldr	r1, [pc, #96]	; (800942c <vTaskStartScheduler+0x84>)
 80093cc:	4818      	ldr	r0, [pc, #96]	; (8009430 <vTaskStartScheduler+0x88>)
 80093ce:	f7ff ff7d 	bl	80092cc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80093d2:	b140      	cbz	r0, 80093e6 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 80093d4:	f000 fe40 	bl	800a058 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80093d8:	2801      	cmp	r0, #1
 80093da:	d006      	beq.n	80093ea <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80093e0:	d01a      	beq.n	8009418 <vTaskStartScheduler+0x70>
}
 80093e2:	b008      	add	sp, #32
 80093e4:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80093e6:	2000      	movs	r0, #0
 80093e8:	e7f6      	b.n	80093d8 <vTaskStartScheduler+0x30>
 80093ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80093fa:	4b0e      	ldr	r3, [pc, #56]	; (8009434 <vTaskStartScheduler+0x8c>)
 80093fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009400:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009402:	4b0d      	ldr	r3, [pc, #52]	; (8009438 <vTaskStartScheduler+0x90>)
 8009404:	2201      	movs	r2, #1
 8009406:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009408:	2300      	movs	r3, #0
 800940a:	4a0c      	ldr	r2, [pc, #48]	; (800943c <vTaskStartScheduler+0x94>)
 800940c:	6013      	str	r3, [r2, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800940e:	4a0c      	ldr	r2, [pc, #48]	; (8009440 <vTaskStartScheduler+0x98>)
 8009410:	6013      	str	r3, [r2, #0]
		if( xPortStartScheduler() != pdFALSE )
 8009412:	f001 f929 	bl	800a668 <xPortStartScheduler>
 8009416:	e7e4      	b.n	80093e2 <vTaskStartScheduler+0x3a>
 8009418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941c:	f383 8811 	msr	BASEPRI, r3
 8009420:	f3bf 8f6f 	isb	sy
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	e7fe      	b.n	8009428 <vTaskStartScheduler+0x80>
 800942a:	bf00      	nop
 800942c:	0800b958 	.word	0x0800b958
 8009430:	0800920d 	.word	0x0800920d
 8009434:	200008f0 	.word	0x200008f0
 8009438:	2000090c 	.word	0x2000090c
 800943c:	20000938 	.word	0x20000938
 8009440:	200032a0 	.word	0x200032a0

08009444 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009444:	4a02      	ldr	r2, [pc, #8]	; (8009450 <vTaskSuspendAll+0xc>)
 8009446:	6813      	ldr	r3, [r2, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	6013      	str	r3, [r2, #0]
}
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	200008bc 	.word	0x200008bc

08009454 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009454:	4b01      	ldr	r3, [pc, #4]	; (800945c <xTaskGetTickCount+0x8>)
 8009456:	6818      	ldr	r0, [r3, #0]
}
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	20000938 	.word	0x20000938

08009460 <xTaskIncrementTick>:
{
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009462:	4b3a      	ldr	r3, [pc, #232]	; (800954c <xTaskIncrementTick+0xec>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d164      	bne.n	8009534 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800946a:	4b39      	ldr	r3, [pc, #228]	; (8009550 <xTaskIncrementTick+0xf0>)
 800946c:	681d      	ldr	r5, [r3, #0]
 800946e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009470:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009472:	b9c5      	cbnz	r5, 80094a6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009474:	4b37      	ldr	r3, [pc, #220]	; (8009554 <xTaskIncrementTick+0xf4>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	b143      	cbz	r3, 800948e <xTaskIncrementTick+0x2e>
 800947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	e7fe      	b.n	800948c <xTaskIncrementTick+0x2c>
 800948e:	4a31      	ldr	r2, [pc, #196]	; (8009554 <xTaskIncrementTick+0xf4>)
 8009490:	6811      	ldr	r1, [r2, #0]
 8009492:	4b31      	ldr	r3, [pc, #196]	; (8009558 <xTaskIncrementTick+0xf8>)
 8009494:	6818      	ldr	r0, [r3, #0]
 8009496:	6010      	str	r0, [r2, #0]
 8009498:	6019      	str	r1, [r3, #0]
 800949a:	4a30      	ldr	r2, [pc, #192]	; (800955c <xTaskIncrementTick+0xfc>)
 800949c:	6813      	ldr	r3, [r2, #0]
 800949e:	3301      	adds	r3, #1
 80094a0:	6013      	str	r3, [r2, #0]
 80094a2:	f7ff fd81 	bl	8008fa8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094a6:	4b2e      	ldr	r3, [pc, #184]	; (8009560 <xTaskIncrementTick+0x100>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	42ab      	cmp	r3, r5
 80094ac:	d938      	bls.n	8009520 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 80094ae:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094b0:	4b2c      	ldr	r3, [pc, #176]	; (8009564 <xTaskIncrementTick+0x104>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80094ba:	009a      	lsls	r2, r3, #2
 80094bc:	4b2a      	ldr	r3, [pc, #168]	; (8009568 <xTaskIncrementTick+0x108>)
 80094be:	589b      	ldr	r3, [r3, r2]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d93c      	bls.n	800953e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 80094c4:	2401      	movs	r4, #1
 80094c6:	e03a      	b.n	800953e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 80094c8:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094ca:	4b22      	ldr	r3, [pc, #136]	; (8009554 <xTaskIncrementTick+0xf4>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	b343      	cbz	r3, 8009524 <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094d2:	4b20      	ldr	r3, [pc, #128]	; (8009554 <xTaskIncrementTick+0xf4>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094da:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80094dc:	429d      	cmp	r5, r3
 80094de:	d326      	bcc.n	800952e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094e0:	1d37      	adds	r7, r6, #4
 80094e2:	4638      	mov	r0, r7
 80094e4:	f7ff f8dd 	bl	80086a2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094e8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80094ea:	b11b      	cbz	r3, 80094f4 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094ec:	f106 0018 	add.w	r0, r6, #24
 80094f0:	f7ff f8d7 	bl	80086a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094f4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80094f6:	2201      	movs	r2, #1
 80094f8:	409a      	lsls	r2, r3
 80094fa:	491c      	ldr	r1, [pc, #112]	; (800956c <xTaskIncrementTick+0x10c>)
 80094fc:	6808      	ldr	r0, [r1, #0]
 80094fe:	4302      	orrs	r2, r0
 8009500:	600a      	str	r2, [r1, #0]
 8009502:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009506:	009a      	lsls	r2, r3, #2
 8009508:	4639      	mov	r1, r7
 800950a:	4817      	ldr	r0, [pc, #92]	; (8009568 <xTaskIncrementTick+0x108>)
 800950c:	4410      	add	r0, r2
 800950e:	f7ff f8a2 	bl	8008656 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009512:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8009514:	4b13      	ldr	r3, [pc, #76]	; (8009564 <xTaskIncrementTick+0x104>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	429a      	cmp	r2, r3
 800951c:	d2d4      	bcs.n	80094c8 <xTaskIncrementTick+0x68>
 800951e:	e7d4      	b.n	80094ca <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8009520:	2400      	movs	r4, #0
 8009522:	e7d2      	b.n	80094ca <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009524:	4b0e      	ldr	r3, [pc, #56]	; (8009560 <xTaskIncrementTick+0x100>)
 8009526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800952a:	601a      	str	r2, [r3, #0]
					break;
 800952c:	e7c0      	b.n	80094b0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800952e:	4a0c      	ldr	r2, [pc, #48]	; (8009560 <xTaskIncrementTick+0x100>)
 8009530:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009532:	e7bd      	b.n	80094b0 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8009534:	4a0e      	ldr	r2, [pc, #56]	; (8009570 <xTaskIncrementTick+0x110>)
 8009536:	6813      	ldr	r3, [r2, #0]
 8009538:	3301      	adds	r3, #1
 800953a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800953c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800953e:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <xTaskIncrementTick+0x114>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	b103      	cbz	r3, 8009546 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8009544:	2401      	movs	r4, #1
}
 8009546:	4620      	mov	r0, r4
 8009548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800954a:	bf00      	nop
 800954c:	200008bc 	.word	0x200008bc
 8009550:	20000938 	.word	0x20000938
 8009554:	20000818 	.word	0x20000818
 8009558:	2000081c 	.word	0x2000081c
 800955c:	200008f4 	.word	0x200008f4
 8009560:	200008f0 	.word	0x200008f0
 8009564:	20000814 	.word	0x20000814
 8009568:	20000820 	.word	0x20000820
 800956c:	200008c4 	.word	0x200008c4
 8009570:	200008b8 	.word	0x200008b8
 8009574:	2000093c 	.word	0x2000093c

08009578 <xTaskResumeAll>:
{
 8009578:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800957a:	4b33      	ldr	r3, [pc, #204]	; (8009648 <xTaskResumeAll+0xd0>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	b943      	cbnz	r3, 8009592 <xTaskResumeAll+0x1a>
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	e7fe      	b.n	8009590 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8009592:	f000 ffc7 	bl	800a524 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009596:	4b2c      	ldr	r3, [pc, #176]	; (8009648 <xTaskResumeAll+0xd0>)
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	3a01      	subs	r2, #1
 800959c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d14d      	bne.n	8009640 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095a4:	4b29      	ldr	r3, [pc, #164]	; (800964c <xTaskResumeAll+0xd4>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	b923      	cbnz	r3, 80095b4 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 80095aa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80095ac:	f000 ffdc 	bl	800a568 <vPortExitCritical>
}
 80095b0:	4620      	mov	r0, r4
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 80095b4:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095b6:	4b26      	ldr	r3, [pc, #152]	; (8009650 <xTaskResumeAll+0xd8>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	b31b      	cbz	r3, 8009604 <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095bc:	4b24      	ldr	r3, [pc, #144]	; (8009650 <xTaskResumeAll+0xd8>)
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095c2:	f104 0018 	add.w	r0, r4, #24
 80095c6:	f7ff f86c 	bl	80086a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095ca:	1d25      	adds	r5, r4, #4
 80095cc:	4628      	mov	r0, r5
 80095ce:	f7ff f868 	bl	80086a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095d4:	2201      	movs	r2, #1
 80095d6:	409a      	lsls	r2, r3
 80095d8:	491e      	ldr	r1, [pc, #120]	; (8009654 <xTaskResumeAll+0xdc>)
 80095da:	6808      	ldr	r0, [r1, #0]
 80095dc:	4302      	orrs	r2, r0
 80095de:	600a      	str	r2, [r1, #0]
 80095e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80095e4:	009a      	lsls	r2, r3, #2
 80095e6:	4629      	mov	r1, r5
 80095e8:	481b      	ldr	r0, [pc, #108]	; (8009658 <xTaskResumeAll+0xe0>)
 80095ea:	4410      	add	r0, r2
 80095ec:	f7ff f833 	bl	8008656 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80095f2:	4b1a      	ldr	r3, [pc, #104]	; (800965c <xTaskResumeAll+0xe4>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d3dc      	bcc.n	80095b6 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 80095fc:	4b18      	ldr	r3, [pc, #96]	; (8009660 <xTaskResumeAll+0xe8>)
 80095fe:	2201      	movs	r2, #1
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	e7d8      	b.n	80095b6 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8009604:	b10c      	cbz	r4, 800960a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8009606:	f7ff fccf 	bl	8008fa8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800960a:	4b16      	ldr	r3, [pc, #88]	; (8009664 <xTaskResumeAll+0xec>)
 800960c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800960e:	b154      	cbz	r4, 8009626 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8009610:	f7ff ff26 	bl	8009460 <xTaskIncrementTick>
 8009614:	b110      	cbz	r0, 800961c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8009616:	4b12      	ldr	r3, [pc, #72]	; (8009660 <xTaskResumeAll+0xe8>)
 8009618:	2201      	movs	r2, #1
 800961a:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800961c:	3c01      	subs	r4, #1
 800961e:	d1f7      	bne.n	8009610 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8009620:	4b10      	ldr	r3, [pc, #64]	; (8009664 <xTaskResumeAll+0xec>)
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8009626:	4b0e      	ldr	r3, [pc, #56]	; (8009660 <xTaskResumeAll+0xe8>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	b15b      	cbz	r3, 8009644 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 800962c:	4b0e      	ldr	r3, [pc, #56]	; (8009668 <xTaskResumeAll+0xf0>)
 800962e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800963c:	2401      	movs	r4, #1
 800963e:	e7b5      	b.n	80095ac <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8009640:	2400      	movs	r4, #0
 8009642:	e7b3      	b.n	80095ac <xTaskResumeAll+0x34>
 8009644:	2400      	movs	r4, #0
 8009646:	e7b1      	b.n	80095ac <xTaskResumeAll+0x34>
 8009648:	200008bc 	.word	0x200008bc
 800964c:	200008b0 	.word	0x200008b0
 8009650:	200008f8 	.word	0x200008f8
 8009654:	200008c4 	.word	0x200008c4
 8009658:	20000820 	.word	0x20000820
 800965c:	20000814 	.word	0x20000814
 8009660:	2000093c 	.word	0x2000093c
 8009664:	200008b8 	.word	0x200008b8
 8009668:	e000ed04 	.word	0xe000ed04

0800966c <vTaskDelayUntil>:
	{
 800966c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 800966e:	b150      	cbz	r0, 8009686 <vTaskDelayUntil+0x1a>
 8009670:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 8009672:	b989      	cbnz	r1, 8009698 <vTaskDelayUntil+0x2c>
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	e7fe      	b.n	8009684 <vTaskDelayUntil+0x18>
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	e7fe      	b.n	8009696 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
 8009698:	4b1a      	ldr	r3, [pc, #104]	; (8009704 <vTaskDelayUntil+0x98>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	b143      	cbz	r3, 80096b0 <vTaskDelayUntil+0x44>
 800969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	e7fe      	b.n	80096ae <vTaskDelayUntil+0x42>
 80096b0:	460c      	mov	r4, r1
		vTaskSuspendAll();
 80096b2:	f7ff fec7 	bl	8009444 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 80096b6:	4b14      	ldr	r3, [pc, #80]	; (8009708 <vTaskDelayUntil+0x9c>)
 80096b8:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80096ba:	682a      	ldr	r2, [r5, #0]
 80096bc:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
 80096be:	4282      	cmp	r2, r0
 80096c0:	d918      	bls.n	80096f4 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80096c2:	42a2      	cmp	r2, r4
 80096c4:	d80c      	bhi.n	80096e0 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
 80096c6:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
 80096c8:	f7ff ff56 	bl	8009578 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80096cc:	b938      	cbnz	r0, 80096de <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
 80096ce:	4b0f      	ldr	r3, [pc, #60]	; (800970c <vTaskDelayUntil+0xa0>)
 80096d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	f3bf 8f6f 	isb	sy
	}
 80096de:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80096e0:	42a0      	cmp	r0, r4
 80096e2:	d301      	bcc.n	80096e8 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 80096e4:	602c      	str	r4, [r5, #0]
 80096e6:	e7ef      	b.n	80096c8 <vTaskDelayUntil+0x5c>
 80096e8:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80096ea:	2100      	movs	r1, #0
 80096ec:	1a20      	subs	r0, r4, r0
 80096ee:	f7ff fda1 	bl	8009234 <prvAddCurrentTaskToDelayedList>
 80096f2:	e7e9      	b.n	80096c8 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80096f4:	42a2      	cmp	r2, r4
 80096f6:	d801      	bhi.n	80096fc <vTaskDelayUntil+0x90>
 80096f8:	42a0      	cmp	r0, r4
 80096fa:	d201      	bcs.n	8009700 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
 80096fc:	602c      	str	r4, [r5, #0]
 80096fe:	e7f4      	b.n	80096ea <vTaskDelayUntil+0x7e>
 8009700:	602c      	str	r4, [r5, #0]
 8009702:	e7e1      	b.n	80096c8 <vTaskDelayUntil+0x5c>
 8009704:	200008bc 	.word	0x200008bc
 8009708:	20000938 	.word	0x20000938
 800970c:	e000ed04 	.word	0xe000ed04

08009710 <vTaskDelay>:
	{
 8009710:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009712:	b1a8      	cbz	r0, 8009740 <vTaskDelay+0x30>
 8009714:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8009716:	4b0f      	ldr	r3, [pc, #60]	; (8009754 <vTaskDelay+0x44>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	b143      	cbz	r3, 800972e <vTaskDelay+0x1e>
 800971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009720:	f383 8811 	msr	BASEPRI, r3
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	e7fe      	b.n	800972c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800972e:	f7ff fe89 	bl	8009444 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009732:	2100      	movs	r1, #0
 8009734:	4620      	mov	r0, r4
 8009736:	f7ff fd7d 	bl	8009234 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800973a:	f7ff ff1d 	bl	8009578 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800973e:	b938      	cbnz	r0, 8009750 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8009740:	4b05      	ldr	r3, [pc, #20]	; (8009758 <vTaskDelay+0x48>)
 8009742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009746:	601a      	str	r2, [r3, #0]
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	f3bf 8f6f 	isb	sy
	}
 8009750:	bd10      	pop	{r4, pc}
 8009752:	bf00      	nop
 8009754:	200008bc 	.word	0x200008bc
 8009758:	e000ed04 	.word	0xe000ed04

0800975c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800975c:	4b27      	ldr	r3, [pc, #156]	; (80097fc <vTaskSwitchContext+0xa0>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	b11b      	cbz	r3, 800976a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009762:	4b27      	ldr	r3, [pc, #156]	; (8009800 <vTaskSwitchContext+0xa4>)
 8009764:	2201      	movs	r2, #1
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800976a:	4b25      	ldr	r3, [pc, #148]	; (8009800 <vTaskSwitchContext+0xa4>)
 800976c:	2200      	movs	r2, #0
 800976e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009770:	4b24      	ldr	r3, [pc, #144]	; (8009804 <vTaskSwitchContext+0xa8>)
 8009772:	681a      	ldr	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009774:	4b24      	ldr	r3, [pc, #144]	; (8009808 <vTaskSwitchContext+0xac>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	429a      	cmp	r2, r3
 800977a:	d905      	bls.n	8009788 <vTaskSwitchContext+0x2c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800977c:	4923      	ldr	r1, [pc, #140]	; (800980c <vTaskSwitchContext+0xb0>)
 800977e:	6808      	ldr	r0, [r1, #0]
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8009784:	440b      	add	r3, r1
 8009786:	6583      	str	r3, [r0, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009788:	4b1f      	ldr	r3, [pc, #124]	; (8009808 <vTaskSwitchContext+0xac>)
 800978a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800978c:	4b20      	ldr	r3, [pc, #128]	; (8009810 <vTaskSwitchContext+0xb4>)
 800978e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009790:	fab3 f383 	clz	r3, r3
 8009794:	b2db      	uxtb	r3, r3
 8009796:	f1c3 031f 	rsb	r3, r3, #31
 800979a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800979e:	008a      	lsls	r2, r1, #2
 80097a0:	491c      	ldr	r1, [pc, #112]	; (8009814 <vTaskSwitchContext+0xb8>)
 80097a2:	588a      	ldr	r2, [r1, r2]
 80097a4:	b942      	cbnz	r2, 80097b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80097a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097aa:	f383 8811 	msr	BASEPRI, r3
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f3bf 8f4f 	dsb	sy
 80097b6:	e7fe      	b.n	80097b6 <vTaskSwitchContext+0x5a>
{
 80097b8:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ba:	4816      	ldr	r0, [pc, #88]	; (8009814 <vTaskSwitchContext+0xb8>)
 80097bc:	009a      	lsls	r2, r3, #2
 80097be:	18d4      	adds	r4, r2, r3
 80097c0:	00a1      	lsls	r1, r4, #2
 80097c2:	4401      	add	r1, r0
 80097c4:	684c      	ldr	r4, [r1, #4]
 80097c6:	6864      	ldr	r4, [r4, #4]
 80097c8:	604c      	str	r4, [r1, #4]
 80097ca:	441a      	add	r2, r3
 80097cc:	0091      	lsls	r1, r2, #2
 80097ce:	3108      	adds	r1, #8
 80097d0:	4408      	add	r0, r1
 80097d2:	4284      	cmp	r4, r0
 80097d4:	d00b      	beq.n	80097ee <vTaskSwitchContext+0x92>
 80097d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80097da:	009a      	lsls	r2, r3, #2
 80097dc:	4b0d      	ldr	r3, [pc, #52]	; (8009814 <vTaskSwitchContext+0xb8>)
 80097de:	4413      	add	r3, r2
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	68da      	ldr	r2, [r3, #12]
 80097e4:	4b09      	ldr	r3, [pc, #36]	; (800980c <vTaskSwitchContext+0xb0>)
 80097e6:	601a      	str	r2, [r3, #0]
}
 80097e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097ec:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ee:	6861      	ldr	r1, [r4, #4]
 80097f0:	4808      	ldr	r0, [pc, #32]	; (8009814 <vTaskSwitchContext+0xb8>)
 80097f2:	2214      	movs	r2, #20
 80097f4:	fb02 0203 	mla	r2, r2, r3, r0
 80097f8:	6051      	str	r1, [r2, #4]
 80097fa:	e7ec      	b.n	80097d6 <vTaskSwitchContext+0x7a>
 80097fc:	200008bc 	.word	0x200008bc
 8009800:	2000093c 	.word	0x2000093c
 8009804:	200032a0 	.word	0x200032a0
 8009808:	200008ac 	.word	0x200008ac
 800980c:	20000814 	.word	0x20000814
 8009810:	200008c4 	.word	0x200008c4
 8009814:	20000820 	.word	0x20000820

08009818 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009818:	b940      	cbnz	r0, 800982c <vTaskPlaceOnEventList+0x14>
 800981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	e7fe      	b.n	800982a <vTaskPlaceOnEventList+0x12>
{
 800982c:	b510      	push	{r4, lr}
 800982e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009830:	4b04      	ldr	r3, [pc, #16]	; (8009844 <vTaskPlaceOnEventList+0x2c>)
 8009832:	6819      	ldr	r1, [r3, #0]
 8009834:	3118      	adds	r1, #24
 8009836:	f7fe ff1a 	bl	800866e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800983a:	2101      	movs	r1, #1
 800983c:	4620      	mov	r0, r4
 800983e:	f7ff fcf9 	bl	8009234 <prvAddCurrentTaskToDelayedList>
}
 8009842:	bd10      	pop	{r4, pc}
 8009844:	20000814 	.word	0x20000814

08009848 <vTaskPlaceOnEventListRestricted>:
	{
 8009848:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800984a:	b940      	cbnz	r0, 800985e <vTaskPlaceOnEventListRestricted+0x16>
 800984c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009850:	f383 8811 	msr	BASEPRI, r3
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	e7fe      	b.n	800985c <vTaskPlaceOnEventListRestricted+0x14>
 800985e:	460c      	mov	r4, r1
 8009860:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009862:	4a06      	ldr	r2, [pc, #24]	; (800987c <vTaskPlaceOnEventListRestricted+0x34>)
 8009864:	6811      	ldr	r1, [r2, #0]
 8009866:	3118      	adds	r1, #24
 8009868:	f7fe fef5 	bl	8008656 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800986c:	b10d      	cbz	r5, 8009872 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 800986e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009872:	4629      	mov	r1, r5
 8009874:	4620      	mov	r0, r4
 8009876:	f7ff fcdd 	bl	8009234 <prvAddCurrentTaskToDelayedList>
	}
 800987a:	bd38      	pop	{r3, r4, r5, pc}
 800987c:	20000814 	.word	0x20000814

08009880 <xTaskRemoveFromEventList>:
{
 8009880:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009882:	68c3      	ldr	r3, [r0, #12]
 8009884:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009886:	b944      	cbnz	r4, 800989a <xTaskRemoveFromEventList+0x1a>
 8009888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	e7fe      	b.n	8009898 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800989a:	f104 0518 	add.w	r5, r4, #24
 800989e:	4628      	mov	r0, r5
 80098a0:	f7fe feff 	bl	80086a2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098a4:	4b13      	ldr	r3, [pc, #76]	; (80098f4 <xTaskRemoveFromEventList+0x74>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	b9e3      	cbnz	r3, 80098e4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098aa:	1d25      	adds	r5, r4, #4
 80098ac:	4628      	mov	r0, r5
 80098ae:	f7fe fef8 	bl	80086a2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80098b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80098b4:	2201      	movs	r2, #1
 80098b6:	409a      	lsls	r2, r3
 80098b8:	490f      	ldr	r1, [pc, #60]	; (80098f8 <xTaskRemoveFromEventList+0x78>)
 80098ba:	6808      	ldr	r0, [r1, #0]
 80098bc:	4302      	orrs	r2, r0
 80098be:	600a      	str	r2, [r1, #0]
 80098c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80098c4:	009a      	lsls	r2, r3, #2
 80098c6:	4629      	mov	r1, r5
 80098c8:	480c      	ldr	r0, [pc, #48]	; (80098fc <xTaskRemoveFromEventList+0x7c>)
 80098ca:	4410      	add	r0, r2
 80098cc:	f7fe fec3 	bl	8008656 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80098d2:	4b0b      	ldr	r3, [pc, #44]	; (8009900 <xTaskRemoveFromEventList+0x80>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d8:	429a      	cmp	r2, r3
 80098da:	d908      	bls.n	80098ee <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80098dc:	2001      	movs	r0, #1
 80098de:	4b09      	ldr	r3, [pc, #36]	; (8009904 <xTaskRemoveFromEventList+0x84>)
 80098e0:	6018      	str	r0, [r3, #0]
}
 80098e2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80098e4:	4629      	mov	r1, r5
 80098e6:	4808      	ldr	r0, [pc, #32]	; (8009908 <xTaskRemoveFromEventList+0x88>)
 80098e8:	f7fe feb5 	bl	8008656 <vListInsertEnd>
 80098ec:	e7f0      	b.n	80098d0 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 80098ee:	2000      	movs	r0, #0
	return xReturn;
 80098f0:	e7f7      	b.n	80098e2 <xTaskRemoveFromEventList+0x62>
 80098f2:	bf00      	nop
 80098f4:	200008bc 	.word	0x200008bc
 80098f8:	200008c4 	.word	0x200008c4
 80098fc:	20000820 	.word	0x20000820
 8009900:	20000814 	.word	0x20000814
 8009904:	2000093c 	.word	0x2000093c
 8009908:	200008f8 	.word	0x200008f8

0800990c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800990c:	4b03      	ldr	r3, [pc, #12]	; (800991c <vTaskInternalSetTimeOutState+0x10>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009912:	4b03      	ldr	r3, [pc, #12]	; (8009920 <vTaskInternalSetTimeOutState+0x14>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6043      	str	r3, [r0, #4]
}
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	200008f4 	.word	0x200008f4
 8009920:	20000938 	.word	0x20000938

08009924 <xTaskCheckForTimeOut>:
{
 8009924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8009926:	b150      	cbz	r0, 800993e <xTaskCheckForTimeOut+0x1a>
 8009928:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800992a:	b989      	cbnz	r1, 8009950 <xTaskCheckForTimeOut+0x2c>
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	e7fe      	b.n	800993c <xTaskCheckForTimeOut+0x18>
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	e7fe      	b.n	800994e <xTaskCheckForTimeOut+0x2a>
 8009950:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8009952:	f000 fde7 	bl	800a524 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009956:	4b11      	ldr	r3, [pc, #68]	; (800999c <xTaskCheckForTimeOut+0x78>)
 8009958:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800995a:	6868      	ldr	r0, [r5, #4]
 800995c:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 800995e:	6823      	ldr	r3, [r4, #0]
 8009960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009964:	d016      	beq.n	8009994 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009966:	682f      	ldr	r7, [r5, #0]
 8009968:	4e0d      	ldr	r6, [pc, #52]	; (80099a0 <xTaskCheckForTimeOut+0x7c>)
 800996a:	6836      	ldr	r6, [r6, #0]
 800996c:	42b7      	cmp	r7, r6
 800996e:	d001      	beq.n	8009974 <xTaskCheckForTimeOut+0x50>
 8009970:	4288      	cmp	r0, r1
 8009972:	d911      	bls.n	8009998 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009974:	4293      	cmp	r3, r2
 8009976:	d803      	bhi.n	8009980 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8009978:	2300      	movs	r3, #0
 800997a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800997c:	2401      	movs	r4, #1
 800997e:	e005      	b.n	800998c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8009980:	1a9b      	subs	r3, r3, r2
 8009982:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009984:	4628      	mov	r0, r5
 8009986:	f7ff ffc1 	bl	800990c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800998a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800998c:	f000 fdec 	bl	800a568 <vPortExitCritical>
}
 8009990:	4620      	mov	r0, r4
 8009992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8009994:	2400      	movs	r4, #0
 8009996:	e7f9      	b.n	800998c <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8009998:	2401      	movs	r4, #1
 800999a:	e7f7      	b.n	800998c <xTaskCheckForTimeOut+0x68>
 800999c:	20000938 	.word	0x20000938
 80099a0:	200008f4 	.word	0x200008f4

080099a4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80099a4:	4b01      	ldr	r3, [pc, #4]	; (80099ac <vTaskMissedYield+0x8>)
 80099a6:	2201      	movs	r2, #1
 80099a8:	601a      	str	r2, [r3, #0]
}
 80099aa:	4770      	bx	lr
 80099ac:	2000093c 	.word	0x2000093c

080099b0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80099b0:	4b01      	ldr	r3, [pc, #4]	; (80099b8 <xTaskGetCurrentTaskHandle+0x8>)
 80099b2:	6818      	ldr	r0, [r3, #0]
	}
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	20000814 	.word	0x20000814

080099bc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80099bc:	4b05      	ldr	r3, [pc, #20]	; (80099d4 <xTaskGetSchedulerState+0x18>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	b133      	cbz	r3, 80099d0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099c2:	4b05      	ldr	r3, [pc, #20]	; (80099d8 <xTaskGetSchedulerState+0x1c>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	b10b      	cbz	r3, 80099cc <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80099c8:	2000      	movs	r0, #0
	}
 80099ca:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80099cc:	2002      	movs	r0, #2
 80099ce:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099d0:	2001      	movs	r0, #1
 80099d2:	4770      	bx	lr
 80099d4:	2000090c 	.word	0x2000090c
 80099d8:	200008bc 	.word	0x200008bc

080099dc <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80099dc:	2800      	cmp	r0, #0
 80099de:	d050      	beq.n	8009a82 <xTaskPriorityInherit+0xa6>
	{
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80099e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80099e6:	4928      	ldr	r1, [pc, #160]	; (8009a88 <xTaskPriorityInherit+0xac>)
 80099e8:	6809      	ldr	r1, [r1, #0]
 80099ea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80099ec:	428a      	cmp	r2, r1
 80099ee:	d23e      	bcs.n	8009a6e <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099f0:	6981      	ldr	r1, [r0, #24]
 80099f2:	2900      	cmp	r1, #0
 80099f4:	db05      	blt.n	8009a02 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099f6:	4924      	ldr	r1, [pc, #144]	; (8009a88 <xTaskPriorityInherit+0xac>)
 80099f8:	6809      	ldr	r1, [r1, #0]
 80099fa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80099fc:	f1c1 0107 	rsb	r1, r1, #7
 8009a00:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009a02:	6960      	ldr	r0, [r4, #20]
 8009a04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009a08:	0091      	lsls	r1, r2, #2
 8009a0a:	4a20      	ldr	r2, [pc, #128]	; (8009a8c <xTaskPriorityInherit+0xb0>)
 8009a0c:	440a      	add	r2, r1
 8009a0e:	4290      	cmp	r0, r2
 8009a10:	d005      	beq.n	8009a1e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a12:	4a1d      	ldr	r2, [pc, #116]	; (8009a88 <xTaskPriorityInherit+0xac>)
 8009a14:	6812      	ldr	r2, [r2, #0]
 8009a16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009a18:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8009a1a:	2001      	movs	r0, #1
	}
 8009a1c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a1e:	1d25      	adds	r5, r4, #4
 8009a20:	4628      	mov	r0, r5
 8009a22:	f7fe fe3e 	bl	80086a2 <uxListRemove>
 8009a26:	b968      	cbnz	r0, 8009a44 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009a28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a2a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009a2e:	008a      	lsls	r2, r1, #2
 8009a30:	4916      	ldr	r1, [pc, #88]	; (8009a8c <xTaskPriorityInherit+0xb0>)
 8009a32:	588a      	ldr	r2, [r1, r2]
 8009a34:	b932      	cbnz	r2, 8009a44 <xTaskPriorityInherit+0x68>
 8009a36:	2201      	movs	r2, #1
 8009a38:	409a      	lsls	r2, r3
 8009a3a:	4915      	ldr	r1, [pc, #84]	; (8009a90 <xTaskPriorityInherit+0xb4>)
 8009a3c:	680b      	ldr	r3, [r1, #0]
 8009a3e:	ea23 0302 	bic.w	r3, r3, r2
 8009a42:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a44:	4b10      	ldr	r3, [pc, #64]	; (8009a88 <xTaskPriorityInherit+0xac>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009a4c:	2401      	movs	r4, #1
 8009a4e:	fa04 f203 	lsl.w	r2, r4, r3
 8009a52:	490f      	ldr	r1, [pc, #60]	; (8009a90 <xTaskPriorityInherit+0xb4>)
 8009a54:	6808      	ldr	r0, [r1, #0]
 8009a56:	4302      	orrs	r2, r0
 8009a58:	600a      	str	r2, [r1, #0]
 8009a5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009a5e:	009a      	lsls	r2, r3, #2
 8009a60:	4629      	mov	r1, r5
 8009a62:	480a      	ldr	r0, [pc, #40]	; (8009a8c <xTaskPriorityInherit+0xb0>)
 8009a64:	4410      	add	r0, r2
 8009a66:	f7fe fdf6 	bl	8008656 <vListInsertEnd>
				xReturn = pdTRUE;
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	e7d6      	b.n	8009a1c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009a6e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009a70:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <xTaskPriorityInherit+0xac>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d201      	bcs.n	8009a7e <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
 8009a7a:	2001      	movs	r0, #1
		return xReturn;
 8009a7c:	e7ce      	b.n	8009a1c <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 8009a7e:	2000      	movs	r0, #0
 8009a80:	e7cc      	b.n	8009a1c <xTaskPriorityInherit+0x40>
 8009a82:	2000      	movs	r0, #0
	}
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	20000814 	.word	0x20000814
 8009a8c:	20000820 	.word	0x20000820
 8009a90:	200008c4 	.word	0x200008c4

08009a94 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d049      	beq.n	8009b2c <xTaskPriorityDisinherit+0x98>
	{
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8009a9c:	4a26      	ldr	r2, [pc, #152]	; (8009b38 <xTaskPriorityDisinherit+0xa4>)
 8009a9e:	6812      	ldr	r2, [r2, #0]
 8009aa0:	4282      	cmp	r2, r0
 8009aa2:	d008      	beq.n	8009ab6 <xTaskPriorityDisinherit+0x22>
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	e7fe      	b.n	8009ab4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ab6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8009ab8:	b942      	cbnz	r2, 8009acc <xTaskPriorityDisinherit+0x38>
 8009aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	e7fe      	b.n	8009aca <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8009acc:	3a01      	subs	r2, #1
 8009ace:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ad0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8009ad2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009ad4:	4288      	cmp	r0, r1
 8009ad6:	d02b      	beq.n	8009b30 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ad8:	bb62      	cbnz	r2, 8009b34 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ada:	1d25      	adds	r5, r4, #4
 8009adc:	4628      	mov	r0, r5
 8009ade:	f7fe fde0 	bl	80086a2 <uxListRemove>
 8009ae2:	b970      	cbnz	r0, 8009b02 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009ae4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009ae6:	2314      	movs	r3, #20
 8009ae8:	fb03 f302 	mul.w	r3, r3, r2
 8009aec:	4913      	ldr	r1, [pc, #76]	; (8009b3c <xTaskPriorityDisinherit+0xa8>)
 8009aee:	58cb      	ldr	r3, [r1, r3]
 8009af0:	b93b      	cbnz	r3, 8009b02 <xTaskPriorityDisinherit+0x6e>
 8009af2:	2301      	movs	r3, #1
 8009af4:	fa03 f202 	lsl.w	r2, r3, r2
 8009af8:	4911      	ldr	r1, [pc, #68]	; (8009b40 <xTaskPriorityDisinherit+0xac>)
 8009afa:	680b      	ldr	r3, [r1, #0]
 8009afc:	ea23 0302 	bic.w	r3, r3, r2
 8009b00:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b02:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009b04:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b06:	f1c3 0207 	rsb	r2, r3, #7
 8009b0a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b0c:	2401      	movs	r4, #1
 8009b0e:	fa04 f203 	lsl.w	r2, r4, r3
 8009b12:	490b      	ldr	r1, [pc, #44]	; (8009b40 <xTaskPriorityDisinherit+0xac>)
 8009b14:	6808      	ldr	r0, [r1, #0]
 8009b16:	4302      	orrs	r2, r0
 8009b18:	600a      	str	r2, [r1, #0]
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	4a07      	ldr	r2, [pc, #28]	; (8009b3c <xTaskPriorityDisinherit+0xa8>)
 8009b1e:	2014      	movs	r0, #20
 8009b20:	fb00 2003 	mla	r0, r0, r3, r2
 8009b24:	f7fe fd97 	bl	8008656 <vListInsertEnd>
					xReturn = pdTRUE;
 8009b28:	4620      	mov	r0, r4
	}
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8009b2c:	2000      	movs	r0, #0
	}
 8009b2e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8009b30:	2000      	movs	r0, #0
 8009b32:	e7fa      	b.n	8009b2a <xTaskPriorityDisinherit+0x96>
 8009b34:	2000      	movs	r0, #0
		return xReturn;
 8009b36:	e7f8      	b.n	8009b2a <xTaskPriorityDisinherit+0x96>
 8009b38:	20000814 	.word	0x20000814
 8009b3c:	20000820 	.word	0x20000820
 8009b40:	200008c4 	.word	0x200008c4

08009b44 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d055      	beq.n	8009bf4 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8009b4c:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8009b4e:	b940      	cbnz	r0, 8009b62 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8009b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	e7fe      	b.n	8009b60 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009b62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b64:	428a      	cmp	r2, r1
 8009b66:	d200      	bcs.n	8009b6a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009b68:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009b6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009b6c:	4291      	cmp	r1, r2
 8009b6e:	d001      	beq.n	8009b74 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009b70:	2801      	cmp	r0, #1
 8009b72:	d000      	beq.n	8009b76 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8009b74:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8009b76:	4820      	ldr	r0, [pc, #128]	; (8009bf8 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8009b78:	6800      	ldr	r0, [r0, #0]
 8009b7a:	4298      	cmp	r0, r3
 8009b7c:	d108      	bne.n	8009b90 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	e7fe      	b.n	8009b8e <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 8009b90:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b92:	6998      	ldr	r0, [r3, #24]
 8009b94:	2800      	cmp	r0, #0
 8009b96:	db02      	blt.n	8009b9e <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b98:	f1c2 0207 	rsb	r2, r2, #7
 8009b9c:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b9e:	695a      	ldr	r2, [r3, #20]
 8009ba0:	4816      	ldr	r0, [pc, #88]	; (8009bfc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009ba2:	2414      	movs	r4, #20
 8009ba4:	fb04 0101 	mla	r1, r4, r1, r0
 8009ba8:	428a      	cmp	r2, r1
 8009baa:	d1e3      	bne.n	8009b74 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8009bac:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bae:	1d1d      	adds	r5, r3, #4
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	f7fe fd76 	bl	80086a2 <uxListRemove>
 8009bb6:	b970      	cbnz	r0, 8009bd6 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009bb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009bba:	2314      	movs	r3, #20
 8009bbc:	fb03 f302 	mul.w	r3, r3, r2
 8009bc0:	490e      	ldr	r1, [pc, #56]	; (8009bfc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009bc2:	58cb      	ldr	r3, [r1, r3]
 8009bc4:	b93b      	cbnz	r3, 8009bd6 <vTaskPriorityDisinheritAfterTimeout+0x92>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	fa03 f202 	lsl.w	r2, r3, r2
 8009bcc:	490c      	ldr	r1, [pc, #48]	; (8009c00 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8009bce:	680b      	ldr	r3, [r1, #0]
 8009bd0:	ea23 0302 	bic.w	r3, r3, r2
 8009bd4:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 8009bd6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009bd8:	2301      	movs	r3, #1
 8009bda:	4093      	lsls	r3, r2
 8009bdc:	4908      	ldr	r1, [pc, #32]	; (8009c00 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8009bde:	6808      	ldr	r0, [r1, #0]
 8009be0:	4303      	orrs	r3, r0
 8009be2:	600b      	str	r3, [r1, #0]
 8009be4:	4629      	mov	r1, r5
 8009be6:	4b05      	ldr	r3, [pc, #20]	; (8009bfc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009be8:	2014      	movs	r0, #20
 8009bea:	fb00 3002 	mla	r0, r0, r2, r3
 8009bee:	f7fe fd32 	bl	8008656 <vListInsertEnd>
	}
 8009bf2:	e7bf      	b.n	8009b74 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	20000814 	.word	0x20000814
 8009bfc:	20000820 	.word	0x20000820
 8009c00:	200008c4 	.word	0x200008c4

08009c04 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009c04:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <pvTaskIncrementMutexHeldCount+0x18>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	b123      	cbz	r3, 8009c14 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8009c0a:	4b04      	ldr	r3, [pc, #16]	; (8009c1c <pvTaskIncrementMutexHeldCount+0x18>)
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009c10:	3301      	adds	r3, #1
 8009c12:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
 8009c14:	4b01      	ldr	r3, [pc, #4]	; (8009c1c <pvTaskIncrementMutexHeldCount+0x18>)
 8009c16:	6818      	ldr	r0, [r3, #0]
	}
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	20000814 	.word	0x20000814

08009c20 <ulTaskNotifyTake>:
	{
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	4605      	mov	r5, r0
 8009c24:	460c      	mov	r4, r1
		taskENTER_CRITICAL();
 8009c26:	f000 fc7d 	bl	800a524 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009c2a:	4b19      	ldr	r3, [pc, #100]	; (8009c90 <ulTaskNotifyTake+0x70>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c30:	b92b      	cbnz	r3, 8009c3e <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009c32:	4b17      	ldr	r3, [pc, #92]	; (8009c90 <ulTaskNotifyTake+0x70>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 8009c3c:	b9ac      	cbnz	r4, 8009c6a <ulTaskNotifyTake+0x4a>
		taskEXIT_CRITICAL();
 8009c3e:	f000 fc93 	bl	800a568 <vPortExitCritical>
		taskENTER_CRITICAL();
 8009c42:	f000 fc6f 	bl	800a524 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009c46:	4b12      	ldr	r3, [pc, #72]	; (8009c90 <ulTaskNotifyTake+0x70>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if( ulReturn != 0UL )
 8009c4c:	b124      	cbz	r4, 8009c58 <ulTaskNotifyTake+0x38>
				if( xClearCountOnExit != pdFALSE )
 8009c4e:	b9cd      	cbnz	r5, 8009c84 <ulTaskNotifyTake+0x64>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8009c50:	4b0f      	ldr	r3, [pc, #60]	; (8009c90 <ulTaskNotifyTake+0x70>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	1e62      	subs	r2, r4, #1
 8009c56:	65da      	str	r2, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c58:	4b0d      	ldr	r3, [pc, #52]	; (8009c90 <ulTaskNotifyTake+0x70>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 8009c62:	f000 fc81 	bl	800a568 <vPortExitCritical>
	}
 8009c66:	4620      	mov	r0, r4
 8009c68:	bd38      	pop	{r3, r4, r5, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f7ff fae1 	bl	8009234 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8009c72:	4b08      	ldr	r3, [pc, #32]	; (8009c94 <ulTaskNotifyTake+0x74>)
 8009c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c78:	601a      	str	r2, [r3, #0]
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	e7dc      	b.n	8009c3e <ulTaskNotifyTake+0x1e>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009c84:	4b02      	ldr	r3, [pc, #8]	; (8009c90 <ulTaskNotifyTake+0x70>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c8c:	e7e4      	b.n	8009c58 <ulTaskNotifyTake+0x38>
 8009c8e:	bf00      	nop
 8009c90:	20000814 	.word	0x20000814
 8009c94:	e000ed04 	.word	0xe000ed04

08009c98 <xTaskNotifyWait>:
	{
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	4607      	mov	r7, r0
 8009c9c:	460d      	mov	r5, r1
 8009c9e:	4614      	mov	r4, r2
 8009ca0:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 8009ca2:	f000 fc3f 	bl	800a524 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009ca6:	4b20      	ldr	r3, [pc, #128]	; (8009d28 <xTaskNotifyWait+0x90>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d00a      	beq.n	8009cca <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009cb4:	4b1c      	ldr	r3, [pc, #112]	; (8009d28 <xTaskNotifyWait+0x90>)
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8009cba:	ea20 0007 	bic.w	r0, r0, r7
 8009cbe:	65d0      	str	r0, [r2, #92]	; 0x5c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 8009cc8:	b9ce      	cbnz	r6, 8009cfe <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 8009cca:	f000 fc4d 	bl	800a568 <vPortExitCritical>
		taskENTER_CRITICAL();
 8009cce:	f000 fc29 	bl	800a524 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8009cd2:	b11c      	cbz	r4, 8009cdc <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009cd4:	4b14      	ldr	r3, [pc, #80]	; (8009d28 <xTaskNotifyWait+0x90>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cda:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009cdc:	4b12      	ldr	r3, [pc, #72]	; (8009d28 <xTaskNotifyWait+0x90>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d016      	beq.n	8009d18 <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 8009cea:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009cec:	4b0e      	ldr	r3, [pc, #56]	; (8009d28 <xTaskNotifyWait+0x90>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 8009cf6:	f000 fc37 	bl	800a568 <vPortExitCritical>
	}
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009cfe:	4611      	mov	r1, r2
 8009d00:	4630      	mov	r0, r6
 8009d02:	f7ff fa97 	bl	8009234 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8009d06:	4b09      	ldr	r3, [pc, #36]	; (8009d2c <xTaskNotifyWait+0x94>)
 8009d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d0c:	601a      	str	r2, [r3, #0]
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	e7d8      	b.n	8009cca <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009d18:	4b03      	ldr	r3, [pc, #12]	; (8009d28 <xTaskNotifyWait+0x90>)
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8009d1e:	ea23 0505 	bic.w	r5, r3, r5
 8009d22:	65d5      	str	r5, [r2, #92]	; 0x5c
				xReturn = pdTRUE;
 8009d24:	2401      	movs	r4, #1
 8009d26:	e7e1      	b.n	8009cec <xTaskNotifyWait+0x54>
 8009d28:	20000814 	.word	0x20000814
 8009d2c:	e000ed04 	.word	0xe000ed04

08009d30 <xTaskGenericNotifyFromISR>:
	{
 8009d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d34:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
 8009d36:	b940      	cbnz	r0, 8009d4a <xTaskGenericNotifyFromISR+0x1a>
 8009d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3c:	f383 8811 	msr	BASEPRI, r3
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	e7fe      	b.n	8009d48 <xTaskGenericNotifyFromISR+0x18>
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	4699      	mov	r9, r3
 8009d4e:	4690      	mov	r8, r2
 8009d50:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d52:	f000 fd11 	bl	800a778 <vPortValidateInterruptPriority>
	__asm volatile
 8009d56:	f3ef 8711 	mrs	r7, BASEPRI
 8009d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8009d6a:	f1b9 0f00 	cmp.w	r9, #0
 8009d6e:	d002      	beq.n	8009d76 <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009d70:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009d72:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009d76:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009d7a:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			switch( eAction )
 8009d82:	f1b8 0f04 	cmp.w	r8, #4
 8009d86:	d81c      	bhi.n	8009dc2 <xTaskGenericNotifyFromISR+0x92>
 8009d88:	e8df f008 	tbb	[pc, r8]
 8009d8c:	130e0328 	.word	0x130e0328
 8009d90:	16          	.byte	0x16
 8009d91:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 8009d92:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009d94:	4315      	orrs	r5, r2
 8009d96:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 8009d98:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d024      	beq.n	8009de8 <xTaskGenericNotifyFromISR+0xb8>
	__asm volatile
 8009d9e:	f387 8811 	msr	BASEPRI, r7
	}
 8009da2:	4628      	mov	r0, r5
 8009da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 8009da8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009daa:	3201      	adds	r2, #1
 8009dac:	65e2      	str	r2, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 8009dae:	2501      	movs	r5, #1
					break;
 8009db0:	e7f3      	b.n	8009d9a <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 8009db2:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 8009db4:	2501      	movs	r5, #1
					break;
 8009db6:	e7f0      	b.n	8009d9a <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d011      	beq.n	8009de0 <xTaskGenericNotifyFromISR+0xb0>
						pxTCB->ulNotifiedValue = ulValue;
 8009dbc:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 8009dbe:	2501      	movs	r5, #1
 8009dc0:	e7eb      	b.n	8009d9a <xTaskGenericNotifyFromISR+0x6a>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009dc2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009dc4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009dc8:	d00c      	beq.n	8009de4 <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 8009dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	e7fe      	b.n	8009dda <xTaskGenericNotifyFromISR+0xaa>
	BaseType_t xReturn = pdPASS;
 8009ddc:	2501      	movs	r5, #1
 8009dde:	e7dc      	b.n	8009d9a <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 8009de0:	2500      	movs	r5, #0
 8009de2:	e7da      	b.n	8009d9a <xTaskGenericNotifyFromISR+0x6a>
	BaseType_t xReturn = pdPASS;
 8009de4:	2501      	movs	r5, #1
 8009de6:	e7d8      	b.n	8009d9a <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009de8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009dea:	b143      	cbz	r3, 8009dfe <xTaskGenericNotifyFromISR+0xce>
 8009dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	e7fe      	b.n	8009dfc <xTaskGenericNotifyFromISR+0xcc>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dfe:	4b14      	ldr	r3, [pc, #80]	; (8009e50 <xTaskGenericNotifyFromISR+0x120>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	b9fb      	cbnz	r3, 8009e44 <xTaskGenericNotifyFromISR+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e04:	f104 0804 	add.w	r8, r4, #4
 8009e08:	4640      	mov	r0, r8
 8009e0a:	f7fe fc4a 	bl	80086a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009e10:	2301      	movs	r3, #1
 8009e12:	4093      	lsls	r3, r2
 8009e14:	490f      	ldr	r1, [pc, #60]	; (8009e54 <xTaskGenericNotifyFromISR+0x124>)
 8009e16:	6808      	ldr	r0, [r1, #0]
 8009e18:	4303      	orrs	r3, r0
 8009e1a:	600b      	str	r3, [r1, #0]
 8009e1c:	4641      	mov	r1, r8
 8009e1e:	4b0e      	ldr	r3, [pc, #56]	; (8009e58 <xTaskGenericNotifyFromISR+0x128>)
 8009e20:	2014      	movs	r0, #20
 8009e22:	fb00 3002 	mla	r0, r0, r2, r3
 8009e26:	f7fe fc16 	bl	8008656 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009e2c:	4b0b      	ldr	r3, [pc, #44]	; (8009e5c <xTaskGenericNotifyFromISR+0x12c>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d9b3      	bls.n	8009d9e <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 8009e36:	b10e      	cbz	r6, 8009e3c <xTaskGenericNotifyFromISR+0x10c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 8009e3c:	4b08      	ldr	r3, [pc, #32]	; (8009e60 <xTaskGenericNotifyFromISR+0x130>)
 8009e3e:	2201      	movs	r2, #1
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	e7ac      	b.n	8009d9e <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009e44:	f104 0118 	add.w	r1, r4, #24
 8009e48:	4806      	ldr	r0, [pc, #24]	; (8009e64 <xTaskGenericNotifyFromISR+0x134>)
 8009e4a:	f7fe fc04 	bl	8008656 <vListInsertEnd>
 8009e4e:	e7ec      	b.n	8009e2a <xTaskGenericNotifyFromISR+0xfa>
 8009e50:	200008bc 	.word	0x200008bc
 8009e54:	200008c4 	.word	0x200008c4
 8009e58:	20000820 	.word	0x20000820
 8009e5c:	20000814 	.word	0x20000814
 8009e60:	2000093c 	.word	0x2000093c
 8009e64:	200008f8 	.word	0x200008f8

08009e68 <vTaskNotifyGiveFromISR>:
	{
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8009e6a:	b940      	cbnz	r0, 8009e7e <vTaskNotifyGiveFromISR+0x16>
 8009e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e70:	f383 8811 	msr	BASEPRI, r3
 8009e74:	f3bf 8f6f 	isb	sy
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	e7fe      	b.n	8009e7c <vTaskNotifyGiveFromISR+0x14>
 8009e7e:	4604      	mov	r4, r0
 8009e80:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e82:	f000 fc79 	bl	800a778 <vPortValidateInterruptPriority>
	__asm volatile
 8009e86:	f3ef 8611 	mrs	r6, BASEPRI
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009e9a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009e9e:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			( pxTCB->ulNotifiedValue )++;
 8009ea6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009ea8:	3201      	adds	r2, #1
 8009eaa:	65e2      	str	r2, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d002      	beq.n	8009eb6 <vTaskNotifyGiveFromISR+0x4e>
	__asm volatile
 8009eb0:	f386 8811 	msr	BASEPRI, r6
	}
 8009eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009eb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009eb8:	b143      	cbz	r3, 8009ecc <vTaskNotifyGiveFromISR+0x64>
	__asm volatile
 8009eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	e7fe      	b.n	8009eca <vTaskNotifyGiveFromISR+0x62>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ecc:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <vTaskNotifyGiveFromISR+0xb4>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	b9f3      	cbnz	r3, 8009f10 <vTaskNotifyGiveFromISR+0xa8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ed2:	1d27      	adds	r7, r4, #4
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	f7fe fbe4 	bl	80086a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009eda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009edc:	2301      	movs	r3, #1
 8009ede:	4093      	lsls	r3, r2
 8009ee0:	490f      	ldr	r1, [pc, #60]	; (8009f20 <vTaskNotifyGiveFromISR+0xb8>)
 8009ee2:	6808      	ldr	r0, [r1, #0]
 8009ee4:	4303      	orrs	r3, r0
 8009ee6:	600b      	str	r3, [r1, #0]
 8009ee8:	4639      	mov	r1, r7
 8009eea:	4b0e      	ldr	r3, [pc, #56]	; (8009f24 <vTaskNotifyGiveFromISR+0xbc>)
 8009eec:	2014      	movs	r0, #20
 8009eee:	fb00 3002 	mla	r0, r0, r2, r3
 8009ef2:	f7fe fbb0 	bl	8008656 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ef6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009ef8:	4b0b      	ldr	r3, [pc, #44]	; (8009f28 <vTaskNotifyGiveFromISR+0xc0>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d9d6      	bls.n	8009eb0 <vTaskNotifyGiveFromISR+0x48>
					if( pxHigherPriorityTaskWoken != NULL )
 8009f02:	b10d      	cbz	r5, 8009f08 <vTaskNotifyGiveFromISR+0xa0>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009f04:	2301      	movs	r3, #1
 8009f06:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 8009f08:	4b08      	ldr	r3, [pc, #32]	; (8009f2c <vTaskNotifyGiveFromISR+0xc4>)
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	e7cf      	b.n	8009eb0 <vTaskNotifyGiveFromISR+0x48>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009f10:	f104 0118 	add.w	r1, r4, #24
 8009f14:	4806      	ldr	r0, [pc, #24]	; (8009f30 <vTaskNotifyGiveFromISR+0xc8>)
 8009f16:	f7fe fb9e 	bl	8008656 <vListInsertEnd>
 8009f1a:	e7ec      	b.n	8009ef6 <vTaskNotifyGiveFromISR+0x8e>
 8009f1c:	200008bc 	.word	0x200008bc
 8009f20:	200008c4 	.word	0x200008c4
 8009f24:	20000820 	.word	0x20000820
 8009f28:	20000814 	.word	0x20000814
 8009f2c:	2000093c 	.word	0x2000093c
 8009f30:	200008f8 	.word	0x200008f8

08009f34 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f34:	4b06      	ldr	r3, [pc, #24]	; (8009f50 <prvGetNextExpireTime+0x1c>)
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	6813      	ldr	r3, [r2, #0]
 8009f3a:	b92b      	cbnz	r3, 8009f48 <prvGetNextExpireTime+0x14>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f40:	b923      	cbnz	r3, 8009f4c <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f42:	68d3      	ldr	r3, [r2, #12]
 8009f44:	6818      	ldr	r0, [r3, #0]
 8009f46:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f48:	2300      	movs	r3, #0
 8009f4a:	e7f8      	b.n	8009f3e <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f4c:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8009f4e:	4770      	bx	lr
 8009f50:	20000940 	.word	0x20000940

08009f54 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f54:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f56:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f58:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f5a:	4291      	cmp	r1, r2
 8009f5c:	d80c      	bhi.n	8009f78 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f5e:	1ad2      	subs	r2, r2, r3
 8009f60:	6983      	ldr	r3, [r0, #24]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d301      	bcc.n	8009f6a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f66:	2001      	movs	r0, #1
 8009f68:	e010      	b.n	8009f8c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f6a:	1d01      	adds	r1, r0, #4
 8009f6c:	4b09      	ldr	r3, [pc, #36]	; (8009f94 <prvInsertTimerInActiveList+0x40>)
 8009f6e:	6818      	ldr	r0, [r3, #0]
 8009f70:	f7fe fb7d 	bl	800866e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009f74:	2000      	movs	r0, #0
 8009f76:	e009      	b.n	8009f8c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d201      	bcs.n	8009f80 <prvInsertTimerInActiveList+0x2c>
 8009f7c:	4299      	cmp	r1, r3
 8009f7e:	d206      	bcs.n	8009f8e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f80:	1d01      	adds	r1, r0, #4
 8009f82:	4b05      	ldr	r3, [pc, #20]	; (8009f98 <prvInsertTimerInActiveList+0x44>)
 8009f84:	6818      	ldr	r0, [r3, #0]
 8009f86:	f7fe fb72 	bl	800866e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009f8a:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8009f8c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 8009f8e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009f90:	e7fc      	b.n	8009f8c <prvInsertTimerInActiveList+0x38>
 8009f92:	bf00      	nop
 8009f94:	20000944 	.word	0x20000944
 8009f98:	20000940 	.word	0x20000940

08009f9c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f9c:	b530      	push	{r4, r5, lr}
 8009f9e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009fa0:	f000 fac0 	bl	800a524 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009fa4:	4b11      	ldr	r3, [pc, #68]	; (8009fec <prvCheckForValidListAndQueue+0x50>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	b11b      	cbz	r3, 8009fb2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009faa:	f000 fadd 	bl	800a568 <vPortExitCritical>
}
 8009fae:	b003      	add	sp, #12
 8009fb0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8009fb2:	4d0f      	ldr	r5, [pc, #60]	; (8009ff0 <prvCheckForValidListAndQueue+0x54>)
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	f7fe fb40 	bl	800863a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009fba:	4c0e      	ldr	r4, [pc, #56]	; (8009ff4 <prvCheckForValidListAndQueue+0x58>)
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f7fe fb3c 	bl	800863a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009fc2:	4b0d      	ldr	r3, [pc, #52]	; (8009ff8 <prvCheckForValidListAndQueue+0x5c>)
 8009fc4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009fc6:	4b0d      	ldr	r3, [pc, #52]	; (8009ffc <prvCheckForValidListAndQueue+0x60>)
 8009fc8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009fca:	2300      	movs	r3, #0
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	4b0c      	ldr	r3, [pc, #48]	; (800a000 <prvCheckForValidListAndQueue+0x64>)
 8009fd0:	4a0c      	ldr	r2, [pc, #48]	; (800a004 <prvCheckForValidListAndQueue+0x68>)
 8009fd2:	210c      	movs	r1, #12
 8009fd4:	200a      	movs	r0, #10
 8009fd6:	f7fe fc74 	bl	80088c2 <xQueueGenericCreateStatic>
 8009fda:	4b04      	ldr	r3, [pc, #16]	; (8009fec <prvCheckForValidListAndQueue+0x50>)
 8009fdc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d0e3      	beq.n	8009faa <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009fe2:	4909      	ldr	r1, [pc, #36]	; (800a008 <prvCheckForValidListAndQueue+0x6c>)
 8009fe4:	f7fe ffa2 	bl	8008f2c <vQueueAddToRegistry>
 8009fe8:	e7df      	b.n	8009faa <prvCheckForValidListAndQueue+0xe>
 8009fea:	bf00      	nop
 8009fec:	20000a3c 	.word	0x20000a3c
 8009ff0:	200009c0 	.word	0x200009c0
 8009ff4:	200009d4 	.word	0x200009d4
 8009ff8:	20000940 	.word	0x20000940
 8009ffc:	20000944 	.word	0x20000944
 800a000:	200009ec 	.word	0x200009ec
 800a004:	20000948 	.word	0x20000948
 800a008:	0800b960 	.word	0x0800b960

0800a00c <prvInitialiseNewTimer>:
{
 800a00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a010:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a012:	b941      	cbnz	r1, 800a026 <prvInitialiseNewTimer+0x1a>
 800a014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	e7fe      	b.n	800a024 <prvInitialiseNewTimer+0x18>
 800a026:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
 800a028:	b1a4      	cbz	r4, 800a054 <prvInitialiseNewTimer+0x48>
 800a02a:	461e      	mov	r6, r3
 800a02c:	4615      	mov	r5, r2
 800a02e:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
 800a030:	f7ff ffb4 	bl	8009f9c <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 800a034:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a038:	61a7      	str	r7, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a03a:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a03c:	9b06      	ldr	r3, [sp, #24]
 800a03e:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a040:	1d20      	adds	r0, r4, #4
 800a042:	f7fe fb05 	bl	8008650 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a046:	b12d      	cbz	r5, 800a054 <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a048:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a04c:	f043 0304 	orr.w	r3, r3, #4
 800a050:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 800a054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a058 <xTimerCreateTimerTask>:
{
 800a058:	b510      	push	{r4, lr}
 800a05a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a05c:	f7ff ff9e 	bl	8009f9c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a060:	4b12      	ldr	r3, [pc, #72]	; (800a0ac <xTimerCreateTimerTask+0x54>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	b1cb      	cbz	r3, 800a09a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a066:	2400      	movs	r4, #0
 800a068:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a06a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a06c:	aa07      	add	r2, sp, #28
 800a06e:	a906      	add	r1, sp, #24
 800a070:	a805      	add	r0, sp, #20
 800a072:	f7f9 fb65 	bl	8003740 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a076:	9b05      	ldr	r3, [sp, #20]
 800a078:	9302      	str	r3, [sp, #8]
 800a07a:	9b06      	ldr	r3, [sp, #24]
 800a07c:	9301      	str	r3, [sp, #4]
 800a07e:	2302      	movs	r3, #2
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	4623      	mov	r3, r4
 800a084:	9a07      	ldr	r2, [sp, #28]
 800a086:	490a      	ldr	r1, [pc, #40]	; (800a0b0 <xTimerCreateTimerTask+0x58>)
 800a088:	480a      	ldr	r0, [pc, #40]	; (800a0b4 <xTimerCreateTimerTask+0x5c>)
 800a08a:	f7ff f91f 	bl	80092cc <xTaskCreateStatic>
 800a08e:	4b0a      	ldr	r3, [pc, #40]	; (800a0b8 <xTimerCreateTimerTask+0x60>)
 800a090:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a092:	b110      	cbz	r0, 800a09a <xTimerCreateTimerTask+0x42>
}
 800a094:	2001      	movs	r0, #1
 800a096:	b008      	add	sp, #32
 800a098:	bd10      	pop	{r4, pc}
 800a09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	e7fe      	b.n	800a0aa <xTimerCreateTimerTask+0x52>
 800a0ac:	20000a3c 	.word	0x20000a3c
 800a0b0:	0800b968 	.word	0x0800b968
 800a0b4:	0800a435 	.word	0x0800a435
 800a0b8:	20000a40 	.word	0x20000a40

0800a0bc <xTimerCreate>:
	{
 800a0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	460e      	mov	r6, r1
 800a0c6:	4617      	mov	r7, r2
 800a0c8:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a0ca:	202c      	movs	r0, #44	; 0x2c
 800a0cc:	f000 fbe0 	bl	800a890 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	b158      	cbz	r0, 800a0ec <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a0da:	9001      	str	r0, [sp, #4]
 800a0dc:	9b08      	ldr	r3, [sp, #32]
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	4643      	mov	r3, r8
 800a0e2:	463a      	mov	r2, r7
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f7ff ff90 	bl	800a00c <prvInitialiseNewTimer>
	}
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	b002      	add	sp, #8
 800a0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a0f4 <xTimerCreateStatic>:
	{
 800a0f4:	b530      	push	{r4, r5, lr}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a0fa:	252c      	movs	r5, #44	; 0x2c
 800a0fc:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a0fe:	9d03      	ldr	r5, [sp, #12]
 800a100:	2d2c      	cmp	r5, #44	; 0x2c
 800a102:	d008      	beq.n	800a116 <xTimerCreateStatic+0x22>
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	e7fe      	b.n	800a114 <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a116:	9d03      	ldr	r5, [sp, #12]
		configASSERT( pxTimerBuffer );
 800a118:	b944      	cbnz	r4, 800a12c <xTimerCreateStatic+0x38>
 800a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11e:	f383 8811 	msr	BASEPRI, r3
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	e7fe      	b.n	800a12a <xTimerCreateStatic+0x36>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a12c:	2502      	movs	r5, #2
 800a12e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a132:	9401      	str	r4, [sp, #4]
 800a134:	9d08      	ldr	r5, [sp, #32]
 800a136:	9500      	str	r5, [sp, #0]
 800a138:	f7ff ff68 	bl	800a00c <prvInitialiseNewTimer>
	}
 800a13c:	4620      	mov	r0, r4
 800a13e:	b005      	add	sp, #20
 800a140:	bd30      	pop	{r4, r5, pc}
	...

0800a144 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800a144:	b1c8      	cbz	r0, 800a17a <xTimerGenericCommand+0x36>
{
 800a146:	b530      	push	{r4, r5, lr}
 800a148:	b085      	sub	sp, #20
 800a14a:	4615      	mov	r5, r2
 800a14c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 800a14e:	4a17      	ldr	r2, [pc, #92]	; (800a1ac <xTimerGenericCommand+0x68>)
 800a150:	6810      	ldr	r0, [r2, #0]
 800a152:	b340      	cbz	r0, 800a1a6 <xTimerGenericCommand+0x62>
 800a154:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800a156:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a158:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a15a:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a15c:	2905      	cmp	r1, #5
 800a15e:	dc1d      	bgt.n	800a19c <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a160:	f7ff fc2c 	bl	80099bc <xTaskGetSchedulerState>
 800a164:	2802      	cmp	r0, #2
 800a166:	d011      	beq.n	800a18c <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a168:	2300      	movs	r3, #0
 800a16a:	461a      	mov	r2, r3
 800a16c:	a901      	add	r1, sp, #4
 800a16e:	480f      	ldr	r0, [pc, #60]	; (800a1ac <xTimerGenericCommand+0x68>)
 800a170:	6800      	ldr	r0, [r0, #0]
 800a172:	f7fe fc17 	bl	80089a4 <xQueueGenericSend>
}
 800a176:	b005      	add	sp, #20
 800a178:	bd30      	pop	{r4, r5, pc}
 800a17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	e7fe      	b.n	800a18a <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a18c:	2300      	movs	r3, #0
 800a18e:	9a08      	ldr	r2, [sp, #32]
 800a190:	a901      	add	r1, sp, #4
 800a192:	4806      	ldr	r0, [pc, #24]	; (800a1ac <xTimerGenericCommand+0x68>)
 800a194:	6800      	ldr	r0, [r0, #0]
 800a196:	f7fe fc05 	bl	80089a4 <xQueueGenericSend>
 800a19a:	e7ec      	b.n	800a176 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a19c:	2300      	movs	r3, #0
 800a19e:	a901      	add	r1, sp, #4
 800a1a0:	f7fe fce4 	bl	8008b6c <xQueueGenericSendFromISR>
 800a1a4:	e7e7      	b.n	800a176 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 800a1a6:	2000      	movs	r0, #0
	return xReturn;
 800a1a8:	e7e5      	b.n	800a176 <xTimerGenericCommand+0x32>
 800a1aa:	bf00      	nop
 800a1ac:	20000a3c 	.word	0x20000a3c

0800a1b0 <prvSwitchTimerLists>:
{
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1b4:	4b1b      	ldr	r3, [pc, #108]	; (800a224 <prvSwitchTimerLists+0x74>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	b362      	cbz	r2, 800a216 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1c0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1c2:	1d25      	adds	r5, r4, #4
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f7fe fa6c 	bl	80086a2 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1ca:	6a23      	ldr	r3, [r4, #32]
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a1d4:	f013 0f04 	tst.w	r3, #4
 800a1d8:	d0ec      	beq.n	800a1b4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a1da:	69a3      	ldr	r3, [r4, #24]
 800a1dc:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800a1de:	429e      	cmp	r6, r3
 800a1e0:	d207      	bcs.n	800a1f2 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1e2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1e4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	4b0e      	ldr	r3, [pc, #56]	; (800a224 <prvSwitchTimerLists+0x74>)
 800a1ea:	6818      	ldr	r0, [r3, #0]
 800a1ec:	f7fe fa3f 	bl	800866e <vListInsert>
 800a1f0:	e7e0      	b.n	800a1b4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	9100      	str	r1, [sp, #0]
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4632      	mov	r2, r6
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f7ff ffa2 	bl	800a144 <xTimerGenericCommand>
				configASSERT( xResult );
 800a200:	2800      	cmp	r0, #0
 800a202:	d1d7      	bne.n	800a1b4 <prvSwitchTimerLists+0x4>
 800a204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	e7fe      	b.n	800a214 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800a216:	4a04      	ldr	r2, [pc, #16]	; (800a228 <prvSwitchTimerLists+0x78>)
 800a218:	6810      	ldr	r0, [r2, #0]
 800a21a:	4902      	ldr	r1, [pc, #8]	; (800a224 <prvSwitchTimerLists+0x74>)
 800a21c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800a21e:	6013      	str	r3, [r2, #0]
}
 800a220:	b002      	add	sp, #8
 800a222:	bd70      	pop	{r4, r5, r6, pc}
 800a224:	20000940 	.word	0x20000940
 800a228:	20000944 	.word	0x20000944

0800a22c <prvSampleTimeNow>:
{
 800a22c:	b538      	push	{r3, r4, r5, lr}
 800a22e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800a230:	f7ff f910 	bl	8009454 <xTaskGetTickCount>
 800a234:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800a236:	4b07      	ldr	r3, [pc, #28]	; (800a254 <prvSampleTimeNow+0x28>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4283      	cmp	r3, r0
 800a23c:	d805      	bhi.n	800a24a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800a23e:	2300      	movs	r3, #0
 800a240:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800a242:	4b04      	ldr	r3, [pc, #16]	; (800a254 <prvSampleTimeNow+0x28>)
 800a244:	601c      	str	r4, [r3, #0]
}
 800a246:	4620      	mov	r0, r4
 800a248:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800a24a:	f7ff ffb1 	bl	800a1b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a24e:	2301      	movs	r3, #1
 800a250:	602b      	str	r3, [r5, #0]
 800a252:	e7f6      	b.n	800a242 <prvSampleTimeNow+0x16>
 800a254:	200009e8 	.word	0x200009e8

0800a258 <prvProcessExpiredTimer>:
{
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	4605      	mov	r5, r0
 800a25e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a260:	4b17      	ldr	r3, [pc, #92]	; (800a2c0 <prvProcessExpiredTimer+0x68>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a268:	1d20      	adds	r0, r4, #4
 800a26a:	f7fe fa1a 	bl	80086a2 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a26e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a272:	f013 0f04 	tst.w	r3, #4
 800a276:	d108      	bne.n	800a28a <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a278:	f023 0301 	bic.w	r3, r3, #1
 800a27c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a280:	6a23      	ldr	r3, [r4, #32]
 800a282:	4620      	mov	r0, r4
 800a284:	4798      	blx	r3
}
 800a286:	b002      	add	sp, #8
 800a288:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a28a:	69a1      	ldr	r1, [r4, #24]
 800a28c:	462b      	mov	r3, r5
 800a28e:	4632      	mov	r2, r6
 800a290:	4429      	add	r1, r5
 800a292:	4620      	mov	r0, r4
 800a294:	f7ff fe5e 	bl	8009f54 <prvInsertTimerInActiveList>
 800a298:	2800      	cmp	r0, #0
 800a29a:	d0f1      	beq.n	800a280 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a29c:	2100      	movs	r1, #0
 800a29e:	9100      	str	r1, [sp, #0]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	462a      	mov	r2, r5
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f7ff ff4d 	bl	800a144 <xTimerGenericCommand>
			configASSERT( xResult );
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d1e8      	bne.n	800a280 <prvProcessExpiredTimer+0x28>
 800a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	e7fe      	b.n	800a2be <prvProcessExpiredTimer+0x66>
 800a2c0:	20000940 	.word	0x20000940

0800a2c4 <prvProcessTimerOrBlockTask>:
{
 800a2c4:	b570      	push	{r4, r5, r6, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	4606      	mov	r6, r0
 800a2ca:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800a2cc:	f7ff f8ba 	bl	8009444 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2d0:	a801      	add	r0, sp, #4
 800a2d2:	f7ff ffab 	bl	800a22c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a2d6:	9b01      	ldr	r3, [sp, #4]
 800a2d8:	bb23      	cbnz	r3, 800a324 <prvProcessTimerOrBlockTask+0x60>
 800a2da:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a2dc:	b90c      	cbnz	r4, 800a2e2 <prvProcessTimerOrBlockTask+0x1e>
 800a2de:	42b0      	cmp	r0, r6
 800a2e0:	d217      	bcs.n	800a312 <prvProcessTimerOrBlockTask+0x4e>
				if( xListWasEmpty != pdFALSE )
 800a2e2:	b124      	cbz	r4, 800a2ee <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a2e4:	4b11      	ldr	r3, [pc, #68]	; (800a32c <prvProcessTimerOrBlockTask+0x68>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	b9cb      	cbnz	r3, 800a320 <prvProcessTimerOrBlockTask+0x5c>
 800a2ec:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a2ee:	4622      	mov	r2, r4
 800a2f0:	1b71      	subs	r1, r6, r5
 800a2f2:	4b0f      	ldr	r3, [pc, #60]	; (800a330 <prvProcessTimerOrBlockTask+0x6c>)
 800a2f4:	6818      	ldr	r0, [r3, #0]
 800a2f6:	f7fe fe2d 	bl	8008f54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a2fa:	f7ff f93d 	bl	8009578 <xTaskResumeAll>
 800a2fe:	b998      	cbnz	r0, 800a328 <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 800a300:	4b0c      	ldr	r3, [pc, #48]	; (800a334 <prvProcessTimerOrBlockTask+0x70>)
 800a302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	e00a      	b.n	800a328 <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
 800a312:	f7ff f931 	bl	8009578 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a316:	4629      	mov	r1, r5
 800a318:	4630      	mov	r0, r6
 800a31a:	f7ff ff9d 	bl	800a258 <prvProcessExpiredTimer>
 800a31e:	e003      	b.n	800a328 <prvProcessTimerOrBlockTask+0x64>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a320:	2400      	movs	r4, #0
 800a322:	e7e4      	b.n	800a2ee <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 800a324:	f7ff f928 	bl	8009578 <xTaskResumeAll>
}
 800a328:	b002      	add	sp, #8
 800a32a:	bd70      	pop	{r4, r5, r6, pc}
 800a32c:	20000944 	.word	0x20000944
 800a330:	20000a3c 	.word	0x20000a3c
 800a334:	e000ed04 	.word	0xe000ed04

0800a338 <prvProcessReceivedCommands>:
{
 800a338:	b530      	push	{r4, r5, lr}
 800a33a:	b087      	sub	sp, #28
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a33c:	2200      	movs	r2, #0
 800a33e:	a903      	add	r1, sp, #12
 800a340:	4b3b      	ldr	r3, [pc, #236]	; (800a430 <prvProcessReceivedCommands+0xf8>)
 800a342:	6818      	ldr	r0, [r3, #0]
 800a344:	f7fe fc78 	bl	8008c38 <xQueueReceive>
 800a348:	2800      	cmp	r0, #0
 800a34a:	d06f      	beq.n	800a42c <prvProcessReceivedCommands+0xf4>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a34c:	9b03      	ldr	r3, [sp, #12]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	dbf4      	blt.n	800a33c <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a352:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a354:	6963      	ldr	r3, [r4, #20]
 800a356:	b113      	cbz	r3, 800a35e <prvProcessReceivedCommands+0x26>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a358:	1d20      	adds	r0, r4, #4
 800a35a:	f7fe f9a2 	bl	80086a2 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a35e:	a802      	add	r0, sp, #8
 800a360:	f7ff ff64 	bl	800a22c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	2b09      	cmp	r3, #9
 800a368:	d8e8      	bhi.n	800a33c <prvProcessReceivedCommands+0x4>
 800a36a:	e8df f003 	tbb	[pc, r3]
 800a36e:	0505      	.short	0x0505
 800a370:	51383105 	.word	0x51383105
 800a374:	38310505 	.word	0x38310505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a378:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a37c:	f043 0301 	orr.w	r3, r3, #1
 800a380:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a384:	9904      	ldr	r1, [sp, #16]
 800a386:	69a5      	ldr	r5, [r4, #24]
 800a388:	460b      	mov	r3, r1
 800a38a:	4602      	mov	r2, r0
 800a38c:	4429      	add	r1, r5
 800a38e:	4620      	mov	r0, r4
 800a390:	f7ff fde0 	bl	8009f54 <prvInsertTimerInActiveList>
 800a394:	2800      	cmp	r0, #0
 800a396:	d0d1      	beq.n	800a33c <prvProcessReceivedCommands+0x4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a398:	6a23      	ldr	r3, [r4, #32]
 800a39a:	4620      	mov	r0, r4
 800a39c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a39e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a3a2:	f013 0f04 	tst.w	r3, #4
 800a3a6:	d0c9      	beq.n	800a33c <prvProcessReceivedCommands+0x4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a3a8:	69a2      	ldr	r2, [r4, #24]
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	9100      	str	r1, [sp, #0]
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	9804      	ldr	r0, [sp, #16]
 800a3b2:	4402      	add	r2, r0
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f7ff fec5 	bl	800a144 <xTimerGenericCommand>
							configASSERT( xResult );
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	d1be      	bne.n	800a33c <prvProcessReceivedCommands+0x4>
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	e7fe      	b.n	800a3ce <prvProcessReceivedCommands+0x96>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a3d4:	f023 0301 	bic.w	r3, r3, #1
 800a3d8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800a3dc:	e7ae      	b.n	800a33c <prvProcessReceivedCommands+0x4>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3de:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a3e2:	f043 0301 	orr.w	r3, r3, #1
 800a3e6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a3ea:	9904      	ldr	r1, [sp, #16]
 800a3ec:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a3ee:	b131      	cbz	r1, 800a3fe <prvProcessReceivedCommands+0xc6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	4401      	add	r1, r0
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f7ff fdac 	bl	8009f54 <prvInsertTimerInActiveList>
					break;
 800a3fc:	e79e      	b.n	800a33c <prvProcessReceivedCommands+0x4>
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	e7fe      	b.n	800a40e <prvProcessReceivedCommands+0xd6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a410:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a414:	f013 0f02 	tst.w	r3, #2
 800a418:	d004      	beq.n	800a424 <prvProcessReceivedCommands+0xec>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a41a:	f023 0301 	bic.w	r3, r3, #1
 800a41e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a422:	e78b      	b.n	800a33c <prvProcessReceivedCommands+0x4>
							vPortFree( pxTimer );
 800a424:	4620      	mov	r0, r4
 800a426:	f000 fab7 	bl	800a998 <vPortFree>
 800a42a:	e787      	b.n	800a33c <prvProcessReceivedCommands+0x4>
}
 800a42c:	b007      	add	sp, #28
 800a42e:	bd30      	pop	{r4, r5, pc}
 800a430:	20000a3c 	.word	0x20000a3c

0800a434 <prvTimerTask>:
{
 800a434:	b500      	push	{lr}
 800a436:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a438:	a801      	add	r0, sp, #4
 800a43a:	f7ff fd7b 	bl	8009f34 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a43e:	9901      	ldr	r1, [sp, #4]
 800a440:	f7ff ff40 	bl	800a2c4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800a444:	f7ff ff78 	bl	800a338 <prvProcessReceivedCommands>
 800a448:	e7f6      	b.n	800a438 <prvTimerTask+0x4>
	...

0800a44c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a44c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800a44e:	2300      	movs	r3, #0
 800a450:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a452:	4b0d      	ldr	r3, [pc, #52]	; (800a488 <prvTaskExitError+0x3c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a45a:	d008      	beq.n	800a46e <prvTaskExitError+0x22>
 800a45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a460:	f383 8811 	msr	BASEPRI, r3
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	f3bf 8f4f 	dsb	sy
 800a46c:	e7fe      	b.n	800a46c <prvTaskExitError+0x20>
 800a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a47e:	9b01      	ldr	r3, [sp, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d0fc      	beq.n	800a47e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a484:	b002      	add	sp, #8
 800a486:	4770      	bx	lr
 800a488:	20000044 	.word	0x20000044

0800a48c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a48c:	4808      	ldr	r0, [pc, #32]	; (800a4b0 <prvPortStartFirstTask+0x24>)
 800a48e:	6800      	ldr	r0, [r0, #0]
 800a490:	6800      	ldr	r0, [r0, #0]
 800a492:	f380 8808 	msr	MSP, r0
 800a496:	f04f 0000 	mov.w	r0, #0
 800a49a:	f380 8814 	msr	CONTROL, r0
 800a49e:	b662      	cpsie	i
 800a4a0:	b661      	cpsie	f
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	df00      	svc	0
 800a4ac:	bf00      	nop
 800a4ae:	0000      	.short	0x0000
 800a4b0:	e000ed08 	.word	0xe000ed08

0800a4b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a4c4 <vPortEnableVFP+0x10>
 800a4b8:	6801      	ldr	r1, [r0, #0]
 800a4ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a4be:	6001      	str	r1, [r0, #0]
 800a4c0:	4770      	bx	lr
 800a4c2:	0000      	.short	0x0000
 800a4c4:	e000ed88 	.word	0xe000ed88

0800a4c8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a4c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4cc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a4d0:	f021 0101 	bic.w	r1, r1, #1
 800a4d4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4d8:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <pxPortInitialiseStack+0x28>)
 800a4da:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4de:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4e2:	f06f 0302 	mvn.w	r3, #2
 800a4e6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800a4ea:	3844      	subs	r0, #68	; 0x44
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	0800a44d 	.word	0x0800a44d
	...

0800a500 <SVC_Handler>:
	__asm volatile (
 800a500:	4b07      	ldr	r3, [pc, #28]	; (800a520 <pxCurrentTCBConst2>)
 800a502:	6819      	ldr	r1, [r3, #0]
 800a504:	6808      	ldr	r0, [r1, #0]
 800a506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50a:	f380 8809 	msr	PSP, r0
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f04f 0000 	mov.w	r0, #0
 800a516:	f380 8811 	msr	BASEPRI, r0
 800a51a:	4770      	bx	lr
 800a51c:	f3af 8000 	nop.w

0800a520 <pxCurrentTCBConst2>:
 800a520:	20000814 	.word	0x20000814

0800a524 <vPortEnterCritical>:
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a534:	4a0a      	ldr	r2, [pc, #40]	; (800a560 <vPortEnterCritical+0x3c>)
 800a536:	6813      	ldr	r3, [r2, #0]
 800a538:	3301      	adds	r3, #1
 800a53a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d000      	beq.n	800a542 <vPortEnterCritical+0x1e>
}
 800a540:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a542:	4b08      	ldr	r3, [pc, #32]	; (800a564 <vPortEnterCritical+0x40>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a54a:	d0f9      	beq.n	800a540 <vPortEnterCritical+0x1c>
 800a54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	e7fe      	b.n	800a55c <vPortEnterCritical+0x38>
 800a55e:	bf00      	nop
 800a560:	20000044 	.word	0x20000044
 800a564:	e000ed04 	.word	0xe000ed04

0800a568 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a568:	4b09      	ldr	r3, [pc, #36]	; (800a590 <vPortExitCritical+0x28>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	b943      	cbnz	r3, 800a580 <vPortExitCritical+0x18>
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	e7fe      	b.n	800a57e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a580:	3b01      	subs	r3, #1
 800a582:	4a03      	ldr	r2, [pc, #12]	; (800a590 <vPortExitCritical+0x28>)
 800a584:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a586:	b90b      	cbnz	r3, 800a58c <vPortExitCritical+0x24>
	__asm volatile
 800a588:	f383 8811 	msr	BASEPRI, r3
}
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	20000044 	.word	0x20000044
	...

0800a5a0 <PendSV_Handler>:
	__asm volatile
 800a5a0:	f3ef 8009 	mrs	r0, PSP
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	4b15      	ldr	r3, [pc, #84]	; (800a600 <pxCurrentTCBConst>)
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	f01e 0f10 	tst.w	lr, #16
 800a5b0:	bf08      	it	eq
 800a5b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ba:	6010      	str	r0, [r2, #0]
 800a5bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a5c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a5c4:	f380 8811 	msr	BASEPRI, r0
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	f7ff f8c4 	bl	800975c <vTaskSwitchContext>
 800a5d4:	f04f 0000 	mov.w	r0, #0
 800a5d8:	f380 8811 	msr	BASEPRI, r0
 800a5dc:	bc09      	pop	{r0, r3}
 800a5de:	6819      	ldr	r1, [r3, #0]
 800a5e0:	6808      	ldr	r0, [r1, #0]
 800a5e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e6:	f01e 0f10 	tst.w	lr, #16
 800a5ea:	bf08      	it	eq
 800a5ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a5f0:	f380 8809 	msr	PSP, r0
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	f3af 8000 	nop.w

0800a600 <pxCurrentTCBConst>:
 800a600:	20000814 	.word	0x20000814

0800a604 <SysTick_Handler>:
{
 800a604:	b508      	push	{r3, lr}
	__asm volatile
 800a606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a616:	f7fe ff23 	bl	8009460 <xTaskIncrementTick>
 800a61a:	b118      	cbz	r0, 800a624 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a61c:	4b03      	ldr	r3, [pc, #12]	; (800a62c <SysTick_Handler+0x28>)
 800a61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a622:	601a      	str	r2, [r3, #0]
	__asm volatile
 800a624:	2300      	movs	r3, #0
 800a626:	f383 8811 	msr	BASEPRI, r3
}
 800a62a:	bd08      	pop	{r3, pc}
 800a62c:	e000ed04 	.word	0xe000ed04

0800a630 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a630:	4a08      	ldr	r2, [pc, #32]	; (800a654 <vPortSetupTimerInterrupt+0x24>)
 800a632:	2300      	movs	r3, #0
 800a634:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a636:	4908      	ldr	r1, [pc, #32]	; (800a658 <vPortSetupTimerInterrupt+0x28>)
 800a638:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a63a:	4b08      	ldr	r3, [pc, #32]	; (800a65c <vPortSetupTimerInterrupt+0x2c>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4908      	ldr	r1, [pc, #32]	; (800a660 <vPortSetupTimerInterrupt+0x30>)
 800a640:	fba1 1303 	umull	r1, r3, r1, r3
 800a644:	099b      	lsrs	r3, r3, #6
 800a646:	3b01      	subs	r3, #1
 800a648:	4906      	ldr	r1, [pc, #24]	; (800a664 <vPortSetupTimerInterrupt+0x34>)
 800a64a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a64c:	2307      	movs	r3, #7
 800a64e:	6013      	str	r3, [r2, #0]
}
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	e000e010 	.word	0xe000e010
 800a658:	e000e018 	.word	0xe000e018
 800a65c:	20000038 	.word	0x20000038
 800a660:	10624dd3 	.word	0x10624dd3
 800a664:	e000e014 	.word	0xe000e014

0800a668 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a668:	4b3a      	ldr	r3, [pc, #232]	; (800a754 <xPortStartScheduler+0xec>)
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	4b3a      	ldr	r3, [pc, #232]	; (800a758 <xPortStartScheduler+0xf0>)
 800a66e:	429a      	cmp	r2, r3
 800a670:	d00d      	beq.n	800a68e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a672:	4b38      	ldr	r3, [pc, #224]	; (800a754 <xPortStartScheduler+0xec>)
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	4b39      	ldr	r3, [pc, #228]	; (800a75c <xPortStartScheduler+0xf4>)
 800a678:	429a      	cmp	r2, r3
 800a67a:	d111      	bne.n	800a6a0 <xPortStartScheduler+0x38>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	e7fe      	b.n	800a68c <xPortStartScheduler+0x24>
 800a68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	e7fe      	b.n	800a69e <xPortStartScheduler+0x36>
{
 800a6a0:	b510      	push	{r4, lr}
 800a6a2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6a4:	4b2e      	ldr	r3, [pc, #184]	; (800a760 <xPortStartScheduler+0xf8>)
 800a6a6:	781a      	ldrb	r2, [r3, #0]
 800a6a8:	b2d2      	uxtb	r2, r2
 800a6aa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6ac:	22ff      	movs	r2, #255	; 0xff
 800a6ae:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a6bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a6c0:	4a28      	ldr	r2, [pc, #160]	; (800a764 <xPortStartScheduler+0xfc>)
 800a6c2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6c4:	4b28      	ldr	r3, [pc, #160]	; (800a768 <xPortStartScheduler+0x100>)
 800a6c6:	2207      	movs	r2, #7
 800a6c8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6ca:	e009      	b.n	800a6e0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800a6cc:	4a26      	ldr	r2, [pc, #152]	; (800a768 <xPortStartScheduler+0x100>)
 800a6ce:	6813      	ldr	r3, [r2, #0]
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a6d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a6d8:	005b      	lsls	r3, r3, #1
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a6e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a6e8:	d1f0      	bne.n	800a6cc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6ea:	4b1f      	ldr	r3, [pc, #124]	; (800a768 <xPortStartScheduler+0x100>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b03      	cmp	r3, #3
 800a6f0:	d008      	beq.n	800a704 <xPortStartScheduler+0x9c>
 800a6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	e7fe      	b.n	800a702 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a704:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a70a:	4a17      	ldr	r2, [pc, #92]	; (800a768 <xPortStartScheduler+0x100>)
 800a70c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a70e:	9b01      	ldr	r3, [sp, #4]
 800a710:	b2db      	uxtb	r3, r3
 800a712:	4a13      	ldr	r2, [pc, #76]	; (800a760 <xPortStartScheduler+0xf8>)
 800a714:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a716:	4b15      	ldr	r3, [pc, #84]	; (800a76c <xPortStartScheduler+0x104>)
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800a71e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800a726:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800a728:	f7ff ff82 	bl	800a630 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a72c:	2400      	movs	r4, #0
 800a72e:	4b10      	ldr	r3, [pc, #64]	; (800a770 <xPortStartScheduler+0x108>)
 800a730:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800a732:	f7ff febf 	bl	800a4b4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a736:	4a0f      	ldr	r2, [pc, #60]	; (800a774 <xPortStartScheduler+0x10c>)
 800a738:	6813      	ldr	r3, [r2, #0]
 800a73a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a73e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800a740:	f7ff fea4 	bl	800a48c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a744:	f7ff f80a 	bl	800975c <vTaskSwitchContext>
	prvTaskExitError();
 800a748:	f7ff fe80 	bl	800a44c <prvTaskExitError>
}
 800a74c:	4620      	mov	r0, r4
 800a74e:	b002      	add	sp, #8
 800a750:	bd10      	pop	{r4, pc}
 800a752:	bf00      	nop
 800a754:	e000ed00 	.word	0xe000ed00
 800a758:	410fc271 	.word	0x410fc271
 800a75c:	410fc270 	.word	0x410fc270
 800a760:	e000e400 	.word	0xe000e400
 800a764:	20000a44 	.word	0x20000a44
 800a768:	20000a48 	.word	0x20000a48
 800a76c:	e000ed20 	.word	0xe000ed20
 800a770:	20000044 	.word	0x20000044
 800a774:	e000ef34 	.word	0xe000ef34

0800a778 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a778:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a77c:	2b0f      	cmp	r3, #15
 800a77e:	d90f      	bls.n	800a7a0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a780:	4a10      	ldr	r2, [pc, #64]	; (800a7c4 <vPortValidateInterruptPriority+0x4c>)
 800a782:	5c9b      	ldrb	r3, [r3, r2]
 800a784:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a786:	4a10      	ldr	r2, [pc, #64]	; (800a7c8 <vPortValidateInterruptPriority+0x50>)
 800a788:	7812      	ldrb	r2, [r2, #0]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d908      	bls.n	800a7a0 <vPortValidateInterruptPriority+0x28>
 800a78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	e7fe      	b.n	800a79e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a7a0:	4b0a      	ldr	r3, [pc, #40]	; (800a7cc <vPortValidateInterruptPriority+0x54>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7a8:	4a09      	ldr	r2, [pc, #36]	; (800a7d0 <vPortValidateInterruptPriority+0x58>)
 800a7aa:	6812      	ldr	r2, [r2, #0]
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d908      	bls.n	800a7c2 <vPortValidateInterruptPriority+0x4a>
 800a7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	e7fe      	b.n	800a7c0 <vPortValidateInterruptPriority+0x48>
	}
 800a7c2:	4770      	bx	lr
 800a7c4:	e000e3f0 	.word	0xe000e3f0
 800a7c8:	20000a44 	.word	0x20000a44
 800a7cc:	e000ed0c 	.word	0xe000ed0c
 800a7d0:	20000a48 	.word	0x20000a48

0800a7d4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7d4:	4a12      	ldr	r2, [pc, #72]	; (800a820 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7d6:	f012 0f07 	tst.w	r2, #7
 800a7da:	d01e      	beq.n	800a81a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7dc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7de:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7e2:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 800a7e6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7e8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7ea:	480e      	ldr	r0, [pc, #56]	; (800a824 <prvHeapInit+0x50>)
 800a7ec:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7f2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800a7f4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7f6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800a7fa:	480b      	ldr	r0, [pc, #44]	; (800a828 <prvHeapInit+0x54>)
 800a7fc:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800a7fe:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a800:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a802:	1a99      	subs	r1, r3, r2
 800a804:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a806:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a808:	4b08      	ldr	r3, [pc, #32]	; (800a82c <prvHeapInit+0x58>)
 800a80a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a80c:	4b08      	ldr	r3, [pc, #32]	; (800a830 <prvHeapInit+0x5c>)
 800a80e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a810:	4b08      	ldr	r3, [pc, #32]	; (800a834 <prvHeapInit+0x60>)
 800a812:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a816:	601a      	str	r2, [r3, #0]
}
 800a818:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a81a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a81e:	e7e4      	b.n	800a7ea <prvHeapInit+0x16>
 800a820:	20000a50 	.word	0x20000a50
 800a824:	20002a5c 	.word	0x20002a5c
 800a828:	20000a4c 	.word	0x20000a4c
 800a82c:	20002a58 	.word	0x20002a58
 800a830:	20002a54 	.word	0x20002a54
 800a834:	20002a50 	.word	0x20002a50

0800a838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a838:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a83a:	4b13      	ldr	r3, [pc, #76]	; (800a888 <prvInsertBlockIntoFreeList+0x50>)
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	4282      	cmp	r2, r0
 800a840:	d31b      	bcc.n	800a87a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a842:	6859      	ldr	r1, [r3, #4]
 800a844:	185c      	adds	r4, r3, r1
 800a846:	4284      	cmp	r4, r0
 800a848:	d103      	bne.n	800a852 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a84a:	6840      	ldr	r0, [r0, #4]
 800a84c:	4401      	add	r1, r0
 800a84e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a850:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a852:	6841      	ldr	r1, [r0, #4]
 800a854:	1844      	adds	r4, r0, r1
 800a856:	42a2      	cmp	r2, r4
 800a858:	d113      	bne.n	800a882 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a85a:	4c0c      	ldr	r4, [pc, #48]	; (800a88c <prvInsertBlockIntoFreeList+0x54>)
 800a85c:	6824      	ldr	r4, [r4, #0]
 800a85e:	42a2      	cmp	r2, r4
 800a860:	d00d      	beq.n	800a87e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a862:	6852      	ldr	r2, [r2, #4]
 800a864:	4411      	add	r1, r2
 800a866:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	6812      	ldr	r2, [r2, #0]
 800a86c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a86e:	4298      	cmp	r0, r3
 800a870:	d000      	beq.n	800a874 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a872:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a874:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a878:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a87a:	4613      	mov	r3, r2
 800a87c:	e7de      	b.n	800a83c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a87e:	6004      	str	r4, [r0, #0]
 800a880:	e7f5      	b.n	800a86e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a882:	6002      	str	r2, [r0, #0]
 800a884:	e7f3      	b.n	800a86e <prvInsertBlockIntoFreeList+0x36>
 800a886:	bf00      	nop
 800a888:	20002a5c 	.word	0x20002a5c
 800a88c:	20000a4c 	.word	0x20000a4c

0800a890 <pvPortMalloc>:
{
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a894:	f7fe fdd6 	bl	8009444 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a898:	4b3a      	ldr	r3, [pc, #232]	; (800a984 <pvPortMalloc+0xf4>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	b1bb      	cbz	r3, 800a8ce <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a89e:	4b3a      	ldr	r3, [pc, #232]	; (800a988 <pvPortMalloc+0xf8>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	421c      	tst	r4, r3
 800a8a4:	d163      	bne.n	800a96e <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 800a8a6:	b1ac      	cbz	r4, 800a8d4 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 800a8a8:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a8aa:	f014 0f07 	tst.w	r4, #7
 800a8ae:	d011      	beq.n	800a8d4 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a8b0:	f024 0407 	bic.w	r4, r4, #7
 800a8b4:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8b6:	f004 0307 	and.w	r3, r4, #7
 800a8ba:	b15b      	cbz	r3, 800a8d4 <pvPortMalloc+0x44>
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	e7fe      	b.n	800a8cc <pvPortMalloc+0x3c>
			prvHeapInit();
 800a8ce:	f7ff ff81 	bl	800a7d4 <prvHeapInit>
 800a8d2:	e7e4      	b.n	800a89e <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a8d4:	2c00      	cmp	r4, #0
 800a8d6:	d04c      	beq.n	800a972 <pvPortMalloc+0xe2>
 800a8d8:	4b2c      	ldr	r3, [pc, #176]	; (800a98c <pvPortMalloc+0xfc>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	42a3      	cmp	r3, r4
 800a8de:	d34a      	bcc.n	800a976 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 800a8e0:	4b2b      	ldr	r3, [pc, #172]	; (800a990 <pvPortMalloc+0x100>)
 800a8e2:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8e4:	e001      	b.n	800a8ea <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 800a8e6:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800a8e8:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8ea:	686a      	ldr	r2, [r5, #4]
 800a8ec:	42a2      	cmp	r2, r4
 800a8ee:	d202      	bcs.n	800a8f6 <pvPortMalloc+0x66>
 800a8f0:	682a      	ldr	r2, [r5, #0]
 800a8f2:	2a00      	cmp	r2, #0
 800a8f4:	d1f7      	bne.n	800a8e6 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 800a8f6:	4a23      	ldr	r2, [pc, #140]	; (800a984 <pvPortMalloc+0xf4>)
 800a8f8:	6812      	ldr	r2, [r2, #0]
 800a8fa:	42aa      	cmp	r2, r5
 800a8fc:	d03d      	beq.n	800a97a <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a8fe:	681e      	ldr	r6, [r3, #0]
 800a900:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a902:	682a      	ldr	r2, [r5, #0]
 800a904:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a906:	686b      	ldr	r3, [r5, #4]
 800a908:	1b1b      	subs	r3, r3, r4
 800a90a:	2b10      	cmp	r3, #16
 800a90c:	d910      	bls.n	800a930 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a90e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a910:	f010 0f07 	tst.w	r0, #7
 800a914:	d008      	beq.n	800a928 <pvPortMalloc+0x98>
 800a916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
 800a926:	e7fe      	b.n	800a926 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a928:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a92a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a92c:	f7ff ff84 	bl	800a838 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a930:	686a      	ldr	r2, [r5, #4]
 800a932:	4916      	ldr	r1, [pc, #88]	; (800a98c <pvPortMalloc+0xfc>)
 800a934:	680b      	ldr	r3, [r1, #0]
 800a936:	1a9b      	subs	r3, r3, r2
 800a938:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a93a:	4916      	ldr	r1, [pc, #88]	; (800a994 <pvPortMalloc+0x104>)
 800a93c:	6809      	ldr	r1, [r1, #0]
 800a93e:	428b      	cmp	r3, r1
 800a940:	d201      	bcs.n	800a946 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a942:	4914      	ldr	r1, [pc, #80]	; (800a994 <pvPortMalloc+0x104>)
 800a944:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a946:	4b10      	ldr	r3, [pc, #64]	; (800a988 <pvPortMalloc+0xf8>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a94e:	2300      	movs	r3, #0
 800a950:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800a952:	f7fe fe11 	bl	8009578 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a956:	f016 0f07 	tst.w	r6, #7
 800a95a:	d010      	beq.n	800a97e <pvPortMalloc+0xee>
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	e7fe      	b.n	800a96c <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 800a96e:	2600      	movs	r6, #0
 800a970:	e7ef      	b.n	800a952 <pvPortMalloc+0xc2>
 800a972:	2600      	movs	r6, #0
 800a974:	e7ed      	b.n	800a952 <pvPortMalloc+0xc2>
 800a976:	2600      	movs	r6, #0
 800a978:	e7eb      	b.n	800a952 <pvPortMalloc+0xc2>
 800a97a:	2600      	movs	r6, #0
 800a97c:	e7e9      	b.n	800a952 <pvPortMalloc+0xc2>
}
 800a97e:	4630      	mov	r0, r6
 800a980:	bd70      	pop	{r4, r5, r6, pc}
 800a982:	bf00      	nop
 800a984:	20000a4c 	.word	0x20000a4c
 800a988:	20002a50 	.word	0x20002a50
 800a98c:	20002a54 	.word	0x20002a54
 800a990:	20002a5c 	.word	0x20002a5c
 800a994:	20002a58 	.word	0x20002a58

0800a998 <vPortFree>:
	if( pv != NULL )
 800a998:	b380      	cbz	r0, 800a9fc <vPortFree+0x64>
{
 800a99a:	b538      	push	{r3, r4, r5, lr}
 800a99c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800a99e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a9a2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a9a6:	4916      	ldr	r1, [pc, #88]	; (800aa00 <vPortFree+0x68>)
 800a9a8:	6809      	ldr	r1, [r1, #0]
 800a9aa:	420a      	tst	r2, r1
 800a9ac:	d108      	bne.n	800a9c0 <vPortFree+0x28>
 800a9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	e7fe      	b.n	800a9be <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a9c0:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800a9c4:	b140      	cbz	r0, 800a9d8 <vPortFree+0x40>
 800a9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	e7fe      	b.n	800a9d6 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a9d8:	ea22 0201 	bic.w	r2, r2, r1
 800a9dc:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800a9e0:	f7fe fd30 	bl	8009444 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a9e4:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800a9e8:	4a06      	ldr	r2, [pc, #24]	; (800aa04 <vPortFree+0x6c>)
 800a9ea:	6813      	ldr	r3, [r2, #0]
 800a9ec:	440b      	add	r3, r1
 800a9ee:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f7ff ff21 	bl	800a838 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800a9f6:	f7fe fdbf 	bl	8009578 <xTaskResumeAll>
}
 800a9fa:	bd38      	pop	{r3, r4, r5, pc}
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	20002a50 	.word	0x20002a50
 800aa04:	20002a54 	.word	0x20002a54

0800aa08 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 800aa08:	4603      	mov	r3, r0
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;
 800aa0a:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800aa0c:	4608      	mov	r0, r1

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800aa0e:	e004      	b.n	800aa1a <prvGetNumberOfParameters+0x12>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800aa10:	b911      	cbnz	r1, 800aa18 <prvGetNumberOfParameters+0x10>
			{
				cParameters++;
 800aa12:	3001      	adds	r0, #1
 800aa14:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800aa16:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800aa18:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800aa1a:	781a      	ldrb	r2, [r3, #0]
 800aa1c:	b11a      	cbz	r2, 800aa26 <prvGetNumberOfParameters+0x1e>
		if( ( *pcCommandString ) == ' ' )
 800aa1e:	2a20      	cmp	r2, #32
 800aa20:	d0f6      	beq.n	800aa10 <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800aa22:	2100      	movs	r1, #0
 800aa24:	e7f8      	b.n	800aa18 <prvGetNumberOfParameters+0x10>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800aa26:	b901      	cbnz	r1, 800aa2a <prvGetNumberOfParameters+0x22>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800aa28:	4770      	bx	lr
		cParameters--;
 800aa2a:	3801      	subs	r0, #1
 800aa2c:	b240      	sxtb	r0, r0
 800aa2e:	e7fb      	b.n	800aa28 <prvGetNumberOfParameters+0x20>

0800aa30 <prvHelpCommand>:
{
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	460a      	mov	r2, r1
	if( pxCommand == NULL )
 800aa34:	4b09      	ldr	r3, [pc, #36]	; (800aa5c <prvHelpCommand+0x2c>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	b153      	cbz	r3, 800aa50 <prvHelpCommand+0x20>
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800aa3a:	4c08      	ldr	r4, [pc, #32]	; (800aa5c <prvHelpCommand+0x2c>)
 800aa3c:	6825      	ldr	r5, [r4, #0]
 800aa3e:	682b      	ldr	r3, [r5, #0]
 800aa40:	6859      	ldr	r1, [r3, #4]
 800aa42:	f000 f90b 	bl	800ac5c <strncpy>
	pxCommand = pxCommand->pxNext;
 800aa46:	686b      	ldr	r3, [r5, #4]
 800aa48:	6023      	str	r3, [r4, #0]
	if( pxCommand == NULL )
 800aa4a:	b12b      	cbz	r3, 800aa58 <prvHelpCommand+0x28>
		xReturn = pdTRUE;
 800aa4c:	2001      	movs	r0, #1
}
 800aa4e:	bd38      	pop	{r3, r4, r5, pc}
		pxCommand = &xRegisteredCommands;
 800aa50:	4b02      	ldr	r3, [pc, #8]	; (800aa5c <prvHelpCommand+0x2c>)
 800aa52:	4903      	ldr	r1, [pc, #12]	; (800aa60 <prvHelpCommand+0x30>)
 800aa54:	6019      	str	r1, [r3, #0]
 800aa56:	e7f0      	b.n	800aa3a <prvHelpCommand+0xa>
		xReturn = pdFALSE;
 800aa58:	2000      	movs	r0, #0
 800aa5a:	e7f8      	b.n	800aa4e <prvHelpCommand+0x1e>
 800aa5c:	20002a68 	.word	0x20002a68
 800aa60:	2000004c 	.word	0x2000004c

0800aa64 <FreeRTOS_CLIRegisterCommand>:
{
 800aa64:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxCommandToRegister );
 800aa66:	b940      	cbnz	r0, 800aa7a <FreeRTOS_CLIRegisterCommand+0x16>
 800aa68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	e7fe      	b.n	800aa78 <FreeRTOS_CLIRegisterCommand+0x14>
 800aa7a:	4605      	mov	r5, r0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800aa7c:	2008      	movs	r0, #8
 800aa7e:	f7ff ff07 	bl	800a890 <pvPortMalloc>
	configASSERT( pxNewListItem );
 800aa82:	4604      	mov	r4, r0
 800aa84:	b940      	cbnz	r0, 800aa98 <FreeRTOS_CLIRegisterCommand+0x34>
 800aa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	e7fe      	b.n	800aa96 <FreeRTOS_CLIRegisterCommand+0x32>
		taskENTER_CRITICAL();
 800aa98:	f7ff fd44 	bl	800a524 <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800aa9c:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800aaa2:	4b04      	ldr	r3, [pc, #16]	; (800aab4 <FreeRTOS_CLIRegisterCommand+0x50>)
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800aaa8:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800aaaa:	f7ff fd5d 	bl	800a568 <vPortExitCritical>
}
 800aaae:	2001      	movs	r0, #1
 800aab0:	bd38      	pop	{r3, r4, r5, pc}
 800aab2:	bf00      	nop
 800aab4:	20000048 	.word	0x20000048

0800aab8 <FreeRTOS_CLIProcessCommand>:
{
 800aab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aabc:	4606      	mov	r6, r0
 800aabe:	4689      	mov	r9, r1
 800aac0:	4690      	mov	r8, r2
	if( pxCommand == NULL )
 800aac2:	4b2a      	ldr	r3, [pc, #168]	; (800ab6c <FreeRTOS_CLIProcessCommand+0xb4>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	b1ab      	cbz	r3, 800aaf4 <FreeRTOS_CLIProcessCommand+0x3c>
BaseType_t xReturn = pdTRUE;
 800aac8:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800aaca:	4b28      	ldr	r3, [pc, #160]	; (800ab6c <FreeRTOS_CLIProcessCommand+0xb4>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	b10b      	cbz	r3, 800aad4 <FreeRTOS_CLIProcessCommand+0x1c>
 800aad0:	2c00      	cmp	r4, #0
 800aad2:	d03b      	beq.n	800ab4c <FreeRTOS_CLIProcessCommand+0x94>
	else if( pxCommand != NULL )
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d042      	beq.n	800ab5e <FreeRTOS_CLIProcessCommand+0xa6>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	4632      	mov	r2, r6
 800aade:	4641      	mov	r1, r8
 800aae0:	4648      	mov	r0, r9
 800aae2:	4798      	blx	r3
		if( xReturn == pdFALSE )
 800aae4:	4604      	mov	r4, r0
 800aae6:	b910      	cbnz	r0, 800aaee <FreeRTOS_CLIProcessCommand+0x36>
			pxCommand = NULL;
 800aae8:	4b20      	ldr	r3, [pc, #128]	; (800ab6c <FreeRTOS_CLIProcessCommand+0xb4>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	601a      	str	r2, [r3, #0]
}
 800aaee:	4620      	mov	r0, r4
 800aaf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800aaf4:	4b1d      	ldr	r3, [pc, #116]	; (800ab6c <FreeRTOS_CLIProcessCommand+0xb4>)
 800aaf6:	4a1e      	ldr	r2, [pc, #120]	; (800ab70 <FreeRTOS_CLIProcessCommand+0xb8>)
 800aaf8:	601a      	str	r2, [r3, #0]
 800aafa:	e008      	b.n	800ab0e <FreeRTOS_CLIProcessCommand+0x56>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800aafc:	4602      	mov	r2, r0
 800aafe:	4629      	mov	r1, r5
 800ab00:	4630      	mov	r0, r6
 800ab02:	f000 f899 	bl	800ac38 <strncmp>
 800ab06:	b180      	cbz	r0, 800ab2a <FreeRTOS_CLIProcessCommand+0x72>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ab08:	6862      	ldr	r2, [r4, #4]
 800ab0a:	4b18      	ldr	r3, [pc, #96]	; (800ab6c <FreeRTOS_CLIProcessCommand+0xb4>)
 800ab0c:	601a      	str	r2, [r3, #0]
 800ab0e:	4b17      	ldr	r3, [pc, #92]	; (800ab6c <FreeRTOS_CLIProcessCommand+0xb4>)
 800ab10:	681c      	ldr	r4, [r3, #0]
 800ab12:	b1cc      	cbz	r4, 800ab48 <FreeRTOS_CLIProcessCommand+0x90>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800ab14:	6827      	ldr	r7, [r4, #0]
 800ab16:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 800ab18:	4628      	mov	r0, r5
 800ab1a:	f7f5 fb61 	bl	80001e0 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ab1e:	5c33      	ldrb	r3, [r6, r0]
 800ab20:	2b20      	cmp	r3, #32
 800ab22:	d0eb      	beq.n	800aafc <FreeRTOS_CLIProcessCommand+0x44>
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1ef      	bne.n	800ab08 <FreeRTOS_CLIProcessCommand+0x50>
 800ab28:	e7e8      	b.n	800aafc <FreeRTOS_CLIProcessCommand+0x44>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800ab2a:	f997 400c 	ldrsb.w	r4, [r7, #12]
 800ab2e:	2c00      	cmp	r4, #0
 800ab30:	da01      	bge.n	800ab36 <FreeRTOS_CLIProcessCommand+0x7e>
BaseType_t xReturn = pdTRUE;
 800ab32:	2401      	movs	r4, #1
 800ab34:	e7c9      	b.n	800aaca <FreeRTOS_CLIProcessCommand+0x12>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800ab36:	4630      	mov	r0, r6
 800ab38:	f7ff ff66 	bl	800aa08 <prvGetNumberOfParameters>
 800ab3c:	4284      	cmp	r4, r0
 800ab3e:	d001      	beq.n	800ab44 <FreeRTOS_CLIProcessCommand+0x8c>
							xReturn = pdFALSE;
 800ab40:	2400      	movs	r4, #0
 800ab42:	e7c2      	b.n	800aaca <FreeRTOS_CLIProcessCommand+0x12>
BaseType_t xReturn = pdTRUE;
 800ab44:	2401      	movs	r4, #1
 800ab46:	e7c0      	b.n	800aaca <FreeRTOS_CLIProcessCommand+0x12>
 800ab48:	2401      	movs	r4, #1
 800ab4a:	e7be      	b.n	800aaca <FreeRTOS_CLIProcessCommand+0x12>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ab4c:	4642      	mov	r2, r8
 800ab4e:	4909      	ldr	r1, [pc, #36]	; (800ab74 <FreeRTOS_CLIProcessCommand+0xbc>)
 800ab50:	4648      	mov	r0, r9
 800ab52:	f000 f883 	bl	800ac5c <strncpy>
		pxCommand = NULL;
 800ab56:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <FreeRTOS_CLIProcessCommand+0xb4>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	e7c7      	b.n	800aaee <FreeRTOS_CLIProcessCommand+0x36>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ab5e:	4642      	mov	r2, r8
 800ab60:	4905      	ldr	r1, [pc, #20]	; (800ab78 <FreeRTOS_CLIProcessCommand+0xc0>)
 800ab62:	4648      	mov	r0, r9
 800ab64:	f000 f87a 	bl	800ac5c <strncpy>
		xReturn = pdFALSE;
 800ab68:	2400      	movs	r4, #0
	return xReturn;
 800ab6a:	e7c0      	b.n	800aaee <FreeRTOS_CLIProcessCommand+0x36>
 800ab6c:	20002a64 	.word	0x20002a64
 800ab70:	2000004c 	.word	0x2000004c
 800ab74:	0800b970 	.word	0x0800b970
 800ab78:	0800b9c8 	.word	0x0800b9c8

0800ab7c <__errno>:
 800ab7c:	4b01      	ldr	r3, [pc, #4]	; (800ab84 <__errno+0x8>)
 800ab7e:	6818      	ldr	r0, [r3, #0]
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	20000054 	.word	0x20000054

0800ab88 <__libc_init_array>:
 800ab88:	b570      	push	{r4, r5, r6, lr}
 800ab8a:	4e0d      	ldr	r6, [pc, #52]	; (800abc0 <__libc_init_array+0x38>)
 800ab8c:	4c0d      	ldr	r4, [pc, #52]	; (800abc4 <__libc_init_array+0x3c>)
 800ab8e:	1ba4      	subs	r4, r4, r6
 800ab90:	10a4      	asrs	r4, r4, #2
 800ab92:	2500      	movs	r5, #0
 800ab94:	42a5      	cmp	r5, r4
 800ab96:	d109      	bne.n	800abac <__libc_init_array+0x24>
 800ab98:	4e0b      	ldr	r6, [pc, #44]	; (800abc8 <__libc_init_array+0x40>)
 800ab9a:	4c0c      	ldr	r4, [pc, #48]	; (800abcc <__libc_init_array+0x44>)
 800ab9c:	f000 fc50 	bl	800b440 <_init>
 800aba0:	1ba4      	subs	r4, r4, r6
 800aba2:	10a4      	asrs	r4, r4, #2
 800aba4:	2500      	movs	r5, #0
 800aba6:	42a5      	cmp	r5, r4
 800aba8:	d105      	bne.n	800abb6 <__libc_init_array+0x2e>
 800abaa:	bd70      	pop	{r4, r5, r6, pc}
 800abac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abb0:	4798      	blx	r3
 800abb2:	3501      	adds	r5, #1
 800abb4:	e7ee      	b.n	800ab94 <__libc_init_array+0xc>
 800abb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abba:	4798      	blx	r3
 800abbc:	3501      	adds	r5, #1
 800abbe:	e7f2      	b.n	800aba6 <__libc_init_array+0x1e>
 800abc0:	0800ba9c 	.word	0x0800ba9c
 800abc4:	0800ba9c 	.word	0x0800ba9c
 800abc8:	0800ba9c 	.word	0x0800ba9c
 800abcc:	0800baa0 	.word	0x0800baa0

0800abd0 <memcpy>:
 800abd0:	b510      	push	{r4, lr}
 800abd2:	1e43      	subs	r3, r0, #1
 800abd4:	440a      	add	r2, r1
 800abd6:	4291      	cmp	r1, r2
 800abd8:	d100      	bne.n	800abdc <memcpy+0xc>
 800abda:	bd10      	pop	{r4, pc}
 800abdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abe4:	e7f7      	b.n	800abd6 <memcpy+0x6>

0800abe6 <memset>:
 800abe6:	4402      	add	r2, r0
 800abe8:	4603      	mov	r3, r0
 800abea:	4293      	cmp	r3, r2
 800abec:	d100      	bne.n	800abf0 <memset+0xa>
 800abee:	4770      	bx	lr
 800abf0:	f803 1b01 	strb.w	r1, [r3], #1
 800abf4:	e7f9      	b.n	800abea <memset+0x4>
	...

0800abf8 <siprintf>:
 800abf8:	b40e      	push	{r1, r2, r3}
 800abfa:	b500      	push	{lr}
 800abfc:	b09c      	sub	sp, #112	; 0x70
 800abfe:	ab1d      	add	r3, sp, #116	; 0x74
 800ac00:	9002      	str	r0, [sp, #8]
 800ac02:	9006      	str	r0, [sp, #24]
 800ac04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac08:	4809      	ldr	r0, [pc, #36]	; (800ac30 <siprintf+0x38>)
 800ac0a:	9107      	str	r1, [sp, #28]
 800ac0c:	9104      	str	r1, [sp, #16]
 800ac0e:	4909      	ldr	r1, [pc, #36]	; (800ac34 <siprintf+0x3c>)
 800ac10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac14:	9105      	str	r1, [sp, #20]
 800ac16:	6800      	ldr	r0, [r0, #0]
 800ac18:	9301      	str	r3, [sp, #4]
 800ac1a:	a902      	add	r1, sp, #8
 800ac1c:	f000 f88e 	bl	800ad3c <_svfiprintf_r>
 800ac20:	9b02      	ldr	r3, [sp, #8]
 800ac22:	2200      	movs	r2, #0
 800ac24:	701a      	strb	r2, [r3, #0]
 800ac26:	b01c      	add	sp, #112	; 0x70
 800ac28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac2c:	b003      	add	sp, #12
 800ac2e:	4770      	bx	lr
 800ac30:	20000054 	.word	0x20000054
 800ac34:	ffff0208 	.word	0xffff0208

0800ac38 <strncmp>:
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	b16a      	cbz	r2, 800ac58 <strncmp+0x20>
 800ac3c:	3901      	subs	r1, #1
 800ac3e:	1884      	adds	r4, r0, r2
 800ac40:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ac44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d103      	bne.n	800ac54 <strncmp+0x1c>
 800ac4c:	42a0      	cmp	r0, r4
 800ac4e:	d001      	beq.n	800ac54 <strncmp+0x1c>
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1f5      	bne.n	800ac40 <strncmp+0x8>
 800ac54:	1a98      	subs	r0, r3, r2
 800ac56:	bd10      	pop	{r4, pc}
 800ac58:	4610      	mov	r0, r2
 800ac5a:	e7fc      	b.n	800ac56 <strncmp+0x1e>

0800ac5c <strncpy>:
 800ac5c:	b570      	push	{r4, r5, r6, lr}
 800ac5e:	3901      	subs	r1, #1
 800ac60:	4604      	mov	r4, r0
 800ac62:	b902      	cbnz	r2, 800ac66 <strncpy+0xa>
 800ac64:	bd70      	pop	{r4, r5, r6, pc}
 800ac66:	4623      	mov	r3, r4
 800ac68:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800ac6c:	f803 5b01 	strb.w	r5, [r3], #1
 800ac70:	1e56      	subs	r6, r2, #1
 800ac72:	b92d      	cbnz	r5, 800ac80 <strncpy+0x24>
 800ac74:	4414      	add	r4, r2
 800ac76:	42a3      	cmp	r3, r4
 800ac78:	d0f4      	beq.n	800ac64 <strncpy+0x8>
 800ac7a:	f803 5b01 	strb.w	r5, [r3], #1
 800ac7e:	e7fa      	b.n	800ac76 <strncpy+0x1a>
 800ac80:	461c      	mov	r4, r3
 800ac82:	4632      	mov	r2, r6
 800ac84:	e7ed      	b.n	800ac62 <strncpy+0x6>

0800ac86 <__ssputs_r>:
 800ac86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8a:	688e      	ldr	r6, [r1, #8]
 800ac8c:	429e      	cmp	r6, r3
 800ac8e:	4682      	mov	sl, r0
 800ac90:	460c      	mov	r4, r1
 800ac92:	4690      	mov	r8, r2
 800ac94:	4699      	mov	r9, r3
 800ac96:	d837      	bhi.n	800ad08 <__ssputs_r+0x82>
 800ac98:	898a      	ldrh	r2, [r1, #12]
 800ac9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac9e:	d031      	beq.n	800ad04 <__ssputs_r+0x7e>
 800aca0:	6825      	ldr	r5, [r4, #0]
 800aca2:	6909      	ldr	r1, [r1, #16]
 800aca4:	1a6f      	subs	r7, r5, r1
 800aca6:	6965      	ldr	r5, [r4, #20]
 800aca8:	2302      	movs	r3, #2
 800acaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acae:	fb95 f5f3 	sdiv	r5, r5, r3
 800acb2:	f109 0301 	add.w	r3, r9, #1
 800acb6:	443b      	add	r3, r7
 800acb8:	429d      	cmp	r5, r3
 800acba:	bf38      	it	cc
 800acbc:	461d      	movcc	r5, r3
 800acbe:	0553      	lsls	r3, r2, #21
 800acc0:	d530      	bpl.n	800ad24 <__ssputs_r+0x9e>
 800acc2:	4629      	mov	r1, r5
 800acc4:	f000 fb22 	bl	800b30c <_malloc_r>
 800acc8:	4606      	mov	r6, r0
 800acca:	b950      	cbnz	r0, 800ace2 <__ssputs_r+0x5c>
 800accc:	230c      	movs	r3, #12
 800acce:	f8ca 3000 	str.w	r3, [sl]
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acd8:	81a3      	strh	r3, [r4, #12]
 800acda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace2:	463a      	mov	r2, r7
 800ace4:	6921      	ldr	r1, [r4, #16]
 800ace6:	f7ff ff73 	bl	800abd0 <memcpy>
 800acea:	89a3      	ldrh	r3, [r4, #12]
 800acec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acf4:	81a3      	strh	r3, [r4, #12]
 800acf6:	6126      	str	r6, [r4, #16]
 800acf8:	6165      	str	r5, [r4, #20]
 800acfa:	443e      	add	r6, r7
 800acfc:	1bed      	subs	r5, r5, r7
 800acfe:	6026      	str	r6, [r4, #0]
 800ad00:	60a5      	str	r5, [r4, #8]
 800ad02:	464e      	mov	r6, r9
 800ad04:	454e      	cmp	r6, r9
 800ad06:	d900      	bls.n	800ad0a <__ssputs_r+0x84>
 800ad08:	464e      	mov	r6, r9
 800ad0a:	4632      	mov	r2, r6
 800ad0c:	4641      	mov	r1, r8
 800ad0e:	6820      	ldr	r0, [r4, #0]
 800ad10:	f000 fa94 	bl	800b23c <memmove>
 800ad14:	68a3      	ldr	r3, [r4, #8]
 800ad16:	1b9b      	subs	r3, r3, r6
 800ad18:	60a3      	str	r3, [r4, #8]
 800ad1a:	6823      	ldr	r3, [r4, #0]
 800ad1c:	441e      	add	r6, r3
 800ad1e:	6026      	str	r6, [r4, #0]
 800ad20:	2000      	movs	r0, #0
 800ad22:	e7dc      	b.n	800acde <__ssputs_r+0x58>
 800ad24:	462a      	mov	r2, r5
 800ad26:	f000 fb4b 	bl	800b3c0 <_realloc_r>
 800ad2a:	4606      	mov	r6, r0
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d1e2      	bne.n	800acf6 <__ssputs_r+0x70>
 800ad30:	6921      	ldr	r1, [r4, #16]
 800ad32:	4650      	mov	r0, sl
 800ad34:	f000 fa9c 	bl	800b270 <_free_r>
 800ad38:	e7c8      	b.n	800accc <__ssputs_r+0x46>
	...

0800ad3c <_svfiprintf_r>:
 800ad3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad40:	461d      	mov	r5, r3
 800ad42:	898b      	ldrh	r3, [r1, #12]
 800ad44:	061f      	lsls	r7, r3, #24
 800ad46:	b09d      	sub	sp, #116	; 0x74
 800ad48:	4680      	mov	r8, r0
 800ad4a:	460c      	mov	r4, r1
 800ad4c:	4616      	mov	r6, r2
 800ad4e:	d50f      	bpl.n	800ad70 <_svfiprintf_r+0x34>
 800ad50:	690b      	ldr	r3, [r1, #16]
 800ad52:	b96b      	cbnz	r3, 800ad70 <_svfiprintf_r+0x34>
 800ad54:	2140      	movs	r1, #64	; 0x40
 800ad56:	f000 fad9 	bl	800b30c <_malloc_r>
 800ad5a:	6020      	str	r0, [r4, #0]
 800ad5c:	6120      	str	r0, [r4, #16]
 800ad5e:	b928      	cbnz	r0, 800ad6c <_svfiprintf_r+0x30>
 800ad60:	230c      	movs	r3, #12
 800ad62:	f8c8 3000 	str.w	r3, [r8]
 800ad66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad6a:	e0c8      	b.n	800aefe <_svfiprintf_r+0x1c2>
 800ad6c:	2340      	movs	r3, #64	; 0x40
 800ad6e:	6163      	str	r3, [r4, #20]
 800ad70:	2300      	movs	r3, #0
 800ad72:	9309      	str	r3, [sp, #36]	; 0x24
 800ad74:	2320      	movs	r3, #32
 800ad76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad7a:	2330      	movs	r3, #48	; 0x30
 800ad7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad80:	9503      	str	r5, [sp, #12]
 800ad82:	f04f 0b01 	mov.w	fp, #1
 800ad86:	4637      	mov	r7, r6
 800ad88:	463d      	mov	r5, r7
 800ad8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ad8e:	b10b      	cbz	r3, 800ad94 <_svfiprintf_r+0x58>
 800ad90:	2b25      	cmp	r3, #37	; 0x25
 800ad92:	d13e      	bne.n	800ae12 <_svfiprintf_r+0xd6>
 800ad94:	ebb7 0a06 	subs.w	sl, r7, r6
 800ad98:	d00b      	beq.n	800adb2 <_svfiprintf_r+0x76>
 800ad9a:	4653      	mov	r3, sl
 800ad9c:	4632      	mov	r2, r6
 800ad9e:	4621      	mov	r1, r4
 800ada0:	4640      	mov	r0, r8
 800ada2:	f7ff ff70 	bl	800ac86 <__ssputs_r>
 800ada6:	3001      	adds	r0, #1
 800ada8:	f000 80a4 	beq.w	800aef4 <_svfiprintf_r+0x1b8>
 800adac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adae:	4453      	add	r3, sl
 800adb0:	9309      	str	r3, [sp, #36]	; 0x24
 800adb2:	783b      	ldrb	r3, [r7, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 809d 	beq.w	800aef4 <_svfiprintf_r+0x1b8>
 800adba:	2300      	movs	r3, #0
 800adbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adc4:	9304      	str	r3, [sp, #16]
 800adc6:	9307      	str	r3, [sp, #28]
 800adc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adcc:	931a      	str	r3, [sp, #104]	; 0x68
 800adce:	462f      	mov	r7, r5
 800add0:	2205      	movs	r2, #5
 800add2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800add6:	4850      	ldr	r0, [pc, #320]	; (800af18 <_svfiprintf_r+0x1dc>)
 800add8:	f7f5 fa0a 	bl	80001f0 <memchr>
 800addc:	9b04      	ldr	r3, [sp, #16]
 800adde:	b9d0      	cbnz	r0, 800ae16 <_svfiprintf_r+0xda>
 800ade0:	06d9      	lsls	r1, r3, #27
 800ade2:	bf44      	itt	mi
 800ade4:	2220      	movmi	r2, #32
 800ade6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800adea:	071a      	lsls	r2, r3, #28
 800adec:	bf44      	itt	mi
 800adee:	222b      	movmi	r2, #43	; 0x2b
 800adf0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800adf4:	782a      	ldrb	r2, [r5, #0]
 800adf6:	2a2a      	cmp	r2, #42	; 0x2a
 800adf8:	d015      	beq.n	800ae26 <_svfiprintf_r+0xea>
 800adfa:	9a07      	ldr	r2, [sp, #28]
 800adfc:	462f      	mov	r7, r5
 800adfe:	2000      	movs	r0, #0
 800ae00:	250a      	movs	r5, #10
 800ae02:	4639      	mov	r1, r7
 800ae04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae08:	3b30      	subs	r3, #48	; 0x30
 800ae0a:	2b09      	cmp	r3, #9
 800ae0c:	d94d      	bls.n	800aeaa <_svfiprintf_r+0x16e>
 800ae0e:	b1b8      	cbz	r0, 800ae40 <_svfiprintf_r+0x104>
 800ae10:	e00f      	b.n	800ae32 <_svfiprintf_r+0xf6>
 800ae12:	462f      	mov	r7, r5
 800ae14:	e7b8      	b.n	800ad88 <_svfiprintf_r+0x4c>
 800ae16:	4a40      	ldr	r2, [pc, #256]	; (800af18 <_svfiprintf_r+0x1dc>)
 800ae18:	1a80      	subs	r0, r0, r2
 800ae1a:	fa0b f000 	lsl.w	r0, fp, r0
 800ae1e:	4318      	orrs	r0, r3
 800ae20:	9004      	str	r0, [sp, #16]
 800ae22:	463d      	mov	r5, r7
 800ae24:	e7d3      	b.n	800adce <_svfiprintf_r+0x92>
 800ae26:	9a03      	ldr	r2, [sp, #12]
 800ae28:	1d11      	adds	r1, r2, #4
 800ae2a:	6812      	ldr	r2, [r2, #0]
 800ae2c:	9103      	str	r1, [sp, #12]
 800ae2e:	2a00      	cmp	r2, #0
 800ae30:	db01      	blt.n	800ae36 <_svfiprintf_r+0xfa>
 800ae32:	9207      	str	r2, [sp, #28]
 800ae34:	e004      	b.n	800ae40 <_svfiprintf_r+0x104>
 800ae36:	4252      	negs	r2, r2
 800ae38:	f043 0302 	orr.w	r3, r3, #2
 800ae3c:	9207      	str	r2, [sp, #28]
 800ae3e:	9304      	str	r3, [sp, #16]
 800ae40:	783b      	ldrb	r3, [r7, #0]
 800ae42:	2b2e      	cmp	r3, #46	; 0x2e
 800ae44:	d10c      	bne.n	800ae60 <_svfiprintf_r+0x124>
 800ae46:	787b      	ldrb	r3, [r7, #1]
 800ae48:	2b2a      	cmp	r3, #42	; 0x2a
 800ae4a:	d133      	bne.n	800aeb4 <_svfiprintf_r+0x178>
 800ae4c:	9b03      	ldr	r3, [sp, #12]
 800ae4e:	1d1a      	adds	r2, r3, #4
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	9203      	str	r2, [sp, #12]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	bfb8      	it	lt
 800ae58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ae5c:	3702      	adds	r7, #2
 800ae5e:	9305      	str	r3, [sp, #20]
 800ae60:	4d2e      	ldr	r5, [pc, #184]	; (800af1c <_svfiprintf_r+0x1e0>)
 800ae62:	7839      	ldrb	r1, [r7, #0]
 800ae64:	2203      	movs	r2, #3
 800ae66:	4628      	mov	r0, r5
 800ae68:	f7f5 f9c2 	bl	80001f0 <memchr>
 800ae6c:	b138      	cbz	r0, 800ae7e <_svfiprintf_r+0x142>
 800ae6e:	2340      	movs	r3, #64	; 0x40
 800ae70:	1b40      	subs	r0, r0, r5
 800ae72:	fa03 f000 	lsl.w	r0, r3, r0
 800ae76:	9b04      	ldr	r3, [sp, #16]
 800ae78:	4303      	orrs	r3, r0
 800ae7a:	3701      	adds	r7, #1
 800ae7c:	9304      	str	r3, [sp, #16]
 800ae7e:	7839      	ldrb	r1, [r7, #0]
 800ae80:	4827      	ldr	r0, [pc, #156]	; (800af20 <_svfiprintf_r+0x1e4>)
 800ae82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae86:	2206      	movs	r2, #6
 800ae88:	1c7e      	adds	r6, r7, #1
 800ae8a:	f7f5 f9b1 	bl	80001f0 <memchr>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d038      	beq.n	800af04 <_svfiprintf_r+0x1c8>
 800ae92:	4b24      	ldr	r3, [pc, #144]	; (800af24 <_svfiprintf_r+0x1e8>)
 800ae94:	bb13      	cbnz	r3, 800aedc <_svfiprintf_r+0x1a0>
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	3307      	adds	r3, #7
 800ae9a:	f023 0307 	bic.w	r3, r3, #7
 800ae9e:	3308      	adds	r3, #8
 800aea0:	9303      	str	r3, [sp, #12]
 800aea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea4:	444b      	add	r3, r9
 800aea6:	9309      	str	r3, [sp, #36]	; 0x24
 800aea8:	e76d      	b.n	800ad86 <_svfiprintf_r+0x4a>
 800aeaa:	fb05 3202 	mla	r2, r5, r2, r3
 800aeae:	2001      	movs	r0, #1
 800aeb0:	460f      	mov	r7, r1
 800aeb2:	e7a6      	b.n	800ae02 <_svfiprintf_r+0xc6>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	3701      	adds	r7, #1
 800aeb8:	9305      	str	r3, [sp, #20]
 800aeba:	4619      	mov	r1, r3
 800aebc:	250a      	movs	r5, #10
 800aebe:	4638      	mov	r0, r7
 800aec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aec4:	3a30      	subs	r2, #48	; 0x30
 800aec6:	2a09      	cmp	r2, #9
 800aec8:	d903      	bls.n	800aed2 <_svfiprintf_r+0x196>
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d0c8      	beq.n	800ae60 <_svfiprintf_r+0x124>
 800aece:	9105      	str	r1, [sp, #20]
 800aed0:	e7c6      	b.n	800ae60 <_svfiprintf_r+0x124>
 800aed2:	fb05 2101 	mla	r1, r5, r1, r2
 800aed6:	2301      	movs	r3, #1
 800aed8:	4607      	mov	r7, r0
 800aeda:	e7f0      	b.n	800aebe <_svfiprintf_r+0x182>
 800aedc:	ab03      	add	r3, sp, #12
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	4622      	mov	r2, r4
 800aee2:	4b11      	ldr	r3, [pc, #68]	; (800af28 <_svfiprintf_r+0x1ec>)
 800aee4:	a904      	add	r1, sp, #16
 800aee6:	4640      	mov	r0, r8
 800aee8:	f3af 8000 	nop.w
 800aeec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800aef0:	4681      	mov	r9, r0
 800aef2:	d1d6      	bne.n	800aea2 <_svfiprintf_r+0x166>
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	065b      	lsls	r3, r3, #25
 800aef8:	f53f af35 	bmi.w	800ad66 <_svfiprintf_r+0x2a>
 800aefc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aefe:	b01d      	add	sp, #116	; 0x74
 800af00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af04:	ab03      	add	r3, sp, #12
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	4622      	mov	r2, r4
 800af0a:	4b07      	ldr	r3, [pc, #28]	; (800af28 <_svfiprintf_r+0x1ec>)
 800af0c:	a904      	add	r1, sp, #16
 800af0e:	4640      	mov	r0, r8
 800af10:	f000 f882 	bl	800b018 <_printf_i>
 800af14:	e7ea      	b.n	800aeec <_svfiprintf_r+0x1b0>
 800af16:	bf00      	nop
 800af18:	0800ba60 	.word	0x0800ba60
 800af1c:	0800ba66 	.word	0x0800ba66
 800af20:	0800ba6a 	.word	0x0800ba6a
 800af24:	00000000 	.word	0x00000000
 800af28:	0800ac87 	.word	0x0800ac87

0800af2c <_printf_common>:
 800af2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af30:	4691      	mov	r9, r2
 800af32:	461f      	mov	r7, r3
 800af34:	688a      	ldr	r2, [r1, #8]
 800af36:	690b      	ldr	r3, [r1, #16]
 800af38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af3c:	4293      	cmp	r3, r2
 800af3e:	bfb8      	it	lt
 800af40:	4613      	movlt	r3, r2
 800af42:	f8c9 3000 	str.w	r3, [r9]
 800af46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af4a:	4606      	mov	r6, r0
 800af4c:	460c      	mov	r4, r1
 800af4e:	b112      	cbz	r2, 800af56 <_printf_common+0x2a>
 800af50:	3301      	adds	r3, #1
 800af52:	f8c9 3000 	str.w	r3, [r9]
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	0699      	lsls	r1, r3, #26
 800af5a:	bf42      	ittt	mi
 800af5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800af60:	3302      	addmi	r3, #2
 800af62:	f8c9 3000 	strmi.w	r3, [r9]
 800af66:	6825      	ldr	r5, [r4, #0]
 800af68:	f015 0506 	ands.w	r5, r5, #6
 800af6c:	d107      	bne.n	800af7e <_printf_common+0x52>
 800af6e:	f104 0a19 	add.w	sl, r4, #25
 800af72:	68e3      	ldr	r3, [r4, #12]
 800af74:	f8d9 2000 	ldr.w	r2, [r9]
 800af78:	1a9b      	subs	r3, r3, r2
 800af7a:	42ab      	cmp	r3, r5
 800af7c:	dc28      	bgt.n	800afd0 <_printf_common+0xa4>
 800af7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800af82:	6822      	ldr	r2, [r4, #0]
 800af84:	3300      	adds	r3, #0
 800af86:	bf18      	it	ne
 800af88:	2301      	movne	r3, #1
 800af8a:	0692      	lsls	r2, r2, #26
 800af8c:	d42d      	bmi.n	800afea <_printf_common+0xbe>
 800af8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af92:	4639      	mov	r1, r7
 800af94:	4630      	mov	r0, r6
 800af96:	47c0      	blx	r8
 800af98:	3001      	adds	r0, #1
 800af9a:	d020      	beq.n	800afde <_printf_common+0xb2>
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	68e5      	ldr	r5, [r4, #12]
 800afa0:	f8d9 2000 	ldr.w	r2, [r9]
 800afa4:	f003 0306 	and.w	r3, r3, #6
 800afa8:	2b04      	cmp	r3, #4
 800afaa:	bf08      	it	eq
 800afac:	1aad      	subeq	r5, r5, r2
 800afae:	68a3      	ldr	r3, [r4, #8]
 800afb0:	6922      	ldr	r2, [r4, #16]
 800afb2:	bf0c      	ite	eq
 800afb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afb8:	2500      	movne	r5, #0
 800afba:	4293      	cmp	r3, r2
 800afbc:	bfc4      	itt	gt
 800afbe:	1a9b      	subgt	r3, r3, r2
 800afc0:	18ed      	addgt	r5, r5, r3
 800afc2:	f04f 0900 	mov.w	r9, #0
 800afc6:	341a      	adds	r4, #26
 800afc8:	454d      	cmp	r5, r9
 800afca:	d11a      	bne.n	800b002 <_printf_common+0xd6>
 800afcc:	2000      	movs	r0, #0
 800afce:	e008      	b.n	800afe2 <_printf_common+0xb6>
 800afd0:	2301      	movs	r3, #1
 800afd2:	4652      	mov	r2, sl
 800afd4:	4639      	mov	r1, r7
 800afd6:	4630      	mov	r0, r6
 800afd8:	47c0      	blx	r8
 800afda:	3001      	adds	r0, #1
 800afdc:	d103      	bne.n	800afe6 <_printf_common+0xba>
 800afde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe6:	3501      	adds	r5, #1
 800afe8:	e7c3      	b.n	800af72 <_printf_common+0x46>
 800afea:	18e1      	adds	r1, r4, r3
 800afec:	1c5a      	adds	r2, r3, #1
 800afee:	2030      	movs	r0, #48	; 0x30
 800aff0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aff4:	4422      	add	r2, r4
 800aff6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800affa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800affe:	3302      	adds	r3, #2
 800b000:	e7c5      	b.n	800af8e <_printf_common+0x62>
 800b002:	2301      	movs	r3, #1
 800b004:	4622      	mov	r2, r4
 800b006:	4639      	mov	r1, r7
 800b008:	4630      	mov	r0, r6
 800b00a:	47c0      	blx	r8
 800b00c:	3001      	adds	r0, #1
 800b00e:	d0e6      	beq.n	800afde <_printf_common+0xb2>
 800b010:	f109 0901 	add.w	r9, r9, #1
 800b014:	e7d8      	b.n	800afc8 <_printf_common+0x9c>
	...

0800b018 <_printf_i>:
 800b018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b01c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b020:	460c      	mov	r4, r1
 800b022:	7e09      	ldrb	r1, [r1, #24]
 800b024:	b085      	sub	sp, #20
 800b026:	296e      	cmp	r1, #110	; 0x6e
 800b028:	4617      	mov	r7, r2
 800b02a:	4606      	mov	r6, r0
 800b02c:	4698      	mov	r8, r3
 800b02e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b030:	f000 80b3 	beq.w	800b19a <_printf_i+0x182>
 800b034:	d822      	bhi.n	800b07c <_printf_i+0x64>
 800b036:	2963      	cmp	r1, #99	; 0x63
 800b038:	d036      	beq.n	800b0a8 <_printf_i+0x90>
 800b03a:	d80a      	bhi.n	800b052 <_printf_i+0x3a>
 800b03c:	2900      	cmp	r1, #0
 800b03e:	f000 80b9 	beq.w	800b1b4 <_printf_i+0x19c>
 800b042:	2958      	cmp	r1, #88	; 0x58
 800b044:	f000 8083 	beq.w	800b14e <_printf_i+0x136>
 800b048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b04c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b050:	e032      	b.n	800b0b8 <_printf_i+0xa0>
 800b052:	2964      	cmp	r1, #100	; 0x64
 800b054:	d001      	beq.n	800b05a <_printf_i+0x42>
 800b056:	2969      	cmp	r1, #105	; 0x69
 800b058:	d1f6      	bne.n	800b048 <_printf_i+0x30>
 800b05a:	6820      	ldr	r0, [r4, #0]
 800b05c:	6813      	ldr	r3, [r2, #0]
 800b05e:	0605      	lsls	r5, r0, #24
 800b060:	f103 0104 	add.w	r1, r3, #4
 800b064:	d52a      	bpl.n	800b0bc <_printf_i+0xa4>
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	6011      	str	r1, [r2, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	da03      	bge.n	800b076 <_printf_i+0x5e>
 800b06e:	222d      	movs	r2, #45	; 0x2d
 800b070:	425b      	negs	r3, r3
 800b072:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b076:	486f      	ldr	r0, [pc, #444]	; (800b234 <_printf_i+0x21c>)
 800b078:	220a      	movs	r2, #10
 800b07a:	e039      	b.n	800b0f0 <_printf_i+0xd8>
 800b07c:	2973      	cmp	r1, #115	; 0x73
 800b07e:	f000 809d 	beq.w	800b1bc <_printf_i+0x1a4>
 800b082:	d808      	bhi.n	800b096 <_printf_i+0x7e>
 800b084:	296f      	cmp	r1, #111	; 0x6f
 800b086:	d020      	beq.n	800b0ca <_printf_i+0xb2>
 800b088:	2970      	cmp	r1, #112	; 0x70
 800b08a:	d1dd      	bne.n	800b048 <_printf_i+0x30>
 800b08c:	6823      	ldr	r3, [r4, #0]
 800b08e:	f043 0320 	orr.w	r3, r3, #32
 800b092:	6023      	str	r3, [r4, #0]
 800b094:	e003      	b.n	800b09e <_printf_i+0x86>
 800b096:	2975      	cmp	r1, #117	; 0x75
 800b098:	d017      	beq.n	800b0ca <_printf_i+0xb2>
 800b09a:	2978      	cmp	r1, #120	; 0x78
 800b09c:	d1d4      	bne.n	800b048 <_printf_i+0x30>
 800b09e:	2378      	movs	r3, #120	; 0x78
 800b0a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0a4:	4864      	ldr	r0, [pc, #400]	; (800b238 <_printf_i+0x220>)
 800b0a6:	e055      	b.n	800b154 <_printf_i+0x13c>
 800b0a8:	6813      	ldr	r3, [r2, #0]
 800b0aa:	1d19      	adds	r1, r3, #4
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	6011      	str	r1, [r2, #0]
 800b0b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e08c      	b.n	800b1d6 <_printf_i+0x1be>
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6011      	str	r1, [r2, #0]
 800b0c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0c4:	bf18      	it	ne
 800b0c6:	b21b      	sxthne	r3, r3
 800b0c8:	e7cf      	b.n	800b06a <_printf_i+0x52>
 800b0ca:	6813      	ldr	r3, [r2, #0]
 800b0cc:	6825      	ldr	r5, [r4, #0]
 800b0ce:	1d18      	adds	r0, r3, #4
 800b0d0:	6010      	str	r0, [r2, #0]
 800b0d2:	0628      	lsls	r0, r5, #24
 800b0d4:	d501      	bpl.n	800b0da <_printf_i+0xc2>
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	e002      	b.n	800b0e0 <_printf_i+0xc8>
 800b0da:	0668      	lsls	r0, r5, #25
 800b0dc:	d5fb      	bpl.n	800b0d6 <_printf_i+0xbe>
 800b0de:	881b      	ldrh	r3, [r3, #0]
 800b0e0:	4854      	ldr	r0, [pc, #336]	; (800b234 <_printf_i+0x21c>)
 800b0e2:	296f      	cmp	r1, #111	; 0x6f
 800b0e4:	bf14      	ite	ne
 800b0e6:	220a      	movne	r2, #10
 800b0e8:	2208      	moveq	r2, #8
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0f0:	6865      	ldr	r5, [r4, #4]
 800b0f2:	60a5      	str	r5, [r4, #8]
 800b0f4:	2d00      	cmp	r5, #0
 800b0f6:	f2c0 8095 	blt.w	800b224 <_printf_i+0x20c>
 800b0fa:	6821      	ldr	r1, [r4, #0]
 800b0fc:	f021 0104 	bic.w	r1, r1, #4
 800b100:	6021      	str	r1, [r4, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d13d      	bne.n	800b182 <_printf_i+0x16a>
 800b106:	2d00      	cmp	r5, #0
 800b108:	f040 808e 	bne.w	800b228 <_printf_i+0x210>
 800b10c:	4665      	mov	r5, ip
 800b10e:	2a08      	cmp	r2, #8
 800b110:	d10b      	bne.n	800b12a <_printf_i+0x112>
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	07db      	lsls	r3, r3, #31
 800b116:	d508      	bpl.n	800b12a <_printf_i+0x112>
 800b118:	6923      	ldr	r3, [r4, #16]
 800b11a:	6862      	ldr	r2, [r4, #4]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	bfde      	ittt	le
 800b120:	2330      	movle	r3, #48	; 0x30
 800b122:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b126:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b12a:	ebac 0305 	sub.w	r3, ip, r5
 800b12e:	6123      	str	r3, [r4, #16]
 800b130:	f8cd 8000 	str.w	r8, [sp]
 800b134:	463b      	mov	r3, r7
 800b136:	aa03      	add	r2, sp, #12
 800b138:	4621      	mov	r1, r4
 800b13a:	4630      	mov	r0, r6
 800b13c:	f7ff fef6 	bl	800af2c <_printf_common>
 800b140:	3001      	adds	r0, #1
 800b142:	d14d      	bne.n	800b1e0 <_printf_i+0x1c8>
 800b144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b148:	b005      	add	sp, #20
 800b14a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b14e:	4839      	ldr	r0, [pc, #228]	; (800b234 <_printf_i+0x21c>)
 800b150:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b154:	6813      	ldr	r3, [r2, #0]
 800b156:	6821      	ldr	r1, [r4, #0]
 800b158:	1d1d      	adds	r5, r3, #4
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	6015      	str	r5, [r2, #0]
 800b15e:	060a      	lsls	r2, r1, #24
 800b160:	d50b      	bpl.n	800b17a <_printf_i+0x162>
 800b162:	07ca      	lsls	r2, r1, #31
 800b164:	bf44      	itt	mi
 800b166:	f041 0120 	orrmi.w	r1, r1, #32
 800b16a:	6021      	strmi	r1, [r4, #0]
 800b16c:	b91b      	cbnz	r3, 800b176 <_printf_i+0x15e>
 800b16e:	6822      	ldr	r2, [r4, #0]
 800b170:	f022 0220 	bic.w	r2, r2, #32
 800b174:	6022      	str	r2, [r4, #0]
 800b176:	2210      	movs	r2, #16
 800b178:	e7b7      	b.n	800b0ea <_printf_i+0xd2>
 800b17a:	064d      	lsls	r5, r1, #25
 800b17c:	bf48      	it	mi
 800b17e:	b29b      	uxthmi	r3, r3
 800b180:	e7ef      	b.n	800b162 <_printf_i+0x14a>
 800b182:	4665      	mov	r5, ip
 800b184:	fbb3 f1f2 	udiv	r1, r3, r2
 800b188:	fb02 3311 	mls	r3, r2, r1, r3
 800b18c:	5cc3      	ldrb	r3, [r0, r3]
 800b18e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b192:	460b      	mov	r3, r1
 800b194:	2900      	cmp	r1, #0
 800b196:	d1f5      	bne.n	800b184 <_printf_i+0x16c>
 800b198:	e7b9      	b.n	800b10e <_printf_i+0xf6>
 800b19a:	6813      	ldr	r3, [r2, #0]
 800b19c:	6825      	ldr	r5, [r4, #0]
 800b19e:	6961      	ldr	r1, [r4, #20]
 800b1a0:	1d18      	adds	r0, r3, #4
 800b1a2:	6010      	str	r0, [r2, #0]
 800b1a4:	0628      	lsls	r0, r5, #24
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	d501      	bpl.n	800b1ae <_printf_i+0x196>
 800b1aa:	6019      	str	r1, [r3, #0]
 800b1ac:	e002      	b.n	800b1b4 <_printf_i+0x19c>
 800b1ae:	066a      	lsls	r2, r5, #25
 800b1b0:	d5fb      	bpl.n	800b1aa <_printf_i+0x192>
 800b1b2:	8019      	strh	r1, [r3, #0]
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	6123      	str	r3, [r4, #16]
 800b1b8:	4665      	mov	r5, ip
 800b1ba:	e7b9      	b.n	800b130 <_printf_i+0x118>
 800b1bc:	6813      	ldr	r3, [r2, #0]
 800b1be:	1d19      	adds	r1, r3, #4
 800b1c0:	6011      	str	r1, [r2, #0]
 800b1c2:	681d      	ldr	r5, [r3, #0]
 800b1c4:	6862      	ldr	r2, [r4, #4]
 800b1c6:	2100      	movs	r1, #0
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	f7f5 f811 	bl	80001f0 <memchr>
 800b1ce:	b108      	cbz	r0, 800b1d4 <_printf_i+0x1bc>
 800b1d0:	1b40      	subs	r0, r0, r5
 800b1d2:	6060      	str	r0, [r4, #4]
 800b1d4:	6863      	ldr	r3, [r4, #4]
 800b1d6:	6123      	str	r3, [r4, #16]
 800b1d8:	2300      	movs	r3, #0
 800b1da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1de:	e7a7      	b.n	800b130 <_printf_i+0x118>
 800b1e0:	6923      	ldr	r3, [r4, #16]
 800b1e2:	462a      	mov	r2, r5
 800b1e4:	4639      	mov	r1, r7
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	47c0      	blx	r8
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	d0aa      	beq.n	800b144 <_printf_i+0x12c>
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	079b      	lsls	r3, r3, #30
 800b1f2:	d413      	bmi.n	800b21c <_printf_i+0x204>
 800b1f4:	68e0      	ldr	r0, [r4, #12]
 800b1f6:	9b03      	ldr	r3, [sp, #12]
 800b1f8:	4298      	cmp	r0, r3
 800b1fa:	bfb8      	it	lt
 800b1fc:	4618      	movlt	r0, r3
 800b1fe:	e7a3      	b.n	800b148 <_printf_i+0x130>
 800b200:	2301      	movs	r3, #1
 800b202:	464a      	mov	r2, r9
 800b204:	4639      	mov	r1, r7
 800b206:	4630      	mov	r0, r6
 800b208:	47c0      	blx	r8
 800b20a:	3001      	adds	r0, #1
 800b20c:	d09a      	beq.n	800b144 <_printf_i+0x12c>
 800b20e:	3501      	adds	r5, #1
 800b210:	68e3      	ldr	r3, [r4, #12]
 800b212:	9a03      	ldr	r2, [sp, #12]
 800b214:	1a9b      	subs	r3, r3, r2
 800b216:	42ab      	cmp	r3, r5
 800b218:	dcf2      	bgt.n	800b200 <_printf_i+0x1e8>
 800b21a:	e7eb      	b.n	800b1f4 <_printf_i+0x1dc>
 800b21c:	2500      	movs	r5, #0
 800b21e:	f104 0919 	add.w	r9, r4, #25
 800b222:	e7f5      	b.n	800b210 <_printf_i+0x1f8>
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1ac      	bne.n	800b182 <_printf_i+0x16a>
 800b228:	7803      	ldrb	r3, [r0, #0]
 800b22a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b22e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b232:	e76c      	b.n	800b10e <_printf_i+0xf6>
 800b234:	0800ba71 	.word	0x0800ba71
 800b238:	0800ba82 	.word	0x0800ba82

0800b23c <memmove>:
 800b23c:	4288      	cmp	r0, r1
 800b23e:	b510      	push	{r4, lr}
 800b240:	eb01 0302 	add.w	r3, r1, r2
 800b244:	d807      	bhi.n	800b256 <memmove+0x1a>
 800b246:	1e42      	subs	r2, r0, #1
 800b248:	4299      	cmp	r1, r3
 800b24a:	d00a      	beq.n	800b262 <memmove+0x26>
 800b24c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b250:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b254:	e7f8      	b.n	800b248 <memmove+0xc>
 800b256:	4283      	cmp	r3, r0
 800b258:	d9f5      	bls.n	800b246 <memmove+0xa>
 800b25a:	1881      	adds	r1, r0, r2
 800b25c:	1ad2      	subs	r2, r2, r3
 800b25e:	42d3      	cmn	r3, r2
 800b260:	d100      	bne.n	800b264 <memmove+0x28>
 800b262:	bd10      	pop	{r4, pc}
 800b264:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b268:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b26c:	e7f7      	b.n	800b25e <memmove+0x22>
	...

0800b270 <_free_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	4605      	mov	r5, r0
 800b274:	2900      	cmp	r1, #0
 800b276:	d045      	beq.n	800b304 <_free_r+0x94>
 800b278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b27c:	1f0c      	subs	r4, r1, #4
 800b27e:	2b00      	cmp	r3, #0
 800b280:	bfb8      	it	lt
 800b282:	18e4      	addlt	r4, r4, r3
 800b284:	f000 f8d2 	bl	800b42c <__malloc_lock>
 800b288:	4a1f      	ldr	r2, [pc, #124]	; (800b308 <_free_r+0x98>)
 800b28a:	6813      	ldr	r3, [r2, #0]
 800b28c:	4610      	mov	r0, r2
 800b28e:	b933      	cbnz	r3, 800b29e <_free_r+0x2e>
 800b290:	6063      	str	r3, [r4, #4]
 800b292:	6014      	str	r4, [r2, #0]
 800b294:	4628      	mov	r0, r5
 800b296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b29a:	f000 b8c8 	b.w	800b42e <__malloc_unlock>
 800b29e:	42a3      	cmp	r3, r4
 800b2a0:	d90c      	bls.n	800b2bc <_free_r+0x4c>
 800b2a2:	6821      	ldr	r1, [r4, #0]
 800b2a4:	1862      	adds	r2, r4, r1
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	bf04      	itt	eq
 800b2aa:	681a      	ldreq	r2, [r3, #0]
 800b2ac:	685b      	ldreq	r3, [r3, #4]
 800b2ae:	6063      	str	r3, [r4, #4]
 800b2b0:	bf04      	itt	eq
 800b2b2:	1852      	addeq	r2, r2, r1
 800b2b4:	6022      	streq	r2, [r4, #0]
 800b2b6:	6004      	str	r4, [r0, #0]
 800b2b8:	e7ec      	b.n	800b294 <_free_r+0x24>
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	685a      	ldr	r2, [r3, #4]
 800b2be:	b10a      	cbz	r2, 800b2c4 <_free_r+0x54>
 800b2c0:	42a2      	cmp	r2, r4
 800b2c2:	d9fa      	bls.n	800b2ba <_free_r+0x4a>
 800b2c4:	6819      	ldr	r1, [r3, #0]
 800b2c6:	1858      	adds	r0, r3, r1
 800b2c8:	42a0      	cmp	r0, r4
 800b2ca:	d10b      	bne.n	800b2e4 <_free_r+0x74>
 800b2cc:	6820      	ldr	r0, [r4, #0]
 800b2ce:	4401      	add	r1, r0
 800b2d0:	1858      	adds	r0, r3, r1
 800b2d2:	4282      	cmp	r2, r0
 800b2d4:	6019      	str	r1, [r3, #0]
 800b2d6:	d1dd      	bne.n	800b294 <_free_r+0x24>
 800b2d8:	6810      	ldr	r0, [r2, #0]
 800b2da:	6852      	ldr	r2, [r2, #4]
 800b2dc:	605a      	str	r2, [r3, #4]
 800b2de:	4401      	add	r1, r0
 800b2e0:	6019      	str	r1, [r3, #0]
 800b2e2:	e7d7      	b.n	800b294 <_free_r+0x24>
 800b2e4:	d902      	bls.n	800b2ec <_free_r+0x7c>
 800b2e6:	230c      	movs	r3, #12
 800b2e8:	602b      	str	r3, [r5, #0]
 800b2ea:	e7d3      	b.n	800b294 <_free_r+0x24>
 800b2ec:	6820      	ldr	r0, [r4, #0]
 800b2ee:	1821      	adds	r1, r4, r0
 800b2f0:	428a      	cmp	r2, r1
 800b2f2:	bf04      	itt	eq
 800b2f4:	6811      	ldreq	r1, [r2, #0]
 800b2f6:	6852      	ldreq	r2, [r2, #4]
 800b2f8:	6062      	str	r2, [r4, #4]
 800b2fa:	bf04      	itt	eq
 800b2fc:	1809      	addeq	r1, r1, r0
 800b2fe:	6021      	streq	r1, [r4, #0]
 800b300:	605c      	str	r4, [r3, #4]
 800b302:	e7c7      	b.n	800b294 <_free_r+0x24>
 800b304:	bd38      	pop	{r3, r4, r5, pc}
 800b306:	bf00      	nop
 800b308:	20002a6c 	.word	0x20002a6c

0800b30c <_malloc_r>:
 800b30c:	b570      	push	{r4, r5, r6, lr}
 800b30e:	1ccd      	adds	r5, r1, #3
 800b310:	f025 0503 	bic.w	r5, r5, #3
 800b314:	3508      	adds	r5, #8
 800b316:	2d0c      	cmp	r5, #12
 800b318:	bf38      	it	cc
 800b31a:	250c      	movcc	r5, #12
 800b31c:	2d00      	cmp	r5, #0
 800b31e:	4606      	mov	r6, r0
 800b320:	db01      	blt.n	800b326 <_malloc_r+0x1a>
 800b322:	42a9      	cmp	r1, r5
 800b324:	d903      	bls.n	800b32e <_malloc_r+0x22>
 800b326:	230c      	movs	r3, #12
 800b328:	6033      	str	r3, [r6, #0]
 800b32a:	2000      	movs	r0, #0
 800b32c:	bd70      	pop	{r4, r5, r6, pc}
 800b32e:	f000 f87d 	bl	800b42c <__malloc_lock>
 800b332:	4a21      	ldr	r2, [pc, #132]	; (800b3b8 <_malloc_r+0xac>)
 800b334:	6814      	ldr	r4, [r2, #0]
 800b336:	4621      	mov	r1, r4
 800b338:	b991      	cbnz	r1, 800b360 <_malloc_r+0x54>
 800b33a:	4c20      	ldr	r4, [pc, #128]	; (800b3bc <_malloc_r+0xb0>)
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	b91b      	cbnz	r3, 800b348 <_malloc_r+0x3c>
 800b340:	4630      	mov	r0, r6
 800b342:	f000 f863 	bl	800b40c <_sbrk_r>
 800b346:	6020      	str	r0, [r4, #0]
 800b348:	4629      	mov	r1, r5
 800b34a:	4630      	mov	r0, r6
 800b34c:	f000 f85e 	bl	800b40c <_sbrk_r>
 800b350:	1c43      	adds	r3, r0, #1
 800b352:	d124      	bne.n	800b39e <_malloc_r+0x92>
 800b354:	230c      	movs	r3, #12
 800b356:	6033      	str	r3, [r6, #0]
 800b358:	4630      	mov	r0, r6
 800b35a:	f000 f868 	bl	800b42e <__malloc_unlock>
 800b35e:	e7e4      	b.n	800b32a <_malloc_r+0x1e>
 800b360:	680b      	ldr	r3, [r1, #0]
 800b362:	1b5b      	subs	r3, r3, r5
 800b364:	d418      	bmi.n	800b398 <_malloc_r+0x8c>
 800b366:	2b0b      	cmp	r3, #11
 800b368:	d90f      	bls.n	800b38a <_malloc_r+0x7e>
 800b36a:	600b      	str	r3, [r1, #0]
 800b36c:	50cd      	str	r5, [r1, r3]
 800b36e:	18cc      	adds	r4, r1, r3
 800b370:	4630      	mov	r0, r6
 800b372:	f000 f85c 	bl	800b42e <__malloc_unlock>
 800b376:	f104 000b 	add.w	r0, r4, #11
 800b37a:	1d23      	adds	r3, r4, #4
 800b37c:	f020 0007 	bic.w	r0, r0, #7
 800b380:	1ac3      	subs	r3, r0, r3
 800b382:	d0d3      	beq.n	800b32c <_malloc_r+0x20>
 800b384:	425a      	negs	r2, r3
 800b386:	50e2      	str	r2, [r4, r3]
 800b388:	e7d0      	b.n	800b32c <_malloc_r+0x20>
 800b38a:	428c      	cmp	r4, r1
 800b38c:	684b      	ldr	r3, [r1, #4]
 800b38e:	bf16      	itet	ne
 800b390:	6063      	strne	r3, [r4, #4]
 800b392:	6013      	streq	r3, [r2, #0]
 800b394:	460c      	movne	r4, r1
 800b396:	e7eb      	b.n	800b370 <_malloc_r+0x64>
 800b398:	460c      	mov	r4, r1
 800b39a:	6849      	ldr	r1, [r1, #4]
 800b39c:	e7cc      	b.n	800b338 <_malloc_r+0x2c>
 800b39e:	1cc4      	adds	r4, r0, #3
 800b3a0:	f024 0403 	bic.w	r4, r4, #3
 800b3a4:	42a0      	cmp	r0, r4
 800b3a6:	d005      	beq.n	800b3b4 <_malloc_r+0xa8>
 800b3a8:	1a21      	subs	r1, r4, r0
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	f000 f82e 	bl	800b40c <_sbrk_r>
 800b3b0:	3001      	adds	r0, #1
 800b3b2:	d0cf      	beq.n	800b354 <_malloc_r+0x48>
 800b3b4:	6025      	str	r5, [r4, #0]
 800b3b6:	e7db      	b.n	800b370 <_malloc_r+0x64>
 800b3b8:	20002a6c 	.word	0x20002a6c
 800b3bc:	20002a70 	.word	0x20002a70

0800b3c0 <_realloc_r>:
 800b3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c2:	4607      	mov	r7, r0
 800b3c4:	4614      	mov	r4, r2
 800b3c6:	460e      	mov	r6, r1
 800b3c8:	b921      	cbnz	r1, 800b3d4 <_realloc_r+0x14>
 800b3ca:	4611      	mov	r1, r2
 800b3cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b3d0:	f7ff bf9c 	b.w	800b30c <_malloc_r>
 800b3d4:	b922      	cbnz	r2, 800b3e0 <_realloc_r+0x20>
 800b3d6:	f7ff ff4b 	bl	800b270 <_free_r>
 800b3da:	4625      	mov	r5, r4
 800b3dc:	4628      	mov	r0, r5
 800b3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3e0:	f000 f826 	bl	800b430 <_malloc_usable_size_r>
 800b3e4:	42a0      	cmp	r0, r4
 800b3e6:	d20f      	bcs.n	800b408 <_realloc_r+0x48>
 800b3e8:	4621      	mov	r1, r4
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	f7ff ff8e 	bl	800b30c <_malloc_r>
 800b3f0:	4605      	mov	r5, r0
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d0f2      	beq.n	800b3dc <_realloc_r+0x1c>
 800b3f6:	4631      	mov	r1, r6
 800b3f8:	4622      	mov	r2, r4
 800b3fa:	f7ff fbe9 	bl	800abd0 <memcpy>
 800b3fe:	4631      	mov	r1, r6
 800b400:	4638      	mov	r0, r7
 800b402:	f7ff ff35 	bl	800b270 <_free_r>
 800b406:	e7e9      	b.n	800b3dc <_realloc_r+0x1c>
 800b408:	4635      	mov	r5, r6
 800b40a:	e7e7      	b.n	800b3dc <_realloc_r+0x1c>

0800b40c <_sbrk_r>:
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	4c06      	ldr	r4, [pc, #24]	; (800b428 <_sbrk_r+0x1c>)
 800b410:	2300      	movs	r3, #0
 800b412:	4605      	mov	r5, r0
 800b414:	4608      	mov	r0, r1
 800b416:	6023      	str	r3, [r4, #0]
 800b418:	f7f9 f944 	bl	80046a4 <_sbrk>
 800b41c:	1c43      	adds	r3, r0, #1
 800b41e:	d102      	bne.n	800b426 <_sbrk_r+0x1a>
 800b420:	6823      	ldr	r3, [r4, #0]
 800b422:	b103      	cbz	r3, 800b426 <_sbrk_r+0x1a>
 800b424:	602b      	str	r3, [r5, #0]
 800b426:	bd38      	pop	{r3, r4, r5, pc}
 800b428:	20003374 	.word	0x20003374

0800b42c <__malloc_lock>:
 800b42c:	4770      	bx	lr

0800b42e <__malloc_unlock>:
 800b42e:	4770      	bx	lr

0800b430 <_malloc_usable_size_r>:
 800b430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b434:	1f18      	subs	r0, r3, #4
 800b436:	2b00      	cmp	r3, #0
 800b438:	bfbc      	itt	lt
 800b43a:	580b      	ldrlt	r3, [r1, r0]
 800b43c:	18c0      	addlt	r0, r0, r3
 800b43e:	4770      	bx	lr

0800b440 <_init>:
 800b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b442:	bf00      	nop
 800b444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b446:	bc08      	pop	{r3}
 800b448:	469e      	mov	lr, r3
 800b44a:	4770      	bx	lr

0800b44c <_fini>:
 800b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44e:	bf00      	nop
 800b450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b452:	bc08      	pop	{r3}
 800b454:	469e      	mov	lr, r3
 800b456:	4770      	bx	lr

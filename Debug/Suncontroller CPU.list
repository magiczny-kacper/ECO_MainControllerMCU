
Suncontroller CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013b0  0800e554  0800e554  0001e554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f904  0800f904  00032000  2**0
                  CONTENTS
  4 .ARM          00000008  0800f904  0800f904  0001f904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f90c  0800f90c  00032000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f90c  0800f90c  0001f90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f910  0800f910  0001f910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20002400  0800f914  00022400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e38  200024d0  0800f9e0  000224d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004308  0800f9e0  00024308  2**0
                  ALLOC
 11 .rtos_stack   00002000  20000000  20000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 00000030  00000000  00000000  00032000  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049e4c  00000000  00000000  00032030  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00008345  00000000  00000000  0007be7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000210c2  00000000  00000000  000841c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002790  00000000  00000000  000a5288  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000027f8  00000000  00000000  000a7a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0000b104  00000000  00000000  000aa210  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00025670  00000000  00000000  000b5314  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000ae187  00000000  00000000  000da984  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00188b0b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007980  00000000  00000000  00188b88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200024d0 	.word	0x200024d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e53c 	.word	0x0800e53c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200024d4 	.word	0x200024d4
 80001dc:	0800e53c 	.word	0x0800e53c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <xCLI_EreaseEE>:
	FreeRTOS_CLIRegisterCommand(&xSetTimeCmd);
	FreeRTOS_CLIRegisterCommand(&xSetDateCmd);
	FreeRTOS_CLIRegisterCommand(&xResetCmd);
}

BaseType_t xCLI_EreaseEE( char *pcWriteBuffer, size_t xWriteBufferLen, char* pcCommandString ){
 8000e0c:	b510      	push	{r4, lr}
 8000e0e:	4604      	mov	r4, r0
	(void) pcCommandString;
	(void) xWriteBufferLen;
	EE_StatusTypeDef retval = EE_Erease();
 8000e10:	f000 fe7e 	bl	8001b10 <EE_Erease>
	if(retval == EE_OK){
 8000e14:	b128      	cbz	r0, 8000e22 <xCLI_EreaseEE+0x16>
		DataLog_LogEvent(EV_EE_CLR, NULL, 0);
		sprintf(pcWriteBuffer, "Wyczyszczono.\r\n");
	}else{
		sprintf(pcWriteBuffer, "Nie wyczyszczono.\r\n");
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <xCLI_EreaseEE+0x2c>)
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f00c ff03 	bl	800dc24 <sprintf_>
	}
	return pdFALSE;
}
 8000e1e:	2000      	movs	r0, #0
 8000e20:	bd10      	pop	{r4, pc}
		DataLog_LogEvent(EV_EE_CLR, NULL, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	4611      	mov	r1, r2
 8000e26:	2007      	movs	r0, #7
 8000e28:	f001 ff1e 	bl	8002c68 <DataLog_LogEvent>
		sprintf(pcWriteBuffer, "Wyczyszczono.\r\n");
 8000e2c:	4903      	ldr	r1, [pc, #12]	; (8000e3c <xCLI_EreaseEE+0x30>)
 8000e2e:	4620      	mov	r0, r4
 8000e30:	f00c fef8 	bl	800dc24 <sprintf_>
 8000e34:	e7f3      	b.n	8000e1e <xCLI_EreaseEE+0x12>
 8000e36:	bf00      	nop
 8000e38:	0800e90c 	.word	0x0800e90c
 8000e3c:	0800e8fc 	.word	0x0800e8fc

08000e40 <xCLI_ShowConfig>:

BaseType_t xCLI_ShowConfig( char *pcWriteBuffer, size_t xWriteBufferLen, char* pcCommandString ){
 8000e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e44:	b095      	sub	sp, #84	; 0x54
 8000e46:	9011      	str	r0, [sp, #68]	; 0x44
	static ConfigStruct_t config;
	static CONFStatus_t configStatus;
	BaseType_t retVal = pdTRUE;
	static uint8_t step = 0;

	switch (step){
 8000e48:	4b6e      	ldr	r3, [pc, #440]	; (8001004 <xCLI_ShowConfig+0x1c4>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b05      	cmp	r3, #5
 8000e4e:	f200 80d0 	bhi.w	8000ff2 <xCLI_ShowConfig+0x1b2>
 8000e52:	e8df f003 	tbb	[pc, r3]
 8000e56:	3303      	.short	0x3303
 8000e58:	c1ac997c 	.word	0xc1ac997c
		case 0:
			configStatus = Config_GetConfig(&config);
 8000e5c:	486a      	ldr	r0, [pc, #424]	; (8001008 <xCLI_ShowConfig+0x1c8>)
 8000e5e:	f000 fcd1 	bl	8001804 <Config_GetConfig>
			switch(configStatus){
 8000e62:	3005      	adds	r0, #5
 8000e64:	2805      	cmp	r0, #5
 8000e66:	d824      	bhi.n	8000eb2 <xCLI_ShowConfig+0x72>
 8000e68:	e8df f000 	tbb	[pc, r0]
 8000e6c:	23140f03 	.word	0x23140f03
 8000e70:	1e19      	.short	0x1e19
				case CONF_ERR_NOCONF:
					sprintf(pcWriteBuffer, "No configuration in memory.\r\n");
 8000e72:	4966      	ldr	r1, [pc, #408]	; (800100c <xCLI_ShowConfig+0x1cc>)
 8000e74:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e76:	f00c fed5 	bl	800dc24 <sprintf_>
					break;
				default:
					sprintf(pcWriteBuffer, "Unexpected error.\r\n");
 					break;
 			}
			step++;
 8000e7a:	4a62      	ldr	r2, [pc, #392]	; (8001004 <xCLI_ShowConfig+0x1c4>)
 8000e7c:	7813      	ldrb	r3, [r2, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000e82:	2001      	movs	r0, #1
			retVal = pdFALSE;
			break;
	}

	return retVal;
}
 8000e84:	b015      	add	sp, #84	; 0x54
 8000e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					sprintf(pcWriteBuffer, "Configuration CRC error.\r\n");
 8000e8a:	4961      	ldr	r1, [pc, #388]	; (8001010 <xCLI_ShowConfig+0x1d0>)
 8000e8c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e8e:	f00c fec9 	bl	800dc24 <sprintf_>
					break;
 8000e92:	e7f2      	b.n	8000e7a <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Cannot access I2C bus.\r\n");
 8000e94:	495f      	ldr	r1, [pc, #380]	; (8001014 <xCLI_ShowConfig+0x1d4>)
 8000e96:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e98:	f00c fec4 	bl	800dc24 <sprintf_>
					break;
 8000e9c:	e7ed      	b.n	8000e7a <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Memory access timeout.\r\n");
 8000e9e:	495e      	ldr	r1, [pc, #376]	; (8001018 <xCLI_ShowConfig+0x1d8>)
 8000ea0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ea2:	f00c febf 	bl	800dc24 <sprintf_>
					break;
 8000ea6:	e7e8      	b.n	8000e7a <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Configuration loaded.\r\n");
 8000ea8:	495c      	ldr	r1, [pc, #368]	; (800101c <xCLI_ShowConfig+0x1dc>)
 8000eaa:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000eac:	f00c feba 	bl	800dc24 <sprintf_>
					break;
 8000eb0:	e7e3      	b.n	8000e7a <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Unexpected error.\r\n");
 8000eb2:	495b      	ldr	r1, [pc, #364]	; (8001020 <xCLI_ShowConfig+0x1e0>)
 8000eb4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000eb6:	f00c feb5 	bl	800dc24 <sprintf_>
 					break;
 8000eba:	e7de      	b.n	8000e7a <xCLI_ShowConfig+0x3a>
					config.EthernetConfig.ipAddress[0], config.EthernetConfig.ipAddress[1],
 8000ebc:	4b52      	ldr	r3, [pc, #328]	; (8001008 <xCLI_ShowConfig+0x1c8>)
 8000ebe:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000ec2:	9212      	str	r2, [sp, #72]	; 0x48
 8000ec4:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8000ec8:	9113      	str	r1, [sp, #76]	; 0x4c
					config.EthernetConfig.ipAddress[2], config.EthernetConfig.ipAddress[3],
 8000eca:	f893 4022 	ldrb.w	r4, [r3, #34]	; 0x22
 8000ece:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8000ed2:	9001      	str	r0, [sp, #4]
					config.EthernetConfig.gatewayAddress[0], config.EthernetConfig.gatewayAddress[1],
 8000ed4:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8000ed8:	9002      	str	r0, [sp, #8]
 8000eda:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
					config.EthernetConfig.gatewayAddress[2], config.EthernetConfig.gatewayAddress[3],
 8000ede:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8000ee2:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
					config.EthernetConfig.subnetMask[0], config.EthernetConfig.subnetMask[1],
 8000ee6:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 8000eea:	f893 6025 	ldrb.w	r6, [r3, #37]	; 0x25
					config.EthernetConfig.subnetMask[2], config.EthernetConfig.subnetMask[3],
 8000eee:	f893 7026 	ldrb.w	r7, [r3, #38]	; 0x26
 8000ef2:	f893 c027 	ldrb.w	ip, [r3, #39]	; 0x27
					config.EthernetConfig.macAddress[0], config.EthernetConfig.macAddress[1],
 8000ef6:	f893 e02c 	ldrb.w	lr, [r3, #44]	; 0x2c
 8000efa:	f893 802d 	ldrb.w	r8, [r3, #45]	; 0x2d
					config.EthernetConfig.macAddress[2], config.EthernetConfig.macAddress[3],
 8000efe:	f893 902e 	ldrb.w	r9, [r3, #46]	; 0x2e
 8000f02:	f893 a02f 	ldrb.w	sl, [r3, #47]	; 0x2f
					config.EthernetConfig.macAddress[4], config.EthernetConfig.macAddress[5]);
 8000f06:	f893 b030 	ldrb.w	fp, [r3, #48]	; 0x30
 8000f0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
			sprintf(pcWriteBuffer, "Ethernet configuration:\r\n"
 8000f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f10:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8000f14:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8000f18:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8000f1c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8000f20:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8000f24:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8000f28:	9708      	str	r7, [sp, #32]
 8000f2a:	9607      	str	r6, [sp, #28]
 8000f2c:	9506      	str	r5, [sp, #24]
 8000f2e:	9005      	str	r0, [sp, #20]
 8000f30:	9104      	str	r1, [sp, #16]
 8000f32:	9203      	str	r2, [sp, #12]
 8000f34:	9400      	str	r4, [sp, #0]
 8000f36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000f38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000f3a:	493a      	ldr	r1, [pc, #232]	; (8001024 <xCLI_ShowConfig+0x1e4>)
 8000f3c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f3e:	f00c fe71 	bl	800dc24 <sprintf_>
			step++;
 8000f42:	4a30      	ldr	r2, [pc, #192]	; (8001004 <xCLI_ShowConfig+0x1c4>)
 8000f44:	7813      	ldrb	r3, [r2, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000f4a:	2001      	movs	r0, #1
			break;
 8000f4c:	e79a      	b.n	8000e84 <xCLI_ShowConfig+0x44>
					(int)config.RegulationConfig.CWU_heater_power,
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <xCLI_ShowConfig+0x1c8>)
 8000f50:	ed93 7a00 	vldr	s14, [r3]
					(int)config.RegulationConfig.CO_heater_power,
 8000f54:	edd3 6a01 	vldr	s13, [r3, #4]
					(int)config.RegulationConfig.net_max_power);
 8000f58:	edd3 7a02 	vldr	s15, [r3, #8]
			sprintf(pcWriteBuffer, "Regulation configuration:\r\n"
 8000f5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f60:	edcd 7a00 	vstr	s15, [sp]
 8000f64:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8000f68:	ee17 3a90 	vmov	r3, s15
 8000f6c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8000f70:	ee17 2a90 	vmov	r2, s15
 8000f74:	492c      	ldr	r1, [pc, #176]	; (8001028 <xCLI_ShowConfig+0x1e8>)
 8000f76:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f78:	f00c fe54 	bl	800dc24 <sprintf_>
			step++;
 8000f7c:	4a21      	ldr	r2, [pc, #132]	; (8001004 <xCLI_ShowConfig+0x1c4>)
 8000f7e:	7813      	ldrb	r3, [r2, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000f84:	2001      	movs	r0, #1
			break;
 8000f86:	e77d      	b.n	8000e84 <xCLI_ShowConfig+0x44>
					(int)config.RegulationConfig.counter_address,
 8000f88:	491f      	ldr	r1, [pc, #124]	; (8001008 <xCLI_ShowConfig+0x1c8>)
 8000f8a:	7b0a      	ldrb	r2, [r1, #12]
					(int)config.RegulationConfig.temperature_address,
 8000f8c:	7b4b      	ldrb	r3, [r1, #13]
					(int)config.RegulationConfig.acumulated_power_coeff,
 8000f8e:	f991 000e 	ldrsb.w	r0, [r1, #14]
					(int)config.RegulationConfig.heater_power_coeff);
 8000f92:	f991 100f 	ldrsb.w	r1, [r1, #15]
			sprintf(pcWriteBuffer, "    Counter address: %d\r\n"
 8000f96:	9101      	str	r1, [sp, #4]
 8000f98:	9000      	str	r0, [sp, #0]
 8000f9a:	4924      	ldr	r1, [pc, #144]	; (800102c <xCLI_ShowConfig+0x1ec>)
 8000f9c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f9e:	f00c fe41 	bl	800dc24 <sprintf_>
			step++;
 8000fa2:	4a18      	ldr	r2, [pc, #96]	; (8001004 <xCLI_ShowConfig+0x1c4>)
 8000fa4:	7813      	ldrb	r3, [r2, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000faa:	2001      	movs	r0, #1
			break;
 8000fac:	e76a      	b.n	8000e84 <xCLI_ShowConfig+0x44>
					config.RegulationConfig.CO_hi_temp,
 8000fae:	4916      	ldr	r1, [pc, #88]	; (8001008 <xCLI_ShowConfig+0x1c8>)
 8000fb0:	f991 2010 	ldrsb.w	r2, [r1, #16]
					config.RegulationConfig.CO_lo_temp,
 8000fb4:	f991 3011 	ldrsb.w	r3, [r1, #17]
					config.RegulationConfig.CWU_hi_temp,
 8000fb8:	f991 0012 	ldrsb.w	r0, [r1, #18]
					config.RegulationConfig.CWU_lo_temp);
 8000fbc:	f991 1013 	ldrsb.w	r1, [r1, #19]
			sprintf(pcWriteBuffer, "    CO high temperature: %d C\r\n"
 8000fc0:	9101      	str	r1, [sp, #4]
 8000fc2:	9000      	str	r0, [sp, #0]
 8000fc4:	491a      	ldr	r1, [pc, #104]	; (8001030 <xCLI_ShowConfig+0x1f0>)
 8000fc6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000fc8:	f00c fe2c 	bl	800dc24 <sprintf_>
			step++;
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <xCLI_ShowConfig+0x1c4>)
 8000fce:	7813      	ldrb	r3, [r2, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fd4:	2001      	movs	r0, #1
			break;
 8000fd6:	e755      	b.n	8000e84 <xCLI_ShowConfig+0x44>
					"CRC: 0x%08x\r\n", config.dummy, config.crc);
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <xCLI_ShowConfig+0x1c8>)
			sprintf(pcWriteBuffer, "Magic word: 0x%04x\r\n"
 8000fda:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000fdc:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8000fde:	4915      	ldr	r1, [pc, #84]	; (8001034 <xCLI_ShowConfig+0x1f4>)
 8000fe0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000fe2:	f00c fe1f 	bl	800dc24 <sprintf_>
			step++;
 8000fe6:	4a07      	ldr	r2, [pc, #28]	; (8001004 <xCLI_ShowConfig+0x1c4>)
 8000fe8:	7813      	ldrb	r3, [r2, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fee:	2001      	movs	r0, #1
			break;
 8000ff0:	e748      	b.n	8000e84 <xCLI_ShowConfig+0x44>
			step = 0;
 8000ff2:	2500      	movs	r5, #0
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <xCLI_ShowConfig+0x1c4>)
 8000ff6:	701d      	strb	r5, [r3, #0]
			sprintf(pcWriteBuffer, "\r\n");
 8000ff8:	490f      	ldr	r1, [pc, #60]	; (8001038 <xCLI_ShowConfig+0x1f8>)
 8000ffa:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ffc:	f00c fe12 	bl	800dc24 <sprintf_>
			retVal = pdFALSE;
 8001000:	4628      	mov	r0, r5
	return retVal;
 8001002:	e73f      	b.n	8000e84 <xCLI_ShowConfig+0x44>
 8001004:	2000252c 	.word	0x2000252c
 8001008:	200024ec 	.word	0x200024ec
 800100c:	0800ebac 	.word	0x0800ebac
 8001010:	0800ebcc 	.word	0x0800ebcc
 8001014:	0800ebe8 	.word	0x0800ebe8
 8001018:	0800ec04 	.word	0x0800ec04
 800101c:	0800ec20 	.word	0x0800ec20
 8001020:	0800ec38 	.word	0x0800ec38
 8001024:	0800ec4c 	.word	0x0800ec4c
 8001028:	0800ecd4 	.word	0x0800ecd4
 800102c:	0800ed44 	.word	0x0800ed44
 8001030:	0800edc8 	.word	0x0800edc8
 8001034:	0800ee48 	.word	0x0800ee48
 8001038:	0800eb60 	.word	0x0800eb60

0800103c <xCLI_GetSystemStatus>:

BaseType_t xCLI_GetSystemStatus( char *pcWriteBuffer, size_t xWriteBufferLen, char* pcCommandString ){
 800103c:	b530      	push	{r4, r5, lr}
 800103e:	b08b      	sub	sp, #44	; 0x2c
 8001040:	4605      	mov	r5, r0
	(void) xWriteBufferLen;

	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001042:	4c0f      	ldr	r4, [pc, #60]	; (8001080 <xCLI_GetSystemStatus+0x44>)
 8001044:	2200      	movs	r2, #0
 8001046:	a904      	add	r1, sp, #16
 8001048:	4620      	mov	r0, r4
 800104a:	f008 f8b8 	bl	80091be <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800104e:	2200      	movs	r2, #0
 8001050:	a909      	add	r1, sp, #36	; 0x24
 8001052:	4620      	mov	r0, r4
 8001054:	f008 f8de 	bl	8009214 <HAL_RTC_GetDate>

	sprintf(pcWriteBuffer, "    %02d.%02d.%02d %02d:%02d\r\n",
			date.Date, date.Month, date.Year, time.Hours, time.Minutes);
 8001058:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800105c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8001060:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 8001064:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001068:	f89d 4011 	ldrb.w	r4, [sp, #17]
	sprintf(pcWriteBuffer, "    %02d.%02d.%02d %02d:%02d\r\n",
 800106c:	9402      	str	r4, [sp, #8]
 800106e:	9001      	str	r0, [sp, #4]
 8001070:	9100      	str	r1, [sp, #0]
 8001072:	4904      	ldr	r1, [pc, #16]	; (8001084 <xCLI_GetSystemStatus+0x48>)
 8001074:	4628      	mov	r0, r5
 8001076:	f00c fdd5 	bl	800dc24 <sprintf_>
	return pdFALSE;
}
 800107a:	2000      	movs	r0, #0
 800107c:	b00b      	add	sp, #44	; 0x2c
 800107e:	bd30      	pop	{r4, r5, pc}
 8001080:	200040a8 	.word	0x200040a8
 8001084:	0800eb64 	.word	0x0800eb64

08001088 <xCLI_GetRtosStats>:

BaseType_t xCLI_GetRtosStats( char *pcWriteBuffer, size_t xWriteBufferLen, char* pcCommandString ){
 8001088:	b508      	push	{r3, lr}
	(void) pcCommandString;
	(void) xWriteBufferLen;
	vTaskGetRunTimeStats(pcWriteBuffer);
 800108a:	f00b f987 	bl	800c39c <vTaskGetRunTimeStats>
	return pdFALSE;
}
 800108e:	2000      	movs	r0, #0
 8001090:	bd08      	pop	{r3, pc}
	...

08001094 <xCLI_GetCommStats>:

BaseType_t xCLI_GetCommStats( char *pcWriteBuffer, size_t xWriteBufferLen, char* pcCommandString ){
 8001094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001096:	b085      	sub	sp, #20
 8001098:	4605      	mov	r5, r0
	BaseType_t retVal = pdTRUE;
	static uint8_t step = 0;

	uint8_t ipArr[4];

	switch(step){
 800109a:	4b41      	ldr	r3, [pc, #260]	; (80011a0 <xCLI_GetCommStats+0x10c>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b04      	cmp	r3, #4
 80010a0:	d876      	bhi.n	8001190 <xCLI_GetCommStats+0xfc>
 80010a2:	e8df f003 	tbb	[pc, r3]
 80010a6:	1b03      	.short	0x1b03
 80010a8:	4332      	.short	0x4332
 80010aa:	5c          	.byte	0x5c
 80010ab:	00          	.byte	0x00

		case 0:
			RuntimeStats_TelnetGetCurIP(ipArr);
 80010ac:	a803      	add	r0, sp, #12
 80010ae:	f003 f8ad 	bl	800420c <RuntimeStats_TelnetGetCurIP>
			sprintf(pcWriteBuffer, "Telnet statistics:\r\n"
					"    Current IP connected: %d.%d.%d.%d\r\n",
					ipArr[0], ipArr[1], ipArr[2], ipArr[3]);
 80010b2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80010b6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80010ba:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80010be:	f89d 000f 	ldrb.w	r0, [sp, #15]
			sprintf(pcWriteBuffer, "Telnet statistics:\r\n"
 80010c2:	9001      	str	r0, [sp, #4]
 80010c4:	9100      	str	r1, [sp, #0]
 80010c6:	4937      	ldr	r1, [pc, #220]	; (80011a4 <xCLI_GetCommStats+0x110>)
 80010c8:	4628      	mov	r0, r5
 80010ca:	f00c fdab 	bl	800dc24 <sprintf_>
			step++;
 80010ce:	4a34      	ldr	r2, [pc, #208]	; (80011a0 <xCLI_GetCommStats+0x10c>)
 80010d0:	7813      	ldrb	r3, [r2, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 80010d6:	2001      	movs	r0, #1
			sprintf(pcWriteBuffer, "\r\n");
			retVal = pdFALSE;
			break;
	}
	return retVal;
}
 80010d8:	b005      	add	sp, #20
 80010da:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RuntimeStats_TelnetGetLastIP(ipArr);
 80010dc:	a803      	add	r0, sp, #12
 80010de:	f003 f89b 	bl	8004218 <RuntimeStats_TelnetGetLastIP>
					ipArr[0], ipArr[1], ipArr[2], ipArr[3]);
 80010e2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80010e6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80010ea:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80010ee:	f89d 000f 	ldrb.w	r0, [sp, #15]
			sprintf(pcWriteBuffer, "    Last IP connected: %d.%d.%d.%d\r\n",
 80010f2:	9001      	str	r0, [sp, #4]
 80010f4:	9100      	str	r1, [sp, #0]
 80010f6:	492c      	ldr	r1, [pc, #176]	; (80011a8 <xCLI_GetCommStats+0x114>)
 80010f8:	4628      	mov	r0, r5
 80010fa:	f00c fd93 	bl	800dc24 <sprintf_>
			step++;
 80010fe:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <xCLI_GetCommStats+0x10c>)
 8001100:	7813      	ldrb	r3, [r2, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8001106:	2001      	movs	r0, #1
			break;
 8001108:	e7e6      	b.n	80010d8 <xCLI_GetCommStats+0x44>
			sprintf(pcWriteBuffer, "    TX count: %d\r\n    RX count: %d\r\n",
 800110a:	f003 f879 	bl	8004200 <RuntimeStats_TelnetGetTxCnt>
 800110e:	4604      	mov	r4, r0
 8001110:	f003 f870 	bl	80041f4 <RuntimeStats_TelnetGetRxCnt>
 8001114:	4603      	mov	r3, r0
 8001116:	4622      	mov	r2, r4
 8001118:	4924      	ldr	r1, [pc, #144]	; (80011ac <xCLI_GetCommStats+0x118>)
 800111a:	4628      	mov	r0, r5
 800111c:	f00c fd82 	bl	800dc24 <sprintf_>
			step++;
 8001120:	4a1f      	ldr	r2, [pc, #124]	; (80011a0 <xCLI_GetCommStats+0x10c>)
 8001122:	7813      	ldrb	r3, [r2, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8001128:	2001      	movs	r0, #1
			break;
 800112a:	e7d5      	b.n	80010d8 <xCLI_GetCommStats+0x44>
			sprintf(pcWriteBuffer, "Modbus RTU Master statistics:\r\n"
 800112c:	f003 f89a 	bl	8004264 <RuntimeStats_ModbusMasterRqSendGet>
 8001130:	4604      	mov	r4, r0
 8001132:	f003 f8a3 	bl	800427c <RuntimeStats_ModbusMasterRespOkGet>
 8001136:	4606      	mov	r6, r0
 8001138:	f003 f89a 	bl	8004270 <RuntimeStats_ModbusMasterNoRespGet>
 800113c:	4607      	mov	r7, r0
 800113e:	f003 f8a3 	bl	8004288 <RuntimeStats_ModbusMasterWrongRespGet>
 8001142:	9001      	str	r0, [sp, #4]
 8001144:	9700      	str	r7, [sp, #0]
 8001146:	4633      	mov	r3, r6
 8001148:	4622      	mov	r2, r4
 800114a:	4919      	ldr	r1, [pc, #100]	; (80011b0 <xCLI_GetCommStats+0x11c>)
 800114c:	4628      	mov	r0, r5
 800114e:	f00c fd69 	bl	800dc24 <sprintf_>
			step++;
 8001152:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <xCLI_GetCommStats+0x10c>)
 8001154:	7813      	ldrb	r3, [r2, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 800115a:	2001      	movs	r0, #1
			break;
 800115c:	e7bc      	b.n	80010d8 <xCLI_GetCommStats+0x44>
			sprintf(pcWriteBuffer, "Modbus TCP Server statistics:\r\n"
 800115e:	f003 f8b9 	bl	80042d4 <RuntimeStats_ModbusSlaveRqAllGet>
 8001162:	4604      	mov	r4, r0
 8001164:	f003 f8bc 	bl	80042e0 <RuntimeStats_ModbusSlaveRqOkGet>
 8001168:	4606      	mov	r6, r0
 800116a:	f003 f8bf 	bl	80042ec <RuntimeStats_ModbusSlaveRqErrGet>
 800116e:	4607      	mov	r7, r0
 8001170:	f003 f8c2 	bl	80042f8 <RuntimeStats_ModbusSlaveRespGet>
 8001174:	9001      	str	r0, [sp, #4]
 8001176:	9700      	str	r7, [sp, #0]
 8001178:	4633      	mov	r3, r6
 800117a:	4622      	mov	r2, r4
 800117c:	490d      	ldr	r1, [pc, #52]	; (80011b4 <xCLI_GetCommStats+0x120>)
 800117e:	4628      	mov	r0, r5
 8001180:	f00c fd50 	bl	800dc24 <sprintf_>
					step++;
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <xCLI_GetCommStats+0x10c>)
 8001186:	7813      	ldrb	r3, [r2, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 800118c:	2001      	movs	r0, #1
					break;
 800118e:	e7a3      	b.n	80010d8 <xCLI_GetCommStats+0x44>
			step = 0;
 8001190:	2400      	movs	r4, #0
 8001192:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <xCLI_GetCommStats+0x10c>)
 8001194:	701c      	strb	r4, [r3, #0]
			sprintf(pcWriteBuffer, "\r\n");
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <xCLI_GetCommStats+0x124>)
 8001198:	f00c fd44 	bl	800dc24 <sprintf_>
			retVal = pdFALSE;
 800119c:	4620      	mov	r0, r4
	return retVal;
 800119e:	e79b      	b.n	80010d8 <xCLI_GetCommStats+0x44>
 80011a0:	2000252d 	.word	0x2000252d
 80011a4:	0800e92c 	.word	0x0800e92c
 80011a8:	0800e968 	.word	0x0800e968
 80011ac:	0800e990 	.word	0x0800e990
 80011b0:	0800e9b8 	.word	0x0800e9b8
 80011b4:	0800ea44 	.word	0x0800ea44
 80011b8:	0800eb60 	.word	0x0800eb60

080011bc <xCLI_WriteTestEvent>:

BaseType_t xCLI_WriteTestEvent( char *pcWriteBuffer, size_t xWriteBufferLen, char* pcCommandString ){
 80011bc:	b510      	push	{r4, lr}
 80011be:	4604      	mov	r4, r0
	(void) pcCommandString;
	(void) xWriteBufferLen;
	DataLog_LogEvent(EV_TEST, NULL, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	4611      	mov	r1, r2
 80011c4:	2004      	movs	r0, #4
 80011c6:	f001 fd4f 	bl	8002c68 <DataLog_LogEvent>
	sprintf(pcWriteBuffer, "    Done.\r\n    Current pointer: %d\r\n", DataLog_GetCurrentMemPointer());
 80011ca:	f001 fde9 	bl	8002da0 <DataLog_GetCurrentMemPointer>
 80011ce:	4602      	mov	r2, r0
 80011d0:	4902      	ldr	r1, [pc, #8]	; (80011dc <xCLI_WriteTestEvent+0x20>)
 80011d2:	4620      	mov	r0, r4
 80011d4:	f00c fd26 	bl	800dc24 <sprintf_>
	return pdFALSE;
}
 80011d8:	2000      	movs	r0, #0
 80011da:	bd10      	pop	{r4, pc}
 80011dc:	0800ef44 	.word	0x0800ef44

080011e0 <xCLI_EreaseFlash>:

BaseType_t xCLI_EreaseFlash( char *pcWriteBuffer, size_t xWriteBufferLen, char* pcCommandString ){
 80011e0:	b510      	push	{r4, lr}
 80011e2:	4604      	mov	r4, r0
	(void) pcCommandString;
	(void) xWriteBufferLen;

	DataLog_EreaseMemory();
 80011e4:	f001 fdc6 	bl	8002d74 <DataLog_EreaseMemory>
	sprintf(pcWriteBuffer, "    Done.\r\n");
 80011e8:	4902      	ldr	r1, [pc, #8]	; (80011f4 <xCLI_EreaseFlash+0x14>)
 80011ea:	4620      	mov	r0, r4
 80011ec:	f00c fd1a 	bl	800dc24 <sprintf_>

	return pdFALSE;
}
 80011f0:	2000      	movs	r0, #0
 80011f2:	bd10      	pop	{r4, pc}
 80011f4:	0800e920 	.word	0x0800e920

080011f8 <xCLI_Reset>:

BaseType_t xCLI_Reset( char *pcWriteBuffer, size_t xWriteBufferLen, char* pcCommandString ){
 80011f8:	b508      	push	{r3, lr}
	(void) pcCommandString;
	(void) xWriteBufferLen;
	(void) pcWriteBuffer;
	HAL_NVIC_SystemReset();
 80011fa:	f006 f9df 	bl	80075bc <HAL_NVIC_SystemReset>
	return pdFALSE;
}
 80011fe:	2000      	movs	r0, #0
 8001200:	bd08      	pop	{r3, pc}
	...

08001204 <xCLI_ShowIO>:

BaseType_t xCLI_ShowIO( char *pcWriteBuffer, size_t xWriteBufferLen, char* pcCommandString ){
 8001204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001208:	b091      	sub	sp, #68	; 0x44
 800120a:	900f      	str	r0, [sp, #60]	; 0x3c
	(void) pcCommandString;
	(void) xWriteBufferLen;
	RegTaskData_t* ptr;

	ptr = RegulationTask_GetData();
 800120c:	f004 fb4e 	bl	80058ac <RegulationTask_GetData>
			"    9:  %d\r\n    10: %d\r\n"
			"Outputs:\r\n"
			"    1:  %d\r\n    2:  %d\r\n"
			"    3:  %d\r\n    4:  %d\r\n"
			"    5:  %d\r\n    6:  %d\r\n",
			ptr->IOsignals.signals.input1, ptr->IOsignals.signals.input2,
 8001210:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
			ptr->IOsignals.signals.input3, ptr->IOsignals.signals.input4,
 8001214:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8001218:	930e      	str	r3, [sp, #56]	; 0x38
 800121a:	f3c2 01c0 	ubfx	r1, r2, #3, #1
			ptr->IOsignals.signals.input5, ptr->IOsignals.signals.input6,
 800121e:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8001222:	f3c2 1540 	ubfx	r5, r2, #5, #1
			ptr->IOsignals.signals.input7, ptr->IOsignals.signals.input8,
 8001226:	f3c2 1680 	ubfx	r6, r2, #6, #1
 800122a:	09d7      	lsrs	r7, r2, #7
			ptr->IOsignals.signals.input9, ptr->IOsignals.signals.input10,
 800122c:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001230:	f3c3 0040 	ubfx	r0, r3, #1, #1
 8001234:	f003 0c01 	and.w	ip, r3, #1
			ptr->IOsignals.signals.output1, ptr->IOsignals.signals.output2,
 8001238:	ea4f 1ed3 	mov.w	lr, r3, lsr #7
 800123c:	f3c3 1880 	ubfx	r8, r3, #6, #1
			ptr->IOsignals.signals.output3, ptr->IOsignals.signals.output4,
 8001240:	f3c3 1940 	ubfx	r9, r3, #5, #1
 8001244:	f3c3 1a00 	ubfx	sl, r3, #4, #1
			ptr->IOsignals.signals.output5, ptr->IOsignals.signals.output6);
 8001248:	f3c3 0bc0 	ubfx	fp, r3, #3, #1
 800124c:	f3c3 0380 	ubfx	r3, r3, #2, #1
	sprintf(pcWriteBuffer, "Inputs: \r\n"
 8001250:	930d      	str	r3, [sp, #52]	; 0x34
 8001252:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8001256:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800125a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800125e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8001262:	f8cd e020 	str.w	lr, [sp, #32]
 8001266:	f8cd c01c 	str.w	ip, [sp, #28]
 800126a:	9006      	str	r0, [sp, #24]
 800126c:	9705      	str	r7, [sp, #20]
 800126e:	9604      	str	r6, [sp, #16]
 8001270:	9503      	str	r5, [sp, #12]
 8001272:	9402      	str	r4, [sp, #8]
 8001274:	9101      	str	r1, [sp, #4]
 8001276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	f3c2 0340 	ubfx	r3, r2, #1, #1
 800127e:	f002 0201 	and.w	r2, r2, #1
 8001282:	4904      	ldr	r1, [pc, #16]	; (8001294 <xCLI_ShowIO+0x90>)
 8001284:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001286:	f00c fccd 	bl	800dc24 <sprintf_>

	return pdFALSE;
}
 800128a:	2000      	movs	r0, #0
 800128c:	b011      	add	sp, #68	; 0x44
 800128e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001292:	bf00      	nop
 8001294:	0800ee6c 	.word	0x0800ee6c

08001298 <xCLI_GetLastEvent>:

BaseType_t xCLI_GetLastEvent( char *pcWriteBuffer, size_t xWriteBufferLen, char* pcCommandString ){
 8001298:	b510      	push	{r4, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	4604      	mov	r4, r0
	(void) pcCommandString;
	(void) xWriteBufferLen;

	DataLogEvent_t lastEvent;

	DataLog_GetLastEvent(&lastEvent);
 800129e:	4668      	mov	r0, sp
 80012a0:	f001 fd2a 	bl	8002cf8 <DataLog_GetLastEvent>

	DataLog_TranslateEvent(&lastEvent, pcWriteBuffer);
 80012a4:	4621      	mov	r1, r4
 80012a6:	4668      	mov	r0, sp
 80012a8:	f001 fd80 	bl	8002dac <DataLog_TranslateEvent>

	return pdFALSE;
}
 80012ac:	2000      	movs	r0, #0
 80012ae:	b004      	add	sp, #16
 80012b0:	bd10      	pop	{r4, pc}
	...

080012b4 <xCLI_GetEvents>:

BaseType_t xCLI_GetEvents( char *pcWriteBuffer, size_t xWriteBufferLen, char* pcCommandString ){
 80012b4:	b570      	push	{r4, r5, r6, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	4604      	mov	r4, r0
	static uint8_t step = 0;

	BaseType_t retVal = pdTRUE;
	DataLogEvent_t event;

	switch (step){
 80012ba:	4b30      	ldr	r3, [pc, #192]	; (800137c <xCLI_GetEvents+0xc8>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b14b      	cbz	r3, 80012d4 <xCLI_GetEvents+0x20>
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d03a      	beq.n	800133a <xCLI_GetEvents+0x86>
			}

			break;

		default:
			step = 0;
 80012c4:	2500      	movs	r5, #0
 80012c6:	4b2d      	ldr	r3, [pc, #180]	; (800137c <xCLI_GetEvents+0xc8>)
 80012c8:	701d      	strb	r5, [r3, #0]
			sprintf(pcWriteBuffer, "\r\n");
 80012ca:	492d      	ldr	r1, [pc, #180]	; (8001380 <xCLI_GetEvents+0xcc>)
 80012cc:	f00c fcaa 	bl	800dc24 <sprintf_>
			retVal = pdFALSE;
 80012d0:	4628      	mov	r0, r5
			break;
 80012d2:	e02b      	b.n	800132c <xCLI_GetEvents+0x78>
 80012d4:	4610      	mov	r0, r2
			parameter = (char*)FreeRTOS_CLIGetParameter(pcCommandString, 1, (BaseType_t*)&len);
 80012d6:	f10d 0217 	add.w	r2, sp, #23
 80012da:	2101      	movs	r1, #1
 80012dc:	f00c f876 	bl	800d3cc <FreeRTOS_CLIGetParameter>
			for(uint8_t i = len; i > 0; i--){
 80012e0:	f89d 2017 	ldrb.w	r2, [sp, #23]
	uint32_t mul = 1;
 80012e4:	2301      	movs	r3, #1
			for(uint8_t i = len; i > 0; i--){
 80012e6:	e00b      	b.n	8001300 <xCLI_GetEvents+0x4c>
				par += (*(parameter + i - 1) - '0') * mul;
 80012e8:	3a01      	subs	r2, #1
 80012ea:	5c81      	ldrb	r1, [r0, r2]
 80012ec:	3930      	subs	r1, #48	; 0x30
 80012ee:	4d25      	ldr	r5, [pc, #148]	; (8001384 <xCLI_GetEvents+0xd0>)
 80012f0:	682e      	ldr	r6, [r5, #0]
 80012f2:	fb03 6101 	mla	r1, r3, r1, r6
 80012f6:	6029      	str	r1, [r5, #0]
				mul *= 10;
 80012f8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80012fc:	004b      	lsls	r3, r1, #1
			for(uint8_t i = len; i > 0; i--){
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	2a00      	cmp	r2, #0
 8001302:	d1f1      	bne.n	80012e8 <xCLI_GetEvents+0x34>
			if(par > DataLog_GetSavedEventsCnt()){
 8001304:	f001 fd72 	bl	8002dec <DataLog_GetSavedEventsCnt>
 8001308:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <xCLI_GetEvents+0xd0>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4290      	cmp	r0, r2
 800130e:	d20f      	bcs.n	8001330 <xCLI_GetEvents+0x7c>
				par = DataLog_GetSavedEventsCnt();
 8001310:	f001 fd6c 	bl	8002dec <DataLog_GetSavedEventsCnt>
 8001314:	4602      	mov	r2, r0
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <xCLI_GetEvents+0xd0>)
 8001318:	6018      	str	r0, [r3, #0]
				sprintf(pcWriteBuffer, "Only %d events to read...\r\n", (int)par);
 800131a:	491b      	ldr	r1, [pc, #108]	; (8001388 <xCLI_GetEvents+0xd4>)
 800131c:	4620      	mov	r0, r4
 800131e:	f00c fc81 	bl	800dc24 <sprintf_>
			step++;
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <xCLI_GetEvents+0xc8>)
 8001324:	7813      	ldrb	r3, [r2, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 800132a:	2001      	movs	r0, #1
	}

	return retVal;
}
 800132c:	b006      	add	sp, #24
 800132e:	bd70      	pop	{r4, r5, r6, pc}
				sprintf(pcWriteBuffer, "Reading %d events...\r\n", (int)par);
 8001330:	4916      	ldr	r1, [pc, #88]	; (800138c <xCLI_GetEvents+0xd8>)
 8001332:	4620      	mov	r0, r4
 8001334:	f00c fc76 	bl	800dc24 <sprintf_>
 8001338:	e7f3      	b.n	8001322 <xCLI_GetEvents+0x6e>
			if(DL_OK == DataLog_GetLastEventsN(&event, par)){
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <xCLI_GetEvents+0xd0>)
 800133c:	6819      	ldr	r1, [r3, #0]
 800133e:	a801      	add	r0, sp, #4
 8001340:	f001 fd5a 	bl	8002df8 <DataLog_GetLastEventsN>
 8001344:	b980      	cbnz	r0, 8001368 <xCLI_GetEvents+0xb4>
				DataLog_TranslateEvent(&event, pcWriteBuffer);
 8001346:	4621      	mov	r1, r4
 8001348:	a801      	add	r0, sp, #4
 800134a:	f001 fd2f 	bl	8002dac <DataLog_TranslateEvent>
				par --;
 800134e:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <xCLI_GetEvents+0xd0>)
 8001350:	6813      	ldr	r3, [r2, #0]
 8001352:	3b01      	subs	r3, #1
 8001354:	6013      	str	r3, [r2, #0]
			if(par == 0){
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <xCLI_GetEvents+0xd0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	b96b      	cbnz	r3, 8001378 <xCLI_GetEvents+0xc4>
				step++;
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <xCLI_GetEvents+0xc8>)
 800135e:	7813      	ldrb	r3, [r2, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8001364:	2001      	movs	r0, #1
 8001366:	e7e1      	b.n	800132c <xCLI_GetEvents+0x78>
				sprintf(pcWriteBuffer, "No more events.\r\n");
 8001368:	4909      	ldr	r1, [pc, #36]	; (8001390 <xCLI_GetEvents+0xdc>)
 800136a:	4620      	mov	r0, r4
 800136c:	f00c fc5a 	bl	800dc24 <sprintf_>
				par = 0;
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <xCLI_GetEvents+0xd0>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e7ee      	b.n	8001356 <xCLI_GetEvents+0xa2>
	BaseType_t retVal = pdTRUE;
 8001378:	2001      	movs	r0, #1
	return retVal;
 800137a:	e7d7      	b.n	800132c <xCLI_GetEvents+0x78>
 800137c:	2000252e 	.word	0x2000252e
 8001380:	0800eb60 	.word	0x0800eb60
 8001384:	20002524 	.word	0x20002524
 8001388:	0800eadc 	.word	0x0800eadc
 800138c:	0800eaf8 	.word	0x0800eaf8
 8001390:	0800eb10 	.word	0x0800eb10

08001394 <xCLI_GetEventsRaw>:

BaseType_t xCLI_GetEventsRaw( char *pcWriteBuffer, size_t xWriteBufferLen, char* pcCommandString ){
 8001394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001398:	b099      	sub	sp, #100	; 0x64
 800139a:	900f      	str	r0, [sp, #60]	; 0x3c
	static uint8_t step = 0;

	BaseType_t retVal = pdTRUE;
	DataLogEvent_t event;

	switch (step){
 800139c:	4b4d      	ldr	r3, [pc, #308]	; (80014d4 <xCLI_GetEventsRaw+0x140>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b153      	cbz	r3, 80013b8 <xCLI_GetEventsRaw+0x24>
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d03c      	beq.n	8001420 <xCLI_GetEventsRaw+0x8c>
			}

			break;

		default:
			step = 0;
 80013a6:	2400      	movs	r4, #0
 80013a8:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <xCLI_GetEventsRaw+0x140>)
 80013aa:	701c      	strb	r4, [r3, #0]
			sprintf(pcWriteBuffer, "\r\n");
 80013ac:	494a      	ldr	r1, [pc, #296]	; (80014d8 <xCLI_GetEventsRaw+0x144>)
 80013ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80013b0:	f00c fc38 	bl	800dc24 <sprintf_>
			retVal = pdFALSE;
 80013b4:	4620      	mov	r0, r4
			break;
 80013b6:	e02b      	b.n	8001410 <xCLI_GetEventsRaw+0x7c>
 80013b8:	4610      	mov	r0, r2
			parameter = (char*)FreeRTOS_CLIGetParameter(pcCommandString, 1, (BaseType_t*)&len);
 80013ba:	f10d 025f 	add.w	r2, sp, #95	; 0x5f
 80013be:	2101      	movs	r1, #1
 80013c0:	f00c f804 	bl	800d3cc <FreeRTOS_CLIGetParameter>
			for(uint8_t i = len; i > 0; i--){
 80013c4:	f89d 405f 	ldrb.w	r4, [sp, #95]	; 0x5f
	uint32_t mul = 1;
 80013c8:	2301      	movs	r3, #1
			for(uint8_t i = len; i > 0; i--){
 80013ca:	e00b      	b.n	80013e4 <xCLI_GetEventsRaw+0x50>
				par += (*(parameter + i - 1) - '0') * mul;
 80013cc:	3c01      	subs	r4, #1
 80013ce:	5d02      	ldrb	r2, [r0, r4]
 80013d0:	3a30      	subs	r2, #48	; 0x30
 80013d2:	4942      	ldr	r1, [pc, #264]	; (80014dc <xCLI_GetEventsRaw+0x148>)
 80013d4:	680d      	ldr	r5, [r1, #0]
 80013d6:	fb03 5202 	mla	r2, r3, r2, r5
 80013da:	600a      	str	r2, [r1, #0]
				mul *= 10;
 80013dc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80013e0:	0053      	lsls	r3, r2, #1
			for(uint8_t i = len; i > 0; i--){
 80013e2:	b2e4      	uxtb	r4, r4
 80013e4:	2c00      	cmp	r4, #0
 80013e6:	d1f1      	bne.n	80013cc <xCLI_GetEventsRaw+0x38>
			if(par > DataLog_GetSavedEventsCnt()){
 80013e8:	f001 fd00 	bl	8002dec <DataLog_GetSavedEventsCnt>
 80013ec:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <xCLI_GetEventsRaw+0x148>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4290      	cmp	r0, r2
 80013f2:	d210      	bcs.n	8001416 <xCLI_GetEventsRaw+0x82>
				par = DataLog_GetSavedEventsCnt();
 80013f4:	f001 fcfa 	bl	8002dec <DataLog_GetSavedEventsCnt>
 80013f8:	4602      	mov	r2, r0
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <xCLI_GetEventsRaw+0x148>)
 80013fc:	6018      	str	r0, [r3, #0]
				sprintf(pcWriteBuffer, "Only %d events to read...\r\n", (int)par);
 80013fe:	4938      	ldr	r1, [pc, #224]	; (80014e0 <xCLI_GetEventsRaw+0x14c>)
 8001400:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001402:	f00c fc0f 	bl	800dc24 <sprintf_>
			step++;
 8001406:	4a33      	ldr	r2, [pc, #204]	; (80014d4 <xCLI_GetEventsRaw+0x140>)
 8001408:	7813      	ldrb	r3, [r2, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 800140e:	2001      	movs	r0, #1
	}

	return retVal;
}
 8001410:	b019      	add	sp, #100	; 0x64
 8001412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				sprintf(pcWriteBuffer, "Reading %d events...\r\n", (int)par);
 8001416:	4933      	ldr	r1, [pc, #204]	; (80014e4 <xCLI_GetEventsRaw+0x150>)
 8001418:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800141a:	f00c fc03 	bl	800dc24 <sprintf_>
 800141e:	e7f2      	b.n	8001406 <xCLI_GetEventsRaw+0x72>
			if(DL_OK == DataLog_GetLastEventsN(&event, par)){
 8001420:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <xCLI_GetEventsRaw+0x148>)
 8001422:	6819      	ldr	r1, [r3, #0]
 8001424:	a813      	add	r0, sp, #76	; 0x4c
 8001426:	f001 fce7 	bl	8002df8 <DataLog_GetLastEventsN>
 800142a:	2800      	cmp	r0, #0
 800142c:	d148      	bne.n	80014c0 <xCLI_GetEventsRaw+0x12c>
						event.bytes[0], event.bytes[1], event.bytes[2], event.bytes[3],
 800142e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8001432:	9310      	str	r3, [sp, #64]	; 0x40
 8001434:	f89d 104d 	ldrb.w	r1, [sp, #77]	; 0x4d
 8001438:	9111      	str	r1, [sp, #68]	; 0x44
 800143a:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800143e:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
						event.bytes[4], event.bytes[5], event.bytes[6], event.bytes[7],
 8001442:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8001446:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
 800144a:	f89d 4052 	ldrb.w	r4, [sp, #82]	; 0x52
 800144e:	f89d 5053 	ldrb.w	r5, [sp, #83]	; 0x53
						event.bytes[8], event.bytes[9], event.bytes[10], event.bytes[11],
 8001452:	f89d 6054 	ldrb.w	r6, [sp, #84]	; 0x54
 8001456:	f89d 7055 	ldrb.w	r7, [sp, #85]	; 0x55
 800145a:	f89d c056 	ldrb.w	ip, [sp, #86]	; 0x56
 800145e:	f89d e057 	ldrb.w	lr, [sp, #87]	; 0x57
						event.bytes[12], event.bytes[13], event.bytes[14], event.bytes[15]);
 8001462:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8001466:	f89d 9059 	ldrb.w	r9, [sp, #89]	; 0x59
 800146a:	f89d a05a 	ldrb.w	sl, [sp, #90]	; 0x5a
 800146e:	f89d b05b 	ldrb.w	fp, [sp, #91]	; 0x5b
				sprintf(pcWriteBuffer, "%02d %02d %02d %02d %02d %02d %d %d %d %d %d %d %d %d %d %d \r\n",
 8001472:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8001476:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800147a:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 800147e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8001482:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8001486:	f8cd c020 	str.w	ip, [sp, #32]
 800148a:	9707      	str	r7, [sp, #28]
 800148c:	9606      	str	r6, [sp, #24]
 800148e:	9505      	str	r5, [sp, #20]
 8001490:	9404      	str	r4, [sp, #16]
 8001492:	9003      	str	r0, [sp, #12]
 8001494:	9102      	str	r1, [sp, #8]
 8001496:	9201      	str	r2, [sp, #4]
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800149c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800149e:	4912      	ldr	r1, [pc, #72]	; (80014e8 <xCLI_GetEventsRaw+0x154>)
 80014a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80014a2:	f00c fbbf 	bl	800dc24 <sprintf_>
				par --;
 80014a6:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <xCLI_GetEventsRaw+0x148>)
 80014a8:	6813      	ldr	r3, [r2, #0]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6013      	str	r3, [r2, #0]
			if(par == 0){
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <xCLI_GetEventsRaw+0x148>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	b96b      	cbnz	r3, 80014d0 <xCLI_GetEventsRaw+0x13c>
				step++;
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <xCLI_GetEventsRaw+0x140>)
 80014b6:	7813      	ldrb	r3, [r2, #0]
 80014b8:	3301      	adds	r3, #1
 80014ba:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 80014bc:	2001      	movs	r0, #1
 80014be:	e7a7      	b.n	8001410 <xCLI_GetEventsRaw+0x7c>
				sprintf(pcWriteBuffer, "No more events.\r\n");
 80014c0:	490a      	ldr	r1, [pc, #40]	; (80014ec <xCLI_GetEventsRaw+0x158>)
 80014c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80014c4:	f00c fbae 	bl	800dc24 <sprintf_>
				par = 0;
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <xCLI_GetEventsRaw+0x148>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	e7ee      	b.n	80014ae <xCLI_GetEventsRaw+0x11a>
	BaseType_t retVal = pdTRUE;
 80014d0:	2001      	movs	r0, #1
	return retVal;
 80014d2:	e79d      	b.n	8001410 <xCLI_GetEventsRaw+0x7c>
 80014d4:	2000252f 	.word	0x2000252f
 80014d8:	0800eb60 	.word	0x0800eb60
 80014dc:	20002528 	.word	0x20002528
 80014e0:	0800eadc 	.word	0x0800eadc
 80014e4:	0800eaf8 	.word	0x0800eaf8
 80014e8:	0800eb24 	.word	0x0800eb24
 80014ec:	0800eb10 	.word	0x0800eb10

080014f0 <xCLI_SetTime>:

BaseType_t xCLI_SetTime( char *pcWriteBuffer, size_t xWriteBufferLen, char* pcCommandString ){
 80014f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	4607      	mov	r7, r0
 80014f8:	4614      	mov	r4, r2
	char* parameter;
	uint8_t len;
	RTC_TimeTypeDef time;
	uint8_t hour, minute, second;

	parameter = (char*)FreeRTOS_CLIGetParameter(pcCommandString, 1, (BaseType_t*)&len);
 80014fa:	f10d 0217 	add.w	r2, sp, #23
 80014fe:	2101      	movs	r1, #1
 8001500:	4620      	mov	r0, r4
 8001502:	f00b ff63 	bl	800d3cc <FreeRTOS_CLIGetParameter>
	hour = (*parameter - '0') * 10 + (*(parameter + 1) - '0');
 8001506:	7803      	ldrb	r3, [r0, #0]
 8001508:	7846      	ldrb	r6, [r0, #1]
 800150a:	3b30      	subs	r3, #48	; 0x30
 800150c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001510:	005a      	lsls	r2, r3, #1
 8001512:	4416      	add	r6, r2
 8001514:	b2f6      	uxtb	r6, r6
 8001516:	3e30      	subs	r6, #48	; 0x30
 8001518:	b2f6      	uxtb	r6, r6

	parameter = (char*)FreeRTOS_CLIGetParameter(pcCommandString, 2, (BaseType_t*)&len);
 800151a:	f10d 0217 	add.w	r2, sp, #23
 800151e:	2102      	movs	r1, #2
 8001520:	4620      	mov	r0, r4
 8001522:	f00b ff53 	bl	800d3cc <FreeRTOS_CLIGetParameter>
	minute = (*parameter - '0') * 10 + (*(parameter + 1) - '0');
 8001526:	7803      	ldrb	r3, [r0, #0]
 8001528:	7845      	ldrb	r5, [r0, #1]
 800152a:	3b30      	subs	r3, #48	; 0x30
 800152c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001530:	005a      	lsls	r2, r3, #1
 8001532:	4415      	add	r5, r2
 8001534:	b2ed      	uxtb	r5, r5
 8001536:	3d30      	subs	r5, #48	; 0x30
 8001538:	b2ed      	uxtb	r5, r5

	parameter = (char*)FreeRTOS_CLIGetParameter(pcCommandString, 3, (BaseType_t*)&len);
 800153a:	f10d 0217 	add.w	r2, sp, #23
 800153e:	2103      	movs	r1, #3
 8001540:	4620      	mov	r0, r4
 8001542:	f00b ff43 	bl	800d3cc <FreeRTOS_CLIGetParameter>
	second = (*parameter - '0') * 10 + (*(parameter + 1) - '0');
 8001546:	7803      	ldrb	r3, [r0, #0]
 8001548:	7844      	ldrb	r4, [r0, #1]
 800154a:	3b30      	subs	r3, #48	; 0x30
 800154c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001550:	005a      	lsls	r2, r3, #1
 8001552:	4414      	add	r4, r2
 8001554:	b2e4      	uxtb	r4, r4
 8001556:	3c30      	subs	r4, #48	; 0x30
 8001558:	b2e4      	uxtb	r4, r4

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800155a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800159c <xCLI_SetTime+0xac>
 800155e:	2200      	movs	r2, #0
 8001560:	4669      	mov	r1, sp
 8001562:	4640      	mov	r0, r8
 8001564:	f007 fe2b 	bl	80091be <HAL_RTC_GetTime>
	time.Hours = hour;
 8001568:	f88d 6000 	strb.w	r6, [sp]
	time.Minutes = minute;
 800156c:	f88d 5001 	strb.w	r5, [sp, #1]
	time.Seconds = second;
 8001570:	f88d 4002 	strb.w	r4, [sp, #2]

	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001574:	2200      	movs	r2, #0
 8001576:	4669      	mov	r1, sp
 8001578:	4640      	mov	r0, r8
 800157a:	f007 fd2b 	bl	8008fd4 <HAL_RTC_SetTime>
	DataLog_LogEvent(EV_RTC_UPDATE, NULL, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	4611      	mov	r1, r2
 8001582:	2001      	movs	r0, #1
 8001584:	f001 fb70 	bl	8002c68 <DataLog_LogEvent>
	sprintf(pcWriteBuffer, "    Time changed.\r\n");
 8001588:	4903      	ldr	r1, [pc, #12]	; (8001598 <xCLI_SetTime+0xa8>)
 800158a:	4638      	mov	r0, r7
 800158c:	f00c fb4a 	bl	800dc24 <sprintf_>
	return pdFALSE;
}
 8001590:	2000      	movs	r0, #0
 8001592:	b006      	add	sp, #24
 8001594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001598:	0800eb98 	.word	0x0800eb98
 800159c:	200040a8 	.word	0x200040a8

080015a0 <xCLI_SetDate>:

BaseType_t xCLI_SetDate( char *pcWriteBuffer, size_t xWriteBufferLen, char* pcCommandString ){
 80015a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015a4:	b088      	sub	sp, #32
 80015a6:	4607      	mov	r7, r0
 80015a8:	4614      	mov	r4, r2
	uint8_t len;
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	uint8_t day, month, year;

	parameter = (char*)FreeRTOS_CLIGetParameter(pcCommandString, 1, (BaseType_t*)&len);
 80015aa:	f10d 021f 	add.w	r2, sp, #31
 80015ae:	2101      	movs	r1, #1
 80015b0:	4620      	mov	r0, r4
 80015b2:	f00b ff0b 	bl	800d3cc <FreeRTOS_CLIGetParameter>
	day = (*parameter - '0') * 10 + (*(parameter + 1) - '0');
 80015b6:	7803      	ldrb	r3, [r0, #0]
 80015b8:	7846      	ldrb	r6, [r0, #1]
 80015ba:	3b30      	subs	r3, #48	; 0x30
 80015bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015c0:	005a      	lsls	r2, r3, #1
 80015c2:	4416      	add	r6, r2
 80015c4:	b2f6      	uxtb	r6, r6
 80015c6:	3e30      	subs	r6, #48	; 0x30
 80015c8:	b2f6      	uxtb	r6, r6

	parameter = (char*)FreeRTOS_CLIGetParameter(pcCommandString, 2, (BaseType_t*)&len);
 80015ca:	f10d 021f 	add.w	r2, sp, #31
 80015ce:	2102      	movs	r1, #2
 80015d0:	4620      	mov	r0, r4
 80015d2:	f00b fefb 	bl	800d3cc <FreeRTOS_CLIGetParameter>
	month = (*parameter - '0') * 10 + (*(parameter + 1) - '0');
 80015d6:	7803      	ldrb	r3, [r0, #0]
 80015d8:	7845      	ldrb	r5, [r0, #1]
 80015da:	3b30      	subs	r3, #48	; 0x30
 80015dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015e0:	005a      	lsls	r2, r3, #1
 80015e2:	4415      	add	r5, r2
 80015e4:	b2ed      	uxtb	r5, r5
 80015e6:	3d30      	subs	r5, #48	; 0x30
 80015e8:	b2ed      	uxtb	r5, r5

	parameter = (char*)FreeRTOS_CLIGetParameter(pcCommandString, 3, (BaseType_t*)&len);
 80015ea:	f10d 021f 	add.w	r2, sp, #31
 80015ee:	2103      	movs	r1, #3
 80015f0:	4620      	mov	r0, r4
 80015f2:	f00b feeb 	bl	800d3cc <FreeRTOS_CLIGetParameter>
	year = (*parameter - '0') * 10 + (*(parameter + 1) - '0');
 80015f6:	7803      	ldrb	r3, [r0, #0]
 80015f8:	7844      	ldrb	r4, [r0, #1]
 80015fa:	3b30      	subs	r3, #48	; 0x30
 80015fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001600:	005a      	lsls	r2, r3, #1
 8001602:	4414      	add	r4, r2
 8001604:	b2e4      	uxtb	r4, r4
 8001606:	3c30      	subs	r4, #48	; 0x30
 8001608:	b2e4      	uxtb	r4, r4

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800160a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8001658 <xCLI_SetDate+0xb8>
 800160e:	2200      	movs	r2, #0
 8001610:	a902      	add	r1, sp, #8
 8001612:	4640      	mov	r0, r8
 8001614:	f007 fdd3 	bl	80091be <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001618:	2200      	movs	r2, #0
 800161a:	a901      	add	r1, sp, #4
 800161c:	4640      	mov	r0, r8
 800161e:	f007 fdf9 	bl	8009214 <HAL_RTC_GetDate>
	date.Date = day;
 8001622:	f88d 6006 	strb.w	r6, [sp, #6]
	date.Month = month;
 8001626:	f88d 5005 	strb.w	r5, [sp, #5]
	date.Year = year;
 800162a:	f88d 4007 	strb.w	r4, [sp, #7]

	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800162e:	2200      	movs	r2, #0
 8001630:	a901      	add	r1, sp, #4
 8001632:	4640      	mov	r0, r8
 8001634:	f007 fd4d 	bl	80090d2 <HAL_RTC_SetDate>
	DataLog_LogEvent(EV_RTC_UPDATE, NULL, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	4611      	mov	r1, r2
 800163c:	2001      	movs	r0, #1
 800163e:	f001 fb13 	bl	8002c68 <DataLog_LogEvent>
	sprintf(pcWriteBuffer, "    Date changed.\r\n");
 8001642:	4904      	ldr	r1, [pc, #16]	; (8001654 <xCLI_SetDate+0xb4>)
 8001644:	4638      	mov	r0, r7
 8001646:	f00c faed 	bl	800dc24 <sprintf_>
	return pdFALSE;
}
 800164a:	2000      	movs	r0, #0
 800164c:	b008      	add	sp, #32
 800164e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001652:	bf00      	nop
 8001654:	0800eb84 	.word	0x0800eb84
 8001658:	200040a8 	.word	0x200040a8

0800165c <CLI_Init>:
void CLI_Init (void){
 800165c:	b508      	push	{r3, lr}
	FreeRTOS_CLIRegisterCommand(&xEreaseEECmd);
 800165e:	4815      	ldr	r0, [pc, #84]	; (80016b4 <CLI_Init+0x58>)
 8001660:	f00b fe28 	bl	800d2b4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xEreaseFlashCmd);
 8001664:	4814      	ldr	r0, [pc, #80]	; (80016b8 <CLI_Init+0x5c>)
 8001666:	f00b fe25 	bl	800d2b4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xShowConfigCmd);
 800166a:	4814      	ldr	r0, [pc, #80]	; (80016bc <CLI_Init+0x60>)
 800166c:	f00b fe22 	bl	800d2b4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetSysStatusCmd);
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <CLI_Init+0x64>)
 8001672:	f00b fe1f 	bl	800d2b4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetRtosStatsCmd);
 8001676:	4813      	ldr	r0, [pc, #76]	; (80016c4 <CLI_Init+0x68>)
 8001678:	f00b fe1c 	bl	800d2b4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetCommStatsCmd);
 800167c:	4812      	ldr	r0, [pc, #72]	; (80016c8 <CLI_Init+0x6c>)
 800167e:	f00b fe19 	bl	800d2b4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetIOCmd);
 8001682:	4812      	ldr	r0, [pc, #72]	; (80016cc <CLI_Init+0x70>)
 8001684:	f00b fe16 	bl	800d2b4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetLastEventCmd);
 8001688:	4811      	ldr	r0, [pc, #68]	; (80016d0 <CLI_Init+0x74>)
 800168a:	f00b fe13 	bl	800d2b4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetLastEventsCmd);
 800168e:	4811      	ldr	r0, [pc, #68]	; (80016d4 <CLI_Init+0x78>)
 8001690:	f00b fe10 	bl	800d2b4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetLastEventsRawCmd);
 8001694:	4810      	ldr	r0, [pc, #64]	; (80016d8 <CLI_Init+0x7c>)
 8001696:	f00b fe0d 	bl	800d2b4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xWriteTestEventCmd);
 800169a:	4810      	ldr	r0, [pc, #64]	; (80016dc <CLI_Init+0x80>)
 800169c:	f00b fe0a 	bl	800d2b4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xSetTimeCmd);
 80016a0:	480f      	ldr	r0, [pc, #60]	; (80016e0 <CLI_Init+0x84>)
 80016a2:	f00b fe07 	bl	800d2b4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xSetDateCmd);
 80016a6:	480f      	ldr	r0, [pc, #60]	; (80016e4 <CLI_Init+0x88>)
 80016a8:	f00b fe04 	bl	800d2b4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xResetCmd);
 80016ac:	480e      	ldr	r0, [pc, #56]	; (80016e8 <CLI_Init+0x8c>)
 80016ae:	f00b fe01 	bl	800d2b4 <FreeRTOS_CLIRegisterCommand>
}
 80016b2:	bd08      	pop	{r3, pc}
 80016b4:	0800ef6c 	.word	0x0800ef6c
 80016b8:	0800ef7c 	.word	0x0800ef7c
 80016bc:	0800f02c 	.word	0x0800f02c
 80016c0:	0800efec 	.word	0x0800efec
 80016c4:	0800efdc 	.word	0x0800efdc
 80016c8:	0800ef8c 	.word	0x0800ef8c
 80016cc:	0800ef9c 	.word	0x0800ef9c
 80016d0:	0800efac 	.word	0x0800efac
 80016d4:	0800efbc 	.word	0x0800efbc
 80016d8:	0800efcc 	.word	0x0800efcc
 80016dc:	0800f03c 	.word	0x0800f03c
 80016e0:	0800f01c 	.word	0x0800f01c
 80016e4:	0800f00c 	.word	0x0800f00c
 80016e8:	0800effc 	.word	0x0800effc

080016ec <Config_CalculateCRC>:
		configuration.dummy = MAGIC_WORD;
		configuration.crc = Config_CalculateCRC();
	}
}

static uint32_t Config_CalculateCRC (void){
 80016ec:	b508      	push	{r3, lr}
	return HAL_CRC_Calculate(&hcrc, (uint32_t*)&configuration, (CONFIG_BYTES_LEN - 2)/4);
 80016ee:	220d      	movs	r2, #13
 80016f0:	4902      	ldr	r1, [pc, #8]	; (80016fc <Config_CalculateCRC+0x10>)
 80016f2:	4803      	ldr	r0, [pc, #12]	; (8001700 <Config_CalculateCRC+0x14>)
 80016f4:	f005 ff83 	bl	80075fe <HAL_CRC_Calculate>
}
 80016f8:	bd08      	pop	{r3, pc}
 80016fa:	bf00      	nop
 80016fc:	20002534 	.word	0x20002534
 8001700:	20003f34 	.word	0x20003f34

08001704 <Config_CheckData>:

static CONFStatus_t Config_CheckData (void){
 8001704:	b510      	push	{r4, lr}
	CONFStatus_t retval;
	uint32_t readCRC, actualCRC;

	readCRC = configuration.crc;
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <Config_CheckData+0x18>)
 8001708:	6b5c      	ldr	r4, [r3, #52]	; 0x34
	actualCRC = Config_CalculateCRC();
 800170a:	f7ff ffef 	bl	80016ec <Config_CalculateCRC>

	if(readCRC != actualCRC){
 800170e:	4284      	cmp	r4, r0
 8001710:	d101      	bne.n	8001716 <Config_CheckData+0x12>
		if(configuration.dummy != MAGIC_WORD){
			retval = CONF_ERR_NOCONF;
		}
		retval = CONF_ERR_CRC;
	}else{
		retval = CONF_OK;
 8001712:	2000      	movs	r0, #0
	}
	return retval;
}
 8001714:	bd10      	pop	{r4, pc}
		retval = CONF_ERR_CRC;
 8001716:	f06f 0003 	mvn.w	r0, #3
 800171a:	e7fb      	b.n	8001714 <Config_CheckData+0x10>
 800171c:	20002534 	.word	0x20002534

08001720 <Config_ChangeValue>:
	if(value != NULL && param < PARAM_NUMS){
 8001720:	2900      	cmp	r1, #0
 8001722:	d061      	beq.n	80017e8 <Config_ChangeValue+0xc8>
 8001724:	2811      	cmp	r0, #17
 8001726:	d85f      	bhi.n	80017e8 <Config_ChangeValue+0xc8>
void Config_ChangeValue(uint32_t param, void* value){
 8001728:	b510      	push	{r4, lr}
		switch(param){
 800172a:	2811      	cmp	r0, #17
 800172c:	d80d      	bhi.n	800174a <Config_ChangeValue+0x2a>
 800172e:	e8df f000 	tbb	[pc, r0]
 8001732:	1409      	.short	0x1409
 8001734:	24201c18 	.word	0x24201c18
 8001738:	34302c28 	.word	0x34302c28
 800173c:	44403c38 	.word	0x44403c38
 8001740:	56514c48 	.word	0x56514c48
				memcpy(&configuration.RegulationConfig.CWU_heater_power, value, 4);
 8001744:	680a      	ldr	r2, [r1, #0]
 8001746:	4b29      	ldr	r3, [pc, #164]	; (80017ec <Config_ChangeValue+0xcc>)
 8001748:	601a      	str	r2, [r3, #0]
		configuration.dummy = MAGIC_WORD;
 800174a:	4c28      	ldr	r4, [pc, #160]	; (80017ec <Config_ChangeValue+0xcc>)
 800174c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8001750:	8663      	strh	r3, [r4, #50]	; 0x32
		configuration.crc = Config_CalculateCRC();
 8001752:	f7ff ffcb 	bl	80016ec <Config_CalculateCRC>
 8001756:	6360      	str	r0, [r4, #52]	; 0x34
}
 8001758:	bd10      	pop	{r4, pc}
				memcpy(&configuration.RegulationConfig.CO_heater_power, value, 4);
 800175a:	680a      	ldr	r2, [r1, #0]
 800175c:	4b23      	ldr	r3, [pc, #140]	; (80017ec <Config_ChangeValue+0xcc>)
 800175e:	605a      	str	r2, [r3, #4]
				break;
 8001760:	e7f3      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.net_max_power, value, 4);
 8001762:	680a      	ldr	r2, [r1, #0]
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <Config_ChangeValue+0xcc>)
 8001766:	609a      	str	r2, [r3, #8]
				break;
 8001768:	e7ef      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.counter_address, value, 1);
 800176a:	780a      	ldrb	r2, [r1, #0]
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <Config_ChangeValue+0xcc>)
 800176e:	731a      	strb	r2, [r3, #12]
				break;
 8001770:	e7eb      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.temperature_address, value, 1);
 8001772:	780a      	ldrb	r2, [r1, #0]
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <Config_ChangeValue+0xcc>)
 8001776:	735a      	strb	r2, [r3, #13]
				break;
 8001778:	e7e7      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.acumulated_power_coeff, value, 1);
 800177a:	780a      	ldrb	r2, [r1, #0]
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <Config_ChangeValue+0xcc>)
 800177e:	739a      	strb	r2, [r3, #14]
				break;
 8001780:	e7e3      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.heater_power_coeff, value, 1);
 8001782:	780a      	ldrb	r2, [r1, #0]
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <Config_ChangeValue+0xcc>)
 8001786:	73da      	strb	r2, [r3, #15]
				break;
 8001788:	e7df      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CO_hi_temp, value, 1);
 800178a:	780a      	ldrb	r2, [r1, #0]
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <Config_ChangeValue+0xcc>)
 800178e:	741a      	strb	r2, [r3, #16]
				break;
 8001790:	e7db      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CO_lo_temp, value, 1);
 8001792:	780a      	ldrb	r2, [r1, #0]
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <Config_ChangeValue+0xcc>)
 8001796:	745a      	strb	r2, [r3, #17]
				break;
 8001798:	e7d7      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CWU_hi_temp, value, 1);
 800179a:	780a      	ldrb	r2, [r1, #0]
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <Config_ChangeValue+0xcc>)
 800179e:	749a      	strb	r2, [r3, #18]
				break;
 80017a0:	e7d3      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CWU_lo_temp, value, 1);
 80017a2:	780a      	ldrb	r2, [r1, #0]
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <Config_ChangeValue+0xcc>)
 80017a6:	74da      	strb	r2, [r3, #19]
				break;
 80017a8:	e7cf      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.exported_power, value, 4);
 80017aa:	680a      	ldr	r2, [r1, #0]
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <Config_ChangeValue+0xcc>)
 80017ae:	615a      	str	r2, [r3, #20]
				break;
 80017b0:	e7cb      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.imported_power, value, 4);
 80017b2:	680a      	ldr	r2, [r1, #0]
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <Config_ChangeValue+0xcc>)
 80017b6:	619a      	str	r2, [r3, #24]
				break;
 80017b8:	e7c7      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.acumulated_power, value, 4);
 80017ba:	680a      	ldr	r2, [r1, #0]
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <Config_ChangeValue+0xcc>)
 80017be:	61da      	str	r2, [r3, #28]
				break;
 80017c0:	e7c3      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.ipAddress[0], value, 4);
 80017c2:	680a      	ldr	r2, [r1, #0]
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <Config_ChangeValue+0xcc>)
 80017c6:	621a      	str	r2, [r3, #32]
				break;
 80017c8:	e7bf      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.subnetMask[0], value, 1);
 80017ca:	780a      	ldrb	r2, [r1, #0]
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <Config_ChangeValue+0xcc>)
 80017ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				break;
 80017d2:	e7ba      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.gatewayAddress[0], value, 1);
 80017d4:	780a      	ldrb	r2, [r1, #0]
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <Config_ChangeValue+0xcc>)
 80017d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				break;
 80017dc:	e7b5      	b.n	800174a <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.macAddress[0], value, 1);
 80017de:	780a      	ldrb	r2, [r1, #0]
 80017e0:	4b02      	ldr	r3, [pc, #8]	; (80017ec <Config_ChangeValue+0xcc>)
 80017e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				break;
 80017e6:	e7b0      	b.n	800174a <Config_ChangeValue+0x2a>
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20002534 	.word	0x20002534

080017f0 <Config_Save>:

CONFStatus_t Config_Save (void){
 80017f0:	b508      	push	{r3, lr}
	CONFStatus_t retval;
	retval = (CONFStatus_t)EE_Write(&configuration, 0, CONFIG_BYTES_LEN);
 80017f2:	2238      	movs	r2, #56	; 0x38
 80017f4:	2100      	movs	r1, #0
 80017f6:	4802      	ldr	r0, [pc, #8]	; (8001800 <Config_Save+0x10>)
 80017f8:	f000 f8fa 	bl	80019f0 <EE_Write>
	return retval;
}
 80017fc:	bd08      	pop	{r3, pc}
 80017fe:	bf00      	nop
 8001800:	20002534 	.word	0x20002534

08001804 <Config_GetConfig>:
ConfigLoadStatus_t Config_GetConfigStatus(void){
	return configuartionStatus;
}

CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8001804:	b1c0      	cbz	r0, 8001838 <Config_GetConfig+0x34>
CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
 8001806:	b4f0      	push	{r4, r5, r6, r7}
 8001808:	4604      	mov	r4, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <Config_GetConfig+0x40>)
 800180c:	f993 3000 	ldrsb.w	r3, [r3]
 8001810:	b9ab      	cbnz	r3, 800183e <Config_GetConfig+0x3a>
		memcpy(config, &configuration, CONFIG_BYTES_LEN);
 8001812:	4d0d      	ldr	r5, [pc, #52]	; (8001848 <Config_GetConfig+0x44>)
 8001814:	f105 0730 	add.w	r7, r5, #48	; 0x30
 8001818:	462e      	mov	r6, r5
 800181a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800181c:	6020      	str	r0, [r4, #0]
 800181e:	6061      	str	r1, [r4, #4]
 8001820:	60a2      	str	r2, [r4, #8]
 8001822:	60e3      	str	r3, [r4, #12]
 8001824:	4635      	mov	r5, r6
 8001826:	3410      	adds	r4, #16
 8001828:	42be      	cmp	r6, r7
 800182a:	d1f5      	bne.n	8001818 <Config_GetConfig+0x14>
 800182c:	cd03      	ldmia	r5!, {r0, r1}
 800182e:	6020      	str	r0, [r4, #0]
 8001830:	6061      	str	r1, [r4, #4]
		return CONF_OK;
 8001832:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 8001834:	bcf0      	pop	{r4, r5, r6, r7}
 8001836:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 8001838:	f06f 0001 	mvn.w	r0, #1
}
 800183c:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 800183e:	f06f 0004 	mvn.w	r0, #4
 8001842:	e7f7      	b.n	8001834 <Config_GetConfig+0x30>
 8001844:	20002530 	.word	0x20002530
 8001848:	20002534 	.word	0x20002534

0800184c <Config_GetEthernetConfig>:

CONFStatus_t Config_GetEthernetConfig (EthernetConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 800184c:	b160      	cbz	r0, 8001868 <Config_GetEthernetConfig+0x1c>
CONFStatus_t Config_GetEthernetConfig (EthernetConfig_t* config){
 800184e:	b430      	push	{r4, r5}
 8001850:	4605      	mov	r5, r0

	//if(configuartionStatus == CONF_STAT_LOADED){
		memcpy(config, &configuration.EthernetConfig, ETH_CONFIG_BYTES_LEN);
 8001852:	4c07      	ldr	r4, [pc, #28]	; (8001870 <Config_GetEthernetConfig+0x24>)
 8001854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001856:	6028      	str	r0, [r5, #0]
 8001858:	6069      	str	r1, [r5, #4]
 800185a:	60aa      	str	r2, [r5, #8]
 800185c:	60eb      	str	r3, [r5, #12]
 800185e:	8823      	ldrh	r3, [r4, #0]
 8001860:	822b      	strh	r3, [r5, #16]
		return CONF_OK;
 8001862:	2000      	movs	r0, #0
	//}
	//return CONF_ERR_NOCONF;
}
 8001864:	bc30      	pop	{r4, r5}
 8001866:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 8001868:	f06f 0001 	mvn.w	r0, #1
}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20002554 	.word	0x20002554

08001874 <Config_GetRegConfig>:

CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8001874:	b198      	cbz	r0, 800189e <Config_GetRegConfig+0x2a>
CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
 8001876:	b430      	push	{r4, r5}
 8001878:	4605      	mov	r5, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <Config_GetRegConfig+0x38>)
 800187c:	f993 3000 	ldrsb.w	r3, [r3]
 8001880:	b983      	cbnz	r3, 80018a4 <Config_GetRegConfig+0x30>
		memcpy(config, &configuration.RegulationConfig, REG_CONFIG_BYTES_LEN);
 8001882:	4c0b      	ldr	r4, [pc, #44]	; (80018b0 <Config_GetRegConfig+0x3c>)
 8001884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001886:	6028      	str	r0, [r5, #0]
 8001888:	6069      	str	r1, [r5, #4]
 800188a:	60aa      	str	r2, [r5, #8]
 800188c:	60eb      	str	r3, [r5, #12]
 800188e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001890:	6128      	str	r0, [r5, #16]
 8001892:	6169      	str	r1, [r5, #20]
 8001894:	61aa      	str	r2, [r5, #24]
 8001896:	61eb      	str	r3, [r5, #28]
		return CONF_OK;
 8001898:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 800189a:	bc30      	pop	{r4, r5}
 800189c:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 800189e:	f06f 0001 	mvn.w	r0, #1
}
 80018a2:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 80018a4:	f06f 0004 	mvn.w	r0, #4
 80018a8:	e7f7      	b.n	800189a <Config_GetRegConfig+0x26>
 80018aa:	bf00      	nop
 80018ac:	20002530 	.word	0x20002530
 80018b0:	20002534 	.word	0x20002534

080018b4 <Config_Copy>:

CONFStatus_t Config_Copy (ConfigStruct_t* dest, ConfigStruct_t* src){
	if((dest == NULL) || (src == NULL)) return CONF_ERR_NULL;
 80018b4:	b1b0      	cbz	r0, 80018e4 <Config_Copy+0x30>
 80018b6:	b1c1      	cbz	r1, 80018ea <Config_Copy+0x36>
CONFStatus_t Config_Copy (ConfigStruct_t* dest, ConfigStruct_t* src){
 80018b8:	b470      	push	{r4, r5, r6}
	memcpy(dest, src, CONFIG_BYTES_LEN);
 80018ba:	460a      	mov	r2, r1
 80018bc:	3130      	adds	r1, #48	; 0x30
 80018be:	6816      	ldr	r6, [r2, #0]
 80018c0:	6855      	ldr	r5, [r2, #4]
 80018c2:	6894      	ldr	r4, [r2, #8]
 80018c4:	68d3      	ldr	r3, [r2, #12]
 80018c6:	6006      	str	r6, [r0, #0]
 80018c8:	6045      	str	r5, [r0, #4]
 80018ca:	6084      	str	r4, [r0, #8]
 80018cc:	60c3      	str	r3, [r0, #12]
 80018ce:	3210      	adds	r2, #16
 80018d0:	3010      	adds	r0, #16
 80018d2:	428a      	cmp	r2, r1
 80018d4:	d1f3      	bne.n	80018be <Config_Copy+0xa>
 80018d6:	6811      	ldr	r1, [r2, #0]
 80018d8:	6853      	ldr	r3, [r2, #4]
 80018da:	6001      	str	r1, [r0, #0]
 80018dc:	6043      	str	r3, [r0, #4]
	return CONF_OK;
 80018de:	2000      	movs	r0, #0
}
 80018e0:	bc70      	pop	{r4, r5, r6}
 80018e2:	4770      	bx	lr
	if((dest == NULL) || (src == NULL)) return CONF_ERR_NULL;
 80018e4:	f06f 0001 	mvn.w	r0, #1
 80018e8:	4770      	bx	lr
 80018ea:	f06f 0001 	mvn.w	r0, #1
}
 80018ee:	4770      	bx	lr

080018f0 <Config_Init>:
CONFStatus_t Config_Init(I2C_HandleTypeDef* iic){
 80018f0:	b538      	push	{r3, r4, r5, lr}
	configuartionStatus = CONF_STAT_INIT;
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <Config_Init+0x5c>)
 80018f4:	22ff      	movs	r2, #255	; 0xff
 80018f6:	701a      	strb	r2, [r3, #0]
	retval |= EE_Init(iic);
 80018f8:	f000 f82e 	bl	8001958 <EE_Init>
	retval = EE_Read(&configuration, 0, CONFIG_BYTES_LEN);
 80018fc:	2238      	movs	r2, #56	; 0x38
 80018fe:	2100      	movs	r1, #0
 8001900:	4813      	ldr	r0, [pc, #76]	; (8001950 <Config_Init+0x60>)
 8001902:	f000 f833 	bl	800196c <EE_Read>
 8001906:	4604      	mov	r4, r0
	if(retval == EE_OK){
 8001908:	b128      	cbz	r0, 8001916 <Config_Init+0x26>
	if(retval == CONF_OK){
 800190a:	b944      	cbnz	r4, 800191e <Config_Init+0x2e>
		configuartionStatus = CONF_STAT_LOADED;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <Config_Init+0x5c>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
}
 8001912:	b260      	sxtb	r0, r4
 8001914:	bd38      	pop	{r3, r4, r5, pc}
		retval = Config_CheckData();
 8001916:	f7ff fef5 	bl	8001704 <Config_CheckData>
 800191a:	4604      	mov	r4, r0
 800191c:	e7f5      	b.n	800190a <Config_Init+0x1a>
		Config_Copy(&configuration, &defaultConfig);
 800191e:	4d0c      	ldr	r5, [pc, #48]	; (8001950 <Config_Init+0x60>)
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <Config_Init+0x64>)
 8001922:	4628      	mov	r0, r5
 8001924:	f7ff ffc6 	bl	80018b4 <Config_Copy>
		configuration.crc = Config_CalculateCRC();
 8001928:	f7ff fee0 	bl	80016ec <Config_CalculateCRC>
 800192c:	6368      	str	r0, [r5, #52]	; 0x34
		if((retval == CONF_ERR_NOCONF) || (retval == CONF_ERR_CRC)){
 800192e:	1d63      	adds	r3, r4, #5
 8001930:	2b01      	cmp	r3, #1
 8001932:	d903      	bls.n	800193c <Config_Init+0x4c>
			configuartionStatus = CONF_STAT_ERROR;
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <Config_Init+0x5c>)
 8001936:	22fd      	movs	r2, #253	; 0xfd
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	e7ea      	b.n	8001912 <Config_Init+0x22>
			retval = Config_Save();
 800193c:	f7ff ff58 	bl	80017f0 <Config_Save>
 8001940:	4604      	mov	r4, r0
			configuartionStatus = CONF_STAT_LOADED;
 8001942:	4b02      	ldr	r3, [pc, #8]	; (800194c <Config_Init+0x5c>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	e7e3      	b.n	8001912 <Config_Init+0x22>
 800194a:	bf00      	nop
 800194c:	20002530 	.word	0x20002530
 8001950:	20002534 	.word	0x20002534
 8001954:	0800f04c 	.word	0x0800f04c

08001958 <EE_Init>:

extern osMutexId I2CMutexHandle;
I2C_HandleTypeDef* ee_iic;

EE_StatusTypeDef EE_Init (I2C_HandleTypeDef* hi2c){
	if(hi2c != NULL){
 8001958:	b118      	cbz	r0, 8001962 <EE_Init+0xa>
		ee_iic = hi2c;
 800195a:	4a03      	ldr	r2, [pc, #12]	; (8001968 <EE_Init+0x10>)
 800195c:	6010      	str	r0, [r2, #0]
		return EE_OK;
 800195e:	2000      	movs	r0, #0
 8001960:	4770      	bx	lr
	}
	return EE_ERR_NULL;
 8001962:	f06f 0001 	mvn.w	r0, #1
}
 8001966:	4770      	bx	lr
 8001968:	20003958 	.word	0x20003958

0800196c <EE_Read>:

EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;

	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 800196c:	b360      	cbz	r0, 80019c8 <EE_Read+0x5c>
EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
 800196e:	b570      	push	{r4, r5, r6, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	4606      	mov	r6, r0
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8001974:	b35a      	cbz	r2, 80019ce <EE_Read+0x62>
 8001976:	4614      	mov	r4, r2
 8001978:	460d      	mov	r5, r1

	dataBuf = (uint8_t*)data;
	if(pdTRUE == xSemaphoreTake(I2CMutexHandle, 100)){
 800197a:	2164      	movs	r1, #100	; 0x64
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <EE_Read+0x7c>)
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	f009 fc86 	bl	800b290 <xQueueSemaphoreTake>
 8001984:	2801      	cmp	r0, #1
 8001986:	d125      	bne.n	80019d4 <EE_Read+0x68>
		i2cStatus= HAL_I2C_Mem_Read(ee_iic, EE_ADDR, addr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 8001988:	4b18      	ldr	r3, [pc, #96]	; (80019ec <EE_Read+0x80>)
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	b2a3      	uxth	r3, r4
 800198e:	1ca2      	adds	r2, r4, #2
 8001990:	0092      	lsls	r2, r2, #2
 8001992:	9202      	str	r2, [sp, #8]
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	9600      	str	r6, [sp, #0]
 8001998:	2301      	movs	r3, #1
 800199a:	462a      	mov	r2, r5
 800199c:	21a0      	movs	r1, #160	; 0xa0
 800199e:	f006 fc39 	bl	8008214 <HAL_I2C_Mem_Read>
 80019a2:	4604      	mov	r4, r0
		xSemaphoreGive(I2CMutexHandle);
 80019a4:	2300      	movs	r3, #0
 80019a6:	461a      	mov	r2, r3
 80019a8:	4619      	mov	r1, r3
 80019aa:	480f      	ldr	r0, [pc, #60]	; (80019e8 <EE_Read+0x7c>)
 80019ac:	6800      	ldr	r0, [r0, #0]
 80019ae:	f009 fa79 	bl	800aea4 <xQueueGenericSend>
	}else{
		return EE_ERR_TIMEOUT;
	}
	if(i2cStatus == HAL_OK){
 80019b2:	b194      	cbz	r4, 80019da <EE_Read+0x6e>
		return EE_OK;
	}else if(i2cStatus == HAL_ERROR){
 80019b4:	2c01      	cmp	r4, #1
 80019b6:	d013      	beq.n	80019e0 <EE_Read+0x74>
		return EE_ERR_TIMEOUT;
	}else if(i2cStatus == HAL_BUSY){
 80019b8:	2c02      	cmp	r4, #2
 80019ba:	d002      	beq.n	80019c2 <EE_Read+0x56>
		return EE_ERR_BUSY;
	}else{
		return EE_ERR_TIMEOUT;
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019c0:	e00c      	b.n	80019dc <EE_Read+0x70>
		return EE_ERR_BUSY;
 80019c2:	f06f 0002 	mvn.w	r0, #2
 80019c6:	e009      	b.n	80019dc <EE_Read+0x70>
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 80019c8:	f06f 0001 	mvn.w	r0, #1
	}
}
 80019cc:	4770      	bx	lr
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 80019ce:	f06f 0001 	mvn.w	r0, #1
 80019d2:	e003      	b.n	80019dc <EE_Read+0x70>
		return EE_ERR_TIMEOUT;
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019d8:	e000      	b.n	80019dc <EE_Read+0x70>
		return EE_OK;
 80019da:	2000      	movs	r0, #0
}
 80019dc:	b004      	add	sp, #16
 80019de:	bd70      	pop	{r4, r5, r6, pc}
		return EE_ERR_TIMEOUT;
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e4:	e7fa      	b.n	80019dc <EE_Read+0x70>
 80019e6:	bf00      	nop
 80019e8:	20004224 	.word	0x20004224
 80019ec:	20003958 	.word	0x20003958

080019f0 <EE_Write>:

EE_StatusTypeDef EE_Write (void* data, uint32_t addr, uint32_t len){
 80019f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019f4:	b084      	sub	sp, #16
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;
	uint32_t datalen, i, pages, rest, bytelen, addrCpy;
	uint8_t eeBlock, eeAddr;

	if(data == NULL || len <= 0 || len >= EE_SIZE) return retval;
 80019f6:	2800      	cmp	r0, #0
 80019f8:	d07a      	beq.n	8001af0 <EE_Write+0x100>
 80019fa:	460e      	mov	r6, r1
 80019fc:	4614      	mov	r4, r2
 80019fe:	4607      	mov	r7, r0
 8001a00:	2a00      	cmp	r2, #0
 8001a02:	d078      	beq.n	8001af6 <EE_Write+0x106>
 8001a04:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001a08:	d278      	bcs.n	8001afc <EE_Write+0x10c>

	eeBlock = addr / EE_BLOCK_SIZE;
 8001a0a:	f3c1 2507 	ubfx	r5, r1, #8, #8
	eeAddr = addr % EE_BLOCK_SIZE;
 8001a0e:	fa5f f881 	uxtb.w	r8, r1

	dataBuf = (uint8_t*)data;
	datalen = len;
	addrCpy = addr;

	if(pdFALSE == xSemaphoreTake(I2CMutexHandle, 100)){
 8001a12:	2164      	movs	r1, #100	; 0x64
 8001a14:	4b3c      	ldr	r3, [pc, #240]	; (8001b08 <EE_Write+0x118>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	f009 fc3a 	bl	800b290 <xQueueSemaphoreTake>
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d070      	beq.n	8001b02 <EE_Write+0x112>
		return EE_ERR_TIMEOUT;
	}

	if(len <= EE_PAGE_SIZE){
 8001a20:	2c10      	cmp	r4, #16
 8001a22:	d90a      	bls.n	8001a3a <EE_Write+0x4a>
			retval = EE_OK;
		}
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
	}else{
		pages = datalen >> 4;
 8001a24:	ea4f 1914 	mov.w	r9, r4, lsr #4
		rest = datalen % 16;
		if(rest) pages ++;
 8001a28:	f014 080f 	ands.w	r8, r4, #15
 8001a2c:	d001      	beq.n	8001a32 <EE_Write+0x42>
 8001a2e:	f109 0901 	add.w	r9, r9, #1
		for(i = 0; i < pages; i++){
 8001a32:	2500      	movs	r5, #0
	EE_StatusTypeDef retval = EE_ERR_NULL;
 8001a34:	f06f 0a01 	mvn.w	sl, #1
		for(i = 0; i < pages; i++){
 8001a38:	e037      	b.n	8001aaa <EE_Write+0xba>
		i2cStatus= HAL_I2C_Mem_Write(ee_iic, EE_ADDR + eeBlock, eeAddr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 8001a3a:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <EE_Write+0x11c>)
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	b2a3      	uxth	r3, r4
 8001a40:	3402      	adds	r4, #2
 8001a42:	00a4      	lsls	r4, r4, #2
 8001a44:	9402      	str	r4, [sp, #8]
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	9700      	str	r7, [sp, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	4642      	mov	r2, r8
 8001a4e:	f105 01a0 	add.w	r1, r5, #160	; 0xa0
 8001a52:	f006 fb2b 	bl	80080ac <HAL_I2C_Mem_Write>
		if(i2cStatus == HAL_OK){
 8001a56:	b130      	cbz	r0, 8001a66 <EE_Write+0x76>
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001a58:	2801      	cmp	r0, #1
 8001a5a:	d03d      	beq.n	8001ad8 <EE_Write+0xe8>
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 8001a5c:	2802      	cmp	r0, #2
 8001a5e:	d03e      	beq.n	8001ade <EE_Write+0xee>
	EE_StatusTypeDef retval = EE_ERR_NULL;
 8001a60:	f06f 0a01 	mvn.w	sl, #1
 8001a64:	e02d      	b.n	8001ac2 <EE_Write+0xd2>
			vTaskDelay(EE_BYTE_WRITE_TIME * (len + 2));
 8001a66:	4620      	mov	r0, r4
 8001a68:	f00a f926 	bl	800bcb8 <vTaskDelay>
			retval = EE_OK;
 8001a6c:	f04f 0a00 	mov.w	sl, #0
 8001a70:	e027      	b.n	8001ac2 <EE_Write+0xd2>
			if(i == pages - 1){
				bytelen = rest;
 8001a72:	4644      	mov	r4, r8
			}else{
				bytelen = 16;
			}
			i2cStatus = HAL_I2C_Mem_Write(ee_iic, EE_ADDR, addrCpy, 1, dataBuf, bytelen, EE_BYTE_WRITE_TIME * (bytelen + 2));
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <EE_Write+0x11c>)
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	1ca3      	adds	r3, r4, #2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	9401      	str	r4, [sp, #4]
 8001a80:	9700      	str	r7, [sp, #0]
 8001a82:	2301      	movs	r3, #1
 8001a84:	b2b2      	uxth	r2, r6
 8001a86:	21a0      	movs	r1, #160	; 0xa0
 8001a88:	f006 fb10 	bl	80080ac <HAL_I2C_Mem_Write>
			if(i2cStatus == HAL_OK){
 8001a8c:	b9a8      	cbnz	r0, 8001aba <EE_Write+0xca>
				dataBuf += bytelen;
 8001a8e:	4427      	add	r7, r4
				addrCpy += bytelen;
 8001a90:	4426      	add	r6, r4
				retval = EE_OK;
				while(HAL_I2C_IsDeviceReady(ee_iic, EE_ADDR, 10, 10) != HAL_OK);
 8001a92:	230a      	movs	r3, #10
 8001a94:	461a      	mov	r2, r3
 8001a96:	21a0      	movs	r1, #160	; 0xa0
 8001a98:	481c      	ldr	r0, [pc, #112]	; (8001b0c <EE_Write+0x11c>)
 8001a9a:	6800      	ldr	r0, [r0, #0]
 8001a9c:	f006 fd22 	bl	80084e4 <HAL_I2C_IsDeviceReady>
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	d1f6      	bne.n	8001a92 <EE_Write+0xa2>
		for(i = 0; i < pages; i++){
 8001aa4:	3501      	adds	r5, #1
				retval = EE_OK;
 8001aa6:	f04f 0a00 	mov.w	sl, #0
		for(i = 0; i < pages; i++){
 8001aaa:	454d      	cmp	r5, r9
 8001aac:	d209      	bcs.n	8001ac2 <EE_Write+0xd2>
			if(i == pages - 1){
 8001aae:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8001ab2:	42ab      	cmp	r3, r5
 8001ab4:	d0dd      	beq.n	8001a72 <EE_Write+0x82>
				bytelen = 16;
 8001ab6:	2410      	movs	r4, #16
 8001ab8:	e7dc      	b.n	8001a74 <EE_Write+0x84>
				//vTaskDelay((bytelen + 2) * EE_BYTE_WRITE_TIME);
			}else{
				if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001aba:	2801      	cmp	r0, #1
 8001abc:	d012      	beq.n	8001ae4 <EE_Write+0xf4>
				else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 8001abe:	2802      	cmp	r0, #2
 8001ac0:	d013      	beq.n	8001aea <EE_Write+0xfa>
				break;
			}
		}
	}
	xSemaphoreGive(I2CMutexHandle);
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480f      	ldr	r0, [pc, #60]	; (8001b08 <EE_Write+0x118>)
 8001aca:	6800      	ldr	r0, [r0, #0]
 8001acc:	f009 f9ea 	bl	800aea4 <xQueueGenericSend>
	return retval;
}
 8001ad0:	4650      	mov	r0, sl
 8001ad2:	b004      	add	sp, #16
 8001ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001ad8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8001adc:	e7f1      	b.n	8001ac2 <EE_Write+0xd2>
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 8001ade:	f06f 0a02 	mvn.w	sl, #2
 8001ae2:	e7ee      	b.n	8001ac2 <EE_Write+0xd2>
				if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001ae4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8001ae8:	e7eb      	b.n	8001ac2 <EE_Write+0xd2>
				else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 8001aea:	f06f 0a02 	mvn.w	sl, #2
 8001aee:	e7e8      	b.n	8001ac2 <EE_Write+0xd2>
	if(data == NULL || len <= 0 || len >= EE_SIZE) return retval;
 8001af0:	f06f 0a01 	mvn.w	sl, #1
 8001af4:	e7ec      	b.n	8001ad0 <EE_Write+0xe0>
 8001af6:	f06f 0a01 	mvn.w	sl, #1
 8001afa:	e7e9      	b.n	8001ad0 <EE_Write+0xe0>
 8001afc:	f06f 0a01 	mvn.w	sl, #1
 8001b00:	e7e6      	b.n	8001ad0 <EE_Write+0xe0>
		return EE_ERR_TIMEOUT;
 8001b02:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8001b06:	e7e3      	b.n	8001ad0 <EE_Write+0xe0>
 8001b08:	20004224 	.word	0x20004224
 8001b0c:	20003958 	.word	0x20003958

08001b10 <EE_Erease>:

EE_StatusTypeDef EE_Erease (void){
 8001b10:	b530      	push	{r4, r5, lr}
 8001b12:	b085      	sub	sp, #20
	uint32_t i;
	int32_t retval = 0;
	uint8_t blankData[16];
	memset(blankData, 255, 16);
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	9302      	str	r3, [sp, #8]
 8001b1e:	9303      	str	r3, [sp, #12]
	int32_t retval = 0;
 8001b20:	2500      	movs	r5, #0

	for(i = 0; i < EE_SIZE; i += 16){
 8001b22:	462c      	mov	r4, r5
 8001b24:	e006      	b.n	8001b34 <EE_Erease+0x24>
		retval |= EE_Write(blankData, i, 16);
 8001b26:	2210      	movs	r2, #16
 8001b28:	4621      	mov	r1, r4
 8001b2a:	4668      	mov	r0, sp
 8001b2c:	f7ff ff60 	bl	80019f0 <EE_Write>
 8001b30:	4305      	orrs	r5, r0
	for(i = 0; i < EE_SIZE; i += 16){
 8001b32:	3410      	adds	r4, #16
 8001b34:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001b38:	d3f5      	bcc.n	8001b26 <EE_Erease+0x16>
	}
	return retval;
}
 8001b3a:	b268      	sxtb	r0, r5
 8001b3c:	b005      	add	sp, #20
 8001b3e:	bd30      	pop	{r4, r5, pc}

08001b40 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001b40:	b530      	push	{r4, r5, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	4605      	mov	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001b46:	4c16      	ldr	r4, [pc, #88]	; (8001ba0 <WIZCHIP_READ+0x60>)
 8001b48:	68e3      	ldr	r3, [r4, #12]
 8001b4a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001b4c:	6963      	ldr	r3, [r4, #20]
 8001b4e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b52:	b9b3      	cbnz	r3, 8001b82 <WIZCHIP_READ+0x42>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001b54:	4c12      	ldr	r4, [pc, #72]	; (8001ba0 <WIZCHIP_READ+0x60>)
 8001b56:	6a23      	ldr	r3, [r4, #32]
 8001b58:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8001b5c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001b5e:	6a23      	ldr	r3, [r4, #32]
 8001b60:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8001b64:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001b66:	6a23      	ldr	r3, [r4, #32]
 8001b68:	b2e8      	uxtb	r0, r5
 8001b6a:	4798      	blx	r3
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001b6c:	4c0c      	ldr	r4, [pc, #48]	; (8001ba0 <WIZCHIP_READ+0x60>)
 8001b6e:	69e3      	ldr	r3, [r4, #28]
 8001b70:	4798      	blx	r3
 8001b72:	4605      	mov	r5, r0

   WIZCHIP.CS._deselect();
 8001b74:	69a3      	ldr	r3, [r4, #24]
 8001b76:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001b78:	6923      	ldr	r3, [r4, #16]
 8001b7a:	4798      	blx	r3
   return ret;
}
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	b003      	add	sp, #12
 8001b80:	bd30      	pop	{r4, r5, pc}
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001b82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0e5      	beq.n	8001b54 <WIZCHIP_READ+0x14>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001b88:	0c2a      	lsrs	r2, r5, #16
 8001b8a:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001b8e:	0a2a      	lsrs	r2, r5, #8
 8001b90:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001b94:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001b98:	2103      	movs	r1, #3
 8001b9a:	a801      	add	r0, sp, #4
 8001b9c:	4798      	blx	r3
 8001b9e:	e7e5      	b.n	8001b6c <WIZCHIP_READ+0x2c>
 8001ba0:	20002404 	.word	0x20002404

08001ba4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001ba4:	b570      	push	{r4, r5, r6, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	4604      	mov	r4, r0
 8001baa:	460e      	mov	r6, r1
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001bac:	4d16      	ldr	r5, [pc, #88]	; (8001c08 <WIZCHIP_WRITE+0x64>)
 8001bae:	68eb      	ldr	r3, [r5, #12]
 8001bb0:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001bb2:	696b      	ldr	r3, [r5, #20]
 8001bb4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001bb6:	f044 0404 	orr.w	r4, r4, #4

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001bba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001bbc:	b1a3      	cbz	r3, 8001be8 <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001bbe:	0c22      	lsrs	r2, r4, #16
 8001bc0:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001bc4:	0a22      	lsrs	r2, r4, #8
 8001bc6:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001bca:	f88d 4006 	strb.w	r4, [sp, #6]
		spi_data[3] = wb;
 8001bce:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	eb0d 0001 	add.w	r0, sp, r1
 8001bd8:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001bda:	4c0b      	ldr	r4, [pc, #44]	; (8001c08 <WIZCHIP_WRITE+0x64>)
 8001bdc:	69a3      	ldr	r3, [r4, #24]
 8001bde:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001be0:	6923      	ldr	r3, [r4, #16]
 8001be2:	4798      	blx	r3
}
 8001be4:	b002      	add	sp, #8
 8001be6:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001be8:	6a2b      	ldr	r3, [r5, #32]
 8001bea:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001bee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001bf0:	6a2b      	ldr	r3, [r5, #32]
 8001bf2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001bf6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001bf8:	6a2b      	ldr	r3, [r5, #32]
 8001bfa:	b2e0      	uxtb	r0, r4
 8001bfc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001bfe:	6a2b      	ldr	r3, [r5, #32]
 8001c00:	4630      	mov	r0, r6
 8001c02:	4798      	blx	r3
 8001c04:	e7e9      	b.n	8001bda <WIZCHIP_WRITE+0x36>
 8001c06:	bf00      	nop
 8001c08:	20002404 	.word	0x20002404

08001c0c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	4604      	mov	r4, r0
 8001c12:	460e      	mov	r6, r1
 8001c14:	4615      	mov	r5, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001c16:	4f1c      	ldr	r7, [pc, #112]	; (8001c88 <WIZCHIP_READ_BUF+0x7c>)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	b96b      	cbnz	r3, 8001c40 <WIZCHIP_READ_BUF+0x34>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001c24:	4f18      	ldr	r7, [pc, #96]	; (8001c88 <WIZCHIP_READ_BUF+0x7c>)
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001c2c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001c34:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	b2e0      	uxtb	r0, r4
 8001c3a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001c3c:	2400      	movs	r4, #0
 8001c3e:	e019      	b.n	8001c74 <WIZCHIP_READ_BUF+0x68>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0ee      	beq.n	8001c24 <WIZCHIP_READ_BUF+0x18>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001c46:	0c22      	lsrs	r2, r4, #16
 8001c48:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001c4c:	0a22      	lsrs	r2, r4, #8
 8001c4e:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001c52:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001c56:	2103      	movs	r1, #3
 8001c58:	a801      	add	r0, sp, #4
 8001c5a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <WIZCHIP_READ_BUF+0x7c>)
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	4629      	mov	r1, r5
 8001c62:	4630      	mov	r0, r6
 8001c64:	4798      	blx	r3
 8001c66:	e007      	b.n	8001c78 <WIZCHIP_READ_BUF+0x6c>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <WIZCHIP_READ_BUF+0x7c>)
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	4798      	blx	r3
 8001c6e:	5530      	strb	r0, [r6, r4]
		for(i = 0; i < len; i++)
 8001c70:	3401      	adds	r4, #1
 8001c72:	b2a4      	uxth	r4, r4
 8001c74:	42ac      	cmp	r4, r5
 8001c76:	d3f7      	bcc.n	8001c68 <WIZCHIP_READ_BUF+0x5c>
   }

   WIZCHIP.CS._deselect();
 8001c78:	4c03      	ldr	r4, [pc, #12]	; (8001c88 <WIZCHIP_READ_BUF+0x7c>)
 8001c7a:	69a3      	ldr	r3, [r4, #24]
 8001c7c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001c7e:	6923      	ldr	r3, [r4, #16]
 8001c80:	4798      	blx	r3
}
 8001c82:	b003      	add	sp, #12
 8001c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20002404 	.word	0x20002404

08001c8c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	4604      	mov	r4, r0
 8001c92:	460f      	mov	r7, r1
 8001c94:	4616      	mov	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001c96:	4d1b      	ldr	r5, [pc, #108]	; (8001d04 <WIZCHIP_WRITE_BUF+0x78>)
 8001c98:	68eb      	ldr	r3, [r5, #12]
 8001c9a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001c9c:	696b      	ldr	r3, [r5, #20]
 8001c9e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001ca0:	f044 0404 	orr.w	r4, r4, #4

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001ca4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001ca6:	b1b3      	cbz	r3, 8001cd6 <WIZCHIP_WRITE_BUF+0x4a>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001ca8:	0c22      	lsrs	r2, r4, #16
 8001caa:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001cae:	0a22      	lsrs	r2, r4, #8
 8001cb0:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001cb4:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001cb8:	2103      	movs	r1, #3
 8001cba:	a801      	add	r0, sp, #4
 8001cbc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <WIZCHIP_WRITE_BUF+0x78>)
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	4631      	mov	r1, r6
 8001cc4:	4638      	mov	r0, r7
 8001cc6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001cc8:	4c0e      	ldr	r4, [pc, #56]	; (8001d04 <WIZCHIP_WRITE_BUF+0x78>)
 8001cca:	69a3      	ldr	r3, [r4, #24]
 8001ccc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001cce:	6923      	ldr	r3, [r4, #16]
 8001cd0:	4798      	blx	r3
}
 8001cd2:	b003      	add	sp, #12
 8001cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001cd6:	6a2b      	ldr	r3, [r5, #32]
 8001cd8:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001cdc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001cde:	6a2b      	ldr	r3, [r5, #32]
 8001ce0:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001ce4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001ce6:	6a2b      	ldr	r3, [r5, #32]
 8001ce8:	b2e0      	uxtb	r0, r4
 8001cea:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001cec:	2400      	movs	r4, #0
 8001cee:	e005      	b.n	8001cfc <WIZCHIP_WRITE_BUF+0x70>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <WIZCHIP_WRITE_BUF+0x78>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	5d38      	ldrb	r0, [r7, r4]
 8001cf6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001cf8:	3401      	adds	r4, #1
 8001cfa:	b2a4      	uxth	r4, r4
 8001cfc:	42b4      	cmp	r4, r6
 8001cfe:	d3f7      	bcc.n	8001cf0 <WIZCHIP_WRITE_BUF+0x64>
 8001d00:	e7e2      	b.n	8001cc8 <WIZCHIP_WRITE_BUF+0x3c>
 8001d02:	bf00      	nop
 8001d04:	20002404 	.word	0x20002404

08001d08 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d0c:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 8001d0e:	2500      	movs	r5, #0
 8001d10:	e001      	b.n	8001d16 <getSn_TX_FSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
 8001d12:	42a5      	cmp	r5, r4
 8001d14:	d024      	beq.n	8001d60 <getSn_TX_FSR+0x58>
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001d16:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8001d1a:	f108 0801 	add.w	r8, r8, #1
 8001d1e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001d22:	f508 5600 	add.w	r6, r8, #8192	; 0x2000
 8001d26:	4630      	mov	r0, r6
 8001d28:	f7ff ff0a 	bl	8001b40 <WIZCHIP_READ>
 8001d2c:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001d2e:	0224      	lsls	r4, r4, #8
 8001d30:	b2a4      	uxth	r4, r4
 8001d32:	f508 5804 	add.w	r8, r8, #8448	; 0x2100
 8001d36:	4640      	mov	r0, r8
 8001d38:	f7ff ff02 	bl	8001b40 <WIZCHIP_READ>
 8001d3c:	fa14 f480 	uxtah	r4, r4, r0
 8001d40:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 8001d42:	2c00      	cmp	r4, #0
 8001d44:	d0e5      	beq.n	8001d12 <getSn_TX_FSR+0xa>
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001d46:	4630      	mov	r0, r6
 8001d48:	f7ff fefa 	bl	8001b40 <WIZCHIP_READ>
 8001d4c:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001d4e:	022d      	lsls	r5, r5, #8
 8001d50:	b2ad      	uxth	r5, r5
 8001d52:	4640      	mov	r0, r8
 8001d54:	f7ff fef4 	bl	8001b40 <WIZCHIP_READ>
 8001d58:	fa15 f580 	uxtah	r5, r5, r0
 8001d5c:	b2ad      	uxth	r5, r5
 8001d5e:	e7d8      	b.n	8001d12 <getSn_TX_FSR+0xa>
   return val;
}
 8001d60:	4628      	mov	r0, r5
 8001d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001d66 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d6a:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 8001d6c:	2500      	movs	r5, #0
 8001d6e:	e001      	b.n	8001d74 <getSn_RX_RSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
 8001d70:	42a5      	cmp	r5, r4
 8001d72:	d024      	beq.n	8001dbe <getSn_RX_RSR+0x58>
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001d74:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8001d78:	f108 0801 	add.w	r8, r8, #1
 8001d7c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001d80:	f508 5618 	add.w	r6, r8, #9728	; 0x2600
 8001d84:	4630      	mov	r0, r6
 8001d86:	f7ff fedb 	bl	8001b40 <WIZCHIP_READ>
 8001d8a:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001d8c:	0224      	lsls	r4, r4, #8
 8001d8e:	b2a4      	uxth	r4, r4
 8001d90:	f508 581c 	add.w	r8, r8, #9984	; 0x2700
 8001d94:	4640      	mov	r0, r8
 8001d96:	f7ff fed3 	bl	8001b40 <WIZCHIP_READ>
 8001d9a:	fa14 f480 	uxtah	r4, r4, r0
 8001d9e:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 8001da0:	2c00      	cmp	r4, #0
 8001da2:	d0e5      	beq.n	8001d70 <getSn_RX_RSR+0xa>
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001da4:	4630      	mov	r0, r6
 8001da6:	f7ff fecb 	bl	8001b40 <WIZCHIP_READ>
 8001daa:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001dac:	022d      	lsls	r5, r5, #8
 8001dae:	b2ad      	uxth	r5, r5
 8001db0:	4640      	mov	r0, r8
 8001db2:	f7ff fec5 	bl	8001b40 <WIZCHIP_READ>
 8001db6:	fa15 f580 	uxtah	r5, r5, r0
 8001dba:	b2ad      	uxth	r5, r5
 8001dbc:	e7d8      	b.n	8001d70 <getSn_RX_RSR+0xa>
   return val;
}
 8001dbe:	4628      	mov	r0, r5
 8001dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001dc4 <wiz_send_data>:
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 8001dc4:	b902      	cbnz	r2, 8001dc8 <wiz_send_data+0x4>
 8001dc6:	4770      	bx	lr
{
 8001dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dcc:	4615      	mov	r5, r2
 8001dce:	460f      	mov	r7, r1
   ptr = getSn_TX_WR(sn);
 8001dd0:	0084      	lsls	r4, r0, #2
 8001dd2:	f104 0901 	add.w	r9, r4, #1
 8001dd6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001dda:	f509 5810 	add.w	r8, r9, #9216	; 0x2400
 8001dde:	4640      	mov	r0, r8
 8001de0:	f7ff feae 	bl	8001b40 <WIZCHIP_READ>
 8001de4:	b286      	uxth	r6, r0
 8001de6:	0236      	lsls	r6, r6, #8
 8001de8:	b2b6      	uxth	r6, r6
 8001dea:	f509 5914 	add.w	r9, r9, #9472	; 0x2500
 8001dee:	4648      	mov	r0, r9
 8001df0:	f7ff fea6 	bl	8001b40 <WIZCHIP_READ>
 8001df4:	fa16 f680 	uxtah	r6, r6, r0
 8001df8:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001dfa:	1ca0      	adds	r0, r4, #2
 8001dfc:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001dfe:	462a      	mov	r2, r5
 8001e00:	4639      	mov	r1, r7
 8001e02:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8001e06:	f7ff ff41 	bl	8001c8c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001e0a:	4435      	add	r5, r6
 8001e0c:	b2ad      	uxth	r5, r5
   setSn_TX_WR(sn,ptr);
 8001e0e:	0a29      	lsrs	r1, r5, #8
 8001e10:	4640      	mov	r0, r8
 8001e12:	f7ff fec7 	bl	8001ba4 <WIZCHIP_WRITE>
 8001e16:	b2e9      	uxtb	r1, r5
 8001e18:	4648      	mov	r0, r9
 8001e1a:	f7ff fec3 	bl	8001ba4 <WIZCHIP_WRITE>
}
 8001e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001e22 <wiz_recv_data>:
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 8001e22:	b902      	cbnz	r2, 8001e26 <wiz_recv_data+0x4>
 8001e24:	4770      	bx	lr
{
 8001e26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e2a:	4615      	mov	r5, r2
 8001e2c:	460f      	mov	r7, r1
   ptr = getSn_RX_RD(sn);
 8001e2e:	0084      	lsls	r4, r0, #2
 8001e30:	f104 0901 	add.w	r9, r4, #1
 8001e34:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001e38:	f509 5820 	add.w	r8, r9, #10240	; 0x2800
 8001e3c:	4640      	mov	r0, r8
 8001e3e:	f7ff fe7f 	bl	8001b40 <WIZCHIP_READ>
 8001e42:	b286      	uxth	r6, r0
 8001e44:	0236      	lsls	r6, r6, #8
 8001e46:	b2b6      	uxth	r6, r6
 8001e48:	f509 5924 	add.w	r9, r9, #10496	; 0x2900
 8001e4c:	4648      	mov	r0, r9
 8001e4e:	f7ff fe77 	bl	8001b40 <WIZCHIP_READ>
 8001e52:	fa16 f680 	uxtah	r6, r6, r0
 8001e56:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8001e58:	1ce0      	adds	r0, r4, #3
 8001e5a:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001e5c:	462a      	mov	r2, r5
 8001e5e:	4639      	mov	r1, r7
 8001e60:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8001e64:	f7ff fed2 	bl	8001c0c <WIZCHIP_READ_BUF>
   ptr += len;
 8001e68:	4435      	add	r5, r6
 8001e6a:	b2ad      	uxth	r5, r5
   
   setSn_RX_RD(sn,ptr);
 8001e6c:	0a29      	lsrs	r1, r5, #8
 8001e6e:	4640      	mov	r0, r8
 8001e70:	f7ff fe98 	bl	8001ba4 <WIZCHIP_WRITE>
 8001e74:	b2e9      	uxtb	r1, r5
 8001e76:	4648      	mov	r0, r9
 8001e78:	f7ff fe94 	bl	8001ba4 <WIZCHIP_WRITE>
}
 8001e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001e80 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8001e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e84:	4688      	mov	r8, r1
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
 8001e86:	0086      	lsls	r6, r0, #2
 8001e88:	3601      	adds	r6, #1
 8001e8a:	00f6      	lsls	r6, r6, #3
 8001e8c:	f506 5720 	add.w	r7, r6, #10240	; 0x2800
 8001e90:	4638      	mov	r0, r7
 8001e92:	f7ff fe55 	bl	8001b40 <WIZCHIP_READ>
 8001e96:	b285      	uxth	r5, r0
 8001e98:	022d      	lsls	r5, r5, #8
 8001e9a:	b2ad      	uxth	r5, r5
 8001e9c:	f506 5624 	add.w	r6, r6, #10496	; 0x2900
 8001ea0:	4630      	mov	r0, r6
 8001ea2:	f7ff fe4d 	bl	8001b40 <WIZCHIP_READ>
 8001ea6:	fa15 f480 	uxtah	r4, r5, r0
   ptr += len;
 8001eaa:	fa18 f484 	uxtah	r4, r8, r4
 8001eae:	b2a4      	uxth	r4, r4
   setSn_RX_RD(sn,ptr);
 8001eb0:	0a21      	lsrs	r1, r4, #8
 8001eb2:	4638      	mov	r0, r7
 8001eb4:	f7ff fe76 	bl	8001ba4 <WIZCHIP_WRITE>
 8001eb8:	b2e1      	uxtb	r1, r4
 8001eba:	4630      	mov	r0, r6
 8001ebc:	f7ff fe72 	bl	8001ba4 <WIZCHIP_WRITE>
}
 8001ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ec4 <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 8001ec4:	2808      	cmp	r0, #8
 8001ec6:	d82e      	bhi.n	8001f26 <close+0x62>
{
 8001ec8:	b570      	push	{r4, r5, r6, lr}
 8001eca:	4606      	mov	r6, r0
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001ecc:	0084      	lsls	r4, r0, #2
 8001ece:	3401      	adds	r4, #1
 8001ed0:	00e4      	lsls	r4, r4, #3
 8001ed2:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8001ed6:	2110      	movs	r1, #16
 8001ed8:	4628      	mov	r0, r5
 8001eda:	f7ff fe63 	bl	8001ba4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001ede:	4628      	mov	r0, r5
 8001ee0:	f7ff fe2e 	bl	8001b40 <WIZCHIP_READ>
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	d1fa      	bne.n	8001ede <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001ee8:	211f      	movs	r1, #31
 8001eea:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8001eee:	f7ff fe59 	bl	8001ba4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	40b3      	lsls	r3, r6
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	490c      	ldr	r1, [pc, #48]	; (8001f2c <close+0x68>)
 8001efc:	880a      	ldrh	r2, [r1, #0]
 8001efe:	401a      	ands	r2, r3
 8001f00:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <close+0x6c>)
 8001f04:	8811      	ldrh	r1, [r2, #0]
 8001f06:	400b      	ands	r3, r1
 8001f08:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <close+0x70>)
 8001f0e:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
	sock_pack_info[sn] = 0;
 8001f12:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <close+0x74>)
 8001f14:	5593      	strb	r3, [r2, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001f16:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8001f1a:	f7ff fe11 	bl	8001b40 <WIZCHIP_READ>
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	d1f9      	bne.n	8001f16 <close+0x52>
	return SOCK_OK;
 8001f22:	2001      	movs	r0, #1
}
 8001f24:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 8001f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001f2a:	4770      	bx	lr
 8001f2c:	2000256c 	.word	0x2000256c
 8001f30:	2000256e 	.word	0x2000256e
 8001f34:	20002578 	.word	0x20002578
 8001f38:	20002570 	.word	0x20002570

08001f3c <socket>:
	CHECK_SOCKNUM();
 8001f3c:	2808      	cmp	r0, #8
 8001f3e:	f200 8093 	bhi.w	8002068 <socket+0x12c>
{
 8001f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	4605      	mov	r5, r0
 8001f4a:	460f      	mov	r7, r1
 8001f4c:	4690      	mov	r8, r2
 8001f4e:	461e      	mov	r6, r3
	switch(protocol)
 8001f50:	2901      	cmp	r1, #1
 8001f52:	d062      	beq.n	800201a <socket+0xde>
 8001f54:	2900      	cmp	r1, #0
 8001f56:	f000 808a 	beq.w	800206e <socket+0x132>
 8001f5a:	2904      	cmp	r1, #4
 8001f5c:	f200 8087 	bhi.w	800206e <socket+0x132>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001f60:	f016 0f04 	tst.w	r6, #4
 8001f64:	f040 8086 	bne.w	8002074 <socket+0x138>
	if(flag != 0)
 8001f68:	b11e      	cbz	r6, 8001f72 <socket+0x36>
   	switch(protocol)
 8001f6a:	2f01      	cmp	r7, #1
 8001f6c:	d062      	beq.n	8002034 <socket+0xf8>
 8001f6e:	2f02      	cmp	r7, #2
 8001f70:	d066      	beq.n	8002040 <socket+0x104>
	close(sn);
 8001f72:	4628      	mov	r0, r5
 8001f74:	f7ff ffa6 	bl	8001ec4 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001f78:	00ac      	lsls	r4, r5, #2
 8001f7a:	3401      	adds	r4, #1
 8001f7c:	00e4      	lsls	r4, r4, #3
 8001f7e:	f026 010f 	bic.w	r1, r6, #15
 8001f82:	b249      	sxtb	r1, r1
 8001f84:	4339      	orrs	r1, r7
 8001f86:	b2c9      	uxtb	r1, r1
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7ff fe0b 	bl	8001ba4 <WIZCHIP_WRITE>
	if(!port)
 8001f8e:	f1b8 0f00 	cmp.w	r8, #0
 8001f92:	d10a      	bne.n	8001faa <socket+0x6e>
	   port = sock_any_port++;
 8001f94:	4a3a      	ldr	r2, [pc, #232]	; (8002080 <socket+0x144>)
 8001f96:	f8b2 8000 	ldrh.w	r8, [r2]
 8001f9a:	f108 0301 	add.w	r3, r8, #1
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001fa2:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d059      	beq.n	800205e <socket+0x122>
   setSn_PORT(sn,port);	
 8001faa:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8001fae:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8001fb2:	f7ff fdf7 	bl	8001ba4 <WIZCHIP_WRITE>
 8001fb6:	fa5f f188 	uxtb.w	r1, r8
 8001fba:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 8001fbe:	f7ff fdf1 	bl	8001ba4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001fc2:	f504 7780 	add.w	r7, r4, #256	; 0x100
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	4638      	mov	r0, r7
 8001fca:	f7ff fdeb 	bl	8001ba4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001fce:	4638      	mov	r0, r7
 8001fd0:	f7ff fdb6 	bl	8001b40 <WIZCHIP_READ>
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d1fa      	bne.n	8001fce <socket+0x92>
   sock_io_mode &= ~(1 <<sn);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	40aa      	lsls	r2, r5
 8001fdc:	43d2      	mvns	r2, r2
 8001fde:	b212      	sxth	r2, r2
 8001fe0:	4928      	ldr	r1, [pc, #160]	; (8002084 <socket+0x148>)
 8001fe2:	880b      	ldrh	r3, [r1, #0]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001fe8:	f006 0601 	and.w	r6, r6, #1
 8001fec:	40ae      	lsls	r6, r5
 8001fee:	431e      	orrs	r6, r3
 8001ff0:	800e      	strh	r6, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8001ff2:	4b25      	ldr	r3, [pc, #148]	; (8002088 <socket+0x14c>)
 8001ff4:	8819      	ldrh	r1, [r3, #0]
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	4a23      	ldr	r2, [pc, #140]	; (800208c <socket+0x150>)
 8001ffe:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 8002002:	4a23      	ldr	r2, [pc, #140]	; (8002090 <socket+0x154>)
 8002004:	5553      	strb	r3, [r2, r5]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002006:	f504 7040 	add.w	r0, r4, #768	; 0x300
 800200a:	f7ff fd99 	bl	8001b40 <WIZCHIP_READ>
 800200e:	2800      	cmp	r0, #0
 8002010:	d0f9      	beq.n	8002006 <socket+0xca>
   return (int8_t)sn;
 8002012:	b268      	sxtb	r0, r5
}	   
 8002014:	b002      	add	sp, #8
 8002016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            getSIPR((uint8_t*)&taddr);
 800201a:	2204      	movs	r2, #4
 800201c:	eb0d 0102 	add.w	r1, sp, r2
 8002020:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002024:	f7ff fdf2 	bl	8001c0c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002028:	9b01      	ldr	r3, [sp, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d198      	bne.n	8001f60 <socket+0x24>
 800202e:	f06f 0002 	mvn.w	r0, #2
 8002032:	e7ef      	b.n	8002014 <socket+0xd8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002034:	f016 0f21 	tst.w	r6, #33	; 0x21
 8002038:	d19b      	bne.n	8001f72 <socket+0x36>
 800203a:	f06f 0005 	mvn.w	r0, #5
 800203e:	e7e9      	b.n	8002014 <socket+0xd8>
   	      if(flag & SF_IGMP_VER2)
 8002040:	f016 0f20 	tst.w	r6, #32
 8002044:	d002      	beq.n	800204c <socket+0x110>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002046:	f016 0f80 	tst.w	r6, #128	; 0x80
 800204a:	d016      	beq.n	800207a <socket+0x13e>
      	      if(flag & SF_UNI_BLOCK)
 800204c:	f016 0f10 	tst.w	r6, #16
 8002050:	d08f      	beq.n	8001f72 <socket+0x36>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002052:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002056:	d18c      	bne.n	8001f72 <socket+0x36>
 8002058:	f06f 0005 	mvn.w	r0, #5
 800205c:	e7da      	b.n	8002014 <socket+0xd8>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <socket+0x144>)
 8002060:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002064:	801a      	strh	r2, [r3, #0]
 8002066:	e7a0      	b.n	8001faa <socket+0x6e>
	CHECK_SOCKNUM();
 8002068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}	   
 800206c:	4770      	bx	lr
         return SOCKERR_SOCKMODE;
 800206e:	f06f 0004 	mvn.w	r0, #4
 8002072:	e7cf      	b.n	8002014 <socket+0xd8>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002074:	f06f 0005 	mvn.w	r0, #5
 8002078:	e7cc      	b.n	8002014 <socket+0xd8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800207a:	f06f 0005 	mvn.w	r0, #5
 800207e:	e7c9      	b.n	8002014 <socket+0xd8>
 8002080:	20002400 	.word	0x20002400
 8002084:	2000256c 	.word	0x2000256c
 8002088:	2000256e 	.word	0x2000256e
 800208c:	20002578 	.word	0x20002578
 8002090:	20002570 	.word	0x20002570

08002094 <listen>:

int8_t listen(uint8_t sn)
{
	CHECK_SOCKNUM();
 8002094:	2808      	cmp	r0, #8
 8002096:	d82a      	bhi.n	80020ee <listen+0x5a>
{
 8002098:	b570      	push	{r4, r5, r6, lr}
 800209a:	4605      	mov	r5, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 800209c:	0084      	lsls	r4, r0, #2
 800209e:	3401      	adds	r4, #1
 80020a0:	00e4      	lsls	r4, r4, #3
 80020a2:	4620      	mov	r0, r4
 80020a4:	f7ff fd4c 	bl	8001b40 <WIZCHIP_READ>
 80020a8:	f000 000f 	and.w	r0, r0, #15
 80020ac:	2801      	cmp	r0, #1
 80020ae:	d121      	bne.n	80020f4 <listen+0x60>
	CHECK_SOCKINIT();
 80020b0:	f504 7640 	add.w	r6, r4, #768	; 0x300
 80020b4:	4630      	mov	r0, r6
 80020b6:	f7ff fd43 	bl	8001b40 <WIZCHIP_READ>
 80020ba:	2813      	cmp	r0, #19
 80020bc:	d11d      	bne.n	80020fa <listen+0x66>
	setSn_CR(sn,Sn_CR_LISTEN);
 80020be:	f504 7480 	add.w	r4, r4, #256	; 0x100
 80020c2:	2102      	movs	r1, #2
 80020c4:	4620      	mov	r0, r4
 80020c6:	f7ff fd6d 	bl	8001ba4 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80020ca:	4620      	mov	r0, r4
 80020cc:	f7ff fd38 	bl	8001b40 <WIZCHIP_READ>
 80020d0:	2800      	cmp	r0, #0
 80020d2:	d1fa      	bne.n	80020ca <listen+0x36>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80020d4:	4630      	mov	r0, r6
 80020d6:	f7ff fd33 	bl	8001b40 <WIZCHIP_READ>
 80020da:	2814      	cmp	r0, #20
 80020dc:	d101      	bne.n	80020e2 <listen+0x4e>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 80020de:	2001      	movs	r0, #1
}
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
         close(sn);
 80020e2:	4628      	mov	r0, r5
 80020e4:	f7ff feee 	bl	8001ec4 <close>
         return SOCKERR_SOCKCLOSED;
 80020e8:	f06f 0003 	mvn.w	r0, #3
 80020ec:	e7f8      	b.n	80020e0 <listen+0x4c>
	CHECK_SOCKNUM();
 80020ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80020f2:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 80020f4:	f06f 0004 	mvn.w	r0, #4
 80020f8:	e7f2      	b.n	80020e0 <listen+0x4c>
	CHECK_SOCKINIT();
 80020fa:	f06f 0002 	mvn.w	r0, #2
 80020fe:	e7ef      	b.n	80020e0 <listen+0x4c>

08002100 <disconnect>:
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
 8002100:	2808      	cmp	r0, #8
 8002102:	d838      	bhi.n	8002176 <disconnect+0x76>
{
 8002104:	b570      	push	{r4, r5, r6, lr}
 8002106:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002108:	0084      	lsls	r4, r0, #2
 800210a:	3401      	adds	r4, #1
 800210c:	00e4      	lsls	r4, r4, #3
 800210e:	4620      	mov	r0, r4
 8002110:	f7ff fd16 	bl	8001b40 <WIZCHIP_READ>
 8002114:	f000 000f 	and.w	r0, r0, #15
 8002118:	2801      	cmp	r0, #1
 800211a:	d12f      	bne.n	800217c <disconnect+0x7c>
	setSn_CR(sn,Sn_CR_DISCON);
 800211c:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8002120:	2108      	movs	r1, #8
 8002122:	4628      	mov	r0, r5
 8002124:	f7ff fd3e 	bl	8001ba4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002128:	4628      	mov	r0, r5
 800212a:	f7ff fd09 	bl	8001b40 <WIZCHIP_READ>
 800212e:	2800      	cmp	r0, #0
 8002130:	d1fa      	bne.n	8002128 <disconnect+0x28>
	sock_is_sending &= ~(1<<sn);
 8002132:	2301      	movs	r3, #1
 8002134:	fa03 f206 	lsl.w	r2, r3, r6
 8002138:	4913      	ldr	r1, [pc, #76]	; (8002188 <disconnect+0x88>)
 800213a:	880b      	ldrh	r3, [r1, #0]
 800213c:	ea23 0302 	bic.w	r3, r3, r2
 8002140:	800b      	strh	r3, [r1, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <disconnect+0x8c>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	4133      	asrs	r3, r6
 8002148:	f013 0f01 	tst.w	r3, #1
 800214c:	d119      	bne.n	8002182 <disconnect+0x82>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800214e:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8002152:	f7ff fcf5 	bl	8001b40 <WIZCHIP_READ>
 8002156:	b160      	cbz	r0, 8002172 <disconnect+0x72>
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002158:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800215c:	f7ff fcf0 	bl	8001b40 <WIZCHIP_READ>
 8002160:	f010 0f08 	tst.w	r0, #8
 8002164:	d0f3      	beq.n	800214e <disconnect+0x4e>
	   {
	      close(sn);
 8002166:	4630      	mov	r0, r6
 8002168:	f7ff feac 	bl	8001ec4 <close>
	      return SOCKERR_TIMEOUT;
 800216c:	f06f 000c 	mvn.w	r0, #12
 8002170:	e008      	b.n	8002184 <disconnect+0x84>
	   }
	}
	return SOCK_OK;
 8002172:	2001      	movs	r0, #1
 8002174:	e006      	b.n	8002184 <disconnect+0x84>
   CHECK_SOCKNUM();
 8002176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800217a:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 800217c:	f06f 0004 	mvn.w	r0, #4
 8002180:	e000      	b.n	8002184 <disconnect+0x84>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002182:	2000      	movs	r0, #0
}
 8002184:	bd70      	pop	{r4, r5, r6, pc}
 8002186:	bf00      	nop
 8002188:	2000256e 	.word	0x2000256e
 800218c:	2000256c 	.word	0x2000256c

08002190 <send>:
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
 8002190:	2808      	cmp	r0, #8
 8002192:	f200 8083 	bhi.w	800229c <send+0x10c>
{
 8002196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800219a:	4615      	mov	r5, r2
 800219c:	468a      	mov	sl, r1
 800219e:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 80021a0:	4681      	mov	r9, r0
 80021a2:	0087      	lsls	r7, r0, #2
 80021a4:	3701      	adds	r7, #1
 80021a6:	00ff      	lsls	r7, r7, #3
 80021a8:	4638      	mov	r0, r7
 80021aa:	f7ff fcc9 	bl	8001b40 <WIZCHIP_READ>
 80021ae:	f000 000f 	and.w	r0, r0, #15
 80021b2:	2801      	cmp	r0, #1
 80021b4:	d175      	bne.n	80022a2 <send+0x112>
   CHECK_SOCKDATA();
 80021b6:	2d00      	cmp	r5, #0
 80021b8:	d076      	beq.n	80022a8 <send+0x118>
   tmp = getSn_SR(sn);
 80021ba:	f507 7840 	add.w	r8, r7, #768	; 0x300
 80021be:	4640      	mov	r0, r8
 80021c0:	f7ff fcbe 	bl	8001b40 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80021c4:	2817      	cmp	r0, #23
 80021c6:	d001      	beq.n	80021cc <send+0x3c>
 80021c8:	281c      	cmp	r0, #28
 80021ca:	d170      	bne.n	80022ae <send+0x11e>
   if( sock_is_sending & (1<<sn) )
 80021cc:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <send+0x124>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	4133      	asrs	r3, r6
 80021d2:	f013 0f01 	tst.w	r3, #1
 80021d6:	d019      	beq.n	800220c <send+0x7c>
   {
      tmp = getSn_IR(sn);
 80021d8:	f507 7400 	add.w	r4, r7, #512	; 0x200
 80021dc:	4620      	mov	r0, r4
 80021de:	f7ff fcaf 	bl	8001b40 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 80021e2:	f010 0f10 	tst.w	r0, #16
 80021e6:	d105      	bne.n	80021f4 <send+0x64>
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80021e8:	f010 0f08 	tst.w	r0, #8
 80021ec:	d119      	bne.n	8002222 <send+0x92>
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
 80021ee:	2000      	movs	r0, #0
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 80021f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
 80021f4:	2110      	movs	r1, #16
 80021f6:	4620      	mov	r0, r4
 80021f8:	f7ff fcd4 	bl	8001ba4 <WIZCHIP_WRITE>
         sock_is_sending &= ~(1<<sn);         
 80021fc:	2301      	movs	r3, #1
 80021fe:	fa03 f206 	lsl.w	r2, r3, r6
 8002202:	492c      	ldr	r1, [pc, #176]	; (80022b4 <send+0x124>)
 8002204:	880b      	ldrh	r3, [r1, #0]
 8002206:	ea23 0302 	bic.w	r3, r3, r2
 800220a:	800b      	strh	r3, [r1, #0]
   freesize = getSn_TxMAX(sn);
 800220c:	f507 50f8 	add.w	r0, r7, #7936	; 0x1f00
 8002210:	f7ff fc96 	bl	8001b40 <WIZCHIP_READ>
 8002214:	b284      	uxth	r4, r0
 8002216:	02a4      	lsls	r4, r4, #10
 8002218:	b2a4      	uxth	r4, r4
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800221a:	42a5      	cmp	r5, r4
 800221c:	d80f      	bhi.n	800223e <send+0xae>
 800221e:	462c      	mov	r4, r5
 8002220:	e00d      	b.n	800223e <send+0xae>
         close(sn);
 8002222:	4630      	mov	r0, r6
 8002224:	f7ff fe4e 	bl	8001ec4 <close>
         return SOCKERR_TIMEOUT;
 8002228:	f06f 000c 	mvn.w	r0, #12
 800222c:	e7e0      	b.n	80021f0 <send+0x60>
         close(sn);
 800222e:	4630      	mov	r0, r6
 8002230:	f7ff fe48 	bl	8001ec4 <close>
         return SOCKERR_SOCKSTATUS;
 8002234:	f06f 0006 	mvn.w	r0, #6
 8002238:	e7da      	b.n	80021f0 <send+0x60>
      if(len <= freesize) break;
 800223a:	42a5      	cmp	r5, r4
 800223c:	d215      	bcs.n	800226a <send+0xda>
      freesize = getSn_TX_FSR(sn);
 800223e:	4630      	mov	r0, r6
 8002240:	f7ff fd62 	bl	8001d08 <getSn_TX_FSR>
 8002244:	4605      	mov	r5, r0
      tmp = getSn_SR(sn);
 8002246:	4640      	mov	r0, r8
 8002248:	f7ff fc7a 	bl	8001b40 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800224c:	2817      	cmp	r0, #23
 800224e:	d001      	beq.n	8002254 <send+0xc4>
 8002250:	281c      	cmp	r0, #28
 8002252:	d1ec      	bne.n	800222e <send+0x9e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002254:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <send+0x128>)
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	fa43 f309 	asr.w	r3, r3, r9
 800225c:	f013 0f01 	tst.w	r3, #1
 8002260:	d0eb      	beq.n	800223a <send+0xaa>
 8002262:	42a5      	cmp	r5, r4
 8002264:	d2e9      	bcs.n	800223a <send+0xaa>
 8002266:	2000      	movs	r0, #0
 8002268:	e7c2      	b.n	80021f0 <send+0x60>
   wiz_send_data(sn, buf, len);
 800226a:	4622      	mov	r2, r4
 800226c:	4651      	mov	r1, sl
 800226e:	4630      	mov	r0, r6
 8002270:	f7ff fda8 	bl	8001dc4 <wiz_send_data>
   setSn_CR(sn,Sn_CR_SEND);
 8002274:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002278:	2120      	movs	r1, #32
 800227a:	4638      	mov	r0, r7
 800227c:	f7ff fc92 	bl	8001ba4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002280:	4638      	mov	r0, r7
 8002282:	f7ff fc5d 	bl	8001b40 <WIZCHIP_READ>
 8002286:	2800      	cmp	r0, #0
 8002288:	d1fa      	bne.n	8002280 <send+0xf0>
   sock_is_sending |= (1 << sn);
 800228a:	2301      	movs	r3, #1
 800228c:	fa03 f606 	lsl.w	r6, r3, r6
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <send+0x124>)
 8002292:	881a      	ldrh	r2, [r3, #0]
 8002294:	4316      	orrs	r6, r2
 8002296:	801e      	strh	r6, [r3, #0]
   return (int32_t)len;
 8002298:	4620      	mov	r0, r4
 800229a:	e7a9      	b.n	80021f0 <send+0x60>
   CHECK_SOCKNUM();
 800229c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80022a0:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 80022a2:	f06f 0004 	mvn.w	r0, #4
 80022a6:	e7a3      	b.n	80021f0 <send+0x60>
   CHECK_SOCKDATA();
 80022a8:	f06f 000d 	mvn.w	r0, #13
 80022ac:	e7a0      	b.n	80021f0 <send+0x60>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80022ae:	f06f 0006 	mvn.w	r0, #6
 80022b2:	e79d      	b.n	80021f0 <send+0x60>
 80022b4:	2000256e 	.word	0x2000256e
 80022b8:	2000256c 	.word	0x2000256c

080022bc <ClrSiS>:

void ClrSiS (uint8_t sn){
	sock_is_sending &= ~(1 << sn);
 80022bc:	2301      	movs	r3, #1
 80022be:	fa03 f000 	lsl.w	r0, r3, r0
 80022c2:	4a03      	ldr	r2, [pc, #12]	; (80022d0 <ClrSiS+0x14>)
 80022c4:	8813      	ldrh	r3, [r2, #0]
 80022c6:	ea23 0000 	bic.w	r0, r3, r0
 80022ca:	8010      	strh	r0, [r2, #0]
}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	2000256e 	.word	0x2000256e

080022d4 <recv>:
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80022d4:	2808      	cmp	r0, #8
 80022d6:	d864      	bhi.n	80023a2 <recv+0xce>
{
 80022d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022dc:	4614      	mov	r4, r2
 80022de:	4689      	mov	r9, r1
 80022e0:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 80022e2:	4607      	mov	r7, r0
 80022e4:	0085      	lsls	r5, r0, #2
 80022e6:	3501      	adds	r5, #1
 80022e8:	00ed      	lsls	r5, r5, #3
 80022ea:	4628      	mov	r0, r5
 80022ec:	f7ff fc28 	bl	8001b40 <WIZCHIP_READ>
 80022f0:	f000 000f 	and.w	r0, r0, #15
 80022f4:	2801      	cmp	r0, #1
 80022f6:	d157      	bne.n	80023a8 <recv+0xd4>
   CHECK_SOCKDATA();
 80022f8:	2c00      	cmp	r4, #0
 80022fa:	d058      	beq.n	80023ae <recv+0xda>
   
   recvsize = getSn_RxMAX(sn);
 80022fc:	f505 50f0 	add.w	r0, r5, #7680	; 0x1e00
 8002300:	f7ff fc1e 	bl	8001b40 <WIZCHIP_READ>
 8002304:	fa1f f880 	uxth.w	r8, r0
 8002308:	ea4f 2888 	mov.w	r8, r8, lsl #10
 800230c:	fa1f f888 	uxth.w	r8, r8
   if(recvsize < len) len = recvsize;
 8002310:	4544      	cmp	r4, r8
 8002312:	d80e      	bhi.n	8002332 <recv+0x5e>
 8002314:	46a0      	mov	r8, r4
 8002316:	e00c      	b.n	8002332 <recv+0x5e>
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
               {
                  close(sn);
 8002318:	4630      	mov	r0, r6
 800231a:	f7ff fdd3 	bl	8001ec4 <close>
                  return SOCKERR_SOCKSTATUS;
 800231e:	f06f 0006 	mvn.w	r0, #6
 8002322:	e03c      	b.n	800239e <recv+0xca>
               }
            }
            else
            {
               close(sn);
 8002324:	4630      	mov	r0, r6
 8002326:	f7ff fdcd 	bl	8001ec4 <close>
               return SOCKERR_SOCKSTATUS;
 800232a:	f06f 0006 	mvn.w	r0, #6
 800232e:	e036      	b.n	800239e <recv+0xca>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
         if(recvsize != 0) break;
 8002330:	bb0c      	cbnz	r4, 8002376 <recv+0xa2>
         recvsize = getSn_RX_RSR(sn);
 8002332:	4630      	mov	r0, r6
 8002334:	f7ff fd17 	bl	8001d66 <getSn_RX_RSR>
 8002338:	4604      	mov	r4, r0
         tmp = getSn_SR(sn);
 800233a:	f505 7040 	add.w	r0, r5, #768	; 0x300
 800233e:	f7ff fbff 	bl	8001b40 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
 8002342:	2817      	cmp	r0, #23
 8002344:	d00d      	beq.n	8002362 <recv+0x8e>
            if(tmp == SOCK_CLOSE_WAIT)
 8002346:	281c      	cmp	r0, #28
 8002348:	d1ec      	bne.n	8002324 <recv+0x50>
               if(recvsize != 0) break;
 800234a:	b9a4      	cbnz	r4, 8002376 <recv+0xa2>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800234c:	4630      	mov	r0, r6
 800234e:	f7ff fcdb 	bl	8001d08 <getSn_TX_FSR>
 8002352:	4682      	mov	sl, r0
 8002354:	f505 50f8 	add.w	r0, r5, #7936	; 0x1f00
 8002358:	f7ff fbf2 	bl	8001b40 <WIZCHIP_READ>
 800235c:	ebba 2f80 	cmp.w	sl, r0, lsl #10
 8002360:	d0da      	beq.n	8002318 <recv+0x44>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <recv+0xe0>)
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	413b      	asrs	r3, r7
 8002368:	f013 0f01 	tst.w	r3, #1
 800236c:	d0e0      	beq.n	8002330 <recv+0x5c>
 800236e:	2c00      	cmp	r4, #0
 8002370:	d1de      	bne.n	8002330 <recv+0x5c>
 8002372:	2000      	movs	r0, #0
 8002374:	e013      	b.n	800239e <recv+0xca>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002376:	4544      	cmp	r4, r8
 8002378:	d300      	bcc.n	800237c <recv+0xa8>
 800237a:	4644      	mov	r4, r8
   wiz_recv_data(sn, buf, len);
 800237c:	4622      	mov	r2, r4
 800237e:	4649      	mov	r1, r9
 8002380:	4630      	mov	r0, r6
 8002382:	f7ff fd4e 	bl	8001e22 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8002386:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800238a:	2140      	movs	r1, #64	; 0x40
 800238c:	4628      	mov	r0, r5
 800238e:	f7ff fc09 	bl	8001ba4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002392:	4628      	mov	r0, r5
 8002394:	f7ff fbd4 	bl	8001b40 <WIZCHIP_READ>
 8002398:	2800      	cmp	r0, #0
 800239a:	d1fa      	bne.n	8002392 <recv+0xbe>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800239c:	4620      	mov	r0, r4
}
 800239e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   CHECK_SOCKNUM();
 80023a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80023a6:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 80023a8:	f06f 0004 	mvn.w	r0, #4
 80023ac:	e7f7      	b.n	800239e <recv+0xca>
   CHECK_SOCKDATA();
 80023ae:	f06f 000d 	mvn.w	r0, #13
 80023b2:	e7f4      	b.n	800239e <recv+0xca>
 80023b4:	2000256c 	.word	0x2000256c

080023b8 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80023b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023bc:	f8bd b028 	ldrh.w	fp, [sp, #40]	; 0x28
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
 80023c0:	2808      	cmp	r0, #8
 80023c2:	f200 8097 	bhi.w	80024f4 <sendto+0x13c>
 80023c6:	461c      	mov	r4, r3
 80023c8:	4615      	mov	r5, r2
 80023ca:	468a      	mov	sl, r1
 80023cc:	4607      	mov	r7, r0
   switch(getSn_MR(sn) & 0x0F)
 80023ce:	4681      	mov	r9, r0
 80023d0:	0086      	lsls	r6, r0, #2
 80023d2:	3601      	adds	r6, #1
 80023d4:	00f6      	lsls	r6, r6, #3
 80023d6:	4630      	mov	r0, r6
 80023d8:	f7ff fbb2 	bl	8001b40 <WIZCHIP_READ>
 80023dc:	f000 000f 	and.w	r0, r0, #15
 80023e0:	3802      	subs	r0, #2
 80023e2:	2802      	cmp	r0, #2
 80023e4:	f200 8089 	bhi.w	80024fa <sendto+0x142>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 80023e8:	2d00      	cmp	r5, #0
 80023ea:	f000 8089 	beq.w	8002500 <sendto+0x148>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80023ee:	7823      	ldrb	r3, [r4, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80023f0:	7862      	ldrb	r2, [r4, #1]
 80023f2:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80023f6:	78a3      	ldrb	r3, [r4, #2]
 80023f8:	eb03 2202 	add.w	r2, r3, r2, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80023fc:	78e3      	ldrb	r3, [r4, #3]
 80023fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8002402:	b383      	cbz	r3, 8002466 <sendto+0xae>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8002404:	f1bb 0f00 	cmp.w	fp, #0
 8002408:	d105      	bne.n	8002416 <sendto+0x5e>
 800240a:	4630      	mov	r0, r6
 800240c:	f7ff fb98 	bl	8001b40 <WIZCHIP_READ>
 8002410:	f010 0f04 	tst.w	r0, #4
 8002414:	d077      	beq.n	8002506 <sendto+0x14e>
   tmp = getSn_SR(sn);
 8002416:	f506 7840 	add.w	r8, r6, #768	; 0x300
 800241a:	4640      	mov	r0, r8
 800241c:	f7ff fb90 	bl	8001b40 <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8002420:	2842      	cmp	r0, #66	; 0x42
 8002422:	d003      	beq.n	800242c <sendto+0x74>
 8002424:	2822      	cmp	r0, #34	; 0x22
 8002426:	d001      	beq.n	800242c <sendto+0x74>
 8002428:	2832      	cmp	r0, #50	; 0x32
 800242a:	d16f      	bne.n	800250c <sendto+0x154>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800242c:	2204      	movs	r2, #4
 800242e:	4621      	mov	r1, r4
 8002430:	f506 6040 	add.w	r0, r6, #3072	; 0xc00
 8002434:	f7ff fc2a 	bl	8001c8c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8002438:	ea4f 211b 	mov.w	r1, fp, lsr #8
 800243c:	f506 5080 	add.w	r0, r6, #4096	; 0x1000
 8002440:	f7ff fbb0 	bl	8001ba4 <WIZCHIP_WRITE>
 8002444:	fa5f f18b 	uxtb.w	r1, fp
 8002448:	f506 5088 	add.w	r0, r6, #4352	; 0x1100
 800244c:	f7ff fbaa 	bl	8001ba4 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8002450:	f506 50f8 	add.w	r0, r6, #7936	; 0x1f00
 8002454:	f7ff fb74 	bl	8001b40 <WIZCHIP_READ>
 8002458:	b284      	uxth	r4, r0
 800245a:	02a4      	lsls	r4, r4, #10
 800245c:	b2a4      	uxth	r4, r4
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800245e:	42a5      	cmp	r5, r4
 8002460:	d80c      	bhi.n	800247c <sendto+0xc4>
 8002462:	462c      	mov	r4, r5
 8002464:	e00a      	b.n	800247c <sendto+0xc4>
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8002466:	4630      	mov	r0, r6
 8002468:	f7ff fb6a 	bl	8001b40 <WIZCHIP_READ>
 800246c:	f010 0f04 	tst.w	r0, #4
 8002470:	d1c8      	bne.n	8002404 <sendto+0x4c>
 8002472:	f06f 000b 	mvn.w	r0, #11
 8002476:	e04e      	b.n	8002516 <sendto+0x15e>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
      if(len <= freesize) break;
 8002478:	42a5      	cmp	r5, r4
 800247a:	d213      	bcs.n	80024a4 <sendto+0xec>
      freesize = getSn_TX_FSR(sn);
 800247c:	4638      	mov	r0, r7
 800247e:	f7ff fc43 	bl	8001d08 <getSn_TX_FSR>
 8002482:	4605      	mov	r5, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002484:	4640      	mov	r0, r8
 8002486:	f7ff fb5b 	bl	8001b40 <WIZCHIP_READ>
 800248a:	2800      	cmp	r0, #0
 800248c:	d041      	beq.n	8002512 <sendto+0x15a>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800248e:	4b23      	ldr	r3, [pc, #140]	; (800251c <sendto+0x164>)
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	fa43 f309 	asr.w	r3, r3, r9
 8002496:	f013 0f01 	tst.w	r3, #1
 800249a:	d0ed      	beq.n	8002478 <sendto+0xc0>
 800249c:	42a5      	cmp	r5, r4
 800249e:	d2eb      	bcs.n	8002478 <sendto+0xc0>
 80024a0:	2000      	movs	r0, #0
 80024a2:	e038      	b.n	8002516 <sendto+0x15e>
   };
	wiz_send_data(sn, buf, len);
 80024a4:	4622      	mov	r2, r4
 80024a6:	4651      	mov	r1, sl
 80024a8:	4638      	mov	r0, r7
 80024aa:	f7ff fc8b 	bl	8001dc4 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80024ae:	f506 7580 	add.w	r5, r6, #256	; 0x100
 80024b2:	2120      	movs	r1, #32
 80024b4:	4628      	mov	r0, r5
 80024b6:	f7ff fb75 	bl	8001ba4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80024ba:	4628      	mov	r0, r5
 80024bc:	f7ff fb40 	bl	8001b40 <WIZCHIP_READ>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d1fa      	bne.n	80024ba <sendto+0x102>
   while(1)
   {
      tmp = getSn_IR(sn);
 80024c4:	f506 7500 	add.w	r5, r6, #512	; 0x200
 80024c8:	4628      	mov	r0, r5
 80024ca:	f7ff fb39 	bl	8001b40 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 80024ce:	f010 0f10 	tst.w	r0, #16
 80024d2:	d109      	bne.n	80024e8 <sendto+0x130>
         setSn_IR(sn, Sn_IR_SENDOK);
         break;
      }
      //M:20131104
      //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
      else if(tmp & Sn_IR_TIMEOUT)
 80024d4:	f010 0f08 	tst.w	r0, #8
 80024d8:	d0f4      	beq.n	80024c4 <sendto+0x10c>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80024da:	2108      	movs	r1, #8
 80024dc:	4628      	mov	r0, r5
 80024de:	f7ff fb61 	bl	8001ba4 <WIZCHIP_WRITE>
         //len = (uint16_t)SOCKERR_TIMEOUT;
         //break;
         #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
            if(taddr) setSUBR((uint8_t*)&taddr);
         #endif
         return SOCKERR_TIMEOUT;
 80024e2:	f06f 000c 	mvn.w	r0, #12
 80024e6:	e016      	b.n	8002516 <sendto+0x15e>
         setSn_IR(sn, Sn_IR_SENDOK);
 80024e8:	2110      	movs	r1, #16
 80024ea:	4628      	mov	r0, r5
 80024ec:	f7ff fb5a 	bl	8001ba4 <WIZCHIP_WRITE>
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80024f0:	4620      	mov	r0, r4
 80024f2:	e010      	b.n	8002516 <sendto+0x15e>
   CHECK_SOCKNUM();
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024f8:	e00d      	b.n	8002516 <sendto+0x15e>
         return SOCKERR_SOCKMODE;
 80024fa:	f06f 0004 	mvn.w	r0, #4
 80024fe:	e00a      	b.n	8002516 <sendto+0x15e>
   CHECK_SOCKDATA();
 8002500:	f06f 000d 	mvn.w	r0, #13
 8002504:	e007      	b.n	8002516 <sendto+0x15e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8002506:	f06f 000a 	mvn.w	r0, #10
 800250a:	e004      	b.n	8002516 <sendto+0x15e>
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800250c:	f06f 0006 	mvn.w	r0, #6
 8002510:	e001      	b.n	8002516 <sendto+0x15e>
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002512:	f06f 0003 	mvn.w	r0, #3
}
 8002516:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800251a:	bf00      	nop
 800251c:	2000256c 	.word	0x2000256c

08002520 <recvfrom>:
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
 8002520:	2808      	cmp	r0, #8
 8002522:	f200 8125 	bhi.w	8002770 <recvfrom+0x250>
{
 8002526:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800252a:	b083      	sub	sp, #12
 800252c:	469b      	mov	fp, r3
 800252e:	4691      	mov	r9, r2
 8002530:	468a      	mov	sl, r1
 8002532:	4605      	mov	r5, r0
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8002534:	4680      	mov	r8, r0
 8002536:	0084      	lsls	r4, r0, #2
 8002538:	3401      	adds	r4, #1
 800253a:	00e4      	lsls	r4, r4, #3
 800253c:	4620      	mov	r0, r4
 800253e:	f7ff faff 	bl	8001b40 <WIZCHIP_READ>
 8002542:	4607      	mov	r7, r0
 8002544:	f000 030f 	and.w	r3, r0, #15
 8002548:	3b02      	subs	r3, #2
 800254a:	2b02      	cmp	r3, #2
 800254c:	f200 8113 	bhi.w	8002776 <recvfrom+0x256>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 8002550:	f1b9 0f00 	cmp.w	r9, #0
 8002554:	f000 8112 	beq.w	800277c <recvfrom+0x25c>
   if(sock_remained_size[sn] == 0)
 8002558:	4b8b      	ldr	r3, [pc, #556]	; (8002788 <recvfrom+0x268>)
 800255a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800255e:	b1a3      	cbz	r3, 800258a <recvfrom+0x6a>
	uint16_t pack_len=0;
 8002560:	2600      	movs	r6, #0
         if(pack_len != 0) break;
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8002562:	f007 0707 	and.w	r7, r7, #7
 8002566:	2f03      	cmp	r7, #3
 8002568:	f000 80c1 	beq.w	80026ee <recvfrom+0x1ce>
 800256c:	2f04      	cmp	r7, #4
 800256e:	f000 8084 	beq.w	800267a <recvfrom+0x15a>
 8002572:	2f02      	cmp	r7, #2
 8002574:	d01f      	beq.n	80025b6 <recvfrom+0x96>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
			break;
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8002576:	4631      	mov	r1, r6
 8002578:	4628      	mov	r0, r5
 800257a:	f7ff fc81 	bl	8001e80 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800257e:	4b82      	ldr	r3, [pc, #520]	; (8002788 <recvfrom+0x268>)
 8002580:	f823 6015 	strh.w	r6, [r3, r5, lsl #1]
         break;
 8002584:	e026      	b.n	80025d4 <recvfrom+0xb4>
         if(pack_len != 0) break;
 8002586:	2e00      	cmp	r6, #0
 8002588:	d1eb      	bne.n	8002562 <recvfrom+0x42>
         pack_len = getSn_RX_RSR(sn);
 800258a:	4628      	mov	r0, r5
 800258c:	f7ff fbeb 	bl	8001d66 <getSn_RX_RSR>
 8002590:	4606      	mov	r6, r0
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002592:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8002596:	f7ff fad3 	bl	8001b40 <WIZCHIP_READ>
 800259a:	2800      	cmp	r0, #0
 800259c:	f000 80f1 	beq.w	8002782 <recvfrom+0x262>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80025a0:	4b7a      	ldr	r3, [pc, #488]	; (800278c <recvfrom+0x26c>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	fa43 f308 	asr.w	r3, r3, r8
 80025a8:	f013 0f01 	tst.w	r3, #1
 80025ac:	d0eb      	beq.n	8002586 <recvfrom+0x66>
 80025ae:	2e00      	cmp	r6, #0
 80025b0:	d1e9      	bne.n	8002586 <recvfrom+0x66>
 80025b2:	2000      	movs	r0, #0
 80025b4:	e029      	b.n	800260a <recvfrom+0xea>
	      if(sock_remained_size[sn] == 0)
 80025b6:	4b74      	ldr	r3, [pc, #464]	; (8002788 <recvfrom+0x268>)
 80025b8:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80025bc:	b343      	cbz	r3, 8002610 <recvfrom+0xf0>
			if(len < sock_remained_size[sn]) pack_len = len;
 80025be:	4b72      	ldr	r3, [pc, #456]	; (8002788 <recvfrom+0x268>)
 80025c0:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
 80025c4:	454e      	cmp	r6, r9
 80025c6:	d900      	bls.n	80025ca <recvfrom+0xaa>
 80025c8:	464e      	mov	r6, r9
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80025ca:	4632      	mov	r2, r6
 80025cc:	4651      	mov	r1, sl
 80025ce:	4628      	mov	r0, r5
 80025d0:	f7ff fc27 	bl	8001e22 <wiz_recv_data>
   }
	setSn_CR(sn,Sn_CR_RECV);
 80025d4:	f504 7480 	add.w	r4, r4, #256	; 0x100
 80025d8:	2140      	movs	r1, #64	; 0x40
 80025da:	4620      	mov	r0, r4
 80025dc:	f7ff fae2 	bl	8001ba4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80025e0:	4620      	mov	r0, r4
 80025e2:	f7ff faad 	bl	8001b40 <WIZCHIP_READ>
 80025e6:	2800      	cmp	r0, #0
 80025e8:	d1fa      	bne.n	80025e0 <recvfrom+0xc0>
	sock_remained_size[sn] -= pack_len;
 80025ea:	4a67      	ldr	r2, [pc, #412]	; (8002788 <recvfrom+0x268>)
 80025ec:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80025f0:	1b9b      	subs	r3, r3, r6
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80b5 	beq.w	8002768 <recvfrom+0x248>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80025fe:	4a64      	ldr	r2, [pc, #400]	; (8002790 <recvfrom+0x270>)
 8002600:	5d53      	ldrb	r3, [r2, r5]
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	5553      	strb	r3, [r2, r5]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8002608:	4630      	mov	r0, r6
}
 800260a:	b003      	add	sp, #12
 800260c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   			wiz_recv_data(sn, head, 8);
 8002610:	2208      	movs	r2, #8
 8002612:	4669      	mov	r1, sp
 8002614:	4628      	mov	r0, r5
 8002616:	f7ff fc04 	bl	8001e22 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800261a:	f504 7680 	add.w	r6, r4, #256	; 0x100
 800261e:	2140      	movs	r1, #64	; 0x40
 8002620:	4630      	mov	r0, r6
 8002622:	f7ff fabf 	bl	8001ba4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002626:	4630      	mov	r0, r6
 8002628:	f7ff fa8a 	bl	8001b40 <WIZCHIP_READ>
 800262c:	2800      	cmp	r0, #0
 800262e:	d1fa      	bne.n	8002626 <recvfrom+0x106>
               addr[0] = head[0];
 8002630:	f89d 3000 	ldrb.w	r3, [sp]
 8002634:	f88b 3000 	strb.w	r3, [fp]
      			addr[1] = head[1];
 8002638:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800263c:	f88b 3001 	strb.w	r3, [fp, #1]
      			addr[2] = head[2];
 8002640:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002644:	f88b 3002 	strb.w	r3, [fp, #2]
      			addr[3] = head[3];
 8002648:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800264c:	f88b 3003 	strb.w	r3, [fp, #3]
      			*port = head[4];
 8002650:	f89d 2004 	ldrb.w	r2, [sp, #4]
      			*port = (*port << 8) + head[5];
 8002654:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002658:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800265c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800265e:	8013      	strh	r3, [r2, #0]
      			sock_remained_size[sn] = head[6];
 8002660:	f89d 2006 	ldrb.w	r2, [sp, #6]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8002664:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002668:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800266c:	4a46      	ldr	r2, [pc, #280]	; (8002788 <recvfrom+0x268>)
 800266e:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8002672:	4b47      	ldr	r3, [pc, #284]	; (8002790 <recvfrom+0x270>)
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	555a      	strb	r2, [r3, r5]
 8002678:	e7a1      	b.n	80025be <recvfrom+0x9e>
	      if(sock_remained_size[sn] == 0)
 800267a:	4b43      	ldr	r3, [pc, #268]	; (8002788 <recvfrom+0x268>)
 800267c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8002680:	b15b      	cbz	r3, 800269a <recvfrom+0x17a>
			if(len < sock_remained_size[sn]) pack_len = len;
 8002682:	4b41      	ldr	r3, [pc, #260]	; (8002788 <recvfrom+0x268>)
 8002684:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
 8002688:	454e      	cmp	r6, r9
 800268a:	d900      	bls.n	800268e <recvfrom+0x16e>
 800268c:	464e      	mov	r6, r9
			wiz_recv_data(sn,buf,pack_len);
 800268e:	4632      	mov	r2, r6
 8002690:	4651      	mov	r1, sl
 8002692:	4628      	mov	r0, r5
 8002694:	f7ff fbc5 	bl	8001e22 <wiz_recv_data>
		   break;
 8002698:	e79c      	b.n	80025d4 <recvfrom+0xb4>
   			wiz_recv_data(sn, head, 2);
 800269a:	2202      	movs	r2, #2
 800269c:	4669      	mov	r1, sp
 800269e:	4628      	mov	r0, r5
 80026a0:	f7ff fbbf 	bl	8001e22 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80026a4:	f504 7680 	add.w	r6, r4, #256	; 0x100
 80026a8:	2140      	movs	r1, #64	; 0x40
 80026aa:	4630      	mov	r0, r6
 80026ac:	f7ff fa7a 	bl	8001ba4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80026b0:	4630      	mov	r0, r6
 80026b2:	f7ff fa45 	bl	8001b40 <WIZCHIP_READ>
 80026b6:	2800      	cmp	r0, #0
 80026b8:	d1fa      	bne.n	80026b0 <recvfrom+0x190>
    			sock_remained_size[sn] = head[0];
 80026ba:	f89d 2000 	ldrb.w	r2, [sp]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80026be:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80026c2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b02      	subs	r3, #2
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	4a2e      	ldr	r2, [pc, #184]	; (8002788 <recvfrom+0x268>)
 80026ce:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
   			if(sock_remained_size[sn] > 1514) 
 80026d2:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d803      	bhi.n	80026e2 <recvfrom+0x1c2>
   			sock_pack_info[sn] = PACK_FIRST;
 80026da:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <recvfrom+0x270>)
 80026dc:	2280      	movs	r2, #128	; 0x80
 80026de:	555a      	strb	r2, [r3, r5]
 80026e0:	e7cf      	b.n	8002682 <recvfrom+0x162>
   			   close(sn);
 80026e2:	4628      	mov	r0, r5
 80026e4:	f7ff fbee 	bl	8001ec4 <close>
   			   return SOCKFATAL_PACKLEN;
 80026e8:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 80026ec:	e78d      	b.n	800260a <recvfrom+0xea>
		   if(sock_remained_size[sn] == 0)
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <recvfrom+0x268>)
 80026f0:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80026f4:	b15b      	cbz	r3, 800270e <recvfrom+0x1ee>
			if(len < sock_remained_size[sn]) pack_len = len;
 80026f6:	4b24      	ldr	r3, [pc, #144]	; (8002788 <recvfrom+0x268>)
 80026f8:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
 80026fc:	454e      	cmp	r6, r9
 80026fe:	d900      	bls.n	8002702 <recvfrom+0x1e2>
 8002700:	464e      	mov	r6, r9
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8002702:	4632      	mov	r2, r6
 8002704:	4651      	mov	r1, sl
 8002706:	4628      	mov	r0, r5
 8002708:	f7ff fb8b 	bl	8001e22 <wiz_recv_data>
			break;
 800270c:	e762      	b.n	80025d4 <recvfrom+0xb4>
   			wiz_recv_data(sn, head, 6);
 800270e:	2206      	movs	r2, #6
 8002710:	4669      	mov	r1, sp
 8002712:	4628      	mov	r0, r5
 8002714:	f7ff fb85 	bl	8001e22 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002718:	f504 7680 	add.w	r6, r4, #256	; 0x100
 800271c:	2140      	movs	r1, #64	; 0x40
 800271e:	4630      	mov	r0, r6
 8002720:	f7ff fa40 	bl	8001ba4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002724:	4630      	mov	r0, r6
 8002726:	f7ff fa0b 	bl	8001b40 <WIZCHIP_READ>
 800272a:	2800      	cmp	r0, #0
 800272c:	d1fa      	bne.n	8002724 <recvfrom+0x204>
   			addr[0] = head[0];
 800272e:	f89d 3000 	ldrb.w	r3, [sp]
 8002732:	f88b 3000 	strb.w	r3, [fp]
   			addr[1] = head[1];
 8002736:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800273a:	f88b 3001 	strb.w	r3, [fp, #1]
   			addr[2] = head[2];
 800273e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002742:	f88b 3002 	strb.w	r3, [fp, #2]
   			addr[3] = head[3];
 8002746:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800274a:	f88b 3003 	strb.w	r3, [fp, #3]
   			sock_remained_size[sn] = head[4];
 800274e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8002752:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002756:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800275a:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <recvfrom+0x268>)
 800275c:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <recvfrom+0x270>)
 8002762:	2280      	movs	r2, #128	; 0x80
 8002764:	555a      	strb	r2, [r3, r5]
 8002766:	e7c6      	b.n	80026f6 <recvfrom+0x1d6>
	else sock_pack_info[sn] = PACK_COMPLETED;
 8002768:	4b09      	ldr	r3, [pc, #36]	; (8002790 <recvfrom+0x270>)
 800276a:	2200      	movs	r2, #0
 800276c:	555a      	strb	r2, [r3, r5]
 800276e:	e74b      	b.n	8002608 <recvfrom+0xe8>
   CHECK_SOCKNUM();
 8002770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002774:	4770      	bx	lr
         return SOCKERR_SOCKMODE;
 8002776:	f06f 0004 	mvn.w	r0, #4
 800277a:	e746      	b.n	800260a <recvfrom+0xea>
   CHECK_SOCKDATA();
 800277c:	f06f 000d 	mvn.w	r0, #13
 8002780:	e743      	b.n	800260a <recvfrom+0xea>
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002782:	f06f 0003 	mvn.w	r0, #3
 8002786:	e740      	b.n	800260a <recvfrom+0xea>
 8002788:	20002578 	.word	0x20002578
 800278c:	2000256c 	.word	0x2000256c
 8002790:	20002570 	.word	0x20002570

08002794 <getsockopt>:
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
   CHECK_SOCKNUM();
 8002794:	2808      	cmp	r0, #8
 8002796:	f200 80a3 	bhi.w	80028e0 <getsockopt+0x14c>
{
 800279a:	b570      	push	{r4, r5, r6, lr}
 800279c:	4615      	mov	r5, r2
 800279e:	4604      	mov	r4, r0
   switch(sotype)
 80027a0:	290c      	cmp	r1, #12
 80027a2:	f200 80a0 	bhi.w	80028e6 <getsockopt+0x152>
 80027a6:	e8df f001 	tbb	[pc, r1]
 80027aa:	1107      	.short	0x1107
 80027ac:	4338251b 	.word	0x4338251b
 80027b0:	6c67569e 	.word	0x6c67569e
 80027b4:	7b71      	.short	0x7b71
 80027b6:	8f          	.byte	0x8f
 80027b7:	00          	.byte	0x00
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 80027b8:	0080      	lsls	r0, r0, #2
 80027ba:	3001      	adds	r0, #1
 80027bc:	00c0      	lsls	r0, r0, #3
 80027be:	f7ff f9bf 	bl	8001b40 <WIZCHIP_READ>
 80027c2:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 80027c6:	7028      	strb	r0, [r5, #0]
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
 80027c8:	2001      	movs	r0, #1
}
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
         *(uint8_t*) arg = getSn_TTL(sn);
 80027cc:	0080      	lsls	r0, r0, #2
 80027ce:	3001      	adds	r0, #1
 80027d0:	00c0      	lsls	r0, r0, #3
 80027d2:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
 80027d6:	f7ff f9b3 	bl	8001b40 <WIZCHIP_READ>
 80027da:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 80027dc:	2001      	movs	r0, #1
         break;
 80027de:	e7f4      	b.n	80027ca <getsockopt+0x36>
         *(uint8_t*) arg = getSn_TOS(sn);
 80027e0:	0080      	lsls	r0, r0, #2
 80027e2:	3001      	adds	r0, #1
 80027e4:	00c0      	lsls	r0, r0, #3
 80027e6:	f500 50a8 	add.w	r0, r0, #5376	; 0x1500
 80027ea:	f7ff f9a9 	bl	8001b40 <WIZCHIP_READ>
 80027ee:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 80027f0:	2001      	movs	r0, #1
         break;
 80027f2:	e7ea      	b.n	80027ca <getsockopt+0x36>
         *(uint16_t*) arg = getSn_MSSR(sn);
 80027f4:	0084      	lsls	r4, r0, #2
 80027f6:	3401      	adds	r4, #1
 80027f8:	00e4      	lsls	r4, r4, #3
 80027fa:	f504 5090 	add.w	r0, r4, #4608	; 0x1200
 80027fe:	f7ff f99f 	bl	8001b40 <WIZCHIP_READ>
 8002802:	b286      	uxth	r6, r0
 8002804:	0236      	lsls	r6, r6, #8
 8002806:	b2b6      	uxth	r6, r6
 8002808:	f504 5098 	add.w	r0, r4, #4864	; 0x1300
 800280c:	f7ff f998 	bl	8001b40 <WIZCHIP_READ>
 8002810:	fa16 f080 	uxtah	r0, r6, r0
 8002814:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8002816:	2001      	movs	r0, #1
         break;
 8002818:	e7d7      	b.n	80027ca <getsockopt+0x36>
         getSn_DIPR(sn, (uint8_t*)arg);
 800281a:	0080      	lsls	r0, r0, #2
 800281c:	3001      	adds	r0, #1
 800281e:	00c0      	lsls	r0, r0, #3
 8002820:	2204      	movs	r2, #4
 8002822:	4629      	mov	r1, r5
 8002824:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8002828:	f7ff f9f0 	bl	8001c0c <WIZCHIP_READ_BUF>
   return SOCK_OK;
 800282c:	2001      	movs	r0, #1
         break;
 800282e:	e7cc      	b.n	80027ca <getsockopt+0x36>
         *(uint16_t*) arg = getSn_DPORT(sn);
 8002830:	0084      	lsls	r4, r0, #2
 8002832:	3401      	adds	r4, #1
 8002834:	00e4      	lsls	r4, r4, #3
 8002836:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 800283a:	f7ff f981 	bl	8001b40 <WIZCHIP_READ>
 800283e:	b286      	uxth	r6, r0
 8002840:	0236      	lsls	r6, r6, #8
 8002842:	b2b6      	uxth	r6, r6
 8002844:	f504 5088 	add.w	r0, r4, #4352	; 0x1100
 8002848:	f7ff f97a 	bl	8001b40 <WIZCHIP_READ>
 800284c:	fa16 f080 	uxtah	r0, r6, r0
 8002850:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8002852:	2001      	movs	r0, #1
         break;
 8002854:	e7b9      	b.n	80027ca <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 8002856:	0084      	lsls	r4, r0, #2
 8002858:	3401      	adds	r4, #1
 800285a:	00e4      	lsls	r4, r4, #3
 800285c:	4620      	mov	r0, r4
 800285e:	f7ff f96f 	bl	8001b40 <WIZCHIP_READ>
 8002862:	f000 000f 	and.w	r0, r0, #15
 8002866:	2801      	cmp	r0, #1
 8002868:	d140      	bne.n	80028ec <getsockopt+0x158>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 800286a:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
 800286e:	f7ff f967 	bl	8001b40 <WIZCHIP_READ>
 8002872:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8002874:	2001      	movs	r0, #1
         break;
 8002876:	e7a8      	b.n	80027ca <getsockopt+0x36>
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 8002878:	f7ff fa46 	bl	8001d08 <getSn_TX_FSR>
 800287c:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 800287e:	2001      	movs	r0, #1
         break;
 8002880:	e7a3      	b.n	80027ca <getsockopt+0x36>
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 8002882:	f7ff fa70 	bl	8001d66 <getSn_RX_RSR>
 8002886:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8002888:	2001      	movs	r0, #1
         break;
 800288a:	e79e      	b.n	80027ca <getsockopt+0x36>
         *(uint8_t*) arg = getSn_SR(sn);
 800288c:	0080      	lsls	r0, r0, #2
 800288e:	3001      	adds	r0, #1
 8002890:	00c0      	lsls	r0, r0, #3
 8002892:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8002896:	f7ff f953 	bl	8001b40 <WIZCHIP_READ>
 800289a:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 800289c:	2001      	movs	r0, #1
         break;
 800289e:	e794      	b.n	80027ca <getsockopt+0x36>
         if(getSn_MR(sn) & Sn_MR_TCP)
 80028a0:	0080      	lsls	r0, r0, #2
 80028a2:	3001      	adds	r0, #1
 80028a4:	00c0      	lsls	r0, r0, #3
 80028a6:	f7ff f94b 	bl	8001b40 <WIZCHIP_READ>
 80028aa:	f010 0f01 	tst.w	r0, #1
 80028ae:	d105      	bne.n	80028bc <getsockopt+0x128>
            *(uint16_t*)arg = sock_remained_size[sn];
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <getsockopt+0x164>)
 80028b2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80028b6:	802b      	strh	r3, [r5, #0]
   return SOCK_OK;
 80028b8:	2001      	movs	r0, #1
 80028ba:	e786      	b.n	80027ca <getsockopt+0x36>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 80028bc:	4620      	mov	r0, r4
 80028be:	f7ff fa52 	bl	8001d66 <getSn_RX_RSR>
 80028c2:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 80028c4:	2001      	movs	r0, #1
 80028c6:	e780      	b.n	80027ca <getsockopt+0x36>
         if((getSn_MR(sn) == Sn_MR_TCP))
 80028c8:	0080      	lsls	r0, r0, #2
 80028ca:	3001      	adds	r0, #1
 80028cc:	00c0      	lsls	r0, r0, #3
 80028ce:	f7ff f937 	bl	8001b40 <WIZCHIP_READ>
 80028d2:	2801      	cmp	r0, #1
 80028d4:	d00d      	beq.n	80028f2 <getsockopt+0x15e>
         *(uint8_t*)arg = sock_pack_info[sn];
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <getsockopt+0x168>)
 80028d8:	5d1b      	ldrb	r3, [r3, r4]
 80028da:	702b      	strb	r3, [r5, #0]
   return SOCK_OK;
 80028dc:	2001      	movs	r0, #1
         break;
 80028de:	e774      	b.n	80027ca <getsockopt+0x36>
   CHECK_SOCKNUM();
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80028e4:	4770      	bx	lr
         return SOCKERR_SOCKOPT;
 80028e6:	f06f 0001 	mvn.w	r0, #1
 80028ea:	e76e      	b.n	80027ca <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 80028ec:	f06f 0004 	mvn.w	r0, #4
 80028f0:	e76b      	b.n	80027ca <getsockopt+0x36>
             return SOCKERR_SOCKMODE;
 80028f2:	f06f 0004 	mvn.w	r0, #4
 80028f6:	e768      	b.n	80027ca <getsockopt+0x36>
 80028f8:	20002578 	.word	0x20002578
 80028fc:	20002570 	.word	0x20002570

08002900 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002900:	4770      	bx	lr

08002902 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002902:	4770      	bx	lr

08002904 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002904:	4770      	bx	lr

08002906 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002906:	4770      	bx	lr

08002908 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002908:	7800      	ldrb	r0, [r0, #0]
 800290a:	4770      	bx	lr

0800290c <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800290c:	7001      	strb	r1, [r0, #0]
 800290e:	4770      	bx	lr

08002910 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002910:	2000      	movs	r0, #0
 8002912:	4770      	bx	lr

08002914 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002914:	4770      	bx	lr

08002916 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8002916:	4770      	bx	lr

08002918 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8002918:	4770      	bx	lr
	...

0800291c <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 800291c:	b120      	cbz	r0, 8002928 <reg_wizchip_cs_cbfunc+0xc>
 800291e:	b119      	cbz	r1, 8002928 <reg_wizchip_cs_cbfunc+0xc>
      WIZCHIP.CS._select   = wizchip_cs_select;
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <reg_wizchip_cs_cbfunc+0x18>)
 8002922:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002924:	6199      	str	r1, [r3, #24]
   }
}
 8002926:	4770      	bx	lr
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002928:	4b02      	ldr	r3, [pc, #8]	; (8002934 <reg_wizchip_cs_cbfunc+0x18>)
 800292a:	4a03      	ldr	r2, [pc, #12]	; (8002938 <reg_wizchip_cs_cbfunc+0x1c>)
 800292c:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800292e:	4a03      	ldr	r2, [pc, #12]	; (800293c <reg_wizchip_cs_cbfunc+0x20>)
 8002930:	619a      	str	r2, [r3, #24]
 8002932:	4770      	bx	lr
 8002934:	20002404 	.word	0x20002404
 8002938:	08002905 	.word	0x08002905
 800293c:	08002907 	.word	0x08002907

08002940 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <reg_wizchip_spi_cbfunc+0x24>)
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002948:	d0fa      	beq.n	8002940 <reg_wizchip_spi_cbfunc>
   
   if(!spi_rb || !spi_wb)
 800294a:	b120      	cbz	r0, 8002956 <reg_wizchip_spi_cbfunc+0x16>
 800294c:	b119      	cbz	r1, 8002956 <reg_wizchip_spi_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <reg_wizchip_spi_cbfunc+0x24>)
 8002950:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002952:	6219      	str	r1, [r3, #32]
   }
}
 8002954:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002956:	4b03      	ldr	r3, [pc, #12]	; (8002964 <reg_wizchip_spi_cbfunc+0x24>)
 8002958:	4a03      	ldr	r2, [pc, #12]	; (8002968 <reg_wizchip_spi_cbfunc+0x28>)
 800295a:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800295c:	4a03      	ldr	r2, [pc, #12]	; (800296c <reg_wizchip_spi_cbfunc+0x2c>)
 800295e:	621a      	str	r2, [r3, #32]
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20002404 	.word	0x20002404
 8002968:	08002911 	.word	0x08002911
 800296c:	08002915 	.word	0x08002915

08002970 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <reg_wizchip_spiburst_cbfunc+0x24>)
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002978:	d0fa      	beq.n	8002970 <reg_wizchip_spiburst_cbfunc>

   if(!spi_rb || !spi_wb)
 800297a:	b120      	cbz	r0, 8002986 <reg_wizchip_spiburst_cbfunc+0x16>
 800297c:	b119      	cbz	r1, 8002986 <reg_wizchip_spiburst_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800297e:	4b05      	ldr	r3, [pc, #20]	; (8002994 <reg_wizchip_spiburst_cbfunc+0x24>)
 8002980:	6258      	str	r0, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8002982:	6299      	str	r1, [r3, #40]	; 0x28
   }
}
 8002984:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8002986:	4b03      	ldr	r3, [pc, #12]	; (8002994 <reg_wizchip_spiburst_cbfunc+0x24>)
 8002988:	4a03      	ldr	r2, [pc, #12]	; (8002998 <reg_wizchip_spiburst_cbfunc+0x28>)
 800298a:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800298c:	4a03      	ldr	r2, [pc, #12]	; (800299c <reg_wizchip_spiburst_cbfunc+0x2c>)
 800298e:	629a      	str	r2, [r3, #40]	; 0x28
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20002404 	.word	0x20002404
 8002998:	08002917 	.word	0x08002917
 800299c:	08002919 	.word	0x08002919

080029a0 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80029a0:	b500      	push	{lr}
 80029a2:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80029a4:	2206      	movs	r2, #6
 80029a6:	a901      	add	r1, sp, #4
 80029a8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80029ac:	f7ff f92e 	bl	8001c0c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80029b0:	2204      	movs	r2, #4
 80029b2:	a905      	add	r1, sp, #20
 80029b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029b8:	f7ff f928 	bl	8001c0c <WIZCHIP_READ_BUF>
 80029bc:	2204      	movs	r2, #4
 80029be:	a904      	add	r1, sp, #16
 80029c0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80029c4:	f7ff f922 	bl	8001c0c <WIZCHIP_READ_BUF>
 80029c8:	2204      	movs	r2, #4
 80029ca:	a903      	add	r1, sp, #12
 80029cc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80029d0:	f7ff f91c 	bl	8001c0c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	2000      	movs	r0, #0
 80029d8:	f7ff f8e4 	bl	8001ba4 <WIZCHIP_WRITE>
   getMR(); // for delay
 80029dc:	2000      	movs	r0, #0
 80029de:	f7ff f8af 	bl	8001b40 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80029e2:	2206      	movs	r2, #6
 80029e4:	a901      	add	r1, sp, #4
 80029e6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80029ea:	f7ff f94f 	bl	8001c8c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80029ee:	2204      	movs	r2, #4
 80029f0:	a905      	add	r1, sp, #20
 80029f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029f6:	f7ff f949 	bl	8001c8c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80029fa:	2204      	movs	r2, #4
 80029fc:	a904      	add	r1, sp, #16
 80029fe:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002a02:	f7ff f943 	bl	8001c8c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002a06:	2204      	movs	r2, #4
 8002a08:	a903      	add	r1, sp, #12
 8002a0a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002a0e:	f7ff f93d 	bl	8001c8c <WIZCHIP_WRITE_BUF>
}
 8002a12:	b007      	add	sp, #28
 8002a14:	f85d fb04 	ldr.w	pc, [sp], #4

08002a18 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002a18:	b570      	push	{r4, r5, r6, lr}
 8002a1a:	4605      	mov	r5, r0
 8002a1c:	460e      	mov	r6, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8002a1e:	f7ff ffbf 	bl	80029a0 <wizchip_sw_reset>
   if(txsize)
 8002a22:	b1cd      	cbz	r5, 8002a58 <wizchip_init+0x40>
   {
      tmp = 0;
 8002a24:	2200      	movs	r2, #0
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a26:	4613      	mov	r3, r2
 8002a28:	2b07      	cmp	r3, #7
 8002a2a:	dc07      	bgt.n	8002a3c <wizchip_init+0x24>
		{
			tmp += txsize[i];
 8002a2c:	5ce9      	ldrb	r1, [r5, r3]
 8002a2e:	440a      	add	r2, r1
 8002a30:	b252      	sxtb	r2, r2

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002a32:	2a10      	cmp	r2, #16
 8002a34:	dc2f      	bgt.n	8002a96 <wizchip_init+0x7e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a36:	3301      	adds	r3, #1
 8002a38:	b25b      	sxtb	r3, r3
 8002a3a:	e7f5      	b.n	8002a28 <wizchip_init+0x10>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a3c:	2400      	movs	r4, #0
 8002a3e:	e009      	b.n	8002a54 <wizchip_init+0x3c>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002a40:	00a0      	lsls	r0, r4, #2
 8002a42:	3001      	adds	r0, #1
 8002a44:	00c0      	lsls	r0, r0, #3
 8002a46:	5d29      	ldrb	r1, [r5, r4]
 8002a48:	f500 50f8 	add.w	r0, r0, #7936	; 0x1f00
 8002a4c:	f7ff f8aa 	bl	8001ba4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a50:	3401      	adds	r4, #1
 8002a52:	b264      	sxtb	r4, r4
 8002a54:	2c07      	cmp	r4, #7
 8002a56:	ddf3      	ble.n	8002a40 <wizchip_init+0x28>
		}

	#endif
   }

   if(rxsize)
 8002a58:	b15e      	cbz	r6, 8002a72 <wizchip_init+0x5a>
   {
      tmp = 0;
 8002a5a:	2200      	movs	r2, #0
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	2b07      	cmp	r3, #7
 8002a60:	dc09      	bgt.n	8002a76 <wizchip_init+0x5e>
		{
			tmp += rxsize[i];
 8002a62:	5cf1      	ldrb	r1, [r6, r3]
 8002a64:	440a      	add	r2, r1
 8002a66:	b252      	sxtb	r2, r2
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002a68:	2a10      	cmp	r2, #16
 8002a6a:	dc17      	bgt.n	8002a9c <wizchip_init+0x84>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	b25b      	sxtb	r3, r3
 8002a70:	e7f5      	b.n	8002a5e <wizchip_init+0x46>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 8002a72:	2000      	movs	r0, #0
 8002a74:	e00e      	b.n	8002a94 <wizchip_init+0x7c>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a76:	2400      	movs	r4, #0
 8002a78:	e009      	b.n	8002a8e <wizchip_init+0x76>
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8002a7a:	00a0      	lsls	r0, r4, #2
 8002a7c:	3001      	adds	r0, #1
 8002a7e:	00c0      	lsls	r0, r0, #3
 8002a80:	5d31      	ldrb	r1, [r6, r4]
 8002a82:	f500 50f0 	add.w	r0, r0, #7680	; 0x1e00
 8002a86:	f7ff f88d 	bl	8001ba4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a8a:	3401      	adds	r4, #1
 8002a8c:	b264      	sxtb	r4, r4
 8002a8e:	2c07      	cmp	r4, #7
 8002a90:	ddf3      	ble.n	8002a7a <wizchip_init+0x62>
   return 0;
 8002a92:	2000      	movs	r0, #0
}
 8002a94:	bd70      	pop	{r4, r5, r6, pc}
			if(tmp > 16) return -1;
 8002a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a9a:	e7fb      	b.n	8002a94 <wizchip_init+0x7c>
			if(tmp > 16) return -1;
 8002a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aa0:	e7f8      	b.n	8002a94 <wizchip_init+0x7c>

08002aa2 <wizchip_getinterrupt>:

#endif   
}

intr_kind wizchip_getinterrupt(void)
{
 8002aa2:	b510      	push	{r4, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8002aa4:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002aa8:	f7ff f84a 	bl	8001b40 <WIZCHIP_READ>
 8002aac:	f000 04f0 	and.w	r4, r0, #240	; 0xf0
   sir = getSIR();
 8002ab0:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002ab4:	f7ff f844 	bl	8001b40 <WIZCHIP_READ>
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002ab8:	b280      	uxth	r0, r0
  ret = (ret << 8) + ir;
 8002aba:	0200      	lsls	r0, r0, #8
 8002abc:	b280      	uxth	r0, r0
 8002abe:	4420      	add	r0, r4
 8002ac0:	b280      	uxth	r0, r0
  return (intr_kind)ret;
}
 8002ac2:	bd10      	pop	{r4, pc}

08002ac4 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002ac4:	b510      	push	{r4, lr}
   uint8_t imr  = (uint8_t)intr;
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002ac6:	0a04      	lsrs	r4, r0, #8
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002ac8:	b2c1      	uxtb	r1, r0
 8002aca:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002ace:	f7ff f869 	bl	8001ba4 <WIZCHIP_WRITE>
   setSIMR(simr);
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002ad8:	f7ff f864 	bl	8001ba4 <WIZCHIP_WRITE>
#endif   
}
 8002adc:	bd10      	pop	{r4, pc}
	...

08002ae0 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002ae0:	b510      	push	{r4, lr}
 8002ae2:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 8002ae4:	2206      	movs	r2, #6
 8002ae6:	4601      	mov	r1, r0
 8002ae8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002aec:	f7ff f8ce 	bl	8001c8c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002af0:	2204      	movs	r2, #4
 8002af2:	f104 010e 	add.w	r1, r4, #14
 8002af6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002afa:	f7ff f8c7 	bl	8001c8c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002afe:	2204      	movs	r2, #4
 8002b00:	f104 010a 	add.w	r1, r4, #10
 8002b04:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002b08:	f7ff f8c0 	bl	8001c8c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	1da1      	adds	r1, r4, #6
 8002b10:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002b14:	f7ff f8ba 	bl	8001c8c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002b18:	7ca2      	ldrb	r2, [r4, #18]
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <wizchip_setnetinfo+0x54>)
 8002b1c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002b1e:	7ce2      	ldrb	r2, [r4, #19]
 8002b20:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002b22:	7d22      	ldrb	r2, [r4, #20]
 8002b24:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002b26:	7d62      	ldrb	r2, [r4, #21]
 8002b28:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002b2a:	7da2      	ldrb	r2, [r4, #22]
 8002b2c:	4b02      	ldr	r3, [pc, #8]	; (8002b38 <wizchip_setnetinfo+0x58>)
 8002b2e:	701a      	strb	r2, [r3, #0]
}
 8002b30:	bd10      	pop	{r4, pc}
 8002b32:	bf00      	nop
 8002b34:	2000258c 	.word	0x2000258c
 8002b38:	20002588 	.word	0x20002588

08002b3c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002b3c:	b510      	push	{r4, lr}
 8002b3e:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 8002b40:	2206      	movs	r2, #6
 8002b42:	4601      	mov	r1, r0
 8002b44:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002b48:	f7ff f860 	bl	8001c0c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	f104 010e 	add.w	r1, r4, #14
 8002b52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b56:	f7ff f859 	bl	8001c0c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	f104 010a 	add.w	r1, r4, #10
 8002b60:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002b64:	f7ff f852 	bl	8001c0c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002b68:	2204      	movs	r2, #4
 8002b6a:	1da1      	adds	r1, r4, #6
 8002b6c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002b70:	f7ff f84c 	bl	8001c0c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <wizchip_getnetinfo+0x54>)
 8002b76:	781a      	ldrb	r2, [r3, #0]
 8002b78:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002b7a:	785a      	ldrb	r2, [r3, #1]
 8002b7c:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002b7e:	789a      	ldrb	r2, [r3, #2]
 8002b80:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002b82:	78db      	ldrb	r3, [r3, #3]
 8002b84:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002b86:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <wizchip_getnetinfo+0x58>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	75a3      	strb	r3, [r4, #22]
}
 8002b8c:	bd10      	pop	{r4, pc}
 8002b8e:	bf00      	nop
 8002b90:	2000258c 	.word	0x2000258c
 8002b94:	20002588 	.word	0x20002588

08002b98 <mcp23017_init>:

#define I2C_TIMEOUT		10

void mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c, uint16_t addr)
{
	hdev->hi2c = hi2c;
 8002b98:	6001      	str	r1, [r0, #0]
	hdev->addr = addr << 1;
 8002b9a:	0052      	lsls	r2, r2, #1
 8002b9c:	8082      	strh	r2, [r0, #4]
}
 8002b9e:	4770      	bx	lr

08002ba0 <mcp23017_read>:

HAL_StatusTypeDef mcp23017_read(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 8002ba0:	b510      	push	{r4, lr}
 8002ba2:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Read(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 8002ba4:	8884      	ldrh	r4, [r0, #4]
 8002ba6:	6800      	ldr	r0, [r0, #0]
 8002ba8:	230a      	movs	r3, #10
 8002baa:	9302      	str	r3, [sp, #8]
 8002bac:	2301      	movs	r3, #1
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	9200      	str	r2, [sp, #0]
 8002bb2:	460a      	mov	r2, r1
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	f005 fb2d 	bl	8008214 <HAL_I2C_Mem_Read>
}
 8002bba:	b004      	add	sp, #16
 8002bbc:	bd10      	pop	{r4, pc}

08002bbe <mcp23017_write>:

HAL_StatusTypeDef mcp23017_write(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 8002bbe:	b510      	push	{r4, lr}
 8002bc0:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Write(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 8002bc2:	8884      	ldrh	r4, [r0, #4]
 8002bc4:	6800      	ldr	r0, [r0, #0]
 8002bc6:	230a      	movs	r3, #10
 8002bc8:	9302      	str	r3, [sp, #8]
 8002bca:	2301      	movs	r3, #1
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	9200      	str	r2, [sp, #0]
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	f005 fa6a 	bl	80080ac <HAL_I2C_Mem_Write>
}
 8002bd8:	b004      	add	sp, #16
 8002bda:	bd10      	pop	{r4, pc}

08002bdc <mcp23017_iodir>:

HAL_StatusTypeDef mcp23017_iodir(MCP23017_HandleTypeDef *hdev, uint8_t port, uint8_t iodir)
{
 8002bdc:	b500      	push	{lr}
 8002bde:	b083      	sub	sp, #12
	uint8_t data[1] = {iodir};
 8002be0:	ab02      	add	r3, sp, #8
 8002be2:	f803 2d04 	strb.w	r2, [r3, #-4]!
	return mcp23017_write(hdev, REGISTER_IODIRA|port, data);
 8002be6:	461a      	mov	r2, r3
 8002be8:	f7ff ffe9 	bl	8002bbe <mcp23017_write>
}
 8002bec:	b003      	add	sp, #12
 8002bee:	f85d fb04 	ldr.w	pc, [sp], #4

08002bf2 <mcp23017_read_gpio>:
	uint8_t data[1] = {pu};
	return mcp23017_write(hdev, REGISTER_GPPUA|port, data);
}

HAL_StatusTypeDef mcp23017_read_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 8002bf2:	b530      	push	{r4, r5, lr}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	460d      	mov	r5, r1
	uint8_t data[1];
	HAL_StatusTypeDef status;
	status = mcp23017_read(hdev, REGISTER_GPIOA|port, data);
 8002bfa:	aa01      	add	r2, sp, #4
 8002bfc:	f041 0112 	orr.w	r1, r1, #18
 8002c00:	f7ff ffce 	bl	8002ba0 <mcp23017_read>
	if (status == HAL_OK)
 8002c04:	4603      	mov	r3, r0
 8002c06:	b918      	cbnz	r0, 8002c10 <mcp23017_read_gpio+0x1e>
		hdev->gpio[port] = data[0];
 8002c08:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002c0c:	442c      	add	r4, r5
 8002c0e:	71a2      	strb	r2, [r4, #6]
	return status;
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	b003      	add	sp, #12
 8002c14:	bd30      	pop	{r4, r5, pc}

08002c16 <mcp23017_write_gpio>:

HAL_StatusTypeDef mcp23017_write_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 8002c16:	b500      	push	{lr}
 8002c18:	b083      	sub	sp, #12
	uint8_t data[1] = {hdev->gpio[port]};
 8002c1a:	1843      	adds	r3, r0, r1
 8002c1c:	799b      	ldrb	r3, [r3, #6]
 8002c1e:	aa02      	add	r2, sp, #8
 8002c20:	f802 3d04 	strb.w	r3, [r2, #-4]!
	return mcp23017_write(hdev, REGISTER_GPIOA|port, data);
 8002c24:	f041 0112 	orr.w	r1, r1, #18
 8002c28:	f7ff ffc9 	bl	8002bbe <mcp23017_write>
}
 8002c2c:	b003      	add	sp, #12
 8002c2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002c34 <DataLog_UpdateMemPointer>:
}
/**
 *
 * @param inc
 */
static void DataLog_UpdateMemPointer (uint8_t inc){
 8002c34:	b508      	push	{r3, lr}
	(void) inc;
	logHead.nextSavedLog += sizeof(DataLogEvent_t);
 8002c36:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <DataLog_UpdateMemPointer+0x28>)
 8002c38:	6813      	ldr	r3, [r2, #0]
 8002c3a:	3310      	adds	r3, #16
 8002c3c:	6013      	str	r3, [r2, #0]

	if(logHead.nextSavedLog >= w25qxx.CapacityInKiloByte * 1024){
 8002c3e:	4a08      	ldr	r2, [pc, #32]	; (8002c60 <DataLog_UpdateMemPointer+0x2c>)
 8002c40:	6a12      	ldr	r2, [r2, #32]
 8002c42:	ebb3 2f82 	cmp.w	r3, r2, lsl #10
 8002c46:	d302      	bcc.n	8002c4e <DataLog_UpdateMemPointer+0x1a>
		logHead.nextSavedLog = 0;
 8002c48:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <DataLog_UpdateMemPointer+0x28>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
	}

	HAL_RTCEx_BKUPWrite(&hrtc, 1, logHead.nextSavedLog);
 8002c4e:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <DataLog_UpdateMemPointer+0x28>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	2101      	movs	r1, #1
 8002c54:	4803      	ldr	r0, [pc, #12]	; (8002c64 <DataLog_UpdateMemPointer+0x30>)
 8002c56:	f006 fafe 	bl	8009256 <HAL_RTCEx_BKUPWrite>
}
 8002c5a:	bd08      	pop	{r3, pc}
 8002c5c:	20002590 	.word	0x20002590
 8002c60:	2000395c 	.word	0x2000395c
 8002c64:	200040a8 	.word	0x200040a8

08002c68 <DataLog_LogEvent>:
DataLogStatus_t DataLog_LogEvent (DataLogEventCode_t event, uint8_t* addData, uint8_t addDataLen){
 8002c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6a:	b08b      	sub	sp, #44	; 0x2c
 8002c6c:	4607      	mov	r7, r0
 8002c6e:	460d      	mov	r5, r1
 8002c70:	4616      	mov	r6, r2
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002c72:	4c1f      	ldr	r4, [pc, #124]	; (8002cf0 <DataLog_LogEvent+0x88>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	a901      	add	r1, sp, #4
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f006 faa0 	bl	80091be <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	4669      	mov	r1, sp
 8002c82:	4620      	mov	r0, r4
 8002c84:	f006 fac6 	bl	8009214 <HAL_RTC_GetDate>
	eventS.timestamp.fields.seconds = time.Seconds;
 8002c88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002c8c:	f88d 3018 	strb.w	r3, [sp, #24]
	eventS.timestamp.fields.minutes = time.Minutes;
 8002c90:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002c94:	f88d 3019 	strb.w	r3, [sp, #25]
	eventS.timestamp.fields.hours = time.Hours;
 8002c98:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c9c:	f88d 301a 	strb.w	r3, [sp, #26]
	eventS.timestamp.fields.day = date.Date;
 8002ca0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002ca4:	f88d 301b 	strb.w	r3, [sp, #27]
	eventS.timestamp.fields.month = date.Month;
 8002ca8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002cac:	f88d 301c 	strb.w	r3, [sp, #28]
	eventS.timestamp.fields.year = date.Year;
 8002cb0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002cb4:	f88d 301d 	strb.w	r3, [sp, #29]
	eventS.timestamp.fields.empty = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8ad 301e 	strh.w	r3, [sp, #30]
	eventS.eventCode = event;
 8002cbe:	f88d 7020 	strb.w	r7, [sp, #32]
	memset(eventS.additionalData, 0, 7);
 8002cc2:	f8cd 3021 	str.w	r3, [sp, #33]	; 0x21
 8002cc6:	9309      	str	r3, [sp, #36]	; 0x24
	if((addData != NULL) && (addDataLen != 0)){
 8002cc8:	b105      	cbz	r5, 8002ccc <DataLog_LogEvent+0x64>
 8002cca:	b94e      	cbnz	r6, 8002ce0 <DataLog_LogEvent+0x78>
	xQueueSend(DataLogQueueHandle, &eventS, 10);
 8002ccc:	2300      	movs	r3, #0
 8002cce:	220a      	movs	r2, #10
 8002cd0:	a906      	add	r1, sp, #24
 8002cd2:	4808      	ldr	r0, [pc, #32]	; (8002cf4 <DataLog_LogEvent+0x8c>)
 8002cd4:	6800      	ldr	r0, [r0, #0]
 8002cd6:	f008 f8e5 	bl	800aea4 <xQueueGenericSend>
}
 8002cda:	2000      	movs	r0, #0
 8002cdc:	b00b      	add	sp, #44	; 0x2c
 8002cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(eventS.additionalData, addData, addDataLen);
 8002ce0:	4632      	mov	r2, r6
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 8002ce8:	f00a ffdc 	bl	800dca4 <memcpy>
 8002cec:	e7ee      	b.n	8002ccc <DataLog_LogEvent+0x64>
 8002cee:	bf00      	nop
 8002cf0:	200040a8 	.word	0x200040a8
 8002cf4:	200040a4 	.word	0x200040a4

08002cf8 <DataLog_GetLastEvent>:
void DataLog_GetLastEvent (DataLogEvent_t* event){
 8002cf8:	b508      	push	{r3, lr}
	W25qxx_ReadBytes((uint8_t*)event, logHead.nextSavedLog - 16, 16);
 8002cfa:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <DataLog_GetLastEvent+0x10>)
 8002cfc:	6819      	ldr	r1, [r3, #0]
 8002cfe:	2210      	movs	r2, #16
 8002d00:	3910      	subs	r1, #16
 8002d02:	f000 fa19 	bl	8003138 <W25qxx_ReadBytes>
}
 8002d06:	bd08      	pop	{r3, pc}
 8002d08:	20002590 	.word	0x20002590

08002d0c <DataLog_Init>:
DataLogStatus_t DataLog_Init (void){
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	b084      	sub	sp, #16
	if(W25qxx_Init() == true){
 8002d10:	f000 f92e 	bl	8002f70 <W25qxx_Init>
 8002d14:	b950      	cbnz	r0, 8002d2c <DataLog_Init+0x20>
	DataLogStatus_t retval = DL_NO_FLASH;
 8002d16:	2401      	movs	r4, #1
	logHead.nextSavedLog = HAL_RTCEx_BKUPRead(&hrtc, 1);
 8002d18:	2101      	movs	r1, #1
 8002d1a:	480a      	ldr	r0, [pc, #40]	; (8002d44 <DataLog_Init+0x38>)
 8002d1c:	f006 faa0 	bl	8009260 <HAL_RTCEx_BKUPRead>
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <DataLog_Init+0x3c>)
 8002d22:	6018      	str	r0, [r3, #0]
	if(retval == DL_OK){
 8002d24:	b124      	cbz	r4, 8002d30 <DataLog_Init+0x24>
}
 8002d26:	4620      	mov	r0, r4
 8002d28:	b004      	add	sp, #16
 8002d2a:	bd10      	pop	{r4, pc}
		retval = DL_OK;
 8002d2c:	2400      	movs	r4, #0
 8002d2e:	e7f3      	b.n	8002d18 <DataLog_Init+0xc>
		DataLog_LogEvent(EV_STARTUP, NULL, 0);
 8002d30:	2200      	movs	r2, #0
 8002d32:	4611      	mov	r1, r2
 8002d34:	4610      	mov	r0, r2
 8002d36:	f7ff ff97 	bl	8002c68 <DataLog_LogEvent>
		DataLog_GetLastEvent(&lastEvent);
 8002d3a:	4668      	mov	r0, sp
 8002d3c:	f7ff ffdc 	bl	8002cf8 <DataLog_GetLastEvent>
 8002d40:	e7f1      	b.n	8002d26 <DataLog_Init+0x1a>
 8002d42:	bf00      	nop
 8002d44:	200040a8 	.word	0x200040a8
 8002d48:	20002590 	.word	0x20002590

08002d4c <DataLog_SaveEvent>:
void DataLog_SaveEvent (DataLogEvent_t* event){
 8002d4c:	b538      	push	{r3, r4, r5, lr}
 8002d4e:	4605      	mov	r5, r0
	for(int i = 0; i < 16; i++){
 8002d50:	2400      	movs	r4, #0
 8002d52:	e006      	b.n	8002d62 <DataLog_SaveEvent+0x16>
		W25qxx_WriteByte(event->bytes[i], logHead.nextSavedLog + i);
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <DataLog_SaveEvent+0x24>)
 8002d56:	6819      	ldr	r1, [r3, #0]
 8002d58:	4421      	add	r1, r4
 8002d5a:	5d28      	ldrb	r0, [r5, r4]
 8002d5c:	f000 f9b2 	bl	80030c4 <W25qxx_WriteByte>
	for(int i = 0; i < 16; i++){
 8002d60:	3401      	adds	r4, #1
 8002d62:	2c0f      	cmp	r4, #15
 8002d64:	ddf6      	ble.n	8002d54 <DataLog_SaveEvent+0x8>
	DataLog_UpdateMemPointer(1);
 8002d66:	2001      	movs	r0, #1
 8002d68:	f7ff ff64 	bl	8002c34 <DataLog_UpdateMemPointer>
}
 8002d6c:	bd38      	pop	{r3, r4, r5, pc}
 8002d6e:	bf00      	nop
 8002d70:	20002590 	.word	0x20002590

08002d74 <DataLog_EreaseMemory>:
void DataLog_EreaseMemory (void){
 8002d74:	b510      	push	{r4, lr}
	W25qxx_EraseChip();
 8002d76:	f000 f983 	bl	8003080 <W25qxx_EraseChip>
	logHead.nextSavedLog = 0;
 8002d7a:	2400      	movs	r4, #0
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <DataLog_EreaseMemory+0x24>)
 8002d7e:	601c      	str	r4, [r3, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, 1, logHead.nextSavedLog);
 8002d80:	4622      	mov	r2, r4
 8002d82:	2101      	movs	r1, #1
 8002d84:	4805      	ldr	r0, [pc, #20]	; (8002d9c <DataLog_EreaseMemory+0x28>)
 8002d86:	f006 fa66 	bl	8009256 <HAL_RTCEx_BKUPWrite>
	DataLog_LogEvent(EV_FLASH_CLR, NULL, 0);
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	2005      	movs	r0, #5
 8002d90:	f7ff ff6a 	bl	8002c68 <DataLog_LogEvent>
}
 8002d94:	bd10      	pop	{r4, pc}
 8002d96:	bf00      	nop
 8002d98:	20002590 	.word	0x20002590
 8002d9c:	200040a8 	.word	0x200040a8

08002da0 <DataLog_GetCurrentMemPointer>:
}
 8002da0:	4b01      	ldr	r3, [pc, #4]	; (8002da8 <DataLog_GetCurrentMemPointer+0x8>)
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20002590 	.word	0x20002590

08002dac <DataLog_TranslateEvent>:
uint32_t DataLog_TranslateEvent (DataLogEvent_t* event, char* output){
 8002dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dae:	b085      	sub	sp, #20
	if(event->eventCode < EVENT_CNT){
 8002db0:	7a05      	ldrb	r5, [r0, #8]
 8002db2:	2d07      	cmp	r5, #7
 8002db4:	d902      	bls.n	8002dbc <DataLog_TranslateEvent+0x10>
	uint32_t len = 0;
 8002db6:	2000      	movs	r0, #0
}
 8002db8:	b005      	add	sp, #20
 8002dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dbc:	460e      	mov	r6, r1
 8002dbe:	4604      	mov	r4, r0
		len = sprintf(output, eventsStr[event->eventCode], event->timestamp.fields.day,
 8002dc0:	78c2      	ldrb	r2, [r0, #3]
				event->timestamp.fields.month, event->timestamp.fields.year,
 8002dc2:	7903      	ldrb	r3, [r0, #4]
 8002dc4:	7940      	ldrb	r0, [r0, #5]
				event->timestamp.fields.hours, event->timestamp.fields.minutes,
 8002dc6:	78a7      	ldrb	r7, [r4, #2]
 8002dc8:	f894 c001 	ldrb.w	ip, [r4, #1]
				event->timestamp.fields.seconds);
 8002dcc:	7824      	ldrb	r4, [r4, #0]
		len = sprintf(output, eventsStr[event->eventCode], event->timestamp.fields.day,
 8002dce:	4906      	ldr	r1, [pc, #24]	; (8002de8 <DataLog_TranslateEvent+0x3c>)
 8002dd0:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8002dd4:	9403      	str	r4, [sp, #12]
 8002dd6:	f8cd c008 	str.w	ip, [sp, #8]
 8002dda:	9701      	str	r7, [sp, #4]
 8002ddc:	9000      	str	r0, [sp, #0]
 8002dde:	4630      	mov	r0, r6
 8002de0:	f00a ff20 	bl	800dc24 <sprintf_>
 8002de4:	e7e8      	b.n	8002db8 <DataLog_TranslateEvent+0xc>
 8002de6:	bf00      	nop
 8002de8:	0800f084 	.word	0x0800f084

08002dec <DataLog_GetSavedEventsCnt>:
	return logHead.nextSavedLog / 16;
 8002dec:	4b01      	ldr	r3, [pc, #4]	; (8002df4 <DataLog_GetSavedEventsCnt+0x8>)
 8002dee:	6818      	ldr	r0, [r3, #0]
}
 8002df0:	0900      	lsrs	r0, r0, #4
 8002df2:	4770      	bx	lr
 8002df4:	20002590 	.word	0x20002590

08002df8 <DataLog_GetLastEventsN>:
DataLogStatus_t DataLog_GetLastEventsN(DataLogEvent_t* events, uint32_t event){
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	4605      	mov	r5, r0
 8002dfc:	460c      	mov	r4, r1
	eventsSaved = DataLog_GetSavedEventsCnt();
 8002dfe:	f7ff fff5 	bl	8002dec <DataLog_GetSavedEventsCnt>
	if((eventsSaved == 0) || (event > eventsSaved)){
 8002e02:	b108      	cbz	r0, 8002e08 <DataLog_GetLastEventsN+0x10>
 8002e04:	42a0      	cmp	r0, r4
 8002e06:	d201      	bcs.n	8002e0c <DataLog_GetLastEventsN+0x14>
}
 8002e08:	2000      	movs	r0, #0
 8002e0a:	bd38      	pop	{r3, r4, r5, pc}
	W25qxx_ReadBytes((uint8_t*)events, logHead.nextSavedLog - (event * 16), 16);
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <DataLog_GetLastEventsN+0x28>)
 8002e0e:	6819      	ldr	r1, [r3, #0]
 8002e10:	2210      	movs	r2, #16
 8002e12:	eba1 1104 	sub.w	r1, r1, r4, lsl #4
 8002e16:	4628      	mov	r0, r5
 8002e18:	f000 f98e 	bl	8003138 <W25qxx_ReadBytes>
	return DL_OK;
 8002e1c:	e7f4      	b.n	8002e08 <DataLog_GetLastEventsN+0x10>
 8002e1e:	bf00      	nop
 8002e20:	20002590 	.word	0x20002590

08002e24 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8002e24:	b500      	push	{lr}
 8002e26:	b087      	sub	sp, #28
 8002e28:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8002e2c:	2364      	movs	r3, #100	; 0x64
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2301      	movs	r3, #1
 8002e32:	f10d 0217 	add.w	r2, sp, #23
 8002e36:	f10d 010f 	add.w	r1, sp, #15
 8002e3a:	4804      	ldr	r0, [pc, #16]	; (8002e4c <W25qxx_Spi+0x28>)
 8002e3c:	f006 fbeb 	bl	8009616 <HAL_SPI_TransmitReceive>
	return ret;	
}
 8002e40:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002e44:	b007      	add	sp, #28
 8002e46:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e4a:	bf00      	nop
 8002e4c:	2000414c 	.word	0x2000414c

08002e50 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002e50:	b570      	push	{r4, r5, r6, lr}
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
  FLASH_SELECT;
 8002e52:	f001 fa57 	bl	8004304 <FLASH_ChipSelect>
  W25qxx_Spi(0x9F);
 8002e56:	209f      	movs	r0, #159	; 0x9f
 8002e58:	f7ff ffe4 	bl	8002e24 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002e5c:	20a5      	movs	r0, #165	; 0xa5
 8002e5e:	f7ff ffe1 	bl	8002e24 <W25qxx_Spi>
 8002e62:	4606      	mov	r6, r0
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002e64:	20a5      	movs	r0, #165	; 0xa5
 8002e66:	f7ff ffdd 	bl	8002e24 <W25qxx_Spi>
 8002e6a:	4604      	mov	r4, r0
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002e6c:	20a5      	movs	r0, #165	; 0xa5
 8002e6e:	f7ff ffd9 	bl	8002e24 <W25qxx_Spi>
 8002e72:	4605      	mov	r5, r0
  FLASH_DESELECT;
 8002e74:	f001 fa58 	bl	8004328 <FLASH_ChipDeselect>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002e78:	0220      	lsls	r0, r4, #8
 8002e7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
  return Temp;
}
 8002e7e:	4328      	orrs	r0, r5
 8002e80:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e84 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002e84:	b510      	push	{r4, lr}
  FLASH_SELECT;
 8002e86:	f001 fa3d 	bl	8004304 <FLASH_ChipSelect>
  W25qxx_Spi(0x4B);
 8002e8a:	204b      	movs	r0, #75	; 0x4b
 8002e8c:	f7ff ffca 	bl	8002e24 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8002e90:	2400      	movs	r4, #0
 8002e92:	e004      	b.n	8002e9e <W25qxx_ReadUniqID+0x1a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002e94:	20a5      	movs	r0, #165	; 0xa5
 8002e96:	f7ff ffc5 	bl	8002e24 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8002e9a:	3401      	adds	r4, #1
 8002e9c:	b2e4      	uxtb	r4, r4
 8002e9e:	2c03      	cmp	r4, #3
 8002ea0:	d9f8      	bls.n	8002e94 <W25qxx_ReadUniqID+0x10>
	for(uint8_t	i=0;i<8;i++)
 8002ea2:	2400      	movs	r4, #0
 8002ea4:	e007      	b.n	8002eb6 <W25qxx_ReadUniqID+0x32>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002ea6:	20a5      	movs	r0, #165	; 0xa5
 8002ea8:	f7ff ffbc 	bl	8002e24 <W25qxx_Spi>
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <W25qxx_ReadUniqID+0x3c>)
 8002eae:	4423      	add	r3, r4
 8002eb0:	7058      	strb	r0, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8002eb2:	3401      	adds	r4, #1
 8002eb4:	b2e4      	uxtb	r4, r4
 8002eb6:	2c07      	cmp	r4, #7
 8002eb8:	d9f5      	bls.n	8002ea6 <W25qxx_ReadUniqID+0x22>
  FLASH_DESELECT;
 8002eba:	f001 fa35 	bl	8004328 <FLASH_ChipDeselect>
}
 8002ebe:	bd10      	pop	{r4, pc}
 8002ec0:	2000395c 	.word	0x2000395c

08002ec4 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8002ec4:	b508      	push	{r3, lr}
  FLASH_SELECT;
 8002ec6:	f001 fa1d 	bl	8004304 <FLASH_ChipSelect>
  W25qxx_Spi(0x06);
 8002eca:	2006      	movs	r0, #6
 8002ecc:	f7ff ffaa 	bl	8002e24 <W25qxx_Spi>
  FLASH_DESELECT;
 8002ed0:	f001 fa2a 	bl	8004328 <FLASH_ChipDeselect>
	W25qxx_Delay(1);
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	f007 fcf1 	bl	800a8bc <osDelay>
}
 8002eda:	bd08      	pop	{r3, pc}

08002edc <W25qxx_ReadStatusRegister>:
  FLASH_DESELECT;
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8002edc:	b510      	push	{r4, lr}
 8002ede:	4604      	mov	r4, r0
	uint8_t	status=0;
	FLASH_SELECT;
 8002ee0:	f001 fa10 	bl	8004304 <FLASH_ChipSelect>
	if(SelectStatusRegister_1_2_3==1)
 8002ee4:	2c01      	cmp	r4, #1
 8002ee6:	d00f      	beq.n	8002f08 <W25qxx_ReadStatusRegister+0x2c>
	{
		W25qxx_Spi(0x05);
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister1 = status;
	}
	else if(SelectStatusRegister_1_2_3==2)
 8002ee8:	2c02      	cmp	r4, #2
 8002eea:	d018      	beq.n	8002f1e <W25qxx_ReadStatusRegister+0x42>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister2 = status;
	}
	else
	{
		W25qxx_Spi(0x15);
 8002eec:	2015      	movs	r0, #21
 8002eee:	f7ff ff99 	bl	8002e24 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8002ef2:	20a5      	movs	r0, #165	; 0xa5
 8002ef4:	f7ff ff96 	bl	8002e24 <W25qxx_Spi>
 8002ef8:	4604      	mov	r4, r0
		w25qxx.StatusRegister3 = status;
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <W25qxx_ReadStatusRegister+0x58>)
 8002efc:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	}	
	FLASH_DESELECT;
 8002f00:	f001 fa12 	bl	8004328 <FLASH_ChipDeselect>
	return status;
}
 8002f04:	4620      	mov	r0, r4
 8002f06:	bd10      	pop	{r4, pc}
		W25qxx_Spi(0x05);
 8002f08:	2005      	movs	r0, #5
 8002f0a:	f7ff ff8b 	bl	8002e24 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8002f0e:	20a5      	movs	r0, #165	; 0xa5
 8002f10:	f7ff ff88 	bl	8002e24 <W25qxx_Spi>
 8002f14:	4604      	mov	r4, r0
		w25qxx.StatusRegister1 = status;
 8002f16:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <W25qxx_ReadStatusRegister+0x58>)
 8002f18:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
 8002f1c:	e7f0      	b.n	8002f00 <W25qxx_ReadStatusRegister+0x24>
		W25qxx_Spi(0x35);
 8002f1e:	2035      	movs	r0, #53	; 0x35
 8002f20:	f7ff ff80 	bl	8002e24 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8002f24:	20a5      	movs	r0, #165	; 0xa5
 8002f26:	f7ff ff7d 	bl	8002e24 <W25qxx_Spi>
 8002f2a:	4604      	mov	r4, r0
		w25qxx.StatusRegister2 = status;
 8002f2c:	4b01      	ldr	r3, [pc, #4]	; (8002f34 <W25qxx_ReadStatusRegister+0x58>)
 8002f2e:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
 8002f32:	e7e5      	b.n	8002f00 <W25qxx_ReadStatusRegister+0x24>
 8002f34:	2000395c 	.word	0x2000395c

08002f38 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  FLASH_DESELECT;
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8002f38:	b510      	push	{r4, lr}
	W25qxx_Delay(1);
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	f007 fcbe 	bl	800a8bc <osDelay>
	FLASH_SELECT;
 8002f40:	f001 f9e0 	bl	8004304 <FLASH_ChipSelect>
	W25qxx_Spi(0x05);
 8002f44:	2005      	movs	r0, #5
 8002f46:	f7ff ff6d 	bl	8002e24 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002f4a:	20a5      	movs	r0, #165	; 0xa5
 8002f4c:	f7ff ff6a 	bl	8002e24 <W25qxx_Spi>
 8002f50:	4c06      	ldr	r4, [pc, #24]	; (8002f6c <W25qxx_WaitForWriteEnd+0x34>)
 8002f52:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
		W25qxx_Delay(10);
 8002f56:	200a      	movs	r0, #10
 8002f58:	f007 fcb0 	bl	800a8bc <osDelay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8002f5c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002f60:	f013 0f01 	tst.w	r3, #1
 8002f64:	d1f1      	bne.n	8002f4a <W25qxx_WaitForWriteEnd+0x12>
 FLASH_DESELECT;
 8002f66:	f001 f9df 	bl	8004328 <FLASH_ChipDeselect>
}
 8002f6a:	bd10      	pop	{r4, pc}
 8002f6c:	2000395c 	.word	0x2000395c

08002f70 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8002f70:	b510      	push	{r4, lr}
	w25qxx.Lock=1;	
 8002f72:	4b42      	ldr	r3, [pc, #264]	; (800307c <W25qxx_Init+0x10c>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8002f7a:	e002      	b.n	8002f82 <W25qxx_Init+0x12>
		W25qxx_Delay(1);
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	f007 fc9d 	bl	800a8bc <osDelay>
	while(HAL_GetTick()<100)
 8002f82:	f004 f933 	bl	80071ec <HAL_GetTick>
 8002f86:	2863      	cmp	r0, #99	; 0x63
 8002f88:	d9f8      	bls.n	8002f7c <W25qxx_Init+0xc>
  FLASH_DESELECT;
 8002f8a:	f001 f9cd 	bl	8004328 <FLASH_ChipDeselect>
  W25qxx_Delay(100);
 8002f8e:	2064      	movs	r0, #100	; 0x64
 8002f90:	f007 fc94 	bl	800a8bc <osDelay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 8002f94:	f7ff ff5c 	bl	8002e50 <W25qxx_ReadID>
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8002f98:	b280      	uxth	r0, r0
 8002f9a:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8002f9e:	3811      	subs	r0, #17
 8002fa0:	2809      	cmp	r0, #9
 8002fa2:	d866      	bhi.n	8003072 <W25qxx_Init+0x102>
 8002fa4:	e8df f000 	tbb	[pc, r0]
 8002fa8:	4d53595f 	.word	0x4d53595f
 8002fac:	343b4147 	.word	0x343b4147
 8002fb0:	052d      	.short	0x052d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8002fb2:	4b32      	ldr	r3, [pc, #200]	; (800307c <W25qxx_Init+0x10c>)
 8002fb4:	220a      	movs	r2, #10
 8002fb6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8002fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fbc:	61da      	str	r2, [r3, #28]
				#endif
			w25qxx.Lock=0;	
			return false;
				
	}		
	w25qxx.PageSize=256;
 8002fbe:	4c2f      	ldr	r4, [pc, #188]	; (800307c <W25qxx_Init+0x10c>)
 8002fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc4:	8163      	strh	r3, [r4, #10]
	w25qxx.SectorSize=0x1000;
 8002fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fca:	6123      	str	r3, [r4, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8002fcc:	69e3      	ldr	r3, [r4, #28]
 8002fce:	011a      	lsls	r2, r3, #4
 8002fd0:	6162      	str	r2, [r4, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8002fd2:	041b      	lsls	r3, r3, #16
 8002fd4:	0a1a      	lsrs	r2, r3, #8
 8002fd6:	60e2      	str	r2, [r4, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8002fd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fdc:	61a2      	str	r2, [r4, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8002fde:	0a9b      	lsrs	r3, r3, #10
 8002fe0:	6223      	str	r3, [r4, #32]
	W25qxx_ReadUniqID();
 8002fe2:	f7ff ff4f 	bl	8002e84 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f7ff ff78 	bl	8002edc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002fec:	2002      	movs	r0, #2
 8002fee:	f7ff ff75 	bl	8002edc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002ff2:	2003      	movs	r0, #3
 8002ff4:	f7ff ff72 	bl	8002edc <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return true;
 8002ffe:	2001      	movs	r0, #1
}	
 8003000:	bd10      	pop	{r4, pc}
			w25qxx.ID=W25Q256;
 8003002:	4b1e      	ldr	r3, [pc, #120]	; (800307c <W25qxx_Init+0x10c>)
 8003004:	2209      	movs	r2, #9
 8003006:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8003008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800300c:	61da      	str	r2, [r3, #28]
		break;
 800300e:	e7d6      	b.n	8002fbe <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q128;
 8003010:	4b1a      	ldr	r3, [pc, #104]	; (800307c <W25qxx_Init+0x10c>)
 8003012:	2208      	movs	r2, #8
 8003014:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8003016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800301a:	61da      	str	r2, [r3, #28]
		break;
 800301c:	e7cf      	b.n	8002fbe <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q64;
 800301e:	4b17      	ldr	r3, [pc, #92]	; (800307c <W25qxx_Init+0x10c>)
 8003020:	2207      	movs	r2, #7
 8003022:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8003024:	2280      	movs	r2, #128	; 0x80
 8003026:	61da      	str	r2, [r3, #28]
		break;
 8003028:	e7c9      	b.n	8002fbe <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q32;
 800302a:	4b14      	ldr	r3, [pc, #80]	; (800307c <W25qxx_Init+0x10c>)
 800302c:	2206      	movs	r2, #6
 800302e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8003030:	2240      	movs	r2, #64	; 0x40
 8003032:	61da      	str	r2, [r3, #28]
		break;
 8003034:	e7c3      	b.n	8002fbe <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q16;
 8003036:	4b11      	ldr	r3, [pc, #68]	; (800307c <W25qxx_Init+0x10c>)
 8003038:	2205      	movs	r2, #5
 800303a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 800303c:	2220      	movs	r2, #32
 800303e:	61da      	str	r2, [r3, #28]
		break;
 8003040:	e7bd      	b.n	8002fbe <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q80;
 8003042:	4b0e      	ldr	r3, [pc, #56]	; (800307c <W25qxx_Init+0x10c>)
 8003044:	2204      	movs	r2, #4
 8003046:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8003048:	2210      	movs	r2, #16
 800304a:	61da      	str	r2, [r3, #28]
		break;
 800304c:	e7b7      	b.n	8002fbe <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q40;
 800304e:	4b0b      	ldr	r3, [pc, #44]	; (800307c <W25qxx_Init+0x10c>)
 8003050:	2203      	movs	r2, #3
 8003052:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8003054:	2208      	movs	r2, #8
 8003056:	61da      	str	r2, [r3, #28]
		break;
 8003058:	e7b1      	b.n	8002fbe <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q20;
 800305a:	4b08      	ldr	r3, [pc, #32]	; (800307c <W25qxx_Init+0x10c>)
 800305c:	2202      	movs	r2, #2
 800305e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8003060:	2204      	movs	r2, #4
 8003062:	61da      	str	r2, [r3, #28]
		break;
 8003064:	e7ab      	b.n	8002fbe <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q10;
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <W25qxx_Init+0x10c>)
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 800306c:	2202      	movs	r2, #2
 800306e:	61da      	str	r2, [r3, #28]
		break;
 8003070:	e7a5      	b.n	8002fbe <W25qxx_Init+0x4e>
			w25qxx.Lock=0;	
 8003072:	2000      	movs	r0, #0
 8003074:	4b01      	ldr	r3, [pc, #4]	; (800307c <W25qxx_Init+0x10c>)
 8003076:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
			return false;
 800307a:	e7c1      	b.n	8003000 <W25qxx_Init+0x90>
 800307c:	2000395c 	.word	0x2000395c

08003080 <W25qxx_EraseChip>:
//###################################################################################################################
void	W25qxx_EraseChip(void)
{
 8003080:	b510      	push	{r4, lr}
	while(w25qxx.Lock==1)
 8003082:	e002      	b.n	800308a <W25qxx_EraseChip+0xa>
		W25qxx_Delay(1);
 8003084:	2001      	movs	r0, #1
 8003086:	f007 fc19 	bl	800a8bc <osDelay>
	while(w25qxx.Lock==1)
 800308a:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <W25qxx_EraseChip+0x40>)
 800308c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003090:	2b01      	cmp	r3, #1
 8003092:	d0f7      	beq.n	8003084 <W25qxx_EraseChip+0x4>
	w25qxx.Lock=1;	
 8003094:	4c0a      	ldr	r4, [pc, #40]	; (80030c0 <W25qxx_EraseChip+0x40>)
 8003096:	2301      	movs	r3, #1
 8003098:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseChip Begin...\r\n");
	#endif
	W25qxx_WriteEnable();
 800309c:	f7ff ff12 	bl	8002ec4 <W25qxx_WriteEnable>
	FLASH_SELECT;
 80030a0:	f001 f930 	bl	8004304 <FLASH_ChipSelect>
  W25qxx_Spi(0xC7);
 80030a4:	20c7      	movs	r0, #199	; 0xc7
 80030a6:	f7ff febd 	bl	8002e24 <W25qxx_Spi>
  FLASH_DESELECT;
 80030aa:	f001 f93d 	bl	8004328 <FLASH_ChipDeselect>
	W25qxx_WaitForWriteEnd();
 80030ae:	f7ff ff43 	bl	8002f38 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms!\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(10);
 80030b2:	200a      	movs	r0, #10
 80030b4:	f007 fc02 	bl	800a8bc <osDelay>
	w25qxx.Lock=0;	
 80030b8:	2300      	movs	r3, #0
 80030ba:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
 80030be:	bd10      	pop	{r4, pc}
 80030c0:	2000395c 	.word	0x2000395c

080030c4 <W25qxx_WriteByte>:
	w25qxx.Lock=0;
	return false;
}
//###################################################################################################################
void W25qxx_WriteByte(uint8_t pBuffer, uint32_t WriteAddr_inBytes)
{
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	4606      	mov	r6, r0
 80030c8:	460c      	mov	r4, r1
	while(w25qxx.Lock==1)
 80030ca:	e002      	b.n	80030d2 <W25qxx_WriteByte+0xe>
		W25qxx_Delay(1);
 80030cc:	2001      	movs	r0, #1
 80030ce:	f007 fbf5 	bl	800a8bc <osDelay>
	while(w25qxx.Lock==1)
 80030d2:	4b18      	ldr	r3, [pc, #96]	; (8003134 <W25qxx_WriteByte+0x70>)
 80030d4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d0f7      	beq.n	80030cc <W25qxx_WriteByte+0x8>
	w25qxx.Lock=1;
 80030dc:	4d15      	ldr	r5, [pc, #84]	; (8003134 <W25qxx_WriteByte+0x70>)
 80030de:	2301      	movs	r3, #1
 80030e0:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx WriteByte 0x%02X at address %d begin...",pBuffer,WriteAddr_inBytes);
	#endif
	W25qxx_WaitForWriteEnd();
 80030e4:	f7ff ff28 	bl	8002f38 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 80030e8:	f7ff feec 	bl	8002ec4 <W25qxx_WriteEnable>
  FLASH_SELECT;
 80030ec:	f001 f90a 	bl	8004304 <FLASH_ChipSelect>
  W25qxx_Spi(0x02);
 80030f0:	2002      	movs	r0, #2
 80030f2:	f7ff fe97 	bl	8002e24 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 80030f6:	782b      	ldrb	r3, [r5, #0]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d816      	bhi.n	800312a <W25qxx_WriteByte+0x66>
		W25qxx_Spi((WriteAddr_inBytes & 0xFF000000) >> 24);
  W25qxx_Spi((WriteAddr_inBytes & 0xFF0000) >> 16);
 80030fc:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8003100:	f7ff fe90 	bl	8002e24 <W25qxx_Spi>
  W25qxx_Spi((WriteAddr_inBytes & 0xFF00) >> 8);
 8003104:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8003108:	f7ff fe8c 	bl	8002e24 <W25qxx_Spi>
  W25qxx_Spi(WriteAddr_inBytes & 0xFF);
 800310c:	b2e0      	uxtb	r0, r4
 800310e:	f7ff fe89 	bl	8002e24 <W25qxx_Spi>
  W25qxx_Spi(pBuffer);
 8003112:	4630      	mov	r0, r6
 8003114:	f7ff fe86 	bl	8002e24 <W25qxx_Spi>
	FLASH_DESELECT;
 8003118:	f001 f906 	bl	8004328 <FLASH_ChipDeselect>
  W25qxx_WaitForWriteEnd();
 800311c:	f7ff ff0c 	bl	8002f38 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WriteByte done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	w25qxx.Lock=0;
 8003120:	4b04      	ldr	r3, [pc, #16]	; (8003134 <W25qxx_WriteByte+0x70>)
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003128:	bd70      	pop	{r4, r5, r6, pc}
		W25qxx_Spi((WriteAddr_inBytes & 0xFF000000) >> 24);
 800312a:	0e20      	lsrs	r0, r4, #24
 800312c:	f7ff fe7a 	bl	8002e24 <W25qxx_Spi>
 8003130:	e7e4      	b.n	80030fc <W25qxx_WriteByte+0x38>
 8003132:	bf00      	nop
 8003134:	2000395c 	.word	0x2000395c

08003138 <W25qxx_ReadBytes>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8003138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313a:	4606      	mov	r6, r0
 800313c:	460c      	mov	r4, r1
 800313e:	4617      	mov	r7, r2
	while(w25qxx.Lock==1)
 8003140:	e002      	b.n	8003148 <W25qxx_ReadBytes+0x10>
		W25qxx_Delay(1);
 8003142:	2001      	movs	r0, #1
 8003144:	f007 fbba 	bl	800a8bc <osDelay>
	while(w25qxx.Lock==1)
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <W25qxx_ReadBytes+0x78>)
 800314a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800314e:	2b01      	cmp	r3, #1
 8003150:	d0f7      	beq.n	8003142 <W25qxx_ReadBytes+0xa>
	w25qxx.Lock=1;
 8003152:	4d17      	ldr	r5, [pc, #92]	; (80031b0 <W25qxx_ReadBytes+0x78>)
 8003154:	2301      	movs	r3, #1
 8003156:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
	#endif	
	FLASH_SELECT;
 800315a:	f001 f8d3 	bl	8004304 <FLASH_ChipSelect>
	W25qxx_Spi(0x0B);
 800315e:	200b      	movs	r0, #11
 8003160:	f7ff fe60 	bl	8002e24 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8003164:	782b      	ldrb	r3, [r5, #0]
 8003166:	2b08      	cmp	r3, #8
 8003168:	d81e      	bhi.n	80031a8 <W25qxx_ReadBytes+0x70>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 800316a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800316e:	f7ff fe59 	bl	8002e24 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8003172:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8003176:	f7ff fe55 	bl	8002e24 <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 800317a:	b2e0      	uxtb	r0, r4
 800317c:	f7ff fe52 	bl	8002e24 <W25qxx_Spi>
	W25qxx_Spi(0);
 8003180:	2000      	movs	r0, #0
 8003182:	f7ff fe4f 	bl	8002e24 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 8003186:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800318a:	b2ba      	uxth	r2, r7
 800318c:	4631      	mov	r1, r6
 800318e:	4809      	ldr	r0, [pc, #36]	; (80031b4 <W25qxx_ReadBytes+0x7c>)
 8003190:	f006 fb58 	bl	8009844 <HAL_SPI_Receive>
	FLASH_DESELECT;
 8003194:	f001 f8c8 	bl	8004328 <FLASH_ChipDeselect>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8003198:	2001      	movs	r0, #1
 800319a:	f007 fb8f 	bl	800a8bc <osDelay>
	w25qxx.Lock=0;
 800319e:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <W25qxx_ReadBytes+0x78>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80031a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 80031a8:	0e20      	lsrs	r0, r4, #24
 80031aa:	f7ff fe3b 	bl	8002e24 <W25qxx_Spi>
 80031ae:	e7dc      	b.n	800316a <W25qxx_ReadBytes+0x32>
 80031b0:	2000395c 	.word	0x2000395c
 80031b4:	2000414c 	.word	0x2000414c

080031b8 <get16>:

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
	uint16_t i;
	i = *s++ << 8;
 80031b8:	7803      	ldrb	r3, [r0, #0]
	i = i + *s;
 80031ba:	7840      	ldrb	r0, [r0, #1]
 80031bc:	eb00 2003 	add.w	r0, r0, r3, lsl #8
	return i;
}
 80031c0:	b280      	uxth	r0, r0
 80031c2:	4770      	bx	lr

080031c4 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
	*s++ = i >> 8;
 80031c4:	0a0a      	lsrs	r2, r1, #8
 80031c6:	4603      	mov	r3, r0
 80031c8:	f803 2b02 	strb.w	r2, [r3], #2
	*s++ = i;
 80031cc:	7041      	strb	r1, [r0, #1]
	return s;
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	4770      	bx	lr

080031d2 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 80031d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
	int indirect = 0;	/* Set if indirection encountered */
	int nseg = 0;		/* Total number of segments in name */
 80031d6:	2700      	movs	r7, #0
	int indirect = 0;	/* Set if indirection encountered */
 80031d8:	46bc      	mov	ip, r7
	int clen = 0;		/* Total length of compressed name */
 80031da:	463e      	mov	r6, r7
 80031dc:	e01d      	b.n	800321a <parse_name+0x48>

		if (!indirect) clen++;

		if ((slen & 0xc0) == 0xc0)
		{
			if (!indirect)
 80031de:	f1bc 0f00 	cmp.w	ip, #0
 80031e2:	d100      	bne.n	80031e6 <parse_name+0x14>
				clen++;
 80031e4:	3601      	adds	r6, #1
			indirect = 1;
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 80031e6:	022d      	lsls	r5, r5, #8
 80031e8:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
 80031ec:	7849      	ldrb	r1, [r1, #1]
 80031ee:	4429      	add	r1, r5
 80031f0:	eb00 0e01 	add.w	lr, r0, r1
			slen = *cp++;
 80031f4:	f10e 0e01 	add.w	lr, lr, #1
 80031f8:	5c44      	ldrb	r4, [r0, r1]
			indirect = 1;
 80031fa:	f04f 0c01 	mov.w	ip, #1
 80031fe:	e019      	b.n	8003234 <parse_name+0x62>

		if (len < 0) return -1;

		if (!indirect) clen += slen;

		while (slen-- != 0) *buf++ = (char)*cp++;
 8003200:	780c      	ldrb	r4, [r1, #0]
 8003202:	702c      	strb	r4, [r5, #0]
 8003204:	3101      	adds	r1, #1
 8003206:	4614      	mov	r4, r2
 8003208:	3501      	adds	r5, #1
 800320a:	1e62      	subs	r2, r4, #1
 800320c:	b292      	uxth	r2, r2
 800320e:	2c00      	cmp	r4, #0
 8003210:	d1f6      	bne.n	8003200 <parse_name+0x2e>
		*buf++ = '.';
 8003212:	1c6a      	adds	r2, r5, #1
 8003214:	242e      	movs	r4, #46	; 0x2e
 8003216:	702c      	strb	r4, [r5, #0]
		nseg++;
 8003218:	3701      	adds	r7, #1
		slen = *cp++;	/* Length of this segment */
 800321a:	f101 0e01 	add.w	lr, r1, #1
 800321e:	780d      	ldrb	r5, [r1, #0]
 8003220:	b2ac      	uxth	r4, r5
		if (!indirect) clen++;
 8003222:	f1bc 0f00 	cmp.w	ip, #0
 8003226:	d100      	bne.n	800322a <parse_name+0x58>
 8003228:	3601      	adds	r6, #1
		if ((slen & 0xc0) == 0xc0)
 800322a:	f005 08c0 	and.w	r8, r5, #192	; 0xc0
 800322e:	f1b8 0fc0 	cmp.w	r8, #192	; 0xc0
 8003232:	d0d4      	beq.n	80031de <parse_name+0xc>
		if (slen == 0)	/* zero length == all done */
 8003234:	b15c      	cbz	r4, 800324e <parse_name+0x7c>
		len -= slen + 1;
 8003236:	1b1b      	subs	r3, r3, r4
 8003238:	3b01      	subs	r3, #1
 800323a:	b21b      	sxth	r3, r3
		if (len < 0) return -1;
 800323c:	2b00      	cmp	r3, #0
 800323e:	db0f      	blt.n	8003260 <parse_name+0x8e>
		if (!indirect) clen += slen;
 8003240:	f1bc 0f00 	cmp.w	ip, #0
 8003244:	d100      	bne.n	8003248 <parse_name+0x76>
 8003246:	4426      	add	r6, r4
			indirect = 1;
 8003248:	4671      	mov	r1, lr
 800324a:	4615      	mov	r5, r2
 800324c:	e7dd      	b.n	800320a <parse_name+0x38>
	}

	if (nseg == 0)
 800324e:	b917      	cbnz	r7, 8003256 <parse_name+0x84>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8003250:	232e      	movs	r3, #46	; 0x2e
 8003252:	7013      	strb	r3, [r2, #0]
 8003254:	3201      	adds	r2, #1
		len--;
	}

	*buf++ = '\0';
 8003256:	2300      	movs	r3, #0
 8003258:	7013      	strb	r3, [r2, #0]
	len--;

	return clen;	/* Length of compressed message */
}
 800325a:	4630      	mov	r0, r6
 800325c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (len < 0) return -1;
 8003260:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003264:	e7f9      	b.n	800325a <parse_name+0x88>

08003266 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 8003266:	b510      	push	{r4, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	460c      	mov	r4, r1
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 800326c:	2318      	movs	r3, #24
 800326e:	466a      	mov	r2, sp
 8003270:	f7ff ffaf 	bl	80031d2 <parse_name>


	if (len == -1) return 0;
 8003274:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003278:	d003      	beq.n	8003282 <dns_question+0x1c>

	cp += len;
 800327a:	4420      	add	r0, r4
	cp += 2;		/* type */
	cp += 2;		/* class */
 800327c:	3004      	adds	r0, #4

	return cp;
}
 800327e:	b006      	add	sp, #24
 8003280:	bd10      	pop	{r4, pc}
	if (len == -1) return 0;
 8003282:	2000      	movs	r0, #0
 8003284:	e7fb      	b.n	800327e <dns_question+0x18>

08003286 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8003286:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003288:	b087      	sub	sp, #28
 800328a:	4606      	mov	r6, r0
 800328c:	460c      	mov	r4, r1
 800328e:	4617      	mov	r7, r2
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8003290:	2318      	movs	r3, #24
 8003292:	466a      	mov	r2, sp
 8003294:	f7ff ff9d 	bl	80031d2 <parse_name>

	if (len == -1) return 0;
 8003298:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800329c:	d054      	beq.n	8003348 <dns_answer+0xc2>

	cp += len;
 800329e:	4404      	add	r4, r0
	type = get16(cp);
 80032a0:	4620      	mov	r0, r4
 80032a2:	f7ff ff89 	bl	80031b8 <get16>
	cp += 2;		/* type */
	cp += 2;		/* class */
	cp += 4;		/* ttl */
	cp += 2;		/* len */
 80032a6:	f104 050a 	add.w	r5, r4, #10


	switch (type)
 80032aa:	3801      	subs	r0, #1
 80032ac:	280e      	cmp	r0, #14
 80032ae:	d813      	bhi.n	80032d8 <dns_answer+0x52>
 80032b0:	e8df f000 	tbb	[pc, r0]
 80032b4:	12121508 	.word	0x12121508
 80032b8:	15153415 	.word	0x15153415
 80032bc:	15121215 	.word	0x15121215
 80032c0:	1220      	.short	0x1220
 80032c2:	28          	.byte	0x28
 80032c3:	00          	.byte	0x00
	{
	case TYPE_A:
		/* Just read the address directly into the structure */
		ip_from_dns[0] = *cp++;
 80032c4:	7aa3      	ldrb	r3, [r4, #10]
 80032c6:	703b      	strb	r3, [r7, #0]
		ip_from_dns[1] = *cp++;
 80032c8:	7ae3      	ldrb	r3, [r4, #11]
 80032ca:	707b      	strb	r3, [r7, #1]
		ip_from_dns[2] = *cp++;
 80032cc:	7b23      	ldrb	r3, [r4, #12]
 80032ce:	70bb      	strb	r3, [r7, #2]
		ip_from_dns[3] = *cp++;
 80032d0:	f104 050e 	add.w	r5, r4, #14
 80032d4:	7b63      	ldrb	r3, [r4, #13]
 80032d6:	70fb      	strb	r3, [r7, #3]
		/* Ignore */
		break;
	}

	return cp;
}
 80032d8:	4628      	mov	r0, r5
 80032da:	b007      	add	sp, #28
 80032dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = parse_name(msg, cp, name, MAXCNAME);
 80032de:	2318      	movs	r3, #24
 80032e0:	466a      	mov	r2, sp
 80032e2:	4629      	mov	r1, r5
 80032e4:	4630      	mov	r0, r6
 80032e6:	f7ff ff74 	bl	80031d2 <parse_name>
		if (len == -1) return 0;
 80032ea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80032ee:	d02d      	beq.n	800334c <dns_answer+0xc6>
		cp += len;
 80032f0:	4405      	add	r5, r0
		break;
 80032f2:	e7f1      	b.n	80032d8 <dns_answer+0x52>
		len = *cp++;
 80032f4:	f104 020b 	add.w	r2, r4, #11
 80032f8:	7aa3      	ldrb	r3, [r4, #10]
		cp += len;
 80032fa:	18d5      	adds	r5, r2, r3
		len = *cp++;
 80032fc:	5cd0      	ldrb	r0, [r2, r3]
		cp += len;
 80032fe:	3001      	adds	r0, #1
 8003300:	4405      	add	r5, r0
		break;
 8003302:	e7e9      	b.n	80032d8 <dns_answer+0x52>
		cp += 2;
 8003304:	340c      	adds	r4, #12
		len = parse_name(msg, cp, name, MAXCNAME);
 8003306:	2318      	movs	r3, #24
 8003308:	466a      	mov	r2, sp
 800330a:	4621      	mov	r1, r4
 800330c:	4630      	mov	r0, r6
 800330e:	f7ff ff60 	bl	80031d2 <parse_name>
		if (len == -1) return 0;
 8003312:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003316:	d01b      	beq.n	8003350 <dns_answer+0xca>
		cp += len;
 8003318:	1825      	adds	r5, r4, r0
		break;
 800331a:	e7dd      	b.n	80032d8 <dns_answer+0x52>
		len = parse_name(msg, cp, name, MAXCNAME);
 800331c:	2318      	movs	r3, #24
 800331e:	466a      	mov	r2, sp
 8003320:	4629      	mov	r1, r5
 8003322:	4630      	mov	r0, r6
 8003324:	f7ff ff55 	bl	80031d2 <parse_name>
		if (len == -1) return 0;
 8003328:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800332c:	d012      	beq.n	8003354 <dns_answer+0xce>
		cp += len;
 800332e:	4405      	add	r5, r0
		len = parse_name(msg, cp, name, MAXCNAME);
 8003330:	2318      	movs	r3, #24
 8003332:	466a      	mov	r2, sp
 8003334:	4629      	mov	r1, r5
 8003336:	4630      	mov	r0, r6
 8003338:	f7ff ff4b 	bl	80031d2 <parse_name>
		if (len == -1) return 0;
 800333c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003340:	d00a      	beq.n	8003358 <dns_answer+0xd2>
		cp += len;
 8003342:	4405      	add	r5, r0
		cp += 4;
 8003344:	3514      	adds	r5, #20
		break;
 8003346:	e7c7      	b.n	80032d8 <dns_answer+0x52>
	if (len == -1) return 0;
 8003348:	2500      	movs	r5, #0
 800334a:	e7c5      	b.n	80032d8 <dns_answer+0x52>
		if (len == -1) return 0;
 800334c:	2500      	movs	r5, #0
 800334e:	e7c3      	b.n	80032d8 <dns_answer+0x52>
		if (len == -1) return 0;
 8003350:	2500      	movs	r5, #0
 8003352:	e7c1      	b.n	80032d8 <dns_answer+0x52>
		if (len == -1) return 0;
 8003354:	2500      	movs	r5, #0
 8003356:	e7bf      	b.n	80032d8 <dns_answer+0x52>
		if (len == -1) return 0;
 8003358:	2500      	movs	r5, #0
 800335a:	e7bd      	b.n	80032d8 <dns_answer+0x52>

0800335c <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	4605      	mov	r5, r0
 8003360:	460e      	mov	r6, r1
 8003362:	4617      	mov	r7, r2
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
	memset(pdhdr, 0, sizeof(*pdhdr));
 8003364:	2300      	movs	r3, #0
 8003366:	6003      	str	r3, [r0, #0]
 8003368:	6043      	str	r3, [r0, #4]
 800336a:	6083      	str	r3, [r0, #8]
 800336c:	60c3      	str	r3, [r0, #12]
 800336e:	8203      	strh	r3, [r0, #16]

	pdhdr->id = get16(&msg[0]);
 8003370:	4608      	mov	r0, r1
 8003372:	f7ff ff21 	bl	80031b8 <get16>
 8003376:	8028      	strh	r0, [r5, #0]
	tmp = get16(&msg[2]);
 8003378:	1cb0      	adds	r0, r6, #2
 800337a:	f7ff ff1d 	bl	80031b8 <get16>
	if (tmp & 0x8000) pdhdr->qr = 1;
 800337e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003382:	d139      	bne.n	80033f8 <parseDNSMSG+0x9c>

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8003384:	f3c0 23c3 	ubfx	r3, r0, #11, #4
 8003388:	70eb      	strb	r3, [r5, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 800338a:	f410 6f80 	tst.w	r0, #1024	; 0x400
 800338e:	d001      	beq.n	8003394 <parseDNSMSG+0x38>
 8003390:	2301      	movs	r3, #1
 8003392:	712b      	strb	r3, [r5, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8003394:	f410 7f00 	tst.w	r0, #512	; 0x200
 8003398:	d001      	beq.n	800339e <parseDNSMSG+0x42>
 800339a:	2301      	movs	r3, #1
 800339c:	716b      	strb	r3, [r5, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 800339e:	f410 7f80 	tst.w	r0, #256	; 0x100
 80033a2:	d001      	beq.n	80033a8 <parseDNSMSG+0x4c>
 80033a4:	2301      	movs	r3, #1
 80033a6:	71ab      	strb	r3, [r5, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 80033a8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80033ac:	d001      	beq.n	80033b2 <parseDNSMSG+0x56>
 80033ae:	2301      	movs	r3, #1
 80033b0:	71eb      	strb	r3, [r5, #7]

	pdhdr->rcode = tmp & 0xf;
 80033b2:	f000 000f 	and.w	r0, r0, #15
 80033b6:	7228      	strb	r0, [r5, #8]
	pdhdr->qdcount = get16(&msg[4]);
 80033b8:	1d30      	adds	r0, r6, #4
 80033ba:	f7ff fefd 	bl	80031b8 <get16>
 80033be:	8168      	strh	r0, [r5, #10]
	pdhdr->ancount = get16(&msg[6]);
 80033c0:	1db0      	adds	r0, r6, #6
 80033c2:	f7ff fef9 	bl	80031b8 <get16>
 80033c6:	81a8      	strh	r0, [r5, #12]
	pdhdr->nscount = get16(&msg[8]);
 80033c8:	f106 0008 	add.w	r0, r6, #8
 80033cc:	f7ff fef4 	bl	80031b8 <get16>
 80033d0:	81e8      	strh	r0, [r5, #14]
	pdhdr->arcount = get16(&msg[10]);
 80033d2:	f106 000a 	add.w	r0, r6, #10
 80033d6:	f7ff feef 	bl	80031b8 <get16>
 80033da:	8228      	strh	r0, [r5, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 80033dc:	f106 010c 	add.w	r1, r6, #12

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 80033e0:	2400      	movs	r4, #0
 80033e2:	896b      	ldrh	r3, [r5, #10]
 80033e4:	42a3      	cmp	r3, r4
 80033e6:	d90a      	bls.n	80033fe <parseDNSMSG+0xa2>
	{
		cp = dns_question(msg, cp);
 80033e8:	4630      	mov	r0, r6
 80033ea:	f7ff ff3c 	bl	8003266 <dns_question>
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80033ee:	4601      	mov	r1, r0
 80033f0:	b330      	cbz	r0, 8003440 <parseDNSMSG+0xe4>
	for (i = 0; i < pdhdr->qdcount; i++)
 80033f2:	3401      	adds	r4, #1
 80033f4:	b2a4      	uxth	r4, r4
 80033f6:	e7f4      	b.n	80033e2 <parseDNSMSG+0x86>
	if (tmp & 0x8000) pdhdr->qr = 1;
 80033f8:	2301      	movs	r3, #1
 80033fa:	70ab      	strb	r3, [r5, #2]
 80033fc:	e7c2      	b.n	8003384 <parseDNSMSG+0x28>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 80033fe:	2400      	movs	r4, #0
 8003400:	89ab      	ldrh	r3, [r5, #12]
 8003402:	42a3      	cmp	r3, r4
 8003404:	d908      	bls.n	8003418 <parseDNSMSG+0xbc>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 8003406:	463a      	mov	r2, r7
 8003408:	4630      	mov	r0, r6
 800340a:	f7ff ff3c 	bl	8003286 <dns_answer>
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 800340e:	4601      	mov	r1, r0
 8003410:	b1c8      	cbz	r0, 8003446 <parseDNSMSG+0xea>
	for (i = 0; i < pdhdr->ancount; i++)
 8003412:	3401      	adds	r4, #1
 8003414:	b2a4      	uxth	r4, r4
 8003416:	e7f3      	b.n	8003400 <parseDNSMSG+0xa4>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8003418:	2300      	movs	r3, #0
 800341a:	e001      	b.n	8003420 <parseDNSMSG+0xc4>
 800341c:	3301      	adds	r3, #1
 800341e:	b29b      	uxth	r3, r3
 8003420:	89ea      	ldrh	r2, [r5, #14]
 8003422:	429a      	cmp	r2, r3
 8003424:	d8fa      	bhi.n	800341c <parseDNSMSG+0xc0>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8003426:	2300      	movs	r3, #0
 8003428:	e001      	b.n	800342e <parseDNSMSG+0xd2>
 800342a:	3301      	adds	r3, #1
 800342c:	b29b      	uxth	r3, r3
 800342e:	8a2a      	ldrh	r2, [r5, #16]
 8003430:	429a      	cmp	r2, r3
 8003432:	d8fa      	bhi.n	800342a <parseDNSMSG+0xce>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 8003434:	7a2b      	ldrb	r3, [r5, #8]
 8003436:	b10b      	cbz	r3, 800343c <parseDNSMSG+0xe0>
	else return 0;
 8003438:	2000      	movs	r0, #0
 800343a:	e003      	b.n	8003444 <parseDNSMSG+0xe8>
	if(pdhdr->rcode == 0) return 1;		// No error
 800343c:	2001      	movs	r0, #1
 800343e:	e001      	b.n	8003444 <parseDNSMSG+0xe8>
		if(!cp) return -1;
 8003440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(!cp) return -1;
 8003446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800344a:	e7fb      	b.n	8003444 <parseDNSMSG+0xe8>

0800344c <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 800344c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	4604      	mov	r4, r0
 8003454:	460d      	mov	r5, r1
 8003456:	4691      	mov	r9, r2
	uint16_t p;
	uint16_t dlen;

	cp = buf;

	DNS_MSGID++;
 8003458:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <dns_makequery+0xbc>)
 800345a:	8819      	ldrh	r1, [r3, #0]
 800345c:	3101      	adds	r1, #1
 800345e:	b289      	uxth	r1, r1
 8003460:	8019      	strh	r1, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 8003462:	4610      	mov	r0, r2
 8003464:	f7ff feae 	bl	80031c4 <put16>
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8003468:	02e1      	lsls	r1, r4, #11
 800346a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	cp = put16(cp, p);
 800346e:	f401 4179 	and.w	r1, r1, #63744	; 0xf900
 8003472:	f7ff fea7 	bl	80031c4 <put16>
	cp = put16(cp, 1);
 8003476:	2101      	movs	r1, #1
 8003478:	f7ff fea4 	bl	80031c4 <put16>
	cp = put16(cp, 0);
 800347c:	2100      	movs	r1, #0
 800347e:	f7ff fea1 	bl	80031c4 <put16>
	cp = put16(cp, 0);
 8003482:	2100      	movs	r1, #0
 8003484:	f7ff fe9e 	bl	80031c4 <put16>
	cp = put16(cp, 0);
 8003488:	2100      	movs	r1, #0
 800348a:	f7ff fe9b 	bl	80031c4 <put16>
 800348e:	4606      	mov	r6, r0

	strcpy(sname, name);
 8003490:	4629      	mov	r1, r5
 8003492:	4668      	mov	r0, sp
 8003494:	f00a fcff 	bl	800de96 <strcpy>
	dname = sname;
	dlen = strlen(dname);
 8003498:	4668      	mov	r0, sp
 800349a:	f7fc fea1 	bl	80001e0 <strlen>
 800349e:	fa1f fa80 	uxth.w	sl, r0
	dname = sname;
 80034a2:	466d      	mov	r5, sp
 80034a4:	e014      	b.n	80034d0 <dns_makequery+0x84>
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
		else len = dlen;			/* Last component */
 80034a6:	4654      	mov	r4, sl

		*cp++ = len;				/* Write length of component */
 80034a8:	f106 0801 	add.w	r8, r6, #1
 80034ac:	7034      	strb	r4, [r6, #0]
		if (len == 0) break;
 80034ae:	b1ec      	cbz	r4, 80034ec <dns_makequery+0xa0>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 80034b0:	4622      	mov	r2, r4
 80034b2:	4629      	mov	r1, r5
 80034b4:	4640      	mov	r0, r8
 80034b6:	f00a fd08 	bl	800deca <strncpy>
		cp += len;
 80034ba:	eb08 0604 	add.w	r6, r8, r4
		if (cp1 == NULL)
 80034be:	b18f      	cbz	r7, 80034e4 <dns_makequery+0x98>
		{
			*cp++ = 0;			/* Last one; write null and finish */
			break;
		}
		dname += len+1;
 80034c0:	1c63      	adds	r3, r4, #1
 80034c2:	441d      	add	r5, r3
		dlen -= len+1;
 80034c4:	ebaa 0404 	sub.w	r4, sl, r4
 80034c8:	b2a4      	uxth	r4, r4
 80034ca:	3c01      	subs	r4, #1
 80034cc:	fa1f fa84 	uxth.w	sl, r4
		cp1 = strchr(dname, '.');
 80034d0:	212e      	movs	r1, #46	; 0x2e
 80034d2:	4628      	mov	r0, r5
 80034d4:	f00a fcd2 	bl	800de7c <strchr>
		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 80034d8:	4607      	mov	r7, r0
 80034da:	2800      	cmp	r0, #0
 80034dc:	d0e3      	beq.n	80034a6 <dns_makequery+0x5a>
 80034de:	1b43      	subs	r3, r0, r5
 80034e0:	b29c      	uxth	r4, r3
 80034e2:	e7e1      	b.n	80034a8 <dns_makequery+0x5c>
			*cp++ = 0;			/* Last one; write null and finish */
 80034e4:	f106 0801 	add.w	r8, r6, #1
 80034e8:	2300      	movs	r3, #0
 80034ea:	7033      	strb	r3, [r6, #0]
	}

	cp = put16(cp, 0x0001);				/* type */
 80034ec:	2101      	movs	r1, #1
 80034ee:	4640      	mov	r0, r8
 80034f0:	f7ff fe68 	bl	80031c4 <put16>
	cp = put16(cp, 0x0001);				/* class */
 80034f4:	2101      	movs	r1, #1
 80034f6:	f7ff fe65 	bl	80031c4 <put16>

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 80034fa:	eba0 0009 	sub.w	r0, r0, r9
}
 80034fe:	b200      	sxth	r0, r0
 8003500:	b006      	add	sp, #24
 8003502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003506:	bf00      	nop
 8003508:	20003990 	.word	0x20003990

0800350c <check_DNS_timeout>:
 */

int8_t check_DNS_timeout(void)
{

	if(dns_1s_tick >= DNS_WAIT_TIME)
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <check_DNS_timeout+0x2c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	b183      	cbz	r3, 8003534 <check_DNS_timeout+0x28>
	{
		dns_1s_tick = 0;
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <check_DNS_timeout+0x2c>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8003518:	4b08      	ldr	r3, [pc, #32]	; (800353c <check_DNS_timeout+0x30>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d804      	bhi.n	800352a <check_DNS_timeout+0x1e>
			retry_count = 0;
			return -1; // timeout occurred
		}
		retry_count++;
 8003520:	3301      	adds	r3, #1
 8003522:	4a06      	ldr	r2, [pc, #24]	; (800353c <check_DNS_timeout+0x30>)
 8003524:	7013      	strb	r3, [r2, #0]
		return 0; // timer over, but no timeout
 8003526:	2000      	movs	r0, #0
 8003528:	4770      	bx	lr
			retry_count = 0;
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <check_DNS_timeout+0x30>)
 800352c:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 800352e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003532:	4770      	bx	lr
	}

	return 1; // no timer over, no timeout occur
 8003534:	2001      	movs	r0, #1
}
 8003536:	4770      	bx	lr
 8003538:	20003988 	.word	0x20003988
 800353c:	20002594 	.word	0x20002594

08003540 <DNS_init>:


/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
	DNS_SOCKET = s; // SOCK_DNS
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <DNS_init+0x14>)
 8003542:	7018      	strb	r0, [r3, #0]
	pDNSMSG = buf; // User's shared buffer
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <DNS_init+0x18>)
 8003546:	6019      	str	r1, [r3, #0]
	DNS_MSGID = DNS_MSG_ID;
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <DNS_init+0x1c>)
 800354a:	f241 1222 	movw	r2, #4386	; 0x1122
 800354e:	801a      	strh	r2, [r3, #0]
}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	20003984 	.word	0x20003984
 8003558:	2000398c 	.word	0x2000398c
 800355c:	20003990 	.word	0x20003990

08003560 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8003560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003564:	b08b      	sub	sp, #44	; 0x2c
 8003566:	4607      	mov	r7, r0
 8003568:	4689      	mov	r9, r1
 800356a:	4690      	mov	r8, r2
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 800356c:	2400      	movs	r4, #0
 800356e:	4b2b      	ldr	r3, [pc, #172]	; (800361c <DNS_run+0xbc>)
 8003570:	701c      	strb	r4, [r3, #0]
	dns_1s_tick = 0;
 8003572:	4b2b      	ldr	r3, [pc, #172]	; (8003620 <DNS_run+0xc0>)
 8003574:	601c      	str	r4, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8003576:	4d2b      	ldr	r5, [pc, #172]	; (8003624 <DNS_run+0xc4>)
 8003578:	4623      	mov	r3, r4
 800357a:	4622      	mov	r2, r4
 800357c:	2102      	movs	r1, #2
 800357e:	7828      	ldrb	r0, [r5, #0]
 8003580:	f7fe fcdc 	bl	8001f3c <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 8003584:	4e28      	ldr	r6, [pc, #160]	; (8003628 <DNS_run+0xc8>)
 8003586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800358a:	6832      	ldr	r2, [r6, #0]
 800358c:	4649      	mov	r1, r9
 800358e:	4620      	mov	r0, r4
 8003590:	f7ff ff5c 	bl	800344c <dns_makequery>
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8003594:	6831      	ldr	r1, [r6, #0]
 8003596:	782c      	ldrb	r4, [r5, #0]
 8003598:	2335      	movs	r3, #53	; 0x35
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	463b      	mov	r3, r7
 800359e:	b282      	uxth	r2, r0
 80035a0:	4620      	mov	r0, r4
 80035a2:	f7fe ff09 	bl	80023b8 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 80035a6:	4b1f      	ldr	r3, [pc, #124]	; (8003624 <DNS_run+0xc4>)
 80035a8:	7818      	ldrb	r0, [r3, #0]
 80035aa:	f7fe fbdc 	bl	8001d66 <getSn_RX_RSR>
 80035ae:	4604      	mov	r4, r0
 80035b0:	b980      	cbnz	r0, 80035d4 <DNS_run+0x74>
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
			break;
		}
		// Check Timeout
		ret_check_timeout = check_DNS_timeout();
 80035b2:	f7ff ffab 	bl	800350c <check_DNS_timeout>
		if (ret_check_timeout < 0) {
 80035b6:	2800      	cmp	r0, #0
 80035b8:	db29      	blt.n	800360e <DNS_run+0xae>
			printf("> DNS Server is not responding : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif
			close(DNS_SOCKET);
			return 0; // timeout occurred
		}
		else if (ret_check_timeout == 0) {
 80035ba:	2800      	cmp	r0, #0
 80035bc:	d1f3      	bne.n	80035a6 <DNS_run+0x46>

#ifdef _DNS_DEBUG_
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 80035be:	4b1a      	ldr	r3, [pc, #104]	; (8003628 <DNS_run+0xc8>)
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	4b18      	ldr	r3, [pc, #96]	; (8003624 <DNS_run+0xc4>)
 80035c4:	7818      	ldrb	r0, [r3, #0]
 80035c6:	2335      	movs	r3, #53	; 0x35
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	463b      	mov	r3, r7
 80035cc:	4622      	mov	r2, r4
 80035ce:	f7fe fef3 	bl	80023b8 <sendto>
 80035d2:	e7e8      	b.n	80035a6 <DNS_run+0x46>
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 80035d4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80035d8:	d901      	bls.n	80035de <DNS_run+0x7e>
 80035da:	f44f 7480 	mov.w	r4, #256	; 0x100
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 80035de:	4e12      	ldr	r6, [pc, #72]	; (8003628 <DNS_run+0xc8>)
 80035e0:	4d10      	ldr	r5, [pc, #64]	; (8003624 <DNS_run+0xc4>)
 80035e2:	7828      	ldrb	r0, [r5, #0]
 80035e4:	f10d 030e 	add.w	r3, sp, #14
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	ab04      	add	r3, sp, #16
 80035ec:	4622      	mov	r2, r4
 80035ee:	6831      	ldr	r1, [r6, #0]
 80035f0:	f7fe ff96 	bl	8002520 <recvfrom>
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 80035f4:	4642      	mov	r2, r8
 80035f6:	6831      	ldr	r1, [r6, #0]
 80035f8:	a805      	add	r0, sp, #20
 80035fa:	f7ff feaf 	bl	800335c <parseDNSMSG>
 80035fe:	4604      	mov	r4, r0
		}
	}
	close(DNS_SOCKET);
 8003600:	7828      	ldrb	r0, [r5, #0]
 8003602:	f7fe fc5f 	bl	8001ec4 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
}
 8003606:	4620      	mov	r0, r4
 8003608:	b00b      	add	sp, #44	; 0x2c
 800360a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			close(DNS_SOCKET);
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <DNS_run+0xc4>)
 8003610:	7818      	ldrb	r0, [r3, #0]
 8003612:	f7fe fc57 	bl	8001ec4 <close>
			return 0; // timeout occurred
 8003616:	2400      	movs	r4, #0
 8003618:	e7f5      	b.n	8003606 <DNS_run+0xa6>
 800361a:	bf00      	nop
 800361c:	20002594 	.word	0x20002594
 8003620:	20003988 	.word	0x20003988
 8003624:	20003984 	.word	0x20003984
 8003628:	2000398c 	.word	0x2000398c

0800362c <DNS_time_handler>:

/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
	static uint16_t ticks = 0;
	ticks++;
 800362c:	4a07      	ldr	r2, [pc, #28]	; (800364c <DNS_time_handler+0x20>)
 800362e:	8813      	ldrh	r3, [r2, #0]
 8003630:	3301      	adds	r3, #1
 8003632:	b29b      	uxth	r3, r3
 8003634:	8013      	strh	r3, [r2, #0]
	if(ticks >= 1000){
 8003636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800363a:	d306      	bcc.n	800364a <DNS_time_handler+0x1e>
		dns_1s_tick++;
 800363c:	4a04      	ldr	r2, [pc, #16]	; (8003650 <DNS_time_handler+0x24>)
 800363e:	6813      	ldr	r3, [r2, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	6013      	str	r3, [r2, #0]
		ticks = 0;
 8003644:	4b01      	ldr	r3, [pc, #4]	; (800364c <DNS_time_handler+0x20>)
 8003646:	2200      	movs	r2, #0
 8003648:	801a      	strh	r2, [r3, #0]
	}
}
 800364a:	4770      	bx	lr
 800364c:	20002596 	.word	0x20002596
 8003650:	20003988 	.word	0x20003988

08003654 <SNTP_init>:
	//calculation for date
	calcdatetime(seconds);
}

void SNTP_init(uint8_t s, uint8_t *ntp_server, uint8_t tz, uint8_t *buf)
{
 8003654:	b410      	push	{r4}
	NTP_SOCKET = s;
 8003656:	4c16      	ldr	r4, [pc, #88]	; (80036b0 <SNTP_init+0x5c>)
 8003658:	7020      	strb	r0, [r4, #0]

	NTPformat.dstaddr[0] = ntp_server[0];
 800365a:	780c      	ldrb	r4, [r1, #0]
 800365c:	4815      	ldr	r0, [pc, #84]	; (80036b4 <SNTP_init+0x60>)
 800365e:	7004      	strb	r4, [r0, #0]
	NTPformat.dstaddr[1] = ntp_server[1];
 8003660:	784c      	ldrb	r4, [r1, #1]
 8003662:	7044      	strb	r4, [r0, #1]
	NTPformat.dstaddr[2] = ntp_server[2];
 8003664:	788c      	ldrb	r4, [r1, #2]
 8003666:	7084      	strb	r4, [r0, #2]
	NTPformat.dstaddr[3] = ntp_server[3];
 8003668:	78c9      	ldrb	r1, [r1, #3]
 800366a:	70c1      	strb	r1, [r0, #3]

	time_zone = tz;
 800366c:	4912      	ldr	r1, [pc, #72]	; (80036b8 <SNTP_init+0x64>)
 800366e:	700a      	strb	r2, [r1, #0]

	data_buf = buf;
 8003670:	4a12      	ldr	r2, [pc, #72]	; (80036bc <SNTP_init+0x68>)
 8003672:	6013      	str	r3, [r2, #0]

	uint8_t Flag;
	NTPformat.leap = 0;           /* leap indicator */
 8003674:	2300      	movs	r3, #0
 8003676:	7143      	strb	r3, [r0, #5]
	NTPformat.version = 4;        /* version number */
 8003678:	2204      	movs	r2, #4
 800367a:	7102      	strb	r2, [r0, #4]
	NTPformat.mode = 3;           /* mode */
 800367c:	2203      	movs	r2, #3
 800367e:	7182      	strb	r2, [r0, #6]
	NTPformat.stratum = 0;        /* stratum */
 8003680:	71c3      	strb	r3, [r0, #7]
	NTPformat.poll = 0;           /* poll interval */
 8003682:	7203      	strb	r3, [r0, #8]
	NTPformat.precision = 0;      /* precision */
 8003684:	7243      	strb	r3, [r0, #9]
	NTPformat.rootdelay = 0;      /* root delay */
 8003686:	60c3      	str	r3, [r0, #12]
	NTPformat.rootdisp = 0;       /* root dispersion */
 8003688:	6103      	str	r3, [r0, #16]
	NTPformat.refid = 0;          /* reference ID */
 800368a:	7503      	strb	r3, [r0, #20]
	NTPformat.reftime = 0;        /* reference time */
 800368c:	2200      	movs	r2, #0
 800368e:	2300      	movs	r3, #0
 8003690:	e9c0 2306 	strd	r2, r3, [r0, #24]
	NTPformat.org = 0;            /* origin timestamp */
 8003694:	e9c0 2308 	strd	r2, r3, [r0, #32]
	NTPformat.rec = 0;            /* receive timestamp */
 8003698:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	NTPformat.xmt = 1;            /* transmit timestamp */
 800369c:	2201      	movs	r2, #1
 800369e:	2300      	movs	r3, #0
 80036a0:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30

	Flag = (NTPformat.leap<<6)+(NTPformat.version<<3)+NTPformat.mode; //one byte Flag
	memcpy(ntpmessage,(void const*)(&Flag),1);
 80036a4:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <SNTP_init+0x6c>)
 80036a6:	2223      	movs	r2, #35	; 0x23
 80036a8:	701a      	strb	r2, [r3, #0]
}
 80036aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	200039d8 	.word	0x200039d8
 80036b4:	200039e0 	.word	0x200039e0
 80036b8:	200039cc 	.word	0x200039cc
 80036bc:	20003998 	.word	0x20003998
 80036c0:	2000399c 	.word	0x2000399c
 80036c4:	00000000 	.word	0x00000000

080036c8 <calcdatetime>:
	// 0 - failed / 1 - success
	return 0;
}

void calcdatetime(tstamp seconds)
{
 80036c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036cc:	b083      	sub	sp, #12
 80036ce:	4680      	mov	r8, r0
 80036d0:	4689      	mov	r9, r1
	tstamp n=0,d=0,total_d=0,rz=0;
	uint16_t y=0,r=0,yr=0;
	signed long long yd=0;

	n = seconds;
	total_d = seconds/(SECS_PERDAY);
 80036d2:	4a91      	ldr	r2, [pc, #580]	; (8003918 <calcdatetime+0x250>)
 80036d4:	2300      	movs	r3, #0
 80036d6:	f7fd fa19 	bl	8000b0c <__aeabi_uldivmod>
	n = seconds;
 80036da:	4642      	mov	r2, r8
 80036dc:	464b      	mov	r3, r9
	uint16_t y=0,r=0,yr=0;
 80036de:	f04f 0e00 	mov.w	lr, #0
	d=0;
 80036e2:	2600      	movs	r6, #0
 80036e4:	2700      	movs	r7, #0
	uint32_t p_year_total_sec=SECS_PERDAY*365;
	uint32_t r_year_total_sec=SECS_PERDAY*366;
	while(n>=p_year_total_sec)
 80036e6:	e00c      	b.n	8003702 <calcdatetime+0x3a>
	{
		if((EPOCH+r)%400==0 || ((EPOCH+r)%100!=0 && (EPOCH+r)%4==0))
		{
			n = n -(r_year_total_sec);
 80036e8:	a585      	add	r5, pc, #532	; (adr r5, 8003900 <calcdatetime+0x238>)
 80036ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80036ee:	1912      	adds	r2, r2, r4
 80036f0:	416b      	adcs	r3, r5
			d = d + 366;
 80036f2:	f516 76b7 	adds.w	r6, r6, #366	; 0x16e
 80036f6:	f147 0700 	adc.w	r7, r7, #0
		else
		{
			n = n - (p_year_total_sec);
			d = d + 365;
		}
		r+=1;
 80036fa:	f10e 0e01 	add.w	lr, lr, #1
 80036fe:	fa1f fe8e 	uxth.w	lr, lr
	while(n>=p_year_total_sec)
 8003702:	a581      	add	r5, pc, #516	; (adr r5, 8003908 <calcdatetime+0x240>)
 8003704:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003708:	429d      	cmp	r5, r3
 800370a:	bf08      	it	eq
 800370c:	4294      	cmpeq	r4, r2
 800370e:	d226      	bcs.n	800375e <calcdatetime+0x96>
		if((EPOCH+r)%400==0 || ((EPOCH+r)%100!=0 && (EPOCH+r)%4==0))
 8003710:	f20e 756c 	addw	r5, lr, #1900	; 0x76c
 8003714:	4c81      	ldr	r4, [pc, #516]	; (800391c <calcdatetime+0x254>)
 8003716:	fb84 4c05 	smull	r4, ip, r4, r5
 800371a:	17ec      	asrs	r4, r5, #31
 800371c:	ebc4 14ec 	rsb	r4, r4, ip, asr #7
 8003720:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8003724:	fb0c 5414 	mls	r4, ip, r4, r5
 8003728:	2c00      	cmp	r4, #0
 800372a:	d0dd      	beq.n	80036e8 <calcdatetime+0x20>
 800372c:	4c7b      	ldr	r4, [pc, #492]	; (800391c <calcdatetime+0x254>)
 800372e:	fb84 4c05 	smull	r4, ip, r4, r5
 8003732:	17ec      	asrs	r4, r5, #31
 8003734:	ebc4 146c 	rsb	r4, r4, ip, asr #5
 8003738:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800373c:	fb0c 5414 	mls	r4, ip, r4, r5
 8003740:	b114      	cbz	r4, 8003748 <calcdatetime+0x80>
 8003742:	f01e 0f03 	tst.w	lr, #3
 8003746:	d0cf      	beq.n	80036e8 <calcdatetime+0x20>
			n = n - (p_year_total_sec);
 8003748:	a571      	add	r5, pc, #452	; (adr r5, 8003910 <calcdatetime+0x248>)
 800374a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800374e:	1912      	adds	r2, r2, r4
 8003750:	416b      	adcs	r3, r5
			d = d + 365;
 8003752:	f240 146d 	movw	r4, #365	; 0x16d
 8003756:	2500      	movs	r5, #0
 8003758:	1936      	adds	r6, r6, r4
 800375a:	416f      	adcs	r7, r5
 800375c:	e7cd      	b.n	80036fa <calcdatetime+0x32>
		y+=1;

	}

	y += EPOCH;
 800375e:	f20e 7e6c 	addw	lr, lr, #1900	; 0x76c
 8003762:	fa1f fe8e 	uxth.w	lr, lr

	Nowdatetime.yy = y;
 8003766:	4b6e      	ldr	r3, [pc, #440]	; (8003920 <calcdatetime+0x258>)
 8003768:	f8a3 e000 	strh.w	lr, [r3]

	yd=0;
	yd = total_d - d;
 800376c:	1b82      	subs	r2, r0, r6
 800376e:	eb61 0307 	sbc.w	r3, r1, r7
	tstamp n=0,d=0,total_d=0,rz=0;
 8003772:	2400      	movs	r4, #0
 8003774:	2500      	movs	r5, #0
 8003776:	e9cd 4500 	strd	r4, r5, [sp]

	yf=1;
 800377a:	f04f 0c01 	mov.w	ip, #1
	while(yd>=28)
 800377e:	e02f      	b.n	80037e0 <calcdatetime+0x118>
	{

		if(yf==1 || yf==3 || yf==5 || yf==7 || yf==8 || yf==10 || yf==12)
		{
			yd -= 31;
 8003780:	3a1f      	subs	r2, #31
 8003782:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
			if(yd<0)break;
 8003786:	2a00      	cmp	r2, #0
 8003788:	f173 0400 	sbcs.w	r4, r3, #0
 800378c:	f2c0 8081 	blt.w	8003892 <calcdatetime+0x1ca>
			rz += 31;
 8003790:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003794:	341f      	adds	r4, #31
 8003796:	f145 0500 	adc.w	r5, r5, #0
 800379a:	e9cd 4500 	strd	r4, r5, [sp]
		}

		if (yf==2)
 800379e:	f1bc 0f02 	cmp.w	ip, #2
 80037a2:	d037      	beq.n	8003814 <calcdatetime+0x14c>
				yd -= 28;
				if(yd<0)break;
				rz += 28;
			}
		}
		if(yf==4 || yf==6 || yf==9 || yf==11 )
 80037a4:	f1bc 0f04 	cmp.w	ip, #4
 80037a8:	d008      	beq.n	80037bc <calcdatetime+0xf4>
 80037aa:	f1bc 0f06 	cmp.w	ip, #6
 80037ae:	d005      	beq.n	80037bc <calcdatetime+0xf4>
 80037b0:	f1bc 0f09 	cmp.w	ip, #9
 80037b4:	d002      	beq.n	80037bc <calcdatetime+0xf4>
 80037b6:	f1bc 0f0b 	cmp.w	ip, #11
 80037ba:	d10d      	bne.n	80037d8 <calcdatetime+0x110>
		{
			yd -= 30;
 80037bc:	3a1e      	subs	r2, #30
 80037be:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
			if(yd<0)break;
 80037c2:	2a00      	cmp	r2, #0
 80037c4:	f173 0400 	sbcs.w	r4, r3, #0
 80037c8:	db63      	blt.n	8003892 <calcdatetime+0x1ca>
			rz += 30;
 80037ca:	e9dd 4500 	ldrd	r4, r5, [sp]
 80037ce:	341e      	adds	r4, #30
 80037d0:	f145 0500 	adc.w	r5, r5, #0
 80037d4:	e9cd 4500 	strd	r4, r5, [sp]
		}
		yf += 1;
 80037d8:	f10c 0c01 	add.w	ip, ip, #1
 80037dc:	fa5f fc8c 	uxtb.w	ip, ip
	while(yd>=28)
 80037e0:	2a1c      	cmp	r2, #28
 80037e2:	f173 0400 	sbcs.w	r4, r3, #0
 80037e6:	db54      	blt.n	8003892 <calcdatetime+0x1ca>
		if(yf==1 || yf==3 || yf==5 || yf==7 || yf==8 || yf==10 || yf==12)
 80037e8:	f1bc 0f01 	cmp.w	ip, #1
 80037ec:	d0c8      	beq.n	8003780 <calcdatetime+0xb8>
 80037ee:	f1bc 0f03 	cmp.w	ip, #3
 80037f2:	d0c5      	beq.n	8003780 <calcdatetime+0xb8>
 80037f4:	f1bc 0f05 	cmp.w	ip, #5
 80037f8:	d0c2      	beq.n	8003780 <calcdatetime+0xb8>
 80037fa:	f1bc 0f07 	cmp.w	ip, #7
 80037fe:	d0bf      	beq.n	8003780 <calcdatetime+0xb8>
 8003800:	f1bc 0f08 	cmp.w	ip, #8
 8003804:	d0bc      	beq.n	8003780 <calcdatetime+0xb8>
 8003806:	f1bc 0f0a 	cmp.w	ip, #10
 800380a:	d0b9      	beq.n	8003780 <calcdatetime+0xb8>
 800380c:	f1bc 0f0c 	cmp.w	ip, #12
 8003810:	d1c5      	bne.n	800379e <calcdatetime+0xd6>
 8003812:	e7b5      	b.n	8003780 <calcdatetime+0xb8>
			if (y%400==0 || (y%100!=0 && y%4==0))
 8003814:	f8df a104 	ldr.w	sl, [pc, #260]	; 800391c <calcdatetime+0x254>
 8003818:	fbaa 4a0e 	umull	r4, sl, sl, lr
 800381c:	ea4f 1ada 	mov.w	sl, sl, lsr #7
 8003820:	f44f 7bc8 	mov.w	fp, #400	; 0x190
 8003824:	fb0b ea1a 	mls	sl, fp, sl, lr
 8003828:	fa1f fa8a 	uxth.w	sl, sl
 800382c:	f1ba 0f00 	cmp.w	sl, #0
 8003830:	d011      	beq.n	8003856 <calcdatetime+0x18e>
 8003832:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800391c <calcdatetime+0x254>
 8003836:	fbaa 4a0e 	umull	r4, sl, sl, lr
 800383a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800383e:	f04f 0b64 	mov.w	fp, #100	; 0x64
 8003842:	fb0b ea1a 	mls	sl, fp, sl, lr
 8003846:	fa1f fa8a 	uxth.w	sl, sl
 800384a:	f1ba 0f00 	cmp.w	sl, #0
 800384e:	d011      	beq.n	8003874 <calcdatetime+0x1ac>
 8003850:	f01e 0f03 	tst.w	lr, #3
 8003854:	d10e      	bne.n	8003874 <calcdatetime+0x1ac>
				yd -= 29;
 8003856:	3a1d      	subs	r2, #29
 8003858:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
				if(yd<0)break;
 800385c:	2a00      	cmp	r2, #0
 800385e:	f173 0400 	sbcs.w	r4, r3, #0
 8003862:	db16      	blt.n	8003892 <calcdatetime+0x1ca>
				rz += 29;
 8003864:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003868:	341d      	adds	r4, #29
 800386a:	f145 0500 	adc.w	r5, r5, #0
 800386e:	e9cd 4500 	strd	r4, r5, [sp]
 8003872:	e797      	b.n	80037a4 <calcdatetime+0xdc>
				yd -= 28;
 8003874:	3a1c      	subs	r2, #28
 8003876:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
				if(yd<0)break;
 800387a:	2a00      	cmp	r2, #0
 800387c:	f173 0400 	sbcs.w	r4, r3, #0
 8003880:	db07      	blt.n	8003892 <calcdatetime+0x1ca>
				rz += 28;
 8003882:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003886:	341c      	adds	r4, #28
 8003888:	f145 0500 	adc.w	r5, r5, #0
 800388c:	e9cd 4500 	strd	r4, r5, [sp]
 8003890:	e788      	b.n	80037a4 <calcdatetime+0xdc>

	}
	Nowdatetime.mo=yf;
 8003892:	4d23      	ldr	r5, [pc, #140]	; (8003920 <calcdatetime+0x258>)
 8003894:	f885 c002 	strb.w	ip, [r5, #2]
	yr = total_d-d-rz;
 8003898:	1b80      	subs	r0, r0, r6
 800389a:	b280      	uxth	r0, r0
 800389c:	f8bd 4000 	ldrh.w	r4, [sp]
 80038a0:	1b04      	subs	r4, r0, r4
 80038a2:	b2a4      	uxth	r4, r4

	yr += 1;
 80038a4:	3401      	adds	r4, #1

	Nowdatetime.dd=yr;
 80038a6:	70ec      	strb	r4, [r5, #3]

	//calculation for time
	seconds = seconds%SECS_PERDAY;
 80038a8:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <calcdatetime+0x250>)
 80038aa:	2300      	movs	r3, #0
 80038ac:	4640      	mov	r0, r8
 80038ae:	4649      	mov	r1, r9
 80038b0:	f7fd f92c 	bl	8000b0c <__aeabi_uldivmod>
 80038b4:	4616      	mov	r6, r2
 80038b6:	461f      	mov	r7, r3
	Nowdatetime.hh = seconds/3600;
 80038b8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80038bc:	2300      	movs	r3, #0
 80038be:	4630      	mov	r0, r6
 80038c0:	4639      	mov	r1, r7
 80038c2:	f7fd f923 	bl	8000b0c <__aeabi_uldivmod>
 80038c6:	7128      	strb	r0, [r5, #4]
	Nowdatetime.mm = (seconds%3600)/60;
 80038c8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80038cc:	2300      	movs	r3, #0
 80038ce:	4630      	mov	r0, r6
 80038d0:	4639      	mov	r1, r7
 80038d2:	f7fd f91b 	bl	8000b0c <__aeabi_uldivmod>
 80038d6:	4616      	mov	r6, r2
 80038d8:	461f      	mov	r7, r3
 80038da:	223c      	movs	r2, #60	; 0x3c
 80038dc:	2300      	movs	r3, #0
 80038de:	4630      	mov	r0, r6
 80038e0:	4639      	mov	r1, r7
 80038e2:	f7fd f913 	bl	8000b0c <__aeabi_uldivmod>
 80038e6:	7168      	strb	r0, [r5, #5]
	Nowdatetime.ss = (seconds%3600)%60;
 80038e8:	223c      	movs	r2, #60	; 0x3c
 80038ea:	2300      	movs	r3, #0
 80038ec:	4630      	mov	r0, r6
 80038ee:	4639      	mov	r1, r7
 80038f0:	f7fd f90c 	bl	8000b0c <__aeabi_uldivmod>
 80038f4:	71aa      	strb	r2, [r5, #6]

}
 80038f6:	b003      	add	sp, #12
 80038f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038fc:	f3af 8000 	nop.w
 8003900:	fe1d7b00 	.word	0xfe1d7b00
 8003904:	ffffffff 	.word	0xffffffff
 8003908:	01e1337f 	.word	0x01e1337f
 800390c:	00000000 	.word	0x00000000
 8003910:	fe1ecc80 	.word	0xfe1ecc80
 8003914:	ffffffff 	.word	0xffffffff
 8003918:	00015180 	.word	0x00015180
 800391c:	51eb851f 	.word	0x51eb851f
 8003920:	200039d0 	.word	0x200039d0

08003924 <get_seconds_from_ntp_server>:
{
 8003924:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
	for (i = 0; i < 4; i++)
 8003928:	2400      	movs	r4, #0
	tstamp seconds = 0;
 800392a:	f04f 0b00 	mov.w	fp, #0
 800392e:	f04f 0c00 	mov.w	ip, #0
	for (i = 0; i < 4; i++)
 8003932:	e00e      	b.n	8003952 <get_seconds_from_ntp_server+0x2e>
		seconds = (seconds << 8) | buf[idx + i];
 8003934:	ea4f 270c 	mov.w	r7, ip, lsl #8
 8003938:	ea47 671b 	orr.w	r7, r7, fp, lsr #24
 800393c:	ea4f 260b 	mov.w	r6, fp, lsl #8
 8003940:	190b      	adds	r3, r1, r4
 8003942:	5cc2      	ldrb	r2, [r0, r3]
 8003944:	2300      	movs	r3, #0
 8003946:	ea42 0b06 	orr.w	fp, r2, r6
 800394a:	ea43 0c07 	orr.w	ip, r3, r7
	for (i = 0; i < 4; i++)
 800394e:	3401      	adds	r4, #1
 8003950:	b2e4      	uxtb	r4, r4
 8003952:	2c03      	cmp	r4, #3
 8003954:	d9ee      	bls.n	8003934 <get_seconds_from_ntp_server+0x10>
	switch (time_zone)
 8003956:	49aa      	ldr	r1, [pc, #680]	; (8003c00 <get_seconds_from_ntp_server+0x2dc>)
 8003958:	7809      	ldrb	r1, [r1, #0]
 800395a:	2931      	cmp	r1, #49	; 0x31
 800395c:	d83a      	bhi.n	80039d4 <get_seconds_from_ntp_server+0xb0>
 800395e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003962:	0032      	.short	0x0032
 8003964:	0047003f 	.word	0x0047003f
 8003968:	0057004f 	.word	0x0057004f
 800396c:	005f005f 	.word	0x005f005f
 8003970:	00640064 	.word	0x00640064
 8003974:	006c006c 	.word	0x006c006c
 8003978:	00740074 	.word	0x00740074
 800397c:	007c0074 	.word	0x007c0074
 8003980:	00840084 	.word	0x00840084
 8003984:	00910089 	.word	0x00910089
 8003988:	009e0099 	.word	0x009e0099
 800398c:	00390039 	.word	0x00390039
 8003990:	00a300a3 	.word	0x00a300a3
 8003994:	00a800a3 	.word	0x00a800a3
 8003998:	00ad00a8 	.word	0x00ad00a8
 800399c:	00b500ad 	.word	0x00b500ad
 80039a0:	00c200bd 	.word	0x00c200bd
 80039a4:	00d200ca 	.word	0x00d200ca
 80039a8:	00e200da 	.word	0x00e200da
 80039ac:	00f200ea 	.word	0x00f200ea
 80039b0:	00ff00fa 	.word	0x00ff00fa
 80039b4:	010f0107 	.word	0x010f0107
 80039b8:	011f0117 	.word	0x011f0117
 80039bc:	012f0127 	.word	0x012f0127
 80039c0:	013f0137 	.word	0x013f0137
 80039c4:	0147      	.short	0x0147
		seconds -=  12*3600;
 80039c6:	488f      	ldr	r0, [pc, #572]	; (8003c04 <get_seconds_from_ntp_server+0x2e0>)
 80039c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039cc:	eb1b 0b00 	adds.w	fp, fp, r0
 80039d0:	eb4c 0c01 	adc.w	ip, ip, r1
	calcdatetime(seconds);
 80039d4:	4658      	mov	r0, fp
 80039d6:	4661      	mov	r1, ip
 80039d8:	f7ff fe76 	bl	80036c8 <calcdatetime>
}
 80039dc:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
		seconds -=  11*3600;
 80039e0:	4889      	ldr	r0, [pc, #548]	; (8003c08 <get_seconds_from_ntp_server+0x2e4>)
 80039e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039e6:	eb1b 0b00 	adds.w	fp, fp, r0
 80039ea:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 80039ee:	e7f1      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds -=  10*3600;
 80039f0:	4886      	ldr	r0, [pc, #536]	; (8003c0c <get_seconds_from_ntp_server+0x2e8>)
 80039f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039f6:	eb1b 0b00 	adds.w	fp, fp, r0
 80039fa:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 80039fe:	e7e9      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds -=  (9*3600+30*60);
 8003a00:	4883      	ldr	r0, [pc, #524]	; (8003c10 <get_seconds_from_ntp_server+0x2ec>)
 8003a02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a06:	eb1b 0b00 	adds.w	fp, fp, r0
 8003a0a:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003a0e:	e7e1      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds -=  9*3600;
 8003a10:	4880      	ldr	r0, [pc, #512]	; (8003c14 <get_seconds_from_ntp_server+0x2f0>)
 8003a12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a16:	eb1b 0b00 	adds.w	fp, fp, r0
 8003a1a:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003a1e:	e7d9      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds -=  8*3600;
 8003a20:	f5bb 4be1 	subs.w	fp, fp, #28800	; 0x7080
 8003a24:	f14c 3cff 	adc.w	ip, ip, #4294967295	; 0xffffffff
		break;
 8003a28:	e7d4      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds -=  7*3600;
 8003a2a:	487b      	ldr	r0, [pc, #492]	; (8003c18 <get_seconds_from_ntp_server+0x2f4>)
 8003a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a30:	eb1b 0b00 	adds.w	fp, fp, r0
 8003a34:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003a38:	e7cc      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds -=  6*3600;
 8003a3a:	4878      	ldr	r0, [pc, #480]	; (8003c1c <get_seconds_from_ntp_server+0x2f8>)
 8003a3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a40:	eb1b 0b00 	adds.w	fp, fp, r0
 8003a44:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003a48:	e7c4      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds -= 5*3600;
 8003a4a:	4875      	ldr	r0, [pc, #468]	; (8003c20 <get_seconds_from_ntp_server+0x2fc>)
 8003a4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a50:	eb1b 0b00 	adds.w	fp, fp, r0
 8003a54:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003a58:	e7bc      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds -=  (4*3600+30*60);
 8003a5a:	4872      	ldr	r0, [pc, #456]	; (8003c24 <get_seconds_from_ntp_server+0x300>)
 8003a5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a60:	eb1b 0b00 	adds.w	fp, fp, r0
 8003a64:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003a68:	e7b4      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds -=  4*3600;
 8003a6a:	f5bb 5b61 	subs.w	fp, fp, #14400	; 0x3840
 8003a6e:	f14c 3cff 	adc.w	ip, ip, #4294967295	; 0xffffffff
		break;
 8003a72:	e7af      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds -=  (3*3600+30*60);
 8003a74:	486c      	ldr	r0, [pc, #432]	; (8003c28 <get_seconds_from_ntp_server+0x304>)
 8003a76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a7a:	eb1b 0b00 	adds.w	fp, fp, r0
 8003a7e:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003a82:	e7a7      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds -=  3*3600;
 8003a84:	4869      	ldr	r0, [pc, #420]	; (8003c2c <get_seconds_from_ntp_server+0x308>)
 8003a86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a8a:	eb1b 0b00 	adds.w	fp, fp, r0
 8003a8e:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003a92:	e79f      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds -=  2*3600;
 8003a94:	f5bb 5be1 	subs.w	fp, fp, #7200	; 0x1c20
 8003a98:	f14c 3cff 	adc.w	ip, ip, #4294967295	; 0xffffffff
		break;
 8003a9c:	e79a      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds -=  1*3600;
 8003a9e:	f5bb 6b61 	subs.w	fp, fp, #3600	; 0xe10
 8003aa2:	f14c 3cff 	adc.w	ip, ip, #4294967295	; 0xffffffff
		break;
 8003aa6:	e795      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  1*3600;
 8003aa8:	f51b 6b61 	adds.w	fp, fp, #3600	; 0xe10
 8003aac:	f14c 0c00 	adc.w	ip, ip, #0
		break;
 8003ab0:	e790      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  2*3600;
 8003ab2:	f51b 5be1 	adds.w	fp, fp, #7200	; 0x1c20
 8003ab6:	f14c 0c00 	adc.w	ip, ip, #0
		break;
 8003aba:	e78b      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  3*3600;
 8003abc:	f642 2030 	movw	r0, #10800	; 0x2a30
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	eb1b 0b00 	adds.w	fp, fp, r0
 8003ac6:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003aca:	e783      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  (3*3600+30*60);
 8003acc:	f243 1038 	movw	r0, #12600	; 0x3138
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	eb1b 0b00 	adds.w	fp, fp, r0
 8003ad6:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003ada:	e77b      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  4*3600;
 8003adc:	f51b 5b61 	adds.w	fp, fp, #14400	; 0x3840
 8003ae0:	f14c 0c00 	adc.w	ip, ip, #0
		break;
 8003ae4:	e776      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  (4*3600+30*60);
 8003ae6:	f643 7048 	movw	r0, #16200	; 0x3f48
 8003aea:	2100      	movs	r1, #0
 8003aec:	eb1b 0b00 	adds.w	fp, fp, r0
 8003af0:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003af4:	e76e      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  5*3600;
 8003af6:	f244 6050 	movw	r0, #18000	; 0x4650
 8003afa:	2100      	movs	r1, #0
 8003afc:	eb1b 0b00 	adds.w	fp, fp, r0
 8003b00:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003b04:	e766      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  (5*3600+30*60);
 8003b06:	f644 5058 	movw	r0, #19800	; 0x4d58
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	eb1b 0b00 	adds.w	fp, fp, r0
 8003b10:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003b14:	e75e      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  (5*3600+45*60);
 8003b16:	f245 00dc 	movw	r0, #20700	; 0x50dc
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	eb1b 0b00 	adds.w	fp, fp, r0
 8003b20:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003b24:	e756      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  6*3600;
 8003b26:	f245 4060 	movw	r0, #21600	; 0x5460
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	eb1b 0b00 	adds.w	fp, fp, r0
 8003b30:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003b34:	e74e      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  (6*3600+30*60);
 8003b36:	f645 3068 	movw	r0, #23400	; 0x5b68
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	eb1b 0b00 	adds.w	fp, fp, r0
 8003b40:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003b44:	e746      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  7*3600;
 8003b46:	f246 2070 	movw	r0, #25200	; 0x6270
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	eb1b 0b00 	adds.w	fp, fp, r0
 8003b50:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003b54:	e73e      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  8*3600;
 8003b56:	f51b 4be1 	adds.w	fp, fp, #28800	; 0x7080
 8003b5a:	f14c 0c00 	adc.w	ip, ip, #0
		break;
 8003b5e:	e739      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  9*3600;
 8003b60:	f647 6090 	movw	r0, #32400	; 0x7e90
 8003b64:	2100      	movs	r1, #0
 8003b66:	eb1b 0b00 	adds.w	fp, fp, r0
 8003b6a:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003b6e:	e731      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  (9*3600+30*60);
 8003b70:	f248 5098 	movw	r0, #34200	; 0x8598
 8003b74:	2100      	movs	r1, #0
 8003b76:	eb1b 0b00 	adds.w	fp, fp, r0
 8003b7a:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003b7e:	e729      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  10*3600;
 8003b80:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8003b84:	2100      	movs	r1, #0
 8003b86:	eb1b 0b00 	adds.w	fp, fp, r0
 8003b8a:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003b8e:	e721      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  (10*3600+30*60);
 8003b90:	f249 30a8 	movw	r0, #37800	; 0x93a8
 8003b94:	2100      	movs	r1, #0
 8003b96:	eb1b 0b00 	adds.w	fp, fp, r0
 8003b9a:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003b9e:	e719      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  11*3600;
 8003ba0:	f649 20b0 	movw	r0, #39600	; 0x9ab0
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	eb1b 0b00 	adds.w	fp, fp, r0
 8003baa:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003bae:	e711      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  (11*3600+30*60);
 8003bb0:	f24a 10b8 	movw	r0, #41400	; 0xa1b8
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	eb1b 0b00 	adds.w	fp, fp, r0
 8003bba:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003bbe:	e709      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  12*3600;
 8003bc0:	f64a 00c0 	movw	r0, #43200	; 0xa8c0
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	eb1b 0b00 	adds.w	fp, fp, r0
 8003bca:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003bce:	e701      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  (12*3600+45*60);
 8003bd0:	f24b 304c 	movw	r0, #45900	; 0xb34c
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	eb1b 0b00 	adds.w	fp, fp, r0
 8003bda:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003bde:	e6f9      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  13*3600;
 8003be0:	f24b 60d0 	movw	r0, #46800	; 0xb6d0
 8003be4:	2100      	movs	r1, #0
 8003be6:	eb1b 0b00 	adds.w	fp, fp, r0
 8003bea:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003bee:	e6f1      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
		seconds +=  14*3600;
 8003bf0:	f24c 40e0 	movw	r0, #50400	; 0xc4e0
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	eb1b 0b00 	adds.w	fp, fp, r0
 8003bfa:	eb4c 0c01 	adc.w	ip, ip, r1
		break;
 8003bfe:	e6e9      	b.n	80039d4 <get_seconds_from_ntp_server+0xb0>
 8003c00:	200039cc 	.word	0x200039cc
 8003c04:	ffff5740 	.word	0xffff5740
 8003c08:	ffff6550 	.word	0xffff6550
 8003c0c:	ffff7360 	.word	0xffff7360
 8003c10:	ffff7a68 	.word	0xffff7a68
 8003c14:	ffff8170 	.word	0xffff8170
 8003c18:	ffff9d90 	.word	0xffff9d90
 8003c1c:	ffffaba0 	.word	0xffffaba0
 8003c20:	ffffb9b0 	.word	0xffffb9b0
 8003c24:	ffffc0b8 	.word	0xffffc0b8
 8003c28:	ffffcec8 	.word	0xffffcec8
 8003c2c:	ffffd5d0 	.word	0xffffd5d0

08003c30 <SNTP_run>:
{
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	4604      	mov	r4, r0
	uint32_t destip = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	9303      	str	r3, [sp, #12]
	switch(getSn_SR(NTP_SOCKET))
 8003c3a:	4b40      	ldr	r3, [pc, #256]	; (8003d3c <SNTP_run+0x10c>)
 8003c3c:	7818      	ldrb	r0, [r3, #0]
 8003c3e:	0080      	lsls	r0, r0, #2
 8003c40:	3001      	adds	r0, #1
 8003c42:	00c0      	lsls	r0, r0, #3
 8003c44:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8003c48:	f7fd ff7a 	bl	8001b40 <WIZCHIP_READ>
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d069      	beq.n	8003d24 <SNTP_run+0xf4>
 8003c50:	2822      	cmp	r0, #34	; 0x22
 8003c52:	d171      	bne.n	8003d38 <SNTP_run+0x108>
		if ((RSR_len = getSn_RX_RSR(NTP_SOCKET)) > 0)
 8003c54:	4b39      	ldr	r3, [pc, #228]	; (8003d3c <SNTP_run+0x10c>)
 8003c56:	7818      	ldrb	r0, [r3, #0]
 8003c58:	f7fe f885 	bl	8001d66 <getSn_RX_RSR>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	b328      	cbz	r0, 8003cac <SNTP_run+0x7c>
			if (RSR_len > MAX_SNTP_BUF_SIZE) RSR_len = MAX_SNTP_BUF_SIZE;	// if Rx data size is lager than TX_RX_MAX_BUF_SIZE
 8003c60:	2838      	cmp	r0, #56	; 0x38
 8003c62:	d900      	bls.n	8003c66 <SNTP_run+0x36>
 8003c64:	2238      	movs	r2, #56	; 0x38
			recvfrom(NTP_SOCKET, data_buf, RSR_len, (uint8_t *)&destip, &destport);
 8003c66:	4e36      	ldr	r6, [pc, #216]	; (8003d40 <SNTP_run+0x110>)
 8003c68:	4d34      	ldr	r5, [pc, #208]	; (8003d3c <SNTP_run+0x10c>)
 8003c6a:	7828      	ldrb	r0, [r5, #0]
 8003c6c:	f10d 030a 	add.w	r3, sp, #10
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	ab03      	add	r3, sp, #12
 8003c74:	6831      	ldr	r1, [r6, #0]
 8003c76:	f7fe fc53 	bl	8002520 <recvfrom>
			get_seconds_from_ntp_server(data_buf,startindex);
 8003c7a:	2128      	movs	r1, #40	; 0x28
 8003c7c:	6830      	ldr	r0, [r6, #0]
 8003c7e:	f7ff fe51 	bl	8003924 <get_seconds_from_ntp_server>
			time->yy = Nowdatetime.yy;
 8003c82:	4b30      	ldr	r3, [pc, #192]	; (8003d44 <SNTP_run+0x114>)
 8003c84:	881a      	ldrh	r2, [r3, #0]
 8003c86:	8022      	strh	r2, [r4, #0]
			time->mo = Nowdatetime.mo;
 8003c88:	789a      	ldrb	r2, [r3, #2]
 8003c8a:	70a2      	strb	r2, [r4, #2]
			time->dd = Nowdatetime.dd;
 8003c8c:	78da      	ldrb	r2, [r3, #3]
 8003c8e:	70e2      	strb	r2, [r4, #3]
			time->hh = Nowdatetime.hh;
 8003c90:	791a      	ldrb	r2, [r3, #4]
 8003c92:	7122      	strb	r2, [r4, #4]
			time->mm = Nowdatetime.mm;
 8003c94:	795a      	ldrb	r2, [r3, #5]
 8003c96:	7162      	strb	r2, [r4, #5]
			time->ss = Nowdatetime.ss;
 8003c98:	799b      	ldrb	r3, [r3, #6]
 8003c9a:	71a3      	strb	r3, [r4, #6]
			ntp_retry_cnt=0;
 8003c9c:	4b2a      	ldr	r3, [pc, #168]	; (8003d48 <SNTP_run+0x118>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	801a      	strh	r2, [r3, #0]
			close(NTP_SOCKET);
 8003ca2:	7828      	ldrb	r0, [r5, #0]
 8003ca4:	f7fe f90e 	bl	8001ec4 <close>
			return 1;
 8003ca8:	2001      	movs	r0, #1
 8003caa:	e043      	b.n	8003d34 <SNTP_run+0x104>
		if(ntp_retry_cnt<0xFFFF)
 8003cac:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <SNTP_run+0x118>)
 8003cae:	881a      	ldrh	r2, [r3, #0]
 8003cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d02c      	beq.n	8003d12 <SNTP_run+0xe2>
			if(ntp_retry_cnt==0)//first send request, no need to wait
 8003cb8:	b16a      	cbz	r2, 8003cd6 <SNTP_run+0xa6>
				if((ntp_retry_cnt % 0xFFF) == 0) //wait time
 8003cba:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <SNTP_run+0x11c>)
 8003cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc0:	1ad1      	subs	r1, r2, r3
 8003cc2:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8003cc6:	0adb      	lsrs	r3, r3, #11
 8003cc8:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	b183      	cbz	r3, 8003cf4 <SNTP_run+0xc4>
	return 0;
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	e02e      	b.n	8003d34 <SNTP_run+0x104>
				sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 8003cd6:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <SNTP_run+0x10c>)
 8003cd8:	7818      	ldrb	r0, [r3, #0]
 8003cda:	237b      	movs	r3, #123	; 0x7b
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	4b1c      	ldr	r3, [pc, #112]	; (8003d50 <SNTP_run+0x120>)
 8003ce0:	2230      	movs	r2, #48	; 0x30
 8003ce2:	491c      	ldr	r1, [pc, #112]	; (8003d54 <SNTP_run+0x124>)
 8003ce4:	f7fe fb68 	bl	80023b8 <sendto>
				ntp_retry_cnt++;
 8003ce8:	4a17      	ldr	r2, [pc, #92]	; (8003d48 <SNTP_run+0x118>)
 8003cea:	8813      	ldrh	r3, [r2, #0]
 8003cec:	3301      	adds	r3, #1
 8003cee:	8013      	strh	r3, [r2, #0]
	return 0;
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	e01f      	b.n	8003d34 <SNTP_run+0x104>
					sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 8003cf4:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <SNTP_run+0x10c>)
 8003cf6:	7818      	ldrb	r0, [r3, #0]
 8003cf8:	237b      	movs	r3, #123	; 0x7b
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <SNTP_run+0x120>)
 8003cfe:	2230      	movs	r2, #48	; 0x30
 8003d00:	4914      	ldr	r1, [pc, #80]	; (8003d54 <SNTP_run+0x124>)
 8003d02:	f7fe fb59 	bl	80023b8 <sendto>
					ntp_retry_cnt++;
 8003d06:	4a10      	ldr	r2, [pc, #64]	; (8003d48 <SNTP_run+0x118>)
 8003d08:	8813      	ldrh	r3, [r2, #0]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	8013      	strh	r3, [r2, #0]
	return 0;
 8003d0e:	2000      	movs	r0, #0
 8003d10:	e010      	b.n	8003d34 <SNTP_run+0x104>
			ntp_retry_cnt=0;
 8003d12:	2400      	movs	r4, #0
 8003d14:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <SNTP_run+0x118>)
 8003d16:	801c      	strh	r4, [r3, #0]
			close(NTP_SOCKET);
 8003d18:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <SNTP_run+0x10c>)
 8003d1a:	7818      	ldrb	r0, [r3, #0]
 8003d1c:	f7fe f8d2 	bl	8001ec4 <close>
	return 0;
 8003d20:	4620      	mov	r0, r4
 8003d22:	e007      	b.n	8003d34 <SNTP_run+0x104>
		socket(NTP_SOCKET,Sn_MR_UDP,ntp_port,0);
 8003d24:	2300      	movs	r3, #0
 8003d26:	227b      	movs	r2, #123	; 0x7b
 8003d28:	2102      	movs	r1, #2
 8003d2a:	4804      	ldr	r0, [pc, #16]	; (8003d3c <SNTP_run+0x10c>)
 8003d2c:	7800      	ldrb	r0, [r0, #0]
 8003d2e:	f7fe f905 	bl	8001f3c <socket>
	return 0;
 8003d32:	2000      	movs	r0, #0
}
 8003d34:	b004      	add	sp, #16
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 8003d38:	2000      	movs	r0, #0
 8003d3a:	e7fb      	b.n	8003d34 <SNTP_run+0x104>
 8003d3c:	200039d8 	.word	0x200039d8
 8003d40:	20003998 	.word	0x20003998
 8003d44:	200039d0 	.word	0x200039d0
 8003d48:	20002598 	.word	0x20002598
 8003d4c:	00100101 	.word	0x00100101
 8003d50:	200039e0 	.word	0x200039e0
 8003d54:	2000399c 	.word	0x2000399c

08003d58 <ModbusRTUMaster_ReceieveResponseCallback>:
	}
	RuntimeStats_ModbusMasterWrongRespInc();
	return Modbus_CRCERR;
}

void ModbusRTUMaster_ReceieveResponseCallback (ModbusRTUMaster_t *modbus){
 8003d58:	b508      	push	{r3, lr}
	vTaskNotifyGiveFromISR(modbus -> task, NULL);
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
 8003d60:	f008 fc98 	bl	800c694 <vTaskNotifyGiveFromISR>
}
 8003d64:	bd08      	pop	{r3, pc}
	...

08003d68 <ModbusRTUMaster_Init>:
void ModbusRTUMaster_Init (ModbusRTUMaster_t *modbus, UART_HandleTypeDef *port, TickType_t timeout){
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	4615      	mov	r5, r2
	modbus -> ModbusSerialPort = port;
 8003d6e:	f840 1b04 	str.w	r1, [r0], #4
	UARTDMA_Init(&modbus -> dma, port);
 8003d72:	f001 fe02 	bl	800597a <UARTDMA_Init>
	modbus->dma.callbackArgs = modbus;
 8003d76:	f8c4 4112 	str.w	r4, [r4, #274]	; 0x112
	modbus->dma.callback = ModbusRTUMaster_ReceieveResponseCallback;
 8003d7a:	4b03      	ldr	r3, [pc, #12]	; (8003d88 <ModbusRTUMaster_Init+0x20>)
 8003d7c:	f8c4 310e 	str.w	r3, [r4, #270]	; 0x10e
	modbus -> timeout_t = timeout / portTICK_PERIOD_MS;
 8003d80:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
}
 8003d84:	bd38      	pop	{r3, r4, r5, pc}
 8003d86:	bf00      	nop
 8003d88:	08003d59 	.word	0x08003d59

08003d8c <ModbusRTU_CalculateCRC>:
uint16_t ModbusRTU_CalculateCRC (uint8_t frame_length, uint8_t *frame){
 8003d8c:	b430      	push	{r4, r5}
	for(int i = 0; i < frame_length; i++){
 8003d8e:	2500      	movs	r5, #0
	uint16_t calculatedCRC = 0xFFFF;
 8003d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
	for(int i = 0; i < frame_length; i++){
 8003d94:	e00d      	b.n	8003db2 <ModbusRTU_CalculateCRC+0x26>
				calculatedCRC >>= 1;
 8003d96:	085b      	lsrs	r3, r3, #1
		for(int j = 8; j > 0; j--){
 8003d98:	3a01      	subs	r2, #1
 8003d9a:	2a00      	cmp	r2, #0
 8003d9c:	dd07      	ble.n	8003dae <ModbusRTU_CalculateCRC+0x22>
			if(calculatedCRC & 0x0001){
 8003d9e:	f013 0f01 	tst.w	r3, #1
 8003da2:	d0f8      	beq.n	8003d96 <ModbusRTU_CalculateCRC+0xa>
				calculatedCRC ^= 0xA001;
 8003da4:	f24a 0401 	movw	r4, #40961	; 0xa001
 8003da8:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
 8003dac:	e7f4      	b.n	8003d98 <ModbusRTU_CalculateCRC+0xc>
		ptr++;
 8003dae:	3101      	adds	r1, #1
	for(int i = 0; i < frame_length; i++){
 8003db0:	3501      	adds	r5, #1
 8003db2:	42a8      	cmp	r0, r5
 8003db4:	dd03      	ble.n	8003dbe <ModbusRTU_CalculateCRC+0x32>
		calculatedCRC ^= (*ptr);
 8003db6:	780a      	ldrb	r2, [r1, #0]
 8003db8:	4053      	eors	r3, r2
		for(int j = 8; j > 0; j--){
 8003dba:	2208      	movs	r2, #8
 8003dbc:	e7ed      	b.n	8003d9a <ModbusRTU_CalculateCRC+0xe>
	CRChigh = (calculatedCRC & 0x00FF) <<8;
 8003dbe:	0218      	lsls	r0, r3, #8
 8003dc0:	b280      	uxth	r0, r0
	calculatedCRC = CRChigh + CRClow;
 8003dc2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
}
 8003dc6:	b280      	uxth	r0, r0
 8003dc8:	bc30      	pop	{r4, r5}
 8003dca:	4770      	bx	lr

08003dcc <ModbusRTU_CheckCRC>:
uint8_t ModbusRTU_CheckCRC (uint8_t frame_length, uint8_t *frame){
 8003dcc:	b570      	push	{r4, r5, r6, lr}
 8003dce:	4604      	mov	r4, r0
 8003dd0:	460d      	mov	r5, r1
	uint16_t crc = ModbusRTU_CalculateCRC(frame_length - 2, frame);
 8003dd2:	1e86      	subs	r6, r0, #2
 8003dd4:	b2f0      	uxtb	r0, r6
 8003dd6:	f7ff ffd9 	bl	8003d8c <ModbusRTU_CalculateCRC>
	uint16_t frameCRC = (uint16_t)(*(frame + frame_length - 2));
 8003dda:	5daa      	ldrb	r2, [r5, r6]
	frameCRC += *(frame + frame_length - 1);
 8003ddc:	3c01      	subs	r4, #1
 8003dde:	5d2b      	ldrb	r3, [r5, r4]
 8003de0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003de4:	b29b      	uxth	r3, r3
	if(crc == frameCRC){
 8003de6:	4298      	cmp	r0, r3
 8003de8:	d001      	beq.n	8003dee <ModbusRTU_CheckCRC+0x22>
	return 0;
 8003dea:	2000      	movs	r0, #0
}
 8003dec:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8003dee:	2001      	movs	r0, #1
 8003df0:	e7fc      	b.n	8003dec <ModbusRTU_CheckCRC+0x20>
	...

08003df4 <ModbusRTUMaster_ReadInputRegisters>:
ModbusState_t ModbusRTUMaster_ReadInputRegisters (ModbusRTUMaster_t *modbus, uint8_t slave_address, uint16_t first_register_address, uint16_t registers_count, uint8_t *response_frame, uint8_t* out){
 8003df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df8:	b085      	sub	sp, #20
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	4680      	mov	r8, r0
 8003dfe:	468b      	mov	fp, r1
 8003e00:	4692      	mov	sl, r2
 8003e02:	461e      	mov	r6, r3
	uint8_t transmit_frame_buffer[8] = {0};
 8003e04:	2500      	movs	r5, #0
 8003e06:	81fd      	strh	r5, [r7, #14]
	uint8_t received_frame_length = (registers_count * 2) + 5;
 8003e08:	fa5f f983 	uxtb.w	r9, r3
 8003e0c:	ea4f 0449 	mov.w	r4, r9, lsl #1
 8003e10:	b2e4      	uxtb	r4, r4
 8003e12:	3405      	adds	r4, #5
 8003e14:	b2e4      	uxtb	r4, r4
	uint8_t received_frame_buffer[received_frame_length];
 8003e16:	1de3      	adds	r3, r4, #7
 8003e18:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
 8003e1c:	ebad 0d03 	sub.w	sp, sp, r3
 8003e20:	f8c7 d004 	str.w	sp, [r7, #4]
	memset(received_frame_buffer, 0, received_frame_length);
 8003e24:	4622      	mov	r2, r4
 8003e26:	4629      	mov	r1, r5
 8003e28:	4668      	mov	r0, sp
 8003e2a:	f009 ff46 	bl	800dcba <memset>
	transmit_frame_buffer[0] = slave_address;
 8003e2e:	f887 b008 	strb.w	fp, [r7, #8]
	transmit_frame_buffer[1] = 0x04;
 8003e32:	2304      	movs	r3, #4
 8003e34:	727b      	strb	r3, [r7, #9]
	transmit_frame_buffer[2] = (uint8_t)(first_register_address >> 8);
 8003e36:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8003e3a:	72bb      	strb	r3, [r7, #10]
	transmit_frame_buffer[3] = (uint8_t)first_register_address;
 8003e3c:	f887 a00b 	strb.w	sl, [r7, #11]
	transmit_frame_buffer[4] = (uint8_t)(registers_count >> 8);
 8003e40:	0a36      	lsrs	r6, r6, #8
 8003e42:	733e      	strb	r6, [r7, #12]
	transmit_frame_buffer[5] = (uint8_t)(registers_count);
 8003e44:	f887 900d 	strb.w	r9, [r7, #13]
	transmitCRC = ModbusRTU_CalculateCRC (6, transmit_frame_buffer);
 8003e48:	f107 0108 	add.w	r1, r7, #8
 8003e4c:	2006      	movs	r0, #6
 8003e4e:	f7ff ff9d 	bl	8003d8c <ModbusRTU_CalculateCRC>
	transmit_frame_buffer[6] = (transmitCRC >> 8);
 8003e52:	0a03      	lsrs	r3, r0, #8
 8003e54:	73bb      	strb	r3, [r7, #14]
	transmit_frame_buffer[7] = (uint8_t)(transmitCRC);
 8003e56:	73f8      	strb	r0, [r7, #15]
	HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_SET);
 8003e58:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8003f30 <ModbusRTUMaster_ReadInputRegisters+0x13c>
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	2102      	movs	r1, #2
 8003e60:	4648      	mov	r0, r9
 8003e62:	f003 fde8 	bl	8007a36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 8003e66:	4e31      	ldr	r6, [pc, #196]	; (8003f2c <ModbusRTUMaster_ReadInputRegisters+0x138>)
 8003e68:	462a      	mov	r2, r5
 8003e6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e6e:	4630      	mov	r0, r6
 8003e70:	f003 fde1 	bl	8007a36 <HAL_GPIO_WritePin>
	RuntimeStats_ModbusMasterRqSendInc();
 8003e74:	f000 f9d6 	bl	8004224 <RuntimeStats_ModbusMasterRqSendInc>
	modbus -> task = xTaskGetCurrentTaskHandle();
 8003e78:	f008 f996 	bl	800c1a8 <xTaskGetCurrentTaskHandle>
 8003e7c:	f8c8 011c 	str.w	r0, [r8, #284]	; 0x11c
	HAL_UART_Transmit(modbus -> ModbusSerialPort, transmit_frame_buffer, 8, 100);
 8003e80:	2364      	movs	r3, #100	; 0x64
 8003e82:	2208      	movs	r2, #8
 8003e84:	18b9      	adds	r1, r7, r2
 8003e86:	f8d8 0000 	ldr.w	r0, [r8]
 8003e8a:	f006 fa51 	bl	800a330 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 8003e8e:	462a      	mov	r2, r5
 8003e90:	2102      	movs	r1, #2
 8003e92:	4648      	mov	r0, r9
 8003e94:	f003 fdcf 	bl	8007a36 <HAL_GPIO_WritePin>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 8003e98:	f8d8 1118 	ldr.w	r1, [r8, #280]	; 0x118
 8003e9c:	2001      	movs	r0, #1
 8003e9e:	f008 fad7 	bl	800c450 <ulTaskNotifyTake>
 8003ea2:	4605      	mov	r5, r0
	vTaskDelay(1);
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	f007 ff07 	bl	800bcb8 <vTaskDelay>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	f003 fdc0 	bl	8007a36 <HAL_GPIO_WritePin>
	if(ulNotificationValue){
 8003eb6:	b38d      	cbz	r5, 8003f1c <ModbusRTUMaster_ReadInputRegisters+0x128>
		rxLen = UARTDMA_GetData(&(modbus -> dma), received_frame_buffer);
 8003eb8:	687d      	ldr	r5, [r7, #4]
 8003eba:	4629      	mov	r1, r5
 8003ebc:	f108 0004 	add.w	r0, r8, #4
 8003ec0:	f001 fd89 	bl	80059d6 <UARTDMA_GetData>
		if(ModbusRTU_CheckCRC(rxLen, received_frame_buffer)){
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	b2c0      	uxtb	r0, r0
 8003ec8:	f7ff ff80 	bl	8003dcc <ModbusRTU_CheckCRC>
 8003ecc:	b310      	cbz	r0, 8003f14 <ModbusRTUMaster_ReadInputRegisters+0x120>
			if((received_frame_buffer[0] == slave_address) && ((received_frame_buffer[1] & 127) == 0x04)){
 8003ece:	782b      	ldrb	r3, [r5, #0]
 8003ed0:	455b      	cmp	r3, fp
 8003ed2:	d11b      	bne.n	8003f0c <ModbusRTUMaster_ReadInputRegisters+0x118>
 8003ed4:	786b      	ldrb	r3, [r5, #1]
 8003ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003eda:	2a04      	cmp	r2, #4
 8003edc:	d116      	bne.n	8003f0c <ModbusRTUMaster_ReadInputRegisters+0x118>
				if((response_frame != NULL) && (!(received_frame_buffer[1] & 128))){
 8003ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ee0:	b112      	cbz	r2, 8003ee8 <ModbusRTUMaster_ReadInputRegisters+0xf4>
 8003ee2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ee6:	d00a      	beq.n	8003efe <ModbusRTUMaster_ReadInputRegisters+0x10a>
				if(out != NULL){
 8003ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eea:	b123      	cbz	r3, 8003ef6 <ModbusRTUMaster_ReadInputRegisters+0x102>
					memcpy(out, received_frame_buffer, received_frame_length);
 8003eec:	4622      	mov	r2, r4
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f009 fed7 	bl	800dca4 <memcpy>
				RuntimeStats_ModbusMasterRespOkInc();
 8003ef6:	f000 f9a5 	bl	8004244 <RuntimeStats_ModbusMasterRespOkInc>
				return Modbus_OK;
 8003efa:	2000      	movs	r0, #0
 8003efc:	e011      	b.n	8003f22 <ModbusRTUMaster_ReadInputRegisters+0x12e>
					memcpy(response_frame, received_frame_buffer + 3, received_frame_length - 5);
 8003efe:	1f62      	subs	r2, r4, #5
 8003f00:	4629      	mov	r1, r5
 8003f02:	3103      	adds	r1, #3
 8003f04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f06:	f009 fecd 	bl	800dca4 <memcpy>
 8003f0a:	e7ed      	b.n	8003ee8 <ModbusRTUMaster_ReadInputRegisters+0xf4>
			RuntimeStats_ModbusMasterWrongRespInc();
 8003f0c:	f000 f9a2 	bl	8004254 <RuntimeStats_ModbusMasterWrongRespInc>
			return Modbus_CRCERR;
 8003f10:	2002      	movs	r0, #2
 8003f12:	e006      	b.n	8003f22 <ModbusRTUMaster_ReadInputRegisters+0x12e>
		RuntimeStats_ModbusMasterWrongRespInc();
 8003f14:	f000 f99e 	bl	8004254 <RuntimeStats_ModbusMasterWrongRespInc>
		return Modbus_CRCERR;
 8003f18:	2002      	movs	r0, #2
 8003f1a:	e002      	b.n	8003f22 <ModbusRTUMaster_ReadInputRegisters+0x12e>
		RuntimeStats_ModbusMasterNoRespInc();
 8003f1c:	f000 f98a 	bl	8004234 <RuntimeStats_ModbusMasterNoRespInc>
		return Modbus_TIMEOUT;
 8003f20:	2001      	movs	r0, #1
}
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40020800 	.word	0x40020800
 8003f30:	40020000 	.word	0x40020000

08003f34 <ModbusRTUMaster_TCPForward>:

int16_t ModbusRTUMaster_TCPForward (ModbusRTUMaster_t* modbus, uint8_t* inData, uint32_t len, uint8_t* outData){
 8003f34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4605      	mov	r5, r0
 8003f3c:	460e      	mov	r6, r1
 8003f3e:	4614      	mov	r4, r2
 8003f40:	469a      	mov	sl, r3

	uint16_t calculatedCRC;
	static uint16_t rxDataExcLen = 5;
	uint16_t regsCnt = 0;

	uint8_t txFrameBuf [len + 2];
 8003f42:	f102 0309 	add.w	r3, r2, #9
 8003f46:	f023 0307 	bic.w	r3, r3, #7
 8003f4a:	ebad 0d03 	sub.w	sp, sp, r3
 8003f4e:	46eb      	mov	fp, sp

	rxDataExcLen = 5;
 8003f50:	4b4c      	ldr	r3, [pc, #304]	; (8004084 <ModbusRTUMaster_TCPForward+0x150>)
 8003f52:	2205      	movs	r2, #5
 8003f54:	801a      	strh	r2, [r3, #0]

	calculatedCRC = ModbusRTU_CalculateCRC(len, inData);
 8003f56:	b2e0      	uxtb	r0, r4
 8003f58:	f7ff ff18 	bl	8003d8c <ModbusRTU_CalculateCRC>
 8003f5c:	4680      	mov	r8, r0
	memcpy(txFrameBuf, inData, len);
 8003f5e:	4622      	mov	r2, r4
 8003f60:	4631      	mov	r1, r6
 8003f62:	4668      	mov	r0, sp
 8003f64:	f009 fe9e 	bl	800dca4 <memcpy>
	txFrameBuf[len] = (calculatedCRC >> 8);
 8003f68:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8003f6c:	f80d 3004 	strb.w	r3, [sp, r4]
	txFrameBuf[len + 1] = (uint8_t)(calculatedCRC);
 8003f70:	1c63      	adds	r3, r4, #1
 8003f72:	f80d 8003 	strb.w	r8, [sp, r3]

	switch(txFrameBuf[1]){
 8003f76:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	2b0f      	cmp	r3, #15
 8003f7e:	d825      	bhi.n	8003fcc <ModbusRTUMaster_TCPForward+0x98>
 8003f80:	e8df f003 	tbb	[pc, r3]
 8003f84:	19190808 	.word	0x19190808
 8003f88:	24247575 	.word	0x24247575
 8003f8c:	24242424 	.word	0x24242424
 8003f90:	75752424 	.word	0x75752424
		case 1:
		case 2:
			regsCnt = ((uint16_t)txFrameBuf[2] << 8) + txFrameBuf[3];
 8003f94:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8003f98:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8003f9c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003fa0:	b29b      	uxth	r3, r3
			rxDataExcLen += regsCnt / 8;
 8003fa2:	08da      	lsrs	r2, r3, #3
 8003fa4:	3205      	adds	r2, #5
 8003fa6:	4937      	ldr	r1, [pc, #220]	; (8004084 <ModbusRTUMaster_TCPForward+0x150>)
 8003fa8:	800a      	strh	r2, [r1, #0]
			if(regsCnt % 8){
 8003faa:	f013 0f07 	tst.w	r3, #7
 8003fae:	d00d      	beq.n	8003fcc <ModbusRTUMaster_TCPForward+0x98>
				rxDataExcLen ++;
 8003fb0:	3201      	adds	r2, #1
 8003fb2:	800a      	strh	r2, [r1, #0]
 8003fb4:	e00a      	b.n	8003fcc <ModbusRTUMaster_TCPForward+0x98>
			}
			break;
		case 3:
		case 4:
			regsCnt = ((uint16_t)txFrameBuf[4] << 8) + txFrameBuf[5];
 8003fb6:	f89b 2004 	ldrb.w	r2, [fp, #4]
 8003fba:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8003fbe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003fc2:	b29b      	uxth	r3, r3
			rxDataExcLen += regsCnt * 2;
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	3305      	adds	r3, #5
 8003fc8:	4a2e      	ldr	r2, [pc, #184]	; (8004084 <ModbusRTUMaster_TCPForward+0x150>)
 8003fca:	8013      	strh	r3, [r2, #0]
			break;
		default:
			break;
	}

	uint8_t rxFrameBuf [rxDataExcLen];
 8003fcc:	4b2d      	ldr	r3, [pc, #180]	; (8004084 <ModbusRTUMaster_TCPForward+0x150>)
 8003fce:	881a      	ldrh	r2, [r3, #0]
 8003fd0:	1dd3      	adds	r3, r2, #7
 8003fd2:	08db      	lsrs	r3, r3, #3
 8003fd4:	4669      	mov	r1, sp
 8003fd6:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8003fda:	469d      	mov	sp, r3
 8003fdc:	466e      	mov	r6, sp
	memset(rxFrameBuf, 0, rxDataExcLen);
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4668      	mov	r0, sp
 8003fe2:	f009 fe6a 	bl	800dcba <memset>

	modbus -> task = xTaskGetCurrentTaskHandle();
 8003fe6:	f008 f8df 	bl	800c1a8 <xTaskGetCurrentTaskHandle>
 8003fea:	f8c5 011c 	str.w	r0, [r5, #284]	; 0x11c

	HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_SET);
 8003fee:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004088 <ModbusRTUMaster_TCPForward+0x154>
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	4648      	mov	r0, r9
 8003ff8:	f003 fd1d 	bl	8007a36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 8003ffc:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800408c <ModbusRTUMaster_TCPForward+0x158>
 8004000:	2200      	movs	r2, #0
 8004002:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004006:	4640      	mov	r0, r8
 8004008:	f003 fd15 	bl	8007a36 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(modbus -> ModbusSerialPort, txFrameBuf, len + 2, 100);
 800400c:	1ca2      	adds	r2, r4, #2
 800400e:	2364      	movs	r3, #100	; 0x64
 8004010:	b292      	uxth	r2, r2
 8004012:	4659      	mov	r1, fp
 8004014:	6828      	ldr	r0, [r5, #0]
 8004016:	f006 f98b 	bl	800a330 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 800401a:	2200      	movs	r2, #0
 800401c:	2102      	movs	r1, #2
 800401e:	4648      	mov	r0, r9
 8004020:	f003 fd09 	bl	8007a36 <HAL_GPIO_WritePin>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 8004024:	f8d5 1118 	ldr.w	r1, [r5, #280]	; 0x118
 8004028:	2001      	movs	r0, #1
 800402a:	f008 fa11 	bl	800c450 <ulTaskNotifyTake>
 800402e:	4604      	mov	r4, r0
	vTaskDelay(1);
 8004030:	2001      	movs	r0, #1
 8004032:	f007 fe41 	bl	800bcb8 <vTaskDelay>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 8004036:	2201      	movs	r2, #1
 8004038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800403c:	4640      	mov	r0, r8
 800403e:	f003 fcfa 	bl	8007a36 <HAL_GPIO_WritePin>
	if(ulNotificationValue){
 8004042:	b1c4      	cbz	r4, 8004076 <ModbusRTUMaster_TCPForward+0x142>
		rxLen = UARTDMA_GetData(&(modbus -> dma), rxFrameBuf);
 8004044:	4631      	mov	r1, r6
 8004046:	1d28      	adds	r0, r5, #4
 8004048:	f001 fcc5 	bl	80059d6 <UARTDMA_GetData>
 800404c:	4604      	mov	r4, r0
		if(ModbusRTU_CheckCRC(rxLen, rxFrameBuf)){
 800404e:	4631      	mov	r1, r6
 8004050:	b2c0      	uxtb	r0, r0
 8004052:	f7ff febb 	bl	8003dcc <ModbusRTU_CheckCRC>
 8004056:	b188      	cbz	r0, 800407c <ModbusRTUMaster_TCPForward+0x148>
			memcpy(outData, &rxFrameBuf[0], rxLen - 2);
 8004058:	1ea2      	subs	r2, r4, #2
 800405a:	4631      	mov	r1, r6
 800405c:	4650      	mov	r0, sl
 800405e:	f009 fe21 	bl	800dca4 <memcpy>
			retval = (int16_t)rxLen - 2;
 8004062:	b2a0      	uxth	r0, r4
 8004064:	3802      	subs	r0, #2
 8004066:	b200      	sxth	r0, r0
	}else{
		retval = -1;
	}

	return retval;
}
 8004068:	46bd      	mov	sp, r7
 800406a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rxDataExcLen = 8;
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <ModbusRTUMaster_TCPForward+0x150>)
 8004070:	2208      	movs	r2, #8
 8004072:	801a      	strh	r2, [r3, #0]
			break;
 8004074:	e7aa      	b.n	8003fcc <ModbusRTUMaster_TCPForward+0x98>
		retval = -1;
 8004076:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800407a:	e7f5      	b.n	8004068 <ModbusRTUMaster_TCPForward+0x134>
	int16_t retval = -1;
 800407c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004080:	e7f2      	b.n	8004068 <ModbusRTUMaster_TCPForward+0x134>
 8004082:	bf00      	nop
 8004084:	20002430 	.word	0x20002430
 8004088:	40020000 	.word	0x40020000
 800408c:	40020800 	.word	0x40020800

08004090 <ModbusTCPServer_Proc>:
	int16_t dataLen = 0;
	uint16_t transId = 0, protId = 0;
	uint8_t slaveId, fcCode;
	uint16_t lenCpy = len - 6;

	if((inBuf == NULL) || (outBuf == NULL) || (len == 0)){
 8004090:	2900      	cmp	r1, #0
 8004092:	d03e      	beq.n	8004112 <ModbusTCPServer_Proc+0x82>
int32_t ModbusTCPServer_Proc(ModbusRTUMaster_t* modbus, uint8_t* inBuf, uint16_t len, uint8_t* outBuf){
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	1f97      	subs	r7, r2, #6
 8004098:	b2bf      	uxth	r7, r7
 800409a:	460c      	mov	r4, r1
	if((inBuf == NULL) || (outBuf == NULL) || (len == 0)){
 800409c:	2b00      	cmp	r3, #0
 800409e:	d03b      	beq.n	8004118 <ModbusTCPServer_Proc+0x88>
 80040a0:	2a00      	cmp	r2, #0
 80040a2:	d03c      	beq.n	800411e <ModbusTCPServer_Proc+0x8e>

	if(retval > -1){
		wrPtr = outBuf;
		rdPtr = inBuf;

		transId = ((uint16_t)(*rdPtr) << 8) + (*(rdPtr + 1));
 80040a4:	780a      	ldrb	r2, [r1, #0]
 80040a6:	784e      	ldrb	r6, [r1, #1]
 80040a8:	eb06 2602 	add.w	r6, r6, r2, lsl #8
 80040ac:	b2b6      	uxth	r6, r6
		rdPtr += 2;
		protId = ((uint16_t)(*rdPtr) << 8) + (*(rdPtr + 1));
 80040ae:	788a      	ldrb	r2, [r1, #2]
 80040b0:	78cd      	ldrb	r5, [r1, #3]
 80040b2:	eb05 2502 	add.w	r5, r5, r2, lsl #8
 80040b6:	b2ad      	uxth	r5, r5
		rdPtr += 2;
		dataLen = ((uint16_t)(*rdPtr) << 8) + (*(rdPtr + 1));
 80040b8:	7909      	ldrb	r1, [r1, #4]
 80040ba:	7962      	ldrb	r2, [r4, #5]
 80040bc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80040c0:	b212      	sxth	r2, r2
		rdPtr += 2;
 80040c2:	1da1      	adds	r1, r4, #6

		if(protId == 0){
 80040c4:	bb75      	cbnz	r5, 8004124 <ModbusTCPServer_Proc+0x94>
			if(dataLen  == lenCpy){
 80040c6:	42ba      	cmp	r2, r7
 80040c8:	d12f      	bne.n	800412a <ModbusTCPServer_Proc+0x9a>
				memcpy(wrPtr, (uint8_t*)&transId,2);
				*wrPtr = (uint8_t)((transId & 0xFF00) >> 8);
 80040ca:	0a37      	lsrs	r7, r6, #8
 80040cc:	701f      	strb	r7, [r3, #0]
				wrPtr ++;
				*wrPtr = (uint8_t)(transId & 0xFF);
 80040ce:	705e      	strb	r6, [r3, #1]
				wrPtr ++;

				*wrPtr = (uint8_t)((protId & 0xFF00) >> 8);
 80040d0:	0a2e      	lsrs	r6, r5, #8
 80040d2:	709e      	strb	r6, [r3, #2]
				wrPtr ++;
				*wrPtr = (uint8_t)(protId & 0xFF);
 80040d4:	70dd      	strb	r5, [r3, #3]
				wrPtr ++;

				slaveId = *rdPtr;
 80040d6:	79a5      	ldrb	r5, [r4, #6]
				fcCode = *(rdPtr + 1);
 80040d8:	79e6      	ldrb	r6, [r4, #7]

				if((slaveId > 0) && (slaveId < 255)){
 80040da:	1e6c      	subs	r4, r5, #1
 80040dc:	b2e4      	uxtb	r4, r4
 80040de:	2cfd      	cmp	r4, #253	; 0xfd
 80040e0:	d80b      	bhi.n	80040fa <ModbusTCPServer_Proc+0x6a>
 80040e2:	461c      	mov	r4, r3
					dataLen = ModbusRTUMaster_TCPForward(modbus, rdPtr, dataLen, wrPtr + 2);
 80040e4:	3306      	adds	r3, #6
 80040e6:	f7ff ff25 	bl	8003f34 <ModbusRTUMaster_TCPForward>
					if(dataLen > 3){
 80040ea:	2803      	cmp	r0, #3
 80040ec:	dd20      	ble.n	8004130 <ModbusTCPServer_Proc+0xa0>
						*wrPtr = (uint8_t)((dataLen & 0xFF00) >> 8);
 80040ee:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80040f2:	7123      	strb	r3, [r4, #4]
						wrPtr ++;
						*wrPtr = (uint8_t)(dataLen & 0xFF);
 80040f4:	7160      	strb	r0, [r4, #5]
						wrPtr ++;

						retval = (int32_t)(dataLen + 6);
 80040f6:	3006      	adds	r0, #6
 80040f8:	e00a      	b.n	8004110 <ModbusTCPServer_Proc+0x80>
					}
				}else{
					switch(fcCode){
						default:
							*wrPtr = 0;
 80040fa:	2200      	movs	r2, #0
 80040fc:	711a      	strb	r2, [r3, #4]
							wrPtr ++;
							*wrPtr = 5;
 80040fe:	2205      	movs	r2, #5
 8004100:	715a      	strb	r2, [r3, #5]
							wrPtr ++;
							*wrPtr = slaveId;
 8004102:	719d      	strb	r5, [r3, #6]
							wrPtr ++;
							*wrPtr = fcCode | 128;
 8004104:	f066 067f 	orn	r6, r6, #127	; 0x7f
 8004108:	71de      	strb	r6, [r3, #7]
							wrPtr ++;
							*wrPtr = 1;
 800410a:	2201      	movs	r2, #1
 800410c:	721a      	strb	r2, [r3, #8]
							wrPtr ++;

							retval = 11;
 800410e:	200b      	movs	r0, #11
			retval = -1;
		}
	}

	return retval;
}
 8004110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004116:	4770      	bx	lr
 8004118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800411c:	e7f8      	b.n	8004110 <ModbusTCPServer_Proc+0x80>
 800411e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004122:	e7f5      	b.n	8004110 <ModbusTCPServer_Proc+0x80>
			retval = -1;
 8004124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004128:	e7f2      	b.n	8004110 <ModbusTCPServer_Proc+0x80>
				retval = -1;
 800412a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800412e:	e7ef      	b.n	8004110 <ModbusTCPServer_Proc+0x80>
	int32_t retval = 0;
 8004130:	2000      	movs	r0, #0
	return retval;
 8004132:	e7ed      	b.n	8004110 <ModbusTCPServer_Proc+0x80>

08004134 <RB_CreateBuffer>:

RB_Status RB_CreateBuffer(RingBuffer *Buffer, uint8_t Size)
{
	//*Buffer = malloc(sizeof(RingBuffer) + (sizeof(uint8_t) * Size));

	if(Buffer == NULL)
 8004134:	4603      	mov	r3, r0
 8004136:	b130      	cbz	r0, 8004146 <RB_CreateBuffer+0x12>
	{
		return RB_NOTCREATED;
	}

	(Buffer)->Size = 32;
 8004138:	2220      	movs	r2, #32
 800413a:	7002      	strb	r2, [r0, #0]
	(Buffer)->Head = 0;
 800413c:	2000      	movs	r0, #0
 800413e:	7058      	strb	r0, [r3, #1]
	(Buffer)->Tail = 0;
 8004140:	7098      	strb	r0, [r3, #2]
	(Buffer)->Elements = 0;
 8004142:	70d8      	strb	r0, [r3, #3]

	return RB_OK;
 8004144:	4770      	bx	lr
		return RB_NOTCREATED;
 8004146:	2002      	movs	r0, #2
}
 8004148:	4770      	bx	lr

0800414a <RB_WriteToBuffer>:

RB_Status RB_WriteToBuffer(RingBuffer *Buffer, uint8_t Data)
{
 800414a:	b430      	push	{r4, r5}
	uint8_t TempHead;

	TempHead = (Buffer->Head + 1) % Buffer->Size;
 800414c:	7843      	ldrb	r3, [r0, #1]
 800414e:	1c5d      	adds	r5, r3, #1
 8004150:	7804      	ldrb	r4, [r0, #0]
 8004152:	fb95 f2f4 	sdiv	r2, r5, r4
 8004156:	fb04 5212 	mls	r2, r4, r2, r5
 800415a:	b2d2      	uxtb	r2, r2

	if( TempHead == Buffer->Tail) // No room for new data
 800415c:	7885      	ldrb	r5, [r0, #2]
 800415e:	4295      	cmp	r5, r2
 8004160:	d00e      	beq.n	8004180 <RB_WriteToBuffer+0x36>
	{
		return RB_NOFREESPACE;
	}
	else
	{
		Buffer->Buffer[Buffer->Head] = Data;
 8004162:	18c2      	adds	r2, r0, r3
 8004164:	7111      	strb	r1, [r2, #4]

		Buffer->Head++;
 8004166:	3301      	adds	r3, #1
 8004168:	b2db      	uxtb	r3, r3
		Buffer->Head %= Buffer->Size;
 800416a:	fbb3 f2f4 	udiv	r2, r3, r4
 800416e:	fb04 3312 	mls	r3, r4, r2, r3
 8004172:	7043      	strb	r3, [r0, #1]

		Buffer->Elements++;
 8004174:	78c3      	ldrb	r3, [r0, #3]
 8004176:	3301      	adds	r3, #1
 8004178:	70c3      	strb	r3, [r0, #3]
	}

	return RB_OK;
 800417a:	2000      	movs	r0, #0
}
 800417c:	bc30      	pop	{r4, r5}
 800417e:	4770      	bx	lr
		return RB_NOFREESPACE;
 8004180:	2003      	movs	r0, #3
 8004182:	e7fb      	b.n	800417c <RB_WriteToBuffer+0x32>

08004184 <RB_ReadFromBuffer>:

RB_Status RB_ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
	if( Buffer->Tail == Buffer->Head) // No data to read
 8004184:	7883      	ldrb	r3, [r0, #2]
 8004186:	7842      	ldrb	r2, [r0, #1]
 8004188:	4293      	cmp	r3, r2
 800418a:	d010      	beq.n	80041ae <RB_ReadFromBuffer+0x2a>
	{
		return RB_NOELEMENTS;
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 800418c:	4403      	add	r3, r0
 800418e:	791b      	ldrb	r3, [r3, #4]
 8004190:	700b      	strb	r3, [r1, #0]

		Buffer->Tail++;
 8004192:	7883      	ldrb	r3, [r0, #2]
 8004194:	3301      	adds	r3, #1
 8004196:	b2db      	uxtb	r3, r3
		Buffer->Tail %= Buffer->Size;
 8004198:	7801      	ldrb	r1, [r0, #0]
 800419a:	fbb3 f2f1 	udiv	r2, r3, r1
 800419e:	fb01 3312 	mls	r3, r1, r2, r3
 80041a2:	7083      	strb	r3, [r0, #2]

		Buffer->Elements--;
 80041a4:	78c3      	ldrb	r3, [r0, #3]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	70c3      	strb	r3, [r0, #3]
	}
	return RB_OK;
 80041aa:	2000      	movs	r0, #0
 80041ac:	4770      	bx	lr
		return RB_NOELEMENTS;
 80041ae:	2004      	movs	r0, #4
}
 80041b0:	4770      	bx	lr

080041b2 <RB_ElementsAvailable>:

uint8_t RB_ElementsAvailable(RingBuffer *Buffer)
{
	return Buffer->Elements;
}
 80041b2:	78c0      	ldrb	r0, [r0, #3]
 80041b4:	4770      	bx	lr
	...

080041b8 <RuntimeStats_TelnetRxInc>:
void RuntimeStats_Init(void){
	memset(&commStats, 0, 48);
}

void RuntimeStats_TelnetRxInc (void){
	commStats.telnetStats.rxFrames++;
 80041b8:	4a02      	ldr	r2, [pc, #8]	; (80041c4 <RuntimeStats_TelnetRxInc+0xc>)
 80041ba:	6813      	ldr	r3, [r2, #0]
 80041bc:	3301      	adds	r3, #1
 80041be:	6013      	str	r3, [r2, #0]
}
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20003a18 	.word	0x20003a18

080041c8 <RuntimeStats_TelnetTxInc>:

void RuntimeStats_TelnetTxInc (void){
	commStats.telnetStats.txFrames++;
 80041c8:	4a02      	ldr	r2, [pc, #8]	; (80041d4 <RuntimeStats_TelnetTxInc+0xc>)
 80041ca:	6853      	ldr	r3, [r2, #4]
 80041cc:	3301      	adds	r3, #1
 80041ce:	6053      	str	r3, [r2, #4]
}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20003a18 	.word	0x20003a18

080041d8 <RuntimeStats_TelnetCurrIPSet>:

void RuntimeStats_TelnetCurrIPSet (uint8_t* ip){
	memcpy(&(commStats.telnetStats.currIP), ip, 4);
 80041d8:	6802      	ldr	r2, [r0, #0]
 80041da:	4b01      	ldr	r3, [pc, #4]	; (80041e0 <RuntimeStats_TelnetCurrIPSet+0x8>)
 80041dc:	609a      	str	r2, [r3, #8]
}
 80041de:	4770      	bx	lr
 80041e0:	20003a18 	.word	0x20003a18

080041e4 <RuntimeStats_TelnetLastIPSet>:

void RuntimeStats_TelnetLastIPSet (void){
	memcpy(&(commStats.telnetStats.lastIP), &(commStats.telnetStats.currIP), 4);
 80041e4:	4b02      	ldr	r3, [pc, #8]	; (80041f0 <RuntimeStats_TelnetLastIPSet+0xc>)
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	60da      	str	r2, [r3, #12]
	memset(&(commStats.telnetStats.currIP), 0, 4);
 80041ea:	2200      	movs	r2, #0
 80041ec:	609a      	str	r2, [r3, #8]
}
 80041ee:	4770      	bx	lr
 80041f0:	20003a18 	.word	0x20003a18

080041f4 <RuntimeStats_TelnetGetRxCnt>:

uint32_t RuntimeStats_TelnetGetRxCnt (void){
	return commStats.telnetStats.rxFrames;
}
 80041f4:	4b01      	ldr	r3, [pc, #4]	; (80041fc <RuntimeStats_TelnetGetRxCnt+0x8>)
 80041f6:	6818      	ldr	r0, [r3, #0]
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20003a18 	.word	0x20003a18

08004200 <RuntimeStats_TelnetGetTxCnt>:

uint32_t RuntimeStats_TelnetGetTxCnt (void){
	return commStats.telnetStats.txFrames;
}
 8004200:	4b01      	ldr	r3, [pc, #4]	; (8004208 <RuntimeStats_TelnetGetTxCnt+0x8>)
 8004202:	6858      	ldr	r0, [r3, #4]
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20003a18 	.word	0x20003a18

0800420c <RuntimeStats_TelnetGetCurIP>:

void RuntimeStats_TelnetGetCurIP (uint8_t* ip){
	memcpy(ip, &(commStats.telnetStats.currIP), 4);
 800420c:	4b01      	ldr	r3, [pc, #4]	; (8004214 <RuntimeStats_TelnetGetCurIP+0x8>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	6003      	str	r3, [r0, #0]
}
 8004212:	4770      	bx	lr
 8004214:	20003a18 	.word	0x20003a18

08004218 <RuntimeStats_TelnetGetLastIP>:

void RuntimeStats_TelnetGetLastIP (uint8_t* ip){
	memcpy(ip, &(commStats.telnetStats.lastIP), 4);
 8004218:	4b01      	ldr	r3, [pc, #4]	; (8004220 <RuntimeStats_TelnetGetLastIP+0x8>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	6003      	str	r3, [r0, #0]
}
 800421e:	4770      	bx	lr
 8004220:	20003a18 	.word	0x20003a18

08004224 <RuntimeStats_ModbusMasterRqSendInc>:

void RuntimeStats_ModbusMasterRqSendInc (void){
	commStats.mdMAsterStats.rqSend ++;
 8004224:	4a02      	ldr	r2, [pc, #8]	; (8004230 <RuntimeStats_ModbusMasterRqSendInc+0xc>)
 8004226:	6a13      	ldr	r3, [r2, #32]
 8004228:	3301      	adds	r3, #1
 800422a:	6213      	str	r3, [r2, #32]
}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20003a18 	.word	0x20003a18

08004234 <RuntimeStats_ModbusMasterNoRespInc>:

void RuntimeStats_ModbusMasterNoRespInc (void){
	commStats.mdMAsterStats.noResp ++;
 8004234:	4a02      	ldr	r2, [pc, #8]	; (8004240 <RuntimeStats_ModbusMasterNoRespInc+0xc>)
 8004236:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004238:	3301      	adds	r3, #1
 800423a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20003a18 	.word	0x20003a18

08004244 <RuntimeStats_ModbusMasterRespOkInc>:

void RuntimeStats_ModbusMasterRespOkInc (void){
	commStats.mdMAsterStats.respOk ++;
 8004244:	4a02      	ldr	r2, [pc, #8]	; (8004250 <RuntimeStats_ModbusMasterRespOkInc+0xc>)
 8004246:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004248:	3301      	adds	r3, #1
 800424a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20003a18 	.word	0x20003a18

08004254 <RuntimeStats_ModbusMasterWrongRespInc>:

void RuntimeStats_ModbusMasterWrongRespInc (void){
	commStats.mdMAsterStats.wrongRq ++;
 8004254:	4a02      	ldr	r2, [pc, #8]	; (8004260 <RuntimeStats_ModbusMasterWrongRespInc+0xc>)
 8004256:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004258:	3301      	adds	r3, #1
 800425a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20003a18 	.word	0x20003a18

08004264 <RuntimeStats_ModbusMasterRqSendGet>:

uint32_t RuntimeStats_ModbusMasterRqSendGet (void){
	return commStats.mdMAsterStats.rqSend;
}
 8004264:	4b01      	ldr	r3, [pc, #4]	; (800426c <RuntimeStats_ModbusMasterRqSendGet+0x8>)
 8004266:	6a18      	ldr	r0, [r3, #32]
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20003a18 	.word	0x20003a18

08004270 <RuntimeStats_ModbusMasterNoRespGet>:

uint32_t RuntimeStats_ModbusMasterNoRespGet (void){
	return commStats.mdMAsterStats.noResp;
}
 8004270:	4b01      	ldr	r3, [pc, #4]	; (8004278 <RuntimeStats_ModbusMasterNoRespGet+0x8>)
 8004272:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20003a18 	.word	0x20003a18

0800427c <RuntimeStats_ModbusMasterRespOkGet>:

uint32_t RuntimeStats_ModbusMasterRespOkGet (void){
	return commStats.mdMAsterStats.respOk;
}
 800427c:	4b01      	ldr	r3, [pc, #4]	; (8004284 <RuntimeStats_ModbusMasterRespOkGet+0x8>)
 800427e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	20003a18 	.word	0x20003a18

08004288 <RuntimeStats_ModbusMasterWrongRespGet>:

uint32_t RuntimeStats_ModbusMasterWrongRespGet (void){
	return commStats.mdMAsterStats.wrongRq;
}
 8004288:	4b01      	ldr	r3, [pc, #4]	; (8004290 <RuntimeStats_ModbusMasterWrongRespGet+0x8>)
 800428a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20003a18 	.word	0x20003a18

08004294 <RuntimeStats_ModbusSlaveRqAllInc>:

void RuntimeStats_ModbusSlaveRqAllInc (void){
	commStats.mbSlaveStats.rqAll++;
 8004294:	4a02      	ldr	r2, [pc, #8]	; (80042a0 <RuntimeStats_ModbusSlaveRqAllInc+0xc>)
 8004296:	6913      	ldr	r3, [r2, #16]
 8004298:	3301      	adds	r3, #1
 800429a:	6113      	str	r3, [r2, #16]
}
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20003a18 	.word	0x20003a18

080042a4 <RuntimeStats_ModbusSlaveRqOkInc>:

void RuntimeStats_ModbusSlaveRqOkInc (void){
	commStats.mbSlaveStats.rqOk++;
 80042a4:	4a02      	ldr	r2, [pc, #8]	; (80042b0 <RuntimeStats_ModbusSlaveRqOkInc+0xc>)
 80042a6:	6953      	ldr	r3, [r2, #20]
 80042a8:	3301      	adds	r3, #1
 80042aa:	6153      	str	r3, [r2, #20]
}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20003a18 	.word	0x20003a18

080042b4 <RuntimeStats_ModbusSlaveRqErrInc>:

void RuntimeStats_ModbusSlaveRqErrInc (void){
	commStats.mbSlaveStats.rqErr++;
 80042b4:	4a02      	ldr	r2, [pc, #8]	; (80042c0 <RuntimeStats_ModbusSlaveRqErrInc+0xc>)
 80042b6:	6993      	ldr	r3, [r2, #24]
 80042b8:	3301      	adds	r3, #1
 80042ba:	6193      	str	r3, [r2, #24]
}
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	20003a18 	.word	0x20003a18

080042c4 <RuntimeStats_ModbusSlaveRespInc>:

void RuntimeStats_ModbusSlaveRespInc (void){
	commStats.mbSlaveStats.respSend++;
 80042c4:	4a02      	ldr	r2, [pc, #8]	; (80042d0 <RuntimeStats_ModbusSlaveRespInc+0xc>)
 80042c6:	69d3      	ldr	r3, [r2, #28]
 80042c8:	3301      	adds	r3, #1
 80042ca:	61d3      	str	r3, [r2, #28]
}
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20003a18 	.word	0x20003a18

080042d4 <RuntimeStats_ModbusSlaveRqAllGet>:

uint32_t RuntimeStats_ModbusSlaveRqAllGet (void){
	return commStats.mbSlaveStats.rqAll;
}
 80042d4:	4b01      	ldr	r3, [pc, #4]	; (80042dc <RuntimeStats_ModbusSlaveRqAllGet+0x8>)
 80042d6:	6918      	ldr	r0, [r3, #16]
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20003a18 	.word	0x20003a18

080042e0 <RuntimeStats_ModbusSlaveRqOkGet>:

uint32_t RuntimeStats_ModbusSlaveRqOkGet (void){
	return commStats.mbSlaveStats.rqOk;
}
 80042e0:	4b01      	ldr	r3, [pc, #4]	; (80042e8 <RuntimeStats_ModbusSlaveRqOkGet+0x8>)
 80042e2:	6958      	ldr	r0, [r3, #20]
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20003a18 	.word	0x20003a18

080042ec <RuntimeStats_ModbusSlaveRqErrGet>:

uint32_t RuntimeStats_ModbusSlaveRqErrGet (void){
	return commStats.mbSlaveStats.rqErr;
}
 80042ec:	4b01      	ldr	r3, [pc, #4]	; (80042f4 <RuntimeStats_ModbusSlaveRqErrGet+0x8>)
 80042ee:	6998      	ldr	r0, [r3, #24]
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20003a18 	.word	0x20003a18

080042f8 <RuntimeStats_ModbusSlaveRespGet>:

uint32_t RuntimeStats_ModbusSlaveRespGet (void){
	return commStats.mbSlaveStats.respSend;
}
 80042f8:	4b01      	ldr	r3, [pc, #4]	; (8004300 <RuntimeStats_ModbusSlaveRespGet+0x8>)
 80042fa:	69d8      	ldr	r0, [r3, #28]
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20003a18 	.word	0x20003a18

08004304 <FLASH_ChipSelect>:
extern osMutexId SPIMutexHandle;
extern osMessageQId DataLogQueueHandle;

static DataLogEvent_t event;

void FLASH_ChipSelect (void){
 8004304:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 8004306:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <FLASH_ChipSelect+0x1c>)
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	f006 ffbf 	bl	800b290 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8004312:	2200      	movs	r2, #0
 8004314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004318:	4802      	ldr	r0, [pc, #8]	; (8004324 <FLASH_ChipSelect+0x20>)
 800431a:	f003 fb8c 	bl	8007a36 <HAL_GPIO_WritePin>
}
 800431e:	bd08      	pop	{r3, pc}
 8004320:	2000422c 	.word	0x2000422c
 8004324:	40020400 	.word	0x40020400

08004328 <FLASH_ChipDeselect>:

void FLASH_ChipDeselect (void){
 8004328:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 800432a:	2201      	movs	r2, #1
 800432c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004330:	4805      	ldr	r0, [pc, #20]	; (8004348 <FLASH_ChipDeselect+0x20>)
 8004332:	f003 fb80 	bl	8007a36 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8004336:	2300      	movs	r3, #0
 8004338:	461a      	mov	r2, r3
 800433a:	4619      	mov	r1, r3
 800433c:	4803      	ldr	r0, [pc, #12]	; (800434c <FLASH_ChipDeselect+0x24>)
 800433e:	6800      	ldr	r0, [r0, #0]
 8004340:	f006 fdb0 	bl	800aea4 <xQueueGenericSend>
}
 8004344:	bd08      	pop	{r3, pc}
 8004346:	bf00      	nop
 8004348:	40020400 	.word	0x40020400
 800434c:	2000422c 	.word	0x2000422c

08004350 <DataLogTask>:

void DataLogTask(void* argument)
{
 8004350:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DataLog */
	if(DataLog_Init() != DL_OK){
 8004352:	f7fe fcdb 	bl	8002d0c <DataLog_Init>
 8004356:	b110      	cbz	r0, 800435e <DataLogTask+0xe>
		vTaskSuspend(NULL);
 8004358:	2000      	movs	r0, #0
 800435a:	f007 fd31 	bl	800bdc0 <vTaskSuspend>
	}
  /* Infinite loop */
	for(;;)
	{
		if(pdPASS == xQueueReceive(DataLogQueueHandle, &event, portMAX_DELAY)){
 800435e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004362:	4905      	ldr	r1, [pc, #20]	; (8004378 <DataLogTask+0x28>)
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <DataLogTask+0x2c>)
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	f006 fee6 	bl	800b138 <xQueueReceive>
 800436c:	2801      	cmp	r0, #1
 800436e:	d1f6      	bne.n	800435e <DataLogTask+0xe>
			DataLog_SaveEvent(&event);
 8004370:	4801      	ldr	r0, [pc, #4]	; (8004378 <DataLogTask+0x28>)
 8004372:	f7fe fceb 	bl	8002d4c <DataLog_SaveEvent>
 8004376:	e7f2      	b.n	800435e <DataLogTask+0xe>
 8004378:	2000259c 	.word	0x2000259c
 800437c:	200040a4 	.word	0x200040a4

08004380 <nextion_SendData>:
static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3);
static void nextion_SendConfig(UART_HandleTypeDef* uart);
void NextionBig_DataRcv (void);
void NextionSmall_DataRcv (void);

static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3){
 8004380:	b530      	push	{r4, r5, lr}
 8004382:	b08d      	sub	sp, #52	; 0x34
	char buffor_to_send[40];
	uint8_t buffor_to_send_size;
	current_command = cmd;
 8004384:	4c28      	ldr	r4, [pc, #160]	; (8004428 <nextion_SendData+0xa8>)
 8004386:	7021      	strb	r1, [r4, #0]
	if(cmd < NEX_COMMANDS_COUNT){
 8004388:	2921      	cmp	r1, #33	; 0x21
 800438a:	d84b      	bhi.n	8004424 <nextion_SendData+0xa4>
 800438c:	4605      	mov	r5, r0
		if(cmd == NEX_WAKE || cmd == NEX_SENDME || cmd == NEX_SETTINGS_SAVED || cmd == NEX_SETTINGS_NOT_SAVED
 800438e:	2901      	cmp	r1, #1
 8004390:	d919      	bls.n	80043c6 <nextion_SendData+0x46>
 8004392:	2911      	cmp	r1, #17
 8004394:	d017      	beq.n	80043c6 <nextion_SendData+0x46>
 8004396:	2912      	cmp	r1, #18
 8004398:	d015      	beq.n	80043c6 <nextion_SendData+0x46>
			|| cmd == NEX_SETTINGS_LOCK || cmd == NEX_SETTINGS_UNLOCK){
 800439a:	2921      	cmp	r1, #33	; 0x21
 800439c:	d013      	beq.n	80043c6 <nextion_SendData+0x46>
 800439e:	2920      	cmp	r1, #32
 80043a0:	d011      	beq.n	80043c6 <nextion_SendData+0x46>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
		}else if(cmd == NEX_PHASE_VOLTAGE ||
			cmd == NEX_PHASE_CURRENT ||
 80043a2:	f1a1 0018 	sub.w	r0, r1, #24
 80043a6:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_VOLTAGE ||
 80043a8:	2802      	cmp	r0, #2
 80043aa:	d916      	bls.n	80043da <nextion_SendData+0x5a>
			cmd == NEX_PHASE_POWER){
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
		}else if(cmd == NEX_PHASE_PRG_BAR ||
			cmd == NEX_CO_HEATER_PHASE_DUTY ||
			cmd == NEX_CWU_HEATER_PHASE_DUTY ||
			cmd == NEX_CWU_TEMP || cmd == NEX_CO_TEMP){
 80043ac:	f1a1 001b 	sub.w	r0, r1, #27
 80043b0:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_PRG_BAR ||
 80043b2:	2804      	cmp	r0, #4
 80043b4:	d81b      	bhi.n	80043ee <nextion_SendData+0x6e>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2);
 80043b6:	481d      	ldr	r0, [pc, #116]	; (800442c <nextion_SendData+0xac>)
 80043b8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80043bc:	a802      	add	r0, sp, #8
 80043be:	f009 fd3d 	bl	800de3c <siprintf>
 80043c2:	b2c2      	uxtb	r2, r0
 80043c4:	e006      	b.n	80043d4 <nextion_SendData+0x54>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
 80043c6:	4b19      	ldr	r3, [pc, #100]	; (800442c <nextion_SendData+0xac>)
 80043c8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80043cc:	a802      	add	r0, sp, #8
 80043ce:	f009 fd35 	bl	800de3c <siprintf>
 80043d2:	b2c2      	uxtb	r2, r0
		}else{
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
		}
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 80043d4:	4610      	mov	r0, r2
 80043d6:	4613      	mov	r3, r2
 80043d8:	e017      	b.n	800440a <nextion_SendData+0x8a>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
 80043da:	4814      	ldr	r0, [pc, #80]	; (800442c <nextion_SendData+0xac>)
 80043dc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80043e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80043e2:	9000      	str	r0, [sp, #0]
 80043e4:	a802      	add	r0, sp, #8
 80043e6:	f009 fd29 	bl	800de3c <siprintf>
 80043ea:	b2c2      	uxtb	r2, r0
 80043ec:	e7f2      	b.n	80043d4 <nextion_SendData+0x54>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
 80043ee:	4b0f      	ldr	r3, [pc, #60]	; (800442c <nextion_SendData+0xac>)
 80043f0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80043f4:	a802      	add	r0, sp, #8
 80043f6:	f009 fd21 	bl	800de3c <siprintf>
 80043fa:	b2c2      	uxtb	r2, r0
 80043fc:	e7ea      	b.n	80043d4 <nextion_SendData+0x54>
			buffor_to_send[i] = 0xFF;
 80043fe:	a90c      	add	r1, sp, #48	; 0x30
 8004400:	4419      	add	r1, r3
 8004402:	24ff      	movs	r4, #255	; 0xff
 8004404:	f801 4c28 	strb.w	r4, [r1, #-40]
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 8004408:	3301      	adds	r3, #1
 800440a:	1cc1      	adds	r1, r0, #3
 800440c:	4299      	cmp	r1, r3
 800440e:	dcf6      	bgt.n	80043fe <nextion_SendData+0x7e>
		}
		buffor_to_send_size += 3;
 8004410:	3203      	adds	r2, #3
		HAL_UART_Transmit(uart, (uint8_t*)buffor_to_send, buffor_to_send_size, 20);
 8004412:	2314      	movs	r3, #20
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	a902      	add	r1, sp, #8
 8004418:	4628      	mov	r0, r5
 800441a:	f005 ff89 	bl	800a330 <HAL_UART_Transmit>
		vTaskDelay(5);
 800441e:	2005      	movs	r0, #5
 8004420:	f007 fc4a 	bl	800bcb8 <vTaskDelay>
	}
}
 8004424:	b00d      	add	sp, #52	; 0x34
 8004426:	bd30      	pop	{r4, r5, pc}
 8004428:	20003b8a 	.word	0x20003b8a
 800442c:	0800f234 	.word	0x0800f234

08004430 <nextion_SendConfig>:
	nextion_SendData(uart, NEX_MINUTE, currTime.Minutes, 0, 0);
	current_command = NEX_SECONDS;
	nextion_SendData(uart, NEX_SECONDS, currTime.Seconds, 0, 0);
}

static void nextion_SendConfig(UART_HandleTypeDef* uart){
 8004430:	b530      	push	{r4, r5, lr}
 8004432:	b083      	sub	sp, #12
 8004434:	4605      	mov	r5, r0
	nextion_SendData(uart, NEX_CO_HIGH_TEMP, RegulationTaskData.parameters.CO_hi_temp, 0, 0);
 8004436:	2400      	movs	r4, #0
 8004438:	9400      	str	r4, [sp, #0]
 800443a:	4623      	mov	r3, r4
 800443c:	4622      	mov	r2, r4
 800443e:	2108      	movs	r1, #8
 8004440:	f7ff ff9e 	bl	8004380 <nextion_SendData>
	nextion_SendData(uart, NEX_CO_LOW_TEMP, RegulationTaskData.parameters.CO_lo_temp, 0, 0);
 8004444:	9400      	str	r4, [sp, #0]
 8004446:	4623      	mov	r3, r4
 8004448:	4622      	mov	r2, r4
 800444a:	2109      	movs	r1, #9
 800444c:	4628      	mov	r0, r5
 800444e:	f7ff ff97 	bl	8004380 <nextion_SendData>
	nextion_SendData(uart, NEX_CO_HEATER_POWER, (int32_t)RegulationTaskData.parameters.CO_heater_power, 0, 0);
 8004452:	9400      	str	r4, [sp, #0]
 8004454:	4623      	mov	r3, r4
 8004456:	4622      	mov	r2, r4
 8004458:	210a      	movs	r1, #10
 800445a:	4628      	mov	r0, r5
 800445c:	f7ff ff90 	bl	8004380 <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_HIGH_TEMP, RegulationTaskData.parameters.CWU_hi_temp, 0, 0);
 8004460:	9400      	str	r4, [sp, #0]
 8004462:	4623      	mov	r3, r4
 8004464:	4622      	mov	r2, r4
 8004466:	210b      	movs	r1, #11
 8004468:	4628      	mov	r0, r5
 800446a:	f7ff ff89 	bl	8004380 <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_LOW_TEMP, RegulationTaskData.parameters.CWU_lo_temp, 0, 0);
 800446e:	9400      	str	r4, [sp, #0]
 8004470:	4623      	mov	r3, r4
 8004472:	4622      	mov	r2, r4
 8004474:	210c      	movs	r1, #12
 8004476:	4628      	mov	r0, r5
 8004478:	f7ff ff82 	bl	8004380 <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_HEATER_POWER, (int32_t)RegulationTaskData.parameters.CWU_heater_power, 0, 0);
 800447c:	9400      	str	r4, [sp, #0]
 800447e:	4623      	mov	r3, r4
 8004480:	4622      	mov	r2, r4
 8004482:	210d      	movs	r1, #13
 8004484:	4628      	mov	r0, r5
 8004486:	f7ff ff7b 	bl	8004380 <nextion_SendData>
	nextion_SendData(uart, NEX_ACC_COEFF, RegulationTaskData.parameters.acumulated_power_coeff, 0, 0);
 800448a:	9400      	str	r4, [sp, #0]
 800448c:	4623      	mov	r3, r4
 800448e:	4622      	mov	r2, r4
 8004490:	210e      	movs	r1, #14
 8004492:	4628      	mov	r0, r5
 8004494:	f7ff ff74 	bl	8004380 <nextion_SendData>
	nextion_SendData(uart, NEX_HEATER_COEFF, RegulationTaskData.parameters.heater_power_coeff, 0, 0);
 8004498:	9400      	str	r4, [sp, #0]
 800449a:	4623      	mov	r3, r4
 800449c:	4622      	mov	r2, r4
 800449e:	210f      	movs	r1, #15
 80044a0:	4628      	mov	r0, r5
 80044a2:	f7ff ff6d 	bl	8004380 <nextion_SendData>
}
 80044a6:	b003      	add	sp, #12
 80044a8:	bd30      	pop	{r4, r5, pc}
	...

080044ac <nextion_UpdateTime>:
static void nextion_UpdateTime(UART_HandleTypeDef* uart){
 80044ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	4605      	mov	r5, r0
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80044b4:	4f23      	ldr	r7, [pc, #140]	; (8004544 <nextion_UpdateTime+0x98>)
 80044b6:	4c24      	ldr	r4, [pc, #144]	; (8004548 <nextion_UpdateTime+0x9c>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	4639      	mov	r1, r7
 80044bc:	4620      	mov	r0, r4
 80044be:	f004 fe7e 	bl	80091be <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 80044c2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8004550 <nextion_UpdateTime+0xa4>
 80044c6:	2200      	movs	r2, #0
 80044c8:	4641      	mov	r1, r8
 80044ca:	4620      	mov	r0, r4
 80044cc:	f004 fea2 	bl	8009214 <HAL_RTC_GetDate>
	current_command = NEX_YEAR;
 80044d0:	4e1e      	ldr	r6, [pc, #120]	; (800454c <nextion_UpdateTime+0xa0>)
 80044d2:	2102      	movs	r1, #2
 80044d4:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_YEAR, currDate.Year + 2000, 0, 0);
 80044d6:	f898 2003 	ldrb.w	r2, [r8, #3]
 80044da:	2400      	movs	r4, #0
 80044dc:	9400      	str	r4, [sp, #0]
 80044de:	4623      	mov	r3, r4
 80044e0:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80044e4:	4628      	mov	r0, r5
 80044e6:	f7ff ff4b 	bl	8004380 <nextion_SendData>
	current_command = NEX_MONTH;
 80044ea:	2103      	movs	r1, #3
 80044ec:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_MONTH, currDate.Month, 0, 0);
 80044ee:	f898 2001 	ldrb.w	r2, [r8, #1]
 80044f2:	9400      	str	r4, [sp, #0]
 80044f4:	4623      	mov	r3, r4
 80044f6:	4628      	mov	r0, r5
 80044f8:	f7ff ff42 	bl	8004380 <nextion_SendData>
	current_command = NEX_DAY;
 80044fc:	2104      	movs	r1, #4
 80044fe:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_DAY, currDate.Date, 0, 0);
 8004500:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004504:	9400      	str	r4, [sp, #0]
 8004506:	4623      	mov	r3, r4
 8004508:	4628      	mov	r0, r5
 800450a:	f7ff ff39 	bl	8004380 <nextion_SendData>
	current_command = NEX_HOUR;
 800450e:	2105      	movs	r1, #5
 8004510:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_HOUR, currTime.Hours, 0, 0);
 8004512:	783a      	ldrb	r2, [r7, #0]
 8004514:	9400      	str	r4, [sp, #0]
 8004516:	4623      	mov	r3, r4
 8004518:	4628      	mov	r0, r5
 800451a:	f7ff ff31 	bl	8004380 <nextion_SendData>
	current_command = NEX_MINUTE;
 800451e:	2106      	movs	r1, #6
 8004520:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_MINUTE, currTime.Minutes, 0, 0);
 8004522:	787a      	ldrb	r2, [r7, #1]
 8004524:	9400      	str	r4, [sp, #0]
 8004526:	4623      	mov	r3, r4
 8004528:	4628      	mov	r0, r5
 800452a:	f7ff ff29 	bl	8004380 <nextion_SendData>
	current_command = NEX_SECONDS;
 800452e:	2107      	movs	r1, #7
 8004530:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_SECONDS, currTime.Seconds, 0, 0);
 8004532:	78ba      	ldrb	r2, [r7, #2]
 8004534:	9400      	str	r4, [sp, #0]
 8004536:	4623      	mov	r3, r4
 8004538:	4628      	mov	r0, r5
 800453a:	f7ff ff21 	bl	8004380 <nextion_SendData>
}
 800453e:	b002      	add	sp, #8
 8004540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004544:	20003cac 	.word	0x20003cac
 8004548:	200040a8 	.word	0x200040a8
 800454c:	20003b8a 	.word	0x20003b8a
 8004550:	20003cc0 	.word	0x20003cc0

08004554 <NextionBig_DataRcv>:
		}
	}
  /* USER CODE END UpdateLCD */
}

void NextionBig_DataRcv (void){
 8004554:	b530      	push	{r4, r5, lr}
 8004556:	b085      	sub	sp, #20
	uint8_t stopbyte = 0;
 8004558:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 800455a:	e063      	b.n	8004624 <NextionBig_DataRcv+0xd0>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
		start = nextion_big_comm.UartBufferHead;
		if(len > 3){
			if(len > 9){
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
					memcpy(&number, &nextion_big_comm.UART_Buffer[start], 4);
 800455c:	f102 0380 	add.w	r3, r2, #128	; 0x80
 8004560:	4d3e      	ldr	r5, [pc, #248]	; (800465c <NextionBig_DataRcv+0x108>)
 8004562:	442b      	add	r3, r5
 8004564:	6858      	ldr	r0, [r3, #4]
					memcpy(&value, &nextion_big_comm.UART_Buffer[start + 5], 4);
 8004566:	3285      	adds	r2, #133	; 0x85
 8004568:	442a      	add	r2, r5
 800456a:	6852      	ldr	r2, [r2, #4]
 800456c:	a904      	add	r1, sp, #16
 800456e:	f841 2d04 	str.w	r2, [r1, #-4]!
					nextion_big.param = number;
 8004572:	4b3b      	ldr	r3, [pc, #236]	; (8004660 <NextionBig_DataRcv+0x10c>)
 8004574:	6058      	str	r0, [r3, #4]
					memcpy(&nextion_big.value, &value, 4);
 8004576:	609a      	str	r2, [r3, #8]
					Config_ChangeValue(number, &value);
 8004578:	f7fd f8d2 	bl	8001720 <Config_ChangeValue>
					nextion_big_comm.UartBufferHead += 10;
 800457c:	f8b5 3105 	ldrh.w	r3, [r5, #261]	; 0x105
 8004580:	330a      	adds	r3, #10
 8004582:	f8a5 3105 	strh.w	r3, [r5, #261]	; 0x105
					xTaskNotifyFromISR(DiplaysHandle, 1, eSetValueWithOverwrite, NULL);
 8004586:	4b37      	ldr	r3, [pc, #220]	; (8004664 <NextionBig_DataRcv+0x110>)
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	2300      	movs	r3, #0
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	2203      	movs	r2, #3
 8004590:	2101      	movs	r1, #1
 8004592:	f007 ffe5 	bl	800c560 <xTaskGenericNotifyFromISR>
 8004596:	e03e      	b.n	8004616 <NextionBig_DataRcv+0xc2>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 8004598:	3301      	adds	r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	4610      	mov	r0, r2
 800459e:	1d51      	adds	r1, r2, #5
 80045a0:	428b      	cmp	r3, r1
 80045a2:	da0a      	bge.n	80045ba <NextionBig_DataRcv+0x66>
					if(nextion_big_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 80045a4:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 80045a8:	492c      	ldr	r1, [pc, #176]	; (800465c <NextionBig_DataRcv+0x108>)
 80045aa:	4401      	add	r1, r0
 80045ac:	f891 1084 	ldrb.w	r1, [r1, #132]	; 0x84
 80045b0:	29ff      	cmp	r1, #255	; 0xff
 80045b2:	d1f1      	bne.n	8004598 <NextionBig_DataRcv+0x44>
						stopbyte ++;
 80045b4:	3401      	adds	r4, #1
 80045b6:	b2e4      	uxtb	r4, r4
 80045b8:	e7ee      	b.n	8004598 <NextionBig_DataRcv+0x44>
					}
				}
				if(stopbyte == 3){
 80045ba:	2c03      	cmp	r4, #3
 80045bc:	d006      	beq.n	80045cc <NextionBig_DataRcv+0x78>
							y = 4;
							break;
					}
					nextion_big_comm.UartBufferHead += y;
				}else{
					nextion_big_comm.UartBufferHead ++;
 80045be:	4a27      	ldr	r2, [pc, #156]	; (800465c <NextionBig_DataRcv+0x108>)
 80045c0:	f8b2 3105 	ldrh.w	r3, [r2, #261]	; 0x105
 80045c4:	3301      	adds	r3, #1
 80045c6:	f8a2 3105 	strh.w	r3, [r2, #261]	; 0x105
 80045ca:	e024      	b.n	8004616 <NextionBig_DataRcv+0xc2>
					switch(nextion_big_comm.UART_Buffer[start]){
 80045cc:	4b23      	ldr	r3, [pc, #140]	; (800465c <NextionBig_DataRcv+0x108>)
 80045ce:	4413      	add	r3, r2
 80045d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80045d4:	2b1a      	cmp	r3, #26
 80045d6:	d011      	beq.n	80045fc <NextionBig_DataRcv+0xa8>
 80045d8:	2b66      	cmp	r3, #102	; 0x66
 80045da:	d116      	bne.n	800460a <NextionBig_DataRcv+0xb6>
							nextion_big.display = nextion_big_comm.UART_Buffer[start + 1];
 80045dc:	3001      	adds	r0, #1
 80045de:	4b1f      	ldr	r3, [pc, #124]	; (800465c <NextionBig_DataRcv+0x108>)
 80045e0:	4418      	add	r0, r3
 80045e2:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 80045e6:	4b1e      	ldr	r3, [pc, #120]	; (8004660 <NextionBig_DataRcv+0x10c>)
 80045e8:	701a      	strb	r2, [r3, #0]
							y = 5;
 80045ea:	2105      	movs	r1, #5
					nextion_big_comm.UartBufferHead += y;
 80045ec:	4a1b      	ldr	r2, [pc, #108]	; (800465c <NextionBig_DataRcv+0x108>)
 80045ee:	f8b2 3105 	ldrh.w	r3, [r2, #261]	; 0x105
 80045f2:	440b      	add	r3, r1
 80045f4:	f8a2 3105 	strh.w	r3, [r2, #261]	; 0x105
					stopbyte = 0;
 80045f8:	2400      	movs	r4, #0
 80045fa:	e00c      	b.n	8004616 <NextionBig_DataRcv+0xc2>
							command_correct[current_command] = 1;
 80045fc:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <NextionBig_DataRcv+0x114>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	4a1a      	ldr	r2, [pc, #104]	; (800466c <NextionBig_DataRcv+0x118>)
 8004602:	2101      	movs	r1, #1
 8004604:	54d1      	strb	r1, [r2, r3]
							y = 4;
 8004606:	2104      	movs	r1, #4
							break;
 8004608:	e7f0      	b.n	80045ec <NextionBig_DataRcv+0x98>
							y = 4;
 800460a:	2104      	movs	r1, #4
 800460c:	e7ee      	b.n	80045ec <NextionBig_DataRcv+0x98>
				}
			}

		}else{
			//if(nextion_big_comm.UART_Buffer[start] == 0 || nextion_big_comm.UART_Buffer[start] == 255){
				nextion_big_comm.UartBufferHead++;
 800460e:	3201      	adds	r2, #1
 8004610:	4b12      	ldr	r3, [pc, #72]	; (800465c <NextionBig_DataRcv+0x108>)
 8004612:	f8a3 2105 	strh.w	r2, [r3, #261]	; 0x105
			//}
		}
		nextion_big_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 8004616:	4a11      	ldr	r2, [pc, #68]	; (800465c <NextionBig_DataRcv+0x108>)
 8004618:	f8b2 3105 	ldrh.w	r3, [r2, #261]	; 0x105
 800461c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004620:	f8a2 3105 	strh.w	r3, [r2, #261]	; 0x105
	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 8004624:	4b0d      	ldr	r3, [pc, #52]	; (800465c <NextionBig_DataRcv+0x108>)
 8004626:	f8b3 1107 	ldrh.w	r1, [r3, #263]	; 0x107
 800462a:	f8b3 2105 	ldrh.w	r2, [r3, #261]	; 0x105
 800462e:	4291      	cmp	r1, r2
 8004630:	d011      	beq.n	8004656 <NextionBig_DataRcv+0x102>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 8004632:	b2d3      	uxtb	r3, r2
 8004634:	1ac9      	subs	r1, r1, r3
 8004636:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 800463a:	2903      	cmp	r1, #3
 800463c:	d9e7      	bls.n	800460e <NextionBig_DataRcv+0xba>
			if(len > 9){
 800463e:	2909      	cmp	r1, #9
 8004640:	d906      	bls.n	8004650 <NextionBig_DataRcv+0xfc>
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
 8004642:	1d10      	adds	r0, r2, #4
 8004644:	4905      	ldr	r1, [pc, #20]	; (800465c <NextionBig_DataRcv+0x108>)
 8004646:	4401      	add	r1, r0
 8004648:	f891 1084 	ldrb.w	r1, [r1, #132]	; 0x84
 800464c:	290a      	cmp	r1, #10
 800464e:	d085      	beq.n	800455c <NextionBig_DataRcv+0x8>
				for(i = start + 1; i < (start + 5); i++){
 8004650:	3301      	adds	r3, #1
 8004652:	b2db      	uxtb	r3, r3
 8004654:	e7a2      	b.n	800459c <NextionBig_DataRcv+0x48>
	}
}
 8004656:	b005      	add	sp, #20
 8004658:	bd30      	pop	{r4, r5, pc}
 800465a:	bf00      	nop
 800465c:	20003a78 	.word	0x20003a78
 8004660:	20003a48 	.word	0x20003a48
 8004664:	20004228 	.word	0x20004228
 8004668:	20003b8a 	.word	0x20003b8a
 800466c:	20003a54 	.word	0x20003a54

08004670 <NextionSmall_DataRcv>:

void NextionSmall_DataRcv (void){
 8004670:	b530      	push	{r4, r5, lr}
 8004672:	b083      	sub	sp, #12
	uint8_t stopbyte = 0;
 8004674:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 8004676:	e076      	b.n	8004766 <NextionSmall_DataRcv+0xf6>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
		start = nextion_small_comm.UartBufferHead;
		if(len > 3){
			if(len > 9){
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
					memcpy(&number, &nextion_small_comm.UART_Buffer[start], 4);
 8004678:	f102 0380 	add.w	r3, r2, #128	; 0x80
 800467c:	4d48      	ldr	r5, [pc, #288]	; (80047a0 <NextionSmall_DataRcv+0x130>)
 800467e:	442b      	add	r3, r5
 8004680:	6858      	ldr	r0, [r3, #4]
					memcpy(&value, &nextion_small_comm.UART_Buffer[start + 5], 4);
 8004682:	3285      	adds	r2, #133	; 0x85
 8004684:	442a      	add	r2, r5
 8004686:	6851      	ldr	r1, [r2, #4]
					nextion_small.param = number;
 8004688:	4b46      	ldr	r3, [pc, #280]	; (80047a4 <NextionSmall_DataRcv+0x134>)
 800468a:	6058      	str	r0, [r3, #4]
					memcpy(&nextion_small.value, &value, 4);
 800468c:	6099      	str	r1, [r3, #8]
					Config_ChangeValue(number, value);
 800468e:	f7fd f847 	bl	8001720 <Config_ChangeValue>
					nextion_small_comm.UartBufferHead += 10;
 8004692:	f8b5 3105 	ldrh.w	r3, [r5, #261]	; 0x105
 8004696:	330a      	adds	r3, #10
 8004698:	f8a5 3105 	strh.w	r3, [r5, #261]	; 0x105
					xTaskNotifyFromISR(DiplaysHandle, 2, eSetValueWithOverwrite, NULL);
 800469c:	4b42      	ldr	r3, [pc, #264]	; (80047a8 <NextionSmall_DataRcv+0x138>)
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	2300      	movs	r3, #0
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	2203      	movs	r2, #3
 80046a6:	2102      	movs	r1, #2
 80046a8:	f007 ff5a 	bl	800c560 <xTaskGenericNotifyFromISR>
 80046ac:	e054      	b.n	8004758 <NextionSmall_DataRcv+0xe8>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 80046ae:	3301      	adds	r3, #1
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	1d51      	adds	r1, r2, #5
 80046b6:	428b      	cmp	r3, r1
 80046b8:	da0a      	bge.n	80046d0 <NextionSmall_DataRcv+0x60>
					if(nextion_small_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 80046ba:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 80046be:	4938      	ldr	r1, [pc, #224]	; (80047a0 <NextionSmall_DataRcv+0x130>)
 80046c0:	4401      	add	r1, r0
 80046c2:	f891 1084 	ldrb.w	r1, [r1, #132]	; 0x84
 80046c6:	29ff      	cmp	r1, #255	; 0xff
 80046c8:	d1f1      	bne.n	80046ae <NextionSmall_DataRcv+0x3e>
						stopbyte ++;
 80046ca:	3401      	adds	r4, #1
 80046cc:	b2e4      	uxtb	r4, r4
 80046ce:	e7ee      	b.n	80046ae <NextionSmall_DataRcv+0x3e>
					}
				}
				if(stopbyte == 3){
 80046d0:	2c03      	cmp	r4, #3
 80046d2:	d006      	beq.n	80046e2 <NextionSmall_DataRcv+0x72>
							y = 4;
							break;
					}
					nextion_small_comm.UartBufferHead += y;
				}else{
					nextion_small_comm.UartBufferHead ++;
 80046d4:	4a32      	ldr	r2, [pc, #200]	; (80047a0 <NextionSmall_DataRcv+0x130>)
 80046d6:	f8b2 3105 	ldrh.w	r3, [r2, #261]	; 0x105
 80046da:	3301      	adds	r3, #1
 80046dc:	f8a2 3105 	strh.w	r3, [r2, #261]	; 0x105
 80046e0:	e03a      	b.n	8004758 <NextionSmall_DataRcv+0xe8>
					switch(nextion_small_comm.UART_Buffer[start]){
 80046e2:	4b2f      	ldr	r3, [pc, #188]	; (80047a0 <NextionSmall_DataRcv+0x130>)
 80046e4:	4413      	add	r3, r2
 80046e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80046ea:	2b86      	cmp	r3, #134	; 0x86
 80046ec:	d024      	beq.n	8004738 <NextionSmall_DataRcv+0xc8>
 80046ee:	d813      	bhi.n	8004718 <NextionSmall_DataRcv+0xa8>
 80046f0:	2b1a      	cmp	r3, #26
 80046f2:	d01a      	beq.n	800472a <NextionSmall_DataRcv+0xba>
 80046f4:	2b66      	cmp	r3, #102	; 0x66
 80046f6:	d129      	bne.n	800474c <NextionSmall_DataRcv+0xdc>
							nextion_small.display = nextion_small_comm.UART_Buffer[start + 1];
 80046f8:	3001      	adds	r0, #1
 80046fa:	4b29      	ldr	r3, [pc, #164]	; (80047a0 <NextionSmall_DataRcv+0x130>)
 80046fc:	4418      	add	r0, r3
 80046fe:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 8004702:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <NextionSmall_DataRcv+0x134>)
 8004704:	701a      	strb	r2, [r3, #0]
							y = 5;
 8004706:	2105      	movs	r1, #5
					nextion_small_comm.UartBufferHead += y;
 8004708:	4a25      	ldr	r2, [pc, #148]	; (80047a0 <NextionSmall_DataRcv+0x130>)
 800470a:	f8b2 3105 	ldrh.w	r3, [r2, #261]	; 0x105
 800470e:	440b      	add	r3, r1
 8004710:	f8a2 3105 	strh.w	r3, [r2, #261]	; 0x105
					stopbyte = 0;
 8004714:	2400      	movs	r4, #0
 8004716:	e01f      	b.n	8004758 <NextionSmall_DataRcv+0xe8>
					switch(nextion_small_comm.UART_Buffer[start]){
 8004718:	2b87      	cmp	r3, #135	; 0x87
 800471a:	d012      	beq.n	8004742 <NextionSmall_DataRcv+0xd2>
 800471c:	2b88      	cmp	r3, #136	; 0x88
 800471e:	d115      	bne.n	800474c <NextionSmall_DataRcv+0xdc>
							nextion_small.ready = 1;
 8004720:	4b20      	ldr	r3, [pc, #128]	; (80047a4 <NextionSmall_DataRcv+0x134>)
 8004722:	2201      	movs	r2, #1
 8004724:	70da      	strb	r2, [r3, #3]
							y = 4;
 8004726:	2104      	movs	r1, #4
							break;
 8004728:	e7ee      	b.n	8004708 <NextionSmall_DataRcv+0x98>
							command_correct[current_command] = 1;
 800472a:	4b20      	ldr	r3, [pc, #128]	; (80047ac <NextionSmall_DataRcv+0x13c>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	4a20      	ldr	r2, [pc, #128]	; (80047b0 <NextionSmall_DataRcv+0x140>)
 8004730:	2101      	movs	r1, #1
 8004732:	54d1      	strb	r1, [r2, r3]
							y = 4;
 8004734:	2104      	movs	r1, #4
							break;
 8004736:	e7e7      	b.n	8004708 <NextionSmall_DataRcv+0x98>
							nextion_small.sleep = 1;
 8004738:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <NextionSmall_DataRcv+0x134>)
 800473a:	2201      	movs	r2, #1
 800473c:	709a      	strb	r2, [r3, #2]
							y = 4;
 800473e:	2104      	movs	r1, #4
							break;
 8004740:	e7e2      	b.n	8004708 <NextionSmall_DataRcv+0x98>
							nextion_small.sleep = 0;
 8004742:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <NextionSmall_DataRcv+0x134>)
 8004744:	2200      	movs	r2, #0
 8004746:	709a      	strb	r2, [r3, #2]
							y = 4;
 8004748:	2104      	movs	r1, #4
							break;
 800474a:	e7dd      	b.n	8004708 <NextionSmall_DataRcv+0x98>
							y = 4;
 800474c:	2104      	movs	r1, #4
 800474e:	e7db      	b.n	8004708 <NextionSmall_DataRcv+0x98>
				}
			}

		}else{
			//if(nextion_small_comm.UART_Buffer[start] == 0 || nextion_small_comm.UART_Buffer[start] == 255){
				nextion_small_comm.UartBufferHead++;
 8004750:	3201      	adds	r2, #1
 8004752:	4b13      	ldr	r3, [pc, #76]	; (80047a0 <NextionSmall_DataRcv+0x130>)
 8004754:	f8a3 2105 	strh.w	r2, [r3, #261]	; 0x105
			//}
		}
		nextion_small_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 8004758:	4a11      	ldr	r2, [pc, #68]	; (80047a0 <NextionSmall_DataRcv+0x130>)
 800475a:	f8b2 3105 	ldrh.w	r3, [r2, #261]	; 0x105
 800475e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004762:	f8a2 3105 	strh.w	r3, [r2, #261]	; 0x105
	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 8004766:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <NextionSmall_DataRcv+0x130>)
 8004768:	f8b3 1107 	ldrh.w	r1, [r3, #263]	; 0x107
 800476c:	f8b3 2105 	ldrh.w	r2, [r3, #261]	; 0x105
 8004770:	4291      	cmp	r1, r2
 8004772:	d012      	beq.n	800479a <NextionSmall_DataRcv+0x12a>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 8004774:	b2d3      	uxtb	r3, r2
 8004776:	1ac9      	subs	r1, r1, r3
 8004778:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 800477c:	2903      	cmp	r1, #3
 800477e:	d9e7      	bls.n	8004750 <NextionSmall_DataRcv+0xe0>
			if(len > 9){
 8004780:	2909      	cmp	r1, #9
 8004782:	d907      	bls.n	8004794 <NextionSmall_DataRcv+0x124>
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
 8004784:	1d10      	adds	r0, r2, #4
 8004786:	4906      	ldr	r1, [pc, #24]	; (80047a0 <NextionSmall_DataRcv+0x130>)
 8004788:	4401      	add	r1, r0
 800478a:	f891 1084 	ldrb.w	r1, [r1, #132]	; 0x84
 800478e:	290a      	cmp	r1, #10
 8004790:	f43f af72 	beq.w	8004678 <NextionSmall_DataRcv+0x8>
				for(i = start + 1; i < (start + 5); i++){
 8004794:	3301      	adds	r3, #1
 8004796:	b2db      	uxtb	r3, r3
 8004798:	e78b      	b.n	80046b2 <NextionSmall_DataRcv+0x42>
	}
}
 800479a:	b003      	add	sp, #12
 800479c:	bd30      	pop	{r4, r5, pc}
 800479e:	bf00      	nop
 80047a0:	20003b8c 	.word	0x20003b8c
 80047a4:	20003ca0 	.word	0x20003ca0
 80047a8:	20004228 	.word	0x20004228
 80047ac:	20003b8a 	.word	0x20003b8a
 80047b0:	20003a54 	.word	0x20003a54

080047b4 <DisplayTask>:
{
 80047b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047b8:	b089      	sub	sp, #36	; 0x24
	nextion_small.display = 30;
 80047ba:	4ac6      	ldr	r2, [pc, #792]	; (8004ad4 <DisplayTask+0x320>)
 80047bc:	231e      	movs	r3, #30
 80047be:	7013      	strb	r3, [r2, #0]
	nextion_small.last_display = 30;
 80047c0:	7053      	strb	r3, [r2, #1]
	nextion_big.display = 30;
 80047c2:	4dc5      	ldr	r5, [pc, #788]	; (8004ad8 <DisplayTask+0x324>)
 80047c4:	702b      	strb	r3, [r5, #0]
	nextion_big.last_display = 30;
 80047c6:	706b      	strb	r3, [r5, #1]
	UARTDMA_Init(&nextion_small_comm, NEXTION_SMALL_UART);
 80047c8:	4ec4      	ldr	r6, [pc, #784]	; (8004adc <DisplayTask+0x328>)
 80047ca:	4cc5      	ldr	r4, [pc, #788]	; (8004ae0 <DisplayTask+0x32c>)
 80047cc:	4631      	mov	r1, r6
 80047ce:	4620      	mov	r0, r4
 80047d0:	f001 f8d3 	bl	800597a <UARTDMA_Init>
	UARTDMA_Init(&nextion_big_comm, NEXTION_BIG_UART);
 80047d4:	4fc3      	ldr	r7, [pc, #780]	; (8004ae4 <DisplayTask+0x330>)
 80047d6:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8004b04 <DisplayTask+0x350>
 80047da:	4639      	mov	r1, r7
 80047dc:	4640      	mov	r0, r8
 80047de:	f001 f8cc 	bl	800597a <UARTDMA_Init>
	nextion_big_comm.callback = NextionBig_DataRcv;
 80047e2:	4bc1      	ldr	r3, [pc, #772]	; (8004ae8 <DisplayTask+0x334>)
 80047e4:	f8c8 310a 	str.w	r3, [r8, #266]	; 0x10a
	nextion_small_comm.callback = NextionSmall_DataRcv;
 80047e8:	4bc0      	ldr	r3, [pc, #768]	; (8004aec <DisplayTask+0x338>)
 80047ea:	f8c4 310a 	str.w	r3, [r4, #266]	; 0x10a
	Config_GetEthernetConfig(&configuration);
 80047ee:	a803      	add	r0, sp, #12
 80047f0:	f7fd f82c 	bl	800184c <Config_GetEthernetConfig>
	vTaskDelay(1000);
 80047f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047f8:	f007 fa5e 	bl	800bcb8 <vTaskDelay>
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80047fc:	4cbc      	ldr	r4, [pc, #752]	; (8004af0 <DisplayTask+0x33c>)
 80047fe:	2200      	movs	r2, #0
 8004800:	49bc      	ldr	r1, [pc, #752]	; (8004af4 <DisplayTask+0x340>)
 8004802:	4620      	mov	r0, r4
 8004804:	f004 fcdb 	bl	80091be <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 8004808:	2200      	movs	r2, #0
 800480a:	49bb      	ldr	r1, [pc, #748]	; (8004af8 <DisplayTask+0x344>)
 800480c:	4620      	mov	r0, r4
 800480e:	f004 fd01 	bl	8009214 <HAL_RTC_GetDate>
	nextion_SendData(NEXTION_SMALL_UART, NEX_WAKE, 0, 0, 0);
 8004812:	2400      	movs	r4, #0
 8004814:	9400      	str	r4, [sp, #0]
 8004816:	4623      	mov	r3, r4
 8004818:	4622      	mov	r2, r4
 800481a:	4621      	mov	r1, r4
 800481c:	4630      	mov	r0, r6
 800481e:	f7ff fdaf 	bl	8004380 <nextion_SendData>
	vTaskDelay(1);
 8004822:	2001      	movs	r0, #1
 8004824:	f007 fa48 	bl	800bcb8 <vTaskDelay>
	nextion_SendData(NEXTION_SMALL_UART, NEX_SENDME, 0, 0, 0);
 8004828:	9400      	str	r4, [sp, #0]
 800482a:	4623      	mov	r3, r4
 800482c:	4622      	mov	r2, r4
 800482e:	2101      	movs	r1, #1
 8004830:	4630      	mov	r0, r6
 8004832:	f7ff fda5 	bl	8004380 <nextion_SendData>
	vTaskDelay(1);
 8004836:	2001      	movs	r0, #1
 8004838:	f007 fa3e 	bl	800bcb8 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 800483c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004840:	2001      	movs	r0, #1
 8004842:	f007 fe05 	bl	800c450 <ulTaskNotifyTake>
	nextion_SendData(NEXTION_BIG_UART, NEX_SENDME, 0, 0, 0);
 8004846:	9400      	str	r4, [sp, #0]
 8004848:	4623      	mov	r3, r4
 800484a:	4622      	mov	r2, r4
 800484c:	2101      	movs	r1, #1
 800484e:	4638      	mov	r0, r7
 8004850:	f7ff fd96 	bl	8004380 <nextion_SendData>
	vTaskDelay(1);
 8004854:	2001      	movs	r0, #1
 8004856:	f007 fa2f 	bl	800bcb8 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 800485a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800485e:	2001      	movs	r0, #1
 8004860:	f007 fdf6 	bl	800c450 <ulTaskNotifyTake>
	if(nextion_big.display != 30){
 8004864:	782b      	ldrb	r3, [r5, #0]
 8004866:	2b1e      	cmp	r3, #30
 8004868:	d005      	beq.n	8004876 <DisplayTask+0xc2>
		nextion_UpdateTime(NEXTION_BIG_UART);
 800486a:	4638      	mov	r0, r7
 800486c:	f7ff fe1e 	bl	80044ac <nextion_UpdateTime>
		nextion_SendConfig(NEXTION_BIG_UART);
 8004870:	4638      	mov	r0, r7
 8004872:	f7ff fddd 	bl	8004430 <nextion_SendConfig>
	if(nextion_small.display != 30){
 8004876:	4b97      	ldr	r3, [pc, #604]	; (8004ad4 <DisplayTask+0x320>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b1e      	cmp	r3, #30
 800487c:	d002      	beq.n	8004884 <DisplayTask+0xd0>
		nextion_SendConfig(NEXTION_SMALL_UART);
 800487e:	4897      	ldr	r0, [pc, #604]	; (8004adc <DisplayTask+0x328>)
 8004880:	f7ff fdd6 	bl	8004430 <nextion_SendConfig>
{
 8004884:	2600      	movs	r6, #0
 8004886:	46b1      	mov	r9, r6
 8004888:	e02b      	b.n	80048e2 <DisplayTask+0x12e>
				nextion_UpdateTime(NEXTION_BIG_UART);
 800488a:	4896      	ldr	r0, [pc, #600]	; (8004ae4 <DisplayTask+0x330>)
 800488c:	f7ff fe0e 	bl	80044ac <nextion_UpdateTime>
				if(nextion_small.display != 30){
 8004890:	4b90      	ldr	r3, [pc, #576]	; (8004ad4 <DisplayTask+0x320>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b1e      	cmp	r3, #30
 8004896:	d02f      	beq.n	80048f8 <DisplayTask+0x144>
					nextion_SendData(NEXTION_SMALL_UART, NEX_SETTINGS_LOCK, 0, 0, 0);
 8004898:	2200      	movs	r2, #0
 800489a:	9200      	str	r2, [sp, #0]
 800489c:	4613      	mov	r3, r2
 800489e:	2121      	movs	r1, #33	; 0x21
 80048a0:	488e      	ldr	r0, [pc, #568]	; (8004adc <DisplayTask+0x328>)
 80048a2:	f7ff fd6d 	bl	8004380 <nextion_SendData>
 80048a6:	e027      	b.n	80048f8 <DisplayTask+0x144>
					nextion_SendData(NEXTION_SMALL_UART, NEX_SETTINGS_UNLOCK, 0, 0, 0);
 80048a8:	2200      	movs	r2, #0
 80048aa:	9200      	str	r2, [sp, #0]
 80048ac:	4613      	mov	r3, r2
 80048ae:	2120      	movs	r1, #32
 80048b0:	488a      	ldr	r0, [pc, #552]	; (8004adc <DisplayTask+0x328>)
 80048b2:	f7ff fd65 	bl	8004380 <nextion_SendData>
 80048b6:	e01f      	b.n	80048f8 <DisplayTask+0x144>
				if(nextion_big.display != 30){
 80048b8:	4b87      	ldr	r3, [pc, #540]	; (8004ad8 <DisplayTask+0x324>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b1e      	cmp	r3, #30
 80048be:	d131      	bne.n	8004924 <DisplayTask+0x170>
		if(nextion_big.display == 1){
 80048c0:	4b85      	ldr	r3, [pc, #532]	; (8004ad8 <DisplayTask+0x324>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d035      	beq.n	8004934 <DisplayTask+0x180>
		if(nextion_small.display == 0){
 80048c8:	4b82      	ldr	r3, [pc, #520]	; (8004ad4 <DisplayTask+0x320>)
 80048ca:	781c      	ldrb	r4, [r3, #0]
 80048cc:	2c00      	cmp	r4, #0
 80048ce:	f000 8096 	beq.w	80049fe <DisplayTask+0x24a>
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 80048d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80048d6:	2001      	movs	r0, #1
 80048d8:	f007 fdba 	bl	800c450 <ulTaskNotifyTake>
		if(ulNotificationValue > 0){
 80048dc:	2800      	cmp	r0, #0
 80048de:	f040 80e6 	bne.w	8004aae <DisplayTask+0x2fa>
		if(nextion_big.display != nextion_big.last_display){
 80048e2:	4b7d      	ldr	r3, [pc, #500]	; (8004ad8 <DisplayTask+0x324>)
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	785b      	ldrb	r3, [r3, #1]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d008      	beq.n	80048fe <DisplayTask+0x14a>
			if(nextion_big.display == 2){
 80048ec:	2a02      	cmp	r2, #2
 80048ee:	d0cc      	beq.n	800488a <DisplayTask+0xd6>
				if(nextion_small.display != 30){
 80048f0:	4b78      	ldr	r3, [pc, #480]	; (8004ad4 <DisplayTask+0x320>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b1e      	cmp	r3, #30
 80048f6:	d1d7      	bne.n	80048a8 <DisplayTask+0xf4>
			nextion_big.last_display = nextion_big.display;
 80048f8:	4b77      	ldr	r3, [pc, #476]	; (8004ad8 <DisplayTask+0x324>)
 80048fa:	781a      	ldrb	r2, [r3, #0]
 80048fc:	705a      	strb	r2, [r3, #1]
		if(nextion_small.display != nextion_small.last_display){
 80048fe:	4b75      	ldr	r3, [pc, #468]	; (8004ad4 <DisplayTask+0x320>)
 8004900:	781a      	ldrb	r2, [r3, #0]
 8004902:	785b      	ldrb	r3, [r3, #1]
 8004904:	429a      	cmp	r2, r3
 8004906:	d0db      	beq.n	80048c0 <DisplayTask+0x10c>
			if(nextion_small.display == 1){
 8004908:	2a01      	cmp	r2, #1
 800490a:	d0d5      	beq.n	80048b8 <DisplayTask+0x104>
				if(nextion_big.display != 30){
 800490c:	4b72      	ldr	r3, [pc, #456]	; (8004ad8 <DisplayTask+0x324>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b1e      	cmp	r3, #30
 8004912:	d0d5      	beq.n	80048c0 <DisplayTask+0x10c>
					nextion_SendData(NEXTION_BIG_UART, NEX_SETTINGS_UNLOCK, 0, 0, 0);
 8004914:	2200      	movs	r2, #0
 8004916:	9200      	str	r2, [sp, #0]
 8004918:	4613      	mov	r3, r2
 800491a:	2120      	movs	r1, #32
 800491c:	4871      	ldr	r0, [pc, #452]	; (8004ae4 <DisplayTask+0x330>)
 800491e:	f7ff fd2f 	bl	8004380 <nextion_SendData>
 8004922:	e7cd      	b.n	80048c0 <DisplayTask+0x10c>
					nextion_SendData(NEXTION_BIG_UART, NEX_SETTINGS_LOCK, 0, 0, 0);
 8004924:	2200      	movs	r2, #0
 8004926:	9200      	str	r2, [sp, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	2121      	movs	r1, #33	; 0x21
 800492c:	486d      	ldr	r0, [pc, #436]	; (8004ae4 <DisplayTask+0x330>)
 800492e:	f7ff fd27 	bl	8004380 <nextion_SendData>
 8004932:	e7c5      	b.n	80048c0 <DisplayTask+0x10c>
			nextion_SendData(NEXTION_BIG_UART, NEX_COUNTER_PRESENCE, RegulationTaskData.counter.counter_present, 0, 0);
 8004934:	4d6b      	ldr	r5, [pc, #428]	; (8004ae4 <DisplayTask+0x330>)
 8004936:	2400      	movs	r4, #0
 8004938:	9400      	str	r4, [sp, #0]
 800493a:	4623      	mov	r3, r4
 800493c:	4622      	mov	r2, r4
 800493e:	2113      	movs	r1, #19
 8004940:	4628      	mov	r0, r5
 8004942:	f7ff fd1d 	bl	8004380 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_TSENS_PRESENCE, RegulationTaskData.counter.temperatures_present, 0, 0);
 8004946:	9400      	str	r4, [sp, #0]
 8004948:	4623      	mov	r3, r4
 800494a:	4622      	mov	r2, r4
 800494c:	2114      	movs	r1, #20
 800494e:	4628      	mov	r0, r5
 8004950:	f7ff fd16 	bl	8004380 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_MAIN_SW, RegulationTaskData.ControlWord.MainSwitch_State, 0, 0);
 8004954:	9400      	str	r4, [sp, #0]
 8004956:	4623      	mov	r3, r4
 8004958:	4622      	mov	r2, r4
 800495a:	2115      	movs	r1, #21
 800495c:	4628      	mov	r0, r5
 800495e:	f7ff fd0f 	bl	8004380 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_CWU_PIC, pic, 0, 0);
 8004962:	9400      	str	r4, [sp, #0]
 8004964:	4623      	mov	r3, r4
 8004966:	2201      	movs	r2, #1
 8004968:	2116      	movs	r1, #22
 800496a:	4628      	mov	r0, r5
 800496c:	f7ff fd08 	bl	8004380 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_CO_PIC, pic, 0, 0);
 8004970:	9400      	str	r4, [sp, #0]
 8004972:	4623      	mov	r3, r4
 8004974:	2201      	movs	r2, #1
 8004976:	2117      	movs	r1, #23
 8004978:	4628      	mov	r0, r5
 800497a:	f7ff fd01 	bl	8004380 <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 800497e:	e03b      	b.n	80049f8 <DisplayTask+0x244>
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_VOLTAGE, i + 1, (uint32_t)RegulationTaskData.counter.voltages[i], rest);
 8004980:	3401      	adds	r4, #1
 8004982:	4f58      	ldr	r7, [pc, #352]	; (8004ae4 <DisplayTask+0x330>)
 8004984:	2500      	movs	r5, #0
 8004986:	9500      	str	r5, [sp, #0]
 8004988:	462b      	mov	r3, r5
 800498a:	4622      	mov	r2, r4
 800498c:	2118      	movs	r1, #24
 800498e:	4638      	mov	r0, r7
 8004990:	f7ff fcf6 	bl	8004380 <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_CURRENT, i + 1, (uint32_t)RegulationTaskData.counter.currents[i], rest);
 8004994:	9500      	str	r5, [sp, #0]
 8004996:	462b      	mov	r3, r5
 8004998:	4622      	mov	r2, r4
 800499a:	2119      	movs	r1, #25
 800499c:	4638      	mov	r0, r7
 800499e:	f7ff fcef 	bl	8004380 <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_POWER, i + 1, (uint32_t)RegulationTaskData.counter.powers[i], rest);
 80049a2:	9500      	str	r5, [sp, #0]
 80049a4:	462b      	mov	r3, r5
 80049a6:	4622      	mov	r2, r4
 80049a8:	211a      	movs	r1, #26
 80049aa:	4638      	mov	r0, r7
 80049ac:	f7ff fce8 	bl	8004380 <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.powers[i] / RegulationTaskData.parameters.net_max_power * 100.0);
 80049b0:	eddf 7a52 	vldr	s15, [pc, #328]	; 8004afc <DisplayTask+0x348>
 80049b4:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 80049b8:	ee17 0a90 	vmov	r0, s15
 80049bc:	f7fb fdcc 	bl	8000558 <__aeabi_f2d>
 80049c0:	2200      	movs	r2, #0
 80049c2:	4b4f      	ldr	r3, [pc, #316]	; (8004b00 <DisplayTask+0x34c>)
 80049c4:	f7fb fe20 	bl	8000608 <__aeabi_dmul>
 80049c8:	f7fc f830 	bl	8000a2c <__aeabi_d2uiz>
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_PRG_BAR, i + 1, rest, 0);
 80049cc:	9500      	str	r5, [sp, #0]
 80049ce:	4603      	mov	r3, r0
 80049d0:	4622      	mov	r2, r4
 80049d2:	211b      	movs	r1, #27
 80049d4:	4638      	mov	r0, r7
 80049d6:	f7ff fcd3 	bl	8004380 <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_CO_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CO_heater_PWM[i], 0);
 80049da:	9500      	str	r5, [sp, #0]
 80049dc:	462b      	mov	r3, r5
 80049de:	4622      	mov	r2, r4
 80049e0:	211c      	movs	r1, #28
 80049e2:	4638      	mov	r0, r7
 80049e4:	f7ff fccc 	bl	8004380 <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_CWU_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CWU_heater_PWM[i], 0);
 80049e8:	9500      	str	r5, [sp, #0]
 80049ea:	462b      	mov	r3, r5
 80049ec:	4622      	mov	r2, r4
 80049ee:	211d      	movs	r1, #29
 80049f0:	4638      	mov	r0, r7
 80049f2:	f7ff fcc5 	bl	8004380 <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 80049f6:	b2e4      	uxtb	r4, r4
 80049f8:	2c02      	cmp	r4, #2
 80049fa:	d9c1      	bls.n	8004980 <DisplayTask+0x1cc>
 80049fc:	e764      	b.n	80048c8 <DisplayTask+0x114>
			nextion_SendData(NEXTION_SMALL_UART, NEX_COUNTER_PRESENCE, RegulationTaskData.counter.counter_present, 0, 0);
 80049fe:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8004adc <DisplayTask+0x328>
 8004a02:	2500      	movs	r5, #0
 8004a04:	9500      	str	r5, [sp, #0]
 8004a06:	462b      	mov	r3, r5
 8004a08:	462a      	mov	r2, r5
 8004a0a:	2113      	movs	r1, #19
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	f7ff fcb7 	bl	8004380 <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_TSENS_PRESENCE, RegulationTaskData.counter.temperatures_present, 0, 0);
 8004a12:	9500      	str	r5, [sp, #0]
 8004a14:	462b      	mov	r3, r5
 8004a16:	462a      	mov	r2, r5
 8004a18:	2114      	movs	r1, #20
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	f7ff fcb0 	bl	8004380 <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_MAIN_SW, RegulationTaskData.ControlWord.MainSwitch_State, 0, 0);
 8004a20:	9500      	str	r5, [sp, #0]
 8004a22:	462b      	mov	r3, r5
 8004a24:	462a      	mov	r2, r5
 8004a26:	2115      	movs	r1, #21
 8004a28:	4640      	mov	r0, r8
 8004a2a:	f7ff fca9 	bl	8004380 <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 8004a2e:	e03b      	b.n	8004aa8 <DisplayTask+0x2f4>
				nextion_SendData(NEXTION_SMALL_UART, NEX_PHASE_VOLTAGE, i + 1, (uint32_t)RegulationTaskData.counter.voltages[i], rest);
 8004a30:	3401      	adds	r4, #1
 8004a32:	4f2a      	ldr	r7, [pc, #168]	; (8004adc <DisplayTask+0x328>)
 8004a34:	2500      	movs	r5, #0
 8004a36:	9500      	str	r5, [sp, #0]
 8004a38:	462b      	mov	r3, r5
 8004a3a:	4622      	mov	r2, r4
 8004a3c:	2118      	movs	r1, #24
 8004a3e:	4638      	mov	r0, r7
 8004a40:	f7ff fc9e 	bl	8004380 <nextion_SendData>
				nextion_SendData(NEXTION_SMALL_UART, NEX_PHASE_CURRENT, i + 1, (uint32_t)RegulationTaskData.counter.currents[i], rest);
 8004a44:	9500      	str	r5, [sp, #0]
 8004a46:	462b      	mov	r3, r5
 8004a48:	4622      	mov	r2, r4
 8004a4a:	2119      	movs	r1, #25
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	f7ff fc97 	bl	8004380 <nextion_SendData>
				nextion_SendData(NEXTION_SMALL_UART, NEX_PHASE_POWER, i + 1, (uint32_t)RegulationTaskData.counter.powers[i], rest);
 8004a52:	9500      	str	r5, [sp, #0]
 8004a54:	462b      	mov	r3, r5
 8004a56:	4622      	mov	r2, r4
 8004a58:	211a      	movs	r1, #26
 8004a5a:	4638      	mov	r0, r7
 8004a5c:	f7ff fc90 	bl	8004380 <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.powers[i] / RegulationTaskData.parameters.net_max_power * 100.0);
 8004a60:	eddf 7a26 	vldr	s15, [pc, #152]	; 8004afc <DisplayTask+0x348>
 8004a64:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 8004a68:	ee17 0a90 	vmov	r0, s15
 8004a6c:	f7fb fd74 	bl	8000558 <__aeabi_f2d>
 8004a70:	2200      	movs	r2, #0
 8004a72:	4b23      	ldr	r3, [pc, #140]	; (8004b00 <DisplayTask+0x34c>)
 8004a74:	f7fb fdc8 	bl	8000608 <__aeabi_dmul>
 8004a78:	f7fb ffd8 	bl	8000a2c <__aeabi_d2uiz>
				nextion_SendData(NEXTION_SMALL_UART, NEX_PHASE_PRG_BAR, i + 1, rest, 0);
 8004a7c:	9500      	str	r5, [sp, #0]
 8004a7e:	4603      	mov	r3, r0
 8004a80:	4622      	mov	r2, r4
 8004a82:	211b      	movs	r1, #27
 8004a84:	4638      	mov	r0, r7
 8004a86:	f7ff fc7b 	bl	8004380 <nextion_SendData>
				nextion_SendData(NEXTION_SMALL_UART, NEX_CO_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CO_heater_PWM[i], 0);
 8004a8a:	9500      	str	r5, [sp, #0]
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	4622      	mov	r2, r4
 8004a90:	211c      	movs	r1, #28
 8004a92:	4638      	mov	r0, r7
 8004a94:	f7ff fc74 	bl	8004380 <nextion_SendData>
				nextion_SendData(NEXTION_SMALL_UART, NEX_CWU_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CWU_heater_PWM[i], 0);
 8004a98:	9500      	str	r5, [sp, #0]
 8004a9a:	462b      	mov	r3, r5
 8004a9c:	4622      	mov	r2, r4
 8004a9e:	211d      	movs	r1, #29
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	f7ff fc6d 	bl	8004380 <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 8004aa6:	b2e4      	uxtb	r4, r4
 8004aa8:	2c02      	cmp	r4, #2
 8004aaa:	d9c1      	bls.n	8004a30 <DisplayTask+0x27c>
 8004aac:	e711      	b.n	80048d2 <DisplayTask+0x11e>
			if(ulNotificationValue == 1){
 8004aae:	2801      	cmp	r0, #1
 8004ab0:	d006      	beq.n	8004ac0 <DisplayTask+0x30c>
			}else if(ulNotificationValue == 2){
 8004ab2:	2802      	cmp	r0, #2
 8004ab4:	d009      	beq.n	8004aca <DisplayTask+0x316>
			Config_ChangeValue(param, (void*)valPtr);
 8004ab6:	4631      	mov	r1, r6
 8004ab8:	4648      	mov	r0, r9
 8004aba:	f7fc fe31 	bl	8001720 <Config_ChangeValue>
 8004abe:	e710      	b.n	80048e2 <DisplayTask+0x12e>
				param = nextion_big.param;
 8004ac0:	4e05      	ldr	r6, [pc, #20]	; (8004ad8 <DisplayTask+0x324>)
 8004ac2:	f8d6 9004 	ldr.w	r9, [r6, #4]
				valPtr = &nextion_big.value[0];
 8004ac6:	3608      	adds	r6, #8
 8004ac8:	e7f5      	b.n	8004ab6 <DisplayTask+0x302>
				param = nextion_small.param;
 8004aca:	4e02      	ldr	r6, [pc, #8]	; (8004ad4 <DisplayTask+0x320>)
 8004acc:	f8d6 9004 	ldr.w	r9, [r6, #4]
				valPtr = &nextion_small.value[0];
 8004ad0:	3608      	adds	r6, #8
 8004ad2:	e7f0      	b.n	8004ab6 <DisplayTask+0x302>
 8004ad4:	20003ca0 	.word	0x20003ca0
 8004ad8:	20003a48 	.word	0x20003a48
 8004adc:	20004024 	.word	0x20004024
 8004ae0:	20003b8c 	.word	0x20003b8c
 8004ae4:	2000410c 	.word	0x2000410c
 8004ae8:	08004555 	.word	0x08004555
 8004aec:	08004671 	.word	0x08004671
 8004af0:	200040a8 	.word	0x200040a8
 8004af4:	20003cac 	.word	0x20003cac
 8004af8:	20003cc0 	.word	0x20003cc0
 8004afc:	00000000 	.word	0x00000000
 8004b00:	40590000 	.word	0x40590000
 8004b04:	20003a78 	.word	0x20003a78

08004b08 <W5500_WriteBuff>:

static void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
}

static void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8004b08:	b508      	push	{r3, lr}
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8004b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b0e:	460a      	mov	r2, r1
 8004b10:	4601      	mov	r1, r0
 8004b12:	4802      	ldr	r0, [pc, #8]	; (8004b1c <W5500_WriteBuff+0x14>)
 8004b14:	f004 fcb2 	bl	800947c <HAL_SPI_Transmit>
}
 8004b18:	bd08      	pop	{r3, pc}
 8004b1a:	bf00      	nop
 8004b1c:	2000414c 	.word	0x2000414c

08004b20 <W5500_WriteByte>:
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
    return byte;
}

static void W5500_WriteByte(uint8_t byte) {
 8004b20:	b500      	push	{lr}
 8004b22:	b083      	sub	sp, #12
 8004b24:	ab02      	add	r3, sp, #8
 8004b26:	f803 0d01 	strb.w	r0, [r3, #-1]!
    W5500_WriteBuff(&byte, sizeof(byte));
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff ffeb 	bl	8004b08 <W5500_WriteBuff>
}
 8004b32:	b003      	add	sp, #12
 8004b34:	f85d fb04 	ldr.w	pc, [sp], #4

08004b38 <W5500_ReadBuff>:
static void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8004b38:	b508      	push	{r3, lr}
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8004b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b3e:	460a      	mov	r2, r1
 8004b40:	4601      	mov	r1, r0
 8004b42:	4802      	ldr	r0, [pc, #8]	; (8004b4c <W5500_ReadBuff+0x14>)
 8004b44:	f004 fe7e 	bl	8009844 <HAL_SPI_Receive>
}
 8004b48:	bd08      	pop	{r3, pc}
 8004b4a:	bf00      	nop
 8004b4c:	2000414c 	.word	0x2000414c

08004b50 <W5500_ReadByte>:
static uint8_t W5500_ReadByte(void) {
 8004b50:	b500      	push	{lr}
 8004b52:	b083      	sub	sp, #12
    W5500_ReadBuff(&byte, sizeof(byte));
 8004b54:	2101      	movs	r1, #1
 8004b56:	f10d 0007 	add.w	r0, sp, #7
 8004b5a:	f7ff ffed 	bl	8004b38 <W5500_ReadBuff>
}
 8004b5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004b62:	b003      	add	sp, #12
 8004b64:	f85d fb04 	ldr.w	pc, [sp], #4

08004b68 <cs_desel>:
static void cs_desel() {
 8004b68:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET); //CS HIGH
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	2110      	movs	r1, #16
 8004b6e:	4805      	ldr	r0, [pc, #20]	; (8004b84 <cs_desel+0x1c>)
 8004b70:	f002 ff61 	bl	8007a36 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8004b74:	2300      	movs	r3, #0
 8004b76:	461a      	mov	r2, r3
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4803      	ldr	r0, [pc, #12]	; (8004b88 <cs_desel+0x20>)
 8004b7c:	6800      	ldr	r0, [r0, #0]
 8004b7e:	f006 f991 	bl	800aea4 <xQueueGenericSend>
}
 8004b82:	bd08      	pop	{r3, pc}
 8004b84:	40020000 	.word	0x40020000
 8004b88:	2000422c 	.word	0x2000422c

08004b8c <cs_sel>:
static void cs_sel() {
 8004b8c:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 8004b8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <cs_sel+0x1c>)
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	f006 fb7b 	bl	800b290 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET); //CS LOW
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2110      	movs	r1, #16
 8004b9e:	4803      	ldr	r0, [pc, #12]	; (8004bac <cs_sel+0x20>)
 8004ba0:	f002 ff49 	bl	8007a36 <HAL_GPIO_WritePin>
}
 8004ba4:	bd08      	pop	{r3, pc}
 8004ba6:	bf00      	nop
 8004ba8:	2000422c 	.word	0x2000422c
 8004bac:	40020000 	.word	0x40020000

08004bb0 <EthernetTask>:

void EthernetTask(void* argument)
{
 8004bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb4:	b08c      	sub	sp, #48	; 0x30
	uint8_t remoteIP[4][4];
	uint16_t remotePort[4];
	int32_t rcvSize = 0;
	int32_t mbRcvSize = 0;

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8004bb6:	49cf      	ldr	r1, [pc, #828]	; (8004ef4 <EthernetTask+0x344>)
 8004bb8:	48cf      	ldr	r0, [pc, #828]	; (8004ef8 <EthernetTask+0x348>)
 8004bba:	f7fd feaf 	bl	800291c <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8004bbe:	49cf      	ldr	r1, [pc, #828]	; (8004efc <EthernetTask+0x34c>)
 8004bc0:	48cf      	ldr	r0, [pc, #828]	; (8004f00 <EthernetTask+0x350>)
 8004bc2:	f7fd febd 	bl	8002940 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8004bc6:	49cf      	ldr	r1, [pc, #828]	; (8004f04 <EthernetTask+0x354>)
 8004bc8:	48cf      	ldr	r0, [pc, #828]	; (8004f08 <EthernetTask+0x358>)
 8004bca:	f7fd fed1 	bl	8002970 <reg_wizchip_spiburst_cbfunc>

	CLI_Init();
 8004bce:	f7fc fd45 	bl	800165c <CLI_Init>

	if(Config_GetEthernetConfig(&ethConf) != CONF_OK){
 8004bd2:	48ce      	ldr	r0, [pc, #824]	; (8004f0c <EthernetTask+0x35c>)
 8004bd4:	f7fc fe3a 	bl	800184c <Config_GetEthernetConfig>
 8004bd8:	b110      	cbz	r0, 8004be0 <EthernetTask+0x30>
		vTaskSuspend(NULL);
 8004bda:	2000      	movs	r0, #0
 8004bdc:	f007 f8f0 	bl	800bdc0 <vTaskSuspend>
	}

	memcpy(&netInfo.gw, &ethConf.gatewayAddress, 4);
 8004be0:	4bca      	ldr	r3, [pc, #808]	; (8004f0c <EthernetTask+0x35c>)
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	4cca      	ldr	r4, [pc, #808]	; (8004f10 <EthernetTask+0x360>)
 8004be6:	f8c4 200e 	str.w	r2, [r4, #14]
	memcpy(&netInfo.ip, &ethConf.ipAddress, 4);
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	f8c4 2006 	str.w	r2, [r4, #6]
	memcpy(&netInfo.mac, &ethConf.macAddress, 6);
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8004bf6:	6020      	str	r0, [r4, #0]
 8004bf8:	8892      	ldrh	r2, [r2, #4]
 8004bfa:	80a2      	strh	r2, [r4, #4]
	memcpy(&netInfo.sn, &ethConf.subnetMask, 4);
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f8c4 300a 	str.w	r3, [r4, #10]

	wizchip_sw_reset();
 8004c02:	f7fd fecd 	bl	80029a0 <wizchip_sw_reset>
	wizchip_init(bufSize, bufSize);
 8004c06:	48c3      	ldr	r0, [pc, #780]	; (8004f14 <EthernetTask+0x364>)
 8004c08:	4601      	mov	r1, r0
 8004c0a:	f7fd ff05 	bl	8002a18 <wizchip_init>

	wizchip_setnetinfo(&netInfo);
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f7fd ff66 	bl	8002ae0 <wizchip_setnetinfo>
	wizchip_setinterruptmask(IK_SOCK_0 | IK_SOCK_1 | IK_SOCK_3 | IK_SOCK_7);
 8004c14:	f44f 400b 	mov.w	r0, #35584	; 0x8b00
 8004c18:	f7fd ff54 	bl	8002ac4 <wizchip_setinterruptmask>
	wizchip_getnetinfo(&netInfo);
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	f7fd ff8d 	bl	8002b3c <wizchip_getnetinfo>



	// Modbus Port
	if(socket(MODBUS_SOCKET, Sn_MR_TCP, MODBUS_PORT, SF_TCP_NODELAY) == MODBUS_SOCKET) {
 8004c22:	2320      	movs	r3, #32
 8004c24:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8004c28:	2101      	movs	r1, #1
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	f7fd f986 	bl	8001f3c <socket>
 8004c30:	b940      	cbnz	r0, 8004c44 <EthernetTask+0x94>
		  	  /* Put socket in LISTEN mode. This means we are creating a TCP server */
		if(listen(MODBUS_SOCKET) == SOCK_OK) {
 8004c32:	f7fd fa2f 	bl	8002094 <listen>
 8004c36:	2801      	cmp	r0, #1
 8004c38:	d104      	bne.n	8004c44 <EthernetTask+0x94>
			setSn_IMR(MODBUS_SOCKET, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 8004c3a:	211f      	movs	r1, #31
 8004c3c:	f642 4008 	movw	r0, #11272	; 0x2c08
 8004c40:	f7fc ffb0 	bl	8001ba4 <WIZCHIP_WRITE>
		}
	}

	// Telnet Port (CLI, debug)
	if(socket(TELNET_SOCKET, Sn_MR_TCP, TELNET_PORT, SF_TCP_NODELAY) == TELNET_SOCKET){
 8004c44:	2320      	movs	r3, #32
 8004c46:	2217      	movs	r2, #23
 8004c48:	2101      	movs	r1, #1
 8004c4a:	2003      	movs	r0, #3
 8004c4c:	f7fd f976 	bl	8001f3c <socket>
 8004c50:	2803      	cmp	r0, #3
 8004c52:	d108      	bne.n	8004c66 <EthernetTask+0xb6>
		if(listen(TELNET_SOCKET) == SOCK_OK) {
 8004c54:	f7fd fa1e 	bl	8002094 <listen>
 8004c58:	2801      	cmp	r0, #1
 8004c5a:	d104      	bne.n	8004c66 <EthernetTask+0xb6>
			setSn_IMR(TELNET_SOCKET, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 8004c5c:	211f      	movs	r1, #31
 8004c5e:	f642 4068 	movw	r0, #11368	; 0x2c68
 8004c62:	f7fc ff9f 	bl	8001ba4 <WIZCHIP_WRITE>
		}
	}

	if(socket(DNS_SOCKET, Sn_MR_UDP, DNS_PORT, 0) == DNS_SOCKET){
 8004c66:	2300      	movs	r3, #0
 8004c68:	2235      	movs	r2, #53	; 0x35
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	2006      	movs	r0, #6
 8004c6e:	f7fd f965 	bl	8001f3c <socket>
 8004c72:	2806      	cmp	r0, #6
 8004c74:	d10d      	bne.n	8004c92 <EthernetTask+0xe2>
		setSn_IMR(DNS_SOCKET, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 8004c76:	211f      	movs	r1, #31
 8004c78:	f642 40c8 	movw	r0, #11464	; 0x2cc8
 8004c7c:	f7fc ff92 	bl	8001ba4 <WIZCHIP_WRITE>
		DNS_init(DNS_SOCKET, dnsBuf);
 8004c80:	49a5      	ldr	r1, [pc, #660]	; (8004f18 <EthernetTask+0x368>)
 8004c82:	2006      	movs	r0, #6
 8004c84:	f7fe fc5c 	bl	8003540 <DNS_init>
		DNS_run(dnsIp, ntpUrl, ntpIp);
 8004c88:	4aa4      	ldr	r2, [pc, #656]	; (8004f1c <EthernetTask+0x36c>)
 8004c8a:	49a5      	ldr	r1, [pc, #660]	; (8004f20 <EthernetTask+0x370>)
 8004c8c:	48a5      	ldr	r0, [pc, #660]	; (8004f24 <EthernetTask+0x374>)
 8004c8e:	f7fe fc67 	bl	8003560 <DNS_run>
	}

	if(socket(SNTP_SOCKET, Sn_MR_UDP, SNTP_PORT, 0) == SNTP_SOCKET){
 8004c92:	2300      	movs	r3, #0
 8004c94:	227b      	movs	r2, #123	; 0x7b
 8004c96:	2102      	movs	r1, #2
 8004c98:	2007      	movs	r0, #7
 8004c9a:	f7fd f94f 	bl	8001f3c <socket>
 8004c9e:	2807      	cmp	r0, #7
 8004ca0:	d10d      	bne.n	8004cbe <EthernetTask+0x10e>
		setSn_IMR(SNTP_SOCKET, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 8004ca2:	211f      	movs	r1, #31
 8004ca4:	f642 40e8 	movw	r0, #11496	; 0x2ce8
 8004ca8:	f7fc ff7c 	bl	8001ba4 <WIZCHIP_WRITE>
		SNTP_init(SNTP_SOCKET, ntpIp, 25, ntpBuf);
 8004cac:	4b9e      	ldr	r3, [pc, #632]	; (8004f28 <EthernetTask+0x378>)
 8004cae:	2219      	movs	r2, #25
 8004cb0:	499a      	ldr	r1, [pc, #616]	; (8004f1c <EthernetTask+0x36c>)
 8004cb2:	2007      	movs	r0, #7
 8004cb4:	f7fe fcce 	bl	8003654 <SNTP_init>
		SNTP_run(&time);
 8004cb8:	489c      	ldr	r0, [pc, #624]	; (8004f2c <EthernetTask+0x37c>)
 8004cba:	f7fe ffb9 	bl	8003c30 <SNTP_run>
{
 8004cbe:	2600      	movs	r6, #0
 8004cc0:	2701      	movs	r7, #1
	}

  /* Infinite loop */
	for(;;)
	{
		if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 8004cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f007 fbfc 	bl	800c4c8 <xTaskNotifyWait>
 8004cd0:	2801      	cmp	r0, #1
 8004cd2:	d1f6      	bne.n	8004cc2 <EthernetTask+0x112>
 8004cd4:	e17a      	b.n	8004fcc <EthernetTask+0x41c>
				if(interruptSource & IK_IP_CONFLICT){

				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_0){
					freesize = getSn_TxMAX(MODBUS_SOCKET);
 8004cd6:	f641 7008 	movw	r0, #7944	; 0x1f08
 8004cda:	f7fc ff31 	bl	8001b40 <WIZCHIP_READ>
 8004cde:	b280      	uxth	r0, r0
 8004ce0:	0280      	lsls	r0, r0, #10
 8004ce2:	4b93      	ldr	r3, [pc, #588]	; (8004f30 <EthernetTask+0x380>)
 8004ce4:	8018      	strh	r0, [r3, #0]
					interrupt = getSn_IR(MODBUS_SOCKET);
 8004ce6:	f44f 7002 	mov.w	r0, #520	; 0x208
 8004cea:	f7fc ff29 	bl	8001b40 <WIZCHIP_READ>
 8004cee:	4605      	mov	r5, r0
					setSn_IR(MODBUS_SOCKET, interrupt);
 8004cf0:	f000 011f 	and.w	r1, r0, #31
 8004cf4:	f44f 7002 	mov.w	r0, #520	; 0x208
 8004cf8:	f7fc ff54 	bl	8001ba4 <WIZCHIP_WRITE>
					if(interrupt & Sn_IR_CON){

					}

					if(interrupt & Sn_IR_RECV){
 8004cfc:	f015 0f04 	tst.w	r5, #4
 8004d00:	d11e      	bne.n	8004d40 <EthernetTask+0x190>
						}else{
							RuntimeStats_ModbusSlaveRqErrInc();
						}
					}

					if(interrupt & Sn_IR_SENDOK){
 8004d02:	f015 0f10 	tst.w	r5, #16
 8004d06:	d152      	bne.n	8004dae <EthernetTask+0x1fe>
						memset(mbTxBuf, 0, MB_TX_BUF_SIZE);
						ClrSiS(MODBUS_SOCKET);
					}

					if((interrupt & Sn_IR_DISCON) || (interrupt & Sn_IR_TIMEOUT)){
 8004d08:	f015 0f0a 	tst.w	r5, #10
 8004d0c:	f000 816c 	beq.w	8004fe8 <EthernetTask+0x438>
						disconnect(MODBUS_SOCKET);
 8004d10:	2000      	movs	r0, #0
 8004d12:	f7fd f9f5 	bl	8002100 <disconnect>
						if(socket(MODBUS_SOCKET, Sn_MR_TCP, MODBUS_PORT, SF_TCP_NODELAY) == MODBUS_SOCKET){
 8004d16:	2320      	movs	r3, #32
 8004d18:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	2000      	movs	r0, #0
 8004d20:	f7fd f90c 	bl	8001f3c <socket>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	f040 815f 	bne.w	8004fe8 <EthernetTask+0x438>
							if(listen(MODBUS_SOCKET) == SOCK_OK) {
 8004d2a:	f7fd f9b3 	bl	8002094 <listen>
 8004d2e:	2801      	cmp	r0, #1
 8004d30:	f040 815a 	bne.w	8004fe8 <EthernetTask+0x438>
								setSn_IMR(MODBUS_SOCKET, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 8004d34:	211f      	movs	r1, #31
 8004d36:	f642 4008 	movw	r0, #11272	; 0x2c08
 8004d3a:	f7fc ff33 	bl	8001ba4 <WIZCHIP_WRITE>
 8004d3e:	e153      	b.n	8004fe8 <EthernetTask+0x438>
						mbRcvSize = recv(MODBUS_SOCKET, mbRxBuf, MB_RX_BUF_SIZE);
 8004d40:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8004f44 <EthernetTask+0x394>
 8004d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d48:	4641      	mov	r1, r8
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	f7fd fac2 	bl	80022d4 <recv>
 8004d50:	4682      	mov	sl, r0
						RuntimeStats_ModbusSlaveRqAllInc();
 8004d52:	f7ff fa9f 	bl	8004294 <RuntimeStats_ModbusSlaveRqAllInc>
						xSemaphoreTake(ModbusMutexHandle, portMAX_DELAY);
 8004d56:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8004f48 <EthernetTask+0x398>
 8004d5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d5e:	f8d9 0000 	ldr.w	r0, [r9]
 8004d62:	f006 fa95 	bl	800b290 <xQueueSemaphoreTake>
						mbTxSize = (int16_t)ModbusTCPServer_Proc(&mbPort, mbRxBuf, mbRcvSize, mbTxBuf);
 8004d66:	4b73      	ldr	r3, [pc, #460]	; (8004f34 <EthernetTask+0x384>)
 8004d68:	fa1f f28a 	uxth.w	r2, sl
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	4872      	ldr	r0, [pc, #456]	; (8004f38 <EthernetTask+0x388>)
 8004d70:	f7ff f98e 	bl	8004090 <ModbusTCPServer_Proc>
 8004d74:	4680      	mov	r8, r0
 8004d76:	fa0f fa80 	sxth.w	sl, r0
						xSemaphoreGive(ModbusMutexHandle);
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4619      	mov	r1, r3
 8004d80:	f8d9 0000 	ldr.w	r0, [r9]
 8004d84:	f006 f88e 	bl	800aea4 <xQueueGenericSend>
						if(mbTxSize > MODBUS_SOCKET){
 8004d88:	f1ba 0f00 	cmp.w	sl, #0
 8004d8c:	dd0c      	ble.n	8004da8 <EthernetTask+0x1f8>
							RuntimeStats_ModbusSlaveRqOkInc();
 8004d8e:	f7ff fa89 	bl	80042a4 <RuntimeStats_ModbusSlaveRqOkInc>
							freesize = send(MODBUS_SOCKET, mbTxBuf, mbTxSize);
 8004d92:	fa1f f288 	uxth.w	r2, r8
 8004d96:	4967      	ldr	r1, [pc, #412]	; (8004f34 <EthernetTask+0x384>)
 8004d98:	2000      	movs	r0, #0
 8004d9a:	f7fd f9f9 	bl	8002190 <send>
 8004d9e:	4b64      	ldr	r3, [pc, #400]	; (8004f30 <EthernetTask+0x380>)
 8004da0:	8018      	strh	r0, [r3, #0]
							RuntimeStats_ModbusSlaveRespInc();
 8004da2:	f7ff fa8f 	bl	80042c4 <RuntimeStats_ModbusSlaveRespInc>
 8004da6:	e7ac      	b.n	8004d02 <EthernetTask+0x152>
							RuntimeStats_ModbusSlaveRqErrInc();
 8004da8:	f7ff fa84 	bl	80042b4 <RuntimeStats_ModbusSlaveRqErrInc>
 8004dac:	e7a9      	b.n	8004d02 <EthernetTask+0x152>
						memset(mbTxBuf, 0, MB_TX_BUF_SIZE);
 8004dae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004db2:	2100      	movs	r1, #0
 8004db4:	485f      	ldr	r0, [pc, #380]	; (8004f34 <EthernetTask+0x384>)
 8004db6:	f008 ff80 	bl	800dcba <memset>
						ClrSiS(MODBUS_SOCKET);
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f7fd fa7e 	bl	80022bc <ClrSiS>
 8004dc0:	e7a2      	b.n	8004d08 <EthernetTask+0x158>
						}
					}
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_1){
					interrupt = getSn_IR(HTTP_SOCKET);
 8004dc2:	f44f 700a 	mov.w	r0, #552	; 0x228
 8004dc6:	f7fc febb 	bl	8001b40 <WIZCHIP_READ>
 8004dca:	4605      	mov	r5, r0
					if(interrupt & Sn_IR_CON){
 8004dcc:	f010 0f01 	tst.w	r0, #1
 8004dd0:	d10e      	bne.n	8004df0 <EthernetTask+0x240>
						getsockopt(HTTP_SOCKET, SO_DESTIP, &remoteIP[1]);
						getsockopt(HTTP_SOCKET, SO_DESTPORT, (uint8_t*)&remotePort[1]);

					}

					if(interrupt & Sn_IR_RECV){
 8004dd2:	f015 0f04 	tst.w	r5, #4
 8004dd6:	f000 810b 	beq.w	8004ff0 <EthernetTask+0x440>
						RuntimeStats_TelnetRxInc();
 8004dda:	f7ff f9ed 	bl	80041b8 <RuntimeStats_TelnetRxInc>
						rcvSize += recv(HTTP_SOCKET, &rcvBuf[rcvSize], TELNET_RX_BUF_SIZE);
 8004dde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004de2:	4956      	ldr	r1, [pc, #344]	; (8004f3c <EthernetTask+0x38c>)
 8004de4:	4431      	add	r1, r6
 8004de6:	2001      	movs	r0, #1
 8004de8:	f7fd fa74 	bl	80022d4 <recv>
 8004dec:	4406      	add	r6, r0
 8004dee:	e0ff      	b.n	8004ff0 <EthernetTask+0x440>
						getsockopt(HTTP_SOCKET, SO_DESTIP, &remoteIP[1]);
 8004df0:	aa09      	add	r2, sp, #36	; 0x24
 8004df2:	2104      	movs	r1, #4
 8004df4:	2001      	movs	r0, #1
 8004df6:	f7fd fccd 	bl	8002794 <getsockopt>
						getsockopt(HTTP_SOCKET, SO_DESTPORT, (uint8_t*)&remotePort[1]);
 8004dfa:	f10d 021a 	add.w	r2, sp, #26
 8004dfe:	2105      	movs	r1, #5
 8004e00:	2001      	movs	r0, #1
 8004e02:	f7fd fcc7 	bl	8002794 <getsockopt>
 8004e06:	e7e4      	b.n	8004dd2 <EthernetTask+0x222>
					}
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_2){
					interrupt = getSn_IR(MQTT_SOCKET);
 8004e08:	f44f 7012 	mov.w	r0, #584	; 0x248
 8004e0c:	f7fc fe98 	bl	8001b40 <WIZCHIP_READ>
 8004e10:	e0f2      	b.n	8004ff8 <EthernetTask+0x448>
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_3){
					freesize = getSn_TxMAX(TELNET_SOCKET);
 8004e12:	f641 7068 	movw	r0, #8040	; 0x1f68
 8004e16:	f7fc fe93 	bl	8001b40 <WIZCHIP_READ>
 8004e1a:	b280      	uxth	r0, r0
 8004e1c:	0280      	lsls	r0, r0, #10
 8004e1e:	4b44      	ldr	r3, [pc, #272]	; (8004f30 <EthernetTask+0x380>)
 8004e20:	8018      	strh	r0, [r3, #0]
					interrupt = getSn_IR(TELNET_SOCKET);
 8004e22:	f44f 701a 	mov.w	r0, #616	; 0x268
 8004e26:	f7fc fe8b 	bl	8001b40 <WIZCHIP_READ>
 8004e2a:	4605      	mov	r5, r0
					setSn_IR(3, interrupt);
 8004e2c:	f000 011f 	and.w	r1, r0, #31
 8004e30:	f44f 701a 	mov.w	r0, #616	; 0x268
 8004e34:	f7fc feb6 	bl	8001ba4 <WIZCHIP_WRITE>
					if(interrupt & Sn_IR_CON){
 8004e38:	f015 0f01 	tst.w	r5, #1
 8004e3c:	d130      	bne.n	8004ea0 <EthernetTask+0x2f0>
						DataLog_LogEvent(EV_TELNET_CONN, NULL, 0);
						freesize = send(TELNET_SOCKET, (uint8_t*)gretMsg, 47);
						first_frame = 1;
					}

					if(interrupt & Sn_IR_RECV){
 8004e3e:	f015 0f04 	tst.w	r5, #4
 8004e42:	d007      	beq.n	8004e54 <EthernetTask+0x2a4>
						if(first_frame == 0){
 8004e44:	2f00      	cmp	r7, #0
 8004e46:	d049      	beq.n	8004edc <EthernetTask+0x32c>
								freesize = send(TELNET_SOCKET, txBuf, strlen((char*)txBuf));
								vTaskDelay(1);
							}while(xMoreDataToFollow != pdFALSE);
							rcvSize = 0;
						}else{
							recv(3, rcvBuf, 128);
 8004e48:	2280      	movs	r2, #128	; 0x80
 8004e4a:	493c      	ldr	r1, [pc, #240]	; (8004f3c <EthernetTask+0x38c>)
 8004e4c:	2003      	movs	r0, #3
 8004e4e:	f7fd fa41 	bl	80022d4 <recv>
							first_frame = 0;
 8004e52:	2700      	movs	r7, #0
						}
					}

					if(interrupt & Sn_IR_SENDOK){
 8004e54:	f015 0f10 	tst.w	r5, #16
 8004e58:	f040 80a1 	bne.w	8004f9e <EthernetTask+0x3ee>
						memset(txBuf, 0, TELNET_TX_BUF_SIZE);
						ClrSiS(TELNET_SOCKET);
					}

					if((interrupt & Sn_IR_DISCON) || (interrupt & Sn_IR_TIMEOUT)){
 8004e5c:	f015 0f0a 	tst.w	r5, #10
 8004e60:	f000 80ce 	beq.w	8005000 <EthernetTask+0x450>
						RuntimeStats_TelnetLastIPSet();
 8004e64:	f7ff f9be 	bl	80041e4 <RuntimeStats_TelnetLastIPSet>
						DataLog_LogEvent(EV_TELNET_DISCON, NULL, 0);
 8004e68:	2200      	movs	r2, #0
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	2003      	movs	r0, #3
 8004e6e:	f7fd fefb 	bl	8002c68 <DataLog_LogEvent>
						disconnect(TELNET_SOCKET);
 8004e72:	2003      	movs	r0, #3
 8004e74:	f7fd f944 	bl	8002100 <disconnect>
						if(socket(TELNET_SOCKET, Sn_MR_TCP, TELNET_PORT, SF_TCP_NODELAY) == 3){
 8004e78:	2320      	movs	r3, #32
 8004e7a:	2217      	movs	r2, #23
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	2003      	movs	r0, #3
 8004e80:	f7fd f85c 	bl	8001f3c <socket>
 8004e84:	2803      	cmp	r0, #3
 8004e86:	f040 80bb 	bne.w	8005000 <EthernetTask+0x450>
							if(listen(TELNET_SOCKET) == SOCK_OK) {
 8004e8a:	f7fd f903 	bl	8002094 <listen>
 8004e8e:	2801      	cmp	r0, #1
 8004e90:	f040 80b6 	bne.w	8005000 <EthernetTask+0x450>
								setSn_IMR(TELNET_SOCKET, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 8004e94:	211f      	movs	r1, #31
 8004e96:	f642 4068 	movw	r0, #11368	; 0x2c68
 8004e9a:	f7fc fe83 	bl	8001ba4 <WIZCHIP_WRITE>
 8004e9e:	e0af      	b.n	8005000 <EthernetTask+0x450>
						getsockopt(TELNET_SOCKET, SO_DESTIP, &remoteIP[TELNET_SOCKET]);
 8004ea0:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ea2:	2104      	movs	r1, #4
 8004ea4:	2003      	movs	r0, #3
 8004ea6:	f7fd fc75 	bl	8002794 <getsockopt>
						getsockopt(TELNET_SOCKET, SO_DESTPORT, (uint8_t*)&remotePort[TELNET_SOCKET]);
 8004eaa:	f10d 021e 	add.w	r2, sp, #30
 8004eae:	2105      	movs	r1, #5
 8004eb0:	2003      	movs	r0, #3
 8004eb2:	f7fd fc6f 	bl	8002794 <getsockopt>
						RuntimeStats_TelnetCurrIPSet(&remoteIP[TELNET_SOCKET][0]);
 8004eb6:	a80b      	add	r0, sp, #44	; 0x2c
 8004eb8:	f7ff f98e 	bl	80041d8 <RuntimeStats_TelnetCurrIPSet>
						RuntimeStats_TelnetTxInc();
 8004ebc:	f7ff f984 	bl	80041c8 <RuntimeStats_TelnetTxInc>
						DataLog_LogEvent(EV_TELNET_CONN, NULL, 0);
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	2002      	movs	r0, #2
 8004ec6:	f7fd fecf 	bl	8002c68 <DataLog_LogEvent>
						freesize = send(TELNET_SOCKET, (uint8_t*)gretMsg, 47);
 8004eca:	222f      	movs	r2, #47	; 0x2f
 8004ecc:	491c      	ldr	r1, [pc, #112]	; (8004f40 <EthernetTask+0x390>)
 8004ece:	2003      	movs	r0, #3
 8004ed0:	f7fd f95e 	bl	8002190 <send>
 8004ed4:	4b16      	ldr	r3, [pc, #88]	; (8004f30 <EthernetTask+0x380>)
 8004ed6:	8018      	strh	r0, [r3, #0]
						first_frame = 1;
 8004ed8:	2701      	movs	r7, #1
 8004eda:	e7b0      	b.n	8004e3e <EthernetTask+0x28e>
							RuntimeStats_TelnetRxInc();
 8004edc:	f7ff f96c 	bl	80041b8 <RuntimeStats_TelnetRxInc>
							rcvSize += recv(TELNET_SOCKET, &rcvBuf[rcvSize], TELNET_RX_BUF_SIZE);
 8004ee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ee4:	4915      	ldr	r1, [pc, #84]	; (8004f3c <EthernetTask+0x38c>)
 8004ee6:	4431      	add	r1, r6
 8004ee8:	2003      	movs	r0, #3
 8004eea:	f7fd f9f3 	bl	80022d4 <recv>
 8004eee:	4430      	add	r0, r6
							while(((rcvBuf[rcvSize - 1] == '\r') || (rcvBuf[rcvSize - 1] == '\n')) && (rcvSize > 0)){
 8004ef0:	e032      	b.n	8004f58 <EthernetTask+0x3a8>
 8004ef2:	bf00      	nop
 8004ef4:	08004b69 	.word	0x08004b69
 8004ef8:	08004b8d 	.word	0x08004b8d
 8004efc:	08004b21 	.word	0x08004b21
 8004f00:	08004b51 	.word	0x08004b51
 8004f04:	08004b09 	.word	0x08004b09
 8004f08:	08004b39 	.word	0x08004b39
 8004f0c:	20003cd0 	.word	0x20003cd0
 8004f10:	20002434 	.word	0x20002434
 8004f14:	0800f52c 	.word	0x0800f52c
 8004f18:	200025ac 	.word	0x200025ac
 8004f1c:	200029ac 	.word	0x200029ac
 8004f20:	0800f520 	.word	0x0800f520
 8004f24:	0800f534 	.word	0x0800f534
 8004f28:	200028ac 	.word	0x200028ac
 8004f2c:	20003cc8 	.word	0x20003cc8
 8004f30:	20003cc4 	.word	0x20003cc4
 8004f34:	200027ac 	.word	0x200027ac
 8004f38:	20003ce4 	.word	0x20003ce4
 8004f3c:	200029b0 	.word	0x200029b0
 8004f40:	0800f538 	.word	0x0800f538
 8004f44:	200026ac 	.word	0x200026ac
 8004f48:	200040c8 	.word	0x200040c8
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	dd0a      	ble.n	8004f66 <EthernetTask+0x3b6>
								rcvBuf[rcvSize - 1] = 0;
 8004f50:	4a59      	ldr	r2, [pc, #356]	; (80050b8 <EthernetTask+0x508>)
 8004f52:	2100      	movs	r1, #0
 8004f54:	54d1      	strb	r1, [r2, r3]
								rcvSize--;
 8004f56:	4618      	mov	r0, r3
							while(((rcvBuf[rcvSize - 1] == '\r') || (rcvBuf[rcvSize - 1] == '\n')) && (rcvSize > 0)){
 8004f58:	1e43      	subs	r3, r0, #1
 8004f5a:	4a57      	ldr	r2, [pc, #348]	; (80050b8 <EthernetTask+0x508>)
 8004f5c:	5cd2      	ldrb	r2, [r2, r3]
 8004f5e:	2a0d      	cmp	r2, #13
 8004f60:	d0f4      	beq.n	8004f4c <EthernetTask+0x39c>
 8004f62:	2a0a      	cmp	r2, #10
 8004f64:	d0f2      	beq.n	8004f4c <EthernetTask+0x39c>
								xMoreDataToFollow = FreeRTOS_CLIProcessCommand(&rcvBuf, &txBuf, TELNET_TX_BUF_SIZE);
 8004f66:	4e55      	ldr	r6, [pc, #340]	; (80050bc <EthernetTask+0x50c>)
 8004f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f6c:	4631      	mov	r1, r6
 8004f6e:	4852      	ldr	r0, [pc, #328]	; (80050b8 <EthernetTask+0x508>)
 8004f70:	f008 f9ca 	bl	800d308 <FreeRTOS_CLIProcessCommand>
 8004f74:	4680      	mov	r8, r0
								RuntimeStats_TelnetTxInc();
 8004f76:	f7ff f927 	bl	80041c8 <RuntimeStats_TelnetTxInc>
								freesize = send(TELNET_SOCKET, txBuf, strlen((char*)txBuf));
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	f7fb f930 	bl	80001e0 <strlen>
 8004f80:	b282      	uxth	r2, r0
 8004f82:	4631      	mov	r1, r6
 8004f84:	2003      	movs	r0, #3
 8004f86:	f7fd f903 	bl	8002190 <send>
 8004f8a:	4b4d      	ldr	r3, [pc, #308]	; (80050c0 <EthernetTask+0x510>)
 8004f8c:	8018      	strh	r0, [r3, #0]
								vTaskDelay(1);
 8004f8e:	2001      	movs	r0, #1
 8004f90:	f006 fe92 	bl	800bcb8 <vTaskDelay>
							}while(xMoreDataToFollow != pdFALSE);
 8004f94:	f1b8 0f00 	cmp.w	r8, #0
 8004f98:	d1e5      	bne.n	8004f66 <EthernetTask+0x3b6>
							rcvSize = 0;
 8004f9a:	2600      	movs	r6, #0
 8004f9c:	e75a      	b.n	8004e54 <EthernetTask+0x2a4>
						memset(txBuf, 0, TELNET_TX_BUF_SIZE);
 8004f9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	4845      	ldr	r0, [pc, #276]	; (80050bc <EthernetTask+0x50c>)
 8004fa6:	f008 fe88 	bl	800dcba <memset>
						ClrSiS(TELNET_SOCKET);
 8004faa:	2003      	movs	r0, #3
 8004fac:	f7fd f986 	bl	80022bc <ClrSiS>
 8004fb0:	e754      	b.n	8004e5c <EthernetTask+0x2ac>
					}

				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_4){
					interrupt = getSn_IR(4);
 8004fb2:	f44f 7022 	mov.w	r0, #648	; 0x288
 8004fb6:	f7fc fdc3 	bl	8001b40 <WIZCHIP_READ>
 8004fba:	e024      	b.n	8005006 <EthernetTask+0x456>
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_5){
					interrupt = getSn_IR(5);
 8004fbc:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 8004fc0:	f7fc fdbe 	bl	8001b40 <WIZCHIP_READ>
 8004fc4:	e022      	b.n	800500c <EthernetTask+0x45c>
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_6){
					interrupt = getSn_IR(6);
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_7){
 8004fc6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8004fca:	d127      	bne.n	800501c <EthernetTask+0x46c>
			while(HAL_GPIO_ReadPin(ETH_INT_GPIO_Port, ETH_INT_Pin) == 0){
 8004fcc:	2102      	movs	r1, #2
 8004fce:	483d      	ldr	r0, [pc, #244]	; (80050c4 <EthernetTask+0x514>)
 8004fd0:	f002 fd2a 	bl	8007a28 <HAL_GPIO_ReadPin>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	f47f ae74 	bne.w	8004cc2 <EthernetTask+0x112>
				interruptSource = wizchip_getinterrupt();
 8004fda:	f7fd fd62 	bl	8002aa2 <wizchip_getinterrupt>
 8004fde:	4604      	mov	r4, r0
				if(interruptSource & IK_SOCK_0){
 8004fe0:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004fe4:	f47f ae77 	bne.w	8004cd6 <EthernetTask+0x126>
				if(interruptSource & IK_SOCK_1){
 8004fe8:	f414 7f00 	tst.w	r4, #512	; 0x200
 8004fec:	f47f aee9 	bne.w	8004dc2 <EthernetTask+0x212>
				if(interruptSource & IK_SOCK_2){
 8004ff0:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8004ff4:	f47f af08 	bne.w	8004e08 <EthernetTask+0x258>
				if(interruptSource & IK_SOCK_3){
 8004ff8:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8004ffc:	f47f af09 	bne.w	8004e12 <EthernetTask+0x262>
				if(interruptSource & IK_SOCK_4){
 8005000:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8005004:	d1d5      	bne.n	8004fb2 <EthernetTask+0x402>
				if(interruptSource & IK_SOCK_5){
 8005006:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 800500a:	d1d7      	bne.n	8004fbc <EthernetTask+0x40c>
				if(interruptSource & IK_SOCK_6){
 800500c:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8005010:	d0d9      	beq.n	8004fc6 <EthernetTask+0x416>
					interrupt = getSn_IR(6);
 8005012:	f44f 7032 	mov.w	r0, #712	; 0x2c8
 8005016:	f7fc fd93 	bl	8001b40 <WIZCHIP_READ>
 800501a:	e7d4      	b.n	8004fc6 <EthernetTask+0x416>
					interrupt = getSn_IR(7);
 800501c:	f44f 703a 	mov.w	r0, #744	; 0x2e8
 8005020:	f7fc fd8e 	bl	8001b40 <WIZCHIP_READ>
					if(SNTP_run(&time)){
 8005024:	4828      	ldr	r0, [pc, #160]	; (80050c8 <EthernetTask+0x518>)
 8005026:	f7fe fe03 	bl	8003c30 <SNTP_run>
 800502a:	2800      	cmp	r0, #0
 800502c:	d0ce      	beq.n	8004fcc <EthernetTask+0x41c>
						RTC_TimeTypeDef timeh;
						RTC_DateTypeDef date;
						uint8_t yr = (uint8_t)(time.yy - 2000);
 800502e:	4d26      	ldr	r5, [pc, #152]	; (80050c8 <EthernetTask+0x518>)
 8005030:	782c      	ldrb	r4, [r5, #0]
 8005032:	3430      	adds	r4, #48	; 0x30
 8005034:	b2e4      	uxtb	r4, r4

						HAL_RTC_GetTime(&hrtc, &timeh, RTC_FORMAT_BIN);
 8005036:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80050cc <EthernetTask+0x51c>
 800503a:	2200      	movs	r2, #0
 800503c:	a901      	add	r1, sp, #4
 800503e:	4640      	mov	r0, r8
 8005040:	f004 f8bd 	bl	80091be <HAL_RTC_GetTime>
						HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8005044:	2200      	movs	r2, #0
 8005046:	4669      	mov	r1, sp
 8005048:	4640      	mov	r0, r8
 800504a:	f004 f8e3 	bl	8009214 <HAL_RTC_GetDate>
						if((timeh.Hours != time.hh) || (timeh.Minutes != time.mm) ||
 800504e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8005052:	88ab      	ldrh	r3, [r5, #4]
 8005054:	429a      	cmp	r2, r3
 8005056:	d104      	bne.n	8005062 <EthernetTask+0x4b2>
							(date.Date != time.dd) || (date.Month != time.mo) || (date.Year != yr)){
 8005058:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800505c:	78eb      	ldrb	r3, [r5, #3]
						if((timeh.Hours != time.hh) || (timeh.Minutes != time.mm) ||
 800505e:	429a      	cmp	r2, r3
 8005060:	d01f      	beq.n	80050a2 <EthernetTask+0x4f2>
							date.Date = time.dd;
 8005062:	4b19      	ldr	r3, [pc, #100]	; (80050c8 <EthernetTask+0x518>)
 8005064:	78da      	ldrb	r2, [r3, #3]
 8005066:	f88d 2002 	strb.w	r2, [sp, #2]
							date.Month = time.mo;
 800506a:	789a      	ldrb	r2, [r3, #2]
 800506c:	f88d 2001 	strb.w	r2, [sp, #1]
							date.Year = yr;
 8005070:	f88d 4003 	strb.w	r4, [sp, #3]
							timeh.Hours = time.hh;
 8005074:	791a      	ldrb	r2, [r3, #4]
 8005076:	f88d 2004 	strb.w	r2, [sp, #4]
							timeh.Minutes = time.mm;
 800507a:	795b      	ldrb	r3, [r3, #5]
 800507c:	f88d 3005 	strb.w	r3, [sp, #5]

							HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8005080:	4c12      	ldr	r4, [pc, #72]	; (80050cc <EthernetTask+0x51c>)
 8005082:	2200      	movs	r2, #0
 8005084:	4669      	mov	r1, sp
 8005086:	4620      	mov	r0, r4
 8005088:	f004 f823 	bl	80090d2 <HAL_RTC_SetDate>
							HAL_RTC_SetTime(&hrtc, &timeh, RTC_FORMAT_BIN);
 800508c:	2200      	movs	r2, #0
 800508e:	a901      	add	r1, sp, #4
 8005090:	4620      	mov	r0, r4
 8005092:	f003 ff9f 	bl	8008fd4 <HAL_RTC_SetTime>
							DataLog_LogEvent(EV_RTC_UPDATE, NULL, 0);
 8005096:	2200      	movs	r2, #0
 8005098:	4611      	mov	r1, r2
 800509a:	2001      	movs	r0, #1
 800509c:	f7fd fde4 	bl	8002c68 <DataLog_LogEvent>
 80050a0:	e794      	b.n	8004fcc <EthernetTask+0x41c>
							(date.Date != time.dd) || (date.Month != time.mo) || (date.Year != yr)){
 80050a2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80050a6:	78ab      	ldrb	r3, [r5, #2]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d1da      	bne.n	8005062 <EthernetTask+0x4b2>
 80050ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d1d6      	bne.n	8005062 <EthernetTask+0x4b2>
 80050b4:	e78a      	b.n	8004fcc <EthernetTask+0x41c>
 80050b6:	bf00      	nop
 80050b8:	200029b0 	.word	0x200029b0
 80050bc:	20002ab0 	.word	0x20002ab0
 80050c0:	20003cc4 	.word	0x20003cc4
 80050c4:	40020400 	.word	0x40020400
 80050c8:	20003cc8 	.word	0x20003cc8
 80050cc:	200040a8 	.word	0x200040a8

080050d0 <NRF_ChipSelect>:

void NRF_ChipSelect (void);

void NRF_ChipDeselect (void);

void NRF_ChipSelect (void){
 80050d0:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 80050d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050d6:	4b05      	ldr	r3, [pc, #20]	; (80050ec <NRF_ChipSelect+0x1c>)
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	f006 f8d9 	bl	800b290 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 80050de:	2200      	movs	r2, #0
 80050e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050e4:	4802      	ldr	r0, [pc, #8]	; (80050f0 <NRF_ChipSelect+0x20>)
 80050e6:	f002 fca6 	bl	8007a36 <HAL_GPIO_WritePin>
}
 80050ea:	bd08      	pop	{r3, pc}
 80050ec:	2000422c 	.word	0x2000422c
 80050f0:	40020400 	.word	0x40020400

080050f4 <NRF_ChipDeselect>:

void NRF_ChipDeselect (void){
 80050f4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_SET);
 80050f6:	2201      	movs	r2, #1
 80050f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050fc:	4805      	ldr	r0, [pc, #20]	; (8005114 <NRF_ChipDeselect+0x20>)
 80050fe:	f002 fc9a 	bl	8007a36 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8005102:	2300      	movs	r3, #0
 8005104:	461a      	mov	r2, r3
 8005106:	4619      	mov	r1, r3
 8005108:	4803      	ldr	r0, [pc, #12]	; (8005118 <NRF_ChipDeselect+0x24>)
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	f005 feca 	bl	800aea4 <xQueueGenericSend>
}
 8005110:	bd08      	pop	{r3, pc}
 8005112:	bf00      	nop
 8005114:	40020400 	.word	0x40020400
 8005118:	2000422c 	.word	0x2000422c

0800511c <RadioTask>:

void RadioTask(void* argument)
{
 800511c:	b508      	push	{r3, lr}
	const uint8_t ecoIOinitMSG[] = "IsAlive";
  /* USER CODE BEGIN RadioComm */
	nRF24_Init(&hspi1);
 800511e:	480e      	ldr	r0, [pc, #56]	; (8005158 <RadioTask+0x3c>)
 8005120:	f001 ffa6 	bl	8007070 <nRF24_Init>
	nRF24_SetRXAddress(0, "_ECOE");
 8005124:	490d      	ldr	r1, [pc, #52]	; (800515c <RadioTask+0x40>)
 8005126:	2000      	movs	r0, #0
 8005128:	f001 fdf1 	bl	8006d0e <nRF24_SetRXAddress>
	nRF24_SetRXAddress(1, "_ECOI");
 800512c:	490c      	ldr	r1, [pc, #48]	; (8005160 <RadioTask+0x44>)
 800512e:	2001      	movs	r0, #1
 8005130:	f001 fded 	bl	8006d0e <nRF24_SetRXAddress>
	nRF24_SetTXAddress("_ECOM");
 8005134:	480b      	ldr	r0, [pc, #44]	; (8005164 <RadioTask+0x48>)
 8005136:	f001 fe2d 	bl	8006d94 <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 800513a:	f001 fe09 	bl	8006d50 <nRF24_RX_Mode>
	//nRF24_SendData((uint8_t*)ecoIOinitMSG, sizeof(ecoIOinitMSG));

  /* Infinite loop */
  for(;;)
  {
	  if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 800513e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005142:	2200      	movs	r2, #0
 8005144:	4619      	mov	r1, r3
 8005146:	4618      	mov	r0, r3
 8005148:	f007 f9be 	bl	800c4c8 <xTaskNotifyWait>
 800514c:	2801      	cmp	r0, #1
 800514e:	d1f6      	bne.n	800513e <RadioTask+0x22>
		  nRF24_Event();
 8005150:	f001 ff60 	bl	8007014 <nRF24_Event>
 8005154:	e7f3      	b.n	800513e <RadioTask+0x22>
 8005156:	bf00      	nop
 8005158:	2000414c 	.word	0x2000414c
 800515c:	0800f568 	.word	0x0800f568
 8005160:	0800f570 	.word	0x0800f570
 8005164:	0800f578 	.word	0x0800f578

08005168 <fModbusParseFloat>:
#define CWU_HEATER_PHASE_POWER 		1

float fModbusParseFloat (uint8_t* in_data){
	union float_bytes buffor;

	buffor.bytes[3] = *in_data;
 8005168:	7802      	ldrb	r2, [r0, #0]
 800516a:	2300      	movs	r3, #0
 800516c:	f362 631f 	bfi	r3, r2, #24, #8
	in_data ++;
	buffor.bytes[2] = *in_data;
 8005170:	7842      	ldrb	r2, [r0, #1]
 8005172:	f362 4317 	bfi	r3, r2, #16, #8
	in_data ++;
	buffor.bytes[1] = *in_data;
 8005176:	7882      	ldrb	r2, [r0, #2]
 8005178:	f362 230f 	bfi	r3, r2, #8, #8
	in_data ++;
	buffor.bytes[0] = *in_data;
 800517c:	78c2      	ldrb	r2, [r0, #3]
 800517e:	f362 0307 	bfi	r3, r2, #0, #8

	return buffor.value;
 8005182:	ee00 3a10 	vmov	s0, r3
}
 8005186:	4770      	bx	lr

08005188 <RegulationTask>:

ModbusRTUMaster_t mbPort;

void RegulationTask(void* argument)
{
 8005188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800518a:	ed2d 8b04 	vpush	{d8-d9}
 800518e:	b0a1      	sub	sp, #132	; 0x84
	uint8_t counter_data_raw[36];
	uint8_t imported_exported_power_raw[8];
	uint8_t receieves = 0;
	uint8_t temperatures_raw[SENSOR_NUMBER * 2];

	regulationData.configStatus = Config_GetRegConfig(&regulationData.parameters);
 8005190:	4ccd      	ldr	r4, [pc, #820]	; (80054c8 <RegulationTask+0x340>)
 8005192:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 8005196:	f7fc fb6d 	bl	8001874 <Config_GetRegConfig>
 800519a:	f884 006c 	strb.w	r0, [r4, #108]	; 0x6c

	HAL_TIM_PWM_Init(&htim1);
 800519e:	4ecb      	ldr	r6, [pc, #812]	; (80054cc <RegulationTask+0x344>)
 80051a0:	4630      	mov	r0, r6
 80051a2:	f004 fdbe 	bl	8009d22 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 80051a6:	4dca      	ldr	r5, [pc, #808]	; (80054d0 <RegulationTask+0x348>)
 80051a8:	4628      	mov	r0, r5
 80051aa:	f004 fdba 	bl	8009d22 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim3);
 80051ae:	4cc9      	ldr	r4, [pc, #804]	; (80054d4 <RegulationTask+0x34c>)
 80051b0:	4620      	mov	r0, r4
 80051b2:	f004 fdb6 	bl	8009d22 <HAL_TIM_PWM_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80051b6:	2100      	movs	r1, #0
 80051b8:	4630      	mov	r0, r6
 80051ba:	f004 fe7d 	bl	8009eb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80051be:	2104      	movs	r1, #4
 80051c0:	4630      	mov	r0, r6
 80051c2:	f004 fe79 	bl	8009eb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80051c6:	2108      	movs	r1, #8
 80051c8:	4630      	mov	r0, r6
 80051ca:	f004 fe75 	bl	8009eb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80051ce:	2100      	movs	r1, #0
 80051d0:	4628      	mov	r0, r5
 80051d2:	f004 fe71 	bl	8009eb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80051d6:	2104      	movs	r1, #4
 80051d8:	4628      	mov	r0, r5
 80051da:	f004 fe6d 	bl	8009eb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80051de:	2108      	movs	r1, #8
 80051e0:	4628      	mov	r0, r5
 80051e2:	f004 fe69 	bl	8009eb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80051e6:	2100      	movs	r1, #0
 80051e8:	4620      	mov	r0, r4
 80051ea:	f004 fe65 	bl	8009eb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80051ee:	2104      	movs	r1, #4
 80051f0:	4620      	mov	r0, r4
 80051f2:	f004 fe61 	bl	8009eb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80051f6:	2108      	movs	r1, #8
 80051f8:	4620      	mov	r0, r4
 80051fa:	f004 fe5d 	bl	8009eb8 <HAL_TIM_PWM_Start>

	TIM1 -> CCR1 = 500;
 80051fe:	4ab6      	ldr	r2, [pc, #728]	; (80054d8 <RegulationTask+0x350>)
 8005200:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005204:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1 -> CCR2 = 500;
 8005206:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1 -> CCR3 = 500;
 8005208:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM2 -> CCR1 = 500;
 800520a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800520e:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2 -> CCR2 = 500;
 8005210:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2 -> CCR3 = 500;
 8005212:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM3 -> CCR1 = 500;
 8005214:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005218:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3 -> CCR2 = 500;
 800521a:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3 -> CCR3 = 500;
 800521c:	63d3      	str	r3, [r2, #60]	; 0x3c

	//Uchwyty i inne struktury
	mbPort.task =  xTaskGetCurrentTaskHandle();
 800521e:	f006 ffc3 	bl	800c1a8 <xTaskGetCurrentTaskHandle>
 8005222:	4dae      	ldr	r5, [pc, #696]	; (80054dc <RegulationTask+0x354>)
 8005224:	f8c5 011c 	str.w	r0, [r5, #284]	; 0x11c

	mcp23017_init(&expander1, &hi2c1, 0b0100111);
 8005228:	4cad      	ldr	r4, [pc, #692]	; (80054e0 <RegulationTask+0x358>)
 800522a:	2227      	movs	r2, #39	; 0x27
 800522c:	49ad      	ldr	r1, [pc, #692]	; (80054e4 <RegulationTask+0x35c>)
 800522e:	4620      	mov	r0, r4
 8005230:	f7fd fcb2 	bl	8002b98 <mcp23017_init>
	mcp23017_iodir(&expander1, 1, 0xFF);
 8005234:	22ff      	movs	r2, #255	; 0xff
 8005236:	2101      	movs	r1, #1
 8005238:	4620      	mov	r0, r4
 800523a:	f7fd fccf 	bl	8002bdc <mcp23017_iodir>
	mcp23017_iodir(&expander1, 0, 0x03);
 800523e:	2203      	movs	r2, #3
 8005240:	2100      	movs	r1, #0
 8005242:	4620      	mov	r0, r4
 8005244:	f7fd fcca 	bl	8002bdc <mcp23017_iodir>
	expander1.gpio[0] = 0b11111100;
 8005248:	23fc      	movs	r3, #252	; 0xfc
 800524a:	71a3      	strb	r3, [r4, #6]
	mcp23017_write_gpio(&expander1, 0);
 800524c:	2100      	movs	r1, #0
 800524e:	4620      	mov	r0, r4
 8005250:	f7fd fce1 	bl	8002c16 <mcp23017_write_gpio>

	vTaskDelay(1000);
 8005254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005258:	f006 fd2e 	bl	800bcb8 <vTaskDelay>

	expander1.gpio[0] = 0;
 800525c:	2100      	movs	r1, #0
 800525e:	71a1      	strb	r1, [r4, #6]
	mcp23017_write_gpio(&expander1, 0);
 8005260:	4620      	mov	r0, r4
 8005262:	f7fd fcd8 	bl	8002c16 <mcp23017_write_gpio>
	ModbusRTUMaster_Init(&mbPort, &huart2, 100);
 8005266:	2264      	movs	r2, #100	; 0x64
 8005268:	499f      	ldr	r1, [pc, #636]	; (80054e8 <RegulationTask+0x360>)
 800526a:	4628      	mov	r0, r5
 800526c:	f7fe fd7c 	bl	8003d68 <ModbusRTUMaster_Init>

	xLastWakeTime = xTaskGetTickCount();
 8005270:	f006 fbc4 	bl	800b9fc <xTaskGetTickCount>
 8005274:	901f      	str	r0, [sp, #124]	; 0x7c
	float exported_power = 0;
 8005276:	ed9f 8a9d 	vldr	s16, [pc, #628]	; 80054ec <RegulationTask+0x364>
	float imported_power = 0;
 800527a:	eef0 8a48 	vmov.f32	s17, s16
 800527e:	e0a5      	b.n	80053cc <RegulationTask+0x244>
		receieves = 0;

		if(regulationData.IOsignals.signals.input2 != regulationData.IOsignals.signals.output2){
			regulationData.ControlWord.CWUHeaterError = HIGH;
		}else{
			regulationData.ControlWord.CWUHeaterError = LOW;
 8005280:	4b91      	ldr	r3, [pc, #580]	; (80054c8 <RegulationTask+0x340>)
 8005282:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8005286:	f36f 0200 	bfc	r2, #0, #1
 800528a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800528e:	e0ba      	b.n	8005406 <RegulationTask+0x27e>
		}

		if(regulationData.IOsignals.signals.input3 != regulationData.IOsignals.signals.output3){
			regulationData.ControlWord.COHeaterError = HIGH;
		}else{
			regulationData.ControlWord.COHeaterError = LOW;
 8005290:	4b8d      	ldr	r3, [pc, #564]	; (80054c8 <RegulationTask+0x340>)
 8005292:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8005296:	f36f 0200 	bfc	r2, #0, #1
 800529a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800529e:	e0c5      	b.n	800542c <RegulationTask+0x2a4>
		}
		xSemaphoreTake(ModbusMutexHandle, portMAX_DELAY);
		if(ModbusRTUMaster_ReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw, NULL) == Modbus_OK){
			receieves += 1;
			for(uint8_t i = 0; i < 3; i++){
				regulationData.counter.voltages[i] = fModbusParseFloat(counter_data_raw + i * 4);
 80052a0:	00a6      	lsls	r6, r4, #2
 80052a2:	ab09      	add	r3, sp, #36	; 0x24
 80052a4:	1998      	adds	r0, r3, r6
 80052a6:	f7ff ff5f 	bl	8005168 <fModbusParseFloat>
 80052aa:	4d87      	ldr	r5, [pc, #540]	; (80054c8 <RegulationTask+0x340>)
 80052ac:	f104 030a 	add.w	r3, r4, #10
 80052b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80052b4:	ed83 0a00 	vstr	s0, [r3]
				regulationData.counter.currents[i] = fModbusParseFloat(counter_data_raw + 12 + i * 4);
 80052b8:	f106 000c 	add.w	r0, r6, #12
 80052bc:	ab09      	add	r3, sp, #36	; 0x24
 80052be:	4418      	add	r0, r3
 80052c0:	f7ff ff52 	bl	8005168 <fModbusParseFloat>
 80052c4:	f104 030c 	add.w	r3, r4, #12
 80052c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80052cc:	ed83 0a01 	vstr	s0, [r3, #4]
				regulationData.counter.powers[i] = fModbusParseFloat(counter_data_raw + 24 + 4 * i);
 80052d0:	f106 0018 	add.w	r0, r6, #24
 80052d4:	ab09      	add	r3, sp, #36	; 0x24
 80052d6:	4418      	add	r0, r3
 80052d8:	f7ff ff46 	bl	8005168 <fModbusParseFloat>
 80052dc:	f104 0310 	add.w	r3, r4, #16
 80052e0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80052e4:	ed85 0a00 	vstr	s0, [r5]
			for(uint8_t i = 0; i < 3; i++){
 80052e8:	3401      	adds	r4, #1
 80052ea:	b2e4      	uxtb	r4, r4
 80052ec:	2c02      	cmp	r4, #2
 80052ee:	d9d7      	bls.n	80052a0 <RegulationTask+0x118>
			receieves += 1;
 80052f0:	2501      	movs	r5, #1
 80052f2:	e0ae      	b.n	8005452 <RegulationTask+0x2ca>
			for(uint8_t i = 0; i < 3; i++){
 80052f4:	2400      	movs	r4, #0
 80052f6:	e7f9      	b.n	80052ec <RegulationTask+0x164>
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);

			if(regulationData.counter.power_in_buffor > 0){
				regulationData.counter.power_in_buffor -= (imported_power - last_imported_power);
			}else{
				regulationData.counter.power_in_buffor = 0;
 80052f8:	4b73      	ldr	r3, [pc, #460]	; (80054c8 <RegulationTask+0x340>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	64da      	str	r2, [r3, #76]	; 0x4c
			}
			regulationData.counter.power_in_buffor += (exported_power - last_exported_power) * ACUMULATED_POWER_FACTOR;
 80052fe:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005302:	eddf 7a7a 	vldr	s15, [pc, #488]	; 80054ec <RegulationTask+0x364>
 8005306:	ee68 7a27 	vmul.f32	s15, s16, s15
 800530a:	4b6f      	ldr	r3, [pc, #444]	; (80054c8 <RegulationTask+0x340>)
 800530c:	ed93 8a13 	vldr	s16, [r3, #76]	; 0x4c
 8005310:	ee38 8a27 	vadd.f32	s16, s16, s15
 8005314:	ed83 8a13 	vstr	s16, [r3, #76]	; 0x4c
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 8005318:	eeb0 8a40 	vmov.f32	s16, s0
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 800531c:	eef0 8a49 	vmov.f32	s17, s18
		}
		xSemaphoreGive(ModbusMutexHandle);
 8005320:	4c73      	ldr	r4, [pc, #460]	; (80054f0 <RegulationTask+0x368>)
 8005322:	2300      	movs	r3, #0
 8005324:	461a      	mov	r2, r3
 8005326:	4619      	mov	r1, r3
 8005328:	6820      	ldr	r0, [r4, #0]
 800532a:	f005 fdbb 	bl	800aea4 <xQueueGenericSend>
		vTaskDelay(1);
 800532e:	2001      	movs	r0, #1
 8005330:	f006 fcc2 	bl	800bcb8 <vTaskDelay>
		xSemaphoreTake(ModbusMutexHandle, portMAX_DELAY);
 8005334:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005338:	6820      	ldr	r0, [r4, #0]
 800533a:	f005 ffa9 	bl	800b290 <xQueueSemaphoreTake>
		if(ModbusRTUMaster_ReadInputRegisters(&mbPort, TEMPERATURE_ADDRESS, 0, SENSOR_NUMBER, temperatures_raw, NULL) == Modbus_OK){
 800533e:	2200      	movs	r2, #0
 8005340:	9201      	str	r2, [sp, #4]
 8005342:	ab02      	add	r3, sp, #8
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	230a      	movs	r3, #10
 8005348:	2102      	movs	r1, #2
 800534a:	4864      	ldr	r0, [pc, #400]	; (80054dc <RegulationTask+0x354>)
 800534c:	f7fe fd52 	bl	8003df4 <ModbusRTUMaster_ReadInputRegisters>
 8005350:	2800      	cmp	r0, #0
 8005352:	f000 80b4 	beq.w	80054be <RegulationTask+0x336>
				temp += temperatures_raw[i*2 + 1];
				temperatures[i] = temp / DEC_PLACES;
			}
			memcpy(&regulationData.counter.CWU_temps[0], &temperatures[0], 24);
		}
		xSemaphoreGive(ModbusMutexHandle);
 8005356:	2300      	movs	r3, #0
 8005358:	461a      	mov	r2, r3
 800535a:	4619      	mov	r1, r3
 800535c:	4864      	ldr	r0, [pc, #400]	; (80054f0 <RegulationTask+0x368>)
 800535e:	6800      	ldr	r0, [r0, #0]
 8005360:	f005 fda0 	bl	800aea4 <xQueueGenericSend>
		vTaskDelay(1);
 8005364:	2001      	movs	r0, #1
 8005366:	f006 fca7 	bl	800bcb8 <vTaskDelay>
		regulationData.counter.counter_present = 1;
 800536a:	4b57      	ldr	r3, [pc, #348]	; (80054c8 <RegulationTask+0x340>)
 800536c:	2201      	movs	r2, #1
 800536e:	701a      	strb	r2, [r3, #0]
		regulationData.counter.temperatures_present = 1;
 8005370:	709a      	strb	r2, [r3, #2]
		if(receieves == 7){
 8005372:	2d07      	cmp	r5, #7
 8005374:	f000 81ba 	beq.w	80056ec <RegulationTask+0x564>

		}else{

		}

		if((regulationData.ControlWord.COHeaterStateOut == 0) && (regulationData.ControlWord.CWUHeaterStateOut == 0)){
 8005378:	4b53      	ldr	r3, [pc, #332]	; (80054c8 <RegulationTask+0x340>)
 800537a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800537e:	f013 0f01 	tst.w	r3, #1
 8005382:	f040 8288 	bne.w	8005896 <RegulationTask+0x70e>
			regulationData.IOsignals.signals.output1 = 1;
 8005386:	4a50      	ldr	r2, [pc, #320]	; (80054c8 <RegulationTask+0x340>)
 8005388:	f892 306a 	ldrb.w	r3, [r2, #106]	; 0x6a
 800538c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005390:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
		}else{
			regulationData.IOsignals.signals.output1 = 0;
		}

		TIM3 -> CCR1 = regulationData.counter.CWU_heater_PWM[0];
 8005394:	4b4c      	ldr	r3, [pc, #304]	; (80054c8 <RegulationTask+0x340>)
 8005396:	8899      	ldrh	r1, [r3, #4]
 8005398:	4a56      	ldr	r2, [pc, #344]	; (80054f4 <RegulationTask+0x36c>)
 800539a:	6351      	str	r1, [r2, #52]	; 0x34
		TIM3 -> CCR2 = regulationData.counter.CWU_heater_PWM[1];
 800539c:	88d9      	ldrh	r1, [r3, #6]
 800539e:	6391      	str	r1, [r2, #56]	; 0x38
		TIM3 -> CCR3 = regulationData.counter.CWU_heater_PWM[2];
 80053a0:	8919      	ldrh	r1, [r3, #8]
 80053a2:	63d1      	str	r1, [r2, #60]	; 0x3c

		TIM1 -> CCR1 = regulationData.counter.CO_heater_PWM[0];
 80053a4:	8959      	ldrh	r1, [r3, #10]
 80053a6:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 80053aa:	6351      	str	r1, [r2, #52]	; 0x34
		TIM1 -> CCR2 = regulationData.counter.CO_heater_PWM[1];
 80053ac:	8999      	ldrh	r1, [r3, #12]
 80053ae:	6391      	str	r1, [r2, #56]	; 0x38
		TIM1 -> CCR3 = regulationData.counter.CO_heater_PWM[2];
 80053b0:	89d9      	ldrh	r1, [r3, #14]
 80053b2:	63d1      	str	r1, [r2, #60]	; 0x3c

		expander1.gpio[MCP23017_PORTA] = regulationData.IOsignals.ports.portA;
 80053b4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80053b8:	4849      	ldr	r0, [pc, #292]	; (80054e0 <RegulationTask+0x358>)
 80053ba:	7183      	strb	r3, [r0, #6]
		mcp23017_write_gpio(&expander1, 0);
 80053bc:	2100      	movs	r1, #0
 80053be:	f7fd fc2a 	bl	8002c16 <mcp23017_write_gpio>
		vTaskDelayUntil(&xLastWakeTime, xDelay);
 80053c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80053c6:	a81f      	add	r0, sp, #124	; 0x7c
 80053c8:	f006 fc24 	bl	800bc14 <vTaskDelayUntil>
		mcp23017_read_gpio(&expander1, 0);
 80053cc:	4c44      	ldr	r4, [pc, #272]	; (80054e0 <RegulationTask+0x358>)
 80053ce:	2100      	movs	r1, #0
 80053d0:	4620      	mov	r0, r4
 80053d2:	f7fd fc0e 	bl	8002bf2 <mcp23017_read_gpio>
		mcp23017_read_gpio(&expander1, 1);
 80053d6:	2101      	movs	r1, #1
 80053d8:	4620      	mov	r0, r4
 80053da:	f7fd fc0a 	bl	8002bf2 <mcp23017_read_gpio>
		regulationData.IOsignals.bytes[0] = expander1.gpio[0];
 80053de:	79a3      	ldrb	r3, [r4, #6]
 80053e0:	4939      	ldr	r1, [pc, #228]	; (80054c8 <RegulationTask+0x340>)
 80053e2:	f881 306a 	strb.w	r3, [r1, #106]	; 0x6a
		regulationData.IOsignals.bytes[1] = expander1.gpio[1];
 80053e6:	79e2      	ldrb	r2, [r4, #7]
 80053e8:	f881 206b 	strb.w	r2, [r1, #107]	; 0x6b
		if(regulationData.IOsignals.signals.input2 != regulationData.IOsignals.signals.output2){
 80053ec:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80053f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80053f4:	429a      	cmp	r2, r3
 80053f6:	f43f af43 	beq.w	8005280 <RegulationTask+0xf8>
			regulationData.ControlWord.CWUHeaterError = HIGH;
 80053fa:	f891 3068 	ldrb.w	r3, [r1, #104]	; 0x68
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	f881 3068 	strb.w	r3, [r1, #104]	; 0x68
		if(regulationData.IOsignals.signals.input3 != regulationData.IOsignals.signals.output3){
 8005406:	4b30      	ldr	r3, [pc, #192]	; (80054c8 <RegulationTask+0x340>)
 8005408:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 800540c:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8005410:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8005414:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005418:	429a      	cmp	r2, r3
 800541a:	f43f af39 	beq.w	8005290 <RegulationTask+0x108>
			regulationData.ControlWord.COHeaterError = HIGH;
 800541e:	4a2a      	ldr	r2, [pc, #168]	; (80054c8 <RegulationTask+0x340>)
 8005420:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
		xSemaphoreTake(ModbusMutexHandle, portMAX_DELAY);
 800542c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005430:	4b2f      	ldr	r3, [pc, #188]	; (80054f0 <RegulationTask+0x368>)
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	f005 ff2c 	bl	800b290 <xQueueSemaphoreTake>
		if(ModbusRTUMaster_ReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw, NULL) == Modbus_OK){
 8005438:	2200      	movs	r2, #0
 800543a:	9201      	str	r2, [sp, #4]
 800543c:	ab09      	add	r3, sp, #36	; 0x24
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	2312      	movs	r3, #18
 8005442:	2101      	movs	r1, #1
 8005444:	4825      	ldr	r0, [pc, #148]	; (80054dc <RegulationTask+0x354>)
 8005446:	f7fe fcd5 	bl	8003df4 <ModbusRTUMaster_ReadInputRegisters>
 800544a:	2800      	cmp	r0, #0
 800544c:	f43f af52 	beq.w	80052f4 <RegulationTask+0x16c>
		receieves = 0;
 8005450:	2500      	movs	r5, #0
		xSemaphoreGive(ModbusMutexHandle);
 8005452:	4c27      	ldr	r4, [pc, #156]	; (80054f0 <RegulationTask+0x368>)
 8005454:	2300      	movs	r3, #0
 8005456:	461a      	mov	r2, r3
 8005458:	4619      	mov	r1, r3
 800545a:	6820      	ldr	r0, [r4, #0]
 800545c:	f005 fd22 	bl	800aea4 <xQueueGenericSend>
		vTaskDelay(1);
 8005460:	2001      	movs	r0, #1
 8005462:	f006 fc29 	bl	800bcb8 <vTaskDelay>
		xSemaphoreTake(ModbusMutexHandle, portMAX_DELAY);
 8005466:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800546a:	6820      	ldr	r0, [r4, #0]
 800546c:	f005 ff10 	bl	800b290 <xQueueSemaphoreTake>
		if(ModbusRTUMaster_ReadInputRegisters(&mbPort, COUNTER_ADDRESS, IMPORTED_ACTIVE_POWER, 4, imported_exported_power_raw, NULL) == Modbus_OK){
 8005470:	2300      	movs	r3, #0
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	ab07      	add	r3, sp, #28
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	2304      	movs	r3, #4
 800547a:	2248      	movs	r2, #72	; 0x48
 800547c:	2101      	movs	r1, #1
 800547e:	4817      	ldr	r0, [pc, #92]	; (80054dc <RegulationTask+0x354>)
 8005480:	f7fe fcb8 	bl	8003df4 <ModbusRTUMaster_ReadInputRegisters>
 8005484:	2800      	cmp	r0, #0
 8005486:	f47f af4b 	bne.w	8005320 <RegulationTask+0x198>
			receieves += 2;
 800548a:	3502      	adds	r5, #2
 800548c:	b2ed      	uxtb	r5, r5
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 800548e:	a807      	add	r0, sp, #28
 8005490:	f7ff fe6a 	bl	8005168 <fModbusParseFloat>
 8005494:	eeb0 9a40 	vmov.f32	s18, s0
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 8005498:	a808      	add	r0, sp, #32
 800549a:	f7ff fe65 	bl	8005168 <fModbusParseFloat>
			if(regulationData.counter.power_in_buffor > 0){
 800549e:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <RegulationTask+0x340>)
 80054a0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80054a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ac:	f77f af24 	ble.w	80052f8 <RegulationTask+0x170>
				regulationData.counter.power_in_buffor -= (imported_power - last_imported_power);
 80054b0:	ee79 8a68 	vsub.f32	s17, s18, s17
 80054b4:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80054b8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 80054bc:	e71f      	b.n	80052fe <RegulationTask+0x176>
			receieves += 4;
 80054be:	3504      	adds	r5, #4
 80054c0:	b2ed      	uxtb	r5, r5
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 80054c2:	2400      	movs	r4, #0
 80054c4:	e034      	b.n	8005530 <RegulationTask+0x3a8>
 80054c6:	bf00      	nop
 80054c8:	20002bb0 	.word	0x20002bb0
 80054cc:	200040cc 	.word	0x200040cc
 80054d0:	200041a4 	.word	0x200041a4
 80054d4:	20003f3c 	.word	0x20003f3c
 80054d8:	40010000 	.word	0x40010000
 80054dc:	20003ce4 	.word	0x20003ce4
 80054e0:	20003e04 	.word	0x20003e04
 80054e4:	20003ee0 	.word	0x20003ee0
 80054e8:	200041e4 	.word	0x200041e4
 80054ec:	00000000 	.word	0x00000000
 80054f0:	200040c8 	.word	0x200040c8
 80054f4:	40000400 	.word	0x40000400
				int16_t temp = temperatures_raw[i * 2];
 80054f8:	0063      	lsls	r3, r4, #1
 80054fa:	aa20      	add	r2, sp, #128	; 0x80
 80054fc:	441a      	add	r2, r3
 80054fe:	f812 2c78 	ldrb.w	r2, [r2, #-120]
				temp += temperatures_raw[i*2 + 1];
 8005502:	3301      	adds	r3, #1
 8005504:	a920      	add	r1, sp, #128	; 0x80
 8005506:	440b      	add	r3, r1
 8005508:	f813 0c78 	ldrb.w	r0, [r3, #-120]
 800550c:	eb00 2002 	add.w	r0, r0, r2, lsl #8
				temperatures[i] = temp / DEC_PLACES;
 8005510:	b200      	sxth	r0, r0
 8005512:	f7fb f80f 	bl	8000534 <__aeabi_i2d>
 8005516:	2200      	movs	r2, #0
 8005518:	4bd2      	ldr	r3, [pc, #840]	; (8005864 <RegulationTask+0x6dc>)
 800551a:	f7fb f99f 	bl	800085c <__aeabi_ddiv>
 800551e:	f7fb faa5 	bl	8000a6c <__aeabi_d2f>
 8005522:	ab20      	add	r3, sp, #128	; 0x80
 8005524:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005528:	f843 0c2c 	str.w	r0, [r3, #-44]
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 800552c:	3401      	adds	r4, #1
 800552e:	b2e4      	uxtb	r4, r4
 8005530:	2c09      	cmp	r4, #9
 8005532:	d9e1      	bls.n	80054f8 <RegulationTask+0x370>
			memcpy(&regulationData.counter.CWU_temps[0], &temperatures[0], 24);
 8005534:	4ccc      	ldr	r4, [pc, #816]	; (8005868 <RegulationTask+0x6e0>)
 8005536:	ae15      	add	r6, sp, #84	; 0x54
 8005538:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800553a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800553c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8005540:	e884 0003 	stmia.w	r4, {r0, r1}
 8005544:	e707      	b.n	8005356 <RegulationTask+0x1ce>
					available_power[i]  = -regulationData.counter.powers[i] * regulationData.parameters.heater_power_coeff / 100.0f;
 8005546:	4bc9      	ldr	r3, [pc, #804]	; (800586c <RegulationTask+0x6e4>)
 8005548:	f993 307c 	ldrsb.w	r3, [r3, #124]	; 0x7c
 800554c:	ee07 3a10 	vmov	s14, r3
 8005550:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005554:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8005558:	eddf 6ac5 	vldr	s13, [pc, #788]	; 8005870 <RegulationTask+0x6e8>
 800555c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005560:	ab20      	add	r3, sp, #128	; 0x80
 8005562:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005566:	ed03 7a0e 	vstr	s14, [r3, #-56]	; 0xffffffc8
 800556a:	e064      	b.n	8005636 <RegulationTask+0x4ae>
					regulationData.counter.CO_heater_max_power[i] = 0.0f;
 800556c:	1d2b      	adds	r3, r5, #4
 800556e:	4abf      	ldr	r2, [pc, #764]	; (800586c <RegulationTask+0x6e4>)
 8005570:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	e084      	b.n	8005684 <RegulationTask+0x4fc>
					regulationData.counter.CWU_heater_max_power[i] = 0.0f;
 800557a:	1dab      	adds	r3, r5, #6
 800557c:	4abb      	ldr	r2, [pc, #748]	; (800586c <RegulationTask+0x6e4>)
 800557e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005582:	2200      	movs	r2, #0
 8005584:	605a      	str	r2, [r3, #4]
				if(regulationData.counter.voltages[i] > 200.0){
 8005586:	f105 030a 	add.w	r3, r5, #10
 800558a:	4ab8      	ldr	r2, [pc, #736]	; (800586c <RegulationTask+0x6e4>)
 800558c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005590:	ed93 7a00 	vldr	s14, [r3]
 8005594:	eddf 7ab7 	vldr	s15, [pc, #732]	; 8005874 <RegulationTask+0x6ec>
 8005598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800559c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a0:	f340 809a 	ble.w	80056d8 <RegulationTask+0x550>
					regulationData.counter.CO_heater_PWM[i] = (uint32_t)(regulationData.counter.CO_heater_max_power[i] * 1000.0);
 80055a4:	4616      	mov	r6, r2
 80055a6:	1d2f      	adds	r7, r5, #4
 80055a8:	eb02 0387 	add.w	r3, r2, r7, lsl #2
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	f7fa ffd3 	bl	8000558 <__aeabi_f2d>
 80055b2:	2200      	movs	r2, #0
 80055b4:	4bb0      	ldr	r3, [pc, #704]	; (8005878 <RegulationTask+0x6f0>)
 80055b6:	f7fb f827 	bl	8000608 <__aeabi_dmul>
 80055ba:	f7fb fa37 	bl	8000a2c <__aeabi_d2uiz>
 80055be:	eb06 0747 	add.w	r7, r6, r7, lsl #1
 80055c2:	8078      	strh	r0, [r7, #2]
					regulationData.counter.CWU_heater_PWM[i] = (uint32_t)(regulationData.counter.CWU_heater_max_power[i] * 1000.0);
 80055c4:	1dab      	adds	r3, r5, #6
 80055c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80055ca:	6858      	ldr	r0, [r3, #4]
 80055cc:	f7fa ffc4 	bl	8000558 <__aeabi_f2d>
 80055d0:	2200      	movs	r2, #0
 80055d2:	4ba9      	ldr	r3, [pc, #676]	; (8005878 <RegulationTask+0x6f0>)
 80055d4:	f7fb f818 	bl	8000608 <__aeabi_dmul>
 80055d8:	f7fb fa28 	bl	8000a2c <__aeabi_d2uiz>
 80055dc:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 80055e0:	80a8      	strh	r0, [r5, #4]
			for(uint8_t i = 0; i < 3; i ++){
 80055e2:	3401      	adds	r4, #1
 80055e4:	b2e4      	uxtb	r4, r4
 80055e6:	2c02      	cmp	r4, #2
 80055e8:	f200 8082 	bhi.w	80056f0 <RegulationTask+0x568>
				if(regulationData.counter.powers[i] > 0){
 80055ec:	4625      	mov	r5, r4
 80055ee:	f104 0310 	add.w	r3, r4, #16
 80055f2:	4a9e      	ldr	r2, [pc, #632]	; (800586c <RegulationTask+0x6e4>)
 80055f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80055f8:	edd3 7a00 	vldr	s15, [r3]
 80055fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005604:	dd9f      	ble.n	8005546 <RegulationTask+0x3be>
					available_power[i] = ((regulationData.parameters.net_max_power / 3.0f) - regulationData.counter.powers[i]) * regulationData.parameters.heater_power_coeff;
 8005606:	4613      	mov	r3, r2
 8005608:	f8d2 2075 	ldr.w	r2, [r2, #117]	; 0x75
 800560c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8005610:	ee07 2a10 	vmov	s14, r2
 8005614:	ee87 7a26 	vdiv.f32	s14, s14, s13
 8005618:	ee37 7a67 	vsub.f32	s14, s14, s15
 800561c:	f993 307c 	ldrsb.w	r3, [r3, #124]	; 0x7c
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800562c:	ab20      	add	r3, sp, #128	; 0x80
 800562e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005632:	ed43 7a0e 	vstr	s15, [r3, #-56]	; 0xffffffc8
				if(regulationData.parameters.CO_heater_power > 0.0f){
 8005636:	4b8d      	ldr	r3, [pc, #564]	; (800586c <RegulationTask+0x6e4>)
 8005638:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005648:	dd90      	ble.n	800556c <RegulationTask+0x3e4>
					regulationData.counter.CO_heater_max_power[i] = available_power[i] / regulationData.parameters.CO_heater_power / 3.0f;
 800564a:	ab20      	add	r3, sp, #128	; 0x80
 800564c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8005650:	ed13 7a0e 	vldr	s14, [r3, #-56]	; 0xffffffc8
 8005654:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005658:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800565c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005660:	1d2b      	adds	r3, r5, #4
 8005662:	4a82      	ldr	r2, [pc, #520]	; (800586c <RegulationTask+0x6e4>)
 8005664:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005668:	edc3 7a00 	vstr	s15, [r3]
					if(regulationData.counter.CO_heater_max_power[i] > 1.0f) regulationData.counter.CO_heater_max_power[i] = 1.0f;
 800566c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005678:	dd04      	ble.n	8005684 <RegulationTask+0x4fc>
 800567a:	1d2b      	adds	r3, r5, #4
 800567c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005680:	ed83 7a00 	vstr	s14, [r3]
				if(regulationData.parameters.CWU_heater_power > 0.0f){
 8005684:	4b79      	ldr	r3, [pc, #484]	; (800586c <RegulationTask+0x6e4>)
 8005686:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005696:	f77f af70 	ble.w	800557a <RegulationTask+0x3f2>
					regulationData.counter.CWU_heater_max_power[i] = available_power[i] / regulationData.parameters.CWU_heater_power / 3.0f;
 800569a:	ab20      	add	r3, sp, #128	; 0x80
 800569c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80056a0:	ed13 7a0e 	vldr	s14, [r3, #-56]	; 0xffffffc8
 80056a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80056a8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80056ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056b0:	1dab      	adds	r3, r5, #6
 80056b2:	4a6e      	ldr	r2, [pc, #440]	; (800586c <RegulationTask+0x6e4>)
 80056b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056b8:	edc3 7a01 	vstr	s15, [r3, #4]
					if(regulationData.counter.CWU_heater_max_power[i] > 1.0f) regulationData.counter.CWU_heater_max_power[i] = 1.0f;
 80056bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c8:	f77f af5d 	ble.w	8005586 <RegulationTask+0x3fe>
 80056cc:	1dab      	adds	r3, r5, #6
 80056ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056d2:	ed83 7a01 	vstr	s14, [r3, #4]
 80056d6:	e756      	b.n	8005586 <RegulationTask+0x3fe>
					regulationData.counter.CO_heater_PWM[i] = 0;
 80056d8:	4b64      	ldr	r3, [pc, #400]	; (800586c <RegulationTask+0x6e4>)
 80056da:	1d2a      	adds	r2, r5, #4
 80056dc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80056e0:	2100      	movs	r1, #0
 80056e2:	8051      	strh	r1, [r2, #2]
					regulationData.counter.CWU_heater_PWM[i] = 0;
 80056e4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80056e8:	80a9      	strh	r1, [r5, #4]
 80056ea:	e77a      	b.n	80055e2 <RegulationTask+0x45a>
			for(uint8_t i = 0; i < 3; i ++){
 80056ec:	2400      	movs	r4, #0
 80056ee:	e77a      	b.n	80055e6 <RegulationTask+0x45e>
			if(regulationData.counter.CWU_temps[0] < regulationData.parameters.CWU_hi_temp){
 80056f0:	4b5e      	ldr	r3, [pc, #376]	; (800586c <RegulationTask+0x6e4>)
 80056f2:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80056f6:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570a:	d515      	bpl.n	8005738 <RegulationTask+0x5b0>
				if(regulationData.counter.CWU_temps[1] < regulationData.parameters.CWU_lo_temp){
 800570c:	4b57      	ldr	r3, [pc, #348]	; (800586c <RegulationTask+0x6e4>)
 800570e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8005712:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800571e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005726:	d50e      	bpl.n	8005746 <RegulationTask+0x5be>
					regulationData.ControlWord.CWUHeaterStateOut = HIGH;
 8005728:	4a50      	ldr	r2, [pc, #320]	; (800586c <RegulationTask+0x6e4>)
 800572a:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8005736:	e006      	b.n	8005746 <RegulationTask+0x5be>
				regulationData.ControlWord.CWUHeaterStateOut = LOW;
 8005738:	4b4c      	ldr	r3, [pc, #304]	; (800586c <RegulationTask+0x6e4>)
 800573a:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800573e:	f36f 0200 	bfc	r2, #0, #1
 8005742:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.counter.CO_temps[0] < regulationData.parameters.CO_hi_temp){
 8005746:	4b49      	ldr	r3, [pc, #292]	; (800586c <RegulationTask+0x6e4>)
 8005748:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800574c:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8005750:	ee07 3a90 	vmov	s15, r3
 8005754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800575c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005760:	d515      	bpl.n	800578e <RegulationTask+0x606>
				if(regulationData.counter.CO_temps[3] < regulationData.parameters.CO_lo_temp){
 8005762:	4b42      	ldr	r3, [pc, #264]	; (800586c <RegulationTask+0x6e4>)
 8005764:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8005768:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005774:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577c:	d50e      	bpl.n	800579c <RegulationTask+0x614>
					regulationData.ControlWord.COHeaterStateOut = HIGH;
 800577e:	4a3b      	ldr	r2, [pc, #236]	; (800586c <RegulationTask+0x6e4>)
 8005780:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8005784:	f043 0301 	orr.w	r3, r3, #1
 8005788:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 800578c:	e006      	b.n	800579c <RegulationTask+0x614>
				regulationData.ControlWord.COHeaterStateOut = LOW;
 800578e:	4b37      	ldr	r3, [pc, #220]	; (800586c <RegulationTask+0x6e4>)
 8005790:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8005794:	f36f 0200 	bfc	r2, #0, #1
 8005798:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.ControlWord.COHeaterStateOut){
 800579c:	4b33      	ldr	r3, [pc, #204]	; (800586c <RegulationTask+0x6e4>)
 800579e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80057a2:	f013 0f01 	tst.w	r3, #1
 80057a6:	d006      	beq.n	80057b6 <RegulationTask+0x62e>
				regulationData.ControlWord.CWUHeaterStateOut = LOW;
 80057a8:	4b30      	ldr	r3, [pc, #192]	; (800586c <RegulationTask+0x6e4>)
 80057aa:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80057ae:	f36f 0200 	bfc	r2, #0, #1
 80057b2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.IOsignals.signals.input1 == HIGH){
 80057b6:	4b2d      	ldr	r3, [pc, #180]	; (800586c <RegulationTask+0x6e4>)
 80057b8:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80057bc:	f013 0f01 	tst.w	r3, #1
 80057c0:	d047      	beq.n	8005852 <RegulationTask+0x6ca>
				if(regulationData.IOsignals.signals.input4 == LOW ||
 80057c2:	4b2a      	ldr	r3, [pc, #168]	; (800586c <RegulationTask+0x6e4>)
 80057c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057c6:	f023 4377 	bic.w	r3, r3, #4143972352	; 0xf7000000
 80057ca:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80057ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057d2:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80057d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057da:	d006      	beq.n	80057ea <RegulationTask+0x662>
					regulationData.ControlWord.CWUHeaterStateOut = LOW;
 80057dc:	4b23      	ldr	r3, [pc, #140]	; (800586c <RegulationTask+0x6e4>)
 80057de:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80057e2:	f36f 0200 	bfc	r2, #0, #1
 80057e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				if(regulationData.IOsignals.signals.input5 == LOW &&
 80057ea:	4b20      	ldr	r3, [pc, #128]	; (800586c <RegulationTask+0x6e4>)
 80057ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ee:	f023 436f 	bic.w	r3, r3, #4009754624	; 0xef000000
 80057f2:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80057f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057fa:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d00a      	beq.n	8005818 <RegulationTask+0x690>
				if(regulationData.ControlWord.CWUHeaterStateOut == LOW){
 8005802:	4b1a      	ldr	r3, [pc, #104]	; (800586c <RegulationTask+0x6e4>)
 8005804:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005808:	f013 0301 	ands.w	r3, r3, #1
 800580c:	d015      	beq.n	800583a <RegulationTask+0x6b2>
				if(regulationData.ControlWord.COHeaterStateOut == LOW){
 800580e:	2b00      	cmp	r3, #0
 8005810:	f47f adb2 	bne.w	8005378 <RegulationTask+0x1f0>
					for(int i = 0; i < 3; i++){
 8005814:	2300      	movs	r3, #0
 8005816:	e019      	b.n	800584c <RegulationTask+0x6c4>
					regulationData.ControlWord.CWUHeaterStateOut = LOW;
 8005818:	4b14      	ldr	r3, [pc, #80]	; (800586c <RegulationTask+0x6e4>)
 800581a:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800581e:	f36f 0200 	bfc	r2, #0, #1
 8005822:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8005826:	e7ec      	b.n	8005802 <RegulationTask+0x67a>
						regulationData.counter.CWU_heater_PWM[i] = 0;
 8005828:	4910      	ldr	r1, [pc, #64]	; (800586c <RegulationTask+0x6e4>)
 800582a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800582e:	2000      	movs	r0, #0
 8005830:	8088      	strh	r0, [r1, #4]
					for(int i = 0; i < 3; i++){
 8005832:	3201      	adds	r2, #1
 8005834:	2a02      	cmp	r2, #2
 8005836:	ddf7      	ble.n	8005828 <RegulationTask+0x6a0>
 8005838:	e7e9      	b.n	800580e <RegulationTask+0x686>
 800583a:	2200      	movs	r2, #0
 800583c:	e7fa      	b.n	8005834 <RegulationTask+0x6ac>
						regulationData.counter.CO_heater_PWM[i] = 0;
 800583e:	1d19      	adds	r1, r3, #4
 8005840:	4a0a      	ldr	r2, [pc, #40]	; (800586c <RegulationTask+0x6e4>)
 8005842:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8005846:	2100      	movs	r1, #0
 8005848:	8051      	strh	r1, [r2, #2]
					for(int i = 0; i < 3; i++){
 800584a:	3301      	adds	r3, #1
 800584c:	2b02      	cmp	r3, #2
 800584e:	ddf6      	ble.n	800583e <RegulationTask+0x6b6>
 8005850:	e592      	b.n	8005378 <RegulationTask+0x1f0>
				regulationData.ControlWord.COHeaterStateOut = LOW;
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <RegulationTask+0x6e4>)
 8005854:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8005858:	f36f 0200 	bfc	r2, #0, #1
 800585c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				for(int i = 0; i < 3; i++){
 8005860:	2300      	movs	r3, #0
 8005862:	e015      	b.n	8005890 <RegulationTask+0x708>
 8005864:	40240000 	.word	0x40240000
 8005868:	20002c00 	.word	0x20002c00
 800586c:	20002bb0 	.word	0x20002bb0
 8005870:	42c80000 	.word	0x42c80000
 8005874:	43480000 	.word	0x43480000
 8005878:	408f4000 	.word	0x408f4000
					regulationData.counter.CO_heater_PWM[i] = 0;
 800587c:	4a0a      	ldr	r2, [pc, #40]	; (80058a8 <RegulationTask+0x720>)
 800587e:	1d19      	adds	r1, r3, #4
 8005880:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005884:	2000      	movs	r0, #0
 8005886:	8048      	strh	r0, [r1, #2]
					regulationData.counter.CWU_heater_PWM[i] = 0;
 8005888:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800588c:	8090      	strh	r0, [r2, #4]
				for(int i = 0; i < 3; i++){
 800588e:	3301      	adds	r3, #1
 8005890:	2b02      	cmp	r3, #2
 8005892:	ddf3      	ble.n	800587c <RegulationTask+0x6f4>
 8005894:	e570      	b.n	8005378 <RegulationTask+0x1f0>
			regulationData.IOsignals.signals.output1 = 0;
 8005896:	4b04      	ldr	r3, [pc, #16]	; (80058a8 <RegulationTask+0x720>)
 8005898:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 800589c:	f36f 12c7 	bfc	r2, #7, #1
 80058a0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80058a4:	e576      	b.n	8005394 <RegulationTask+0x20c>
 80058a6:	bf00      	nop
 80058a8:	20002bb0 	.word	0x20002bb0

080058ac <RegulationTask_GetData>:
  /* USER CODE END PowerRegulation */
}

RegTaskData_t* RegulationTask_GetData (void){
	return &regulationData;
}
 80058ac:	4800      	ldr	r0, [pc, #0]	; (80058b0 <RegulationTask_GetData+0x4>)
 80058ae:	4770      	bx	lr
 80058b0:	20002bb0 	.word	0x20002bb0

080058b4 <UARTDMA_UartIrqHandler>:
#include "UART_DMA.h"
#include <string.h>

uint8_t UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80058b4:	6802      	ldr	r2, [r0, #0]
 80058b6:	6813      	ldr	r3, [r2, #0]
 80058b8:	6819      	ldr	r1, [r3, #0]
 80058ba:	f011 0f10 	tst.w	r1, #16
 80058be:	d00f      	beq.n	80058e0 <UARTDMA_UartIrqHandler+0x2c>
{
 80058c0:	b082      	sub	sp, #8
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80058c2:	6819      	ldr	r1, [r3, #0]
 80058c4:	9101      	str	r1, [sp, #4]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	9301      	str	r3, [sp, #4]
		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80058ca:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	6813      	ldr	r3, [r2, #0]
 80058d0:	f023 0301 	bic.w	r3, r3, #1
 80058d4:	6013      	str	r3, [r2, #0]
		tmp = tmp; // For unused warning
 80058d6:	9b01      	ldr	r3, [sp, #4]
 80058d8:	9301      	str	r3, [sp, #4]
		return 1;
 80058da:	2001      	movs	r0, #1
	}
	else
	{
		return 0;
	}
}
 80058dc:	b002      	add	sp, #8
 80058de:	4770      	bx	lr
		return 0;
 80058e0:	2000      	movs	r0, #0
}
 80058e2:	4770      	bx	lr

080058e4 <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma){
 80058e4:	b570      	push	{r4, r5, r6, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80058e6:	b672      	cpsid	i
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t Reserved0;
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 80058e8:	6803      	ldr	r3, [r0, #0]
 80058ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ec:	6d9d      	ldr	r5, [r3, #88]	; 0x58

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	6812      	ldr	r2, [r2, #0]
 80058f2:	f012 0f10 	tst.w	r2, #16
 80058f6:	d03e      	beq.n	8005976 <UARTDMA_DmaIrqHandler+0x92>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 80058f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058fa:	2320      	movs	r3, #32
 80058fc:	4093      	lsls	r3, r2
 80058fe:	60ab      	str	r3, [r5, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8005900:	6803      	ldr	r3, [r0, #0]
 8005902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685e      	ldr	r6, [r3, #4]
 8005908:	f1c6 0680 	rsb	r6, r6, #128	; 0x80

		huartdma->length += Length;
 800590c:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8005910:	4433      	add	r3, r6
 8005912:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
		//huartdma->length = Length;

		for(i = 0; i < Length; i++){
 8005916:	2200      	movs	r2, #0
 8005918:	e00c      	b.n	8005934 <UARTDMA_DmaIrqHandler+0x50>
			huartdma->UART_Buffer[huartdma->UartBufferTail] = huartdma->DMA_RX_Buffer[i];
 800591a:	f8b0 3107 	ldrh.w	r3, [r0, #263]	; 0x107
 800591e:	1881      	adds	r1, r0, r2
 8005920:	790c      	ldrb	r4, [r1, #4]
 8005922:	18c1      	adds	r1, r0, r3
 8005924:	f881 4084 	strb.w	r4, [r1, #132]	; 0x84
			huartdma->UartBufferTail++;
 8005928:	3301      	adds	r3, #1
			huartdma->UartBufferTail &= 127;
 800592a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800592e:	f8a0 3107 	strh.w	r3, [r0, #263]	; 0x107
		for(i = 0; i < Length; i++){
 8005932:	3201      	adds	r2, #1
 8005934:	42b2      	cmp	r2, r6
 8005936:	d3f0      	bcc.n	800591a <UARTDMA_DmaIrqHandler+0x36>
 8005938:	4604      	mov	r4, r0
		}

		if(huartdma->callback != NULL){
 800593a:	f8d0 310a 	ldr.w	r3, [r0, #266]	; 0x10a
 800593e:	b113      	cbz	r3, 8005946 <UARTDMA_DmaIrqHandler+0x62>
			huartdma -> callback(huartdma -> callbackArgs);
 8005940:	f8d0 010e 	ldr.w	r0, [r0, #270]	; 0x10e
 8005944:	4798      	blx	r3
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8005946:	4623      	mov	r3, r4
 8005948:	f853 2b04 	ldr.w	r2, [r3], #4
 800594c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800594e:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8005950:	223f      	movs	r2, #63	; 0x3f
 8005952:	408a      	lsls	r2, r1
 8005954:	60aa      	str	r2, [r5, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8005956:	6822      	ldr	r2, [r4, #0]
 8005958:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	60d3      	str	r3, [r2, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2280      	movs	r2, #128	; 0x80
 8005966:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	6813      	ldr	r3, [r2, #0]
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005976:	b662      	cpsie	i
	}
	__enable_irq();
}
 8005978:	bd70      	pop	{r4, r5, r6, pc}

0800597a <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800597a:	b510      	push	{r4, lr}
 800597c:	4604      	mov	r4, r0
	huartdma->huart = huart;
 800597e:	6001      	str	r1, [r0, #0]
	huartdma->callback = NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	f880 310a 	strb.w	r3, [r0, #266]	; 0x10a
 8005986:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
 800598a:	f880 310c 	strb.w	r3, [r0, #268]	; 0x10c
 800598e:	f880 310d 	strb.w	r3, [r0, #269]	; 0x10d
	huartdma->callbackArgs = NULL;
 8005992:	f880 310e 	strb.w	r3, [r0, #270]	; 0x10e
 8005996:	f880 310f 	strb.w	r3, [r0, #271]	; 0x10f
 800599a:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
 800599e:	f880 3111 	strb.w	r3, [r0, #273]	; 0x111
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 80059a2:	680a      	ldr	r2, [r1, #0]
 80059a4:	68d3      	ldr	r3, [r2, #12]
 80059a6:	f043 0310 	orr.w	r3, r3, #16
 80059aa:	60d3      	str	r3, [r2, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 80059ac:	4601      	mov	r1, r0
 80059ae:	f851 3b04 	ldr.w	r3, [r1], #4
 80059b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	6813      	ldr	r3, [r2, #0]
 80059b8:	f043 0310 	orr.w	r3, r3, #16
 80059bc:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_DMA(huartdma->huart, &huartdma->DMA_RX_Buffer[0], DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 80059be:	2280      	movs	r2, #128	; 0x80
 80059c0:	6800      	ldr	r0, [r0, #0]
 80059c2:	f004 fd27 	bl	800a414 <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_HTIE; // Disable DMA Half Complete interrupt
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	6813      	ldr	r3, [r2, #0]
 80059ce:	f023 0308 	bic.w	r3, r3, #8
 80059d2:	6013      	str	r3, [r2, #0]
}
 80059d4:	bd10      	pop	{r4, pc}

080059d6 <UARTDMA_GetData>:

uint32_t UARTDMA_GetLen (UARTDMA_HandleTypeDef* huartdma){
	return huartdma -> length;
}

uint32_t UARTDMA_GetData (UARTDMA_HandleTypeDef *huartdma, uint8_t* outBuf){
 80059d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t retval = 0;
	uint32_t temp1, temp2;
	uint32_t tempTail, tempHead, tempLen;

	tempTail = huartdma -> UartBufferTail;
 80059da:	f8b0 2107 	ldrh.w	r2, [r0, #263]	; 0x107
	tempHead = huartdma -> UartBufferHead;
 80059de:	f8b0 3105 	ldrh.w	r3, [r0, #261]	; 0x105
	tempLen = huartdma -> length;
 80059e2:	f890 5104 	ldrb.w	r5, [r0, #260]	; 0x104

	if(tempTail != tempHead){
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d02b      	beq.n	8005a42 <UARTDMA_GetData+0x6c>
 80059ea:	460e      	mov	r6, r1
 80059ec:	4604      	mov	r4, r0
		if(tempHead + tempLen > 128){
 80059ee:	1959      	adds	r1, r3, r5
 80059f0:	2980      	cmp	r1, #128	; 0x80
 80059f2:	d91e      	bls.n	8005a32 <UARTDMA_GetData+0x5c>
			temp1 = 128 - tempTail;
 80059f4:	f1c2 0780 	rsb	r7, r2, #128	; 0x80
			temp2 = tempLen - temp1;
 80059f8:	eba5 0807 	sub.w	r8, r5, r7
			memcpy(outBuf, &huartdma -> UART_Buffer[tempHead], temp1);
 80059fc:	3380      	adds	r3, #128	; 0x80
 80059fe:	4403      	add	r3, r0
 8005a00:	463a      	mov	r2, r7
 8005a02:	1d19      	adds	r1, r3, #4
 8005a04:	4630      	mov	r0, r6
 8005a06:	f008 f94d 	bl	800dca4 <memcpy>
			memcpy(outBuf + temp1, &huartdma -> UART_Buffer[0], temp2);
 8005a0a:	4642      	mov	r2, r8
 8005a0c:	f104 0184 	add.w	r1, r4, #132	; 0x84
 8005a10:	19f0      	adds	r0, r6, r7
 8005a12:	f008 f947 	bl	800dca4 <memcpy>
		}else{
			memcpy(outBuf, &huartdma -> UART_Buffer[tempHead], tempLen);

		}
		tempHead = tempTail;
		huartdma -> UartBufferHead = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
 8005a1c:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		huartdma -> UartBufferTail = 0;
 8005a20:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
 8005a24:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
		huartdma -> length = 0;
 8005a28:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
		retval = tempLen;
	}
	return retval;
}
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			memcpy(outBuf, &huartdma -> UART_Buffer[tempHead], tempLen);
 8005a32:	3380      	adds	r3, #128	; 0x80
 8005a34:	4403      	add	r3, r0
 8005a36:	462a      	mov	r2, r5
 8005a38:	1d19      	adds	r1, r3, #4
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	f008 f932 	bl	800dca4 <memcpy>
 8005a40:	e7e9      	b.n	8005a16 <UARTDMA_GetData+0x40>
	uint32_t retval = 0;
 8005a42:	2500      	movs	r5, #0
	return retval;
 8005a44:	e7f2      	b.n	8005a2c <UARTDMA_GetData+0x56>

08005a46 <ConfigSaveTmr>:
__weak void ConfigSaveTmr(void *argument)
{
  /* USER CODE BEGIN ConfigSaveTmr */
  
  /* USER CODE END ConfigSaveTmr */
}
 8005a46:	4770      	bx	lr

08005a48 <MX_GPIO_Init>:
{
 8005a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a4e:	2400      	movs	r4, #0
 8005a50:	9405      	str	r4, [sp, #20]
 8005a52:	9406      	str	r4, [sp, #24]
 8005a54:	9407      	str	r4, [sp, #28]
 8005a56:	9408      	str	r4, [sp, #32]
 8005a58:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a5a:	9401      	str	r4, [sp, #4]
 8005a5c:	4b46      	ldr	r3, [pc, #280]	; (8005b78 <MX_GPIO_Init+0x130>)
 8005a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a60:	f042 0204 	orr.w	r2, r2, #4
 8005a64:	631a      	str	r2, [r3, #48]	; 0x30
 8005a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a68:	f002 0204 	and.w	r2, r2, #4
 8005a6c:	9201      	str	r2, [sp, #4]
 8005a6e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005a70:	9402      	str	r4, [sp, #8]
 8005a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a78:	631a      	str	r2, [r3, #48]	; 0x30
 8005a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a7c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005a80:	9202      	str	r2, [sp, #8]
 8005a82:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a84:	9403      	str	r4, [sp, #12]
 8005a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a88:	f042 0201 	orr.w	r2, r2, #1
 8005a8c:	631a      	str	r2, [r3, #48]	; 0x30
 8005a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a90:	f002 0201 	and.w	r2, r2, #1
 8005a94:	9203      	str	r2, [sp, #12]
 8005a96:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a98:	9404      	str	r4, [sp, #16]
 8005a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a9c:	f042 0202 	orr.w	r2, r2, #2
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	9304      	str	r3, [sp, #16]
 8005aaa:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 8005aac:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8005b8c <MX_GPIO_Init+0x144>
 8005ab0:	4622      	mov	r2, r4
 8005ab2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ab6:	4640      	mov	r0, r8
 8005ab8:	f001 ffbd 	bl	8007a36 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 8005abc:	4d2f      	ldr	r5, [pc, #188]	; (8005b7c <MX_GPIO_Init+0x134>)
 8005abe:	4622      	mov	r2, r4
 8005ac0:	2102      	movs	r1, #2
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f001 ffb7 	bl	8007a36 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8005ac8:	2201      	movs	r2, #1
 8005aca:	2110      	movs	r1, #16
 8005acc:	4628      	mov	r0, r5
 8005ace:	f001 ffb2 	bl	8007a36 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin, GPIO_PIN_SET);
 8005ad2:	4e2b      	ldr	r6, [pc, #172]	; (8005b80 <MX_GPIO_Init+0x138>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f246 0104 	movw	r1, #24580	; 0x6004
 8005ada:	4630      	mov	r0, r6
 8005adc:	f001 ffab 	bl	8007a36 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	f001 ffa5 	bl	8007a36 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUILT_IN_LED_Pin;
 8005aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005af0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005af2:	2701      	movs	r7, #1
 8005af4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005af8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BUILT_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8005afa:	a905      	add	r1, sp, #20
 8005afc:	4640      	mov	r0, r8
 8005afe:	f001 fec1 	bl	8007884 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MASTER_TE_Pin|ETH_CS_Pin;
 8005b02:	2312      	movs	r3, #18
 8005b04:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b06:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b08:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b0a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b0c:	a905      	add	r1, sp, #20
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f001 feb8 	bl	8007884 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ETH_INT_Pin|PG24V_Pin;
 8005b14:	f241 0302 	movw	r3, #4098	; 0x1002
 8005b18:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005b1a:	4b1a      	ldr	r3, [pc, #104]	; (8005b84 <MX_GPIO_Init+0x13c>)
 8005b1c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b20:	a905      	add	r1, sp, #20
 8005b22:	4630      	mov	r0, r6
 8005b24:	f001 feae 	bl	8007884 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin|NRF_CE_Pin;
 8005b28:	f24e 0304 	movw	r3, #57348	; 0xe004
 8005b2c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b2e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b30:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b32:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b34:	a905      	add	r1, sp, #20
 8005b36:	4630      	mov	r0, r6
 8005b38:	f001 fea4 	bl	8007884 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NRF_INT_Pin;
 8005b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b40:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005b42:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <MX_GPIO_Init+0x140>)
 8005b44:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b46:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(NRF_INT_GPIO_Port, &GPIO_InitStruct);
 8005b48:	a905      	add	r1, sp, #20
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f001 fe9a 	bl	8007884 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 10, 0);
 8005b50:	4622      	mov	r2, r4
 8005b52:	210a      	movs	r1, #10
 8005b54:	2007      	movs	r0, #7
 8005b56:	f001 fcef 	bl	8007538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005b5a:	2007      	movs	r0, #7
 8005b5c:	f001 fd20 	bl	80075a0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 9, 0);
 8005b60:	4622      	mov	r2, r4
 8005b62:	2109      	movs	r1, #9
 8005b64:	2028      	movs	r0, #40	; 0x28
 8005b66:	f001 fce7 	bl	8007538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005b6a:	2028      	movs	r0, #40	; 0x28
 8005b6c:	f001 fd18 	bl	80075a0 <HAL_NVIC_EnableIRQ>
}
 8005b70:	b00a      	add	sp, #40	; 0x28
 8005b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b76:	bf00      	nop
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	40020000 	.word	0x40020000
 8005b80:	40020400 	.word	0x40020400
 8005b84:	10210000 	.word	0x10210000
 8005b88:	10110000 	.word	0x10110000
 8005b8c:	40020800 	.word	0x40020800

08005b90 <MX_DMA_Init>:
{
 8005b90:	b510      	push	{r4, lr}
 8005b92:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005b94:	2400      	movs	r4, #0
 8005b96:	9400      	str	r4, [sp, #0]
 8005b98:	4b16      	ldr	r3, [pc, #88]	; (8005bf4 <MX_DMA_Init+0x64>)
 8005b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ba4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8005ba8:	9200      	str	r2, [sp, #0]
 8005baa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005bac:	9401      	str	r4, [sp, #4]
 8005bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bb0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005bb4:	631a      	str	r2, [r3, #48]	; 0x30
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bbc:	9301      	str	r3, [sp, #4]
 8005bbe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 7, 0);
 8005bc0:	4622      	mov	r2, r4
 8005bc2:	2107      	movs	r1, #7
 8005bc4:	2010      	movs	r0, #16
 8005bc6:	f001 fcb7 	bl	8007538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005bca:	2010      	movs	r0, #16
 8005bcc:	f001 fce8 	bl	80075a0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 7, 0);
 8005bd0:	4622      	mov	r2, r4
 8005bd2:	2107      	movs	r1, #7
 8005bd4:	2039      	movs	r0, #57	; 0x39
 8005bd6:	f001 fcaf 	bl	8007538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8005bda:	2039      	movs	r0, #57	; 0x39
 8005bdc:	f001 fce0 	bl	80075a0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 7, 0);
 8005be0:	4622      	mov	r2, r4
 8005be2:	2107      	movs	r1, #7
 8005be4:	203a      	movs	r0, #58	; 0x3a
 8005be6:	f001 fca7 	bl	8007538 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005bea:	203a      	movs	r0, #58	; 0x3a
 8005bec:	f001 fcd8 	bl	80075a0 <HAL_NVIC_EnableIRQ>
}
 8005bf0:	b002      	add	sp, #8
 8005bf2:	bd10      	pop	{r4, pc}
 8005bf4:	40023800 	.word	0x40023800

08005bf8 <StartDefaultTask>:
{
 8005bf8:	b508      	push	{r3, lr}
    vTaskSuspend(NULL);
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	f006 f8e0 	bl	800bdc0 <vTaskSuspend>
 8005c00:	e7fb      	b.n	8005bfa <StartDefaultTask+0x2>
	...

08005c04 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005c04:	b508      	push	{r3, lr}
	if(huart -> Instance == USART2){
 8005c06:	6802      	ldr	r2, [r0, #0]
 8005c08:	4b03      	ldr	r3, [pc, #12]	; (8005c18 <HAL_UART_RxCpltCallback+0x14>)
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d000      	beq.n	8005c10 <HAL_UART_RxCpltCallback+0xc>
}
 8005c0e:	bd08      	pop	{r3, pc}
		ModbusRTUMaster_ReceieveResponseCallback(&mbPort);
 8005c10:	4802      	ldr	r0, [pc, #8]	; (8005c1c <HAL_UART_RxCpltCallback+0x18>)
 8005c12:	f7fe f8a1 	bl	8003d58 <ModbusRTUMaster_ReceieveResponseCallback>
}
 8005c16:	e7fa      	b.n	8005c0e <HAL_UART_RxCpltCallback+0xa>
 8005c18:	40004400 	.word	0x40004400
 8005c1c:	20003ce4 	.word	0x20003ce4

08005c20 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8005c20:	b508      	push	{r3, lr}
	if(huart -> Instance == USART2){
 8005c22:	6802      	ldr	r2, [r0, #0]
 8005c24:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <HAL_UART_TxCpltCallback+0x30>)
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d000      	beq.n	8005c2c <HAL_UART_TxCpltCallback+0xc>
}
 8005c2a:	bd08      	pop	{r3, pc}
		vTaskNotifyGiveFromISR((TaskHandle_t)mbPort.task, NULL);
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4b09      	ldr	r3, [pc, #36]	; (8005c54 <HAL_UART_TxCpltCallback+0x34>)
 8005c30:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
 8005c34:	f006 fd2e 	bl	800c694 <vTaskNotifyGiveFromISR>
		HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c3e:	4806      	ldr	r0, [pc, #24]	; (8005c58 <HAL_UART_TxCpltCallback+0x38>)
 8005c40:	f001 fef9 	bl	8007a36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 8005c44:	2200      	movs	r2, #0
 8005c46:	2102      	movs	r1, #2
 8005c48:	4804      	ldr	r0, [pc, #16]	; (8005c5c <HAL_UART_TxCpltCallback+0x3c>)
 8005c4a:	f001 fef4 	bl	8007a36 <HAL_GPIO_WritePin>
}
 8005c4e:	e7ec      	b.n	8005c2a <HAL_UART_TxCpltCallback+0xa>
 8005c50:	40004400 	.word	0x40004400
 8005c54:	20003ce4 	.word	0x20003ce4
 8005c58:	40020800 	.word	0x40020800
 8005c5c:	40020000 	.word	0x40020000

08005c60 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8005c60:	b510      	push	{r4, lr}
 8005c62:	4604      	mov	r4, r0
	if(GPIO_Pin & NRF_INT_Pin){
 8005c64:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005c68:	d106      	bne.n	8005c78 <HAL_GPIO_EXTI_Callback+0x18>
	if(GPIO_Pin & ETH_INT_Pin){
 8005c6a:	f014 0f02 	tst.w	r4, #2
 8005c6e:	d109      	bne.n	8005c84 <HAL_GPIO_EXTI_Callback+0x24>
	if(GPIO_Pin & PG24V_Pin){
 8005c70:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8005c74:	d10c      	bne.n	8005c90 <HAL_GPIO_EXTI_Callback+0x30>
}
 8005c76:	bd10      	pop	{r4, pc}
		vTaskNotifyGiveFromISR(nRF24L01Handle, NULL);
 8005c78:	2100      	movs	r1, #0
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <HAL_GPIO_EXTI_Callback+0x48>)
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	f006 fd09 	bl	800c694 <vTaskNotifyGiveFromISR>
 8005c82:	e7f2      	b.n	8005c6a <HAL_GPIO_EXTI_Callback+0xa>
		vTaskNotifyGiveFromISR(EthernetHandle, NULL);
 8005c84:	2100      	movs	r1, #0
 8005c86:	4b09      	ldr	r3, [pc, #36]	; (8005cac <HAL_GPIO_EXTI_Callback+0x4c>)
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	f006 fd03 	bl	800c694 <vTaskNotifyGiveFromISR>
 8005c8e:	e7ef      	b.n	8005c70 <HAL_GPIO_EXTI_Callback+0x10>
		value = HAL_RTCEx_BKUPRead(&hrtc, 0);
 8005c90:	4c07      	ldr	r4, [pc, #28]	; (8005cb0 <HAL_GPIO_EXTI_Callback+0x50>)
 8005c92:	2100      	movs	r1, #0
 8005c94:	4620      	mov	r0, r4
 8005c96:	f003 fae3 	bl	8009260 <HAL_RTCEx_BKUPRead>
		HAL_RTCEx_BKUPWrite(&hrtc, 0, value);
 8005c9a:	1c42      	adds	r2, r0, #1
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f003 fad9 	bl	8009256 <HAL_RTCEx_BKUPWrite>
}
 8005ca4:	e7e7      	b.n	8005c76 <HAL_GPIO_EXTI_Callback+0x16>
 8005ca6:	bf00      	nop
 8005ca8:	20003e0c 	.word	0x20003e0c
 8005cac:	20004234 	.word	0x20004234
 8005cb0:	200040a8 	.word	0x200040a8

08005cb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM11){
 8005cb6:	6802      	ldr	r2, [r0, #0]
 8005cb8:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d004      	beq.n	8005cc8 <HAL_TIM_PeriodElapsedCallback+0x14>
		ulHighFreqTimerTicks ++;
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8005cbe:	6802      	ldr	r2, [r0, #0]
 8005cc0:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d005      	beq.n	8005cd2 <HAL_TIM_PeriodElapsedCallback+0x1e>
    DNS_time_handler();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005cc6:	bd08      	pop	{r3, pc}
		ulHighFreqTimerTicks ++;
 8005cc8:	4a06      	ldr	r2, [pc, #24]	; (8005ce4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8005cca:	6813      	ldr	r3, [r2, #0]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	e7f5      	b.n	8005cbe <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
 8005cd2:	f001 fa7f 	bl	80071d4 <HAL_IncTick>
    DNS_time_handler();
 8005cd6:	f7fd fca9 	bl	800362c <DNS_time_handler>
}
 8005cda:	e7f4      	b.n	8005cc6 <HAL_TIM_PeriodElapsedCallback+0x12>
 8005cdc:	40014800 	.word	0x40014800
 8005ce0:	40014400 	.word	0x40014400
 8005ce4:	20004230 	.word	0x20004230

08005ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ce8:	e7fe      	b.n	8005ce8 <Error_Handler>
	...

08005cec <MX_I2C1_Init>:
{
 8005cec:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8005cee:	480a      	ldr	r0, [pc, #40]	; (8005d18 <MX_I2C1_Init+0x2c>)
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <MX_I2C1_Init+0x30>)
 8005cf2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <MX_I2C1_Init+0x34>)
 8005cf6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005cfc:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005cfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d02:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d04:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005d06:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d08:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d0a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005d0c:	f002 f8f4 	bl	8007ef8 <HAL_I2C_Init>
 8005d10:	b900      	cbnz	r0, 8005d14 <MX_I2C1_Init+0x28>
}
 8005d12:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005d14:	f7ff ffe8 	bl	8005ce8 <Error_Handler>
 8005d18:	20003ee0 	.word	0x20003ee0
 8005d1c:	40005400 	.word	0x40005400
 8005d20:	000186a0 	.word	0x000186a0

08005d24 <MX_SPI1_Init>:
{
 8005d24:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8005d26:	480d      	ldr	r0, [pc, #52]	; (8005d5c <MX_SPI1_Init+0x38>)
 8005d28:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <MX_SPI1_Init+0x3c>)
 8005d2a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005d2c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005d30:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005d32:	2300      	movs	r3, #0
 8005d34:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005d36:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d38:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005d3a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d40:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005d42:	2218      	movs	r2, #24
 8005d44:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005d46:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d48:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d4a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005d4c:	230a      	movs	r3, #10
 8005d4e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005d50:	f003 fb54 	bl	80093fc <HAL_SPI_Init>
 8005d54:	b900      	cbnz	r0, 8005d58 <MX_SPI1_Init+0x34>
}
 8005d56:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005d58:	f7ff ffc6 	bl	8005ce8 <Error_Handler>
 8005d5c:	2000414c 	.word	0x2000414c
 8005d60:	40013000 	.word	0x40013000

08005d64 <MX_TIM1_Init>:
{
 8005d64:	b510      	push	{r4, lr}
 8005d66:	b092      	sub	sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d68:	2400      	movs	r4, #0
 8005d6a:	9410      	str	r4, [sp, #64]	; 0x40
 8005d6c:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d6e:	9409      	str	r4, [sp, #36]	; 0x24
 8005d70:	940a      	str	r4, [sp, #40]	; 0x28
 8005d72:	940b      	str	r4, [sp, #44]	; 0x2c
 8005d74:	940c      	str	r4, [sp, #48]	; 0x30
 8005d76:	940d      	str	r4, [sp, #52]	; 0x34
 8005d78:	940e      	str	r4, [sp, #56]	; 0x38
 8005d7a:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	4621      	mov	r1, r4
 8005d80:	a801      	add	r0, sp, #4
 8005d82:	f007 ff9a 	bl	800dcba <memset>
  htim1.Instance = TIM1;
 8005d86:	482b      	ldr	r0, [pc, #172]	; (8005e34 <MX_TIM1_Init+0xd0>)
 8005d88:	4b2b      	ldr	r3, [pc, #172]	; (8005e38 <MX_TIM1_Init+0xd4>)
 8005d8a:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 42000-1;
 8005d8c:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8005d90:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d92:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 999;
 8005d94:	f240 33e7 	movw	r3, #999	; 0x3e7
 8005d98:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8005d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d9e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8005da0:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005da2:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005da4:	f003 ffbd 	bl	8009d22 <HAL_TIM_PWM_Init>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d136      	bne.n	8005e1a <MX_TIM1_Init+0xb6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dac:	2300      	movs	r3, #0
 8005dae:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005db0:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005db2:	a910      	add	r1, sp, #64	; 0x40
 8005db4:	481f      	ldr	r0, [pc, #124]	; (8005e34 <MX_TIM1_Init+0xd0>)
 8005db6:	f004 f89d 	bl	8009ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	d12f      	bne.n	8005e1e <MX_TIM1_Init+0xba>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005dbe:	2360      	movs	r3, #96	; 0x60
 8005dc0:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005dc6:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005dc8:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005dca:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005dcc:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005dce:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005dd0:	a909      	add	r1, sp, #36	; 0x24
 8005dd2:	4818      	ldr	r0, [pc, #96]	; (8005e34 <MX_TIM1_Init+0xd0>)
 8005dd4:	f003 fff0 	bl	8009db8 <HAL_TIM_PWM_ConfigChannel>
 8005dd8:	bb18      	cbnz	r0, 8005e22 <MX_TIM1_Init+0xbe>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005dda:	2204      	movs	r2, #4
 8005ddc:	a909      	add	r1, sp, #36	; 0x24
 8005dde:	4815      	ldr	r0, [pc, #84]	; (8005e34 <MX_TIM1_Init+0xd0>)
 8005de0:	f003 ffea 	bl	8009db8 <HAL_TIM_PWM_ConfigChannel>
 8005de4:	b9f8      	cbnz	r0, 8005e26 <MX_TIM1_Init+0xc2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005de6:	2208      	movs	r2, #8
 8005de8:	a909      	add	r1, sp, #36	; 0x24
 8005dea:	4812      	ldr	r0, [pc, #72]	; (8005e34 <MX_TIM1_Init+0xd0>)
 8005dec:	f003 ffe4 	bl	8009db8 <HAL_TIM_PWM_ConfigChannel>
 8005df0:	b9d8      	cbnz	r0, 8005e2a <MX_TIM1_Init+0xc6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005df2:	2300      	movs	r3, #0
 8005df4:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005df6:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005df8:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005dfa:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005dfc:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005dfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e02:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005e04:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005e06:	a901      	add	r1, sp, #4
 8005e08:	480a      	ldr	r0, [pc, #40]	; (8005e34 <MX_TIM1_Init+0xd0>)
 8005e0a:	f004 f8af 	bl	8009f6c <HAL_TIMEx_ConfigBreakDeadTime>
 8005e0e:	b970      	cbnz	r0, 8005e2e <MX_TIM1_Init+0xca>
  HAL_TIM_MspPostInit(&htim1);
 8005e10:	4808      	ldr	r0, [pc, #32]	; (8005e34 <MX_TIM1_Init+0xd0>)
 8005e12:	f000 fbc7 	bl	80065a4 <HAL_TIM_MspPostInit>
}
 8005e16:	b012      	add	sp, #72	; 0x48
 8005e18:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005e1a:	f7ff ff65 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 8005e1e:	f7ff ff63 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 8005e22:	f7ff ff61 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 8005e26:	f7ff ff5f 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 8005e2a:	f7ff ff5d 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 8005e2e:	f7ff ff5b 	bl	8005ce8 <Error_Handler>
 8005e32:	bf00      	nop
 8005e34:	200040cc 	.word	0x200040cc
 8005e38:	40010000 	.word	0x40010000

08005e3c <MX_TIM3_Init>:
{
 8005e3c:	b500      	push	{lr}
 8005e3e:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e40:	2300      	movs	r3, #0
 8005e42:	9308      	str	r3, [sp, #32]
 8005e44:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	9302      	str	r3, [sp, #8]
 8005e4a:	9303      	str	r3, [sp, #12]
 8005e4c:	9304      	str	r3, [sp, #16]
 8005e4e:	9305      	str	r3, [sp, #20]
 8005e50:	9306      	str	r3, [sp, #24]
 8005e52:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8005e54:	4820      	ldr	r0, [pc, #128]	; (8005ed8 <MX_TIM3_Init+0x9c>)
 8005e56:	4a21      	ldr	r2, [pc, #132]	; (8005edc <MX_TIM3_Init+0xa0>)
 8005e58:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 42000 - 1;
 8005e5a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8005e5e:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e60:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8005e62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005e66:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8005e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e6c:	6102      	str	r2, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e6e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005e70:	f003 ff57 	bl	8009d22 <HAL_TIM_PWM_Init>
 8005e74:	bb28      	cbnz	r0, 8005ec2 <MX_TIM3_Init+0x86>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e76:	2300      	movs	r3, #0
 8005e78:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e7a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005e7c:	a908      	add	r1, sp, #32
 8005e7e:	4816      	ldr	r0, [pc, #88]	; (8005ed8 <MX_TIM3_Init+0x9c>)
 8005e80:	f004 f838 	bl	8009ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8005e84:	b9f8      	cbnz	r0, 8005ec6 <MX_TIM3_Init+0x8a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e86:	2360      	movs	r3, #96	; 0x60
 8005e88:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e8e:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e90:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e92:	a901      	add	r1, sp, #4
 8005e94:	4810      	ldr	r0, [pc, #64]	; (8005ed8 <MX_TIM3_Init+0x9c>)
 8005e96:	f003 ff8f 	bl	8009db8 <HAL_TIM_PWM_ConfigChannel>
 8005e9a:	b9b0      	cbnz	r0, 8005eca <MX_TIM3_Init+0x8e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	eb0d 0102 	add.w	r1, sp, r2
 8005ea2:	480d      	ldr	r0, [pc, #52]	; (8005ed8 <MX_TIM3_Init+0x9c>)
 8005ea4:	f003 ff88 	bl	8009db8 <HAL_TIM_PWM_ConfigChannel>
 8005ea8:	b988      	cbnz	r0, 8005ece <MX_TIM3_Init+0x92>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005eaa:	2208      	movs	r2, #8
 8005eac:	a901      	add	r1, sp, #4
 8005eae:	480a      	ldr	r0, [pc, #40]	; (8005ed8 <MX_TIM3_Init+0x9c>)
 8005eb0:	f003 ff82 	bl	8009db8 <HAL_TIM_PWM_ConfigChannel>
 8005eb4:	b968      	cbnz	r0, 8005ed2 <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8005eb6:	4808      	ldr	r0, [pc, #32]	; (8005ed8 <MX_TIM3_Init+0x9c>)
 8005eb8:	f000 fb74 	bl	80065a4 <HAL_TIM_MspPostInit>
}
 8005ebc:	b00b      	add	sp, #44	; 0x2c
 8005ebe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005ec2:	f7ff ff11 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 8005ec6:	f7ff ff0f 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 8005eca:	f7ff ff0d 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 8005ece:	f7ff ff0b 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 8005ed2:	f7ff ff09 	bl	8005ce8 <Error_Handler>
 8005ed6:	bf00      	nop
 8005ed8:	20003f3c 	.word	0x20003f3c
 8005edc:	40000400 	.word	0x40000400

08005ee0 <MX_USART1_UART_Init>:
{
 8005ee0:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8005ee2:	480a      	ldr	r0, [pc, #40]	; (8005f0c <MX_USART1_UART_Init+0x2c>)
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <MX_USART1_UART_Init+0x30>)
 8005ee6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 19200;
 8005ee8:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8005eec:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ef2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005ef4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ef6:	220c      	movs	r2, #12
 8005ef8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005efa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005efc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005efe:	f004 f9e8 	bl	800a2d2 <HAL_UART_Init>
 8005f02:	b900      	cbnz	r0, 8005f06 <MX_USART1_UART_Init+0x26>
}
 8005f04:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005f06:	f7ff feef 	bl	8005ce8 <Error_Handler>
 8005f0a:	bf00      	nop
 8005f0c:	20004024 	.word	0x20004024
 8005f10:	40011000 	.word	0x40011000

08005f14 <MX_USART2_UART_Init>:
{
 8005f14:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8005f16:	480a      	ldr	r0, [pc, #40]	; (8005f40 <MX_USART2_UART_Init+0x2c>)
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <MX_USART2_UART_Init+0x30>)
 8005f1a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8005f1c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005f20:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005f22:	2300      	movs	r3, #0
 8005f24:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005f26:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005f28:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f2a:	220c      	movs	r2, #12
 8005f2c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f2e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f30:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005f32:	f004 f9ce 	bl	800a2d2 <HAL_UART_Init>
 8005f36:	b900      	cbnz	r0, 8005f3a <MX_USART2_UART_Init+0x26>
}
 8005f38:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005f3a:	f7ff fed5 	bl	8005ce8 <Error_Handler>
 8005f3e:	bf00      	nop
 8005f40:	200041e4 	.word	0x200041e4
 8005f44:	40004400 	.word	0x40004400

08005f48 <MX_USART6_UART_Init>:
{
 8005f48:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 8005f4a:	480a      	ldr	r0, [pc, #40]	; (8005f74 <MX_USART6_UART_Init+0x2c>)
 8005f4c:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <MX_USART6_UART_Init+0x30>)
 8005f4e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 19200;
 8005f50:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8005f54:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005f56:	2300      	movs	r3, #0
 8005f58:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005f5a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005f5c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005f5e:	220c      	movs	r2, #12
 8005f60:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f62:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f64:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005f66:	f004 f9b4 	bl	800a2d2 <HAL_UART_Init>
 8005f6a:	b900      	cbnz	r0, 8005f6e <MX_USART6_UART_Init+0x26>
}
 8005f6c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005f6e:	f7ff febb 	bl	8005ce8 <Error_Handler>
 8005f72:	bf00      	nop
 8005f74:	2000410c 	.word	0x2000410c
 8005f78:	40011400 	.word	0x40011400

08005f7c <MX_TIM2_Init>:
{
 8005f7c:	b500      	push	{lr}
 8005f7e:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f80:	2300      	movs	r3, #0
 8005f82:	9308      	str	r3, [sp, #32]
 8005f84:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	9302      	str	r3, [sp, #8]
 8005f8a:	9303      	str	r3, [sp, #12]
 8005f8c:	9304      	str	r3, [sp, #16]
 8005f8e:	9305      	str	r3, [sp, #20]
 8005f90:	9306      	str	r3, [sp, #24]
 8005f92:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8005f94:	481e      	ldr	r0, [pc, #120]	; (8006010 <MX_TIM2_Init+0x94>)
 8005f96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f9a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8005f9c:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f9e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8005fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fa4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fa6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fa8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005faa:	f003 feba 	bl	8009d22 <HAL_TIM_PWM_Init>
 8005fae:	bb28      	cbnz	r0, 8005ffc <MX_TIM2_Init+0x80>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fb4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005fb6:	a908      	add	r1, sp, #32
 8005fb8:	4815      	ldr	r0, [pc, #84]	; (8006010 <MX_TIM2_Init+0x94>)
 8005fba:	f003 ff9b 	bl	8009ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8005fbe:	b9f8      	cbnz	r0, 8006000 <MX_TIM2_Init+0x84>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fc0:	2360      	movs	r3, #96	; 0x60
 8005fc2:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fc8:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fca:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fcc:	a901      	add	r1, sp, #4
 8005fce:	4810      	ldr	r0, [pc, #64]	; (8006010 <MX_TIM2_Init+0x94>)
 8005fd0:	f003 fef2 	bl	8009db8 <HAL_TIM_PWM_ConfigChannel>
 8005fd4:	b9b0      	cbnz	r0, 8006004 <MX_TIM2_Init+0x88>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005fd6:	2204      	movs	r2, #4
 8005fd8:	eb0d 0102 	add.w	r1, sp, r2
 8005fdc:	480c      	ldr	r0, [pc, #48]	; (8006010 <MX_TIM2_Init+0x94>)
 8005fde:	f003 feeb 	bl	8009db8 <HAL_TIM_PWM_ConfigChannel>
 8005fe2:	b988      	cbnz	r0, 8006008 <MX_TIM2_Init+0x8c>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005fe4:	2208      	movs	r2, #8
 8005fe6:	a901      	add	r1, sp, #4
 8005fe8:	4809      	ldr	r0, [pc, #36]	; (8006010 <MX_TIM2_Init+0x94>)
 8005fea:	f003 fee5 	bl	8009db8 <HAL_TIM_PWM_ConfigChannel>
 8005fee:	b968      	cbnz	r0, 800600c <MX_TIM2_Init+0x90>
  HAL_TIM_MspPostInit(&htim2);
 8005ff0:	4807      	ldr	r0, [pc, #28]	; (8006010 <MX_TIM2_Init+0x94>)
 8005ff2:	f000 fad7 	bl	80065a4 <HAL_TIM_MspPostInit>
}
 8005ff6:	b00b      	add	sp, #44	; 0x2c
 8005ff8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005ffc:	f7ff fe74 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 8006000:	f7ff fe72 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 8006004:	f7ff fe70 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 8006008:	f7ff fe6e 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 800600c:	f7ff fe6c 	bl	8005ce8 <Error_Handler>
 8006010:	200041a4 	.word	0x200041a4

08006014 <MX_ADC1_Init>:
{
 8006014:	b500      	push	{lr}
 8006016:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8006018:	2300      	movs	r3, #0
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	9302      	str	r3, [sp, #8]
 8006020:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8006022:	4814      	ldr	r0, [pc, #80]	; (8006074 <MX_ADC1_Init+0x60>)
 8006024:	4a14      	ldr	r2, [pc, #80]	; (8006078 <MX_ADC1_Init+0x64>)
 8006026:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006028:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800602c:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800602e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8006030:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006032:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006034:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006038:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800603a:	4a10      	ldr	r2, [pc, #64]	; (800607c <MX_ADC1_Init+0x68>)
 800603c:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800603e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006040:	2201      	movs	r2, #1
 8006042:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006044:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006048:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800604a:	f001 f96f 	bl	800732c <HAL_ADC_Init>
 800604e:	b968      	cbnz	r0, 800606c <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8006050:	2312      	movs	r3, #18
 8006052:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8006054:	2301      	movs	r3, #1
 8006056:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006058:	2300      	movs	r3, #0
 800605a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800605c:	4669      	mov	r1, sp
 800605e:	4805      	ldr	r0, [pc, #20]	; (8006074 <MX_ADC1_Init+0x60>)
 8006060:	f001 f990 	bl	8007384 <HAL_ADC_ConfigChannel>
 8006064:	b920      	cbnz	r0, 8006070 <MX_ADC1_Init+0x5c>
}
 8006066:	b005      	add	sp, #20
 8006068:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800606c:	f7ff fe3c 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 8006070:	f7ff fe3a 	bl	8005ce8 <Error_Handler>
 8006074:	20003f7c 	.word	0x20003f7c
 8006078:	40012000 	.word	0x40012000
 800607c:	0f000001 	.word	0x0f000001

08006080 <MX_RTC_Init>:
{
 8006080:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 8006082:	4809      	ldr	r0, [pc, #36]	; (80060a8 <MX_RTC_Init+0x28>)
 8006084:	4b09      	ldr	r3, [pc, #36]	; (80060ac <MX_RTC_Init+0x2c>)
 8006086:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006088:	2300      	movs	r3, #0
 800608a:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800608c:	227f      	movs	r2, #127	; 0x7f
 800608e:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8006090:	22ff      	movs	r2, #255	; 0xff
 8006092:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006094:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006096:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006098:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800609a:	f002 ff2e 	bl	8008efa <HAL_RTC_Init>
 800609e:	b900      	cbnz	r0, 80060a2 <MX_RTC_Init+0x22>
}
 80060a0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80060a2:	f7ff fe21 	bl	8005ce8 <Error_Handler>
 80060a6:	bf00      	nop
 80060a8:	200040a8 	.word	0x200040a8
 80060ac:	40002800 	.word	0x40002800

080060b0 <MX_CRC_Init>:
{
 80060b0:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 80060b2:	4804      	ldr	r0, [pc, #16]	; (80060c4 <MX_CRC_Init+0x14>)
 80060b4:	4b04      	ldr	r3, [pc, #16]	; (80060c8 <MX_CRC_Init+0x18>)
 80060b6:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80060b8:	f001 fa92 	bl	80075e0 <HAL_CRC_Init>
 80060bc:	b900      	cbnz	r0, 80060c0 <MX_CRC_Init+0x10>
}
 80060be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80060c0:	f7ff fe12 	bl	8005ce8 <Error_Handler>
 80060c4:	20003f34 	.word	0x20003f34
 80060c8:	40023000 	.word	0x40023000

080060cc <MX_TIM11_Init>:
{
 80060cc:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 80060ce:	4808      	ldr	r0, [pc, #32]	; (80060f0 <MX_TIM11_Init+0x24>)
 80060d0:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <MX_TIM11_Init+0x28>)
 80060d2:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060d8:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 840 - 1;
 80060da:	f240 3247 	movw	r2, #839	; 0x347
 80060de:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060e0:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060e2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80060e4:	f003 fe04 	bl	8009cf0 <HAL_TIM_Base_Init>
 80060e8:	b900      	cbnz	r0, 80060ec <MX_TIM11_Init+0x20>
}
 80060ea:	bd08      	pop	{r3, pc}
    Error_Handler();
 80060ec:	f7ff fdfc 	bl	8005ce8 <Error_Handler>
 80060f0:	20004064 	.word	0x20004064
 80060f4:	40014800 	.word	0x40014800

080060f8 <SystemClock_Config>:
{
 80060f8:	b500      	push	{lr}
 80060fa:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060fc:	2230      	movs	r2, #48	; 0x30
 80060fe:	2100      	movs	r1, #0
 8006100:	eb0d 0002 	add.w	r0, sp, r2
 8006104:	f007 fdd9 	bl	800dcba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006108:	2300      	movs	r3, #0
 800610a:	9307      	str	r3, [sp, #28]
 800610c:	9308      	str	r3, [sp, #32]
 800610e:	9309      	str	r3, [sp, #36]	; 0x24
 8006110:	930a      	str	r3, [sp, #40]	; 0x28
 8006112:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006114:	9302      	str	r3, [sp, #8]
 8006116:	9303      	str	r3, [sp, #12]
 8006118:	9304      	str	r3, [sp, #16]
 800611a:	9305      	str	r3, [sp, #20]
 800611c:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	4a27      	ldr	r2, [pc, #156]	; (80061c0 <SystemClock_Config+0xc8>)
 8006122:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8006124:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006128:	6411      	str	r1, [r2, #64]	; 0x40
 800612a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800612c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8006130:	9200      	str	r2, [sp, #0]
 8006132:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	4a23      	ldr	r2, [pc, #140]	; (80061c4 <SystemClock_Config+0xcc>)
 8006138:	6813      	ldr	r3, [r2, #0]
 800613a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800613e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	6813      	ldr	r3, [r2, #0]
 8006146:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800614e:	2305      	movs	r3, #5
 8006150:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006156:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006158:	2301      	movs	r3, #1
 800615a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800615c:	2302      	movs	r3, #2
 800615e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006160:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006164:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8006166:	2219      	movs	r2, #25
 8006168:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800616a:	22a8      	movs	r2, #168	; 0xa8
 800616c:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800616e:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006170:	2304      	movs	r3, #4
 8006172:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006174:	a80c      	add	r0, sp, #48	; 0x30
 8006176:	f002 fa81 	bl	800867c <HAL_RCC_OscConfig>
 800617a:	b9d8      	cbnz	r0, 80061b4 <SystemClock_Config+0xbc>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800617c:	230f      	movs	r3, #15
 800617e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006180:	2102      	movs	r1, #2
 8006182:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006184:	2300      	movs	r3, #0
 8006186:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006188:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800618c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800618e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006190:	a807      	add	r0, sp, #28
 8006192:	f002 fcbf 	bl	8008b14 <HAL_RCC_ClockConfig>
 8006196:	b978      	cbnz	r0, 80061b8 <SystemClock_Config+0xc0>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006198:	2302      	movs	r3, #2
 800619a:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800619c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061a0:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80061a2:	a802      	add	r0, sp, #8
 80061a4:	f002 fdbe 	bl	8008d24 <HAL_RCCEx_PeriphCLKConfig>
 80061a8:	b940      	cbnz	r0, 80061bc <SystemClock_Config+0xc4>
  HAL_RCC_EnableCSS();
 80061aa:	f002 fc59 	bl	8008a60 <HAL_RCC_EnableCSS>
}
 80061ae:	b019      	add	sp, #100	; 0x64
 80061b0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80061b4:	f7ff fd98 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 80061b8:	f7ff fd96 	bl	8005ce8 <Error_Handler>
    Error_Handler();
 80061bc:	f7ff fd94 	bl	8005ce8 <Error_Handler>
 80061c0:	40023800 	.word	0x40023800
 80061c4:	40007000 	.word	0x40007000

080061c8 <main>:
{
 80061c8:	b508      	push	{r3, lr}
  HAL_Init();
 80061ca:	f000 ffe9 	bl	80071a0 <HAL_Init>
  SystemClock_Config();
 80061ce:	f7ff ff93 	bl	80060f8 <SystemClock_Config>
  MX_GPIO_Init();
 80061d2:	f7ff fc39 	bl	8005a48 <MX_GPIO_Init>
  MX_DMA_Init();
 80061d6:	f7ff fcdb 	bl	8005b90 <MX_DMA_Init>
  MX_I2C1_Init();
 80061da:	f7ff fd87 	bl	8005cec <MX_I2C1_Init>
  MX_SPI1_Init();
 80061de:	f7ff fda1 	bl	8005d24 <MX_SPI1_Init>
  MX_TIM1_Init();
 80061e2:	f7ff fdbf 	bl	8005d64 <MX_TIM1_Init>
  MX_TIM3_Init();
 80061e6:	f7ff fe29 	bl	8005e3c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80061ea:	f7ff fe79 	bl	8005ee0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80061ee:	f7ff fe91 	bl	8005f14 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80061f2:	f7ff fea9 	bl	8005f48 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 80061f6:	f7ff fec1 	bl	8005f7c <MX_TIM2_Init>
  MX_ADC1_Init();
 80061fa:	f7ff ff0b 	bl	8006014 <MX_ADC1_Init>
  MX_RTC_Init();
 80061fe:	f7ff ff3f 	bl	8006080 <MX_RTC_Init>
  MX_CRC_Init();
 8006202:	f7ff ff55 	bl	80060b0 <MX_CRC_Init>
  MX_TIM11_Init();
 8006206:	f7ff ff61 	bl	80060cc <MX_TIM11_Init>
  HAL_TIM_Base_Start_IT(&htim11);
 800620a:	4829      	ldr	r0, [pc, #164]	; (80062b0 <main+0xe8>)
 800620c:	f003 fc50 	bl	8009ab0 <HAL_TIM_Base_Start_IT>
  osKernelInitialize();
 8006210:	f004 faa6 	bl	800a760 <osKernelInitialize>
  SPIMutexHandle = osMutexNew(&SPIMutex_attributes);
 8006214:	4827      	ldr	r0, [pc, #156]	; (80062b4 <main+0xec>)
 8006216:	f004 fbc1 	bl	800a99c <osMutexNew>
 800621a:	4b27      	ldr	r3, [pc, #156]	; (80062b8 <main+0xf0>)
 800621c:	6018      	str	r0, [r3, #0]
  I2CMutexHandle = osMutexNew(&I2CMutex_attributes);
 800621e:	4827      	ldr	r0, [pc, #156]	; (80062bc <main+0xf4>)
 8006220:	f004 fbbc 	bl	800a99c <osMutexNew>
 8006224:	4b26      	ldr	r3, [pc, #152]	; (80062c0 <main+0xf8>)
 8006226:	6018      	str	r0, [r3, #0]
  ModbusMutexHandle = osMutexNew(&ModbusMutex_attributes);
 8006228:	4826      	ldr	r0, [pc, #152]	; (80062c4 <main+0xfc>)
 800622a:	f004 fbb7 	bl	800a99c <osMutexNew>
 800622e:	4b26      	ldr	r3, [pc, #152]	; (80062c8 <main+0x100>)
 8006230:	6018      	str	r0, [r3, #0]
  Config_Init(&hi2c1);
 8006232:	4826      	ldr	r0, [pc, #152]	; (80062cc <main+0x104>)
 8006234:	f7fb fb5c 	bl	80018f0 <Config_Init>
  ConfigHandle = osTimerNew(ConfigSaveTmr, osTimerOnce, NULL, &Config_attributes);
 8006238:	4b25      	ldr	r3, [pc, #148]	; (80062d0 <main+0x108>)
 800623a:	2200      	movs	r2, #0
 800623c:	4611      	mov	r1, r2
 800623e:	4825      	ldr	r0, [pc, #148]	; (80062d4 <main+0x10c>)
 8006240:	f004 fb5a 	bl	800a8f8 <osTimerNew>
 8006244:	4b24      	ldr	r3, [pc, #144]	; (80062d8 <main+0x110>)
 8006246:	6018      	str	r0, [r3, #0]
  DataLogQueueHandle = osMessageQueueNew (16, 16, &DataLogQueue_attributes);
 8006248:	4a24      	ldr	r2, [pc, #144]	; (80062dc <main+0x114>)
 800624a:	2110      	movs	r1, #16
 800624c:	4608      	mov	r0, r1
 800624e:	f004 fc01 	bl	800aa54 <osMessageQueueNew>
 8006252:	4b23      	ldr	r3, [pc, #140]	; (80062e0 <main+0x118>)
 8006254:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8006256:	4a23      	ldr	r2, [pc, #140]	; (80062e4 <main+0x11c>)
 8006258:	2100      	movs	r1, #0
 800625a:	4823      	ldr	r0, [pc, #140]	; (80062e8 <main+0x120>)
 800625c:	f004 fac4 	bl	800a7e8 <osThreadNew>
 8006260:	4b22      	ldr	r3, [pc, #136]	; (80062ec <main+0x124>)
 8006262:	6018      	str	r0, [r3, #0]
  PowerRegulationHandle = osThreadNew(RegulationTask, NULL, &PowerRegulation_attributes);
 8006264:	4a22      	ldr	r2, [pc, #136]	; (80062f0 <main+0x128>)
 8006266:	2100      	movs	r1, #0
 8006268:	4822      	ldr	r0, [pc, #136]	; (80062f4 <main+0x12c>)
 800626a:	f004 fabd 	bl	800a7e8 <osThreadNew>
 800626e:	4b22      	ldr	r3, [pc, #136]	; (80062f8 <main+0x130>)
 8006270:	6018      	str	r0, [r3, #0]
  DiplaysHandle = osThreadNew(DisplayTask, NULL, &Diplays_attributes);
 8006272:	4a22      	ldr	r2, [pc, #136]	; (80062fc <main+0x134>)
 8006274:	2100      	movs	r1, #0
 8006276:	4822      	ldr	r0, [pc, #136]	; (8006300 <main+0x138>)
 8006278:	f004 fab6 	bl	800a7e8 <osThreadNew>
 800627c:	4b21      	ldr	r3, [pc, #132]	; (8006304 <main+0x13c>)
 800627e:	6018      	str	r0, [r3, #0]
  EthernetHandle = osThreadNew(EthernetTask, NULL, &Ethernet_attributes);
 8006280:	4a21      	ldr	r2, [pc, #132]	; (8006308 <main+0x140>)
 8006282:	2100      	movs	r1, #0
 8006284:	4821      	ldr	r0, [pc, #132]	; (800630c <main+0x144>)
 8006286:	f004 faaf 	bl	800a7e8 <osThreadNew>
 800628a:	4b21      	ldr	r3, [pc, #132]	; (8006310 <main+0x148>)
 800628c:	6018      	str	r0, [r3, #0]
  nRF24L01Handle = osThreadNew(RadioTask, NULL, &nRF24L01_attributes);
 800628e:	4a21      	ldr	r2, [pc, #132]	; (8006314 <main+0x14c>)
 8006290:	2100      	movs	r1, #0
 8006292:	4821      	ldr	r0, [pc, #132]	; (8006318 <main+0x150>)
 8006294:	f004 faa8 	bl	800a7e8 <osThreadNew>
 8006298:	4b20      	ldr	r3, [pc, #128]	; (800631c <main+0x154>)
 800629a:	6018      	str	r0, [r3, #0]
  DataLogHandle = osThreadNew(DataLogTask, NULL, &DataLog_attributes);
 800629c:	4a20      	ldr	r2, [pc, #128]	; (8006320 <main+0x158>)
 800629e:	2100      	movs	r1, #0
 80062a0:	4820      	ldr	r0, [pc, #128]	; (8006324 <main+0x15c>)
 80062a2:	f004 faa1 	bl	800a7e8 <osThreadNew>
 80062a6:	4b20      	ldr	r3, [pc, #128]	; (8006328 <main+0x160>)
 80062a8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80062aa:	f004 fa79 	bl	800a7a0 <osKernelStart>
 80062ae:	e7fe      	b.n	80062ae <main+0xe6>
 80062b0:	20004064 	.word	0x20004064
 80062b4:	0800f658 	.word	0x0800f658
 80062b8:	2000422c 	.word	0x2000422c
 80062bc:	0800f614 	.word	0x0800f614
 80062c0:	20004224 	.word	0x20004224
 80062c4:	0800f624 	.word	0x0800f624
 80062c8:	200040c8 	.word	0x200040c8
 80062cc:	20003ee0 	.word	0x20003ee0
 80062d0:	0800f580 	.word	0x0800f580
 80062d4:	08005a47 	.word	0x08005a47
 80062d8:	20003edc 	.word	0x20003edc
 80062dc:	0800f590 	.word	0x0800f590
 80062e0:	200040a4 	.word	0x200040a4
 80062e4:	0800f668 	.word	0x0800f668
 80062e8:	08005bf9 	.word	0x08005bf9
 80062ec:	20003e14 	.word	0x20003e14
 80062f0:	0800f634 	.word	0x0800f634
 80062f4:	08005189 	.word	0x08005189
 80062f8:	20003ed8 	.word	0x20003ed8
 80062fc:	0800f5cc 	.word	0x0800f5cc
 8006300:	080047b5 	.word	0x080047b5
 8006304:	20004228 	.word	0x20004228
 8006308:	0800f5f0 	.word	0x0800f5f0
 800630c:	08004bb1 	.word	0x08004bb1
 8006310:	20004234 	.word	0x20004234
 8006314:	0800f68c 	.word	0x0800f68c
 8006318:	0800511d 	.word	0x0800511d
 800631c:	20003e0c 	.word	0x20003e0c
 8006320:	0800f5a8 	.word	0x0800f5a8
 8006324:	08004351 	.word	0x08004351
 8006328:	20003e10 	.word	0x20003e10

0800632c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800632c:	b500      	push	{lr}
 800632e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006330:	2200      	movs	r2, #0
 8006332:	9200      	str	r2, [sp, #0]
 8006334:	4b0d      	ldr	r3, [pc, #52]	; (800636c <HAL_MspInit+0x40>)
 8006336:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006338:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800633c:	6459      	str	r1, [r3, #68]	; 0x44
 800633e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006340:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8006344:	9100      	str	r1, [sp, #0]
 8006346:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006348:	9201      	str	r2, [sp, #4]
 800634a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800634c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006350:	6419      	str	r1, [r3, #64]	; 0x40
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006358:	9301      	str	r3, [sp, #4]
 800635a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800635c:	210f      	movs	r1, #15
 800635e:	f06f 0001 	mvn.w	r0, #1
 8006362:	f001 f8e9 	bl	8007538 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006366:	b003      	add	sp, #12
 8006368:	f85d fb04 	ldr.w	pc, [sp], #4
 800636c:	40023800 	.word	0x40023800

08006370 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8006370:	6802      	ldr	r2, [r0, #0]
 8006372:	4b09      	ldr	r3, [pc, #36]	; (8006398 <HAL_ADC_MspInit+0x28>)
 8006374:	429a      	cmp	r2, r3
 8006376:	d000      	beq.n	800637a <HAL_ADC_MspInit+0xa>
 8006378:	4770      	bx	lr
{
 800637a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800637c:	2300      	movs	r3, #0
 800637e:	9301      	str	r3, [sp, #4]
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <HAL_ADC_MspInit+0x2c>)
 8006382:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006388:	645a      	str	r2, [r3, #68]	; 0x44
 800638a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006390:	9301      	str	r3, [sp, #4]
 8006392:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006394:	b002      	add	sp, #8
 8006396:	4770      	bx	lr
 8006398:	40012000 	.word	0x40012000
 800639c:	40023800 	.word	0x40023800

080063a0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80063a0:	6802      	ldr	r2, [r0, #0]
 80063a2:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <HAL_CRC_MspInit+0x28>)
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d000      	beq.n	80063aa <HAL_CRC_MspInit+0xa>
 80063a8:	4770      	bx	lr
{
 80063aa:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80063ac:	2300      	movs	r3, #0
 80063ae:	9301      	str	r3, [sp, #4]
 80063b0:	4b06      	ldr	r3, [pc, #24]	; (80063cc <HAL_CRC_MspInit+0x2c>)
 80063b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063b8:	631a      	str	r2, [r3, #48]	; 0x30
 80063ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063c0:	9301      	str	r3, [sp, #4]
 80063c2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80063c4:	b002      	add	sp, #8
 80063c6:	4770      	bx	lr
 80063c8:	40023000 	.word	0x40023000
 80063cc:	40023800 	.word	0x40023800

080063d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80063d0:	b530      	push	{r4, r5, lr}
 80063d2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063d4:	2300      	movs	r3, #0
 80063d6:	9303      	str	r3, [sp, #12]
 80063d8:	9304      	str	r3, [sp, #16]
 80063da:	9305      	str	r3, [sp, #20]
 80063dc:	9306      	str	r3, [sp, #24]
 80063de:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 80063e0:	6802      	ldr	r2, [r0, #0]
 80063e2:	4b14      	ldr	r3, [pc, #80]	; (8006434 <HAL_I2C_MspInit+0x64>)
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d001      	beq.n	80063ec <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80063e8:	b009      	add	sp, #36	; 0x24
 80063ea:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063ec:	2500      	movs	r5, #0
 80063ee:	9501      	str	r5, [sp, #4]
 80063f0:	4c11      	ldr	r4, [pc, #68]	; (8006438 <HAL_I2C_MspInit+0x68>)
 80063f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80063f4:	f043 0302 	orr.w	r3, r3, #2
 80063f8:	6323      	str	r3, [r4, #48]	; 0x30
 80063fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	9301      	str	r3, [sp, #4]
 8006402:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006404:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006408:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800640a:	2312      	movs	r3, #18
 800640c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800640e:	2303      	movs	r3, #3
 8006410:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006412:	2304      	movs	r3, #4
 8006414:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006416:	a903      	add	r1, sp, #12
 8006418:	4808      	ldr	r0, [pc, #32]	; (800643c <HAL_I2C_MspInit+0x6c>)
 800641a:	f001 fa33 	bl	8007884 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800641e:	9502      	str	r5, [sp, #8]
 8006420:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006422:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006426:	6423      	str	r3, [r4, #64]	; 0x40
 8006428:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800642a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800642e:	9302      	str	r3, [sp, #8]
 8006430:	9b02      	ldr	r3, [sp, #8]
}
 8006432:	e7d9      	b.n	80063e8 <HAL_I2C_MspInit+0x18>
 8006434:	40005400 	.word	0x40005400
 8006438:	40023800 	.word	0x40023800
 800643c:	40020400 	.word	0x40020400

08006440 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8006440:	6802      	ldr	r2, [r0, #0]
 8006442:	4b04      	ldr	r3, [pc, #16]	; (8006454 <HAL_RTC_MspInit+0x14>)
 8006444:	429a      	cmp	r2, r3
 8006446:	d000      	beq.n	800644a <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006448:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 800644a:	4b03      	ldr	r3, [pc, #12]	; (8006458 <HAL_RTC_MspInit+0x18>)
 800644c:	2201      	movs	r2, #1
 800644e:	601a      	str	r2, [r3, #0]
}
 8006450:	e7fa      	b.n	8006448 <HAL_RTC_MspInit+0x8>
 8006452:	bf00      	nop
 8006454:	40002800 	.word	0x40002800
 8006458:	42470e3c 	.word	0x42470e3c

0800645c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800645c:	b500      	push	{lr}
 800645e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006460:	2300      	movs	r3, #0
 8006462:	9303      	str	r3, [sp, #12]
 8006464:	9304      	str	r3, [sp, #16]
 8006466:	9305      	str	r3, [sp, #20]
 8006468:	9306      	str	r3, [sp, #24]
 800646a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 800646c:	6802      	ldr	r2, [r0, #0]
 800646e:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <HAL_SPI_MspInit+0x68>)
 8006470:	429a      	cmp	r2, r3
 8006472:	d002      	beq.n	800647a <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006474:	b009      	add	sp, #36	; 0x24
 8006476:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 800647a:	2100      	movs	r1, #0
 800647c:	9101      	str	r1, [sp, #4]
 800647e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8006482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006484:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006488:	645a      	str	r2, [r3, #68]	; 0x44
 800648a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800648c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006490:	9201      	str	r2, [sp, #4]
 8006492:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006494:	9102      	str	r1, [sp, #8]
 8006496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006498:	f042 0201 	orr.w	r2, r2, #1
 800649c:	631a      	str	r2, [r3, #48]	; 0x30
 800649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	9302      	str	r3, [sp, #8]
 80064a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80064a8:	23e0      	movs	r3, #224	; 0xe0
 80064aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ac:	2302      	movs	r3, #2
 80064ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064b0:	2303      	movs	r3, #3
 80064b2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80064b4:	2305      	movs	r3, #5
 80064b6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064b8:	a903      	add	r1, sp, #12
 80064ba:	4803      	ldr	r0, [pc, #12]	; (80064c8 <HAL_SPI_MspInit+0x6c>)
 80064bc:	f001 f9e2 	bl	8007884 <HAL_GPIO_Init>
}
 80064c0:	e7d8      	b.n	8006474 <HAL_SPI_MspInit+0x18>
 80064c2:	bf00      	nop
 80064c4:	40013000 	.word	0x40013000
 80064c8:	40020000 	.word	0x40020000

080064cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80064cc:	b510      	push	{r4, lr}
 80064ce:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 80064d0:	6803      	ldr	r3, [r0, #0]
 80064d2:	4a21      	ldr	r2, [pc, #132]	; (8006558 <HAL_TIM_PWM_MspInit+0x8c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d007      	beq.n	80064e8 <HAL_TIM_PWM_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 80064d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064dc:	d021      	beq.n	8006522 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 80064de:	4a1f      	ldr	r2, [pc, #124]	; (800655c <HAL_TIM_PWM_MspInit+0x90>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d02b      	beq.n	800653c <HAL_TIM_PWM_MspInit+0x70>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80064e4:	b004      	add	sp, #16
 80064e6:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80064e8:	2400      	movs	r4, #0
 80064ea:	9401      	str	r4, [sp, #4]
 80064ec:	4b1c      	ldr	r3, [pc, #112]	; (8006560 <HAL_TIM_PWM_MspInit+0x94>)
 80064ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064f0:	f042 0201 	orr.w	r2, r2, #1
 80064f4:	645a      	str	r2, [r3, #68]	; 0x44
 80064f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	9301      	str	r3, [sp, #4]
 80064fe:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006500:	4622      	mov	r2, r4
 8006502:	4621      	mov	r1, r4
 8006504:	2019      	movs	r0, #25
 8006506:	f001 f817 	bl	8007538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800650a:	2019      	movs	r0, #25
 800650c:	f001 f848 	bl	80075a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 6, 0);
 8006510:	4622      	mov	r2, r4
 8006512:	2106      	movs	r1, #6
 8006514:	201a      	movs	r0, #26
 8006516:	f001 f80f 	bl	8007538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800651a:	201a      	movs	r0, #26
 800651c:	f001 f840 	bl	80075a0 <HAL_NVIC_EnableIRQ>
 8006520:	e7e0      	b.n	80064e4 <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006522:	2300      	movs	r3, #0
 8006524:	9302      	str	r3, [sp, #8]
 8006526:	4b0e      	ldr	r3, [pc, #56]	; (8006560 <HAL_TIM_PWM_MspInit+0x94>)
 8006528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	641a      	str	r2, [r3, #64]	; 0x40
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	9302      	str	r3, [sp, #8]
 8006538:	9b02      	ldr	r3, [sp, #8]
 800653a:	e7d3      	b.n	80064e4 <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800653c:	2300      	movs	r3, #0
 800653e:	9303      	str	r3, [sp, #12]
 8006540:	4b07      	ldr	r3, [pc, #28]	; (8006560 <HAL_TIM_PWM_MspInit+0x94>)
 8006542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006544:	f042 0202 	orr.w	r2, r2, #2
 8006548:	641a      	str	r2, [r3, #64]	; 0x40
 800654a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	9303      	str	r3, [sp, #12]
 8006552:	9b03      	ldr	r3, [sp, #12]
}
 8006554:	e7c6      	b.n	80064e4 <HAL_TIM_PWM_MspInit+0x18>
 8006556:	bf00      	nop
 8006558:	40010000 	.word	0x40010000
 800655c:	40000400 	.word	0x40000400
 8006560:	40023800 	.word	0x40023800

08006564 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 8006564:	6802      	ldr	r2, [r0, #0]
 8006566:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <HAL_TIM_Base_MspInit+0x3c>)
 8006568:	429a      	cmp	r2, r3
 800656a:	d000      	beq.n	800656e <HAL_TIM_Base_MspInit+0xa>
 800656c:	4770      	bx	lr
{
 800656e:	b500      	push	{lr}
 8006570:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006572:	2200      	movs	r2, #0
 8006574:	9201      	str	r2, [sp, #4]
 8006576:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 800657a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800657c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8006580:	6459      	str	r1, [r3, #68]	; 0x44
 8006582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	9b01      	ldr	r3, [sp, #4]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 6, 0);
 800658c:	2106      	movs	r1, #6
 800658e:	201a      	movs	r0, #26
 8006590:	f000 ffd2 	bl	8007538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006594:	201a      	movs	r0, #26
 8006596:	f001 f803 	bl	80075a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800659a:	b003      	add	sp, #12
 800659c:	f85d fb04 	ldr.w	pc, [sp], #4
 80065a0:	40014800 	.word	0x40014800

080065a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80065a4:	b570      	push	{r4, r5, r6, lr}
 80065a6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065a8:	2300      	movs	r3, #0
 80065aa:	9305      	str	r3, [sp, #20]
 80065ac:	9306      	str	r3, [sp, #24]
 80065ae:	9307      	str	r3, [sp, #28]
 80065b0:	9308      	str	r3, [sp, #32]
 80065b2:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim->Instance==TIM1)
 80065b4:	6803      	ldr	r3, [r0, #0]
 80065b6:	4a32      	ldr	r2, [pc, #200]	; (8006680 <HAL_TIM_MspPostInit+0xdc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d007      	beq.n	80065cc <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 80065bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c0:	d01c      	beq.n	80065fc <HAL_TIM_MspPostInit+0x58>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 80065c2:	4a30      	ldr	r2, [pc, #192]	; (8006684 <HAL_TIM_MspPostInit+0xe0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d045      	beq.n	8006654 <HAL_TIM_MspPostInit+0xb0>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80065c8:	b00a      	add	sp, #40	; 0x28
 80065ca:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065cc:	2300      	movs	r3, #0
 80065ce:	9301      	str	r3, [sp, #4]
 80065d0:	4b2d      	ldr	r3, [pc, #180]	; (8006688 <HAL_TIM_MspPostInit+0xe4>)
 80065d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d4:	f042 0201 	orr.w	r2, r2, #1
 80065d8:	631a      	str	r2, [r3, #48]	; 0x30
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80065e4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80065e8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ea:	2302      	movs	r3, #2
 80065ec:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80065ee:	2301      	movs	r3, #1
 80065f0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065f2:	a905      	add	r1, sp, #20
 80065f4:	4825      	ldr	r0, [pc, #148]	; (800668c <HAL_TIM_MspPostInit+0xe8>)
 80065f6:	f001 f945 	bl	8007884 <HAL_GPIO_Init>
 80065fa:	e7e5      	b.n	80065c8 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065fc:	2400      	movs	r4, #0
 80065fe:	9402      	str	r4, [sp, #8]
 8006600:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8006604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006606:	f042 0201 	orr.w	r2, r2, #1
 800660a:	631a      	str	r2, [r3, #48]	; 0x30
 800660c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800660e:	f002 0201 	and.w	r2, r2, #1
 8006612:	9202      	str	r2, [sp, #8]
 8006614:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006616:	9403      	str	r4, [sp, #12]
 8006618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800661a:	f042 0202 	orr.w	r2, r2, #2
 800661e:	631a      	str	r2, [r3, #48]	; 0x30
 8006620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	9303      	str	r3, [sp, #12]
 8006628:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800662a:	2501      	movs	r5, #1
 800662c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800662e:	2602      	movs	r6, #2
 8006630:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006632:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006634:	a905      	add	r1, sp, #20
 8006636:	4815      	ldr	r0, [pc, #84]	; (800668c <HAL_TIM_MspPostInit+0xe8>)
 8006638:	f001 f924 	bl	8007884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800663c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8006640:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006642:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006644:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006646:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006648:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800664a:	a905      	add	r1, sp, #20
 800664c:	4810      	ldr	r0, [pc, #64]	; (8006690 <HAL_TIM_MspPostInit+0xec>)
 800664e:	f001 f919 	bl	8007884 <HAL_GPIO_Init>
 8006652:	e7b9      	b.n	80065c8 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006654:	2300      	movs	r3, #0
 8006656:	9304      	str	r3, [sp, #16]
 8006658:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <HAL_TIM_MspPostInit+0xe4>)
 800665a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800665c:	f042 0202 	orr.w	r2, r2, #2
 8006660:	631a      	str	r2, [r3, #48]	; 0x30
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	9304      	str	r3, [sp, #16]
 800666a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 800666c:	2331      	movs	r3, #49	; 0x31
 800666e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006670:	2302      	movs	r3, #2
 8006672:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006674:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006676:	a905      	add	r1, sp, #20
 8006678:	4805      	ldr	r0, [pc, #20]	; (8006690 <HAL_TIM_MspPostInit+0xec>)
 800667a:	f001 f903 	bl	8007884 <HAL_GPIO_Init>
}
 800667e:	e7a3      	b.n	80065c8 <HAL_TIM_MspPostInit+0x24>
 8006680:	40010000 	.word	0x40010000
 8006684:	40000400 	.word	0x40000400
 8006688:	40023800 	.word	0x40023800
 800668c:	40020000 	.word	0x40020000
 8006690:	40020400 	.word	0x40020400

08006694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006694:	b530      	push	{r4, r5, lr}
 8006696:	b08d      	sub	sp, #52	; 0x34
 8006698:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800669a:	2300      	movs	r3, #0
 800669c:	9307      	str	r3, [sp, #28]
 800669e:	9308      	str	r3, [sp, #32]
 80066a0:	9309      	str	r3, [sp, #36]	; 0x24
 80066a2:	930a      	str	r3, [sp, #40]	; 0x28
 80066a4:	930b      	str	r3, [sp, #44]	; 0x2c
  if(huart->Instance==USART1)
 80066a6:	6803      	ldr	r3, [r0, #0]
 80066a8:	4a6f      	ldr	r2, [pc, #444]	; (8006868 <HAL_UART_MspInit+0x1d4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d008      	beq.n	80066c0 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80066ae:	4a6f      	ldr	r2, [pc, #444]	; (800686c <HAL_UART_MspInit+0x1d8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d04b      	beq.n	800674c <HAL_UART_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 80066b4:	4a6e      	ldr	r2, [pc, #440]	; (8006870 <HAL_UART_MspInit+0x1dc>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	f000 808e 	beq.w	80067d8 <HAL_UART_MspInit+0x144>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80066bc:	b00d      	add	sp, #52	; 0x34
 80066be:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80066c0:	2500      	movs	r5, #0
 80066c2:	9501      	str	r5, [sp, #4]
 80066c4:	4b6b      	ldr	r3, [pc, #428]	; (8006874 <HAL_UART_MspInit+0x1e0>)
 80066c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066c8:	f042 0210 	orr.w	r2, r2, #16
 80066cc:	645a      	str	r2, [r3, #68]	; 0x44
 80066ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066d0:	f002 0210 	and.w	r2, r2, #16
 80066d4:	9201      	str	r2, [sp, #4]
 80066d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066d8:	9502      	str	r5, [sp, #8]
 80066da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066dc:	f042 0202 	orr.w	r2, r2, #2
 80066e0:	631a      	str	r2, [r3, #48]	; 0x30
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	9302      	str	r3, [sp, #8]
 80066ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80066ec:	23c0      	movs	r3, #192	; 0xc0
 80066ee:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f0:	2302      	movs	r3, #2
 80066f2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066f4:	2303      	movs	r3, #3
 80066f6:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80066f8:	2307      	movs	r3, #7
 80066fa:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066fc:	a907      	add	r1, sp, #28
 80066fe:	485e      	ldr	r0, [pc, #376]	; (8006878 <HAL_UART_MspInit+0x1e4>)
 8006700:	f001 f8c0 	bl	8007884 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006704:	485d      	ldr	r0, [pc, #372]	; (800687c <HAL_UART_MspInit+0x1e8>)
 8006706:	4b5e      	ldr	r3, [pc, #376]	; (8006880 <HAL_UART_MspInit+0x1ec>)
 8006708:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800670a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800670e:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006710:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006712:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006718:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800671a:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800671c:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800671e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006722:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006724:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006726:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006728:	f000 fffe 	bl	8007728 <HAL_DMA_Init>
 800672c:	b958      	cbnz	r0, 8006746 <HAL_UART_MspInit+0xb2>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800672e:	4b53      	ldr	r3, [pc, #332]	; (800687c <HAL_UART_MspInit+0x1e8>)
 8006730:	6363      	str	r3, [r4, #52]	; 0x34
 8006732:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 8006734:	2200      	movs	r2, #0
 8006736:	2108      	movs	r1, #8
 8006738:	2025      	movs	r0, #37	; 0x25
 800673a:	f000 fefd 	bl	8007538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800673e:	2025      	movs	r0, #37	; 0x25
 8006740:	f000 ff2e 	bl	80075a0 <HAL_NVIC_EnableIRQ>
 8006744:	e7ba      	b.n	80066bc <HAL_UART_MspInit+0x28>
      Error_Handler();
 8006746:	f7ff facf 	bl	8005ce8 <Error_Handler>
 800674a:	e7f0      	b.n	800672e <HAL_UART_MspInit+0x9a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800674c:	2500      	movs	r5, #0
 800674e:	9503      	str	r5, [sp, #12]
 8006750:	4b48      	ldr	r3, [pc, #288]	; (8006874 <HAL_UART_MspInit+0x1e0>)
 8006752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006754:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006758:	641a      	str	r2, [r3, #64]	; 0x40
 800675a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800675c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006760:	9203      	str	r2, [sp, #12]
 8006762:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006764:	9504      	str	r5, [sp, #16]
 8006766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006768:	f042 0201 	orr.w	r2, r2, #1
 800676c:	631a      	str	r2, [r3, #48]	; 0x30
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	9304      	str	r3, [sp, #16]
 8006776:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006778:	230c      	movs	r3, #12
 800677a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800677c:	2302      	movs	r3, #2
 800677e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006780:	2303      	movs	r3, #3
 8006782:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006784:	2307      	movs	r3, #7
 8006786:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006788:	a907      	add	r1, sp, #28
 800678a:	483e      	ldr	r0, [pc, #248]	; (8006884 <HAL_UART_MspInit+0x1f0>)
 800678c:	f001 f87a 	bl	8007884 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006790:	483d      	ldr	r0, [pc, #244]	; (8006888 <HAL_UART_MspInit+0x1f4>)
 8006792:	4b3e      	ldr	r3, [pc, #248]	; (800688c <HAL_UART_MspInit+0x1f8>)
 8006794:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006796:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800679a:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800679c:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800679e:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80067a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067a4:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067a6:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067a8:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80067aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067ae:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80067b0:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067b2:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80067b4:	f000 ffb8 	bl	8007728 <HAL_DMA_Init>
 80067b8:	b958      	cbnz	r0, 80067d2 <HAL_UART_MspInit+0x13e>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80067ba:	4b33      	ldr	r3, [pc, #204]	; (8006888 <HAL_UART_MspInit+0x1f4>)
 80067bc:	6363      	str	r3, [r4, #52]	; 0x34
 80067be:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 80067c0:	2200      	movs	r2, #0
 80067c2:	2108      	movs	r1, #8
 80067c4:	2026      	movs	r0, #38	; 0x26
 80067c6:	f000 feb7 	bl	8007538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80067ca:	2026      	movs	r0, #38	; 0x26
 80067cc:	f000 fee8 	bl	80075a0 <HAL_NVIC_EnableIRQ>
 80067d0:	e774      	b.n	80066bc <HAL_UART_MspInit+0x28>
      Error_Handler();
 80067d2:	f7ff fa89 	bl	8005ce8 <Error_Handler>
 80067d6:	e7f0      	b.n	80067ba <HAL_UART_MspInit+0x126>
    __HAL_RCC_USART6_CLK_ENABLE();
 80067d8:	2500      	movs	r5, #0
 80067da:	9505      	str	r5, [sp, #20]
 80067dc:	4b25      	ldr	r3, [pc, #148]	; (8006874 <HAL_UART_MspInit+0x1e0>)
 80067de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067e0:	f042 0220 	orr.w	r2, r2, #32
 80067e4:	645a      	str	r2, [r3, #68]	; 0x44
 80067e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067e8:	f002 0220 	and.w	r2, r2, #32
 80067ec:	9205      	str	r2, [sp, #20]
 80067ee:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067f0:	9506      	str	r5, [sp, #24]
 80067f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067f4:	f042 0201 	orr.w	r2, r2, #1
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30
 80067fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	9306      	str	r3, [sp, #24]
 8006802:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006804:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006808:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800680a:	2302      	movs	r3, #2
 800680c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800680e:	2303      	movs	r3, #3
 8006810:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006812:	2308      	movs	r3, #8
 8006814:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006816:	a907      	add	r1, sp, #28
 8006818:	481a      	ldr	r0, [pc, #104]	; (8006884 <HAL_UART_MspInit+0x1f0>)
 800681a:	f001 f833 	bl	8007884 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800681e:	481c      	ldr	r0, [pc, #112]	; (8006890 <HAL_UART_MspInit+0x1fc>)
 8006820:	4b1c      	ldr	r3, [pc, #112]	; (8006894 <HAL_UART_MspInit+0x200>)
 8006822:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006824:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8006828:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800682a:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800682c:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800682e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006832:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006834:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006836:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8006838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800683c:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800683e:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006840:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006842:	f000 ff71 	bl	8007728 <HAL_DMA_Init>
 8006846:	b958      	cbnz	r0, 8006860 <HAL_UART_MspInit+0x1cc>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006848:	4b11      	ldr	r3, [pc, #68]	; (8006890 <HAL_UART_MspInit+0x1fc>)
 800684a:	6363      	str	r3, [r4, #52]	; 0x34
 800684c:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 8, 0);
 800684e:	2200      	movs	r2, #0
 8006850:	2108      	movs	r1, #8
 8006852:	2047      	movs	r0, #71	; 0x47
 8006854:	f000 fe70 	bl	8007538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006858:	2047      	movs	r0, #71	; 0x47
 800685a:	f000 fea1 	bl	80075a0 <HAL_NVIC_EnableIRQ>
}
 800685e:	e72d      	b.n	80066bc <HAL_UART_MspInit+0x28>
      Error_Handler();
 8006860:	f7ff fa42 	bl	8005ce8 <Error_Handler>
 8006864:	e7f0      	b.n	8006848 <HAL_UART_MspInit+0x1b4>
 8006866:	bf00      	nop
 8006868:	40011000 	.word	0x40011000
 800686c:	40004400 	.word	0x40004400
 8006870:	40011400 	.word	0x40011400
 8006874:	40023800 	.word	0x40023800
 8006878:	40020400 	.word	0x40020400
 800687c:	20003fc4 	.word	0x20003fc4
 8006880:	40026440 	.word	0x40026440
 8006884:	40020000 	.word	0x40020000
 8006888:	20003e18 	.word	0x20003e18
 800688c:	40026088 	.word	0x40026088
 8006890:	20003e78 	.word	0x20003e78
 8006894:	40026428 	.word	0x40026428

08006898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006898:	b510      	push	{r4, lr}
 800689a:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800689c:	2200      	movs	r2, #0
 800689e:	4601      	mov	r1, r0
 80068a0:	2019      	movs	r0, #25
 80068a2:	f000 fe49 	bl	8007538 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80068a6:	2019      	movs	r0, #25
 80068a8:	f000 fe7a 	bl	80075a0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80068ac:	2400      	movs	r4, #0
 80068ae:	9401      	str	r4, [sp, #4]
 80068b0:	4b13      	ldr	r3, [pc, #76]	; (8006900 <HAL_InitTick+0x68>)
 80068b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80068b8:	645a      	str	r2, [r3, #68]	; 0x44
 80068ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80068c4:	a902      	add	r1, sp, #8
 80068c6:	a803      	add	r0, sp, #12
 80068c8:	f002 f9fa 	bl	8008cc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80068cc:	f002 f9e8 	bl	8008ca0 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80068d0:	4b0c      	ldr	r3, [pc, #48]	; (8006904 <HAL_InitTick+0x6c>)
 80068d2:	fba3 2300 	umull	r2, r3, r3, r0
 80068d6:	0c9b      	lsrs	r3, r3, #18
 80068d8:	3b01      	subs	r3, #1

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80068da:	480b      	ldr	r0, [pc, #44]	; (8006908 <HAL_InitTick+0x70>)
 80068dc:	4a0b      	ldr	r2, [pc, #44]	; (800690c <HAL_InitTick+0x74>)
 80068de:	6002      	str	r2, [r0, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 80068e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80068e4:	60c2      	str	r2, [r0, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80068e6:	6043      	str	r3, [r0, #4]
  htim10.Init.ClockDivision = 0;
 80068e8:	6104      	str	r4, [r0, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068ea:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80068ec:	f003 fa00 	bl	8009cf0 <HAL_TIM_Base_Init>
 80068f0:	b110      	cbz	r0, 80068f8 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
  }

  /* Return function status */
  return HAL_ERROR;
 80068f2:	2001      	movs	r0, #1
}
 80068f4:	b008      	add	sp, #32
 80068f6:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim10);
 80068f8:	4803      	ldr	r0, [pc, #12]	; (8006908 <HAL_InitTick+0x70>)
 80068fa:	f003 f8d9 	bl	8009ab0 <HAL_TIM_Base_Start_IT>
 80068fe:	e7f9      	b.n	80068f4 <HAL_InitTick+0x5c>
 8006900:	40023800 	.word	0x40023800
 8006904:	431bde83 	.word	0x431bde83
 8006908:	20004238 	.word	0x20004238
 800690c:	40014400 	.word	0x40014400

08006910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006910:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8006912:	f002 f9f5 	bl	8008d00 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006916:	bd08      	pop	{r3, pc}

08006918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006918:	e7fe      	b.n	8006918 <HardFault_Handler>

0800691a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800691a:	e7fe      	b.n	800691a <MemManage_Handler>

0800691c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800691c:	e7fe      	b.n	800691c <BusFault_Handler>

0800691e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800691e:	e7fe      	b.n	800691e <UsageFault_Handler>

08006920 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006920:	4770      	bx	lr

08006922 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006922:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006924:	2002      	movs	r0, #2
 8006926:	f001 f88d 	bl	8007a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800692a:	bd08      	pop	{r3, pc}

0800692c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800692c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaIrqHandler(&mbPort.dma);
 800692e:	4802      	ldr	r0, [pc, #8]	; (8006938 <DMA1_Stream5_IRQHandler+0xc>)
 8006930:	f7fe ffd8 	bl	80058e4 <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006934:	bd08      	pop	{r3, pc}
 8006936:	bf00      	nop
 8006938:	20003ce8 	.word	0x20003ce8

0800693c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800693c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800693e:	4803      	ldr	r0, [pc, #12]	; (800694c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006940:	f003 f8cb 	bl	8009ada <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8006944:	4802      	ldr	r0, [pc, #8]	; (8006950 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8006946:	f003 f8c8 	bl	8009ada <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800694a:	bd08      	pop	{r3, pc}
 800694c:	200040cc 	.word	0x200040cc
 8006950:	20004238 	.word	0x20004238

08006954 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006954:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006956:	4803      	ldr	r0, [pc, #12]	; (8006964 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8006958:	f003 f8bf 	bl	8009ada <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800695c:	4802      	ldr	r0, [pc, #8]	; (8006968 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800695e:	f003 f8bc 	bl	8009ada <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006962:	bd08      	pop	{r3, pc}
 8006964:	200040cc 	.word	0x200040cc
 8006968:	20004064 	.word	0x20004064

0800696c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800696c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_small_comm);
 800696e:	4802      	ldr	r0, [pc, #8]	; (8006978 <USART1_IRQHandler+0xc>)
 8006970:	f7fe ffa0 	bl	80058b4 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006974:	bd08      	pop	{r3, pc}
 8006976:	bf00      	nop
 8006978:	20003b8c 	.word	0x20003b8c

0800697c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800697c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(UARTDMA_UartIrqHandler(&mbPort.dma)){
 800697e:	4804      	ldr	r0, [pc, #16]	; (8006990 <USART2_IRQHandler+0x14>)
 8006980:	f7fe ff98 	bl	80058b4 <UARTDMA_UartIrqHandler>
 8006984:	b100      	cbz	r0, 8006988 <USART2_IRQHandler+0xc>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006986:	bd08      	pop	{r3, pc}
  HAL_UART_IRQHandler(&huart2);
 8006988:	4802      	ldr	r0, [pc, #8]	; (8006994 <USART2_IRQHandler+0x18>)
 800698a:	f003 fe45 	bl	800a618 <HAL_UART_IRQHandler>
 800698e:	e7fa      	b.n	8006986 <USART2_IRQHandler+0xa>
 8006990:	20003ce8 	.word	0x20003ce8
 8006994:	200041e4 	.word	0x200041e4

08006998 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006998:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800699a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800699e:	f001 f851 	bl	8007a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80069a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80069a6:	f001 f84d 	bl	8007a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80069aa:	bd08      	pop	{r3, pc}

080069ac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80069ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_big_comm);
 80069ae:	4802      	ldr	r0, [pc, #8]	; (80069b8 <DMA2_Stream1_IRQHandler+0xc>)
 80069b0:	f7fe ff98 	bl	80058e4 <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80069b4:	bd08      	pop	{r3, pc}
 80069b6:	bf00      	nop
 80069b8:	20003a78 	.word	0x20003a78

080069bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80069bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_small_comm);
 80069be:	4802      	ldr	r0, [pc, #8]	; (80069c8 <DMA2_Stream2_IRQHandler+0xc>)
 80069c0:	f7fe ff90 	bl	80058e4 <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80069c4:	bd08      	pop	{r3, pc}
 80069c6:	bf00      	nop
 80069c8:	20003b8c 	.word	0x20003b8c

080069cc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80069cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_big_comm);
 80069ce:	4802      	ldr	r0, [pc, #8]	; (80069d8 <USART6_IRQHandler+0xc>)
 80069d0:	f7fe ff70 	bl	80058b4 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80069d4:	bd08      	pop	{r3, pc}
 80069d6:	bf00      	nop
 80069d8:	20003a78 	.word	0x20003a78

080069dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80069dc:	b508      	push	{r3, lr}
 80069de:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80069e0:	4a0b      	ldr	r2, [pc, #44]	; (8006a10 <_sbrk+0x34>)
 80069e2:	6812      	ldr	r2, [r2, #0]
 80069e4:	b142      	cbz	r2, 80069f8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80069e6:	4a0a      	ldr	r2, [pc, #40]	; (8006a10 <_sbrk+0x34>)
 80069e8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80069ea:	4403      	add	r3, r0
 80069ec:	466a      	mov	r2, sp
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d806      	bhi.n	8006a00 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80069f2:	4a07      	ldr	r2, [pc, #28]	; (8006a10 <_sbrk+0x34>)
 80069f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80069f6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80069f8:	4a05      	ldr	r2, [pc, #20]	; (8006a10 <_sbrk+0x34>)
 80069fa:	4906      	ldr	r1, [pc, #24]	; (8006a14 <_sbrk+0x38>)
 80069fc:	6011      	str	r1, [r2, #0]
 80069fe:	e7f2      	b.n	80069e6 <_sbrk+0xa>
		errno = ENOMEM;
 8006a00:	f007 f926 	bl	800dc50 <__errno>
 8006a04:	230c      	movs	r3, #12
 8006a06:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a0c:	e7f3      	b.n	80069f6 <_sbrk+0x1a>
 8006a0e:	bf00      	nop
 8006a10:	20002c40 	.word	0x20002c40
 8006a14:	20004308 	.word	0x20004308

08006a18 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a18:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <SystemInit+0x18>)
 8006a1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a1e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a2a:	609a      	str	r2, [r3, #8]
#endif
}
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	e000ed00 	.word	0xe000ed00

08006a34 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8006a34:	b508      	push	{r3, lr}
	vTaskDelay(Time);
 8006a36:	f005 f93f 	bl	800bcb8 <vTaskDelay>
}
 8006a3a:	bd08      	pop	{r3, pc}

08006a3c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8006a3c:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8006a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a42:	460a      	mov	r2, r1
 8006a44:	4601      	mov	r1, r0
 8006a46:	4802      	ldr	r0, [pc, #8]	; (8006a50 <nRF24_SendSpi+0x14>)
 8006a48:	6800      	ldr	r0, [r0, #0]
 8006a4a:	f002 fd17 	bl	800947c <HAL_SPI_Transmit>
}
 8006a4e:	bd08      	pop	{r3, pc}
 8006a50:	20002c50 	.word	0x20002c50

08006a54 <nRF24_WriteRegister>:

	NRF24_CSN_HIGH;
}

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8006a54:	b500      	push	{lr}
 8006a56:	b083      	sub	sp, #12
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8006a58:	f040 0020 	orr.w	r0, r0, #32
 8006a5c:	f88d 0004 	strb.w	r0, [sp, #4]
	tmp[1] = val;
 8006a60:	f88d 1005 	strb.w	r1, [sp, #5]

	NRF24_CSN_LOW;
 8006a64:	f7fe fb34 	bl	80050d0 <NRF_ChipSelect>

	nRF24_SendSpi(tmp, 2);
 8006a68:	2102      	movs	r1, #2
 8006a6a:	a801      	add	r0, sp, #4
 8006a6c:	f7ff ffe6 	bl	8006a3c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8006a70:	f7fe fb40 	bl	80050f4 <NRF_ChipDeselect>
}
 8006a74:	b003      	add	sp, #12
 8006a76:	f85d fb04 	ldr.w	pc, [sp], #4

08006a7a <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8006a7a:	b570      	push	{r4, r5, r6, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	460d      	mov	r5, r1
 8006a80:	4616      	mov	r6, r2
	reg = NRF24_CMD_W_REGISTER | reg;
 8006a82:	f040 0020 	orr.w	r0, r0, #32
 8006a86:	ac02      	add	r4, sp, #8
 8006a88:	f804 0d01 	strb.w	r0, [r4, #-1]!

	NRF24_CSN_LOW;
 8006a8c:	f7fe fb20 	bl	80050d0 <NRF_ChipSelect>

	nRF24_SendSpi(&reg, 1);
 8006a90:	2101      	movs	r1, #1
 8006a92:	4620      	mov	r0, r4
 8006a94:	f7ff ffd2 	bl	8006a3c <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8006a98:	4631      	mov	r1, r6
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f7ff ffce 	bl	8006a3c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8006aa0:	f7fe fb28 	bl	80050f4 <NRF_ChipDeselect>
}
 8006aa4:	b002      	add	sp, #8
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}

08006aa8 <nRF24_ReadSpi>:
{
 8006aa8:	b508      	push	{r3, lr}
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8006aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006aae:	460a      	mov	r2, r1
 8006ab0:	4601      	mov	r1, r0
 8006ab2:	4802      	ldr	r0, [pc, #8]	; (8006abc <nRF24_ReadSpi+0x14>)
 8006ab4:	6800      	ldr	r0, [r0, #0]
 8006ab6:	f002 fec5 	bl	8009844 <HAL_SPI_Receive>
}
 8006aba:	bd08      	pop	{r3, pc}
 8006abc:	20002c50 	.word	0x20002c50

08006ac0 <nRF24_ReadRegister>:
{
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	ac04      	add	r4, sp, #16
 8006ac6:	f804 0d09 	strb.w	r0, [r4, #-9]!
	NRF24_CSN_LOW;
 8006aca:	f7fe fb01 	bl	80050d0 <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 8006ace:	2101      	movs	r1, #1
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f7ff ffb3 	bl	8006a3c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	f10d 000f 	add.w	r0, sp, #15
 8006adc:	f7ff ffe4 	bl	8006aa8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8006ae0:	f7fe fb08 	bl	80050f4 <NRF_ChipDeselect>
}
 8006ae4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8006ae8:	b004      	add	sp, #16
 8006aea:	bd10      	pop	{r4, pc}

08006aec <nRF24_ReadRegisters>:
{
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	460d      	mov	r5, r1
 8006af2:	4616      	mov	r6, r2
 8006af4:	ac02      	add	r4, sp, #8
 8006af6:	f804 0d01 	strb.w	r0, [r4, #-1]!
	NRF24_CSN_LOW;
 8006afa:	f7fe fae9 	bl	80050d0 <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 8006afe:	2101      	movs	r1, #1
 8006b00:	4620      	mov	r0, r4
 8006b02:	f7ff ff9b 	bl	8006a3c <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8006b06:	4631      	mov	r1, r6
 8006b08:	4628      	mov	r0, r5
 8006b0a:	f7ff ffcd 	bl	8006aa8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8006b0e:	f7fe faf1 	bl	80050f4 <NRF_ChipDeselect>
}
 8006b12:	b002      	add	sp, #8
 8006b14:	bd70      	pop	{r4, r5, r6, pc}

08006b16 <nRF24_ReadConfig>:

	nRF24_Delay_ms(1);
}

uint8_t nRF24_ReadConfig(void)
{
 8006b16:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8006b18:	2000      	movs	r0, #0
 8006b1a:	f7ff ffd1 	bl	8006ac0 <nRF24_ReadRegister>
}
 8006b1e:	bd08      	pop	{r3, pc}

08006b20 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8006b20:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8006b22:	4601      	mov	r1, r0
 8006b24:	2000      	movs	r0, #0
 8006b26:	f7ff ff95 	bl	8006a54 <nRF24_WriteRegister>
}
 8006b2a:	bd08      	pop	{r3, pc}

08006b2c <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8006b2c:	b510      	push	{r4, lr}
 8006b2e:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8006b30:	2006      	movs	r0, #6
 8006b32:	f7ff ffc5 	bl	8006ac0 <nRF24_ReadRegister>
	rf_setup &= 0xF8; // Clear PWR bits
 8006b36:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	rf_setup |= (lev<<1);
 8006b3a:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8006b3e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8006b42:	2006      	movs	r0, #6
 8006b44:	f7ff ff86 	bl	8006a54 <nRF24_WriteRegister>
}
 8006b48:	bd10      	pop	{r4, pc}

08006b4a <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8006b4a:	b510      	push	{r4, lr}
 8006b4c:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8006b4e:	2006      	movs	r0, #6
 8006b50:	f7ff ffb6 	bl	8006ac0 <nRF24_ReadRegister>
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8006b54:	f000 01d7 	and.w	r1, r0, #215	; 0xd7
	if(dr == NRF24_RF_DR_250KBPS)
 8006b58:	2c02      	cmp	r4, #2
 8006b5a:	d005      	beq.n	8006b68 <nRF24_SetDataRate+0x1e>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
	else if(dr == NRF24_RF_DR_2MBPS)
 8006b5c:	2c01      	cmp	r4, #1
 8006b5e:	d006      	beq.n	8006b6e <nRF24_SetDataRate+0x24>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8006b60:	2006      	movs	r0, #6
 8006b62:	f7ff ff77 	bl	8006a54 <nRF24_WriteRegister>
}
 8006b66:	bd10      	pop	{r4, pc}
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8006b68:	f041 0120 	orr.w	r1, r1, #32
 8006b6c:	e7f8      	b.n	8006b60 <nRF24_SetDataRate+0x16>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8006b6e:	f041 0108 	orr.w	r1, r1, #8
 8006b72:	e7f5      	b.n	8006b60 <nRF24_SetDataRate+0x16>

08006b74 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8006b74:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_STATUS));
 8006b76:	2007      	movs	r0, #7
 8006b78:	f7ff ffa2 	bl	8006ac0 <nRF24_ReadRegister>
}
 8006b7c:	bd08      	pop	{r3, pc}

08006b7e <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8006b7e:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_STATUS, st);
 8006b80:	4601      	mov	r1, r0
 8006b82:	2007      	movs	r0, #7
 8006b84:	f7ff ff66 	bl	8006a54 <nRF24_WriteRegister>
}
 8006b88:	bd08      	pop	{r3, pc}

08006b8a <nRF24_ReadFifoStatus>:
//
// FIFO Status
//

uint8_t nRF24_ReadFifoStatus(void)
{
 8006b8a:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 8006b8c:	2017      	movs	r0, #23
 8006b8e:	f7ff ff97 	bl	8006ac0 <nRF24_ReadRegister>
}
 8006b92:	bd08      	pop	{r3, pc}

08006b94 <nRF24_IsBitSetInFifoStatus>:
{
	nRF24_WriteRegister(NRF24_FIFO_STATUS, st);
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8006b94:	b510      	push	{r4, lr}
 8006b96:	4604      	mov	r4, r0
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8006b98:	f7ff fff7 	bl	8006b8a <nRF24_ReadFifoStatus>

	if(FifoStatus & (1<<Bit))
 8006b9c:	4120      	asrs	r0, r4
 8006b9e:	f010 0f01 	tst.w	r0, #1
 8006ba2:	d101      	bne.n	8006ba8 <nRF24_IsBitSetInFifoStatus+0x14>
	{
		return 1;
	}

	return 0;
 8006ba4:	2000      	movs	r0, #0
}
 8006ba6:	bd10      	pop	{r4, pc}
		return 1;
 8006ba8:	2001      	movs	r0, #1
 8006baa:	e7fc      	b.n	8006ba6 <nRF24_IsBitSetInFifoStatus+0x12>

08006bac <nRF24_IsRxEmpty>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_FULL);
}

uint8_t nRF24_IsRxEmpty(void)
{
 8006bac:	b508      	push	{r3, lr}
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
 8006bae:	2000      	movs	r0, #0
 8006bb0:	f7ff fff0 	bl	8006b94 <nRF24_IsBitSetInFifoStatus>
}
 8006bb4:	bd08      	pop	{r3, pc}

08006bb6 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8006bb6:	b510      	push	{r4, lr}
 8006bb8:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8006bba:	ac02      	add	r4, sp, #8
 8006bbc:	23e2      	movs	r3, #226	; 0xe2
 8006bbe:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8006bc2:	f7fe fa85 	bl	80050d0 <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f7ff ff37 	bl	8006a3c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8006bce:	f7fe fa91 	bl	80050f4 <NRF_ChipDeselect>
}
 8006bd2:	b002      	add	sp, #8
 8006bd4:	bd10      	pop	{r4, pc}

08006bd6 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8006bd6:	b510      	push	{r4, lr}
 8006bd8:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8006bda:	ac02      	add	r4, sp, #8
 8006bdc:	23e1      	movs	r3, #225	; 0xe1
 8006bde:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8006be2:	f7fe fa75 	bl	80050d0 <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8006be6:	2101      	movs	r1, #1
 8006be8:	4620      	mov	r0, r4
 8006bea:	f7ff ff27 	bl	8006a3c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8006bee:	f7fe fa81 	bl	80050f4 <NRF_ChipDeselect>
}
 8006bf2:	b002      	add	sp, #8
 8006bf4:	bd10      	pop	{r4, pc}
	...

08006bf8 <nRF24_TX_Mode>:
{
 8006bf8:	b508      	push	{r3, lr}
	NRF24_CE_LOW;
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c00:	480a      	ldr	r0, [pc, #40]	; (8006c2c <nRF24_TX_Mode+0x34>)
 8006c02:	f000 ff18 	bl	8007a36 <HAL_GPIO_WritePin>
	uint8_t config = nRF24_ReadConfig();
 8006c06:	f7ff ff86 	bl	8006b16 <nRF24_ReadConfig>
 8006c0a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	nRF24_WriteConfig(config);
 8006c0e:	f040 0002 	orr.w	r0, r0, #2
 8006c12:	f7ff ff85 	bl	8006b20 <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8006c16:	2070      	movs	r0, #112	; 0x70
 8006c18:	f7ff ffb1 	bl	8006b7e <nRF24_WriteStatus>
	nRF24_FlushRX();
 8006c1c:	f7ff ffcb 	bl	8006bb6 <nRF24_FlushRX>
	nRF24_FlushTX();
 8006c20:	f7ff ffd9 	bl	8006bd6 <nRF24_FlushTX>
	nRF24_Delay_ms(1);
 8006c24:	2001      	movs	r0, #1
 8006c26:	f7ff ff05 	bl	8006a34 <nRF24_Delay_ms>
}
 8006c2a:	bd08      	pop	{r3, pc}
 8006c2c:	40020400 	.word	0x40020400

08006c30 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8006c30:	b510      	push	{r4, lr}
 8006c32:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8006c34:	f7ff ff6f 	bl	8006b16 <nRF24_ReadConfig>

	if(onoff)
 8006c38:	b924      	cbnz	r4, 8006c44 <nRF24_EnableCRC+0x14>
		config |= (1<<NRF24_EN_CRC);
	else
		config &= ~(1<<NRF24_EN_CRC);
 8006c3a:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
	nRF24_WriteConfig(config);
 8006c3e:	f7ff ff6f 	bl	8006b20 <nRF24_WriteConfig>
}
 8006c42:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_EN_CRC);
 8006c44:	f040 0008 	orr.w	r0, r0, #8
 8006c48:	b2c0      	uxtb	r0, r0
 8006c4a:	e7f8      	b.n	8006c3e <nRF24_EnableCRC+0xe>

08006c4c <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8006c50:	f7ff ff61 	bl	8006b16 <nRF24_ReadConfig>
	if(crcl == NRF24_CRC_WIDTH_2B)
 8006c54:	2c01      	cmp	r4, #1
 8006c56:	d004      	beq.n	8006c62 <nRF24_SetCRCLength+0x16>
		config |= (1<<NRF24_CRCO);
	else
		config &= ~(1<<NRF24_CRCO);
 8006c58:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
	nRF24_WriteConfig(config);
 8006c5c:	f7ff ff60 	bl	8006b20 <nRF24_WriteConfig>
}
 8006c60:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_CRCO);
 8006c62:	f040 0004 	orr.w	r0, r0, #4
 8006c66:	b2c0      	uxtb	r0, r0
 8006c68:	e7f8      	b.n	8006c5c <nRF24_SetCRCLength+0x10>

08006c6a <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8006c6a:	b508      	push	{r3, lr}
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8006c6c:	f001 010f 	and.w	r1, r1, #15
 8006c70:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8006c74:	b2c9      	uxtb	r1, r1
 8006c76:	2004      	movs	r0, #4
 8006c78:	f7ff feec 	bl	8006a54 <nRF24_WriteRegister>
}
 8006c7c:	bd08      	pop	{r3, pc}

08006c7e <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8006c7e:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8006c80:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8006c84:	2005      	movs	r0, #5
 8006c86:	f7ff fee5 	bl	8006a54 <nRF24_WriteRegister>
}
 8006c8a:	bd08      	pop	{r3, pc}

08006c8c <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4604      	mov	r4, r0
 8006c90:	460d      	mov	r5, r1
	if(pipe > 5)
 8006c92:	2805      	cmp	r0, #5
 8006c94:	d900      	bls.n	8006c98 <nRF24_EnablePipe+0xc>
		pipe = 5; // Block too high pipe number
 8006c96:	2405      	movs	r4, #5
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8006c98:	2002      	movs	r0, #2
 8006c9a:	f7ff ff11 	bl	8006ac0 <nRF24_ReadRegister>
	if(onoff == 1)
 8006c9e:	2d01      	cmp	r5, #1
 8006ca0:	d008      	beq.n	8006cb4 <nRF24_EnablePipe+0x28>
		enable_pipe |= (1<<pipe);
	else
		enable_pipe &= ~(1<<pipe);
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	40a1      	lsls	r1, r4
 8006ca6:	ea20 0101 	bic.w	r1, r0, r1
 8006caa:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8006cac:	2002      	movs	r0, #2
 8006cae:	f7ff fed1 	bl	8006a54 <nRF24_WriteRegister>
}
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
		enable_pipe |= (1<<pipe);
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	40a1      	lsls	r1, r4
 8006cb8:	4301      	orrs	r1, r0
 8006cba:	b2c9      	uxtb	r1, r1
 8006cbc:	e7f6      	b.n	8006cac <nRF24_EnablePipe+0x20>

08006cbe <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8006cbe:	b538      	push	{r3, r4, r5, lr}
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	460d      	mov	r5, r1
	if(pipe > 5)
 8006cc4:	2805      	cmp	r0, #5
 8006cc6:	d900      	bls.n	8006cca <nRF24_AutoACK+0xc>
		pipe = 5; // Block too high pipe number
 8006cc8:	2405      	movs	r4, #5
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8006cca:	2001      	movs	r0, #1
 8006ccc:	f7ff fef8 	bl	8006ac0 <nRF24_ReadRegister>
	if(onoff == 1)
 8006cd0:	2d01      	cmp	r5, #1
 8006cd2:	d008      	beq.n	8006ce6 <nRF24_AutoACK+0x28>
		enaa |= (1<<pipe);
	else
		enaa &= ~(1<<pipe);
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	40a1      	lsls	r1, r4
 8006cd8:	ea20 0101 	bic.w	r1, r0, r1
 8006cdc:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8006cde:	2001      	movs	r0, #1
 8006ce0:	f7ff feb8 	bl	8006a54 <nRF24_WriteRegister>
}
 8006ce4:	bd38      	pop	{r3, r4, r5, pc}
		enaa |= (1<<pipe);
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	40a1      	lsls	r1, r4
 8006cea:	4301      	orrs	r1, r0
 8006cec:	b2c9      	uxtb	r1, r1
 8006cee:	e7f6      	b.n	8006cde <nRF24_AutoACK+0x20>

08006cf0 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8006cf0:	b508      	push	{r3, lr}
	if(size > 5)
 8006cf2:	2805      	cmp	r0, #5
 8006cf4:	d803      	bhi.n	8006cfe <nRF24_SetAddressWidth+0xe>
		size = 5; // Maximum are 5 bytes
	if(size < 3)
 8006cf6:	2802      	cmp	r0, #2
 8006cf8:	d802      	bhi.n	8006d00 <nRF24_SetAddressWidth+0x10>
		size = 3; // Minimum are 3 bytes
 8006cfa:	2003      	movs	r0, #3
 8006cfc:	e000      	b.n	8006d00 <nRF24_SetAddressWidth+0x10>
		size = 5; // Maximum are 5 bytes
 8006cfe:	2005      	movs	r0, #5
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8006d00:	1e81      	subs	r1, r0, #2
 8006d02:	f001 0103 	and.w	r1, r1, #3
 8006d06:	2003      	movs	r0, #3
 8006d08:	f7ff fea4 	bl	8006a54 <nRF24_WriteRegister>
}
 8006d0c:	bd08      	pop	{r3, pc}

08006d0e <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8006d0e:	b510      	push	{r4, lr}
 8006d10:	b082      	sub	sp, #8
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8006d12:	2801      	cmp	r0, #1
 8006d14:	d815      	bhi.n	8006d42 <nRF24_SetRXAddress+0x34>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8006d16:	2300      	movs	r3, #0
 8006d18:	e009      	b.n	8006d2e <nRF24_SetRXAddress+0x20>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8006d1a:	f1c3 0204 	rsb	r2, r3, #4
 8006d1e:	5ccc      	ldrb	r4, [r1, r3]
 8006d20:	f10d 0c08 	add.w	ip, sp, #8
 8006d24:	4462      	add	r2, ip
 8006d26:	f802 4c08 	strb.w	r4, [r2, #-8]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d9f3      	bls.n	8006d1a <nRF24_SetRXAddress+0xc>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8006d32:	300a      	adds	r0, #10
 8006d34:	2205      	movs	r2, #5
 8006d36:	4669      	mov	r1, sp
 8006d38:	b2c0      	uxtb	r0, r0
 8006d3a:	f7ff fe9e 	bl	8006a7a <nRF24_WriteRegisters>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
}
 8006d3e:	b002      	add	sp, #8
 8006d40:	bd10      	pop	{r4, pc}
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8006d42:	300a      	adds	r0, #10
 8006d44:	7909      	ldrb	r1, [r1, #4]
 8006d46:	b2c0      	uxtb	r0, r0
 8006d48:	f7ff fe84 	bl	8006a54 <nRF24_WriteRegister>
}
 8006d4c:	e7f7      	b.n	8006d3e <nRF24_SetRXAddress+0x30>
	...

08006d50 <nRF24_RX_Mode>:
{
 8006d50:	b510      	push	{r4, lr}
	uint8_t config = nRF24_ReadConfig();
 8006d52:	f7ff fee0 	bl	8006b16 <nRF24_ReadConfig>
 8006d56:	4604      	mov	r4, r0
	nRF24_SetRXAddress(0, addr_p0_backup);
 8006d58:	490c      	ldr	r1, [pc, #48]	; (8006d8c <nRF24_RX_Mode+0x3c>)
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	f7ff ffd7 	bl	8006d0e <nRF24_SetRXAddress>
	config |= (1<<NRF24_PRIM_RX);
 8006d60:	f044 0003 	orr.w	r0, r4, #3
	nRF24_WriteConfig(config);
 8006d64:	b2c0      	uxtb	r0, r0
 8006d66:	f7ff fedb 	bl	8006b20 <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8006d6a:	2070      	movs	r0, #112	; 0x70
 8006d6c:	f7ff ff07 	bl	8006b7e <nRF24_WriteStatus>
	nRF24_FlushRX();
 8006d70:	f7ff ff21 	bl	8006bb6 <nRF24_FlushRX>
	nRF24_FlushTX();
 8006d74:	f7ff ff2f 	bl	8006bd6 <nRF24_FlushTX>
	NRF24_CE_HIGH;
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d7e:	4804      	ldr	r0, [pc, #16]	; (8006d90 <nRF24_RX_Mode+0x40>)
 8006d80:	f000 fe59 	bl	8007a36 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8006d84:	2001      	movs	r0, #1
 8006d86:	f7ff fe55 	bl	8006a34 <nRF24_Delay_ms>
}
 8006d8a:	bd10      	pop	{r4, pc}
 8006d8c:	20002c48 	.word	0x20002c48
 8006d90:	40020400 	.word	0x40020400

08006d94 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8006d94:	b510      	push	{r4, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	4604      	mov	r4, r0
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8006d9a:	2205      	movs	r2, #5
 8006d9c:	4669      	mov	r1, sp
 8006d9e:	200a      	movs	r0, #10
 8006da0:	f7ff fea4 	bl	8006aec <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8006da4:	2300      	movs	r3, #0
 8006da6:	e009      	b.n	8006dbc <nRF24_SetTXAddress+0x28>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8006da8:	f1c3 0204 	rsb	r2, r3, #4
 8006dac:	a902      	add	r1, sp, #8
 8006dae:	4419      	add	r1, r3
 8006db0:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8006db4:	490f      	ldr	r1, [pc, #60]	; (8006df4 <nRF24_SetTXAddress+0x60>)
 8006db6:	5488      	strb	r0, [r1, r2]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8006db8:	3301      	adds	r3, #1
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b04      	cmp	r3, #4
 8006dbe:	d9f3      	bls.n	8006da8 <nRF24_SetTXAddress+0x14>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e008      	b.n	8006dd6 <nRF24_SetTXAddress+0x42>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8006dc4:	f1c3 0204 	rsb	r2, r3, #4
 8006dc8:	5ce1      	ldrb	r1, [r4, r3]
 8006dca:	a802      	add	r0, sp, #8
 8006dcc:	4402      	add	r2, r0
 8006dce:	f802 1c08 	strb.w	r1, [r2, #-8]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d9f4      	bls.n	8006dc4 <nRF24_SetTXAddress+0x30>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8006dda:	2205      	movs	r2, #5
 8006ddc:	4669      	mov	r1, sp
 8006dde:	200a      	movs	r0, #10
 8006de0:	f7ff fe4b 	bl	8006a7a <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8006de4:	2205      	movs	r2, #5
 8006de6:	4669      	mov	r1, sp
 8006de8:	2010      	movs	r0, #16
 8006dea:	f7ff fe46 	bl	8006a7a <nRF24_WriteRegisters>
}
 8006dee:	b002      	add	sp, #8
 8006df0:	bd10      	pop	{r4, pc}
 8006df2:	bf00      	nop
 8006df4:	20002c48 	.word	0x20002c48

08006df8 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8006df8:	b508      	push	{r3, lr}
	uint8_t status = nRF24_ReadStatus();
 8006dfa:	f7ff febb 	bl	8006b74 <nRF24_ReadStatus>
	status |= (7<<4); // Clear bits 4, 5, 6.
 8006dfe:	f040 0070 	orr.w	r0, r0, #112	; 0x70
	nRF24_WriteStatus(status);
 8006e02:	b2c0      	uxtb	r0, r0
 8006e04:	f7ff febb 	bl	8006b7e <nRF24_WriteStatus>
}
 8006e08:	bd08      	pop	{r3, pc}

08006e0a <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8006e0a:	b508      	push	{r3, lr}
    uint8_t result = 0;

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8006e0c:	2060      	movs	r0, #96	; 0x60
 8006e0e:	f7ff fe57 	bl	8006ac0 <nRF24_ReadRegister>

    if (result > 32) // Something went wrong :)
 8006e12:	2820      	cmp	r0, #32
 8006e14:	d800      	bhi.n	8006e18 <nRF24_GetDynamicPayloadSize+0xe>
        nRF24_FlushRX();
        nRF24_Delay_ms(2);
        return 0;
    }
    return result;
}
 8006e16:	bd08      	pop	{r3, pc}
        nRF24_FlushRX();
 8006e18:	f7ff fecd 	bl	8006bb6 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8006e1c:	2002      	movs	r0, #2
 8006e1e:	f7ff fe09 	bl	8006a34 <nRF24_Delay_ms>
        return 0;
 8006e22:	2000      	movs	r0, #0
 8006e24:	e7f7      	b.n	8006e16 <nRF24_GetDynamicPayloadSize+0xc>

08006e26 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8006e26:	b510      	push	{r4, lr}
 8006e28:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8006e2a:	f7ff fe74 	bl	8006b16 <nRF24_ReadConfig>

	if(!onoff)
 8006e2e:	b124      	cbz	r4, 8006e3a <nRF24_EnableRXDataReadyIRQ+0x14>
		config |= (1<<NRF24_RX_DR);
	else
		config &= ~(1<<NRF24_RX_DR);
 8006e30:	f000 00bf 	and.w	r0, r0, #191	; 0xbf

	nRF24_WriteConfig(config);
 8006e34:	f7ff fe74 	bl	8006b20 <nRF24_WriteConfig>
}
 8006e38:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_RX_DR);
 8006e3a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006e3e:	b2c0      	uxtb	r0, r0
 8006e40:	e7f8      	b.n	8006e34 <nRF24_EnableRXDataReadyIRQ+0xe>

08006e42 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8006e42:	b510      	push	{r4, lr}
 8006e44:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8006e46:	f7ff fe66 	bl	8006b16 <nRF24_ReadConfig>

	if(!onoff)
 8006e4a:	b124      	cbz	r4, 8006e56 <nRF24_EnableTXDataSentIRQ+0x14>
		config |= (1<<NRF24_TX_DS);
	else
		config &= ~(1<<NRF24_TX_DS);
 8006e4c:	f000 00df 	and.w	r0, r0, #223	; 0xdf

	nRF24_WriteConfig(config);
 8006e50:	f7ff fe66 	bl	8006b20 <nRF24_WriteConfig>
}
 8006e54:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_TX_DS);
 8006e56:	f040 0020 	orr.w	r0, r0, #32
 8006e5a:	b2c0      	uxtb	r0, r0
 8006e5c:	e7f8      	b.n	8006e50 <nRF24_EnableTXDataSentIRQ+0xe>

08006e5e <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8006e5e:	b510      	push	{r4, lr}
 8006e60:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8006e62:	f7ff fe58 	bl	8006b16 <nRF24_ReadConfig>

	if(!onoff)
 8006e66:	b124      	cbz	r4, 8006e72 <nRF24_EnableMaxRetransmitIRQ+0x14>
		config |= (1<<NRF24_MAX_RT);
	else
		config &= ~(1<<NRF24_MAX_RT);
 8006e68:	f000 00ef 	and.w	r0, r0, #239	; 0xef

	nRF24_WriteConfig(config);
 8006e6c:	f7ff fe58 	bl	8006b20 <nRF24_WriteConfig>
}
 8006e70:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_MAX_RT);
 8006e72:	f040 0010 	orr.w	r0, r0, #16
 8006e76:	b2c0      	uxtb	r0, r0
 8006e78:	e7f8      	b.n	8006e6c <nRF24_EnableMaxRetransmitIRQ+0xe>

08006e7a <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8006e7a:	b508      	push	{r3, lr}
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8006e7c:	460a      	mov	r2, r1
 8006e7e:	4601      	mov	r1, r0
 8006e80:	20a0      	movs	r0, #160	; 0xa0
 8006e82:	f7ff fdfa 	bl	8006a7a <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 8006e86:	bd08      	pop	{r3, pc}

08006e88 <nRF24_ReadRXPaylaod>:
		status = nRF24_ReadStatus();
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	460d      	mov	r5, r1
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8006e8e:	f7ff ffbc 	bl	8006e0a <nRF24_GetDynamicPayloadSize>
 8006e92:	4602      	mov	r2, r0
 8006e94:	7028      	strb	r0, [r5, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8006e96:	4621      	mov	r1, r4
 8006e98:	2061      	movs	r0, #97	; 0x61
 8006e9a:	f7ff fe27 	bl	8006aec <nRF24_ReadRegisters>
#else
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	2007      	movs	r0, #7
 8006ea2:	f7ff fdd7 	bl	8006a54 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 8006ea6:	f7ff fe65 	bl	8006b74 <nRF24_ReadStatus>
 8006eaa:	f010 0f20 	tst.w	r0, #32
 8006eae:	d100      	bne.n	8006eb2 <nRF24_ReadRXPaylaod+0x2a>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8006eb0:	bd38      	pop	{r3, r4, r5, pc}
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8006eb2:	2120      	movs	r1, #32
 8006eb4:	2007      	movs	r0, #7
 8006eb6:	f7ff fdcd 	bl	8006a54 <nRF24_WriteRegister>
}
 8006eba:	e7f9      	b.n	8006eb0 <nRF24_ReadRXPaylaod+0x28>

08006ebc <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
	if(Size > 32)
 8006ebc:	2920      	cmp	r1, #32
 8006ebe:	d901      	bls.n	8006ec4 <nRF24_SendPacket+0x8>
		return NRF24_NO_TRANSMITTED_PACKET;
 8006ec0:	2001      	movs	r0, #1
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_WaitTX();
#endif

	return NRF24_TRANSMITTED_PACKET;
}
 8006ec2:	4770      	bx	lr
{
 8006ec4:	b508      	push	{r3, lr}
	nRF24_WriteTXPayload(Data, Size);
 8006ec6:	f7ff ffd8 	bl	8006e7a <nRF24_WriteTXPayload>
	return NRF24_TRANSMITTED_PACKET;
 8006eca:	2000      	movs	r0, #0
}
 8006ecc:	bd08      	pop	{r3, pc}
	...

08006ed0 <nRF24_IsSomtehingToSend>:
{
	return RB_ElementsAvailable(&RXBuffer)?1:0;
}

uint8_t nRF24_IsSomtehingToSend(void)
{
 8006ed0:	b508      	push	{r3, lr}
	return RB_ElementsAvailable(&TXBuffer)?1:0;
 8006ed2:	4803      	ldr	r0, [pc, #12]	; (8006ee0 <nRF24_IsSomtehingToSend+0x10>)
 8006ed4:	f7fd f96d 	bl	80041b2 <RB_ElementsAvailable>
}
 8006ed8:	3000      	adds	r0, #0
 8006eda:	bf18      	it	ne
 8006edc:	2001      	movne	r0, #1
 8006ede:	bd08      	pop	{r3, pc}
 8006ee0:	20004278 	.word	0x20004278

08006ee4 <nRF24_ReceivePacket>:
	return nRF24_IsSomtehingToRead();
#endif
}

nRF24_RX_Status nRF24_ReceivePacket(uint8_t* Data, uint8_t *Size)
{
 8006ee4:	b508      	push	{r3, lr}
#if (NRF24_USE_INTERRUPT == 0)
	if(nRF24_RXAvailable())
	{
#endif
		nRF24_ReadRXPaylaod(Data, Size);
 8006ee6:	f7ff ffcf 	bl	8006e88 <nRF24_ReadRXPaylaod>
#if (NRF24_USE_INTERRUPT == 0)
	}
	return NRF24_NO_RECEIVED_PACKET;
#endif

}
 8006eea:	2000      	movs	r0, #0
 8006eec:	bd08      	pop	{r3, pc}
	...

08006ef0 <nRF24_CheckTXAndSend>:
	return NRF24_TRANSMITTED_PACKET;
#endif
}
#if (NRF24_USE_RINGBUFFER == 1)
void nRF24_CheckTXAndSend(void)
{
 8006ef0:	b530      	push	{r4, r5, lr}
 8006ef2:	b089      	sub	sp, #36	; 0x24
	uint8_t i, DataCounter;
	uint8_t TXPacket[32];

	if(nRF24_IsSomtehingToSend() && Nrf24TXFreeFlag)
 8006ef4:	f7ff ffec 	bl	8006ed0 <nRF24_IsSomtehingToSend>
 8006ef8:	b110      	cbz	r0, 8006f00 <nRF24_CheckTXAndSend+0x10>
 8006efa:	4b19      	ldr	r3, [pc, #100]	; (8006f60 <nRF24_CheckTXAndSend+0x70>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	b91b      	cbnz	r3, 8006f08 <nRF24_CheckTXAndSend+0x18>
		nRF24_SendPacket(TXPacket, DataCounter);
		NRF24_CE_HIGH;
		nRF24_Delay_ms(1);
		NRF24_CE_LOW;
	}else{
		nRF24_RX_Mode();
 8006f00:	f7ff ff26 	bl	8006d50 <nRF24_RX_Mode>
	}
}
 8006f04:	b009      	add	sp, #36	; 0x24
 8006f06:	bd30      	pop	{r4, r5, pc}
		nRF24_TX_Mode();
 8006f08:	f7ff fe76 	bl	8006bf8 <nRF24_TX_Mode>
		Nrf24TXFreeFlag = 0;
 8006f0c:	4b14      	ldr	r3, [pc, #80]	; (8006f60 <nRF24_CheckTXAndSend+0x70>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]
		DataCounter = RB_ElementsAvailable(&TXBuffer);
 8006f12:	4814      	ldr	r0, [pc, #80]	; (8006f64 <nRF24_CheckTXAndSend+0x74>)
 8006f14:	f7fd f94d 	bl	80041b2 <RB_ElementsAvailable>
 8006f18:	4605      	mov	r5, r0
		if(DataCounter > 32)
 8006f1a:	2820      	cmp	r0, #32
 8006f1c:	d900      	bls.n	8006f20 <nRF24_CheckTXAndSend+0x30>
			DataCounter = 32; // Max Payload
 8006f1e:	2520      	movs	r5, #32
		for(i = 0; i < DataCounter; i++)
 8006f20:	2400      	movs	r4, #0
 8006f22:	e006      	b.n	8006f32 <nRF24_CheckTXAndSend+0x42>
			RB_ReadFromBuffer(&TXBuffer, &TXPacket[i]);
 8006f24:	eb0d 0104 	add.w	r1, sp, r4
 8006f28:	480e      	ldr	r0, [pc, #56]	; (8006f64 <nRF24_CheckTXAndSend+0x74>)
 8006f2a:	f7fd f92b 	bl	8004184 <RB_ReadFromBuffer>
		for(i = 0; i < DataCounter; i++)
 8006f2e:	3401      	adds	r4, #1
 8006f30:	b2e4      	uxtb	r4, r4
 8006f32:	42ac      	cmp	r4, r5
 8006f34:	d3f6      	bcc.n	8006f24 <nRF24_CheckTXAndSend+0x34>
		nRF24_SendPacket(TXPacket, DataCounter);
 8006f36:	4629      	mov	r1, r5
 8006f38:	4668      	mov	r0, sp
 8006f3a:	f7ff ffbf 	bl	8006ebc <nRF24_SendPacket>
		NRF24_CE_HIGH;
 8006f3e:	4c0a      	ldr	r4, [pc, #40]	; (8006f68 <nRF24_CheckTXAndSend+0x78>)
 8006f40:	2201      	movs	r2, #1
 8006f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 fd75 	bl	8007a36 <HAL_GPIO_WritePin>
		nRF24_Delay_ms(1);
 8006f4c:	2001      	movs	r0, #1
 8006f4e:	f7ff fd71 	bl	8006a34 <nRF24_Delay_ms>
		NRF24_CE_LOW;
 8006f52:	2200      	movs	r2, #0
 8006f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f000 fd6c 	bl	8007a36 <HAL_GPIO_WritePin>
 8006f5e:	e7d1      	b.n	8006f04 <nRF24_CheckTXAndSend+0x14>
 8006f60:	20002c45 	.word	0x20002c45
 8006f64:	20004278 	.word	0x20004278
 8006f68:	40020400 	.word	0x40020400

08006f6c <nRF24_ReceiveData>:
#endif
#if (NRF24_USE_INTERRUPT == 1)
void nRF24_ReceiveData(void)
{
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	b08a      	sub	sp, #40	; 0x28
 8006f70:	e00f      	b.n	8006f92 <nRF24_ReceiveData+0x26>
	{
		nRF24_ReceivePacket(RXPacket, &DataCounter);

		for(i = 0; i < DataCounter; i++)
		{
			RB_WriteToBuffer(&RXBuffer, RXPacket[i]);
 8006f72:	ab0a      	add	r3, sp, #40	; 0x28
 8006f74:	4423      	add	r3, r4
 8006f76:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 8006f7a:	480a      	ldr	r0, [pc, #40]	; (8006fa4 <nRF24_ReceiveData+0x38>)
 8006f7c:	f7fd f8e5 	bl	800414a <RB_WriteToBuffer>
		for(i = 0; i < DataCounter; i++)
 8006f80:	3401      	adds	r4, #1
 8006f82:	b2e4      	uxtb	r4, r4
 8006f84:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8006f88:	42a3      	cmp	r3, r4
 8006f8a:	d8f2      	bhi.n	8006f72 <nRF24_ReceiveData+0x6>
		}

	}while(!nRF24_IsRxEmpty());
 8006f8c:	f7ff fe0e 	bl	8006bac <nRF24_IsRxEmpty>
 8006f90:	b930      	cbnz	r0, 8006fa0 <nRF24_ReceiveData+0x34>
		nRF24_ReceivePacket(RXPacket, &DataCounter);
 8006f92:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8006f96:	a801      	add	r0, sp, #4
 8006f98:	f7ff ffa4 	bl	8006ee4 <nRF24_ReceivePacket>
		for(i = 0; i < DataCounter; i++)
 8006f9c:	2400      	movs	r4, #0
 8006f9e:	e7f1      	b.n	8006f84 <nRF24_ReceiveData+0x18>
#endif
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_ReceivePacket(RXBuffer, &RXDataCounter);
#endif
}
 8006fa0:	b00a      	add	sp, #40	; 0x28
 8006fa2:	bd10      	pop	{r4, pc}
 8006fa4:	2000429c 	.word	0x2000429c

08006fa8 <nRF24_IRQ_Read>:
{
	Nrf24InterruptFlag = 1;
}

void nRF24_IRQ_Read(void)
{
 8006fa8:	b508      	push	{r3, lr}
	if(Nrf24InterruptFlag == 1)
 8006faa:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <nRF24_IRQ_Read+0x54>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d000      	beq.n	8006fb6 <nRF24_IRQ_Read+0xe>
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
		}

		nRF24_WriteStatus(ClearIrq);
	}
}
 8006fb4:	bd08      	pop	{r3, pc}
		Nrf24InterruptFlag = 0;
 8006fb6:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <nRF24_IRQ_Read+0x54>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	701a      	strb	r2, [r3, #0]
		uint8_t status = nRF24_ReadStatus();
 8006fbc:	f7ff fdda 	bl	8006b74 <nRF24_ReadStatus>
 8006fc0:	4603      	mov	r3, r0
		if ((status & (1 << NRF24_RX_DR)))
 8006fc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fc6:	d016      	beq.n	8006ff6 <nRF24_IRQ_Read+0x4e>
			nrf24_rx_flag = 1;
 8006fc8:	4a0d      	ldr	r2, [pc, #52]	; (8007000 <nRF24_IRQ_Read+0x58>)
 8006fca:	2101      	movs	r1, #1
 8006fcc:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8006fce:	2040      	movs	r0, #64	; 0x40
		if ((status & (1 << NRF24_TX_DS)))
 8006fd0:	f013 0f20 	tst.w	r3, #32
 8006fd4:	d004      	beq.n	8006fe0 <nRF24_IRQ_Read+0x38>
			nrf24_tx_flag = 1;
 8006fd6:	4a0b      	ldr	r2, [pc, #44]	; (8007004 <nRF24_IRQ_Read+0x5c>)
 8006fd8:	2101      	movs	r1, #1
 8006fda:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8006fdc:	f040 0020 	orr.w	r0, r0, #32
		if ((status & (1 << NRF24_MAX_RT)))
 8006fe0:	f013 0f10 	tst.w	r3, #16
 8006fe4:	d004      	beq.n	8006ff0 <nRF24_IRQ_Read+0x48>
			nrf24_mr_flag = 1;
 8006fe6:	4b08      	ldr	r3, [pc, #32]	; (8007008 <nRF24_IRQ_Read+0x60>)
 8006fe8:	2201      	movs	r2, #1
 8006fea:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 8006fec:	f040 0010 	orr.w	r0, r0, #16
		nRF24_WriteStatus(ClearIrq);
 8006ff0:	f7ff fdc5 	bl	8006b7e <nRF24_WriteStatus>
}
 8006ff4:	e7de      	b.n	8006fb4 <nRF24_IRQ_Read+0xc>
		uint8_t ClearIrq = 0;
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	e7ea      	b.n	8006fd0 <nRF24_IRQ_Read+0x28>
 8006ffa:	bf00      	nop
 8006ffc:	20002c44 	.word	0x20002c44
 8007000:	20002c55 	.word	0x20002c55
 8007004:	20002c56 	.word	0x20002c56
 8007008:	20002c54 	.word	0x20002c54

0800700c <nRF24_EventRxCallback>:
//

__weak void nRF24_EventRxCallback(void)
{

}
 800700c:	4770      	bx	lr

0800700e <nRF24_EventTxCallback>:

__weak void nRF24_EventTxCallback(void)
{

}
 800700e:	4770      	bx	lr

08007010 <nRF24_EventMrCallback>:

__weak void nRF24_EventMrCallback(void)
{

}
 8007010:	4770      	bx	lr
	...

08007014 <nRF24_Event>:

void nRF24_Event(void)
{
 8007014:	b508      	push	{r3, lr}
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8007016:	f7ff ffc7 	bl	8006fa8 <nRF24_IRQ_Read>

#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_CheckTXAndSend();
 800701a:	f7ff ff69 	bl	8006ef0 <nRF24_CheckTXAndSend>
#endif

	if(nrf24_rx_flag)
 800701e:	4b10      	ldr	r3, [pc, #64]	; (8007060 <nRF24_Event+0x4c>)
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	b933      	cbnz	r3, 8007032 <nRF24_Event+0x1e>
#endif
		nRF24_EventRxCallback();
		nrf24_rx_flag = 0;
	}

	if(nrf24_tx_flag)
 8007024:	4b0f      	ldr	r3, [pc, #60]	; (8007064 <nRF24_Event+0x50>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	b95b      	cbnz	r3, 8007042 <nRF24_Event+0x2e>
#endif
		nRF24_EventTxCallback();
		nrf24_tx_flag = 0;
	}

	if(nrf24_mr_flag)
 800702a:	4b0f      	ldr	r3, [pc, #60]	; (8007068 <nRF24_Event+0x54>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	b98b      	cbnz	r3, 8007054 <nRF24_Event+0x40>
	{
		nRF24_EventMrCallback();
		nrf24_mr_flag = 0;
	}
}
 8007030:	bd08      	pop	{r3, pc}
		nRF24_ReceiveData();
 8007032:	f7ff ff9b 	bl	8006f6c <nRF24_ReceiveData>
		nRF24_EventRxCallback();
 8007036:	f7ff ffe9 	bl	800700c <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 800703a:	4b09      	ldr	r3, [pc, #36]	; (8007060 <nRF24_Event+0x4c>)
 800703c:	2200      	movs	r2, #0
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	e7f0      	b.n	8007024 <nRF24_Event+0x10>
		Nrf24TXFreeFlag = 1;
 8007042:	4b0a      	ldr	r3, [pc, #40]	; (800706c <nRF24_Event+0x58>)
 8007044:	2201      	movs	r2, #1
 8007046:	701a      	strb	r2, [r3, #0]
		nRF24_EventTxCallback();
 8007048:	f7ff ffe1 	bl	800700e <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 800704c:	4b05      	ldr	r3, [pc, #20]	; (8007064 <nRF24_Event+0x50>)
 800704e:	2200      	movs	r2, #0
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e7ea      	b.n	800702a <nRF24_Event+0x16>
		nRF24_EventMrCallback();
 8007054:	f7ff ffdc 	bl	8007010 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8007058:	4b03      	ldr	r3, [pc, #12]	; (8007068 <nRF24_Event+0x54>)
 800705a:	2200      	movs	r2, #0
 800705c:	701a      	strb	r2, [r3, #0]
}
 800705e:	e7e7      	b.n	8007030 <nRF24_Event+0x1c>
 8007060:	20002c55 	.word	0x20002c55
 8007064:	20002c56 	.word	0x20002c56
 8007068:	20002c54 	.word	0x20002c54
 800706c:	20002c45 	.word	0x20002c45

08007070 <nRF24_Init>:
#endif

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8007070:	b508      	push	{r3, lr}
	hspi_nrf = hspi;
 8007072:	4b31      	ldr	r3, [pc, #196]	; (8007138 <nRF24_Init+0xc8>)
 8007074:	6018      	str	r0, [r3, #0]

	NRF24_CE_LOW;
 8007076:	2200      	movs	r2, #0
 8007078:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800707c:	482f      	ldr	r0, [pc, #188]	; (800713c <nRF24_Init+0xcc>)
 800707e:	f000 fcda 	bl	8007a36 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8007082:	f7fe f837 	bl	80050f4 <NRF_ChipDeselect>

	nRF24_Delay_ms(5); // Wait for radio power up
 8007086:	2005      	movs	r0, #5
 8007088:	f7ff fcd4 	bl	8006a34 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 800708c:	2003      	movs	r0, #3
 800708e:	f7ff fd4d 	bl	8006b2c <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8007092:	2002      	movs	r0, #2
 8007094:	f7ff fd59 	bl	8006b4a <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8007098:	2001      	movs	r0, #1
 800709a:	f7ff fdc9 	bl	8006c30 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_2B); // CRC Length 1 byte
 800709e:	2001      	movs	r0, #1
 80070a0:	f7ff fdd4 	bl	8006c4c <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 80070a4:	2107      	movs	r1, #7
 80070a6:	2004      	movs	r0, #4
 80070a8:	f7ff fddf 	bl	8006c6a <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 80070ac:	201d      	movs	r0, #29
 80070ae:	f7ff fd07 	bl	8006ac0 <nRF24_ReadRegister>
 80070b2:	f040 0104 	orr.w	r1, r0, #4
 80070b6:	b2c9      	uxtb	r1, r1
 80070b8:	201d      	movs	r0, #29
 80070ba:	f7ff fccb 	bl	8006a54 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 80070be:	213f      	movs	r1, #63	; 0x3f
 80070c0:	201c      	movs	r0, #28
 80070c2:	f7ff fcc7 	bl	8006a54 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(110); // Set RF channel for transmission
 80070c6:	206e      	movs	r0, #110	; 0x6e
 80070c8:	f7ff fdd9 	bl	8006c7e <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80070cc:	2101      	movs	r1, #1
 80070ce:	2000      	movs	r0, #0
 80070d0:	f7ff fddc 	bl	8006c8c <nRF24_EnablePipe>
	nRF24_EnablePipe(1, 1); // Enable pipe 1
 80070d4:	2101      	movs	r1, #1
 80070d6:	4608      	mov	r0, r1
 80070d8:	f7ff fdd8 	bl	8006c8c <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80070dc:	2101      	movs	r1, #1
 80070de:	2000      	movs	r0, #0
 80070e0:	f7ff fded 	bl	8006cbe <nRF24_AutoACK>
	nRF24_AutoACK(1, 1); // Enable auto ACK for pipe 1
 80070e4:	2101      	movs	r1, #1
 80070e6:	4608      	mov	r0, r1
 80070e8:	f7ff fde9 	bl	8006cbe <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80070ec:	2005      	movs	r0, #5
 80070ee:	f7ff fdff 	bl	8006cf0 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 80070f2:	2001      	movs	r0, #1
 80070f4:	f7ff fc9e 	bl	8006a34 <nRF24_Delay_ms>

#if (NRF24_USE_INTERRUPT == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 80070f8:	2001      	movs	r0, #1
 80070fa:	f7ff fe94 	bl	8006e26 <nRF24_EnableRXDataReadyIRQ>
#endif
#if (NRF24_USE_INTERRUPT == 0)
	nRF24_EnableRXDataReadyIRQ(0);
#endif
	nRF24_EnableTXDataSentIRQ(0);
 80070fe:	2000      	movs	r0, #0
 8007100:	f7ff fe9f 	bl	8006e42 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8007104:	2000      	movs	r0, #0
 8007106:	f7ff feaa 	bl	8006e5e <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 800710a:	2001      	movs	r0, #1
 800710c:	f7ff fc92 	bl	8006a34 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8007110:	f7ff fe72 	bl	8006df8 <nRF24_ClearInterrupts>
#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8007114:	2001      	movs	r0, #1
 8007116:	f7ff fe86 	bl	8006e26 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 800711a:	2001      	movs	r0, #1
 800711c:	f7ff fe91 	bl	8006e42 <nRF24_EnableTXDataSentIRQ>
	Nrf24TXFreeFlag = 1;
 8007120:	4b07      	ldr	r3, [pc, #28]	; (8007140 <nRF24_Init+0xd0>)
 8007122:	2201      	movs	r2, #1
 8007124:	701a      	strb	r2, [r3, #0]
	RB_CreateBuffer(&TXBuffer, NRF24_TX_BUFFER_SIZE);
 8007126:	2120      	movs	r1, #32
 8007128:	4806      	ldr	r0, [pc, #24]	; (8007144 <nRF24_Init+0xd4>)
 800712a:	f7fd f803 	bl	8004134 <RB_CreateBuffer>
	RB_CreateBuffer(&RXBuffer, NRF24_RX_BUFFER_SIZE);
 800712e:	2120      	movs	r1, #32
 8007130:	4805      	ldr	r0, [pc, #20]	; (8007148 <nRF24_Init+0xd8>)
 8007132:	f7fc ffff 	bl	8004134 <RB_CreateBuffer>
#endif
}
 8007136:	bd08      	pop	{r3, pc}
 8007138:	20002c50 	.word	0x20002c50
 800713c:	40020400 	.word	0x40020400
 8007140:	20002c45 	.word	0x20002c45
 8007144:	20004278 	.word	0x20004278
 8007148:	2000429c 	.word	0x2000429c

0800714c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800714c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007184 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007150:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007152:	e003      	b.n	800715c <LoopCopyDataInit>

08007154 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007154:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007156:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007158:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800715a:	3104      	adds	r1, #4

0800715c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800715c:	480b      	ldr	r0, [pc, #44]	; (800718c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800715e:	4b0c      	ldr	r3, [pc, #48]	; (8007190 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007160:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007162:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007164:	d3f6      	bcc.n	8007154 <CopyDataInit>
  ldr  r2, =_sbss
 8007166:	4a0b      	ldr	r2, [pc, #44]	; (8007194 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007168:	e002      	b.n	8007170 <LoopFillZerobss>

0800716a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800716a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800716c:	f842 3b04 	str.w	r3, [r2], #4

08007170 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007170:	4b09      	ldr	r3, [pc, #36]	; (8007198 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007172:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007174:	d3f9      	bcc.n	800716a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007176:	f7ff fc4f 	bl	8006a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800717a:	f006 fd6f 	bl	800dc5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800717e:	f7ff f823 	bl	80061c8 <main>
  bx  lr    
 8007182:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007184:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8007188:	0800f914 	.word	0x0800f914
  ldr  r0, =_sdata
 800718c:	20002400 	.word	0x20002400
  ldr  r3, =_edata
 8007190:	200024cc 	.word	0x200024cc
  ldr  r2, =_sbss
 8007194:	200024d0 	.word	0x200024d0
  ldr  r3, = _ebss
 8007198:	20004308 	.word	0x20004308

0800719c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800719c:	e7fe      	b.n	800719c <ADC_IRQHandler>
	...

080071a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80071a0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80071a2:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <HAL_Init+0x30>)
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071aa:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071b2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071bc:	2003      	movs	r0, #3
 80071be:	f000 f9a9 	bl	8007514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80071c2:	2000      	movs	r0, #0
 80071c4:	f7ff fb68 	bl	8006898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80071c8:	f7ff f8b0 	bl	800632c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80071cc:	2000      	movs	r0, #0
 80071ce:	bd08      	pop	{r3, pc}
 80071d0:	40023c00 	.word	0x40023c00

080071d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80071d4:	4a03      	ldr	r2, [pc, #12]	; (80071e4 <HAL_IncTick+0x10>)
 80071d6:	6811      	ldr	r1, [r2, #0]
 80071d8:	4b03      	ldr	r3, [pc, #12]	; (80071e8 <HAL_IncTick+0x14>)
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	440b      	add	r3, r1
 80071de:	6013      	str	r3, [r2, #0]
}
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	200042c0 	.word	0x200042c0
 80071e8:	20002450 	.word	0x20002450

080071ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80071ec:	4b01      	ldr	r3, [pc, #4]	; (80071f4 <HAL_GetTick+0x8>)
 80071ee:	6818      	ldr	r0, [r3, #0]
}
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	200042c0 	.word	0x200042c0

080071f8 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80071f8:	4b4a      	ldr	r3, [pc, #296]	; (8007324 <ADC_Init+0x12c>)
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007200:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	6841      	ldr	r1, [r0, #4]
 8007206:	430a      	orrs	r2, r1
 8007208:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800720a:	6802      	ldr	r2, [r0, #0]
 800720c:	6853      	ldr	r3, [r2, #4]
 800720e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007212:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007214:	6802      	ldr	r2, [r0, #0]
 8007216:	6853      	ldr	r3, [r2, #4]
 8007218:	6901      	ldr	r1, [r0, #16]
 800721a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800721e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007220:	6802      	ldr	r2, [r0, #0]
 8007222:	6853      	ldr	r3, [r2, #4]
 8007224:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8007228:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800722a:	6802      	ldr	r2, [r0, #0]
 800722c:	6853      	ldr	r3, [r2, #4]
 800722e:	6881      	ldr	r1, [r0, #8]
 8007230:	430b      	orrs	r3, r1
 8007232:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007234:	6802      	ldr	r2, [r0, #0]
 8007236:	6893      	ldr	r3, [r2, #8]
 8007238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800723c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800723e:	6802      	ldr	r2, [r0, #0]
 8007240:	6893      	ldr	r3, [r2, #8]
 8007242:	68c1      	ldr	r1, [r0, #12]
 8007244:	430b      	orrs	r3, r1
 8007246:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007248:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800724a:	4b37      	ldr	r3, [pc, #220]	; (8007328 <ADC_Init+0x130>)
 800724c:	429a      	cmp	r2, r3
 800724e:	d04b      	beq.n	80072e8 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007250:	6802      	ldr	r2, [r0, #0]
 8007252:	6893      	ldr	r3, [r2, #8]
 8007254:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8007258:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800725a:	6802      	ldr	r2, [r0, #0]
 800725c:	6893      	ldr	r3, [r2, #8]
 800725e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007260:	430b      	orrs	r3, r1
 8007262:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007264:	6802      	ldr	r2, [r0, #0]
 8007266:	6893      	ldr	r3, [r2, #8]
 8007268:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800726c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800726e:	6802      	ldr	r2, [r0, #0]
 8007270:	6893      	ldr	r3, [r2, #8]
 8007272:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007274:	430b      	orrs	r3, r1
 8007276:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007278:	6802      	ldr	r2, [r0, #0]
 800727a:	6893      	ldr	r3, [r2, #8]
 800727c:	f023 0302 	bic.w	r3, r3, #2
 8007280:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007282:	6802      	ldr	r2, [r0, #0]
 8007284:	6893      	ldr	r3, [r2, #8]
 8007286:	7e01      	ldrb	r1, [r0, #24]
 8007288:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800728c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800728e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d133      	bne.n	80072fe <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007296:	6802      	ldr	r2, [r0, #0]
 8007298:	6853      	ldr	r3, [r2, #4]
 800729a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800729e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80072a0:	6802      	ldr	r2, [r0, #0]
 80072a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80072a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072a8:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80072aa:	6801      	ldr	r1, [r0, #0]
 80072ac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80072ae:	69c2      	ldr	r2, [r0, #28]
 80072b0:	3a01      	subs	r2, #1
 80072b2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80072b6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80072b8:	6802      	ldr	r2, [r0, #0]
 80072ba:	6893      	ldr	r3, [r2, #8]
 80072bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072c0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80072c2:	6802      	ldr	r2, [r0, #0]
 80072c4:	6893      	ldr	r3, [r2, #8]
 80072c6:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 80072ca:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80072ce:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80072d0:	6802      	ldr	r2, [r0, #0]
 80072d2:	6893      	ldr	r3, [r2, #8]
 80072d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072d8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80072da:	6802      	ldr	r2, [r0, #0]
 80072dc:	6893      	ldr	r3, [r2, #8]
 80072de:	6941      	ldr	r1, [r0, #20]
 80072e0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80072e4:	6093      	str	r3, [r2, #8]
}
 80072e6:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80072e8:	6802      	ldr	r2, [r0, #0]
 80072ea:	6893      	ldr	r3, [r2, #8]
 80072ec:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80072f0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80072f2:	6802      	ldr	r2, [r0, #0]
 80072f4:	6893      	ldr	r3, [r2, #8]
 80072f6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80072fa:	6093      	str	r3, [r2, #8]
 80072fc:	e7bc      	b.n	8007278 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80072fe:	6802      	ldr	r2, [r0, #0]
 8007300:	6853      	ldr	r3, [r2, #4]
 8007302:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007306:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007308:	6802      	ldr	r2, [r0, #0]
 800730a:	6853      	ldr	r3, [r2, #4]
 800730c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007310:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007312:	6801      	ldr	r1, [r0, #0]
 8007314:	684b      	ldr	r3, [r1, #4]
 8007316:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007318:	3a01      	subs	r2, #1
 800731a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800731e:	604b      	str	r3, [r1, #4]
 8007320:	e7be      	b.n	80072a0 <ADC_Init+0xa8>
 8007322:	bf00      	nop
 8007324:	40012300 	.word	0x40012300
 8007328:	0f000001 	.word	0x0f000001

0800732c <HAL_ADC_Init>:
  if(hadc == NULL)
 800732c:	b338      	cbz	r0, 800737e <HAL_ADC_Init+0x52>
{
 800732e:	b510      	push	{r4, lr}
 8007330:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007332:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007334:	b143      	cbz	r3, 8007348 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007336:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007338:	f013 0f10 	tst.w	r3, #16
 800733c:	d00b      	beq.n	8007356 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800733e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8007340:	2300      	movs	r3, #0
 8007342:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007346:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8007348:	f7ff f812 	bl	8006370 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800734c:	2300      	movs	r3, #0
 800734e:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8007350:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8007354:	e7ef      	b.n	8007336 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8007356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007358:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800735c:	f023 0302 	bic.w	r3, r3, #2
 8007360:	f043 0302 	orr.w	r3, r3, #2
 8007364:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8007366:	4620      	mov	r0, r4
 8007368:	f7ff ff46 	bl	80071f8 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 800736c:	2000      	movs	r0, #0
 800736e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8007370:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007372:	f023 0303 	bic.w	r3, r3, #3
 8007376:	f043 0301 	orr.w	r3, r3, #1
 800737a:	6423      	str	r3, [r4, #64]	; 0x40
 800737c:	e7e0      	b.n	8007340 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800737e:	2001      	movs	r0, #1
}
 8007380:	4770      	bx	lr
	...

08007384 <HAL_ADC_ConfigChannel>:
{
 8007384:	b430      	push	{r4, r5}
 8007386:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8007388:	2300      	movs	r3, #0
 800738a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800738c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007390:	2b01      	cmp	r3, #1
 8007392:	f000 80b7 	beq.w	8007504 <HAL_ADC_ConfigChannel+0x180>
 8007396:	2301      	movs	r3, #1
 8007398:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800739c:	680b      	ldr	r3, [r1, #0]
 800739e:	2b09      	cmp	r3, #9
 80073a0:	d93e      	bls.n	8007420 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80073a2:	6805      	ldr	r5, [r0, #0]
 80073a4:	68ea      	ldr	r2, [r5, #12]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80073ac:	3b1e      	subs	r3, #30
 80073ae:	2407      	movs	r4, #7
 80073b0:	fa04 f303 	lsl.w	r3, r4, r3
 80073b4:	ea22 0303 	bic.w	r3, r2, r3
 80073b8:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80073ba:	6805      	ldr	r5, [r0, #0]
 80073bc:	68ea      	ldr	r2, [r5, #12]
 80073be:	688c      	ldr	r4, [r1, #8]
 80073c0:	880b      	ldrh	r3, [r1, #0]
 80073c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80073c6:	3b1e      	subs	r3, #30
 80073c8:	fa04 f303 	lsl.w	r3, r4, r3
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 80073d0:	684b      	ldr	r3, [r1, #4]
 80073d2:	2b06      	cmp	r3, #6
 80073d4:	d83a      	bhi.n	800744c <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80073d6:	6805      	ldr	r5, [r0, #0]
 80073d8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80073da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80073de:	3b05      	subs	r3, #5
 80073e0:	241f      	movs	r4, #31
 80073e2:	fa04 f303 	lsl.w	r3, r4, r3
 80073e6:	ea22 0303 	bic.w	r3, r2, r3
 80073ea:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80073ec:	6805      	ldr	r5, [r0, #0]
 80073ee:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80073f0:	684b      	ldr	r3, [r1, #4]
 80073f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80073f6:	3b05      	subs	r3, #5
 80073f8:	880c      	ldrh	r4, [r1, #0]
 80073fa:	fa04 f303 	lsl.w	r3, r4, r3
 80073fe:	4313      	orrs	r3, r2
 8007400:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007402:	6802      	ldr	r2, [r0, #0]
 8007404:	4b40      	ldr	r3, [pc, #256]	; (8007508 <HAL_ADC_ConfigChannel+0x184>)
 8007406:	429a      	cmp	r2, r3
 8007408:	d050      	beq.n	80074ac <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800740a:	6802      	ldr	r2, [r0, #0]
 800740c:	4b3e      	ldr	r3, [pc, #248]	; (8007508 <HAL_ADC_ConfigChannel+0x184>)
 800740e:	429a      	cmp	r2, r3
 8007410:	d055      	beq.n	80074be <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 8007412:	2300      	movs	r3, #0
 8007414:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8007418:	4618      	mov	r0, r3
}
 800741a:	b002      	add	sp, #8
 800741c:	bc30      	pop	{r4, r5}
 800741e:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007420:	6805      	ldr	r5, [r0, #0]
 8007422:	692a      	ldr	r2, [r5, #16]
 8007424:	b29b      	uxth	r3, r3
 8007426:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800742a:	2407      	movs	r4, #7
 800742c:	fa04 f303 	lsl.w	r3, r4, r3
 8007430:	ea22 0303 	bic.w	r3, r2, r3
 8007434:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007436:	6805      	ldr	r5, [r0, #0]
 8007438:	692a      	ldr	r2, [r5, #16]
 800743a:	688c      	ldr	r4, [r1, #8]
 800743c:	880b      	ldrh	r3, [r1, #0]
 800743e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007442:	fa04 f303 	lsl.w	r3, r4, r3
 8007446:	4313      	orrs	r3, r2
 8007448:	612b      	str	r3, [r5, #16]
 800744a:	e7c1      	b.n	80073d0 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 800744c:	2b0c      	cmp	r3, #12
 800744e:	d816      	bhi.n	800747e <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007450:	6805      	ldr	r5, [r0, #0]
 8007452:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8007454:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007458:	3b23      	subs	r3, #35	; 0x23
 800745a:	241f      	movs	r4, #31
 800745c:	fa04 f303 	lsl.w	r3, r4, r3
 8007460:	ea22 0303 	bic.w	r3, r2, r3
 8007464:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007466:	6805      	ldr	r5, [r0, #0]
 8007468:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800746a:	684b      	ldr	r3, [r1, #4]
 800746c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007470:	3b23      	subs	r3, #35	; 0x23
 8007472:	880c      	ldrh	r4, [r1, #0]
 8007474:	fa04 f303 	lsl.w	r3, r4, r3
 8007478:	4313      	orrs	r3, r2
 800747a:	632b      	str	r3, [r5, #48]	; 0x30
 800747c:	e7c1      	b.n	8007402 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800747e:	6805      	ldr	r5, [r0, #0]
 8007480:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8007482:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007486:	3b41      	subs	r3, #65	; 0x41
 8007488:	241f      	movs	r4, #31
 800748a:	fa04 f303 	lsl.w	r3, r4, r3
 800748e:	ea22 0303 	bic.w	r3, r2, r3
 8007492:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007494:	6805      	ldr	r5, [r0, #0]
 8007496:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8007498:	684b      	ldr	r3, [r1, #4]
 800749a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800749e:	3b41      	subs	r3, #65	; 0x41
 80074a0:	880c      	ldrh	r4, [r1, #0]
 80074a2:	fa04 f303 	lsl.w	r3, r4, r3
 80074a6:	4313      	orrs	r3, r2
 80074a8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80074aa:	e7aa      	b.n	8007402 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80074ac:	680b      	ldr	r3, [r1, #0]
 80074ae:	2b12      	cmp	r3, #18
 80074b0:	d1ab      	bne.n	800740a <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80074b2:	4a16      	ldr	r2, [pc, #88]	; (800750c <HAL_ADC_ConfigChannel+0x188>)
 80074b4:	6853      	ldr	r3, [r2, #4]
 80074b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074ba:	6053      	str	r3, [r2, #4]
 80074bc:	e7a5      	b.n	800740a <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80074be:	680b      	ldr	r3, [r1, #0]
 80074c0:	3b10      	subs	r3, #16
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d8a5      	bhi.n	8007412 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80074c6:	4a11      	ldr	r2, [pc, #68]	; (800750c <HAL_ADC_ConfigChannel+0x188>)
 80074c8:	6853      	ldr	r3, [r2, #4]
 80074ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80074ce:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80074d0:	680b      	ldr	r3, [r1, #0]
 80074d2:	2b10      	cmp	r3, #16
 80074d4:	d19d      	bne.n	8007412 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80074d6:	4b0e      	ldr	r3, [pc, #56]	; (8007510 <HAL_ADC_ConfigChannel+0x18c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 80074de:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 80074e2:	f202 3283 	addw	r2, r2, #899	; 0x383
 80074e6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ea:	0c9b      	lsrs	r3, r3, #18
 80074ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80074f0:	005a      	lsls	r2, r3, #1
 80074f2:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 80074f4:	e002      	b.n	80074fc <HAL_ADC_ConfigChannel+0x178>
        counter--;
 80074f6:	9b01      	ldr	r3, [sp, #4]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80074fc:	9b01      	ldr	r3, [sp, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1f9      	bne.n	80074f6 <HAL_ADC_ConfigChannel+0x172>
 8007502:	e786      	b.n	8007412 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8007504:	2002      	movs	r0, #2
 8007506:	e788      	b.n	800741a <HAL_ADC_ConfigChannel+0x96>
 8007508:	40012000 	.word	0x40012000
 800750c:	40012300 	.word	0x40012300
 8007510:	2000244c 	.word	0x2000244c

08007514 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007514:	4a07      	ldr	r2, [pc, #28]	; (8007534 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8007516:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007518:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800751c:	041b      	lsls	r3, r3, #16
 800751e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007520:	0200      	lsls	r0, r0, #8
 8007522:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007526:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8007528:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800752c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8007530:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007532:	4770      	bx	lr
 8007534:	e000ed00 	.word	0xe000ed00

08007538 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007538:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800753a:	4b17      	ldr	r3, [pc, #92]	; (8007598 <HAL_NVIC_SetPriority+0x60>)
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007542:	f1c3 0407 	rsb	r4, r3, #7
 8007546:	2c04      	cmp	r4, #4
 8007548:	bf28      	it	cs
 800754a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800754c:	1d1d      	adds	r5, r3, #4
 800754e:	2d06      	cmp	r5, #6
 8007550:	d918      	bls.n	8007584 <HAL_NVIC_SetPriority+0x4c>
 8007552:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007554:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007558:	fa05 f404 	lsl.w	r4, r5, r4
 800755c:	ea21 0104 	bic.w	r1, r1, r4
 8007560:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007562:	fa05 f303 	lsl.w	r3, r5, r3
 8007566:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800756a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800756c:	2800      	cmp	r0, #0
 800756e:	db0b      	blt.n	8007588 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007570:	0109      	lsls	r1, r1, #4
 8007572:	b2c9      	uxtb	r1, r1
 8007574:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8007578:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800757c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007580:	bc30      	pop	{r4, r5}
 8007582:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007584:	2300      	movs	r3, #0
 8007586:	e7e5      	b.n	8007554 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007588:	f000 000f 	and.w	r0, r0, #15
 800758c:	0109      	lsls	r1, r1, #4
 800758e:	b2c9      	uxtb	r1, r1
 8007590:	4b02      	ldr	r3, [pc, #8]	; (800759c <HAL_NVIC_SetPriority+0x64>)
 8007592:	5419      	strb	r1, [r3, r0]
 8007594:	e7f4      	b.n	8007580 <HAL_NVIC_SetPriority+0x48>
 8007596:	bf00      	nop
 8007598:	e000ed00 	.word	0xe000ed00
 800759c:	e000ed14 	.word	0xe000ed14

080075a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80075a0:	2800      	cmp	r0, #0
 80075a2:	db07      	blt.n	80075b4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075a4:	f000 021f 	and.w	r2, r0, #31
 80075a8:	0940      	lsrs	r0, r0, #5
 80075aa:	2301      	movs	r3, #1
 80075ac:	4093      	lsls	r3, r2
 80075ae:	4a02      	ldr	r2, [pc, #8]	; (80075b8 <HAL_NVIC_EnableIRQ+0x18>)
 80075b0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	e000e100 	.word	0xe000e100

080075bc <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80075bc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80075c0:	4905      	ldr	r1, [pc, #20]	; (80075d8 <HAL_NVIC_SystemReset+0x1c>)
 80075c2:	68ca      	ldr	r2, [r1, #12]
 80075c4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80075c8:	4b04      	ldr	r3, [pc, #16]	; (80075dc <HAL_NVIC_SystemReset+0x20>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60cb      	str	r3, [r1, #12]
 80075ce:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80075d2:	bf00      	nop
 80075d4:	e7fd      	b.n	80075d2 <HAL_NVIC_SystemReset+0x16>
 80075d6:	bf00      	nop
 80075d8:	e000ed00 	.word	0xe000ed00
 80075dc:	05fa0004 	.word	0x05fa0004

080075e0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80075e0:	b158      	cbz	r0, 80075fa <HAL_CRC_Init+0x1a>
{
 80075e2:	b510      	push	{r4, lr}
 80075e4:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80075e6:	7943      	ldrb	r3, [r0, #5]
 80075e8:	b11b      	cbz	r3, 80075f2 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80075ea:	2301      	movs	r3, #1
 80075ec:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80075ee:	2000      	movs	r0, #0
}
 80075f0:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80075f2:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 80075f4:	f7fe fed4 	bl	80063a0 <HAL_CRC_MspInit>
 80075f8:	e7f7      	b.n	80075ea <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 80075fa:	2001      	movs	r0, #1
}
 80075fc:	4770      	bx	lr

080075fe <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80075fe:	b430      	push	{r4, r5}
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007600:	2302      	movs	r3, #2
 8007602:	7143      	strb	r3, [r0, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8007604:	6804      	ldr	r4, [r0, #0]
 8007606:	68a3      	ldr	r3, [r4, #8]
 8007608:	f043 0301 	orr.w	r3, r3, #1
 800760c:	60a3      	str	r3, [r4, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800760e:	2300      	movs	r3, #0
 8007610:	e004      	b.n	800761c <HAL_CRC_Calculate+0x1e>
  {
    hcrc->Instance->DR = pBuffer[index];
 8007612:	6804      	ldr	r4, [r0, #0]
 8007614:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8007618:	6025      	str	r5, [r4, #0]
  for (index = 0U; index < BufferLength; index++)
 800761a:	3301      	adds	r3, #1
 800761c:	4293      	cmp	r3, r2
 800761e:	d3f8      	bcc.n	8007612 <HAL_CRC_Calculate+0x14>
  }
  temp = hcrc->Instance->DR;
 8007620:	6803      	ldr	r3, [r0, #0]
 8007622:	681b      	ldr	r3, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007624:	2201      	movs	r2, #1
 8007626:	7142      	strb	r2, [r0, #5]

  /* Return the CRC computed value */
  return temp;
}
 8007628:	4618      	mov	r0, r3
 800762a:	bc30      	pop	{r4, r5}
 800762c:	4770      	bx	lr

0800762e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800762e:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007630:	6805      	ldr	r5, [r0, #0]
 8007632:	682c      	ldr	r4, [r5, #0]
 8007634:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8007638:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800763a:	6804      	ldr	r4, [r0, #0]
 800763c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800763e:	6883      	ldr	r3, [r0, #8]
 8007640:	2b40      	cmp	r3, #64	; 0x40
 8007642:	d005      	beq.n	8007650 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8007644:	6803      	ldr	r3, [r0, #0]
 8007646:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8007648:	6803      	ldr	r3, [r0, #0]
 800764a:	60da      	str	r2, [r3, #12]
  }
}
 800764c:	bc30      	pop	{r4, r5}
 800764e:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8007650:	6803      	ldr	r3, [r0, #0]
 8007652:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8007654:	6803      	ldr	r3, [r0, #0]
 8007656:	60d9      	str	r1, [r3, #12]
 8007658:	e7f8      	b.n	800764c <DMA_SetConfig+0x1e>
	...

0800765c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800765c:	6802      	ldr	r2, [r0, #0]
 800765e:	b2d3      	uxtb	r3, r2
 8007660:	3b10      	subs	r3, #16
 8007662:	490b      	ldr	r1, [pc, #44]	; (8007690 <DMA_CalcBaseAndBitshift+0x34>)
 8007664:	fba1 1303 	umull	r1, r3, r1, r3
 8007668:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800766a:	490a      	ldr	r1, [pc, #40]	; (8007694 <DMA_CalcBaseAndBitshift+0x38>)
 800766c:	5cc9      	ldrb	r1, [r1, r3]
 800766e:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007670:	2b03      	cmp	r3, #3
 8007672:	d806      	bhi.n	8007682 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007674:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8007678:	f022 0203 	bic.w	r2, r2, #3
 800767c:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800767e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8007680:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007682:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8007686:	f022 0203 	bic.w	r2, r2, #3
 800768a:	3204      	adds	r2, #4
 800768c:	6582      	str	r2, [r0, #88]	; 0x58
 800768e:	e7f6      	b.n	800767e <DMA_CalcBaseAndBitshift+0x22>
 8007690:	aaaaaaab 	.word	0xaaaaaaab
 8007694:	0800f748 	.word	0x0800f748

08007698 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007698:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800769a:	6982      	ldr	r2, [r0, #24]
 800769c:	b992      	cbnz	r2, 80076c4 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d00a      	beq.n	80076b8 <DMA_CheckFifoParam+0x20>
 80076a2:	b11b      	cbz	r3, 80076ac <DMA_CheckFifoParam+0x14>
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d001      	beq.n	80076ac <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80076a8:	2000      	movs	r0, #0
 80076aa:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80076ae:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80076b2:	d12c      	bne.n	800770e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80076b4:	2000      	movs	r0, #0
 80076b6:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80076ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076be:	d028      	beq.n	8007712 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80076c0:	2000      	movs	r0, #0
 80076c2:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076c4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80076c8:	d005      	beq.n	80076d6 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d929      	bls.n	8007722 <DMA_CheckFifoParam+0x8a>
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d015      	beq.n	80076fe <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80076d2:	2000      	movs	r0, #0
 80076d4:	4770      	bx	lr
    switch (tmp)
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d803      	bhi.n	80076e2 <DMA_CheckFifoParam+0x4a>
 80076da:	e8df f003 	tbb	[pc, r3]
 80076de:	041c      	.short	0x041c
 80076e0:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80076e2:	2000      	movs	r0, #0
 80076e4:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80076e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80076ec:	d115      	bne.n	800771a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 80076ee:	2000      	movs	r0, #0
 80076f0:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80076f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076f8:	d011      	beq.n	800771e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80076fa:	2000      	movs	r0, #0
 80076fc:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007700:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007704:	d001      	beq.n	800770a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8007706:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8007708:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800770a:	2000      	movs	r0, #0
 800770c:	4770      	bx	lr
        status = HAL_ERROR;
 800770e:	2001      	movs	r0, #1
 8007710:	4770      	bx	lr
        status = HAL_ERROR;
 8007712:	2001      	movs	r0, #1
 8007714:	4770      	bx	lr
      status = HAL_ERROR;
 8007716:	2001      	movs	r0, #1
 8007718:	4770      	bx	lr
        status = HAL_ERROR;
 800771a:	2001      	movs	r0, #1
 800771c:	4770      	bx	lr
        status = HAL_ERROR;
 800771e:	2001      	movs	r0, #1
 8007720:	4770      	bx	lr
      status = HAL_ERROR;
 8007722:	2001      	movs	r0, #1
 8007724:	4770      	bx	lr
	...

08007728 <HAL_DMA_Init>:
{
 8007728:	b570      	push	{r4, r5, r6, lr}
 800772a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800772c:	f7ff fd5e 	bl	80071ec <HAL_GetTick>
  if(hdma == NULL)
 8007730:	2c00      	cmp	r4, #0
 8007732:	d05b      	beq.n	80077ec <HAL_DMA_Init+0xc4>
 8007734:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8007736:	2300      	movs	r3, #0
 8007738:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800773c:	2302      	movs	r3, #2
 800773e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8007742:	6822      	ldr	r2, [r4, #0]
 8007744:	6813      	ldr	r3, [r2, #0]
 8007746:	f023 0301 	bic.w	r3, r3, #1
 800774a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	f012 0f01 	tst.w	r2, #1
 8007754:	d00a      	beq.n	800776c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007756:	f7ff fd49 	bl	80071ec <HAL_GetTick>
 800775a:	1b40      	subs	r0, r0, r5
 800775c:	2805      	cmp	r0, #5
 800775e:	d9f5      	bls.n	800774c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007760:	2320      	movs	r3, #32
 8007762:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007764:	2003      	movs	r0, #3
 8007766:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800776a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 800776c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800776e:	4820      	ldr	r0, [pc, #128]	; (80077f0 <HAL_DMA_Init+0xc8>)
 8007770:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007772:	6861      	ldr	r1, [r4, #4]
 8007774:	68a2      	ldr	r2, [r4, #8]
 8007776:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007778:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800777a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800777c:	6921      	ldr	r1, [r4, #16]
 800777e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007780:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007782:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007784:	69a1      	ldr	r1, [r4, #24]
 8007786:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8007788:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800778a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800778c:	6a21      	ldr	r1, [r4, #32]
 800778e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007790:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007792:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007794:	2904      	cmp	r1, #4
 8007796:	d01e      	beq.n	80077d6 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8007798:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800779a:	6826      	ldr	r6, [r4, #0]
 800779c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800779e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80077a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a4:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d107      	bne.n	80077ba <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80077aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80077ac:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80077ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80077b0:	b11b      	cbz	r3, 80077ba <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80077b2:	4620      	mov	r0, r4
 80077b4:	f7ff ff70 	bl	8007698 <DMA_CheckFifoParam>
 80077b8:	b990      	cbnz	r0, 80077e0 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80077ba:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077bc:	4620      	mov	r0, r4
 80077be:	f7ff ff4d 	bl	800765c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80077c4:	233f      	movs	r3, #63	; 0x3f
 80077c6:	4093      	lsls	r3, r2
 80077c8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077ca:	2000      	movs	r0, #0
 80077cc:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80077ce:	2301      	movs	r3, #1
 80077d0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80077d4:	e7c9      	b.n	800776a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80077d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80077d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80077da:	4301      	orrs	r1, r0
 80077dc:	430a      	orrs	r2, r1
 80077de:	e7db      	b.n	8007798 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80077e0:	2340      	movs	r3, #64	; 0x40
 80077e2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80077e4:	2001      	movs	r0, #1
 80077e6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80077ea:	e7be      	b.n	800776a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80077ec:	2001      	movs	r0, #1
 80077ee:	e7bc      	b.n	800776a <HAL_DMA_Init+0x42>
 80077f0:	f010803f 	.word	0xf010803f

080077f4 <HAL_DMA_Start_IT>:
{
 80077f4:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077f6:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80077f8:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80077fc:	2c01      	cmp	r4, #1
 80077fe:	d02c      	beq.n	800785a <HAL_DMA_Start_IT+0x66>
 8007800:	2401      	movs	r4, #1
 8007802:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8007806:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800780a:	b2e4      	uxtb	r4, r4
 800780c:	2c01      	cmp	r4, #1
 800780e:	d004      	beq.n	800781a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8007810:	2300      	movs	r3, #0
 8007812:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8007816:	2002      	movs	r0, #2
}
 8007818:	bd38      	pop	{r3, r4, r5, pc}
 800781a:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 800781c:	2002      	movs	r0, #2
 800781e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007822:	2000      	movs	r0, #0
 8007824:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007826:	4620      	mov	r0, r4
 8007828:	f7ff ff01 	bl	800762e <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800782c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800782e:	233f      	movs	r3, #63	; 0x3f
 8007830:	4093      	lsls	r3, r2
 8007832:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007834:	6822      	ldr	r2, [r4, #0]
 8007836:	6813      	ldr	r3, [r2, #0]
 8007838:	f043 0316 	orr.w	r3, r3, #22
 800783c:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800783e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007840:	b123      	cbz	r3, 800784c <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8007842:	6822      	ldr	r2, [r4, #0]
 8007844:	6813      	ldr	r3, [r2, #0]
 8007846:	f043 0308 	orr.w	r3, r3, #8
 800784a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800784c:	6822      	ldr	r2, [r4, #0]
 800784e:	6813      	ldr	r3, [r2, #0]
 8007850:	f043 0301 	orr.w	r3, r3, #1
 8007854:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007856:	2000      	movs	r0, #0
 8007858:	e7de      	b.n	8007818 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 800785a:	2002      	movs	r0, #2
 800785c:	e7dc      	b.n	8007818 <HAL_DMA_Start_IT+0x24>

0800785e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800785e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b02      	cmp	r3, #2
 8007866:	d003      	beq.n	8007870 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007868:	2380      	movs	r3, #128	; 0x80
 800786a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800786c:	2001      	movs	r0, #1
 800786e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8007870:	2305      	movs	r3, #5
 8007872:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8007876:	6802      	ldr	r2, [r0, #0]
 8007878:	6813      	ldr	r3, [r2, #0]
 800787a:	f023 0301 	bic.w	r3, r3, #1
 800787e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8007880:	2000      	movs	r0, #0
}
 8007882:	4770      	bx	lr

08007884 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007884:	2300      	movs	r3, #0
 8007886:	2b0f      	cmp	r3, #15
 8007888:	f200 80c5 	bhi.w	8007a16 <HAL_GPIO_Init+0x192>
{
 800788c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800788e:	b083      	sub	sp, #12
 8007890:	e039      	b.n	8007906 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007892:	2204      	movs	r2, #4
 8007894:	e000      	b.n	8007898 <HAL_GPIO_Init+0x14>
 8007896:	2200      	movs	r2, #0
 8007898:	40aa      	lsls	r2, r5
 800789a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800789c:	3402      	adds	r4, #2
 800789e:	4d5e      	ldr	r5, [pc, #376]	; (8007a18 <HAL_GPIO_Init+0x194>)
 80078a0:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80078a4:	4a5d      	ldr	r2, [pc, #372]	; (8007a1c <HAL_GPIO_Init+0x198>)
 80078a6:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80078a8:	43f2      	mvns	r2, r6
 80078aa:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80078ae:	684f      	ldr	r7, [r1, #4]
 80078b0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80078b4:	d001      	beq.n	80078ba <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80078b6:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 80078ba:	4c58      	ldr	r4, [pc, #352]	; (8007a1c <HAL_GPIO_Init+0x198>)
 80078bc:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 80078be:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80078c0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80078c4:	684f      	ldr	r7, [r1, #4]
 80078c6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80078ca:	d001      	beq.n	80078d0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80078cc:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 80078d0:	4c52      	ldr	r4, [pc, #328]	; (8007a1c <HAL_GPIO_Init+0x198>)
 80078d2:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80078d4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80078d6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80078da:	684f      	ldr	r7, [r1, #4]
 80078dc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80078e0:	d001      	beq.n	80078e6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80078e2:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 80078e6:	4c4d      	ldr	r4, [pc, #308]	; (8007a1c <HAL_GPIO_Init+0x198>)
 80078e8:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80078ea:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80078ec:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80078ee:	684d      	ldr	r5, [r1, #4]
 80078f0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 80078f4:	d001      	beq.n	80078fa <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80078f6:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 80078fa:	4c48      	ldr	r4, [pc, #288]	; (8007a1c <HAL_GPIO_Init+0x198>)
 80078fc:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078fe:	3301      	adds	r3, #1
 8007900:	2b0f      	cmp	r3, #15
 8007902:	f200 8086 	bhi.w	8007a12 <HAL_GPIO_Init+0x18e>
    ioposition = 0x01U << position;
 8007906:	2201      	movs	r2, #1
 8007908:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800790a:	680c      	ldr	r4, [r1, #0]
 800790c:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8007910:	42b2      	cmp	r2, r6
 8007912:	d1f4      	bne.n	80078fe <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007914:	684c      	ldr	r4, [r1, #4]
 8007916:	1e65      	subs	r5, r4, #1
 8007918:	2d01      	cmp	r5, #1
 800791a:	d903      	bls.n	8007924 <HAL_GPIO_Init+0xa0>
 800791c:	2c11      	cmp	r4, #17
 800791e:	d001      	beq.n	8007924 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007920:	2c12      	cmp	r4, #18
 8007922:	d112      	bne.n	800794a <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8007924:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007926:	005f      	lsls	r7, r3, #1
 8007928:	2403      	movs	r4, #3
 800792a:	40bc      	lsls	r4, r7
 800792c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007930:	68cc      	ldr	r4, [r1, #12]
 8007932:	40bc      	lsls	r4, r7
 8007934:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8007936:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8007938:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800793a:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800793e:	684c      	ldr	r4, [r1, #4]
 8007940:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8007944:	409a      	lsls	r2, r3
 8007946:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8007948:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800794a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800794c:	005f      	lsls	r7, r3, #1
 800794e:	2203      	movs	r2, #3
 8007950:	40ba      	lsls	r2, r7
 8007952:	43d2      	mvns	r2, r2
 8007954:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007956:	688d      	ldr	r5, [r1, #8]
 8007958:	40bd      	lsls	r5, r7
 800795a:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 800795c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800795e:	684c      	ldr	r4, [r1, #4]
 8007960:	2c02      	cmp	r4, #2
 8007962:	d001      	beq.n	8007968 <HAL_GPIO_Init+0xe4>
 8007964:	2c12      	cmp	r4, #18
 8007966:	d113      	bne.n	8007990 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8007968:	08dd      	lsrs	r5, r3, #3
 800796a:	3508      	adds	r5, #8
 800796c:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007970:	f003 0407 	and.w	r4, r3, #7
 8007974:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007978:	240f      	movs	r4, #15
 800797a:	fa04 f40c 	lsl.w	r4, r4, ip
 800797e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007982:	690c      	ldr	r4, [r1, #16]
 8007984:	fa04 f40c 	lsl.w	r4, r4, ip
 8007988:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800798c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8007990:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007992:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007994:	684c      	ldr	r4, [r1, #4]
 8007996:	f004 0403 	and.w	r4, r4, #3
 800799a:	40bc      	lsls	r4, r7
 800799c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800799e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80079a0:	684a      	ldr	r2, [r1, #4]
 80079a2:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80079a6:	d0aa      	beq.n	80078fe <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079a8:	2200      	movs	r2, #0
 80079aa:	9201      	str	r2, [sp, #4]
 80079ac:	4a1c      	ldr	r2, [pc, #112]	; (8007a20 <HAL_GPIO_Init+0x19c>)
 80079ae:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80079b0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80079b4:	6454      	str	r4, [r2, #68]	; 0x44
 80079b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80079b8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80079bc:	9201      	str	r2, [sp, #4]
 80079be:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80079c0:	089c      	lsrs	r4, r3, #2
 80079c2:	1ca5      	adds	r5, r4, #2
 80079c4:	4a14      	ldr	r2, [pc, #80]	; (8007a18 <HAL_GPIO_Init+0x194>)
 80079c6:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80079ca:	f003 0203 	and.w	r2, r3, #3
 80079ce:	0095      	lsls	r5, r2, #2
 80079d0:	220f      	movs	r2, #15
 80079d2:	40aa      	lsls	r2, r5
 80079d4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80079d8:	4a12      	ldr	r2, [pc, #72]	; (8007a24 <HAL_GPIO_Init+0x1a0>)
 80079da:	4290      	cmp	r0, r2
 80079dc:	f43f af5b 	beq.w	8007896 <HAL_GPIO_Init+0x12>
 80079e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079e4:	4290      	cmp	r0, r2
 80079e6:	d00e      	beq.n	8007a06 <HAL_GPIO_Init+0x182>
 80079e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079ec:	4290      	cmp	r0, r2
 80079ee:	d00c      	beq.n	8007a0a <HAL_GPIO_Init+0x186>
 80079f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079f4:	4290      	cmp	r0, r2
 80079f6:	d00a      	beq.n	8007a0e <HAL_GPIO_Init+0x18a>
 80079f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079fc:	4290      	cmp	r0, r2
 80079fe:	f43f af48 	beq.w	8007892 <HAL_GPIO_Init+0xe>
 8007a02:	2207      	movs	r2, #7
 8007a04:	e748      	b.n	8007898 <HAL_GPIO_Init+0x14>
 8007a06:	2201      	movs	r2, #1
 8007a08:	e746      	b.n	8007898 <HAL_GPIO_Init+0x14>
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	e744      	b.n	8007898 <HAL_GPIO_Init+0x14>
 8007a0e:	2203      	movs	r2, #3
 8007a10:	e742      	b.n	8007898 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8007a12:	b003      	add	sp, #12
 8007a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a16:	4770      	bx	lr
 8007a18:	40013800 	.word	0x40013800
 8007a1c:	40013c00 	.word	0x40013c00
 8007a20:	40023800 	.word	0x40023800
 8007a24:	40020000 	.word	0x40020000

08007a28 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a28:	6903      	ldr	r3, [r0, #16]
 8007a2a:	4219      	tst	r1, r3
 8007a2c:	d101      	bne.n	8007a32 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a2e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8007a30:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8007a32:	2001      	movs	r0, #1
 8007a34:	4770      	bx	lr

08007a36 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a36:	b912      	cbnz	r2, 8007a3e <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007a38:	0409      	lsls	r1, r1, #16
 8007a3a:	6181      	str	r1, [r0, #24]
  }
}
 8007a3c:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8007a3e:	6181      	str	r1, [r0, #24]
 8007a40:	4770      	bx	lr
	...

08007a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a44:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007a46:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	4203      	tst	r3, r0
 8007a4c:	d100      	bne.n	8007a50 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8007a4e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007a50:	4b02      	ldr	r3, [pc, #8]	; (8007a5c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8007a52:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007a54:	f7fe f904 	bl	8005c60 <HAL_GPIO_EXTI_Callback>
}
 8007a58:	e7f9      	b.n	8007a4e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8007a5a:	bf00      	nop
 8007a5c:	40013c00 	.word	0x40013c00

08007a60 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a60:	6803      	ldr	r3, [r0, #0]
 8007a62:	695a      	ldr	r2, [r3, #20]
 8007a64:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007a68:	d011      	beq.n	8007a8e <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007a70:	2300      	movs	r3, #0
 8007a72:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007a74:	2220      	movs	r2, #32
 8007a76:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a7a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a7e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007a80:	f042 0204 	orr.w	r2, r2, #4
 8007a84:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a86:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8007a8a:	2001      	movs	r0, #1
 8007a8c:	4770      	bx	lr
  }
  return HAL_OK;
 8007a8e:	2000      	movs	r0, #0
}
 8007a90:	4770      	bx	lr

08007a92 <I2C_WaitOnFlagUntilTimeout>:
{
 8007a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a94:	4606      	mov	r6, r0
 8007a96:	460c      	mov	r4, r1
 8007a98:	4617      	mov	r7, r2
 8007a9a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a9c:	e022      	b.n	8007ae4 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a9e:	f7ff fba5 	bl	80071ec <HAL_GetTick>
 8007aa2:	9b06      	ldr	r3, [sp, #24]
 8007aa4:	1ac0      	subs	r0, r0, r3
 8007aa6:	42a8      	cmp	r0, r5
 8007aa8:	d800      	bhi.n	8007aac <I2C_WaitOnFlagUntilTimeout+0x1a>
 8007aaa:	b9dd      	cbnz	r5, 8007ae4 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007aac:	2300      	movs	r3, #0
 8007aae:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007ab6:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007aba:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8007abc:	f042 0220 	orr.w	r2, r2, #32
 8007ac0:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007ac2:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8007ac6:	2001      	movs	r0, #1
 8007ac8:	e01a      	b.n	8007b00 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007aca:	6833      	ldr	r3, [r6, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	ea24 0303 	bic.w	r3, r4, r3
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	fab3 f383 	clz	r3, r3
 8007ad8:	095b      	lsrs	r3, r3, #5
 8007ada:	429f      	cmp	r7, r3
 8007adc:	d10f      	bne.n	8007afe <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8007ade:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007ae2:	d1dc      	bne.n	8007a9e <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ae4:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d0ee      	beq.n	8007aca <I2C_WaitOnFlagUntilTimeout+0x38>
 8007aec:	6833      	ldr	r3, [r6, #0]
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	ea24 0303 	bic.w	r3, r4, r3
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	fab3 f383 	clz	r3, r3
 8007afa:	095b      	lsrs	r3, r3, #5
 8007afc:	e7ed      	b.n	8007ada <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8007afe:	2000      	movs	r0, #0
}
 8007b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8007b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b04:	4604      	mov	r4, r0
 8007b06:	460d      	mov	r5, r1
 8007b08:	4616      	mov	r6, r2
 8007b0a:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b0c:	e03c      	b.n	8007b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b14:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b1c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b22:	2220      	movs	r2, #32
 8007b24:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b28:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b2c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007b2e:	f042 0204 	orr.w	r2, r2, #4
 8007b32:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8007b34:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8007b38:	2001      	movs	r0, #1
 8007b3a:	e033      	b.n	8007ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b3c:	f7ff fb56 	bl	80071ec <HAL_GetTick>
 8007b40:	1bc0      	subs	r0, r0, r7
 8007b42:	42b0      	cmp	r0, r6
 8007b44:	d800      	bhi.n	8007b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8007b46:	b9fe      	cbnz	r6, 8007b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b56:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007b58:	f042 0220 	orr.w	r2, r2, #32
 8007b5c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007b5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8007b62:	2001      	movs	r0, #1
 8007b64:	e01e      	b.n	8007ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	ea25 0303 	bic.w	r3, r5, r3
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	3300      	adds	r3, #0
 8007b72:	bf18      	it	ne
 8007b74:	2301      	movne	r3, #1
 8007b76:	b1a3      	cbz	r3, 8007ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	695a      	ldr	r2, [r3, #20]
 8007b7c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007b80:	d1c5      	bne.n	8007b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8007b82:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8007b86:	d1d9      	bne.n	8007b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b88:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d0ea      	beq.n	8007b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	ea25 0303 	bic.w	r3, r5, r3
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	3300      	adds	r3, #0
 8007b9c:	bf18      	it	ne
 8007b9e:	2301      	movne	r3, #1
 8007ba0:	e7e9      	b.n	8007b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8007ba2:	2000      	movs	r0, #0
}
 8007ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ba6 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8007ba6:	b570      	push	{r4, r5, r6, lr}
 8007ba8:	4604      	mov	r4, r0
 8007baa:	460d      	mov	r5, r1
 8007bac:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007bb6:	d11c      	bne.n	8007bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f7ff ff51 	bl	8007a60 <I2C_IsAcknowledgeFailed>
 8007bbe:	b9d0      	cbnz	r0, 8007bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8007bc0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007bc4:	d0f3      	beq.n	8007bae <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bc6:	f7ff fb11 	bl	80071ec <HAL_GetTick>
 8007bca:	1b80      	subs	r0, r0, r6
 8007bcc:	42a8      	cmp	r0, r5
 8007bce:	d801      	bhi.n	8007bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8007bd0:	2d00      	cmp	r5, #0
 8007bd2:	d1ec      	bne.n	8007bae <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bde:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007be2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007be4:	f042 0220 	orr.w	r2, r2, #32
 8007be8:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007bea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8007bee:	2001      	movs	r0, #1
 8007bf0:	e000      	b.n	8007bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8007bf2:	2000      	movs	r0, #0
}
 8007bf4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	e7fc      	b.n	8007bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08007bfc <I2C_RequestMemoryWrite>:
{
 8007bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	4604      	mov	r4, r0
 8007c04:	4688      	mov	r8, r1
 8007c06:	4616      	mov	r6, r2
 8007c08:	461f      	mov	r7, r3
 8007c0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c0c:	6802      	ldr	r2, [r0, #0]
 8007c0e:	6813      	ldr	r3, [r2, #0]
 8007c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c14:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c16:	9500      	str	r5, [sp, #0]
 8007c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c20:	f7ff ff37 	bl	8007a92 <I2C_WaitOnFlagUntilTimeout>
 8007c24:	b160      	cbz	r0, 8007c40 <I2C_RequestMemoryWrite+0x44>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007c2e:	d04f      	beq.n	8007cd0 <I2C_RequestMemoryWrite+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c34:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	b004      	add	sp, #16
 8007c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c40:	6822      	ldr	r2, [r4, #0]
 8007c42:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8007c46:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c48:	462b      	mov	r3, r5
 8007c4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c4c:	4921      	ldr	r1, [pc, #132]	; (8007cd4 <I2C_RequestMemoryWrite+0xd8>)
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f7ff ff57 	bl	8007b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c54:	b108      	cbz	r0, 8007c5a <I2C_RequestMemoryWrite+0x5e>
    return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e7ee      	b.n	8007c38 <I2C_RequestMemoryWrite+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	9303      	str	r3, [sp, #12]
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	695a      	ldr	r2, [r3, #20]
 8007c62:	9203      	str	r2, [sp, #12]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	9303      	str	r3, [sp, #12]
 8007c68:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c6a:	462a      	mov	r2, r5
 8007c6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f7ff ff99 	bl	8007ba6 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c74:	4603      	mov	r3, r0
 8007c76:	b158      	cbz	r0, 8007c90 <I2C_RequestMemoryWrite+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d001      	beq.n	8007c82 <I2C_RequestMemoryWrite+0x86>
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e7da      	b.n	8007c38 <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c82:	6822      	ldr	r2, [r4, #0]
 8007c84:	6813      	ldr	r3, [r2, #0]
 8007c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c8a:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e7d3      	b.n	8007c38 <I2C_RequestMemoryWrite+0x3c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c90:	2f01      	cmp	r7, #1
 8007c92:	d00e      	beq.n	8007cb2 <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	0a32      	lsrs	r2, r6, #8
 8007c98:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c9a:	462a      	mov	r2, r5
 8007c9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f7ff ff81 	bl	8007ba6 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	b178      	cbz	r0, 8007cc8 <I2C_RequestMemoryWrite+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ca8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d005      	beq.n	8007cba <I2C_RequestMemoryWrite+0xbe>
      return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e7c2      	b.n	8007c38 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007cb2:	6822      	ldr	r2, [r4, #0]
 8007cb4:	b2f6      	uxtb	r6, r6
 8007cb6:	6116      	str	r6, [r2, #16]
 8007cb8:	e7be      	b.n	8007c38 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cba:	6822      	ldr	r2, [r4, #0]
 8007cbc:	6813      	ldr	r3, [r2, #0]
 8007cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007cc2:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e7b7      	b.n	8007c38 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007cc8:	6822      	ldr	r2, [r4, #0]
 8007cca:	b2f6      	uxtb	r6, r6
 8007ccc:	6116      	str	r6, [r2, #16]
 8007cce:	e7b3      	b.n	8007c38 <I2C_RequestMemoryWrite+0x3c>
    return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e7b1      	b.n	8007c38 <I2C_RequestMemoryWrite+0x3c>
 8007cd4:	00010002 	.word	0x00010002

08007cd8 <I2C_RequestMemoryRead>:
{
 8007cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	4604      	mov	r4, r0
 8007ce0:	460e      	mov	r6, r1
 8007ce2:	4617      	mov	r7, r2
 8007ce4:	4698      	mov	r8, r3
 8007ce6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ce8:	6802      	ldr	r2, [r0, #0]
 8007cea:	6813      	ldr	r3, [r2, #0]
 8007cec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007cf0:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cf2:	6802      	ldr	r2, [r0, #0]
 8007cf4:	6813      	ldr	r3, [r2, #0]
 8007cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cfa:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cfc:	9500      	str	r5, [sp, #0]
 8007cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d00:	2200      	movs	r2, #0
 8007d02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d06:	f7ff fec4 	bl	8007a92 <I2C_WaitOnFlagUntilTimeout>
 8007d0a:	b168      	cbz	r0, 8007d28 <I2C_RequestMemoryRead+0x50>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007d14:	f000 8089 	beq.w	8007e2a <I2C_RequestMemoryRead+0x152>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d1c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	b004      	add	sp, #16
 8007d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d28:	b2f6      	uxtb	r6, r6
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 8007d30:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d32:	462b      	mov	r3, r5
 8007d34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d36:	493f      	ldr	r1, [pc, #252]	; (8007e34 <I2C_RequestMemoryRead+0x15c>)
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f7ff fee2 	bl	8007b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d3e:	b108      	cbz	r0, 8007d44 <I2C_RequestMemoryRead+0x6c>
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e7ed      	b.n	8007d20 <I2C_RequestMemoryRead+0x48>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d44:	2300      	movs	r3, #0
 8007d46:	9303      	str	r3, [sp, #12]
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	695a      	ldr	r2, [r3, #20]
 8007d4c:	9203      	str	r2, [sp, #12]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	9303      	str	r3, [sp, #12]
 8007d52:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d54:	462a      	mov	r2, r5
 8007d56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f7ff ff24 	bl	8007ba6 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d5e:	b158      	cbz	r0, 8007d78 <I2C_RequestMemoryRead+0xa0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d001      	beq.n	8007d6a <I2C_RequestMemoryRead+0x92>
    return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e7da      	b.n	8007d20 <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d6a:	6822      	ldr	r2, [r4, #0]
 8007d6c:	6813      	ldr	r3, [r2, #0]
 8007d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d72:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e7d3      	b.n	8007d20 <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d78:	f1b8 0f01 	cmp.w	r8, #1
 8007d7c:	d10d      	bne.n	8007d9a <I2C_RequestMemoryRead+0xc2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	b2ff      	uxtb	r7, r7
 8007d82:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d84:	462a      	mov	r2, r5
 8007d86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f7ff ff0c 	bl	8007ba6 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d8e:	b320      	cbz	r0, 8007dda <I2C_RequestMemoryRead+0x102>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d01a      	beq.n	8007dcc <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e7c2      	b.n	8007d20 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	0a3a      	lsrs	r2, r7, #8
 8007d9e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007da0:	462a      	mov	r2, r5
 8007da2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007da4:	4620      	mov	r0, r4
 8007da6:	f7ff fefe 	bl	8007ba6 <I2C_WaitOnTXEFlagUntilTimeout>
 8007daa:	b158      	cbz	r0, 8007dc4 <I2C_RequestMemoryRead+0xec>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d001      	beq.n	8007db6 <I2C_RequestMemoryRead+0xde>
      return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e7b4      	b.n	8007d20 <I2C_RequestMemoryRead+0x48>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007db6:	6822      	ldr	r2, [r4, #0]
 8007db8:	6813      	ldr	r3, [r2, #0]
 8007dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007dbe:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e7ad      	b.n	8007d20 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	b2ff      	uxtb	r7, r7
 8007dc8:	611f      	str	r7, [r3, #16]
 8007dca:	e7db      	b.n	8007d84 <I2C_RequestMemoryRead+0xac>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dcc:	6822      	ldr	r2, [r4, #0]
 8007dce:	6813      	ldr	r3, [r2, #0]
 8007dd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007dd4:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e7a2      	b.n	8007d20 <I2C_RequestMemoryRead+0x48>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dda:	6822      	ldr	r2, [r4, #0]
 8007ddc:	6813      	ldr	r3, [r2, #0]
 8007dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007de2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007de4:	9500      	str	r5, [sp, #0]
 8007de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de8:	2200      	movs	r2, #0
 8007dea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007dee:	4620      	mov	r0, r4
 8007df0:	f7ff fe4f 	bl	8007a92 <I2C_WaitOnFlagUntilTimeout>
 8007df4:	b148      	cbz	r0, 8007e0a <I2C_RequestMemoryRead+0x132>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007dfe:	d016      	beq.n	8007e2e <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e04:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e78a      	b.n	8007d20 <I2C_RequestMemoryRead+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	f046 0601 	orr.w	r6, r6, #1
 8007e10:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e12:	462b      	mov	r3, r5
 8007e14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e16:	4907      	ldr	r1, [pc, #28]	; (8007e34 <I2C_RequestMemoryRead+0x15c>)
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f7ff fe72 	bl	8007b02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2800      	cmp	r0, #0
 8007e22:	f43f af7d 	beq.w	8007d20 <I2C_RequestMemoryRead+0x48>
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e77a      	b.n	8007d20 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e778      	b.n	8007d20 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e776      	b.n	8007d20 <I2C_RequestMemoryRead+0x48>
 8007e32:	bf00      	nop
 8007e34:	00010002 	.word	0x00010002

08007e38 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8007e38:	b570      	push	{r4, r5, r6, lr}
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	460d      	mov	r5, r1
 8007e3e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	f013 0f04 	tst.w	r3, #4
 8007e48:	d11c      	bne.n	8007e84 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f7ff fe08 	bl	8007a60 <I2C_IsAcknowledgeFailed>
 8007e50:	b9d0      	cbnz	r0, 8007e88 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8007e52:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007e56:	d0f3      	beq.n	8007e40 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e58:	f7ff f9c8 	bl	80071ec <HAL_GetTick>
 8007e5c:	1b80      	subs	r0, r0, r6
 8007e5e:	42a8      	cmp	r0, r5
 8007e60:	d801      	bhi.n	8007e66 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8007e62:	2d00      	cmp	r5, #0
 8007e64:	d1ec      	bne.n	8007e40 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e66:	2300      	movs	r3, #0
 8007e68:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e70:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e74:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007e76:	f042 0220 	orr.w	r2, r2, #32
 8007e7a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007e7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8007e80:	2001      	movs	r0, #1
 8007e82:	e000      	b.n	8007e86 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8007e84:	2000      	movs	r0, #0
}
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007e88:	2001      	movs	r0, #1
 8007e8a:	e7fc      	b.n	8007e86 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08007e8c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	4605      	mov	r5, r0
 8007e90:	460c      	mov	r4, r1
 8007e92:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	695a      	ldr	r2, [r3, #20]
 8007e98:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007e9c:	d129      	bne.n	8007ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e9e:	695a      	ldr	r2, [r3, #20]
 8007ea0:	f012 0f10 	tst.w	r2, #16
 8007ea4:	d115      	bne.n	8007ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ea6:	f7ff f9a1 	bl	80071ec <HAL_GetTick>
 8007eaa:	1b80      	subs	r0, r0, r6
 8007eac:	42a0      	cmp	r0, r4
 8007eae:	d801      	bhi.n	8007eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8007eb0:	2c00      	cmp	r4, #0
 8007eb2:	d1ef      	bne.n	8007e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ebe:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ec2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8007ec4:	f042 0220 	orr.w	r2, r2, #32
 8007ec8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8007eca:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8007ece:	2001      	movs	r0, #1
}
 8007ed0:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ed2:	f06f 0210 	mvn.w	r2, #16
 8007ed6:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007edc:	2220      	movs	r2, #32
 8007ede:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ee2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007ee6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8007ee8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8007eea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8007eee:	2001      	movs	r0, #1
 8007ef0:	e7ee      	b.n	8007ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	e7ec      	b.n	8007ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08007ef8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	f000 80c8 	beq.w	800808e <HAL_I2C_Init+0x196>
{
 8007efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f00:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d075      	beq.n	8007ff6 <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f0a:	2324      	movs	r3, #36	; 0x24
 8007f0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8007f10:	6822      	ldr	r2, [r4, #0]
 8007f12:	6813      	ldr	r3, [r2, #0]
 8007f14:	f023 0301 	bic.w	r3, r3, #1
 8007f18:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007f1a:	6822      	ldr	r2, [r4, #0]
 8007f1c:	6813      	ldr	r3, [r2, #0]
 8007f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f22:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007f24:	6822      	ldr	r2, [r4, #0]
 8007f26:	6813      	ldr	r3, [r2, #0]
 8007f28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f2c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007f2e:	f000 fea7 	bl	8008c80 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007f32:	6862      	ldr	r2, [r4, #4]
 8007f34:	4b58      	ldr	r3, [pc, #352]	; (8008098 <HAL_I2C_Init+0x1a0>)
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d862      	bhi.n	8008000 <HAL_I2C_Init+0x108>
 8007f3a:	4b58      	ldr	r3, [pc, #352]	; (800809c <HAL_I2C_Init+0x1a4>)
 8007f3c:	4298      	cmp	r0, r3
 8007f3e:	bf8c      	ite	hi
 8007f40:	2300      	movhi	r3, #0
 8007f42:	2301      	movls	r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f040 80a4 	bne.w	8008092 <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 8007f4a:	4b55      	ldr	r3, [pc, #340]	; (80080a0 <HAL_I2C_Init+0x1a8>)
 8007f4c:	fba3 2300 	umull	r2, r3, r3, r0
 8007f50:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007f52:	6821      	ldr	r1, [r4, #0]
 8007f54:	684a      	ldr	r2, [r1, #4]
 8007f56:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007f5e:	6825      	ldr	r5, [r4, #0]
 8007f60:	6a2a      	ldr	r2, [r5, #32]
 8007f62:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8007f66:	6866      	ldr	r6, [r4, #4]
 8007f68:	494b      	ldr	r1, [pc, #300]	; (8008098 <HAL_I2C_Init+0x1a0>)
 8007f6a:	428e      	cmp	r6, r1
 8007f6c:	d84e      	bhi.n	800800c <HAL_I2C_Init+0x114>
 8007f6e:	3301      	adds	r3, #1
 8007f70:	4313      	orrs	r3, r2
 8007f72:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007f74:	6825      	ldr	r5, [r4, #0]
 8007f76:	69e9      	ldr	r1, [r5, #28]
 8007f78:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8007f7c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8007f80:	6863      	ldr	r3, [r4, #4]
 8007f82:	4a45      	ldr	r2, [pc, #276]	; (8008098 <HAL_I2C_Init+0x1a0>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d84b      	bhi.n	8008020 <HAL_I2C_Init+0x128>
 8007f88:	3801      	subs	r0, #1
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f90:	3301      	adds	r3, #1
 8007f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f96:	2b04      	cmp	r3, #4
 8007f98:	bf38      	it	cc
 8007f9a:	2304      	movcc	r3, #4
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007fa0:	6821      	ldr	r1, [r4, #0]
 8007fa2:	680b      	ldr	r3, [r1, #0]
 8007fa4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007fa8:	69e2      	ldr	r2, [r4, #28]
 8007faa:	6a20      	ldr	r0, [r4, #32]
 8007fac:	4302      	orrs	r2, r0
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007fb2:	6821      	ldr	r1, [r4, #0]
 8007fb4:	688b      	ldr	r3, [r1, #8]
 8007fb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007fba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007fbe:	6922      	ldr	r2, [r4, #16]
 8007fc0:	68e0      	ldr	r0, [r4, #12]
 8007fc2:	4302      	orrs	r2, r0
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007fc8:	6821      	ldr	r1, [r4, #0]
 8007fca:	68cb      	ldr	r3, [r1, #12]
 8007fcc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007fd0:	6962      	ldr	r2, [r4, #20]
 8007fd2:	69a0      	ldr	r0, [r4, #24]
 8007fd4:	4302      	orrs	r2, r0
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8007fda:	6822      	ldr	r2, [r4, #0]
 8007fdc:	6813      	ldr	r3, [r2, #0]
 8007fde:	f043 0301 	orr.w	r3, r3, #1
 8007fe2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007fe8:	2320      	movs	r3, #32
 8007fea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fee:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ff0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8007ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8007ff6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8007ffa:	f7fe f9e9 	bl	80063d0 <HAL_I2C_MspInit>
 8007ffe:	e784      	b.n	8007f0a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008000:	4b28      	ldr	r3, [pc, #160]	; (80080a4 <HAL_I2C_Init+0x1ac>)
 8008002:	4298      	cmp	r0, r3
 8008004:	bf8c      	ite	hi
 8008006:	2300      	movhi	r3, #0
 8008008:	2301      	movls	r3, #1
 800800a:	e79b      	b.n	8007f44 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800800c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008010:	fb01 f303 	mul.w	r3, r1, r3
 8008014:	4924      	ldr	r1, [pc, #144]	; (80080a8 <HAL_I2C_Init+0x1b0>)
 8008016:	fba1 1303 	umull	r1, r3, r1, r3
 800801a:	099b      	lsrs	r3, r3, #6
 800801c:	3301      	adds	r3, #1
 800801e:	e7a7      	b.n	8007f70 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008020:	68a2      	ldr	r2, [r4, #8]
 8008022:	b9ba      	cbnz	r2, 8008054 <HAL_I2C_Init+0x15c>
 8008024:	1e46      	subs	r6, r0, #1
 8008026:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800802a:	fbb6 f6f7 	udiv	r6, r6, r7
 800802e:	3601      	adds	r6, #1
 8008030:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8008034:	fab6 f686 	clz	r6, r6
 8008038:	0976      	lsrs	r6, r6, #5
 800803a:	bb36      	cbnz	r6, 800808a <HAL_I2C_Init+0x192>
 800803c:	b9c2      	cbnz	r2, 8008070 <HAL_I2C_Init+0x178>
 800803e:	3801      	subs	r0, #1
 8008040:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008044:	fbb0 f3f3 	udiv	r3, r0, r3
 8008048:	3301      	adds	r3, #1
 800804a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800804e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8008052:	e7a3      	b.n	8007f9c <HAL_I2C_Init+0xa4>
 8008054:	1e46      	subs	r6, r0, #1
 8008056:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800805a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800805e:	fbb6 f6f7 	udiv	r6, r6, r7
 8008062:	3601      	adds	r6, #1
 8008064:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8008068:	fab6 f686 	clz	r6, r6
 800806c:	0976      	lsrs	r6, r6, #5
 800806e:	e7e4      	b.n	800803a <HAL_I2C_Init+0x142>
 8008070:	3801      	subs	r0, #1
 8008072:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008076:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800807a:	fbb0 f2f3 	udiv	r2, r0, r3
 800807e:	3201      	adds	r2, #1
 8008080:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008084:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8008088:	e788      	b.n	8007f9c <HAL_I2C_Init+0xa4>
 800808a:	2301      	movs	r3, #1
 800808c:	e786      	b.n	8007f9c <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 800808e:	2001      	movs	r0, #1
}
 8008090:	4770      	bx	lr
    return HAL_ERROR;
 8008092:	2001      	movs	r0, #1
 8008094:	e7ae      	b.n	8007ff4 <HAL_I2C_Init+0xfc>
 8008096:	bf00      	nop
 8008098:	000186a0 	.word	0x000186a0
 800809c:	001e847f 	.word	0x001e847f
 80080a0:	431bde83 	.word	0x431bde83
 80080a4:	003d08ff 	.word	0x003d08ff
 80080a8:	10624dd3 	.word	0x10624dd3

080080ac <HAL_I2C_Mem_Write>:
{
 80080ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b0:	b082      	sub	sp, #8
 80080b2:	4604      	mov	r4, r0
 80080b4:	460e      	mov	r6, r1
 80080b6:	4617      	mov	r7, r2
 80080b8:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 80080ba:	f7ff f897 	bl	80071ec <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80080be:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	d004      	beq.n	80080d2 <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 80080c8:	2302      	movs	r3, #2
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	b002      	add	sp, #8
 80080ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80080d4:	9000      	str	r0, [sp, #0]
 80080d6:	2319      	movs	r3, #25
 80080d8:	2201      	movs	r2, #1
 80080da:	494c      	ldr	r1, [pc, #304]	; (800820c <HAL_I2C_Mem_Write+0x160>)
 80080dc:	4620      	mov	r0, r4
 80080de:	f7ff fcd8 	bl	8007a92 <I2C_WaitOnFlagUntilTimeout>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	f040 808b 	bne.w	80081fe <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 80080e8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	f000 8088 	beq.w	8008202 <HAL_I2C_Mem_Write+0x156>
 80080f2:	2301      	movs	r3, #1
 80080f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	f012 0f01 	tst.w	r2, #1
 8008100:	d103      	bne.n	800810a <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	f042 0201 	orr.w	r2, r2, #1
 8008108:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800810a:	6822      	ldr	r2, [r4, #0]
 800810c:	6813      	ldr	r3, [r2, #0]
 800810e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008112:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008114:	2321      	movs	r3, #33	; 0x21
 8008116:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800811a:	2340      	movs	r3, #64	; 0x40
 800811c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008120:	2300      	movs	r3, #0
 8008122:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8008124:	9b08      	ldr	r3, [sp, #32]
 8008126:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008128:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800812c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800812e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008130:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008132:	4b37      	ldr	r3, [pc, #220]	; (8008210 <HAL_I2C_Mem_Write+0x164>)
 8008134:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008136:	9501      	str	r5, [sp, #4]
 8008138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	4643      	mov	r3, r8
 800813e:	463a      	mov	r2, r7
 8008140:	4631      	mov	r1, r6
 8008142:	4620      	mov	r0, r4
 8008144:	f7ff fd5a 	bl	8007bfc <I2C_RequestMemoryWrite>
 8008148:	2800      	cmp	r0, #0
 800814a:	d15c      	bne.n	8008206 <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 800814c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800814e:	2b00      	cmp	r3, #0
 8008150:	d034      	beq.n	80081bc <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008152:	462a      	mov	r2, r5
 8008154:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008156:	4620      	mov	r0, r4
 8008158:	f7ff fd25 	bl	8007ba6 <I2C_WaitOnTXEFlagUntilTimeout>
 800815c:	bb10      	cbnz	r0, 80081a4 <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800815e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	7812      	ldrb	r2, [r2, #0]
 8008164:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008166:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008168:	1c4b      	adds	r3, r1, #1
 800816a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800816c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800816e:	3b01      	subs	r3, #1
 8008170:	b29b      	uxth	r3, r3
 8008172:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008174:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008176:	3a01      	subs	r2, #1
 8008178:	b292      	uxth	r2, r2
 800817a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800817c:	6822      	ldr	r2, [r4, #0]
 800817e:	6950      	ldr	r0, [r2, #20]
 8008180:	f010 0f04 	tst.w	r0, #4
 8008184:	d0e2      	beq.n	800814c <HAL_I2C_Mem_Write+0xa0>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0e0      	beq.n	800814c <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800818a:	784b      	ldrb	r3, [r1, #1]
 800818c:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800818e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008190:	3301      	adds	r3, #1
 8008192:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8008194:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008196:	3b01      	subs	r3, #1
 8008198:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800819a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800819c:	3b01      	subs	r3, #1
 800819e:	b29b      	uxth	r3, r3
 80081a0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80081a2:	e7d3      	b.n	800814c <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d001      	beq.n	80081ae <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e78d      	b.n	80080ca <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ae:	6822      	ldr	r2, [r4, #0]
 80081b0:	6813      	ldr	r3, [r2, #0]
 80081b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081b6:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e786      	b.n	80080ca <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081bc:	462a      	mov	r2, r5
 80081be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081c0:	4620      	mov	r0, r4
 80081c2:	f7ff fe39 	bl	8007e38 <I2C_WaitOnBTFFlagUntilTimeout>
 80081c6:	4603      	mov	r3, r0
 80081c8:	b158      	cbz	r0, 80081e2 <HAL_I2C_Mem_Write+0x136>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	d001      	beq.n	80081d4 <HAL_I2C_Mem_Write+0x128>
      return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e77a      	b.n	80080ca <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d4:	6822      	ldr	r2, [r4, #0]
 80081d6:	6813      	ldr	r3, [r2, #0]
 80081d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081dc:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e773      	b.n	80080ca <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e2:	6821      	ldr	r1, [r4, #0]
 80081e4:	680a      	ldr	r2, [r1, #0]
 80081e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081ea:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80081ec:	2220      	movs	r2, #32
 80081ee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80081f2:	2200      	movs	r2, #0
 80081f4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80081f8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 80081fc:	e765      	b.n	80080ca <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 80081fe:	2302      	movs	r3, #2
 8008200:	e763      	b.n	80080ca <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 8008202:	2302      	movs	r3, #2
 8008204:	e761      	b.n	80080ca <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e75f      	b.n	80080ca <HAL_I2C_Mem_Write+0x1e>
 800820a:	bf00      	nop
 800820c:	00100002 	.word	0x00100002
 8008210:	ffff0000 	.word	0xffff0000

08008214 <HAL_I2C_Mem_Read>:
{
 8008214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008218:	b086      	sub	sp, #24
 800821a:	4604      	mov	r4, r0
 800821c:	460e      	mov	r6, r1
 800821e:	4617      	mov	r7, r2
 8008220:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8008222:	f7fe ffe3 	bl	80071ec <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008226:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b20      	cmp	r3, #32
 800822e:	d004      	beq.n	800823a <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8008230:	2602      	movs	r6, #2
}
 8008232:	4630      	mov	r0, r6
 8008234:	b006      	add	sp, #24
 8008236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800823a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800823c:	9000      	str	r0, [sp, #0]
 800823e:	2319      	movs	r3, #25
 8008240:	2201      	movs	r2, #1
 8008242:	499e      	ldr	r1, [pc, #632]	; (80084bc <HAL_I2C_Mem_Read+0x2a8>)
 8008244:	4620      	mov	r0, r4
 8008246:	f7ff fc24 	bl	8007a92 <I2C_WaitOnFlagUntilTimeout>
 800824a:	2800      	cmp	r0, #0
 800824c:	f040 8134 	bne.w	80084b8 <HAL_I2C_Mem_Read+0x2a4>
    __HAL_LOCK(hi2c);
 8008250:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008254:	2b01      	cmp	r3, #1
 8008256:	f000 8137 	beq.w	80084c8 <HAL_I2C_Mem_Read+0x2b4>
 800825a:	2301      	movs	r3, #1
 800825c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	f012 0f01 	tst.w	r2, #1
 8008268:	d103      	bne.n	8008272 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	f042 0201 	orr.w	r2, r2, #1
 8008270:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008272:	6822      	ldr	r2, [r4, #0]
 8008274:	6813      	ldr	r3, [r2, #0]
 8008276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800827a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800827c:	2322      	movs	r3, #34	; 0x22
 800827e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008282:	2340      	movs	r3, #64	; 0x40
 8008284:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008288:	2300      	movs	r3, #0
 800828a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800828c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800828e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008290:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8008294:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008296:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008298:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800829a:	4b89      	ldr	r3, [pc, #548]	; (80084c0 <HAL_I2C_Mem_Read+0x2ac>)
 800829c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800829e:	9501      	str	r5, [sp, #4]
 80082a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	4643      	mov	r3, r8
 80082a6:	463a      	mov	r2, r7
 80082a8:	4631      	mov	r1, r6
 80082aa:	4620      	mov	r0, r4
 80082ac:	f7ff fd14 	bl	8007cd8 <I2C_RequestMemoryRead>
 80082b0:	4606      	mov	r6, r0
 80082b2:	2800      	cmp	r0, #0
 80082b4:	f040 810a 	bne.w	80084cc <HAL_I2C_Mem_Read+0x2b8>
    if (hi2c->XferSize == 0U)
 80082b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80082ba:	b95b      	cbnz	r3, 80082d4 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082bc:	9302      	str	r3, [sp, #8]
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	695a      	ldr	r2, [r3, #20]
 80082c2:	9202      	str	r2, [sp, #8]
 80082c4:	699a      	ldr	r2, [r3, #24]
 80082c6:	9202      	str	r2, [sp, #8]
 80082c8:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	e072      	b.n	80083ba <HAL_I2C_Mem_Read+0x1a6>
    else if (hi2c->XferSize == 1U)
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d00a      	beq.n	80082ee <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d01a      	beq.n	8008312 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082dc:	2300      	movs	r3, #0
 80082de:	9305      	str	r3, [sp, #20]
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	695a      	ldr	r2, [r3, #20]
 80082e4:	9205      	str	r2, [sp, #20]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	9305      	str	r3, [sp, #20]
 80082ea:	9b05      	ldr	r3, [sp, #20]
 80082ec:	e065      	b.n	80083ba <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ee:	6822      	ldr	r2, [r4, #0]
 80082f0:	6813      	ldr	r3, [r2, #0]
 80082f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082f6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082f8:	2300      	movs	r3, #0
 80082fa:	9303      	str	r3, [sp, #12]
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	695a      	ldr	r2, [r3, #20]
 8008300:	9203      	str	r2, [sp, #12]
 8008302:	699a      	ldr	r2, [r3, #24]
 8008304:	9203      	str	r2, [sp, #12]
 8008306:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	e053      	b.n	80083ba <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	6813      	ldr	r3, [r2, #0]
 8008316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800831a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800831c:	6822      	ldr	r2, [r4, #0]
 800831e:	6813      	ldr	r3, [r2, #0]
 8008320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008324:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008326:	2300      	movs	r3, #0
 8008328:	9304      	str	r3, [sp, #16]
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	695a      	ldr	r2, [r3, #20]
 800832e:	9204      	str	r2, [sp, #16]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	9304      	str	r3, [sp, #16]
 8008334:	9b04      	ldr	r3, [sp, #16]
 8008336:	e040      	b.n	80083ba <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008338:	462a      	mov	r2, r5
 800833a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800833c:	4620      	mov	r0, r4
 800833e:	f7ff fda5 	bl	8007e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008342:	2800      	cmp	r0, #0
 8008344:	f040 80c4 	bne.w	80084d0 <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	691a      	ldr	r2, [r3, #16]
 800834c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800834e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008352:	3301      	adds	r3, #1
 8008354:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008356:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008358:	3b01      	subs	r3, #1
 800835a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800835c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800835e:	3b01      	subs	r3, #1
 8008360:	b29b      	uxth	r3, r3
 8008362:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008364:	e029      	b.n	80083ba <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008366:	9500      	str	r5, [sp, #0]
 8008368:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800836a:	2200      	movs	r2, #0
 800836c:	4955      	ldr	r1, [pc, #340]	; (80084c4 <HAL_I2C_Mem_Read+0x2b0>)
 800836e:	4620      	mov	r0, r4
 8008370:	f7ff fb8f 	bl	8007a92 <I2C_WaitOnFlagUntilTimeout>
 8008374:	2800      	cmp	r0, #0
 8008376:	f040 80ad 	bne.w	80084d4 <HAL_I2C_Mem_Read+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800837a:	6822      	ldr	r2, [r4, #0]
 800837c:	6813      	ldr	r3, [r2, #0]
 800837e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008382:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800838a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800838c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800838e:	1c53      	adds	r3, r2, #1
 8008390:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008392:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008394:	3b01      	subs	r3, #1
 8008396:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008398:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800839a:	3b01      	subs	r3, #1
 800839c:	b29b      	uxth	r3, r3
 800839e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80083a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083a8:	3301      	adds	r3, #1
 80083aa:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80083ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80083ae:	3b01      	subs	r3, #1
 80083b0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80083b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80083ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d072      	beq.n	80084a6 <HAL_I2C_Mem_Read+0x292>
      if (hi2c->XferSize <= 3U)
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d849      	bhi.n	8008458 <HAL_I2C_Mem_Read+0x244>
        if (hi2c->XferSize == 1U)
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d0b7      	beq.n	8008338 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d0cc      	beq.n	8008366 <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083cc:	9500      	str	r5, [sp, #0]
 80083ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083d0:	2200      	movs	r2, #0
 80083d2:	493c      	ldr	r1, [pc, #240]	; (80084c4 <HAL_I2C_Mem_Read+0x2b0>)
 80083d4:	4620      	mov	r0, r4
 80083d6:	f7ff fb5c 	bl	8007a92 <I2C_WaitOnFlagUntilTimeout>
 80083da:	2800      	cmp	r0, #0
 80083dc:	d17c      	bne.n	80084d8 <HAL_I2C_Mem_Read+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083de:	6822      	ldr	r2, [r4, #0]
 80083e0:	6813      	ldr	r3, [r2, #0]
 80083e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083e6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	691a      	ldr	r2, [r3, #16]
 80083ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083ee:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80083f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083f2:	3301      	adds	r3, #1
 80083f4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80083f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80083f8:	3b01      	subs	r3, #1
 80083fa:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80083fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80083fe:	3b01      	subs	r3, #1
 8008400:	b29b      	uxth	r3, r3
 8008402:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008404:	9500      	str	r5, [sp, #0]
 8008406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008408:	2200      	movs	r2, #0
 800840a:	492e      	ldr	r1, [pc, #184]	; (80084c4 <HAL_I2C_Mem_Read+0x2b0>)
 800840c:	4620      	mov	r0, r4
 800840e:	f7ff fb40 	bl	8007a92 <I2C_WaitOnFlagUntilTimeout>
 8008412:	2800      	cmp	r0, #0
 8008414:	d162      	bne.n	80084dc <HAL_I2C_Mem_Read+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008416:	6822      	ldr	r2, [r4, #0]
 8008418:	6813      	ldr	r3, [r2, #0]
 800841a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800841e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	691a      	ldr	r2, [r3, #16]
 8008424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008426:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008428:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800842a:	1c53      	adds	r3, r2, #1
 800842c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800842e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008430:	3b01      	subs	r3, #1
 8008432:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008434:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008436:	3b01      	subs	r3, #1
 8008438:	b29b      	uxth	r3, r3
 800843a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800843c:	6823      	ldr	r3, [r4, #0]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8008442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008444:	3301      	adds	r3, #1
 8008446:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008448:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800844a:	3b01      	subs	r3, #1
 800844c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800844e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008450:	3b01      	subs	r3, #1
 8008452:	b29b      	uxth	r3, r3
 8008454:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008456:	e7b0      	b.n	80083ba <HAL_I2C_Mem_Read+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008458:	462a      	mov	r2, r5
 800845a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800845c:	4620      	mov	r0, r4
 800845e:	f7ff fd15 	bl	8007e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008462:	2800      	cmp	r0, #0
 8008464:	d13c      	bne.n	80084e0 <HAL_I2C_Mem_Read+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	691a      	ldr	r2, [r3, #16]
 800846a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800846c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800846e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008470:	1c53      	adds	r3, r2, #1
 8008472:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8008474:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008476:	3b01      	subs	r3, #1
 8008478:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800847a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800847c:	3b01      	subs	r3, #1
 800847e:	b29b      	uxth	r3, r3
 8008480:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	6959      	ldr	r1, [r3, #20]
 8008486:	f011 0f04 	tst.w	r1, #4
 800848a:	d096      	beq.n	80083ba <HAL_I2C_Mem_Read+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8008490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008492:	3301      	adds	r3, #1
 8008494:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008496:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008498:	3b01      	subs	r3, #1
 800849a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800849c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800849e:	3b01      	subs	r3, #1
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80084a4:	e789      	b.n	80083ba <HAL_I2C_Mem_Read+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80084a6:	2320      	movs	r3, #32
 80084a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084ac:	2300      	movs	r3, #0
 80084ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80084b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80084b6:	e6bc      	b.n	8008232 <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 80084b8:	2602      	movs	r6, #2
 80084ba:	e6ba      	b.n	8008232 <HAL_I2C_Mem_Read+0x1e>
 80084bc:	00100002 	.word	0x00100002
 80084c0:	ffff0000 	.word	0xffff0000
 80084c4:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 80084c8:	2602      	movs	r6, #2
 80084ca:	e6b2      	b.n	8008232 <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 80084cc:	2601      	movs	r6, #1
 80084ce:	e6b0      	b.n	8008232 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80084d0:	2601      	movs	r6, #1
 80084d2:	e6ae      	b.n	8008232 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80084d4:	2601      	movs	r6, #1
 80084d6:	e6ac      	b.n	8008232 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80084d8:	2601      	movs	r6, #1
 80084da:	e6aa      	b.n	8008232 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80084dc:	2601      	movs	r6, #1
 80084de:	e6a8      	b.n	8008232 <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 80084e0:	2601      	movs	r6, #1
 80084e2:	e6a6      	b.n	8008232 <HAL_I2C_Mem_Read+0x1e>

080084e4 <HAL_I2C_IsDeviceReady>:
{
 80084e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084e8:	b085      	sub	sp, #20
 80084ea:	4604      	mov	r4, r0
 80084ec:	4688      	mov	r8, r1
 80084ee:	4691      	mov	r9, r2
 80084f0:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80084f2:	f7fe fe7b 	bl	80071ec <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80084f6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	d004      	beq.n	800850a <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 8008500:	2302      	movs	r3, #2
}
 8008502:	4618      	mov	r0, r3
 8008504:	b005      	add	sp, #20
 8008506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800850a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800850c:	9000      	str	r0, [sp, #0]
 800850e:	2319      	movs	r3, #25
 8008510:	2201      	movs	r2, #1
 8008512:	4959      	ldr	r1, [pc, #356]	; (8008678 <HAL_I2C_IsDeviceReady+0x194>)
 8008514:	4620      	mov	r0, r4
 8008516:	f7ff fabc 	bl	8007a92 <I2C_WaitOnFlagUntilTimeout>
 800851a:	2800      	cmp	r0, #0
 800851c:	f040 80a1 	bne.w	8008662 <HAL_I2C_IsDeviceReady+0x17e>
    __HAL_LOCK(hi2c);
 8008520:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008524:	2b01      	cmp	r3, #1
 8008526:	f000 809e 	beq.w	8008666 <HAL_I2C_IsDeviceReady+0x182>
 800852a:	2301      	movs	r3, #1
 800852c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	f012 0f01 	tst.w	r2, #1
 8008538:	d103      	bne.n	8008542 <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	f042 0201 	orr.w	r2, r2, #1
 8008540:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008542:	6822      	ldr	r2, [r4, #0]
 8008544:	6813      	ldr	r3, [r2, #0]
 8008546:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800854a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800854c:	2324      	movs	r3, #36	; 0x24
 800854e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008552:	2300      	movs	r3, #0
 8008554:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008556:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800855a:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 800855c:	2701      	movs	r7, #1
 800855e:	e03e      	b.n	80085de <HAL_I2C_IsDeviceReady+0xfa>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008568:	d07f      	beq.n	800866a <HAL_I2C_IsDeviceReady+0x186>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800856a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800856e:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e7c6      	b.n	8008502 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008574:	23a0      	movs	r3, #160	; 0xa0
 8008576:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	695a      	ldr	r2, [r3, #20]
 800857e:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008582:	6959      	ldr	r1, [r3, #20]
 8008584:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008588:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2ba0      	cmp	r3, #160	; 0xa0
 8008590:	d009      	beq.n	80085a6 <HAL_I2C_IsDeviceReady+0xc2>
 8008592:	b942      	cbnz	r2, 80085a6 <HAL_I2C_IsDeviceReady+0xc2>
 8008594:	b939      	cbnz	r1, 80085a6 <HAL_I2C_IsDeviceReady+0xc2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008596:	f7fe fe29 	bl	80071ec <HAL_GetTick>
 800859a:	1b80      	subs	r0, r0, r6
 800859c:	42a8      	cmp	r0, r5
 800859e:	d8e9      	bhi.n	8008574 <HAL_I2C_IsDeviceReady+0x90>
 80085a0:	2d00      	cmp	r5, #0
 80085a2:	d1ea      	bne.n	800857a <HAL_I2C_IsDeviceReady+0x96>
 80085a4:	e7e6      	b.n	8008574 <HAL_I2C_IsDeviceReady+0x90>
      hi2c->State = HAL_I2C_STATE_READY;
 80085a6:	2320      	movs	r3, #32
 80085a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	695a      	ldr	r2, [r3, #20]
 80085b0:	f012 0f02 	tst.w	r2, #2
 80085b4:	d131      	bne.n	800861a <HAL_I2C_IsDeviceReady+0x136>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085bc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80085c4:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80085c6:	9600      	str	r6, [sp, #0]
 80085c8:	2319      	movs	r3, #25
 80085ca:	2201      	movs	r2, #1
 80085cc:	492a      	ldr	r1, [pc, #168]	; (8008678 <HAL_I2C_IsDeviceReady+0x194>)
 80085ce:	4620      	mov	r0, r4
 80085d0:	f7ff fa5f 	bl	8007a92 <I2C_WaitOnFlagUntilTimeout>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d14c      	bne.n	8008672 <HAL_I2C_IsDeviceReady+0x18e>
      I2C_Trials++;
 80085d8:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80085da:	454f      	cmp	r7, r9
 80085dc:	d239      	bcs.n	8008652 <HAL_I2C_IsDeviceReady+0x16e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085de:	6822      	ldr	r2, [r4, #0]
 80085e0:	6813      	ldr	r3, [r2, #0]
 80085e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085e6:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80085e8:	9600      	str	r6, [sp, #0]
 80085ea:	462b      	mov	r3, r5
 80085ec:	2200      	movs	r2, #0
 80085ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7ff fa4d 	bl	8007a92 <I2C_WaitOnFlagUntilTimeout>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d1b1      	bne.n	8008560 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8008602:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8008604:	f7fe fdf2 	bl	80071ec <HAL_GetTick>
 8008608:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	695a      	ldr	r2, [r3, #20]
 800860e:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008612:	6959      	ldr	r1, [r3, #20]
 8008614:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008618:	e7b6      	b.n	8008588 <HAL_I2C_IsDeviceReady+0xa4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008620:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008622:	2300      	movs	r3, #0
 8008624:	9303      	str	r3, [sp, #12]
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	695a      	ldr	r2, [r3, #20]
 800862a:	9203      	str	r2, [sp, #12]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	9303      	str	r3, [sp, #12]
 8008630:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008632:	9600      	str	r6, [sp, #0]
 8008634:	2319      	movs	r3, #25
 8008636:	2201      	movs	r2, #1
 8008638:	490f      	ldr	r1, [pc, #60]	; (8008678 <HAL_I2C_IsDeviceReady+0x194>)
 800863a:	4620      	mov	r0, r4
 800863c:	f7ff fa29 	bl	8007a92 <I2C_WaitOnFlagUntilTimeout>
 8008640:	4603      	mov	r3, r0
 8008642:	b9a0      	cbnz	r0, 800866e <HAL_I2C_IsDeviceReady+0x18a>
        hi2c->State = HAL_I2C_STATE_READY;
 8008644:	2220      	movs	r2, #32
 8008646:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800864a:	2200      	movs	r2, #0
 800864c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8008650:	e757      	b.n	8008502 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008652:	2320      	movs	r3, #32
 8008654:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8008658:	2300      	movs	r3, #0
 800865a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e74f      	b.n	8008502 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8008662:	2302      	movs	r3, #2
 8008664:	e74d      	b.n	8008502 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8008666:	2302      	movs	r3, #2
 8008668:	e74b      	b.n	8008502 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e749      	b.n	8008502 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e747      	b.n	8008502 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e745      	b.n	8008502 <HAL_I2C_IsDeviceReady+0x1e>
 8008676:	bf00      	nop
 8008678:	00100002 	.word	0x00100002

0800867c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800867c:	2800      	cmp	r0, #0
 800867e:	f000 81e0 	beq.w	8008a42 <HAL_RCC_OscConfig+0x3c6>
{
 8008682:	b570      	push	{r4, r5, r6, lr}
 8008684:	b082      	sub	sp, #8
 8008686:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008688:	6803      	ldr	r3, [r0, #0]
 800868a:	f013 0f01 	tst.w	r3, #1
 800868e:	d03b      	beq.n	8008708 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008690:	4ba5      	ldr	r3, [pc, #660]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f003 030c 	and.w	r3, r3, #12
 8008698:	2b04      	cmp	r3, #4
 800869a:	d02c      	beq.n	80086f6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800869c:	4ba2      	ldr	r3, [pc, #648]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086a4:	2b08      	cmp	r3, #8
 80086a6:	d021      	beq.n	80086ec <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086a8:	6863      	ldr	r3, [r4, #4]
 80086aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ae:	d04f      	beq.n	8008750 <HAL_RCC_OscConfig+0xd4>
 80086b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086b4:	d052      	beq.n	800875c <HAL_RCC_OscConfig+0xe0>
 80086b6:	4b9c      	ldr	r3, [pc, #624]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80086c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086c8:	6863      	ldr	r3, [r4, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d050      	beq.n	8008770 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086ce:	f7fe fd8d 	bl	80071ec <HAL_GetTick>
 80086d2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086d4:	4b94      	ldr	r3, [pc, #592]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80086dc:	d114      	bne.n	8008708 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086de:	f7fe fd85 	bl	80071ec <HAL_GetTick>
 80086e2:	1b40      	subs	r0, r0, r5
 80086e4:	2864      	cmp	r0, #100	; 0x64
 80086e6:	d9f5      	bls.n	80086d4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80086e8:	2003      	movs	r0, #3
 80086ea:	e1af      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086ec:	4b8e      	ldr	r3, [pc, #568]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80086f4:	d0d8      	beq.n	80086a8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086f6:	4b8c      	ldr	r3, [pc, #560]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80086fe:	d003      	beq.n	8008708 <HAL_RCC_OscConfig+0x8c>
 8008700:	6863      	ldr	r3, [r4, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 819f 	beq.w	8008a46 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	f013 0f02 	tst.w	r3, #2
 800870e:	d055      	beq.n	80087bc <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008710:	4b85      	ldr	r3, [pc, #532]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f013 0f0c 	tst.w	r3, #12
 8008718:	d03e      	beq.n	8008798 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800871a:	4b83      	ldr	r3, [pc, #524]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008722:	2b08      	cmp	r3, #8
 8008724:	d033      	beq.n	800878e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008726:	68e3      	ldr	r3, [r4, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d068      	beq.n	80087fe <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800872c:	4b7f      	ldr	r3, [pc, #508]	; (800892c <HAL_RCC_OscConfig+0x2b0>)
 800872e:	2201      	movs	r2, #1
 8008730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008732:	f7fe fd5b 	bl	80071ec <HAL_GetTick>
 8008736:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008738:	4b7b      	ldr	r3, [pc, #492]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f013 0f02 	tst.w	r3, #2
 8008740:	d154      	bne.n	80087ec <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008742:	f7fe fd53 	bl	80071ec <HAL_GetTick>
 8008746:	1b40      	subs	r0, r0, r5
 8008748:	2802      	cmp	r0, #2
 800874a:	d9f5      	bls.n	8008738 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800874c:	2003      	movs	r0, #3
 800874e:	e17d      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008750:	4a75      	ldr	r2, [pc, #468]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 8008752:	6813      	ldr	r3, [r2, #0]
 8008754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	e7b5      	b.n	80086c8 <HAL_RCC_OscConfig+0x4c>
 800875c:	4b72      	ldr	r3, [pc, #456]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	e7ab      	b.n	80086c8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8008770:	f7fe fd3c 	bl	80071ec <HAL_GetTick>
 8008774:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008776:	4b6c      	ldr	r3, [pc, #432]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800877e:	d0c3      	beq.n	8008708 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008780:	f7fe fd34 	bl	80071ec <HAL_GetTick>
 8008784:	1b40      	subs	r0, r0, r5
 8008786:	2864      	cmp	r0, #100	; 0x64
 8008788:	d9f5      	bls.n	8008776 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800878a:	2003      	movs	r0, #3
 800878c:	e15e      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800878e:	4b66      	ldr	r3, [pc, #408]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008796:	d1c6      	bne.n	8008726 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008798:	4b63      	ldr	r3, [pc, #396]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f013 0f02 	tst.w	r3, #2
 80087a0:	d004      	beq.n	80087ac <HAL_RCC_OscConfig+0x130>
 80087a2:	68e3      	ldr	r3, [r4, #12]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d001      	beq.n	80087ac <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80087a8:	2001      	movs	r0, #1
 80087aa:	e14f      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ac:	4a5e      	ldr	r2, [pc, #376]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 80087ae:	6813      	ldr	r3, [r2, #0]
 80087b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80087b4:	6921      	ldr	r1, [r4, #16]
 80087b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80087ba:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	f013 0f08 	tst.w	r3, #8
 80087c2:	d040      	beq.n	8008846 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087c4:	6963      	ldr	r3, [r4, #20]
 80087c6:	b363      	cbz	r3, 8008822 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087c8:	4b59      	ldr	r3, [pc, #356]	; (8008930 <HAL_RCC_OscConfig+0x2b4>)
 80087ca:	2201      	movs	r2, #1
 80087cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ce:	f7fe fd0d 	bl	80071ec <HAL_GetTick>
 80087d2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087d4:	4b54      	ldr	r3, [pc, #336]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 80087d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087d8:	f013 0f02 	tst.w	r3, #2
 80087dc:	d133      	bne.n	8008846 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087de:	f7fe fd05 	bl	80071ec <HAL_GetTick>
 80087e2:	1b40      	subs	r0, r0, r5
 80087e4:	2802      	cmp	r0, #2
 80087e6:	d9f5      	bls.n	80087d4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80087e8:	2003      	movs	r0, #3
 80087ea:	e12f      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ec:	4a4e      	ldr	r2, [pc, #312]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 80087ee:	6813      	ldr	r3, [r2, #0]
 80087f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80087f4:	6921      	ldr	r1, [r4, #16]
 80087f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80087fa:	6013      	str	r3, [r2, #0]
 80087fc:	e7de      	b.n	80087bc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80087fe:	4b4b      	ldr	r3, [pc, #300]	; (800892c <HAL_RCC_OscConfig+0x2b0>)
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008804:	f7fe fcf2 	bl	80071ec <HAL_GetTick>
 8008808:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800880a:	4b47      	ldr	r3, [pc, #284]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f013 0f02 	tst.w	r3, #2
 8008812:	d0d3      	beq.n	80087bc <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008814:	f7fe fcea 	bl	80071ec <HAL_GetTick>
 8008818:	1b40      	subs	r0, r0, r5
 800881a:	2802      	cmp	r0, #2
 800881c:	d9f5      	bls.n	800880a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800881e:	2003      	movs	r0, #3
 8008820:	e114      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008822:	4b43      	ldr	r3, [pc, #268]	; (8008930 <HAL_RCC_OscConfig+0x2b4>)
 8008824:	2200      	movs	r2, #0
 8008826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008828:	f7fe fce0 	bl	80071ec <HAL_GetTick>
 800882c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800882e:	4b3e      	ldr	r3, [pc, #248]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 8008830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008832:	f013 0f02 	tst.w	r3, #2
 8008836:	d006      	beq.n	8008846 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008838:	f7fe fcd8 	bl	80071ec <HAL_GetTick>
 800883c:	1b40      	subs	r0, r0, r5
 800883e:	2802      	cmp	r0, #2
 8008840:	d9f5      	bls.n	800882e <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8008842:	2003      	movs	r0, #3
 8008844:	e102      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	f013 0f04 	tst.w	r3, #4
 800884c:	d075      	beq.n	800893a <HAL_RCC_OscConfig+0x2be>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800884e:	4b36      	ldr	r3, [pc, #216]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008856:	d131      	bne.n	80088bc <HAL_RCC_OscConfig+0x240>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008858:	2300      	movs	r3, #0
 800885a:	9301      	str	r3, [sp, #4]
 800885c:	4b32      	ldr	r3, [pc, #200]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 800885e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008860:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008864:	641a      	str	r2, [r3, #64]	; 0x40
 8008866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008870:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008872:	4b30      	ldr	r3, [pc, #192]	; (8008934 <HAL_RCC_OscConfig+0x2b8>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f413 7f80 	tst.w	r3, #256	; 0x100
 800887a:	d021      	beq.n	80088c0 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800887c:	68a3      	ldr	r3, [r4, #8]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d032      	beq.n	80088e8 <HAL_RCC_OscConfig+0x26c>
 8008882:	2b05      	cmp	r3, #5
 8008884:	d036      	beq.n	80088f4 <HAL_RCC_OscConfig+0x278>
 8008886:	4b28      	ldr	r3, [pc, #160]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 8008888:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800888a:	f022 0201 	bic.w	r2, r2, #1
 800888e:	671a      	str	r2, [r3, #112]	; 0x70
 8008890:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008892:	f022 0204 	bic.w	r2, r2, #4
 8008896:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008898:	68a3      	ldr	r3, [r4, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d034      	beq.n	8008908 <HAL_RCC_OscConfig+0x28c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800889e:	f7fe fca5 	bl	80071ec <HAL_GetTick>
 80088a2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088a4:	4b20      	ldr	r3, [pc, #128]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 80088a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a8:	f013 0f02 	tst.w	r3, #2
 80088ac:	d144      	bne.n	8008938 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088ae:	f7fe fc9d 	bl	80071ec <HAL_GetTick>
 80088b2:	1b80      	subs	r0, r0, r6
 80088b4:	2864      	cmp	r0, #100	; 0x64
 80088b6:	d9f5      	bls.n	80088a4 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 80088b8:	2003      	movs	r0, #3
 80088ba:	e0c7      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 80088bc:	2500      	movs	r5, #0
 80088be:	e7d8      	b.n	8008872 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088c0:	4a1c      	ldr	r2, [pc, #112]	; (8008934 <HAL_RCC_OscConfig+0x2b8>)
 80088c2:	6813      	ldr	r3, [r2, #0]
 80088c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088c8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80088ca:	f7fe fc8f 	bl	80071ec <HAL_GetTick>
 80088ce:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088d0:	4b18      	ldr	r3, [pc, #96]	; (8008934 <HAL_RCC_OscConfig+0x2b8>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80088d8:	d1d0      	bne.n	800887c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088da:	f7fe fc87 	bl	80071ec <HAL_GetTick>
 80088de:	1b80      	subs	r0, r0, r6
 80088e0:	2802      	cmp	r0, #2
 80088e2:	d9f5      	bls.n	80088d0 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 80088e4:	2003      	movs	r0, #3
 80088e6:	e0b1      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088e8:	4a0f      	ldr	r2, [pc, #60]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 80088ea:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80088ec:	f043 0301 	orr.w	r3, r3, #1
 80088f0:	6713      	str	r3, [r2, #112]	; 0x70
 80088f2:	e7d1      	b.n	8008898 <HAL_RCC_OscConfig+0x21c>
 80088f4:	4b0c      	ldr	r3, [pc, #48]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 80088f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80088f8:	f042 0204 	orr.w	r2, r2, #4
 80088fc:	671a      	str	r2, [r3, #112]	; 0x70
 80088fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008900:	f042 0201 	orr.w	r2, r2, #1
 8008904:	671a      	str	r2, [r3, #112]	; 0x70
 8008906:	e7c7      	b.n	8008898 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008908:	f7fe fc70 	bl	80071ec <HAL_GetTick>
 800890c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800890e:	4b06      	ldr	r3, [pc, #24]	; (8008928 <HAL_RCC_OscConfig+0x2ac>)
 8008910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008912:	f013 0f02 	tst.w	r3, #2
 8008916:	d00f      	beq.n	8008938 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008918:	f7fe fc68 	bl	80071ec <HAL_GetTick>
 800891c:	1b80      	subs	r0, r0, r6
 800891e:	2864      	cmp	r0, #100	; 0x64
 8008920:	d9f5      	bls.n	800890e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8008922:	2003      	movs	r0, #3
 8008924:	e092      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
 8008926:	bf00      	nop
 8008928:	40023800 	.word	0x40023800
 800892c:	42470000 	.word	0x42470000
 8008930:	42470e80 	.word	0x42470e80
 8008934:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008938:	b9ed      	cbnz	r5, 8008976 <HAL_RCC_OscConfig+0x2fa>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800893a:	69a3      	ldr	r3, [r4, #24]
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 8084 	beq.w	8008a4a <HAL_RCC_OscConfig+0x3ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008942:	4a45      	ldr	r2, [pc, #276]	; (8008a58 <HAL_RCC_OscConfig+0x3dc>)
 8008944:	6892      	ldr	r2, [r2, #8]
 8008946:	f002 020c 	and.w	r2, r2, #12
 800894a:	2a08      	cmp	r2, #8
 800894c:	d051      	beq.n	80089f2 <HAL_RCC_OscConfig+0x376>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800894e:	2b02      	cmp	r3, #2
 8008950:	d017      	beq.n	8008982 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008952:	4b42      	ldr	r3, [pc, #264]	; (8008a5c <HAL_RCC_OscConfig+0x3e0>)
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008958:	f7fe fc48 	bl	80071ec <HAL_GetTick>
 800895c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800895e:	4b3e      	ldr	r3, [pc, #248]	; (8008a58 <HAL_RCC_OscConfig+0x3dc>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008966:	d042      	beq.n	80089ee <HAL_RCC_OscConfig+0x372>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008968:	f7fe fc40 	bl	80071ec <HAL_GetTick>
 800896c:	1b00      	subs	r0, r0, r4
 800896e:	2802      	cmp	r0, #2
 8008970:	d9f5      	bls.n	800895e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008972:	2003      	movs	r0, #3
 8008974:	e06a      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008976:	4a38      	ldr	r2, [pc, #224]	; (8008a58 <HAL_RCC_OscConfig+0x3dc>)
 8008978:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800897a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800897e:	6413      	str	r3, [r2, #64]	; 0x40
 8008980:	e7db      	b.n	800893a <HAL_RCC_OscConfig+0x2be>
        __HAL_RCC_PLL_DISABLE();
 8008982:	4b36      	ldr	r3, [pc, #216]	; (8008a5c <HAL_RCC_OscConfig+0x3e0>)
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008988:	f7fe fc30 	bl	80071ec <HAL_GetTick>
 800898c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800898e:	4b32      	ldr	r3, [pc, #200]	; (8008a58 <HAL_RCC_OscConfig+0x3dc>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008996:	d006      	beq.n	80089a6 <HAL_RCC_OscConfig+0x32a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008998:	f7fe fc28 	bl	80071ec <HAL_GetTick>
 800899c:	1b40      	subs	r0, r0, r5
 800899e:	2802      	cmp	r0, #2
 80089a0:	d9f5      	bls.n	800898e <HAL_RCC_OscConfig+0x312>
            return HAL_TIMEOUT;
 80089a2:	2003      	movs	r0, #3
 80089a4:	e052      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80089a6:	69e3      	ldr	r3, [r4, #28]
 80089a8:	6a22      	ldr	r2, [r4, #32]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80089ae:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80089b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80089b4:	0852      	lsrs	r2, r2, #1
 80089b6:	3a01      	subs	r2, #1
 80089b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80089be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80089c2:	4a25      	ldr	r2, [pc, #148]	; (8008a58 <HAL_RCC_OscConfig+0x3dc>)
 80089c4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80089c6:	4b25      	ldr	r3, [pc, #148]	; (8008a5c <HAL_RCC_OscConfig+0x3e0>)
 80089c8:	2201      	movs	r2, #1
 80089ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80089cc:	f7fe fc0e 	bl	80071ec <HAL_GetTick>
 80089d0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089d2:	4b21      	ldr	r3, [pc, #132]	; (8008a58 <HAL_RCC_OscConfig+0x3dc>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80089da:	d106      	bne.n	80089ea <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089dc:	f7fe fc06 	bl	80071ec <HAL_GetTick>
 80089e0:	1b00      	subs	r0, r0, r4
 80089e2:	2802      	cmp	r0, #2
 80089e4:	d9f5      	bls.n	80089d2 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 80089e6:	2003      	movs	r0, #3
 80089e8:	e030      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80089ea:	2000      	movs	r0, #0
 80089ec:	e02e      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
 80089ee:	2000      	movs	r0, #0
 80089f0:	e02c      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d02c      	beq.n	8008a50 <HAL_RCC_OscConfig+0x3d4>
        pll_config = RCC->PLLCFGR;
 80089f6:	4b18      	ldr	r3, [pc, #96]	; (8008a58 <HAL_RCC_OscConfig+0x3dc>)
 80089f8:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089fa:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80089fe:	69e2      	ldr	r2, [r4, #28]
 8008a00:	4291      	cmp	r1, r2
 8008a02:	d001      	beq.n	8008a08 <HAL_RCC_OscConfig+0x38c>
          return HAL_ERROR;
 8008a04:	2001      	movs	r0, #1
 8008a06:	e021      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a0c:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a0e:	428a      	cmp	r2, r1
 8008a10:	d001      	beq.n	8008a16 <HAL_RCC_OscConfig+0x39a>
          return HAL_ERROR;
 8008a12:	2001      	movs	r0, #1
 8008a14:	e01a      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008a16:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a18:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8008a1c:	401a      	ands	r2, r3
 8008a1e:	428a      	cmp	r2, r1
 8008a20:	d001      	beq.n	8008a26 <HAL_RCC_OscConfig+0x3aa>
          return HAL_ERROR;
 8008a22:	2001      	movs	r0, #1
 8008a24:	e012      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008a26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a2a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008a2c:	428a      	cmp	r2, r1
 8008a2e:	d001      	beq.n	8008a34 <HAL_RCC_OscConfig+0x3b8>
          return HAL_ERROR;
 8008a30:	2001      	movs	r0, #1
 8008a32:	e00b      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008a34:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8008a38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d00a      	beq.n	8008a54 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
 8008a3e:	2001      	movs	r0, #1
 8008a40:	e004      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
    return HAL_ERROR;
 8008a42:	2001      	movs	r0, #1
}
 8008a44:	4770      	bx	lr
        return HAL_ERROR;
 8008a46:	2001      	movs	r0, #1
 8008a48:	e000      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8008a4a:	2000      	movs	r0, #0
}
 8008a4c:	b002      	add	sp, #8
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8008a50:	2001      	movs	r0, #1
 8008a52:	e7fb      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8008a54:	2000      	movs	r0, #0
 8008a56:	e7f9      	b.n	8008a4c <HAL_RCC_OscConfig+0x3d0>
 8008a58:	40023800 	.word	0x40023800
 8008a5c:	42470060 	.word	0x42470060

08008a60 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8008a60:	4b01      	ldr	r3, [pc, #4]	; (8008a68 <HAL_RCC_EnableCSS+0x8>)
 8008a62:	2201      	movs	r2, #1
 8008a64:	601a      	str	r2, [r3, #0]
}
 8008a66:	4770      	bx	lr
 8008a68:	4247004c 	.word	0x4247004c

08008a6c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a6c:	4b26      	ldr	r3, [pc, #152]	; (8008b08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f003 030c 	and.w	r3, r3, #12
 8008a74:	2b04      	cmp	r3, #4
 8008a76:	d044      	beq.n	8008b02 <HAL_RCC_GetSysClockFreq+0x96>
 8008a78:	2b08      	cmp	r3, #8
 8008a7a:	d001      	beq.n	8008a80 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a7c:	4823      	ldr	r0, [pc, #140]	; (8008b0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8008a7e:	4770      	bx	lr
{
 8008a80:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a84:	4b20      	ldr	r3, [pc, #128]	; (8008b08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008a92:	d013      	beq.n	8008abc <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a94:	4b1c      	ldr	r3, [pc, #112]	; (8008b08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008a96:	6859      	ldr	r1, [r3, #4]
 8008a98:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	481c      	ldr	r0, [pc, #112]	; (8008b10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008aa0:	fba1 0100 	umull	r0, r1, r1, r0
 8008aa4:	f7f8 f832 	bl	8000b0c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008aa8:	4b17      	ldr	r3, [pc, #92]	; (8008b08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8008ab4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8008ab8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008abc:	4b12      	ldr	r3, [pc, #72]	; (8008b08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8008ac4:	461e      	mov	r6, r3
 8008ac6:	2700      	movs	r7, #0
 8008ac8:	015c      	lsls	r4, r3, #5
 8008aca:	2500      	movs	r5, #0
 8008acc:	1ae4      	subs	r4, r4, r3
 8008ace:	eb65 0507 	sbc.w	r5, r5, r7
 8008ad2:	01a9      	lsls	r1, r5, #6
 8008ad4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8008ad8:	01a0      	lsls	r0, r4, #6
 8008ada:	1b00      	subs	r0, r0, r4
 8008adc:	eb61 0105 	sbc.w	r1, r1, r5
 8008ae0:	00cb      	lsls	r3, r1, #3
 8008ae2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008ae6:	00c4      	lsls	r4, r0, #3
 8008ae8:	19a0      	adds	r0, r4, r6
 8008aea:	eb43 0107 	adc.w	r1, r3, r7
 8008aee:	028b      	lsls	r3, r1, #10
 8008af0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8008af4:	0284      	lsls	r4, r0, #10
 8008af6:	4620      	mov	r0, r4
 8008af8:	4619      	mov	r1, r3
 8008afa:	2300      	movs	r3, #0
 8008afc:	f7f8 f806 	bl	8000b0c <__aeabi_uldivmod>
 8008b00:	e7d2      	b.n	8008aa8 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8008b02:	4803      	ldr	r0, [pc, #12]	; (8008b10 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	40023800 	.word	0x40023800
 8008b0c:	00f42400 	.word	0x00f42400
 8008b10:	017d7840 	.word	0x017d7840

08008b14 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008b14:	2800      	cmp	r0, #0
 8008b16:	f000 809e 	beq.w	8008c56 <HAL_RCC_ClockConfig+0x142>
{
 8008b1a:	b570      	push	{r4, r5, r6, lr}
 8008b1c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b1e:	4b50      	ldr	r3, [pc, #320]	; (8008c60 <HAL_RCC_ClockConfig+0x14c>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 030f 	and.w	r3, r3, #15
 8008b26:	428b      	cmp	r3, r1
 8008b28:	d209      	bcs.n	8008b3e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b2a:	b2cb      	uxtb	r3, r1
 8008b2c:	4a4c      	ldr	r2, [pc, #304]	; (8008c60 <HAL_RCC_ClockConfig+0x14c>)
 8008b2e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b30:	6813      	ldr	r3, [r2, #0]
 8008b32:	f003 030f 	and.w	r3, r3, #15
 8008b36:	428b      	cmp	r3, r1
 8008b38:	d001      	beq.n	8008b3e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8008b3a:	2001      	movs	r0, #1
}
 8008b3c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	f013 0f02 	tst.w	r3, #2
 8008b44:	d017      	beq.n	8008b76 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b46:	f013 0f04 	tst.w	r3, #4
 8008b4a:	d004      	beq.n	8008b56 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b4c:	4a45      	ldr	r2, [pc, #276]	; (8008c64 <HAL_RCC_ClockConfig+0x150>)
 8008b4e:	6893      	ldr	r3, [r2, #8]
 8008b50:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b54:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	f013 0f08 	tst.w	r3, #8
 8008b5c:	d004      	beq.n	8008b68 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b5e:	4a41      	ldr	r2, [pc, #260]	; (8008c64 <HAL_RCC_ClockConfig+0x150>)
 8008b60:	6893      	ldr	r3, [r2, #8]
 8008b62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b66:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b68:	4a3e      	ldr	r2, [pc, #248]	; (8008c64 <HAL_RCC_ClockConfig+0x150>)
 8008b6a:	6893      	ldr	r3, [r2, #8]
 8008b6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b70:	68a0      	ldr	r0, [r4, #8]
 8008b72:	4303      	orrs	r3, r0
 8008b74:	6093      	str	r3, [r2, #8]
 8008b76:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	f013 0f01 	tst.w	r3, #1
 8008b7e:	d032      	beq.n	8008be6 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b80:	6863      	ldr	r3, [r4, #4]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d021      	beq.n	8008bca <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b86:	1e9a      	subs	r2, r3, #2
 8008b88:	2a01      	cmp	r2, #1
 8008b8a:	d925      	bls.n	8008bd8 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b8c:	4a35      	ldr	r2, [pc, #212]	; (8008c64 <HAL_RCC_ClockConfig+0x150>)
 8008b8e:	6812      	ldr	r2, [r2, #0]
 8008b90:	f012 0f02 	tst.w	r2, #2
 8008b94:	d061      	beq.n	8008c5a <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b96:	4933      	ldr	r1, [pc, #204]	; (8008c64 <HAL_RCC_ClockConfig+0x150>)
 8008b98:	688a      	ldr	r2, [r1, #8]
 8008b9a:	f022 0203 	bic.w	r2, r2, #3
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8008ba2:	f7fe fb23 	bl	80071ec <HAL_GetTick>
 8008ba6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ba8:	4b2e      	ldr	r3, [pc, #184]	; (8008c64 <HAL_RCC_ClockConfig+0x150>)
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f003 030c 	and.w	r3, r3, #12
 8008bb0:	6862      	ldr	r2, [r4, #4]
 8008bb2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008bb6:	d016      	beq.n	8008be6 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bb8:	f7fe fb18 	bl	80071ec <HAL_GetTick>
 8008bbc:	1b80      	subs	r0, r0, r6
 8008bbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bc2:	4298      	cmp	r0, r3
 8008bc4:	d9f0      	bls.n	8008ba8 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8008bc6:	2003      	movs	r0, #3
 8008bc8:	e7b8      	b.n	8008b3c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bca:	4a26      	ldr	r2, [pc, #152]	; (8008c64 <HAL_RCC_ClockConfig+0x150>)
 8008bcc:	6812      	ldr	r2, [r2, #0]
 8008bce:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008bd2:	d1e0      	bne.n	8008b96 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8008bd4:	2001      	movs	r0, #1
 8008bd6:	e7b1      	b.n	8008b3c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bd8:	4a22      	ldr	r2, [pc, #136]	; (8008c64 <HAL_RCC_ClockConfig+0x150>)
 8008bda:	6812      	ldr	r2, [r2, #0]
 8008bdc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8008be0:	d1d9      	bne.n	8008b96 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8008be2:	2001      	movs	r0, #1
 8008be4:	e7aa      	b.n	8008b3c <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008be6:	4b1e      	ldr	r3, [pc, #120]	; (8008c60 <HAL_RCC_ClockConfig+0x14c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 030f 	and.w	r3, r3, #15
 8008bee:	42ab      	cmp	r3, r5
 8008bf0:	d909      	bls.n	8008c06 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bf2:	b2ea      	uxtb	r2, r5
 8008bf4:	4b1a      	ldr	r3, [pc, #104]	; (8008c60 <HAL_RCC_ClockConfig+0x14c>)
 8008bf6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 030f 	and.w	r3, r3, #15
 8008bfe:	42ab      	cmp	r3, r5
 8008c00:	d001      	beq.n	8008c06 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8008c02:	2001      	movs	r0, #1
 8008c04:	e79a      	b.n	8008b3c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	f013 0f04 	tst.w	r3, #4
 8008c0c:	d006      	beq.n	8008c1c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c0e:	4a15      	ldr	r2, [pc, #84]	; (8008c64 <HAL_RCC_ClockConfig+0x150>)
 8008c10:	6893      	ldr	r3, [r2, #8]
 8008c12:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8008c16:	68e1      	ldr	r1, [r4, #12]
 8008c18:	430b      	orrs	r3, r1
 8008c1a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	f013 0f08 	tst.w	r3, #8
 8008c22:	d007      	beq.n	8008c34 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c24:	4a0f      	ldr	r2, [pc, #60]	; (8008c64 <HAL_RCC_ClockConfig+0x150>)
 8008c26:	6893      	ldr	r3, [r2, #8]
 8008c28:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008c2c:	6921      	ldr	r1, [r4, #16]
 8008c2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008c32:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c34:	f7ff ff1a 	bl	8008a6c <HAL_RCC_GetSysClockFreq>
 8008c38:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <HAL_RCC_ClockConfig+0x150>)
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008c40:	4a09      	ldr	r2, [pc, #36]	; (8008c68 <HAL_RCC_ClockConfig+0x154>)
 8008c42:	5cd3      	ldrb	r3, [r2, r3]
 8008c44:	40d8      	lsrs	r0, r3
 8008c46:	4b09      	ldr	r3, [pc, #36]	; (8008c6c <HAL_RCC_ClockConfig+0x158>)
 8008c48:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8008c4a:	4b09      	ldr	r3, [pc, #36]	; (8008c70 <HAL_RCC_ClockConfig+0x15c>)
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	f7fd fe23 	bl	8006898 <HAL_InitTick>
  return HAL_OK;
 8008c52:	2000      	movs	r0, #0
 8008c54:	e772      	b.n	8008b3c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8008c56:	2001      	movs	r0, #1
}
 8008c58:	4770      	bx	lr
        return HAL_ERROR;
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	e76e      	b.n	8008b3c <HAL_RCC_ClockConfig+0x28>
 8008c5e:	bf00      	nop
 8008c60:	40023c00 	.word	0x40023c00
 8008c64:	40023800 	.word	0x40023800
 8008c68:	0800f730 	.word	0x0800f730
 8008c6c:	2000244c 	.word	0x2000244c
 8008c70:	20002454 	.word	0x20002454

08008c74 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8008c74:	4b01      	ldr	r3, [pc, #4]	; (8008c7c <HAL_RCC_GetHCLKFreq+0x8>)
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	2000244c 	.word	0x2000244c

08008c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c80:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008c82:	f7ff fff7 	bl	8008c74 <HAL_RCC_GetHCLKFreq>
 8008c86:	4b04      	ldr	r3, [pc, #16]	; (8008c98 <HAL_RCC_GetPCLK1Freq+0x18>)
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8008c8e:	4a03      	ldr	r2, [pc, #12]	; (8008c9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008c90:	5cd3      	ldrb	r3, [r2, r3]
}
 8008c92:	40d8      	lsrs	r0, r3
 8008c94:	bd08      	pop	{r3, pc}
 8008c96:	bf00      	nop
 8008c98:	40023800 	.word	0x40023800
 8008c9c:	0800f740 	.word	0x0800f740

08008ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ca0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ca2:	f7ff ffe7 	bl	8008c74 <HAL_RCC_GetHCLKFreq>
 8008ca6:	4b04      	ldr	r3, [pc, #16]	; (8008cb8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8008cae:	4a03      	ldr	r2, [pc, #12]	; (8008cbc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008cb0:	5cd3      	ldrb	r3, [r2, r3]
}
 8008cb2:	40d8      	lsrs	r0, r3
 8008cb4:	bd08      	pop	{r3, pc}
 8008cb6:	bf00      	nop
 8008cb8:	40023800 	.word	0x40023800
 8008cbc:	0800f740 	.word	0x0800f740

08008cc0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008cc0:	230f      	movs	r3, #15
 8008cc2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008cc4:	4b0b      	ldr	r3, [pc, #44]	; (8008cf4 <HAL_RCC_GetClockConfig+0x34>)
 8008cc6:	689a      	ldr	r2, [r3, #8]
 8008cc8:	f002 0203 	and.w	r2, r2, #3
 8008ccc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008cce:	689a      	ldr	r2, [r3, #8]
 8008cd0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008cd4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8008cdc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	08db      	lsrs	r3, r3, #3
 8008ce2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8008ce6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008ce8:	4b03      	ldr	r3, [pc, #12]	; (8008cf8 <HAL_RCC_GetClockConfig+0x38>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 030f 	and.w	r3, r3, #15
 8008cf0:	600b      	str	r3, [r1, #0]
}
 8008cf2:	4770      	bx	lr
 8008cf4:	40023800 	.word	0x40023800
 8008cf8:	40023c00 	.word	0x40023c00

08008cfc <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008cfc:	4770      	bx	lr
	...

08008d00 <HAL_RCC_NMI_IRQHandler>:
{
 8008d00:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008d02:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <HAL_RCC_NMI_IRQHandler+0x1c>)
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008d0a:	d100      	bne.n	8008d0e <HAL_RCC_NMI_IRQHandler+0xe>
}
 8008d0c:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8008d0e:	f7ff fff5 	bl	8008cfc <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008d12:	4b03      	ldr	r3, [pc, #12]	; (8008d20 <HAL_RCC_NMI_IRQHandler+0x20>)
 8008d14:	2280      	movs	r2, #128	; 0x80
 8008d16:	701a      	strb	r2, [r3, #0]
}
 8008d18:	e7f8      	b.n	8008d0c <HAL_RCC_NMI_IRQHandler+0xc>
 8008d1a:	bf00      	nop
 8008d1c:	40023800 	.word	0x40023800
 8008d20:	4002380e 	.word	0x4002380e

08008d24 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d24:	b530      	push	{r4, r5, lr}
 8008d26:	b083      	sub	sp, #12
 8008d28:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008d2a:	6803      	ldr	r3, [r0, #0]
 8008d2c:	f013 0f05 	tst.w	r3, #5
 8008d30:	d10e      	bne.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	f013 0f02 	tst.w	r3, #2
 8008d38:	d136      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	f013 0f08 	tst.w	r3, #8
 8008d40:	f000 8097 	beq.w	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d44:	7c22      	ldrb	r2, [r4, #16]
 8008d46:	4b4c      	ldr	r3, [pc, #304]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8008d48:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008d4a:	2000      	movs	r0, #0
}
 8008d4c:	b003      	add	sp, #12
 8008d4e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8008d50:	4b4a      	ldr	r3, [pc, #296]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008d56:	f7fe fa49 	bl	80071ec <HAL_GetTick>
 8008d5a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008d5c:	4b48      	ldr	r3, [pc, #288]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8008d64:	d006      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008d66:	f7fe fa41 	bl	80071ec <HAL_GetTick>
 8008d6a:	1b40      	subs	r0, r0, r5
 8008d6c:	2802      	cmp	r0, #2
 8008d6e:	d9f5      	bls.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8008d70:	2003      	movs	r0, #3
 8008d72:	e7eb      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008d74:	6862      	ldr	r2, [r4, #4]
 8008d76:	68a3      	ldr	r3, [r4, #8]
 8008d78:	071b      	lsls	r3, r3, #28
 8008d7a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008d7e:	4a40      	ldr	r2, [pc, #256]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008d80:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8008d84:	4b3d      	ldr	r3, [pc, #244]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8008d86:	2201      	movs	r2, #1
 8008d88:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008d8a:	f7fe fa2f 	bl	80071ec <HAL_GetTick>
 8008d8e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008d90:	4b3b      	ldr	r3, [pc, #236]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8008d98:	d1cb      	bne.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008d9a:	f7fe fa27 	bl	80071ec <HAL_GetTick>
 8008d9e:	1b40      	subs	r0, r0, r5
 8008da0:	2802      	cmp	r0, #2
 8008da2:	d9f5      	bls.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        return HAL_TIMEOUT;
 8008da4:	2003      	movs	r0, #3
 8008da6:	e7d1      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8008da8:	2300      	movs	r3, #0
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	4b34      	ldr	r3, [pc, #208]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008db0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008db4:	641a      	str	r2, [r3, #64]	; 0x40
 8008db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8008dc0:	4a30      	ldr	r2, [pc, #192]	; (8008e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dc2:	6813      	ldr	r3, [r2, #0]
 8008dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dc8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008dca:	f7fe fa0f 	bl	80071ec <HAL_GetTick>
 8008dce:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008dd0:	4b2c      	ldr	r3, [pc, #176]	; (8008e84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008dd8:	d106      	bne.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008dda:	f7fe fa07 	bl	80071ec <HAL_GetTick>
 8008dde:	1b40      	subs	r0, r0, r5
 8008de0:	2802      	cmp	r0, #2
 8008de2:	d9f5      	bls.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 8008de4:	2003      	movs	r0, #3
 8008de6:	e7b1      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008de8:	4b25      	ldr	r3, [pc, #148]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008dec:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008df0:	d012      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008df2:	68e2      	ldr	r2, [r4, #12]
 8008df4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d00d      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008dfc:	4b20      	ldr	r3, [pc, #128]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8008e04:	4920      	ldr	r1, [pc, #128]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e06:	2001      	movs	r0, #1
 8008e08:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8008e0e:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e12:	f013 0f01 	tst.w	r3, #1
 8008e16:	d112      	bne.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e18:	68e3      	ldr	r3, [r4, #12]
 8008e1a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008e1e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8008e22:	d01b      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x138>
 8008e24:	4a16      	ldr	r2, [pc, #88]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008e26:	6893      	ldr	r3, [r2, #8]
 8008e28:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008e2c:	6093      	str	r3, [r2, #8]
 8008e2e:	4914      	ldr	r1, [pc, #80]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008e30:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8008e32:	68e2      	ldr	r2, [r4, #12]
 8008e34:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	670b      	str	r3, [r1, #112]	; 0x70
 8008e3c:	e77d      	b.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8008e3e:	f7fe f9d5 	bl	80071ec <HAL_GetTick>
 8008e42:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e44:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e48:	f013 0f02 	tst.w	r3, #2
 8008e4c:	d1e4      	bne.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e4e:	f7fe f9cd 	bl	80071ec <HAL_GetTick>
 8008e52:	1b40      	subs	r0, r0, r5
 8008e54:	2864      	cmp	r0, #100	; 0x64
 8008e56:	d9f5      	bls.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
 8008e58:	2003      	movs	r0, #3
 8008e5a:	e777      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e5c:	4908      	ldr	r1, [pc, #32]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008e5e:	688a      	ldr	r2, [r1, #8]
 8008e60:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8008e64:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	608b      	str	r3, [r1, #8]
 8008e70:	e7dd      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  return HAL_OK;
 8008e72:	2000      	movs	r0, #0
 8008e74:	e76a      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8008e76:	bf00      	nop
 8008e78:	424711e0 	.word	0x424711e0
 8008e7c:	42470068 	.word	0x42470068
 8008e80:	40023800 	.word	0x40023800
 8008e84:	40007000 	.word	0x40007000
 8008e88:	42470e40 	.word	0x42470e40

08008e8c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008e90:	6802      	ldr	r2, [r0, #0]
 8008e92:	68d3      	ldr	r3, [r2, #12]
 8008e94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e98:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e9a:	f7fe f9a7 	bl	80071ec <HAL_GetTick>
 8008e9e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	f013 0f20 	tst.w	r3, #32
 8008ea8:	d107      	bne.n	8008eba <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008eaa:	f7fe f99f 	bl	80071ec <HAL_GetTick>
 8008eae:	1b40      	subs	r0, r0, r5
 8008eb0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008eb4:	d9f4      	bls.n	8008ea0 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8008eb6:	2003      	movs	r0, #3
 8008eb8:	e000      	b.n	8008ebc <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8008eba:	2000      	movs	r0, #0
}
 8008ebc:	bd38      	pop	{r3, r4, r5, pc}

08008ebe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008ebe:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ec0:	6803      	ldr	r3, [r0, #0]
 8008ec2:	68da      	ldr	r2, [r3, #12]
 8008ec4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008ec8:	d001      	beq.n	8008ece <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8008eca:	2000      	movs	r0, #0
}
 8008ecc:	bd38      	pop	{r3, r4, r5, pc}
 8008ece:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ed4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8008ed6:	f7fe f989 	bl	80071ec <HAL_GetTick>
 8008eda:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008edc:	6823      	ldr	r3, [r4, #0]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008ee4:	d107      	bne.n	8008ef6 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008ee6:	f7fe f981 	bl	80071ec <HAL_GetTick>
 8008eea:	1b40      	subs	r0, r0, r5
 8008eec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008ef0:	d9f4      	bls.n	8008edc <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8008ef2:	2003      	movs	r0, #3
 8008ef4:	e7ea      	b.n	8008ecc <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	e7e8      	b.n	8008ecc <RTC_EnterInitMode+0xe>

08008efa <HAL_RTC_Init>:
{
 8008efa:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d05c      	beq.n	8008fba <HAL_RTC_Init+0xc0>
 8008f00:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008f02:	7f43      	ldrb	r3, [r0, #29]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d040      	beq.n	8008f8a <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f08:	2302      	movs	r3, #2
 8008f0a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	22ca      	movs	r2, #202	; 0xca
 8008f10:	625a      	str	r2, [r3, #36]	; 0x24
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	2253      	movs	r2, #83	; 0x53
 8008f16:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f7ff ffd0 	bl	8008ebe <RTC_EnterInitMode>
 8008f1e:	4605      	mov	r5, r0
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d136      	bne.n	8008f92 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008f24:	6822      	ldr	r2, [r4, #0]
 8008f26:	6893      	ldr	r3, [r2, #8]
 8008f28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f30:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008f32:	6821      	ldr	r1, [r4, #0]
 8008f34:	688a      	ldr	r2, [r1, #8]
 8008f36:	6863      	ldr	r3, [r4, #4]
 8008f38:	6920      	ldr	r0, [r4, #16]
 8008f3a:	4303      	orrs	r3, r0
 8008f3c:	6960      	ldr	r0, [r4, #20]
 8008f3e:	4303      	orrs	r3, r0
 8008f40:	4313      	orrs	r3, r2
 8008f42:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008f44:	6823      	ldr	r3, [r4, #0]
 8008f46:	68e2      	ldr	r2, [r4, #12]
 8008f48:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008f4a:	6822      	ldr	r2, [r4, #0]
 8008f4c:	6913      	ldr	r3, [r2, #16]
 8008f4e:	68a1      	ldr	r1, [r4, #8]
 8008f50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008f54:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008f56:	6822      	ldr	r2, [r4, #0]
 8008f58:	68d3      	ldr	r3, [r2, #12]
 8008f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f5e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f013 0f20 	tst.w	r3, #32
 8008f68:	d01b      	beq.n	8008fa2 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008f6a:	6822      	ldr	r2, [r4, #0]
 8008f6c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f72:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008f74:	6822      	ldr	r2, [r4, #0]
 8008f76:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008f78:	69a1      	ldr	r1, [r4, #24]
 8008f7a:	430b      	orrs	r3, r1
 8008f7c:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	22ff      	movs	r2, #255	; 0xff
 8008f82:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8008f84:	2301      	movs	r3, #1
 8008f86:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8008f88:	e009      	b.n	8008f9e <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 8008f8a:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8008f8c:	f7fd fa58 	bl	8006440 <HAL_RTC_MspInit>
 8008f90:	e7ba      	b.n	8008f08 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	22ff      	movs	r2, #255	; 0xff
 8008f96:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008f98:	2304      	movs	r3, #4
 8008f9a:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8008f9c:	2501      	movs	r5, #1
}
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f7ff ff72 	bl	8008e8c <HAL_RTC_WaitForSynchro>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d0de      	beq.n	8008f6a <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	22ff      	movs	r2, #255	; 0xff
 8008fb0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008fb2:	2304      	movs	r3, #4
 8008fb4:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8008fb6:	2501      	movs	r5, #1
 8008fb8:	e7f1      	b.n	8008f9e <HAL_RTC_Init+0xa4>
     return HAL_ERROR;
 8008fba:	2501      	movs	r5, #1
 8008fbc:	e7ef      	b.n	8008f9e <HAL_RTC_Init+0xa4>

08008fbe <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8008fbe:	2300      	movs	r3, #0

  while(Value >= 10U)
 8008fc0:	e002      	b.n	8008fc8 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8008fc2:	3301      	adds	r3, #1
    Value -= 10U;
 8008fc4:	380a      	subs	r0, #10
 8008fc6:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8008fc8:	2809      	cmp	r0, #9
 8008fca:	d8fa      	bhi.n	8008fc2 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008fcc:	011b      	lsls	r3, r3, #4
 8008fce:	b2db      	uxtb	r3, r3
}
 8008fd0:	4318      	orrs	r0, r3
 8008fd2:	4770      	bx	lr

08008fd4 <HAL_RTC_SetTime>:
{
 8008fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8008fd6:	7f03      	ldrb	r3, [r0, #28]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d078      	beq.n	80090ce <HAL_RTC_SetTime+0xfa>
 8008fdc:	460d      	mov	r5, r1
 8008fde:	4604      	mov	r4, r0
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8008fe8:	2a00      	cmp	r2, #0
 8008fea:	d146      	bne.n	800907a <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008fec:	6803      	ldr	r3, [r0, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008ff4:	d101      	bne.n	8008ffa <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008ffa:	7828      	ldrb	r0, [r5, #0]
 8008ffc:	f7ff ffdf 	bl	8008fbe <RTC_ByteToBcd2>
 8009000:	0406      	lsls	r6, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009002:	7868      	ldrb	r0, [r5, #1]
 8009004:	f7ff ffdb 	bl	8008fbe <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009008:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800900c:	78a8      	ldrb	r0, [r5, #2]
 800900e:	f7ff ffd6 	bl	8008fbe <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009012:	4330      	orrs	r0, r6
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009014:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009016:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	22ca      	movs	r2, #202	; 0xca
 800901e:	625a      	str	r2, [r3, #36]	; 0x24
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	2253      	movs	r2, #83	; 0x53
 8009024:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009026:	4620      	mov	r0, r4
 8009028:	f7ff ff49 	bl	8008ebe <RTC_EnterInitMode>
 800902c:	4607      	mov	r7, r0
 800902e:	2800      	cmp	r0, #0
 8009030:	d135      	bne.n	800909e <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 8009038:	f026 46fe 	bic.w	r6, r6, #2130706432	; 0x7f000000
 800903c:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800903e:	6822      	ldr	r2, [r4, #0]
 8009040:	6893      	ldr	r3, [r2, #8]
 8009042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009046:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009048:	6821      	ldr	r1, [r4, #0]
 800904a:	688b      	ldr	r3, [r1, #8]
 800904c:	68ea      	ldr	r2, [r5, #12]
 800904e:	6928      	ldr	r0, [r5, #16]
 8009050:	4302      	orrs	r2, r0
 8009052:	4313      	orrs	r3, r2
 8009054:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009056:	6822      	ldr	r2, [r4, #0]
 8009058:	68d3      	ldr	r3, [r2, #12]
 800905a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800905e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	f013 0f20 	tst.w	r3, #32
 8009068:	d023      	beq.n	80090b2 <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	22ff      	movs	r2, #255	; 0xff
 800906e:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8009070:	2301      	movs	r3, #1
 8009072:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8009074:	2300      	movs	r3, #0
 8009076:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8009078:	e019      	b.n	80090ae <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800907a:	6803      	ldr	r3, [r0, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009082:	d101      	bne.n	8009088 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 8009084:	2300      	movs	r3, #0
 8009086:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009088:	782b      	ldrb	r3, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800908a:	7868      	ldrb	r0, [r5, #1]
 800908c:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800908e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8009092:	78ab      	ldrb	r3, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009094:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009096:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009098:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800909c:	e7bd      	b.n	800901a <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	22ff      	movs	r2, #255	; 0xff
 80090a2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80090a4:	2304      	movs	r3, #4
 80090a6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80090a8:	2300      	movs	r3, #0
 80090aa:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80090ac:	2701      	movs	r7, #1
}
 80090ae:	4638      	mov	r0, r7
 80090b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80090b2:	4620      	mov	r0, r4
 80090b4:	f7ff feea 	bl	8008e8c <HAL_RTC_WaitForSynchro>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d0d6      	beq.n	800906a <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	22ff      	movs	r2, #255	; 0xff
 80090c0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80090c2:	2304      	movs	r3, #4
 80090c4:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80090c6:	2300      	movs	r3, #0
 80090c8:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80090ca:	2701      	movs	r7, #1
 80090cc:	e7ef      	b.n	80090ae <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 80090ce:	2702      	movs	r7, #2
 80090d0:	e7ed      	b.n	80090ae <HAL_RTC_SetTime+0xda>

080090d2 <HAL_RTC_SetDate>:
{
 80090d2:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 80090d4:	7f03      	ldrb	r3, [r0, #28]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d066      	beq.n	80091a8 <HAL_RTC_SetDate+0xd6>
 80090da:	2301      	movs	r3, #1
 80090dc:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80090de:	2302      	movs	r3, #2
 80090e0:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80090e2:	b93a      	cbnz	r2, 80090f4 <HAL_RTC_SetDate+0x22>
 80090e4:	784b      	ldrb	r3, [r1, #1]
 80090e6:	f013 0f10 	tst.w	r3, #16
 80090ea:	d003      	beq.n	80090f4 <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80090ec:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80090f0:	330a      	adds	r3, #10
 80090f2:	704b      	strb	r3, [r1, #1]
 80090f4:	460e      	mov	r6, r1
 80090f6:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 80090f8:	2a00      	cmp	r2, #0
 80090fa:	d132      	bne.n	8009162 <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80090fc:	78c8      	ldrb	r0, [r1, #3]
 80090fe:	f7ff ff5e 	bl	8008fbe <RTC_ByteToBcd2>
 8009102:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009104:	7870      	ldrb	r0, [r6, #1]
 8009106:	f7ff ff5a 	bl	8008fbe <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800910a:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800910e:	78b0      	ldrb	r0, [r6, #2]
 8009110:	f7ff ff55 	bl	8008fbe <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009114:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));
 8009116:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009118:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	22ca      	movs	r2, #202	; 0xca
 8009120:	625a      	str	r2, [r3, #36]	; 0x24
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	2253      	movs	r2, #83	; 0x53
 8009126:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009128:	4620      	mov	r0, r4
 800912a:	f7ff fec8 	bl	8008ebe <RTC_EnterInitMode>
 800912e:	4606      	mov	r6, r0
 8009130:	bb10      	cbnz	r0, 8009178 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8009138:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800913c:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800913e:	6822      	ldr	r2, [r4, #0]
 8009140:	68d3      	ldr	r3, [r2, #12]
 8009142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009146:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f013 0f20 	tst.w	r3, #32
 8009150:	d01c      	beq.n	800918c <HAL_RTC_SetDate+0xba>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	22ff      	movs	r2, #255	; 0xff
 8009156:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8009158:	2301      	movs	r3, #1
 800915a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800915c:	2300      	movs	r3, #0
 800915e:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 8009160:	e012      	b.n	8009188 <HAL_RTC_SetDate+0xb6>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009162:	78cd      	ldrb	r5, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009164:	7848      	ldrb	r0, [r1, #1]
 8009166:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009168:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 800916c:	788d      	ldrb	r5, [r1, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800916e:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009170:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009172:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8009176:	e7d1      	b.n	800911c <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	22ff      	movs	r2, #255	; 0xff
 800917c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800917e:	2304      	movs	r3, #4
 8009180:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8009182:	2300      	movs	r3, #0
 8009184:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8009186:	2601      	movs	r6, #1
}
 8009188:	4630      	mov	r0, r6
 800918a:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800918c:	4620      	mov	r0, r4
 800918e:	f7ff fe7d 	bl	8008e8c <HAL_RTC_WaitForSynchro>
 8009192:	2800      	cmp	r0, #0
 8009194:	d0dd      	beq.n	8009152 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	22ff      	movs	r2, #255	; 0xff
 800919a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800919c:	2304      	movs	r3, #4
 800919e:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80091a0:	2300      	movs	r3, #0
 80091a2:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80091a4:	2601      	movs	r6, #1
 80091a6:	e7ef      	b.n	8009188 <HAL_RTC_SetDate+0xb6>
 __HAL_LOCK(hrtc);
 80091a8:	2602      	movs	r6, #2
 80091aa:	e7ed      	b.n	8009188 <HAL_RTC_SetDate+0xb6>

080091ac <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80091ac:	0903      	lsrs	r3, r0, #4
 80091ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80091b2:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80091b4:	f000 000f 	and.w	r0, r0, #15
 80091b8:	4410      	add	r0, r2
}
 80091ba:	b2c0      	uxtb	r0, r0
 80091bc:	4770      	bx	lr

080091be <HAL_RTC_GetTime>:
{
 80091be:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80091c0:	6803      	ldr	r3, [r0, #0]
 80091c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c4:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80091c6:	6803      	ldr	r3, [r0, #0]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80091ce:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80091d0:	6803      	ldr	r3, [r0, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80091d8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80091dc:	0c1d      	lsrs	r5, r3, #16
 80091de:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 80091e2:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80091e4:	f3c3 2606 	ubfx	r6, r3, #8, #7
 80091e8:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80091ea:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 80091ee:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80091f0:	f005 0540 	and.w	r5, r5, #64	; 0x40
 80091f4:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 80091f6:	b95a      	cbnz	r2, 8009210 <HAL_RTC_GetTime+0x52>
 80091f8:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80091fa:	f7ff ffd7 	bl	80091ac <RTC_Bcd2ToByte>
 80091fe:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009200:	4630      	mov	r0, r6
 8009202:	f7ff ffd3 	bl	80091ac <RTC_Bcd2ToByte>
 8009206:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009208:	4620      	mov	r0, r4
 800920a:	f7ff ffcf 	bl	80091ac <RTC_Bcd2ToByte>
 800920e:	70a8      	strb	r0, [r5, #2]
}
 8009210:	2000      	movs	r0, #0
 8009212:	bd70      	pop	{r4, r5, r6, pc}

08009214 <HAL_RTC_GetDate>:
{
 8009214:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009216:	6803      	ldr	r3, [r0, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800921e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009222:	0c18      	lsrs	r0, r3, #16
 8009224:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009226:	f3c3 2604 	ubfx	r6, r3, #8, #5
 800922a:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800922c:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8009230:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009232:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8009236:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8009238:	b95a      	cbnz	r2, 8009252 <HAL_RTC_GetDate+0x3e>
 800923a:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800923c:	f7ff ffb6 	bl	80091ac <RTC_Bcd2ToByte>
 8009240:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009242:	4630      	mov	r0, r6
 8009244:	f7ff ffb2 	bl	80091ac <RTC_Bcd2ToByte>
 8009248:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800924a:	4628      	mov	r0, r5
 800924c:	f7ff ffae 	bl	80091ac <RTC_Bcd2ToByte>
 8009250:	70a0      	strb	r0, [r4, #2]
}
 8009252:	2000      	movs	r0, #0
 8009254:	bd70      	pop	{r4, r5, r6, pc}

08009256 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8009256:	6803      	ldr	r3, [r0, #0]
 8009258:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800925a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800925e:	4770      	bx	lr

08009260 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8009260:	6803      	ldr	r3, [r0, #0]
 8009262:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009264:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8009268:	4770      	bx	lr

0800926a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800926a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926c:	4605      	mov	r5, r0
 800926e:	460f      	mov	r7, r1
 8009270:	4616      	mov	r6, r2
 8009272:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	ea37 0303 	bics.w	r3, r7, r3
 800927c:	bf0c      	ite	eq
 800927e:	2301      	moveq	r3, #1
 8009280:	2300      	movne	r3, #0
 8009282:	42b3      	cmp	r3, r6
 8009284:	d037      	beq.n	80092f6 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009286:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800928a:	d0f3      	beq.n	8009274 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800928c:	f7fd ffae 	bl	80071ec <HAL_GetTick>
 8009290:	9b06      	ldr	r3, [sp, #24]
 8009292:	1ac0      	subs	r0, r0, r3
 8009294:	42a0      	cmp	r0, r4
 8009296:	d201      	bcs.n	800929c <SPI_WaitFlagStateUntilTimeout+0x32>
 8009298:	2c00      	cmp	r4, #0
 800929a:	d1eb      	bne.n	8009274 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800929c:	682a      	ldr	r2, [r5, #0]
 800929e:	6853      	ldr	r3, [r2, #4]
 80092a0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80092a4:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092a6:	686b      	ldr	r3, [r5, #4]
 80092a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092ac:	d00b      	beq.n	80092c6 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80092b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b4:	d014      	beq.n	80092e0 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092b6:	2301      	movs	r3, #1
 80092b8:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092bc:	2300      	movs	r3, #0
 80092be:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 80092c2:	2003      	movs	r0, #3
 80092c4:	e018      	b.n	80092f8 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092c6:	68ab      	ldr	r3, [r5, #8]
 80092c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092cc:	d002      	beq.n	80092d4 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092d2:	d1ec      	bne.n	80092ae <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 80092d4:	682a      	ldr	r2, [r5, #0]
 80092d6:	6813      	ldr	r3, [r2, #0]
 80092d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	e7e6      	b.n	80092ae <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 80092e0:	682a      	ldr	r2, [r5, #0]
 80092e2:	6813      	ldr	r3, [r2, #0]
 80092e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	682a      	ldr	r2, [r5, #0]
 80092ec:	6813      	ldr	r3, [r2, #0]
 80092ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80092f2:	6013      	str	r3, [r2, #0]
 80092f4:	e7df      	b.n	80092b6 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 80092f6:	2000      	movs	r0, #0
}
 80092f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80092fc:	b530      	push	{r4, r5, lr}
 80092fe:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009300:	4c16      	ldr	r4, [pc, #88]	; (800935c <SPI_EndRxTxTransaction+0x60>)
 8009302:	6824      	ldr	r4, [r4, #0]
 8009304:	4d16      	ldr	r5, [pc, #88]	; (8009360 <SPI_EndRxTxTransaction+0x64>)
 8009306:	fba5 3404 	umull	r3, r4, r5, r4
 800930a:	0d64      	lsrs	r4, r4, #21
 800930c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8009310:	fb05 f404 	mul.w	r4, r5, r4
 8009314:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009316:	6844      	ldr	r4, [r0, #4]
 8009318:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 800931c:	d00b      	beq.n	8009336 <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800931e:	9b03      	ldr	r3, [sp, #12]
 8009320:	b1c3      	cbz	r3, 8009354 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8009322:	9b03      	ldr	r3, [sp, #12]
 8009324:	3b01      	subs	r3, #1
 8009326:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009328:	6803      	ldr	r3, [r0, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009330:	d1f5      	bne.n	800931e <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	e00f      	b.n	8009356 <SPI_EndRxTxTransaction+0x5a>
 8009336:	460b      	mov	r3, r1
 8009338:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800933a:	9200      	str	r2, [sp, #0]
 800933c:	2200      	movs	r2, #0
 800933e:	2180      	movs	r1, #128	; 0x80
 8009340:	f7ff ff93 	bl	800926a <SPI_WaitFlagStateUntilTimeout>
 8009344:	4603      	mov	r3, r0
 8009346:	b130      	cbz	r0, 8009356 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009348:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800934a:	f043 0320 	orr.w	r3, r3, #32
 800934e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e000      	b.n	8009356 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	b005      	add	sp, #20
 800935a:	bd30      	pop	{r4, r5, pc}
 800935c:	2000244c 	.word	0x2000244c
 8009360:	165e9f81 	.word	0x165e9f81

08009364 <SPI_EndRxTransaction>:
{
 8009364:	b510      	push	{r4, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800936a:	6840      	ldr	r0, [r0, #4]
 800936c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8009370:	d016      	beq.n	80093a0 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009372:	6860      	ldr	r0, [r4, #4]
 8009374:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8009378:	d12e      	bne.n	80093d8 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800937a:	68a3      	ldr	r3, [r4, #8]
 800937c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009380:	d01b      	beq.n	80093ba <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009382:	9200      	str	r2, [sp, #0]
 8009384:	460b      	mov	r3, r1
 8009386:	2200      	movs	r2, #0
 8009388:	2180      	movs	r1, #128	; 0x80
 800938a:	4620      	mov	r0, r4
 800938c:	f7ff ff6d 	bl	800926a <SPI_WaitFlagStateUntilTimeout>
 8009390:	4603      	mov	r3, r0
 8009392:	b350      	cbz	r0, 80093ea <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009394:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009396:	f043 0320 	orr.w	r3, r3, #32
 800939a:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	e024      	b.n	80093ea <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093a0:	68a3      	ldr	r3, [r4, #8]
 80093a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093a6:	d002      	beq.n	80093ae <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093ac:	d1e1      	bne.n	8009372 <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 80093ae:	6820      	ldr	r0, [r4, #0]
 80093b0:	6803      	ldr	r3, [r0, #0]
 80093b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093b6:	6003      	str	r3, [r0, #0]
 80093b8:	e7db      	b.n	8009372 <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80093ba:	9200      	str	r2, [sp, #0]
 80093bc:	460b      	mov	r3, r1
 80093be:	2200      	movs	r2, #0
 80093c0:	2101      	movs	r1, #1
 80093c2:	4620      	mov	r0, r4
 80093c4:	f7ff ff51 	bl	800926a <SPI_WaitFlagStateUntilTimeout>
 80093c8:	4603      	mov	r3, r0
 80093ca:	b170      	cbz	r0, 80093ea <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80093ce:	f043 0320 	orr.w	r3, r3, #32
 80093d2:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e008      	b.n	80093ea <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80093d8:	9200      	str	r2, [sp, #0]
 80093da:	460b      	mov	r3, r1
 80093dc:	2200      	movs	r2, #0
 80093de:	2101      	movs	r1, #1
 80093e0:	4620      	mov	r0, r4
 80093e2:	f7ff ff42 	bl	800926a <SPI_WaitFlagStateUntilTimeout>
 80093e6:	4603      	mov	r3, r0
 80093e8:	b910      	cbnz	r0, 80093f0 <SPI_EndRxTransaction+0x8c>
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	b002      	add	sp, #8
 80093ee:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80093f2:	f043 0320 	orr.w	r3, r3, #32
 80093f6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80093f8:	2303      	movs	r3, #3
 80093fa:	e7f6      	b.n	80093ea <SPI_EndRxTransaction+0x86>

080093fc <HAL_SPI_Init>:
  if (hspi == NULL)
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d03b      	beq.n	8009478 <HAL_SPI_Init+0x7c>
{
 8009400:	b510      	push	{r4, lr}
 8009402:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009404:	2300      	movs	r3, #0
 8009406:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009408:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800940c:	2b00      	cmp	r3, #0
 800940e:	d02e      	beq.n	800946e <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009410:	2302      	movs	r3, #2
 8009412:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8009416:	6822      	ldr	r2, [r4, #0]
 8009418:	6813      	ldr	r3, [r2, #0]
 800941a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800941e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009420:	6863      	ldr	r3, [r4, #4]
 8009422:	68a2      	ldr	r2, [r4, #8]
 8009424:	4313      	orrs	r3, r2
 8009426:	68e2      	ldr	r2, [r4, #12]
 8009428:	4313      	orrs	r3, r2
 800942a:	6922      	ldr	r2, [r4, #16]
 800942c:	4313      	orrs	r3, r2
 800942e:	6962      	ldr	r2, [r4, #20]
 8009430:	4313      	orrs	r3, r2
 8009432:	69a2      	ldr	r2, [r4, #24]
 8009434:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8009438:	4313      	orrs	r3, r2
 800943a:	69e2      	ldr	r2, [r4, #28]
 800943c:	4313      	orrs	r3, r2
 800943e:	6a22      	ldr	r2, [r4, #32]
 8009440:	4313      	orrs	r3, r2
 8009442:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009444:	6822      	ldr	r2, [r4, #0]
 8009446:	430b      	orrs	r3, r1
 8009448:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800944a:	8b63      	ldrh	r3, [r4, #26]
 800944c:	f003 0304 	and.w	r3, r3, #4
 8009450:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009452:	6822      	ldr	r2, [r4, #0]
 8009454:	430b      	orrs	r3, r1
 8009456:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009458:	6822      	ldr	r2, [r4, #0]
 800945a:	69d3      	ldr	r3, [r2, #28]
 800945c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009460:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009462:	2000      	movs	r0, #0
 8009464:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009466:	2301      	movs	r3, #1
 8009468:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800946c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800946e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8009472:	f7fc fff3 	bl	800645c <HAL_SPI_MspInit>
 8009476:	e7cb      	b.n	8009410 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8009478:	2001      	movs	r0, #1
}
 800947a:	4770      	bx	lr

0800947c <HAL_SPI_Transmit>:
{
 800947c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009480:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8009482:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8009486:	2c01      	cmp	r4, #1
 8009488:	f000 80c3 	beq.w	8009612 <HAL_SPI_Transmit+0x196>
 800948c:	461d      	mov	r5, r3
 800948e:	4617      	mov	r7, r2
 8009490:	4688      	mov	r8, r1
 8009492:	4604      	mov	r4, r0
 8009494:	2301      	movs	r3, #1
 8009496:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800949a:	f7fd fea7 	bl	80071ec <HAL_GetTick>
 800949e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80094a0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d009      	beq.n	80094be <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 80094aa:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80094ac:	2301      	movs	r3, #1
 80094ae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80094b2:	2300      	movs	r3, #0
 80094b4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80094b8:	b002      	add	sp, #8
 80094ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80094be:	f1b8 0f00 	cmp.w	r8, #0
 80094c2:	f000 8098 	beq.w	80095f6 <HAL_SPI_Transmit+0x17a>
 80094c6:	2f00      	cmp	r7, #0
 80094c8:	f000 8097 	beq.w	80095fa <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80094cc:	2303      	movs	r3, #3
 80094ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094d2:	2300      	movs	r3, #0
 80094d4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80094d6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80094da:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80094dc:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80094de:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80094e0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80094e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80094e4:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80094e6:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094e8:	68a3      	ldr	r3, [r4, #8]
 80094ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094ee:	d01c      	beq.n	800952a <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094f0:	6823      	ldr	r3, [r4, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80094f8:	d103      	bne.n	8009502 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009500:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009502:	68e3      	ldr	r3, [r4, #12]
 8009504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009508:	d015      	beq.n	8009536 <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800950a:	6863      	ldr	r3, [r4, #4]
 800950c:	b10b      	cbz	r3, 8009512 <HAL_SPI_Transmit+0x96>
 800950e:	2f01      	cmp	r7, #1
 8009510:	d149      	bne.n	80095a6 <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009512:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	7812      	ldrb	r2, [r2, #0]
 8009518:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800951a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800951c:	3301      	adds	r3, #1
 800951e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8009520:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009522:	3b01      	subs	r3, #1
 8009524:	b29b      	uxth	r3, r3
 8009526:	86e3      	strh	r3, [r4, #54]	; 0x36
 8009528:	e03d      	b.n	80095a6 <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 800952a:	6822      	ldr	r2, [r4, #0]
 800952c:	6813      	ldr	r3, [r2, #0]
 800952e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009532:	6013      	str	r3, [r2, #0]
 8009534:	e7dc      	b.n	80094f0 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009536:	6863      	ldr	r3, [r4, #4]
 8009538:	b10b      	cbz	r3, 800953e <HAL_SPI_Transmit+0xc2>
 800953a:	2f01      	cmp	r7, #1
 800953c:	d115      	bne.n	800956a <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800953e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009540:	6823      	ldr	r3, [r4, #0]
 8009542:	8812      	ldrh	r2, [r2, #0]
 8009544:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009546:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009548:	3302      	adds	r3, #2
 800954a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800954c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800954e:	3b01      	subs	r3, #1
 8009550:	b29b      	uxth	r3, r3
 8009552:	86e3      	strh	r3, [r4, #54]	; 0x36
 8009554:	e009      	b.n	800956a <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009556:	f7fd fe49 	bl	80071ec <HAL_GetTick>
 800955a:	1b80      	subs	r0, r0, r6
 800955c:	42a8      	cmp	r0, r5
 800955e:	d302      	bcc.n	8009566 <HAL_SPI_Transmit+0xea>
 8009560:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8009564:	d14b      	bne.n	80095fe <HAL_SPI_Transmit+0x182>
 8009566:	2d00      	cmp	r5, #0
 8009568:	d04b      	beq.n	8009602 <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 800956a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800956c:	b29b      	uxth	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	d02c      	beq.n	80095cc <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	689a      	ldr	r2, [r3, #8]
 8009576:	f012 0f02 	tst.w	r2, #2
 800957a:	d0ec      	beq.n	8009556 <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800957c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800957e:	8812      	ldrh	r2, [r2, #0]
 8009580:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009582:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009584:	3302      	adds	r3, #2
 8009586:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8009588:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800958a:	3b01      	subs	r3, #1
 800958c:	b29b      	uxth	r3, r3
 800958e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8009590:	e7eb      	b.n	800956a <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009592:	f7fd fe2b 	bl	80071ec <HAL_GetTick>
 8009596:	1b80      	subs	r0, r0, r6
 8009598:	42a8      	cmp	r0, r5
 800959a:	d302      	bcc.n	80095a2 <HAL_SPI_Transmit+0x126>
 800959c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80095a0:	d131      	bne.n	8009606 <HAL_SPI_Transmit+0x18a>
 80095a2:	2d00      	cmp	r5, #0
 80095a4:	d031      	beq.n	800960a <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 80095a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	b17b      	cbz	r3, 80095cc <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	689a      	ldr	r2, [r3, #8]
 80095b0:	f012 0f02 	tst.w	r2, #2
 80095b4:	d0ed      	beq.n	8009592 <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80095b8:	7812      	ldrb	r2, [r2, #0]
 80095ba:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80095bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80095be:	3301      	adds	r3, #1
 80095c0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80095c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80095c4:	3b01      	subs	r3, #1
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80095ca:	e7ec      	b.n	80095a6 <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095cc:	4632      	mov	r2, r6
 80095ce:	4629      	mov	r1, r5
 80095d0:	4620      	mov	r0, r4
 80095d2:	f7ff fe93 	bl	80092fc <SPI_EndRxTxTransaction>
 80095d6:	b108      	cbz	r0, 80095dc <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095d8:	2320      	movs	r3, #32
 80095da:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095dc:	68a3      	ldr	r3, [r4, #8]
 80095de:	b933      	cbnz	r3, 80095ee <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	68da      	ldr	r2, [r3, #12]
 80095e6:	9201      	str	r2, [sp, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	9301      	str	r3, [sp, #4]
 80095ec:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80095f0:	b96b      	cbnz	r3, 800960e <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095f2:	2000      	movs	r0, #0
 80095f4:	e75a      	b.n	80094ac <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80095f6:	2001      	movs	r0, #1
 80095f8:	e758      	b.n	80094ac <HAL_SPI_Transmit+0x30>
 80095fa:	2001      	movs	r0, #1
 80095fc:	e756      	b.n	80094ac <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80095fe:	2003      	movs	r0, #3
 8009600:	e754      	b.n	80094ac <HAL_SPI_Transmit+0x30>
 8009602:	2003      	movs	r0, #3
 8009604:	e752      	b.n	80094ac <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8009606:	2003      	movs	r0, #3
 8009608:	e750      	b.n	80094ac <HAL_SPI_Transmit+0x30>
 800960a:	2003      	movs	r0, #3
 800960c:	e74e      	b.n	80094ac <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 800960e:	2001      	movs	r0, #1
 8009610:	e74c      	b.n	80094ac <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8009612:	2002      	movs	r0, #2
 8009614:	e750      	b.n	80094b8 <HAL_SPI_Transmit+0x3c>

08009616 <HAL_SPI_TransmitReceive>:
{
 8009616:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800961a:	b083      	sub	sp, #12
 800961c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8009620:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8009624:	2c01      	cmp	r4, #1
 8009626:	f000 810b 	beq.w	8009840 <HAL_SPI_TransmitReceive+0x22a>
 800962a:	461d      	mov	r5, r3
 800962c:	4617      	mov	r7, r2
 800962e:	460e      	mov	r6, r1
 8009630:	4604      	mov	r4, r0
 8009632:	2301      	movs	r3, #1
 8009634:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8009638:	f7fd fdd8 	bl	80071ec <HAL_GetTick>
 800963c:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 800963e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8009642:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8009644:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009646:	2801      	cmp	r0, #1
 8009648:	d015      	beq.n	8009676 <HAL_SPI_TransmitReceive+0x60>
 800964a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800964e:	d00a      	beq.n	8009666 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 8009650:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8009652:	2201      	movs	r2, #1
 8009654:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009658:	2200      	movs	r2, #0
 800965a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 800965e:	4618      	mov	r0, r3
 8009660:	b003      	add	sp, #12
 8009662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009666:	68a3      	ldr	r3, [r4, #8]
 8009668:	2b00      	cmp	r3, #0
 800966a:	f040 80db 	bne.w	8009824 <HAL_SPI_TransmitReceive+0x20e>
 800966e:	2804      	cmp	r0, #4
 8009670:	d001      	beq.n	8009676 <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 8009672:	2302      	movs	r3, #2
 8009674:	e7ed      	b.n	8009652 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009676:	2e00      	cmp	r6, #0
 8009678:	f000 80d6 	beq.w	8009828 <HAL_SPI_TransmitReceive+0x212>
 800967c:	2f00      	cmp	r7, #0
 800967e:	f000 80d5 	beq.w	800982c <HAL_SPI_TransmitReceive+0x216>
 8009682:	2d00      	cmp	r5, #0
 8009684:	f000 80d4 	beq.w	8009830 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009688:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b04      	cmp	r3, #4
 8009690:	d002      	beq.n	8009698 <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009692:	2305      	movs	r3, #5
 8009694:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009698:	2300      	movs	r3, #0
 800969a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800969c:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800969e:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80096a0:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80096a2:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80096a4:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80096a6:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80096a8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80096aa:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80096b4:	d103      	bne.n	80096be <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096bc:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096be:	68e3      	ldr	r3, [r4, #12]
 80096c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096c4:	d010      	beq.n	80096e8 <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096c6:	6863      	ldr	r3, [r4, #4]
 80096c8:	b10b      	cbz	r3, 80096ce <HAL_SPI_TransmitReceive+0xb8>
 80096ca:	2d01      	cmp	r5, #1
 80096cc:	d10a      	bne.n	80096e4 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	7812      	ldrb	r2, [r2, #0]
 80096d4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80096d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80096d8:	3301      	adds	r3, #1
 80096da:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80096dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80096de:	3b01      	subs	r3, #1
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80096e4:	2501      	movs	r5, #1
 80096e6:	e069      	b.n	80097bc <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096e8:	6863      	ldr	r3, [r4, #4]
 80096ea:	b10b      	cbz	r3, 80096f0 <HAL_SPI_TransmitReceive+0xda>
 80096ec:	2d01      	cmp	r5, #1
 80096ee:	d10a      	bne.n	8009706 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	8812      	ldrh	r2, [r2, #0]
 80096f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80096fa:	3302      	adds	r3, #2
 80096fc:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80096fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009700:	3b01      	subs	r3, #1
 8009702:	b29b      	uxth	r3, r3
 8009704:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8009706:	2501      	movs	r5, #1
 8009708:	e01b      	b.n	8009742 <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800970a:	6823      	ldr	r3, [r4, #0]
 800970c:	689a      	ldr	r2, [r3, #8]
 800970e:	f012 0f01 	tst.w	r2, #1
 8009712:	d00d      	beq.n	8009730 <HAL_SPI_TransmitReceive+0x11a>
 8009714:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009716:	b292      	uxth	r2, r2
 8009718:	b152      	cbz	r2, 8009730 <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800971a:	68da      	ldr	r2, [r3, #12]
 800971c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800971e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009720:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009722:	3302      	adds	r3, #2
 8009724:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8009726:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009728:	3b01      	subs	r3, #1
 800972a:	b29b      	uxth	r3, r3
 800972c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800972e:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009730:	f7fd fd5c 	bl	80071ec <HAL_GetTick>
 8009734:	eba0 0009 	sub.w	r0, r0, r9
 8009738:	4540      	cmp	r0, r8
 800973a:	d302      	bcc.n	8009742 <HAL_SPI_TransmitReceive+0x12c>
 800973c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8009740:	d178      	bne.n	8009834 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009742:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009744:	b29b      	uxth	r3, r3
 8009746:	b91b      	cbnz	r3, 8009750 <HAL_SPI_TransmitReceive+0x13a>
 8009748:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800974a:	b29b      	uxth	r3, r3
 800974c:	2b00      	cmp	r3, #0
 800974e:	d052      	beq.n	80097f6 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	689a      	ldr	r2, [r3, #8]
 8009754:	f012 0f02 	tst.w	r2, #2
 8009758:	d0d7      	beq.n	800970a <HAL_SPI_TransmitReceive+0xf4>
 800975a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800975c:	b292      	uxth	r2, r2
 800975e:	2a00      	cmp	r2, #0
 8009760:	d0d3      	beq.n	800970a <HAL_SPI_TransmitReceive+0xf4>
 8009762:	2d00      	cmp	r5, #0
 8009764:	d0d1      	beq.n	800970a <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009766:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009768:	8812      	ldrh	r2, [r2, #0]
 800976a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800976c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800976e:	3302      	adds	r3, #2
 8009770:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8009772:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009774:	3b01      	subs	r3, #1
 8009776:	b29b      	uxth	r3, r3
 8009778:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800977a:	2500      	movs	r5, #0
 800977c:	e7c5      	b.n	800970a <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	689a      	ldr	r2, [r3, #8]
 8009782:	f012 0f01 	tst.w	r2, #1
 8009786:	d00d      	beq.n	80097a4 <HAL_SPI_TransmitReceive+0x18e>
 8009788:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800978a:	b292      	uxth	r2, r2
 800978c:	b152      	cbz	r2, 80097a4 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800978e:	68da      	ldr	r2, [r3, #12]
 8009790:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009792:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009794:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009796:	3301      	adds	r3, #1
 8009798:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800979a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800979c:	3b01      	subs	r3, #1
 800979e:	b29b      	uxth	r3, r3
 80097a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80097a2:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80097a4:	f7fd fd22 	bl	80071ec <HAL_GetTick>
 80097a8:	eba0 0009 	sub.w	r0, r0, r9
 80097ac:	4540      	cmp	r0, r8
 80097ae:	d302      	bcc.n	80097b6 <HAL_SPI_TransmitReceive+0x1a0>
 80097b0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80097b4:	d140      	bne.n	8009838 <HAL_SPI_TransmitReceive+0x222>
 80097b6:	f1b8 0f00 	cmp.w	r8, #0
 80097ba:	d03f      	beq.n	800983c <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80097be:	b29b      	uxth	r3, r3
 80097c0:	b913      	cbnz	r3, 80097c8 <HAL_SPI_TransmitReceive+0x1b2>
 80097c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	b1b3      	cbz	r3, 80097f6 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	689a      	ldr	r2, [r3, #8]
 80097cc:	f012 0f02 	tst.w	r2, #2
 80097d0:	d0d5      	beq.n	800977e <HAL_SPI_TransmitReceive+0x168>
 80097d2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80097d4:	b292      	uxth	r2, r2
 80097d6:	2a00      	cmp	r2, #0
 80097d8:	d0d1      	beq.n	800977e <HAL_SPI_TransmitReceive+0x168>
 80097da:	2d00      	cmp	r5, #0
 80097dc:	d0cf      	beq.n	800977e <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80097de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80097e0:	7812      	ldrb	r2, [r2, #0]
 80097e2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80097e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80097e6:	3301      	adds	r3, #1
 80097e8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80097ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80097ec:	3b01      	subs	r3, #1
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80097f2:	2500      	movs	r5, #0
 80097f4:	e7c3      	b.n	800977e <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80097f6:	464a      	mov	r2, r9
 80097f8:	4641      	mov	r1, r8
 80097fa:	4620      	mov	r0, r4
 80097fc:	f7ff fd7e 	bl	80092fc <SPI_EndRxTxTransaction>
 8009800:	4603      	mov	r3, r0
 8009802:	b118      	cbz	r0, 800980c <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009804:	2320      	movs	r3, #32
 8009806:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8009808:	2301      	movs	r3, #1
    goto error;
 800980a:	e722      	b.n	8009652 <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800980c:	68a2      	ldr	r2, [r4, #8]
 800980e:	2a00      	cmp	r2, #0
 8009810:	f47f af1f 	bne.w	8009652 <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009814:	9201      	str	r2, [sp, #4]
 8009816:	6822      	ldr	r2, [r4, #0]
 8009818:	68d1      	ldr	r1, [r2, #12]
 800981a:	9101      	str	r1, [sp, #4]
 800981c:	6892      	ldr	r2, [r2, #8]
 800981e:	9201      	str	r2, [sp, #4]
 8009820:	9a01      	ldr	r2, [sp, #4]
 8009822:	e716      	b.n	8009652 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 8009824:	2302      	movs	r3, #2
 8009826:	e714      	b.n	8009652 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e712      	b.n	8009652 <HAL_SPI_TransmitReceive+0x3c>
 800982c:	2301      	movs	r3, #1
 800982e:	e710      	b.n	8009652 <HAL_SPI_TransmitReceive+0x3c>
 8009830:	2301      	movs	r3, #1
 8009832:	e70e      	b.n	8009652 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8009834:	2303      	movs	r3, #3
 8009836:	e70c      	b.n	8009652 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8009838:	2303      	movs	r3, #3
 800983a:	e70a      	b.n	8009652 <HAL_SPI_TransmitReceive+0x3c>
 800983c:	2303      	movs	r3, #3
 800983e:	e708      	b.n	8009652 <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8009840:	2302      	movs	r3, #2
 8009842:	e70c      	b.n	800965e <HAL_SPI_TransmitReceive+0x48>

08009844 <HAL_SPI_Receive>:
{
 8009844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009848:	b082      	sub	sp, #8
 800984a:	4604      	mov	r4, r0
 800984c:	460f      	mov	r7, r1
 800984e:	4690      	mov	r8, r2
 8009850:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009852:	6843      	ldr	r3, [r0, #4]
 8009854:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009858:	d019      	beq.n	800988e <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 800985a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800985e:	2b01      	cmp	r3, #1
 8009860:	f000 809f 	beq.w	80099a2 <HAL_SPI_Receive+0x15e>
 8009864:	2301      	movs	r3, #1
 8009866:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800986a:	f7fd fcbf 	bl	80071ec <HAL_GetTick>
 800986e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8009870:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b01      	cmp	r3, #1
 8009878:	d015      	beq.n	80098a6 <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 800987a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800987c:	2301      	movs	r3, #1
 800987e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009882:	2300      	movs	r3, #0
 8009884:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8009888:	b002      	add	sp, #8
 800988a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800988e:	6883      	ldr	r3, [r0, #8]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e2      	bne.n	800985a <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009894:	2304      	movs	r3, #4
 8009896:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800989a:	9500      	str	r5, [sp, #0]
 800989c:	4613      	mov	r3, r2
 800989e:	460a      	mov	r2, r1
 80098a0:	f7ff feb9 	bl	8009616 <HAL_SPI_TransmitReceive>
 80098a4:	e7f0      	b.n	8009888 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 80098a6:	2f00      	cmp	r7, #0
 80098a8:	d06d      	beq.n	8009986 <HAL_SPI_Receive+0x142>
 80098aa:	f1b8 0f00 	cmp.w	r8, #0
 80098ae:	d06c      	beq.n	800998a <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80098b0:	2304      	movs	r3, #4
 80098b2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098b6:	2300      	movs	r3, #0
 80098b8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80098ba:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80098bc:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80098c0:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80098c4:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80098c6:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80098c8:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 80098ca:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80098cc:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098ce:	68a3      	ldr	r3, [r4, #8]
 80098d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098d4:	d00b      	beq.n	80098ee <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	f012 0f40 	tst.w	r2, #64	; 0x40
 80098de:	d103      	bne.n	80098e8 <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098e6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80098e8:	68e3      	ldr	r3, [r4, #12]
 80098ea:	b183      	cbz	r3, 800990e <HAL_SPI_Receive+0xca>
 80098ec:	e02c      	b.n	8009948 <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 80098ee:	6822      	ldr	r2, [r4, #0]
 80098f0:	6813      	ldr	r3, [r2, #0]
 80098f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098f6:	6013      	str	r3, [r2, #0]
 80098f8:	e7ed      	b.n	80098d6 <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098fa:	f7fd fc77 	bl	80071ec <HAL_GetTick>
 80098fe:	1b80      	subs	r0, r0, r6
 8009900:	42a8      	cmp	r0, r5
 8009902:	d302      	bcc.n	800990a <HAL_SPI_Receive+0xc6>
 8009904:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8009908:	d141      	bne.n	800998e <HAL_SPI_Receive+0x14a>
 800990a:	2d00      	cmp	r5, #0
 800990c:	d041      	beq.n	8009992 <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 800990e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009910:	b29b      	uxth	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d02b      	beq.n	800996e <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	689a      	ldr	r2, [r3, #8]
 800991a:	f012 0f01 	tst.w	r2, #1
 800991e:	d0ec      	beq.n	80098fa <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009920:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009922:	7b1b      	ldrb	r3, [r3, #12]
 8009924:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009926:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009928:	3301      	adds	r3, #1
 800992a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800992c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800992e:	3b01      	subs	r3, #1
 8009930:	b29b      	uxth	r3, r3
 8009932:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009934:	e7eb      	b.n	800990e <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009936:	f7fd fc59 	bl	80071ec <HAL_GetTick>
 800993a:	1b80      	subs	r0, r0, r6
 800993c:	42a8      	cmp	r0, r5
 800993e:	d302      	bcc.n	8009946 <HAL_SPI_Receive+0x102>
 8009940:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8009944:	d127      	bne.n	8009996 <HAL_SPI_Receive+0x152>
 8009946:	b345      	cbz	r5, 800999a <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 8009948:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800994a:	b29b      	uxth	r3, r3
 800994c:	b17b      	cbz	r3, 800996e <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	689a      	ldr	r2, [r3, #8]
 8009952:	f012 0f01 	tst.w	r2, #1
 8009956:	d0ee      	beq.n	8009936 <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009958:	68da      	ldr	r2, [r3, #12]
 800995a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800995c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800995e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009960:	3302      	adds	r3, #2
 8009962:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8009964:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009966:	3b01      	subs	r3, #1
 8009968:	b29b      	uxth	r3, r3
 800996a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800996c:	e7ec      	b.n	8009948 <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800996e:	4632      	mov	r2, r6
 8009970:	4629      	mov	r1, r5
 8009972:	4620      	mov	r0, r4
 8009974:	f7ff fcf6 	bl	8009364 <SPI_EndRxTransaction>
 8009978:	b108      	cbz	r0, 800997e <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800997a:	2320      	movs	r3, #32
 800997c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800997e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009980:	b96b      	cbnz	r3, 800999e <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009982:	2000      	movs	r0, #0
 8009984:	e77a      	b.n	800987c <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8009986:	2001      	movs	r0, #1
 8009988:	e778      	b.n	800987c <HAL_SPI_Receive+0x38>
 800998a:	2001      	movs	r0, #1
 800998c:	e776      	b.n	800987c <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800998e:	2003      	movs	r0, #3
 8009990:	e774      	b.n	800987c <HAL_SPI_Receive+0x38>
 8009992:	2003      	movs	r0, #3
 8009994:	e772      	b.n	800987c <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8009996:	2003      	movs	r0, #3
 8009998:	e770      	b.n	800987c <HAL_SPI_Receive+0x38>
 800999a:	2003      	movs	r0, #3
 800999c:	e76e      	b.n	800987c <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 800999e:	2001      	movs	r0, #1
 80099a0:	e76c      	b.n	800987c <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 80099a2:	2002      	movs	r0, #2
 80099a4:	e770      	b.n	8009888 <HAL_SPI_Receive+0x44>
	...

080099a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099a8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099aa:	6a03      	ldr	r3, [r0, #32]
 80099ac:	f023 0301 	bic.w	r3, r3, #1
 80099b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099b6:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099b8:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099bc:	680d      	ldr	r5, [r1, #0]
 80099be:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099c2:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099c6:	688b      	ldr	r3, [r1, #8]
 80099c8:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099ca:	4d0d      	ldr	r5, [pc, #52]	; (8009a00 <TIM_OC1_SetConfig+0x58>)
 80099cc:	42a8      	cmp	r0, r5
 80099ce:	d009      	beq.n	80099e4 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099d0:	4d0b      	ldr	r5, [pc, #44]	; (8009a00 <TIM_OC1_SetConfig+0x58>)
 80099d2:	42a8      	cmp	r0, r5
 80099d4:	d00d      	beq.n	80099f2 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099d6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099d8:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099da:	684a      	ldr	r2, [r1, #4]
 80099dc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099de:	6203      	str	r3, [r0, #32]
}
 80099e0:	bc70      	pop	{r4, r5, r6}
 80099e2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80099e4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80099e8:	68cc      	ldr	r4, [r1, #12]
 80099ea:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80099ec:	f023 0304 	bic.w	r3, r3, #4
 80099f0:	e7ee      	b.n	80099d0 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80099f6:	694c      	ldr	r4, [r1, #20]
 80099f8:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 80099fa:	698a      	ldr	r2, [r1, #24]
 80099fc:	4322      	orrs	r2, r4
 80099fe:	e7ea      	b.n	80099d6 <TIM_OC1_SetConfig+0x2e>
 8009a00:	40010000 	.word	0x40010000

08009a04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a04:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a06:	6a03      	ldr	r3, [r0, #32]
 8009a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a0c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a0e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a10:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a12:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a14:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a18:	680d      	ldr	r5, [r1, #0]
 8009a1a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a20:	688d      	ldr	r5, [r1, #8]
 8009a22:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a26:	4d0f      	ldr	r5, [pc, #60]	; (8009a64 <TIM_OC3_SetConfig+0x60>)
 8009a28:	42a8      	cmp	r0, r5
 8009a2a:	d009      	beq.n	8009a40 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a2c:	4d0d      	ldr	r5, [pc, #52]	; (8009a64 <TIM_OC3_SetConfig+0x60>)
 8009a2e:	42a8      	cmp	r0, r5
 8009a30:	d00e      	beq.n	8009a50 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a32:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a34:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a36:	684a      	ldr	r2, [r1, #4]
 8009a38:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a3a:	6203      	str	r3, [r0, #32]
}
 8009a3c:	bc30      	pop	{r4, r5}
 8009a3e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a44:	68cd      	ldr	r5, [r1, #12]
 8009a46:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a4e:	e7ed      	b.n	8009a2c <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a50:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a54:	694d      	ldr	r5, [r1, #20]
 8009a56:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a5a:	698d      	ldr	r5, [r1, #24]
 8009a5c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8009a60:	e7e7      	b.n	8009a32 <TIM_OC3_SetConfig+0x2e>
 8009a62:	bf00      	nop
 8009a64:	40010000 	.word	0x40010000

08009a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a68:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a6a:	6a03      	ldr	r3, [r0, #32]
 8009a6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a70:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a72:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a74:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a76:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a78:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a7c:	680d      	ldr	r5, [r1, #0]
 8009a7e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a86:	688d      	ldr	r5, [r1, #8]
 8009a88:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a8c:	4d07      	ldr	r5, [pc, #28]	; (8009aac <TIM_OC4_SetConfig+0x44>)
 8009a8e:	42a8      	cmp	r0, r5
 8009a90:	d006      	beq.n	8009aa0 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a92:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a94:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a96:	684a      	ldr	r2, [r1, #4]
 8009a98:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a9a:	6203      	str	r3, [r0, #32]
}
 8009a9c:	bc30      	pop	{r4, r5}
 8009a9e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009aa0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009aa4:	694d      	ldr	r5, [r1, #20]
 8009aa6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8009aaa:	e7f2      	b.n	8009a92 <TIM_OC4_SetConfig+0x2a>
 8009aac:	40010000 	.word	0x40010000

08009ab0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ab0:	6802      	ldr	r2, [r0, #0]
 8009ab2:	68d3      	ldr	r3, [r2, #12]
 8009ab4:	f043 0301 	orr.w	r3, r3, #1
 8009ab8:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009aba:	6802      	ldr	r2, [r0, #0]
 8009abc:	6893      	ldr	r3, [r2, #8]
 8009abe:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ac2:	2b06      	cmp	r3, #6
 8009ac4:	d003      	beq.n	8009ace <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8009ac6:	6813      	ldr	r3, [r2, #0]
 8009ac8:	f043 0301 	orr.w	r3, r3, #1
 8009acc:	6013      	str	r3, [r2, #0]
}
 8009ace:	2000      	movs	r0, #0
 8009ad0:	4770      	bx	lr

08009ad2 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8009ad2:	4770      	bx	lr

08009ad4 <HAL_TIM_IC_CaptureCallback>:
}
 8009ad4:	4770      	bx	lr

08009ad6 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_TIM_TriggerCallback>:
}
 8009ad8:	4770      	bx	lr

08009ada <HAL_TIM_IRQHandler>:
{
 8009ada:	b510      	push	{r4, lr}
 8009adc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ade:	6803      	ldr	r3, [r0, #0]
 8009ae0:	691a      	ldr	r2, [r3, #16]
 8009ae2:	f012 0f02 	tst.w	r2, #2
 8009ae6:	d011      	beq.n	8009b0c <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ae8:	68da      	ldr	r2, [r3, #12]
 8009aea:	f012 0f02 	tst.w	r2, #2
 8009aee:	d00d      	beq.n	8009b0c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009af0:	f06f 0202 	mvn.w	r2, #2
 8009af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009af6:	2301      	movs	r3, #1
 8009af8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009afa:	6803      	ldr	r3, [r0, #0]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	f013 0f03 	tst.w	r3, #3
 8009b02:	d070      	beq.n	8009be6 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8009b04:	f7ff ffe6 	bl	8009ad4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	691a      	ldr	r2, [r3, #16]
 8009b10:	f012 0f04 	tst.w	r2, #4
 8009b14:	d012      	beq.n	8009b3c <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b16:	68da      	ldr	r2, [r3, #12]
 8009b18:	f012 0f04 	tst.w	r2, #4
 8009b1c:	d00e      	beq.n	8009b3c <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b1e:	f06f 0204 	mvn.w	r2, #4
 8009b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b24:	2302      	movs	r3, #2
 8009b26:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009b30:	d05f      	beq.n	8009bf2 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8009b32:	4620      	mov	r0, r4
 8009b34:	f7ff ffce 	bl	8009ad4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b3c:	6823      	ldr	r3, [r4, #0]
 8009b3e:	691a      	ldr	r2, [r3, #16]
 8009b40:	f012 0f08 	tst.w	r2, #8
 8009b44:	d012      	beq.n	8009b6c <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b46:	68da      	ldr	r2, [r3, #12]
 8009b48:	f012 0f08 	tst.w	r2, #8
 8009b4c:	d00e      	beq.n	8009b6c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b4e:	f06f 0208 	mvn.w	r2, #8
 8009b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b54:	2304      	movs	r3, #4
 8009b56:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	69db      	ldr	r3, [r3, #28]
 8009b5c:	f013 0f03 	tst.w	r3, #3
 8009b60:	d04e      	beq.n	8009c00 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8009b62:	4620      	mov	r0, r4
 8009b64:	f7ff ffb6 	bl	8009ad4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	691a      	ldr	r2, [r3, #16]
 8009b70:	f012 0f10 	tst.w	r2, #16
 8009b74:	d012      	beq.n	8009b9c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b76:	68da      	ldr	r2, [r3, #12]
 8009b78:	f012 0f10 	tst.w	r2, #16
 8009b7c:	d00e      	beq.n	8009b9c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b7e:	f06f 0210 	mvn.w	r2, #16
 8009b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b84:	2308      	movs	r3, #8
 8009b86:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	69db      	ldr	r3, [r3, #28]
 8009b8c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009b90:	d03d      	beq.n	8009c0e <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8009b92:	4620      	mov	r0, r4
 8009b94:	f7ff ff9e 	bl	8009ad4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	691a      	ldr	r2, [r3, #16]
 8009ba0:	f012 0f01 	tst.w	r2, #1
 8009ba4:	d003      	beq.n	8009bae <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ba6:	68da      	ldr	r2, [r3, #12]
 8009ba8:	f012 0f01 	tst.w	r2, #1
 8009bac:	d136      	bne.n	8009c1c <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	691a      	ldr	r2, [r3, #16]
 8009bb2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009bb6:	d003      	beq.n	8009bc0 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bb8:	68da      	ldr	r2, [r3, #12]
 8009bba:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009bbe:	d134      	bne.n	8009c2a <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009bc0:	6823      	ldr	r3, [r4, #0]
 8009bc2:	691a      	ldr	r2, [r3, #16]
 8009bc4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009bc8:	d003      	beq.n	8009bd2 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009bca:	68da      	ldr	r2, [r3, #12]
 8009bcc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009bd0:	d132      	bne.n	8009c38 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	691a      	ldr	r2, [r3, #16]
 8009bd6:	f012 0f20 	tst.w	r2, #32
 8009bda:	d003      	beq.n	8009be4 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009bdc:	68da      	ldr	r2, [r3, #12]
 8009bde:	f012 0f20 	tst.w	r2, #32
 8009be2:	d130      	bne.n	8009c46 <HAL_TIM_IRQHandler+0x16c>
}
 8009be4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009be6:	f7ff ff74 	bl	8009ad2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bea:	4620      	mov	r0, r4
 8009bec:	f7ff ff73 	bl	8009ad6 <HAL_TIM_PWM_PulseFinishedCallback>
 8009bf0:	e78a      	b.n	8009b08 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f7ff ff6d 	bl	8009ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f7ff ff6c 	bl	8009ad6 <HAL_TIM_PWM_PulseFinishedCallback>
 8009bfe:	e79b      	b.n	8009b38 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c00:	4620      	mov	r0, r4
 8009c02:	f7ff ff66 	bl	8009ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c06:	4620      	mov	r0, r4
 8009c08:	f7ff ff65 	bl	8009ad6 <HAL_TIM_PWM_PulseFinishedCallback>
 8009c0c:	e7ac      	b.n	8009b68 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f7ff ff5f 	bl	8009ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c14:	4620      	mov	r0, r4
 8009c16:	f7ff ff5e 	bl	8009ad6 <HAL_TIM_PWM_PulseFinishedCallback>
 8009c1a:	e7bd      	b.n	8009b98 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c1c:	f06f 0201 	mvn.w	r2, #1
 8009c20:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c22:	4620      	mov	r0, r4
 8009c24:	f7fc f846 	bl	8005cb4 <HAL_TIM_PeriodElapsedCallback>
 8009c28:	e7c1      	b.n	8009bae <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c2e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009c30:	4620      	mov	r0, r4
 8009c32:	f000 f9c5 	bl	8009fc0 <HAL_TIMEx_BreakCallback>
 8009c36:	e7c3      	b.n	8009bc0 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c3c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f7ff ff4a 	bl	8009ad8 <HAL_TIM_TriggerCallback>
 8009c44:	e7c5      	b.n	8009bd2 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c46:	f06f 0220 	mvn.w	r2, #32
 8009c4a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	f000 f9b6 	bl	8009fbe <HAL_TIMEx_CommutCallback>
}
 8009c52:	e7c7      	b.n	8009be4 <HAL_TIM_IRQHandler+0x10a>

08009c54 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8009c54:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c56:	4a25      	ldr	r2, [pc, #148]	; (8009cec <TIM_Base_SetConfig+0x98>)
 8009c58:	4290      	cmp	r0, r2
 8009c5a:	d00e      	beq.n	8009c7a <TIM_Base_SetConfig+0x26>
 8009c5c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009c60:	d00b      	beq.n	8009c7a <TIM_Base_SetConfig+0x26>
 8009c62:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009c66:	4290      	cmp	r0, r2
 8009c68:	d007      	beq.n	8009c7a <TIM_Base_SetConfig+0x26>
 8009c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c6e:	4290      	cmp	r0, r2
 8009c70:	d003      	beq.n	8009c7a <TIM_Base_SetConfig+0x26>
 8009c72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c76:	4290      	cmp	r0, r2
 8009c78:	d103      	bne.n	8009c82 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009c7e:	684a      	ldr	r2, [r1, #4]
 8009c80:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c82:	4a1a      	ldr	r2, [pc, #104]	; (8009cec <TIM_Base_SetConfig+0x98>)
 8009c84:	4290      	cmp	r0, r2
 8009c86:	d01a      	beq.n	8009cbe <TIM_Base_SetConfig+0x6a>
 8009c88:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009c8c:	d017      	beq.n	8009cbe <TIM_Base_SetConfig+0x6a>
 8009c8e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009c92:	4290      	cmp	r0, r2
 8009c94:	d013      	beq.n	8009cbe <TIM_Base_SetConfig+0x6a>
 8009c96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c9a:	4290      	cmp	r0, r2
 8009c9c:	d00f      	beq.n	8009cbe <TIM_Base_SetConfig+0x6a>
 8009c9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ca2:	4290      	cmp	r0, r2
 8009ca4:	d00b      	beq.n	8009cbe <TIM_Base_SetConfig+0x6a>
 8009ca6:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8009caa:	4290      	cmp	r0, r2
 8009cac:	d007      	beq.n	8009cbe <TIM_Base_SetConfig+0x6a>
 8009cae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cb2:	4290      	cmp	r0, r2
 8009cb4:	d003      	beq.n	8009cbe <TIM_Base_SetConfig+0x6a>
 8009cb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cba:	4290      	cmp	r0, r2
 8009cbc:	d103      	bne.n	8009cc6 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cc2:	68ca      	ldr	r2, [r1, #12]
 8009cc4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cca:	694a      	ldr	r2, [r1, #20]
 8009ccc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009cce:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cd0:	688b      	ldr	r3, [r1, #8]
 8009cd2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009cd4:	680b      	ldr	r3, [r1, #0]
 8009cd6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cd8:	4b04      	ldr	r3, [pc, #16]	; (8009cec <TIM_Base_SetConfig+0x98>)
 8009cda:	4298      	cmp	r0, r3
 8009cdc:	d002      	beq.n	8009ce4 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	6143      	str	r3, [r0, #20]
}
 8009ce2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8009ce4:	690b      	ldr	r3, [r1, #16]
 8009ce6:	6303      	str	r3, [r0, #48]	; 0x30
 8009ce8:	e7f9      	b.n	8009cde <TIM_Base_SetConfig+0x8a>
 8009cea:	bf00      	nop
 8009cec:	40010000 	.word	0x40010000

08009cf0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009cf0:	b1a8      	cbz	r0, 8009d1e <HAL_TIM_Base_Init+0x2e>
{
 8009cf2:	b510      	push	{r4, lr}
 8009cf4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009cf6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009cfa:	b15b      	cbz	r3, 8009d14 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d02:	1d21      	adds	r1, r4, #4
 8009d04:	6820      	ldr	r0, [r4, #0]
 8009d06:	f7ff ffa5 	bl	8009c54 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009d10:	2000      	movs	r0, #0
}
 8009d12:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009d14:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009d18:	f7fc fc24 	bl	8006564 <HAL_TIM_Base_MspInit>
 8009d1c:	e7ee      	b.n	8009cfc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8009d1e:	2001      	movs	r0, #1
}
 8009d20:	4770      	bx	lr

08009d22 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8009d22:	b1a8      	cbz	r0, 8009d50 <HAL_TIM_PWM_Init+0x2e>
{
 8009d24:	b510      	push	{r4, lr}
 8009d26:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009d28:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009d2c:	b15b      	cbz	r3, 8009d46 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8009d2e:	2302      	movs	r3, #2
 8009d30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d34:	1d21      	adds	r1, r4, #4
 8009d36:	6820      	ldr	r0, [r4, #0]
 8009d38:	f7ff ff8c 	bl	8009c54 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009d42:	2000      	movs	r0, #0
}
 8009d44:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009d46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8009d4a:	f7fc fbbf 	bl	80064cc <HAL_TIM_PWM_MspInit>
 8009d4e:	e7ee      	b.n	8009d2e <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8009d50:	2001      	movs	r0, #1
}
 8009d52:	4770      	bx	lr

08009d54 <TIM_OC2_SetConfig>:
{
 8009d54:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d56:	6a03      	ldr	r3, [r0, #32]
 8009d58:	f023 0310 	bic.w	r3, r3, #16
 8009d5c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8009d5e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009d60:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009d62:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d64:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d68:	680d      	ldr	r5, [r1, #0]
 8009d6a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8009d6e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d72:	688d      	ldr	r5, [r1, #8]
 8009d74:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d78:	4d0e      	ldr	r5, [pc, #56]	; (8009db4 <TIM_OC2_SetConfig+0x60>)
 8009d7a:	42a8      	cmp	r0, r5
 8009d7c:	d009      	beq.n	8009d92 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d7e:	4d0d      	ldr	r5, [pc, #52]	; (8009db4 <TIM_OC2_SetConfig+0x60>)
 8009d80:	42a8      	cmp	r0, r5
 8009d82:	d00e      	beq.n	8009da2 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8009d84:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009d86:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8009d88:	684a      	ldr	r2, [r1, #4]
 8009d8a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8009d8c:	6203      	str	r3, [r0, #32]
}
 8009d8e:	bc30      	pop	{r4, r5}
 8009d90:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d96:	68cd      	ldr	r5, [r1, #12]
 8009d98:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009da0:	e7ed      	b.n	8009d7e <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009da2:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009da6:	694d      	ldr	r5, [r1, #20]
 8009da8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009dac:	698d      	ldr	r5, [r1, #24]
 8009dae:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8009db2:	e7e7      	b.n	8009d84 <TIM_OC2_SetConfig+0x30>
 8009db4:	40010000 	.word	0x40010000

08009db8 <HAL_TIM_PWM_ConfigChannel>:
{
 8009db8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8009dba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d066      	beq.n	8009e90 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8009dc2:	460d      	mov	r5, r1
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8009dd2:	2a0c      	cmp	r2, #12
 8009dd4:	d81a      	bhi.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x54>
 8009dd6:	e8df f002 	tbb	[pc, r2]
 8009dda:	1907      	.short	0x1907
 8009ddc:	19201919 	.word	0x19201919
 8009de0:	19341919 	.word	0x19341919
 8009de4:	1919      	.short	0x1919
 8009de6:	47          	.byte	0x47
 8009de7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009de8:	6800      	ldr	r0, [r0, #0]
 8009dea:	f7ff fddd 	bl	80099a8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009dee:	6822      	ldr	r2, [r4, #0]
 8009df0:	6993      	ldr	r3, [r2, #24]
 8009df2:	f043 0308 	orr.w	r3, r3, #8
 8009df6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009df8:	6822      	ldr	r2, [r4, #0]
 8009dfa:	6993      	ldr	r3, [r2, #24]
 8009dfc:	f023 0304 	bic.w	r3, r3, #4
 8009e00:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e02:	6822      	ldr	r2, [r4, #0]
 8009e04:	6993      	ldr	r3, [r2, #24]
 8009e06:	6929      	ldr	r1, [r5, #16]
 8009e08:	430b      	orrs	r3, r1
 8009e0a:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009e12:	2000      	movs	r0, #0
 8009e14:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8009e18:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e1a:	6800      	ldr	r0, [r0, #0]
 8009e1c:	f7ff ff9a 	bl	8009d54 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e20:	6822      	ldr	r2, [r4, #0]
 8009e22:	6993      	ldr	r3, [r2, #24]
 8009e24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009e28:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e2a:	6822      	ldr	r2, [r4, #0]
 8009e2c:	6993      	ldr	r3, [r2, #24]
 8009e2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e32:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e34:	6822      	ldr	r2, [r4, #0]
 8009e36:	6993      	ldr	r3, [r2, #24]
 8009e38:	6929      	ldr	r1, [r5, #16]
 8009e3a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009e3e:	6193      	str	r3, [r2, #24]
      break;
 8009e40:	e7e4      	b.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e42:	6800      	ldr	r0, [r0, #0]
 8009e44:	f7ff fdde 	bl	8009a04 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e48:	6822      	ldr	r2, [r4, #0]
 8009e4a:	69d3      	ldr	r3, [r2, #28]
 8009e4c:	f043 0308 	orr.w	r3, r3, #8
 8009e50:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e52:	6822      	ldr	r2, [r4, #0]
 8009e54:	69d3      	ldr	r3, [r2, #28]
 8009e56:	f023 0304 	bic.w	r3, r3, #4
 8009e5a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e5c:	6822      	ldr	r2, [r4, #0]
 8009e5e:	69d3      	ldr	r3, [r2, #28]
 8009e60:	6929      	ldr	r1, [r5, #16]
 8009e62:	430b      	orrs	r3, r1
 8009e64:	61d3      	str	r3, [r2, #28]
      break;
 8009e66:	e7d1      	b.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e68:	6800      	ldr	r0, [r0, #0]
 8009e6a:	f7ff fdfd 	bl	8009a68 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e6e:	6822      	ldr	r2, [r4, #0]
 8009e70:	69d3      	ldr	r3, [r2, #28]
 8009e72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009e76:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e78:	6822      	ldr	r2, [r4, #0]
 8009e7a:	69d3      	ldr	r3, [r2, #28]
 8009e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e80:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e82:	6822      	ldr	r2, [r4, #0]
 8009e84:	69d3      	ldr	r3, [r2, #28]
 8009e86:	6929      	ldr	r1, [r5, #16]
 8009e88:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009e8c:	61d3      	str	r3, [r2, #28]
      break;
 8009e8e:	e7bd      	b.n	8009e0c <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8009e90:	2002      	movs	r0, #2
 8009e92:	e7c1      	b.n	8009e18 <HAL_TIM_PWM_ConfigChannel+0x60>

08009e94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e94:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e96:	f001 011f 	and.w	r1, r1, #31
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ea0:	6a03      	ldr	r3, [r0, #32]
 8009ea2:	ea23 0304 	bic.w	r3, r3, r4
 8009ea6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ea8:	6a03      	ldr	r3, [r0, #32]
 8009eaa:	408a      	lsls	r2, r1
 8009eac:	4313      	orrs	r3, r2
 8009eae:	6203      	str	r3, [r0, #32]
}
 8009eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eb4:	4770      	bx	lr
	...

08009eb8 <HAL_TIM_PWM_Start>:
{
 8009eb8:	b510      	push	{r4, lr}
 8009eba:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	6800      	ldr	r0, [r0, #0]
 8009ec0:	f7ff ffe8 	bl	8009e94 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	4a0a      	ldr	r2, [pc, #40]	; (8009ef0 <HAL_TIM_PWM_Start+0x38>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d00b      	beq.n	8009ee4 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ecc:	6822      	ldr	r2, [r4, #0]
 8009ece:	6893      	ldr	r3, [r2, #8]
 8009ed0:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ed4:	2b06      	cmp	r3, #6
 8009ed6:	d003      	beq.n	8009ee0 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8009ed8:	6813      	ldr	r3, [r2, #0]
 8009eda:	f043 0301 	orr.w	r3, r3, #1
 8009ede:	6013      	str	r3, [r2, #0]
}
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8009ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009eea:	645a      	str	r2, [r3, #68]	; 0x44
 8009eec:	e7ee      	b.n	8009ecc <HAL_TIM_PWM_Start+0x14>
 8009eee:	bf00      	nop
 8009ef0:	40010000 	.word	0x40010000

08009ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ef4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d033      	beq.n	8009f64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8009efc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8009efe:	2301      	movs	r3, #1
 8009f00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f04:	2302      	movs	r3, #2
 8009f06:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f0a:	6803      	ldr	r3, [r0, #0]
 8009f0c:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f0e:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f10:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f14:	680a      	ldr	r2, [r1, #0]
 8009f16:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f1a:	6803      	ldr	r3, [r0, #0]
 8009f1c:	4a12      	ldr	r2, [pc, #72]	; (8009f68 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d012      	beq.n	8009f48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8009f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f26:	d00f      	beq.n	8009f48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8009f28:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d00b      	beq.n	8009f48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8009f30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d007      	beq.n	8009f48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8009f38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d003      	beq.n	8009f48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8009f40:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d104      	bne.n	8009f52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f48:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f4c:	684a      	ldr	r2, [r1, #4]
 8009f4e:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f50:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f52:	2301      	movs	r3, #1
 8009f54:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f58:	2300      	movs	r3, #0
 8009f5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8009f5e:	4618      	mov	r0, r3
}
 8009f60:	bc30      	pop	{r4, r5}
 8009f62:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009f64:	2002      	movs	r0, #2
}
 8009f66:	4770      	bx	lr
 8009f68:	40010000 	.word	0x40010000

08009f6c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d022      	beq.n	8009fba <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8009f74:	2301      	movs	r3, #1
 8009f76:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f7a:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f80:	688a      	ldr	r2, [r1, #8]
 8009f82:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f88:	684a      	ldr	r2, [r1, #4]
 8009f8a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f90:	680a      	ldr	r2, [r1, #0]
 8009f92:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f98:	690a      	ldr	r2, [r1, #16]
 8009f9a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fa0:	694a      	ldr	r2, [r1, #20]
 8009fa2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fa8:	69ca      	ldr	r2, [r1, #28]
 8009faa:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009fac:	6802      	ldr	r2, [r0, #0]
 8009fae:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009fba:	2002      	movs	r0, #2
}
 8009fbc:	4770      	bx	lr

08009fbe <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fc0:	4770      	bx	lr

08009fc2 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009fc2:	6802      	ldr	r2, [r0, #0]
 8009fc4:	68d3      	ldr	r3, [r2, #12]
 8009fc6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009fca:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009fcc:	2320      	movs	r3, #32
 8009fce:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8009fd2:	4770      	bx	lr

08009fd4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fd4:	6802      	ldr	r2, [r0, #0]
 8009fd6:	68d3      	ldr	r3, [r2, #12]
 8009fd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fdc:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fde:	6802      	ldr	r2, [r0, #0]
 8009fe0:	6953      	ldr	r3, [r2, #20]
 8009fe2:	f023 0301 	bic.w	r3, r3, #1
 8009fe6:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fe8:	2320      	movs	r3, #32
 8009fea:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8009fee:	4770      	bx	lr

08009ff0 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ff0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b21      	cmp	r3, #33	; 0x21
 8009ff8:	d12a      	bne.n	800a050 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009ffa:	6883      	ldr	r3, [r0, #8]
 8009ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a000:	d016      	beq.n	800a030 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a002:	6a03      	ldr	r3, [r0, #32]
 800a004:	1c5a      	adds	r2, r3, #1
 800a006:	6202      	str	r2, [r0, #32]
 800a008:	781a      	ldrb	r2, [r3, #0]
 800a00a:	6803      	ldr	r3, [r0, #0]
 800a00c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a00e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800a010:	3b01      	subs	r3, #1
 800a012:	b29b      	uxth	r3, r3
 800a014:	84c3      	strh	r3, [r0, #38]	; 0x26
 800a016:	b9eb      	cbnz	r3, 800a054 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a018:	6802      	ldr	r2, [r0, #0]
 800a01a:	68d3      	ldr	r3, [r2, #12]
 800a01c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a020:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a022:	6802      	ldr	r2, [r0, #0]
 800a024:	68d3      	ldr	r3, [r2, #12]
 800a026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a02a:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 800a02c:	2000      	movs	r0, #0
 800a02e:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a030:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	6802      	ldr	r2, [r0, #0]
 800a036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a03a:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a03c:	6903      	ldr	r3, [r0, #16]
 800a03e:	b91b      	cbnz	r3, 800a048 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 800a040:	6a03      	ldr	r3, [r0, #32]
 800a042:	3302      	adds	r3, #2
 800a044:	6203      	str	r3, [r0, #32]
 800a046:	e7e2      	b.n	800a00e <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 800a048:	6a03      	ldr	r3, [r0, #32]
 800a04a:	3301      	adds	r3, #1
 800a04c:	6203      	str	r3, [r0, #32]
 800a04e:	e7de      	b.n	800a00e <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 800a050:	2002      	movs	r0, #2
 800a052:	4770      	bx	lr
    return HAL_OK;
 800a054:	2000      	movs	r0, #0
  }
}
 800a056:	4770      	bx	lr

0800a058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a058:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800a05c:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a05e:	6802      	ldr	r2, [r0, #0]
 800a060:	6913      	ldr	r3, [r2, #16]
 800a062:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a066:	68c1      	ldr	r1, [r0, #12]
 800a068:	430b      	orrs	r3, r1
 800a06a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a06c:	6883      	ldr	r3, [r0, #8]
 800a06e:	6902      	ldr	r2, [r0, #16]
 800a070:	4313      	orrs	r3, r2
 800a072:	6942      	ldr	r2, [r0, #20]
 800a074:	4313      	orrs	r3, r2
 800a076:	69c2      	ldr	r2, [r0, #28]
 800a078:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800a07a:	6801      	ldr	r1, [r0, #0]
 800a07c:	68cb      	ldr	r3, [r1, #12]
 800a07e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a082:	f023 030c 	bic.w	r3, r3, #12
 800a086:	4313      	orrs	r3, r2
 800a088:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a08a:	6802      	ldr	r2, [r0, #0]
 800a08c:	6953      	ldr	r3, [r2, #20]
 800a08e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a092:	6981      	ldr	r1, [r0, #24]
 800a094:	430b      	orrs	r3, r1
 800a096:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a098:	69c3      	ldr	r3, [r0, #28]
 800a09a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a09e:	d03b      	beq.n	800a118 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a0a0:	6803      	ldr	r3, [r0, #0]
 800a0a2:	4a71      	ldr	r2, [pc, #452]	; (800a268 <UART_SetConfig+0x210>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	f000 80ab 	beq.w	800a200 <UART_SetConfig+0x1a8>
 800a0aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	f000 80a6 	beq.w	800a200 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a0b4:	f7fe fde4 	bl	8008c80 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a0b8:	f04f 0900 	mov.w	r9, #0
 800a0bc:	1806      	adds	r6, r0, r0
 800a0be:	eb49 0709 	adc.w	r7, r9, r9
 800a0c2:	eb16 0b00 	adds.w	fp, r6, r0
 800a0c6:	eb47 0c09 	adc.w	ip, r7, r9
 800a0ca:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800a0ce:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 800a0d2:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800a0d6:	4693      	mov	fp, r2
 800a0d8:	469c      	mov	ip, r3
 800a0da:	6863      	ldr	r3, [r4, #4]
 800a0dc:	009a      	lsls	r2, r3, #2
 800a0de:	0f9b      	lsrs	r3, r3, #30
 800a0e0:	eb10 000b 	adds.w	r0, r0, fp
 800a0e4:	eb49 010c 	adc.w	r1, r9, ip
 800a0e8:	f7f6 fd10 	bl	8000b0c <__aeabi_uldivmod>
 800a0ec:	4d5f      	ldr	r5, [pc, #380]	; (800a26c <UART_SetConfig+0x214>)
 800a0ee:	fba5 3200 	umull	r3, r2, r5, r0
 800a0f2:	0951      	lsrs	r1, r2, #5
 800a0f4:	2264      	movs	r2, #100	; 0x64
 800a0f6:	fb02 0211 	mls	r2, r2, r1, r0
 800a0fa:	0113      	lsls	r3, r2, #4
 800a0fc:	3332      	adds	r3, #50	; 0x32
 800a0fe:	fba5 2303 	umull	r2, r3, r5, r3
 800a102:	095b      	lsrs	r3, r3, #5
 800a104:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a108:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a10c:	f003 030f 	and.w	r3, r3, #15
 800a110:	6821      	ldr	r1, [r4, #0]
 800a112:	4413      	add	r3, r2
 800a114:	608b      	str	r3, [r1, #8]
    }
  }
}
 800a116:	e0a4      	b.n	800a262 <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a118:	6803      	ldr	r3, [r0, #0]
 800a11a:	4a53      	ldr	r2, [pc, #332]	; (800a268 <UART_SetConfig+0x210>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d039      	beq.n	800a194 <UART_SetConfig+0x13c>
 800a120:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a124:	4293      	cmp	r3, r2
 800a126:	d035      	beq.n	800a194 <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a128:	f7fe fdaa 	bl	8008c80 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a12c:	4683      	mov	fp, r0
 800a12e:	f04f 0c00 	mov.w	ip, #0
 800a132:	1806      	adds	r6, r0, r0
 800a134:	eb4c 070c 	adc.w	r7, ip, ip
 800a138:	eb16 0800 	adds.w	r8, r6, r0
 800a13c:	eb47 090c 	adc.w	r9, r7, ip
 800a140:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a144:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a148:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a14c:	4690      	mov	r8, r2
 800a14e:	4699      	mov	r9, r3
 800a150:	6862      	ldr	r2, [r4, #4]
 800a152:	2100      	movs	r1, #0
 800a154:	1892      	adds	r2, r2, r2
 800a156:	eb41 0301 	adc.w	r3, r1, r1
 800a15a:	eb1b 0008 	adds.w	r0, fp, r8
 800a15e:	eb4c 0109 	adc.w	r1, ip, r9
 800a162:	f7f6 fcd3 	bl	8000b0c <__aeabi_uldivmod>
 800a166:	4d41      	ldr	r5, [pc, #260]	; (800a26c <UART_SetConfig+0x214>)
 800a168:	fba5 3200 	umull	r3, r2, r5, r0
 800a16c:	0951      	lsrs	r1, r2, #5
 800a16e:	2264      	movs	r2, #100	; 0x64
 800a170:	fb02 0211 	mls	r2, r2, r1, r0
 800a174:	00d3      	lsls	r3, r2, #3
 800a176:	3332      	adds	r3, #50	; 0x32
 800a178:	fba5 2303 	umull	r2, r3, r5, r3
 800a17c:	095b      	lsrs	r3, r3, #5
 800a17e:	005a      	lsls	r2, r3, #1
 800a180:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800a184:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a188:	f003 0307 	and.w	r3, r3, #7
 800a18c:	6821      	ldr	r1, [r4, #0]
 800a18e:	4413      	add	r3, r2
 800a190:	608b      	str	r3, [r1, #8]
 800a192:	e066      	b.n	800a262 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a194:	f7fe fd84 	bl	8008ca0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a198:	4680      	mov	r8, r0
 800a19a:	f04f 0900 	mov.w	r9, #0
 800a19e:	1806      	adds	r6, r0, r0
 800a1a0:	eb49 0709 	adc.w	r7, r9, r9
 800a1a4:	eb16 0b00 	adds.w	fp, r6, r0
 800a1a8:	eb47 0c09 	adc.w	ip, r7, r9
 800a1ac:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800a1b0:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 800a1b4:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800a1b8:	4693      	mov	fp, r2
 800a1ba:	469c      	mov	ip, r3
 800a1bc:	6862      	ldr	r2, [r4, #4]
 800a1be:	2100      	movs	r1, #0
 800a1c0:	1892      	adds	r2, r2, r2
 800a1c2:	eb41 0301 	adc.w	r3, r1, r1
 800a1c6:	eb18 000b 	adds.w	r0, r8, fp
 800a1ca:	eb49 010c 	adc.w	r1, r9, ip
 800a1ce:	f7f6 fc9d 	bl	8000b0c <__aeabi_uldivmod>
 800a1d2:	4d26      	ldr	r5, [pc, #152]	; (800a26c <UART_SetConfig+0x214>)
 800a1d4:	fba5 3200 	umull	r3, r2, r5, r0
 800a1d8:	0951      	lsrs	r1, r2, #5
 800a1da:	2264      	movs	r2, #100	; 0x64
 800a1dc:	fb02 0211 	mls	r2, r2, r1, r0
 800a1e0:	00d3      	lsls	r3, r2, #3
 800a1e2:	3332      	adds	r3, #50	; 0x32
 800a1e4:	fba5 2303 	umull	r2, r3, r5, r3
 800a1e8:	095b      	lsrs	r3, r3, #5
 800a1ea:	005a      	lsls	r2, r3, #1
 800a1ec:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800a1f0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a1f4:	f003 0307 	and.w	r3, r3, #7
 800a1f8:	6821      	ldr	r1, [r4, #0]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	608b      	str	r3, [r1, #8]
 800a1fe:	e030      	b.n	800a262 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a200:	f7fe fd4e 	bl	8008ca0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a204:	f04f 0900 	mov.w	r9, #0
 800a208:	1806      	adds	r6, r0, r0
 800a20a:	eb49 0709 	adc.w	r7, r9, r9
 800a20e:	eb16 0b00 	adds.w	fp, r6, r0
 800a212:	eb47 0c09 	adc.w	ip, r7, r9
 800a216:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800a21a:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 800a21e:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800a222:	4693      	mov	fp, r2
 800a224:	469c      	mov	ip, r3
 800a226:	6863      	ldr	r3, [r4, #4]
 800a228:	009a      	lsls	r2, r3, #2
 800a22a:	0f9b      	lsrs	r3, r3, #30
 800a22c:	eb10 000b 	adds.w	r0, r0, fp
 800a230:	eb49 010c 	adc.w	r1, r9, ip
 800a234:	f7f6 fc6a 	bl	8000b0c <__aeabi_uldivmod>
 800a238:	4d0c      	ldr	r5, [pc, #48]	; (800a26c <UART_SetConfig+0x214>)
 800a23a:	fba5 3200 	umull	r3, r2, r5, r0
 800a23e:	0951      	lsrs	r1, r2, #5
 800a240:	2264      	movs	r2, #100	; 0x64
 800a242:	fb02 0211 	mls	r2, r2, r1, r0
 800a246:	0113      	lsls	r3, r2, #4
 800a248:	3332      	adds	r3, #50	; 0x32
 800a24a:	fba5 2303 	umull	r2, r3, r5, r3
 800a24e:	095b      	lsrs	r3, r3, #5
 800a250:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a254:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a258:	f003 030f 	and.w	r3, r3, #15
 800a25c:	6821      	ldr	r1, [r4, #0]
 800a25e:	4413      	add	r3, r2
 800a260:	608b      	str	r3, [r1, #8]
}
 800a262:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 800a266:	bf00      	nop
 800a268:	40011000 	.word	0x40011000
 800a26c:	51eb851f 	.word	0x51eb851f

0800a270 <UART_WaitOnFlagUntilTimeout>:
{
 800a270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a274:	4605      	mov	r5, r0
 800a276:	460f      	mov	r7, r1
 800a278:	4616      	mov	r6, r2
 800a27a:	4698      	mov	r8, r3
 800a27c:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a27e:	682b      	ldr	r3, [r5, #0]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	ea37 0303 	bics.w	r3, r7, r3
 800a286:	bf0c      	ite	eq
 800a288:	2301      	moveq	r3, #1
 800a28a:	2300      	movne	r3, #0
 800a28c:	42b3      	cmp	r3, r6
 800a28e:	d11d      	bne.n	800a2cc <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800a290:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800a294:	d0f3      	beq.n	800a27e <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a296:	b12c      	cbz	r4, 800a2a4 <UART_WaitOnFlagUntilTimeout+0x34>
 800a298:	f7fc ffa8 	bl	80071ec <HAL_GetTick>
 800a29c:	eba0 0008 	sub.w	r0, r0, r8
 800a2a0:	42a0      	cmp	r0, r4
 800a2a2:	d9ec      	bls.n	800a27e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2a4:	682a      	ldr	r2, [r5, #0]
 800a2a6:	68d3      	ldr	r3, [r2, #12]
 800a2a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2ac:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ae:	682a      	ldr	r2, [r5, #0]
 800a2b0:	6953      	ldr	r3, [r2, #20]
 800a2b2:	f023 0301 	bic.w	r3, r3, #1
 800a2b6:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800a2b8:	2320      	movs	r3, #32
 800a2ba:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a2be:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 800a2c8:	2003      	movs	r0, #3
 800a2ca:	e000      	b.n	800a2ce <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 800a2cc:	2000      	movs	r0, #0
}
 800a2ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a2d2 <HAL_UART_Init>:
  if (huart == NULL)
 800a2d2:	b358      	cbz	r0, 800a32c <HAL_UART_Init+0x5a>
{
 800a2d4:	b510      	push	{r4, lr}
 800a2d6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a2d8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a2dc:	b30b      	cbz	r3, 800a322 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800a2de:	2324      	movs	r3, #36	; 0x24
 800a2e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800a2e4:	6822      	ldr	r2, [r4, #0]
 800a2e6:	68d3      	ldr	r3, [r2, #12]
 800a2e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2ec:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f7ff feb2 	bl	800a058 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2f4:	6822      	ldr	r2, [r4, #0]
 800a2f6:	6913      	ldr	r3, [r2, #16]
 800a2f8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a2fc:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2fe:	6822      	ldr	r2, [r4, #0]
 800a300:	6953      	ldr	r3, [r2, #20]
 800a302:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a306:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800a308:	6822      	ldr	r2, [r4, #0]
 800a30a:	68d3      	ldr	r3, [r2, #12]
 800a30c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a310:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a312:	2000      	movs	r0, #0
 800a314:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a316:	2320      	movs	r3, #32
 800a318:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a31c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800a320:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800a322:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800a326:	f7fc f9b5 	bl	8006694 <HAL_UART_MspInit>
 800a32a:	e7d8      	b.n	800a2de <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800a32c:	2001      	movs	r0, #1
}
 800a32e:	4770      	bx	lr

0800a330 <HAL_UART_Transmit>:
{
 800a330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a334:	b083      	sub	sp, #12
 800a336:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800a338:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	2b20      	cmp	r3, #32
 800a340:	d156      	bne.n	800a3f0 <HAL_UART_Transmit+0xc0>
 800a342:	4604      	mov	r4, r0
 800a344:	460d      	mov	r5, r1
 800a346:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800a348:	2900      	cmp	r1, #0
 800a34a:	d056      	beq.n	800a3fa <HAL_UART_Transmit+0xca>
 800a34c:	2a00      	cmp	r2, #0
 800a34e:	d056      	beq.n	800a3fe <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 800a350:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a354:	2b01      	cmp	r3, #1
 800a356:	d054      	beq.n	800a402 <HAL_UART_Transmit+0xd2>
 800a358:	2301      	movs	r3, #1
 800a35a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a35e:	f04f 0900 	mov.w	r9, #0
 800a362:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a366:	2321      	movs	r3, #33	; 0x21
 800a368:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800a36c:	f7fc ff3e 	bl	80071ec <HAL_GetTick>
 800a370:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800a372:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800a376:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800a37a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800a37e:	e010      	b.n	800a3a2 <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a380:	9600      	str	r6, [sp, #0]
 800a382:	463b      	mov	r3, r7
 800a384:	2200      	movs	r2, #0
 800a386:	2180      	movs	r1, #128	; 0x80
 800a388:	4620      	mov	r0, r4
 800a38a:	f7ff ff71 	bl	800a270 <UART_WaitOnFlagUntilTimeout>
 800a38e:	2800      	cmp	r0, #0
 800a390:	d139      	bne.n	800a406 <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a392:	882b      	ldrh	r3, [r5, #0]
 800a394:	6822      	ldr	r2, [r4, #0]
 800a396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a39a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a39c:	6923      	ldr	r3, [r4, #16]
 800a39e:	b9c3      	cbnz	r3, 800a3d2 <HAL_UART_Transmit+0xa2>
          pData += 2U;
 800a3a0:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 800a3a2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	b1b3      	cbz	r3, 800a3d6 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 800a3a8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a3b0:	68a3      	ldr	r3, [r4, #8]
 800a3b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3b6:	d0e3      	beq.n	800a380 <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a3b8:	9600      	str	r6, [sp, #0]
 800a3ba:	463b      	mov	r3, r7
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2180      	movs	r1, #128	; 0x80
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f7ff ff55 	bl	800a270 <UART_WaitOnFlagUntilTimeout>
 800a3c6:	bb00      	cbnz	r0, 800a40a <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a3c8:	782a      	ldrb	r2, [r5, #0]
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	605a      	str	r2, [r3, #4]
 800a3ce:	3501      	adds	r5, #1
 800a3d0:	e7e7      	b.n	800a3a2 <HAL_UART_Transmit+0x72>
          pData += 1U;
 800a3d2:	3501      	adds	r5, #1
 800a3d4:	e7e5      	b.n	800a3a2 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3d6:	9600      	str	r6, [sp, #0]
 800a3d8:	463b      	mov	r3, r7
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2140      	movs	r1, #64	; 0x40
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f7ff ff46 	bl	800a270 <UART_WaitOnFlagUntilTimeout>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	b990      	cbnz	r0, 800a40e <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    return HAL_OK;
 800a3ee:	e000      	b.n	800a3f2 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800a3f0:	2302      	movs	r3, #2
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	b003      	add	sp, #12
 800a3f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e7f9      	b.n	800a3f2 <HAL_UART_Transmit+0xc2>
 800a3fe:	2301      	movs	r3, #1
 800a400:	e7f7      	b.n	800a3f2 <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 800a402:	2302      	movs	r3, #2
 800a404:	e7f5      	b.n	800a3f2 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 800a406:	2303      	movs	r3, #3
 800a408:	e7f3      	b.n	800a3f2 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 800a40a:	2303      	movs	r3, #3
 800a40c:	e7f1      	b.n	800a3f2 <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e7ef      	b.n	800a3f2 <HAL_UART_Transmit+0xc2>
	...

0800a414 <HAL_UART_Receive_DMA>:
{
 800a414:	b530      	push	{r4, r5, lr}
 800a416:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 800a418:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 800a41c:	b2e4      	uxtb	r4, r4
 800a41e:	2c20      	cmp	r4, #32
 800a420:	d13d      	bne.n	800a49e <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 800a422:	2900      	cmp	r1, #0
 800a424:	d03e      	beq.n	800a4a4 <HAL_UART_Receive_DMA+0x90>
 800a426:	2a00      	cmp	r2, #0
 800a428:	d03e      	beq.n	800a4a8 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 800a42a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d03c      	beq.n	800a4ac <HAL_UART_Receive_DMA+0x98>
 800a432:	4613      	mov	r3, r2
 800a434:	460a      	mov	r2, r1
 800a436:	4604      	mov	r4, r0
 800a438:	2101      	movs	r1, #1
 800a43a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 800a43e:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 800a440:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a442:	2500      	movs	r5, #0
 800a444:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a446:	2122      	movs	r1, #34	; 0x22
 800a448:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a44c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a44e:	4818      	ldr	r0, [pc, #96]	; (800a4b0 <HAL_UART_Receive_DMA+0x9c>)
 800a450:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a452:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a454:	4817      	ldr	r0, [pc, #92]	; (800a4b4 <HAL_UART_Receive_DMA+0xa0>)
 800a456:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a45a:	4817      	ldr	r0, [pc, #92]	; (800a4b8 <HAL_UART_Receive_DMA+0xa4>)
 800a45c:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800a45e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a460:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a462:	6821      	ldr	r1, [r4, #0]
 800a464:	3104      	adds	r1, #4
 800a466:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a468:	f7fd f9c4 	bl	80077f4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a46c:	9501      	str	r5, [sp, #4]
 800a46e:	6823      	ldr	r3, [r4, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	9201      	str	r2, [sp, #4]
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	9201      	str	r2, [sp, #4]
 800a478:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 800a47a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a47e:	68da      	ldr	r2, [r3, #12]
 800a480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a484:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a486:	6822      	ldr	r2, [r4, #0]
 800a488:	6953      	ldr	r3, [r2, #20]
 800a48a:	f043 0301 	orr.w	r3, r3, #1
 800a48e:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a490:	6822      	ldr	r2, [r4, #0]
 800a492:	6953      	ldr	r3, [r2, #20]
 800a494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a498:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 800a49a:	4628      	mov	r0, r5
 800a49c:	e000      	b.n	800a4a0 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 800a49e:	2002      	movs	r0, #2
}
 800a4a0:	b003      	add	sp, #12
 800a4a2:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 800a4a4:	2001      	movs	r0, #1
 800a4a6:	e7fb      	b.n	800a4a0 <HAL_UART_Receive_DMA+0x8c>
 800a4a8:	2001      	movs	r0, #1
 800a4aa:	e7f9      	b.n	800a4a0 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 800a4ac:	2002      	movs	r0, #2
 800a4ae:	e7f7      	b.n	800a4a0 <HAL_UART_Receive_DMA+0x8c>
 800a4b0:	0800a4d7 	.word	0x0800a4d7
 800a4b4:	0800a5b3 	.word	0x0800a5b3
 800a4b8:	0800a5bf 	.word	0x0800a5bf

0800a4bc <UART_EndTransmit_IT>:
{
 800a4bc:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a4be:	6801      	ldr	r1, [r0, #0]
 800a4c0:	68cb      	ldr	r3, [r1, #12]
 800a4c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4c6:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800a4c8:	2320      	movs	r3, #32
 800a4ca:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800a4ce:	f7fb fba7 	bl	8005c20 <HAL_UART_TxCpltCallback>
}
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	bd08      	pop	{r3, pc}

0800a4d6 <UART_DMAReceiveCplt>:
{
 800a4d6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a4da:	6802      	ldr	r2, [r0, #0]
 800a4dc:	6812      	ldr	r2, [r2, #0]
 800a4de:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a4e2:	d113      	bne.n	800a50c <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4e8:	6819      	ldr	r1, [r3, #0]
 800a4ea:	68ca      	ldr	r2, [r1, #12]
 800a4ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4f0:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4f2:	6819      	ldr	r1, [r3, #0]
 800a4f4:	694a      	ldr	r2, [r1, #20]
 800a4f6:	f022 0201 	bic.w	r2, r2, #1
 800a4fa:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4fc:	6819      	ldr	r1, [r3, #0]
 800a4fe:	694a      	ldr	r2, [r1, #20]
 800a500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a504:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800a506:	2220      	movs	r2, #32
 800a508:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fb fb79 	bl	8005c04 <HAL_UART_RxCpltCallback>
}
 800a512:	bd08      	pop	{r3, pc}

0800a514 <UART_Receive_IT>:
{
 800a514:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a516:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	2b22      	cmp	r3, #34	; 0x22
 800a51e:	d145      	bne.n	800a5ac <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a520:	6883      	ldr	r3, [r0, #8]
 800a522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a526:	d00e      	beq.n	800a546 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a528:	6903      	ldr	r3, [r0, #16]
 800a52a:	bb03      	cbnz	r3, 800a56e <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a52c:	6803      	ldr	r3, [r0, #0]
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a532:	1c59      	adds	r1, r3, #1
 800a534:	6281      	str	r1, [r0, #40]	; 0x28
 800a536:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800a538:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800a53a:	3b01      	subs	r3, #1
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800a540:	b1f3      	cbz	r3, 800a580 <UART_Receive_IT+0x6c>
    return HAL_OK;
 800a542:	2000      	movs	r0, #0
 800a544:	e033      	b.n	800a5ae <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a546:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a548:	6903      	ldr	r3, [r0, #16]
 800a54a:	b943      	cbnz	r3, 800a55e <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a54c:	6803      	ldr	r3, [r0, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a554:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800a556:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a558:	3302      	adds	r3, #2
 800a55a:	6283      	str	r3, [r0, #40]	; 0x28
 800a55c:	e7ec      	b.n	800a538 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a55e:	6803      	ldr	r3, [r0, #0]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	b2db      	uxtb	r3, r3
 800a564:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 800a566:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a568:	3301      	adds	r3, #1
 800a56a:	6283      	str	r3, [r0, #40]	; 0x28
 800a56c:	e7e4      	b.n	800a538 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a56e:	6803      	ldr	r3, [r0, #0]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a574:	1c51      	adds	r1, r2, #1
 800a576:	6281      	str	r1, [r0, #40]	; 0x28
 800a578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a57c:	7013      	strb	r3, [r2, #0]
 800a57e:	e7db      	b.n	800a538 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a580:	6802      	ldr	r2, [r0, #0]
 800a582:	68d3      	ldr	r3, [r2, #12]
 800a584:	f023 0320 	bic.w	r3, r3, #32
 800a588:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a58a:	6802      	ldr	r2, [r0, #0]
 800a58c:	68d3      	ldr	r3, [r2, #12]
 800a58e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a592:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a594:	6802      	ldr	r2, [r0, #0]
 800a596:	6953      	ldr	r3, [r2, #20]
 800a598:	f023 0301 	bic.w	r3, r3, #1
 800a59c:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800a59e:	2320      	movs	r3, #32
 800a5a0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800a5a4:	f7fb fb2e 	bl	8005c04 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	e000      	b.n	800a5ae <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 800a5ac:	2002      	movs	r0, #2
}
 800a5ae:	bd08      	pop	{r3, pc}

0800a5b0 <HAL_UART_RxHalfCpltCallback>:
}
 800a5b0:	4770      	bx	lr

0800a5b2 <UART_DMARxHalfCplt>:
{
 800a5b2:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800a5b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a5b6:	f7ff fffb 	bl	800a5b0 <HAL_UART_RxHalfCpltCallback>
}
 800a5ba:	bd08      	pop	{r3, pc}

0800a5bc <HAL_UART_ErrorCallback>:
}
 800a5bc:	4770      	bx	lr

0800a5be <UART_DMAError>:
{
 800a5be:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5c0:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a5c6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	2b21      	cmp	r3, #33	; 0x21
 800a5ce:	d010      	beq.n	800a5f2 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	695a      	ldr	r2, [r3, #20]
 800a5d4:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a5d8:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	2b22      	cmp	r3, #34	; 0x22
 800a5e0:	d011      	beq.n	800a606 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a5e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a5e4:	f043 0310 	orr.w	r3, r3, #16
 800a5e8:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f7ff ffe6 	bl	800a5bc <HAL_UART_ErrorCallback>
}
 800a5f0:	bd10      	pop	{r4, pc}
 800a5f2:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a5f6:	2a00      	cmp	r2, #0
 800a5f8:	d0ea      	beq.n	800a5d0 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a5fe:	4620      	mov	r0, r4
 800a600:	f7ff fcdf 	bl	8009fc2 <UART_EndTxTransfer>
 800a604:	e7e4      	b.n	800a5d0 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a606:	2a00      	cmp	r2, #0
 800a608:	d0eb      	beq.n	800a5e2 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 800a60a:	2300      	movs	r3, #0
 800a60c:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a60e:	4620      	mov	r0, r4
 800a610:	f7ff fce0 	bl	8009fd4 <UART_EndRxTransfer>
 800a614:	e7e5      	b.n	800a5e2 <UART_DMAError+0x24>
	...

0800a618 <HAL_UART_IRQHandler>:
{
 800a618:	b510      	push	{r4, lr}
 800a61a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a61c:	6802      	ldr	r2, [r0, #0]
 800a61e:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a620:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a622:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 800a624:	f013 000f 	ands.w	r0, r3, #15
 800a628:	d105      	bne.n	800a636 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a62a:	f013 0f20 	tst.w	r3, #32
 800a62e:	d002      	beq.n	800a636 <HAL_UART_IRQHandler+0x1e>
 800a630:	f011 0f20 	tst.w	r1, #32
 800a634:	d156      	bne.n	800a6e4 <HAL_UART_IRQHandler+0xcc>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a636:	2800      	cmp	r0, #0
 800a638:	d06a      	beq.n	800a710 <HAL_UART_IRQHandler+0xf8>
 800a63a:	f012 0201 	ands.w	r2, r2, #1
 800a63e:	d102      	bne.n	800a646 <HAL_UART_IRQHandler+0x2e>
 800a640:	f411 7f90 	tst.w	r1, #288	; 0x120
 800a644:	d064      	beq.n	800a710 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a646:	f013 0f01 	tst.w	r3, #1
 800a64a:	d006      	beq.n	800a65a <HAL_UART_IRQHandler+0x42>
 800a64c:	f411 7f80 	tst.w	r1, #256	; 0x100
 800a650:	d003      	beq.n	800a65a <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a652:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a654:	f040 0001 	orr.w	r0, r0, #1
 800a658:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a65a:	f013 0f04 	tst.w	r3, #4
 800a65e:	d004      	beq.n	800a66a <HAL_UART_IRQHandler+0x52>
 800a660:	b11a      	cbz	r2, 800a66a <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a662:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a664:	f040 0002 	orr.w	r0, r0, #2
 800a668:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a66a:	f013 0f02 	tst.w	r3, #2
 800a66e:	d004      	beq.n	800a67a <HAL_UART_IRQHandler+0x62>
 800a670:	b11a      	cbz	r2, 800a67a <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a672:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a674:	f040 0004 	orr.w	r0, r0, #4
 800a678:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a67a:	f013 0f08 	tst.w	r3, #8
 800a67e:	d007      	beq.n	800a690 <HAL_UART_IRQHandler+0x78>
 800a680:	f011 0f20 	tst.w	r1, #32
 800a684:	d100      	bne.n	800a688 <HAL_UART_IRQHandler+0x70>
 800a686:	b11a      	cbz	r2, 800a690 <HAL_UART_IRQHandler+0x78>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a688:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a68a:	f042 0208 	orr.w	r2, r2, #8
 800a68e:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a690:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a692:	2a00      	cmp	r2, #0
 800a694:	d048      	beq.n	800a728 <HAL_UART_IRQHandler+0x110>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a696:	f013 0f20 	tst.w	r3, #32
 800a69a:	d002      	beq.n	800a6a2 <HAL_UART_IRQHandler+0x8a>
 800a69c:	f011 0f20 	tst.w	r1, #32
 800a6a0:	d124      	bne.n	800a6ec <HAL_UART_IRQHandler+0xd4>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a6aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a6ac:	f012 0f08 	tst.w	r2, #8
 800a6b0:	d100      	bne.n	800a6b4 <HAL_UART_IRQHandler+0x9c>
 800a6b2:	b33b      	cbz	r3, 800a704 <HAL_UART_IRQHandler+0xec>
        UART_EndRxTransfer(huart);
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f7ff fc8d 	bl	8009fd4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	695a      	ldr	r2, [r3, #20]
 800a6be:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a6c2:	d01b      	beq.n	800a6fc <HAL_UART_IRQHandler+0xe4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6c4:	695a      	ldr	r2, [r3, #20]
 800a6c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6ca:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800a6cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6ce:	b18b      	cbz	r3, 800a6f4 <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a6d0:	4a1a      	ldr	r2, [pc, #104]	; (800a73c <HAL_UART_IRQHandler+0x124>)
 800a6d2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6d4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a6d6:	f7fd f8c2 	bl	800785e <HAL_DMA_Abort_IT>
 800a6da:	b328      	cbz	r0, 800a728 <HAL_UART_IRQHandler+0x110>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a6de:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a6e0:	4798      	blx	r3
 800a6e2:	e021      	b.n	800a728 <HAL_UART_IRQHandler+0x110>
      UART_Receive_IT(huart);
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f7ff ff15 	bl	800a514 <UART_Receive_IT>
      return;
 800a6ea:	e01d      	b.n	800a728 <HAL_UART_IRQHandler+0x110>
        UART_Receive_IT(huart);
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f7ff ff11 	bl	800a514 <UART_Receive_IT>
 800a6f2:	e7d6      	b.n	800a6a2 <HAL_UART_IRQHandler+0x8a>
            HAL_UART_ErrorCallback(huart);
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f7ff ff61 	bl	800a5bc <HAL_UART_ErrorCallback>
 800a6fa:	e015      	b.n	800a728 <HAL_UART_IRQHandler+0x110>
          HAL_UART_ErrorCallback(huart);
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f7ff ff5d 	bl	800a5bc <HAL_UART_ErrorCallback>
 800a702:	e011      	b.n	800a728 <HAL_UART_IRQHandler+0x110>
        HAL_UART_ErrorCallback(huart);
 800a704:	4620      	mov	r0, r4
 800a706:	f7ff ff59 	bl	800a5bc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a70a:	2300      	movs	r3, #0
 800a70c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a70e:	e00b      	b.n	800a728 <HAL_UART_IRQHandler+0x110>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a710:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a714:	d002      	beq.n	800a71c <HAL_UART_IRQHandler+0x104>
 800a716:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a71a:	d106      	bne.n	800a72a <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a71c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a720:	d002      	beq.n	800a728 <HAL_UART_IRQHandler+0x110>
 800a722:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a726:	d104      	bne.n	800a732 <HAL_UART_IRQHandler+0x11a>
}
 800a728:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 800a72a:	4620      	mov	r0, r4
 800a72c:	f7ff fc60 	bl	8009ff0 <UART_Transmit_IT>
    return;
 800a730:	e7fa      	b.n	800a728 <HAL_UART_IRQHandler+0x110>
    UART_EndTransmit_IT(huart);
 800a732:	4620      	mov	r0, r4
 800a734:	f7ff fec2 	bl	800a4bc <UART_EndTransmit_IT>
    return;
 800a738:	e7f6      	b.n	800a728 <HAL_UART_IRQHandler+0x110>
 800a73a:	bf00      	nop
 800a73c:	0800a741 	.word	0x0800a741

0800a740 <UART_DMAAbortOnError>:
{
 800a740:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a742:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800a744:	2300      	movs	r3, #0
 800a746:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a748:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800a74a:	f7ff ff37 	bl	800a5bc <HAL_UART_ErrorCallback>
}
 800a74e:	bd08      	pop	{r3, pc}

0800a750 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800a750:	b508      	push	{r3, lr}
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a752:	f002 fa90 	bl	800cc76 <pvTimerGetTimerID>

  if (callb != NULL) {
 800a756:	b110      	cbz	r0, 800a75e <TimerCallback+0xe>
    callb->func (callb->arg);
 800a758:	6802      	ldr	r2, [r0, #0]
 800a75a:	6840      	ldr	r0, [r0, #4]
 800a75c:	4790      	blx	r2
  }
}
 800a75e:	bd08      	pop	{r3, pc}

0800a760 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a760:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 800a764:	b98b      	cbnz	r3, 800a78a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a766:	f3ef 8310 	mrs	r3, PRIMASK
 800a76a:	b913      	cbnz	r3, 800a772 <osKernelInitialize+0x12>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a76c:	f3ef 8311 	mrs	r3, BASEPRI
 800a770:	b11b      	cbz	r3, 800a77a <osKernelInitialize+0x1a>
 800a772:	4b0a      	ldr	r3, [pc, #40]	; (800a79c <osKernelInitialize+0x3c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b02      	cmp	r3, #2
 800a778:	d00a      	beq.n	800a790 <osKernelInitialize+0x30>
    if (KernelState == osKernelInactive) {
 800a77a:	4b08      	ldr	r3, [pc, #32]	; (800a79c <osKernelInitialize+0x3c>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	b953      	cbnz	r3, 800a796 <osKernelInitialize+0x36>
      KernelState = osKernelReady;
 800a780:	4b06      	ldr	r3, [pc, #24]	; (800a79c <osKernelInitialize+0x3c>)
 800a782:	2201      	movs	r2, #1
 800a784:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a786:	2000      	movs	r0, #0
 800a788:	4770      	bx	lr
    stat = osErrorISR;
 800a78a:	f06f 0005 	mvn.w	r0, #5
 800a78e:	4770      	bx	lr
 800a790:	f06f 0005 	mvn.w	r0, #5
 800a794:	4770      	bx	lr
      stat = osError;
 800a796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a79a:	4770      	bx	lr
 800a79c:	20002ebc 	.word	0x20002ebc

0800a7a0 <osKernelStart>:
osStatus_t osKernelStart (void) {
 800a7a0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7a2:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 800a7a6:	b9a3      	cbnz	r3, 800a7d2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a7ac:	b913      	cbnz	r3, 800a7b4 <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a7ae:	f3ef 8311 	mrs	r3, BASEPRI
 800a7b2:	b11b      	cbz	r3, 800a7bc <osKernelStart+0x1c>
 800a7b4:	4b0b      	ldr	r3, [pc, #44]	; (800a7e4 <osKernelStart+0x44>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d00d      	beq.n	800a7d8 <osKernelStart+0x38>
    if (KernelState == osKernelReady) {
 800a7bc:	4b09      	ldr	r3, [pc, #36]	; (800a7e4 <osKernelStart+0x44>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d10c      	bne.n	800a7de <osKernelStart+0x3e>
      KernelState = osKernelRunning;
 800a7c4:	4b07      	ldr	r3, [pc, #28]	; (800a7e4 <osKernelStart+0x44>)
 800a7c6:	2202      	movs	r2, #2
 800a7c8:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a7ca:	f001 f8c1 	bl	800b950 <vTaskStartScheduler>
      stat = osOK;
 800a7ce:	2000      	movs	r0, #0
}
 800a7d0:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 800a7d2:	f06f 0005 	mvn.w	r0, #5
 800a7d6:	e7fb      	b.n	800a7d0 <osKernelStart+0x30>
 800a7d8:	f06f 0005 	mvn.w	r0, #5
 800a7dc:	e7f8      	b.n	800a7d0 <osKernelStart+0x30>
      stat = osError;
 800a7de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return (stat);
 800a7e2:	e7f5      	b.n	800a7d0 <osKernelStart+0x30>
 800a7e4:	20002ebc 	.word	0x20002ebc

0800a7e8 <osThreadNew>:
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ea:	b087      	sub	sp, #28
  hTask = NULL;
 800a7ec:	2400      	movs	r4, #0
 800a7ee:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7f0:	f3ef 8405 	mrs	r4, IPSR
  if (!IS_IRQ() && (func != NULL)) {
 800a7f4:	bb44      	cbnz	r4, 800a848 <osThreadNew+0x60>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7f6:	f3ef 8310 	mrs	r3, PRIMASK
 800a7fa:	b913      	cbnz	r3, 800a802 <osThreadNew+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a7fc:	f3ef 8311 	mrs	r3, BASEPRI
 800a800:	b11b      	cbz	r3, 800a80a <osThreadNew+0x22>
 800a802:	4b2d      	ldr	r3, [pc, #180]	; (800a8b8 <osThreadNew+0xd0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b02      	cmp	r3, #2
 800a808:	d01e      	beq.n	800a848 <osThreadNew+0x60>
 800a80a:	b1e8      	cbz	r0, 800a848 <osThreadNew+0x60>
    if (attr != NULL) {
 800a80c:	b34a      	cbz	r2, 800a862 <osThreadNew+0x7a>
      if (attr->name != NULL) {
 800a80e:	6816      	ldr	r6, [r2, #0]
      if (attr->priority != osPriorityNone) {
 800a810:	6994      	ldr	r4, [r2, #24]
 800a812:	b904      	cbnz	r4, 800a816 <osThreadNew+0x2e>
    prio  = (UBaseType_t)osPriorityNormal;
 800a814:	2418      	movs	r4, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a816:	1e63      	subs	r3, r4, #1
 800a818:	2b37      	cmp	r3, #55	; 0x37
 800a81a:	d849      	bhi.n	800a8b0 <osThreadNew+0xc8>
 800a81c:	6853      	ldr	r3, [r2, #4]
 800a81e:	f013 0f01 	tst.w	r3, #1
 800a822:	d147      	bne.n	800a8b4 <osThreadNew+0xcc>
      if (attr->stack_size > 0U) {
 800a824:	6955      	ldr	r5, [r2, #20]
 800a826:	b195      	cbz	r5, 800a84e <osThreadNew+0x66>
        stack = attr->stack_size / sizeof(StackType_t);
 800a828:	ea4f 0c95 	mov.w	ip, r5, lsr #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a82c:	6893      	ldr	r3, [r2, #8]
 800a82e:	b12b      	cbz	r3, 800a83c <osThreadNew+0x54>
 800a830:	68d7      	ldr	r7, [r2, #12]
 800a832:	2f63      	cmp	r7, #99	; 0x63
 800a834:	d902      	bls.n	800a83c <osThreadNew+0x54>
 800a836:	6917      	ldr	r7, [r2, #16]
 800a838:	b107      	cbz	r7, 800a83c <osThreadNew+0x54>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a83a:	b9c5      	cbnz	r5, 800a86e <osThreadNew+0x86>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a83c:	b153      	cbz	r3, 800a854 <osThreadNew+0x6c>
    mem  = -1;
 800a83e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    if (mem == 1) {
 800a842:	2d01      	cmp	r5, #1
 800a844:	d01a      	beq.n	800a87c <osThreadNew+0x94>
      if (mem == 0) {
 800a846:	b32d      	cbz	r5, 800a894 <osThreadNew+0xac>
  return ((osThreadId_t)hTask);
 800a848:	9805      	ldr	r0, [sp, #20]
}
 800a84a:	b007      	add	sp, #28
 800a84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800a84e:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800a852:	e7eb      	b.n	800a82c <osThreadNew+0x44>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a854:	68d3      	ldr	r3, [r2, #12]
 800a856:	b963      	cbnz	r3, 800a872 <osThreadNew+0x8a>
 800a858:	6913      	ldr	r3, [r2, #16]
 800a85a:	b16b      	cbz	r3, 800a878 <osThreadNew+0x90>
    mem  = -1;
 800a85c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a860:	e7ef      	b.n	800a842 <osThreadNew+0x5a>
      mem = 0;
 800a862:	2500      	movs	r5, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800a864:	2418      	movs	r4, #24
    stack = configMINIMAL_STACK_SIZE;
 800a866:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name = NULL;
 800a86a:	462e      	mov	r6, r5
 800a86c:	e7e9      	b.n	800a842 <osThreadNew+0x5a>
        mem = 1;
 800a86e:	2501      	movs	r5, #1
 800a870:	e7e7      	b.n	800a842 <osThreadNew+0x5a>
    mem  = -1;
 800a872:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a876:	e7e4      	b.n	800a842 <osThreadNew+0x5a>
          mem = 0;
 800a878:	2500      	movs	r5, #0
 800a87a:	e7e2      	b.n	800a842 <osThreadNew+0x5a>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a87c:	6913      	ldr	r3, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a87e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a880:	9202      	str	r2, [sp, #8]
 800a882:	9301      	str	r3, [sp, #4]
 800a884:	9400      	str	r4, [sp, #0]
 800a886:	460b      	mov	r3, r1
 800a888:	4662      	mov	r2, ip
 800a88a:	4631      	mov	r1, r6
 800a88c:	f000 ffab 	bl	800b7e6 <xTaskCreateStatic>
 800a890:	9005      	str	r0, [sp, #20]
 800a892:	e7d9      	b.n	800a848 <osThreadNew+0x60>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a894:	aa05      	add	r2, sp, #20
 800a896:	9201      	str	r2, [sp, #4]
 800a898:	9400      	str	r4, [sp, #0]
 800a89a:	460b      	mov	r3, r1
 800a89c:	fa1f f28c 	uxth.w	r2, ip
 800a8a0:	4631      	mov	r1, r6
 800a8a2:	f000 ffda 	bl	800b85a <xTaskCreate>
 800a8a6:	2801      	cmp	r0, #1
 800a8a8:	d0ce      	beq.n	800a848 <osThreadNew+0x60>
          hTask = NULL;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	9305      	str	r3, [sp, #20]
 800a8ae:	e7cb      	b.n	800a848 <osThreadNew+0x60>
        return (NULL);
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	e7ca      	b.n	800a84a <osThreadNew+0x62>
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	e7c8      	b.n	800a84a <osThreadNew+0x62>
 800a8b8:	20002ebc 	.word	0x20002ebc

0800a8bc <osDelay>:
osStatus_t osDelay (uint32_t ticks) {
 800a8bc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8be:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ()) {
 800a8c2:	b983      	cbnz	r3, 800a8e6 <osDelay+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a8c8:	b913      	cbnz	r3, 800a8d0 <osDelay+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a8ca:	f3ef 8311 	mrs	r3, BASEPRI
 800a8ce:	b11b      	cbz	r3, 800a8d8 <osDelay+0x1c>
 800a8d0:	4b08      	ldr	r3, [pc, #32]	; (800a8f4 <osDelay+0x38>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d009      	beq.n	800a8ec <osDelay+0x30>
    if (ticks != 0U) {
 800a8d8:	b908      	cbnz	r0, 800a8de <osDelay+0x22>
    stat = osOK;
 800a8da:	2000      	movs	r0, #0
}
 800a8dc:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800a8de:	f001 f9eb 	bl	800bcb8 <vTaskDelay>
    stat = osOK;
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	e7fa      	b.n	800a8dc <osDelay+0x20>
    stat = osErrorISR;
 800a8e6:	f06f 0005 	mvn.w	r0, #5
 800a8ea:	e7f7      	b.n	800a8dc <osDelay+0x20>
 800a8ec:	f06f 0005 	mvn.w	r0, #5
 800a8f0:	e7f4      	b.n	800a8dc <osDelay+0x20>
 800a8f2:	bf00      	nop
 800a8f4:	20002ebc 	.word	0x20002ebc

0800a8f8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8fa:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8fc:	f3ef 8505 	mrs	r5, IPSR
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;

  if (!IS_IRQ() && (func != NULL)) {
 800a900:	2d00      	cmp	r5, #0
 800a902:	d13d      	bne.n	800a980 <osTimerNew+0x88>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a904:	f3ef 8510 	mrs	r5, PRIMASK
 800a908:	b915      	cbnz	r5, 800a910 <osTimerNew+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a90a:	f3ef 8411 	mrs	r4, BASEPRI
 800a90e:	b11c      	cbz	r4, 800a918 <osTimerNew+0x20>
 800a910:	4c20      	ldr	r4, [pc, #128]	; (800a994 <osTimerNew+0x9c>)
 800a912:	6824      	ldr	r4, [r4, #0]
 800a914:	2c02      	cmp	r4, #2
 800a916:	d035      	beq.n	800a984 <osTimerNew+0x8c>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d035      	beq.n	800a988 <osTimerNew+0x90>
 800a91c:	461c      	mov	r4, r3
 800a91e:	4617      	mov	r7, r2
 800a920:	460e      	mov	r6, r1
 800a922:	4605      	mov	r5, r0
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a924:	2008      	movs	r0, #8
 800a926:	f002 fbdb 	bl	800d0e0 <pvPortMalloc>

    if (callb != NULL) {
 800a92a:	4603      	mov	r3, r0
 800a92c:	b370      	cbz	r0, 800a98c <osTimerNew+0x94>
      callb->func = func;
 800a92e:	6005      	str	r5, [r0, #0]
      callb->arg  = argument;
 800a930:	6047      	str	r7, [r0, #4]

      if (type == osTimerOnce) {
 800a932:	b996      	cbnz	r6, 800a95a <osTimerNew+0x62>
        reload = pdFALSE;
 800a934:	2200      	movs	r2, #0
      }

      mem  = -1;
      name = NULL;

      if (attr != NULL) {
 800a936:	b1f4      	cbz	r4, 800a976 <osTimerNew+0x7e>
        if (attr->name != NULL) {
 800a938:	6820      	ldr	r0, [r4, #0]
          name = attr->name;
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a93a:	68a1      	ldr	r1, [r4, #8]
 800a93c:	b111      	cbz	r1, 800a944 <osTimerNew+0x4c>
 800a93e:	68e5      	ldr	r5, [r4, #12]
 800a940:	2d2b      	cmp	r5, #43	; 0x2b
 800a942:	d811      	bhi.n	800a968 <osTimerNew+0x70>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a944:	b159      	cbz	r1, 800a95e <osTimerNew+0x66>
      mem  = -1;
 800a946:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

      if (mem == 1) {
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
      }
      else {
        if (mem == 0) {
 800a94a:	bb09      	cbnz	r1, 800a990 <osTimerNew+0x98>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a94c:	4912      	ldr	r1, [pc, #72]	; (800a998 <osTimerNew+0xa0>)
 800a94e:	9100      	str	r1, [sp, #0]
 800a950:	2101      	movs	r1, #1
 800a952:	f001 ffc9 	bl	800c8e8 <xTimerCreate>
      }
    }
  }

  return ((osTimerId_t)hTimer);
}
 800a956:	b003      	add	sp, #12
 800a958:	bdf0      	pop	{r4, r5, r6, r7, pc}
        reload = pdTRUE;
 800a95a:	2201      	movs	r2, #1
 800a95c:	e7eb      	b.n	800a936 <osTimerNew+0x3e>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a95e:	68e1      	ldr	r1, [r4, #12]
 800a960:	b161      	cbz	r1, 800a97c <osTimerNew+0x84>
      mem  = -1;
 800a962:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a966:	e7f0      	b.n	800a94a <osTimerNew+0x52>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a968:	9101      	str	r1, [sp, #4]
 800a96a:	490b      	ldr	r1, [pc, #44]	; (800a998 <osTimerNew+0xa0>)
 800a96c:	9100      	str	r1, [sp, #0]
 800a96e:	2101      	movs	r1, #1
 800a970:	f001 ffd6 	bl	800c920 <xTimerCreateStatic>
 800a974:	e7ef      	b.n	800a956 <osTimerNew+0x5e>
        mem = 0;
 800a976:	2100      	movs	r1, #0
      name = NULL;
 800a978:	4608      	mov	r0, r1
 800a97a:	e7e6      	b.n	800a94a <osTimerNew+0x52>
            mem = 0;
 800a97c:	2100      	movs	r1, #0
 800a97e:	e7e4      	b.n	800a94a <osTimerNew+0x52>
  hTimer = NULL;
 800a980:	2000      	movs	r0, #0
 800a982:	e7e8      	b.n	800a956 <osTimerNew+0x5e>
 800a984:	2000      	movs	r0, #0
 800a986:	e7e6      	b.n	800a956 <osTimerNew+0x5e>
 800a988:	2000      	movs	r0, #0
 800a98a:	e7e4      	b.n	800a956 <osTimerNew+0x5e>
 800a98c:	2000      	movs	r0, #0
 800a98e:	e7e2      	b.n	800a956 <osTimerNew+0x5e>
 800a990:	2000      	movs	r0, #0
  return ((osTimerId_t)hTimer);
 800a992:	e7e0      	b.n	800a956 <osTimerNew+0x5e>
 800a994:	20002ebc 	.word	0x20002ebc
 800a998:	0800a751 	.word	0x0800a751

0800a99c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a99c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a99e:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800a9a2:	2e00      	cmp	r6, #0
 800a9a4:	d14d      	bne.n	800aa42 <osMutexNew+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a9aa:	b913      	cbnz	r3, 800a9b2 <osMutexNew+0x16>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a9ac:	f3ef 8311 	mrs	r3, BASEPRI
 800a9b0:	b11b      	cbz	r3, 800a9ba <osMutexNew+0x1e>
 800a9b2:	4b27      	ldr	r3, [pc, #156]	; (800aa50 <osMutexNew+0xb4>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d045      	beq.n	800aa46 <osMutexNew+0xaa>
    if (attr != NULL) {
 800a9ba:	b318      	cbz	r0, 800aa04 <osMutexNew+0x68>
      type = attr->attr_bits;
 800a9bc:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a9be:	f013 0f01 	tst.w	r3, #1
 800a9c2:	d000      	beq.n	800a9c6 <osMutexNew+0x2a>
      rmtx = 1U;
 800a9c4:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a9c6:	f013 0f08 	tst.w	r3, #8
 800a9ca:	d13e      	bne.n	800aa4a <osMutexNew+0xae>
 800a9cc:	4604      	mov	r4, r0
      mem = -1;

      if (attr != NULL) {
 800a9ce:	b358      	cbz	r0, 800aa28 <osMutexNew+0x8c>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a9d0:	6881      	ldr	r1, [r0, #8]
 800a9d2:	b111      	cbz	r1, 800a9da <osMutexNew+0x3e>
 800a9d4:	68c3      	ldr	r3, [r0, #12]
 800a9d6:	2b4f      	cmp	r3, #79	; 0x4f
 800a9d8:	d81b      	bhi.n	800aa12 <osMutexNew+0x76>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a9da:	b1a9      	cbz	r1, 800aa08 <osMutexNew+0x6c>
      mem = -1;
 800a9dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 800a9e0:	bb6b      	cbnz	r3, 800aa3e <osMutexNew+0xa2>
          if (rmtx != 0U) {
 800a9e2:	b32e      	cbz	r6, 800aa30 <osMutexNew+0x94>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800a9e4:	2004      	movs	r0, #4
 800a9e6:	f000 fb27 	bl	800b038 <xQueueCreateMutex>
 800a9ea:	4605      	mov	r5, r0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a9ec:	b125      	cbz	r5, 800a9f8 <osMutexNew+0x5c>
        if (attr != NULL) {
 800a9ee:	b324      	cbz	r4, 800aa3a <osMutexNew+0x9e>
          name = attr->name;
 800a9f0:	6821      	ldr	r1, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	f000 fd1a 	bl	800b42c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a9f8:	b115      	cbz	r5, 800aa00 <osMutexNew+0x64>
 800a9fa:	b10e      	cbz	r6, 800aa00 <osMutexNew+0x64>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a9fc:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800aa00:	4628      	mov	r0, r5
 800aa02:	bd70      	pop	{r4, r5, r6, pc}
      type = 0U;
 800aa04:	4633      	mov	r3, r6
 800aa06:	e7da      	b.n	800a9be <osMutexNew+0x22>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aa08:	68e3      	ldr	r3, [r4, #12]
 800aa0a:	b17b      	cbz	r3, 800aa2c <osMutexNew+0x90>
      mem = -1;
 800aa0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa10:	e7e6      	b.n	800a9e0 <osMutexNew+0x44>
        if (rmtx != 0U) {
 800aa12:	b126      	cbz	r6, 800aa1e <osMutexNew+0x82>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800aa14:	2004      	movs	r0, #4
 800aa16:	f000 fb1a 	bl	800b04e <xQueueCreateMutexStatic>
 800aa1a:	4605      	mov	r5, r0
 800aa1c:	e7e6      	b.n	800a9ec <osMutexNew+0x50>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800aa1e:	2001      	movs	r0, #1
 800aa20:	f000 fb15 	bl	800b04e <xQueueCreateMutexStatic>
 800aa24:	4605      	mov	r5, r0
 800aa26:	e7e1      	b.n	800a9ec <osMutexNew+0x50>
        mem = 0;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	e7d9      	b.n	800a9e0 <osMutexNew+0x44>
            mem = 0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	e7d7      	b.n	800a9e0 <osMutexNew+0x44>
            hMutex = xSemaphoreCreateMutex ();
 800aa30:	2001      	movs	r0, #1
 800aa32:	f000 fb01 	bl	800b038 <xQueueCreateMutex>
 800aa36:	4605      	mov	r5, r0
 800aa38:	e7d8      	b.n	800a9ec <osMutexNew+0x50>
          name = NULL;
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	e7d9      	b.n	800a9f2 <osMutexNew+0x56>
  hMutex = NULL;
 800aa3e:	2500      	movs	r5, #0
 800aa40:	e7da      	b.n	800a9f8 <osMutexNew+0x5c>
 800aa42:	2500      	movs	r5, #0
 800aa44:	e7dc      	b.n	800aa00 <osMutexNew+0x64>
 800aa46:	2500      	movs	r5, #0
 800aa48:	e7da      	b.n	800aa00 <osMutexNew+0x64>
 800aa4a:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 800aa4c:	e7d8      	b.n	800aa00 <osMutexNew+0x64>
 800aa4e:	bf00      	nop
 800aa50:	20002ebc 	.word	0x20002ebc

0800aa54 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800aa54:	b570      	push	{r4, r5, r6, lr}
 800aa56:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa58:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d147      	bne.n	800aaf0 <osMessageQueueNew+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa60:	f3ef 8310 	mrs	r3, PRIMASK
 800aa64:	b913      	cbnz	r3, 800aa6c <osMessageQueueNew+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa66:	f3ef 8311 	mrs	r3, BASEPRI
 800aa6a:	b11b      	cbz	r3, 800aa74 <osMessageQueueNew+0x20>
 800aa6c:	4b25      	ldr	r3, [pc, #148]	; (800ab04 <osMessageQueueNew+0xb0>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d03f      	beq.n	800aaf4 <osMessageQueueNew+0xa0>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d03f      	beq.n	800aaf8 <osMessageQueueNew+0xa4>
 800aa78:	2900      	cmp	r1, #0
 800aa7a:	d03f      	beq.n	800aafc <osMessageQueueNew+0xa8>
 800aa7c:	4614      	mov	r4, r2
    mem = -1;

    if (attr != NULL) {
 800aa7e:	b372      	cbz	r2, 800aade <osMessageQueueNew+0x8a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aa80:	6893      	ldr	r3, [r2, #8]
 800aa82:	b14b      	cbz	r3, 800aa98 <osMessageQueueNew+0x44>
 800aa84:	68d2      	ldr	r2, [r2, #12]
 800aa86:	2a4f      	cmp	r2, #79	; 0x4f
 800aa88:	d906      	bls.n	800aa98 <osMessageQueueNew+0x44>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aa8a:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aa8c:	b122      	cbz	r2, 800aa98 <osMessageQueueNew+0x44>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aa8e:	6966      	ldr	r6, [r4, #20]
 800aa90:	fb01 f500 	mul.w	r5, r1, r0
 800aa94:	42ae      	cmp	r6, r5
 800aa96:	d21c      	bcs.n	800aad2 <osMessageQueueNew+0x7e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aa98:	b17b      	cbz	r3, 800aaba <osMessageQueueNew+0x66>
    mem = -1;
 800aa9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 800aa9e:	bb7b      	cbnz	r3, 800ab00 <osMessageQueueNew+0xac>
        hQueue = xQueueCreate (msg_count, msg_size);
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f000 f9d7 	bl	800ae54 <xQueueGenericCreate>
 800aaa6:	4605      	mov	r5, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800aaa8:	b125      	cbz	r5, 800aab4 <osMessageQueueNew+0x60>
      if (attr != NULL) {
 800aaaa:	b1fc      	cbz	r4, 800aaec <osMessageQueueNew+0x98>
        name = attr->name;
 800aaac:	6821      	ldr	r1, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800aaae:	4628      	mov	r0, r5
 800aab0:	f000 fcbc 	bl	800b42c <vQueueAddToRegistry>
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800aab4:	4628      	mov	r0, r5
 800aab6:	b002      	add	sp, #8
 800aab8:	bd70      	pop	{r4, r5, r6, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aaba:	68e3      	ldr	r3, [r4, #12]
 800aabc:	b98b      	cbnz	r3, 800aae2 <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aabe:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aac0:	b113      	cbz	r3, 800aac8 <osMessageQueueNew+0x74>
    mem = -1;
 800aac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aac6:	e7ea      	b.n	800aa9e <osMessageQueueNew+0x4a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aac8:	6963      	ldr	r3, [r4, #20]
 800aaca:	b16b      	cbz	r3, 800aae8 <osMessageQueueNew+0x94>
    mem = -1;
 800aacc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aad0:	e7e5      	b.n	800aa9e <osMessageQueueNew+0x4a>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800aad2:	2500      	movs	r5, #0
 800aad4:	9500      	str	r5, [sp, #0]
 800aad6:	f000 f974 	bl	800adc2 <xQueueGenericCreateStatic>
 800aada:	4605      	mov	r5, r0
 800aadc:	e7e4      	b.n	800aaa8 <osMessageQueueNew+0x54>
      mem = 0;
 800aade:	2300      	movs	r3, #0
 800aae0:	e7dd      	b.n	800aa9e <osMessageQueueNew+0x4a>
    mem = -1;
 800aae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aae6:	e7da      	b.n	800aa9e <osMessageQueueNew+0x4a>
          mem = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	e7d8      	b.n	800aa9e <osMessageQueueNew+0x4a>
        name = NULL;
 800aaec:	2100      	movs	r1, #0
 800aaee:	e7de      	b.n	800aaae <osMessageQueueNew+0x5a>
  hQueue = NULL;
 800aaf0:	2500      	movs	r5, #0
 800aaf2:	e7df      	b.n	800aab4 <osMessageQueueNew+0x60>
 800aaf4:	2500      	movs	r5, #0
 800aaf6:	e7dd      	b.n	800aab4 <osMessageQueueNew+0x60>
 800aaf8:	2500      	movs	r5, #0
 800aafa:	e7db      	b.n	800aab4 <osMessageQueueNew+0x60>
 800aafc:	2500      	movs	r5, #0
 800aafe:	e7d9      	b.n	800aab4 <osMessageQueueNew+0x60>
 800ab00:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800ab02:	e7d7      	b.n	800aab4 <osMessageQueueNew+0x60>
 800ab04:	20002ebc 	.word	0x20002ebc

0800ab08 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ab08:	4b03      	ldr	r3, [pc, #12]	; (800ab18 <vApplicationGetIdleTaskMemory+0x10>)
 800ab0a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ab0c:	4b03      	ldr	r3, [pc, #12]	; (800ab1c <vApplicationGetIdleTaskMemory+0x14>)
 800ab0e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ab10:	2380      	movs	r3, #128	; 0x80
 800ab12:	6013      	str	r3, [r2, #0]
}
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	20002e58 	.word	0x20002e58
 800ab1c:	20002c58 	.word	0x20002c58

0800ab20 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ab20:	4b03      	ldr	r3, [pc, #12]	; (800ab30 <vApplicationGetTimerTaskMemory+0x10>)
 800ab22:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ab24:	4b03      	ldr	r3, [pc, #12]	; (800ab34 <vApplicationGetTimerTaskMemory+0x14>)
 800ab26:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ab28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab2c:	6013      	str	r3, [r2, #0]
}
 800ab2e:	4770      	bx	lr
 800ab30:	200032c0 	.word	0x200032c0
 800ab34:	20002ec0 	.word	0x20002ec0

0800ab38 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab38:	f100 0308 	add.w	r3, r0, #8
 800ab3c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab42:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab44:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab46:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab4c:	4770      	bx	lr

0800ab4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab52:	4770      	bx	lr

0800ab54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab54:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab56:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab58:	689a      	ldr	r2, [r3, #8]
 800ab5a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab5c:	689a      	ldr	r2, [r3, #8]
 800ab5e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab60:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab62:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ab64:	6803      	ldr	r3, [r0, #0]
 800ab66:	3301      	adds	r3, #1
 800ab68:	6003      	str	r3, [r0, #0]
}
 800ab6a:	4770      	bx	lr

0800ab6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab6c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab6e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab70:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800ab74:	d002      	beq.n	800ab7c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab76:	f100 0208 	add.w	r2, r0, #8
 800ab7a:	e002      	b.n	800ab82 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab7c:	6902      	ldr	r2, [r0, #16]
 800ab7e:	e004      	b.n	800ab8a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab80:	461a      	mov	r2, r3
 800ab82:	6853      	ldr	r3, [r2, #4]
 800ab84:	681c      	ldr	r4, [r3, #0]
 800ab86:	42ac      	cmp	r4, r5
 800ab88:	d9fa      	bls.n	800ab80 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab8a:	6853      	ldr	r3, [r2, #4]
 800ab8c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab8e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab90:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab92:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab94:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ab96:	6803      	ldr	r3, [r0, #0]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	6003      	str	r3, [r0, #0]
}
 800ab9c:	bc30      	pop	{r4, r5}
 800ab9e:	4770      	bx	lr

0800aba0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aba0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aba2:	6842      	ldr	r2, [r0, #4]
 800aba4:	6881      	ldr	r1, [r0, #8]
 800aba6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aba8:	6882      	ldr	r2, [r0, #8]
 800abaa:	6841      	ldr	r1, [r0, #4]
 800abac:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800abae:	685a      	ldr	r2, [r3, #4]
 800abb0:	4282      	cmp	r2, r0
 800abb2:	d006      	beq.n	800abc2 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800abb4:	2200      	movs	r2, #0
 800abb6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	3a01      	subs	r2, #1
 800abbc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800abbe:	6818      	ldr	r0, [r3, #0]
}
 800abc0:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800abc2:	6882      	ldr	r2, [r0, #8]
 800abc4:	605a      	str	r2, [r3, #4]
 800abc6:	e7f5      	b.n	800abb4 <uxListRemove+0x14>

0800abc8 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800abc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800abca:	b123      	cbz	r3, 800abd6 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800abcc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800abce:	6818      	ldr	r0, [r3, #0]
 800abd0:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
 800abd4:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800abd6:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800abd8:	4770      	bx	lr

0800abda <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800abda:	b510      	push	{r4, lr}
 800abdc:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abde:	f002 f8c9 	bl	800cd74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800abe2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800abe4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d004      	beq.n	800abf4 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800abea:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800abec:	f002 f8e4 	bl	800cdb8 <vPortExitCritical>

	return xReturn;
}
 800abf0:	4620      	mov	r0, r4
 800abf2:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800abf4:	2401      	movs	r4, #1
 800abf6:	e7f9      	b.n	800abec <prvIsQueueFull+0x12>

0800abf8 <prvIsQueueEmpty>:
{
 800abf8:	b510      	push	{r4, lr}
 800abfa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800abfc:	f002 f8ba 	bl	800cd74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac02:	b123      	cbz	r3, 800ac0e <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 800ac04:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ac06:	f002 f8d7 	bl	800cdb8 <vPortExitCritical>
}
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800ac0e:	2401      	movs	r4, #1
 800ac10:	e7f9      	b.n	800ac06 <prvIsQueueEmpty+0xe>

0800ac12 <prvCopyDataToQueue>:
{
 800ac12:	b570      	push	{r4, r5, r6, lr}
 800ac14:	4604      	mov	r4, r0
 800ac16:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac18:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac1a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ac1c:	b95a      	cbnz	r2, 800ac36 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac1e:	6803      	ldr	r3, [r0, #0]
 800ac20:	b11b      	cbz	r3, 800ac2a <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800ac22:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac24:	3501      	adds	r5, #1
 800ac26:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800ac28:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac2a:	6880      	ldr	r0, [r0, #8]
 800ac2c:	f001 fb1e 	bl	800c26c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac30:	2300      	movs	r3, #0
 800ac32:	60a3      	str	r3, [r4, #8]
 800ac34:	e7f6      	b.n	800ac24 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800ac36:	b96e      	cbnz	r6, 800ac54 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac38:	6840      	ldr	r0, [r0, #4]
 800ac3a:	f003 f833 	bl	800dca4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ac40:	6863      	ldr	r3, [r4, #4]
 800ac42:	4413      	add	r3, r2
 800ac44:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac46:	68a2      	ldr	r2, [r4, #8]
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d319      	bcc.n	800ac80 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac4c:	6823      	ldr	r3, [r4, #0]
 800ac4e:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800ac50:	2000      	movs	r0, #0
 800ac52:	e7e7      	b.n	800ac24 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac54:	68c0      	ldr	r0, [r0, #12]
 800ac56:	f003 f825 	bl	800dca4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ac5c:	4252      	negs	r2, r2
 800ac5e:	68e3      	ldr	r3, [r4, #12]
 800ac60:	4413      	add	r3, r2
 800ac62:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac64:	6821      	ldr	r1, [r4, #0]
 800ac66:	428b      	cmp	r3, r1
 800ac68:	d202      	bcs.n	800ac70 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac6a:	68a3      	ldr	r3, [r4, #8]
 800ac6c:	441a      	add	r2, r3
 800ac6e:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800ac70:	2e02      	cmp	r6, #2
 800ac72:	d001      	beq.n	800ac78 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800ac74:	2000      	movs	r0, #0
 800ac76:	e7d5      	b.n	800ac24 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac78:	b125      	cbz	r5, 800ac84 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800ac7a:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	e7d1      	b.n	800ac24 <prvCopyDataToQueue+0x12>
 800ac80:	2000      	movs	r0, #0
 800ac82:	e7cf      	b.n	800ac24 <prvCopyDataToQueue+0x12>
 800ac84:	2000      	movs	r0, #0
 800ac86:	e7cd      	b.n	800ac24 <prvCopyDataToQueue+0x12>

0800ac88 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac88:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ac8a:	b172      	cbz	r2, 800acaa <prvCopyDataFromQueue+0x22>
{
 800ac8c:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac8e:	68c3      	ldr	r3, [r0, #12]
 800ac90:	4413      	add	r3, r2
 800ac92:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac94:	6884      	ldr	r4, [r0, #8]
 800ac96:	42a3      	cmp	r3, r4
 800ac98:	d301      	bcc.n	800ac9e <prvCopyDataFromQueue+0x16>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac9a:	6803      	ldr	r3, [r0, #0]
 800ac9c:	60c3      	str	r3, [r0, #12]
 800ac9e:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aca0:	68c1      	ldr	r1, [r0, #12]
 800aca2:	4620      	mov	r0, r4
 800aca4:	f002 fffe 	bl	800dca4 <memcpy>
}
 800aca8:	bd10      	pop	{r4, pc}
 800acaa:	4770      	bx	lr

0800acac <prvUnlockQueue>:
{
 800acac:	b538      	push	{r3, r4, r5, lr}
 800acae:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800acb0:	f002 f860 	bl	800cd74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800acb4:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800acb8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acba:	e003      	b.n	800acc4 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800acbc:	f001 f9a8 	bl	800c010 <vTaskMissedYield>
			--cTxLock;
 800acc0:	3c01      	subs	r4, #1
 800acc2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acc4:	2c00      	cmp	r4, #0
 800acc6:	dd08      	ble.n	800acda <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acc8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800acca:	b133      	cbz	r3, 800acda <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800accc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800acd0:	f001 f90c 	bl	800beec <xTaskRemoveFromEventList>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d0f3      	beq.n	800acc0 <prvUnlockQueue+0x14>
 800acd8:	e7f0      	b.n	800acbc <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800acda:	23ff      	movs	r3, #255	; 0xff
 800acdc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800ace0:	f002 f86a 	bl	800cdb8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ace4:	f002 f846 	bl	800cd74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ace8:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800acec:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acee:	e003      	b.n	800acf8 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 800acf0:	f001 f98e 	bl	800c010 <vTaskMissedYield>
				--cRxLock;
 800acf4:	3c01      	subs	r4, #1
 800acf6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acf8:	2c00      	cmp	r4, #0
 800acfa:	dd08      	ble.n	800ad0e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acfc:	692b      	ldr	r3, [r5, #16]
 800acfe:	b133      	cbz	r3, 800ad0e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad00:	f105 0010 	add.w	r0, r5, #16
 800ad04:	f001 f8f2 	bl	800beec <xTaskRemoveFromEventList>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d0f3      	beq.n	800acf4 <prvUnlockQueue+0x48>
 800ad0c:	e7f0      	b.n	800acf0 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800ad0e:	23ff      	movs	r3, #255	; 0xff
 800ad10:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800ad14:	f002 f850 	bl	800cdb8 <vPortExitCritical>
}
 800ad18:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ad1c <xQueueGenericReset>:
{
 800ad1c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800ad1e:	b940      	cbnz	r0, 800ad32 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	e7fe      	b.n	800ad30 <xQueueGenericReset+0x14>
 800ad32:	4604      	mov	r4, r0
 800ad34:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800ad36:	f002 f81d 	bl	800cd74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad3a:	6821      	ldr	r1, [r4, #0]
 800ad3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ad3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad40:	fb03 1002 	mla	r0, r3, r2, r1
 800ad44:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad46:	2000      	movs	r0, #0
 800ad48:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad4a:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad4c:	3a01      	subs	r2, #1
 800ad4e:	fb02 1303 	mla	r3, r2, r3, r1
 800ad52:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad54:	23ff      	movs	r3, #255	; 0xff
 800ad56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800ad5e:	b9a5      	cbnz	r5, 800ad8a <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad60:	6923      	ldr	r3, [r4, #16]
 800ad62:	b91b      	cbnz	r3, 800ad6c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800ad64:	f002 f828 	bl	800cdb8 <vPortExitCritical>
}
 800ad68:	2001      	movs	r0, #1
 800ad6a:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad6c:	f104 0010 	add.w	r0, r4, #16
 800ad70:	f001 f8bc 	bl	800beec <xTaskRemoveFromEventList>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d0f5      	beq.n	800ad64 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 800ad78:	4b08      	ldr	r3, [pc, #32]	; (800ad9c <xQueueGenericReset+0x80>)
 800ad7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad7e:	601a      	str	r2, [r3, #0]
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	e7ec      	b.n	800ad64 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad8a:	f104 0010 	add.w	r0, r4, #16
 800ad8e:	f7ff fed3 	bl	800ab38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad92:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ad96:	f7ff fecf 	bl	800ab38 <vListInitialise>
 800ad9a:	e7e3      	b.n	800ad64 <xQueueGenericReset+0x48>
 800ad9c:	e000ed04 	.word	0xe000ed04

0800ada0 <prvInitialiseNewQueue>:
{
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	461d      	mov	r5, r3
 800ada4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ada6:	460b      	mov	r3, r1
 800ada8:	b149      	cbz	r1, 800adbe <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800adaa:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800adac:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800adae:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800adb0:	2101      	movs	r1, #1
 800adb2:	4620      	mov	r0, r4
 800adb4:	f7ff ffb2 	bl	800ad1c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800adb8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800adbc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800adbe:	6024      	str	r4, [r4, #0]
 800adc0:	e7f4      	b.n	800adac <prvInitialiseNewQueue+0xc>

0800adc2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800adc2:	b940      	cbnz	r0, 800add6 <xQueueGenericCreateStatic+0x14>
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	e7fe      	b.n	800add4 <xQueueGenericCreateStatic+0x12>
	{
 800add6:	b510      	push	{r4, lr}
 800add8:	b084      	sub	sp, #16
 800adda:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 800addc:	b153      	cbz	r3, 800adf4 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800adde:	b192      	cbz	r2, 800ae06 <xQueueGenericCreateStatic+0x44>
 800ade0:	b989      	cbnz	r1, 800ae06 <xQueueGenericCreateStatic+0x44>
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	e7fe      	b.n	800adf2 <xQueueGenericCreateStatic+0x30>
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	e7fe      	b.n	800ae04 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ae06:	b94a      	cbnz	r2, 800ae1c <xQueueGenericCreateStatic+0x5a>
 800ae08:	b141      	cbz	r1, 800ae1c <xQueueGenericCreateStatic+0x5a>
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	e7fe      	b.n	800ae1a <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae1c:	2050      	movs	r0, #80	; 0x50
 800ae1e:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae20:	9803      	ldr	r0, [sp, #12]
 800ae22:	2850      	cmp	r0, #80	; 0x50
 800ae24:	d008      	beq.n	800ae38 <xQueueGenericCreateStatic+0x76>
 800ae26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2a:	f383 8811 	msr	BASEPRI, r3
 800ae2e:	f3bf 8f6f 	isb	sy
 800ae32:	f3bf 8f4f 	dsb	sy
 800ae36:	e7fe      	b.n	800ae36 <xQueueGenericCreateStatic+0x74>
 800ae38:	4620      	mov	r0, r4
 800ae3a:	461c      	mov	r4, r3
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae3c:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae44:	9400      	str	r4, [sp, #0]
 800ae46:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800ae4a:	f7ff ffa9 	bl	800ada0 <prvInitialiseNewQueue>
	}
 800ae4e:	4620      	mov	r0, r4
 800ae50:	b004      	add	sp, #16
 800ae52:	bd10      	pop	{r4, pc}

0800ae54 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae54:	b940      	cbnz	r0, 800ae68 <xQueueGenericCreate+0x14>
 800ae56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	e7fe      	b.n	800ae66 <xQueueGenericCreate+0x12>
	{
 800ae68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800ae6e:	b111      	cbz	r1, 800ae76 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae70:	fb01 f000 	mul.w	r0, r1, r0
 800ae74:	e000      	b.n	800ae78 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 800ae76:	2000      	movs	r0, #0
 800ae78:	4617      	mov	r7, r2
 800ae7a:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ae7c:	3050      	adds	r0, #80	; 0x50
 800ae7e:	f002 f92f 	bl	800d0e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800ae82:	4605      	mov	r5, r0
 800ae84:	b150      	cbz	r0, 800ae9c <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ae86:	2300      	movs	r3, #0
 800ae88:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae8c:	9000      	str	r0, [sp, #0]
 800ae8e:	463b      	mov	r3, r7
 800ae90:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800ae94:	4621      	mov	r1, r4
 800ae96:	4630      	mov	r0, r6
 800ae98:	f7ff ff82 	bl	800ada0 <prvInitialiseNewQueue>
	}
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	b003      	add	sp, #12
 800aea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800aea4 <xQueueGenericSend>:
{
 800aea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aea6:	b085      	sub	sp, #20
 800aea8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800aeaa:	b160      	cbz	r0, 800aec6 <xQueueGenericSend+0x22>
 800aeac:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aeae:	b999      	cbnz	r1, 800aed8 <xQueueGenericSend+0x34>
 800aeb0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800aeb2:	b18a      	cbz	r2, 800aed8 <xQueueGenericSend+0x34>
 800aeb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb8:	f383 8811 	msr	BASEPRI, r3
 800aebc:	f3bf 8f6f 	isb	sy
 800aec0:	f3bf 8f4f 	dsb	sy
 800aec4:	e7fe      	b.n	800aec4 <xQueueGenericSend+0x20>
 800aec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	e7fe      	b.n	800aed6 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d10b      	bne.n	800aef4 <xQueueGenericSend+0x50>
 800aedc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800aede:	2a01      	cmp	r2, #1
 800aee0:	d008      	beq.n	800aef4 <xQueueGenericSend+0x50>
 800aee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee6:	f383 8811 	msr	BASEPRI, r3
 800aeea:	f3bf 8f6f 	isb	sy
 800aeee:	f3bf 8f4f 	dsb	sy
 800aef2:	e7fe      	b.n	800aef2 <xQueueGenericSend+0x4e>
 800aef4:	461e      	mov	r6, r3
 800aef6:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aef8:	f001 f95c 	bl	800c1b4 <xTaskGetSchedulerState>
 800aefc:	b950      	cbnz	r0, 800af14 <xQueueGenericSend+0x70>
 800aefe:	9b01      	ldr	r3, [sp, #4]
 800af00:	b153      	cbz	r3, 800af18 <xQueueGenericSend+0x74>
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	e7fe      	b.n	800af12 <xQueueGenericSend+0x6e>
 800af14:	2500      	movs	r5, #0
 800af16:	e03a      	b.n	800af8e <xQueueGenericSend+0xea>
 800af18:	2500      	movs	r5, #0
 800af1a:	e038      	b.n	800af8e <xQueueGenericSend+0xea>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af1c:	4632      	mov	r2, r6
 800af1e:	4639      	mov	r1, r7
 800af20:	4620      	mov	r0, r4
 800af22:	f7ff fe76 	bl	800ac12 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af28:	b94b      	cbnz	r3, 800af3e <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 800af2a:	b1a8      	cbz	r0, 800af58 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 800af2c:	4b3b      	ldr	r3, [pc, #236]	; (800b01c <xQueueGenericSend+0x178>)
 800af2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af32:	601a      	str	r2, [r3, #0]
 800af34:	f3bf 8f4f 	dsb	sy
 800af38:	f3bf 8f6f 	isb	sy
 800af3c:	e00c      	b.n	800af58 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800af42:	f000 ffd3 	bl	800beec <xTaskRemoveFromEventList>
 800af46:	b138      	cbz	r0, 800af58 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 800af48:	4b34      	ldr	r3, [pc, #208]	; (800b01c <xQueueGenericSend+0x178>)
 800af4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af4e:	601a      	str	r2, [r3, #0]
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800af58:	f001 ff2e 	bl	800cdb8 <vPortExitCritical>
				return pdPASS;
 800af5c:	2001      	movs	r0, #1
}
 800af5e:	b005      	add	sp, #20
 800af60:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800af62:	f001 ff29 	bl	800cdb8 <vPortExitCritical>
					return errQUEUE_FULL;
 800af66:	2000      	movs	r0, #0
 800af68:	e7f9      	b.n	800af5e <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af6a:	a802      	add	r0, sp, #8
 800af6c:	f001 f804 	bl	800bf78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af70:	2501      	movs	r5, #1
 800af72:	e019      	b.n	800afa8 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 800af74:	2300      	movs	r3, #0
 800af76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800af7a:	e021      	b.n	800afc0 <xQueueGenericSend+0x11c>
 800af7c:	2300      	movs	r3, #0
 800af7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af82:	e023      	b.n	800afcc <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 800af84:	4620      	mov	r0, r4
 800af86:	f7ff fe91 	bl	800acac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af8a:	f000 fdc9 	bl	800bb20 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800af8e:	f001 fef1 	bl	800cd74 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800af94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800af96:	429a      	cmp	r2, r3
 800af98:	d3c0      	bcc.n	800af1c <xQueueGenericSend+0x78>
 800af9a:	2e02      	cmp	r6, #2
 800af9c:	d0be      	beq.n	800af1c <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 800af9e:	9b01      	ldr	r3, [sp, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d0de      	beq.n	800af62 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 800afa4:	2d00      	cmp	r5, #0
 800afa6:	d0e0      	beq.n	800af6a <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 800afa8:	f001 ff06 	bl	800cdb8 <vPortExitCritical>
		vTaskSuspendAll();
 800afac:	f000 fd1e 	bl	800b9ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800afb0:	f001 fee0 	bl	800cd74 <vPortEnterCritical>
 800afb4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800afb8:	b25b      	sxtb	r3, r3
 800afba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afbe:	d0d9      	beq.n	800af74 <xQueueGenericSend+0xd0>
 800afc0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800afc4:	b25b      	sxtb	r3, r3
 800afc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afca:	d0d7      	beq.n	800af7c <xQueueGenericSend+0xd8>
 800afcc:	f001 fef4 	bl	800cdb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afd0:	a901      	add	r1, sp, #4
 800afd2:	a802      	add	r0, sp, #8
 800afd4:	f000 ffdc 	bl	800bf90 <xTaskCheckForTimeOut>
 800afd8:	b9c8      	cbnz	r0, 800b00e <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800afda:	4620      	mov	r0, r4
 800afdc:	f7ff fdfd 	bl	800abda <prvIsQueueFull>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d0cf      	beq.n	800af84 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800afe4:	9901      	ldr	r1, [sp, #4]
 800afe6:	f104 0010 	add.w	r0, r4, #16
 800afea:	f000 ff4b 	bl	800be84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800afee:	4620      	mov	r0, r4
 800aff0:	f7ff fe5c 	bl	800acac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aff4:	f000 fd94 	bl	800bb20 <xTaskResumeAll>
 800aff8:	2800      	cmp	r0, #0
 800affa:	d1c8      	bne.n	800af8e <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800affc:	4b07      	ldr	r3, [pc, #28]	; (800b01c <xQueueGenericSend+0x178>)
 800affe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	e7bf      	b.n	800af8e <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800b00e:	4620      	mov	r0, r4
 800b010:	f7ff fe4c 	bl	800acac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b014:	f000 fd84 	bl	800bb20 <xTaskResumeAll>
			return errQUEUE_FULL;
 800b018:	2000      	movs	r0, #0
 800b01a:	e7a0      	b.n	800af5e <xQueueGenericSend+0xba>
 800b01c:	e000ed04 	.word	0xe000ed04

0800b020 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800b020:	b148      	cbz	r0, 800b036 <prvInitialiseMutex+0x16>
	{
 800b022:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b024:	2100      	movs	r1, #0
 800b026:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b028:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b02a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b02c:	460b      	mov	r3, r1
 800b02e:	460a      	mov	r2, r1
 800b030:	f7ff ff38 	bl	800aea4 <xQueueGenericSend>
	}
 800b034:	bd08      	pop	{r3, pc}
 800b036:	4770      	bx	lr

0800b038 <xQueueCreateMutex>:
	{
 800b038:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b03a:	4602      	mov	r2, r0
 800b03c:	2100      	movs	r1, #0
 800b03e:	2001      	movs	r0, #1
 800b040:	f7ff ff08 	bl	800ae54 <xQueueGenericCreate>
 800b044:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b046:	f7ff ffeb 	bl	800b020 <prvInitialiseMutex>
	}
 800b04a:	4620      	mov	r0, r4
 800b04c:	bd10      	pop	{r4, pc}

0800b04e <xQueueCreateMutexStatic>:
	{
 800b04e:	b510      	push	{r4, lr}
 800b050:	b082      	sub	sp, #8
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b052:	9000      	str	r0, [sp, #0]
 800b054:	460b      	mov	r3, r1
 800b056:	2200      	movs	r2, #0
 800b058:	4611      	mov	r1, r2
 800b05a:	2001      	movs	r0, #1
 800b05c:	f7ff feb1 	bl	800adc2 <xQueueGenericCreateStatic>
 800b060:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b062:	f7ff ffdd 	bl	800b020 <prvInitialiseMutex>
	}
 800b066:	4620      	mov	r0, r4
 800b068:	b002      	add	sp, #8
 800b06a:	bd10      	pop	{r4, pc}

0800b06c <xQueueGenericSendFromISR>:
{
 800b06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800b070:	b160      	cbz	r0, 800b08c <xQueueGenericSendFromISR+0x20>
 800b072:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b074:	b999      	cbnz	r1, 800b09e <xQueueGenericSendFromISR+0x32>
 800b076:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800b078:	b188      	cbz	r0, 800b09e <xQueueGenericSendFromISR+0x32>
 800b07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07e:	f383 8811 	msr	BASEPRI, r3
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	e7fe      	b.n	800b08a <xQueueGenericSendFromISR+0x1e>
 800b08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b090:	f383 8811 	msr	BASEPRI, r3
 800b094:	f3bf 8f6f 	isb	sy
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	e7fe      	b.n	800b09c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d10b      	bne.n	800b0ba <xQueueGenericSendFromISR+0x4e>
 800b0a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b0a4:	2801      	cmp	r0, #1
 800b0a6:	d008      	beq.n	800b0ba <xQueueGenericSendFromISR+0x4e>
 800b0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ac:	f383 8811 	msr	BASEPRI, r3
 800b0b0:	f3bf 8f6f 	isb	sy
 800b0b4:	f3bf 8f4f 	dsb	sy
 800b0b8:	e7fe      	b.n	800b0b8 <xQueueGenericSendFromISR+0x4c>
 800b0ba:	461f      	mov	r7, r3
 800b0bc:	4690      	mov	r8, r2
 800b0be:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0c0:	f001 ff82 	bl	800cfc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b0c4:	f3ef 8611 	mrs	r6, BASEPRI
 800b0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0cc:	f383 8811 	msr	BASEPRI, r3
 800b0d0:	f3bf 8f6f 	isb	sy
 800b0d4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b0da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d303      	bcc.n	800b0e8 <xQueueGenericSendFromISR+0x7c>
 800b0e0:	2f02      	cmp	r7, #2
 800b0e2:	d001      	beq.n	800b0e8 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	e00f      	b.n	800b108 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0e8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800b0ec:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0ee:	463a      	mov	r2, r7
 800b0f0:	4649      	mov	r1, r9
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f7ff fd8d 	bl	800ac12 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800b0f8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800b0fc:	d008      	beq.n	800b110 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0fe:	1c6b      	adds	r3, r5, #1
 800b100:	b25b      	sxtb	r3, r3
 800b102:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800b106:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b108:	f386 8811 	msr	BASEPRI, r6
}
 800b10c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b112:	b15b      	cbz	r3, 800b12c <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b114:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b118:	f000 fee8 	bl	800beec <xTaskRemoveFromEventList>
 800b11c:	b140      	cbz	r0, 800b130 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 800b11e:	f1b8 0f00 	cmp.w	r8, #0
 800b122:	d007      	beq.n	800b134 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b124:	2001      	movs	r0, #1
 800b126:	f8c8 0000 	str.w	r0, [r8]
 800b12a:	e7ed      	b.n	800b108 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 800b12c:	2001      	movs	r0, #1
 800b12e:	e7eb      	b.n	800b108 <xQueueGenericSendFromISR+0x9c>
 800b130:	2001      	movs	r0, #1
 800b132:	e7e9      	b.n	800b108 <xQueueGenericSendFromISR+0x9c>
 800b134:	2001      	movs	r0, #1
 800b136:	e7e7      	b.n	800b108 <xQueueGenericSendFromISR+0x9c>

0800b138 <xQueueReceive>:
{
 800b138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b13a:	b085      	sub	sp, #20
 800b13c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b13e:	b160      	cbz	r0, 800b15a <xQueueReceive+0x22>
 800b140:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b142:	b999      	cbnz	r1, 800b16c <xQueueReceive+0x34>
 800b144:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b146:	b18b      	cbz	r3, 800b16c <xQueueReceive+0x34>
	__asm volatile
 800b148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	e7fe      	b.n	800b158 <xQueueReceive+0x20>
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	e7fe      	b.n	800b16a <xQueueReceive+0x32>
 800b16c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b16e:	f001 f821 	bl	800c1b4 <xTaskGetSchedulerState>
 800b172:	b950      	cbnz	r0, 800b18a <xQueueReceive+0x52>
 800b174:	9b01      	ldr	r3, [sp, #4]
 800b176:	b153      	cbz	r3, 800b18e <xQueueReceive+0x56>
 800b178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17c:	f383 8811 	msr	BASEPRI, r3
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	e7fe      	b.n	800b188 <xQueueReceive+0x50>
 800b18a:	2600      	movs	r6, #0
 800b18c:	e03e      	b.n	800b20c <xQueueReceive+0xd4>
 800b18e:	2600      	movs	r6, #0
 800b190:	e03c      	b.n	800b20c <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b192:	4639      	mov	r1, r7
 800b194:	4620      	mov	r0, r4
 800b196:	f7ff fd77 	bl	800ac88 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b19a:	3d01      	subs	r5, #1
 800b19c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b19e:	6923      	ldr	r3, [r4, #16]
 800b1a0:	b923      	cbnz	r3, 800b1ac <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 800b1a2:	f001 fe09 	bl	800cdb8 <vPortExitCritical>
				return pdPASS;
 800b1a6:	2001      	movs	r0, #1
}
 800b1a8:	b005      	add	sp, #20
 800b1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1ac:	f104 0010 	add.w	r0, r4, #16
 800b1b0:	f000 fe9c 	bl	800beec <xTaskRemoveFromEventList>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d0f4      	beq.n	800b1a2 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 800b1b8:	4b34      	ldr	r3, [pc, #208]	; (800b28c <xQueueReceive+0x154>)
 800b1ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1be:	601a      	str	r2, [r3, #0]
 800b1c0:	f3bf 8f4f 	dsb	sy
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	e7eb      	b.n	800b1a2 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 800b1ca:	f001 fdf5 	bl	800cdb8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	e7ea      	b.n	800b1a8 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1d2:	a802      	add	r0, sp, #8
 800b1d4:	f000 fed0 	bl	800bf78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1d8:	2601      	movs	r6, #1
 800b1da:	e021      	b.n	800b220 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b1e2:	e029      	b.n	800b238 <xQueueReceive+0x100>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1ea:	e02b      	b.n	800b244 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f7ff fd5d 	bl	800acac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1f2:	f000 fc95 	bl	800bb20 <xTaskResumeAll>
 800b1f6:	e009      	b.n	800b20c <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f7ff fd57 	bl	800acac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1fe:	f000 fc8f 	bl	800bb20 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b202:	4620      	mov	r0, r4
 800b204:	f7ff fcf8 	bl	800abf8 <prvIsQueueEmpty>
 800b208:	2800      	cmp	r0, #0
 800b20a:	d13d      	bne.n	800b288 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 800b20c:	f001 fdb2 	bl	800cd74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b210:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b212:	2d00      	cmp	r5, #0
 800b214:	d1bd      	bne.n	800b192 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b216:	9b01      	ldr	r3, [sp, #4]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d0d6      	beq.n	800b1ca <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 800b21c:	2e00      	cmp	r6, #0
 800b21e:	d0d8      	beq.n	800b1d2 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 800b220:	f001 fdca 	bl	800cdb8 <vPortExitCritical>
		vTaskSuspendAll();
 800b224:	f000 fbe2 	bl	800b9ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b228:	f001 fda4 	bl	800cd74 <vPortEnterCritical>
 800b22c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b230:	b25b      	sxtb	r3, r3
 800b232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b236:	d0d1      	beq.n	800b1dc <xQueueReceive+0xa4>
 800b238:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b23c:	b25b      	sxtb	r3, r3
 800b23e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b242:	d0cf      	beq.n	800b1e4 <xQueueReceive+0xac>
 800b244:	f001 fdb8 	bl	800cdb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b248:	a901      	add	r1, sp, #4
 800b24a:	a802      	add	r0, sp, #8
 800b24c:	f000 fea0 	bl	800bf90 <xTaskCheckForTimeOut>
 800b250:	2800      	cmp	r0, #0
 800b252:	d1d1      	bne.n	800b1f8 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b254:	4620      	mov	r0, r4
 800b256:	f7ff fccf 	bl	800abf8 <prvIsQueueEmpty>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d0c6      	beq.n	800b1ec <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b25e:	9901      	ldr	r1, [sp, #4]
 800b260:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b264:	f000 fe0e 	bl	800be84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b268:	4620      	mov	r0, r4
 800b26a:	f7ff fd1f 	bl	800acac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b26e:	f000 fc57 	bl	800bb20 <xTaskResumeAll>
 800b272:	2800      	cmp	r0, #0
 800b274:	d1ca      	bne.n	800b20c <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 800b276:	4b05      	ldr	r3, [pc, #20]	; (800b28c <xQueueReceive+0x154>)
 800b278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b27c:	601a      	str	r2, [r3, #0]
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	e7c1      	b.n	800b20c <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 800b288:	2000      	movs	r0, #0
 800b28a:	e78d      	b.n	800b1a8 <xQueueReceive+0x70>
 800b28c:	e000ed04 	.word	0xe000ed04

0800b290 <xQueueSemaphoreTake>:
{
 800b290:	b570      	push	{r4, r5, r6, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b296:	b940      	cbnz	r0, 800b2aa <xQueueSemaphoreTake+0x1a>
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	e7fe      	b.n	800b2a8 <xQueueSemaphoreTake+0x18>
 800b2aa:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800b2ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b2ae:	b143      	cbz	r3, 800b2c2 <xQueueSemaphoreTake+0x32>
 800b2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	e7fe      	b.n	800b2c0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2c2:	f000 ff77 	bl	800c1b4 <xTaskGetSchedulerState>
 800b2c6:	b950      	cbnz	r0, 800b2de <xQueueSemaphoreTake+0x4e>
 800b2c8:	9b01      	ldr	r3, [sp, #4]
 800b2ca:	b15b      	cbz	r3, 800b2e4 <xQueueSemaphoreTake+0x54>
 800b2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	e7fe      	b.n	800b2dc <xQueueSemaphoreTake+0x4c>
 800b2de:	2500      	movs	r5, #0
 800b2e0:	462e      	mov	r6, r5
 800b2e2:	e051      	b.n	800b388 <xQueueSemaphoreTake+0xf8>
 800b2e4:	2500      	movs	r5, #0
 800b2e6:	462e      	mov	r6, r5
 800b2e8:	e04e      	b.n	800b388 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	b913      	cbnz	r3, 800b2f8 <xQueueSemaphoreTake+0x68>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b2f2:	f001 f89f 	bl	800c434 <pvTaskIncrementMutexHeldCount>
 800b2f6:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2f8:	6923      	ldr	r3, [r4, #16]
 800b2fa:	b163      	cbz	r3, 800b316 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2fc:	f104 0010 	add.w	r0, r4, #16
 800b300:	f000 fdf4 	bl	800beec <xTaskRemoveFromEventList>
 800b304:	b138      	cbz	r0, 800b316 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 800b306:	4b48      	ldr	r3, [pc, #288]	; (800b428 <xQueueSemaphoreTake+0x198>)
 800b308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b30c:	601a      	str	r2, [r3, #0]
 800b30e:	f3bf 8f4f 	dsb	sy
 800b312:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b316:	f001 fd4f 	bl	800cdb8 <vPortExitCritical>
				return pdPASS;
 800b31a:	2501      	movs	r5, #1
}
 800b31c:	4628      	mov	r0, r5
 800b31e:	b004      	add	sp, #16
 800b320:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b322:	b145      	cbz	r5, 800b336 <xQueueSemaphoreTake+0xa6>
 800b324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b328:	f383 8811 	msr	BASEPRI, r3
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	e7fe      	b.n	800b334 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 800b336:	f001 fd3f 	bl	800cdb8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800b33a:	e7ef      	b.n	800b31c <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b33c:	a802      	add	r0, sp, #8
 800b33e:	f000 fe1b 	bl	800bf78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b342:	2601      	movs	r6, #1
 800b344:	e02a      	b.n	800b39c <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 800b346:	2300      	movs	r3, #0
 800b348:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b34c:	e032      	b.n	800b3b4 <xQueueSemaphoreTake+0x124>
 800b34e:	2300      	movs	r3, #0
 800b350:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b354:	e034      	b.n	800b3c0 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 800b356:	f001 fd0d 	bl	800cd74 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b35a:	68a0      	ldr	r0, [r4, #8]
 800b35c:	f000 ff3a 	bl	800c1d4 <xTaskPriorityInherit>
 800b360:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800b362:	f001 fd29 	bl	800cdb8 <vPortExitCritical>
 800b366:	e03b      	b.n	800b3e0 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 800b368:	4620      	mov	r0, r4
 800b36a:	f7ff fc9f 	bl	800acac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b36e:	f000 fbd7 	bl	800bb20 <xTaskResumeAll>
 800b372:	e009      	b.n	800b388 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 800b374:	4620      	mov	r0, r4
 800b376:	f7ff fc99 	bl	800acac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b37a:	f000 fbd1 	bl	800bb20 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b37e:	4620      	mov	r0, r4
 800b380:	f7ff fc3a 	bl	800abf8 <prvIsQueueEmpty>
 800b384:	2800      	cmp	r0, #0
 800b386:	d140      	bne.n	800b40a <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 800b388:	f001 fcf4 	bl	800cd74 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b38c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d1ab      	bne.n	800b2ea <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b392:	9b01      	ldr	r3, [sp, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d0c4      	beq.n	800b322 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 800b398:	2e00      	cmp	r6, #0
 800b39a:	d0cf      	beq.n	800b33c <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 800b39c:	f001 fd0c 	bl	800cdb8 <vPortExitCritical>
		vTaskSuspendAll();
 800b3a0:	f000 fb24 	bl	800b9ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3a4:	f001 fce6 	bl	800cd74 <vPortEnterCritical>
 800b3a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b3ac:	b25b      	sxtb	r3, r3
 800b3ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3b2:	d0c8      	beq.n	800b346 <xQueueSemaphoreTake+0xb6>
 800b3b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b3b8:	b25b      	sxtb	r3, r3
 800b3ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3be:	d0c6      	beq.n	800b34e <xQueueSemaphoreTake+0xbe>
 800b3c0:	f001 fcfa 	bl	800cdb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3c4:	a901      	add	r1, sp, #4
 800b3c6:	a802      	add	r0, sp, #8
 800b3c8:	f000 fde2 	bl	800bf90 <xTaskCheckForTimeOut>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d1d1      	bne.n	800b374 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f7ff fc11 	bl	800abf8 <prvIsQueueEmpty>
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	d0c6      	beq.n	800b368 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d0ba      	beq.n	800b356 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3e0:	9901      	ldr	r1, [sp, #4]
 800b3e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b3e6:	f000 fd4d 	bl	800be84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f7ff fc5e 	bl	800acac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3f0:	f000 fb96 	bl	800bb20 <xTaskResumeAll>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d1c7      	bne.n	800b388 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 800b3f8:	4b0b      	ldr	r3, [pc, #44]	; (800b428 <xQueueSemaphoreTake+0x198>)
 800b3fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3fe:	601a      	str	r2, [r3, #0]
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	e7be      	b.n	800b388 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 800b40a:	2d00      	cmp	r5, #0
 800b40c:	d086      	beq.n	800b31c <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 800b40e:	f001 fcb1 	bl	800cd74 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b412:	4620      	mov	r0, r4
 800b414:	f7ff fbd8 	bl	800abc8 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b418:	4601      	mov	r1, r0
 800b41a:	68a0      	ldr	r0, [r4, #8]
 800b41c:	f000 ff6e 	bl	800c2fc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800b420:	f001 fcca 	bl	800cdb8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800b424:	2500      	movs	r5, #0
 800b426:	e779      	b.n	800b31c <xQueueSemaphoreTake+0x8c>
 800b428:	e000ed04 	.word	0xe000ed04

0800b42c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b42c:	2300      	movs	r3, #0
 800b42e:	2b07      	cmp	r3, #7
 800b430:	d80c      	bhi.n	800b44c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b432:	4a07      	ldr	r2, [pc, #28]	; (800b450 <vQueueAddToRegistry+0x24>)
 800b434:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b438:	b10a      	cbz	r2, 800b43e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b43a:	3301      	adds	r3, #1
 800b43c:	e7f7      	b.n	800b42e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b43e:	4a04      	ldr	r2, [pc, #16]	; (800b450 <vQueueAddToRegistry+0x24>)
 800b440:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b444:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b448:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b44a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	200042c4 	.word	0x200042c4

0800b454 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b454:	b570      	push	{r4, r5, r6, lr}
 800b456:	4604      	mov	r4, r0
 800b458:	460d      	mov	r5, r1
 800b45a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b45c:	f001 fc8a 	bl	800cd74 <vPortEnterCritical>
 800b460:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b464:	b25b      	sxtb	r3, r3
 800b466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b46a:	d00d      	beq.n	800b488 <vQueueWaitForMessageRestricted+0x34>
 800b46c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b470:	b25b      	sxtb	r3, r3
 800b472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b476:	d00b      	beq.n	800b490 <vQueueWaitForMessageRestricted+0x3c>
 800b478:	f001 fc9e 	bl	800cdb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b47c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b47e:	b15b      	cbz	r3, 800b498 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b480:	4620      	mov	r0, r4
 800b482:	f7ff fc13 	bl	800acac <prvUnlockQueue>
	}
 800b486:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800b488:	2300      	movs	r3, #0
 800b48a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b48e:	e7ed      	b.n	800b46c <vQueueWaitForMessageRestricted+0x18>
 800b490:	2300      	movs	r3, #0
 800b492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b496:	e7ef      	b.n	800b478 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b498:	4632      	mov	r2, r6
 800b49a:	4629      	mov	r1, r5
 800b49c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b4a0:	f000 fd08 	bl	800beb4 <vTaskPlaceOnEventListRestricted>
 800b4a4:	e7ec      	b.n	800b480 <vQueueWaitForMessageRestricted+0x2c>

0800b4a6 <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 800b4a6:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b4a8:	e001      	b.n	800b4ae <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 800b4aa:	3001      	adds	r0, #1
			ulCount++;
 800b4ac:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b4ae:	7802      	ldrb	r2, [r0, #0]
 800b4b0:	2aa5      	cmp	r2, #165	; 0xa5
 800b4b2:	d0fa      	beq.n	800b4aa <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( configSTACK_DEPTH_TYPE ) ulCount;
	}
 800b4b4:	f3c3 008f 	ubfx	r0, r3, #2, #16
 800b4b8:	4770      	bx	lr
	...

0800b4bc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4bc:	4b08      	ldr	r3, [pc, #32]	; (800b4e0 <prvResetNextTaskUnblockTime+0x24>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	b13b      	cbz	r3, 800b4d4 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4c4:	4b06      	ldr	r3, [pc, #24]	; (800b4e0 <prvResetNextTaskUnblockTime+0x24>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <prvResetNextTaskUnblockTime+0x28>)
 800b4d0:	601a      	str	r2, [r3, #0]
	}
}
 800b4d2:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800b4d4:	4b03      	ldr	r3, [pc, #12]	; (800b4e4 <prvResetNextTaskUnblockTime+0x28>)
 800b4d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4da:	601a      	str	r2, [r3, #0]
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	20003328 	.word	0x20003328
 800b4e4:	200037d4 	.word	0x200037d4

0800b4e8 <prvInitialiseNewTask>:
{
 800b4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4ec:	4681      	mov	r9, r0
 800b4ee:	460d      	mov	r5, r1
 800b4f0:	4617      	mov	r7, r2
 800b4f2:	469a      	mov	sl, r3
 800b4f4:	9e08      	ldr	r6, [sp, #32]
 800b4f6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800b4fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b4fc:	0092      	lsls	r2, r2, #2
 800b4fe:	21a5      	movs	r1, #165	; 0xa5
 800b500:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b502:	f002 fbda 	bl	800dcba <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b506:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b508:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 800b50c:	3a01      	subs	r2, #1
 800b50e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b512:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800b516:	6467      	str	r7, [r4, #68]	; 0x44
	if( pcName != NULL )
 800b518:	b38d      	cbz	r5, 800b57e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b51a:	2300      	movs	r3, #0
 800b51c:	2b0f      	cmp	r3, #15
 800b51e:	d807      	bhi.n	800b530 <prvInitialiseNewTask+0x48>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b520:	5ce9      	ldrb	r1, [r5, r3]
 800b522:	18e2      	adds	r2, r4, r3
 800b524:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800b528:	5cea      	ldrb	r2, [r5, r3]
 800b52a:	b10a      	cbz	r2, 800b530 <prvInitialiseNewTask+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b52c:	3301      	adds	r3, #1
 800b52e:	e7f5      	b.n	800b51c <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b530:	2300      	movs	r3, #0
 800b532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b536:	2e37      	cmp	r6, #55	; 0x37
 800b538:	d900      	bls.n	800b53c <prvInitialiseNewTask+0x54>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b53a:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800b53c:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800b53e:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800b540:	2500      	movs	r5, #0
 800b542:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b544:	1d20      	adds	r0, r4, #4
 800b546:	f7ff fb02 	bl	800ab4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b54a:	f104 0018 	add.w	r0, r4, #24
 800b54e:	f7ff fafe 	bl	800ab4e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b552:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b554:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800b558:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b55a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b55c:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
 800b55e:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b560:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b564:	4652      	mov	r2, sl
 800b566:	4649      	mov	r1, r9
 800b568:	4638      	mov	r0, r7
 800b56a:	f001 fbd5 	bl	800cd18 <pxPortInitialiseStack>
 800b56e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800b570:	f1b8 0f00 	cmp.w	r8, #0
 800b574:	d001      	beq.n	800b57a <prvInitialiseNewTask+0x92>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b576:	f8c8 4000 	str.w	r4, [r8]
}
 800b57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b57e:	2300      	movs	r3, #0
 800b580:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800b584:	e7d7      	b.n	800b536 <prvInitialiseNewTask+0x4e>
	...

0800b588 <prvInitialiseTaskLists>:
{
 800b588:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b58a:	2400      	movs	r4, #0
 800b58c:	e007      	b.n	800b59e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b58e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800b592:	0093      	lsls	r3, r2, #2
 800b594:	480e      	ldr	r0, [pc, #56]	; (800b5d0 <prvInitialiseTaskLists+0x48>)
 800b596:	4418      	add	r0, r3
 800b598:	f7ff face 	bl	800ab38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b59c:	3401      	adds	r4, #1
 800b59e:	2c37      	cmp	r4, #55	; 0x37
 800b5a0:	d9f5      	bls.n	800b58e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800b5a2:	4d0c      	ldr	r5, [pc, #48]	; (800b5d4 <prvInitialiseTaskLists+0x4c>)
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	f7ff fac7 	bl	800ab38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b5aa:	4c0b      	ldr	r4, [pc, #44]	; (800b5d8 <prvInitialiseTaskLists+0x50>)
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f7ff fac3 	bl	800ab38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b5b2:	480a      	ldr	r0, [pc, #40]	; (800b5dc <prvInitialiseTaskLists+0x54>)
 800b5b4:	f7ff fac0 	bl	800ab38 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800b5b8:	4809      	ldr	r0, [pc, #36]	; (800b5e0 <prvInitialiseTaskLists+0x58>)
 800b5ba:	f7ff fabd 	bl	800ab38 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800b5be:	4809      	ldr	r0, [pc, #36]	; (800b5e4 <prvInitialiseTaskLists+0x5c>)
 800b5c0:	f7ff faba 	bl	800ab38 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800b5c4:	4b08      	ldr	r3, [pc, #32]	; (800b5e8 <prvInitialiseTaskLists+0x60>)
 800b5c6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b5c8:	4b08      	ldr	r3, [pc, #32]	; (800b5ec <prvInitialiseTaskLists+0x64>)
 800b5ca:	601c      	str	r4, [r3, #0]
}
 800b5cc:	bd38      	pop	{r3, r4, r5, pc}
 800b5ce:	bf00      	nop
 800b5d0:	20003330 	.word	0x20003330
 800b5d4:	200037ac 	.word	0x200037ac
 800b5d8:	200037c0 	.word	0x200037c0
 800b5dc:	200037dc 	.word	0x200037dc
 800b5e0:	20003808 	.word	0x20003808
 800b5e4:	200037f4 	.word	0x200037f4
 800b5e8:	20003328 	.word	0x20003328
 800b5ec:	2000332c 	.word	0x2000332c

0800b5f0 <prvAddNewTaskToReadyList>:
{
 800b5f0:	b510      	push	{r4, lr}
 800b5f2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800b5f4:	f001 fbbe 	bl	800cd74 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800b5f8:	4a21      	ldr	r2, [pc, #132]	; (800b680 <prvAddNewTaskToReadyList+0x90>)
 800b5fa:	6813      	ldr	r3, [r2, #0]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b600:	4b20      	ldr	r3, [pc, #128]	; (800b684 <prvAddNewTaskToReadyList+0x94>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	b15b      	cbz	r3, 800b61e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800b606:	4b20      	ldr	r3, [pc, #128]	; (800b688 <prvAddNewTaskToReadyList+0x98>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	b96b      	cbnz	r3, 800b628 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b60c:	4b1d      	ldr	r3, [pc, #116]	; (800b684 <prvAddNewTaskToReadyList+0x94>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b612:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b614:	429a      	cmp	r2, r3
 800b616:	d807      	bhi.n	800b628 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800b618:	4b1a      	ldr	r3, [pc, #104]	; (800b684 <prvAddNewTaskToReadyList+0x94>)
 800b61a:	601c      	str	r4, [r3, #0]
 800b61c:	e004      	b.n	800b628 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800b61e:	4b19      	ldr	r3, [pc, #100]	; (800b684 <prvAddNewTaskToReadyList+0x94>)
 800b620:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b622:	6813      	ldr	r3, [r2, #0]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d027      	beq.n	800b678 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 800b628:	4a18      	ldr	r2, [pc, #96]	; (800b68c <prvAddNewTaskToReadyList+0x9c>)
 800b62a:	6813      	ldr	r3, [r2, #0]
 800b62c:	3301      	adds	r3, #1
 800b62e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b630:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 800b632:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b634:	4a16      	ldr	r2, [pc, #88]	; (800b690 <prvAddNewTaskToReadyList+0xa0>)
 800b636:	6812      	ldr	r2, [r2, #0]
 800b638:	4293      	cmp	r3, r2
 800b63a:	d901      	bls.n	800b640 <prvAddNewTaskToReadyList+0x50>
 800b63c:	4a14      	ldr	r2, [pc, #80]	; (800b690 <prvAddNewTaskToReadyList+0xa0>)
 800b63e:	6013      	str	r3, [r2, #0]
 800b640:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b644:	009a      	lsls	r2, r3, #2
 800b646:	1d21      	adds	r1, r4, #4
 800b648:	4812      	ldr	r0, [pc, #72]	; (800b694 <prvAddNewTaskToReadyList+0xa4>)
 800b64a:	4410      	add	r0, r2
 800b64c:	f7ff fa82 	bl	800ab54 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800b650:	f001 fbb2 	bl	800cdb8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800b654:	4b0c      	ldr	r3, [pc, #48]	; (800b688 <prvAddNewTaskToReadyList+0x98>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	b16b      	cbz	r3, 800b676 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b65a:	4b0a      	ldr	r3, [pc, #40]	; (800b684 <prvAddNewTaskToReadyList+0x94>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b660:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b662:	429a      	cmp	r2, r3
 800b664:	d207      	bcs.n	800b676 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 800b666:	4b0c      	ldr	r3, [pc, #48]	; (800b698 <prvAddNewTaskToReadyList+0xa8>)
 800b668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	f3bf 8f6f 	isb	sy
}
 800b676:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800b678:	f7ff ff86 	bl	800b588 <prvInitialiseTaskLists>
 800b67c:	e7d4      	b.n	800b628 <prvAddNewTaskToReadyList+0x38>
 800b67e:	bf00      	nop
 800b680:	20003794 	.word	0x20003794
 800b684:	20003324 	.word	0x20003324
 800b688:	200037f0 	.word	0x200037f0
 800b68c:	200037a4 	.word	0x200037a4
 800b690:	200037a8 	.word	0x200037a8
 800b694:	20003330 	.word	0x20003330
 800b698:	e000ed04 	.word	0xe000ed04

0800b69c <prvDeleteTCB>:
	{
 800b69c:	b510      	push	{r4, lr}
 800b69e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b6a0:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800b6a4:	b933      	cbnz	r3, 800b6b4 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 800b6a6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800b6a8:	f001 fd9e 	bl	800d1e8 <vPortFree>
				vPortFree( pxTCB );
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f001 fd9b 	bl	800d1e8 <vPortFree>
	}
 800b6b2:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d00a      	beq.n	800b6ce <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d0fa      	beq.n	800b6b2 <prvDeleteTCB+0x16>
 800b6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	e7fe      	b.n	800b6cc <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 800b6ce:	f001 fd8b 	bl	800d1e8 <vPortFree>
 800b6d2:	e7ee      	b.n	800b6b2 <prvDeleteTCB+0x16>

0800b6d4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6d4:	4b0f      	ldr	r3, [pc, #60]	; (800b714 <prvCheckTasksWaitingTermination+0x40>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	b1d3      	cbz	r3, 800b710 <prvCheckTasksWaitingTermination+0x3c>
{
 800b6da:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800b6dc:	f001 fb4a 	bl	800cd74 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6e0:	4b0d      	ldr	r3, [pc, #52]	; (800b718 <prvCheckTasksWaitingTermination+0x44>)
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6e6:	1d20      	adds	r0, r4, #4
 800b6e8:	f7ff fa5a 	bl	800aba0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b6ec:	4a0b      	ldr	r2, [pc, #44]	; (800b71c <prvCheckTasksWaitingTermination+0x48>)
 800b6ee:	6813      	ldr	r3, [r2, #0]
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b6f4:	4a07      	ldr	r2, [pc, #28]	; (800b714 <prvCheckTasksWaitingTermination+0x40>)
 800b6f6:	6813      	ldr	r3, [r2, #0]
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800b6fc:	f001 fb5c 	bl	800cdb8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800b700:	4620      	mov	r0, r4
 800b702:	f7ff ffcb 	bl	800b69c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b706:	4b03      	ldr	r3, [pc, #12]	; (800b714 <prvCheckTasksWaitingTermination+0x40>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1e6      	bne.n	800b6dc <prvCheckTasksWaitingTermination+0x8>
}
 800b70e:	bd10      	pop	{r4, pc}
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	20003798 	.word	0x20003798
 800b718:	20003808 	.word	0x20003808
 800b71c:	20003794 	.word	0x20003794

0800b720 <prvIdleTask>:
{
 800b720:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800b722:	f7ff ffd7 	bl	800b6d4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b726:	4b06      	ldr	r3, [pc, #24]	; (800b740 <prvIdleTask+0x20>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d9f9      	bls.n	800b722 <prvIdleTask+0x2>
				taskYIELD();
 800b72e:	4b05      	ldr	r3, [pc, #20]	; (800b744 <prvIdleTask+0x24>)
 800b730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b734:	601a      	str	r2, [r3, #0]
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	f3bf 8f6f 	isb	sy
 800b73e:	e7f0      	b.n	800b722 <prvIdleTask+0x2>
 800b740:	20003330 	.word	0x20003330
 800b744:	e000ed04 	.word	0xe000ed04

0800b748 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b748:	b570      	push	{r4, r5, r6, lr}
 800b74a:	4604      	mov	r4, r0
 800b74c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b74e:	4b17      	ldr	r3, [pc, #92]	; (800b7ac <prvAddCurrentTaskToDelayedList+0x64>)
 800b750:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b752:	4b17      	ldr	r3, [pc, #92]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0x68>)
 800b754:	6818      	ldr	r0, [r3, #0]
 800b756:	3004      	adds	r0, #4
 800b758:	f7ff fa22 	bl	800aba0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b75c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800b760:	d013      	beq.n	800b78a <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b762:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b764:	4b12      	ldr	r3, [pc, #72]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0x68>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800b76a:	42a5      	cmp	r5, r4
 800b76c:	d816      	bhi.n	800b79c <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b76e:	4b11      	ldr	r3, [pc, #68]	; (800b7b4 <prvAddCurrentTaskToDelayedList+0x6c>)
 800b770:	6818      	ldr	r0, [r3, #0]
 800b772:	4b0f      	ldr	r3, [pc, #60]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0x68>)
 800b774:	6819      	ldr	r1, [r3, #0]
 800b776:	3104      	adds	r1, #4
 800b778:	f7ff f9f8 	bl	800ab6c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800b77c:	4b0e      	ldr	r3, [pc, #56]	; (800b7b8 <prvAddCurrentTaskToDelayedList+0x70>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	42a3      	cmp	r3, r4
 800b782:	d912      	bls.n	800b7aa <prvAddCurrentTaskToDelayedList+0x62>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800b784:	4b0c      	ldr	r3, [pc, #48]	; (800b7b8 <prvAddCurrentTaskToDelayedList+0x70>)
 800b786:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b788:	e00f      	b.n	800b7aa <prvAddCurrentTaskToDelayedList+0x62>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b78a:	2e00      	cmp	r6, #0
 800b78c:	d0e9      	beq.n	800b762 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b78e:	4b08      	ldr	r3, [pc, #32]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0x68>)
 800b790:	6819      	ldr	r1, [r3, #0]
 800b792:	3104      	adds	r1, #4
 800b794:	4809      	ldr	r0, [pc, #36]	; (800b7bc <prvAddCurrentTaskToDelayedList+0x74>)
 800b796:	f7ff f9dd 	bl	800ab54 <vListInsertEnd>
 800b79a:	e006      	b.n	800b7aa <prvAddCurrentTaskToDelayedList+0x62>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b79c:	4b08      	ldr	r3, [pc, #32]	; (800b7c0 <prvAddCurrentTaskToDelayedList+0x78>)
 800b79e:	6818      	ldr	r0, [r3, #0]
 800b7a0:	4b03      	ldr	r3, [pc, #12]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0x68>)
 800b7a2:	6819      	ldr	r1, [r3, #0]
 800b7a4:	3104      	adds	r1, #4
 800b7a6:	f7ff f9e1 	bl	800ab6c <vListInsert>
}
 800b7aa:	bd70      	pop	{r4, r5, r6, pc}
 800b7ac:	2000381c 	.word	0x2000381c
 800b7b0:	20003324 	.word	0x20003324
 800b7b4:	20003328 	.word	0x20003328
 800b7b8:	200037d4 	.word	0x200037d4
 800b7bc:	200037f4 	.word	0x200037f4
 800b7c0:	2000332c 	.word	0x2000332c

0800b7c4 <prvWriteNameToBuffer>:
	{
 800b7c4:	b510      	push	{r4, lr}
 800b7c6:	4604      	mov	r4, r0
		strcpy( pcBuffer, pcTaskName );
 800b7c8:	f002 fb65 	bl	800de96 <strcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f7f4 fd07 	bl	80001e0 <strlen>
 800b7d2:	e002      	b.n	800b7da <prvWriteNameToBuffer+0x16>
			pcBuffer[ x ] = ' ';
 800b7d4:	2320      	movs	r3, #32
 800b7d6:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800b7d8:	3001      	adds	r0, #1
 800b7da:	280e      	cmp	r0, #14
 800b7dc:	d9fa      	bls.n	800b7d4 <prvWriteNameToBuffer+0x10>
		pcBuffer[ x ] = ( char ) 0x00;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	5423      	strb	r3, [r4, r0]
	}
 800b7e2:	4420      	add	r0, r4
 800b7e4:	bd10      	pop	{r4, pc}

0800b7e6 <xTaskCreateStatic>:
	{
 800b7e6:	b570      	push	{r4, r5, r6, lr}
 800b7e8:	b086      	sub	sp, #24
 800b7ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b7ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800b7ee:	b945      	cbnz	r5, 800b802 <xTaskCreateStatic+0x1c>
 800b7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f4:	f383 8811 	msr	BASEPRI, r3
 800b7f8:	f3bf 8f6f 	isb	sy
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	e7fe      	b.n	800b800 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800b802:	b944      	cbnz	r4, 800b816 <xTaskCreateStatic+0x30>
 800b804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	e7fe      	b.n	800b814 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800b816:	2664      	movs	r6, #100	; 0x64
 800b818:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b81a:	9e04      	ldr	r6, [sp, #16]
 800b81c:	2e64      	cmp	r6, #100	; 0x64
 800b81e:	d008      	beq.n	800b832 <xTaskCreateStatic+0x4c>
 800b820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b824:	f383 8811 	msr	BASEPRI, r3
 800b828:	f3bf 8f6f 	isb	sy
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	e7fe      	b.n	800b830 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b832:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b834:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b836:	2502      	movs	r5, #2
 800b838:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b83c:	2500      	movs	r5, #0
 800b83e:	9503      	str	r5, [sp, #12]
 800b840:	9402      	str	r4, [sp, #8]
 800b842:	ad05      	add	r5, sp, #20
 800b844:	9501      	str	r5, [sp, #4]
 800b846:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b848:	9500      	str	r5, [sp, #0]
 800b84a:	f7ff fe4d 	bl	800b4e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b84e:	4620      	mov	r0, r4
 800b850:	f7ff fece 	bl	800b5f0 <prvAddNewTaskToReadyList>
	}
 800b854:	9805      	ldr	r0, [sp, #20]
 800b856:	b006      	add	sp, #24
 800b858:	bd70      	pop	{r4, r5, r6, pc}

0800b85a <xTaskCreate>:
	{
 800b85a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b85e:	b085      	sub	sp, #20
 800b860:	4607      	mov	r7, r0
 800b862:	4688      	mov	r8, r1
 800b864:	4615      	mov	r5, r2
 800b866:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b868:	0090      	lsls	r0, r2, #2
 800b86a:	f001 fc39 	bl	800d0e0 <pvPortMalloc>
			if( pxStack != NULL )
 800b86e:	b308      	cbz	r0, 800b8b4 <xTaskCreate+0x5a>
 800b870:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b872:	2064      	movs	r0, #100	; 0x64
 800b874:	f001 fc34 	bl	800d0e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800b878:	4604      	mov	r4, r0
 800b87a:	b1b8      	cbz	r0, 800b8ac <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 800b87c:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800b87e:	b1e4      	cbz	r4, 800b8ba <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b880:	2300      	movs	r3, #0
 800b882:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b886:	9303      	str	r3, [sp, #12]
 800b888:	9402      	str	r4, [sp, #8]
 800b88a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b88c:	9301      	str	r3, [sp, #4]
 800b88e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	464b      	mov	r3, r9
 800b894:	462a      	mov	r2, r5
 800b896:	4641      	mov	r1, r8
 800b898:	4638      	mov	r0, r7
 800b89a:	f7ff fe25 	bl	800b4e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f7ff fea6 	bl	800b5f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b8a4:	2001      	movs	r0, #1
	}
 800b8a6:	b005      	add	sp, #20
 800b8a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	f001 fc9b 	bl	800d1e8 <vPortFree>
 800b8b2:	e7e4      	b.n	800b87e <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b8b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8b8:	e7f5      	b.n	800b8a6 <xTaskCreate+0x4c>
 800b8ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800b8be:	e7f2      	b.n	800b8a6 <xTaskCreate+0x4c>

0800b8c0 <eTaskGetState>:
	{
 800b8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 800b8c2:	b1d0      	cbz	r0, 800b8fa <eTaskGetState+0x3a>
 800b8c4:	4604      	mov	r4, r0
		if( pxTCB == pxCurrentTCB )
 800b8c6:	4b1d      	ldr	r3, [pc, #116]	; (800b93c <eTaskGetState+0x7c>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4283      	cmp	r3, r0
 800b8cc:	d029      	beq.n	800b922 <eTaskGetState+0x62>
			taskENTER_CRITICAL();
 800b8ce:	f001 fa51 	bl	800cd74 <vPortEnterCritical>
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800b8d2:	6965      	ldr	r5, [r4, #20]
				pxDelayedList = pxDelayedTaskList;
 800b8d4:	4b1a      	ldr	r3, [pc, #104]	; (800b940 <eTaskGetState+0x80>)
 800b8d6:	681f      	ldr	r7, [r3, #0]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800b8d8:	4b1a      	ldr	r3, [pc, #104]	; (800b944 <eTaskGetState+0x84>)
 800b8da:	681e      	ldr	r6, [r3, #0]
			taskEXIT_CRITICAL();
 800b8dc:	f001 fa6c 	bl	800cdb8 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800b8e0:	42bd      	cmp	r5, r7
 800b8e2:	d020      	beq.n	800b926 <eTaskGetState+0x66>
 800b8e4:	42b5      	cmp	r5, r6
 800b8e6:	d020      	beq.n	800b92a <eTaskGetState+0x6a>
				else if( pxStateList == &xSuspendedTaskList )
 800b8e8:	4b17      	ldr	r3, [pc, #92]	; (800b948 <eTaskGetState+0x88>)
 800b8ea:	429d      	cmp	r5, r3
 800b8ec:	d00e      	beq.n	800b90c <eTaskGetState+0x4c>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800b8ee:	4b17      	ldr	r3, [pc, #92]	; (800b94c <eTaskGetState+0x8c>)
 800b8f0:	429d      	cmp	r5, r3
 800b8f2:	d020      	beq.n	800b936 <eTaskGetState+0x76>
 800b8f4:	b19d      	cbz	r5, 800b91e <eTaskGetState+0x5e>
				eReturn = eReady;
 800b8f6:	2001      	movs	r0, #1
 800b8f8:	e014      	b.n	800b924 <eTaskGetState+0x64>
 800b8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	e7fe      	b.n	800b90a <eTaskGetState+0x4a>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800b90c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b90e:	b973      	cbnz	r3, 800b92e <eTaskGetState+0x6e>
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b910:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800b914:	b2db      	uxtb	r3, r3
 800b916:	2b01      	cmp	r3, #1
 800b918:	d10b      	bne.n	800b932 <eTaskGetState+0x72>
								eReturn = eBlocked;
 800b91a:	2002      	movs	r0, #2
 800b91c:	e002      	b.n	800b924 <eTaskGetState+0x64>
					eReturn = eDeleted;
 800b91e:	2004      	movs	r0, #4
 800b920:	e000      	b.n	800b924 <eTaskGetState+0x64>
			eReturn = eRunning;
 800b922:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				eReturn = eBlocked;
 800b926:	2002      	movs	r0, #2
 800b928:	e7fc      	b.n	800b924 <eTaskGetState+0x64>
 800b92a:	2002      	movs	r0, #2
 800b92c:	e7fa      	b.n	800b924 <eTaskGetState+0x64>
						eReturn = eBlocked;
 800b92e:	2002      	movs	r0, #2
 800b930:	e7f8      	b.n	800b924 <eTaskGetState+0x64>
								eReturn = eSuspended;
 800b932:	2003      	movs	r0, #3
 800b934:	e7f6      	b.n	800b924 <eTaskGetState+0x64>
					eReturn = eDeleted;
 800b936:	2004      	movs	r0, #4
 800b938:	e7f4      	b.n	800b924 <eTaskGetState+0x64>
 800b93a:	bf00      	nop
 800b93c:	20003324 	.word	0x20003324
 800b940:	20003328 	.word	0x20003328
 800b944:	2000332c 	.word	0x2000332c
 800b948:	200037f4 	.word	0x200037f4
 800b94c:	20003808 	.word	0x20003808

0800b950 <vTaskStartScheduler>:
{
 800b950:	b510      	push	{r4, lr}
 800b952:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b954:	2400      	movs	r4, #0
 800b956:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b958:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b95a:	aa07      	add	r2, sp, #28
 800b95c:	a906      	add	r1, sp, #24
 800b95e:	a805      	add	r0, sp, #20
 800b960:	f7ff f8d2 	bl	800ab08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b964:	9b05      	ldr	r3, [sp, #20]
 800b966:	9302      	str	r3, [sp, #8]
 800b968:	9b06      	ldr	r3, [sp, #24]
 800b96a:	9301      	str	r3, [sp, #4]
 800b96c:	9400      	str	r4, [sp, #0]
 800b96e:	4623      	mov	r3, r4
 800b970:	9a07      	ldr	r2, [sp, #28]
 800b972:	4918      	ldr	r1, [pc, #96]	; (800b9d4 <vTaskStartScheduler+0x84>)
 800b974:	4818      	ldr	r0, [pc, #96]	; (800b9d8 <vTaskStartScheduler+0x88>)
 800b976:	f7ff ff36 	bl	800b7e6 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800b97a:	b140      	cbz	r0, 800b98e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 800b97c:	f000 ff82 	bl	800c884 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800b980:	2801      	cmp	r0, #1
 800b982:	d006      	beq.n	800b992 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b984:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b988:	d01a      	beq.n	800b9c0 <vTaskStartScheduler+0x70>
}
 800b98a:	b008      	add	sp, #32
 800b98c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800b98e:	2000      	movs	r0, #0
 800b990:	e7f6      	b.n	800b980 <vTaskStartScheduler+0x30>
 800b992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b996:	f383 8811 	msr	BASEPRI, r3
 800b99a:	f3bf 8f6f 	isb	sy
 800b99e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9a2:	4b0e      	ldr	r3, [pc, #56]	; (800b9dc <vTaskStartScheduler+0x8c>)
 800b9a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b9aa:	4b0d      	ldr	r3, [pc, #52]	; (800b9e0 <vTaskStartScheduler+0x90>)
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	4a0c      	ldr	r2, [pc, #48]	; (800b9e4 <vTaskStartScheduler+0x94>)
 800b9b4:	6013      	str	r3, [r2, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b9b6:	4a0c      	ldr	r2, [pc, #48]	; (800b9e8 <vTaskStartScheduler+0x98>)
 800b9b8:	6013      	str	r3, [r2, #0]
		if( xPortStartScheduler() != pdFALSE )
 800b9ba:	f001 fa7d 	bl	800ceb8 <xPortStartScheduler>
 800b9be:	e7e4      	b.n	800b98a <vTaskStartScheduler+0x3a>
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	e7fe      	b.n	800b9d0 <vTaskStartScheduler+0x80>
 800b9d2:	bf00      	nop
 800b9d4:	0800f768 	.word	0x0800f768
 800b9d8:	0800b721 	.word	0x0800b721
 800b9dc:	200037d4 	.word	0x200037d4
 800b9e0:	200037f0 	.word	0x200037f0
 800b9e4:	2000381c 	.word	0x2000381c
 800b9e8:	20004230 	.word	0x20004230

0800b9ec <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800b9ec:	4a02      	ldr	r2, [pc, #8]	; (800b9f8 <vTaskSuspendAll+0xc>)
 800b9ee:	6813      	ldr	r3, [r2, #0]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	6013      	str	r3, [r2, #0]
}
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	200037a0 	.word	0x200037a0

0800b9fc <xTaskGetTickCount>:
		xTicks = xTickCount;
 800b9fc:	4b01      	ldr	r3, [pc, #4]	; (800ba04 <xTaskGetTickCount+0x8>)
 800b9fe:	6818      	ldr	r0, [r3, #0]
}
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	2000381c 	.word	0x2000381c

0800ba08 <xTaskIncrementTick>:
{
 800ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba0a:	4b3a      	ldr	r3, [pc, #232]	; (800baf4 <xTaskIncrementTick+0xec>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d164      	bne.n	800badc <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba12:	4b39      	ldr	r3, [pc, #228]	; (800baf8 <xTaskIncrementTick+0xf0>)
 800ba14:	681d      	ldr	r5, [r3, #0]
 800ba16:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800ba18:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba1a:	b9c5      	cbnz	r5, 800ba4e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800ba1c:	4b37      	ldr	r3, [pc, #220]	; (800bafc <xTaskIncrementTick+0xf4>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	b143      	cbz	r3, 800ba36 <xTaskIncrementTick+0x2e>
 800ba24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba28:	f383 8811 	msr	BASEPRI, r3
 800ba2c:	f3bf 8f6f 	isb	sy
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	e7fe      	b.n	800ba34 <xTaskIncrementTick+0x2c>
 800ba36:	4a31      	ldr	r2, [pc, #196]	; (800bafc <xTaskIncrementTick+0xf4>)
 800ba38:	6811      	ldr	r1, [r2, #0]
 800ba3a:	4b31      	ldr	r3, [pc, #196]	; (800bb00 <xTaskIncrementTick+0xf8>)
 800ba3c:	6818      	ldr	r0, [r3, #0]
 800ba3e:	6010      	str	r0, [r2, #0]
 800ba40:	6019      	str	r1, [r3, #0]
 800ba42:	4a30      	ldr	r2, [pc, #192]	; (800bb04 <xTaskIncrementTick+0xfc>)
 800ba44:	6813      	ldr	r3, [r2, #0]
 800ba46:	3301      	adds	r3, #1
 800ba48:	6013      	str	r3, [r2, #0]
 800ba4a:	f7ff fd37 	bl	800b4bc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba4e:	4b2e      	ldr	r3, [pc, #184]	; (800bb08 <xTaskIncrementTick+0x100>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	42ab      	cmp	r3, r5
 800ba54:	d938      	bls.n	800bac8 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 800ba56:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba58:	4b2c      	ldr	r3, [pc, #176]	; (800bb0c <xTaskIncrementTick+0x104>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ba62:	009a      	lsls	r2, r3, #2
 800ba64:	4b2a      	ldr	r3, [pc, #168]	; (800bb10 <xTaskIncrementTick+0x108>)
 800ba66:	589b      	ldr	r3, [r3, r2]
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d93c      	bls.n	800bae6 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 800ba6c:	2401      	movs	r4, #1
 800ba6e:	e03a      	b.n	800bae6 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 800ba70:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba72:	4b22      	ldr	r3, [pc, #136]	; (800bafc <xTaskIncrementTick+0xf4>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	b343      	cbz	r3, 800bacc <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba7a:	4b20      	ldr	r3, [pc, #128]	; (800bafc <xTaskIncrementTick+0xf4>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba82:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800ba84:	429d      	cmp	r5, r3
 800ba86:	d326      	bcc.n	800bad6 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba88:	1d37      	adds	r7, r6, #4
 800ba8a:	4638      	mov	r0, r7
 800ba8c:	f7ff f888 	bl	800aba0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba90:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800ba92:	b11b      	cbz	r3, 800ba9c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba94:	f106 0018 	add.w	r0, r6, #24
 800ba98:	f7ff f882 	bl	800aba0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba9c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800ba9e:	4a1d      	ldr	r2, [pc, #116]	; (800bb14 <xTaskIncrementTick+0x10c>)
 800baa0:	6812      	ldr	r2, [r2, #0]
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d901      	bls.n	800baaa <xTaskIncrementTick+0xa2>
 800baa6:	4a1b      	ldr	r2, [pc, #108]	; (800bb14 <xTaskIncrementTick+0x10c>)
 800baa8:	6013      	str	r3, [r2, #0]
 800baaa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800baae:	009a      	lsls	r2, r3, #2
 800bab0:	4639      	mov	r1, r7
 800bab2:	4817      	ldr	r0, [pc, #92]	; (800bb10 <xTaskIncrementTick+0x108>)
 800bab4:	4410      	add	r0, r2
 800bab6:	f7ff f84d 	bl	800ab54 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800baba:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800babc:	4b13      	ldr	r3, [pc, #76]	; (800bb0c <xTaskIncrementTick+0x104>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d2d4      	bcs.n	800ba70 <xTaskIncrementTick+0x68>
 800bac6:	e7d4      	b.n	800ba72 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 800bac8:	2400      	movs	r4, #0
 800baca:	e7d2      	b.n	800ba72 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bacc:	4b0e      	ldr	r3, [pc, #56]	; (800bb08 <xTaskIncrementTick+0x100>)
 800bace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bad2:	601a      	str	r2, [r3, #0]
					break;
 800bad4:	e7c0      	b.n	800ba58 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800bad6:	4a0c      	ldr	r2, [pc, #48]	; (800bb08 <xTaskIncrementTick+0x100>)
 800bad8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bada:	e7bd      	b.n	800ba58 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800badc:	4a0e      	ldr	r2, [pc, #56]	; (800bb18 <xTaskIncrementTick+0x110>)
 800bade:	6813      	ldr	r3, [r2, #0]
 800bae0:	3301      	adds	r3, #1
 800bae2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800bae4:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800bae6:	4b0d      	ldr	r3, [pc, #52]	; (800bb1c <xTaskIncrementTick+0x114>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	b103      	cbz	r3, 800baee <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800baec:	2401      	movs	r4, #1
}
 800baee:	4620      	mov	r0, r4
 800baf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baf2:	bf00      	nop
 800baf4:	200037a0 	.word	0x200037a0
 800baf8:	2000381c 	.word	0x2000381c
 800bafc:	20003328 	.word	0x20003328
 800bb00:	2000332c 	.word	0x2000332c
 800bb04:	200037d8 	.word	0x200037d8
 800bb08:	200037d4 	.word	0x200037d4
 800bb0c:	20003324 	.word	0x20003324
 800bb10:	20003330 	.word	0x20003330
 800bb14:	200037a8 	.word	0x200037a8
 800bb18:	2000379c 	.word	0x2000379c
 800bb1c:	20003820 	.word	0x20003820

0800bb20 <xTaskResumeAll>:
{
 800bb20:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800bb22:	4b33      	ldr	r3, [pc, #204]	; (800bbf0 <xTaskResumeAll+0xd0>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	b943      	cbnz	r3, 800bb3a <xTaskResumeAll+0x1a>
 800bb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	e7fe      	b.n	800bb38 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800bb3a:	f001 f91b 	bl	800cd74 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800bb3e:	4b2c      	ldr	r3, [pc, #176]	; (800bbf0 <xTaskResumeAll+0xd0>)
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	3a01      	subs	r2, #1
 800bb44:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d14d      	bne.n	800bbe8 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb4c:	4b29      	ldr	r3, [pc, #164]	; (800bbf4 <xTaskResumeAll+0xd4>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	b923      	cbnz	r3, 800bb5c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 800bb52:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800bb54:	f001 f930 	bl	800cdb8 <vPortExitCritical>
}
 800bb58:	4620      	mov	r0, r4
 800bb5a:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 800bb5c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb5e:	4b26      	ldr	r3, [pc, #152]	; (800bbf8 <xTaskResumeAll+0xd8>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	b31b      	cbz	r3, 800bbac <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb64:	4b24      	ldr	r3, [pc, #144]	; (800bbf8 <xTaskResumeAll+0xd8>)
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb6a:	f104 0018 	add.w	r0, r4, #24
 800bb6e:	f7ff f817 	bl	800aba0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb72:	1d25      	adds	r5, r4, #4
 800bb74:	4628      	mov	r0, r5
 800bb76:	f7ff f813 	bl	800aba0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb7c:	4a1f      	ldr	r2, [pc, #124]	; (800bbfc <xTaskResumeAll+0xdc>)
 800bb7e:	6812      	ldr	r2, [r2, #0]
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d901      	bls.n	800bb88 <xTaskResumeAll+0x68>
 800bb84:	4a1d      	ldr	r2, [pc, #116]	; (800bbfc <xTaskResumeAll+0xdc>)
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bb8c:	009a      	lsls	r2, r3, #2
 800bb8e:	4629      	mov	r1, r5
 800bb90:	481b      	ldr	r0, [pc, #108]	; (800bc00 <xTaskResumeAll+0xe0>)
 800bb92:	4410      	add	r0, r2
 800bb94:	f7fe ffde 	bl	800ab54 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bb9a:	4b1a      	ldr	r3, [pc, #104]	; (800bc04 <xTaskResumeAll+0xe4>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d3dc      	bcc.n	800bb5e <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 800bba4:	4b18      	ldr	r3, [pc, #96]	; (800bc08 <xTaskResumeAll+0xe8>)
 800bba6:	2201      	movs	r2, #1
 800bba8:	601a      	str	r2, [r3, #0]
 800bbaa:	e7d8      	b.n	800bb5e <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 800bbac:	b10c      	cbz	r4, 800bbb2 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800bbae:	f7ff fc85 	bl	800b4bc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bbb2:	4b16      	ldr	r3, [pc, #88]	; (800bc0c <xTaskResumeAll+0xec>)
 800bbb4:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bbb6:	b154      	cbz	r4, 800bbce <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 800bbb8:	f7ff ff26 	bl	800ba08 <xTaskIncrementTick>
 800bbbc:	b110      	cbz	r0, 800bbc4 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800bbbe:	4b12      	ldr	r3, [pc, #72]	; (800bc08 <xTaskResumeAll+0xe8>)
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bbc4:	3c01      	subs	r4, #1
 800bbc6:	d1f7      	bne.n	800bbb8 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 800bbc8:	4b10      	ldr	r3, [pc, #64]	; (800bc0c <xTaskResumeAll+0xec>)
 800bbca:	2200      	movs	r2, #0
 800bbcc:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800bbce:	4b0e      	ldr	r3, [pc, #56]	; (800bc08 <xTaskResumeAll+0xe8>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	b15b      	cbz	r3, 800bbec <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 800bbd4:	4b0e      	ldr	r3, [pc, #56]	; (800bc10 <xTaskResumeAll+0xf0>)
 800bbd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbda:	601a      	str	r2, [r3, #0]
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800bbe4:	2401      	movs	r4, #1
 800bbe6:	e7b5      	b.n	800bb54 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800bbe8:	2400      	movs	r4, #0
 800bbea:	e7b3      	b.n	800bb54 <xTaskResumeAll+0x34>
 800bbec:	2400      	movs	r4, #0
 800bbee:	e7b1      	b.n	800bb54 <xTaskResumeAll+0x34>
 800bbf0:	200037a0 	.word	0x200037a0
 800bbf4:	20003794 	.word	0x20003794
 800bbf8:	200037dc 	.word	0x200037dc
 800bbfc:	200037a8 	.word	0x200037a8
 800bc00:	20003330 	.word	0x20003330
 800bc04:	20003324 	.word	0x20003324
 800bc08:	20003820 	.word	0x20003820
 800bc0c:	2000379c 	.word	0x2000379c
 800bc10:	e000ed04 	.word	0xe000ed04

0800bc14 <vTaskDelayUntil>:
	{
 800bc14:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 800bc16:	b150      	cbz	r0, 800bc2e <vTaskDelayUntil+0x1a>
 800bc18:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 800bc1a:	b989      	cbnz	r1, 800bc40 <vTaskDelayUntil+0x2c>
 800bc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	e7fe      	b.n	800bc2c <vTaskDelayUntil+0x18>
 800bc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc32:	f383 8811 	msr	BASEPRI, r3
 800bc36:	f3bf 8f6f 	isb	sy
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	e7fe      	b.n	800bc3e <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
 800bc40:	4b1a      	ldr	r3, [pc, #104]	; (800bcac <vTaskDelayUntil+0x98>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	b143      	cbz	r3, 800bc58 <vTaskDelayUntil+0x44>
 800bc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4a:	f383 8811 	msr	BASEPRI, r3
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	e7fe      	b.n	800bc56 <vTaskDelayUntil+0x42>
 800bc58:	460c      	mov	r4, r1
		vTaskSuspendAll();
 800bc5a:	f7ff fec7 	bl	800b9ec <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 800bc5e:	4b14      	ldr	r3, [pc, #80]	; (800bcb0 <vTaskDelayUntil+0x9c>)
 800bc60:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800bc62:	682a      	ldr	r2, [r5, #0]
 800bc64:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
 800bc66:	4282      	cmp	r2, r0
 800bc68:	d918      	bls.n	800bc9c <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800bc6a:	42a2      	cmp	r2, r4
 800bc6c:	d80c      	bhi.n	800bc88 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
 800bc6e:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
 800bc70:	f7ff ff56 	bl	800bb20 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800bc74:	b938      	cbnz	r0, 800bc86 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
 800bc76:	4b0f      	ldr	r3, [pc, #60]	; (800bcb4 <vTaskDelayUntil+0xa0>)
 800bc78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc7c:	601a      	str	r2, [r3, #0]
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	f3bf 8f6f 	isb	sy
	}
 800bc86:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800bc88:	42a0      	cmp	r0, r4
 800bc8a:	d301      	bcc.n	800bc90 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 800bc8c:	602c      	str	r4, [r5, #0]
 800bc8e:	e7ef      	b.n	800bc70 <vTaskDelayUntil+0x5c>
 800bc90:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800bc92:	2100      	movs	r1, #0
 800bc94:	1a20      	subs	r0, r4, r0
 800bc96:	f7ff fd57 	bl	800b748 <prvAddCurrentTaskToDelayedList>
 800bc9a:	e7e9      	b.n	800bc70 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800bc9c:	42a2      	cmp	r2, r4
 800bc9e:	d801      	bhi.n	800bca4 <vTaskDelayUntil+0x90>
 800bca0:	42a0      	cmp	r0, r4
 800bca2:	d201      	bcs.n	800bca8 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
 800bca4:	602c      	str	r4, [r5, #0]
 800bca6:	e7f4      	b.n	800bc92 <vTaskDelayUntil+0x7e>
 800bca8:	602c      	str	r4, [r5, #0]
 800bcaa:	e7e1      	b.n	800bc70 <vTaskDelayUntil+0x5c>
 800bcac:	200037a0 	.word	0x200037a0
 800bcb0:	2000381c 	.word	0x2000381c
 800bcb4:	e000ed04 	.word	0xe000ed04

0800bcb8 <vTaskDelay>:
	{
 800bcb8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bcba:	b1a8      	cbz	r0, 800bce8 <vTaskDelay+0x30>
 800bcbc:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800bcbe:	4b0f      	ldr	r3, [pc, #60]	; (800bcfc <vTaskDelay+0x44>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	b143      	cbz	r3, 800bcd6 <vTaskDelay+0x1e>
 800bcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc8:	f383 8811 	msr	BASEPRI, r3
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	e7fe      	b.n	800bcd4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800bcd6:	f7ff fe89 	bl	800b9ec <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bcda:	2100      	movs	r1, #0
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f7ff fd33 	bl	800b748 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800bce2:	f7ff ff1d 	bl	800bb20 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800bce6:	b938      	cbnz	r0, 800bcf8 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 800bce8:	4b05      	ldr	r3, [pc, #20]	; (800bd00 <vTaskDelay+0x48>)
 800bcea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcee:	601a      	str	r2, [r3, #0]
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	f3bf 8f6f 	isb	sy
	}
 800bcf8:	bd10      	pop	{r4, pc}
 800bcfa:	bf00      	nop
 800bcfc:	200037a0 	.word	0x200037a0
 800bd00:	e000ed04 	.word	0xe000ed04

0800bd04 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd04:	4b27      	ldr	r3, [pc, #156]	; (800bda4 <vTaskSwitchContext+0xa0>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	b11b      	cbz	r3, 800bd12 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800bd0a:	4b27      	ldr	r3, [pc, #156]	; (800bda8 <vTaskSwitchContext+0xa4>)
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	601a      	str	r2, [r3, #0]
 800bd10:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800bd12:	4b25      	ldr	r3, [pc, #148]	; (800bda8 <vTaskSwitchContext+0xa4>)
 800bd14:	2200      	movs	r2, #0
 800bd16:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800bd18:	4b24      	ldr	r3, [pc, #144]	; (800bdac <vTaskSwitchContext+0xa8>)
 800bd1a:	681a      	ldr	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800bd1c:	4b24      	ldr	r3, [pc, #144]	; (800bdb0 <vTaskSwitchContext+0xac>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d905      	bls.n	800bd30 <vTaskSwitchContext+0x2c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800bd24:	4923      	ldr	r1, [pc, #140]	; (800bdb4 <vTaskSwitchContext+0xb0>)
 800bd26:	6808      	ldr	r0, [r1, #0]
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800bd2c:	440b      	add	r3, r1
 800bd2e:	6583      	str	r3, [r0, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800bd30:	4b1f      	ldr	r3, [pc, #124]	; (800bdb0 <vTaskSwitchContext+0xac>)
 800bd32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd34:	4b20      	ldr	r3, [pc, #128]	; (800bdb8 <vTaskSwitchContext+0xb4>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800bd3c:	008a      	lsls	r2, r1, #2
 800bd3e:	491f      	ldr	r1, [pc, #124]	; (800bdbc <vTaskSwitchContext+0xb8>)
 800bd40:	588a      	ldr	r2, [r1, r2]
 800bd42:	b95a      	cbnz	r2, 800bd5c <vTaskSwitchContext+0x58>
 800bd44:	b10b      	cbz	r3, 800bd4a <vTaskSwitchContext+0x46>
 800bd46:	3b01      	subs	r3, #1
 800bd48:	e7f6      	b.n	800bd38 <vTaskSwitchContext+0x34>
 800bd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4e:	f383 8811 	msr	BASEPRI, r3
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	f3bf 8f4f 	dsb	sy
 800bd5a:	e7fe      	b.n	800bd5a <vTaskSwitchContext+0x56>
{
 800bd5c:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd5e:	4608      	mov	r0, r1
 800bd60:	009a      	lsls	r2, r3, #2
 800bd62:	18d4      	adds	r4, r2, r3
 800bd64:	00a1      	lsls	r1, r4, #2
 800bd66:	4401      	add	r1, r0
 800bd68:	684c      	ldr	r4, [r1, #4]
 800bd6a:	6864      	ldr	r4, [r4, #4]
 800bd6c:	604c      	str	r4, [r1, #4]
 800bd6e:	441a      	add	r2, r3
 800bd70:	0091      	lsls	r1, r2, #2
 800bd72:	3108      	adds	r1, #8
 800bd74:	4408      	add	r0, r1
 800bd76:	4284      	cmp	r4, r0
 800bd78:	d00d      	beq.n	800bd96 <vTaskSwitchContext+0x92>
 800bd7a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800bd7e:	0091      	lsls	r1, r2, #2
 800bd80:	4a0e      	ldr	r2, [pc, #56]	; (800bdbc <vTaskSwitchContext+0xb8>)
 800bd82:	440a      	add	r2, r1
 800bd84:	6852      	ldr	r2, [r2, #4]
 800bd86:	68d1      	ldr	r1, [r2, #12]
 800bd88:	4a0a      	ldr	r2, [pc, #40]	; (800bdb4 <vTaskSwitchContext+0xb0>)
 800bd8a:	6011      	str	r1, [r2, #0]
 800bd8c:	4a0a      	ldr	r2, [pc, #40]	; (800bdb8 <vTaskSwitchContext+0xb4>)
 800bd8e:	6013      	str	r3, [r2, #0]
}
 800bd90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd94:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd96:	6861      	ldr	r1, [r4, #4]
 800bd98:	4808      	ldr	r0, [pc, #32]	; (800bdbc <vTaskSwitchContext+0xb8>)
 800bd9a:	2214      	movs	r2, #20
 800bd9c:	fb02 0203 	mla	r2, r2, r3, r0
 800bda0:	6051      	str	r1, [r2, #4]
 800bda2:	e7ea      	b.n	800bd7a <vTaskSwitchContext+0x76>
 800bda4:	200037a0 	.word	0x200037a0
 800bda8:	20003820 	.word	0x20003820
 800bdac:	20004230 	.word	0x20004230
 800bdb0:	20003790 	.word	0x20003790
 800bdb4:	20003324 	.word	0x20003324
 800bdb8:	200037a8 	.word	0x200037a8
 800bdbc:	20003330 	.word	0x20003330

0800bdc0 <vTaskSuspend>:
	{
 800bdc0:	b538      	push	{r3, r4, r5, lr}
 800bdc2:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 800bdc4:	f000 ffd6 	bl	800cd74 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800bdc8:	b1e4      	cbz	r4, 800be04 <vTaskSuspend+0x44>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdca:	1d25      	adds	r5, r4, #4
 800bdcc:	4628      	mov	r0, r5
 800bdce:	f7fe fee7 	bl	800aba0 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bdd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bdd4:	b11b      	cbz	r3, 800bdde <vTaskSuspend+0x1e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdd6:	f104 0018 	add.w	r0, r4, #24
 800bdda:	f7fe fee1 	bl	800aba0 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800bdde:	4629      	mov	r1, r5
 800bde0:	4822      	ldr	r0, [pc, #136]	; (800be6c <vTaskSuspend+0xac>)
 800bde2:	f7fe feb7 	bl	800ab54 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800bde6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d00c      	beq.n	800be0a <vTaskSuspend+0x4a>
		taskEXIT_CRITICAL();
 800bdf0:	f000 ffe2 	bl	800cdb8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800bdf4:	4b1e      	ldr	r3, [pc, #120]	; (800be70 <vTaskSuspend+0xb0>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	b95b      	cbnz	r3, 800be12 <vTaskSuspend+0x52>
		if( pxTCB == pxCurrentTCB )
 800bdfa:	4b1e      	ldr	r3, [pc, #120]	; (800be74 <vTaskSuspend+0xb4>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	42a3      	cmp	r3, r4
 800be00:	d00e      	beq.n	800be20 <vTaskSuspend+0x60>
	}
 800be02:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800be04:	4b1b      	ldr	r3, [pc, #108]	; (800be74 <vTaskSuspend+0xb4>)
 800be06:	681c      	ldr	r4, [r3, #0]
 800be08:	e7df      	b.n	800bdca <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be0a:	2300      	movs	r3, #0
 800be0c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800be10:	e7ee      	b.n	800bdf0 <vTaskSuspend+0x30>
			taskENTER_CRITICAL();
 800be12:	f000 ffaf 	bl	800cd74 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 800be16:	f7ff fb51 	bl	800b4bc <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 800be1a:	f000 ffcd 	bl	800cdb8 <vPortExitCritical>
 800be1e:	e7ec      	b.n	800bdfa <vTaskSuspend+0x3a>
			if( xSchedulerRunning != pdFALSE )
 800be20:	4b13      	ldr	r3, [pc, #76]	; (800be70 <vTaskSuspend+0xb0>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	b1a3      	cbz	r3, 800be50 <vTaskSuspend+0x90>
				configASSERT( uxSchedulerSuspended == 0 );
 800be26:	4b14      	ldr	r3, [pc, #80]	; (800be78 <vTaskSuspend+0xb8>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	b143      	cbz	r3, 800be3e <vTaskSuspend+0x7e>
 800be2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	e7fe      	b.n	800be3c <vTaskSuspend+0x7c>
				portYIELD_WITHIN_API();
 800be3e:	4b0f      	ldr	r3, [pc, #60]	; (800be7c <vTaskSuspend+0xbc>)
 800be40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be44:	601a      	str	r2, [r3, #0]
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	e7d8      	b.n	800be02 <vTaskSuspend+0x42>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800be50:	4b06      	ldr	r3, [pc, #24]	; (800be6c <vTaskSuspend+0xac>)
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	4b0a      	ldr	r3, [pc, #40]	; (800be80 <vTaskSuspend+0xc0>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d103      	bne.n	800be64 <vTaskSuspend+0xa4>
					pxCurrentTCB = NULL;
 800be5c:	4b05      	ldr	r3, [pc, #20]	; (800be74 <vTaskSuspend+0xb4>)
 800be5e:	2200      	movs	r2, #0
 800be60:	601a      	str	r2, [r3, #0]
 800be62:	e7ce      	b.n	800be02 <vTaskSuspend+0x42>
					vTaskSwitchContext();
 800be64:	f7ff ff4e 	bl	800bd04 <vTaskSwitchContext>
	}
 800be68:	e7cb      	b.n	800be02 <vTaskSuspend+0x42>
 800be6a:	bf00      	nop
 800be6c:	200037f4 	.word	0x200037f4
 800be70:	200037f0 	.word	0x200037f0
 800be74:	20003324 	.word	0x20003324
 800be78:	200037a0 	.word	0x200037a0
 800be7c:	e000ed04 	.word	0xe000ed04
 800be80:	20003794 	.word	0x20003794

0800be84 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800be84:	b940      	cbnz	r0, 800be98 <vTaskPlaceOnEventList+0x14>
 800be86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8a:	f383 8811 	msr	BASEPRI, r3
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	e7fe      	b.n	800be96 <vTaskPlaceOnEventList+0x12>
{
 800be98:	b510      	push	{r4, lr}
 800be9a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be9c:	4b04      	ldr	r3, [pc, #16]	; (800beb0 <vTaskPlaceOnEventList+0x2c>)
 800be9e:	6819      	ldr	r1, [r3, #0]
 800bea0:	3118      	adds	r1, #24
 800bea2:	f7fe fe63 	bl	800ab6c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bea6:	2101      	movs	r1, #1
 800bea8:	4620      	mov	r0, r4
 800beaa:	f7ff fc4d 	bl	800b748 <prvAddCurrentTaskToDelayedList>
}
 800beae:	bd10      	pop	{r4, pc}
 800beb0:	20003324 	.word	0x20003324

0800beb4 <vTaskPlaceOnEventListRestricted>:
	{
 800beb4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800beb6:	b940      	cbnz	r0, 800beca <vTaskPlaceOnEventListRestricted+0x16>
 800beb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebc:	f383 8811 	msr	BASEPRI, r3
 800bec0:	f3bf 8f6f 	isb	sy
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	e7fe      	b.n	800bec8 <vTaskPlaceOnEventListRestricted+0x14>
 800beca:	460c      	mov	r4, r1
 800becc:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bece:	4a06      	ldr	r2, [pc, #24]	; (800bee8 <vTaskPlaceOnEventListRestricted+0x34>)
 800bed0:	6811      	ldr	r1, [r2, #0]
 800bed2:	3118      	adds	r1, #24
 800bed4:	f7fe fe3e 	bl	800ab54 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800bed8:	b10d      	cbz	r5, 800bede <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 800beda:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bede:	4629      	mov	r1, r5
 800bee0:	4620      	mov	r0, r4
 800bee2:	f7ff fc31 	bl	800b748 <prvAddCurrentTaskToDelayedList>
	}
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	20003324 	.word	0x20003324

0800beec <xTaskRemoveFromEventList>:
{
 800beec:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beee:	68c3      	ldr	r3, [r0, #12]
 800bef0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800bef2:	b944      	cbnz	r4, 800bf06 <xTaskRemoveFromEventList+0x1a>
 800bef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	e7fe      	b.n	800bf04 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf06:	f104 0518 	add.w	r5, r4, #24
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	f7fe fe48 	bl	800aba0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf10:	4b13      	ldr	r3, [pc, #76]	; (800bf60 <xTaskRemoveFromEventList+0x74>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	b9e3      	cbnz	r3, 800bf50 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf16:	1d25      	adds	r5, r4, #4
 800bf18:	4628      	mov	r0, r5
 800bf1a:	f7fe fe41 	bl	800aba0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bf20:	4a10      	ldr	r2, [pc, #64]	; (800bf64 <xTaskRemoveFromEventList+0x78>)
 800bf22:	6812      	ldr	r2, [r2, #0]
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d901      	bls.n	800bf2c <xTaskRemoveFromEventList+0x40>
 800bf28:	4a0e      	ldr	r2, [pc, #56]	; (800bf64 <xTaskRemoveFromEventList+0x78>)
 800bf2a:	6013      	str	r3, [r2, #0]
 800bf2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bf30:	009a      	lsls	r2, r3, #2
 800bf32:	4629      	mov	r1, r5
 800bf34:	480c      	ldr	r0, [pc, #48]	; (800bf68 <xTaskRemoveFromEventList+0x7c>)
 800bf36:	4410      	add	r0, r2
 800bf38:	f7fe fe0c 	bl	800ab54 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bf3e:	4b0b      	ldr	r3, [pc, #44]	; (800bf6c <xTaskRemoveFromEventList+0x80>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d908      	bls.n	800bf5a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800bf48:	2001      	movs	r0, #1
 800bf4a:	4b09      	ldr	r3, [pc, #36]	; (800bf70 <xTaskRemoveFromEventList+0x84>)
 800bf4c:	6018      	str	r0, [r3, #0]
}
 800bf4e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf50:	4629      	mov	r1, r5
 800bf52:	4808      	ldr	r0, [pc, #32]	; (800bf74 <xTaskRemoveFromEventList+0x88>)
 800bf54:	f7fe fdfe 	bl	800ab54 <vListInsertEnd>
 800bf58:	e7f0      	b.n	800bf3c <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 800bf5a:	2000      	movs	r0, #0
	return xReturn;
 800bf5c:	e7f7      	b.n	800bf4e <xTaskRemoveFromEventList+0x62>
 800bf5e:	bf00      	nop
 800bf60:	200037a0 	.word	0x200037a0
 800bf64:	200037a8 	.word	0x200037a8
 800bf68:	20003330 	.word	0x20003330
 800bf6c:	20003324 	.word	0x20003324
 800bf70:	20003820 	.word	0x20003820
 800bf74:	200037dc 	.word	0x200037dc

0800bf78 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf78:	4b03      	ldr	r3, [pc, #12]	; (800bf88 <vTaskInternalSetTimeOutState+0x10>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf7e:	4b03      	ldr	r3, [pc, #12]	; (800bf8c <vTaskInternalSetTimeOutState+0x14>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6043      	str	r3, [r0, #4]
}
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	200037d8 	.word	0x200037d8
 800bf8c:	2000381c 	.word	0x2000381c

0800bf90 <xTaskCheckForTimeOut>:
{
 800bf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800bf92:	b150      	cbz	r0, 800bfaa <xTaskCheckForTimeOut+0x1a>
 800bf94:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800bf96:	b989      	cbnz	r1, 800bfbc <xTaskCheckForTimeOut+0x2c>
 800bf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9c:	f383 8811 	msr	BASEPRI, r3
 800bfa0:	f3bf 8f6f 	isb	sy
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	e7fe      	b.n	800bfa8 <xTaskCheckForTimeOut+0x18>
 800bfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	e7fe      	b.n	800bfba <xTaskCheckForTimeOut+0x2a>
 800bfbc:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 800bfbe:	f000 fed9 	bl	800cd74 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800bfc2:	4b11      	ldr	r3, [pc, #68]	; (800c008 <xTaskCheckForTimeOut+0x78>)
 800bfc4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bfc6:	6868      	ldr	r0, [r5, #4]
 800bfc8:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 800bfca:	6823      	ldr	r3, [r4, #0]
 800bfcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfd0:	d016      	beq.n	800c000 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bfd2:	682f      	ldr	r7, [r5, #0]
 800bfd4:	4e0d      	ldr	r6, [pc, #52]	; (800c00c <xTaskCheckForTimeOut+0x7c>)
 800bfd6:	6836      	ldr	r6, [r6, #0]
 800bfd8:	42b7      	cmp	r7, r6
 800bfda:	d001      	beq.n	800bfe0 <xTaskCheckForTimeOut+0x50>
 800bfdc:	4288      	cmp	r0, r1
 800bfde:	d911      	bls.n	800c004 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d803      	bhi.n	800bfec <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800bfe8:	2401      	movs	r4, #1
 800bfea:	e005      	b.n	800bff8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800bfec:	1a9b      	subs	r3, r3, r2
 800bfee:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bff0:	4628      	mov	r0, r5
 800bff2:	f7ff ffc1 	bl	800bf78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bff6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800bff8:	f000 fede 	bl	800cdb8 <vPortExitCritical>
}
 800bffc:	4620      	mov	r0, r4
 800bffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800c000:	2400      	movs	r4, #0
 800c002:	e7f9      	b.n	800bff8 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 800c004:	2401      	movs	r4, #1
 800c006:	e7f7      	b.n	800bff8 <xTaskCheckForTimeOut+0x68>
 800c008:	2000381c 	.word	0x2000381c
 800c00c:	200037d8 	.word	0x200037d8

0800c010 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800c010:	4b01      	ldr	r3, [pc, #4]	; (800c018 <vTaskMissedYield+0x8>)
 800c012:	2201      	movs	r2, #1
 800c014:	601a      	str	r2, [r3, #0]
}
 800c016:	4770      	bx	lr
 800c018:	20003820 	.word	0x20003820

0800c01c <vTaskGetInfo>:
	{
 800c01c:	b570      	push	{r4, r5, r6, lr}
 800c01e:	460c      	mov	r4, r1
 800c020:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 800c022:	4605      	mov	r5, r0
 800c024:	b1d0      	cbz	r0, 800c05c <vTaskGetInfo+0x40>
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800c026:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800c028:	f105 0234 	add.w	r2, r5, #52	; 0x34
 800c02c:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800c02e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800c030:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800c032:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800c034:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800c036:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800c038:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800c03a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800c03c:	6162      	str	r2, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800c03e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800c040:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 800c042:	2b05      	cmp	r3, #5
 800c044:	d019      	beq.n	800c07a <vTaskGetInfo+0x5e>
			if( pxTCB == pxCurrentTCB )
 800c046:	4a12      	ldr	r2, [pc, #72]	; (800c090 <vTaskGetInfo+0x74>)
 800c048:	6812      	ldr	r2, [r2, #0]
 800c04a:	42aa      	cmp	r2, r5
 800c04c:	d009      	beq.n	800c062 <vTaskGetInfo+0x46>
				pxTaskStatus->eCurrentState = eState;
 800c04e:	7323      	strb	r3, [r4, #12]
					if( eState == eSuspended )
 800c050:	2b03      	cmp	r3, #3
 800c052:	d009      	beq.n	800c068 <vTaskGetInfo+0x4c>
		if( xGetFreeStackSpace != pdFALSE )
 800c054:	b9b6      	cbnz	r6, 800c084 <vTaskGetInfo+0x68>
			pxTaskStatus->usStackHighWaterMark = 0;
 800c056:	2300      	movs	r3, #0
 800c058:	8423      	strh	r3, [r4, #32]
	}
 800c05a:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
 800c05c:	4a0c      	ldr	r2, [pc, #48]	; (800c090 <vTaskGetInfo+0x74>)
 800c05e:	6815      	ldr	r5, [r2, #0]
 800c060:	e7e1      	b.n	800c026 <vTaskGetInfo+0xa>
				pxTaskStatus->eCurrentState = eRunning;
 800c062:	2300      	movs	r3, #0
 800c064:	7323      	strb	r3, [r4, #12]
 800c066:	e7f5      	b.n	800c054 <vTaskGetInfo+0x38>
						vTaskSuspendAll();
 800c068:	f7ff fcc0 	bl	800b9ec <vTaskSuspendAll>
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c06c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c06e:	b10b      	cbz	r3, 800c074 <vTaskGetInfo+0x58>
								pxTaskStatus->eCurrentState = eBlocked;
 800c070:	2302      	movs	r3, #2
 800c072:	7323      	strb	r3, [r4, #12]
						( void ) xTaskResumeAll();
 800c074:	f7ff fd54 	bl	800bb20 <xTaskResumeAll>
 800c078:	e7ec      	b.n	800c054 <vTaskGetInfo+0x38>
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800c07a:	4628      	mov	r0, r5
 800c07c:	f7ff fc20 	bl	800b8c0 <eTaskGetState>
 800c080:	7320      	strb	r0, [r4, #12]
 800c082:	e7e7      	b.n	800c054 <vTaskGetInfo+0x38>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800c084:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800c086:	f7ff fa0e 	bl	800b4a6 <prvTaskCheckFreeStackSpace>
 800c08a:	8420      	strh	r0, [r4, #32]
 800c08c:	e7e5      	b.n	800c05a <vTaskGetInfo+0x3e>
 800c08e:	bf00      	nop
 800c090:	20003324 	.word	0x20003324

0800c094 <prvListTasksWithinSingleList>:
	{
 800c094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800c098:	680b      	ldr	r3, [r1, #0]
 800c09a:	b33b      	cbz	r3, 800c0ec <prvListTasksWithinSingleList+0x58>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c09c:	684b      	ldr	r3, [r1, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	604b      	str	r3, [r1, #4]
 800c0a2:	f101 0908 	add.w	r9, r1, #8
 800c0a6:	454b      	cmp	r3, r9
 800c0a8:	d007      	beq.n	800c0ba <prvListTasksWithinSingleList+0x26>
 800c0aa:	4690      	mov	r8, r2
 800c0ac:	460c      	mov	r4, r1
 800c0ae:	4607      	mov	r7, r0
 800c0b0:	684b      	ldr	r3, [r1, #4]
 800c0b2:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	UBaseType_t uxTask = 0;
 800c0b6:	2500      	movs	r5, #0
 800c0b8:	e010      	b.n	800c0dc <prvListTasksWithinSingleList+0x48>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	604b      	str	r3, [r1, #4]
 800c0be:	e7f4      	b.n	800c0aa <prvListTasksWithinSingleList+0x16>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0c0:	6863      	ldr	r3, [r4, #4]
 800c0c2:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800c0c4:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800c0c8:	0099      	lsls	r1, r3, #2
 800c0ca:	4643      	mov	r3, r8
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	4439      	add	r1, r7
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	f7ff ffa3 	bl	800c01c <vTaskGetInfo>
				uxTask++;
 800c0d6:	3501      	adds	r5, #1
			} while( pxNextTCB != pxFirstTCB );
 800c0d8:	45b2      	cmp	sl, r6
 800c0da:	d008      	beq.n	800c0ee <prvListTasksWithinSingleList+0x5a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0dc:	6863      	ldr	r3, [r4, #4]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	6063      	str	r3, [r4, #4]
 800c0e2:	4599      	cmp	r9, r3
 800c0e4:	d1ec      	bne.n	800c0c0 <prvListTasksWithinSingleList+0x2c>
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	6063      	str	r3, [r4, #4]
 800c0ea:	e7e9      	b.n	800c0c0 <prvListTasksWithinSingleList+0x2c>
	UBaseType_t uxTask = 0;
 800c0ec:	2500      	movs	r5, #0
	}
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c0f4 <uxTaskGetSystemState>:
	{
 800c0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f6:	4607      	mov	r7, r0
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	4616      	mov	r6, r2
		vTaskSuspendAll();
 800c0fc:	f7ff fc76 	bl	800b9ec <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800c100:	4b22      	ldr	r3, [pc, #136]	; (800c18c <uxTaskGetSystemState+0x98>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	42a3      	cmp	r3, r4
 800c106:	d83c      	bhi.n	800c182 <uxTaskGetSystemState+0x8e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800c108:	2438      	movs	r4, #56	; 0x38
 800c10a:	2500      	movs	r5, #0
					uxQueue--;
 800c10c:	3c01      	subs	r4, #1
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800c10e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800c112:	0098      	lsls	r0, r3, #2
 800c114:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800c118:	0093      	lsls	r3, r2, #2
 800c11a:	2201      	movs	r2, #1
 800c11c:	491c      	ldr	r1, [pc, #112]	; (800c190 <uxTaskGetSystemState+0x9c>)
 800c11e:	4419      	add	r1, r3
 800c120:	4438      	add	r0, r7
 800c122:	f7ff ffb7 	bl	800c094 <prvListTasksWithinSingleList>
 800c126:	4405      	add	r5, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c128:	2c00      	cmp	r4, #0
 800c12a:	d1ef      	bne.n	800c10c <uxTaskGetSystemState+0x18>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800c12c:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800c130:	0098      	lsls	r0, r3, #2
 800c132:	4b18      	ldr	r3, [pc, #96]	; (800c194 <uxTaskGetSystemState+0xa0>)
 800c134:	6819      	ldr	r1, [r3, #0]
 800c136:	2202      	movs	r2, #2
 800c138:	4438      	add	r0, r7
 800c13a:	f7ff ffab 	bl	800c094 <prvListTasksWithinSingleList>
 800c13e:	182c      	adds	r4, r5, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800c140:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c144:	0098      	lsls	r0, r3, #2
 800c146:	4b14      	ldr	r3, [pc, #80]	; (800c198 <uxTaskGetSystemState+0xa4>)
 800c148:	6819      	ldr	r1, [r3, #0]
 800c14a:	2202      	movs	r2, #2
 800c14c:	4438      	add	r0, r7
 800c14e:	f7ff ffa1 	bl	800c094 <prvListTasksWithinSingleList>
 800c152:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800c154:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c158:	0098      	lsls	r0, r3, #2
 800c15a:	2204      	movs	r2, #4
 800c15c:	490f      	ldr	r1, [pc, #60]	; (800c19c <uxTaskGetSystemState+0xa8>)
 800c15e:	4438      	add	r0, r7
 800c160:	f7ff ff98 	bl	800c094 <prvListTasksWithinSingleList>
 800c164:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800c166:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800c16a:	0098      	lsls	r0, r3, #2
 800c16c:	2203      	movs	r2, #3
 800c16e:	490c      	ldr	r1, [pc, #48]	; (800c1a0 <uxTaskGetSystemState+0xac>)
 800c170:	4438      	add	r0, r7
 800c172:	f7ff ff8f 	bl	800c094 <prvListTasksWithinSingleList>
 800c176:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 800c178:	b126      	cbz	r6, 800c184 <uxTaskGetSystemState+0x90>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800c17a:	4b0a      	ldr	r3, [pc, #40]	; (800c1a4 <uxTaskGetSystemState+0xb0>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	6033      	str	r3, [r6, #0]
 800c180:	e000      	b.n	800c184 <uxTaskGetSystemState+0x90>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800c182:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 800c184:	f7ff fccc 	bl	800bb20 <xTaskResumeAll>
	}
 800c188:	4620      	mov	r0, r4
 800c18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c18c:	20003794 	.word	0x20003794
 800c190:	20003330 	.word	0x20003330
 800c194:	20003328 	.word	0x20003328
 800c198:	2000332c 	.word	0x2000332c
 800c19c:	20003808 	.word	0x20003808
 800c1a0:	200037f4 	.word	0x200037f4
 800c1a4:	20004230 	.word	0x20004230

0800c1a8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800c1a8:	4b01      	ldr	r3, [pc, #4]	; (800c1b0 <xTaskGetCurrentTaskHandle+0x8>)
 800c1aa:	6818      	ldr	r0, [r3, #0]
	}
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	20003324 	.word	0x20003324

0800c1b4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800c1b4:	4b05      	ldr	r3, [pc, #20]	; (800c1cc <xTaskGetSchedulerState+0x18>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	b133      	cbz	r3, 800c1c8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1ba:	4b05      	ldr	r3, [pc, #20]	; (800c1d0 <xTaskGetSchedulerState+0x1c>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	b10b      	cbz	r3, 800c1c4 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800c1c0:	2000      	movs	r0, #0
	}
 800c1c2:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800c1c4:	2002      	movs	r0, #2
 800c1c6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c1c8:	2001      	movs	r0, #1
 800c1ca:	4770      	bx	lr
 800c1cc:	200037f0 	.word	0x200037f0
 800c1d0:	200037a0 	.word	0x200037a0

0800c1d4 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d040      	beq.n	800c25a <xTaskPriorityInherit+0x86>
	{
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	4605      	mov	r5, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c1dc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800c1de:	4920      	ldr	r1, [pc, #128]	; (800c260 <xTaskPriorityInherit+0x8c>)
 800c1e0:	6809      	ldr	r1, [r1, #0]
 800c1e2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800c1e4:	428a      	cmp	r2, r1
 800c1e6:	d22e      	bcs.n	800c246 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c1e8:	6981      	ldr	r1, [r0, #24]
 800c1ea:	2900      	cmp	r1, #0
 800c1ec:	db05      	blt.n	800c1fa <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1ee:	491c      	ldr	r1, [pc, #112]	; (800c260 <xTaskPriorityInherit+0x8c>)
 800c1f0:	6809      	ldr	r1, [r1, #0]
 800c1f2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800c1f4:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 800c1f8:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c1fa:	6968      	ldr	r0, [r5, #20]
 800c1fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800c200:	0091      	lsls	r1, r2, #2
 800c202:	4a18      	ldr	r2, [pc, #96]	; (800c264 <xTaskPriorityInherit+0x90>)
 800c204:	440a      	add	r2, r1
 800c206:	4290      	cmp	r0, r2
 800c208:	d005      	beq.n	800c216 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c20a:	4a15      	ldr	r2, [pc, #84]	; (800c260 <xTaskPriorityInherit+0x8c>)
 800c20c:	6812      	ldr	r2, [r2, #0]
 800c20e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c210:	62ea      	str	r2, [r5, #44]	; 0x2c
				xReturn = pdTRUE;
 800c212:	2001      	movs	r0, #1
	}
 800c214:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c216:	1d2c      	adds	r4, r5, #4
 800c218:	4620      	mov	r0, r4
 800c21a:	f7fe fcc1 	bl	800aba0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c21e:	4b10      	ldr	r3, [pc, #64]	; (800c260 <xTaskPriorityInherit+0x8c>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c224:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c226:	4a10      	ldr	r2, [pc, #64]	; (800c268 <xTaskPriorityInherit+0x94>)
 800c228:	6812      	ldr	r2, [r2, #0]
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d901      	bls.n	800c232 <xTaskPriorityInherit+0x5e>
 800c22e:	4a0e      	ldr	r2, [pc, #56]	; (800c268 <xTaskPriorityInherit+0x94>)
 800c230:	6013      	str	r3, [r2, #0]
 800c232:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c236:	009a      	lsls	r2, r3, #2
 800c238:	4621      	mov	r1, r4
 800c23a:	480a      	ldr	r0, [pc, #40]	; (800c264 <xTaskPriorityInherit+0x90>)
 800c23c:	4410      	add	r0, r2
 800c23e:	f7fe fc89 	bl	800ab54 <vListInsertEnd>
				xReturn = pdTRUE;
 800c242:	2001      	movs	r0, #1
 800c244:	e7e6      	b.n	800c214 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c246:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c248:	4b05      	ldr	r3, [pc, #20]	; (800c260 <xTaskPriorityInherit+0x8c>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c24e:	429a      	cmp	r2, r3
 800c250:	d201      	bcs.n	800c256 <xTaskPriorityInherit+0x82>
					xReturn = pdTRUE;
 800c252:	2001      	movs	r0, #1
		return xReturn;
 800c254:	e7de      	b.n	800c214 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 800c256:	2000      	movs	r0, #0
 800c258:	e7dc      	b.n	800c214 <xTaskPriorityInherit+0x40>
 800c25a:	2000      	movs	r0, #0
	}
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop
 800c260:	20003324 	.word	0x20003324
 800c264:	20003330 	.word	0x20003330
 800c268:	200037a8 	.word	0x200037a8

0800c26c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d038      	beq.n	800c2e2 <xTaskPriorityDisinherit+0x76>
	{
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800c274:	4a1e      	ldr	r2, [pc, #120]	; (800c2f0 <xTaskPriorityDisinherit+0x84>)
 800c276:	6812      	ldr	r2, [r2, #0]
 800c278:	4282      	cmp	r2, r0
 800c27a:	d008      	beq.n	800c28e <xTaskPriorityDisinherit+0x22>
 800c27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c280:	f383 8811 	msr	BASEPRI, r3
 800c284:	f3bf 8f6f 	isb	sy
 800c288:	f3bf 8f4f 	dsb	sy
 800c28c:	e7fe      	b.n	800c28c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800c28e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800c290:	b942      	cbnz	r2, 800c2a4 <xTaskPriorityDisinherit+0x38>
 800c292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c296:	f383 8811 	msr	BASEPRI, r3
 800c29a:	f3bf 8f6f 	isb	sy
 800c29e:	f3bf 8f4f 	dsb	sy
 800c2a2:	e7fe      	b.n	800c2a2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800c2a4:	3a01      	subs	r2, #1
 800c2a6:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c2a8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800c2aa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c2ac:	4288      	cmp	r0, r1
 800c2ae:	d01a      	beq.n	800c2e6 <xTaskPriorityDisinherit+0x7a>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c2b0:	b9da      	cbnz	r2, 800c2ea <xTaskPriorityDisinherit+0x7e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2b2:	1d25      	adds	r5, r4, #4
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	f7fe fc73 	bl	800aba0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c2ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c2bc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c2c2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800c2c4:	4a0b      	ldr	r2, [pc, #44]	; (800c2f4 <xTaskPriorityDisinherit+0x88>)
 800c2c6:	6812      	ldr	r2, [r2, #0]
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d901      	bls.n	800c2d0 <xTaskPriorityDisinherit+0x64>
 800c2cc:	4a09      	ldr	r2, [pc, #36]	; (800c2f4 <xTaskPriorityDisinherit+0x88>)
 800c2ce:	6013      	str	r3, [r2, #0]
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	4a09      	ldr	r2, [pc, #36]	; (800c2f8 <xTaskPriorityDisinherit+0x8c>)
 800c2d4:	2014      	movs	r0, #20
 800c2d6:	fb00 2003 	mla	r0, r0, r3, r2
 800c2da:	f7fe fc3b 	bl	800ab54 <vListInsertEnd>
					xReturn = pdTRUE;
 800c2de:	2001      	movs	r0, #1
	}
 800c2e0:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800c2e2:	2000      	movs	r0, #0
	}
 800c2e4:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	e7fa      	b.n	800c2e0 <xTaskPriorityDisinherit+0x74>
 800c2ea:	2000      	movs	r0, #0
		return xReturn;
 800c2ec:	e7f8      	b.n	800c2e0 <xTaskPriorityDisinherit+0x74>
 800c2ee:	bf00      	nop
 800c2f0:	20003324 	.word	0x20003324
 800c2f4:	200037a8 	.word	0x200037a8
 800c2f8:	20003330 	.word	0x20003330

0800c2fc <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	d045      	beq.n	800c38c <vTaskPriorityDisinheritAfterTimeout+0x90>
	{
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800c304:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800c306:	b940      	cbnz	r0, 800c31a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800c308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30c:	f383 8811 	msr	BASEPRI, r3
 800c310:	f3bf 8f6f 	isb	sy
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	e7fe      	b.n	800c318 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c31a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c31c:	428a      	cmp	r2, r1
 800c31e:	d200      	bcs.n	800c322 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c320:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c322:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c324:	4291      	cmp	r1, r2
 800c326:	d001      	beq.n	800c32c <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c328:	2801      	cmp	r0, #1
 800c32a:	d000      	beq.n	800c32e <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800c32c:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800c32e:	4818      	ldr	r0, [pc, #96]	; (800c390 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800c330:	6800      	ldr	r0, [r0, #0]
 800c332:	4298      	cmp	r0, r3
 800c334:	d108      	bne.n	800c348 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 800c336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33a:	f383 8811 	msr	BASEPRI, r3
 800c33e:	f3bf 8f6f 	isb	sy
 800c342:	f3bf 8f4f 	dsb	sy
 800c346:	e7fe      	b.n	800c346 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 800c348:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c34a:	6998      	ldr	r0, [r3, #24]
 800c34c:	2800      	cmp	r0, #0
 800c34e:	db02      	blt.n	800c356 <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c350:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800c354:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c356:	695a      	ldr	r2, [r3, #20]
 800c358:	480e      	ldr	r0, [pc, #56]	; (800c394 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800c35a:	2414      	movs	r4, #20
 800c35c:	fb04 0101 	mla	r1, r4, r1, r0
 800c360:	428a      	cmp	r2, r1
 800c362:	d1e3      	bne.n	800c32c <vTaskPriorityDisinheritAfterTimeout+0x30>
 800c364:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c366:	1d1d      	adds	r5, r3, #4
 800c368:	4628      	mov	r0, r5
 800c36a:	f7fe fc19 	bl	800aba0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800c36e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c370:	4a09      	ldr	r2, [pc, #36]	; (800c398 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800c372:	6812      	ldr	r2, [r2, #0]
 800c374:	4293      	cmp	r3, r2
 800c376:	d901      	bls.n	800c37c <vTaskPriorityDisinheritAfterTimeout+0x80>
 800c378:	4a07      	ldr	r2, [pc, #28]	; (800c398 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800c37a:	6013      	str	r3, [r2, #0]
 800c37c:	4629      	mov	r1, r5
 800c37e:	4a05      	ldr	r2, [pc, #20]	; (800c394 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800c380:	2014      	movs	r0, #20
 800c382:	fb00 2003 	mla	r0, r0, r3, r2
 800c386:	f7fe fbe5 	bl	800ab54 <vListInsertEnd>
	}
 800c38a:	e7cf      	b.n	800c32c <vTaskPriorityDisinheritAfterTimeout+0x30>
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop
 800c390:	20003324 	.word	0x20003324
 800c394:	20003330 	.word	0x20003330
 800c398:	200037a8 	.word	0x200037a8

0800c39c <vTaskGetRunTimeStats>:
	{
 800c39c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3a0:	b083      	sub	sp, #12
 800c3a2:	4607      	mov	r7, r0
		*pcWriteBuffer = ( char ) 0x00;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	7003      	strb	r3, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800c3a8:	4b1e      	ldr	r3, [pc, #120]	; (800c424 <vTaskGetRunTimeStats+0x88>)
 800c3aa:	681c      	ldr	r4, [r3, #0]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800c3b2:	0098      	lsls	r0, r3, #2
 800c3b4:	f000 fe94 	bl	800d0e0 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 800c3b8:	b178      	cbz	r0, 800c3da <vTaskGetRunTimeStats+0x3e>
 800c3ba:	4680      	mov	r8, r0
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800c3bc:	aa01      	add	r2, sp, #4
 800c3be:	4621      	mov	r1, r4
 800c3c0:	f7ff fe98 	bl	800c0f4 <uxTaskGetSystemState>
 800c3c4:	4681      	mov	r9, r0
			ulTotalTime /= 100UL;
 800c3c6:	9b01      	ldr	r3, [sp, #4]
 800c3c8:	4a17      	ldr	r2, [pc, #92]	; (800c428 <vTaskGetRunTimeStats+0x8c>)
 800c3ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ce:	095b      	lsrs	r3, r3, #5
 800c3d0:	9301      	str	r3, [sp, #4]
			if( ulTotalTime > 0UL )
 800c3d2:	bb2b      	cbnz	r3, 800c420 <vTaskGetRunTimeStats+0x84>
			vPortFree( pxTaskStatusArray );
 800c3d4:	4640      	mov	r0, r8
 800c3d6:	f000 ff07 	bl	800d1e8 <vPortFree>
	}
 800c3da:	b003      	add	sp, #12
 800c3dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800c3e0:	69a2      	ldr	r2, [r4, #24]
 800c3e2:	4912      	ldr	r1, [pc, #72]	; (800c42c <vTaskGetRunTimeStats+0x90>)
 800c3e4:	f001 fd2a 	bl	800de3c <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800c3e8:	4638      	mov	r0, r7
 800c3ea:	f7f3 fef9 	bl	80001e0 <strlen>
 800c3ee:	4407      	add	r7, r0
				for( x = 0; x < uxArraySize; x++ )
 800c3f0:	3501      	adds	r5, #1
 800c3f2:	454d      	cmp	r5, r9
 800c3f4:	d2ee      	bcs.n	800c3d4 <vTaskGetRunTimeStats+0x38>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800c3f6:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800c3fa:	009c      	lsls	r4, r3, #2
 800c3fc:	4444      	add	r4, r8
 800c3fe:	69a6      	ldr	r6, [r4, #24]
 800c400:	9b01      	ldr	r3, [sp, #4]
 800c402:	fbb6 f6f3 	udiv	r6, r6, r3
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800c406:	6861      	ldr	r1, [r4, #4]
 800c408:	4638      	mov	r0, r7
 800c40a:	f7ff f9db 	bl	800b7c4 <prvWriteNameToBuffer>
 800c40e:	4607      	mov	r7, r0
					if( ulStatsAsPercentage > 0UL )
 800c410:	2e00      	cmp	r6, #0
 800c412:	d0e5      	beq.n	800c3e0 <vTaskGetRunTimeStats+0x44>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800c414:	4633      	mov	r3, r6
 800c416:	69a2      	ldr	r2, [r4, #24]
 800c418:	4905      	ldr	r1, [pc, #20]	; (800c430 <vTaskGetRunTimeStats+0x94>)
 800c41a:	f001 fd0f 	bl	800de3c <siprintf>
 800c41e:	e7e3      	b.n	800c3e8 <vTaskGetRunTimeStats+0x4c>
				for( x = 0; x < uxArraySize; x++ )
 800c420:	2500      	movs	r5, #0
 800c422:	e7e6      	b.n	800c3f2 <vTaskGetRunTimeStats+0x56>
 800c424:	20003794 	.word	0x20003794
 800c428:	51eb851f 	.word	0x51eb851f
 800c42c:	0800f75c 	.word	0x0800f75c
 800c430:	0800f750 	.word	0x0800f750

0800c434 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800c434:	4b05      	ldr	r3, [pc, #20]	; (800c44c <pvTaskIncrementMutexHeldCount+0x18>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	b123      	cbz	r3, 800c444 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800c43a:	4b04      	ldr	r3, [pc, #16]	; (800c44c <pvTaskIncrementMutexHeldCount+0x18>)
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c440:	3301      	adds	r3, #1
 800c442:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
 800c444:	4b01      	ldr	r3, [pc, #4]	; (800c44c <pvTaskIncrementMutexHeldCount+0x18>)
 800c446:	6818      	ldr	r0, [r3, #0]
	}
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	20003324 	.word	0x20003324

0800c450 <ulTaskNotifyTake>:
	{
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4605      	mov	r5, r0
 800c454:	460c      	mov	r4, r1
		taskENTER_CRITICAL();
 800c456:	f000 fc8d 	bl	800cd74 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c45a:	4b19      	ldr	r3, [pc, #100]	; (800c4c0 <ulTaskNotifyTake+0x70>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c460:	b92b      	cbnz	r3, 800c46e <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c462:	4b17      	ldr	r3, [pc, #92]	; (800c4c0 <ulTaskNotifyTake+0x70>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 800c46c:	b9ac      	cbnz	r4, 800c49a <ulTaskNotifyTake+0x4a>
		taskEXIT_CRITICAL();
 800c46e:	f000 fca3 	bl	800cdb8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800c472:	f000 fc7f 	bl	800cd74 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c476:	4b12      	ldr	r3, [pc, #72]	; (800c4c0 <ulTaskNotifyTake+0x70>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if( ulReturn != 0UL )
 800c47c:	b124      	cbz	r4, 800c488 <ulTaskNotifyTake+0x38>
				if( xClearCountOnExit != pdFALSE )
 800c47e:	b9cd      	cbnz	r5, 800c4b4 <ulTaskNotifyTake+0x64>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c480:	4b0f      	ldr	r3, [pc, #60]	; (800c4c0 <ulTaskNotifyTake+0x70>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	1e62      	subs	r2, r4, #1
 800c486:	65da      	str	r2, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c488:	4b0d      	ldr	r3, [pc, #52]	; (800c4c0 <ulTaskNotifyTake+0x70>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2200      	movs	r2, #0
 800c48e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 800c492:	f000 fc91 	bl	800cdb8 <vPortExitCritical>
	}
 800c496:	4620      	mov	r0, r4
 800c498:	bd38      	pop	{r3, r4, r5, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c49a:	4611      	mov	r1, r2
 800c49c:	4620      	mov	r0, r4
 800c49e:	f7ff f953 	bl	800b748 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800c4a2:	4b08      	ldr	r3, [pc, #32]	; (800c4c4 <ulTaskNotifyTake+0x74>)
 800c4a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4a8:	601a      	str	r2, [r3, #0]
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	e7dc      	b.n	800c46e <ulTaskNotifyTake+0x1e>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c4b4:	4b02      	ldr	r3, [pc, #8]	; (800c4c0 <ulTaskNotifyTake+0x70>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	65da      	str	r2, [r3, #92]	; 0x5c
 800c4bc:	e7e4      	b.n	800c488 <ulTaskNotifyTake+0x38>
 800c4be:	bf00      	nop
 800c4c0:	20003324 	.word	0x20003324
 800c4c4:	e000ed04 	.word	0xe000ed04

0800c4c8 <xTaskNotifyWait>:
	{
 800c4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ca:	4607      	mov	r7, r0
 800c4cc:	460d      	mov	r5, r1
 800c4ce:	4614      	mov	r4, r2
 800c4d0:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 800c4d2:	f000 fc4f 	bl	800cd74 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c4d6:	4b20      	ldr	r3, [pc, #128]	; (800c558 <xTaskNotifyWait+0x90>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d00a      	beq.n	800c4fa <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c4e4:	4b1c      	ldr	r3, [pc, #112]	; (800c558 <xTaskNotifyWait+0x90>)
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800c4ea:	ea20 0007 	bic.w	r0, r0, r7
 800c4ee:	65d0      	str	r0, [r2, #92]	; 0x5c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 800c4f8:	b9ce      	cbnz	r6, 800c52e <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 800c4fa:	f000 fc5d 	bl	800cdb8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800c4fe:	f000 fc39 	bl	800cd74 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800c502:	b11c      	cbz	r4, 800c50c <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c504:	4b14      	ldr	r3, [pc, #80]	; (800c558 <xTaskNotifyWait+0x90>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c50a:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c50c:	4b12      	ldr	r3, [pc, #72]	; (800c558 <xTaskNotifyWait+0x90>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c514:	b2db      	uxtb	r3, r3
 800c516:	2b02      	cmp	r3, #2
 800c518:	d016      	beq.n	800c548 <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 800c51a:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c51c:	4b0e      	ldr	r3, [pc, #56]	; (800c558 <xTaskNotifyWait+0x90>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2200      	movs	r2, #0
 800c522:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 800c526:	f000 fc47 	bl	800cdb8 <vPortExitCritical>
	}
 800c52a:	4620      	mov	r0, r4
 800c52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c52e:	4611      	mov	r1, r2
 800c530:	4630      	mov	r0, r6
 800c532:	f7ff f909 	bl	800b748 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800c536:	4b09      	ldr	r3, [pc, #36]	; (800c55c <xTaskNotifyWait+0x94>)
 800c538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c53c:	601a      	str	r2, [r3, #0]
 800c53e:	f3bf 8f4f 	dsb	sy
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	e7d8      	b.n	800c4fa <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c548:	4b03      	ldr	r3, [pc, #12]	; (800c558 <xTaskNotifyWait+0x90>)
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800c54e:	ea23 0505 	bic.w	r5, r3, r5
 800c552:	65d5      	str	r5, [r2, #92]	; 0x5c
				xReturn = pdTRUE;
 800c554:	2401      	movs	r4, #1
 800c556:	e7e1      	b.n	800c51c <xTaskNotifyWait+0x54>
 800c558:	20003324 	.word	0x20003324
 800c55c:	e000ed04 	.word	0xe000ed04

0800c560 <xTaskGenericNotifyFromISR>:
	{
 800c560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c564:	9f08      	ldr	r7, [sp, #32]
		configASSERT( xTaskToNotify );
 800c566:	b940      	cbnz	r0, 800c57a <xTaskGenericNotifyFromISR+0x1a>
 800c568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56c:	f383 8811 	msr	BASEPRI, r3
 800c570:	f3bf 8f6f 	isb	sy
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	e7fe      	b.n	800c578 <xTaskGenericNotifyFromISR+0x18>
 800c57a:	4604      	mov	r4, r0
 800c57c:	4699      	mov	r9, r3
 800c57e:	4616      	mov	r6, r2
 800c580:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c582:	f000 fd21 	bl	800cfc8 <vPortValidateInterruptPriority>
	__asm volatile
 800c586:	f3ef 8811 	mrs	r8, BASEPRI
 800c58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800c59a:	f1b9 0f00 	cmp.w	r9, #0
 800c59e:	d002      	beq.n	800c5a6 <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c5a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c5a2:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c5a6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800c5aa:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c5ac:	2202      	movs	r2, #2
 800c5ae:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			switch( eAction )
 800c5b2:	2e04      	cmp	r6, #4
 800c5b4:	d81c      	bhi.n	800c5f0 <xTaskGenericNotifyFromISR+0x90>
 800c5b6:	e8df f006 	tbb	[pc, r6]
 800c5ba:	0328      	.short	0x0328
 800c5bc:	130e      	.short	0x130e
 800c5be:	16          	.byte	0x16
 800c5bf:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 800c5c0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800c5c2:	4315      	orrs	r5, r2
 800c5c4:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800c5c6:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d024      	beq.n	800c616 <xTaskGenericNotifyFromISR+0xb6>
	__asm volatile
 800c5cc:	f388 8811 	msr	BASEPRI, r8
	}
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 800c5d6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800c5d8:	3201      	adds	r2, #1
 800c5da:	65e2      	str	r2, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800c5dc:	2501      	movs	r5, #1
					break;
 800c5de:	e7f3      	b.n	800c5c8 <xTaskGenericNotifyFromISR+0x68>
					pxTCB->ulNotifiedValue = ulValue;
 800c5e0:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800c5e2:	2501      	movs	r5, #1
					break;
 800c5e4:	e7f0      	b.n	800c5c8 <xTaskGenericNotifyFromISR+0x68>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	d011      	beq.n	800c60e <xTaskGenericNotifyFromISR+0xae>
						pxTCB->ulNotifiedValue = ulValue;
 800c5ea:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800c5ec:	2501      	movs	r5, #1
 800c5ee:	e7eb      	b.n	800c5c8 <xTaskGenericNotifyFromISR+0x68>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c5f0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800c5f2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c5f6:	d00c      	beq.n	800c612 <xTaskGenericNotifyFromISR+0xb2>
	__asm volatile
 800c5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fc:	f383 8811 	msr	BASEPRI, r3
 800c600:	f3bf 8f6f 	isb	sy
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	e7fe      	b.n	800c608 <xTaskGenericNotifyFromISR+0xa8>
	BaseType_t xReturn = pdPASS;
 800c60a:	2501      	movs	r5, #1
 800c60c:	e7dc      	b.n	800c5c8 <xTaskGenericNotifyFromISR+0x68>
						xReturn = pdFAIL;
 800c60e:	2500      	movs	r5, #0
 800c610:	e7da      	b.n	800c5c8 <xTaskGenericNotifyFromISR+0x68>
	BaseType_t xReturn = pdPASS;
 800c612:	2501      	movs	r5, #1
 800c614:	e7d8      	b.n	800c5c8 <xTaskGenericNotifyFromISR+0x68>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c616:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c618:	b143      	cbz	r3, 800c62c <xTaskGenericNotifyFromISR+0xcc>
 800c61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	e7fe      	b.n	800c62a <xTaskGenericNotifyFromISR+0xca>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c62c:	4b13      	ldr	r3, [pc, #76]	; (800c67c <xTaskGenericNotifyFromISR+0x11c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	b9f3      	cbnz	r3, 800c670 <xTaskGenericNotifyFromISR+0x110>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c632:	1d26      	adds	r6, r4, #4
 800c634:	4630      	mov	r0, r6
 800c636:	f7fe fab3 	bl	800aba0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c63a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c63c:	4a10      	ldr	r2, [pc, #64]	; (800c680 <xTaskGenericNotifyFromISR+0x120>)
 800c63e:	6812      	ldr	r2, [r2, #0]
 800c640:	4293      	cmp	r3, r2
 800c642:	d901      	bls.n	800c648 <xTaskGenericNotifyFromISR+0xe8>
 800c644:	4a0e      	ldr	r2, [pc, #56]	; (800c680 <xTaskGenericNotifyFromISR+0x120>)
 800c646:	6013      	str	r3, [r2, #0]
 800c648:	4631      	mov	r1, r6
 800c64a:	4a0e      	ldr	r2, [pc, #56]	; (800c684 <xTaskGenericNotifyFromISR+0x124>)
 800c64c:	2014      	movs	r0, #20
 800c64e:	fb00 2003 	mla	r0, r0, r3, r2
 800c652:	f7fe fa7f 	bl	800ab54 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c656:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c658:	4b0b      	ldr	r3, [pc, #44]	; (800c688 <xTaskGenericNotifyFromISR+0x128>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65e:	429a      	cmp	r2, r3
 800c660:	d9b4      	bls.n	800c5cc <xTaskGenericNotifyFromISR+0x6c>
					if( pxHigherPriorityTaskWoken != NULL )
 800c662:	b10f      	cbz	r7, 800c668 <xTaskGenericNotifyFromISR+0x108>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c664:	2301      	movs	r3, #1
 800c666:	603b      	str	r3, [r7, #0]
					xYieldPending = pdTRUE;
 800c668:	4b08      	ldr	r3, [pc, #32]	; (800c68c <xTaskGenericNotifyFromISR+0x12c>)
 800c66a:	2201      	movs	r2, #1
 800c66c:	601a      	str	r2, [r3, #0]
 800c66e:	e7ad      	b.n	800c5cc <xTaskGenericNotifyFromISR+0x6c>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c670:	f104 0118 	add.w	r1, r4, #24
 800c674:	4806      	ldr	r0, [pc, #24]	; (800c690 <xTaskGenericNotifyFromISR+0x130>)
 800c676:	f7fe fa6d 	bl	800ab54 <vListInsertEnd>
 800c67a:	e7ec      	b.n	800c656 <xTaskGenericNotifyFromISR+0xf6>
 800c67c:	200037a0 	.word	0x200037a0
 800c680:	200037a8 	.word	0x200037a8
 800c684:	20003330 	.word	0x20003330
 800c688:	20003324 	.word	0x20003324
 800c68c:	20003820 	.word	0x20003820
 800c690:	200037dc 	.word	0x200037dc

0800c694 <vTaskNotifyGiveFromISR>:
	{
 800c694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 800c696:	b940      	cbnz	r0, 800c6aa <vTaskNotifyGiveFromISR+0x16>
 800c698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69c:	f383 8811 	msr	BASEPRI, r3
 800c6a0:	f3bf 8f6f 	isb	sy
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	e7fe      	b.n	800c6a8 <vTaskNotifyGiveFromISR+0x14>
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6ae:	f000 fc8b 	bl	800cfc8 <vPortValidateInterruptPriority>
	__asm volatile
 800c6b2:	f3ef 8611 	mrs	r6, BASEPRI
 800c6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c6c6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800c6ca:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c6cc:	2202      	movs	r2, #2
 800c6ce:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			( pxTCB->ulNotifiedValue )++;
 800c6d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800c6d4:	3201      	adds	r2, #1
 800c6d6:	65e2      	str	r2, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d002      	beq.n	800c6e2 <vTaskNotifyGiveFromISR+0x4e>
	__asm volatile
 800c6dc:	f386 8811 	msr	BASEPRI, r6
	}
 800c6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c6e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c6e4:	b143      	cbz	r3, 800c6f8 <vTaskNotifyGiveFromISR+0x64>
	__asm volatile
 800c6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ea:	f383 8811 	msr	BASEPRI, r3
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f3bf 8f4f 	dsb	sy
 800c6f6:	e7fe      	b.n	800c6f6 <vTaskNotifyGiveFromISR+0x62>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6f8:	4b13      	ldr	r3, [pc, #76]	; (800c748 <vTaskNotifyGiveFromISR+0xb4>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	b9f3      	cbnz	r3, 800c73c <vTaskNotifyGiveFromISR+0xa8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6fe:	1d27      	adds	r7, r4, #4
 800c700:	4638      	mov	r0, r7
 800c702:	f7fe fa4d 	bl	800aba0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c706:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c708:	4a10      	ldr	r2, [pc, #64]	; (800c74c <vTaskNotifyGiveFromISR+0xb8>)
 800c70a:	6812      	ldr	r2, [r2, #0]
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d901      	bls.n	800c714 <vTaskNotifyGiveFromISR+0x80>
 800c710:	4a0e      	ldr	r2, [pc, #56]	; (800c74c <vTaskNotifyGiveFromISR+0xb8>)
 800c712:	6013      	str	r3, [r2, #0]
 800c714:	4639      	mov	r1, r7
 800c716:	4a0e      	ldr	r2, [pc, #56]	; (800c750 <vTaskNotifyGiveFromISR+0xbc>)
 800c718:	2014      	movs	r0, #20
 800c71a:	fb00 2003 	mla	r0, r0, r3, r2
 800c71e:	f7fe fa19 	bl	800ab54 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c722:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c724:	4b0b      	ldr	r3, [pc, #44]	; (800c754 <vTaskNotifyGiveFromISR+0xc0>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d9d6      	bls.n	800c6dc <vTaskNotifyGiveFromISR+0x48>
					if( pxHigherPriorityTaskWoken != NULL )
 800c72e:	b10d      	cbz	r5, 800c734 <vTaskNotifyGiveFromISR+0xa0>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c730:	2301      	movs	r3, #1
 800c732:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 800c734:	4b08      	ldr	r3, [pc, #32]	; (800c758 <vTaskNotifyGiveFromISR+0xc4>)
 800c736:	2201      	movs	r2, #1
 800c738:	601a      	str	r2, [r3, #0]
 800c73a:	e7cf      	b.n	800c6dc <vTaskNotifyGiveFromISR+0x48>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c73c:	f104 0118 	add.w	r1, r4, #24
 800c740:	4806      	ldr	r0, [pc, #24]	; (800c75c <vTaskNotifyGiveFromISR+0xc8>)
 800c742:	f7fe fa07 	bl	800ab54 <vListInsertEnd>
 800c746:	e7ec      	b.n	800c722 <vTaskNotifyGiveFromISR+0x8e>
 800c748:	200037a0 	.word	0x200037a0
 800c74c:	200037a8 	.word	0x200037a8
 800c750:	20003330 	.word	0x20003330
 800c754:	20003324 	.word	0x20003324
 800c758:	20003820 	.word	0x20003820
 800c75c:	200037dc 	.word	0x200037dc

0800c760 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c760:	4b06      	ldr	r3, [pc, #24]	; (800c77c <prvGetNextExpireTime+0x1c>)
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	6813      	ldr	r3, [r2, #0]
 800c766:	b92b      	cbnz	r3, 800c774 <prvGetNextExpireTime+0x14>
 800c768:	2301      	movs	r3, #1
 800c76a:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c76c:	b923      	cbnz	r3, 800c778 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c76e:	68d3      	ldr	r3, [r2, #12]
 800c770:	6818      	ldr	r0, [r3, #0]
 800c772:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c774:	2300      	movs	r3, #0
 800c776:	e7f8      	b.n	800c76a <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c778:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800c77a:	4770      	bx	lr
 800c77c:	20003824 	.word	0x20003824

0800c780 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c780:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c782:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c784:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c786:	4291      	cmp	r1, r2
 800c788:	d80c      	bhi.n	800c7a4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c78a:	1ad2      	subs	r2, r2, r3
 800c78c:	6983      	ldr	r3, [r0, #24]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d301      	bcc.n	800c796 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c792:	2001      	movs	r0, #1
 800c794:	e010      	b.n	800c7b8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c796:	1d01      	adds	r1, r0, #4
 800c798:	4b09      	ldr	r3, [pc, #36]	; (800c7c0 <prvInsertTimerInActiveList+0x40>)
 800c79a:	6818      	ldr	r0, [r3, #0]
 800c79c:	f7fe f9e6 	bl	800ab6c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	e009      	b.n	800c7b8 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d201      	bcs.n	800c7ac <prvInsertTimerInActiveList+0x2c>
 800c7a8:	4299      	cmp	r1, r3
 800c7aa:	d206      	bcs.n	800c7ba <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7ac:	1d01      	adds	r1, r0, #4
 800c7ae:	4b05      	ldr	r3, [pc, #20]	; (800c7c4 <prvInsertTimerInActiveList+0x44>)
 800c7b0:	6818      	ldr	r0, [r3, #0]
 800c7b2:	f7fe f9db 	bl	800ab6c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800c7b6:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800c7b8:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 800c7ba:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800c7bc:	e7fc      	b.n	800c7b8 <prvInsertTimerInActiveList+0x38>
 800c7be:	bf00      	nop
 800c7c0:	20003828 	.word	0x20003828
 800c7c4:	20003824 	.word	0x20003824

0800c7c8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c7c8:	b530      	push	{r4, r5, lr}
 800c7ca:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c7cc:	f000 fad2 	bl	800cd74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c7d0:	4b11      	ldr	r3, [pc, #68]	; (800c818 <prvCheckForValidListAndQueue+0x50>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	b11b      	cbz	r3, 800c7de <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c7d6:	f000 faef 	bl	800cdb8 <vPortExitCritical>
}
 800c7da:	b003      	add	sp, #12
 800c7dc:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800c7de:	4d0f      	ldr	r5, [pc, #60]	; (800c81c <prvCheckForValidListAndQueue+0x54>)
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	f7fe f9a9 	bl	800ab38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c7e6:	4c0e      	ldr	r4, [pc, #56]	; (800c820 <prvCheckForValidListAndQueue+0x58>)
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f7fe f9a5 	bl	800ab38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c7ee:	4b0d      	ldr	r3, [pc, #52]	; (800c824 <prvCheckForValidListAndQueue+0x5c>)
 800c7f0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c7f2:	4b0d      	ldr	r3, [pc, #52]	; (800c828 <prvCheckForValidListAndQueue+0x60>)
 800c7f4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	4b0c      	ldr	r3, [pc, #48]	; (800c82c <prvCheckForValidListAndQueue+0x64>)
 800c7fc:	4a0c      	ldr	r2, [pc, #48]	; (800c830 <prvCheckForValidListAndQueue+0x68>)
 800c7fe:	210c      	movs	r1, #12
 800c800:	200a      	movs	r0, #10
 800c802:	f7fe fade 	bl	800adc2 <xQueueGenericCreateStatic>
 800c806:	4b04      	ldr	r3, [pc, #16]	; (800c818 <prvCheckForValidListAndQueue+0x50>)
 800c808:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d0e3      	beq.n	800c7d6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c80e:	4909      	ldr	r1, [pc, #36]	; (800c834 <prvCheckForValidListAndQueue+0x6c>)
 800c810:	f7fe fe0c 	bl	800b42c <vQueueAddToRegistry>
 800c814:	e7df      	b.n	800c7d6 <prvCheckForValidListAndQueue+0xe>
 800c816:	bf00      	nop
 800c818:	20003920 	.word	0x20003920
 800c81c:	200038a4 	.word	0x200038a4
 800c820:	200038b8 	.word	0x200038b8
 800c824:	20003824 	.word	0x20003824
 800c828:	20003828 	.word	0x20003828
 800c82c:	200038d0 	.word	0x200038d0
 800c830:	2000382c 	.word	0x2000382c
 800c834:	0800f770 	.word	0x0800f770

0800c838 <prvInitialiseNewTimer>:
{
 800c838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c83c:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c83e:	b941      	cbnz	r1, 800c852 <prvInitialiseNewTimer+0x1a>
 800c840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	e7fe      	b.n	800c850 <prvInitialiseNewTimer+0x18>
 800c852:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
 800c854:	b1a4      	cbz	r4, 800c880 <prvInitialiseNewTimer+0x48>
 800c856:	461e      	mov	r6, r3
 800c858:	4615      	mov	r5, r2
 800c85a:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
 800c85c:	f7ff ffb4 	bl	800c7c8 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 800c860:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c864:	61a7      	str	r7, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c866:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c868:	9b06      	ldr	r3, [sp, #24]
 800c86a:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c86c:	1d20      	adds	r0, r4, #4
 800c86e:	f7fe f96e 	bl	800ab4e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c872:	b12d      	cbz	r5, 800c880 <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c874:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c878:	f043 0304 	orr.w	r3, r3, #4
 800c87c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 800c880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c884 <xTimerCreateTimerTask>:
{
 800c884:	b510      	push	{r4, lr}
 800c886:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800c888:	f7ff ff9e 	bl	800c7c8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800c88c:	4b12      	ldr	r3, [pc, #72]	; (800c8d8 <xTimerCreateTimerTask+0x54>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	b1cb      	cbz	r3, 800c8c6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c892:	2400      	movs	r4, #0
 800c894:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c896:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c898:	aa07      	add	r2, sp, #28
 800c89a:	a906      	add	r1, sp, #24
 800c89c:	a805      	add	r0, sp, #20
 800c89e:	f7fe f93f 	bl	800ab20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c8a2:	9b05      	ldr	r3, [sp, #20]
 800c8a4:	9302      	str	r3, [sp, #8]
 800c8a6:	9b06      	ldr	r3, [sp, #24]
 800c8a8:	9301      	str	r3, [sp, #4]
 800c8aa:	2302      	movs	r3, #2
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	4623      	mov	r3, r4
 800c8b0:	9a07      	ldr	r2, [sp, #28]
 800c8b2:	490a      	ldr	r1, [pc, #40]	; (800c8dc <xTimerCreateTimerTask+0x58>)
 800c8b4:	480a      	ldr	r0, [pc, #40]	; (800c8e0 <xTimerCreateTimerTask+0x5c>)
 800c8b6:	f7fe ff96 	bl	800b7e6 <xTaskCreateStatic>
 800c8ba:	4b0a      	ldr	r3, [pc, #40]	; (800c8e4 <xTimerCreateTimerTask+0x60>)
 800c8bc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800c8be:	b110      	cbz	r0, 800c8c6 <xTimerCreateTimerTask+0x42>
}
 800c8c0:	2001      	movs	r0, #1
 800c8c2:	b008      	add	sp, #32
 800c8c4:	bd10      	pop	{r4, pc}
 800c8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ca:	f383 8811 	msr	BASEPRI, r3
 800c8ce:	f3bf 8f6f 	isb	sy
 800c8d2:	f3bf 8f4f 	dsb	sy
 800c8d6:	e7fe      	b.n	800c8d6 <xTimerCreateTimerTask+0x52>
 800c8d8:	20003920 	.word	0x20003920
 800c8dc:	0800f778 	.word	0x0800f778
 800c8e0:	0800cc61 	.word	0x0800cc61
 800c8e4:	20003924 	.word	0x20003924

0800c8e8 <xTimerCreate>:
	{
 800c8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ec:	b082      	sub	sp, #8
 800c8ee:	4605      	mov	r5, r0
 800c8f0:	460e      	mov	r6, r1
 800c8f2:	4617      	mov	r7, r2
 800c8f4:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c8f6:	202c      	movs	r0, #44	; 0x2c
 800c8f8:	f000 fbf2 	bl	800d0e0 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	b158      	cbz	r0, 800c918 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 800c900:	2300      	movs	r3, #0
 800c902:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c906:	9001      	str	r0, [sp, #4]
 800c908:	9b08      	ldr	r3, [sp, #32]
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	4643      	mov	r3, r8
 800c90e:	463a      	mov	r2, r7
 800c910:	4631      	mov	r1, r6
 800c912:	4628      	mov	r0, r5
 800c914:	f7ff ff90 	bl	800c838 <prvInitialiseNewTimer>
	}
 800c918:	4620      	mov	r0, r4
 800c91a:	b002      	add	sp, #8
 800c91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c920 <xTimerCreateStatic>:
	{
 800c920:	b530      	push	{r4, r5, lr}
 800c922:	b085      	sub	sp, #20
 800c924:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c926:	252c      	movs	r5, #44	; 0x2c
 800c928:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c92a:	9d03      	ldr	r5, [sp, #12]
 800c92c:	2d2c      	cmp	r5, #44	; 0x2c
 800c92e:	d008      	beq.n	800c942 <xTimerCreateStatic+0x22>
 800c930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c934:	f383 8811 	msr	BASEPRI, r3
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	e7fe      	b.n	800c940 <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c942:	9d03      	ldr	r5, [sp, #12]
		configASSERT( pxTimerBuffer );
 800c944:	b944      	cbnz	r4, 800c958 <xTimerCreateStatic+0x38>
 800c946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94a:	f383 8811 	msr	BASEPRI, r3
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f3bf 8f4f 	dsb	sy
 800c956:	e7fe      	b.n	800c956 <xTimerCreateStatic+0x36>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c958:	2502      	movs	r5, #2
 800c95a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c95e:	9401      	str	r4, [sp, #4]
 800c960:	9d08      	ldr	r5, [sp, #32]
 800c962:	9500      	str	r5, [sp, #0]
 800c964:	f7ff ff68 	bl	800c838 <prvInitialiseNewTimer>
	}
 800c968:	4620      	mov	r0, r4
 800c96a:	b005      	add	sp, #20
 800c96c:	bd30      	pop	{r4, r5, pc}
	...

0800c970 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800c970:	b1c8      	cbz	r0, 800c9a6 <xTimerGenericCommand+0x36>
{
 800c972:	b530      	push	{r4, r5, lr}
 800c974:	b085      	sub	sp, #20
 800c976:	4615      	mov	r5, r2
 800c978:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 800c97a:	4a17      	ldr	r2, [pc, #92]	; (800c9d8 <xTimerGenericCommand+0x68>)
 800c97c:	6810      	ldr	r0, [r2, #0]
 800c97e:	b340      	cbz	r0, 800c9d2 <xTimerGenericCommand+0x62>
 800c980:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800c982:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c984:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c986:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c988:	2905      	cmp	r1, #5
 800c98a:	dc1d      	bgt.n	800c9c8 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c98c:	f7ff fc12 	bl	800c1b4 <xTaskGetSchedulerState>
 800c990:	2802      	cmp	r0, #2
 800c992:	d011      	beq.n	800c9b8 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c994:	2300      	movs	r3, #0
 800c996:	461a      	mov	r2, r3
 800c998:	a901      	add	r1, sp, #4
 800c99a:	480f      	ldr	r0, [pc, #60]	; (800c9d8 <xTimerGenericCommand+0x68>)
 800c99c:	6800      	ldr	r0, [r0, #0]
 800c99e:	f7fe fa81 	bl	800aea4 <xQueueGenericSend>
}
 800c9a2:	b005      	add	sp, #20
 800c9a4:	bd30      	pop	{r4, r5, pc}
 800c9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9aa:	f383 8811 	msr	BASEPRI, r3
 800c9ae:	f3bf 8f6f 	isb	sy
 800c9b2:	f3bf 8f4f 	dsb	sy
 800c9b6:	e7fe      	b.n	800c9b6 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	9a08      	ldr	r2, [sp, #32]
 800c9bc:	a901      	add	r1, sp, #4
 800c9be:	4806      	ldr	r0, [pc, #24]	; (800c9d8 <xTimerGenericCommand+0x68>)
 800c9c0:	6800      	ldr	r0, [r0, #0]
 800c9c2:	f7fe fa6f 	bl	800aea4 <xQueueGenericSend>
 800c9c6:	e7ec      	b.n	800c9a2 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	a901      	add	r1, sp, #4
 800c9cc:	f7fe fb4e 	bl	800b06c <xQueueGenericSendFromISR>
 800c9d0:	e7e7      	b.n	800c9a2 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 800c9d2:	2000      	movs	r0, #0
	return xReturn;
 800c9d4:	e7e5      	b.n	800c9a2 <xTimerGenericCommand+0x32>
 800c9d6:	bf00      	nop
 800c9d8:	20003920 	.word	0x20003920

0800c9dc <prvSwitchTimerLists>:
{
 800c9dc:	b570      	push	{r4, r5, r6, lr}
 800c9de:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9e0:	4b1b      	ldr	r3, [pc, #108]	; (800ca50 <prvSwitchTimerLists+0x74>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	b362      	cbz	r2, 800ca42 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9ec:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9ee:	1d25      	adds	r5, r4, #4
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	f7fe f8d5 	bl	800aba0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9f6:	6a23      	ldr	r3, [r4, #32]
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9fc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ca00:	f013 0f04 	tst.w	r3, #4
 800ca04:	d0ec      	beq.n	800c9e0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca06:	69a3      	ldr	r3, [r4, #24]
 800ca08:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800ca0a:	429e      	cmp	r6, r3
 800ca0c:	d207      	bcs.n	800ca1e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ca0e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca10:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca12:	4629      	mov	r1, r5
 800ca14:	4b0e      	ldr	r3, [pc, #56]	; (800ca50 <prvSwitchTimerLists+0x74>)
 800ca16:	6818      	ldr	r0, [r3, #0]
 800ca18:	f7fe f8a8 	bl	800ab6c <vListInsert>
 800ca1c:	e7e0      	b.n	800c9e0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca1e:	2100      	movs	r1, #0
 800ca20:	9100      	str	r1, [sp, #0]
 800ca22:	460b      	mov	r3, r1
 800ca24:	4632      	mov	r2, r6
 800ca26:	4620      	mov	r0, r4
 800ca28:	f7ff ffa2 	bl	800c970 <xTimerGenericCommand>
				configASSERT( xResult );
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d1d7      	bne.n	800c9e0 <prvSwitchTimerLists+0x4>
 800ca30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca34:	f383 8811 	msr	BASEPRI, r3
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	e7fe      	b.n	800ca40 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800ca42:	4a04      	ldr	r2, [pc, #16]	; (800ca54 <prvSwitchTimerLists+0x78>)
 800ca44:	6810      	ldr	r0, [r2, #0]
 800ca46:	4902      	ldr	r1, [pc, #8]	; (800ca50 <prvSwitchTimerLists+0x74>)
 800ca48:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800ca4a:	6013      	str	r3, [r2, #0]
}
 800ca4c:	b002      	add	sp, #8
 800ca4e:	bd70      	pop	{r4, r5, r6, pc}
 800ca50:	20003824 	.word	0x20003824
 800ca54:	20003828 	.word	0x20003828

0800ca58 <prvSampleTimeNow>:
{
 800ca58:	b538      	push	{r3, r4, r5, lr}
 800ca5a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800ca5c:	f7fe ffce 	bl	800b9fc <xTaskGetTickCount>
 800ca60:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800ca62:	4b07      	ldr	r3, [pc, #28]	; (800ca80 <prvSampleTimeNow+0x28>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4283      	cmp	r3, r0
 800ca68:	d805      	bhi.n	800ca76 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800ca6e:	4b04      	ldr	r3, [pc, #16]	; (800ca80 <prvSampleTimeNow+0x28>)
 800ca70:	601c      	str	r4, [r3, #0]
}
 800ca72:	4620      	mov	r0, r4
 800ca74:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800ca76:	f7ff ffb1 	bl	800c9dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	602b      	str	r3, [r5, #0]
 800ca7e:	e7f6      	b.n	800ca6e <prvSampleTimeNow+0x16>
 800ca80:	200038cc 	.word	0x200038cc

0800ca84 <prvProcessExpiredTimer>:
{
 800ca84:	b570      	push	{r4, r5, r6, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	4605      	mov	r5, r0
 800ca8a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca8c:	4b17      	ldr	r3, [pc, #92]	; (800caec <prvProcessExpiredTimer+0x68>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca94:	1d20      	adds	r0, r4, #4
 800ca96:	f7fe f883 	bl	800aba0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca9a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ca9e:	f013 0f04 	tst.w	r3, #4
 800caa2:	d108      	bne.n	800cab6 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800caa4:	f023 0301 	bic.w	r3, r3, #1
 800caa8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800caac:	6a23      	ldr	r3, [r4, #32]
 800caae:	4620      	mov	r0, r4
 800cab0:	4798      	blx	r3
}
 800cab2:	b002      	add	sp, #8
 800cab4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cab6:	69a1      	ldr	r1, [r4, #24]
 800cab8:	462b      	mov	r3, r5
 800caba:	4632      	mov	r2, r6
 800cabc:	4429      	add	r1, r5
 800cabe:	4620      	mov	r0, r4
 800cac0:	f7ff fe5e 	bl	800c780 <prvInsertTimerInActiveList>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	d0f1      	beq.n	800caac <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cac8:	2100      	movs	r1, #0
 800caca:	9100      	str	r1, [sp, #0]
 800cacc:	460b      	mov	r3, r1
 800cace:	462a      	mov	r2, r5
 800cad0:	4620      	mov	r0, r4
 800cad2:	f7ff ff4d 	bl	800c970 <xTimerGenericCommand>
			configASSERT( xResult );
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d1e8      	bne.n	800caac <prvProcessExpiredTimer+0x28>
 800cada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cade:	f383 8811 	msr	BASEPRI, r3
 800cae2:	f3bf 8f6f 	isb	sy
 800cae6:	f3bf 8f4f 	dsb	sy
 800caea:	e7fe      	b.n	800caea <prvProcessExpiredTimer+0x66>
 800caec:	20003824 	.word	0x20003824

0800caf0 <prvProcessTimerOrBlockTask>:
{
 800caf0:	b570      	push	{r4, r5, r6, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	4606      	mov	r6, r0
 800caf6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800caf8:	f7fe ff78 	bl	800b9ec <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cafc:	a801      	add	r0, sp, #4
 800cafe:	f7ff ffab 	bl	800ca58 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800cb02:	9b01      	ldr	r3, [sp, #4]
 800cb04:	bb23      	cbnz	r3, 800cb50 <prvProcessTimerOrBlockTask+0x60>
 800cb06:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cb08:	b90c      	cbnz	r4, 800cb0e <prvProcessTimerOrBlockTask+0x1e>
 800cb0a:	42b0      	cmp	r0, r6
 800cb0c:	d217      	bcs.n	800cb3e <prvProcessTimerOrBlockTask+0x4e>
				if( xListWasEmpty != pdFALSE )
 800cb0e:	b124      	cbz	r4, 800cb1a <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cb10:	4b11      	ldr	r3, [pc, #68]	; (800cb58 <prvProcessTimerOrBlockTask+0x68>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	b9cb      	cbnz	r3, 800cb4c <prvProcessTimerOrBlockTask+0x5c>
 800cb18:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cb1a:	4622      	mov	r2, r4
 800cb1c:	1b71      	subs	r1, r6, r5
 800cb1e:	4b0f      	ldr	r3, [pc, #60]	; (800cb5c <prvProcessTimerOrBlockTask+0x6c>)
 800cb20:	6818      	ldr	r0, [r3, #0]
 800cb22:	f7fe fc97 	bl	800b454 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cb26:	f7fe fffb 	bl	800bb20 <xTaskResumeAll>
 800cb2a:	b998      	cbnz	r0, 800cb54 <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 800cb2c:	4b0c      	ldr	r3, [pc, #48]	; (800cb60 <prvProcessTimerOrBlockTask+0x70>)
 800cb2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb32:	601a      	str	r2, [r3, #0]
 800cb34:	f3bf 8f4f 	dsb	sy
 800cb38:	f3bf 8f6f 	isb	sy
 800cb3c:	e00a      	b.n	800cb54 <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
 800cb3e:	f7fe ffef 	bl	800bb20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cb42:	4629      	mov	r1, r5
 800cb44:	4630      	mov	r0, r6
 800cb46:	f7ff ff9d 	bl	800ca84 <prvProcessExpiredTimer>
 800cb4a:	e003      	b.n	800cb54 <prvProcessTimerOrBlockTask+0x64>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cb4c:	2400      	movs	r4, #0
 800cb4e:	e7e4      	b.n	800cb1a <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 800cb50:	f7fe ffe6 	bl	800bb20 <xTaskResumeAll>
}
 800cb54:	b002      	add	sp, #8
 800cb56:	bd70      	pop	{r4, r5, r6, pc}
 800cb58:	20003828 	.word	0x20003828
 800cb5c:	20003920 	.word	0x20003920
 800cb60:	e000ed04 	.word	0xe000ed04

0800cb64 <prvProcessReceivedCommands>:
{
 800cb64:	b530      	push	{r4, r5, lr}
 800cb66:	b087      	sub	sp, #28
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb68:	2200      	movs	r2, #0
 800cb6a:	a903      	add	r1, sp, #12
 800cb6c:	4b3b      	ldr	r3, [pc, #236]	; (800cc5c <prvProcessReceivedCommands+0xf8>)
 800cb6e:	6818      	ldr	r0, [r3, #0]
 800cb70:	f7fe fae2 	bl	800b138 <xQueueReceive>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d06f      	beq.n	800cc58 <prvProcessReceivedCommands+0xf4>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cb78:	9b03      	ldr	r3, [sp, #12]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	dbf4      	blt.n	800cb68 <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cb7e:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cb80:	6963      	ldr	r3, [r4, #20]
 800cb82:	b113      	cbz	r3, 800cb8a <prvProcessReceivedCommands+0x26>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb84:	1d20      	adds	r0, r4, #4
 800cb86:	f7fe f80b 	bl	800aba0 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb8a:	a802      	add	r0, sp, #8
 800cb8c:	f7ff ff64 	bl	800ca58 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800cb90:	9b03      	ldr	r3, [sp, #12]
 800cb92:	2b09      	cmp	r3, #9
 800cb94:	d8e8      	bhi.n	800cb68 <prvProcessReceivedCommands+0x4>
 800cb96:	e8df f003 	tbb	[pc, r3]
 800cb9a:	0505      	.short	0x0505
 800cb9c:	51383105 	.word	0x51383105
 800cba0:	38310505 	.word	0x38310505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cba4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cba8:	f043 0301 	orr.w	r3, r3, #1
 800cbac:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cbb0:	9904      	ldr	r1, [sp, #16]
 800cbb2:	69a5      	ldr	r5, [r4, #24]
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	4429      	add	r1, r5
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f7ff fde0 	bl	800c780 <prvInsertTimerInActiveList>
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	d0d1      	beq.n	800cb68 <prvProcessReceivedCommands+0x4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbc4:	6a23      	ldr	r3, [r4, #32]
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cbca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cbce:	f013 0f04 	tst.w	r3, #4
 800cbd2:	d0c9      	beq.n	800cb68 <prvProcessReceivedCommands+0x4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cbd4:	69a2      	ldr	r2, [r4, #24]
 800cbd6:	2100      	movs	r1, #0
 800cbd8:	9100      	str	r1, [sp, #0]
 800cbda:	460b      	mov	r3, r1
 800cbdc:	9804      	ldr	r0, [sp, #16]
 800cbde:	4402      	add	r2, r0
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	f7ff fec5 	bl	800c970 <xTimerGenericCommand>
							configASSERT( xResult );
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d1be      	bne.n	800cb68 <prvProcessReceivedCommands+0x4>
 800cbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbee:	f383 8811 	msr	BASEPRI, r3
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	f3bf 8f4f 	dsb	sy
 800cbfa:	e7fe      	b.n	800cbfa <prvProcessReceivedCommands+0x96>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cbfc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cc00:	f023 0301 	bic.w	r3, r3, #1
 800cc04:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800cc08:	e7ae      	b.n	800cb68 <prvProcessReceivedCommands+0x4>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc0a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cc0e:	f043 0301 	orr.w	r3, r3, #1
 800cc12:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cc16:	9904      	ldr	r1, [sp, #16]
 800cc18:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cc1a:	b131      	cbz	r1, 800cc2a <prvProcessReceivedCommands+0xc6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	4602      	mov	r2, r0
 800cc20:	4401      	add	r1, r0
 800cc22:	4620      	mov	r0, r4
 800cc24:	f7ff fdac 	bl	800c780 <prvInsertTimerInActiveList>
					break;
 800cc28:	e79e      	b.n	800cb68 <prvProcessReceivedCommands+0x4>
 800cc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2e:	f383 8811 	msr	BASEPRI, r3
 800cc32:	f3bf 8f6f 	isb	sy
 800cc36:	f3bf 8f4f 	dsb	sy
 800cc3a:	e7fe      	b.n	800cc3a <prvProcessReceivedCommands+0xd6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cc3c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cc40:	f013 0f02 	tst.w	r3, #2
 800cc44:	d004      	beq.n	800cc50 <prvProcessReceivedCommands+0xec>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc46:	f023 0301 	bic.w	r3, r3, #1
 800cc4a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800cc4e:	e78b      	b.n	800cb68 <prvProcessReceivedCommands+0x4>
							vPortFree( pxTimer );
 800cc50:	4620      	mov	r0, r4
 800cc52:	f000 fac9 	bl	800d1e8 <vPortFree>
 800cc56:	e787      	b.n	800cb68 <prvProcessReceivedCommands+0x4>
}
 800cc58:	b007      	add	sp, #28
 800cc5a:	bd30      	pop	{r4, r5, pc}
 800cc5c:	20003920 	.word	0x20003920

0800cc60 <prvTimerTask>:
{
 800cc60:	b500      	push	{lr}
 800cc62:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cc64:	a801      	add	r0, sp, #4
 800cc66:	f7ff fd7b 	bl	800c760 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cc6a:	9901      	ldr	r1, [sp, #4]
 800cc6c:	f7ff ff40 	bl	800caf0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800cc70:	f7ff ff78 	bl	800cb64 <prvProcessReceivedCommands>
 800cc74:	e7f6      	b.n	800cc64 <prvTimerTask+0x4>

0800cc76 <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800cc76:	b940      	cbnz	r0, 800cc8a <pvTimerGetTimerID+0x14>
 800cc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7c:	f383 8811 	msr	BASEPRI, r3
 800cc80:	f3bf 8f6f 	isb	sy
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	e7fe      	b.n	800cc88 <pvTimerGetTimerID+0x12>
{
 800cc8a:	b510      	push	{r4, lr}
 800cc8c:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
 800cc8e:	f000 f871 	bl	800cd74 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800cc92:	69e4      	ldr	r4, [r4, #28]
	}
	taskEXIT_CRITICAL();
 800cc94:	f000 f890 	bl	800cdb8 <vPortExitCritical>

	return pvReturn;
}
 800cc98:	4620      	mov	r0, r4
 800cc9a:	bd10      	pop	{r4, pc}

0800cc9c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc9c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cca2:	4b0d      	ldr	r3, [pc, #52]	; (800ccd8 <prvTaskExitError+0x3c>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccaa:	d008      	beq.n	800ccbe <prvTaskExitError+0x22>
 800ccac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb0:	f383 8811 	msr	BASEPRI, r3
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	f3bf 8f4f 	dsb	sy
 800ccbc:	e7fe      	b.n	800ccbc <prvTaskExitError+0x20>
 800ccbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc2:	f383 8811 	msr	BASEPRI, r3
 800ccc6:	f3bf 8f6f 	isb	sy
 800ccca:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ccce:	9b01      	ldr	r3, [sp, #4]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d0fc      	beq.n	800ccce <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ccd4:	b002      	add	sp, #8
 800ccd6:	4770      	bx	lr
 800ccd8:	20002458 	.word	0x20002458

0800ccdc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ccdc:	4808      	ldr	r0, [pc, #32]	; (800cd00 <prvPortStartFirstTask+0x24>)
 800ccde:	6800      	ldr	r0, [r0, #0]
 800cce0:	6800      	ldr	r0, [r0, #0]
 800cce2:	f380 8808 	msr	MSP, r0
 800cce6:	f04f 0000 	mov.w	r0, #0
 800ccea:	f380 8814 	msr	CONTROL, r0
 800ccee:	b662      	cpsie	i
 800ccf0:	b661      	cpsie	f
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	f3bf 8f6f 	isb	sy
 800ccfa:	df00      	svc	0
 800ccfc:	bf00      	nop
 800ccfe:	0000      	.short	0x0000
 800cd00:	e000ed08 	.word	0xe000ed08

0800cd04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cd14 <vPortEnableVFP+0x10>
 800cd08:	6801      	ldr	r1, [r0, #0]
 800cd0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cd0e:	6001      	str	r1, [r0, #0]
 800cd10:	4770      	bx	lr
 800cd12:	0000      	.short	0x0000
 800cd14:	e000ed88 	.word	0xe000ed88

0800cd18 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cd18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cd1c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cd20:	f021 0101 	bic.w	r1, r1, #1
 800cd24:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cd28:	4b05      	ldr	r3, [pc, #20]	; (800cd40 <pxPortInitialiseStack+0x28>)
 800cd2a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cd2e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cd32:	f06f 0302 	mvn.w	r3, #2
 800cd36:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800cd3a:	3844      	subs	r0, #68	; 0x44
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop
 800cd40:	0800cc9d 	.word	0x0800cc9d
	...

0800cd50 <SVC_Handler>:
	__asm volatile (
 800cd50:	4b07      	ldr	r3, [pc, #28]	; (800cd70 <pxCurrentTCBConst2>)
 800cd52:	6819      	ldr	r1, [r3, #0]
 800cd54:	6808      	ldr	r0, [r1, #0]
 800cd56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5a:	f380 8809 	msr	PSP, r0
 800cd5e:	f3bf 8f6f 	isb	sy
 800cd62:	f04f 0000 	mov.w	r0, #0
 800cd66:	f380 8811 	msr	BASEPRI, r0
 800cd6a:	4770      	bx	lr
 800cd6c:	f3af 8000 	nop.w

0800cd70 <pxCurrentTCBConst2>:
 800cd70:	20003324 	.word	0x20003324

0800cd74 <vPortEnterCritical>:
 800cd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd78:	f383 8811 	msr	BASEPRI, r3
 800cd7c:	f3bf 8f6f 	isb	sy
 800cd80:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800cd84:	4a0a      	ldr	r2, [pc, #40]	; (800cdb0 <vPortEnterCritical+0x3c>)
 800cd86:	6813      	ldr	r3, [r2, #0]
 800cd88:	3301      	adds	r3, #1
 800cd8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d000      	beq.n	800cd92 <vPortEnterCritical+0x1e>
}
 800cd90:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd92:	4b08      	ldr	r3, [pc, #32]	; (800cdb4 <vPortEnterCritical+0x40>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cd9a:	d0f9      	beq.n	800cd90 <vPortEnterCritical+0x1c>
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	e7fe      	b.n	800cdac <vPortEnterCritical+0x38>
 800cdae:	bf00      	nop
 800cdb0:	20002458 	.word	0x20002458
 800cdb4:	e000ed04 	.word	0xe000ed04

0800cdb8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800cdb8:	4b09      	ldr	r3, [pc, #36]	; (800cde0 <vPortExitCritical+0x28>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	b943      	cbnz	r3, 800cdd0 <vPortExitCritical+0x18>
 800cdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc2:	f383 8811 	msr	BASEPRI, r3
 800cdc6:	f3bf 8f6f 	isb	sy
 800cdca:	f3bf 8f4f 	dsb	sy
 800cdce:	e7fe      	b.n	800cdce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	4a03      	ldr	r2, [pc, #12]	; (800cde0 <vPortExitCritical+0x28>)
 800cdd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cdd6:	b90b      	cbnz	r3, 800cddc <vPortExitCritical+0x24>
	__asm volatile
 800cdd8:	f383 8811 	msr	BASEPRI, r3
}
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	20002458 	.word	0x20002458
	...

0800cdf0 <PendSV_Handler>:
	__asm volatile
 800cdf0:	f3ef 8009 	mrs	r0, PSP
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	4b15      	ldr	r3, [pc, #84]	; (800ce50 <pxCurrentTCBConst>)
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	f01e 0f10 	tst.w	lr, #16
 800ce00:	bf08      	it	eq
 800ce02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce0a:	6010      	str	r0, [r2, #0]
 800ce0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce14:	f380 8811 	msr	BASEPRI, r0
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f7fe ff70 	bl	800bd04 <vTaskSwitchContext>
 800ce24:	f04f 0000 	mov.w	r0, #0
 800ce28:	f380 8811 	msr	BASEPRI, r0
 800ce2c:	bc09      	pop	{r0, r3}
 800ce2e:	6819      	ldr	r1, [r3, #0]
 800ce30:	6808      	ldr	r0, [r1, #0]
 800ce32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce36:	f01e 0f10 	tst.w	lr, #16
 800ce3a:	bf08      	it	eq
 800ce3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce40:	f380 8809 	msr	PSP, r0
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop
 800ce4c:	f3af 8000 	nop.w

0800ce50 <pxCurrentTCBConst>:
 800ce50:	20003324 	.word	0x20003324

0800ce54 <SysTick_Handler>:
{
 800ce54:	b508      	push	{r3, lr}
	__asm volatile
 800ce56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5a:	f383 8811 	msr	BASEPRI, r3
 800ce5e:	f3bf 8f6f 	isb	sy
 800ce62:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800ce66:	f7fe fdcf 	bl	800ba08 <xTaskIncrementTick>
 800ce6a:	b118      	cbz	r0, 800ce74 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce6c:	4b03      	ldr	r3, [pc, #12]	; (800ce7c <SysTick_Handler+0x28>)
 800ce6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce72:	601a      	str	r2, [r3, #0]
	__asm volatile
 800ce74:	2300      	movs	r3, #0
 800ce76:	f383 8811 	msr	BASEPRI, r3
}
 800ce7a:	bd08      	pop	{r3, pc}
 800ce7c:	e000ed04 	.word	0xe000ed04

0800ce80 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ce80:	4a08      	ldr	r2, [pc, #32]	; (800cea4 <vPortSetupTimerInterrupt+0x24>)
 800ce82:	2300      	movs	r3, #0
 800ce84:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ce86:	4908      	ldr	r1, [pc, #32]	; (800cea8 <vPortSetupTimerInterrupt+0x28>)
 800ce88:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ce8a:	4b08      	ldr	r3, [pc, #32]	; (800ceac <vPortSetupTimerInterrupt+0x2c>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4908      	ldr	r1, [pc, #32]	; (800ceb0 <vPortSetupTimerInterrupt+0x30>)
 800ce90:	fba1 1303 	umull	r1, r3, r1, r3
 800ce94:	099b      	lsrs	r3, r3, #6
 800ce96:	3b01      	subs	r3, #1
 800ce98:	4906      	ldr	r1, [pc, #24]	; (800ceb4 <vPortSetupTimerInterrupt+0x34>)
 800ce9a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ce9c:	2307      	movs	r3, #7
 800ce9e:	6013      	str	r3, [r2, #0]
}
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	e000e010 	.word	0xe000e010
 800cea8:	e000e018 	.word	0xe000e018
 800ceac:	2000244c 	.word	0x2000244c
 800ceb0:	10624dd3 	.word	0x10624dd3
 800ceb4:	e000e014 	.word	0xe000e014

0800ceb8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ceb8:	4b3a      	ldr	r3, [pc, #232]	; (800cfa4 <xPortStartScheduler+0xec>)
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	4b3a      	ldr	r3, [pc, #232]	; (800cfa8 <xPortStartScheduler+0xf0>)
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d00d      	beq.n	800cede <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cec2:	4b38      	ldr	r3, [pc, #224]	; (800cfa4 <xPortStartScheduler+0xec>)
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	4b39      	ldr	r3, [pc, #228]	; (800cfac <xPortStartScheduler+0xf4>)
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d111      	bne.n	800cef0 <xPortStartScheduler+0x38>
	__asm volatile
 800cecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	e7fe      	b.n	800cedc <xPortStartScheduler+0x24>
 800cede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	e7fe      	b.n	800ceee <xPortStartScheduler+0x36>
{
 800cef0:	b510      	push	{r4, lr}
 800cef2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cef4:	4b2e      	ldr	r3, [pc, #184]	; (800cfb0 <xPortStartScheduler+0xf8>)
 800cef6:	781a      	ldrb	r2, [r3, #0]
 800cef8:	b2d2      	uxtb	r2, r2
 800cefa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cefc:	22ff      	movs	r2, #255	; 0xff
 800cefe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cf08:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800cf0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cf10:	4a28      	ldr	r2, [pc, #160]	; (800cfb4 <xPortStartScheduler+0xfc>)
 800cf12:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cf14:	4b28      	ldr	r3, [pc, #160]	; (800cfb8 <xPortStartScheduler+0x100>)
 800cf16:	2207      	movs	r2, #7
 800cf18:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf1a:	e009      	b.n	800cf30 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800cf1c:	4a26      	ldr	r2, [pc, #152]	; (800cfb8 <xPortStartScheduler+0x100>)
 800cf1e:	6813      	ldr	r3, [r2, #0]
 800cf20:	3b01      	subs	r3, #1
 800cf22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cf24:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800cf28:	005b      	lsls	r3, r3, #1
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf30:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800cf34:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cf38:	d1f0      	bne.n	800cf1c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cf3a:	4b1f      	ldr	r3, [pc, #124]	; (800cfb8 <xPortStartScheduler+0x100>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b03      	cmp	r3, #3
 800cf40:	d008      	beq.n	800cf54 <xPortStartScheduler+0x9c>
 800cf42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf46:	f383 8811 	msr	BASEPRI, r3
 800cf4a:	f3bf 8f6f 	isb	sy
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	e7fe      	b.n	800cf52 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cf54:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cf56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cf5a:	4a17      	ldr	r2, [pc, #92]	; (800cfb8 <xPortStartScheduler+0x100>)
 800cf5c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cf5e:	9b01      	ldr	r3, [sp, #4]
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	4a13      	ldr	r2, [pc, #76]	; (800cfb0 <xPortStartScheduler+0xf8>)
 800cf64:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cf66:	4b15      	ldr	r3, [pc, #84]	; (800cfbc <xPortStartScheduler+0x104>)
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800cf6e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800cf76:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800cf78:	f7ff ff82 	bl	800ce80 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800cf7c:	2400      	movs	r4, #0
 800cf7e:	4b10      	ldr	r3, [pc, #64]	; (800cfc0 <xPortStartScheduler+0x108>)
 800cf80:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800cf82:	f7ff febf 	bl	800cd04 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cf86:	4a0f      	ldr	r2, [pc, #60]	; (800cfc4 <xPortStartScheduler+0x10c>)
 800cf88:	6813      	ldr	r3, [r2, #0]
 800cf8a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cf8e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800cf90:	f7ff fea4 	bl	800ccdc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800cf94:	f7fe feb6 	bl	800bd04 <vTaskSwitchContext>
	prvTaskExitError();
 800cf98:	f7ff fe80 	bl	800cc9c <prvTaskExitError>
}
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	b002      	add	sp, #8
 800cfa0:	bd10      	pop	{r4, pc}
 800cfa2:	bf00      	nop
 800cfa4:	e000ed00 	.word	0xe000ed00
 800cfa8:	410fc271 	.word	0x410fc271
 800cfac:	410fc270 	.word	0x410fc270
 800cfb0:	e000e400 	.word	0xe000e400
 800cfb4:	20003928 	.word	0x20003928
 800cfb8:	2000392c 	.word	0x2000392c
 800cfbc:	e000ed20 	.word	0xe000ed20
 800cfc0:	20002458 	.word	0x20002458
 800cfc4:	e000ef34 	.word	0xe000ef34

0800cfc8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cfc8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cfcc:	2b0f      	cmp	r3, #15
 800cfce:	d90f      	bls.n	800cff0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cfd0:	4a10      	ldr	r2, [pc, #64]	; (800d014 <vPortValidateInterruptPriority+0x4c>)
 800cfd2:	5c9b      	ldrb	r3, [r3, r2]
 800cfd4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cfd6:	4a10      	ldr	r2, [pc, #64]	; (800d018 <vPortValidateInterruptPriority+0x50>)
 800cfd8:	7812      	ldrb	r2, [r2, #0]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d908      	bls.n	800cff0 <vPortValidateInterruptPriority+0x28>
 800cfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	e7fe      	b.n	800cfee <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cff0:	4b0a      	ldr	r3, [pc, #40]	; (800d01c <vPortValidateInterruptPriority+0x54>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cff8:	4a09      	ldr	r2, [pc, #36]	; (800d020 <vPortValidateInterruptPriority+0x58>)
 800cffa:	6812      	ldr	r2, [r2, #0]
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d908      	bls.n	800d012 <vPortValidateInterruptPriority+0x4a>
 800d000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	e7fe      	b.n	800d010 <vPortValidateInterruptPriority+0x48>
	}
 800d012:	4770      	bx	lr
 800d014:	e000e3f0 	.word	0xe000e3f0
 800d018:	20003928 	.word	0x20003928
 800d01c:	e000ed0c 	.word	0xe000ed0c
 800d020:	2000392c 	.word	0x2000392c

0800d024 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d024:	4a12      	ldr	r2, [pc, #72]	; (800d070 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d026:	f012 0f07 	tst.w	r2, #7
 800d02a:	d01e      	beq.n	800d06a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d02c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d02e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d032:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 800d036:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d038:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d03a:	480e      	ldr	r0, [pc, #56]	; (800d074 <prvHeapInit+0x50>)
 800d03c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d03e:	2100      	movs	r1, #0
 800d040:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d042:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800d044:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d046:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800d04a:	480b      	ldr	r0, [pc, #44]	; (800d078 <prvHeapInit+0x54>)
 800d04c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800d04e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d050:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d052:	1a99      	subs	r1, r3, r2
 800d054:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d056:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d058:	4b08      	ldr	r3, [pc, #32]	; (800d07c <prvHeapInit+0x58>)
 800d05a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d05c:	4b08      	ldr	r3, [pc, #32]	; (800d080 <prvHeapInit+0x5c>)
 800d05e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d060:	4b08      	ldr	r3, [pc, #32]	; (800d084 <prvHeapInit+0x60>)
 800d062:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d066:	601a      	str	r2, [r3, #0]
}
 800d068:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d06a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d06e:	e7e4      	b.n	800d03a <prvHeapInit+0x16>
 800d070:	20000000 	.word	0x20000000
 800d074:	20003940 	.word	0x20003940
 800d078:	20003930 	.word	0x20003930
 800d07c:	2000393c 	.word	0x2000393c
 800d080:	20003938 	.word	0x20003938
 800d084:	20003934 	.word	0x20003934

0800d088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d088:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d08a:	4b13      	ldr	r3, [pc, #76]	; (800d0d8 <prvInsertBlockIntoFreeList+0x50>)
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	4282      	cmp	r2, r0
 800d090:	d31b      	bcc.n	800d0ca <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d092:	6859      	ldr	r1, [r3, #4]
 800d094:	185c      	adds	r4, r3, r1
 800d096:	4284      	cmp	r4, r0
 800d098:	d103      	bne.n	800d0a2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d09a:	6840      	ldr	r0, [r0, #4]
 800d09c:	4401      	add	r1, r0
 800d09e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d0a0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d0a2:	6841      	ldr	r1, [r0, #4]
 800d0a4:	1844      	adds	r4, r0, r1
 800d0a6:	42a2      	cmp	r2, r4
 800d0a8:	d113      	bne.n	800d0d2 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d0aa:	4c0c      	ldr	r4, [pc, #48]	; (800d0dc <prvInsertBlockIntoFreeList+0x54>)
 800d0ac:	6824      	ldr	r4, [r4, #0]
 800d0ae:	42a2      	cmp	r2, r4
 800d0b0:	d00d      	beq.n	800d0ce <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d0b2:	6852      	ldr	r2, [r2, #4]
 800d0b4:	4411      	add	r1, r2
 800d0b6:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	6812      	ldr	r2, [r2, #0]
 800d0bc:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d0be:	4298      	cmp	r0, r3
 800d0c0:	d000      	beq.n	800d0c4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d0c2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0c8:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d0ca:	4613      	mov	r3, r2
 800d0cc:	e7de      	b.n	800d08c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d0ce:	6004      	str	r4, [r0, #0]
 800d0d0:	e7f5      	b.n	800d0be <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d0d2:	6002      	str	r2, [r0, #0]
 800d0d4:	e7f3      	b.n	800d0be <prvInsertBlockIntoFreeList+0x36>
 800d0d6:	bf00      	nop
 800d0d8:	20003940 	.word	0x20003940
 800d0dc:	20003930 	.word	0x20003930

0800d0e0 <pvPortMalloc>:
{
 800d0e0:	b570      	push	{r4, r5, r6, lr}
 800d0e2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800d0e4:	f7fe fc82 	bl	800b9ec <vTaskSuspendAll>
		if( pxEnd == NULL )
 800d0e8:	4b3a      	ldr	r3, [pc, #232]	; (800d1d4 <pvPortMalloc+0xf4>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	b1bb      	cbz	r3, 800d11e <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d0ee:	4b3a      	ldr	r3, [pc, #232]	; (800d1d8 <pvPortMalloc+0xf8>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	421c      	tst	r4, r3
 800d0f4:	d163      	bne.n	800d1be <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 800d0f6:	b1ac      	cbz	r4, 800d124 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 800d0f8:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0fa:	f014 0f07 	tst.w	r4, #7
 800d0fe:	d011      	beq.n	800d124 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d100:	f024 0407 	bic.w	r4, r4, #7
 800d104:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d106:	f004 0307 	and.w	r3, r4, #7
 800d10a:	b15b      	cbz	r3, 800d124 <pvPortMalloc+0x44>
 800d10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d110:	f383 8811 	msr	BASEPRI, r3
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	e7fe      	b.n	800d11c <pvPortMalloc+0x3c>
			prvHeapInit();
 800d11e:	f7ff ff81 	bl	800d024 <prvHeapInit>
 800d122:	e7e4      	b.n	800d0ee <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d124:	2c00      	cmp	r4, #0
 800d126:	d04c      	beq.n	800d1c2 <pvPortMalloc+0xe2>
 800d128:	4b2c      	ldr	r3, [pc, #176]	; (800d1dc <pvPortMalloc+0xfc>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	42a3      	cmp	r3, r4
 800d12e:	d34a      	bcc.n	800d1c6 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 800d130:	4b2b      	ldr	r3, [pc, #172]	; (800d1e0 <pvPortMalloc+0x100>)
 800d132:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d134:	e001      	b.n	800d13a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 800d136:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800d138:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d13a:	686a      	ldr	r2, [r5, #4]
 800d13c:	42a2      	cmp	r2, r4
 800d13e:	d202      	bcs.n	800d146 <pvPortMalloc+0x66>
 800d140:	682a      	ldr	r2, [r5, #0]
 800d142:	2a00      	cmp	r2, #0
 800d144:	d1f7      	bne.n	800d136 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 800d146:	4a23      	ldr	r2, [pc, #140]	; (800d1d4 <pvPortMalloc+0xf4>)
 800d148:	6812      	ldr	r2, [r2, #0]
 800d14a:	42aa      	cmp	r2, r5
 800d14c:	d03d      	beq.n	800d1ca <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d14e:	681e      	ldr	r6, [r3, #0]
 800d150:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d152:	682a      	ldr	r2, [r5, #0]
 800d154:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d156:	686b      	ldr	r3, [r5, #4]
 800d158:	1b1b      	subs	r3, r3, r4
 800d15a:	2b10      	cmp	r3, #16
 800d15c:	d910      	bls.n	800d180 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d15e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d160:	f010 0f07 	tst.w	r0, #7
 800d164:	d008      	beq.n	800d178 <pvPortMalloc+0x98>
 800d166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16a:	f383 8811 	msr	BASEPRI, r3
 800d16e:	f3bf 8f6f 	isb	sy
 800d172:	f3bf 8f4f 	dsb	sy
 800d176:	e7fe      	b.n	800d176 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d178:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d17a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d17c:	f7ff ff84 	bl	800d088 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d180:	686a      	ldr	r2, [r5, #4]
 800d182:	4916      	ldr	r1, [pc, #88]	; (800d1dc <pvPortMalloc+0xfc>)
 800d184:	680b      	ldr	r3, [r1, #0]
 800d186:	1a9b      	subs	r3, r3, r2
 800d188:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d18a:	4916      	ldr	r1, [pc, #88]	; (800d1e4 <pvPortMalloc+0x104>)
 800d18c:	6809      	ldr	r1, [r1, #0]
 800d18e:	428b      	cmp	r3, r1
 800d190:	d201      	bcs.n	800d196 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d192:	4914      	ldr	r1, [pc, #80]	; (800d1e4 <pvPortMalloc+0x104>)
 800d194:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d196:	4b10      	ldr	r3, [pc, #64]	; (800d1d8 <pvPortMalloc+0xf8>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4313      	orrs	r3, r2
 800d19c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800d1a2:	f7fe fcbd 	bl	800bb20 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1a6:	f016 0f07 	tst.w	r6, #7
 800d1aa:	d010      	beq.n	800d1ce <pvPortMalloc+0xee>
 800d1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b0:	f383 8811 	msr	BASEPRI, r3
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	e7fe      	b.n	800d1bc <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 800d1be:	2600      	movs	r6, #0
 800d1c0:	e7ef      	b.n	800d1a2 <pvPortMalloc+0xc2>
 800d1c2:	2600      	movs	r6, #0
 800d1c4:	e7ed      	b.n	800d1a2 <pvPortMalloc+0xc2>
 800d1c6:	2600      	movs	r6, #0
 800d1c8:	e7eb      	b.n	800d1a2 <pvPortMalloc+0xc2>
 800d1ca:	2600      	movs	r6, #0
 800d1cc:	e7e9      	b.n	800d1a2 <pvPortMalloc+0xc2>
}
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	bd70      	pop	{r4, r5, r6, pc}
 800d1d2:	bf00      	nop
 800d1d4:	20003930 	.word	0x20003930
 800d1d8:	20003934 	.word	0x20003934
 800d1dc:	20003938 	.word	0x20003938
 800d1e0:	20003940 	.word	0x20003940
 800d1e4:	2000393c 	.word	0x2000393c

0800d1e8 <vPortFree>:
	if( pv != NULL )
 800d1e8:	b380      	cbz	r0, 800d24c <vPortFree+0x64>
{
 800d1ea:	b538      	push	{r3, r4, r5, lr}
 800d1ec:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800d1ee:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d1f2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d1f6:	4916      	ldr	r1, [pc, #88]	; (800d250 <vPortFree+0x68>)
 800d1f8:	6809      	ldr	r1, [r1, #0]
 800d1fa:	420a      	tst	r2, r1
 800d1fc:	d108      	bne.n	800d210 <vPortFree+0x28>
 800d1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d202:	f383 8811 	msr	BASEPRI, r3
 800d206:	f3bf 8f6f 	isb	sy
 800d20a:	f3bf 8f4f 	dsb	sy
 800d20e:	e7fe      	b.n	800d20e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d210:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800d214:	b140      	cbz	r0, 800d228 <vPortFree+0x40>
 800d216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21a:	f383 8811 	msr	BASEPRI, r3
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	f3bf 8f4f 	dsb	sy
 800d226:	e7fe      	b.n	800d226 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d228:	ea22 0201 	bic.w	r2, r2, r1
 800d22c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800d230:	f7fe fbdc 	bl	800b9ec <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d234:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800d238:	4a06      	ldr	r2, [pc, #24]	; (800d254 <vPortFree+0x6c>)
 800d23a:	6813      	ldr	r3, [r2, #0]
 800d23c:	440b      	add	r3, r1
 800d23e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d240:	4628      	mov	r0, r5
 800d242:	f7ff ff21 	bl	800d088 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800d246:	f7fe fc6b 	bl	800bb20 <xTaskResumeAll>
}
 800d24a:	bd38      	pop	{r3, r4, r5, pc}
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	20003934 	.word	0x20003934
 800d254:	20003938 	.word	0x20003938

0800d258 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 800d258:	4603      	mov	r3, r0
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;
 800d25a:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800d25c:	4608      	mov	r0, r1

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d25e:	e004      	b.n	800d26a <prvGetNumberOfParameters+0x12>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800d260:	b911      	cbnz	r1, 800d268 <prvGetNumberOfParameters+0x10>
			{
				cParameters++;
 800d262:	3001      	adds	r0, #1
 800d264:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800d266:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800d268:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800d26a:	781a      	ldrb	r2, [r3, #0]
 800d26c:	b11a      	cbz	r2, 800d276 <prvGetNumberOfParameters+0x1e>
		if( ( *pcCommandString ) == ' ' )
 800d26e:	2a20      	cmp	r2, #32
 800d270:	d0f6      	beq.n	800d260 <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800d272:	2100      	movs	r1, #0
 800d274:	e7f8      	b.n	800d268 <prvGetNumberOfParameters+0x10>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d276:	b901      	cbnz	r1, 800d27a <prvGetNumberOfParameters+0x22>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800d278:	4770      	bx	lr
		cParameters--;
 800d27a:	3801      	subs	r0, #1
 800d27c:	b240      	sxtb	r0, r0
 800d27e:	e7fb      	b.n	800d278 <prvGetNumberOfParameters+0x20>

0800d280 <prvHelpCommand>:
{
 800d280:	b538      	push	{r3, r4, r5, lr}
 800d282:	460a      	mov	r2, r1
	if( pxCommand == NULL )
 800d284:	4b09      	ldr	r3, [pc, #36]	; (800d2ac <prvHelpCommand+0x2c>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	b153      	cbz	r3, 800d2a0 <prvHelpCommand+0x20>
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800d28a:	4c08      	ldr	r4, [pc, #32]	; (800d2ac <prvHelpCommand+0x2c>)
 800d28c:	6825      	ldr	r5, [r4, #0]
 800d28e:	682b      	ldr	r3, [r5, #0]
 800d290:	6859      	ldr	r1, [r3, #4]
 800d292:	f000 fe1a 	bl	800deca <strncpy>
	pxCommand = pxCommand->pxNext;
 800d296:	686b      	ldr	r3, [r5, #4]
 800d298:	6023      	str	r3, [r4, #0]
	if( pxCommand == NULL )
 800d29a:	b12b      	cbz	r3, 800d2a8 <prvHelpCommand+0x28>
		xReturn = pdTRUE;
 800d29c:	2001      	movs	r0, #1
}
 800d29e:	bd38      	pop	{r3, r4, r5, pc}
		pxCommand = &xRegisteredCommands;
 800d2a0:	4b02      	ldr	r3, [pc, #8]	; (800d2ac <prvHelpCommand+0x2c>)
 800d2a2:	4903      	ldr	r1, [pc, #12]	; (800d2b0 <prvHelpCommand+0x30>)
 800d2a4:	6019      	str	r1, [r3, #0]
 800d2a6:	e7f0      	b.n	800d28a <prvHelpCommand+0xa>
		xReturn = pdFALSE;
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	e7f8      	b.n	800d29e <prvHelpCommand+0x1e>
 800d2ac:	2000394c 	.word	0x2000394c
 800d2b0:	20002460 	.word	0x20002460

0800d2b4 <FreeRTOS_CLIRegisterCommand>:
{
 800d2b4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxCommandToRegister );
 800d2b6:	b940      	cbnz	r0, 800d2ca <FreeRTOS_CLIRegisterCommand+0x16>
 800d2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2bc:	f383 8811 	msr	BASEPRI, r3
 800d2c0:	f3bf 8f6f 	isb	sy
 800d2c4:	f3bf 8f4f 	dsb	sy
 800d2c8:	e7fe      	b.n	800d2c8 <FreeRTOS_CLIRegisterCommand+0x14>
 800d2ca:	4605      	mov	r5, r0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d2cc:	2008      	movs	r0, #8
 800d2ce:	f7ff ff07 	bl	800d0e0 <pvPortMalloc>
	configASSERT( pxNewListItem );
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	b940      	cbnz	r0, 800d2e8 <FreeRTOS_CLIRegisterCommand+0x34>
 800d2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	e7fe      	b.n	800d2e6 <FreeRTOS_CLIRegisterCommand+0x32>
		taskENTER_CRITICAL();
 800d2e8:	f7ff fd44 	bl	800cd74 <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d2ec:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800d2f2:	4b04      	ldr	r3, [pc, #16]	; (800d304 <FreeRTOS_CLIRegisterCommand+0x50>)
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800d2f8:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800d2fa:	f7ff fd5d 	bl	800cdb8 <vPortExitCritical>
}
 800d2fe:	2001      	movs	r0, #1
 800d300:	bd38      	pop	{r3, r4, r5, pc}
 800d302:	bf00      	nop
 800d304:	2000245c 	.word	0x2000245c

0800d308 <FreeRTOS_CLIProcessCommand>:
{
 800d308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d30c:	4606      	mov	r6, r0
 800d30e:	4689      	mov	r9, r1
 800d310:	4690      	mov	r8, r2
	if( pxCommand == NULL )
 800d312:	4b2a      	ldr	r3, [pc, #168]	; (800d3bc <FreeRTOS_CLIProcessCommand+0xb4>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	b1ab      	cbz	r3, 800d344 <FreeRTOS_CLIProcessCommand+0x3c>
BaseType_t xReturn = pdTRUE;
 800d318:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d31a:	4b28      	ldr	r3, [pc, #160]	; (800d3bc <FreeRTOS_CLIProcessCommand+0xb4>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	b10b      	cbz	r3, 800d324 <FreeRTOS_CLIProcessCommand+0x1c>
 800d320:	2c00      	cmp	r4, #0
 800d322:	d03b      	beq.n	800d39c <FreeRTOS_CLIProcessCommand+0x94>
	else if( pxCommand != NULL )
 800d324:	2b00      	cmp	r3, #0
 800d326:	d042      	beq.n	800d3ae <FreeRTOS_CLIProcessCommand+0xa6>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	689b      	ldr	r3, [r3, #8]
 800d32c:	4632      	mov	r2, r6
 800d32e:	4641      	mov	r1, r8
 800d330:	4648      	mov	r0, r9
 800d332:	4798      	blx	r3
		if( xReturn == pdFALSE )
 800d334:	4604      	mov	r4, r0
 800d336:	b910      	cbnz	r0, 800d33e <FreeRTOS_CLIProcessCommand+0x36>
			pxCommand = NULL;
 800d338:	4b20      	ldr	r3, [pc, #128]	; (800d3bc <FreeRTOS_CLIProcessCommand+0xb4>)
 800d33a:	2200      	movs	r2, #0
 800d33c:	601a      	str	r2, [r3, #0]
}
 800d33e:	4620      	mov	r0, r4
 800d340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d344:	4b1d      	ldr	r3, [pc, #116]	; (800d3bc <FreeRTOS_CLIProcessCommand+0xb4>)
 800d346:	4a1e      	ldr	r2, [pc, #120]	; (800d3c0 <FreeRTOS_CLIProcessCommand+0xb8>)
 800d348:	601a      	str	r2, [r3, #0]
 800d34a:	e008      	b.n	800d35e <FreeRTOS_CLIProcessCommand+0x56>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d34c:	4602      	mov	r2, r0
 800d34e:	4629      	mov	r1, r5
 800d350:	4630      	mov	r0, r6
 800d352:	f000 fda8 	bl	800dea6 <strncmp>
 800d356:	b180      	cbz	r0, 800d37a <FreeRTOS_CLIProcessCommand+0x72>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d358:	6862      	ldr	r2, [r4, #4]
 800d35a:	4b18      	ldr	r3, [pc, #96]	; (800d3bc <FreeRTOS_CLIProcessCommand+0xb4>)
 800d35c:	601a      	str	r2, [r3, #0]
 800d35e:	4b17      	ldr	r3, [pc, #92]	; (800d3bc <FreeRTOS_CLIProcessCommand+0xb4>)
 800d360:	681c      	ldr	r4, [r3, #0]
 800d362:	b1cc      	cbz	r4, 800d398 <FreeRTOS_CLIProcessCommand+0x90>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d364:	6827      	ldr	r7, [r4, #0]
 800d366:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 800d368:	4628      	mov	r0, r5
 800d36a:	f7f2 ff39 	bl	80001e0 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d36e:	5c33      	ldrb	r3, [r6, r0]
 800d370:	2b20      	cmp	r3, #32
 800d372:	d0eb      	beq.n	800d34c <FreeRTOS_CLIProcessCommand+0x44>
 800d374:	2b00      	cmp	r3, #0
 800d376:	d1ef      	bne.n	800d358 <FreeRTOS_CLIProcessCommand+0x50>
 800d378:	e7e8      	b.n	800d34c <FreeRTOS_CLIProcessCommand+0x44>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d37a:	f997 400c 	ldrsb.w	r4, [r7, #12]
 800d37e:	2c00      	cmp	r4, #0
 800d380:	da01      	bge.n	800d386 <FreeRTOS_CLIProcessCommand+0x7e>
BaseType_t xReturn = pdTRUE;
 800d382:	2401      	movs	r4, #1
 800d384:	e7c9      	b.n	800d31a <FreeRTOS_CLIProcessCommand+0x12>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800d386:	4630      	mov	r0, r6
 800d388:	f7ff ff66 	bl	800d258 <prvGetNumberOfParameters>
 800d38c:	4284      	cmp	r4, r0
 800d38e:	d001      	beq.n	800d394 <FreeRTOS_CLIProcessCommand+0x8c>
							xReturn = pdFALSE;
 800d390:	2400      	movs	r4, #0
 800d392:	e7c2      	b.n	800d31a <FreeRTOS_CLIProcessCommand+0x12>
BaseType_t xReturn = pdTRUE;
 800d394:	2401      	movs	r4, #1
 800d396:	e7c0      	b.n	800d31a <FreeRTOS_CLIProcessCommand+0x12>
 800d398:	2401      	movs	r4, #1
 800d39a:	e7be      	b.n	800d31a <FreeRTOS_CLIProcessCommand+0x12>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d39c:	4642      	mov	r2, r8
 800d39e:	4909      	ldr	r1, [pc, #36]	; (800d3c4 <FreeRTOS_CLIProcessCommand+0xbc>)
 800d3a0:	4648      	mov	r0, r9
 800d3a2:	f000 fd92 	bl	800deca <strncpy>
		pxCommand = NULL;
 800d3a6:	4b05      	ldr	r3, [pc, #20]	; (800d3bc <FreeRTOS_CLIProcessCommand+0xb4>)
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	601a      	str	r2, [r3, #0]
 800d3ac:	e7c7      	b.n	800d33e <FreeRTOS_CLIProcessCommand+0x36>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d3ae:	4642      	mov	r2, r8
 800d3b0:	4905      	ldr	r1, [pc, #20]	; (800d3c8 <FreeRTOS_CLIProcessCommand+0xc0>)
 800d3b2:	4648      	mov	r0, r9
 800d3b4:	f000 fd89 	bl	800deca <strncpy>
		xReturn = pdFALSE;
 800d3b8:	2400      	movs	r4, #0
	return xReturn;
 800d3ba:	e7c0      	b.n	800d33e <FreeRTOS_CLIProcessCommand+0x36>
 800d3bc:	20003948 	.word	0x20003948
 800d3c0:	20002460 	.word	0x20002460
 800d3c4:	0800f780 	.word	0x0800f780
 800d3c8:	0800f7d8 	.word	0x0800f7d8

0800d3cc <FreeRTOS_CLIGetParameter>:
{
 800d3cc:	b410      	push	{r4}
	*pxParameterStringLength = 0;
 800d3ce:	2400      	movs	r4, #0
 800d3d0:	6014      	str	r4, [r2, #0]
	while( uxParametersFound < uxWantedParameter )
 800d3d2:	e00d      	b.n	800d3f0 <FreeRTOS_CLIGetParameter+0x24>
			pcCommandString++;
 800d3d4:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d3d6:	7803      	ldrb	r3, [r0, #0]
 800d3d8:	b11b      	cbz	r3, 800d3e2 <FreeRTOS_CLIGetParameter+0x16>
 800d3da:	2b20      	cmp	r3, #32
 800d3dc:	d1fa      	bne.n	800d3d4 <FreeRTOS_CLIGetParameter+0x8>
 800d3de:	e000      	b.n	800d3e2 <FreeRTOS_CLIGetParameter+0x16>
			pcCommandString++;
 800d3e0:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d3e2:	7803      	ldrb	r3, [r0, #0]
 800d3e4:	2b20      	cmp	r3, #32
 800d3e6:	d0fb      	beq.n	800d3e0 <FreeRTOS_CLIGetParameter+0x14>
		if( *pcCommandString != 0x00 )
 800d3e8:	b1bb      	cbz	r3, 800d41a <FreeRTOS_CLIGetParameter+0x4e>
			uxParametersFound++;
 800d3ea:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800d3ec:	42a1      	cmp	r1, r4
 800d3ee:	d012      	beq.n	800d416 <FreeRTOS_CLIGetParameter+0x4a>
	while( uxParametersFound < uxWantedParameter )
 800d3f0:	428c      	cmp	r4, r1
 800d3f2:	d3f0      	bcc.n	800d3d6 <FreeRTOS_CLIGetParameter+0xa>
const char *pcReturn = NULL;
 800d3f4:	2000      	movs	r0, #0
}
 800d3f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3fa:	4770      	bx	lr
					( *pxParameterStringLength )++;
 800d3fc:	6813      	ldr	r3, [r2, #0]
 800d3fe:	3301      	adds	r3, #1
 800d400:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800d402:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d404:	780b      	ldrb	r3, [r1, #0]
 800d406:	b10b      	cbz	r3, 800d40c <FreeRTOS_CLIGetParameter+0x40>
 800d408:	2b20      	cmp	r3, #32
 800d40a:	d1f7      	bne.n	800d3fc <FreeRTOS_CLIGetParameter+0x30>
				if( *pxParameterStringLength == 0 )
 800d40c:	6813      	ldr	r3, [r2, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d1f1      	bne.n	800d3f6 <FreeRTOS_CLIGetParameter+0x2a>
					pcReturn = NULL;
 800d412:	2000      	movs	r0, #0
	return pcReturn;
 800d414:	e7ef      	b.n	800d3f6 <FreeRTOS_CLIGetParameter+0x2a>
 800d416:	4601      	mov	r1, r0
 800d418:	e7f4      	b.n	800d404 <FreeRTOS_CLIGetParameter+0x38>
const char *pcReturn = NULL;
 800d41a:	2000      	movs	r0, #0
 800d41c:	e7eb      	b.n	800d3f6 <FreeRTOS_CLIGetParameter+0x2a>

0800d41e <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 800d41e:	429a      	cmp	r2, r3
 800d420:	d200      	bcs.n	800d424 <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 800d422:	5488      	strb	r0, [r1, r2]
  }
}
 800d424:	4770      	bx	lr

0800d426 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800d426:	4770      	bx	lr

0800d428 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
 800d428:	2300      	movs	r3, #0
  while (_is_digit(**str)) {
 800d42a:	e007      	b.n	800d43c <_atoi+0x14>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800d42c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d430:	005a      	lsls	r2, r3, #1
 800d432:	1c4b      	adds	r3, r1, #1
 800d434:	6003      	str	r3, [r0, #0]
 800d436:	780b      	ldrb	r3, [r1, #0]
 800d438:	4413      	add	r3, r2
 800d43a:	3b30      	subs	r3, #48	; 0x30
  while (_is_digit(**str)) {
 800d43c:	6801      	ldr	r1, [r0, #0]
 800d43e:	780a      	ldrb	r2, [r1, #0]
  return (ch >= '0') && (ch <= '9');
 800d440:	3a30      	subs	r2, #48	; 0x30
 800d442:	b2d2      	uxtb	r2, r2
  while (_is_digit(**str)) {
 800d444:	2a09      	cmp	r2, #9
 800d446:	d9f1      	bls.n	800d42c <_atoi+0x4>
  }
  return i;
}
 800d448:	4618      	mov	r0, r3
 800d44a:	4770      	bx	lr

0800d44c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800d44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d450:	b083      	sub	sp, #12
 800d452:	4605      	mov	r5, r0
 800d454:	9101      	str	r1, [sp, #4]
 800d456:	4693      	mov	fp, r2
 800d458:	461e      	mov	r6, r3
 800d45a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800d45e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d460:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800d464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d466:	f013 0f03 	tst.w	r3, #3
 800d46a:	d114      	bne.n	800d496 <_out_rev+0x4a>
    for (size_t i = len; i < width; i++) {
 800d46c:	4627      	mov	r7, r4
 800d46e:	e007      	b.n	800d480 <_out_rev+0x34>
      out(' ', buffer, idx++, maxlen);
 800d470:	f102 0a01 	add.w	sl, r2, #1
 800d474:	4633      	mov	r3, r6
 800d476:	9901      	ldr	r1, [sp, #4]
 800d478:	2020      	movs	r0, #32
 800d47a:	47a8      	blx	r5
    for (size_t i = len; i < width; i++) {
 800d47c:	3701      	adds	r7, #1
      out(' ', buffer, idx++, maxlen);
 800d47e:	4652      	mov	r2, sl
    for (size_t i = len; i < width; i++) {
 800d480:	4547      	cmp	r7, r8
 800d482:	d3f5      	bcc.n	800d470 <_out_rev+0x24>
 800d484:	e007      	b.n	800d496 <_out_rev+0x4a>
    }
  }

  // reverse string
  while (len) {
    out(buf[--len], buffer, idx++, maxlen);
 800d486:	3c01      	subs	r4, #1
 800d488:	1c57      	adds	r7, r2, #1
 800d48a:	4633      	mov	r3, r6
 800d48c:	9901      	ldr	r1, [sp, #4]
 800d48e:	f819 0004 	ldrb.w	r0, [r9, r4]
 800d492:	47a8      	blx	r5
 800d494:	463a      	mov	r2, r7
  while (len) {
 800d496:	2c00      	cmp	r4, #0
 800d498:	d1f5      	bne.n	800d486 <_out_rev+0x3a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800d49a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d49c:	f013 0f02 	tst.w	r3, #2
 800d4a0:	d106      	bne.n	800d4b0 <_out_rev+0x64>
 800d4a2:	e009      	b.n	800d4b8 <_out_rev+0x6c>
    while (idx - start_idx < width) {
      out(' ', buffer, idx++, maxlen);
 800d4a4:	1c54      	adds	r4, r2, #1
 800d4a6:	4633      	mov	r3, r6
 800d4a8:	9901      	ldr	r1, [sp, #4]
 800d4aa:	2020      	movs	r0, #32
 800d4ac:	47a8      	blx	r5
 800d4ae:	4622      	mov	r2, r4
    while (idx - start_idx < width) {
 800d4b0:	eba2 030b 	sub.w	r3, r2, fp
 800d4b4:	4543      	cmp	r3, r8
 800d4b6:	d3f5      	bcc.n	800d4a4 <_out_rev+0x58>
    }
  }

  return idx;
}
 800d4b8:	4610      	mov	r0, r2
 800d4ba:	b003      	add	sp, #12
 800d4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d4c0 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d4c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4c4:	b085      	sub	sp, #20
 800d4c6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d4c8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d4ca:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 800d4ce:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800d4d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800d4d6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800d4d8:	9d12      	ldr	r5, [sp, #72]	; 0x48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800d4da:	f015 0f02 	tst.w	r5, #2
 800d4de:	d121      	bne.n	800d524 <_ntoa_format+0x64>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800d4e0:	b17f      	cbz	r7, 800d502 <_ntoa_format+0x42>
 800d4e2:	f015 0f01 	tst.w	r5, #1
 800d4e6:	d00c      	beq.n	800d502 <_ntoa_format+0x42>
 800d4e8:	f1b9 0f00 	cmp.w	r9, #0
 800d4ec:	d102      	bne.n	800d4f4 <_ntoa_format+0x34>
 800d4ee:	f015 0f0c 	tst.w	r5, #12
 800d4f2:	d006      	beq.n	800d502 <_ntoa_format+0x42>
      width--;
 800d4f4:	3f01      	subs	r7, #1
 800d4f6:	e004      	b.n	800d502 <_ntoa_format+0x42>
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 800d4f8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800d4fc:	f806 c004 	strb.w	ip, [r6, r4]
 800d500:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d502:	4574      	cmp	r4, lr
 800d504:	d207      	bcs.n	800d516 <_ntoa_format+0x56>
 800d506:	2c1f      	cmp	r4, #31
 800d508:	d9f6      	bls.n	800d4f8 <_ntoa_format+0x38>
 800d50a:	e004      	b.n	800d516 <_ntoa_format+0x56>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 800d50c:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800d510:	f806 c004 	strb.w	ip, [r6, r4]
 800d514:	3401      	adds	r4, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d516:	f015 0f01 	tst.w	r5, #1
 800d51a:	d003      	beq.n	800d524 <_ntoa_format+0x64>
 800d51c:	42bc      	cmp	r4, r7
 800d51e:	d201      	bcs.n	800d524 <_ntoa_format+0x64>
 800d520:	2c1f      	cmp	r4, #31
 800d522:	d9f3      	bls.n	800d50c <_ntoa_format+0x4c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800d524:	f015 0f10 	tst.w	r5, #16
 800d528:	d017      	beq.n	800d55a <_ntoa_format+0x9a>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800d52a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800d52e:	d104      	bne.n	800d53a <_ntoa_format+0x7a>
 800d530:	b11c      	cbz	r4, 800d53a <_ntoa_format+0x7a>
 800d532:	4574      	cmp	r4, lr
 800d534:	d022      	beq.n	800d57c <_ntoa_format+0xbc>
 800d536:	42bc      	cmp	r4, r7
 800d538:	d020      	beq.n	800d57c <_ntoa_format+0xbc>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d53a:	f1b8 0f10 	cmp.w	r8, #16
 800d53e:	d029      	beq.n	800d594 <_ntoa_format+0xd4>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d540:	f1b8 0f10 	cmp.w	r8, #16
 800d544:	d031      	beq.n	800d5aa <_ntoa_format+0xea>
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d546:	f1b8 0f02 	cmp.w	r8, #2
 800d54a:	d039      	beq.n	800d5c0 <_ntoa_format+0x100>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800d54c:	2c1f      	cmp	r4, #31
 800d54e:	d804      	bhi.n	800d55a <_ntoa_format+0x9a>
      buf[len++] = '0';
 800d550:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800d554:	f806 c004 	strb.w	ip, [r6, r4]
 800d558:	3401      	adds	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800d55a:	2c1f      	cmp	r4, #31
 800d55c:	d83d      	bhi.n	800d5da <_ntoa_format+0x11a>
    if (negative) {
 800d55e:	f1b9 0f00 	cmp.w	r9, #0
 800d562:	d135      	bne.n	800d5d0 <_ntoa_format+0x110>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
 800d564:	f015 0f04 	tst.w	r5, #4
 800d568:	d140      	bne.n	800d5ec <_ntoa_format+0x12c>
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
 800d56a:	f015 0f08 	tst.w	r5, #8
 800d56e:	d034      	beq.n	800d5da <_ntoa_format+0x11a>
      buf[len++] = ' ';
 800d570:	f04f 0c20 	mov.w	ip, #32
 800d574:	f806 c004 	strb.w	ip, [r6, r4]
 800d578:	3401      	adds	r4, #1
 800d57a:	e02e      	b.n	800d5da <_ntoa_format+0x11a>
      if (len && (base == 16U)) {
 800d57c:	f1b4 0c01 	subs.w	ip, r4, #1
 800d580:	d006      	beq.n	800d590 <_ntoa_format+0xd0>
 800d582:	f1b8 0f10 	cmp.w	r8, #16
 800d586:	d001      	beq.n	800d58c <_ntoa_format+0xcc>
      len--;
 800d588:	4664      	mov	r4, ip
 800d58a:	e7d6      	b.n	800d53a <_ntoa_format+0x7a>
        len--;
 800d58c:	3c02      	subs	r4, #2
 800d58e:	e7d4      	b.n	800d53a <_ntoa_format+0x7a>
      len--;
 800d590:	4664      	mov	r4, ip
 800d592:	e7d2      	b.n	800d53a <_ntoa_format+0x7a>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d594:	f015 0f20 	tst.w	r5, #32
 800d598:	d1d2      	bne.n	800d540 <_ntoa_format+0x80>
 800d59a:	2c1f      	cmp	r4, #31
 800d59c:	d8d0      	bhi.n	800d540 <_ntoa_format+0x80>
      buf[len++] = 'x';
 800d59e:	f04f 0c78 	mov.w	ip, #120	; 0x78
 800d5a2:	f806 c004 	strb.w	ip, [r6, r4]
 800d5a6:	3401      	adds	r4, #1
 800d5a8:	e7d0      	b.n	800d54c <_ntoa_format+0x8c>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d5aa:	f015 0f20 	tst.w	r5, #32
 800d5ae:	d0ca      	beq.n	800d546 <_ntoa_format+0x86>
 800d5b0:	2c1f      	cmp	r4, #31
 800d5b2:	d8c8      	bhi.n	800d546 <_ntoa_format+0x86>
      buf[len++] = 'X';
 800d5b4:	f04f 0c58 	mov.w	ip, #88	; 0x58
 800d5b8:	f806 c004 	strb.w	ip, [r6, r4]
 800d5bc:	3401      	adds	r4, #1
 800d5be:	e7c5      	b.n	800d54c <_ntoa_format+0x8c>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d5c0:	2c1f      	cmp	r4, #31
 800d5c2:	d8c3      	bhi.n	800d54c <_ntoa_format+0x8c>
      buf[len++] = 'b';
 800d5c4:	f04f 0c62 	mov.w	ip, #98	; 0x62
 800d5c8:	f806 c004 	strb.w	ip, [r6, r4]
 800d5cc:	3401      	adds	r4, #1
 800d5ce:	e7bd      	b.n	800d54c <_ntoa_format+0x8c>
      buf[len++] = '-';
 800d5d0:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 800d5d4:	f806 c004 	strb.w	ip, [r6, r4]
 800d5d8:	3401      	adds	r4, #1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800d5da:	9503      	str	r5, [sp, #12]
 800d5dc:	9702      	str	r7, [sp, #8]
 800d5de:	9401      	str	r4, [sp, #4]
 800d5e0:	9600      	str	r6, [sp, #0]
 800d5e2:	f7ff ff33 	bl	800d44c <_out_rev>
}
 800d5e6:	b005      	add	sp, #20
 800d5e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      buf[len++] = '+';  // ignore the space if the '+' exists
 800d5ec:	f04f 0c2b 	mov.w	ip, #43	; 0x2b
 800d5f0:	f806 c004 	strb.w	ip, [r6, r4]
 800d5f4:	3401      	adds	r4, #1
 800d5f6:	e7f0      	b.n	800d5da <_ntoa_format+0x11a>

0800d5f8 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5fc:	b090      	sub	sp, #64	; 0x40
 800d5fe:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800d600:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800d602:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 800d606:	b90d      	cbnz	r5, 800d60c <_ntoa_long+0x14>
    flags &= ~FLAGS_HASH;
 800d608:	f02c 0c10 	bic.w	ip, ip, #16
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800d60c:	f41c 6680 	ands.w	r6, ip, #1024	; 0x400
 800d610:	d019      	beq.n	800d646 <_ntoa_long+0x4e>
 800d612:	b32d      	cbz	r5, 800d660 <_ntoa_long+0x68>
 800d614:	2600      	movs	r6, #0
 800d616:	e016      	b.n	800d646 <_ntoa_long+0x4e>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800d618:	f01c 0f20 	tst.w	ip, #32
 800d61c:	d01d      	beq.n	800d65a <_ntoa_long+0x62>
 800d61e:	f04f 0e41 	mov.w	lr, #65	; 0x41
 800d622:	4474      	add	r4, lr
 800d624:	b2e4      	uxtb	r4, r4
 800d626:	3c0a      	subs	r4, #10
 800d628:	b2e4      	uxtb	r4, r4
 800d62a:	f106 0e01 	add.w	lr, r6, #1
 800d62e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800d632:	4446      	add	r6, r8
 800d634:	f806 4c20 	strb.w	r4, [r6, #-32]
      value /= base;
 800d638:	fbb5 f5f7 	udiv	r5, r5, r7
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800d63c:	b195      	cbz	r5, 800d664 <_ntoa_long+0x6c>
 800d63e:	f1be 0f1f 	cmp.w	lr, #31
 800d642:	d80f      	bhi.n	800d664 <_ntoa_long+0x6c>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800d644:	4676      	mov	r6, lr
      const char digit = (char)(value % base);
 800d646:	fbb5 f4f7 	udiv	r4, r5, r7
 800d64a:	fb07 5414 	mls	r4, r7, r4, r5
 800d64e:	b2e4      	uxtb	r4, r4
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800d650:	2c09      	cmp	r4, #9
 800d652:	d8e1      	bhi.n	800d618 <_ntoa_long+0x20>
 800d654:	3430      	adds	r4, #48	; 0x30
 800d656:	b2e4      	uxtb	r4, r4
 800d658:	e7e7      	b.n	800d62a <_ntoa_long+0x32>
 800d65a:	f04f 0e61 	mov.w	lr, #97	; 0x61
 800d65e:	e7e0      	b.n	800d622 <_ntoa_long+0x2a>
  size_t len = 0U;
 800d660:	f04f 0e00 	mov.w	lr, #0
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800d664:	f8cd c018 	str.w	ip, [sp, #24]
 800d668:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800d66a:	9405      	str	r4, [sp, #20]
 800d66c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800d66e:	9404      	str	r4, [sp, #16]
 800d670:	9703      	str	r7, [sp, #12]
 800d672:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 800d676:	9402      	str	r4, [sp, #8]
 800d678:	f8cd e004 	str.w	lr, [sp, #4]
 800d67c:	ac08      	add	r4, sp, #32
 800d67e:	9400      	str	r4, [sp, #0]
 800d680:	f7ff ff1e 	bl	800d4c0 <_ntoa_format>
}
 800d684:	b010      	add	sp, #64	; 0x40
 800d686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d68c <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800d68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d690:	b08b      	sub	sp, #44	; 0x2c
 800d692:	4606      	mov	r6, r0
 800d694:	4615      	mov	r5, r2
 800d696:	9309      	str	r3, [sp, #36]	; 0x24
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 800d698:	9106      	str	r1, [sp, #24]
 800d69a:	2900      	cmp	r1, #0
 800d69c:	f000 82b1 	beq.w	800dc02 <_vsnprintf+0x576>
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800d6a0:	2400      	movs	r4, #0
  while (*format)
 800d6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6a4:	7818      	ldrb	r0, [r3, #0]
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	f000 82ad 	beq.w	800dc06 <_vsnprintf+0x57a>
    if (*format != '%') {
 800d6ac:	2825      	cmp	r0, #37	; 0x25
 800d6ae:	d009      	beq.n	800d6c4 <_vsnprintf+0x38>
      out(*format, buffer, idx++, maxlen);
 800d6b0:	1c67      	adds	r7, r4, #1
 800d6b2:	462b      	mov	r3, r5
 800d6b4:	4622      	mov	r2, r4
 800d6b6:	9906      	ldr	r1, [sp, #24]
 800d6b8:	47b0      	blx	r6
      format++;
 800d6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6bc:	3301      	adds	r3, #1
 800d6be:	9309      	str	r3, [sp, #36]	; 0x24
      out(*format, buffer, idx++, maxlen);
 800d6c0:	463c      	mov	r4, r7
      continue;
 800d6c2:	e7ee      	b.n	800d6a2 <_vsnprintf+0x16>
      format++;
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	9309      	str	r3, [sp, #36]	; 0x24
    flags = 0U;
 800d6c8:	2700      	movs	r7, #0
 800d6ca:	e02d      	b.n	800d728 <_vsnprintf+0x9c>
  return (ch >= '0') && (ch <= '9');
 800d6cc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d6d0:	b2db      	uxtb	r3, r3
    if (_is_digit(*format)) {
 800d6d2:	2b09      	cmp	r3, #9
 800d6d4:	d968      	bls.n	800d7a8 <_vsnprintf+0x11c>
    else if (*format == '*') {
 800d6d6:	292a      	cmp	r1, #42	; 0x2a
 800d6d8:	d06b      	beq.n	800d7b2 <_vsnprintf+0x126>
    width = 0U;
 800d6da:	f04f 0a00 	mov.w	sl, #0
    if (*format == '.') {
 800d6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6e0:	781a      	ldrb	r2, [r3, #0]
 800d6e2:	2a2e      	cmp	r2, #46	; 0x2e
 800d6e4:	d075      	beq.n	800d7d2 <_vsnprintf+0x146>
    precision = 0U;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	9307      	str	r3, [sp, #28]
    switch (*format) {
 800d6ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6ec:	7813      	ldrb	r3, [r2, #0]
 800d6ee:	3b68      	subs	r3, #104	; 0x68
 800d6f0:	2b12      	cmp	r3, #18
 800d6f2:	f200 80ad 	bhi.w	800d850 <_vsnprintf+0x1c4>
 800d6f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d6fa:	0099      	.short	0x0099
 800d6fc:	00a700ab 	.word	0x00a700ab
 800d700:	008b00ab 	.word	0x008b00ab
 800d704:	00ab00ab 	.word	0x00ab00ab
 800d708:	00ab00ab 	.word	0x00ab00ab
 800d70c:	00ab00ab 	.word	0x00ab00ab
 800d710:	00ab00ab 	.word	0x00ab00ab
 800d714:	00ab00ab 	.word	0x00ab00ab
 800d718:	00ab00ab 	.word	0x00ab00ab
 800d71c:	010800ab 	.word	0x010800ab
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800d720:	f047 0701 	orr.w	r7, r7, #1
 800d724:	3301      	adds	r3, #1
 800d726:	9309      	str	r3, [sp, #36]	; 0x24
      switch (*format) {
 800d728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d72a:	7819      	ldrb	r1, [r3, #0]
 800d72c:	f1a1 0220 	sub.w	r2, r1, #32
 800d730:	2a10      	cmp	r2, #16
 800d732:	d8cb      	bhi.n	800d6cc <_vsnprintf+0x40>
 800d734:	a001      	add	r0, pc, #4	; (adr r0, 800d73c <_vsnprintf+0xb0>)
 800d736:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800d73a:	bf00      	nop
 800d73c:	0800d795 	.word	0x0800d795
 800d740:	0800d6cd 	.word	0x0800d6cd
 800d744:	0800d6cd 	.word	0x0800d6cd
 800d748:	0800d79f 	.word	0x0800d79f
 800d74c:	0800d6cd 	.word	0x0800d6cd
 800d750:	0800d6cd 	.word	0x0800d6cd
 800d754:	0800d6cd 	.word	0x0800d6cd
 800d758:	0800d6cd 	.word	0x0800d6cd
 800d75c:	0800d6cd 	.word	0x0800d6cd
 800d760:	0800d6cd 	.word	0x0800d6cd
 800d764:	0800d6cd 	.word	0x0800d6cd
 800d768:	0800d78b 	.word	0x0800d78b
 800d76c:	0800d6cd 	.word	0x0800d6cd
 800d770:	0800d781 	.word	0x0800d781
 800d774:	0800d6cd 	.word	0x0800d6cd
 800d778:	0800d6cd 	.word	0x0800d6cd
 800d77c:	0800d721 	.word	0x0800d721
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800d780:	f047 0702 	orr.w	r7, r7, #2
 800d784:	3301      	adds	r3, #1
 800d786:	9309      	str	r3, [sp, #36]	; 0x24
 800d788:	e7ce      	b.n	800d728 <_vsnprintf+0x9c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800d78a:	f047 0704 	orr.w	r7, r7, #4
 800d78e:	3301      	adds	r3, #1
 800d790:	9309      	str	r3, [sp, #36]	; 0x24
 800d792:	e7c9      	b.n	800d728 <_vsnprintf+0x9c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800d794:	f047 0708 	orr.w	r7, r7, #8
 800d798:	3301      	adds	r3, #1
 800d79a:	9309      	str	r3, [sp, #36]	; 0x24
 800d79c:	e7c4      	b.n	800d728 <_vsnprintf+0x9c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800d79e:	f047 0710 	orr.w	r7, r7, #16
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7a6:	e7bf      	b.n	800d728 <_vsnprintf+0x9c>
      width = _atoi(&format);
 800d7a8:	a809      	add	r0, sp, #36	; 0x24
 800d7aa:	f7ff fe3d 	bl	800d428 <_atoi>
 800d7ae:	4682      	mov	sl, r0
 800d7b0:	e795      	b.n	800d6de <_vsnprintf+0x52>
      const int w = va_arg(va, int);
 800d7b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d7b4:	1d1a      	adds	r2, r3, #4
 800d7b6:	9214      	str	r2, [sp, #80]	; 0x50
 800d7b8:	681b      	ldr	r3, [r3, #0]
      if (w < 0) {
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	db04      	blt.n	800d7c8 <_vsnprintf+0x13c>
        width = (unsigned int)w;
 800d7be:	469a      	mov	sl, r3
      format++;
 800d7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7c6:	e78a      	b.n	800d6de <_vsnprintf+0x52>
        flags |= FLAGS_LEFT;    // reverse padding
 800d7c8:	f047 0702 	orr.w	r7, r7, #2
        width = (unsigned int)-w;
 800d7cc:	f1c3 0a00 	rsb	sl, r3, #0
 800d7d0:	e7f6      	b.n	800d7c0 <_vsnprintf+0x134>
      flags |= FLAGS_PRECISION;
 800d7d2:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
      format++;
 800d7d6:	1c5a      	adds	r2, r3, #1
 800d7d8:	9209      	str	r2, [sp, #36]	; 0x24
      if (_is_digit(*format)) {
 800d7da:	785a      	ldrb	r2, [r3, #1]
  return (ch >= '0') && (ch <= '9');
 800d7dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d7e0:	b2db      	uxtb	r3, r3
      if (_is_digit(*format)) {
 800d7e2:	2b09      	cmp	r3, #9
 800d7e4:	d904      	bls.n	800d7f0 <_vsnprintf+0x164>
      else if (*format == '*') {
 800d7e6:	2a2a      	cmp	r2, #42	; 0x2a
 800d7e8:	d007      	beq.n	800d7fa <_vsnprintf+0x16e>
    precision = 0U;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	9307      	str	r3, [sp, #28]
 800d7ee:	e77c      	b.n	800d6ea <_vsnprintf+0x5e>
        precision = _atoi(&format);
 800d7f0:	a809      	add	r0, sp, #36	; 0x24
 800d7f2:	f7ff fe19 	bl	800d428 <_atoi>
 800d7f6:	9007      	str	r0, [sp, #28]
 800d7f8:	e777      	b.n	800d6ea <_vsnprintf+0x5e>
        const int prec = (int)va_arg(va, int);
 800d7fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d7fc:	1d1a      	adds	r2, r3, #4
 800d7fe:	9214      	str	r2, [sp, #80]	; 0x50
 800d800:	681b      	ldr	r3, [r3, #0]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800d802:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d806:	9307      	str	r3, [sp, #28]
        format++;
 800d808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d80a:	3301      	adds	r3, #1
 800d80c:	9309      	str	r3, [sp, #36]	; 0x24
 800d80e:	e76c      	b.n	800d6ea <_vsnprintf+0x5e>
        flags |= FLAGS_LONG;
 800d810:	f447 7180 	orr.w	r1, r7, #256	; 0x100
        format++;
 800d814:	1c53      	adds	r3, r2, #1
 800d816:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == 'l') {
 800d818:	7852      	ldrb	r2, [r2, #1]
 800d81a:	2a6c      	cmp	r2, #108	; 0x6c
 800d81c:	d001      	beq.n	800d822 <_vsnprintf+0x196>
        flags |= FLAGS_LONG;
 800d81e:	460f      	mov	r7, r1
 800d820:	e016      	b.n	800d850 <_vsnprintf+0x1c4>
          flags |= FLAGS_LONG_LONG;
 800d822:	f447 7740 	orr.w	r7, r7, #768	; 0x300
          format++;
 800d826:	3301      	adds	r3, #1
 800d828:	9309      	str	r3, [sp, #36]	; 0x24
 800d82a:	e011      	b.n	800d850 <_vsnprintf+0x1c4>
        flags |= FLAGS_SHORT;
 800d82c:	f047 0180 	orr.w	r1, r7, #128	; 0x80
        format++;
 800d830:	1c53      	adds	r3, r2, #1
 800d832:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == 'h') {
 800d834:	7852      	ldrb	r2, [r2, #1]
 800d836:	2a68      	cmp	r2, #104	; 0x68
 800d838:	d001      	beq.n	800d83e <_vsnprintf+0x1b2>
        flags |= FLAGS_SHORT;
 800d83a:	460f      	mov	r7, r1
 800d83c:	e008      	b.n	800d850 <_vsnprintf+0x1c4>
          flags |= FLAGS_CHAR;
 800d83e:	f047 07c0 	orr.w	r7, r7, #192	; 0xc0
          format++;
 800d842:	3301      	adds	r3, #1
 800d844:	9309      	str	r3, [sp, #36]	; 0x24
 800d846:	e003      	b.n	800d850 <_vsnprintf+0x1c4>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800d848:	f447 7700 	orr.w	r7, r7, #512	; 0x200
        format++;
 800d84c:	3201      	adds	r2, #1
 800d84e:	9209      	str	r2, [sp, #36]	; 0x24
    switch (*format) {
 800d850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d852:	7818      	ldrb	r0, [r3, #0]
 800d854:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 800d858:	2b53      	cmp	r3, #83	; 0x53
 800d85a:	f200 81c8 	bhi.w	800dbee <_vsnprintf+0x562>
 800d85e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d862:	01bb      	.short	0x01bb
 800d864:	01c601c6 	.word	0x01c601c6
 800d868:	01c601c6 	.word	0x01c601c6
 800d86c:	01c601c6 	.word	0x01c601c6
 800d870:	01c601c6 	.word	0x01c601c6
 800d874:	01c601c6 	.word	0x01c601c6
 800d878:	01c601c6 	.word	0x01c601c6
 800d87c:	01c601c6 	.word	0x01c601c6
 800d880:	01c601c6 	.word	0x01c601c6
 800d884:	01c601c6 	.word	0x01c601c6
 800d888:	01c601c6 	.word	0x01c601c6
 800d88c:	01c601c6 	.word	0x01c601c6
 800d890:	01c601c6 	.word	0x01c601c6
 800d894:	01c601c6 	.word	0x01c601c6
 800d898:	01c601c6 	.word	0x01c601c6
 800d89c:	01c601c6 	.word	0x01c601c6
 800d8a0:	01c601c6 	.word	0x01c601c6
 800d8a4:	01c601c6 	.word	0x01c601c6
 800d8a8:	01c601c6 	.word	0x01c601c6
 800d8ac:	01c601c6 	.word	0x01c601c6
 800d8b0:	01c601c6 	.word	0x01c601c6
 800d8b4:	01c601c6 	.word	0x01c601c6
 800d8b8:	01c601c6 	.word	0x01c601c6
 800d8bc:	01c601c6 	.word	0x01c601c6
 800d8c0:	01c601c6 	.word	0x01c601c6
 800d8c4:	01c601c6 	.word	0x01c601c6
 800d8c8:	01c60059 	.word	0x01c60059
 800d8cc:	01c601c6 	.word	0x01c601c6
 800d8d0:	01c601c6 	.word	0x01c601c6
 800d8d4:	01c601c6 	.word	0x01c601c6
 800d8d8:	01c601c6 	.word	0x01c601c6
 800d8dc:	010c0059 	.word	0x010c0059
 800d8e0:	01c60059 	.word	0x01c60059
 800d8e4:	01c601c6 	.word	0x01c601c6
 800d8e8:	005901c6 	.word	0x005901c6
 800d8ec:	01c601c6 	.word	0x01c601c6
 800d8f0:	01c601c6 	.word	0x01c601c6
 800d8f4:	005901c6 	.word	0x005901c6
 800d8f8:	01c601a0 	.word	0x01c601a0
 800d8fc:	014001c6 	.word	0x014001c6
 800d900:	005901c6 	.word	0x005901c6
 800d904:	01c601c6 	.word	0x01c601c6
 800d908:	0059      	.short	0x0059
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800d90a:	f447 7780 	orr.w	r7, r7, #256	; 0x100
        format++;
 800d90e:	3201      	adds	r2, #1
 800d910:	9209      	str	r2, [sp, #36]	; 0x24
        break;
 800d912:	e79d      	b.n	800d850 <_vsnprintf+0x1c4>
        if (*format == 'x' || *format == 'X') {
 800d914:	2878      	cmp	r0, #120	; 0x78
 800d916:	d009      	beq.n	800d92c <_vsnprintf+0x2a0>
 800d918:	2858      	cmp	r0, #88	; 0x58
 800d91a:	d037      	beq.n	800d98c <_vsnprintf+0x300>
        else if (*format == 'o') {
 800d91c:	286f      	cmp	r0, #111	; 0x6f
 800d91e:	d037      	beq.n	800d990 <_vsnprintf+0x304>
        else if (*format == 'b') {
 800d920:	2862      	cmp	r0, #98	; 0x62
 800d922:	d037      	beq.n	800d994 <_vsnprintf+0x308>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800d924:	f027 0710 	bic.w	r7, r7, #16
          base = 10U;
 800d928:	230a      	movs	r3, #10
 800d92a:	e000      	b.n	800d92e <_vsnprintf+0x2a2>
          base = 16U;
 800d92c:	2310      	movs	r3, #16
        if (*format == 'X') {
 800d92e:	2858      	cmp	r0, #88	; 0x58
 800d930:	d032      	beq.n	800d998 <_vsnprintf+0x30c>
        if ((*format != 'i') && (*format != 'd')) {
 800d932:	2869      	cmp	r0, #105	; 0x69
 800d934:	d003      	beq.n	800d93e <_vsnprintf+0x2b2>
 800d936:	2864      	cmp	r0, #100	; 0x64
 800d938:	d001      	beq.n	800d93e <_vsnprintf+0x2b2>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800d93a:	f027 070c 	bic.w	r7, r7, #12
        if (flags & FLAGS_PRECISION) {
 800d93e:	f417 6f80 	tst.w	r7, #1024	; 0x400
 800d942:	d001      	beq.n	800d948 <_vsnprintf+0x2bc>
          flags &= ~FLAGS_ZEROPAD;
 800d944:	f027 0701 	bic.w	r7, r7, #1
        if ((*format == 'i') || (*format == 'd')) {
 800d948:	2869      	cmp	r0, #105	; 0x69
 800d94a:	d028      	beq.n	800d99e <_vsnprintf+0x312>
 800d94c:	2864      	cmp	r0, #100	; 0x64
 800d94e:	d026      	beq.n	800d99e <_vsnprintf+0x312>
          if (flags & FLAGS_LONG_LONG) {
 800d950:	f417 7f00 	tst.w	r7, #512	; 0x200
 800d954:	d144      	bne.n	800d9e0 <_vsnprintf+0x354>
          else if (flags & FLAGS_LONG) {
 800d956:	f417 7f80 	tst.w	r7, #256	; 0x100
 800d95a:	d16c      	bne.n	800da36 <_vsnprintf+0x3aa>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800d95c:	f017 0f40 	tst.w	r7, #64	; 0x40
 800d960:	d07e      	beq.n	800da60 <_vsnprintf+0x3d4>
 800d962:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d964:	1d11      	adds	r1, r2, #4
 800d966:	9114      	str	r1, [sp, #80]	; 0x50
 800d968:	7812      	ldrb	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800d96a:	9705      	str	r7, [sp, #20]
 800d96c:	f8cd a010 	str.w	sl, [sp, #16]
 800d970:	9907      	ldr	r1, [sp, #28]
 800d972:	9103      	str	r1, [sp, #12]
 800d974:	9302      	str	r3, [sp, #8]
 800d976:	2300      	movs	r3, #0
 800d978:	9301      	str	r3, [sp, #4]
 800d97a:	9200      	str	r2, [sp, #0]
 800d97c:	462b      	mov	r3, r5
 800d97e:	4622      	mov	r2, r4
 800d980:	9906      	ldr	r1, [sp, #24]
 800d982:	4630      	mov	r0, r6
 800d984:	f7ff fe38 	bl	800d5f8 <_ntoa_long>
 800d988:	4604      	mov	r4, r0
 800d98a:	e029      	b.n	800d9e0 <_vsnprintf+0x354>
          base = 16U;
 800d98c:	2310      	movs	r3, #16
 800d98e:	e7ce      	b.n	800d92e <_vsnprintf+0x2a2>
          base =  8U;
 800d990:	2308      	movs	r3, #8
 800d992:	e7cc      	b.n	800d92e <_vsnprintf+0x2a2>
          base =  2U;
 800d994:	2302      	movs	r3, #2
 800d996:	e7ca      	b.n	800d92e <_vsnprintf+0x2a2>
          flags |= FLAGS_UPPERCASE;
 800d998:	f047 0720 	orr.w	r7, r7, #32
 800d99c:	e7c9      	b.n	800d932 <_vsnprintf+0x2a6>
          if (flags & FLAGS_LONG_LONG) {
 800d99e:	f417 7f00 	tst.w	r7, #512	; 0x200
 800d9a2:	d11d      	bne.n	800d9e0 <_vsnprintf+0x354>
          else if (flags & FLAGS_LONG) {
 800d9a4:	f417 7f80 	tst.w	r7, #256	; 0x100
 800d9a8:	d11e      	bne.n	800d9e8 <_vsnprintf+0x35c>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800d9aa:	f017 0f40 	tst.w	r7, #64	; 0x40
 800d9ae:	d034      	beq.n	800da1a <_vsnprintf+0x38e>
 800d9b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d9b2:	1d11      	adds	r1, r2, #4
 800d9b4:	9114      	str	r1, [sp, #80]	; 0x50
 800d9b6:	7812      	ldrb	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800d9b8:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800d9bc:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800d9c0:	0fd2      	lsrs	r2, r2, #31
 800d9c2:	9705      	str	r7, [sp, #20]
 800d9c4:	f8cd a010 	str.w	sl, [sp, #16]
 800d9c8:	9807      	ldr	r0, [sp, #28]
 800d9ca:	9003      	str	r0, [sp, #12]
 800d9cc:	9302      	str	r3, [sp, #8]
 800d9ce:	9201      	str	r2, [sp, #4]
 800d9d0:	9100      	str	r1, [sp, #0]
 800d9d2:	462b      	mov	r3, r5
 800d9d4:	4622      	mov	r2, r4
 800d9d6:	9906      	ldr	r1, [sp, #24]
 800d9d8:	4630      	mov	r0, r6
 800d9da:	f7ff fe0d 	bl	800d5f8 <_ntoa_long>
 800d9de:	4604      	mov	r4, r0
        format++;
 800d9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800d9e6:	e65c      	b.n	800d6a2 <_vsnprintf+0x16>
            const long value = va_arg(va, long);
 800d9e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d9ea:	1d11      	adds	r1, r2, #4
 800d9ec:	9114      	str	r1, [sp, #80]	; 0x50
 800d9ee:	6812      	ldr	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800d9f0:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800d9f4:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800d9f8:	0fd2      	lsrs	r2, r2, #31
 800d9fa:	9705      	str	r7, [sp, #20]
 800d9fc:	f8cd a010 	str.w	sl, [sp, #16]
 800da00:	9807      	ldr	r0, [sp, #28]
 800da02:	9003      	str	r0, [sp, #12]
 800da04:	9302      	str	r3, [sp, #8]
 800da06:	9201      	str	r2, [sp, #4]
 800da08:	9100      	str	r1, [sp, #0]
 800da0a:	462b      	mov	r3, r5
 800da0c:	4622      	mov	r2, r4
 800da0e:	9906      	ldr	r1, [sp, #24]
 800da10:	4630      	mov	r0, r6
 800da12:	f7ff fdf1 	bl	800d5f8 <_ntoa_long>
 800da16:	4604      	mov	r4, r0
 800da18:	e7e2      	b.n	800d9e0 <_vsnprintf+0x354>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800da1a:	f017 0f80 	tst.w	r7, #128	; 0x80
 800da1e:	d005      	beq.n	800da2c <_vsnprintf+0x3a0>
 800da20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da22:	1d11      	adds	r1, r2, #4
 800da24:	9114      	str	r1, [sp, #80]	; 0x50
 800da26:	f9b2 2000 	ldrsh.w	r2, [r2]
 800da2a:	e7c5      	b.n	800d9b8 <_vsnprintf+0x32c>
 800da2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da2e:	1d11      	adds	r1, r2, #4
 800da30:	9114      	str	r1, [sp, #80]	; 0x50
 800da32:	6812      	ldr	r2, [r2, #0]
 800da34:	e7c0      	b.n	800d9b8 <_vsnprintf+0x32c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800da36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da38:	1d11      	adds	r1, r2, #4
 800da3a:	9114      	str	r1, [sp, #80]	; 0x50
 800da3c:	6812      	ldr	r2, [r2, #0]
 800da3e:	9705      	str	r7, [sp, #20]
 800da40:	f8cd a010 	str.w	sl, [sp, #16]
 800da44:	9907      	ldr	r1, [sp, #28]
 800da46:	9103      	str	r1, [sp, #12]
 800da48:	9302      	str	r3, [sp, #8]
 800da4a:	2300      	movs	r3, #0
 800da4c:	9301      	str	r3, [sp, #4]
 800da4e:	9200      	str	r2, [sp, #0]
 800da50:	462b      	mov	r3, r5
 800da52:	4622      	mov	r2, r4
 800da54:	9906      	ldr	r1, [sp, #24]
 800da56:	4630      	mov	r0, r6
 800da58:	f7ff fdce 	bl	800d5f8 <_ntoa_long>
 800da5c:	4604      	mov	r4, r0
 800da5e:	e7bf      	b.n	800d9e0 <_vsnprintf+0x354>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800da60:	f017 0f80 	tst.w	r7, #128	; 0x80
 800da64:	d004      	beq.n	800da70 <_vsnprintf+0x3e4>
 800da66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da68:	1d11      	adds	r1, r2, #4
 800da6a:	9114      	str	r1, [sp, #80]	; 0x50
 800da6c:	8812      	ldrh	r2, [r2, #0]
 800da6e:	e77c      	b.n	800d96a <_vsnprintf+0x2de>
 800da70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da72:	1d11      	adds	r1, r2, #4
 800da74:	9114      	str	r1, [sp, #80]	; 0x50
 800da76:	6812      	ldr	r2, [r2, #0]
 800da78:	e777      	b.n	800d96a <_vsnprintf+0x2de>
        if (!(flags & FLAGS_LEFT)) {
 800da7a:	f017 0702 	ands.w	r7, r7, #2
 800da7e:	d01e      	beq.n	800dabe <_vsnprintf+0x432>
        unsigned int l = 1U;
 800da80:	f04f 0801 	mov.w	r8, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800da84:	9814      	ldr	r0, [sp, #80]	; 0x50
 800da86:	1d03      	adds	r3, r0, #4
 800da88:	9314      	str	r3, [sp, #80]	; 0x50
 800da8a:	f104 0901 	add.w	r9, r4, #1
 800da8e:	462b      	mov	r3, r5
 800da90:	4622      	mov	r2, r4
 800da92:	9906      	ldr	r1, [sp, #24]
 800da94:	7800      	ldrb	r0, [r0, #0]
 800da96:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
 800da98:	b9a7      	cbnz	r7, 800dac4 <_vsnprintf+0x438>
        format++;
 800da9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da9c:	3301      	adds	r3, #1
 800da9e:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800daa0:	464c      	mov	r4, r9
 800daa2:	e5fe      	b.n	800d6a2 <_vsnprintf+0x16>
            out(' ', buffer, idx++, maxlen);
 800daa4:	1c54      	adds	r4, r2, #1
 800daa6:	462b      	mov	r3, r5
 800daa8:	9906      	ldr	r1, [sp, #24]
 800daaa:	2020      	movs	r0, #32
 800daac:	47b0      	blx	r6
          while (l++ < width) {
 800daae:	4643      	mov	r3, r8
            out(' ', buffer, idx++, maxlen);
 800dab0:	4622      	mov	r2, r4
          while (l++ < width) {
 800dab2:	f103 0801 	add.w	r8, r3, #1
 800dab6:	459a      	cmp	sl, r3
 800dab8:	d8f4      	bhi.n	800daa4 <_vsnprintf+0x418>
 800daba:	4614      	mov	r4, r2
 800dabc:	e7e2      	b.n	800da84 <_vsnprintf+0x3f8>
        unsigned int l = 1U;
 800dabe:	2301      	movs	r3, #1
 800dac0:	4622      	mov	r2, r4
 800dac2:	e7f6      	b.n	800dab2 <_vsnprintf+0x426>
 800dac4:	464a      	mov	r2, r9
 800dac6:	e006      	b.n	800dad6 <_vsnprintf+0x44a>
            out(' ', buffer, idx++, maxlen);
 800dac8:	1c57      	adds	r7, r2, #1
 800daca:	462b      	mov	r3, r5
 800dacc:	9906      	ldr	r1, [sp, #24]
 800dace:	2020      	movs	r0, #32
 800dad0:	47b0      	blx	r6
          while (l++ < width) {
 800dad2:	46a0      	mov	r8, r4
            out(' ', buffer, idx++, maxlen);
 800dad4:	463a      	mov	r2, r7
          while (l++ < width) {
 800dad6:	f108 0401 	add.w	r4, r8, #1
 800dada:	45c2      	cmp	sl, r8
 800dadc:	d8f4      	bhi.n	800dac8 <_vsnprintf+0x43c>
 800dade:	4691      	mov	r9, r2
 800dae0:	e7db      	b.n	800da9a <_vsnprintf+0x40e>
        const char* p = va_arg(va, char*);
 800dae2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dae4:	1d1a      	adds	r2, r3, #4
 800dae6:	9214      	str	r2, [sp, #80]	; 0x50
 800dae8:	f8d3 8000 	ldr.w	r8, [r3]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800daec:	9b07      	ldr	r3, [sp, #28]
 800daee:	b9f3      	cbnz	r3, 800db2e <_vsnprintf+0x4a2>
 800daf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800daf4:	46c1      	mov	r9, r8
 800daf6:	e002      	b.n	800dafe <_vsnprintf+0x472>
  for (s = str; *s && maxsize--; ++s);
 800daf8:	f109 0901 	add.w	r9, r9, #1
 800dafc:	4613      	mov	r3, r2
 800dafe:	f899 2000 	ldrb.w	r2, [r9]
 800db02:	b112      	cbz	r2, 800db0a <_vsnprintf+0x47e>
 800db04:	1e5a      	subs	r2, r3, #1
 800db06:	2b00      	cmp	r3, #0
 800db08:	d1f6      	bne.n	800daf8 <_vsnprintf+0x46c>
  return (unsigned int)(s - str);
 800db0a:	eba9 0908 	sub.w	r9, r9, r8
        if (flags & FLAGS_PRECISION) {
 800db0e:	f417 6b80 	ands.w	fp, r7, #1024	; 0x400
 800db12:	d003      	beq.n	800db1c <_vsnprintf+0x490>
          l = (l < precision ? l : precision);
 800db14:	9b07      	ldr	r3, [sp, #28]
 800db16:	4599      	cmp	r9, r3
 800db18:	bf28      	it	cs
 800db1a:	4699      	movcs	r9, r3
        if (!(flags & FLAGS_LEFT)) {
 800db1c:	f017 0302 	ands.w	r3, r7, #2
 800db20:	9308      	str	r3, [sp, #32]
 800db22:	d006      	beq.n	800db32 <_vsnprintf+0x4a6>
 800db24:	4622      	mov	r2, r4
 800db26:	465c      	mov	r4, fp
 800db28:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800db2c:	e01b      	b.n	800db66 <_vsnprintf+0x4da>
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800db2e:	9b07      	ldr	r3, [sp, #28]
 800db30:	e7e0      	b.n	800daf4 <_vsnprintf+0x468>
 800db32:	4622      	mov	r2, r4
 800db34:	e006      	b.n	800db44 <_vsnprintf+0x4b8>
            out(' ', buffer, idx++, maxlen);
 800db36:	1c54      	adds	r4, r2, #1
 800db38:	462b      	mov	r3, r5
 800db3a:	9906      	ldr	r1, [sp, #24]
 800db3c:	2020      	movs	r0, #32
 800db3e:	47b0      	blx	r6
          while (l++ < width) {
 800db40:	46b9      	mov	r9, r7
            out(' ', buffer, idx++, maxlen);
 800db42:	4622      	mov	r2, r4
          while (l++ < width) {
 800db44:	f109 0701 	add.w	r7, r9, #1
 800db48:	45ca      	cmp	sl, r9
 800db4a:	d8f4      	bhi.n	800db36 <_vsnprintf+0x4aa>
 800db4c:	46b9      	mov	r9, r7
 800db4e:	465c      	mov	r4, fp
 800db50:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800db54:	e007      	b.n	800db66 <_vsnprintf+0x4da>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800db56:	469b      	mov	fp, r3
          out(*(p++), buffer, idx++, maxlen);
 800db58:	f108 0801 	add.w	r8, r8, #1
 800db5c:	1c57      	adds	r7, r2, #1
 800db5e:	462b      	mov	r3, r5
 800db60:	9906      	ldr	r1, [sp, #24]
 800db62:	47b0      	blx	r6
 800db64:	463a      	mov	r2, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800db66:	f898 0000 	ldrb.w	r0, [r8]
 800db6a:	b130      	cbz	r0, 800db7a <_vsnprintf+0x4ee>
 800db6c:	2c00      	cmp	r4, #0
 800db6e:	d0f3      	beq.n	800db58 <_vsnprintf+0x4cc>
 800db70:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800db74:	f1bb 0f00 	cmp.w	fp, #0
 800db78:	d1ed      	bne.n	800db56 <_vsnprintf+0x4ca>
 800db7a:	4614      	mov	r4, r2
        if (flags & FLAGS_LEFT) {
 800db7c:	9b08      	ldr	r3, [sp, #32]
 800db7e:	b953      	cbnz	r3, 800db96 <_vsnprintf+0x50a>
        format++;
 800db80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db82:	3301      	adds	r3, #1
 800db84:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800db86:	e58c      	b.n	800d6a2 <_vsnprintf+0x16>
            out(' ', buffer, idx++, maxlen);
 800db88:	1c57      	adds	r7, r2, #1
 800db8a:	462b      	mov	r3, r5
 800db8c:	9906      	ldr	r1, [sp, #24]
 800db8e:	2020      	movs	r0, #32
 800db90:	47b0      	blx	r6
          while (l++ < width) {
 800db92:	46a1      	mov	r9, r4
            out(' ', buffer, idx++, maxlen);
 800db94:	463a      	mov	r2, r7
          while (l++ < width) {
 800db96:	f109 0401 	add.w	r4, r9, #1
 800db9a:	45ca      	cmp	sl, r9
 800db9c:	d8f4      	bhi.n	800db88 <_vsnprintf+0x4fc>
 800db9e:	4614      	mov	r4, r2
 800dba0:	e7ee      	b.n	800db80 <_vsnprintf+0x4f4>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800dba2:	f047 0721 	orr.w	r7, r7, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800dba6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dba8:	1d1a      	adds	r2, r3, #4
 800dbaa:	9214      	str	r2, [sp, #80]	; 0x50
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	9705      	str	r7, [sp, #20]
 800dbb0:	2208      	movs	r2, #8
 800dbb2:	9204      	str	r2, [sp, #16]
 800dbb4:	9a07      	ldr	r2, [sp, #28]
 800dbb6:	9203      	str	r2, [sp, #12]
 800dbb8:	2210      	movs	r2, #16
 800dbba:	9202      	str	r2, [sp, #8]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	9201      	str	r2, [sp, #4]
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	462b      	mov	r3, r5
 800dbc4:	4622      	mov	r2, r4
 800dbc6:	9906      	ldr	r1, [sp, #24]
 800dbc8:	4630      	mov	r0, r6
 800dbca:	f7ff fd15 	bl	800d5f8 <_ntoa_long>
 800dbce:	4604      	mov	r4, r0
        format++;
 800dbd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800dbd6:	e564      	b.n	800d6a2 <_vsnprintf+0x16>
        out('%', buffer, idx++, maxlen);
 800dbd8:	1c67      	adds	r7, r4, #1
 800dbda:	462b      	mov	r3, r5
 800dbdc:	4622      	mov	r2, r4
 800dbde:	9906      	ldr	r1, [sp, #24]
 800dbe0:	2025      	movs	r0, #37	; 0x25
 800dbe2:	47b0      	blx	r6
        format++;
 800dbe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	9309      	str	r3, [sp, #36]	; 0x24
        out('%', buffer, idx++, maxlen);
 800dbea:	463c      	mov	r4, r7
        break;
 800dbec:	e559      	b.n	800d6a2 <_vsnprintf+0x16>

      default :
        out(*format, buffer, idx++, maxlen);
 800dbee:	1c67      	adds	r7, r4, #1
 800dbf0:	462b      	mov	r3, r5
 800dbf2:	4622      	mov	r2, r4
 800dbf4:	9906      	ldr	r1, [sp, #24]
 800dbf6:	47b0      	blx	r6
        format++;
 800dbf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	9309      	str	r3, [sp, #36]	; 0x24
        out(*format, buffer, idx++, maxlen);
 800dbfe:	463c      	mov	r4, r7
        break;
 800dc00:	e54f      	b.n	800d6a2 <_vsnprintf+0x16>
    out = _out_null;
 800dc02:	4e07      	ldr	r6, [pc, #28]	; (800dc20 <_vsnprintf+0x594>)
 800dc04:	e54c      	b.n	800d6a0 <_vsnprintf+0x14>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800dc06:	42ac      	cmp	r4, r5
 800dc08:	d308      	bcc.n	800dc1c <_vsnprintf+0x590>
 800dc0a:	1e6a      	subs	r2, r5, #1
 800dc0c:	462b      	mov	r3, r5
 800dc0e:	9906      	ldr	r1, [sp, #24]
 800dc10:	2000      	movs	r0, #0
 800dc12:	47b0      	blx	r6

  // return written chars without terminating \0
  return (int)idx;
}
 800dc14:	4620      	mov	r0, r4
 800dc16:	b00b      	add	sp, #44	; 0x2c
 800dc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800dc1c:	4622      	mov	r2, r4
 800dc1e:	e7f5      	b.n	800dc0c <_vsnprintf+0x580>
 800dc20:	0800d427 	.word	0x0800d427

0800dc24 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 800dc24:	b40e      	push	{r1, r2, r3}
 800dc26:	b500      	push	{lr}
 800dc28:	b084      	sub	sp, #16
 800dc2a:	aa05      	add	r2, sp, #20
 800dc2c:	f852 3b04 	ldr.w	r3, [r2], #4
  va_list va;
  va_start(va, format);
 800dc30:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800dc32:	9200      	str	r2, [sp, #0]
 800dc34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc38:	4601      	mov	r1, r0
 800dc3a:	4804      	ldr	r0, [pc, #16]	; (800dc4c <sprintf_+0x28>)
 800dc3c:	f7ff fd26 	bl	800d68c <_vsnprintf>
  va_end(va);
  return ret;
}
 800dc40:	b004      	add	sp, #16
 800dc42:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc46:	b003      	add	sp, #12
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop
 800dc4c:	0800d41f 	.word	0x0800d41f

0800dc50 <__errno>:
 800dc50:	4b01      	ldr	r3, [pc, #4]	; (800dc58 <__errno+0x8>)
 800dc52:	6818      	ldr	r0, [r3, #0]
 800dc54:	4770      	bx	lr
 800dc56:	bf00      	nop
 800dc58:	20002468 	.word	0x20002468

0800dc5c <__libc_init_array>:
 800dc5c:	b570      	push	{r4, r5, r6, lr}
 800dc5e:	4e0d      	ldr	r6, [pc, #52]	; (800dc94 <__libc_init_array+0x38>)
 800dc60:	4c0d      	ldr	r4, [pc, #52]	; (800dc98 <__libc_init_array+0x3c>)
 800dc62:	1ba4      	subs	r4, r4, r6
 800dc64:	10a4      	asrs	r4, r4, #2
 800dc66:	2500      	movs	r5, #0
 800dc68:	42a5      	cmp	r5, r4
 800dc6a:	d109      	bne.n	800dc80 <__libc_init_array+0x24>
 800dc6c:	4e0b      	ldr	r6, [pc, #44]	; (800dc9c <__libc_init_array+0x40>)
 800dc6e:	4c0c      	ldr	r4, [pc, #48]	; (800dca0 <__libc_init_array+0x44>)
 800dc70:	f000 fc64 	bl	800e53c <_init>
 800dc74:	1ba4      	subs	r4, r4, r6
 800dc76:	10a4      	asrs	r4, r4, #2
 800dc78:	2500      	movs	r5, #0
 800dc7a:	42a5      	cmp	r5, r4
 800dc7c:	d105      	bne.n	800dc8a <__libc_init_array+0x2e>
 800dc7e:	bd70      	pop	{r4, r5, r6, pc}
 800dc80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dc84:	4798      	blx	r3
 800dc86:	3501      	adds	r5, #1
 800dc88:	e7ee      	b.n	800dc68 <__libc_init_array+0xc>
 800dc8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dc8e:	4798      	blx	r3
 800dc90:	3501      	adds	r5, #1
 800dc92:	e7f2      	b.n	800dc7a <__libc_init_array+0x1e>
 800dc94:	0800f90c 	.word	0x0800f90c
 800dc98:	0800f90c 	.word	0x0800f90c
 800dc9c:	0800f90c 	.word	0x0800f90c
 800dca0:	0800f910 	.word	0x0800f910

0800dca4 <memcpy>:
 800dca4:	b510      	push	{r4, lr}
 800dca6:	1e43      	subs	r3, r0, #1
 800dca8:	440a      	add	r2, r1
 800dcaa:	4291      	cmp	r1, r2
 800dcac:	d100      	bne.n	800dcb0 <memcpy+0xc>
 800dcae:	bd10      	pop	{r4, pc}
 800dcb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcb8:	e7f7      	b.n	800dcaa <memcpy+0x6>

0800dcba <memset>:
 800dcba:	4402      	add	r2, r0
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d100      	bne.n	800dcc4 <memset+0xa>
 800dcc2:	4770      	bx	lr
 800dcc4:	f803 1b01 	strb.w	r1, [r3], #1
 800dcc8:	e7f9      	b.n	800dcbe <memset+0x4>
	...

0800dccc <_free_r>:
 800dccc:	b538      	push	{r3, r4, r5, lr}
 800dcce:	4605      	mov	r5, r0
 800dcd0:	2900      	cmp	r1, #0
 800dcd2:	d045      	beq.n	800dd60 <_free_r+0x94>
 800dcd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcd8:	1f0c      	subs	r4, r1, #4
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	bfb8      	it	lt
 800dcde:	18e4      	addlt	r4, r4, r3
 800dce0:	f000 f908 	bl	800def4 <__malloc_lock>
 800dce4:	4a1f      	ldr	r2, [pc, #124]	; (800dd64 <_free_r+0x98>)
 800dce6:	6813      	ldr	r3, [r2, #0]
 800dce8:	4610      	mov	r0, r2
 800dcea:	b933      	cbnz	r3, 800dcfa <_free_r+0x2e>
 800dcec:	6063      	str	r3, [r4, #4]
 800dcee:	6014      	str	r4, [r2, #0]
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcf6:	f000 b8fe 	b.w	800def6 <__malloc_unlock>
 800dcfa:	42a3      	cmp	r3, r4
 800dcfc:	d90c      	bls.n	800dd18 <_free_r+0x4c>
 800dcfe:	6821      	ldr	r1, [r4, #0]
 800dd00:	1862      	adds	r2, r4, r1
 800dd02:	4293      	cmp	r3, r2
 800dd04:	bf04      	itt	eq
 800dd06:	681a      	ldreq	r2, [r3, #0]
 800dd08:	685b      	ldreq	r3, [r3, #4]
 800dd0a:	6063      	str	r3, [r4, #4]
 800dd0c:	bf04      	itt	eq
 800dd0e:	1852      	addeq	r2, r2, r1
 800dd10:	6022      	streq	r2, [r4, #0]
 800dd12:	6004      	str	r4, [r0, #0]
 800dd14:	e7ec      	b.n	800dcf0 <_free_r+0x24>
 800dd16:	4613      	mov	r3, r2
 800dd18:	685a      	ldr	r2, [r3, #4]
 800dd1a:	b10a      	cbz	r2, 800dd20 <_free_r+0x54>
 800dd1c:	42a2      	cmp	r2, r4
 800dd1e:	d9fa      	bls.n	800dd16 <_free_r+0x4a>
 800dd20:	6819      	ldr	r1, [r3, #0]
 800dd22:	1858      	adds	r0, r3, r1
 800dd24:	42a0      	cmp	r0, r4
 800dd26:	d10b      	bne.n	800dd40 <_free_r+0x74>
 800dd28:	6820      	ldr	r0, [r4, #0]
 800dd2a:	4401      	add	r1, r0
 800dd2c:	1858      	adds	r0, r3, r1
 800dd2e:	4282      	cmp	r2, r0
 800dd30:	6019      	str	r1, [r3, #0]
 800dd32:	d1dd      	bne.n	800dcf0 <_free_r+0x24>
 800dd34:	6810      	ldr	r0, [r2, #0]
 800dd36:	6852      	ldr	r2, [r2, #4]
 800dd38:	605a      	str	r2, [r3, #4]
 800dd3a:	4401      	add	r1, r0
 800dd3c:	6019      	str	r1, [r3, #0]
 800dd3e:	e7d7      	b.n	800dcf0 <_free_r+0x24>
 800dd40:	d902      	bls.n	800dd48 <_free_r+0x7c>
 800dd42:	230c      	movs	r3, #12
 800dd44:	602b      	str	r3, [r5, #0]
 800dd46:	e7d3      	b.n	800dcf0 <_free_r+0x24>
 800dd48:	6820      	ldr	r0, [r4, #0]
 800dd4a:	1821      	adds	r1, r4, r0
 800dd4c:	428a      	cmp	r2, r1
 800dd4e:	bf04      	itt	eq
 800dd50:	6811      	ldreq	r1, [r2, #0]
 800dd52:	6852      	ldreq	r2, [r2, #4]
 800dd54:	6062      	str	r2, [r4, #4]
 800dd56:	bf04      	itt	eq
 800dd58:	1809      	addeq	r1, r1, r0
 800dd5a:	6021      	streq	r1, [r4, #0]
 800dd5c:	605c      	str	r4, [r3, #4]
 800dd5e:	e7c7      	b.n	800dcf0 <_free_r+0x24>
 800dd60:	bd38      	pop	{r3, r4, r5, pc}
 800dd62:	bf00      	nop
 800dd64:	20003950 	.word	0x20003950

0800dd68 <_malloc_r>:
 800dd68:	b570      	push	{r4, r5, r6, lr}
 800dd6a:	1ccd      	adds	r5, r1, #3
 800dd6c:	f025 0503 	bic.w	r5, r5, #3
 800dd70:	3508      	adds	r5, #8
 800dd72:	2d0c      	cmp	r5, #12
 800dd74:	bf38      	it	cc
 800dd76:	250c      	movcc	r5, #12
 800dd78:	2d00      	cmp	r5, #0
 800dd7a:	4606      	mov	r6, r0
 800dd7c:	db01      	blt.n	800dd82 <_malloc_r+0x1a>
 800dd7e:	42a9      	cmp	r1, r5
 800dd80:	d903      	bls.n	800dd8a <_malloc_r+0x22>
 800dd82:	230c      	movs	r3, #12
 800dd84:	6033      	str	r3, [r6, #0]
 800dd86:	2000      	movs	r0, #0
 800dd88:	bd70      	pop	{r4, r5, r6, pc}
 800dd8a:	f000 f8b3 	bl	800def4 <__malloc_lock>
 800dd8e:	4a21      	ldr	r2, [pc, #132]	; (800de14 <_malloc_r+0xac>)
 800dd90:	6814      	ldr	r4, [r2, #0]
 800dd92:	4621      	mov	r1, r4
 800dd94:	b991      	cbnz	r1, 800ddbc <_malloc_r+0x54>
 800dd96:	4c20      	ldr	r4, [pc, #128]	; (800de18 <_malloc_r+0xb0>)
 800dd98:	6823      	ldr	r3, [r4, #0]
 800dd9a:	b91b      	cbnz	r3, 800dda4 <_malloc_r+0x3c>
 800dd9c:	4630      	mov	r0, r6
 800dd9e:	f000 f83d 	bl	800de1c <_sbrk_r>
 800dda2:	6020      	str	r0, [r4, #0]
 800dda4:	4629      	mov	r1, r5
 800dda6:	4630      	mov	r0, r6
 800dda8:	f000 f838 	bl	800de1c <_sbrk_r>
 800ddac:	1c43      	adds	r3, r0, #1
 800ddae:	d124      	bne.n	800ddfa <_malloc_r+0x92>
 800ddb0:	230c      	movs	r3, #12
 800ddb2:	6033      	str	r3, [r6, #0]
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	f000 f89e 	bl	800def6 <__malloc_unlock>
 800ddba:	e7e4      	b.n	800dd86 <_malloc_r+0x1e>
 800ddbc:	680b      	ldr	r3, [r1, #0]
 800ddbe:	1b5b      	subs	r3, r3, r5
 800ddc0:	d418      	bmi.n	800ddf4 <_malloc_r+0x8c>
 800ddc2:	2b0b      	cmp	r3, #11
 800ddc4:	d90f      	bls.n	800dde6 <_malloc_r+0x7e>
 800ddc6:	600b      	str	r3, [r1, #0]
 800ddc8:	50cd      	str	r5, [r1, r3]
 800ddca:	18cc      	adds	r4, r1, r3
 800ddcc:	4630      	mov	r0, r6
 800ddce:	f000 f892 	bl	800def6 <__malloc_unlock>
 800ddd2:	f104 000b 	add.w	r0, r4, #11
 800ddd6:	1d23      	adds	r3, r4, #4
 800ddd8:	f020 0007 	bic.w	r0, r0, #7
 800dddc:	1ac3      	subs	r3, r0, r3
 800ddde:	d0d3      	beq.n	800dd88 <_malloc_r+0x20>
 800dde0:	425a      	negs	r2, r3
 800dde2:	50e2      	str	r2, [r4, r3]
 800dde4:	e7d0      	b.n	800dd88 <_malloc_r+0x20>
 800dde6:	428c      	cmp	r4, r1
 800dde8:	684b      	ldr	r3, [r1, #4]
 800ddea:	bf16      	itet	ne
 800ddec:	6063      	strne	r3, [r4, #4]
 800ddee:	6013      	streq	r3, [r2, #0]
 800ddf0:	460c      	movne	r4, r1
 800ddf2:	e7eb      	b.n	800ddcc <_malloc_r+0x64>
 800ddf4:	460c      	mov	r4, r1
 800ddf6:	6849      	ldr	r1, [r1, #4]
 800ddf8:	e7cc      	b.n	800dd94 <_malloc_r+0x2c>
 800ddfa:	1cc4      	adds	r4, r0, #3
 800ddfc:	f024 0403 	bic.w	r4, r4, #3
 800de00:	42a0      	cmp	r0, r4
 800de02:	d005      	beq.n	800de10 <_malloc_r+0xa8>
 800de04:	1a21      	subs	r1, r4, r0
 800de06:	4630      	mov	r0, r6
 800de08:	f000 f808 	bl	800de1c <_sbrk_r>
 800de0c:	3001      	adds	r0, #1
 800de0e:	d0cf      	beq.n	800ddb0 <_malloc_r+0x48>
 800de10:	6025      	str	r5, [r4, #0]
 800de12:	e7db      	b.n	800ddcc <_malloc_r+0x64>
 800de14:	20003950 	.word	0x20003950
 800de18:	20003954 	.word	0x20003954

0800de1c <_sbrk_r>:
 800de1c:	b538      	push	{r3, r4, r5, lr}
 800de1e:	4c06      	ldr	r4, [pc, #24]	; (800de38 <_sbrk_r+0x1c>)
 800de20:	2300      	movs	r3, #0
 800de22:	4605      	mov	r5, r0
 800de24:	4608      	mov	r0, r1
 800de26:	6023      	str	r3, [r4, #0]
 800de28:	f7f8 fdd8 	bl	80069dc <_sbrk>
 800de2c:	1c43      	adds	r3, r0, #1
 800de2e:	d102      	bne.n	800de36 <_sbrk_r+0x1a>
 800de30:	6823      	ldr	r3, [r4, #0]
 800de32:	b103      	cbz	r3, 800de36 <_sbrk_r+0x1a>
 800de34:	602b      	str	r3, [r5, #0]
 800de36:	bd38      	pop	{r3, r4, r5, pc}
 800de38:	20004304 	.word	0x20004304

0800de3c <siprintf>:
 800de3c:	b40e      	push	{r1, r2, r3}
 800de3e:	b500      	push	{lr}
 800de40:	b09c      	sub	sp, #112	; 0x70
 800de42:	ab1d      	add	r3, sp, #116	; 0x74
 800de44:	9002      	str	r0, [sp, #8]
 800de46:	9006      	str	r0, [sp, #24]
 800de48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800de4c:	4809      	ldr	r0, [pc, #36]	; (800de74 <siprintf+0x38>)
 800de4e:	9107      	str	r1, [sp, #28]
 800de50:	9104      	str	r1, [sp, #16]
 800de52:	4909      	ldr	r1, [pc, #36]	; (800de78 <siprintf+0x3c>)
 800de54:	f853 2b04 	ldr.w	r2, [r3], #4
 800de58:	9105      	str	r1, [sp, #20]
 800de5a:	6800      	ldr	r0, [r0, #0]
 800de5c:	9301      	str	r3, [sp, #4]
 800de5e:	a902      	add	r1, sp, #8
 800de60:	f000 f8a4 	bl	800dfac <_svfiprintf_r>
 800de64:	9b02      	ldr	r3, [sp, #8]
 800de66:	2200      	movs	r2, #0
 800de68:	701a      	strb	r2, [r3, #0]
 800de6a:	b01c      	add	sp, #112	; 0x70
 800de6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de70:	b003      	add	sp, #12
 800de72:	4770      	bx	lr
 800de74:	20002468 	.word	0x20002468
 800de78:	ffff0208 	.word	0xffff0208

0800de7c <strchr>:
 800de7c:	b2c9      	uxtb	r1, r1
 800de7e:	4603      	mov	r3, r0
 800de80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de84:	b11a      	cbz	r2, 800de8e <strchr+0x12>
 800de86:	428a      	cmp	r2, r1
 800de88:	d1f9      	bne.n	800de7e <strchr+0x2>
 800de8a:	4618      	mov	r0, r3
 800de8c:	4770      	bx	lr
 800de8e:	2900      	cmp	r1, #0
 800de90:	bf18      	it	ne
 800de92:	2300      	movne	r3, #0
 800de94:	e7f9      	b.n	800de8a <strchr+0xe>

0800de96 <strcpy>:
 800de96:	4603      	mov	r3, r0
 800de98:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de9c:	f803 2b01 	strb.w	r2, [r3], #1
 800dea0:	2a00      	cmp	r2, #0
 800dea2:	d1f9      	bne.n	800de98 <strcpy+0x2>
 800dea4:	4770      	bx	lr

0800dea6 <strncmp>:
 800dea6:	b510      	push	{r4, lr}
 800dea8:	b16a      	cbz	r2, 800dec6 <strncmp+0x20>
 800deaa:	3901      	subs	r1, #1
 800deac:	1884      	adds	r4, r0, r2
 800deae:	f810 3b01 	ldrb.w	r3, [r0], #1
 800deb2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d103      	bne.n	800dec2 <strncmp+0x1c>
 800deba:	42a0      	cmp	r0, r4
 800debc:	d001      	beq.n	800dec2 <strncmp+0x1c>
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d1f5      	bne.n	800deae <strncmp+0x8>
 800dec2:	1a98      	subs	r0, r3, r2
 800dec4:	bd10      	pop	{r4, pc}
 800dec6:	4610      	mov	r0, r2
 800dec8:	e7fc      	b.n	800dec4 <strncmp+0x1e>

0800deca <strncpy>:
 800deca:	b570      	push	{r4, r5, r6, lr}
 800decc:	3901      	subs	r1, #1
 800dece:	4604      	mov	r4, r0
 800ded0:	b902      	cbnz	r2, 800ded4 <strncpy+0xa>
 800ded2:	bd70      	pop	{r4, r5, r6, pc}
 800ded4:	4623      	mov	r3, r4
 800ded6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800deda:	f803 5b01 	strb.w	r5, [r3], #1
 800dede:	1e56      	subs	r6, r2, #1
 800dee0:	b92d      	cbnz	r5, 800deee <strncpy+0x24>
 800dee2:	4414      	add	r4, r2
 800dee4:	42a3      	cmp	r3, r4
 800dee6:	d0f4      	beq.n	800ded2 <strncpy+0x8>
 800dee8:	f803 5b01 	strb.w	r5, [r3], #1
 800deec:	e7fa      	b.n	800dee4 <strncpy+0x1a>
 800deee:	461c      	mov	r4, r3
 800def0:	4632      	mov	r2, r6
 800def2:	e7ed      	b.n	800ded0 <strncpy+0x6>

0800def4 <__malloc_lock>:
 800def4:	4770      	bx	lr

0800def6 <__malloc_unlock>:
 800def6:	4770      	bx	lr

0800def8 <__ssputs_r>:
 800def8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800defc:	688e      	ldr	r6, [r1, #8]
 800defe:	429e      	cmp	r6, r3
 800df00:	4682      	mov	sl, r0
 800df02:	460c      	mov	r4, r1
 800df04:	4690      	mov	r8, r2
 800df06:	4699      	mov	r9, r3
 800df08:	d837      	bhi.n	800df7a <__ssputs_r+0x82>
 800df0a:	898a      	ldrh	r2, [r1, #12]
 800df0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df10:	d031      	beq.n	800df76 <__ssputs_r+0x7e>
 800df12:	6825      	ldr	r5, [r4, #0]
 800df14:	6909      	ldr	r1, [r1, #16]
 800df16:	1a6f      	subs	r7, r5, r1
 800df18:	6965      	ldr	r5, [r4, #20]
 800df1a:	2302      	movs	r3, #2
 800df1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df20:	fb95 f5f3 	sdiv	r5, r5, r3
 800df24:	f109 0301 	add.w	r3, r9, #1
 800df28:	443b      	add	r3, r7
 800df2a:	429d      	cmp	r5, r3
 800df2c:	bf38      	it	cc
 800df2e:	461d      	movcc	r5, r3
 800df30:	0553      	lsls	r3, r2, #21
 800df32:	d530      	bpl.n	800df96 <__ssputs_r+0x9e>
 800df34:	4629      	mov	r1, r5
 800df36:	f7ff ff17 	bl	800dd68 <_malloc_r>
 800df3a:	4606      	mov	r6, r0
 800df3c:	b950      	cbnz	r0, 800df54 <__ssputs_r+0x5c>
 800df3e:	230c      	movs	r3, #12
 800df40:	f8ca 3000 	str.w	r3, [sl]
 800df44:	89a3      	ldrh	r3, [r4, #12]
 800df46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df4a:	81a3      	strh	r3, [r4, #12]
 800df4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df54:	463a      	mov	r2, r7
 800df56:	6921      	ldr	r1, [r4, #16]
 800df58:	f7ff fea4 	bl	800dca4 <memcpy>
 800df5c:	89a3      	ldrh	r3, [r4, #12]
 800df5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df66:	81a3      	strh	r3, [r4, #12]
 800df68:	6126      	str	r6, [r4, #16]
 800df6a:	6165      	str	r5, [r4, #20]
 800df6c:	443e      	add	r6, r7
 800df6e:	1bed      	subs	r5, r5, r7
 800df70:	6026      	str	r6, [r4, #0]
 800df72:	60a5      	str	r5, [r4, #8]
 800df74:	464e      	mov	r6, r9
 800df76:	454e      	cmp	r6, r9
 800df78:	d900      	bls.n	800df7c <__ssputs_r+0x84>
 800df7a:	464e      	mov	r6, r9
 800df7c:	4632      	mov	r2, r6
 800df7e:	4641      	mov	r1, r8
 800df80:	6820      	ldr	r0, [r4, #0]
 800df82:	f000 fa93 	bl	800e4ac <memmove>
 800df86:	68a3      	ldr	r3, [r4, #8]
 800df88:	1b9b      	subs	r3, r3, r6
 800df8a:	60a3      	str	r3, [r4, #8]
 800df8c:	6823      	ldr	r3, [r4, #0]
 800df8e:	441e      	add	r6, r3
 800df90:	6026      	str	r6, [r4, #0]
 800df92:	2000      	movs	r0, #0
 800df94:	e7dc      	b.n	800df50 <__ssputs_r+0x58>
 800df96:	462a      	mov	r2, r5
 800df98:	f000 faa1 	bl	800e4de <_realloc_r>
 800df9c:	4606      	mov	r6, r0
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d1e2      	bne.n	800df68 <__ssputs_r+0x70>
 800dfa2:	6921      	ldr	r1, [r4, #16]
 800dfa4:	4650      	mov	r0, sl
 800dfa6:	f7ff fe91 	bl	800dccc <_free_r>
 800dfaa:	e7c8      	b.n	800df3e <__ssputs_r+0x46>

0800dfac <_svfiprintf_r>:
 800dfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb0:	461d      	mov	r5, r3
 800dfb2:	898b      	ldrh	r3, [r1, #12]
 800dfb4:	061f      	lsls	r7, r3, #24
 800dfb6:	b09d      	sub	sp, #116	; 0x74
 800dfb8:	4680      	mov	r8, r0
 800dfba:	460c      	mov	r4, r1
 800dfbc:	4616      	mov	r6, r2
 800dfbe:	d50f      	bpl.n	800dfe0 <_svfiprintf_r+0x34>
 800dfc0:	690b      	ldr	r3, [r1, #16]
 800dfc2:	b96b      	cbnz	r3, 800dfe0 <_svfiprintf_r+0x34>
 800dfc4:	2140      	movs	r1, #64	; 0x40
 800dfc6:	f7ff fecf 	bl	800dd68 <_malloc_r>
 800dfca:	6020      	str	r0, [r4, #0]
 800dfcc:	6120      	str	r0, [r4, #16]
 800dfce:	b928      	cbnz	r0, 800dfdc <_svfiprintf_r+0x30>
 800dfd0:	230c      	movs	r3, #12
 800dfd2:	f8c8 3000 	str.w	r3, [r8]
 800dfd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dfda:	e0c8      	b.n	800e16e <_svfiprintf_r+0x1c2>
 800dfdc:	2340      	movs	r3, #64	; 0x40
 800dfde:	6163      	str	r3, [r4, #20]
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	9309      	str	r3, [sp, #36]	; 0x24
 800dfe4:	2320      	movs	r3, #32
 800dfe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dfea:	2330      	movs	r3, #48	; 0x30
 800dfec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dff0:	9503      	str	r5, [sp, #12]
 800dff2:	f04f 0b01 	mov.w	fp, #1
 800dff6:	4637      	mov	r7, r6
 800dff8:	463d      	mov	r5, r7
 800dffa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dffe:	b10b      	cbz	r3, 800e004 <_svfiprintf_r+0x58>
 800e000:	2b25      	cmp	r3, #37	; 0x25
 800e002:	d13e      	bne.n	800e082 <_svfiprintf_r+0xd6>
 800e004:	ebb7 0a06 	subs.w	sl, r7, r6
 800e008:	d00b      	beq.n	800e022 <_svfiprintf_r+0x76>
 800e00a:	4653      	mov	r3, sl
 800e00c:	4632      	mov	r2, r6
 800e00e:	4621      	mov	r1, r4
 800e010:	4640      	mov	r0, r8
 800e012:	f7ff ff71 	bl	800def8 <__ssputs_r>
 800e016:	3001      	adds	r0, #1
 800e018:	f000 80a4 	beq.w	800e164 <_svfiprintf_r+0x1b8>
 800e01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e01e:	4453      	add	r3, sl
 800e020:	9309      	str	r3, [sp, #36]	; 0x24
 800e022:	783b      	ldrb	r3, [r7, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	f000 809d 	beq.w	800e164 <_svfiprintf_r+0x1b8>
 800e02a:	2300      	movs	r3, #0
 800e02c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e034:	9304      	str	r3, [sp, #16]
 800e036:	9307      	str	r3, [sp, #28]
 800e038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e03c:	931a      	str	r3, [sp, #104]	; 0x68
 800e03e:	462f      	mov	r7, r5
 800e040:	2205      	movs	r2, #5
 800e042:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e046:	4850      	ldr	r0, [pc, #320]	; (800e188 <_svfiprintf_r+0x1dc>)
 800e048:	f7f2 f8d2 	bl	80001f0 <memchr>
 800e04c:	9b04      	ldr	r3, [sp, #16]
 800e04e:	b9d0      	cbnz	r0, 800e086 <_svfiprintf_r+0xda>
 800e050:	06d9      	lsls	r1, r3, #27
 800e052:	bf44      	itt	mi
 800e054:	2220      	movmi	r2, #32
 800e056:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e05a:	071a      	lsls	r2, r3, #28
 800e05c:	bf44      	itt	mi
 800e05e:	222b      	movmi	r2, #43	; 0x2b
 800e060:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e064:	782a      	ldrb	r2, [r5, #0]
 800e066:	2a2a      	cmp	r2, #42	; 0x2a
 800e068:	d015      	beq.n	800e096 <_svfiprintf_r+0xea>
 800e06a:	9a07      	ldr	r2, [sp, #28]
 800e06c:	462f      	mov	r7, r5
 800e06e:	2000      	movs	r0, #0
 800e070:	250a      	movs	r5, #10
 800e072:	4639      	mov	r1, r7
 800e074:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e078:	3b30      	subs	r3, #48	; 0x30
 800e07a:	2b09      	cmp	r3, #9
 800e07c:	d94d      	bls.n	800e11a <_svfiprintf_r+0x16e>
 800e07e:	b1b8      	cbz	r0, 800e0b0 <_svfiprintf_r+0x104>
 800e080:	e00f      	b.n	800e0a2 <_svfiprintf_r+0xf6>
 800e082:	462f      	mov	r7, r5
 800e084:	e7b8      	b.n	800dff8 <_svfiprintf_r+0x4c>
 800e086:	4a40      	ldr	r2, [pc, #256]	; (800e188 <_svfiprintf_r+0x1dc>)
 800e088:	1a80      	subs	r0, r0, r2
 800e08a:	fa0b f000 	lsl.w	r0, fp, r0
 800e08e:	4318      	orrs	r0, r3
 800e090:	9004      	str	r0, [sp, #16]
 800e092:	463d      	mov	r5, r7
 800e094:	e7d3      	b.n	800e03e <_svfiprintf_r+0x92>
 800e096:	9a03      	ldr	r2, [sp, #12]
 800e098:	1d11      	adds	r1, r2, #4
 800e09a:	6812      	ldr	r2, [r2, #0]
 800e09c:	9103      	str	r1, [sp, #12]
 800e09e:	2a00      	cmp	r2, #0
 800e0a0:	db01      	blt.n	800e0a6 <_svfiprintf_r+0xfa>
 800e0a2:	9207      	str	r2, [sp, #28]
 800e0a4:	e004      	b.n	800e0b0 <_svfiprintf_r+0x104>
 800e0a6:	4252      	negs	r2, r2
 800e0a8:	f043 0302 	orr.w	r3, r3, #2
 800e0ac:	9207      	str	r2, [sp, #28]
 800e0ae:	9304      	str	r3, [sp, #16]
 800e0b0:	783b      	ldrb	r3, [r7, #0]
 800e0b2:	2b2e      	cmp	r3, #46	; 0x2e
 800e0b4:	d10c      	bne.n	800e0d0 <_svfiprintf_r+0x124>
 800e0b6:	787b      	ldrb	r3, [r7, #1]
 800e0b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e0ba:	d133      	bne.n	800e124 <_svfiprintf_r+0x178>
 800e0bc:	9b03      	ldr	r3, [sp, #12]
 800e0be:	1d1a      	adds	r2, r3, #4
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	9203      	str	r2, [sp, #12]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	bfb8      	it	lt
 800e0c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e0cc:	3702      	adds	r7, #2
 800e0ce:	9305      	str	r3, [sp, #20]
 800e0d0:	4d2e      	ldr	r5, [pc, #184]	; (800e18c <_svfiprintf_r+0x1e0>)
 800e0d2:	7839      	ldrb	r1, [r7, #0]
 800e0d4:	2203      	movs	r2, #3
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	f7f2 f88a 	bl	80001f0 <memchr>
 800e0dc:	b138      	cbz	r0, 800e0ee <_svfiprintf_r+0x142>
 800e0de:	2340      	movs	r3, #64	; 0x40
 800e0e0:	1b40      	subs	r0, r0, r5
 800e0e2:	fa03 f000 	lsl.w	r0, r3, r0
 800e0e6:	9b04      	ldr	r3, [sp, #16]
 800e0e8:	4303      	orrs	r3, r0
 800e0ea:	3701      	adds	r7, #1
 800e0ec:	9304      	str	r3, [sp, #16]
 800e0ee:	7839      	ldrb	r1, [r7, #0]
 800e0f0:	4827      	ldr	r0, [pc, #156]	; (800e190 <_svfiprintf_r+0x1e4>)
 800e0f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0f6:	2206      	movs	r2, #6
 800e0f8:	1c7e      	adds	r6, r7, #1
 800e0fa:	f7f2 f879 	bl	80001f0 <memchr>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	d038      	beq.n	800e174 <_svfiprintf_r+0x1c8>
 800e102:	4b24      	ldr	r3, [pc, #144]	; (800e194 <_svfiprintf_r+0x1e8>)
 800e104:	bb13      	cbnz	r3, 800e14c <_svfiprintf_r+0x1a0>
 800e106:	9b03      	ldr	r3, [sp, #12]
 800e108:	3307      	adds	r3, #7
 800e10a:	f023 0307 	bic.w	r3, r3, #7
 800e10e:	3308      	adds	r3, #8
 800e110:	9303      	str	r3, [sp, #12]
 800e112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e114:	444b      	add	r3, r9
 800e116:	9309      	str	r3, [sp, #36]	; 0x24
 800e118:	e76d      	b.n	800dff6 <_svfiprintf_r+0x4a>
 800e11a:	fb05 3202 	mla	r2, r5, r2, r3
 800e11e:	2001      	movs	r0, #1
 800e120:	460f      	mov	r7, r1
 800e122:	e7a6      	b.n	800e072 <_svfiprintf_r+0xc6>
 800e124:	2300      	movs	r3, #0
 800e126:	3701      	adds	r7, #1
 800e128:	9305      	str	r3, [sp, #20]
 800e12a:	4619      	mov	r1, r3
 800e12c:	250a      	movs	r5, #10
 800e12e:	4638      	mov	r0, r7
 800e130:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e134:	3a30      	subs	r2, #48	; 0x30
 800e136:	2a09      	cmp	r2, #9
 800e138:	d903      	bls.n	800e142 <_svfiprintf_r+0x196>
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d0c8      	beq.n	800e0d0 <_svfiprintf_r+0x124>
 800e13e:	9105      	str	r1, [sp, #20]
 800e140:	e7c6      	b.n	800e0d0 <_svfiprintf_r+0x124>
 800e142:	fb05 2101 	mla	r1, r5, r1, r2
 800e146:	2301      	movs	r3, #1
 800e148:	4607      	mov	r7, r0
 800e14a:	e7f0      	b.n	800e12e <_svfiprintf_r+0x182>
 800e14c:	ab03      	add	r3, sp, #12
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	4622      	mov	r2, r4
 800e152:	4b11      	ldr	r3, [pc, #68]	; (800e198 <_svfiprintf_r+0x1ec>)
 800e154:	a904      	add	r1, sp, #16
 800e156:	4640      	mov	r0, r8
 800e158:	f3af 8000 	nop.w
 800e15c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e160:	4681      	mov	r9, r0
 800e162:	d1d6      	bne.n	800e112 <_svfiprintf_r+0x166>
 800e164:	89a3      	ldrh	r3, [r4, #12]
 800e166:	065b      	lsls	r3, r3, #25
 800e168:	f53f af35 	bmi.w	800dfd6 <_svfiprintf_r+0x2a>
 800e16c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e16e:	b01d      	add	sp, #116	; 0x74
 800e170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e174:	ab03      	add	r3, sp, #12
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	4622      	mov	r2, r4
 800e17a:	4b07      	ldr	r3, [pc, #28]	; (800e198 <_svfiprintf_r+0x1ec>)
 800e17c:	a904      	add	r1, sp, #16
 800e17e:	4640      	mov	r0, r8
 800e180:	f000 f882 	bl	800e288 <_printf_i>
 800e184:	e7ea      	b.n	800e15c <_svfiprintf_r+0x1b0>
 800e186:	bf00      	nop
 800e188:	0800f8d0 	.word	0x0800f8d0
 800e18c:	0800f8d6 	.word	0x0800f8d6
 800e190:	0800f8da 	.word	0x0800f8da
 800e194:	00000000 	.word	0x00000000
 800e198:	0800def9 	.word	0x0800def9

0800e19c <_printf_common>:
 800e19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1a0:	4691      	mov	r9, r2
 800e1a2:	461f      	mov	r7, r3
 800e1a4:	688a      	ldr	r2, [r1, #8]
 800e1a6:	690b      	ldr	r3, [r1, #16]
 800e1a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	bfb8      	it	lt
 800e1b0:	4613      	movlt	r3, r2
 800e1b2:	f8c9 3000 	str.w	r3, [r9]
 800e1b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e1ba:	4606      	mov	r6, r0
 800e1bc:	460c      	mov	r4, r1
 800e1be:	b112      	cbz	r2, 800e1c6 <_printf_common+0x2a>
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	f8c9 3000 	str.w	r3, [r9]
 800e1c6:	6823      	ldr	r3, [r4, #0]
 800e1c8:	0699      	lsls	r1, r3, #26
 800e1ca:	bf42      	ittt	mi
 800e1cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e1d0:	3302      	addmi	r3, #2
 800e1d2:	f8c9 3000 	strmi.w	r3, [r9]
 800e1d6:	6825      	ldr	r5, [r4, #0]
 800e1d8:	f015 0506 	ands.w	r5, r5, #6
 800e1dc:	d107      	bne.n	800e1ee <_printf_common+0x52>
 800e1de:	f104 0a19 	add.w	sl, r4, #25
 800e1e2:	68e3      	ldr	r3, [r4, #12]
 800e1e4:	f8d9 2000 	ldr.w	r2, [r9]
 800e1e8:	1a9b      	subs	r3, r3, r2
 800e1ea:	42ab      	cmp	r3, r5
 800e1ec:	dc28      	bgt.n	800e240 <_printf_common+0xa4>
 800e1ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e1f2:	6822      	ldr	r2, [r4, #0]
 800e1f4:	3300      	adds	r3, #0
 800e1f6:	bf18      	it	ne
 800e1f8:	2301      	movne	r3, #1
 800e1fa:	0692      	lsls	r2, r2, #26
 800e1fc:	d42d      	bmi.n	800e25a <_printf_common+0xbe>
 800e1fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e202:	4639      	mov	r1, r7
 800e204:	4630      	mov	r0, r6
 800e206:	47c0      	blx	r8
 800e208:	3001      	adds	r0, #1
 800e20a:	d020      	beq.n	800e24e <_printf_common+0xb2>
 800e20c:	6823      	ldr	r3, [r4, #0]
 800e20e:	68e5      	ldr	r5, [r4, #12]
 800e210:	f8d9 2000 	ldr.w	r2, [r9]
 800e214:	f003 0306 	and.w	r3, r3, #6
 800e218:	2b04      	cmp	r3, #4
 800e21a:	bf08      	it	eq
 800e21c:	1aad      	subeq	r5, r5, r2
 800e21e:	68a3      	ldr	r3, [r4, #8]
 800e220:	6922      	ldr	r2, [r4, #16]
 800e222:	bf0c      	ite	eq
 800e224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e228:	2500      	movne	r5, #0
 800e22a:	4293      	cmp	r3, r2
 800e22c:	bfc4      	itt	gt
 800e22e:	1a9b      	subgt	r3, r3, r2
 800e230:	18ed      	addgt	r5, r5, r3
 800e232:	f04f 0900 	mov.w	r9, #0
 800e236:	341a      	adds	r4, #26
 800e238:	454d      	cmp	r5, r9
 800e23a:	d11a      	bne.n	800e272 <_printf_common+0xd6>
 800e23c:	2000      	movs	r0, #0
 800e23e:	e008      	b.n	800e252 <_printf_common+0xb6>
 800e240:	2301      	movs	r3, #1
 800e242:	4652      	mov	r2, sl
 800e244:	4639      	mov	r1, r7
 800e246:	4630      	mov	r0, r6
 800e248:	47c0      	blx	r8
 800e24a:	3001      	adds	r0, #1
 800e24c:	d103      	bne.n	800e256 <_printf_common+0xba>
 800e24e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e256:	3501      	adds	r5, #1
 800e258:	e7c3      	b.n	800e1e2 <_printf_common+0x46>
 800e25a:	18e1      	adds	r1, r4, r3
 800e25c:	1c5a      	adds	r2, r3, #1
 800e25e:	2030      	movs	r0, #48	; 0x30
 800e260:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e264:	4422      	add	r2, r4
 800e266:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e26a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e26e:	3302      	adds	r3, #2
 800e270:	e7c5      	b.n	800e1fe <_printf_common+0x62>
 800e272:	2301      	movs	r3, #1
 800e274:	4622      	mov	r2, r4
 800e276:	4639      	mov	r1, r7
 800e278:	4630      	mov	r0, r6
 800e27a:	47c0      	blx	r8
 800e27c:	3001      	adds	r0, #1
 800e27e:	d0e6      	beq.n	800e24e <_printf_common+0xb2>
 800e280:	f109 0901 	add.w	r9, r9, #1
 800e284:	e7d8      	b.n	800e238 <_printf_common+0x9c>
	...

0800e288 <_printf_i>:
 800e288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e28c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e290:	460c      	mov	r4, r1
 800e292:	7e09      	ldrb	r1, [r1, #24]
 800e294:	b085      	sub	sp, #20
 800e296:	296e      	cmp	r1, #110	; 0x6e
 800e298:	4617      	mov	r7, r2
 800e29a:	4606      	mov	r6, r0
 800e29c:	4698      	mov	r8, r3
 800e29e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2a0:	f000 80b3 	beq.w	800e40a <_printf_i+0x182>
 800e2a4:	d822      	bhi.n	800e2ec <_printf_i+0x64>
 800e2a6:	2963      	cmp	r1, #99	; 0x63
 800e2a8:	d036      	beq.n	800e318 <_printf_i+0x90>
 800e2aa:	d80a      	bhi.n	800e2c2 <_printf_i+0x3a>
 800e2ac:	2900      	cmp	r1, #0
 800e2ae:	f000 80b9 	beq.w	800e424 <_printf_i+0x19c>
 800e2b2:	2958      	cmp	r1, #88	; 0x58
 800e2b4:	f000 8083 	beq.w	800e3be <_printf_i+0x136>
 800e2b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e2c0:	e032      	b.n	800e328 <_printf_i+0xa0>
 800e2c2:	2964      	cmp	r1, #100	; 0x64
 800e2c4:	d001      	beq.n	800e2ca <_printf_i+0x42>
 800e2c6:	2969      	cmp	r1, #105	; 0x69
 800e2c8:	d1f6      	bne.n	800e2b8 <_printf_i+0x30>
 800e2ca:	6820      	ldr	r0, [r4, #0]
 800e2cc:	6813      	ldr	r3, [r2, #0]
 800e2ce:	0605      	lsls	r5, r0, #24
 800e2d0:	f103 0104 	add.w	r1, r3, #4
 800e2d4:	d52a      	bpl.n	800e32c <_printf_i+0xa4>
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	6011      	str	r1, [r2, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	da03      	bge.n	800e2e6 <_printf_i+0x5e>
 800e2de:	222d      	movs	r2, #45	; 0x2d
 800e2e0:	425b      	negs	r3, r3
 800e2e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e2e6:	486f      	ldr	r0, [pc, #444]	; (800e4a4 <_printf_i+0x21c>)
 800e2e8:	220a      	movs	r2, #10
 800e2ea:	e039      	b.n	800e360 <_printf_i+0xd8>
 800e2ec:	2973      	cmp	r1, #115	; 0x73
 800e2ee:	f000 809d 	beq.w	800e42c <_printf_i+0x1a4>
 800e2f2:	d808      	bhi.n	800e306 <_printf_i+0x7e>
 800e2f4:	296f      	cmp	r1, #111	; 0x6f
 800e2f6:	d020      	beq.n	800e33a <_printf_i+0xb2>
 800e2f8:	2970      	cmp	r1, #112	; 0x70
 800e2fa:	d1dd      	bne.n	800e2b8 <_printf_i+0x30>
 800e2fc:	6823      	ldr	r3, [r4, #0]
 800e2fe:	f043 0320 	orr.w	r3, r3, #32
 800e302:	6023      	str	r3, [r4, #0]
 800e304:	e003      	b.n	800e30e <_printf_i+0x86>
 800e306:	2975      	cmp	r1, #117	; 0x75
 800e308:	d017      	beq.n	800e33a <_printf_i+0xb2>
 800e30a:	2978      	cmp	r1, #120	; 0x78
 800e30c:	d1d4      	bne.n	800e2b8 <_printf_i+0x30>
 800e30e:	2378      	movs	r3, #120	; 0x78
 800e310:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e314:	4864      	ldr	r0, [pc, #400]	; (800e4a8 <_printf_i+0x220>)
 800e316:	e055      	b.n	800e3c4 <_printf_i+0x13c>
 800e318:	6813      	ldr	r3, [r2, #0]
 800e31a:	1d19      	adds	r1, r3, #4
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	6011      	str	r1, [r2, #0]
 800e320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e324:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e328:	2301      	movs	r3, #1
 800e32a:	e08c      	b.n	800e446 <_printf_i+0x1be>
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	6011      	str	r1, [r2, #0]
 800e330:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e334:	bf18      	it	ne
 800e336:	b21b      	sxthne	r3, r3
 800e338:	e7cf      	b.n	800e2da <_printf_i+0x52>
 800e33a:	6813      	ldr	r3, [r2, #0]
 800e33c:	6825      	ldr	r5, [r4, #0]
 800e33e:	1d18      	adds	r0, r3, #4
 800e340:	6010      	str	r0, [r2, #0]
 800e342:	0628      	lsls	r0, r5, #24
 800e344:	d501      	bpl.n	800e34a <_printf_i+0xc2>
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	e002      	b.n	800e350 <_printf_i+0xc8>
 800e34a:	0668      	lsls	r0, r5, #25
 800e34c:	d5fb      	bpl.n	800e346 <_printf_i+0xbe>
 800e34e:	881b      	ldrh	r3, [r3, #0]
 800e350:	4854      	ldr	r0, [pc, #336]	; (800e4a4 <_printf_i+0x21c>)
 800e352:	296f      	cmp	r1, #111	; 0x6f
 800e354:	bf14      	ite	ne
 800e356:	220a      	movne	r2, #10
 800e358:	2208      	moveq	r2, #8
 800e35a:	2100      	movs	r1, #0
 800e35c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e360:	6865      	ldr	r5, [r4, #4]
 800e362:	60a5      	str	r5, [r4, #8]
 800e364:	2d00      	cmp	r5, #0
 800e366:	f2c0 8095 	blt.w	800e494 <_printf_i+0x20c>
 800e36a:	6821      	ldr	r1, [r4, #0]
 800e36c:	f021 0104 	bic.w	r1, r1, #4
 800e370:	6021      	str	r1, [r4, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d13d      	bne.n	800e3f2 <_printf_i+0x16a>
 800e376:	2d00      	cmp	r5, #0
 800e378:	f040 808e 	bne.w	800e498 <_printf_i+0x210>
 800e37c:	4665      	mov	r5, ip
 800e37e:	2a08      	cmp	r2, #8
 800e380:	d10b      	bne.n	800e39a <_printf_i+0x112>
 800e382:	6823      	ldr	r3, [r4, #0]
 800e384:	07db      	lsls	r3, r3, #31
 800e386:	d508      	bpl.n	800e39a <_printf_i+0x112>
 800e388:	6923      	ldr	r3, [r4, #16]
 800e38a:	6862      	ldr	r2, [r4, #4]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	bfde      	ittt	le
 800e390:	2330      	movle	r3, #48	; 0x30
 800e392:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e396:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e39a:	ebac 0305 	sub.w	r3, ip, r5
 800e39e:	6123      	str	r3, [r4, #16]
 800e3a0:	f8cd 8000 	str.w	r8, [sp]
 800e3a4:	463b      	mov	r3, r7
 800e3a6:	aa03      	add	r2, sp, #12
 800e3a8:	4621      	mov	r1, r4
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	f7ff fef6 	bl	800e19c <_printf_common>
 800e3b0:	3001      	adds	r0, #1
 800e3b2:	d14d      	bne.n	800e450 <_printf_i+0x1c8>
 800e3b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e3b8:	b005      	add	sp, #20
 800e3ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3be:	4839      	ldr	r0, [pc, #228]	; (800e4a4 <_printf_i+0x21c>)
 800e3c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e3c4:	6813      	ldr	r3, [r2, #0]
 800e3c6:	6821      	ldr	r1, [r4, #0]
 800e3c8:	1d1d      	adds	r5, r3, #4
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	6015      	str	r5, [r2, #0]
 800e3ce:	060a      	lsls	r2, r1, #24
 800e3d0:	d50b      	bpl.n	800e3ea <_printf_i+0x162>
 800e3d2:	07ca      	lsls	r2, r1, #31
 800e3d4:	bf44      	itt	mi
 800e3d6:	f041 0120 	orrmi.w	r1, r1, #32
 800e3da:	6021      	strmi	r1, [r4, #0]
 800e3dc:	b91b      	cbnz	r3, 800e3e6 <_printf_i+0x15e>
 800e3de:	6822      	ldr	r2, [r4, #0]
 800e3e0:	f022 0220 	bic.w	r2, r2, #32
 800e3e4:	6022      	str	r2, [r4, #0]
 800e3e6:	2210      	movs	r2, #16
 800e3e8:	e7b7      	b.n	800e35a <_printf_i+0xd2>
 800e3ea:	064d      	lsls	r5, r1, #25
 800e3ec:	bf48      	it	mi
 800e3ee:	b29b      	uxthmi	r3, r3
 800e3f0:	e7ef      	b.n	800e3d2 <_printf_i+0x14a>
 800e3f2:	4665      	mov	r5, ip
 800e3f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e3f8:	fb02 3311 	mls	r3, r2, r1, r3
 800e3fc:	5cc3      	ldrb	r3, [r0, r3]
 800e3fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e402:	460b      	mov	r3, r1
 800e404:	2900      	cmp	r1, #0
 800e406:	d1f5      	bne.n	800e3f4 <_printf_i+0x16c>
 800e408:	e7b9      	b.n	800e37e <_printf_i+0xf6>
 800e40a:	6813      	ldr	r3, [r2, #0]
 800e40c:	6825      	ldr	r5, [r4, #0]
 800e40e:	6961      	ldr	r1, [r4, #20]
 800e410:	1d18      	adds	r0, r3, #4
 800e412:	6010      	str	r0, [r2, #0]
 800e414:	0628      	lsls	r0, r5, #24
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	d501      	bpl.n	800e41e <_printf_i+0x196>
 800e41a:	6019      	str	r1, [r3, #0]
 800e41c:	e002      	b.n	800e424 <_printf_i+0x19c>
 800e41e:	066a      	lsls	r2, r5, #25
 800e420:	d5fb      	bpl.n	800e41a <_printf_i+0x192>
 800e422:	8019      	strh	r1, [r3, #0]
 800e424:	2300      	movs	r3, #0
 800e426:	6123      	str	r3, [r4, #16]
 800e428:	4665      	mov	r5, ip
 800e42a:	e7b9      	b.n	800e3a0 <_printf_i+0x118>
 800e42c:	6813      	ldr	r3, [r2, #0]
 800e42e:	1d19      	adds	r1, r3, #4
 800e430:	6011      	str	r1, [r2, #0]
 800e432:	681d      	ldr	r5, [r3, #0]
 800e434:	6862      	ldr	r2, [r4, #4]
 800e436:	2100      	movs	r1, #0
 800e438:	4628      	mov	r0, r5
 800e43a:	f7f1 fed9 	bl	80001f0 <memchr>
 800e43e:	b108      	cbz	r0, 800e444 <_printf_i+0x1bc>
 800e440:	1b40      	subs	r0, r0, r5
 800e442:	6060      	str	r0, [r4, #4]
 800e444:	6863      	ldr	r3, [r4, #4]
 800e446:	6123      	str	r3, [r4, #16]
 800e448:	2300      	movs	r3, #0
 800e44a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e44e:	e7a7      	b.n	800e3a0 <_printf_i+0x118>
 800e450:	6923      	ldr	r3, [r4, #16]
 800e452:	462a      	mov	r2, r5
 800e454:	4639      	mov	r1, r7
 800e456:	4630      	mov	r0, r6
 800e458:	47c0      	blx	r8
 800e45a:	3001      	adds	r0, #1
 800e45c:	d0aa      	beq.n	800e3b4 <_printf_i+0x12c>
 800e45e:	6823      	ldr	r3, [r4, #0]
 800e460:	079b      	lsls	r3, r3, #30
 800e462:	d413      	bmi.n	800e48c <_printf_i+0x204>
 800e464:	68e0      	ldr	r0, [r4, #12]
 800e466:	9b03      	ldr	r3, [sp, #12]
 800e468:	4298      	cmp	r0, r3
 800e46a:	bfb8      	it	lt
 800e46c:	4618      	movlt	r0, r3
 800e46e:	e7a3      	b.n	800e3b8 <_printf_i+0x130>
 800e470:	2301      	movs	r3, #1
 800e472:	464a      	mov	r2, r9
 800e474:	4639      	mov	r1, r7
 800e476:	4630      	mov	r0, r6
 800e478:	47c0      	blx	r8
 800e47a:	3001      	adds	r0, #1
 800e47c:	d09a      	beq.n	800e3b4 <_printf_i+0x12c>
 800e47e:	3501      	adds	r5, #1
 800e480:	68e3      	ldr	r3, [r4, #12]
 800e482:	9a03      	ldr	r2, [sp, #12]
 800e484:	1a9b      	subs	r3, r3, r2
 800e486:	42ab      	cmp	r3, r5
 800e488:	dcf2      	bgt.n	800e470 <_printf_i+0x1e8>
 800e48a:	e7eb      	b.n	800e464 <_printf_i+0x1dc>
 800e48c:	2500      	movs	r5, #0
 800e48e:	f104 0919 	add.w	r9, r4, #25
 800e492:	e7f5      	b.n	800e480 <_printf_i+0x1f8>
 800e494:	2b00      	cmp	r3, #0
 800e496:	d1ac      	bne.n	800e3f2 <_printf_i+0x16a>
 800e498:	7803      	ldrb	r3, [r0, #0]
 800e49a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e49e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4a2:	e76c      	b.n	800e37e <_printf_i+0xf6>
 800e4a4:	0800f8e1 	.word	0x0800f8e1
 800e4a8:	0800f8f2 	.word	0x0800f8f2

0800e4ac <memmove>:
 800e4ac:	4288      	cmp	r0, r1
 800e4ae:	b510      	push	{r4, lr}
 800e4b0:	eb01 0302 	add.w	r3, r1, r2
 800e4b4:	d807      	bhi.n	800e4c6 <memmove+0x1a>
 800e4b6:	1e42      	subs	r2, r0, #1
 800e4b8:	4299      	cmp	r1, r3
 800e4ba:	d00a      	beq.n	800e4d2 <memmove+0x26>
 800e4bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e4c4:	e7f8      	b.n	800e4b8 <memmove+0xc>
 800e4c6:	4283      	cmp	r3, r0
 800e4c8:	d9f5      	bls.n	800e4b6 <memmove+0xa>
 800e4ca:	1881      	adds	r1, r0, r2
 800e4cc:	1ad2      	subs	r2, r2, r3
 800e4ce:	42d3      	cmn	r3, r2
 800e4d0:	d100      	bne.n	800e4d4 <memmove+0x28>
 800e4d2:	bd10      	pop	{r4, pc}
 800e4d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e4dc:	e7f7      	b.n	800e4ce <memmove+0x22>

0800e4de <_realloc_r>:
 800e4de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4e0:	4607      	mov	r7, r0
 800e4e2:	4614      	mov	r4, r2
 800e4e4:	460e      	mov	r6, r1
 800e4e6:	b921      	cbnz	r1, 800e4f2 <_realloc_r+0x14>
 800e4e8:	4611      	mov	r1, r2
 800e4ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e4ee:	f7ff bc3b 	b.w	800dd68 <_malloc_r>
 800e4f2:	b922      	cbnz	r2, 800e4fe <_realloc_r+0x20>
 800e4f4:	f7ff fbea 	bl	800dccc <_free_r>
 800e4f8:	4625      	mov	r5, r4
 800e4fa:	4628      	mov	r0, r5
 800e4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4fe:	f000 f814 	bl	800e52a <_malloc_usable_size_r>
 800e502:	42a0      	cmp	r0, r4
 800e504:	d20f      	bcs.n	800e526 <_realloc_r+0x48>
 800e506:	4621      	mov	r1, r4
 800e508:	4638      	mov	r0, r7
 800e50a:	f7ff fc2d 	bl	800dd68 <_malloc_r>
 800e50e:	4605      	mov	r5, r0
 800e510:	2800      	cmp	r0, #0
 800e512:	d0f2      	beq.n	800e4fa <_realloc_r+0x1c>
 800e514:	4631      	mov	r1, r6
 800e516:	4622      	mov	r2, r4
 800e518:	f7ff fbc4 	bl	800dca4 <memcpy>
 800e51c:	4631      	mov	r1, r6
 800e51e:	4638      	mov	r0, r7
 800e520:	f7ff fbd4 	bl	800dccc <_free_r>
 800e524:	e7e9      	b.n	800e4fa <_realloc_r+0x1c>
 800e526:	4635      	mov	r5, r6
 800e528:	e7e7      	b.n	800e4fa <_realloc_r+0x1c>

0800e52a <_malloc_usable_size_r>:
 800e52a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e52e:	1f18      	subs	r0, r3, #4
 800e530:	2b00      	cmp	r3, #0
 800e532:	bfbc      	itt	lt
 800e534:	580b      	ldrlt	r3, [r1, r0]
 800e536:	18c0      	addlt	r0, r0, r3
 800e538:	4770      	bx	lr
	...

0800e53c <_init>:
 800e53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e53e:	bf00      	nop
 800e540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e542:	bc08      	pop	{r3}
 800e544:	469e      	mov	lr, r3
 800e546:	4770      	bx	lr

0800e548 <_fini>:
 800e548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e54a:	bf00      	nop
 800e54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e54e:	bc08      	pop	{r3}
 800e550:	469e      	mov	lr, r3
 800e552:	4770      	bx	lr

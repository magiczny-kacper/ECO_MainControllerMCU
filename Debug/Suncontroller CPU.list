
Suncontroller CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a224  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800a3c4  0800a3c4  0001a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a83c  0800a83c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a83c  0800a83c  0001a83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a844  0800a844  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a844  0800a844  0001a844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a848  0800a848  0001a848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800a84c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003094  200000a4  0800a8f0  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003138  0800a8f0  00023138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a603  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006b43  00000000  00000000  0005a6d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00019637  00000000  00000000  0006121a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002230  00000000  00000000  0007a858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000022f8  00000000  00000000  0007ca88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00009eff  00000000  00000000  0007ed80  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00022de5  00000000  00000000  00088c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ab895  00000000  00000000  000aba64  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001572f9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066b4  00000000  00000000  00157374  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a3ac 	.word	0x0800a3ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	0800a3ac 	.word	0x0800a3ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b972 	b.w	8000df8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	4688      	mov	r8, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14b      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	d967      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0720 	rsb	r7, r2, #32
 8000b4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b52:	4095      	lsls	r5, r2
 8000b54:	ea47 0803 	orr.w	r8, r7, r3
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b64:	fa1f fc85 	uxth.w	ip, r5
 8000b68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b70:	fb07 f10c 	mul.w	r1, r7, ip
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18eb      	adds	r3, r5, r3
 8000b7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b7e:	f080 811b 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8118 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000b88:	3f02      	subs	r7, #2
 8000b8a:	442b      	add	r3, r5
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba0:	45a4      	cmp	ip, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	192c      	adds	r4, r5, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8107 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	f240 8104 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	442c      	add	r4, r5
 8000bb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bbc:	eba4 040c 	sub.w	r4, r4, ip
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	b11e      	cbz	r6, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xbe>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80eb 	beq.w	8000db2 <__udivmoddi4+0x286>
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e9c6 0100 	strd	r0, r1, [r6]
 8000be2:	4638      	mov	r0, r7
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f783 	clz	r7, r3
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d147      	bne.n	8000c82 <__udivmoddi4+0x156>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd0>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80fa 	bhi.w	8000df0 <__udivmoddi4+0x2c4>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xe8>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 808f 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1e:	1b49      	subs	r1, r1, r5
 8000c20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c24:	fa1f f885 	uxth.w	r8, r5
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	fb08 f10c 	mul.w	r1, r8, ip
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c40:	18eb      	adds	r3, r5, r3
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x14c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x14a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80b6 	bhi.w	8000de2 <__udivmoddi4+0x2b6>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e79f      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c82:	f1c7 0c20 	rsb	ip, r7, #32
 8000c86:	40bb      	lsls	r3, r7
 8000c88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c90:	fa01 f407 	lsl.w	r4, r1, r7
 8000c94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca0:	4325      	orrs	r5, r4
 8000ca2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ca6:	0c2c      	lsrs	r4, r5, #16
 8000ca8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cac:	fa1f fa8e 	uxth.w	sl, lr
 8000cb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	fa02 f207 	lsl.w	r2, r2, r7
 8000cbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	f080 8087 	bcs.w	8000dde <__udivmoddi4+0x2b2>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f240 8084 	bls.w	8000dde <__udivmoddi4+0x2b2>
 8000cd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cda:	4473      	add	r3, lr
 8000cdc:	1b1b      	subs	r3, r3, r4
 8000cde:	b2ad      	uxth	r5, r5
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	d26b      	bcs.n	8000dd6 <__udivmoddi4+0x2aa>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d969      	bls.n	8000dd6 <__udivmoddi4+0x2aa>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4474      	add	r4, lr
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c2      	mov	sl, r8
 8000d16:	464b      	mov	r3, r9
 8000d18:	d354      	bcc.n	8000dc4 <__udivmoddi4+0x298>
 8000d1a:	d051      	beq.n	8000dc0 <__udivmoddi4+0x294>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d069      	beq.n	8000df4 <__udivmoddi4+0x2c8>
 8000d20:	ebb1 050a 	subs.w	r5, r1, sl
 8000d24:	eb64 0403 	sbc.w	r4, r4, r3
 8000d28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d2c:	40fd      	lsrs	r5, r7
 8000d2e:	40fc      	lsrs	r4, r7
 8000d30:	ea4c 0505 	orr.w	r5, ip, r5
 8000d34:	e9c6 5400 	strd	r5, r4, [r6]
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e747      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f703 	lsr.w	r7, r0, r3
 8000d44:	4095      	lsls	r5, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d52:	4338      	orrs	r0, r7
 8000d54:	0c01      	lsrs	r1, r0, #16
 8000d56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5a:	fa1f f885 	uxth.w	r8, r5
 8000d5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d66:	fb07 f308 	mul.w	r3, r7, r8
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x256>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d78:	d22f      	bcs.n	8000dda <__udivmoddi4+0x2ae>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d92d      	bls.n	8000dda <__udivmoddi4+0x2ae>
 8000d7e:	3f02      	subs	r7, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	b281      	uxth	r1, r0
 8000d86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb00 f308 	mul.w	r3, r0, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x27e>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da0:	d217      	bcs.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d915      	bls.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xfe>
 8000db2:	4637      	mov	r7, r6
 8000db4:	4630      	mov	r0, r6
 8000db6:	e709      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db8:	4607      	mov	r7, r0
 8000dba:	e6e7      	b.n	8000b8c <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fb      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dc0:	4541      	cmp	r1, r8
 8000dc2:	d2ab      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dcc:	3801      	subs	r0, #1
 8000dce:	4613      	mov	r3, r2
 8000dd0:	e7a4      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd2:	4660      	mov	r0, ip
 8000dd4:	e7e9      	b.n	8000daa <__udivmoddi4+0x27e>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e795      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000dda:	4667      	mov	r7, ip
 8000ddc:	e7d1      	b.n	8000d82 <__udivmoddi4+0x256>
 8000dde:	4681      	mov	r9, r0
 8000de0:	e77c      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	442c      	add	r4, r5
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0x14c>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	442b      	add	r3, r5
 8000dee:	e72f      	b.n	8000c50 <__udivmoddi4+0x124>
 8000df0:	4638      	mov	r0, r7
 8000df2:	e708      	b.n	8000c06 <__udivmoddi4+0xda>
 8000df4:	4637      	mov	r7, r6
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0xa0>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <Config_CalculateCRC>:
		configuration.dummy = MAGIC_WORD;
		configuration.crc = Config_CalculateCRC();
	}
}

static uint32_t Config_CalculateCRC (void){
 8000dfc:	b508      	push	{r3, lr}
	return HAL_CRC_Calculate(&hcrc, (uint32_t*)&configuration, (CONFIG_BYTES_LEN - 2)/4);
 8000dfe:	220d      	movs	r2, #13
 8000e00:	4902      	ldr	r1, [pc, #8]	; (8000e0c <Config_CalculateCRC+0x10>)
 8000e02:	4803      	ldr	r0, [pc, #12]	; (8000e10 <Config_CalculateCRC+0x14>)
 8000e04:	f003 fbb9 	bl	800457a <HAL_CRC_Calculate>
}
 8000e08:	bd08      	pop	{r3, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200000c4 	.word	0x200000c4
 8000e10:	20002db4 	.word	0x20002db4

08000e14 <Config_CheckData>:

static CONFStatus_t Config_CheckData (void){
 8000e14:	b510      	push	{r4, lr}
	uint32_t readCRC, actualCRC;

	readCRC = configuration.crc;
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <Config_CheckData+0x28>)
 8000e18:	6b5c      	ldr	r4, [r3, #52]	; 0x34
	actualCRC = Config_CalculateCRC();
 8000e1a:	f7ff ffef 	bl	8000dfc <Config_CalculateCRC>

	if(readCRC != actualCRC){
 8000e1e:	4284      	cmp	r4, r0
 8000e20:	d007      	beq.n	8000e32 <Config_CheckData+0x1e>
		if(configuration.dummy != MAGIC_WORD){
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <Config_CheckData+0x28>)
 8000e24:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8000e26:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d003      	beq.n	8000e36 <Config_CheckData+0x22>
			return CONF_ERR_NOCONF;
 8000e2e:	2000      	movs	r0, #0
		}
		return CONF_ERR_CRC;
	}else{
		return CONF_OK;
	}
}
 8000e30:	bd10      	pop	{r4, pc}
		return CONF_OK;
 8000e32:	2000      	movs	r0, #0
 8000e34:	e7fc      	b.n	8000e30 <Config_CheckData+0x1c>
		return CONF_ERR_CRC;
 8000e36:	2001      	movs	r0, #1
 8000e38:	e7fa      	b.n	8000e30 <Config_CheckData+0x1c>
 8000e3a:	bf00      	nop
 8000e3c:	200000c4 	.word	0x200000c4

08000e40 <Config_Init>:
CONFStatus_t Config_Init(I2C_HandleTypeDef* iic){
 8000e40:	b510      	push	{r4, lr}
	configuartionStatus = CONF_STAT_INIT;
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <Config_Init+0x38>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	701a      	strb	r2, [r3, #0]
	retval |= EE_Init(iic);
 8000e48:	f000 f858 	bl	8000efc <EE_Init>
 8000e4c:	4604      	mov	r4, r0
	retval |= EE_Read(&configuration, 0, CONFIG_BYTES_LEN);
 8000e4e:	2238      	movs	r2, #56	; 0x38
 8000e50:	2100      	movs	r1, #0
 8000e52:	480a      	ldr	r0, [pc, #40]	; (8000e7c <Config_Init+0x3c>)
 8000e54:	f000 f85c 	bl	8000f10 <EE_Read>
 8000e58:	4304      	orrs	r4, r0
 8000e5a:	b2e4      	uxtb	r4, r4
	retval |= Config_CheckData();
 8000e5c:	f7ff ffda 	bl	8000e14 <Config_CheckData>
 8000e60:	4320      	orrs	r0, r4
	if(retval == CONF_OK) configuartionStatus = CONF_STAT_LOADED;
 8000e62:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8000e66:	d003      	beq.n	8000e70 <Config_Init+0x30>
	else configuartionStatus = CONF_STAT_ERROR;
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <Config_Init+0x38>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
}
 8000e6e:	bd10      	pop	{r4, pc}
	if(retval == CONF_OK) configuartionStatus = CONF_STAT_LOADED;
 8000e70:	4b01      	ldr	r3, [pc, #4]	; (8000e78 <Config_Init+0x38>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	e7fa      	b.n	8000e6e <Config_Init+0x2e>
 8000e78:	200000c0 	.word	0x200000c0
 8000e7c:	200000c4 	.word	0x200000c4

08000e80 <Config_GetConfig>:
ConfigLoadStatus_t Config_GetConfigStatus(void){
	return configuartionStatus;
}

CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8000e80:	b1b0      	cbz	r0, 8000eb0 <Config_GetConfig+0x30>
CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
 8000e82:	b4f0      	push	{r4, r5, r6, r7}
 8000e84:	4604      	mov	r4, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <Config_GetConfig+0x3c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b99b      	cbnz	r3, 8000eb4 <Config_GetConfig+0x34>
		memcpy(config, &configuration, CONFIG_BYTES_LEN);
 8000e8c:	4d0c      	ldr	r5, [pc, #48]	; (8000ec0 <Config_GetConfig+0x40>)
 8000e8e:	f105 0730 	add.w	r7, r5, #48	; 0x30
 8000e92:	462e      	mov	r6, r5
 8000e94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e96:	6020      	str	r0, [r4, #0]
 8000e98:	6061      	str	r1, [r4, #4]
 8000e9a:	60a2      	str	r2, [r4, #8]
 8000e9c:	60e3      	str	r3, [r4, #12]
 8000e9e:	4635      	mov	r5, r6
 8000ea0:	3410      	adds	r4, #16
 8000ea2:	42be      	cmp	r6, r7
 8000ea4:	d1f5      	bne.n	8000e92 <Config_GetConfig+0x12>
 8000ea6:	cd03      	ldmia	r5!, {r0, r1}
 8000ea8:	6020      	str	r0, [r4, #0]
 8000eaa:	6061      	str	r1, [r4, #4]
		return CONF_OK;
 8000eac:	2000      	movs	r0, #0
 8000eae:	e002      	b.n	8000eb6 <Config_GetConfig+0x36>
	if(config == NULL) return CONF_ERR_NULL;
 8000eb0:	2003      	movs	r0, #3
	}
	return CONF_ERR_NOCONF;
}
 8000eb2:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 8000eb4:	2000      	movs	r0, #0
}
 8000eb6:	bcf0      	pop	{r4, r5, r6, r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200000c0 	.word	0x200000c0
 8000ec0:	200000c4 	.word	0x200000c4

08000ec4 <Config_GetRegConfig>:
	}
	return CONF_ERR_NOCONF;
}

CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8000ec4:	b190      	cbz	r0, 8000eec <Config_GetRegConfig+0x28>
CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
 8000ec6:	b430      	push	{r4, r5}
 8000ec8:	4605      	mov	r5, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <Config_GetRegConfig+0x30>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b97b      	cbnz	r3, 8000ef0 <Config_GetRegConfig+0x2c>
		memcpy(config, &configuration.RegulationConfig, REG_CONFIG_BYTES_LEN);
 8000ed0:	4c09      	ldr	r4, [pc, #36]	; (8000ef8 <Config_GetRegConfig+0x34>)
 8000ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed4:	6028      	str	r0, [r5, #0]
 8000ed6:	6069      	str	r1, [r5, #4]
 8000ed8:	60aa      	str	r2, [r5, #8]
 8000eda:	60eb      	str	r3, [r5, #12]
 8000edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ede:	6128      	str	r0, [r5, #16]
 8000ee0:	6169      	str	r1, [r5, #20]
 8000ee2:	61aa      	str	r2, [r5, #24]
 8000ee4:	61eb      	str	r3, [r5, #28]
		return CONF_OK;
 8000ee6:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 8000ee8:	bc30      	pop	{r4, r5}
 8000eea:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 8000eec:	2003      	movs	r0, #3
}
 8000eee:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	e7f9      	b.n	8000ee8 <Config_GetRegConfig+0x24>
 8000ef4:	200000c0 	.word	0x200000c0
 8000ef8:	200000c4 	.word	0x200000c4

08000efc <EE_Init>:
#include "stm32f4xx_hal_i2c.h"

I2C_HandleTypeDef* ee_iic;

EE_StatusTypeDef EE_Init (I2C_HandleTypeDef* hi2c){
	if(hi2c != NULL){
 8000efc:	b118      	cbz	r0, 8000f06 <EE_Init+0xa>
		ee_iic = hi2c;
 8000efe:	4a03      	ldr	r2, [pc, #12]	; (8000f0c <EE_Init+0x10>)
 8000f00:	6010      	str	r0, [r2, #0]
		return EE_OK;
 8000f02:	2000      	movs	r0, #0
 8000f04:	4770      	bx	lr
	}
	return EE_ERR_NULL;
 8000f06:	2001      	movs	r0, #1
}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20002a60 	.word	0x20002a60

08000f10 <EE_Read>:

EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;

	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8000f10:	b1d8      	cbz	r0, 8000f4a <EE_Read+0x3a>
EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
 8000f12:	b510      	push	{r4, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	4604      	mov	r4, r0
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8000f18:	b912      	cbnz	r2, 8000f20 <EE_Read+0x10>
 8000f1a:	2001      	movs	r0, #1
	}else if(i2cStatus == HAL_ERROR){
		return EE_ERR_TIMEOUT;
	}else if(i2cStatus == HAL_BUSY){
		return EE_ERR_BUSY;
	}
}
 8000f1c:	b004      	add	sp, #16
 8000f1e:	bd10      	pop	{r4, pc}
 8000f20:	4613      	mov	r3, r2
 8000f22:	460a      	mov	r2, r1
	i2cStatus= HAL_I2C_Mem_Read(ee_iic, EE_ADDR, addr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <EE_Read+0x48>)
 8000f26:	6808      	ldr	r0, [r1, #0]
 8000f28:	b299      	uxth	r1, r3
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	9101      	str	r1, [sp, #4]
 8000f32:	9400      	str	r4, [sp, #0]
 8000f34:	2301      	movs	r3, #1
 8000f36:	21a0      	movs	r1, #160	; 0xa0
 8000f38:	f004 fa5c 	bl	80053f4 <HAL_I2C_Mem_Read>
	if(i2cStatus == HAL_OK){
 8000f3c:	b138      	cbz	r0, 8000f4e <EE_Read+0x3e>
	}else if(i2cStatus == HAL_ERROR){
 8000f3e:	2801      	cmp	r0, #1
 8000f40:	d007      	beq.n	8000f52 <EE_Read+0x42>
	}else if(i2cStatus == HAL_BUSY){
 8000f42:	2802      	cmp	r0, #2
 8000f44:	d1ea      	bne.n	8000f1c <EE_Read+0xc>
		return EE_ERR_BUSY;
 8000f46:	2000      	movs	r0, #0
 8000f48:	e7e8      	b.n	8000f1c <EE_Read+0xc>
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8000f4a:	2001      	movs	r0, #1
}
 8000f4c:	4770      	bx	lr
		return EE_OK;
 8000f4e:	2000      	movs	r0, #0
 8000f50:	e7e4      	b.n	8000f1c <EE_Read+0xc>
		return EE_ERR_TIMEOUT;
 8000f52:	2002      	movs	r0, #2
 8000f54:	e7e2      	b.n	8000f1c <EE_Read+0xc>
 8000f56:	bf00      	nop
 8000f58:	20002a60 	.word	0x20002a60

08000f5c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000f5c:	b530      	push	{r4, r5, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	4605      	mov	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000f62:	4c16      	ldr	r4, [pc, #88]	; (8000fbc <WIZCHIP_READ+0x60>)
 8000f64:	68e3      	ldr	r3, [r4, #12]
 8000f66:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000f68:	6963      	ldr	r3, [r4, #20]
 8000f6a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f6e:	b9b3      	cbnz	r3, 8000f9e <WIZCHIP_READ+0x42>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000f70:	4c12      	ldr	r4, [pc, #72]	; (8000fbc <WIZCHIP_READ+0x60>)
 8000f72:	6a23      	ldr	r3, [r4, #32]
 8000f74:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8000f78:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000f7a:	6a23      	ldr	r3, [r4, #32]
 8000f7c:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8000f80:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000f82:	6a23      	ldr	r3, [r4, #32]
 8000f84:	b2e8      	uxtb	r0, r5
 8000f86:	4798      	blx	r3
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000f88:	4c0c      	ldr	r4, [pc, #48]	; (8000fbc <WIZCHIP_READ+0x60>)
 8000f8a:	69e3      	ldr	r3, [r4, #28]
 8000f8c:	4798      	blx	r3
 8000f8e:	4605      	mov	r5, r0

   WIZCHIP.CS._deselect();
 8000f90:	69a3      	ldr	r3, [r4, #24]
 8000f92:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000f94:	6923      	ldr	r3, [r4, #16]
 8000f96:	4798      	blx	r3
   return ret;
}
 8000f98:	4628      	mov	r0, r5
 8000f9a:	b003      	add	sp, #12
 8000f9c:	bd30      	pop	{r4, r5, pc}
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000f9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0e5      	beq.n	8000f70 <WIZCHIP_READ+0x14>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000fa4:	0c2a      	lsrs	r2, r5, #16
 8000fa6:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000faa:	0a2a      	lsrs	r2, r5, #8
 8000fac:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000fb0:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	a801      	add	r0, sp, #4
 8000fb8:	4798      	blx	r3
 8000fba:	e7e5      	b.n	8000f88 <WIZCHIP_READ+0x2c>
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	460e      	mov	r6, r1
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000fc8:	4d16      	ldr	r5, [pc, #88]	; (8001024 <WIZCHIP_WRITE+0x64>)
 8000fca:	68eb      	ldr	r3, [r5, #12]
 8000fcc:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000fce:	696b      	ldr	r3, [r5, #20]
 8000fd0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000fd2:	f044 0404 	orr.w	r4, r4, #4

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000fd6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000fd8:	b1a3      	cbz	r3, 8001004 <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000fda:	0c22      	lsrs	r2, r4, #16
 8000fdc:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000fe0:	0a22      	lsrs	r2, r4, #8
 8000fe2:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000fe6:	f88d 4006 	strb.w	r4, [sp, #6]
		spi_data[3] = wb;
 8000fea:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000fee:	2104      	movs	r1, #4
 8000ff0:	eb0d 0001 	add.w	r0, sp, r1
 8000ff4:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000ff6:	4c0b      	ldr	r4, [pc, #44]	; (8001024 <WIZCHIP_WRITE+0x64>)
 8000ff8:	69a3      	ldr	r3, [r4, #24]
 8000ffa:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000ffc:	6923      	ldr	r3, [r4, #16]
 8000ffe:	4798      	blx	r3
}
 8001000:	b002      	add	sp, #8
 8001002:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001004:	6a2b      	ldr	r3, [r5, #32]
 8001006:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800100a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800100c:	6a2b      	ldr	r3, [r5, #32]
 800100e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001012:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001014:	6a2b      	ldr	r3, [r5, #32]
 8001016:	b2e0      	uxtb	r0, r4
 8001018:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800101a:	6a2b      	ldr	r3, [r5, #32]
 800101c:	4630      	mov	r0, r6
 800101e:	4798      	blx	r3
 8001020:	e7e9      	b.n	8000ff6 <WIZCHIP_WRITE+0x36>
 8001022:	bf00      	nop
 8001024:	20000004 	.word	0x20000004

08001028 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	4604      	mov	r4, r0
 800102e:	460e      	mov	r6, r1
 8001030:	4615      	mov	r5, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001032:	4f1c      	ldr	r7, [pc, #112]	; (80010a4 <WIZCHIP_READ_BUF+0x7c>)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	b96b      	cbnz	r3, 800105c <WIZCHIP_READ_BUF+0x34>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001040:	4f18      	ldr	r7, [pc, #96]	; (80010a4 <WIZCHIP_READ_BUF+0x7c>)
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001048:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001050:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	b2e0      	uxtb	r0, r4
 8001056:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001058:	2400      	movs	r4, #0
 800105a:	e019      	b.n	8001090 <WIZCHIP_READ_BUF+0x68>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0ee      	beq.n	8001040 <WIZCHIP_READ_BUF+0x18>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001062:	0c22      	lsrs	r2, r4, #16
 8001064:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001068:	0a22      	lsrs	r2, r4, #8
 800106a:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800106e:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001072:	2103      	movs	r1, #3
 8001074:	a801      	add	r0, sp, #4
 8001076:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <WIZCHIP_READ_BUF+0x7c>)
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	4629      	mov	r1, r5
 800107e:	4630      	mov	r0, r6
 8001080:	4798      	blx	r3
 8001082:	e007      	b.n	8001094 <WIZCHIP_READ_BUF+0x6c>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <WIZCHIP_READ_BUF+0x7c>)
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	4798      	blx	r3
 800108a:	5530      	strb	r0, [r6, r4]
		for(i = 0; i < len; i++)
 800108c:	3401      	adds	r4, #1
 800108e:	b2a4      	uxth	r4, r4
 8001090:	42ac      	cmp	r4, r5
 8001092:	d3f7      	bcc.n	8001084 <WIZCHIP_READ_BUF+0x5c>
   }

   WIZCHIP.CS._deselect();
 8001094:	4c03      	ldr	r4, [pc, #12]	; (80010a4 <WIZCHIP_READ_BUF+0x7c>)
 8001096:	69a3      	ldr	r3, [r4, #24]
 8001098:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800109a:	6923      	ldr	r3, [r4, #16]
 800109c:	4798      	blx	r3
}
 800109e:	b003      	add	sp, #12
 80010a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000004 	.word	0x20000004

080010a8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	b083      	sub	sp, #12
 80010ac:	4604      	mov	r4, r0
 80010ae:	460f      	mov	r7, r1
 80010b0:	4616      	mov	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80010b2:	4d1b      	ldr	r5, [pc, #108]	; (8001120 <WIZCHIP_WRITE_BUF+0x78>)
 80010b4:	68eb      	ldr	r3, [r5, #12]
 80010b6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80010b8:	696b      	ldr	r3, [r5, #20]
 80010ba:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80010bc:	f044 0404 	orr.w	r4, r4, #4

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80010c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80010c2:	b1b3      	cbz	r3, 80010f2 <WIZCHIP_WRITE_BUF+0x4a>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80010c4:	0c22      	lsrs	r2, r4, #16
 80010c6:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80010ca:	0a22      	lsrs	r2, r4, #8
 80010cc:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80010d0:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80010d4:	2103      	movs	r1, #3
 80010d6:	a801      	add	r0, sp, #4
 80010d8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <WIZCHIP_WRITE_BUF+0x78>)
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	4631      	mov	r1, r6
 80010e0:	4638      	mov	r0, r7
 80010e2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80010e4:	4c0e      	ldr	r4, [pc, #56]	; (8001120 <WIZCHIP_WRITE_BUF+0x78>)
 80010e6:	69a3      	ldr	r3, [r4, #24]
 80010e8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80010ea:	6923      	ldr	r3, [r4, #16]
 80010ec:	4798      	blx	r3
}
 80010ee:	b003      	add	sp, #12
 80010f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80010f2:	6a2b      	ldr	r3, [r5, #32]
 80010f4:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80010f8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80010fa:	6a2b      	ldr	r3, [r5, #32]
 80010fc:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001100:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001102:	6a2b      	ldr	r3, [r5, #32]
 8001104:	b2e0      	uxtb	r0, r4
 8001106:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001108:	2400      	movs	r4, #0
 800110a:	e005      	b.n	8001118 <WIZCHIP_WRITE_BUF+0x70>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <WIZCHIP_WRITE_BUF+0x78>)
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	5d38      	ldrb	r0, [r7, r4]
 8001112:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001114:	3401      	adds	r4, #1
 8001116:	b2a4      	uxth	r4, r4
 8001118:	42b4      	cmp	r4, r6
 800111a:	d3f7      	bcc.n	800110c <WIZCHIP_WRITE_BUF+0x64>
 800111c:	e7e2      	b.n	80010e4 <WIZCHIP_WRITE_BUF+0x3c>
 800111e:	bf00      	nop
 8001120:	20000004 	.word	0x20000004

08001124 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001128:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 800112a:	2500      	movs	r5, #0
 800112c:	e001      	b.n	8001132 <getSn_TX_FSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
 800112e:	42a5      	cmp	r5, r4
 8001130:	d024      	beq.n	800117c <getSn_TX_FSR+0x58>
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001132:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8001136:	f108 0801 	add.w	r8, r8, #1
 800113a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800113e:	f508 5600 	add.w	r6, r8, #8192	; 0x2000
 8001142:	4630      	mov	r0, r6
 8001144:	f7ff ff0a 	bl	8000f5c <WIZCHIP_READ>
 8001148:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800114a:	0224      	lsls	r4, r4, #8
 800114c:	b2a4      	uxth	r4, r4
 800114e:	f508 5804 	add.w	r8, r8, #8448	; 0x2100
 8001152:	4640      	mov	r0, r8
 8001154:	f7ff ff02 	bl	8000f5c <WIZCHIP_READ>
 8001158:	fa14 f480 	uxtah	r4, r4, r0
 800115c:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 800115e:	2c00      	cmp	r4, #0
 8001160:	d0e5      	beq.n	800112e <getSn_TX_FSR+0xa>
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001162:	4630      	mov	r0, r6
 8001164:	f7ff fefa 	bl	8000f5c <WIZCHIP_READ>
 8001168:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800116a:	022d      	lsls	r5, r5, #8
 800116c:	b2ad      	uxth	r5, r5
 800116e:	4640      	mov	r0, r8
 8001170:	f7ff fef4 	bl	8000f5c <WIZCHIP_READ>
 8001174:	fa15 f580 	uxtah	r5, r5, r0
 8001178:	b2ad      	uxth	r5, r5
 800117a:	e7d8      	b.n	800112e <getSn_TX_FSR+0xa>
   return val;
}
 800117c:	4628      	mov	r0, r5
 800117e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001182 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001186:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 8001188:	2500      	movs	r5, #0
 800118a:	e001      	b.n	8001190 <getSn_RX_RSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
 800118c:	42a5      	cmp	r5, r4
 800118e:	d024      	beq.n	80011da <getSn_RX_RSR+0x58>
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001190:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8001194:	f108 0801 	add.w	r8, r8, #1
 8001198:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800119c:	f508 5618 	add.w	r6, r8, #9728	; 0x2600
 80011a0:	4630      	mov	r0, r6
 80011a2:	f7ff fedb 	bl	8000f5c <WIZCHIP_READ>
 80011a6:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80011a8:	0224      	lsls	r4, r4, #8
 80011aa:	b2a4      	uxth	r4, r4
 80011ac:	f508 581c 	add.w	r8, r8, #9984	; 0x2700
 80011b0:	4640      	mov	r0, r8
 80011b2:	f7ff fed3 	bl	8000f5c <WIZCHIP_READ>
 80011b6:	fa14 f480 	uxtah	r4, r4, r0
 80011ba:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 80011bc:	2c00      	cmp	r4, #0
 80011be:	d0e5      	beq.n	800118c <getSn_RX_RSR+0xa>
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80011c0:	4630      	mov	r0, r6
 80011c2:	f7ff fecb 	bl	8000f5c <WIZCHIP_READ>
 80011c6:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80011c8:	022d      	lsls	r5, r5, #8
 80011ca:	b2ad      	uxth	r5, r5
 80011cc:	4640      	mov	r0, r8
 80011ce:	f7ff fec5 	bl	8000f5c <WIZCHIP_READ>
 80011d2:	fa15 f580 	uxtah	r5, r5, r0
 80011d6:	b2ad      	uxth	r5, r5
 80011d8:	e7d8      	b.n	800118c <getSn_RX_RSR+0xa>
   return val;
}
 80011da:	4628      	mov	r0, r5
 80011dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080011e0 <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 80011e0:	2808      	cmp	r0, #8
 80011e2:	d82e      	bhi.n	8001242 <close+0x62>
{
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	4606      	mov	r6, r0
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80011e8:	0084      	lsls	r4, r0, #2
 80011ea:	3401      	adds	r4, #1
 80011ec:	00e4      	lsls	r4, r4, #3
 80011ee:	f504 7580 	add.w	r5, r4, #256	; 0x100
 80011f2:	2110      	movs	r1, #16
 80011f4:	4628      	mov	r0, r5
 80011f6:	f7ff fee3 	bl	8000fc0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80011fa:	4628      	mov	r0, r5
 80011fc:	f7ff feae 	bl	8000f5c <WIZCHIP_READ>
 8001200:	2800      	cmp	r0, #0
 8001202:	d1fa      	bne.n	80011fa <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001204:	211f      	movs	r1, #31
 8001206:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800120a:	f7ff fed9 	bl	8000fc0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800120e:	2301      	movs	r3, #1
 8001210:	40b3      	lsls	r3, r6
 8001212:	43db      	mvns	r3, r3
 8001214:	b21b      	sxth	r3, r3
 8001216:	490c      	ldr	r1, [pc, #48]	; (8001248 <close+0x68>)
 8001218:	880a      	ldrh	r2, [r1, #0]
 800121a:	401a      	ands	r2, r3
 800121c:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <close+0x6c>)
 8001220:	8811      	ldrh	r1, [r2, #0]
 8001222:	400b      	ands	r3, r1
 8001224:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	4a09      	ldr	r2, [pc, #36]	; (8001250 <close+0x70>)
 800122a:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
	sock_pack_info[sn] = 0;
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <close+0x74>)
 8001230:	5593      	strb	r3, [r2, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001232:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8001236:	f7ff fe91 	bl	8000f5c <WIZCHIP_READ>
 800123a:	2800      	cmp	r0, #0
 800123c:	d1f9      	bne.n	8001232 <close+0x52>
	return SOCK_OK;
 800123e:	2001      	movs	r0, #1
}
 8001240:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 8001242:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001246:	4770      	bx	lr
 8001248:	200000fc 	.word	0x200000fc
 800124c:	200000fe 	.word	0x200000fe
 8001250:	20000108 	.word	0x20000108
 8001254:	20000100 	.word	0x20000100

08001258 <socket>:
	CHECK_SOCKNUM();
 8001258:	2808      	cmp	r0, #8
 800125a:	f200 8093 	bhi.w	8001384 <socket+0x12c>
{
 800125e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	4605      	mov	r5, r0
 8001266:	460f      	mov	r7, r1
 8001268:	4690      	mov	r8, r2
 800126a:	461e      	mov	r6, r3
	switch(protocol)
 800126c:	2901      	cmp	r1, #1
 800126e:	d062      	beq.n	8001336 <socket+0xde>
 8001270:	2900      	cmp	r1, #0
 8001272:	f000 808a 	beq.w	800138a <socket+0x132>
 8001276:	2904      	cmp	r1, #4
 8001278:	f200 8087 	bhi.w	800138a <socket+0x132>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800127c:	f016 0f04 	tst.w	r6, #4
 8001280:	f040 8086 	bne.w	8001390 <socket+0x138>
	if(flag != 0)
 8001284:	b11e      	cbz	r6, 800128e <socket+0x36>
   	switch(protocol)
 8001286:	2f01      	cmp	r7, #1
 8001288:	d062      	beq.n	8001350 <socket+0xf8>
 800128a:	2f02      	cmp	r7, #2
 800128c:	d066      	beq.n	800135c <socket+0x104>
	close(sn);
 800128e:	4628      	mov	r0, r5
 8001290:	f7ff ffa6 	bl	80011e0 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001294:	00ac      	lsls	r4, r5, #2
 8001296:	3401      	adds	r4, #1
 8001298:	00e4      	lsls	r4, r4, #3
 800129a:	f026 010f 	bic.w	r1, r6, #15
 800129e:	b249      	sxtb	r1, r1
 80012a0:	4339      	orrs	r1, r7
 80012a2:	b2c9      	uxtb	r1, r1
 80012a4:	4620      	mov	r0, r4
 80012a6:	f7ff fe8b 	bl	8000fc0 <WIZCHIP_WRITE>
	if(!port)
 80012aa:	f1b8 0f00 	cmp.w	r8, #0
 80012ae:	d10a      	bne.n	80012c6 <socket+0x6e>
	   port = sock_any_port++;
 80012b0:	4a3a      	ldr	r2, [pc, #232]	; (800139c <socket+0x144>)
 80012b2:	f8b2 8000 	ldrh.w	r8, [r2]
 80012b6:	f108 0301 	add.w	r3, r8, #1
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80012be:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d059      	beq.n	800137a <socket+0x122>
   setSn_PORT(sn,port);	
 80012c6:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80012ca:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 80012ce:	f7ff fe77 	bl	8000fc0 <WIZCHIP_WRITE>
 80012d2:	fa5f f188 	uxtb.w	r1, r8
 80012d6:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 80012da:	f7ff fe71 	bl	8000fc0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80012de:	f504 7780 	add.w	r7, r4, #256	; 0x100
 80012e2:	2101      	movs	r1, #1
 80012e4:	4638      	mov	r0, r7
 80012e6:	f7ff fe6b 	bl	8000fc0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80012ea:	4638      	mov	r0, r7
 80012ec:	f7ff fe36 	bl	8000f5c <WIZCHIP_READ>
 80012f0:	2800      	cmp	r0, #0
 80012f2:	d1fa      	bne.n	80012ea <socket+0x92>
   sock_io_mode &= ~(1 <<sn);
 80012f4:	2201      	movs	r2, #1
 80012f6:	40aa      	lsls	r2, r5
 80012f8:	43d2      	mvns	r2, r2
 80012fa:	b212      	sxth	r2, r2
 80012fc:	4928      	ldr	r1, [pc, #160]	; (80013a0 <socket+0x148>)
 80012fe:	880b      	ldrh	r3, [r1, #0]
 8001300:	4013      	ands	r3, r2
 8001302:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001304:	f006 0601 	and.w	r6, r6, #1
 8001308:	40ae      	lsls	r6, r5
 800130a:	431e      	orrs	r6, r3
 800130c:	800e      	strh	r6, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 800130e:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <socket+0x14c>)
 8001310:	8819      	ldrh	r1, [r3, #0]
 8001312:	400a      	ands	r2, r1
 8001314:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	4a23      	ldr	r2, [pc, #140]	; (80013a8 <socket+0x150>)
 800131a:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 800131e:	4a23      	ldr	r2, [pc, #140]	; (80013ac <socket+0x154>)
 8001320:	5553      	strb	r3, [r2, r5]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001322:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8001326:	f7ff fe19 	bl	8000f5c <WIZCHIP_READ>
 800132a:	2800      	cmp	r0, #0
 800132c:	d0f9      	beq.n	8001322 <socket+0xca>
   return (int8_t)sn;
 800132e:	b268      	sxtb	r0, r5
}	   
 8001330:	b002      	add	sp, #8
 8001332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            getSIPR((uint8_t*)&taddr);
 8001336:	2204      	movs	r2, #4
 8001338:	eb0d 0102 	add.w	r1, sp, r2
 800133c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001340:	f7ff fe72 	bl	8001028 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001344:	9b01      	ldr	r3, [sp, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d198      	bne.n	800127c <socket+0x24>
 800134a:	f06f 0002 	mvn.w	r0, #2
 800134e:	e7ef      	b.n	8001330 <socket+0xd8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001350:	f016 0f21 	tst.w	r6, #33	; 0x21
 8001354:	d19b      	bne.n	800128e <socket+0x36>
 8001356:	f06f 0005 	mvn.w	r0, #5
 800135a:	e7e9      	b.n	8001330 <socket+0xd8>
   	      if(flag & SF_IGMP_VER2)
 800135c:	f016 0f20 	tst.w	r6, #32
 8001360:	d002      	beq.n	8001368 <socket+0x110>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001362:	f016 0f80 	tst.w	r6, #128	; 0x80
 8001366:	d016      	beq.n	8001396 <socket+0x13e>
      	      if(flag & SF_UNI_BLOCK)
 8001368:	f016 0f10 	tst.w	r6, #16
 800136c:	d08f      	beq.n	800128e <socket+0x36>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800136e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8001372:	d18c      	bne.n	800128e <socket+0x36>
 8001374:	f06f 0005 	mvn.w	r0, #5
 8001378:	e7da      	b.n	8001330 <socket+0xd8>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <socket+0x144>)
 800137c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001380:	801a      	strh	r2, [r3, #0]
 8001382:	e7a0      	b.n	80012c6 <socket+0x6e>
	CHECK_SOCKNUM();
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
}	   
 8001388:	4770      	bx	lr
         return SOCKERR_SOCKMODE;
 800138a:	f06f 0004 	mvn.w	r0, #4
 800138e:	e7cf      	b.n	8001330 <socket+0xd8>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001390:	f06f 0005 	mvn.w	r0, #5
 8001394:	e7cc      	b.n	8001330 <socket+0xd8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001396:	f06f 0005 	mvn.w	r0, #5
 800139a:	e7c9      	b.n	8001330 <socket+0xd8>
 800139c:	20000000 	.word	0x20000000
 80013a0:	200000fc 	.word	0x200000fc
 80013a4:	200000fe 	.word	0x200000fe
 80013a8:	20000108 	.word	0x20000108
 80013ac:	20000100 	.word	0x20000100

080013b0 <listen>:

int8_t listen(uint8_t sn)
{
	CHECK_SOCKNUM();
 80013b0:	2808      	cmp	r0, #8
 80013b2:	d82a      	bhi.n	800140a <listen+0x5a>
{
 80013b4:	b570      	push	{r4, r5, r6, lr}
 80013b6:	4605      	mov	r5, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 80013b8:	0084      	lsls	r4, r0, #2
 80013ba:	3401      	adds	r4, #1
 80013bc:	00e4      	lsls	r4, r4, #3
 80013be:	4620      	mov	r0, r4
 80013c0:	f7ff fdcc 	bl	8000f5c <WIZCHIP_READ>
 80013c4:	f000 000f 	and.w	r0, r0, #15
 80013c8:	2801      	cmp	r0, #1
 80013ca:	d121      	bne.n	8001410 <listen+0x60>
	CHECK_SOCKINIT();
 80013cc:	f504 7640 	add.w	r6, r4, #768	; 0x300
 80013d0:	4630      	mov	r0, r6
 80013d2:	f7ff fdc3 	bl	8000f5c <WIZCHIP_READ>
 80013d6:	2813      	cmp	r0, #19
 80013d8:	d11d      	bne.n	8001416 <listen+0x66>
	setSn_CR(sn,Sn_CR_LISTEN);
 80013da:	f504 7480 	add.w	r4, r4, #256	; 0x100
 80013de:	2102      	movs	r1, #2
 80013e0:	4620      	mov	r0, r4
 80013e2:	f7ff fded 	bl	8000fc0 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff fdb8 	bl	8000f5c <WIZCHIP_READ>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d1fa      	bne.n	80013e6 <listen+0x36>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80013f0:	4630      	mov	r0, r6
 80013f2:	f7ff fdb3 	bl	8000f5c <WIZCHIP_READ>
 80013f6:	2814      	cmp	r0, #20
 80013f8:	d101      	bne.n	80013fe <listen+0x4e>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 80013fa:	2001      	movs	r0, #1
}
 80013fc:	bd70      	pop	{r4, r5, r6, pc}
         close(sn);
 80013fe:	4628      	mov	r0, r5
 8001400:	f7ff feee 	bl	80011e0 <close>
         return SOCKERR_SOCKCLOSED;
 8001404:	f06f 0003 	mvn.w	r0, #3
 8001408:	e7f8      	b.n	80013fc <listen+0x4c>
	CHECK_SOCKNUM();
 800140a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800140e:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001410:	f06f 0004 	mvn.w	r0, #4
 8001414:	e7f2      	b.n	80013fc <listen+0x4c>
	CHECK_SOCKINIT();
 8001416:	f06f 0002 	mvn.w	r0, #2
 800141a:	e7ef      	b.n	80013fc <listen+0x4c>

0800141c <getsockopt>:
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
   CHECK_SOCKNUM();
 800141c:	2808      	cmp	r0, #8
 800141e:	f200 80a3 	bhi.w	8001568 <getsockopt+0x14c>
{
 8001422:	b570      	push	{r4, r5, r6, lr}
 8001424:	4615      	mov	r5, r2
 8001426:	4604      	mov	r4, r0
   switch(sotype)
 8001428:	290c      	cmp	r1, #12
 800142a:	f200 80a0 	bhi.w	800156e <getsockopt+0x152>
 800142e:	e8df f001 	tbb	[pc, r1]
 8001432:	1107      	.short	0x1107
 8001434:	4338251b 	.word	0x4338251b
 8001438:	6c67569e 	.word	0x6c67569e
 800143c:	7b71      	.short	0x7b71
 800143e:	8f          	.byte	0x8f
 800143f:	00          	.byte	0x00
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8001440:	0080      	lsls	r0, r0, #2
 8001442:	3001      	adds	r0, #1
 8001444:	00c0      	lsls	r0, r0, #3
 8001446:	f7ff fd89 	bl	8000f5c <WIZCHIP_READ>
 800144a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800144e:	7028      	strb	r0, [r5, #0]
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
 8001450:	2001      	movs	r0, #1
}
 8001452:	bd70      	pop	{r4, r5, r6, pc}
         *(uint8_t*) arg = getSn_TTL(sn);
 8001454:	0080      	lsls	r0, r0, #2
 8001456:	3001      	adds	r0, #1
 8001458:	00c0      	lsls	r0, r0, #3
 800145a:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
 800145e:	f7ff fd7d 	bl	8000f5c <WIZCHIP_READ>
 8001462:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001464:	2001      	movs	r0, #1
         break;
 8001466:	e7f4      	b.n	8001452 <getsockopt+0x36>
         *(uint8_t*) arg = getSn_TOS(sn);
 8001468:	0080      	lsls	r0, r0, #2
 800146a:	3001      	adds	r0, #1
 800146c:	00c0      	lsls	r0, r0, #3
 800146e:	f500 50a8 	add.w	r0, r0, #5376	; 0x1500
 8001472:	f7ff fd73 	bl	8000f5c <WIZCHIP_READ>
 8001476:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001478:	2001      	movs	r0, #1
         break;
 800147a:	e7ea      	b.n	8001452 <getsockopt+0x36>
         *(uint16_t*) arg = getSn_MSSR(sn);
 800147c:	0084      	lsls	r4, r0, #2
 800147e:	3401      	adds	r4, #1
 8001480:	00e4      	lsls	r4, r4, #3
 8001482:	f504 5090 	add.w	r0, r4, #4608	; 0x1200
 8001486:	f7ff fd69 	bl	8000f5c <WIZCHIP_READ>
 800148a:	b286      	uxth	r6, r0
 800148c:	0236      	lsls	r6, r6, #8
 800148e:	b2b6      	uxth	r6, r6
 8001490:	f504 5098 	add.w	r0, r4, #4864	; 0x1300
 8001494:	f7ff fd62 	bl	8000f5c <WIZCHIP_READ>
 8001498:	fa16 f080 	uxtah	r0, r6, r0
 800149c:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 800149e:	2001      	movs	r0, #1
         break;
 80014a0:	e7d7      	b.n	8001452 <getsockopt+0x36>
         getSn_DIPR(sn, (uint8_t*)arg);
 80014a2:	0080      	lsls	r0, r0, #2
 80014a4:	3001      	adds	r0, #1
 80014a6:	00c0      	lsls	r0, r0, #3
 80014a8:	2204      	movs	r2, #4
 80014aa:	4629      	mov	r1, r5
 80014ac:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 80014b0:	f7ff fdba 	bl	8001028 <WIZCHIP_READ_BUF>
   return SOCK_OK;
 80014b4:	2001      	movs	r0, #1
         break;
 80014b6:	e7cc      	b.n	8001452 <getsockopt+0x36>
         *(uint16_t*) arg = getSn_DPORT(sn);
 80014b8:	0084      	lsls	r4, r0, #2
 80014ba:	3401      	adds	r4, #1
 80014bc:	00e4      	lsls	r4, r4, #3
 80014be:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 80014c2:	f7ff fd4b 	bl	8000f5c <WIZCHIP_READ>
 80014c6:	b286      	uxth	r6, r0
 80014c8:	0236      	lsls	r6, r6, #8
 80014ca:	b2b6      	uxth	r6, r6
 80014cc:	f504 5088 	add.w	r0, r4, #4352	; 0x1100
 80014d0:	f7ff fd44 	bl	8000f5c <WIZCHIP_READ>
 80014d4:	fa16 f080 	uxtah	r0, r6, r0
 80014d8:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 80014da:	2001      	movs	r0, #1
         break;
 80014dc:	e7b9      	b.n	8001452 <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 80014de:	0084      	lsls	r4, r0, #2
 80014e0:	3401      	adds	r4, #1
 80014e2:	00e4      	lsls	r4, r4, #3
 80014e4:	4620      	mov	r0, r4
 80014e6:	f7ff fd39 	bl	8000f5c <WIZCHIP_READ>
 80014ea:	f000 000f 	and.w	r0, r0, #15
 80014ee:	2801      	cmp	r0, #1
 80014f0:	d140      	bne.n	8001574 <getsockopt+0x158>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 80014f2:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
 80014f6:	f7ff fd31 	bl	8000f5c <WIZCHIP_READ>
 80014fa:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 80014fc:	2001      	movs	r0, #1
         break;
 80014fe:	e7a8      	b.n	8001452 <getsockopt+0x36>
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 8001500:	f7ff fe10 	bl	8001124 <getSn_TX_FSR>
 8001504:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001506:	2001      	movs	r0, #1
         break;
 8001508:	e7a3      	b.n	8001452 <getsockopt+0x36>
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 800150a:	f7ff fe3a 	bl	8001182 <getSn_RX_RSR>
 800150e:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001510:	2001      	movs	r0, #1
         break;
 8001512:	e79e      	b.n	8001452 <getsockopt+0x36>
         *(uint8_t*) arg = getSn_SR(sn);
 8001514:	0080      	lsls	r0, r0, #2
 8001516:	3001      	adds	r0, #1
 8001518:	00c0      	lsls	r0, r0, #3
 800151a:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800151e:	f7ff fd1d 	bl	8000f5c <WIZCHIP_READ>
 8001522:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001524:	2001      	movs	r0, #1
         break;
 8001526:	e794      	b.n	8001452 <getsockopt+0x36>
         if(getSn_MR(sn) & Sn_MR_TCP)
 8001528:	0080      	lsls	r0, r0, #2
 800152a:	3001      	adds	r0, #1
 800152c:	00c0      	lsls	r0, r0, #3
 800152e:	f7ff fd15 	bl	8000f5c <WIZCHIP_READ>
 8001532:	f010 0f01 	tst.w	r0, #1
 8001536:	d105      	bne.n	8001544 <getsockopt+0x128>
            *(uint16_t*)arg = sock_remained_size[sn];
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <getsockopt+0x164>)
 800153a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800153e:	802b      	strh	r3, [r5, #0]
   return SOCK_OK;
 8001540:	2001      	movs	r0, #1
 8001542:	e786      	b.n	8001452 <getsockopt+0x36>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff fe1c 	bl	8001182 <getSn_RX_RSR>
 800154a:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 800154c:	2001      	movs	r0, #1
 800154e:	e780      	b.n	8001452 <getsockopt+0x36>
         if((getSn_MR(sn) == Sn_MR_TCP))
 8001550:	0080      	lsls	r0, r0, #2
 8001552:	3001      	adds	r0, #1
 8001554:	00c0      	lsls	r0, r0, #3
 8001556:	f7ff fd01 	bl	8000f5c <WIZCHIP_READ>
 800155a:	2801      	cmp	r0, #1
 800155c:	d00d      	beq.n	800157a <getsockopt+0x15e>
         *(uint8_t*)arg = sock_pack_info[sn];
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <getsockopt+0x168>)
 8001560:	5d1b      	ldrb	r3, [r3, r4]
 8001562:	702b      	strb	r3, [r5, #0]
   return SOCK_OK;
 8001564:	2001      	movs	r0, #1
         break;
 8001566:	e774      	b.n	8001452 <getsockopt+0x36>
   CHECK_SOCKNUM();
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
}
 800156c:	4770      	bx	lr
         return SOCKERR_SOCKOPT;
 800156e:	f06f 0001 	mvn.w	r0, #1
 8001572:	e76e      	b.n	8001452 <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 8001574:	f06f 0004 	mvn.w	r0, #4
 8001578:	e76b      	b.n	8001452 <getsockopt+0x36>
             return SOCKERR_SOCKMODE;
 800157a:	f06f 0004 	mvn.w	r0, #4
 800157e:	e768      	b.n	8001452 <getsockopt+0x36>
 8001580:	20000108 	.word	0x20000108
 8001584:	20000100 	.word	0x20000100

08001588 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001588:	4770      	bx	lr

0800158a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800158a:	4770      	bx	lr

0800158c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800158c:	4770      	bx	lr

0800158e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800158e:	4770      	bx	lr

08001590 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001590:	7800      	ldrb	r0, [r0, #0]
 8001592:	4770      	bx	lr

08001594 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001594:	7001      	strb	r1, [r0, #0]
 8001596:	4770      	bx	lr

08001598 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001598:	2000      	movs	r0, #0
 800159a:	4770      	bx	lr

0800159c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800159c:	4770      	bx	lr
	...

080015a0 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 80015a0:	b120      	cbz	r0, 80015ac <reg_wizchip_cs_cbfunc+0xc>
 80015a2:	b119      	cbz	r1, 80015ac <reg_wizchip_cs_cbfunc+0xc>
      WIZCHIP.CS._select   = wizchip_cs_select;
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <reg_wizchip_cs_cbfunc+0x18>)
 80015a6:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80015a8:	6199      	str	r1, [r3, #24]
   }
}
 80015aa:	4770      	bx	lr
      WIZCHIP.CS._select   = wizchip_cs_select;
 80015ac:	4b02      	ldr	r3, [pc, #8]	; (80015b8 <reg_wizchip_cs_cbfunc+0x18>)
 80015ae:	4a03      	ldr	r2, [pc, #12]	; (80015bc <reg_wizchip_cs_cbfunc+0x1c>)
 80015b0:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80015b2:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <reg_wizchip_cs_cbfunc+0x20>)
 80015b4:	619a      	str	r2, [r3, #24]
 80015b6:	4770      	bx	lr
 80015b8:	20000004 	.word	0x20000004
 80015bc:	0800158d 	.word	0x0800158d
 80015c0:	0800158f 	.word	0x0800158f

080015c4 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <reg_wizchip_spi_cbfunc+0x24>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	f413 7f00 	tst.w	r3, #512	; 0x200
 80015cc:	d0fa      	beq.n	80015c4 <reg_wizchip_spi_cbfunc>
   
   if(!spi_rb || !spi_wb)
 80015ce:	b120      	cbz	r0, 80015da <reg_wizchip_spi_cbfunc+0x16>
 80015d0:	b119      	cbz	r1, 80015da <reg_wizchip_spi_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <reg_wizchip_spi_cbfunc+0x24>)
 80015d4:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80015d6:	6219      	str	r1, [r3, #32]
   }
}
 80015d8:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80015da:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <reg_wizchip_spi_cbfunc+0x24>)
 80015dc:	4a03      	ldr	r2, [pc, #12]	; (80015ec <reg_wizchip_spi_cbfunc+0x28>)
 80015de:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80015e0:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <reg_wizchip_spi_cbfunc+0x2c>)
 80015e2:	621a      	str	r2, [r3, #32]
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000004 	.word	0x20000004
 80015ec:	08001599 	.word	0x08001599
 80015f0:	0800159d 	.word	0x0800159d

080015f4 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80015f4:	b500      	push	{lr}
 80015f6:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80015f8:	2206      	movs	r2, #6
 80015fa:	a901      	add	r1, sp, #4
 80015fc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001600:	f7ff fd12 	bl	8001028 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001604:	2204      	movs	r2, #4
 8001606:	a905      	add	r1, sp, #20
 8001608:	f44f 7080 	mov.w	r0, #256	; 0x100
 800160c:	f7ff fd0c 	bl	8001028 <WIZCHIP_READ_BUF>
 8001610:	2204      	movs	r2, #4
 8001612:	a904      	add	r1, sp, #16
 8001614:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001618:	f7ff fd06 	bl	8001028 <WIZCHIP_READ_BUF>
 800161c:	2204      	movs	r2, #4
 800161e:	a903      	add	r1, sp, #12
 8001620:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001624:	f7ff fd00 	bl	8001028 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001628:	2180      	movs	r1, #128	; 0x80
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff fcc8 	bl	8000fc0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fc93 	bl	8000f5c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001636:	2206      	movs	r2, #6
 8001638:	a901      	add	r1, sp, #4
 800163a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800163e:	f7ff fd33 	bl	80010a8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001642:	2204      	movs	r2, #4
 8001644:	a905      	add	r1, sp, #20
 8001646:	f44f 7080 	mov.w	r0, #256	; 0x100
 800164a:	f7ff fd2d 	bl	80010a8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800164e:	2204      	movs	r2, #4
 8001650:	a904      	add	r1, sp, #16
 8001652:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001656:	f7ff fd27 	bl	80010a8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800165a:	2204      	movs	r2, #4
 800165c:	a903      	add	r1, sp, #12
 800165e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001662:	f7ff fd21 	bl	80010a8 <WIZCHIP_WRITE_BUF>
}
 8001666:	b007      	add	sp, #28
 8001668:	f85d fb04 	ldr.w	pc, [sp], #4

0800166c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800166c:	b570      	push	{r4, r5, r6, lr}
 800166e:	4605      	mov	r5, r0
 8001670:	460e      	mov	r6, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8001672:	f7ff ffbf 	bl	80015f4 <wizchip_sw_reset>
   if(txsize)
 8001676:	b1cd      	cbz	r5, 80016ac <wizchip_init+0x40>
   {
      tmp = 0;
 8001678:	2200      	movs	r2, #0
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800167a:	4613      	mov	r3, r2
 800167c:	2b07      	cmp	r3, #7
 800167e:	dc07      	bgt.n	8001690 <wizchip_init+0x24>
		{
			tmp += txsize[i];
 8001680:	5ce9      	ldrb	r1, [r5, r3]
 8001682:	440a      	add	r2, r1
 8001684:	b252      	sxtb	r2, r2

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001686:	2a10      	cmp	r2, #16
 8001688:	dc2f      	bgt.n	80016ea <wizchip_init+0x7e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800168a:	3301      	adds	r3, #1
 800168c:	b25b      	sxtb	r3, r3
 800168e:	e7f5      	b.n	800167c <wizchip_init+0x10>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001690:	2400      	movs	r4, #0
 8001692:	e009      	b.n	80016a8 <wizchip_init+0x3c>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001694:	00a0      	lsls	r0, r4, #2
 8001696:	3001      	adds	r0, #1
 8001698:	00c0      	lsls	r0, r0, #3
 800169a:	5d29      	ldrb	r1, [r5, r4]
 800169c:	f500 50f8 	add.w	r0, r0, #7936	; 0x1f00
 80016a0:	f7ff fc8e 	bl	8000fc0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80016a4:	3401      	adds	r4, #1
 80016a6:	b264      	sxtb	r4, r4
 80016a8:	2c07      	cmp	r4, #7
 80016aa:	ddf3      	ble.n	8001694 <wizchip_init+0x28>
		}

	#endif
   }

   if(rxsize)
 80016ac:	b15e      	cbz	r6, 80016c6 <wizchip_init+0x5a>
   {
      tmp = 0;
 80016ae:	2200      	movs	r2, #0
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80016b0:	4613      	mov	r3, r2
 80016b2:	2b07      	cmp	r3, #7
 80016b4:	dc09      	bgt.n	80016ca <wizchip_init+0x5e>
		{
			tmp += rxsize[i];
 80016b6:	5cf1      	ldrb	r1, [r6, r3]
 80016b8:	440a      	add	r2, r1
 80016ba:	b252      	sxtb	r2, r2
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80016bc:	2a10      	cmp	r2, #16
 80016be:	dc17      	bgt.n	80016f0 <wizchip_init+0x84>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80016c0:	3301      	adds	r3, #1
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	e7f5      	b.n	80016b2 <wizchip_init+0x46>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 80016c6:	2000      	movs	r0, #0
 80016c8:	e00e      	b.n	80016e8 <wizchip_init+0x7c>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80016ca:	2400      	movs	r4, #0
 80016cc:	e009      	b.n	80016e2 <wizchip_init+0x76>
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80016ce:	00a0      	lsls	r0, r4, #2
 80016d0:	3001      	adds	r0, #1
 80016d2:	00c0      	lsls	r0, r0, #3
 80016d4:	5d31      	ldrb	r1, [r6, r4]
 80016d6:	f500 50f0 	add.w	r0, r0, #7680	; 0x1e00
 80016da:	f7ff fc71 	bl	8000fc0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80016de:	3401      	adds	r4, #1
 80016e0:	b264      	sxtb	r4, r4
 80016e2:	2c07      	cmp	r4, #7
 80016e4:	ddf3      	ble.n	80016ce <wizchip_init+0x62>
   return 0;
 80016e6:	2000      	movs	r0, #0
}
 80016e8:	bd70      	pop	{r4, r5, r6, pc}
			if(tmp > 16) return -1;
 80016ea:	f04f 30ff 	mov.w	r0, #4294967295
 80016ee:	e7fb      	b.n	80016e8 <wizchip_init+0x7c>
			if(tmp > 16) return -1;
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	e7f8      	b.n	80016e8 <wizchip_init+0x7c>

080016f6 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80016f6:	b538      	push	{r3, r4, r5, lr}
   uint8_t ir  = (uint8_t)intr;
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80016f8:	0a05      	lsrs	r5, r0, #8
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80016fa:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
 80016fe:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001702:	f7ff fc5d 	bl	8000fc0 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8001706:	2400      	movs	r4, #0
 8001708:	e001      	b.n	800170e <wizchip_clrinterrupt+0x18>
 800170a:	3401      	adds	r4, #1
 800170c:	b2e4      	uxtb	r4, r4
 800170e:	2c07      	cmp	r4, #7
 8001710:	d80d      	bhi.n	800172e <wizchip_clrinterrupt+0x38>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8001712:	fa45 f304 	asr.w	r3, r5, r4
 8001716:	f013 0f01 	tst.w	r3, #1
 800171a:	d0f6      	beq.n	800170a <wizchip_clrinterrupt+0x14>
 800171c:	00a0      	lsls	r0, r4, #2
 800171e:	3001      	adds	r0, #1
 8001720:	00c0      	lsls	r0, r0, #3
 8001722:	211f      	movs	r1, #31
 8001724:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8001728:	f7ff fc4a 	bl	8000fc0 <WIZCHIP_WRITE>
 800172c:	e7ed      	b.n	800170a <wizchip_clrinterrupt+0x14>
   }

#endif   
}
 800172e:	bd38      	pop	{r3, r4, r5, pc}

08001730 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8001730:	b510      	push	{r4, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8001732:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001736:	f7ff fc11 	bl	8000f5c <WIZCHIP_READ>
 800173a:	f000 04f0 	and.w	r4, r0, #240	; 0xf0
   sir = getSIR();
 800173e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8001742:	f7ff fc0b 	bl	8000f5c <WIZCHIP_READ>
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8001746:	b280      	uxth	r0, r0
  ret = (ret << 8) + ir;
 8001748:	0200      	lsls	r0, r0, #8
 800174a:	b280      	uxth	r0, r0
 800174c:	4420      	add	r0, r4
 800174e:	b280      	uxth	r0, r0
  return (intr_kind)ret;
}
 8001750:	bd10      	pop	{r4, pc}

08001752 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8001752:	b510      	push	{r4, lr}
   uint8_t imr  = (uint8_t)intr;
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8001754:	0a04      	lsrs	r4, r0, #8
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8001756:	b2c1      	uxtb	r1, r0
 8001758:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800175c:	f7ff fc30 	bl	8000fc0 <WIZCHIP_WRITE>
   setSIMR(simr);
 8001760:	4621      	mov	r1, r4
 8001762:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001766:	f7ff fc2b 	bl	8000fc0 <WIZCHIP_WRITE>
#endif   
}
 800176a:	bd10      	pop	{r4, pc}

0800176c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800176c:	b510      	push	{r4, lr}
 800176e:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 8001770:	2206      	movs	r2, #6
 8001772:	4601      	mov	r1, r0
 8001774:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001778:	f7ff fc96 	bl	80010a8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800177c:	2204      	movs	r2, #4
 800177e:	f104 010e 	add.w	r1, r4, #14
 8001782:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001786:	f7ff fc8f 	bl	80010a8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800178a:	2204      	movs	r2, #4
 800178c:	f104 010a 	add.w	r1, r4, #10
 8001790:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001794:	f7ff fc88 	bl	80010a8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001798:	2204      	movs	r2, #4
 800179a:	1da1      	adds	r1, r4, #6
 800179c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80017a0:	f7ff fc82 	bl	80010a8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80017a4:	7ca2      	ldrb	r2, [r4, #18]
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <wizchip_setnetinfo+0x54>)
 80017a8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80017aa:	7ce2      	ldrb	r2, [r4, #19]
 80017ac:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80017ae:	7d22      	ldrb	r2, [r4, #20]
 80017b0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80017b2:	7d62      	ldrb	r2, [r4, #21]
 80017b4:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80017b6:	7da2      	ldrb	r2, [r4, #22]
 80017b8:	4b02      	ldr	r3, [pc, #8]	; (80017c4 <wizchip_setnetinfo+0x58>)
 80017ba:	701a      	strb	r2, [r3, #0]
}
 80017bc:	bd10      	pop	{r4, pc}
 80017be:	bf00      	nop
 80017c0:	2000011c 	.word	0x2000011c
 80017c4:	20000118 	.word	0x20000118

080017c8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80017c8:	b510      	push	{r4, lr}
 80017ca:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 80017cc:	2206      	movs	r2, #6
 80017ce:	4601      	mov	r1, r0
 80017d0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80017d4:	f7ff fc28 	bl	8001028 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80017d8:	2204      	movs	r2, #4
 80017da:	f104 010e 	add.w	r1, r4, #14
 80017de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80017e2:	f7ff fc21 	bl	8001028 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80017e6:	2204      	movs	r2, #4
 80017e8:	f104 010a 	add.w	r1, r4, #10
 80017ec:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80017f0:	f7ff fc1a 	bl	8001028 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80017f4:	2204      	movs	r2, #4
 80017f6:	1da1      	adds	r1, r4, #6
 80017f8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80017fc:	f7ff fc14 	bl	8001028 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <wizchip_getnetinfo+0x54>)
 8001802:	781a      	ldrb	r2, [r3, #0]
 8001804:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001806:	785a      	ldrb	r2, [r3, #1]
 8001808:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800180a:	789a      	ldrb	r2, [r3, #2]
 800180c:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800180e:	78db      	ldrb	r3, [r3, #3]
 8001810:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001812:	4b03      	ldr	r3, [pc, #12]	; (8001820 <wizchip_getnetinfo+0x58>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	75a3      	strb	r3, [r4, #22]
}
 8001818:	bd10      	pop	{r4, pc}
 800181a:	bf00      	nop
 800181c:	2000011c 	.word	0x2000011c
 8001820:	20000118 	.word	0x20000118

08001824 <mcp23017_init>:

#define I2C_TIMEOUT		10

void mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c, uint16_t addr)
{
	hdev->hi2c = hi2c;
 8001824:	6001      	str	r1, [r0, #0]
	hdev->addr = addr << 1;
 8001826:	0052      	lsls	r2, r2, #1
 8001828:	8082      	strh	r2, [r0, #4]
}
 800182a:	4770      	bx	lr

0800182c <mcp23017_read>:

HAL_StatusTypeDef mcp23017_read(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 800182c:	b510      	push	{r4, lr}
 800182e:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Read(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 8001830:	8884      	ldrh	r4, [r0, #4]
 8001832:	6800      	ldr	r0, [r0, #0]
 8001834:	230a      	movs	r3, #10
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	2301      	movs	r3, #1
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	9200      	str	r2, [sp, #0]
 800183e:	460a      	mov	r2, r1
 8001840:	4621      	mov	r1, r4
 8001842:	f003 fdd7 	bl	80053f4 <HAL_I2C_Mem_Read>
}
 8001846:	b004      	add	sp, #16
 8001848:	bd10      	pop	{r4, pc}

0800184a <mcp23017_write>:

HAL_StatusTypeDef mcp23017_write(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 800184a:	b510      	push	{r4, lr}
 800184c:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Write(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 800184e:	8884      	ldrh	r4, [r0, #4]
 8001850:	6800      	ldr	r0, [r0, #0]
 8001852:	230a      	movs	r3, #10
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	2301      	movs	r3, #1
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	9200      	str	r2, [sp, #0]
 800185c:	460a      	mov	r2, r1
 800185e:	4621      	mov	r1, r4
 8001860:	f003 fd14 	bl	800528c <HAL_I2C_Mem_Write>
}
 8001864:	b004      	add	sp, #16
 8001866:	bd10      	pop	{r4, pc}

08001868 <mcp23017_iodir>:

HAL_StatusTypeDef mcp23017_iodir(MCP23017_HandleTypeDef *hdev, uint8_t port, uint8_t iodir)
{
 8001868:	b500      	push	{lr}
 800186a:	b083      	sub	sp, #12
	uint8_t data[1] = {iodir};
 800186c:	ab02      	add	r3, sp, #8
 800186e:	f803 2d04 	strb.w	r2, [r3, #-4]!
	return mcp23017_write(hdev, REGISTER_IODIRA|port, data);
 8001872:	461a      	mov	r2, r3
 8001874:	f7ff ffe9 	bl	800184a <mcp23017_write>
}
 8001878:	b003      	add	sp, #12
 800187a:	f85d fb04 	ldr.w	pc, [sp], #4

0800187e <mcp23017_read_gpio>:
	uint8_t data[1] = {pu};
	return mcp23017_write(hdev, REGISTER_GPPUA|port, data);
}

HAL_StatusTypeDef mcp23017_read_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 800187e:	b530      	push	{r4, r5, lr}
 8001880:	b083      	sub	sp, #12
 8001882:	4604      	mov	r4, r0
 8001884:	460d      	mov	r5, r1
	uint8_t data[1];
	HAL_StatusTypeDef status;
	status = mcp23017_read(hdev, REGISTER_GPIOA|port, data);
 8001886:	aa01      	add	r2, sp, #4
 8001888:	f041 0112 	orr.w	r1, r1, #18
 800188c:	f7ff ffce 	bl	800182c <mcp23017_read>
	if (status == HAL_OK)
 8001890:	4603      	mov	r3, r0
 8001892:	b918      	cbnz	r0, 800189c <mcp23017_read_gpio+0x1e>
		hdev->gpio[port] = data[0];
 8001894:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001898:	442c      	add	r4, r5
 800189a:	71a2      	strb	r2, [r4, #6]
	return status;
}
 800189c:	4618      	mov	r0, r3
 800189e:	b003      	add	sp, #12
 80018a0:	bd30      	pop	{r4, r5, pc}
	...

080018a4 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 80018a4:	b500      	push	{lr}
 80018a6:	b087      	sub	sp, #28
 80018a8:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 80018ac:	2364      	movs	r3, #100	; 0x64
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2301      	movs	r3, #1
 80018b2:	f10d 0217 	add.w	r2, sp, #23
 80018b6:	f10d 010f 	add.w	r1, sp, #15
 80018ba:	4804      	ldr	r0, [pc, #16]	; (80018cc <W25qxx_Spi+0x28>)
 80018bc:	f004 fec5 	bl	800664a <HAL_SPI_TransmitReceive>
	return ret;	
}
 80018c0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80018c4:	b007      	add	sp, #28
 80018c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80018ca:	bf00      	nop
 80018cc:	20002fc8 	.word	0x20002fc8

080018d0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80018d0:	b570      	push	{r4, r5, r6, lr}
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
  FLASH_SELECT;
 80018d2:	f000 f9ed 	bl	8001cb0 <FLASH_ChipSelect>
  W25qxx_Spi(0x9F);
 80018d6:	209f      	movs	r0, #159	; 0x9f
 80018d8:	f7ff ffe4 	bl	80018a4 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80018dc:	20a5      	movs	r0, #165	; 0xa5
 80018de:	f7ff ffe1 	bl	80018a4 <W25qxx_Spi>
 80018e2:	4606      	mov	r6, r0
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80018e4:	20a5      	movs	r0, #165	; 0xa5
 80018e6:	f7ff ffdd 	bl	80018a4 <W25qxx_Spi>
 80018ea:	4604      	mov	r4, r0
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80018ec:	20a5      	movs	r0, #165	; 0xa5
 80018ee:	f7ff ffd9 	bl	80018a4 <W25qxx_Spi>
 80018f2:	4605      	mov	r5, r0
  FLASH_DESELECT;
 80018f4:	f000 f9ee 	bl	8001cd4 <FLASH_ChipDeselect>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80018f8:	0220      	lsls	r0, r4, #8
 80018fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
  return Temp;
}
 80018fe:	4328      	orrs	r0, r5
 8001900:	bd70      	pop	{r4, r5, r6, pc}
	...

08001904 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001904:	b510      	push	{r4, lr}
  FLASH_SELECT;
 8001906:	f000 f9d3 	bl	8001cb0 <FLASH_ChipSelect>
  W25qxx_Spi(0x4B);
 800190a:	204b      	movs	r0, #75	; 0x4b
 800190c:	f7ff ffca 	bl	80018a4 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8001910:	2400      	movs	r4, #0
 8001912:	e004      	b.n	800191e <W25qxx_ReadUniqID+0x1a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001914:	20a5      	movs	r0, #165	; 0xa5
 8001916:	f7ff ffc5 	bl	80018a4 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 800191a:	3401      	adds	r4, #1
 800191c:	b2e4      	uxtb	r4, r4
 800191e:	2c03      	cmp	r4, #3
 8001920:	d9f8      	bls.n	8001914 <W25qxx_ReadUniqID+0x10>
	for(uint8_t	i=0;i<8;i++)
 8001922:	2400      	movs	r4, #0
 8001924:	e007      	b.n	8001936 <W25qxx_ReadUniqID+0x32>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001926:	20a5      	movs	r0, #165	; 0xa5
 8001928:	f7ff ffbc 	bl	80018a4 <W25qxx_Spi>
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <W25qxx_ReadUniqID+0x3c>)
 800192e:	4423      	add	r3, r4
 8001930:	7058      	strb	r0, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8001932:	3401      	adds	r4, #1
 8001934:	b2e4      	uxtb	r4, r4
 8001936:	2c07      	cmp	r4, #7
 8001938:	d9f5      	bls.n	8001926 <W25qxx_ReadUniqID+0x22>
  FLASH_DESELECT;
 800193a:	f000 f9cb 	bl	8001cd4 <FLASH_ChipDeselect>
}
 800193e:	bd10      	pop	{r4, pc}
 8001940:	20002a64 	.word	0x20002a64

08001944 <W25qxx_ReadStatusRegister>:
  FLASH_DESELECT;
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8001944:	b510      	push	{r4, lr}
 8001946:	4604      	mov	r4, r0
	uint8_t	status=0;
	FLASH_SELECT;
 8001948:	f000 f9b2 	bl	8001cb0 <FLASH_ChipSelect>
	if(SelectStatusRegister_1_2_3==1)
 800194c:	2c01      	cmp	r4, #1
 800194e:	d00f      	beq.n	8001970 <W25qxx_ReadStatusRegister+0x2c>
	{
		W25qxx_Spi(0x05);
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister1 = status;
	}
	else if(SelectStatusRegister_1_2_3==2)
 8001950:	2c02      	cmp	r4, #2
 8001952:	d018      	beq.n	8001986 <W25qxx_ReadStatusRegister+0x42>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister2 = status;
	}
	else
	{
		W25qxx_Spi(0x15);
 8001954:	2015      	movs	r0, #21
 8001956:	f7ff ffa5 	bl	80018a4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 800195a:	20a5      	movs	r0, #165	; 0xa5
 800195c:	f7ff ffa2 	bl	80018a4 <W25qxx_Spi>
 8001960:	4604      	mov	r4, r0
		w25qxx.StatusRegister3 = status;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <W25qxx_ReadStatusRegister+0x58>)
 8001964:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	}	
	FLASH_DESELECT;
 8001968:	f000 f9b4 	bl	8001cd4 <FLASH_ChipDeselect>
	return status;
}
 800196c:	4620      	mov	r0, r4
 800196e:	bd10      	pop	{r4, pc}
		W25qxx_Spi(0x05);
 8001970:	2005      	movs	r0, #5
 8001972:	f7ff ff97 	bl	80018a4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001976:	20a5      	movs	r0, #165	; 0xa5
 8001978:	f7ff ff94 	bl	80018a4 <W25qxx_Spi>
 800197c:	4604      	mov	r4, r0
		w25qxx.StatusRegister1 = status;
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <W25qxx_ReadStatusRegister+0x58>)
 8001980:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
 8001984:	e7f0      	b.n	8001968 <W25qxx_ReadStatusRegister+0x24>
		W25qxx_Spi(0x35);
 8001986:	2035      	movs	r0, #53	; 0x35
 8001988:	f7ff ff8c 	bl	80018a4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 800198c:	20a5      	movs	r0, #165	; 0xa5
 800198e:	f7ff ff89 	bl	80018a4 <W25qxx_Spi>
 8001992:	4604      	mov	r4, r0
		w25qxx.StatusRegister2 = status;
 8001994:	4b01      	ldr	r3, [pc, #4]	; (800199c <W25qxx_ReadStatusRegister+0x58>)
 8001996:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
 800199a:	e7e5      	b.n	8001968 <W25qxx_ReadStatusRegister+0x24>
 800199c:	20002a64 	.word	0x20002a64

080019a0 <W25qxx_Init>:
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 FLASH_DESELECT;
}
//###################################################################################################################
bool	W25qxx_Init(void)
{
 80019a0:	b510      	push	{r4, lr}
	w25qxx.Lock=1;	
 80019a2:	4b42      	ldr	r3, [pc, #264]	; (8001aac <W25qxx_Init+0x10c>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 80019aa:	e002      	b.n	80019b2 <W25qxx_Init+0x12>
		W25qxx_Delay(1);
 80019ac:	2001      	movs	r0, #1
 80019ae:	f005 ffb4 	bl	800791a <osDelay>
	while(HAL_GetTick()<100)
 80019b2:	f002 fbeb 	bl	800418c <HAL_GetTick>
 80019b6:	2863      	cmp	r0, #99	; 0x63
 80019b8:	d9f8      	bls.n	80019ac <W25qxx_Init+0xc>
  FLASH_DESELECT;
 80019ba:	f000 f98b 	bl	8001cd4 <FLASH_ChipDeselect>
  W25qxx_Delay(100);
 80019be:	2064      	movs	r0, #100	; 0x64
 80019c0:	f005 ffab 	bl	800791a <osDelay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 80019c4:	f7ff ff84 	bl	80018d0 <W25qxx_ReadID>
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 80019c8:	b280      	uxth	r0, r0
 80019ca:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 80019ce:	3811      	subs	r0, #17
 80019d0:	2809      	cmp	r0, #9
 80019d2:	d866      	bhi.n	8001aa2 <W25qxx_Init+0x102>
 80019d4:	e8df f000 	tbb	[pc, r0]
 80019d8:	4d53595f 	.word	0x4d53595f
 80019dc:	343b4147 	.word	0x343b4147
 80019e0:	052d      	.short	0x052d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 80019e2:	4b32      	ldr	r3, [pc, #200]	; (8001aac <W25qxx_Init+0x10c>)
 80019e4:	220a      	movs	r2, #10
 80019e6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 80019e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ec:	61da      	str	r2, [r3, #28]
				#endif
			w25qxx.Lock=0;	
			return false;
				
	}		
	w25qxx.PageSize=256;
 80019ee:	4c2f      	ldr	r4, [pc, #188]	; (8001aac <W25qxx_Init+0x10c>)
 80019f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f4:	8163      	strh	r3, [r4, #10]
	w25qxx.SectorSize=0x1000;
 80019f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fa:	6123      	str	r3, [r4, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 80019fc:	69e3      	ldr	r3, [r4, #28]
 80019fe:	011a      	lsls	r2, r3, #4
 8001a00:	6162      	str	r2, [r4, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8001a02:	041b      	lsls	r3, r3, #16
 8001a04:	0a1a      	lsrs	r2, r3, #8
 8001a06:	60e2      	str	r2, [r4, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8001a08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a0c:	61a2      	str	r2, [r4, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8001a0e:	0a9b      	lsrs	r3, r3, #10
 8001a10:	6223      	str	r3, [r4, #32]
	W25qxx_ReadUniqID();
 8001a12:	f7ff ff77 	bl	8001904 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8001a16:	2001      	movs	r0, #1
 8001a18:	f7ff ff94 	bl	8001944 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f7ff ff91 	bl	8001944 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001a22:	2003      	movs	r0, #3
 8001a24:	f7ff ff8e 	bl	8001944 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return true;
 8001a2e:	2001      	movs	r0, #1
}	
 8001a30:	bd10      	pop	{r4, pc}
			w25qxx.ID=W25Q256;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <W25qxx_Init+0x10c>)
 8001a34:	2209      	movs	r2, #9
 8001a36:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8001a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a3c:	61da      	str	r2, [r3, #28]
		break;
 8001a3e:	e7d6      	b.n	80019ee <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q128;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <W25qxx_Init+0x10c>)
 8001a42:	2208      	movs	r2, #8
 8001a44:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8001a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a4a:	61da      	str	r2, [r3, #28]
		break;
 8001a4c:	e7cf      	b.n	80019ee <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q64;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <W25qxx_Init+0x10c>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	61da      	str	r2, [r3, #28]
		break;
 8001a58:	e7c9      	b.n	80019ee <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q32;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <W25qxx_Init+0x10c>)
 8001a5c:	2206      	movs	r2, #6
 8001a5e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8001a60:	2240      	movs	r2, #64	; 0x40
 8001a62:	61da      	str	r2, [r3, #28]
		break;
 8001a64:	e7c3      	b.n	80019ee <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q16;
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <W25qxx_Init+0x10c>)
 8001a68:	2205      	movs	r2, #5
 8001a6a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	61da      	str	r2, [r3, #28]
		break;
 8001a70:	e7bd      	b.n	80019ee <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q80;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <W25qxx_Init+0x10c>)
 8001a74:	2204      	movs	r2, #4
 8001a76:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8001a78:	2210      	movs	r2, #16
 8001a7a:	61da      	str	r2, [r3, #28]
		break;
 8001a7c:	e7b7      	b.n	80019ee <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q40;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <W25qxx_Init+0x10c>)
 8001a80:	2203      	movs	r2, #3
 8001a82:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8001a84:	2208      	movs	r2, #8
 8001a86:	61da      	str	r2, [r3, #28]
		break;
 8001a88:	e7b1      	b.n	80019ee <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q20;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <W25qxx_Init+0x10c>)
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8001a90:	2204      	movs	r2, #4
 8001a92:	61da      	str	r2, [r3, #28]
		break;
 8001a94:	e7ab      	b.n	80019ee <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q10;
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <W25qxx_Init+0x10c>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	61da      	str	r2, [r3, #28]
		break;
 8001aa0:	e7a5      	b.n	80019ee <W25qxx_Init+0x4e>
			w25qxx.Lock=0;	
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	4b01      	ldr	r3, [pc, #4]	; (8001aac <W25qxx_Init+0x10c>)
 8001aa6:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
			return false;
 8001aaa:	e7c1      	b.n	8001a30 <W25qxx_Init+0x90>
 8001aac:	20002a64 	.word	0x20002a64

08001ab0 <vModbusInit>:
#include "Modbus.h"

void vModbusInit (ModbusHandler *modbus, UART_HandleTypeDef *port, TickType_t timeout){
	modbus -> ModbusSerialPort = port;
 8001ab0:	6001      	str	r1, [r0, #0]
	modbus -> timeout_t = timeout / portTICK_PERIOD_MS;
 8001ab2:	6042      	str	r2, [r0, #4]
}
 8001ab4:	4770      	bx	lr

08001ab6 <uModbusCalculateCRC>:

uint16_t uModbusCalculateCRC (uint8_t frame_length, uint8_t *frame){
 8001ab6:	b430      	push	{r4, r5}
	uint16_t calculatedCRC = 0xFFFF;
	uint16_t CRChigh, CRClow;
	for(int i = 0; i < frame_length; i++){
 8001ab8:	2500      	movs	r5, #0
	uint16_t calculatedCRC = 0xFFFF;
 8001aba:	f64f 73ff 	movw	r3, #65535	; 0xffff
	for(int i = 0; i < frame_length; i++){
 8001abe:	e00d      	b.n	8001adc <uModbusCalculateCRC+0x26>
		for(int j = 8; j > 0; j--){
			if(calculatedCRC & 0x0001){
				calculatedCRC >>= 1;
				calculatedCRC ^= 0xA001;
			}else{
				calculatedCRC >>= 1;
 8001ac0:	085b      	lsrs	r3, r3, #1
		for(int j = 8; j > 0; j--){
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	dd07      	ble.n	8001ad8 <uModbusCalculateCRC+0x22>
			if(calculatedCRC & 0x0001){
 8001ac8:	f013 0f01 	tst.w	r3, #1
 8001acc:	d0f8      	beq.n	8001ac0 <uModbusCalculateCRC+0xa>
				calculatedCRC ^= 0xA001;
 8001ace:	f24a 0401 	movw	r4, #40961	; 0xa001
 8001ad2:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
 8001ad6:	e7f4      	b.n	8001ac2 <uModbusCalculateCRC+0xc>
			}
		}
		frame++;
 8001ad8:	3101      	adds	r1, #1
	for(int i = 0; i < frame_length; i++){
 8001ada:	3501      	adds	r5, #1
 8001adc:	42a8      	cmp	r0, r5
 8001ade:	dd03      	ble.n	8001ae8 <uModbusCalculateCRC+0x32>
		calculatedCRC ^= (*frame);
 8001ae0:	780a      	ldrb	r2, [r1, #0]
 8001ae2:	4053      	eors	r3, r2
		for(int j = 8; j > 0; j--){
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	e7ed      	b.n	8001ac4 <uModbusCalculateCRC+0xe>
	}

	CRChigh = (calculatedCRC & 0x00FF) <<8;
 8001ae8:	0218      	lsls	r0, r3, #8
 8001aea:	b280      	uxth	r0, r0
	CRClow = (calculatedCRC & 0xFF00) >>8;
	calculatedCRC = CRChigh + CRClow;
 8001aec:	eb00 2013 	add.w	r0, r0, r3, lsr #8

	//calculatedCRC = HAL_CRC_Calculate(&hcrc, frame, frame_length);
	return calculatedCRC;
}
 8001af0:	b280      	uxth	r0, r0
 8001af2:	bc30      	pop	{r4, r5}
 8001af4:	4770      	bx	lr

08001af6 <bModbusCheckCRC>:

uint8_t bModbusCheckCRC (uint8_t frame_length, uint8_t *frame){
 8001af6:	b570      	push	{r4, r5, r6, lr}
 8001af8:	4604      	mov	r4, r0
 8001afa:	460d      	mov	r5, r1
	uint16_t crc = uModbusCalculateCRC(frame_length - 2, frame);
 8001afc:	1e86      	subs	r6, r0, #2
 8001afe:	b2f0      	uxtb	r0, r6
 8001b00:	f7ff ffd9 	bl	8001ab6 <uModbusCalculateCRC>
	uint16_t frameCRC = (uint16_t)(*(frame + frame_length - 2));
 8001b04:	5daa      	ldrb	r2, [r5, r6]
	frameCRC <<= 8;
	frameCRC += *(frame + frame_length - 1);
 8001b06:	3c01      	subs	r4, #1
 8001b08:	5d2b      	ldrb	r3, [r5, r4]
 8001b0a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001b0e:	b29b      	uxth	r3, r3

	if(crc == frameCRC){
 8001b10:	4298      	cmp	r0, r3
 8001b12:	d001      	beq.n	8001b18 <bModbusCheckCRC+0x22>
		return 1;
	}

	return 0;
 8001b14:	2000      	movs	r0, #0
}
 8001b16:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8001b18:	2001      	movs	r0, #1
 8001b1a:	e7fc      	b.n	8001b16 <bModbusCheckCRC+0x20>

08001b1c <vModbusReadInputRegisters>:
		return Modbus_TIMEOUT;
	}
	return Modbus_CRCERR;
}

ModbusState vModbusReadInputRegisters (ModbusHandler *modbus, uint8_t slave_address, uint16_t first_register_address, uint16_t registers_count, uint8_t *response_frame){
 8001b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4606      	mov	r6, r0
 8001b26:	4689      	mov	r9, r1
 8001b28:	f8d7 8030 	ldr.w	r8, [r7, #48]	; 0x30
	uint8_t transmit_frame_buffer[8];
	uint16_t transmitCRC;
	uint8_t received_frame_length = (registers_count * 2) + 5;
 8001b2c:	fa5f fe83 	uxtb.w	lr, r3
 8001b30:	ea4f 044e 	mov.w	r4, lr, lsl #1
 8001b34:	b2e4      	uxtb	r4, r4
 8001b36:	3405      	adds	r4, #5
 8001b38:	b2e4      	uxtb	r4, r4
	uint8_t received_frame_buffer[received_frame_length];
 8001b3a:	46a4      	mov	ip, r4
 8001b3c:	1de1      	adds	r1, r4, #7
 8001b3e:	f401 71fc 	and.w	r1, r1, #504	; 0x1f8
 8001b42:	ebad 0d01 	sub.w	sp, sp, r1
 8001b46:	466d      	mov	r5, sp
	uint32_t ulNotificationValue;
	for(int i = 0; i < received_frame_length; i++){
 8001b48:	2100      	movs	r1, #0
 8001b4a:	e002      	b.n	8001b52 <vModbusReadInputRegisters+0x36>
		received_frame_buffer[i] = 0;
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	5468      	strb	r0, [r5, r1]
	for(int i = 0; i < received_frame_length; i++){
 8001b50:	3101      	adds	r1, #1
 8001b52:	458c      	cmp	ip, r1
 8001b54:	dcfa      	bgt.n	8001b4c <vModbusReadInputRegisters+0x30>

	}
	transmit_frame_buffer[0] = slave_address;
 8001b56:	f887 9000 	strb.w	r9, [r7]
	transmit_frame_buffer[1] = 0x04;
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	7079      	strb	r1, [r7, #1]
	transmit_frame_buffer[2] = (uint8_t)(first_register_address >> 8);
 8001b5e:	0a11      	lsrs	r1, r2, #8
 8001b60:	70b9      	strb	r1, [r7, #2]
	transmit_frame_buffer[3] = (uint8_t)first_register_address;
 8001b62:	70fa      	strb	r2, [r7, #3]
	transmit_frame_buffer[4] = (uint8_t)(registers_count >> 8);
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	713b      	strb	r3, [r7, #4]
	transmit_frame_buffer[5] = (uint8_t)(registers_count);
 8001b68:	f887 e005 	strb.w	lr, [r7, #5]
	transmitCRC = uModbusCalculateCRC (6, transmit_frame_buffer);
 8001b6c:	4639      	mov	r1, r7
 8001b6e:	2006      	movs	r0, #6
 8001b70:	f7ff ffa1 	bl	8001ab6 <uModbusCalculateCRC>
	transmit_frame_buffer[6] = (transmitCRC >> 8);
 8001b74:	0a03      	lsrs	r3, r0, #8
 8001b76:	71bb      	strb	r3, [r7, #6]
	transmit_frame_buffer[7] = (uint8_t)(transmitCRC);
 8001b78:	71f8      	strb	r0, [r7, #7]

	//Wy�lij dane;
	HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_SET);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	4829      	ldr	r0, [pc, #164]	; (8001c24 <vModbusReadInputRegisters+0x108>)
 8001b80:	f003 f84a 	bl	8004c18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 8001b84:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8001c28 <vModbusReadInputRegisters+0x10c>
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b8e:	4650      	mov	r0, sl
 8001b90:	f003 f842 	bl	8004c18 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(modbus -> ModbusSerialPort, transmit_frame_buffer, 8);
 8001b94:	2208      	movs	r2, #8
 8001b96:	4639      	mov	r1, r7
 8001b98:	6830      	ldr	r0, [r6, #0]
 8001b9a:	f005 fc54 	bl	8007446 <HAL_UART_Transmit_IT>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 8001b9e:	6871      	ldr	r1, [r6, #4]
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f007 f9dd 	bl	8008f60 <ulTaskNotifyTake>
	HAL_UART_Receive_DMA(modbus -> ModbusSerialPort, received_frame_buffer, received_frame_length);
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	4629      	mov	r1, r5
 8001baa:	6830      	ldr	r0, [r6, #0]
 8001bac:	f005 fc70 	bl	8007490 <HAL_UART_Receive_DMA>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 8001bb0:	6871      	ldr	r1, [r6, #4]
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f007 f9d4 	bl	8008f60 <ulTaskNotifyTake>
 8001bb8:	4683      	mov	fp, r0
	vTaskDelay(1);
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f006 ff4c 	bl	8008a58 <vTaskDelay>
	HAL_UART_AbortTransmit(modbus -> ModbusSerialPort);
 8001bc0:	6830      	ldr	r0, [r6, #0]
 8001bc2:	f005 fcb9 	bl	8007538 <HAL_UART_AbortTransmit>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bcc:	4650      	mov	r0, sl
 8001bce:	f003 f823 	bl	8004c18 <HAL_GPIO_WritePin>
	if(ulNotificationValue){
 8001bd2:	f1bb 0f00 	cmp.w	fp, #0
 8001bd6:	d019      	beq.n	8001c0c <vModbusReadInputRegisters+0xf0>
		if(bModbusCheckCRC(received_frame_length, received_frame_buffer)){
 8001bd8:	4629      	mov	r1, r5
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f7ff ff8b 	bl	8001af6 <bModbusCheckCRC>
 8001be0:	b1e0      	cbz	r0, 8001c1c <vModbusReadInputRegisters+0x100>
			if(received_frame_buffer[0] == slave_address && received_frame_buffer[1] == 0x04){
 8001be2:	782b      	ldrb	r3, [r5, #0]
 8001be4:	454b      	cmp	r3, r9
 8001be6:	d11b      	bne.n	8001c20 <vModbusReadInputRegisters+0x104>
 8001be8:	786b      	ldrb	r3, [r5, #1]
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d101      	bne.n	8001bf2 <vModbusReadInputRegisters+0xd6>
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 8001bee:	2200      	movs	r2, #0
 8001bf0:	e006      	b.n	8001c00 <vModbusReadInputRegisters+0xe4>
				return Modbus_OK;
			}
#ifdef __DEBUG
			printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
			return Modbus_CRCERR;
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	e00e      	b.n	8001c14 <vModbusReadInputRegisters+0xf8>
					*response_frame = received_frame_buffer[i + 3];
 8001bf6:	1cd3      	adds	r3, r2, #3
 8001bf8:	5ceb      	ldrb	r3, [r5, r3]
 8001bfa:	f808 3b01 	strb.w	r3, [r8], #1
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 8001bfe:	3201      	adds	r2, #1
 8001c00:	78ab      	ldrb	r3, [r5, #2]
 8001c02:	3302      	adds	r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	dbf6      	blt.n	8001bf6 <vModbusReadInputRegisters+0xda>
				return Modbus_OK;
 8001c08:	2000      	movs	r0, #0
 8001c0a:	e003      	b.n	8001c14 <vModbusReadInputRegisters+0xf8>
#ifdef __DEBUG
		printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
		return Modbus_CRCERR;
	}else{
		HAL_UART_AbortReceive_IT(modbus -> ModbusSerialPort);
 8001c0c:	6830      	ldr	r0, [r6, #0]
 8001c0e:	f005 fe05 	bl	800781c <HAL_UART_AbortReceive_IT>
#ifdef __DEBUG
		printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
		return Modbus_TIMEOUT;
 8001c12:	2001      	movs	r0, #1
	}
#ifdef __DEBUG
	printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
	return Modbus_CRCERR;
}
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return Modbus_CRCERR;
 8001c1c:	2002      	movs	r0, #2
 8001c1e:	e7f9      	b.n	8001c14 <vModbusReadInputRegisters+0xf8>
			return Modbus_CRCERR;
 8001c20:	2002      	movs	r0, #2
 8001c22:	e7f7      	b.n	8001c14 <vModbusReadInputRegisters+0xf8>
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40020800 	.word	0x40020800

08001c2c <RB_CreateBuffer>:

RB_Status RB_CreateBuffer(RingBuffer *Buffer, uint8_t Size)
{
	//*Buffer = malloc(sizeof(RingBuffer) + (sizeof(uint8_t) * Size));

	if(Buffer == NULL)
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	b130      	cbz	r0, 8001c3e <RB_CreateBuffer+0x12>
	{
		return RB_NOTCREATED;
	}

	(Buffer)->Size = 32;
 8001c30:	2220      	movs	r2, #32
 8001c32:	7002      	strb	r2, [r0, #0]
	(Buffer)->Head = 0;
 8001c34:	2000      	movs	r0, #0
 8001c36:	7058      	strb	r0, [r3, #1]
	(Buffer)->Tail = 0;
 8001c38:	7098      	strb	r0, [r3, #2]
	(Buffer)->Elements = 0;
 8001c3a:	70d8      	strb	r0, [r3, #3]

	return RB_OK;
 8001c3c:	4770      	bx	lr
		return RB_NOTCREATED;
 8001c3e:	2002      	movs	r0, #2
}
 8001c40:	4770      	bx	lr

08001c42 <RB_WriteToBuffer>:

RB_Status RB_WriteToBuffer(RingBuffer *Buffer, uint8_t Data)
{
 8001c42:	b430      	push	{r4, r5}
	uint8_t TempHead;

	TempHead = (Buffer->Head + 1) % Buffer->Size;
 8001c44:	7843      	ldrb	r3, [r0, #1]
 8001c46:	1c5d      	adds	r5, r3, #1
 8001c48:	7804      	ldrb	r4, [r0, #0]
 8001c4a:	fb95 f2f4 	sdiv	r2, r5, r4
 8001c4e:	fb04 5212 	mls	r2, r4, r2, r5
 8001c52:	b2d2      	uxtb	r2, r2

	if( TempHead == Buffer->Tail) // No room for new data
 8001c54:	7885      	ldrb	r5, [r0, #2]
 8001c56:	4295      	cmp	r5, r2
 8001c58:	d00e      	beq.n	8001c78 <RB_WriteToBuffer+0x36>
	{
		return RB_NOFREESPACE;
	}
	else
	{
		Buffer->Buffer[Buffer->Head] = Data;
 8001c5a:	18c2      	adds	r2, r0, r3
 8001c5c:	7111      	strb	r1, [r2, #4]

		Buffer->Head++;
 8001c5e:	3301      	adds	r3, #1
 8001c60:	b2db      	uxtb	r3, r3
		Buffer->Head %= Buffer->Size;
 8001c62:	fbb3 f2f4 	udiv	r2, r3, r4
 8001c66:	fb04 3312 	mls	r3, r4, r2, r3
 8001c6a:	7043      	strb	r3, [r0, #1]

		Buffer->Elements++;
 8001c6c:	78c3      	ldrb	r3, [r0, #3]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	70c3      	strb	r3, [r0, #3]
	}

	return RB_OK;
 8001c72:	2000      	movs	r0, #0
}
 8001c74:	bc30      	pop	{r4, r5}
 8001c76:	4770      	bx	lr
		return RB_NOFREESPACE;
 8001c78:	2003      	movs	r0, #3
 8001c7a:	e7fb      	b.n	8001c74 <RB_WriteToBuffer+0x32>

08001c7c <RB_ReadFromBuffer>:

RB_Status RB_ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
	if( Buffer->Tail == Buffer->Head) // No data to read
 8001c7c:	7883      	ldrb	r3, [r0, #2]
 8001c7e:	7842      	ldrb	r2, [r0, #1]
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d010      	beq.n	8001ca6 <RB_ReadFromBuffer+0x2a>
	{
		return RB_NOELEMENTS;
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 8001c84:	4403      	add	r3, r0
 8001c86:	791b      	ldrb	r3, [r3, #4]
 8001c88:	700b      	strb	r3, [r1, #0]

		Buffer->Tail++;
 8001c8a:	7883      	ldrb	r3, [r0, #2]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	b2db      	uxtb	r3, r3
		Buffer->Tail %= Buffer->Size;
 8001c90:	7801      	ldrb	r1, [r0, #0]
 8001c92:	fbb3 f2f1 	udiv	r2, r3, r1
 8001c96:	fb01 3312 	mls	r3, r1, r2, r3
 8001c9a:	7083      	strb	r3, [r0, #2]

		Buffer->Elements--;
 8001c9c:	78c3      	ldrb	r3, [r0, #3]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	70c3      	strb	r3, [r0, #3]
	}
	return RB_OK;
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	4770      	bx	lr
		return RB_NOELEMENTS;
 8001ca6:	2004      	movs	r0, #4
}
 8001ca8:	4770      	bx	lr

08001caa <RB_ElementsAvailable>:

uint8_t RB_ElementsAvailable(RingBuffer *Buffer)
{
	return Buffer->Elements;
}
 8001caa:	78c0      	ldrb	r0, [r0, #3]
 8001cac:	4770      	bx	lr
	...

08001cb0 <FLASH_ChipSelect>:

extern osMutexId SPIMutexHandle;



void FLASH_ChipSelect (void){
 8001cb0:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 8001cb2:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <FLASH_ChipSelect+0x1c>)
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	f006 fa0f 	bl	80080dc <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <FLASH_ChipSelect+0x20>)
 8001cc6:	f002 ffa7 	bl	8004c18 <HAL_GPIO_WritePin>
}
 8001cca:	bd08      	pop	{r3, pc}
 8001ccc:	200030a4 	.word	0x200030a4
 8001cd0:	40020400 	.word	0x40020400

08001cd4 <FLASH_ChipDeselect>:

void FLASH_ChipDeselect (void){
 8001cd4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cdc:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <FLASH_ChipDeselect+0x20>)
 8001cde:	f002 ff9b 	bl	8004c18 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4803      	ldr	r0, [pc, #12]	; (8001cf8 <FLASH_ChipDeselect+0x24>)
 8001cea:	6800      	ldr	r0, [r0, #0]
 8001cec:	f006 f800 	bl	8007cf0 <xQueueGenericSend>
}
 8001cf0:	bd08      	pop	{r3, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40020400 	.word	0x40020400
 8001cf8:	200030a4 	.word	0x200030a4

08001cfc <DataLogTask>:

void DataLogTask(void const * argument)
{
 8001cfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DataLog */
	W25qxx_Init();
 8001cfe:	f7ff fe4f 	bl	80019a0 <W25qxx_Init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d02:	2001      	movs	r0, #1
 8001d04:	f005 fe09 	bl	800791a <osDelay>
 8001d08:	e7fb      	b.n	8001d02 <DataLogTask+0x6>
	...

08001d0c <Nextion1_DataRcv>:
		}*/
	}
  /* USER CODE END UpdateLCD */
}

void Nextion1_DataRcv (void){
 8001d0c:	b410      	push	{r4}
	uint8_t stopbyte = 0;
 8001d0e:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 8001d10:	e048      	b.n	8001da4 <Nextion1_DataRcv+0x98>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 8001d12:	3301      	adds	r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	e001      	b.n	8001d1c <Nextion1_DataRcv+0x10>
 8001d18:	3301      	adds	r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	1d51      	adds	r1, r2, #5
 8001d20:	428b      	cmp	r3, r1
 8001d22:	da0a      	bge.n	8001d3a <Nextion1_DataRcv+0x2e>
					if(nextion_big_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 8001d24:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 8001d28:	492d      	ldr	r1, [pc, #180]	; (8001de0 <Nextion1_DataRcv+0xd4>)
 8001d2a:	4401      	add	r1, r0
 8001d2c:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8001d30:	29ff      	cmp	r1, #255	; 0xff
 8001d32:	d1f1      	bne.n	8001d18 <Nextion1_DataRcv+0xc>
						stopbyte ++;
 8001d34:	3401      	adds	r4, #1
 8001d36:	b2e4      	uxtb	r4, r4
 8001d38:	e7ee      	b.n	8001d18 <Nextion1_DataRcv+0xc>
					}
				}
				if(stopbyte == 3){
 8001d3a:	2c03      	cmp	r4, #3
 8001d3c:	d006      	beq.n	8001d4c <Nextion1_DataRcv+0x40>
							y = 4;
							break;
					}
					nextion_big_comm.UartBufferHead += y;
				}else{
					nextion_big_comm.UartBufferHead ++;
 8001d3e:	4a28      	ldr	r2, [pc, #160]	; (8001de0 <Nextion1_DataRcv+0xd4>)
 8001d40:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8001d44:	3301      	adds	r3, #1
 8001d46:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 8001d4a:	e024      	b.n	8001d96 <Nextion1_DataRcv+0x8a>
					switch(nextion_big_comm.UART_Buffer[start]){
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <Nextion1_DataRcv+0xd4>)
 8001d4e:	4413      	add	r3, r2
 8001d50:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d54:	2b1a      	cmp	r3, #26
 8001d56:	d011      	beq.n	8001d7c <Nextion1_DataRcv+0x70>
 8001d58:	2b66      	cmp	r3, #102	; 0x66
 8001d5a:	d116      	bne.n	8001d8a <Nextion1_DataRcv+0x7e>
							nextion_big.display = nextion_big_comm.UART_Buffer[start + 1];
 8001d5c:	3001      	adds	r0, #1
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <Nextion1_DataRcv+0xd4>)
 8001d60:	4418      	add	r0, r3
 8001d62:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8001d66:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <Nextion1_DataRcv+0xd8>)
 8001d68:	701a      	strb	r2, [r3, #0]
							y = 5;
 8001d6a:	2305      	movs	r3, #5
					nextion_big_comm.UartBufferHead += y;
 8001d6c:	4a1c      	ldr	r2, [pc, #112]	; (8001de0 <Nextion1_DataRcv+0xd4>)
 8001d6e:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 8001d72:	440b      	add	r3, r1
 8001d74:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 8001d78:	2400      	movs	r4, #0
 8001d7a:	e00c      	b.n	8001d96 <Nextion1_DataRcv+0x8a>
							command_correct[current_command] = 1;
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <Nextion1_DataRcv+0xdc>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4a1a      	ldr	r2, [pc, #104]	; (8001dec <Nextion1_DataRcv+0xe0>)
 8001d82:	2101      	movs	r1, #1
 8001d84:	54d1      	strb	r1, [r2, r3]
							y = 4;
 8001d86:	2304      	movs	r3, #4
							break;
 8001d88:	e7f0      	b.n	8001d6c <Nextion1_DataRcv+0x60>
							y = 4;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	e7ee      	b.n	8001d6c <Nextion1_DataRcv+0x60>
				}
			}

		}else{
			//if(nextion_big_comm.UART_Buffer[start] == 0 || nextion_big_comm.UART_Buffer[start] == 255){
				nextion_big_comm.UartBufferHead++;
 8001d8e:	3201      	adds	r2, #1
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <Nextion1_DataRcv+0xd4>)
 8001d92:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_big_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <Nextion1_DataRcv+0xd4>)
 8001d98:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8001d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da0:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <Nextion1_DataRcv+0xd4>)
 8001da6:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 8001daa:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 8001dae:	4291      	cmp	r1, r2
 8001db0:	d013      	beq.n	8001dda <Nextion1_DataRcv+0xce>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 8001db2:	b2d3      	uxtb	r3, r2
 8001db4:	1ac9      	subs	r1, r1, r3
 8001db6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 8001dba:	2903      	cmp	r1, #3
 8001dbc:	d9e7      	bls.n	8001d8e <Nextion1_DataRcv+0x82>
			if(len > 9){
 8001dbe:	2909      	cmp	r1, #9
 8001dc0:	d9a7      	bls.n	8001d12 <Nextion1_DataRcv+0x6>
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
 8001dc2:	1d10      	adds	r0, r2, #4
 8001dc4:	4906      	ldr	r1, [pc, #24]	; (8001de0 <Nextion1_DataRcv+0xd4>)
 8001dc6:	4401      	add	r1, r0
 8001dc8:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8001dcc:	290a      	cmp	r1, #10
 8001dce:	d1a0      	bne.n	8001d12 <Nextion1_DataRcv+0x6>
					nextion_big_comm.UartBufferHead += 10;
 8001dd0:	320a      	adds	r2, #10
 8001dd2:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <Nextion1_DataRcv+0xd4>)
 8001dd4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8001dd8:	e7dd      	b.n	8001d96 <Nextion1_DataRcv+0x8a>
	}
}
 8001dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	20002ab4 	.word	0x20002ab4
 8001de4:	20002a8c 	.word	0x20002a8c
 8001de8:	20002b64 	.word	0x20002b64
 8001dec:	20002a90 	.word	0x20002a90

08001df0 <Nextion2_DataRcv>:

void Nextion2_DataRcv (void){
 8001df0:	b410      	push	{r4}
	uint8_t stopbyte = 0;
 8001df2:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 8001df4:	e05e      	b.n	8001eb4 <Nextion2_DataRcv+0xc4>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 8001df6:	3301      	adds	r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	e001      	b.n	8001e00 <Nextion2_DataRcv+0x10>
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	4610      	mov	r0, r2
 8001e02:	1d51      	adds	r1, r2, #5
 8001e04:	428b      	cmp	r3, r1
 8001e06:	da0a      	bge.n	8001e1e <Nextion2_DataRcv+0x2e>
					if(nextion_small_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 8001e08:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 8001e0c:	4938      	ldr	r1, [pc, #224]	; (8001ef0 <Nextion2_DataRcv+0x100>)
 8001e0e:	4401      	add	r1, r0
 8001e10:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8001e14:	29ff      	cmp	r1, #255	; 0xff
 8001e16:	d1f1      	bne.n	8001dfc <Nextion2_DataRcv+0xc>
						stopbyte ++;
 8001e18:	3401      	adds	r4, #1
 8001e1a:	b2e4      	uxtb	r4, r4
 8001e1c:	e7ee      	b.n	8001dfc <Nextion2_DataRcv+0xc>
					}
				}
				if(stopbyte == 3){
 8001e1e:	2c03      	cmp	r4, #3
 8001e20:	d006      	beq.n	8001e30 <Nextion2_DataRcv+0x40>
							y = 4;
							break;
					}
					nextion_small_comm.UartBufferHead += y;
				}else{
					nextion_small_comm.UartBufferHead ++;
 8001e22:	4a33      	ldr	r2, [pc, #204]	; (8001ef0 <Nextion2_DataRcv+0x100>)
 8001e24:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 8001e2e:	e03a      	b.n	8001ea6 <Nextion2_DataRcv+0xb6>
					switch(nextion_small_comm.UART_Buffer[start]){
 8001e30:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <Nextion2_DataRcv+0x100>)
 8001e32:	4413      	add	r3, r2
 8001e34:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001e38:	2b86      	cmp	r3, #134	; 0x86
 8001e3a:	d024      	beq.n	8001e86 <Nextion2_DataRcv+0x96>
 8001e3c:	d813      	bhi.n	8001e66 <Nextion2_DataRcv+0x76>
 8001e3e:	2b1a      	cmp	r3, #26
 8001e40:	d01a      	beq.n	8001e78 <Nextion2_DataRcv+0x88>
 8001e42:	2b66      	cmp	r3, #102	; 0x66
 8001e44:	d129      	bne.n	8001e9a <Nextion2_DataRcv+0xaa>
							nextion_small.display = nextion_small_comm.UART_Buffer[start + 1];
 8001e46:	3001      	adds	r0, #1
 8001e48:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <Nextion2_DataRcv+0x100>)
 8001e4a:	4418      	add	r0, r3
 8001e4c:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <Nextion2_DataRcv+0x104>)
 8001e52:	701a      	strb	r2, [r3, #0]
							y = 5;
 8001e54:	2305      	movs	r3, #5
					nextion_small_comm.UartBufferHead += y;
 8001e56:	4a26      	ldr	r2, [pc, #152]	; (8001ef0 <Nextion2_DataRcv+0x100>)
 8001e58:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 8001e62:	2400      	movs	r4, #0
 8001e64:	e01f      	b.n	8001ea6 <Nextion2_DataRcv+0xb6>
					switch(nextion_small_comm.UART_Buffer[start]){
 8001e66:	2b87      	cmp	r3, #135	; 0x87
 8001e68:	d012      	beq.n	8001e90 <Nextion2_DataRcv+0xa0>
 8001e6a:	2b88      	cmp	r3, #136	; 0x88
 8001e6c:	d115      	bne.n	8001e9a <Nextion2_DataRcv+0xaa>
							nextion_small.ready = 1;
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <Nextion2_DataRcv+0x104>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	70da      	strb	r2, [r3, #3]
							y = 4;
 8001e74:	2304      	movs	r3, #4
							break;
 8001e76:	e7ee      	b.n	8001e56 <Nextion2_DataRcv+0x66>
							command_correct[current_command] = 1;
 8001e78:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <Nextion2_DataRcv+0x108>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <Nextion2_DataRcv+0x10c>)
 8001e7e:	2101      	movs	r1, #1
 8001e80:	54d1      	strb	r1, [r2, r3]
							y = 4;
 8001e82:	2304      	movs	r3, #4
							break;
 8001e84:	e7e7      	b.n	8001e56 <Nextion2_DataRcv+0x66>
							nextion_small.sleep = 1;
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <Nextion2_DataRcv+0x104>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	709a      	strb	r2, [r3, #2]
							y = 4;
 8001e8c:	2304      	movs	r3, #4
							break;
 8001e8e:	e7e2      	b.n	8001e56 <Nextion2_DataRcv+0x66>
							nextion_small.sleep = 0;
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <Nextion2_DataRcv+0x104>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	709a      	strb	r2, [r3, #2]
							y = 4;
 8001e96:	2304      	movs	r3, #4
							break;
 8001e98:	e7dd      	b.n	8001e56 <Nextion2_DataRcv+0x66>
							y = 4;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	e7db      	b.n	8001e56 <Nextion2_DataRcv+0x66>
				}
			}

		}else{
			//if(nextion_small_comm.UART_Buffer[start] == 0 || nextion_small_comm.UART_Buffer[start] == 255){
				nextion_small_comm.UartBufferHead++;
 8001e9e:	3201      	adds	r2, #1
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <Nextion2_DataRcv+0x100>)
 8001ea2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_small_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <Nextion2_DataRcv+0x100>)
 8001ea8:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8001eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eb0:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <Nextion2_DataRcv+0x100>)
 8001eb6:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 8001eba:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 8001ebe:	4291      	cmp	r1, r2
 8001ec0:	d013      	beq.n	8001eea <Nextion2_DataRcv+0xfa>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 8001ec2:	b2d3      	uxtb	r3, r2
 8001ec4:	1ac9      	subs	r1, r1, r3
 8001ec6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 8001eca:	2903      	cmp	r1, #3
 8001ecc:	d9e7      	bls.n	8001e9e <Nextion2_DataRcv+0xae>
			if(len > 9){
 8001ece:	2909      	cmp	r1, #9
 8001ed0:	d991      	bls.n	8001df6 <Nextion2_DataRcv+0x6>
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
 8001ed2:	1d10      	adds	r0, r2, #4
 8001ed4:	4906      	ldr	r1, [pc, #24]	; (8001ef0 <Nextion2_DataRcv+0x100>)
 8001ed6:	4401      	add	r1, r0
 8001ed8:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8001edc:	290a      	cmp	r1, #10
 8001ede:	d18a      	bne.n	8001df6 <Nextion2_DataRcv+0x6>
					nextion_small_comm.UartBufferHead += 10;
 8001ee0:	320a      	adds	r2, #10
 8001ee2:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <Nextion2_DataRcv+0x100>)
 8001ee4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8001ee8:	e7dd      	b.n	8001ea6 <Nextion2_DataRcv+0xb6>
	}
}
 8001eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	20002b68 	.word	0x20002b68
 8001ef4:	20002c18 	.word	0x20002c18
 8001ef8:	20002b64 	.word	0x20002b64
 8001efc:	20002a90 	.word	0x20002a90

08001f00 <nextion_SendData>:
	if(cmd < NEX_COMMANDS_COUNT && cmd > -1){
 8001f00:	2921      	cmp	r1, #33	; 0x21
 8001f02:	d84a      	bhi.n	8001f9a <nextion_SendData+0x9a>
static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3){
 8001f04:	b570      	push	{r4, r5, r6, lr}
 8001f06:	b08c      	sub	sp, #48	; 0x30
 8001f08:	4606      	mov	r6, r0
		if(cmd == NEX_WAKE || cmd == NEX_SENDME || cmd == NEX_SETTINGS_SAVED || cmd == NEX_SETTINGS_NOT_SAVED
 8001f0a:	2901      	cmp	r1, #1
 8001f0c:	d919      	bls.n	8001f42 <nextion_SendData+0x42>
 8001f0e:	2911      	cmp	r1, #17
 8001f10:	d017      	beq.n	8001f42 <nextion_SendData+0x42>
 8001f12:	2912      	cmp	r1, #18
 8001f14:	d015      	beq.n	8001f42 <nextion_SendData+0x42>
			|| cmd == NEX_SETTINGS_LOCK || cmd == NEX_SETTINGS_UNLOCK){
 8001f16:	2921      	cmp	r1, #33	; 0x21
 8001f18:	d013      	beq.n	8001f42 <nextion_SendData+0x42>
 8001f1a:	2920      	cmp	r1, #32
 8001f1c:	d011      	beq.n	8001f42 <nextion_SendData+0x42>
			cmd == NEX_PHASE_CURRENT ||
 8001f1e:	f1a1 0018 	sub.w	r0, r1, #24
 8001f22:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_VOLTAGE ||
 8001f24:	2802      	cmp	r0, #2
 8001f26:	d916      	bls.n	8001f56 <nextion_SendData+0x56>
			cmd == NEX_CWU_TEMP || cmd == NEX_CO_TEMP){
 8001f28:	f1a1 001b 	sub.w	r0, r1, #27
 8001f2c:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_PRG_BAR ||
 8001f2e:	2804      	cmp	r0, #4
 8001f30:	d81b      	bhi.n	8001f6a <nextion_SendData+0x6a>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2);
 8001f32:	481a      	ldr	r0, [pc, #104]	; (8001f9c <nextion_SendData+0x9c>)
 8001f34:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8001f38:	a802      	add	r0, sp, #8
 8001f3a:	f007 fe3b 	bl	8009bb4 <siprintf>
 8001f3e:	b2c2      	uxtb	r2, r0
 8001f40:	e006      	b.n	8001f50 <nextion_SendData+0x50>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <nextion_SendData+0x9c>)
 8001f44:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001f48:	a802      	add	r0, sp, #8
 8001f4a:	f007 fe33 	bl	8009bb4 <siprintf>
 8001f4e:	b2c2      	uxtb	r2, r0
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 8001f50:	4615      	mov	r5, r2
 8001f52:	4613      	mov	r3, r2
 8001f54:	e017      	b.n	8001f86 <nextion_SendData+0x86>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
 8001f56:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001f58:	9000      	str	r0, [sp, #0]
 8001f5a:	4810      	ldr	r0, [pc, #64]	; (8001f9c <nextion_SendData+0x9c>)
 8001f5c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8001f60:	a802      	add	r0, sp, #8
 8001f62:	f007 fe27 	bl	8009bb4 <siprintf>
 8001f66:	b2c2      	uxtb	r2, r0
 8001f68:	e7f2      	b.n	8001f50 <nextion_SendData+0x50>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <nextion_SendData+0x9c>)
 8001f6c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001f70:	a802      	add	r0, sp, #8
 8001f72:	f007 fe1f 	bl	8009bb4 <siprintf>
 8001f76:	b2c2      	uxtb	r2, r0
 8001f78:	e7ea      	b.n	8001f50 <nextion_SendData+0x50>
			buffor_to_send[i] = 0xFF;
 8001f7a:	a90c      	add	r1, sp, #48	; 0x30
 8001f7c:	4419      	add	r1, r3
 8001f7e:	24ff      	movs	r4, #255	; 0xff
 8001f80:	f801 4c28 	strb.w	r4, [r1, #-40]
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 8001f84:	3301      	adds	r3, #1
 8001f86:	1ce9      	adds	r1, r5, #3
 8001f88:	4299      	cmp	r1, r3
 8001f8a:	dcf6      	bgt.n	8001f7a <nextion_SendData+0x7a>
		HAL_UART_Transmit(uart, (uint8_t*)buffor_to_send, buffor_to_send_size, 20);
 8001f8c:	2314      	movs	r3, #20
 8001f8e:	a902      	add	r1, sp, #8
 8001f90:	4630      	mov	r0, r6
 8001f92:	f005 f9e7 	bl	8007364 <HAL_UART_Transmit>
}
 8001f96:	b00c      	add	sp, #48	; 0x30
 8001f98:	bd70      	pop	{r4, r5, r6, pc}
 8001f9a:	4770      	bx	lr
 8001f9c:	0800a490 	.word	0x0800a490

08001fa0 <DisplayTask>:
{
 8001fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fa4:	b097      	sub	sp, #92	; 0x5c
	nextion_small.display = 30;
 8001fa6:	4aa6      	ldr	r2, [pc, #664]	; (8002240 <DisplayTask+0x2a0>)
 8001fa8:	231e      	movs	r3, #30
 8001faa:	7013      	strb	r3, [r2, #0]
	nextion_small.last_display = 30;
 8001fac:	7053      	strb	r3, [r2, #1]
	nextion_big.display = 30;
 8001fae:	4fa5      	ldr	r7, [pc, #660]	; (8002244 <DisplayTask+0x2a4>)
 8001fb0:	703b      	strb	r3, [r7, #0]
	nextion_big.last_display = 30;
 8001fb2:	707b      	strb	r3, [r7, #1]
	UARTDMA_Init(&nextion_small_comm, NEXTION_SMALL_UART);
 8001fb4:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8002264 <DisplayTask+0x2c4>
 8001fb8:	4ca3      	ldr	r4, [pc, #652]	; (8002248 <DisplayTask+0x2a8>)
 8001fba:	4649      	mov	r1, r9
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f000 fd68 	bl	8002a92 <UARTDMA_Init>
	UARTDMA_Init(&nextion_big_comm, NEXTION_BIG_UART);
 8001fc2:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8002260 <DisplayTask+0x2c0>
 8001fc6:	4da1      	ldr	r5, [pc, #644]	; (800224c <DisplayTask+0x2ac>)
 8001fc8:	4641      	mov	r1, r8
 8001fca:	4628      	mov	r0, r5
 8001fcc:	f000 fd61 	bl	8002a92 <UARTDMA_Init>
	nextion_big_comm.callback = Nextion1_DataRcv;
 8001fd0:	4b9f      	ldr	r3, [pc, #636]	; (8002250 <DisplayTask+0x2b0>)
 8001fd2:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac
	nextion_small_comm.callback = Nextion2_DataRcv;
 8001fd6:	4b9f      	ldr	r3, [pc, #636]	; (8002254 <DisplayTask+0x2b4>)
 8001fd8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	Config_GetConfig(&configuration);
 8001fdc:	a802      	add	r0, sp, #8
 8001fde:	f7fe ff4f 	bl	8000e80 <Config_GetConfig>
	vTaskDelay(1000);
 8001fe2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fe6:	f006 fd37 	bl	8008a58 <vTaskDelay>
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8001fea:	4c9b      	ldr	r4, [pc, #620]	; (8002258 <DisplayTask+0x2b8>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	a911      	add	r1, sp, #68	; 0x44
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f004 f908 	bl	8006206 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	a910      	add	r1, sp, #64	; 0x40
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f004 f92e 	bl	800625c <HAL_RTC_GetDate>
	current_command = NEX_WAKE;
 8002000:	4e96      	ldr	r6, [pc, #600]	; (800225c <DisplayTask+0x2bc>)
 8002002:	2400      	movs	r4, #0
 8002004:	7034      	strb	r4, [r6, #0]
	nextion_SendData(NEXTION_SMALL_UART, NEX_WAKE, 0, 0, 0);
 8002006:	9400      	str	r4, [sp, #0]
 8002008:	4623      	mov	r3, r4
 800200a:	4622      	mov	r2, r4
 800200c:	4621      	mov	r1, r4
 800200e:	4648      	mov	r0, r9
 8002010:	f7ff ff76 	bl	8001f00 <nextion_SendData>
	vTaskDelay(1);
 8002014:	2001      	movs	r0, #1
 8002016:	f006 fd1f 	bl	8008a58 <vTaskDelay>
	current_command = NEX_SENDME;
 800201a:	2501      	movs	r5, #1
 800201c:	7035      	strb	r5, [r6, #0]
	nextion_SendData(NEXTION_SMALL_UART, NEX_SENDME, 0, 0, 0);
 800201e:	9400      	str	r4, [sp, #0]
 8002020:	4623      	mov	r3, r4
 8002022:	4622      	mov	r2, r4
 8002024:	4629      	mov	r1, r5
 8002026:	4648      	mov	r0, r9
 8002028:	f7ff ff6a 	bl	8001f00 <nextion_SendData>
	vTaskDelay(1);
 800202c:	4628      	mov	r0, r5
 800202e:	f006 fd13 	bl	8008a58 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002032:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002036:	4628      	mov	r0, r5
 8002038:	f006 ff92 	bl	8008f60 <ulTaskNotifyTake>
	current_command = NEX_WAKE;
 800203c:	7034      	strb	r4, [r6, #0]
	nextion_SendData(NEXTION_BIG_UART, NEX_WAKE, 0, 0, 0);
 800203e:	9400      	str	r4, [sp, #0]
 8002040:	4623      	mov	r3, r4
 8002042:	4622      	mov	r2, r4
 8002044:	4621      	mov	r1, r4
 8002046:	4640      	mov	r0, r8
 8002048:	f7ff ff5a 	bl	8001f00 <nextion_SendData>
	vTaskDelay(1);
 800204c:	4628      	mov	r0, r5
 800204e:	f006 fd03 	bl	8008a58 <vTaskDelay>
	current_command = NEX_SENDME;
 8002052:	7035      	strb	r5, [r6, #0]
	nextion_SendData(NEXTION_BIG_UART, NEX_SENDME, 0, 0, 0);
 8002054:	9400      	str	r4, [sp, #0]
 8002056:	4623      	mov	r3, r4
 8002058:	4622      	mov	r2, r4
 800205a:	4629      	mov	r1, r5
 800205c:	4640      	mov	r0, r8
 800205e:	f7ff ff4f 	bl	8001f00 <nextion_SendData>
	vTaskDelay(1);
 8002062:	4628      	mov	r0, r5
 8002064:	f006 fcf8 	bl	8008a58 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002068:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800206c:	4628      	mov	r0, r5
 800206e:	f006 ff77 	bl	8008f60 <ulTaskNotifyTake>
	if(nextion_big.display != 30 || nextion_small.display != 30){
 8002072:	783b      	ldrb	r3, [r7, #0]
 8002074:	2b1e      	cmp	r3, #30
 8002076:	d00b      	beq.n	8002090 <DisplayTask+0xf0>
		if(nextion_big.display != 30){
 8002078:	2b1e      	cmp	r3, #30
 800207a:	d10e      	bne.n	800209a <DisplayTask+0xfa>
		if(nextion_small.display != 30){
 800207c:	4b70      	ldr	r3, [pc, #448]	; (8002240 <DisplayTask+0x2a0>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b1e      	cmp	r3, #30
 8002082:	d146      	bne.n	8002112 <DisplayTask+0x172>
		if(nextion_big.display != 30){
 8002084:	4b6f      	ldr	r3, [pc, #444]	; (8002244 <DisplayTask+0x2a4>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b1e      	cmp	r3, #30
 800208a:	f040 808d 	bne.w	80021a8 <DisplayTask+0x208>
 800208e:	e7fe      	b.n	800208e <DisplayTask+0xee>
	if(nextion_big.display != 30 || nextion_small.display != 30){
 8002090:	4a6b      	ldr	r2, [pc, #428]	; (8002240 <DisplayTask+0x2a0>)
 8002092:	7812      	ldrb	r2, [r2, #0]
 8002094:	2a1e      	cmp	r2, #30
 8002096:	d1ef      	bne.n	8002078 <DisplayTask+0xd8>
 8002098:	e7f9      	b.n	800208e <DisplayTask+0xee>
			current_command = NEX_YEAR;
 800209a:	4e70      	ldr	r6, [pc, #448]	; (800225c <DisplayTask+0x2bc>)
 800209c:	2102      	movs	r1, #2
 800209e:	7031      	strb	r1, [r6, #0]
			nextion_SendData(NEXTION_BIG_UART, NEX_YEAR, currDate.Year + 2000, 0, 0);
 80020a0:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 80020a4:	4d6e      	ldr	r5, [pc, #440]	; (8002260 <DisplayTask+0x2c0>)
 80020a6:	2400      	movs	r4, #0
 80020a8:	9400      	str	r4, [sp, #0]
 80020aa:	4623      	mov	r3, r4
 80020ac:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80020b0:	4628      	mov	r0, r5
 80020b2:	f7ff ff25 	bl	8001f00 <nextion_SendData>
			current_command = NEX_MONTH;
 80020b6:	2103      	movs	r1, #3
 80020b8:	7031      	strb	r1, [r6, #0]
			nextion_SendData(NEXTION_BIG_UART, NEX_MONTH, currDate.Month, 0, 0);
 80020ba:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80020be:	9400      	str	r4, [sp, #0]
 80020c0:	4623      	mov	r3, r4
 80020c2:	4628      	mov	r0, r5
 80020c4:	f7ff ff1c 	bl	8001f00 <nextion_SendData>
			current_command = NEX_DAY;
 80020c8:	2104      	movs	r1, #4
 80020ca:	7031      	strb	r1, [r6, #0]
			nextion_SendData(NEXTION_BIG_UART, NEX_DAY, currDate.Date, 0, 0);
 80020cc:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80020d0:	9400      	str	r4, [sp, #0]
 80020d2:	4623      	mov	r3, r4
 80020d4:	4628      	mov	r0, r5
 80020d6:	f7ff ff13 	bl	8001f00 <nextion_SendData>
			current_command = NEX_HOUR;
 80020da:	2105      	movs	r1, #5
 80020dc:	7031      	strb	r1, [r6, #0]
			nextion_SendData(NEXTION_BIG_UART, NEX_HOUR, currTime.Hours, 0, 0);
 80020de:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80020e2:	9400      	str	r4, [sp, #0]
 80020e4:	4623      	mov	r3, r4
 80020e6:	4628      	mov	r0, r5
 80020e8:	f7ff ff0a 	bl	8001f00 <nextion_SendData>
			current_command = NEX_MINUTE;
 80020ec:	2106      	movs	r1, #6
 80020ee:	7031      	strb	r1, [r6, #0]
			nextion_SendData(NEXTION_BIG_UART, NEX_MINUTE, currTime.Minutes, 0, 0);
 80020f0:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 80020f4:	9400      	str	r4, [sp, #0]
 80020f6:	4623      	mov	r3, r4
 80020f8:	4628      	mov	r0, r5
 80020fa:	f7ff ff01 	bl	8001f00 <nextion_SendData>
			current_command = NEX_SECONDS;
 80020fe:	2107      	movs	r1, #7
 8002100:	7031      	strb	r1, [r6, #0]
			nextion_SendData(NEXTION_BIG_UART, NEX_SECONDS, currTime.Seconds, 0, 0);
 8002102:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 8002106:	9400      	str	r4, [sp, #0]
 8002108:	4623      	mov	r3, r4
 800210a:	4628      	mov	r0, r5
 800210c:	f7ff fef8 	bl	8001f00 <nextion_SendData>
 8002110:	e7b4      	b.n	800207c <DisplayTask+0xdc>
			nextion_SendData(NEXTION_SMALL_UART, NEX_CO_HIGH_TEMP, configuration.RegulationConfig.CO_hi_temp, 0, 0);
 8002112:	f99d 2018 	ldrsb.w	r2, [sp, #24]
 8002116:	4d53      	ldr	r5, [pc, #332]	; (8002264 <DisplayTask+0x2c4>)
 8002118:	2400      	movs	r4, #0
 800211a:	9400      	str	r4, [sp, #0]
 800211c:	4623      	mov	r3, r4
 800211e:	2108      	movs	r1, #8
 8002120:	4628      	mov	r0, r5
 8002122:	f7ff feed 	bl	8001f00 <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_CO_LOW_TEMP, configuration.RegulationConfig.CO_lo_temp, 0, 0);
 8002126:	f99d 2019 	ldrsb.w	r2, [sp, #25]
 800212a:	9400      	str	r4, [sp, #0]
 800212c:	4623      	mov	r3, r4
 800212e:	2109      	movs	r1, #9
 8002130:	4628      	mov	r0, r5
 8002132:	f7ff fee5 	bl	8001f00 <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_CO_HEATER_POWER, (int32_t)configuration.RegulationConfig.CO_heater_power, 0, 0);
 8002136:	9400      	str	r4, [sp, #0]
 8002138:	4623      	mov	r3, r4
 800213a:	eddd 7a03 	vldr	s15, [sp, #12]
 800213e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002142:	ee17 2a90 	vmov	r2, s15
 8002146:	210a      	movs	r1, #10
 8002148:	4628      	mov	r0, r5
 800214a:	f7ff fed9 	bl	8001f00 <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_CWU_HIGH_TEMP, configuration.RegulationConfig.CWU_hi_temp, 0, 0);
 800214e:	f99d 201a 	ldrsb.w	r2, [sp, #26]
 8002152:	9400      	str	r4, [sp, #0]
 8002154:	4623      	mov	r3, r4
 8002156:	210b      	movs	r1, #11
 8002158:	4628      	mov	r0, r5
 800215a:	f7ff fed1 	bl	8001f00 <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_CWU_LOW_TEMP, configuration.RegulationConfig.CWU_lo_temp, 0, 0);
 800215e:	f99d 201b 	ldrsb.w	r2, [sp, #27]
 8002162:	9400      	str	r4, [sp, #0]
 8002164:	4623      	mov	r3, r4
 8002166:	210c      	movs	r1, #12
 8002168:	4628      	mov	r0, r5
 800216a:	f7ff fec9 	bl	8001f00 <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_CWU_HEATER_POWER, (int32_t)configuration.RegulationConfig.CWU_heater_power, 0, 0);
 800216e:	9400      	str	r4, [sp, #0]
 8002170:	4623      	mov	r3, r4
 8002172:	eddd 7a02 	vldr	s15, [sp, #8]
 8002176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800217a:	ee17 2a90 	vmov	r2, s15
 800217e:	210d      	movs	r1, #13
 8002180:	4628      	mov	r0, r5
 8002182:	f7ff febd 	bl	8001f00 <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_ACC_COEFF, configuration.RegulationConfig.acumulated_power_coeff, 0, 0);
 8002186:	f99d 2016 	ldrsb.w	r2, [sp, #22]
 800218a:	9400      	str	r4, [sp, #0]
 800218c:	4623      	mov	r3, r4
 800218e:	210e      	movs	r1, #14
 8002190:	4628      	mov	r0, r5
 8002192:	f7ff feb5 	bl	8001f00 <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_HEATER_COEFF, configuration.RegulationConfig.heater_power_coeff, 0, 0);
 8002196:	f99d 2017 	ldrsb.w	r2, [sp, #23]
 800219a:	9400      	str	r4, [sp, #0]
 800219c:	4623      	mov	r3, r4
 800219e:	210f      	movs	r1, #15
 80021a0:	4628      	mov	r0, r5
 80021a2:	f7ff fead 	bl	8001f00 <nextion_SendData>
 80021a6:	e76d      	b.n	8002084 <DisplayTask+0xe4>
			nextion_SendData(NEXTION_BIG_UART, NEX_CO_HIGH_TEMP, configuration.RegulationConfig.CO_hi_temp, 0, 0);
 80021a8:	f99d 2018 	ldrsb.w	r2, [sp, #24]
 80021ac:	4d2c      	ldr	r5, [pc, #176]	; (8002260 <DisplayTask+0x2c0>)
 80021ae:	2400      	movs	r4, #0
 80021b0:	9400      	str	r4, [sp, #0]
 80021b2:	4623      	mov	r3, r4
 80021b4:	2108      	movs	r1, #8
 80021b6:	4628      	mov	r0, r5
 80021b8:	f7ff fea2 	bl	8001f00 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_CO_LOW_TEMP, configuration.RegulationConfig.CO_lo_temp, 0, 0);
 80021bc:	f99d 2019 	ldrsb.w	r2, [sp, #25]
 80021c0:	9400      	str	r4, [sp, #0]
 80021c2:	4623      	mov	r3, r4
 80021c4:	2109      	movs	r1, #9
 80021c6:	4628      	mov	r0, r5
 80021c8:	f7ff fe9a 	bl	8001f00 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_CO_HEATER_POWER, (int32_t)configuration.RegulationConfig.CO_heater_power, 0, 0);
 80021cc:	9400      	str	r4, [sp, #0]
 80021ce:	4623      	mov	r3, r4
 80021d0:	eddd 7a03 	vldr	s15, [sp, #12]
 80021d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021d8:	ee17 2a90 	vmov	r2, s15
 80021dc:	210a      	movs	r1, #10
 80021de:	4628      	mov	r0, r5
 80021e0:	f7ff fe8e 	bl	8001f00 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_CWU_HIGH_TEMP, configuration.RegulationConfig.CWU_hi_temp, 0, 0);
 80021e4:	f99d 201a 	ldrsb.w	r2, [sp, #26]
 80021e8:	9400      	str	r4, [sp, #0]
 80021ea:	4623      	mov	r3, r4
 80021ec:	210b      	movs	r1, #11
 80021ee:	4628      	mov	r0, r5
 80021f0:	f7ff fe86 	bl	8001f00 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_CWU_LOW_TEMP, configuration.RegulationConfig.CWU_lo_temp, 0, 0);
 80021f4:	f99d 201b 	ldrsb.w	r2, [sp, #27]
 80021f8:	9400      	str	r4, [sp, #0]
 80021fa:	4623      	mov	r3, r4
 80021fc:	210c      	movs	r1, #12
 80021fe:	4628      	mov	r0, r5
 8002200:	f7ff fe7e 	bl	8001f00 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_CWU_HEATER_POWER, (int32_t)configuration.RegulationConfig.CWU_heater_power, 0, 0);
 8002204:	9400      	str	r4, [sp, #0]
 8002206:	4623      	mov	r3, r4
 8002208:	eddd 7a02 	vldr	s15, [sp, #8]
 800220c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002210:	ee17 2a90 	vmov	r2, s15
 8002214:	210d      	movs	r1, #13
 8002216:	4628      	mov	r0, r5
 8002218:	f7ff fe72 	bl	8001f00 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_ACC_COEFF, configuration.RegulationConfig.acumulated_power_coeff, 0, 0);
 800221c:	f99d 2016 	ldrsb.w	r2, [sp, #22]
 8002220:	9400      	str	r4, [sp, #0]
 8002222:	4623      	mov	r3, r4
 8002224:	210e      	movs	r1, #14
 8002226:	4628      	mov	r0, r5
 8002228:	f7ff fe6a 	bl	8001f00 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_HEATER_COEFF, configuration.RegulationConfig.heater_power_coeff, 0, 0);
 800222c:	f99d 2017 	ldrsb.w	r2, [sp, #23]
 8002230:	9400      	str	r4, [sp, #0]
 8002232:	4623      	mov	r3, r4
 8002234:	210f      	movs	r1, #15
 8002236:	4628      	mov	r0, r5
 8002238:	f7ff fe62 	bl	8001f00 <nextion_SendData>
 800223c:	e727      	b.n	800208e <DisplayTask+0xee>
 800223e:	bf00      	nop
 8002240:	20002c18 	.word	0x20002c18
 8002244:	20002a8c 	.word	0x20002a8c
 8002248:	20002b68 	.word	0x20002b68
 800224c:	20002ab4 	.word	0x20002ab4
 8002250:	08001d0d 	.word	0x08001d0d
 8002254:	08001df1 	.word	0x08001df1
 8002258:	20002f28 	.word	0x20002f28
 800225c:	20002b64 	.word	0x20002b64
 8002260:	20002f88 	.word	0x20002f88
 8002264:	20002ea4 	.word	0x20002ea4

08002268 <spi_wb>:
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
	return rbuf;
}

static void spi_wb(uint8_t b) {
 8002268:	b500      	push	{lr}
 800226a:	b083      	sub	sp, #12
 800226c:	a902      	add	r1, sp, #8
 800226e:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	2201      	movs	r2, #1
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <spi_wb+0x1c>)
 800227a:	f004 f919 	bl	80064b0 <HAL_SPI_Transmit>
}
 800227e:	b003      	add	sp, #12
 8002280:	f85d fb04 	ldr.w	pc, [sp], #4
 8002284:	20002fc8 	.word	0x20002fc8

08002288 <spi_rb>:
static uint8_t spi_rb(void) {
 8002288:	b500      	push	{lr}
 800228a:	b083      	sub	sp, #12
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 800228c:	f04f 33ff 	mov.w	r3, #4294967295
 8002290:	2201      	movs	r2, #1
 8002292:	f10d 0107 	add.w	r1, sp, #7
 8002296:	4804      	ldr	r0, [pc, #16]	; (80022a8 <spi_rb+0x20>)
 8002298:	f004 faee 	bl	8006878 <HAL_SPI_Receive>
}
 800229c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80022a0:	b003      	add	sp, #12
 80022a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80022a6:	bf00      	nop
 80022a8:	20002fc8 	.word	0x20002fc8

080022ac <cs_desel>:
static void cs_desel() {
 80022ac:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET); //CS HIGH
 80022ae:	2201      	movs	r2, #1
 80022b0:	2110      	movs	r1, #16
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <cs_desel+0x1c>)
 80022b4:	f002 fcb0 	bl	8004c18 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 80022b8:	2300      	movs	r3, #0
 80022ba:	461a      	mov	r2, r3
 80022bc:	4619      	mov	r1, r3
 80022be:	4803      	ldr	r0, [pc, #12]	; (80022cc <cs_desel+0x20>)
 80022c0:	6800      	ldr	r0, [r0, #0]
 80022c2:	f005 fd15 	bl	8007cf0 <xQueueGenericSend>
}
 80022c6:	bd08      	pop	{r3, pc}
 80022c8:	40020000 	.word	0x40020000
 80022cc:	200030a4 	.word	0x200030a4

080022d0 <cs_sel>:
static void cs_sel() {
 80022d0:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 80022d2:	f04f 31ff 	mov.w	r1, #4294967295
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <cs_sel+0x1c>)
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	f005 feff 	bl	80080dc <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET); //CS LOW
 80022de:	2200      	movs	r2, #0
 80022e0:	2110      	movs	r1, #16
 80022e2:	4803      	ldr	r0, [pc, #12]	; (80022f0 <cs_sel+0x20>)
 80022e4:	f002 fc98 	bl	8004c18 <HAL_GPIO_WritePin>
}
 80022e8:	bd08      	pop	{r3, pc}
 80022ea:	bf00      	nop
 80022ec:	200030a4 	.word	0x200030a4
 80022f0:	40020000 	.word	0x40020000

080022f4 <EthernetTask>:

void EthernetTask(void const * argument)
{
 80022f4:	b530      	push	{r4, r5, lr}
 80022f6:	b08f      	sub	sp, #60	; 0x3c
  /* USER CODE BEGIN EthernetTask */
	uint8_t rcvBuf[20], bufSize[] = {2, 2, 2, 2, 2};
 80022f8:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <EthernetTask+0x1d4>)
 80022fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022fe:	900c      	str	r0, [sp, #48]	; 0x30
 8002300:	f88d 1034 	strb.w	r1, [sp, #52]	; 0x34

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8002304:	4971      	ldr	r1, [pc, #452]	; (80024cc <EthernetTask+0x1d8>)
 8002306:	4872      	ldr	r0, [pc, #456]	; (80024d0 <EthernetTask+0x1dc>)
 8002308:	f7ff f94a 	bl	80015a0 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 800230c:	4971      	ldr	r1, [pc, #452]	; (80024d4 <EthernetTask+0x1e0>)
 800230e:	4872      	ldr	r0, [pc, #456]	; (80024d8 <EthernetTask+0x1e4>)
 8002310:	f7ff f958 	bl	80015c4 <reg_wizchip_spi_cbfunc>
	wizchip_init(bufSize, bufSize);
 8002314:	a90c      	add	r1, sp, #48	; 0x30
 8002316:	4608      	mov	r0, r1
 8002318:	f7ff f9a8 	bl	800166c <wizchip_init>
	wiz_NetInfo netInfo = {	.mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 800231c:	2400      	movs	r4, #0
 800231e:	9406      	str	r4, [sp, #24]
 8002320:	9408      	str	r4, [sp, #32]
 8002322:	9409      	str	r4, [sp, #36]	; 0x24
 8002324:	940a      	str	r4, [sp, #40]	; 0x28
 8002326:	f8cd 402b 	str.w	r4, [sp, #43]	; 0x2b
 800232a:	2308      	movs	r3, #8
 800232c:	f88d 3019 	strb.w	r3, [sp, #25]
 8002330:	23dc      	movs	r3, #220	; 0xdc
 8002332:	f88d 301a 	strb.w	r3, [sp, #26]
 8002336:	23ab      	movs	r3, #171	; 0xab
 8002338:	f88d 301b 	strb.w	r3, [sp, #27]
 800233c:	23cd      	movs	r3, #205	; 0xcd
 800233e:	f88d 301c 	strb.w	r3, [sp, #28]
 8002342:	23ef      	movs	r3, #239	; 0xef
 8002344:	f88d 301d 	strb.w	r3, [sp, #29]
 8002348:	23c0      	movs	r3, #192	; 0xc0
 800234a:	f88d 301e 	strb.w	r3, [sp, #30]
 800234e:	21a8      	movs	r1, #168	; 0xa8
 8002350:	f88d 101f 	strb.w	r1, [sp, #31]
 8002354:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8002358:	22ff      	movs	r2, #255	; 0xff
 800235a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 800235e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8002362:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8002366:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 800236a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
 800236e:	2501      	movs	r5, #1
 8002370:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
		                  	 .ip 	= {192, 168, 0, 192},					// IP address
		                     .sn 	= {255, 255, 255, 0},					// Subnet mask
		                     .gw 	= {192, 168, 0, 1}};					// Gateway address
	wizchip_setnetinfo(&netInfo);
 8002374:	a806      	add	r0, sp, #24
 8002376:	f7ff f9f9 	bl	800176c <wizchip_setnetinfo>
	wizchip_setinterruptmask(0b0000000111000000);
 800237a:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
 800237e:	f7ff f9e8 	bl	8001752 <wizchip_setinterruptmask>
	wizchip_getnetinfo(&netInfo);
 8002382:	a806      	add	r0, sp, #24
 8002384:	f7ff fa20 	bl	80017c8 <wizchip_getnetinfo>

	// Modbus Port
	if(socket(0, Sn_MR_TCP, 502, 0) == 0) {
 8002388:	4623      	mov	r3, r4
 800238a:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800238e:	4629      	mov	r1, r5
 8002390:	4620      	mov	r0, r4
 8002392:	f7fe ff61 	bl	8001258 <socket>
 8002396:	b910      	cbnz	r0, 800239e <EthernetTask+0xaa>
		  	  /* Put socket in LISTEN mode. This means we are creating a TCP server */
		if(listen(0) == SOCK_OK) {
 8002398:	4620      	mov	r0, r4
 800239a:	f7ff f809 	bl	80013b0 <listen>
		}
	}

	// HTTP Port (WebServer)
	if(socket(1, Sn_MR_TCP, 80, 0) == 0){
 800239e:	2300      	movs	r3, #0
 80023a0:	2250      	movs	r2, #80	; 0x50
 80023a2:	2101      	movs	r1, #1
 80023a4:	4608      	mov	r0, r1
 80023a6:	f7fe ff57 	bl	8001258 <socket>
 80023aa:	b910      	cbnz	r0, 80023b2 <EthernetTask+0xbe>
		if(listen(1) == SOCK_OK) {
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7fe ffff 	bl	80013b0 <listen>
		}
	}

	// MQTT Port
	if(socket(2, Sn_MR_TCP, 1883, 0) == 0){
 80023b2:	2300      	movs	r3, #0
 80023b4:	f240 725b 	movw	r2, #1883	; 0x75b
 80023b8:	2101      	movs	r1, #1
 80023ba:	2002      	movs	r0, #2
 80023bc:	f7fe ff4c 	bl	8001258 <socket>

	}

	// Telnet Port (CLI, debug)
	if(socket(3, Sn_MR_TCP, 23, 0) == 0){
 80023c0:	2300      	movs	r3, #0
 80023c2:	2217      	movs	r2, #23
 80023c4:	2101      	movs	r1, #1
 80023c6:	2003      	movs	r0, #3
 80023c8:	f7fe ff46 	bl	8001258 <socket>
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d150      	bne.n	8002472 <EthernetTask+0x17e>
		if(listen(3) == SOCK_OK) {
 80023d0:	2003      	movs	r0, #3
 80023d2:	f7fe ffed 	bl	80013b0 <listen>
 80023d6:	e04c      	b.n	8002472 <EthernetTask+0x17e>
			if(interruptSource & IK_IP_CONFLICT){

			}

			if(interruptSource & IK_SOCK_0){
				interrupt = getSn_IR(0);
 80023d8:	f44f 7002 	mov.w	r0, #520	; 0x208
 80023dc:	f7fe fdbe 	bl	8000f5c <WIZCHIP_READ>
				if(interrupt & Sn_IR_CON){
 80023e0:	f010 0f01 	tst.w	r0, #1
 80023e4:	d054      	beq.n	8002490 <EthernetTask+0x19c>
					getsockopt(0, SO_DESTIP, &remoteIP[0]);
 80023e6:	aa02      	add	r2, sp, #8
 80023e8:	2104      	movs	r1, #4
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff f816 	bl	800141c <getsockopt>
					getsockopt(0, SO_DESTPORT, (uint8_t*)&remotePort[0]);
 80023f0:	466a      	mov	r2, sp
 80023f2:	2105      	movs	r1, #5
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff f811 	bl	800141c <getsockopt>
 80023fa:	e049      	b.n	8002490 <EthernetTask+0x19c>
				}
			}

			if(interruptSource & IK_SOCK_1){
				interrupt = getSn_IR(1);
 80023fc:	f44f 700a 	mov.w	r0, #552	; 0x228
 8002400:	f7fe fdac 	bl	8000f5c <WIZCHIP_READ>
				if(interrupt & Sn_IR_CON){
 8002404:	f010 0f01 	tst.w	r0, #1
 8002408:	d045      	beq.n	8002496 <EthernetTask+0x1a2>
					getsockopt(1, SO_DESTIP, &remoteIP[1]);
 800240a:	aa03      	add	r2, sp, #12
 800240c:	2104      	movs	r1, #4
 800240e:	2001      	movs	r0, #1
 8002410:	f7ff f804 	bl	800141c <getsockopt>
					getsockopt(1, SO_DESTPORT, (uint8_t*)&remotePort[1]);
 8002414:	f10d 0202 	add.w	r2, sp, #2
 8002418:	2105      	movs	r1, #5
 800241a:	2001      	movs	r0, #1
 800241c:	f7fe fffe 	bl	800141c <getsockopt>
 8002420:	e039      	b.n	8002496 <EthernetTask+0x1a2>
				}
			}

			if(interruptSource & IK_SOCK_2){
				interrupt = getSn_IR(2);
 8002422:	f44f 7012 	mov.w	r0, #584	; 0x248
 8002426:	f7fe fd99 	bl	8000f5c <WIZCHIP_READ>
 800242a:	e037      	b.n	800249c <EthernetTask+0x1a8>
			}

			if(interruptSource & IK_SOCK_3){
				interrupt = getSn_IR(3);
 800242c:	f44f 701a 	mov.w	r0, #616	; 0x268
 8002430:	f7fe fd94 	bl	8000f5c <WIZCHIP_READ>
				if(interrupt & Sn_IR_CON){
 8002434:	f010 0f01 	tst.w	r0, #1
 8002438:	d033      	beq.n	80024a2 <EthernetTask+0x1ae>
					getsockopt(3, SO_DESTIP, &remoteIP[3]);
 800243a:	aa05      	add	r2, sp, #20
 800243c:	2104      	movs	r1, #4
 800243e:	2003      	movs	r0, #3
 8002440:	f7fe ffec 	bl	800141c <getsockopt>
					getsockopt(3, SO_DESTPORT, (uint8_t*)&remotePort[3]);
 8002444:	f10d 0206 	add.w	r2, sp, #6
 8002448:	2105      	movs	r1, #5
 800244a:	2003      	movs	r0, #3
 800244c:	f7fe ffe6 	bl	800141c <getsockopt>
 8002450:	e027      	b.n	80024a2 <EthernetTask+0x1ae>
				}
			}

			if(interruptSource & IK_SOCK_4){
				interrupt = getSn_IR(4);
 8002452:	f44f 7022 	mov.w	r0, #648	; 0x288
 8002456:	f7fe fd81 	bl	8000f5c <WIZCHIP_READ>
 800245a:	e025      	b.n	80024a8 <EthernetTask+0x1b4>
			}

			if(interruptSource & IK_SOCK_5){
				interrupt = getSn_IR(5);
 800245c:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 8002460:	f7fe fd7c 	bl	8000f5c <WIZCHIP_READ>
 8002464:	e023      	b.n	80024ae <EthernetTask+0x1ba>

			if(interruptSource & IK_SOCK_6){
				interrupt = getSn_IR(6);
			}

			if(interruptSource & IK_SOCK_7){
 8002466:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800246a:	d128      	bne.n	80024be <EthernetTask+0x1ca>
				interrupt = getSn_IR(7);
			}

			wizchip_clrinterrupt(interruptSource);
 800246c:	4620      	mov	r0, r4
 800246e:	f7ff f942 	bl	80016f6 <wizchip_clrinterrupt>
		if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
 8002476:	2200      	movs	r2, #0
 8002478:	4619      	mov	r1, r3
 800247a:	4618      	mov	r0, r3
 800247c:	f006 fdac 	bl	8008fd8 <xTaskNotifyWait>
 8002480:	2801      	cmp	r0, #1
 8002482:	d1f6      	bne.n	8002472 <EthernetTask+0x17e>
			interruptSource = wizchip_getinterrupt();
 8002484:	f7ff f954 	bl	8001730 <wizchip_getinterrupt>
 8002488:	4604      	mov	r4, r0
			if(interruptSource & IK_SOCK_0){
 800248a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800248e:	d1a3      	bne.n	80023d8 <EthernetTask+0xe4>
			if(interruptSource & IK_SOCK_1){
 8002490:	f414 7f00 	tst.w	r4, #512	; 0x200
 8002494:	d1b2      	bne.n	80023fc <EthernetTask+0x108>
			if(interruptSource & IK_SOCK_2){
 8002496:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800249a:	d1c2      	bne.n	8002422 <EthernetTask+0x12e>
			if(interruptSource & IK_SOCK_3){
 800249c:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80024a0:	d1c4      	bne.n	800242c <EthernetTask+0x138>
			if(interruptSource & IK_SOCK_4){
 80024a2:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 80024a6:	d1d4      	bne.n	8002452 <EthernetTask+0x15e>
			if(interruptSource & IK_SOCK_5){
 80024a8:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 80024ac:	d1d6      	bne.n	800245c <EthernetTask+0x168>
			if(interruptSource & IK_SOCK_6){
 80024ae:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 80024b2:	d0d8      	beq.n	8002466 <EthernetTask+0x172>
				interrupt = getSn_IR(6);
 80024b4:	f44f 7032 	mov.w	r0, #712	; 0x2c8
 80024b8:	f7fe fd50 	bl	8000f5c <WIZCHIP_READ>
 80024bc:	e7d3      	b.n	8002466 <EthernetTask+0x172>
				interrupt = getSn_IR(7);
 80024be:	f44f 703a 	mov.w	r0, #744	; 0x2e8
 80024c2:	f7fe fd4b 	bl	8000f5c <WIZCHIP_READ>
 80024c6:	e7d1      	b.n	800246c <EthernetTask+0x178>
 80024c8:	0800a3c4 	.word	0x0800a3c4
 80024cc:	080022ad 	.word	0x080022ad
 80024d0:	080022d1 	.word	0x080022d1
 80024d4:	08002269 	.word	0x08002269
 80024d8:	08002289 	.word	0x08002289

080024dc <NRF_ChipSelect>:

void NRF_ChipSelect (void);

void NRF_ChipDeselect (void);

void NRF_ChipSelect (void){
 80024dc:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 80024de:	f04f 31ff 	mov.w	r1, #4294967295
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <NRF_ChipSelect+0x1c>)
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	f005 fdf9 	bl	80080dc <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 80024ea:	2200      	movs	r2, #0
 80024ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <NRF_ChipSelect+0x20>)
 80024f2:	f002 fb91 	bl	8004c18 <HAL_GPIO_WritePin>
}
 80024f6:	bd08      	pop	{r3, pc}
 80024f8:	200030a4 	.word	0x200030a4
 80024fc:	40020400 	.word	0x40020400

08002500 <NRF_ChipDeselect>:

void NRF_ChipDeselect (void){
 8002500:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_SET);
 8002502:	2201      	movs	r2, #1
 8002504:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <NRF_ChipDeselect+0x20>)
 800250a:	f002 fb85 	bl	8004c18 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 800250e:	2300      	movs	r3, #0
 8002510:	461a      	mov	r2, r3
 8002512:	4619      	mov	r1, r3
 8002514:	4803      	ldr	r0, [pc, #12]	; (8002524 <NRF_ChipDeselect+0x24>)
 8002516:	6800      	ldr	r0, [r0, #0]
 8002518:	f005 fbea 	bl	8007cf0 <xQueueGenericSend>
}
 800251c:	bd08      	pop	{r3, pc}
 800251e:	bf00      	nop
 8002520:	40020400 	.word	0x40020400
 8002524:	200030a4 	.word	0x200030a4

08002528 <RadioTask>:

void RadioTask(void const * argument)
{
 8002528:	b500      	push	{lr}
 800252a:	b083      	sub	sp, #12
	const uint8_t ecoIOinitMSG[] = "IsAlive";
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <RadioTask+0x38>)
 800252e:	466c      	mov	r4, sp
 8002530:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002534:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE BEGIN RadioComm */
	nRF24_Init(&hspi1);
 8002538:	480a      	ldr	r0, [pc, #40]	; (8002564 <RadioTask+0x3c>)
 800253a:	f001 fd69 	bl	8004010 <nRF24_Init>
	//nRF24_SetRXAddress(0, "_ECOE");
	//nRF24_SetRXAddress(1, "_ECOI");
	//nRF24_SetTXAddress("_ECOM");
	//nRF24_TX_Mode();
	nRF24_SendData(ecoIOinitMSG, sizeof(ecoIOinitMSG));
 800253e:	2108      	movs	r1, #8
 8002540:	4620      	mov	r0, r4
 8002542:	f001 fc8d 	bl	8003e60 <nRF24_SendData>

  /* Infinite loop */
  for(;;)
  {
	  if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
 800254a:	2200      	movs	r2, #0
 800254c:	4619      	mov	r1, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f006 fd42 	bl	8008fd8 <xTaskNotifyWait>
 8002554:	2801      	cmp	r0, #1
 8002556:	d1f6      	bne.n	8002546 <RadioTask+0x1e>
		  nRF24_Event();
 8002558:	f001 fd2c 	bl	8003fb4 <nRF24_Event>
 800255c:	e7f3      	b.n	8002546 <RadioTask+0x1e>
 800255e:	bf00      	nop
 8002560:	0800a77c 	.word	0x0800a77c
 8002564:	20002fc8 	.word	0x20002fc8

08002568 <fModbusParseFloat>:
struct counter_data counter;

float fModbusParseFloat (uint8_t* in_data){
	union float_bytes buffor;

	buffor.bytes[3] = *in_data;
 8002568:	7802      	ldrb	r2, [r0, #0]
 800256a:	2300      	movs	r3, #0
 800256c:	f362 631f 	bfi	r3, r2, #24, #8
	in_data ++;
	buffor.bytes[2] = *in_data;
 8002570:	7842      	ldrb	r2, [r0, #1]
 8002572:	f362 4317 	bfi	r3, r2, #16, #8
	in_data ++;
	buffor.bytes[1] = *in_data;
 8002576:	7882      	ldrb	r2, [r0, #2]
 8002578:	f362 230f 	bfi	r3, r2, #8, #8
	in_data ++;
	buffor.bytes[0] = *in_data;
 800257c:	78c2      	ldrb	r2, [r0, #3]
 800257e:	f362 0307 	bfi	r3, r2, #0, #8

	return buffor.value;
 8002582:	ee00 3a10 	vmov	s0, r3
}
 8002586:	4770      	bx	lr

08002588 <RegulationTask>:

void RegulationTask(void const * argument)
{
 8002588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800258a:	ed2d 8b04 	vpush	{d8-d9}
 800258e:	b0af      	sub	sp, #188	; 0xbc
	uint8_t counter_data_raw[36];
	uint8_t imported_exported_power_raw[8];
	uint8_t receieves = 0;
	uint8_t temperatures_raw[SENSOR_NUMBER * 2];

	configStatus = Config_GetRegConfig(&parameters);
 8002590:	a821      	add	r0, sp, #132	; 0x84
 8002592:	f7fe fc97 	bl	8000ec4 <Config_GetRegConfig>

	HAL_TIM_PWM_Init(&htim1);
 8002596:	4ec4      	ldr	r6, [pc, #784]	; (80028a8 <RegulationTask+0x320>)
 8002598:	4630      	mov	r0, r6
 800259a:	f004 fbdc 	bl	8006d56 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 800259e:	4dc3      	ldr	r5, [pc, #780]	; (80028ac <RegulationTask+0x324>)
 80025a0:	4628      	mov	r0, r5
 80025a2:	f004 fbd8 	bl	8006d56 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim3);
 80025a6:	4cc2      	ldr	r4, [pc, #776]	; (80028b0 <RegulationTask+0x328>)
 80025a8:	4620      	mov	r0, r4
 80025aa:	f004 fbd4 	bl	8006d56 <HAL_TIM_PWM_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80025ae:	2100      	movs	r1, #0
 80025b0:	4630      	mov	r0, r6
 80025b2:	f004 fc9b 	bl	8006eec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80025b6:	2104      	movs	r1, #4
 80025b8:	4630      	mov	r0, r6
 80025ba:	f004 fc97 	bl	8006eec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80025be:	2108      	movs	r1, #8
 80025c0:	4630      	mov	r0, r6
 80025c2:	f004 fc93 	bl	8006eec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80025c6:	2100      	movs	r1, #0
 80025c8:	4628      	mov	r0, r5
 80025ca:	f004 fc8f 	bl	8006eec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80025ce:	2104      	movs	r1, #4
 80025d0:	4628      	mov	r0, r5
 80025d2:	f004 fc8b 	bl	8006eec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80025d6:	2108      	movs	r1, #8
 80025d8:	4628      	mov	r0, r5
 80025da:	f004 fc87 	bl	8006eec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80025de:	2100      	movs	r1, #0
 80025e0:	4620      	mov	r0, r4
 80025e2:	f004 fc83 	bl	8006eec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80025e6:	2104      	movs	r1, #4
 80025e8:	4620      	mov	r0, r4
 80025ea:	f004 fc7f 	bl	8006eec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80025ee:	2108      	movs	r1, #8
 80025f0:	4620      	mov	r0, r4
 80025f2:	f004 fc7b 	bl	8006eec <HAL_TIM_PWM_Start>

	TIM1 -> CCR1 = 0;
 80025f6:	4baf      	ldr	r3, [pc, #700]	; (80028b4 <RegulationTask+0x32c>)
 80025f8:	2400      	movs	r4, #0
 80025fa:	635c      	str	r4, [r3, #52]	; 0x34
	TIM1 -> CCR2 = 0;
 80025fc:	639c      	str	r4, [r3, #56]	; 0x38
	TIM1 -> CCR3 = 0;
 80025fe:	63dc      	str	r4, [r3, #60]	; 0x3c

	TIM2 -> CCR1 = 0;
 8002600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002604:	635c      	str	r4, [r3, #52]	; 0x34
	TIM2 -> CCR2 = 0;
 8002606:	639c      	str	r4, [r3, #56]	; 0x38
	TIM2 -> CCR3 = 0;
 8002608:	63dc      	str	r4, [r3, #60]	; 0x3c

	TIM3 -> CCR1 = 0;
 800260a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800260e:	635c      	str	r4, [r3, #52]	; 0x34
	TIM3 -> CCR2 = 0;
 8002610:	639c      	str	r4, [r3, #56]	; 0x38
	TIM3 -> CCR3 = 0;
 8002612:	63dc      	str	r4, [r3, #60]	; 0x3c

	//Uchwyty i inne struktury
	mbPort.task =  xTaskGetCurrentTaskHandle();
 8002614:	f006 fb6c 	bl	8008cf0 <xTaskGetCurrentTaskHandle>
 8002618:	902d      	str	r0, [sp, #180]	; 0xb4

	mcp23017_init(&expander1, &hi2c1, 0x20);
 800261a:	2220      	movs	r2, #32
 800261c:	49a6      	ldr	r1, [pc, #664]	; (80028b8 <RegulationTask+0x330>)
 800261e:	a829      	add	r0, sp, #164	; 0xa4
 8002620:	f7ff f900 	bl	8001824 <mcp23017_init>
	mcp23017_iodir(&expander1, 1, 0xFF);
 8002624:	22ff      	movs	r2, #255	; 0xff
 8002626:	2101      	movs	r1, #1
 8002628:	a829      	add	r0, sp, #164	; 0xa4
 800262a:	f7ff f91d 	bl	8001868 <mcp23017_iodir>
	mcp23017_iodir(&expander1, 0, 0);
 800262e:	4622      	mov	r2, r4
 8002630:	4621      	mov	r1, r4
 8002632:	a829      	add	r0, sp, #164	; 0xa4
 8002634:	f7ff f918 	bl	8001868 <mcp23017_iodir>
	vModbusInit(&mbPort, &huart2, 100);
 8002638:	2264      	movs	r2, #100	; 0x64
 800263a:	49a0      	ldr	r1, [pc, #640]	; (80028bc <RegulationTask+0x334>)
 800263c:	a82b      	add	r0, sp, #172	; 0xac
 800263e:	f7ff fa37 	bl	8001ab0 <vModbusInit>
	float exported_power = 0;
 8002642:	ed9f 8a9f 	vldr	s16, [pc, #636]	; 80028c0 <RegulationTask+0x338>
	float imported_power = 0;
 8002646:	eef0 8a48 	vmov.f32	s17, s16
 800264a:	e165      	b.n	8002918 <RegulationTask+0x390>
		else CO_CONTACTOR_ERROR_RESET;

		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
			receieves += 1;
			for(uint8_t i = 0; i < 3; i++){
				counter.voltages[i] = fModbusParseFloat(counter_data_raw + i * 4);
 800264c:	00a6      	lsls	r6, r4, #2
 800264e:	ab0a      	add	r3, sp, #40	; 0x28
 8002650:	1998      	adds	r0, r3, r6
 8002652:	f7ff ff89 	bl	8002568 <fModbusParseFloat>
 8002656:	4d9b      	ldr	r5, [pc, #620]	; (80028c4 <RegulationTask+0x33c>)
 8002658:	f104 030c 	add.w	r3, r4, #12
 800265c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002660:	ed83 0a00 	vstr	s0, [r3]
				counter.currents[i] = fModbusParseFloat(counter_data_raw + 12 + i * 4);
 8002664:	f106 000c 	add.w	r0, r6, #12
 8002668:	ab0a      	add	r3, sp, #40	; 0x28
 800266a:	4418      	add	r0, r3
 800266c:	f7ff ff7c 	bl	8002568 <fModbusParseFloat>
 8002670:	f104 030e 	add.w	r3, r4, #14
 8002674:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002678:	ed83 0a01 	vstr	s0, [r3, #4]
				counter.powers[i] = fModbusParseFloat(counter_data_raw + 24 + 4 * i);
 800267c:	f106 0018 	add.w	r0, r6, #24
 8002680:	ab0a      	add	r3, sp, #40	; 0x28
 8002682:	4418      	add	r0, r3
 8002684:	f7ff ff70 	bl	8002568 <fModbusParseFloat>
 8002688:	f104 0312 	add.w	r3, r4, #18
 800268c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8002690:	ed85 0a00 	vstr	s0, [r5]
			for(uint8_t i = 0; i < 3; i++){
 8002694:	3401      	adds	r4, #1
 8002696:	b2e4      	uxtb	r4, r4
 8002698:	2c02      	cmp	r4, #2
 800269a:	d9d7      	bls.n	800264c <RegulationTask+0xc4>
			receieves += 1;
 800269c:	2501      	movs	r5, #1
 800269e:	e14b      	b.n	8002938 <RegulationTask+0x3b0>
			for(uint8_t i = 0; i < 3; i++){
 80026a0:	2400      	movs	r4, #0
 80026a2:	e7f9      	b.n	8002698 <RegulationTask+0x110>
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);

			if(counter.power_in_buffor > 0){
				counter.power_in_buffor -= (imported_power - last_imported_power);
			}else{
				counter.power_in_buffor = 0;
 80026a4:	4b87      	ldr	r3, [pc, #540]	; (80028c4 <RegulationTask+0x33c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
 80026aa:	e167      	b.n	800297c <RegulationTask+0x3f4>
			}
			counter.power_in_buffor += (exported_power - last_exported_power) * ACUMULATED_POWER_FACTOR;
		}

		if(vModbusReadInputRegisters(&mbPort, TEMPERATURE_ADDRESS, 0, SENSOR_NUMBER, temperatures_raw) == Modbus_OK){
			receieves += 4;
 80026ac:	3504      	adds	r5, #4
 80026ae:	b2ed      	uxtb	r5, r5
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 80026b0:	2400      	movs	r4, #0
 80026b2:	e01b      	b.n	80026ec <RegulationTask+0x164>
				int16_t temp = temperatures_raw[i * 2];
 80026b4:	0063      	lsls	r3, r4, #1
 80026b6:	aa2e      	add	r2, sp, #184	; 0xb8
 80026b8:	441a      	add	r2, r3
 80026ba:	f812 2cac 	ldrb.w	r2, [r2, #-172]
				temp = temp << 8;
				temp += temperatures_raw[i*2 + 1];
 80026be:	3301      	adds	r3, #1
 80026c0:	a92e      	add	r1, sp, #184	; 0xb8
 80026c2:	440b      	add	r3, r1
 80026c4:	f813 0cac 	ldrb.w	r0, [r3, #-172]
 80026c8:	eb00 2002 	add.w	r0, r0, r2, lsl #8
				temperatures[i] = temp / DEC_PLACES;
 80026cc:	b200      	sxth	r0, r0
 80026ce:	f7fd ff29 	bl	8000524 <__aeabi_i2d>
 80026d2:	2200      	movs	r2, #0
 80026d4:	4b7c      	ldr	r3, [pc, #496]	; (80028c8 <RegulationTask+0x340>)
 80026d6:	f7fe f8b9 	bl	800084c <__aeabi_ddiv>
 80026da:	f7fe f9bf 	bl	8000a5c <__aeabi_d2f>
 80026de:	ab2e      	add	r3, sp, #184	; 0xb8
 80026e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80026e4:	f843 0c60 	str.w	r0, [r3, #-96]
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 80026e8:	3401      	adds	r4, #1
 80026ea:	b2e4      	uxtb	r4, r4
 80026ec:	2c09      	cmp	r4, #9
 80026ee:	d9e1      	bls.n	80026b4 <RegulationTask+0x12c>
			}
			memcpy(&counter.CWU_temps[0], &temperatures[0], 24);
 80026f0:	4c76      	ldr	r4, [pc, #472]	; (80028cc <RegulationTask+0x344>)
 80026f2:	ae16      	add	r6, sp, #88	; 0x58
 80026f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80026f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80026fc:	e884 0003 	stmia.w	r4, {r0, r1}
 8002700:	e158      	b.n	80029b4 <RegulationTask+0x42c>
		counter.temperatures_present = 1;
		if(receieves == 7){
			for(uint8_t i = 0; i < 3; i ++){
				if(counter.voltages[i] > 200.0){
					if(counter.powers[i] > 0) available_power[i] = (PHASE_POWER - counter.powers[i]) * PHASE_POWER_COEFF;
					else available_power[i] = -counter.powers[i] * PHASE_POWER_COEFF;
 8002702:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80028c0 <RegulationTask+0x338>
 8002706:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800270a:	ab2e      	add	r3, sp, #184	; 0xb8
 800270c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002710:	ed43 7a1b 	vstr	s15, [r3, #-108]	; 0xffffff94
 8002714:	e057      	b.n	80027c6 <RegulationTask+0x23e>
					counter.CWU_heater_max_power[i] = available_power[i] / CWU_HEATER_PHASE_POWER;

					if(counter.CO_heater_max_power[i] > 1.0) counter.CO_heater_max_power[i] = 1.0;
					if(counter.CWU_heater_max_power[i] > 1.0) counter.CWU_heater_max_power[i] = 1.0;

					counter.CO_heater_PWM[i] = (uint32_t)(counter.CO_heater_max_power[i] * 1000.0);
 8002716:	4e6b      	ldr	r6, [pc, #428]	; (80028c4 <RegulationTask+0x33c>)
 8002718:	1dab      	adds	r3, r5, #6
 800271a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	f7fd ff12 	bl	8000548 <__aeabi_f2d>
 8002724:	2200      	movs	r2, #0
 8002726:	4b6a      	ldr	r3, [pc, #424]	; (80028d0 <RegulationTask+0x348>)
 8002728:	f7fd ff66 	bl	80005f8 <__aeabi_dmul>
 800272c:	f7fe f976 	bl	8000a1c <__aeabi_d2uiz>
 8002730:	b283      	uxth	r3, r0
					counter.CO_heater_PWM[i] -= (counter.CO_heater_PWM[i] % 10);
 8002732:	f105 0208 	add.w	r2, r5, #8
 8002736:	4f67      	ldr	r7, [pc, #412]	; (80028d4 <RegulationTask+0x34c>)
 8002738:	fba7 1303 	umull	r1, r3, r7, r3
 800273c:	08db      	lsrs	r3, r3, #3
 800273e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002742:	0059      	lsls	r1, r3, #1
 8002744:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]

					counter.CWU_heater_PWM[i] = (uint32_t)(counter.CWU_heater_max_power[i] * 1000.0);
 8002748:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800274c:	6850      	ldr	r0, [r2, #4]
 800274e:	f7fd fefb 	bl	8000548 <__aeabi_f2d>
 8002752:	2200      	movs	r2, #0
 8002754:	4b5e      	ldr	r3, [pc, #376]	; (80028d0 <RegulationTask+0x348>)
 8002756:	f7fd ff4f 	bl	80005f8 <__aeabi_dmul>
 800275a:	f7fe f95f 	bl	8000a1c <__aeabi_d2uiz>
 800275e:	b283      	uxth	r3, r0
					counter.CWU_heater_PWM[i] -= (counter.CWU_heater_PWM[i] % 10);
 8002760:	3504      	adds	r5, #4
 8002762:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 8002766:	fba7 2303 	umull	r2, r3, r7, r3
 800276a:	08db      	lsrs	r3, r3, #3
 800276c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002770:	005a      	lsls	r2, r3, #1
 8002772:	806a      	strh	r2, [r5, #2]
			for(uint8_t i = 0; i < 3; i ++){
 8002774:	3401      	adds	r4, #1
 8002776:	b2e4      	uxtb	r4, r4
 8002778:	2c02      	cmp	r4, #2
 800277a:	d85e      	bhi.n	800283a <RegulationTask+0x2b2>
				if(counter.voltages[i] > 200.0){
 800277c:	4625      	mov	r5, r4
 800277e:	f104 030c 	add.w	r3, r4, #12
 8002782:	4a50      	ldr	r2, [pc, #320]	; (80028c4 <RegulationTask+0x33c>)
 8002784:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002788:	ed93 7a00 	vldr	s14, [r3]
 800278c:	eddf 7a52 	vldr	s15, [pc, #328]	; 80028d8 <RegulationTask+0x350>
 8002790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002798:	dd42      	ble.n	8002820 <RegulationTask+0x298>
					if(counter.powers[i] > 0) available_power[i] = (PHASE_POWER - counter.powers[i]) * PHASE_POWER_COEFF;
 800279a:	f104 0312 	add.w	r3, r4, #18
 800279e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ae:	dda8      	ble.n	8002702 <RegulationTask+0x17a>
 80027b0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80028c0 <RegulationTask+0x338>
 80027b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027bc:	ab2e      	add	r3, sp, #184	; 0xb8
 80027be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80027c2:	ed43 7a1b 	vstr	s15, [r3, #-108]	; 0xffffff94
					counter.CO_heater_max_power[i] = available_power[i] / CO_HEATER_PHASE_POWER;
 80027c6:	ab2e      	add	r3, sp, #184	; 0xb8
 80027c8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80027cc:	ed53 7a1b 	vldr	s15, [r3, #-108]	; 0xffffff94
 80027d0:	4b3c      	ldr	r3, [pc, #240]	; (80028c4 <RegulationTask+0x33c>)
 80027d2:	1daa      	adds	r2, r5, #6
 80027d4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80027d8:	edc2 7a00 	vstr	s15, [r2]
					counter.CWU_heater_max_power[i] = available_power[i] / CWU_HEATER_PHASE_POWER;
 80027dc:	f105 0208 	add.w	r2, r5, #8
 80027e0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80027e4:	edc3 7a01 	vstr	s15, [r3, #4]
					if(counter.CO_heater_max_power[i] > 1.0) counter.CO_heater_max_power[i] = 1.0;
 80027e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f4:	dd05      	ble.n	8002802 <RegulationTask+0x27a>
 80027f6:	1dab      	adds	r3, r5, #6
 80027f8:	4a32      	ldr	r2, [pc, #200]	; (80028c4 <RegulationTask+0x33c>)
 80027fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80027fe:	ed83 7a00 	vstr	s14, [r3]
					if(counter.CWU_heater_max_power[i] > 1.0) counter.CWU_heater_max_power[i] = 1.0;
 8002802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280e:	dd82      	ble.n	8002716 <RegulationTask+0x18e>
 8002810:	f105 0308 	add.w	r3, r5, #8
 8002814:	4a2b      	ldr	r2, [pc, #172]	; (80028c4 <RegulationTask+0x33c>)
 8002816:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800281a:	ed83 7a01 	vstr	s14, [r3, #4]
 800281e:	e77a      	b.n	8002716 <RegulationTask+0x18e>
				}else{
					counter.CO_heater_PWM[i] = 0;
 8002820:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <RegulationTask+0x33c>)
 8002822:	f104 0208 	add.w	r2, r4, #8
 8002826:	2100      	movs	r1, #0
 8002828:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					counter.CWU_heater_PWM[i] = 0;
 800282c:	1d22      	adds	r2, r4, #4
 800282e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002832:	8059      	strh	r1, [r3, #2]
 8002834:	e79e      	b.n	8002774 <RegulationTask+0x1ec>
			for(uint8_t i = 0; i < 3; i ++){
 8002836:	2400      	movs	r4, #0
 8002838:	e79e      	b.n	8002778 <RegulationTask+0x1f0>
 800283a:	2300      	movs	r3, #0
 800283c:	e00a      	b.n	8002854 <RegulationTask+0x2cc>
				}
			}else{
				CO_HEATER_RESET;
				CWU_HEATER_RESET;
				for(int i = 0; i < 3; i++){
					counter.CO_heater_PWM[i] = 0;
 800283e:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <RegulationTask+0x33c>)
 8002840:	f103 0008 	add.w	r0, r3, #8
 8002844:	2100      	movs	r1, #0
 8002846:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
					counter.CWU_heater_PWM[i] = 0;
 800284a:	1d18      	adds	r0, r3, #4
 800284c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002850:	8051      	strh	r1, [r2, #2]
				for(int i = 0; i < 3; i++){
 8002852:	3301      	adds	r3, #1
 8002854:	2b02      	cmp	r3, #2
 8002856:	ddf2      	ble.n	800283e <RegulationTask+0x2b6>
			}

		}else{
			CO_HEATER_RESET;
			CWU_HEATER_RESET;
			for(int i = 0; i < 3; i++){
 8002858:	2300      	movs	r3, #0
 800285a:	e021      	b.n	80028a0 <RegulationTask+0x318>
				counter.CO_heater_PWM[i] = 0;
 800285c:	4a19      	ldr	r2, [pc, #100]	; (80028c4 <RegulationTask+0x33c>)
 800285e:	f103 0008 	add.w	r0, r3, #8
 8002862:	2100      	movs	r1, #0
 8002864:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
				counter.CWU_heater_PWM[i] = 0;
 8002868:	1d18      	adds	r0, r3, #4
 800286a:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800286e:	8051      	strh	r1, [r2, #2]
			for(int i = 0; i < 3; i++){
 8002870:	3301      	adds	r3, #1
 8002872:	2b02      	cmp	r3, #2
 8002874:	ddf2      	ble.n	800285c <RegulationTask+0x2d4>
			}

			if(!(receieves & 1) || !(receieves & 2)){
 8002876:	f005 0303 	and.w	r3, r5, #3
 800287a:	2b03      	cmp	r3, #3
 800287c:	d002      	beq.n	8002884 <RegulationTask+0x2fc>
				counter.counter_present = 0;
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <RegulationTask+0x33c>)
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
			}

			if(!(receieves & 4)){
 8002884:	f015 0f04 	tst.w	r5, #4
 8002888:	d1e6      	bne.n	8002858 <RegulationTask+0x2d0>
				counter.temperatures_present = 0;
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <RegulationTask+0x33c>)
 800288c:	2200      	movs	r2, #0
 800288e:	709a      	strb	r2, [r3, #2]
 8002890:	e7e2      	b.n	8002858 <RegulationTask+0x2d0>
		}

		if(!CWU_FUSE){
			CO_HEATER_RESET;
			for(int i = 0; i < 3; i++){
				counter.CWU_heater_PWM[i] = 0;
 8002892:	1d19      	adds	r1, r3, #4
 8002894:	4a0b      	ldr	r2, [pc, #44]	; (80028c4 <RegulationTask+0x33c>)
 8002896:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800289a:	2100      	movs	r1, #0
 800289c:	8051      	strh	r1, [r2, #2]
			for(int i = 0; i < 3; i++){
 800289e:	3301      	adds	r3, #1
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	ddf6      	ble.n	8002892 <RegulationTask+0x30a>
			}
		}

		if(!CO_FUSE){
			CWU_HEATER_RESET;
			for(int i = 0; i < 3; i++){
 80028a4:	2300      	movs	r3, #0
 80028a6:	e020      	b.n	80028ea <RegulationTask+0x362>
 80028a8:	20002f48 	.word	0x20002f48
 80028ac:	20003020 	.word	0x20003020
 80028b0:	20002dbc 	.word	0x20002dbc
 80028b4:	40010000 	.word	0x40010000
 80028b8:	20002d60 	.word	0x20002d60
 80028bc:	20003060 	.word	0x20003060
 80028c0:	00000000 	.word	0x00000000
 80028c4:	20002c1c 	.word	0x20002c1c
 80028c8:	40240000 	.word	0x40240000
 80028cc:	20002c74 	.word	0x20002c74
 80028d0:	408f4000 	.word	0x408f4000
 80028d4:	cccccccd 	.word	0xcccccccd
 80028d8:	43480000 	.word	0x43480000
				counter.CO_heater_PWM[i] = 0;
 80028dc:	f103 0108 	add.w	r1, r3, #8
 80028e0:	4a39      	ldr	r2, [pc, #228]	; (80029c8 <RegulationTask+0x440>)
 80028e2:	2000      	movs	r0, #0
 80028e4:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
			for(int i = 0; i < 3; i++){
 80028e8:	3301      	adds	r3, #1
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	ddf6      	ble.n	80028dc <RegulationTask+0x354>
			}
		}

		TIM3 -> CCR1 = counter.CWU_heater_PWM[0];
 80028ee:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <RegulationTask+0x440>)
 80028f0:	8959      	ldrh	r1, [r3, #10]
 80028f2:	4a36      	ldr	r2, [pc, #216]	; (80029cc <RegulationTask+0x444>)
 80028f4:	6351      	str	r1, [r2, #52]	; 0x34
		TIM3 -> CCR2 = counter.CWU_heater_PWM[1];
 80028f6:	8999      	ldrh	r1, [r3, #12]
 80028f8:	6391      	str	r1, [r2, #56]	; 0x38
		TIM3 -> CCR3 = counter.CWU_heater_PWM[2];
 80028fa:	89d9      	ldrh	r1, [r3, #14]
 80028fc:	63d1      	str	r1, [r2, #60]	; 0x3c

		TIM1 -> CCR1 = counter.CO_heater_PWM[0];
 80028fe:	8a19      	ldrh	r1, [r3, #16]
 8002900:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8002904:	6351      	str	r1, [r2, #52]	; 0x34
		TIM1 -> CCR2 = counter.CO_heater_PWM[1];
 8002906:	8a59      	ldrh	r1, [r3, #18]
 8002908:	6391      	str	r1, [r2, #56]	; 0x38
		TIM1 -> CCR3 = counter.CO_heater_PWM[2];
 800290a:	8a9b      	ldrh	r3, [r3, #20]
 800290c:	63d3      	str	r3, [r2, #60]	; 0x3c

		vTaskDelayUntil(&xLastWakeTime, xDelay);
 800290e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002912:	a820      	add	r0, sp, #128	; 0x80
 8002914:	f006 f84e 	bl	80089b4 <vTaskDelayUntil>
		mcp23017_read_gpio(&expander1, 1);
 8002918:	2101      	movs	r1, #1
 800291a:	a829      	add	r0, sp, #164	; 0xa4
 800291c:	f7fe ffaf 	bl	800187e <mcp23017_read_gpio>
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
 8002920:	ab0a      	add	r3, sp, #40	; 0x28
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2312      	movs	r3, #18
 8002926:	2200      	movs	r2, #0
 8002928:	2101      	movs	r1, #1
 800292a:	a82b      	add	r0, sp, #172	; 0xac
 800292c:	f7ff f8f6 	bl	8001b1c <vModbusReadInputRegisters>
 8002930:	2800      	cmp	r0, #0
 8002932:	f43f aeb5 	beq.w	80026a0 <RegulationTask+0x118>
		receieves = 0;
 8002936:	2500      	movs	r5, #0
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, IMPORTED_ACTIVE_POWER, 4, imported_exported_power_raw) == Modbus_OK){
 8002938:	ab08      	add	r3, sp, #32
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2304      	movs	r3, #4
 800293e:	2248      	movs	r2, #72	; 0x48
 8002940:	2101      	movs	r1, #1
 8002942:	a82b      	add	r0, sp, #172	; 0xac
 8002944:	f7ff f8ea 	bl	8001b1c <vModbusReadInputRegisters>
 8002948:	bb48      	cbnz	r0, 800299e <RegulationTask+0x416>
			receieves += 2;
 800294a:	3502      	adds	r5, #2
 800294c:	b2ed      	uxtb	r5, r5
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 800294e:	a808      	add	r0, sp, #32
 8002950:	f7ff fe0a 	bl	8002568 <fModbusParseFloat>
 8002954:	eeb0 9a40 	vmov.f32	s18, s0
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 8002958:	a809      	add	r0, sp, #36	; 0x24
 800295a:	f7ff fe05 	bl	8002568 <fModbusParseFloat>
			if(counter.power_in_buffor > 0){
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <RegulationTask+0x440>)
 8002960:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002964:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296c:	f77f ae9a 	ble.w	80026a4 <RegulationTask+0x11c>
				counter.power_in_buffor -= (imported_power - last_imported_power);
 8002970:	ee79 8a68 	vsub.f32	s17, s18, s17
 8002974:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8002978:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			counter.power_in_buffor += (exported_power - last_exported_power) * ACUMULATED_POWER_FACTOR;
 800297c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8002980:	eddf 7a13 	vldr	s15, [pc, #76]	; 80029d0 <RegulationTask+0x448>
 8002984:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <RegulationTask+0x440>)
 800298a:	ed93 8a15 	vldr	s16, [r3, #84]	; 0x54
 800298e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8002992:	ed83 8a15 	vstr	s16, [r3, #84]	; 0x54
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 8002996:	eeb0 8a40 	vmov.f32	s16, s0
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 800299a:	eef0 8a49 	vmov.f32	s17, s18
		if(vModbusReadInputRegisters(&mbPort, TEMPERATURE_ADDRESS, 0, SENSOR_NUMBER, temperatures_raw) == Modbus_OK){
 800299e:	ab03      	add	r3, sp, #12
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	230a      	movs	r3, #10
 80029a4:	2200      	movs	r2, #0
 80029a6:	2102      	movs	r1, #2
 80029a8:	a82b      	add	r0, sp, #172	; 0xac
 80029aa:	f7ff f8b7 	bl	8001b1c <vModbusReadInputRegisters>
 80029ae:	2800      	cmp	r0, #0
 80029b0:	f43f ae7c 	beq.w	80026ac <RegulationTask+0x124>
		counter.counter_present = 1;
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <RegulationTask+0x440>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	701a      	strb	r2, [r3, #0]
		counter.temperatures_present = 1;
 80029ba:	709a      	strb	r2, [r3, #2]
		if(receieves == 7){
 80029bc:	2d07      	cmp	r5, #7
 80029be:	f43f af3a 	beq.w	8002836 <RegulationTask+0x2ae>
			for(int i = 0; i < 3; i++){
 80029c2:	2300      	movs	r3, #0
 80029c4:	e755      	b.n	8002872 <RegulationTask+0x2ea>
 80029c6:	bf00      	nop
 80029c8:	20002c1c 	.word	0x20002c1c
 80029cc:	40000400 	.word	0x40000400
 80029d0:	00000000 	.word	0x00000000

080029d4 <TestTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TestTask */
void TestTask(void const * argument)
{
 80029d4:	b508      	push	{r3, lr}

  /* Infinite loop */
  for(;;)
  {

    vTaskDelay(1000);
 80029d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029da:	f006 f83d 	bl	8008a58 <vTaskDelay>
 80029de:	e7fa      	b.n	80029d6 <TestTask+0x2>

080029e0 <UARTDMA_UartIrqHandler>:



void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80029e0:	6802      	ldr	r2, [r0, #0]
 80029e2:	6813      	ldr	r3, [r2, #0]
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	f011 0f10 	tst.w	r1, #16
 80029ea:	d00e      	beq.n	8002a0a <UARTDMA_UartIrqHandler+0x2a>
{
 80029ec:	b082      	sub	sp, #8
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80029ee:	6819      	ldr	r1, [r3, #0]
 80029f0:	9101      	str	r1, [sp, #4]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	9301      	str	r3, [sp, #4]
		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80029f6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	6813      	ldr	r3, [r2, #0]
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	6013      	str	r3, [r2, #0]
		tmp = tmp; // For unused warning
 8002a02:	9b01      	ldr	r3, [sp, #4]
 8002a04:	9301      	str	r3, [sp, #4]
	}
}
 8002a06:	b002      	add	sp, #8
 8002a08:	4770      	bx	lr
 8002a0a:	4770      	bx	lr

08002a0c <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma){
 8002a0c:	b570      	push	{r4, r5, r6, lr}
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t Reserved0;
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8002a0e:	6803      	ldr	r3, [r0, #0]
 8002a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a12:	6d9d      	ldr	r5, [r3, #88]	; 0x58

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	f012 0f10 	tst.w	r2, #16
 8002a1c:	d038      	beq.n	8002a90 <UARTDMA_DmaIrqHandler+0x84>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8002a1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a20:	2320      	movs	r3, #32
 8002a22:	4093      	lsls	r3, r2
 8002a24:	60ab      	str	r3, [r5, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8002a26:	6803      	ldr	r3, [r0, #0]
 8002a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685e      	ldr	r6, [r3, #4]
 8002a2e:	f1c6 061e 	rsb	r6, r6, #30

		//huartdma->length += Length;
		huartdma->length = Length;
 8002a32:	f880 60a2 	strb.w	r6, [r0, #162]	; 0xa2

		for(i = 0; i < Length; i++){
 8002a36:	2200      	movs	r2, #0
 8002a38:	e00c      	b.n	8002a54 <UARTDMA_DmaIrqHandler+0x48>
			huartdma->UART_Buffer[huartdma->UartBufferTail] = huartdma->DMA_RX_Buffer[i];
 8002a3a:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8002a3e:	1881      	adds	r1, r0, r2
 8002a40:	790c      	ldrb	r4, [r1, #4]
 8002a42:	18c1      	adds	r1, r0, r3
 8002a44:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
			huartdma->UartBufferTail++;
 8002a48:	3301      	adds	r3, #1
			huartdma->UartBufferTail &= 127;
 8002a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a4e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		for(i = 0; i < Length; i++){
 8002a52:	3201      	adds	r2, #1
 8002a54:	42b2      	cmp	r2, r6
 8002a56:	d3f0      	bcc.n	8002a3a <UARTDMA_DmaIrqHandler+0x2e>
 8002a58:	4604      	mov	r4, r0
		}

		huartdma -> callback();
 8002a5a:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 8002a5e:	4798      	blx	r3

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8002a60:	4623      	mov	r3, r4
 8002a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a68:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8002a6a:	223f      	movs	r2, #63	; 0x3f
 8002a6c:	408a      	lsls	r2, r1
 8002a6e:	60aa      	str	r2, [r5, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8002a70:	6822      	ldr	r2, [r4, #0]
 8002a72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	60d3      	str	r3, [r2, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	221e      	movs	r2, #30
 8002a80:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	6813      	ldr	r3, [r2, #0]
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6013      	str	r3, [r2, #0]
	}
}
 8002a90:	bd70      	pop	{r4, r5, r6, pc}

08002a92 <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8002a92:	b510      	push	{r4, lr}
 8002a94:	4604      	mov	r4, r0
	huartdma->huart = huart;
 8002a96:	6001      	str	r1, [r0, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8002a98:	680a      	ldr	r2, [r1, #0]
 8002a9a:	68d3      	ldr	r3, [r2, #12]
 8002a9c:	f043 0310 	orr.w	r3, r3, #16
 8002aa0:	60d3      	str	r3, [r2, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	f851 3b04 	ldr.w	r3, [r1], #4
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	6813      	ldr	r3, [r2, #0]
 8002aae:	f043 0310 	orr.w	r3, r3, #16
 8002ab2:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8002ab4:	221e      	movs	r2, #30
 8002ab6:	6800      	ldr	r0, [r0, #0]
 8002ab8:	f004 fcea 	bl	8007490 <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_HTIE; // Disable DMA Half Complete interrupt
 8002abc:	6823      	ldr	r3, [r4, #0]
 8002abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	6813      	ldr	r3, [r2, #0]
 8002ac4:	f023 0308 	bic.w	r3, r3, #8
 8002ac8:	6013      	str	r3, [r2, #0]
}
 8002aca:	bd10      	pop	{r4, pc}

08002acc <configureTimerForRunTimeStats>:
/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}
 8002acc:	4770      	bx	lr

08002ace <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
 8002ace:	2000      	movs	r0, #0
 8002ad0:	4770      	bx	lr
	...

08002ad4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <vApplicationGetIdleTaskMemory+0x10>)
 8002ad6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002ad8:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <vApplicationGetIdleTaskMemory+0x14>)
 8002ada:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000320 	.word	0x20000320
 8002ae8:	20000120 	.word	0x20000120

08002aec <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <vApplicationGetTimerTaskMemory+0x10>)
 8002aee:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <vApplicationGetTimerTaskMemory+0x14>)
 8002af2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af8:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8002afa:	4770      	bx	lr
 8002afc:	20000784 	.word	0x20000784
 8002b00:	20000384 	.word	0x20000384

08002b04 <ConfigSaveTmr>:
__weak void ConfigSaveTmr(void const * argument)
{
  /* USER CODE BEGIN ConfigSaveTmr */
  
  /* USER CODE END ConfigSaveTmr */
}
 8002b04:	4770      	bx	lr
	...

08002b08 <MX_GPIO_Init>:
{
 8002b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b0c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0e:	2400      	movs	r4, #0
 8002b10:	9405      	str	r4, [sp, #20]
 8002b12:	9406      	str	r4, [sp, #24]
 8002b14:	9407      	str	r4, [sp, #28]
 8002b16:	9408      	str	r4, [sp, #32]
 8002b18:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1a:	9401      	str	r4, [sp, #4]
 8002b1c:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <MX_GPIO_Init+0x140>)
 8002b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b20:	f042 0204 	orr.w	r2, r2, #4
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
 8002b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b28:	f002 0204 	and.w	r2, r2, #4
 8002b2c:	9201      	str	r2, [sp, #4]
 8002b2e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b30:	9402      	str	r4, [sp, #8]
 8002b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b38:	631a      	str	r2, [r3, #48]	; 0x30
 8002b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b3c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002b40:	9202      	str	r2, [sp, #8]
 8002b42:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b44:	9403      	str	r4, [sp, #12]
 8002b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b50:	f002 0201 	and.w	r2, r2, #1
 8002b54:	9203      	str	r2, [sp, #12]
 8002b56:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b58:	9404      	str	r4, [sp, #16]
 8002b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b5c:	f042 0202 	orr.w	r2, r2, #2
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	9304      	str	r3, [sp, #16]
 8002b6a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 8002b6c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8002c5c <MX_GPIO_Init+0x154>
 8002b70:	4622      	mov	r2, r4
 8002b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b76:	4640      	mov	r0, r8
 8002b78:	f002 f84e 	bl	8004c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 8002b7c:	4e33      	ldr	r6, [pc, #204]	; (8002c4c <MX_GPIO_Init+0x144>)
 8002b7e:	4622      	mov	r2, r4
 8002b80:	2102      	movs	r1, #2
 8002b82:	4630      	mov	r0, r6
 8002b84:	f002 f848 	bl	8004c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8002b88:	2201      	movs	r2, #1
 8002b8a:	2110      	movs	r1, #16
 8002b8c:	4630      	mov	r0, r6
 8002b8e:	f002 f843 	bl	8004c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin, GPIO_PIN_SET);
 8002b92:	4d2f      	ldr	r5, [pc, #188]	; (8002c50 <MX_GPIO_Init+0x148>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	f246 0104 	movw	r1, #24580	; 0x6004
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f002 f83c 	bl	8004c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8002ba0:	4622      	mov	r2, r4
 8002ba2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	f002 f836 	bl	8004c18 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUILT_IN_LED_Pin;
 8002bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb2:	2701      	movs	r7, #1
 8002bb4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BUILT_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8002bba:	a905      	add	r1, sp, #20
 8002bbc:	4640      	mov	r0, r8
 8002bbe:	f001 ff59 	bl	8004a74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MASTER_TE_Pin|ETH_CS_Pin;
 8002bc2:	2312      	movs	r3, #18
 8002bc4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc6:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bcc:	a905      	add	r1, sp, #20
 8002bce:	4630      	mov	r0, r6
 8002bd0:	f001 ff50 	bl	8004a74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ETH_INT_Pin;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <MX_GPIO_Init+0x14c>)
 8002bda:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bdc:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(ETH_INT_GPIO_Port, &GPIO_InitStruct);
 8002bde:	a905      	add	r1, sp, #20
 8002be0:	4628      	mov	r0, r5
 8002be2:	f001 ff47 	bl	8004a74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin|NRF_CE_Pin;
 8002be6:	f24e 0304 	movw	r3, #57348	; 0xe004
 8002bea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bec:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf2:	a905      	add	r1, sp, #20
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	f001 ff3d 	bl	8004a74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PG24V_Pin;
 8002bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bfe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c00:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PG24V_GPIO_Port, &GPIO_InitStruct);
 8002c04:	a905      	add	r1, sp, #20
 8002c06:	4628      	mov	r0, r5
 8002c08:	f001 ff34 	bl	8004a74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NRF_INT_Pin;
 8002c0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c10:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <MX_GPIO_Init+0x150>)
 8002c14:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(NRF_INT_GPIO_Port, &GPIO_InitStruct);
 8002c18:	a905      	add	r1, sp, #20
 8002c1a:	4630      	mov	r0, r6
 8002c1c:	f001 ff2a 	bl	8004a74 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002c20:	4622      	mov	r2, r4
 8002c22:	2105      	movs	r1, #5
 8002c24:	2007      	movs	r0, #7
 8002c26:	f001 fc57 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c2a:	2007      	movs	r0, #7
 8002c2c:	f001 fc88 	bl	8004540 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002c30:	4622      	mov	r2, r4
 8002c32:	2105      	movs	r1, #5
 8002c34:	2028      	movs	r0, #40	; 0x28
 8002c36:	f001 fc4f 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c3a:	2028      	movs	r0, #40	; 0x28
 8002c3c:	f001 fc80 	bl	8004540 <HAL_NVIC_EnableIRQ>
}
 8002c40:	b00a      	add	sp, #40	; 0x28
 8002c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40020400 	.word	0x40020400
 8002c54:	10210000 	.word	0x10210000
 8002c58:	10110000 	.word	0x10110000
 8002c5c:	40020800 	.word	0x40020800

08002c60 <MX_DMA_Init>:
{
 8002c60:	b510      	push	{r4, lr}
 8002c62:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c64:	2400      	movs	r4, #0
 8002c66:	9400      	str	r4, [sp, #0]
 8002c68:	4b16      	ldr	r3, [pc, #88]	; (8002cc4 <MX_DMA_Init+0x64>)
 8002c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
 8002c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c74:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002c78:	9200      	str	r2, [sp, #0]
 8002c7a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c7c:	9401      	str	r4, [sp, #4]
 8002c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c80:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002c90:	4622      	mov	r2, r4
 8002c92:	2105      	movs	r1, #5
 8002c94:	2010      	movs	r0, #16
 8002c96:	f001 fc1f 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002c9a:	2010      	movs	r0, #16
 8002c9c:	f001 fc50 	bl	8004540 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002ca0:	4622      	mov	r2, r4
 8002ca2:	2105      	movs	r1, #5
 8002ca4:	2039      	movs	r0, #57	; 0x39
 8002ca6:	f001 fc17 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002caa:	2039      	movs	r0, #57	; 0x39
 8002cac:	f001 fc48 	bl	8004540 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002cb0:	4622      	mov	r2, r4
 8002cb2:	2105      	movs	r1, #5
 8002cb4:	203a      	movs	r0, #58	; 0x3a
 8002cb6:	f001 fc0f 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002cba:	203a      	movs	r0, #58	; 0x3a
 8002cbc:	f001 fc40 	bl	8004540 <HAL_NVIC_EnableIRQ>
}
 8002cc0:	b002      	add	sp, #8
 8002cc2:	bd10      	pop	{r4, pc}
 8002cc4:	40023800 	.word	0x40023800

08002cc8 <MX_I2C1_Init>:
{
 8002cc8:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8002cca:	4809      	ldr	r0, [pc, #36]	; (8002cf0 <MX_I2C1_Init+0x28>)
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <MX_I2C1_Init+0x2c>)
 8002cce:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <MX_I2C1_Init+0x30>)
 8002cd2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002cd8:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cde:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ce0:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ce2:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ce4:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ce6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ce8:	f002 f9f6 	bl	80050d8 <HAL_I2C_Init>
}
 8002cec:	bd08      	pop	{r3, pc}
 8002cee:	bf00      	nop
 8002cf0:	20002d60 	.word	0x20002d60
 8002cf4:	40005400 	.word	0x40005400
 8002cf8:	000186a0 	.word	0x000186a0

08002cfc <MX_SPI1_Init>:
{
 8002cfc:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8002cfe:	480c      	ldr	r0, [pc, #48]	; (8002d30 <MX_SPI1_Init+0x34>)
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <MX_SPI1_Init+0x38>)
 8002d02:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d04:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002d08:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d0e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d10:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d12:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d18:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d1a:	2218      	movs	r2, #24
 8002d1c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d1e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d20:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d22:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d24:	230a      	movs	r3, #10
 8002d26:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d28:	f003 fb82 	bl	8006430 <HAL_SPI_Init>
}
 8002d2c:	bd08      	pop	{r3, pc}
 8002d2e:	bf00      	nop
 8002d30:	20002fc8 	.word	0x20002fc8
 8002d34:	40013000 	.word	0x40013000

08002d38 <MX_TIM1_Init>:
{
 8002d38:	b530      	push	{r4, r5, lr}
 8002d3a:	b093      	sub	sp, #76	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d3c:	2400      	movs	r4, #0
 8002d3e:	9410      	str	r4, [sp, #64]	; 0x40
 8002d40:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d42:	9409      	str	r4, [sp, #36]	; 0x24
 8002d44:	940a      	str	r4, [sp, #40]	; 0x28
 8002d46:	940b      	str	r4, [sp, #44]	; 0x2c
 8002d48:	940c      	str	r4, [sp, #48]	; 0x30
 8002d4a:	940d      	str	r4, [sp, #52]	; 0x34
 8002d4c:	940e      	str	r4, [sp, #56]	; 0x38
 8002d4e:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d50:	2220      	movs	r2, #32
 8002d52:	4621      	mov	r1, r4
 8002d54:	a801      	add	r0, sp, #4
 8002d56:	f006 ff24 	bl	8009ba2 <memset>
  htim1.Instance = TIM1;
 8002d5a:	4d20      	ldr	r5, [pc, #128]	; (8002ddc <MX_TIM1_Init+0xa4>)
 8002d5c:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <MX_TIM1_Init+0xa8>)
 8002d5e:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 42000-1;
 8002d60:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8002d64:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d66:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 999;
 8002d68:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002d6c:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d72:	612b      	str	r3, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d74:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d76:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d78:	4628      	mov	r0, r5
 8002d7a:	f003 ffec 	bl	8006d56 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7e:	9410      	str	r4, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d80:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d82:	a910      	add	r1, sp, #64	; 0x40
 8002d84:	4628      	mov	r0, r5
 8002d86:	f004 f8cf 	bl	8006f28 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d8a:	2360      	movs	r3, #96	; 0x60
 8002d8c:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002d8e:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d90:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d92:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d94:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d96:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d98:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d9a:	4622      	mov	r2, r4
 8002d9c:	a909      	add	r1, sp, #36	; 0x24
 8002d9e:	4628      	mov	r0, r5
 8002da0:	f004 f824 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002da4:	2204      	movs	r2, #4
 8002da6:	a909      	add	r1, sp, #36	; 0x24
 8002da8:	4628      	mov	r0, r5
 8002daa:	f004 f81f 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002dae:	2208      	movs	r2, #8
 8002db0:	a909      	add	r1, sp, #36	; 0x24
 8002db2:	4628      	mov	r0, r5
 8002db4:	f004 f81a 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002db8:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002dba:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002dbc:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002dbe:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002dc0:	9405      	str	r4, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002dc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dc6:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002dc8:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002dca:	a901      	add	r1, sp, #4
 8002dcc:	4628      	mov	r0, r5
 8002dce:	f004 f8e7 	bl	8006fa0 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	f000 fbda 	bl	800358c <HAL_TIM_MspPostInit>
}
 8002dd8:	b013      	add	sp, #76	; 0x4c
 8002dda:	bd30      	pop	{r4, r5, pc}
 8002ddc:	20002f48 	.word	0x20002f48
 8002de0:	40010000 	.word	0x40010000

08002de4 <MX_TIM3_Init>:
{
 8002de4:	b530      	push	{r4, r5, lr}
 8002de6:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de8:	2400      	movs	r4, #0
 8002dea:	9408      	str	r4, [sp, #32]
 8002dec:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dee:	9401      	str	r4, [sp, #4]
 8002df0:	9402      	str	r4, [sp, #8]
 8002df2:	9403      	str	r4, [sp, #12]
 8002df4:	9404      	str	r4, [sp, #16]
 8002df6:	9405      	str	r4, [sp, #20]
 8002df8:	9406      	str	r4, [sp, #24]
 8002dfa:	9407      	str	r4, [sp, #28]
  htim3.Instance = TIM3;
 8002dfc:	4d18      	ldr	r5, [pc, #96]	; (8002e60 <MX_TIM3_Init+0x7c>)
 8002dfe:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <MX_TIM3_Init+0x80>)
 8002e00:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 42000 - 1;
 8002e02:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8002e06:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e08:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 999;
 8002e0a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002e0e:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e14:	612b      	str	r3, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e16:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e18:	4628      	mov	r0, r5
 8002e1a:	f003 ff9c 	bl	8006d56 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e1e:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e20:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e22:	a908      	add	r1, sp, #32
 8002e24:	4628      	mov	r0, r5
 8002e26:	f004 f87f 	bl	8006f28 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e2a:	2360      	movs	r3, #96	; 0x60
 8002e2c:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002e2e:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e30:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e32:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e34:	4622      	mov	r2, r4
 8002e36:	a901      	add	r1, sp, #4
 8002e38:	4628      	mov	r0, r5
 8002e3a:	f003 ffd7 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e3e:	2204      	movs	r2, #4
 8002e40:	eb0d 0102 	add.w	r1, sp, r2
 8002e44:	4628      	mov	r0, r5
 8002e46:	f003 ffd1 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	a901      	add	r1, sp, #4
 8002e4e:	4628      	mov	r0, r5
 8002e50:	f003 ffcc 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8002e54:	4628      	mov	r0, r5
 8002e56:	f000 fb99 	bl	800358c <HAL_TIM_MspPostInit>
}
 8002e5a:	b00b      	add	sp, #44	; 0x2c
 8002e5c:	bd30      	pop	{r4, r5, pc}
 8002e5e:	bf00      	nop
 8002e60:	20002dbc 	.word	0x20002dbc
 8002e64:	40000400 	.word	0x40000400

08002e68 <MX_TIM2_Init>:
{
 8002e68:	b530      	push	{r4, r5, lr}
 8002e6a:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e6c:	2400      	movs	r4, #0
 8002e6e:	9408      	str	r4, [sp, #32]
 8002e70:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e72:	9401      	str	r4, [sp, #4]
 8002e74:	9402      	str	r4, [sp, #8]
 8002e76:	9403      	str	r4, [sp, #12]
 8002e78:	9404      	str	r4, [sp, #16]
 8002e7a:	9405      	str	r4, [sp, #20]
 8002e7c:	9406      	str	r4, [sp, #24]
 8002e7e:	9407      	str	r4, [sp, #28]
  htim2.Instance = TIM2;
 8002e80:	4d15      	ldr	r5, [pc, #84]	; (8002ed8 <MX_TIM2_Init+0x70>)
 8002e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e86:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 0;
 8002e88:	606c      	str	r4, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e8a:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 0;
 8002e8c:	60ec      	str	r4, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e8e:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e90:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e92:	4628      	mov	r0, r5
 8002e94:	f003 ff5f 	bl	8006d56 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e98:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e9a:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e9c:	a908      	add	r1, sp, #32
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	f004 f842 	bl	8006f28 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ea4:	2360      	movs	r3, #96	; 0x60
 8002ea6:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002ea8:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eaa:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eac:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002eae:	4622      	mov	r2, r4
 8002eb0:	a901      	add	r1, sp, #4
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	f003 ff9a 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002eb8:	2204      	movs	r2, #4
 8002eba:	eb0d 0102 	add.w	r1, sp, r2
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	f003 ff94 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	a901      	add	r1, sp, #4
 8002ec8:	4628      	mov	r0, r5
 8002eca:	f003 ff8f 	bl	8006dec <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f000 fb5c 	bl	800358c <HAL_TIM_MspPostInit>
}
 8002ed4:	b00b      	add	sp, #44	; 0x2c
 8002ed6:	bd30      	pop	{r4, r5, pc}
 8002ed8:	20003020 	.word	0x20003020

08002edc <MX_USART1_UART_Init>:
{
 8002edc:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8002ede:	4808      	ldr	r0, [pc, #32]	; (8002f00 <MX_USART1_UART_Init+0x24>)
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <MX_USART1_UART_Init+0x28>)
 8002ee2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002ee4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002ee8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eea:	2300      	movs	r3, #0
 8002eec:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002eee:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ef0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002efa:	f004 fa04 	bl	8007306 <HAL_UART_Init>
}
 8002efe:	bd08      	pop	{r3, pc}
 8002f00:	20002ea4 	.word	0x20002ea4
 8002f04:	40011000 	.word	0x40011000

08002f08 <MX_USART2_UART_Init>:
{
 8002f08:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8002f0a:	4808      	ldr	r0, [pc, #32]	; (8002f2c <MX_USART2_UART_Init+0x24>)
 8002f0c:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <MX_USART2_UART_Init+0x28>)
 8002f0e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002f10:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002f14:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f16:	2300      	movs	r3, #0
 8002f18:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f1a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f1c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f1e:	220c      	movs	r2, #12
 8002f20:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f22:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f24:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f26:	f004 f9ee 	bl	8007306 <HAL_UART_Init>
}
 8002f2a:	bd08      	pop	{r3, pc}
 8002f2c:	20003060 	.word	0x20003060
 8002f30:	40004400 	.word	0x40004400

08002f34 <MX_USART6_UART_Init>:
{
 8002f34:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 8002f36:	4808      	ldr	r0, [pc, #32]	; (8002f58 <MX_USART6_UART_Init+0x24>)
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <MX_USART6_UART_Init+0x28>)
 8002f3a:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 19200;
 8002f3c:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8002f40:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f42:	2300      	movs	r3, #0
 8002f44:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002f46:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002f48:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f4e:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f50:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002f52:	f004 f9d8 	bl	8007306 <HAL_UART_Init>
}
 8002f56:	bd08      	pop	{r3, pc}
 8002f58:	20002f88 	.word	0x20002f88
 8002f5c:	40011400 	.word	0x40011400

08002f60 <MX_ADC1_Init>:
{
 8002f60:	b570      	push	{r4, r5, r6, lr}
 8002f62:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8002f64:	2500      	movs	r5, #0
 8002f66:	9500      	str	r5, [sp, #0]
 8002f68:	9501      	str	r5, [sp, #4]
 8002f6a:	9502      	str	r5, [sp, #8]
 8002f6c:	9503      	str	r5, [sp, #12]
  hadc1.Instance = ADC1;
 8002f6e:	4c10      	ldr	r4, [pc, #64]	; (8002fb0 <MX_ADC1_Init+0x50>)
 8002f70:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <MX_ADC1_Init+0x54>)
 8002f72:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f78:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f7a:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002f7c:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f7e:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f80:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f84:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <MX_ADC1_Init+0x58>)
 8002f88:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f8a:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002f8c:	2601      	movs	r6, #1
 8002f8e:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f90:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f94:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f96:	4620      	mov	r0, r4
 8002f98:	f001 f998 	bl	80042cc <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8002f9c:	2312      	movs	r3, #18
 8002f9e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8002fa0:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002fa2:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fa4:	4669      	mov	r1, sp
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f001 f9bc 	bl	8004324 <HAL_ADC_ConfigChannel>
}
 8002fac:	b004      	add	sp, #16
 8002fae:	bd70      	pop	{r4, r5, r6, pc}
 8002fb0:	20002dfc 	.word	0x20002dfc
 8002fb4:	40012000 	.word	0x40012000
 8002fb8:	0f000001 	.word	0x0f000001

08002fbc <MX_RTC_Init>:
{
 8002fbc:	b530      	push	{r4, r5, lr}
 8002fbe:	b087      	sub	sp, #28
  RTC_TimeTypeDef sTime = {0};
 8002fc0:	2400      	movs	r4, #0
 8002fc2:	9401      	str	r4, [sp, #4]
 8002fc4:	9402      	str	r4, [sp, #8]
 8002fc6:	9403      	str	r4, [sp, #12]
 8002fc8:	9404      	str	r4, [sp, #16]
 8002fca:	9405      	str	r4, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 8002fcc:	9400      	str	r4, [sp, #0]
  hrtc.Instance = RTC;
 8002fce:	4d15      	ldr	r5, [pc, #84]	; (8003024 <MX_RTC_Init+0x68>)
 8002fd0:	4b15      	ldr	r3, [pc, #84]	; (8003028 <MX_RTC_Init+0x6c>)
 8002fd2:	602b      	str	r3, [r5, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002fd4:	606c      	str	r4, [r5, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002fd6:	237f      	movs	r3, #127	; 0x7f
 8002fd8:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
 8002fda:	23ff      	movs	r3, #255	; 0xff
 8002fdc:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002fde:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002fe0:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002fe2:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	f002 ffac 	bl	8005f42 <HAL_RTC_Init>
  sTime.Hours = 0x0;
 8002fea:	f88d 4004 	strb.w	r4, [sp, #4]
  sTime.Minutes = 0x0;
 8002fee:	f88d 4005 	strb.w	r4, [sp, #5]
  sTime.Seconds = 0x0;
 8002ff2:	f88d 4006 	strb.w	r4, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ff6:	9404      	str	r4, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ff8:	9405      	str	r4, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	a901      	add	r1, sp, #4
 8002ffe:	4628      	mov	r0, r5
 8003000:	f003 f80c 	bl	800601c <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003004:	2201      	movs	r2, #1
 8003006:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 800300a:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 800300e:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 8003012:	f88d 4003 	strb.w	r4, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003016:	4669      	mov	r1, sp
 8003018:	4628      	mov	r0, r5
 800301a:	f003 f87e 	bl	800611a <HAL_RTC_SetDate>
}
 800301e:	b007      	add	sp, #28
 8003020:	bd30      	pop	{r4, r5, pc}
 8003022:	bf00      	nop
 8003024:	20002f28 	.word	0x20002f28
 8003028:	40002800 	.word	0x40002800

0800302c <MX_CRC_Init>:
{
 800302c:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800302e:	4803      	ldr	r0, [pc, #12]	; (800303c <MX_CRC_Init+0x10>)
 8003030:	4b03      	ldr	r3, [pc, #12]	; (8003040 <MX_CRC_Init+0x14>)
 8003032:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003034:	f001 fa92 	bl	800455c <HAL_CRC_Init>
}
 8003038:	bd08      	pop	{r3, pc}
 800303a:	bf00      	nop
 800303c:	20002db4 	.word	0x20002db4
 8003040:	40023000 	.word	0x40023000

08003044 <MX_TIM11_Init>:
{
 8003044:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 8003046:	4807      	ldr	r0, [pc, #28]	; (8003064 <MX_TIM11_Init+0x20>)
 8003048:	4b07      	ldr	r3, [pc, #28]	; (8003068 <MX_TIM11_Init+0x24>)
 800304a:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003050:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 8400 - 1;
 8003052:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003056:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003058:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800305a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800305c:	f003 fe62 	bl	8006d24 <HAL_TIM_Base_Init>
}
 8003060:	bd08      	pop	{r3, pc}
 8003062:	bf00      	nop
 8003064:	20002ee4 	.word	0x20002ee4
 8003068:	40014800 	.word	0x40014800

0800306c <StartDefaultTask>:
{
 800306c:	b508      	push	{r3, lr}
    osDelay(1);
 800306e:	2001      	movs	r0, #1
 8003070:	f004 fc53 	bl	800791a <osDelay>
 8003074:	e7fb      	b.n	800306e <StartDefaultTask+0x2>
	...

08003078 <SystemClock_Config>:
{
 8003078:	b530      	push	{r4, r5, lr}
 800307a:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800307c:	2230      	movs	r2, #48	; 0x30
 800307e:	2100      	movs	r1, #0
 8003080:	eb0d 0002 	add.w	r0, sp, r2
 8003084:	f006 fd8d 	bl	8009ba2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003088:	2400      	movs	r4, #0
 800308a:	9407      	str	r4, [sp, #28]
 800308c:	9408      	str	r4, [sp, #32]
 800308e:	9409      	str	r4, [sp, #36]	; 0x24
 8003090:	940a      	str	r4, [sp, #40]	; 0x28
 8003092:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003094:	9402      	str	r4, [sp, #8]
 8003096:	9403      	str	r4, [sp, #12]
 8003098:	9404      	str	r4, [sp, #16]
 800309a:	9405      	str	r4, [sp, #20]
 800309c:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	9400      	str	r4, [sp, #0]
 80030a0:	4b21      	ldr	r3, [pc, #132]	; (8003128 <SystemClock_Config+0xb0>)
 80030a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80030b4:	9401      	str	r4, [sp, #4]
 80030b6:	4a1d      	ldr	r2, [pc, #116]	; (800312c <SystemClock_Config+0xb4>)
 80030b8:	6813      	ldr	r3, [r2, #0]
 80030ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	6813      	ldr	r3, [r2, #0]
 80030c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030ca:	9301      	str	r3, [sp, #4]
 80030cc:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80030ce:	2305      	movs	r3, #5
 80030d0:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80030d8:	2301      	movs	r3, #1
 80030da:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030dc:	2502      	movs	r5, #2
 80030de:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030e4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80030e6:	2319      	movs	r3, #25
 80030e8:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80030ea:	23a8      	movs	r3, #168	; 0xa8
 80030ec:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030ee:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80030f0:	2304      	movs	r3, #4
 80030f2:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030f4:	a80c      	add	r0, sp, #48	; 0x30
 80030f6:	f002 fae5 	bl	80056c4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030fa:	230f      	movs	r3, #15
 80030fc:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030fe:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003100:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003106:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003108:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800310a:	4629      	mov	r1, r5
 800310c:	a807      	add	r0, sp, #28
 800310e:	f002 fd25 	bl	8005b5c <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003112:	9502      	str	r5, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003118:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800311a:	a802      	add	r0, sp, #8
 800311c:	f002 fe26 	bl	8005d6c <HAL_RCCEx_PeriphCLKConfig>
  HAL_RCC_EnableCSS();
 8003120:	f002 fcc2 	bl	8005aa8 <HAL_RCC_EnableCSS>
}
 8003124:	b019      	add	sp, #100	; 0x64
 8003126:	bd30      	pop	{r4, r5, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	40007000 	.word	0x40007000

08003130 <main>:
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b0b6      	sub	sp, #216	; 0xd8
  HAL_Init();
 8003134:	f001 f804 	bl	8004140 <HAL_Init>
  SystemClock_Config();
 8003138:	f7ff ff9e 	bl	8003078 <SystemClock_Config>
  MX_GPIO_Init();
 800313c:	f7ff fce4 	bl	8002b08 <MX_GPIO_Init>
  MX_DMA_Init();
 8003140:	f7ff fd8e 	bl	8002c60 <MX_DMA_Init>
  MX_I2C1_Init();
 8003144:	f7ff fdc0 	bl	8002cc8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003148:	f7ff fdd8 	bl	8002cfc <MX_SPI1_Init>
  MX_TIM1_Init();
 800314c:	f7ff fdf4 	bl	8002d38 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003150:	f7ff fe48 	bl	8002de4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003154:	f7ff fec2 	bl	8002edc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003158:	f7ff fed6 	bl	8002f08 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800315c:	f7ff feea 	bl	8002f34 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8003160:	f7ff fe82 	bl	8002e68 <MX_TIM2_Init>
  MX_ADC1_Init();
 8003164:	f7ff fefc 	bl	8002f60 <MX_ADC1_Init>
  MX_RTC_Init();
 8003168:	f7ff ff28 	bl	8002fbc <MX_RTC_Init>
  MX_CRC_Init();
 800316c:	f7ff ff5e 	bl	800302c <MX_CRC_Init>
  MX_TIM11_Init();
 8003170:	f7ff ff68 	bl	8003044 <MX_TIM11_Init>
  Config_Init(&hi2c1);
 8003174:	483f      	ldr	r0, [pc, #252]	; (8003274 <main+0x144>)
 8003176:	f7fd fe63 	bl	8000e40 <Config_Init>
  osMutexDef(SPIMutex);
 800317a:	2500      	movs	r5, #0
 800317c:	9534      	str	r5, [sp, #208]	; 0xd0
 800317e:	9535      	str	r5, [sp, #212]	; 0xd4
  SPIMutexHandle = osMutexCreate(osMutex(SPIMutex));
 8003180:	a834      	add	r0, sp, #208	; 0xd0
 8003182:	f004 fbf5 	bl	8007970 <osMutexCreate>
 8003186:	4b3c      	ldr	r3, [pc, #240]	; (8003278 <main+0x148>)
 8003188:	6018      	str	r0, [r3, #0]
  osTimerDef(Config, ConfigSaveTmr);
 800318a:	4b3c      	ldr	r3, [pc, #240]	; (800327c <main+0x14c>)
 800318c:	9332      	str	r3, [sp, #200]	; 0xc8
 800318e:	9533      	str	r5, [sp, #204]	; 0xcc
  ConfigHandle = osTimerCreate(osTimer(Config), osTimerOnce, NULL);
 8003190:	462a      	mov	r2, r5
 8003192:	4629      	mov	r1, r5
 8003194:	a832      	add	r0, sp, #200	; 0xc8
 8003196:	f004 fbc9 	bl	800792c <osTimerCreate>
 800319a:	4b39      	ldr	r3, [pc, #228]	; (8003280 <main+0x150>)
 800319c:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800319e:	4c39      	ldr	r4, [pc, #228]	; (8003284 <main+0x154>)
 80031a0:	ae2b      	add	r6, sp, #172	; 0xac
 80031a2:	4627      	mov	r7, r4
 80031a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80031a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031a8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80031ac:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80031b0:	4629      	mov	r1, r5
 80031b2:	a82b      	add	r0, sp, #172	; 0xac
 80031b4:	f004 fb7b 	bl	80078ae <osThreadCreate>
 80031b8:	4b33      	ldr	r3, [pc, #204]	; (8003288 <main+0x158>)
 80031ba:	6018      	str	r0, [r3, #0]
  osThreadDef(PowerRegulation, RegulationTask, osPriorityRealtime, 0, 256);
 80031bc:	ae24      	add	r6, sp, #144	; 0x90
 80031be:	f104 071c 	add.w	r7, r4, #28
 80031c2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80031c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031c6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80031ca:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  PowerRegulationHandle = osThreadCreate(osThread(PowerRegulation), NULL);
 80031ce:	4629      	mov	r1, r5
 80031d0:	a824      	add	r0, sp, #144	; 0x90
 80031d2:	f004 fb6c 	bl	80078ae <osThreadCreate>
 80031d6:	4b2d      	ldr	r3, [pc, #180]	; (800328c <main+0x15c>)
 80031d8:	6018      	str	r0, [r3, #0]
  osThreadDef(Diplays, DisplayTask, osPriorityNormal, 0, 256);
 80031da:	ae1d      	add	r6, sp, #116	; 0x74
 80031dc:	f104 0738 	add.w	r7, r4, #56	; 0x38
 80031e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80031e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031e4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80031e8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DiplaysHandle = osThreadCreate(osThread(Diplays), NULL);
 80031ec:	4629      	mov	r1, r5
 80031ee:	a81d      	add	r0, sp, #116	; 0x74
 80031f0:	f004 fb5d 	bl	80078ae <osThreadCreate>
 80031f4:	4b26      	ldr	r3, [pc, #152]	; (8003290 <main+0x160>)
 80031f6:	6018      	str	r0, [r3, #0]
  osThreadDef(Test, TestTask, osPriorityLow, 0, 128);
 80031f8:	ae16      	add	r6, sp, #88	; 0x58
 80031fa:	f104 0754 	add.w	r7, r4, #84	; 0x54
 80031fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003200:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003202:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003206:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TestHandle = osThreadCreate(osThread(Test), NULL);
 800320a:	4629      	mov	r1, r5
 800320c:	a816      	add	r0, sp, #88	; 0x58
 800320e:	f004 fb4e 	bl	80078ae <osThreadCreate>
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <main+0x164>)
 8003214:	6018      	str	r0, [r3, #0]
  osThreadDef(Ethernet, EthernetTask, osPriorityHigh, 0, 256);
 8003216:	ae0f      	add	r6, sp, #60	; 0x3c
 8003218:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800321c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800321e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003220:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003224:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  EthernetHandle = osThreadCreate(osThread(Ethernet), NULL);
 8003228:	4629      	mov	r1, r5
 800322a:	a80f      	add	r0, sp, #60	; 0x3c
 800322c:	f004 fb3f 	bl	80078ae <osThreadCreate>
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <main+0x168>)
 8003232:	6018      	str	r0, [r3, #0]
  osThreadDef(nRF24L01, RadioTask, osPriorityAboveNormal, 0, 256);
 8003234:	ae08      	add	r6, sp, #32
 8003236:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 800323a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800323c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800323e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003242:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  nRF24L01Handle = osThreadCreate(osThread(nRF24L01), NULL);
 8003246:	4629      	mov	r1, r5
 8003248:	a808      	add	r0, sp, #32
 800324a:	f004 fb30 	bl	80078ae <osThreadCreate>
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <main+0x16c>)
 8003250:	6018      	str	r0, [r3, #0]
  osThreadDef(DataLog, DataLogTask, osPriorityBelowNormal, 0, 256);
 8003252:	ae01      	add	r6, sp, #4
 8003254:	34a8      	adds	r4, #168	; 0xa8
 8003256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003258:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800325a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800325e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DataLogHandle = osThreadCreate(osThread(DataLog), NULL);
 8003262:	4629      	mov	r1, r5
 8003264:	a801      	add	r0, sp, #4
 8003266:	f004 fb22 	bl	80078ae <osThreadCreate>
 800326a:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <main+0x170>)
 800326c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800326e:	f004 fb19 	bl	80078a4 <osKernelStart>
 8003272:	e7fe      	b.n	8003272 <main+0x142>
 8003274:	20002d60 	.word	0x20002d60
 8003278:	200030a4 	.word	0x200030a4
 800327c:	08002b05 	.word	0x08002b05
 8003280:	20002d5c 	.word	0x20002d5c
 8003284:	0800a3cc 	.word	0x0800a3cc
 8003288:	20002c94 	.word	0x20002c94
 800328c:	20002d58 	.word	0x20002d58
 8003290:	200030a0 	.word	0x200030a0
 8003294:	20002f24 	.word	0x20002f24
 8003298:	200030ac 	.word	0x200030ac
 800329c:	20002c8c 	.word	0x20002c8c
 80032a0:	20002c90 	.word	0x20002c90

080032a4 <HAL_UART_RxCpltCallback>:
}
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80032a8:	b508      	push	{r3, lr}
	if(huart -> Instance == USART2){
 80032aa:	6802      	ldr	r2, [r0, #0]
 80032ac:	4b07      	ldr	r3, [pc, #28]	; (80032cc <HAL_UART_TxCpltCallback+0x24>)
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d000      	beq.n	80032b4 <HAL_UART_TxCpltCallback+0xc>
}
 80032b2:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 80032b4:	2201      	movs	r2, #1
 80032b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032ba:	4805      	ldr	r0, [pc, #20]	; (80032d0 <HAL_UART_TxCpltCallback+0x28>)
 80032bc:	f001 fcac 	bl	8004c18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2102      	movs	r1, #2
 80032c4:	4803      	ldr	r0, [pc, #12]	; (80032d4 <HAL_UART_TxCpltCallback+0x2c>)
 80032c6:	f001 fca7 	bl	8004c18 <HAL_GPIO_WritePin>
}
 80032ca:	e7f2      	b.n	80032b2 <HAL_UART_TxCpltCallback+0xa>
 80032cc:	40004400 	.word	0x40004400
 80032d0:	40020800 	.word	0x40020800
 80032d4:	40020000 	.word	0x40020000

080032d8 <HAL_GPIO_EXTI_Callback>:
}
 80032d8:	4770      	bx	lr
	...

080032dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM11){
 80032de:	6802      	ldr	r2, [r0, #0]
 80032e0:	4b07      	ldr	r3, [pc, #28]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d004      	beq.n	80032f0 <HAL_TIM_PeriodElapsedCallback+0x14>
		ulHighFreqTimerTicks ++;
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80032e6:	6802      	ldr	r2, [r0, #0]
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d005      	beq.n	80032fa <HAL_TIM_PeriodElapsedCallback+0x1e>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032ee:	bd08      	pop	{r3, pc}
		ulHighFreqTimerTicks ++;
 80032f0:	4a05      	ldr	r2, [pc, #20]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80032f2:	6813      	ldr	r3, [r2, #0]
 80032f4:	3301      	adds	r3, #1
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	e7f5      	b.n	80032e6 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
 80032fa:	f000 ff3b 	bl	8004174 <HAL_IncTick>
}
 80032fe:	e7f6      	b.n	80032ee <HAL_TIM_PeriodElapsedCallback+0x12>
 8003300:	40014800 	.word	0x40014800
 8003304:	40014400 	.word	0x40014400
 8003308:	200030a8 	.word	0x200030a8

0800330c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//while(1);
  /* USER CODE END Error_Handler_Debug */
}
 800330c:	4770      	bx	lr
	...

08003310 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003310:	b500      	push	{lr}
 8003312:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003314:	2200      	movs	r2, #0
 8003316:	9200      	str	r2, [sp, #0]
 8003318:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <HAL_MspInit+0x40>)
 800331a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800331c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003320:	6459      	str	r1, [r3, #68]	; 0x44
 8003322:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003324:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003328:	9100      	str	r1, [sp, #0]
 800332a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800332c:	9201      	str	r2, [sp, #4]
 800332e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003330:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003334:	6419      	str	r1, [r3, #64]	; 0x40
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003340:	210f      	movs	r1, #15
 8003342:	f06f 0001 	mvn.w	r0, #1
 8003346:	f001 f8c7 	bl	80044d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800334a:	b003      	add	sp, #12
 800334c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003350:	40023800 	.word	0x40023800

08003354 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8003354:	6802      	ldr	r2, [r0, #0]
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_ADC_MspInit+0x28>)
 8003358:	429a      	cmp	r2, r3
 800335a:	d000      	beq.n	800335e <HAL_ADC_MspInit+0xa>
 800335c:	4770      	bx	lr
{
 800335e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003360:	2300      	movs	r3, #0
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_ADC_MspInit+0x2c>)
 8003366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800336c:	645a      	str	r2, [r3, #68]	; 0x44
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	9301      	str	r3, [sp, #4]
 8003376:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003378:	b002      	add	sp, #8
 800337a:	4770      	bx	lr
 800337c:	40012000 	.word	0x40012000
 8003380:	40023800 	.word	0x40023800

08003384 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8003384:	6802      	ldr	r2, [r0, #0]
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <HAL_CRC_MspInit+0x28>)
 8003388:	429a      	cmp	r2, r3
 800338a:	d000      	beq.n	800338e <HAL_CRC_MspInit+0xa>
 800338c:	4770      	bx	lr
{
 800338e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003390:	2300      	movs	r3, #0
 8003392:	9301      	str	r3, [sp, #4]
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_CRC_MspInit+0x2c>)
 8003396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003398:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a4:	9301      	str	r3, [sp, #4]
 80033a6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80033a8:	b002      	add	sp, #8
 80033aa:	4770      	bx	lr
 80033ac:	40023000 	.word	0x40023000
 80033b0:	40023800 	.word	0x40023800

080033b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033b4:	b530      	push	{r4, r5, lr}
 80033b6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b8:	2300      	movs	r3, #0
 80033ba:	9303      	str	r3, [sp, #12]
 80033bc:	9304      	str	r3, [sp, #16]
 80033be:	9305      	str	r3, [sp, #20]
 80033c0:	9306      	str	r3, [sp, #24]
 80033c2:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 80033c4:	6802      	ldr	r2, [r0, #0]
 80033c6:	4b15      	ldr	r3, [pc, #84]	; (800341c <HAL_I2C_MspInit+0x68>)
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033cc:	b009      	add	sp, #36	; 0x24
 80033ce:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d0:	2500      	movs	r5, #0
 80033d2:	9501      	str	r5, [sp, #4]
 80033d4:	4c12      	ldr	r4, [pc, #72]	; (8003420 <HAL_I2C_MspInit+0x6c>)
 80033d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033d8:	f043 0302 	orr.w	r3, r3, #2
 80033dc:	6323      	str	r3, [r4, #48]	; 0x30
 80033de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033ee:	2312      	movs	r3, #18
 80033f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033f2:	2301      	movs	r3, #1
 80033f4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f6:	2303      	movs	r3, #3
 80033f8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033fa:	2304      	movs	r3, #4
 80033fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fe:	a903      	add	r1, sp, #12
 8003400:	4808      	ldr	r0, [pc, #32]	; (8003424 <HAL_I2C_MspInit+0x70>)
 8003402:	f001 fb37 	bl	8004a74 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003406:	9502      	str	r5, [sp, #8]
 8003408:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800340a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800340e:	6423      	str	r3, [r4, #64]	; 0x40
 8003410:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003416:	9302      	str	r3, [sp, #8]
 8003418:	9b02      	ldr	r3, [sp, #8]
}
 800341a:	e7d7      	b.n	80033cc <HAL_I2C_MspInit+0x18>
 800341c:	40005400 	.word	0x40005400
 8003420:	40023800 	.word	0x40023800
 8003424:	40020400 	.word	0x40020400

08003428 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8003428:	6802      	ldr	r2, [r0, #0]
 800342a:	4b04      	ldr	r3, [pc, #16]	; (800343c <HAL_RTC_MspInit+0x14>)
 800342c:	429a      	cmp	r2, r3
 800342e:	d000      	beq.n	8003432 <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003430:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8003432:	4b03      	ldr	r3, [pc, #12]	; (8003440 <HAL_RTC_MspInit+0x18>)
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]
}
 8003438:	e7fa      	b.n	8003430 <HAL_RTC_MspInit+0x8>
 800343a:	bf00      	nop
 800343c:	40002800 	.word	0x40002800
 8003440:	42470e3c 	.word	0x42470e3c

08003444 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003444:	b500      	push	{lr}
 8003446:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	2300      	movs	r3, #0
 800344a:	9303      	str	r3, [sp, #12]
 800344c:	9304      	str	r3, [sp, #16]
 800344e:	9305      	str	r3, [sp, #20]
 8003450:	9306      	str	r3, [sp, #24]
 8003452:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8003454:	6802      	ldr	r2, [r0, #0]
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <HAL_SPI_MspInit+0x68>)
 8003458:	429a      	cmp	r2, r3
 800345a:	d002      	beq.n	8003462 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800345c:	b009      	add	sp, #36	; 0x24
 800345e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003462:	2100      	movs	r1, #0
 8003464:	9101      	str	r1, [sp, #4]
 8003466:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800346a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800346c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003470:	645a      	str	r2, [r3, #68]	; 0x44
 8003472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003474:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003478:	9201      	str	r2, [sp, #4]
 800347a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347c:	9102      	str	r1, [sp, #8]
 800347e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	631a      	str	r2, [r3, #48]	; 0x30
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	9302      	str	r3, [sp, #8]
 800348e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003490:	23e0      	movs	r3, #224	; 0xe0
 8003492:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003494:	2302      	movs	r3, #2
 8003496:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003498:	2303      	movs	r3, #3
 800349a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800349c:	2305      	movs	r3, #5
 800349e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a0:	a903      	add	r1, sp, #12
 80034a2:	4803      	ldr	r0, [pc, #12]	; (80034b0 <HAL_SPI_MspInit+0x6c>)
 80034a4:	f001 fae6 	bl	8004a74 <HAL_GPIO_Init>
}
 80034a8:	e7d8      	b.n	800345c <HAL_SPI_MspInit+0x18>
 80034aa:	bf00      	nop
 80034ac:	40013000 	.word	0x40013000
 80034b0:	40020000 	.word	0x40020000

080034b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80034b4:	b510      	push	{r4, lr}
 80034b6:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 80034b8:	6803      	ldr	r3, [r0, #0]
 80034ba:	4a21      	ldr	r2, [pc, #132]	; (8003540 <HAL_TIM_PWM_MspInit+0x8c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d007      	beq.n	80034d0 <HAL_TIM_PWM_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 80034c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c4:	d021      	beq.n	800350a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 80034c6:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <HAL_TIM_PWM_MspInit+0x90>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d02b      	beq.n	8003524 <HAL_TIM_PWM_MspInit+0x70>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80034cc:	b004      	add	sp, #16
 80034ce:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034d0:	2400      	movs	r4, #0
 80034d2:	9401      	str	r4, [sp, #4]
 80034d4:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <HAL_TIM_PWM_MspInit+0x94>)
 80034d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80034e8:	4622      	mov	r2, r4
 80034ea:	4621      	mov	r1, r4
 80034ec:	2019      	movs	r0, #25
 80034ee:	f000 fff3 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80034f2:	2019      	movs	r0, #25
 80034f4:	f001 f824 	bl	8004540 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80034f8:	4622      	mov	r2, r4
 80034fa:	2105      	movs	r1, #5
 80034fc:	201a      	movs	r0, #26
 80034fe:	f000 ffeb 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003502:	201a      	movs	r0, #26
 8003504:	f001 f81c 	bl	8004540 <HAL_NVIC_EnableIRQ>
 8003508:	e7e0      	b.n	80034cc <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	9302      	str	r3, [sp, #8]
 800350e:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <HAL_TIM_PWM_MspInit+0x94>)
 8003510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	9302      	str	r3, [sp, #8]
 8003520:	9b02      	ldr	r3, [sp, #8]
 8003522:	e7d3      	b.n	80034cc <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003524:	2300      	movs	r3, #0
 8003526:	9303      	str	r3, [sp, #12]
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <HAL_TIM_PWM_MspInit+0x94>)
 800352a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800352c:	f042 0202 	orr.w	r2, r2, #2
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	9303      	str	r3, [sp, #12]
 800353a:	9b03      	ldr	r3, [sp, #12]
}
 800353c:	e7c6      	b.n	80034cc <HAL_TIM_PWM_MspInit+0x18>
 800353e:	bf00      	nop
 8003540:	40010000 	.word	0x40010000
 8003544:	40000400 	.word	0x40000400
 8003548:	40023800 	.word	0x40023800

0800354c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 800354c:	6802      	ldr	r2, [r0, #0]
 800354e:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <HAL_TIM_Base_MspInit+0x3c>)
 8003550:	429a      	cmp	r2, r3
 8003552:	d000      	beq.n	8003556 <HAL_TIM_Base_MspInit+0xa>
 8003554:	4770      	bx	lr
{
 8003556:	b500      	push	{lr}
 8003558:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800355a:	2200      	movs	r2, #0
 800355c:	9201      	str	r2, [sp, #4]
 800355e:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8003562:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003564:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8003568:	6459      	str	r1, [r3, #68]	; 0x44
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	9b01      	ldr	r3, [sp, #4]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8003574:	2105      	movs	r1, #5
 8003576:	201a      	movs	r0, #26
 8003578:	f000 ffae 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800357c:	201a      	movs	r0, #26
 800357e:	f000 ffdf 	bl	8004540 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003582:	b003      	add	sp, #12
 8003584:	f85d fb04 	ldr.w	pc, [sp], #4
 8003588:	40014800 	.word	0x40014800

0800358c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	2300      	movs	r3, #0
 8003592:	9305      	str	r3, [sp, #20]
 8003594:	9306      	str	r3, [sp, #24]
 8003596:	9307      	str	r3, [sp, #28]
 8003598:	9308      	str	r3, [sp, #32]
 800359a:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim->Instance==TIM1)
 800359c:	6803      	ldr	r3, [r0, #0]
 800359e:	4a32      	ldr	r2, [pc, #200]	; (8003668 <HAL_TIM_MspPostInit+0xdc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d007      	beq.n	80035b4 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 80035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a8:	d01c      	beq.n	80035e4 <HAL_TIM_MspPostInit+0x58>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 80035aa:	4a30      	ldr	r2, [pc, #192]	; (800366c <HAL_TIM_MspPostInit+0xe0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d045      	beq.n	800363c <HAL_TIM_MspPostInit+0xb0>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80035b0:	b00a      	add	sp, #40	; 0x28
 80035b2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b4:	2300      	movs	r3, #0
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	4b2d      	ldr	r3, [pc, #180]	; (8003670 <HAL_TIM_MspPostInit+0xe4>)
 80035ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	9301      	str	r3, [sp, #4]
 80035ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80035cc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80035d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d2:	2302      	movs	r3, #2
 80035d4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035d6:	2301      	movs	r3, #1
 80035d8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035da:	a905      	add	r1, sp, #20
 80035dc:	4825      	ldr	r0, [pc, #148]	; (8003674 <HAL_TIM_MspPostInit+0xe8>)
 80035de:	f001 fa49 	bl	8004a74 <HAL_GPIO_Init>
 80035e2:	e7e5      	b.n	80035b0 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e4:	2400      	movs	r4, #0
 80035e6:	9402      	str	r4, [sp, #8]
 80035e8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80035ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
 80035f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f6:	f002 0201 	and.w	r2, r2, #1
 80035fa:	9202      	str	r2, [sp, #8]
 80035fc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fe:	9403      	str	r4, [sp, #12]
 8003600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003602:	f042 0202 	orr.w	r2, r2, #2
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	9303      	str	r3, [sp, #12]
 8003610:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003612:	2501      	movs	r5, #1
 8003614:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003616:	2602      	movs	r6, #2
 8003618:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800361a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361c:	a905      	add	r1, sp, #20
 800361e:	4815      	ldr	r0, [pc, #84]	; (8003674 <HAL_TIM_MspPostInit+0xe8>)
 8003620:	f001 fa28 	bl	8004a74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8003624:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8003628:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362e:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003630:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003632:	a905      	add	r1, sp, #20
 8003634:	4810      	ldr	r0, [pc, #64]	; (8003678 <HAL_TIM_MspPostInit+0xec>)
 8003636:	f001 fa1d 	bl	8004a74 <HAL_GPIO_Init>
 800363a:	e7b9      	b.n	80035b0 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800363c:	2300      	movs	r3, #0
 800363e:	9304      	str	r3, [sp, #16]
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_TIM_MspPostInit+0xe4>)
 8003642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003644:	f042 0202 	orr.w	r2, r2, #2
 8003648:	631a      	str	r2, [r3, #48]	; 0x30
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	9304      	str	r3, [sp, #16]
 8003652:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8003654:	2331      	movs	r3, #49	; 0x31
 8003656:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003658:	2302      	movs	r3, #2
 800365a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800365c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365e:	a905      	add	r1, sp, #20
 8003660:	4805      	ldr	r0, [pc, #20]	; (8003678 <HAL_TIM_MspPostInit+0xec>)
 8003662:	f001 fa07 	bl	8004a74 <HAL_GPIO_Init>
}
 8003666:	e7a3      	b.n	80035b0 <HAL_TIM_MspPostInit+0x24>
 8003668:	40010000 	.word	0x40010000
 800366c:	40000400 	.word	0x40000400
 8003670:	40023800 	.word	0x40023800
 8003674:	40020000 	.word	0x40020000
 8003678:	40020400 	.word	0x40020400

0800367c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800367c:	b530      	push	{r4, r5, lr}
 800367e:	b08d      	sub	sp, #52	; 0x34
 8003680:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003682:	2300      	movs	r3, #0
 8003684:	9307      	str	r3, [sp, #28]
 8003686:	9308      	str	r3, [sp, #32]
 8003688:	9309      	str	r3, [sp, #36]	; 0x24
 800368a:	930a      	str	r3, [sp, #40]	; 0x28
 800368c:	930b      	str	r3, [sp, #44]	; 0x2c
  if(huart->Instance==USART1)
 800368e:	6803      	ldr	r3, [r0, #0]
 8003690:	4a6e      	ldr	r2, [pc, #440]	; (800384c <HAL_UART_MspInit+0x1d0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d008      	beq.n	80036a8 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8003696:	4a6e      	ldr	r2, [pc, #440]	; (8003850 <HAL_UART_MspInit+0x1d4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d04b      	beq.n	8003734 <HAL_UART_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 800369c:	4a6d      	ldr	r2, [pc, #436]	; (8003854 <HAL_UART_MspInit+0x1d8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	f000 808c 	beq.w	80037bc <HAL_UART_MspInit+0x140>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80036a4:	b00d      	add	sp, #52	; 0x34
 80036a6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80036a8:	2500      	movs	r5, #0
 80036aa:	9501      	str	r5, [sp, #4]
 80036ac:	4b6a      	ldr	r3, [pc, #424]	; (8003858 <HAL_UART_MspInit+0x1dc>)
 80036ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b0:	f042 0210 	orr.w	r2, r2, #16
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
 80036b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b8:	f002 0210 	and.w	r2, r2, #16
 80036bc:	9201      	str	r2, [sp, #4]
 80036be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c0:	9502      	str	r5, [sp, #8]
 80036c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c4:	f042 0202 	orr.w	r2, r2, #2
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	9302      	str	r3, [sp, #8]
 80036d2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036d4:	23c0      	movs	r3, #192	; 0xc0
 80036d6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036dc:	2303      	movs	r3, #3
 80036de:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036e0:	2307      	movs	r3, #7
 80036e2:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e4:	a907      	add	r1, sp, #28
 80036e6:	485d      	ldr	r0, [pc, #372]	; (800385c <HAL_UART_MspInit+0x1e0>)
 80036e8:	f001 f9c4 	bl	8004a74 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80036ec:	485c      	ldr	r0, [pc, #368]	; (8003860 <HAL_UART_MspInit+0x1e4>)
 80036ee:	4b5d      	ldr	r3, [pc, #372]	; (8003864 <HAL_UART_MspInit+0x1e8>)
 80036f0:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80036f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036f6:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036f8:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036fa:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003700:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003702:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003704:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800370a:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800370c:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800370e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003710:	f000 ffc8 	bl	80046a4 <HAL_DMA_Init>
 8003714:	b958      	cbnz	r0, 800372e <HAL_UART_MspInit+0xb2>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003716:	4b52      	ldr	r3, [pc, #328]	; (8003860 <HAL_UART_MspInit+0x1e4>)
 8003718:	6363      	str	r3, [r4, #52]	; 0x34
 800371a:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800371c:	2200      	movs	r2, #0
 800371e:	2105      	movs	r1, #5
 8003720:	2025      	movs	r0, #37	; 0x25
 8003722:	f000 fed9 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003726:	2025      	movs	r0, #37	; 0x25
 8003728:	f000 ff0a 	bl	8004540 <HAL_NVIC_EnableIRQ>
 800372c:	e7ba      	b.n	80036a4 <HAL_UART_MspInit+0x28>
      Error_Handler();
 800372e:	f7ff fded 	bl	800330c <Error_Handler>
 8003732:	e7f0      	b.n	8003716 <HAL_UART_MspInit+0x9a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003734:	2500      	movs	r5, #0
 8003736:	9503      	str	r5, [sp, #12]
 8003738:	4b47      	ldr	r3, [pc, #284]	; (8003858 <HAL_UART_MspInit+0x1dc>)
 800373a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
 8003742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003744:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003748:	9203      	str	r2, [sp, #12]
 800374a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374c:	9504      	str	r5, [sp, #16]
 800374e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003750:	f042 0201 	orr.w	r2, r2, #1
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	9304      	str	r3, [sp, #16]
 800375e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003760:	230c      	movs	r3, #12
 8003762:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003764:	2302      	movs	r3, #2
 8003766:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003768:	2303      	movs	r3, #3
 800376a:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800376c:	2307      	movs	r3, #7
 800376e:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003770:	a907      	add	r1, sp, #28
 8003772:	483d      	ldr	r0, [pc, #244]	; (8003868 <HAL_UART_MspInit+0x1ec>)
 8003774:	f001 f97e 	bl	8004a74 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003778:	483c      	ldr	r0, [pc, #240]	; (800386c <HAL_UART_MspInit+0x1f0>)
 800377a:	4b3d      	ldr	r3, [pc, #244]	; (8003870 <HAL_UART_MspInit+0x1f4>)
 800377c:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800377e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003782:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003784:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003786:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800378c:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800378e:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003790:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003792:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003794:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003796:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003798:	f000 ff84 	bl	80046a4 <HAL_DMA_Init>
 800379c:	b958      	cbnz	r0, 80037b6 <HAL_UART_MspInit+0x13a>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800379e:	4b33      	ldr	r3, [pc, #204]	; (800386c <HAL_UART_MspInit+0x1f0>)
 80037a0:	6363      	str	r3, [r4, #52]	; 0x34
 80037a2:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80037a4:	2200      	movs	r2, #0
 80037a6:	2105      	movs	r1, #5
 80037a8:	2026      	movs	r0, #38	; 0x26
 80037aa:	f000 fe95 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037ae:	2026      	movs	r0, #38	; 0x26
 80037b0:	f000 fec6 	bl	8004540 <HAL_NVIC_EnableIRQ>
 80037b4:	e776      	b.n	80036a4 <HAL_UART_MspInit+0x28>
      Error_Handler();
 80037b6:	f7ff fda9 	bl	800330c <Error_Handler>
 80037ba:	e7f0      	b.n	800379e <HAL_UART_MspInit+0x122>
    __HAL_RCC_USART6_CLK_ENABLE();
 80037bc:	2500      	movs	r5, #0
 80037be:	9505      	str	r5, [sp, #20]
 80037c0:	4b25      	ldr	r3, [pc, #148]	; (8003858 <HAL_UART_MspInit+0x1dc>)
 80037c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037c4:	f042 0220 	orr.w	r2, r2, #32
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
 80037ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037cc:	f002 0220 	and.w	r2, r2, #32
 80037d0:	9205      	str	r2, [sp, #20]
 80037d2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d4:	9506      	str	r5, [sp, #24]
 80037d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	9306      	str	r3, [sp, #24]
 80037e6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80037e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80037ec:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ee:	2302      	movs	r3, #2
 80037f0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f2:	2303      	movs	r3, #3
 80037f4:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80037f6:	2308      	movs	r3, #8
 80037f8:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037fa:	a907      	add	r1, sp, #28
 80037fc:	481a      	ldr	r0, [pc, #104]	; (8003868 <HAL_UART_MspInit+0x1ec>)
 80037fe:	f001 f939 	bl	8004a74 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003802:	481c      	ldr	r0, [pc, #112]	; (8003874 <HAL_UART_MspInit+0x1f8>)
 8003804:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <HAL_UART_MspInit+0x1fc>)
 8003806:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003808:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 800380c:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800380e:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003810:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003816:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003818:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800381a:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800381c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003820:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003822:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003824:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003826:	f000 ff3d 	bl	80046a4 <HAL_DMA_Init>
 800382a:	b958      	cbnz	r0, 8003844 <HAL_UART_MspInit+0x1c8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800382c:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_UART_MspInit+0x1f8>)
 800382e:	6363      	str	r3, [r4, #52]	; 0x34
 8003830:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003832:	2200      	movs	r2, #0
 8003834:	2105      	movs	r1, #5
 8003836:	2047      	movs	r0, #71	; 0x47
 8003838:	f000 fe4e 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800383c:	2047      	movs	r0, #71	; 0x47
 800383e:	f000 fe7f 	bl	8004540 <HAL_NVIC_EnableIRQ>
}
 8003842:	e72f      	b.n	80036a4 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8003844:	f7ff fd62 	bl	800330c <Error_Handler>
 8003848:	e7f0      	b.n	800382c <HAL_UART_MspInit+0x1b0>
 800384a:	bf00      	nop
 800384c:	40011000 	.word	0x40011000
 8003850:	40004400 	.word	0x40004400
 8003854:	40011400 	.word	0x40011400
 8003858:	40023800 	.word	0x40023800
 800385c:	40020400 	.word	0x40020400
 8003860:	20002e44 	.word	0x20002e44
 8003864:	40026440 	.word	0x40026440
 8003868:	40020000 	.word	0x40020000
 800386c:	20002c98 	.word	0x20002c98
 8003870:	40026088 	.word	0x40026088
 8003874:	20002cf8 	.word	0x20002cf8
 8003878:	40026428 	.word	0x40026428

0800387c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800387c:	b510      	push	{r4, lr}
 800387e:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8003880:	2200      	movs	r2, #0
 8003882:	4601      	mov	r1, r0
 8003884:	2019      	movs	r0, #25
 8003886:	f000 fe27 	bl	80044d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800388a:	2019      	movs	r0, #25
 800388c:	f000 fe58 	bl	8004540 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8003890:	2400      	movs	r4, #0
 8003892:	9401      	str	r4, [sp, #4]
 8003894:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <HAL_InitTick+0x68>)
 8003896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003898:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038a8:	a902      	add	r1, sp, #8
 80038aa:	a803      	add	r0, sp, #12
 80038ac:	f002 fa2c 	bl	8005d08 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80038b0:	f002 fa1a 	bl	8005ce8 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <HAL_InitTick+0x6c>)
 80038b6:	fba3 2300 	umull	r2, r3, r3, r0
 80038ba:	0c9b      	lsrs	r3, r3, #18
 80038bc:	3b01      	subs	r3, #1
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80038be:	480b      	ldr	r0, [pc, #44]	; (80038ec <HAL_InitTick+0x70>)
 80038c0:	4a0b      	ldr	r2, [pc, #44]	; (80038f0 <HAL_InitTick+0x74>)
 80038c2:	6002      	str	r2, [r0, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 80038c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038c8:	60c2      	str	r2, [r0, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80038ca:	6043      	str	r3, [r0, #4]
  htim10.Init.ClockDivision = 0;
 80038cc:	6104      	str	r4, [r0, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ce:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80038d0:	f003 fa28 	bl	8006d24 <HAL_TIM_Base_Init>
 80038d4:	b110      	cbz	r0, 80038dc <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80038d6:	2001      	movs	r0, #1
}
 80038d8:	b008      	add	sp, #32
 80038da:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim10);
 80038dc:	4803      	ldr	r0, [pc, #12]	; (80038ec <HAL_InitTick+0x70>)
 80038de:	f003 f901 	bl	8006ae4 <HAL_TIM_Base_Start_IT>
 80038e2:	e7f9      	b.n	80038d8 <HAL_InitTick+0x5c>
 80038e4:	40023800 	.word	0x40023800
 80038e8:	431bde83 	.word	0x431bde83
 80038ec:	200030b0 	.word	0x200030b0
 80038f0:	40014400 	.word	0x40014400

080038f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80038f6:	f002 fa27 	bl	8005d48 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038fa:	bd08      	pop	{r3, pc}

080038fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038fc:	e7fe      	b.n	80038fc <HardFault_Handler>

080038fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038fe:	e7fe      	b.n	80038fe <MemManage_Handler>

08003900 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003900:	e7fe      	b.n	8003900 <BusFault_Handler>

08003902 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003902:	e7fe      	b.n	8003902 <UsageFault_Handler>

08003904 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003904:	4770      	bx	lr

08003906 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003906:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003908:	2002      	movs	r0, #2
 800390a:	f001 f98b 	bl	8004c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800390e:	bd08      	pop	{r3, pc}

08003910 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003910:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003912:	4802      	ldr	r0, [pc, #8]	; (800391c <DMA1_Stream5_IRQHandler+0xc>)
 8003914:	f000 ffbe 	bl	8004894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003918:	bd08      	pop	{r3, pc}
 800391a:	bf00      	nop
 800391c:	20002c98 	.word	0x20002c98

08003920 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003920:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003922:	4803      	ldr	r0, [pc, #12]	; (8003930 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003924:	f003 f8f3 	bl	8006b0e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003928:	4802      	ldr	r0, [pc, #8]	; (8003934 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800392a:	f003 f8f0 	bl	8006b0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800392e:	bd08      	pop	{r3, pc}
 8003930:	20002f48 	.word	0x20002f48
 8003934:	200030b0 	.word	0x200030b0

08003938 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003938:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800393a:	4803      	ldr	r0, [pc, #12]	; (8003948 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800393c:	f003 f8e7 	bl	8006b0e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003940:	4802      	ldr	r0, [pc, #8]	; (800394c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003942:	f003 f8e4 	bl	8006b0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003946:	bd08      	pop	{r3, pc}
 8003948:	20002f48 	.word	0x20002f48
 800394c:	20002ee4 	.word	0x20002ee4

08003950 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003950:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_small_comm);
 8003952:	4802      	ldr	r0, [pc, #8]	; (800395c <USART1_IRQHandler+0xc>)
 8003954:	f7ff f844 	bl	80029e0 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003958:	bd08      	pop	{r3, pc}
 800395a:	bf00      	nop
 800395c:	20002b68 	.word	0x20002b68

08003960 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003960:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003962:	4802      	ldr	r0, [pc, #8]	; (800396c <USART2_IRQHandler+0xc>)
 8003964:	f003 febc 	bl	80076e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003968:	bd08      	pop	{r3, pc}
 800396a:	bf00      	nop
 800396c:	20003060 	.word	0x20003060

08003970 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003970:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003972:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003976:	f001 f955 	bl	8004c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800397a:	bd08      	pop	{r3, pc}

0800397c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800397c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_big_comm);
 800397e:	4802      	ldr	r0, [pc, #8]	; (8003988 <DMA2_Stream1_IRQHandler+0xc>)
 8003980:	f7ff f844 	bl	8002a0c <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003984:	bd08      	pop	{r3, pc}
 8003986:	bf00      	nop
 8003988:	20002ab4 	.word	0x20002ab4

0800398c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800398c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_small_comm);
 800398e:	4802      	ldr	r0, [pc, #8]	; (8003998 <DMA2_Stream2_IRQHandler+0xc>)
 8003990:	f7ff f83c 	bl	8002a0c <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003994:	bd08      	pop	{r3, pc}
 8003996:	bf00      	nop
 8003998:	20002b68 	.word	0x20002b68

0800399c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800399c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_big_comm);
 800399e:	4802      	ldr	r0, [pc, #8]	; (80039a8 <USART6_IRQHandler+0xc>)
 80039a0:	f7ff f81e 	bl	80029e0 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80039a4:	bd08      	pop	{r3, pc}
 80039a6:	bf00      	nop
 80039a8:	20002ab4 	.word	0x20002ab4

080039ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80039ac:	b508      	push	{r3, lr}
 80039ae:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80039b0:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <_sbrk+0x34>)
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	b142      	cbz	r2, 80039c8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <_sbrk+0x34>)
 80039b8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80039ba:	4403      	add	r3, r0
 80039bc:	466a      	mov	r2, sp
 80039be:	4293      	cmp	r3, r2
 80039c0:	d806      	bhi.n	80039d0 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80039c2:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <_sbrk+0x34>)
 80039c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80039c6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80039c8:	4a05      	ldr	r2, [pc, #20]	; (80039e0 <_sbrk+0x34>)
 80039ca:	4906      	ldr	r1, [pc, #24]	; (80039e4 <_sbrk+0x38>)
 80039cc:	6011      	str	r1, [r2, #0]
 80039ce:	e7f2      	b.n	80039b6 <_sbrk+0xa>
		errno = ENOMEM;
 80039d0:	f006 f8b2 	bl	8009b38 <__errno>
 80039d4:	230c      	movs	r3, #12
 80039d6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295
 80039dc:	e7f3      	b.n	80039c6 <_sbrk+0x1a>
 80039de:	bf00      	nop
 80039e0:	200007e8 	.word	0x200007e8
 80039e4:	20003138 	.word	0x20003138

080039e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <SystemInit+0x18>)
 80039ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039ee:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80039f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039fa:	609a      	str	r2, [r3, #8]
#endif
}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8003a04:	b508      	push	{r3, lr}
	vTaskDelay(Time);
 8003a06:	f005 f827 	bl	8008a58 <vTaskDelay>
}
 8003a0a:	bd08      	pop	{r3, pc}

08003a0c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8003a0c:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8003a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a12:	460a      	mov	r2, r1
 8003a14:	4601      	mov	r1, r0
 8003a16:	4802      	ldr	r0, [pc, #8]	; (8003a20 <nRF24_SendSpi+0x14>)
 8003a18:	6800      	ldr	r0, [r0, #0]
 8003a1a:	f002 fd49 	bl	80064b0 <HAL_SPI_Transmit>
}
 8003a1e:	bd08      	pop	{r3, pc}
 8003a20:	20000800 	.word	0x20000800

08003a24 <nRF24_WriteRegister>:

	NRF24_CSN_HIGH;
}

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8003a24:	b500      	push	{lr}
 8003a26:	b083      	sub	sp, #12
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8003a28:	f040 0020 	orr.w	r0, r0, #32
 8003a2c:	f88d 0004 	strb.w	r0, [sp, #4]
	tmp[1] = val;
 8003a30:	f88d 1005 	strb.w	r1, [sp, #5]

	NRF24_CSN_LOW;
 8003a34:	f7fe fd52 	bl	80024dc <NRF_ChipSelect>

	nRF24_SendSpi(tmp, 2);
 8003a38:	2102      	movs	r1, #2
 8003a3a:	a801      	add	r0, sp, #4
 8003a3c:	f7ff ffe6 	bl	8003a0c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8003a40:	f7fe fd5e 	bl	8002500 <NRF_ChipDeselect>
}
 8003a44:	b003      	add	sp, #12
 8003a46:	f85d fb04 	ldr.w	pc, [sp], #4

08003a4a <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8003a4a:	b570      	push	{r4, r5, r6, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	460d      	mov	r5, r1
 8003a50:	4616      	mov	r6, r2
	reg = NRF24_CMD_W_REGISTER | reg;
 8003a52:	f040 0020 	orr.w	r0, r0, #32
 8003a56:	ac02      	add	r4, sp, #8
 8003a58:	f804 0d01 	strb.w	r0, [r4, #-1]!

	NRF24_CSN_LOW;
 8003a5c:	f7fe fd3e 	bl	80024dc <NRF_ChipSelect>

	nRF24_SendSpi(&reg, 1);
 8003a60:	2101      	movs	r1, #1
 8003a62:	4620      	mov	r0, r4
 8003a64:	f7ff ffd2 	bl	8003a0c <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8003a68:	4631      	mov	r1, r6
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f7ff ffce 	bl	8003a0c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8003a70:	f7fe fd46 	bl	8002500 <NRF_ChipDeselect>
}
 8003a74:	b002      	add	sp, #8
 8003a76:	bd70      	pop	{r4, r5, r6, pc}

08003a78 <nRF24_ReadSpi>:
{
 8003a78:	b508      	push	{r3, lr}
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8003a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a7e:	460a      	mov	r2, r1
 8003a80:	4601      	mov	r1, r0
 8003a82:	4802      	ldr	r0, [pc, #8]	; (8003a8c <nRF24_ReadSpi+0x14>)
 8003a84:	6800      	ldr	r0, [r0, #0]
 8003a86:	f002 fef7 	bl	8006878 <HAL_SPI_Receive>
}
 8003a8a:	bd08      	pop	{r3, pc}
 8003a8c:	20000800 	.word	0x20000800

08003a90 <nRF24_ReadRegister>:
{
 8003a90:	b510      	push	{r4, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	ac04      	add	r4, sp, #16
 8003a96:	f804 0d09 	strb.w	r0, [r4, #-9]!
	NRF24_CSN_LOW;
 8003a9a:	f7fe fd1f 	bl	80024dc <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f7ff ffb3 	bl	8003a0c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	f10d 000f 	add.w	r0, sp, #15
 8003aac:	f7ff ffe4 	bl	8003a78 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8003ab0:	f7fe fd26 	bl	8002500 <NRF_ChipDeselect>
}
 8003ab4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8003ab8:	b004      	add	sp, #16
 8003aba:	bd10      	pop	{r4, pc}

08003abc <nRF24_ReadRegisters>:
{
 8003abc:	b570      	push	{r4, r5, r6, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	460d      	mov	r5, r1
 8003ac2:	4616      	mov	r6, r2
 8003ac4:	ac02      	add	r4, sp, #8
 8003ac6:	f804 0d01 	strb.w	r0, [r4, #-1]!
	NRF24_CSN_LOW;
 8003aca:	f7fe fd07 	bl	80024dc <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 8003ace:	2101      	movs	r1, #1
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f7ff ff9b 	bl	8003a0c <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8003ad6:	4631      	mov	r1, r6
 8003ad8:	4628      	mov	r0, r5
 8003ada:	f7ff ffcd 	bl	8003a78 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8003ade:	f7fe fd0f 	bl	8002500 <NRF_ChipDeselect>
}
 8003ae2:	b002      	add	sp, #8
 8003ae4:	bd70      	pop	{r4, r5, r6, pc}

08003ae6 <nRF24_ReadConfig>:

	nRF24_Delay_ms(1);
}

uint8_t nRF24_ReadConfig(void)
{
 8003ae6:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f7ff ffd1 	bl	8003a90 <nRF24_ReadRegister>
}
 8003aee:	bd08      	pop	{r3, pc}

08003af0 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8003af0:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8003af2:	4601      	mov	r1, r0
 8003af4:	2000      	movs	r0, #0
 8003af6:	f7ff ff95 	bl	8003a24 <nRF24_WriteRegister>
}
 8003afa:	bd08      	pop	{r3, pc}

08003afc <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8003afc:	b510      	push	{r4, lr}
 8003afe:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8003b00:	2006      	movs	r0, #6
 8003b02:	f7ff ffc5 	bl	8003a90 <nRF24_ReadRegister>
	rf_setup &= 0xF8; // Clear PWR bits
 8003b06:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	rf_setup |= (lev<<1);
 8003b0a:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8003b0e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8003b12:	2006      	movs	r0, #6
 8003b14:	f7ff ff86 	bl	8003a24 <nRF24_WriteRegister>
}
 8003b18:	bd10      	pop	{r4, pc}

08003b1a <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8003b1a:	b510      	push	{r4, lr}
 8003b1c:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8003b1e:	2006      	movs	r0, #6
 8003b20:	f7ff ffb6 	bl	8003a90 <nRF24_ReadRegister>
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8003b24:	f000 01d7 	and.w	r1, r0, #215	; 0xd7
	if(dr == NRF24_RF_DR_250KBPS)
 8003b28:	2c02      	cmp	r4, #2
 8003b2a:	d005      	beq.n	8003b38 <nRF24_SetDataRate+0x1e>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
	else if(dr == NRF24_RF_DR_2MBPS)
 8003b2c:	2c01      	cmp	r4, #1
 8003b2e:	d006      	beq.n	8003b3e <nRF24_SetDataRate+0x24>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8003b30:	2006      	movs	r0, #6
 8003b32:	f7ff ff77 	bl	8003a24 <nRF24_WriteRegister>
}
 8003b36:	bd10      	pop	{r4, pc}
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8003b38:	f041 0120 	orr.w	r1, r1, #32
 8003b3c:	e7f8      	b.n	8003b30 <nRF24_SetDataRate+0x16>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8003b3e:	f041 0108 	orr.w	r1, r1, #8
 8003b42:	e7f5      	b.n	8003b30 <nRF24_SetDataRate+0x16>

08003b44 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8003b44:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_STATUS));
 8003b46:	2007      	movs	r0, #7
 8003b48:	f7ff ffa2 	bl	8003a90 <nRF24_ReadRegister>
}
 8003b4c:	bd08      	pop	{r3, pc}

08003b4e <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8003b4e:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_STATUS, st);
 8003b50:	4601      	mov	r1, r0
 8003b52:	2007      	movs	r0, #7
 8003b54:	f7ff ff66 	bl	8003a24 <nRF24_WriteRegister>
}
 8003b58:	bd08      	pop	{r3, pc}

08003b5a <nRF24_ReadFifoStatus>:
//
// FIFO Status
//

uint8_t nRF24_ReadFifoStatus(void)
{
 8003b5a:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 8003b5c:	2017      	movs	r0, #23
 8003b5e:	f7ff ff97 	bl	8003a90 <nRF24_ReadRegister>
}
 8003b62:	bd08      	pop	{r3, pc}

08003b64 <nRF24_IsBitSetInFifoStatus>:
{
	nRF24_WriteRegister(NRF24_FIFO_STATUS, st);
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8003b64:	b510      	push	{r4, lr}
 8003b66:	4604      	mov	r4, r0
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8003b68:	f7ff fff7 	bl	8003b5a <nRF24_ReadFifoStatus>

	if(FifoStatus & (1<<Bit))
 8003b6c:	4120      	asrs	r0, r4
 8003b6e:	f010 0f01 	tst.w	r0, #1
 8003b72:	d101      	bne.n	8003b78 <nRF24_IsBitSetInFifoStatus+0x14>
	{
		return 1;
	}

	return 0;
 8003b74:	2000      	movs	r0, #0
}
 8003b76:	bd10      	pop	{r4, pc}
		return 1;
 8003b78:	2001      	movs	r0, #1
 8003b7a:	e7fc      	b.n	8003b76 <nRF24_IsBitSetInFifoStatus+0x12>

08003b7c <nRF24_IsRxEmpty>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_FULL);
}

uint8_t nRF24_IsRxEmpty(void)
{
 8003b7c:	b508      	push	{r3, lr}
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f7ff fff0 	bl	8003b64 <nRF24_IsBitSetInFifoStatus>
}
 8003b84:	bd08      	pop	{r3, pc}

08003b86 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8003b86:	b510      	push	{r4, lr}
 8003b88:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8003b8a:	ac02      	add	r4, sp, #8
 8003b8c:	23e2      	movs	r3, #226	; 0xe2
 8003b8e:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8003b92:	f7fe fca3 	bl	80024dc <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8003b96:	2101      	movs	r1, #1
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f7ff ff37 	bl	8003a0c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8003b9e:	f7fe fcaf 	bl	8002500 <NRF_ChipDeselect>
}
 8003ba2:	b002      	add	sp, #8
 8003ba4:	bd10      	pop	{r4, pc}

08003ba6 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8003ba6:	b510      	push	{r4, lr}
 8003ba8:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8003baa:	ac02      	add	r4, sp, #8
 8003bac:	23e1      	movs	r3, #225	; 0xe1
 8003bae:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8003bb2:	f7fe fc93 	bl	80024dc <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	4620      	mov	r0, r4
 8003bba:	f7ff ff27 	bl	8003a0c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8003bbe:	f7fe fc9f 	bl	8002500 <NRF_ChipDeselect>
}
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd10      	pop	{r4, pc}
	...

08003bc8 <nRF24_TX_Mode>:
{
 8003bc8:	b508      	push	{r3, lr}
	NRF24_CE_LOW;
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bd0:	480a      	ldr	r0, [pc, #40]	; (8003bfc <nRF24_TX_Mode+0x34>)
 8003bd2:	f001 f821 	bl	8004c18 <HAL_GPIO_WritePin>
	uint8_t config = nRF24_ReadConfig();
 8003bd6:	f7ff ff86 	bl	8003ae6 <nRF24_ReadConfig>
 8003bda:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	nRF24_WriteConfig(config);
 8003bde:	f040 0002 	orr.w	r0, r0, #2
 8003be2:	f7ff ff85 	bl	8003af0 <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8003be6:	2070      	movs	r0, #112	; 0x70
 8003be8:	f7ff ffb1 	bl	8003b4e <nRF24_WriteStatus>
	nRF24_FlushRX();
 8003bec:	f7ff ffcb 	bl	8003b86 <nRF24_FlushRX>
	nRF24_FlushTX();
 8003bf0:	f7ff ffd9 	bl	8003ba6 <nRF24_FlushTX>
	nRF24_Delay_ms(1);
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	f7ff ff05 	bl	8003a04 <nRF24_Delay_ms>
}
 8003bfa:	bd08      	pop	{r3, pc}
 8003bfc:	40020400 	.word	0x40020400

08003c00 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8003c00:	b510      	push	{r4, lr}
 8003c02:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8003c04:	f7ff ff6f 	bl	8003ae6 <nRF24_ReadConfig>

	if(onoff)
 8003c08:	b924      	cbnz	r4, 8003c14 <nRF24_EnableCRC+0x14>
		config |= (1<<NRF24_EN_CRC);
	else
		config &= ~(1<<NRF24_EN_CRC);
 8003c0a:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
	nRF24_WriteConfig(config);
 8003c0e:	f7ff ff6f 	bl	8003af0 <nRF24_WriteConfig>
}
 8003c12:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_EN_CRC);
 8003c14:	f040 0008 	orr.w	r0, r0, #8
 8003c18:	b2c0      	uxtb	r0, r0
 8003c1a:	e7f8      	b.n	8003c0e <nRF24_EnableCRC+0xe>

08003c1c <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8003c1c:	b510      	push	{r4, lr}
 8003c1e:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8003c20:	f7ff ff61 	bl	8003ae6 <nRF24_ReadConfig>
	if(crcl == NRF24_CRC_WIDTH_2B)
 8003c24:	2c01      	cmp	r4, #1
 8003c26:	d004      	beq.n	8003c32 <nRF24_SetCRCLength+0x16>
		config |= (1<<NRF24_CRCO);
	else
		config &= ~(1<<NRF24_CRCO);
 8003c28:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
	nRF24_WriteConfig(config);
 8003c2c:	f7ff ff60 	bl	8003af0 <nRF24_WriteConfig>
}
 8003c30:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_CRCO);
 8003c32:	f040 0004 	orr.w	r0, r0, #4
 8003c36:	b2c0      	uxtb	r0, r0
 8003c38:	e7f8      	b.n	8003c2c <nRF24_SetCRCLength+0x10>

08003c3a <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8003c3a:	b508      	push	{r3, lr}
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8003c3c:	f001 010f 	and.w	r1, r1, #15
 8003c40:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8003c44:	b2c9      	uxtb	r1, r1
 8003c46:	2004      	movs	r0, #4
 8003c48:	f7ff feec 	bl	8003a24 <nRF24_WriteRegister>
}
 8003c4c:	bd08      	pop	{r3, pc}

08003c4e <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8003c4e:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8003c50:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8003c54:	2005      	movs	r0, #5
 8003c56:	f7ff fee5 	bl	8003a24 <nRF24_WriteRegister>
}
 8003c5a:	bd08      	pop	{r3, pc}

08003c5c <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	4604      	mov	r4, r0
 8003c60:	460d      	mov	r5, r1
	if(pipe > 5)
 8003c62:	2805      	cmp	r0, #5
 8003c64:	d900      	bls.n	8003c68 <nRF24_EnablePipe+0xc>
		pipe = 5; // Block too high pipe number
 8003c66:	2405      	movs	r4, #5
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8003c68:	2002      	movs	r0, #2
 8003c6a:	f7ff ff11 	bl	8003a90 <nRF24_ReadRegister>
	if(onoff == 1)
 8003c6e:	2d01      	cmp	r5, #1
 8003c70:	d008      	beq.n	8003c84 <nRF24_EnablePipe+0x28>
		enable_pipe |= (1<<pipe);
	else
		enable_pipe &= ~(1<<pipe);
 8003c72:	2101      	movs	r1, #1
 8003c74:	40a1      	lsls	r1, r4
 8003c76:	ea20 0101 	bic.w	r1, r0, r1
 8003c7a:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8003c7c:	2002      	movs	r0, #2
 8003c7e:	f7ff fed1 	bl	8003a24 <nRF24_WriteRegister>
}
 8003c82:	bd38      	pop	{r3, r4, r5, pc}
		enable_pipe |= (1<<pipe);
 8003c84:	2101      	movs	r1, #1
 8003c86:	40a1      	lsls	r1, r4
 8003c88:	4301      	orrs	r1, r0
 8003c8a:	b2c9      	uxtb	r1, r1
 8003c8c:	e7f6      	b.n	8003c7c <nRF24_EnablePipe+0x20>

08003c8e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8003c8e:	b538      	push	{r3, r4, r5, lr}
 8003c90:	4604      	mov	r4, r0
 8003c92:	460d      	mov	r5, r1
	if(pipe > 5)
 8003c94:	2805      	cmp	r0, #5
 8003c96:	d900      	bls.n	8003c9a <nRF24_AutoACK+0xc>
		pipe = 5; // Block too high pipe number
 8003c98:	2405      	movs	r4, #5
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	f7ff fef8 	bl	8003a90 <nRF24_ReadRegister>
	if(onoff == 1)
 8003ca0:	2d01      	cmp	r5, #1
 8003ca2:	d008      	beq.n	8003cb6 <nRF24_AutoACK+0x28>
		enaa |= (1<<pipe);
	else
		enaa &= ~(1<<pipe);
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	40a1      	lsls	r1, r4
 8003ca8:	ea20 0101 	bic.w	r1, r0, r1
 8003cac:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8003cae:	2001      	movs	r0, #1
 8003cb0:	f7ff feb8 	bl	8003a24 <nRF24_WriteRegister>
}
 8003cb4:	bd38      	pop	{r3, r4, r5, pc}
		enaa |= (1<<pipe);
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	40a1      	lsls	r1, r4
 8003cba:	4301      	orrs	r1, r0
 8003cbc:	b2c9      	uxtb	r1, r1
 8003cbe:	e7f6      	b.n	8003cae <nRF24_AutoACK+0x20>

08003cc0 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8003cc0:	b508      	push	{r3, lr}
	if(size > 5)
 8003cc2:	2805      	cmp	r0, #5
 8003cc4:	d803      	bhi.n	8003cce <nRF24_SetAddressWidth+0xe>
		size = 5; // Maximum are 5 bytes
	if(size < 3)
 8003cc6:	2802      	cmp	r0, #2
 8003cc8:	d802      	bhi.n	8003cd0 <nRF24_SetAddressWidth+0x10>
		size = 3; // Minimum are 3 bytes
 8003cca:	2003      	movs	r0, #3
 8003ccc:	e000      	b.n	8003cd0 <nRF24_SetAddressWidth+0x10>
		size = 5; // Maximum are 5 bytes
 8003cce:	2005      	movs	r0, #5
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8003cd0:	1e81      	subs	r1, r0, #2
 8003cd2:	f001 0103 	and.w	r1, r1, #3
 8003cd6:	2003      	movs	r0, #3
 8003cd8:	f7ff fea4 	bl	8003a24 <nRF24_WriteRegister>
}
 8003cdc:	bd08      	pop	{r3, pc}

08003cde <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8003cde:	b510      	push	{r4, lr}
 8003ce0:	b082      	sub	sp, #8
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8003ce2:	2801      	cmp	r0, #1
 8003ce4:	d815      	bhi.n	8003d12 <nRF24_SetRXAddress+0x34>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e009      	b.n	8003cfe <nRF24_SetRXAddress+0x20>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8003cea:	f1c3 0204 	rsb	r2, r3, #4
 8003cee:	5ccc      	ldrb	r4, [r1, r3]
 8003cf0:	f10d 0c08 	add.w	ip, sp, #8
 8003cf4:	4462      	add	r2, ip
 8003cf6:	f802 4c08 	strb.w	r4, [r2, #-8]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d9f3      	bls.n	8003cea <nRF24_SetRXAddress+0xc>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8003d02:	300a      	adds	r0, #10
 8003d04:	2205      	movs	r2, #5
 8003d06:	4669      	mov	r1, sp
 8003d08:	b2c0      	uxtb	r0, r0
 8003d0a:	f7ff fe9e 	bl	8003a4a <nRF24_WriteRegisters>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
}
 8003d0e:	b002      	add	sp, #8
 8003d10:	bd10      	pop	{r4, pc}
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8003d12:	300a      	adds	r0, #10
 8003d14:	7909      	ldrb	r1, [r1, #4]
 8003d16:	b2c0      	uxtb	r0, r0
 8003d18:	f7ff fe84 	bl	8003a24 <nRF24_WriteRegister>
}
 8003d1c:	e7f7      	b.n	8003d0e <nRF24_SetRXAddress+0x30>
	...

08003d20 <nRF24_RX_Mode>:
{
 8003d20:	b510      	push	{r4, lr}
	uint8_t config = nRF24_ReadConfig();
 8003d22:	f7ff fee0 	bl	8003ae6 <nRF24_ReadConfig>
 8003d26:	4604      	mov	r4, r0
	nRF24_SetRXAddress(0, addr_p0_backup);
 8003d28:	490c      	ldr	r1, [pc, #48]	; (8003d5c <nRF24_RX_Mode+0x3c>)
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	f7ff ffd7 	bl	8003cde <nRF24_SetRXAddress>
	config |= (1<<NRF24_PRIM_RX);
 8003d30:	f044 0003 	orr.w	r0, r4, #3
	nRF24_WriteConfig(config);
 8003d34:	b2c0      	uxtb	r0, r0
 8003d36:	f7ff fedb 	bl	8003af0 <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8003d3a:	2070      	movs	r0, #112	; 0x70
 8003d3c:	f7ff ff07 	bl	8003b4e <nRF24_WriteStatus>
	nRF24_FlushRX();
 8003d40:	f7ff ff21 	bl	8003b86 <nRF24_FlushRX>
	nRF24_FlushTX();
 8003d44:	f7ff ff2f 	bl	8003ba6 <nRF24_FlushTX>
	NRF24_CE_HIGH;
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d4e:	4804      	ldr	r0, [pc, #16]	; (8003d60 <nRF24_RX_Mode+0x40>)
 8003d50:	f000 ff62 	bl	8004c18 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8003d54:	2001      	movs	r0, #1
 8003d56:	f7ff fe55 	bl	8003a04 <nRF24_Delay_ms>
}
 8003d5a:	bd10      	pop	{r4, pc}
 8003d5c:	200007f8 	.word	0x200007f8
 8003d60:	40020400 	.word	0x40020400

08003d64 <nRF24_ClearInterrupts>:
	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
}

void nRF24_ClearInterrupts(void)
{
 8003d64:	b508      	push	{r3, lr}
	uint8_t status = nRF24_ReadStatus();
 8003d66:	f7ff feed 	bl	8003b44 <nRF24_ReadStatus>
	status |= (7<<4); // Clear bits 4, 5, 6.
 8003d6a:	f040 0070 	orr.w	r0, r0, #112	; 0x70
	nRF24_WriteStatus(status);
 8003d6e:	b2c0      	uxtb	r0, r0
 8003d70:	f7ff feed 	bl	8003b4e <nRF24_WriteStatus>
}
 8003d74:	bd08      	pop	{r3, pc}

08003d76 <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8003d76:	b508      	push	{r3, lr}
    uint8_t result = 0;

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8003d78:	2060      	movs	r0, #96	; 0x60
 8003d7a:	f7ff fe89 	bl	8003a90 <nRF24_ReadRegister>

    if (result > 32) // Something went wrong :)
 8003d7e:	2820      	cmp	r0, #32
 8003d80:	d800      	bhi.n	8003d84 <nRF24_GetDynamicPayloadSize+0xe>
        nRF24_FlushRX();
        nRF24_Delay_ms(2);
        return 0;
    }
    return result;
}
 8003d82:	bd08      	pop	{r3, pc}
        nRF24_FlushRX();
 8003d84:	f7ff feff 	bl	8003b86 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8003d88:	2002      	movs	r0, #2
 8003d8a:	f7ff fe3b 	bl	8003a04 <nRF24_Delay_ms>
        return 0;
 8003d8e:	2000      	movs	r0, #0
 8003d90:	e7f7      	b.n	8003d82 <nRF24_GetDynamicPayloadSize+0xc>

08003d92 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8003d92:	b510      	push	{r4, lr}
 8003d94:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8003d96:	f7ff fea6 	bl	8003ae6 <nRF24_ReadConfig>

	if(!onoff)
 8003d9a:	b124      	cbz	r4, 8003da6 <nRF24_EnableRXDataReadyIRQ+0x14>
		config |= (1<<NRF24_RX_DR);
	else
		config &= ~(1<<NRF24_RX_DR);
 8003d9c:	f000 00bf 	and.w	r0, r0, #191	; 0xbf

	nRF24_WriteConfig(config);
 8003da0:	f7ff fea6 	bl	8003af0 <nRF24_WriteConfig>
}
 8003da4:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_RX_DR);
 8003da6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003daa:	b2c0      	uxtb	r0, r0
 8003dac:	e7f8      	b.n	8003da0 <nRF24_EnableRXDataReadyIRQ+0xe>

08003dae <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8003dae:	b510      	push	{r4, lr}
 8003db0:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8003db2:	f7ff fe98 	bl	8003ae6 <nRF24_ReadConfig>

	if(!onoff)
 8003db6:	b124      	cbz	r4, 8003dc2 <nRF24_EnableTXDataSentIRQ+0x14>
		config |= (1<<NRF24_TX_DS);
	else
		config &= ~(1<<NRF24_TX_DS);
 8003db8:	f000 00df 	and.w	r0, r0, #223	; 0xdf

	nRF24_WriteConfig(config);
 8003dbc:	f7ff fe98 	bl	8003af0 <nRF24_WriteConfig>
}
 8003dc0:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_TX_DS);
 8003dc2:	f040 0020 	orr.w	r0, r0, #32
 8003dc6:	b2c0      	uxtb	r0, r0
 8003dc8:	e7f8      	b.n	8003dbc <nRF24_EnableTXDataSentIRQ+0xe>

08003dca <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8003dca:	b510      	push	{r4, lr}
 8003dcc:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8003dce:	f7ff fe8a 	bl	8003ae6 <nRF24_ReadConfig>

	if(!onoff)
 8003dd2:	b124      	cbz	r4, 8003dde <nRF24_EnableMaxRetransmitIRQ+0x14>
		config |= (1<<NRF24_MAX_RT);
	else
		config &= ~(1<<NRF24_MAX_RT);
 8003dd4:	f000 00ef 	and.w	r0, r0, #239	; 0xef

	nRF24_WriteConfig(config);
 8003dd8:	f7ff fe8a 	bl	8003af0 <nRF24_WriteConfig>
}
 8003ddc:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_MAX_RT);
 8003dde:	f040 0010 	orr.w	r0, r0, #16
 8003de2:	b2c0      	uxtb	r0, r0
 8003de4:	e7f8      	b.n	8003dd8 <nRF24_EnableMaxRetransmitIRQ+0xe>

08003de6 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8003de6:	b508      	push	{r3, lr}
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8003de8:	460a      	mov	r2, r1
 8003dea:	4601      	mov	r1, r0
 8003dec:	20a0      	movs	r0, #160	; 0xa0
 8003dee:	f7ff fe2c 	bl	8003a4a <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 8003df2:	bd08      	pop	{r3, pc}

08003df4 <nRF24_ReadRXPaylaod>:
		status = nRF24_ReadStatus();
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	4604      	mov	r4, r0
 8003df8:	460d      	mov	r5, r1
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8003dfa:	f7ff ffbc 	bl	8003d76 <nRF24_GetDynamicPayloadSize>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	7028      	strb	r0, [r5, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8003e02:	4621      	mov	r1, r4
 8003e04:	2061      	movs	r0, #97	; 0x61
 8003e06:	f7ff fe59 	bl	8003abc <nRF24_ReadRegisters>
#else
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	2007      	movs	r0, #7
 8003e0e:	f7ff fe09 	bl	8003a24 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 8003e12:	f7ff fe97 	bl	8003b44 <nRF24_ReadStatus>
 8003e16:	f010 0f20 	tst.w	r0, #32
 8003e1a:	d100      	bne.n	8003e1e <nRF24_ReadRXPaylaod+0x2a>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8003e1c:	bd38      	pop	{r3, r4, r5, pc}
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8003e1e:	2120      	movs	r1, #32
 8003e20:	2007      	movs	r0, #7
 8003e22:	f7ff fdff 	bl	8003a24 <nRF24_WriteRegister>
}
 8003e26:	e7f9      	b.n	8003e1c <nRF24_ReadRXPaylaod+0x28>

08003e28 <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
	if(Size > 32)
 8003e28:	2920      	cmp	r1, #32
 8003e2a:	d901      	bls.n	8003e30 <nRF24_SendPacket+0x8>
		return NRF24_NO_TRANSMITTED_PACKET;
 8003e2c:	2001      	movs	r0, #1
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_WaitTX();
#endif

	return NRF24_TRANSMITTED_PACKET;
}
 8003e2e:	4770      	bx	lr
{
 8003e30:	b508      	push	{r3, lr}
	nRF24_WriteTXPayload(Data, Size);
 8003e32:	f7ff ffd8 	bl	8003de6 <nRF24_WriteTXPayload>
	return NRF24_TRANSMITTED_PACKET;
 8003e36:	2000      	movs	r0, #0
}
 8003e38:	bd08      	pop	{r3, pc}
	...

08003e3c <nRF24_IsSomtehingToSend>:
{
	return RB_ElementsAvailable(RXBuffer)?1:0;
}

uint8_t nRF24_IsSomtehingToSend(void)
{
 8003e3c:	b508      	push	{r3, lr}
	return RB_ElementsAvailable(TXBuffer)?1:0;
 8003e3e:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <nRF24_IsSomtehingToSend+0x14>)
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	f7fd ff32 	bl	8001caa <RB_ElementsAvailable>
}
 8003e46:	3000      	adds	r0, #0
 8003e48:	bf18      	it	ne
 8003e4a:	2001      	movne	r0, #1
 8003e4c:	bd08      	pop	{r3, pc}
 8003e4e:	bf00      	nop
 8003e50:	200007f4 	.word	0x200007f4

08003e54 <nRF24_ReceivePacket>:
	return nRF24_IsSomtehingToRead();
#endif
}

nRF24_RX_Status nRF24_ReceivePacket(uint8_t* Data, uint8_t *Size)
{
 8003e54:	b508      	push	{r3, lr}
#if (NRF24_USE_INTERRUPT == 0)
	if(nRF24_RXAvailable())
	{
#endif
		nRF24_ReadRXPaylaod(Data, Size);
 8003e56:	f7ff ffcd 	bl	8003df4 <nRF24_ReadRXPaylaod>
#if (NRF24_USE_INTERRUPT == 0)
	}
	return NRF24_NO_RECEIVED_PACKET;
#endif

}
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	bd08      	pop	{r3, pc}
	...

08003e60 <nRF24_SendData>:

nRF24_TX_Status nRF24_SendData(uint8_t* Data, uint8_t Size)
{
 8003e60:	b570      	push	{r4, r5, r6, lr}
 8003e62:	4606      	mov	r6, r0
 8003e64:	460c      	mov	r4, r1
#if (NRF24_USE_RINGBUFFER != 1) // (NRF24_USE_INTERRUPT any)
	return nRF24_SendPacket(Data, Size);
#endif
#if (NRF24_USE_RINGBUFFER == 1)
	uint8_t i = 0;
 8003e66:	2200      	movs	r2, #0

	while(Size > 0)
 8003e68:	b154      	cbz	r4, 8003e80 <nRF24_SendData+0x20>
	{
		if(RB_OK == RB_WriteToBuffer(&TXBuffer, Data[i++]))
 8003e6a:	1c53      	adds	r3, r2, #1
 8003e6c:	b2dd      	uxtb	r5, r3
 8003e6e:	5cb1      	ldrb	r1, [r6, r2]
 8003e70:	4805      	ldr	r0, [pc, #20]	; (8003e88 <nRF24_SendData+0x28>)
 8003e72:	f7fd fee6 	bl	8001c42 <RB_WriteToBuffer>
 8003e76:	b928      	cbnz	r0, 8003e84 <nRF24_SendData+0x24>
		{
			Size--;
 8003e78:	3c01      	subs	r4, #1
 8003e7a:	b2e4      	uxtb	r4, r4
		if(RB_OK == RB_WriteToBuffer(&TXBuffer, Data[i++]))
 8003e7c:	462a      	mov	r2, r5
 8003e7e:	e7f3      	b.n	8003e68 <nRF24_SendData+0x8>
		else
		{
			return NRF24_NO_TRANSMITTED_PACKET;
		}
	}
	return NRF24_TRANSMITTED_PACKET;
 8003e80:	2000      	movs	r0, #0
#endif
}
 8003e82:	bd70      	pop	{r4, r5, r6, pc}
			return NRF24_NO_TRANSMITTED_PACKET;
 8003e84:	2001      	movs	r0, #1
 8003e86:	e7fc      	b.n	8003e82 <nRF24_SendData+0x22>
 8003e88:	200007f4 	.word	0x200007f4

08003e8c <nRF24_CheckTXAndSend>:
#if (NRF24_USE_RINGBUFFER == 1)
void nRF24_CheckTXAndSend(void)
{
 8003e8c:	b530      	push	{r4, r5, lr}
 8003e8e:	b089      	sub	sp, #36	; 0x24
	uint8_t i, DataCounter;
	uint8_t TXPacket[32];

	if(nRF24_IsSomtehingToSend() && Nrf24TXFreeFlag)
 8003e90:	f7ff ffd4 	bl	8003e3c <nRF24_IsSomtehingToSend>
 8003e94:	b110      	cbz	r0, 8003e9c <nRF24_CheckTXAndSend+0x10>
 8003e96:	4b19      	ldr	r3, [pc, #100]	; (8003efc <nRF24_CheckTXAndSend+0x70>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	b91b      	cbnz	r3, 8003ea4 <nRF24_CheckTXAndSend+0x18>
		nRF24_SendPacket(TXPacket, DataCounter);
		NRF24_CE_HIGH;
		nRF24_Delay_ms(1);
		NRF24_CE_LOW;
	}else{
		nRF24_RX_Mode();
 8003e9c:	f7ff ff40 	bl	8003d20 <nRF24_RX_Mode>
	}
}
 8003ea0:	b009      	add	sp, #36	; 0x24
 8003ea2:	bd30      	pop	{r4, r5, pc}
		nRF24_TX_Mode();
 8003ea4:	f7ff fe90 	bl	8003bc8 <nRF24_TX_Mode>
		Nrf24TXFreeFlag = 0;
 8003ea8:	4b14      	ldr	r3, [pc, #80]	; (8003efc <nRF24_CheckTXAndSend+0x70>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
		DataCounter = RB_ElementsAvailable(&TXBuffer);
 8003eae:	4814      	ldr	r0, [pc, #80]	; (8003f00 <nRF24_CheckTXAndSend+0x74>)
 8003eb0:	f7fd fefb 	bl	8001caa <RB_ElementsAvailable>
 8003eb4:	4605      	mov	r5, r0
		if(DataCounter > 32)
 8003eb6:	2820      	cmp	r0, #32
 8003eb8:	d900      	bls.n	8003ebc <nRF24_CheckTXAndSend+0x30>
			DataCounter = 32; // Max Payload
 8003eba:	2520      	movs	r5, #32
		for(i = 0; i < DataCounter; i++)
 8003ebc:	2400      	movs	r4, #0
 8003ebe:	e006      	b.n	8003ece <nRF24_CheckTXAndSend+0x42>
			RB_ReadFromBuffer(&TXBuffer, &TXPacket[i]);
 8003ec0:	eb0d 0104 	add.w	r1, sp, r4
 8003ec4:	480e      	ldr	r0, [pc, #56]	; (8003f00 <nRF24_CheckTXAndSend+0x74>)
 8003ec6:	f7fd fed9 	bl	8001c7c <RB_ReadFromBuffer>
		for(i = 0; i < DataCounter; i++)
 8003eca:	3401      	adds	r4, #1
 8003ecc:	b2e4      	uxtb	r4, r4
 8003ece:	42ac      	cmp	r4, r5
 8003ed0:	d3f6      	bcc.n	8003ec0 <nRF24_CheckTXAndSend+0x34>
		nRF24_SendPacket(TXPacket, DataCounter);
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	4668      	mov	r0, sp
 8003ed6:	f7ff ffa7 	bl	8003e28 <nRF24_SendPacket>
		NRF24_CE_HIGH;
 8003eda:	4c0a      	ldr	r4, [pc, #40]	; (8003f04 <nRF24_CheckTXAndSend+0x78>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	f000 fe98 	bl	8004c18 <HAL_GPIO_WritePin>
		nRF24_Delay_ms(1);
 8003ee8:	2001      	movs	r0, #1
 8003eea:	f7ff fd8b 	bl	8003a04 <nRF24_Delay_ms>
		NRF24_CE_LOW;
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f000 fe8f 	bl	8004c18 <HAL_GPIO_WritePin>
 8003efa:	e7d1      	b.n	8003ea0 <nRF24_CheckTXAndSend+0x14>
 8003efc:	200007ed 	.word	0x200007ed
 8003f00:	200007f4 	.word	0x200007f4
 8003f04:	40020400 	.word	0x40020400

08003f08 <nRF24_ReceiveData>:
#endif
#if (NRF24_USE_INTERRUPT == 1)
void nRF24_ReceiveData(void)
{
 8003f08:	b510      	push	{r4, lr}
 8003f0a:	b08a      	sub	sp, #40	; 0x28
 8003f0c:	e010      	b.n	8003f30 <nRF24_ReceiveData+0x28>
	{
		nRF24_ReceivePacket(RXPacket, &DataCounter);

		for(i = 0; i < DataCounter; i++)
		{
			RB_WriteToBuffer(RXBuffer, RXPacket[i]);
 8003f0e:	ab0a      	add	r3, sp, #40	; 0x28
 8003f10:	4423      	add	r3, r4
 8003f12:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 8003f16:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <nRF24_ReceiveData+0x3c>)
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	f7fd fe92 	bl	8001c42 <RB_WriteToBuffer>
		for(i = 0; i < DataCounter; i++)
 8003f1e:	3401      	adds	r4, #1
 8003f20:	b2e4      	uxtb	r4, r4
 8003f22:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8003f26:	42a3      	cmp	r3, r4
 8003f28:	d8f1      	bhi.n	8003f0e <nRF24_ReceiveData+0x6>
		}

	}while(!nRF24_IsRxEmpty());
 8003f2a:	f7ff fe27 	bl	8003b7c <nRF24_IsRxEmpty>
 8003f2e:	b930      	cbnz	r0, 8003f3e <nRF24_ReceiveData+0x36>
		nRF24_ReceivePacket(RXPacket, &DataCounter);
 8003f30:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8003f34:	a801      	add	r0, sp, #4
 8003f36:	f7ff ff8d 	bl	8003e54 <nRF24_ReceivePacket>
		for(i = 0; i < DataCounter; i++)
 8003f3a:	2400      	movs	r4, #0
 8003f3c:	e7f1      	b.n	8003f22 <nRF24_ReceiveData+0x1a>
#endif
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_ReceivePacket(RXBuffer, &RXDataCounter);
#endif
}
 8003f3e:	b00a      	add	sp, #40	; 0x28
 8003f40:	bd10      	pop	{r4, pc}
 8003f42:	bf00      	nop
 8003f44:	200007f0 	.word	0x200007f0

08003f48 <nRF24_IRQ_Read>:
{
	Nrf24InterruptFlag = 1;
}

void nRF24_IRQ_Read(void)
{
 8003f48:	b508      	push	{r3, lr}
	if(Nrf24InterruptFlag == 1)
 8003f4a:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <nRF24_IRQ_Read+0x54>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d000      	beq.n	8003f56 <nRF24_IRQ_Read+0xe>
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
		}

		nRF24_WriteStatus(ClearIrq);
	}
}
 8003f54:	bd08      	pop	{r3, pc}
		Nrf24InterruptFlag = 0;
 8003f56:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <nRF24_IRQ_Read+0x54>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
		uint8_t status = nRF24_ReadStatus();
 8003f5c:	f7ff fdf2 	bl	8003b44 <nRF24_ReadStatus>
 8003f60:	4603      	mov	r3, r0
		if ((status & (1 << NRF24_RX_DR)))
 8003f62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f66:	d016      	beq.n	8003f96 <nRF24_IRQ_Read+0x4e>
			nrf24_rx_flag = 1;
 8003f68:	4a0d      	ldr	r2, [pc, #52]	; (8003fa0 <nRF24_IRQ_Read+0x58>)
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8003f6e:	2040      	movs	r0, #64	; 0x40
		if ((status & (1 << NRF24_TX_DS)))
 8003f70:	f013 0f20 	tst.w	r3, #32
 8003f74:	d004      	beq.n	8003f80 <nRF24_IRQ_Read+0x38>
			nrf24_tx_flag = 1;
 8003f76:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <nRF24_IRQ_Read+0x5c>)
 8003f78:	2101      	movs	r1, #1
 8003f7a:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8003f7c:	f040 0020 	orr.w	r0, r0, #32
		if ((status & (1 << NRF24_MAX_RT)))
 8003f80:	f013 0f10 	tst.w	r3, #16
 8003f84:	d004      	beq.n	8003f90 <nRF24_IRQ_Read+0x48>
			nrf24_mr_flag = 1;
 8003f86:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <nRF24_IRQ_Read+0x60>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 8003f8c:	f040 0010 	orr.w	r0, r0, #16
		nRF24_WriteStatus(ClearIrq);
 8003f90:	f7ff fddd 	bl	8003b4e <nRF24_WriteStatus>
}
 8003f94:	e7de      	b.n	8003f54 <nRF24_IRQ_Read+0xc>
		uint8_t ClearIrq = 0;
 8003f96:	2000      	movs	r0, #0
 8003f98:	e7ea      	b.n	8003f70 <nRF24_IRQ_Read+0x28>
 8003f9a:	bf00      	nop
 8003f9c:	200007ec 	.word	0x200007ec
 8003fa0:	20000805 	.word	0x20000805
 8003fa4:	20000806 	.word	0x20000806
 8003fa8:	20000804 	.word	0x20000804

08003fac <nRF24_EventRxCallback>:
//

__weak void nRF24_EventRxCallback(void)
{

}
 8003fac:	4770      	bx	lr

08003fae <nRF24_EventTxCallback>:

__weak void nRF24_EventTxCallback(void)
{

}
 8003fae:	4770      	bx	lr

08003fb0 <nRF24_EventMrCallback>:

__weak void nRF24_EventMrCallback(void)
{

}
 8003fb0:	4770      	bx	lr
	...

08003fb4 <nRF24_Event>:

void nRF24_Event(void)
{
 8003fb4:	b508      	push	{r3, lr}
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8003fb6:	f7ff ffc7 	bl	8003f48 <nRF24_IRQ_Read>

#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_CheckTXAndSend();
 8003fba:	f7ff ff67 	bl	8003e8c <nRF24_CheckTXAndSend>
#endif

	if(nrf24_rx_flag)
 8003fbe:	4b10      	ldr	r3, [pc, #64]	; (8004000 <nRF24_Event+0x4c>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	b933      	cbnz	r3, 8003fd2 <nRF24_Event+0x1e>
#endif
		nRF24_EventRxCallback();
		nrf24_rx_flag = 0;
	}

	if(nrf24_tx_flag)
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <nRF24_Event+0x50>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	b95b      	cbnz	r3, 8003fe2 <nRF24_Event+0x2e>
#endif
		nRF24_EventTxCallback();
		nrf24_tx_flag = 0;
	}

	if(nrf24_mr_flag)
 8003fca:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <nRF24_Event+0x54>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	b98b      	cbnz	r3, 8003ff4 <nRF24_Event+0x40>
	{
		nRF24_EventMrCallback();
		nrf24_mr_flag = 0;
	}
}
 8003fd0:	bd08      	pop	{r3, pc}
		nRF24_ReceiveData();
 8003fd2:	f7ff ff99 	bl	8003f08 <nRF24_ReceiveData>
		nRF24_EventRxCallback();
 8003fd6:	f7ff ffe9 	bl	8003fac <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <nRF24_Event+0x4c>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	e7f0      	b.n	8003fc4 <nRF24_Event+0x10>
		Nrf24TXFreeFlag = 1;
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <nRF24_Event+0x58>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
		nRF24_EventTxCallback();
 8003fe8:	f7ff ffe1 	bl	8003fae <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <nRF24_Event+0x50>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	e7ea      	b.n	8003fca <nRF24_Event+0x16>
		nRF24_EventMrCallback();
 8003ff4:	f7ff ffdc 	bl	8003fb0 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <nRF24_Event+0x54>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]
}
 8003ffe:	e7e7      	b.n	8003fd0 <nRF24_Event+0x1c>
 8004000:	20000805 	.word	0x20000805
 8004004:	20000806 	.word	0x20000806
 8004008:	20000804 	.word	0x20000804
 800400c:	200007ed 	.word	0x200007ed

08004010 <nRF24_Init>:
#endif

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8004010:	b508      	push	{r3, lr}
	hspi_nrf = hspi;
 8004012:	4b31      	ldr	r3, [pc, #196]	; (80040d8 <nRF24_Init+0xc8>)
 8004014:	6018      	str	r0, [r3, #0]

	NRF24_CE_LOW;
 8004016:	2200      	movs	r2, #0
 8004018:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800401c:	482f      	ldr	r0, [pc, #188]	; (80040dc <nRF24_Init+0xcc>)
 800401e:	f000 fdfb 	bl	8004c18 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8004022:	f7fe fa6d 	bl	8002500 <NRF_ChipDeselect>

	nRF24_Delay_ms(5); // Wait for radio power up
 8004026:	2005      	movs	r0, #5
 8004028:	f7ff fcec 	bl	8003a04 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 800402c:	2003      	movs	r0, #3
 800402e:	f7ff fd65 	bl	8003afc <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8004032:	2002      	movs	r0, #2
 8004034:	f7ff fd71 	bl	8003b1a <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8004038:	2001      	movs	r0, #1
 800403a:	f7ff fde1 	bl	8003c00 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_2B); // CRC Length 1 byte
 800403e:	2001      	movs	r0, #1
 8004040:	f7ff fdec 	bl	8003c1c <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8004044:	2107      	movs	r1, #7
 8004046:	2004      	movs	r0, #4
 8004048:	f7ff fdf7 	bl	8003c3a <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 800404c:	201d      	movs	r0, #29
 800404e:	f7ff fd1f 	bl	8003a90 <nRF24_ReadRegister>
 8004052:	f040 0104 	orr.w	r1, r0, #4
 8004056:	b2c9      	uxtb	r1, r1
 8004058:	201d      	movs	r0, #29
 800405a:	f7ff fce3 	bl	8003a24 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 800405e:	213f      	movs	r1, #63	; 0x3f
 8004060:	201c      	movs	r0, #28
 8004062:	f7ff fcdf 	bl	8003a24 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(100); // Set RF channel for transmission
 8004066:	2064      	movs	r0, #100	; 0x64
 8004068:	f7ff fdf1 	bl	8003c4e <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 800406c:	2101      	movs	r1, #1
 800406e:	2000      	movs	r0, #0
 8004070:	f7ff fdf4 	bl	8003c5c <nRF24_EnablePipe>
	nRF24_EnablePipe(1, 1); // Enable pipe 1
 8004074:	2101      	movs	r1, #1
 8004076:	4608      	mov	r0, r1
 8004078:	f7ff fdf0 	bl	8003c5c <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800407c:	2101      	movs	r1, #1
 800407e:	2000      	movs	r0, #0
 8004080:	f7ff fe05 	bl	8003c8e <nRF24_AutoACK>
	nRF24_AutoACK(1, 1); // Enable auto ACK for pipe 1
 8004084:	2101      	movs	r1, #1
 8004086:	4608      	mov	r0, r1
 8004088:	f7ff fe01 	bl	8003c8e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 800408c:	2005      	movs	r0, #5
 800408e:	f7ff fe17 	bl	8003cc0 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 8004092:	2001      	movs	r0, #1
 8004094:	f7ff fcb6 	bl	8003a04 <nRF24_Delay_ms>

#if (NRF24_USE_INTERRUPT == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8004098:	2001      	movs	r0, #1
 800409a:	f7ff fe7a 	bl	8003d92 <nRF24_EnableRXDataReadyIRQ>
#endif
#if (NRF24_USE_INTERRUPT == 0)
	nRF24_EnableRXDataReadyIRQ(0);
#endif
	nRF24_EnableTXDataSentIRQ(0);
 800409e:	2000      	movs	r0, #0
 80040a0:	f7ff fe85 	bl	8003dae <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80040a4:	2000      	movs	r0, #0
 80040a6:	f7ff fe90 	bl	8003dca <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 80040aa:	2001      	movs	r0, #1
 80040ac:	f7ff fcaa 	bl	8003a04 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 80040b0:	f7ff fe58 	bl	8003d64 <nRF24_ClearInterrupts>
#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 80040b4:	2001      	movs	r0, #1
 80040b6:	f7ff fe6c 	bl	8003d92 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 80040ba:	2001      	movs	r0, #1
 80040bc:	f7ff fe77 	bl	8003dae <nRF24_EnableTXDataSentIRQ>
	Nrf24TXFreeFlag = 1;
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <nRF24_Init+0xd0>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
	RB_CreateBuffer(&TXBuffer, NRF24_TX_BUFFER_SIZE);
 80040c6:	2120      	movs	r1, #32
 80040c8:	4806      	ldr	r0, [pc, #24]	; (80040e4 <nRF24_Init+0xd4>)
 80040ca:	f7fd fdaf 	bl	8001c2c <RB_CreateBuffer>
	RB_CreateBuffer(&RXBuffer, NRF24_RX_BUFFER_SIZE);
 80040ce:	2120      	movs	r1, #32
 80040d0:	4805      	ldr	r0, [pc, #20]	; (80040e8 <nRF24_Init+0xd8>)
 80040d2:	f7fd fdab 	bl	8001c2c <RB_CreateBuffer>
#endif
}
 80040d6:	bd08      	pop	{r3, pc}
 80040d8:	20000800 	.word	0x20000800
 80040dc:	40020400 	.word	0x40020400
 80040e0:	200007ed 	.word	0x200007ed
 80040e4:	200007f4 	.word	0x200007f4
 80040e8:	200007f0 	.word	0x200007f0

080040ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80040ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004124 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80040f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80040f2:	e003      	b.n	80040fc <LoopCopyDataInit>

080040f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80040f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80040f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80040fa:	3104      	adds	r1, #4

080040fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80040fc:	480b      	ldr	r0, [pc, #44]	; (800412c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80040fe:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004100:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004102:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004104:	d3f6      	bcc.n	80040f4 <CopyDataInit>
  ldr  r2, =_sbss
 8004106:	4a0b      	ldr	r2, [pc, #44]	; (8004134 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004108:	e002      	b.n	8004110 <LoopFillZerobss>

0800410a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800410a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800410c:	f842 3b04 	str.w	r3, [r2], #4

08004110 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004112:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004114:	d3f9      	bcc.n	800410a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004116:	f7ff fc67 	bl	80039e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800411a:	f005 fd13 	bl	8009b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800411e:	f7ff f807 	bl	8003130 <main>
  bx  lr    
 8004122:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004124:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8004128:	0800a84c 	.word	0x0800a84c
  ldr  r0, =_sdata
 800412c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004130:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8004134:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8004138:	20003138 	.word	0x20003138

0800413c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800413c:	e7fe      	b.n	800413c <ADC_IRQHandler>
	...

08004140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004140:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_Init+0x30>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004152:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800415a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800415c:	2003      	movs	r0, #3
 800415e:	f000 f9a9 	bl	80044b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004162:	2000      	movs	r0, #0
 8004164:	f7ff fb8a 	bl	800387c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004168:	f7ff f8d2 	bl	8003310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800416c:	2000      	movs	r0, #0
 800416e:	bd08      	pop	{r3, pc}
 8004170:	40023c00 	.word	0x40023c00

08004174 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004174:	4a03      	ldr	r2, [pc, #12]	; (8004184 <HAL_IncTick+0x10>)
 8004176:	6811      	ldr	r1, [r2, #0]
 8004178:	4b03      	ldr	r3, [pc, #12]	; (8004188 <HAL_IncTick+0x14>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	440b      	add	r3, r1
 800417e:	6013      	str	r3, [r2, #0]
}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	200030f0 	.word	0x200030f0
 8004188:	20000034 	.word	0x20000034

0800418c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800418c:	4b01      	ldr	r3, [pc, #4]	; (8004194 <HAL_GetTick+0x8>)
 800418e:	6818      	ldr	r0, [r3, #0]
}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	200030f0 	.word	0x200030f0

08004198 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004198:	4b4a      	ldr	r3, [pc, #296]	; (80042c4 <ADC_Init+0x12c>)
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80041a0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	6841      	ldr	r1, [r0, #4]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041aa:	6802      	ldr	r2, [r0, #0]
 80041ac:	6853      	ldr	r3, [r2, #4]
 80041ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041b4:	6802      	ldr	r2, [r0, #0]
 80041b6:	6853      	ldr	r3, [r2, #4]
 80041b8:	6901      	ldr	r1, [r0, #16]
 80041ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80041be:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041c0:	6802      	ldr	r2, [r0, #0]
 80041c2:	6853      	ldr	r3, [r2, #4]
 80041c4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80041c8:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041ca:	6802      	ldr	r2, [r0, #0]
 80041cc:	6853      	ldr	r3, [r2, #4]
 80041ce:	6881      	ldr	r1, [r0, #8]
 80041d0:	430b      	orrs	r3, r1
 80041d2:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041d4:	6802      	ldr	r2, [r0, #0]
 80041d6:	6893      	ldr	r3, [r2, #8]
 80041d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041dc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041de:	6802      	ldr	r2, [r0, #0]
 80041e0:	6893      	ldr	r3, [r2, #8]
 80041e2:	68c1      	ldr	r1, [r0, #12]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80041ea:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <ADC_Init+0x130>)
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d04b      	beq.n	8004288 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041f0:	6802      	ldr	r2, [r0, #0]
 80041f2:	6893      	ldr	r3, [r2, #8]
 80041f4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80041f8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041fa:	6802      	ldr	r2, [r0, #0]
 80041fc:	6893      	ldr	r3, [r2, #8]
 80041fe:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004200:	430b      	orrs	r3, r1
 8004202:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004204:	6802      	ldr	r2, [r0, #0]
 8004206:	6893      	ldr	r3, [r2, #8]
 8004208:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800420c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800420e:	6802      	ldr	r2, [r0, #0]
 8004210:	6893      	ldr	r3, [r2, #8]
 8004212:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004214:	430b      	orrs	r3, r1
 8004216:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004218:	6802      	ldr	r2, [r0, #0]
 800421a:	6893      	ldr	r3, [r2, #8]
 800421c:	f023 0302 	bic.w	r3, r3, #2
 8004220:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004222:	6802      	ldr	r2, [r0, #0]
 8004224:	6893      	ldr	r3, [r2, #8]
 8004226:	7e01      	ldrb	r1, [r0, #24]
 8004228:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800422c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800422e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d133      	bne.n	800429e <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004236:	6802      	ldr	r2, [r0, #0]
 8004238:	6853      	ldr	r3, [r2, #4]
 800423a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800423e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004240:	6802      	ldr	r2, [r0, #0]
 8004242:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004244:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004248:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800424a:	6801      	ldr	r1, [r0, #0]
 800424c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800424e:	69c2      	ldr	r2, [r0, #28]
 8004250:	3a01      	subs	r2, #1
 8004252:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004256:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004258:	6802      	ldr	r2, [r0, #0]
 800425a:	6893      	ldr	r3, [r2, #8]
 800425c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004260:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004262:	6802      	ldr	r2, [r0, #0]
 8004264:	6893      	ldr	r3, [r2, #8]
 8004266:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 800426a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800426e:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004270:	6802      	ldr	r2, [r0, #0]
 8004272:	6893      	ldr	r3, [r2, #8]
 8004274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004278:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800427a:	6802      	ldr	r2, [r0, #0]
 800427c:	6893      	ldr	r3, [r2, #8]
 800427e:	6941      	ldr	r1, [r0, #20]
 8004280:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8004284:	6093      	str	r3, [r2, #8]
}
 8004286:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004288:	6802      	ldr	r2, [r0, #0]
 800428a:	6893      	ldr	r3, [r2, #8]
 800428c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004290:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004292:	6802      	ldr	r2, [r0, #0]
 8004294:	6893      	ldr	r3, [r2, #8]
 8004296:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800429a:	6093      	str	r3, [r2, #8]
 800429c:	e7bc      	b.n	8004218 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800429e:	6802      	ldr	r2, [r0, #0]
 80042a0:	6853      	ldr	r3, [r2, #4]
 80042a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042a6:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042a8:	6802      	ldr	r2, [r0, #0]
 80042aa:	6853      	ldr	r3, [r2, #4]
 80042ac:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80042b0:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042b2:	6801      	ldr	r1, [r0, #0]
 80042b4:	684b      	ldr	r3, [r1, #4]
 80042b6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80042b8:	3a01      	subs	r2, #1
 80042ba:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80042be:	604b      	str	r3, [r1, #4]
 80042c0:	e7be      	b.n	8004240 <ADC_Init+0xa8>
 80042c2:	bf00      	nop
 80042c4:	40012300 	.word	0x40012300
 80042c8:	0f000001 	.word	0x0f000001

080042cc <HAL_ADC_Init>:
  if(hadc == NULL)
 80042cc:	b338      	cbz	r0, 800431e <HAL_ADC_Init+0x52>
{
 80042ce:	b510      	push	{r4, lr}
 80042d0:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80042d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80042d4:	b143      	cbz	r3, 80042e8 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042d8:	f013 0f10 	tst.w	r3, #16
 80042dc:	d00b      	beq.n	80042f6 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80042de:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80042e0:	2300      	movs	r3, #0
 80042e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80042e6:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80042e8:	f7ff f834 	bl	8003354 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80042ec:	2300      	movs	r3, #0
 80042ee:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80042f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80042f4:	e7ef      	b.n	80042d6 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80042f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042fc:	f023 0302 	bic.w	r3, r3, #2
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8004306:	4620      	mov	r0, r4
 8004308:	f7ff ff46 	bl	8004198 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 800430c:	2000      	movs	r0, #0
 800430e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004310:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004312:	f023 0303 	bic.w	r3, r3, #3
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	6423      	str	r3, [r4, #64]	; 0x40
 800431c:	e7e0      	b.n	80042e0 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800431e:	2001      	movs	r0, #1
}
 8004320:	4770      	bx	lr
	...

08004324 <HAL_ADC_ConfigChannel>:
{
 8004324:	b430      	push	{r4, r5}
 8004326:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800432c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004330:	2b01      	cmp	r3, #1
 8004332:	f000 80b7 	beq.w	80044a4 <HAL_ADC_ConfigChannel+0x180>
 8004336:	2301      	movs	r3, #1
 8004338:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800433c:	680b      	ldr	r3, [r1, #0]
 800433e:	2b09      	cmp	r3, #9
 8004340:	d93e      	bls.n	80043c0 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004342:	6805      	ldr	r5, [r0, #0]
 8004344:	68ea      	ldr	r2, [r5, #12]
 8004346:	b29b      	uxth	r3, r3
 8004348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800434c:	3b1e      	subs	r3, #30
 800434e:	2407      	movs	r4, #7
 8004350:	fa04 f303 	lsl.w	r3, r4, r3
 8004354:	ea22 0303 	bic.w	r3, r2, r3
 8004358:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800435a:	6805      	ldr	r5, [r0, #0]
 800435c:	68ea      	ldr	r2, [r5, #12]
 800435e:	688c      	ldr	r4, [r1, #8]
 8004360:	880b      	ldrh	r3, [r1, #0]
 8004362:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004366:	3b1e      	subs	r3, #30
 8004368:	fa04 f303 	lsl.w	r3, r4, r3
 800436c:	4313      	orrs	r3, r2
 800436e:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8004370:	684b      	ldr	r3, [r1, #4]
 8004372:	2b06      	cmp	r3, #6
 8004374:	d83a      	bhi.n	80043ec <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004376:	6805      	ldr	r5, [r0, #0]
 8004378:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800437a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800437e:	3b05      	subs	r3, #5
 8004380:	241f      	movs	r4, #31
 8004382:	fa04 f303 	lsl.w	r3, r4, r3
 8004386:	ea22 0303 	bic.w	r3, r2, r3
 800438a:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800438c:	6805      	ldr	r5, [r0, #0]
 800438e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004390:	684b      	ldr	r3, [r1, #4]
 8004392:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004396:	3b05      	subs	r3, #5
 8004398:	880c      	ldrh	r4, [r1, #0]
 800439a:	fa04 f303 	lsl.w	r3, r4, r3
 800439e:	4313      	orrs	r3, r2
 80043a0:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043a2:	6802      	ldr	r2, [r0, #0]
 80043a4:	4b40      	ldr	r3, [pc, #256]	; (80044a8 <HAL_ADC_ConfigChannel+0x184>)
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d050      	beq.n	800444c <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043aa:	6802      	ldr	r2, [r0, #0]
 80043ac:	4b3e      	ldr	r3, [pc, #248]	; (80044a8 <HAL_ADC_ConfigChannel+0x184>)
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d055      	beq.n	800445e <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 80043b2:	2300      	movs	r3, #0
 80043b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80043b8:	4618      	mov	r0, r3
}
 80043ba:	b002      	add	sp, #8
 80043bc:	bc30      	pop	{r4, r5}
 80043be:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043c0:	6805      	ldr	r5, [r0, #0]
 80043c2:	692a      	ldr	r2, [r5, #16]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80043ca:	2407      	movs	r4, #7
 80043cc:	fa04 f303 	lsl.w	r3, r4, r3
 80043d0:	ea22 0303 	bic.w	r3, r2, r3
 80043d4:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043d6:	6805      	ldr	r5, [r0, #0]
 80043d8:	692a      	ldr	r2, [r5, #16]
 80043da:	688c      	ldr	r4, [r1, #8]
 80043dc:	880b      	ldrh	r3, [r1, #0]
 80043de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80043e2:	fa04 f303 	lsl.w	r3, r4, r3
 80043e6:	4313      	orrs	r3, r2
 80043e8:	612b      	str	r3, [r5, #16]
 80043ea:	e7c1      	b.n	8004370 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 80043ec:	2b0c      	cmp	r3, #12
 80043ee:	d816      	bhi.n	800441e <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043f0:	6805      	ldr	r5, [r0, #0]
 80043f2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80043f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043f8:	3b23      	subs	r3, #35	; 0x23
 80043fa:	241f      	movs	r4, #31
 80043fc:	fa04 f303 	lsl.w	r3, r4, r3
 8004400:	ea22 0303 	bic.w	r3, r2, r3
 8004404:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004406:	6805      	ldr	r5, [r0, #0]
 8004408:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800440a:	684b      	ldr	r3, [r1, #4]
 800440c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004410:	3b23      	subs	r3, #35	; 0x23
 8004412:	880c      	ldrh	r4, [r1, #0]
 8004414:	fa04 f303 	lsl.w	r3, r4, r3
 8004418:	4313      	orrs	r3, r2
 800441a:	632b      	str	r3, [r5, #48]	; 0x30
 800441c:	e7c1      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800441e:	6805      	ldr	r5, [r0, #0]
 8004420:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004422:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004426:	3b41      	subs	r3, #65	; 0x41
 8004428:	241f      	movs	r4, #31
 800442a:	fa04 f303 	lsl.w	r3, r4, r3
 800442e:	ea22 0303 	bic.w	r3, r2, r3
 8004432:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004434:	6805      	ldr	r5, [r0, #0]
 8004436:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004438:	684b      	ldr	r3, [r1, #4]
 800443a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800443e:	3b41      	subs	r3, #65	; 0x41
 8004440:	880c      	ldrh	r4, [r1, #0]
 8004442:	fa04 f303 	lsl.w	r3, r4, r3
 8004446:	4313      	orrs	r3, r2
 8004448:	62eb      	str	r3, [r5, #44]	; 0x2c
 800444a:	e7aa      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800444c:	680b      	ldr	r3, [r1, #0]
 800444e:	2b12      	cmp	r3, #18
 8004450:	d1ab      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004452:	4a16      	ldr	r2, [pc, #88]	; (80044ac <HAL_ADC_ConfigChannel+0x188>)
 8004454:	6853      	ldr	r3, [r2, #4]
 8004456:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800445a:	6053      	str	r3, [r2, #4]
 800445c:	e7a5      	b.n	80043aa <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800445e:	680b      	ldr	r3, [r1, #0]
 8004460:	3b10      	subs	r3, #16
 8004462:	2b01      	cmp	r3, #1
 8004464:	d8a5      	bhi.n	80043b2 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004466:	4a11      	ldr	r2, [pc, #68]	; (80044ac <HAL_ADC_ConfigChannel+0x188>)
 8004468:	6853      	ldr	r3, [r2, #4]
 800446a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800446e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004470:	680b      	ldr	r3, [r1, #0]
 8004472:	2b10      	cmp	r3, #16
 8004474:	d19d      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004476:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <HAL_ADC_ConfigChannel+0x18c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800447e:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8004482:	f202 3283 	addw	r2, r2, #899	; 0x383
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	0c9b      	lsrs	r3, r3, #18
 800448c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004490:	005a      	lsls	r2, r3, #1
 8004492:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8004494:	e002      	b.n	800449c <HAL_ADC_ConfigChannel+0x178>
        counter--;
 8004496:	9b01      	ldr	r3, [sp, #4]
 8004498:	3b01      	subs	r3, #1
 800449a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800449c:	9b01      	ldr	r3, [sp, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f9      	bne.n	8004496 <HAL_ADC_ConfigChannel+0x172>
 80044a2:	e786      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 80044a4:	2002      	movs	r0, #2
 80044a6:	e788      	b.n	80043ba <HAL_ADC_ConfigChannel+0x96>
 80044a8:	40012000 	.word	0x40012000
 80044ac:	40012300 	.word	0x40012300
 80044b0:	20000030 	.word	0x20000030

080044b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b4:	4a07      	ldr	r2, [pc, #28]	; (80044d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80044b6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044bc:	041b      	lsls	r3, r3, #16
 80044be:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c0:	0200      	lsls	r0, r0, #8
 80044c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80044c8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80044cc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80044d0:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80044d2:	4770      	bx	lr
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044d8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044da:	4b17      	ldr	r3, [pc, #92]	; (8004538 <HAL_NVIC_SetPriority+0x60>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044e2:	f1c3 0407 	rsb	r4, r3, #7
 80044e6:	2c04      	cmp	r4, #4
 80044e8:	bf28      	it	cs
 80044ea:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ec:	1d1d      	adds	r5, r3, #4
 80044ee:	2d06      	cmp	r5, #6
 80044f0:	d918      	bls.n	8004524 <HAL_NVIC_SetPriority+0x4c>
 80044f2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f4:	f04f 35ff 	mov.w	r5, #4294967295
 80044f8:	fa05 f404 	lsl.w	r4, r5, r4
 80044fc:	ea21 0104 	bic.w	r1, r1, r4
 8004500:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004502:	fa05 f303 	lsl.w	r3, r5, r3
 8004506:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800450a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800450c:	2800      	cmp	r0, #0
 800450e:	db0b      	blt.n	8004528 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004510:	0109      	lsls	r1, r1, #4
 8004512:	b2c9      	uxtb	r1, r1
 8004514:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004518:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800451c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004520:	bc30      	pop	{r4, r5}
 8004522:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004524:	2300      	movs	r3, #0
 8004526:	e7e5      	b.n	80044f4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004528:	f000 000f 	and.w	r0, r0, #15
 800452c:	0109      	lsls	r1, r1, #4
 800452e:	b2c9      	uxtb	r1, r1
 8004530:	4b02      	ldr	r3, [pc, #8]	; (800453c <HAL_NVIC_SetPriority+0x64>)
 8004532:	5419      	strb	r1, [r3, r0]
 8004534:	e7f4      	b.n	8004520 <HAL_NVIC_SetPriority+0x48>
 8004536:	bf00      	nop
 8004538:	e000ed00 	.word	0xe000ed00
 800453c:	e000ed14 	.word	0xe000ed14

08004540 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004540:	2800      	cmp	r0, #0
 8004542:	db07      	blt.n	8004554 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004544:	f000 021f 	and.w	r2, r0, #31
 8004548:	0940      	lsrs	r0, r0, #5
 800454a:	2301      	movs	r3, #1
 800454c:	4093      	lsls	r3, r2
 800454e:	4a02      	ldr	r2, [pc, #8]	; (8004558 <HAL_NVIC_EnableIRQ+0x18>)
 8004550:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	e000e100 	.word	0xe000e100

0800455c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800455c:	b158      	cbz	r0, 8004576 <HAL_CRC_Init+0x1a>
{
 800455e:	b510      	push	{r4, lr}
 8004560:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004562:	7943      	ldrb	r3, [r0, #5]
 8004564:	b11b      	cbz	r3, 800456e <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004566:	2301      	movs	r3, #1
 8004568:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800456a:	2000      	movs	r0, #0
}
 800456c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800456e:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8004570:	f7fe ff08 	bl	8003384 <HAL_CRC_MspInit>
 8004574:	e7f7      	b.n	8004566 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8004576:	2001      	movs	r0, #1
}
 8004578:	4770      	bx	lr

0800457a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800457a:	b430      	push	{r4, r5}
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800457c:	2302      	movs	r3, #2
 800457e:	7143      	strb	r3, [r0, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004580:	6804      	ldr	r4, [r0, #0]
 8004582:	68a3      	ldr	r3, [r4, #8]
 8004584:	f043 0301 	orr.w	r3, r3, #1
 8004588:	60a3      	str	r3, [r4, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800458a:	2300      	movs	r3, #0
 800458c:	e004      	b.n	8004598 <HAL_CRC_Calculate+0x1e>
  {
    hcrc->Instance->DR = pBuffer[index];
 800458e:	6804      	ldr	r4, [r0, #0]
 8004590:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8004594:	6025      	str	r5, [r4, #0]
  for (index = 0U; index < BufferLength; index++)
 8004596:	3301      	adds	r3, #1
 8004598:	4293      	cmp	r3, r2
 800459a:	d3f8      	bcc.n	800458e <HAL_CRC_Calculate+0x14>
  }
  temp = hcrc->Instance->DR;
 800459c:	6803      	ldr	r3, [r0, #0]
 800459e:	681b      	ldr	r3, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80045a0:	2201      	movs	r2, #1
 80045a2:	7142      	strb	r2, [r0, #5]

  /* Return the CRC computed value */
  return temp;
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	bc30      	pop	{r4, r5}
 80045a8:	4770      	bx	lr

080045aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045aa:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045ac:	6805      	ldr	r5, [r0, #0]
 80045ae:	682c      	ldr	r4, [r5, #0]
 80045b0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80045b4:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045b6:	6804      	ldr	r4, [r0, #0]
 80045b8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045ba:	6883      	ldr	r3, [r0, #8]
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	d005      	beq.n	80045cc <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80045c0:	6803      	ldr	r3, [r0, #0]
 80045c2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80045c4:	6803      	ldr	r3, [r0, #0]
 80045c6:	60da      	str	r2, [r3, #12]
  }
}
 80045c8:	bc30      	pop	{r4, r5}
 80045ca:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80045cc:	6803      	ldr	r3, [r0, #0]
 80045ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80045d0:	6803      	ldr	r3, [r0, #0]
 80045d2:	60d9      	str	r1, [r3, #12]
 80045d4:	e7f8      	b.n	80045c8 <DMA_SetConfig+0x1e>
	...

080045d8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045d8:	6802      	ldr	r2, [r0, #0]
 80045da:	b2d3      	uxtb	r3, r2
 80045dc:	3b10      	subs	r3, #16
 80045de:	490b      	ldr	r1, [pc, #44]	; (800460c <DMA_CalcBaseAndBitshift+0x34>)
 80045e0:	fba1 1303 	umull	r1, r3, r1, r3
 80045e4:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045e6:	490a      	ldr	r1, [pc, #40]	; (8004610 <DMA_CalcBaseAndBitshift+0x38>)
 80045e8:	5cc9      	ldrb	r1, [r1, r3]
 80045ea:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d806      	bhi.n	80045fe <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045f0:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80045f4:	f022 0203 	bic.w	r2, r2, #3
 80045f8:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80045fa:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80045fc:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045fe:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8004602:	f022 0203 	bic.w	r2, r2, #3
 8004606:	3204      	adds	r2, #4
 8004608:	6582      	str	r2, [r0, #88]	; 0x58
 800460a:	e7f6      	b.n	80045fa <DMA_CalcBaseAndBitshift+0x22>
 800460c:	aaaaaaab 	.word	0xaaaaaaab
 8004610:	0800a7e8 	.word	0x0800a7e8

08004614 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004614:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004616:	6982      	ldr	r2, [r0, #24]
 8004618:	b992      	cbnz	r2, 8004640 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800461a:	2b01      	cmp	r3, #1
 800461c:	d00a      	beq.n	8004634 <DMA_CheckFifoParam+0x20>
 800461e:	b11b      	cbz	r3, 8004628 <DMA_CheckFifoParam+0x14>
 8004620:	2b02      	cmp	r3, #2
 8004622:	d001      	beq.n	8004628 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8004624:	2000      	movs	r0, #0
 8004626:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004628:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800462a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800462e:	d12c      	bne.n	800468a <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8004630:	2000      	movs	r0, #0
 8004632:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004634:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004636:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800463a:	d028      	beq.n	800468e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800463c:	2000      	movs	r0, #0
 800463e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004640:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004644:	d005      	beq.n	8004652 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004646:	2b02      	cmp	r3, #2
 8004648:	d929      	bls.n	800469e <DMA_CheckFifoParam+0x8a>
 800464a:	2b03      	cmp	r3, #3
 800464c:	d015      	beq.n	800467a <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2000      	movs	r0, #0
 8004650:	4770      	bx	lr
    switch (tmp)
 8004652:	2b03      	cmp	r3, #3
 8004654:	d803      	bhi.n	800465e <DMA_CheckFifoParam+0x4a>
 8004656:	e8df f003 	tbb	[pc, r3]
 800465a:	041c      	.short	0x041c
 800465c:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2000      	movs	r0, #0
 8004660:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004662:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004664:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004668:	d115      	bne.n	8004696 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800466a:	2000      	movs	r0, #0
 800466c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800466e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004670:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004674:	d011      	beq.n	800469a <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8004676:	2000      	movs	r0, #0
 8004678:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800467a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800467c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004680:	d001      	beq.n	8004686 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8004682:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8004684:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004686:	2000      	movs	r0, #0
 8004688:	4770      	bx	lr
        status = HAL_ERROR;
 800468a:	2001      	movs	r0, #1
 800468c:	4770      	bx	lr
        status = HAL_ERROR;
 800468e:	2001      	movs	r0, #1
 8004690:	4770      	bx	lr
      status = HAL_ERROR;
 8004692:	2001      	movs	r0, #1
 8004694:	4770      	bx	lr
        status = HAL_ERROR;
 8004696:	2001      	movs	r0, #1
 8004698:	4770      	bx	lr
        status = HAL_ERROR;
 800469a:	2001      	movs	r0, #1
 800469c:	4770      	bx	lr
      status = HAL_ERROR;
 800469e:	2001      	movs	r0, #1
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_DMA_Init>:
{
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80046a8:	f7ff fd70 	bl	800418c <HAL_GetTick>
  if(hdma == NULL)
 80046ac:	2c00      	cmp	r4, #0
 80046ae:	d05b      	beq.n	8004768 <HAL_DMA_Init+0xc4>
 80046b0:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80046b2:	2300      	movs	r3, #0
 80046b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80046b8:	2302      	movs	r3, #2
 80046ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80046be:	6822      	ldr	r2, [r4, #0]
 80046c0:	6813      	ldr	r3, [r2, #0]
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	f012 0f01 	tst.w	r2, #1
 80046d0:	d00a      	beq.n	80046e8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046d2:	f7ff fd5b 	bl	800418c <HAL_GetTick>
 80046d6:	1b40      	subs	r0, r0, r5
 80046d8:	2805      	cmp	r0, #5
 80046da:	d9f5      	bls.n	80046c8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046dc:	2320      	movs	r3, #32
 80046de:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046e0:	2003      	movs	r0, #3
 80046e2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80046e8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046ea:	4820      	ldr	r0, [pc, #128]	; (800476c <HAL_DMA_Init+0xc8>)
 80046ec:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ee:	6861      	ldr	r1, [r4, #4]
 80046f0:	68a2      	ldr	r2, [r4, #8]
 80046f2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046f4:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046f6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046f8:	6921      	ldr	r1, [r4, #16]
 80046fa:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046fc:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046fe:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004700:	69a1      	ldr	r1, [r4, #24]
 8004702:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004704:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004706:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004708:	6a21      	ldr	r1, [r4, #32]
 800470a:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800470c:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800470e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004710:	2904      	cmp	r1, #4
 8004712:	d01e      	beq.n	8004752 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8004714:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004716:	6826      	ldr	r6, [r4, #0]
 8004718:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800471a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800471e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004720:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004722:	2b04      	cmp	r3, #4
 8004724:	d107      	bne.n	8004736 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8004726:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004728:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800472a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800472c:	b11b      	cbz	r3, 8004736 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800472e:	4620      	mov	r0, r4
 8004730:	f7ff ff70 	bl	8004614 <DMA_CheckFifoParam>
 8004734:	b990      	cbnz	r0, 800475c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8004736:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004738:	4620      	mov	r0, r4
 800473a:	f7ff ff4d 	bl	80045d8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800473e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004740:	233f      	movs	r3, #63	; 0x3f
 8004742:	4093      	lsls	r3, r2
 8004744:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004746:	2000      	movs	r0, #0
 8004748:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800474a:	2301      	movs	r3, #1
 800474c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004750:	e7c9      	b.n	80046e6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004752:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004754:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004756:	4301      	orrs	r1, r0
 8004758:	430a      	orrs	r2, r1
 800475a:	e7db      	b.n	8004714 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800475c:	2340      	movs	r3, #64	; 0x40
 800475e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004760:	2001      	movs	r0, #1
 8004762:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8004766:	e7be      	b.n	80046e6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8004768:	2001      	movs	r0, #1
 800476a:	e7bc      	b.n	80046e6 <HAL_DMA_Init+0x42>
 800476c:	f010803f 	.word	0xf010803f

08004770 <HAL_DMA_Start_IT>:
{
 8004770:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004772:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8004774:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8004778:	2c01      	cmp	r4, #1
 800477a:	d02c      	beq.n	80047d6 <HAL_DMA_Start_IT+0x66>
 800477c:	2401      	movs	r4, #1
 800477e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004782:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8004786:	b2e4      	uxtb	r4, r4
 8004788:	2c01      	cmp	r4, #1
 800478a:	d004      	beq.n	8004796 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 800478c:	2300      	movs	r3, #0
 800478e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8004792:	2002      	movs	r0, #2
}
 8004794:	bd38      	pop	{r3, r4, r5, pc}
 8004796:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004798:	2002      	movs	r0, #2
 800479a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800479e:	2000      	movs	r0, #0
 80047a0:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047a2:	4620      	mov	r0, r4
 80047a4:	f7ff ff01 	bl	80045aa <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047a8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80047aa:	233f      	movs	r3, #63	; 0x3f
 80047ac:	4093      	lsls	r3, r2
 80047ae:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047b0:	6822      	ldr	r2, [r4, #0]
 80047b2:	6813      	ldr	r3, [r2, #0]
 80047b4:	f043 0316 	orr.w	r3, r3, #22
 80047b8:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80047ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047bc:	b123      	cbz	r3, 80047c8 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80047be:	6822      	ldr	r2, [r4, #0]
 80047c0:	6813      	ldr	r3, [r2, #0]
 80047c2:	f043 0308 	orr.w	r3, r3, #8
 80047c6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80047c8:	6822      	ldr	r2, [r4, #0]
 80047ca:	6813      	ldr	r3, [r2, #0]
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047d2:	2000      	movs	r0, #0
 80047d4:	e7de      	b.n	8004794 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80047d6:	2002      	movs	r0, #2
 80047d8:	e7dc      	b.n	8004794 <HAL_DMA_Start_IT+0x24>

080047da <HAL_DMA_Abort>:
{
 80047da:	b570      	push	{r4, r5, r6, lr}
 80047dc:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047de:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80047e0:	f7ff fcd4 	bl	800418c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047e4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d006      	beq.n	80047fc <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80047f2:	2300      	movs	r3, #0
 80047f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80047f8:	2001      	movs	r0, #1
}
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047fe:	6822      	ldr	r2, [r4, #0]
 8004800:	6813      	ldr	r3, [r2, #0]
 8004802:	f023 0316 	bic.w	r3, r3, #22
 8004806:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004808:	6822      	ldr	r2, [r4, #0]
 800480a:	6953      	ldr	r3, [r2, #20]
 800480c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004810:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004814:	b1e3      	cbz	r3, 8004850 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	6813      	ldr	r3, [r2, #0]
 800481a:	f023 0308 	bic.w	r3, r3, #8
 800481e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004820:	6822      	ldr	r2, [r4, #0]
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f013 0f01 	tst.w	r3, #1
 8004832:	d011      	beq.n	8004858 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004834:	f7ff fcaa 	bl	800418c <HAL_GetTick>
 8004838:	1b40      	subs	r0, r0, r5
 800483a:	2805      	cmp	r0, #5
 800483c:	d9f5      	bls.n	800482a <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800483e:	2320      	movs	r3, #32
 8004840:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8004842:	2300      	movs	r3, #0
 8004844:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004848:	2003      	movs	r0, #3
 800484a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 800484e:	e7d4      	b.n	80047fa <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004850:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1df      	bne.n	8004816 <HAL_DMA_Abort+0x3c>
 8004856:	e7e3      	b.n	8004820 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004858:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800485a:	233f      	movs	r3, #63	; 0x3f
 800485c:	4093      	lsls	r3, r2
 800485e:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8004860:	2000      	movs	r0, #0
 8004862:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8004866:	2301      	movs	r3, #1
 8004868:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800486c:	e7c5      	b.n	80047fa <HAL_DMA_Abort+0x20>

0800486e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800486e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d003      	beq.n	8004880 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004878:	2380      	movs	r3, #128	; 0x80
 800487a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800487c:	2001      	movs	r0, #1
 800487e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8004880:	2305      	movs	r3, #5
 8004882:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8004886:	6802      	ldr	r2, [r0, #0]
 8004888:	6813      	ldr	r3, [r2, #0]
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004890:	2000      	movs	r0, #0
}
 8004892:	4770      	bx	lr

08004894 <HAL_DMA_IRQHandler>:
{
 8004894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004896:	b083      	sub	sp, #12
 8004898:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800489e:	4b72      	ldr	r3, [pc, #456]	; (8004a68 <HAL_DMA_IRQHandler+0x1d4>)
 80048a0:	681d      	ldr	r5, [r3, #0]
 80048a2:	4b72      	ldr	r3, [pc, #456]	; (8004a6c <HAL_DMA_IRQHandler+0x1d8>)
 80048a4:	fba3 3505 	umull	r3, r5, r3, r5
 80048a8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048aa:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80048ac:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048ae:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80048b0:	2308      	movs	r3, #8
 80048b2:	4093      	lsls	r3, r2
 80048b4:	4233      	tst	r3, r6
 80048b6:	d010      	beq.n	80048da <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048b8:	6803      	ldr	r3, [r0, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	f012 0f04 	tst.w	r2, #4
 80048c0:	d00b      	beq.n	80048da <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	f022 0204 	bic.w	r2, r2, #4
 80048c8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048ca:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80048cc:	2308      	movs	r3, #8
 80048ce:	4093      	lsls	r3, r2
 80048d0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048d2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80048d4:	f043 0301 	orr.w	r3, r3, #1
 80048d8:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80048dc:	2301      	movs	r3, #1
 80048de:	4093      	lsls	r3, r2
 80048e0:	4233      	tst	r3, r6
 80048e2:	d009      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048e4:	6822      	ldr	r2, [r4, #0]
 80048e6:	6952      	ldr	r2, [r2, #20]
 80048e8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80048ec:	d004      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048ee:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80048f2:	f043 0302 	orr.w	r3, r3, #2
 80048f6:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048f8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80048fa:	2304      	movs	r3, #4
 80048fc:	4093      	lsls	r3, r2
 80048fe:	4233      	tst	r3, r6
 8004900:	d009      	beq.n	8004916 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004902:	6822      	ldr	r2, [r4, #0]
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	f012 0f02 	tst.w	r2, #2
 800490a:	d004      	beq.n	8004916 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800490c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800490e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004910:	f043 0304 	orr.w	r3, r3, #4
 8004914:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004916:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004918:	2310      	movs	r3, #16
 800491a:	4093      	lsls	r3, r2
 800491c:	4233      	tst	r3, r6
 800491e:	d024      	beq.n	800496a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004920:	6822      	ldr	r2, [r4, #0]
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	f012 0f08 	tst.w	r2, #8
 8004928:	d01f      	beq.n	800496a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800492a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004934:	d00d      	beq.n	8004952 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800493c:	d104      	bne.n	8004948 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800493e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004940:	b19b      	cbz	r3, 800496a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8004942:	4620      	mov	r0, r4
 8004944:	4798      	blx	r3
 8004946:	e010      	b.n	800496a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004948:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800494a:	b173      	cbz	r3, 800496a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800494c:	4620      	mov	r0, r4
 800494e:	4798      	blx	r3
 8004950:	e00b      	b.n	800496a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004958:	d103      	bne.n	8004962 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	f022 0208 	bic.w	r2, r2, #8
 8004960:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8004962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004964:	b10b      	cbz	r3, 800496a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8004966:	4620      	mov	r0, r4
 8004968:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800496a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800496c:	2320      	movs	r3, #32
 800496e:	4093      	lsls	r3, r2
 8004970:	4233      	tst	r3, r6
 8004972:	d055      	beq.n	8004a20 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004974:	6822      	ldr	r2, [r4, #0]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	f012 0f10 	tst.w	r2, #16
 800497c:	d050      	beq.n	8004a20 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800497e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004980:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b05      	cmp	r3, #5
 8004988:	d00e      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004992:	d033      	beq.n	80049fc <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800499a:	d12a      	bne.n	80049f2 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 800499c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d03e      	beq.n	8004a20 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80049a2:	4620      	mov	r0, r4
 80049a4:	4798      	blx	r3
 80049a6:	e03b      	b.n	8004a20 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049a8:	6822      	ldr	r2, [r4, #0]
 80049aa:	6813      	ldr	r3, [r2, #0]
 80049ac:	f023 0316 	bic.w	r3, r3, #22
 80049b0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049b2:	6822      	ldr	r2, [r4, #0]
 80049b4:	6953      	ldr	r3, [r2, #20]
 80049b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ba:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049be:	b1a3      	cbz	r3, 80049ea <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049c0:	6822      	ldr	r2, [r4, #0]
 80049c2:	6813      	ldr	r3, [r2, #0]
 80049c4:	f023 0308 	bic.w	r3, r3, #8
 80049c8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80049cc:	233f      	movs	r3, #63	; 0x3f
 80049ce:	4093      	lsls	r3, r2
 80049d0:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80049d2:	2300      	movs	r3, #0
 80049d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80049d8:	2301      	movs	r3, #1
 80049da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80049de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d03f      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80049e4:	4620      	mov	r0, r4
 80049e6:	4798      	blx	r3
 80049e8:	e03c      	b.n	8004a64 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e7      	bne.n	80049c0 <HAL_DMA_IRQHandler+0x12c>
 80049f0:	e7eb      	b.n	80049ca <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80049f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80049f4:	b1a3      	cbz	r3, 8004a20 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80049f6:	4620      	mov	r0, r4
 80049f8:	4798      	blx	r3
 80049fa:	e011      	b.n	8004a20 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004a02:	d109      	bne.n	8004a18 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	f022 0210 	bic.w	r2, r2, #16
 8004a0a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8004a18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a1a:	b10b      	cbz	r3, 8004a20 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a22:	b1fb      	cbz	r3, 8004a64 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a26:	f013 0f01 	tst.w	r3, #1
 8004a2a:	d017      	beq.n	8004a5c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a2c:	2305      	movs	r3, #5
 8004a2e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	6813      	ldr	r3, [r2, #0]
 8004a36:	f023 0301 	bic.w	r3, r3, #1
 8004a3a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8004a3c:	9b01      	ldr	r3, [sp, #4]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	9301      	str	r3, [sp, #4]
 8004a42:	42ab      	cmp	r3, r5
 8004a44:	d804      	bhi.n	8004a50 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f013 0f01 	tst.w	r3, #1
 8004a4e:	d1f5      	bne.n	8004a3c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8004a50:	2300      	movs	r3, #0
 8004a52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8004a5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004a5e:	b10b      	cbz	r3, 8004a64 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8004a60:	4620      	mov	r0, r4
 8004a62:	4798      	blx	r3
}
 8004a64:	b003      	add	sp, #12
 8004a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a68:	20000030 	.word	0x20000030
 8004a6c:	1b4e81b5 	.word	0x1b4e81b5

08004a70 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8004a70:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8004a72:	4770      	bx	lr

08004a74 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a74:	2300      	movs	r3, #0
 8004a76:	2b0f      	cmp	r3, #15
 8004a78:	f200 80c5 	bhi.w	8004c06 <HAL_GPIO_Init+0x192>
{
 8004a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	e039      	b.n	8004af6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a82:	2204      	movs	r2, #4
 8004a84:	e000      	b.n	8004a88 <HAL_GPIO_Init+0x14>
 8004a86:	2200      	movs	r2, #0
 8004a88:	40aa      	lsls	r2, r5
 8004a8a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a8c:	3402      	adds	r4, #2
 8004a8e:	4d5e      	ldr	r5, [pc, #376]	; (8004c08 <HAL_GPIO_Init+0x194>)
 8004a90:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a94:	4a5d      	ldr	r2, [pc, #372]	; (8004c0c <HAL_GPIO_Init+0x198>)
 8004a96:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004a98:	43f2      	mvns	r2, r6
 8004a9a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a9e:	684f      	ldr	r7, [r1, #4]
 8004aa0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8004aa4:	d001      	beq.n	8004aaa <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8004aa6:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8004aaa:	4c58      	ldr	r4, [pc, #352]	; (8004c0c <HAL_GPIO_Init+0x198>)
 8004aac:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8004aae:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8004ab0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ab4:	684f      	ldr	r7, [r1, #4]
 8004ab6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004aba:	d001      	beq.n	8004ac0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8004abc:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8004ac0:	4c52      	ldr	r4, [pc, #328]	; (8004c0c <HAL_GPIO_Init+0x198>)
 8004ac2:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ac4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8004ac6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004aca:	684f      	ldr	r7, [r1, #4]
 8004acc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004ad0:	d001      	beq.n	8004ad6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8004ad2:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8004ad6:	4c4d      	ldr	r4, [pc, #308]	; (8004c0c <HAL_GPIO_Init+0x198>)
 8004ad8:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8004ada:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8004adc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ade:	684d      	ldr	r5, [r1, #4]
 8004ae0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8004ae4:	d001      	beq.n	8004aea <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8004ae6:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8004aea:	4c48      	ldr	r4, [pc, #288]	; (8004c0c <HAL_GPIO_Init+0x198>)
 8004aec:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aee:	3301      	adds	r3, #1
 8004af0:	2b0f      	cmp	r3, #15
 8004af2:	f200 8086 	bhi.w	8004c02 <HAL_GPIO_Init+0x18e>
    ioposition = 0x01U << position;
 8004af6:	2201      	movs	r2, #1
 8004af8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004afa:	680c      	ldr	r4, [r1, #0]
 8004afc:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8004b00:	42b2      	cmp	r2, r6
 8004b02:	d1f4      	bne.n	8004aee <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b04:	684c      	ldr	r4, [r1, #4]
 8004b06:	1e65      	subs	r5, r4, #1
 8004b08:	2d01      	cmp	r5, #1
 8004b0a:	d903      	bls.n	8004b14 <HAL_GPIO_Init+0xa0>
 8004b0c:	2c11      	cmp	r4, #17
 8004b0e:	d001      	beq.n	8004b14 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b10:	2c12      	cmp	r4, #18
 8004b12:	d112      	bne.n	8004b3a <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8004b14:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b16:	005f      	lsls	r7, r3, #1
 8004b18:	2403      	movs	r4, #3
 8004b1a:	40bc      	lsls	r4, r7
 8004b1c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b20:	68cc      	ldr	r4, [r1, #12]
 8004b22:	40bc      	lsls	r4, r7
 8004b24:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004b26:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8004b28:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b2a:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b2e:	684c      	ldr	r4, [r1, #4]
 8004b30:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8004b34:	409a      	lsls	r2, r3
 8004b36:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8004b38:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8004b3a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b3c:	005f      	lsls	r7, r3, #1
 8004b3e:	2203      	movs	r2, #3
 8004b40:	40ba      	lsls	r2, r7
 8004b42:	43d2      	mvns	r2, r2
 8004b44:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b46:	688d      	ldr	r5, [r1, #8]
 8004b48:	40bd      	lsls	r5, r7
 8004b4a:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8004b4c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b4e:	684c      	ldr	r4, [r1, #4]
 8004b50:	2c02      	cmp	r4, #2
 8004b52:	d001      	beq.n	8004b58 <HAL_GPIO_Init+0xe4>
 8004b54:	2c12      	cmp	r4, #18
 8004b56:	d113      	bne.n	8004b80 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8004b58:	08dd      	lsrs	r5, r3, #3
 8004b5a:	3508      	adds	r5, #8
 8004b5c:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b60:	f003 0407 	and.w	r4, r3, #7
 8004b64:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004b68:	240f      	movs	r4, #15
 8004b6a:	fa04 f40c 	lsl.w	r4, r4, ip
 8004b6e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b72:	690c      	ldr	r4, [r1, #16]
 8004b74:	fa04 f40c 	lsl.w	r4, r4, ip
 8004b78:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004b7c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8004b80:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b82:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b84:	684c      	ldr	r4, [r1, #4]
 8004b86:	f004 0403 	and.w	r4, r4, #3
 8004b8a:	40bc      	lsls	r4, r7
 8004b8c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8004b8e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b90:	684a      	ldr	r2, [r1, #4]
 8004b92:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8004b96:	d0aa      	beq.n	8004aee <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b98:	2200      	movs	r2, #0
 8004b9a:	9201      	str	r2, [sp, #4]
 8004b9c:	4a1c      	ldr	r2, [pc, #112]	; (8004c10 <HAL_GPIO_Init+0x19c>)
 8004b9e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004ba0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004ba4:	6454      	str	r4, [r2, #68]	; 0x44
 8004ba6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004ba8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004bac:	9201      	str	r2, [sp, #4]
 8004bae:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004bb0:	089c      	lsrs	r4, r3, #2
 8004bb2:	1ca5      	adds	r5, r4, #2
 8004bb4:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <HAL_GPIO_Init+0x194>)
 8004bb6:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bba:	f003 0203 	and.w	r2, r3, #3
 8004bbe:	0095      	lsls	r5, r2, #2
 8004bc0:	220f      	movs	r2, #15
 8004bc2:	40aa      	lsls	r2, r5
 8004bc4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bc8:	4a12      	ldr	r2, [pc, #72]	; (8004c14 <HAL_GPIO_Init+0x1a0>)
 8004bca:	4290      	cmp	r0, r2
 8004bcc:	f43f af5b 	beq.w	8004a86 <HAL_GPIO_Init+0x12>
 8004bd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bd4:	4290      	cmp	r0, r2
 8004bd6:	d00e      	beq.n	8004bf6 <HAL_GPIO_Init+0x182>
 8004bd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bdc:	4290      	cmp	r0, r2
 8004bde:	d00c      	beq.n	8004bfa <HAL_GPIO_Init+0x186>
 8004be0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004be4:	4290      	cmp	r0, r2
 8004be6:	d00a      	beq.n	8004bfe <HAL_GPIO_Init+0x18a>
 8004be8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bec:	4290      	cmp	r0, r2
 8004bee:	f43f af48 	beq.w	8004a82 <HAL_GPIO_Init+0xe>
 8004bf2:	2207      	movs	r2, #7
 8004bf4:	e748      	b.n	8004a88 <HAL_GPIO_Init+0x14>
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	e746      	b.n	8004a88 <HAL_GPIO_Init+0x14>
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	e744      	b.n	8004a88 <HAL_GPIO_Init+0x14>
 8004bfe:	2203      	movs	r2, #3
 8004c00:	e742      	b.n	8004a88 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8004c02:	b003      	add	sp, #12
 8004c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c06:	4770      	bx	lr
 8004c08:	40013800 	.word	0x40013800
 8004c0c:	40013c00 	.word	0x40013c00
 8004c10:	40023800 	.word	0x40023800
 8004c14:	40020000 	.word	0x40020000

08004c18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c18:	b912      	cbnz	r2, 8004c20 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c1a:	0409      	lsls	r1, r1, #16
 8004c1c:	6181      	str	r1, [r0, #24]
  }
}
 8004c1e:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8004c20:	6181      	str	r1, [r0, #24]
 8004c22:	4770      	bx	lr

08004c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c24:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	4203      	tst	r3, r0
 8004c2c:	d100      	bne.n	8004c30 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004c2e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c30:	4b02      	ldr	r3, [pc, #8]	; (8004c3c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004c32:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c34:	f7fe fb50 	bl	80032d8 <HAL_GPIO_EXTI_Callback>
}
 8004c38:	e7f9      	b.n	8004c2e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004c3a:	bf00      	nop
 8004c3c:	40013c00 	.word	0x40013c00

08004c40 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c40:	6803      	ldr	r3, [r0, #0]
 8004c42:	695a      	ldr	r2, [r3, #20]
 8004c44:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004c48:	d011      	beq.n	8004c6e <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c50:	2300      	movs	r3, #0
 8004c52:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c54:	2220      	movs	r2, #32
 8004c56:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c5a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c5e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004c60:	f042 0204 	orr.w	r2, r2, #4
 8004c64:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	4770      	bx	lr
  }
  return HAL_OK;
 8004c6e:	2000      	movs	r0, #0
}
 8004c70:	4770      	bx	lr

08004c72 <I2C_WaitOnFlagUntilTimeout>:
{
 8004c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c74:	4606      	mov	r6, r0
 8004c76:	460c      	mov	r4, r1
 8004c78:	4617      	mov	r7, r2
 8004c7a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c7c:	e022      	b.n	8004cc4 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7e:	f7ff fa85 	bl	800418c <HAL_GetTick>
 8004c82:	9b06      	ldr	r3, [sp, #24]
 8004c84:	1ac0      	subs	r0, r0, r3
 8004c86:	42a8      	cmp	r0, r5
 8004c88:	d800      	bhi.n	8004c8c <I2C_WaitOnFlagUntilTimeout+0x1a>
 8004c8a:	b9dd      	cbnz	r5, 8004cc4 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c90:	2220      	movs	r2, #32
 8004c92:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c96:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c9a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8004c9c:	f042 0220 	orr.w	r2, r2, #32
 8004ca0:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004ca2:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	e01a      	b.n	8004ce0 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004caa:	6833      	ldr	r3, [r6, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	ea24 0303 	bic.w	r3, r4, r3
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	fab3 f383 	clz	r3, r3
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	429f      	cmp	r7, r3
 8004cbc:	d10f      	bne.n	8004cde <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8004cbe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004cc2:	d1dc      	bne.n	8004c7e <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cc4:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d0ee      	beq.n	8004caa <I2C_WaitOnFlagUntilTimeout+0x38>
 8004ccc:	6833      	ldr	r3, [r6, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	ea24 0303 	bic.w	r3, r4, r3
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	fab3 f383 	clz	r3, r3
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	e7ed      	b.n	8004cba <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8004cde:	2000      	movs	r0, #0
}
 8004ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	460d      	mov	r5, r1
 8004ce8:	4616      	mov	r6, r2
 8004cea:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cec:	e03c      	b.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cfc:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d02:	2220      	movs	r2, #32
 8004d04:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d0e:	f042 0204 	orr.w	r2, r2, #4
 8004d12:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004d14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8004d18:	2001      	movs	r0, #1
 8004d1a:	e033      	b.n	8004d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1c:	f7ff fa36 	bl	800418c <HAL_GetTick>
 8004d20:	1bc0      	subs	r0, r0, r7
 8004d22:	42b0      	cmp	r0, r6
 8004d24:	d800      	bhi.n	8004d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8004d26:	b9fe      	cbnz	r6, 8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d36:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d38:	f042 0220 	orr.w	r2, r2, #32
 8004d3c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004d3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004d42:	2001      	movs	r0, #1
 8004d44:	e01e      	b.n	8004d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	ea25 0303 	bic.w	r3, r5, r3
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3300      	adds	r3, #0
 8004d52:	bf18      	it	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	b1a3      	cbz	r3, 8004d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004d60:	d1c5      	bne.n	8004cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8004d62:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004d66:	d1d9      	bne.n	8004d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d68:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d0ea      	beq.n	8004d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	ea25 0303 	bic.w	r3, r5, r3
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3300      	adds	r3, #0
 8004d7c:	bf18      	it	ne
 8004d7e:	2301      	movne	r3, #1
 8004d80:	e7e9      	b.n	8004d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8004d82:	2000      	movs	r0, #0
}
 8004d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d86 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004d86:	b570      	push	{r4, r5, r6, lr}
 8004d88:	4604      	mov	r4, r0
 8004d8a:	460d      	mov	r5, r1
 8004d8c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d96:	d11c      	bne.n	8004dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f7ff ff51 	bl	8004c40 <I2C_IsAcknowledgeFailed>
 8004d9e:	b9d0      	cbnz	r0, 8004dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004da0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004da4:	d0f3      	beq.n	8004d8e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da6:	f7ff f9f1 	bl	800418c <HAL_GetTick>
 8004daa:	1b80      	subs	r0, r0, r6
 8004dac:	42a8      	cmp	r0, r5
 8004dae:	d801      	bhi.n	8004db4 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8004db0:	2d00      	cmp	r5, #0
 8004db2:	d1ec      	bne.n	8004d8e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004db8:	2220      	movs	r2, #32
 8004dba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dbe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004dc4:	f042 0220 	orr.w	r2, r2, #32
 8004dc8:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004dca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004dce:	2001      	movs	r0, #1
 8004dd0:	e000      	b.n	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004dd2:	2000      	movs	r0, #0
}
 8004dd4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004dd6:	2001      	movs	r0, #1
 8004dd8:	e7fc      	b.n	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08004ddc <I2C_RequestMemoryWrite>:
{
 8004ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	4604      	mov	r4, r0
 8004de4:	4688      	mov	r8, r1
 8004de6:	4616      	mov	r6, r2
 8004de8:	461f      	mov	r7, r3
 8004dea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dec:	6802      	ldr	r2, [r0, #0]
 8004dee:	6813      	ldr	r3, [r2, #0]
 8004df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df4:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004df6:	9500      	str	r5, [sp, #0]
 8004df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e00:	f7ff ff37 	bl	8004c72 <I2C_WaitOnFlagUntilTimeout>
 8004e04:	b160      	cbz	r0, 8004e20 <I2C_RequestMemoryWrite+0x44>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e0e:	d04f      	beq.n	8004eb0 <I2C_RequestMemoryWrite+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e14:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	b004      	add	sp, #16
 8004e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e20:	6822      	ldr	r2, [r4, #0]
 8004e22:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8004e26:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e28:	462b      	mov	r3, r5
 8004e2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e2c:	4921      	ldr	r1, [pc, #132]	; (8004eb4 <I2C_RequestMemoryWrite+0xd8>)
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f7ff ff57 	bl	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e34:	b108      	cbz	r0, 8004e3a <I2C_RequestMemoryWrite+0x5e>
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e7ee      	b.n	8004e18 <I2C_RequestMemoryWrite+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	9303      	str	r3, [sp, #12]
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	9203      	str	r2, [sp, #12]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	9303      	str	r3, [sp, #12]
 8004e48:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e4a:	462a      	mov	r2, r5
 8004e4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f7ff ff99 	bl	8004d86 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	b158      	cbz	r0, 8004e70 <I2C_RequestMemoryWrite+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d001      	beq.n	8004e62 <I2C_RequestMemoryWrite+0x86>
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e7da      	b.n	8004e18 <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e62:	6822      	ldr	r2, [r4, #0]
 8004e64:	6813      	ldr	r3, [r2, #0]
 8004e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e6a:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e7d3      	b.n	8004e18 <I2C_RequestMemoryWrite+0x3c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e70:	2f01      	cmp	r7, #1
 8004e72:	d00e      	beq.n	8004e92 <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	0a32      	lsrs	r2, r6, #8
 8004e78:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e7a:	462a      	mov	r2, r5
 8004e7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f7ff ff81 	bl	8004d86 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	b178      	cbz	r0, 8004ea8 <I2C_RequestMemoryWrite+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d005      	beq.n	8004e9a <I2C_RequestMemoryWrite+0xbe>
      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e7c2      	b.n	8004e18 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e92:	6822      	ldr	r2, [r4, #0]
 8004e94:	b2f6      	uxtb	r6, r6
 8004e96:	6116      	str	r6, [r2, #16]
 8004e98:	e7be      	b.n	8004e18 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9a:	6822      	ldr	r2, [r4, #0]
 8004e9c:	6813      	ldr	r3, [r2, #0]
 8004e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ea2:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e7b7      	b.n	8004e18 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ea8:	6822      	ldr	r2, [r4, #0]
 8004eaa:	b2f6      	uxtb	r6, r6
 8004eac:	6116      	str	r6, [r2, #16]
 8004eae:	e7b3      	b.n	8004e18 <I2C_RequestMemoryWrite+0x3c>
    return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e7b1      	b.n	8004e18 <I2C_RequestMemoryWrite+0x3c>
 8004eb4:	00010002 	.word	0x00010002

08004eb8 <I2C_RequestMemoryRead>:
{
 8004eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	460e      	mov	r6, r1
 8004ec2:	4617      	mov	r7, r2
 8004ec4:	4698      	mov	r8, r3
 8004ec6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec8:	6802      	ldr	r2, [r0, #0]
 8004eca:	6813      	ldr	r3, [r2, #0]
 8004ecc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ed0:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ed2:	6802      	ldr	r2, [r0, #0]
 8004ed4:	6813      	ldr	r3, [r2, #0]
 8004ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eda:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004edc:	9500      	str	r5, [sp, #0]
 8004ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ee6:	f7ff fec4 	bl	8004c72 <I2C_WaitOnFlagUntilTimeout>
 8004eea:	b168      	cbz	r0, 8004f08 <I2C_RequestMemoryRead+0x50>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004ef4:	f000 8089 	beq.w	800500a <I2C_RequestMemoryRead+0x152>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004efc:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	b004      	add	sp, #16
 8004f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f08:	b2f6      	uxtb	r6, r6
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 8004f10:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f12:	462b      	mov	r3, r5
 8004f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f16:	493f      	ldr	r1, [pc, #252]	; (8005014 <I2C_RequestMemoryRead+0x15c>)
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f7ff fee2 	bl	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f1e:	b108      	cbz	r0, 8004f24 <I2C_RequestMemoryRead+0x6c>
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e7ed      	b.n	8004f00 <I2C_RequestMemoryRead+0x48>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f24:	2300      	movs	r3, #0
 8004f26:	9303      	str	r3, [sp, #12]
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	695a      	ldr	r2, [r3, #20]
 8004f2c:	9203      	str	r2, [sp, #12]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	9303      	str	r3, [sp, #12]
 8004f32:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f34:	462a      	mov	r2, r5
 8004f36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f7ff ff24 	bl	8004d86 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f3e:	b158      	cbz	r0, 8004f58 <I2C_RequestMemoryRead+0xa0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d001      	beq.n	8004f4a <I2C_RequestMemoryRead+0x92>
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e7da      	b.n	8004f00 <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4a:	6822      	ldr	r2, [r4, #0]
 8004f4c:	6813      	ldr	r3, [r2, #0]
 8004f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f52:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e7d3      	b.n	8004f00 <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f58:	f1b8 0f01 	cmp.w	r8, #1
 8004f5c:	d10d      	bne.n	8004f7a <I2C_RequestMemoryRead+0xc2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	b2ff      	uxtb	r7, r7
 8004f62:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f64:	462a      	mov	r2, r5
 8004f66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f7ff ff0c 	bl	8004d86 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f6e:	b320      	cbz	r0, 8004fba <I2C_RequestMemoryRead+0x102>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d01a      	beq.n	8004fac <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e7c2      	b.n	8004f00 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	0a3a      	lsrs	r2, r7, #8
 8004f7e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f80:	462a      	mov	r2, r5
 8004f82:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004f84:	4620      	mov	r0, r4
 8004f86:	f7ff fefe 	bl	8004d86 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f8a:	b158      	cbz	r0, 8004fa4 <I2C_RequestMemoryRead+0xec>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d001      	beq.n	8004f96 <I2C_RequestMemoryRead+0xde>
      return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e7b4      	b.n	8004f00 <I2C_RequestMemoryRead+0x48>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f96:	6822      	ldr	r2, [r4, #0]
 8004f98:	6813      	ldr	r3, [r2, #0]
 8004f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f9e:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e7ad      	b.n	8004f00 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	b2ff      	uxtb	r7, r7
 8004fa8:	611f      	str	r7, [r3, #16]
 8004faa:	e7db      	b.n	8004f64 <I2C_RequestMemoryRead+0xac>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fac:	6822      	ldr	r2, [r4, #0]
 8004fae:	6813      	ldr	r3, [r2, #0]
 8004fb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fb4:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e7a2      	b.n	8004f00 <I2C_RequestMemoryRead+0x48>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fba:	6822      	ldr	r2, [r4, #0]
 8004fbc:	6813      	ldr	r3, [r2, #0]
 8004fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc4:	9500      	str	r5, [sp, #0]
 8004fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f7ff fe4f 	bl	8004c72 <I2C_WaitOnFlagUntilTimeout>
 8004fd4:	b148      	cbz	r0, 8004fea <I2C_RequestMemoryRead+0x132>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004fde:	d016      	beq.n	800500e <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fe4:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e78a      	b.n	8004f00 <I2C_RequestMemoryRead+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	f046 0601 	orr.w	r6, r6, #1
 8004ff0:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ff2:	462b      	mov	r3, r5
 8004ff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ff6:	4907      	ldr	r1, [pc, #28]	; (8005014 <I2C_RequestMemoryRead+0x15c>)
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f7ff fe72 	bl	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2800      	cmp	r0, #0
 8005002:	f43f af7d 	beq.w	8004f00 <I2C_RequestMemoryRead+0x48>
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e77a      	b.n	8004f00 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e778      	b.n	8004f00 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e776      	b.n	8004f00 <I2C_RequestMemoryRead+0x48>
 8005012:	bf00      	nop
 8005014:	00010002 	.word	0x00010002

08005018 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	4604      	mov	r4, r0
 800501c:	460d      	mov	r5, r1
 800501e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	f013 0f04 	tst.w	r3, #4
 8005028:	d11c      	bne.n	8005064 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800502a:	4620      	mov	r0, r4
 800502c:	f7ff fe08 	bl	8004c40 <I2C_IsAcknowledgeFailed>
 8005030:	b9d0      	cbnz	r0, 8005068 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005032:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005036:	d0f3      	beq.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005038:	f7ff f8a8 	bl	800418c <HAL_GetTick>
 800503c:	1b80      	subs	r0, r0, r6
 800503e:	42a8      	cmp	r0, r5
 8005040:	d801      	bhi.n	8005046 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8005042:	2d00      	cmp	r5, #0
 8005044:	d1ec      	bne.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005046:	2300      	movs	r3, #0
 8005048:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800504a:	2220      	movs	r2, #32
 800504c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005050:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005054:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005056:	f042 0220 	orr.w	r2, r2, #32
 800505a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800505c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005060:	2001      	movs	r0, #1
 8005062:	e000      	b.n	8005066 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8005064:	2000      	movs	r0, #0
}
 8005066:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005068:	2001      	movs	r0, #1
 800506a:	e7fc      	b.n	8005066 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

0800506c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	4605      	mov	r5, r0
 8005070:	460c      	mov	r4, r1
 8005072:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	f012 0f40 	tst.w	r2, #64	; 0x40
 800507c:	d129      	bne.n	80050d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	f012 0f10 	tst.w	r2, #16
 8005084:	d115      	bne.n	80050b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005086:	f7ff f881 	bl	800418c <HAL_GetTick>
 800508a:	1b80      	subs	r0, r0, r6
 800508c:	42a0      	cmp	r0, r4
 800508e:	d801      	bhi.n	8005094 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8005090:	2c00      	cmp	r4, #0
 8005092:	d1ef      	bne.n	8005074 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005094:	2300      	movs	r3, #0
 8005096:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005098:	2220      	movs	r2, #32
 800509a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800509e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050a2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80050a4:	f042 0220 	orr.w	r2, r2, #32
 80050a8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80050aa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80050ae:	2001      	movs	r0, #1
}
 80050b0:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050b2:	f06f 0210 	mvn.w	r2, #16
 80050b6:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050bc:	2220      	movs	r2, #32
 80050be:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050c6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80050c8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80050ca:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80050ce:	2001      	movs	r0, #1
 80050d0:	e7ee      	b.n	80050b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 80050d2:	2000      	movs	r0, #0
 80050d4:	e7ec      	b.n	80050b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

080050d8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80050d8:	2800      	cmp	r0, #0
 80050da:	f000 80c8 	beq.w	800526e <HAL_I2C_Init+0x196>
{
 80050de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d075      	beq.n	80051d6 <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80050ea:	2324      	movs	r3, #36	; 0x24
 80050ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80050f0:	6822      	ldr	r2, [r4, #0]
 80050f2:	6813      	ldr	r3, [r2, #0]
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050fa:	6822      	ldr	r2, [r4, #0]
 80050fc:	6813      	ldr	r3, [r2, #0]
 80050fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005102:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	6813      	ldr	r3, [r2, #0]
 8005108:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800510c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800510e:	f000 fddb 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005112:	6862      	ldr	r2, [r4, #4]
 8005114:	4b58      	ldr	r3, [pc, #352]	; (8005278 <HAL_I2C_Init+0x1a0>)
 8005116:	429a      	cmp	r2, r3
 8005118:	d862      	bhi.n	80051e0 <HAL_I2C_Init+0x108>
 800511a:	4b58      	ldr	r3, [pc, #352]	; (800527c <HAL_I2C_Init+0x1a4>)
 800511c:	4298      	cmp	r0, r3
 800511e:	bf8c      	ite	hi
 8005120:	2300      	movhi	r3, #0
 8005122:	2301      	movls	r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	f040 80a4 	bne.w	8005272 <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 800512a:	4b55      	ldr	r3, [pc, #340]	; (8005280 <HAL_I2C_Init+0x1a8>)
 800512c:	fba3 2300 	umull	r2, r3, r3, r0
 8005130:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005132:	6821      	ldr	r1, [r4, #0]
 8005134:	684a      	ldr	r2, [r1, #4]
 8005136:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800513a:	431a      	orrs	r2, r3
 800513c:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800513e:	6825      	ldr	r5, [r4, #0]
 8005140:	6a2a      	ldr	r2, [r5, #32]
 8005142:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005146:	6866      	ldr	r6, [r4, #4]
 8005148:	494b      	ldr	r1, [pc, #300]	; (8005278 <HAL_I2C_Init+0x1a0>)
 800514a:	428e      	cmp	r6, r1
 800514c:	d84e      	bhi.n	80051ec <HAL_I2C_Init+0x114>
 800514e:	3301      	adds	r3, #1
 8005150:	4313      	orrs	r3, r2
 8005152:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005154:	6825      	ldr	r5, [r4, #0]
 8005156:	69e9      	ldr	r1, [r5, #28]
 8005158:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800515c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005160:	6863      	ldr	r3, [r4, #4]
 8005162:	4a45      	ldr	r2, [pc, #276]	; (8005278 <HAL_I2C_Init+0x1a0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d84b      	bhi.n	8005200 <HAL_I2C_Init+0x128>
 8005168:	3801      	subs	r0, #1
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005170:	3301      	adds	r3, #1
 8005172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005176:	2b04      	cmp	r3, #4
 8005178:	bf38      	it	cc
 800517a:	2304      	movcc	r3, #4
 800517c:	430b      	orrs	r3, r1
 800517e:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005180:	6821      	ldr	r1, [r4, #0]
 8005182:	680b      	ldr	r3, [r1, #0]
 8005184:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005188:	69e2      	ldr	r2, [r4, #28]
 800518a:	6a20      	ldr	r0, [r4, #32]
 800518c:	4302      	orrs	r2, r0
 800518e:	4313      	orrs	r3, r2
 8005190:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005192:	6821      	ldr	r1, [r4, #0]
 8005194:	688b      	ldr	r3, [r1, #8]
 8005196:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800519a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800519e:	6922      	ldr	r2, [r4, #16]
 80051a0:	68e0      	ldr	r0, [r4, #12]
 80051a2:	4302      	orrs	r2, r0
 80051a4:	4313      	orrs	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051a8:	6821      	ldr	r1, [r4, #0]
 80051aa:	68cb      	ldr	r3, [r1, #12]
 80051ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051b0:	6962      	ldr	r2, [r4, #20]
 80051b2:	69a0      	ldr	r0, [r4, #24]
 80051b4:	4302      	orrs	r2, r0
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	6813      	ldr	r3, [r2, #0]
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051c4:	2000      	movs	r0, #0
 80051c6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051c8:	2320      	movs	r3, #32
 80051ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051ce:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80051d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80051d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80051da:	f7fe f8eb 	bl	80033b4 <HAL_I2C_MspInit>
 80051de:	e784      	b.n	80050ea <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051e0:	4b28      	ldr	r3, [pc, #160]	; (8005284 <HAL_I2C_Init+0x1ac>)
 80051e2:	4298      	cmp	r0, r3
 80051e4:	bf8c      	ite	hi
 80051e6:	2300      	movhi	r3, #0
 80051e8:	2301      	movls	r3, #1
 80051ea:	e79b      	b.n	8005124 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051ec:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	4924      	ldr	r1, [pc, #144]	; (8005288 <HAL_I2C_Init+0x1b0>)
 80051f6:	fba1 1303 	umull	r1, r3, r1, r3
 80051fa:	099b      	lsrs	r3, r3, #6
 80051fc:	3301      	adds	r3, #1
 80051fe:	e7a7      	b.n	8005150 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005200:	68a2      	ldr	r2, [r4, #8]
 8005202:	b9ba      	cbnz	r2, 8005234 <HAL_I2C_Init+0x15c>
 8005204:	1e46      	subs	r6, r0, #1
 8005206:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800520a:	fbb6 f6f7 	udiv	r6, r6, r7
 800520e:	3601      	adds	r6, #1
 8005210:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8005214:	fab6 f686 	clz	r6, r6
 8005218:	0976      	lsrs	r6, r6, #5
 800521a:	bb36      	cbnz	r6, 800526a <HAL_I2C_Init+0x192>
 800521c:	b9c2      	cbnz	r2, 8005250 <HAL_I2C_Init+0x178>
 800521e:	3801      	subs	r0, #1
 8005220:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005224:	fbb0 f3f3 	udiv	r3, r0, r3
 8005228:	3301      	adds	r3, #1
 800522a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800522e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8005232:	e7a3      	b.n	800517c <HAL_I2C_Init+0xa4>
 8005234:	1e46      	subs	r6, r0, #1
 8005236:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800523a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800523e:	fbb6 f6f7 	udiv	r6, r6, r7
 8005242:	3601      	adds	r6, #1
 8005244:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8005248:	fab6 f686 	clz	r6, r6
 800524c:	0976      	lsrs	r6, r6, #5
 800524e:	e7e4      	b.n	800521a <HAL_I2C_Init+0x142>
 8005250:	3801      	subs	r0, #1
 8005252:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005256:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800525a:	fbb0 f2f3 	udiv	r2, r0, r3
 800525e:	3201      	adds	r2, #1
 8005260:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005264:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8005268:	e788      	b.n	800517c <HAL_I2C_Init+0xa4>
 800526a:	2301      	movs	r3, #1
 800526c:	e786      	b.n	800517c <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 800526e:	2001      	movs	r0, #1
}
 8005270:	4770      	bx	lr
    return HAL_ERROR;
 8005272:	2001      	movs	r0, #1
 8005274:	e7ae      	b.n	80051d4 <HAL_I2C_Init+0xfc>
 8005276:	bf00      	nop
 8005278:	000186a0 	.word	0x000186a0
 800527c:	001e847f 	.word	0x001e847f
 8005280:	431bde83 	.word	0x431bde83
 8005284:	003d08ff 	.word	0x003d08ff
 8005288:	10624dd3 	.word	0x10624dd3

0800528c <HAL_I2C_Mem_Write>:
{
 800528c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005290:	b082      	sub	sp, #8
 8005292:	4604      	mov	r4, r0
 8005294:	460e      	mov	r6, r1
 8005296:	4617      	mov	r7, r2
 8005298:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 800529a:	f7fe ff77 	bl	800418c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800529e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d004      	beq.n	80052b2 <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 80052a8:	2302      	movs	r3, #2
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	b002      	add	sp, #8
 80052ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052b4:	9000      	str	r0, [sp, #0]
 80052b6:	2319      	movs	r3, #25
 80052b8:	2201      	movs	r2, #1
 80052ba:	494c      	ldr	r1, [pc, #304]	; (80053ec <HAL_I2C_Mem_Write+0x160>)
 80052bc:	4620      	mov	r0, r4
 80052be:	f7ff fcd8 	bl	8004c72 <I2C_WaitOnFlagUntilTimeout>
 80052c2:	2800      	cmp	r0, #0
 80052c4:	f040 808b 	bne.w	80053de <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 80052c8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	f000 8088 	beq.w	80053e2 <HAL_I2C_Mem_Write+0x156>
 80052d2:	2301      	movs	r3, #1
 80052d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	f012 0f01 	tst.w	r2, #1
 80052e0:	d103      	bne.n	80052ea <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	f042 0201 	orr.w	r2, r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	6813      	ldr	r3, [r2, #0]
 80052ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052f2:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052f4:	2321      	movs	r3, #33	; 0x21
 80052f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052fa:	2340      	movs	r3, #64	; 0x40
 80052fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005300:	2300      	movs	r3, #0
 8005302:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005304:	9b08      	ldr	r3, [sp, #32]
 8005306:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005308:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800530c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800530e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005310:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005312:	4b37      	ldr	r3, [pc, #220]	; (80053f0 <HAL_I2C_Mem_Write+0x164>)
 8005314:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005316:	9501      	str	r5, [sp, #4]
 8005318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	4643      	mov	r3, r8
 800531e:	463a      	mov	r2, r7
 8005320:	4631      	mov	r1, r6
 8005322:	4620      	mov	r0, r4
 8005324:	f7ff fd5a 	bl	8004ddc <I2C_RequestMemoryWrite>
 8005328:	2800      	cmp	r0, #0
 800532a:	d15c      	bne.n	80053e6 <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 800532c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800532e:	2b00      	cmp	r3, #0
 8005330:	d034      	beq.n	800539c <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005332:	462a      	mov	r2, r5
 8005334:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005336:	4620      	mov	r0, r4
 8005338:	f7ff fd25 	bl	8004d86 <I2C_WaitOnTXEFlagUntilTimeout>
 800533c:	bb10      	cbnz	r0, 8005384 <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800533e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	7812      	ldrb	r2, [r2, #0]
 8005344:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005346:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005348:	1c4b      	adds	r3, r1, #1
 800534a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800534c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800534e:	3b01      	subs	r3, #1
 8005350:	b29b      	uxth	r3, r3
 8005352:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005354:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005356:	3a01      	subs	r2, #1
 8005358:	b292      	uxth	r2, r2
 800535a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800535c:	6822      	ldr	r2, [r4, #0]
 800535e:	6950      	ldr	r0, [r2, #20]
 8005360:	f010 0f04 	tst.w	r0, #4
 8005364:	d0e2      	beq.n	800532c <HAL_I2C_Mem_Write+0xa0>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0e0      	beq.n	800532c <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800536a:	784b      	ldrb	r3, [r1, #1]
 800536c:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800536e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005370:	3301      	adds	r3, #1
 8005372:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005374:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005376:	3b01      	subs	r3, #1
 8005378:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800537a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800537c:	3b01      	subs	r3, #1
 800537e:	b29b      	uxth	r3, r3
 8005380:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005382:	e7d3      	b.n	800532c <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005384:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005386:	2b04      	cmp	r3, #4
 8005388:	d001      	beq.n	800538e <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e78d      	b.n	80052aa <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538e:	6822      	ldr	r2, [r4, #0]
 8005390:	6813      	ldr	r3, [r2, #0]
 8005392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005396:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e786      	b.n	80052aa <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800539c:	462a      	mov	r2, r5
 800539e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053a0:	4620      	mov	r0, r4
 80053a2:	f7ff fe39 	bl	8005018 <I2C_WaitOnBTFFlagUntilTimeout>
 80053a6:	4603      	mov	r3, r0
 80053a8:	b158      	cbz	r0, 80053c2 <HAL_I2C_Mem_Write+0x136>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	d001      	beq.n	80053b4 <HAL_I2C_Mem_Write+0x128>
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e77a      	b.n	80052aa <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b4:	6822      	ldr	r2, [r4, #0]
 80053b6:	6813      	ldr	r3, [r2, #0]
 80053b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053bc:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e773      	b.n	80052aa <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c2:	6821      	ldr	r1, [r4, #0]
 80053c4:	680a      	ldr	r2, [r1, #0]
 80053c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ca:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80053cc:	2220      	movs	r2, #32
 80053ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d2:	2200      	movs	r2, #0
 80053d4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80053d8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 80053dc:	e765      	b.n	80052aa <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 80053de:	2302      	movs	r3, #2
 80053e0:	e763      	b.n	80052aa <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 80053e2:	2302      	movs	r3, #2
 80053e4:	e761      	b.n	80052aa <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e75f      	b.n	80052aa <HAL_I2C_Mem_Write+0x1e>
 80053ea:	bf00      	nop
 80053ec:	00100002 	.word	0x00100002
 80053f0:	ffff0000 	.word	0xffff0000

080053f4 <HAL_I2C_Mem_Read>:
{
 80053f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f8:	b086      	sub	sp, #24
 80053fa:	4604      	mov	r4, r0
 80053fc:	460e      	mov	r6, r1
 80053fe:	4617      	mov	r7, r2
 8005400:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8005402:	f7fe fec3 	bl	800418c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005406:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b20      	cmp	r3, #32
 800540e:	d004      	beq.n	800541a <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8005410:	2602      	movs	r6, #2
}
 8005412:	4630      	mov	r0, r6
 8005414:	b006      	add	sp, #24
 8005416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800541a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800541c:	9000      	str	r0, [sp, #0]
 800541e:	2319      	movs	r3, #25
 8005420:	2201      	movs	r2, #1
 8005422:	499e      	ldr	r1, [pc, #632]	; (800569c <HAL_I2C_Mem_Read+0x2a8>)
 8005424:	4620      	mov	r0, r4
 8005426:	f7ff fc24 	bl	8004c72 <I2C_WaitOnFlagUntilTimeout>
 800542a:	2800      	cmp	r0, #0
 800542c:	f040 8134 	bne.w	8005698 <HAL_I2C_Mem_Read+0x2a4>
    __HAL_LOCK(hi2c);
 8005430:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	f000 8137 	beq.w	80056a8 <HAL_I2C_Mem_Read+0x2b4>
 800543a:	2301      	movs	r3, #1
 800543c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	f012 0f01 	tst.w	r2, #1
 8005448:	d103      	bne.n	8005452 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	f042 0201 	orr.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	6813      	ldr	r3, [r2, #0]
 8005456:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800545a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800545c:	2322      	movs	r3, #34	; 0x22
 800545e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005462:	2340      	movs	r3, #64	; 0x40
 8005464:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005468:	2300      	movs	r3, #0
 800546a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800546c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800546e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005470:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8005474:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005476:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005478:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800547a:	4b89      	ldr	r3, [pc, #548]	; (80056a0 <HAL_I2C_Mem_Read+0x2ac>)
 800547c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800547e:	9501      	str	r5, [sp, #4]
 8005480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	4643      	mov	r3, r8
 8005486:	463a      	mov	r2, r7
 8005488:	4631      	mov	r1, r6
 800548a:	4620      	mov	r0, r4
 800548c:	f7ff fd14 	bl	8004eb8 <I2C_RequestMemoryRead>
 8005490:	4606      	mov	r6, r0
 8005492:	2800      	cmp	r0, #0
 8005494:	f040 810a 	bne.w	80056ac <HAL_I2C_Mem_Read+0x2b8>
    if (hi2c->XferSize == 0U)
 8005498:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800549a:	b95b      	cbnz	r3, 80054b4 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549c:	9302      	str	r3, [sp, #8]
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	695a      	ldr	r2, [r3, #20]
 80054a2:	9202      	str	r2, [sp, #8]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	9202      	str	r2, [sp, #8]
 80054a8:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e072      	b.n	800559a <HAL_I2C_Mem_Read+0x1a6>
    else if (hi2c->XferSize == 1U)
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d00a      	beq.n	80054ce <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d01a      	beq.n	80054f2 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054bc:	2300      	movs	r3, #0
 80054be:	9305      	str	r3, [sp, #20]
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	9205      	str	r2, [sp, #20]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	9305      	str	r3, [sp, #20]
 80054ca:	9b05      	ldr	r3, [sp, #20]
 80054cc:	e065      	b.n	800559a <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ce:	6822      	ldr	r2, [r4, #0]
 80054d0:	6813      	ldr	r3, [r2, #0]
 80054d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054d6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d8:	2300      	movs	r3, #0
 80054da:	9303      	str	r3, [sp, #12]
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	695a      	ldr	r2, [r3, #20]
 80054e0:	9203      	str	r2, [sp, #12]
 80054e2:	699a      	ldr	r2, [r3, #24]
 80054e4:	9203      	str	r2, [sp, #12]
 80054e6:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	e053      	b.n	800559a <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f2:	6822      	ldr	r2, [r4, #0]
 80054f4:	6813      	ldr	r3, [r2, #0]
 80054f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054fa:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054fc:	6822      	ldr	r2, [r4, #0]
 80054fe:	6813      	ldr	r3, [r2, #0]
 8005500:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005504:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005506:	2300      	movs	r3, #0
 8005508:	9304      	str	r3, [sp, #16]
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	9204      	str	r2, [sp, #16]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	9304      	str	r3, [sp, #16]
 8005514:	9b04      	ldr	r3, [sp, #16]
 8005516:	e040      	b.n	800559a <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005518:	462a      	mov	r2, r5
 800551a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800551c:	4620      	mov	r0, r4
 800551e:	f7ff fda5 	bl	800506c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005522:	2800      	cmp	r0, #0
 8005524:	f040 80c4 	bne.w	80056b0 <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800552e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005532:	3301      	adds	r3, #1
 8005534:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005536:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005538:	3b01      	subs	r3, #1
 800553a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800553c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800553e:	3b01      	subs	r3, #1
 8005540:	b29b      	uxth	r3, r3
 8005542:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005544:	e029      	b.n	800559a <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005546:	9500      	str	r5, [sp, #0]
 8005548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800554a:	2200      	movs	r2, #0
 800554c:	4955      	ldr	r1, [pc, #340]	; (80056a4 <HAL_I2C_Mem_Read+0x2b0>)
 800554e:	4620      	mov	r0, r4
 8005550:	f7ff fb8f 	bl	8004c72 <I2C_WaitOnFlagUntilTimeout>
 8005554:	2800      	cmp	r0, #0
 8005556:	f040 80ad 	bne.w	80056b4 <HAL_I2C_Mem_Read+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555a:	6822      	ldr	r2, [r4, #0]
 800555c:	6813      	ldr	r3, [r2, #0]
 800555e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005562:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800556a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800556c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800556e:	1c53      	adds	r3, r2, #1
 8005570:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005572:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005574:	3b01      	subs	r3, #1
 8005576:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005578:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800557a:	3b01      	subs	r3, #1
 800557c:	b29b      	uxth	r3, r3
 800557e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8005586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005588:	3301      	adds	r3, #1
 800558a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800558c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800558e:	3b01      	subs	r3, #1
 8005590:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005592:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005594:	3b01      	subs	r3, #1
 8005596:	b29b      	uxth	r3, r3
 8005598:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800559a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800559c:	2b00      	cmp	r3, #0
 800559e:	d072      	beq.n	8005686 <HAL_I2C_Mem_Read+0x292>
      if (hi2c->XferSize <= 3U)
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d849      	bhi.n	8005638 <HAL_I2C_Mem_Read+0x244>
        if (hi2c->XferSize == 1U)
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d0b7      	beq.n	8005518 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d0cc      	beq.n	8005546 <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055ac:	9500      	str	r5, [sp, #0]
 80055ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055b0:	2200      	movs	r2, #0
 80055b2:	493c      	ldr	r1, [pc, #240]	; (80056a4 <HAL_I2C_Mem_Read+0x2b0>)
 80055b4:	4620      	mov	r0, r4
 80055b6:	f7ff fb5c 	bl	8004c72 <I2C_WaitOnFlagUntilTimeout>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d17c      	bne.n	80056b8 <HAL_I2C_Mem_Read+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055be:	6822      	ldr	r2, [r4, #0]
 80055c0:	6813      	ldr	r3, [r2, #0]
 80055c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055c6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055ce:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80055d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055d2:	3301      	adds	r3, #1
 80055d4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80055d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80055d8:	3b01      	subs	r3, #1
 80055da:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80055dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055e4:	9500      	str	r5, [sp, #0]
 80055e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055e8:	2200      	movs	r2, #0
 80055ea:	492e      	ldr	r1, [pc, #184]	; (80056a4 <HAL_I2C_Mem_Read+0x2b0>)
 80055ec:	4620      	mov	r0, r4
 80055ee:	f7ff fb40 	bl	8004c72 <I2C_WaitOnFlagUntilTimeout>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d162      	bne.n	80056bc <HAL_I2C_Mem_Read+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	6813      	ldr	r3, [r2, #0]
 80055fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055fe:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005606:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005608:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800560a:	1c53      	adds	r3, r2, #1
 800560c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800560e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005610:	3b01      	subs	r3, #1
 8005612:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005614:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005616:	3b01      	subs	r3, #1
 8005618:	b29b      	uxth	r3, r3
 800561a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8005622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005624:	3301      	adds	r3, #1
 8005626:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005628:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800562a:	3b01      	subs	r3, #1
 800562c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800562e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005630:	3b01      	subs	r3, #1
 8005632:	b29b      	uxth	r3, r3
 8005634:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005636:	e7b0      	b.n	800559a <HAL_I2C_Mem_Read+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005638:	462a      	mov	r2, r5
 800563a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800563c:	4620      	mov	r0, r4
 800563e:	f7ff fd15 	bl	800506c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005642:	2800      	cmp	r0, #0
 8005644:	d13c      	bne.n	80056c0 <HAL_I2C_Mem_Read+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	691a      	ldr	r2, [r3, #16]
 800564a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800564c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800564e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005650:	1c53      	adds	r3, r2, #1
 8005652:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005654:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005656:	3b01      	subs	r3, #1
 8005658:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800565a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800565c:	3b01      	subs	r3, #1
 800565e:	b29b      	uxth	r3, r3
 8005660:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	6959      	ldr	r1, [r3, #20]
 8005666:	f011 0f04 	tst.w	r1, #4
 800566a:	d096      	beq.n	800559a <HAL_I2C_Mem_Read+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8005670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005672:	3301      	adds	r3, #1
 8005674:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005676:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005678:	3b01      	subs	r3, #1
 800567a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800567c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800567e:	3b01      	subs	r3, #1
 8005680:	b29b      	uxth	r3, r3
 8005682:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005684:	e789      	b.n	800559a <HAL_I2C_Mem_Read+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005686:	2320      	movs	r3, #32
 8005688:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800568c:	2300      	movs	r3, #0
 800568e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8005692:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8005696:	e6bc      	b.n	8005412 <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 8005698:	2602      	movs	r6, #2
 800569a:	e6ba      	b.n	8005412 <HAL_I2C_Mem_Read+0x1e>
 800569c:	00100002 	.word	0x00100002
 80056a0:	ffff0000 	.word	0xffff0000
 80056a4:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 80056a8:	2602      	movs	r6, #2
 80056aa:	e6b2      	b.n	8005412 <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 80056ac:	2601      	movs	r6, #1
 80056ae:	e6b0      	b.n	8005412 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80056b0:	2601      	movs	r6, #1
 80056b2:	e6ae      	b.n	8005412 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80056b4:	2601      	movs	r6, #1
 80056b6:	e6ac      	b.n	8005412 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80056b8:	2601      	movs	r6, #1
 80056ba:	e6aa      	b.n	8005412 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80056bc:	2601      	movs	r6, #1
 80056be:	e6a8      	b.n	8005412 <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 80056c0:	2601      	movs	r6, #1
 80056c2:	e6a6      	b.n	8005412 <HAL_I2C_Mem_Read+0x1e>

080056c4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056c4:	2800      	cmp	r0, #0
 80056c6:	f000 81e0 	beq.w	8005a8a <HAL_RCC_OscConfig+0x3c6>
{
 80056ca:	b570      	push	{r4, r5, r6, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056d0:	6803      	ldr	r3, [r0, #0]
 80056d2:	f013 0f01 	tst.w	r3, #1
 80056d6:	d03b      	beq.n	8005750 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056d8:	4ba5      	ldr	r3, [pc, #660]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 030c 	and.w	r3, r3, #12
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d02c      	beq.n	800573e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056e4:	4ba2      	ldr	r3, [pc, #648]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d021      	beq.n	8005734 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056f0:	6863      	ldr	r3, [r4, #4]
 80056f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f6:	d04f      	beq.n	8005798 <HAL_RCC_OscConfig+0xd4>
 80056f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056fc:	d052      	beq.n	80057a4 <HAL_RCC_OscConfig+0xe0>
 80056fe:	4b9c      	ldr	r3, [pc, #624]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800570e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005710:	6863      	ldr	r3, [r4, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d050      	beq.n	80057b8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005716:	f7fe fd39 	bl	800418c <HAL_GetTick>
 800571a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571c:	4b94      	ldr	r3, [pc, #592]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005724:	d114      	bne.n	8005750 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005726:	f7fe fd31 	bl	800418c <HAL_GetTick>
 800572a:	1b40      	subs	r0, r0, r5
 800572c:	2864      	cmp	r0, #100	; 0x64
 800572e:	d9f5      	bls.n	800571c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8005730:	2003      	movs	r0, #3
 8005732:	e1af      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005734:	4b8e      	ldr	r3, [pc, #568]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800573c:	d0d8      	beq.n	80056f0 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800573e:	4b8c      	ldr	r3, [pc, #560]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005746:	d003      	beq.n	8005750 <HAL_RCC_OscConfig+0x8c>
 8005748:	6863      	ldr	r3, [r4, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 819f 	beq.w	8005a8e <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	f013 0f02 	tst.w	r3, #2
 8005756:	d055      	beq.n	8005804 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005758:	4b85      	ldr	r3, [pc, #532]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f013 0f0c 	tst.w	r3, #12
 8005760:	d03e      	beq.n	80057e0 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005762:	4b83      	ldr	r3, [pc, #524]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800576a:	2b08      	cmp	r3, #8
 800576c:	d033      	beq.n	80057d6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800576e:	68e3      	ldr	r3, [r4, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d068      	beq.n	8005846 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005774:	4b7f      	ldr	r3, [pc, #508]	; (8005974 <HAL_RCC_OscConfig+0x2b0>)
 8005776:	2201      	movs	r2, #1
 8005778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577a:	f7fe fd07 	bl	800418c <HAL_GetTick>
 800577e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005780:	4b7b      	ldr	r3, [pc, #492]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f013 0f02 	tst.w	r3, #2
 8005788:	d154      	bne.n	8005834 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800578a:	f7fe fcff 	bl	800418c <HAL_GetTick>
 800578e:	1b40      	subs	r0, r0, r5
 8005790:	2802      	cmp	r0, #2
 8005792:	d9f5      	bls.n	8005780 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8005794:	2003      	movs	r0, #3
 8005796:	e17d      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005798:	4a75      	ldr	r2, [pc, #468]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 800579a:	6813      	ldr	r3, [r2, #0]
 800579c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	e7b5      	b.n	8005710 <HAL_RCC_OscConfig+0x4c>
 80057a4:	4b72      	ldr	r3, [pc, #456]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	e7ab      	b.n	8005710 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80057b8:	f7fe fce8 	bl	800418c <HAL_GetTick>
 80057bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057be:	4b6c      	ldr	r3, [pc, #432]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80057c6:	d0c3      	beq.n	8005750 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057c8:	f7fe fce0 	bl	800418c <HAL_GetTick>
 80057cc:	1b40      	subs	r0, r0, r5
 80057ce:	2864      	cmp	r0, #100	; 0x64
 80057d0:	d9f5      	bls.n	80057be <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80057d2:	2003      	movs	r0, #3
 80057d4:	e15e      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057d6:	4b66      	ldr	r3, [pc, #408]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80057de:	d1c6      	bne.n	800576e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057e0:	4b63      	ldr	r3, [pc, #396]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f013 0f02 	tst.w	r3, #2
 80057e8:	d004      	beq.n	80057f4 <HAL_RCC_OscConfig+0x130>
 80057ea:	68e3      	ldr	r3, [r4, #12]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d001      	beq.n	80057f4 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80057f0:	2001      	movs	r0, #1
 80057f2:	e14f      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f4:	4a5e      	ldr	r2, [pc, #376]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80057f6:	6813      	ldr	r3, [r2, #0]
 80057f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80057fc:	6921      	ldr	r1, [r4, #16]
 80057fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005802:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	f013 0f08 	tst.w	r3, #8
 800580a:	d040      	beq.n	800588e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800580c:	6963      	ldr	r3, [r4, #20]
 800580e:	b363      	cbz	r3, 800586a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005810:	4b59      	ldr	r3, [pc, #356]	; (8005978 <HAL_RCC_OscConfig+0x2b4>)
 8005812:	2201      	movs	r2, #1
 8005814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005816:	f7fe fcb9 	bl	800418c <HAL_GetTick>
 800581a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800581c:	4b54      	ldr	r3, [pc, #336]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 800581e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005820:	f013 0f02 	tst.w	r3, #2
 8005824:	d133      	bne.n	800588e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005826:	f7fe fcb1 	bl	800418c <HAL_GetTick>
 800582a:	1b40      	subs	r0, r0, r5
 800582c:	2802      	cmp	r0, #2
 800582e:	d9f5      	bls.n	800581c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8005830:	2003      	movs	r0, #3
 8005832:	e12f      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005834:	4a4e      	ldr	r2, [pc, #312]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005836:	6813      	ldr	r3, [r2, #0]
 8005838:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800583c:	6921      	ldr	r1, [r4, #16]
 800583e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	e7de      	b.n	8005804 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8005846:	4b4b      	ldr	r3, [pc, #300]	; (8005974 <HAL_RCC_OscConfig+0x2b0>)
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800584c:	f7fe fc9e 	bl	800418c <HAL_GetTick>
 8005850:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005852:	4b47      	ldr	r3, [pc, #284]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f013 0f02 	tst.w	r3, #2
 800585a:	d0d3      	beq.n	8005804 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800585c:	f7fe fc96 	bl	800418c <HAL_GetTick>
 8005860:	1b40      	subs	r0, r0, r5
 8005862:	2802      	cmp	r0, #2
 8005864:	d9f5      	bls.n	8005852 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8005866:	2003      	movs	r0, #3
 8005868:	e114      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800586a:	4b43      	ldr	r3, [pc, #268]	; (8005978 <HAL_RCC_OscConfig+0x2b4>)
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005870:	f7fe fc8c 	bl	800418c <HAL_GetTick>
 8005874:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005876:	4b3e      	ldr	r3, [pc, #248]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800587a:	f013 0f02 	tst.w	r3, #2
 800587e:	d006      	beq.n	800588e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005880:	f7fe fc84 	bl	800418c <HAL_GetTick>
 8005884:	1b40      	subs	r0, r0, r5
 8005886:	2802      	cmp	r0, #2
 8005888:	d9f5      	bls.n	8005876 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 800588a:	2003      	movs	r0, #3
 800588c:	e102      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	f013 0f04 	tst.w	r3, #4
 8005894:	d075      	beq.n	8005982 <HAL_RCC_OscConfig+0x2be>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005896:	4b36      	ldr	r3, [pc, #216]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800589e:	d131      	bne.n	8005904 <HAL_RCC_OscConfig+0x240>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a0:	2300      	movs	r3, #0
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	4b32      	ldr	r3, [pc, #200]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80058a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80058ac:	641a      	str	r2, [r3, #64]	; 0x40
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80058b8:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ba:	4b30      	ldr	r3, [pc, #192]	; (800597c <HAL_RCC_OscConfig+0x2b8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80058c2:	d021      	beq.n	8005908 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c4:	68a3      	ldr	r3, [r4, #8]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d032      	beq.n	8005930 <HAL_RCC_OscConfig+0x26c>
 80058ca:	2b05      	cmp	r3, #5
 80058cc:	d036      	beq.n	800593c <HAL_RCC_OscConfig+0x278>
 80058ce:	4b28      	ldr	r3, [pc, #160]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80058d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058d2:	f022 0201 	bic.w	r2, r2, #1
 80058d6:	671a      	str	r2, [r3, #112]	; 0x70
 80058d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058da:	f022 0204 	bic.w	r2, r2, #4
 80058de:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058e0:	68a3      	ldr	r3, [r4, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d034      	beq.n	8005950 <HAL_RCC_OscConfig+0x28c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e6:	f7fe fc51 	bl	800418c <HAL_GetTick>
 80058ea:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ec:	4b20      	ldr	r3, [pc, #128]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 80058ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f0:	f013 0f02 	tst.w	r3, #2
 80058f4:	d144      	bne.n	8005980 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058f6:	f7fe fc49 	bl	800418c <HAL_GetTick>
 80058fa:	1b80      	subs	r0, r0, r6
 80058fc:	2864      	cmp	r0, #100	; 0x64
 80058fe:	d9f5      	bls.n	80058ec <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8005900:	2003      	movs	r0, #3
 8005902:	e0c7      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8005904:	2500      	movs	r5, #0
 8005906:	e7d8      	b.n	80058ba <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005908:	4a1c      	ldr	r2, [pc, #112]	; (800597c <HAL_RCC_OscConfig+0x2b8>)
 800590a:	6813      	ldr	r3, [r2, #0]
 800590c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005910:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005912:	f7fe fc3b 	bl	800418c <HAL_GetTick>
 8005916:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005918:	4b18      	ldr	r3, [pc, #96]	; (800597c <HAL_RCC_OscConfig+0x2b8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005920:	d1d0      	bne.n	80058c4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005922:	f7fe fc33 	bl	800418c <HAL_GetTick>
 8005926:	1b80      	subs	r0, r0, r6
 8005928:	2802      	cmp	r0, #2
 800592a:	d9f5      	bls.n	8005918 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 800592c:	2003      	movs	r0, #3
 800592e:	e0b1      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005930:	4a0f      	ldr	r2, [pc, #60]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005932:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005934:	f043 0301 	orr.w	r3, r3, #1
 8005938:	6713      	str	r3, [r2, #112]	; 0x70
 800593a:	e7d1      	b.n	80058e0 <HAL_RCC_OscConfig+0x21c>
 800593c:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 800593e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005940:	f042 0204 	orr.w	r2, r2, #4
 8005944:	671a      	str	r2, [r3, #112]	; 0x70
 8005946:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005948:	f042 0201 	orr.w	r2, r2, #1
 800594c:	671a      	str	r2, [r3, #112]	; 0x70
 800594e:	e7c7      	b.n	80058e0 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005950:	f7fe fc1c 	bl	800418c <HAL_GetTick>
 8005954:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005956:	4b06      	ldr	r3, [pc, #24]	; (8005970 <HAL_RCC_OscConfig+0x2ac>)
 8005958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595a:	f013 0f02 	tst.w	r3, #2
 800595e:	d00f      	beq.n	8005980 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005960:	f7fe fc14 	bl	800418c <HAL_GetTick>
 8005964:	1b80      	subs	r0, r0, r6
 8005966:	2864      	cmp	r0, #100	; 0x64
 8005968:	d9f5      	bls.n	8005956 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800596a:	2003      	movs	r0, #3
 800596c:	e092      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
 800596e:	bf00      	nop
 8005970:	40023800 	.word	0x40023800
 8005974:	42470000 	.word	0x42470000
 8005978:	42470e80 	.word	0x42470e80
 800597c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005980:	b9ed      	cbnz	r5, 80059be <HAL_RCC_OscConfig+0x2fa>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005982:	69a3      	ldr	r3, [r4, #24]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 8084 	beq.w	8005a92 <HAL_RCC_OscConfig+0x3ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800598a:	4a45      	ldr	r2, [pc, #276]	; (8005aa0 <HAL_RCC_OscConfig+0x3dc>)
 800598c:	6892      	ldr	r2, [r2, #8]
 800598e:	f002 020c 	and.w	r2, r2, #12
 8005992:	2a08      	cmp	r2, #8
 8005994:	d051      	beq.n	8005a3a <HAL_RCC_OscConfig+0x376>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005996:	2b02      	cmp	r3, #2
 8005998:	d017      	beq.n	80059ca <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800599a:	4b42      	ldr	r3, [pc, #264]	; (8005aa4 <HAL_RCC_OscConfig+0x3e0>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a0:	f7fe fbf4 	bl	800418c <HAL_GetTick>
 80059a4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059a6:	4b3e      	ldr	r3, [pc, #248]	; (8005aa0 <HAL_RCC_OscConfig+0x3dc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80059ae:	d042      	beq.n	8005a36 <HAL_RCC_OscConfig+0x372>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b0:	f7fe fbec 	bl	800418c <HAL_GetTick>
 80059b4:	1b00      	subs	r0, r0, r4
 80059b6:	2802      	cmp	r0, #2
 80059b8:	d9f5      	bls.n	80059a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80059ba:	2003      	movs	r0, #3
 80059bc:	e06a      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_DISABLE();
 80059be:	4a38      	ldr	r2, [pc, #224]	; (8005aa0 <HAL_RCC_OscConfig+0x3dc>)
 80059c0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80059c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059c6:	6413      	str	r3, [r2, #64]	; 0x40
 80059c8:	e7db      	b.n	8005982 <HAL_RCC_OscConfig+0x2be>
        __HAL_RCC_PLL_DISABLE();
 80059ca:	4b36      	ldr	r3, [pc, #216]	; (8005aa4 <HAL_RCC_OscConfig+0x3e0>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80059d0:	f7fe fbdc 	bl	800418c <HAL_GetTick>
 80059d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059d6:	4b32      	ldr	r3, [pc, #200]	; (8005aa0 <HAL_RCC_OscConfig+0x3dc>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80059de:	d006      	beq.n	80059ee <HAL_RCC_OscConfig+0x32a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e0:	f7fe fbd4 	bl	800418c <HAL_GetTick>
 80059e4:	1b40      	subs	r0, r0, r5
 80059e6:	2802      	cmp	r0, #2
 80059e8:	d9f5      	bls.n	80059d6 <HAL_RCC_OscConfig+0x312>
            return HAL_TIMEOUT;
 80059ea:	2003      	movs	r0, #3
 80059ec:	e052      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059ee:	69e3      	ldr	r3, [r4, #28]
 80059f0:	6a22      	ldr	r2, [r4, #32]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80059f6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80059fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80059fc:	0852      	lsrs	r2, r2, #1
 80059fe:	3a01      	subs	r2, #1
 8005a00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005a0a:	4a25      	ldr	r2, [pc, #148]	; (8005aa0 <HAL_RCC_OscConfig+0x3dc>)
 8005a0c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8005a0e:	4b25      	ldr	r3, [pc, #148]	; (8005aa4 <HAL_RCC_OscConfig+0x3e0>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005a14:	f7fe fbba 	bl	800418c <HAL_GetTick>
 8005a18:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a1a:	4b21      	ldr	r3, [pc, #132]	; (8005aa0 <HAL_RCC_OscConfig+0x3dc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005a22:	d106      	bne.n	8005a32 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a24:	f7fe fbb2 	bl	800418c <HAL_GetTick>
 8005a28:	1b00      	subs	r0, r0, r4
 8005a2a:	2802      	cmp	r0, #2
 8005a2c:	d9f5      	bls.n	8005a1a <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8005a2e:	2003      	movs	r0, #3
 8005a30:	e030      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005a32:	2000      	movs	r0, #0
 8005a34:	e02e      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
 8005a36:	2000      	movs	r0, #0
 8005a38:	e02c      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d02c      	beq.n	8005a98 <HAL_RCC_OscConfig+0x3d4>
        pll_config = RCC->PLLCFGR;
 8005a3e:	4b18      	ldr	r3, [pc, #96]	; (8005aa0 <HAL_RCC_OscConfig+0x3dc>)
 8005a40:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a42:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8005a46:	69e2      	ldr	r2, [r4, #28]
 8005a48:	4291      	cmp	r1, r2
 8005a4a:	d001      	beq.n	8005a50 <HAL_RCC_OscConfig+0x38c>
          return HAL_ERROR;
 8005a4c:	2001      	movs	r0, #1
 8005a4e:	e021      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a54:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a56:	428a      	cmp	r2, r1
 8005a58:	d001      	beq.n	8005a5e <HAL_RCC_OscConfig+0x39a>
          return HAL_ERROR;
 8005a5a:	2001      	movs	r0, #1
 8005a5c:	e01a      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005a5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a60:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005a64:	401a      	ands	r2, r3
 8005a66:	428a      	cmp	r2, r1
 8005a68:	d001      	beq.n	8005a6e <HAL_RCC_OscConfig+0x3aa>
          return HAL_ERROR;
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	e012      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a72:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005a74:	428a      	cmp	r2, r1
 8005a76:	d001      	beq.n	8005a7c <HAL_RCC_OscConfig+0x3b8>
          return HAL_ERROR;
 8005a78:	2001      	movs	r0, #1
 8005a7a:	e00b      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005a7c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8005a80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00a      	beq.n	8005a9c <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
 8005a86:	2001      	movs	r0, #1
 8005a88:	e004      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
    return HAL_ERROR;
 8005a8a:	2001      	movs	r0, #1
}
 8005a8c:	4770      	bx	lr
        return HAL_ERROR;
 8005a8e:	2001      	movs	r0, #1
 8005a90:	e000      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8005a92:	2000      	movs	r0, #0
}
 8005a94:	b002      	add	sp, #8
 8005a96:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005a98:	2001      	movs	r0, #1
 8005a9a:	e7fb      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	e7f9      	b.n	8005a94 <HAL_RCC_OscConfig+0x3d0>
 8005aa0:	40023800 	.word	0x40023800
 8005aa4:	42470060 	.word	0x42470060

08005aa8 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005aa8:	4b01      	ldr	r3, [pc, #4]	; (8005ab0 <HAL_RCC_EnableCSS+0x8>)
 8005aaa:	2201      	movs	r2, #1
 8005aac:	601a      	str	r2, [r3, #0]
}
 8005aae:	4770      	bx	lr
 8005ab0:	4247004c 	.word	0x4247004c

08005ab4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ab4:	4b26      	ldr	r3, [pc, #152]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 030c 	and.w	r3, r3, #12
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d044      	beq.n	8005b4a <HAL_RCC_GetSysClockFreq+0x96>
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ac4:	4823      	ldr	r0, [pc, #140]	; (8005b54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ac6:	4770      	bx	lr
{
 8005ac8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005acc:	4b20      	ldr	r3, [pc, #128]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005ada:	d013      	beq.n	8005b04 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005adc:	4b1c      	ldr	r3, [pc, #112]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ade:	6859      	ldr	r1, [r3, #4]
 8005ae0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	481c      	ldr	r0, [pc, #112]	; (8005b58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ae8:	fba1 0100 	umull	r0, r1, r1, r0
 8005aec:	f7fb f806 	bl	8000afc <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005af0:	4b17      	ldr	r3, [pc, #92]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005af8:	3301      	adds	r3, #1
 8005afa:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005afc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005b00:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b04:	4b12      	ldr	r3, [pc, #72]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8005b0c:	461e      	mov	r6, r3
 8005b0e:	2700      	movs	r7, #0
 8005b10:	015c      	lsls	r4, r3, #5
 8005b12:	2500      	movs	r5, #0
 8005b14:	1ae4      	subs	r4, r4, r3
 8005b16:	eb65 0507 	sbc.w	r5, r5, r7
 8005b1a:	01a9      	lsls	r1, r5, #6
 8005b1c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8005b20:	01a0      	lsls	r0, r4, #6
 8005b22:	1b00      	subs	r0, r0, r4
 8005b24:	eb61 0105 	sbc.w	r1, r1, r5
 8005b28:	00cb      	lsls	r3, r1, #3
 8005b2a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005b2e:	00c4      	lsls	r4, r0, #3
 8005b30:	19a0      	adds	r0, r4, r6
 8005b32:	eb43 0107 	adc.w	r1, r3, r7
 8005b36:	028b      	lsls	r3, r1, #10
 8005b38:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8005b3c:	0284      	lsls	r4, r0, #10
 8005b3e:	4620      	mov	r0, r4
 8005b40:	4619      	mov	r1, r3
 8005b42:	2300      	movs	r3, #0
 8005b44:	f7fa ffda 	bl	8000afc <__aeabi_uldivmod>
 8005b48:	e7d2      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8005b4a:	4803      	ldr	r0, [pc, #12]	; (8005b58 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40023800 	.word	0x40023800
 8005b54:	00f42400 	.word	0x00f42400
 8005b58:	017d7840 	.word	0x017d7840

08005b5c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	f000 809e 	beq.w	8005c9e <HAL_RCC_ClockConfig+0x142>
{
 8005b62:	b570      	push	{r4, r5, r6, lr}
 8005b64:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b66:	4b50      	ldr	r3, [pc, #320]	; (8005ca8 <HAL_RCC_ClockConfig+0x14c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	428b      	cmp	r3, r1
 8005b70:	d209      	bcs.n	8005b86 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b72:	b2cb      	uxtb	r3, r1
 8005b74:	4a4c      	ldr	r2, [pc, #304]	; (8005ca8 <HAL_RCC_ClockConfig+0x14c>)
 8005b76:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b78:	6813      	ldr	r3, [r2, #0]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	428b      	cmp	r3, r1
 8005b80:	d001      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8005b82:	2001      	movs	r0, #1
}
 8005b84:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	f013 0f02 	tst.w	r3, #2
 8005b8c:	d017      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b8e:	f013 0f04 	tst.w	r3, #4
 8005b92:	d004      	beq.n	8005b9e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b94:	4a45      	ldr	r2, [pc, #276]	; (8005cac <HAL_RCC_ClockConfig+0x150>)
 8005b96:	6893      	ldr	r3, [r2, #8]
 8005b98:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b9c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	f013 0f08 	tst.w	r3, #8
 8005ba4:	d004      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ba6:	4a41      	ldr	r2, [pc, #260]	; (8005cac <HAL_RCC_ClockConfig+0x150>)
 8005ba8:	6893      	ldr	r3, [r2, #8]
 8005baa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bae:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bb0:	4a3e      	ldr	r2, [pc, #248]	; (8005cac <HAL_RCC_ClockConfig+0x150>)
 8005bb2:	6893      	ldr	r3, [r2, #8]
 8005bb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bb8:	68a0      	ldr	r0, [r4, #8]
 8005bba:	4303      	orrs	r3, r0
 8005bbc:	6093      	str	r3, [r2, #8]
 8005bbe:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	f013 0f01 	tst.w	r3, #1
 8005bc6:	d032      	beq.n	8005c2e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc8:	6863      	ldr	r3, [r4, #4]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d021      	beq.n	8005c12 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bce:	1e9a      	subs	r2, r3, #2
 8005bd0:	2a01      	cmp	r2, #1
 8005bd2:	d925      	bls.n	8005c20 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd4:	4a35      	ldr	r2, [pc, #212]	; (8005cac <HAL_RCC_ClockConfig+0x150>)
 8005bd6:	6812      	ldr	r2, [r2, #0]
 8005bd8:	f012 0f02 	tst.w	r2, #2
 8005bdc:	d061      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bde:	4933      	ldr	r1, [pc, #204]	; (8005cac <HAL_RCC_ClockConfig+0x150>)
 8005be0:	688a      	ldr	r2, [r1, #8]
 8005be2:	f022 0203 	bic.w	r2, r2, #3
 8005be6:	4313      	orrs	r3, r2
 8005be8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005bea:	f7fe facf 	bl	800418c <HAL_GetTick>
 8005bee:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf0:	4b2e      	ldr	r3, [pc, #184]	; (8005cac <HAL_RCC_ClockConfig+0x150>)
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 030c 	and.w	r3, r3, #12
 8005bf8:	6862      	ldr	r2, [r4, #4]
 8005bfa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005bfe:	d016      	beq.n	8005c2e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c00:	f7fe fac4 	bl	800418c <HAL_GetTick>
 8005c04:	1b80      	subs	r0, r0, r6
 8005c06:	f241 3388 	movw	r3, #5000	; 0x1388
 8005c0a:	4298      	cmp	r0, r3
 8005c0c:	d9f0      	bls.n	8005bf0 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8005c0e:	2003      	movs	r0, #3
 8005c10:	e7b8      	b.n	8005b84 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c12:	4a26      	ldr	r2, [pc, #152]	; (8005cac <HAL_RCC_ClockConfig+0x150>)
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005c1a:	d1e0      	bne.n	8005bde <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	e7b1      	b.n	8005b84 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c20:	4a22      	ldr	r2, [pc, #136]	; (8005cac <HAL_RCC_ClockConfig+0x150>)
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005c28:	d1d9      	bne.n	8005bde <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	e7aa      	b.n	8005b84 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ca8 <HAL_RCC_ClockConfig+0x14c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	42ab      	cmp	r3, r5
 8005c38:	d909      	bls.n	8005c4e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3a:	b2ea      	uxtb	r2, r5
 8005c3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ca8 <HAL_RCC_ClockConfig+0x14c>)
 8005c3e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	42ab      	cmp	r3, r5
 8005c48:	d001      	beq.n	8005c4e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	e79a      	b.n	8005b84 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	f013 0f04 	tst.w	r3, #4
 8005c54:	d006      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c56:	4a15      	ldr	r2, [pc, #84]	; (8005cac <HAL_RCC_ClockConfig+0x150>)
 8005c58:	6893      	ldr	r3, [r2, #8]
 8005c5a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005c5e:	68e1      	ldr	r1, [r4, #12]
 8005c60:	430b      	orrs	r3, r1
 8005c62:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c64:	6823      	ldr	r3, [r4, #0]
 8005c66:	f013 0f08 	tst.w	r3, #8
 8005c6a:	d007      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c6c:	4a0f      	ldr	r2, [pc, #60]	; (8005cac <HAL_RCC_ClockConfig+0x150>)
 8005c6e:	6893      	ldr	r3, [r2, #8]
 8005c70:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005c74:	6921      	ldr	r1, [r4, #16]
 8005c76:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005c7a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c7c:	f7ff ff1a 	bl	8005ab4 <HAL_RCC_GetSysClockFreq>
 8005c80:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <HAL_RCC_ClockConfig+0x150>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005c88:	4a09      	ldr	r2, [pc, #36]	; (8005cb0 <HAL_RCC_ClockConfig+0x154>)
 8005c8a:	5cd3      	ldrb	r3, [r2, r3]
 8005c8c:	40d8      	lsrs	r0, r3
 8005c8e:	4b09      	ldr	r3, [pc, #36]	; (8005cb4 <HAL_RCC_ClockConfig+0x158>)
 8005c90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005c92:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <HAL_RCC_ClockConfig+0x15c>)
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	f7fd fdf1 	bl	800387c <HAL_InitTick>
  return HAL_OK;
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	e772      	b.n	8005b84 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8005c9e:	2001      	movs	r0, #1
}
 8005ca0:	4770      	bx	lr
        return HAL_ERROR;
 8005ca2:	2001      	movs	r0, #1
 8005ca4:	e76e      	b.n	8005b84 <HAL_RCC_ClockConfig+0x28>
 8005ca6:	bf00      	nop
 8005ca8:	40023c00 	.word	0x40023c00
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	0800a7d0 	.word	0x0800a7d0
 8005cb4:	20000030 	.word	0x20000030
 8005cb8:	20000038 	.word	0x20000038

08005cbc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005cbc:	4b01      	ldr	r3, [pc, #4]	; (8005cc4 <HAL_RCC_GetHCLKFreq+0x8>)
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	20000030 	.word	0x20000030

08005cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cca:	f7ff fff7 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8005cce:	4b04      	ldr	r3, [pc, #16]	; (8005ce0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005cd6:	4a03      	ldr	r2, [pc, #12]	; (8005ce4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005cd8:	5cd3      	ldrb	r3, [r2, r3]
}
 8005cda:	40d8      	lsrs	r0, r3
 8005cdc:	bd08      	pop	{r3, pc}
 8005cde:	bf00      	nop
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	0800a7e0 	.word	0x0800a7e0

08005ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ce8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005cea:	f7ff ffe7 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8005cee:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005cf6:	4a03      	ldr	r2, [pc, #12]	; (8005d04 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005cf8:	5cd3      	ldrb	r3, [r2, r3]
}
 8005cfa:	40d8      	lsrs	r0, r3
 8005cfc:	bd08      	pop	{r3, pc}
 8005cfe:	bf00      	nop
 8005d00:	40023800 	.word	0x40023800
 8005d04:	0800a7e0 	.word	0x0800a7e0

08005d08 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d08:	230f      	movs	r3, #15
 8005d0a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <HAL_RCC_GetClockConfig+0x34>)
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	f002 0203 	and.w	r2, r2, #3
 8005d14:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005d1c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8005d24:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	08db      	lsrs	r3, r3, #3
 8005d2a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005d2e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d30:	4b03      	ldr	r3, [pc, #12]	; (8005d40 <HAL_RCC_GetClockConfig+0x38>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 030f 	and.w	r3, r3, #15
 8005d38:	600b      	str	r3, [r1, #0]
}
 8005d3a:	4770      	bx	lr
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	40023c00 	.word	0x40023c00

08005d44 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005d44:	4770      	bx	lr
	...

08005d48 <HAL_RCC_NMI_IRQHandler>:
{
 8005d48:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d52:	d100      	bne.n	8005d56 <HAL_RCC_NMI_IRQHandler+0xe>
}
 8005d54:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8005d56:	f7ff fff5 	bl	8005d44 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005d5a:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005d5c:	2280      	movs	r2, #128	; 0x80
 8005d5e:	701a      	strb	r2, [r3, #0]
}
 8005d60:	e7f8      	b.n	8005d54 <HAL_RCC_NMI_IRQHandler+0xc>
 8005d62:	bf00      	nop
 8005d64:	40023800 	.word	0x40023800
 8005d68:	4002380e 	.word	0x4002380e

08005d6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d6c:	b530      	push	{r4, r5, lr}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d72:	6803      	ldr	r3, [r0, #0]
 8005d74:	f013 0f05 	tst.w	r3, #5
 8005d78:	d10e      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	f013 0f02 	tst.w	r3, #2
 8005d80:	d136      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	f013 0f08 	tst.w	r3, #8
 8005d88:	f000 8097 	beq.w	8005eba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d8c:	7c22      	ldrb	r2, [r4, #16]
 8005d8e:	4b4c      	ldr	r3, [pc, #304]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005d90:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d92:	2000      	movs	r0, #0
}
 8005d94:	b003      	add	sp, #12
 8005d96:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8005d98:	4b4a      	ldr	r3, [pc, #296]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005d9e:	f7fe f9f5 	bl	800418c <HAL_GetTick>
 8005da2:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005da4:	4b48      	ldr	r3, [pc, #288]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005dac:	d006      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dae:	f7fe f9ed 	bl	800418c <HAL_GetTick>
 8005db2:	1b40      	subs	r0, r0, r5
 8005db4:	2802      	cmp	r0, #2
 8005db6:	d9f5      	bls.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8005db8:	2003      	movs	r0, #3
 8005dba:	e7eb      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005dbc:	6862      	ldr	r2, [r4, #4]
 8005dbe:	68a3      	ldr	r3, [r4, #8]
 8005dc0:	071b      	lsls	r3, r3, #28
 8005dc2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005dc6:	4a40      	ldr	r2, [pc, #256]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005dc8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005dcc:	4b3d      	ldr	r3, [pc, #244]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005dd2:	f7fe f9db 	bl	800418c <HAL_GetTick>
 8005dd6:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dd8:	4b3b      	ldr	r3, [pc, #236]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005de0:	d1cb      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005de2:	f7fe f9d3 	bl	800418c <HAL_GetTick>
 8005de6:	1b40      	subs	r0, r0, r5
 8005de8:	2802      	cmp	r0, #2
 8005dea:	d9f5      	bls.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        return HAL_TIMEOUT;
 8005dec:	2003      	movs	r0, #3
 8005dee:	e7d1      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8005df0:	2300      	movs	r3, #0
 8005df2:	9301      	str	r3, [sp, #4]
 8005df4:	4b34      	ldr	r3, [pc, #208]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005df8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e04:	9301      	str	r3, [sp, #4]
 8005e06:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005e08:	4a30      	ldr	r2, [pc, #192]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e0a:	6813      	ldr	r3, [r2, #0]
 8005e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e10:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005e12:	f7fe f9bb 	bl	800418c <HAL_GetTick>
 8005e16:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e18:	4b2c      	ldr	r3, [pc, #176]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005e20:	d106      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e22:	f7fe f9b3 	bl	800418c <HAL_GetTick>
 8005e26:	1b40      	subs	r0, r0, r5
 8005e28:	2802      	cmp	r0, #2
 8005e2a:	d9f5      	bls.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 8005e2c:	2003      	movs	r0, #3
 8005e2e:	e7b1      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e30:	4b25      	ldr	r3, [pc, #148]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e34:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005e38:	d012      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e3a:	68e2      	ldr	r2, [r4, #12]
 8005e3c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d00d      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e44:	4b20      	ldr	r3, [pc, #128]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005e46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e4c:	4920      	ldr	r1, [pc, #128]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e4e:	2001      	movs	r0, #1
 8005e50:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e52:	2000      	movs	r0, #0
 8005e54:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8005e56:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	f013 0f01 	tst.w	r3, #1
 8005e5e:	d112      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e60:	68e3      	ldr	r3, [r4, #12]
 8005e62:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005e66:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005e6a:	d01b      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8005e6c:	4a16      	ldr	r2, [pc, #88]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005e6e:	6893      	ldr	r3, [r2, #8]
 8005e70:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e74:	6093      	str	r3, [r2, #8]
 8005e76:	4914      	ldr	r1, [pc, #80]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005e78:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8005e7a:	68e2      	ldr	r2, [r4, #12]
 8005e7c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005e80:	4313      	orrs	r3, r2
 8005e82:	670b      	str	r3, [r1, #112]	; 0x70
 8005e84:	e77d      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8005e86:	f7fe f981 	bl	800418c <HAL_GetTick>
 8005e8a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e90:	f013 0f02 	tst.w	r3, #2
 8005e94:	d1e4      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e96:	f7fe f979 	bl	800418c <HAL_GetTick>
 8005e9a:	1b40      	subs	r0, r0, r5
 8005e9c:	2864      	cmp	r0, #100	; 0x64
 8005e9e:	d9f5      	bls.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
 8005ea0:	2003      	movs	r0, #3
 8005ea2:	e777      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ea4:	4908      	ldr	r1, [pc, #32]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005ea6:	688a      	ldr	r2, [r1, #8]
 8005ea8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8005eac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	608b      	str	r3, [r1, #8]
 8005eb8:	e7dd      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  return HAL_OK;
 8005eba:	2000      	movs	r0, #0
 8005ebc:	e76a      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005ebe:	bf00      	nop
 8005ec0:	424711e0 	.word	0x424711e0
 8005ec4:	42470068 	.word	0x42470068
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	40007000 	.word	0x40007000
 8005ed0:	42470e40 	.word	0x42470e40

08005ed4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ed8:	6802      	ldr	r2, [r0, #0]
 8005eda:	68d3      	ldr	r3, [r2, #12]
 8005edc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ee0:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ee2:	f7fe f953 	bl	800418c <HAL_GetTick>
 8005ee6:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f013 0f20 	tst.w	r3, #32
 8005ef0:	d107      	bne.n	8005f02 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005ef2:	f7fe f94b 	bl	800418c <HAL_GetTick>
 8005ef6:	1b40      	subs	r0, r0, r5
 8005ef8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005efc:	d9f4      	bls.n	8005ee8 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8005efe:	2003      	movs	r0, #3
 8005f00:	e000      	b.n	8005f04 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8005f02:	2000      	movs	r0, #0
}
 8005f04:	bd38      	pop	{r3, r4, r5, pc}

08005f06 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005f06:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f08:	6803      	ldr	r3, [r0, #0]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005f10:	d001      	beq.n	8005f16 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005f12:	2000      	movs	r0, #0
}
 8005f14:	bd38      	pop	{r3, r4, r5, pc}
 8005f16:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005f18:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005f1e:	f7fe f935 	bl	800418c <HAL_GetTick>
 8005f22:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f2c:	d107      	bne.n	8005f3e <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f2e:	f7fe f92d 	bl	800418c <HAL_GetTick>
 8005f32:	1b40      	subs	r0, r0, r5
 8005f34:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005f38:	d9f4      	bls.n	8005f24 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8005f3a:	2003      	movs	r0, #3
 8005f3c:	e7ea      	b.n	8005f14 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8005f3e:	2000      	movs	r0, #0
 8005f40:	e7e8      	b.n	8005f14 <RTC_EnterInitMode+0xe>

08005f42 <HAL_RTC_Init>:
{
 8005f42:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d05c      	beq.n	8006002 <HAL_RTC_Init+0xc0>
 8005f48:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005f4a:	7f43      	ldrb	r3, [r0, #29]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d040      	beq.n	8005fd2 <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f50:	2302      	movs	r3, #2
 8005f52:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	22ca      	movs	r2, #202	; 0xca
 8005f58:	625a      	str	r2, [r3, #36]	; 0x24
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	2253      	movs	r2, #83	; 0x53
 8005f5e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f60:	4620      	mov	r0, r4
 8005f62:	f7ff ffd0 	bl	8005f06 <RTC_EnterInitMode>
 8005f66:	4605      	mov	r5, r0
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d136      	bne.n	8005fda <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005f6c:	6822      	ldr	r2, [r4, #0]
 8005f6e:	6893      	ldr	r3, [r2, #8]
 8005f70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f78:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f7a:	6821      	ldr	r1, [r4, #0]
 8005f7c:	688a      	ldr	r2, [r1, #8]
 8005f7e:	6863      	ldr	r3, [r4, #4]
 8005f80:	6920      	ldr	r0, [r4, #16]
 8005f82:	4303      	orrs	r3, r0
 8005f84:	6960      	ldr	r0, [r4, #20]
 8005f86:	4303      	orrs	r3, r0
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	68e2      	ldr	r2, [r4, #12]
 8005f90:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005f92:	6822      	ldr	r2, [r4, #0]
 8005f94:	6913      	ldr	r3, [r2, #16]
 8005f96:	68a1      	ldr	r1, [r4, #8]
 8005f98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005f9c:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005f9e:	6822      	ldr	r2, [r4, #0]
 8005fa0:	68d3      	ldr	r3, [r2, #12]
 8005fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fa6:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f013 0f20 	tst.w	r3, #32
 8005fb0:	d01b      	beq.n	8005fea <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005fb2:	6822      	ldr	r2, [r4, #0]
 8005fb4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fba:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005fbc:	6822      	ldr	r2, [r4, #0]
 8005fbe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005fc0:	69a1      	ldr	r1, [r4, #24]
 8005fc2:	430b      	orrs	r3, r1
 8005fc4:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	22ff      	movs	r2, #255	; 0xff
 8005fca:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8005fd0:	e009      	b.n	8005fe6 <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 8005fd2:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8005fd4:	f7fd fa28 	bl	8003428 <HAL_RTC_MspInit>
 8005fd8:	e7ba      	b.n	8005f50 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	22ff      	movs	r2, #255	; 0xff
 8005fde:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8005fe4:	2501      	movs	r5, #1
}
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fea:	4620      	mov	r0, r4
 8005fec:	f7ff ff72 	bl	8005ed4 <HAL_RTC_WaitForSynchro>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d0de      	beq.n	8005fb2 <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	22ff      	movs	r2, #255	; 0xff
 8005ff8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ffa:	2304      	movs	r3, #4
 8005ffc:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8005ffe:	2501      	movs	r5, #1
 8006000:	e7f1      	b.n	8005fe6 <HAL_RTC_Init+0xa4>
     return HAL_ERROR;
 8006002:	2501      	movs	r5, #1
 8006004:	e7ef      	b.n	8005fe6 <HAL_RTC_Init+0xa4>

08006006 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006006:	2300      	movs	r3, #0

  while(Value >= 10U)
 8006008:	e002      	b.n	8006010 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 800600a:	3301      	adds	r3, #1
    Value -= 10U;
 800600c:	380a      	subs	r0, #10
 800600e:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8006010:	2809      	cmp	r0, #9
 8006012:	d8fa      	bhi.n	800600a <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	b2db      	uxtb	r3, r3
}
 8006018:	4318      	orrs	r0, r3
 800601a:	4770      	bx	lr

0800601c <HAL_RTC_SetTime>:
{
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800601e:	7f03      	ldrb	r3, [r0, #28]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d078      	beq.n	8006116 <HAL_RTC_SetTime+0xfa>
 8006024:	460d      	mov	r5, r1
 8006026:	4604      	mov	r4, r0
 8006028:	2301      	movs	r3, #1
 800602a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800602c:	2302      	movs	r3, #2
 800602e:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8006030:	2a00      	cmp	r2, #0
 8006032:	d146      	bne.n	80060c2 <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006034:	6803      	ldr	r3, [r0, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f013 0f40 	tst.w	r3, #64	; 0x40
 800603c:	d101      	bne.n	8006042 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 800603e:	2300      	movs	r3, #0
 8006040:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006042:	7828      	ldrb	r0, [r5, #0]
 8006044:	f7ff ffdf 	bl	8006006 <RTC_ByteToBcd2>
 8006048:	0406      	lsls	r6, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800604a:	7868      	ldrb	r0, [r5, #1]
 800604c:	f7ff ffdb 	bl	8006006 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006050:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006054:	78a8      	ldrb	r0, [r5, #2]
 8006056:	f7ff ffd6 	bl	8006006 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800605a:	4330      	orrs	r0, r6
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800605c:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800605e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	22ca      	movs	r2, #202	; 0xca
 8006066:	625a      	str	r2, [r3, #36]	; 0x24
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	2253      	movs	r2, #83	; 0x53
 800606c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800606e:	4620      	mov	r0, r4
 8006070:	f7ff ff49 	bl	8005f06 <RTC_EnterInitMode>
 8006074:	4607      	mov	r7, r0
 8006076:	2800      	cmp	r0, #0
 8006078:	d135      	bne.n	80060e6 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 8006080:	f026 46fe 	bic.w	r6, r6, #2130706432	; 0x7f000000
 8006084:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006086:	6822      	ldr	r2, [r4, #0]
 8006088:	6893      	ldr	r3, [r2, #8]
 800608a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800608e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006090:	6821      	ldr	r1, [r4, #0]
 8006092:	688b      	ldr	r3, [r1, #8]
 8006094:	68ea      	ldr	r2, [r5, #12]
 8006096:	6928      	ldr	r0, [r5, #16]
 8006098:	4302      	orrs	r2, r0
 800609a:	4313      	orrs	r3, r2
 800609c:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800609e:	6822      	ldr	r2, [r4, #0]
 80060a0:	68d3      	ldr	r3, [r2, #12]
 80060a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060a6:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f013 0f20 	tst.w	r3, #32
 80060b0:	d023      	beq.n	80060fa <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	22ff      	movs	r2, #255	; 0xff
 80060b6:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80060b8:	2301      	movs	r3, #1
 80060ba:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 80060bc:	2300      	movs	r3, #0
 80060be:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 80060c0:	e019      	b.n	80060f6 <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80060c2:	6803      	ldr	r3, [r0, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060ca:	d101      	bne.n	80060d0 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80060d0:	782b      	ldrb	r3, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80060d2:	7868      	ldrb	r0, [r5, #1]
 80060d4:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80060d6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
              ((uint32_t)sTime->Seconds) | \
 80060da:	78ab      	ldrb	r3, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80060dc:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80060de:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80060e0:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80060e4:	e7bd      	b.n	8006062 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	22ff      	movs	r2, #255	; 0xff
 80060ea:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80060ec:	2304      	movs	r3, #4
 80060ee:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80060f0:	2300      	movs	r3, #0
 80060f2:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80060f4:	2701      	movs	r7, #1
}
 80060f6:	4638      	mov	r0, r7
 80060f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060fa:	4620      	mov	r0, r4
 80060fc:	f7ff feea 	bl	8005ed4 <HAL_RTC_WaitForSynchro>
 8006100:	2800      	cmp	r0, #0
 8006102:	d0d6      	beq.n	80060b2 <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	22ff      	movs	r2, #255	; 0xff
 8006108:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800610a:	2304      	movs	r3, #4
 800610c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800610e:	2300      	movs	r3, #0
 8006110:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8006112:	2701      	movs	r7, #1
 8006114:	e7ef      	b.n	80060f6 <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8006116:	2702      	movs	r7, #2
 8006118:	e7ed      	b.n	80060f6 <HAL_RTC_SetTime+0xda>

0800611a <HAL_RTC_SetDate>:
{
 800611a:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 800611c:	7f03      	ldrb	r3, [r0, #28]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d066      	beq.n	80061f0 <HAL_RTC_SetDate+0xd6>
 8006122:	2301      	movs	r3, #1
 8006124:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006126:	2302      	movs	r3, #2
 8006128:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800612a:	b93a      	cbnz	r2, 800613c <HAL_RTC_SetDate+0x22>
 800612c:	784b      	ldrb	r3, [r1, #1]
 800612e:	f013 0f10 	tst.w	r3, #16
 8006132:	d003      	beq.n	800613c <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006134:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8006138:	330a      	adds	r3, #10
 800613a:	704b      	strb	r3, [r1, #1]
 800613c:	460e      	mov	r6, r1
 800613e:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8006140:	2a00      	cmp	r2, #0
 8006142:	d132      	bne.n	80061aa <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006144:	78c8      	ldrb	r0, [r1, #3]
 8006146:	f7ff ff5e 	bl	8006006 <RTC_ByteToBcd2>
 800614a:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800614c:	7870      	ldrb	r0, [r6, #1]
 800614e:	f7ff ff5a 	bl	8006006 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006152:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006156:	78b0      	ldrb	r0, [r6, #2]
 8006158:	f7ff ff55 	bl	8006006 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800615c:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));
 800615e:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006160:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	22ca      	movs	r2, #202	; 0xca
 8006168:	625a      	str	r2, [r3, #36]	; 0x24
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	2253      	movs	r2, #83	; 0x53
 800616e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006170:	4620      	mov	r0, r4
 8006172:	f7ff fec8 	bl	8005f06 <RTC_EnterInitMode>
 8006176:	4606      	mov	r6, r0
 8006178:	bb10      	cbnz	r0, 80061c0 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8006180:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8006184:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006186:	6822      	ldr	r2, [r4, #0]
 8006188:	68d3      	ldr	r3, [r2, #12]
 800618a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800618e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f013 0f20 	tst.w	r3, #32
 8006198:	d01c      	beq.n	80061d4 <HAL_RTC_SetDate+0xba>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	22ff      	movs	r2, #255	; 0xff
 800619e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80061a0:	2301      	movs	r3, #1
 80061a2:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80061a4:	2300      	movs	r3, #0
 80061a6:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 80061a8:	e012      	b.n	80061d0 <HAL_RTC_SetDate+0xb6>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80061aa:	78cd      	ldrb	r5, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 80061ac:	7848      	ldrb	r0, [r1, #1]
 80061ae:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80061b0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 80061b4:	788d      	ldrb	r5, [r1, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80061b6:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));
 80061b8:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80061ba:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 80061be:	e7d1      	b.n	8006164 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	22ff      	movs	r2, #255	; 0xff
 80061c4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061c6:	2304      	movs	r3, #4
 80061c8:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80061ca:	2300      	movs	r3, #0
 80061cc:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80061ce:	2601      	movs	r6, #1
}
 80061d0:	4630      	mov	r0, r6
 80061d2:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061d4:	4620      	mov	r0, r4
 80061d6:	f7ff fe7d 	bl	8005ed4 <HAL_RTC_WaitForSynchro>
 80061da:	2800      	cmp	r0, #0
 80061dc:	d0dd      	beq.n	800619a <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	22ff      	movs	r2, #255	; 0xff
 80061e2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80061e4:	2304      	movs	r3, #4
 80061e6:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80061e8:	2300      	movs	r3, #0
 80061ea:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80061ec:	2601      	movs	r6, #1
 80061ee:	e7ef      	b.n	80061d0 <HAL_RTC_SetDate+0xb6>
 __HAL_LOCK(hrtc);
 80061f0:	2602      	movs	r6, #2
 80061f2:	e7ed      	b.n	80061d0 <HAL_RTC_SetDate+0xb6>

080061f4 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80061f4:	0903      	lsrs	r3, r0, #4
 80061f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80061fa:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80061fc:	f000 000f 	and.w	r0, r0, #15
 8006200:	4410      	add	r0, r2
}
 8006202:	b2c0      	uxtb	r0, r0
 8006204:	4770      	bx	lr

08006206 <HAL_RTC_GetTime>:
{
 8006206:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006208:	6803      	ldr	r3, [r0, #0]
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800620e:	6803      	ldr	r3, [r0, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006216:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006218:	6803      	ldr	r3, [r0, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006220:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006224:	0c1d      	lsrs	r5, r3, #16
 8006226:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 800622a:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800622c:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8006230:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006232:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8006236:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006238:	f005 0540 	and.w	r5, r5, #64	; 0x40
 800623c:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 800623e:	b95a      	cbnz	r2, 8006258 <HAL_RTC_GetTime+0x52>
 8006240:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006242:	f7ff ffd7 	bl	80061f4 <RTC_Bcd2ToByte>
 8006246:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006248:	4630      	mov	r0, r6
 800624a:	f7ff ffd3 	bl	80061f4 <RTC_Bcd2ToByte>
 800624e:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006250:	4620      	mov	r0, r4
 8006252:	f7ff ffcf 	bl	80061f4 <RTC_Bcd2ToByte>
 8006256:	70a8      	strb	r0, [r5, #2]
}
 8006258:	2000      	movs	r0, #0
 800625a:	bd70      	pop	{r4, r5, r6, pc}

0800625c <HAL_RTC_GetDate>:
{
 800625c:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800625e:	6803      	ldr	r3, [r0, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006266:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800626a:	0c18      	lsrs	r0, r3, #16
 800626c:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800626e:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8006272:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006274:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8006278:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800627a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800627e:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8006280:	b95a      	cbnz	r2, 800629a <HAL_RTC_GetDate+0x3e>
 8006282:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006284:	f7ff ffb6 	bl	80061f4 <RTC_Bcd2ToByte>
 8006288:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800628a:	4630      	mov	r0, r6
 800628c:	f7ff ffb2 	bl	80061f4 <RTC_Bcd2ToByte>
 8006290:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006292:	4628      	mov	r0, r5
 8006294:	f7ff ffae 	bl	80061f4 <RTC_Bcd2ToByte>
 8006298:	70a0      	strb	r0, [r4, #2]
}
 800629a:	2000      	movs	r0, #0
 800629c:	bd70      	pop	{r4, r5, r6, pc}

0800629e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800629e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a0:	4605      	mov	r5, r0
 80062a2:	460f      	mov	r7, r1
 80062a4:	4616      	mov	r6, r2
 80062a6:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	ea37 0303 	bics.w	r3, r7, r3
 80062b0:	bf0c      	ite	eq
 80062b2:	2301      	moveq	r3, #1
 80062b4:	2300      	movne	r3, #0
 80062b6:	42b3      	cmp	r3, r6
 80062b8:	d037      	beq.n	800632a <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062ba:	f1b4 3fff 	cmp.w	r4, #4294967295
 80062be:	d0f3      	beq.n	80062a8 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80062c0:	f7fd ff64 	bl	800418c <HAL_GetTick>
 80062c4:	9b06      	ldr	r3, [sp, #24]
 80062c6:	1ac0      	subs	r0, r0, r3
 80062c8:	42a0      	cmp	r0, r4
 80062ca:	d201      	bcs.n	80062d0 <SPI_WaitFlagStateUntilTimeout+0x32>
 80062cc:	2c00      	cmp	r4, #0
 80062ce:	d1eb      	bne.n	80062a8 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062d0:	682a      	ldr	r2, [r5, #0]
 80062d2:	6853      	ldr	r3, [r2, #4]
 80062d4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80062d8:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062da:	686b      	ldr	r3, [r5, #4]
 80062dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062e0:	d00b      	beq.n	80062fa <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80062e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e8:	d014      	beq.n	8006314 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062f0:	2300      	movs	r3, #0
 80062f2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 80062f6:	2003      	movs	r0, #3
 80062f8:	e018      	b.n	800632c <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062fa:	68ab      	ldr	r3, [r5, #8]
 80062fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006300:	d002      	beq.n	8006308 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006306:	d1ec      	bne.n	80062e2 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8006308:	682a      	ldr	r2, [r5, #0]
 800630a:	6813      	ldr	r3, [r2, #0]
 800630c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	e7e6      	b.n	80062e2 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8006314:	682a      	ldr	r2, [r5, #0]
 8006316:	6813      	ldr	r3, [r2, #0]
 8006318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	682a      	ldr	r2, [r5, #0]
 8006320:	6813      	ldr	r3, [r2, #0]
 8006322:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	e7df      	b.n	80062ea <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 800632a:	2000      	movs	r0, #0
}
 800632c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006330 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006330:	b530      	push	{r4, r5, lr}
 8006332:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006334:	4c16      	ldr	r4, [pc, #88]	; (8006390 <SPI_EndRxTxTransaction+0x60>)
 8006336:	6824      	ldr	r4, [r4, #0]
 8006338:	4d16      	ldr	r5, [pc, #88]	; (8006394 <SPI_EndRxTxTransaction+0x64>)
 800633a:	fba5 3404 	umull	r3, r4, r5, r4
 800633e:	0d64      	lsrs	r4, r4, #21
 8006340:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8006344:	fb05 f404 	mul.w	r4, r5, r4
 8006348:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800634a:	6844      	ldr	r4, [r0, #4]
 800634c:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8006350:	d00b      	beq.n	800636a <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006352:	9b03      	ldr	r3, [sp, #12]
 8006354:	b1c3      	cbz	r3, 8006388 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8006356:	9b03      	ldr	r3, [sp, #12]
 8006358:	3b01      	subs	r3, #1
 800635a:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800635c:	6803      	ldr	r3, [r0, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006364:	d1f5      	bne.n	8006352 <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	e00f      	b.n	800638a <SPI_EndRxTxTransaction+0x5a>
 800636a:	460b      	mov	r3, r1
 800636c:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800636e:	9200      	str	r2, [sp, #0]
 8006370:	2200      	movs	r2, #0
 8006372:	2180      	movs	r1, #128	; 0x80
 8006374:	f7ff ff93 	bl	800629e <SPI_WaitFlagStateUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	b130      	cbz	r0, 800638a <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800637c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800637e:	f043 0320 	orr.w	r3, r3, #32
 8006382:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e000      	b.n	800638a <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	b005      	add	sp, #20
 800638e:	bd30      	pop	{r4, r5, pc}
 8006390:	20000030 	.word	0x20000030
 8006394:	165e9f81 	.word	0x165e9f81

08006398 <SPI_EndRxTransaction>:
{
 8006398:	b510      	push	{r4, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800639e:	6840      	ldr	r0, [r0, #4]
 80063a0:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 80063a4:	d016      	beq.n	80063d4 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063a6:	6860      	ldr	r0, [r4, #4]
 80063a8:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 80063ac:	d12e      	bne.n	800640c <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80063ae:	68a3      	ldr	r3, [r4, #8]
 80063b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b4:	d01b      	beq.n	80063ee <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063b6:	9200      	str	r2, [sp, #0]
 80063b8:	460b      	mov	r3, r1
 80063ba:	2200      	movs	r2, #0
 80063bc:	2180      	movs	r1, #128	; 0x80
 80063be:	4620      	mov	r0, r4
 80063c0:	f7ff ff6d 	bl	800629e <SPI_WaitFlagStateUntilTimeout>
 80063c4:	4603      	mov	r3, r0
 80063c6:	b350      	cbz	r0, 800641e <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80063ca:	f043 0320 	orr.w	r3, r3, #32
 80063ce:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e024      	b.n	800641e <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d4:	68a3      	ldr	r3, [r4, #8]
 80063d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063da:	d002      	beq.n	80063e2 <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e0:	d1e1      	bne.n	80063a6 <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 80063e2:	6820      	ldr	r0, [r4, #0]
 80063e4:	6803      	ldr	r3, [r0, #0]
 80063e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ea:	6003      	str	r3, [r0, #0]
 80063ec:	e7db      	b.n	80063a6 <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063ee:	9200      	str	r2, [sp, #0]
 80063f0:	460b      	mov	r3, r1
 80063f2:	2200      	movs	r2, #0
 80063f4:	2101      	movs	r1, #1
 80063f6:	4620      	mov	r0, r4
 80063f8:	f7ff ff51 	bl	800629e <SPI_WaitFlagStateUntilTimeout>
 80063fc:	4603      	mov	r3, r0
 80063fe:	b170      	cbz	r0, 800641e <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006400:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006402:	f043 0320 	orr.w	r3, r3, #32
 8006406:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e008      	b.n	800641e <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800640c:	9200      	str	r2, [sp, #0]
 800640e:	460b      	mov	r3, r1
 8006410:	2200      	movs	r2, #0
 8006412:	2101      	movs	r1, #1
 8006414:	4620      	mov	r0, r4
 8006416:	f7ff ff42 	bl	800629e <SPI_WaitFlagStateUntilTimeout>
 800641a:	4603      	mov	r3, r0
 800641c:	b910      	cbnz	r0, 8006424 <SPI_EndRxTransaction+0x8c>
}
 800641e:	4618      	mov	r0, r3
 8006420:	b002      	add	sp, #8
 8006422:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006424:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006426:	f043 0320 	orr.w	r3, r3, #32
 800642a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e7f6      	b.n	800641e <SPI_EndRxTransaction+0x86>

08006430 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006430:	2800      	cmp	r0, #0
 8006432:	d03b      	beq.n	80064ac <HAL_SPI_Init+0x7c>
{
 8006434:	b510      	push	{r4, lr}
 8006436:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006438:	2300      	movs	r3, #0
 800643a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800643c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8006440:	2b00      	cmp	r3, #0
 8006442:	d02e      	beq.n	80064a2 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006444:	2302      	movs	r3, #2
 8006446:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800644a:	6822      	ldr	r2, [r4, #0]
 800644c:	6813      	ldr	r3, [r2, #0]
 800644e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006452:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006454:	6863      	ldr	r3, [r4, #4]
 8006456:	68a2      	ldr	r2, [r4, #8]
 8006458:	4313      	orrs	r3, r2
 800645a:	68e2      	ldr	r2, [r4, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	6922      	ldr	r2, [r4, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	6962      	ldr	r2, [r4, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	69a2      	ldr	r2, [r4, #24]
 8006468:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800646c:	4313      	orrs	r3, r2
 800646e:	69e2      	ldr	r2, [r4, #28]
 8006470:	4313      	orrs	r3, r2
 8006472:	6a22      	ldr	r2, [r4, #32]
 8006474:	4313      	orrs	r3, r2
 8006476:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006478:	6822      	ldr	r2, [r4, #0]
 800647a:	430b      	orrs	r3, r1
 800647c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800647e:	8b63      	ldrh	r3, [r4, #26]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006486:	6822      	ldr	r2, [r4, #0]
 8006488:	430b      	orrs	r3, r1
 800648a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800648c:	6822      	ldr	r2, [r4, #0]
 800648e:	69d3      	ldr	r3, [r2, #28]
 8006490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006494:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006496:	2000      	movs	r0, #0
 8006498:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800649a:	2301      	movs	r3, #1
 800649c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80064a0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80064a2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80064a6:	f7fc ffcd 	bl	8003444 <HAL_SPI_MspInit>
 80064aa:	e7cb      	b.n	8006444 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 80064ac:	2001      	movs	r0, #1
}
 80064ae:	4770      	bx	lr

080064b0 <HAL_SPI_Transmit>:
{
 80064b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b4:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80064b6:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 80064ba:	2c01      	cmp	r4, #1
 80064bc:	f000 80c3 	beq.w	8006646 <HAL_SPI_Transmit+0x196>
 80064c0:	461d      	mov	r5, r3
 80064c2:	4617      	mov	r7, r2
 80064c4:	4688      	mov	r8, r1
 80064c6:	4604      	mov	r4, r0
 80064c8:	2301      	movs	r3, #1
 80064ca:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80064ce:	f7fd fe5d 	bl	800418c <HAL_GetTick>
 80064d2:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80064d4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d009      	beq.n	80064f2 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 80064de:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80064e0:	2301      	movs	r3, #1
 80064e2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064e6:	2300      	movs	r3, #0
 80064e8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80064ec:	b002      	add	sp, #8
 80064ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80064f2:	f1b8 0f00 	cmp.w	r8, #0
 80064f6:	f000 8098 	beq.w	800662a <HAL_SPI_Transmit+0x17a>
 80064fa:	2f00      	cmp	r7, #0
 80064fc:	f000 8097 	beq.w	800662e <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006500:	2303      	movs	r3, #3
 8006502:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006506:	2300      	movs	r3, #0
 8006508:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800650a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800650e:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006510:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006512:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006514:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006516:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006518:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800651a:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800651c:	68a3      	ldr	r3, [r4, #8]
 800651e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006522:	d01c      	beq.n	800655e <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	f012 0f40 	tst.w	r2, #64	; 0x40
 800652c:	d103      	bne.n	8006536 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006534:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006536:	68e3      	ldr	r3, [r4, #12]
 8006538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800653c:	d015      	beq.n	800656a <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800653e:	6863      	ldr	r3, [r4, #4]
 8006540:	b10b      	cbz	r3, 8006546 <HAL_SPI_Transmit+0x96>
 8006542:	2f01      	cmp	r7, #1
 8006544:	d149      	bne.n	80065da <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006546:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	7812      	ldrb	r2, [r2, #0]
 800654c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800654e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006550:	3301      	adds	r3, #1
 8006552:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006554:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006556:	3b01      	subs	r3, #1
 8006558:	b29b      	uxth	r3, r3
 800655a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800655c:	e03d      	b.n	80065da <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	6813      	ldr	r3, [r2, #0]
 8006562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	e7dc      	b.n	8006524 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800656a:	6863      	ldr	r3, [r4, #4]
 800656c:	b10b      	cbz	r3, 8006572 <HAL_SPI_Transmit+0xc2>
 800656e:	2f01      	cmp	r7, #1
 8006570:	d115      	bne.n	800659e <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006572:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	8812      	ldrh	r2, [r2, #0]
 8006578:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800657a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800657c:	3302      	adds	r3, #2
 800657e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006580:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006582:	3b01      	subs	r3, #1
 8006584:	b29b      	uxth	r3, r3
 8006586:	86e3      	strh	r3, [r4, #54]	; 0x36
 8006588:	e009      	b.n	800659e <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800658a:	f7fd fdff 	bl	800418c <HAL_GetTick>
 800658e:	1b80      	subs	r0, r0, r6
 8006590:	42a8      	cmp	r0, r5
 8006592:	d302      	bcc.n	800659a <HAL_SPI_Transmit+0xea>
 8006594:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006598:	d14b      	bne.n	8006632 <HAL_SPI_Transmit+0x182>
 800659a:	2d00      	cmp	r5, #0
 800659c:	d04b      	beq.n	8006636 <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 800659e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d02c      	beq.n	8006600 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	f012 0f02 	tst.w	r2, #2
 80065ae:	d0ec      	beq.n	800658a <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80065b2:	8812      	ldrh	r2, [r2, #0]
 80065b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065b8:	3302      	adds	r3, #2
 80065ba:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80065bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	86e3      	strh	r3, [r4, #54]	; 0x36
 80065c4:	e7eb      	b.n	800659e <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065c6:	f7fd fde1 	bl	800418c <HAL_GetTick>
 80065ca:	1b80      	subs	r0, r0, r6
 80065cc:	42a8      	cmp	r0, r5
 80065ce:	d302      	bcc.n	80065d6 <HAL_SPI_Transmit+0x126>
 80065d0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80065d4:	d131      	bne.n	800663a <HAL_SPI_Transmit+0x18a>
 80065d6:	2d00      	cmp	r5, #0
 80065d8:	d031      	beq.n	800663e <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 80065da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065dc:	b29b      	uxth	r3, r3
 80065de:	b17b      	cbz	r3, 8006600 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	f012 0f02 	tst.w	r2, #2
 80065e8:	d0ed      	beq.n	80065c6 <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80065ec:	7812      	ldrb	r2, [r2, #0]
 80065ee:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065f2:	3301      	adds	r3, #1
 80065f4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80065f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	86e3      	strh	r3, [r4, #54]	; 0x36
 80065fe:	e7ec      	b.n	80065da <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006600:	4632      	mov	r2, r6
 8006602:	4629      	mov	r1, r5
 8006604:	4620      	mov	r0, r4
 8006606:	f7ff fe93 	bl	8006330 <SPI_EndRxTxTransaction>
 800660a:	b108      	cbz	r0, 8006610 <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800660c:	2320      	movs	r3, #32
 800660e:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006610:	68a3      	ldr	r3, [r4, #8]
 8006612:	b933      	cbnz	r3, 8006622 <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006614:	9301      	str	r3, [sp, #4]
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	9201      	str	r2, [sp, #4]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006622:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006624:	b96b      	cbnz	r3, 8006642 <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006626:	2000      	movs	r0, #0
 8006628:	e75a      	b.n	80064e0 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 800662a:	2001      	movs	r0, #1
 800662c:	e758      	b.n	80064e0 <HAL_SPI_Transmit+0x30>
 800662e:	2001      	movs	r0, #1
 8006630:	e756      	b.n	80064e0 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8006632:	2003      	movs	r0, #3
 8006634:	e754      	b.n	80064e0 <HAL_SPI_Transmit+0x30>
 8006636:	2003      	movs	r0, #3
 8006638:	e752      	b.n	80064e0 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 800663a:	2003      	movs	r0, #3
 800663c:	e750      	b.n	80064e0 <HAL_SPI_Transmit+0x30>
 800663e:	2003      	movs	r0, #3
 8006640:	e74e      	b.n	80064e0 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8006642:	2001      	movs	r0, #1
 8006644:	e74c      	b.n	80064e0 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8006646:	2002      	movs	r0, #2
 8006648:	e750      	b.n	80064ec <HAL_SPI_Transmit+0x3c>

0800664a <HAL_SPI_TransmitReceive>:
{
 800664a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800664e:	b083      	sub	sp, #12
 8006650:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8006654:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8006658:	2c01      	cmp	r4, #1
 800665a:	f000 810b 	beq.w	8006874 <HAL_SPI_TransmitReceive+0x22a>
 800665e:	461d      	mov	r5, r3
 8006660:	4617      	mov	r7, r2
 8006662:	460e      	mov	r6, r1
 8006664:	4604      	mov	r4, r0
 8006666:	2301      	movs	r3, #1
 8006668:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800666c:	f7fd fd8e 	bl	800418c <HAL_GetTick>
 8006670:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8006672:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8006676:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8006678:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800667a:	2801      	cmp	r0, #1
 800667c:	d015      	beq.n	80066aa <HAL_SPI_TransmitReceive+0x60>
 800667e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006682:	d00a      	beq.n	800669a <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 8006684:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006686:	2201      	movs	r2, #1
 8006688:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800668c:	2200      	movs	r2, #0
 800668e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8006692:	4618      	mov	r0, r3
 8006694:	b003      	add	sp, #12
 8006696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800669a:	68a3      	ldr	r3, [r4, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	f040 80db 	bne.w	8006858 <HAL_SPI_TransmitReceive+0x20e>
 80066a2:	2804      	cmp	r0, #4
 80066a4:	d001      	beq.n	80066aa <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 80066a6:	2302      	movs	r3, #2
 80066a8:	e7ed      	b.n	8006686 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066aa:	2e00      	cmp	r6, #0
 80066ac:	f000 80d6 	beq.w	800685c <HAL_SPI_TransmitReceive+0x212>
 80066b0:	2f00      	cmp	r7, #0
 80066b2:	f000 80d5 	beq.w	8006860 <HAL_SPI_TransmitReceive+0x216>
 80066b6:	2d00      	cmp	r5, #0
 80066b8:	f000 80d4 	beq.w	8006864 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066bc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d002      	beq.n	80066cc <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066c6:	2305      	movs	r3, #5
 80066c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066cc:	2300      	movs	r3, #0
 80066ce:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066d0:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80066d2:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80066d4:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066d6:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80066d8:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80066da:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80066dc:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066de:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80066e8:	d103      	bne.n	80066f2 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066f0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066f2:	68e3      	ldr	r3, [r4, #12]
 80066f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066f8:	d010      	beq.n	800671c <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066fa:	6863      	ldr	r3, [r4, #4]
 80066fc:	b10b      	cbz	r3, 8006702 <HAL_SPI_TransmitReceive+0xb8>
 80066fe:	2d01      	cmp	r5, #1
 8006700:	d10a      	bne.n	8006718 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006702:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	7812      	ldrb	r2, [r2, #0]
 8006708:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800670a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800670c:	3301      	adds	r3, #1
 800670e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006710:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006712:	3b01      	subs	r3, #1
 8006714:	b29b      	uxth	r3, r3
 8006716:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006718:	2501      	movs	r5, #1
 800671a:	e069      	b.n	80067f0 <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800671c:	6863      	ldr	r3, [r4, #4]
 800671e:	b10b      	cbz	r3, 8006724 <HAL_SPI_TransmitReceive+0xda>
 8006720:	2d01      	cmp	r5, #1
 8006722:	d10a      	bne.n	800673a <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006724:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	8812      	ldrh	r2, [r2, #0]
 800672a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800672c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800672e:	3302      	adds	r3, #2
 8006730:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006732:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006734:	3b01      	subs	r3, #1
 8006736:	b29b      	uxth	r3, r3
 8006738:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800673a:	2501      	movs	r5, #1
 800673c:	e01b      	b.n	8006776 <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	f012 0f01 	tst.w	r2, #1
 8006746:	d00d      	beq.n	8006764 <HAL_SPI_TransmitReceive+0x11a>
 8006748:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800674a:	b292      	uxth	r2, r2
 800674c:	b152      	cbz	r2, 8006764 <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006752:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006754:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006756:	3302      	adds	r3, #2
 8006758:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800675a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800675c:	3b01      	subs	r3, #1
 800675e:	b29b      	uxth	r3, r3
 8006760:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006762:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006764:	f7fd fd12 	bl	800418c <HAL_GetTick>
 8006768:	eba0 0009 	sub.w	r0, r0, r9
 800676c:	4540      	cmp	r0, r8
 800676e:	d302      	bcc.n	8006776 <HAL_SPI_TransmitReceive+0x12c>
 8006770:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006774:	d178      	bne.n	8006868 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006776:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006778:	b29b      	uxth	r3, r3
 800677a:	b91b      	cbnz	r3, 8006784 <HAL_SPI_TransmitReceive+0x13a>
 800677c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d052      	beq.n	800682a <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	f012 0f02 	tst.w	r2, #2
 800678c:	d0d7      	beq.n	800673e <HAL_SPI_TransmitReceive+0xf4>
 800678e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006790:	b292      	uxth	r2, r2
 8006792:	2a00      	cmp	r2, #0
 8006794:	d0d3      	beq.n	800673e <HAL_SPI_TransmitReceive+0xf4>
 8006796:	2d00      	cmp	r5, #0
 8006798:	d0d1      	beq.n	800673e <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800679a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800679c:	8812      	ldrh	r2, [r2, #0]
 800679e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067a2:	3302      	adds	r3, #2
 80067a4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80067a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80067ae:	2500      	movs	r5, #0
 80067b0:	e7c5      	b.n	800673e <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	f012 0f01 	tst.w	r2, #1
 80067ba:	d00d      	beq.n	80067d8 <HAL_SPI_TransmitReceive+0x18e>
 80067bc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80067be:	b292      	uxth	r2, r2
 80067c0:	b152      	cbz	r2, 80067d8 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067c2:	68da      	ldr	r2, [r3, #12]
 80067c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067ca:	3301      	adds	r3, #1
 80067cc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80067ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80067d6:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067d8:	f7fd fcd8 	bl	800418c <HAL_GetTick>
 80067dc:	eba0 0009 	sub.w	r0, r0, r9
 80067e0:	4540      	cmp	r0, r8
 80067e2:	d302      	bcc.n	80067ea <HAL_SPI_TransmitReceive+0x1a0>
 80067e4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80067e8:	d140      	bne.n	800686c <HAL_SPI_TransmitReceive+0x222>
 80067ea:	f1b8 0f00 	cmp.w	r8, #0
 80067ee:	d03f      	beq.n	8006870 <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	b913      	cbnz	r3, 80067fc <HAL_SPI_TransmitReceive+0x1b2>
 80067f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	b1b3      	cbz	r3, 800682a <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	f012 0f02 	tst.w	r2, #2
 8006804:	d0d5      	beq.n	80067b2 <HAL_SPI_TransmitReceive+0x168>
 8006806:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006808:	b292      	uxth	r2, r2
 800680a:	2a00      	cmp	r2, #0
 800680c:	d0d1      	beq.n	80067b2 <HAL_SPI_TransmitReceive+0x168>
 800680e:	2d00      	cmp	r5, #0
 8006810:	d0cf      	beq.n	80067b2 <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006812:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006814:	7812      	ldrb	r2, [r2, #0]
 8006816:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006818:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800681a:	3301      	adds	r3, #1
 800681c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800681e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006820:	3b01      	subs	r3, #1
 8006822:	b29b      	uxth	r3, r3
 8006824:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8006826:	2500      	movs	r5, #0
 8006828:	e7c3      	b.n	80067b2 <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800682a:	464a      	mov	r2, r9
 800682c:	4641      	mov	r1, r8
 800682e:	4620      	mov	r0, r4
 8006830:	f7ff fd7e 	bl	8006330 <SPI_EndRxTxTransaction>
 8006834:	4603      	mov	r3, r0
 8006836:	b118      	cbz	r0, 8006840 <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006838:	2320      	movs	r3, #32
 800683a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
    goto error;
 800683e:	e722      	b.n	8006686 <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006840:	68a2      	ldr	r2, [r4, #8]
 8006842:	2a00      	cmp	r2, #0
 8006844:	f47f af1f 	bne.w	8006686 <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006848:	9201      	str	r2, [sp, #4]
 800684a:	6822      	ldr	r2, [r4, #0]
 800684c:	68d1      	ldr	r1, [r2, #12]
 800684e:	9101      	str	r1, [sp, #4]
 8006850:	6892      	ldr	r2, [r2, #8]
 8006852:	9201      	str	r2, [sp, #4]
 8006854:	9a01      	ldr	r2, [sp, #4]
 8006856:	e716      	b.n	8006686 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 8006858:	2302      	movs	r3, #2
 800685a:	e714      	b.n	8006686 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e712      	b.n	8006686 <HAL_SPI_TransmitReceive+0x3c>
 8006860:	2301      	movs	r3, #1
 8006862:	e710      	b.n	8006686 <HAL_SPI_TransmitReceive+0x3c>
 8006864:	2301      	movs	r3, #1
 8006866:	e70e      	b.n	8006686 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e70c      	b.n	8006686 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e70a      	b.n	8006686 <HAL_SPI_TransmitReceive+0x3c>
 8006870:	2303      	movs	r3, #3
 8006872:	e708      	b.n	8006686 <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8006874:	2302      	movs	r3, #2
 8006876:	e70c      	b.n	8006692 <HAL_SPI_TransmitReceive+0x48>

08006878 <HAL_SPI_Receive>:
{
 8006878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800687c:	b082      	sub	sp, #8
 800687e:	4604      	mov	r4, r0
 8006880:	460f      	mov	r7, r1
 8006882:	4690      	mov	r8, r2
 8006884:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006886:	6843      	ldr	r3, [r0, #4]
 8006888:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800688c:	d019      	beq.n	80068c2 <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 800688e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006892:	2b01      	cmp	r3, #1
 8006894:	f000 809f 	beq.w	80069d6 <HAL_SPI_Receive+0x15e>
 8006898:	2301      	movs	r3, #1
 800689a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800689e:	f7fd fc75 	bl	800418c <HAL_GetTick>
 80068a2:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80068a4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d015      	beq.n	80068da <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 80068ae:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80068b0:	2301      	movs	r3, #1
 80068b2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068b6:	2300      	movs	r3, #0
 80068b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80068bc:	b002      	add	sp, #8
 80068be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80068c2:	6883      	ldr	r3, [r0, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e2      	bne.n	800688e <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80068c8:	2304      	movs	r3, #4
 80068ca:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80068ce:	9500      	str	r5, [sp, #0]
 80068d0:	4613      	mov	r3, r2
 80068d2:	460a      	mov	r2, r1
 80068d4:	f7ff feb9 	bl	800664a <HAL_SPI_TransmitReceive>
 80068d8:	e7f0      	b.n	80068bc <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 80068da:	2f00      	cmp	r7, #0
 80068dc:	d06d      	beq.n	80069ba <HAL_SPI_Receive+0x142>
 80068de:	f1b8 0f00 	cmp.w	r8, #0
 80068e2:	d06c      	beq.n	80069be <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80068e4:	2304      	movs	r3, #4
 80068e6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068ea:	2300      	movs	r3, #0
 80068ec:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80068ee:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80068f0:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80068f4:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80068f8:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80068fa:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80068fc:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 80068fe:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006900:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006902:	68a3      	ldr	r3, [r4, #8]
 8006904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006908:	d00b      	beq.n	8006922 <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006912:	d103      	bne.n	800691c <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800691a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800691c:	68e3      	ldr	r3, [r4, #12]
 800691e:	b183      	cbz	r3, 8006942 <HAL_SPI_Receive+0xca>
 8006920:	e02c      	b.n	800697c <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 8006922:	6822      	ldr	r2, [r4, #0]
 8006924:	6813      	ldr	r3, [r2, #0]
 8006926:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	e7ed      	b.n	800690a <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800692e:	f7fd fc2d 	bl	800418c <HAL_GetTick>
 8006932:	1b80      	subs	r0, r0, r6
 8006934:	42a8      	cmp	r0, r5
 8006936:	d302      	bcc.n	800693e <HAL_SPI_Receive+0xc6>
 8006938:	f1b5 3fff 	cmp.w	r5, #4294967295
 800693c:	d141      	bne.n	80069c2 <HAL_SPI_Receive+0x14a>
 800693e:	2d00      	cmp	r5, #0
 8006940:	d041      	beq.n	80069c6 <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 8006942:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d02b      	beq.n	80069a2 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	f012 0f01 	tst.w	r2, #1
 8006952:	d0ec      	beq.n	800692e <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006954:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006956:	7b1b      	ldrb	r3, [r3, #12]
 8006958:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800695a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800695c:	3301      	adds	r3, #1
 800695e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006960:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006962:	3b01      	subs	r3, #1
 8006964:	b29b      	uxth	r3, r3
 8006966:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006968:	e7eb      	b.n	8006942 <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800696a:	f7fd fc0f 	bl	800418c <HAL_GetTick>
 800696e:	1b80      	subs	r0, r0, r6
 8006970:	42a8      	cmp	r0, r5
 8006972:	d302      	bcc.n	800697a <HAL_SPI_Receive+0x102>
 8006974:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006978:	d127      	bne.n	80069ca <HAL_SPI_Receive+0x152>
 800697a:	b345      	cbz	r5, 80069ce <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 800697c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800697e:	b29b      	uxth	r3, r3
 8006980:	b17b      	cbz	r3, 80069a2 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	f012 0f01 	tst.w	r2, #1
 800698a:	d0ee      	beq.n	800696a <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006990:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006992:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006994:	3302      	adds	r3, #2
 8006996:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006998:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800699a:	3b01      	subs	r3, #1
 800699c:	b29b      	uxth	r3, r3
 800699e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80069a0:	e7ec      	b.n	800697c <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069a2:	4632      	mov	r2, r6
 80069a4:	4629      	mov	r1, r5
 80069a6:	4620      	mov	r0, r4
 80069a8:	f7ff fcf6 	bl	8006398 <SPI_EndRxTransaction>
 80069ac:	b108      	cbz	r0, 80069b2 <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069ae:	2320      	movs	r3, #32
 80069b0:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80069b4:	b96b      	cbnz	r3, 80069d2 <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069b6:	2000      	movs	r0, #0
 80069b8:	e77a      	b.n	80068b0 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 80069ba:	2001      	movs	r0, #1
 80069bc:	e778      	b.n	80068b0 <HAL_SPI_Receive+0x38>
 80069be:	2001      	movs	r0, #1
 80069c0:	e776      	b.n	80068b0 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 80069c2:	2003      	movs	r0, #3
 80069c4:	e774      	b.n	80068b0 <HAL_SPI_Receive+0x38>
 80069c6:	2003      	movs	r0, #3
 80069c8:	e772      	b.n	80068b0 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 80069ca:	2003      	movs	r0, #3
 80069cc:	e770      	b.n	80068b0 <HAL_SPI_Receive+0x38>
 80069ce:	2003      	movs	r0, #3
 80069d0:	e76e      	b.n	80068b0 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 80069d2:	2001      	movs	r0, #1
 80069d4:	e76c      	b.n	80068b0 <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 80069d6:	2002      	movs	r0, #2
 80069d8:	e770      	b.n	80068bc <HAL_SPI_Receive+0x44>
	...

080069dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069de:	6a03      	ldr	r3, [r0, #32]
 80069e0:	f023 0301 	bic.w	r3, r3, #1
 80069e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ea:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069ec:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069f0:	680d      	ldr	r5, [r1, #0]
 80069f2:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069f6:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069fa:	688b      	ldr	r3, [r1, #8]
 80069fc:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069fe:	4d0d      	ldr	r5, [pc, #52]	; (8006a34 <TIM_OC1_SetConfig+0x58>)
 8006a00:	42a8      	cmp	r0, r5
 8006a02:	d009      	beq.n	8006a18 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a04:	4d0b      	ldr	r5, [pc, #44]	; (8006a34 <TIM_OC1_SetConfig+0x58>)
 8006a06:	42a8      	cmp	r0, r5
 8006a08:	d00d      	beq.n	8006a26 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a0a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a0c:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a0e:	684a      	ldr	r2, [r1, #4]
 8006a10:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a12:	6203      	str	r3, [r0, #32]
}
 8006a14:	bc70      	pop	{r4, r5, r6}
 8006a16:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a18:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006a1c:	68cc      	ldr	r4, [r1, #12]
 8006a1e:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a20:	f023 0304 	bic.w	r3, r3, #4
 8006a24:	e7ee      	b.n	8006a04 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8006a2a:	694c      	ldr	r4, [r1, #20]
 8006a2c:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a2e:	698a      	ldr	r2, [r1, #24]
 8006a30:	4322      	orrs	r2, r4
 8006a32:	e7ea      	b.n	8006a0a <TIM_OC1_SetConfig+0x2e>
 8006a34:	40010000 	.word	0x40010000

08006a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a38:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a3a:	6a03      	ldr	r3, [r0, #32]
 8006a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a40:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a42:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a44:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a46:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a48:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a4c:	680d      	ldr	r5, [r1, #0]
 8006a4e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a54:	688d      	ldr	r5, [r1, #8]
 8006a56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a5a:	4d0f      	ldr	r5, [pc, #60]	; (8006a98 <TIM_OC3_SetConfig+0x60>)
 8006a5c:	42a8      	cmp	r0, r5
 8006a5e:	d009      	beq.n	8006a74 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a60:	4d0d      	ldr	r5, [pc, #52]	; (8006a98 <TIM_OC3_SetConfig+0x60>)
 8006a62:	42a8      	cmp	r0, r5
 8006a64:	d00e      	beq.n	8006a84 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a66:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a68:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a6a:	684a      	ldr	r2, [r1, #4]
 8006a6c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6e:	6203      	str	r3, [r0, #32]
}
 8006a70:	bc30      	pop	{r4, r5}
 8006a72:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a78:	68cd      	ldr	r5, [r1, #12]
 8006a7a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a82:	e7ed      	b.n	8006a60 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a84:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a88:	694d      	ldr	r5, [r1, #20]
 8006a8a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a8e:	698d      	ldr	r5, [r1, #24]
 8006a90:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8006a94:	e7e7      	b.n	8006a66 <TIM_OC3_SetConfig+0x2e>
 8006a96:	bf00      	nop
 8006a98:	40010000 	.word	0x40010000

08006a9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a9c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a9e:	6a03      	ldr	r3, [r0, #32]
 8006aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006aa4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aaa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006aac:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab0:	680d      	ldr	r5, [r1, #0]
 8006ab2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006aba:	688d      	ldr	r5, [r1, #8]
 8006abc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac0:	4d07      	ldr	r5, [pc, #28]	; (8006ae0 <TIM_OC4_SetConfig+0x44>)
 8006ac2:	42a8      	cmp	r0, r5
 8006ac4:	d006      	beq.n	8006ad4 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ac8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006aca:	684a      	ldr	r2, [r1, #4]
 8006acc:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ace:	6203      	str	r3, [r0, #32]
}
 8006ad0:	bc30      	pop	{r4, r5}
 8006ad2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ad4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ad8:	694d      	ldr	r5, [r1, #20]
 8006ada:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8006ade:	e7f2      	b.n	8006ac6 <TIM_OC4_SetConfig+0x2a>
 8006ae0:	40010000 	.word	0x40010000

08006ae4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ae4:	6802      	ldr	r2, [r0, #0]
 8006ae6:	68d3      	ldr	r3, [r2, #12]
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
 8006aec:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aee:	6802      	ldr	r2, [r0, #0]
 8006af0:	6893      	ldr	r3, [r2, #8]
 8006af2:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af6:	2b06      	cmp	r3, #6
 8006af8:	d003      	beq.n	8006b02 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8006afa:	6813      	ldr	r3, [r2, #0]
 8006afc:	f043 0301 	orr.w	r3, r3, #1
 8006b00:	6013      	str	r3, [r2, #0]
}
 8006b02:	2000      	movs	r0, #0
 8006b04:	4770      	bx	lr

08006b06 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006b06:	4770      	bx	lr

08006b08 <HAL_TIM_IC_CaptureCallback>:
}
 8006b08:	4770      	bx	lr

08006b0a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006b0a:	4770      	bx	lr

08006b0c <HAL_TIM_TriggerCallback>:
}
 8006b0c:	4770      	bx	lr

08006b0e <HAL_TIM_IRQHandler>:
{
 8006b0e:	b510      	push	{r4, lr}
 8006b10:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b12:	6803      	ldr	r3, [r0, #0]
 8006b14:	691a      	ldr	r2, [r3, #16]
 8006b16:	f012 0f02 	tst.w	r2, #2
 8006b1a:	d011      	beq.n	8006b40 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	f012 0f02 	tst.w	r2, #2
 8006b22:	d00d      	beq.n	8006b40 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b24:	f06f 0202 	mvn.w	r2, #2
 8006b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b2e:	6803      	ldr	r3, [r0, #0]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	f013 0f03 	tst.w	r3, #3
 8006b36:	d070      	beq.n	8006c1a <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8006b38:	f7ff ffe6 	bl	8006b08 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	f012 0f04 	tst.w	r2, #4
 8006b48:	d012      	beq.n	8006b70 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	f012 0f04 	tst.w	r2, #4
 8006b50:	d00e      	beq.n	8006b70 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b52:	f06f 0204 	mvn.w	r2, #4
 8006b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006b64:	d05f      	beq.n	8006c26 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8006b66:	4620      	mov	r0, r4
 8006b68:	f7ff ffce 	bl	8006b08 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	f012 0f08 	tst.w	r2, #8
 8006b78:	d012      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	f012 0f08 	tst.w	r2, #8
 8006b80:	d00e      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b82:	f06f 0208 	mvn.w	r2, #8
 8006b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b88:	2304      	movs	r3, #4
 8006b8a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	f013 0f03 	tst.w	r3, #3
 8006b94:	d04e      	beq.n	8006c34 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8006b96:	4620      	mov	r0, r4
 8006b98:	f7ff ffb6 	bl	8006b08 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	f012 0f10 	tst.w	r2, #16
 8006ba8:	d012      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	f012 0f10 	tst.w	r2, #16
 8006bb0:	d00e      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bb2:	f06f 0210 	mvn.w	r2, #16
 8006bb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bb8:	2308      	movs	r3, #8
 8006bba:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006bc4:	d03d      	beq.n	8006c42 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f7ff ff9e 	bl	8006b08 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	691a      	ldr	r2, [r3, #16]
 8006bd4:	f012 0f01 	tst.w	r2, #1
 8006bd8:	d003      	beq.n	8006be2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	f012 0f01 	tst.w	r2, #1
 8006be0:	d136      	bne.n	8006c50 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	691a      	ldr	r2, [r3, #16]
 8006be6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006bea:	d003      	beq.n	8006bf4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006bf2:	d134      	bne.n	8006c5e <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006bfc:	d003      	beq.n	8006c06 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bfe:	68da      	ldr	r2, [r3, #12]
 8006c00:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006c04:	d132      	bne.n	8006c6c <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	691a      	ldr	r2, [r3, #16]
 8006c0a:	f012 0f20 	tst.w	r2, #32
 8006c0e:	d003      	beq.n	8006c18 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c10:	68da      	ldr	r2, [r3, #12]
 8006c12:	f012 0f20 	tst.w	r2, #32
 8006c16:	d130      	bne.n	8006c7a <HAL_TIM_IRQHandler+0x16c>
}
 8006c18:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1a:	f7ff ff74 	bl	8006b06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f7ff ff73 	bl	8006b0a <HAL_TIM_PWM_PulseFinishedCallback>
 8006c24:	e78a      	b.n	8006b3c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c26:	4620      	mov	r0, r4
 8006c28:	f7ff ff6d 	bl	8006b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f7ff ff6c 	bl	8006b0a <HAL_TIM_PWM_PulseFinishedCallback>
 8006c32:	e79b      	b.n	8006b6c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c34:	4620      	mov	r0, r4
 8006c36:	f7ff ff66 	bl	8006b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f7ff ff65 	bl	8006b0a <HAL_TIM_PWM_PulseFinishedCallback>
 8006c40:	e7ac      	b.n	8006b9c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c42:	4620      	mov	r0, r4
 8006c44:	f7ff ff5f 	bl	8006b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f7ff ff5e 	bl	8006b0a <HAL_TIM_PWM_PulseFinishedCallback>
 8006c4e:	e7bd      	b.n	8006bcc <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c50:	f06f 0201 	mvn.w	r2, #1
 8006c54:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c56:	4620      	mov	r0, r4
 8006c58:	f7fc fb40 	bl	80032dc <HAL_TIM_PeriodElapsedCallback>
 8006c5c:	e7c1      	b.n	8006be2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006c64:	4620      	mov	r0, r4
 8006c66:	f000 f9c5 	bl	8006ff4 <HAL_TIMEx_BreakCallback>
 8006c6a:	e7c3      	b.n	8006bf4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c70:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006c72:	4620      	mov	r0, r4
 8006c74:	f7ff ff4a 	bl	8006b0c <HAL_TIM_TriggerCallback>
 8006c78:	e7c5      	b.n	8006c06 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c7a:	f06f 0220 	mvn.w	r2, #32
 8006c7e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 f9b6 	bl	8006ff2 <HAL_TIMEx_CommutCallback>
}
 8006c86:	e7c7      	b.n	8006c18 <HAL_TIM_IRQHandler+0x10a>

08006c88 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006c88:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c8a:	4a25      	ldr	r2, [pc, #148]	; (8006d20 <TIM_Base_SetConfig+0x98>)
 8006c8c:	4290      	cmp	r0, r2
 8006c8e:	d00e      	beq.n	8006cae <TIM_Base_SetConfig+0x26>
 8006c90:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006c94:	d00b      	beq.n	8006cae <TIM_Base_SetConfig+0x26>
 8006c96:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006c9a:	4290      	cmp	r0, r2
 8006c9c:	d007      	beq.n	8006cae <TIM_Base_SetConfig+0x26>
 8006c9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ca2:	4290      	cmp	r0, r2
 8006ca4:	d003      	beq.n	8006cae <TIM_Base_SetConfig+0x26>
 8006ca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006caa:	4290      	cmp	r0, r2
 8006cac:	d103      	bne.n	8006cb6 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006cb2:	684a      	ldr	r2, [r1, #4]
 8006cb4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cb6:	4a1a      	ldr	r2, [pc, #104]	; (8006d20 <TIM_Base_SetConfig+0x98>)
 8006cb8:	4290      	cmp	r0, r2
 8006cba:	d01a      	beq.n	8006cf2 <TIM_Base_SetConfig+0x6a>
 8006cbc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006cc0:	d017      	beq.n	8006cf2 <TIM_Base_SetConfig+0x6a>
 8006cc2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006cc6:	4290      	cmp	r0, r2
 8006cc8:	d013      	beq.n	8006cf2 <TIM_Base_SetConfig+0x6a>
 8006cca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cce:	4290      	cmp	r0, r2
 8006cd0:	d00f      	beq.n	8006cf2 <TIM_Base_SetConfig+0x6a>
 8006cd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cd6:	4290      	cmp	r0, r2
 8006cd8:	d00b      	beq.n	8006cf2 <TIM_Base_SetConfig+0x6a>
 8006cda:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006cde:	4290      	cmp	r0, r2
 8006ce0:	d007      	beq.n	8006cf2 <TIM_Base_SetConfig+0x6a>
 8006ce2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ce6:	4290      	cmp	r0, r2
 8006ce8:	d003      	beq.n	8006cf2 <TIM_Base_SetConfig+0x6a>
 8006cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cee:	4290      	cmp	r0, r2
 8006cf0:	d103      	bne.n	8006cfa <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cf6:	68ca      	ldr	r2, [r1, #12]
 8006cf8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cfe:	694a      	ldr	r2, [r1, #20]
 8006d00:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006d02:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d04:	688b      	ldr	r3, [r1, #8]
 8006d06:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006d08:	680b      	ldr	r3, [r1, #0]
 8006d0a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d0c:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <TIM_Base_SetConfig+0x98>)
 8006d0e:	4298      	cmp	r0, r3
 8006d10:	d002      	beq.n	8006d18 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8006d12:	2301      	movs	r3, #1
 8006d14:	6143      	str	r3, [r0, #20]
}
 8006d16:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8006d18:	690b      	ldr	r3, [r1, #16]
 8006d1a:	6303      	str	r3, [r0, #48]	; 0x30
 8006d1c:	e7f9      	b.n	8006d12 <TIM_Base_SetConfig+0x8a>
 8006d1e:	bf00      	nop
 8006d20:	40010000 	.word	0x40010000

08006d24 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006d24:	b1a8      	cbz	r0, 8006d52 <HAL_TIM_Base_Init+0x2e>
{
 8006d26:	b510      	push	{r4, lr}
 8006d28:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006d2a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006d2e:	b15b      	cbz	r3, 8006d48 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8006d30:	2302      	movs	r3, #2
 8006d32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d36:	1d21      	adds	r1, r4, #4
 8006d38:	6820      	ldr	r0, [r4, #0]
 8006d3a:	f7ff ffa5 	bl	8006c88 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006d44:	2000      	movs	r0, #0
}
 8006d46:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006d48:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006d4c:	f7fc fbfe 	bl	800354c <HAL_TIM_Base_MspInit>
 8006d50:	e7ee      	b.n	8006d30 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006d52:	2001      	movs	r0, #1
}
 8006d54:	4770      	bx	lr

08006d56 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006d56:	b1a8      	cbz	r0, 8006d84 <HAL_TIM_PWM_Init+0x2e>
{
 8006d58:	b510      	push	{r4, lr}
 8006d5a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006d5c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006d60:	b15b      	cbz	r3, 8006d7a <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8006d62:	2302      	movs	r3, #2
 8006d64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d68:	1d21      	adds	r1, r4, #4
 8006d6a:	6820      	ldr	r0, [r4, #0]
 8006d6c:	f7ff ff8c 	bl	8006c88 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006d76:	2000      	movs	r0, #0
}
 8006d78:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006d7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006d7e:	f7fc fb99 	bl	80034b4 <HAL_TIM_PWM_MspInit>
 8006d82:	e7ee      	b.n	8006d62 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8006d84:	2001      	movs	r0, #1
}
 8006d86:	4770      	bx	lr

08006d88 <TIM_OC2_SetConfig>:
{
 8006d88:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d8a:	6a03      	ldr	r3, [r0, #32]
 8006d8c:	f023 0310 	bic.w	r3, r3, #16
 8006d90:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006d92:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006d94:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006d96:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d98:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d9c:	680d      	ldr	r5, [r1, #0]
 8006d9e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006da2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006da6:	688d      	ldr	r5, [r1, #8]
 8006da8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dac:	4d0e      	ldr	r5, [pc, #56]	; (8006de8 <TIM_OC2_SetConfig+0x60>)
 8006dae:	42a8      	cmp	r0, r5
 8006db0:	d009      	beq.n	8006dc6 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db2:	4d0d      	ldr	r5, [pc, #52]	; (8006de8 <TIM_OC2_SetConfig+0x60>)
 8006db4:	42a8      	cmp	r0, r5
 8006db6:	d00e      	beq.n	8006dd6 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8006db8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006dba:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006dbc:	684a      	ldr	r2, [r1, #4]
 8006dbe:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006dc0:	6203      	str	r3, [r0, #32]
}
 8006dc2:	bc30      	pop	{r4, r5}
 8006dc4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dca:	68cd      	ldr	r5, [r1, #12]
 8006dcc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd4:	e7ed      	b.n	8006db2 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dd6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dda:	694d      	ldr	r5, [r1, #20]
 8006ddc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006de0:	698d      	ldr	r5, [r1, #24]
 8006de2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8006de6:	e7e7      	b.n	8006db8 <TIM_OC2_SetConfig+0x30>
 8006de8:	40010000 	.word	0x40010000

08006dec <HAL_TIM_PWM_ConfigChannel>:
{
 8006dec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006dee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d066      	beq.n	8006ec4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8006df6:	460d      	mov	r5, r1
 8006df8:	4604      	mov	r4, r0
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006e00:	2302      	movs	r3, #2
 8006e02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8006e06:	2a0c      	cmp	r2, #12
 8006e08:	d81a      	bhi.n	8006e40 <HAL_TIM_PWM_ConfigChannel+0x54>
 8006e0a:	e8df f002 	tbb	[pc, r2]
 8006e0e:	1907      	.short	0x1907
 8006e10:	19201919 	.word	0x19201919
 8006e14:	19341919 	.word	0x19341919
 8006e18:	1919      	.short	0x1919
 8006e1a:	47          	.byte	0x47
 8006e1b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e1c:	6800      	ldr	r0, [r0, #0]
 8006e1e:	f7ff fddd 	bl	80069dc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e22:	6822      	ldr	r2, [r4, #0]
 8006e24:	6993      	ldr	r3, [r2, #24]
 8006e26:	f043 0308 	orr.w	r3, r3, #8
 8006e2a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e2c:	6822      	ldr	r2, [r4, #0]
 8006e2e:	6993      	ldr	r3, [r2, #24]
 8006e30:	f023 0304 	bic.w	r3, r3, #4
 8006e34:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e36:	6822      	ldr	r2, [r4, #0]
 8006e38:	6993      	ldr	r3, [r2, #24]
 8006e3a:	6929      	ldr	r1, [r5, #16]
 8006e3c:	430b      	orrs	r3, r1
 8006e3e:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8006e40:	2301      	movs	r3, #1
 8006e42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006e46:	2000      	movs	r0, #0
 8006e48:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006e4c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e4e:	6800      	ldr	r0, [r0, #0]
 8006e50:	f7ff ff9a 	bl	8006d88 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e54:	6822      	ldr	r2, [r4, #0]
 8006e56:	6993      	ldr	r3, [r2, #24]
 8006e58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e5c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e5e:	6822      	ldr	r2, [r4, #0]
 8006e60:	6993      	ldr	r3, [r2, #24]
 8006e62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e66:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e68:	6822      	ldr	r2, [r4, #0]
 8006e6a:	6993      	ldr	r3, [r2, #24]
 8006e6c:	6929      	ldr	r1, [r5, #16]
 8006e6e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006e72:	6193      	str	r3, [r2, #24]
      break;
 8006e74:	e7e4      	b.n	8006e40 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e76:	6800      	ldr	r0, [r0, #0]
 8006e78:	f7ff fdde 	bl	8006a38 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e7c:	6822      	ldr	r2, [r4, #0]
 8006e7e:	69d3      	ldr	r3, [r2, #28]
 8006e80:	f043 0308 	orr.w	r3, r3, #8
 8006e84:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e86:	6822      	ldr	r2, [r4, #0]
 8006e88:	69d3      	ldr	r3, [r2, #28]
 8006e8a:	f023 0304 	bic.w	r3, r3, #4
 8006e8e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e90:	6822      	ldr	r2, [r4, #0]
 8006e92:	69d3      	ldr	r3, [r2, #28]
 8006e94:	6929      	ldr	r1, [r5, #16]
 8006e96:	430b      	orrs	r3, r1
 8006e98:	61d3      	str	r3, [r2, #28]
      break;
 8006e9a:	e7d1      	b.n	8006e40 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e9c:	6800      	ldr	r0, [r0, #0]
 8006e9e:	f7ff fdfd 	bl	8006a9c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ea2:	6822      	ldr	r2, [r4, #0]
 8006ea4:	69d3      	ldr	r3, [r2, #28]
 8006ea6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006eaa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006eac:	6822      	ldr	r2, [r4, #0]
 8006eae:	69d3      	ldr	r3, [r2, #28]
 8006eb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eb4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006eb6:	6822      	ldr	r2, [r4, #0]
 8006eb8:	69d3      	ldr	r3, [r2, #28]
 8006eba:	6929      	ldr	r1, [r5, #16]
 8006ebc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006ec0:	61d3      	str	r3, [r2, #28]
      break;
 8006ec2:	e7bd      	b.n	8006e40 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8006ec4:	2002      	movs	r0, #2
 8006ec6:	e7c1      	b.n	8006e4c <HAL_TIM_PWM_ConfigChannel+0x60>

08006ec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ec8:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006eca:	f001 011f 	and.w	r1, r1, #31
 8006ece:	2301      	movs	r3, #1
 8006ed0:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ed4:	6a03      	ldr	r3, [r0, #32]
 8006ed6:	ea23 0304 	bic.w	r3, r3, r4
 8006eda:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006edc:	6a03      	ldr	r3, [r0, #32]
 8006ede:	408a      	lsls	r2, r1
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	6203      	str	r3, [r0, #32]
}
 8006ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ee8:	4770      	bx	lr
	...

08006eec <HAL_TIM_PWM_Start>:
{
 8006eec:	b510      	push	{r4, lr}
 8006eee:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	6800      	ldr	r0, [r0, #0]
 8006ef4:	f7ff ffe8 	bl	8006ec8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	4a0a      	ldr	r2, [pc, #40]	; (8006f24 <HAL_TIM_PWM_Start+0x38>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00b      	beq.n	8006f18 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f00:	6822      	ldr	r2, [r4, #0]
 8006f02:	6893      	ldr	r3, [r2, #8]
 8006f04:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f08:	2b06      	cmp	r3, #6
 8006f0a:	d003      	beq.n	8006f14 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8006f0c:	6813      	ldr	r3, [r2, #0]
 8006f0e:	f043 0301 	orr.w	r3, r3, #1
 8006f12:	6013      	str	r3, [r2, #0]
}
 8006f14:	2000      	movs	r0, #0
 8006f16:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8006f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f1e:	645a      	str	r2, [r3, #68]	; 0x44
 8006f20:	e7ee      	b.n	8006f00 <HAL_TIM_PWM_Start+0x14>
 8006f22:	bf00      	nop
 8006f24:	40010000 	.word	0x40010000

08006f28 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d033      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8006f30:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8006f32:	2301      	movs	r3, #1
 8006f34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f38:	2302      	movs	r3, #2
 8006f3a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f3e:	6803      	ldr	r3, [r0, #0]
 8006f40:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f42:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f44:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f48:	680a      	ldr	r2, [r1, #0]
 8006f4a:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f4e:	6803      	ldr	r3, [r0, #0]
 8006f50:	4a12      	ldr	r2, [pc, #72]	; (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d012      	beq.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5a:	d00f      	beq.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006f5c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00b      	beq.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006f64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d007      	beq.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006f6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006f74:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d104      	bne.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f7c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f80:	684a      	ldr	r2, [r1, #4]
 8006f82:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f84:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f86:	2301      	movs	r3, #1
 8006f88:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006f92:	4618      	mov	r0, r3
}
 8006f94:	bc30      	pop	{r4, r5}
 8006f96:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006f98:	2002      	movs	r0, #2
}
 8006f9a:	4770      	bx	lr
 8006f9c:	40010000 	.word	0x40010000

08006fa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fa0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d022      	beq.n	8006fee <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fae:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fb4:	688a      	ldr	r2, [r1, #8]
 8006fb6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fbc:	684a      	ldr	r2, [r1, #4]
 8006fbe:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fc4:	680a      	ldr	r2, [r1, #0]
 8006fc6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fcc:	690a      	ldr	r2, [r1, #16]
 8006fce:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fd4:	694a      	ldr	r2, [r1, #20]
 8006fd6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fdc:	69ca      	ldr	r2, [r1, #28]
 8006fde:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fe0:	6802      	ldr	r2, [r0, #0]
 8006fe2:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006fea:	4618      	mov	r0, r3
 8006fec:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006fee:	2002      	movs	r0, #2
}
 8006ff0:	4770      	bx	lr

08006ff2 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ff4:	4770      	bx	lr

08006ff6 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ff6:	6802      	ldr	r2, [r0, #0]
 8006ff8:	68d3      	ldr	r3, [r2, #12]
 8006ffa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006ffe:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007000:	2320      	movs	r3, #32
 8007002:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8007006:	4770      	bx	lr

08007008 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007008:	6802      	ldr	r2, [r0, #0]
 800700a:	68d3      	ldr	r3, [r2, #12]
 800700c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007010:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007012:	6802      	ldr	r2, [r0, #0]
 8007014:	6953      	ldr	r3, [r2, #20]
 8007016:	f023 0301 	bic.w	r3, r3, #1
 800701a:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800701c:	2320      	movs	r3, #32
 800701e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8007022:	4770      	bx	lr

08007024 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007024:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b21      	cmp	r3, #33	; 0x21
 800702c:	d12a      	bne.n	8007084 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800702e:	6883      	ldr	r3, [r0, #8]
 8007030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007034:	d016      	beq.n	8007064 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007036:	6a03      	ldr	r3, [r0, #32]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	6202      	str	r2, [r0, #32]
 800703c:	781a      	ldrb	r2, [r3, #0]
 800703e:	6803      	ldr	r3, [r0, #0]
 8007040:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007042:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8007044:	3b01      	subs	r3, #1
 8007046:	b29b      	uxth	r3, r3
 8007048:	84c3      	strh	r3, [r0, #38]	; 0x26
 800704a:	b9eb      	cbnz	r3, 8007088 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800704c:	6802      	ldr	r2, [r0, #0]
 800704e:	68d3      	ldr	r3, [r2, #12]
 8007050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007054:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007056:	6802      	ldr	r2, [r0, #0]
 8007058:	68d3      	ldr	r3, [r2, #12]
 800705a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800705e:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8007060:	2000      	movs	r0, #0
 8007062:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007064:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	6802      	ldr	r2, [r0, #0]
 800706a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706e:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007070:	6903      	ldr	r3, [r0, #16]
 8007072:	b91b      	cbnz	r3, 800707c <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8007074:	6a03      	ldr	r3, [r0, #32]
 8007076:	3302      	adds	r3, #2
 8007078:	6203      	str	r3, [r0, #32]
 800707a:	e7e2      	b.n	8007042 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 800707c:	6a03      	ldr	r3, [r0, #32]
 800707e:	3301      	adds	r3, #1
 8007080:	6203      	str	r3, [r0, #32]
 8007082:	e7de      	b.n	8007042 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8007084:	2002      	movs	r0, #2
 8007086:	4770      	bx	lr
    return HAL_OK;
 8007088:	2000      	movs	r0, #0
  }
}
 800708a:	4770      	bx	lr

0800708c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800708c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8007090:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007092:	6802      	ldr	r2, [r0, #0]
 8007094:	6913      	ldr	r3, [r2, #16]
 8007096:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800709a:	68c1      	ldr	r1, [r0, #12]
 800709c:	430b      	orrs	r3, r1
 800709e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070a0:	6883      	ldr	r3, [r0, #8]
 80070a2:	6902      	ldr	r2, [r0, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	6942      	ldr	r2, [r0, #20]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	69c2      	ldr	r2, [r0, #28]
 80070ac:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80070ae:	6801      	ldr	r1, [r0, #0]
 80070b0:	68cb      	ldr	r3, [r1, #12]
 80070b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80070b6:	f023 030c 	bic.w	r3, r3, #12
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070be:	6802      	ldr	r2, [r0, #0]
 80070c0:	6953      	ldr	r3, [r2, #20]
 80070c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c6:	6981      	ldr	r1, [r0, #24]
 80070c8:	430b      	orrs	r3, r1
 80070ca:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070cc:	69c3      	ldr	r3, [r0, #28]
 80070ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070d2:	d03b      	beq.n	800714c <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070d4:	6803      	ldr	r3, [r0, #0]
 80070d6:	4a71      	ldr	r2, [pc, #452]	; (800729c <UART_SetConfig+0x210>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	f000 80ab 	beq.w	8007234 <UART_SetConfig+0x1a8>
 80070de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070e2:	4293      	cmp	r3, r2
 80070e4:	f000 80a6 	beq.w	8007234 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070e8:	f7fe fdee 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070ec:	f04f 0900 	mov.w	r9, #0
 80070f0:	1806      	adds	r6, r0, r0
 80070f2:	eb49 0709 	adc.w	r7, r9, r9
 80070f6:	eb16 0b00 	adds.w	fp, r6, r0
 80070fa:	eb47 0c09 	adc.w	ip, r7, r9
 80070fe:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8007102:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8007106:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800710a:	4693      	mov	fp, r2
 800710c:	469c      	mov	ip, r3
 800710e:	6863      	ldr	r3, [r4, #4]
 8007110:	009a      	lsls	r2, r3, #2
 8007112:	0f9b      	lsrs	r3, r3, #30
 8007114:	eb10 000b 	adds.w	r0, r0, fp
 8007118:	eb49 010c 	adc.w	r1, r9, ip
 800711c:	f7f9 fcee 	bl	8000afc <__aeabi_uldivmod>
 8007120:	4d5f      	ldr	r5, [pc, #380]	; (80072a0 <UART_SetConfig+0x214>)
 8007122:	fba5 3200 	umull	r3, r2, r5, r0
 8007126:	0951      	lsrs	r1, r2, #5
 8007128:	2264      	movs	r2, #100	; 0x64
 800712a:	fb02 0211 	mls	r2, r2, r1, r0
 800712e:	0113      	lsls	r3, r2, #4
 8007130:	3332      	adds	r3, #50	; 0x32
 8007132:	fba5 2303 	umull	r2, r3, r5, r3
 8007136:	095b      	lsrs	r3, r3, #5
 8007138:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800713c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007140:	f003 030f 	and.w	r3, r3, #15
 8007144:	6821      	ldr	r1, [r4, #0]
 8007146:	4413      	add	r3, r2
 8007148:	608b      	str	r3, [r1, #8]
    }
  }
}
 800714a:	e0a4      	b.n	8007296 <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800714c:	6803      	ldr	r3, [r0, #0]
 800714e:	4a53      	ldr	r2, [pc, #332]	; (800729c <UART_SetConfig+0x210>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d039      	beq.n	80071c8 <UART_SetConfig+0x13c>
 8007154:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007158:	4293      	cmp	r3, r2
 800715a:	d035      	beq.n	80071c8 <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800715c:	f7fe fdb4 	bl	8005cc8 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007160:	4683      	mov	fp, r0
 8007162:	f04f 0c00 	mov.w	ip, #0
 8007166:	1806      	adds	r6, r0, r0
 8007168:	eb4c 070c 	adc.w	r7, ip, ip
 800716c:	eb16 0800 	adds.w	r8, r6, r0
 8007170:	eb47 090c 	adc.w	r9, r7, ip
 8007174:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007178:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800717c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007180:	4690      	mov	r8, r2
 8007182:	4699      	mov	r9, r3
 8007184:	6862      	ldr	r2, [r4, #4]
 8007186:	2100      	movs	r1, #0
 8007188:	1892      	adds	r2, r2, r2
 800718a:	eb41 0301 	adc.w	r3, r1, r1
 800718e:	eb1b 0008 	adds.w	r0, fp, r8
 8007192:	eb4c 0109 	adc.w	r1, ip, r9
 8007196:	f7f9 fcb1 	bl	8000afc <__aeabi_uldivmod>
 800719a:	4d41      	ldr	r5, [pc, #260]	; (80072a0 <UART_SetConfig+0x214>)
 800719c:	fba5 3200 	umull	r3, r2, r5, r0
 80071a0:	0951      	lsrs	r1, r2, #5
 80071a2:	2264      	movs	r2, #100	; 0x64
 80071a4:	fb02 0211 	mls	r2, r2, r1, r0
 80071a8:	00d3      	lsls	r3, r2, #3
 80071aa:	3332      	adds	r3, #50	; 0x32
 80071ac:	fba5 2303 	umull	r2, r3, r5, r3
 80071b0:	095b      	lsrs	r3, r3, #5
 80071b2:	005a      	lsls	r2, r3, #1
 80071b4:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80071b8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	6821      	ldr	r1, [r4, #0]
 80071c2:	4413      	add	r3, r2
 80071c4:	608b      	str	r3, [r1, #8]
 80071c6:	e066      	b.n	8007296 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 80071c8:	f7fe fd8e 	bl	8005ce8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071cc:	4680      	mov	r8, r0
 80071ce:	f04f 0900 	mov.w	r9, #0
 80071d2:	1806      	adds	r6, r0, r0
 80071d4:	eb49 0709 	adc.w	r7, r9, r9
 80071d8:	eb16 0b00 	adds.w	fp, r6, r0
 80071dc:	eb47 0c09 	adc.w	ip, r7, r9
 80071e0:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80071e4:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80071e8:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 80071ec:	4693      	mov	fp, r2
 80071ee:	469c      	mov	ip, r3
 80071f0:	6862      	ldr	r2, [r4, #4]
 80071f2:	2100      	movs	r1, #0
 80071f4:	1892      	adds	r2, r2, r2
 80071f6:	eb41 0301 	adc.w	r3, r1, r1
 80071fa:	eb18 000b 	adds.w	r0, r8, fp
 80071fe:	eb49 010c 	adc.w	r1, r9, ip
 8007202:	f7f9 fc7b 	bl	8000afc <__aeabi_uldivmod>
 8007206:	4d26      	ldr	r5, [pc, #152]	; (80072a0 <UART_SetConfig+0x214>)
 8007208:	fba5 3200 	umull	r3, r2, r5, r0
 800720c:	0951      	lsrs	r1, r2, #5
 800720e:	2264      	movs	r2, #100	; 0x64
 8007210:	fb02 0211 	mls	r2, r2, r1, r0
 8007214:	00d3      	lsls	r3, r2, #3
 8007216:	3332      	adds	r3, #50	; 0x32
 8007218:	fba5 2303 	umull	r2, r3, r5, r3
 800721c:	095b      	lsrs	r3, r3, #5
 800721e:	005a      	lsls	r2, r3, #1
 8007220:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8007224:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007228:	f003 0307 	and.w	r3, r3, #7
 800722c:	6821      	ldr	r1, [r4, #0]
 800722e:	4413      	add	r3, r2
 8007230:	608b      	str	r3, [r1, #8]
 8007232:	e030      	b.n	8007296 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007234:	f7fe fd58 	bl	8005ce8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007238:	f04f 0900 	mov.w	r9, #0
 800723c:	1806      	adds	r6, r0, r0
 800723e:	eb49 0709 	adc.w	r7, r9, r9
 8007242:	eb16 0b00 	adds.w	fp, r6, r0
 8007246:	eb47 0c09 	adc.w	ip, r7, r9
 800724a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800724e:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8007252:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8007256:	4693      	mov	fp, r2
 8007258:	469c      	mov	ip, r3
 800725a:	6863      	ldr	r3, [r4, #4]
 800725c:	009a      	lsls	r2, r3, #2
 800725e:	0f9b      	lsrs	r3, r3, #30
 8007260:	eb10 000b 	adds.w	r0, r0, fp
 8007264:	eb49 010c 	adc.w	r1, r9, ip
 8007268:	f7f9 fc48 	bl	8000afc <__aeabi_uldivmod>
 800726c:	4d0c      	ldr	r5, [pc, #48]	; (80072a0 <UART_SetConfig+0x214>)
 800726e:	fba5 3200 	umull	r3, r2, r5, r0
 8007272:	0951      	lsrs	r1, r2, #5
 8007274:	2264      	movs	r2, #100	; 0x64
 8007276:	fb02 0211 	mls	r2, r2, r1, r0
 800727a:	0113      	lsls	r3, r2, #4
 800727c:	3332      	adds	r3, #50	; 0x32
 800727e:	fba5 2303 	umull	r2, r3, r5, r3
 8007282:	095b      	lsrs	r3, r3, #5
 8007284:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007288:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800728c:	f003 030f 	and.w	r3, r3, #15
 8007290:	6821      	ldr	r1, [r4, #0]
 8007292:	4413      	add	r3, r2
 8007294:	608b      	str	r3, [r1, #8]
}
 8007296:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 800729a:	bf00      	nop
 800729c:	40011000 	.word	0x40011000
 80072a0:	51eb851f 	.word	0x51eb851f

080072a4 <UART_WaitOnFlagUntilTimeout>:
{
 80072a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a8:	4605      	mov	r5, r0
 80072aa:	460f      	mov	r7, r1
 80072ac:	4616      	mov	r6, r2
 80072ae:	4698      	mov	r8, r3
 80072b0:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b2:	682b      	ldr	r3, [r5, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	ea37 0303 	bics.w	r3, r7, r3
 80072ba:	bf0c      	ite	eq
 80072bc:	2301      	moveq	r3, #1
 80072be:	2300      	movne	r3, #0
 80072c0:	42b3      	cmp	r3, r6
 80072c2:	d11d      	bne.n	8007300 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80072c4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80072c8:	d0f3      	beq.n	80072b2 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80072ca:	b12c      	cbz	r4, 80072d8 <UART_WaitOnFlagUntilTimeout+0x34>
 80072cc:	f7fc ff5e 	bl	800418c <HAL_GetTick>
 80072d0:	eba0 0008 	sub.w	r0, r0, r8
 80072d4:	42a0      	cmp	r0, r4
 80072d6:	d9ec      	bls.n	80072b2 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072d8:	682a      	ldr	r2, [r5, #0]
 80072da:	68d3      	ldr	r3, [r2, #12]
 80072dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072e0:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e2:	682a      	ldr	r2, [r5, #0]
 80072e4:	6953      	ldr	r3, [r2, #20]
 80072e6:	f023 0301 	bic.w	r3, r3, #1
 80072ea:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80072ec:	2320      	movs	r3, #32
 80072ee:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80072f2:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80072f6:	2300      	movs	r3, #0
 80072f8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80072fc:	2003      	movs	r0, #3
 80072fe:	e000      	b.n	8007302 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8007300:	2000      	movs	r0, #0
}
 8007302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007306 <HAL_UART_Init>:
  if (huart == NULL)
 8007306:	b358      	cbz	r0, 8007360 <HAL_UART_Init+0x5a>
{
 8007308:	b510      	push	{r4, lr}
 800730a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800730c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007310:	b30b      	cbz	r3, 8007356 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007312:	2324      	movs	r3, #36	; 0x24
 8007314:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8007318:	6822      	ldr	r2, [r4, #0]
 800731a:	68d3      	ldr	r3, [r2, #12]
 800731c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007320:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8007322:	4620      	mov	r0, r4
 8007324:	f7ff feb2 	bl	800708c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007328:	6822      	ldr	r2, [r4, #0]
 800732a:	6913      	ldr	r3, [r2, #16]
 800732c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007330:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007332:	6822      	ldr	r2, [r4, #0]
 8007334:	6953      	ldr	r3, [r2, #20]
 8007336:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800733a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800733c:	6822      	ldr	r2, [r4, #0]
 800733e:	68d3      	ldr	r3, [r2, #12]
 8007340:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007344:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007346:	2000      	movs	r0, #0
 8007348:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800734a:	2320      	movs	r3, #32
 800734c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007350:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8007354:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007356:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800735a:	f7fc f98f 	bl	800367c <HAL_UART_MspInit>
 800735e:	e7d8      	b.n	8007312 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8007360:	2001      	movs	r0, #1
}
 8007362:	4770      	bx	lr

08007364 <HAL_UART_Transmit>:
{
 8007364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007368:	b083      	sub	sp, #12
 800736a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800736c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b20      	cmp	r3, #32
 8007374:	d156      	bne.n	8007424 <HAL_UART_Transmit+0xc0>
 8007376:	4604      	mov	r4, r0
 8007378:	460d      	mov	r5, r1
 800737a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800737c:	2900      	cmp	r1, #0
 800737e:	d056      	beq.n	800742e <HAL_UART_Transmit+0xca>
 8007380:	2a00      	cmp	r2, #0
 8007382:	d056      	beq.n	8007432 <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 8007384:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007388:	2b01      	cmp	r3, #1
 800738a:	d054      	beq.n	8007436 <HAL_UART_Transmit+0xd2>
 800738c:	2301      	movs	r3, #1
 800738e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007392:	f04f 0900 	mov.w	r9, #0
 8007396:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800739a:	2321      	movs	r3, #33	; 0x21
 800739c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80073a0:	f7fc fef4 	bl	800418c <HAL_GetTick>
 80073a4:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80073a6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80073aa:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80073ae:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80073b2:	e010      	b.n	80073d6 <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073b4:	9600      	str	r6, [sp, #0]
 80073b6:	463b      	mov	r3, r7
 80073b8:	2200      	movs	r2, #0
 80073ba:	2180      	movs	r1, #128	; 0x80
 80073bc:	4620      	mov	r0, r4
 80073be:	f7ff ff71 	bl	80072a4 <UART_WaitOnFlagUntilTimeout>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d139      	bne.n	800743a <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80073c6:	882b      	ldrh	r3, [r5, #0]
 80073c8:	6822      	ldr	r2, [r4, #0]
 80073ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ce:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80073d0:	6923      	ldr	r3, [r4, #16]
 80073d2:	b9c3      	cbnz	r3, 8007406 <HAL_UART_Transmit+0xa2>
          pData += 2U;
 80073d4:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 80073d6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80073d8:	b29b      	uxth	r3, r3
 80073da:	b1b3      	cbz	r3, 800740a <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 80073dc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80073e4:	68a3      	ldr	r3, [r4, #8]
 80073e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ea:	d0e3      	beq.n	80073b4 <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073ec:	9600      	str	r6, [sp, #0]
 80073ee:	463b      	mov	r3, r7
 80073f0:	2200      	movs	r2, #0
 80073f2:	2180      	movs	r1, #128	; 0x80
 80073f4:	4620      	mov	r0, r4
 80073f6:	f7ff ff55 	bl	80072a4 <UART_WaitOnFlagUntilTimeout>
 80073fa:	bb00      	cbnz	r0, 800743e <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80073fc:	782a      	ldrb	r2, [r5, #0]
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	605a      	str	r2, [r3, #4]
 8007402:	3501      	adds	r5, #1
 8007404:	e7e7      	b.n	80073d6 <HAL_UART_Transmit+0x72>
          pData += 1U;
 8007406:	3501      	adds	r5, #1
 8007408:	e7e5      	b.n	80073d6 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800740a:	9600      	str	r6, [sp, #0]
 800740c:	463b      	mov	r3, r7
 800740e:	2200      	movs	r2, #0
 8007410:	2140      	movs	r1, #64	; 0x40
 8007412:	4620      	mov	r0, r4
 8007414:	f7ff ff46 	bl	80072a4 <UART_WaitOnFlagUntilTimeout>
 8007418:	4603      	mov	r3, r0
 800741a:	b990      	cbnz	r0, 8007442 <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 800741c:	2220      	movs	r2, #32
 800741e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    return HAL_OK;
 8007422:	e000      	b.n	8007426 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8007424:	2302      	movs	r3, #2
}
 8007426:	4618      	mov	r0, r3
 8007428:	b003      	add	sp, #12
 800742a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e7f9      	b.n	8007426 <HAL_UART_Transmit+0xc2>
 8007432:	2301      	movs	r3, #1
 8007434:	e7f7      	b.n	8007426 <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 8007436:	2302      	movs	r3, #2
 8007438:	e7f5      	b.n	8007426 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e7f3      	b.n	8007426 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e7f1      	b.n	8007426 <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e7ef      	b.n	8007426 <HAL_UART_Transmit+0xc2>

08007446 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8007446:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b20      	cmp	r3, #32
 800744e:	d116      	bne.n	800747e <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 8007450:	b1b9      	cbz	r1, 8007482 <HAL_UART_Transmit_IT+0x3c>
 8007452:	b1c2      	cbz	r2, 8007486 <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8007454:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007458:	2b01      	cmp	r3, #1
 800745a:	d016      	beq.n	800748a <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 800745c:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800745e:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8007460:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007462:	2300      	movs	r3, #0
 8007464:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007466:	2221      	movs	r2, #33	; 0x21
 8007468:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800746c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007470:	6801      	ldr	r1, [r0, #0]
 8007472:	68ca      	ldr	r2, [r1, #12]
 8007474:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007478:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800747a:	4618      	mov	r0, r3
 800747c:	4770      	bx	lr
    return HAL_BUSY;
 800747e:	2002      	movs	r0, #2
 8007480:	4770      	bx	lr
      return HAL_ERROR;
 8007482:	2001      	movs	r0, #1
 8007484:	4770      	bx	lr
 8007486:	2001      	movs	r0, #1
 8007488:	4770      	bx	lr
    __HAL_LOCK(huart);
 800748a:	2002      	movs	r0, #2
}
 800748c:	4770      	bx	lr
	...

08007490 <HAL_UART_Receive_DMA>:
{
 8007490:	b530      	push	{r4, r5, lr}
 8007492:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8007494:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8007498:	b2e4      	uxtb	r4, r4
 800749a:	2c20      	cmp	r4, #32
 800749c:	d13d      	bne.n	800751a <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 800749e:	2900      	cmp	r1, #0
 80074a0:	d03e      	beq.n	8007520 <HAL_UART_Receive_DMA+0x90>
 80074a2:	2a00      	cmp	r2, #0
 80074a4:	d03e      	beq.n	8007524 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 80074a6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d03c      	beq.n	8007528 <HAL_UART_Receive_DMA+0x98>
 80074ae:	4613      	mov	r3, r2
 80074b0:	460a      	mov	r2, r1
 80074b2:	4604      	mov	r4, r0
 80074b4:	2101      	movs	r1, #1
 80074b6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 80074ba:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80074bc:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074be:	2500      	movs	r5, #0
 80074c0:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074c2:	2122      	movs	r1, #34	; 0x22
 80074c4:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80074c8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80074ca:	4818      	ldr	r0, [pc, #96]	; (800752c <HAL_UART_Receive_DMA+0x9c>)
 80074cc:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80074ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074d0:	4817      	ldr	r0, [pc, #92]	; (8007530 <HAL_UART_Receive_DMA+0xa0>)
 80074d2:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80074d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074d6:	4817      	ldr	r0, [pc, #92]	; (8007534 <HAL_UART_Receive_DMA+0xa4>)
 80074d8:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 80074da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074dc:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80074de:	6821      	ldr	r1, [r4, #0]
 80074e0:	3104      	adds	r1, #4
 80074e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80074e4:	f7fd f944 	bl	8004770 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80074e8:	9501      	str	r5, [sp, #4]
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	9201      	str	r2, [sp, #4]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	9201      	str	r2, [sp, #4]
 80074f4:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 80074f6:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074fa:	68da      	ldr	r2, [r3, #12]
 80074fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007500:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007502:	6822      	ldr	r2, [r4, #0]
 8007504:	6953      	ldr	r3, [r2, #20]
 8007506:	f043 0301 	orr.w	r3, r3, #1
 800750a:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800750c:	6822      	ldr	r2, [r4, #0]
 800750e:	6953      	ldr	r3, [r2, #20]
 8007510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007514:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8007516:	4628      	mov	r0, r5
 8007518:	e000      	b.n	800751c <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 800751a:	2002      	movs	r0, #2
}
 800751c:	b003      	add	sp, #12
 800751e:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8007520:	2001      	movs	r0, #1
 8007522:	e7fb      	b.n	800751c <HAL_UART_Receive_DMA+0x8c>
 8007524:	2001      	movs	r0, #1
 8007526:	e7f9      	b.n	800751c <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 8007528:	2002      	movs	r0, #2
 800752a:	e7f7      	b.n	800751c <HAL_UART_Receive_DMA+0x8c>
 800752c:	080075a1 	.word	0x080075a1
 8007530:	0800767d 	.word	0x0800767d
 8007534:	08007689 	.word	0x08007689

08007538 <HAL_UART_AbortTransmit>:
{
 8007538:	b510      	push	{r4, lr}
 800753a:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800753c:	6802      	ldr	r2, [r0, #0]
 800753e:	68d3      	ldr	r3, [r2, #12]
 8007540:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007544:	60d3      	str	r3, [r2, #12]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007546:	6803      	ldr	r3, [r0, #0]
 8007548:	695a      	ldr	r2, [r3, #20]
 800754a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800754e:	d00b      	beq.n	8007568 <HAL_UART_AbortTransmit+0x30>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007550:	695a      	ldr	r2, [r3, #20]
 8007552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007556:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 8007558:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800755a:	b12b      	cbz	r3, 8007568 <HAL_UART_AbortTransmit+0x30>
      huart->hdmatx->XferAbortCallback = NULL;
 800755c:	2200      	movs	r2, #0
 800755e:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007560:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007562:	f7fd f93a 	bl	80047da <HAL_DMA_Abort>
 8007566:	b928      	cbnz	r0, 8007574 <HAL_UART_AbortTransmit+0x3c>
  huart->TxXferCount = 0x00U;
 8007568:	2000      	movs	r0, #0
 800756a:	84e0      	strh	r0, [r4, #38]	; 0x26
  huart->gState = HAL_UART_STATE_READY;
 800756c:	2320      	movs	r3, #32
 800756e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8007572:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007574:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007576:	f7fd fa7b 	bl	8004a70 <HAL_DMA_GetError>
 800757a:	2820      	cmp	r0, #32
 800757c:	d1f4      	bne.n	8007568 <HAL_UART_AbortTransmit+0x30>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800757e:	2310      	movs	r3, #16
 8007580:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8007582:	2003      	movs	r0, #3
 8007584:	e7f5      	b.n	8007572 <HAL_UART_AbortTransmit+0x3a>

08007586 <UART_EndTransmit_IT>:
{
 8007586:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007588:	6801      	ldr	r1, [r0, #0]
 800758a:	68cb      	ldr	r3, [r1, #12]
 800758c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007590:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007592:	2320      	movs	r3, #32
 8007594:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8007598:	f7fb fe86 	bl	80032a8 <HAL_UART_TxCpltCallback>
}
 800759c:	2000      	movs	r0, #0
 800759e:	bd08      	pop	{r3, pc}

080075a0 <UART_DMAReceiveCplt>:
{
 80075a0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80075a4:	6802      	ldr	r2, [r0, #0]
 80075a6:	6812      	ldr	r2, [r2, #0]
 80075a8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80075ac:	d113      	bne.n	80075d6 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 80075ae:	2200      	movs	r2, #0
 80075b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075b2:	6819      	ldr	r1, [r3, #0]
 80075b4:	68ca      	ldr	r2, [r1, #12]
 80075b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075ba:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075bc:	6819      	ldr	r1, [r3, #0]
 80075be:	694a      	ldr	r2, [r1, #20]
 80075c0:	f022 0201 	bic.w	r2, r2, #1
 80075c4:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075c6:	6819      	ldr	r1, [r3, #0]
 80075c8:	694a      	ldr	r2, [r1, #20]
 80075ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ce:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80075d0:	2220      	movs	r2, #32
 80075d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fb fe64 	bl	80032a4 <HAL_UART_RxCpltCallback>
}
 80075dc:	bd08      	pop	{r3, pc}

080075de <UART_Receive_IT>:
{
 80075de:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075e0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b22      	cmp	r3, #34	; 0x22
 80075e8:	d145      	bne.n	8007676 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80075ea:	6883      	ldr	r3, [r0, #8]
 80075ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f0:	d00e      	beq.n	8007610 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80075f2:	6903      	ldr	r3, [r0, #16]
 80075f4:	bb03      	cbnz	r3, 8007638 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075f6:	6803      	ldr	r3, [r0, #0]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80075fc:	1c59      	adds	r1, r3, #1
 80075fe:	6281      	str	r1, [r0, #40]	; 0x28
 8007600:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8007602:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8007604:	3b01      	subs	r3, #1
 8007606:	b29b      	uxth	r3, r3
 8007608:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800760a:	b1f3      	cbz	r3, 800764a <UART_Receive_IT+0x6c>
    return HAL_OK;
 800760c:	2000      	movs	r0, #0
 800760e:	e033      	b.n	8007678 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007610:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007612:	6903      	ldr	r3, [r0, #16]
 8007614:	b943      	cbnz	r3, 8007628 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007616:	6803      	ldr	r3, [r0, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761e:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8007620:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007622:	3302      	adds	r3, #2
 8007624:	6283      	str	r3, [r0, #40]	; 0x28
 8007626:	e7ec      	b.n	8007602 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007628:	6803      	ldr	r3, [r0, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8007630:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007632:	3301      	adds	r3, #1
 8007634:	6283      	str	r3, [r0, #40]	; 0x28
 8007636:	e7e4      	b.n	8007602 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007638:	6803      	ldr	r3, [r0, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800763e:	1c51      	adds	r1, r2, #1
 8007640:	6281      	str	r1, [r0, #40]	; 0x28
 8007642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007646:	7013      	strb	r3, [r2, #0]
 8007648:	e7db      	b.n	8007602 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800764a:	6802      	ldr	r2, [r0, #0]
 800764c:	68d3      	ldr	r3, [r2, #12]
 800764e:	f023 0320 	bic.w	r3, r3, #32
 8007652:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007654:	6802      	ldr	r2, [r0, #0]
 8007656:	68d3      	ldr	r3, [r2, #12]
 8007658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800765c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800765e:	6802      	ldr	r2, [r0, #0]
 8007660:	6953      	ldr	r3, [r2, #20]
 8007662:	f023 0301 	bic.w	r3, r3, #1
 8007666:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007668:	2320      	movs	r3, #32
 800766a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800766e:	f7fb fe19 	bl	80032a4 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8007672:	2000      	movs	r0, #0
 8007674:	e000      	b.n	8007678 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8007676:	2002      	movs	r0, #2
}
 8007678:	bd08      	pop	{r3, pc}

0800767a <HAL_UART_RxHalfCpltCallback>:
}
 800767a:	4770      	bx	lr

0800767c <UART_DMARxHalfCplt>:
{
 800767c:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800767e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007680:	f7ff fffb 	bl	800767a <HAL_UART_RxHalfCpltCallback>
}
 8007684:	bd08      	pop	{r3, pc}

08007686 <HAL_UART_ErrorCallback>:
}
 8007686:	4770      	bx	lr

08007688 <UART_DMAError>:
{
 8007688:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800768a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007690:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b21      	cmp	r3, #33	; 0x21
 8007698:	d010      	beq.n	80076bc <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	695a      	ldr	r2, [r3, #20]
 800769e:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076a2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b22      	cmp	r3, #34	; 0x22
 80076aa:	d011      	beq.n	80076d0 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80076ae:	f043 0310 	orr.w	r3, r3, #16
 80076b2:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80076b4:	4620      	mov	r0, r4
 80076b6:	f7ff ffe6 	bl	8007686 <HAL_UART_ErrorCallback>
}
 80076ba:	bd10      	pop	{r4, pc}
 80076bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80076c0:	2a00      	cmp	r2, #0
 80076c2:	d0ea      	beq.n	800769a <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80076c8:	4620      	mov	r0, r4
 80076ca:	f7ff fc94 	bl	8006ff6 <UART_EndTxTransfer>
 80076ce:	e7e4      	b.n	800769a <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076d0:	2a00      	cmp	r2, #0
 80076d2:	d0eb      	beq.n	80076ac <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80076d8:	4620      	mov	r0, r4
 80076da:	f7ff fc95 	bl	8007008 <UART_EndRxTransfer>
 80076de:	e7e5      	b.n	80076ac <UART_DMAError+0x24>

080076e0 <HAL_UART_IRQHandler>:
{
 80076e0:	b510      	push	{r4, lr}
 80076e2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076e4:	6802      	ldr	r2, [r0, #0]
 80076e6:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076e8:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076ea:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 80076ec:	f013 000f 	ands.w	r0, r3, #15
 80076f0:	d105      	bne.n	80076fe <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076f2:	f013 0f20 	tst.w	r3, #32
 80076f6:	d002      	beq.n	80076fe <HAL_UART_IRQHandler+0x1e>
 80076f8:	f011 0f20 	tst.w	r1, #32
 80076fc:	d156      	bne.n	80077ac <HAL_UART_IRQHandler+0xcc>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80076fe:	2800      	cmp	r0, #0
 8007700:	d06a      	beq.n	80077d8 <HAL_UART_IRQHandler+0xf8>
 8007702:	f012 0201 	ands.w	r2, r2, #1
 8007706:	d102      	bne.n	800770e <HAL_UART_IRQHandler+0x2e>
 8007708:	f411 7f90 	tst.w	r1, #288	; 0x120
 800770c:	d064      	beq.n	80077d8 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800770e:	f013 0f01 	tst.w	r3, #1
 8007712:	d006      	beq.n	8007722 <HAL_UART_IRQHandler+0x42>
 8007714:	f411 7f80 	tst.w	r1, #256	; 0x100
 8007718:	d003      	beq.n	8007722 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800771a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800771c:	f040 0001 	orr.w	r0, r0, #1
 8007720:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007722:	f013 0f04 	tst.w	r3, #4
 8007726:	d004      	beq.n	8007732 <HAL_UART_IRQHandler+0x52>
 8007728:	b11a      	cbz	r2, 8007732 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800772a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800772c:	f040 0002 	orr.w	r0, r0, #2
 8007730:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007732:	f013 0f02 	tst.w	r3, #2
 8007736:	d004      	beq.n	8007742 <HAL_UART_IRQHandler+0x62>
 8007738:	b11a      	cbz	r2, 8007742 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800773a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800773c:	f040 0004 	orr.w	r0, r0, #4
 8007740:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007742:	f013 0f08 	tst.w	r3, #8
 8007746:	d007      	beq.n	8007758 <HAL_UART_IRQHandler+0x78>
 8007748:	f011 0f20 	tst.w	r1, #32
 800774c:	d100      	bne.n	8007750 <HAL_UART_IRQHandler+0x70>
 800774e:	b11a      	cbz	r2, 8007758 <HAL_UART_IRQHandler+0x78>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007750:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007752:	f042 0208 	orr.w	r2, r2, #8
 8007756:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007758:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800775a:	2a00      	cmp	r2, #0
 800775c:	d048      	beq.n	80077f0 <HAL_UART_IRQHandler+0x110>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800775e:	f013 0f20 	tst.w	r3, #32
 8007762:	d002      	beq.n	800776a <HAL_UART_IRQHandler+0x8a>
 8007764:	f011 0f20 	tst.w	r1, #32
 8007768:	d124      	bne.n	80077b4 <HAL_UART_IRQHandler+0xd4>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800776a:	6823      	ldr	r3, [r4, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007772:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007774:	f012 0f08 	tst.w	r2, #8
 8007778:	d100      	bne.n	800777c <HAL_UART_IRQHandler+0x9c>
 800777a:	b33b      	cbz	r3, 80077cc <HAL_UART_IRQHandler+0xec>
        UART_EndRxTransfer(huart);
 800777c:	4620      	mov	r0, r4
 800777e:	f7ff fc43 	bl	8007008 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	695a      	ldr	r2, [r3, #20]
 8007786:	f012 0f40 	tst.w	r2, #64	; 0x40
 800778a:	d01b      	beq.n	80077c4 <HAL_UART_IRQHandler+0xe4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800778c:	695a      	ldr	r2, [r3, #20]
 800778e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007792:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8007794:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007796:	b18b      	cbz	r3, 80077bc <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007798:	4a1a      	ldr	r2, [pc, #104]	; (8007804 <HAL_UART_IRQHandler+0x124>)
 800779a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800779c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800779e:	f7fd f866 	bl	800486e <HAL_DMA_Abort_IT>
 80077a2:	b328      	cbz	r0, 80077f0 <HAL_UART_IRQHandler+0x110>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80077a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80077a8:	4798      	blx	r3
 80077aa:	e021      	b.n	80077f0 <HAL_UART_IRQHandler+0x110>
      UART_Receive_IT(huart);
 80077ac:	4620      	mov	r0, r4
 80077ae:	f7ff ff16 	bl	80075de <UART_Receive_IT>
      return;
 80077b2:	e01d      	b.n	80077f0 <HAL_UART_IRQHandler+0x110>
        UART_Receive_IT(huart);
 80077b4:	4620      	mov	r0, r4
 80077b6:	f7ff ff12 	bl	80075de <UART_Receive_IT>
 80077ba:	e7d6      	b.n	800776a <HAL_UART_IRQHandler+0x8a>
            HAL_UART_ErrorCallback(huart);
 80077bc:	4620      	mov	r0, r4
 80077be:	f7ff ff62 	bl	8007686 <HAL_UART_ErrorCallback>
 80077c2:	e015      	b.n	80077f0 <HAL_UART_IRQHandler+0x110>
          HAL_UART_ErrorCallback(huart);
 80077c4:	4620      	mov	r0, r4
 80077c6:	f7ff ff5e 	bl	8007686 <HAL_UART_ErrorCallback>
 80077ca:	e011      	b.n	80077f0 <HAL_UART_IRQHandler+0x110>
        HAL_UART_ErrorCallback(huart);
 80077cc:	4620      	mov	r0, r4
 80077ce:	f7ff ff5a 	bl	8007686 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d2:	2300      	movs	r3, #0
 80077d4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80077d6:	e00b      	b.n	80077f0 <HAL_UART_IRQHandler+0x110>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80077dc:	d002      	beq.n	80077e4 <HAL_UART_IRQHandler+0x104>
 80077de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80077e2:	d106      	bne.n	80077f2 <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80077e8:	d002      	beq.n	80077f0 <HAL_UART_IRQHandler+0x110>
 80077ea:	f011 0f40 	tst.w	r1, #64	; 0x40
 80077ee:	d104      	bne.n	80077fa <HAL_UART_IRQHandler+0x11a>
}
 80077f0:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 80077f2:	4620      	mov	r0, r4
 80077f4:	f7ff fc16 	bl	8007024 <UART_Transmit_IT>
    return;
 80077f8:	e7fa      	b.n	80077f0 <HAL_UART_IRQHandler+0x110>
    UART_EndTransmit_IT(huart);
 80077fa:	4620      	mov	r0, r4
 80077fc:	f7ff fec3 	bl	8007586 <UART_EndTransmit_IT>
    return;
 8007800:	e7f6      	b.n	80077f0 <HAL_UART_IRQHandler+0x110>
 8007802:	bf00      	nop
 8007804:	08007809 	.word	0x08007809

08007808 <UART_DMAAbortOnError>:
{
 8007808:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800780a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800780c:	2300      	movs	r3, #0
 800780e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007810:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8007812:	f7ff ff38 	bl	8007686 <HAL_UART_ErrorCallback>
}
 8007816:	bd08      	pop	{r3, pc}

08007818 <HAL_UART_AbortReceiveCpltCallback>:
}
 8007818:	4770      	bx	lr
	...

0800781c <HAL_UART_AbortReceive_IT>:
{
 800781c:	b510      	push	{r4, lr}
 800781e:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007820:	6802      	ldr	r2, [r0, #0]
 8007822:	68d3      	ldr	r3, [r2, #12]
 8007824:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007828:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782a:	6802      	ldr	r2, [r0, #0]
 800782c:	6953      	ldr	r3, [r2, #20]
 800782e:	f023 0301 	bic.w	r3, r3, #1
 8007832:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007834:	6803      	ldr	r3, [r0, #0]
 8007836:	695a      	ldr	r2, [r3, #20]
 8007838:	f012 0f40 	tst.w	r2, #64	; 0x40
 800783c:	d018      	beq.n	8007870 <HAL_UART_AbortReceive_IT+0x54>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800783e:	695a      	ldr	r2, [r3, #20]
 8007840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007844:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 8007846:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007848:	b153      	cbz	r3, 8007860 <HAL_UART_AbortReceive_IT+0x44>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800784a:	4a0d      	ldr	r2, [pc, #52]	; (8007880 <HAL_UART_AbortReceive_IT+0x64>)
 800784c:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800784e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007850:	f7fd f80d 	bl	800486e <HAL_DMA_Abort_IT>
 8007854:	b110      	cbz	r0, 800785c <HAL_UART_AbortReceive_IT+0x40>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007856:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007858:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800785a:	4798      	blx	r3
}
 800785c:	2000      	movs	r0, #0
 800785e:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0x00U;
 8007860:	2300      	movs	r3, #0
 8007862:	85c3      	strh	r3, [r0, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 8007864:	2320      	movs	r3, #32
 8007866:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_AbortReceiveCpltCallback(huart);
 800786a:	f7ff ffd5 	bl	8007818 <HAL_UART_AbortReceiveCpltCallback>
 800786e:	e7f5      	b.n	800785c <HAL_UART_AbortReceive_IT+0x40>
    huart->RxXferCount = 0x00U;
 8007870:	2300      	movs	r3, #0
 8007872:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 8007874:	2320      	movs	r3, #32
 8007876:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 800787a:	f7ff ffcd 	bl	8007818 <HAL_UART_AbortReceiveCpltCallback>
 800787e:	e7ed      	b.n	800785c <HAL_UART_AbortReceive_IT+0x40>
 8007880:	08007885 	.word	0x08007885

08007884 <UART_DMARxOnlyAbortCallback>:
{
 8007884:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007886:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8007888:	2300      	movs	r3, #0
 800788a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 800788c:	2320      	movs	r3, #32
 800788e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007892:	f7ff ffc1 	bl	8007818 <HAL_UART_AbortReceiveCpltCallback>
}
 8007896:	bd08      	pop	{r3, pc}

08007898 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8007898:	2884      	cmp	r0, #132	; 0x84
 800789a:	d001      	beq.n	80078a0 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 800789c:	3003      	adds	r0, #3
 800789e:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80078a0:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80078a2:	4770      	bx	lr

080078a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80078a4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80078a6:	f000 ff25 	bl	80086f4 <vTaskStartScheduler>
  
  return osOK;
}
 80078aa:	2000      	movs	r0, #0
 80078ac:	bd08      	pop	{r3, pc}

080078ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80078ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078b2:	b087      	sub	sp, #28
 80078b4:	4604      	mov	r4, r0
 80078b6:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80078b8:	6945      	ldr	r5, [r0, #20]
 80078ba:	b1a5      	cbz	r5, 80078e6 <osThreadCreate+0x38>
 80078bc:	6986      	ldr	r6, [r0, #24]
 80078be:	b196      	cbz	r6, 80078e6 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078c0:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80078c4:	f8d0 9000 	ldr.w	r9, [r0]
 80078c8:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80078cc:	f7ff ffe4 	bl	8007898 <makeFreeRtosPriority>
 80078d0:	6922      	ldr	r2, [r4, #16]
 80078d2:	9602      	str	r6, [sp, #8]
 80078d4:	9501      	str	r5, [sp, #4]
 80078d6:	9000      	str	r0, [sp, #0]
 80078d8:	463b      	mov	r3, r7
 80078da:	4649      	mov	r1, r9
 80078dc:	4640      	mov	r0, r8
 80078de:	f000 fe9b 	bl	8008618 <xTaskCreateStatic>
 80078e2:	9005      	str	r0, [sp, #20]
 80078e4:	e013      	b.n	800790e <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078e6:	6865      	ldr	r5, [r4, #4]
 80078e8:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80078ea:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078ee:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80078f2:	f7ff ffd1 	bl	8007898 <makeFreeRtosPriority>
 80078f6:	ab05      	add	r3, sp, #20
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	9000      	str	r0, [sp, #0]
 80078fc:	463b      	mov	r3, r7
 80078fe:	fa1f f288 	uxth.w	r2, r8
 8007902:	4631      	mov	r1, r6
 8007904:	4628      	mov	r0, r5
 8007906:	f000 fec1 	bl	800868c <xTaskCreate>
 800790a:	2801      	cmp	r0, #1
 800790c:	d103      	bne.n	8007916 <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800790e:	9805      	ldr	r0, [sp, #20]
}
 8007910:	b007      	add	sp, #28
 8007912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 8007916:	2000      	movs	r0, #0
 8007918:	e7fa      	b.n	8007910 <osThreadCreate+0x62>

0800791a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800791a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800791c:	4603      	mov	r3, r0
 800791e:	b900      	cbnz	r0, 8007922 <osDelay+0x8>
 8007920:	2301      	movs	r3, #1
 8007922:	4618      	mov	r0, r3
 8007924:	f001 f898 	bl	8008a58 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007928:	2000      	movs	r0, #0
 800792a:	bd08      	pop	{r3, pc}

0800792c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800792c:	b510      	push	{r4, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8007932:	6844      	ldr	r4, [r0, #4]
 8007934:	b16c      	cbz	r4, 8007952 <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 8007936:	2901      	cmp	r1, #1
 8007938:	d009      	beq.n	800794e <osTimerCreate+0x22>
 800793a:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800793c:	6801      	ldr	r1, [r0, #0]
    return xTimerCreateStatic((const char *)"",
 800793e:	9401      	str	r4, [sp, #4]
 8007940:	9100      	str	r1, [sp, #0]
 8007942:	2101      	movs	r1, #1
 8007944:	4809      	ldr	r0, [pc, #36]	; (800796c <osTimerCreate+0x40>)
 8007946:	f001 fc73 	bl	8009230 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 800794a:	b002      	add	sp, #8
 800794c:	bd10      	pop	{r4, pc}
    return xTimerCreateStatic((const char *)"",
 800794e:	2201      	movs	r2, #1
 8007950:	e7f4      	b.n	800793c <osTimerCreate+0x10>
    return xTimerCreate((const char *)"",
 8007952:	2901      	cmp	r1, #1
 8007954:	d007      	beq.n	8007966 <osTimerCreate+0x3a>
 8007956:	2200      	movs	r2, #0
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8007958:	6801      	ldr	r1, [r0, #0]
    return xTimerCreate((const char *)"",
 800795a:	9100      	str	r1, [sp, #0]
 800795c:	2101      	movs	r1, #1
 800795e:	4803      	ldr	r0, [pc, #12]	; (800796c <osTimerCreate+0x40>)
 8007960:	f001 fc4a 	bl	80091f8 <xTimerCreate>
 8007964:	e7f1      	b.n	800794a <osTimerCreate+0x1e>
 8007966:	2201      	movs	r2, #1
 8007968:	e7f6      	b.n	8007958 <osTimerCreate+0x2c>
 800796a:	bf00      	nop
 800796c:	0800a6dc 	.word	0x0800a6dc

08007970 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007970:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007972:	6841      	ldr	r1, [r0, #4]
 8007974:	b119      	cbz	r1, 800797e <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007976:	2001      	movs	r0, #1
 8007978:	f000 fa8f 	bl	8007e9a <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800797c:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 800797e:	2001      	movs	r0, #1
 8007980:	f000 fa80 	bl	8007e84 <xQueueCreateMutex>
 8007984:	e7fa      	b.n	800797c <osMutexCreate+0xc>

08007986 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007986:	f100 0308 	add.w	r3, r0, #8
 800798a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800798c:	f04f 32ff 	mov.w	r2, #4294967295
 8007990:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007992:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007994:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800799a:	4770      	bx	lr

0800799c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800799c:	2300      	movs	r3, #0
 800799e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079a0:	4770      	bx	lr

080079a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80079a2:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079a4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079a6:	689a      	ldr	r2, [r3, #8]
 80079a8:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079aa:	689a      	ldr	r2, [r3, #8]
 80079ac:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079ae:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079b0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80079b2:	6803      	ldr	r3, [r0, #0]
 80079b4:	3301      	adds	r3, #1
 80079b6:	6003      	str	r3, [r0, #0]
}
 80079b8:	4770      	bx	lr

080079ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079ba:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079bc:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079be:	f1b5 3fff 	cmp.w	r5, #4294967295
 80079c2:	d002      	beq.n	80079ca <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079c4:	f100 0208 	add.w	r2, r0, #8
 80079c8:	e002      	b.n	80079d0 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 80079ca:	6902      	ldr	r2, [r0, #16]
 80079cc:	e004      	b.n	80079d8 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079ce:	461a      	mov	r2, r3
 80079d0:	6853      	ldr	r3, [r2, #4]
 80079d2:	681c      	ldr	r4, [r3, #0]
 80079d4:	42ac      	cmp	r4, r5
 80079d6:	d9fa      	bls.n	80079ce <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079d8:	6853      	ldr	r3, [r2, #4]
 80079da:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079dc:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079de:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80079e0:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079e2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80079e4:	6803      	ldr	r3, [r0, #0]
 80079e6:	3301      	adds	r3, #1
 80079e8:	6003      	str	r3, [r0, #0]
}
 80079ea:	bc30      	pop	{r4, r5}
 80079ec:	4770      	bx	lr

080079ee <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079ee:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079f0:	6842      	ldr	r2, [r0, #4]
 80079f2:	6881      	ldr	r1, [r0, #8]
 80079f4:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079f6:	6882      	ldr	r2, [r0, #8]
 80079f8:	6841      	ldr	r1, [r0, #4]
 80079fa:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	4282      	cmp	r2, r0
 8007a00:	d006      	beq.n	8007a10 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a02:	2200      	movs	r2, #0
 8007a04:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	3a01      	subs	r2, #1
 8007a0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a0c:	6818      	ldr	r0, [r3, #0]
}
 8007a0e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a10:	6882      	ldr	r2, [r0, #8]
 8007a12:	605a      	str	r2, [r3, #4]
 8007a14:	e7f5      	b.n	8007a02 <uxListRemove+0x14>

08007a16 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007a16:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a18:	b123      	cbz	r3, 8007a24 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007a1a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007a1c:	6818      	ldr	r0, [r3, #0]
 8007a1e:	f1c0 0007 	rsb	r0, r0, #7
 8007a22:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007a24:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8007a26:	4770      	bx	lr

08007a28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a2c:	f001 fe12 	bl	8009654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007a32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d004      	beq.n	8007a42 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8007a38:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8007a3a:	f001 fe2d 	bl	8009698 <vPortExitCritical>

	return xReturn;
}
 8007a3e:	4620      	mov	r0, r4
 8007a40:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007a42:	2401      	movs	r4, #1
 8007a44:	e7f9      	b.n	8007a3a <prvIsQueueFull+0x12>

08007a46 <prvIsQueueEmpty>:
{
 8007a46:	b510      	push	{r4, lr}
 8007a48:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007a4a:	f001 fe03 	bl	8009654 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a50:	b123      	cbz	r3, 8007a5c <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8007a52:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007a54:	f001 fe20 	bl	8009698 <vPortExitCritical>
}
 8007a58:	4620      	mov	r0, r4
 8007a5a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007a5c:	2401      	movs	r4, #1
 8007a5e:	e7f9      	b.n	8007a54 <prvIsQueueEmpty+0xe>

08007a60 <prvCopyDataToQueue>:
{
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	4604      	mov	r4, r0
 8007a64:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a66:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a68:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007a6a:	b95a      	cbnz	r2, 8007a84 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a6c:	6803      	ldr	r3, [r0, #0]
 8007a6e:	b11b      	cbz	r3, 8007a78 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8007a70:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a72:	3501      	adds	r5, #1
 8007a74:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a78:	6880      	ldr	r0, [r0, #8]
 8007a7a:	f001 f9ab 	bl	8008dd4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60a3      	str	r3, [r4, #8]
 8007a82:	e7f6      	b.n	8007a72 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8007a84:	b96e      	cbnz	r6, 8007aa2 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a86:	6840      	ldr	r0, [r0, #4]
 8007a88:	f002 f880 	bl	8009b8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007a8e:	6863      	ldr	r3, [r4, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a94:	68a2      	ldr	r2, [r4, #8]
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d319      	bcc.n	8007ace <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	e7e7      	b.n	8007a72 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007aa2:	68c0      	ldr	r0, [r0, #12]
 8007aa4:	f002 f872 	bl	8009b8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007aa8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007aaa:	4252      	negs	r2, r2
 8007aac:	68e3      	ldr	r3, [r4, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ab2:	6821      	ldr	r1, [r4, #0]
 8007ab4:	428b      	cmp	r3, r1
 8007ab6:	d202      	bcs.n	8007abe <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ab8:	68a3      	ldr	r3, [r4, #8]
 8007aba:	441a      	add	r2, r3
 8007abc:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007abe:	2e02      	cmp	r6, #2
 8007ac0:	d001      	beq.n	8007ac6 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	e7d5      	b.n	8007a72 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ac6:	b125      	cbz	r5, 8007ad2 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8007ac8:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8007aca:	2000      	movs	r0, #0
 8007acc:	e7d1      	b.n	8007a72 <prvCopyDataToQueue+0x12>
 8007ace:	2000      	movs	r0, #0
 8007ad0:	e7cf      	b.n	8007a72 <prvCopyDataToQueue+0x12>
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	e7cd      	b.n	8007a72 <prvCopyDataToQueue+0x12>

08007ad6 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ad6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007ad8:	b172      	cbz	r2, 8007af8 <prvCopyDataFromQueue+0x22>
{
 8007ada:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007adc:	68c3      	ldr	r3, [r0, #12]
 8007ade:	4413      	add	r3, r2
 8007ae0:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ae2:	6884      	ldr	r4, [r0, #8]
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	d301      	bcc.n	8007aec <prvCopyDataFromQueue+0x16>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ae8:	6803      	ldr	r3, [r0, #0]
 8007aea:	60c3      	str	r3, [r0, #12]
 8007aec:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007aee:	68c1      	ldr	r1, [r0, #12]
 8007af0:	4620      	mov	r0, r4
 8007af2:	f002 f84b 	bl	8009b8c <memcpy>
}
 8007af6:	bd10      	pop	{r4, pc}
 8007af8:	4770      	bx	lr

08007afa <prvUnlockQueue>:
{
 8007afa:	b538      	push	{r3, r4, r5, lr}
 8007afc:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8007afe:	f001 fda9 	bl	8009654 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007b02:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8007b06:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b08:	e003      	b.n	8007b12 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8007b0a:	f001 f8eb 	bl	8008ce4 <vTaskMissedYield>
			--cTxLock;
 8007b0e:	3c01      	subs	r4, #1
 8007b10:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b12:	2c00      	cmp	r4, #0
 8007b14:	dd08      	ble.n	8007b28 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b18:	b133      	cbz	r3, 8007b28 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b1a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007b1e:	f001 f84f 	bl	8008bc0 <xTaskRemoveFromEventList>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d0f3      	beq.n	8007b0e <prvUnlockQueue+0x14>
 8007b26:	e7f0      	b.n	8007b0a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8007b28:	23ff      	movs	r3, #255	; 0xff
 8007b2a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007b2e:	f001 fdb3 	bl	8009698 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007b32:	f001 fd8f 	bl	8009654 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007b36:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8007b3a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b3c:	e003      	b.n	8007b46 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8007b3e:	f001 f8d1 	bl	8008ce4 <vTaskMissedYield>
				--cRxLock;
 8007b42:	3c01      	subs	r4, #1
 8007b44:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b46:	2c00      	cmp	r4, #0
 8007b48:	dd08      	ble.n	8007b5c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b4a:	692b      	ldr	r3, [r5, #16]
 8007b4c:	b133      	cbz	r3, 8007b5c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b4e:	f105 0010 	add.w	r0, r5, #16
 8007b52:	f001 f835 	bl	8008bc0 <xTaskRemoveFromEventList>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d0f3      	beq.n	8007b42 <prvUnlockQueue+0x48>
 8007b5a:	e7f0      	b.n	8007b3e <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8007b5c:	23ff      	movs	r3, #255	; 0xff
 8007b5e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007b62:	f001 fd99 	bl	8009698 <vPortExitCritical>
}
 8007b66:	bd38      	pop	{r3, r4, r5, pc}

08007b68 <xQueueGenericReset>:
{
 8007b68:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8007b6a:	b940      	cbnz	r0, 8007b7e <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	e7fe      	b.n	8007b7c <xQueueGenericReset+0x14>
 8007b7e:	4604      	mov	r4, r0
 8007b80:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8007b82:	f001 fd67 	bl	8009654 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b86:	6821      	ldr	r1, [r4, #0]
 8007b88:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b8c:	fb03 1002 	mla	r0, r3, r2, r1
 8007b90:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b92:	2000      	movs	r0, #0
 8007b94:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b96:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b98:	3a01      	subs	r2, #1
 8007b9a:	fb02 1303 	mla	r3, r2, r3, r1
 8007b9e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ba0:	23ff      	movs	r3, #255	; 0xff
 8007ba2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ba6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007baa:	b9a5      	cbnz	r5, 8007bd6 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bac:	6923      	ldr	r3, [r4, #16]
 8007bae:	b91b      	cbnz	r3, 8007bb8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8007bb0:	f001 fd72 	bl	8009698 <vPortExitCritical>
}
 8007bb4:	2001      	movs	r0, #1
 8007bb6:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bb8:	f104 0010 	add.w	r0, r4, #16
 8007bbc:	f001 f800 	bl	8008bc0 <xTaskRemoveFromEventList>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d0f5      	beq.n	8007bb0 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8007bc4:	4b08      	ldr	r3, [pc, #32]	; (8007be8 <xQueueGenericReset+0x80>)
 8007bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	e7ec      	b.n	8007bb0 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bd6:	f104 0010 	add.w	r0, r4, #16
 8007bda:	f7ff fed4 	bl	8007986 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007bde:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007be2:	f7ff fed0 	bl	8007986 <vListInitialise>
 8007be6:	e7e3      	b.n	8007bb0 <xQueueGenericReset+0x48>
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <prvInitialiseNewQueue>:
{
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	461d      	mov	r5, r3
 8007bf0:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	b149      	cbz	r1, 8007c0a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007bf6:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8007bf8:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007bfa:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f7ff ffb2 	bl	8007b68 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007c04:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8007c08:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c0a:	6024      	str	r4, [r4, #0]
 8007c0c:	e7f4      	b.n	8007bf8 <prvInitialiseNewQueue+0xc>

08007c0e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c0e:	b940      	cbnz	r0, 8007c22 <xQueueGenericCreateStatic+0x14>
 8007c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	e7fe      	b.n	8007c20 <xQueueGenericCreateStatic+0x12>
	{
 8007c22:	b510      	push	{r4, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8007c28:	b153      	cbz	r3, 8007c40 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c2a:	b192      	cbz	r2, 8007c52 <xQueueGenericCreateStatic+0x44>
 8007c2c:	b989      	cbnz	r1, 8007c52 <xQueueGenericCreateStatic+0x44>
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	e7fe      	b.n	8007c3e <xQueueGenericCreateStatic+0x30>
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	e7fe      	b.n	8007c50 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c52:	b94a      	cbnz	r2, 8007c68 <xQueueGenericCreateStatic+0x5a>
 8007c54:	b141      	cbz	r1, 8007c68 <xQueueGenericCreateStatic+0x5a>
 8007c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	e7fe      	b.n	8007c66 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c68:	2050      	movs	r0, #80	; 0x50
 8007c6a:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c6c:	9803      	ldr	r0, [sp, #12]
 8007c6e:	2850      	cmp	r0, #80	; 0x50
 8007c70:	d008      	beq.n	8007c84 <xQueueGenericCreateStatic+0x76>
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	e7fe      	b.n	8007c82 <xQueueGenericCreateStatic+0x74>
 8007c84:	4620      	mov	r0, r4
 8007c86:	461c      	mov	r4, r3
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c88:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c90:	9400      	str	r4, [sp, #0]
 8007c92:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007c96:	f7ff ffa9 	bl	8007bec <prvInitialiseNewQueue>
	}
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	b004      	add	sp, #16
 8007c9e:	bd10      	pop	{r4, pc}

08007ca0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ca0:	b940      	cbnz	r0, 8007cb4 <xQueueGenericCreate+0x14>
 8007ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	e7fe      	b.n	8007cb2 <xQueueGenericCreate+0x12>
	{
 8007cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8007cba:	b111      	cbz	r1, 8007cc2 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cbc:	fb01 f000 	mul.w	r0, r1, r0
 8007cc0:	e000      	b.n	8007cc4 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	4617      	mov	r7, r2
 8007cc6:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007cc8:	3050      	adds	r0, #80	; 0x50
 8007cca:	f001 fe79 	bl	80099c0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007cce:	4605      	mov	r5, r0
 8007cd0:	b150      	cbz	r0, 8007ce8 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cd8:	9000      	str	r0, [sp, #0]
 8007cda:	463b      	mov	r3, r7
 8007cdc:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f7ff ff82 	bl	8007bec <prvInitialiseNewQueue>
	}
 8007ce8:	4628      	mov	r0, r5
 8007cea:	b003      	add	sp, #12
 8007cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007cf0 <xQueueGenericSend>:
{
 8007cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007cf6:	b160      	cbz	r0, 8007d12 <xQueueGenericSend+0x22>
 8007cf8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cfa:	b999      	cbnz	r1, 8007d24 <xQueueGenericSend+0x34>
 8007cfc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007cfe:	b18a      	cbz	r2, 8007d24 <xQueueGenericSend+0x34>
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	e7fe      	b.n	8007d10 <xQueueGenericSend+0x20>
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	e7fe      	b.n	8007d22 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d10b      	bne.n	8007d40 <xQueueGenericSend+0x50>
 8007d28:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007d2a:	2a01      	cmp	r2, #1
 8007d2c:	d008      	beq.n	8007d40 <xQueueGenericSend+0x50>
 8007d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	e7fe      	b.n	8007d3e <xQueueGenericSend+0x4e>
 8007d40:	461e      	mov	r6, r3
 8007d42:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d44:	f000 ffda 	bl	8008cfc <xTaskGetSchedulerState>
 8007d48:	b950      	cbnz	r0, 8007d60 <xQueueGenericSend+0x70>
 8007d4a:	9b01      	ldr	r3, [sp, #4]
 8007d4c:	b153      	cbz	r3, 8007d64 <xQueueGenericSend+0x74>
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	e7fe      	b.n	8007d5e <xQueueGenericSend+0x6e>
 8007d60:	2500      	movs	r5, #0
 8007d62:	e03a      	b.n	8007dda <xQueueGenericSend+0xea>
 8007d64:	2500      	movs	r5, #0
 8007d66:	e038      	b.n	8007dda <xQueueGenericSend+0xea>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d68:	4632      	mov	r2, r6
 8007d6a:	4639      	mov	r1, r7
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f7ff fe77 	bl	8007a60 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d74:	b94b      	cbnz	r3, 8007d8a <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8007d76:	b1a8      	cbz	r0, 8007da4 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8007d78:	4b3b      	ldr	r3, [pc, #236]	; (8007e68 <xQueueGenericSend+0x178>)
 8007d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	e00c      	b.n	8007da4 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007d8e:	f000 ff17 	bl	8008bc0 <xTaskRemoveFromEventList>
 8007d92:	b138      	cbz	r0, 8007da4 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8007d94:	4b34      	ldr	r3, [pc, #208]	; (8007e68 <xQueueGenericSend+0x178>)
 8007d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007da4:	f001 fc78 	bl	8009698 <vPortExitCritical>
				return pdPASS;
 8007da8:	2001      	movs	r0, #1
}
 8007daa:	b005      	add	sp, #20
 8007dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8007dae:	f001 fc73 	bl	8009698 <vPortExitCritical>
					return errQUEUE_FULL;
 8007db2:	2000      	movs	r0, #0
 8007db4:	e7f9      	b.n	8007daa <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007db6:	a802      	add	r0, sp, #8
 8007db8:	f000 ff48 	bl	8008c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dbc:	2501      	movs	r5, #1
 8007dbe:	e019      	b.n	8007df4 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007dc6:	e021      	b.n	8007e0c <xQueueGenericSend+0x11c>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dce:	e023      	b.n	8007e18 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f7ff fe92 	bl	8007afa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dd6:	f000 fd73 	bl	80088c0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8007dda:	f001 fc3b 	bl	8009654 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007de0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d3c0      	bcc.n	8007d68 <xQueueGenericSend+0x78>
 8007de6:	2e02      	cmp	r6, #2
 8007de8:	d0be      	beq.n	8007d68 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dea:	9b01      	ldr	r3, [sp, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d0de      	beq.n	8007dae <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8007df0:	2d00      	cmp	r5, #0
 8007df2:	d0e0      	beq.n	8007db6 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8007df4:	f001 fc50 	bl	8009698 <vPortExitCritical>
		vTaskSuspendAll();
 8007df8:	f000 fcc8 	bl	800878c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dfc:	f001 fc2a 	bl	8009654 <vPortEnterCritical>
 8007e00:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007e04:	b25b      	sxtb	r3, r3
 8007e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0a:	d0d9      	beq.n	8007dc0 <xQueueGenericSend+0xd0>
 8007e0c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007e10:	b25b      	sxtb	r3, r3
 8007e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e16:	d0d7      	beq.n	8007dc8 <xQueueGenericSend+0xd8>
 8007e18:	f001 fc3e 	bl	8009698 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e1c:	a901      	add	r1, sp, #4
 8007e1e:	a802      	add	r0, sp, #8
 8007e20:	f000 ff20 	bl	8008c64 <xTaskCheckForTimeOut>
 8007e24:	b9c8      	cbnz	r0, 8007e5a <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e26:	4620      	mov	r0, r4
 8007e28:	f7ff fdfe 	bl	8007a28 <prvIsQueueFull>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d0cf      	beq.n	8007dd0 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e30:	9901      	ldr	r1, [sp, #4]
 8007e32:	f104 0010 	add.w	r0, r4, #16
 8007e36:	f000 fe8f 	bl	8008b58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7ff fe5d 	bl	8007afa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e40:	f000 fd3e 	bl	80088c0 <xTaskResumeAll>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d1c8      	bne.n	8007dda <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8007e48:	4b07      	ldr	r3, [pc, #28]	; (8007e68 <xQueueGenericSend+0x178>)
 8007e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	e7bf      	b.n	8007dda <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f7ff fe4d 	bl	8007afa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e60:	f000 fd2e 	bl	80088c0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8007e64:	2000      	movs	r0, #0
 8007e66:	e7a0      	b.n	8007daa <xQueueGenericSend+0xba>
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8007e6c:	b148      	cbz	r0, 8007e82 <prvInitialiseMutex+0x16>
	{
 8007e6e:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e70:	2100      	movs	r1, #0
 8007e72:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007e74:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007e76:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007e78:	460b      	mov	r3, r1
 8007e7a:	460a      	mov	r2, r1
 8007e7c:	f7ff ff38 	bl	8007cf0 <xQueueGenericSend>
	}
 8007e80:	bd08      	pop	{r3, pc}
 8007e82:	4770      	bx	lr

08007e84 <xQueueCreateMutex>:
	{
 8007e84:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007e86:	4602      	mov	r2, r0
 8007e88:	2100      	movs	r1, #0
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	f7ff ff08 	bl	8007ca0 <xQueueGenericCreate>
 8007e90:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e92:	f7ff ffeb 	bl	8007e6c <prvInitialiseMutex>
	}
 8007e96:	4620      	mov	r0, r4
 8007e98:	bd10      	pop	{r4, pc}

08007e9a <xQueueCreateMutexStatic>:
	{
 8007e9a:	b510      	push	{r4, lr}
 8007e9c:	b082      	sub	sp, #8
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007e9e:	9000      	str	r0, [sp, #0]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	2001      	movs	r0, #1
 8007ea8:	f7ff feb1 	bl	8007c0e <xQueueGenericCreateStatic>
 8007eac:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007eae:	f7ff ffdd 	bl	8007e6c <prvInitialiseMutex>
	}
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	b002      	add	sp, #8
 8007eb6:	bd10      	pop	{r4, pc}

08007eb8 <xQueueGenericSendFromISR>:
{
 8007eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8007ebc:	b160      	cbz	r0, 8007ed8 <xQueueGenericSendFromISR+0x20>
 8007ebe:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ec0:	b999      	cbnz	r1, 8007eea <xQueueGenericSendFromISR+0x32>
 8007ec2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8007ec4:	b188      	cbz	r0, 8007eea <xQueueGenericSendFromISR+0x32>
 8007ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	e7fe      	b.n	8007ed6 <xQueueGenericSendFromISR+0x1e>
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	e7fe      	b.n	8007ee8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d10b      	bne.n	8007f06 <xQueueGenericSendFromISR+0x4e>
 8007eee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007ef0:	2801      	cmp	r0, #1
 8007ef2:	d008      	beq.n	8007f06 <xQueueGenericSendFromISR+0x4e>
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	e7fe      	b.n	8007f04 <xQueueGenericSendFromISR+0x4c>
 8007f06:	461f      	mov	r7, r3
 8007f08:	4690      	mov	r8, r2
 8007f0a:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f0c:	f001 fccc 	bl	80098a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f10:	f3ef 8611 	mrs	r6, BASEPRI
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007f26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d303      	bcc.n	8007f34 <xQueueGenericSendFromISR+0x7c>
 8007f2c:	2f02      	cmp	r7, #2
 8007f2e:	d001      	beq.n	8007f34 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8007f30:	2000      	movs	r0, #0
 8007f32:	e00f      	b.n	8007f54 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f34:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8007f38:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f3a:	463a      	mov	r2, r7
 8007f3c:	4649      	mov	r1, r9
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f7ff fd8e 	bl	8007a60 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007f44:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007f48:	d008      	beq.n	8007f5c <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f4a:	1c6b      	adds	r3, r5, #1
 8007f4c:	b25b      	sxtb	r3, r3
 8007f4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8007f52:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f54:	f386 8811 	msr	BASEPRI, r6
}
 8007f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f5e:	b15b      	cbz	r3, 8007f78 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f64:	f000 fe2c 	bl	8008bc0 <xTaskRemoveFromEventList>
 8007f68:	b140      	cbz	r0, 8007f7c <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8007f6a:	f1b8 0f00 	cmp.w	r8, #0
 8007f6e:	d007      	beq.n	8007f80 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f70:	2001      	movs	r0, #1
 8007f72:	f8c8 0000 	str.w	r0, [r8]
 8007f76:	e7ed      	b.n	8007f54 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8007f78:	2001      	movs	r0, #1
 8007f7a:	e7eb      	b.n	8007f54 <xQueueGenericSendFromISR+0x9c>
 8007f7c:	2001      	movs	r0, #1
 8007f7e:	e7e9      	b.n	8007f54 <xQueueGenericSendFromISR+0x9c>
 8007f80:	2001      	movs	r0, #1
 8007f82:	e7e7      	b.n	8007f54 <xQueueGenericSendFromISR+0x9c>

08007f84 <xQueueReceive>:
{
 8007f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f86:	b085      	sub	sp, #20
 8007f88:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007f8a:	b160      	cbz	r0, 8007fa6 <xQueueReceive+0x22>
 8007f8c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f8e:	b999      	cbnz	r1, 8007fb8 <xQueueReceive+0x34>
 8007f90:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007f92:	b18b      	cbz	r3, 8007fb8 <xQueueReceive+0x34>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	e7fe      	b.n	8007fa4 <xQueueReceive+0x20>
 8007fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	e7fe      	b.n	8007fb6 <xQueueReceive+0x32>
 8007fb8:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fba:	f000 fe9f 	bl	8008cfc <xTaskGetSchedulerState>
 8007fbe:	b950      	cbnz	r0, 8007fd6 <xQueueReceive+0x52>
 8007fc0:	9b01      	ldr	r3, [sp, #4]
 8007fc2:	b153      	cbz	r3, 8007fda <xQueueReceive+0x56>
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	e7fe      	b.n	8007fd4 <xQueueReceive+0x50>
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	e03e      	b.n	8008058 <xQueueReceive+0xd4>
 8007fda:	2600      	movs	r6, #0
 8007fdc:	e03c      	b.n	8008058 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fde:	4639      	mov	r1, r7
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f7ff fd78 	bl	8007ad6 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fe6:	3d01      	subs	r5, #1
 8007fe8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fea:	6923      	ldr	r3, [r4, #16]
 8007fec:	b923      	cbnz	r3, 8007ff8 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 8007fee:	f001 fb53 	bl	8009698 <vPortExitCritical>
				return pdPASS;
 8007ff2:	2001      	movs	r0, #1
}
 8007ff4:	b005      	add	sp, #20
 8007ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ff8:	f104 0010 	add.w	r0, r4, #16
 8007ffc:	f000 fde0 	bl	8008bc0 <xTaskRemoveFromEventList>
 8008000:	2800      	cmp	r0, #0
 8008002:	d0f4      	beq.n	8007fee <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 8008004:	4b34      	ldr	r3, [pc, #208]	; (80080d8 <xQueueReceive+0x154>)
 8008006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	e7eb      	b.n	8007fee <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 8008016:	f001 fb3f 	bl	8009698 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800801a:	2000      	movs	r0, #0
 800801c:	e7ea      	b.n	8007ff4 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800801e:	a802      	add	r0, sp, #8
 8008020:	f000 fe14 	bl	8008c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008024:	2601      	movs	r6, #1
 8008026:	e021      	b.n	800806c <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 8008028:	2300      	movs	r3, #0
 800802a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800802e:	e029      	b.n	8008084 <xQueueReceive+0x100>
 8008030:	2300      	movs	r3, #0
 8008032:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008036:	e02b      	b.n	8008090 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 8008038:	4620      	mov	r0, r4
 800803a:	f7ff fd5e 	bl	8007afa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800803e:	f000 fc3f 	bl	80088c0 <xTaskResumeAll>
 8008042:	e009      	b.n	8008058 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8008044:	4620      	mov	r0, r4
 8008046:	f7ff fd58 	bl	8007afa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800804a:	f000 fc39 	bl	80088c0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800804e:	4620      	mov	r0, r4
 8008050:	f7ff fcf9 	bl	8007a46 <prvIsQueueEmpty>
 8008054:	2800      	cmp	r0, #0
 8008056:	d13d      	bne.n	80080d4 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 8008058:	f001 fafc 	bl	8009654 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800805c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800805e:	2d00      	cmp	r5, #0
 8008060:	d1bd      	bne.n	8007fde <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008062:	9b01      	ldr	r3, [sp, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d0d6      	beq.n	8008016 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8008068:	2e00      	cmp	r6, #0
 800806a:	d0d8      	beq.n	800801e <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 800806c:	f001 fb14 	bl	8009698 <vPortExitCritical>
		vTaskSuspendAll();
 8008070:	f000 fb8c 	bl	800878c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008074:	f001 faee 	bl	8009654 <vPortEnterCritical>
 8008078:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800807c:	b25b      	sxtb	r3, r3
 800807e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008082:	d0d1      	beq.n	8008028 <xQueueReceive+0xa4>
 8008084:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008088:	b25b      	sxtb	r3, r3
 800808a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808e:	d0cf      	beq.n	8008030 <xQueueReceive+0xac>
 8008090:	f001 fb02 	bl	8009698 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008094:	a901      	add	r1, sp, #4
 8008096:	a802      	add	r0, sp, #8
 8008098:	f000 fde4 	bl	8008c64 <xTaskCheckForTimeOut>
 800809c:	2800      	cmp	r0, #0
 800809e:	d1d1      	bne.n	8008044 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080a0:	4620      	mov	r0, r4
 80080a2:	f7ff fcd0 	bl	8007a46 <prvIsQueueEmpty>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d0c6      	beq.n	8008038 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080aa:	9901      	ldr	r1, [sp, #4]
 80080ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80080b0:	f000 fd52 	bl	8008b58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080b4:	4620      	mov	r0, r4
 80080b6:	f7ff fd20 	bl	8007afa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080ba:	f000 fc01 	bl	80088c0 <xTaskResumeAll>
 80080be:	2800      	cmp	r0, #0
 80080c0:	d1ca      	bne.n	8008058 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 80080c2:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <xQueueReceive+0x154>)
 80080c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	e7c1      	b.n	8008058 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 80080d4:	2000      	movs	r0, #0
 80080d6:	e78d      	b.n	8007ff4 <xQueueReceive+0x70>
 80080d8:	e000ed04 	.word	0xe000ed04

080080dc <xQueueSemaphoreTake>:
{
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80080e2:	b940      	cbnz	r0, 80080f6 <xQueueSemaphoreTake+0x1a>
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	e7fe      	b.n	80080f4 <xQueueSemaphoreTake+0x18>
 80080f6:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80080f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80080fa:	b143      	cbz	r3, 800810e <xQueueSemaphoreTake+0x32>
 80080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	e7fe      	b.n	800810c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800810e:	f000 fdf5 	bl	8008cfc <xTaskGetSchedulerState>
 8008112:	b950      	cbnz	r0, 800812a <xQueueSemaphoreTake+0x4e>
 8008114:	9b01      	ldr	r3, [sp, #4]
 8008116:	b15b      	cbz	r3, 8008130 <xQueueSemaphoreTake+0x54>
 8008118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	e7fe      	b.n	8008128 <xQueueSemaphoreTake+0x4c>
 800812a:	2500      	movs	r5, #0
 800812c:	462e      	mov	r6, r5
 800812e:	e051      	b.n	80081d4 <xQueueSemaphoreTake+0xf8>
 8008130:	2500      	movs	r5, #0
 8008132:	462e      	mov	r6, r5
 8008134:	e04e      	b.n	80081d4 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008136:	3b01      	subs	r3, #1
 8008138:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	b913      	cbnz	r3, 8008144 <xQueueSemaphoreTake+0x68>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800813e:	f000 ff01 	bl	8008f44 <pvTaskIncrementMutexHeldCount>
 8008142:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008144:	6923      	ldr	r3, [r4, #16]
 8008146:	b163      	cbz	r3, 8008162 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008148:	f104 0010 	add.w	r0, r4, #16
 800814c:	f000 fd38 	bl	8008bc0 <xTaskRemoveFromEventList>
 8008150:	b138      	cbz	r0, 8008162 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 8008152:	4b48      	ldr	r3, [pc, #288]	; (8008274 <xQueueSemaphoreTake+0x198>)
 8008154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008162:	f001 fa99 	bl	8009698 <vPortExitCritical>
				return pdPASS;
 8008166:	2501      	movs	r5, #1
}
 8008168:	4628      	mov	r0, r5
 800816a:	b004      	add	sp, #16
 800816c:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 800816e:	b145      	cbz	r5, 8008182 <xQueueSemaphoreTake+0xa6>
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	e7fe      	b.n	8008180 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 8008182:	f001 fa89 	bl	8009698 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008186:	e7ef      	b.n	8008168 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008188:	a802      	add	r0, sp, #8
 800818a:	f000 fd5f 	bl	8008c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800818e:	2601      	movs	r6, #1
 8008190:	e02a      	b.n	80081e8 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 8008192:	2300      	movs	r3, #0
 8008194:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008198:	e032      	b.n	8008200 <xQueueSemaphoreTake+0x124>
 800819a:	2300      	movs	r3, #0
 800819c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081a0:	e034      	b.n	800820c <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 80081a2:	f001 fa57 	bl	8009654 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081a6:	68a0      	ldr	r0, [r4, #8]
 80081a8:	f000 fdb8 	bl	8008d1c <xTaskPriorityInherit>
 80081ac:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80081ae:	f001 fa73 	bl	8009698 <vPortExitCritical>
 80081b2:	e03b      	b.n	800822c <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 80081b4:	4620      	mov	r0, r4
 80081b6:	f7ff fca0 	bl	8007afa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081ba:	f000 fb81 	bl	80088c0 <xTaskResumeAll>
 80081be:	e009      	b.n	80081d4 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 80081c0:	4620      	mov	r0, r4
 80081c2:	f7ff fc9a 	bl	8007afa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081c6:	f000 fb7b 	bl	80088c0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081ca:	4620      	mov	r0, r4
 80081cc:	f7ff fc3b 	bl	8007a46 <prvIsQueueEmpty>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d140      	bne.n	8008256 <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 80081d4:	f001 fa3e 	bl	8009654 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80081d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1ab      	bne.n	8008136 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80081de:	9b01      	ldr	r3, [sp, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0c4      	beq.n	800816e <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 80081e4:	2e00      	cmp	r6, #0
 80081e6:	d0cf      	beq.n	8008188 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 80081e8:	f001 fa56 	bl	8009698 <vPortExitCritical>
		vTaskSuspendAll();
 80081ec:	f000 face 	bl	800878c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081f0:	f001 fa30 	bl	8009654 <vPortEnterCritical>
 80081f4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80081f8:	b25b      	sxtb	r3, r3
 80081fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fe:	d0c8      	beq.n	8008192 <xQueueSemaphoreTake+0xb6>
 8008200:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008204:	b25b      	sxtb	r3, r3
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d0c6      	beq.n	800819a <xQueueSemaphoreTake+0xbe>
 800820c:	f001 fa44 	bl	8009698 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008210:	a901      	add	r1, sp, #4
 8008212:	a802      	add	r0, sp, #8
 8008214:	f000 fd26 	bl	8008c64 <xTaskCheckForTimeOut>
 8008218:	2800      	cmp	r0, #0
 800821a:	d1d1      	bne.n	80081c0 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800821c:	4620      	mov	r0, r4
 800821e:	f7ff fc12 	bl	8007a46 <prvIsQueueEmpty>
 8008222:	2800      	cmp	r0, #0
 8008224:	d0c6      	beq.n	80081b4 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d0ba      	beq.n	80081a2 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800822c:	9901      	ldr	r1, [sp, #4]
 800822e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008232:	f000 fc91 	bl	8008b58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008236:	4620      	mov	r0, r4
 8008238:	f7ff fc5f 	bl	8007afa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800823c:	f000 fb40 	bl	80088c0 <xTaskResumeAll>
 8008240:	2800      	cmp	r0, #0
 8008242:	d1c7      	bne.n	80081d4 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 8008244:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <xQueueSemaphoreTake+0x198>)
 8008246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	e7be      	b.n	80081d4 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 8008256:	2d00      	cmp	r5, #0
 8008258:	d086      	beq.n	8008168 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 800825a:	f001 f9fb 	bl	8009654 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800825e:	4620      	mov	r0, r4
 8008260:	f7ff fbd9 	bl	8007a16 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008264:	4601      	mov	r1, r0
 8008266:	68a0      	ldr	r0, [r4, #8]
 8008268:	f000 fe0c 	bl	8008e84 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800826c:	f001 fa14 	bl	8009698 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8008270:	2500      	movs	r5, #0
 8008272:	e779      	b.n	8008168 <xQueueSemaphoreTake+0x8c>
 8008274:	e000ed04 	.word	0xe000ed04

08008278 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008278:	2300      	movs	r3, #0
 800827a:	2b07      	cmp	r3, #7
 800827c:	d80c      	bhi.n	8008298 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800827e:	4a07      	ldr	r2, [pc, #28]	; (800829c <vQueueAddToRegistry+0x24>)
 8008280:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008284:	b10a      	cbz	r2, 800828a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008286:	3301      	adds	r3, #1
 8008288:	e7f7      	b.n	800827a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800828a:	4a04      	ldr	r2, [pc, #16]	; (800829c <vQueueAddToRegistry+0x24>)
 800828c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008290:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008294:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008296:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	200030f4 	.word	0x200030f4

080082a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	4604      	mov	r4, r0
 80082a4:	460d      	mov	r5, r1
 80082a6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082a8:	f001 f9d4 	bl	8009654 <vPortEnterCritical>
 80082ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80082b0:	b25b      	sxtb	r3, r3
 80082b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b6:	d00d      	beq.n	80082d4 <vQueueWaitForMessageRestricted+0x34>
 80082b8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80082bc:	b25b      	sxtb	r3, r3
 80082be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c2:	d00b      	beq.n	80082dc <vQueueWaitForMessageRestricted+0x3c>
 80082c4:	f001 f9e8 	bl	8009698 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80082c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082ca:	b15b      	cbz	r3, 80082e4 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80082cc:	4620      	mov	r0, r4
 80082ce:	f7ff fc14 	bl	8007afa <prvUnlockQueue>
	}
 80082d2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80082d4:	2300      	movs	r3, #0
 80082d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80082da:	e7ed      	b.n	80082b8 <vQueueWaitForMessageRestricted+0x18>
 80082dc:	2300      	movs	r3, #0
 80082de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082e2:	e7ef      	b.n	80082c4 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80082e4:	4632      	mov	r2, r6
 80082e6:	4629      	mov	r1, r5
 80082e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80082ec:	f000 fc4c 	bl	8008b88 <vTaskPlaceOnEventListRestricted>
 80082f0:	e7ec      	b.n	80082cc <vQueueWaitForMessageRestricted+0x2c>
	...

080082f4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082f4:	4b08      	ldr	r3, [pc, #32]	; (8008318 <prvResetNextTaskUnblockTime+0x24>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	b13b      	cbz	r3, 800830c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082fc:	4b06      	ldr	r3, [pc, #24]	; (8008318 <prvResetNextTaskUnblockTime+0x24>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <prvResetNextTaskUnblockTime+0x28>)
 8008308:	601a      	str	r2, [r3, #0]
	}
}
 800830a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800830c:	4b03      	ldr	r3, [pc, #12]	; (800831c <prvResetNextTaskUnblockTime+0x28>)
 800830e:	f04f 32ff 	mov.w	r2, #4294967295
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	2000080c 	.word	0x2000080c
 800831c:	200008e4 	.word	0x200008e4

08008320 <prvInitialiseNewTask>:
{
 8008320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008324:	4681      	mov	r9, r0
 8008326:	460d      	mov	r5, r1
 8008328:	4617      	mov	r7, r2
 800832a:	469a      	mov	sl, r3
 800832c:	9e08      	ldr	r6, [sp, #32]
 800832e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8008332:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008334:	0092      	lsls	r2, r2, #2
 8008336:	21a5      	movs	r1, #165	; 0xa5
 8008338:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800833a:	f001 fc32 	bl	8009ba2 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800833e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008340:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8008344:	3a01      	subs	r2, #1
 8008346:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800834a:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800834e:	6467      	str	r7, [r4, #68]	; 0x44
	if( pcName != NULL )
 8008350:	b38d      	cbz	r5, 80083b6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008352:	2300      	movs	r3, #0
 8008354:	2b0f      	cmp	r3, #15
 8008356:	d807      	bhi.n	8008368 <prvInitialiseNewTask+0x48>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008358:	5ce9      	ldrb	r1, [r5, r3]
 800835a:	18e2      	adds	r2, r4, r3
 800835c:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8008360:	5cea      	ldrb	r2, [r5, r3]
 8008362:	b10a      	cbz	r2, 8008368 <prvInitialiseNewTask+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008364:	3301      	adds	r3, #1
 8008366:	e7f5      	b.n	8008354 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008368:	2300      	movs	r3, #0
 800836a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800836e:	2e06      	cmp	r6, #6
 8008370:	d900      	bls.n	8008374 <prvInitialiseNewTask+0x54>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008372:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8008374:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008376:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8008378:	2500      	movs	r5, #0
 800837a:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800837c:	1d20      	adds	r0, r4, #4
 800837e:	f7ff fb0d 	bl	800799c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008382:	f104 0018 	add.w	r0, r4, #24
 8008386:	f7ff fb09 	bl	800799c <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800838a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800838c:	f1c6 0607 	rsb	r6, r6, #7
 8008390:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008392:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008394:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
 8008396:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008398:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800839c:	4652      	mov	r2, sl
 800839e:	4649      	mov	r1, r9
 80083a0:	4638      	mov	r0, r7
 80083a2:	f001 f92f 	bl	8009604 <pxPortInitialiseStack>
 80083a6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80083a8:	f1b8 0f00 	cmp.w	r8, #0
 80083ac:	d001      	beq.n	80083b2 <prvInitialiseNewTask+0x92>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083ae:	f8c8 4000 	str.w	r4, [r8]
}
 80083b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083b6:	2300      	movs	r3, #0
 80083b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80083bc:	e7d7      	b.n	800836e <prvInitialiseNewTask+0x4e>
	...

080083c0 <prvInitialiseTaskLists>:
{
 80083c0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083c2:	2400      	movs	r4, #0
 80083c4:	e007      	b.n	80083d6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083c6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80083ca:	0093      	lsls	r3, r2, #2
 80083cc:	480e      	ldr	r0, [pc, #56]	; (8008408 <prvInitialiseTaskLists+0x48>)
 80083ce:	4418      	add	r0, r3
 80083d0:	f7ff fad9 	bl	8007986 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083d4:	3401      	adds	r4, #1
 80083d6:	2c06      	cmp	r4, #6
 80083d8:	d9f5      	bls.n	80083c6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80083da:	4d0c      	ldr	r5, [pc, #48]	; (800840c <prvInitialiseTaskLists+0x4c>)
 80083dc:	4628      	mov	r0, r5
 80083de:	f7ff fad2 	bl	8007986 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083e2:	4c0b      	ldr	r4, [pc, #44]	; (8008410 <prvInitialiseTaskLists+0x50>)
 80083e4:	4620      	mov	r0, r4
 80083e6:	f7ff face 	bl	8007986 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083ea:	480a      	ldr	r0, [pc, #40]	; (8008414 <prvInitialiseTaskLists+0x54>)
 80083ec:	f7ff facb 	bl	8007986 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80083f0:	4809      	ldr	r0, [pc, #36]	; (8008418 <prvInitialiseTaskLists+0x58>)
 80083f2:	f7ff fac8 	bl	8007986 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80083f6:	4809      	ldr	r0, [pc, #36]	; (800841c <prvInitialiseTaskLists+0x5c>)
 80083f8:	f7ff fac5 	bl	8007986 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80083fc:	4b08      	ldr	r3, [pc, #32]	; (8008420 <prvInitialiseTaskLists+0x60>)
 80083fe:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008400:	4b08      	ldr	r3, [pc, #32]	; (8008424 <prvInitialiseTaskLists+0x64>)
 8008402:	601c      	str	r4, [r3, #0]
}
 8008404:	bd38      	pop	{r3, r4, r5, pc}
 8008406:	bf00      	nop
 8008408:	20000814 	.word	0x20000814
 800840c:	200008bc 	.word	0x200008bc
 8008410:	200008d0 	.word	0x200008d0
 8008414:	200008ec 	.word	0x200008ec
 8008418:	20000918 	.word	0x20000918
 800841c:	20000904 	.word	0x20000904
 8008420:	2000080c 	.word	0x2000080c
 8008424:	20000810 	.word	0x20000810

08008428 <prvAddNewTaskToReadyList>:
{
 8008428:	b510      	push	{r4, lr}
 800842a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800842c:	f001 f912 	bl	8009654 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008430:	4a21      	ldr	r2, [pc, #132]	; (80084b8 <prvAddNewTaskToReadyList+0x90>)
 8008432:	6813      	ldr	r3, [r2, #0]
 8008434:	3301      	adds	r3, #1
 8008436:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008438:	4b20      	ldr	r3, [pc, #128]	; (80084bc <prvAddNewTaskToReadyList+0x94>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	b15b      	cbz	r3, 8008456 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800843e:	4b20      	ldr	r3, [pc, #128]	; (80084c0 <prvAddNewTaskToReadyList+0x98>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	b96b      	cbnz	r3, 8008460 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008444:	4b1d      	ldr	r3, [pc, #116]	; (80084bc <prvAddNewTaskToReadyList+0x94>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800844c:	429a      	cmp	r2, r3
 800844e:	d807      	bhi.n	8008460 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8008450:	4b1a      	ldr	r3, [pc, #104]	; (80084bc <prvAddNewTaskToReadyList+0x94>)
 8008452:	601c      	str	r4, [r3, #0]
 8008454:	e004      	b.n	8008460 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8008456:	4b19      	ldr	r3, [pc, #100]	; (80084bc <prvAddNewTaskToReadyList+0x94>)
 8008458:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800845a:	6813      	ldr	r3, [r2, #0]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d027      	beq.n	80084b0 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 8008460:	4a18      	ldr	r2, [pc, #96]	; (80084c4 <prvAddNewTaskToReadyList+0x9c>)
 8008462:	6813      	ldr	r3, [r2, #0]
 8008464:	3301      	adds	r3, #1
 8008466:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008468:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 800846a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800846c:	2201      	movs	r2, #1
 800846e:	409a      	lsls	r2, r3
 8008470:	4915      	ldr	r1, [pc, #84]	; (80084c8 <prvAddNewTaskToReadyList+0xa0>)
 8008472:	6808      	ldr	r0, [r1, #0]
 8008474:	4302      	orrs	r2, r0
 8008476:	600a      	str	r2, [r1, #0]
 8008478:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800847c:	009a      	lsls	r2, r3, #2
 800847e:	1d21      	adds	r1, r4, #4
 8008480:	4812      	ldr	r0, [pc, #72]	; (80084cc <prvAddNewTaskToReadyList+0xa4>)
 8008482:	4410      	add	r0, r2
 8008484:	f7ff fa8d 	bl	80079a2 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008488:	f001 f906 	bl	8009698 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800848c:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <prvAddNewTaskToReadyList+0x98>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	b16b      	cbz	r3, 80084ae <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008492:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <prvAddNewTaskToReadyList+0x94>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008498:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800849a:	429a      	cmp	r2, r3
 800849c:	d207      	bcs.n	80084ae <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 800849e:	4b0c      	ldr	r3, [pc, #48]	; (80084d0 <prvAddNewTaskToReadyList+0xa8>)
 80084a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	f3bf 8f6f 	isb	sy
}
 80084ae:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80084b0:	f7ff ff86 	bl	80083c0 <prvInitialiseTaskLists>
 80084b4:	e7d4      	b.n	8008460 <prvAddNewTaskToReadyList+0x38>
 80084b6:	bf00      	nop
 80084b8:	200008a4 	.word	0x200008a4
 80084bc:	20000808 	.word	0x20000808
 80084c0:	20000900 	.word	0x20000900
 80084c4:	200008b4 	.word	0x200008b4
 80084c8:	200008b8 	.word	0x200008b8
 80084cc:	20000814 	.word	0x20000814
 80084d0:	e000ed04 	.word	0xe000ed04

080084d4 <prvDeleteTCB>:
	{
 80084d4:	b510      	push	{r4, lr}
 80084d6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084d8:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 80084dc:	b933      	cbnz	r3, 80084ec <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 80084de:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80084e0:	f001 faf2 	bl	8009ac8 <vPortFree>
				vPortFree( pxTCB );
 80084e4:	4620      	mov	r0, r4
 80084e6:	f001 faef 	bl	8009ac8 <vPortFree>
	}
 80084ea:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d00a      	beq.n	8008506 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d0fa      	beq.n	80084ea <prvDeleteTCB+0x16>
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	e7fe      	b.n	8008504 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 8008506:	f001 fadf 	bl	8009ac8 <vPortFree>
 800850a:	e7ee      	b.n	80084ea <prvDeleteTCB+0x16>

0800850c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800850c:	4b0f      	ldr	r3, [pc, #60]	; (800854c <prvCheckTasksWaitingTermination+0x40>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	b1d3      	cbz	r3, 8008548 <prvCheckTasksWaitingTermination+0x3c>
{
 8008512:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8008514:	f001 f89e 	bl	8009654 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008518:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <prvCheckTasksWaitingTermination+0x44>)
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800851e:	1d20      	adds	r0, r4, #4
 8008520:	f7ff fa65 	bl	80079ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008524:	4a0b      	ldr	r2, [pc, #44]	; (8008554 <prvCheckTasksWaitingTermination+0x48>)
 8008526:	6813      	ldr	r3, [r2, #0]
 8008528:	3b01      	subs	r3, #1
 800852a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800852c:	4a07      	ldr	r2, [pc, #28]	; (800854c <prvCheckTasksWaitingTermination+0x40>)
 800852e:	6813      	ldr	r3, [r2, #0]
 8008530:	3b01      	subs	r3, #1
 8008532:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8008534:	f001 f8b0 	bl	8009698 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008538:	4620      	mov	r0, r4
 800853a:	f7ff ffcb 	bl	80084d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800853e:	4b03      	ldr	r3, [pc, #12]	; (800854c <prvCheckTasksWaitingTermination+0x40>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1e6      	bne.n	8008514 <prvCheckTasksWaitingTermination+0x8>
}
 8008546:	bd10      	pop	{r4, pc}
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	200008a8 	.word	0x200008a8
 8008550:	20000918 	.word	0x20000918
 8008554:	200008a4 	.word	0x200008a4

08008558 <prvIdleTask>:
{
 8008558:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800855a:	f7ff ffd7 	bl	800850c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800855e:	4b06      	ldr	r3, [pc, #24]	; (8008578 <prvIdleTask+0x20>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d9f9      	bls.n	800855a <prvIdleTask+0x2>
				taskYIELD();
 8008566:	4b05      	ldr	r3, [pc, #20]	; (800857c <prvIdleTask+0x24>)
 8008568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	e7f0      	b.n	800855a <prvIdleTask+0x2>
 8008578:	20000814 	.word	0x20000814
 800857c:	e000ed04 	.word	0xe000ed04

08008580 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	4604      	mov	r4, r0
 8008584:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008586:	4b1d      	ldr	r3, [pc, #116]	; (80085fc <prvAddCurrentTaskToDelayedList+0x7c>)
 8008588:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800858a:	4b1d      	ldr	r3, [pc, #116]	; (8008600 <prvAddCurrentTaskToDelayedList+0x80>)
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	3004      	adds	r0, #4
 8008590:	f7ff fa2d 	bl	80079ee <uxListRemove>
 8008594:	b950      	cbnz	r0, 80085ac <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008596:	4b1a      	ldr	r3, [pc, #104]	; (8008600 <prvAddCurrentTaskToDelayedList+0x80>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859c:	2301      	movs	r3, #1
 800859e:	fa03 f202 	lsl.w	r2, r3, r2
 80085a2:	4918      	ldr	r1, [pc, #96]	; (8008604 <prvAddCurrentTaskToDelayedList+0x84>)
 80085a4:	680b      	ldr	r3, [r1, #0]
 80085a6:	ea23 0302 	bic.w	r3, r3, r2
 80085aa:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085ac:	f1b4 3fff 	cmp.w	r4, #4294967295
 80085b0:	d013      	beq.n	80085da <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085b2:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085b4:	4b12      	ldr	r3, [pc, #72]	; (8008600 <prvAddCurrentTaskToDelayedList+0x80>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80085ba:	42a5      	cmp	r5, r4
 80085bc:	d816      	bhi.n	80085ec <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085be:	4b12      	ldr	r3, [pc, #72]	; (8008608 <prvAddCurrentTaskToDelayedList+0x88>)
 80085c0:	6818      	ldr	r0, [r3, #0]
 80085c2:	4b0f      	ldr	r3, [pc, #60]	; (8008600 <prvAddCurrentTaskToDelayedList+0x80>)
 80085c4:	6819      	ldr	r1, [r3, #0]
 80085c6:	3104      	adds	r1, #4
 80085c8:	f7ff f9f7 	bl	80079ba <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80085cc:	4b0f      	ldr	r3, [pc, #60]	; (800860c <prvAddCurrentTaskToDelayedList+0x8c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	42a3      	cmp	r3, r4
 80085d2:	d912      	bls.n	80085fa <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80085d4:	4b0d      	ldr	r3, [pc, #52]	; (800860c <prvAddCurrentTaskToDelayedList+0x8c>)
 80085d6:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085d8:	e00f      	b.n	80085fa <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085da:	2e00      	cmp	r6, #0
 80085dc:	d0e9      	beq.n	80085b2 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085de:	4b08      	ldr	r3, [pc, #32]	; (8008600 <prvAddCurrentTaskToDelayedList+0x80>)
 80085e0:	6819      	ldr	r1, [r3, #0]
 80085e2:	3104      	adds	r1, #4
 80085e4:	480a      	ldr	r0, [pc, #40]	; (8008610 <prvAddCurrentTaskToDelayedList+0x90>)
 80085e6:	f7ff f9dc 	bl	80079a2 <vListInsertEnd>
 80085ea:	e006      	b.n	80085fa <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085ec:	4b09      	ldr	r3, [pc, #36]	; (8008614 <prvAddCurrentTaskToDelayedList+0x94>)
 80085ee:	6818      	ldr	r0, [r3, #0]
 80085f0:	4b03      	ldr	r3, [pc, #12]	; (8008600 <prvAddCurrentTaskToDelayedList+0x80>)
 80085f2:	6819      	ldr	r1, [r3, #0]
 80085f4:	3104      	adds	r1, #4
 80085f6:	f7ff f9e0 	bl	80079ba <vListInsert>
}
 80085fa:	bd70      	pop	{r4, r5, r6, pc}
 80085fc:	2000092c 	.word	0x2000092c
 8008600:	20000808 	.word	0x20000808
 8008604:	200008b8 	.word	0x200008b8
 8008608:	2000080c 	.word	0x2000080c
 800860c:	200008e4 	.word	0x200008e4
 8008610:	20000904 	.word	0x20000904
 8008614:	20000810 	.word	0x20000810

08008618 <xTaskCreateStatic>:
	{
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800861e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8008620:	b945      	cbnz	r5, 8008634 <xTaskCreateStatic+0x1c>
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	e7fe      	b.n	8008632 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008634:	b944      	cbnz	r4, 8008648 <xTaskCreateStatic+0x30>
 8008636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	e7fe      	b.n	8008646 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008648:	2664      	movs	r6, #100	; 0x64
 800864a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800864c:	9e04      	ldr	r6, [sp, #16]
 800864e:	2e64      	cmp	r6, #100	; 0x64
 8008650:	d008      	beq.n	8008664 <xTaskCreateStatic+0x4c>
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	e7fe      	b.n	8008662 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008664:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008666:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008668:	2502      	movs	r5, #2
 800866a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800866e:	2500      	movs	r5, #0
 8008670:	9503      	str	r5, [sp, #12]
 8008672:	9402      	str	r4, [sp, #8]
 8008674:	ad05      	add	r5, sp, #20
 8008676:	9501      	str	r5, [sp, #4]
 8008678:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800867a:	9500      	str	r5, [sp, #0]
 800867c:	f7ff fe50 	bl	8008320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008680:	4620      	mov	r0, r4
 8008682:	f7ff fed1 	bl	8008428 <prvAddNewTaskToReadyList>
	}
 8008686:	9805      	ldr	r0, [sp, #20]
 8008688:	b006      	add	sp, #24
 800868a:	bd70      	pop	{r4, r5, r6, pc}

0800868c <xTaskCreate>:
	{
 800868c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008690:	b085      	sub	sp, #20
 8008692:	4607      	mov	r7, r0
 8008694:	4688      	mov	r8, r1
 8008696:	4615      	mov	r5, r2
 8008698:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800869a:	0090      	lsls	r0, r2, #2
 800869c:	f001 f990 	bl	80099c0 <pvPortMalloc>
			if( pxStack != NULL )
 80086a0:	b308      	cbz	r0, 80086e6 <xTaskCreate+0x5a>
 80086a2:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80086a4:	2064      	movs	r0, #100	; 0x64
 80086a6:	f001 f98b 	bl	80099c0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80086aa:	4604      	mov	r4, r0
 80086ac:	b1b8      	cbz	r0, 80086de <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 80086ae:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80086b0:	b1e4      	cbz	r4, 80086ec <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80086b2:	2300      	movs	r3, #0
 80086b4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086b8:	9303      	str	r3, [sp, #12]
 80086ba:	9402      	str	r4, [sp, #8]
 80086bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086be:	9301      	str	r3, [sp, #4]
 80086c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	464b      	mov	r3, r9
 80086c6:	462a      	mov	r2, r5
 80086c8:	4641      	mov	r1, r8
 80086ca:	4638      	mov	r0, r7
 80086cc:	f7ff fe28 	bl	8008320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7ff fea9 	bl	8008428 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80086d6:	2001      	movs	r0, #1
	}
 80086d8:	b005      	add	sp, #20
 80086da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80086de:	4630      	mov	r0, r6
 80086e0:	f001 f9f2 	bl	8009ac8 <vPortFree>
 80086e4:	e7e4      	b.n	80086b0 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80086e6:	f04f 30ff 	mov.w	r0, #4294967295
 80086ea:	e7f5      	b.n	80086d8 <xTaskCreate+0x4c>
 80086ec:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80086f0:	e7f2      	b.n	80086d8 <xTaskCreate+0x4c>
	...

080086f4 <vTaskStartScheduler>:
{
 80086f4:	b510      	push	{r4, lr}
 80086f6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086f8:	2400      	movs	r4, #0
 80086fa:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086fc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086fe:	aa07      	add	r2, sp, #28
 8008700:	a906      	add	r1, sp, #24
 8008702:	a805      	add	r0, sp, #20
 8008704:	f7fa f9e6 	bl	8002ad4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008708:	9b05      	ldr	r3, [sp, #20]
 800870a:	9302      	str	r3, [sp, #8]
 800870c:	9b06      	ldr	r3, [sp, #24]
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	9400      	str	r4, [sp, #0]
 8008712:	4623      	mov	r3, r4
 8008714:	9a07      	ldr	r2, [sp, #28]
 8008716:	4918      	ldr	r1, [pc, #96]	; (8008778 <vTaskStartScheduler+0x84>)
 8008718:	4818      	ldr	r0, [pc, #96]	; (800877c <vTaskStartScheduler+0x88>)
 800871a:	f7ff ff7d 	bl	8008618 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800871e:	b140      	cbz	r0, 8008732 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 8008720:	f000 fd38 	bl	8009194 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008724:	2801      	cmp	r0, #1
 8008726:	d006      	beq.n	8008736 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008728:	f1b0 3fff 	cmp.w	r0, #4294967295
 800872c:	d01a      	beq.n	8008764 <vTaskStartScheduler+0x70>
}
 800872e:	b008      	add	sp, #32
 8008730:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8008732:	2000      	movs	r0, #0
 8008734:	e7f6      	b.n	8008724 <vTaskStartScheduler+0x30>
 8008736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8008746:	4b0e      	ldr	r3, [pc, #56]	; (8008780 <vTaskStartScheduler+0x8c>)
 8008748:	f04f 32ff 	mov.w	r2, #4294967295
 800874c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800874e:	4b0d      	ldr	r3, [pc, #52]	; (8008784 <vTaskStartScheduler+0x90>)
 8008750:	2201      	movs	r2, #1
 8008752:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008754:	4b0c      	ldr	r3, [pc, #48]	; (8008788 <vTaskStartScheduler+0x94>)
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800875a:	f7fa f9b7 	bl	8002acc <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800875e:	f001 f81b 	bl	8009798 <xPortStartScheduler>
 8008762:	e7e4      	b.n	800872e <vTaskStartScheduler+0x3a>
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	e7fe      	b.n	8008774 <vTaskStartScheduler+0x80>
 8008776:	bf00      	nop
 8008778:	0800a7f0 	.word	0x0800a7f0
 800877c:	08008559 	.word	0x08008559
 8008780:	200008e4 	.word	0x200008e4
 8008784:	20000900 	.word	0x20000900
 8008788:	2000092c 	.word	0x2000092c

0800878c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800878c:	4a02      	ldr	r2, [pc, #8]	; (8008798 <vTaskSuspendAll+0xc>)
 800878e:	6813      	ldr	r3, [r2, #0]
 8008790:	3301      	adds	r3, #1
 8008792:	6013      	str	r3, [r2, #0]
}
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	200008b0 	.word	0x200008b0

0800879c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800879c:	4b01      	ldr	r3, [pc, #4]	; (80087a4 <xTaskGetTickCount+0x8>)
 800879e:	6818      	ldr	r0, [r3, #0]
}
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	2000092c 	.word	0x2000092c

080087a8 <xTaskIncrementTick>:
{
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087aa:	4b3a      	ldr	r3, [pc, #232]	; (8008894 <xTaskIncrementTick+0xec>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d164      	bne.n	800887c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087b2:	4b39      	ldr	r3, [pc, #228]	; (8008898 <xTaskIncrementTick+0xf0>)
 80087b4:	681d      	ldr	r5, [r3, #0]
 80087b6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80087b8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087ba:	b9c5      	cbnz	r5, 80087ee <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80087bc:	4b37      	ldr	r3, [pc, #220]	; (800889c <xTaskIncrementTick+0xf4>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	b143      	cbz	r3, 80087d6 <xTaskIncrementTick+0x2e>
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	e7fe      	b.n	80087d4 <xTaskIncrementTick+0x2c>
 80087d6:	4a31      	ldr	r2, [pc, #196]	; (800889c <xTaskIncrementTick+0xf4>)
 80087d8:	6811      	ldr	r1, [r2, #0]
 80087da:	4b31      	ldr	r3, [pc, #196]	; (80088a0 <xTaskIncrementTick+0xf8>)
 80087dc:	6818      	ldr	r0, [r3, #0]
 80087de:	6010      	str	r0, [r2, #0]
 80087e0:	6019      	str	r1, [r3, #0]
 80087e2:	4a30      	ldr	r2, [pc, #192]	; (80088a4 <xTaskIncrementTick+0xfc>)
 80087e4:	6813      	ldr	r3, [r2, #0]
 80087e6:	3301      	adds	r3, #1
 80087e8:	6013      	str	r3, [r2, #0]
 80087ea:	f7ff fd83 	bl	80082f4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087ee:	4b2e      	ldr	r3, [pc, #184]	; (80088a8 <xTaskIncrementTick+0x100>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	42ab      	cmp	r3, r5
 80087f4:	d938      	bls.n	8008868 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 80087f6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087f8:	4b2c      	ldr	r3, [pc, #176]	; (80088ac <xTaskIncrementTick+0x104>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008802:	009a      	lsls	r2, r3, #2
 8008804:	4b2a      	ldr	r3, [pc, #168]	; (80088b0 <xTaskIncrementTick+0x108>)
 8008806:	589b      	ldr	r3, [r3, r2]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d93c      	bls.n	8008886 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 800880c:	2401      	movs	r4, #1
 800880e:	e03a      	b.n	8008886 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8008810:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008812:	4b22      	ldr	r3, [pc, #136]	; (800889c <xTaskIncrementTick+0xf4>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	b343      	cbz	r3, 800886c <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800881a:	4b20      	ldr	r3, [pc, #128]	; (800889c <xTaskIncrementTick+0xf4>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008822:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8008824:	429d      	cmp	r5, r3
 8008826:	d326      	bcc.n	8008876 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008828:	1d37      	adds	r7, r6, #4
 800882a:	4638      	mov	r0, r7
 800882c:	f7ff f8df 	bl	80079ee <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008830:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008832:	b11b      	cbz	r3, 800883c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008834:	f106 0018 	add.w	r0, r6, #24
 8008838:	f7ff f8d9 	bl	80079ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800883c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800883e:	2201      	movs	r2, #1
 8008840:	409a      	lsls	r2, r3
 8008842:	491c      	ldr	r1, [pc, #112]	; (80088b4 <xTaskIncrementTick+0x10c>)
 8008844:	6808      	ldr	r0, [r1, #0]
 8008846:	4302      	orrs	r2, r0
 8008848:	600a      	str	r2, [r1, #0]
 800884a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800884e:	009a      	lsls	r2, r3, #2
 8008850:	4639      	mov	r1, r7
 8008852:	4817      	ldr	r0, [pc, #92]	; (80088b0 <xTaskIncrementTick+0x108>)
 8008854:	4410      	add	r0, r2
 8008856:	f7ff f8a4 	bl	80079a2 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800885a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800885c:	4b13      	ldr	r3, [pc, #76]	; (80088ac <xTaskIncrementTick+0x104>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008862:	429a      	cmp	r2, r3
 8008864:	d2d4      	bcs.n	8008810 <xTaskIncrementTick+0x68>
 8008866:	e7d4      	b.n	8008812 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8008868:	2400      	movs	r4, #0
 800886a:	e7d2      	b.n	8008812 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800886c:	4b0e      	ldr	r3, [pc, #56]	; (80088a8 <xTaskIncrementTick+0x100>)
 800886e:	f04f 32ff 	mov.w	r2, #4294967295
 8008872:	601a      	str	r2, [r3, #0]
					break;
 8008874:	e7c0      	b.n	80087f8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8008876:	4a0c      	ldr	r2, [pc, #48]	; (80088a8 <xTaskIncrementTick+0x100>)
 8008878:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800887a:	e7bd      	b.n	80087f8 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800887c:	4a0e      	ldr	r2, [pc, #56]	; (80088b8 <xTaskIncrementTick+0x110>)
 800887e:	6813      	ldr	r3, [r2, #0]
 8008880:	3301      	adds	r3, #1
 8008882:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8008884:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8008886:	4b0d      	ldr	r3, [pc, #52]	; (80088bc <xTaskIncrementTick+0x114>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	b103      	cbz	r3, 800888e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800888c:	2401      	movs	r4, #1
}
 800888e:	4620      	mov	r0, r4
 8008890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008892:	bf00      	nop
 8008894:	200008b0 	.word	0x200008b0
 8008898:	2000092c 	.word	0x2000092c
 800889c:	2000080c 	.word	0x2000080c
 80088a0:	20000810 	.word	0x20000810
 80088a4:	200008e8 	.word	0x200008e8
 80088a8:	200008e4 	.word	0x200008e4
 80088ac:	20000808 	.word	0x20000808
 80088b0:	20000814 	.word	0x20000814
 80088b4:	200008b8 	.word	0x200008b8
 80088b8:	200008ac 	.word	0x200008ac
 80088bc:	20000930 	.word	0x20000930

080088c0 <xTaskResumeAll>:
{
 80088c0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80088c2:	4b33      	ldr	r3, [pc, #204]	; (8008990 <xTaskResumeAll+0xd0>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	b943      	cbnz	r3, 80088da <xTaskResumeAll+0x1a>
 80088c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	e7fe      	b.n	80088d8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80088da:	f000 febb 	bl	8009654 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80088de:	4b2c      	ldr	r3, [pc, #176]	; (8008990 <xTaskResumeAll+0xd0>)
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	3a01      	subs	r2, #1
 80088e4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d14d      	bne.n	8008988 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088ec:	4b29      	ldr	r3, [pc, #164]	; (8008994 <xTaskResumeAll+0xd4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	b923      	cbnz	r3, 80088fc <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 80088f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80088f4:	f000 fed0 	bl	8009698 <vPortExitCritical>
}
 80088f8:	4620      	mov	r0, r4
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 80088fc:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088fe:	4b26      	ldr	r3, [pc, #152]	; (8008998 <xTaskResumeAll+0xd8>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	b31b      	cbz	r3, 800894c <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008904:	4b24      	ldr	r3, [pc, #144]	; (8008998 <xTaskResumeAll+0xd8>)
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800890a:	f104 0018 	add.w	r0, r4, #24
 800890e:	f7ff f86e 	bl	80079ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008912:	1d25      	adds	r5, r4, #4
 8008914:	4628      	mov	r0, r5
 8008916:	f7ff f86a 	bl	80079ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800891a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800891c:	2201      	movs	r2, #1
 800891e:	409a      	lsls	r2, r3
 8008920:	491e      	ldr	r1, [pc, #120]	; (800899c <xTaskResumeAll+0xdc>)
 8008922:	6808      	ldr	r0, [r1, #0]
 8008924:	4302      	orrs	r2, r0
 8008926:	600a      	str	r2, [r1, #0]
 8008928:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800892c:	009a      	lsls	r2, r3, #2
 800892e:	4629      	mov	r1, r5
 8008930:	481b      	ldr	r0, [pc, #108]	; (80089a0 <xTaskResumeAll+0xe0>)
 8008932:	4410      	add	r0, r2
 8008934:	f7ff f835 	bl	80079a2 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008938:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800893a:	4b1a      	ldr	r3, [pc, #104]	; (80089a4 <xTaskResumeAll+0xe4>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	429a      	cmp	r2, r3
 8008942:	d3dc      	bcc.n	80088fe <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8008944:	4b18      	ldr	r3, [pc, #96]	; (80089a8 <xTaskResumeAll+0xe8>)
 8008946:	2201      	movs	r2, #1
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	e7d8      	b.n	80088fe <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 800894c:	b10c      	cbz	r4, 8008952 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800894e:	f7ff fcd1 	bl	80082f4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008952:	4b16      	ldr	r3, [pc, #88]	; (80089ac <xTaskResumeAll+0xec>)
 8008954:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008956:	b154      	cbz	r4, 800896e <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8008958:	f7ff ff26 	bl	80087a8 <xTaskIncrementTick>
 800895c:	b110      	cbz	r0, 8008964 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800895e:	4b12      	ldr	r3, [pc, #72]	; (80089a8 <xTaskResumeAll+0xe8>)
 8008960:	2201      	movs	r2, #1
 8008962:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008964:	3c01      	subs	r4, #1
 8008966:	d1f7      	bne.n	8008958 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8008968:	4b10      	ldr	r3, [pc, #64]	; (80089ac <xTaskResumeAll+0xec>)
 800896a:	2200      	movs	r2, #0
 800896c:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800896e:	4b0e      	ldr	r3, [pc, #56]	; (80089a8 <xTaskResumeAll+0xe8>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	b15b      	cbz	r3, 800898c <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8008974:	4b0e      	ldr	r3, [pc, #56]	; (80089b0 <xTaskResumeAll+0xf0>)
 8008976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800897a:	601a      	str	r2, [r3, #0]
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008984:	2401      	movs	r4, #1
 8008986:	e7b5      	b.n	80088f4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8008988:	2400      	movs	r4, #0
 800898a:	e7b3      	b.n	80088f4 <xTaskResumeAll+0x34>
 800898c:	2400      	movs	r4, #0
 800898e:	e7b1      	b.n	80088f4 <xTaskResumeAll+0x34>
 8008990:	200008b0 	.word	0x200008b0
 8008994:	200008a4 	.word	0x200008a4
 8008998:	200008ec 	.word	0x200008ec
 800899c:	200008b8 	.word	0x200008b8
 80089a0:	20000814 	.word	0x20000814
 80089a4:	20000808 	.word	0x20000808
 80089a8:	20000930 	.word	0x20000930
 80089ac:	200008ac 	.word	0x200008ac
 80089b0:	e000ed04 	.word	0xe000ed04

080089b4 <vTaskDelayUntil>:
	{
 80089b4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 80089b6:	b150      	cbz	r0, 80089ce <vTaskDelayUntil+0x1a>
 80089b8:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 80089ba:	b989      	cbnz	r1, 80089e0 <vTaskDelayUntil+0x2c>
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	e7fe      	b.n	80089cc <vTaskDelayUntil+0x18>
 80089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	e7fe      	b.n	80089de <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
 80089e0:	4b1a      	ldr	r3, [pc, #104]	; (8008a4c <vTaskDelayUntil+0x98>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	b143      	cbz	r3, 80089f8 <vTaskDelayUntil+0x44>
 80089e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	e7fe      	b.n	80089f6 <vTaskDelayUntil+0x42>
 80089f8:	460c      	mov	r4, r1
		vTaskSuspendAll();
 80089fa:	f7ff fec7 	bl	800878c <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 80089fe:	4b14      	ldr	r3, [pc, #80]	; (8008a50 <vTaskDelayUntil+0x9c>)
 8008a00:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008a02:	682a      	ldr	r2, [r5, #0]
 8008a04:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
 8008a06:	4282      	cmp	r2, r0
 8008a08:	d918      	bls.n	8008a3c <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008a0a:	42a2      	cmp	r2, r4
 8008a0c:	d80c      	bhi.n	8008a28 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
 8008a0e:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
 8008a10:	f7ff ff56 	bl	80088c0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008a14:	b938      	cbnz	r0, 8008a26 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
 8008a16:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <vTaskDelayUntil+0xa0>)
 8008a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	f3bf 8f6f 	isb	sy
	}
 8008a26:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008a28:	42a0      	cmp	r0, r4
 8008a2a:	d301      	bcc.n	8008a30 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 8008a2c:	602c      	str	r4, [r5, #0]
 8008a2e:	e7ef      	b.n	8008a10 <vTaskDelayUntil+0x5c>
 8008a30:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008a32:	2100      	movs	r1, #0
 8008a34:	1a20      	subs	r0, r4, r0
 8008a36:	f7ff fda3 	bl	8008580 <prvAddCurrentTaskToDelayedList>
 8008a3a:	e7e9      	b.n	8008a10 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008a3c:	42a2      	cmp	r2, r4
 8008a3e:	d801      	bhi.n	8008a44 <vTaskDelayUntil+0x90>
 8008a40:	42a0      	cmp	r0, r4
 8008a42:	d201      	bcs.n	8008a48 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
 8008a44:	602c      	str	r4, [r5, #0]
 8008a46:	e7f4      	b.n	8008a32 <vTaskDelayUntil+0x7e>
 8008a48:	602c      	str	r4, [r5, #0]
 8008a4a:	e7e1      	b.n	8008a10 <vTaskDelayUntil+0x5c>
 8008a4c:	200008b0 	.word	0x200008b0
 8008a50:	2000092c 	.word	0x2000092c
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <vTaskDelay>:
	{
 8008a58:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a5a:	b1a8      	cbz	r0, 8008a88 <vTaskDelay+0x30>
 8008a5c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8008a5e:	4b0f      	ldr	r3, [pc, #60]	; (8008a9c <vTaskDelay+0x44>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	b143      	cbz	r3, 8008a76 <vTaskDelay+0x1e>
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	e7fe      	b.n	8008a74 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8008a76:	f7ff fe89 	bl	800878c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f7ff fd7f 	bl	8008580 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008a82:	f7ff ff1d 	bl	80088c0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008a86:	b938      	cbnz	r0, 8008a98 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8008a88:	4b05      	ldr	r3, [pc, #20]	; (8008aa0 <vTaskDelay+0x48>)
 8008a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	f3bf 8f6f 	isb	sy
	}
 8008a98:	bd10      	pop	{r4, pc}
 8008a9a:	bf00      	nop
 8008a9c:	200008b0 	.word	0x200008b0
 8008aa0:	e000ed04 	.word	0xe000ed04

08008aa4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008aa4:	4b26      	ldr	r3, [pc, #152]	; (8008b40 <vTaskSwitchContext+0x9c>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	b11b      	cbz	r3, 8008ab2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8008aaa:	4b26      	ldr	r3, [pc, #152]	; (8008b44 <vTaskSwitchContext+0xa0>)
 8008aac:	2201      	movs	r2, #1
 8008aae:	601a      	str	r2, [r3, #0]
 8008ab0:	4770      	bx	lr
{
 8008ab2:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 8008ab4:	4b23      	ldr	r3, [pc, #140]	; (8008b44 <vTaskSwitchContext+0xa0>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008aba:	f7fa f808 	bl	8002ace <getRunTimeCounterValue>
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8008abe:	4b22      	ldr	r3, [pc, #136]	; (8008b48 <vTaskSwitchContext+0xa4>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4298      	cmp	r0, r3
 8008ac4:	d905      	bls.n	8008ad2 <vTaskSwitchContext+0x2e>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8008ac6:	4a21      	ldr	r2, [pc, #132]	; (8008b4c <vTaskSwitchContext+0xa8>)
 8008ac8:	6811      	ldr	r1, [r2, #0]
 8008aca:	1ac3      	subs	r3, r0, r3
 8008acc:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008ace:	4413      	add	r3, r2
 8008ad0:	658b      	str	r3, [r1, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8008ad2:	4b1d      	ldr	r3, [pc, #116]	; (8008b48 <vTaskSwitchContext+0xa4>)
 8008ad4:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad6:	4b1e      	ldr	r3, [pc, #120]	; (8008b50 <vTaskSwitchContext+0xac>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008ada:	fab3 f383 	clz	r3, r3
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	f1c3 031f 	rsb	r3, r3, #31
 8008ae4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008ae8:	008a      	lsls	r2, r1, #2
 8008aea:	491a      	ldr	r1, [pc, #104]	; (8008b54 <vTaskSwitchContext+0xb0>)
 8008aec:	588a      	ldr	r2, [r1, r2]
 8008aee:	b942      	cbnz	r2, 8008b02 <vTaskSwitchContext+0x5e>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	e7fe      	b.n	8008b00 <vTaskSwitchContext+0x5c>
 8008b02:	4814      	ldr	r0, [pc, #80]	; (8008b54 <vTaskSwitchContext+0xb0>)
 8008b04:	009a      	lsls	r2, r3, #2
 8008b06:	18d4      	adds	r4, r2, r3
 8008b08:	00a1      	lsls	r1, r4, #2
 8008b0a:	4401      	add	r1, r0
 8008b0c:	684c      	ldr	r4, [r1, #4]
 8008b0e:	6864      	ldr	r4, [r4, #4]
 8008b10:	604c      	str	r4, [r1, #4]
 8008b12:	441a      	add	r2, r3
 8008b14:	0091      	lsls	r1, r2, #2
 8008b16:	3108      	adds	r1, #8
 8008b18:	4408      	add	r0, r1
 8008b1a:	4284      	cmp	r4, r0
 8008b1c:	d009      	beq.n	8008b32 <vTaskSwitchContext+0x8e>
 8008b1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008b22:	009a      	lsls	r2, r3, #2
 8008b24:	4b0b      	ldr	r3, [pc, #44]	; (8008b54 <vTaskSwitchContext+0xb0>)
 8008b26:	4413      	add	r3, r2
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	68da      	ldr	r2, [r3, #12]
 8008b2c:	4b07      	ldr	r3, [pc, #28]	; (8008b4c <vTaskSwitchContext+0xa8>)
 8008b2e:	601a      	str	r2, [r3, #0]
}
 8008b30:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b32:	6861      	ldr	r1, [r4, #4]
 8008b34:	4807      	ldr	r0, [pc, #28]	; (8008b54 <vTaskSwitchContext+0xb0>)
 8008b36:	2214      	movs	r2, #20
 8008b38:	fb02 0203 	mla	r2, r2, r3, r0
 8008b3c:	6051      	str	r1, [r2, #4]
 8008b3e:	e7ee      	b.n	8008b1e <vTaskSwitchContext+0x7a>
 8008b40:	200008b0 	.word	0x200008b0
 8008b44:	20000930 	.word	0x20000930
 8008b48:	200008a0 	.word	0x200008a0
 8008b4c:	20000808 	.word	0x20000808
 8008b50:	200008b8 	.word	0x200008b8
 8008b54:	20000814 	.word	0x20000814

08008b58 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8008b58:	b940      	cbnz	r0, 8008b6c <vTaskPlaceOnEventList+0x14>
 8008b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	e7fe      	b.n	8008b6a <vTaskPlaceOnEventList+0x12>
{
 8008b6c:	b510      	push	{r4, lr}
 8008b6e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b70:	4b04      	ldr	r3, [pc, #16]	; (8008b84 <vTaskPlaceOnEventList+0x2c>)
 8008b72:	6819      	ldr	r1, [r3, #0]
 8008b74:	3118      	adds	r1, #24
 8008b76:	f7fe ff20 	bl	80079ba <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f7ff fcff 	bl	8008580 <prvAddCurrentTaskToDelayedList>
}
 8008b82:	bd10      	pop	{r4, pc}
 8008b84:	20000808 	.word	0x20000808

08008b88 <vTaskPlaceOnEventListRestricted>:
	{
 8008b88:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8008b8a:	b940      	cbnz	r0, 8008b9e <vTaskPlaceOnEventListRestricted+0x16>
 8008b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	e7fe      	b.n	8008b9c <vTaskPlaceOnEventListRestricted+0x14>
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ba2:	4a06      	ldr	r2, [pc, #24]	; (8008bbc <vTaskPlaceOnEventListRestricted+0x34>)
 8008ba4:	6811      	ldr	r1, [r2, #0]
 8008ba6:	3118      	adds	r1, #24
 8008ba8:	f7fe fefb 	bl	80079a2 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8008bac:	b10d      	cbz	r5, 8008bb2 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 8008bae:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f7ff fce3 	bl	8008580 <prvAddCurrentTaskToDelayedList>
	}
 8008bba:	bd38      	pop	{r3, r4, r5, pc}
 8008bbc:	20000808 	.word	0x20000808

08008bc0 <xTaskRemoveFromEventList>:
{
 8008bc0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc2:	68c3      	ldr	r3, [r0, #12]
 8008bc4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008bc6:	b944      	cbnz	r4, 8008bda <xTaskRemoveFromEventList+0x1a>
 8008bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	e7fe      	b.n	8008bd8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bda:	f104 0518 	add.w	r5, r4, #24
 8008bde:	4628      	mov	r0, r5
 8008be0:	f7fe ff05 	bl	80079ee <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008be4:	4b13      	ldr	r3, [pc, #76]	; (8008c34 <xTaskRemoveFromEventList+0x74>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	b9e3      	cbnz	r3, 8008c24 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008bea:	1d25      	adds	r5, r4, #4
 8008bec:	4628      	mov	r0, r5
 8008bee:	f7fe fefe 	bl	80079ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008bf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	409a      	lsls	r2, r3
 8008bf8:	490f      	ldr	r1, [pc, #60]	; (8008c38 <xTaskRemoveFromEventList+0x78>)
 8008bfa:	6808      	ldr	r0, [r1, #0]
 8008bfc:	4302      	orrs	r2, r0
 8008bfe:	600a      	str	r2, [r1, #0]
 8008c00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008c04:	009a      	lsls	r2, r3, #2
 8008c06:	4629      	mov	r1, r5
 8008c08:	480c      	ldr	r0, [pc, #48]	; (8008c3c <xTaskRemoveFromEventList+0x7c>)
 8008c0a:	4410      	add	r0, r2
 8008c0c:	f7fe fec9 	bl	80079a2 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008c12:	4b0b      	ldr	r3, [pc, #44]	; (8008c40 <xTaskRemoveFromEventList+0x80>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d908      	bls.n	8008c2e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8008c1c:	2001      	movs	r0, #1
 8008c1e:	4b09      	ldr	r3, [pc, #36]	; (8008c44 <xTaskRemoveFromEventList+0x84>)
 8008c20:	6018      	str	r0, [r3, #0]
}
 8008c22:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c24:	4629      	mov	r1, r5
 8008c26:	4808      	ldr	r0, [pc, #32]	; (8008c48 <xTaskRemoveFromEventList+0x88>)
 8008c28:	f7fe febb 	bl	80079a2 <vListInsertEnd>
 8008c2c:	e7f0      	b.n	8008c10 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8008c2e:	2000      	movs	r0, #0
	return xReturn;
 8008c30:	e7f7      	b.n	8008c22 <xTaskRemoveFromEventList+0x62>
 8008c32:	bf00      	nop
 8008c34:	200008b0 	.word	0x200008b0
 8008c38:	200008b8 	.word	0x200008b8
 8008c3c:	20000814 	.word	0x20000814
 8008c40:	20000808 	.word	0x20000808
 8008c44:	20000930 	.word	0x20000930
 8008c48:	200008ec 	.word	0x200008ec

08008c4c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c4c:	4b03      	ldr	r3, [pc, #12]	; (8008c5c <vTaskInternalSetTimeOutState+0x10>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c52:	4b03      	ldr	r3, [pc, #12]	; (8008c60 <vTaskInternalSetTimeOutState+0x14>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	6043      	str	r3, [r0, #4]
}
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	200008e8 	.word	0x200008e8
 8008c60:	2000092c 	.word	0x2000092c

08008c64 <xTaskCheckForTimeOut>:
{
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8008c66:	b150      	cbz	r0, 8008c7e <xTaskCheckForTimeOut+0x1a>
 8008c68:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8008c6a:	b989      	cbnz	r1, 8008c90 <xTaskCheckForTimeOut+0x2c>
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	e7fe      	b.n	8008c7c <xTaskCheckForTimeOut+0x18>
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	e7fe      	b.n	8008c8e <xTaskCheckForTimeOut+0x2a>
 8008c90:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8008c92:	f000 fcdf 	bl	8009654 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008c96:	4b11      	ldr	r3, [pc, #68]	; (8008cdc <xTaskCheckForTimeOut+0x78>)
 8008c98:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c9a:	6868      	ldr	r0, [r5, #4]
 8008c9c:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8008c9e:	6823      	ldr	r3, [r4, #0]
 8008ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca4:	d016      	beq.n	8008cd4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ca6:	682f      	ldr	r7, [r5, #0]
 8008ca8:	4e0d      	ldr	r6, [pc, #52]	; (8008ce0 <xTaskCheckForTimeOut+0x7c>)
 8008caa:	6836      	ldr	r6, [r6, #0]
 8008cac:	42b7      	cmp	r7, r6
 8008cae:	d001      	beq.n	8008cb4 <xTaskCheckForTimeOut+0x50>
 8008cb0:	4288      	cmp	r0, r1
 8008cb2:	d911      	bls.n	8008cd8 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d803      	bhi.n	8008cc0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008cbc:	2401      	movs	r4, #1
 8008cbe:	e005      	b.n	8008ccc <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8008cc0:	1a9b      	subs	r3, r3, r2
 8008cc2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	f7ff ffc1 	bl	8008c4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008cca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008ccc:	f000 fce4 	bl	8009698 <vPortExitCritical>
}
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8008cd4:	2400      	movs	r4, #0
 8008cd6:	e7f9      	b.n	8008ccc <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8008cd8:	2401      	movs	r4, #1
 8008cda:	e7f7      	b.n	8008ccc <xTaskCheckForTimeOut+0x68>
 8008cdc:	2000092c 	.word	0x2000092c
 8008ce0:	200008e8 	.word	0x200008e8

08008ce4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008ce4:	4b01      	ldr	r3, [pc, #4]	; (8008cec <vTaskMissedYield+0x8>)
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	601a      	str	r2, [r3, #0]
}
 8008cea:	4770      	bx	lr
 8008cec:	20000930 	.word	0x20000930

08008cf0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8008cf0:	4b01      	ldr	r3, [pc, #4]	; (8008cf8 <xTaskGetCurrentTaskHandle+0x8>)
 8008cf2:	6818      	ldr	r0, [r3, #0]
	}
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	20000808 	.word	0x20000808

08008cfc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008cfc:	4b05      	ldr	r3, [pc, #20]	; (8008d14 <xTaskGetSchedulerState+0x18>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	b133      	cbz	r3, 8008d10 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d02:	4b05      	ldr	r3, [pc, #20]	; (8008d18 <xTaskGetSchedulerState+0x1c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	b10b      	cbz	r3, 8008d0c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d08:	2000      	movs	r0, #0
	}
 8008d0a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8008d0c:	2002      	movs	r0, #2
 8008d0e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d10:	2001      	movs	r0, #1
 8008d12:	4770      	bx	lr
 8008d14:	20000900 	.word	0x20000900
 8008d18:	200008b0 	.word	0x200008b0

08008d1c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	d050      	beq.n	8008dc2 <xTaskPriorityInherit+0xa6>
	{
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008d24:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008d26:	4928      	ldr	r1, [pc, #160]	; (8008dc8 <xTaskPriorityInherit+0xac>)
 8008d28:	6809      	ldr	r1, [r1, #0]
 8008d2a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008d2c:	428a      	cmp	r2, r1
 8008d2e:	d23e      	bcs.n	8008dae <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d30:	6981      	ldr	r1, [r0, #24]
 8008d32:	2900      	cmp	r1, #0
 8008d34:	db05      	blt.n	8008d42 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d36:	4924      	ldr	r1, [pc, #144]	; (8008dc8 <xTaskPriorityInherit+0xac>)
 8008d38:	6809      	ldr	r1, [r1, #0]
 8008d3a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008d3c:	f1c1 0107 	rsb	r1, r1, #7
 8008d40:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008d42:	6960      	ldr	r0, [r4, #20]
 8008d44:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008d48:	0091      	lsls	r1, r2, #2
 8008d4a:	4a20      	ldr	r2, [pc, #128]	; (8008dcc <xTaskPriorityInherit+0xb0>)
 8008d4c:	440a      	add	r2, r1
 8008d4e:	4290      	cmp	r0, r2
 8008d50:	d005      	beq.n	8008d5e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d52:	4a1d      	ldr	r2, [pc, #116]	; (8008dc8 <xTaskPriorityInherit+0xac>)
 8008d54:	6812      	ldr	r2, [r2, #0]
 8008d56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008d58:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8008d5a:	2001      	movs	r0, #1
	}
 8008d5c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d5e:	1d25      	adds	r5, r4, #4
 8008d60:	4628      	mov	r0, r5
 8008d62:	f7fe fe44 	bl	80079ee <uxListRemove>
 8008d66:	b968      	cbnz	r0, 8008d84 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008d68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d6a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008d6e:	008a      	lsls	r2, r1, #2
 8008d70:	4916      	ldr	r1, [pc, #88]	; (8008dcc <xTaskPriorityInherit+0xb0>)
 8008d72:	588a      	ldr	r2, [r1, r2]
 8008d74:	b932      	cbnz	r2, 8008d84 <xTaskPriorityInherit+0x68>
 8008d76:	2201      	movs	r2, #1
 8008d78:	409a      	lsls	r2, r3
 8008d7a:	4915      	ldr	r1, [pc, #84]	; (8008dd0 <xTaskPriorityInherit+0xb4>)
 8008d7c:	680b      	ldr	r3, [r1, #0]
 8008d7e:	ea23 0302 	bic.w	r3, r3, r2
 8008d82:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d84:	4b10      	ldr	r3, [pc, #64]	; (8008dc8 <xTaskPriorityInherit+0xac>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008d8c:	2401      	movs	r4, #1
 8008d8e:	fa04 f203 	lsl.w	r2, r4, r3
 8008d92:	490f      	ldr	r1, [pc, #60]	; (8008dd0 <xTaskPriorityInherit+0xb4>)
 8008d94:	6808      	ldr	r0, [r1, #0]
 8008d96:	4302      	orrs	r2, r0
 8008d98:	600a      	str	r2, [r1, #0]
 8008d9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008d9e:	009a      	lsls	r2, r3, #2
 8008da0:	4629      	mov	r1, r5
 8008da2:	480a      	ldr	r0, [pc, #40]	; (8008dcc <xTaskPriorityInherit+0xb0>)
 8008da4:	4410      	add	r0, r2
 8008da6:	f7fe fdfc 	bl	80079a2 <vListInsertEnd>
				xReturn = pdTRUE;
 8008daa:	4620      	mov	r0, r4
 8008dac:	e7d6      	b.n	8008d5c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008dae:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008db0:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <xTaskPriorityInherit+0xac>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d201      	bcs.n	8008dbe <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
 8008dba:	2001      	movs	r0, #1
		return xReturn;
 8008dbc:	e7ce      	b.n	8008d5c <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	e7cc      	b.n	8008d5c <xTaskPriorityInherit+0x40>
 8008dc2:	2000      	movs	r0, #0
	}
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	20000808 	.word	0x20000808
 8008dcc:	20000814 	.word	0x20000814
 8008dd0:	200008b8 	.word	0x200008b8

08008dd4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d049      	beq.n	8008e6c <xTaskPriorityDisinherit+0x98>
	{
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8008ddc:	4a26      	ldr	r2, [pc, #152]	; (8008e78 <xTaskPriorityDisinherit+0xa4>)
 8008dde:	6812      	ldr	r2, [r2, #0]
 8008de0:	4282      	cmp	r2, r0
 8008de2:	d008      	beq.n	8008df6 <xTaskPriorityDisinherit+0x22>
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	e7fe      	b.n	8008df4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8008df6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8008df8:	b942      	cbnz	r2, 8008e0c <xTaskPriorityDisinherit+0x38>
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	e7fe      	b.n	8008e0a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8008e0c:	3a01      	subs	r2, #1
 8008e0e:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e10:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8008e12:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008e14:	4288      	cmp	r0, r1
 8008e16:	d02b      	beq.n	8008e70 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e18:	bb62      	cbnz	r2, 8008e74 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e1a:	1d25      	adds	r5, r4, #4
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	f7fe fde6 	bl	80079ee <uxListRemove>
 8008e22:	b970      	cbnz	r0, 8008e42 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008e26:	2314      	movs	r3, #20
 8008e28:	fb03 f302 	mul.w	r3, r3, r2
 8008e2c:	4913      	ldr	r1, [pc, #76]	; (8008e7c <xTaskPriorityDisinherit+0xa8>)
 8008e2e:	58cb      	ldr	r3, [r1, r3]
 8008e30:	b93b      	cbnz	r3, 8008e42 <xTaskPriorityDisinherit+0x6e>
 8008e32:	2301      	movs	r3, #1
 8008e34:	fa03 f202 	lsl.w	r2, r3, r2
 8008e38:	4911      	ldr	r1, [pc, #68]	; (8008e80 <xTaskPriorityDisinherit+0xac>)
 8008e3a:	680b      	ldr	r3, [r1, #0]
 8008e3c:	ea23 0302 	bic.w	r3, r3, r2
 8008e40:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e42:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008e44:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e46:	f1c3 0207 	rsb	r2, r3, #7
 8008e4a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e4c:	2401      	movs	r4, #1
 8008e4e:	fa04 f203 	lsl.w	r2, r4, r3
 8008e52:	490b      	ldr	r1, [pc, #44]	; (8008e80 <xTaskPriorityDisinherit+0xac>)
 8008e54:	6808      	ldr	r0, [r1, #0]
 8008e56:	4302      	orrs	r2, r0
 8008e58:	600a      	str	r2, [r1, #0]
 8008e5a:	4629      	mov	r1, r5
 8008e5c:	4a07      	ldr	r2, [pc, #28]	; (8008e7c <xTaskPriorityDisinherit+0xa8>)
 8008e5e:	2014      	movs	r0, #20
 8008e60:	fb00 2003 	mla	r0, r0, r3, r2
 8008e64:	f7fe fd9d 	bl	80079a2 <vListInsertEnd>
					xReturn = pdTRUE;
 8008e68:	4620      	mov	r0, r4
	}
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8008e6c:	2000      	movs	r0, #0
	}
 8008e6e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8008e70:	2000      	movs	r0, #0
 8008e72:	e7fa      	b.n	8008e6a <xTaskPriorityDisinherit+0x96>
 8008e74:	2000      	movs	r0, #0
		return xReturn;
 8008e76:	e7f8      	b.n	8008e6a <xTaskPriorityDisinherit+0x96>
 8008e78:	20000808 	.word	0x20000808
 8008e7c:	20000814 	.word	0x20000814
 8008e80:	200008b8 	.word	0x200008b8

08008e84 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d055      	beq.n	8008f34 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8008e8c:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8008e8e:	b940      	cbnz	r0, 8008ea2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8008e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	e7fe      	b.n	8008ea0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ea4:	428a      	cmp	r2, r1
 8008ea6:	d200      	bcs.n	8008eaa <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008ea8:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008eaa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008eac:	4291      	cmp	r1, r2
 8008eae:	d001      	beq.n	8008eb4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008eb0:	2801      	cmp	r0, #1
 8008eb2:	d000      	beq.n	8008eb6 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8008eb4:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8008eb6:	4820      	ldr	r0, [pc, #128]	; (8008f38 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8008eb8:	6800      	ldr	r0, [r0, #0]
 8008eba:	4298      	cmp	r0, r3
 8008ebc:	d108      	bne.n	8008ed0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	e7fe      	b.n	8008ece <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 8008ed0:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ed2:	6998      	ldr	r0, [r3, #24]
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	db02      	blt.n	8008ede <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ed8:	f1c2 0207 	rsb	r2, r2, #7
 8008edc:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ede:	695a      	ldr	r2, [r3, #20]
 8008ee0:	4816      	ldr	r0, [pc, #88]	; (8008f3c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8008ee2:	2414      	movs	r4, #20
 8008ee4:	fb04 0101 	mla	r1, r4, r1, r0
 8008ee8:	428a      	cmp	r2, r1
 8008eea:	d1e3      	bne.n	8008eb4 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8008eec:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008eee:	1d1d      	adds	r5, r3, #4
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	f7fe fd7c 	bl	80079ee <uxListRemove>
 8008ef6:	b970      	cbnz	r0, 8008f16 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008ef8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008efa:	2314      	movs	r3, #20
 8008efc:	fb03 f302 	mul.w	r3, r3, r2
 8008f00:	490e      	ldr	r1, [pc, #56]	; (8008f3c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8008f02:	58cb      	ldr	r3, [r1, r3]
 8008f04:	b93b      	cbnz	r3, 8008f16 <vTaskPriorityDisinheritAfterTimeout+0x92>
 8008f06:	2301      	movs	r3, #1
 8008f08:	fa03 f202 	lsl.w	r2, r3, r2
 8008f0c:	490c      	ldr	r1, [pc, #48]	; (8008f40 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8008f0e:	680b      	ldr	r3, [r1, #0]
 8008f10:	ea23 0302 	bic.w	r3, r3, r2
 8008f14:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 8008f16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008f18:	2301      	movs	r3, #1
 8008f1a:	4093      	lsls	r3, r2
 8008f1c:	4908      	ldr	r1, [pc, #32]	; (8008f40 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8008f1e:	6808      	ldr	r0, [r1, #0]
 8008f20:	4303      	orrs	r3, r0
 8008f22:	600b      	str	r3, [r1, #0]
 8008f24:	4629      	mov	r1, r5
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8008f28:	2014      	movs	r0, #20
 8008f2a:	fb00 3002 	mla	r0, r0, r2, r3
 8008f2e:	f7fe fd38 	bl	80079a2 <vListInsertEnd>
	}
 8008f32:	e7bf      	b.n	8008eb4 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	20000808 	.word	0x20000808
 8008f3c:	20000814 	.word	0x20000814
 8008f40:	200008b8 	.word	0x200008b8

08008f44 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008f44:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <pvTaskIncrementMutexHeldCount+0x18>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	b123      	cbz	r3, 8008f54 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008f4a:	4b04      	ldr	r3, [pc, #16]	; (8008f5c <pvTaskIncrementMutexHeldCount+0x18>)
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008f50:	3301      	adds	r3, #1
 8008f52:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
 8008f54:	4b01      	ldr	r3, [pc, #4]	; (8008f5c <pvTaskIncrementMutexHeldCount+0x18>)
 8008f56:	6818      	ldr	r0, [r3, #0]
	}
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	20000808 	.word	0x20000808

08008f60 <ulTaskNotifyTake>:
	{
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4605      	mov	r5, r0
 8008f64:	460c      	mov	r4, r1
		taskENTER_CRITICAL();
 8008f66:	f000 fb75 	bl	8009654 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008f6a:	4b19      	ldr	r3, [pc, #100]	; (8008fd0 <ulTaskNotifyTake+0x70>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f70:	b92b      	cbnz	r3, 8008f7e <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008f72:	4b17      	ldr	r3, [pc, #92]	; (8008fd0 <ulTaskNotifyTake+0x70>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 8008f7c:	b9ac      	cbnz	r4, 8008faa <ulTaskNotifyTake+0x4a>
		taskEXIT_CRITICAL();
 8008f7e:	f000 fb8b 	bl	8009698 <vPortExitCritical>
		taskENTER_CRITICAL();
 8008f82:	f000 fb67 	bl	8009654 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8008f86:	4b12      	ldr	r3, [pc, #72]	; (8008fd0 <ulTaskNotifyTake+0x70>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if( ulReturn != 0UL )
 8008f8c:	b124      	cbz	r4, 8008f98 <ulTaskNotifyTake+0x38>
				if( xClearCountOnExit != pdFALSE )
 8008f8e:	b9cd      	cbnz	r5, 8008fc4 <ulTaskNotifyTake+0x64>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8008f90:	4b0f      	ldr	r3, [pc, #60]	; (8008fd0 <ulTaskNotifyTake+0x70>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	1e62      	subs	r2, r4, #1
 8008f96:	65da      	str	r2, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f98:	4b0d      	ldr	r3, [pc, #52]	; (8008fd0 <ulTaskNotifyTake+0x70>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 8008fa2:	f000 fb79 	bl	8009698 <vPortExitCritical>
	}
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	bd38      	pop	{r3, r4, r5, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008faa:	4611      	mov	r1, r2
 8008fac:	4620      	mov	r0, r4
 8008fae:	f7ff fae7 	bl	8008580 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8008fb2:	4b08      	ldr	r3, [pc, #32]	; (8008fd4 <ulTaskNotifyTake+0x74>)
 8008fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	e7dc      	b.n	8008f7e <ulTaskNotifyTake+0x1e>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008fc4:	4b02      	ldr	r3, [pc, #8]	; (8008fd0 <ulTaskNotifyTake+0x70>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	65da      	str	r2, [r3, #92]	; 0x5c
 8008fcc:	e7e4      	b.n	8008f98 <ulTaskNotifyTake+0x38>
 8008fce:	bf00      	nop
 8008fd0:	20000808 	.word	0x20000808
 8008fd4:	e000ed04 	.word	0xe000ed04

08008fd8 <xTaskNotifyWait>:
	{
 8008fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fda:	4607      	mov	r7, r0
 8008fdc:	460d      	mov	r5, r1
 8008fde:	4614      	mov	r4, r2
 8008fe0:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 8008fe2:	f000 fb37 	bl	8009654 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008fe6:	4b20      	ldr	r3, [pc, #128]	; (8009068 <xTaskNotifyWait+0x90>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d00a      	beq.n	800900a <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008ff4:	4b1c      	ldr	r3, [pc, #112]	; (8009068 <xTaskNotifyWait+0x90>)
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8008ffa:	ea20 0007 	bic.w	r0, r0, r7
 8008ffe:	65d0      	str	r0, [r2, #92]	; 0x5c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 8009008:	b9ce      	cbnz	r6, 800903e <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 800900a:	f000 fb45 	bl	8009698 <vPortExitCritical>
		taskENTER_CRITICAL();
 800900e:	f000 fb21 	bl	8009654 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8009012:	b11c      	cbz	r4, 800901c <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009014:	4b14      	ldr	r3, [pc, #80]	; (8009068 <xTaskNotifyWait+0x90>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800901a:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800901c:	4b12      	ldr	r3, [pc, #72]	; (8009068 <xTaskNotifyWait+0x90>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b02      	cmp	r3, #2
 8009028:	d016      	beq.n	8009058 <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 800902a:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800902c:	4b0e      	ldr	r3, [pc, #56]	; (8009068 <xTaskNotifyWait+0x90>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 8009036:	f000 fb2f 	bl	8009698 <vPortExitCritical>
	}
 800903a:	4620      	mov	r0, r4
 800903c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800903e:	4611      	mov	r1, r2
 8009040:	4630      	mov	r0, r6
 8009042:	f7ff fa9d 	bl	8008580 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8009046:	4b09      	ldr	r3, [pc, #36]	; (800906c <xTaskNotifyWait+0x94>)
 8009048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	e7d8      	b.n	800900a <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009058:	4b03      	ldr	r3, [pc, #12]	; (8009068 <xTaskNotifyWait+0x90>)
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800905e:	ea23 0505 	bic.w	r5, r3, r5
 8009062:	65d5      	str	r5, [r2, #92]	; 0x5c
				xReturn = pdTRUE;
 8009064:	2401      	movs	r4, #1
 8009066:	e7e1      	b.n	800902c <xTaskNotifyWait+0x54>
 8009068:	20000808 	.word	0x20000808
 800906c:	e000ed04 	.word	0xe000ed04

08009070 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009070:	4b06      	ldr	r3, [pc, #24]	; (800908c <prvGetNextExpireTime+0x1c>)
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	6813      	ldr	r3, [r2, #0]
 8009076:	b92b      	cbnz	r3, 8009084 <prvGetNextExpireTime+0x14>
 8009078:	2301      	movs	r3, #1
 800907a:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800907c:	b923      	cbnz	r3, 8009088 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800907e:	68d3      	ldr	r3, [r2, #12]
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009084:	2300      	movs	r3, #0
 8009086:	e7f8      	b.n	800907a <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009088:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800908a:	4770      	bx	lr
 800908c:	20000934 	.word	0x20000934

08009090 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009090:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009092:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009094:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009096:	4291      	cmp	r1, r2
 8009098:	d80c      	bhi.n	80090b4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800909a:	1ad2      	subs	r2, r2, r3
 800909c:	6983      	ldr	r3, [r0, #24]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d301      	bcc.n	80090a6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090a2:	2001      	movs	r0, #1
 80090a4:	e010      	b.n	80090c8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090a6:	1d01      	adds	r1, r0, #4
 80090a8:	4b09      	ldr	r3, [pc, #36]	; (80090d0 <prvInsertTimerInActiveList+0x40>)
 80090aa:	6818      	ldr	r0, [r3, #0]
 80090ac:	f7fe fc85 	bl	80079ba <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80090b0:	2000      	movs	r0, #0
 80090b2:	e009      	b.n	80090c8 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d201      	bcs.n	80090bc <prvInsertTimerInActiveList+0x2c>
 80090b8:	4299      	cmp	r1, r3
 80090ba:	d206      	bcs.n	80090ca <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090bc:	1d01      	adds	r1, r0, #4
 80090be:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <prvInsertTimerInActiveList+0x44>)
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	f7fe fc7a 	bl	80079ba <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80090c6:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80090c8:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 80090ca:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80090cc:	e7fc      	b.n	80090c8 <prvInsertTimerInActiveList+0x38>
 80090ce:	bf00      	nop
 80090d0:	20000938 	.word	0x20000938
 80090d4:	20000934 	.word	0x20000934

080090d8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80090d8:	b530      	push	{r4, r5, lr}
 80090da:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80090dc:	f000 faba 	bl	8009654 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80090e0:	4b11      	ldr	r3, [pc, #68]	; (8009128 <prvCheckForValidListAndQueue+0x50>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	b11b      	cbz	r3, 80090ee <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090e6:	f000 fad7 	bl	8009698 <vPortExitCritical>
}
 80090ea:	b003      	add	sp, #12
 80090ec:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80090ee:	4d0f      	ldr	r5, [pc, #60]	; (800912c <prvCheckForValidListAndQueue+0x54>)
 80090f0:	4628      	mov	r0, r5
 80090f2:	f7fe fc48 	bl	8007986 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80090f6:	4c0e      	ldr	r4, [pc, #56]	; (8009130 <prvCheckForValidListAndQueue+0x58>)
 80090f8:	4620      	mov	r0, r4
 80090fa:	f7fe fc44 	bl	8007986 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80090fe:	4b0d      	ldr	r3, [pc, #52]	; (8009134 <prvCheckForValidListAndQueue+0x5c>)
 8009100:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009102:	4b0d      	ldr	r3, [pc, #52]	; (8009138 <prvCheckForValidListAndQueue+0x60>)
 8009104:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009106:	2300      	movs	r3, #0
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	4b0c      	ldr	r3, [pc, #48]	; (800913c <prvCheckForValidListAndQueue+0x64>)
 800910c:	4a0c      	ldr	r2, [pc, #48]	; (8009140 <prvCheckForValidListAndQueue+0x68>)
 800910e:	210c      	movs	r1, #12
 8009110:	200a      	movs	r0, #10
 8009112:	f7fe fd7c 	bl	8007c0e <xQueueGenericCreateStatic>
 8009116:	4b04      	ldr	r3, [pc, #16]	; (8009128 <prvCheckForValidListAndQueue+0x50>)
 8009118:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800911a:	2800      	cmp	r0, #0
 800911c:	d0e3      	beq.n	80090e6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800911e:	4909      	ldr	r1, [pc, #36]	; (8009144 <prvCheckForValidListAndQueue+0x6c>)
 8009120:	f7ff f8aa 	bl	8008278 <vQueueAddToRegistry>
 8009124:	e7df      	b.n	80090e6 <prvCheckForValidListAndQueue+0xe>
 8009126:	bf00      	nop
 8009128:	20000a30 	.word	0x20000a30
 800912c:	200009b4 	.word	0x200009b4
 8009130:	200009c8 	.word	0x200009c8
 8009134:	20000934 	.word	0x20000934
 8009138:	20000938 	.word	0x20000938
 800913c:	200009e0 	.word	0x200009e0
 8009140:	2000093c 	.word	0x2000093c
 8009144:	0800a7f8 	.word	0x0800a7f8

08009148 <prvInitialiseNewTimer>:
{
 8009148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800914c:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800914e:	b941      	cbnz	r1, 8009162 <prvInitialiseNewTimer+0x1a>
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	e7fe      	b.n	8009160 <prvInitialiseNewTimer+0x18>
 8009162:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
 8009164:	b1a4      	cbz	r4, 8009190 <prvInitialiseNewTimer+0x48>
 8009166:	461e      	mov	r6, r3
 8009168:	4615      	mov	r5, r2
 800916a:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
 800916c:	f7ff ffb4 	bl	80090d8 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 8009170:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009174:	61a7      	str	r7, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009176:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009178:	9b06      	ldr	r3, [sp, #24]
 800917a:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800917c:	1d20      	adds	r0, r4, #4
 800917e:	f7fe fc0d 	bl	800799c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009182:	b12d      	cbz	r5, 8009190 <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009184:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009188:	f043 0304 	orr.w	r3, r3, #4
 800918c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8009190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009194 <xTimerCreateTimerTask>:
{
 8009194:	b510      	push	{r4, lr}
 8009196:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009198:	f7ff ff9e 	bl	80090d8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800919c:	4b12      	ldr	r3, [pc, #72]	; (80091e8 <xTimerCreateTimerTask+0x54>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	b1cb      	cbz	r3, 80091d6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80091a2:	2400      	movs	r4, #0
 80091a4:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80091a6:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80091a8:	aa07      	add	r2, sp, #28
 80091aa:	a906      	add	r1, sp, #24
 80091ac:	a805      	add	r0, sp, #20
 80091ae:	f7f9 fc9d 	bl	8002aec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091b2:	9b05      	ldr	r3, [sp, #20]
 80091b4:	9302      	str	r3, [sp, #8]
 80091b6:	9b06      	ldr	r3, [sp, #24]
 80091b8:	9301      	str	r3, [sp, #4]
 80091ba:	2302      	movs	r3, #2
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	4623      	mov	r3, r4
 80091c0:	9a07      	ldr	r2, [sp, #28]
 80091c2:	490a      	ldr	r1, [pc, #40]	; (80091ec <xTimerCreateTimerTask+0x58>)
 80091c4:	480a      	ldr	r0, [pc, #40]	; (80091f0 <xTimerCreateTimerTask+0x5c>)
 80091c6:	f7ff fa27 	bl	8008618 <xTaskCreateStatic>
 80091ca:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <xTimerCreateTimerTask+0x60>)
 80091cc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80091ce:	b110      	cbz	r0, 80091d6 <xTimerCreateTimerTask+0x42>
}
 80091d0:	2001      	movs	r0, #1
 80091d2:	b008      	add	sp, #32
 80091d4:	bd10      	pop	{r4, pc}
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	e7fe      	b.n	80091e6 <xTimerCreateTimerTask+0x52>
 80091e8:	20000a30 	.word	0x20000a30
 80091ec:	0800a800 	.word	0x0800a800
 80091f0:	08009571 	.word	0x08009571
 80091f4:	20000a34 	.word	0x20000a34

080091f8 <xTimerCreate>:
	{
 80091f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	4605      	mov	r5, r0
 8009200:	460e      	mov	r6, r1
 8009202:	4617      	mov	r7, r2
 8009204:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009206:	202c      	movs	r0, #44	; 0x2c
 8009208:	f000 fbda 	bl	80099c0 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800920c:	4604      	mov	r4, r0
 800920e:	b158      	cbz	r0, 8009228 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 8009210:	2300      	movs	r3, #0
 8009212:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009216:	9001      	str	r0, [sp, #4]
 8009218:	9b08      	ldr	r3, [sp, #32]
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	4643      	mov	r3, r8
 800921e:	463a      	mov	r2, r7
 8009220:	4631      	mov	r1, r6
 8009222:	4628      	mov	r0, r5
 8009224:	f7ff ff90 	bl	8009148 <prvInitialiseNewTimer>
	}
 8009228:	4620      	mov	r0, r4
 800922a:	b002      	add	sp, #8
 800922c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009230 <xTimerCreateStatic>:
	{
 8009230:	b530      	push	{r4, r5, lr}
 8009232:	b085      	sub	sp, #20
 8009234:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009236:	252c      	movs	r5, #44	; 0x2c
 8009238:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 800923a:	9d03      	ldr	r5, [sp, #12]
 800923c:	2d2c      	cmp	r5, #44	; 0x2c
 800923e:	d008      	beq.n	8009252 <xTimerCreateStatic+0x22>
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	e7fe      	b.n	8009250 <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009252:	9d03      	ldr	r5, [sp, #12]
		configASSERT( pxTimerBuffer );
 8009254:	b944      	cbnz	r4, 8009268 <xTimerCreateStatic+0x38>
 8009256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	e7fe      	b.n	8009266 <xTimerCreateStatic+0x36>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009268:	2502      	movs	r5, #2
 800926a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800926e:	9401      	str	r4, [sp, #4]
 8009270:	9d08      	ldr	r5, [sp, #32]
 8009272:	9500      	str	r5, [sp, #0]
 8009274:	f7ff ff68 	bl	8009148 <prvInitialiseNewTimer>
	}
 8009278:	4620      	mov	r0, r4
 800927a:	b005      	add	sp, #20
 800927c:	bd30      	pop	{r4, r5, pc}
	...

08009280 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8009280:	b1c8      	cbz	r0, 80092b6 <xTimerGenericCommand+0x36>
{
 8009282:	b530      	push	{r4, r5, lr}
 8009284:	b085      	sub	sp, #20
 8009286:	4615      	mov	r5, r2
 8009288:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 800928a:	4a17      	ldr	r2, [pc, #92]	; (80092e8 <xTimerGenericCommand+0x68>)
 800928c:	6810      	ldr	r0, [r2, #0]
 800928e:	b340      	cbz	r0, 80092e2 <xTimerGenericCommand+0x62>
 8009290:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 8009292:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009294:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009296:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009298:	2905      	cmp	r1, #5
 800929a:	dc1d      	bgt.n	80092d8 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800929c:	f7ff fd2e 	bl	8008cfc <xTaskGetSchedulerState>
 80092a0:	2802      	cmp	r0, #2
 80092a2:	d011      	beq.n	80092c8 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092a4:	2300      	movs	r3, #0
 80092a6:	461a      	mov	r2, r3
 80092a8:	a901      	add	r1, sp, #4
 80092aa:	480f      	ldr	r0, [pc, #60]	; (80092e8 <xTimerGenericCommand+0x68>)
 80092ac:	6800      	ldr	r0, [r0, #0]
 80092ae:	f7fe fd1f 	bl	8007cf0 <xQueueGenericSend>
}
 80092b2:	b005      	add	sp, #20
 80092b4:	bd30      	pop	{r4, r5, pc}
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	e7fe      	b.n	80092c6 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092c8:	2300      	movs	r3, #0
 80092ca:	9a08      	ldr	r2, [sp, #32]
 80092cc:	a901      	add	r1, sp, #4
 80092ce:	4806      	ldr	r0, [pc, #24]	; (80092e8 <xTimerGenericCommand+0x68>)
 80092d0:	6800      	ldr	r0, [r0, #0]
 80092d2:	f7fe fd0d 	bl	8007cf0 <xQueueGenericSend>
 80092d6:	e7ec      	b.n	80092b2 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092d8:	2300      	movs	r3, #0
 80092da:	a901      	add	r1, sp, #4
 80092dc:	f7fe fdec 	bl	8007eb8 <xQueueGenericSendFromISR>
 80092e0:	e7e7      	b.n	80092b2 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 80092e2:	2000      	movs	r0, #0
	return xReturn;
 80092e4:	e7e5      	b.n	80092b2 <xTimerGenericCommand+0x32>
 80092e6:	bf00      	nop
 80092e8:	20000a30 	.word	0x20000a30

080092ec <prvSwitchTimerLists>:
{
 80092ec:	b570      	push	{r4, r5, r6, lr}
 80092ee:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092f0:	4b1b      	ldr	r3, [pc, #108]	; (8009360 <prvSwitchTimerLists+0x74>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	b362      	cbz	r2, 8009352 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092fc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092fe:	1d25      	adds	r5, r4, #4
 8009300:	4628      	mov	r0, r5
 8009302:	f7fe fb74 	bl	80079ee <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009306:	6a23      	ldr	r3, [r4, #32]
 8009308:	4620      	mov	r0, r4
 800930a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800930c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009310:	f013 0f04 	tst.w	r3, #4
 8009314:	d0ec      	beq.n	80092f0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009316:	69a3      	ldr	r3, [r4, #24]
 8009318:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800931a:	429e      	cmp	r6, r3
 800931c:	d207      	bcs.n	800932e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800931e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009320:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009322:	4629      	mov	r1, r5
 8009324:	4b0e      	ldr	r3, [pc, #56]	; (8009360 <prvSwitchTimerLists+0x74>)
 8009326:	6818      	ldr	r0, [r3, #0]
 8009328:	f7fe fb47 	bl	80079ba <vListInsert>
 800932c:	e7e0      	b.n	80092f0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800932e:	2100      	movs	r1, #0
 8009330:	9100      	str	r1, [sp, #0]
 8009332:	460b      	mov	r3, r1
 8009334:	4632      	mov	r2, r6
 8009336:	4620      	mov	r0, r4
 8009338:	f7ff ffa2 	bl	8009280 <xTimerGenericCommand>
				configASSERT( xResult );
 800933c:	2800      	cmp	r0, #0
 800933e:	d1d7      	bne.n	80092f0 <prvSwitchTimerLists+0x4>
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	e7fe      	b.n	8009350 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8009352:	4a04      	ldr	r2, [pc, #16]	; (8009364 <prvSwitchTimerLists+0x78>)
 8009354:	6810      	ldr	r0, [r2, #0]
 8009356:	4902      	ldr	r1, [pc, #8]	; (8009360 <prvSwitchTimerLists+0x74>)
 8009358:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800935a:	6013      	str	r3, [r2, #0]
}
 800935c:	b002      	add	sp, #8
 800935e:	bd70      	pop	{r4, r5, r6, pc}
 8009360:	20000934 	.word	0x20000934
 8009364:	20000938 	.word	0x20000938

08009368 <prvSampleTimeNow>:
{
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800936c:	f7ff fa16 	bl	800879c <xTaskGetTickCount>
 8009370:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8009372:	4b07      	ldr	r3, [pc, #28]	; (8009390 <prvSampleTimeNow+0x28>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4283      	cmp	r3, r0
 8009378:	d805      	bhi.n	8009386 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800937a:	2300      	movs	r3, #0
 800937c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800937e:	4b04      	ldr	r3, [pc, #16]	; (8009390 <prvSampleTimeNow+0x28>)
 8009380:	601c      	str	r4, [r3, #0]
}
 8009382:	4620      	mov	r0, r4
 8009384:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8009386:	f7ff ffb1 	bl	80092ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800938a:	2301      	movs	r3, #1
 800938c:	602b      	str	r3, [r5, #0]
 800938e:	e7f6      	b.n	800937e <prvSampleTimeNow+0x16>
 8009390:	200009dc 	.word	0x200009dc

08009394 <prvProcessExpiredTimer>:
{
 8009394:	b570      	push	{r4, r5, r6, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	4605      	mov	r5, r0
 800939a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800939c:	4b17      	ldr	r3, [pc, #92]	; (80093fc <prvProcessExpiredTimer+0x68>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093a4:	1d20      	adds	r0, r4, #4
 80093a6:	f7fe fb22 	bl	80079ee <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093aa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80093ae:	f013 0f04 	tst.w	r3, #4
 80093b2:	d108      	bne.n	80093c6 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093b4:	f023 0301 	bic.w	r3, r3, #1
 80093b8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093bc:	6a23      	ldr	r3, [r4, #32]
 80093be:	4620      	mov	r0, r4
 80093c0:	4798      	blx	r3
}
 80093c2:	b002      	add	sp, #8
 80093c4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80093c6:	69a1      	ldr	r1, [r4, #24]
 80093c8:	462b      	mov	r3, r5
 80093ca:	4632      	mov	r2, r6
 80093cc:	4429      	add	r1, r5
 80093ce:	4620      	mov	r0, r4
 80093d0:	f7ff fe5e 	bl	8009090 <prvInsertTimerInActiveList>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d0f1      	beq.n	80093bc <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093d8:	2100      	movs	r1, #0
 80093da:	9100      	str	r1, [sp, #0]
 80093dc:	460b      	mov	r3, r1
 80093de:	462a      	mov	r2, r5
 80093e0:	4620      	mov	r0, r4
 80093e2:	f7ff ff4d 	bl	8009280 <xTimerGenericCommand>
			configASSERT( xResult );
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d1e8      	bne.n	80093bc <prvProcessExpiredTimer+0x28>
 80093ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	e7fe      	b.n	80093fa <prvProcessExpiredTimer+0x66>
 80093fc:	20000934 	.word	0x20000934

08009400 <prvProcessTimerOrBlockTask>:
{
 8009400:	b570      	push	{r4, r5, r6, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	4606      	mov	r6, r0
 8009406:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8009408:	f7ff f9c0 	bl	800878c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800940c:	a801      	add	r0, sp, #4
 800940e:	f7ff ffab 	bl	8009368 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009412:	9b01      	ldr	r3, [sp, #4]
 8009414:	bb23      	cbnz	r3, 8009460 <prvProcessTimerOrBlockTask+0x60>
 8009416:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009418:	b90c      	cbnz	r4, 800941e <prvProcessTimerOrBlockTask+0x1e>
 800941a:	42b0      	cmp	r0, r6
 800941c:	d217      	bcs.n	800944e <prvProcessTimerOrBlockTask+0x4e>
				if( xListWasEmpty != pdFALSE )
 800941e:	b124      	cbz	r4, 800942a <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009420:	4b11      	ldr	r3, [pc, #68]	; (8009468 <prvProcessTimerOrBlockTask+0x68>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	b9cb      	cbnz	r3, 800945c <prvProcessTimerOrBlockTask+0x5c>
 8009428:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800942a:	4622      	mov	r2, r4
 800942c:	1b71      	subs	r1, r6, r5
 800942e:	4b0f      	ldr	r3, [pc, #60]	; (800946c <prvProcessTimerOrBlockTask+0x6c>)
 8009430:	6818      	ldr	r0, [r3, #0]
 8009432:	f7fe ff35 	bl	80082a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009436:	f7ff fa43 	bl	80088c0 <xTaskResumeAll>
 800943a:	b998      	cbnz	r0, 8009464 <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 800943c:	4b0c      	ldr	r3, [pc, #48]	; (8009470 <prvProcessTimerOrBlockTask+0x70>)
 800943e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	e00a      	b.n	8009464 <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
 800944e:	f7ff fa37 	bl	80088c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009452:	4629      	mov	r1, r5
 8009454:	4630      	mov	r0, r6
 8009456:	f7ff ff9d 	bl	8009394 <prvProcessExpiredTimer>
 800945a:	e003      	b.n	8009464 <prvProcessTimerOrBlockTask+0x64>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800945c:	2400      	movs	r4, #0
 800945e:	e7e4      	b.n	800942a <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 8009460:	f7ff fa2e 	bl	80088c0 <xTaskResumeAll>
}
 8009464:	b002      	add	sp, #8
 8009466:	bd70      	pop	{r4, r5, r6, pc}
 8009468:	20000938 	.word	0x20000938
 800946c:	20000a30 	.word	0x20000a30
 8009470:	e000ed04 	.word	0xe000ed04

08009474 <prvProcessReceivedCommands>:
{
 8009474:	b530      	push	{r4, r5, lr}
 8009476:	b087      	sub	sp, #28
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009478:	2200      	movs	r2, #0
 800947a:	a903      	add	r1, sp, #12
 800947c:	4b3b      	ldr	r3, [pc, #236]	; (800956c <prvProcessReceivedCommands+0xf8>)
 800947e:	6818      	ldr	r0, [r3, #0]
 8009480:	f7fe fd80 	bl	8007f84 <xQueueReceive>
 8009484:	2800      	cmp	r0, #0
 8009486:	d06f      	beq.n	8009568 <prvProcessReceivedCommands+0xf4>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009488:	9b03      	ldr	r3, [sp, #12]
 800948a:	2b00      	cmp	r3, #0
 800948c:	dbf4      	blt.n	8009478 <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800948e:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009490:	6963      	ldr	r3, [r4, #20]
 8009492:	b113      	cbz	r3, 800949a <prvProcessReceivedCommands+0x26>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009494:	1d20      	adds	r0, r4, #4
 8009496:	f7fe faaa 	bl	80079ee <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800949a:	a802      	add	r0, sp, #8
 800949c:	f7ff ff64 	bl	8009368 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80094a0:	9b03      	ldr	r3, [sp, #12]
 80094a2:	2b09      	cmp	r3, #9
 80094a4:	d8e8      	bhi.n	8009478 <prvProcessReceivedCommands+0x4>
 80094a6:	e8df f003 	tbb	[pc, r3]
 80094aa:	0505      	.short	0x0505
 80094ac:	51383105 	.word	0x51383105
 80094b0:	38310505 	.word	0x38310505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094b4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80094b8:	f043 0301 	orr.w	r3, r3, #1
 80094bc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094c0:	9904      	ldr	r1, [sp, #16]
 80094c2:	69a5      	ldr	r5, [r4, #24]
 80094c4:	460b      	mov	r3, r1
 80094c6:	4602      	mov	r2, r0
 80094c8:	4429      	add	r1, r5
 80094ca:	4620      	mov	r0, r4
 80094cc:	f7ff fde0 	bl	8009090 <prvInsertTimerInActiveList>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d0d1      	beq.n	8009478 <prvProcessReceivedCommands+0x4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094d4:	6a23      	ldr	r3, [r4, #32]
 80094d6:	4620      	mov	r0, r4
 80094d8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80094de:	f013 0f04 	tst.w	r3, #4
 80094e2:	d0c9      	beq.n	8009478 <prvProcessReceivedCommands+0x4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094e4:	69a2      	ldr	r2, [r4, #24]
 80094e6:	2100      	movs	r1, #0
 80094e8:	9100      	str	r1, [sp, #0]
 80094ea:	460b      	mov	r3, r1
 80094ec:	9804      	ldr	r0, [sp, #16]
 80094ee:	4402      	add	r2, r0
 80094f0:	4620      	mov	r0, r4
 80094f2:	f7ff fec5 	bl	8009280 <xTimerGenericCommand>
							configASSERT( xResult );
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d1be      	bne.n	8009478 <prvProcessReceivedCommands+0x4>
 80094fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	e7fe      	b.n	800950a <prvProcessReceivedCommands+0x96>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800950c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009510:	f023 0301 	bic.w	r3, r3, #1
 8009514:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8009518:	e7ae      	b.n	8009478 <prvProcessReceivedCommands+0x4>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800951a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800951e:	f043 0301 	orr.w	r3, r3, #1
 8009522:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009526:	9904      	ldr	r1, [sp, #16]
 8009528:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800952a:	b131      	cbz	r1, 800953a <prvProcessReceivedCommands+0xc6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800952c:	4603      	mov	r3, r0
 800952e:	4602      	mov	r2, r0
 8009530:	4401      	add	r1, r0
 8009532:	4620      	mov	r0, r4
 8009534:	f7ff fdac 	bl	8009090 <prvInsertTimerInActiveList>
					break;
 8009538:	e79e      	b.n	8009478 <prvProcessReceivedCommands+0x4>
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	e7fe      	b.n	800954a <prvProcessReceivedCommands+0xd6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800954c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009550:	f013 0f02 	tst.w	r3, #2
 8009554:	d004      	beq.n	8009560 <prvProcessReceivedCommands+0xec>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009556:	f023 0301 	bic.w	r3, r3, #1
 800955a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800955e:	e78b      	b.n	8009478 <prvProcessReceivedCommands+0x4>
							vPortFree( pxTimer );
 8009560:	4620      	mov	r0, r4
 8009562:	f000 fab1 	bl	8009ac8 <vPortFree>
 8009566:	e787      	b.n	8009478 <prvProcessReceivedCommands+0x4>
}
 8009568:	b007      	add	sp, #28
 800956a:	bd30      	pop	{r4, r5, pc}
 800956c:	20000a30 	.word	0x20000a30

08009570 <prvTimerTask>:
{
 8009570:	b500      	push	{lr}
 8009572:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009574:	a801      	add	r0, sp, #4
 8009576:	f7ff fd7b 	bl	8009070 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800957a:	9901      	ldr	r1, [sp, #4]
 800957c:	f7ff ff40 	bl	8009400 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8009580:	f7ff ff78 	bl	8009474 <prvProcessReceivedCommands>
 8009584:	e7f6      	b.n	8009574 <prvTimerTask+0x4>
	...

08009588 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009588:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800958e:	4b0d      	ldr	r3, [pc, #52]	; (80095c4 <prvTaskExitError+0x3c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009596:	d008      	beq.n	80095aa <prvTaskExitError+0x22>
 8009598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959c:	f383 8811 	msr	BASEPRI, r3
 80095a0:	f3bf 8f6f 	isb	sy
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	e7fe      	b.n	80095a8 <prvTaskExitError+0x20>
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80095ba:	9b01      	ldr	r3, [sp, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d0fc      	beq.n	80095ba <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80095c0:	b002      	add	sp, #8
 80095c2:	4770      	bx	lr
 80095c4:	2000003c 	.word	0x2000003c

080095c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80095c8:	4808      	ldr	r0, [pc, #32]	; (80095ec <prvPortStartFirstTask+0x24>)
 80095ca:	6800      	ldr	r0, [r0, #0]
 80095cc:	6800      	ldr	r0, [r0, #0]
 80095ce:	f380 8808 	msr	MSP, r0
 80095d2:	f04f 0000 	mov.w	r0, #0
 80095d6:	f380 8814 	msr	CONTROL, r0
 80095da:	b662      	cpsie	i
 80095dc:	b661      	cpsie	f
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	df00      	svc	0
 80095e8:	bf00      	nop
 80095ea:	0000      	.short	0x0000
 80095ec:	e000ed08 	.word	0xe000ed08

080095f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80095f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009600 <vPortEnableVFP+0x10>
 80095f4:	6801      	ldr	r1, [r0, #0]
 80095f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80095fa:	6001      	str	r1, [r0, #0]
 80095fc:	4770      	bx	lr
 80095fe:	0000      	.short	0x0000
 8009600:	e000ed88 	.word	0xe000ed88

08009604 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009608:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800960c:	f021 0101 	bic.w	r1, r1, #1
 8009610:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009614:	4b05      	ldr	r3, [pc, #20]	; (800962c <pxPortInitialiseStack+0x28>)
 8009616:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800961a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800961e:	f06f 0302 	mvn.w	r3, #2
 8009622:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8009626:	3844      	subs	r0, #68	; 0x44
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	08009589 	.word	0x08009589

08009630 <SVC_Handler>:
	__asm volatile (
 8009630:	4b07      	ldr	r3, [pc, #28]	; (8009650 <pxCurrentTCBConst2>)
 8009632:	6819      	ldr	r1, [r3, #0]
 8009634:	6808      	ldr	r0, [r1, #0]
 8009636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963a:	f380 8809 	msr	PSP, r0
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f04f 0000 	mov.w	r0, #0
 8009646:	f380 8811 	msr	BASEPRI, r0
 800964a:	4770      	bx	lr
 800964c:	f3af 8000 	nop.w

08009650 <pxCurrentTCBConst2>:
 8009650:	20000808 	.word	0x20000808

08009654 <vPortEnterCritical>:
 8009654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009664:	4a0a      	ldr	r2, [pc, #40]	; (8009690 <vPortEnterCritical+0x3c>)
 8009666:	6813      	ldr	r3, [r2, #0]
 8009668:	3301      	adds	r3, #1
 800966a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800966c:	2b01      	cmp	r3, #1
 800966e:	d000      	beq.n	8009672 <vPortEnterCritical+0x1e>
}
 8009670:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009672:	4b08      	ldr	r3, [pc, #32]	; (8009694 <vPortEnterCritical+0x40>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f013 0fff 	tst.w	r3, #255	; 0xff
 800967a:	d0f9      	beq.n	8009670 <vPortEnterCritical+0x1c>
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	e7fe      	b.n	800968c <vPortEnterCritical+0x38>
 800968e:	bf00      	nop
 8009690:	2000003c 	.word	0x2000003c
 8009694:	e000ed04 	.word	0xe000ed04

08009698 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009698:	4b09      	ldr	r3, [pc, #36]	; (80096c0 <vPortExitCritical+0x28>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	b943      	cbnz	r3, 80096b0 <vPortExitCritical+0x18>
 800969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	e7fe      	b.n	80096ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80096b0:	3b01      	subs	r3, #1
 80096b2:	4a03      	ldr	r2, [pc, #12]	; (80096c0 <vPortExitCritical+0x28>)
 80096b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096b6:	b90b      	cbnz	r3, 80096bc <vPortExitCritical+0x24>
	__asm volatile
 80096b8:	f383 8811 	msr	BASEPRI, r3
}
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	2000003c 	.word	0x2000003c
	...

080096d0 <PendSV_Handler>:
	__asm volatile
 80096d0:	f3ef 8009 	mrs	r0, PSP
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	4b15      	ldr	r3, [pc, #84]	; (8009730 <pxCurrentTCBConst>)
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	f01e 0f10 	tst.w	lr, #16
 80096e0:	bf08      	it	eq
 80096e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80096e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ea:	6010      	str	r0, [r2, #0]
 80096ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80096f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80096f4:	f380 8811 	msr	BASEPRI, r0
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f7ff f9d0 	bl	8008aa4 <vTaskSwitchContext>
 8009704:	f04f 0000 	mov.w	r0, #0
 8009708:	f380 8811 	msr	BASEPRI, r0
 800970c:	bc09      	pop	{r0, r3}
 800970e:	6819      	ldr	r1, [r3, #0]
 8009710:	6808      	ldr	r0, [r1, #0]
 8009712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009716:	f01e 0f10 	tst.w	lr, #16
 800971a:	bf08      	it	eq
 800971c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009720:	f380 8809 	msr	PSP, r0
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	f3af 8000 	nop.w

08009730 <pxCurrentTCBConst>:
 8009730:	20000808 	.word	0x20000808

08009734 <SysTick_Handler>:
{
 8009734:	b508      	push	{r3, lr}
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8009746:	f7ff f82f 	bl	80087a8 <xTaskIncrementTick>
 800974a:	b118      	cbz	r0, 8009754 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800974c:	4b03      	ldr	r3, [pc, #12]	; (800975c <SysTick_Handler+0x28>)
 800974e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009752:	601a      	str	r2, [r3, #0]
	__asm volatile
 8009754:	2300      	movs	r3, #0
 8009756:	f383 8811 	msr	BASEPRI, r3
}
 800975a:	bd08      	pop	{r3, pc}
 800975c:	e000ed04 	.word	0xe000ed04

08009760 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009760:	4a08      	ldr	r2, [pc, #32]	; (8009784 <vPortSetupTimerInterrupt+0x24>)
 8009762:	2300      	movs	r3, #0
 8009764:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009766:	4908      	ldr	r1, [pc, #32]	; (8009788 <vPortSetupTimerInterrupt+0x28>)
 8009768:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800976a:	4b08      	ldr	r3, [pc, #32]	; (800978c <vPortSetupTimerInterrupt+0x2c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4908      	ldr	r1, [pc, #32]	; (8009790 <vPortSetupTimerInterrupt+0x30>)
 8009770:	fba1 1303 	umull	r1, r3, r1, r3
 8009774:	099b      	lsrs	r3, r3, #6
 8009776:	3b01      	subs	r3, #1
 8009778:	4906      	ldr	r1, [pc, #24]	; (8009794 <vPortSetupTimerInterrupt+0x34>)
 800977a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800977c:	2307      	movs	r3, #7
 800977e:	6013      	str	r3, [r2, #0]
}
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	e000e010 	.word	0xe000e010
 8009788:	e000e018 	.word	0xe000e018
 800978c:	20000030 	.word	0x20000030
 8009790:	10624dd3 	.word	0x10624dd3
 8009794:	e000e014 	.word	0xe000e014

08009798 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009798:	4b3a      	ldr	r3, [pc, #232]	; (8009884 <xPortStartScheduler+0xec>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	4b3a      	ldr	r3, [pc, #232]	; (8009888 <xPortStartScheduler+0xf0>)
 800979e:	429a      	cmp	r2, r3
 80097a0:	d00d      	beq.n	80097be <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80097a2:	4b38      	ldr	r3, [pc, #224]	; (8009884 <xPortStartScheduler+0xec>)
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	4b39      	ldr	r3, [pc, #228]	; (800988c <xPortStartScheduler+0xf4>)
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d111      	bne.n	80097d0 <xPortStartScheduler+0x38>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	e7fe      	b.n	80097bc <xPortStartScheduler+0x24>
 80097be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	e7fe      	b.n	80097ce <xPortStartScheduler+0x36>
{
 80097d0:	b510      	push	{r4, lr}
 80097d2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097d4:	4b2e      	ldr	r3, [pc, #184]	; (8009890 <xPortStartScheduler+0xf8>)
 80097d6:	781a      	ldrb	r2, [r3, #0]
 80097d8:	b2d2      	uxtb	r2, r2
 80097da:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097dc:	22ff      	movs	r2, #255	; 0xff
 80097de:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80097ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097f0:	4a28      	ldr	r2, [pc, #160]	; (8009894 <xPortStartScheduler+0xfc>)
 80097f2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097f4:	4b28      	ldr	r3, [pc, #160]	; (8009898 <xPortStartScheduler+0x100>)
 80097f6:	2207      	movs	r2, #7
 80097f8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097fa:	e009      	b.n	8009810 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 80097fc:	4a26      	ldr	r2, [pc, #152]	; (8009898 <xPortStartScheduler+0x100>)
 80097fe:	6813      	ldr	r3, [r2, #0]
 8009800:	3b01      	subs	r3, #1
 8009802:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009804:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009808:	005b      	lsls	r3, r3, #1
 800980a:	b2db      	uxtb	r3, r3
 800980c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009810:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009814:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009818:	d1f0      	bne.n	80097fc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800981a:	4b1f      	ldr	r3, [pc, #124]	; (8009898 <xPortStartScheduler+0x100>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b03      	cmp	r3, #3
 8009820:	d008      	beq.n	8009834 <xPortStartScheduler+0x9c>
 8009822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	e7fe      	b.n	8009832 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009834:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800983a:	4a17      	ldr	r2, [pc, #92]	; (8009898 <xPortStartScheduler+0x100>)
 800983c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800983e:	9b01      	ldr	r3, [sp, #4]
 8009840:	b2db      	uxtb	r3, r3
 8009842:	4a13      	ldr	r2, [pc, #76]	; (8009890 <xPortStartScheduler+0xf8>)
 8009844:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009846:	4b15      	ldr	r3, [pc, #84]	; (800989c <xPortStartScheduler+0x104>)
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800984e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8009856:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8009858:	f7ff ff82 	bl	8009760 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800985c:	2400      	movs	r4, #0
 800985e:	4b10      	ldr	r3, [pc, #64]	; (80098a0 <xPortStartScheduler+0x108>)
 8009860:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8009862:	f7ff fec5 	bl	80095f0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009866:	4a0f      	ldr	r2, [pc, #60]	; (80098a4 <xPortStartScheduler+0x10c>)
 8009868:	6813      	ldr	r3, [r2, #0]
 800986a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800986e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8009870:	f7ff feaa 	bl	80095c8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009874:	f7ff f916 	bl	8008aa4 <vTaskSwitchContext>
	prvTaskExitError();
 8009878:	f7ff fe86 	bl	8009588 <prvTaskExitError>
}
 800987c:	4620      	mov	r0, r4
 800987e:	b002      	add	sp, #8
 8009880:	bd10      	pop	{r4, pc}
 8009882:	bf00      	nop
 8009884:	e000ed00 	.word	0xe000ed00
 8009888:	410fc271 	.word	0x410fc271
 800988c:	410fc270 	.word	0x410fc270
 8009890:	e000e400 	.word	0xe000e400
 8009894:	20000a38 	.word	0x20000a38
 8009898:	20000a3c 	.word	0x20000a3c
 800989c:	e000ed20 	.word	0xe000ed20
 80098a0:	2000003c 	.word	0x2000003c
 80098a4:	e000ef34 	.word	0xe000ef34

080098a8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098a8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098ac:	2b0f      	cmp	r3, #15
 80098ae:	d90f      	bls.n	80098d0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098b0:	4a10      	ldr	r2, [pc, #64]	; (80098f4 <vPortValidateInterruptPriority+0x4c>)
 80098b2:	5c9b      	ldrb	r3, [r3, r2]
 80098b4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098b6:	4a10      	ldr	r2, [pc, #64]	; (80098f8 <vPortValidateInterruptPriority+0x50>)
 80098b8:	7812      	ldrb	r2, [r2, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d908      	bls.n	80098d0 <vPortValidateInterruptPriority+0x28>
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	e7fe      	b.n	80098ce <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098d0:	4b0a      	ldr	r3, [pc, #40]	; (80098fc <vPortValidateInterruptPriority+0x54>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098d8:	4a09      	ldr	r2, [pc, #36]	; (8009900 <vPortValidateInterruptPriority+0x58>)
 80098da:	6812      	ldr	r2, [r2, #0]
 80098dc:	4293      	cmp	r3, r2
 80098de:	d908      	bls.n	80098f2 <vPortValidateInterruptPriority+0x4a>
 80098e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	e7fe      	b.n	80098f0 <vPortValidateInterruptPriority+0x48>
	}
 80098f2:	4770      	bx	lr
 80098f4:	e000e3f0 	.word	0xe000e3f0
 80098f8:	20000a38 	.word	0x20000a38
 80098fc:	e000ed0c 	.word	0xe000ed0c
 8009900:	20000a3c 	.word	0x20000a3c

08009904 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009904:	4a12      	ldr	r2, [pc, #72]	; (8009950 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009906:	f012 0f07 	tst.w	r2, #7
 800990a:	d01e      	beq.n	800994a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800990c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800990e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009912:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 8009916:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009918:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800991a:	480e      	ldr	r0, [pc, #56]	; (8009954 <prvHeapInit+0x50>)
 800991c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800991e:	2100      	movs	r1, #0
 8009920:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009922:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8009924:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009926:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800992a:	480b      	ldr	r0, [pc, #44]	; (8009958 <prvHeapInit+0x54>)
 800992c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800992e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009930:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009932:	1a99      	subs	r1, r3, r2
 8009934:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009936:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009938:	4b08      	ldr	r3, [pc, #32]	; (800995c <prvHeapInit+0x58>)
 800993a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800993c:	4b08      	ldr	r3, [pc, #32]	; (8009960 <prvHeapInit+0x5c>)
 800993e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009940:	4b08      	ldr	r3, [pc, #32]	; (8009964 <prvHeapInit+0x60>)
 8009942:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009946:	601a      	str	r2, [r3, #0]
}
 8009948:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800994a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800994e:	e7e4      	b.n	800991a <prvHeapInit+0x16>
 8009950:	20000a44 	.word	0x20000a44
 8009954:	20002a50 	.word	0x20002a50
 8009958:	20000a40 	.word	0x20000a40
 800995c:	20002a4c 	.word	0x20002a4c
 8009960:	20002a48 	.word	0x20002a48
 8009964:	20002a44 	.word	0x20002a44

08009968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009968:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800996a:	4b13      	ldr	r3, [pc, #76]	; (80099b8 <prvInsertBlockIntoFreeList+0x50>)
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	4282      	cmp	r2, r0
 8009970:	d31b      	bcc.n	80099aa <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009972:	6859      	ldr	r1, [r3, #4]
 8009974:	185c      	adds	r4, r3, r1
 8009976:	4284      	cmp	r4, r0
 8009978:	d103      	bne.n	8009982 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800997a:	6840      	ldr	r0, [r0, #4]
 800997c:	4401      	add	r1, r0
 800997e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009980:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009982:	6841      	ldr	r1, [r0, #4]
 8009984:	1844      	adds	r4, r0, r1
 8009986:	42a2      	cmp	r2, r4
 8009988:	d113      	bne.n	80099b2 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800998a:	4c0c      	ldr	r4, [pc, #48]	; (80099bc <prvInsertBlockIntoFreeList+0x54>)
 800998c:	6824      	ldr	r4, [r4, #0]
 800998e:	42a2      	cmp	r2, r4
 8009990:	d00d      	beq.n	80099ae <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009992:	6852      	ldr	r2, [r2, #4]
 8009994:	4411      	add	r1, r2
 8009996:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	6812      	ldr	r2, [r2, #0]
 800999c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800999e:	4298      	cmp	r0, r3
 80099a0:	d000      	beq.n	80099a4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099a2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099a8:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099aa:	4613      	mov	r3, r2
 80099ac:	e7de      	b.n	800996c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099ae:	6004      	str	r4, [r0, #0]
 80099b0:	e7f5      	b.n	800999e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099b2:	6002      	str	r2, [r0, #0]
 80099b4:	e7f3      	b.n	800999e <prvInsertBlockIntoFreeList+0x36>
 80099b6:	bf00      	nop
 80099b8:	20002a50 	.word	0x20002a50
 80099bc:	20000a40 	.word	0x20000a40

080099c0 <pvPortMalloc>:
{
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80099c4:	f7fe fee2 	bl	800878c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80099c8:	4b3a      	ldr	r3, [pc, #232]	; (8009ab4 <pvPortMalloc+0xf4>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	b1bb      	cbz	r3, 80099fe <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099ce:	4b3a      	ldr	r3, [pc, #232]	; (8009ab8 <pvPortMalloc+0xf8>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	421c      	tst	r4, r3
 80099d4:	d163      	bne.n	8009a9e <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 80099d6:	b1ac      	cbz	r4, 8009a04 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 80099d8:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099da:	f014 0f07 	tst.w	r4, #7
 80099de:	d011      	beq.n	8009a04 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80099e0:	f024 0407 	bic.w	r4, r4, #7
 80099e4:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099e6:	f004 0307 	and.w	r3, r4, #7
 80099ea:	b15b      	cbz	r3, 8009a04 <pvPortMalloc+0x44>
 80099ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f0:	f383 8811 	msr	BASEPRI, r3
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	f3bf 8f4f 	dsb	sy
 80099fc:	e7fe      	b.n	80099fc <pvPortMalloc+0x3c>
			prvHeapInit();
 80099fe:	f7ff ff81 	bl	8009904 <prvHeapInit>
 8009a02:	e7e4      	b.n	80099ce <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a04:	2c00      	cmp	r4, #0
 8009a06:	d04c      	beq.n	8009aa2 <pvPortMalloc+0xe2>
 8009a08:	4b2c      	ldr	r3, [pc, #176]	; (8009abc <pvPortMalloc+0xfc>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	42a3      	cmp	r3, r4
 8009a0e:	d34a      	bcc.n	8009aa6 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8009a10:	4b2b      	ldr	r3, [pc, #172]	; (8009ac0 <pvPortMalloc+0x100>)
 8009a12:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a14:	e001      	b.n	8009a1a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8009a16:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a18:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a1a:	686a      	ldr	r2, [r5, #4]
 8009a1c:	42a2      	cmp	r2, r4
 8009a1e:	d202      	bcs.n	8009a26 <pvPortMalloc+0x66>
 8009a20:	682a      	ldr	r2, [r5, #0]
 8009a22:	2a00      	cmp	r2, #0
 8009a24:	d1f7      	bne.n	8009a16 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8009a26:	4a23      	ldr	r2, [pc, #140]	; (8009ab4 <pvPortMalloc+0xf4>)
 8009a28:	6812      	ldr	r2, [r2, #0]
 8009a2a:	42aa      	cmp	r2, r5
 8009a2c:	d03d      	beq.n	8009aaa <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a2e:	681e      	ldr	r6, [r3, #0]
 8009a30:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a32:	682a      	ldr	r2, [r5, #0]
 8009a34:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a36:	686b      	ldr	r3, [r5, #4]
 8009a38:	1b1b      	subs	r3, r3, r4
 8009a3a:	2b10      	cmp	r3, #16
 8009a3c:	d910      	bls.n	8009a60 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a3e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a40:	f010 0f07 	tst.w	r0, #7
 8009a44:	d008      	beq.n	8009a58 <pvPortMalloc+0x98>
 8009a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	e7fe      	b.n	8009a56 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a58:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a5a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a5c:	f7ff ff84 	bl	8009968 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a60:	686a      	ldr	r2, [r5, #4]
 8009a62:	4916      	ldr	r1, [pc, #88]	; (8009abc <pvPortMalloc+0xfc>)
 8009a64:	680b      	ldr	r3, [r1, #0]
 8009a66:	1a9b      	subs	r3, r3, r2
 8009a68:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a6a:	4916      	ldr	r1, [pc, #88]	; (8009ac4 <pvPortMalloc+0x104>)
 8009a6c:	6809      	ldr	r1, [r1, #0]
 8009a6e:	428b      	cmp	r3, r1
 8009a70:	d201      	bcs.n	8009a76 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a72:	4914      	ldr	r1, [pc, #80]	; (8009ac4 <pvPortMalloc+0x104>)
 8009a74:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a76:	4b10      	ldr	r3, [pc, #64]	; (8009ab8 <pvPortMalloc+0xf8>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8009a82:	f7fe ff1d 	bl	80088c0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a86:	f016 0f07 	tst.w	r6, #7
 8009a8a:	d010      	beq.n	8009aae <pvPortMalloc+0xee>
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	e7fe      	b.n	8009a9c <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8009a9e:	2600      	movs	r6, #0
 8009aa0:	e7ef      	b.n	8009a82 <pvPortMalloc+0xc2>
 8009aa2:	2600      	movs	r6, #0
 8009aa4:	e7ed      	b.n	8009a82 <pvPortMalloc+0xc2>
 8009aa6:	2600      	movs	r6, #0
 8009aa8:	e7eb      	b.n	8009a82 <pvPortMalloc+0xc2>
 8009aaa:	2600      	movs	r6, #0
 8009aac:	e7e9      	b.n	8009a82 <pvPortMalloc+0xc2>
}
 8009aae:	4630      	mov	r0, r6
 8009ab0:	bd70      	pop	{r4, r5, r6, pc}
 8009ab2:	bf00      	nop
 8009ab4:	20000a40 	.word	0x20000a40
 8009ab8:	20002a44 	.word	0x20002a44
 8009abc:	20002a48 	.word	0x20002a48
 8009ac0:	20002a50 	.word	0x20002a50
 8009ac4:	20002a4c 	.word	0x20002a4c

08009ac8 <vPortFree>:
	if( pv != NULL )
 8009ac8:	b380      	cbz	r0, 8009b2c <vPortFree+0x64>
{
 8009aca:	b538      	push	{r3, r4, r5, lr}
 8009acc:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8009ace:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ad2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009ad6:	4916      	ldr	r1, [pc, #88]	; (8009b30 <vPortFree+0x68>)
 8009ad8:	6809      	ldr	r1, [r1, #0]
 8009ada:	420a      	tst	r2, r1
 8009adc:	d108      	bne.n	8009af0 <vPortFree+0x28>
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	e7fe      	b.n	8009aee <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009af0:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8009af4:	b140      	cbz	r0, 8009b08 <vPortFree+0x40>
 8009af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	e7fe      	b.n	8009b06 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b08:	ea22 0201 	bic.w	r2, r2, r1
 8009b0c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8009b10:	f7fe fe3c 	bl	800878c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b14:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8009b18:	4a06      	ldr	r2, [pc, #24]	; (8009b34 <vPortFree+0x6c>)
 8009b1a:	6813      	ldr	r3, [r2, #0]
 8009b1c:	440b      	add	r3, r1
 8009b1e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b20:	4628      	mov	r0, r5
 8009b22:	f7ff ff21 	bl	8009968 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8009b26:	f7fe fecb 	bl	80088c0 <xTaskResumeAll>
}
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	20002a44 	.word	0x20002a44
 8009b34:	20002a48 	.word	0x20002a48

08009b38 <__errno>:
 8009b38:	4b01      	ldr	r3, [pc, #4]	; (8009b40 <__errno+0x8>)
 8009b3a:	6818      	ldr	r0, [r3, #0]
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	20000040 	.word	0x20000040

08009b44 <__libc_init_array>:
 8009b44:	b570      	push	{r4, r5, r6, lr}
 8009b46:	4e0d      	ldr	r6, [pc, #52]	; (8009b7c <__libc_init_array+0x38>)
 8009b48:	4c0d      	ldr	r4, [pc, #52]	; (8009b80 <__libc_init_array+0x3c>)
 8009b4a:	1ba4      	subs	r4, r4, r6
 8009b4c:	10a4      	asrs	r4, r4, #2
 8009b4e:	2500      	movs	r5, #0
 8009b50:	42a5      	cmp	r5, r4
 8009b52:	d109      	bne.n	8009b68 <__libc_init_array+0x24>
 8009b54:	4e0b      	ldr	r6, [pc, #44]	; (8009b84 <__libc_init_array+0x40>)
 8009b56:	4c0c      	ldr	r4, [pc, #48]	; (8009b88 <__libc_init_array+0x44>)
 8009b58:	f000 fc28 	bl	800a3ac <_init>
 8009b5c:	1ba4      	subs	r4, r4, r6
 8009b5e:	10a4      	asrs	r4, r4, #2
 8009b60:	2500      	movs	r5, #0
 8009b62:	42a5      	cmp	r5, r4
 8009b64:	d105      	bne.n	8009b72 <__libc_init_array+0x2e>
 8009b66:	bd70      	pop	{r4, r5, r6, pc}
 8009b68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b6c:	4798      	blx	r3
 8009b6e:	3501      	adds	r5, #1
 8009b70:	e7ee      	b.n	8009b50 <__libc_init_array+0xc>
 8009b72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b76:	4798      	blx	r3
 8009b78:	3501      	adds	r5, #1
 8009b7a:	e7f2      	b.n	8009b62 <__libc_init_array+0x1e>
 8009b7c:	0800a844 	.word	0x0800a844
 8009b80:	0800a844 	.word	0x0800a844
 8009b84:	0800a844 	.word	0x0800a844
 8009b88:	0800a848 	.word	0x0800a848

08009b8c <memcpy>:
 8009b8c:	b510      	push	{r4, lr}
 8009b8e:	1e43      	subs	r3, r0, #1
 8009b90:	440a      	add	r2, r1
 8009b92:	4291      	cmp	r1, r2
 8009b94:	d100      	bne.n	8009b98 <memcpy+0xc>
 8009b96:	bd10      	pop	{r4, pc}
 8009b98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ba0:	e7f7      	b.n	8009b92 <memcpy+0x6>

08009ba2 <memset>:
 8009ba2:	4402      	add	r2, r0
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d100      	bne.n	8009bac <memset+0xa>
 8009baa:	4770      	bx	lr
 8009bac:	f803 1b01 	strb.w	r1, [r3], #1
 8009bb0:	e7f9      	b.n	8009ba6 <memset+0x4>
	...

08009bb4 <siprintf>:
 8009bb4:	b40e      	push	{r1, r2, r3}
 8009bb6:	b500      	push	{lr}
 8009bb8:	b09c      	sub	sp, #112	; 0x70
 8009bba:	ab1d      	add	r3, sp, #116	; 0x74
 8009bbc:	9002      	str	r0, [sp, #8]
 8009bbe:	9006      	str	r0, [sp, #24]
 8009bc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009bc4:	4809      	ldr	r0, [pc, #36]	; (8009bec <siprintf+0x38>)
 8009bc6:	9107      	str	r1, [sp, #28]
 8009bc8:	9104      	str	r1, [sp, #16]
 8009bca:	4909      	ldr	r1, [pc, #36]	; (8009bf0 <siprintf+0x3c>)
 8009bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bd0:	9105      	str	r1, [sp, #20]
 8009bd2:	6800      	ldr	r0, [r0, #0]
 8009bd4:	9301      	str	r3, [sp, #4]
 8009bd6:	a902      	add	r1, sp, #8
 8009bd8:	f000 f866 	bl	8009ca8 <_svfiprintf_r>
 8009bdc:	9b02      	ldr	r3, [sp, #8]
 8009bde:	2200      	movs	r2, #0
 8009be0:	701a      	strb	r2, [r3, #0]
 8009be2:	b01c      	add	sp, #112	; 0x70
 8009be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009be8:	b003      	add	sp, #12
 8009bea:	4770      	bx	lr
 8009bec:	20000040 	.word	0x20000040
 8009bf0:	ffff0208 	.word	0xffff0208

08009bf4 <__ssputs_r>:
 8009bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf8:	688e      	ldr	r6, [r1, #8]
 8009bfa:	429e      	cmp	r6, r3
 8009bfc:	4682      	mov	sl, r0
 8009bfe:	460c      	mov	r4, r1
 8009c00:	4690      	mov	r8, r2
 8009c02:	4699      	mov	r9, r3
 8009c04:	d837      	bhi.n	8009c76 <__ssputs_r+0x82>
 8009c06:	898a      	ldrh	r2, [r1, #12]
 8009c08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c0c:	d031      	beq.n	8009c72 <__ssputs_r+0x7e>
 8009c0e:	6825      	ldr	r5, [r4, #0]
 8009c10:	6909      	ldr	r1, [r1, #16]
 8009c12:	1a6f      	subs	r7, r5, r1
 8009c14:	6965      	ldr	r5, [r4, #20]
 8009c16:	2302      	movs	r3, #2
 8009c18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c1c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009c20:	f109 0301 	add.w	r3, r9, #1
 8009c24:	443b      	add	r3, r7
 8009c26:	429d      	cmp	r5, r3
 8009c28:	bf38      	it	cc
 8009c2a:	461d      	movcc	r5, r3
 8009c2c:	0553      	lsls	r3, r2, #21
 8009c2e:	d530      	bpl.n	8009c92 <__ssputs_r+0x9e>
 8009c30:	4629      	mov	r1, r5
 8009c32:	f000 fb21 	bl	800a278 <_malloc_r>
 8009c36:	4606      	mov	r6, r0
 8009c38:	b950      	cbnz	r0, 8009c50 <__ssputs_r+0x5c>
 8009c3a:	230c      	movs	r3, #12
 8009c3c:	f8ca 3000 	str.w	r3, [sl]
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c46:	81a3      	strh	r3, [r4, #12]
 8009c48:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c50:	463a      	mov	r2, r7
 8009c52:	6921      	ldr	r1, [r4, #16]
 8009c54:	f7ff ff9a 	bl	8009b8c <memcpy>
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c62:	81a3      	strh	r3, [r4, #12]
 8009c64:	6126      	str	r6, [r4, #16]
 8009c66:	6165      	str	r5, [r4, #20]
 8009c68:	443e      	add	r6, r7
 8009c6a:	1bed      	subs	r5, r5, r7
 8009c6c:	6026      	str	r6, [r4, #0]
 8009c6e:	60a5      	str	r5, [r4, #8]
 8009c70:	464e      	mov	r6, r9
 8009c72:	454e      	cmp	r6, r9
 8009c74:	d900      	bls.n	8009c78 <__ssputs_r+0x84>
 8009c76:	464e      	mov	r6, r9
 8009c78:	4632      	mov	r2, r6
 8009c7a:	4641      	mov	r1, r8
 8009c7c:	6820      	ldr	r0, [r4, #0]
 8009c7e:	f000 fa93 	bl	800a1a8 <memmove>
 8009c82:	68a3      	ldr	r3, [r4, #8]
 8009c84:	1b9b      	subs	r3, r3, r6
 8009c86:	60a3      	str	r3, [r4, #8]
 8009c88:	6823      	ldr	r3, [r4, #0]
 8009c8a:	441e      	add	r6, r3
 8009c8c:	6026      	str	r6, [r4, #0]
 8009c8e:	2000      	movs	r0, #0
 8009c90:	e7dc      	b.n	8009c4c <__ssputs_r+0x58>
 8009c92:	462a      	mov	r2, r5
 8009c94:	f000 fb4a 	bl	800a32c <_realloc_r>
 8009c98:	4606      	mov	r6, r0
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	d1e2      	bne.n	8009c64 <__ssputs_r+0x70>
 8009c9e:	6921      	ldr	r1, [r4, #16]
 8009ca0:	4650      	mov	r0, sl
 8009ca2:	f000 fa9b 	bl	800a1dc <_free_r>
 8009ca6:	e7c8      	b.n	8009c3a <__ssputs_r+0x46>

08009ca8 <_svfiprintf_r>:
 8009ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cac:	461d      	mov	r5, r3
 8009cae:	898b      	ldrh	r3, [r1, #12]
 8009cb0:	061f      	lsls	r7, r3, #24
 8009cb2:	b09d      	sub	sp, #116	; 0x74
 8009cb4:	4680      	mov	r8, r0
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	4616      	mov	r6, r2
 8009cba:	d50f      	bpl.n	8009cdc <_svfiprintf_r+0x34>
 8009cbc:	690b      	ldr	r3, [r1, #16]
 8009cbe:	b96b      	cbnz	r3, 8009cdc <_svfiprintf_r+0x34>
 8009cc0:	2140      	movs	r1, #64	; 0x40
 8009cc2:	f000 fad9 	bl	800a278 <_malloc_r>
 8009cc6:	6020      	str	r0, [r4, #0]
 8009cc8:	6120      	str	r0, [r4, #16]
 8009cca:	b928      	cbnz	r0, 8009cd8 <_svfiprintf_r+0x30>
 8009ccc:	230c      	movs	r3, #12
 8009cce:	f8c8 3000 	str.w	r3, [r8]
 8009cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd6:	e0c8      	b.n	8009e6a <_svfiprintf_r+0x1c2>
 8009cd8:	2340      	movs	r3, #64	; 0x40
 8009cda:	6163      	str	r3, [r4, #20]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce0:	2320      	movs	r3, #32
 8009ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ce6:	2330      	movs	r3, #48	; 0x30
 8009ce8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cec:	9503      	str	r5, [sp, #12]
 8009cee:	f04f 0b01 	mov.w	fp, #1
 8009cf2:	4637      	mov	r7, r6
 8009cf4:	463d      	mov	r5, r7
 8009cf6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009cfa:	b10b      	cbz	r3, 8009d00 <_svfiprintf_r+0x58>
 8009cfc:	2b25      	cmp	r3, #37	; 0x25
 8009cfe:	d13e      	bne.n	8009d7e <_svfiprintf_r+0xd6>
 8009d00:	ebb7 0a06 	subs.w	sl, r7, r6
 8009d04:	d00b      	beq.n	8009d1e <_svfiprintf_r+0x76>
 8009d06:	4653      	mov	r3, sl
 8009d08:	4632      	mov	r2, r6
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	4640      	mov	r0, r8
 8009d0e:	f7ff ff71 	bl	8009bf4 <__ssputs_r>
 8009d12:	3001      	adds	r0, #1
 8009d14:	f000 80a4 	beq.w	8009e60 <_svfiprintf_r+0x1b8>
 8009d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d1a:	4453      	add	r3, sl
 8009d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d1e:	783b      	ldrb	r3, [r7, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 809d 	beq.w	8009e60 <_svfiprintf_r+0x1b8>
 8009d26:	2300      	movs	r3, #0
 8009d28:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d30:	9304      	str	r3, [sp, #16]
 8009d32:	9307      	str	r3, [sp, #28]
 8009d34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d38:	931a      	str	r3, [sp, #104]	; 0x68
 8009d3a:	462f      	mov	r7, r5
 8009d3c:	2205      	movs	r2, #5
 8009d3e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009d42:	4850      	ldr	r0, [pc, #320]	; (8009e84 <_svfiprintf_r+0x1dc>)
 8009d44:	f7f6 fa4c 	bl	80001e0 <memchr>
 8009d48:	9b04      	ldr	r3, [sp, #16]
 8009d4a:	b9d0      	cbnz	r0, 8009d82 <_svfiprintf_r+0xda>
 8009d4c:	06d9      	lsls	r1, r3, #27
 8009d4e:	bf44      	itt	mi
 8009d50:	2220      	movmi	r2, #32
 8009d52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d56:	071a      	lsls	r2, r3, #28
 8009d58:	bf44      	itt	mi
 8009d5a:	222b      	movmi	r2, #43	; 0x2b
 8009d5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d60:	782a      	ldrb	r2, [r5, #0]
 8009d62:	2a2a      	cmp	r2, #42	; 0x2a
 8009d64:	d015      	beq.n	8009d92 <_svfiprintf_r+0xea>
 8009d66:	9a07      	ldr	r2, [sp, #28]
 8009d68:	462f      	mov	r7, r5
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	250a      	movs	r5, #10
 8009d6e:	4639      	mov	r1, r7
 8009d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d74:	3b30      	subs	r3, #48	; 0x30
 8009d76:	2b09      	cmp	r3, #9
 8009d78:	d94d      	bls.n	8009e16 <_svfiprintf_r+0x16e>
 8009d7a:	b1b8      	cbz	r0, 8009dac <_svfiprintf_r+0x104>
 8009d7c:	e00f      	b.n	8009d9e <_svfiprintf_r+0xf6>
 8009d7e:	462f      	mov	r7, r5
 8009d80:	e7b8      	b.n	8009cf4 <_svfiprintf_r+0x4c>
 8009d82:	4a40      	ldr	r2, [pc, #256]	; (8009e84 <_svfiprintf_r+0x1dc>)
 8009d84:	1a80      	subs	r0, r0, r2
 8009d86:	fa0b f000 	lsl.w	r0, fp, r0
 8009d8a:	4318      	orrs	r0, r3
 8009d8c:	9004      	str	r0, [sp, #16]
 8009d8e:	463d      	mov	r5, r7
 8009d90:	e7d3      	b.n	8009d3a <_svfiprintf_r+0x92>
 8009d92:	9a03      	ldr	r2, [sp, #12]
 8009d94:	1d11      	adds	r1, r2, #4
 8009d96:	6812      	ldr	r2, [r2, #0]
 8009d98:	9103      	str	r1, [sp, #12]
 8009d9a:	2a00      	cmp	r2, #0
 8009d9c:	db01      	blt.n	8009da2 <_svfiprintf_r+0xfa>
 8009d9e:	9207      	str	r2, [sp, #28]
 8009da0:	e004      	b.n	8009dac <_svfiprintf_r+0x104>
 8009da2:	4252      	negs	r2, r2
 8009da4:	f043 0302 	orr.w	r3, r3, #2
 8009da8:	9207      	str	r2, [sp, #28]
 8009daa:	9304      	str	r3, [sp, #16]
 8009dac:	783b      	ldrb	r3, [r7, #0]
 8009dae:	2b2e      	cmp	r3, #46	; 0x2e
 8009db0:	d10c      	bne.n	8009dcc <_svfiprintf_r+0x124>
 8009db2:	787b      	ldrb	r3, [r7, #1]
 8009db4:	2b2a      	cmp	r3, #42	; 0x2a
 8009db6:	d133      	bne.n	8009e20 <_svfiprintf_r+0x178>
 8009db8:	9b03      	ldr	r3, [sp, #12]
 8009dba:	1d1a      	adds	r2, r3, #4
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	9203      	str	r2, [sp, #12]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	bfb8      	it	lt
 8009dc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dc8:	3702      	adds	r7, #2
 8009dca:	9305      	str	r3, [sp, #20]
 8009dcc:	4d2e      	ldr	r5, [pc, #184]	; (8009e88 <_svfiprintf_r+0x1e0>)
 8009dce:	7839      	ldrb	r1, [r7, #0]
 8009dd0:	2203      	movs	r2, #3
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f7f6 fa04 	bl	80001e0 <memchr>
 8009dd8:	b138      	cbz	r0, 8009dea <_svfiprintf_r+0x142>
 8009dda:	2340      	movs	r3, #64	; 0x40
 8009ddc:	1b40      	subs	r0, r0, r5
 8009dde:	fa03 f000 	lsl.w	r0, r3, r0
 8009de2:	9b04      	ldr	r3, [sp, #16]
 8009de4:	4303      	orrs	r3, r0
 8009de6:	3701      	adds	r7, #1
 8009de8:	9304      	str	r3, [sp, #16]
 8009dea:	7839      	ldrb	r1, [r7, #0]
 8009dec:	4827      	ldr	r0, [pc, #156]	; (8009e8c <_svfiprintf_r+0x1e4>)
 8009dee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009df2:	2206      	movs	r2, #6
 8009df4:	1c7e      	adds	r6, r7, #1
 8009df6:	f7f6 f9f3 	bl	80001e0 <memchr>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d038      	beq.n	8009e70 <_svfiprintf_r+0x1c8>
 8009dfe:	4b24      	ldr	r3, [pc, #144]	; (8009e90 <_svfiprintf_r+0x1e8>)
 8009e00:	bb13      	cbnz	r3, 8009e48 <_svfiprintf_r+0x1a0>
 8009e02:	9b03      	ldr	r3, [sp, #12]
 8009e04:	3307      	adds	r3, #7
 8009e06:	f023 0307 	bic.w	r3, r3, #7
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	9303      	str	r3, [sp, #12]
 8009e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e10:	444b      	add	r3, r9
 8009e12:	9309      	str	r3, [sp, #36]	; 0x24
 8009e14:	e76d      	b.n	8009cf2 <_svfiprintf_r+0x4a>
 8009e16:	fb05 3202 	mla	r2, r5, r2, r3
 8009e1a:	2001      	movs	r0, #1
 8009e1c:	460f      	mov	r7, r1
 8009e1e:	e7a6      	b.n	8009d6e <_svfiprintf_r+0xc6>
 8009e20:	2300      	movs	r3, #0
 8009e22:	3701      	adds	r7, #1
 8009e24:	9305      	str	r3, [sp, #20]
 8009e26:	4619      	mov	r1, r3
 8009e28:	250a      	movs	r5, #10
 8009e2a:	4638      	mov	r0, r7
 8009e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e30:	3a30      	subs	r2, #48	; 0x30
 8009e32:	2a09      	cmp	r2, #9
 8009e34:	d903      	bls.n	8009e3e <_svfiprintf_r+0x196>
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d0c8      	beq.n	8009dcc <_svfiprintf_r+0x124>
 8009e3a:	9105      	str	r1, [sp, #20]
 8009e3c:	e7c6      	b.n	8009dcc <_svfiprintf_r+0x124>
 8009e3e:	fb05 2101 	mla	r1, r5, r1, r2
 8009e42:	2301      	movs	r3, #1
 8009e44:	4607      	mov	r7, r0
 8009e46:	e7f0      	b.n	8009e2a <_svfiprintf_r+0x182>
 8009e48:	ab03      	add	r3, sp, #12
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	4622      	mov	r2, r4
 8009e4e:	4b11      	ldr	r3, [pc, #68]	; (8009e94 <_svfiprintf_r+0x1ec>)
 8009e50:	a904      	add	r1, sp, #16
 8009e52:	4640      	mov	r0, r8
 8009e54:	f3af 8000 	nop.w
 8009e58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009e5c:	4681      	mov	r9, r0
 8009e5e:	d1d6      	bne.n	8009e0e <_svfiprintf_r+0x166>
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	065b      	lsls	r3, r3, #25
 8009e64:	f53f af35 	bmi.w	8009cd2 <_svfiprintf_r+0x2a>
 8009e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e6a:	b01d      	add	sp, #116	; 0x74
 8009e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e70:	ab03      	add	r3, sp, #12
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	4622      	mov	r2, r4
 8009e76:	4b07      	ldr	r3, [pc, #28]	; (8009e94 <_svfiprintf_r+0x1ec>)
 8009e78:	a904      	add	r1, sp, #16
 8009e7a:	4640      	mov	r0, r8
 8009e7c:	f000 f882 	bl	8009f84 <_printf_i>
 8009e80:	e7ea      	b.n	8009e58 <_svfiprintf_r+0x1b0>
 8009e82:	bf00      	nop
 8009e84:	0800a808 	.word	0x0800a808
 8009e88:	0800a80e 	.word	0x0800a80e
 8009e8c:	0800a812 	.word	0x0800a812
 8009e90:	00000000 	.word	0x00000000
 8009e94:	08009bf5 	.word	0x08009bf5

08009e98 <_printf_common>:
 8009e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e9c:	4691      	mov	r9, r2
 8009e9e:	461f      	mov	r7, r3
 8009ea0:	688a      	ldr	r2, [r1, #8]
 8009ea2:	690b      	ldr	r3, [r1, #16]
 8009ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	bfb8      	it	lt
 8009eac:	4613      	movlt	r3, r2
 8009eae:	f8c9 3000 	str.w	r3, [r9]
 8009eb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	460c      	mov	r4, r1
 8009eba:	b112      	cbz	r2, 8009ec2 <_printf_common+0x2a>
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	f8c9 3000 	str.w	r3, [r9]
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	0699      	lsls	r1, r3, #26
 8009ec6:	bf42      	ittt	mi
 8009ec8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009ecc:	3302      	addmi	r3, #2
 8009ece:	f8c9 3000 	strmi.w	r3, [r9]
 8009ed2:	6825      	ldr	r5, [r4, #0]
 8009ed4:	f015 0506 	ands.w	r5, r5, #6
 8009ed8:	d107      	bne.n	8009eea <_printf_common+0x52>
 8009eda:	f104 0a19 	add.w	sl, r4, #25
 8009ede:	68e3      	ldr	r3, [r4, #12]
 8009ee0:	f8d9 2000 	ldr.w	r2, [r9]
 8009ee4:	1a9b      	subs	r3, r3, r2
 8009ee6:	42ab      	cmp	r3, r5
 8009ee8:	dc28      	bgt.n	8009f3c <_printf_common+0xa4>
 8009eea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009eee:	6822      	ldr	r2, [r4, #0]
 8009ef0:	3300      	adds	r3, #0
 8009ef2:	bf18      	it	ne
 8009ef4:	2301      	movne	r3, #1
 8009ef6:	0692      	lsls	r2, r2, #26
 8009ef8:	d42d      	bmi.n	8009f56 <_printf_common+0xbe>
 8009efa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009efe:	4639      	mov	r1, r7
 8009f00:	4630      	mov	r0, r6
 8009f02:	47c0      	blx	r8
 8009f04:	3001      	adds	r0, #1
 8009f06:	d020      	beq.n	8009f4a <_printf_common+0xb2>
 8009f08:	6823      	ldr	r3, [r4, #0]
 8009f0a:	68e5      	ldr	r5, [r4, #12]
 8009f0c:	f8d9 2000 	ldr.w	r2, [r9]
 8009f10:	f003 0306 	and.w	r3, r3, #6
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	bf08      	it	eq
 8009f18:	1aad      	subeq	r5, r5, r2
 8009f1a:	68a3      	ldr	r3, [r4, #8]
 8009f1c:	6922      	ldr	r2, [r4, #16]
 8009f1e:	bf0c      	ite	eq
 8009f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f24:	2500      	movne	r5, #0
 8009f26:	4293      	cmp	r3, r2
 8009f28:	bfc4      	itt	gt
 8009f2a:	1a9b      	subgt	r3, r3, r2
 8009f2c:	18ed      	addgt	r5, r5, r3
 8009f2e:	f04f 0900 	mov.w	r9, #0
 8009f32:	341a      	adds	r4, #26
 8009f34:	454d      	cmp	r5, r9
 8009f36:	d11a      	bne.n	8009f6e <_printf_common+0xd6>
 8009f38:	2000      	movs	r0, #0
 8009f3a:	e008      	b.n	8009f4e <_printf_common+0xb6>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	4652      	mov	r2, sl
 8009f40:	4639      	mov	r1, r7
 8009f42:	4630      	mov	r0, r6
 8009f44:	47c0      	blx	r8
 8009f46:	3001      	adds	r0, #1
 8009f48:	d103      	bne.n	8009f52 <_printf_common+0xba>
 8009f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f52:	3501      	adds	r5, #1
 8009f54:	e7c3      	b.n	8009ede <_printf_common+0x46>
 8009f56:	18e1      	adds	r1, r4, r3
 8009f58:	1c5a      	adds	r2, r3, #1
 8009f5a:	2030      	movs	r0, #48	; 0x30
 8009f5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f60:	4422      	add	r2, r4
 8009f62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f6a:	3302      	adds	r3, #2
 8009f6c:	e7c5      	b.n	8009efa <_printf_common+0x62>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	4622      	mov	r2, r4
 8009f72:	4639      	mov	r1, r7
 8009f74:	4630      	mov	r0, r6
 8009f76:	47c0      	blx	r8
 8009f78:	3001      	adds	r0, #1
 8009f7a:	d0e6      	beq.n	8009f4a <_printf_common+0xb2>
 8009f7c:	f109 0901 	add.w	r9, r9, #1
 8009f80:	e7d8      	b.n	8009f34 <_printf_common+0x9c>
	...

08009f84 <_printf_i>:
 8009f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	7e09      	ldrb	r1, [r1, #24]
 8009f90:	b085      	sub	sp, #20
 8009f92:	296e      	cmp	r1, #110	; 0x6e
 8009f94:	4617      	mov	r7, r2
 8009f96:	4606      	mov	r6, r0
 8009f98:	4698      	mov	r8, r3
 8009f9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f9c:	f000 80b3 	beq.w	800a106 <_printf_i+0x182>
 8009fa0:	d822      	bhi.n	8009fe8 <_printf_i+0x64>
 8009fa2:	2963      	cmp	r1, #99	; 0x63
 8009fa4:	d036      	beq.n	800a014 <_printf_i+0x90>
 8009fa6:	d80a      	bhi.n	8009fbe <_printf_i+0x3a>
 8009fa8:	2900      	cmp	r1, #0
 8009faa:	f000 80b9 	beq.w	800a120 <_printf_i+0x19c>
 8009fae:	2958      	cmp	r1, #88	; 0x58
 8009fb0:	f000 8083 	beq.w	800a0ba <_printf_i+0x136>
 8009fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009fbc:	e032      	b.n	800a024 <_printf_i+0xa0>
 8009fbe:	2964      	cmp	r1, #100	; 0x64
 8009fc0:	d001      	beq.n	8009fc6 <_printf_i+0x42>
 8009fc2:	2969      	cmp	r1, #105	; 0x69
 8009fc4:	d1f6      	bne.n	8009fb4 <_printf_i+0x30>
 8009fc6:	6820      	ldr	r0, [r4, #0]
 8009fc8:	6813      	ldr	r3, [r2, #0]
 8009fca:	0605      	lsls	r5, r0, #24
 8009fcc:	f103 0104 	add.w	r1, r3, #4
 8009fd0:	d52a      	bpl.n	800a028 <_printf_i+0xa4>
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6011      	str	r1, [r2, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	da03      	bge.n	8009fe2 <_printf_i+0x5e>
 8009fda:	222d      	movs	r2, #45	; 0x2d
 8009fdc:	425b      	negs	r3, r3
 8009fde:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009fe2:	486f      	ldr	r0, [pc, #444]	; (800a1a0 <_printf_i+0x21c>)
 8009fe4:	220a      	movs	r2, #10
 8009fe6:	e039      	b.n	800a05c <_printf_i+0xd8>
 8009fe8:	2973      	cmp	r1, #115	; 0x73
 8009fea:	f000 809d 	beq.w	800a128 <_printf_i+0x1a4>
 8009fee:	d808      	bhi.n	800a002 <_printf_i+0x7e>
 8009ff0:	296f      	cmp	r1, #111	; 0x6f
 8009ff2:	d020      	beq.n	800a036 <_printf_i+0xb2>
 8009ff4:	2970      	cmp	r1, #112	; 0x70
 8009ff6:	d1dd      	bne.n	8009fb4 <_printf_i+0x30>
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	f043 0320 	orr.w	r3, r3, #32
 8009ffe:	6023      	str	r3, [r4, #0]
 800a000:	e003      	b.n	800a00a <_printf_i+0x86>
 800a002:	2975      	cmp	r1, #117	; 0x75
 800a004:	d017      	beq.n	800a036 <_printf_i+0xb2>
 800a006:	2978      	cmp	r1, #120	; 0x78
 800a008:	d1d4      	bne.n	8009fb4 <_printf_i+0x30>
 800a00a:	2378      	movs	r3, #120	; 0x78
 800a00c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a010:	4864      	ldr	r0, [pc, #400]	; (800a1a4 <_printf_i+0x220>)
 800a012:	e055      	b.n	800a0c0 <_printf_i+0x13c>
 800a014:	6813      	ldr	r3, [r2, #0]
 800a016:	1d19      	adds	r1, r3, #4
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6011      	str	r1, [r2, #0]
 800a01c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a024:	2301      	movs	r3, #1
 800a026:	e08c      	b.n	800a142 <_printf_i+0x1be>
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	6011      	str	r1, [r2, #0]
 800a02c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a030:	bf18      	it	ne
 800a032:	b21b      	sxthne	r3, r3
 800a034:	e7cf      	b.n	8009fd6 <_printf_i+0x52>
 800a036:	6813      	ldr	r3, [r2, #0]
 800a038:	6825      	ldr	r5, [r4, #0]
 800a03a:	1d18      	adds	r0, r3, #4
 800a03c:	6010      	str	r0, [r2, #0]
 800a03e:	0628      	lsls	r0, r5, #24
 800a040:	d501      	bpl.n	800a046 <_printf_i+0xc2>
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	e002      	b.n	800a04c <_printf_i+0xc8>
 800a046:	0668      	lsls	r0, r5, #25
 800a048:	d5fb      	bpl.n	800a042 <_printf_i+0xbe>
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	4854      	ldr	r0, [pc, #336]	; (800a1a0 <_printf_i+0x21c>)
 800a04e:	296f      	cmp	r1, #111	; 0x6f
 800a050:	bf14      	ite	ne
 800a052:	220a      	movne	r2, #10
 800a054:	2208      	moveq	r2, #8
 800a056:	2100      	movs	r1, #0
 800a058:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a05c:	6865      	ldr	r5, [r4, #4]
 800a05e:	60a5      	str	r5, [r4, #8]
 800a060:	2d00      	cmp	r5, #0
 800a062:	f2c0 8095 	blt.w	800a190 <_printf_i+0x20c>
 800a066:	6821      	ldr	r1, [r4, #0]
 800a068:	f021 0104 	bic.w	r1, r1, #4
 800a06c:	6021      	str	r1, [r4, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d13d      	bne.n	800a0ee <_printf_i+0x16a>
 800a072:	2d00      	cmp	r5, #0
 800a074:	f040 808e 	bne.w	800a194 <_printf_i+0x210>
 800a078:	4665      	mov	r5, ip
 800a07a:	2a08      	cmp	r2, #8
 800a07c:	d10b      	bne.n	800a096 <_printf_i+0x112>
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	07db      	lsls	r3, r3, #31
 800a082:	d508      	bpl.n	800a096 <_printf_i+0x112>
 800a084:	6923      	ldr	r3, [r4, #16]
 800a086:	6862      	ldr	r2, [r4, #4]
 800a088:	429a      	cmp	r2, r3
 800a08a:	bfde      	ittt	le
 800a08c:	2330      	movle	r3, #48	; 0x30
 800a08e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a092:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a096:	ebac 0305 	sub.w	r3, ip, r5
 800a09a:	6123      	str	r3, [r4, #16]
 800a09c:	f8cd 8000 	str.w	r8, [sp]
 800a0a0:	463b      	mov	r3, r7
 800a0a2:	aa03      	add	r2, sp, #12
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	f7ff fef6 	bl	8009e98 <_printf_common>
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	d14d      	bne.n	800a14c <_printf_i+0x1c8>
 800a0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b4:	b005      	add	sp, #20
 800a0b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0ba:	4839      	ldr	r0, [pc, #228]	; (800a1a0 <_printf_i+0x21c>)
 800a0bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a0c0:	6813      	ldr	r3, [r2, #0]
 800a0c2:	6821      	ldr	r1, [r4, #0]
 800a0c4:	1d1d      	adds	r5, r3, #4
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6015      	str	r5, [r2, #0]
 800a0ca:	060a      	lsls	r2, r1, #24
 800a0cc:	d50b      	bpl.n	800a0e6 <_printf_i+0x162>
 800a0ce:	07ca      	lsls	r2, r1, #31
 800a0d0:	bf44      	itt	mi
 800a0d2:	f041 0120 	orrmi.w	r1, r1, #32
 800a0d6:	6021      	strmi	r1, [r4, #0]
 800a0d8:	b91b      	cbnz	r3, 800a0e2 <_printf_i+0x15e>
 800a0da:	6822      	ldr	r2, [r4, #0]
 800a0dc:	f022 0220 	bic.w	r2, r2, #32
 800a0e0:	6022      	str	r2, [r4, #0]
 800a0e2:	2210      	movs	r2, #16
 800a0e4:	e7b7      	b.n	800a056 <_printf_i+0xd2>
 800a0e6:	064d      	lsls	r5, r1, #25
 800a0e8:	bf48      	it	mi
 800a0ea:	b29b      	uxthmi	r3, r3
 800a0ec:	e7ef      	b.n	800a0ce <_printf_i+0x14a>
 800a0ee:	4665      	mov	r5, ip
 800a0f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0f4:	fb02 3311 	mls	r3, r2, r1, r3
 800a0f8:	5cc3      	ldrb	r3, [r0, r3]
 800a0fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a0fe:	460b      	mov	r3, r1
 800a100:	2900      	cmp	r1, #0
 800a102:	d1f5      	bne.n	800a0f0 <_printf_i+0x16c>
 800a104:	e7b9      	b.n	800a07a <_printf_i+0xf6>
 800a106:	6813      	ldr	r3, [r2, #0]
 800a108:	6825      	ldr	r5, [r4, #0]
 800a10a:	6961      	ldr	r1, [r4, #20]
 800a10c:	1d18      	adds	r0, r3, #4
 800a10e:	6010      	str	r0, [r2, #0]
 800a110:	0628      	lsls	r0, r5, #24
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	d501      	bpl.n	800a11a <_printf_i+0x196>
 800a116:	6019      	str	r1, [r3, #0]
 800a118:	e002      	b.n	800a120 <_printf_i+0x19c>
 800a11a:	066a      	lsls	r2, r5, #25
 800a11c:	d5fb      	bpl.n	800a116 <_printf_i+0x192>
 800a11e:	8019      	strh	r1, [r3, #0]
 800a120:	2300      	movs	r3, #0
 800a122:	6123      	str	r3, [r4, #16]
 800a124:	4665      	mov	r5, ip
 800a126:	e7b9      	b.n	800a09c <_printf_i+0x118>
 800a128:	6813      	ldr	r3, [r2, #0]
 800a12a:	1d19      	adds	r1, r3, #4
 800a12c:	6011      	str	r1, [r2, #0]
 800a12e:	681d      	ldr	r5, [r3, #0]
 800a130:	6862      	ldr	r2, [r4, #4]
 800a132:	2100      	movs	r1, #0
 800a134:	4628      	mov	r0, r5
 800a136:	f7f6 f853 	bl	80001e0 <memchr>
 800a13a:	b108      	cbz	r0, 800a140 <_printf_i+0x1bc>
 800a13c:	1b40      	subs	r0, r0, r5
 800a13e:	6060      	str	r0, [r4, #4]
 800a140:	6863      	ldr	r3, [r4, #4]
 800a142:	6123      	str	r3, [r4, #16]
 800a144:	2300      	movs	r3, #0
 800a146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a14a:	e7a7      	b.n	800a09c <_printf_i+0x118>
 800a14c:	6923      	ldr	r3, [r4, #16]
 800a14e:	462a      	mov	r2, r5
 800a150:	4639      	mov	r1, r7
 800a152:	4630      	mov	r0, r6
 800a154:	47c0      	blx	r8
 800a156:	3001      	adds	r0, #1
 800a158:	d0aa      	beq.n	800a0b0 <_printf_i+0x12c>
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	079b      	lsls	r3, r3, #30
 800a15e:	d413      	bmi.n	800a188 <_printf_i+0x204>
 800a160:	68e0      	ldr	r0, [r4, #12]
 800a162:	9b03      	ldr	r3, [sp, #12]
 800a164:	4298      	cmp	r0, r3
 800a166:	bfb8      	it	lt
 800a168:	4618      	movlt	r0, r3
 800a16a:	e7a3      	b.n	800a0b4 <_printf_i+0x130>
 800a16c:	2301      	movs	r3, #1
 800a16e:	464a      	mov	r2, r9
 800a170:	4639      	mov	r1, r7
 800a172:	4630      	mov	r0, r6
 800a174:	47c0      	blx	r8
 800a176:	3001      	adds	r0, #1
 800a178:	d09a      	beq.n	800a0b0 <_printf_i+0x12c>
 800a17a:	3501      	adds	r5, #1
 800a17c:	68e3      	ldr	r3, [r4, #12]
 800a17e:	9a03      	ldr	r2, [sp, #12]
 800a180:	1a9b      	subs	r3, r3, r2
 800a182:	42ab      	cmp	r3, r5
 800a184:	dcf2      	bgt.n	800a16c <_printf_i+0x1e8>
 800a186:	e7eb      	b.n	800a160 <_printf_i+0x1dc>
 800a188:	2500      	movs	r5, #0
 800a18a:	f104 0919 	add.w	r9, r4, #25
 800a18e:	e7f5      	b.n	800a17c <_printf_i+0x1f8>
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1ac      	bne.n	800a0ee <_printf_i+0x16a>
 800a194:	7803      	ldrb	r3, [r0, #0]
 800a196:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a19a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a19e:	e76c      	b.n	800a07a <_printf_i+0xf6>
 800a1a0:	0800a819 	.word	0x0800a819
 800a1a4:	0800a82a 	.word	0x0800a82a

0800a1a8 <memmove>:
 800a1a8:	4288      	cmp	r0, r1
 800a1aa:	b510      	push	{r4, lr}
 800a1ac:	eb01 0302 	add.w	r3, r1, r2
 800a1b0:	d807      	bhi.n	800a1c2 <memmove+0x1a>
 800a1b2:	1e42      	subs	r2, r0, #1
 800a1b4:	4299      	cmp	r1, r3
 800a1b6:	d00a      	beq.n	800a1ce <memmove+0x26>
 800a1b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a1c0:	e7f8      	b.n	800a1b4 <memmove+0xc>
 800a1c2:	4283      	cmp	r3, r0
 800a1c4:	d9f5      	bls.n	800a1b2 <memmove+0xa>
 800a1c6:	1881      	adds	r1, r0, r2
 800a1c8:	1ad2      	subs	r2, r2, r3
 800a1ca:	42d3      	cmn	r3, r2
 800a1cc:	d100      	bne.n	800a1d0 <memmove+0x28>
 800a1ce:	bd10      	pop	{r4, pc}
 800a1d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1d4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a1d8:	e7f7      	b.n	800a1ca <memmove+0x22>
	...

0800a1dc <_free_r>:
 800a1dc:	b538      	push	{r3, r4, r5, lr}
 800a1de:	4605      	mov	r5, r0
 800a1e0:	2900      	cmp	r1, #0
 800a1e2:	d045      	beq.n	800a270 <_free_r+0x94>
 800a1e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1e8:	1f0c      	subs	r4, r1, #4
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	bfb8      	it	lt
 800a1ee:	18e4      	addlt	r4, r4, r3
 800a1f0:	f000 f8d2 	bl	800a398 <__malloc_lock>
 800a1f4:	4a1f      	ldr	r2, [pc, #124]	; (800a274 <_free_r+0x98>)
 800a1f6:	6813      	ldr	r3, [r2, #0]
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	b933      	cbnz	r3, 800a20a <_free_r+0x2e>
 800a1fc:	6063      	str	r3, [r4, #4]
 800a1fe:	6014      	str	r4, [r2, #0]
 800a200:	4628      	mov	r0, r5
 800a202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a206:	f000 b8c8 	b.w	800a39a <__malloc_unlock>
 800a20a:	42a3      	cmp	r3, r4
 800a20c:	d90c      	bls.n	800a228 <_free_r+0x4c>
 800a20e:	6821      	ldr	r1, [r4, #0]
 800a210:	1862      	adds	r2, r4, r1
 800a212:	4293      	cmp	r3, r2
 800a214:	bf04      	itt	eq
 800a216:	681a      	ldreq	r2, [r3, #0]
 800a218:	685b      	ldreq	r3, [r3, #4]
 800a21a:	6063      	str	r3, [r4, #4]
 800a21c:	bf04      	itt	eq
 800a21e:	1852      	addeq	r2, r2, r1
 800a220:	6022      	streq	r2, [r4, #0]
 800a222:	6004      	str	r4, [r0, #0]
 800a224:	e7ec      	b.n	800a200 <_free_r+0x24>
 800a226:	4613      	mov	r3, r2
 800a228:	685a      	ldr	r2, [r3, #4]
 800a22a:	b10a      	cbz	r2, 800a230 <_free_r+0x54>
 800a22c:	42a2      	cmp	r2, r4
 800a22e:	d9fa      	bls.n	800a226 <_free_r+0x4a>
 800a230:	6819      	ldr	r1, [r3, #0]
 800a232:	1858      	adds	r0, r3, r1
 800a234:	42a0      	cmp	r0, r4
 800a236:	d10b      	bne.n	800a250 <_free_r+0x74>
 800a238:	6820      	ldr	r0, [r4, #0]
 800a23a:	4401      	add	r1, r0
 800a23c:	1858      	adds	r0, r3, r1
 800a23e:	4282      	cmp	r2, r0
 800a240:	6019      	str	r1, [r3, #0]
 800a242:	d1dd      	bne.n	800a200 <_free_r+0x24>
 800a244:	6810      	ldr	r0, [r2, #0]
 800a246:	6852      	ldr	r2, [r2, #4]
 800a248:	605a      	str	r2, [r3, #4]
 800a24a:	4401      	add	r1, r0
 800a24c:	6019      	str	r1, [r3, #0]
 800a24e:	e7d7      	b.n	800a200 <_free_r+0x24>
 800a250:	d902      	bls.n	800a258 <_free_r+0x7c>
 800a252:	230c      	movs	r3, #12
 800a254:	602b      	str	r3, [r5, #0]
 800a256:	e7d3      	b.n	800a200 <_free_r+0x24>
 800a258:	6820      	ldr	r0, [r4, #0]
 800a25a:	1821      	adds	r1, r4, r0
 800a25c:	428a      	cmp	r2, r1
 800a25e:	bf04      	itt	eq
 800a260:	6811      	ldreq	r1, [r2, #0]
 800a262:	6852      	ldreq	r2, [r2, #4]
 800a264:	6062      	str	r2, [r4, #4]
 800a266:	bf04      	itt	eq
 800a268:	1809      	addeq	r1, r1, r0
 800a26a:	6021      	streq	r1, [r4, #0]
 800a26c:	605c      	str	r4, [r3, #4]
 800a26e:	e7c7      	b.n	800a200 <_free_r+0x24>
 800a270:	bd38      	pop	{r3, r4, r5, pc}
 800a272:	bf00      	nop
 800a274:	20002a58 	.word	0x20002a58

0800a278 <_malloc_r>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	1ccd      	adds	r5, r1, #3
 800a27c:	f025 0503 	bic.w	r5, r5, #3
 800a280:	3508      	adds	r5, #8
 800a282:	2d0c      	cmp	r5, #12
 800a284:	bf38      	it	cc
 800a286:	250c      	movcc	r5, #12
 800a288:	2d00      	cmp	r5, #0
 800a28a:	4606      	mov	r6, r0
 800a28c:	db01      	blt.n	800a292 <_malloc_r+0x1a>
 800a28e:	42a9      	cmp	r1, r5
 800a290:	d903      	bls.n	800a29a <_malloc_r+0x22>
 800a292:	230c      	movs	r3, #12
 800a294:	6033      	str	r3, [r6, #0]
 800a296:	2000      	movs	r0, #0
 800a298:	bd70      	pop	{r4, r5, r6, pc}
 800a29a:	f000 f87d 	bl	800a398 <__malloc_lock>
 800a29e:	4a21      	ldr	r2, [pc, #132]	; (800a324 <_malloc_r+0xac>)
 800a2a0:	6814      	ldr	r4, [r2, #0]
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	b991      	cbnz	r1, 800a2cc <_malloc_r+0x54>
 800a2a6:	4c20      	ldr	r4, [pc, #128]	; (800a328 <_malloc_r+0xb0>)
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	b91b      	cbnz	r3, 800a2b4 <_malloc_r+0x3c>
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	f000 f863 	bl	800a378 <_sbrk_r>
 800a2b2:	6020      	str	r0, [r4, #0]
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	f000 f85e 	bl	800a378 <_sbrk_r>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d124      	bne.n	800a30a <_malloc_r+0x92>
 800a2c0:	230c      	movs	r3, #12
 800a2c2:	6033      	str	r3, [r6, #0]
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	f000 f868 	bl	800a39a <__malloc_unlock>
 800a2ca:	e7e4      	b.n	800a296 <_malloc_r+0x1e>
 800a2cc:	680b      	ldr	r3, [r1, #0]
 800a2ce:	1b5b      	subs	r3, r3, r5
 800a2d0:	d418      	bmi.n	800a304 <_malloc_r+0x8c>
 800a2d2:	2b0b      	cmp	r3, #11
 800a2d4:	d90f      	bls.n	800a2f6 <_malloc_r+0x7e>
 800a2d6:	600b      	str	r3, [r1, #0]
 800a2d8:	50cd      	str	r5, [r1, r3]
 800a2da:	18cc      	adds	r4, r1, r3
 800a2dc:	4630      	mov	r0, r6
 800a2de:	f000 f85c 	bl	800a39a <__malloc_unlock>
 800a2e2:	f104 000b 	add.w	r0, r4, #11
 800a2e6:	1d23      	adds	r3, r4, #4
 800a2e8:	f020 0007 	bic.w	r0, r0, #7
 800a2ec:	1ac3      	subs	r3, r0, r3
 800a2ee:	d0d3      	beq.n	800a298 <_malloc_r+0x20>
 800a2f0:	425a      	negs	r2, r3
 800a2f2:	50e2      	str	r2, [r4, r3]
 800a2f4:	e7d0      	b.n	800a298 <_malloc_r+0x20>
 800a2f6:	428c      	cmp	r4, r1
 800a2f8:	684b      	ldr	r3, [r1, #4]
 800a2fa:	bf16      	itet	ne
 800a2fc:	6063      	strne	r3, [r4, #4]
 800a2fe:	6013      	streq	r3, [r2, #0]
 800a300:	460c      	movne	r4, r1
 800a302:	e7eb      	b.n	800a2dc <_malloc_r+0x64>
 800a304:	460c      	mov	r4, r1
 800a306:	6849      	ldr	r1, [r1, #4]
 800a308:	e7cc      	b.n	800a2a4 <_malloc_r+0x2c>
 800a30a:	1cc4      	adds	r4, r0, #3
 800a30c:	f024 0403 	bic.w	r4, r4, #3
 800a310:	42a0      	cmp	r0, r4
 800a312:	d005      	beq.n	800a320 <_malloc_r+0xa8>
 800a314:	1a21      	subs	r1, r4, r0
 800a316:	4630      	mov	r0, r6
 800a318:	f000 f82e 	bl	800a378 <_sbrk_r>
 800a31c:	3001      	adds	r0, #1
 800a31e:	d0cf      	beq.n	800a2c0 <_malloc_r+0x48>
 800a320:	6025      	str	r5, [r4, #0]
 800a322:	e7db      	b.n	800a2dc <_malloc_r+0x64>
 800a324:	20002a58 	.word	0x20002a58
 800a328:	20002a5c 	.word	0x20002a5c

0800a32c <_realloc_r>:
 800a32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32e:	4607      	mov	r7, r0
 800a330:	4614      	mov	r4, r2
 800a332:	460e      	mov	r6, r1
 800a334:	b921      	cbnz	r1, 800a340 <_realloc_r+0x14>
 800a336:	4611      	mov	r1, r2
 800a338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a33c:	f7ff bf9c 	b.w	800a278 <_malloc_r>
 800a340:	b922      	cbnz	r2, 800a34c <_realloc_r+0x20>
 800a342:	f7ff ff4b 	bl	800a1dc <_free_r>
 800a346:	4625      	mov	r5, r4
 800a348:	4628      	mov	r0, r5
 800a34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a34c:	f000 f826 	bl	800a39c <_malloc_usable_size_r>
 800a350:	42a0      	cmp	r0, r4
 800a352:	d20f      	bcs.n	800a374 <_realloc_r+0x48>
 800a354:	4621      	mov	r1, r4
 800a356:	4638      	mov	r0, r7
 800a358:	f7ff ff8e 	bl	800a278 <_malloc_r>
 800a35c:	4605      	mov	r5, r0
 800a35e:	2800      	cmp	r0, #0
 800a360:	d0f2      	beq.n	800a348 <_realloc_r+0x1c>
 800a362:	4631      	mov	r1, r6
 800a364:	4622      	mov	r2, r4
 800a366:	f7ff fc11 	bl	8009b8c <memcpy>
 800a36a:	4631      	mov	r1, r6
 800a36c:	4638      	mov	r0, r7
 800a36e:	f7ff ff35 	bl	800a1dc <_free_r>
 800a372:	e7e9      	b.n	800a348 <_realloc_r+0x1c>
 800a374:	4635      	mov	r5, r6
 800a376:	e7e7      	b.n	800a348 <_realloc_r+0x1c>

0800a378 <_sbrk_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4c06      	ldr	r4, [pc, #24]	; (800a394 <_sbrk_r+0x1c>)
 800a37c:	2300      	movs	r3, #0
 800a37e:	4605      	mov	r5, r0
 800a380:	4608      	mov	r0, r1
 800a382:	6023      	str	r3, [r4, #0]
 800a384:	f7f9 fb12 	bl	80039ac <_sbrk>
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	d102      	bne.n	800a392 <_sbrk_r+0x1a>
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	b103      	cbz	r3, 800a392 <_sbrk_r+0x1a>
 800a390:	602b      	str	r3, [r5, #0]
 800a392:	bd38      	pop	{r3, r4, r5, pc}
 800a394:	20003134 	.word	0x20003134

0800a398 <__malloc_lock>:
 800a398:	4770      	bx	lr

0800a39a <__malloc_unlock>:
 800a39a:	4770      	bx	lr

0800a39c <_malloc_usable_size_r>:
 800a39c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3a0:	1f18      	subs	r0, r3, #4
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	bfbc      	itt	lt
 800a3a6:	580b      	ldrlt	r3, [r1, r0]
 800a3a8:	18c0      	addlt	r0, r0, r3
 800a3aa:	4770      	bx	lr

0800a3ac <_init>:
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ae:	bf00      	nop
 800a3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b2:	bc08      	pop	{r3}
 800a3b4:	469e      	mov	lr, r3
 800a3b6:	4770      	bx	lr

0800a3b8 <_fini>:
 800a3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ba:	bf00      	nop
 800a3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3be:	bc08      	pop	{r3}
 800a3c0:	469e      	mov	lr, r3
 800a3c2:	4770      	bx	lr


Suncontroller CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c388  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  0800c528  0800c528  0001c528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0c0  0800d0c0  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0c0  0800d0c0  0001d0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0c8  0800d0c8  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0c8  0800d0c8  0001d0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0cc  0800d0cc  0001d0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800d0d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000343c  200000d0  0800d1a0  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000350c  0800d1a0  0002350c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040112  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007684  00000000  00000000  00060212  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c23d  00000000  00000000  00067896  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002558  00000000  00000000  00083ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000025a0  00000000  00000000  00086030  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000a33f  00000000  00000000  000885d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000221ac  00000000  00000000  0009290f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ac2dd  00000000  00000000  000b4abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00160d98  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007094  00000000  00000000  00160e14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c510 	.word	0x0800c510

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	0800c510 	.word	0x0800c510

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <xCLI_GetSystemStatus>:
	(void) xWriteBufferLen;

	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	return pdFALSE;
}
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	4770      	bx	lr

08000e10 <xCLI_EreaseEE>:
BaseType_t xCLI_EreaseEE( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8000e10:	b510      	push	{r4, lr}
 8000e12:	4604      	mov	r4, r0
	EE_StatusTypeDef retval = EE_Erease();
 8000e14:	f000 fb96 	bl	8001544 <EE_Erease>
	if(retval == EE_OK){
 8000e18:	b128      	cbz	r0, 8000e26 <xCLI_EreaseEE+0x16>
		sprintf(pcWriteBuffer, "Nie wyczyszczono.\r\n");
 8000e1a:	4905      	ldr	r1, [pc, #20]	; (8000e30 <xCLI_EreaseEE+0x20>)
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f00a fef7 	bl	800bc10 <sprintf_>
}
 8000e22:	2000      	movs	r0, #0
 8000e24:	bd10      	pop	{r4, pc}
		sprintf(pcWriteBuffer, "Wyczyszczono.\r\n");
 8000e26:	4903      	ldr	r1, [pc, #12]	; (8000e34 <xCLI_EreaseEE+0x24>)
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f00a fef1 	bl	800bc10 <sprintf_>
 8000e2e:	e7f8      	b.n	8000e22 <xCLI_EreaseEE+0x12>
 8000e30:	0800c764 	.word	0x0800c764
 8000e34:	0800c754 	.word	0x0800c754

08000e38 <xCLI_ShowConfig>:
BaseType_t xCLI_ShowConfig( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8000e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e3c:	b095      	sub	sp, #84	; 0x54
 8000e3e:	9011      	str	r0, [sp, #68]	; 0x44
	switch (step){
 8000e40:	4b6e      	ldr	r3, [pc, #440]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b05      	cmp	r3, #5
 8000e46:	f200 80d0 	bhi.w	8000fea <xCLI_ShowConfig+0x1b2>
 8000e4a:	e8df f003 	tbb	[pc, r3]
 8000e4e:	3303      	.short	0x3303
 8000e50:	c1ac997c 	.word	0xc1ac997c
			configStatus = Config_GetConfig(&config);
 8000e54:	486a      	ldr	r0, [pc, #424]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000e56:	f000 fa13 	bl	8001280 <Config_GetConfig>
			switch(configStatus){
 8000e5a:	3005      	adds	r0, #5
 8000e5c:	2805      	cmp	r0, #5
 8000e5e:	d824      	bhi.n	8000eaa <xCLI_ShowConfig+0x72>
 8000e60:	e8df f000 	tbb	[pc, r0]
 8000e64:	23140f03 	.word	0x23140f03
 8000e68:	1e19      	.short	0x1e19
					sprintf(pcWriteBuffer, "No configuration in memory.\r\n");
 8000e6a:	4966      	ldr	r1, [pc, #408]	; (8001004 <xCLI_ShowConfig+0x1cc>)
 8000e6c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e6e:	f00a fecf 	bl	800bc10 <sprintf_>
			step++;
 8000e72:	4a62      	ldr	r2, [pc, #392]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000e74:	7813      	ldrb	r3, [r2, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000e7a:	2001      	movs	r0, #1
}
 8000e7c:	b015      	add	sp, #84	; 0x54
 8000e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					sprintf(pcWriteBuffer, "Configuration CRC error.\r\n");
 8000e82:	4961      	ldr	r1, [pc, #388]	; (8001008 <xCLI_ShowConfig+0x1d0>)
 8000e84:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e86:	f00a fec3 	bl	800bc10 <sprintf_>
					break;
 8000e8a:	e7f2      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Cannot access I2C bus.\r\n");
 8000e8c:	495f      	ldr	r1, [pc, #380]	; (800100c <xCLI_ShowConfig+0x1d4>)
 8000e8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e90:	f00a febe 	bl	800bc10 <sprintf_>
					break;
 8000e94:	e7ed      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Memory access timeout.\r\n");
 8000e96:	495e      	ldr	r1, [pc, #376]	; (8001010 <xCLI_ShowConfig+0x1d8>)
 8000e98:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e9a:	f00a feb9 	bl	800bc10 <sprintf_>
					break;
 8000e9e:	e7e8      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Configuration loaded.\r\n");
 8000ea0:	495c      	ldr	r1, [pc, #368]	; (8001014 <xCLI_ShowConfig+0x1dc>)
 8000ea2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ea4:	f00a feb4 	bl	800bc10 <sprintf_>
					break;
 8000ea8:	e7e3      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Unexpected error.\r\n");
 8000eaa:	495b      	ldr	r1, [pc, #364]	; (8001018 <xCLI_ShowConfig+0x1e0>)
 8000eac:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000eae:	f00a feaf 	bl	800bc10 <sprintf_>
 					break;
 8000eb2:	e7de      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					config.EthernetConfig.ipAddress[0], config.EthernetConfig.ipAddress[1],
 8000eb4:	4b52      	ldr	r3, [pc, #328]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000eb6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000eba:	9212      	str	r2, [sp, #72]	; 0x48
 8000ebc:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8000ec0:	9113      	str	r1, [sp, #76]	; 0x4c
					config.EthernetConfig.ipAddress[2], config.EthernetConfig.ipAddress[3],
 8000ec2:	f893 4022 	ldrb.w	r4, [r3, #34]	; 0x22
 8000ec6:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8000eca:	9001      	str	r0, [sp, #4]
					config.EthernetConfig.gatewayAddress[0], config.EthernetConfig.gatewayAddress[1],
 8000ecc:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8000ed0:	9002      	str	r0, [sp, #8]
 8000ed2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
					config.EthernetConfig.gatewayAddress[2], config.EthernetConfig.gatewayAddress[3],
 8000ed6:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8000eda:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
					config.EthernetConfig.subnetMask[0], config.EthernetConfig.subnetMask[1],
 8000ede:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 8000ee2:	f893 6025 	ldrb.w	r6, [r3, #37]	; 0x25
					config.EthernetConfig.subnetMask[2], config.EthernetConfig.subnetMask[3],
 8000ee6:	f893 7026 	ldrb.w	r7, [r3, #38]	; 0x26
 8000eea:	f893 c027 	ldrb.w	ip, [r3, #39]	; 0x27
					config.EthernetConfig.macAddress[0], config.EthernetConfig.macAddress[1],
 8000eee:	f893 e02c 	ldrb.w	lr, [r3, #44]	; 0x2c
 8000ef2:	f893 802d 	ldrb.w	r8, [r3, #45]	; 0x2d
					config.EthernetConfig.macAddress[2], config.EthernetConfig.macAddress[3],
 8000ef6:	f893 902e 	ldrb.w	r9, [r3, #46]	; 0x2e
 8000efa:	f893 a02f 	ldrb.w	sl, [r3, #47]	; 0x2f
					config.EthernetConfig.macAddress[4], config.EthernetConfig.macAddress[5]);
 8000efe:	f893 b030 	ldrb.w	fp, [r3, #48]	; 0x30
 8000f02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
			sprintf(pcWriteBuffer, "Ethernet configuration:\r\n"
 8000f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f08:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8000f0c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8000f10:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8000f14:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8000f18:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8000f1c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8000f20:	9708      	str	r7, [sp, #32]
 8000f22:	9607      	str	r6, [sp, #28]
 8000f24:	9506      	str	r5, [sp, #24]
 8000f26:	9005      	str	r0, [sp, #20]
 8000f28:	9104      	str	r1, [sp, #16]
 8000f2a:	9203      	str	r2, [sp, #12]
 8000f2c:	9400      	str	r4, [sp, #0]
 8000f2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000f30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000f32:	493a      	ldr	r1, [pc, #232]	; (800101c <xCLI_ShowConfig+0x1e4>)
 8000f34:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f36:	f00a fe6b 	bl	800bc10 <sprintf_>
			step++;
 8000f3a:	4a30      	ldr	r2, [pc, #192]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000f3c:	7813      	ldrb	r3, [r2, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000f42:	2001      	movs	r0, #1
			break;
 8000f44:	e79a      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					(uint32_t)config.RegulationConfig.CWU_heater_power,
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000f48:	ed93 7a00 	vldr	s14, [r3]
					(uint32_t)config.RegulationConfig.CO_heater_power,
 8000f4c:	edd3 6a01 	vldr	s13, [r3, #4]
					(uint32_t)config.RegulationConfig.net_max_power);
 8000f50:	edd3 7a02 	vldr	s15, [r3, #8]
			sprintf(pcWriteBuffer, "Regulation configuration:\r\n"
 8000f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f58:	edcd 7a00 	vstr	s15, [sp]
 8000f5c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8000f60:	ee17 3a90 	vmov	r3, s15
 8000f64:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000f68:	ee17 2a90 	vmov	r2, s15
 8000f6c:	492c      	ldr	r1, [pc, #176]	; (8001020 <xCLI_ShowConfig+0x1e8>)
 8000f6e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f70:	f00a fe4e 	bl	800bc10 <sprintf_>
			step++;
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000f76:	7813      	ldrb	r3, [r2, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000f7c:	2001      	movs	r0, #1
			break;
 8000f7e:	e77d      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					config.RegulationConfig.counter_address,
 8000f80:	491f      	ldr	r1, [pc, #124]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000f82:	7b0a      	ldrb	r2, [r1, #12]
					config.RegulationConfig.temperature_address,
 8000f84:	7b4b      	ldrb	r3, [r1, #13]
					config.RegulationConfig.acumulated_power_coeff,
 8000f86:	f991 000e 	ldrsb.w	r0, [r1, #14]
					config.RegulationConfig.heater_power_coeff);
 8000f8a:	f991 100f 	ldrsb.w	r1, [r1, #15]
			sprintf(pcWriteBuffer, "    Counter address: %d\r\n"
 8000f8e:	9101      	str	r1, [sp, #4]
 8000f90:	9000      	str	r0, [sp, #0]
 8000f92:	4924      	ldr	r1, [pc, #144]	; (8001024 <xCLI_ShowConfig+0x1ec>)
 8000f94:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f96:	f00a fe3b 	bl	800bc10 <sprintf_>
			step++;
 8000f9a:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000f9c:	7813      	ldrb	r3, [r2, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fa2:	2001      	movs	r0, #1
			break;
 8000fa4:	e76a      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					config.RegulationConfig.CO_hi_temp,
 8000fa6:	4916      	ldr	r1, [pc, #88]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000fa8:	f991 2010 	ldrsb.w	r2, [r1, #16]
					config.RegulationConfig.CO_lo_temp,
 8000fac:	f991 3011 	ldrsb.w	r3, [r1, #17]
					config.RegulationConfig.CWU_hi_temp,
 8000fb0:	f991 0012 	ldrsb.w	r0, [r1, #18]
					config.RegulationConfig.CWU_lo_temp);
 8000fb4:	f991 1013 	ldrsb.w	r1, [r1, #19]
			sprintf(pcWriteBuffer, "    CO high temperature: %d C\r\n"
 8000fb8:	9101      	str	r1, [sp, #4]
 8000fba:	9000      	str	r0, [sp, #0]
 8000fbc:	491a      	ldr	r1, [pc, #104]	; (8001028 <xCLI_ShowConfig+0x1f0>)
 8000fbe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000fc0:	f00a fe26 	bl	800bc10 <sprintf_>
			step++;
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000fc6:	7813      	ldrb	r3, [r2, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fcc:	2001      	movs	r0, #1
			break;
 8000fce:	e755      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					"CRC: 0x%08x\r\n", config.dummy, config.crc);
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <xCLI_ShowConfig+0x1c8>)
			sprintf(pcWriteBuffer, "Magic word: 0x%04x\r\n"
 8000fd2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000fd4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8000fd6:	4915      	ldr	r1, [pc, #84]	; (800102c <xCLI_ShowConfig+0x1f4>)
 8000fd8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000fda:	f00a fe19 	bl	800bc10 <sprintf_>
			step++;
 8000fde:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000fe0:	7813      	ldrb	r3, [r2, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fe6:	2001      	movs	r0, #1
			break;
 8000fe8:	e748      	b.n	8000e7c <xCLI_ShowConfig+0x44>
			step = 0;
 8000fea:	2500      	movs	r5, #0
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000fee:	701d      	strb	r5, [r3, #0]
			sprintf(pcWriteBuffer, "\r\n");
 8000ff0:	490f      	ldr	r1, [pc, #60]	; (8001030 <xCLI_ShowConfig+0x1f8>)
 8000ff2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ff4:	f00a fe0c 	bl	800bc10 <sprintf_>
			retVal = pdFALSE;
 8000ff8:	4628      	mov	r0, r5
	return retVal;
 8000ffa:	e73f      	b.n	8000e7c <xCLI_ShowConfig+0x44>
 8000ffc:	20000124 	.word	0x20000124
 8001000:	200000ec 	.word	0x200000ec
 8001004:	0800c884 	.word	0x0800c884
 8001008:	0800c8a4 	.word	0x0800c8a4
 800100c:	0800c8c0 	.word	0x0800c8c0
 8001010:	0800c8dc 	.word	0x0800c8dc
 8001014:	0800c8f8 	.word	0x0800c8f8
 8001018:	0800c910 	.word	0x0800c910
 800101c:	0800c924 	.word	0x0800c924
 8001020:	0800c9ac 	.word	0x0800c9ac
 8001024:	0800ca1c 	.word	0x0800ca1c
 8001028:	0800caa0 	.word	0x0800caa0
 800102c:	0800cb20 	.word	0x0800cb20
 8001030:	0800c6d8 	.word	0x0800c6d8

08001034 <xCLI_GetRtosStats>:

BaseType_t xCLI_GetRtosStats( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8001034:	b508      	push	{r3, lr}
	(void) pcCommandString;
	(void) xWriteBufferLen;
	vTaskGetRunTimeStats(pcWriteBuffer);
 8001036:	f009 f9e7 	bl	800a408 <vTaskGetRunTimeStats>
	return pdFALSE;
}
 800103a:	2000      	movs	r0, #0
 800103c:	bd08      	pop	{r3, pc}
	...

08001040 <xCLI_GetCommStats>:

BaseType_t xCLI_GetCommStats( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	b085      	sub	sp, #20
 8001044:	4605      	mov	r5, r0
	BaseType_t retVal = pdTRUE;
	static uint8_t step = 0;

	uint8_t ipArr[4];

	switch(step){
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <xCLI_GetCommStats+0xd8>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b03      	cmp	r3, #3
 800104c:	d85c      	bhi.n	8001108 <xCLI_GetCommStats+0xc8>
 800104e:	e8df f003 	tbb	[pc, r3]
 8001052:	1a02      	.short	0x1a02
 8001054:	4231      	.short	0x4231

		case 0:
			RuntimeStats_TelnetGetCurIP(ipArr);
 8001056:	a803      	add	r0, sp, #12
 8001058:	f001 fb2e 	bl	80026b8 <RuntimeStats_TelnetGetCurIP>
			sprintf(pcWriteBuffer, "Telnet statistics:\r\n"
					"    Current IP connected: %d.%d.%d.%d\r\n",
					ipArr[0], ipArr[1], ipArr[2], ipArr[3]);
 800105c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001060:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001064:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8001068:	f89d 000f 	ldrb.w	r0, [sp, #15]
			sprintf(pcWriteBuffer, "Telnet statistics:\r\n"
 800106c:	9001      	str	r0, [sp, #4]
 800106e:	9100      	str	r1, [sp, #0]
 8001070:	492a      	ldr	r1, [pc, #168]	; (800111c <xCLI_GetCommStats+0xdc>)
 8001072:	4628      	mov	r0, r5
 8001074:	f00a fdcc 	bl	800bc10 <sprintf_>
			step++;
 8001078:	4a27      	ldr	r2, [pc, #156]	; (8001118 <xCLI_GetCommStats+0xd8>)
 800107a:	7813      	ldrb	r3, [r2, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8001080:	2001      	movs	r0, #1
			sprintf(pcWriteBuffer, "\r\n");
			retVal = pdFALSE;
			break;
	}
	return retVal;
}
 8001082:	b005      	add	sp, #20
 8001084:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RuntimeStats_TelnetGetLastIP(ipArr);
 8001086:	a803      	add	r0, sp, #12
 8001088:	f001 fb1c 	bl	80026c4 <RuntimeStats_TelnetGetLastIP>
					ipArr[0], ipArr[1], ipArr[2], ipArr[3]);
 800108c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001090:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001094:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8001098:	f89d 000f 	ldrb.w	r0, [sp, #15]
			sprintf(pcWriteBuffer, "    Last IP connected: %d.%d.%d.%d\r\n",
 800109c:	9001      	str	r0, [sp, #4]
 800109e:	9100      	str	r1, [sp, #0]
 80010a0:	491f      	ldr	r1, [pc, #124]	; (8001120 <xCLI_GetCommStats+0xe0>)
 80010a2:	4628      	mov	r0, r5
 80010a4:	f00a fdb4 	bl	800bc10 <sprintf_>
			step++;
 80010a8:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <xCLI_GetCommStats+0xd8>)
 80010aa:	7813      	ldrb	r3, [r2, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 80010b0:	2001      	movs	r0, #1
			break;
 80010b2:	e7e6      	b.n	8001082 <xCLI_GetCommStats+0x42>
			sprintf(pcWriteBuffer, "    TX count: %d\r\n    RX count: %d\r\n",
 80010b4:	f001 fafa 	bl	80026ac <RuntimeStats_TelnetGetTxCnt>
 80010b8:	4604      	mov	r4, r0
 80010ba:	f001 faf1 	bl	80026a0 <RuntimeStats_TelnetGetRxCnt>
 80010be:	4603      	mov	r3, r0
 80010c0:	4622      	mov	r2, r4
 80010c2:	4918      	ldr	r1, [pc, #96]	; (8001124 <xCLI_GetCommStats+0xe4>)
 80010c4:	4628      	mov	r0, r5
 80010c6:	f00a fda3 	bl	800bc10 <sprintf_>
			step++;
 80010ca:	4a13      	ldr	r2, [pc, #76]	; (8001118 <xCLI_GetCommStats+0xd8>)
 80010cc:	7813      	ldrb	r3, [r2, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 80010d2:	2001      	movs	r0, #1
			break;
 80010d4:	e7d5      	b.n	8001082 <xCLI_GetCommStats+0x42>
			sprintf(pcWriteBuffer, "Modbus statistics:\r\n"
 80010d6:	f001 fb1b 	bl	8002710 <RuntimeStats_ModbusMasterRqSendGet>
 80010da:	4604      	mov	r4, r0
 80010dc:	f001 fb24 	bl	8002728 <RuntimeStats_ModbusMasterRespOkGet>
 80010e0:	4606      	mov	r6, r0
 80010e2:	f001 fb1b 	bl	800271c <RuntimeStats_ModbusMasterNoRespGet>
 80010e6:	4607      	mov	r7, r0
 80010e8:	f001 fb24 	bl	8002734 <RuntimeStats_ModbusMasterWrongRespGet>
 80010ec:	9001      	str	r0, [sp, #4]
 80010ee:	9700      	str	r7, [sp, #0]
 80010f0:	4633      	mov	r3, r6
 80010f2:	4622      	mov	r2, r4
 80010f4:	490c      	ldr	r1, [pc, #48]	; (8001128 <xCLI_GetCommStats+0xe8>)
 80010f6:	4628      	mov	r0, r5
 80010f8:	f00a fd8a 	bl	800bc10 <sprintf_>
			step++;
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <xCLI_GetCommStats+0xd8>)
 80010fe:	7813      	ldrb	r3, [r2, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8001104:	2001      	movs	r0, #1
			break;
 8001106:	e7bc      	b.n	8001082 <xCLI_GetCommStats+0x42>
			step = 0;
 8001108:	2400      	movs	r4, #0
 800110a:	4b03      	ldr	r3, [pc, #12]	; (8001118 <xCLI_GetCommStats+0xd8>)
 800110c:	701c      	strb	r4, [r3, #0]
			sprintf(pcWriteBuffer, "\r\n");
 800110e:	4907      	ldr	r1, [pc, #28]	; (800112c <xCLI_GetCommStats+0xec>)
 8001110:	f00a fd7e 	bl	800bc10 <sprintf_>
			retVal = pdFALSE;
 8001114:	4620      	mov	r0, r4
	return retVal;
 8001116:	e7b4      	b.n	8001082 <xCLI_GetCommStats+0x42>
 8001118:	20000125 	.word	0x20000125
 800111c:	0800c778 	.word	0x0800c778
 8001120:	0800c7b4 	.word	0x0800c7b4
 8001124:	0800c7dc 	.word	0x0800c7dc
 8001128:	0800c804 	.word	0x0800c804
 800112c:	0800c6d8 	.word	0x0800c6d8

08001130 <CLI_Init>:
void CLI_Init (void){
 8001130:	b508      	push	{r3, lr}
	FreeRTOS_CLIRegisterCommand(&xEreaseEECmd);
 8001132:	4808      	ldr	r0, [pc, #32]	; (8001154 <CLI_Init+0x24>)
 8001134:	f00a f8de 	bl	800b2f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xShowConfigCmd);
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <CLI_Init+0x28>)
 800113a:	f00a f8db 	bl	800b2f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetSysStatusCmd);
 800113e:	4807      	ldr	r0, [pc, #28]	; (800115c <CLI_Init+0x2c>)
 8001140:	f00a f8d8 	bl	800b2f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetRtosStatsCmd);
 8001144:	4806      	ldr	r0, [pc, #24]	; (8001160 <CLI_Init+0x30>)
 8001146:	f00a f8d5 	bl	800b2f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetCommStatsCmd);
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <CLI_Init+0x34>)
 800114c:	f00a f8d2 	bl	800b2f4 <FreeRTOS_CLIRegisterCommand>
}
 8001150:	bd08      	pop	{r3, pc}
 8001152:	bf00      	nop
 8001154:	0800cb44 	.word	0x0800cb44
 8001158:	0800cb84 	.word	0x0800cb84
 800115c:	0800cb74 	.word	0x0800cb74
 8001160:	0800cb64 	.word	0x0800cb64
 8001164:	0800cb54 	.word	0x0800cb54

08001168 <Config_CalculateCRC>:
		configuration.dummy = MAGIC_WORD;
		configuration.crc = Config_CalculateCRC();
	}
}

static uint32_t Config_CalculateCRC (void){
 8001168:	b508      	push	{r3, lr}
	return HAL_CRC_Calculate(&hcrc, (uint32_t*)&configuration, (CONFIG_BYTES_LEN - 2)/4);
 800116a:	220d      	movs	r2, #13
 800116c:	4902      	ldr	r1, [pc, #8]	; (8001178 <Config_CalculateCRC+0x10>)
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <Config_CalculateCRC+0x14>)
 8001170:	f004 fadb 	bl	800572a <HAL_CRC_Calculate>
}
 8001174:	bd08      	pop	{r3, pc}
 8001176:	bf00      	nop
 8001178:	20000128 	.word	0x20000128
 800117c:	20003140 	.word	0x20003140

08001180 <Config_CheckData>:

static CONFStatus_t Config_CheckData (void){
 8001180:	b510      	push	{r4, lr}
	CONFStatus_t retval;
	uint32_t readCRC, actualCRC;

	readCRC = configuration.crc;
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <Config_CheckData+0x18>)
 8001184:	6b5c      	ldr	r4, [r3, #52]	; 0x34
	actualCRC = Config_CalculateCRC();
 8001186:	f7ff ffef 	bl	8001168 <Config_CalculateCRC>

	if(readCRC != actualCRC){
 800118a:	4284      	cmp	r4, r0
 800118c:	d101      	bne.n	8001192 <Config_CheckData+0x12>
		if(configuration.dummy != MAGIC_WORD){
			retval = CONF_ERR_NOCONF;
		}
		retval = CONF_ERR_CRC;
	}else{
		retval = CONF_OK;
 800118e:	2000      	movs	r0, #0
	}
	return retval;
}
 8001190:	bd10      	pop	{r4, pc}
		retval = CONF_ERR_CRC;
 8001192:	f06f 0003 	mvn.w	r0, #3
 8001196:	e7fb      	b.n	8001190 <Config_CheckData+0x10>
 8001198:	20000128 	.word	0x20000128

0800119c <Config_ChangeValue>:
	if(value != NULL && param < PARAM_NUMS){
 800119c:	2900      	cmp	r1, #0
 800119e:	d061      	beq.n	8001264 <Config_ChangeValue+0xc8>
 80011a0:	2811      	cmp	r0, #17
 80011a2:	d85f      	bhi.n	8001264 <Config_ChangeValue+0xc8>
void Config_ChangeValue(uint32_t param, void* value){
 80011a4:	b510      	push	{r4, lr}
		switch(param){
 80011a6:	2811      	cmp	r0, #17
 80011a8:	d80d      	bhi.n	80011c6 <Config_ChangeValue+0x2a>
 80011aa:	e8df f000 	tbb	[pc, r0]
 80011ae:	1409      	.short	0x1409
 80011b0:	24201c18 	.word	0x24201c18
 80011b4:	34302c28 	.word	0x34302c28
 80011b8:	44403c38 	.word	0x44403c38
 80011bc:	56514c48 	.word	0x56514c48
				memcpy(&configuration.RegulationConfig.CWU_heater_power, value, 4);
 80011c0:	680a      	ldr	r2, [r1, #0]
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <Config_ChangeValue+0xcc>)
 80011c4:	601a      	str	r2, [r3, #0]
		configuration.dummy = MAGIC_WORD;
 80011c6:	4c28      	ldr	r4, [pc, #160]	; (8001268 <Config_ChangeValue+0xcc>)
 80011c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80011cc:	8663      	strh	r3, [r4, #50]	; 0x32
		configuration.crc = Config_CalculateCRC();
 80011ce:	f7ff ffcb 	bl	8001168 <Config_CalculateCRC>
 80011d2:	6360      	str	r0, [r4, #52]	; 0x34
}
 80011d4:	bd10      	pop	{r4, pc}
				memcpy(&configuration.RegulationConfig.CO_heater_power, value, 4);
 80011d6:	680a      	ldr	r2, [r1, #0]
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <Config_ChangeValue+0xcc>)
 80011da:	605a      	str	r2, [r3, #4]
				break;
 80011dc:	e7f3      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.net_max_power, value, 4);
 80011de:	680a      	ldr	r2, [r1, #0]
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <Config_ChangeValue+0xcc>)
 80011e2:	609a      	str	r2, [r3, #8]
				break;
 80011e4:	e7ef      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.counter_address, value, 1);
 80011e6:	780a      	ldrb	r2, [r1, #0]
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <Config_ChangeValue+0xcc>)
 80011ea:	731a      	strb	r2, [r3, #12]
				break;
 80011ec:	e7eb      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.temperature_address, value, 1);
 80011ee:	780a      	ldrb	r2, [r1, #0]
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <Config_ChangeValue+0xcc>)
 80011f2:	735a      	strb	r2, [r3, #13]
				break;
 80011f4:	e7e7      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.acumulated_power_coeff, value, 1);
 80011f6:	780a      	ldrb	r2, [r1, #0]
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <Config_ChangeValue+0xcc>)
 80011fa:	739a      	strb	r2, [r3, #14]
				break;
 80011fc:	e7e3      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.heater_power_coeff, value, 1);
 80011fe:	780a      	ldrb	r2, [r1, #0]
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <Config_ChangeValue+0xcc>)
 8001202:	73da      	strb	r2, [r3, #15]
				break;
 8001204:	e7df      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CO_hi_temp, value, 1);
 8001206:	780a      	ldrb	r2, [r1, #0]
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <Config_ChangeValue+0xcc>)
 800120a:	741a      	strb	r2, [r3, #16]
				break;
 800120c:	e7db      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CO_lo_temp, value, 1);
 800120e:	780a      	ldrb	r2, [r1, #0]
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <Config_ChangeValue+0xcc>)
 8001212:	745a      	strb	r2, [r3, #17]
				break;
 8001214:	e7d7      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CWU_hi_temp, value, 1);
 8001216:	780a      	ldrb	r2, [r1, #0]
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <Config_ChangeValue+0xcc>)
 800121a:	749a      	strb	r2, [r3, #18]
				break;
 800121c:	e7d3      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CWU_lo_temp, value, 1);
 800121e:	780a      	ldrb	r2, [r1, #0]
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <Config_ChangeValue+0xcc>)
 8001222:	74da      	strb	r2, [r3, #19]
				break;
 8001224:	e7cf      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.exported_power, value, 4);
 8001226:	680a      	ldr	r2, [r1, #0]
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <Config_ChangeValue+0xcc>)
 800122a:	615a      	str	r2, [r3, #20]
				break;
 800122c:	e7cb      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.imported_power, value, 4);
 800122e:	680a      	ldr	r2, [r1, #0]
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <Config_ChangeValue+0xcc>)
 8001232:	619a      	str	r2, [r3, #24]
				break;
 8001234:	e7c7      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.acumulated_power, value, 4);
 8001236:	680a      	ldr	r2, [r1, #0]
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <Config_ChangeValue+0xcc>)
 800123a:	61da      	str	r2, [r3, #28]
				break;
 800123c:	e7c3      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.ipAddress[0], value, 4);
 800123e:	680a      	ldr	r2, [r1, #0]
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <Config_ChangeValue+0xcc>)
 8001242:	621a      	str	r2, [r3, #32]
				break;
 8001244:	e7bf      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.subnetMask[0], value, 1);
 8001246:	780a      	ldrb	r2, [r1, #0]
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <Config_ChangeValue+0xcc>)
 800124a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				break;
 800124e:	e7ba      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.gatewayAddress[0], value, 1);
 8001250:	780a      	ldrb	r2, [r1, #0]
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <Config_ChangeValue+0xcc>)
 8001254:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				break;
 8001258:	e7b5      	b.n	80011c6 <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.macAddress[0], value, 1);
 800125a:	780a      	ldrb	r2, [r1, #0]
 800125c:	4b02      	ldr	r3, [pc, #8]	; (8001268 <Config_ChangeValue+0xcc>)
 800125e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				break;
 8001262:	e7b0      	b.n	80011c6 <Config_ChangeValue+0x2a>
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000128 	.word	0x20000128

0800126c <Config_Save>:

CONFStatus_t Config_Save (void){
 800126c:	b508      	push	{r3, lr}
	CONFStatus_t retval;
	retval = (CONFStatus_t)EE_Write(&configuration, 0, CONFIG_BYTES_LEN);
 800126e:	2238      	movs	r2, #56	; 0x38
 8001270:	2100      	movs	r1, #0
 8001272:	4802      	ldr	r0, [pc, #8]	; (800127c <Config_Save+0x10>)
 8001274:	f000 f8ec 	bl	8001450 <EE_Write>
	return retval;
}
 8001278:	bd08      	pop	{r3, pc}
 800127a:	bf00      	nop
 800127c:	20000128 	.word	0x20000128

08001280 <Config_GetConfig>:
ConfigLoadStatus_t Config_GetConfigStatus(void){
	return configuartionStatus;
}

CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8001280:	b1c0      	cbz	r0, 80012b4 <Config_GetConfig+0x34>
CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
 8001282:	b4f0      	push	{r4, r5, r6, r7}
 8001284:	4604      	mov	r4, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <Config_GetConfig+0x40>)
 8001288:	f993 3000 	ldrsb.w	r3, [r3]
 800128c:	b9ab      	cbnz	r3, 80012ba <Config_GetConfig+0x3a>
		memcpy(config, &configuration, CONFIG_BYTES_LEN);
 800128e:	4d0d      	ldr	r5, [pc, #52]	; (80012c4 <Config_GetConfig+0x44>)
 8001290:	f105 0730 	add.w	r7, r5, #48	; 0x30
 8001294:	462e      	mov	r6, r5
 8001296:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001298:	6020      	str	r0, [r4, #0]
 800129a:	6061      	str	r1, [r4, #4]
 800129c:	60a2      	str	r2, [r4, #8]
 800129e:	60e3      	str	r3, [r4, #12]
 80012a0:	4635      	mov	r5, r6
 80012a2:	3410      	adds	r4, #16
 80012a4:	42be      	cmp	r6, r7
 80012a6:	d1f5      	bne.n	8001294 <Config_GetConfig+0x14>
 80012a8:	cd03      	ldmia	r5!, {r0, r1}
 80012aa:	6020      	str	r0, [r4, #0]
 80012ac:	6061      	str	r1, [r4, #4]
		return CONF_OK;
 80012ae:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 80012b0:	bcf0      	pop	{r4, r5, r6, r7}
 80012b2:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 80012b4:	f06f 0001 	mvn.w	r0, #1
}
 80012b8:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 80012ba:	f06f 0004 	mvn.w	r0, #4
 80012be:	e7f7      	b.n	80012b0 <Config_GetConfig+0x30>
 80012c0:	20000126 	.word	0x20000126
 80012c4:	20000128 	.word	0x20000128

080012c8 <Config_GetEthernetConfig>:

CONFStatus_t Config_GetEthernetConfig (EthernetConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 80012c8:	b180      	cbz	r0, 80012ec <Config_GetEthernetConfig+0x24>
CONFStatus_t Config_GetEthernetConfig (EthernetConfig_t* config){
 80012ca:	b430      	push	{r4, r5}
 80012cc:	4605      	mov	r5, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <Config_GetEthernetConfig+0x30>)
 80012d0:	f993 3000 	ldrsb.w	r3, [r3]
 80012d4:	b96b      	cbnz	r3, 80012f2 <Config_GetEthernetConfig+0x2a>
		memcpy(config, &configuration.EthernetConfig, ETH_CONFIG_BYTES_LEN);
 80012d6:	4c09      	ldr	r4, [pc, #36]	; (80012fc <Config_GetEthernetConfig+0x34>)
 80012d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012da:	6028      	str	r0, [r5, #0]
 80012dc:	6069      	str	r1, [r5, #4]
 80012de:	60aa      	str	r2, [r5, #8]
 80012e0:	60eb      	str	r3, [r5, #12]
 80012e2:	8823      	ldrh	r3, [r4, #0]
 80012e4:	822b      	strh	r3, [r5, #16]
		return CONF_OK;
 80012e6:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 80012e8:	bc30      	pop	{r4, r5}
 80012ea:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 80012ec:	f06f 0001 	mvn.w	r0, #1
}
 80012f0:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 80012f2:	f06f 0004 	mvn.w	r0, #4
 80012f6:	e7f7      	b.n	80012e8 <Config_GetEthernetConfig+0x20>
 80012f8:	20000126 	.word	0x20000126
 80012fc:	20000148 	.word	0x20000148

08001300 <Config_GetRegConfig>:

CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8001300:	b198      	cbz	r0, 800132a <Config_GetRegConfig+0x2a>
CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
 8001302:	b430      	push	{r4, r5}
 8001304:	4605      	mov	r5, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <Config_GetRegConfig+0x38>)
 8001308:	f993 3000 	ldrsb.w	r3, [r3]
 800130c:	b983      	cbnz	r3, 8001330 <Config_GetRegConfig+0x30>
		memcpy(config, &configuration.RegulationConfig, REG_CONFIG_BYTES_LEN);
 800130e:	4c0b      	ldr	r4, [pc, #44]	; (800133c <Config_GetRegConfig+0x3c>)
 8001310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001312:	6028      	str	r0, [r5, #0]
 8001314:	6069      	str	r1, [r5, #4]
 8001316:	60aa      	str	r2, [r5, #8]
 8001318:	60eb      	str	r3, [r5, #12]
 800131a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131c:	6128      	str	r0, [r5, #16]
 800131e:	6169      	str	r1, [r5, #20]
 8001320:	61aa      	str	r2, [r5, #24]
 8001322:	61eb      	str	r3, [r5, #28]
		return CONF_OK;
 8001324:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 8001326:	bc30      	pop	{r4, r5}
 8001328:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 800132a:	f06f 0001 	mvn.w	r0, #1
}
 800132e:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 8001330:	f06f 0004 	mvn.w	r0, #4
 8001334:	e7f7      	b.n	8001326 <Config_GetRegConfig+0x26>
 8001336:	bf00      	nop
 8001338:	20000126 	.word	0x20000126
 800133c:	20000128 	.word	0x20000128

08001340 <Config_Copy>:

CONFStatus_t Config_Copy (ConfigStruct_t* dest, ConfigStruct_t* src){
	if((dest == NULL) || (src == NULL)) return CONF_ERR_NULL;
 8001340:	b1b0      	cbz	r0, 8001370 <Config_Copy+0x30>
 8001342:	b1c1      	cbz	r1, 8001376 <Config_Copy+0x36>
CONFStatus_t Config_Copy (ConfigStruct_t* dest, ConfigStruct_t* src){
 8001344:	b470      	push	{r4, r5, r6}
	memcpy(dest, src, CONFIG_BYTES_LEN);
 8001346:	460a      	mov	r2, r1
 8001348:	3130      	adds	r1, #48	; 0x30
 800134a:	6816      	ldr	r6, [r2, #0]
 800134c:	6855      	ldr	r5, [r2, #4]
 800134e:	6894      	ldr	r4, [r2, #8]
 8001350:	68d3      	ldr	r3, [r2, #12]
 8001352:	6006      	str	r6, [r0, #0]
 8001354:	6045      	str	r5, [r0, #4]
 8001356:	6084      	str	r4, [r0, #8]
 8001358:	60c3      	str	r3, [r0, #12]
 800135a:	3210      	adds	r2, #16
 800135c:	3010      	adds	r0, #16
 800135e:	428a      	cmp	r2, r1
 8001360:	d1f3      	bne.n	800134a <Config_Copy+0xa>
 8001362:	6811      	ldr	r1, [r2, #0]
 8001364:	6853      	ldr	r3, [r2, #4]
 8001366:	6001      	str	r1, [r0, #0]
 8001368:	6043      	str	r3, [r0, #4]
	return CONF_OK;
 800136a:	2000      	movs	r0, #0
}
 800136c:	bc70      	pop	{r4, r5, r6}
 800136e:	4770      	bx	lr
	if((dest == NULL) || (src == NULL)) return CONF_ERR_NULL;
 8001370:	f06f 0001 	mvn.w	r0, #1
 8001374:	4770      	bx	lr
 8001376:	f06f 0001 	mvn.w	r0, #1
}
 800137a:	4770      	bx	lr

0800137c <Config_Init>:
CONFStatus_t Config_Init(I2C_HandleTypeDef* iic){
 800137c:	b510      	push	{r4, lr}
	configuartionStatus = CONF_STAT_INIT;
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <Config_Init+0x5c>)
 8001380:	22ff      	movs	r2, #255	; 0xff
 8001382:	701a      	strb	r2, [r3, #0]
	retval |= EE_Init(iic);
 8001384:	f000 f82e 	bl	80013e4 <EE_Init>
	retval = EE_Read(&configuration, 0, CONFIG_BYTES_LEN);
 8001388:	2238      	movs	r2, #56	; 0x38
 800138a:	2100      	movs	r1, #0
 800138c:	4813      	ldr	r0, [pc, #76]	; (80013dc <Config_Init+0x60>)
 800138e:	f000 f833 	bl	80013f8 <EE_Read>
 8001392:	4603      	mov	r3, r0
	if(retval == EE_OK){
 8001394:	b138      	cbz	r0, 80013a6 <Config_Init+0x2a>
	if(retval == CONF_OK){
 8001396:	b153      	cbz	r3, 80013ae <Config_Init+0x32>
		if((retval == CONF_ERR_NOCONF) || (retval == CONF_ERR_CRC)){
 8001398:	1d5a      	adds	r2, r3, #5
 800139a:	2a01      	cmp	r2, #1
 800139c:	d90c      	bls.n	80013b8 <Config_Init+0x3c>
			configuartionStatus = CONF_STAT_ERROR;
 800139e:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <Config_Init+0x5c>)
 80013a0:	21fd      	movs	r1, #253	; 0xfd
 80013a2:	7011      	strb	r1, [r2, #0]
 80013a4:	e006      	b.n	80013b4 <Config_Init+0x38>
		retval = Config_CheckData();
 80013a6:	f7ff feeb 	bl	8001180 <Config_CheckData>
 80013aa:	4603      	mov	r3, r0
 80013ac:	e7f3      	b.n	8001396 <Config_Init+0x1a>
		configuartionStatus = CONF_STAT_LOADED;
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <Config_Init+0x5c>)
 80013b0:	2100      	movs	r1, #0
 80013b2:	7011      	strb	r1, [r2, #0]
}
 80013b4:	b258      	sxtb	r0, r3
 80013b6:	bd10      	pop	{r4, pc}
			Config_Copy(&configuration, &defaultConfig);
 80013b8:	4c08      	ldr	r4, [pc, #32]	; (80013dc <Config_Init+0x60>)
 80013ba:	4909      	ldr	r1, [pc, #36]	; (80013e0 <Config_Init+0x64>)
 80013bc:	4620      	mov	r0, r4
 80013be:	f7ff ffbf 	bl	8001340 <Config_Copy>
			configuration.crc = Config_CalculateCRC();
 80013c2:	f7ff fed1 	bl	8001168 <Config_CalculateCRC>
 80013c6:	6360      	str	r0, [r4, #52]	; 0x34
			retval = Config_Save();
 80013c8:	f7ff ff50 	bl	800126c <Config_Save>
 80013cc:	4603      	mov	r3, r0
			configuartionStatus = CONF_STAT_LOADED;
 80013ce:	4a02      	ldr	r2, [pc, #8]	; (80013d8 <Config_Init+0x5c>)
 80013d0:	2100      	movs	r1, #0
 80013d2:	7011      	strb	r1, [r2, #0]
 80013d4:	e7ee      	b.n	80013b4 <Config_Init+0x38>
 80013d6:	bf00      	nop
 80013d8:	20000126 	.word	0x20000126
 80013dc:	20000128 	.word	0x20000128
 80013e0:	0800cb94 	.word	0x0800cb94

080013e4 <EE_Init>:
#include "stm32f4xx_hal_i2c.h"

I2C_HandleTypeDef* ee_iic;

EE_StatusTypeDef EE_Init (I2C_HandleTypeDef* hi2c){
	if(hi2c != NULL){
 80013e4:	b118      	cbz	r0, 80013ee <EE_Init+0xa>
		ee_iic = hi2c;
 80013e6:	4a03      	ldr	r2, [pc, #12]	; (80013f4 <EE_Init+0x10>)
 80013e8:	6010      	str	r0, [r2, #0]
		return EE_OK;
 80013ea:	2000      	movs	r0, #0
 80013ec:	4770      	bx	lr
	}
	return EE_ERR_NULL;
 80013ee:	f06f 0001 	mvn.w	r0, #1
}
 80013f2:	4770      	bx	lr
 80013f4:	20002ac4 	.word	0x20002ac4

080013f8 <EE_Read>:

EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;

	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 80013f8:	b1e0      	cbz	r0, 8001434 <EE_Read+0x3c>
EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
 80013fa:	b510      	push	{r4, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	4604      	mov	r4, r0
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8001400:	b1da      	cbz	r2, 800143a <EE_Read+0x42>
 8001402:	4613      	mov	r3, r2
 8001404:	460a      	mov	r2, r1

	dataBuf = (uint8_t*)data;
	i2cStatus= HAL_I2C_Mem_Read(ee_iic, EE_ADDR, addr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 8001406:	4911      	ldr	r1, [pc, #68]	; (800144c <EE_Read+0x54>)
 8001408:	6808      	ldr	r0, [r1, #0]
 800140a:	b299      	uxth	r1, r3
 800140c:	3302      	adds	r3, #2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	9302      	str	r3, [sp, #8]
 8001412:	9101      	str	r1, [sp, #4]
 8001414:	9400      	str	r4, [sp, #0]
 8001416:	2301      	movs	r3, #1
 8001418:	21a0      	movs	r1, #160	; 0xa0
 800141a:	f005 f8cb 	bl	80065b4 <HAL_I2C_Mem_Read>
	if(i2cStatus == HAL_OK){
 800141e:	b178      	cbz	r0, 8001440 <EE_Read+0x48>
		return EE_OK;
	}else if(i2cStatus == HAL_ERROR){
 8001420:	2801      	cmp	r0, #1
 8001422:	d010      	beq.n	8001446 <EE_Read+0x4e>
		return EE_ERR_TIMEOUT;
	}else if(i2cStatus == HAL_BUSY){
 8001424:	2802      	cmp	r0, #2
 8001426:	d002      	beq.n	800142e <EE_Read+0x36>
		return EE_ERR_BUSY;
	}else{
		return EE_ERR_TIMEOUT;
 8001428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800142c:	e009      	b.n	8001442 <EE_Read+0x4a>
		return EE_ERR_BUSY;
 800142e:	f06f 0002 	mvn.w	r0, #2
 8001432:	e006      	b.n	8001442 <EE_Read+0x4a>
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8001434:	f06f 0001 	mvn.w	r0, #1
	}
}
 8001438:	4770      	bx	lr
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 800143a:	f06f 0001 	mvn.w	r0, #1
 800143e:	e000      	b.n	8001442 <EE_Read+0x4a>
		return EE_OK;
 8001440:	2000      	movs	r0, #0
}
 8001442:	b004      	add	sp, #16
 8001444:	bd10      	pop	{r4, pc}
		return EE_ERR_TIMEOUT;
 8001446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800144a:	e7fa      	b.n	8001442 <EE_Read+0x4a>
 800144c:	20002ac4 	.word	0x20002ac4

08001450 <EE_Write>:

EE_StatusTypeDef EE_Write (void* data, uint32_t addr, uint32_t len){
 8001450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001454:	b084      	sub	sp, #16
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;
	uint32_t datalen, i, pages, rest, bytelen, addrCpy;
	uint8_t eeBlock, eeAddr;

	if(data == NULL || len <= 0 || len >= EE_SIZE) return retval;
 8001456:	2800      	cmp	r0, #0
 8001458:	d05d      	beq.n	8001516 <EE_Write+0xc6>
 800145a:	460e      	mov	r6, r1
 800145c:	4607      	mov	r7, r0
 800145e:	2a00      	cmp	r2, #0
 8001460:	d05c      	beq.n	800151c <EE_Write+0xcc>
 8001462:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001466:	d25c      	bcs.n	8001522 <EE_Write+0xd2>

	eeBlock = addr / EE_BLOCK_SIZE;
 8001468:	f3c1 2107 	ubfx	r1, r1, #8, #8
	eeAddr = addr % EE_BLOCK_SIZE;
 800146c:	b2f5      	uxtb	r5, r6

	dataBuf = (uint8_t*)data;
	datalen = len;
	addrCpy = addr;

	if(len <= EE_PAGE_SIZE){
 800146e:	2a10      	cmp	r2, #16
 8001470:	d90a      	bls.n	8001488 <EE_Write+0x38>
			retval = EE_OK;
		}
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
	}else{
		pages = datalen >> 4;
 8001472:	ea4f 1812 	mov.w	r8, r2, lsr #4
		rest = datalen % 16;
		if(rest) pages ++;
 8001476:	f012 090f 	ands.w	r9, r2, #15
 800147a:	d001      	beq.n	8001480 <EE_Write+0x30>
 800147c:	f108 0801 	add.w	r8, r8, #1
		for(i = 0; i < pages; i++){
 8001480:	2500      	movs	r5, #0
	EE_StatusTypeDef retval = EE_ERR_NULL;
 8001482:	f06f 0a01 	mvn.w	sl, #1
		for(i = 0; i < pages; i++){
 8001486:	e036      	b.n	80014f6 <EE_Write+0xa6>
		i2cStatus= HAL_I2C_Mem_Write(ee_iic, EE_ADDR + eeBlock, eeAddr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 8001488:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <EE_Write+0xf0>)
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	b293      	uxth	r3, r2
 800148e:	1c94      	adds	r4, r2, #2
 8001490:	00a4      	lsls	r4, r4, #2
 8001492:	9402      	str	r4, [sp, #8]
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	9700      	str	r7, [sp, #0]
 8001498:	2301      	movs	r3, #1
 800149a:	462a      	mov	r2, r5
 800149c:	31a0      	adds	r1, #160	; 0xa0
 800149e:	f004 ffd5 	bl	800644c <HAL_I2C_Mem_Write>
		if(i2cStatus == HAL_OK){
 80014a2:	b130      	cbz	r0, 80014b2 <EE_Write+0x62>
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 80014a4:	2801      	cmp	r0, #1
 80014a6:	d03f      	beq.n	8001528 <EE_Write+0xd8>
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 80014a8:	2802      	cmp	r0, #2
 80014aa:	d040      	beq.n	800152e <EE_Write+0xde>
	EE_StatusTypeDef retval = EE_ERR_NULL;
 80014ac:	f06f 0a01 	mvn.w	sl, #1
 80014b0:	e02d      	b.n	800150e <EE_Write+0xbe>
			vTaskDelay(EE_BYTE_WRITE_TIME * (len + 2));
 80014b2:	4620      	mov	r0, r4
 80014b4:	f008 fbf2 	bl	8009c9c <vTaskDelay>
			retval = EE_OK;
 80014b8:	f04f 0a00 	mov.w	sl, #0
 80014bc:	e027      	b.n	800150e <EE_Write+0xbe>
			if(i == pages - 1){
				bytelen = rest;
 80014be:	464c      	mov	r4, r9
			}else{
				bytelen = 16;
			}
			i2cStatus = HAL_I2C_Mem_Write(ee_iic, EE_ADDR, addrCpy, 1, dataBuf, bytelen, EE_BYTE_WRITE_TIME * (bytelen + 2));
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <EE_Write+0xf0>)
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	1ca3      	adds	r3, r4, #2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	9302      	str	r3, [sp, #8]
 80014ca:	9401      	str	r4, [sp, #4]
 80014cc:	9700      	str	r7, [sp, #0]
 80014ce:	2301      	movs	r3, #1
 80014d0:	b2b2      	uxth	r2, r6
 80014d2:	21a0      	movs	r1, #160	; 0xa0
 80014d4:	f004 ffba 	bl	800644c <HAL_I2C_Mem_Write>
			if(i2cStatus == HAL_OK){
 80014d8:	b9a8      	cbnz	r0, 8001506 <EE_Write+0xb6>
				dataBuf += bytelen;
 80014da:	4427      	add	r7, r4
				addrCpy += bytelen;
 80014dc:	4426      	add	r6, r4
				retval = EE_OK;
				while(HAL_I2C_IsDeviceReady(ee_iic, EE_ADDR, 10, 10) != HAL_OK);
 80014de:	230a      	movs	r3, #10
 80014e0:	461a      	mov	r2, r3
 80014e2:	21a0      	movs	r1, #160	; 0xa0
 80014e4:	4816      	ldr	r0, [pc, #88]	; (8001540 <EE_Write+0xf0>)
 80014e6:	6800      	ldr	r0, [r0, #0]
 80014e8:	f005 f9cc 	bl	8006884 <HAL_I2C_IsDeviceReady>
 80014ec:	2800      	cmp	r0, #0
 80014ee:	d1f6      	bne.n	80014de <EE_Write+0x8e>
		for(i = 0; i < pages; i++){
 80014f0:	3501      	adds	r5, #1
				retval = EE_OK;
 80014f2:	f04f 0a00 	mov.w	sl, #0
		for(i = 0; i < pages; i++){
 80014f6:	4545      	cmp	r5, r8
 80014f8:	d209      	bcs.n	800150e <EE_Write+0xbe>
			if(i == pages - 1){
 80014fa:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80014fe:	42ab      	cmp	r3, r5
 8001500:	d0dd      	beq.n	80014be <EE_Write+0x6e>
				bytelen = 16;
 8001502:	2410      	movs	r4, #16
 8001504:	e7dc      	b.n	80014c0 <EE_Write+0x70>
				//vTaskDelay((bytelen + 2) * EE_BYTE_WRITE_TIME);
			}else{
				if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001506:	2801      	cmp	r0, #1
 8001508:	d014      	beq.n	8001534 <EE_Write+0xe4>
				else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 800150a:	2802      	cmp	r0, #2
 800150c:	d015      	beq.n	800153a <EE_Write+0xea>
				break;
			}
		}
	}
	return retval;
}
 800150e:	4650      	mov	r0, sl
 8001510:	b004      	add	sp, #16
 8001512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if(data == NULL || len <= 0 || len >= EE_SIZE) return retval;
 8001516:	f06f 0a01 	mvn.w	sl, #1
 800151a:	e7f8      	b.n	800150e <EE_Write+0xbe>
 800151c:	f06f 0a01 	mvn.w	sl, #1
 8001520:	e7f5      	b.n	800150e <EE_Write+0xbe>
 8001522:	f06f 0a01 	mvn.w	sl, #1
 8001526:	e7f2      	b.n	800150e <EE_Write+0xbe>
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001528:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800152c:	e7ef      	b.n	800150e <EE_Write+0xbe>
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 800152e:	f06f 0a02 	mvn.w	sl, #2
 8001532:	e7ec      	b.n	800150e <EE_Write+0xbe>
				if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001534:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8001538:	e7e9      	b.n	800150e <EE_Write+0xbe>
				else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 800153a:	f06f 0a02 	mvn.w	sl, #2
 800153e:	e7e6      	b.n	800150e <EE_Write+0xbe>
 8001540:	20002ac4 	.word	0x20002ac4

08001544 <EE_Erease>:

EE_StatusTypeDef EE_Erease (void){
 8001544:	b530      	push	{r4, r5, lr}
 8001546:	b085      	sub	sp, #20
	uint32_t i;
	int32_t retval = 0;
	uint8_t blankData[16];
	memset(blankData, 255, 16);
 8001548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	9303      	str	r3, [sp, #12]
	int32_t retval = 0;
 8001554:	2500      	movs	r5, #0

	for(i = 0; i < EE_SIZE; i += 16){
 8001556:	462c      	mov	r4, r5
 8001558:	e006      	b.n	8001568 <EE_Erease+0x24>
		retval |= EE_Write(blankData, i, 16);
 800155a:	2210      	movs	r2, #16
 800155c:	4621      	mov	r1, r4
 800155e:	4668      	mov	r0, sp
 8001560:	f7ff ff76 	bl	8001450 <EE_Write>
 8001564:	4305      	orrs	r5, r0
	for(i = 0; i < EE_SIZE; i += 16){
 8001566:	3410      	adds	r4, #16
 8001568:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800156c:	d3f5      	bcc.n	800155a <EE_Erease+0x16>
	}
	return retval;
}
 800156e:	b268      	sxtb	r0, r5
 8001570:	b005      	add	sp, #20
 8001572:	bd30      	pop	{r4, r5, pc}

08001574 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001574:	b530      	push	{r4, r5, lr}
 8001576:	b083      	sub	sp, #12
 8001578:	4605      	mov	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800157a:	4c16      	ldr	r4, [pc, #88]	; (80015d4 <WIZCHIP_READ+0x60>)
 800157c:	68e3      	ldr	r3, [r4, #12]
 800157e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001580:	6963      	ldr	r3, [r4, #20]
 8001582:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001586:	b9b3      	cbnz	r3, 80015b6 <WIZCHIP_READ+0x42>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001588:	4c12      	ldr	r4, [pc, #72]	; (80015d4 <WIZCHIP_READ+0x60>)
 800158a:	6a23      	ldr	r3, [r4, #32]
 800158c:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8001590:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001592:	6a23      	ldr	r3, [r4, #32]
 8001594:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8001598:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800159a:	6a23      	ldr	r3, [r4, #32]
 800159c:	b2e8      	uxtb	r0, r5
 800159e:	4798      	blx	r3
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80015a0:	4c0c      	ldr	r4, [pc, #48]	; (80015d4 <WIZCHIP_READ+0x60>)
 80015a2:	69e3      	ldr	r3, [r4, #28]
 80015a4:	4798      	blx	r3
 80015a6:	4605      	mov	r5, r0

   WIZCHIP.CS._deselect();
 80015a8:	69a3      	ldr	r3, [r4, #24]
 80015aa:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80015ac:	6923      	ldr	r3, [r4, #16]
 80015ae:	4798      	blx	r3
   return ret;
}
 80015b0:	4628      	mov	r0, r5
 80015b2:	b003      	add	sp, #12
 80015b4:	bd30      	pop	{r4, r5, pc}
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80015b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0e5      	beq.n	8001588 <WIZCHIP_READ+0x14>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80015bc:	0c2a      	lsrs	r2, r5, #16
 80015be:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80015c2:	0a2a      	lsrs	r2, r5, #8
 80015c4:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80015c8:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80015cc:	2103      	movs	r1, #3
 80015ce:	a801      	add	r0, sp, #4
 80015d0:	4798      	blx	r3
 80015d2:	e7e5      	b.n	80015a0 <WIZCHIP_READ+0x2c>
 80015d4:	20000004 	.word	0x20000004

080015d8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80015d8:	b570      	push	{r4, r5, r6, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	4604      	mov	r4, r0
 80015de:	460e      	mov	r6, r1
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80015e0:	4d16      	ldr	r5, [pc, #88]	; (800163c <WIZCHIP_WRITE+0x64>)
 80015e2:	68eb      	ldr	r3, [r5, #12]
 80015e4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80015e6:	696b      	ldr	r3, [r5, #20]
 80015e8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80015ea:	f044 0404 	orr.w	r4, r4, #4

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80015ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80015f0:	b1a3      	cbz	r3, 800161c <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80015f2:	0c22      	lsrs	r2, r4, #16
 80015f4:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80015f8:	0a22      	lsrs	r2, r4, #8
 80015fa:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80015fe:	f88d 4006 	strb.w	r4, [sp, #6]
		spi_data[3] = wb;
 8001602:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001606:	2104      	movs	r1, #4
 8001608:	eb0d 0001 	add.w	r0, sp, r1
 800160c:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800160e:	4c0b      	ldr	r4, [pc, #44]	; (800163c <WIZCHIP_WRITE+0x64>)
 8001610:	69a3      	ldr	r3, [r4, #24]
 8001612:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001614:	6923      	ldr	r3, [r4, #16]
 8001616:	4798      	blx	r3
}
 8001618:	b002      	add	sp, #8
 800161a:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800161c:	6a2b      	ldr	r3, [r5, #32]
 800161e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001622:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001624:	6a2b      	ldr	r3, [r5, #32]
 8001626:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800162a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800162c:	6a2b      	ldr	r3, [r5, #32]
 800162e:	b2e0      	uxtb	r0, r4
 8001630:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001632:	6a2b      	ldr	r3, [r5, #32]
 8001634:	4630      	mov	r0, r6
 8001636:	4798      	blx	r3
 8001638:	e7e9      	b.n	800160e <WIZCHIP_WRITE+0x36>
 800163a:	bf00      	nop
 800163c:	20000004 	.word	0x20000004

08001640 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001642:	b083      	sub	sp, #12
 8001644:	4604      	mov	r4, r0
 8001646:	460e      	mov	r6, r1
 8001648:	4615      	mov	r5, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800164a:	4f1c      	ldr	r7, [pc, #112]	; (80016bc <WIZCHIP_READ_BUF+0x7c>)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	b96b      	cbnz	r3, 8001674 <WIZCHIP_READ_BUF+0x34>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001658:	4f18      	ldr	r7, [pc, #96]	; (80016bc <WIZCHIP_READ_BUF+0x7c>)
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001660:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001668:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	b2e0      	uxtb	r0, r4
 800166e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001670:	2400      	movs	r4, #0
 8001672:	e019      	b.n	80016a8 <WIZCHIP_READ_BUF+0x68>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0ee      	beq.n	8001658 <WIZCHIP_READ_BUF+0x18>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800167a:	0c22      	lsrs	r2, r4, #16
 800167c:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001680:	0a22      	lsrs	r2, r4, #8
 8001682:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001686:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800168a:	2103      	movs	r1, #3
 800168c:	a801      	add	r0, sp, #4
 800168e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <WIZCHIP_READ_BUF+0x7c>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	4629      	mov	r1, r5
 8001696:	4630      	mov	r0, r6
 8001698:	4798      	blx	r3
 800169a:	e007      	b.n	80016ac <WIZCHIP_READ_BUF+0x6c>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <WIZCHIP_READ_BUF+0x7c>)
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	4798      	blx	r3
 80016a2:	5530      	strb	r0, [r6, r4]
		for(i = 0; i < len; i++)
 80016a4:	3401      	adds	r4, #1
 80016a6:	b2a4      	uxth	r4, r4
 80016a8:	42ac      	cmp	r4, r5
 80016aa:	d3f7      	bcc.n	800169c <WIZCHIP_READ_BUF+0x5c>
   }

   WIZCHIP.CS._deselect();
 80016ac:	4c03      	ldr	r4, [pc, #12]	; (80016bc <WIZCHIP_READ_BUF+0x7c>)
 80016ae:	69a3      	ldr	r3, [r4, #24]
 80016b0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80016b2:	6923      	ldr	r3, [r4, #16]
 80016b4:	4798      	blx	r3
}
 80016b6:	b003      	add	sp, #12
 80016b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000004 	.word	0x20000004

080016c0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c2:	b083      	sub	sp, #12
 80016c4:	4604      	mov	r4, r0
 80016c6:	460f      	mov	r7, r1
 80016c8:	4616      	mov	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80016ca:	4d1b      	ldr	r5, [pc, #108]	; (8001738 <WIZCHIP_WRITE_BUF+0x78>)
 80016cc:	68eb      	ldr	r3, [r5, #12]
 80016ce:	4798      	blx	r3
   WIZCHIP.CS._select();
 80016d0:	696b      	ldr	r3, [r5, #20]
 80016d2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80016d4:	f044 0404 	orr.w	r4, r4, #4

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80016d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80016da:	b1b3      	cbz	r3, 800170a <WIZCHIP_WRITE_BUF+0x4a>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80016dc:	0c22      	lsrs	r2, r4, #16
 80016de:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80016e2:	0a22      	lsrs	r2, r4, #8
 80016e4:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80016e8:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80016ec:	2103      	movs	r1, #3
 80016ee:	a801      	add	r0, sp, #4
 80016f0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <WIZCHIP_WRITE_BUF+0x78>)
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	4631      	mov	r1, r6
 80016f8:	4638      	mov	r0, r7
 80016fa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80016fc:	4c0e      	ldr	r4, [pc, #56]	; (8001738 <WIZCHIP_WRITE_BUF+0x78>)
 80016fe:	69a3      	ldr	r3, [r4, #24]
 8001700:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001702:	6923      	ldr	r3, [r4, #16]
 8001704:	4798      	blx	r3
}
 8001706:	b003      	add	sp, #12
 8001708:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800170a:	6a2b      	ldr	r3, [r5, #32]
 800170c:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001710:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001712:	6a2b      	ldr	r3, [r5, #32]
 8001714:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001718:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800171a:	6a2b      	ldr	r3, [r5, #32]
 800171c:	b2e0      	uxtb	r0, r4
 800171e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001720:	2400      	movs	r4, #0
 8001722:	e005      	b.n	8001730 <WIZCHIP_WRITE_BUF+0x70>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <WIZCHIP_WRITE_BUF+0x78>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	5d38      	ldrb	r0, [r7, r4]
 800172a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800172c:	3401      	adds	r4, #1
 800172e:	b2a4      	uxth	r4, r4
 8001730:	42b4      	cmp	r4, r6
 8001732:	d3f7      	bcc.n	8001724 <WIZCHIP_WRITE_BUF+0x64>
 8001734:	e7e2      	b.n	80016fc <WIZCHIP_WRITE_BUF+0x3c>
 8001736:	bf00      	nop
 8001738:	20000004 	.word	0x20000004

0800173c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800173c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001740:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 8001742:	2500      	movs	r5, #0
 8001744:	e001      	b.n	800174a <getSn_TX_FSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
 8001746:	42a5      	cmp	r5, r4
 8001748:	d024      	beq.n	8001794 <getSn_TX_FSR+0x58>
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800174a:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800174e:	f108 0801 	add.w	r8, r8, #1
 8001752:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001756:	f508 5600 	add.w	r6, r8, #8192	; 0x2000
 800175a:	4630      	mov	r0, r6
 800175c:	f7ff ff0a 	bl	8001574 <WIZCHIP_READ>
 8001760:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001762:	0224      	lsls	r4, r4, #8
 8001764:	b2a4      	uxth	r4, r4
 8001766:	f508 5804 	add.w	r8, r8, #8448	; 0x2100
 800176a:	4640      	mov	r0, r8
 800176c:	f7ff ff02 	bl	8001574 <WIZCHIP_READ>
 8001770:	fa14 f480 	uxtah	r4, r4, r0
 8001774:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 8001776:	2c00      	cmp	r4, #0
 8001778:	d0e5      	beq.n	8001746 <getSn_TX_FSR+0xa>
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800177a:	4630      	mov	r0, r6
 800177c:	f7ff fefa 	bl	8001574 <WIZCHIP_READ>
 8001780:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001782:	022d      	lsls	r5, r5, #8
 8001784:	b2ad      	uxth	r5, r5
 8001786:	4640      	mov	r0, r8
 8001788:	f7ff fef4 	bl	8001574 <WIZCHIP_READ>
 800178c:	fa15 f580 	uxtah	r5, r5, r0
 8001790:	b2ad      	uxth	r5, r5
 8001792:	e7d8      	b.n	8001746 <getSn_TX_FSR+0xa>
   return val;
}
 8001794:	4628      	mov	r0, r5
 8001796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800179a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800179a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800179e:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 80017a0:	2500      	movs	r5, #0
 80017a2:	e001      	b.n	80017a8 <getSn_RX_RSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
 80017a4:	42a5      	cmp	r5, r4
 80017a6:	d024      	beq.n	80017f2 <getSn_RX_RSR+0x58>
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80017a8:	ea4f 0887 	mov.w	r8, r7, lsl #2
 80017ac:	f108 0801 	add.w	r8, r8, #1
 80017b0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80017b4:	f508 5618 	add.w	r6, r8, #9728	; 0x2600
 80017b8:	4630      	mov	r0, r6
 80017ba:	f7ff fedb 	bl	8001574 <WIZCHIP_READ>
 80017be:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80017c0:	0224      	lsls	r4, r4, #8
 80017c2:	b2a4      	uxth	r4, r4
 80017c4:	f508 581c 	add.w	r8, r8, #9984	; 0x2700
 80017c8:	4640      	mov	r0, r8
 80017ca:	f7ff fed3 	bl	8001574 <WIZCHIP_READ>
 80017ce:	fa14 f480 	uxtah	r4, r4, r0
 80017d2:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 80017d4:	2c00      	cmp	r4, #0
 80017d6:	d0e5      	beq.n	80017a4 <getSn_RX_RSR+0xa>
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80017d8:	4630      	mov	r0, r6
 80017da:	f7ff fecb 	bl	8001574 <WIZCHIP_READ>
 80017de:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80017e0:	022d      	lsls	r5, r5, #8
 80017e2:	b2ad      	uxth	r5, r5
 80017e4:	4640      	mov	r0, r8
 80017e6:	f7ff fec5 	bl	8001574 <WIZCHIP_READ>
 80017ea:	fa15 f580 	uxtah	r5, r5, r0
 80017ee:	b2ad      	uxth	r5, r5
 80017f0:	e7d8      	b.n	80017a4 <getSn_RX_RSR+0xa>
   return val;
}
 80017f2:	4628      	mov	r0, r5
 80017f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080017f8 <wiz_send_data>:
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 80017f8:	b902      	cbnz	r2, 80017fc <wiz_send_data+0x4>
 80017fa:	4770      	bx	lr
{
 80017fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001800:	4615      	mov	r5, r2
 8001802:	460f      	mov	r7, r1
   ptr = getSn_TX_WR(sn);
 8001804:	0084      	lsls	r4, r0, #2
 8001806:	f104 0901 	add.w	r9, r4, #1
 800180a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800180e:	f509 5810 	add.w	r8, r9, #9216	; 0x2400
 8001812:	4640      	mov	r0, r8
 8001814:	f7ff feae 	bl	8001574 <WIZCHIP_READ>
 8001818:	b286      	uxth	r6, r0
 800181a:	0236      	lsls	r6, r6, #8
 800181c:	b2b6      	uxth	r6, r6
 800181e:	f509 5914 	add.w	r9, r9, #9472	; 0x2500
 8001822:	4648      	mov	r0, r9
 8001824:	f7ff fea6 	bl	8001574 <WIZCHIP_READ>
 8001828:	fa16 f680 	uxtah	r6, r6, r0
 800182c:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800182e:	1ca0      	adds	r0, r4, #2
 8001830:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001832:	462a      	mov	r2, r5
 8001834:	4639      	mov	r1, r7
 8001836:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 800183a:	f7ff ff41 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800183e:	4435      	add	r5, r6
 8001840:	b2ad      	uxth	r5, r5
   setSn_TX_WR(sn,ptr);
 8001842:	0a29      	lsrs	r1, r5, #8
 8001844:	4640      	mov	r0, r8
 8001846:	f7ff fec7 	bl	80015d8 <WIZCHIP_WRITE>
 800184a:	b2e9      	uxtb	r1, r5
 800184c:	4648      	mov	r0, r9
 800184e:	f7ff fec3 	bl	80015d8 <WIZCHIP_WRITE>
}
 8001852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001856 <wiz_recv_data>:
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 8001856:	b902      	cbnz	r2, 800185a <wiz_recv_data+0x4>
 8001858:	4770      	bx	lr
{
 800185a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800185e:	4615      	mov	r5, r2
 8001860:	460f      	mov	r7, r1
   ptr = getSn_RX_RD(sn);
 8001862:	0084      	lsls	r4, r0, #2
 8001864:	f104 0901 	add.w	r9, r4, #1
 8001868:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800186c:	f509 5820 	add.w	r8, r9, #10240	; 0x2800
 8001870:	4640      	mov	r0, r8
 8001872:	f7ff fe7f 	bl	8001574 <WIZCHIP_READ>
 8001876:	b286      	uxth	r6, r0
 8001878:	0236      	lsls	r6, r6, #8
 800187a:	b2b6      	uxth	r6, r6
 800187c:	f509 5924 	add.w	r9, r9, #10496	; 0x2900
 8001880:	4648      	mov	r0, r9
 8001882:	f7ff fe77 	bl	8001574 <WIZCHIP_READ>
 8001886:	fa16 f680 	uxtah	r6, r6, r0
 800188a:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800188c:	1ce0      	adds	r0, r4, #3
 800188e:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001890:	462a      	mov	r2, r5
 8001892:	4639      	mov	r1, r7
 8001894:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8001898:	f7ff fed2 	bl	8001640 <WIZCHIP_READ_BUF>
   ptr += len;
 800189c:	4435      	add	r5, r6
 800189e:	b2ad      	uxth	r5, r5
   
   setSn_RX_RD(sn,ptr);
 80018a0:	0a29      	lsrs	r1, r5, #8
 80018a2:	4640      	mov	r0, r8
 80018a4:	f7ff fe98 	bl	80015d8 <WIZCHIP_WRITE>
 80018a8:	b2e9      	uxtb	r1, r5
 80018aa:	4648      	mov	r0, r9
 80018ac:	f7ff fe94 	bl	80015d8 <WIZCHIP_WRITE>
}
 80018b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080018b4 <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 80018b4:	2808      	cmp	r0, #8
 80018b6:	d82e      	bhi.n	8001916 <close+0x62>
{
 80018b8:	b570      	push	{r4, r5, r6, lr}
 80018ba:	4606      	mov	r6, r0
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80018bc:	0084      	lsls	r4, r0, #2
 80018be:	3401      	adds	r4, #1
 80018c0:	00e4      	lsls	r4, r4, #3
 80018c2:	f504 7580 	add.w	r5, r4, #256	; 0x100
 80018c6:	2110      	movs	r1, #16
 80018c8:	4628      	mov	r0, r5
 80018ca:	f7ff fe85 	bl	80015d8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80018ce:	4628      	mov	r0, r5
 80018d0:	f7ff fe50 	bl	8001574 <WIZCHIP_READ>
 80018d4:	2800      	cmp	r0, #0
 80018d6:	d1fa      	bne.n	80018ce <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80018d8:	211f      	movs	r1, #31
 80018da:	f504 7000 	add.w	r0, r4, #512	; 0x200
 80018de:	f7ff fe7b 	bl	80015d8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80018e2:	2301      	movs	r3, #1
 80018e4:	40b3      	lsls	r3, r6
 80018e6:	43db      	mvns	r3, r3
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	490c      	ldr	r1, [pc, #48]	; (800191c <close+0x68>)
 80018ec:	880a      	ldrh	r2, [r1, #0]
 80018ee:	401a      	ands	r2, r3
 80018f0:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <close+0x6c>)
 80018f4:	8811      	ldrh	r1, [r2, #0]
 80018f6:	400b      	ands	r3, r1
 80018f8:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	4a09      	ldr	r2, [pc, #36]	; (8001924 <close+0x70>)
 80018fe:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
	sock_pack_info[sn] = 0;
 8001902:	4a09      	ldr	r2, [pc, #36]	; (8001928 <close+0x74>)
 8001904:	5593      	strb	r3, [r2, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001906:	f504 7040 	add.w	r0, r4, #768	; 0x300
 800190a:	f7ff fe33 	bl	8001574 <WIZCHIP_READ>
 800190e:	2800      	cmp	r0, #0
 8001910:	d1f9      	bne.n	8001906 <close+0x52>
	return SOCK_OK;
 8001912:	2001      	movs	r0, #1
}
 8001914:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 8001916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800191a:	4770      	bx	lr
 800191c:	20000160 	.word	0x20000160
 8001920:	20000162 	.word	0x20000162
 8001924:	2000016c 	.word	0x2000016c
 8001928:	20000164 	.word	0x20000164

0800192c <socket>:
	CHECK_SOCKNUM();
 800192c:	2808      	cmp	r0, #8
 800192e:	f200 8093 	bhi.w	8001a58 <socket+0x12c>
{
 8001932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	4605      	mov	r5, r0
 800193a:	460f      	mov	r7, r1
 800193c:	4690      	mov	r8, r2
 800193e:	461e      	mov	r6, r3
	switch(protocol)
 8001940:	2901      	cmp	r1, #1
 8001942:	d062      	beq.n	8001a0a <socket+0xde>
 8001944:	2900      	cmp	r1, #0
 8001946:	f000 808a 	beq.w	8001a5e <socket+0x132>
 800194a:	2904      	cmp	r1, #4
 800194c:	f200 8087 	bhi.w	8001a5e <socket+0x132>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001950:	f016 0f04 	tst.w	r6, #4
 8001954:	f040 8086 	bne.w	8001a64 <socket+0x138>
	if(flag != 0)
 8001958:	b11e      	cbz	r6, 8001962 <socket+0x36>
   	switch(protocol)
 800195a:	2f01      	cmp	r7, #1
 800195c:	d062      	beq.n	8001a24 <socket+0xf8>
 800195e:	2f02      	cmp	r7, #2
 8001960:	d066      	beq.n	8001a30 <socket+0x104>
	close(sn);
 8001962:	4628      	mov	r0, r5
 8001964:	f7ff ffa6 	bl	80018b4 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001968:	00ac      	lsls	r4, r5, #2
 800196a:	3401      	adds	r4, #1
 800196c:	00e4      	lsls	r4, r4, #3
 800196e:	f026 010f 	bic.w	r1, r6, #15
 8001972:	b249      	sxtb	r1, r1
 8001974:	4339      	orrs	r1, r7
 8001976:	b2c9      	uxtb	r1, r1
 8001978:	4620      	mov	r0, r4
 800197a:	f7ff fe2d 	bl	80015d8 <WIZCHIP_WRITE>
	if(!port)
 800197e:	f1b8 0f00 	cmp.w	r8, #0
 8001982:	d10a      	bne.n	800199a <socket+0x6e>
	   port = sock_any_port++;
 8001984:	4a3a      	ldr	r2, [pc, #232]	; (8001a70 <socket+0x144>)
 8001986:	f8b2 8000 	ldrh.w	r8, [r2]
 800198a:	f108 0301 	add.w	r3, r8, #1
 800198e:	b29b      	uxth	r3, r3
 8001990:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001992:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001996:	4293      	cmp	r3, r2
 8001998:	d059      	beq.n	8001a4e <socket+0x122>
   setSn_PORT(sn,port);	
 800199a:	ea4f 2118 	mov.w	r1, r8, lsr #8
 800199e:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 80019a2:	f7ff fe19 	bl	80015d8 <WIZCHIP_WRITE>
 80019a6:	fa5f f188 	uxtb.w	r1, r8
 80019aa:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 80019ae:	f7ff fe13 	bl	80015d8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80019b2:	f504 7780 	add.w	r7, r4, #256	; 0x100
 80019b6:	2101      	movs	r1, #1
 80019b8:	4638      	mov	r0, r7
 80019ba:	f7ff fe0d 	bl	80015d8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80019be:	4638      	mov	r0, r7
 80019c0:	f7ff fdd8 	bl	8001574 <WIZCHIP_READ>
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d1fa      	bne.n	80019be <socket+0x92>
   sock_io_mode &= ~(1 <<sn);
 80019c8:	2201      	movs	r2, #1
 80019ca:	40aa      	lsls	r2, r5
 80019cc:	43d2      	mvns	r2, r2
 80019ce:	b212      	sxth	r2, r2
 80019d0:	4928      	ldr	r1, [pc, #160]	; (8001a74 <socket+0x148>)
 80019d2:	880b      	ldrh	r3, [r1, #0]
 80019d4:	4013      	ands	r3, r2
 80019d6:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80019d8:	f006 0601 	and.w	r6, r6, #1
 80019dc:	40ae      	lsls	r6, r5
 80019de:	431e      	orrs	r6, r3
 80019e0:	800e      	strh	r6, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <socket+0x14c>)
 80019e4:	8819      	ldrh	r1, [r3, #0]
 80019e6:	400a      	ands	r2, r1
 80019e8:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <socket+0x150>)
 80019ee:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 80019f2:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <socket+0x154>)
 80019f4:	5553      	strb	r3, [r2, r5]
   while(getSn_SR(sn) == SOCK_CLOSED);
 80019f6:	f504 7040 	add.w	r0, r4, #768	; 0x300
 80019fa:	f7ff fdbb 	bl	8001574 <WIZCHIP_READ>
 80019fe:	2800      	cmp	r0, #0
 8001a00:	d0f9      	beq.n	80019f6 <socket+0xca>
   return (int8_t)sn;
 8001a02:	b268      	sxtb	r0, r5
}	   
 8001a04:	b002      	add	sp, #8
 8001a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            getSIPR((uint8_t*)&taddr);
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	eb0d 0102 	add.w	r1, sp, r2
 8001a10:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001a14:	f7ff fe14 	bl	8001640 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001a18:	9b01      	ldr	r3, [sp, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d198      	bne.n	8001950 <socket+0x24>
 8001a1e:	f06f 0002 	mvn.w	r0, #2
 8001a22:	e7ef      	b.n	8001a04 <socket+0xd8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001a24:	f016 0f21 	tst.w	r6, #33	; 0x21
 8001a28:	d19b      	bne.n	8001962 <socket+0x36>
 8001a2a:	f06f 0005 	mvn.w	r0, #5
 8001a2e:	e7e9      	b.n	8001a04 <socket+0xd8>
   	      if(flag & SF_IGMP_VER2)
 8001a30:	f016 0f20 	tst.w	r6, #32
 8001a34:	d002      	beq.n	8001a3c <socket+0x110>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001a36:	f016 0f80 	tst.w	r6, #128	; 0x80
 8001a3a:	d016      	beq.n	8001a6a <socket+0x13e>
      	      if(flag & SF_UNI_BLOCK)
 8001a3c:	f016 0f10 	tst.w	r6, #16
 8001a40:	d08f      	beq.n	8001962 <socket+0x36>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001a42:	f016 0f80 	tst.w	r6, #128	; 0x80
 8001a46:	d18c      	bne.n	8001962 <socket+0x36>
 8001a48:	f06f 0005 	mvn.w	r0, #5
 8001a4c:	e7da      	b.n	8001a04 <socket+0xd8>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <socket+0x144>)
 8001a50:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001a54:	801a      	strh	r2, [r3, #0]
 8001a56:	e7a0      	b.n	800199a <socket+0x6e>
	CHECK_SOCKNUM();
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}	   
 8001a5c:	4770      	bx	lr
         return SOCKERR_SOCKMODE;
 8001a5e:	f06f 0004 	mvn.w	r0, #4
 8001a62:	e7cf      	b.n	8001a04 <socket+0xd8>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001a64:	f06f 0005 	mvn.w	r0, #5
 8001a68:	e7cc      	b.n	8001a04 <socket+0xd8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001a6a:	f06f 0005 	mvn.w	r0, #5
 8001a6e:	e7c9      	b.n	8001a04 <socket+0xd8>
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000160 	.word	0x20000160
 8001a78:	20000162 	.word	0x20000162
 8001a7c:	2000016c 	.word	0x2000016c
 8001a80:	20000164 	.word	0x20000164

08001a84 <listen>:

int8_t listen(uint8_t sn)
{
	CHECK_SOCKNUM();
 8001a84:	2808      	cmp	r0, #8
 8001a86:	d82a      	bhi.n	8001ade <listen+0x5a>
{
 8001a88:	b570      	push	{r4, r5, r6, lr}
 8001a8a:	4605      	mov	r5, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001a8c:	0084      	lsls	r4, r0, #2
 8001a8e:	3401      	adds	r4, #1
 8001a90:	00e4      	lsls	r4, r4, #3
 8001a92:	4620      	mov	r0, r4
 8001a94:	f7ff fd6e 	bl	8001574 <WIZCHIP_READ>
 8001a98:	f000 000f 	and.w	r0, r0, #15
 8001a9c:	2801      	cmp	r0, #1
 8001a9e:	d121      	bne.n	8001ae4 <listen+0x60>
	CHECK_SOCKINIT();
 8001aa0:	f504 7640 	add.w	r6, r4, #768	; 0x300
 8001aa4:	4630      	mov	r0, r6
 8001aa6:	f7ff fd65 	bl	8001574 <WIZCHIP_READ>
 8001aaa:	2813      	cmp	r0, #19
 8001aac:	d11d      	bne.n	8001aea <listen+0x66>
	setSn_CR(sn,Sn_CR_LISTEN);
 8001aae:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f7ff fd8f 	bl	80015d8 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff fd5a 	bl	8001574 <WIZCHIP_READ>
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	d1fa      	bne.n	8001aba <listen+0x36>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001ac4:	4630      	mov	r0, r6
 8001ac6:	f7ff fd55 	bl	8001574 <WIZCHIP_READ>
 8001aca:	2814      	cmp	r0, #20
 8001acc:	d101      	bne.n	8001ad2 <listen+0x4e>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 8001ace:	2001      	movs	r0, #1
}
 8001ad0:	bd70      	pop	{r4, r5, r6, pc}
         close(sn);
 8001ad2:	4628      	mov	r0, r5
 8001ad4:	f7ff feee 	bl	80018b4 <close>
         return SOCKERR_SOCKCLOSED;
 8001ad8:	f06f 0003 	mvn.w	r0, #3
 8001adc:	e7f8      	b.n	8001ad0 <listen+0x4c>
	CHECK_SOCKNUM();
 8001ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001ae2:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001ae4:	f06f 0004 	mvn.w	r0, #4
 8001ae8:	e7f2      	b.n	8001ad0 <listen+0x4c>
	CHECK_SOCKINIT();
 8001aea:	f06f 0002 	mvn.w	r0, #2
 8001aee:	e7ef      	b.n	8001ad0 <listen+0x4c>

08001af0 <disconnect>:
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
 8001af0:	2808      	cmp	r0, #8
 8001af2:	d838      	bhi.n	8001b66 <disconnect+0x76>
{
 8001af4:	b570      	push	{r4, r5, r6, lr}
 8001af6:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001af8:	0084      	lsls	r4, r0, #2
 8001afa:	3401      	adds	r4, #1
 8001afc:	00e4      	lsls	r4, r4, #3
 8001afe:	4620      	mov	r0, r4
 8001b00:	f7ff fd38 	bl	8001574 <WIZCHIP_READ>
 8001b04:	f000 000f 	and.w	r0, r0, #15
 8001b08:	2801      	cmp	r0, #1
 8001b0a:	d12f      	bne.n	8001b6c <disconnect+0x7c>
	setSn_CR(sn,Sn_CR_DISCON);
 8001b0c:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8001b10:	2108      	movs	r1, #8
 8001b12:	4628      	mov	r0, r5
 8001b14:	f7ff fd60 	bl	80015d8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001b18:	4628      	mov	r0, r5
 8001b1a:	f7ff fd2b 	bl	8001574 <WIZCHIP_READ>
 8001b1e:	2800      	cmp	r0, #0
 8001b20:	d1fa      	bne.n	8001b18 <disconnect+0x28>
	sock_is_sending &= ~(1<<sn);
 8001b22:	2301      	movs	r3, #1
 8001b24:	fa03 f206 	lsl.w	r2, r3, r6
 8001b28:	4913      	ldr	r1, [pc, #76]	; (8001b78 <disconnect+0x88>)
 8001b2a:	880b      	ldrh	r3, [r1, #0]
 8001b2c:	ea23 0302 	bic.w	r3, r3, r2
 8001b30:	800b      	strh	r3, [r1, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <disconnect+0x8c>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	4133      	asrs	r3, r6
 8001b38:	f013 0f01 	tst.w	r3, #1
 8001b3c:	d119      	bne.n	8001b72 <disconnect+0x82>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001b3e:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8001b42:	f7ff fd17 	bl	8001574 <WIZCHIP_READ>
 8001b46:	b160      	cbz	r0, 8001b62 <disconnect+0x72>
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001b48:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8001b4c:	f7ff fd12 	bl	8001574 <WIZCHIP_READ>
 8001b50:	f010 0f08 	tst.w	r0, #8
 8001b54:	d0f3      	beq.n	8001b3e <disconnect+0x4e>
	   {
	      close(sn);
 8001b56:	4630      	mov	r0, r6
 8001b58:	f7ff feac 	bl	80018b4 <close>
	      return SOCKERR_TIMEOUT;
 8001b5c:	f06f 000c 	mvn.w	r0, #12
 8001b60:	e008      	b.n	8001b74 <disconnect+0x84>
	   }
	}
	return SOCK_OK;
 8001b62:	2001      	movs	r0, #1
 8001b64:	e006      	b.n	8001b74 <disconnect+0x84>
   CHECK_SOCKNUM();
 8001b66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001b6a:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001b6c:	f06f 0004 	mvn.w	r0, #4
 8001b70:	e000      	b.n	8001b74 <disconnect+0x84>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001b72:	2000      	movs	r0, #0
}
 8001b74:	bd70      	pop	{r4, r5, r6, pc}
 8001b76:	bf00      	nop
 8001b78:	20000162 	.word	0x20000162
 8001b7c:	20000160 	.word	0x20000160

08001b80 <send>:
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
 8001b80:	2808      	cmp	r0, #8
 8001b82:	f200 8083 	bhi.w	8001c8c <send+0x10c>
{
 8001b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b8a:	4615      	mov	r5, r2
 8001b8c:	468a      	mov	sl, r1
 8001b8e:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001b90:	4681      	mov	r9, r0
 8001b92:	0087      	lsls	r7, r0, #2
 8001b94:	3701      	adds	r7, #1
 8001b96:	00ff      	lsls	r7, r7, #3
 8001b98:	4638      	mov	r0, r7
 8001b9a:	f7ff fceb 	bl	8001574 <WIZCHIP_READ>
 8001b9e:	f000 000f 	and.w	r0, r0, #15
 8001ba2:	2801      	cmp	r0, #1
 8001ba4:	d175      	bne.n	8001c92 <send+0x112>
   CHECK_SOCKDATA();
 8001ba6:	2d00      	cmp	r5, #0
 8001ba8:	d076      	beq.n	8001c98 <send+0x118>
   tmp = getSn_SR(sn);
 8001baa:	f507 7840 	add.w	r8, r7, #768	; 0x300
 8001bae:	4640      	mov	r0, r8
 8001bb0:	f7ff fce0 	bl	8001574 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001bb4:	2817      	cmp	r0, #23
 8001bb6:	d001      	beq.n	8001bbc <send+0x3c>
 8001bb8:	281c      	cmp	r0, #28
 8001bba:	d170      	bne.n	8001c9e <send+0x11e>
   if( sock_is_sending & (1<<sn) )
 8001bbc:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <send+0x124>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	4133      	asrs	r3, r6
 8001bc2:	f013 0f01 	tst.w	r3, #1
 8001bc6:	d019      	beq.n	8001bfc <send+0x7c>
   {
      tmp = getSn_IR(sn);
 8001bc8:	f507 7400 	add.w	r4, r7, #512	; 0x200
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f7ff fcd1 	bl	8001574 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8001bd2:	f010 0f10 	tst.w	r0, #16
 8001bd6:	d105      	bne.n	8001be4 <send+0x64>
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001bd8:	f010 0f08 	tst.w	r0, #8
 8001bdc:	d119      	bne.n	8001c12 <send+0x92>
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
 8001bde:	2000      	movs	r0, #0
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 8001be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
 8001be4:	2110      	movs	r1, #16
 8001be6:	4620      	mov	r0, r4
 8001be8:	f7ff fcf6 	bl	80015d8 <WIZCHIP_WRITE>
         sock_is_sending &= ~(1<<sn);         
 8001bec:	2301      	movs	r3, #1
 8001bee:	fa03 f206 	lsl.w	r2, r3, r6
 8001bf2:	492c      	ldr	r1, [pc, #176]	; (8001ca4 <send+0x124>)
 8001bf4:	880b      	ldrh	r3, [r1, #0]
 8001bf6:	ea23 0302 	bic.w	r3, r3, r2
 8001bfa:	800b      	strh	r3, [r1, #0]
   freesize = getSn_TxMAX(sn);
 8001bfc:	f507 50f8 	add.w	r0, r7, #7936	; 0x1f00
 8001c00:	f7ff fcb8 	bl	8001574 <WIZCHIP_READ>
 8001c04:	b284      	uxth	r4, r0
 8001c06:	02a4      	lsls	r4, r4, #10
 8001c08:	b2a4      	uxth	r4, r4
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001c0a:	42a5      	cmp	r5, r4
 8001c0c:	d80f      	bhi.n	8001c2e <send+0xae>
 8001c0e:	462c      	mov	r4, r5
 8001c10:	e00d      	b.n	8001c2e <send+0xae>
         close(sn);
 8001c12:	4630      	mov	r0, r6
 8001c14:	f7ff fe4e 	bl	80018b4 <close>
         return SOCKERR_TIMEOUT;
 8001c18:	f06f 000c 	mvn.w	r0, #12
 8001c1c:	e7e0      	b.n	8001be0 <send+0x60>
         close(sn);
 8001c1e:	4630      	mov	r0, r6
 8001c20:	f7ff fe48 	bl	80018b4 <close>
         return SOCKERR_SOCKSTATUS;
 8001c24:	f06f 0006 	mvn.w	r0, #6
 8001c28:	e7da      	b.n	8001be0 <send+0x60>
      if(len <= freesize) break;
 8001c2a:	42a5      	cmp	r5, r4
 8001c2c:	d215      	bcs.n	8001c5a <send+0xda>
      freesize = getSn_TX_FSR(sn);
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f7ff fd84 	bl	800173c <getSn_TX_FSR>
 8001c34:	4605      	mov	r5, r0
      tmp = getSn_SR(sn);
 8001c36:	4640      	mov	r0, r8
 8001c38:	f7ff fc9c 	bl	8001574 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001c3c:	2817      	cmp	r0, #23
 8001c3e:	d001      	beq.n	8001c44 <send+0xc4>
 8001c40:	281c      	cmp	r0, #28
 8001c42:	d1ec      	bne.n	8001c1e <send+0x9e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001c44:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <send+0x128>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	fa43 f309 	asr.w	r3, r3, r9
 8001c4c:	f013 0f01 	tst.w	r3, #1
 8001c50:	d0eb      	beq.n	8001c2a <send+0xaa>
 8001c52:	42a5      	cmp	r5, r4
 8001c54:	d2e9      	bcs.n	8001c2a <send+0xaa>
 8001c56:	2000      	movs	r0, #0
 8001c58:	e7c2      	b.n	8001be0 <send+0x60>
   wiz_send_data(sn, buf, len);
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	4651      	mov	r1, sl
 8001c5e:	4630      	mov	r0, r6
 8001c60:	f7ff fdca 	bl	80017f8 <wiz_send_data>
   setSn_CR(sn,Sn_CR_SEND);
 8001c64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001c68:	2120      	movs	r1, #32
 8001c6a:	4638      	mov	r0, r7
 8001c6c:	f7ff fcb4 	bl	80015d8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001c70:	4638      	mov	r0, r7
 8001c72:	f7ff fc7f 	bl	8001574 <WIZCHIP_READ>
 8001c76:	2800      	cmp	r0, #0
 8001c78:	d1fa      	bne.n	8001c70 <send+0xf0>
   sock_is_sending |= (1 << sn);
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	fa03 f606 	lsl.w	r6, r3, r6
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <send+0x124>)
 8001c82:	881a      	ldrh	r2, [r3, #0]
 8001c84:	4316      	orrs	r6, r2
 8001c86:	801e      	strh	r6, [r3, #0]
   return (int32_t)len;
 8001c88:	4620      	mov	r0, r4
 8001c8a:	e7a9      	b.n	8001be0 <send+0x60>
   CHECK_SOCKNUM();
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001c90:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001c92:	f06f 0004 	mvn.w	r0, #4
 8001c96:	e7a3      	b.n	8001be0 <send+0x60>
   CHECK_SOCKDATA();
 8001c98:	f06f 000d 	mvn.w	r0, #13
 8001c9c:	e7a0      	b.n	8001be0 <send+0x60>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001c9e:	f06f 0006 	mvn.w	r0, #6
 8001ca2:	e79d      	b.n	8001be0 <send+0x60>
 8001ca4:	20000162 	.word	0x20000162
 8001ca8:	20000160 	.word	0x20000160

08001cac <ClrSiS>:

void ClrSiS (uint8_t sn){
	sock_is_sending &= ~(1 << sn);
 8001cac:	2301      	movs	r3, #1
 8001cae:	fa03 f000 	lsl.w	r0, r3, r0
 8001cb2:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <ClrSiS+0x14>)
 8001cb4:	8813      	ldrh	r3, [r2, #0]
 8001cb6:	ea23 0000 	bic.w	r0, r3, r0
 8001cba:	8010      	strh	r0, [r2, #0]
}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000162 	.word	0x20000162

08001cc4 <recv>:
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001cc4:	2808      	cmp	r0, #8
 8001cc6:	d864      	bhi.n	8001d92 <recv+0xce>
{
 8001cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ccc:	4614      	mov	r4, r2
 8001cce:	4689      	mov	r9, r1
 8001cd0:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001cd2:	4607      	mov	r7, r0
 8001cd4:	0085      	lsls	r5, r0, #2
 8001cd6:	3501      	adds	r5, #1
 8001cd8:	00ed      	lsls	r5, r5, #3
 8001cda:	4628      	mov	r0, r5
 8001cdc:	f7ff fc4a 	bl	8001574 <WIZCHIP_READ>
 8001ce0:	f000 000f 	and.w	r0, r0, #15
 8001ce4:	2801      	cmp	r0, #1
 8001ce6:	d157      	bne.n	8001d98 <recv+0xd4>
   CHECK_SOCKDATA();
 8001ce8:	2c00      	cmp	r4, #0
 8001cea:	d058      	beq.n	8001d9e <recv+0xda>
   
   recvsize = getSn_RxMAX(sn);
 8001cec:	f505 50f0 	add.w	r0, r5, #7680	; 0x1e00
 8001cf0:	f7ff fc40 	bl	8001574 <WIZCHIP_READ>
 8001cf4:	fa1f f880 	uxth.w	r8, r0
 8001cf8:	ea4f 2888 	mov.w	r8, r8, lsl #10
 8001cfc:	fa1f f888 	uxth.w	r8, r8
   if(recvsize < len) len = recvsize;
 8001d00:	4544      	cmp	r4, r8
 8001d02:	d80e      	bhi.n	8001d22 <recv+0x5e>
 8001d04:	46a0      	mov	r8, r4
 8001d06:	e00c      	b.n	8001d22 <recv+0x5e>
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
               {
                  close(sn);
 8001d08:	4630      	mov	r0, r6
 8001d0a:	f7ff fdd3 	bl	80018b4 <close>
                  return SOCKERR_SOCKSTATUS;
 8001d0e:	f06f 0006 	mvn.w	r0, #6
 8001d12:	e03c      	b.n	8001d8e <recv+0xca>
               }
            }
            else
            {
               close(sn);
 8001d14:	4630      	mov	r0, r6
 8001d16:	f7ff fdcd 	bl	80018b4 <close>
               return SOCKERR_SOCKSTATUS;
 8001d1a:	f06f 0006 	mvn.w	r0, #6
 8001d1e:	e036      	b.n	8001d8e <recv+0xca>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
         if(recvsize != 0) break;
 8001d20:	bb0c      	cbnz	r4, 8001d66 <recv+0xa2>
         recvsize = getSn_RX_RSR(sn);
 8001d22:	4630      	mov	r0, r6
 8001d24:	f7ff fd39 	bl	800179a <getSn_RX_RSR>
 8001d28:	4604      	mov	r4, r0
         tmp = getSn_SR(sn);
 8001d2a:	f505 7040 	add.w	r0, r5, #768	; 0x300
 8001d2e:	f7ff fc21 	bl	8001574 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
 8001d32:	2817      	cmp	r0, #23
 8001d34:	d00d      	beq.n	8001d52 <recv+0x8e>
            if(tmp == SOCK_CLOSE_WAIT)
 8001d36:	281c      	cmp	r0, #28
 8001d38:	d1ec      	bne.n	8001d14 <recv+0x50>
               if(recvsize != 0) break;
 8001d3a:	b9a4      	cbnz	r4, 8001d66 <recv+0xa2>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001d3c:	4630      	mov	r0, r6
 8001d3e:	f7ff fcfd 	bl	800173c <getSn_TX_FSR>
 8001d42:	4682      	mov	sl, r0
 8001d44:	f505 50f8 	add.w	r0, r5, #7936	; 0x1f00
 8001d48:	f7ff fc14 	bl	8001574 <WIZCHIP_READ>
 8001d4c:	ebba 2f80 	cmp.w	sl, r0, lsl #10
 8001d50:	d0da      	beq.n	8001d08 <recv+0x44>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <recv+0xe0>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	413b      	asrs	r3, r7
 8001d58:	f013 0f01 	tst.w	r3, #1
 8001d5c:	d0e0      	beq.n	8001d20 <recv+0x5c>
 8001d5e:	2c00      	cmp	r4, #0
 8001d60:	d1de      	bne.n	8001d20 <recv+0x5c>
 8001d62:	2000      	movs	r0, #0
 8001d64:	e013      	b.n	8001d8e <recv+0xca>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001d66:	4544      	cmp	r4, r8
 8001d68:	d300      	bcc.n	8001d6c <recv+0xa8>
 8001d6a:	4644      	mov	r4, r8
   wiz_recv_data(sn, buf, len);
 8001d6c:	4622      	mov	r2, r4
 8001d6e:	4649      	mov	r1, r9
 8001d70:	4630      	mov	r0, r6
 8001d72:	f7ff fd70 	bl	8001856 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8001d76:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8001d7a:	2140      	movs	r1, #64	; 0x40
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	f7ff fc2b 	bl	80015d8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001d82:	4628      	mov	r0, r5
 8001d84:	f7ff fbf6 	bl	8001574 <WIZCHIP_READ>
 8001d88:	2800      	cmp	r0, #0
 8001d8a:	d1fa      	bne.n	8001d82 <recv+0xbe>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001d8c:	4620      	mov	r0, r4
}
 8001d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   CHECK_SOCKNUM();
 8001d92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001d96:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001d98:	f06f 0004 	mvn.w	r0, #4
 8001d9c:	e7f7      	b.n	8001d8e <recv+0xca>
   CHECK_SOCKDATA();
 8001d9e:	f06f 000d 	mvn.w	r0, #13
 8001da2:	e7f4      	b.n	8001d8e <recv+0xca>
 8001da4:	20000160 	.word	0x20000160

08001da8 <getsockopt>:
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
   CHECK_SOCKNUM();
 8001da8:	2808      	cmp	r0, #8
 8001daa:	f200 80a3 	bhi.w	8001ef4 <getsockopt+0x14c>
{
 8001dae:	b570      	push	{r4, r5, r6, lr}
 8001db0:	4615      	mov	r5, r2
 8001db2:	4604      	mov	r4, r0
   switch(sotype)
 8001db4:	290c      	cmp	r1, #12
 8001db6:	f200 80a0 	bhi.w	8001efa <getsockopt+0x152>
 8001dba:	e8df f001 	tbb	[pc, r1]
 8001dbe:	1107      	.short	0x1107
 8001dc0:	4338251b 	.word	0x4338251b
 8001dc4:	6c67569e 	.word	0x6c67569e
 8001dc8:	7b71      	.short	0x7b71
 8001dca:	8f          	.byte	0x8f
 8001dcb:	00          	.byte	0x00
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8001dcc:	0080      	lsls	r0, r0, #2
 8001dce:	3001      	adds	r0, #1
 8001dd0:	00c0      	lsls	r0, r0, #3
 8001dd2:	f7ff fbcf 	bl	8001574 <WIZCHIP_READ>
 8001dd6:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8001dda:	7028      	strb	r0, [r5, #0]
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
 8001ddc:	2001      	movs	r0, #1
}
 8001dde:	bd70      	pop	{r4, r5, r6, pc}
         *(uint8_t*) arg = getSn_TTL(sn);
 8001de0:	0080      	lsls	r0, r0, #2
 8001de2:	3001      	adds	r0, #1
 8001de4:	00c0      	lsls	r0, r0, #3
 8001de6:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
 8001dea:	f7ff fbc3 	bl	8001574 <WIZCHIP_READ>
 8001dee:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001df0:	2001      	movs	r0, #1
         break;
 8001df2:	e7f4      	b.n	8001dde <getsockopt+0x36>
         *(uint8_t*) arg = getSn_TOS(sn);
 8001df4:	0080      	lsls	r0, r0, #2
 8001df6:	3001      	adds	r0, #1
 8001df8:	00c0      	lsls	r0, r0, #3
 8001dfa:	f500 50a8 	add.w	r0, r0, #5376	; 0x1500
 8001dfe:	f7ff fbb9 	bl	8001574 <WIZCHIP_READ>
 8001e02:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001e04:	2001      	movs	r0, #1
         break;
 8001e06:	e7ea      	b.n	8001dde <getsockopt+0x36>
         *(uint16_t*) arg = getSn_MSSR(sn);
 8001e08:	0084      	lsls	r4, r0, #2
 8001e0a:	3401      	adds	r4, #1
 8001e0c:	00e4      	lsls	r4, r4, #3
 8001e0e:	f504 5090 	add.w	r0, r4, #4608	; 0x1200
 8001e12:	f7ff fbaf 	bl	8001574 <WIZCHIP_READ>
 8001e16:	b286      	uxth	r6, r0
 8001e18:	0236      	lsls	r6, r6, #8
 8001e1a:	b2b6      	uxth	r6, r6
 8001e1c:	f504 5098 	add.w	r0, r4, #4864	; 0x1300
 8001e20:	f7ff fba8 	bl	8001574 <WIZCHIP_READ>
 8001e24:	fa16 f080 	uxtah	r0, r6, r0
 8001e28:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001e2a:	2001      	movs	r0, #1
         break;
 8001e2c:	e7d7      	b.n	8001dde <getsockopt+0x36>
         getSn_DIPR(sn, (uint8_t*)arg);
 8001e2e:	0080      	lsls	r0, r0, #2
 8001e30:	3001      	adds	r0, #1
 8001e32:	00c0      	lsls	r0, r0, #3
 8001e34:	2204      	movs	r2, #4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8001e3c:	f7ff fc00 	bl	8001640 <WIZCHIP_READ_BUF>
   return SOCK_OK;
 8001e40:	2001      	movs	r0, #1
         break;
 8001e42:	e7cc      	b.n	8001dde <getsockopt+0x36>
         *(uint16_t*) arg = getSn_DPORT(sn);
 8001e44:	0084      	lsls	r4, r0, #2
 8001e46:	3401      	adds	r4, #1
 8001e48:	00e4      	lsls	r4, r4, #3
 8001e4a:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 8001e4e:	f7ff fb91 	bl	8001574 <WIZCHIP_READ>
 8001e52:	b286      	uxth	r6, r0
 8001e54:	0236      	lsls	r6, r6, #8
 8001e56:	b2b6      	uxth	r6, r6
 8001e58:	f504 5088 	add.w	r0, r4, #4352	; 0x1100
 8001e5c:	f7ff fb8a 	bl	8001574 <WIZCHIP_READ>
 8001e60:	fa16 f080 	uxtah	r0, r6, r0
 8001e64:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001e66:	2001      	movs	r0, #1
         break;
 8001e68:	e7b9      	b.n	8001dde <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 8001e6a:	0084      	lsls	r4, r0, #2
 8001e6c:	3401      	adds	r4, #1
 8001e6e:	00e4      	lsls	r4, r4, #3
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff fb7f 	bl	8001574 <WIZCHIP_READ>
 8001e76:	f000 000f 	and.w	r0, r0, #15
 8001e7a:	2801      	cmp	r0, #1
 8001e7c:	d140      	bne.n	8001f00 <getsockopt+0x158>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8001e7e:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
 8001e82:	f7ff fb77 	bl	8001574 <WIZCHIP_READ>
 8001e86:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001e88:	2001      	movs	r0, #1
         break;
 8001e8a:	e7a8      	b.n	8001dde <getsockopt+0x36>
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 8001e8c:	f7ff fc56 	bl	800173c <getSn_TX_FSR>
 8001e90:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001e92:	2001      	movs	r0, #1
         break;
 8001e94:	e7a3      	b.n	8001dde <getsockopt+0x36>
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 8001e96:	f7ff fc80 	bl	800179a <getSn_RX_RSR>
 8001e9a:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001e9c:	2001      	movs	r0, #1
         break;
 8001e9e:	e79e      	b.n	8001dde <getsockopt+0x36>
         *(uint8_t*) arg = getSn_SR(sn);
 8001ea0:	0080      	lsls	r0, r0, #2
 8001ea2:	3001      	adds	r0, #1
 8001ea4:	00c0      	lsls	r0, r0, #3
 8001ea6:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8001eaa:	f7ff fb63 	bl	8001574 <WIZCHIP_READ>
 8001eae:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001eb0:	2001      	movs	r0, #1
         break;
 8001eb2:	e794      	b.n	8001dde <getsockopt+0x36>
         if(getSn_MR(sn) & Sn_MR_TCP)
 8001eb4:	0080      	lsls	r0, r0, #2
 8001eb6:	3001      	adds	r0, #1
 8001eb8:	00c0      	lsls	r0, r0, #3
 8001eba:	f7ff fb5b 	bl	8001574 <WIZCHIP_READ>
 8001ebe:	f010 0f01 	tst.w	r0, #1
 8001ec2:	d105      	bne.n	8001ed0 <getsockopt+0x128>
            *(uint16_t*)arg = sock_remained_size[sn];
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <getsockopt+0x164>)
 8001ec6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001eca:	802b      	strh	r3, [r5, #0]
   return SOCK_OK;
 8001ecc:	2001      	movs	r0, #1
 8001ece:	e786      	b.n	8001dde <getsockopt+0x36>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff fc62 	bl	800179a <getSn_RX_RSR>
 8001ed6:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001ed8:	2001      	movs	r0, #1
 8001eda:	e780      	b.n	8001dde <getsockopt+0x36>
         if((getSn_MR(sn) == Sn_MR_TCP))
 8001edc:	0080      	lsls	r0, r0, #2
 8001ede:	3001      	adds	r0, #1
 8001ee0:	00c0      	lsls	r0, r0, #3
 8001ee2:	f7ff fb47 	bl	8001574 <WIZCHIP_READ>
 8001ee6:	2801      	cmp	r0, #1
 8001ee8:	d00d      	beq.n	8001f06 <getsockopt+0x15e>
         *(uint8_t*)arg = sock_pack_info[sn];
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <getsockopt+0x168>)
 8001eec:	5d1b      	ldrb	r3, [r3, r4]
 8001eee:	702b      	strb	r3, [r5, #0]
   return SOCK_OK;
 8001ef0:	2001      	movs	r0, #1
         break;
 8001ef2:	e774      	b.n	8001dde <getsockopt+0x36>
   CHECK_SOCKNUM();
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001ef8:	4770      	bx	lr
         return SOCKERR_SOCKOPT;
 8001efa:	f06f 0001 	mvn.w	r0, #1
 8001efe:	e76e      	b.n	8001dde <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 8001f00:	f06f 0004 	mvn.w	r0, #4
 8001f04:	e76b      	b.n	8001dde <getsockopt+0x36>
             return SOCKERR_SOCKMODE;
 8001f06:	f06f 0004 	mvn.w	r0, #4
 8001f0a:	e768      	b.n	8001dde <getsockopt+0x36>
 8001f0c:	2000016c 	.word	0x2000016c
 8001f10:	20000164 	.word	0x20000164

08001f14 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001f14:	4770      	bx	lr

08001f16 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001f16:	4770      	bx	lr

08001f18 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001f18:	4770      	bx	lr

08001f1a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001f1a:	4770      	bx	lr

08001f1c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001f1c:	7800      	ldrb	r0, [r0, #0]
 8001f1e:	4770      	bx	lr

08001f20 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001f20:	7001      	strb	r1, [r0, #0]
 8001f22:	4770      	bx	lr

08001f24 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001f24:	2000      	movs	r0, #0
 8001f26:	4770      	bx	lr

08001f28 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001f28:	4770      	bx	lr

08001f2a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8001f2a:	4770      	bx	lr

08001f2c <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001f2c:	4770      	bx	lr
	...

08001f30 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 8001f30:	b120      	cbz	r0, 8001f3c <reg_wizchip_cs_cbfunc+0xc>
 8001f32:	b119      	cbz	r1, 8001f3c <reg_wizchip_cs_cbfunc+0xc>
      WIZCHIP.CS._select   = wizchip_cs_select;
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <reg_wizchip_cs_cbfunc+0x18>)
 8001f36:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001f38:	6199      	str	r1, [r3, #24]
   }
}
 8001f3a:	4770      	bx	lr
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001f3c:	4b02      	ldr	r3, [pc, #8]	; (8001f48 <reg_wizchip_cs_cbfunc+0x18>)
 8001f3e:	4a03      	ldr	r2, [pc, #12]	; (8001f4c <reg_wizchip_cs_cbfunc+0x1c>)
 8001f40:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001f42:	4a03      	ldr	r2, [pc, #12]	; (8001f50 <reg_wizchip_cs_cbfunc+0x20>)
 8001f44:	619a      	str	r2, [r3, #24]
 8001f46:	4770      	bx	lr
 8001f48:	20000004 	.word	0x20000004
 8001f4c:	08001f19 	.word	0x08001f19
 8001f50:	08001f1b 	.word	0x08001f1b

08001f54 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <reg_wizchip_spi_cbfunc+0x24>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001f5c:	d0fa      	beq.n	8001f54 <reg_wizchip_spi_cbfunc>
   
   if(!spi_rb || !spi_wb)
 8001f5e:	b120      	cbz	r0, 8001f6a <reg_wizchip_spi_cbfunc+0x16>
 8001f60:	b119      	cbz	r1, 8001f6a <reg_wizchip_spi_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <reg_wizchip_spi_cbfunc+0x24>)
 8001f64:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001f66:	6219      	str	r1, [r3, #32]
   }
}
 8001f68:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001f6a:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <reg_wizchip_spi_cbfunc+0x24>)
 8001f6c:	4a03      	ldr	r2, [pc, #12]	; (8001f7c <reg_wizchip_spi_cbfunc+0x28>)
 8001f6e:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001f70:	4a03      	ldr	r2, [pc, #12]	; (8001f80 <reg_wizchip_spi_cbfunc+0x2c>)
 8001f72:	621a      	str	r2, [r3, #32]
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000004 	.word	0x20000004
 8001f7c:	08001f25 	.word	0x08001f25
 8001f80:	08001f29 	.word	0x08001f29

08001f84 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <reg_wizchip_spiburst_cbfunc+0x24>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001f8c:	d0fa      	beq.n	8001f84 <reg_wizchip_spiburst_cbfunc>

   if(!spi_rb || !spi_wb)
 8001f8e:	b120      	cbz	r0, 8001f9a <reg_wizchip_spiburst_cbfunc+0x16>
 8001f90:	b119      	cbz	r1, 8001f9a <reg_wizchip_spiburst_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <reg_wizchip_spiburst_cbfunc+0x24>)
 8001f94:	6258      	str	r0, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001f96:	6299      	str	r1, [r3, #40]	; 0x28
   }
}
 8001f98:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001f9a:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <reg_wizchip_spiburst_cbfunc+0x24>)
 8001f9c:	4a03      	ldr	r2, [pc, #12]	; (8001fac <reg_wizchip_spiburst_cbfunc+0x28>)
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8001fa0:	4a03      	ldr	r2, [pc, #12]	; (8001fb0 <reg_wizchip_spiburst_cbfunc+0x2c>)
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000004 	.word	0x20000004
 8001fac:	08001f2b 	.word	0x08001f2b
 8001fb0:	08001f2d 	.word	0x08001f2d

08001fb4 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001fb4:	b500      	push	{lr}
 8001fb6:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001fb8:	2206      	movs	r2, #6
 8001fba:	a901      	add	r1, sp, #4
 8001fbc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001fc0:	f7ff fb3e 	bl	8001640 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	a905      	add	r1, sp, #20
 8001fc8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fcc:	f7ff fb38 	bl	8001640 <WIZCHIP_READ_BUF>
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	a904      	add	r1, sp, #16
 8001fd4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001fd8:	f7ff fb32 	bl	8001640 <WIZCHIP_READ_BUF>
 8001fdc:	2204      	movs	r2, #4
 8001fde:	a903      	add	r1, sp, #12
 8001fe0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001fe4:	f7ff fb2c 	bl	8001640 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001fe8:	2180      	movs	r1, #128	; 0x80
 8001fea:	2000      	movs	r0, #0
 8001fec:	f7ff faf4 	bl	80015d8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7ff fabf 	bl	8001574 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001ff6:	2206      	movs	r2, #6
 8001ff8:	a901      	add	r1, sp, #4
 8001ffa:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001ffe:	f7ff fb5f 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002002:	2204      	movs	r2, #4
 8002004:	a905      	add	r1, sp, #20
 8002006:	f44f 7080 	mov.w	r0, #256	; 0x100
 800200a:	f7ff fb59 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800200e:	2204      	movs	r2, #4
 8002010:	a904      	add	r1, sp, #16
 8002012:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002016:	f7ff fb53 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800201a:	2204      	movs	r2, #4
 800201c:	a903      	add	r1, sp, #12
 800201e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002022:	f7ff fb4d 	bl	80016c0 <WIZCHIP_WRITE_BUF>
}
 8002026:	b007      	add	sp, #28
 8002028:	f85d fb04 	ldr.w	pc, [sp], #4

0800202c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	4605      	mov	r5, r0
 8002030:	460e      	mov	r6, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8002032:	f7ff ffbf 	bl	8001fb4 <wizchip_sw_reset>
   if(txsize)
 8002036:	b1cd      	cbz	r5, 800206c <wizchip_init+0x40>
   {
      tmp = 0;
 8002038:	2200      	movs	r2, #0
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800203a:	4613      	mov	r3, r2
 800203c:	2b07      	cmp	r3, #7
 800203e:	dc07      	bgt.n	8002050 <wizchip_init+0x24>
		{
			tmp += txsize[i];
 8002040:	5ce9      	ldrb	r1, [r5, r3]
 8002042:	440a      	add	r2, r1
 8002044:	b252      	sxtb	r2, r2

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002046:	2a10      	cmp	r2, #16
 8002048:	dc2f      	bgt.n	80020aa <wizchip_init+0x7e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800204a:	3301      	adds	r3, #1
 800204c:	b25b      	sxtb	r3, r3
 800204e:	e7f5      	b.n	800203c <wizchip_init+0x10>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002050:	2400      	movs	r4, #0
 8002052:	e009      	b.n	8002068 <wizchip_init+0x3c>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002054:	00a0      	lsls	r0, r4, #2
 8002056:	3001      	adds	r0, #1
 8002058:	00c0      	lsls	r0, r0, #3
 800205a:	5d29      	ldrb	r1, [r5, r4]
 800205c:	f500 50f8 	add.w	r0, r0, #7936	; 0x1f00
 8002060:	f7ff faba 	bl	80015d8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002064:	3401      	adds	r4, #1
 8002066:	b264      	sxtb	r4, r4
 8002068:	2c07      	cmp	r4, #7
 800206a:	ddf3      	ble.n	8002054 <wizchip_init+0x28>
		}

	#endif
   }

   if(rxsize)
 800206c:	b15e      	cbz	r6, 8002086 <wizchip_init+0x5a>
   {
      tmp = 0;
 800206e:	2200      	movs	r2, #0
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002070:	4613      	mov	r3, r2
 8002072:	2b07      	cmp	r3, #7
 8002074:	dc09      	bgt.n	800208a <wizchip_init+0x5e>
		{
			tmp += rxsize[i];
 8002076:	5cf1      	ldrb	r1, [r6, r3]
 8002078:	440a      	add	r2, r1
 800207a:	b252      	sxtb	r2, r2
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800207c:	2a10      	cmp	r2, #16
 800207e:	dc17      	bgt.n	80020b0 <wizchip_init+0x84>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002080:	3301      	adds	r3, #1
 8002082:	b25b      	sxtb	r3, r3
 8002084:	e7f5      	b.n	8002072 <wizchip_init+0x46>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 8002086:	2000      	movs	r0, #0
 8002088:	e00e      	b.n	80020a8 <wizchip_init+0x7c>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800208a:	2400      	movs	r4, #0
 800208c:	e009      	b.n	80020a2 <wizchip_init+0x76>
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800208e:	00a0      	lsls	r0, r4, #2
 8002090:	3001      	adds	r0, #1
 8002092:	00c0      	lsls	r0, r0, #3
 8002094:	5d31      	ldrb	r1, [r6, r4]
 8002096:	f500 50f0 	add.w	r0, r0, #7680	; 0x1e00
 800209a:	f7ff fa9d 	bl	80015d8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800209e:	3401      	adds	r4, #1
 80020a0:	b264      	sxtb	r4, r4
 80020a2:	2c07      	cmp	r4, #7
 80020a4:	ddf3      	ble.n	800208e <wizchip_init+0x62>
   return 0;
 80020a6:	2000      	movs	r0, #0
}
 80020a8:	bd70      	pop	{r4, r5, r6, pc}
			if(tmp > 16) return -1;
 80020aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020ae:	e7fb      	b.n	80020a8 <wizchip_init+0x7c>
			if(tmp > 16) return -1;
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020b4:	e7f8      	b.n	80020a8 <wizchip_init+0x7c>

080020b6 <wizchip_getinterrupt>:

#endif   
}

intr_kind wizchip_getinterrupt(void)
{
 80020b6:	b510      	push	{r4, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80020b8:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80020bc:	f7ff fa5a 	bl	8001574 <WIZCHIP_READ>
 80020c0:	f000 04f0 	and.w	r4, r0, #240	; 0xf0
   sir = getSIR();
 80020c4:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80020c8:	f7ff fa54 	bl	8001574 <WIZCHIP_READ>
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80020cc:	b280      	uxth	r0, r0
  ret = (ret << 8) + ir;
 80020ce:	0200      	lsls	r0, r0, #8
 80020d0:	b280      	uxth	r0, r0
 80020d2:	4420      	add	r0, r4
 80020d4:	b280      	uxth	r0, r0
  return (intr_kind)ret;
}
 80020d6:	bd10      	pop	{r4, pc}

080020d8 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80020d8:	b510      	push	{r4, lr}
   uint8_t imr  = (uint8_t)intr;
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80020da:	0a04      	lsrs	r4, r0, #8
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80020dc:	b2c1      	uxtb	r1, r0
 80020de:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80020e2:	f7ff fa79 	bl	80015d8 <WIZCHIP_WRITE>
   setSIMR(simr);
 80020e6:	4621      	mov	r1, r4
 80020e8:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80020ec:	f7ff fa74 	bl	80015d8 <WIZCHIP_WRITE>
#endif   
}
 80020f0:	bd10      	pop	{r4, pc}
	...

080020f4 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80020f4:	b510      	push	{r4, lr}
 80020f6:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 80020f8:	2206      	movs	r2, #6
 80020fa:	4601      	mov	r1, r0
 80020fc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002100:	f7ff fade 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002104:	2204      	movs	r2, #4
 8002106:	f104 010e 	add.w	r1, r4, #14
 800210a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800210e:	f7ff fad7 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002112:	2204      	movs	r2, #4
 8002114:	f104 010a 	add.w	r1, r4, #10
 8002118:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800211c:	f7ff fad0 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002120:	2204      	movs	r2, #4
 8002122:	1da1      	adds	r1, r4, #6
 8002124:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002128:	f7ff faca 	bl	80016c0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800212c:	7ca2      	ldrb	r2, [r4, #18]
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <wizchip_setnetinfo+0x54>)
 8002130:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002132:	7ce2      	ldrb	r2, [r4, #19]
 8002134:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002136:	7d22      	ldrb	r2, [r4, #20]
 8002138:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800213a:	7d62      	ldrb	r2, [r4, #21]
 800213c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800213e:	7da2      	ldrb	r2, [r4, #22]
 8002140:	4b02      	ldr	r3, [pc, #8]	; (800214c <wizchip_setnetinfo+0x58>)
 8002142:	701a      	strb	r2, [r3, #0]
}
 8002144:	bd10      	pop	{r4, pc}
 8002146:	bf00      	nop
 8002148:	20000180 	.word	0x20000180
 800214c:	2000017c 	.word	0x2000017c

08002150 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002150:	b510      	push	{r4, lr}
 8002152:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 8002154:	2206      	movs	r2, #6
 8002156:	4601      	mov	r1, r0
 8002158:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800215c:	f7ff fa70 	bl	8001640 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002160:	2204      	movs	r2, #4
 8002162:	f104 010e 	add.w	r1, r4, #14
 8002166:	f44f 7080 	mov.w	r0, #256	; 0x100
 800216a:	f7ff fa69 	bl	8001640 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800216e:	2204      	movs	r2, #4
 8002170:	f104 010a 	add.w	r1, r4, #10
 8002174:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002178:	f7ff fa62 	bl	8001640 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800217c:	2204      	movs	r2, #4
 800217e:	1da1      	adds	r1, r4, #6
 8002180:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002184:	f7ff fa5c 	bl	8001640 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <wizchip_getnetinfo+0x54>)
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800218e:	785a      	ldrb	r2, [r3, #1]
 8002190:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002192:	789a      	ldrb	r2, [r3, #2]
 8002194:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002196:	78db      	ldrb	r3, [r3, #3]
 8002198:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 800219a:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <wizchip_getnetinfo+0x58>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	75a3      	strb	r3, [r4, #22]
}
 80021a0:	bd10      	pop	{r4, pc}
 80021a2:	bf00      	nop
 80021a4:	20000180 	.word	0x20000180
 80021a8:	2000017c 	.word	0x2000017c

080021ac <mcp23017_init>:

#define I2C_TIMEOUT		10

void mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c, uint16_t addr)
{
	hdev->hi2c = hi2c;
 80021ac:	6001      	str	r1, [r0, #0]
	hdev->addr = addr << 1;
 80021ae:	0052      	lsls	r2, r2, #1
 80021b0:	8082      	strh	r2, [r0, #4]
}
 80021b2:	4770      	bx	lr

080021b4 <mcp23017_read>:

HAL_StatusTypeDef mcp23017_read(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 80021b4:	b510      	push	{r4, lr}
 80021b6:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Read(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 80021b8:	8884      	ldrh	r4, [r0, #4]
 80021ba:	6800      	ldr	r0, [r0, #0]
 80021bc:	230a      	movs	r3, #10
 80021be:	9302      	str	r3, [sp, #8]
 80021c0:	2301      	movs	r3, #1
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	9200      	str	r2, [sp, #0]
 80021c6:	460a      	mov	r2, r1
 80021c8:	4621      	mov	r1, r4
 80021ca:	f004 f9f3 	bl	80065b4 <HAL_I2C_Mem_Read>
}
 80021ce:	b004      	add	sp, #16
 80021d0:	bd10      	pop	{r4, pc}

080021d2 <mcp23017_write>:

HAL_StatusTypeDef mcp23017_write(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 80021d2:	b510      	push	{r4, lr}
 80021d4:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Write(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 80021d6:	8884      	ldrh	r4, [r0, #4]
 80021d8:	6800      	ldr	r0, [r0, #0]
 80021da:	230a      	movs	r3, #10
 80021dc:	9302      	str	r3, [sp, #8]
 80021de:	2301      	movs	r3, #1
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	9200      	str	r2, [sp, #0]
 80021e4:	460a      	mov	r2, r1
 80021e6:	4621      	mov	r1, r4
 80021e8:	f004 f930 	bl	800644c <HAL_I2C_Mem_Write>
}
 80021ec:	b004      	add	sp, #16
 80021ee:	bd10      	pop	{r4, pc}

080021f0 <mcp23017_iodir>:

HAL_StatusTypeDef mcp23017_iodir(MCP23017_HandleTypeDef *hdev, uint8_t port, uint8_t iodir)
{
 80021f0:	b500      	push	{lr}
 80021f2:	b083      	sub	sp, #12
	uint8_t data[1] = {iodir};
 80021f4:	ab02      	add	r3, sp, #8
 80021f6:	f803 2d04 	strb.w	r2, [r3, #-4]!
	return mcp23017_write(hdev, REGISTER_IODIRA|port, data);
 80021fa:	461a      	mov	r2, r3
 80021fc:	f7ff ffe9 	bl	80021d2 <mcp23017_write>
}
 8002200:	b003      	add	sp, #12
 8002202:	f85d fb04 	ldr.w	pc, [sp], #4

08002206 <mcp23017_read_gpio>:
	uint8_t data[1] = {pu};
	return mcp23017_write(hdev, REGISTER_GPPUA|port, data);
}

HAL_StatusTypeDef mcp23017_read_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 8002206:	b530      	push	{r4, r5, lr}
 8002208:	b083      	sub	sp, #12
 800220a:	4604      	mov	r4, r0
 800220c:	460d      	mov	r5, r1
	uint8_t data[1];
	HAL_StatusTypeDef status;
	status = mcp23017_read(hdev, REGISTER_GPIOA|port, data);
 800220e:	aa01      	add	r2, sp, #4
 8002210:	f041 0112 	orr.w	r1, r1, #18
 8002214:	f7ff ffce 	bl	80021b4 <mcp23017_read>
	if (status == HAL_OK)
 8002218:	4603      	mov	r3, r0
 800221a:	b918      	cbnz	r0, 8002224 <mcp23017_read_gpio+0x1e>
		hdev->gpio[port] = data[0];
 800221c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002220:	442c      	add	r4, r5
 8002222:	71a2      	strb	r2, [r4, #6]
	return status;
}
 8002224:	4618      	mov	r0, r3
 8002226:	b003      	add	sp, #12
 8002228:	bd30      	pop	{r4, r5, pc}

0800222a <mcp23017_write_gpio>:

HAL_StatusTypeDef mcp23017_write_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 800222a:	b500      	push	{lr}
 800222c:	b083      	sub	sp, #12
	uint8_t data[1] = {hdev->gpio[port]};
 800222e:	1843      	adds	r3, r0, r1
 8002230:	799b      	ldrb	r3, [r3, #6]
 8002232:	aa02      	add	r2, sp, #8
 8002234:	f802 3d04 	strb.w	r3, [r2, #-4]!
	return mcp23017_write(hdev, REGISTER_GPIOA|port, data);
 8002238:	f041 0112 	orr.w	r1, r1, #18
 800223c:	f7ff ffc9 	bl	80021d2 <mcp23017_write>
}
 8002240:	b003      	add	sp, #12
 8002242:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002248 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8002248:	b500      	push	{lr}
 800224a:	b087      	sub	sp, #28
 800224c:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8002250:	2364      	movs	r3, #100	; 0x64
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	f10d 0217 	add.w	r2, sp, #23
 800225a:	f10d 010f 	add.w	r1, sp, #15
 800225e:	4804      	ldr	r0, [pc, #16]	; (8002270 <W25qxx_Spi+0x28>)
 8002260:	f005 fab1 	bl	80077c6 <HAL_SPI_TransmitReceive>
	return ret;	
}
 8002264:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002268:	b007      	add	sp, #28
 800226a:	f85d fb04 	ldr.w	pc, [sp], #4
 800226e:	bf00      	nop
 8002270:	20003354 	.word	0x20003354

08002274 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002274:	b570      	push	{r4, r5, r6, lr}
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
  FLASH_SELECT;
 8002276:	f000 fa63 	bl	8002740 <FLASH_ChipSelect>
  W25qxx_Spi(0x9F);
 800227a:	209f      	movs	r0, #159	; 0x9f
 800227c:	f7ff ffe4 	bl	8002248 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002280:	20a5      	movs	r0, #165	; 0xa5
 8002282:	f7ff ffe1 	bl	8002248 <W25qxx_Spi>
 8002286:	4606      	mov	r6, r0
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002288:	20a5      	movs	r0, #165	; 0xa5
 800228a:	f7ff ffdd 	bl	8002248 <W25qxx_Spi>
 800228e:	4604      	mov	r4, r0
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002290:	20a5      	movs	r0, #165	; 0xa5
 8002292:	f7ff ffd9 	bl	8002248 <W25qxx_Spi>
 8002296:	4605      	mov	r5, r0
  FLASH_DESELECT;
 8002298:	f000 fa64 	bl	8002764 <FLASH_ChipDeselect>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800229c:	0220      	lsls	r0, r4, #8
 800229e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
  return Temp;
}
 80022a2:	4328      	orrs	r0, r5
 80022a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080022a8 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80022a8:	b510      	push	{r4, lr}
  FLASH_SELECT;
 80022aa:	f000 fa49 	bl	8002740 <FLASH_ChipSelect>
  W25qxx_Spi(0x4B);
 80022ae:	204b      	movs	r0, #75	; 0x4b
 80022b0:	f7ff ffca 	bl	8002248 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80022b4:	2400      	movs	r4, #0
 80022b6:	e004      	b.n	80022c2 <W25qxx_ReadUniqID+0x1a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022b8:	20a5      	movs	r0, #165	; 0xa5
 80022ba:	f7ff ffc5 	bl	8002248 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80022be:	3401      	adds	r4, #1
 80022c0:	b2e4      	uxtb	r4, r4
 80022c2:	2c03      	cmp	r4, #3
 80022c4:	d9f8      	bls.n	80022b8 <W25qxx_ReadUniqID+0x10>
	for(uint8_t	i=0;i<8;i++)
 80022c6:	2400      	movs	r4, #0
 80022c8:	e007      	b.n	80022da <W25qxx_ReadUniqID+0x32>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022ca:	20a5      	movs	r0, #165	; 0xa5
 80022cc:	f7ff ffbc 	bl	8002248 <W25qxx_Spi>
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <W25qxx_ReadUniqID+0x3c>)
 80022d2:	4423      	add	r3, r4
 80022d4:	7058      	strb	r0, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 80022d6:	3401      	adds	r4, #1
 80022d8:	b2e4      	uxtb	r4, r4
 80022da:	2c07      	cmp	r4, #7
 80022dc:	d9f5      	bls.n	80022ca <W25qxx_ReadUniqID+0x22>
  FLASH_DESELECT;
 80022de:	f000 fa41 	bl	8002764 <FLASH_ChipDeselect>
}
 80022e2:	bd10      	pop	{r4, pc}
 80022e4:	20002ac8 	.word	0x20002ac8

080022e8 <W25qxx_ReadStatusRegister>:
  FLASH_DESELECT;
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 80022e8:	b510      	push	{r4, lr}
 80022ea:	4604      	mov	r4, r0
	uint8_t	status=0;
	FLASH_SELECT;
 80022ec:	f000 fa28 	bl	8002740 <FLASH_ChipSelect>
	if(SelectStatusRegister_1_2_3==1)
 80022f0:	2c01      	cmp	r4, #1
 80022f2:	d00f      	beq.n	8002314 <W25qxx_ReadStatusRegister+0x2c>
	{
		W25qxx_Spi(0x05);
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister1 = status;
	}
	else if(SelectStatusRegister_1_2_3==2)
 80022f4:	2c02      	cmp	r4, #2
 80022f6:	d018      	beq.n	800232a <W25qxx_ReadStatusRegister+0x42>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister2 = status;
	}
	else
	{
		W25qxx_Spi(0x15);
 80022f8:	2015      	movs	r0, #21
 80022fa:	f7ff ffa5 	bl	8002248 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80022fe:	20a5      	movs	r0, #165	; 0xa5
 8002300:	f7ff ffa2 	bl	8002248 <W25qxx_Spi>
 8002304:	4604      	mov	r4, r0
		w25qxx.StatusRegister3 = status;
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <W25qxx_ReadStatusRegister+0x58>)
 8002308:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	}	
	FLASH_DESELECT;
 800230c:	f000 fa2a 	bl	8002764 <FLASH_ChipDeselect>
	return status;
}
 8002310:	4620      	mov	r0, r4
 8002312:	bd10      	pop	{r4, pc}
		W25qxx_Spi(0x05);
 8002314:	2005      	movs	r0, #5
 8002316:	f7ff ff97 	bl	8002248 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 800231a:	20a5      	movs	r0, #165	; 0xa5
 800231c:	f7ff ff94 	bl	8002248 <W25qxx_Spi>
 8002320:	4604      	mov	r4, r0
		w25qxx.StatusRegister1 = status;
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <W25qxx_ReadStatusRegister+0x58>)
 8002324:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
 8002328:	e7f0      	b.n	800230c <W25qxx_ReadStatusRegister+0x24>
		W25qxx_Spi(0x35);
 800232a:	2035      	movs	r0, #53	; 0x35
 800232c:	f7ff ff8c 	bl	8002248 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8002330:	20a5      	movs	r0, #165	; 0xa5
 8002332:	f7ff ff89 	bl	8002248 <W25qxx_Spi>
 8002336:	4604      	mov	r4, r0
		w25qxx.StatusRegister2 = status;
 8002338:	4b01      	ldr	r3, [pc, #4]	; (8002340 <W25qxx_ReadStatusRegister+0x58>)
 800233a:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
 800233e:	e7e5      	b.n	800230c <W25qxx_ReadStatusRegister+0x24>
 8002340:	20002ac8 	.word	0x20002ac8

08002344 <W25qxx_Init>:
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 FLASH_DESELECT;
}
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8002344:	b510      	push	{r4, lr}
	w25qxx.Lock=1;	
 8002346:	4b42      	ldr	r3, [pc, #264]	; (8002450 <W25qxx_Init+0x10c>)
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 800234e:	e002      	b.n	8002356 <W25qxx_Init+0x12>
		W25qxx_Delay(1);
 8002350:	2001      	movs	r0, #1
 8002352:	f006 fba0 	bl	8008a96 <osDelay>
	while(HAL_GetTick()<100)
 8002356:	f002 fff1 	bl	800533c <HAL_GetTick>
 800235a:	2863      	cmp	r0, #99	; 0x63
 800235c:	d9f8      	bls.n	8002350 <W25qxx_Init+0xc>
  FLASH_DESELECT;
 800235e:	f000 fa01 	bl	8002764 <FLASH_ChipDeselect>
  W25qxx_Delay(100);
 8002362:	2064      	movs	r0, #100	; 0x64
 8002364:	f006 fb97 	bl	8008a96 <osDelay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 8002368:	f7ff ff84 	bl	8002274 <W25qxx_ReadID>
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 800236c:	b280      	uxth	r0, r0
 800236e:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8002372:	3811      	subs	r0, #17
 8002374:	2809      	cmp	r0, #9
 8002376:	d866      	bhi.n	8002446 <W25qxx_Init+0x102>
 8002378:	e8df f000 	tbb	[pc, r0]
 800237c:	4d53595f 	.word	0x4d53595f
 8002380:	343b4147 	.word	0x343b4147
 8002384:	052d      	.short	0x052d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8002386:	4b32      	ldr	r3, [pc, #200]	; (8002450 <W25qxx_Init+0x10c>)
 8002388:	220a      	movs	r2, #10
 800238a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 800238c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002390:	61da      	str	r2, [r3, #28]
				#endif
			w25qxx.Lock=0;	
			return false;
				
	}		
	w25qxx.PageSize=256;
 8002392:	4c2f      	ldr	r4, [pc, #188]	; (8002450 <W25qxx_Init+0x10c>)
 8002394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002398:	8163      	strh	r3, [r4, #10]
	w25qxx.SectorSize=0x1000;
 800239a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800239e:	6123      	str	r3, [r4, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 80023a0:	69e3      	ldr	r3, [r4, #28]
 80023a2:	011a      	lsls	r2, r3, #4
 80023a4:	6162      	str	r2, [r4, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 80023a6:	041b      	lsls	r3, r3, #16
 80023a8:	0a1a      	lsrs	r2, r3, #8
 80023aa:	60e2      	str	r2, [r4, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 80023ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023b0:	61a2      	str	r2, [r4, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 80023b2:	0a9b      	lsrs	r3, r3, #10
 80023b4:	6223      	str	r3, [r4, #32]
	W25qxx_ReadUniqID();
 80023b6:	f7ff ff77 	bl	80022a8 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7ff ff94 	bl	80022e8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80023c0:	2002      	movs	r0, #2
 80023c2:	f7ff ff91 	bl	80022e8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80023c6:	2003      	movs	r0, #3
 80023c8:	f7ff ff8e 	bl	80022e8 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 80023cc:	2300      	movs	r3, #0
 80023ce:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return true;
 80023d2:	2001      	movs	r0, #1
}	
 80023d4:	bd10      	pop	{r4, pc}
			w25qxx.ID=W25Q256;
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <W25qxx_Init+0x10c>)
 80023d8:	2209      	movs	r2, #9
 80023da:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 80023dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e0:	61da      	str	r2, [r3, #28]
		break;
 80023e2:	e7d6      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q128;
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <W25qxx_Init+0x10c>)
 80023e6:	2208      	movs	r2, #8
 80023e8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 80023ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ee:	61da      	str	r2, [r3, #28]
		break;
 80023f0:	e7cf      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q64;
 80023f2:	4b17      	ldr	r3, [pc, #92]	; (8002450 <W25qxx_Init+0x10c>)
 80023f4:	2207      	movs	r2, #7
 80023f6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	61da      	str	r2, [r3, #28]
		break;
 80023fc:	e7c9      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q32;
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <W25qxx_Init+0x10c>)
 8002400:	2206      	movs	r2, #6
 8002402:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8002404:	2240      	movs	r2, #64	; 0x40
 8002406:	61da      	str	r2, [r3, #28]
		break;
 8002408:	e7c3      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q16;
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <W25qxx_Init+0x10c>)
 800240c:	2205      	movs	r2, #5
 800240e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8002410:	2220      	movs	r2, #32
 8002412:	61da      	str	r2, [r3, #28]
		break;
 8002414:	e7bd      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q80;
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <W25qxx_Init+0x10c>)
 8002418:	2204      	movs	r2, #4
 800241a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 800241c:	2210      	movs	r2, #16
 800241e:	61da      	str	r2, [r3, #28]
		break;
 8002420:	e7b7      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q40;
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <W25qxx_Init+0x10c>)
 8002424:	2203      	movs	r2, #3
 8002426:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8002428:	2208      	movs	r2, #8
 800242a:	61da      	str	r2, [r3, #28]
		break;
 800242c:	e7b1      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q20;
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <W25qxx_Init+0x10c>)
 8002430:	2202      	movs	r2, #2
 8002432:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8002434:	2204      	movs	r2, #4
 8002436:	61da      	str	r2, [r3, #28]
		break;
 8002438:	e7ab      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q10;
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <W25qxx_Init+0x10c>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8002440:	2202      	movs	r2, #2
 8002442:	61da      	str	r2, [r3, #28]
		break;
 8002444:	e7a5      	b.n	8002392 <W25qxx_Init+0x4e>
			w25qxx.Lock=0;	
 8002446:	2000      	movs	r0, #0
 8002448:	4b01      	ldr	r3, [pc, #4]	; (8002450 <W25qxx_Init+0x10c>)
 800244a:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
			return false;
 800244e:	e7c1      	b.n	80023d4 <W25qxx_Init+0x90>
 8002450:	20002ac8 	.word	0x20002ac8

08002454 <vModbusInit>:
#include "Modbus.h"
#include "../RuntimeStats/RuntimeStats.h"

void vModbusInit (ModbusHandler *modbus, UART_HandleTypeDef *port, TickType_t timeout){
	modbus -> ModbusSerialPort = port;
 8002454:	6001      	str	r1, [r0, #0]
	modbus -> timeout_t = timeout / portTICK_PERIOD_MS;
 8002456:	6042      	str	r2, [r0, #4]
}
 8002458:	4770      	bx	lr

0800245a <uModbusCalculateCRC>:

uint16_t uModbusCalculateCRC (uint8_t frame_length, uint8_t *frame){
 800245a:	b430      	push	{r4, r5}
	uint16_t calculatedCRC = 0xFFFF;
	uint16_t CRChigh, CRClow;
	for(int i = 0; i < frame_length; i++){
 800245c:	2500      	movs	r5, #0
	uint16_t calculatedCRC = 0xFFFF;
 800245e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	for(int i = 0; i < frame_length; i++){
 8002462:	e00d      	b.n	8002480 <uModbusCalculateCRC+0x26>
		for(int j = 8; j > 0; j--){
			if(calculatedCRC & 0x0001){
				calculatedCRC >>= 1;
				calculatedCRC ^= 0xA001;
			}else{
				calculatedCRC >>= 1;
 8002464:	085b      	lsrs	r3, r3, #1
		for(int j = 8; j > 0; j--){
 8002466:	3a01      	subs	r2, #1
 8002468:	2a00      	cmp	r2, #0
 800246a:	dd07      	ble.n	800247c <uModbusCalculateCRC+0x22>
			if(calculatedCRC & 0x0001){
 800246c:	f013 0f01 	tst.w	r3, #1
 8002470:	d0f8      	beq.n	8002464 <uModbusCalculateCRC+0xa>
				calculatedCRC ^= 0xA001;
 8002472:	f24a 0401 	movw	r4, #40961	; 0xa001
 8002476:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
 800247a:	e7f4      	b.n	8002466 <uModbusCalculateCRC+0xc>
			}
		}
		frame++;
 800247c:	3101      	adds	r1, #1
	for(int i = 0; i < frame_length; i++){
 800247e:	3501      	adds	r5, #1
 8002480:	42a8      	cmp	r0, r5
 8002482:	dd03      	ble.n	800248c <uModbusCalculateCRC+0x32>
		calculatedCRC ^= (*frame);
 8002484:	780a      	ldrb	r2, [r1, #0]
 8002486:	4053      	eors	r3, r2
		for(int j = 8; j > 0; j--){
 8002488:	2208      	movs	r2, #8
 800248a:	e7ed      	b.n	8002468 <uModbusCalculateCRC+0xe>
	}

	CRChigh = (calculatedCRC & 0x00FF) <<8;
 800248c:	0218      	lsls	r0, r3, #8
 800248e:	b280      	uxth	r0, r0
	CRClow = (calculatedCRC & 0xFF00) >>8;
	calculatedCRC = CRChigh + CRClow;
 8002490:	eb00 2013 	add.w	r0, r0, r3, lsr #8

	//calculatedCRC = HAL_CRC_Calculate(&hcrc, frame, frame_length);
	return calculatedCRC;
}
 8002494:	b280      	uxth	r0, r0
 8002496:	bc30      	pop	{r4, r5}
 8002498:	4770      	bx	lr

0800249a <bModbusCheckCRC>:

uint8_t bModbusCheckCRC (uint8_t frame_length, uint8_t *frame){
 800249a:	b570      	push	{r4, r5, r6, lr}
 800249c:	4604      	mov	r4, r0
 800249e:	460d      	mov	r5, r1
	uint16_t crc = uModbusCalculateCRC(frame_length - 2, frame);
 80024a0:	1e86      	subs	r6, r0, #2
 80024a2:	b2f0      	uxtb	r0, r6
 80024a4:	f7ff ffd9 	bl	800245a <uModbusCalculateCRC>
	uint16_t frameCRC = (uint16_t)(*(frame + frame_length - 2));
 80024a8:	5daa      	ldrb	r2, [r5, r6]
	frameCRC <<= 8;
	frameCRC += *(frame + frame_length - 1);
 80024aa:	3c01      	subs	r4, #1
 80024ac:	5d2b      	ldrb	r3, [r5, r4]
 80024ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80024b2:	b29b      	uxth	r3, r3

	if(crc == frameCRC){
 80024b4:	4298      	cmp	r0, r3
 80024b6:	d001      	beq.n	80024bc <bModbusCheckCRC+0x22>
		return 1;
	}

	return 0;
 80024b8:	2000      	movs	r0, #0
}
 80024ba:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 80024bc:	2001      	movs	r0, #1
 80024be:	e7fc      	b.n	80024ba <bModbusCheckCRC+0x20>

080024c0 <vModbusReadInputRegisters>:
	}
	RuntimeStats_ModbusMasterWrongRespInc();
	return Modbus_CRCERR;
}

ModbusState vModbusReadInputRegisters (ModbusHandler *modbus, uint8_t slave_address, uint16_t first_register_address, uint16_t registers_count, uint8_t *response_frame){
 80024c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4606      	mov	r6, r0
 80024ca:	4689      	mov	r9, r1
 80024cc:	f8d7 8030 	ldr.w	r8, [r7, #48]	; 0x30
	uint8_t transmit_frame_buffer[8];
	uint16_t transmitCRC;
	uint8_t received_frame_length = (registers_count * 2) + 5;
 80024d0:	fa5f fe83 	uxtb.w	lr, r3
 80024d4:	ea4f 054e 	mov.w	r5, lr, lsl #1
 80024d8:	b2ed      	uxtb	r5, r5
 80024da:	3505      	adds	r5, #5
 80024dc:	b2ed      	uxtb	r5, r5
	uint8_t received_frame_buffer[received_frame_length];
 80024de:	46ac      	mov	ip, r5
 80024e0:	1de9      	adds	r1, r5, #7
 80024e2:	f401 71fc 	and.w	r1, r1, #504	; 0x1f8
 80024e6:	ebad 0d01 	sub.w	sp, sp, r1
 80024ea:	466c      	mov	r4, sp
	uint32_t ulNotificationValue;
	for(int i = 0; i < received_frame_length; i++){
 80024ec:	2100      	movs	r1, #0
 80024ee:	e002      	b.n	80024f6 <vModbusReadInputRegisters+0x36>
		received_frame_buffer[i] = 0;
 80024f0:	2000      	movs	r0, #0
 80024f2:	5460      	strb	r0, [r4, r1]
	for(int i = 0; i < received_frame_length; i++){
 80024f4:	3101      	adds	r1, #1
 80024f6:	458c      	cmp	ip, r1
 80024f8:	dcfa      	bgt.n	80024f0 <vModbusReadInputRegisters+0x30>

	}
	transmit_frame_buffer[0] = slave_address;
 80024fa:	f887 9000 	strb.w	r9, [r7]
	transmit_frame_buffer[1] = 0x04;
 80024fe:	2104      	movs	r1, #4
 8002500:	7079      	strb	r1, [r7, #1]
	transmit_frame_buffer[2] = (uint8_t)(first_register_address >> 8);
 8002502:	0a11      	lsrs	r1, r2, #8
 8002504:	70b9      	strb	r1, [r7, #2]
	transmit_frame_buffer[3] = (uint8_t)first_register_address;
 8002506:	70fa      	strb	r2, [r7, #3]
	transmit_frame_buffer[4] = (uint8_t)(registers_count >> 8);
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	713b      	strb	r3, [r7, #4]
	transmit_frame_buffer[5] = (uint8_t)(registers_count);
 800250c:	f887 e005 	strb.w	lr, [r7, #5]
	transmitCRC = uModbusCalculateCRC (6, transmit_frame_buffer);
 8002510:	4639      	mov	r1, r7
 8002512:	2006      	movs	r0, #6
 8002514:	f7ff ffa1 	bl	800245a <uModbusCalculateCRC>
	transmit_frame_buffer[6] = (transmitCRC >> 8);
 8002518:	0a03      	lsrs	r3, r0, #8
 800251a:	71bb      	strb	r3, [r7, #6]
	transmit_frame_buffer[7] = (uint8_t)(transmitCRC);
 800251c:	71f8      	strb	r0, [r7, #7]

	//Wy�lij dane;
	HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_SET);
 800251e:	2201      	movs	r2, #1
 8002520:	2102      	movs	r1, #2
 8002522:	482d      	ldr	r0, [pc, #180]	; (80025d8 <vModbusReadInputRegisters+0x118>)
 8002524:	f003 fc57 	bl	8005dd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 8002528:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80025dc <vModbusReadInputRegisters+0x11c>
 800252c:	2200      	movs	r2, #0
 800252e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002532:	4650      	mov	r0, sl
 8002534:	f003 fc4f 	bl	8005dd6 <HAL_GPIO_WritePin>
	RuntimeStats_ModbusMasterRqSendInc();
 8002538:	f000 f8ca 	bl	80026d0 <RuntimeStats_ModbusMasterRqSendInc>
	HAL_UART_Transmit_IT(modbus -> ModbusSerialPort, transmit_frame_buffer, 8);
 800253c:	2208      	movs	r2, #8
 800253e:	4639      	mov	r1, r7
 8002540:	6830      	ldr	r0, [r6, #0]
 8002542:	f006 f83e 	bl	80085c2 <HAL_UART_Transmit_IT>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 8002546:	6871      	ldr	r1, [r6, #4]
 8002548:	2001      	movs	r0, #1
 800254a:	f007 ffb7 	bl	800a4bc <ulTaskNotifyTake>
	HAL_UART_Receive_DMA(modbus -> ModbusSerialPort, received_frame_buffer, received_frame_length);
 800254e:	462a      	mov	r2, r5
 8002550:	4621      	mov	r1, r4
 8002552:	6830      	ldr	r0, [r6, #0]
 8002554:	f006 f85a 	bl	800860c <HAL_UART_Receive_DMA>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 8002558:	6871      	ldr	r1, [r6, #4]
 800255a:	2001      	movs	r0, #1
 800255c:	f007 ffae 	bl	800a4bc <ulTaskNotifyTake>
 8002560:	4683      	mov	fp, r0
	vTaskDelay(1);
 8002562:	2001      	movs	r0, #1
 8002564:	f007 fb9a 	bl	8009c9c <vTaskDelay>
	HAL_UART_AbortTransmit(modbus -> ModbusSerialPort);
 8002568:	6830      	ldr	r0, [r6, #0]
 800256a:	f006 f8a3 	bl	80086b4 <HAL_UART_AbortTransmit>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 800256e:	2201      	movs	r2, #1
 8002570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002574:	4650      	mov	r0, sl
 8002576:	f003 fc2e 	bl	8005dd6 <HAL_GPIO_WritePin>
	if(ulNotificationValue){
 800257a:	f1bb 0f00 	cmp.w	fp, #0
 800257e:	d024      	beq.n	80025ca <vModbusReadInputRegisters+0x10a>
		if(bModbusCheckCRC(received_frame_length, received_frame_buffer)){
 8002580:	4621      	mov	r1, r4
 8002582:	4628      	mov	r0, r5
 8002584:	f7ff ff89 	bl	800249a <bModbusCheckCRC>
 8002588:	b1d8      	cbz	r0, 80025c2 <vModbusReadInputRegisters+0x102>
			if(received_frame_buffer[0] == slave_address && received_frame_buffer[1] == 0x04){
 800258a:	7823      	ldrb	r3, [r4, #0]
 800258c:	454b      	cmp	r3, r9
 800258e:	d111      	bne.n	80025b4 <vModbusReadInputRegisters+0xf4>
 8002590:	7863      	ldrb	r3, [r4, #1]
 8002592:	2b04      	cmp	r3, #4
 8002594:	d10e      	bne.n	80025b4 <vModbusReadInputRegisters+0xf4>
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 8002596:	2200      	movs	r2, #0
 8002598:	78a3      	ldrb	r3, [r4, #2]
 800259a:	3302      	adds	r3, #2
 800259c:	429a      	cmp	r2, r3
 800259e:	da05      	bge.n	80025ac <vModbusReadInputRegisters+0xec>
					*response_frame = received_frame_buffer[i + 3];
 80025a0:	1cd3      	adds	r3, r2, #3
 80025a2:	5ce3      	ldrb	r3, [r4, r3]
 80025a4:	f808 3b01 	strb.w	r3, [r8], #1
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 80025a8:	3201      	adds	r2, #1
 80025aa:	e7f5      	b.n	8002598 <vModbusReadInputRegisters+0xd8>
					response_frame++;
				}
				RuntimeStats_ModbusMasterRespOkInc();
 80025ac:	f000 f8a0 	bl	80026f0 <RuntimeStats_ModbusMasterRespOkInc>
				return Modbus_OK;
 80025b0:	2000      	movs	r0, #0
 80025b2:	e002      	b.n	80025ba <vModbusReadInputRegisters+0xfa>
			}
			RuntimeStats_ModbusMasterWrongRespInc();
 80025b4:	f000 f8a4 	bl	8002700 <RuntimeStats_ModbusMasterWrongRespInc>
			return Modbus_CRCERR;
 80025b8:	2002      	movs	r0, #2
		RuntimeStats_ModbusMasterNoRespInc();
		return Modbus_TIMEOUT;
	}
	RuntimeStats_ModbusMasterWrongRespInc();
	return Modbus_CRCERR;
}
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		RuntimeStats_ModbusMasterWrongRespInc();
 80025c2:	f000 f89d 	bl	8002700 <RuntimeStats_ModbusMasterWrongRespInc>
		return Modbus_CRCERR;
 80025c6:	2002      	movs	r0, #2
 80025c8:	e7f7      	b.n	80025ba <vModbusReadInputRegisters+0xfa>
		HAL_UART_AbortReceive_IT(modbus -> ModbusSerialPort);
 80025ca:	6830      	ldr	r0, [r6, #0]
 80025cc:	f006 f9e4 	bl	8008998 <HAL_UART_AbortReceive_IT>
		RuntimeStats_ModbusMasterNoRespInc();
 80025d0:	f000 f886 	bl	80026e0 <RuntimeStats_ModbusMasterNoRespInc>
		return Modbus_TIMEOUT;
 80025d4:	2001      	movs	r0, #1
 80025d6:	e7f0      	b.n	80025ba <vModbusReadInputRegisters+0xfa>
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020800 	.word	0x40020800

080025e0 <RB_CreateBuffer>:

RB_Status RB_CreateBuffer(RingBuffer *Buffer, uint8_t Size)
{
	//*Buffer = malloc(sizeof(RingBuffer) + (sizeof(uint8_t) * Size));

	if(Buffer == NULL)
 80025e0:	4603      	mov	r3, r0
 80025e2:	b130      	cbz	r0, 80025f2 <RB_CreateBuffer+0x12>
	{
		return RB_NOTCREATED;
	}

	(Buffer)->Size = 32;
 80025e4:	2220      	movs	r2, #32
 80025e6:	7002      	strb	r2, [r0, #0]
	(Buffer)->Head = 0;
 80025e8:	2000      	movs	r0, #0
 80025ea:	7058      	strb	r0, [r3, #1]
	(Buffer)->Tail = 0;
 80025ec:	7098      	strb	r0, [r3, #2]
	(Buffer)->Elements = 0;
 80025ee:	70d8      	strb	r0, [r3, #3]

	return RB_OK;
 80025f0:	4770      	bx	lr
		return RB_NOTCREATED;
 80025f2:	2002      	movs	r0, #2
}
 80025f4:	4770      	bx	lr

080025f6 <RB_WriteToBuffer>:

RB_Status RB_WriteToBuffer(RingBuffer *Buffer, uint8_t Data)
{
 80025f6:	b430      	push	{r4, r5}
	uint8_t TempHead;

	TempHead = (Buffer->Head + 1) % Buffer->Size;
 80025f8:	7843      	ldrb	r3, [r0, #1]
 80025fa:	1c5d      	adds	r5, r3, #1
 80025fc:	7804      	ldrb	r4, [r0, #0]
 80025fe:	fb95 f2f4 	sdiv	r2, r5, r4
 8002602:	fb04 5212 	mls	r2, r4, r2, r5
 8002606:	b2d2      	uxtb	r2, r2

	if( TempHead == Buffer->Tail) // No room for new data
 8002608:	7885      	ldrb	r5, [r0, #2]
 800260a:	4295      	cmp	r5, r2
 800260c:	d00e      	beq.n	800262c <RB_WriteToBuffer+0x36>
	{
		return RB_NOFREESPACE;
	}
	else
	{
		Buffer->Buffer[Buffer->Head] = Data;
 800260e:	18c2      	adds	r2, r0, r3
 8002610:	7111      	strb	r1, [r2, #4]

		Buffer->Head++;
 8002612:	3301      	adds	r3, #1
 8002614:	b2db      	uxtb	r3, r3
		Buffer->Head %= Buffer->Size;
 8002616:	fbb3 f2f4 	udiv	r2, r3, r4
 800261a:	fb04 3312 	mls	r3, r4, r2, r3
 800261e:	7043      	strb	r3, [r0, #1]

		Buffer->Elements++;
 8002620:	78c3      	ldrb	r3, [r0, #3]
 8002622:	3301      	adds	r3, #1
 8002624:	70c3      	strb	r3, [r0, #3]
	}

	return RB_OK;
 8002626:	2000      	movs	r0, #0
}
 8002628:	bc30      	pop	{r4, r5}
 800262a:	4770      	bx	lr
		return RB_NOFREESPACE;
 800262c:	2003      	movs	r0, #3
 800262e:	e7fb      	b.n	8002628 <RB_WriteToBuffer+0x32>

08002630 <RB_ReadFromBuffer>:

RB_Status RB_ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
	if( Buffer->Tail == Buffer->Head) // No data to read
 8002630:	7883      	ldrb	r3, [r0, #2]
 8002632:	7842      	ldrb	r2, [r0, #1]
 8002634:	4293      	cmp	r3, r2
 8002636:	d010      	beq.n	800265a <RB_ReadFromBuffer+0x2a>
	{
		return RB_NOELEMENTS;
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 8002638:	4403      	add	r3, r0
 800263a:	791b      	ldrb	r3, [r3, #4]
 800263c:	700b      	strb	r3, [r1, #0]

		Buffer->Tail++;
 800263e:	7883      	ldrb	r3, [r0, #2]
 8002640:	3301      	adds	r3, #1
 8002642:	b2db      	uxtb	r3, r3
		Buffer->Tail %= Buffer->Size;
 8002644:	7801      	ldrb	r1, [r0, #0]
 8002646:	fbb3 f2f1 	udiv	r2, r3, r1
 800264a:	fb01 3312 	mls	r3, r1, r2, r3
 800264e:	7083      	strb	r3, [r0, #2]

		Buffer->Elements--;
 8002650:	78c3      	ldrb	r3, [r0, #3]
 8002652:	3b01      	subs	r3, #1
 8002654:	70c3      	strb	r3, [r0, #3]
	}
	return RB_OK;
 8002656:	2000      	movs	r0, #0
 8002658:	4770      	bx	lr
		return RB_NOELEMENTS;
 800265a:	2004      	movs	r0, #4
}
 800265c:	4770      	bx	lr

0800265e <RB_ElementsAvailable>:

uint8_t RB_ElementsAvailable(RingBuffer *Buffer)
{
	return Buffer->Elements;
}
 800265e:	78c0      	ldrb	r0, [r0, #3]
 8002660:	4770      	bx	lr
	...

08002664 <RuntimeStats_TelnetRxInc>:
void RuntimeStats_Init(void){
	memset(&commStats, 0, 48);
}

void RuntimeStats_TelnetRxInc (void){
	commStats.telnetStats.rxFrames++;
 8002664:	4a02      	ldr	r2, [pc, #8]	; (8002670 <RuntimeStats_TelnetRxInc+0xc>)
 8002666:	6813      	ldr	r3, [r2, #0]
 8002668:	3301      	adds	r3, #1
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20002af0 	.word	0x20002af0

08002674 <RuntimeStats_TelnetTxInc>:

void RuntimeStats_TelnetTxInc (void){
	commStats.telnetStats.txFrames++;
 8002674:	4a02      	ldr	r2, [pc, #8]	; (8002680 <RuntimeStats_TelnetTxInc+0xc>)
 8002676:	6853      	ldr	r3, [r2, #4]
 8002678:	3301      	adds	r3, #1
 800267a:	6053      	str	r3, [r2, #4]
}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20002af0 	.word	0x20002af0

08002684 <RuntimeStats_TelnetCurrIPSet>:

void RuntimeStats_TelnetCurrIPSet (uint8_t* ip){
	memcpy(&(commStats.telnetStats.currIP), ip, 4);
 8002684:	6802      	ldr	r2, [r0, #0]
 8002686:	4b01      	ldr	r3, [pc, #4]	; (800268c <RuntimeStats_TelnetCurrIPSet+0x8>)
 8002688:	609a      	str	r2, [r3, #8]
}
 800268a:	4770      	bx	lr
 800268c:	20002af0 	.word	0x20002af0

08002690 <RuntimeStats_TelnetLastIPSet>:

void RuntimeStats_TelnetLastIPSet (void){
	memcpy(&(commStats.telnetStats.lastIP), &(commStats.telnetStats.currIP), 4);
 8002690:	4b02      	ldr	r3, [pc, #8]	; (800269c <RuntimeStats_TelnetLastIPSet+0xc>)
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
	memset(&(commStats.telnetStats.currIP), 0, 4);
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
}
 800269a:	4770      	bx	lr
 800269c:	20002af0 	.word	0x20002af0

080026a0 <RuntimeStats_TelnetGetRxCnt>:

uint32_t RuntimeStats_TelnetGetRxCnt (void){
	return commStats.telnetStats.rxFrames;
}
 80026a0:	4b01      	ldr	r3, [pc, #4]	; (80026a8 <RuntimeStats_TelnetGetRxCnt+0x8>)
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20002af0 	.word	0x20002af0

080026ac <RuntimeStats_TelnetGetTxCnt>:

uint32_t RuntimeStats_TelnetGetTxCnt (void){
	return commStats.telnetStats.txFrames;
}
 80026ac:	4b01      	ldr	r3, [pc, #4]	; (80026b4 <RuntimeStats_TelnetGetTxCnt+0x8>)
 80026ae:	6858      	ldr	r0, [r3, #4]
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20002af0 	.word	0x20002af0

080026b8 <RuntimeStats_TelnetGetCurIP>:

void RuntimeStats_TelnetGetCurIP (uint8_t* ip){
	memcpy(ip, &(commStats.telnetStats.currIP), 4);
 80026b8:	4b01      	ldr	r3, [pc, #4]	; (80026c0 <RuntimeStats_TelnetGetCurIP+0x8>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	6003      	str	r3, [r0, #0]
}
 80026be:	4770      	bx	lr
 80026c0:	20002af0 	.word	0x20002af0

080026c4 <RuntimeStats_TelnetGetLastIP>:

void RuntimeStats_TelnetGetLastIP (uint8_t* ip){
	memcpy(ip, &(commStats.telnetStats.lastIP), 4);
 80026c4:	4b01      	ldr	r3, [pc, #4]	; (80026cc <RuntimeStats_TelnetGetLastIP+0x8>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	6003      	str	r3, [r0, #0]
}
 80026ca:	4770      	bx	lr
 80026cc:	20002af0 	.word	0x20002af0

080026d0 <RuntimeStats_ModbusMasterRqSendInc>:

void RuntimeStats_ModbusMasterRqSendInc (void){
	commStats.mdMAsterStats.rqSend ++;
 80026d0:	4a02      	ldr	r2, [pc, #8]	; (80026dc <RuntimeStats_ModbusMasterRqSendInc+0xc>)
 80026d2:	6a13      	ldr	r3, [r2, #32]
 80026d4:	3301      	adds	r3, #1
 80026d6:	6213      	str	r3, [r2, #32]
}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20002af0 	.word	0x20002af0

080026e0 <RuntimeStats_ModbusMasterNoRespInc>:

void RuntimeStats_ModbusMasterNoRespInc (void){
	commStats.mdMAsterStats.noResp ++;
 80026e0:	4a02      	ldr	r2, [pc, #8]	; (80026ec <RuntimeStats_ModbusMasterNoRespInc+0xc>)
 80026e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80026e4:	3301      	adds	r3, #1
 80026e6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20002af0 	.word	0x20002af0

080026f0 <RuntimeStats_ModbusMasterRespOkInc>:

void RuntimeStats_ModbusMasterRespOkInc (void){
	commStats.mdMAsterStats.respOk ++;
 80026f0:	4a02      	ldr	r2, [pc, #8]	; (80026fc <RuntimeStats_ModbusMasterRespOkInc+0xc>)
 80026f2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80026f4:	3301      	adds	r3, #1
 80026f6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20002af0 	.word	0x20002af0

08002700 <RuntimeStats_ModbusMasterWrongRespInc>:

void RuntimeStats_ModbusMasterWrongRespInc (void){
	commStats.mdMAsterStats.wrongRq ++;
 8002700:	4a02      	ldr	r2, [pc, #8]	; (800270c <RuntimeStats_ModbusMasterWrongRespInc+0xc>)
 8002702:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002704:	3301      	adds	r3, #1
 8002706:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20002af0 	.word	0x20002af0

08002710 <RuntimeStats_ModbusMasterRqSendGet>:

uint32_t RuntimeStats_ModbusMasterRqSendGet (void){
	return commStats.mdMAsterStats.rqSend;
}
 8002710:	4b01      	ldr	r3, [pc, #4]	; (8002718 <RuntimeStats_ModbusMasterRqSendGet+0x8>)
 8002712:	6a18      	ldr	r0, [r3, #32]
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20002af0 	.word	0x20002af0

0800271c <RuntimeStats_ModbusMasterNoRespGet>:

uint32_t RuntimeStats_ModbusMasterNoRespGet (void){
	return commStats.mdMAsterStats.noResp;
}
 800271c:	4b01      	ldr	r3, [pc, #4]	; (8002724 <RuntimeStats_ModbusMasterNoRespGet+0x8>)
 800271e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20002af0 	.word	0x20002af0

08002728 <RuntimeStats_ModbusMasterRespOkGet>:

uint32_t RuntimeStats_ModbusMasterRespOkGet (void){
	return commStats.mdMAsterStats.respOk;
}
 8002728:	4b01      	ldr	r3, [pc, #4]	; (8002730 <RuntimeStats_ModbusMasterRespOkGet+0x8>)
 800272a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20002af0 	.word	0x20002af0

08002734 <RuntimeStats_ModbusMasterWrongRespGet>:

uint32_t RuntimeStats_ModbusMasterWrongRespGet (void){
	return commStats.mdMAsterStats.wrongRq;
}
 8002734:	4b01      	ldr	r3, [pc, #4]	; (800273c <RuntimeStats_ModbusMasterWrongRespGet+0x8>)
 8002736:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20002af0 	.word	0x20002af0

08002740 <FLASH_ChipSelect>:

extern osMutexId SPIMutexHandle;



void FLASH_ChipSelect (void){
 8002740:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 8002742:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <FLASH_ChipSelect+0x1c>)
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	f006 fd85 	bl	8009258 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 800274e:	2200      	movs	r2, #0
 8002750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <FLASH_ChipSelect+0x20>)
 8002756:	f003 fb3e 	bl	8005dd6 <HAL_GPIO_WritePin>
}
 800275a:	bd08      	pop	{r3, pc}
 800275c:	20003430 	.word	0x20003430
 8002760:	40020400 	.word	0x40020400

08002764 <FLASH_ChipDeselect>:

void FLASH_ChipDeselect (void){
 8002764:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8002766:	2201      	movs	r2, #1
 8002768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800276c:	4805      	ldr	r0, [pc, #20]	; (8002784 <FLASH_ChipDeselect+0x20>)
 800276e:	f003 fb32 	bl	8005dd6 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8002772:	2300      	movs	r3, #0
 8002774:	461a      	mov	r2, r3
 8002776:	4619      	mov	r1, r3
 8002778:	4803      	ldr	r0, [pc, #12]	; (8002788 <FLASH_ChipDeselect+0x24>)
 800277a:	6800      	ldr	r0, [r0, #0]
 800277c:	f006 fb76 	bl	8008e6c <xQueueGenericSend>
}
 8002780:	bd08      	pop	{r3, pc}
 8002782:	bf00      	nop
 8002784:	40020400 	.word	0x40020400
 8002788:	20003430 	.word	0x20003430

0800278c <DataLogTask>:

void DataLogTask(void const * argument)
{
 800278c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DataLog */
	W25qxx_Init();
 800278e:	f7ff fdd9 	bl	8002344 <W25qxx_Init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002792:	2001      	movs	r0, #1
 8002794:	f006 f97f 	bl	8008a96 <osDelay>
 8002798:	e7fb      	b.n	8002792 <DataLogTask+0x6>
	...

0800279c <nextion_SendData>:
static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3);
static void nextion_SendConfig(UART_HandleTypeDef* uart);
void NextionBig_DataRcv (void);
void NextionSmall_DataRcv (void);

static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3){
 800279c:	b530      	push	{r4, r5, lr}
 800279e:	b08d      	sub	sp, #52	; 0x34
	char buffor_to_send[40];
	uint8_t buffor_to_send_size;
	current_command = cmd;
 80027a0:	4c28      	ldr	r4, [pc, #160]	; (8002844 <nextion_SendData+0xa8>)
 80027a2:	7021      	strb	r1, [r4, #0]
	if(cmd < NEX_COMMANDS_COUNT && cmd > -1){
 80027a4:	2921      	cmp	r1, #33	; 0x21
 80027a6:	d84b      	bhi.n	8002840 <nextion_SendData+0xa4>
 80027a8:	4605      	mov	r5, r0
		if(cmd == NEX_WAKE || cmd == NEX_SENDME || cmd == NEX_SETTINGS_SAVED || cmd == NEX_SETTINGS_NOT_SAVED
 80027aa:	2901      	cmp	r1, #1
 80027ac:	d919      	bls.n	80027e2 <nextion_SendData+0x46>
 80027ae:	2911      	cmp	r1, #17
 80027b0:	d017      	beq.n	80027e2 <nextion_SendData+0x46>
 80027b2:	2912      	cmp	r1, #18
 80027b4:	d015      	beq.n	80027e2 <nextion_SendData+0x46>
			|| cmd == NEX_SETTINGS_LOCK || cmd == NEX_SETTINGS_UNLOCK){
 80027b6:	2921      	cmp	r1, #33	; 0x21
 80027b8:	d013      	beq.n	80027e2 <nextion_SendData+0x46>
 80027ba:	2920      	cmp	r1, #32
 80027bc:	d011      	beq.n	80027e2 <nextion_SendData+0x46>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
		}else if(cmd == NEX_PHASE_VOLTAGE ||
			cmd == NEX_PHASE_CURRENT ||
 80027be:	f1a1 0018 	sub.w	r0, r1, #24
 80027c2:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_VOLTAGE ||
 80027c4:	2802      	cmp	r0, #2
 80027c6:	d916      	bls.n	80027f6 <nextion_SendData+0x5a>
			cmd == NEX_PHASE_POWER){
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
		}else if(cmd == NEX_PHASE_PRG_BAR ||
			cmd == NEX_CO_HEATER_PHASE_DUTY ||
			cmd == NEX_CWU_HEATER_PHASE_DUTY ||
			cmd == NEX_CWU_TEMP || cmd == NEX_CO_TEMP){
 80027c8:	f1a1 001b 	sub.w	r0, r1, #27
 80027cc:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_PRG_BAR ||
 80027ce:	2804      	cmp	r0, #4
 80027d0:	d81b      	bhi.n	800280a <nextion_SendData+0x6e>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2);
 80027d2:	481d      	ldr	r0, [pc, #116]	; (8002848 <nextion_SendData+0xac>)
 80027d4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80027d8:	a802      	add	r0, sp, #8
 80027da:	f009 fa6d 	bl	800bcb8 <siprintf>
 80027de:	b2c2      	uxtb	r2, r0
 80027e0:	e006      	b.n	80027f0 <nextion_SendData+0x54>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <nextion_SendData+0xac>)
 80027e4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80027e8:	a802      	add	r0, sp, #8
 80027ea:	f009 fa65 	bl	800bcb8 <siprintf>
 80027ee:	b2c2      	uxtb	r2, r0
		}else{
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
		}
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 80027f0:	4610      	mov	r0, r2
 80027f2:	4613      	mov	r3, r2
 80027f4:	e017      	b.n	8002826 <nextion_SendData+0x8a>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
 80027f6:	4814      	ldr	r0, [pc, #80]	; (8002848 <nextion_SendData+0xac>)
 80027f8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80027fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80027fe:	9000      	str	r0, [sp, #0]
 8002800:	a802      	add	r0, sp, #8
 8002802:	f009 fa59 	bl	800bcb8 <siprintf>
 8002806:	b2c2      	uxtb	r2, r0
 8002808:	e7f2      	b.n	80027f0 <nextion_SendData+0x54>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
 800280a:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <nextion_SendData+0xac>)
 800280c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002810:	a802      	add	r0, sp, #8
 8002812:	f009 fa51 	bl	800bcb8 <siprintf>
 8002816:	b2c2      	uxtb	r2, r0
 8002818:	e7ea      	b.n	80027f0 <nextion_SendData+0x54>
			buffor_to_send[i] = 0xFF;
 800281a:	a90c      	add	r1, sp, #48	; 0x30
 800281c:	4419      	add	r1, r3
 800281e:	24ff      	movs	r4, #255	; 0xff
 8002820:	f801 4c28 	strb.w	r4, [r1, #-40]
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 8002824:	3301      	adds	r3, #1
 8002826:	1cc1      	adds	r1, r0, #3
 8002828:	4299      	cmp	r1, r3
 800282a:	dcf6      	bgt.n	800281a <nextion_SendData+0x7e>
		}
		buffor_to_send_size += 3;
 800282c:	3203      	adds	r2, #3
		HAL_UART_Transmit(uart, (uint8_t*)buffor_to_send, buffor_to_send_size, 20);
 800282e:	2314      	movs	r3, #20
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	a902      	add	r1, sp, #8
 8002834:	4628      	mov	r0, r5
 8002836:	f005 fe53 	bl	80084e0 <HAL_UART_Transmit>
		vTaskDelay(5);
 800283a:	2005      	movs	r0, #5
 800283c:	f007 fa2e 	bl	8009c9c <vTaskDelay>
	}
}
 8002840:	b00d      	add	sp, #52	; 0x34
 8002842:	bd30      	pop	{r4, r5, pc}
 8002844:	20002c00 	.word	0x20002c00
 8002848:	0800cbcc 	.word	0x0800cbcc

0800284c <nextion_SendConfig>:
	nextion_SendData(uart, NEX_MINUTE, currTime.Minutes, 0, 0);
	current_command = NEX_SECONDS;
	nextion_SendData(uart, NEX_SECONDS, currTime.Seconds, 0, 0);
}

static void nextion_SendConfig(UART_HandleTypeDef* uart){
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	4606      	mov	r6, r0
	nextion_SendData(uart, NEX_CO_HIGH_TEMP, RegulationTaskData.parameters.CO_hi_temp, 0, 0);
 8002852:	4d27      	ldr	r5, [pc, #156]	; (80028f0 <nextion_SendConfig+0xa4>)
 8002854:	f995 207d 	ldrsb.w	r2, [r5, #125]	; 0x7d
 8002858:	2400      	movs	r4, #0
 800285a:	9400      	str	r4, [sp, #0]
 800285c:	4623      	mov	r3, r4
 800285e:	2108      	movs	r1, #8
 8002860:	f7ff ff9c 	bl	800279c <nextion_SendData>
	nextion_SendData(uart, NEX_CO_LOW_TEMP, RegulationTaskData.parameters.CO_lo_temp, 0, 0);
 8002864:	f995 207e 	ldrsb.w	r2, [r5, #126]	; 0x7e
 8002868:	9400      	str	r4, [sp, #0]
 800286a:	4623      	mov	r3, r4
 800286c:	2109      	movs	r1, #9
 800286e:	4630      	mov	r0, r6
 8002870:	f7ff ff94 	bl	800279c <nextion_SendData>
	nextion_SendData(uart, NEX_CO_HEATER_POWER, (int32_t)RegulationTaskData.parameters.CO_heater_power, 0, 0);
 8002874:	f8d5 2071 	ldr.w	r2, [r5, #113]	; 0x71
 8002878:	9400      	str	r4, [sp, #0]
 800287a:	4623      	mov	r3, r4
 800287c:	ee07 2a90 	vmov	s15, r2
 8002880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002884:	ee17 2a90 	vmov	r2, s15
 8002888:	210a      	movs	r1, #10
 800288a:	4630      	mov	r0, r6
 800288c:	f7ff ff86 	bl	800279c <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_HIGH_TEMP, RegulationTaskData.parameters.CWU_hi_temp, 0, 0);
 8002890:	f995 207f 	ldrsb.w	r2, [r5, #127]	; 0x7f
 8002894:	9400      	str	r4, [sp, #0]
 8002896:	4623      	mov	r3, r4
 8002898:	210b      	movs	r1, #11
 800289a:	4630      	mov	r0, r6
 800289c:	f7ff ff7e 	bl	800279c <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_LOW_TEMP, RegulationTaskData.parameters.CWU_lo_temp, 0, 0);
 80028a0:	f995 2080 	ldrsb.w	r2, [r5, #128]	; 0x80
 80028a4:	9400      	str	r4, [sp, #0]
 80028a6:	4623      	mov	r3, r4
 80028a8:	210c      	movs	r1, #12
 80028aa:	4630      	mov	r0, r6
 80028ac:	f7ff ff76 	bl	800279c <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_HEATER_POWER, (int32_t)RegulationTaskData.parameters.CWU_heater_power, 0, 0);
 80028b0:	f8d5 206d 	ldr.w	r2, [r5, #109]	; 0x6d
 80028b4:	9400      	str	r4, [sp, #0]
 80028b6:	4623      	mov	r3, r4
 80028b8:	ee07 2a90 	vmov	s15, r2
 80028bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028c0:	ee17 2a90 	vmov	r2, s15
 80028c4:	210d      	movs	r1, #13
 80028c6:	4630      	mov	r0, r6
 80028c8:	f7ff ff68 	bl	800279c <nextion_SendData>
	nextion_SendData(uart, NEX_ACC_COEFF, RegulationTaskData.parameters.acumulated_power_coeff, 0, 0);
 80028cc:	f995 207b 	ldrsb.w	r2, [r5, #123]	; 0x7b
 80028d0:	9400      	str	r4, [sp, #0]
 80028d2:	4623      	mov	r3, r4
 80028d4:	210e      	movs	r1, #14
 80028d6:	4630      	mov	r0, r6
 80028d8:	f7ff ff60 	bl	800279c <nextion_SendData>
	nextion_SendData(uart, NEX_HEATER_COEFF, RegulationTaskData.parameters.heater_power_coeff, 0, 0);
 80028dc:	f995 207c 	ldrsb.w	r2, [r5, #124]	; 0x7c
 80028e0:	9400      	str	r4, [sp, #0]
 80028e2:	4623      	mov	r3, r4
 80028e4:	210f      	movs	r1, #15
 80028e6:	4630      	mov	r0, r6
 80028e8:	f7ff ff58 	bl	800279c <nextion_SendData>
}
 80028ec:	b002      	add	sp, #8
 80028ee:	bd70      	pop	{r4, r5, r6, pc}
 80028f0:	20002cd4 	.word	0x20002cd4

080028f4 <nextion_UpdateTime>:
static void nextion_UpdateTime(UART_HandleTypeDef* uart){
 80028f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	4605      	mov	r5, r0
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 80028fc:	4f23      	ldr	r7, [pc, #140]	; (800298c <nextion_UpdateTime+0x98>)
 80028fe:	4c24      	ldr	r4, [pc, #144]	; (8002990 <nextion_UpdateTime+0x9c>)
 8002900:	2200      	movs	r2, #0
 8002902:	4639      	mov	r1, r7
 8002904:	4620      	mov	r0, r4
 8002906:	f004 fd33 	bl	8007370 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 800290a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8002998 <nextion_UpdateTime+0xa4>
 800290e:	2200      	movs	r2, #0
 8002910:	4641      	mov	r1, r8
 8002912:	4620      	mov	r0, r4
 8002914:	f004 fd57 	bl	80073c6 <HAL_RTC_GetDate>
	current_command = NEX_YEAR;
 8002918:	4e1e      	ldr	r6, [pc, #120]	; (8002994 <nextion_UpdateTime+0xa0>)
 800291a:	2102      	movs	r1, #2
 800291c:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_YEAR, currDate.Year + 2000, 0, 0);
 800291e:	f898 2003 	ldrb.w	r2, [r8, #3]
 8002922:	2400      	movs	r4, #0
 8002924:	9400      	str	r4, [sp, #0]
 8002926:	4623      	mov	r3, r4
 8002928:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 800292c:	4628      	mov	r0, r5
 800292e:	f7ff ff35 	bl	800279c <nextion_SendData>
	current_command = NEX_MONTH;
 8002932:	2103      	movs	r1, #3
 8002934:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_MONTH, currDate.Month, 0, 0);
 8002936:	f898 2001 	ldrb.w	r2, [r8, #1]
 800293a:	9400      	str	r4, [sp, #0]
 800293c:	4623      	mov	r3, r4
 800293e:	4628      	mov	r0, r5
 8002940:	f7ff ff2c 	bl	800279c <nextion_SendData>
	current_command = NEX_DAY;
 8002944:	2104      	movs	r1, #4
 8002946:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_DAY, currDate.Date, 0, 0);
 8002948:	f898 2002 	ldrb.w	r2, [r8, #2]
 800294c:	9400      	str	r4, [sp, #0]
 800294e:	4623      	mov	r3, r4
 8002950:	4628      	mov	r0, r5
 8002952:	f7ff ff23 	bl	800279c <nextion_SendData>
	current_command = NEX_HOUR;
 8002956:	2105      	movs	r1, #5
 8002958:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_HOUR, currTime.Hours, 0, 0);
 800295a:	783a      	ldrb	r2, [r7, #0]
 800295c:	9400      	str	r4, [sp, #0]
 800295e:	4623      	mov	r3, r4
 8002960:	4628      	mov	r0, r5
 8002962:	f7ff ff1b 	bl	800279c <nextion_SendData>
	current_command = NEX_MINUTE;
 8002966:	2106      	movs	r1, #6
 8002968:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_MINUTE, currTime.Minutes, 0, 0);
 800296a:	787a      	ldrb	r2, [r7, #1]
 800296c:	9400      	str	r4, [sp, #0]
 800296e:	4623      	mov	r3, r4
 8002970:	4628      	mov	r0, r5
 8002972:	f7ff ff13 	bl	800279c <nextion_SendData>
	current_command = NEX_SECONDS;
 8002976:	2107      	movs	r1, #7
 8002978:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_SECONDS, currTime.Seconds, 0, 0);
 800297a:	78ba      	ldrb	r2, [r7, #2]
 800297c:	9400      	str	r4, [sp, #0]
 800297e:	4623      	mov	r3, r4
 8002980:	4628      	mov	r0, r5
 8002982:	f7ff ff0b 	bl	800279c <nextion_SendData>
}
 8002986:	b002      	add	sp, #8
 8002988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800298c:	20002cc0 	.word	0x20002cc0
 8002990:	200032b4 	.word	0x200032b4
 8002994:	20002c00 	.word	0x20002c00
 8002998:	20002d64 	.word	0x20002d64

0800299c <NextionBig_DataRcv>:
		}
	}
  /* USER CODE END UpdateLCD */
}

void NextionBig_DataRcv (void){
 800299c:	b530      	push	{r4, r5, lr}
 800299e:	b083      	sub	sp, #12
	uint8_t stopbyte = 0;
 80029a0:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 80029a2:	e062      	b.n	8002a6a <NextionBig_DataRcv+0xce>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
		start = nextion_big_comm.UartBufferHead;
		if(len > 3){
			if(len > 9){
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
					memcpy(&number, &nextion_big_comm.UART_Buffer[start], 4);
 80029a4:	f102 0320 	add.w	r3, r2, #32
 80029a8:	4d3d      	ldr	r5, [pc, #244]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 80029aa:	442b      	add	r3, r5
 80029ac:	f8d3 0002 	ldr.w	r0, [r3, #2]
					memcpy(&value, &nextion_big_comm.UART_Buffer[start + 5], 4);
 80029b0:	3225      	adds	r2, #37	; 0x25
 80029b2:	442a      	add	r2, r5
 80029b4:	f8d2 1002 	ldr.w	r1, [r2, #2]
					nextion_big.param = number;
 80029b8:	4b3a      	ldr	r3, [pc, #232]	; (8002aa4 <NextionBig_DataRcv+0x108>)
 80029ba:	6058      	str	r0, [r3, #4]
					memcpy(&nextion_big.value, &value, 4);
 80029bc:	6099      	str	r1, [r3, #8]
					Config_ChangeValue(number, value);
 80029be:	f7fe fbed 	bl	800119c <Config_ChangeValue>
					nextion_big_comm.UartBufferHead += 10;
 80029c2:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80029c6:	330a      	adds	r3, #10
 80029c8:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
					xTaskNotifyFromISR(DiplaysHandle, 1, eSetValueWithOverwrite, NULL);
 80029cc:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <NextionBig_DataRcv+0x10c>)
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	2300      	movs	r3, #0
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2203      	movs	r2, #3
 80029d6:	2101      	movs	r1, #1
 80029d8:	f007 fdf8 	bl	800a5cc <xTaskGenericNotifyFromISR>
 80029dc:	e03e      	b.n	8002a5c <NextionBig_DataRcv+0xc0>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 80029de:	3301      	adds	r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	4610      	mov	r0, r2
 80029e4:	1d51      	adds	r1, r2, #5
 80029e6:	428b      	cmp	r3, r1
 80029e8:	da0a      	bge.n	8002a00 <NextionBig_DataRcv+0x64>
					if(nextion_big_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 80029ea:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 80029ee:	492c      	ldr	r1, [pc, #176]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 80029f0:	4401      	add	r1, r0
 80029f2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80029f6:	29ff      	cmp	r1, #255	; 0xff
 80029f8:	d1f1      	bne.n	80029de <NextionBig_DataRcv+0x42>
						stopbyte ++;
 80029fa:	3401      	adds	r4, #1
 80029fc:	b2e4      	uxtb	r4, r4
 80029fe:	e7ee      	b.n	80029de <NextionBig_DataRcv+0x42>
					}
				}
				if(stopbyte == 3){
 8002a00:	2c03      	cmp	r4, #3
 8002a02:	d006      	beq.n	8002a12 <NextionBig_DataRcv+0x76>
							y = 4;
							break;
					}
					nextion_big_comm.UartBufferHead += y;
				}else{
					nextion_big_comm.UartBufferHead ++;
 8002a04:	4a26      	ldr	r2, [pc, #152]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a06:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 8002a10:	e024      	b.n	8002a5c <NextionBig_DataRcv+0xc0>
					switch(nextion_big_comm.UART_Buffer[start]){
 8002a12:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a14:	4413      	add	r3, r2
 8002a16:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002a1a:	2b1a      	cmp	r3, #26
 8002a1c:	d011      	beq.n	8002a42 <NextionBig_DataRcv+0xa6>
 8002a1e:	2b66      	cmp	r3, #102	; 0x66
 8002a20:	d116      	bne.n	8002a50 <NextionBig_DataRcv+0xb4>
							nextion_big.display = nextion_big_comm.UART_Buffer[start + 1];
 8002a22:	3001      	adds	r0, #1
 8002a24:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a26:	4418      	add	r0, r3
 8002a28:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <NextionBig_DataRcv+0x108>)
 8002a2e:	701a      	strb	r2, [r3, #0]
							y = 5;
 8002a30:	2305      	movs	r3, #5
					nextion_big_comm.UartBufferHead += y;
 8002a32:	4a1b      	ldr	r2, [pc, #108]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a34:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 8002a38:	440b      	add	r3, r1
 8002a3a:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 8002a3e:	2400      	movs	r4, #0
 8002a40:	e00c      	b.n	8002a5c <NextionBig_DataRcv+0xc0>
							command_correct[current_command] = 1;
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <NextionBig_DataRcv+0x110>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	4a1a      	ldr	r2, [pc, #104]	; (8002ab0 <NextionBig_DataRcv+0x114>)
 8002a48:	2101      	movs	r1, #1
 8002a4a:	54d1      	strb	r1, [r2, r3]
							y = 4;
 8002a4c:	2304      	movs	r3, #4
							break;
 8002a4e:	e7f0      	b.n	8002a32 <NextionBig_DataRcv+0x96>
							y = 4;
 8002a50:	2304      	movs	r3, #4
 8002a52:	e7ee      	b.n	8002a32 <NextionBig_DataRcv+0x96>
				}
			}

		}else{
			//if(nextion_big_comm.UART_Buffer[start] == 0 || nextion_big_comm.UART_Buffer[start] == 255){
				nextion_big_comm.UartBufferHead++;
 8002a54:	3201      	adds	r2, #1
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a58:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_big_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 8002a5c:	4a10      	ldr	r2, [pc, #64]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a5e:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8002a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a66:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a6c:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 8002a70:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 8002a74:	4291      	cmp	r1, r2
 8002a76:	d011      	beq.n	8002a9c <NextionBig_DataRcv+0x100>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 8002a78:	b2d3      	uxtb	r3, r2
 8002a7a:	1ac9      	subs	r1, r1, r3
 8002a7c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 8002a80:	2903      	cmp	r1, #3
 8002a82:	d9e7      	bls.n	8002a54 <NextionBig_DataRcv+0xb8>
			if(len > 9){
 8002a84:	2909      	cmp	r1, #9
 8002a86:	d906      	bls.n	8002a96 <NextionBig_DataRcv+0xfa>
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
 8002a88:	1d10      	adds	r0, r2, #4
 8002a8a:	4905      	ldr	r1, [pc, #20]	; (8002aa0 <NextionBig_DataRcv+0x104>)
 8002a8c:	4401      	add	r1, r0
 8002a8e:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8002a92:	290a      	cmp	r1, #10
 8002a94:	d086      	beq.n	80029a4 <NextionBig_DataRcv+0x8>
				for(i = start + 1; i < (start + 5); i++){
 8002a96:	3301      	adds	r3, #1
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e7a2      	b.n	80029e2 <NextionBig_DataRcv+0x46>
	}
}
 8002a9c:	b003      	add	sp, #12
 8002a9e:	bd30      	pop	{r4, r5, pc}
 8002aa0:	20002b50 	.word	0x20002b50
 8002aa4:	20002b20 	.word	0x20002b20
 8002aa8:	2000342c 	.word	0x2000342c
 8002aac:	20002c00 	.word	0x20002c00
 8002ab0:	20002b2c 	.word	0x20002b2c

08002ab4 <NextionSmall_DataRcv>:

void NextionSmall_DataRcv (void){
 8002ab4:	b530      	push	{r4, r5, lr}
 8002ab6:	b083      	sub	sp, #12
	uint8_t stopbyte = 0;
 8002ab8:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 8002aba:	e078      	b.n	8002bae <NextionSmall_DataRcv+0xfa>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
		start = nextion_small_comm.UartBufferHead;
		if(len > 3){
			if(len > 9){
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
					memcpy(&number, &nextion_small_comm.UART_Buffer[start], 4);
 8002abc:	f102 0320 	add.w	r3, r2, #32
 8002ac0:	4d49      	ldr	r5, [pc, #292]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002ac2:	442b      	add	r3, r5
 8002ac4:	f8d3 0002 	ldr.w	r0, [r3, #2]
					memcpy(&value, &nextion_small_comm.UART_Buffer[start + 5], 4);
 8002ac8:	3225      	adds	r2, #37	; 0x25
 8002aca:	442a      	add	r2, r5
 8002acc:	f8d2 1002 	ldr.w	r1, [r2, #2]
					nextion_small.param = number;
 8002ad0:	4b46      	ldr	r3, [pc, #280]	; (8002bec <NextionSmall_DataRcv+0x138>)
 8002ad2:	6058      	str	r0, [r3, #4]
					memcpy(&nextion_small.value, &value, 4);
 8002ad4:	6099      	str	r1, [r3, #8]
					Config_ChangeValue(number, value);
 8002ad6:	f7fe fb61 	bl	800119c <Config_ChangeValue>
					nextion_small_comm.UartBufferHead += 10;
 8002ada:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8002ade:	330a      	adds	r3, #10
 8002ae0:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
					xTaskNotifyFromISR(DiplaysHandle, 2, eSetValueWithOverwrite, NULL);
 8002ae4:	4b42      	ldr	r3, [pc, #264]	; (8002bf0 <NextionSmall_DataRcv+0x13c>)
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2203      	movs	r2, #3
 8002aee:	2102      	movs	r1, #2
 8002af0:	f007 fd6c 	bl	800a5cc <xTaskGenericNotifyFromISR>
 8002af4:	e054      	b.n	8002ba0 <NextionSmall_DataRcv+0xec>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 8002af6:	3301      	adds	r3, #1
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	1d51      	adds	r1, r2, #5
 8002afe:	428b      	cmp	r3, r1
 8002b00:	da0a      	bge.n	8002b18 <NextionSmall_DataRcv+0x64>
					if(nextion_small_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 8002b02:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 8002b06:	4938      	ldr	r1, [pc, #224]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002b08:	4401      	add	r1, r0
 8002b0a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8002b0e:	29ff      	cmp	r1, #255	; 0xff
 8002b10:	d1f1      	bne.n	8002af6 <NextionSmall_DataRcv+0x42>
						stopbyte ++;
 8002b12:	3401      	adds	r4, #1
 8002b14:	b2e4      	uxtb	r4, r4
 8002b16:	e7ee      	b.n	8002af6 <NextionSmall_DataRcv+0x42>
					}
				}
				if(stopbyte == 3){
 8002b18:	2c03      	cmp	r4, #3
 8002b1a:	d006      	beq.n	8002b2a <NextionSmall_DataRcv+0x76>
							y = 4;
							break;
					}
					nextion_small_comm.UartBufferHead += y;
				}else{
					nextion_small_comm.UartBufferHead ++;
 8002b1c:	4a32      	ldr	r2, [pc, #200]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002b1e:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8002b22:	3301      	adds	r3, #1
 8002b24:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 8002b28:	e03a      	b.n	8002ba0 <NextionSmall_DataRcv+0xec>
					switch(nextion_small_comm.UART_Buffer[start]){
 8002b2a:	4b2f      	ldr	r3, [pc, #188]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002b32:	2b86      	cmp	r3, #134	; 0x86
 8002b34:	d024      	beq.n	8002b80 <NextionSmall_DataRcv+0xcc>
 8002b36:	d813      	bhi.n	8002b60 <NextionSmall_DataRcv+0xac>
 8002b38:	2b1a      	cmp	r3, #26
 8002b3a:	d01a      	beq.n	8002b72 <NextionSmall_DataRcv+0xbe>
 8002b3c:	2b66      	cmp	r3, #102	; 0x66
 8002b3e:	d129      	bne.n	8002b94 <NextionSmall_DataRcv+0xe0>
							nextion_small.display = nextion_small_comm.UART_Buffer[start + 1];
 8002b40:	3001      	adds	r0, #1
 8002b42:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002b44:	4418      	add	r0, r3
 8002b46:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8002b4a:	4b28      	ldr	r3, [pc, #160]	; (8002bec <NextionSmall_DataRcv+0x138>)
 8002b4c:	701a      	strb	r2, [r3, #0]
							y = 5;
 8002b4e:	2305      	movs	r3, #5
					nextion_small_comm.UartBufferHead += y;
 8002b50:	4a25      	ldr	r2, [pc, #148]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002b52:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 8002b56:	440b      	add	r3, r1
 8002b58:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 8002b5c:	2400      	movs	r4, #0
 8002b5e:	e01f      	b.n	8002ba0 <NextionSmall_DataRcv+0xec>
					switch(nextion_small_comm.UART_Buffer[start]){
 8002b60:	2b87      	cmp	r3, #135	; 0x87
 8002b62:	d012      	beq.n	8002b8a <NextionSmall_DataRcv+0xd6>
 8002b64:	2b88      	cmp	r3, #136	; 0x88
 8002b66:	d115      	bne.n	8002b94 <NextionSmall_DataRcv+0xe0>
							nextion_small.ready = 1;
 8002b68:	4b20      	ldr	r3, [pc, #128]	; (8002bec <NextionSmall_DataRcv+0x138>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	70da      	strb	r2, [r3, #3]
							y = 4;
 8002b6e:	2304      	movs	r3, #4
							break;
 8002b70:	e7ee      	b.n	8002b50 <NextionSmall_DataRcv+0x9c>
							command_correct[current_command] = 1;
 8002b72:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <NextionSmall_DataRcv+0x140>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	4a20      	ldr	r2, [pc, #128]	; (8002bf8 <NextionSmall_DataRcv+0x144>)
 8002b78:	2101      	movs	r1, #1
 8002b7a:	54d1      	strb	r1, [r2, r3]
							y = 4;
 8002b7c:	2304      	movs	r3, #4
							break;
 8002b7e:	e7e7      	b.n	8002b50 <NextionSmall_DataRcv+0x9c>
							nextion_small.sleep = 1;
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <NextionSmall_DataRcv+0x138>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	709a      	strb	r2, [r3, #2]
							y = 4;
 8002b86:	2304      	movs	r3, #4
							break;
 8002b88:	e7e2      	b.n	8002b50 <NextionSmall_DataRcv+0x9c>
							nextion_small.sleep = 0;
 8002b8a:	4b18      	ldr	r3, [pc, #96]	; (8002bec <NextionSmall_DataRcv+0x138>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	709a      	strb	r2, [r3, #2]
							y = 4;
 8002b90:	2304      	movs	r3, #4
							break;
 8002b92:	e7dd      	b.n	8002b50 <NextionSmall_DataRcv+0x9c>
							y = 4;
 8002b94:	2304      	movs	r3, #4
 8002b96:	e7db      	b.n	8002b50 <NextionSmall_DataRcv+0x9c>
				}
			}

		}else{
			//if(nextion_small_comm.UART_Buffer[start] == 0 || nextion_small_comm.UART_Buffer[start] == 255){
				nextion_small_comm.UartBufferHead++;
 8002b98:	3201      	adds	r2, #1
 8002b9a:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002b9c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_small_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 8002ba0:	4a11      	ldr	r2, [pc, #68]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002ba2:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8002ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002baa:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002bb0:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 8002bb4:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 8002bb8:	4291      	cmp	r1, r2
 8002bba:	d012      	beq.n	8002be2 <NextionSmall_DataRcv+0x12e>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 8002bbc:	b2d3      	uxtb	r3, r2
 8002bbe:	1ac9      	subs	r1, r1, r3
 8002bc0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 8002bc4:	2903      	cmp	r1, #3
 8002bc6:	d9e7      	bls.n	8002b98 <NextionSmall_DataRcv+0xe4>
			if(len > 9){
 8002bc8:	2909      	cmp	r1, #9
 8002bca:	d907      	bls.n	8002bdc <NextionSmall_DataRcv+0x128>
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
 8002bcc:	1d10      	adds	r0, r2, #4
 8002bce:	4906      	ldr	r1, [pc, #24]	; (8002be8 <NextionSmall_DataRcv+0x134>)
 8002bd0:	4401      	add	r1, r0
 8002bd2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8002bd6:	290a      	cmp	r1, #10
 8002bd8:	f43f af70 	beq.w	8002abc <NextionSmall_DataRcv+0x8>
				for(i = start + 1; i < (start + 5); i++){
 8002bdc:	3301      	adds	r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	e78b      	b.n	8002afa <NextionSmall_DataRcv+0x46>
	}
}
 8002be2:	b003      	add	sp, #12
 8002be4:	bd30      	pop	{r4, r5, pc}
 8002be6:	bf00      	nop
 8002be8:	20002c04 	.word	0x20002c04
 8002bec:	20002cb4 	.word	0x20002cb4
 8002bf0:	2000342c 	.word	0x2000342c
 8002bf4:	20002c00 	.word	0x20002c00
 8002bf8:	20002b2c 	.word	0x20002b2c

08002bfc <DisplayTask>:
{
 8002bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c00:	ed2d 8b02 	vpush	{d8}
 8002c04:	b089      	sub	sp, #36	; 0x24
	nextion_small.display = 30;
 8002c06:	4a84      	ldr	r2, [pc, #528]	; (8002e18 <DisplayTask+0x21c>)
 8002c08:	231e      	movs	r3, #30
 8002c0a:	7013      	strb	r3, [r2, #0]
	nextion_small.last_display = 30;
 8002c0c:	7053      	strb	r3, [r2, #1]
	nextion_big.display = 30;
 8002c0e:	4d83      	ldr	r5, [pc, #524]	; (8002e1c <DisplayTask+0x220>)
 8002c10:	702b      	strb	r3, [r5, #0]
	nextion_big.last_display = 30;
 8002c12:	706b      	strb	r3, [r5, #1]
	UARTDMA_Init(&nextion_small_comm, NEXTION_SMALL_UART);
 8002c14:	4e82      	ldr	r6, [pc, #520]	; (8002e20 <DisplayTask+0x224>)
 8002c16:	4c83      	ldr	r4, [pc, #524]	; (8002e24 <DisplayTask+0x228>)
 8002c18:	4631      	mov	r1, r6
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f000 ff95 	bl	8003b4a <UARTDMA_Init>
	UARTDMA_Init(&nextion_big_comm, NEXTION_BIG_UART);
 8002c20:	4f81      	ldr	r7, [pc, #516]	; (8002e28 <DisplayTask+0x22c>)
 8002c22:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8002e4c <DisplayTask+0x250>
 8002c26:	4639      	mov	r1, r7
 8002c28:	4640      	mov	r0, r8
 8002c2a:	f000 ff8e 	bl	8003b4a <UARTDMA_Init>
	nextion_big_comm.callback = NextionBig_DataRcv;
 8002c2e:	4b7f      	ldr	r3, [pc, #508]	; (8002e2c <DisplayTask+0x230>)
 8002c30:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
	nextion_small_comm.callback = NextionSmall_DataRcv;
 8002c34:	4b7e      	ldr	r3, [pc, #504]	; (8002e30 <DisplayTask+0x234>)
 8002c36:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	Config_GetEthernetConfig(&configuration);
 8002c3a:	a803      	add	r0, sp, #12
 8002c3c:	f7fe fb44 	bl	80012c8 <Config_GetEthernetConfig>
	RegulationTask_GetData(&RegulationTaskData);
 8002c40:	487c      	ldr	r0, [pc, #496]	; (8002e34 <DisplayTask+0x238>)
 8002c42:	f000 ff21 	bl	8003a88 <RegulationTask_GetData>
	vTaskDelay(1000);
 8002c46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c4a:	f007 f827 	bl	8009c9c <vTaskDelay>
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8002c4e:	4c7a      	ldr	r4, [pc, #488]	; (8002e38 <DisplayTask+0x23c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	497a      	ldr	r1, [pc, #488]	; (8002e3c <DisplayTask+0x240>)
 8002c54:	4620      	mov	r0, r4
 8002c56:	f004 fb8b 	bl	8007370 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	4978      	ldr	r1, [pc, #480]	; (8002e40 <DisplayTask+0x244>)
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f004 fbb1 	bl	80073c6 <HAL_RTC_GetDate>
	nextion_SendData(NEXTION_SMALL_UART, NEX_WAKE, 0, 0, 0);
 8002c64:	2400      	movs	r4, #0
 8002c66:	9400      	str	r4, [sp, #0]
 8002c68:	4623      	mov	r3, r4
 8002c6a:	4622      	mov	r2, r4
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	4630      	mov	r0, r6
 8002c70:	f7ff fd94 	bl	800279c <nextion_SendData>
	vTaskDelay(1);
 8002c74:	2001      	movs	r0, #1
 8002c76:	f007 f811 	bl	8009c9c <vTaskDelay>
	nextion_SendData(NEXTION_SMALL_UART, NEX_SENDME, 0, 0, 0);
 8002c7a:	9400      	str	r4, [sp, #0]
 8002c7c:	4623      	mov	r3, r4
 8002c7e:	4622      	mov	r2, r4
 8002c80:	2101      	movs	r1, #1
 8002c82:	4630      	mov	r0, r6
 8002c84:	f7ff fd8a 	bl	800279c <nextion_SendData>
	vTaskDelay(1);
 8002c88:	2001      	movs	r0, #1
 8002c8a:	f007 f807 	bl	8009c9c <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002c8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c92:	2001      	movs	r0, #1
 8002c94:	f007 fc12 	bl	800a4bc <ulTaskNotifyTake>
	nextion_SendData(NEXTION_BIG_UART, NEX_SENDME, 0, 0, 0);
 8002c98:	9400      	str	r4, [sp, #0]
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	4622      	mov	r2, r4
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4638      	mov	r0, r7
 8002ca2:	f7ff fd7b 	bl	800279c <nextion_SendData>
	vTaskDelay(1);
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	f006 fff8 	bl	8009c9c <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002cac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f007 fc03 	bl	800a4bc <ulTaskNotifyTake>
	if(nextion_big.display != 30){
 8002cb6:	782b      	ldrb	r3, [r5, #0]
 8002cb8:	2b1e      	cmp	r3, #30
 8002cba:	d005      	beq.n	8002cc8 <DisplayTask+0xcc>
		nextion_UpdateTime(NEXTION_BIG_UART);
 8002cbc:	4638      	mov	r0, r7
 8002cbe:	f7ff fe19 	bl	80028f4 <nextion_UpdateTime>
		nextion_SendConfig(NEXTION_BIG_UART);
 8002cc2:	4638      	mov	r0, r7
 8002cc4:	f7ff fdc2 	bl	800284c <nextion_SendConfig>
	if(nextion_small.display != 30){
 8002cc8:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <DisplayTask+0x21c>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b1e      	cmp	r3, #30
 8002cce:	d002      	beq.n	8002cd6 <DisplayTask+0xda>
		nextion_SendConfig(NEXTION_SMALL_UART);
 8002cd0:	4853      	ldr	r0, [pc, #332]	; (8002e20 <DisplayTask+0x224>)
 8002cd2:	f7ff fdbb 	bl	800284c <nextion_SendConfig>
{
 8002cd6:	f04f 0900 	mov.w	r9, #0
 8002cda:	46ca      	mov	sl, r9
 8002cdc:	e02a      	b.n	8002d34 <DisplayTask+0x138>
				nextion_UpdateTime(NEXTION_BIG_UART);
 8002cde:	4852      	ldr	r0, [pc, #328]	; (8002e28 <DisplayTask+0x22c>)
 8002ce0:	f7ff fe08 	bl	80028f4 <nextion_UpdateTime>
				if(nextion_small.display != 30){
 8002ce4:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <DisplayTask+0x21c>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b1e      	cmp	r3, #30
 8002cea:	d031      	beq.n	8002d50 <DisplayTask+0x154>
					nextion_SendData(NEXTION_SMALL_UART, NEX_SETTINGS_LOCK, 0, 0, 0);
 8002cec:	2200      	movs	r2, #0
 8002cee:	9200      	str	r2, [sp, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	2121      	movs	r1, #33	; 0x21
 8002cf4:	484a      	ldr	r0, [pc, #296]	; (8002e20 <DisplayTask+0x224>)
 8002cf6:	f7ff fd51 	bl	800279c <nextion_SendData>
 8002cfa:	e029      	b.n	8002d50 <DisplayTask+0x154>
					nextion_SendData(NEXTION_SMALL_UART, NEX_SETTINGS_UNLOCK, 0, 0, 0);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	9200      	str	r2, [sp, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	2120      	movs	r1, #32
 8002d04:	4846      	ldr	r0, [pc, #280]	; (8002e20 <DisplayTask+0x224>)
 8002d06:	f7ff fd49 	bl	800279c <nextion_SendData>
 8002d0a:	e021      	b.n	8002d50 <DisplayTask+0x154>
				if(nextion_big.display != 30){
 8002d0c:	4b43      	ldr	r3, [pc, #268]	; (8002e1c <DisplayTask+0x220>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b1e      	cmp	r3, #30
 8002d12:	d133      	bne.n	8002d7c <DisplayTask+0x180>
		if(nextion_big.display == 1){
 8002d14:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <DisplayTask+0x220>)
 8002d16:	781d      	ldrb	r5, [r3, #0]
 8002d18:	2d01      	cmp	r5, #1
 8002d1a:	d037      	beq.n	8002d8c <DisplayTask+0x190>
		vTaskDelay(1000);
 8002d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d20:	f006 ffbc 	bl	8009c9c <vTaskDelay>
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002d24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d28:	2001      	movs	r0, #1
 8002d2a:	f007 fbc7 	bl	800a4bc <ulTaskNotifyTake>
		if(ulNotificationValue > 0){
 8002d2e:	2800      	cmp	r0, #0
 8002d30:	f040 812c 	bne.w	8002f8c <DisplayTask+0x390>
		RegulationTask_GetData(&RegulationTaskData);
 8002d34:	483f      	ldr	r0, [pc, #252]	; (8002e34 <DisplayTask+0x238>)
 8002d36:	f000 fea7 	bl	8003a88 <RegulationTask_GetData>
		if(nextion_big.display != nextion_big.last_display){
 8002d3a:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <DisplayTask+0x220>)
 8002d3c:	781a      	ldrb	r2, [r3, #0]
 8002d3e:	785b      	ldrb	r3, [r3, #1]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d008      	beq.n	8002d56 <DisplayTask+0x15a>
			if(nextion_big.display == 2){
 8002d44:	2a02      	cmp	r2, #2
 8002d46:	d0ca      	beq.n	8002cde <DisplayTask+0xe2>
				if(nextion_small.display != 30){
 8002d48:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <DisplayTask+0x21c>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b1e      	cmp	r3, #30
 8002d4e:	d1d5      	bne.n	8002cfc <DisplayTask+0x100>
			nextion_big.last_display = nextion_big.display;
 8002d50:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <DisplayTask+0x220>)
 8002d52:	781a      	ldrb	r2, [r3, #0]
 8002d54:	705a      	strb	r2, [r3, #1]
		if(nextion_small.display != nextion_small.last_display){
 8002d56:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <DisplayTask+0x21c>)
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	785b      	ldrb	r3, [r3, #1]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d0d9      	beq.n	8002d14 <DisplayTask+0x118>
			if(nextion_small.display == 1){
 8002d60:	2a01      	cmp	r2, #1
 8002d62:	d0d3      	beq.n	8002d0c <DisplayTask+0x110>
				if(nextion_big.display != 30){
 8002d64:	4b2d      	ldr	r3, [pc, #180]	; (8002e1c <DisplayTask+0x220>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b1e      	cmp	r3, #30
 8002d6a:	d0d3      	beq.n	8002d14 <DisplayTask+0x118>
					nextion_SendData(NEXTION_BIG_UART, NEX_SETTINGS_UNLOCK, 0, 0, 0);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	9200      	str	r2, [sp, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	2120      	movs	r1, #32
 8002d74:	482c      	ldr	r0, [pc, #176]	; (8002e28 <DisplayTask+0x22c>)
 8002d76:	f7ff fd11 	bl	800279c <nextion_SendData>
 8002d7a:	e7cb      	b.n	8002d14 <DisplayTask+0x118>
					nextion_SendData(NEXTION_BIG_UART, NEX_SETTINGS_LOCK, 0, 0, 0);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	9200      	str	r2, [sp, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	2121      	movs	r1, #33	; 0x21
 8002d84:	4828      	ldr	r0, [pc, #160]	; (8002e28 <DisplayTask+0x22c>)
 8002d86:	f7ff fd09 	bl	800279c <nextion_SendData>
 8002d8a:	e7c3      	b.n	8002d14 <DisplayTask+0x118>
			nextion_SendData(NEXTION_BIG_UART, NEX_COUNTER_PRESENCE, RegulationTaskData.counter.counter_present, 0, 0);
 8002d8c:	4e29      	ldr	r6, [pc, #164]	; (8002e34 <DisplayTask+0x238>)
 8002d8e:	7832      	ldrb	r2, [r6, #0]
 8002d90:	4f25      	ldr	r7, [pc, #148]	; (8002e28 <DisplayTask+0x22c>)
 8002d92:	2400      	movs	r4, #0
 8002d94:	9400      	str	r4, [sp, #0]
 8002d96:	4623      	mov	r3, r4
 8002d98:	2113      	movs	r1, #19
 8002d9a:	4638      	mov	r0, r7
 8002d9c:	f7ff fcfe 	bl	800279c <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_TSENS_PRESENCE, RegulationTaskData.counter.temperatures_present, 0, 0);
 8002da0:	78b2      	ldrb	r2, [r6, #2]
 8002da2:	9400      	str	r4, [sp, #0]
 8002da4:	4623      	mov	r3, r4
 8002da6:	2114      	movs	r1, #20
 8002da8:	4638      	mov	r0, r7
 8002daa:	f7ff fcf7 	bl	800279c <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_MAIN_SW, RegulationTaskData.ControlWord.MainSwitch_State, 0, 0);
 8002dae:	f896 2068 	ldrb.w	r2, [r6, #104]	; 0x68
 8002db2:	9400      	str	r4, [sp, #0]
 8002db4:	4623      	mov	r3, r4
 8002db6:	f002 0201 	and.w	r2, r2, #1
 8002dba:	2115      	movs	r1, #21
 8002dbc:	4638      	mov	r0, r7
 8002dbe:	f7ff fced 	bl	800279c <nextion_SendData>
			if(RegulationTaskData.ControlWord.CWUHeaterError || RegulationTaskData.IOsignals.signals.input4){
 8002dc2:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8002dc4:	4a1f      	ldr	r2, [pc, #124]	; (8002e44 <DisplayTask+0x248>)
 8002dc6:	421a      	tst	r2, r3
 8002dc8:	d106      	bne.n	8002dd8 <DisplayTask+0x1dc>
			}else if(RegulationTaskData.ControlWord.CWUHeaterStateOut){
 8002dca:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
 8002dce:	f013 0f01 	tst.w	r3, #1
 8002dd2:	d015      	beq.n	8002e00 <DisplayTask+0x204>
				pic = 2;
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	e000      	b.n	8002dda <DisplayTask+0x1de>
				pic = 3;
 8002dd8:	2203      	movs	r2, #3
			nextion_SendData(NEXTION_BIG_UART, NEX_CWU_PIC, pic, 0, 0);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	2116      	movs	r1, #22
 8002de0:	4811      	ldr	r0, [pc, #68]	; (8002e28 <DisplayTask+0x22c>)
 8002de2:	f7ff fcdb 	bl	800279c <nextion_SendData>
			if(RegulationTaskData.ControlWord.COHeaterError || RegulationTaskData.IOsignals.signals.input5){
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <DisplayTask+0x238>)
 8002de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dea:	4a17      	ldr	r2, [pc, #92]	; (8002e48 <DisplayTask+0x24c>)
 8002dec:	421a      	tst	r2, r3
 8002dee:	d109      	bne.n	8002e04 <DisplayTask+0x208>
			}else if(RegulationTaskData.ControlWord.COHeaterStateOut){
 8002df0:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <DisplayTask+0x238>)
 8002df2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002df6:	f013 0f01 	tst.w	r3, #1
 8002dfa:	d004      	beq.n	8002e06 <DisplayTask+0x20a>
				pic = 2;
 8002dfc:	2502      	movs	r5, #2
 8002dfe:	e002      	b.n	8002e06 <DisplayTask+0x20a>
				pic = 1;
 8002e00:	462a      	mov	r2, r5
 8002e02:	e7ea      	b.n	8002dda <DisplayTask+0x1de>
				pic = 3;
 8002e04:	2503      	movs	r5, #3
			nextion_SendData(NEXTION_BIG_UART, NEX_CO_PIC, pic, 0, 0);
 8002e06:	2400      	movs	r4, #0
 8002e08:	9400      	str	r4, [sp, #0]
 8002e0a:	4623      	mov	r3, r4
 8002e0c:	462a      	mov	r2, r5
 8002e0e:	2117      	movs	r1, #23
 8002e10:	4805      	ldr	r0, [pc, #20]	; (8002e28 <DisplayTask+0x22c>)
 8002e12:	f7ff fcc3 	bl	800279c <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 8002e16:	e0b5      	b.n	8002f84 <DisplayTask+0x388>
 8002e18:	20002cb4 	.word	0x20002cb4
 8002e1c:	20002b20 	.word	0x20002b20
 8002e20:	20003230 	.word	0x20003230
 8002e24:	20002c04 	.word	0x20002c04
 8002e28:	20003314 	.word	0x20003314
 8002e2c:	0800299d 	.word	0x0800299d
 8002e30:	08002ab5 	.word	0x08002ab5
 8002e34:	20002cd4 	.word	0x20002cd4
 8002e38:	200032b4 	.word	0x200032b4
 8002e3c:	20002cc0 	.word	0x20002cc0
 8002e40:	20002d64 	.word	0x20002d64
 8002e44:	10000001 	.word	0x10000001
 8002e48:	08000001 	.word	0x08000001
 8002e4c:	20002b50 	.word	0x20002b50
				rest = (uint32_t)(RegulationTaskData.counter.voltages[i] * 10.0) % 10;
 8002e50:	4d59      	ldr	r5, [pc, #356]	; (8002fb8 <DisplayTask+0x3bc>)
 8002e52:	f104 030a 	add.w	r3, r4, #10
 8002e56:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002e5a:	ed93 8a00 	vldr	s16, [r3]
 8002e5e:	ee18 0a10 	vmov	r0, s16
 8002e62:	f7fd fb79 	bl	8000558 <__aeabi_f2d>
 8002e66:	2200      	movs	r2, #0
 8002e68:	4b54      	ldr	r3, [pc, #336]	; (8002fbc <DisplayTask+0x3c0>)
 8002e6a:	f7fd fbcd 	bl	8000608 <__aeabi_dmul>
 8002e6e:	f7fd fddd 	bl	8000a2c <__aeabi_d2uiz>
 8002e72:	f8df b160 	ldr.w	fp, [pc, #352]	; 8002fd4 <DisplayTask+0x3d8>
 8002e76:	fbab 2300 	umull	r2, r3, fp, r0
 8002e7a:	08db      	lsrs	r3, r3, #3
 8002e7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e80:	005a      	lsls	r2, r3, #1
 8002e82:	1a83      	subs	r3, r0, r2
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_VOLTAGE, i + 1, (uint32_t)RegulationTaskData.counter.voltages[i], rest);
 8002e84:	1c66      	adds	r6, r4, #1
 8002e86:	4f4e      	ldr	r7, [pc, #312]	; (8002fc0 <DisplayTask+0x3c4>)
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002e8e:	ee17 3a90 	vmov	r3, s15
 8002e92:	4632      	mov	r2, r6
 8002e94:	2118      	movs	r1, #24
 8002e96:	4638      	mov	r0, r7
 8002e98:	f7ff fc80 	bl	800279c <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.currents[i] * 100.0) % 100;
 8002e9c:	f104 030c 	add.w	r3, r4, #12
 8002ea0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002ea4:	ed93 8a01 	vldr	s16, [r3, #4]
 8002ea8:	ee18 0a10 	vmov	r0, s16
 8002eac:	f7fd fb54 	bl	8000558 <__aeabi_f2d>
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	4b44      	ldr	r3, [pc, #272]	; (8002fc4 <DisplayTask+0x3c8>)
 8002eb4:	f7fd fba8 	bl	8000608 <__aeabi_dmul>
 8002eb8:	f7fd fdb8 	bl	8000a2c <__aeabi_d2uiz>
 8002ebc:	4b42      	ldr	r3, [pc, #264]	; (8002fc8 <DisplayTask+0x3cc>)
 8002ebe:	fba3 2300 	umull	r2, r3, r3, r0
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	2264      	movs	r2, #100	; 0x64
 8002ec6:	fb02 0313 	mls	r3, r2, r3, r0
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_CURRENT, i + 1, (uint32_t)RegulationTaskData.counter.currents[i], rest);
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002ed0:	ee17 3a90 	vmov	r3, s15
 8002ed4:	4632      	mov	r2, r6
 8002ed6:	2119      	movs	r1, #25
 8002ed8:	4638      	mov	r0, r7
 8002eda:	f7ff fc5f 	bl	800279c <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.powers[i] * 10.0) % 10;
 8002ede:	f104 0810 	add.w	r8, r4, #16
 8002ee2:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 8002ee6:	ed98 8a00 	vldr	s16, [r8]
 8002eea:	ee18 0a10 	vmov	r0, s16
 8002eee:	f7fd fb33 	bl	8000558 <__aeabi_f2d>
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <DisplayTask+0x3c0>)
 8002ef6:	f7fd fb87 	bl	8000608 <__aeabi_dmul>
 8002efa:	f7fd fd97 	bl	8000a2c <__aeabi_d2uiz>
 8002efe:	fbab 3200 	umull	r3, r2, fp, r0
 8002f02:	08d2      	lsrs	r2, r2, #3
 8002f04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002f08:	0053      	lsls	r3, r2, #1
 8002f0a:	1ac2      	subs	r2, r0, r3
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_POWER, i + 1, (uint32_t)RegulationTaskData.counter.powers[i], rest);
 8002f0c:	9200      	str	r2, [sp, #0]
 8002f0e:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002f12:	ee17 3a90 	vmov	r3, s15
 8002f16:	4632      	mov	r2, r6
 8002f18:	211a      	movs	r1, #26
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	f7ff fc3e 	bl	800279c <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.powers[i] / RegulationTaskData.parameters.net_max_power * 100.0);
 8002f20:	edd8 7a00 	vldr	s15, [r8]
 8002f24:	f8d5 0075 	ldr.w	r0, [r5, #117]	; 0x75
 8002f28:	ee07 0a10 	vmov	s14, r0
 8002f2c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002f30:	ee17 0a90 	vmov	r0, s15
 8002f34:	f7fd fb10 	bl	8000558 <__aeabi_f2d>
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <DisplayTask+0x3c8>)
 8002f3c:	f7fd fb64 	bl	8000608 <__aeabi_dmul>
 8002f40:	f7fd fd74 	bl	8000a2c <__aeabi_d2uiz>
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_PRG_BAR, i + 1, rest, 0);
 8002f44:	f04f 0800 	mov.w	r8, #0
 8002f48:	f8cd 8000 	str.w	r8, [sp]
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4632      	mov	r2, r6
 8002f50:	211b      	movs	r1, #27
 8002f52:	4638      	mov	r0, r7
 8002f54:	f7ff fc22 	bl	800279c <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_CO_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CO_heater_PWM[i], 0);
 8002f58:	1d23      	adds	r3, r4, #4
 8002f5a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002f5e:	885b      	ldrh	r3, [r3, #2]
 8002f60:	f8cd 8000 	str.w	r8, [sp]
 8002f64:	4632      	mov	r2, r6
 8002f66:	211c      	movs	r1, #28
 8002f68:	4638      	mov	r0, r7
 8002f6a:	f7ff fc17 	bl	800279c <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_CWU_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CWU_heater_PWM[i], 0);
 8002f6e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8002f72:	88a3      	ldrh	r3, [r4, #4]
 8002f74:	f8cd 8000 	str.w	r8, [sp]
 8002f78:	4632      	mov	r2, r6
 8002f7a:	211d      	movs	r1, #29
 8002f7c:	4638      	mov	r0, r7
 8002f7e:	f7ff fc0d 	bl	800279c <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 8002f82:	b2f4      	uxtb	r4, r6
 8002f84:	2c02      	cmp	r4, #2
 8002f86:	f67f af63 	bls.w	8002e50 <DisplayTask+0x254>
 8002f8a:	e6c7      	b.n	8002d1c <DisplayTask+0x120>
			if(ulNotificationValue == 1){
 8002f8c:	2801      	cmp	r0, #1
 8002f8e:	d006      	beq.n	8002f9e <DisplayTask+0x3a2>
			}else if(ulNotificationValue == 2){
 8002f90:	2802      	cmp	r0, #2
 8002f92:	d00a      	beq.n	8002faa <DisplayTask+0x3ae>
			Config_ChangeValue(param, (void*)valPtr);
 8002f94:	4649      	mov	r1, r9
 8002f96:	4650      	mov	r0, sl
 8002f98:	f7fe f900 	bl	800119c <Config_ChangeValue>
 8002f9c:	e6ca      	b.n	8002d34 <DisplayTask+0x138>
				param = nextion_big.param;
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <DisplayTask+0x3d0>)
 8002fa0:	f8d3 a004 	ldr.w	sl, [r3, #4]
				valPtr = &nextion_big.value[0];
 8002fa4:	f103 0908 	add.w	r9, r3, #8
 8002fa8:	e7f4      	b.n	8002f94 <DisplayTask+0x398>
				param = nextion_small.param;
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <DisplayTask+0x3d4>)
 8002fac:	f8d3 a004 	ldr.w	sl, [r3, #4]
				valPtr = &nextion_small.value[0];
 8002fb0:	f103 0908 	add.w	r9, r3, #8
 8002fb4:	e7ee      	b.n	8002f94 <DisplayTask+0x398>
 8002fb6:	bf00      	nop
 8002fb8:	20002cd4 	.word	0x20002cd4
 8002fbc:	40240000 	.word	0x40240000
 8002fc0:	20003314 	.word	0x20003314
 8002fc4:	40590000 	.word	0x40590000
 8002fc8:	51eb851f 	.word	0x51eb851f
 8002fcc:	20002b20 	.word	0x20002b20
 8002fd0:	20002cb4 	.word	0x20002cb4
 8002fd4:	cccccccd 	.word	0xcccccccd

08002fd8 <W5500_WriteBuff>:

static void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
}

static void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8002fd8:	b508      	push	{r3, lr}
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fde:	460a      	mov	r2, r1
 8002fe0:	4601      	mov	r1, r0
 8002fe2:	4802      	ldr	r0, [pc, #8]	; (8002fec <W5500_WriteBuff+0x14>)
 8002fe4:	f004 fb22 	bl	800762c <HAL_SPI_Transmit>
}
 8002fe8:	bd08      	pop	{r3, pc}
 8002fea:	bf00      	nop
 8002fec:	20003354 	.word	0x20003354

08002ff0 <W5500_WriteByte>:
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
    return byte;
}

static void W5500_WriteByte(uint8_t byte) {
 8002ff0:	b500      	push	{lr}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	ab02      	add	r3, sp, #8
 8002ff6:	f803 0d01 	strb.w	r0, [r3, #-1]!
    W5500_WriteBuff(&byte, sizeof(byte));
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ffeb 	bl	8002fd8 <W5500_WriteBuff>
}
 8003002:	b003      	add	sp, #12
 8003004:	f85d fb04 	ldr.w	pc, [sp], #4

08003008 <W5500_ReadBuff>:
static void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8003008:	b508      	push	{r3, lr}
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 800300a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800300e:	460a      	mov	r2, r1
 8003010:	4601      	mov	r1, r0
 8003012:	4802      	ldr	r0, [pc, #8]	; (800301c <W5500_ReadBuff+0x14>)
 8003014:	f004 fcee 	bl	80079f4 <HAL_SPI_Receive>
}
 8003018:	bd08      	pop	{r3, pc}
 800301a:	bf00      	nop
 800301c:	20003354 	.word	0x20003354

08003020 <W5500_ReadByte>:
static uint8_t W5500_ReadByte(void) {
 8003020:	b500      	push	{lr}
 8003022:	b083      	sub	sp, #12
    W5500_ReadBuff(&byte, sizeof(byte));
 8003024:	2101      	movs	r1, #1
 8003026:	f10d 0007 	add.w	r0, sp, #7
 800302a:	f7ff ffed 	bl	8003008 <W5500_ReadBuff>
}
 800302e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003032:	b003      	add	sp, #12
 8003034:	f85d fb04 	ldr.w	pc, [sp], #4

08003038 <cs_desel>:
static void cs_desel() {
 8003038:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET); //CS HIGH
 800303a:	2201      	movs	r2, #1
 800303c:	2110      	movs	r1, #16
 800303e:	4805      	ldr	r0, [pc, #20]	; (8003054 <cs_desel+0x1c>)
 8003040:	f002 fec9 	bl	8005dd6 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8003044:	2300      	movs	r3, #0
 8003046:	461a      	mov	r2, r3
 8003048:	4619      	mov	r1, r3
 800304a:	4803      	ldr	r0, [pc, #12]	; (8003058 <cs_desel+0x20>)
 800304c:	6800      	ldr	r0, [r0, #0]
 800304e:	f005 ff0d 	bl	8008e6c <xQueueGenericSend>
}
 8003052:	bd08      	pop	{r3, pc}
 8003054:	40020000 	.word	0x40020000
 8003058:	20003430 	.word	0x20003430

0800305c <cs_sel>:
static void cs_sel() {
 800305c:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 800305e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <cs_sel+0x1c>)
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	f006 f8f7 	bl	8009258 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET); //CS LOW
 800306a:	2200      	movs	r2, #0
 800306c:	2110      	movs	r1, #16
 800306e:	4803      	ldr	r0, [pc, #12]	; (800307c <cs_sel+0x20>)
 8003070:	f002 feb1 	bl	8005dd6 <HAL_GPIO_WritePin>
}
 8003074:	bd08      	pop	{r3, pc}
 8003076:	bf00      	nop
 8003078:	20003430 	.word	0x20003430
 800307c:	40020000 	.word	0x40020000

08003080 <EthernetTask>:
	                     .gw 	= {192, 168, 0, 1}};					// Gateway address

EthernetConfig_t ethConf;

void EthernetTask(void const * argument)
{
 8003080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003084:	b086      	sub	sp, #24
	uint8_t first_frame = 1;
	uint8_t remoteIP[4][4];
	uint16_t remotePort[4];
	int32_t rcvSize = 0;

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8003086:	49a6      	ldr	r1, [pc, #664]	; (8003320 <EthernetTask+0x2a0>)
 8003088:	48a6      	ldr	r0, [pc, #664]	; (8003324 <EthernetTask+0x2a4>)
 800308a:	f7fe ff51 	bl	8001f30 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 800308e:	49a6      	ldr	r1, [pc, #664]	; (8003328 <EthernetTask+0x2a8>)
 8003090:	48a6      	ldr	r0, [pc, #664]	; (800332c <EthernetTask+0x2ac>)
 8003092:	f7fe ff5f 	bl	8001f54 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8003096:	49a6      	ldr	r1, [pc, #664]	; (8003330 <EthernetTask+0x2b0>)
 8003098:	48a6      	ldr	r0, [pc, #664]	; (8003334 <EthernetTask+0x2b4>)
 800309a:	f7fe ff73 	bl	8001f84 <reg_wizchip_spiburst_cbfunc>

	CLI_Init();
 800309e:	f7fe f847 	bl	8001130 <CLI_Init>

	if(Config_GetEthernetConfig(&ethConf) != CONF_OK){
 80030a2:	48a5      	ldr	r0, [pc, #660]	; (8003338 <EthernetTask+0x2b8>)
 80030a4:	f7fe f910 	bl	80012c8 <Config_GetEthernetConfig>
 80030a8:	b110      	cbz	r0, 80030b0 <EthernetTask+0x30>
		vTaskSuspend(NULL);
 80030aa:	2000      	movs	r0, #0
 80030ac:	f006 fe7a 	bl	8009da4 <vTaskSuspend>
	}

	memcpy(&netInfo.gw, &ethConf.gatewayAddress, 4);
 80030b0:	4ba1      	ldr	r3, [pc, #644]	; (8003338 <EthernetTask+0x2b8>)
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	4ca1      	ldr	r4, [pc, #644]	; (800333c <EthernetTask+0x2bc>)
 80030b6:	f8c4 200e 	str.w	r2, [r4, #14]
	memcpy(&netInfo.ip, &ethConf.ipAddress, 4);
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	f8c4 2006 	str.w	r2, [r4, #6]
	memcpy(&netInfo.mac, &ethConf.macAddress, 6);
 80030c0:	461a      	mov	r2, r3
 80030c2:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 80030c6:	6020      	str	r0, [r4, #0]
 80030c8:	8892      	ldrh	r2, [r2, #4]
 80030ca:	80a2      	strh	r2, [r4, #4]
	memcpy(&netInfo.sn, &ethConf.subnetMask, 4);
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f8c4 300a 	str.w	r3, [r4, #10]
	wizchip_init(bufSize, bufSize);
 80030d2:	489b      	ldr	r0, [pc, #620]	; (8003340 <EthernetTask+0x2c0>)
 80030d4:	4601      	mov	r1, r0
 80030d6:	f7fe ffa9 	bl	800202c <wizchip_init>

	wizchip_setnetinfo(&netInfo);
 80030da:	4620      	mov	r0, r4
 80030dc:	f7ff f80a 	bl	80020f4 <wizchip_setnetinfo>
	wizchip_setinterruptmask(IK_SOCK_3);
 80030e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80030e4:	f7fe fff8 	bl	80020d8 <wizchip_setinterruptmask>
	wizchip_getnetinfo(&netInfo);
 80030e8:	4620      	mov	r0, r4
 80030ea:	f7ff f831 	bl	8002150 <wizchip_getnetinfo>

	// Modbus Port
	if(socket(0, Sn_MR_TCP, 502, 0) == 0) {
 80030ee:	2300      	movs	r3, #0
 80030f0:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 80030f4:	2101      	movs	r1, #1
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe fc18 	bl	800192c <socket>
 80030fc:	b908      	cbnz	r0, 8003102 <EthernetTask+0x82>
		  	  /* Put socket in LISTEN mode. This means we are creating a TCP server */
		if(listen(0) == SOCK_OK) {
 80030fe:	f7fe fcc1 	bl	8001a84 <listen>
	//if(socket(2, Sn_MR_TCP, 1883, 0) == 0){

	//}

	// Telnet Port (CLI, debug)
	if(socket(3, Sn_MR_TCP, 23, SF_TCP_NODELAY) == 3){
 8003102:	2320      	movs	r3, #32
 8003104:	2217      	movs	r2, #23
 8003106:	2101      	movs	r1, #1
 8003108:	2003      	movs	r0, #3
 800310a:	f7fe fc0f 	bl	800192c <socket>
 800310e:	2803      	cmp	r0, #3
 8003110:	d108      	bne.n	8003124 <EthernetTask+0xa4>
		if(listen(3) == SOCK_OK) {
 8003112:	f7fe fcb7 	bl	8001a84 <listen>
 8003116:	2801      	cmp	r0, #1
 8003118:	d104      	bne.n	8003124 <EthernetTask+0xa4>
			setSn_IMR(3, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 800311a:	211f      	movs	r1, #31
 800311c:	f642 4068 	movw	r0, #11368	; 0x2c68
 8003120:	f7fe fa5a 	bl	80015d8 <WIZCHIP_WRITE>
{
 8003124:	2701      	movs	r7, #1
	}

  /* Infinite loop */
	for(;;)
	{
		if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 8003126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800312a:	2200      	movs	r2, #0
 800312c:	4619      	mov	r1, r3
 800312e:	4618      	mov	r0, r3
 8003130:	f007 fa00 	bl	800a534 <xTaskNotifyWait>
 8003134:	2801      	cmp	r0, #1
 8003136:	d1f6      	bne.n	8003126 <EthernetTask+0xa6>
 8003138:	e0c5      	b.n	80032c6 <EthernetTask+0x246>
				if(interruptSource & IK_IP_CONFLICT){

				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_0){
					interrupt = getSn_IR(0);
 800313a:	f44f 7002 	mov.w	r0, #520	; 0x208
 800313e:	f7fe fa19 	bl	8001574 <WIZCHIP_READ>
					if(interrupt & Sn_IR_CON){
 8003142:	f010 0f01 	tst.w	r0, #1
 8003146:	f000 80cc 	beq.w	80032e2 <EthernetTask+0x262>
						getsockopt(0, SO_DESTIP, &remoteIP[0]);
 800314a:	aa02      	add	r2, sp, #8
 800314c:	2104      	movs	r1, #4
 800314e:	2000      	movs	r0, #0
 8003150:	f7fe fe2a 	bl	8001da8 <getsockopt>
						getsockopt(0, SO_DESTPORT, (uint8_t*)&remotePort[0]);
 8003154:	466a      	mov	r2, sp
 8003156:	2105      	movs	r1, #5
 8003158:	2000      	movs	r0, #0
 800315a:	f7fe fe25 	bl	8001da8 <getsockopt>
 800315e:	e0c0      	b.n	80032e2 <EthernetTask+0x262>
					}
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_1){
					interrupt = getSn_IR(1);
 8003160:	f44f 700a 	mov.w	r0, #552	; 0x228
 8003164:	f7fe fa06 	bl	8001574 <WIZCHIP_READ>
					if(interrupt & Sn_IR_CON){
 8003168:	f010 0f01 	tst.w	r0, #1
 800316c:	f000 80bd 	beq.w	80032ea <EthernetTask+0x26a>
						getsockopt(1, SO_DESTIP, &remoteIP[1]);
 8003170:	aa03      	add	r2, sp, #12
 8003172:	2104      	movs	r1, #4
 8003174:	2001      	movs	r0, #1
 8003176:	f7fe fe17 	bl	8001da8 <getsockopt>
						getsockopt(1, SO_DESTPORT, (uint8_t*)&remotePort[1]);
 800317a:	f10d 0202 	add.w	r2, sp, #2
 800317e:	2105      	movs	r1, #5
 8003180:	2001      	movs	r0, #1
 8003182:	f7fe fe11 	bl	8001da8 <getsockopt>
 8003186:	e0b0      	b.n	80032ea <EthernetTask+0x26a>

					}
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_2){
					interrupt = getSn_IR(2);
 8003188:	f44f 7012 	mov.w	r0, #584	; 0x248
 800318c:	f7fe f9f2 	bl	8001574 <WIZCHIP_READ>
 8003190:	e0af      	b.n	80032f2 <EthernetTask+0x272>
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_3){
					freesize = getSn_TxMAX(3);
 8003192:	f641 7068 	movw	r0, #8040	; 0x1f68
 8003196:	f7fe f9ed 	bl	8001574 <WIZCHIP_READ>
 800319a:	b280      	uxth	r0, r0
 800319c:	0280      	lsls	r0, r0, #10
 800319e:	4b69      	ldr	r3, [pc, #420]	; (8003344 <EthernetTask+0x2c4>)
 80031a0:	8018      	strh	r0, [r3, #0]
					interrupt = getSn_IR(3);
 80031a2:	f44f 701a 	mov.w	r0, #616	; 0x268
 80031a6:	f7fe f9e5 	bl	8001574 <WIZCHIP_READ>
 80031aa:	4605      	mov	r5, r0
					setSn_IR(3, interrupt);
 80031ac:	f000 011f 	and.w	r1, r0, #31
 80031b0:	f44f 701a 	mov.w	r0, #616	; 0x268
 80031b4:	f7fe fa10 	bl	80015d8 <WIZCHIP_WRITE>
					if(interrupt & Sn_IR_CON){
 80031b8:	f015 0f01 	tst.w	r5, #1
 80031bc:	d128      	bne.n	8003210 <EthernetTask+0x190>
						RuntimeStats_TelnetTxInc();
						freesize = send(3, (uint8_t*)gretMsg, 47);
						first_frame = 1;
					}

					if(interrupt & Sn_IR_RECV){
 80031be:	f015 0f04 	tst.w	r5, #4
 80031c2:	d007      	beq.n	80031d4 <EthernetTask+0x154>
						if(first_frame == 0){
 80031c4:	2f00      	cmp	r7, #0
 80031c6:	d03c      	beq.n	8003242 <EthernetTask+0x1c2>
								freesize = send(3, txBuf, strlen((char*)txBuf));
								vTaskDelay(1);
							}while(xMoreDataToFollow != pdFALSE);
							rcvSize = 0;
						}else{
							recv(3, rcvBuf, 128);
 80031c8:	2280      	movs	r2, #128	; 0x80
 80031ca:	495f      	ldr	r1, [pc, #380]	; (8003348 <EthernetTask+0x2c8>)
 80031cc:	2003      	movs	r0, #3
 80031ce:	f7fe fd79 	bl	8001cc4 <recv>
							first_frame = 0;
 80031d2:	2700      	movs	r7, #0
						}
					}

					if(interrupt & Sn_IR_SENDOK){
 80031d4:	f015 0f10 	tst.w	r5, #16
 80031d8:	d164      	bne.n	80032a4 <EthernetTask+0x224>
						ClrSiS(3);
					}

					if(interrupt & Sn_IR_DISCON || interrupt & Sn_IR_TIMEOUT){
 80031da:	f015 0f0a 	tst.w	r5, #10
 80031de:	f000 808c 	beq.w	80032fa <EthernetTask+0x27a>
						RuntimeStats_TelnetLastIPSet();
 80031e2:	f7ff fa55 	bl	8002690 <RuntimeStats_TelnetLastIPSet>
						disconnect(3);
 80031e6:	2003      	movs	r0, #3
 80031e8:	f7fe fc82 	bl	8001af0 <disconnect>
						if(socket(3, Sn_MR_TCP, 23, SF_TCP_NODELAY) == 3){
 80031ec:	2320      	movs	r3, #32
 80031ee:	2217      	movs	r2, #23
 80031f0:	2101      	movs	r1, #1
 80031f2:	2003      	movs	r0, #3
 80031f4:	f7fe fb9a 	bl	800192c <socket>
 80031f8:	2803      	cmp	r0, #3
 80031fa:	d17e      	bne.n	80032fa <EthernetTask+0x27a>
							if(listen(3) == SOCK_OK) {
 80031fc:	f7fe fc42 	bl	8001a84 <listen>
 8003200:	2801      	cmp	r0, #1
 8003202:	d17a      	bne.n	80032fa <EthernetTask+0x27a>
								setSn_IMR(3, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 8003204:	211f      	movs	r1, #31
 8003206:	f642 4068 	movw	r0, #11368	; 0x2c68
 800320a:	f7fe f9e5 	bl	80015d8 <WIZCHIP_WRITE>
 800320e:	e074      	b.n	80032fa <EthernetTask+0x27a>
						getsockopt(3, SO_DESTIP, &remoteIP[3]);
 8003210:	aa05      	add	r2, sp, #20
 8003212:	2104      	movs	r1, #4
 8003214:	2003      	movs	r0, #3
 8003216:	f7fe fdc7 	bl	8001da8 <getsockopt>
						getsockopt(3, SO_DESTPORT, (uint8_t*)&remotePort[3]);
 800321a:	f10d 0206 	add.w	r2, sp, #6
 800321e:	2105      	movs	r1, #5
 8003220:	2003      	movs	r0, #3
 8003222:	f7fe fdc1 	bl	8001da8 <getsockopt>
						RuntimeStats_TelnetCurrIPSet(&remoteIP[3][0]);
 8003226:	a805      	add	r0, sp, #20
 8003228:	f7ff fa2c 	bl	8002684 <RuntimeStats_TelnetCurrIPSet>
						RuntimeStats_TelnetTxInc();
 800322c:	f7ff fa22 	bl	8002674 <RuntimeStats_TelnetTxInc>
						freesize = send(3, (uint8_t*)gretMsg, 47);
 8003230:	222f      	movs	r2, #47	; 0x2f
 8003232:	4946      	ldr	r1, [pc, #280]	; (800334c <EthernetTask+0x2cc>)
 8003234:	2003      	movs	r0, #3
 8003236:	f7fe fca3 	bl	8001b80 <send>
 800323a:	4b42      	ldr	r3, [pc, #264]	; (8003344 <EthernetTask+0x2c4>)
 800323c:	8018      	strh	r0, [r3, #0]
						first_frame = 1;
 800323e:	2701      	movs	r7, #1
 8003240:	e7bd      	b.n	80031be <EthernetTask+0x13e>
							RuntimeStats_TelnetRxInc();
 8003242:	f7ff fa0f 	bl	8002664 <RuntimeStats_TelnetRxInc>
							rcvSize += recv(3, &rcvBuf[rcvSize], RX_BUF_SIZE);
 8003246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800324a:	493f      	ldr	r1, [pc, #252]	; (8003348 <EthernetTask+0x2c8>)
 800324c:	2003      	movs	r0, #3
 800324e:	f7fe fd39 	bl	8001cc4 <recv>
							while(((rcvBuf[rcvSize - 1] == '\r') || (rcvBuf[rcvSize - 1] == '\n')) && (rcvSize > 0)){
 8003252:	e005      	b.n	8003260 <EthernetTask+0x1e0>
 8003254:	2800      	cmp	r0, #0
 8003256:	dd0a      	ble.n	800326e <EthernetTask+0x1ee>
								rcvBuf[rcvSize - 1] = 0;
 8003258:	4a3b      	ldr	r2, [pc, #236]	; (8003348 <EthernetTask+0x2c8>)
 800325a:	2100      	movs	r1, #0
 800325c:	54d1      	strb	r1, [r2, r3]
								rcvSize--;
 800325e:	4618      	mov	r0, r3
							while(((rcvBuf[rcvSize - 1] == '\r') || (rcvBuf[rcvSize - 1] == '\n')) && (rcvSize > 0)){
 8003260:	1e43      	subs	r3, r0, #1
 8003262:	4a39      	ldr	r2, [pc, #228]	; (8003348 <EthernetTask+0x2c8>)
 8003264:	5cd2      	ldrb	r2, [r2, r3]
 8003266:	2a0d      	cmp	r2, #13
 8003268:	d0f4      	beq.n	8003254 <EthernetTask+0x1d4>
 800326a:	2a0a      	cmp	r2, #10
 800326c:	d0f2      	beq.n	8003254 <EthernetTask+0x1d4>
								xMoreDataToFollow = FreeRTOS_CLIProcessCommand(&rcvBuf, &txBuf, TX_BUF_SIZE);
 800326e:	4e38      	ldr	r6, [pc, #224]	; (8003350 <EthernetTask+0x2d0>)
 8003270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003274:	4631      	mov	r1, r6
 8003276:	4834      	ldr	r0, [pc, #208]	; (8003348 <EthernetTask+0x2c8>)
 8003278:	f008 f866 	bl	800b348 <FreeRTOS_CLIProcessCommand>
 800327c:	4680      	mov	r8, r0
								RuntimeStats_TelnetTxInc();
 800327e:	f7ff f9f9 	bl	8002674 <RuntimeStats_TelnetTxInc>
								freesize = send(3, txBuf, strlen((char*)txBuf));
 8003282:	4630      	mov	r0, r6
 8003284:	f7fc ffac 	bl	80001e0 <strlen>
 8003288:	b282      	uxth	r2, r0
 800328a:	4631      	mov	r1, r6
 800328c:	2003      	movs	r0, #3
 800328e:	f7fe fc77 	bl	8001b80 <send>
 8003292:	4b2c      	ldr	r3, [pc, #176]	; (8003344 <EthernetTask+0x2c4>)
 8003294:	8018      	strh	r0, [r3, #0]
								vTaskDelay(1);
 8003296:	2001      	movs	r0, #1
 8003298:	f006 fd00 	bl	8009c9c <vTaskDelay>
							}while(xMoreDataToFollow != pdFALSE);
 800329c:	f1b8 0f00 	cmp.w	r8, #0
 80032a0:	d1e5      	bne.n	800326e <EthernetTask+0x1ee>
 80032a2:	e797      	b.n	80031d4 <EthernetTask+0x154>
						ClrSiS(3);
 80032a4:	2003      	movs	r0, #3
 80032a6:	f7fe fd01 	bl	8001cac <ClrSiS>
 80032aa:	e796      	b.n	80031da <EthernetTask+0x15a>
					}

				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_4){
					interrupt = getSn_IR(4);
 80032ac:	f44f 7022 	mov.w	r0, #648	; 0x288
 80032b0:	f7fe f960 	bl	8001574 <WIZCHIP_READ>
 80032b4:	e024      	b.n	8003300 <EthernetTask+0x280>
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_5){
					interrupt = getSn_IR(5);
 80032b6:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 80032ba:	f7fe f95b 	bl	8001574 <WIZCHIP_READ>
 80032be:	e022      	b.n	8003306 <EthernetTask+0x286>
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_6){
					interrupt = getSn_IR(6);
				}
//------------------------------------------------------------------------------------------------------
				if(interruptSource & IK_SOCK_7){
 80032c0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80032c4:	d127      	bne.n	8003316 <EthernetTask+0x296>
			while(HAL_GPIO_ReadPin(ETH_INT_GPIO_Port, ETH_INT_Pin) == 0){
 80032c6:	2102      	movs	r1, #2
 80032c8:	4822      	ldr	r0, [pc, #136]	; (8003354 <EthernetTask+0x2d4>)
 80032ca:	f002 fd7d 	bl	8005dc8 <HAL_GPIO_ReadPin>
 80032ce:	2800      	cmp	r0, #0
 80032d0:	f47f af29 	bne.w	8003126 <EthernetTask+0xa6>
				interruptSource = wizchip_getinterrupt();
 80032d4:	f7fe feef 	bl	80020b6 <wizchip_getinterrupt>
 80032d8:	4604      	mov	r4, r0
				if(interruptSource & IK_SOCK_0){
 80032da:	f410 7f80 	tst.w	r0, #256	; 0x100
 80032de:	f47f af2c 	bne.w	800313a <EthernetTask+0xba>
				if(interruptSource & IK_SOCK_1){
 80032e2:	f414 7f00 	tst.w	r4, #512	; 0x200
 80032e6:	f47f af3b 	bne.w	8003160 <EthernetTask+0xe0>
				if(interruptSource & IK_SOCK_2){
 80032ea:	f414 6f80 	tst.w	r4, #1024	; 0x400
 80032ee:	f47f af4b 	bne.w	8003188 <EthernetTask+0x108>
				if(interruptSource & IK_SOCK_3){
 80032f2:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80032f6:	f47f af4c 	bne.w	8003192 <EthernetTask+0x112>
				if(interruptSource & IK_SOCK_4){
 80032fa:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 80032fe:	d1d5      	bne.n	80032ac <EthernetTask+0x22c>
				if(interruptSource & IK_SOCK_5){
 8003300:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8003304:	d1d7      	bne.n	80032b6 <EthernetTask+0x236>
				if(interruptSource & IK_SOCK_6){
 8003306:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 800330a:	d0d9      	beq.n	80032c0 <EthernetTask+0x240>
					interrupt = getSn_IR(6);
 800330c:	f44f 7032 	mov.w	r0, #712	; 0x2c8
 8003310:	f7fe f930 	bl	8001574 <WIZCHIP_READ>
 8003314:	e7d4      	b.n	80032c0 <EthernetTask+0x240>
					interrupt = getSn_IR(7);
 8003316:	f44f 703a 	mov.w	r0, #744	; 0x2e8
 800331a:	f7fe f92b 	bl	8001574 <WIZCHIP_READ>
 800331e:	e7d2      	b.n	80032c6 <EthernetTask+0x246>
 8003320:	08003039 	.word	0x08003039
 8003324:	0800305d 	.word	0x0800305d
 8003328:	08002ff1 	.word	0x08002ff1
 800332c:	08003021 	.word	0x08003021
 8003330:	08002fd9 	.word	0x08002fd9
 8003334:	08003009 	.word	0x08003009
 8003338:	20002f6c 	.word	0x20002f6c
 800333c:	20000038 	.word	0x20000038
 8003340:	20000030 	.word	0x20000030
 8003344:	20002d68 	.word	0x20002d68
 8003348:	20002d6c 	.word	0x20002d6c
 800334c:	0800ceb8 	.word	0x0800ceb8
 8003350:	20002e6c 	.word	0x20002e6c
 8003354:	40020400 	.word	0x40020400

08003358 <NRF_ChipSelect>:

void NRF_ChipSelect (void);

void NRF_ChipDeselect (void);

void NRF_ChipSelect (void){
 8003358:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 800335a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800335e:	4b05      	ldr	r3, [pc, #20]	; (8003374 <NRF_ChipSelect+0x1c>)
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	f005 ff79 	bl	8009258 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 8003366:	2200      	movs	r2, #0
 8003368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800336c:	4802      	ldr	r0, [pc, #8]	; (8003378 <NRF_ChipSelect+0x20>)
 800336e:	f002 fd32 	bl	8005dd6 <HAL_GPIO_WritePin>
}
 8003372:	bd08      	pop	{r3, pc}
 8003374:	20003430 	.word	0x20003430
 8003378:	40020400 	.word	0x40020400

0800337c <NRF_ChipDeselect>:

void NRF_ChipDeselect (void){
 800337c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_SET);
 800337e:	2201      	movs	r2, #1
 8003380:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003384:	4805      	ldr	r0, [pc, #20]	; (800339c <NRF_ChipDeselect+0x20>)
 8003386:	f002 fd26 	bl	8005dd6 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 800338a:	2300      	movs	r3, #0
 800338c:	461a      	mov	r2, r3
 800338e:	4619      	mov	r1, r3
 8003390:	4803      	ldr	r0, [pc, #12]	; (80033a0 <NRF_ChipDeselect+0x24>)
 8003392:	6800      	ldr	r0, [r0, #0]
 8003394:	f005 fd6a 	bl	8008e6c <xQueueGenericSend>
}
 8003398:	bd08      	pop	{r3, pc}
 800339a:	bf00      	nop
 800339c:	40020400 	.word	0x40020400
 80033a0:	20003430 	.word	0x20003430

080033a4 <RadioTask>:

void RadioTask(void const * argument)
{
 80033a4:	b508      	push	{r3, lr}
	const uint8_t ecoIOinitMSG[] = "IsAlive";
  /* USER CODE BEGIN RadioComm */
	nRF24_Init(&hspi1);
 80033a6:	480e      	ldr	r0, [pc, #56]	; (80033e0 <RadioTask+0x3c>)
 80033a8:	f001 ff0a 	bl	80051c0 <nRF24_Init>
	nRF24_SetRXAddress(0, "_ECOE");
 80033ac:	490d      	ldr	r1, [pc, #52]	; (80033e4 <RadioTask+0x40>)
 80033ae:	2000      	movs	r0, #0
 80033b0:	f001 fd55 	bl	8004e5e <nRF24_SetRXAddress>
	nRF24_SetRXAddress(1, "_ECOI");
 80033b4:	490c      	ldr	r1, [pc, #48]	; (80033e8 <RadioTask+0x44>)
 80033b6:	2001      	movs	r0, #1
 80033b8:	f001 fd51 	bl	8004e5e <nRF24_SetRXAddress>
	nRF24_SetTXAddress("_ECOM");
 80033bc:	480b      	ldr	r0, [pc, #44]	; (80033ec <RadioTask+0x48>)
 80033be:	f001 fd91 	bl	8004ee4 <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 80033c2:	f001 fd6d 	bl	8004ea0 <nRF24_RX_Mode>
	//nRF24_SendData((uint8_t*)ecoIOinitMSG, sizeof(ecoIOinitMSG));

  /* Infinite loop */
  for(;;)
  {
	  if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 80033c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033ca:	2200      	movs	r2, #0
 80033cc:	4619      	mov	r1, r3
 80033ce:	4618      	mov	r0, r3
 80033d0:	f007 f8b0 	bl	800a534 <xTaskNotifyWait>
 80033d4:	2801      	cmp	r0, #1
 80033d6:	d1f6      	bne.n	80033c6 <RadioTask+0x22>
		  nRF24_Event();
 80033d8:	f001 fec4 	bl	8005164 <nRF24_Event>
 80033dc:	e7f3      	b.n	80033c6 <RadioTask+0x22>
 80033de:	bf00      	nop
 80033e0:	20003354 	.word	0x20003354
 80033e4:	0800cee8 	.word	0x0800cee8
 80033e8:	0800cef0 	.word	0x0800cef0
 80033ec:	0800cef8 	.word	0x0800cef8

080033f0 <fModbusParseFloat>:
#define CWU_HEATER_PHASE_POWER 		1

float fModbusParseFloat (uint8_t* in_data){
	union float_bytes buffor;

	buffor.bytes[3] = *in_data;
 80033f0:	7802      	ldrb	r2, [r0, #0]
 80033f2:	2300      	movs	r3, #0
 80033f4:	f362 631f 	bfi	r3, r2, #24, #8
	in_data ++;
	buffor.bytes[2] = *in_data;
 80033f8:	7842      	ldrb	r2, [r0, #1]
 80033fa:	f362 4317 	bfi	r3, r2, #16, #8
	in_data ++;
	buffor.bytes[1] = *in_data;
 80033fe:	7882      	ldrb	r2, [r0, #2]
 8003400:	f362 230f 	bfi	r3, r2, #8, #8
	in_data ++;
	buffor.bytes[0] = *in_data;
 8003404:	78c2      	ldrb	r2, [r0, #3]
 8003406:	f362 0307 	bfi	r3, r2, #0, #8

	return buffor.value;
 800340a:	ee00 3a10 	vmov	s0, r3
}
 800340e:	4770      	bx	lr

08003410 <RegulationTask>:

void RegulationTask(void const * argument)
{
 8003410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003412:	ed2d 8b04 	vpush	{d8-d9}
 8003416:	b0a5      	sub	sp, #148	; 0x94
	uint8_t counter_data_raw[36];
	uint8_t imported_exported_power_raw[8];
	uint8_t receieves = 0;
	uint8_t temperatures_raw[SENSOR_NUMBER * 2];

	regulationData.configStatus = Config_GetRegConfig(&regulationData.parameters);
 8003418:	4cc9      	ldr	r4, [pc, #804]	; (8003740 <RegulationTask+0x330>)
 800341a:	4620      	mov	r0, r4
 800341c:	f7fd ff70 	bl	8001300 <Config_GetRegConfig>
 8003420:	f804 0c01 	strb.w	r0, [r4, #-1]

	HAL_TIM_PWM_Init(&htim1);
 8003424:	4ec7      	ldr	r6, [pc, #796]	; (8003744 <RegulationTask+0x334>)
 8003426:	4630      	mov	r0, r6
 8003428:	f004 fd53 	bl	8007ed2 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 800342c:	4dc6      	ldr	r5, [pc, #792]	; (8003748 <RegulationTask+0x338>)
 800342e:	4628      	mov	r0, r5
 8003430:	f004 fd4f 	bl	8007ed2 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim3);
 8003434:	4cc5      	ldr	r4, [pc, #788]	; (800374c <RegulationTask+0x33c>)
 8003436:	4620      	mov	r0, r4
 8003438:	f004 fd4b 	bl	8007ed2 <HAL_TIM_PWM_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800343c:	2100      	movs	r1, #0
 800343e:	4630      	mov	r0, r6
 8003440:	f004 fe12 	bl	8008068 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003444:	2104      	movs	r1, #4
 8003446:	4630      	mov	r0, r6
 8003448:	f004 fe0e 	bl	8008068 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800344c:	2108      	movs	r1, #8
 800344e:	4630      	mov	r0, r6
 8003450:	f004 fe0a 	bl	8008068 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003454:	2100      	movs	r1, #0
 8003456:	4628      	mov	r0, r5
 8003458:	f004 fe06 	bl	8008068 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800345c:	2104      	movs	r1, #4
 800345e:	4628      	mov	r0, r5
 8003460:	f004 fe02 	bl	8008068 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003464:	2108      	movs	r1, #8
 8003466:	4628      	mov	r0, r5
 8003468:	f004 fdfe 	bl	8008068 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800346c:	2100      	movs	r1, #0
 800346e:	4620      	mov	r0, r4
 8003470:	f004 fdfa 	bl	8008068 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003474:	2104      	movs	r1, #4
 8003476:	4620      	mov	r0, r4
 8003478:	f004 fdf6 	bl	8008068 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800347c:	2108      	movs	r1, #8
 800347e:	4620      	mov	r0, r4
 8003480:	f004 fdf2 	bl	8008068 <HAL_TIM_PWM_Start>

	TIM1 -> CCR1 = 500;
 8003484:	4ab2      	ldr	r2, [pc, #712]	; (8003750 <RegulationTask+0x340>)
 8003486:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800348a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1 -> CCR2 = 500;
 800348c:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1 -> CCR3 = 500;
 800348e:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM2 -> CCR1 = 500;
 8003490:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003494:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2 -> CCR2 = 500;
 8003496:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2 -> CCR3 = 500;
 8003498:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM3 -> CCR1 = 500;
 800349a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800349e:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3 -> CCR2 = 500;
 80034a0:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3 -> CCR3 = 500;
 80034a2:	63d3      	str	r3, [r2, #60]	; 0x3c

	//Uchwyty i inne struktury
	mbPort.task =  xTaskGetCurrentTaskHandle();
 80034a4:	f006 fe86 	bl	800a1b4 <xTaskGetCurrentTaskHandle>
 80034a8:	9023      	str	r0, [sp, #140]	; 0x8c

	mcp23017_init(&expander1, &hi2c1, 0b0100111);
 80034aa:	4caa      	ldr	r4, [pc, #680]	; (8003754 <RegulationTask+0x344>)
 80034ac:	2227      	movs	r2, #39	; 0x27
 80034ae:	49aa      	ldr	r1, [pc, #680]	; (8003758 <RegulationTask+0x348>)
 80034b0:	4620      	mov	r0, r4
 80034b2:	f7fe fe7b 	bl	80021ac <mcp23017_init>
	mcp23017_iodir(&expander1, 1, 0xFF);
 80034b6:	22ff      	movs	r2, #255	; 0xff
 80034b8:	2101      	movs	r1, #1
 80034ba:	4620      	mov	r0, r4
 80034bc:	f7fe fe98 	bl	80021f0 <mcp23017_iodir>
	mcp23017_iodir(&expander1, 0, 0x03);
 80034c0:	2203      	movs	r2, #3
 80034c2:	2100      	movs	r1, #0
 80034c4:	4620      	mov	r0, r4
 80034c6:	f7fe fe93 	bl	80021f0 <mcp23017_iodir>
	expander1.gpio[0] = 0b11111100;
 80034ca:	23fc      	movs	r3, #252	; 0xfc
 80034cc:	71a3      	strb	r3, [r4, #6]
	mcp23017_write_gpio(&expander1, 0);
 80034ce:	2100      	movs	r1, #0
 80034d0:	4620      	mov	r0, r4
 80034d2:	f7fe feaa 	bl	800222a <mcp23017_write_gpio>

	vTaskDelay(1000);
 80034d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034da:	f006 fbdf 	bl	8009c9c <vTaskDelay>

	expander1.gpio[0] = 0;
 80034de:	2100      	movs	r1, #0
 80034e0:	71a1      	strb	r1, [r4, #6]
	mcp23017_write_gpio(&expander1, 0);
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7fe fea1 	bl	800222a <mcp23017_write_gpio>
	vModbusInit(&mbPort, &huart2, 100);
 80034e8:	2264      	movs	r2, #100	; 0x64
 80034ea:	499c      	ldr	r1, [pc, #624]	; (800375c <RegulationTask+0x34c>)
 80034ec:	a821      	add	r0, sp, #132	; 0x84
 80034ee:	f7fe ffb1 	bl	8002454 <vModbusInit>
	float exported_power = 0;
 80034f2:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 8003760 <RegulationTask+0x350>
	float imported_power = 0;
 80034f6:	eef0 8a48 	vmov.f32	s17, s16
 80034fa:	e07d      	b.n	80035f8 <RegulationTask+0x1e8>
		receieves = 0;

		if(regulationData.IOsignals.signals.input2 != regulationData.IOsignals.signals.output1){
			regulationData.ControlWord.CWUHeaterError = HIGH;
		}else{
			regulationData.ControlWord.CWUHeaterError = LOW;
 80034fc:	4b99      	ldr	r3, [pc, #612]	; (8003764 <RegulationTask+0x354>)
 80034fe:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003502:	f36f 0200 	bfc	r2, #0, #1
 8003506:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800350a:	e091      	b.n	8003630 <RegulationTask+0x220>
		}

		if(regulationData.IOsignals.signals.input3 != regulationData.IOsignals.signals.output2){
			regulationData.ControlWord.COHeaterError = HIGH;
		}else{
			regulationData.ControlWord.COHeaterError = LOW;
 800350c:	4b95      	ldr	r3, [pc, #596]	; (8003764 <RegulationTask+0x354>)
 800350e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003512:	f36f 0200 	bfc	r2, #0, #1
 8003516:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800351a:	e09c      	b.n	8003656 <RegulationTask+0x246>
		}

		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
			receieves += 1;
			for(uint8_t i = 0; i < 3; i++){
				regulationData.counter.voltages[i] = fModbusParseFloat(counter_data_raw + i * 4);
 800351c:	00a6      	lsls	r6, r4, #2
 800351e:	ab0a      	add	r3, sp, #40	; 0x28
 8003520:	1998      	adds	r0, r3, r6
 8003522:	f7ff ff65 	bl	80033f0 <fModbusParseFloat>
 8003526:	4d8f      	ldr	r5, [pc, #572]	; (8003764 <RegulationTask+0x354>)
 8003528:	f104 030a 	add.w	r3, r4, #10
 800352c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003530:	ed83 0a00 	vstr	s0, [r3]
				regulationData.counter.currents[i] = fModbusParseFloat(counter_data_raw + 12 + i * 4);
 8003534:	f106 000c 	add.w	r0, r6, #12
 8003538:	ab0a      	add	r3, sp, #40	; 0x28
 800353a:	4418      	add	r0, r3
 800353c:	f7ff ff58 	bl	80033f0 <fModbusParseFloat>
 8003540:	f104 030c 	add.w	r3, r4, #12
 8003544:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003548:	ed83 0a01 	vstr	s0, [r3, #4]
				regulationData.counter.powers[i] = fModbusParseFloat(counter_data_raw + 24 + 4 * i);
 800354c:	f106 0018 	add.w	r0, r6, #24
 8003550:	ab0a      	add	r3, sp, #40	; 0x28
 8003552:	4418      	add	r0, r3
 8003554:	f7ff ff4c 	bl	80033f0 <fModbusParseFloat>
 8003558:	f104 0310 	add.w	r3, r4, #16
 800355c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8003560:	ed85 0a00 	vstr	s0, [r5]
			for(uint8_t i = 0; i < 3; i++){
 8003564:	3401      	adds	r4, #1
 8003566:	b2e4      	uxtb	r4, r4
 8003568:	2c02      	cmp	r4, #2
 800356a:	d9d7      	bls.n	800351c <RegulationTask+0x10c>
			receieves += 1;
 800356c:	2501      	movs	r5, #1
 800356e:	e07d      	b.n	800366c <RegulationTask+0x25c>
			for(uint8_t i = 0; i < 3; i++){
 8003570:	2400      	movs	r4, #0
 8003572:	e7f9      	b.n	8003568 <RegulationTask+0x158>
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);

			if(regulationData.counter.power_in_buffor > 0){
				regulationData.counter.power_in_buffor -= (imported_power - last_imported_power);
			}else{
				regulationData.counter.power_in_buffor = 0;
 8003574:	4b7b      	ldr	r3, [pc, #492]	; (8003764 <RegulationTask+0x354>)
 8003576:	2200      	movs	r2, #0
 8003578:	64da      	str	r2, [r3, #76]	; 0x4c
			}
			regulationData.counter.power_in_buffor += (exported_power - last_exported_power) * ACUMULATED_POWER_FACTOR;
 800357a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800357e:	eddf 7a78 	vldr	s15, [pc, #480]	; 8003760 <RegulationTask+0x350>
 8003582:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003586:	4b77      	ldr	r3, [pc, #476]	; (8003764 <RegulationTask+0x354>)
 8003588:	ed93 8a13 	vldr	s16, [r3, #76]	; 0x4c
 800358c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8003590:	ed83 8a13 	vstr	s16, [r3, #76]	; 0x4c
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 8003594:	eeb0 8a40 	vmov.f32	s16, s0
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 8003598:	eef0 8a49 	vmov.f32	s17, s18
		}

		if(vModbusReadInputRegisters(&mbPort, TEMPERATURE_ADDRESS, 0, SENSOR_NUMBER, temperatures_raw) == Modbus_OK){
 800359c:	ab03      	add	r3, sp, #12
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	230a      	movs	r3, #10
 80035a2:	2200      	movs	r2, #0
 80035a4:	2102      	movs	r1, #2
 80035a6:	a821      	add	r0, sp, #132	; 0x84
 80035a8:	f7fe ff8a 	bl	80024c0 <vModbusReadInputRegisters>
 80035ac:	2800      	cmp	r0, #0
 80035ae:	f000 8081 	beq.w	80036b4 <RegulationTask+0x2a4>
				temperatures[i] = temp / DEC_PLACES;
			}
			memcpy(&regulationData.counter.CWU_temps[0], &temperatures[0], 24);
		}

		regulationData.counter.counter_present = 1;
 80035b2:	4b6c      	ldr	r3, [pc, #432]	; (8003764 <RegulationTask+0x354>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	701a      	strb	r2, [r3, #0]
		regulationData.counter.temperatures_present = 1;
 80035b8:	709a      	strb	r2, [r3, #2]
		if(receieves == 7){
 80035ba:	2d07      	cmp	r5, #7
 80035bc:	f000 8196 	beq.w	80038ec <RegulationTask+0x4dc>

		}else{

		}

		TIM3 -> CCR1 = regulationData.counter.CWU_heater_PWM[0];
 80035c0:	4b68      	ldr	r3, [pc, #416]	; (8003764 <RegulationTask+0x354>)
 80035c2:	8899      	ldrh	r1, [r3, #4]
 80035c4:	4a68      	ldr	r2, [pc, #416]	; (8003768 <RegulationTask+0x358>)
 80035c6:	6351      	str	r1, [r2, #52]	; 0x34
		TIM3 -> CCR2 = regulationData.counter.CWU_heater_PWM[1];
 80035c8:	88d9      	ldrh	r1, [r3, #6]
 80035ca:	6391      	str	r1, [r2, #56]	; 0x38
		TIM3 -> CCR3 = regulationData.counter.CWU_heater_PWM[2];
 80035cc:	8919      	ldrh	r1, [r3, #8]
 80035ce:	63d1      	str	r1, [r2, #60]	; 0x3c

		TIM1 -> CCR1 = regulationData.counter.CO_heater_PWM[0];
 80035d0:	8959      	ldrh	r1, [r3, #10]
 80035d2:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 80035d6:	6351      	str	r1, [r2, #52]	; 0x34
		TIM1 -> CCR2 = regulationData.counter.CO_heater_PWM[1];
 80035d8:	8999      	ldrh	r1, [r3, #12]
 80035da:	6391      	str	r1, [r2, #56]	; 0x38
		TIM1 -> CCR3 = regulationData.counter.CO_heater_PWM[2];
 80035dc:	89d9      	ldrh	r1, [r3, #14]
 80035de:	63d1      	str	r1, [r2, #60]	; 0x3c

		expander1.gpio[MCP23017_PORTA] = regulationData.IOsignals.ports.portA;
 80035e0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80035e4:	485b      	ldr	r0, [pc, #364]	; (8003754 <RegulationTask+0x344>)
 80035e6:	7183      	strb	r3, [r0, #6]
		mcp23017_write_gpio(&expander1, 0);
 80035e8:	2100      	movs	r1, #0
 80035ea:	f7fe fe1e 	bl	800222a <mcp23017_write_gpio>
		vTaskDelayUntil(&xLastWakeTime, xDelay);
 80035ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80035f2:	a820      	add	r0, sp, #128	; 0x80
 80035f4:	f006 fb00 	bl	8009bf8 <vTaskDelayUntil>
		mcp23017_read_gpio(&expander1, 0);
 80035f8:	4c56      	ldr	r4, [pc, #344]	; (8003754 <RegulationTask+0x344>)
 80035fa:	2100      	movs	r1, #0
 80035fc:	4620      	mov	r0, r4
 80035fe:	f7fe fe02 	bl	8002206 <mcp23017_read_gpio>
		mcp23017_read_gpio(&expander1, 1);
 8003602:	2101      	movs	r1, #1
 8003604:	4620      	mov	r0, r4
 8003606:	f7fe fdfe 	bl	8002206 <mcp23017_read_gpio>
		regulationData.IOsignals.bytes[0] = expander1.gpio[0];
 800360a:	79a2      	ldrb	r2, [r4, #6]
 800360c:	4955      	ldr	r1, [pc, #340]	; (8003764 <RegulationTask+0x354>)
 800360e:	f881 206a 	strb.w	r2, [r1, #106]	; 0x6a
		regulationData.IOsignals.bytes[1] = expander1.gpio[1];
 8003612:	79e3      	ldrb	r3, [r4, #7]
 8003614:	f881 306b 	strb.w	r3, [r1, #107]	; 0x6b
		if(regulationData.IOsignals.signals.input2 != regulationData.IOsignals.signals.output1){
 8003618:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800361c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 8003620:	f43f af6c 	beq.w	80034fc <RegulationTask+0xec>
			regulationData.ControlWord.CWUHeaterError = HIGH;
 8003624:	f891 3068 	ldrb.w	r3, [r1, #104]	; 0x68
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	f881 3068 	strb.w	r3, [r1, #104]	; 0x68
		if(regulationData.IOsignals.signals.input3 != regulationData.IOsignals.signals.output2){
 8003630:	4b4c      	ldr	r3, [pc, #304]	; (8003764 <RegulationTask+0x354>)
 8003632:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 8003636:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800363a:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800363e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003642:	429a      	cmp	r2, r3
 8003644:	f43f af62 	beq.w	800350c <RegulationTask+0xfc>
			regulationData.ControlWord.COHeaterError = HIGH;
 8003648:	4a46      	ldr	r2, [pc, #280]	; (8003764 <RegulationTask+0x354>)
 800364a:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
 8003656:	ab0a      	add	r3, sp, #40	; 0x28
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2312      	movs	r3, #18
 800365c:	2200      	movs	r2, #0
 800365e:	2101      	movs	r1, #1
 8003660:	a821      	add	r0, sp, #132	; 0x84
 8003662:	f7fe ff2d 	bl	80024c0 <vModbusReadInputRegisters>
 8003666:	2800      	cmp	r0, #0
 8003668:	d082      	beq.n	8003570 <RegulationTask+0x160>
		receieves = 0;
 800366a:	2500      	movs	r5, #0
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, IMPORTED_ACTIVE_POWER, 4, imported_exported_power_raw) == Modbus_OK){
 800366c:	ab08      	add	r3, sp, #32
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	2304      	movs	r3, #4
 8003672:	2248      	movs	r2, #72	; 0x48
 8003674:	2101      	movs	r1, #1
 8003676:	a821      	add	r0, sp, #132	; 0x84
 8003678:	f7fe ff22 	bl	80024c0 <vModbusReadInputRegisters>
 800367c:	2800      	cmp	r0, #0
 800367e:	d18d      	bne.n	800359c <RegulationTask+0x18c>
			receieves += 2;
 8003680:	3502      	adds	r5, #2
 8003682:	b2ed      	uxtb	r5, r5
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 8003684:	a808      	add	r0, sp, #32
 8003686:	f7ff feb3 	bl	80033f0 <fModbusParseFloat>
 800368a:	eeb0 9a40 	vmov.f32	s18, s0
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 800368e:	a809      	add	r0, sp, #36	; 0x24
 8003690:	f7ff feae 	bl	80033f0 <fModbusParseFloat>
			if(regulationData.counter.power_in_buffor > 0){
 8003694:	4b33      	ldr	r3, [pc, #204]	; (8003764 <RegulationTask+0x354>)
 8003696:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800369a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800369e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a2:	f77f af67 	ble.w	8003574 <RegulationTask+0x164>
				regulationData.counter.power_in_buffor -= (imported_power - last_imported_power);
 80036a6:	ee79 8a68 	vsub.f32	s17, s18, s17
 80036aa:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80036ae:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 80036b2:	e762      	b.n	800357a <RegulationTask+0x16a>
			receieves += 4;
 80036b4:	3504      	adds	r5, #4
 80036b6:	b2ed      	uxtb	r5, r5
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 80036b8:	2400      	movs	r4, #0
 80036ba:	e01b      	b.n	80036f4 <RegulationTask+0x2e4>
				int16_t temp = temperatures_raw[i * 2];
 80036bc:	0063      	lsls	r3, r4, #1
 80036be:	aa24      	add	r2, sp, #144	; 0x90
 80036c0:	441a      	add	r2, r3
 80036c2:	f812 2c84 	ldrb.w	r2, [r2, #-132]
				temp += temperatures_raw[i*2 + 1];
 80036c6:	3301      	adds	r3, #1
 80036c8:	a924      	add	r1, sp, #144	; 0x90
 80036ca:	440b      	add	r3, r1
 80036cc:	f813 0c84 	ldrb.w	r0, [r3, #-132]
 80036d0:	eb00 2002 	add.w	r0, r0, r2, lsl #8
				temperatures[i] = temp / DEC_PLACES;
 80036d4:	b200      	sxth	r0, r0
 80036d6:	f7fc ff2d 	bl	8000534 <__aeabi_i2d>
 80036da:	2200      	movs	r2, #0
 80036dc:	4b23      	ldr	r3, [pc, #140]	; (800376c <RegulationTask+0x35c>)
 80036de:	f7fd f8bd 	bl	800085c <__aeabi_ddiv>
 80036e2:	f7fd f9c3 	bl	8000a6c <__aeabi_d2f>
 80036e6:	ab24      	add	r3, sp, #144	; 0x90
 80036e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80036ec:	f843 0c38 	str.w	r0, [r3, #-56]
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 80036f0:	3401      	adds	r4, #1
 80036f2:	b2e4      	uxtb	r4, r4
 80036f4:	2c09      	cmp	r4, #9
 80036f6:	d9e1      	bls.n	80036bc <RegulationTask+0x2ac>
			memcpy(&regulationData.counter.CWU_temps[0], &temperatures[0], 24);
 80036f8:	4c1d      	ldr	r4, [pc, #116]	; (8003770 <RegulationTask+0x360>)
 80036fa:	ae16      	add	r6, sp, #88	; 0x58
 80036fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80036fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003700:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003704:	e884 0003 	stmia.w	r4, {r0, r1}
 8003708:	e753      	b.n	80035b2 <RegulationTask+0x1a2>
					available_power[i]  = -regulationData.counter.powers[i] * regulationData.parameters.heater_power_coeff / 100.0f;
 800370a:	4b16      	ldr	r3, [pc, #88]	; (8003764 <RegulationTask+0x354>)
 800370c:	f993 307c 	ldrsb.w	r3, [r3, #124]	; 0x7c
 8003710:	ee07 3a10 	vmov	s14, r3
 8003714:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003718:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800371c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003774 <RegulationTask+0x364>
 8003720:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003724:	ab24      	add	r3, sp, #144	; 0x90
 8003726:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800372a:	ed03 7a11 	vstr	s14, [r3, #-68]	; 0xffffffbc
 800372e:	e081      	b.n	8003834 <RegulationTask+0x424>
					regulationData.counter.CO_heater_max_power[i] = 0.0f;
 8003730:	1d2b      	adds	r3, r5, #4
 8003732:	4a0c      	ldr	r2, [pc, #48]	; (8003764 <RegulationTask+0x354>)
 8003734:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	e0a2      	b.n	8003884 <RegulationTask+0x474>
 800373e:	bf00      	nop
 8003740:	20002fed 	.word	0x20002fed
 8003744:	200032d4 	.word	0x200032d4
 8003748:	200033ac 	.word	0x200033ac
 800374c:	20003148 	.word	0x20003148
 8003750:	40010000 	.word	0x40010000
 8003754:	20003010 	.word	0x20003010
 8003758:	200030ec 	.word	0x200030ec
 800375c:	200033ec 	.word	0x200033ec
 8003760:	00000000 	.word	0x00000000
 8003764:	20002f80 	.word	0x20002f80
 8003768:	40000400 	.word	0x40000400
 800376c:	40240000 	.word	0x40240000
 8003770:	20002fd0 	.word	0x20002fd0
 8003774:	42c80000 	.word	0x42c80000
					regulationData.counter.CWU_heater_max_power[i] = 0.0f;
 8003778:	1dab      	adds	r3, r5, #6
 800377a:	4ac0      	ldr	r2, [pc, #768]	; (8003a7c <RegulationTask+0x66c>)
 800377c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003780:	2200      	movs	r2, #0
 8003782:	605a      	str	r2, [r3, #4]
				if(regulationData.counter.voltages[i] > 200.0){
 8003784:	f105 030a 	add.w	r3, r5, #10
 8003788:	4abc      	ldr	r2, [pc, #752]	; (8003a7c <RegulationTask+0x66c>)
 800378a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800378e:	ed93 7a00 	vldr	s14, [r3]
 8003792:	eddf 7abb 	vldr	s15, [pc, #748]	; 8003a80 <RegulationTask+0x670>
 8003796:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800379a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379e:	f340 809b 	ble.w	80038d8 <RegulationTask+0x4c8>
					regulationData.counter.CO_heater_PWM[i] = (uint32_t)(regulationData.counter.CO_heater_max_power[i] * 1000.0);
 80037a2:	4616      	mov	r6, r2
 80037a4:	1d2f      	adds	r7, r5, #4
 80037a6:	eb02 0387 	add.w	r3, r2, r7, lsl #2
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	f7fc fed4 	bl	8000558 <__aeabi_f2d>
 80037b0:	2200      	movs	r2, #0
 80037b2:	4bb4      	ldr	r3, [pc, #720]	; (8003a84 <RegulationTask+0x674>)
 80037b4:	f7fc ff28 	bl	8000608 <__aeabi_dmul>
 80037b8:	f7fd f938 	bl	8000a2c <__aeabi_d2uiz>
 80037bc:	eb06 0747 	add.w	r7, r6, r7, lsl #1
 80037c0:	8078      	strh	r0, [r7, #2]
					regulationData.counter.CWU_heater_PWM[i] = (uint32_t)(regulationData.counter.CWU_heater_max_power[i] * 1000.0);
 80037c2:	1dab      	adds	r3, r5, #6
 80037c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80037c8:	6858      	ldr	r0, [r3, #4]
 80037ca:	f7fc fec5 	bl	8000558 <__aeabi_f2d>
 80037ce:	2200      	movs	r2, #0
 80037d0:	4bac      	ldr	r3, [pc, #688]	; (8003a84 <RegulationTask+0x674>)
 80037d2:	f7fc ff19 	bl	8000608 <__aeabi_dmul>
 80037d6:	f7fd f929 	bl	8000a2c <__aeabi_d2uiz>
 80037da:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 80037de:	80a8      	strh	r0, [r5, #4]
			for(uint8_t i = 0; i < 3; i ++){
 80037e0:	3401      	adds	r4, #1
 80037e2:	b2e4      	uxtb	r4, r4
 80037e4:	2c02      	cmp	r4, #2
 80037e6:	f200 8083 	bhi.w	80038f0 <RegulationTask+0x4e0>
				if(regulationData.counter.powers[i] > 0){
 80037ea:	4625      	mov	r5, r4
 80037ec:	f104 0310 	add.w	r3, r4, #16
 80037f0:	4aa2      	ldr	r2, [pc, #648]	; (8003a7c <RegulationTask+0x66c>)
 80037f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80037f6:	edd3 7a00 	vldr	s15, [r3]
 80037fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003802:	dd82      	ble.n	800370a <RegulationTask+0x2fa>
					available_power[i] = ((regulationData.parameters.net_max_power / 3.0f) - regulationData.counter.powers[i]) * regulationData.parameters.heater_power_coeff;
 8003804:	4613      	mov	r3, r2
 8003806:	f8d2 2075 	ldr.w	r2, [r2, #117]	; 0x75
 800380a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800380e:	ee07 2a10 	vmov	s14, r2
 8003812:	ee87 7a26 	vdiv.f32	s14, s14, s13
 8003816:	ee37 7a67 	vsub.f32	s14, s14, s15
 800381a:	f993 307c 	ldrsb.w	r3, [r3, #124]	; 0x7c
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800382a:	ab24      	add	r3, sp, #144	; 0x90
 800382c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003830:	ed43 7a11 	vstr	s15, [r3, #-68]	; 0xffffffbc
				if(regulationData.parameters.CO_heater_power > 0.0f){
 8003834:	4b91      	ldr	r3, [pc, #580]	; (8003a7c <RegulationTask+0x66c>)
 8003836:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003846:	f77f af73 	ble.w	8003730 <RegulationTask+0x320>
					regulationData.counter.CO_heater_max_power[i] = available_power[i] / regulationData.parameters.CO_heater_power / 3.0f;
 800384a:	ab24      	add	r3, sp, #144	; 0x90
 800384c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8003850:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 8003854:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003858:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800385c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003860:	1d2b      	adds	r3, r5, #4
 8003862:	4a86      	ldr	r2, [pc, #536]	; (8003a7c <RegulationTask+0x66c>)
 8003864:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003868:	edc3 7a00 	vstr	s15, [r3]
					if(regulationData.counter.CO_heater_max_power[i] > 1.0f) regulationData.counter.CO_heater_max_power[i] = 1.0f;
 800386c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003878:	dd04      	ble.n	8003884 <RegulationTask+0x474>
 800387a:	1d2b      	adds	r3, r5, #4
 800387c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003880:	ed83 7a00 	vstr	s14, [r3]
				if(regulationData.parameters.CWU_heater_power > 0.0f){
 8003884:	4b7d      	ldr	r3, [pc, #500]	; (8003a7c <RegulationTask+0x66c>)
 8003886:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003896:	f77f af6f 	ble.w	8003778 <RegulationTask+0x368>
					regulationData.counter.CWU_heater_max_power[i] = available_power[i] / regulationData.parameters.CWU_heater_power / 3.0f;
 800389a:	ab24      	add	r3, sp, #144	; 0x90
 800389c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80038a0:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 80038a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80038a8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80038ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038b0:	1dab      	adds	r3, r5, #6
 80038b2:	4a72      	ldr	r2, [pc, #456]	; (8003a7c <RegulationTask+0x66c>)
 80038b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80038b8:	edc3 7a01 	vstr	s15, [r3, #4]
					if(regulationData.counter.CWU_heater_max_power[i] > 1.0f) regulationData.counter.CWU_heater_max_power[i] = 1.0f;
 80038bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c8:	f77f af5c 	ble.w	8003784 <RegulationTask+0x374>
 80038cc:	1dab      	adds	r3, r5, #6
 80038ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80038d2:	ed83 7a01 	vstr	s14, [r3, #4]
 80038d6:	e755      	b.n	8003784 <RegulationTask+0x374>
					regulationData.counter.CO_heater_PWM[i] = 0;
 80038d8:	4b68      	ldr	r3, [pc, #416]	; (8003a7c <RegulationTask+0x66c>)
 80038da:	1d2a      	adds	r2, r5, #4
 80038dc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80038e0:	2100      	movs	r1, #0
 80038e2:	8051      	strh	r1, [r2, #2]
					regulationData.counter.CWU_heater_PWM[i] = 0;
 80038e4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80038e8:	80a9      	strh	r1, [r5, #4]
 80038ea:	e779      	b.n	80037e0 <RegulationTask+0x3d0>
			for(uint8_t i = 0; i < 3; i ++){
 80038ec:	2400      	movs	r4, #0
 80038ee:	e779      	b.n	80037e4 <RegulationTask+0x3d4>
			if(regulationData.counter.CWU_temps[0] < regulationData.parameters.CWU_hi_temp){
 80038f0:	4b62      	ldr	r3, [pc, #392]	; (8003a7c <RegulationTask+0x66c>)
 80038f2:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80038f6:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390a:	d515      	bpl.n	8003938 <RegulationTask+0x528>
				if(regulationData.counter.CWU_temps[1] < regulationData.parameters.CWU_lo_temp){
 800390c:	4b5b      	ldr	r3, [pc, #364]	; (8003a7c <RegulationTask+0x66c>)
 800390e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003912:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800391e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003926:	d50e      	bpl.n	8003946 <RegulationTask+0x536>
					regulationData.ControlWord.CWUHeaterStateOut = HIGH;
 8003928:	4a54      	ldr	r2, [pc, #336]	; (8003a7c <RegulationTask+0x66c>)
 800392a:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8003936:	e006      	b.n	8003946 <RegulationTask+0x536>
				regulationData.ControlWord.CWUHeaterStateOut = LOW;
 8003938:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <RegulationTask+0x66c>)
 800393a:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800393e:	f36f 0200 	bfc	r2, #0, #1
 8003942:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.counter.CO_temps[0] < regulationData.parameters.CO_hi_temp){
 8003946:	4b4d      	ldr	r3, [pc, #308]	; (8003a7c <RegulationTask+0x66c>)
 8003948:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800394c:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8003950:	ee07 3a90 	vmov	s15, r3
 8003954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003958:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800395c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003960:	d515      	bpl.n	800398e <RegulationTask+0x57e>
				if(regulationData.counter.CO_temps[3] < regulationData.parameters.CO_lo_temp){
 8003962:	4b46      	ldr	r3, [pc, #280]	; (8003a7c <RegulationTask+0x66c>)
 8003964:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8003968:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800396c:	ee07 3a90 	vmov	s15, r3
 8003970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397c:	d50e      	bpl.n	800399c <RegulationTask+0x58c>
					regulationData.ControlWord.COHeaterStateOut = HIGH;
 800397e:	4a3f      	ldr	r2, [pc, #252]	; (8003a7c <RegulationTask+0x66c>)
 8003980:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 800398c:	e006      	b.n	800399c <RegulationTask+0x58c>
				regulationData.ControlWord.COHeaterStateOut = LOW;
 800398e:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <RegulationTask+0x66c>)
 8003990:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003994:	f36f 0200 	bfc	r2, #0, #1
 8003998:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.ControlWord.COHeaterStateOut){
 800399c:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <RegulationTask+0x66c>)
 800399e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80039a2:	f013 0f01 	tst.w	r3, #1
 80039a6:	d006      	beq.n	80039b6 <RegulationTask+0x5a6>
				regulationData.ControlWord.CWUHeaterStateOut = LOW;
 80039a8:	4b34      	ldr	r3, [pc, #208]	; (8003a7c <RegulationTask+0x66c>)
 80039aa:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80039ae:	f36f 0200 	bfc	r2, #0, #1
 80039b2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.IOsignals.signals.input1 == HIGH){
 80039b6:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <RegulationTask+0x66c>)
 80039b8:	f993 306b 	ldrsb.w	r3, [r3, #107]	; 0x6b
 80039bc:	2b00      	cmp	r3, #0
 80039be:	da47      	bge.n	8003a50 <RegulationTask+0x640>
				if(regulationData.IOsignals.signals.input4 == LOW ||
 80039c0:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <RegulationTask+0x66c>)
 80039c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039c4:	f023 436f 	bic.w	r3, r3, #4009754624	; 0xef000000
 80039c8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80039cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039d0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80039d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039d8:	d006      	beq.n	80039e8 <RegulationTask+0x5d8>
					regulationData.ControlWord.CWUHeaterStateOut = LOW;
 80039da:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <RegulationTask+0x66c>)
 80039dc:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80039e0:	f36f 0200 	bfc	r2, #0, #1
 80039e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				if(regulationData.IOsignals.signals.input5 == LOW &&
 80039e8:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <RegulationTask+0x66c>)
 80039ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ec:	f023 4377 	bic.w	r3, r3, #4143972352	; 0xf7000000
 80039f0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80039f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039f8:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d00a      	beq.n	8003a16 <RegulationTask+0x606>
				if(regulationData.ControlWord.CWUHeaterStateOut == LOW){
 8003a00:	4b1e      	ldr	r3, [pc, #120]	; (8003a7c <RegulationTask+0x66c>)
 8003a02:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003a06:	f013 0301 	ands.w	r3, r3, #1
 8003a0a:	d015      	beq.n	8003a38 <RegulationTask+0x628>
				if(regulationData.ControlWord.COHeaterStateOut == LOW){
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f47f add7 	bne.w	80035c0 <RegulationTask+0x1b0>
					for(int i = 0; i < 3; i++){
 8003a12:	2300      	movs	r3, #0
 8003a14:	e019      	b.n	8003a4a <RegulationTask+0x63a>
					regulationData.ControlWord.CWUHeaterStateOut = LOW;
 8003a16:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <RegulationTask+0x66c>)
 8003a18:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003a1c:	f36f 0200 	bfc	r2, #0, #1
 8003a20:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003a24:	e7ec      	b.n	8003a00 <RegulationTask+0x5f0>
						regulationData.counter.CWU_heater_PWM[i] = 0;
 8003a26:	4915      	ldr	r1, [pc, #84]	; (8003a7c <RegulationTask+0x66c>)
 8003a28:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	8088      	strh	r0, [r1, #4]
					for(int i = 0; i < 3; i++){
 8003a30:	3201      	adds	r2, #1
 8003a32:	2a02      	cmp	r2, #2
 8003a34:	ddf7      	ble.n	8003a26 <RegulationTask+0x616>
 8003a36:	e7e9      	b.n	8003a0c <RegulationTask+0x5fc>
 8003a38:	2200      	movs	r2, #0
 8003a3a:	e7fa      	b.n	8003a32 <RegulationTask+0x622>
						regulationData.counter.CO_heater_PWM[i] = 0;
 8003a3c:	1d19      	adds	r1, r3, #4
 8003a3e:	4a0f      	ldr	r2, [pc, #60]	; (8003a7c <RegulationTask+0x66c>)
 8003a40:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8003a44:	2100      	movs	r1, #0
 8003a46:	8051      	strh	r1, [r2, #2]
					for(int i = 0; i < 3; i++){
 8003a48:	3301      	adds	r3, #1
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	ddf6      	ble.n	8003a3c <RegulationTask+0x62c>
 8003a4e:	e5b7      	b.n	80035c0 <RegulationTask+0x1b0>
				regulationData.ControlWord.COHeaterStateOut = LOW;
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <RegulationTask+0x66c>)
 8003a52:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003a56:	f36f 0200 	bfc	r2, #0, #1
 8003a5a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				for(int i = 0; i < 3; i++){
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e009      	b.n	8003a76 <RegulationTask+0x666>
					regulationData.counter.CO_heater_PWM[i] = 0;
 8003a62:	4a06      	ldr	r2, [pc, #24]	; (8003a7c <RegulationTask+0x66c>)
 8003a64:	1d19      	adds	r1, r3, #4
 8003a66:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	8048      	strh	r0, [r1, #2]
					regulationData.counter.CWU_heater_PWM[i] = 0;
 8003a6e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003a72:	8090      	strh	r0, [r2, #4]
				for(int i = 0; i < 3; i++){
 8003a74:	3301      	adds	r3, #1
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	ddf3      	ble.n	8003a62 <RegulationTask+0x652>
 8003a7a:	e5a1      	b.n	80035c0 <RegulationTask+0x1b0>
 8003a7c:	20002f80 	.word	0x20002f80
 8003a80:	43480000 	.word	0x43480000
 8003a84:	408f4000 	.word	0x408f4000

08003a88 <RegulationTask_GetData>:
	}
  /* USER CODE END PowerRegulation */
}

void RegulationTask_GetData (RegTaskData_t* destination){
 8003a88:	b508      	push	{r3, lr}
	memcpy(destination, &regulationData, sizeof(RegTaskData_t));
 8003a8a:	2290      	movs	r2, #144	; 0x90
 8003a8c:	4901      	ldr	r1, [pc, #4]	; (8003a94 <RegulationTask_GetData+0xc>)
 8003a8e:	f008 f8ff 	bl	800bc90 <memcpy>
}
 8003a92:	bd08      	pop	{r3, pc}
 8003a94:	20002f80 	.word	0x20002f80

08003a98 <UARTDMA_UartIrqHandler>:



void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8003a98:	6802      	ldr	r2, [r0, #0]
 8003a9a:	6813      	ldr	r3, [r2, #0]
 8003a9c:	6819      	ldr	r1, [r3, #0]
 8003a9e:	f011 0f10 	tst.w	r1, #16
 8003aa2:	d00e      	beq.n	8003ac2 <UARTDMA_UartIrqHandler+0x2a>
{
 8003aa4:	b082      	sub	sp, #8
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8003aa6:	6819      	ldr	r1, [r3, #0]
 8003aa8:	9101      	str	r1, [sp, #4]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	9301      	str	r3, [sp, #4]
		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8003aae:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	6813      	ldr	r3, [r2, #0]
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	6013      	str	r3, [r2, #0]
		tmp = tmp; // For unused warning
 8003aba:	9b01      	ldr	r3, [sp, #4]
 8003abc:	9301      	str	r3, [sp, #4]
	}
}
 8003abe:	b002      	add	sp, #8
 8003ac0:	4770      	bx	lr
 8003ac2:	4770      	bx	lr

08003ac4 <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma){
 8003ac4:	b570      	push	{r4, r5, r6, lr}
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t Reserved0;
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8003ac6:	6803      	ldr	r3, [r0, #0]
 8003ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aca:	6d9d      	ldr	r5, [r3, #88]	; 0x58

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	f012 0f10 	tst.w	r2, #16
 8003ad4:	d038      	beq.n	8003b48 <UARTDMA_DmaIrqHandler+0x84>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8003ad6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ad8:	2320      	movs	r3, #32
 8003ada:	4093      	lsls	r3, r2
 8003adc:	60ab      	str	r3, [r5, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8003ade:	6803      	ldr	r3, [r0, #0]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685e      	ldr	r6, [r3, #4]
 8003ae6:	f1c6 061e 	rsb	r6, r6, #30

		//huartdma->length += Length;
		huartdma->length = Length;
 8003aea:	f880 60a2 	strb.w	r6, [r0, #162]	; 0xa2

		for(i = 0; i < Length; i++){
 8003aee:	2200      	movs	r2, #0
 8003af0:	e00c      	b.n	8003b0c <UARTDMA_DmaIrqHandler+0x48>
			huartdma->UART_Buffer[huartdma->UartBufferTail] = huartdma->DMA_RX_Buffer[i];
 8003af2:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8003af6:	1881      	adds	r1, r0, r2
 8003af8:	790c      	ldrb	r4, [r1, #4]
 8003afa:	18c1      	adds	r1, r0, r3
 8003afc:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
			huartdma->UartBufferTail++;
 8003b00:	3301      	adds	r3, #1
			huartdma->UartBufferTail &= 127;
 8003b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b06:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		for(i = 0; i < Length; i++){
 8003b0a:	3201      	adds	r2, #1
 8003b0c:	42b2      	cmp	r2, r6
 8003b0e:	d3f0      	bcc.n	8003af2 <UARTDMA_DmaIrqHandler+0x2e>
 8003b10:	4604      	mov	r4, r0
		}

		huartdma -> callback();
 8003b12:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 8003b16:	4798      	blx	r3

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8003b18:	4623      	mov	r3, r4
 8003b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b20:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8003b22:	223f      	movs	r2, #63	; 0x3f
 8003b24:	408a      	lsls	r2, r1
 8003b26:	60aa      	str	r2, [r5, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8003b28:	6822      	ldr	r2, [r4, #0]
 8003b2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	60d3      	str	r3, [r2, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	221e      	movs	r2, #30
 8003b38:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	6813      	ldr	r3, [r2, #0]
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	6013      	str	r3, [r2, #0]
	}
}
 8003b48:	bd70      	pop	{r4, r5, r6, pc}

08003b4a <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8003b4a:	b510      	push	{r4, lr}
 8003b4c:	4604      	mov	r4, r0
	huartdma->huart = huart;
 8003b4e:	6001      	str	r1, [r0, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8003b50:	680a      	ldr	r2, [r1, #0]
 8003b52:	68d3      	ldr	r3, [r2, #12]
 8003b54:	f043 0310 	orr.w	r3, r3, #16
 8003b58:	60d3      	str	r3, [r2, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8003b5a:	4601      	mov	r1, r0
 8003b5c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	6813      	ldr	r3, [r2, #0]
 8003b66:	f043 0310 	orr.w	r3, r3, #16
 8003b6a:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8003b6c:	221e      	movs	r2, #30
 8003b6e:	6800      	ldr	r0, [r0, #0]
 8003b70:	f004 fd4c 	bl	800860c <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_HTIE; // Disable DMA Half Complete interrupt
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	f023 0308 	bic.w	r3, r3, #8
 8003b80:	6013      	str	r3, [r2, #0]
}
 8003b82:	bd10      	pop	{r4, pc}

08003b84 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003b84:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <vApplicationGetIdleTaskMemory+0x10>)
 8003b86:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <vApplicationGetIdleTaskMemory+0x14>)
 8003b8a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20000384 	.word	0x20000384
 8003b98:	20000184 	.word	0x20000184

08003b9c <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <vApplicationGetTimerTaskMemory+0x10>)
 8003b9e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <vApplicationGetTimerTaskMemory+0x14>)
 8003ba2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ba8:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8003baa:	4770      	bx	lr
 8003bac:	200007e8 	.word	0x200007e8
 8003bb0:	200003e8 	.word	0x200003e8

08003bb4 <ConfigSaveTmr>:
__weak void ConfigSaveTmr(void const * argument)
{
  /* USER CODE BEGIN ConfigSaveTmr */
  
  /* USER CODE END ConfigSaveTmr */
}
 8003bb4:	4770      	bx	lr
	...

08003bb8 <MX_GPIO_Init>:
{
 8003bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bbc:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bbe:	2400      	movs	r4, #0
 8003bc0:	9405      	str	r4, [sp, #20]
 8003bc2:	9406      	str	r4, [sp, #24]
 8003bc4:	9407      	str	r4, [sp, #28]
 8003bc6:	9408      	str	r4, [sp, #32]
 8003bc8:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bca:	9401      	str	r4, [sp, #4]
 8003bcc:	4b46      	ldr	r3, [pc, #280]	; (8003ce8 <MX_GPIO_Init+0x130>)
 8003bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd0:	f042 0204 	orr.w	r2, r2, #4
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
 8003bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd8:	f002 0204 	and.w	r2, r2, #4
 8003bdc:	9201      	str	r2, [sp, #4]
 8003bde:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003be0:	9402      	str	r4, [sp, #8]
 8003be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
 8003bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003bf0:	9202      	str	r2, [sp, #8]
 8003bf2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf4:	9403      	str	r4, [sp, #12]
 8003bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf8:	f042 0201 	orr.w	r2, r2, #1
 8003bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8003bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c00:	f002 0201 	and.w	r2, r2, #1
 8003c04:	9203      	str	r2, [sp, #12]
 8003c06:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c08:	9404      	str	r4, [sp, #16]
 8003c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c0c:	f042 0202 	orr.w	r2, r2, #2
 8003c10:	631a      	str	r2, [r3, #48]	; 0x30
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	9304      	str	r3, [sp, #16]
 8003c1a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 8003c1c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8003cfc <MX_GPIO_Init+0x144>
 8003c20:	4622      	mov	r2, r4
 8003c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c26:	4640      	mov	r0, r8
 8003c28:	f002 f8d5 	bl	8005dd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 8003c2c:	4d2f      	ldr	r5, [pc, #188]	; (8003cec <MX_GPIO_Init+0x134>)
 8003c2e:	4622      	mov	r2, r4
 8003c30:	2102      	movs	r1, #2
 8003c32:	4628      	mov	r0, r5
 8003c34:	f002 f8cf 	bl	8005dd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8003c38:	2201      	movs	r2, #1
 8003c3a:	2110      	movs	r1, #16
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f002 f8ca 	bl	8005dd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin, GPIO_PIN_SET);
 8003c42:	4e2b      	ldr	r6, [pc, #172]	; (8003cf0 <MX_GPIO_Init+0x138>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	f246 0104 	movw	r1, #24580	; 0x6004
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	f002 f8c3 	bl	8005dd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8003c50:	4622      	mov	r2, r4
 8003c52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c56:	4630      	mov	r0, r6
 8003c58:	f002 f8bd 	bl	8005dd6 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUILT_IN_LED_Pin;
 8003c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c60:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c62:	2701      	movs	r7, #1
 8003c64:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c66:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c68:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BUILT_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8003c6a:	a905      	add	r1, sp, #20
 8003c6c:	4640      	mov	r0, r8
 8003c6e:	f001 ffd9 	bl	8005c24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MASTER_TE_Pin|ETH_CS_Pin;
 8003c72:	2312      	movs	r3, #18
 8003c74:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c76:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7c:	a905      	add	r1, sp, #20
 8003c7e:	4628      	mov	r0, r5
 8003c80:	f001 ffd0 	bl	8005c24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ETH_INT_Pin|PG24V_Pin;
 8003c84:	f241 0302 	movw	r3, #4098	; 0x1002
 8003c88:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <MX_GPIO_Init+0x13c>)
 8003c8c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c90:	a905      	add	r1, sp, #20
 8003c92:	4630      	mov	r0, r6
 8003c94:	f001 ffc6 	bl	8005c24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin|NRF_CE_Pin;
 8003c98:	f24e 0304 	movw	r3, #57348	; 0xe004
 8003c9c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c9e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca4:	a905      	add	r1, sp, #20
 8003ca6:	4630      	mov	r0, r6
 8003ca8:	f001 ffbc 	bl	8005c24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NRF_INT_Pin;
 8003cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cb0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cb2:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <MX_GPIO_Init+0x140>)
 8003cb4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(NRF_INT_GPIO_Port, &GPIO_InitStruct);
 8003cb8:	a905      	add	r1, sp, #20
 8003cba:	4628      	mov	r0, r5
 8003cbc:	f001 ffb2 	bl	8005c24 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 10, 0);
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	210a      	movs	r1, #10
 8003cc4:	2007      	movs	r0, #7
 8003cc6:	f001 fcdf 	bl	8005688 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003cca:	2007      	movs	r0, #7
 8003ccc:	f001 fd10 	bl	80056f0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 9, 0);
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	2109      	movs	r1, #9
 8003cd4:	2028      	movs	r0, #40	; 0x28
 8003cd6:	f001 fcd7 	bl	8005688 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003cda:	2028      	movs	r0, #40	; 0x28
 8003cdc:	f001 fd08 	bl	80056f0 <HAL_NVIC_EnableIRQ>
}
 8003ce0:	b00a      	add	sp, #40	; 0x28
 8003ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40020000 	.word	0x40020000
 8003cf0:	40020400 	.word	0x40020400
 8003cf4:	10210000 	.word	0x10210000
 8003cf8:	10110000 	.word	0x10110000
 8003cfc:	40020800 	.word	0x40020800

08003d00 <MX_DMA_Init>:
{
 8003d00:	b510      	push	{r4, lr}
 8003d02:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003d04:	2400      	movs	r4, #0
 8003d06:	9400      	str	r4, [sp, #0]
 8003d08:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <MX_DMA_Init+0x64>)
 8003d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003d10:	631a      	str	r2, [r3, #48]	; 0x30
 8003d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d14:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003d18:	9200      	str	r2, [sp, #0]
 8003d1a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d1c:	9401      	str	r4, [sp, #4]
 8003d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d20:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d2c:	9301      	str	r3, [sp, #4]
 8003d2e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8003d30:	4622      	mov	r2, r4
 8003d32:	2105      	movs	r1, #5
 8003d34:	2010      	movs	r0, #16
 8003d36:	f001 fca7 	bl	8005688 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003d3a:	2010      	movs	r0, #16
 8003d3c:	f001 fcd8 	bl	80056f0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003d40:	4622      	mov	r2, r4
 8003d42:	2105      	movs	r1, #5
 8003d44:	2039      	movs	r0, #57	; 0x39
 8003d46:	f001 fc9f 	bl	8005688 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003d4a:	2039      	movs	r0, #57	; 0x39
 8003d4c:	f001 fcd0 	bl	80056f0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8003d50:	4622      	mov	r2, r4
 8003d52:	2105      	movs	r1, #5
 8003d54:	203a      	movs	r0, #58	; 0x3a
 8003d56:	f001 fc97 	bl	8005688 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003d5a:	203a      	movs	r0, #58	; 0x3a
 8003d5c:	f001 fcc8 	bl	80056f0 <HAL_NVIC_EnableIRQ>
}
 8003d60:	b002      	add	sp, #8
 8003d62:	bd10      	pop	{r4, pc}
 8003d64:	40023800 	.word	0x40023800

08003d68 <StartDefaultTask>:
{
 8003d68:	b508      	push	{r3, lr}
    osDelay(10000000);
 8003d6a:	4802      	ldr	r0, [pc, #8]	; (8003d74 <StartDefaultTask+0xc>)
 8003d6c:	f004 fe93 	bl	8008a96 <osDelay>
 8003d70:	e7fb      	b.n	8003d6a <StartDefaultTask+0x2>
 8003d72:	bf00      	nop
 8003d74:	00989680 	.word	0x00989680

08003d78 <TestTask>:
{
 8003d78:	b508      	push	{r3, lr}
    osDelay(1);
 8003d7a:	2001      	movs	r0, #1
 8003d7c:	f004 fe8b 	bl	8008a96 <osDelay>
 8003d80:	e7fb      	b.n	8003d7a <TestTask+0x2>

08003d82 <HAL_UART_RxCpltCallback>:
}
 8003d82:	4770      	bx	lr

08003d84 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003d84:	b508      	push	{r3, lr}
	if(huart -> Instance == USART2){
 8003d86:	6802      	ldr	r2, [r0, #0]
 8003d88:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_UART_TxCpltCallback+0x24>)
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d000      	beq.n	8003d90 <HAL_UART_TxCpltCallback+0xc>
}
 8003d8e:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 8003d90:	2201      	movs	r2, #1
 8003d92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d96:	4805      	ldr	r0, [pc, #20]	; (8003dac <HAL_UART_TxCpltCallback+0x28>)
 8003d98:	f002 f81d 	bl	8005dd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2102      	movs	r1, #2
 8003da0:	4803      	ldr	r0, [pc, #12]	; (8003db0 <HAL_UART_TxCpltCallback+0x2c>)
 8003da2:	f002 f818 	bl	8005dd6 <HAL_GPIO_WritePin>
}
 8003da6:	e7f2      	b.n	8003d8e <HAL_UART_TxCpltCallback+0xa>
 8003da8:	40004400 	.word	0x40004400
 8003dac:	40020800 	.word	0x40020800
 8003db0:	40020000 	.word	0x40020000

08003db4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003db4:	b510      	push	{r4, lr}
 8003db6:	4604      	mov	r4, r0
	if(GPIO_Pin & NRF_INT_Pin){
 8003db8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003dbc:	d106      	bne.n	8003dcc <HAL_GPIO_EXTI_Callback+0x18>
	if(GPIO_Pin & ETH_INT_Pin){
 8003dbe:	f014 0f02 	tst.w	r4, #2
 8003dc2:	d109      	bne.n	8003dd8 <HAL_GPIO_EXTI_Callback+0x24>
	if(GPIO_Pin & PG24V_Pin){
 8003dc4:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8003dc8:	d10c      	bne.n	8003de4 <HAL_GPIO_EXTI_Callback+0x30>
}
 8003dca:	bd10      	pop	{r4, pc}
		vTaskNotifyGiveFromISR(nRF24L01Handle, NULL);
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_GPIO_EXTI_Callback+0x48>)
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	f006 fc97 	bl	800a704 <vTaskNotifyGiveFromISR>
 8003dd6:	e7f2      	b.n	8003dbe <HAL_GPIO_EXTI_Callback+0xa>
		vTaskNotifyGiveFromISR(EthernetHandle, NULL);
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_GPIO_EXTI_Callback+0x4c>)
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	f006 fc91 	bl	800a704 <vTaskNotifyGiveFromISR>
 8003de2:	e7ef      	b.n	8003dc4 <HAL_GPIO_EXTI_Callback+0x10>
		value = HAL_RTCEx_BKUPRead(&hrtc, 0);
 8003de4:	4c07      	ldr	r4, [pc, #28]	; (8003e04 <HAL_GPIO_EXTI_Callback+0x50>)
 8003de6:	2100      	movs	r1, #0
 8003de8:	4620      	mov	r0, r4
 8003dea:	f003 fb12 	bl	8007412 <HAL_RTCEx_BKUPRead>
		HAL_RTCEx_BKUPWrite(&hrtc, 0, value);
 8003dee:	1c42      	adds	r2, r0, #1
 8003df0:	2100      	movs	r1, #0
 8003df2:	4620      	mov	r0, r4
 8003df4:	f003 fb08 	bl	8007408 <HAL_RTCEx_BKUPWrite>
}
 8003df8:	e7e7      	b.n	8003dca <HAL_GPIO_EXTI_Callback+0x16>
 8003dfa:	bf00      	nop
 8003dfc:	20003018 	.word	0x20003018
 8003e00:	20003438 	.word	0x20003438
 8003e04:	200032b4 	.word	0x200032b4

08003e08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM11){
 8003e0a:	6802      	ldr	r2, [r0, #0]
 8003e0c:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d004      	beq.n	8003e1c <HAL_TIM_PeriodElapsedCallback+0x14>
		ulHighFreqTimerTicks ++;
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8003e12:	6802      	ldr	r2, [r0, #0]
 8003e14:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d005      	beq.n	8003e26 <HAL_TIM_PeriodElapsedCallback+0x1e>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003e1a:	bd08      	pop	{r3, pc}
		ulHighFreqTimerTicks ++;
 8003e1c:	4a05      	ldr	r2, [pc, #20]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003e1e:	6813      	ldr	r3, [r2, #0]
 8003e20:	3301      	adds	r3, #1
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	e7f5      	b.n	8003e12 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
 8003e26:	f001 fa7d 	bl	8005324 <HAL_IncTick>
}
 8003e2a:	e7f6      	b.n	8003e1a <HAL_TIM_PeriodElapsedCallback+0x12>
 8003e2c:	40014800 	.word	0x40014800
 8003e30:	40014400 	.word	0x40014400
 8003e34:	20003434 	.word	0x20003434

08003e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e38:	e7fe      	b.n	8003e38 <Error_Handler>
	...

08003e3c <MX_I2C1_Init>:
{
 8003e3c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8003e3e:	480a      	ldr	r0, [pc, #40]	; (8003e68 <MX_I2C1_Init+0x2c>)
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <MX_I2C1_Init+0x30>)
 8003e42:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003e44:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <MX_I2C1_Init+0x34>)
 8003e46:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e4c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e52:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e54:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e56:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e58:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e5a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e5c:	f002 fa1c 	bl	8006298 <HAL_I2C_Init>
 8003e60:	b900      	cbnz	r0, 8003e64 <MX_I2C1_Init+0x28>
}
 8003e62:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003e64:	f7ff ffe8 	bl	8003e38 <Error_Handler>
 8003e68:	200030ec 	.word	0x200030ec
 8003e6c:	40005400 	.word	0x40005400
 8003e70:	000186a0 	.word	0x000186a0

08003e74 <MX_SPI1_Init>:
{
 8003e74:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8003e76:	480d      	ldr	r0, [pc, #52]	; (8003eac <MX_SPI1_Init+0x38>)
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <MX_SPI1_Init+0x3c>)
 8003e7a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e7c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003e80:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e82:	2300      	movs	r3, #0
 8003e84:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e86:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e88:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e8a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e90:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003e92:	2218      	movs	r2, #24
 8003e94:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e96:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e98:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e9a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003e9c:	230a      	movs	r3, #10
 8003e9e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ea0:	f003 fb84 	bl	80075ac <HAL_SPI_Init>
 8003ea4:	b900      	cbnz	r0, 8003ea8 <MX_SPI1_Init+0x34>
}
 8003ea6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003ea8:	f7ff ffc6 	bl	8003e38 <Error_Handler>
 8003eac:	20003354 	.word	0x20003354
 8003eb0:	40013000 	.word	0x40013000

08003eb4 <MX_TIM1_Init>:
{
 8003eb4:	b510      	push	{r4, lr}
 8003eb6:	b092      	sub	sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003eb8:	2400      	movs	r4, #0
 8003eba:	9410      	str	r4, [sp, #64]	; 0x40
 8003ebc:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ebe:	9409      	str	r4, [sp, #36]	; 0x24
 8003ec0:	940a      	str	r4, [sp, #40]	; 0x28
 8003ec2:	940b      	str	r4, [sp, #44]	; 0x2c
 8003ec4:	940c      	str	r4, [sp, #48]	; 0x30
 8003ec6:	940d      	str	r4, [sp, #52]	; 0x34
 8003ec8:	940e      	str	r4, [sp, #56]	; 0x38
 8003eca:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ecc:	2220      	movs	r2, #32
 8003ece:	4621      	mov	r1, r4
 8003ed0:	a801      	add	r0, sp, #4
 8003ed2:	f007 fee8 	bl	800bca6 <memset>
  htim1.Instance = TIM1;
 8003ed6:	482b      	ldr	r0, [pc, #172]	; (8003f84 <MX_TIM1_Init+0xd0>)
 8003ed8:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <MX_TIM1_Init+0xd4>)
 8003eda:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 42000-1;
 8003edc:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8003ee0:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee2:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 999;
 8003ee4:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003ee8:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eee:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ef0:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ef2:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ef4:	f003 ffed 	bl	8007ed2 <HAL_TIM_PWM_Init>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d136      	bne.n	8003f6a <MX_TIM1_Init+0xb6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003efc:	2300      	movs	r3, #0
 8003efe:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f00:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f02:	a910      	add	r1, sp, #64	; 0x40
 8003f04:	481f      	ldr	r0, [pc, #124]	; (8003f84 <MX_TIM1_Init+0xd0>)
 8003f06:	f004 f8cd 	bl	80080a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	d12f      	bne.n	8003f6e <MX_TIM1_Init+0xba>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f0e:	2360      	movs	r3, #96	; 0x60
 8003f10:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003f12:	2200      	movs	r2, #0
 8003f14:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f16:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f18:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f1a:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f1c:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f1e:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f20:	a909      	add	r1, sp, #36	; 0x24
 8003f22:	4818      	ldr	r0, [pc, #96]	; (8003f84 <MX_TIM1_Init+0xd0>)
 8003f24:	f004 f820 	bl	8007f68 <HAL_TIM_PWM_ConfigChannel>
 8003f28:	bb18      	cbnz	r0, 8003f72 <MX_TIM1_Init+0xbe>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	a909      	add	r1, sp, #36	; 0x24
 8003f2e:	4815      	ldr	r0, [pc, #84]	; (8003f84 <MX_TIM1_Init+0xd0>)
 8003f30:	f004 f81a 	bl	8007f68 <HAL_TIM_PWM_ConfigChannel>
 8003f34:	b9f8      	cbnz	r0, 8003f76 <MX_TIM1_Init+0xc2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f36:	2208      	movs	r2, #8
 8003f38:	a909      	add	r1, sp, #36	; 0x24
 8003f3a:	4812      	ldr	r0, [pc, #72]	; (8003f84 <MX_TIM1_Init+0xd0>)
 8003f3c:	f004 f814 	bl	8007f68 <HAL_TIM_PWM_ConfigChannel>
 8003f40:	b9d8      	cbnz	r0, 8003f7a <MX_TIM1_Init+0xc6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f46:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f48:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f4a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f4c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f52:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f54:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f56:	a901      	add	r1, sp, #4
 8003f58:	480a      	ldr	r0, [pc, #40]	; (8003f84 <MX_TIM1_Init+0xd0>)
 8003f5a:	f004 f8df 	bl	800811c <HAL_TIMEx_ConfigBreakDeadTime>
 8003f5e:	b970      	cbnz	r0, 8003f7e <MX_TIM1_Init+0xca>
  HAL_TIM_MspPostInit(&htim1);
 8003f60:	4808      	ldr	r0, [pc, #32]	; (8003f84 <MX_TIM1_Init+0xd0>)
 8003f62:	f000 fbcf 	bl	8004704 <HAL_TIM_MspPostInit>
}
 8003f66:	b012      	add	sp, #72	; 0x48
 8003f68:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003f6a:	f7ff ff65 	bl	8003e38 <Error_Handler>
    Error_Handler();
 8003f6e:	f7ff ff63 	bl	8003e38 <Error_Handler>
    Error_Handler();
 8003f72:	f7ff ff61 	bl	8003e38 <Error_Handler>
    Error_Handler();
 8003f76:	f7ff ff5f 	bl	8003e38 <Error_Handler>
    Error_Handler();
 8003f7a:	f7ff ff5d 	bl	8003e38 <Error_Handler>
    Error_Handler();
 8003f7e:	f7ff ff5b 	bl	8003e38 <Error_Handler>
 8003f82:	bf00      	nop
 8003f84:	200032d4 	.word	0x200032d4
 8003f88:	40010000 	.word	0x40010000

08003f8c <MX_TIM3_Init>:
{
 8003f8c:	b500      	push	{lr}
 8003f8e:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f90:	2300      	movs	r3, #0
 8003f92:	9308      	str	r3, [sp, #32]
 8003f94:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	9302      	str	r3, [sp, #8]
 8003f9a:	9303      	str	r3, [sp, #12]
 8003f9c:	9304      	str	r3, [sp, #16]
 8003f9e:	9305      	str	r3, [sp, #20]
 8003fa0:	9306      	str	r3, [sp, #24]
 8003fa2:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8003fa4:	4820      	ldr	r0, [pc, #128]	; (8004028 <MX_TIM3_Init+0x9c>)
 8003fa6:	4a21      	ldr	r2, [pc, #132]	; (800402c <MX_TIM3_Init+0xa0>)
 8003fa8:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 42000 - 1;
 8003faa:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8003fae:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fb0:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8003fb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003fb6:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fbc:	6102      	str	r2, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fbe:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003fc0:	f003 ff87 	bl	8007ed2 <HAL_TIM_PWM_Init>
 8003fc4:	bb28      	cbnz	r0, 8004012 <MX_TIM3_Init+0x86>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fca:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fcc:	a908      	add	r1, sp, #32
 8003fce:	4816      	ldr	r0, [pc, #88]	; (8004028 <MX_TIM3_Init+0x9c>)
 8003fd0:	f004 f868 	bl	80080a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003fd4:	b9f8      	cbnz	r0, 8004016 <MX_TIM3_Init+0x8a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fd6:	2360      	movs	r3, #96	; 0x60
 8003fd8:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8003fda:	2200      	movs	r2, #0
 8003fdc:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fde:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fe0:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fe2:	a901      	add	r1, sp, #4
 8003fe4:	4810      	ldr	r0, [pc, #64]	; (8004028 <MX_TIM3_Init+0x9c>)
 8003fe6:	f003 ffbf 	bl	8007f68 <HAL_TIM_PWM_ConfigChannel>
 8003fea:	b9b0      	cbnz	r0, 800401a <MX_TIM3_Init+0x8e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fec:	2204      	movs	r2, #4
 8003fee:	eb0d 0102 	add.w	r1, sp, r2
 8003ff2:	480d      	ldr	r0, [pc, #52]	; (8004028 <MX_TIM3_Init+0x9c>)
 8003ff4:	f003 ffb8 	bl	8007f68 <HAL_TIM_PWM_ConfigChannel>
 8003ff8:	b988      	cbnz	r0, 800401e <MX_TIM3_Init+0x92>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	a901      	add	r1, sp, #4
 8003ffe:	480a      	ldr	r0, [pc, #40]	; (8004028 <MX_TIM3_Init+0x9c>)
 8004000:	f003 ffb2 	bl	8007f68 <HAL_TIM_PWM_ConfigChannel>
 8004004:	b968      	cbnz	r0, 8004022 <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8004006:	4808      	ldr	r0, [pc, #32]	; (8004028 <MX_TIM3_Init+0x9c>)
 8004008:	f000 fb7c 	bl	8004704 <HAL_TIM_MspPostInit>
}
 800400c:	b00b      	add	sp, #44	; 0x2c
 800400e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004012:	f7ff ff11 	bl	8003e38 <Error_Handler>
    Error_Handler();
 8004016:	f7ff ff0f 	bl	8003e38 <Error_Handler>
    Error_Handler();
 800401a:	f7ff ff0d 	bl	8003e38 <Error_Handler>
    Error_Handler();
 800401e:	f7ff ff0b 	bl	8003e38 <Error_Handler>
    Error_Handler();
 8004022:	f7ff ff09 	bl	8003e38 <Error_Handler>
 8004026:	bf00      	nop
 8004028:	20003148 	.word	0x20003148
 800402c:	40000400 	.word	0x40000400

08004030 <MX_USART1_UART_Init>:
{
 8004030:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8004032:	480a      	ldr	r0, [pc, #40]	; (800405c <MX_USART1_UART_Init+0x2c>)
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <MX_USART1_UART_Init+0x30>)
 8004036:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8004038:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800403c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800403e:	2300      	movs	r3, #0
 8004040:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004042:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004044:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004046:	220c      	movs	r2, #12
 8004048:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800404a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800404c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800404e:	f004 fa18 	bl	8008482 <HAL_UART_Init>
 8004052:	b900      	cbnz	r0, 8004056 <MX_USART1_UART_Init+0x26>
}
 8004054:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004056:	f7ff feef 	bl	8003e38 <Error_Handler>
 800405a:	bf00      	nop
 800405c:	20003230 	.word	0x20003230
 8004060:	40011000 	.word	0x40011000

08004064 <MX_USART2_UART_Init>:
{
 8004064:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8004066:	480a      	ldr	r0, [pc, #40]	; (8004090 <MX_USART2_UART_Init+0x2c>)
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <MX_USART2_UART_Init+0x30>)
 800406a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800406c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004070:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004072:	2300      	movs	r3, #0
 8004074:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004076:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004078:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800407a:	220c      	movs	r2, #12
 800407c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800407e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004080:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004082:	f004 f9fe 	bl	8008482 <HAL_UART_Init>
 8004086:	b900      	cbnz	r0, 800408a <MX_USART2_UART_Init+0x26>
}
 8004088:	bd08      	pop	{r3, pc}
    Error_Handler();
 800408a:	f7ff fed5 	bl	8003e38 <Error_Handler>
 800408e:	bf00      	nop
 8004090:	200033ec 	.word	0x200033ec
 8004094:	40004400 	.word	0x40004400

08004098 <MX_USART6_UART_Init>:
{
 8004098:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 800409a:	480a      	ldr	r0, [pc, #40]	; (80040c4 <MX_USART6_UART_Init+0x2c>)
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <MX_USART6_UART_Init+0x30>)
 800409e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 19200;
 80040a0:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80040a4:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80040a6:	2300      	movs	r3, #0
 80040a8:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80040aa:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80040ac:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80040ae:	220c      	movs	r2, #12
 80040b0:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040b2:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80040b4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80040b6:	f004 f9e4 	bl	8008482 <HAL_UART_Init>
 80040ba:	b900      	cbnz	r0, 80040be <MX_USART6_UART_Init+0x26>
}
 80040bc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80040be:	f7ff febb 	bl	8003e38 <Error_Handler>
 80040c2:	bf00      	nop
 80040c4:	20003314 	.word	0x20003314
 80040c8:	40011400 	.word	0x40011400

080040cc <MX_TIM2_Init>:
{
 80040cc:	b500      	push	{lr}
 80040ce:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040d0:	2300      	movs	r3, #0
 80040d2:	9308      	str	r3, [sp, #32]
 80040d4:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	9302      	str	r3, [sp, #8]
 80040da:	9303      	str	r3, [sp, #12]
 80040dc:	9304      	str	r3, [sp, #16]
 80040de:	9305      	str	r3, [sp, #20]
 80040e0:	9306      	str	r3, [sp, #24]
 80040e2:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 80040e4:	481d      	ldr	r0, [pc, #116]	; (800415c <MX_TIM2_Init+0x90>)
 80040e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80040ea:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 80040ec:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ee:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 80040f0:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040f2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80040f6:	f003 feec 	bl	8007ed2 <HAL_TIM_PWM_Init>
 80040fa:	bb28      	cbnz	r0, 8004148 <MX_TIM2_Init+0x7c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040fc:	2300      	movs	r3, #0
 80040fe:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004100:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004102:	a908      	add	r1, sp, #32
 8004104:	4815      	ldr	r0, [pc, #84]	; (800415c <MX_TIM2_Init+0x90>)
 8004106:	f003 ffcd 	bl	80080a4 <HAL_TIMEx_MasterConfigSynchronization>
 800410a:	b9f8      	cbnz	r0, 800414c <MX_TIM2_Init+0x80>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800410c:	2360      	movs	r3, #96	; 0x60
 800410e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8004110:	2200      	movs	r2, #0
 8004112:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004114:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004116:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004118:	a901      	add	r1, sp, #4
 800411a:	4810      	ldr	r0, [pc, #64]	; (800415c <MX_TIM2_Init+0x90>)
 800411c:	f003 ff24 	bl	8007f68 <HAL_TIM_PWM_ConfigChannel>
 8004120:	b9b0      	cbnz	r0, 8004150 <MX_TIM2_Init+0x84>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004122:	2204      	movs	r2, #4
 8004124:	eb0d 0102 	add.w	r1, sp, r2
 8004128:	480c      	ldr	r0, [pc, #48]	; (800415c <MX_TIM2_Init+0x90>)
 800412a:	f003 ff1d 	bl	8007f68 <HAL_TIM_PWM_ConfigChannel>
 800412e:	b988      	cbnz	r0, 8004154 <MX_TIM2_Init+0x88>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004130:	2208      	movs	r2, #8
 8004132:	a901      	add	r1, sp, #4
 8004134:	4809      	ldr	r0, [pc, #36]	; (800415c <MX_TIM2_Init+0x90>)
 8004136:	f003 ff17 	bl	8007f68 <HAL_TIM_PWM_ConfigChannel>
 800413a:	b968      	cbnz	r0, 8004158 <MX_TIM2_Init+0x8c>
  HAL_TIM_MspPostInit(&htim2);
 800413c:	4807      	ldr	r0, [pc, #28]	; (800415c <MX_TIM2_Init+0x90>)
 800413e:	f000 fae1 	bl	8004704 <HAL_TIM_MspPostInit>
}
 8004142:	b00b      	add	sp, #44	; 0x2c
 8004144:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004148:	f7ff fe76 	bl	8003e38 <Error_Handler>
    Error_Handler();
 800414c:	f7ff fe74 	bl	8003e38 <Error_Handler>
    Error_Handler();
 8004150:	f7ff fe72 	bl	8003e38 <Error_Handler>
    Error_Handler();
 8004154:	f7ff fe70 	bl	8003e38 <Error_Handler>
    Error_Handler();
 8004158:	f7ff fe6e 	bl	8003e38 <Error_Handler>
 800415c:	200033ac 	.word	0x200033ac

08004160 <MX_ADC1_Init>:
{
 8004160:	b500      	push	{lr}
 8004162:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8004164:	2300      	movs	r3, #0
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	9302      	str	r3, [sp, #8]
 800416c:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800416e:	4814      	ldr	r0, [pc, #80]	; (80041c0 <MX_ADC1_Init+0x60>)
 8004170:	4a14      	ldr	r2, [pc, #80]	; (80041c4 <MX_ADC1_Init+0x64>)
 8004172:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004174:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004178:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800417a:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800417c:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800417e:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004180:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004184:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004186:	4a10      	ldr	r2, [pc, #64]	; (80041c8 <MX_ADC1_Init+0x68>)
 8004188:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800418a:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 800418c:	2201      	movs	r2, #1
 800418e:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004190:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004194:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004196:	f001 f971 	bl	800547c <HAL_ADC_Init>
 800419a:	b968      	cbnz	r0, 80041b8 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800419c:	2312      	movs	r3, #18
 800419e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80041a0:	2301      	movs	r3, #1
 80041a2:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80041a4:	2300      	movs	r3, #0
 80041a6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041a8:	4669      	mov	r1, sp
 80041aa:	4805      	ldr	r0, [pc, #20]	; (80041c0 <MX_ADC1_Init+0x60>)
 80041ac:	f001 f992 	bl	80054d4 <HAL_ADC_ConfigChannel>
 80041b0:	b920      	cbnz	r0, 80041bc <MX_ADC1_Init+0x5c>
}
 80041b2:	b005      	add	sp, #20
 80041b4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80041b8:	f7ff fe3e 	bl	8003e38 <Error_Handler>
    Error_Handler();
 80041bc:	f7ff fe3c 	bl	8003e38 <Error_Handler>
 80041c0:	20003188 	.word	0x20003188
 80041c4:	40012000 	.word	0x40012000
 80041c8:	0f000001 	.word	0x0f000001

080041cc <MX_RTC_Init>:
{
 80041cc:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 80041ce:	4809      	ldr	r0, [pc, #36]	; (80041f4 <MX_RTC_Init+0x28>)
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <MX_RTC_Init+0x2c>)
 80041d2:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80041d4:	2300      	movs	r3, #0
 80041d6:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80041d8:	227f      	movs	r2, #127	; 0x7f
 80041da:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80041dc:	22ff      	movs	r2, #255	; 0xff
 80041de:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80041e0:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80041e2:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80041e4:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80041e6:	f003 f858 	bl	800729a <HAL_RTC_Init>
 80041ea:	b900      	cbnz	r0, 80041ee <MX_RTC_Init+0x22>
}
 80041ec:	bd08      	pop	{r3, pc}
    Error_Handler();
 80041ee:	f7ff fe23 	bl	8003e38 <Error_Handler>
 80041f2:	bf00      	nop
 80041f4:	200032b4 	.word	0x200032b4
 80041f8:	40002800 	.word	0x40002800

080041fc <MX_CRC_Init>:
{
 80041fc:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 80041fe:	4804      	ldr	r0, [pc, #16]	; (8004210 <MX_CRC_Init+0x14>)
 8004200:	4b04      	ldr	r3, [pc, #16]	; (8004214 <MX_CRC_Init+0x18>)
 8004202:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004204:	f001 fa82 	bl	800570c <HAL_CRC_Init>
 8004208:	b900      	cbnz	r0, 800420c <MX_CRC_Init+0x10>
}
 800420a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800420c:	f7ff fe14 	bl	8003e38 <Error_Handler>
 8004210:	20003140 	.word	0x20003140
 8004214:	40023000 	.word	0x40023000

08004218 <MX_TIM11_Init>:
{
 8004218:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 800421a:	4808      	ldr	r0, [pc, #32]	; (800423c <MX_TIM11_Init+0x24>)
 800421c:	4b08      	ldr	r3, [pc, #32]	; (8004240 <MX_TIM11_Init+0x28>)
 800421e:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004224:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 8400 - 1;
 8004226:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800422a:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800422c:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800422e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004230:	f003 fe36 	bl	8007ea0 <HAL_TIM_Base_Init>
 8004234:	b900      	cbnz	r0, 8004238 <MX_TIM11_Init+0x20>
}
 8004236:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004238:	f7ff fdfe 	bl	8003e38 <Error_Handler>
 800423c:	20003270 	.word	0x20003270
 8004240:	40014800 	.word	0x40014800

08004244 <SystemClock_Config>:
{
 8004244:	b500      	push	{lr}
 8004246:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004248:	2230      	movs	r2, #48	; 0x30
 800424a:	2100      	movs	r1, #0
 800424c:	eb0d 0002 	add.w	r0, sp, r2
 8004250:	f007 fd29 	bl	800bca6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004254:	2300      	movs	r3, #0
 8004256:	9307      	str	r3, [sp, #28]
 8004258:	9308      	str	r3, [sp, #32]
 800425a:	9309      	str	r3, [sp, #36]	; 0x24
 800425c:	930a      	str	r3, [sp, #40]	; 0x28
 800425e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004260:	9302      	str	r3, [sp, #8]
 8004262:	9303      	str	r3, [sp, #12]
 8004264:	9304      	str	r3, [sp, #16]
 8004266:	9305      	str	r3, [sp, #20]
 8004268:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	4a27      	ldr	r2, [pc, #156]	; (800430c <SystemClock_Config+0xc8>)
 800426e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004270:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004274:	6411      	str	r1, [r2, #64]	; 0x40
 8004276:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004278:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800427c:	9200      	str	r2, [sp, #0]
 800427e:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	4a23      	ldr	r2, [pc, #140]	; (8004310 <SystemClock_Config+0xcc>)
 8004284:	6813      	ldr	r3, [r2, #0]
 8004286:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800428a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	6813      	ldr	r3, [r2, #0]
 8004292:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800429a:	2305      	movs	r3, #5
 800429c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800429e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042a2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80042a4:	2301      	movs	r3, #1
 80042a6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042a8:	2302      	movs	r3, #2
 80042aa:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80042b0:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80042b2:	2219      	movs	r2, #25
 80042b4:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80042b6:	22a8      	movs	r2, #168	; 0xa8
 80042b8:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042ba:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80042bc:	2304      	movs	r3, #4
 80042be:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042c0:	a80c      	add	r0, sp, #48	; 0x30
 80042c2:	f002 fbab 	bl	8006a1c <HAL_RCC_OscConfig>
 80042c6:	b9d8      	cbnz	r0, 8004300 <SystemClock_Config+0xbc>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042c8:	230f      	movs	r3, #15
 80042ca:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042cc:	2102      	movs	r1, #2
 80042ce:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042d0:	2300      	movs	r3, #0
 80042d2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80042d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042d8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042da:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80042dc:	a807      	add	r0, sp, #28
 80042de:	f002 fde9 	bl	8006eb4 <HAL_RCC_ClockConfig>
 80042e2:	b978      	cbnz	r0, 8004304 <SystemClock_Config+0xc0>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80042e4:	2302      	movs	r3, #2
 80042e6:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80042e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042ec:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042ee:	a802      	add	r0, sp, #8
 80042f0:	f002 fee8 	bl	80070c4 <HAL_RCCEx_PeriphCLKConfig>
 80042f4:	b940      	cbnz	r0, 8004308 <SystemClock_Config+0xc4>
  HAL_RCC_EnableCSS();
 80042f6:	f002 fd83 	bl	8006e00 <HAL_RCC_EnableCSS>
}
 80042fa:	b019      	add	sp, #100	; 0x64
 80042fc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004300:	f7ff fd9a 	bl	8003e38 <Error_Handler>
    Error_Handler();
 8004304:	f7ff fd98 	bl	8003e38 <Error_Handler>
    Error_Handler();
 8004308:	f7ff fd96 	bl	8003e38 <Error_Handler>
 800430c:	40023800 	.word	0x40023800
 8004310:	40007000 	.word	0x40007000

08004314 <main>:
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b0b6      	sub	sp, #216	; 0xd8
  HAL_Init();
 8004318:	f000 ffea 	bl	80052f0 <HAL_Init>
  SystemClock_Config();
 800431c:	f7ff ff92 	bl	8004244 <SystemClock_Config>
  MX_GPIO_Init();
 8004320:	f7ff fc4a 	bl	8003bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004324:	f7ff fcec 	bl	8003d00 <MX_DMA_Init>
  MX_I2C1_Init();
 8004328:	f7ff fd88 	bl	8003e3c <MX_I2C1_Init>
  MX_SPI1_Init();
 800432c:	f7ff fda2 	bl	8003e74 <MX_SPI1_Init>
  MX_TIM1_Init();
 8004330:	f7ff fdc0 	bl	8003eb4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8004334:	f7ff fe2a 	bl	8003f8c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004338:	f7ff fe7a 	bl	8004030 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800433c:	f7ff fe92 	bl	8004064 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8004340:	f7ff feaa 	bl	8004098 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8004344:	f7ff fec2 	bl	80040cc <MX_TIM2_Init>
  MX_ADC1_Init();
 8004348:	f7ff ff0a 	bl	8004160 <MX_ADC1_Init>
  MX_RTC_Init();
 800434c:	f7ff ff3e 	bl	80041cc <MX_RTC_Init>
  MX_CRC_Init();
 8004350:	f7ff ff54 	bl	80041fc <MX_CRC_Init>
  MX_TIM11_Init();
 8004354:	f7ff ff60 	bl	8004218 <MX_TIM11_Init>
  Config_Init(&hi2c1);
 8004358:	483f      	ldr	r0, [pc, #252]	; (8004458 <main+0x144>)
 800435a:	f7fd f80f 	bl	800137c <Config_Init>
  osMutexDef(SPIMutex);
 800435e:	2500      	movs	r5, #0
 8004360:	9534      	str	r5, [sp, #208]	; 0xd0
 8004362:	9535      	str	r5, [sp, #212]	; 0xd4
  SPIMutexHandle = osMutexCreate(osMutex(SPIMutex));
 8004364:	a834      	add	r0, sp, #208	; 0xd0
 8004366:	f004 fbc1 	bl	8008aec <osMutexCreate>
 800436a:	4b3c      	ldr	r3, [pc, #240]	; (800445c <main+0x148>)
 800436c:	6018      	str	r0, [r3, #0]
  osTimerDef(Config, ConfigSaveTmr);
 800436e:	4b3c      	ldr	r3, [pc, #240]	; (8004460 <main+0x14c>)
 8004370:	9332      	str	r3, [sp, #200]	; 0xc8
 8004372:	9533      	str	r5, [sp, #204]	; 0xcc
  ConfigHandle = osTimerCreate(osTimer(Config), osTimerOnce, NULL);
 8004374:	462a      	mov	r2, r5
 8004376:	4629      	mov	r1, r5
 8004378:	a832      	add	r0, sp, #200	; 0xc8
 800437a:	f004 fb95 	bl	8008aa8 <osTimerCreate>
 800437e:	4b39      	ldr	r3, [pc, #228]	; (8004464 <main+0x150>)
 8004380:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8004382:	4c39      	ldr	r4, [pc, #228]	; (8004468 <main+0x154>)
 8004384:	ae2b      	add	r6, sp, #172	; 0xac
 8004386:	4627      	mov	r7, r4
 8004388:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800438a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800438c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004390:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004394:	4629      	mov	r1, r5
 8004396:	a82b      	add	r0, sp, #172	; 0xac
 8004398:	f004 fb47 	bl	8008a2a <osThreadCreate>
 800439c:	4b33      	ldr	r3, [pc, #204]	; (800446c <main+0x158>)
 800439e:	6018      	str	r0, [r3, #0]
  osThreadDef(PowerRegulation, RegulationTask, osPriorityRealtime, 0, 256);
 80043a0:	ae24      	add	r6, sp, #144	; 0x90
 80043a2:	f104 071c 	add.w	r7, r4, #28
 80043a6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80043a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80043aa:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80043ae:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  PowerRegulationHandle = osThreadCreate(osThread(PowerRegulation), NULL);
 80043b2:	4629      	mov	r1, r5
 80043b4:	a824      	add	r0, sp, #144	; 0x90
 80043b6:	f004 fb38 	bl	8008a2a <osThreadCreate>
 80043ba:	4b2d      	ldr	r3, [pc, #180]	; (8004470 <main+0x15c>)
 80043bc:	6018      	str	r0, [r3, #0]
  osThreadDef(Diplays, DisplayTask, osPriorityNormal, 0, 256);
 80043be:	ae1d      	add	r6, sp, #116	; 0x74
 80043c0:	f104 0738 	add.w	r7, r4, #56	; 0x38
 80043c4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80043c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80043c8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80043cc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DiplaysHandle = osThreadCreate(osThread(Diplays), NULL);
 80043d0:	4629      	mov	r1, r5
 80043d2:	a81d      	add	r0, sp, #116	; 0x74
 80043d4:	f004 fb29 	bl	8008a2a <osThreadCreate>
 80043d8:	4b26      	ldr	r3, [pc, #152]	; (8004474 <main+0x160>)
 80043da:	6018      	str	r0, [r3, #0]
  osThreadDef(Test, TestTask, osPriorityLow, 0, 128);
 80043dc:	ae16      	add	r6, sp, #88	; 0x58
 80043de:	f104 0754 	add.w	r7, r4, #84	; 0x54
 80043e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80043e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80043e6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80043ea:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TestHandle = osThreadCreate(osThread(Test), NULL);
 80043ee:	4629      	mov	r1, r5
 80043f0:	a816      	add	r0, sp, #88	; 0x58
 80043f2:	f004 fb1a 	bl	8008a2a <osThreadCreate>
 80043f6:	4b20      	ldr	r3, [pc, #128]	; (8004478 <main+0x164>)
 80043f8:	6018      	str	r0, [r3, #0]
  osThreadDef(Ethernet, EthernetTask, osPriorityHigh, 0, 256);
 80043fa:	ae0f      	add	r6, sp, #60	; 0x3c
 80043fc:	f104 0770 	add.w	r7, r4, #112	; 0x70
 8004400:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004402:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004404:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004408:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  EthernetHandle = osThreadCreate(osThread(Ethernet), NULL);
 800440c:	4629      	mov	r1, r5
 800440e:	a80f      	add	r0, sp, #60	; 0x3c
 8004410:	f004 fb0b 	bl	8008a2a <osThreadCreate>
 8004414:	4b19      	ldr	r3, [pc, #100]	; (800447c <main+0x168>)
 8004416:	6018      	str	r0, [r3, #0]
  osThreadDef(nRF24L01, RadioTask, osPriorityAboveNormal, 0, 256);
 8004418:	ae08      	add	r6, sp, #32
 800441a:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 800441e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004420:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004422:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004426:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  nRF24L01Handle = osThreadCreate(osThread(nRF24L01), NULL);
 800442a:	4629      	mov	r1, r5
 800442c:	a808      	add	r0, sp, #32
 800442e:	f004 fafc 	bl	8008a2a <osThreadCreate>
 8004432:	4b13      	ldr	r3, [pc, #76]	; (8004480 <main+0x16c>)
 8004434:	6018      	str	r0, [r3, #0]
  osThreadDef(DataLog, DataLogTask, osPriorityBelowNormal, 0, 256);
 8004436:	ae01      	add	r6, sp, #4
 8004438:	34a8      	adds	r4, #168	; 0xa8
 800443a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800443c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800443e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004442:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DataLogHandle = osThreadCreate(osThread(DataLog), NULL);
 8004446:	4629      	mov	r1, r5
 8004448:	a801      	add	r0, sp, #4
 800444a:	f004 faee 	bl	8008a2a <osThreadCreate>
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <main+0x170>)
 8004450:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8004452:	f004 fae5 	bl	8008a20 <osKernelStart>
 8004456:	e7fe      	b.n	8004456 <main+0x142>
 8004458:	200030ec 	.word	0x200030ec
 800445c:	20003430 	.word	0x20003430
 8004460:	08003bb5 	.word	0x08003bb5
 8004464:	200030e8 	.word	0x200030e8
 8004468:	0800c528 	.word	0x0800c528
 800446c:	20003020 	.word	0x20003020
 8004470:	200030e4 	.word	0x200030e4
 8004474:	2000342c 	.word	0x2000342c
 8004478:	200032b0 	.word	0x200032b0
 800447c:	20003438 	.word	0x20003438
 8004480:	20003018 	.word	0x20003018
 8004484:	2000301c 	.word	0x2000301c

08004488 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004488:	b500      	push	{lr}
 800448a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800448c:	2200      	movs	r2, #0
 800448e:	9200      	str	r2, [sp, #0]
 8004490:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <HAL_MspInit+0x40>)
 8004492:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004494:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004498:	6459      	str	r1, [r3, #68]	; 0x44
 800449a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800449c:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80044a0:	9100      	str	r1, [sp, #0]
 80044a2:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	9201      	str	r2, [sp, #4]
 80044a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80044a8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80044ac:	6419      	str	r1, [r3, #64]	; 0x40
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80044b8:	210f      	movs	r1, #15
 80044ba:	f06f 0001 	mvn.w	r0, #1
 80044be:	f001 f8e3 	bl	8005688 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044c2:	b003      	add	sp, #12
 80044c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80044c8:	40023800 	.word	0x40023800

080044cc <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 80044cc:	6802      	ldr	r2, [r0, #0]
 80044ce:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <HAL_ADC_MspInit+0x28>)
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d000      	beq.n	80044d6 <HAL_ADC_MspInit+0xa>
 80044d4:	4770      	bx	lr
{
 80044d6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80044d8:	2300      	movs	r3, #0
 80044da:	9301      	str	r3, [sp, #4]
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_ADC_MspInit+0x2c>)
 80044de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044e4:	645a      	str	r2, [r3, #68]	; 0x44
 80044e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	9301      	str	r3, [sp, #4]
 80044ee:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80044f0:	b002      	add	sp, #8
 80044f2:	4770      	bx	lr
 80044f4:	40012000 	.word	0x40012000
 80044f8:	40023800 	.word	0x40023800

080044fc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80044fc:	6802      	ldr	r2, [r0, #0]
 80044fe:	4b09      	ldr	r3, [pc, #36]	; (8004524 <HAL_CRC_MspInit+0x28>)
 8004500:	429a      	cmp	r2, r3
 8004502:	d000      	beq.n	8004506 <HAL_CRC_MspInit+0xa>
 8004504:	4770      	bx	lr
{
 8004506:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004508:	2300      	movs	r3, #0
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <HAL_CRC_MspInit+0x2c>)
 800450e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004510:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800451c:	9301      	str	r3, [sp, #4]
 800451e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004520:	b002      	add	sp, #8
 8004522:	4770      	bx	lr
 8004524:	40023000 	.word	0x40023000
 8004528:	40023800 	.word	0x40023800

0800452c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800452c:	b530      	push	{r4, r5, lr}
 800452e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004530:	2300      	movs	r3, #0
 8004532:	9303      	str	r3, [sp, #12]
 8004534:	9304      	str	r3, [sp, #16]
 8004536:	9305      	str	r3, [sp, #20]
 8004538:	9306      	str	r3, [sp, #24]
 800453a:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 800453c:	6802      	ldr	r2, [r0, #0]
 800453e:	4b15      	ldr	r3, [pc, #84]	; (8004594 <HAL_I2C_MspInit+0x68>)
 8004540:	429a      	cmp	r2, r3
 8004542:	d001      	beq.n	8004548 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004544:	b009      	add	sp, #36	; 0x24
 8004546:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004548:	2500      	movs	r5, #0
 800454a:	9501      	str	r5, [sp, #4]
 800454c:	4c12      	ldr	r4, [pc, #72]	; (8004598 <HAL_I2C_MspInit+0x6c>)
 800454e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004550:	f043 0302 	orr.w	r3, r3, #2
 8004554:	6323      	str	r3, [r4, #48]	; 0x30
 8004556:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004560:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004564:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004566:	2312      	movs	r3, #18
 8004568:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800456a:	2301      	movs	r3, #1
 800456c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800456e:	2303      	movs	r3, #3
 8004570:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004572:	2304      	movs	r3, #4
 8004574:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004576:	a903      	add	r1, sp, #12
 8004578:	4808      	ldr	r0, [pc, #32]	; (800459c <HAL_I2C_MspInit+0x70>)
 800457a:	f001 fb53 	bl	8005c24 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800457e:	9502      	str	r5, [sp, #8]
 8004580:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004582:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004586:	6423      	str	r3, [r4, #64]	; 0x40
 8004588:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800458a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800458e:	9302      	str	r3, [sp, #8]
 8004590:	9b02      	ldr	r3, [sp, #8]
}
 8004592:	e7d7      	b.n	8004544 <HAL_I2C_MspInit+0x18>
 8004594:	40005400 	.word	0x40005400
 8004598:	40023800 	.word	0x40023800
 800459c:	40020400 	.word	0x40020400

080045a0 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80045a0:	6802      	ldr	r2, [r0, #0]
 80045a2:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <HAL_RTC_MspInit+0x14>)
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d000      	beq.n	80045aa <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80045a8:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 80045aa:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <HAL_RTC_MspInit+0x18>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
}
 80045b0:	e7fa      	b.n	80045a8 <HAL_RTC_MspInit+0x8>
 80045b2:	bf00      	nop
 80045b4:	40002800 	.word	0x40002800
 80045b8:	42470e3c 	.word	0x42470e3c

080045bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045bc:	b500      	push	{lr}
 80045be:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c0:	2300      	movs	r3, #0
 80045c2:	9303      	str	r3, [sp, #12]
 80045c4:	9304      	str	r3, [sp, #16]
 80045c6:	9305      	str	r3, [sp, #20]
 80045c8:	9306      	str	r3, [sp, #24]
 80045ca:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 80045cc:	6802      	ldr	r2, [r0, #0]
 80045ce:	4b15      	ldr	r3, [pc, #84]	; (8004624 <HAL_SPI_MspInit+0x68>)
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d002      	beq.n	80045da <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80045d4:	b009      	add	sp, #36	; 0x24
 80045d6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045da:	2100      	movs	r1, #0
 80045dc:	9101      	str	r1, [sp, #4]
 80045de:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80045e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44
 80045ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80045f0:	9201      	str	r2, [sp, #4]
 80045f2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f4:	9102      	str	r1, [sp, #8]
 80045f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f8:	f042 0201 	orr.w	r2, r2, #1
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	9302      	str	r3, [sp, #8]
 8004606:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004608:	23e0      	movs	r3, #224	; 0xe0
 800460a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460c:	2302      	movs	r3, #2
 800460e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004610:	2303      	movs	r3, #3
 8004612:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004614:	2305      	movs	r3, #5
 8004616:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004618:	a903      	add	r1, sp, #12
 800461a:	4803      	ldr	r0, [pc, #12]	; (8004628 <HAL_SPI_MspInit+0x6c>)
 800461c:	f001 fb02 	bl	8005c24 <HAL_GPIO_Init>
}
 8004620:	e7d8      	b.n	80045d4 <HAL_SPI_MspInit+0x18>
 8004622:	bf00      	nop
 8004624:	40013000 	.word	0x40013000
 8004628:	40020000 	.word	0x40020000

0800462c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800462c:	b510      	push	{r4, lr}
 800462e:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 8004630:	6803      	ldr	r3, [r0, #0]
 8004632:	4a21      	ldr	r2, [pc, #132]	; (80046b8 <HAL_TIM_PWM_MspInit+0x8c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d007      	beq.n	8004648 <HAL_TIM_PWM_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 8004638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463c:	d021      	beq.n	8004682 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 800463e:	4a1f      	ldr	r2, [pc, #124]	; (80046bc <HAL_TIM_PWM_MspInit+0x90>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d02b      	beq.n	800469c <HAL_TIM_PWM_MspInit+0x70>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004644:	b004      	add	sp, #16
 8004646:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004648:	2400      	movs	r4, #0
 800464a:	9401      	str	r4, [sp, #4]
 800464c:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <HAL_TIM_PWM_MspInit+0x94>)
 800464e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004650:	f042 0201 	orr.w	r2, r2, #1
 8004654:	645a      	str	r2, [r3, #68]	; 0x44
 8004656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004660:	4622      	mov	r2, r4
 8004662:	4621      	mov	r1, r4
 8004664:	2019      	movs	r0, #25
 8004666:	f001 f80f 	bl	8005688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800466a:	2019      	movs	r0, #25
 800466c:	f001 f840 	bl	80056f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8004670:	4622      	mov	r2, r4
 8004672:	2105      	movs	r1, #5
 8004674:	201a      	movs	r0, #26
 8004676:	f001 f807 	bl	8005688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800467a:	201a      	movs	r0, #26
 800467c:	f001 f838 	bl	80056f0 <HAL_NVIC_EnableIRQ>
 8004680:	e7e0      	b.n	8004644 <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	9302      	str	r3, [sp, #8]
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <HAL_TIM_PWM_MspInit+0x94>)
 8004688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	641a      	str	r2, [r3, #64]	; 0x40
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	9302      	str	r3, [sp, #8]
 8004698:	9b02      	ldr	r3, [sp, #8]
 800469a:	e7d3      	b.n	8004644 <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800469c:	2300      	movs	r3, #0
 800469e:	9303      	str	r3, [sp, #12]
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <HAL_TIM_PWM_MspInit+0x94>)
 80046a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a4:	f042 0202 	orr.w	r2, r2, #2
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	9303      	str	r3, [sp, #12]
 80046b2:	9b03      	ldr	r3, [sp, #12]
}
 80046b4:	e7c6      	b.n	8004644 <HAL_TIM_PWM_MspInit+0x18>
 80046b6:	bf00      	nop
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40023800 	.word	0x40023800

080046c4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 80046c4:	6802      	ldr	r2, [r0, #0]
 80046c6:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <HAL_TIM_Base_MspInit+0x3c>)
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d000      	beq.n	80046ce <HAL_TIM_Base_MspInit+0xa>
 80046cc:	4770      	bx	lr
{
 80046ce:	b500      	push	{lr}
 80046d0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80046d2:	2200      	movs	r2, #0
 80046d4:	9201      	str	r2, [sp, #4]
 80046d6:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 80046da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80046dc:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80046e0:	6459      	str	r1, [r3, #68]	; 0x44
 80046e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	9b01      	ldr	r3, [sp, #4]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80046ec:	2105      	movs	r1, #5
 80046ee:	201a      	movs	r0, #26
 80046f0:	f000 ffca 	bl	8005688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80046f4:	201a      	movs	r0, #26
 80046f6:	f000 fffb 	bl	80056f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80046fa:	b003      	add	sp, #12
 80046fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004700:	40014800 	.word	0x40014800

08004704 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004704:	b570      	push	{r4, r5, r6, lr}
 8004706:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004708:	2300      	movs	r3, #0
 800470a:	9305      	str	r3, [sp, #20]
 800470c:	9306      	str	r3, [sp, #24]
 800470e:	9307      	str	r3, [sp, #28]
 8004710:	9308      	str	r3, [sp, #32]
 8004712:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim->Instance==TIM1)
 8004714:	6803      	ldr	r3, [r0, #0]
 8004716:	4a32      	ldr	r2, [pc, #200]	; (80047e0 <HAL_TIM_MspPostInit+0xdc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d007      	beq.n	800472c <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004720:	d01c      	beq.n	800475c <HAL_TIM_MspPostInit+0x58>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8004722:	4a30      	ldr	r2, [pc, #192]	; (80047e4 <HAL_TIM_MspPostInit+0xe0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d045      	beq.n	80047b4 <HAL_TIM_MspPostInit+0xb0>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004728:	b00a      	add	sp, #40	; 0x28
 800472a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800472c:	2300      	movs	r3, #0
 800472e:	9301      	str	r3, [sp, #4]
 8004730:	4b2d      	ldr	r3, [pc, #180]	; (80047e8 <HAL_TIM_MspPostInit+0xe4>)
 8004732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004734:	f042 0201 	orr.w	r2, r2, #1
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	9301      	str	r3, [sp, #4]
 8004742:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004744:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004748:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474a:	2302      	movs	r3, #2
 800474c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800474e:	2301      	movs	r3, #1
 8004750:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004752:	a905      	add	r1, sp, #20
 8004754:	4825      	ldr	r0, [pc, #148]	; (80047ec <HAL_TIM_MspPostInit+0xe8>)
 8004756:	f001 fa65 	bl	8005c24 <HAL_GPIO_Init>
 800475a:	e7e5      	b.n	8004728 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800475c:	2400      	movs	r4, #0
 800475e:	9402      	str	r4, [sp, #8]
 8004760:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8004764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
 800476c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800476e:	f002 0201 	and.w	r2, r2, #1
 8004772:	9202      	str	r2, [sp, #8]
 8004774:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004776:	9403      	str	r4, [sp, #12]
 8004778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800477a:	f042 0202 	orr.w	r2, r2, #2
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	9303      	str	r3, [sp, #12]
 8004788:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800478a:	2501      	movs	r5, #1
 800478c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478e:	2602      	movs	r6, #2
 8004790:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004792:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004794:	a905      	add	r1, sp, #20
 8004796:	4815      	ldr	r0, [pc, #84]	; (80047ec <HAL_TIM_MspPostInit+0xe8>)
 8004798:	f001 fa44 	bl	8005c24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800479c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80047a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80047a8:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047aa:	a905      	add	r1, sp, #20
 80047ac:	4810      	ldr	r0, [pc, #64]	; (80047f0 <HAL_TIM_MspPostInit+0xec>)
 80047ae:	f001 fa39 	bl	8005c24 <HAL_GPIO_Init>
 80047b2:	e7b9      	b.n	8004728 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b4:	2300      	movs	r3, #0
 80047b6:	9304      	str	r3, [sp, #16]
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <HAL_TIM_MspPostInit+0xe4>)
 80047ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047bc:	f042 0202 	orr.w	r2, r2, #2
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	9304      	str	r3, [sp, #16]
 80047ca:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 80047cc:	2331      	movs	r3, #49	; 0x31
 80047ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d0:	2302      	movs	r3, #2
 80047d2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047d4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047d6:	a905      	add	r1, sp, #20
 80047d8:	4805      	ldr	r0, [pc, #20]	; (80047f0 <HAL_TIM_MspPostInit+0xec>)
 80047da:	f001 fa23 	bl	8005c24 <HAL_GPIO_Init>
}
 80047de:	e7a3      	b.n	8004728 <HAL_TIM_MspPostInit+0x24>
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40023800 	.word	0x40023800
 80047ec:	40020000 	.word	0x40020000
 80047f0:	40020400 	.word	0x40020400

080047f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047f4:	b530      	push	{r4, r5, lr}
 80047f6:	b08d      	sub	sp, #52	; 0x34
 80047f8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047fa:	2300      	movs	r3, #0
 80047fc:	9307      	str	r3, [sp, #28]
 80047fe:	9308      	str	r3, [sp, #32]
 8004800:	9309      	str	r3, [sp, #36]	; 0x24
 8004802:	930a      	str	r3, [sp, #40]	; 0x28
 8004804:	930b      	str	r3, [sp, #44]	; 0x2c
  if(huart->Instance==USART1)
 8004806:	6803      	ldr	r3, [r0, #0]
 8004808:	4a6e      	ldr	r2, [pc, #440]	; (80049c4 <HAL_UART_MspInit+0x1d0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d008      	beq.n	8004820 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800480e:	4a6e      	ldr	r2, [pc, #440]	; (80049c8 <HAL_UART_MspInit+0x1d4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d04b      	beq.n	80048ac <HAL_UART_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8004814:	4a6d      	ldr	r2, [pc, #436]	; (80049cc <HAL_UART_MspInit+0x1d8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	f000 808c 	beq.w	8004934 <HAL_UART_MspInit+0x140>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800481c:	b00d      	add	sp, #52	; 0x34
 800481e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004820:	2500      	movs	r5, #0
 8004822:	9501      	str	r5, [sp, #4]
 8004824:	4b6a      	ldr	r3, [pc, #424]	; (80049d0 <HAL_UART_MspInit+0x1dc>)
 8004826:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004828:	f042 0210 	orr.w	r2, r2, #16
 800482c:	645a      	str	r2, [r3, #68]	; 0x44
 800482e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004830:	f002 0210 	and.w	r2, r2, #16
 8004834:	9201      	str	r2, [sp, #4]
 8004836:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004838:	9502      	str	r5, [sp, #8]
 800483a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800483c:	f042 0202 	orr.w	r2, r2, #2
 8004840:	631a      	str	r2, [r3, #48]	; 0x30
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	9302      	str	r3, [sp, #8]
 800484a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800484c:	23c0      	movs	r3, #192	; 0xc0
 800484e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004850:	2302      	movs	r3, #2
 8004852:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004854:	2303      	movs	r3, #3
 8004856:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004858:	2307      	movs	r3, #7
 800485a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800485c:	a907      	add	r1, sp, #28
 800485e:	485d      	ldr	r0, [pc, #372]	; (80049d4 <HAL_UART_MspInit+0x1e0>)
 8004860:	f001 f9e0 	bl	8005c24 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004864:	485c      	ldr	r0, [pc, #368]	; (80049d8 <HAL_UART_MspInit+0x1e4>)
 8004866:	4b5d      	ldr	r3, [pc, #372]	; (80049dc <HAL_UART_MspInit+0x1e8>)
 8004868:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800486a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800486e:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004870:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004872:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004878:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800487a:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800487c:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800487e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004882:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004884:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004886:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004888:	f000 ffe4 	bl	8005854 <HAL_DMA_Init>
 800488c:	b958      	cbnz	r0, 80048a6 <HAL_UART_MspInit+0xb2>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800488e:	4b52      	ldr	r3, [pc, #328]	; (80049d8 <HAL_UART_MspInit+0x1e4>)
 8004890:	6363      	str	r3, [r4, #52]	; 0x34
 8004892:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8004894:	2200      	movs	r2, #0
 8004896:	2107      	movs	r1, #7
 8004898:	2025      	movs	r0, #37	; 0x25
 800489a:	f000 fef5 	bl	8005688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800489e:	2025      	movs	r0, #37	; 0x25
 80048a0:	f000 ff26 	bl	80056f0 <HAL_NVIC_EnableIRQ>
 80048a4:	e7ba      	b.n	800481c <HAL_UART_MspInit+0x28>
      Error_Handler();
 80048a6:	f7ff fac7 	bl	8003e38 <Error_Handler>
 80048aa:	e7f0      	b.n	800488e <HAL_UART_MspInit+0x9a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80048ac:	2500      	movs	r5, #0
 80048ae:	9503      	str	r5, [sp, #12]
 80048b0:	4b47      	ldr	r3, [pc, #284]	; (80049d0 <HAL_UART_MspInit+0x1dc>)
 80048b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40
 80048ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048bc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80048c0:	9203      	str	r2, [sp, #12]
 80048c2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c4:	9504      	str	r5, [sp, #16]
 80048c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048c8:	f042 0201 	orr.w	r2, r2, #1
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	9304      	str	r3, [sp, #16]
 80048d6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80048d8:	230c      	movs	r3, #12
 80048da:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048dc:	2302      	movs	r3, #2
 80048de:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e0:	2303      	movs	r3, #3
 80048e2:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048e4:	2307      	movs	r3, #7
 80048e6:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048e8:	a907      	add	r1, sp, #28
 80048ea:	483d      	ldr	r0, [pc, #244]	; (80049e0 <HAL_UART_MspInit+0x1ec>)
 80048ec:	f001 f99a 	bl	8005c24 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80048f0:	483c      	ldr	r0, [pc, #240]	; (80049e4 <HAL_UART_MspInit+0x1f0>)
 80048f2:	4b3d      	ldr	r3, [pc, #244]	; (80049e8 <HAL_UART_MspInit+0x1f4>)
 80048f4:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80048f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048fa:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048fc:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048fe:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004904:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004906:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004908:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800490a:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800490c:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800490e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004910:	f000 ffa0 	bl	8005854 <HAL_DMA_Init>
 8004914:	b958      	cbnz	r0, 800492e <HAL_UART_MspInit+0x13a>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004916:	4b33      	ldr	r3, [pc, #204]	; (80049e4 <HAL_UART_MspInit+0x1f0>)
 8004918:	6363      	str	r3, [r4, #52]	; 0x34
 800491a:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 800491c:	2200      	movs	r2, #0
 800491e:	2108      	movs	r1, #8
 8004920:	2026      	movs	r0, #38	; 0x26
 8004922:	f000 feb1 	bl	8005688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004926:	2026      	movs	r0, #38	; 0x26
 8004928:	f000 fee2 	bl	80056f0 <HAL_NVIC_EnableIRQ>
 800492c:	e776      	b.n	800481c <HAL_UART_MspInit+0x28>
      Error_Handler();
 800492e:	f7ff fa83 	bl	8003e38 <Error_Handler>
 8004932:	e7f0      	b.n	8004916 <HAL_UART_MspInit+0x122>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004934:	2500      	movs	r5, #0
 8004936:	9505      	str	r5, [sp, #20]
 8004938:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <HAL_UART_MspInit+0x1dc>)
 800493a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800493c:	f042 0220 	orr.w	r2, r2, #32
 8004940:	645a      	str	r2, [r3, #68]	; 0x44
 8004942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004944:	f002 0220 	and.w	r2, r2, #32
 8004948:	9205      	str	r2, [sp, #20]
 800494a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800494c:	9506      	str	r5, [sp, #24]
 800494e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004950:	f042 0201 	orr.w	r2, r2, #1
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	9306      	str	r3, [sp, #24]
 800495e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004960:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004964:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004966:	2302      	movs	r3, #2
 8004968:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800496a:	2303      	movs	r3, #3
 800496c:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800496e:	2308      	movs	r3, #8
 8004970:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004972:	a907      	add	r1, sp, #28
 8004974:	481a      	ldr	r0, [pc, #104]	; (80049e0 <HAL_UART_MspInit+0x1ec>)
 8004976:	f001 f955 	bl	8005c24 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800497a:	481c      	ldr	r0, [pc, #112]	; (80049ec <HAL_UART_MspInit+0x1f8>)
 800497c:	4b1c      	ldr	r3, [pc, #112]	; (80049f0 <HAL_UART_MspInit+0x1fc>)
 800497e:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004980:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8004984:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004986:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004988:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800498a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800498e:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004990:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004992:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004998:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800499a:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800499c:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800499e:	f000 ff59 	bl	8005854 <HAL_DMA_Init>
 80049a2:	b958      	cbnz	r0, 80049bc <HAL_UART_MspInit+0x1c8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80049a4:	4b11      	ldr	r3, [pc, #68]	; (80049ec <HAL_UART_MspInit+0x1f8>)
 80049a6:	6363      	str	r3, [r4, #52]	; 0x34
 80049a8:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 80049aa:	2200      	movs	r2, #0
 80049ac:	2106      	movs	r1, #6
 80049ae:	2047      	movs	r0, #71	; 0x47
 80049b0:	f000 fe6a 	bl	8005688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80049b4:	2047      	movs	r0, #71	; 0x47
 80049b6:	f000 fe9b 	bl	80056f0 <HAL_NVIC_EnableIRQ>
}
 80049ba:	e72f      	b.n	800481c <HAL_UART_MspInit+0x28>
      Error_Handler();
 80049bc:	f7ff fa3c 	bl	8003e38 <Error_Handler>
 80049c0:	e7f0      	b.n	80049a4 <HAL_UART_MspInit+0x1b0>
 80049c2:	bf00      	nop
 80049c4:	40011000 	.word	0x40011000
 80049c8:	40004400 	.word	0x40004400
 80049cc:	40011400 	.word	0x40011400
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40020400 	.word	0x40020400
 80049d8:	200031d0 	.word	0x200031d0
 80049dc:	40026440 	.word	0x40026440
 80049e0:	40020000 	.word	0x40020000
 80049e4:	20003024 	.word	0x20003024
 80049e8:	40026088 	.word	0x40026088
 80049ec:	20003084 	.word	0x20003084
 80049f0:	40026428 	.word	0x40026428

080049f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049f4:	b510      	push	{r4, lr}
 80049f6:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;

  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80049f8:	2200      	movs	r2, #0
 80049fa:	4601      	mov	r1, r0
 80049fc:	2019      	movs	r0, #25
 80049fe:	f000 fe43 	bl	8005688 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004a02:	2019      	movs	r0, #25
 8004a04:	f000 fe74 	bl	80056f0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8004a08:	2400      	movs	r4, #0
 8004a0a:	9401      	str	r4, [sp, #4]
 8004a0c:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <HAL_InitTick+0x68>)
 8004a0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a10:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004a14:	645a      	str	r2, [r3, #68]	; 0x44
 8004a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004a20:	a902      	add	r1, sp, #8
 8004a22:	a803      	add	r0, sp, #12
 8004a24:	f002 fb1c 	bl	8007060 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004a28:	f002 fb0a 	bl	8007040 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004a2c:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <HAL_InitTick+0x6c>)
 8004a2e:	fba3 2300 	umull	r2, r3, r3, r0
 8004a32:	0c9b      	lsrs	r3, r3, #18
 8004a34:	3b01      	subs	r3, #1

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8004a36:	480b      	ldr	r0, [pc, #44]	; (8004a64 <HAL_InitTick+0x70>)
 8004a38:	4a0b      	ldr	r2, [pc, #44]	; (8004a68 <HAL_InitTick+0x74>)
 8004a3a:	6002      	str	r2, [r0, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8004a3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a40:	60c2      	str	r2, [r0, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8004a42:	6043      	str	r3, [r0, #4]
  htim10.Init.ClockDivision = 0;
 8004a44:	6104      	str	r4, [r0, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a46:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8004a48:	f003 fa2a 	bl	8007ea0 <HAL_TIM_Base_Init>
 8004a4c:	b110      	cbz	r0, 8004a54 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
  }

  /* Return function status */
  return HAL_ERROR;
 8004a4e:	2001      	movs	r0, #1
}
 8004a50:	b008      	add	sp, #32
 8004a52:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim10);
 8004a54:	4803      	ldr	r0, [pc, #12]	; (8004a64 <HAL_InitTick+0x70>)
 8004a56:	f003 f903 	bl	8007c60 <HAL_TIM_Base_Start_IT>
 8004a5a:	e7f9      	b.n	8004a50 <HAL_InitTick+0x5c>
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	431bde83 	.word	0x431bde83
 8004a64:	2000343c 	.word	0x2000343c
 8004a68:	40014400 	.word	0x40014400

08004a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004a6e:	f002 fb17 	bl	80070a0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a72:	bd08      	pop	{r3, pc}

08004a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a74:	e7fe      	b.n	8004a74 <HardFault_Handler>

08004a76 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a76:	e7fe      	b.n	8004a76 <MemManage_Handler>

08004a78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a78:	e7fe      	b.n	8004a78 <BusFault_Handler>

08004a7a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a7a:	e7fe      	b.n	8004a7a <UsageFault_Handler>

08004a7c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a7c:	4770      	bx	lr

08004a7e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004a7e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004a80:	2002      	movs	r0, #2
 8004a82:	f001 f9af 	bl	8005de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004a86:	bd08      	pop	{r3, pc}

08004a88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004a88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004a8a:	4802      	ldr	r0, [pc, #8]	; (8004a94 <DMA1_Stream5_IRQHandler+0xc>)
 8004a8c:	f000 ffda 	bl	8005a44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004a90:	bd08      	pop	{r3, pc}
 8004a92:	bf00      	nop
 8004a94:	20003024 	.word	0x20003024

08004a98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a9a:	4803      	ldr	r0, [pc, #12]	; (8004aa8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a9c:	f003 f8f5 	bl	8007c8a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004aa0:	4802      	ldr	r0, [pc, #8]	; (8004aac <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004aa2:	f003 f8f2 	bl	8007c8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004aa6:	bd08      	pop	{r3, pc}
 8004aa8:	200032d4 	.word	0x200032d4
 8004aac:	2000343c 	.word	0x2000343c

08004ab0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004ab0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ab2:	4803      	ldr	r0, [pc, #12]	; (8004ac0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004ab4:	f003 f8e9 	bl	8007c8a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004ab8:	4802      	ldr	r0, [pc, #8]	; (8004ac4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004aba:	f003 f8e6 	bl	8007c8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004abe:	bd08      	pop	{r3, pc}
 8004ac0:	200032d4 	.word	0x200032d4
 8004ac4:	20003270 	.word	0x20003270

08004ac8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ac8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_small_comm);
 8004aca:	4802      	ldr	r0, [pc, #8]	; (8004ad4 <USART1_IRQHandler+0xc>)
 8004acc:	f7fe ffe4 	bl	8003a98 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ad0:	bd08      	pop	{r3, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20002c04 	.word	0x20002c04

08004ad8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ad8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ada:	4802      	ldr	r0, [pc, #8]	; (8004ae4 <USART2_IRQHandler+0xc>)
 8004adc:	f003 febe 	bl	800885c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ae0:	bd08      	pop	{r3, pc}
 8004ae2:	bf00      	nop
 8004ae4:	200033ec 	.word	0x200033ec

08004ae8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ae8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004aea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004aee:	f001 f979 	bl	8005de4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004af2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004af6:	f001 f975 	bl	8005de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004afa:	bd08      	pop	{r3, pc}

08004afc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004afc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_big_comm);
 8004afe:	4802      	ldr	r0, [pc, #8]	; (8004b08 <DMA2_Stream1_IRQHandler+0xc>)
 8004b00:	f7fe ffe0 	bl	8003ac4 <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004b04:	bd08      	pop	{r3, pc}
 8004b06:	bf00      	nop
 8004b08:	20002b50 	.word	0x20002b50

08004b0c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004b0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_small_comm);
 8004b0e:	4802      	ldr	r0, [pc, #8]	; (8004b18 <DMA2_Stream2_IRQHandler+0xc>)
 8004b10:	f7fe ffd8 	bl	8003ac4 <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004b14:	bd08      	pop	{r3, pc}
 8004b16:	bf00      	nop
 8004b18:	20002c04 	.word	0x20002c04

08004b1c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004b1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_big_comm);
 8004b1e:	4802      	ldr	r0, [pc, #8]	; (8004b28 <USART6_IRQHandler+0xc>)
 8004b20:	f7fe ffba 	bl	8003a98 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004b24:	bd08      	pop	{r3, pc}
 8004b26:	bf00      	nop
 8004b28:	20002b50 	.word	0x20002b50

08004b2c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004b2c:	b508      	push	{r3, lr}
 8004b2e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004b30:	4a0b      	ldr	r2, [pc, #44]	; (8004b60 <_sbrk+0x34>)
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	b142      	cbz	r2, 8004b48 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8004b36:	4a0a      	ldr	r2, [pc, #40]	; (8004b60 <_sbrk+0x34>)
 8004b38:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004b3a:	4403      	add	r3, r0
 8004b3c:	466a      	mov	r2, sp
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d806      	bhi.n	8004b50 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8004b42:	4a07      	ldr	r2, [pc, #28]	; (8004b60 <_sbrk+0x34>)
 8004b44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8004b46:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8004b48:	4a05      	ldr	r2, [pc, #20]	; (8004b60 <_sbrk+0x34>)
 8004b4a:	4906      	ldr	r1, [pc, #24]	; (8004b64 <_sbrk+0x38>)
 8004b4c:	6011      	str	r1, [r2, #0]
 8004b4e:	e7f2      	b.n	8004b36 <_sbrk+0xa>
		errno = ENOMEM;
 8004b50:	f007 f874 	bl	800bc3c <__errno>
 8004b54:	230c      	movs	r3, #12
 8004b56:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b5c:	e7f3      	b.n	8004b46 <_sbrk+0x1a>
 8004b5e:	bf00      	nop
 8004b60:	2000084c 	.word	0x2000084c
 8004b64:	20003510 	.word	0x20003510

08004b68 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b68:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <SystemInit+0x18>)
 8004b6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b6e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b7a:	609a      	str	r2, [r3, #8]
#endif
}
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	e000ed00 	.word	0xe000ed00

08004b84 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8004b84:	b508      	push	{r3, lr}
	vTaskDelay(Time);
 8004b86:	f005 f889 	bl	8009c9c <vTaskDelay>
}
 8004b8a:	bd08      	pop	{r3, pc}

08004b8c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8004b8c:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8004b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b92:	460a      	mov	r2, r1
 8004b94:	4601      	mov	r1, r0
 8004b96:	4802      	ldr	r0, [pc, #8]	; (8004ba0 <nRF24_SendSpi+0x14>)
 8004b98:	6800      	ldr	r0, [r0, #0]
 8004b9a:	f002 fd47 	bl	800762c <HAL_SPI_Transmit>
}
 8004b9e:	bd08      	pop	{r3, pc}
 8004ba0:	2000085c 	.word	0x2000085c

08004ba4 <nRF24_WriteRegister>:

	NRF24_CSN_HIGH;
}

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8004ba4:	b500      	push	{lr}
 8004ba6:	b083      	sub	sp, #12
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8004ba8:	f040 0020 	orr.w	r0, r0, #32
 8004bac:	f88d 0004 	strb.w	r0, [sp, #4]
	tmp[1] = val;
 8004bb0:	f88d 1005 	strb.w	r1, [sp, #5]

	NRF24_CSN_LOW;
 8004bb4:	f7fe fbd0 	bl	8003358 <NRF_ChipSelect>

	nRF24_SendSpi(tmp, 2);
 8004bb8:	2102      	movs	r1, #2
 8004bba:	a801      	add	r0, sp, #4
 8004bbc:	f7ff ffe6 	bl	8004b8c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8004bc0:	f7fe fbdc 	bl	800337c <NRF_ChipDeselect>
}
 8004bc4:	b003      	add	sp, #12
 8004bc6:	f85d fb04 	ldr.w	pc, [sp], #4

08004bca <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8004bca:	b570      	push	{r4, r5, r6, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	460d      	mov	r5, r1
 8004bd0:	4616      	mov	r6, r2
	reg = NRF24_CMD_W_REGISTER | reg;
 8004bd2:	f040 0020 	orr.w	r0, r0, #32
 8004bd6:	ac02      	add	r4, sp, #8
 8004bd8:	f804 0d01 	strb.w	r0, [r4, #-1]!

	NRF24_CSN_LOW;
 8004bdc:	f7fe fbbc 	bl	8003358 <NRF_ChipSelect>

	nRF24_SendSpi(&reg, 1);
 8004be0:	2101      	movs	r1, #1
 8004be2:	4620      	mov	r0, r4
 8004be4:	f7ff ffd2 	bl	8004b8c <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8004be8:	4631      	mov	r1, r6
 8004bea:	4628      	mov	r0, r5
 8004bec:	f7ff ffce 	bl	8004b8c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8004bf0:	f7fe fbc4 	bl	800337c <NRF_ChipDeselect>
}
 8004bf4:	b002      	add	sp, #8
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}

08004bf8 <nRF24_ReadSpi>:
{
 8004bf8:	b508      	push	{r3, lr}
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8004bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bfe:	460a      	mov	r2, r1
 8004c00:	4601      	mov	r1, r0
 8004c02:	4802      	ldr	r0, [pc, #8]	; (8004c0c <nRF24_ReadSpi+0x14>)
 8004c04:	6800      	ldr	r0, [r0, #0]
 8004c06:	f002 fef5 	bl	80079f4 <HAL_SPI_Receive>
}
 8004c0a:	bd08      	pop	{r3, pc}
 8004c0c:	2000085c 	.word	0x2000085c

08004c10 <nRF24_ReadRegister>:
{
 8004c10:	b510      	push	{r4, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	ac04      	add	r4, sp, #16
 8004c16:	f804 0d09 	strb.w	r0, [r4, #-9]!
	NRF24_CSN_LOW;
 8004c1a:	f7fe fb9d 	bl	8003358 <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 8004c1e:	2101      	movs	r1, #1
 8004c20:	4620      	mov	r0, r4
 8004c22:	f7ff ffb3 	bl	8004b8c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8004c26:	2101      	movs	r1, #1
 8004c28:	f10d 000f 	add.w	r0, sp, #15
 8004c2c:	f7ff ffe4 	bl	8004bf8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8004c30:	f7fe fba4 	bl	800337c <NRF_ChipDeselect>
}
 8004c34:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8004c38:	b004      	add	sp, #16
 8004c3a:	bd10      	pop	{r4, pc}

08004c3c <nRF24_ReadRegisters>:
{
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	460d      	mov	r5, r1
 8004c42:	4616      	mov	r6, r2
 8004c44:	ac02      	add	r4, sp, #8
 8004c46:	f804 0d01 	strb.w	r0, [r4, #-1]!
	NRF24_CSN_LOW;
 8004c4a:	f7fe fb85 	bl	8003358 <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 8004c4e:	2101      	movs	r1, #1
 8004c50:	4620      	mov	r0, r4
 8004c52:	f7ff ff9b 	bl	8004b8c <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	f7ff ffcd 	bl	8004bf8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8004c5e:	f7fe fb8d 	bl	800337c <NRF_ChipDeselect>
}
 8004c62:	b002      	add	sp, #8
 8004c64:	bd70      	pop	{r4, r5, r6, pc}

08004c66 <nRF24_ReadConfig>:

	nRF24_Delay_ms(1);
}

uint8_t nRF24_ReadConfig(void)
{
 8004c66:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8004c68:	2000      	movs	r0, #0
 8004c6a:	f7ff ffd1 	bl	8004c10 <nRF24_ReadRegister>
}
 8004c6e:	bd08      	pop	{r3, pc}

08004c70 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8004c70:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8004c72:	4601      	mov	r1, r0
 8004c74:	2000      	movs	r0, #0
 8004c76:	f7ff ff95 	bl	8004ba4 <nRF24_WriteRegister>
}
 8004c7a:	bd08      	pop	{r3, pc}

08004c7c <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8004c7c:	b510      	push	{r4, lr}
 8004c7e:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8004c80:	2006      	movs	r0, #6
 8004c82:	f7ff ffc5 	bl	8004c10 <nRF24_ReadRegister>
	rf_setup &= 0xF8; // Clear PWR bits
 8004c86:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	rf_setup |= (lev<<1);
 8004c8a:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8004c8e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8004c92:	2006      	movs	r0, #6
 8004c94:	f7ff ff86 	bl	8004ba4 <nRF24_WriteRegister>
}
 8004c98:	bd10      	pop	{r4, pc}

08004c9a <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8004c9a:	b510      	push	{r4, lr}
 8004c9c:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8004c9e:	2006      	movs	r0, #6
 8004ca0:	f7ff ffb6 	bl	8004c10 <nRF24_ReadRegister>
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8004ca4:	f000 01d7 	and.w	r1, r0, #215	; 0xd7
	if(dr == NRF24_RF_DR_250KBPS)
 8004ca8:	2c02      	cmp	r4, #2
 8004caa:	d005      	beq.n	8004cb8 <nRF24_SetDataRate+0x1e>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
	else if(dr == NRF24_RF_DR_2MBPS)
 8004cac:	2c01      	cmp	r4, #1
 8004cae:	d006      	beq.n	8004cbe <nRF24_SetDataRate+0x24>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8004cb0:	2006      	movs	r0, #6
 8004cb2:	f7ff ff77 	bl	8004ba4 <nRF24_WriteRegister>
}
 8004cb6:	bd10      	pop	{r4, pc}
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8004cb8:	f041 0120 	orr.w	r1, r1, #32
 8004cbc:	e7f8      	b.n	8004cb0 <nRF24_SetDataRate+0x16>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8004cbe:	f041 0108 	orr.w	r1, r1, #8
 8004cc2:	e7f5      	b.n	8004cb0 <nRF24_SetDataRate+0x16>

08004cc4 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8004cc4:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_STATUS));
 8004cc6:	2007      	movs	r0, #7
 8004cc8:	f7ff ffa2 	bl	8004c10 <nRF24_ReadRegister>
}
 8004ccc:	bd08      	pop	{r3, pc}

08004cce <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8004cce:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_STATUS, st);
 8004cd0:	4601      	mov	r1, r0
 8004cd2:	2007      	movs	r0, #7
 8004cd4:	f7ff ff66 	bl	8004ba4 <nRF24_WriteRegister>
}
 8004cd8:	bd08      	pop	{r3, pc}

08004cda <nRF24_ReadFifoStatus>:
//
// FIFO Status
//

uint8_t nRF24_ReadFifoStatus(void)
{
 8004cda:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 8004cdc:	2017      	movs	r0, #23
 8004cde:	f7ff ff97 	bl	8004c10 <nRF24_ReadRegister>
}
 8004ce2:	bd08      	pop	{r3, pc}

08004ce4 <nRF24_IsBitSetInFifoStatus>:
{
	nRF24_WriteRegister(NRF24_FIFO_STATUS, st);
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	4604      	mov	r4, r0
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8004ce8:	f7ff fff7 	bl	8004cda <nRF24_ReadFifoStatus>

	if(FifoStatus & (1<<Bit))
 8004cec:	4120      	asrs	r0, r4
 8004cee:	f010 0f01 	tst.w	r0, #1
 8004cf2:	d101      	bne.n	8004cf8 <nRF24_IsBitSetInFifoStatus+0x14>
	{
		return 1;
	}

	return 0;
 8004cf4:	2000      	movs	r0, #0
}
 8004cf6:	bd10      	pop	{r4, pc}
		return 1;
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	e7fc      	b.n	8004cf6 <nRF24_IsBitSetInFifoStatus+0x12>

08004cfc <nRF24_IsRxEmpty>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_FULL);
}

uint8_t nRF24_IsRxEmpty(void)
{
 8004cfc:	b508      	push	{r3, lr}
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
 8004cfe:	2000      	movs	r0, #0
 8004d00:	f7ff fff0 	bl	8004ce4 <nRF24_IsBitSetInFifoStatus>
}
 8004d04:	bd08      	pop	{r3, pc}

08004d06 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8004d06:	b510      	push	{r4, lr}
 8004d08:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8004d0a:	ac02      	add	r4, sp, #8
 8004d0c:	23e2      	movs	r3, #226	; 0xe2
 8004d0e:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8004d12:	f7fe fb21 	bl	8003358 <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8004d16:	2101      	movs	r1, #1
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f7ff ff37 	bl	8004b8c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8004d1e:	f7fe fb2d 	bl	800337c <NRF_ChipDeselect>
}
 8004d22:	b002      	add	sp, #8
 8004d24:	bd10      	pop	{r4, pc}

08004d26 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8004d26:	b510      	push	{r4, lr}
 8004d28:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8004d2a:	ac02      	add	r4, sp, #8
 8004d2c:	23e1      	movs	r3, #225	; 0xe1
 8004d2e:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8004d32:	f7fe fb11 	bl	8003358 <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8004d36:	2101      	movs	r1, #1
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f7ff ff27 	bl	8004b8c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8004d3e:	f7fe fb1d 	bl	800337c <NRF_ChipDeselect>
}
 8004d42:	b002      	add	sp, #8
 8004d44:	bd10      	pop	{r4, pc}
	...

08004d48 <nRF24_TX_Mode>:
{
 8004d48:	b508      	push	{r3, lr}
	NRF24_CE_LOW;
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d50:	480a      	ldr	r0, [pc, #40]	; (8004d7c <nRF24_TX_Mode+0x34>)
 8004d52:	f001 f840 	bl	8005dd6 <HAL_GPIO_WritePin>
	uint8_t config = nRF24_ReadConfig();
 8004d56:	f7ff ff86 	bl	8004c66 <nRF24_ReadConfig>
 8004d5a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	nRF24_WriteConfig(config);
 8004d5e:	f040 0002 	orr.w	r0, r0, #2
 8004d62:	f7ff ff85 	bl	8004c70 <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8004d66:	2070      	movs	r0, #112	; 0x70
 8004d68:	f7ff ffb1 	bl	8004cce <nRF24_WriteStatus>
	nRF24_FlushRX();
 8004d6c:	f7ff ffcb 	bl	8004d06 <nRF24_FlushRX>
	nRF24_FlushTX();
 8004d70:	f7ff ffd9 	bl	8004d26 <nRF24_FlushTX>
	nRF24_Delay_ms(1);
 8004d74:	2001      	movs	r0, #1
 8004d76:	f7ff ff05 	bl	8004b84 <nRF24_Delay_ms>
}
 8004d7a:	bd08      	pop	{r3, pc}
 8004d7c:	40020400 	.word	0x40020400

08004d80 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8004d80:	b510      	push	{r4, lr}
 8004d82:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004d84:	f7ff ff6f 	bl	8004c66 <nRF24_ReadConfig>

	if(onoff)
 8004d88:	b924      	cbnz	r4, 8004d94 <nRF24_EnableCRC+0x14>
		config |= (1<<NRF24_EN_CRC);
	else
		config &= ~(1<<NRF24_EN_CRC);
 8004d8a:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
	nRF24_WriteConfig(config);
 8004d8e:	f7ff ff6f 	bl	8004c70 <nRF24_WriteConfig>
}
 8004d92:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_EN_CRC);
 8004d94:	f040 0008 	orr.w	r0, r0, #8
 8004d98:	b2c0      	uxtb	r0, r0
 8004d9a:	e7f8      	b.n	8004d8e <nRF24_EnableCRC+0xe>

08004d9c <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8004d9c:	b510      	push	{r4, lr}
 8004d9e:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004da0:	f7ff ff61 	bl	8004c66 <nRF24_ReadConfig>
	if(crcl == NRF24_CRC_WIDTH_2B)
 8004da4:	2c01      	cmp	r4, #1
 8004da6:	d004      	beq.n	8004db2 <nRF24_SetCRCLength+0x16>
		config |= (1<<NRF24_CRCO);
	else
		config &= ~(1<<NRF24_CRCO);
 8004da8:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
	nRF24_WriteConfig(config);
 8004dac:	f7ff ff60 	bl	8004c70 <nRF24_WriteConfig>
}
 8004db0:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_CRCO);
 8004db2:	f040 0004 	orr.w	r0, r0, #4
 8004db6:	b2c0      	uxtb	r0, r0
 8004db8:	e7f8      	b.n	8004dac <nRF24_SetCRCLength+0x10>

08004dba <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8004dba:	b508      	push	{r3, lr}
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8004dbc:	f001 010f 	and.w	r1, r1, #15
 8004dc0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8004dc4:	b2c9      	uxtb	r1, r1
 8004dc6:	2004      	movs	r0, #4
 8004dc8:	f7ff feec 	bl	8004ba4 <nRF24_WriteRegister>
}
 8004dcc:	bd08      	pop	{r3, pc}

08004dce <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8004dce:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8004dd0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8004dd4:	2005      	movs	r0, #5
 8004dd6:	f7ff fee5 	bl	8004ba4 <nRF24_WriteRegister>
}
 8004dda:	bd08      	pop	{r3, pc}

08004ddc <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4604      	mov	r4, r0
 8004de0:	460d      	mov	r5, r1
	if(pipe > 5)
 8004de2:	2805      	cmp	r0, #5
 8004de4:	d900      	bls.n	8004de8 <nRF24_EnablePipe+0xc>
		pipe = 5; // Block too high pipe number
 8004de6:	2405      	movs	r4, #5
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8004de8:	2002      	movs	r0, #2
 8004dea:	f7ff ff11 	bl	8004c10 <nRF24_ReadRegister>
	if(onoff == 1)
 8004dee:	2d01      	cmp	r5, #1
 8004df0:	d008      	beq.n	8004e04 <nRF24_EnablePipe+0x28>
		enable_pipe |= (1<<pipe);
	else
		enable_pipe &= ~(1<<pipe);
 8004df2:	2101      	movs	r1, #1
 8004df4:	40a1      	lsls	r1, r4
 8004df6:	ea20 0101 	bic.w	r1, r0, r1
 8004dfa:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8004dfc:	2002      	movs	r0, #2
 8004dfe:	f7ff fed1 	bl	8004ba4 <nRF24_WriteRegister>
}
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
		enable_pipe |= (1<<pipe);
 8004e04:	2101      	movs	r1, #1
 8004e06:	40a1      	lsls	r1, r4
 8004e08:	4301      	orrs	r1, r0
 8004e0a:	b2c9      	uxtb	r1, r1
 8004e0c:	e7f6      	b.n	8004dfc <nRF24_EnablePipe+0x20>

08004e0e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8004e0e:	b538      	push	{r3, r4, r5, lr}
 8004e10:	4604      	mov	r4, r0
 8004e12:	460d      	mov	r5, r1
	if(pipe > 5)
 8004e14:	2805      	cmp	r0, #5
 8004e16:	d900      	bls.n	8004e1a <nRF24_AutoACK+0xc>
		pipe = 5; // Block too high pipe number
 8004e18:	2405      	movs	r4, #5
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	f7ff fef8 	bl	8004c10 <nRF24_ReadRegister>
	if(onoff == 1)
 8004e20:	2d01      	cmp	r5, #1
 8004e22:	d008      	beq.n	8004e36 <nRF24_AutoACK+0x28>
		enaa |= (1<<pipe);
	else
		enaa &= ~(1<<pipe);
 8004e24:	2101      	movs	r1, #1
 8004e26:	40a1      	lsls	r1, r4
 8004e28:	ea20 0101 	bic.w	r1, r0, r1
 8004e2c:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8004e2e:	2001      	movs	r0, #1
 8004e30:	f7ff feb8 	bl	8004ba4 <nRF24_WriteRegister>
}
 8004e34:	bd38      	pop	{r3, r4, r5, pc}
		enaa |= (1<<pipe);
 8004e36:	2101      	movs	r1, #1
 8004e38:	40a1      	lsls	r1, r4
 8004e3a:	4301      	orrs	r1, r0
 8004e3c:	b2c9      	uxtb	r1, r1
 8004e3e:	e7f6      	b.n	8004e2e <nRF24_AutoACK+0x20>

08004e40 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8004e40:	b508      	push	{r3, lr}
	if(size > 5)
 8004e42:	2805      	cmp	r0, #5
 8004e44:	d803      	bhi.n	8004e4e <nRF24_SetAddressWidth+0xe>
		size = 5; // Maximum are 5 bytes
	if(size < 3)
 8004e46:	2802      	cmp	r0, #2
 8004e48:	d802      	bhi.n	8004e50 <nRF24_SetAddressWidth+0x10>
		size = 3; // Minimum are 3 bytes
 8004e4a:	2003      	movs	r0, #3
 8004e4c:	e000      	b.n	8004e50 <nRF24_SetAddressWidth+0x10>
		size = 5; // Maximum are 5 bytes
 8004e4e:	2005      	movs	r0, #5
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8004e50:	1e81      	subs	r1, r0, #2
 8004e52:	f001 0103 	and.w	r1, r1, #3
 8004e56:	2003      	movs	r0, #3
 8004e58:	f7ff fea4 	bl	8004ba4 <nRF24_WriteRegister>
}
 8004e5c:	bd08      	pop	{r3, pc}

08004e5e <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8004e5e:	b510      	push	{r4, lr}
 8004e60:	b082      	sub	sp, #8
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8004e62:	2801      	cmp	r0, #1
 8004e64:	d815      	bhi.n	8004e92 <nRF24_SetRXAddress+0x34>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004e66:	2300      	movs	r3, #0
 8004e68:	e009      	b.n	8004e7e <nRF24_SetRXAddress+0x20>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8004e6a:	f1c3 0204 	rsb	r2, r3, #4
 8004e6e:	5ccc      	ldrb	r4, [r1, r3]
 8004e70:	f10d 0c08 	add.w	ip, sp, #8
 8004e74:	4462      	add	r2, ip
 8004e76:	f802 4c08 	strb.w	r4, [r2, #-8]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d9f3      	bls.n	8004e6a <nRF24_SetRXAddress+0xc>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8004e82:	300a      	adds	r0, #10
 8004e84:	2205      	movs	r2, #5
 8004e86:	4669      	mov	r1, sp
 8004e88:	b2c0      	uxtb	r0, r0
 8004e8a:	f7ff fe9e 	bl	8004bca <nRF24_WriteRegisters>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
}
 8004e8e:	b002      	add	sp, #8
 8004e90:	bd10      	pop	{r4, pc}
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8004e92:	300a      	adds	r0, #10
 8004e94:	7909      	ldrb	r1, [r1, #4]
 8004e96:	b2c0      	uxtb	r0, r0
 8004e98:	f7ff fe84 	bl	8004ba4 <nRF24_WriteRegister>
}
 8004e9c:	e7f7      	b.n	8004e8e <nRF24_SetRXAddress+0x30>
	...

08004ea0 <nRF24_RX_Mode>:
{
 8004ea0:	b510      	push	{r4, lr}
	uint8_t config = nRF24_ReadConfig();
 8004ea2:	f7ff fee0 	bl	8004c66 <nRF24_ReadConfig>
 8004ea6:	4604      	mov	r4, r0
	nRF24_SetRXAddress(0, addr_p0_backup);
 8004ea8:	490c      	ldr	r1, [pc, #48]	; (8004edc <nRF24_RX_Mode+0x3c>)
 8004eaa:	2000      	movs	r0, #0
 8004eac:	f7ff ffd7 	bl	8004e5e <nRF24_SetRXAddress>
	config |= (1<<NRF24_PRIM_RX);
 8004eb0:	f044 0003 	orr.w	r0, r4, #3
	nRF24_WriteConfig(config);
 8004eb4:	b2c0      	uxtb	r0, r0
 8004eb6:	f7ff fedb 	bl	8004c70 <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8004eba:	2070      	movs	r0, #112	; 0x70
 8004ebc:	f7ff ff07 	bl	8004cce <nRF24_WriteStatus>
	nRF24_FlushRX();
 8004ec0:	f7ff ff21 	bl	8004d06 <nRF24_FlushRX>
	nRF24_FlushTX();
 8004ec4:	f7ff ff2f 	bl	8004d26 <nRF24_FlushTX>
	NRF24_CE_HIGH;
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ece:	4804      	ldr	r0, [pc, #16]	; (8004ee0 <nRF24_RX_Mode+0x40>)
 8004ed0:	f000 ff81 	bl	8005dd6 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8004ed4:	2001      	movs	r0, #1
 8004ed6:	f7ff fe55 	bl	8004b84 <nRF24_Delay_ms>
}
 8004eda:	bd10      	pop	{r4, pc}
 8004edc:	20000854 	.word	0x20000854
 8004ee0:	40020400 	.word	0x40020400

08004ee4 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8004ee4:	b510      	push	{r4, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	4604      	mov	r4, r0
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8004eea:	2205      	movs	r2, #5
 8004eec:	4669      	mov	r1, sp
 8004eee:	200a      	movs	r0, #10
 8004ef0:	f7ff fea4 	bl	8004c3c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e009      	b.n	8004f0c <nRF24_SetTXAddress+0x28>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8004ef8:	f1c3 0204 	rsb	r2, r3, #4
 8004efc:	a902      	add	r1, sp, #8
 8004efe:	4419      	add	r1, r3
 8004f00:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8004f04:	490f      	ldr	r1, [pc, #60]	; (8004f44 <nRF24_SetTXAddress+0x60>)
 8004f06:	5488      	strb	r0, [r1, r2]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004f08:	3301      	adds	r3, #1
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d9f3      	bls.n	8004ef8 <nRF24_SetTXAddress+0x14>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004f10:	2300      	movs	r3, #0
 8004f12:	e008      	b.n	8004f26 <nRF24_SetTXAddress+0x42>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8004f14:	f1c3 0204 	rsb	r2, r3, #4
 8004f18:	5ce1      	ldrb	r1, [r4, r3]
 8004f1a:	a802      	add	r0, sp, #8
 8004f1c:	4402      	add	r2, r0
 8004f1e:	f802 1c08 	strb.w	r1, [r2, #-8]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004f22:	3301      	adds	r3, #1
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d9f4      	bls.n	8004f14 <nRF24_SetTXAddress+0x30>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8004f2a:	2205      	movs	r2, #5
 8004f2c:	4669      	mov	r1, sp
 8004f2e:	200a      	movs	r0, #10
 8004f30:	f7ff fe4b 	bl	8004bca <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8004f34:	2205      	movs	r2, #5
 8004f36:	4669      	mov	r1, sp
 8004f38:	2010      	movs	r0, #16
 8004f3a:	f7ff fe46 	bl	8004bca <nRF24_WriteRegisters>
}
 8004f3e:	b002      	add	sp, #8
 8004f40:	bd10      	pop	{r4, pc}
 8004f42:	bf00      	nop
 8004f44:	20000854 	.word	0x20000854

08004f48 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8004f48:	b508      	push	{r3, lr}
	uint8_t status = nRF24_ReadStatus();
 8004f4a:	f7ff febb 	bl	8004cc4 <nRF24_ReadStatus>
	status |= (7<<4); // Clear bits 4, 5, 6.
 8004f4e:	f040 0070 	orr.w	r0, r0, #112	; 0x70
	nRF24_WriteStatus(status);
 8004f52:	b2c0      	uxtb	r0, r0
 8004f54:	f7ff febb 	bl	8004cce <nRF24_WriteStatus>
}
 8004f58:	bd08      	pop	{r3, pc}

08004f5a <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8004f5a:	b508      	push	{r3, lr}
    uint8_t result = 0;

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8004f5c:	2060      	movs	r0, #96	; 0x60
 8004f5e:	f7ff fe57 	bl	8004c10 <nRF24_ReadRegister>

    if (result > 32) // Something went wrong :)
 8004f62:	2820      	cmp	r0, #32
 8004f64:	d800      	bhi.n	8004f68 <nRF24_GetDynamicPayloadSize+0xe>
        nRF24_FlushRX();
        nRF24_Delay_ms(2);
        return 0;
    }
    return result;
}
 8004f66:	bd08      	pop	{r3, pc}
        nRF24_FlushRX();
 8004f68:	f7ff fecd 	bl	8004d06 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8004f6c:	2002      	movs	r0, #2
 8004f6e:	f7ff fe09 	bl	8004b84 <nRF24_Delay_ms>
        return 0;
 8004f72:	2000      	movs	r0, #0
 8004f74:	e7f7      	b.n	8004f66 <nRF24_GetDynamicPayloadSize+0xc>

08004f76 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8004f76:	b510      	push	{r4, lr}
 8004f78:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004f7a:	f7ff fe74 	bl	8004c66 <nRF24_ReadConfig>

	if(!onoff)
 8004f7e:	b124      	cbz	r4, 8004f8a <nRF24_EnableRXDataReadyIRQ+0x14>
		config |= (1<<NRF24_RX_DR);
	else
		config &= ~(1<<NRF24_RX_DR);
 8004f80:	f000 00bf 	and.w	r0, r0, #191	; 0xbf

	nRF24_WriteConfig(config);
 8004f84:	f7ff fe74 	bl	8004c70 <nRF24_WriteConfig>
}
 8004f88:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_RX_DR);
 8004f8a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004f8e:	b2c0      	uxtb	r0, r0
 8004f90:	e7f8      	b.n	8004f84 <nRF24_EnableRXDataReadyIRQ+0xe>

08004f92 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8004f92:	b510      	push	{r4, lr}
 8004f94:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004f96:	f7ff fe66 	bl	8004c66 <nRF24_ReadConfig>

	if(!onoff)
 8004f9a:	b124      	cbz	r4, 8004fa6 <nRF24_EnableTXDataSentIRQ+0x14>
		config |= (1<<NRF24_TX_DS);
	else
		config &= ~(1<<NRF24_TX_DS);
 8004f9c:	f000 00df 	and.w	r0, r0, #223	; 0xdf

	nRF24_WriteConfig(config);
 8004fa0:	f7ff fe66 	bl	8004c70 <nRF24_WriteConfig>
}
 8004fa4:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_TX_DS);
 8004fa6:	f040 0020 	orr.w	r0, r0, #32
 8004faa:	b2c0      	uxtb	r0, r0
 8004fac:	e7f8      	b.n	8004fa0 <nRF24_EnableTXDataSentIRQ+0xe>

08004fae <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8004fae:	b510      	push	{r4, lr}
 8004fb0:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004fb2:	f7ff fe58 	bl	8004c66 <nRF24_ReadConfig>

	if(!onoff)
 8004fb6:	b124      	cbz	r4, 8004fc2 <nRF24_EnableMaxRetransmitIRQ+0x14>
		config |= (1<<NRF24_MAX_RT);
	else
		config &= ~(1<<NRF24_MAX_RT);
 8004fb8:	f000 00ef 	and.w	r0, r0, #239	; 0xef

	nRF24_WriteConfig(config);
 8004fbc:	f7ff fe58 	bl	8004c70 <nRF24_WriteConfig>
}
 8004fc0:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_MAX_RT);
 8004fc2:	f040 0010 	orr.w	r0, r0, #16
 8004fc6:	b2c0      	uxtb	r0, r0
 8004fc8:	e7f8      	b.n	8004fbc <nRF24_EnableMaxRetransmitIRQ+0xe>

08004fca <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8004fca:	b508      	push	{r3, lr}
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8004fcc:	460a      	mov	r2, r1
 8004fce:	4601      	mov	r1, r0
 8004fd0:	20a0      	movs	r0, #160	; 0xa0
 8004fd2:	f7ff fdfa 	bl	8004bca <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 8004fd6:	bd08      	pop	{r3, pc}

08004fd8 <nRF24_ReadRXPaylaod>:
		status = nRF24_ReadStatus();
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4604      	mov	r4, r0
 8004fdc:	460d      	mov	r5, r1
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8004fde:	f7ff ffbc 	bl	8004f5a <nRF24_GetDynamicPayloadSize>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	7028      	strb	r0, [r5, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	2061      	movs	r0, #97	; 0x61
 8004fea:	f7ff fe27 	bl	8004c3c <nRF24_ReadRegisters>
#else
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 8004fee:	2101      	movs	r1, #1
 8004ff0:	2007      	movs	r0, #7
 8004ff2:	f7ff fdd7 	bl	8004ba4 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 8004ff6:	f7ff fe65 	bl	8004cc4 <nRF24_ReadStatus>
 8004ffa:	f010 0f20 	tst.w	r0, #32
 8004ffe:	d100      	bne.n	8005002 <nRF24_ReadRXPaylaod+0x2a>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8005000:	bd38      	pop	{r3, r4, r5, pc}
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8005002:	2120      	movs	r1, #32
 8005004:	2007      	movs	r0, #7
 8005006:	f7ff fdcd 	bl	8004ba4 <nRF24_WriteRegister>
}
 800500a:	e7f9      	b.n	8005000 <nRF24_ReadRXPaylaod+0x28>

0800500c <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
	if(Size > 32)
 800500c:	2920      	cmp	r1, #32
 800500e:	d901      	bls.n	8005014 <nRF24_SendPacket+0x8>
		return NRF24_NO_TRANSMITTED_PACKET;
 8005010:	2001      	movs	r0, #1
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_WaitTX();
#endif

	return NRF24_TRANSMITTED_PACKET;
}
 8005012:	4770      	bx	lr
{
 8005014:	b508      	push	{r3, lr}
	nRF24_WriteTXPayload(Data, Size);
 8005016:	f7ff ffd8 	bl	8004fca <nRF24_WriteTXPayload>
	return NRF24_TRANSMITTED_PACKET;
 800501a:	2000      	movs	r0, #0
}
 800501c:	bd08      	pop	{r3, pc}
	...

08005020 <nRF24_IsSomtehingToSend>:
{
	return RB_ElementsAvailable(&RXBuffer)?1:0;
}

uint8_t nRF24_IsSomtehingToSend(void)
{
 8005020:	b508      	push	{r3, lr}
	return RB_ElementsAvailable(&TXBuffer)?1:0;
 8005022:	4803      	ldr	r0, [pc, #12]	; (8005030 <nRF24_IsSomtehingToSend+0x10>)
 8005024:	f7fd fb1b 	bl	800265e <RB_ElementsAvailable>
}
 8005028:	3000      	adds	r0, #0
 800502a:	bf18      	it	ne
 800502c:	2001      	movne	r0, #1
 800502e:	bd08      	pop	{r3, pc}
 8005030:	2000347c 	.word	0x2000347c

08005034 <nRF24_ReceivePacket>:
	return nRF24_IsSomtehingToRead();
#endif
}

nRF24_RX_Status nRF24_ReceivePacket(uint8_t* Data, uint8_t *Size)
{
 8005034:	b508      	push	{r3, lr}
#if (NRF24_USE_INTERRUPT == 0)
	if(nRF24_RXAvailable())
	{
#endif
		nRF24_ReadRXPaylaod(Data, Size);
 8005036:	f7ff ffcf 	bl	8004fd8 <nRF24_ReadRXPaylaod>
#if (NRF24_USE_INTERRUPT == 0)
	}
	return NRF24_NO_RECEIVED_PACKET;
#endif

}
 800503a:	2000      	movs	r0, #0
 800503c:	bd08      	pop	{r3, pc}
	...

08005040 <nRF24_CheckTXAndSend>:
	return NRF24_TRANSMITTED_PACKET;
#endif
}
#if (NRF24_USE_RINGBUFFER == 1)
void nRF24_CheckTXAndSend(void)
{
 8005040:	b530      	push	{r4, r5, lr}
 8005042:	b089      	sub	sp, #36	; 0x24
	uint8_t i, DataCounter;
	uint8_t TXPacket[32];

	if(nRF24_IsSomtehingToSend() && Nrf24TXFreeFlag)
 8005044:	f7ff ffec 	bl	8005020 <nRF24_IsSomtehingToSend>
 8005048:	b110      	cbz	r0, 8005050 <nRF24_CheckTXAndSend+0x10>
 800504a:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <nRF24_CheckTXAndSend+0x70>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	b91b      	cbnz	r3, 8005058 <nRF24_CheckTXAndSend+0x18>
		nRF24_SendPacket(TXPacket, DataCounter);
		NRF24_CE_HIGH;
		nRF24_Delay_ms(1);
		NRF24_CE_LOW;
	}else{
		nRF24_RX_Mode();
 8005050:	f7ff ff26 	bl	8004ea0 <nRF24_RX_Mode>
	}
}
 8005054:	b009      	add	sp, #36	; 0x24
 8005056:	bd30      	pop	{r4, r5, pc}
		nRF24_TX_Mode();
 8005058:	f7ff fe76 	bl	8004d48 <nRF24_TX_Mode>
		Nrf24TXFreeFlag = 0;
 800505c:	4b14      	ldr	r3, [pc, #80]	; (80050b0 <nRF24_CheckTXAndSend+0x70>)
 800505e:	2200      	movs	r2, #0
 8005060:	701a      	strb	r2, [r3, #0]
		DataCounter = RB_ElementsAvailable(&TXBuffer);
 8005062:	4814      	ldr	r0, [pc, #80]	; (80050b4 <nRF24_CheckTXAndSend+0x74>)
 8005064:	f7fd fafb 	bl	800265e <RB_ElementsAvailable>
 8005068:	4605      	mov	r5, r0
		if(DataCounter > 32)
 800506a:	2820      	cmp	r0, #32
 800506c:	d900      	bls.n	8005070 <nRF24_CheckTXAndSend+0x30>
			DataCounter = 32; // Max Payload
 800506e:	2520      	movs	r5, #32
		for(i = 0; i < DataCounter; i++)
 8005070:	2400      	movs	r4, #0
 8005072:	e006      	b.n	8005082 <nRF24_CheckTXAndSend+0x42>
			RB_ReadFromBuffer(&TXBuffer, &TXPacket[i]);
 8005074:	eb0d 0104 	add.w	r1, sp, r4
 8005078:	480e      	ldr	r0, [pc, #56]	; (80050b4 <nRF24_CheckTXAndSend+0x74>)
 800507a:	f7fd fad9 	bl	8002630 <RB_ReadFromBuffer>
		for(i = 0; i < DataCounter; i++)
 800507e:	3401      	adds	r4, #1
 8005080:	b2e4      	uxtb	r4, r4
 8005082:	42ac      	cmp	r4, r5
 8005084:	d3f6      	bcc.n	8005074 <nRF24_CheckTXAndSend+0x34>
		nRF24_SendPacket(TXPacket, DataCounter);
 8005086:	4629      	mov	r1, r5
 8005088:	4668      	mov	r0, sp
 800508a:	f7ff ffbf 	bl	800500c <nRF24_SendPacket>
		NRF24_CE_HIGH;
 800508e:	4c0a      	ldr	r4, [pc, #40]	; (80050b8 <nRF24_CheckTXAndSend+0x78>)
 8005090:	2201      	movs	r2, #1
 8005092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005096:	4620      	mov	r0, r4
 8005098:	f000 fe9d 	bl	8005dd6 <HAL_GPIO_WritePin>
		nRF24_Delay_ms(1);
 800509c:	2001      	movs	r0, #1
 800509e:	f7ff fd71 	bl	8004b84 <nRF24_Delay_ms>
		NRF24_CE_LOW;
 80050a2:	2200      	movs	r2, #0
 80050a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050a8:	4620      	mov	r0, r4
 80050aa:	f000 fe94 	bl	8005dd6 <HAL_GPIO_WritePin>
 80050ae:	e7d1      	b.n	8005054 <nRF24_CheckTXAndSend+0x14>
 80050b0:	20000851 	.word	0x20000851
 80050b4:	2000347c 	.word	0x2000347c
 80050b8:	40020400 	.word	0x40020400

080050bc <nRF24_ReceiveData>:
#endif
#if (NRF24_USE_INTERRUPT == 1)
void nRF24_ReceiveData(void)
{
 80050bc:	b510      	push	{r4, lr}
 80050be:	b08a      	sub	sp, #40	; 0x28
 80050c0:	e00f      	b.n	80050e2 <nRF24_ReceiveData+0x26>
	{
		nRF24_ReceivePacket(RXPacket, &DataCounter);

		for(i = 0; i < DataCounter; i++)
		{
			RB_WriteToBuffer(&RXBuffer, RXPacket[i]);
 80050c2:	ab0a      	add	r3, sp, #40	; 0x28
 80050c4:	4423      	add	r3, r4
 80050c6:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 80050ca:	480a      	ldr	r0, [pc, #40]	; (80050f4 <nRF24_ReceiveData+0x38>)
 80050cc:	f7fd fa93 	bl	80025f6 <RB_WriteToBuffer>
		for(i = 0; i < DataCounter; i++)
 80050d0:	3401      	adds	r4, #1
 80050d2:	b2e4      	uxtb	r4, r4
 80050d4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80050d8:	42a3      	cmp	r3, r4
 80050da:	d8f2      	bhi.n	80050c2 <nRF24_ReceiveData+0x6>
		}

	}while(!nRF24_IsRxEmpty());
 80050dc:	f7ff fe0e 	bl	8004cfc <nRF24_IsRxEmpty>
 80050e0:	b930      	cbnz	r0, 80050f0 <nRF24_ReceiveData+0x34>
		nRF24_ReceivePacket(RXPacket, &DataCounter);
 80050e2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80050e6:	a801      	add	r0, sp, #4
 80050e8:	f7ff ffa4 	bl	8005034 <nRF24_ReceivePacket>
		for(i = 0; i < DataCounter; i++)
 80050ec:	2400      	movs	r4, #0
 80050ee:	e7f1      	b.n	80050d4 <nRF24_ReceiveData+0x18>
#endif
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_ReceivePacket(RXBuffer, &RXDataCounter);
#endif
}
 80050f0:	b00a      	add	sp, #40	; 0x28
 80050f2:	bd10      	pop	{r4, pc}
 80050f4:	200034a0 	.word	0x200034a0

080050f8 <nRF24_IRQ_Read>:
{
	Nrf24InterruptFlag = 1;
}

void nRF24_IRQ_Read(void)
{
 80050f8:	b508      	push	{r3, lr}
	if(Nrf24InterruptFlag == 1)
 80050fa:	4b14      	ldr	r3, [pc, #80]	; (800514c <nRF24_IRQ_Read+0x54>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b01      	cmp	r3, #1
 8005102:	d000      	beq.n	8005106 <nRF24_IRQ_Read+0xe>
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
		}

		nRF24_WriteStatus(ClearIrq);
	}
}
 8005104:	bd08      	pop	{r3, pc}
		Nrf24InterruptFlag = 0;
 8005106:	4b11      	ldr	r3, [pc, #68]	; (800514c <nRF24_IRQ_Read+0x54>)
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]
		uint8_t status = nRF24_ReadStatus();
 800510c:	f7ff fdda 	bl	8004cc4 <nRF24_ReadStatus>
 8005110:	4603      	mov	r3, r0
		if ((status & (1 << NRF24_RX_DR)))
 8005112:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005116:	d016      	beq.n	8005146 <nRF24_IRQ_Read+0x4e>
			nrf24_rx_flag = 1;
 8005118:	4a0d      	ldr	r2, [pc, #52]	; (8005150 <nRF24_IRQ_Read+0x58>)
 800511a:	2101      	movs	r1, #1
 800511c:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 800511e:	2040      	movs	r0, #64	; 0x40
		if ((status & (1 << NRF24_TX_DS)))
 8005120:	f013 0f20 	tst.w	r3, #32
 8005124:	d004      	beq.n	8005130 <nRF24_IRQ_Read+0x38>
			nrf24_tx_flag = 1;
 8005126:	4a0b      	ldr	r2, [pc, #44]	; (8005154 <nRF24_IRQ_Read+0x5c>)
 8005128:	2101      	movs	r1, #1
 800512a:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 800512c:	f040 0020 	orr.w	r0, r0, #32
		if ((status & (1 << NRF24_MAX_RT)))
 8005130:	f013 0f10 	tst.w	r3, #16
 8005134:	d004      	beq.n	8005140 <nRF24_IRQ_Read+0x48>
			nrf24_mr_flag = 1;
 8005136:	4b08      	ldr	r3, [pc, #32]	; (8005158 <nRF24_IRQ_Read+0x60>)
 8005138:	2201      	movs	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 800513c:	f040 0010 	orr.w	r0, r0, #16
		nRF24_WriteStatus(ClearIrq);
 8005140:	f7ff fdc5 	bl	8004cce <nRF24_WriteStatus>
}
 8005144:	e7de      	b.n	8005104 <nRF24_IRQ_Read+0xc>
		uint8_t ClearIrq = 0;
 8005146:	2000      	movs	r0, #0
 8005148:	e7ea      	b.n	8005120 <nRF24_IRQ_Read+0x28>
 800514a:	bf00      	nop
 800514c:	20000850 	.word	0x20000850
 8005150:	20000861 	.word	0x20000861
 8005154:	20000862 	.word	0x20000862
 8005158:	20000860 	.word	0x20000860

0800515c <nRF24_EventRxCallback>:
//

__weak void nRF24_EventRxCallback(void)
{

}
 800515c:	4770      	bx	lr

0800515e <nRF24_EventTxCallback>:

__weak void nRF24_EventTxCallback(void)
{

}
 800515e:	4770      	bx	lr

08005160 <nRF24_EventMrCallback>:

__weak void nRF24_EventMrCallback(void)
{

}
 8005160:	4770      	bx	lr
	...

08005164 <nRF24_Event>:

void nRF24_Event(void)
{
 8005164:	b508      	push	{r3, lr}
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8005166:	f7ff ffc7 	bl	80050f8 <nRF24_IRQ_Read>

#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_CheckTXAndSend();
 800516a:	f7ff ff69 	bl	8005040 <nRF24_CheckTXAndSend>
#endif

	if(nrf24_rx_flag)
 800516e:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <nRF24_Event+0x4c>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	b933      	cbnz	r3, 8005182 <nRF24_Event+0x1e>
#endif
		nRF24_EventRxCallback();
		nrf24_rx_flag = 0;
	}

	if(nrf24_tx_flag)
 8005174:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <nRF24_Event+0x50>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	b95b      	cbnz	r3, 8005192 <nRF24_Event+0x2e>
#endif
		nRF24_EventTxCallback();
		nrf24_tx_flag = 0;
	}

	if(nrf24_mr_flag)
 800517a:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <nRF24_Event+0x54>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	b98b      	cbnz	r3, 80051a4 <nRF24_Event+0x40>
	{
		nRF24_EventMrCallback();
		nrf24_mr_flag = 0;
	}
}
 8005180:	bd08      	pop	{r3, pc}
		nRF24_ReceiveData();
 8005182:	f7ff ff9b 	bl	80050bc <nRF24_ReceiveData>
		nRF24_EventRxCallback();
 8005186:	f7ff ffe9 	bl	800515c <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <nRF24_Event+0x4c>)
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
 8005190:	e7f0      	b.n	8005174 <nRF24_Event+0x10>
		Nrf24TXFreeFlag = 1;
 8005192:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <nRF24_Event+0x58>)
 8005194:	2201      	movs	r2, #1
 8005196:	701a      	strb	r2, [r3, #0]
		nRF24_EventTxCallback();
 8005198:	f7ff ffe1 	bl	800515e <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <nRF24_Event+0x50>)
 800519e:	2200      	movs	r2, #0
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e7ea      	b.n	800517a <nRF24_Event+0x16>
		nRF24_EventMrCallback();
 80051a4:	f7ff ffdc 	bl	8005160 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 80051a8:	4b03      	ldr	r3, [pc, #12]	; (80051b8 <nRF24_Event+0x54>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	701a      	strb	r2, [r3, #0]
}
 80051ae:	e7e7      	b.n	8005180 <nRF24_Event+0x1c>
 80051b0:	20000861 	.word	0x20000861
 80051b4:	20000862 	.word	0x20000862
 80051b8:	20000860 	.word	0x20000860
 80051bc:	20000851 	.word	0x20000851

080051c0 <nRF24_Init>:
#endif

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80051c0:	b508      	push	{r3, lr}
	hspi_nrf = hspi;
 80051c2:	4b31      	ldr	r3, [pc, #196]	; (8005288 <nRF24_Init+0xc8>)
 80051c4:	6018      	str	r0, [r3, #0]

	NRF24_CE_LOW;
 80051c6:	2200      	movs	r2, #0
 80051c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051cc:	482f      	ldr	r0, [pc, #188]	; (800528c <nRF24_Init+0xcc>)
 80051ce:	f000 fe02 	bl	8005dd6 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80051d2:	f7fe f8d3 	bl	800337c <NRF_ChipDeselect>

	nRF24_Delay_ms(5); // Wait for radio power up
 80051d6:	2005      	movs	r0, #5
 80051d8:	f7ff fcd4 	bl	8004b84 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80051dc:	2003      	movs	r0, #3
 80051de:	f7ff fd4d 	bl	8004c7c <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 80051e2:	2002      	movs	r0, #2
 80051e4:	f7ff fd59 	bl	8004c9a <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80051e8:	2001      	movs	r0, #1
 80051ea:	f7ff fdc9 	bl	8004d80 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_2B); // CRC Length 1 byte
 80051ee:	2001      	movs	r0, #1
 80051f0:	f7ff fdd4 	bl	8004d9c <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 80051f4:	2107      	movs	r1, #7
 80051f6:	2004      	movs	r0, #4
 80051f8:	f7ff fddf 	bl	8004dba <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 80051fc:	201d      	movs	r0, #29
 80051fe:	f7ff fd07 	bl	8004c10 <nRF24_ReadRegister>
 8005202:	f040 0104 	orr.w	r1, r0, #4
 8005206:	b2c9      	uxtb	r1, r1
 8005208:	201d      	movs	r0, #29
 800520a:	f7ff fccb 	bl	8004ba4 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 800520e:	213f      	movs	r1, #63	; 0x3f
 8005210:	201c      	movs	r0, #28
 8005212:	f7ff fcc7 	bl	8004ba4 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(110); // Set RF channel for transmission
 8005216:	206e      	movs	r0, #110	; 0x6e
 8005218:	f7ff fdd9 	bl	8004dce <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 800521c:	2101      	movs	r1, #1
 800521e:	2000      	movs	r0, #0
 8005220:	f7ff fddc 	bl	8004ddc <nRF24_EnablePipe>
	nRF24_EnablePipe(1, 1); // Enable pipe 1
 8005224:	2101      	movs	r1, #1
 8005226:	4608      	mov	r0, r1
 8005228:	f7ff fdd8 	bl	8004ddc <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800522c:	2101      	movs	r1, #1
 800522e:	2000      	movs	r0, #0
 8005230:	f7ff fded 	bl	8004e0e <nRF24_AutoACK>
	nRF24_AutoACK(1, 1); // Enable auto ACK for pipe 1
 8005234:	2101      	movs	r1, #1
 8005236:	4608      	mov	r0, r1
 8005238:	f7ff fde9 	bl	8004e0e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 800523c:	2005      	movs	r0, #5
 800523e:	f7ff fdff 	bl	8004e40 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 8005242:	2001      	movs	r0, #1
 8005244:	f7ff fc9e 	bl	8004b84 <nRF24_Delay_ms>

#if (NRF24_USE_INTERRUPT == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8005248:	2001      	movs	r0, #1
 800524a:	f7ff fe94 	bl	8004f76 <nRF24_EnableRXDataReadyIRQ>
#endif
#if (NRF24_USE_INTERRUPT == 0)
	nRF24_EnableRXDataReadyIRQ(0);
#endif
	nRF24_EnableTXDataSentIRQ(0);
 800524e:	2000      	movs	r0, #0
 8005250:	f7ff fe9f 	bl	8004f92 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8005254:	2000      	movs	r0, #0
 8005256:	f7ff feaa 	bl	8004fae <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 800525a:	2001      	movs	r0, #1
 800525c:	f7ff fc92 	bl	8004b84 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8005260:	f7ff fe72 	bl	8004f48 <nRF24_ClearInterrupts>
#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8005264:	2001      	movs	r0, #1
 8005266:	f7ff fe86 	bl	8004f76 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 800526a:	2001      	movs	r0, #1
 800526c:	f7ff fe91 	bl	8004f92 <nRF24_EnableTXDataSentIRQ>
	Nrf24TXFreeFlag = 1;
 8005270:	4b07      	ldr	r3, [pc, #28]	; (8005290 <nRF24_Init+0xd0>)
 8005272:	2201      	movs	r2, #1
 8005274:	701a      	strb	r2, [r3, #0]
	RB_CreateBuffer(&TXBuffer, NRF24_TX_BUFFER_SIZE);
 8005276:	2120      	movs	r1, #32
 8005278:	4806      	ldr	r0, [pc, #24]	; (8005294 <nRF24_Init+0xd4>)
 800527a:	f7fd f9b1 	bl	80025e0 <RB_CreateBuffer>
	RB_CreateBuffer(&RXBuffer, NRF24_RX_BUFFER_SIZE);
 800527e:	2120      	movs	r1, #32
 8005280:	4805      	ldr	r0, [pc, #20]	; (8005298 <nRF24_Init+0xd8>)
 8005282:	f7fd f9ad 	bl	80025e0 <RB_CreateBuffer>
#endif
}
 8005286:	bd08      	pop	{r3, pc}
 8005288:	2000085c 	.word	0x2000085c
 800528c:	40020400 	.word	0x40020400
 8005290:	20000851 	.word	0x20000851
 8005294:	2000347c 	.word	0x2000347c
 8005298:	200034a0 	.word	0x200034a0

0800529c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800529c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80052a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80052a2:	e003      	b.n	80052ac <LoopCopyDataInit>

080052a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80052a4:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80052a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80052a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80052aa:	3104      	adds	r1, #4

080052ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80052ac:	480b      	ldr	r0, [pc, #44]	; (80052dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80052b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80052b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80052b4:	d3f6      	bcc.n	80052a4 <CopyDataInit>
  ldr  r2, =_sbss
 80052b6:	4a0b      	ldr	r2, [pc, #44]	; (80052e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80052b8:	e002      	b.n	80052c0 <LoopFillZerobss>

080052ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80052ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80052bc:	f842 3b04 	str.w	r3, [r2], #4

080052c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80052c0:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80052c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80052c4:	d3f9      	bcc.n	80052ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80052c6:	f7ff fc4f 	bl	8004b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052ca:	f006 fcbd 	bl	800bc48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052ce:	f7ff f821 	bl	8004314 <main>
  bx  lr    
 80052d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80052d4:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80052d8:	0800d0d0 	.word	0x0800d0d0
  ldr  r0, =_sdata
 80052dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80052e0:	200000d0 	.word	0x200000d0
  ldr  r2, =_sbss
 80052e4:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 80052e8:	2000350c 	.word	0x2000350c

080052ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052ec:	e7fe      	b.n	80052ec <ADC_IRQHandler>
	...

080052f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052f0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80052f2:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_Init+0x30>)
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052fa:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005302:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800530a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800530c:	2003      	movs	r0, #3
 800530e:	f000 f9a9 	bl	8005664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005312:	2000      	movs	r0, #0
 8005314:	f7ff fb6e 	bl	80049f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005318:	f7ff f8b6 	bl	8004488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800531c:	2000      	movs	r0, #0
 800531e:	bd08      	pop	{r3, pc}
 8005320:	40023c00 	.word	0x40023c00

08005324 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005324:	4a03      	ldr	r2, [pc, #12]	; (8005334 <HAL_IncTick+0x10>)
 8005326:	6811      	ldr	r1, [r2, #0]
 8005328:	4b03      	ldr	r3, [pc, #12]	; (8005338 <HAL_IncTick+0x14>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	440b      	add	r3, r1
 800532e:	6013      	str	r3, [r2, #0]
}
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	200034c4 	.word	0x200034c4
 8005338:	20000054 	.word	0x20000054

0800533c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800533c:	4b01      	ldr	r3, [pc, #4]	; (8005344 <HAL_GetTick+0x8>)
 800533e:	6818      	ldr	r0, [r3, #0]
}
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	200034c4 	.word	0x200034c4

08005348 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005348:	4b4a      	ldr	r3, [pc, #296]	; (8005474 <ADC_Init+0x12c>)
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005350:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	6841      	ldr	r1, [r0, #4]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800535a:	6802      	ldr	r2, [r0, #0]
 800535c:	6853      	ldr	r3, [r2, #4]
 800535e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005362:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005364:	6802      	ldr	r2, [r0, #0]
 8005366:	6853      	ldr	r3, [r2, #4]
 8005368:	6901      	ldr	r1, [r0, #16]
 800536a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800536e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005370:	6802      	ldr	r2, [r0, #0]
 8005372:	6853      	ldr	r3, [r2, #4]
 8005374:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005378:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800537a:	6802      	ldr	r2, [r0, #0]
 800537c:	6853      	ldr	r3, [r2, #4]
 800537e:	6881      	ldr	r1, [r0, #8]
 8005380:	430b      	orrs	r3, r1
 8005382:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005384:	6802      	ldr	r2, [r0, #0]
 8005386:	6893      	ldr	r3, [r2, #8]
 8005388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800538c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800538e:	6802      	ldr	r2, [r0, #0]
 8005390:	6893      	ldr	r3, [r2, #8]
 8005392:	68c1      	ldr	r1, [r0, #12]
 8005394:	430b      	orrs	r3, r1
 8005396:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005398:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800539a:	4b37      	ldr	r3, [pc, #220]	; (8005478 <ADC_Init+0x130>)
 800539c:	429a      	cmp	r2, r3
 800539e:	d04b      	beq.n	8005438 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053a0:	6802      	ldr	r2, [r0, #0]
 80053a2:	6893      	ldr	r3, [r2, #8]
 80053a4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80053a8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80053aa:	6802      	ldr	r2, [r0, #0]
 80053ac:	6893      	ldr	r3, [r2, #8]
 80053ae:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053b4:	6802      	ldr	r2, [r0, #0]
 80053b6:	6893      	ldr	r3, [r2, #8]
 80053b8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80053bc:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053be:	6802      	ldr	r2, [r0, #0]
 80053c0:	6893      	ldr	r3, [r2, #8]
 80053c2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80053c4:	430b      	orrs	r3, r1
 80053c6:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80053c8:	6802      	ldr	r2, [r0, #0]
 80053ca:	6893      	ldr	r3, [r2, #8]
 80053cc:	f023 0302 	bic.w	r3, r3, #2
 80053d0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80053d2:	6802      	ldr	r2, [r0, #0]
 80053d4:	6893      	ldr	r3, [r2, #8]
 80053d6:	7e01      	ldrb	r1, [r0, #24]
 80053d8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80053dc:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80053de:	f890 3020 	ldrb.w	r3, [r0, #32]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d133      	bne.n	800544e <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80053e6:	6802      	ldr	r2, [r0, #0]
 80053e8:	6853      	ldr	r3, [r2, #4]
 80053ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ee:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80053f0:	6802      	ldr	r2, [r0, #0]
 80053f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80053f4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053f8:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053fa:	6801      	ldr	r1, [r0, #0]
 80053fc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80053fe:	69c2      	ldr	r2, [r0, #28]
 8005400:	3a01      	subs	r2, #1
 8005402:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005406:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005408:	6802      	ldr	r2, [r0, #0]
 800540a:	6893      	ldr	r3, [r2, #8]
 800540c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005410:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005412:	6802      	ldr	r2, [r0, #0]
 8005414:	6893      	ldr	r3, [r2, #8]
 8005416:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 800541a:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800541e:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005420:	6802      	ldr	r2, [r0, #0]
 8005422:	6893      	ldr	r3, [r2, #8]
 8005424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005428:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800542a:	6802      	ldr	r2, [r0, #0]
 800542c:	6893      	ldr	r3, [r2, #8]
 800542e:	6941      	ldr	r1, [r0, #20]
 8005430:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8005434:	6093      	str	r3, [r2, #8]
}
 8005436:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005438:	6802      	ldr	r2, [r0, #0]
 800543a:	6893      	ldr	r3, [r2, #8]
 800543c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005440:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005442:	6802      	ldr	r2, [r0, #0]
 8005444:	6893      	ldr	r3, [r2, #8]
 8005446:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800544a:	6093      	str	r3, [r2, #8]
 800544c:	e7bc      	b.n	80053c8 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800544e:	6802      	ldr	r2, [r0, #0]
 8005450:	6853      	ldr	r3, [r2, #4]
 8005452:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005456:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005458:	6802      	ldr	r2, [r0, #0]
 800545a:	6853      	ldr	r3, [r2, #4]
 800545c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005460:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005462:	6801      	ldr	r1, [r0, #0]
 8005464:	684b      	ldr	r3, [r1, #4]
 8005466:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005468:	3a01      	subs	r2, #1
 800546a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800546e:	604b      	str	r3, [r1, #4]
 8005470:	e7be      	b.n	80053f0 <ADC_Init+0xa8>
 8005472:	bf00      	nop
 8005474:	40012300 	.word	0x40012300
 8005478:	0f000001 	.word	0x0f000001

0800547c <HAL_ADC_Init>:
  if(hadc == NULL)
 800547c:	b338      	cbz	r0, 80054ce <HAL_ADC_Init+0x52>
{
 800547e:	b510      	push	{r4, lr}
 8005480:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005482:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005484:	b143      	cbz	r3, 8005498 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005488:	f013 0f10 	tst.w	r3, #16
 800548c:	d00b      	beq.n	80054a6 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800548e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005490:	2300      	movs	r3, #0
 8005492:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005496:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8005498:	f7ff f818 	bl	80044cc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800549c:	2300      	movs	r3, #0
 800549e:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80054a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80054a4:	e7ef      	b.n	8005486 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80054a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80054ac:	f023 0302 	bic.w	r3, r3, #2
 80054b0:	f043 0302 	orr.w	r3, r3, #2
 80054b4:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80054b6:	4620      	mov	r0, r4
 80054b8:	f7ff ff46 	bl	8005348 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80054bc:	2000      	movs	r0, #0
 80054be:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80054c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054c2:	f023 0303 	bic.w	r3, r3, #3
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	6423      	str	r3, [r4, #64]	; 0x40
 80054cc:	e7e0      	b.n	8005490 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80054ce:	2001      	movs	r0, #1
}
 80054d0:	4770      	bx	lr
	...

080054d4 <HAL_ADC_ConfigChannel>:
{
 80054d4:	b430      	push	{r4, r5}
 80054d6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80054dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	f000 80b7 	beq.w	8005654 <HAL_ADC_ConfigChannel+0x180>
 80054e6:	2301      	movs	r3, #1
 80054e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80054ec:	680b      	ldr	r3, [r1, #0]
 80054ee:	2b09      	cmp	r3, #9
 80054f0:	d93e      	bls.n	8005570 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80054f2:	6805      	ldr	r5, [r0, #0]
 80054f4:	68ea      	ldr	r2, [r5, #12]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80054fc:	3b1e      	subs	r3, #30
 80054fe:	2407      	movs	r4, #7
 8005500:	fa04 f303 	lsl.w	r3, r4, r3
 8005504:	ea22 0303 	bic.w	r3, r2, r3
 8005508:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800550a:	6805      	ldr	r5, [r0, #0]
 800550c:	68ea      	ldr	r2, [r5, #12]
 800550e:	688c      	ldr	r4, [r1, #8]
 8005510:	880b      	ldrh	r3, [r1, #0]
 8005512:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005516:	3b1e      	subs	r3, #30
 8005518:	fa04 f303 	lsl.w	r3, r4, r3
 800551c:	4313      	orrs	r3, r2
 800551e:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8005520:	684b      	ldr	r3, [r1, #4]
 8005522:	2b06      	cmp	r3, #6
 8005524:	d83a      	bhi.n	800559c <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005526:	6805      	ldr	r5, [r0, #0]
 8005528:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800552a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800552e:	3b05      	subs	r3, #5
 8005530:	241f      	movs	r4, #31
 8005532:	fa04 f303 	lsl.w	r3, r4, r3
 8005536:	ea22 0303 	bic.w	r3, r2, r3
 800553a:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800553c:	6805      	ldr	r5, [r0, #0]
 800553e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005540:	684b      	ldr	r3, [r1, #4]
 8005542:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005546:	3b05      	subs	r3, #5
 8005548:	880c      	ldrh	r4, [r1, #0]
 800554a:	fa04 f303 	lsl.w	r3, r4, r3
 800554e:	4313      	orrs	r3, r2
 8005550:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005552:	6802      	ldr	r2, [r0, #0]
 8005554:	4b40      	ldr	r3, [pc, #256]	; (8005658 <HAL_ADC_ConfigChannel+0x184>)
 8005556:	429a      	cmp	r2, r3
 8005558:	d050      	beq.n	80055fc <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800555a:	6802      	ldr	r2, [r0, #0]
 800555c:	4b3e      	ldr	r3, [pc, #248]	; (8005658 <HAL_ADC_ConfigChannel+0x184>)
 800555e:	429a      	cmp	r2, r3
 8005560:	d055      	beq.n	800560e <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 8005562:	2300      	movs	r3, #0
 8005564:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8005568:	4618      	mov	r0, r3
}
 800556a:	b002      	add	sp, #8
 800556c:	bc30      	pop	{r4, r5}
 800556e:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005570:	6805      	ldr	r5, [r0, #0]
 8005572:	692a      	ldr	r2, [r5, #16]
 8005574:	b29b      	uxth	r3, r3
 8005576:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800557a:	2407      	movs	r4, #7
 800557c:	fa04 f303 	lsl.w	r3, r4, r3
 8005580:	ea22 0303 	bic.w	r3, r2, r3
 8005584:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005586:	6805      	ldr	r5, [r0, #0]
 8005588:	692a      	ldr	r2, [r5, #16]
 800558a:	688c      	ldr	r4, [r1, #8]
 800558c:	880b      	ldrh	r3, [r1, #0]
 800558e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005592:	fa04 f303 	lsl.w	r3, r4, r3
 8005596:	4313      	orrs	r3, r2
 8005598:	612b      	str	r3, [r5, #16]
 800559a:	e7c1      	b.n	8005520 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 800559c:	2b0c      	cmp	r3, #12
 800559e:	d816      	bhi.n	80055ce <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80055a0:	6805      	ldr	r5, [r0, #0]
 80055a2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80055a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80055a8:	3b23      	subs	r3, #35	; 0x23
 80055aa:	241f      	movs	r4, #31
 80055ac:	fa04 f303 	lsl.w	r3, r4, r3
 80055b0:	ea22 0303 	bic.w	r3, r2, r3
 80055b4:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80055b6:	6805      	ldr	r5, [r0, #0]
 80055b8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80055ba:	684b      	ldr	r3, [r1, #4]
 80055bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80055c0:	3b23      	subs	r3, #35	; 0x23
 80055c2:	880c      	ldrh	r4, [r1, #0]
 80055c4:	fa04 f303 	lsl.w	r3, r4, r3
 80055c8:	4313      	orrs	r3, r2
 80055ca:	632b      	str	r3, [r5, #48]	; 0x30
 80055cc:	e7c1      	b.n	8005552 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80055ce:	6805      	ldr	r5, [r0, #0]
 80055d0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80055d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80055d6:	3b41      	subs	r3, #65	; 0x41
 80055d8:	241f      	movs	r4, #31
 80055da:	fa04 f303 	lsl.w	r3, r4, r3
 80055de:	ea22 0303 	bic.w	r3, r2, r3
 80055e2:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80055e4:	6805      	ldr	r5, [r0, #0]
 80055e6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80055e8:	684b      	ldr	r3, [r1, #4]
 80055ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80055ee:	3b41      	subs	r3, #65	; 0x41
 80055f0:	880c      	ldrh	r4, [r1, #0]
 80055f2:	fa04 f303 	lsl.w	r3, r4, r3
 80055f6:	4313      	orrs	r3, r2
 80055f8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80055fa:	e7aa      	b.n	8005552 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80055fc:	680b      	ldr	r3, [r1, #0]
 80055fe:	2b12      	cmp	r3, #18
 8005600:	d1ab      	bne.n	800555a <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005602:	4a16      	ldr	r2, [pc, #88]	; (800565c <HAL_ADC_ConfigChannel+0x188>)
 8005604:	6853      	ldr	r3, [r2, #4]
 8005606:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800560a:	6053      	str	r3, [r2, #4]
 800560c:	e7a5      	b.n	800555a <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800560e:	680b      	ldr	r3, [r1, #0]
 8005610:	3b10      	subs	r3, #16
 8005612:	2b01      	cmp	r3, #1
 8005614:	d8a5      	bhi.n	8005562 <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005616:	4a11      	ldr	r2, [pc, #68]	; (800565c <HAL_ADC_ConfigChannel+0x188>)
 8005618:	6853      	ldr	r3, [r2, #4]
 800561a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800561e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005620:	680b      	ldr	r3, [r1, #0]
 8005622:	2b10      	cmp	r3, #16
 8005624:	d19d      	bne.n	8005562 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005626:	4b0e      	ldr	r3, [pc, #56]	; (8005660 <HAL_ADC_ConfigChannel+0x18c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800562e:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8005632:	f202 3283 	addw	r2, r2, #899	; 0x383
 8005636:	fba2 2303 	umull	r2, r3, r2, r3
 800563a:	0c9b      	lsrs	r3, r3, #18
 800563c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005640:	005a      	lsls	r2, r3, #1
 8005642:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8005644:	e002      	b.n	800564c <HAL_ADC_ConfigChannel+0x178>
        counter--;
 8005646:	9b01      	ldr	r3, [sp, #4]
 8005648:	3b01      	subs	r3, #1
 800564a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800564c:	9b01      	ldr	r3, [sp, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f9      	bne.n	8005646 <HAL_ADC_ConfigChannel+0x172>
 8005652:	e786      	b.n	8005562 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8005654:	2002      	movs	r0, #2
 8005656:	e788      	b.n	800556a <HAL_ADC_ConfigChannel+0x96>
 8005658:	40012000 	.word	0x40012000
 800565c:	40012300 	.word	0x40012300
 8005660:	20000050 	.word	0x20000050

08005664 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005664:	4a07      	ldr	r2, [pc, #28]	; (8005684 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005666:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005668:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800566c:	041b      	lsls	r3, r3, #16
 800566e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005670:	0200      	lsls	r0, r0, #8
 8005672:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005676:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8005678:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800567c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005680:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005682:	4770      	bx	lr
 8005684:	e000ed00 	.word	0xe000ed00

08005688 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005688:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800568a:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <HAL_NVIC_SetPriority+0x60>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005692:	f1c3 0407 	rsb	r4, r3, #7
 8005696:	2c04      	cmp	r4, #4
 8005698:	bf28      	it	cs
 800569a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800569c:	1d1d      	adds	r5, r3, #4
 800569e:	2d06      	cmp	r5, #6
 80056a0:	d918      	bls.n	80056d4 <HAL_NVIC_SetPriority+0x4c>
 80056a2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80056a8:	fa05 f404 	lsl.w	r4, r5, r4
 80056ac:	ea21 0104 	bic.w	r1, r1, r4
 80056b0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056b2:	fa05 f303 	lsl.w	r3, r5, r3
 80056b6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056ba:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80056bc:	2800      	cmp	r0, #0
 80056be:	db0b      	blt.n	80056d8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056c0:	0109      	lsls	r1, r1, #4
 80056c2:	b2c9      	uxtb	r1, r1
 80056c4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80056c8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80056cc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80056d0:	bc30      	pop	{r4, r5}
 80056d2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056d4:	2300      	movs	r3, #0
 80056d6:	e7e5      	b.n	80056a4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d8:	f000 000f 	and.w	r0, r0, #15
 80056dc:	0109      	lsls	r1, r1, #4
 80056de:	b2c9      	uxtb	r1, r1
 80056e0:	4b02      	ldr	r3, [pc, #8]	; (80056ec <HAL_NVIC_SetPriority+0x64>)
 80056e2:	5419      	strb	r1, [r3, r0]
 80056e4:	e7f4      	b.n	80056d0 <HAL_NVIC_SetPriority+0x48>
 80056e6:	bf00      	nop
 80056e8:	e000ed00 	.word	0xe000ed00
 80056ec:	e000ed14 	.word	0xe000ed14

080056f0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80056f0:	2800      	cmp	r0, #0
 80056f2:	db07      	blt.n	8005704 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056f4:	f000 021f 	and.w	r2, r0, #31
 80056f8:	0940      	lsrs	r0, r0, #5
 80056fa:	2301      	movs	r3, #1
 80056fc:	4093      	lsls	r3, r2
 80056fe:	4a02      	ldr	r2, [pc, #8]	; (8005708 <HAL_NVIC_EnableIRQ+0x18>)
 8005700:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	e000e100 	.word	0xe000e100

0800570c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800570c:	b158      	cbz	r0, 8005726 <HAL_CRC_Init+0x1a>
{
 800570e:	b510      	push	{r4, lr}
 8005710:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005712:	7943      	ldrb	r3, [r0, #5]
 8005714:	b11b      	cbz	r3, 800571e <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005716:	2301      	movs	r3, #1
 8005718:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800571a:	2000      	movs	r0, #0
}
 800571c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800571e:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8005720:	f7fe feec 	bl	80044fc <HAL_CRC_MspInit>
 8005724:	e7f7      	b.n	8005716 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8005726:	2001      	movs	r0, #1
}
 8005728:	4770      	bx	lr

0800572a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800572a:	b430      	push	{r4, r5}
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800572c:	2302      	movs	r3, #2
 800572e:	7143      	strb	r3, [r0, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005730:	6804      	ldr	r4, [r0, #0]
 8005732:	68a3      	ldr	r3, [r4, #8]
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	60a3      	str	r3, [r4, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800573a:	2300      	movs	r3, #0
 800573c:	e004      	b.n	8005748 <HAL_CRC_Calculate+0x1e>
  {
    hcrc->Instance->DR = pBuffer[index];
 800573e:	6804      	ldr	r4, [r0, #0]
 8005740:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8005744:	6025      	str	r5, [r4, #0]
  for (index = 0U; index < BufferLength; index++)
 8005746:	3301      	adds	r3, #1
 8005748:	4293      	cmp	r3, r2
 800574a:	d3f8      	bcc.n	800573e <HAL_CRC_Calculate+0x14>
  }
  temp = hcrc->Instance->DR;
 800574c:	6803      	ldr	r3, [r0, #0]
 800574e:	681b      	ldr	r3, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005750:	2201      	movs	r2, #1
 8005752:	7142      	strb	r2, [r0, #5]

  /* Return the CRC computed value */
  return temp;
}
 8005754:	4618      	mov	r0, r3
 8005756:	bc30      	pop	{r4, r5}
 8005758:	4770      	bx	lr

0800575a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800575a:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800575c:	6805      	ldr	r5, [r0, #0]
 800575e:	682c      	ldr	r4, [r5, #0]
 8005760:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8005764:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005766:	6804      	ldr	r4, [r0, #0]
 8005768:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800576a:	6883      	ldr	r3, [r0, #8]
 800576c:	2b40      	cmp	r3, #64	; 0x40
 800576e:	d005      	beq.n	800577c <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8005770:	6803      	ldr	r3, [r0, #0]
 8005772:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8005774:	6803      	ldr	r3, [r0, #0]
 8005776:	60da      	str	r2, [r3, #12]
  }
}
 8005778:	bc30      	pop	{r4, r5}
 800577a:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800577c:	6803      	ldr	r3, [r0, #0]
 800577e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005780:	6803      	ldr	r3, [r0, #0]
 8005782:	60d9      	str	r1, [r3, #12]
 8005784:	e7f8      	b.n	8005778 <DMA_SetConfig+0x1e>
	...

08005788 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005788:	6802      	ldr	r2, [r0, #0]
 800578a:	b2d3      	uxtb	r3, r2
 800578c:	3b10      	subs	r3, #16
 800578e:	490b      	ldr	r1, [pc, #44]	; (80057bc <DMA_CalcBaseAndBitshift+0x34>)
 8005790:	fba1 1303 	umull	r1, r3, r1, r3
 8005794:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005796:	490a      	ldr	r1, [pc, #40]	; (80057c0 <DMA_CalcBaseAndBitshift+0x38>)
 8005798:	5cc9      	ldrb	r1, [r1, r3]
 800579a:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 800579c:	2b03      	cmp	r3, #3
 800579e:	d806      	bhi.n	80057ae <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80057a0:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80057a4:	f022 0203 	bic.w	r2, r2, #3
 80057a8:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80057aa:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80057ac:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80057ae:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80057b2:	f022 0203 	bic.w	r2, r2, #3
 80057b6:	3204      	adds	r2, #4
 80057b8:	6582      	str	r2, [r0, #88]	; 0x58
 80057ba:	e7f6      	b.n	80057aa <DMA_CalcBaseAndBitshift+0x22>
 80057bc:	aaaaaaab 	.word	0xaaaaaaab
 80057c0:	0800cf64 	.word	0x0800cf64

080057c4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057c6:	6982      	ldr	r2, [r0, #24]
 80057c8:	b992      	cbnz	r2, 80057f0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d00a      	beq.n	80057e4 <DMA_CheckFifoParam+0x20>
 80057ce:	b11b      	cbz	r3, 80057d8 <DMA_CheckFifoParam+0x14>
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d001      	beq.n	80057d8 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80057d4:	2000      	movs	r0, #0
 80057d6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80057da:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80057de:	d12c      	bne.n	800583a <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80057e0:	2000      	movs	r0, #0
 80057e2:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80057e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057ea:	d028      	beq.n	800583e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80057ec:	2000      	movs	r0, #0
 80057ee:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057f0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80057f4:	d005      	beq.n	8005802 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d929      	bls.n	800584e <DMA_CheckFifoParam+0x8a>
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d015      	beq.n	800582a <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80057fe:	2000      	movs	r0, #0
 8005800:	4770      	bx	lr
    switch (tmp)
 8005802:	2b03      	cmp	r3, #3
 8005804:	d803      	bhi.n	800580e <DMA_CheckFifoParam+0x4a>
 8005806:	e8df f003 	tbb	[pc, r3]
 800580a:	041c      	.short	0x041c
 800580c:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800580e:	2000      	movs	r0, #0
 8005810:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005812:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005814:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005818:	d115      	bne.n	8005846 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800581a:	2000      	movs	r0, #0
 800581c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800581e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005820:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005824:	d011      	beq.n	800584a <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8005826:	2000      	movs	r0, #0
 8005828:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800582a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800582c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005830:	d001      	beq.n	8005836 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8005832:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8005834:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8005836:	2000      	movs	r0, #0
 8005838:	4770      	bx	lr
        status = HAL_ERROR;
 800583a:	2001      	movs	r0, #1
 800583c:	4770      	bx	lr
        status = HAL_ERROR;
 800583e:	2001      	movs	r0, #1
 8005840:	4770      	bx	lr
      status = HAL_ERROR;
 8005842:	2001      	movs	r0, #1
 8005844:	4770      	bx	lr
        status = HAL_ERROR;
 8005846:	2001      	movs	r0, #1
 8005848:	4770      	bx	lr
        status = HAL_ERROR;
 800584a:	2001      	movs	r0, #1
 800584c:	4770      	bx	lr
      status = HAL_ERROR;
 800584e:	2001      	movs	r0, #1
 8005850:	4770      	bx	lr
	...

08005854 <HAL_DMA_Init>:
{
 8005854:	b570      	push	{r4, r5, r6, lr}
 8005856:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005858:	f7ff fd70 	bl	800533c <HAL_GetTick>
  if(hdma == NULL)
 800585c:	2c00      	cmp	r4, #0
 800585e:	d05b      	beq.n	8005918 <HAL_DMA_Init+0xc4>
 8005860:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8005862:	2300      	movs	r3, #0
 8005864:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8005868:	2302      	movs	r3, #2
 800586a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	6813      	ldr	r3, [r2, #0]
 8005872:	f023 0301 	bic.w	r3, r3, #1
 8005876:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	f012 0f01 	tst.w	r2, #1
 8005880:	d00a      	beq.n	8005898 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005882:	f7ff fd5b 	bl	800533c <HAL_GetTick>
 8005886:	1b40      	subs	r0, r0, r5
 8005888:	2805      	cmp	r0, #5
 800588a:	d9f5      	bls.n	8005878 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800588c:	2320      	movs	r3, #32
 800588e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005890:	2003      	movs	r0, #3
 8005892:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8005896:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8005898:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800589a:	4820      	ldr	r0, [pc, #128]	; (800591c <HAL_DMA_Init+0xc8>)
 800589c:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800589e:	6861      	ldr	r1, [r4, #4]
 80058a0:	68a2      	ldr	r2, [r4, #8]
 80058a2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a4:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058a6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a8:	6921      	ldr	r1, [r4, #16]
 80058aa:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ac:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058ae:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b0:	69a1      	ldr	r1, [r4, #24]
 80058b2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80058b4:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80058b8:	6a21      	ldr	r1, [r4, #32]
 80058ba:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058bc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058be:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058c0:	2904      	cmp	r1, #4
 80058c2:	d01e      	beq.n	8005902 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80058c4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80058c6:	6826      	ldr	r6, [r4, #0]
 80058c8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058ca:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80058ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058d0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d107      	bne.n	80058e6 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80058d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80058d8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80058dc:	b11b      	cbz	r3, 80058e6 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058de:	4620      	mov	r0, r4
 80058e0:	f7ff ff70 	bl	80057c4 <DMA_CheckFifoParam>
 80058e4:	b990      	cbnz	r0, 800590c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80058e6:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058e8:	4620      	mov	r0, r4
 80058ea:	f7ff ff4d 	bl	8005788 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80058f0:	233f      	movs	r3, #63	; 0x3f
 80058f2:	4093      	lsls	r3, r2
 80058f4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058f6:	2000      	movs	r0, #0
 80058f8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80058fa:	2301      	movs	r3, #1
 80058fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005900:	e7c9      	b.n	8005896 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005902:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005904:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005906:	4301      	orrs	r1, r0
 8005908:	430a      	orrs	r2, r1
 800590a:	e7db      	b.n	80058c4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800590c:	2340      	movs	r3, #64	; 0x40
 800590e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005910:	2001      	movs	r0, #1
 8005912:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8005916:	e7be      	b.n	8005896 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8005918:	2001      	movs	r0, #1
 800591a:	e7bc      	b.n	8005896 <HAL_DMA_Init+0x42>
 800591c:	f010803f 	.word	0xf010803f

08005920 <HAL_DMA_Start_IT>:
{
 8005920:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005922:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005924:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8005928:	2c01      	cmp	r4, #1
 800592a:	d02c      	beq.n	8005986 <HAL_DMA_Start_IT+0x66>
 800592c:	2401      	movs	r4, #1
 800592e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005932:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8005936:	b2e4      	uxtb	r4, r4
 8005938:	2c01      	cmp	r4, #1
 800593a:	d004      	beq.n	8005946 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 800593c:	2300      	movs	r3, #0
 800593e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8005942:	2002      	movs	r0, #2
}
 8005944:	bd38      	pop	{r3, r4, r5, pc}
 8005946:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005948:	2002      	movs	r0, #2
 800594a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800594e:	2000      	movs	r0, #0
 8005950:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005952:	4620      	mov	r0, r4
 8005954:	f7ff ff01 	bl	800575a <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005958:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800595a:	233f      	movs	r3, #63	; 0x3f
 800595c:	4093      	lsls	r3, r2
 800595e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005960:	6822      	ldr	r2, [r4, #0]
 8005962:	6813      	ldr	r3, [r2, #0]
 8005964:	f043 0316 	orr.w	r3, r3, #22
 8005968:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800596a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800596c:	b123      	cbz	r3, 8005978 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 800596e:	6822      	ldr	r2, [r4, #0]
 8005970:	6813      	ldr	r3, [r2, #0]
 8005972:	f043 0308 	orr.w	r3, r3, #8
 8005976:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8005978:	6822      	ldr	r2, [r4, #0]
 800597a:	6813      	ldr	r3, [r2, #0]
 800597c:	f043 0301 	orr.w	r3, r3, #1
 8005980:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005982:	2000      	movs	r0, #0
 8005984:	e7de      	b.n	8005944 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8005986:	2002      	movs	r0, #2
 8005988:	e7dc      	b.n	8005944 <HAL_DMA_Start_IT+0x24>

0800598a <HAL_DMA_Abort>:
{
 800598a:	b570      	push	{r4, r5, r6, lr}
 800598c:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800598e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8005990:	f7ff fcd4 	bl	800533c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005994:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d006      	beq.n	80059ac <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800599e:	2380      	movs	r3, #128	; 0x80
 80059a0:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80059a2:	2300      	movs	r3, #0
 80059a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80059a8:	2001      	movs	r0, #1
}
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059ae:	6822      	ldr	r2, [r4, #0]
 80059b0:	6813      	ldr	r3, [r2, #0]
 80059b2:	f023 0316 	bic.w	r3, r3, #22
 80059b6:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059b8:	6822      	ldr	r2, [r4, #0]
 80059ba:	6953      	ldr	r3, [r2, #20]
 80059bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c0:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059c4:	b1e3      	cbz	r3, 8005a00 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059c6:	6822      	ldr	r2, [r4, #0]
 80059c8:	6813      	ldr	r3, [r2, #0]
 80059ca:	f023 0308 	bic.w	r3, r3, #8
 80059ce:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80059d0:	6822      	ldr	r2, [r4, #0]
 80059d2:	6813      	ldr	r3, [r2, #0]
 80059d4:	f023 0301 	bic.w	r3, r3, #1
 80059d8:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f013 0f01 	tst.w	r3, #1
 80059e2:	d011      	beq.n	8005a08 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059e4:	f7ff fcaa 	bl	800533c <HAL_GetTick>
 80059e8:	1b40      	subs	r0, r0, r5
 80059ea:	2805      	cmp	r0, #5
 80059ec:	d9f5      	bls.n	80059da <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059ee:	2320      	movs	r3, #32
 80059f0:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80059f2:	2300      	movs	r3, #0
 80059f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059f8:	2003      	movs	r0, #3
 80059fa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80059fe:	e7d4      	b.n	80059aa <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1df      	bne.n	80059c6 <HAL_DMA_Abort+0x3c>
 8005a06:	e7e3      	b.n	80059d0 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a08:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005a0a:	233f      	movs	r3, #63	; 0x3f
 8005a0c:	4093      	lsls	r3, r2
 8005a0e:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8005a10:	2000      	movs	r0, #0
 8005a12:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005a16:	2301      	movs	r3, #1
 8005a18:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005a1c:	e7c5      	b.n	80059aa <HAL_DMA_Abort+0x20>

08005a1e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a1e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d003      	beq.n	8005a30 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a28:	2380      	movs	r3, #128	; 0x80
 8005a2a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8005a2c:	2001      	movs	r0, #1
 8005a2e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a30:	2305      	movs	r3, #5
 8005a32:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005a36:	6802      	ldr	r2, [r0, #0]
 8005a38:	6813      	ldr	r3, [r2, #0]
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005a40:	2000      	movs	r0, #0
}
 8005a42:	4770      	bx	lr

08005a44 <HAL_DMA_IRQHandler>:
{
 8005a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a46:	b083      	sub	sp, #12
 8005a48:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a4e:	4b72      	ldr	r3, [pc, #456]	; (8005c18 <HAL_DMA_IRQHandler+0x1d4>)
 8005a50:	681d      	ldr	r5, [r3, #0]
 8005a52:	4b72      	ldr	r3, [pc, #456]	; (8005c1c <HAL_DMA_IRQHandler+0x1d8>)
 8005a54:	fba3 3505 	umull	r3, r5, r3, r5
 8005a58:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a5a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8005a5c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a5e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005a60:	2308      	movs	r3, #8
 8005a62:	4093      	lsls	r3, r2
 8005a64:	4233      	tst	r3, r6
 8005a66:	d010      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a68:	6803      	ldr	r3, [r0, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	f012 0f04 	tst.w	r2, #4
 8005a70:	d00b      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	f022 0204 	bic.w	r2, r2, #4
 8005a78:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a7a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005a7c:	2308      	movs	r3, #8
 8005a7e:	4093      	lsls	r3, r2
 8005a80:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a82:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005a84:	f043 0301 	orr.w	r3, r3, #1
 8005a88:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a8a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4093      	lsls	r3, r2
 8005a90:	4233      	tst	r3, r6
 8005a92:	d009      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a94:	6822      	ldr	r2, [r4, #0]
 8005a96:	6952      	ldr	r2, [r2, #20]
 8005a98:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a9c:	d004      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a9e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005aa0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005aa2:	f043 0302 	orr.w	r3, r3, #2
 8005aa6:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005aa8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005aaa:	2304      	movs	r3, #4
 8005aac:	4093      	lsls	r3, r2
 8005aae:	4233      	tst	r3, r6
 8005ab0:	d009      	beq.n	8005ac6 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	f012 0f02 	tst.w	r2, #2
 8005aba:	d004      	beq.n	8005ac6 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005abc:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005abe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ac0:	f043 0304 	orr.w	r3, r3, #4
 8005ac4:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ac6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005ac8:	2310      	movs	r3, #16
 8005aca:	4093      	lsls	r3, r2
 8005acc:	4233      	tst	r3, r6
 8005ace:	d024      	beq.n	8005b1a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005ad0:	6822      	ldr	r2, [r4, #0]
 8005ad2:	6812      	ldr	r2, [r2, #0]
 8005ad4:	f012 0f08 	tst.w	r2, #8
 8005ad8:	d01f      	beq.n	8005b1a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ada:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005ae4:	d00d      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005aec:	d104      	bne.n	8005af8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8005aee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005af0:	b19b      	cbz	r3, 8005b1a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8005af2:	4620      	mov	r0, r4
 8005af4:	4798      	blx	r3
 8005af6:	e010      	b.n	8005b1a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005af8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005afa:	b173      	cbz	r3, 8005b1a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8005afc:	4620      	mov	r0, r4
 8005afe:	4798      	blx	r3
 8005b00:	e00b      	b.n	8005b1a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005b08:	d103      	bne.n	8005b12 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	f022 0208 	bic.w	r2, r2, #8
 8005b10:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b14:	b10b      	cbz	r3, 8005b1a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8005b16:	4620      	mov	r0, r4
 8005b18:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b1a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005b1c:	2320      	movs	r3, #32
 8005b1e:	4093      	lsls	r3, r2
 8005b20:	4233      	tst	r3, r6
 8005b22:	d055      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b24:	6822      	ldr	r2, [r4, #0]
 8005b26:	6812      	ldr	r2, [r2, #0]
 8005b28:	f012 0f10 	tst.w	r2, #16
 8005b2c:	d050      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b2e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b30:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b05      	cmp	r3, #5
 8005b38:	d00e      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005b42:	d033      	beq.n	8005bac <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005b4a:	d12a      	bne.n	8005ba2 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8005b4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d03e      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8005b52:	4620      	mov	r0, r4
 8005b54:	4798      	blx	r3
 8005b56:	e03b      	b.n	8005bd0 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b58:	6822      	ldr	r2, [r4, #0]
 8005b5a:	6813      	ldr	r3, [r2, #0]
 8005b5c:	f023 0316 	bic.w	r3, r3, #22
 8005b60:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b62:	6822      	ldr	r2, [r4, #0]
 8005b64:	6953      	ldr	r3, [r2, #20]
 8005b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b6a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b6e:	b1a3      	cbz	r3, 8005b9a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b70:	6822      	ldr	r2, [r4, #0]
 8005b72:	6813      	ldr	r3, [r2, #0]
 8005b74:	f023 0308 	bic.w	r3, r3, #8
 8005b78:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b7a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005b7c:	233f      	movs	r3, #63	; 0x3f
 8005b7e:	4093      	lsls	r3, r2
 8005b80:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8005b82:	2300      	movs	r3, #0
 8005b84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005b8e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d03f      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8005b94:	4620      	mov	r0, r4
 8005b96:	4798      	blx	r3
 8005b98:	e03c      	b.n	8005c14 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e7      	bne.n	8005b70 <HAL_DMA_IRQHandler+0x12c>
 8005ba0:	e7eb      	b.n	8005b7a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8005ba2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005ba4:	b1a3      	cbz	r3, 8005bd0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	4798      	blx	r3
 8005baa:	e011      	b.n	8005bd0 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005bb2:	d109      	bne.n	8005bc8 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	f022 0210 	bic.w	r2, r2, #16
 8005bba:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005bc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005bca:	b10b      	cbz	r3, 8005bd0 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8005bcc:	4620      	mov	r0, r4
 8005bce:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bd2:	b1fb      	cbz	r3, 8005c14 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005bd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bd6:	f013 0f01 	tst.w	r3, #1
 8005bda:	d017      	beq.n	8005c0c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bdc:	2305      	movs	r3, #5
 8005bde:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	6813      	ldr	r3, [r2, #0]
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8005bec:	9b01      	ldr	r3, [sp, #4]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	42ab      	cmp	r3, r5
 8005bf4:	d804      	bhi.n	8005c00 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005bf6:	6823      	ldr	r3, [r4, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f013 0f01 	tst.w	r3, #1
 8005bfe:	d1f5      	bne.n	8005bec <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8005c00:	2300      	movs	r3, #0
 8005c02:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005c06:	2301      	movs	r3, #1
 8005c08:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005c0c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005c0e:	b10b      	cbz	r3, 8005c14 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8005c10:	4620      	mov	r0, r4
 8005c12:	4798      	blx	r3
}
 8005c14:	b003      	add	sp, #12
 8005c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c18:	20000050 	.word	0x20000050
 8005c1c:	1b4e81b5 	.word	0x1b4e81b5

08005c20 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005c20:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8005c22:	4770      	bx	lr

08005c24 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c24:	2300      	movs	r3, #0
 8005c26:	2b0f      	cmp	r3, #15
 8005c28:	f200 80c5 	bhi.w	8005db6 <HAL_GPIO_Init+0x192>
{
 8005c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	e039      	b.n	8005ca6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c32:	2204      	movs	r2, #4
 8005c34:	e000      	b.n	8005c38 <HAL_GPIO_Init+0x14>
 8005c36:	2200      	movs	r2, #0
 8005c38:	40aa      	lsls	r2, r5
 8005c3a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c3c:	3402      	adds	r4, #2
 8005c3e:	4d5e      	ldr	r5, [pc, #376]	; (8005db8 <HAL_GPIO_Init+0x194>)
 8005c40:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c44:	4a5d      	ldr	r2, [pc, #372]	; (8005dbc <HAL_GPIO_Init+0x198>)
 8005c46:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005c48:	43f2      	mvns	r2, r6
 8005c4a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c4e:	684f      	ldr	r7, [r1, #4]
 8005c50:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8005c54:	d001      	beq.n	8005c5a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8005c56:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8005c5a:	4c58      	ldr	r4, [pc, #352]	; (8005dbc <HAL_GPIO_Init+0x198>)
 8005c5c:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8005c5e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8005c60:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c64:	684f      	ldr	r7, [r1, #4]
 8005c66:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8005c6a:	d001      	beq.n	8005c70 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8005c6c:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8005c70:	4c52      	ldr	r4, [pc, #328]	; (8005dbc <HAL_GPIO_Init+0x198>)
 8005c72:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c74:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8005c76:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c7a:	684f      	ldr	r7, [r1, #4]
 8005c7c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8005c80:	d001      	beq.n	8005c86 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8005c82:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8005c86:	4c4d      	ldr	r4, [pc, #308]	; (8005dbc <HAL_GPIO_Init+0x198>)
 8005c88:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8005c8a:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8005c8c:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c8e:	684d      	ldr	r5, [r1, #4]
 8005c90:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8005c94:	d001      	beq.n	8005c9a <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8005c96:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8005c9a:	4c48      	ldr	r4, [pc, #288]	; (8005dbc <HAL_GPIO_Init+0x198>)
 8005c9c:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	2b0f      	cmp	r3, #15
 8005ca2:	f200 8086 	bhi.w	8005db2 <HAL_GPIO_Init+0x18e>
    ioposition = 0x01U << position;
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005caa:	680c      	ldr	r4, [r1, #0]
 8005cac:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8005cb0:	42b2      	cmp	r2, r6
 8005cb2:	d1f4      	bne.n	8005c9e <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cb4:	684c      	ldr	r4, [r1, #4]
 8005cb6:	1e65      	subs	r5, r4, #1
 8005cb8:	2d01      	cmp	r5, #1
 8005cba:	d903      	bls.n	8005cc4 <HAL_GPIO_Init+0xa0>
 8005cbc:	2c11      	cmp	r4, #17
 8005cbe:	d001      	beq.n	8005cc4 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cc0:	2c12      	cmp	r4, #18
 8005cc2:	d112      	bne.n	8005cea <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8005cc4:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cc6:	005f      	lsls	r7, r3, #1
 8005cc8:	2403      	movs	r4, #3
 8005cca:	40bc      	lsls	r4, r7
 8005ccc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cd0:	68cc      	ldr	r4, [r1, #12]
 8005cd2:	40bc      	lsls	r4, r7
 8005cd4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8005cd6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8005cd8:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cda:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005cde:	684c      	ldr	r4, [r1, #4]
 8005ce0:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8005ce4:	409a      	lsls	r2, r3
 8005ce6:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8005ce8:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8005cea:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cec:	005f      	lsls	r7, r3, #1
 8005cee:	2203      	movs	r2, #3
 8005cf0:	40ba      	lsls	r2, r7
 8005cf2:	43d2      	mvns	r2, r2
 8005cf4:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cf6:	688d      	ldr	r5, [r1, #8]
 8005cf8:	40bd      	lsls	r5, r7
 8005cfa:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8005cfc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cfe:	684c      	ldr	r4, [r1, #4]
 8005d00:	2c02      	cmp	r4, #2
 8005d02:	d001      	beq.n	8005d08 <HAL_GPIO_Init+0xe4>
 8005d04:	2c12      	cmp	r4, #18
 8005d06:	d113      	bne.n	8005d30 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8005d08:	08dd      	lsrs	r5, r3, #3
 8005d0a:	3508      	adds	r5, #8
 8005d0c:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d10:	f003 0407 	and.w	r4, r3, #7
 8005d14:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005d18:	240f      	movs	r4, #15
 8005d1a:	fa04 f40c 	lsl.w	r4, r4, ip
 8005d1e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d22:	690c      	ldr	r4, [r1, #16]
 8005d24:	fa04 f40c 	lsl.w	r4, r4, ip
 8005d28:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005d2c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8005d30:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d32:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d34:	684c      	ldr	r4, [r1, #4]
 8005d36:	f004 0403 	and.w	r4, r4, #3
 8005d3a:	40bc      	lsls	r4, r7
 8005d3c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8005d3e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d40:	684a      	ldr	r2, [r1, #4]
 8005d42:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8005d46:	d0aa      	beq.n	8005c9e <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d48:	2200      	movs	r2, #0
 8005d4a:	9201      	str	r2, [sp, #4]
 8005d4c:	4a1c      	ldr	r2, [pc, #112]	; (8005dc0 <HAL_GPIO_Init+0x19c>)
 8005d4e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005d50:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8005d54:	6454      	str	r4, [r2, #68]	; 0x44
 8005d56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005d58:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005d5c:	9201      	str	r2, [sp, #4]
 8005d5e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005d60:	089c      	lsrs	r4, r3, #2
 8005d62:	1ca5      	adds	r5, r4, #2
 8005d64:	4a14      	ldr	r2, [pc, #80]	; (8005db8 <HAL_GPIO_Init+0x194>)
 8005d66:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d6a:	f003 0203 	and.w	r2, r3, #3
 8005d6e:	0095      	lsls	r5, r2, #2
 8005d70:	220f      	movs	r2, #15
 8005d72:	40aa      	lsls	r2, r5
 8005d74:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d78:	4a12      	ldr	r2, [pc, #72]	; (8005dc4 <HAL_GPIO_Init+0x1a0>)
 8005d7a:	4290      	cmp	r0, r2
 8005d7c:	f43f af5b 	beq.w	8005c36 <HAL_GPIO_Init+0x12>
 8005d80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d84:	4290      	cmp	r0, r2
 8005d86:	d00e      	beq.n	8005da6 <HAL_GPIO_Init+0x182>
 8005d88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d8c:	4290      	cmp	r0, r2
 8005d8e:	d00c      	beq.n	8005daa <HAL_GPIO_Init+0x186>
 8005d90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d94:	4290      	cmp	r0, r2
 8005d96:	d00a      	beq.n	8005dae <HAL_GPIO_Init+0x18a>
 8005d98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d9c:	4290      	cmp	r0, r2
 8005d9e:	f43f af48 	beq.w	8005c32 <HAL_GPIO_Init+0xe>
 8005da2:	2207      	movs	r2, #7
 8005da4:	e748      	b.n	8005c38 <HAL_GPIO_Init+0x14>
 8005da6:	2201      	movs	r2, #1
 8005da8:	e746      	b.n	8005c38 <HAL_GPIO_Init+0x14>
 8005daa:	2202      	movs	r2, #2
 8005dac:	e744      	b.n	8005c38 <HAL_GPIO_Init+0x14>
 8005dae:	2203      	movs	r2, #3
 8005db0:	e742      	b.n	8005c38 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8005db2:	b003      	add	sp, #12
 8005db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db6:	4770      	bx	lr
 8005db8:	40013800 	.word	0x40013800
 8005dbc:	40013c00 	.word	0x40013c00
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	40020000 	.word	0x40020000

08005dc8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005dc8:	6903      	ldr	r3, [r0, #16]
 8005dca:	4219      	tst	r1, r3
 8005dcc:	d101      	bne.n	8005dd2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005dce:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8005dd0:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8005dd2:	2001      	movs	r0, #1
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005dd6:	b912      	cbnz	r2, 8005dde <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005dd8:	0409      	lsls	r1, r1, #16
 8005dda:	6181      	str	r1, [r0, #24]
  }
}
 8005ddc:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8005dde:	6181      	str	r1, [r0, #24]
 8005de0:	4770      	bx	lr
	...

08005de4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005de4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005de6:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	4203      	tst	r3, r0
 8005dec:	d100      	bne.n	8005df0 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8005dee:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005df0:	4b02      	ldr	r3, [pc, #8]	; (8005dfc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005df2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005df4:	f7fd ffde 	bl	8003db4 <HAL_GPIO_EXTI_Callback>
}
 8005df8:	e7f9      	b.n	8005dee <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005dfa:	bf00      	nop
 8005dfc:	40013c00 	.word	0x40013c00

08005e00 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e00:	6803      	ldr	r3, [r0, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005e08:	d011      	beq.n	8005e2e <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e0e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e10:	2300      	movs	r3, #0
 8005e12:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e14:	2220      	movs	r2, #32
 8005e16:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e1a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e1e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005e20:	f042 0204 	orr.w	r2, r2, #4
 8005e24:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8005e2a:	2001      	movs	r0, #1
 8005e2c:	4770      	bx	lr
  }
  return HAL_OK;
 8005e2e:	2000      	movs	r0, #0
}
 8005e30:	4770      	bx	lr

08005e32 <I2C_WaitOnFlagUntilTimeout>:
{
 8005e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e34:	4606      	mov	r6, r0
 8005e36:	460c      	mov	r4, r1
 8005e38:	4617      	mov	r7, r2
 8005e3a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e3c:	e022      	b.n	8005e84 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e3e:	f7ff fa7d 	bl	800533c <HAL_GetTick>
 8005e42:	9b06      	ldr	r3, [sp, #24]
 8005e44:	1ac0      	subs	r0, r0, r3
 8005e46:	42a8      	cmp	r0, r5
 8005e48:	d800      	bhi.n	8005e4c <I2C_WaitOnFlagUntilTimeout+0x1a>
 8005e4a:	b9dd      	cbnz	r5, 8005e84 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e50:	2220      	movs	r2, #32
 8005e52:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e56:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e5a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8005e5c:	f042 0220 	orr.w	r2, r2, #32
 8005e60:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005e62:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8005e66:	2001      	movs	r0, #1
 8005e68:	e01a      	b.n	8005ea0 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e6a:	6833      	ldr	r3, [r6, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	ea24 0303 	bic.w	r3, r4, r3
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	fab3 f383 	clz	r3, r3
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	429f      	cmp	r7, r3
 8005e7c:	d10f      	bne.n	8005e9e <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8005e7e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005e82:	d1dc      	bne.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e84:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d0ee      	beq.n	8005e6a <I2C_WaitOnFlagUntilTimeout+0x38>
 8005e8c:	6833      	ldr	r3, [r6, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	ea24 0303 	bic.w	r3, r4, r3
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	fab3 f383 	clz	r3, r3
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	e7ed      	b.n	8005e7a <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8005e9e:	2000      	movs	r0, #0
}
 8005ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	460d      	mov	r5, r1
 8005ea8:	4616      	mov	r6, r2
 8005eaa:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005eac:	e03c      	b.n	8005f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ebc:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ecc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005ece:	f042 0204 	orr.w	r2, r2, #4
 8005ed2:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005ed4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8005ed8:	2001      	movs	r0, #1
 8005eda:	e033      	b.n	8005f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005edc:	f7ff fa2e 	bl	800533c <HAL_GetTick>
 8005ee0:	1bc0      	subs	r0, r0, r7
 8005ee2:	42b0      	cmp	r0, r6
 8005ee4:	d800      	bhi.n	8005ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8005ee6:	b9fe      	cbnz	r6, 8005f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005eec:	2220      	movs	r2, #32
 8005eee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ef6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005ef8:	f042 0220 	orr.w	r2, r2, #32
 8005efc:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005efe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005f02:	2001      	movs	r0, #1
 8005f04:	e01e      	b.n	8005f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	ea25 0303 	bic.w	r3, r5, r3
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	3300      	adds	r3, #0
 8005f12:	bf18      	it	ne
 8005f14:	2301      	movne	r3, #1
 8005f16:	b1a3      	cbz	r3, 8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	695a      	ldr	r2, [r3, #20]
 8005f1c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005f20:	d1c5      	bne.n	8005eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8005f22:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8005f26:	d1d9      	bne.n	8005edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f28:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d0ea      	beq.n	8005f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	ea25 0303 	bic.w	r3, r5, r3
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3300      	adds	r3, #0
 8005f3c:	bf18      	it	ne
 8005f3e:	2301      	movne	r3, #1
 8005f40:	e7e9      	b.n	8005f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8005f42:	2000      	movs	r0, #0
}
 8005f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f46 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005f46:	b570      	push	{r4, r5, r6, lr}
 8005f48:	4604      	mov	r4, r0
 8005f4a:	460d      	mov	r5, r1
 8005f4c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f56:	d11c      	bne.n	8005f92 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f7ff ff51 	bl	8005e00 <I2C_IsAcknowledgeFailed>
 8005f5e:	b9d0      	cbnz	r0, 8005f96 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005f60:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005f64:	d0f3      	beq.n	8005f4e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f66:	f7ff f9e9 	bl	800533c <HAL_GetTick>
 8005f6a:	1b80      	subs	r0, r0, r6
 8005f6c:	42a8      	cmp	r0, r5
 8005f6e:	d801      	bhi.n	8005f74 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005f70:	2d00      	cmp	r5, #0
 8005f72:	d1ec      	bne.n	8005f4e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f74:	2300      	movs	r3, #0
 8005f76:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f82:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f84:	f042 0220 	orr.w	r2, r2, #32
 8005f88:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005f8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005f8e:	2001      	movs	r0, #1
 8005f90:	e000      	b.n	8005f94 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8005f92:	2000      	movs	r0, #0
}
 8005f94:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005f96:	2001      	movs	r0, #1
 8005f98:	e7fc      	b.n	8005f94 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08005f9c <I2C_RequestMemoryWrite>:
{
 8005f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	4688      	mov	r8, r1
 8005fa6:	4616      	mov	r6, r2
 8005fa8:	461f      	mov	r7, r3
 8005faa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fac:	6802      	ldr	r2, [r0, #0]
 8005fae:	6813      	ldr	r3, [r2, #0]
 8005fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb4:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb6:	9500      	str	r5, [sp, #0]
 8005fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fc0:	f7ff ff37 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 8005fc4:	b160      	cbz	r0, 8005fe0 <I2C_RequestMemoryWrite+0x44>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005fce:	d04f      	beq.n	8006070 <I2C_RequestMemoryWrite+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fd4:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	b004      	add	sp, #16
 8005fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fe0:	6822      	ldr	r2, [r4, #0]
 8005fe2:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8005fe6:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fe8:	462b      	mov	r3, r5
 8005fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fec:	4921      	ldr	r1, [pc, #132]	; (8006074 <I2C_RequestMemoryWrite+0xd8>)
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f7ff ff57 	bl	8005ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ff4:	b108      	cbz	r0, 8005ffa <I2C_RequestMemoryWrite+0x5e>
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e7ee      	b.n	8005fd8 <I2C_RequestMemoryWrite+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	9303      	str	r3, [sp, #12]
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	695a      	ldr	r2, [r3, #20]
 8006002:	9203      	str	r2, [sp, #12]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	9303      	str	r3, [sp, #12]
 8006008:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800600a:	462a      	mov	r2, r5
 800600c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800600e:	4620      	mov	r0, r4
 8006010:	f7ff ff99 	bl	8005f46 <I2C_WaitOnTXEFlagUntilTimeout>
 8006014:	4603      	mov	r3, r0
 8006016:	b158      	cbz	r0, 8006030 <I2C_RequestMemoryWrite+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006018:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800601a:	2b04      	cmp	r3, #4
 800601c:	d001      	beq.n	8006022 <I2C_RequestMemoryWrite+0x86>
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e7da      	b.n	8005fd8 <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006022:	6822      	ldr	r2, [r4, #0]
 8006024:	6813      	ldr	r3, [r2, #0]
 8006026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800602a:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e7d3      	b.n	8005fd8 <I2C_RequestMemoryWrite+0x3c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006030:	2f01      	cmp	r7, #1
 8006032:	d00e      	beq.n	8006052 <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	0a32      	lsrs	r2, r6, #8
 8006038:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800603a:	462a      	mov	r2, r5
 800603c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800603e:	4620      	mov	r0, r4
 8006040:	f7ff ff81 	bl	8005f46 <I2C_WaitOnTXEFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	b178      	cbz	r0, 8006068 <I2C_RequestMemoryWrite+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006048:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800604a:	2b04      	cmp	r3, #4
 800604c:	d005      	beq.n	800605a <I2C_RequestMemoryWrite+0xbe>
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e7c2      	b.n	8005fd8 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	b2f6      	uxtb	r6, r6
 8006056:	6116      	str	r6, [r2, #16]
 8006058:	e7be      	b.n	8005fd8 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605a:	6822      	ldr	r2, [r4, #0]
 800605c:	6813      	ldr	r3, [r2, #0]
 800605e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006062:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e7b7      	b.n	8005fd8 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006068:	6822      	ldr	r2, [r4, #0]
 800606a:	b2f6      	uxtb	r6, r6
 800606c:	6116      	str	r6, [r2, #16]
 800606e:	e7b3      	b.n	8005fd8 <I2C_RequestMemoryWrite+0x3c>
    return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e7b1      	b.n	8005fd8 <I2C_RequestMemoryWrite+0x3c>
 8006074:	00010002 	.word	0x00010002

08006078 <I2C_RequestMemoryRead>:
{
 8006078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	4604      	mov	r4, r0
 8006080:	460e      	mov	r6, r1
 8006082:	4617      	mov	r7, r2
 8006084:	4698      	mov	r8, r3
 8006086:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006088:	6802      	ldr	r2, [r0, #0]
 800608a:	6813      	ldr	r3, [r2, #0]
 800608c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006090:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006092:	6802      	ldr	r2, [r0, #0]
 8006094:	6813      	ldr	r3, [r2, #0]
 8006096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800609a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800609c:	9500      	str	r5, [sp, #0]
 800609e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a0:	2200      	movs	r2, #0
 80060a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060a6:	f7ff fec4 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 80060aa:	b168      	cbz	r0, 80060c8 <I2C_RequestMemoryRead+0x50>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80060b4:	f000 8089 	beq.w	80061ca <I2C_RequestMemoryRead+0x152>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060bc:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	b004      	add	sp, #16
 80060c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060c8:	b2f6      	uxtb	r6, r6
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 80060d0:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060d2:	462b      	mov	r3, r5
 80060d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060d6:	493f      	ldr	r1, [pc, #252]	; (80061d4 <I2C_RequestMemoryRead+0x15c>)
 80060d8:	4620      	mov	r0, r4
 80060da:	f7ff fee2 	bl	8005ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060de:	b108      	cbz	r0, 80060e4 <I2C_RequestMemoryRead+0x6c>
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e7ed      	b.n	80060c0 <I2C_RequestMemoryRead+0x48>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060e4:	2300      	movs	r3, #0
 80060e6:	9303      	str	r3, [sp, #12]
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	695a      	ldr	r2, [r3, #20]
 80060ec:	9203      	str	r2, [sp, #12]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	9303      	str	r3, [sp, #12]
 80060f2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060f4:	462a      	mov	r2, r5
 80060f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80060f8:	4620      	mov	r0, r4
 80060fa:	f7ff ff24 	bl	8005f46 <I2C_WaitOnTXEFlagUntilTimeout>
 80060fe:	b158      	cbz	r0, 8006118 <I2C_RequestMemoryRead+0xa0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006100:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006102:	2b04      	cmp	r3, #4
 8006104:	d001      	beq.n	800610a <I2C_RequestMemoryRead+0x92>
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e7da      	b.n	80060c0 <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	6813      	ldr	r3, [r2, #0]
 800610e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006112:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e7d3      	b.n	80060c0 <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006118:	f1b8 0f01 	cmp.w	r8, #1
 800611c:	d10d      	bne.n	800613a <I2C_RequestMemoryRead+0xc2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	b2ff      	uxtb	r7, r7
 8006122:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006124:	462a      	mov	r2, r5
 8006126:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006128:	4620      	mov	r0, r4
 800612a:	f7ff ff0c 	bl	8005f46 <I2C_WaitOnTXEFlagUntilTimeout>
 800612e:	b320      	cbz	r0, 800617a <I2C_RequestMemoryRead+0x102>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006130:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006132:	2b04      	cmp	r3, #4
 8006134:	d01a      	beq.n	800616c <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e7c2      	b.n	80060c0 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	0a3a      	lsrs	r2, r7, #8
 800613e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006140:	462a      	mov	r2, r5
 8006142:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006144:	4620      	mov	r0, r4
 8006146:	f7ff fefe 	bl	8005f46 <I2C_WaitOnTXEFlagUntilTimeout>
 800614a:	b158      	cbz	r0, 8006164 <I2C_RequestMemoryRead+0xec>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800614c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800614e:	2b04      	cmp	r3, #4
 8006150:	d001      	beq.n	8006156 <I2C_RequestMemoryRead+0xde>
      return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e7b4      	b.n	80060c0 <I2C_RequestMemoryRead+0x48>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006156:	6822      	ldr	r2, [r4, #0]
 8006158:	6813      	ldr	r3, [r2, #0]
 800615a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800615e:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e7ad      	b.n	80060c0 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	b2ff      	uxtb	r7, r7
 8006168:	611f      	str	r7, [r3, #16]
 800616a:	e7db      	b.n	8006124 <I2C_RequestMemoryRead+0xac>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616c:	6822      	ldr	r2, [r4, #0]
 800616e:	6813      	ldr	r3, [r2, #0]
 8006170:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006174:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e7a2      	b.n	80060c0 <I2C_RequestMemoryRead+0x48>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800617a:	6822      	ldr	r2, [r4, #0]
 800617c:	6813      	ldr	r3, [r2, #0]
 800617e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006182:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006184:	9500      	str	r5, [sp, #0]
 8006186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006188:	2200      	movs	r2, #0
 800618a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800618e:	4620      	mov	r0, r4
 8006190:	f7ff fe4f 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 8006194:	b148      	cbz	r0, 80061aa <I2C_RequestMemoryRead+0x132>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800619e:	d016      	beq.n	80061ce <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061a4:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e78a      	b.n	80060c0 <I2C_RequestMemoryRead+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	f046 0601 	orr.w	r6, r6, #1
 80061b0:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061b2:	462b      	mov	r3, r5
 80061b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061b6:	4907      	ldr	r1, [pc, #28]	; (80061d4 <I2C_RequestMemoryRead+0x15c>)
 80061b8:	4620      	mov	r0, r4
 80061ba:	f7ff fe72 	bl	8005ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2800      	cmp	r0, #0
 80061c2:	f43f af7d 	beq.w	80060c0 <I2C_RequestMemoryRead+0x48>
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e77a      	b.n	80060c0 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e778      	b.n	80060c0 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e776      	b.n	80060c0 <I2C_RequestMemoryRead+0x48>
 80061d2:	bf00      	nop
 80061d4:	00010002 	.word	0x00010002

080061d8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	4604      	mov	r4, r0
 80061dc:	460d      	mov	r5, r1
 80061de:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	f013 0f04 	tst.w	r3, #4
 80061e8:	d11c      	bne.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061ea:	4620      	mov	r0, r4
 80061ec:	f7ff fe08 	bl	8005e00 <I2C_IsAcknowledgeFailed>
 80061f0:	b9d0      	cbnz	r0, 8006228 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80061f2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80061f6:	d0f3      	beq.n	80061e0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f8:	f7ff f8a0 	bl	800533c <HAL_GetTick>
 80061fc:	1b80      	subs	r0, r0, r6
 80061fe:	42a8      	cmp	r0, r5
 8006200:	d801      	bhi.n	8006206 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8006202:	2d00      	cmp	r5, #0
 8006204:	d1ec      	bne.n	80061e0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006206:	2300      	movs	r3, #0
 8006208:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800620a:	2220      	movs	r2, #32
 800620c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006210:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006214:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006216:	f042 0220 	orr.w	r2, r2, #32
 800621a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800621c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8006220:	2001      	movs	r0, #1
 8006222:	e000      	b.n	8006226 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8006224:	2000      	movs	r0, #0
}
 8006226:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006228:	2001      	movs	r0, #1
 800622a:	e7fc      	b.n	8006226 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

0800622c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	4605      	mov	r5, r0
 8006230:	460c      	mov	r4, r1
 8006232:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	695a      	ldr	r2, [r3, #20]
 8006238:	f012 0f40 	tst.w	r2, #64	; 0x40
 800623c:	d129      	bne.n	8006292 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800623e:	695a      	ldr	r2, [r3, #20]
 8006240:	f012 0f10 	tst.w	r2, #16
 8006244:	d115      	bne.n	8006272 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006246:	f7ff f879 	bl	800533c <HAL_GetTick>
 800624a:	1b80      	subs	r0, r0, r6
 800624c:	42a0      	cmp	r0, r4
 800624e:	d801      	bhi.n	8006254 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8006250:	2c00      	cmp	r4, #0
 8006252:	d1ef      	bne.n	8006234 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006254:	2300      	movs	r3, #0
 8006256:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006258:	2220      	movs	r2, #32
 800625a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800625e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006262:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8006264:	f042 0220 	orr.w	r2, r2, #32
 8006268:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800626a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800626e:	2001      	movs	r0, #1
}
 8006270:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006272:	f06f 0210 	mvn.w	r2, #16
 8006276:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006278:	2300      	movs	r3, #0
 800627a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800627c:	2220      	movs	r2, #32
 800627e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006282:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006286:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8006288:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800628a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800628e:	2001      	movs	r0, #1
 8006290:	e7ee      	b.n	8006270 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8006292:	2000      	movs	r0, #0
 8006294:	e7ec      	b.n	8006270 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08006298 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006298:	2800      	cmp	r0, #0
 800629a:	f000 80c8 	beq.w	800642e <HAL_I2C_Init+0x196>
{
 800629e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d075      	beq.n	8006396 <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80062aa:	2324      	movs	r3, #36	; 0x24
 80062ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80062b0:	6822      	ldr	r2, [r4, #0]
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	f023 0301 	bic.w	r3, r3, #1
 80062b8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80062ba:	6822      	ldr	r2, [r4, #0]
 80062bc:	6813      	ldr	r3, [r2, #0]
 80062be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062c4:	6822      	ldr	r2, [r4, #0]
 80062c6:	6813      	ldr	r3, [r2, #0]
 80062c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062cc:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062ce:	f000 fea7 	bl	8007020 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062d2:	6862      	ldr	r2, [r4, #4]
 80062d4:	4b58      	ldr	r3, [pc, #352]	; (8006438 <HAL_I2C_Init+0x1a0>)
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d862      	bhi.n	80063a0 <HAL_I2C_Init+0x108>
 80062da:	4b58      	ldr	r3, [pc, #352]	; (800643c <HAL_I2C_Init+0x1a4>)
 80062dc:	4298      	cmp	r0, r3
 80062de:	bf8c      	ite	hi
 80062e0:	2300      	movhi	r3, #0
 80062e2:	2301      	movls	r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f040 80a4 	bne.w	8006432 <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 80062ea:	4b55      	ldr	r3, [pc, #340]	; (8006440 <HAL_I2C_Init+0x1a8>)
 80062ec:	fba3 2300 	umull	r2, r3, r3, r0
 80062f0:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062f2:	6821      	ldr	r1, [r4, #0]
 80062f4:	684a      	ldr	r2, [r1, #4]
 80062f6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80062fa:	431a      	orrs	r2, r3
 80062fc:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062fe:	6825      	ldr	r5, [r4, #0]
 8006300:	6a2a      	ldr	r2, [r5, #32]
 8006302:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006306:	6866      	ldr	r6, [r4, #4]
 8006308:	494b      	ldr	r1, [pc, #300]	; (8006438 <HAL_I2C_Init+0x1a0>)
 800630a:	428e      	cmp	r6, r1
 800630c:	d84e      	bhi.n	80063ac <HAL_I2C_Init+0x114>
 800630e:	3301      	adds	r3, #1
 8006310:	4313      	orrs	r3, r2
 8006312:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006314:	6825      	ldr	r5, [r4, #0]
 8006316:	69e9      	ldr	r1, [r5, #28]
 8006318:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800631c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006320:	6863      	ldr	r3, [r4, #4]
 8006322:	4a45      	ldr	r2, [pc, #276]	; (8006438 <HAL_I2C_Init+0x1a0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d84b      	bhi.n	80063c0 <HAL_I2C_Init+0x128>
 8006328:	3801      	subs	r0, #1
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006330:	3301      	adds	r3, #1
 8006332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006336:	2b04      	cmp	r3, #4
 8006338:	bf38      	it	cc
 800633a:	2304      	movcc	r3, #4
 800633c:	430b      	orrs	r3, r1
 800633e:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006340:	6821      	ldr	r1, [r4, #0]
 8006342:	680b      	ldr	r3, [r1, #0]
 8006344:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006348:	69e2      	ldr	r2, [r4, #28]
 800634a:	6a20      	ldr	r0, [r4, #32]
 800634c:	4302      	orrs	r2, r0
 800634e:	4313      	orrs	r3, r2
 8006350:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006352:	6821      	ldr	r1, [r4, #0]
 8006354:	688b      	ldr	r3, [r1, #8]
 8006356:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800635a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800635e:	6922      	ldr	r2, [r4, #16]
 8006360:	68e0      	ldr	r0, [r4, #12]
 8006362:	4302      	orrs	r2, r0
 8006364:	4313      	orrs	r3, r2
 8006366:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006368:	6821      	ldr	r1, [r4, #0]
 800636a:	68cb      	ldr	r3, [r1, #12]
 800636c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006370:	6962      	ldr	r2, [r4, #20]
 8006372:	69a0      	ldr	r0, [r4, #24]
 8006374:	4302      	orrs	r2, r0
 8006376:	4313      	orrs	r3, r2
 8006378:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800637a:	6822      	ldr	r2, [r4, #0]
 800637c:	6813      	ldr	r3, [r2, #0]
 800637e:	f043 0301 	orr.w	r3, r3, #1
 8006382:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006384:	2000      	movs	r0, #0
 8006386:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006388:	2320      	movs	r3, #32
 800638a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800638e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006390:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8006394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006396:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800639a:	f7fe f8c7 	bl	800452c <HAL_I2C_MspInit>
 800639e:	e784      	b.n	80062aa <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063a0:	4b28      	ldr	r3, [pc, #160]	; (8006444 <HAL_I2C_Init+0x1ac>)
 80063a2:	4298      	cmp	r0, r3
 80063a4:	bf8c      	ite	hi
 80063a6:	2300      	movhi	r3, #0
 80063a8:	2301      	movls	r3, #1
 80063aa:	e79b      	b.n	80062e4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063ac:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80063b0:	fb01 f303 	mul.w	r3, r1, r3
 80063b4:	4924      	ldr	r1, [pc, #144]	; (8006448 <HAL_I2C_Init+0x1b0>)
 80063b6:	fba1 1303 	umull	r1, r3, r1, r3
 80063ba:	099b      	lsrs	r3, r3, #6
 80063bc:	3301      	adds	r3, #1
 80063be:	e7a7      	b.n	8006310 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063c0:	68a2      	ldr	r2, [r4, #8]
 80063c2:	b9ba      	cbnz	r2, 80063f4 <HAL_I2C_Init+0x15c>
 80063c4:	1e46      	subs	r6, r0, #1
 80063c6:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80063ca:	fbb6 f6f7 	udiv	r6, r6, r7
 80063ce:	3601      	adds	r6, #1
 80063d0:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80063d4:	fab6 f686 	clz	r6, r6
 80063d8:	0976      	lsrs	r6, r6, #5
 80063da:	bb36      	cbnz	r6, 800642a <HAL_I2C_Init+0x192>
 80063dc:	b9c2      	cbnz	r2, 8006410 <HAL_I2C_Init+0x178>
 80063de:	3801      	subs	r0, #1
 80063e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80063e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80063e8:	3301      	adds	r3, #1
 80063ea:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80063ee:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80063f2:	e7a3      	b.n	800633c <HAL_I2C_Init+0xa4>
 80063f4:	1e46      	subs	r6, r0, #1
 80063f6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80063fa:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80063fe:	fbb6 f6f7 	udiv	r6, r6, r7
 8006402:	3601      	adds	r6, #1
 8006404:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8006408:	fab6 f686 	clz	r6, r6
 800640c:	0976      	lsrs	r6, r6, #5
 800640e:	e7e4      	b.n	80063da <HAL_I2C_Init+0x142>
 8006410:	3801      	subs	r0, #1
 8006412:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006416:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800641a:	fbb0 f2f3 	udiv	r2, r0, r3
 800641e:	3201      	adds	r2, #1
 8006420:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006424:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8006428:	e788      	b.n	800633c <HAL_I2C_Init+0xa4>
 800642a:	2301      	movs	r3, #1
 800642c:	e786      	b.n	800633c <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 800642e:	2001      	movs	r0, #1
}
 8006430:	4770      	bx	lr
    return HAL_ERROR;
 8006432:	2001      	movs	r0, #1
 8006434:	e7ae      	b.n	8006394 <HAL_I2C_Init+0xfc>
 8006436:	bf00      	nop
 8006438:	000186a0 	.word	0x000186a0
 800643c:	001e847f 	.word	0x001e847f
 8006440:	431bde83 	.word	0x431bde83
 8006444:	003d08ff 	.word	0x003d08ff
 8006448:	10624dd3 	.word	0x10624dd3

0800644c <HAL_I2C_Mem_Write>:
{
 800644c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006450:	b082      	sub	sp, #8
 8006452:	4604      	mov	r4, r0
 8006454:	460e      	mov	r6, r1
 8006456:	4617      	mov	r7, r2
 8006458:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 800645a:	f7fe ff6f 	bl	800533c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800645e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b20      	cmp	r3, #32
 8006466:	d004      	beq.n	8006472 <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 8006468:	2302      	movs	r3, #2
}
 800646a:	4618      	mov	r0, r3
 800646c:	b002      	add	sp, #8
 800646e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006472:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006474:	9000      	str	r0, [sp, #0]
 8006476:	2319      	movs	r3, #25
 8006478:	2201      	movs	r2, #1
 800647a:	494c      	ldr	r1, [pc, #304]	; (80065ac <HAL_I2C_Mem_Write+0x160>)
 800647c:	4620      	mov	r0, r4
 800647e:	f7ff fcd8 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 8006482:	2800      	cmp	r0, #0
 8006484:	f040 808b 	bne.w	800659e <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8006488:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800648c:	2b01      	cmp	r3, #1
 800648e:	f000 8088 	beq.w	80065a2 <HAL_I2C_Mem_Write+0x156>
 8006492:	2301      	movs	r3, #1
 8006494:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	f012 0f01 	tst.w	r2, #1
 80064a0:	d103      	bne.n	80064aa <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	f042 0201 	orr.w	r2, r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064aa:	6822      	ldr	r2, [r4, #0]
 80064ac:	6813      	ldr	r3, [r2, #0]
 80064ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064b2:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064b4:	2321      	movs	r3, #33	; 0x21
 80064b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064ba:	2340      	movs	r3, #64	; 0x40
 80064bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80064c4:	9b08      	ldr	r3, [sp, #32]
 80064c6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064c8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80064cc:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80064d0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064d2:	4b37      	ldr	r3, [pc, #220]	; (80065b0 <HAL_I2C_Mem_Write+0x164>)
 80064d4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064d6:	9501      	str	r5, [sp, #4]
 80064d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	4643      	mov	r3, r8
 80064de:	463a      	mov	r2, r7
 80064e0:	4631      	mov	r1, r6
 80064e2:	4620      	mov	r0, r4
 80064e4:	f7ff fd5a 	bl	8005f9c <I2C_RequestMemoryWrite>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d15c      	bne.n	80065a6 <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 80064ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d034      	beq.n	800655c <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064f2:	462a      	mov	r2, r5
 80064f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064f6:	4620      	mov	r0, r4
 80064f8:	f7ff fd25 	bl	8005f46 <I2C_WaitOnTXEFlagUntilTimeout>
 80064fc:	bb10      	cbnz	r0, 8006544 <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	7812      	ldrb	r2, [r2, #0]
 8006504:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006506:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006508:	1c4b      	adds	r3, r1, #1
 800650a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800650c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800650e:	3b01      	subs	r3, #1
 8006510:	b29b      	uxth	r3, r3
 8006512:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006514:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006516:	3a01      	subs	r2, #1
 8006518:	b292      	uxth	r2, r2
 800651a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800651c:	6822      	ldr	r2, [r4, #0]
 800651e:	6950      	ldr	r0, [r2, #20]
 8006520:	f010 0f04 	tst.w	r0, #4
 8006524:	d0e2      	beq.n	80064ec <HAL_I2C_Mem_Write+0xa0>
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0e0      	beq.n	80064ec <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800652a:	784b      	ldrb	r3, [r1, #1]
 800652c:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800652e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006530:	3301      	adds	r3, #1
 8006532:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006534:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006536:	3b01      	subs	r3, #1
 8006538:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800653a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800653c:	3b01      	subs	r3, #1
 800653e:	b29b      	uxth	r3, r3
 8006540:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006542:	e7d3      	b.n	80064ec <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006544:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006546:	2b04      	cmp	r3, #4
 8006548:	d001      	beq.n	800654e <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e78d      	b.n	800646a <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800654e:	6822      	ldr	r2, [r4, #0]
 8006550:	6813      	ldr	r3, [r2, #0]
 8006552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006556:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e786      	b.n	800646a <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800655c:	462a      	mov	r2, r5
 800655e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006560:	4620      	mov	r0, r4
 8006562:	f7ff fe39 	bl	80061d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8006566:	4603      	mov	r3, r0
 8006568:	b158      	cbz	r0, 8006582 <HAL_I2C_Mem_Write+0x136>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800656a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800656c:	2b04      	cmp	r3, #4
 800656e:	d001      	beq.n	8006574 <HAL_I2C_Mem_Write+0x128>
      return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e77a      	b.n	800646a <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006574:	6822      	ldr	r2, [r4, #0]
 8006576:	6813      	ldr	r3, [r2, #0]
 8006578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800657c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e773      	b.n	800646a <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006582:	6821      	ldr	r1, [r4, #0]
 8006584:	680a      	ldr	r2, [r1, #0]
 8006586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800658a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800658c:	2220      	movs	r2, #32
 800658e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006592:	2200      	movs	r2, #0
 8006594:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8006598:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 800659c:	e765      	b.n	800646a <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 800659e:	2302      	movs	r3, #2
 80065a0:	e763      	b.n	800646a <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 80065a2:	2302      	movs	r3, #2
 80065a4:	e761      	b.n	800646a <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e75f      	b.n	800646a <HAL_I2C_Mem_Write+0x1e>
 80065aa:	bf00      	nop
 80065ac:	00100002 	.word	0x00100002
 80065b0:	ffff0000 	.word	0xffff0000

080065b4 <HAL_I2C_Mem_Read>:
{
 80065b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b8:	b086      	sub	sp, #24
 80065ba:	4604      	mov	r4, r0
 80065bc:	460e      	mov	r6, r1
 80065be:	4617      	mov	r7, r2
 80065c0:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 80065c2:	f7fe febb 	bl	800533c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80065c6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d004      	beq.n	80065da <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 80065d0:	2602      	movs	r6, #2
}
 80065d2:	4630      	mov	r0, r6
 80065d4:	b006      	add	sp, #24
 80065d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065da:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065dc:	9000      	str	r0, [sp, #0]
 80065de:	2319      	movs	r3, #25
 80065e0:	2201      	movs	r2, #1
 80065e2:	499e      	ldr	r1, [pc, #632]	; (800685c <HAL_I2C_Mem_Read+0x2a8>)
 80065e4:	4620      	mov	r0, r4
 80065e6:	f7ff fc24 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f040 8134 	bne.w	8006858 <HAL_I2C_Mem_Read+0x2a4>
    __HAL_LOCK(hi2c);
 80065f0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	f000 8137 	beq.w	8006868 <HAL_I2C_Mem_Read+0x2b4>
 80065fa:	2301      	movs	r3, #1
 80065fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	f012 0f01 	tst.w	r2, #1
 8006608:	d103      	bne.n	8006612 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	f042 0201 	orr.w	r2, r2, #1
 8006610:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006612:	6822      	ldr	r2, [r4, #0]
 8006614:	6813      	ldr	r3, [r2, #0]
 8006616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800661a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800661c:	2322      	movs	r3, #34	; 0x22
 800661e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006622:	2340      	movs	r3, #64	; 0x40
 8006624:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006628:	2300      	movs	r3, #0
 800662a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800662c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800662e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006630:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8006634:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006636:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006638:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800663a:	4b89      	ldr	r3, [pc, #548]	; (8006860 <HAL_I2C_Mem_Read+0x2ac>)
 800663c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800663e:	9501      	str	r5, [sp, #4]
 8006640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	4643      	mov	r3, r8
 8006646:	463a      	mov	r2, r7
 8006648:	4631      	mov	r1, r6
 800664a:	4620      	mov	r0, r4
 800664c:	f7ff fd14 	bl	8006078 <I2C_RequestMemoryRead>
 8006650:	4606      	mov	r6, r0
 8006652:	2800      	cmp	r0, #0
 8006654:	f040 810a 	bne.w	800686c <HAL_I2C_Mem_Read+0x2b8>
    if (hi2c->XferSize == 0U)
 8006658:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800665a:	b95b      	cbnz	r3, 8006674 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800665c:	9302      	str	r3, [sp, #8]
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	695a      	ldr	r2, [r3, #20]
 8006662:	9202      	str	r2, [sp, #8]
 8006664:	699a      	ldr	r2, [r3, #24]
 8006666:	9202      	str	r2, [sp, #8]
 8006668:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	e072      	b.n	800675a <HAL_I2C_Mem_Read+0x1a6>
    else if (hi2c->XferSize == 1U)
 8006674:	2b01      	cmp	r3, #1
 8006676:	d00a      	beq.n	800668e <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8006678:	2b02      	cmp	r3, #2
 800667a:	d01a      	beq.n	80066b2 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800667c:	2300      	movs	r3, #0
 800667e:	9305      	str	r3, [sp, #20]
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	695a      	ldr	r2, [r3, #20]
 8006684:	9205      	str	r2, [sp, #20]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	9305      	str	r3, [sp, #20]
 800668a:	9b05      	ldr	r3, [sp, #20]
 800668c:	e065      	b.n	800675a <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800668e:	6822      	ldr	r2, [r4, #0]
 8006690:	6813      	ldr	r3, [r2, #0]
 8006692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006696:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006698:	2300      	movs	r3, #0
 800669a:	9303      	str	r3, [sp, #12]
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	695a      	ldr	r2, [r3, #20]
 80066a0:	9203      	str	r2, [sp, #12]
 80066a2:	699a      	ldr	r2, [r3, #24]
 80066a4:	9203      	str	r2, [sp, #12]
 80066a6:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	e053      	b.n	800675a <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066b2:	6822      	ldr	r2, [r4, #0]
 80066b4:	6813      	ldr	r3, [r2, #0]
 80066b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066ba:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066bc:	6822      	ldr	r2, [r4, #0]
 80066be:	6813      	ldr	r3, [r2, #0]
 80066c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80066c4:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066c6:	2300      	movs	r3, #0
 80066c8:	9304      	str	r3, [sp, #16]
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	9204      	str	r2, [sp, #16]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	9304      	str	r3, [sp, #16]
 80066d4:	9b04      	ldr	r3, [sp, #16]
 80066d6:	e040      	b.n	800675a <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066d8:	462a      	mov	r2, r5
 80066da:	990e      	ldr	r1, [sp, #56]	; 0x38
 80066dc:	4620      	mov	r0, r4
 80066de:	f7ff fda5 	bl	800622c <I2C_WaitOnRXNEFlagUntilTimeout>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	f040 80c4 	bne.w	8006870 <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066ee:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80066f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066f2:	3301      	adds	r3, #1
 80066f4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80066f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80066f8:	3b01      	subs	r3, #1
 80066fa:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80066fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066fe:	3b01      	subs	r3, #1
 8006700:	b29b      	uxth	r3, r3
 8006702:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006704:	e029      	b.n	800675a <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006706:	9500      	str	r5, [sp, #0]
 8006708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800670a:	2200      	movs	r2, #0
 800670c:	4955      	ldr	r1, [pc, #340]	; (8006864 <HAL_I2C_Mem_Read+0x2b0>)
 800670e:	4620      	mov	r0, r4
 8006710:	f7ff fb8f 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 8006714:	2800      	cmp	r0, #0
 8006716:	f040 80ad 	bne.w	8006874 <HAL_I2C_Mem_Read+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800671a:	6822      	ldr	r2, [r4, #0]
 800671c:	6813      	ldr	r3, [r2, #0]
 800671e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006722:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800672a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800672c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800672e:	1c53      	adds	r3, r2, #1
 8006730:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006732:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006734:	3b01      	subs	r3, #1
 8006736:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006738:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800673a:	3b01      	subs	r3, #1
 800673c:	b29b      	uxth	r3, r3
 800673e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006748:	3301      	adds	r3, #1
 800674a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800674c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800674e:	3b01      	subs	r3, #1
 8006750:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006752:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006754:	3b01      	subs	r3, #1
 8006756:	b29b      	uxth	r3, r3
 8006758:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800675a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800675c:	2b00      	cmp	r3, #0
 800675e:	d072      	beq.n	8006846 <HAL_I2C_Mem_Read+0x292>
      if (hi2c->XferSize <= 3U)
 8006760:	2b03      	cmp	r3, #3
 8006762:	d849      	bhi.n	80067f8 <HAL_I2C_Mem_Read+0x244>
        if (hi2c->XferSize == 1U)
 8006764:	2b01      	cmp	r3, #1
 8006766:	d0b7      	beq.n	80066d8 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8006768:	2b02      	cmp	r3, #2
 800676a:	d0cc      	beq.n	8006706 <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800676c:	9500      	str	r5, [sp, #0]
 800676e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006770:	2200      	movs	r2, #0
 8006772:	493c      	ldr	r1, [pc, #240]	; (8006864 <HAL_I2C_Mem_Read+0x2b0>)
 8006774:	4620      	mov	r0, r4
 8006776:	f7ff fb5c 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 800677a:	2800      	cmp	r0, #0
 800677c:	d17c      	bne.n	8006878 <HAL_I2C_Mem_Read+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	6813      	ldr	r3, [r2, #0]
 8006782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006786:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	691a      	ldr	r2, [r3, #16]
 800678c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800678e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006792:	3301      	adds	r3, #1
 8006794:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006796:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006798:	3b01      	subs	r3, #1
 800679a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800679c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800679e:	3b01      	subs	r3, #1
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067a4:	9500      	str	r5, [sp, #0]
 80067a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067a8:	2200      	movs	r2, #0
 80067aa:	492e      	ldr	r1, [pc, #184]	; (8006864 <HAL_I2C_Mem_Read+0x2b0>)
 80067ac:	4620      	mov	r0, r4
 80067ae:	f7ff fb40 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d162      	bne.n	800687c <HAL_I2C_Mem_Read+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b6:	6822      	ldr	r2, [r4, #0]
 80067b8:	6813      	ldr	r3, [r2, #0]
 80067ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067be:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067c6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80067c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067ca:	1c53      	adds	r3, r2, #1
 80067cc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80067ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80067d0:	3b01      	subs	r3, #1
 80067d2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80067d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29b      	uxth	r3, r3
 80067da:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80067e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067e4:	3301      	adds	r3, #1
 80067e6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80067e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80067ea:	3b01      	subs	r3, #1
 80067ec:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80067ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80067f6:	e7b0      	b.n	800675a <HAL_I2C_Mem_Read+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067f8:	462a      	mov	r2, r5
 80067fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80067fc:	4620      	mov	r0, r4
 80067fe:	f7ff fd15 	bl	800622c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006802:	2800      	cmp	r0, #0
 8006804:	d13c      	bne.n	8006880 <HAL_I2C_Mem_Read+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	691a      	ldr	r2, [r3, #16]
 800680a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800680c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800680e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006810:	1c53      	adds	r3, r2, #1
 8006812:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006814:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006816:	3b01      	subs	r3, #1
 8006818:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800681a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800681c:	3b01      	subs	r3, #1
 800681e:	b29b      	uxth	r3, r3
 8006820:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	6959      	ldr	r1, [r3, #20]
 8006826:	f011 0f04 	tst.w	r1, #4
 800682a:	d096      	beq.n	800675a <HAL_I2C_Mem_Read+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006830:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006832:	3301      	adds	r3, #1
 8006834:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006836:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006838:	3b01      	subs	r3, #1
 800683a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800683c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800683e:	3b01      	subs	r3, #1
 8006840:	b29b      	uxth	r3, r3
 8006842:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006844:	e789      	b.n	800675a <HAL_I2C_Mem_Read+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006846:	2320      	movs	r3, #32
 8006848:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800684c:	2300      	movs	r3, #0
 800684e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8006852:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8006856:	e6bc      	b.n	80065d2 <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 8006858:	2602      	movs	r6, #2
 800685a:	e6ba      	b.n	80065d2 <HAL_I2C_Mem_Read+0x1e>
 800685c:	00100002 	.word	0x00100002
 8006860:	ffff0000 	.word	0xffff0000
 8006864:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 8006868:	2602      	movs	r6, #2
 800686a:	e6b2      	b.n	80065d2 <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 800686c:	2601      	movs	r6, #1
 800686e:	e6b0      	b.n	80065d2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8006870:	2601      	movs	r6, #1
 8006872:	e6ae      	b.n	80065d2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8006874:	2601      	movs	r6, #1
 8006876:	e6ac      	b.n	80065d2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8006878:	2601      	movs	r6, #1
 800687a:	e6aa      	b.n	80065d2 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 800687c:	2601      	movs	r6, #1
 800687e:	e6a8      	b.n	80065d2 <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 8006880:	2601      	movs	r6, #1
 8006882:	e6a6      	b.n	80065d2 <HAL_I2C_Mem_Read+0x1e>

08006884 <HAL_I2C_IsDeviceReady>:
{
 8006884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006888:	b085      	sub	sp, #20
 800688a:	4604      	mov	r4, r0
 800688c:	4688      	mov	r8, r1
 800688e:	4691      	mov	r9, r2
 8006890:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8006892:	f7fe fd53 	bl	800533c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006896:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b20      	cmp	r3, #32
 800689e:	d004      	beq.n	80068aa <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 80068a0:	2302      	movs	r3, #2
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	b005      	add	sp, #20
 80068a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068aa:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068ac:	9000      	str	r0, [sp, #0]
 80068ae:	2319      	movs	r3, #25
 80068b0:	2201      	movs	r2, #1
 80068b2:	4959      	ldr	r1, [pc, #356]	; (8006a18 <HAL_I2C_IsDeviceReady+0x194>)
 80068b4:	4620      	mov	r0, r4
 80068b6:	f7ff fabc 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	f040 80a1 	bne.w	8006a02 <HAL_I2C_IsDeviceReady+0x17e>
    __HAL_LOCK(hi2c);
 80068c0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	f000 809e 	beq.w	8006a06 <HAL_I2C_IsDeviceReady+0x182>
 80068ca:	2301      	movs	r3, #1
 80068cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	f012 0f01 	tst.w	r2, #1
 80068d8:	d103      	bne.n	80068e2 <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	f042 0201 	orr.w	r2, r2, #1
 80068e0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068e2:	6822      	ldr	r2, [r4, #0]
 80068e4:	6813      	ldr	r3, [r2, #0]
 80068e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068ea:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80068ec:	2324      	movs	r3, #36	; 0x24
 80068ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068f2:	2300      	movs	r3, #0
 80068f4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068f6:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80068fa:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 80068fc:	2701      	movs	r7, #1
 80068fe:	e03e      	b.n	800697e <HAL_I2C_IsDeviceReady+0xfa>
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006908:	d07f      	beq.n	8006a0a <HAL_I2C_IsDeviceReady+0x186>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800690a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800690e:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e7c6      	b.n	80068a2 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006914:	23a0      	movs	r3, #160	; 0xa0
 8006916:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	695a      	ldr	r2, [r3, #20]
 800691e:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006922:	6959      	ldr	r1, [r3, #20]
 8006924:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006928:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2ba0      	cmp	r3, #160	; 0xa0
 8006930:	d009      	beq.n	8006946 <HAL_I2C_IsDeviceReady+0xc2>
 8006932:	b942      	cbnz	r2, 8006946 <HAL_I2C_IsDeviceReady+0xc2>
 8006934:	b939      	cbnz	r1, 8006946 <HAL_I2C_IsDeviceReady+0xc2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006936:	f7fe fd01 	bl	800533c <HAL_GetTick>
 800693a:	1b80      	subs	r0, r0, r6
 800693c:	42a8      	cmp	r0, r5
 800693e:	d8e9      	bhi.n	8006914 <HAL_I2C_IsDeviceReady+0x90>
 8006940:	2d00      	cmp	r5, #0
 8006942:	d1ea      	bne.n	800691a <HAL_I2C_IsDeviceReady+0x96>
 8006944:	e7e6      	b.n	8006914 <HAL_I2C_IsDeviceReady+0x90>
      hi2c->State = HAL_I2C_STATE_READY;
 8006946:	2320      	movs	r3, #32
 8006948:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	695a      	ldr	r2, [r3, #20]
 8006950:	f012 0f02 	tst.w	r2, #2
 8006954:	d131      	bne.n	80069ba <HAL_I2C_IsDeviceReady+0x136>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800695c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006964:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006966:	9600      	str	r6, [sp, #0]
 8006968:	2319      	movs	r3, #25
 800696a:	2201      	movs	r2, #1
 800696c:	492a      	ldr	r1, [pc, #168]	; (8006a18 <HAL_I2C_IsDeviceReady+0x194>)
 800696e:	4620      	mov	r0, r4
 8006970:	f7ff fa5f 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 8006974:	2800      	cmp	r0, #0
 8006976:	d14c      	bne.n	8006a12 <HAL_I2C_IsDeviceReady+0x18e>
      I2C_Trials++;
 8006978:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 800697a:	454f      	cmp	r7, r9
 800697c:	d239      	bcs.n	80069f2 <HAL_I2C_IsDeviceReady+0x16e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800697e:	6822      	ldr	r2, [r4, #0]
 8006980:	6813      	ldr	r3, [r2, #0]
 8006982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006986:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006988:	9600      	str	r6, [sp, #0]
 800698a:	462b      	mov	r3, r5
 800698c:	2200      	movs	r2, #0
 800698e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006992:	4620      	mov	r0, r4
 8006994:	f7ff fa4d 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 8006998:	2800      	cmp	r0, #0
 800699a:	d1b1      	bne.n	8006900 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 80069a2:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80069a4:	f7fe fcca 	bl	800533c <HAL_GetTick>
 80069a8:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	695a      	ldr	r2, [r3, #20]
 80069ae:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80069b2:	6959      	ldr	r1, [r3, #20]
 80069b4:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80069b8:	e7b6      	b.n	8006928 <HAL_I2C_IsDeviceReady+0xa4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069c0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069c2:	2300      	movs	r3, #0
 80069c4:	9303      	str	r3, [sp, #12]
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	695a      	ldr	r2, [r3, #20]
 80069ca:	9203      	str	r2, [sp, #12]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	9303      	str	r3, [sp, #12]
 80069d0:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069d2:	9600      	str	r6, [sp, #0]
 80069d4:	2319      	movs	r3, #25
 80069d6:	2201      	movs	r2, #1
 80069d8:	490f      	ldr	r1, [pc, #60]	; (8006a18 <HAL_I2C_IsDeviceReady+0x194>)
 80069da:	4620      	mov	r0, r4
 80069dc:	f7ff fa29 	bl	8005e32 <I2C_WaitOnFlagUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	b9a0      	cbnz	r0, 8006a0e <HAL_I2C_IsDeviceReady+0x18a>
        hi2c->State = HAL_I2C_STATE_READY;
 80069e4:	2220      	movs	r2, #32
 80069e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80069ea:	2200      	movs	r2, #0
 80069ec:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 80069f0:	e757      	b.n	80068a2 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80069f2:	2320      	movs	r3, #32
 80069f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80069f8:	2300      	movs	r3, #0
 80069fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e74f      	b.n	80068a2 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8006a02:	2302      	movs	r3, #2
 8006a04:	e74d      	b.n	80068a2 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8006a06:	2302      	movs	r3, #2
 8006a08:	e74b      	b.n	80068a2 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e749      	b.n	80068a2 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e747      	b.n	80068a2 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e745      	b.n	80068a2 <HAL_I2C_IsDeviceReady+0x1e>
 8006a16:	bf00      	nop
 8006a18:	00100002 	.word	0x00100002

08006a1c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	f000 81e0 	beq.w	8006de2 <HAL_RCC_OscConfig+0x3c6>
{
 8006a22:	b570      	push	{r4, r5, r6, lr}
 8006a24:	b082      	sub	sp, #8
 8006a26:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a28:	6803      	ldr	r3, [r0, #0]
 8006a2a:	f013 0f01 	tst.w	r3, #1
 8006a2e:	d03b      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a30:	4ba5      	ldr	r3, [pc, #660]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 030c 	and.w	r3, r3, #12
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d02c      	beq.n	8006a96 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a3c:	4ba2      	ldr	r3, [pc, #648]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a44:	2b08      	cmp	r3, #8
 8006a46:	d021      	beq.n	8006a8c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a48:	6863      	ldr	r3, [r4, #4]
 8006a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a4e:	d04f      	beq.n	8006af0 <HAL_RCC_OscConfig+0xd4>
 8006a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a54:	d052      	beq.n	8006afc <HAL_RCC_OscConfig+0xe0>
 8006a56:	4b9c      	ldr	r3, [pc, #624]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a68:	6863      	ldr	r3, [r4, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d050      	beq.n	8006b10 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a6e:	f7fe fc65 	bl	800533c <HAL_GetTick>
 8006a72:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a74:	4b94      	ldr	r3, [pc, #592]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006a7c:	d114      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a7e:	f7fe fc5d 	bl	800533c <HAL_GetTick>
 8006a82:	1b40      	subs	r0, r0, r5
 8006a84:	2864      	cmp	r0, #100	; 0x64
 8006a86:	d9f5      	bls.n	8006a74 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8006a88:	2003      	movs	r0, #3
 8006a8a:	e1af      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a8c:	4b8e      	ldr	r3, [pc, #568]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006a94:	d0d8      	beq.n	8006a48 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a96:	4b8c      	ldr	r3, [pc, #560]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006a9e:	d003      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x8c>
 8006aa0:	6863      	ldr	r3, [r4, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 819f 	beq.w	8006de6 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	f013 0f02 	tst.w	r3, #2
 8006aae:	d055      	beq.n	8006b5c <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ab0:	4b85      	ldr	r3, [pc, #532]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f013 0f0c 	tst.w	r3, #12
 8006ab8:	d03e      	beq.n	8006b38 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aba:	4b83      	ldr	r3, [pc, #524]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ac2:	2b08      	cmp	r3, #8
 8006ac4:	d033      	beq.n	8006b2e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ac6:	68e3      	ldr	r3, [r4, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d068      	beq.n	8006b9e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006acc:	4b7f      	ldr	r3, [pc, #508]	; (8006ccc <HAL_RCC_OscConfig+0x2b0>)
 8006ace:	2201      	movs	r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad2:	f7fe fc33 	bl	800533c <HAL_GetTick>
 8006ad6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ad8:	4b7b      	ldr	r3, [pc, #492]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f013 0f02 	tst.w	r3, #2
 8006ae0:	d154      	bne.n	8006b8c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ae2:	f7fe fc2b 	bl	800533c <HAL_GetTick>
 8006ae6:	1b40      	subs	r0, r0, r5
 8006ae8:	2802      	cmp	r0, #2
 8006aea:	d9f5      	bls.n	8006ad8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8006aec:	2003      	movs	r0, #3
 8006aee:	e17d      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006af0:	4a75      	ldr	r2, [pc, #468]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006af2:	6813      	ldr	r3, [r2, #0]
 8006af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	e7b5      	b.n	8006a68 <HAL_RCC_OscConfig+0x4c>
 8006afc:	4b72      	ldr	r3, [pc, #456]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	e7ab      	b.n	8006a68 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8006b10:	f7fe fc14 	bl	800533c <HAL_GetTick>
 8006b14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b16:	4b6c      	ldr	r3, [pc, #432]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006b1e:	d0c3      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b20:	f7fe fc0c 	bl	800533c <HAL_GetTick>
 8006b24:	1b40      	subs	r0, r0, r5
 8006b26:	2864      	cmp	r0, #100	; 0x64
 8006b28:	d9f5      	bls.n	8006b16 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8006b2a:	2003      	movs	r0, #3
 8006b2c:	e15e      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b2e:	4b66      	ldr	r3, [pc, #408]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006b36:	d1c6      	bne.n	8006ac6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b38:	4b63      	ldr	r3, [pc, #396]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f013 0f02 	tst.w	r3, #2
 8006b40:	d004      	beq.n	8006b4c <HAL_RCC_OscConfig+0x130>
 8006b42:	68e3      	ldr	r3, [r4, #12]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d001      	beq.n	8006b4c <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8006b48:	2001      	movs	r0, #1
 8006b4a:	e14f      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b4c:	4a5e      	ldr	r2, [pc, #376]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006b4e:	6813      	ldr	r3, [r2, #0]
 8006b50:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006b54:	6921      	ldr	r1, [r4, #16]
 8006b56:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006b5a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	f013 0f08 	tst.w	r3, #8
 8006b62:	d040      	beq.n	8006be6 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b64:	6963      	ldr	r3, [r4, #20]
 8006b66:	b363      	cbz	r3, 8006bc2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b68:	4b59      	ldr	r3, [pc, #356]	; (8006cd0 <HAL_RCC_OscConfig+0x2b4>)
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6e:	f7fe fbe5 	bl	800533c <HAL_GetTick>
 8006b72:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b74:	4b54      	ldr	r3, [pc, #336]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b78:	f013 0f02 	tst.w	r3, #2
 8006b7c:	d133      	bne.n	8006be6 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b7e:	f7fe fbdd 	bl	800533c <HAL_GetTick>
 8006b82:	1b40      	subs	r0, r0, r5
 8006b84:	2802      	cmp	r0, #2
 8006b86:	d9f5      	bls.n	8006b74 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8006b88:	2003      	movs	r0, #3
 8006b8a:	e12f      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8c:	4a4e      	ldr	r2, [pc, #312]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006b8e:	6813      	ldr	r3, [r2, #0]
 8006b90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006b94:	6921      	ldr	r1, [r4, #16]
 8006b96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	e7de      	b.n	8006b5c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8006b9e:	4b4b      	ldr	r3, [pc, #300]	; (8006ccc <HAL_RCC_OscConfig+0x2b0>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006ba4:	f7fe fbca 	bl	800533c <HAL_GetTick>
 8006ba8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006baa:	4b47      	ldr	r3, [pc, #284]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f013 0f02 	tst.w	r3, #2
 8006bb2:	d0d3      	beq.n	8006b5c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bb4:	f7fe fbc2 	bl	800533c <HAL_GetTick>
 8006bb8:	1b40      	subs	r0, r0, r5
 8006bba:	2802      	cmp	r0, #2
 8006bbc:	d9f5      	bls.n	8006baa <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8006bbe:	2003      	movs	r0, #3
 8006bc0:	e114      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bc2:	4b43      	ldr	r3, [pc, #268]	; (8006cd0 <HAL_RCC_OscConfig+0x2b4>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bc8:	f7fe fbb8 	bl	800533c <HAL_GetTick>
 8006bcc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bce:	4b3e      	ldr	r3, [pc, #248]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd2:	f013 0f02 	tst.w	r3, #2
 8006bd6:	d006      	beq.n	8006be6 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bd8:	f7fe fbb0 	bl	800533c <HAL_GetTick>
 8006bdc:	1b40      	subs	r0, r0, r5
 8006bde:	2802      	cmp	r0, #2
 8006be0:	d9f5      	bls.n	8006bce <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8006be2:	2003      	movs	r0, #3
 8006be4:	e102      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	f013 0f04 	tst.w	r3, #4
 8006bec:	d075      	beq.n	8006cda <HAL_RCC_OscConfig+0x2be>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bee:	4b36      	ldr	r3, [pc, #216]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006bf6:	d131      	bne.n	8006c5c <HAL_RCC_OscConfig+0x240>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	4b32      	ldr	r3, [pc, #200]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006c04:	641a      	str	r2, [r3, #64]	; 0x40
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006c10:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c12:	4b30      	ldr	r3, [pc, #192]	; (8006cd4 <HAL_RCC_OscConfig+0x2b8>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006c1a:	d021      	beq.n	8006c60 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c1c:	68a3      	ldr	r3, [r4, #8]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d032      	beq.n	8006c88 <HAL_RCC_OscConfig+0x26c>
 8006c22:	2b05      	cmp	r3, #5
 8006c24:	d036      	beq.n	8006c94 <HAL_RCC_OscConfig+0x278>
 8006c26:	4b28      	ldr	r3, [pc, #160]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006c28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c2a:	f022 0201 	bic.w	r2, r2, #1
 8006c2e:	671a      	str	r2, [r3, #112]	; 0x70
 8006c30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c32:	f022 0204 	bic.w	r2, r2, #4
 8006c36:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c38:	68a3      	ldr	r3, [r4, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d034      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x28c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c3e:	f7fe fb7d 	bl	800533c <HAL_GetTick>
 8006c42:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c44:	4b20      	ldr	r3, [pc, #128]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c48:	f013 0f02 	tst.w	r3, #2
 8006c4c:	d144      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c4e:	f7fe fb75 	bl	800533c <HAL_GetTick>
 8006c52:	1b80      	subs	r0, r0, r6
 8006c54:	2864      	cmp	r0, #100	; 0x64
 8006c56:	d9f5      	bls.n	8006c44 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8006c58:	2003      	movs	r0, #3
 8006c5a:	e0c7      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8006c5c:	2500      	movs	r5, #0
 8006c5e:	e7d8      	b.n	8006c12 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c60:	4a1c      	ldr	r2, [pc, #112]	; (8006cd4 <HAL_RCC_OscConfig+0x2b8>)
 8006c62:	6813      	ldr	r3, [r2, #0]
 8006c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c68:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006c6a:	f7fe fb67 	bl	800533c <HAL_GetTick>
 8006c6e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c70:	4b18      	ldr	r3, [pc, #96]	; (8006cd4 <HAL_RCC_OscConfig+0x2b8>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006c78:	d1d0      	bne.n	8006c1c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c7a:	f7fe fb5f 	bl	800533c <HAL_GetTick>
 8006c7e:	1b80      	subs	r0, r0, r6
 8006c80:	2802      	cmp	r0, #2
 8006c82:	d9f5      	bls.n	8006c70 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8006c84:	2003      	movs	r0, #3
 8006c86:	e0b1      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c88:	4a0f      	ldr	r2, [pc, #60]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006c8a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006c8c:	f043 0301 	orr.w	r3, r3, #1
 8006c90:	6713      	str	r3, [r2, #112]	; 0x70
 8006c92:	e7d1      	b.n	8006c38 <HAL_RCC_OscConfig+0x21c>
 8006c94:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006c96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c98:	f042 0204 	orr.w	r2, r2, #4
 8006c9c:	671a      	str	r2, [r3, #112]	; 0x70
 8006c9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ca0:	f042 0201 	orr.w	r2, r2, #1
 8006ca4:	671a      	str	r2, [r3, #112]	; 0x70
 8006ca6:	e7c7      	b.n	8006c38 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ca8:	f7fe fb48 	bl	800533c <HAL_GetTick>
 8006cac:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cae:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <HAL_RCC_OscConfig+0x2ac>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	f013 0f02 	tst.w	r3, #2
 8006cb6:	d00f      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cb8:	f7fe fb40 	bl	800533c <HAL_GetTick>
 8006cbc:	1b80      	subs	r0, r0, r6
 8006cbe:	2864      	cmp	r0, #100	; 0x64
 8006cc0:	d9f5      	bls.n	8006cae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006cc2:	2003      	movs	r0, #3
 8006cc4:	e092      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
 8006cc6:	bf00      	nop
 8006cc8:	40023800 	.word	0x40023800
 8006ccc:	42470000 	.word	0x42470000
 8006cd0:	42470e80 	.word	0x42470e80
 8006cd4:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cd8:	b9ed      	cbnz	r5, 8006d16 <HAL_RCC_OscConfig+0x2fa>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cda:	69a3      	ldr	r3, [r4, #24]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 8084 	beq.w	8006dea <HAL_RCC_OscConfig+0x3ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ce2:	4a45      	ldr	r2, [pc, #276]	; (8006df8 <HAL_RCC_OscConfig+0x3dc>)
 8006ce4:	6892      	ldr	r2, [r2, #8]
 8006ce6:	f002 020c 	and.w	r2, r2, #12
 8006cea:	2a08      	cmp	r2, #8
 8006cec:	d051      	beq.n	8006d92 <HAL_RCC_OscConfig+0x376>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d017      	beq.n	8006d22 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cf2:	4b42      	ldr	r3, [pc, #264]	; (8006dfc <HAL_RCC_OscConfig+0x3e0>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf8:	f7fe fb20 	bl	800533c <HAL_GetTick>
 8006cfc:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cfe:	4b3e      	ldr	r3, [pc, #248]	; (8006df8 <HAL_RCC_OscConfig+0x3dc>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006d06:	d042      	beq.n	8006d8e <HAL_RCC_OscConfig+0x372>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d08:	f7fe fb18 	bl	800533c <HAL_GetTick>
 8006d0c:	1b00      	subs	r0, r0, r4
 8006d0e:	2802      	cmp	r0, #2
 8006d10:	d9f5      	bls.n	8006cfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006d12:	2003      	movs	r0, #3
 8006d14:	e06a      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d16:	4a38      	ldr	r2, [pc, #224]	; (8006df8 <HAL_RCC_OscConfig+0x3dc>)
 8006d18:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8006d20:	e7db      	b.n	8006cda <HAL_RCC_OscConfig+0x2be>
        __HAL_RCC_PLL_DISABLE();
 8006d22:	4b36      	ldr	r3, [pc, #216]	; (8006dfc <HAL_RCC_OscConfig+0x3e0>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006d28:	f7fe fb08 	bl	800533c <HAL_GetTick>
 8006d2c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d2e:	4b32      	ldr	r3, [pc, #200]	; (8006df8 <HAL_RCC_OscConfig+0x3dc>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006d36:	d006      	beq.n	8006d46 <HAL_RCC_OscConfig+0x32a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d38:	f7fe fb00 	bl	800533c <HAL_GetTick>
 8006d3c:	1b40      	subs	r0, r0, r5
 8006d3e:	2802      	cmp	r0, #2
 8006d40:	d9f5      	bls.n	8006d2e <HAL_RCC_OscConfig+0x312>
            return HAL_TIMEOUT;
 8006d42:	2003      	movs	r0, #3
 8006d44:	e052      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d46:	69e3      	ldr	r3, [r4, #28]
 8006d48:	6a22      	ldr	r2, [r4, #32]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d4e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006d52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006d54:	0852      	lsrs	r2, r2, #1
 8006d56:	3a01      	subs	r2, #1
 8006d58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006d5e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006d62:	4a25      	ldr	r2, [pc, #148]	; (8006df8 <HAL_RCC_OscConfig+0x3dc>)
 8006d64:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8006d66:	4b25      	ldr	r3, [pc, #148]	; (8006dfc <HAL_RCC_OscConfig+0x3e0>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006d6c:	f7fe fae6 	bl	800533c <HAL_GetTick>
 8006d70:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d72:	4b21      	ldr	r3, [pc, #132]	; (8006df8 <HAL_RCC_OscConfig+0x3dc>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006d7a:	d106      	bne.n	8006d8a <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d7c:	f7fe fade 	bl	800533c <HAL_GetTick>
 8006d80:	1b00      	subs	r0, r0, r4
 8006d82:	2802      	cmp	r0, #2
 8006d84:	d9f5      	bls.n	8006d72 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8006d86:	2003      	movs	r0, #3
 8006d88:	e030      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	e02e      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
 8006d8e:	2000      	movs	r0, #0
 8006d90:	e02c      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d02c      	beq.n	8006df0 <HAL_RCC_OscConfig+0x3d4>
        pll_config = RCC->PLLCFGR;
 8006d96:	4b18      	ldr	r3, [pc, #96]	; (8006df8 <HAL_RCC_OscConfig+0x3dc>)
 8006d98:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d9a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8006d9e:	69e2      	ldr	r2, [r4, #28]
 8006da0:	4291      	cmp	r1, r2
 8006da2:	d001      	beq.n	8006da8 <HAL_RCC_OscConfig+0x38c>
          return HAL_ERROR;
 8006da4:	2001      	movs	r0, #1
 8006da6:	e021      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006da8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006dac:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dae:	428a      	cmp	r2, r1
 8006db0:	d001      	beq.n	8006db6 <HAL_RCC_OscConfig+0x39a>
          return HAL_ERROR;
 8006db2:	2001      	movs	r0, #1
 8006db4:	e01a      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006db6:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006db8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006dbc:	401a      	ands	r2, r3
 8006dbe:	428a      	cmp	r2, r1
 8006dc0:	d001      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x3aa>
          return HAL_ERROR;
 8006dc2:	2001      	movs	r0, #1
 8006dc4:	e012      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006dc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006dca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006dcc:	428a      	cmp	r2, r1
 8006dce:	d001      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x3b8>
          return HAL_ERROR;
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	e00b      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006dd4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006dd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00a      	beq.n	8006df4 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
 8006dde:	2001      	movs	r0, #1
 8006de0:	e004      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
    return HAL_ERROR;
 8006de2:	2001      	movs	r0, #1
}
 8006de4:	4770      	bx	lr
        return HAL_ERROR;
 8006de6:	2001      	movs	r0, #1
 8006de8:	e000      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8006dea:	2000      	movs	r0, #0
}
 8006dec:	b002      	add	sp, #8
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006df0:	2001      	movs	r0, #1
 8006df2:	e7fb      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8006df4:	2000      	movs	r0, #0
 8006df6:	e7f9      	b.n	8006dec <HAL_RCC_OscConfig+0x3d0>
 8006df8:	40023800 	.word	0x40023800
 8006dfc:	42470060 	.word	0x42470060

08006e00 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006e00:	4b01      	ldr	r3, [pc, #4]	; (8006e08 <HAL_RCC_EnableCSS+0x8>)
 8006e02:	2201      	movs	r2, #1
 8006e04:	601a      	str	r2, [r3, #0]
}
 8006e06:	4770      	bx	lr
 8006e08:	4247004c 	.word	0x4247004c

08006e0c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e0c:	4b26      	ldr	r3, [pc, #152]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f003 030c 	and.w	r3, r3, #12
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d044      	beq.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x96>
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d001      	beq.n	8006e20 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e1c:	4823      	ldr	r0, [pc, #140]	; (8006eac <HAL_RCC_GetSysClockFreq+0xa0>)
 8006e1e:	4770      	bx	lr
{
 8006e20:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e24:	4b20      	ldr	r3, [pc, #128]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006e32:	d013      	beq.n	8006e5c <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e34:	4b1c      	ldr	r3, [pc, #112]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006e36:	6859      	ldr	r1, [r3, #4]
 8006e38:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	481c      	ldr	r0, [pc, #112]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006e40:	fba1 0100 	umull	r0, r1, r1, r0
 8006e44:	f7f9 fe62 	bl	8000b0c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e48:	4b17      	ldr	r3, [pc, #92]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006e50:	3301      	adds	r3, #1
 8006e52:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8006e54:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006e58:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e5c:	4b12      	ldr	r3, [pc, #72]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8006e64:	461e      	mov	r6, r3
 8006e66:	2700      	movs	r7, #0
 8006e68:	015c      	lsls	r4, r3, #5
 8006e6a:	2500      	movs	r5, #0
 8006e6c:	1ae4      	subs	r4, r4, r3
 8006e6e:	eb65 0507 	sbc.w	r5, r5, r7
 8006e72:	01a9      	lsls	r1, r5, #6
 8006e74:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8006e78:	01a0      	lsls	r0, r4, #6
 8006e7a:	1b00      	subs	r0, r0, r4
 8006e7c:	eb61 0105 	sbc.w	r1, r1, r5
 8006e80:	00cb      	lsls	r3, r1, #3
 8006e82:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006e86:	00c4      	lsls	r4, r0, #3
 8006e88:	19a0      	adds	r0, r4, r6
 8006e8a:	eb43 0107 	adc.w	r1, r3, r7
 8006e8e:	028b      	lsls	r3, r1, #10
 8006e90:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8006e94:	0284      	lsls	r4, r0, #10
 8006e96:	4620      	mov	r0, r4
 8006e98:	4619      	mov	r1, r3
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f7f9 fe36 	bl	8000b0c <__aeabi_uldivmod>
 8006ea0:	e7d2      	b.n	8006e48 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8006ea2:	4803      	ldr	r0, [pc, #12]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	00f42400 	.word	0x00f42400
 8006eb0:	017d7840 	.word	0x017d7840

08006eb4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	f000 809e 	beq.w	8006ff6 <HAL_RCC_ClockConfig+0x142>
{
 8006eba:	b570      	push	{r4, r5, r6, lr}
 8006ebc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ebe:	4b50      	ldr	r3, [pc, #320]	; (8007000 <HAL_RCC_ClockConfig+0x14c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	428b      	cmp	r3, r1
 8006ec8:	d209      	bcs.n	8006ede <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eca:	b2cb      	uxtb	r3, r1
 8006ecc:	4a4c      	ldr	r2, [pc, #304]	; (8007000 <HAL_RCC_ClockConfig+0x14c>)
 8006ece:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ed0:	6813      	ldr	r3, [r2, #0]
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	428b      	cmp	r3, r1
 8006ed8:	d001      	beq.n	8006ede <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8006eda:	2001      	movs	r0, #1
}
 8006edc:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	f013 0f02 	tst.w	r3, #2
 8006ee4:	d017      	beq.n	8006f16 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ee6:	f013 0f04 	tst.w	r3, #4
 8006eea:	d004      	beq.n	8006ef6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006eec:	4a45      	ldr	r2, [pc, #276]	; (8007004 <HAL_RCC_ClockConfig+0x150>)
 8006eee:	6893      	ldr	r3, [r2, #8]
 8006ef0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ef4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	f013 0f08 	tst.w	r3, #8
 8006efc:	d004      	beq.n	8006f08 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006efe:	4a41      	ldr	r2, [pc, #260]	; (8007004 <HAL_RCC_ClockConfig+0x150>)
 8006f00:	6893      	ldr	r3, [r2, #8]
 8006f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f06:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f08:	4a3e      	ldr	r2, [pc, #248]	; (8007004 <HAL_RCC_ClockConfig+0x150>)
 8006f0a:	6893      	ldr	r3, [r2, #8]
 8006f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f10:	68a0      	ldr	r0, [r4, #8]
 8006f12:	4303      	orrs	r3, r0
 8006f14:	6093      	str	r3, [r2, #8]
 8006f16:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	f013 0f01 	tst.w	r3, #1
 8006f1e:	d032      	beq.n	8006f86 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f20:	6863      	ldr	r3, [r4, #4]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d021      	beq.n	8006f6a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f26:	1e9a      	subs	r2, r3, #2
 8006f28:	2a01      	cmp	r2, #1
 8006f2a:	d925      	bls.n	8006f78 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f2c:	4a35      	ldr	r2, [pc, #212]	; (8007004 <HAL_RCC_ClockConfig+0x150>)
 8006f2e:	6812      	ldr	r2, [r2, #0]
 8006f30:	f012 0f02 	tst.w	r2, #2
 8006f34:	d061      	beq.n	8006ffa <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f36:	4933      	ldr	r1, [pc, #204]	; (8007004 <HAL_RCC_ClockConfig+0x150>)
 8006f38:	688a      	ldr	r2, [r1, #8]
 8006f3a:	f022 0203 	bic.w	r2, r2, #3
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006f42:	f7fe f9fb 	bl	800533c <HAL_GetTick>
 8006f46:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f48:	4b2e      	ldr	r3, [pc, #184]	; (8007004 <HAL_RCC_ClockConfig+0x150>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 030c 	and.w	r3, r3, #12
 8006f50:	6862      	ldr	r2, [r4, #4]
 8006f52:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006f56:	d016      	beq.n	8006f86 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f58:	f7fe f9f0 	bl	800533c <HAL_GetTick>
 8006f5c:	1b80      	subs	r0, r0, r6
 8006f5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f62:	4298      	cmp	r0, r3
 8006f64:	d9f0      	bls.n	8006f48 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8006f66:	2003      	movs	r0, #3
 8006f68:	e7b8      	b.n	8006edc <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f6a:	4a26      	ldr	r2, [pc, #152]	; (8007004 <HAL_RCC_ClockConfig+0x150>)
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006f72:	d1e0      	bne.n	8006f36 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8006f74:	2001      	movs	r0, #1
 8006f76:	e7b1      	b.n	8006edc <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f78:	4a22      	ldr	r2, [pc, #136]	; (8007004 <HAL_RCC_ClockConfig+0x150>)
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006f80:	d1d9      	bne.n	8006f36 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8006f82:	2001      	movs	r0, #1
 8006f84:	e7aa      	b.n	8006edc <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f86:	4b1e      	ldr	r3, [pc, #120]	; (8007000 <HAL_RCC_ClockConfig+0x14c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 030f 	and.w	r3, r3, #15
 8006f8e:	42ab      	cmp	r3, r5
 8006f90:	d909      	bls.n	8006fa6 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f92:	b2ea      	uxtb	r2, r5
 8006f94:	4b1a      	ldr	r3, [pc, #104]	; (8007000 <HAL_RCC_ClockConfig+0x14c>)
 8006f96:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	42ab      	cmp	r3, r5
 8006fa0:	d001      	beq.n	8006fa6 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	e79a      	b.n	8006edc <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	f013 0f04 	tst.w	r3, #4
 8006fac:	d006      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fae:	4a15      	ldr	r2, [pc, #84]	; (8007004 <HAL_RCC_ClockConfig+0x150>)
 8006fb0:	6893      	ldr	r3, [r2, #8]
 8006fb2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006fb6:	68e1      	ldr	r1, [r4, #12]
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	f013 0f08 	tst.w	r3, #8
 8006fc2:	d007      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fc4:	4a0f      	ldr	r2, [pc, #60]	; (8007004 <HAL_RCC_ClockConfig+0x150>)
 8006fc6:	6893      	ldr	r3, [r2, #8]
 8006fc8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006fcc:	6921      	ldr	r1, [r4, #16]
 8006fce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006fd2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006fd4:	f7ff ff1a 	bl	8006e0c <HAL_RCC_GetSysClockFreq>
 8006fd8:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <HAL_RCC_ClockConfig+0x150>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006fe0:	4a09      	ldr	r2, [pc, #36]	; (8007008 <HAL_RCC_ClockConfig+0x154>)
 8006fe2:	5cd3      	ldrb	r3, [r2, r3]
 8006fe4:	40d8      	lsrs	r0, r3
 8006fe6:	4b09      	ldr	r3, [pc, #36]	; (800700c <HAL_RCC_ClockConfig+0x158>)
 8006fe8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8006fea:	4b09      	ldr	r3, [pc, #36]	; (8007010 <HAL_RCC_ClockConfig+0x15c>)
 8006fec:	6818      	ldr	r0, [r3, #0]
 8006fee:	f7fd fd01 	bl	80049f4 <HAL_InitTick>
  return HAL_OK;
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	e772      	b.n	8006edc <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8006ff6:	2001      	movs	r0, #1
}
 8006ff8:	4770      	bx	lr
        return HAL_ERROR;
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	e76e      	b.n	8006edc <HAL_RCC_ClockConfig+0x28>
 8006ffe:	bf00      	nop
 8007000:	40023c00 	.word	0x40023c00
 8007004:	40023800 	.word	0x40023800
 8007008:	0800cf4c 	.word	0x0800cf4c
 800700c:	20000050 	.word	0x20000050
 8007010:	20000058 	.word	0x20000058

08007014 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8007014:	4b01      	ldr	r3, [pc, #4]	; (800701c <HAL_RCC_GetHCLKFreq+0x8>)
 8007016:	6818      	ldr	r0, [r3, #0]
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	20000050 	.word	0x20000050

08007020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007020:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007022:	f7ff fff7 	bl	8007014 <HAL_RCC_GetHCLKFreq>
 8007026:	4b04      	ldr	r3, [pc, #16]	; (8007038 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800702e:	4a03      	ldr	r2, [pc, #12]	; (800703c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007030:	5cd3      	ldrb	r3, [r2, r3]
}
 8007032:	40d8      	lsrs	r0, r3
 8007034:	bd08      	pop	{r3, pc}
 8007036:	bf00      	nop
 8007038:	40023800 	.word	0x40023800
 800703c:	0800cf5c 	.word	0x0800cf5c

08007040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007040:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007042:	f7ff ffe7 	bl	8007014 <HAL_RCC_GetHCLKFreq>
 8007046:	4b04      	ldr	r3, [pc, #16]	; (8007058 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800704e:	4a03      	ldr	r2, [pc, #12]	; (800705c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007050:	5cd3      	ldrb	r3, [r2, r3]
}
 8007052:	40d8      	lsrs	r0, r3
 8007054:	bd08      	pop	{r3, pc}
 8007056:	bf00      	nop
 8007058:	40023800 	.word	0x40023800
 800705c:	0800cf5c 	.word	0x0800cf5c

08007060 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007060:	230f      	movs	r3, #15
 8007062:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007064:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <HAL_RCC_GetClockConfig+0x34>)
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	f002 0203 	and.w	r2, r2, #3
 800706c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007074:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800707c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	08db      	lsrs	r3, r3, #3
 8007082:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007086:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007088:	4b03      	ldr	r3, [pc, #12]	; (8007098 <HAL_RCC_GetClockConfig+0x38>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 030f 	and.w	r3, r3, #15
 8007090:	600b      	str	r3, [r1, #0]
}
 8007092:	4770      	bx	lr
 8007094:	40023800 	.word	0x40023800
 8007098:	40023c00 	.word	0x40023c00

0800709c <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800709c:	4770      	bx	lr
	...

080070a0 <HAL_RCC_NMI_IRQHandler>:
{
 80070a0:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80070a2:	4b06      	ldr	r3, [pc, #24]	; (80070bc <HAL_RCC_NMI_IRQHandler+0x1c>)
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80070aa:	d100      	bne.n	80070ae <HAL_RCC_NMI_IRQHandler+0xe>
}
 80070ac:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 80070ae:	f7ff fff5 	bl	800709c <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80070b2:	4b03      	ldr	r3, [pc, #12]	; (80070c0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80070b4:	2280      	movs	r2, #128	; 0x80
 80070b6:	701a      	strb	r2, [r3, #0]
}
 80070b8:	e7f8      	b.n	80070ac <HAL_RCC_NMI_IRQHandler+0xc>
 80070ba:	bf00      	nop
 80070bc:	40023800 	.word	0x40023800
 80070c0:	4002380e 	.word	0x4002380e

080070c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070c4:	b530      	push	{r4, r5, lr}
 80070c6:	b083      	sub	sp, #12
 80070c8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070ca:	6803      	ldr	r3, [r0, #0]
 80070cc:	f013 0f05 	tst.w	r3, #5
 80070d0:	d10e      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	f013 0f02 	tst.w	r3, #2
 80070d8:	d136      	bne.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	f013 0f08 	tst.w	r3, #8
 80070e0:	f000 8097 	beq.w	8007212 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070e4:	7c22      	ldrb	r2, [r4, #16]
 80070e6:	4b4c      	ldr	r3, [pc, #304]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80070e8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80070ea:	2000      	movs	r0, #0
}
 80070ec:	b003      	add	sp, #12
 80070ee:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80070f0:	4b4a      	ldr	r3, [pc, #296]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80070f6:	f7fe f921 	bl	800533c <HAL_GetTick>
 80070fa:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070fc:	4b48      	ldr	r3, [pc, #288]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007104:	d006      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007106:	f7fe f919 	bl	800533c <HAL_GetTick>
 800710a:	1b40      	subs	r0, r0, r5
 800710c:	2802      	cmp	r0, #2
 800710e:	d9f5      	bls.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8007110:	2003      	movs	r0, #3
 8007112:	e7eb      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007114:	6862      	ldr	r2, [r4, #4]
 8007116:	68a3      	ldr	r3, [r4, #8]
 8007118:	071b      	lsls	r3, r3, #28
 800711a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800711e:	4a40      	ldr	r2, [pc, #256]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007120:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8007124:	4b3d      	ldr	r3, [pc, #244]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8007126:	2201      	movs	r2, #1
 8007128:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800712a:	f7fe f907 	bl	800533c <HAL_GetTick>
 800712e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007130:	4b3b      	ldr	r3, [pc, #236]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007138:	d1cb      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800713a:	f7fe f8ff 	bl	800533c <HAL_GetTick>
 800713e:	1b40      	subs	r0, r0, r5
 8007140:	2802      	cmp	r0, #2
 8007142:	d9f5      	bls.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        return HAL_TIMEOUT;
 8007144:	2003      	movs	r0, #3
 8007146:	e7d1      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8007148:	2300      	movs	r3, #0
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	4b34      	ldr	r3, [pc, #208]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800714e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007150:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007154:	641a      	str	r2, [r3, #64]	; 0x40
 8007156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800715c:	9301      	str	r3, [sp, #4]
 800715e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8007160:	4a30      	ldr	r2, [pc, #192]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007168:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800716a:	f7fe f8e7 	bl	800533c <HAL_GetTick>
 800716e:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007170:	4b2c      	ldr	r3, [pc, #176]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007178:	d106      	bne.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800717a:	f7fe f8df 	bl	800533c <HAL_GetTick>
 800717e:	1b40      	subs	r0, r0, r5
 8007180:	2802      	cmp	r0, #2
 8007182:	d9f5      	bls.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 8007184:	2003      	movs	r0, #3
 8007186:	e7b1      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007188:	4b25      	ldr	r3, [pc, #148]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800718a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800718c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007190:	d012      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007192:	68e2      	ldr	r2, [r4, #12]
 8007194:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007198:	429a      	cmp	r2, r3
 800719a:	d00d      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800719c:	4b20      	ldr	r3, [pc, #128]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800719e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80071a4:	4920      	ldr	r1, [pc, #128]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071a6:	2001      	movs	r0, #1
 80071a8:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071aa:	2000      	movs	r0, #0
 80071ac:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 80071ae:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80071b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b2:	f013 0f01 	tst.w	r3, #1
 80071b6:	d112      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071b8:	68e3      	ldr	r3, [r4, #12]
 80071ba:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80071be:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80071c2:	d01b      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x138>
 80071c4:	4a16      	ldr	r2, [pc, #88]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80071c6:	6893      	ldr	r3, [r2, #8]
 80071c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80071cc:	6093      	str	r3, [r2, #8]
 80071ce:	4914      	ldr	r1, [pc, #80]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80071d0:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80071d2:	68e2      	ldr	r2, [r4, #12]
 80071d4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80071d8:	4313      	orrs	r3, r2
 80071da:	670b      	str	r3, [r1, #112]	; 0x70
 80071dc:	e77d      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 80071de:	f7fe f8ad 	bl	800533c <HAL_GetTick>
 80071e2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071e4:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80071e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e8:	f013 0f02 	tst.w	r3, #2
 80071ec:	d1e4      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071ee:	f7fe f8a5 	bl	800533c <HAL_GetTick>
 80071f2:	1b40      	subs	r0, r0, r5
 80071f4:	2864      	cmp	r0, #100	; 0x64
 80071f6:	d9f5      	bls.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
 80071f8:	2003      	movs	r0, #3
 80071fa:	e777      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071fc:	4908      	ldr	r1, [pc, #32]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80071fe:	688a      	ldr	r2, [r1, #8]
 8007200:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8007204:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720c:	4313      	orrs	r3, r2
 800720e:	608b      	str	r3, [r1, #8]
 8007210:	e7dd      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x10a>
  return HAL_OK;
 8007212:	2000      	movs	r0, #0
 8007214:	e76a      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x28>
 8007216:	bf00      	nop
 8007218:	424711e0 	.word	0x424711e0
 800721c:	42470068 	.word	0x42470068
 8007220:	40023800 	.word	0x40023800
 8007224:	40007000 	.word	0x40007000
 8007228:	42470e40 	.word	0x42470e40

0800722c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007230:	6802      	ldr	r2, [r0, #0]
 8007232:	68d3      	ldr	r3, [r2, #12]
 8007234:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007238:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800723a:	f7fe f87f 	bl	800533c <HAL_GetTick>
 800723e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f013 0f20 	tst.w	r3, #32
 8007248:	d107      	bne.n	800725a <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800724a:	f7fe f877 	bl	800533c <HAL_GetTick>
 800724e:	1b40      	subs	r0, r0, r5
 8007250:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007254:	d9f4      	bls.n	8007240 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8007256:	2003      	movs	r0, #3
 8007258:	e000      	b.n	800725c <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800725a:	2000      	movs	r0, #0
}
 800725c:	bd38      	pop	{r3, r4, r5, pc}

0800725e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800725e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007260:	6803      	ldr	r3, [r0, #0]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007268:	d001      	beq.n	800726e <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800726a:	2000      	movs	r0, #0
}
 800726c:	bd38      	pop	{r3, r4, r5, pc}
 800726e:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007274:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8007276:	f7fe f861 	bl	800533c <HAL_GetTick>
 800727a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007284:	d107      	bne.n	8007296 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007286:	f7fe f859 	bl	800533c <HAL_GetTick>
 800728a:	1b40      	subs	r0, r0, r5
 800728c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007290:	d9f4      	bls.n	800727c <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8007292:	2003      	movs	r0, #3
 8007294:	e7ea      	b.n	800726c <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8007296:	2000      	movs	r0, #0
 8007298:	e7e8      	b.n	800726c <RTC_EnterInitMode+0xe>

0800729a <HAL_RTC_Init>:
{
 800729a:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800729c:	2800      	cmp	r0, #0
 800729e:	d05c      	beq.n	800735a <HAL_RTC_Init+0xc0>
 80072a0:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80072a2:	7f43      	ldrb	r3, [r0, #29]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d040      	beq.n	800732a <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80072a8:	2302      	movs	r3, #2
 80072aa:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	22ca      	movs	r2, #202	; 0xca
 80072b0:	625a      	str	r2, [r3, #36]	; 0x24
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	2253      	movs	r2, #83	; 0x53
 80072b6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80072b8:	4620      	mov	r0, r4
 80072ba:	f7ff ffd0 	bl	800725e <RTC_EnterInitMode>
 80072be:	4605      	mov	r5, r0
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d136      	bne.n	8007332 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80072c4:	6822      	ldr	r2, [r4, #0]
 80072c6:	6893      	ldr	r3, [r2, #8]
 80072c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80072cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072d0:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80072d2:	6821      	ldr	r1, [r4, #0]
 80072d4:	688a      	ldr	r2, [r1, #8]
 80072d6:	6863      	ldr	r3, [r4, #4]
 80072d8:	6920      	ldr	r0, [r4, #16]
 80072da:	4303      	orrs	r3, r0
 80072dc:	6960      	ldr	r0, [r4, #20]
 80072de:	4303      	orrs	r3, r0
 80072e0:	4313      	orrs	r3, r2
 80072e2:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	68e2      	ldr	r2, [r4, #12]
 80072e8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80072ea:	6822      	ldr	r2, [r4, #0]
 80072ec:	6913      	ldr	r3, [r2, #16]
 80072ee:	68a1      	ldr	r1, [r4, #8]
 80072f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80072f4:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80072f6:	6822      	ldr	r2, [r4, #0]
 80072f8:	68d3      	ldr	r3, [r2, #12]
 80072fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072fe:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f013 0f20 	tst.w	r3, #32
 8007308:	d01b      	beq.n	8007342 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800730a:	6822      	ldr	r2, [r4, #0]
 800730c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800730e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007312:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007314:	6822      	ldr	r2, [r4, #0]
 8007316:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007318:	69a1      	ldr	r1, [r4, #24]
 800731a:	430b      	orrs	r3, r1
 800731c:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	22ff      	movs	r2, #255	; 0xff
 8007322:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8007324:	2301      	movs	r3, #1
 8007326:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8007328:	e009      	b.n	800733e <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 800732a:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800732c:	f7fd f938 	bl	80045a0 <HAL_RTC_MspInit>
 8007330:	e7ba      	b.n	80072a8 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	22ff      	movs	r2, #255	; 0xff
 8007336:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007338:	2304      	movs	r3, #4
 800733a:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 800733c:	2501      	movs	r5, #1
}
 800733e:	4628      	mov	r0, r5
 8007340:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007342:	4620      	mov	r0, r4
 8007344:	f7ff ff72 	bl	800722c <HAL_RTC_WaitForSynchro>
 8007348:	2800      	cmp	r0, #0
 800734a:	d0de      	beq.n	800730a <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	22ff      	movs	r2, #255	; 0xff
 8007350:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007352:	2304      	movs	r3, #4
 8007354:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8007356:	2501      	movs	r5, #1
 8007358:	e7f1      	b.n	800733e <HAL_RTC_Init+0xa4>
     return HAL_ERROR;
 800735a:	2501      	movs	r5, #1
 800735c:	e7ef      	b.n	800733e <HAL_RTC_Init+0xa4>

0800735e <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800735e:	0903      	lsrs	r3, r0, #4
 8007360:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007364:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8007366:	f000 000f 	and.w	r0, r0, #15
 800736a:	4410      	add	r0, r2
}
 800736c:	b2c0      	uxtb	r0, r0
 800736e:	4770      	bx	lr

08007370 <HAL_RTC_GetTime>:
{
 8007370:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007372:	6803      	ldr	r3, [r0, #0]
 8007374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007376:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007378:	6803      	ldr	r3, [r0, #0]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007380:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007382:	6803      	ldr	r3, [r0, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800738a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800738e:	0c1d      	lsrs	r5, r3, #16
 8007390:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8007394:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007396:	f3c3 2606 	ubfx	r6, r3, #8, #7
 800739a:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800739c:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 80073a0:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80073a2:	f005 0540 	and.w	r5, r5, #64	; 0x40
 80073a6:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 80073a8:	b95a      	cbnz	r2, 80073c2 <HAL_RTC_GetTime+0x52>
 80073aa:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80073ac:	f7ff ffd7 	bl	800735e <RTC_Bcd2ToByte>
 80073b0:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7ff ffd3 	bl	800735e <RTC_Bcd2ToByte>
 80073b8:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80073ba:	4620      	mov	r0, r4
 80073bc:	f7ff ffcf 	bl	800735e <RTC_Bcd2ToByte>
 80073c0:	70a8      	strb	r0, [r5, #2]
}
 80073c2:	2000      	movs	r0, #0
 80073c4:	bd70      	pop	{r4, r5, r6, pc}

080073c6 <HAL_RTC_GetDate>:
{
 80073c6:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80073c8:	6803      	ldr	r3, [r0, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80073d4:	0c18      	lsrs	r0, r3, #16
 80073d6:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80073d8:	f3c3 2604 	ubfx	r6, r3, #8, #5
 80073dc:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80073de:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 80073e2:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80073e4:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80073e8:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80073ea:	b95a      	cbnz	r2, 8007404 <HAL_RTC_GetDate+0x3e>
 80073ec:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80073ee:	f7ff ffb6 	bl	800735e <RTC_Bcd2ToByte>
 80073f2:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80073f4:	4630      	mov	r0, r6
 80073f6:	f7ff ffb2 	bl	800735e <RTC_Bcd2ToByte>
 80073fa:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80073fc:	4628      	mov	r0, r5
 80073fe:	f7ff ffae 	bl	800735e <RTC_Bcd2ToByte>
 8007402:	70a0      	strb	r0, [r4, #2]
}
 8007404:	2000      	movs	r0, #0
 8007406:	bd70      	pop	{r4, r5, r6, pc}

08007408 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8007408:	6803      	ldr	r3, [r0, #0]
 800740a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800740c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8007410:	4770      	bx	lr

08007412 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8007412:	6803      	ldr	r3, [r0, #0]
 8007414:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007416:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 800741a:	4770      	bx	lr

0800741c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	4605      	mov	r5, r0
 8007420:	460f      	mov	r7, r1
 8007422:	4616      	mov	r6, r2
 8007424:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007426:	682b      	ldr	r3, [r5, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	ea37 0303 	bics.w	r3, r7, r3
 800742e:	bf0c      	ite	eq
 8007430:	2301      	moveq	r3, #1
 8007432:	2300      	movne	r3, #0
 8007434:	42b3      	cmp	r3, r6
 8007436:	d037      	beq.n	80074a8 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007438:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800743c:	d0f3      	beq.n	8007426 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800743e:	f7fd ff7d 	bl	800533c <HAL_GetTick>
 8007442:	9b06      	ldr	r3, [sp, #24]
 8007444:	1ac0      	subs	r0, r0, r3
 8007446:	42a0      	cmp	r0, r4
 8007448:	d201      	bcs.n	800744e <SPI_WaitFlagStateUntilTimeout+0x32>
 800744a:	2c00      	cmp	r4, #0
 800744c:	d1eb      	bne.n	8007426 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800744e:	682a      	ldr	r2, [r5, #0]
 8007450:	6853      	ldr	r3, [r2, #4]
 8007452:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8007456:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007458:	686b      	ldr	r3, [r5, #4]
 800745a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800745e:	d00b      	beq.n	8007478 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007460:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007466:	d014      	beq.n	8007492 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007468:	2301      	movs	r3, #1
 800746a:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800746e:	2300      	movs	r3, #0
 8007470:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8007474:	2003      	movs	r0, #3
 8007476:	e018      	b.n	80074aa <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007478:	68ab      	ldr	r3, [r5, #8]
 800747a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800747e:	d002      	beq.n	8007486 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007484:	d1ec      	bne.n	8007460 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8007486:	682a      	ldr	r2, [r5, #0]
 8007488:	6813      	ldr	r3, [r2, #0]
 800748a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	e7e6      	b.n	8007460 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8007492:	682a      	ldr	r2, [r5, #0]
 8007494:	6813      	ldr	r3, [r2, #0]
 8007496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800749a:	6013      	str	r3, [r2, #0]
 800749c:	682a      	ldr	r2, [r5, #0]
 800749e:	6813      	ldr	r3, [r2, #0]
 80074a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80074a4:	6013      	str	r3, [r2, #0]
 80074a6:	e7df      	b.n	8007468 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 80074a8:	2000      	movs	r0, #0
}
 80074aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074ac:	b530      	push	{r4, r5, lr}
 80074ae:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80074b0:	4c16      	ldr	r4, [pc, #88]	; (800750c <SPI_EndRxTxTransaction+0x60>)
 80074b2:	6824      	ldr	r4, [r4, #0]
 80074b4:	4d16      	ldr	r5, [pc, #88]	; (8007510 <SPI_EndRxTxTransaction+0x64>)
 80074b6:	fba5 3404 	umull	r3, r4, r5, r4
 80074ba:	0d64      	lsrs	r4, r4, #21
 80074bc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80074c0:	fb05 f404 	mul.w	r4, r5, r4
 80074c4:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074c6:	6844      	ldr	r4, [r0, #4]
 80074c8:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 80074cc:	d00b      	beq.n	80074e6 <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80074ce:	9b03      	ldr	r3, [sp, #12]
 80074d0:	b1c3      	cbz	r3, 8007504 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 80074d2:	9b03      	ldr	r3, [sp, #12]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80074d8:	6803      	ldr	r3, [r0, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80074e0:	d1f5      	bne.n	80074ce <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	e00f      	b.n	8007506 <SPI_EndRxTxTransaction+0x5a>
 80074e6:	460b      	mov	r3, r1
 80074e8:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074ea:	9200      	str	r2, [sp, #0]
 80074ec:	2200      	movs	r2, #0
 80074ee:	2180      	movs	r1, #128	; 0x80
 80074f0:	f7ff ff94 	bl	800741c <SPI_WaitFlagStateUntilTimeout>
 80074f4:	4603      	mov	r3, r0
 80074f6:	b130      	cbz	r0, 8007506 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80074fa:	f043 0320 	orr.w	r3, r3, #32
 80074fe:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e000      	b.n	8007506 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	b005      	add	sp, #20
 800750a:	bd30      	pop	{r4, r5, pc}
 800750c:	20000050 	.word	0x20000050
 8007510:	165e9f81 	.word	0x165e9f81

08007514 <SPI_EndRxTransaction>:
{
 8007514:	b510      	push	{r4, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800751a:	6840      	ldr	r0, [r0, #4]
 800751c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8007520:	d016      	beq.n	8007550 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007522:	6860      	ldr	r0, [r4, #4]
 8007524:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8007528:	d12e      	bne.n	8007588 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800752a:	68a3      	ldr	r3, [r4, #8]
 800752c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007530:	d01b      	beq.n	800756a <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007532:	9200      	str	r2, [sp, #0]
 8007534:	460b      	mov	r3, r1
 8007536:	2200      	movs	r2, #0
 8007538:	2180      	movs	r1, #128	; 0x80
 800753a:	4620      	mov	r0, r4
 800753c:	f7ff ff6e 	bl	800741c <SPI_WaitFlagStateUntilTimeout>
 8007540:	4603      	mov	r3, r0
 8007542:	b350      	cbz	r0, 800759a <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007544:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007546:	f043 0320 	orr.w	r3, r3, #32
 800754a:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e024      	b.n	800759a <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007550:	68a3      	ldr	r3, [r4, #8]
 8007552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007556:	d002      	beq.n	800755e <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800755c:	d1e1      	bne.n	8007522 <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 800755e:	6820      	ldr	r0, [r4, #0]
 8007560:	6803      	ldr	r3, [r0, #0]
 8007562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007566:	6003      	str	r3, [r0, #0]
 8007568:	e7db      	b.n	8007522 <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800756a:	9200      	str	r2, [sp, #0]
 800756c:	460b      	mov	r3, r1
 800756e:	2200      	movs	r2, #0
 8007570:	2101      	movs	r1, #1
 8007572:	4620      	mov	r0, r4
 8007574:	f7ff ff52 	bl	800741c <SPI_WaitFlagStateUntilTimeout>
 8007578:	4603      	mov	r3, r0
 800757a:	b170      	cbz	r0, 800759a <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800757c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800757e:	f043 0320 	orr.w	r3, r3, #32
 8007582:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e008      	b.n	800759a <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007588:	9200      	str	r2, [sp, #0]
 800758a:	460b      	mov	r3, r1
 800758c:	2200      	movs	r2, #0
 800758e:	2101      	movs	r1, #1
 8007590:	4620      	mov	r0, r4
 8007592:	f7ff ff43 	bl	800741c <SPI_WaitFlagStateUntilTimeout>
 8007596:	4603      	mov	r3, r0
 8007598:	b910      	cbnz	r0, 80075a0 <SPI_EndRxTransaction+0x8c>
}
 800759a:	4618      	mov	r0, r3
 800759c:	b002      	add	sp, #8
 800759e:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80075a2:	f043 0320 	orr.w	r3, r3, #32
 80075a6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e7f6      	b.n	800759a <SPI_EndRxTransaction+0x86>

080075ac <HAL_SPI_Init>:
  if (hspi == NULL)
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d03b      	beq.n	8007628 <HAL_SPI_Init+0x7c>
{
 80075b0:	b510      	push	{r4, lr}
 80075b2:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075b4:	2300      	movs	r3, #0
 80075b6:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80075b8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d02e      	beq.n	800761e <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 80075c0:	2302      	movs	r3, #2
 80075c2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80075c6:	6822      	ldr	r2, [r4, #0]
 80075c8:	6813      	ldr	r3, [r2, #0]
 80075ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ce:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80075d0:	6863      	ldr	r3, [r4, #4]
 80075d2:	68a2      	ldr	r2, [r4, #8]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	68e2      	ldr	r2, [r4, #12]
 80075d8:	4313      	orrs	r3, r2
 80075da:	6922      	ldr	r2, [r4, #16]
 80075dc:	4313      	orrs	r3, r2
 80075de:	6962      	ldr	r2, [r4, #20]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	69a2      	ldr	r2, [r4, #24]
 80075e4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80075e8:	4313      	orrs	r3, r2
 80075ea:	69e2      	ldr	r2, [r4, #28]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	6a22      	ldr	r2, [r4, #32]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80075f4:	6822      	ldr	r2, [r4, #0]
 80075f6:	430b      	orrs	r3, r1
 80075f8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80075fa:	8b63      	ldrh	r3, [r4, #26]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	430b      	orrs	r3, r1
 8007606:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007608:	6822      	ldr	r2, [r4, #0]
 800760a:	69d3      	ldr	r3, [r2, #28]
 800760c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007610:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007612:	2000      	movs	r0, #0
 8007614:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007616:	2301      	movs	r3, #1
 8007618:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800761c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800761e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8007622:	f7fc ffcb 	bl	80045bc <HAL_SPI_MspInit>
 8007626:	e7cb      	b.n	80075c0 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8007628:	2001      	movs	r0, #1
}
 800762a:	4770      	bx	lr

0800762c <HAL_SPI_Transmit>:
{
 800762c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007630:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8007632:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8007636:	2c01      	cmp	r4, #1
 8007638:	f000 80c3 	beq.w	80077c2 <HAL_SPI_Transmit+0x196>
 800763c:	461d      	mov	r5, r3
 800763e:	4617      	mov	r7, r2
 8007640:	4688      	mov	r8, r1
 8007642:	4604      	mov	r4, r0
 8007644:	2301      	movs	r3, #1
 8007646:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800764a:	f7fd fe77 	bl	800533c <HAL_GetTick>
 800764e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007650:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b01      	cmp	r3, #1
 8007658:	d009      	beq.n	800766e <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800765a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800765c:	2301      	movs	r3, #1
 800765e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007662:	2300      	movs	r3, #0
 8007664:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007668:	b002      	add	sp, #8
 800766a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800766e:	f1b8 0f00 	cmp.w	r8, #0
 8007672:	f000 8098 	beq.w	80077a6 <HAL_SPI_Transmit+0x17a>
 8007676:	2f00      	cmp	r7, #0
 8007678:	f000 8097 	beq.w	80077aa <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800767c:	2303      	movs	r3, #3
 800767e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007682:	2300      	movs	r3, #0
 8007684:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007686:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800768a:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 800768c:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800768e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007690:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007692:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007694:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007696:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007698:	68a3      	ldr	r3, [r4, #8]
 800769a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800769e:	d01c      	beq.n	80076da <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80076a8:	d103      	bne.n	80076b2 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076b0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076b2:	68e3      	ldr	r3, [r4, #12]
 80076b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076b8:	d015      	beq.n	80076e6 <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076ba:	6863      	ldr	r3, [r4, #4]
 80076bc:	b10b      	cbz	r3, 80076c2 <HAL_SPI_Transmit+0x96>
 80076be:	2f01      	cmp	r7, #1
 80076c0:	d149      	bne.n	8007756 <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	7812      	ldrb	r2, [r2, #0]
 80076c8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076cc:	3301      	adds	r3, #1
 80076ce:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80076d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	86e3      	strh	r3, [r4, #54]	; 0x36
 80076d8:	e03d      	b.n	8007756 <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 80076da:	6822      	ldr	r2, [r4, #0]
 80076dc:	6813      	ldr	r3, [r2, #0]
 80076de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	e7dc      	b.n	80076a0 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076e6:	6863      	ldr	r3, [r4, #4]
 80076e8:	b10b      	cbz	r3, 80076ee <HAL_SPI_Transmit+0xc2>
 80076ea:	2f01      	cmp	r7, #1
 80076ec:	d115      	bne.n	800771a <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	8812      	ldrh	r2, [r2, #0]
 80076f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076f8:	3302      	adds	r3, #2
 80076fa:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80076fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29b      	uxth	r3, r3
 8007702:	86e3      	strh	r3, [r4, #54]	; 0x36
 8007704:	e009      	b.n	800771a <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007706:	f7fd fe19 	bl	800533c <HAL_GetTick>
 800770a:	1b80      	subs	r0, r0, r6
 800770c:	42a8      	cmp	r0, r5
 800770e:	d302      	bcc.n	8007716 <HAL_SPI_Transmit+0xea>
 8007710:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007714:	d14b      	bne.n	80077ae <HAL_SPI_Transmit+0x182>
 8007716:	2d00      	cmp	r5, #0
 8007718:	d04b      	beq.n	80077b2 <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 800771a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d02c      	beq.n	800777c <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	689a      	ldr	r2, [r3, #8]
 8007726:	f012 0f02 	tst.w	r2, #2
 800772a:	d0ec      	beq.n	8007706 <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800772c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800772e:	8812      	ldrh	r2, [r2, #0]
 8007730:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007732:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007734:	3302      	adds	r3, #2
 8007736:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007738:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800773a:	3b01      	subs	r3, #1
 800773c:	b29b      	uxth	r3, r3
 800773e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8007740:	e7eb      	b.n	800771a <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007742:	f7fd fdfb 	bl	800533c <HAL_GetTick>
 8007746:	1b80      	subs	r0, r0, r6
 8007748:	42a8      	cmp	r0, r5
 800774a:	d302      	bcc.n	8007752 <HAL_SPI_Transmit+0x126>
 800774c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007750:	d131      	bne.n	80077b6 <HAL_SPI_Transmit+0x18a>
 8007752:	2d00      	cmp	r5, #0
 8007754:	d031      	beq.n	80077ba <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 8007756:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007758:	b29b      	uxth	r3, r3
 800775a:	b17b      	cbz	r3, 800777c <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	f012 0f02 	tst.w	r2, #2
 8007764:	d0ed      	beq.n	8007742 <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007766:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007768:	7812      	ldrb	r2, [r2, #0]
 800776a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800776c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800776e:	3301      	adds	r3, #1
 8007770:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007772:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007774:	3b01      	subs	r3, #1
 8007776:	b29b      	uxth	r3, r3
 8007778:	86e3      	strh	r3, [r4, #54]	; 0x36
 800777a:	e7ec      	b.n	8007756 <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800777c:	4632      	mov	r2, r6
 800777e:	4629      	mov	r1, r5
 8007780:	4620      	mov	r0, r4
 8007782:	f7ff fe93 	bl	80074ac <SPI_EndRxTxTransaction>
 8007786:	b108      	cbz	r0, 800778c <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007788:	2320      	movs	r3, #32
 800778a:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800778c:	68a3      	ldr	r3, [r4, #8]
 800778e:	b933      	cbnz	r3, 800779e <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007790:	9301      	str	r3, [sp, #4]
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	9201      	str	r2, [sp, #4]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	9301      	str	r3, [sp, #4]
 800779c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800779e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80077a0:	b96b      	cbnz	r3, 80077be <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077a2:	2000      	movs	r0, #0
 80077a4:	e75a      	b.n	800765c <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80077a6:	2001      	movs	r0, #1
 80077a8:	e758      	b.n	800765c <HAL_SPI_Transmit+0x30>
 80077aa:	2001      	movs	r0, #1
 80077ac:	e756      	b.n	800765c <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80077ae:	2003      	movs	r0, #3
 80077b0:	e754      	b.n	800765c <HAL_SPI_Transmit+0x30>
 80077b2:	2003      	movs	r0, #3
 80077b4:	e752      	b.n	800765c <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80077b6:	2003      	movs	r0, #3
 80077b8:	e750      	b.n	800765c <HAL_SPI_Transmit+0x30>
 80077ba:	2003      	movs	r0, #3
 80077bc:	e74e      	b.n	800765c <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80077be:	2001      	movs	r0, #1
 80077c0:	e74c      	b.n	800765c <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80077c2:	2002      	movs	r0, #2
 80077c4:	e750      	b.n	8007668 <HAL_SPI_Transmit+0x3c>

080077c6 <HAL_SPI_TransmitReceive>:
{
 80077c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077ca:	b083      	sub	sp, #12
 80077cc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80077d0:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 80077d4:	2c01      	cmp	r4, #1
 80077d6:	f000 810b 	beq.w	80079f0 <HAL_SPI_TransmitReceive+0x22a>
 80077da:	461d      	mov	r5, r3
 80077dc:	4617      	mov	r7, r2
 80077de:	460e      	mov	r6, r1
 80077e0:	4604      	mov	r4, r0
 80077e2:	2301      	movs	r3, #1
 80077e4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80077e8:	f7fd fda8 	bl	800533c <HAL_GetTick>
 80077ec:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 80077ee:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80077f2:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 80077f4:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077f6:	2801      	cmp	r0, #1
 80077f8:	d015      	beq.n	8007826 <HAL_SPI_TransmitReceive+0x60>
 80077fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077fe:	d00a      	beq.n	8007816 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 8007800:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007802:	2201      	movs	r2, #1
 8007804:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007808:	2200      	movs	r2, #0
 800780a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 800780e:	4618      	mov	r0, r3
 8007810:	b003      	add	sp, #12
 8007812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007816:	68a3      	ldr	r3, [r4, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	f040 80db 	bne.w	80079d4 <HAL_SPI_TransmitReceive+0x20e>
 800781e:	2804      	cmp	r0, #4
 8007820:	d001      	beq.n	8007826 <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 8007822:	2302      	movs	r3, #2
 8007824:	e7ed      	b.n	8007802 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007826:	2e00      	cmp	r6, #0
 8007828:	f000 80d6 	beq.w	80079d8 <HAL_SPI_TransmitReceive+0x212>
 800782c:	2f00      	cmp	r7, #0
 800782e:	f000 80d5 	beq.w	80079dc <HAL_SPI_TransmitReceive+0x216>
 8007832:	2d00      	cmp	r5, #0
 8007834:	f000 80d4 	beq.w	80079e0 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007838:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b04      	cmp	r3, #4
 8007840:	d002      	beq.n	8007848 <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007842:	2305      	movs	r3, #5
 8007844:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007848:	2300      	movs	r3, #0
 800784a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800784c:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800784e:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007850:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007852:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007854:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007856:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8007858:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800785a:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007864:	d103      	bne.n	800786e <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800786c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800786e:	68e3      	ldr	r3, [r4, #12]
 8007870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007874:	d010      	beq.n	8007898 <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007876:	6863      	ldr	r3, [r4, #4]
 8007878:	b10b      	cbz	r3, 800787e <HAL_SPI_TransmitReceive+0xb8>
 800787a:	2d01      	cmp	r5, #1
 800787c:	d10a      	bne.n	8007894 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800787e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	7812      	ldrb	r2, [r2, #0]
 8007884:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007886:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007888:	3301      	adds	r3, #1
 800788a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800788c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800788e:	3b01      	subs	r3, #1
 8007890:	b29b      	uxth	r3, r3
 8007892:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8007894:	2501      	movs	r5, #1
 8007896:	e069      	b.n	800796c <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007898:	6863      	ldr	r3, [r4, #4]
 800789a:	b10b      	cbz	r3, 80078a0 <HAL_SPI_TransmitReceive+0xda>
 800789c:	2d01      	cmp	r5, #1
 800789e:	d10a      	bne.n	80078b6 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	8812      	ldrh	r2, [r2, #0]
 80078a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80078aa:	3302      	adds	r3, #2
 80078ac:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80078ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80078b6:	2501      	movs	r5, #1
 80078b8:	e01b      	b.n	80078f2 <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	689a      	ldr	r2, [r3, #8]
 80078be:	f012 0f01 	tst.w	r2, #1
 80078c2:	d00d      	beq.n	80078e0 <HAL_SPI_TransmitReceive+0x11a>
 80078c4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80078c6:	b292      	uxth	r2, r2
 80078c8:	b152      	cbz	r2, 80078e0 <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80078ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80078d2:	3302      	adds	r3, #2
 80078d4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80078d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80078d8:	3b01      	subs	r3, #1
 80078da:	b29b      	uxth	r3, r3
 80078dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80078de:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078e0:	f7fd fd2c 	bl	800533c <HAL_GetTick>
 80078e4:	eba0 0009 	sub.w	r0, r0, r9
 80078e8:	4540      	cmp	r0, r8
 80078ea:	d302      	bcc.n	80078f2 <HAL_SPI_TransmitReceive+0x12c>
 80078ec:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80078f0:	d178      	bne.n	80079e4 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	b91b      	cbnz	r3, 8007900 <HAL_SPI_TransmitReceive+0x13a>
 80078f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d052      	beq.n	80079a6 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	f012 0f02 	tst.w	r2, #2
 8007908:	d0d7      	beq.n	80078ba <HAL_SPI_TransmitReceive+0xf4>
 800790a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800790c:	b292      	uxth	r2, r2
 800790e:	2a00      	cmp	r2, #0
 8007910:	d0d3      	beq.n	80078ba <HAL_SPI_TransmitReceive+0xf4>
 8007912:	2d00      	cmp	r5, #0
 8007914:	d0d1      	beq.n	80078ba <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007916:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007918:	8812      	ldrh	r2, [r2, #0]
 800791a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800791c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800791e:	3302      	adds	r3, #2
 8007920:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007922:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007924:	3b01      	subs	r3, #1
 8007926:	b29b      	uxth	r3, r3
 8007928:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800792a:	2500      	movs	r5, #0
 800792c:	e7c5      	b.n	80078ba <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	f012 0f01 	tst.w	r2, #1
 8007936:	d00d      	beq.n	8007954 <HAL_SPI_TransmitReceive+0x18e>
 8007938:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800793a:	b292      	uxth	r2, r2
 800793c:	b152      	cbz	r2, 8007954 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007942:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007944:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007946:	3301      	adds	r3, #1
 8007948:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800794a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800794c:	3b01      	subs	r3, #1
 800794e:	b29b      	uxth	r3, r3
 8007950:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8007952:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007954:	f7fd fcf2 	bl	800533c <HAL_GetTick>
 8007958:	eba0 0009 	sub.w	r0, r0, r9
 800795c:	4540      	cmp	r0, r8
 800795e:	d302      	bcc.n	8007966 <HAL_SPI_TransmitReceive+0x1a0>
 8007960:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007964:	d140      	bne.n	80079e8 <HAL_SPI_TransmitReceive+0x222>
 8007966:	f1b8 0f00 	cmp.w	r8, #0
 800796a:	d03f      	beq.n	80079ec <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800796c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800796e:	b29b      	uxth	r3, r3
 8007970:	b913      	cbnz	r3, 8007978 <HAL_SPI_TransmitReceive+0x1b2>
 8007972:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007974:	b29b      	uxth	r3, r3
 8007976:	b1b3      	cbz	r3, 80079a6 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	f012 0f02 	tst.w	r2, #2
 8007980:	d0d5      	beq.n	800792e <HAL_SPI_TransmitReceive+0x168>
 8007982:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8007984:	b292      	uxth	r2, r2
 8007986:	2a00      	cmp	r2, #0
 8007988:	d0d1      	beq.n	800792e <HAL_SPI_TransmitReceive+0x168>
 800798a:	2d00      	cmp	r5, #0
 800798c:	d0cf      	beq.n	800792e <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800798e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007990:	7812      	ldrb	r2, [r2, #0]
 8007992:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8007994:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007996:	3301      	adds	r3, #1
 8007998:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800799a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800799c:	3b01      	subs	r3, #1
 800799e:	b29b      	uxth	r3, r3
 80079a0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80079a2:	2500      	movs	r5, #0
 80079a4:	e7c3      	b.n	800792e <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079a6:	464a      	mov	r2, r9
 80079a8:	4641      	mov	r1, r8
 80079aa:	4620      	mov	r0, r4
 80079ac:	f7ff fd7e 	bl	80074ac <SPI_EndRxTxTransaction>
 80079b0:	4603      	mov	r3, r0
 80079b2:	b118      	cbz	r0, 80079bc <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079b4:	2320      	movs	r3, #32
 80079b6:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
    goto error;
 80079ba:	e722      	b.n	8007802 <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079bc:	68a2      	ldr	r2, [r4, #8]
 80079be:	2a00      	cmp	r2, #0
 80079c0:	f47f af1f 	bne.w	8007802 <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079c4:	9201      	str	r2, [sp, #4]
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	68d1      	ldr	r1, [r2, #12]
 80079ca:	9101      	str	r1, [sp, #4]
 80079cc:	6892      	ldr	r2, [r2, #8]
 80079ce:	9201      	str	r2, [sp, #4]
 80079d0:	9a01      	ldr	r2, [sp, #4]
 80079d2:	e716      	b.n	8007802 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 80079d4:	2302      	movs	r3, #2
 80079d6:	e714      	b.n	8007802 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e712      	b.n	8007802 <HAL_SPI_TransmitReceive+0x3c>
 80079dc:	2301      	movs	r3, #1
 80079de:	e710      	b.n	8007802 <HAL_SPI_TransmitReceive+0x3c>
 80079e0:	2301      	movs	r3, #1
 80079e2:	e70e      	b.n	8007802 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e70c      	b.n	8007802 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e70a      	b.n	8007802 <HAL_SPI_TransmitReceive+0x3c>
 80079ec:	2303      	movs	r3, #3
 80079ee:	e708      	b.n	8007802 <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 80079f0:	2302      	movs	r3, #2
 80079f2:	e70c      	b.n	800780e <HAL_SPI_TransmitReceive+0x48>

080079f4 <HAL_SPI_Receive>:
{
 80079f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	4604      	mov	r4, r0
 80079fc:	460f      	mov	r7, r1
 80079fe:	4690      	mov	r8, r2
 8007a00:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007a02:	6843      	ldr	r3, [r0, #4]
 8007a04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a08:	d019      	beq.n	8007a3e <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 8007a0a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	f000 809f 	beq.w	8007b52 <HAL_SPI_Receive+0x15e>
 8007a14:	2301      	movs	r3, #1
 8007a16:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8007a1a:	f7fd fc8f 	bl	800533c <HAL_GetTick>
 8007a1e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007a20:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d015      	beq.n	8007a56 <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 8007a2a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a32:	2300      	movs	r3, #0
 8007a34:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007a38:	b002      	add	sp, #8
 8007a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007a3e:	6883      	ldr	r3, [r0, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1e2      	bne.n	8007a0a <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a44:	2304      	movs	r3, #4
 8007a46:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007a4a:	9500      	str	r5, [sp, #0]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	460a      	mov	r2, r1
 8007a50:	f7ff feb9 	bl	80077c6 <HAL_SPI_TransmitReceive>
 8007a54:	e7f0      	b.n	8007a38 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 8007a56:	2f00      	cmp	r7, #0
 8007a58:	d06d      	beq.n	8007b36 <HAL_SPI_Receive+0x142>
 8007a5a:	f1b8 0f00 	cmp.w	r8, #0
 8007a5e:	d06c      	beq.n	8007b3a <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a60:	2304      	movs	r3, #4
 8007a62:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a6a:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007a6c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007a70:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a74:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007a76:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007a78:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007a7a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a7c:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a7e:	68a3      	ldr	r3, [r4, #8]
 8007a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a84:	d00b      	beq.n	8007a9e <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007a8e:	d103      	bne.n	8007a98 <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a96:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007a98:	68e3      	ldr	r3, [r4, #12]
 8007a9a:	b183      	cbz	r3, 8007abe <HAL_SPI_Receive+0xca>
 8007a9c:	e02c      	b.n	8007af8 <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 8007a9e:	6822      	ldr	r2, [r4, #0]
 8007aa0:	6813      	ldr	r3, [r2, #0]
 8007aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	e7ed      	b.n	8007a86 <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aaa:	f7fd fc47 	bl	800533c <HAL_GetTick>
 8007aae:	1b80      	subs	r0, r0, r6
 8007ab0:	42a8      	cmp	r0, r5
 8007ab2:	d302      	bcc.n	8007aba <HAL_SPI_Receive+0xc6>
 8007ab4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007ab8:	d141      	bne.n	8007b3e <HAL_SPI_Receive+0x14a>
 8007aba:	2d00      	cmp	r5, #0
 8007abc:	d041      	beq.n	8007b42 <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 8007abe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d02b      	beq.n	8007b1e <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	f012 0f01 	tst.w	r2, #1
 8007ace:	d0ec      	beq.n	8007aaa <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ad0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007ad2:	7b1b      	ldrb	r3, [r3, #12]
 8007ad4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ad6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ad8:	3301      	adds	r3, #1
 8007ada:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007adc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007ae4:	e7eb      	b.n	8007abe <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ae6:	f7fd fc29 	bl	800533c <HAL_GetTick>
 8007aea:	1b80      	subs	r0, r0, r6
 8007aec:	42a8      	cmp	r0, r5
 8007aee:	d302      	bcc.n	8007af6 <HAL_SPI_Receive+0x102>
 8007af0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007af4:	d127      	bne.n	8007b46 <HAL_SPI_Receive+0x152>
 8007af6:	b345      	cbz	r5, 8007b4a <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 8007af8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	b17b      	cbz	r3, 8007b1e <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	f012 0f01 	tst.w	r2, #1
 8007b06:	d0ee      	beq.n	8007ae6 <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b08:	68da      	ldr	r2, [r3, #12]
 8007b0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b10:	3302      	adds	r3, #2
 8007b12:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007b14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007b1c:	e7ec      	b.n	8007af8 <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b1e:	4632      	mov	r2, r6
 8007b20:	4629      	mov	r1, r5
 8007b22:	4620      	mov	r0, r4
 8007b24:	f7ff fcf6 	bl	8007514 <SPI_EndRxTransaction>
 8007b28:	b108      	cbz	r0, 8007b2e <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b2a:	2320      	movs	r3, #32
 8007b2c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007b30:	b96b      	cbnz	r3, 8007b4e <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b32:	2000      	movs	r0, #0
 8007b34:	e77a      	b.n	8007a2c <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8007b36:	2001      	movs	r0, #1
 8007b38:	e778      	b.n	8007a2c <HAL_SPI_Receive+0x38>
 8007b3a:	2001      	movs	r0, #1
 8007b3c:	e776      	b.n	8007a2c <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8007b3e:	2003      	movs	r0, #3
 8007b40:	e774      	b.n	8007a2c <HAL_SPI_Receive+0x38>
 8007b42:	2003      	movs	r0, #3
 8007b44:	e772      	b.n	8007a2c <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8007b46:	2003      	movs	r0, #3
 8007b48:	e770      	b.n	8007a2c <HAL_SPI_Receive+0x38>
 8007b4a:	2003      	movs	r0, #3
 8007b4c:	e76e      	b.n	8007a2c <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8007b4e:	2001      	movs	r0, #1
 8007b50:	e76c      	b.n	8007a2c <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 8007b52:	2002      	movs	r0, #2
 8007b54:	e770      	b.n	8007a38 <HAL_SPI_Receive+0x44>
	...

08007b58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b58:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b5a:	6a03      	ldr	r3, [r0, #32]
 8007b5c:	f023 0301 	bic.w	r3, r3, #1
 8007b60:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b62:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b66:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b68:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b6c:	680d      	ldr	r5, [r1, #0]
 8007b6e:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b72:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b76:	688b      	ldr	r3, [r1, #8]
 8007b78:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b7a:	4d0d      	ldr	r5, [pc, #52]	; (8007bb0 <TIM_OC1_SetConfig+0x58>)
 8007b7c:	42a8      	cmp	r0, r5
 8007b7e:	d009      	beq.n	8007b94 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b80:	4d0b      	ldr	r5, [pc, #44]	; (8007bb0 <TIM_OC1_SetConfig+0x58>)
 8007b82:	42a8      	cmp	r0, r5
 8007b84:	d00d      	beq.n	8007ba2 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b86:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b88:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b8a:	684a      	ldr	r2, [r1, #4]
 8007b8c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8e:	6203      	str	r3, [r0, #32]
}
 8007b90:	bc70      	pop	{r4, r5, r6}
 8007b92:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b94:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007b98:	68cc      	ldr	r4, [r1, #12]
 8007b9a:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b9c:	f023 0304 	bic.w	r3, r3, #4
 8007ba0:	e7ee      	b.n	8007b80 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ba2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8007ba6:	694c      	ldr	r4, [r1, #20]
 8007ba8:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8007baa:	698a      	ldr	r2, [r1, #24]
 8007bac:	4322      	orrs	r2, r4
 8007bae:	e7ea      	b.n	8007b86 <TIM_OC1_SetConfig+0x2e>
 8007bb0:	40010000 	.word	0x40010000

08007bb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bb4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bb6:	6a03      	ldr	r3, [r0, #32]
 8007bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bbc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bbe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bc2:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bc4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bc8:	680d      	ldr	r5, [r1, #0]
 8007bca:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bd0:	688d      	ldr	r5, [r1, #8]
 8007bd2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bd6:	4d0f      	ldr	r5, [pc, #60]	; (8007c14 <TIM_OC3_SetConfig+0x60>)
 8007bd8:	42a8      	cmp	r0, r5
 8007bda:	d009      	beq.n	8007bf0 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bdc:	4d0d      	ldr	r5, [pc, #52]	; (8007c14 <TIM_OC3_SetConfig+0x60>)
 8007bde:	42a8      	cmp	r0, r5
 8007be0:	d00e      	beq.n	8007c00 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007be2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007be4:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007be6:	684a      	ldr	r2, [r1, #4]
 8007be8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bea:	6203      	str	r3, [r0, #32]
}
 8007bec:	bc30      	pop	{r4, r5}
 8007bee:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bf4:	68cd      	ldr	r5, [r1, #12]
 8007bf6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bfe:	e7ed      	b.n	8007bdc <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c00:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c04:	694d      	ldr	r5, [r1, #20]
 8007c06:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c0a:	698d      	ldr	r5, [r1, #24]
 8007c0c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8007c10:	e7e7      	b.n	8007be2 <TIM_OC3_SetConfig+0x2e>
 8007c12:	bf00      	nop
 8007c14:	40010000 	.word	0x40010000

08007c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c18:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c1a:	6a03      	ldr	r3, [r0, #32]
 8007c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c20:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c22:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c24:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c26:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c28:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c2c:	680d      	ldr	r5, [r1, #0]
 8007c2e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c36:	688d      	ldr	r5, [r1, #8]
 8007c38:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c3c:	4d07      	ldr	r5, [pc, #28]	; (8007c5c <TIM_OC4_SetConfig+0x44>)
 8007c3e:	42a8      	cmp	r0, r5
 8007c40:	d006      	beq.n	8007c50 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c42:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c44:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c46:	684a      	ldr	r2, [r1, #4]
 8007c48:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4a:	6203      	str	r3, [r0, #32]
}
 8007c4c:	bc30      	pop	{r4, r5}
 8007c4e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c50:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c54:	694d      	ldr	r5, [r1, #20]
 8007c56:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8007c5a:	e7f2      	b.n	8007c42 <TIM_OC4_SetConfig+0x2a>
 8007c5c:	40010000 	.word	0x40010000

08007c60 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c60:	6802      	ldr	r2, [r0, #0]
 8007c62:	68d3      	ldr	r3, [r2, #12]
 8007c64:	f043 0301 	orr.w	r3, r3, #1
 8007c68:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c6a:	6802      	ldr	r2, [r0, #0]
 8007c6c:	6893      	ldr	r3, [r2, #8]
 8007c6e:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c72:	2b06      	cmp	r3, #6
 8007c74:	d003      	beq.n	8007c7e <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8007c76:	6813      	ldr	r3, [r2, #0]
 8007c78:	f043 0301 	orr.w	r3, r3, #1
 8007c7c:	6013      	str	r3, [r2, #0]
}
 8007c7e:	2000      	movs	r0, #0
 8007c80:	4770      	bx	lr

08007c82 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8007c82:	4770      	bx	lr

08007c84 <HAL_TIM_IC_CaptureCallback>:
}
 8007c84:	4770      	bx	lr

08007c86 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8007c86:	4770      	bx	lr

08007c88 <HAL_TIM_TriggerCallback>:
}
 8007c88:	4770      	bx	lr

08007c8a <HAL_TIM_IRQHandler>:
{
 8007c8a:	b510      	push	{r4, lr}
 8007c8c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c8e:	6803      	ldr	r3, [r0, #0]
 8007c90:	691a      	ldr	r2, [r3, #16]
 8007c92:	f012 0f02 	tst.w	r2, #2
 8007c96:	d011      	beq.n	8007cbc <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	f012 0f02 	tst.w	r2, #2
 8007c9e:	d00d      	beq.n	8007cbc <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ca0:	f06f 0202 	mvn.w	r2, #2
 8007ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007caa:	6803      	ldr	r3, [r0, #0]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	f013 0f03 	tst.w	r3, #3
 8007cb2:	d070      	beq.n	8007d96 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8007cb4:	f7ff ffe6 	bl	8007c84 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cbc:	6823      	ldr	r3, [r4, #0]
 8007cbe:	691a      	ldr	r2, [r3, #16]
 8007cc0:	f012 0f04 	tst.w	r2, #4
 8007cc4:	d012      	beq.n	8007cec <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	f012 0f04 	tst.w	r2, #4
 8007ccc:	d00e      	beq.n	8007cec <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cce:	f06f 0204 	mvn.w	r2, #4
 8007cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007ce0:	d05f      	beq.n	8007da2 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f7ff ffce 	bl	8007c84 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	691a      	ldr	r2, [r3, #16]
 8007cf0:	f012 0f08 	tst.w	r2, #8
 8007cf4:	d012      	beq.n	8007d1c <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cf6:	68da      	ldr	r2, [r3, #12]
 8007cf8:	f012 0f08 	tst.w	r2, #8
 8007cfc:	d00e      	beq.n	8007d1c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cfe:	f06f 0208 	mvn.w	r2, #8
 8007d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d04:	2304      	movs	r3, #4
 8007d06:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f013 0f03 	tst.w	r3, #3
 8007d10:	d04e      	beq.n	8007db0 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8007d12:	4620      	mov	r0, r4
 8007d14:	f7ff ffb6 	bl	8007c84 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	691a      	ldr	r2, [r3, #16]
 8007d20:	f012 0f10 	tst.w	r2, #16
 8007d24:	d012      	beq.n	8007d4c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	f012 0f10 	tst.w	r2, #16
 8007d2c:	d00e      	beq.n	8007d4c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d2e:	f06f 0210 	mvn.w	r2, #16
 8007d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d34:	2308      	movs	r3, #8
 8007d36:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007d40:	d03d      	beq.n	8007dbe <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8007d42:	4620      	mov	r0, r4
 8007d44:	f7ff ff9e 	bl	8007c84 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	691a      	ldr	r2, [r3, #16]
 8007d50:	f012 0f01 	tst.w	r2, #1
 8007d54:	d003      	beq.n	8007d5e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	f012 0f01 	tst.w	r2, #1
 8007d5c:	d136      	bne.n	8007dcc <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	691a      	ldr	r2, [r3, #16]
 8007d62:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007d66:	d003      	beq.n	8007d70 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007d6e:	d134      	bne.n	8007dda <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	691a      	ldr	r2, [r3, #16]
 8007d74:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007d78:	d003      	beq.n	8007d82 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d7a:	68da      	ldr	r2, [r3, #12]
 8007d7c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007d80:	d132      	bne.n	8007de8 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	691a      	ldr	r2, [r3, #16]
 8007d86:	f012 0f20 	tst.w	r2, #32
 8007d8a:	d003      	beq.n	8007d94 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	f012 0f20 	tst.w	r2, #32
 8007d92:	d130      	bne.n	8007df6 <HAL_TIM_IRQHandler+0x16c>
}
 8007d94:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d96:	f7ff ff74 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f7ff ff73 	bl	8007c86 <HAL_TIM_PWM_PulseFinishedCallback>
 8007da0:	e78a      	b.n	8007cb8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007da2:	4620      	mov	r0, r4
 8007da4:	f7ff ff6d 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da8:	4620      	mov	r0, r4
 8007daa:	f7ff ff6c 	bl	8007c86 <HAL_TIM_PWM_PulseFinishedCallback>
 8007dae:	e79b      	b.n	8007ce8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007db0:	4620      	mov	r0, r4
 8007db2:	f7ff ff66 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db6:	4620      	mov	r0, r4
 8007db8:	f7ff ff65 	bl	8007c86 <HAL_TIM_PWM_PulseFinishedCallback>
 8007dbc:	e7ac      	b.n	8007d18 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f7ff ff5f 	bl	8007c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f7ff ff5e 	bl	8007c86 <HAL_TIM_PWM_PulseFinishedCallback>
 8007dca:	e7bd      	b.n	8007d48 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dcc:	f06f 0201 	mvn.w	r2, #1
 8007dd0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f7fc f818 	bl	8003e08 <HAL_TIM_PeriodElapsedCallback>
 8007dd8:	e7c1      	b.n	8007d5e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dde:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007de0:	4620      	mov	r0, r4
 8007de2:	f000 f9c5 	bl	8008170 <HAL_TIMEx_BreakCallback>
 8007de6:	e7c3      	b.n	8007d70 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007de8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007dee:	4620      	mov	r0, r4
 8007df0:	f7ff ff4a 	bl	8007c88 <HAL_TIM_TriggerCallback>
 8007df4:	e7c5      	b.n	8007d82 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007df6:	f06f 0220 	mvn.w	r2, #32
 8007dfa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f000 f9b6 	bl	800816e <HAL_TIMEx_CommutCallback>
}
 8007e02:	e7c7      	b.n	8007d94 <HAL_TIM_IRQHandler+0x10a>

08007e04 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8007e04:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e06:	4a25      	ldr	r2, [pc, #148]	; (8007e9c <TIM_Base_SetConfig+0x98>)
 8007e08:	4290      	cmp	r0, r2
 8007e0a:	d00e      	beq.n	8007e2a <TIM_Base_SetConfig+0x26>
 8007e0c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007e10:	d00b      	beq.n	8007e2a <TIM_Base_SetConfig+0x26>
 8007e12:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007e16:	4290      	cmp	r0, r2
 8007e18:	d007      	beq.n	8007e2a <TIM_Base_SetConfig+0x26>
 8007e1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e1e:	4290      	cmp	r0, r2
 8007e20:	d003      	beq.n	8007e2a <TIM_Base_SetConfig+0x26>
 8007e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e26:	4290      	cmp	r0, r2
 8007e28:	d103      	bne.n	8007e32 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007e2e:	684a      	ldr	r2, [r1, #4]
 8007e30:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e32:	4a1a      	ldr	r2, [pc, #104]	; (8007e9c <TIM_Base_SetConfig+0x98>)
 8007e34:	4290      	cmp	r0, r2
 8007e36:	d01a      	beq.n	8007e6e <TIM_Base_SetConfig+0x6a>
 8007e38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007e3c:	d017      	beq.n	8007e6e <TIM_Base_SetConfig+0x6a>
 8007e3e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007e42:	4290      	cmp	r0, r2
 8007e44:	d013      	beq.n	8007e6e <TIM_Base_SetConfig+0x6a>
 8007e46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e4a:	4290      	cmp	r0, r2
 8007e4c:	d00f      	beq.n	8007e6e <TIM_Base_SetConfig+0x6a>
 8007e4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e52:	4290      	cmp	r0, r2
 8007e54:	d00b      	beq.n	8007e6e <TIM_Base_SetConfig+0x6a>
 8007e56:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8007e5a:	4290      	cmp	r0, r2
 8007e5c:	d007      	beq.n	8007e6e <TIM_Base_SetConfig+0x6a>
 8007e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e62:	4290      	cmp	r0, r2
 8007e64:	d003      	beq.n	8007e6e <TIM_Base_SetConfig+0x6a>
 8007e66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e6a:	4290      	cmp	r0, r2
 8007e6c:	d103      	bne.n	8007e76 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e72:	68ca      	ldr	r2, [r1, #12]
 8007e74:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e7a:	694a      	ldr	r2, [r1, #20]
 8007e7c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007e7e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e80:	688b      	ldr	r3, [r1, #8]
 8007e82:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007e84:	680b      	ldr	r3, [r1, #0]
 8007e86:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e88:	4b04      	ldr	r3, [pc, #16]	; (8007e9c <TIM_Base_SetConfig+0x98>)
 8007e8a:	4298      	cmp	r0, r3
 8007e8c:	d002      	beq.n	8007e94 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	6143      	str	r3, [r0, #20]
}
 8007e92:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8007e94:	690b      	ldr	r3, [r1, #16]
 8007e96:	6303      	str	r3, [r0, #48]	; 0x30
 8007e98:	e7f9      	b.n	8007e8e <TIM_Base_SetConfig+0x8a>
 8007e9a:	bf00      	nop
 8007e9c:	40010000 	.word	0x40010000

08007ea0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007ea0:	b1a8      	cbz	r0, 8007ece <HAL_TIM_Base_Init+0x2e>
{
 8007ea2:	b510      	push	{r4, lr}
 8007ea4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007ea6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007eaa:	b15b      	cbz	r3, 8007ec4 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8007eac:	2302      	movs	r3, #2
 8007eae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eb2:	1d21      	adds	r1, r4, #4
 8007eb4:	6820      	ldr	r0, [r4, #0]
 8007eb6:	f7ff ffa5 	bl	8007e04 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007ec0:	2000      	movs	r0, #0
}
 8007ec2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007ec4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007ec8:	f7fc fbfc 	bl	80046c4 <HAL_TIM_Base_MspInit>
 8007ecc:	e7ee      	b.n	8007eac <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8007ece:	2001      	movs	r0, #1
}
 8007ed0:	4770      	bx	lr

08007ed2 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007ed2:	b1a8      	cbz	r0, 8007f00 <HAL_TIM_PWM_Init+0x2e>
{
 8007ed4:	b510      	push	{r4, lr}
 8007ed6:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007ed8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007edc:	b15b      	cbz	r3, 8007ef6 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8007ede:	2302      	movs	r3, #2
 8007ee0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ee4:	1d21      	adds	r1, r4, #4
 8007ee6:	6820      	ldr	r0, [r4, #0]
 8007ee8:	f7ff ff8c 	bl	8007e04 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007eec:	2301      	movs	r3, #1
 8007eee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007ef2:	2000      	movs	r0, #0
}
 8007ef4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007ef6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007efa:	f7fc fb97 	bl	800462c <HAL_TIM_PWM_MspInit>
 8007efe:	e7ee      	b.n	8007ede <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8007f00:	2001      	movs	r0, #1
}
 8007f02:	4770      	bx	lr

08007f04 <TIM_OC2_SetConfig>:
{
 8007f04:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f06:	6a03      	ldr	r3, [r0, #32]
 8007f08:	f023 0310 	bic.w	r3, r3, #16
 8007f0c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007f0e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007f10:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007f12:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f14:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f18:	680d      	ldr	r5, [r1, #0]
 8007f1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8007f1e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f22:	688d      	ldr	r5, [r1, #8]
 8007f24:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f28:	4d0e      	ldr	r5, [pc, #56]	; (8007f64 <TIM_OC2_SetConfig+0x60>)
 8007f2a:	42a8      	cmp	r0, r5
 8007f2c:	d009      	beq.n	8007f42 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f2e:	4d0d      	ldr	r5, [pc, #52]	; (8007f64 <TIM_OC2_SetConfig+0x60>)
 8007f30:	42a8      	cmp	r0, r5
 8007f32:	d00e      	beq.n	8007f52 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8007f34:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007f36:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007f38:	684a      	ldr	r2, [r1, #4]
 8007f3a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007f3c:	6203      	str	r3, [r0, #32]
}
 8007f3e:	bc30      	pop	{r4, r5}
 8007f40:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f46:	68cd      	ldr	r5, [r1, #12]
 8007f48:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f50:	e7ed      	b.n	8007f2e <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f52:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f56:	694d      	ldr	r5, [r1, #20]
 8007f58:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f5c:	698d      	ldr	r5, [r1, #24]
 8007f5e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8007f62:	e7e7      	b.n	8007f34 <TIM_OC2_SetConfig+0x30>
 8007f64:	40010000 	.word	0x40010000

08007f68 <HAL_TIM_PWM_ConfigChannel>:
{
 8007f68:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007f6a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d066      	beq.n	8008040 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8007f72:	460d      	mov	r5, r1
 8007f74:	4604      	mov	r4, r0
 8007f76:	2301      	movs	r3, #1
 8007f78:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8007f82:	2a0c      	cmp	r2, #12
 8007f84:	d81a      	bhi.n	8007fbc <HAL_TIM_PWM_ConfigChannel+0x54>
 8007f86:	e8df f002 	tbb	[pc, r2]
 8007f8a:	1907      	.short	0x1907
 8007f8c:	19201919 	.word	0x19201919
 8007f90:	19341919 	.word	0x19341919
 8007f94:	1919      	.short	0x1919
 8007f96:	47          	.byte	0x47
 8007f97:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f98:	6800      	ldr	r0, [r0, #0]
 8007f9a:	f7ff fddd 	bl	8007b58 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	6993      	ldr	r3, [r2, #24]
 8007fa2:	f043 0308 	orr.w	r3, r3, #8
 8007fa6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fa8:	6822      	ldr	r2, [r4, #0]
 8007faa:	6993      	ldr	r3, [r2, #24]
 8007fac:	f023 0304 	bic.w	r3, r3, #4
 8007fb0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fb2:	6822      	ldr	r2, [r4, #0]
 8007fb4:	6993      	ldr	r3, [r2, #24]
 8007fb6:	6929      	ldr	r1, [r5, #16]
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007fc8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fca:	6800      	ldr	r0, [r0, #0]
 8007fcc:	f7ff ff9a 	bl	8007f04 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fd0:	6822      	ldr	r2, [r4, #0]
 8007fd2:	6993      	ldr	r3, [r2, #24]
 8007fd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007fd8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fda:	6822      	ldr	r2, [r4, #0]
 8007fdc:	6993      	ldr	r3, [r2, #24]
 8007fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fe2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fe4:	6822      	ldr	r2, [r4, #0]
 8007fe6:	6993      	ldr	r3, [r2, #24]
 8007fe8:	6929      	ldr	r1, [r5, #16]
 8007fea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007fee:	6193      	str	r3, [r2, #24]
      break;
 8007ff0:	e7e4      	b.n	8007fbc <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ff2:	6800      	ldr	r0, [r0, #0]
 8007ff4:	f7ff fdde 	bl	8007bb4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ff8:	6822      	ldr	r2, [r4, #0]
 8007ffa:	69d3      	ldr	r3, [r2, #28]
 8007ffc:	f043 0308 	orr.w	r3, r3, #8
 8008000:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008002:	6822      	ldr	r2, [r4, #0]
 8008004:	69d3      	ldr	r3, [r2, #28]
 8008006:	f023 0304 	bic.w	r3, r3, #4
 800800a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800800c:	6822      	ldr	r2, [r4, #0]
 800800e:	69d3      	ldr	r3, [r2, #28]
 8008010:	6929      	ldr	r1, [r5, #16]
 8008012:	430b      	orrs	r3, r1
 8008014:	61d3      	str	r3, [r2, #28]
      break;
 8008016:	e7d1      	b.n	8007fbc <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008018:	6800      	ldr	r0, [r0, #0]
 800801a:	f7ff fdfd 	bl	8007c18 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800801e:	6822      	ldr	r2, [r4, #0]
 8008020:	69d3      	ldr	r3, [r2, #28]
 8008022:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008026:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008028:	6822      	ldr	r2, [r4, #0]
 800802a:	69d3      	ldr	r3, [r2, #28]
 800802c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008030:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008032:	6822      	ldr	r2, [r4, #0]
 8008034:	69d3      	ldr	r3, [r2, #28]
 8008036:	6929      	ldr	r1, [r5, #16]
 8008038:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800803c:	61d3      	str	r3, [r2, #28]
      break;
 800803e:	e7bd      	b.n	8007fbc <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8008040:	2002      	movs	r0, #2
 8008042:	e7c1      	b.n	8007fc8 <HAL_TIM_PWM_ConfigChannel+0x60>

08008044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008044:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008046:	f001 011f 	and.w	r1, r1, #31
 800804a:	2301      	movs	r3, #1
 800804c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008050:	6a03      	ldr	r3, [r0, #32]
 8008052:	ea23 0304 	bic.w	r3, r3, r4
 8008056:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008058:	6a03      	ldr	r3, [r0, #32]
 800805a:	408a      	lsls	r2, r1
 800805c:	4313      	orrs	r3, r2
 800805e:	6203      	str	r3, [r0, #32]
}
 8008060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008064:	4770      	bx	lr
	...

08008068 <HAL_TIM_PWM_Start>:
{
 8008068:	b510      	push	{r4, lr}
 800806a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800806c:	2201      	movs	r2, #1
 800806e:	6800      	ldr	r0, [r0, #0]
 8008070:	f7ff ffe8 	bl	8008044 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	4a0a      	ldr	r2, [pc, #40]	; (80080a0 <HAL_TIM_PWM_Start+0x38>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00b      	beq.n	8008094 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800807c:	6822      	ldr	r2, [r4, #0]
 800807e:	6893      	ldr	r3, [r2, #8]
 8008080:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008084:	2b06      	cmp	r3, #6
 8008086:	d003      	beq.n	8008090 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8008088:	6813      	ldr	r3, [r2, #0]
 800808a:	f043 0301 	orr.w	r3, r3, #1
 800808e:	6013      	str	r3, [r2, #0]
}
 8008090:	2000      	movs	r0, #0
 8008092:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8008094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800809a:	645a      	str	r2, [r3, #68]	; 0x44
 800809c:	e7ee      	b.n	800807c <HAL_TIM_PWM_Start+0x14>
 800809e:	bf00      	nop
 80080a0:	40010000 	.word	0x40010000

080080a4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d033      	beq.n	8008114 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 80080ac:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80080ae:	2301      	movs	r3, #1
 80080b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b4:	2302      	movs	r3, #2
 80080b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080ba:	6803      	ldr	r3, [r0, #0]
 80080bc:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080be:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080c0:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080c4:	680a      	ldr	r2, [r1, #0]
 80080c6:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ca:	6803      	ldr	r3, [r0, #0]
 80080cc:	4a12      	ldr	r2, [pc, #72]	; (8008118 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d012      	beq.n	80080f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80080d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d6:	d00f      	beq.n	80080f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80080d8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80080dc:	4293      	cmp	r3, r2
 80080de:	d00b      	beq.n	80080f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80080e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d007      	beq.n	80080f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80080e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d003      	beq.n	80080f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80080f0:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d104      	bne.n	8008102 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080f8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080fc:	684a      	ldr	r2, [r1, #4]
 80080fe:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008100:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008102:	2301      	movs	r3, #1
 8008104:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008108:	2300      	movs	r3, #0
 800810a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800810e:	4618      	mov	r0, r3
}
 8008110:	bc30      	pop	{r4, r5}
 8008112:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008114:	2002      	movs	r0, #2
}
 8008116:	4770      	bx	lr
 8008118:	40010000 	.word	0x40010000

0800811c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800811c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008120:	2b01      	cmp	r3, #1
 8008122:	d022      	beq.n	800816a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8008124:	2301      	movs	r3, #1
 8008126:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800812a:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800812c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008130:	688a      	ldr	r2, [r1, #8]
 8008132:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008134:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008138:	684a      	ldr	r2, [r1, #4]
 800813a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800813c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008140:	680a      	ldr	r2, [r1, #0]
 8008142:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008148:	690a      	ldr	r2, [r1, #16]
 800814a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800814c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008150:	694a      	ldr	r2, [r1, #20]
 8008152:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008154:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008158:	69ca      	ldr	r2, [r1, #28]
 800815a:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800815c:	6802      	ldr	r2, [r0, #0]
 800815e:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008160:	2300      	movs	r3, #0
 8008162:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8008166:	4618      	mov	r0, r3
 8008168:	4770      	bx	lr
  __HAL_LOCK(htim);
 800816a:	2002      	movs	r0, #2
}
 800816c:	4770      	bx	lr

0800816e <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800816e:	4770      	bx	lr

08008170 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008170:	4770      	bx	lr

08008172 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008172:	6802      	ldr	r2, [r0, #0]
 8008174:	68d3      	ldr	r3, [r2, #12]
 8008176:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800817a:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800817c:	2320      	movs	r3, #32
 800817e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8008182:	4770      	bx	lr

08008184 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008184:	6802      	ldr	r2, [r0, #0]
 8008186:	68d3      	ldr	r3, [r2, #12]
 8008188:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800818c:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818e:	6802      	ldr	r2, [r0, #0]
 8008190:	6953      	ldr	r3, [r2, #20]
 8008192:	f023 0301 	bic.w	r3, r3, #1
 8008196:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008198:	2320      	movs	r3, #32
 800819a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800819e:	4770      	bx	lr

080081a0 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081a0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b21      	cmp	r3, #33	; 0x21
 80081a8:	d12a      	bne.n	8008200 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80081aa:	6883      	ldr	r3, [r0, #8]
 80081ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b0:	d016      	beq.n	80081e0 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80081b2:	6a03      	ldr	r3, [r0, #32]
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	6202      	str	r2, [r0, #32]
 80081b8:	781a      	ldrb	r2, [r3, #0]
 80081ba:	6803      	ldr	r3, [r0, #0]
 80081bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80081be:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80081c0:	3b01      	subs	r3, #1
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	84c3      	strh	r3, [r0, #38]	; 0x26
 80081c6:	b9eb      	cbnz	r3, 8008204 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80081c8:	6802      	ldr	r2, [r0, #0]
 80081ca:	68d3      	ldr	r3, [r2, #12]
 80081cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081d0:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80081d2:	6802      	ldr	r2, [r0, #0]
 80081d4:	68d3      	ldr	r3, [r2, #12]
 80081d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081da:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 80081dc:	2000      	movs	r0, #0
 80081de:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80081e0:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	6802      	ldr	r2, [r0, #0]
 80081e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ea:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80081ec:	6903      	ldr	r3, [r0, #16]
 80081ee:	b91b      	cbnz	r3, 80081f8 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 80081f0:	6a03      	ldr	r3, [r0, #32]
 80081f2:	3302      	adds	r3, #2
 80081f4:	6203      	str	r3, [r0, #32]
 80081f6:	e7e2      	b.n	80081be <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 80081f8:	6a03      	ldr	r3, [r0, #32]
 80081fa:	3301      	adds	r3, #1
 80081fc:	6203      	str	r3, [r0, #32]
 80081fe:	e7de      	b.n	80081be <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8008200:	2002      	movs	r0, #2
 8008202:	4770      	bx	lr
    return HAL_OK;
 8008204:	2000      	movs	r0, #0
  }
}
 8008206:	4770      	bx	lr

08008208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008208:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800820c:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800820e:	6802      	ldr	r2, [r0, #0]
 8008210:	6913      	ldr	r3, [r2, #16]
 8008212:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008216:	68c1      	ldr	r1, [r0, #12]
 8008218:	430b      	orrs	r3, r1
 800821a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800821c:	6883      	ldr	r3, [r0, #8]
 800821e:	6902      	ldr	r2, [r0, #16]
 8008220:	4313      	orrs	r3, r2
 8008222:	6942      	ldr	r2, [r0, #20]
 8008224:	4313      	orrs	r3, r2
 8008226:	69c2      	ldr	r2, [r0, #28]
 8008228:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800822a:	6801      	ldr	r1, [r0, #0]
 800822c:	68cb      	ldr	r3, [r1, #12]
 800822e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008232:	f023 030c 	bic.w	r3, r3, #12
 8008236:	4313      	orrs	r3, r2
 8008238:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800823a:	6802      	ldr	r2, [r0, #0]
 800823c:	6953      	ldr	r3, [r2, #20]
 800823e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008242:	6981      	ldr	r1, [r0, #24]
 8008244:	430b      	orrs	r3, r1
 8008246:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008248:	69c3      	ldr	r3, [r0, #28]
 800824a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800824e:	d03b      	beq.n	80082c8 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008250:	6803      	ldr	r3, [r0, #0]
 8008252:	4a71      	ldr	r2, [pc, #452]	; (8008418 <UART_SetConfig+0x210>)
 8008254:	4293      	cmp	r3, r2
 8008256:	f000 80ab 	beq.w	80083b0 <UART_SetConfig+0x1a8>
 800825a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800825e:	4293      	cmp	r3, r2
 8008260:	f000 80a6 	beq.w	80083b0 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008264:	f7fe fedc 	bl	8007020 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008268:	f04f 0900 	mov.w	r9, #0
 800826c:	1806      	adds	r6, r0, r0
 800826e:	eb49 0709 	adc.w	r7, r9, r9
 8008272:	eb16 0b00 	adds.w	fp, r6, r0
 8008276:	eb47 0c09 	adc.w	ip, r7, r9
 800827a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800827e:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8008282:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8008286:	4693      	mov	fp, r2
 8008288:	469c      	mov	ip, r3
 800828a:	6863      	ldr	r3, [r4, #4]
 800828c:	009a      	lsls	r2, r3, #2
 800828e:	0f9b      	lsrs	r3, r3, #30
 8008290:	eb10 000b 	adds.w	r0, r0, fp
 8008294:	eb49 010c 	adc.w	r1, r9, ip
 8008298:	f7f8 fc38 	bl	8000b0c <__aeabi_uldivmod>
 800829c:	4d5f      	ldr	r5, [pc, #380]	; (800841c <UART_SetConfig+0x214>)
 800829e:	fba5 3200 	umull	r3, r2, r5, r0
 80082a2:	0951      	lsrs	r1, r2, #5
 80082a4:	2264      	movs	r2, #100	; 0x64
 80082a6:	fb02 0211 	mls	r2, r2, r1, r0
 80082aa:	0113      	lsls	r3, r2, #4
 80082ac:	3332      	adds	r3, #50	; 0x32
 80082ae:	fba5 2303 	umull	r2, r3, r5, r3
 80082b2:	095b      	lsrs	r3, r3, #5
 80082b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80082b8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80082bc:	f003 030f 	and.w	r3, r3, #15
 80082c0:	6821      	ldr	r1, [r4, #0]
 80082c2:	4413      	add	r3, r2
 80082c4:	608b      	str	r3, [r1, #8]
    }
  }
}
 80082c6:	e0a4      	b.n	8008412 <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082c8:	6803      	ldr	r3, [r0, #0]
 80082ca:	4a53      	ldr	r2, [pc, #332]	; (8008418 <UART_SetConfig+0x210>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d039      	beq.n	8008344 <UART_SetConfig+0x13c>
 80082d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d035      	beq.n	8008344 <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80082d8:	f7fe fea2 	bl	8007020 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082dc:	4683      	mov	fp, r0
 80082de:	f04f 0c00 	mov.w	ip, #0
 80082e2:	1806      	adds	r6, r0, r0
 80082e4:	eb4c 070c 	adc.w	r7, ip, ip
 80082e8:	eb16 0800 	adds.w	r8, r6, r0
 80082ec:	eb47 090c 	adc.w	r9, r7, ip
 80082f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082fc:	4690      	mov	r8, r2
 80082fe:	4699      	mov	r9, r3
 8008300:	6862      	ldr	r2, [r4, #4]
 8008302:	2100      	movs	r1, #0
 8008304:	1892      	adds	r2, r2, r2
 8008306:	eb41 0301 	adc.w	r3, r1, r1
 800830a:	eb1b 0008 	adds.w	r0, fp, r8
 800830e:	eb4c 0109 	adc.w	r1, ip, r9
 8008312:	f7f8 fbfb 	bl	8000b0c <__aeabi_uldivmod>
 8008316:	4d41      	ldr	r5, [pc, #260]	; (800841c <UART_SetConfig+0x214>)
 8008318:	fba5 3200 	umull	r3, r2, r5, r0
 800831c:	0951      	lsrs	r1, r2, #5
 800831e:	2264      	movs	r2, #100	; 0x64
 8008320:	fb02 0211 	mls	r2, r2, r1, r0
 8008324:	00d3      	lsls	r3, r2, #3
 8008326:	3332      	adds	r3, #50	; 0x32
 8008328:	fba5 2303 	umull	r2, r3, r5, r3
 800832c:	095b      	lsrs	r3, r3, #5
 800832e:	005a      	lsls	r2, r3, #1
 8008330:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8008334:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008338:	f003 0307 	and.w	r3, r3, #7
 800833c:	6821      	ldr	r1, [r4, #0]
 800833e:	4413      	add	r3, r2
 8008340:	608b      	str	r3, [r1, #8]
 8008342:	e066      	b.n	8008412 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008344:	f7fe fe7c 	bl	8007040 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008348:	4680      	mov	r8, r0
 800834a:	f04f 0900 	mov.w	r9, #0
 800834e:	1806      	adds	r6, r0, r0
 8008350:	eb49 0709 	adc.w	r7, r9, r9
 8008354:	eb16 0b00 	adds.w	fp, r6, r0
 8008358:	eb47 0c09 	adc.w	ip, r7, r9
 800835c:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8008360:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8008364:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8008368:	4693      	mov	fp, r2
 800836a:	469c      	mov	ip, r3
 800836c:	6862      	ldr	r2, [r4, #4]
 800836e:	2100      	movs	r1, #0
 8008370:	1892      	adds	r2, r2, r2
 8008372:	eb41 0301 	adc.w	r3, r1, r1
 8008376:	eb18 000b 	adds.w	r0, r8, fp
 800837a:	eb49 010c 	adc.w	r1, r9, ip
 800837e:	f7f8 fbc5 	bl	8000b0c <__aeabi_uldivmod>
 8008382:	4d26      	ldr	r5, [pc, #152]	; (800841c <UART_SetConfig+0x214>)
 8008384:	fba5 3200 	umull	r3, r2, r5, r0
 8008388:	0951      	lsrs	r1, r2, #5
 800838a:	2264      	movs	r2, #100	; 0x64
 800838c:	fb02 0211 	mls	r2, r2, r1, r0
 8008390:	00d3      	lsls	r3, r2, #3
 8008392:	3332      	adds	r3, #50	; 0x32
 8008394:	fba5 2303 	umull	r2, r3, r5, r3
 8008398:	095b      	lsrs	r3, r3, #5
 800839a:	005a      	lsls	r2, r3, #1
 800839c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80083a0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80083a4:	f003 0307 	and.w	r3, r3, #7
 80083a8:	6821      	ldr	r1, [r4, #0]
 80083aa:	4413      	add	r3, r2
 80083ac:	608b      	str	r3, [r1, #8]
 80083ae:	e030      	b.n	8008412 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 80083b0:	f7fe fe46 	bl	8007040 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083b4:	f04f 0900 	mov.w	r9, #0
 80083b8:	1806      	adds	r6, r0, r0
 80083ba:	eb49 0709 	adc.w	r7, r9, r9
 80083be:	eb16 0b00 	adds.w	fp, r6, r0
 80083c2:	eb47 0c09 	adc.w	ip, r7, r9
 80083c6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80083ca:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80083ce:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 80083d2:	4693      	mov	fp, r2
 80083d4:	469c      	mov	ip, r3
 80083d6:	6863      	ldr	r3, [r4, #4]
 80083d8:	009a      	lsls	r2, r3, #2
 80083da:	0f9b      	lsrs	r3, r3, #30
 80083dc:	eb10 000b 	adds.w	r0, r0, fp
 80083e0:	eb49 010c 	adc.w	r1, r9, ip
 80083e4:	f7f8 fb92 	bl	8000b0c <__aeabi_uldivmod>
 80083e8:	4d0c      	ldr	r5, [pc, #48]	; (800841c <UART_SetConfig+0x214>)
 80083ea:	fba5 3200 	umull	r3, r2, r5, r0
 80083ee:	0951      	lsrs	r1, r2, #5
 80083f0:	2264      	movs	r2, #100	; 0x64
 80083f2:	fb02 0211 	mls	r2, r2, r1, r0
 80083f6:	0113      	lsls	r3, r2, #4
 80083f8:	3332      	adds	r3, #50	; 0x32
 80083fa:	fba5 2303 	umull	r2, r3, r5, r3
 80083fe:	095b      	lsrs	r3, r3, #5
 8008400:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008404:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008408:	f003 030f 	and.w	r3, r3, #15
 800840c:	6821      	ldr	r1, [r4, #0]
 800840e:	4413      	add	r3, r2
 8008410:	608b      	str	r3, [r1, #8]
}
 8008412:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8008416:	bf00      	nop
 8008418:	40011000 	.word	0x40011000
 800841c:	51eb851f 	.word	0x51eb851f

08008420 <UART_WaitOnFlagUntilTimeout>:
{
 8008420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008424:	4605      	mov	r5, r0
 8008426:	460f      	mov	r7, r1
 8008428:	4616      	mov	r6, r2
 800842a:	4698      	mov	r8, r3
 800842c:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842e:	682b      	ldr	r3, [r5, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	ea37 0303 	bics.w	r3, r7, r3
 8008436:	bf0c      	ite	eq
 8008438:	2301      	moveq	r3, #1
 800843a:	2300      	movne	r3, #0
 800843c:	42b3      	cmp	r3, r6
 800843e:	d11d      	bne.n	800847c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8008440:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8008444:	d0f3      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008446:	b12c      	cbz	r4, 8008454 <UART_WaitOnFlagUntilTimeout+0x34>
 8008448:	f7fc ff78 	bl	800533c <HAL_GetTick>
 800844c:	eba0 0008 	sub.w	r0, r0, r8
 8008450:	42a0      	cmp	r0, r4
 8008452:	d9ec      	bls.n	800842e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008454:	682a      	ldr	r2, [r5, #0]
 8008456:	68d3      	ldr	r3, [r2, #12]
 8008458:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800845c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845e:	682a      	ldr	r2, [r5, #0]
 8008460:	6953      	ldr	r3, [r2, #20]
 8008462:	f023 0301 	bic.w	r3, r3, #1
 8008466:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8008468:	2320      	movs	r3, #32
 800846a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800846e:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8008472:	2300      	movs	r3, #0
 8008474:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8008478:	2003      	movs	r0, #3
 800847a:	e000      	b.n	800847e <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 800847c:	2000      	movs	r0, #0
}
 800847e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008482 <HAL_UART_Init>:
  if (huart == NULL)
 8008482:	b358      	cbz	r0, 80084dc <HAL_UART_Init+0x5a>
{
 8008484:	b510      	push	{r4, lr}
 8008486:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008488:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800848c:	b30b      	cbz	r3, 80084d2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800848e:	2324      	movs	r3, #36	; 0x24
 8008490:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8008494:	6822      	ldr	r2, [r4, #0]
 8008496:	68d3      	ldr	r3, [r2, #12]
 8008498:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800849c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800849e:	4620      	mov	r0, r4
 80084a0:	f7ff feb2 	bl	8008208 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084a4:	6822      	ldr	r2, [r4, #0]
 80084a6:	6913      	ldr	r3, [r2, #16]
 80084a8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80084ac:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084ae:	6822      	ldr	r2, [r4, #0]
 80084b0:	6953      	ldr	r3, [r2, #20]
 80084b2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80084b6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80084b8:	6822      	ldr	r2, [r4, #0]
 80084ba:	68d3      	ldr	r3, [r2, #12]
 80084bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80084c0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084c2:	2000      	movs	r0, #0
 80084c4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80084c6:	2320      	movs	r3, #32
 80084c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80084cc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80084d0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80084d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80084d6:	f7fc f98d 	bl	80047f4 <HAL_UART_MspInit>
 80084da:	e7d8      	b.n	800848e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80084dc:	2001      	movs	r0, #1
}
 80084de:	4770      	bx	lr

080084e0 <HAL_UART_Transmit>:
{
 80084e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084e4:	b083      	sub	sp, #12
 80084e6:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80084e8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b20      	cmp	r3, #32
 80084f0:	d156      	bne.n	80085a0 <HAL_UART_Transmit+0xc0>
 80084f2:	4604      	mov	r4, r0
 80084f4:	460d      	mov	r5, r1
 80084f6:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80084f8:	2900      	cmp	r1, #0
 80084fa:	d056      	beq.n	80085aa <HAL_UART_Transmit+0xca>
 80084fc:	2a00      	cmp	r2, #0
 80084fe:	d056      	beq.n	80085ae <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 8008500:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8008504:	2b01      	cmp	r3, #1
 8008506:	d054      	beq.n	80085b2 <HAL_UART_Transmit+0xd2>
 8008508:	2301      	movs	r3, #1
 800850a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800850e:	f04f 0900 	mov.w	r9, #0
 8008512:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008516:	2321      	movs	r3, #33	; 0x21
 8008518:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800851c:	f7fc ff0e 	bl	800533c <HAL_GetTick>
 8008520:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8008522:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8008526:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800852a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800852e:	e010      	b.n	8008552 <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008530:	9600      	str	r6, [sp, #0]
 8008532:	463b      	mov	r3, r7
 8008534:	2200      	movs	r2, #0
 8008536:	2180      	movs	r1, #128	; 0x80
 8008538:	4620      	mov	r0, r4
 800853a:	f7ff ff71 	bl	8008420 <UART_WaitOnFlagUntilTimeout>
 800853e:	2800      	cmp	r0, #0
 8008540:	d139      	bne.n	80085b6 <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008542:	882b      	ldrh	r3, [r5, #0]
 8008544:	6822      	ldr	r2, [r4, #0]
 8008546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800854c:	6923      	ldr	r3, [r4, #16]
 800854e:	b9c3      	cbnz	r3, 8008582 <HAL_UART_Transmit+0xa2>
          pData += 2U;
 8008550:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8008552:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008554:	b29b      	uxth	r3, r3
 8008556:	b1b3      	cbz	r3, 8008586 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8008558:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800855a:	3b01      	subs	r3, #1
 800855c:	b29b      	uxth	r3, r3
 800855e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008560:	68a3      	ldr	r3, [r4, #8]
 8008562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008566:	d0e3      	beq.n	8008530 <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008568:	9600      	str	r6, [sp, #0]
 800856a:	463b      	mov	r3, r7
 800856c:	2200      	movs	r2, #0
 800856e:	2180      	movs	r1, #128	; 0x80
 8008570:	4620      	mov	r0, r4
 8008572:	f7ff ff55 	bl	8008420 <UART_WaitOnFlagUntilTimeout>
 8008576:	bb00      	cbnz	r0, 80085ba <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008578:	782a      	ldrb	r2, [r5, #0]
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	605a      	str	r2, [r3, #4]
 800857e:	3501      	adds	r5, #1
 8008580:	e7e7      	b.n	8008552 <HAL_UART_Transmit+0x72>
          pData += 1U;
 8008582:	3501      	adds	r5, #1
 8008584:	e7e5      	b.n	8008552 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008586:	9600      	str	r6, [sp, #0]
 8008588:	463b      	mov	r3, r7
 800858a:	2200      	movs	r2, #0
 800858c:	2140      	movs	r1, #64	; 0x40
 800858e:	4620      	mov	r0, r4
 8008590:	f7ff ff46 	bl	8008420 <UART_WaitOnFlagUntilTimeout>
 8008594:	4603      	mov	r3, r0
 8008596:	b990      	cbnz	r0, 80085be <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 8008598:	2220      	movs	r2, #32
 800859a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    return HAL_OK;
 800859e:	e000      	b.n	80085a2 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80085a0:	2302      	movs	r3, #2
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	b003      	add	sp, #12
 80085a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e7f9      	b.n	80085a2 <HAL_UART_Transmit+0xc2>
 80085ae:	2301      	movs	r3, #1
 80085b0:	e7f7      	b.n	80085a2 <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 80085b2:	2302      	movs	r3, #2
 80085b4:	e7f5      	b.n	80085a2 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e7f3      	b.n	80085a2 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e7f1      	b.n	80085a2 <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e7ef      	b.n	80085a2 <HAL_UART_Transmit+0xc2>

080085c2 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80085c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b20      	cmp	r3, #32
 80085ca:	d116      	bne.n	80085fa <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 80085cc:	b1b9      	cbz	r1, 80085fe <HAL_UART_Transmit_IT+0x3c>
 80085ce:	b1c2      	cbz	r2, 8008602 <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 80085d0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d016      	beq.n	8008606 <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 80085d8:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 80085da:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 80085dc:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085de:	2300      	movs	r3, #0
 80085e0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085e2:	2221      	movs	r2, #33	; 0x21
 80085e4:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80085e8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80085ec:	6801      	ldr	r1, [r0, #0]
 80085ee:	68ca      	ldr	r2, [r1, #12]
 80085f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085f4:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80085f6:	4618      	mov	r0, r3
 80085f8:	4770      	bx	lr
    return HAL_BUSY;
 80085fa:	2002      	movs	r0, #2
 80085fc:	4770      	bx	lr
      return HAL_ERROR;
 80085fe:	2001      	movs	r0, #1
 8008600:	4770      	bx	lr
 8008602:	2001      	movs	r0, #1
 8008604:	4770      	bx	lr
    __HAL_LOCK(huart);
 8008606:	2002      	movs	r0, #2
}
 8008608:	4770      	bx	lr
	...

0800860c <HAL_UART_Receive_DMA>:
{
 800860c:	b530      	push	{r4, r5, lr}
 800860e:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8008610:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8008614:	b2e4      	uxtb	r4, r4
 8008616:	2c20      	cmp	r4, #32
 8008618:	d13d      	bne.n	8008696 <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 800861a:	2900      	cmp	r1, #0
 800861c:	d03e      	beq.n	800869c <HAL_UART_Receive_DMA+0x90>
 800861e:	2a00      	cmp	r2, #0
 8008620:	d03e      	beq.n	80086a0 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 8008622:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8008626:	2b01      	cmp	r3, #1
 8008628:	d03c      	beq.n	80086a4 <HAL_UART_Receive_DMA+0x98>
 800862a:	4613      	mov	r3, r2
 800862c:	460a      	mov	r2, r1
 800862e:	4604      	mov	r4, r0
 8008630:	2101      	movs	r1, #1
 8008632:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8008636:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8008638:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800863a:	2500      	movs	r5, #0
 800863c:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800863e:	2122      	movs	r1, #34	; 0x22
 8008640:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008644:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008646:	4818      	ldr	r0, [pc, #96]	; (80086a8 <HAL_UART_Receive_DMA+0x9c>)
 8008648:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800864a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800864c:	4817      	ldr	r0, [pc, #92]	; (80086ac <HAL_UART_Receive_DMA+0xa0>)
 800864e:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008652:	4817      	ldr	r0, [pc, #92]	; (80086b0 <HAL_UART_Receive_DMA+0xa4>)
 8008654:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8008656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008658:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800865a:	6821      	ldr	r1, [r4, #0]
 800865c:	3104      	adds	r1, #4
 800865e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008660:	f7fd f95e 	bl	8005920 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008664:	9501      	str	r5, [sp, #4]
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	9201      	str	r2, [sp, #4]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	9201      	str	r2, [sp, #4]
 8008670:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8008672:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008676:	68da      	ldr	r2, [r3, #12]
 8008678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800867c:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800867e:	6822      	ldr	r2, [r4, #0]
 8008680:	6953      	ldr	r3, [r2, #20]
 8008682:	f043 0301 	orr.w	r3, r3, #1
 8008686:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008688:	6822      	ldr	r2, [r4, #0]
 800868a:	6953      	ldr	r3, [r2, #20]
 800868c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008690:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8008692:	4628      	mov	r0, r5
 8008694:	e000      	b.n	8008698 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 8008696:	2002      	movs	r0, #2
}
 8008698:	b003      	add	sp, #12
 800869a:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 800869c:	2001      	movs	r0, #1
 800869e:	e7fb      	b.n	8008698 <HAL_UART_Receive_DMA+0x8c>
 80086a0:	2001      	movs	r0, #1
 80086a2:	e7f9      	b.n	8008698 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 80086a4:	2002      	movs	r0, #2
 80086a6:	e7f7      	b.n	8008698 <HAL_UART_Receive_DMA+0x8c>
 80086a8:	0800871d 	.word	0x0800871d
 80086ac:	080087f9 	.word	0x080087f9
 80086b0:	08008805 	.word	0x08008805

080086b4 <HAL_UART_AbortTransmit>:
{
 80086b4:	b510      	push	{r4, lr}
 80086b6:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80086b8:	6802      	ldr	r2, [r0, #0]
 80086ba:	68d3      	ldr	r3, [r2, #12]
 80086bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80086c0:	60d3      	str	r3, [r2, #12]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80086c2:	6803      	ldr	r3, [r0, #0]
 80086c4:	695a      	ldr	r2, [r3, #20]
 80086c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80086ca:	d00b      	beq.n	80086e4 <HAL_UART_AbortTransmit+0x30>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086cc:	695a      	ldr	r2, [r3, #20]
 80086ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086d2:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 80086d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80086d6:	b12b      	cbz	r3, 80086e4 <HAL_UART_AbortTransmit+0x30>
      huart->hdmatx->XferAbortCallback = NULL;
 80086d8:	2200      	movs	r2, #0
 80086da:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80086dc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80086de:	f7fd f954 	bl	800598a <HAL_DMA_Abort>
 80086e2:	b928      	cbnz	r0, 80086f0 <HAL_UART_AbortTransmit+0x3c>
  huart->TxXferCount = 0x00U;
 80086e4:	2000      	movs	r0, #0
 80086e6:	84e0      	strh	r0, [r4, #38]	; 0x26
  huart->gState = HAL_UART_STATE_READY;
 80086e8:	2320      	movs	r3, #32
 80086ea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80086ee:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80086f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80086f2:	f7fd fa95 	bl	8005c20 <HAL_DMA_GetError>
 80086f6:	2820      	cmp	r0, #32
 80086f8:	d1f4      	bne.n	80086e4 <HAL_UART_AbortTransmit+0x30>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086fa:	2310      	movs	r3, #16
 80086fc:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80086fe:	2003      	movs	r0, #3
 8008700:	e7f5      	b.n	80086ee <HAL_UART_AbortTransmit+0x3a>

08008702 <UART_EndTransmit_IT>:
{
 8008702:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008704:	6801      	ldr	r1, [r0, #0]
 8008706:	68cb      	ldr	r3, [r1, #12]
 8008708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800870c:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800870e:	2320      	movs	r3, #32
 8008710:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8008714:	f7fb fb36 	bl	8003d84 <HAL_UART_TxCpltCallback>
}
 8008718:	2000      	movs	r0, #0
 800871a:	bd08      	pop	{r3, pc}

0800871c <UART_DMAReceiveCplt>:
{
 800871c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800871e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008720:	6802      	ldr	r2, [r0, #0]
 8008722:	6812      	ldr	r2, [r2, #0]
 8008724:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008728:	d113      	bne.n	8008752 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 800872a:	2200      	movs	r2, #0
 800872c:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800872e:	6819      	ldr	r1, [r3, #0]
 8008730:	68ca      	ldr	r2, [r1, #12]
 8008732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008736:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008738:	6819      	ldr	r1, [r3, #0]
 800873a:	694a      	ldr	r2, [r1, #20]
 800873c:	f022 0201 	bic.w	r2, r2, #1
 8008740:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008742:	6819      	ldr	r1, [r3, #0]
 8008744:	694a      	ldr	r2, [r1, #20]
 8008746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800874a:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800874c:	2220      	movs	r2, #32
 800874e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8008752:	4618      	mov	r0, r3
 8008754:	f7fb fb15 	bl	8003d82 <HAL_UART_RxCpltCallback>
}
 8008758:	bd08      	pop	{r3, pc}

0800875a <UART_Receive_IT>:
{
 800875a:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800875c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b22      	cmp	r3, #34	; 0x22
 8008764:	d145      	bne.n	80087f2 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008766:	6883      	ldr	r3, [r0, #8]
 8008768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800876c:	d00e      	beq.n	800878c <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800876e:	6903      	ldr	r3, [r0, #16]
 8008770:	bb03      	cbnz	r3, 80087b4 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008772:	6803      	ldr	r3, [r0, #0]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008778:	1c59      	adds	r1, r3, #1
 800877a:	6281      	str	r1, [r0, #40]	; 0x28
 800877c:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800877e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8008780:	3b01      	subs	r3, #1
 8008782:	b29b      	uxth	r3, r3
 8008784:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8008786:	b1f3      	cbz	r3, 80087c6 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8008788:	2000      	movs	r0, #0
 800878a:	e033      	b.n	80087f4 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800878c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800878e:	6903      	ldr	r3, [r0, #16]
 8008790:	b943      	cbnz	r3, 80087a4 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008792:	6803      	ldr	r3, [r0, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800879a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800879c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800879e:	3302      	adds	r3, #2
 80087a0:	6283      	str	r3, [r0, #40]	; 0x28
 80087a2:	e7ec      	b.n	800877e <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80087a4:	6803      	ldr	r3, [r0, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 80087ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80087ae:	3301      	adds	r3, #1
 80087b0:	6283      	str	r3, [r0, #40]	; 0x28
 80087b2:	e7e4      	b.n	800877e <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087b4:	6803      	ldr	r3, [r0, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80087ba:	1c51      	adds	r1, r2, #1
 80087bc:	6281      	str	r1, [r0, #40]	; 0x28
 80087be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c2:	7013      	strb	r3, [r2, #0]
 80087c4:	e7db      	b.n	800877e <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087c6:	6802      	ldr	r2, [r0, #0]
 80087c8:	68d3      	ldr	r3, [r2, #12]
 80087ca:	f023 0320 	bic.w	r3, r3, #32
 80087ce:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087d0:	6802      	ldr	r2, [r0, #0]
 80087d2:	68d3      	ldr	r3, [r2, #12]
 80087d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087d8:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087da:	6802      	ldr	r2, [r0, #0]
 80087dc:	6953      	ldr	r3, [r2, #20]
 80087de:	f023 0301 	bic.w	r3, r3, #1
 80087e2:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80087e4:	2320      	movs	r3, #32
 80087e6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80087ea:	f7fb faca 	bl	8003d82 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80087ee:	2000      	movs	r0, #0
 80087f0:	e000      	b.n	80087f4 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 80087f2:	2002      	movs	r0, #2
}
 80087f4:	bd08      	pop	{r3, pc}

080087f6 <HAL_UART_RxHalfCpltCallback>:
}
 80087f6:	4770      	bx	lr

080087f8 <UART_DMARxHalfCplt>:
{
 80087f8:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 80087fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80087fc:	f7ff fffb 	bl	80087f6 <HAL_UART_RxHalfCpltCallback>
}
 8008800:	bd08      	pop	{r3, pc}

08008802 <HAL_UART_ErrorCallback>:
}
 8008802:	4770      	bx	lr

08008804 <UART_DMAError>:
{
 8008804:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008806:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800880c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b21      	cmp	r3, #33	; 0x21
 8008814:	d010      	beq.n	8008838 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	695a      	ldr	r2, [r3, #20]
 800881a:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800881e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b22      	cmp	r3, #34	; 0x22
 8008826:	d011      	beq.n	800884c <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008828:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800882a:	f043 0310 	orr.w	r3, r3, #16
 800882e:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8008830:	4620      	mov	r0, r4
 8008832:	f7ff ffe6 	bl	8008802 <HAL_UART_ErrorCallback>
}
 8008836:	bd10      	pop	{r4, pc}
 8008838:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800883c:	2a00      	cmp	r2, #0
 800883e:	d0ea      	beq.n	8008816 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8008840:	2300      	movs	r3, #0
 8008842:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008844:	4620      	mov	r0, r4
 8008846:	f7ff fc94 	bl	8008172 <UART_EndTxTransfer>
 800884a:	e7e4      	b.n	8008816 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800884c:	2a00      	cmp	r2, #0
 800884e:	d0eb      	beq.n	8008828 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8008850:	2300      	movs	r3, #0
 8008852:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008854:	4620      	mov	r0, r4
 8008856:	f7ff fc95 	bl	8008184 <UART_EndRxTransfer>
 800885a:	e7e5      	b.n	8008828 <UART_DMAError+0x24>

0800885c <HAL_UART_IRQHandler>:
{
 800885c:	b510      	push	{r4, lr}
 800885e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008860:	6802      	ldr	r2, [r0, #0]
 8008862:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008864:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008866:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8008868:	f013 000f 	ands.w	r0, r3, #15
 800886c:	d105      	bne.n	800887a <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800886e:	f013 0f20 	tst.w	r3, #32
 8008872:	d002      	beq.n	800887a <HAL_UART_IRQHandler+0x1e>
 8008874:	f011 0f20 	tst.w	r1, #32
 8008878:	d156      	bne.n	8008928 <HAL_UART_IRQHandler+0xcc>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800887a:	2800      	cmp	r0, #0
 800887c:	d06a      	beq.n	8008954 <HAL_UART_IRQHandler+0xf8>
 800887e:	f012 0201 	ands.w	r2, r2, #1
 8008882:	d102      	bne.n	800888a <HAL_UART_IRQHandler+0x2e>
 8008884:	f411 7f90 	tst.w	r1, #288	; 0x120
 8008888:	d064      	beq.n	8008954 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800888a:	f013 0f01 	tst.w	r3, #1
 800888e:	d006      	beq.n	800889e <HAL_UART_IRQHandler+0x42>
 8008890:	f411 7f80 	tst.w	r1, #256	; 0x100
 8008894:	d003      	beq.n	800889e <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008896:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008898:	f040 0001 	orr.w	r0, r0, #1
 800889c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800889e:	f013 0f04 	tst.w	r3, #4
 80088a2:	d004      	beq.n	80088ae <HAL_UART_IRQHandler+0x52>
 80088a4:	b11a      	cbz	r2, 80088ae <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80088a8:	f040 0002 	orr.w	r0, r0, #2
 80088ac:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088ae:	f013 0f02 	tst.w	r3, #2
 80088b2:	d004      	beq.n	80088be <HAL_UART_IRQHandler+0x62>
 80088b4:	b11a      	cbz	r2, 80088be <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80088b8:	f040 0004 	orr.w	r0, r0, #4
 80088bc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80088be:	f013 0f08 	tst.w	r3, #8
 80088c2:	d007      	beq.n	80088d4 <HAL_UART_IRQHandler+0x78>
 80088c4:	f011 0f20 	tst.w	r1, #32
 80088c8:	d100      	bne.n	80088cc <HAL_UART_IRQHandler+0x70>
 80088ca:	b11a      	cbz	r2, 80088d4 <HAL_UART_IRQHandler+0x78>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088cc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80088ce:	f042 0208 	orr.w	r2, r2, #8
 80088d2:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80088d6:	2a00      	cmp	r2, #0
 80088d8:	d048      	beq.n	800896c <HAL_UART_IRQHandler+0x110>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088da:	f013 0f20 	tst.w	r3, #32
 80088de:	d002      	beq.n	80088e6 <HAL_UART_IRQHandler+0x8a>
 80088e0:	f011 0f20 	tst.w	r1, #32
 80088e4:	d124      	bne.n	8008930 <HAL_UART_IRQHandler+0xd4>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80088f0:	f012 0f08 	tst.w	r2, #8
 80088f4:	d100      	bne.n	80088f8 <HAL_UART_IRQHandler+0x9c>
 80088f6:	b33b      	cbz	r3, 8008948 <HAL_UART_IRQHandler+0xec>
        UART_EndRxTransfer(huart);
 80088f8:	4620      	mov	r0, r4
 80088fa:	f7ff fc43 	bl	8008184 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	695a      	ldr	r2, [r3, #20]
 8008902:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008906:	d01b      	beq.n	8008940 <HAL_UART_IRQHandler+0xe4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008908:	695a      	ldr	r2, [r3, #20]
 800890a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800890e:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8008910:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008912:	b18b      	cbz	r3, 8008938 <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008914:	4a1a      	ldr	r2, [pc, #104]	; (8008980 <HAL_UART_IRQHandler+0x124>)
 8008916:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008918:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800891a:	f7fd f880 	bl	8005a1e <HAL_DMA_Abort_IT>
 800891e:	b328      	cbz	r0, 800896c <HAL_UART_IRQHandler+0x110>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008920:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008922:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008924:	4798      	blx	r3
 8008926:	e021      	b.n	800896c <HAL_UART_IRQHandler+0x110>
      UART_Receive_IT(huart);
 8008928:	4620      	mov	r0, r4
 800892a:	f7ff ff16 	bl	800875a <UART_Receive_IT>
      return;
 800892e:	e01d      	b.n	800896c <HAL_UART_IRQHandler+0x110>
        UART_Receive_IT(huart);
 8008930:	4620      	mov	r0, r4
 8008932:	f7ff ff12 	bl	800875a <UART_Receive_IT>
 8008936:	e7d6      	b.n	80088e6 <HAL_UART_IRQHandler+0x8a>
            HAL_UART_ErrorCallback(huart);
 8008938:	4620      	mov	r0, r4
 800893a:	f7ff ff62 	bl	8008802 <HAL_UART_ErrorCallback>
 800893e:	e015      	b.n	800896c <HAL_UART_IRQHandler+0x110>
          HAL_UART_ErrorCallback(huart);
 8008940:	4620      	mov	r0, r4
 8008942:	f7ff ff5e 	bl	8008802 <HAL_UART_ErrorCallback>
 8008946:	e011      	b.n	800896c <HAL_UART_IRQHandler+0x110>
        HAL_UART_ErrorCallback(huart);
 8008948:	4620      	mov	r0, r4
 800894a:	f7ff ff5a 	bl	8008802 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800894e:	2300      	movs	r3, #0
 8008950:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008952:	e00b      	b.n	800896c <HAL_UART_IRQHandler+0x110>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008954:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008958:	d002      	beq.n	8008960 <HAL_UART_IRQHandler+0x104>
 800895a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800895e:	d106      	bne.n	800896e <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008960:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008964:	d002      	beq.n	800896c <HAL_UART_IRQHandler+0x110>
 8008966:	f011 0f40 	tst.w	r1, #64	; 0x40
 800896a:	d104      	bne.n	8008976 <HAL_UART_IRQHandler+0x11a>
}
 800896c:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 800896e:	4620      	mov	r0, r4
 8008970:	f7ff fc16 	bl	80081a0 <UART_Transmit_IT>
    return;
 8008974:	e7fa      	b.n	800896c <HAL_UART_IRQHandler+0x110>
    UART_EndTransmit_IT(huart);
 8008976:	4620      	mov	r0, r4
 8008978:	f7ff fec3 	bl	8008702 <UART_EndTransmit_IT>
    return;
 800897c:	e7f6      	b.n	800896c <HAL_UART_IRQHandler+0x110>
 800897e:	bf00      	nop
 8008980:	08008985 	.word	0x08008985

08008984 <UART_DMAAbortOnError>:
{
 8008984:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008986:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8008988:	2300      	movs	r3, #0
 800898a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800898c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800898e:	f7ff ff38 	bl	8008802 <HAL_UART_ErrorCallback>
}
 8008992:	bd08      	pop	{r3, pc}

08008994 <HAL_UART_AbortReceiveCpltCallback>:
}
 8008994:	4770      	bx	lr
	...

08008998 <HAL_UART_AbortReceive_IT>:
{
 8008998:	b510      	push	{r4, lr}
 800899a:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800899c:	6802      	ldr	r2, [r0, #0]
 800899e:	68d3      	ldr	r3, [r2, #12]
 80089a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089a4:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a6:	6802      	ldr	r2, [r0, #0]
 80089a8:	6953      	ldr	r3, [r2, #20]
 80089aa:	f023 0301 	bic.w	r3, r3, #1
 80089ae:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b0:	6803      	ldr	r3, [r0, #0]
 80089b2:	695a      	ldr	r2, [r3, #20]
 80089b4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80089b8:	d018      	beq.n	80089ec <HAL_UART_AbortReceive_IT+0x54>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089ba:	695a      	ldr	r2, [r3, #20]
 80089bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089c0:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 80089c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80089c4:	b153      	cbz	r3, 80089dc <HAL_UART_AbortReceive_IT+0x44>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80089c6:	4a0d      	ldr	r2, [pc, #52]	; (80089fc <HAL_UART_AbortReceive_IT+0x64>)
 80089c8:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089ca:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80089cc:	f7fd f827 	bl	8005a1e <HAL_DMA_Abort_IT>
 80089d0:	b110      	cbz	r0, 80089d8 <HAL_UART_AbortReceive_IT+0x40>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80089d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80089d6:	4798      	blx	r3
}
 80089d8:	2000      	movs	r0, #0
 80089da:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0x00U;
 80089dc:	2300      	movs	r3, #0
 80089de:	85c3      	strh	r3, [r0, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 80089e0:	2320      	movs	r3, #32
 80089e2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_AbortReceiveCpltCallback(huart);
 80089e6:	f7ff ffd5 	bl	8008994 <HAL_UART_AbortReceiveCpltCallback>
 80089ea:	e7f5      	b.n	80089d8 <HAL_UART_AbortReceive_IT+0x40>
    huart->RxXferCount = 0x00U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 80089f0:	2320      	movs	r3, #32
 80089f2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 80089f6:	f7ff ffcd 	bl	8008994 <HAL_UART_AbortReceiveCpltCallback>
 80089fa:	e7ed      	b.n	80089d8 <HAL_UART_AbortReceive_IT+0x40>
 80089fc:	08008a01 	.word	0x08008a01

08008a00 <UART_DMARxOnlyAbortCallback>:
{
 8008a00:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a02:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8008a08:	2320      	movs	r3, #32
 8008a0a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 8008a0e:	f7ff ffc1 	bl	8008994 <HAL_UART_AbortReceiveCpltCallback>
}
 8008a12:	bd08      	pop	{r3, pc}

08008a14 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8008a14:	2884      	cmp	r0, #132	; 0x84
 8008a16:	d001      	beq.n	8008a1c <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8008a18:	3003      	adds	r0, #3
 8008a1a:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008a1c:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8008a1e:	4770      	bx	lr

08008a20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008a20:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8008a22:	f000 ff87 	bl	8009934 <vTaskStartScheduler>
  
  return osOK;
}
 8008a26:	2000      	movs	r0, #0
 8008a28:	bd08      	pop	{r3, pc}

08008a2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008a2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	4604      	mov	r4, r0
 8008a32:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008a34:	6945      	ldr	r5, [r0, #20]
 8008a36:	b1a5      	cbz	r5, 8008a62 <osThreadCreate+0x38>
 8008a38:	6986      	ldr	r6, [r0, #24]
 8008a3a:	b196      	cbz	r6, 8008a62 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a3c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8008a40:	f8d0 9000 	ldr.w	r9, [r0]
 8008a44:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8008a48:	f7ff ffe4 	bl	8008a14 <makeFreeRtosPriority>
 8008a4c:	6922      	ldr	r2, [r4, #16]
 8008a4e:	9602      	str	r6, [sp, #8]
 8008a50:	9501      	str	r5, [sp, #4]
 8008a52:	9000      	str	r0, [sp, #0]
 8008a54:	463b      	mov	r3, r7
 8008a56:	4649      	mov	r1, r9
 8008a58:	4640      	mov	r0, r8
 8008a5a:	f000 feb6 	bl	80097ca <xTaskCreateStatic>
 8008a5e:	9005      	str	r0, [sp, #20]
 8008a60:	e013      	b.n	8008a8a <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a62:	6865      	ldr	r5, [r4, #4]
 8008a64:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a66:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a6a:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8008a6e:	f7ff ffd1 	bl	8008a14 <makeFreeRtosPriority>
 8008a72:	ab05      	add	r3, sp, #20
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	9000      	str	r0, [sp, #0]
 8008a78:	463b      	mov	r3, r7
 8008a7a:	fa1f f288 	uxth.w	r2, r8
 8008a7e:	4631      	mov	r1, r6
 8008a80:	4628      	mov	r0, r5
 8008a82:	f000 fedc 	bl	800983e <xTaskCreate>
 8008a86:	2801      	cmp	r0, #1
 8008a88:	d103      	bne.n	8008a92 <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008a8a:	9805      	ldr	r0, [sp, #20]
}
 8008a8c:	b007      	add	sp, #28
 8008a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 8008a92:	2000      	movs	r0, #0
 8008a94:	e7fa      	b.n	8008a8c <osThreadCreate+0x62>

08008a96 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008a96:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008a98:	4603      	mov	r3, r0
 8008a9a:	b900      	cbnz	r0, 8008a9e <osDelay+0x8>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f001 f8fc 	bl	8009c9c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	bd08      	pop	{r3, pc}

08008aa8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8008aa8:	b510      	push	{r4, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8008aae:	6844      	ldr	r4, [r0, #4]
 8008ab0:	b16c      	cbz	r4, 8008ace <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 8008ab2:	2901      	cmp	r1, #1
 8008ab4:	d009      	beq.n	8008aca <osTimerCreate+0x22>
 8008ab6:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8008ab8:	6801      	ldr	r1, [r0, #0]
    return xTimerCreateStatic((const char *)"",
 8008aba:	9401      	str	r4, [sp, #4]
 8008abc:	9100      	str	r1, [sp, #0]
 8008abe:	2101      	movs	r1, #1
 8008ac0:	4809      	ldr	r0, [pc, #36]	; (8008ae8 <osTimerCreate+0x40>)
 8008ac2:	f001 ff65 	bl	800a990 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8008ac6:	b002      	add	sp, #8
 8008ac8:	bd10      	pop	{r4, pc}
    return xTimerCreateStatic((const char *)"",
 8008aca:	2201      	movs	r2, #1
 8008acc:	e7f4      	b.n	8008ab8 <osTimerCreate+0x10>
    return xTimerCreate((const char *)"",
 8008ace:	2901      	cmp	r1, #1
 8008ad0:	d007      	beq.n	8008ae2 <osTimerCreate+0x3a>
 8008ad2:	2200      	movs	r2, #0
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8008ad4:	6801      	ldr	r1, [r0, #0]
    return xTimerCreate((const char *)"",
 8008ad6:	9100      	str	r1, [sp, #0]
 8008ad8:	2101      	movs	r1, #1
 8008ada:	4803      	ldr	r0, [pc, #12]	; (8008ae8 <osTimerCreate+0x40>)
 8008adc:	f001 ff3c 	bl	800a958 <xTimerCreate>
 8008ae0:	e7f1      	b.n	8008ac6 <osTimerCreate+0x1e>
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	e7f6      	b.n	8008ad4 <osTimerCreate+0x2c>
 8008ae6:	bf00      	nop
 8008ae8:	0800c710 	.word	0x0800c710

08008aec <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008aec:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008aee:	6841      	ldr	r1, [r0, #4]
 8008af0:	b119      	cbz	r1, 8008afa <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008af2:	2001      	movs	r0, #1
 8008af4:	f000 fa8f 	bl	8009016 <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008af8:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8008afa:	2001      	movs	r0, #1
 8008afc:	f000 fa80 	bl	8009000 <xQueueCreateMutex>
 8008b00:	e7fa      	b.n	8008af8 <osMutexCreate+0xc>

08008b02 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b02:	f100 0308 	add.w	r3, r0, #8
 8008b06:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b0c:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b0e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b10:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b12:	2300      	movs	r3, #0
 8008b14:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b16:	4770      	bx	lr

08008b18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b1c:	4770      	bx	lr

08008b1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b1e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b20:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b26:	689a      	ldr	r2, [r3, #8]
 8008b28:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b2a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b2c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008b2e:	6803      	ldr	r3, [r0, #0]
 8008b30:	3301      	adds	r3, #1
 8008b32:	6003      	str	r3, [r0, #0]
}
 8008b34:	4770      	bx	lr

08008b36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b36:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b38:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b3a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008b3e:	d002      	beq.n	8008b46 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b40:	f100 0208 	add.w	r2, r0, #8
 8008b44:	e002      	b.n	8008b4c <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b46:	6902      	ldr	r2, [r0, #16]
 8008b48:	e004      	b.n	8008b54 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	6853      	ldr	r3, [r2, #4]
 8008b4e:	681c      	ldr	r4, [r3, #0]
 8008b50:	42ac      	cmp	r4, r5
 8008b52:	d9fa      	bls.n	8008b4a <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b54:	6853      	ldr	r3, [r2, #4]
 8008b56:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b58:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b5a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b5c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b5e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008b60:	6803      	ldr	r3, [r0, #0]
 8008b62:	3301      	adds	r3, #1
 8008b64:	6003      	str	r3, [r0, #0]
}
 8008b66:	bc30      	pop	{r4, r5}
 8008b68:	4770      	bx	lr

08008b6a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b6a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b6c:	6842      	ldr	r2, [r0, #4]
 8008b6e:	6881      	ldr	r1, [r0, #8]
 8008b70:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b72:	6882      	ldr	r2, [r0, #8]
 8008b74:	6841      	ldr	r1, [r0, #4]
 8008b76:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	4282      	cmp	r2, r0
 8008b7c:	d006      	beq.n	8008b8c <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b7e:	2200      	movs	r2, #0
 8008b80:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	3a01      	subs	r2, #1
 8008b86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b88:	6818      	ldr	r0, [r3, #0]
}
 8008b8a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b8c:	6882      	ldr	r2, [r0, #8]
 8008b8e:	605a      	str	r2, [r3, #4]
 8008b90:	e7f5      	b.n	8008b7e <uxListRemove+0x14>

08008b92 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008b92:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b94:	b123      	cbz	r3, 8008ba0 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008b96:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008b98:	6818      	ldr	r0, [r3, #0]
 8008b9a:	f1c0 0007 	rsb	r0, r0, #7
 8008b9e:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008ba0:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8008ba2:	4770      	bx	lr

08008ba4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ba4:	b510      	push	{r4, lr}
 8008ba6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ba8:	f002 f904 	bl	800adb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008bac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008bae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d004      	beq.n	8008bbe <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8008bb4:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8008bb6:	f002 f91f 	bl	800adf8 <vPortExitCritical>

	return xReturn;
}
 8008bba:	4620      	mov	r0, r4
 8008bbc:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008bbe:	2401      	movs	r4, #1
 8008bc0:	e7f9      	b.n	8008bb6 <prvIsQueueFull+0x12>

08008bc2 <prvIsQueueEmpty>:
{
 8008bc2:	b510      	push	{r4, lr}
 8008bc4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008bc6:	f002 f8f5 	bl	800adb4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008bcc:	b123      	cbz	r3, 8008bd8 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8008bce:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008bd0:	f002 f912 	bl	800adf8 <vPortExitCritical>
}
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008bd8:	2401      	movs	r4, #1
 8008bda:	e7f9      	b.n	8008bd0 <prvIsQueueEmpty+0xe>

08008bdc <prvCopyDataToQueue>:
{
 8008bdc:	b570      	push	{r4, r5, r6, lr}
 8008bde:	4604      	mov	r4, r0
 8008be0:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008be2:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008be4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008be6:	b95a      	cbnz	r2, 8008c00 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008be8:	6803      	ldr	r3, [r0, #0]
 8008bea:	b11b      	cbz	r3, 8008bf4 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8008bec:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008bee:	3501      	adds	r5, #1
 8008bf0:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bf4:	6880      	ldr	r0, [r0, #8]
 8008bf6:	f001 fb4f 	bl	800a298 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60a3      	str	r3, [r4, #8]
 8008bfe:	e7f6      	b.n	8008bee <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008c00:	b96e      	cbnz	r6, 8008c1e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c02:	6840      	ldr	r0, [r0, #4]
 8008c04:	f003 f844 	bl	800bc90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c08:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008c0a:	6863      	ldr	r3, [r4, #4]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c10:	68a2      	ldr	r2, [r4, #8]
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d319      	bcc.n	8008c4a <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	e7e7      	b.n	8008bee <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c1e:	68c0      	ldr	r0, [r0, #12]
 8008c20:	f003 f836 	bl	800bc90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c24:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008c26:	4252      	negs	r2, r2
 8008c28:	68e3      	ldr	r3, [r4, #12]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c2e:	6821      	ldr	r1, [r4, #0]
 8008c30:	428b      	cmp	r3, r1
 8008c32:	d202      	bcs.n	8008c3a <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c34:	68a3      	ldr	r3, [r4, #8]
 8008c36:	441a      	add	r2, r3
 8008c38:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008c3a:	2e02      	cmp	r6, #2
 8008c3c:	d001      	beq.n	8008c42 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008c3e:	2000      	movs	r0, #0
 8008c40:	e7d5      	b.n	8008bee <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c42:	b125      	cbz	r5, 8008c4e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8008c44:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8008c46:	2000      	movs	r0, #0
 8008c48:	e7d1      	b.n	8008bee <prvCopyDataToQueue+0x12>
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	e7cf      	b.n	8008bee <prvCopyDataToQueue+0x12>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	e7cd      	b.n	8008bee <prvCopyDataToQueue+0x12>

08008c52 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c52:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008c54:	b172      	cbz	r2, 8008c74 <prvCopyDataFromQueue+0x22>
{
 8008c56:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c58:	68c3      	ldr	r3, [r0, #12]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c5e:	6884      	ldr	r4, [r0, #8]
 8008c60:	42a3      	cmp	r3, r4
 8008c62:	d301      	bcc.n	8008c68 <prvCopyDataFromQueue+0x16>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c64:	6803      	ldr	r3, [r0, #0]
 8008c66:	60c3      	str	r3, [r0, #12]
 8008c68:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c6a:	68c1      	ldr	r1, [r0, #12]
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f003 f80f 	bl	800bc90 <memcpy>
}
 8008c72:	bd10      	pop	{r4, pc}
 8008c74:	4770      	bx	lr

08008c76 <prvUnlockQueue>:
{
 8008c76:	b538      	push	{r3, r4, r5, lr}
 8008c78:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8008c7a:	f002 f89b 	bl	800adb4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008c7e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8008c82:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c84:	e003      	b.n	8008c8e <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8008c86:	f001 f9c9 	bl	800a01c <vTaskMissedYield>
			--cTxLock;
 8008c8a:	3c01      	subs	r4, #1
 8008c8c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c8e:	2c00      	cmp	r4, #0
 8008c90:	dd08      	ble.n	8008ca4 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c94:	b133      	cbz	r3, 8008ca4 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c96:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008c9a:	f001 f92d 	bl	8009ef8 <xTaskRemoveFromEventList>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d0f3      	beq.n	8008c8a <prvUnlockQueue+0x14>
 8008ca2:	e7f0      	b.n	8008c86 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8008ca4:	23ff      	movs	r3, #255	; 0xff
 8008ca6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008caa:	f002 f8a5 	bl	800adf8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008cae:	f002 f881 	bl	800adb4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008cb2:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8008cb6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cb8:	e003      	b.n	8008cc2 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8008cba:	f001 f9af 	bl	800a01c <vTaskMissedYield>
				--cRxLock;
 8008cbe:	3c01      	subs	r4, #1
 8008cc0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cc2:	2c00      	cmp	r4, #0
 8008cc4:	dd08      	ble.n	8008cd8 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cc6:	692b      	ldr	r3, [r5, #16]
 8008cc8:	b133      	cbz	r3, 8008cd8 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cca:	f105 0010 	add.w	r0, r5, #16
 8008cce:	f001 f913 	bl	8009ef8 <xTaskRemoveFromEventList>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d0f3      	beq.n	8008cbe <prvUnlockQueue+0x48>
 8008cd6:	e7f0      	b.n	8008cba <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8008cd8:	23ff      	movs	r3, #255	; 0xff
 8008cda:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008cde:	f002 f88b 	bl	800adf8 <vPortExitCritical>
}
 8008ce2:	bd38      	pop	{r3, r4, r5, pc}

08008ce4 <xQueueGenericReset>:
{
 8008ce4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8008ce6:	b940      	cbnz	r0, 8008cfa <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cec:	f383 8811 	msr	BASEPRI, r3
 8008cf0:	f3bf 8f6f 	isb	sy
 8008cf4:	f3bf 8f4f 	dsb	sy
 8008cf8:	e7fe      	b.n	8008cf8 <xQueueGenericReset+0x14>
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8008cfe:	f002 f859 	bl	800adb4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d02:	6821      	ldr	r1, [r4, #0]
 8008d04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d08:	fb03 1002 	mla	r0, r3, r2, r1
 8008d0c:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d0e:	2000      	movs	r0, #0
 8008d10:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d12:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d14:	3a01      	subs	r2, #1
 8008d16:	fb02 1303 	mla	r3, r2, r3, r1
 8008d1a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d1c:	23ff      	movs	r3, #255	; 0xff
 8008d1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008d26:	b9a5      	cbnz	r5, 8008d52 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d28:	6923      	ldr	r3, [r4, #16]
 8008d2a:	b91b      	cbnz	r3, 8008d34 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8008d2c:	f002 f864 	bl	800adf8 <vPortExitCritical>
}
 8008d30:	2001      	movs	r0, #1
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d34:	f104 0010 	add.w	r0, r4, #16
 8008d38:	f001 f8de 	bl	8009ef8 <xTaskRemoveFromEventList>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d0f5      	beq.n	8008d2c <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8008d40:	4b08      	ldr	r3, [pc, #32]	; (8008d64 <xQueueGenericReset+0x80>)
 8008d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d46:	601a      	str	r2, [r3, #0]
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	e7ec      	b.n	8008d2c <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d52:	f104 0010 	add.w	r0, r4, #16
 8008d56:	f7ff fed4 	bl	8008b02 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d5e:	f7ff fed0 	bl	8008b02 <vListInitialise>
 8008d62:	e7e3      	b.n	8008d2c <xQueueGenericReset+0x48>
 8008d64:	e000ed04 	.word	0xe000ed04

08008d68 <prvInitialiseNewQueue>:
{
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	461d      	mov	r5, r3
 8008d6c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d6e:	460b      	mov	r3, r1
 8008d70:	b149      	cbz	r1, 8008d86 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d72:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8008d74:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d76:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d78:	2101      	movs	r1, #1
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f7ff ffb2 	bl	8008ce4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008d80:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8008d84:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d86:	6024      	str	r4, [r4, #0]
 8008d88:	e7f4      	b.n	8008d74 <prvInitialiseNewQueue+0xc>

08008d8a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d8a:	b940      	cbnz	r0, 8008d9e <xQueueGenericCreateStatic+0x14>
 8008d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	e7fe      	b.n	8008d9c <xQueueGenericCreateStatic+0x12>
	{
 8008d9e:	b510      	push	{r4, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8008da4:	b153      	cbz	r3, 8008dbc <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008da6:	b192      	cbz	r2, 8008dce <xQueueGenericCreateStatic+0x44>
 8008da8:	b989      	cbnz	r1, 8008dce <xQueueGenericCreateStatic+0x44>
 8008daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	e7fe      	b.n	8008dba <xQueueGenericCreateStatic+0x30>
 8008dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	e7fe      	b.n	8008dcc <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dce:	b94a      	cbnz	r2, 8008de4 <xQueueGenericCreateStatic+0x5a>
 8008dd0:	b141      	cbz	r1, 8008de4 <xQueueGenericCreateStatic+0x5a>
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	e7fe      	b.n	8008de2 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008de4:	2050      	movs	r0, #80	; 0x50
 8008de6:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008de8:	9803      	ldr	r0, [sp, #12]
 8008dea:	2850      	cmp	r0, #80	; 0x50
 8008dec:	d008      	beq.n	8008e00 <xQueueGenericCreateStatic+0x76>
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	e7fe      	b.n	8008dfe <xQueueGenericCreateStatic+0x74>
 8008e00:	4620      	mov	r0, r4
 8008e02:	461c      	mov	r4, r3
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e04:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e06:	2301      	movs	r3, #1
 8008e08:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e0c:	9400      	str	r4, [sp, #0]
 8008e0e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008e12:	f7ff ffa9 	bl	8008d68 <prvInitialiseNewQueue>
	}
 8008e16:	4620      	mov	r0, r4
 8008e18:	b004      	add	sp, #16
 8008e1a:	bd10      	pop	{r4, pc}

08008e1c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e1c:	b940      	cbnz	r0, 8008e30 <xQueueGenericCreate+0x14>
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	e7fe      	b.n	8008e2e <xQueueGenericCreate+0x12>
	{
 8008e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e32:	b083      	sub	sp, #12
 8008e34:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8008e36:	b111      	cbz	r1, 8008e3e <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e38:	fb01 f000 	mul.w	r0, r1, r0
 8008e3c:	e000      	b.n	8008e40 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8008e3e:	2000      	movs	r0, #0
 8008e40:	4617      	mov	r7, r2
 8008e42:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e44:	3050      	adds	r0, #80	; 0x50
 8008e46:	f002 f96b 	bl	800b120 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	b150      	cbz	r0, 8008e64 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e54:	9000      	str	r0, [sp, #0]
 8008e56:	463b      	mov	r3, r7
 8008e58:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	4630      	mov	r0, r6
 8008e60:	f7ff ff82 	bl	8008d68 <prvInitialiseNewQueue>
	}
 8008e64:	4628      	mov	r0, r5
 8008e66:	b003      	add	sp, #12
 8008e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008e6c <xQueueGenericSend>:
{
 8008e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008e72:	b160      	cbz	r0, 8008e8e <xQueueGenericSend+0x22>
 8008e74:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e76:	b999      	cbnz	r1, 8008ea0 <xQueueGenericSend+0x34>
 8008e78:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008e7a:	b18a      	cbz	r2, 8008ea0 <xQueueGenericSend+0x34>
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	e7fe      	b.n	8008e8c <xQueueGenericSend+0x20>
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	e7fe      	b.n	8008e9e <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d10b      	bne.n	8008ebc <xQueueGenericSend+0x50>
 8008ea4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008ea6:	2a01      	cmp	r2, #1
 8008ea8:	d008      	beq.n	8008ebc <xQueueGenericSend+0x50>
 8008eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	e7fe      	b.n	8008eba <xQueueGenericSend+0x4e>
 8008ebc:	461e      	mov	r6, r3
 8008ebe:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ec0:	f001 f97e 	bl	800a1c0 <xTaskGetSchedulerState>
 8008ec4:	b950      	cbnz	r0, 8008edc <xQueueGenericSend+0x70>
 8008ec6:	9b01      	ldr	r3, [sp, #4]
 8008ec8:	b153      	cbz	r3, 8008ee0 <xQueueGenericSend+0x74>
 8008eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	e7fe      	b.n	8008eda <xQueueGenericSend+0x6e>
 8008edc:	2500      	movs	r5, #0
 8008ede:	e03a      	b.n	8008f56 <xQueueGenericSend+0xea>
 8008ee0:	2500      	movs	r5, #0
 8008ee2:	e038      	b.n	8008f56 <xQueueGenericSend+0xea>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	4639      	mov	r1, r7
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f7ff fe77 	bl	8008bdc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ef0:	b94b      	cbnz	r3, 8008f06 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8008ef2:	b1a8      	cbz	r0, 8008f20 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8008ef4:	4b3b      	ldr	r3, [pc, #236]	; (8008fe4 <xQueueGenericSend+0x178>)
 8008ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	e00c      	b.n	8008f20 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f0a:	f000 fff5 	bl	8009ef8 <xTaskRemoveFromEventList>
 8008f0e:	b138      	cbz	r0, 8008f20 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8008f10:	4b34      	ldr	r3, [pc, #208]	; (8008fe4 <xQueueGenericSend+0x178>)
 8008f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008f20:	f001 ff6a 	bl	800adf8 <vPortExitCritical>
				return pdPASS;
 8008f24:	2001      	movs	r0, #1
}
 8008f26:	b005      	add	sp, #20
 8008f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8008f2a:	f001 ff65 	bl	800adf8 <vPortExitCritical>
					return errQUEUE_FULL;
 8008f2e:	2000      	movs	r0, #0
 8008f30:	e7f9      	b.n	8008f26 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f32:	a802      	add	r0, sp, #8
 8008f34:	f001 f826 	bl	8009f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f38:	2501      	movs	r5, #1
 8008f3a:	e019      	b.n	8008f70 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008f42:	e021      	b.n	8008f88 <xQueueGenericSend+0x11c>
 8008f44:	2300      	movs	r3, #0
 8008f46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f4a:	e023      	b.n	8008f94 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f7ff fe92 	bl	8008c76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f52:	f000 fdd7 	bl	8009b04 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008f56:	f001 ff2d 	bl	800adb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008f5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d3c0      	bcc.n	8008ee4 <xQueueGenericSend+0x78>
 8008f62:	2e02      	cmp	r6, #2
 8008f64:	d0be      	beq.n	8008ee4 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f66:	9b01      	ldr	r3, [sp, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0de      	beq.n	8008f2a <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8008f6c:	2d00      	cmp	r5, #0
 8008f6e:	d0e0      	beq.n	8008f32 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8008f70:	f001 ff42 	bl	800adf8 <vPortExitCritical>
		vTaskSuspendAll();
 8008f74:	f000 fd2c 	bl	80099d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f78:	f001 ff1c 	bl	800adb4 <vPortEnterCritical>
 8008f7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008f80:	b25b      	sxtb	r3, r3
 8008f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f86:	d0d9      	beq.n	8008f3c <xQueueGenericSend+0xd0>
 8008f88:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008f8c:	b25b      	sxtb	r3, r3
 8008f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f92:	d0d7      	beq.n	8008f44 <xQueueGenericSend+0xd8>
 8008f94:	f001 ff30 	bl	800adf8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f98:	a901      	add	r1, sp, #4
 8008f9a:	a802      	add	r0, sp, #8
 8008f9c:	f000 fffe 	bl	8009f9c <xTaskCheckForTimeOut>
 8008fa0:	b9c8      	cbnz	r0, 8008fd6 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f7ff fdfe 	bl	8008ba4 <prvIsQueueFull>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d0cf      	beq.n	8008f4c <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008fac:	9901      	ldr	r1, [sp, #4]
 8008fae:	f104 0010 	add.w	r0, r4, #16
 8008fb2:	f000 ff6d 	bl	8009e90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f7ff fe5d 	bl	8008c76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008fbc:	f000 fda2 	bl	8009b04 <xTaskResumeAll>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	d1c8      	bne.n	8008f56 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8008fc4:	4b07      	ldr	r3, [pc, #28]	; (8008fe4 <xQueueGenericSend+0x178>)
 8008fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fca:	601a      	str	r2, [r3, #0]
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	e7bf      	b.n	8008f56 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f7ff fe4d 	bl	8008c76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fdc:	f000 fd92 	bl	8009b04 <xTaskResumeAll>
			return errQUEUE_FULL;
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	e7a0      	b.n	8008f26 <xQueueGenericSend+0xba>
 8008fe4:	e000ed04 	.word	0xe000ed04

08008fe8 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8008fe8:	b148      	cbz	r0, 8008ffe <prvInitialiseMutex+0x16>
	{
 8008fea:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008fec:	2100      	movs	r1, #0
 8008fee:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008ff0:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008ff2:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	460a      	mov	r2, r1
 8008ff8:	f7ff ff38 	bl	8008e6c <xQueueGenericSend>
	}
 8008ffc:	bd08      	pop	{r3, pc}
 8008ffe:	4770      	bx	lr

08009000 <xQueueCreateMutex>:
	{
 8009000:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009002:	4602      	mov	r2, r0
 8009004:	2100      	movs	r1, #0
 8009006:	2001      	movs	r0, #1
 8009008:	f7ff ff08 	bl	8008e1c <xQueueGenericCreate>
 800900c:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800900e:	f7ff ffeb 	bl	8008fe8 <prvInitialiseMutex>
	}
 8009012:	4620      	mov	r0, r4
 8009014:	bd10      	pop	{r4, pc}

08009016 <xQueueCreateMutexStatic>:
	{
 8009016:	b510      	push	{r4, lr}
 8009018:	b082      	sub	sp, #8
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800901a:	9000      	str	r0, [sp, #0]
 800901c:	460b      	mov	r3, r1
 800901e:	2200      	movs	r2, #0
 8009020:	4611      	mov	r1, r2
 8009022:	2001      	movs	r0, #1
 8009024:	f7ff feb1 	bl	8008d8a <xQueueGenericCreateStatic>
 8009028:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800902a:	f7ff ffdd 	bl	8008fe8 <prvInitialiseMutex>
	}
 800902e:	4620      	mov	r0, r4
 8009030:	b002      	add	sp, #8
 8009032:	bd10      	pop	{r4, pc}

08009034 <xQueueGenericSendFromISR>:
{
 8009034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009038:	b160      	cbz	r0, 8009054 <xQueueGenericSendFromISR+0x20>
 800903a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800903c:	b999      	cbnz	r1, 8009066 <xQueueGenericSendFromISR+0x32>
 800903e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8009040:	b188      	cbz	r0, 8009066 <xQueueGenericSendFromISR+0x32>
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	e7fe      	b.n	8009052 <xQueueGenericSendFromISR+0x1e>
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	e7fe      	b.n	8009064 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009066:	2b02      	cmp	r3, #2
 8009068:	d10b      	bne.n	8009082 <xQueueGenericSendFromISR+0x4e>
 800906a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800906c:	2801      	cmp	r0, #1
 800906e:	d008      	beq.n	8009082 <xQueueGenericSendFromISR+0x4e>
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	e7fe      	b.n	8009080 <xQueueGenericSendFromISR+0x4c>
 8009082:	461f      	mov	r7, r3
 8009084:	4690      	mov	r8, r2
 8009086:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009088:	f001 ffbe 	bl	800b008 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800908c:	f3ef 8611 	mrs	r6, BASEPRI
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80090a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d303      	bcc.n	80090b0 <xQueueGenericSendFromISR+0x7c>
 80090a8:	2f02      	cmp	r7, #2
 80090aa:	d001      	beq.n	80090b0 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 80090ac:	2000      	movs	r0, #0
 80090ae:	e00f      	b.n	80090d0 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 80090b0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80090b4:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090b6:	463a      	mov	r2, r7
 80090b8:	4649      	mov	r1, r9
 80090ba:	4620      	mov	r0, r4
 80090bc:	f7ff fd8e 	bl	8008bdc <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80090c0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80090c4:	d008      	beq.n	80090d8 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090c6:	1c6b      	adds	r3, r5, #1
 80090c8:	b25b      	sxtb	r3, r3
 80090ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80090ce:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090d0:	f386 8811 	msr	BASEPRI, r6
}
 80090d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090da:	b15b      	cbz	r3, 80090f4 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80090e0:	f000 ff0a 	bl	8009ef8 <xTaskRemoveFromEventList>
 80090e4:	b140      	cbz	r0, 80090f8 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 80090e6:	f1b8 0f00 	cmp.w	r8, #0
 80090ea:	d007      	beq.n	80090fc <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090ec:	2001      	movs	r0, #1
 80090ee:	f8c8 0000 	str.w	r0, [r8]
 80090f2:	e7ed      	b.n	80090d0 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 80090f4:	2001      	movs	r0, #1
 80090f6:	e7eb      	b.n	80090d0 <xQueueGenericSendFromISR+0x9c>
 80090f8:	2001      	movs	r0, #1
 80090fa:	e7e9      	b.n	80090d0 <xQueueGenericSendFromISR+0x9c>
 80090fc:	2001      	movs	r0, #1
 80090fe:	e7e7      	b.n	80090d0 <xQueueGenericSendFromISR+0x9c>

08009100 <xQueueReceive>:
{
 8009100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009102:	b085      	sub	sp, #20
 8009104:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009106:	b160      	cbz	r0, 8009122 <xQueueReceive+0x22>
 8009108:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800910a:	b999      	cbnz	r1, 8009134 <xQueueReceive+0x34>
 800910c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800910e:	b18b      	cbz	r3, 8009134 <xQueueReceive+0x34>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	e7fe      	b.n	8009120 <xQueueReceive+0x20>
 8009122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	e7fe      	b.n	8009132 <xQueueReceive+0x32>
 8009134:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009136:	f001 f843 	bl	800a1c0 <xTaskGetSchedulerState>
 800913a:	b950      	cbnz	r0, 8009152 <xQueueReceive+0x52>
 800913c:	9b01      	ldr	r3, [sp, #4]
 800913e:	b153      	cbz	r3, 8009156 <xQueueReceive+0x56>
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	e7fe      	b.n	8009150 <xQueueReceive+0x50>
 8009152:	2600      	movs	r6, #0
 8009154:	e03e      	b.n	80091d4 <xQueueReceive+0xd4>
 8009156:	2600      	movs	r6, #0
 8009158:	e03c      	b.n	80091d4 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800915a:	4639      	mov	r1, r7
 800915c:	4620      	mov	r0, r4
 800915e:	f7ff fd78 	bl	8008c52 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009162:	3d01      	subs	r5, #1
 8009164:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	b923      	cbnz	r3, 8009174 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 800916a:	f001 fe45 	bl	800adf8 <vPortExitCritical>
				return pdPASS;
 800916e:	2001      	movs	r0, #1
}
 8009170:	b005      	add	sp, #20
 8009172:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009174:	f104 0010 	add.w	r0, r4, #16
 8009178:	f000 febe 	bl	8009ef8 <xTaskRemoveFromEventList>
 800917c:	2800      	cmp	r0, #0
 800917e:	d0f4      	beq.n	800916a <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 8009180:	4b34      	ldr	r3, [pc, #208]	; (8009254 <xQueueReceive+0x154>)
 8009182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	e7eb      	b.n	800916a <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 8009192:	f001 fe31 	bl	800adf8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009196:	2000      	movs	r0, #0
 8009198:	e7ea      	b.n	8009170 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800919a:	a802      	add	r0, sp, #8
 800919c:	f000 fef2 	bl	8009f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091a0:	2601      	movs	r6, #1
 80091a2:	e021      	b.n	80091e8 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 80091a4:	2300      	movs	r3, #0
 80091a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80091aa:	e029      	b.n	8009200 <xQueueReceive+0x100>
 80091ac:	2300      	movs	r3, #0
 80091ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091b2:	e02b      	b.n	800920c <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 80091b4:	4620      	mov	r0, r4
 80091b6:	f7ff fd5e 	bl	8008c76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091ba:	f000 fca3 	bl	8009b04 <xTaskResumeAll>
 80091be:	e009      	b.n	80091d4 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 80091c0:	4620      	mov	r0, r4
 80091c2:	f7ff fd58 	bl	8008c76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091c6:	f000 fc9d 	bl	8009b04 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091ca:	4620      	mov	r0, r4
 80091cc:	f7ff fcf9 	bl	8008bc2 <prvIsQueueEmpty>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d13d      	bne.n	8009250 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 80091d4:	f001 fdee 	bl	800adb4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091d8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091da:	2d00      	cmp	r5, #0
 80091dc:	d1bd      	bne.n	800915a <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80091de:	9b01      	ldr	r3, [sp, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d0d6      	beq.n	8009192 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 80091e4:	2e00      	cmp	r6, #0
 80091e6:	d0d8      	beq.n	800919a <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 80091e8:	f001 fe06 	bl	800adf8 <vPortExitCritical>
		vTaskSuspendAll();
 80091ec:	f000 fbf0 	bl	80099d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091f0:	f001 fde0 	bl	800adb4 <vPortEnterCritical>
 80091f4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80091f8:	b25b      	sxtb	r3, r3
 80091fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091fe:	d0d1      	beq.n	80091a4 <xQueueReceive+0xa4>
 8009200:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009204:	b25b      	sxtb	r3, r3
 8009206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800920a:	d0cf      	beq.n	80091ac <xQueueReceive+0xac>
 800920c:	f001 fdf4 	bl	800adf8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009210:	a901      	add	r1, sp, #4
 8009212:	a802      	add	r0, sp, #8
 8009214:	f000 fec2 	bl	8009f9c <xTaskCheckForTimeOut>
 8009218:	2800      	cmp	r0, #0
 800921a:	d1d1      	bne.n	80091c0 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800921c:	4620      	mov	r0, r4
 800921e:	f7ff fcd0 	bl	8008bc2 <prvIsQueueEmpty>
 8009222:	2800      	cmp	r0, #0
 8009224:	d0c6      	beq.n	80091b4 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009226:	9901      	ldr	r1, [sp, #4]
 8009228:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800922c:	f000 fe30 	bl	8009e90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009230:	4620      	mov	r0, r4
 8009232:	f7ff fd20 	bl	8008c76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009236:	f000 fc65 	bl	8009b04 <xTaskResumeAll>
 800923a:	2800      	cmp	r0, #0
 800923c:	d1ca      	bne.n	80091d4 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 800923e:	4b05      	ldr	r3, [pc, #20]	; (8009254 <xQueueReceive+0x154>)
 8009240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	e7c1      	b.n	80091d4 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 8009250:	2000      	movs	r0, #0
 8009252:	e78d      	b.n	8009170 <xQueueReceive+0x70>
 8009254:	e000ed04 	.word	0xe000ed04

08009258 <xQueueSemaphoreTake>:
{
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800925e:	b940      	cbnz	r0, 8009272 <xQueueSemaphoreTake+0x1a>
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	e7fe      	b.n	8009270 <xQueueSemaphoreTake+0x18>
 8009272:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8009274:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009276:	b143      	cbz	r3, 800928a <xQueueSemaphoreTake+0x32>
 8009278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	e7fe      	b.n	8009288 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800928a:	f000 ff99 	bl	800a1c0 <xTaskGetSchedulerState>
 800928e:	b950      	cbnz	r0, 80092a6 <xQueueSemaphoreTake+0x4e>
 8009290:	9b01      	ldr	r3, [sp, #4]
 8009292:	b15b      	cbz	r3, 80092ac <xQueueSemaphoreTake+0x54>
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	e7fe      	b.n	80092a4 <xQueueSemaphoreTake+0x4c>
 80092a6:	2500      	movs	r5, #0
 80092a8:	462e      	mov	r6, r5
 80092aa:	e051      	b.n	8009350 <xQueueSemaphoreTake+0xf8>
 80092ac:	2500      	movs	r5, #0
 80092ae:	462e      	mov	r6, r5
 80092b0:	e04e      	b.n	8009350 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80092b2:	3b01      	subs	r3, #1
 80092b4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	b913      	cbnz	r3, 80092c0 <xQueueSemaphoreTake+0x68>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80092ba:	f001 f8f1 	bl	800a4a0 <pvTaskIncrementMutexHeldCount>
 80092be:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092c0:	6923      	ldr	r3, [r4, #16]
 80092c2:	b163      	cbz	r3, 80092de <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092c4:	f104 0010 	add.w	r0, r4, #16
 80092c8:	f000 fe16 	bl	8009ef8 <xTaskRemoveFromEventList>
 80092cc:	b138      	cbz	r0, 80092de <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 80092ce:	4b48      	ldr	r3, [pc, #288]	; (80093f0 <xQueueSemaphoreTake+0x198>)
 80092d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80092de:	f001 fd8b 	bl	800adf8 <vPortExitCritical>
				return pdPASS;
 80092e2:	2501      	movs	r5, #1
}
 80092e4:	4628      	mov	r0, r5
 80092e6:	b004      	add	sp, #16
 80092e8:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 80092ea:	b145      	cbz	r5, 80092fe <xQueueSemaphoreTake+0xa6>
 80092ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	e7fe      	b.n	80092fc <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 80092fe:	f001 fd7b 	bl	800adf8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009302:	e7ef      	b.n	80092e4 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009304:	a802      	add	r0, sp, #8
 8009306:	f000 fe3d 	bl	8009f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800930a:	2601      	movs	r6, #1
 800930c:	e02a      	b.n	8009364 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 800930e:	2300      	movs	r3, #0
 8009310:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009314:	e032      	b.n	800937c <xQueueSemaphoreTake+0x124>
 8009316:	2300      	movs	r3, #0
 8009318:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800931c:	e034      	b.n	8009388 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 800931e:	f001 fd49 	bl	800adb4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009322:	68a0      	ldr	r0, [r4, #8]
 8009324:	f000 ff5c 	bl	800a1e0 <xTaskPriorityInherit>
 8009328:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800932a:	f001 fd65 	bl	800adf8 <vPortExitCritical>
 800932e:	e03b      	b.n	80093a8 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 8009330:	4620      	mov	r0, r4
 8009332:	f7ff fca0 	bl	8008c76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009336:	f000 fbe5 	bl	8009b04 <xTaskResumeAll>
 800933a:	e009      	b.n	8009350 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 800933c:	4620      	mov	r0, r4
 800933e:	f7ff fc9a 	bl	8008c76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009342:	f000 fbdf 	bl	8009b04 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009346:	4620      	mov	r0, r4
 8009348:	f7ff fc3b 	bl	8008bc2 <prvIsQueueEmpty>
 800934c:	2800      	cmp	r0, #0
 800934e:	d140      	bne.n	80093d2 <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 8009350:	f001 fd30 	bl	800adb4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009354:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1ab      	bne.n	80092b2 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800935a:	9b01      	ldr	r3, [sp, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d0c4      	beq.n	80092ea <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8009360:	2e00      	cmp	r6, #0
 8009362:	d0cf      	beq.n	8009304 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 8009364:	f001 fd48 	bl	800adf8 <vPortExitCritical>
		vTaskSuspendAll();
 8009368:	f000 fb32 	bl	80099d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800936c:	f001 fd22 	bl	800adb4 <vPortEnterCritical>
 8009370:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009374:	b25b      	sxtb	r3, r3
 8009376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800937a:	d0c8      	beq.n	800930e <xQueueSemaphoreTake+0xb6>
 800937c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009380:	b25b      	sxtb	r3, r3
 8009382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009386:	d0c6      	beq.n	8009316 <xQueueSemaphoreTake+0xbe>
 8009388:	f001 fd36 	bl	800adf8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800938c:	a901      	add	r1, sp, #4
 800938e:	a802      	add	r0, sp, #8
 8009390:	f000 fe04 	bl	8009f9c <xTaskCheckForTimeOut>
 8009394:	2800      	cmp	r0, #0
 8009396:	d1d1      	bne.n	800933c <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009398:	4620      	mov	r0, r4
 800939a:	f7ff fc12 	bl	8008bc2 <prvIsQueueEmpty>
 800939e:	2800      	cmp	r0, #0
 80093a0:	d0c6      	beq.n	8009330 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d0ba      	beq.n	800931e <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093a8:	9901      	ldr	r1, [sp, #4]
 80093aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80093ae:	f000 fd6f 	bl	8009e90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093b2:	4620      	mov	r0, r4
 80093b4:	f7ff fc5f 	bl	8008c76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093b8:	f000 fba4 	bl	8009b04 <xTaskResumeAll>
 80093bc:	2800      	cmp	r0, #0
 80093be:	d1c7      	bne.n	8009350 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 80093c0:	4b0b      	ldr	r3, [pc, #44]	; (80093f0 <xQueueSemaphoreTake+0x198>)
 80093c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	e7be      	b.n	8009350 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 80093d2:	2d00      	cmp	r5, #0
 80093d4:	d086      	beq.n	80092e4 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 80093d6:	f001 fced 	bl	800adb4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80093da:	4620      	mov	r0, r4
 80093dc:	f7ff fbd9 	bl	8008b92 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80093e0:	4601      	mov	r1, r0
 80093e2:	68a0      	ldr	r0, [r4, #8]
 80093e4:	f000 ffb0 	bl	800a348 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80093e8:	f001 fd06 	bl	800adf8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80093ec:	2500      	movs	r5, #0
 80093ee:	e779      	b.n	80092e4 <xQueueSemaphoreTake+0x8c>
 80093f0:	e000ed04 	.word	0xe000ed04

080093f4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093f4:	2300      	movs	r3, #0
 80093f6:	2b07      	cmp	r3, #7
 80093f8:	d80c      	bhi.n	8009414 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80093fa:	4a07      	ldr	r2, [pc, #28]	; (8009418 <vQueueAddToRegistry+0x24>)
 80093fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009400:	b10a      	cbz	r2, 8009406 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009402:	3301      	adds	r3, #1
 8009404:	e7f7      	b.n	80093f6 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009406:	4a04      	ldr	r2, [pc, #16]	; (8009418 <vQueueAddToRegistry+0x24>)
 8009408:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800940c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009410:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009412:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	200034c8 	.word	0x200034c8

0800941c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800941c:	b570      	push	{r4, r5, r6, lr}
 800941e:	4604      	mov	r4, r0
 8009420:	460d      	mov	r5, r1
 8009422:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009424:	f001 fcc6 	bl	800adb4 <vPortEnterCritical>
 8009428:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800942c:	b25b      	sxtb	r3, r3
 800942e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009432:	d00d      	beq.n	8009450 <vQueueWaitForMessageRestricted+0x34>
 8009434:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009438:	b25b      	sxtb	r3, r3
 800943a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800943e:	d00b      	beq.n	8009458 <vQueueWaitForMessageRestricted+0x3c>
 8009440:	f001 fcda 	bl	800adf8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009444:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009446:	b15b      	cbz	r3, 8009460 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009448:	4620      	mov	r0, r4
 800944a:	f7ff fc14 	bl	8008c76 <prvUnlockQueue>
	}
 800944e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8009450:	2300      	movs	r3, #0
 8009452:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009456:	e7ed      	b.n	8009434 <vQueueWaitForMessageRestricted+0x18>
 8009458:	2300      	movs	r3, #0
 800945a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800945e:	e7ef      	b.n	8009440 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009460:	4632      	mov	r2, r6
 8009462:	4629      	mov	r1, r5
 8009464:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009468:	f000 fd2a 	bl	8009ec0 <vTaskPlaceOnEventListRestricted>
 800946c:	e7ec      	b.n	8009448 <vQueueWaitForMessageRestricted+0x2c>

0800946e <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 800946e:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009470:	e001      	b.n	8009476 <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 8009472:	3001      	adds	r0, #1
			ulCount++;
 8009474:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009476:	7802      	ldrb	r2, [r0, #0]
 8009478:	2aa5      	cmp	r2, #165	; 0xa5
 800947a:	d0fa      	beq.n	8009472 <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( configSTACK_DEPTH_TYPE ) ulCount;
	}
 800947c:	f3c3 008f 	ubfx	r0, r3, #2, #16
 8009480:	4770      	bx	lr
	...

08009484 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009484:	4b08      	ldr	r3, [pc, #32]	; (80094a8 <prvResetNextTaskUnblockTime+0x24>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	b13b      	cbz	r3, 800949c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800948c:	4b06      	ldr	r3, [pc, #24]	; (80094a8 <prvResetNextTaskUnblockTime+0x24>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009494:	685a      	ldr	r2, [r3, #4]
 8009496:	4b05      	ldr	r3, [pc, #20]	; (80094ac <prvResetNextTaskUnblockTime+0x28>)
 8009498:	601a      	str	r2, [r3, #0]
	}
}
 800949a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800949c:	4b03      	ldr	r3, [pc, #12]	; (80094ac <prvResetNextTaskUnblockTime+0x28>)
 800949e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	20000868 	.word	0x20000868
 80094ac:	20000940 	.word	0x20000940

080094b0 <prvInitialiseNewTask>:
{
 80094b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b4:	4681      	mov	r9, r0
 80094b6:	460d      	mov	r5, r1
 80094b8:	4617      	mov	r7, r2
 80094ba:	469a      	mov	sl, r3
 80094bc:	9e08      	ldr	r6, [sp, #32]
 80094be:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80094c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80094c4:	0092      	lsls	r2, r2, #2
 80094c6:	21a5      	movs	r1, #165	; 0xa5
 80094c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80094ca:	f002 fbec 	bl	800bca6 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80094ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80094d0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80094d4:	3a01      	subs	r2, #1
 80094d6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80094da:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80094de:	6467      	str	r7, [r4, #68]	; 0x44
	if( pcName != NULL )
 80094e0:	b38d      	cbz	r5, 8009546 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094e2:	2300      	movs	r3, #0
 80094e4:	2b0f      	cmp	r3, #15
 80094e6:	d807      	bhi.n	80094f8 <prvInitialiseNewTask+0x48>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094e8:	5ce9      	ldrb	r1, [r5, r3]
 80094ea:	18e2      	adds	r2, r4, r3
 80094ec:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80094f0:	5cea      	ldrb	r2, [r5, r3]
 80094f2:	b10a      	cbz	r2, 80094f8 <prvInitialiseNewTask+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094f4:	3301      	adds	r3, #1
 80094f6:	e7f5      	b.n	80094e4 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094f8:	2300      	movs	r3, #0
 80094fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80094fe:	2e06      	cmp	r6, #6
 8009500:	d900      	bls.n	8009504 <prvInitialiseNewTask+0x54>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009502:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8009504:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009506:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8009508:	2500      	movs	r5, #0
 800950a:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800950c:	1d20      	adds	r0, r4, #4
 800950e:	f7ff fb03 	bl	8008b18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009512:	f104 0018 	add.w	r0, r4, #24
 8009516:	f7ff faff 	bl	8008b18 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800951a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800951c:	f1c6 0607 	rsb	r6, r6, #7
 8009520:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009522:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009524:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
 8009526:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009528:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800952c:	4652      	mov	r2, sl
 800952e:	4649      	mov	r1, r9
 8009530:	4638      	mov	r0, r7
 8009532:	f001 fc17 	bl	800ad64 <pxPortInitialiseStack>
 8009536:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009538:	f1b8 0f00 	cmp.w	r8, #0
 800953c:	d001      	beq.n	8009542 <prvInitialiseNewTask+0x92>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800953e:	f8c8 4000 	str.w	r4, [r8]
}
 8009542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009546:	2300      	movs	r3, #0
 8009548:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800954c:	e7d7      	b.n	80094fe <prvInitialiseNewTask+0x4e>
	...

08009550 <prvInitialiseTaskLists>:
{
 8009550:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009552:	2400      	movs	r4, #0
 8009554:	e007      	b.n	8009566 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009556:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800955a:	0093      	lsls	r3, r2, #2
 800955c:	480e      	ldr	r0, [pc, #56]	; (8009598 <prvInitialiseTaskLists+0x48>)
 800955e:	4418      	add	r0, r3
 8009560:	f7ff facf 	bl	8008b02 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009564:	3401      	adds	r4, #1
 8009566:	2c06      	cmp	r4, #6
 8009568:	d9f5      	bls.n	8009556 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800956a:	4d0c      	ldr	r5, [pc, #48]	; (800959c <prvInitialiseTaskLists+0x4c>)
 800956c:	4628      	mov	r0, r5
 800956e:	f7ff fac8 	bl	8008b02 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009572:	4c0b      	ldr	r4, [pc, #44]	; (80095a0 <prvInitialiseTaskLists+0x50>)
 8009574:	4620      	mov	r0, r4
 8009576:	f7ff fac4 	bl	8008b02 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800957a:	480a      	ldr	r0, [pc, #40]	; (80095a4 <prvInitialiseTaskLists+0x54>)
 800957c:	f7ff fac1 	bl	8008b02 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009580:	4809      	ldr	r0, [pc, #36]	; (80095a8 <prvInitialiseTaskLists+0x58>)
 8009582:	f7ff fabe 	bl	8008b02 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8009586:	4809      	ldr	r0, [pc, #36]	; (80095ac <prvInitialiseTaskLists+0x5c>)
 8009588:	f7ff fabb 	bl	8008b02 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800958c:	4b08      	ldr	r3, [pc, #32]	; (80095b0 <prvInitialiseTaskLists+0x60>)
 800958e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009590:	4b08      	ldr	r3, [pc, #32]	; (80095b4 <prvInitialiseTaskLists+0x64>)
 8009592:	601c      	str	r4, [r3, #0]
}
 8009594:	bd38      	pop	{r3, r4, r5, pc}
 8009596:	bf00      	nop
 8009598:	20000870 	.word	0x20000870
 800959c:	20000918 	.word	0x20000918
 80095a0:	2000092c 	.word	0x2000092c
 80095a4:	20000948 	.word	0x20000948
 80095a8:	20000974 	.word	0x20000974
 80095ac:	20000960 	.word	0x20000960
 80095b0:	20000868 	.word	0x20000868
 80095b4:	2000086c 	.word	0x2000086c

080095b8 <prvAddNewTaskToReadyList>:
{
 80095b8:	b510      	push	{r4, lr}
 80095ba:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80095bc:	f001 fbfa 	bl	800adb4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80095c0:	4a21      	ldr	r2, [pc, #132]	; (8009648 <prvAddNewTaskToReadyList+0x90>)
 80095c2:	6813      	ldr	r3, [r2, #0]
 80095c4:	3301      	adds	r3, #1
 80095c6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80095c8:	4b20      	ldr	r3, [pc, #128]	; (800964c <prvAddNewTaskToReadyList+0x94>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	b15b      	cbz	r3, 80095e6 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80095ce:	4b20      	ldr	r3, [pc, #128]	; (8009650 <prvAddNewTaskToReadyList+0x98>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	b96b      	cbnz	r3, 80095f0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80095d4:	4b1d      	ldr	r3, [pc, #116]	; (800964c <prvAddNewTaskToReadyList+0x94>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095dc:	429a      	cmp	r2, r3
 80095de:	d807      	bhi.n	80095f0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80095e0:	4b1a      	ldr	r3, [pc, #104]	; (800964c <prvAddNewTaskToReadyList+0x94>)
 80095e2:	601c      	str	r4, [r3, #0]
 80095e4:	e004      	b.n	80095f0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80095e6:	4b19      	ldr	r3, [pc, #100]	; (800964c <prvAddNewTaskToReadyList+0x94>)
 80095e8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095ea:	6813      	ldr	r3, [r2, #0]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d027      	beq.n	8009640 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 80095f0:	4a18      	ldr	r2, [pc, #96]	; (8009654 <prvAddNewTaskToReadyList+0x9c>)
 80095f2:	6813      	ldr	r3, [r2, #0]
 80095f4:	3301      	adds	r3, #1
 80095f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80095f8:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 80095fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095fc:	2201      	movs	r2, #1
 80095fe:	409a      	lsls	r2, r3
 8009600:	4915      	ldr	r1, [pc, #84]	; (8009658 <prvAddNewTaskToReadyList+0xa0>)
 8009602:	6808      	ldr	r0, [r1, #0]
 8009604:	4302      	orrs	r2, r0
 8009606:	600a      	str	r2, [r1, #0]
 8009608:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800960c:	009a      	lsls	r2, r3, #2
 800960e:	1d21      	adds	r1, r4, #4
 8009610:	4812      	ldr	r0, [pc, #72]	; (800965c <prvAddNewTaskToReadyList+0xa4>)
 8009612:	4410      	add	r0, r2
 8009614:	f7ff fa83 	bl	8008b1e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009618:	f001 fbee 	bl	800adf8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800961c:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <prvAddNewTaskToReadyList+0x98>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	b16b      	cbz	r3, 800963e <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009622:	4b0a      	ldr	r3, [pc, #40]	; (800964c <prvAddNewTaskToReadyList+0x94>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009628:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800962a:	429a      	cmp	r2, r3
 800962c:	d207      	bcs.n	800963e <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 800962e:	4b0c      	ldr	r3, [pc, #48]	; (8009660 <prvAddNewTaskToReadyList+0xa8>)
 8009630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	f3bf 8f6f 	isb	sy
}
 800963e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8009640:	f7ff ff86 	bl	8009550 <prvInitialiseTaskLists>
 8009644:	e7d4      	b.n	80095f0 <prvAddNewTaskToReadyList+0x38>
 8009646:	bf00      	nop
 8009648:	20000900 	.word	0x20000900
 800964c:	20000864 	.word	0x20000864
 8009650:	2000095c 	.word	0x2000095c
 8009654:	20000910 	.word	0x20000910
 8009658:	20000914 	.word	0x20000914
 800965c:	20000870 	.word	0x20000870
 8009660:	e000ed04 	.word	0xe000ed04

08009664 <prvDeleteTCB>:
	{
 8009664:	b510      	push	{r4, lr}
 8009666:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009668:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800966c:	b933      	cbnz	r3, 800967c <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 800966e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8009670:	f001 fdda 	bl	800b228 <vPortFree>
				vPortFree( pxTCB );
 8009674:	4620      	mov	r0, r4
 8009676:	f001 fdd7 	bl	800b228 <vPortFree>
	}
 800967a:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800967c:	2b01      	cmp	r3, #1
 800967e:	d00a      	beq.n	8009696 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009680:	2b02      	cmp	r3, #2
 8009682:	d0fa      	beq.n	800967a <prvDeleteTCB+0x16>
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	e7fe      	b.n	8009694 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 8009696:	f001 fdc7 	bl	800b228 <vPortFree>
 800969a:	e7ee      	b.n	800967a <prvDeleteTCB+0x16>

0800969c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800969c:	4b0f      	ldr	r3, [pc, #60]	; (80096dc <prvCheckTasksWaitingTermination+0x40>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	b1d3      	cbz	r3, 80096d8 <prvCheckTasksWaitingTermination+0x3c>
{
 80096a2:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80096a4:	f001 fb86 	bl	800adb4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096a8:	4b0d      	ldr	r3, [pc, #52]	; (80096e0 <prvCheckTasksWaitingTermination+0x44>)
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096ae:	1d20      	adds	r0, r4, #4
 80096b0:	f7ff fa5b 	bl	8008b6a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80096b4:	4a0b      	ldr	r2, [pc, #44]	; (80096e4 <prvCheckTasksWaitingTermination+0x48>)
 80096b6:	6813      	ldr	r3, [r2, #0]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80096bc:	4a07      	ldr	r2, [pc, #28]	; (80096dc <prvCheckTasksWaitingTermination+0x40>)
 80096be:	6813      	ldr	r3, [r2, #0]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80096c4:	f001 fb98 	bl	800adf8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80096c8:	4620      	mov	r0, r4
 80096ca:	f7ff ffcb 	bl	8009664 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096ce:	4b03      	ldr	r3, [pc, #12]	; (80096dc <prvCheckTasksWaitingTermination+0x40>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1e6      	bne.n	80096a4 <prvCheckTasksWaitingTermination+0x8>
}
 80096d6:	bd10      	pop	{r4, pc}
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	20000904 	.word	0x20000904
 80096e0:	20000974 	.word	0x20000974
 80096e4:	20000900 	.word	0x20000900

080096e8 <prvIdleTask>:
{
 80096e8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80096ea:	f7ff ffd7 	bl	800969c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096ee:	4b06      	ldr	r3, [pc, #24]	; (8009708 <prvIdleTask+0x20>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d9f9      	bls.n	80096ea <prvIdleTask+0x2>
				taskYIELD();
 80096f6:	4b05      	ldr	r3, [pc, #20]	; (800970c <prvIdleTask+0x24>)
 80096f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	e7f0      	b.n	80096ea <prvIdleTask+0x2>
 8009708:	20000870 	.word	0x20000870
 800970c:	e000ed04 	.word	0xe000ed04

08009710 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	4604      	mov	r4, r0
 8009714:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009716:	4b1d      	ldr	r3, [pc, #116]	; (800978c <prvAddCurrentTaskToDelayedList+0x7c>)
 8009718:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800971a:	4b1d      	ldr	r3, [pc, #116]	; (8009790 <prvAddCurrentTaskToDelayedList+0x80>)
 800971c:	6818      	ldr	r0, [r3, #0]
 800971e:	3004      	adds	r0, #4
 8009720:	f7ff fa23 	bl	8008b6a <uxListRemove>
 8009724:	b950      	cbnz	r0, 800973c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009726:	4b1a      	ldr	r3, [pc, #104]	; (8009790 <prvAddCurrentTaskToDelayedList+0x80>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972c:	2301      	movs	r3, #1
 800972e:	fa03 f202 	lsl.w	r2, r3, r2
 8009732:	4918      	ldr	r1, [pc, #96]	; (8009794 <prvAddCurrentTaskToDelayedList+0x84>)
 8009734:	680b      	ldr	r3, [r1, #0]
 8009736:	ea23 0302 	bic.w	r3, r3, r2
 800973a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800973c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8009740:	d013      	beq.n	800976a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009742:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009744:	4b12      	ldr	r3, [pc, #72]	; (8009790 <prvAddCurrentTaskToDelayedList+0x80>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800974a:	42a5      	cmp	r5, r4
 800974c:	d816      	bhi.n	800977c <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800974e:	4b12      	ldr	r3, [pc, #72]	; (8009798 <prvAddCurrentTaskToDelayedList+0x88>)
 8009750:	6818      	ldr	r0, [r3, #0]
 8009752:	4b0f      	ldr	r3, [pc, #60]	; (8009790 <prvAddCurrentTaskToDelayedList+0x80>)
 8009754:	6819      	ldr	r1, [r3, #0]
 8009756:	3104      	adds	r1, #4
 8009758:	f7ff f9ed 	bl	8008b36 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800975c:	4b0f      	ldr	r3, [pc, #60]	; (800979c <prvAddCurrentTaskToDelayedList+0x8c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	42a3      	cmp	r3, r4
 8009762:	d912      	bls.n	800978a <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8009764:	4b0d      	ldr	r3, [pc, #52]	; (800979c <prvAddCurrentTaskToDelayedList+0x8c>)
 8009766:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009768:	e00f      	b.n	800978a <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800976a:	2e00      	cmp	r6, #0
 800976c:	d0e9      	beq.n	8009742 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800976e:	4b08      	ldr	r3, [pc, #32]	; (8009790 <prvAddCurrentTaskToDelayedList+0x80>)
 8009770:	6819      	ldr	r1, [r3, #0]
 8009772:	3104      	adds	r1, #4
 8009774:	480a      	ldr	r0, [pc, #40]	; (80097a0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009776:	f7ff f9d2 	bl	8008b1e <vListInsertEnd>
 800977a:	e006      	b.n	800978a <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800977c:	4b09      	ldr	r3, [pc, #36]	; (80097a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800977e:	6818      	ldr	r0, [r3, #0]
 8009780:	4b03      	ldr	r3, [pc, #12]	; (8009790 <prvAddCurrentTaskToDelayedList+0x80>)
 8009782:	6819      	ldr	r1, [r3, #0]
 8009784:	3104      	adds	r1, #4
 8009786:	f7ff f9d6 	bl	8008b36 <vListInsert>
}
 800978a:	bd70      	pop	{r4, r5, r6, pc}
 800978c:	20000988 	.word	0x20000988
 8009790:	20000864 	.word	0x20000864
 8009794:	20000914 	.word	0x20000914
 8009798:	20000868 	.word	0x20000868
 800979c:	20000940 	.word	0x20000940
 80097a0:	20000960 	.word	0x20000960
 80097a4:	2000086c 	.word	0x2000086c

080097a8 <prvWriteNameToBuffer>:
	{
 80097a8:	b510      	push	{r4, lr}
 80097aa:	4604      	mov	r4, r0
		strcpy( pcBuffer, pcTaskName );
 80097ac:	f002 faa4 	bl	800bcf8 <strcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80097b0:	4620      	mov	r0, r4
 80097b2:	f7f6 fd15 	bl	80001e0 <strlen>
 80097b6:	e002      	b.n	80097be <prvWriteNameToBuffer+0x16>
			pcBuffer[ x ] = ' ';
 80097b8:	2320      	movs	r3, #32
 80097ba:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80097bc:	3001      	adds	r0, #1
 80097be:	280e      	cmp	r0, #14
 80097c0:	d9fa      	bls.n	80097b8 <prvWriteNameToBuffer+0x10>
		pcBuffer[ x ] = ( char ) 0x00;
 80097c2:	2300      	movs	r3, #0
 80097c4:	5423      	strb	r3, [r4, r0]
	}
 80097c6:	4420      	add	r0, r4
 80097c8:	bd10      	pop	{r4, pc}

080097ca <xTaskCreateStatic>:
	{
 80097ca:	b570      	push	{r4, r5, r6, lr}
 80097cc:	b086      	sub	sp, #24
 80097ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80097d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80097d2:	b945      	cbnz	r5, 80097e6 <xTaskCreateStatic+0x1c>
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	e7fe      	b.n	80097e4 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80097e6:	b944      	cbnz	r4, 80097fa <xTaskCreateStatic+0x30>
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	e7fe      	b.n	80097f8 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80097fa:	2664      	movs	r6, #100	; 0x64
 80097fc:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097fe:	9e04      	ldr	r6, [sp, #16]
 8009800:	2e64      	cmp	r6, #100	; 0x64
 8009802:	d008      	beq.n	8009816 <xTaskCreateStatic+0x4c>
 8009804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	e7fe      	b.n	8009814 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009816:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009818:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800981a:	2502      	movs	r5, #2
 800981c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009820:	2500      	movs	r5, #0
 8009822:	9503      	str	r5, [sp, #12]
 8009824:	9402      	str	r4, [sp, #8]
 8009826:	ad05      	add	r5, sp, #20
 8009828:	9501      	str	r5, [sp, #4]
 800982a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800982c:	9500      	str	r5, [sp, #0]
 800982e:	f7ff fe3f 	bl	80094b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009832:	4620      	mov	r0, r4
 8009834:	f7ff fec0 	bl	80095b8 <prvAddNewTaskToReadyList>
	}
 8009838:	9805      	ldr	r0, [sp, #20]
 800983a:	b006      	add	sp, #24
 800983c:	bd70      	pop	{r4, r5, r6, pc}

0800983e <xTaskCreate>:
	{
 800983e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009842:	b085      	sub	sp, #20
 8009844:	4607      	mov	r7, r0
 8009846:	4688      	mov	r8, r1
 8009848:	4615      	mov	r5, r2
 800984a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800984c:	0090      	lsls	r0, r2, #2
 800984e:	f001 fc67 	bl	800b120 <pvPortMalloc>
			if( pxStack != NULL )
 8009852:	b308      	cbz	r0, 8009898 <xTaskCreate+0x5a>
 8009854:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009856:	2064      	movs	r0, #100	; 0x64
 8009858:	f001 fc62 	bl	800b120 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800985c:	4604      	mov	r4, r0
 800985e:	b1b8      	cbz	r0, 8009890 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8009860:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8009862:	b1e4      	cbz	r4, 800989e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009864:	2300      	movs	r3, #0
 8009866:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800986a:	9303      	str	r3, [sp, #12]
 800986c:	9402      	str	r4, [sp, #8]
 800986e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009870:	9301      	str	r3, [sp, #4]
 8009872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	464b      	mov	r3, r9
 8009878:	462a      	mov	r2, r5
 800987a:	4641      	mov	r1, r8
 800987c:	4638      	mov	r0, r7
 800987e:	f7ff fe17 	bl	80094b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009882:	4620      	mov	r0, r4
 8009884:	f7ff fe98 	bl	80095b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009888:	2001      	movs	r0, #1
	}
 800988a:	b005      	add	sp, #20
 800988c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8009890:	4630      	mov	r0, r6
 8009892:	f001 fcc9 	bl	800b228 <vPortFree>
 8009896:	e7e4      	b.n	8009862 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800989c:	e7f5      	b.n	800988a <xTaskCreate+0x4c>
 800989e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80098a2:	e7f2      	b.n	800988a <xTaskCreate+0x4c>

080098a4 <eTaskGetState>:
	{
 80098a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 80098a6:	b1d0      	cbz	r0, 80098de <eTaskGetState+0x3a>
 80098a8:	4604      	mov	r4, r0
		if( pxTCB == pxCurrentTCB )
 80098aa:	4b1d      	ldr	r3, [pc, #116]	; (8009920 <eTaskGetState+0x7c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4283      	cmp	r3, r0
 80098b0:	d029      	beq.n	8009906 <eTaskGetState+0x62>
			taskENTER_CRITICAL();
 80098b2:	f001 fa7f 	bl	800adb4 <vPortEnterCritical>
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80098b6:	6965      	ldr	r5, [r4, #20]
				pxDelayedList = pxDelayedTaskList;
 80098b8:	4b1a      	ldr	r3, [pc, #104]	; (8009924 <eTaskGetState+0x80>)
 80098ba:	681f      	ldr	r7, [r3, #0]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80098bc:	4b1a      	ldr	r3, [pc, #104]	; (8009928 <eTaskGetState+0x84>)
 80098be:	681e      	ldr	r6, [r3, #0]
			taskEXIT_CRITICAL();
 80098c0:	f001 fa9a 	bl	800adf8 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80098c4:	42bd      	cmp	r5, r7
 80098c6:	d020      	beq.n	800990a <eTaskGetState+0x66>
 80098c8:	42b5      	cmp	r5, r6
 80098ca:	d020      	beq.n	800990e <eTaskGetState+0x6a>
				else if( pxStateList == &xSuspendedTaskList )
 80098cc:	4b17      	ldr	r3, [pc, #92]	; (800992c <eTaskGetState+0x88>)
 80098ce:	429d      	cmp	r5, r3
 80098d0:	d00e      	beq.n	80098f0 <eTaskGetState+0x4c>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80098d2:	4b17      	ldr	r3, [pc, #92]	; (8009930 <eTaskGetState+0x8c>)
 80098d4:	429d      	cmp	r5, r3
 80098d6:	d020      	beq.n	800991a <eTaskGetState+0x76>
 80098d8:	b19d      	cbz	r5, 8009902 <eTaskGetState+0x5e>
				eReturn = eReady;
 80098da:	2001      	movs	r0, #1
 80098dc:	e014      	b.n	8009908 <eTaskGetState+0x64>
 80098de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	e7fe      	b.n	80098ee <eTaskGetState+0x4a>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80098f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80098f2:	b973      	cbnz	r3, 8009912 <eTaskGetState+0x6e>
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80098f4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d10b      	bne.n	8009916 <eTaskGetState+0x72>
								eReturn = eBlocked;
 80098fe:	2002      	movs	r0, #2
 8009900:	e002      	b.n	8009908 <eTaskGetState+0x64>
					eReturn = eDeleted;
 8009902:	2004      	movs	r0, #4
 8009904:	e000      	b.n	8009908 <eTaskGetState+0x64>
			eReturn = eRunning;
 8009906:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				eReturn = eBlocked;
 800990a:	2002      	movs	r0, #2
 800990c:	e7fc      	b.n	8009908 <eTaskGetState+0x64>
 800990e:	2002      	movs	r0, #2
 8009910:	e7fa      	b.n	8009908 <eTaskGetState+0x64>
						eReturn = eBlocked;
 8009912:	2002      	movs	r0, #2
 8009914:	e7f8      	b.n	8009908 <eTaskGetState+0x64>
								eReturn = eSuspended;
 8009916:	2003      	movs	r0, #3
 8009918:	e7f6      	b.n	8009908 <eTaskGetState+0x64>
					eReturn = eDeleted;
 800991a:	2004      	movs	r0, #4
 800991c:	e7f4      	b.n	8009908 <eTaskGetState+0x64>
 800991e:	bf00      	nop
 8009920:	20000864 	.word	0x20000864
 8009924:	20000868 	.word	0x20000868
 8009928:	2000086c 	.word	0x2000086c
 800992c:	20000960 	.word	0x20000960
 8009930:	20000974 	.word	0x20000974

08009934 <vTaskStartScheduler>:
{
 8009934:	b510      	push	{r4, lr}
 8009936:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009938:	2400      	movs	r4, #0
 800993a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800993c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800993e:	aa07      	add	r2, sp, #28
 8009940:	a906      	add	r1, sp, #24
 8009942:	a805      	add	r0, sp, #20
 8009944:	f7fa f91e 	bl	8003b84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009948:	9b05      	ldr	r3, [sp, #20]
 800994a:	9302      	str	r3, [sp, #8]
 800994c:	9b06      	ldr	r3, [sp, #24]
 800994e:	9301      	str	r3, [sp, #4]
 8009950:	9400      	str	r4, [sp, #0]
 8009952:	4623      	mov	r3, r4
 8009954:	9a07      	ldr	r2, [sp, #28]
 8009956:	4918      	ldr	r1, [pc, #96]	; (80099b8 <vTaskStartScheduler+0x84>)
 8009958:	4818      	ldr	r0, [pc, #96]	; (80099bc <vTaskStartScheduler+0x88>)
 800995a:	f7ff ff36 	bl	80097ca <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800995e:	b140      	cbz	r0, 8009972 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 8009960:	f000 ffc8 	bl	800a8f4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009964:	2801      	cmp	r0, #1
 8009966:	d006      	beq.n	8009976 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009968:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800996c:	d01a      	beq.n	80099a4 <vTaskStartScheduler+0x70>
}
 800996e:	b008      	add	sp, #32
 8009970:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8009972:	2000      	movs	r0, #0
 8009974:	e7f6      	b.n	8009964 <vTaskStartScheduler+0x30>
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8009986:	4b0e      	ldr	r3, [pc, #56]	; (80099c0 <vTaskStartScheduler+0x8c>)
 8009988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800998c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800998e:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <vTaskStartScheduler+0x90>)
 8009990:	2201      	movs	r2, #1
 8009992:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009994:	2300      	movs	r3, #0
 8009996:	4a0c      	ldr	r2, [pc, #48]	; (80099c8 <vTaskStartScheduler+0x94>)
 8009998:	6013      	str	r3, [r2, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800999a:	4a0c      	ldr	r2, [pc, #48]	; (80099cc <vTaskStartScheduler+0x98>)
 800999c:	6013      	str	r3, [r2, #0]
		if( xPortStartScheduler() != pdFALSE )
 800999e:	f001 faab 	bl	800aef8 <xPortStartScheduler>
 80099a2:	e7e4      	b.n	800996e <vTaskStartScheduler+0x3a>
 80099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	e7fe      	b.n	80099b4 <vTaskStartScheduler+0x80>
 80099b6:	bf00      	nop
 80099b8:	0800cf84 	.word	0x0800cf84
 80099bc:	080096e9 	.word	0x080096e9
 80099c0:	20000940 	.word	0x20000940
 80099c4:	2000095c 	.word	0x2000095c
 80099c8:	20000988 	.word	0x20000988
 80099cc:	20003434 	.word	0x20003434

080099d0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80099d0:	4a02      	ldr	r2, [pc, #8]	; (80099dc <vTaskSuspendAll+0xc>)
 80099d2:	6813      	ldr	r3, [r2, #0]
 80099d4:	3301      	adds	r3, #1
 80099d6:	6013      	str	r3, [r2, #0]
}
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	2000090c 	.word	0x2000090c

080099e0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80099e0:	4b01      	ldr	r3, [pc, #4]	; (80099e8 <xTaskGetTickCount+0x8>)
 80099e2:	6818      	ldr	r0, [r3, #0]
}
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	20000988 	.word	0x20000988

080099ec <xTaskIncrementTick>:
{
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099ee:	4b3a      	ldr	r3, [pc, #232]	; (8009ad8 <xTaskIncrementTick+0xec>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d164      	bne.n	8009ac0 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099f6:	4b39      	ldr	r3, [pc, #228]	; (8009adc <xTaskIncrementTick+0xf0>)
 80099f8:	681d      	ldr	r5, [r3, #0]
 80099fa:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80099fc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099fe:	b9c5      	cbnz	r5, 8009a32 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009a00:	4b37      	ldr	r3, [pc, #220]	; (8009ae0 <xTaskIncrementTick+0xf4>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	b143      	cbz	r3, 8009a1a <xTaskIncrementTick+0x2e>
 8009a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	e7fe      	b.n	8009a18 <xTaskIncrementTick+0x2c>
 8009a1a:	4a31      	ldr	r2, [pc, #196]	; (8009ae0 <xTaskIncrementTick+0xf4>)
 8009a1c:	6811      	ldr	r1, [r2, #0]
 8009a1e:	4b31      	ldr	r3, [pc, #196]	; (8009ae4 <xTaskIncrementTick+0xf8>)
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	6010      	str	r0, [r2, #0]
 8009a24:	6019      	str	r1, [r3, #0]
 8009a26:	4a30      	ldr	r2, [pc, #192]	; (8009ae8 <xTaskIncrementTick+0xfc>)
 8009a28:	6813      	ldr	r3, [r2, #0]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	6013      	str	r3, [r2, #0]
 8009a2e:	f7ff fd29 	bl	8009484 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a32:	4b2e      	ldr	r3, [pc, #184]	; (8009aec <xTaskIncrementTick+0x100>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	42ab      	cmp	r3, r5
 8009a38:	d938      	bls.n	8009aac <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8009a3a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a3c:	4b2c      	ldr	r3, [pc, #176]	; (8009af0 <xTaskIncrementTick+0x104>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009a46:	009a      	lsls	r2, r3, #2
 8009a48:	4b2a      	ldr	r3, [pc, #168]	; (8009af4 <xTaskIncrementTick+0x108>)
 8009a4a:	589b      	ldr	r3, [r3, r2]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d93c      	bls.n	8009aca <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8009a50:	2401      	movs	r4, #1
 8009a52:	e03a      	b.n	8009aca <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8009a54:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a56:	4b22      	ldr	r3, [pc, #136]	; (8009ae0 <xTaskIncrementTick+0xf4>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	b343      	cbz	r3, 8009ab0 <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a5e:	4b20      	ldr	r3, [pc, #128]	; (8009ae0 <xTaskIncrementTick+0xf4>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a66:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8009a68:	429d      	cmp	r5, r3
 8009a6a:	d326      	bcc.n	8009aba <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a6c:	1d37      	adds	r7, r6, #4
 8009a6e:	4638      	mov	r0, r7
 8009a70:	f7ff f87b 	bl	8008b6a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a74:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8009a76:	b11b      	cbz	r3, 8009a80 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a78:	f106 0018 	add.w	r0, r6, #24
 8009a7c:	f7ff f875 	bl	8008b6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a80:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009a82:	2201      	movs	r2, #1
 8009a84:	409a      	lsls	r2, r3
 8009a86:	491c      	ldr	r1, [pc, #112]	; (8009af8 <xTaskIncrementTick+0x10c>)
 8009a88:	6808      	ldr	r0, [r1, #0]
 8009a8a:	4302      	orrs	r2, r0
 8009a8c:	600a      	str	r2, [r1, #0]
 8009a8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009a92:	009a      	lsls	r2, r3, #2
 8009a94:	4639      	mov	r1, r7
 8009a96:	4817      	ldr	r0, [pc, #92]	; (8009af4 <xTaskIncrementTick+0x108>)
 8009a98:	4410      	add	r0, r2
 8009a9a:	f7ff f840 	bl	8008b1e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a9e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8009aa0:	4b13      	ldr	r3, [pc, #76]	; (8009af0 <xTaskIncrementTick+0x104>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d2d4      	bcs.n	8009a54 <xTaskIncrementTick+0x68>
 8009aaa:	e7d4      	b.n	8009a56 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8009aac:	2400      	movs	r4, #0
 8009aae:	e7d2      	b.n	8009a56 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ab0:	4b0e      	ldr	r3, [pc, #56]	; (8009aec <xTaskIncrementTick+0x100>)
 8009ab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ab6:	601a      	str	r2, [r3, #0]
					break;
 8009ab8:	e7c0      	b.n	8009a3c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8009aba:	4a0c      	ldr	r2, [pc, #48]	; (8009aec <xTaskIncrementTick+0x100>)
 8009abc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009abe:	e7bd      	b.n	8009a3c <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8009ac0:	4a0e      	ldr	r2, [pc, #56]	; (8009afc <xTaskIncrementTick+0x110>)
 8009ac2:	6813      	ldr	r3, [r2, #0]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009ac8:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8009aca:	4b0d      	ldr	r3, [pc, #52]	; (8009b00 <xTaskIncrementTick+0x114>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	b103      	cbz	r3, 8009ad2 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8009ad0:	2401      	movs	r4, #1
}
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	2000090c 	.word	0x2000090c
 8009adc:	20000988 	.word	0x20000988
 8009ae0:	20000868 	.word	0x20000868
 8009ae4:	2000086c 	.word	0x2000086c
 8009ae8:	20000944 	.word	0x20000944
 8009aec:	20000940 	.word	0x20000940
 8009af0:	20000864 	.word	0x20000864
 8009af4:	20000870 	.word	0x20000870
 8009af8:	20000914 	.word	0x20000914
 8009afc:	20000908 	.word	0x20000908
 8009b00:	2000098c 	.word	0x2000098c

08009b04 <xTaskResumeAll>:
{
 8009b04:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8009b06:	4b33      	ldr	r3, [pc, #204]	; (8009bd4 <xTaskResumeAll+0xd0>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	b943      	cbnz	r3, 8009b1e <xTaskResumeAll+0x1a>
 8009b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	e7fe      	b.n	8009b1c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8009b1e:	f001 f949 	bl	800adb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009b22:	4b2c      	ldr	r3, [pc, #176]	; (8009bd4 <xTaskResumeAll+0xd0>)
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	3a01      	subs	r2, #1
 8009b28:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d14d      	bne.n	8009bcc <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b30:	4b29      	ldr	r3, [pc, #164]	; (8009bd8 <xTaskResumeAll+0xd4>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	b923      	cbnz	r3, 8009b40 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8009b36:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009b38:	f001 f95e 	bl	800adf8 <vPortExitCritical>
}
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8009b40:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b42:	4b26      	ldr	r3, [pc, #152]	; (8009bdc <xTaskResumeAll+0xd8>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	b31b      	cbz	r3, 8009b90 <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b48:	4b24      	ldr	r3, [pc, #144]	; (8009bdc <xTaskResumeAll+0xd8>)
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b4e:	f104 0018 	add.w	r0, r4, #24
 8009b52:	f7ff f80a 	bl	8008b6a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b56:	1d25      	adds	r5, r4, #4
 8009b58:	4628      	mov	r0, r5
 8009b5a:	f7ff f806 	bl	8008b6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b60:	2201      	movs	r2, #1
 8009b62:	409a      	lsls	r2, r3
 8009b64:	491e      	ldr	r1, [pc, #120]	; (8009be0 <xTaskResumeAll+0xdc>)
 8009b66:	6808      	ldr	r0, [r1, #0]
 8009b68:	4302      	orrs	r2, r0
 8009b6a:	600a      	str	r2, [r1, #0]
 8009b6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009b70:	009a      	lsls	r2, r3, #2
 8009b72:	4629      	mov	r1, r5
 8009b74:	481b      	ldr	r0, [pc, #108]	; (8009be4 <xTaskResumeAll+0xe0>)
 8009b76:	4410      	add	r0, r2
 8009b78:	f7fe ffd1 	bl	8008b1e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009b7e:	4b1a      	ldr	r3, [pc, #104]	; (8009be8 <xTaskResumeAll+0xe4>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d3dc      	bcc.n	8009b42 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8009b88:	4b18      	ldr	r3, [pc, #96]	; (8009bec <xTaskResumeAll+0xe8>)
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	e7d8      	b.n	8009b42 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8009b90:	b10c      	cbz	r4, 8009b96 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8009b92:	f7ff fc77 	bl	8009484 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009b96:	4b16      	ldr	r3, [pc, #88]	; (8009bf0 <xTaskResumeAll+0xec>)
 8009b98:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009b9a:	b154      	cbz	r4, 8009bb2 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8009b9c:	f7ff ff26 	bl	80099ec <xTaskIncrementTick>
 8009ba0:	b110      	cbz	r0, 8009ba8 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8009ba2:	4b12      	ldr	r3, [pc, #72]	; (8009bec <xTaskResumeAll+0xe8>)
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009ba8:	3c01      	subs	r4, #1
 8009baa:	d1f7      	bne.n	8009b9c <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8009bac:	4b10      	ldr	r3, [pc, #64]	; (8009bf0 <xTaskResumeAll+0xec>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8009bb2:	4b0e      	ldr	r3, [pc, #56]	; (8009bec <xTaskResumeAll+0xe8>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	b15b      	cbz	r3, 8009bd0 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8009bb8:	4b0e      	ldr	r3, [pc, #56]	; (8009bf4 <xTaskResumeAll+0xf0>)
 8009bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bbe:	601a      	str	r2, [r3, #0]
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009bc8:	2401      	movs	r4, #1
 8009bca:	e7b5      	b.n	8009b38 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8009bcc:	2400      	movs	r4, #0
 8009bce:	e7b3      	b.n	8009b38 <xTaskResumeAll+0x34>
 8009bd0:	2400      	movs	r4, #0
 8009bd2:	e7b1      	b.n	8009b38 <xTaskResumeAll+0x34>
 8009bd4:	2000090c 	.word	0x2000090c
 8009bd8:	20000900 	.word	0x20000900
 8009bdc:	20000948 	.word	0x20000948
 8009be0:	20000914 	.word	0x20000914
 8009be4:	20000870 	.word	0x20000870
 8009be8:	20000864 	.word	0x20000864
 8009bec:	2000098c 	.word	0x2000098c
 8009bf0:	20000908 	.word	0x20000908
 8009bf4:	e000ed04 	.word	0xe000ed04

08009bf8 <vTaskDelayUntil>:
	{
 8009bf8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8009bfa:	b150      	cbz	r0, 8009c12 <vTaskDelayUntil+0x1a>
 8009bfc:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 8009bfe:	b989      	cbnz	r1, 8009c24 <vTaskDelayUntil+0x2c>
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	e7fe      	b.n	8009c10 <vTaskDelayUntil+0x18>
 8009c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	e7fe      	b.n	8009c22 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
 8009c24:	4b1a      	ldr	r3, [pc, #104]	; (8009c90 <vTaskDelayUntil+0x98>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	b143      	cbz	r3, 8009c3c <vTaskDelayUntil+0x44>
 8009c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	e7fe      	b.n	8009c3a <vTaskDelayUntil+0x42>
 8009c3c:	460c      	mov	r4, r1
		vTaskSuspendAll();
 8009c3e:	f7ff fec7 	bl	80099d0 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8009c42:	4b14      	ldr	r3, [pc, #80]	; (8009c94 <vTaskDelayUntil+0x9c>)
 8009c44:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009c46:	682a      	ldr	r2, [r5, #0]
 8009c48:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
 8009c4a:	4282      	cmp	r2, r0
 8009c4c:	d918      	bls.n	8009c80 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009c4e:	42a2      	cmp	r2, r4
 8009c50:	d80c      	bhi.n	8009c6c <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
 8009c52:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
 8009c54:	f7ff ff56 	bl	8009b04 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009c58:	b938      	cbnz	r0, 8009c6a <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
 8009c5a:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <vTaskDelayUntil+0xa0>)
 8009c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c60:	601a      	str	r2, [r3, #0]
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	f3bf 8f6f 	isb	sy
	}
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009c6c:	42a0      	cmp	r0, r4
 8009c6e:	d301      	bcc.n	8009c74 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 8009c70:	602c      	str	r4, [r5, #0]
 8009c72:	e7ef      	b.n	8009c54 <vTaskDelayUntil+0x5c>
 8009c74:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009c76:	2100      	movs	r1, #0
 8009c78:	1a20      	subs	r0, r4, r0
 8009c7a:	f7ff fd49 	bl	8009710 <prvAddCurrentTaskToDelayedList>
 8009c7e:	e7e9      	b.n	8009c54 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009c80:	42a2      	cmp	r2, r4
 8009c82:	d801      	bhi.n	8009c88 <vTaskDelayUntil+0x90>
 8009c84:	42a0      	cmp	r0, r4
 8009c86:	d201      	bcs.n	8009c8c <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
 8009c88:	602c      	str	r4, [r5, #0]
 8009c8a:	e7f4      	b.n	8009c76 <vTaskDelayUntil+0x7e>
 8009c8c:	602c      	str	r4, [r5, #0]
 8009c8e:	e7e1      	b.n	8009c54 <vTaskDelayUntil+0x5c>
 8009c90:	2000090c 	.word	0x2000090c
 8009c94:	20000988 	.word	0x20000988
 8009c98:	e000ed04 	.word	0xe000ed04

08009c9c <vTaskDelay>:
	{
 8009c9c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009c9e:	b1a8      	cbz	r0, 8009ccc <vTaskDelay+0x30>
 8009ca0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8009ca2:	4b0f      	ldr	r3, [pc, #60]	; (8009ce0 <vTaskDelay+0x44>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	b143      	cbz	r3, 8009cba <vTaskDelay+0x1e>
 8009ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	e7fe      	b.n	8009cb8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8009cba:	f7ff fe89 	bl	80099d0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f7ff fd25 	bl	8009710 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009cc6:	f7ff ff1d 	bl	8009b04 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009cca:	b938      	cbnz	r0, 8009cdc <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8009ccc:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <vTaskDelay+0x48>)
 8009cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd2:	601a      	str	r2, [r3, #0]
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	f3bf 8f6f 	isb	sy
	}
 8009cdc:	bd10      	pop	{r4, pc}
 8009cde:	bf00      	nop
 8009ce0:	2000090c 	.word	0x2000090c
 8009ce4:	e000ed04 	.word	0xe000ed04

08009ce8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ce8:	4b27      	ldr	r3, [pc, #156]	; (8009d88 <vTaskSwitchContext+0xa0>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	b11b      	cbz	r3, 8009cf6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009cee:	4b27      	ldr	r3, [pc, #156]	; (8009d8c <vTaskSwitchContext+0xa4>)
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8009cf6:	4b25      	ldr	r3, [pc, #148]	; (8009d8c <vTaskSwitchContext+0xa4>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009cfc:	4b24      	ldr	r3, [pc, #144]	; (8009d90 <vTaskSwitchContext+0xa8>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009d00:	4b24      	ldr	r3, [pc, #144]	; (8009d94 <vTaskSwitchContext+0xac>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d905      	bls.n	8009d14 <vTaskSwitchContext+0x2c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009d08:	4923      	ldr	r1, [pc, #140]	; (8009d98 <vTaskSwitchContext+0xb0>)
 8009d0a:	6808      	ldr	r0, [r1, #0]
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8009d10:	440b      	add	r3, r1
 8009d12:	6583      	str	r3, [r0, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009d14:	4b1f      	ldr	r3, [pc, #124]	; (8009d94 <vTaskSwitchContext+0xac>)
 8009d16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d18:	4b20      	ldr	r3, [pc, #128]	; (8009d9c <vTaskSwitchContext+0xb4>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009d1c:	fab3 f383 	clz	r3, r3
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	f1c3 031f 	rsb	r3, r3, #31
 8009d26:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009d2a:	008a      	lsls	r2, r1, #2
 8009d2c:	491c      	ldr	r1, [pc, #112]	; (8009da0 <vTaskSwitchContext+0xb8>)
 8009d2e:	588a      	ldr	r2, [r1, r2]
 8009d30:	b942      	cbnz	r2, 8009d44 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	e7fe      	b.n	8009d42 <vTaskSwitchContext+0x5a>
{
 8009d44:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d46:	4816      	ldr	r0, [pc, #88]	; (8009da0 <vTaskSwitchContext+0xb8>)
 8009d48:	009a      	lsls	r2, r3, #2
 8009d4a:	18d4      	adds	r4, r2, r3
 8009d4c:	00a1      	lsls	r1, r4, #2
 8009d4e:	4401      	add	r1, r0
 8009d50:	684c      	ldr	r4, [r1, #4]
 8009d52:	6864      	ldr	r4, [r4, #4]
 8009d54:	604c      	str	r4, [r1, #4]
 8009d56:	441a      	add	r2, r3
 8009d58:	0091      	lsls	r1, r2, #2
 8009d5a:	3108      	adds	r1, #8
 8009d5c:	4408      	add	r0, r1
 8009d5e:	4284      	cmp	r4, r0
 8009d60:	d00b      	beq.n	8009d7a <vTaskSwitchContext+0x92>
 8009d62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009d66:	009a      	lsls	r2, r3, #2
 8009d68:	4b0d      	ldr	r3, [pc, #52]	; (8009da0 <vTaskSwitchContext+0xb8>)
 8009d6a:	4413      	add	r3, r2
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	68da      	ldr	r2, [r3, #12]
 8009d70:	4b09      	ldr	r3, [pc, #36]	; (8009d98 <vTaskSwitchContext+0xb0>)
 8009d72:	601a      	str	r2, [r3, #0]
}
 8009d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d78:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d7a:	6861      	ldr	r1, [r4, #4]
 8009d7c:	4808      	ldr	r0, [pc, #32]	; (8009da0 <vTaskSwitchContext+0xb8>)
 8009d7e:	2214      	movs	r2, #20
 8009d80:	fb02 0203 	mla	r2, r2, r3, r0
 8009d84:	6051      	str	r1, [r2, #4]
 8009d86:	e7ec      	b.n	8009d62 <vTaskSwitchContext+0x7a>
 8009d88:	2000090c 	.word	0x2000090c
 8009d8c:	2000098c 	.word	0x2000098c
 8009d90:	20003434 	.word	0x20003434
 8009d94:	200008fc 	.word	0x200008fc
 8009d98:	20000864 	.word	0x20000864
 8009d9c:	20000914 	.word	0x20000914
 8009da0:	20000870 	.word	0x20000870

08009da4 <vTaskSuspend>:
	{
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8009da8:	f001 f804 	bl	800adb4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009dac:	b364      	cbz	r4, 8009e08 <vTaskSuspend+0x64>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dae:	1d25      	adds	r5, r4, #4
 8009db0:	4628      	mov	r0, r5
 8009db2:	f7fe feda 	bl	8008b6a <uxListRemove>
 8009db6:	b970      	cbnz	r0, 8009dd6 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009db8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009dba:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8009dbe:	008b      	lsls	r3, r1, #2
 8009dc0:	492b      	ldr	r1, [pc, #172]	; (8009e70 <vTaskSuspend+0xcc>)
 8009dc2:	58cb      	ldr	r3, [r1, r3]
 8009dc4:	b93b      	cbnz	r3, 8009dd6 <vTaskSuspend+0x32>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	fa03 f202 	lsl.w	r2, r3, r2
 8009dcc:	4929      	ldr	r1, [pc, #164]	; (8009e74 <vTaskSuspend+0xd0>)
 8009dce:	680b      	ldr	r3, [r1, #0]
 8009dd0:	ea23 0302 	bic.w	r3, r3, r2
 8009dd4:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009dd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009dd8:	b11b      	cbz	r3, 8009de2 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dda:	f104 0018 	add.w	r0, r4, #24
 8009dde:	f7fe fec4 	bl	8008b6a <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009de2:	4629      	mov	r1, r5
 8009de4:	4824      	ldr	r0, [pc, #144]	; (8009e78 <vTaskSuspend+0xd4>)
 8009de6:	f7fe fe9a 	bl	8008b1e <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009dea:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d00c      	beq.n	8009e0e <vTaskSuspend+0x6a>
		taskEXIT_CRITICAL();
 8009df4:	f001 f800 	bl	800adf8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8009df8:	4b20      	ldr	r3, [pc, #128]	; (8009e7c <vTaskSuspend+0xd8>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	b95b      	cbnz	r3, 8009e16 <vTaskSuspend+0x72>
		if( pxTCB == pxCurrentTCB )
 8009dfe:	4b20      	ldr	r3, [pc, #128]	; (8009e80 <vTaskSuspend+0xdc>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	42a3      	cmp	r3, r4
 8009e04:	d00e      	beq.n	8009e24 <vTaskSuspend+0x80>
	}
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009e08:	4b1d      	ldr	r3, [pc, #116]	; (8009e80 <vTaskSuspend+0xdc>)
 8009e0a:	681c      	ldr	r4, [r3, #0]
 8009e0c:	e7cf      	b.n	8009dae <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8009e14:	e7ee      	b.n	8009df4 <vTaskSuspend+0x50>
			taskENTER_CRITICAL();
 8009e16:	f000 ffcd 	bl	800adb4 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8009e1a:	f7ff fb33 	bl	8009484 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8009e1e:	f000 ffeb 	bl	800adf8 <vPortExitCritical>
 8009e22:	e7ec      	b.n	8009dfe <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
 8009e24:	4b15      	ldr	r3, [pc, #84]	; (8009e7c <vTaskSuspend+0xd8>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	b1a3      	cbz	r3, 8009e54 <vTaskSuspend+0xb0>
				configASSERT( uxSchedulerSuspended == 0 );
 8009e2a:	4b16      	ldr	r3, [pc, #88]	; (8009e84 <vTaskSuspend+0xe0>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	b143      	cbz	r3, 8009e42 <vTaskSuspend+0x9e>
 8009e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	e7fe      	b.n	8009e40 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8009e42:	4b11      	ldr	r3, [pc, #68]	; (8009e88 <vTaskSuspend+0xe4>)
 8009e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e48:	601a      	str	r2, [r3, #0]
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	e7d8      	b.n	8009e06 <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8009e54:	4b08      	ldr	r3, [pc, #32]	; (8009e78 <vTaskSuspend+0xd4>)
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	4b0c      	ldr	r3, [pc, #48]	; (8009e8c <vTaskSuspend+0xe8>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d103      	bne.n	8009e68 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8009e60:	4b07      	ldr	r3, [pc, #28]	; (8009e80 <vTaskSuspend+0xdc>)
 8009e62:	2200      	movs	r2, #0
 8009e64:	601a      	str	r2, [r3, #0]
 8009e66:	e7ce      	b.n	8009e06 <vTaskSuspend+0x62>
					vTaskSwitchContext();
 8009e68:	f7ff ff3e 	bl	8009ce8 <vTaskSwitchContext>
	}
 8009e6c:	e7cb      	b.n	8009e06 <vTaskSuspend+0x62>
 8009e6e:	bf00      	nop
 8009e70:	20000870 	.word	0x20000870
 8009e74:	20000914 	.word	0x20000914
 8009e78:	20000960 	.word	0x20000960
 8009e7c:	2000095c 	.word	0x2000095c
 8009e80:	20000864 	.word	0x20000864
 8009e84:	2000090c 	.word	0x2000090c
 8009e88:	e000ed04 	.word	0xe000ed04
 8009e8c:	20000900 	.word	0x20000900

08009e90 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009e90:	b940      	cbnz	r0, 8009ea4 <vTaskPlaceOnEventList+0x14>
 8009e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e96:	f383 8811 	msr	BASEPRI, r3
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	e7fe      	b.n	8009ea2 <vTaskPlaceOnEventList+0x12>
{
 8009ea4:	b510      	push	{r4, lr}
 8009ea6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ea8:	4b04      	ldr	r3, [pc, #16]	; (8009ebc <vTaskPlaceOnEventList+0x2c>)
 8009eaa:	6819      	ldr	r1, [r3, #0]
 8009eac:	3118      	adds	r1, #24
 8009eae:	f7fe fe42 	bl	8008b36 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009eb2:	2101      	movs	r1, #1
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f7ff fc2b 	bl	8009710 <prvAddCurrentTaskToDelayedList>
}
 8009eba:	bd10      	pop	{r4, pc}
 8009ebc:	20000864 	.word	0x20000864

08009ec0 <vTaskPlaceOnEventListRestricted>:
	{
 8009ec0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8009ec2:	b940      	cbnz	r0, 8009ed6 <vTaskPlaceOnEventListRestricted+0x16>
 8009ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	e7fe      	b.n	8009ed4 <vTaskPlaceOnEventListRestricted+0x14>
 8009ed6:	460c      	mov	r4, r1
 8009ed8:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009eda:	4a06      	ldr	r2, [pc, #24]	; (8009ef4 <vTaskPlaceOnEventListRestricted+0x34>)
 8009edc:	6811      	ldr	r1, [r2, #0]
 8009ede:	3118      	adds	r1, #24
 8009ee0:	f7fe fe1d 	bl	8008b1e <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8009ee4:	b10d      	cbz	r5, 8009eea <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 8009ee6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009eea:	4629      	mov	r1, r5
 8009eec:	4620      	mov	r0, r4
 8009eee:	f7ff fc0f 	bl	8009710 <prvAddCurrentTaskToDelayedList>
	}
 8009ef2:	bd38      	pop	{r3, r4, r5, pc}
 8009ef4:	20000864 	.word	0x20000864

08009ef8 <xTaskRemoveFromEventList>:
{
 8009ef8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009efa:	68c3      	ldr	r3, [r0, #12]
 8009efc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009efe:	b944      	cbnz	r4, 8009f12 <xTaskRemoveFromEventList+0x1a>
 8009f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	e7fe      	b.n	8009f10 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f12:	f104 0518 	add.w	r5, r4, #24
 8009f16:	4628      	mov	r0, r5
 8009f18:	f7fe fe27 	bl	8008b6a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f1c:	4b13      	ldr	r3, [pc, #76]	; (8009f6c <xTaskRemoveFromEventList+0x74>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	b9e3      	cbnz	r3, 8009f5c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f22:	1d25      	adds	r5, r4, #4
 8009f24:	4628      	mov	r0, r5
 8009f26:	f7fe fe20 	bl	8008b6a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	409a      	lsls	r2, r3
 8009f30:	490f      	ldr	r1, [pc, #60]	; (8009f70 <xTaskRemoveFromEventList+0x78>)
 8009f32:	6808      	ldr	r0, [r1, #0]
 8009f34:	4302      	orrs	r2, r0
 8009f36:	600a      	str	r2, [r1, #0]
 8009f38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009f3c:	009a      	lsls	r2, r3, #2
 8009f3e:	4629      	mov	r1, r5
 8009f40:	480c      	ldr	r0, [pc, #48]	; (8009f74 <xTaskRemoveFromEventList+0x7c>)
 8009f42:	4410      	add	r0, r2
 8009f44:	f7fe fdeb 	bl	8008b1e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009f4a:	4b0b      	ldr	r3, [pc, #44]	; (8009f78 <xTaskRemoveFromEventList+0x80>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d908      	bls.n	8009f66 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8009f54:	2001      	movs	r0, #1
 8009f56:	4b09      	ldr	r3, [pc, #36]	; (8009f7c <xTaskRemoveFromEventList+0x84>)
 8009f58:	6018      	str	r0, [r3, #0]
}
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	4808      	ldr	r0, [pc, #32]	; (8009f80 <xTaskRemoveFromEventList+0x88>)
 8009f60:	f7fe fddd 	bl	8008b1e <vListInsertEnd>
 8009f64:	e7f0      	b.n	8009f48 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8009f66:	2000      	movs	r0, #0
	return xReturn;
 8009f68:	e7f7      	b.n	8009f5a <xTaskRemoveFromEventList+0x62>
 8009f6a:	bf00      	nop
 8009f6c:	2000090c 	.word	0x2000090c
 8009f70:	20000914 	.word	0x20000914
 8009f74:	20000870 	.word	0x20000870
 8009f78:	20000864 	.word	0x20000864
 8009f7c:	2000098c 	.word	0x2000098c
 8009f80:	20000948 	.word	0x20000948

08009f84 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f84:	4b03      	ldr	r3, [pc, #12]	; (8009f94 <vTaskInternalSetTimeOutState+0x10>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f8a:	4b03      	ldr	r3, [pc, #12]	; (8009f98 <vTaskInternalSetTimeOutState+0x14>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6043      	str	r3, [r0, #4]
}
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	20000944 	.word	0x20000944
 8009f98:	20000988 	.word	0x20000988

08009f9c <xTaskCheckForTimeOut>:
{
 8009f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8009f9e:	b150      	cbz	r0, 8009fb6 <xTaskCheckForTimeOut+0x1a>
 8009fa0:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8009fa2:	b989      	cbnz	r1, 8009fc8 <xTaskCheckForTimeOut+0x2c>
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	e7fe      	b.n	8009fb4 <xTaskCheckForTimeOut+0x18>
 8009fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	e7fe      	b.n	8009fc6 <xTaskCheckForTimeOut+0x2a>
 8009fc8:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8009fca:	f000 fef3 	bl	800adb4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009fce:	4b11      	ldr	r3, [pc, #68]	; (800a014 <xTaskCheckForTimeOut+0x78>)
 8009fd0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fd2:	6868      	ldr	r0, [r5, #4]
 8009fd4:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fdc:	d016      	beq.n	800a00c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fde:	682f      	ldr	r7, [r5, #0]
 8009fe0:	4e0d      	ldr	r6, [pc, #52]	; (800a018 <xTaskCheckForTimeOut+0x7c>)
 8009fe2:	6836      	ldr	r6, [r6, #0]
 8009fe4:	42b7      	cmp	r7, r6
 8009fe6:	d001      	beq.n	8009fec <xTaskCheckForTimeOut+0x50>
 8009fe8:	4288      	cmp	r0, r1
 8009fea:	d911      	bls.n	800a010 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d803      	bhi.n	8009ff8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009ff4:	2401      	movs	r4, #1
 8009ff6:	e005      	b.n	800a004 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8009ff8:	1a9b      	subs	r3, r3, r2
 8009ffa:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	f7ff ffc1 	bl	8009f84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a002:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a004:	f000 fef8 	bl	800adf8 <vPortExitCritical>
}
 800a008:	4620      	mov	r0, r4
 800a00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800a00c:	2400      	movs	r4, #0
 800a00e:	e7f9      	b.n	800a004 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 800a010:	2401      	movs	r4, #1
 800a012:	e7f7      	b.n	800a004 <xTaskCheckForTimeOut+0x68>
 800a014:	20000988 	.word	0x20000988
 800a018:	20000944 	.word	0x20000944

0800a01c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a01c:	4b01      	ldr	r3, [pc, #4]	; (800a024 <vTaskMissedYield+0x8>)
 800a01e:	2201      	movs	r2, #1
 800a020:	601a      	str	r2, [r3, #0]
}
 800a022:	4770      	bx	lr
 800a024:	2000098c 	.word	0x2000098c

0800a028 <vTaskGetInfo>:
	{
 800a028:	b570      	push	{r4, r5, r6, lr}
 800a02a:	460c      	mov	r4, r1
 800a02c:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 800a02e:	4605      	mov	r5, r0
 800a030:	b1d0      	cbz	r0, 800a068 <vTaskGetInfo+0x40>
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800a032:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800a034:	f105 0234 	add.w	r2, r5, #52	; 0x34
 800a038:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800a03a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800a03c:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800a03e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800a040:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800a042:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800a044:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800a046:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800a048:	6162      	str	r2, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800a04a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800a04c:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 800a04e:	2b05      	cmp	r3, #5
 800a050:	d019      	beq.n	800a086 <vTaskGetInfo+0x5e>
			if( pxTCB == pxCurrentTCB )
 800a052:	4a12      	ldr	r2, [pc, #72]	; (800a09c <vTaskGetInfo+0x74>)
 800a054:	6812      	ldr	r2, [r2, #0]
 800a056:	42aa      	cmp	r2, r5
 800a058:	d009      	beq.n	800a06e <vTaskGetInfo+0x46>
				pxTaskStatus->eCurrentState = eState;
 800a05a:	7323      	strb	r3, [r4, #12]
					if( eState == eSuspended )
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d009      	beq.n	800a074 <vTaskGetInfo+0x4c>
		if( xGetFreeStackSpace != pdFALSE )
 800a060:	b9b6      	cbnz	r6, 800a090 <vTaskGetInfo+0x68>
			pxTaskStatus->usStackHighWaterMark = 0;
 800a062:	2300      	movs	r3, #0
 800a064:	8423      	strh	r3, [r4, #32]
	}
 800a066:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
 800a068:	4a0c      	ldr	r2, [pc, #48]	; (800a09c <vTaskGetInfo+0x74>)
 800a06a:	6815      	ldr	r5, [r2, #0]
 800a06c:	e7e1      	b.n	800a032 <vTaskGetInfo+0xa>
				pxTaskStatus->eCurrentState = eRunning;
 800a06e:	2300      	movs	r3, #0
 800a070:	7323      	strb	r3, [r4, #12]
 800a072:	e7f5      	b.n	800a060 <vTaskGetInfo+0x38>
						vTaskSuspendAll();
 800a074:	f7ff fcac 	bl	80099d0 <vTaskSuspendAll>
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a078:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a07a:	b10b      	cbz	r3, 800a080 <vTaskGetInfo+0x58>
								pxTaskStatus->eCurrentState = eBlocked;
 800a07c:	2302      	movs	r3, #2
 800a07e:	7323      	strb	r3, [r4, #12]
						( void ) xTaskResumeAll();
 800a080:	f7ff fd40 	bl	8009b04 <xTaskResumeAll>
 800a084:	e7ec      	b.n	800a060 <vTaskGetInfo+0x38>
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800a086:	4628      	mov	r0, r5
 800a088:	f7ff fc0c 	bl	80098a4 <eTaskGetState>
 800a08c:	7320      	strb	r0, [r4, #12]
 800a08e:	e7e7      	b.n	800a060 <vTaskGetInfo+0x38>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800a090:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800a092:	f7ff f9ec 	bl	800946e <prvTaskCheckFreeStackSpace>
 800a096:	8420      	strh	r0, [r4, #32]
 800a098:	e7e5      	b.n	800a066 <vTaskGetInfo+0x3e>
 800a09a:	bf00      	nop
 800a09c:	20000864 	.word	0x20000864

0800a0a0 <prvListTasksWithinSingleList>:
	{
 800a0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800a0a4:	680b      	ldr	r3, [r1, #0]
 800a0a6:	b33b      	cbz	r3, 800a0f8 <prvListTasksWithinSingleList+0x58>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0a8:	684b      	ldr	r3, [r1, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	604b      	str	r3, [r1, #4]
 800a0ae:	f101 0908 	add.w	r9, r1, #8
 800a0b2:	454b      	cmp	r3, r9
 800a0b4:	d007      	beq.n	800a0c6 <prvListTasksWithinSingleList+0x26>
 800a0b6:	4690      	mov	r8, r2
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	4607      	mov	r7, r0
 800a0bc:	684b      	ldr	r3, [r1, #4]
 800a0be:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	UBaseType_t uxTask = 0;
 800a0c2:	2500      	movs	r5, #0
 800a0c4:	e010      	b.n	800a0e8 <prvListTasksWithinSingleList+0x48>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	604b      	str	r3, [r1, #4]
 800a0ca:	e7f4      	b.n	800a0b6 <prvListTasksWithinSingleList+0x16>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0cc:	6863      	ldr	r3, [r4, #4]
 800a0ce:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800a0d0:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800a0d4:	0099      	lsls	r1, r3, #2
 800a0d6:	4643      	mov	r3, r8
 800a0d8:	2201      	movs	r2, #1
 800a0da:	4439      	add	r1, r7
 800a0dc:	4630      	mov	r0, r6
 800a0de:	f7ff ffa3 	bl	800a028 <vTaskGetInfo>
				uxTask++;
 800a0e2:	3501      	adds	r5, #1
			} while( pxNextTCB != pxFirstTCB );
 800a0e4:	45b2      	cmp	sl, r6
 800a0e6:	d008      	beq.n	800a0fa <prvListTasksWithinSingleList+0x5a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0e8:	6863      	ldr	r3, [r4, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	6063      	str	r3, [r4, #4]
 800a0ee:	4599      	cmp	r9, r3
 800a0f0:	d1ec      	bne.n	800a0cc <prvListTasksWithinSingleList+0x2c>
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	6063      	str	r3, [r4, #4]
 800a0f6:	e7e9      	b.n	800a0cc <prvListTasksWithinSingleList+0x2c>
	UBaseType_t uxTask = 0;
 800a0f8:	2500      	movs	r5, #0
	}
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a100 <uxTaskGetSystemState>:
	{
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	4607      	mov	r7, r0
 800a104:	460c      	mov	r4, r1
 800a106:	4616      	mov	r6, r2
		vTaskSuspendAll();
 800a108:	f7ff fc62 	bl	80099d0 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800a10c:	4b22      	ldr	r3, [pc, #136]	; (800a198 <uxTaskGetSystemState+0x98>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	42a3      	cmp	r3, r4
 800a112:	d83c      	bhi.n	800a18e <uxTaskGetSystemState+0x8e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800a114:	2507      	movs	r5, #7
 800a116:	2400      	movs	r4, #0
					uxQueue--;
 800a118:	3d01      	subs	r5, #1
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800a11a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800a11e:	0098      	lsls	r0, r3, #2
 800a120:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800a124:	0093      	lsls	r3, r2, #2
 800a126:	2201      	movs	r2, #1
 800a128:	491c      	ldr	r1, [pc, #112]	; (800a19c <uxTaskGetSystemState+0x9c>)
 800a12a:	4419      	add	r1, r3
 800a12c:	4438      	add	r0, r7
 800a12e:	f7ff ffb7 	bl	800a0a0 <prvListTasksWithinSingleList>
 800a132:	4404      	add	r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a134:	2d00      	cmp	r5, #0
 800a136:	d1ef      	bne.n	800a118 <uxTaskGetSystemState+0x18>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800a138:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800a13c:	0098      	lsls	r0, r3, #2
 800a13e:	4b18      	ldr	r3, [pc, #96]	; (800a1a0 <uxTaskGetSystemState+0xa0>)
 800a140:	6819      	ldr	r1, [r3, #0]
 800a142:	2202      	movs	r2, #2
 800a144:	4438      	add	r0, r7
 800a146:	f7ff ffab 	bl	800a0a0 <prvListTasksWithinSingleList>
 800a14a:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800a14c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800a150:	0098      	lsls	r0, r3, #2
 800a152:	4b14      	ldr	r3, [pc, #80]	; (800a1a4 <uxTaskGetSystemState+0xa4>)
 800a154:	6819      	ldr	r1, [r3, #0]
 800a156:	2202      	movs	r2, #2
 800a158:	4438      	add	r0, r7
 800a15a:	f7ff ffa1 	bl	800a0a0 <prvListTasksWithinSingleList>
 800a15e:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800a160:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800a164:	0098      	lsls	r0, r3, #2
 800a166:	2204      	movs	r2, #4
 800a168:	490f      	ldr	r1, [pc, #60]	; (800a1a8 <uxTaskGetSystemState+0xa8>)
 800a16a:	4438      	add	r0, r7
 800a16c:	f7ff ff98 	bl	800a0a0 <prvListTasksWithinSingleList>
 800a170:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800a172:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800a176:	0098      	lsls	r0, r3, #2
 800a178:	2203      	movs	r2, #3
 800a17a:	490c      	ldr	r1, [pc, #48]	; (800a1ac <uxTaskGetSystemState+0xac>)
 800a17c:	4438      	add	r0, r7
 800a17e:	f7ff ff8f 	bl	800a0a0 <prvListTasksWithinSingleList>
 800a182:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 800a184:	b126      	cbz	r6, 800a190 <uxTaskGetSystemState+0x90>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a186:	4b0a      	ldr	r3, [pc, #40]	; (800a1b0 <uxTaskGetSystemState+0xb0>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	6033      	str	r3, [r6, #0]
 800a18c:	e000      	b.n	800a190 <uxTaskGetSystemState+0x90>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800a18e:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 800a190:	f7ff fcb8 	bl	8009b04 <xTaskResumeAll>
	}
 800a194:	4620      	mov	r0, r4
 800a196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a198:	20000900 	.word	0x20000900
 800a19c:	20000870 	.word	0x20000870
 800a1a0:	20000868 	.word	0x20000868
 800a1a4:	2000086c 	.word	0x2000086c
 800a1a8:	20000974 	.word	0x20000974
 800a1ac:	20000960 	.word	0x20000960
 800a1b0:	20003434 	.word	0x20003434

0800a1b4 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800a1b4:	4b01      	ldr	r3, [pc, #4]	; (800a1bc <xTaskGetCurrentTaskHandle+0x8>)
 800a1b6:	6818      	ldr	r0, [r3, #0]
	}
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	20000864 	.word	0x20000864

0800a1c0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a1c0:	4b05      	ldr	r3, [pc, #20]	; (800a1d8 <xTaskGetSchedulerState+0x18>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	b133      	cbz	r3, 800a1d4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1c6:	4b05      	ldr	r3, [pc, #20]	; (800a1dc <xTaskGetSchedulerState+0x1c>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	b10b      	cbz	r3, 800a1d0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800a1cc:	2000      	movs	r0, #0
	}
 800a1ce:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800a1d0:	2002      	movs	r0, #2
 800a1d2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1d4:	2001      	movs	r0, #1
 800a1d6:	4770      	bx	lr
 800a1d8:	2000095c 	.word	0x2000095c
 800a1dc:	2000090c 	.word	0x2000090c

0800a1e0 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d050      	beq.n	800a286 <xTaskPriorityInherit+0xa6>
	{
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a1e8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800a1ea:	4928      	ldr	r1, [pc, #160]	; (800a28c <xTaskPriorityInherit+0xac>)
 800a1ec:	6809      	ldr	r1, [r1, #0]
 800a1ee:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800a1f0:	428a      	cmp	r2, r1
 800a1f2:	d23e      	bcs.n	800a272 <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1f4:	6981      	ldr	r1, [r0, #24]
 800a1f6:	2900      	cmp	r1, #0
 800a1f8:	db05      	blt.n	800a206 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1fa:	4924      	ldr	r1, [pc, #144]	; (800a28c <xTaskPriorityInherit+0xac>)
 800a1fc:	6809      	ldr	r1, [r1, #0]
 800a1fe:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800a200:	f1c1 0107 	rsb	r1, r1, #7
 800a204:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a206:	6960      	ldr	r0, [r4, #20]
 800a208:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a20c:	0091      	lsls	r1, r2, #2
 800a20e:	4a20      	ldr	r2, [pc, #128]	; (800a290 <xTaskPriorityInherit+0xb0>)
 800a210:	440a      	add	r2, r1
 800a212:	4290      	cmp	r0, r2
 800a214:	d005      	beq.n	800a222 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a216:	4a1d      	ldr	r2, [pc, #116]	; (800a28c <xTaskPriorityInherit+0xac>)
 800a218:	6812      	ldr	r2, [r2, #0]
 800a21a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a21c:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800a21e:	2001      	movs	r0, #1
	}
 800a220:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a222:	1d25      	adds	r5, r4, #4
 800a224:	4628      	mov	r0, r5
 800a226:	f7fe fca0 	bl	8008b6a <uxListRemove>
 800a22a:	b968      	cbnz	r0, 800a248 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a22c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a22e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a232:	008a      	lsls	r2, r1, #2
 800a234:	4916      	ldr	r1, [pc, #88]	; (800a290 <xTaskPriorityInherit+0xb0>)
 800a236:	588a      	ldr	r2, [r1, r2]
 800a238:	b932      	cbnz	r2, 800a248 <xTaskPriorityInherit+0x68>
 800a23a:	2201      	movs	r2, #1
 800a23c:	409a      	lsls	r2, r3
 800a23e:	4915      	ldr	r1, [pc, #84]	; (800a294 <xTaskPriorityInherit+0xb4>)
 800a240:	680b      	ldr	r3, [r1, #0]
 800a242:	ea23 0302 	bic.w	r3, r3, r2
 800a246:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a248:	4b10      	ldr	r3, [pc, #64]	; (800a28c <xTaskPriorityInherit+0xac>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a250:	2401      	movs	r4, #1
 800a252:	fa04 f203 	lsl.w	r2, r4, r3
 800a256:	490f      	ldr	r1, [pc, #60]	; (800a294 <xTaskPriorityInherit+0xb4>)
 800a258:	6808      	ldr	r0, [r1, #0]
 800a25a:	4302      	orrs	r2, r0
 800a25c:	600a      	str	r2, [r1, #0]
 800a25e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a262:	009a      	lsls	r2, r3, #2
 800a264:	4629      	mov	r1, r5
 800a266:	480a      	ldr	r0, [pc, #40]	; (800a290 <xTaskPriorityInherit+0xb0>)
 800a268:	4410      	add	r0, r2
 800a26a:	f7fe fc58 	bl	8008b1e <vListInsertEnd>
				xReturn = pdTRUE;
 800a26e:	4620      	mov	r0, r4
 800a270:	e7d6      	b.n	800a220 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a272:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800a274:	4b05      	ldr	r3, [pc, #20]	; (800a28c <xTaskPriorityInherit+0xac>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d201      	bcs.n	800a282 <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
 800a27e:	2001      	movs	r0, #1
		return xReturn;
 800a280:	e7ce      	b.n	800a220 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 800a282:	2000      	movs	r0, #0
 800a284:	e7cc      	b.n	800a220 <xTaskPriorityInherit+0x40>
 800a286:	2000      	movs	r0, #0
	}
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	20000864 	.word	0x20000864
 800a290:	20000870 	.word	0x20000870
 800a294:	20000914 	.word	0x20000914

0800a298 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800a298:	2800      	cmp	r0, #0
 800a29a:	d049      	beq.n	800a330 <xTaskPriorityDisinherit+0x98>
	{
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800a2a0:	4a26      	ldr	r2, [pc, #152]	; (800a33c <xTaskPriorityDisinherit+0xa4>)
 800a2a2:	6812      	ldr	r2, [r2, #0]
 800a2a4:	4282      	cmp	r2, r0
 800a2a6:	d008      	beq.n	800a2ba <xTaskPriorityDisinherit+0x22>
 800a2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ac:	f383 8811 	msr	BASEPRI, r3
 800a2b0:	f3bf 8f6f 	isb	sy
 800a2b4:	f3bf 8f4f 	dsb	sy
 800a2b8:	e7fe      	b.n	800a2b8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2ba:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800a2bc:	b942      	cbnz	r2, 800a2d0 <xTaskPriorityDisinherit+0x38>
 800a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	e7fe      	b.n	800a2ce <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800a2d0:	3a01      	subs	r2, #1
 800a2d2:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2d4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800a2d6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a2d8:	4288      	cmp	r0, r1
 800a2da:	d02b      	beq.n	800a334 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2dc:	bb62      	cbnz	r2, 800a338 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2de:	1d25      	adds	r5, r4, #4
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	f7fe fc42 	bl	8008b6a <uxListRemove>
 800a2e6:	b970      	cbnz	r0, 800a306 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a2e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a2ea:	2314      	movs	r3, #20
 800a2ec:	fb03 f302 	mul.w	r3, r3, r2
 800a2f0:	4913      	ldr	r1, [pc, #76]	; (800a340 <xTaskPriorityDisinherit+0xa8>)
 800a2f2:	58cb      	ldr	r3, [r1, r3]
 800a2f4:	b93b      	cbnz	r3, 800a306 <xTaskPriorityDisinherit+0x6e>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	fa03 f202 	lsl.w	r2, r3, r2
 800a2fc:	4911      	ldr	r1, [pc, #68]	; (800a344 <xTaskPriorityDisinherit+0xac>)
 800a2fe:	680b      	ldr	r3, [r1, #0]
 800a300:	ea23 0302 	bic.w	r3, r3, r2
 800a304:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a306:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a308:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a30a:	f1c3 0207 	rsb	r2, r3, #7
 800a30e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a310:	2401      	movs	r4, #1
 800a312:	fa04 f203 	lsl.w	r2, r4, r3
 800a316:	490b      	ldr	r1, [pc, #44]	; (800a344 <xTaskPriorityDisinherit+0xac>)
 800a318:	6808      	ldr	r0, [r1, #0]
 800a31a:	4302      	orrs	r2, r0
 800a31c:	600a      	str	r2, [r1, #0]
 800a31e:	4629      	mov	r1, r5
 800a320:	4a07      	ldr	r2, [pc, #28]	; (800a340 <xTaskPriorityDisinherit+0xa8>)
 800a322:	2014      	movs	r0, #20
 800a324:	fb00 2003 	mla	r0, r0, r3, r2
 800a328:	f7fe fbf9 	bl	8008b1e <vListInsertEnd>
					xReturn = pdTRUE;
 800a32c:	4620      	mov	r0, r4
	}
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800a330:	2000      	movs	r0, #0
	}
 800a332:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800a334:	2000      	movs	r0, #0
 800a336:	e7fa      	b.n	800a32e <xTaskPriorityDisinherit+0x96>
 800a338:	2000      	movs	r0, #0
		return xReturn;
 800a33a:	e7f8      	b.n	800a32e <xTaskPriorityDisinherit+0x96>
 800a33c:	20000864 	.word	0x20000864
 800a340:	20000870 	.word	0x20000870
 800a344:	20000914 	.word	0x20000914

0800a348 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800a348:	2800      	cmp	r0, #0
 800a34a:	d055      	beq.n	800a3f8 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800a350:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800a352:	b940      	cbnz	r0, 800a366 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	e7fe      	b.n	800a364 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a368:	428a      	cmp	r2, r1
 800a36a:	d200      	bcs.n	800a36e <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a36c:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a36e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a370:	4291      	cmp	r1, r2
 800a372:	d001      	beq.n	800a378 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a374:	2801      	cmp	r0, #1
 800a376:	d000      	beq.n	800a37a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800a378:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800a37a:	4820      	ldr	r0, [pc, #128]	; (800a3fc <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 800a37c:	6800      	ldr	r0, [r0, #0]
 800a37e:	4298      	cmp	r0, r3
 800a380:	d108      	bne.n	800a394 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 800a382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	e7fe      	b.n	800a392 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 800a394:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a396:	6998      	ldr	r0, [r3, #24]
 800a398:	2800      	cmp	r0, #0
 800a39a:	db02      	blt.n	800a3a2 <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a39c:	f1c2 0207 	rsb	r2, r2, #7
 800a3a0:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a3a2:	695a      	ldr	r2, [r3, #20]
 800a3a4:	4816      	ldr	r0, [pc, #88]	; (800a400 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800a3a6:	2414      	movs	r4, #20
 800a3a8:	fb04 0101 	mla	r1, r4, r1, r0
 800a3ac:	428a      	cmp	r2, r1
 800a3ae:	d1e3      	bne.n	800a378 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800a3b0:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3b2:	1d1d      	adds	r5, r3, #4
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	f7fe fbd8 	bl	8008b6a <uxListRemove>
 800a3ba:	b970      	cbnz	r0, 800a3da <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a3bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a3be:	2314      	movs	r3, #20
 800a3c0:	fb03 f302 	mul.w	r3, r3, r2
 800a3c4:	490e      	ldr	r1, [pc, #56]	; (800a400 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800a3c6:	58cb      	ldr	r3, [r1, r3]
 800a3c8:	b93b      	cbnz	r3, 800a3da <vTaskPriorityDisinheritAfterTimeout+0x92>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	fa03 f202 	lsl.w	r2, r3, r2
 800a3d0:	490c      	ldr	r1, [pc, #48]	; (800a404 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800a3d2:	680b      	ldr	r3, [r1, #0]
 800a3d4:	ea23 0302 	bic.w	r3, r3, r2
 800a3d8:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 800a3da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a3dc:	2301      	movs	r3, #1
 800a3de:	4093      	lsls	r3, r2
 800a3e0:	4908      	ldr	r1, [pc, #32]	; (800a404 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800a3e2:	6808      	ldr	r0, [r1, #0]
 800a3e4:	4303      	orrs	r3, r0
 800a3e6:	600b      	str	r3, [r1, #0]
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	4b05      	ldr	r3, [pc, #20]	; (800a400 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800a3ec:	2014      	movs	r0, #20
 800a3ee:	fb00 3002 	mla	r0, r0, r2, r3
 800a3f2:	f7fe fb94 	bl	8008b1e <vListInsertEnd>
	}
 800a3f6:	e7bf      	b.n	800a378 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	20000864 	.word	0x20000864
 800a400:	20000870 	.word	0x20000870
 800a404:	20000914 	.word	0x20000914

0800a408 <vTaskGetRunTimeStats>:
	{
 800a408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a40c:	b083      	sub	sp, #12
 800a40e:	4607      	mov	r7, r0
		*pcWriteBuffer = ( char ) 0x00;
 800a410:	2300      	movs	r3, #0
 800a412:	7003      	strb	r3, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800a414:	4b1e      	ldr	r3, [pc, #120]	; (800a490 <vTaskGetRunTimeStats+0x88>)
 800a416:	681c      	ldr	r4, [r3, #0]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800a41e:	0098      	lsls	r0, r3, #2
 800a420:	f000 fe7e 	bl	800b120 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 800a424:	b178      	cbz	r0, 800a446 <vTaskGetRunTimeStats+0x3e>
 800a426:	4680      	mov	r8, r0
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800a428:	aa01      	add	r2, sp, #4
 800a42a:	4621      	mov	r1, r4
 800a42c:	f7ff fe68 	bl	800a100 <uxTaskGetSystemState>
 800a430:	4681      	mov	r9, r0
			ulTotalTime /= 100UL;
 800a432:	9b01      	ldr	r3, [sp, #4]
 800a434:	4a17      	ldr	r2, [pc, #92]	; (800a494 <vTaskGetRunTimeStats+0x8c>)
 800a436:	fba2 2303 	umull	r2, r3, r2, r3
 800a43a:	095b      	lsrs	r3, r3, #5
 800a43c:	9301      	str	r3, [sp, #4]
			if( ulTotalTime > 0UL )
 800a43e:	bb2b      	cbnz	r3, 800a48c <vTaskGetRunTimeStats+0x84>
			vPortFree( pxTaskStatusArray );
 800a440:	4640      	mov	r0, r8
 800a442:	f000 fef1 	bl	800b228 <vPortFree>
	}
 800a446:	b003      	add	sp, #12
 800a448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800a44c:	69a2      	ldr	r2, [r4, #24]
 800a44e:	4912      	ldr	r1, [pc, #72]	; (800a498 <vTaskGetRunTimeStats+0x90>)
 800a450:	f001 fc32 	bl	800bcb8 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800a454:	4638      	mov	r0, r7
 800a456:	f7f5 fec3 	bl	80001e0 <strlen>
 800a45a:	4407      	add	r7, r0
				for( x = 0; x < uxArraySize; x++ )
 800a45c:	3501      	adds	r5, #1
 800a45e:	454d      	cmp	r5, r9
 800a460:	d2ee      	bcs.n	800a440 <vTaskGetRunTimeStats+0x38>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800a462:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800a466:	009c      	lsls	r4, r3, #2
 800a468:	4444      	add	r4, r8
 800a46a:	69a6      	ldr	r6, [r4, #24]
 800a46c:	9b01      	ldr	r3, [sp, #4]
 800a46e:	fbb6 f6f3 	udiv	r6, r6, r3
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800a472:	6861      	ldr	r1, [r4, #4]
 800a474:	4638      	mov	r0, r7
 800a476:	f7ff f997 	bl	80097a8 <prvWriteNameToBuffer>
 800a47a:	4607      	mov	r7, r0
					if( ulStatsAsPercentage > 0UL )
 800a47c:	2e00      	cmp	r6, #0
 800a47e:	d0e5      	beq.n	800a44c <vTaskGetRunTimeStats+0x44>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800a480:	4633      	mov	r3, r6
 800a482:	69a2      	ldr	r2, [r4, #24]
 800a484:	4905      	ldr	r1, [pc, #20]	; (800a49c <vTaskGetRunTimeStats+0x94>)
 800a486:	f001 fc17 	bl	800bcb8 <siprintf>
 800a48a:	e7e3      	b.n	800a454 <vTaskGetRunTimeStats+0x4c>
				for( x = 0; x < uxArraySize; x++ )
 800a48c:	2500      	movs	r5, #0
 800a48e:	e7e6      	b.n	800a45e <vTaskGetRunTimeStats+0x56>
 800a490:	20000900 	.word	0x20000900
 800a494:	51eb851f 	.word	0x51eb851f
 800a498:	0800cf78 	.word	0x0800cf78
 800a49c:	0800cf6c 	.word	0x0800cf6c

0800a4a0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800a4a0:	4b05      	ldr	r3, [pc, #20]	; (800a4b8 <pvTaskIncrementMutexHeldCount+0x18>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	b123      	cbz	r3, 800a4b0 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800a4a6:	4b04      	ldr	r3, [pc, #16]	; (800a4b8 <pvTaskIncrementMutexHeldCount+0x18>)
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
 800a4b0:	4b01      	ldr	r3, [pc, #4]	; (800a4b8 <pvTaskIncrementMutexHeldCount+0x18>)
 800a4b2:	6818      	ldr	r0, [r3, #0]
	}
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	20000864 	.word	0x20000864

0800a4bc <ulTaskNotifyTake>:
	{
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	4605      	mov	r5, r0
 800a4c0:	460c      	mov	r4, r1
		taskENTER_CRITICAL();
 800a4c2:	f000 fc77 	bl	800adb4 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800a4c6:	4b19      	ldr	r3, [pc, #100]	; (800a52c <ulTaskNotifyTake+0x70>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4cc:	b92b      	cbnz	r3, 800a4da <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a4ce:	4b17      	ldr	r3, [pc, #92]	; (800a52c <ulTaskNotifyTake+0x70>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 800a4d8:	b9ac      	cbnz	r4, 800a506 <ulTaskNotifyTake+0x4a>
		taskEXIT_CRITICAL();
 800a4da:	f000 fc8d 	bl	800adf8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800a4de:	f000 fc69 	bl	800adb4 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800a4e2:	4b12      	ldr	r3, [pc, #72]	; (800a52c <ulTaskNotifyTake+0x70>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if( ulReturn != 0UL )
 800a4e8:	b124      	cbz	r4, 800a4f4 <ulTaskNotifyTake+0x38>
				if( xClearCountOnExit != pdFALSE )
 800a4ea:	b9cd      	cbnz	r5, 800a520 <ulTaskNotifyTake+0x64>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800a4ec:	4b0f      	ldr	r3, [pc, #60]	; (800a52c <ulTaskNotifyTake+0x70>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	1e62      	subs	r2, r4, #1
 800a4f2:	65da      	str	r2, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a4f4:	4b0d      	ldr	r3, [pc, #52]	; (800a52c <ulTaskNotifyTake+0x70>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 800a4fe:	f000 fc7b 	bl	800adf8 <vPortExitCritical>
	}
 800a502:	4620      	mov	r0, r4
 800a504:	bd38      	pop	{r3, r4, r5, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a506:	4611      	mov	r1, r2
 800a508:	4620      	mov	r0, r4
 800a50a:	f7ff f901 	bl	8009710 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800a50e:	4b08      	ldr	r3, [pc, #32]	; (800a530 <ulTaskNotifyTake+0x74>)
 800a510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a514:	601a      	str	r2, [r3, #0]
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	e7dc      	b.n	800a4da <ulTaskNotifyTake+0x1e>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800a520:	4b02      	ldr	r3, [pc, #8]	; (800a52c <ulTaskNotifyTake+0x70>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2200      	movs	r2, #0
 800a526:	65da      	str	r2, [r3, #92]	; 0x5c
 800a528:	e7e4      	b.n	800a4f4 <ulTaskNotifyTake+0x38>
 800a52a:	bf00      	nop
 800a52c:	20000864 	.word	0x20000864
 800a530:	e000ed04 	.word	0xe000ed04

0800a534 <xTaskNotifyWait>:
	{
 800a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a536:	4607      	mov	r7, r0
 800a538:	460d      	mov	r5, r1
 800a53a:	4614      	mov	r4, r2
 800a53c:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 800a53e:	f000 fc39 	bl	800adb4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a542:	4b20      	ldr	r3, [pc, #128]	; (800a5c4 <xTaskNotifyWait+0x90>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d00a      	beq.n	800a566 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a550:	4b1c      	ldr	r3, [pc, #112]	; (800a5c4 <xTaskNotifyWait+0x90>)
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800a556:	ea20 0007 	bic.w	r0, r0, r7
 800a55a:	65d0      	str	r0, [r2, #92]	; 0x5c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 800a564:	b9ce      	cbnz	r6, 800a59a <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 800a566:	f000 fc47 	bl	800adf8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800a56a:	f000 fc23 	bl	800adb4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800a56e:	b11c      	cbz	r4, 800a578 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a570:	4b14      	ldr	r3, [pc, #80]	; (800a5c4 <xTaskNotifyWait+0x90>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a576:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a578:	4b12      	ldr	r3, [pc, #72]	; (800a5c4 <xTaskNotifyWait+0x90>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b02      	cmp	r3, #2
 800a584:	d016      	beq.n	800a5b4 <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 800a586:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a588:	4b0e      	ldr	r3, [pc, #56]	; (800a5c4 <xTaskNotifyWait+0x90>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 800a592:	f000 fc31 	bl	800adf8 <vPortExitCritical>
	}
 800a596:	4620      	mov	r0, r4
 800a598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a59a:	4611      	mov	r1, r2
 800a59c:	4630      	mov	r0, r6
 800a59e:	f7ff f8b7 	bl	8009710 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800a5a2:	4b09      	ldr	r3, [pc, #36]	; (800a5c8 <xTaskNotifyWait+0x94>)
 800a5a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	e7d8      	b.n	800a566 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a5b4:	4b03      	ldr	r3, [pc, #12]	; (800a5c4 <xTaskNotifyWait+0x90>)
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800a5ba:	ea23 0505 	bic.w	r5, r3, r5
 800a5be:	65d5      	str	r5, [r2, #92]	; 0x5c
				xReturn = pdTRUE;
 800a5c0:	2401      	movs	r4, #1
 800a5c2:	e7e1      	b.n	800a588 <xTaskNotifyWait+0x54>
 800a5c4:	20000864 	.word	0x20000864
 800a5c8:	e000ed04 	.word	0xe000ed04

0800a5cc <xTaskGenericNotifyFromISR>:
	{
 800a5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5d0:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
 800a5d2:	b940      	cbnz	r0, 800a5e6 <xTaskGenericNotifyFromISR+0x1a>
 800a5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d8:	f383 8811 	msr	BASEPRI, r3
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	e7fe      	b.n	800a5e4 <xTaskGenericNotifyFromISR+0x18>
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	4699      	mov	r9, r3
 800a5ea:	4690      	mov	r8, r2
 800a5ec:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5ee:	f000 fd0b 	bl	800b008 <vPortValidateInterruptPriority>
	__asm volatile
 800a5f2:	f3ef 8711 	mrs	r7, BASEPRI
 800a5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800a606:	f1b9 0f00 	cmp.w	r9, #0
 800a60a:	d002      	beq.n	800a612 <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a60c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a60e:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a612:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800a616:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a618:	2202      	movs	r2, #2
 800a61a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			switch( eAction )
 800a61e:	f1b8 0f04 	cmp.w	r8, #4
 800a622:	d81c      	bhi.n	800a65e <xTaskGenericNotifyFromISR+0x92>
 800a624:	e8df f008 	tbb	[pc, r8]
 800a628:	130e0328 	.word	0x130e0328
 800a62c:	16          	.byte	0x16
 800a62d:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 800a62e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a630:	4315      	orrs	r5, r2
 800a632:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a634:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a636:	2b01      	cmp	r3, #1
 800a638:	d024      	beq.n	800a684 <xTaskGenericNotifyFromISR+0xb8>
	__asm volatile
 800a63a:	f387 8811 	msr	BASEPRI, r7
	}
 800a63e:	4628      	mov	r0, r5
 800a640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 800a644:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a646:	3201      	adds	r2, #1
 800a648:	65e2      	str	r2, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a64a:	2501      	movs	r5, #1
					break;
 800a64c:	e7f3      	b.n	800a636 <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 800a64e:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a650:	2501      	movs	r5, #1
					break;
 800a652:	e7f0      	b.n	800a636 <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a654:	2b02      	cmp	r3, #2
 800a656:	d011      	beq.n	800a67c <xTaskGenericNotifyFromISR+0xb0>
						pxTCB->ulNotifiedValue = ulValue;
 800a658:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a65a:	2501      	movs	r5, #1
 800a65c:	e7eb      	b.n	800a636 <xTaskGenericNotifyFromISR+0x6a>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a65e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a660:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a664:	d00c      	beq.n	800a680 <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 800a666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	e7fe      	b.n	800a676 <xTaskGenericNotifyFromISR+0xaa>
	BaseType_t xReturn = pdPASS;
 800a678:	2501      	movs	r5, #1
 800a67a:	e7dc      	b.n	800a636 <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 800a67c:	2500      	movs	r5, #0
 800a67e:	e7da      	b.n	800a636 <xTaskGenericNotifyFromISR+0x6a>
	BaseType_t xReturn = pdPASS;
 800a680:	2501      	movs	r5, #1
 800a682:	e7d8      	b.n	800a636 <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a686:	b143      	cbz	r3, 800a69a <xTaskGenericNotifyFromISR+0xce>
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	e7fe      	b.n	800a698 <xTaskGenericNotifyFromISR+0xcc>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a69a:	4b14      	ldr	r3, [pc, #80]	; (800a6ec <xTaskGenericNotifyFromISR+0x120>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	b9fb      	cbnz	r3, 800a6e0 <xTaskGenericNotifyFromISR+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6a0:	f104 0804 	add.w	r8, r4, #4
 800a6a4:	4640      	mov	r0, r8
 800a6a6:	f7fe fa60 	bl	8008b6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	4093      	lsls	r3, r2
 800a6b0:	490f      	ldr	r1, [pc, #60]	; (800a6f0 <xTaskGenericNotifyFromISR+0x124>)
 800a6b2:	6808      	ldr	r0, [r1, #0]
 800a6b4:	4303      	orrs	r3, r0
 800a6b6:	600b      	str	r3, [r1, #0]
 800a6b8:	4641      	mov	r1, r8
 800a6ba:	4b0e      	ldr	r3, [pc, #56]	; (800a6f4 <xTaskGenericNotifyFromISR+0x128>)
 800a6bc:	2014      	movs	r0, #20
 800a6be:	fb00 3002 	mla	r0, r0, r2, r3
 800a6c2:	f7fe fa2c 	bl	8008b1e <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a6c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a6c8:	4b0b      	ldr	r3, [pc, #44]	; (800a6f8 <xTaskGenericNotifyFromISR+0x12c>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d9b3      	bls.n	800a63a <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 800a6d2:	b10e      	cbz	r6, 800a6d8 <xTaskGenericNotifyFromISR+0x10c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 800a6d8:	4b08      	ldr	r3, [pc, #32]	; (800a6fc <xTaskGenericNotifyFromISR+0x130>)
 800a6da:	2201      	movs	r2, #1
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	e7ac      	b.n	800a63a <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a6e0:	f104 0118 	add.w	r1, r4, #24
 800a6e4:	4806      	ldr	r0, [pc, #24]	; (800a700 <xTaskGenericNotifyFromISR+0x134>)
 800a6e6:	f7fe fa1a 	bl	8008b1e <vListInsertEnd>
 800a6ea:	e7ec      	b.n	800a6c6 <xTaskGenericNotifyFromISR+0xfa>
 800a6ec:	2000090c 	.word	0x2000090c
 800a6f0:	20000914 	.word	0x20000914
 800a6f4:	20000870 	.word	0x20000870
 800a6f8:	20000864 	.word	0x20000864
 800a6fc:	2000098c 	.word	0x2000098c
 800a700:	20000948 	.word	0x20000948

0800a704 <vTaskNotifyGiveFromISR>:
	{
 800a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 800a706:	b940      	cbnz	r0, 800a71a <vTaskNotifyGiveFromISR+0x16>
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	e7fe      	b.n	800a718 <vTaskNotifyGiveFromISR+0x14>
 800a71a:	4604      	mov	r4, r0
 800a71c:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a71e:	f000 fc73 	bl	800b008 <vPortValidateInterruptPriority>
	__asm volatile
 800a722:	f3ef 8611 	mrs	r6, BASEPRI
 800a726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a736:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800a73a:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a73c:	2202      	movs	r2, #2
 800a73e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			( pxTCB->ulNotifiedValue )++;
 800a742:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a744:	3201      	adds	r2, #1
 800a746:	65e2      	str	r2, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d002      	beq.n	800a752 <vTaskNotifyGiveFromISR+0x4e>
	__asm volatile
 800a74c:	f386 8811 	msr	BASEPRI, r6
	}
 800a750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a752:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a754:	b143      	cbz	r3, 800a768 <vTaskNotifyGiveFromISR+0x64>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	e7fe      	b.n	800a766 <vTaskNotifyGiveFromISR+0x62>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a768:	4b13      	ldr	r3, [pc, #76]	; (800a7b8 <vTaskNotifyGiveFromISR+0xb4>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	b9f3      	cbnz	r3, 800a7ac <vTaskNotifyGiveFromISR+0xa8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a76e:	1d27      	adds	r7, r4, #4
 800a770:	4638      	mov	r0, r7
 800a772:	f7fe f9fa 	bl	8008b6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a776:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a778:	2301      	movs	r3, #1
 800a77a:	4093      	lsls	r3, r2
 800a77c:	490f      	ldr	r1, [pc, #60]	; (800a7bc <vTaskNotifyGiveFromISR+0xb8>)
 800a77e:	6808      	ldr	r0, [r1, #0]
 800a780:	4303      	orrs	r3, r0
 800a782:	600b      	str	r3, [r1, #0]
 800a784:	4639      	mov	r1, r7
 800a786:	4b0e      	ldr	r3, [pc, #56]	; (800a7c0 <vTaskNotifyGiveFromISR+0xbc>)
 800a788:	2014      	movs	r0, #20
 800a78a:	fb00 3002 	mla	r0, r0, r2, r3
 800a78e:	f7fe f9c6 	bl	8008b1e <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a792:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a794:	4b0b      	ldr	r3, [pc, #44]	; (800a7c4 <vTaskNotifyGiveFromISR+0xc0>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d9d6      	bls.n	800a74c <vTaskNotifyGiveFromISR+0x48>
					if( pxHigherPriorityTaskWoken != NULL )
 800a79e:	b10d      	cbz	r5, 800a7a4 <vTaskNotifyGiveFromISR+0xa0>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 800a7a4:	4b08      	ldr	r3, [pc, #32]	; (800a7c8 <vTaskNotifyGiveFromISR+0xc4>)
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	601a      	str	r2, [r3, #0]
 800a7aa:	e7cf      	b.n	800a74c <vTaskNotifyGiveFromISR+0x48>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a7ac:	f104 0118 	add.w	r1, r4, #24
 800a7b0:	4806      	ldr	r0, [pc, #24]	; (800a7cc <vTaskNotifyGiveFromISR+0xc8>)
 800a7b2:	f7fe f9b4 	bl	8008b1e <vListInsertEnd>
 800a7b6:	e7ec      	b.n	800a792 <vTaskNotifyGiveFromISR+0x8e>
 800a7b8:	2000090c 	.word	0x2000090c
 800a7bc:	20000914 	.word	0x20000914
 800a7c0:	20000870 	.word	0x20000870
 800a7c4:	20000864 	.word	0x20000864
 800a7c8:	2000098c 	.word	0x2000098c
 800a7cc:	20000948 	.word	0x20000948

0800a7d0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a7d0:	4b06      	ldr	r3, [pc, #24]	; (800a7ec <prvGetNextExpireTime+0x1c>)
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	6813      	ldr	r3, [r2, #0]
 800a7d6:	b92b      	cbnz	r3, 800a7e4 <prvGetNextExpireTime+0x14>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a7dc:	b923      	cbnz	r3, 800a7e8 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7de:	68d3      	ldr	r3, [r2, #12]
 800a7e0:	6818      	ldr	r0, [r3, #0]
 800a7e2:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	e7f8      	b.n	800a7da <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a7e8:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800a7ea:	4770      	bx	lr
 800a7ec:	20000990 	.word	0x20000990

0800a7f0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a7f0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a7f2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7f4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a7f6:	4291      	cmp	r1, r2
 800a7f8:	d80c      	bhi.n	800a814 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7fa:	1ad2      	subs	r2, r2, r3
 800a7fc:	6983      	ldr	r3, [r0, #24]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d301      	bcc.n	800a806 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a802:	2001      	movs	r0, #1
 800a804:	e010      	b.n	800a828 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a806:	1d01      	adds	r1, r0, #4
 800a808:	4b09      	ldr	r3, [pc, #36]	; (800a830 <prvInsertTimerInActiveList+0x40>)
 800a80a:	6818      	ldr	r0, [r3, #0]
 800a80c:	f7fe f993 	bl	8008b36 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a810:	2000      	movs	r0, #0
 800a812:	e009      	b.n	800a828 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a814:	429a      	cmp	r2, r3
 800a816:	d201      	bcs.n	800a81c <prvInsertTimerInActiveList+0x2c>
 800a818:	4299      	cmp	r1, r3
 800a81a:	d206      	bcs.n	800a82a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a81c:	1d01      	adds	r1, r0, #4
 800a81e:	4b05      	ldr	r3, [pc, #20]	; (800a834 <prvInsertTimerInActiveList+0x44>)
 800a820:	6818      	ldr	r0, [r3, #0]
 800a822:	f7fe f988 	bl	8008b36 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a826:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800a828:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 800a82a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a82c:	e7fc      	b.n	800a828 <prvInsertTimerInActiveList+0x38>
 800a82e:	bf00      	nop
 800a830:	20000994 	.word	0x20000994
 800a834:	20000990 	.word	0x20000990

0800a838 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a838:	b530      	push	{r4, r5, lr}
 800a83a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a83c:	f000 faba 	bl	800adb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a840:	4b11      	ldr	r3, [pc, #68]	; (800a888 <prvCheckForValidListAndQueue+0x50>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	b11b      	cbz	r3, 800a84e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a846:	f000 fad7 	bl	800adf8 <vPortExitCritical>
}
 800a84a:	b003      	add	sp, #12
 800a84c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800a84e:	4d0f      	ldr	r5, [pc, #60]	; (800a88c <prvCheckForValidListAndQueue+0x54>)
 800a850:	4628      	mov	r0, r5
 800a852:	f7fe f956 	bl	8008b02 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a856:	4c0e      	ldr	r4, [pc, #56]	; (800a890 <prvCheckForValidListAndQueue+0x58>)
 800a858:	4620      	mov	r0, r4
 800a85a:	f7fe f952 	bl	8008b02 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a85e:	4b0d      	ldr	r3, [pc, #52]	; (800a894 <prvCheckForValidListAndQueue+0x5c>)
 800a860:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a862:	4b0d      	ldr	r3, [pc, #52]	; (800a898 <prvCheckForValidListAndQueue+0x60>)
 800a864:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a866:	2300      	movs	r3, #0
 800a868:	9300      	str	r3, [sp, #0]
 800a86a:	4b0c      	ldr	r3, [pc, #48]	; (800a89c <prvCheckForValidListAndQueue+0x64>)
 800a86c:	4a0c      	ldr	r2, [pc, #48]	; (800a8a0 <prvCheckForValidListAndQueue+0x68>)
 800a86e:	210c      	movs	r1, #12
 800a870:	200a      	movs	r0, #10
 800a872:	f7fe fa8a 	bl	8008d8a <xQueueGenericCreateStatic>
 800a876:	4b04      	ldr	r3, [pc, #16]	; (800a888 <prvCheckForValidListAndQueue+0x50>)
 800a878:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d0e3      	beq.n	800a846 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a87e:	4909      	ldr	r1, [pc, #36]	; (800a8a4 <prvCheckForValidListAndQueue+0x6c>)
 800a880:	f7fe fdb8 	bl	80093f4 <vQueueAddToRegistry>
 800a884:	e7df      	b.n	800a846 <prvCheckForValidListAndQueue+0xe>
 800a886:	bf00      	nop
 800a888:	20000a8c 	.word	0x20000a8c
 800a88c:	20000a10 	.word	0x20000a10
 800a890:	20000a24 	.word	0x20000a24
 800a894:	20000990 	.word	0x20000990
 800a898:	20000994 	.word	0x20000994
 800a89c:	20000a3c 	.word	0x20000a3c
 800a8a0:	20000998 	.word	0x20000998
 800a8a4:	0800cf8c 	.word	0x0800cf8c

0800a8a8 <prvInitialiseNewTimer>:
{
 800a8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ac:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a8ae:	b941      	cbnz	r1, 800a8c2 <prvInitialiseNewTimer+0x1a>
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	e7fe      	b.n	800a8c0 <prvInitialiseNewTimer+0x18>
 800a8c2:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
 800a8c4:	b1a4      	cbz	r4, 800a8f0 <prvInitialiseNewTimer+0x48>
 800a8c6:	461e      	mov	r6, r3
 800a8c8:	4615      	mov	r5, r2
 800a8ca:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
 800a8cc:	f7ff ffb4 	bl	800a838 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 800a8d0:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a8d4:	61a7      	str	r7, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a8d6:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a8d8:	9b06      	ldr	r3, [sp, #24]
 800a8da:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a8dc:	1d20      	adds	r0, r4, #4
 800a8de:	f7fe f91b 	bl	8008b18 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a8e2:	b12d      	cbz	r5, 800a8f0 <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a8e4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a8e8:	f043 0304 	orr.w	r3, r3, #4
 800a8ec:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 800a8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a8f4 <xTimerCreateTimerTask>:
{
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a8f8:	f7ff ff9e 	bl	800a838 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a8fc:	4b12      	ldr	r3, [pc, #72]	; (800a948 <xTimerCreateTimerTask+0x54>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	b1cb      	cbz	r3, 800a936 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a902:	2400      	movs	r4, #0
 800a904:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a906:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a908:	aa07      	add	r2, sp, #28
 800a90a:	a906      	add	r1, sp, #24
 800a90c:	a805      	add	r0, sp, #20
 800a90e:	f7f9 f945 	bl	8003b9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a912:	9b05      	ldr	r3, [sp, #20]
 800a914:	9302      	str	r3, [sp, #8]
 800a916:	9b06      	ldr	r3, [sp, #24]
 800a918:	9301      	str	r3, [sp, #4]
 800a91a:	2302      	movs	r3, #2
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	4623      	mov	r3, r4
 800a920:	9a07      	ldr	r2, [sp, #28]
 800a922:	490a      	ldr	r1, [pc, #40]	; (800a94c <xTimerCreateTimerTask+0x58>)
 800a924:	480a      	ldr	r0, [pc, #40]	; (800a950 <xTimerCreateTimerTask+0x5c>)
 800a926:	f7fe ff50 	bl	80097ca <xTaskCreateStatic>
 800a92a:	4b0a      	ldr	r3, [pc, #40]	; (800a954 <xTimerCreateTimerTask+0x60>)
 800a92c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a92e:	b110      	cbz	r0, 800a936 <xTimerCreateTimerTask+0x42>
}
 800a930:	2001      	movs	r0, #1
 800a932:	b008      	add	sp, #32
 800a934:	bd10      	pop	{r4, pc}
 800a936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	e7fe      	b.n	800a946 <xTimerCreateTimerTask+0x52>
 800a948:	20000a8c 	.word	0x20000a8c
 800a94c:	0800cf94 	.word	0x0800cf94
 800a950:	0800acd1 	.word	0x0800acd1
 800a954:	20000a90 	.word	0x20000a90

0800a958 <xTimerCreate>:
	{
 800a958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95c:	b082      	sub	sp, #8
 800a95e:	4605      	mov	r5, r0
 800a960:	460e      	mov	r6, r1
 800a962:	4617      	mov	r7, r2
 800a964:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a966:	202c      	movs	r0, #44	; 0x2c
 800a968:	f000 fbda 	bl	800b120 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800a96c:	4604      	mov	r4, r0
 800a96e:	b158      	cbz	r0, 800a988 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 800a970:	2300      	movs	r3, #0
 800a972:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a976:	9001      	str	r0, [sp, #4]
 800a978:	9b08      	ldr	r3, [sp, #32]
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	4643      	mov	r3, r8
 800a97e:	463a      	mov	r2, r7
 800a980:	4631      	mov	r1, r6
 800a982:	4628      	mov	r0, r5
 800a984:	f7ff ff90 	bl	800a8a8 <prvInitialiseNewTimer>
	}
 800a988:	4620      	mov	r0, r4
 800a98a:	b002      	add	sp, #8
 800a98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a990 <xTimerCreateStatic>:
	{
 800a990:	b530      	push	{r4, r5, lr}
 800a992:	b085      	sub	sp, #20
 800a994:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a996:	252c      	movs	r5, #44	; 0x2c
 800a998:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a99a:	9d03      	ldr	r5, [sp, #12]
 800a99c:	2d2c      	cmp	r5, #44	; 0x2c
 800a99e:	d008      	beq.n	800a9b2 <xTimerCreateStatic+0x22>
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	e7fe      	b.n	800a9b0 <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a9b2:	9d03      	ldr	r5, [sp, #12]
		configASSERT( pxTimerBuffer );
 800a9b4:	b944      	cbnz	r4, 800a9c8 <xTimerCreateStatic+0x38>
 800a9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ba:	f383 8811 	msr	BASEPRI, r3
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f3bf 8f4f 	dsb	sy
 800a9c6:	e7fe      	b.n	800a9c6 <xTimerCreateStatic+0x36>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a9c8:	2502      	movs	r5, #2
 800a9ca:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a9ce:	9401      	str	r4, [sp, #4]
 800a9d0:	9d08      	ldr	r5, [sp, #32]
 800a9d2:	9500      	str	r5, [sp, #0]
 800a9d4:	f7ff ff68 	bl	800a8a8 <prvInitialiseNewTimer>
	}
 800a9d8:	4620      	mov	r0, r4
 800a9da:	b005      	add	sp, #20
 800a9dc:	bd30      	pop	{r4, r5, pc}
	...

0800a9e0 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800a9e0:	b1c8      	cbz	r0, 800aa16 <xTimerGenericCommand+0x36>
{
 800a9e2:	b530      	push	{r4, r5, lr}
 800a9e4:	b085      	sub	sp, #20
 800a9e6:	4615      	mov	r5, r2
 800a9e8:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 800a9ea:	4a17      	ldr	r2, [pc, #92]	; (800aa48 <xTimerGenericCommand+0x68>)
 800a9ec:	6810      	ldr	r0, [r2, #0]
 800a9ee:	b340      	cbz	r0, 800aa42 <xTimerGenericCommand+0x62>
 800a9f0:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800a9f2:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a9f4:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a9f6:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a9f8:	2905      	cmp	r1, #5
 800a9fa:	dc1d      	bgt.n	800aa38 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a9fc:	f7ff fbe0 	bl	800a1c0 <xTaskGetSchedulerState>
 800aa00:	2802      	cmp	r0, #2
 800aa02:	d011      	beq.n	800aa28 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa04:	2300      	movs	r3, #0
 800aa06:	461a      	mov	r2, r3
 800aa08:	a901      	add	r1, sp, #4
 800aa0a:	480f      	ldr	r0, [pc, #60]	; (800aa48 <xTimerGenericCommand+0x68>)
 800aa0c:	6800      	ldr	r0, [r0, #0]
 800aa0e:	f7fe fa2d 	bl	8008e6c <xQueueGenericSend>
}
 800aa12:	b005      	add	sp, #20
 800aa14:	bd30      	pop	{r4, r5, pc}
 800aa16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1a:	f383 8811 	msr	BASEPRI, r3
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	f3bf 8f4f 	dsb	sy
 800aa26:	e7fe      	b.n	800aa26 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa28:	2300      	movs	r3, #0
 800aa2a:	9a08      	ldr	r2, [sp, #32]
 800aa2c:	a901      	add	r1, sp, #4
 800aa2e:	4806      	ldr	r0, [pc, #24]	; (800aa48 <xTimerGenericCommand+0x68>)
 800aa30:	6800      	ldr	r0, [r0, #0]
 800aa32:	f7fe fa1b 	bl	8008e6c <xQueueGenericSend>
 800aa36:	e7ec      	b.n	800aa12 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa38:	2300      	movs	r3, #0
 800aa3a:	a901      	add	r1, sp, #4
 800aa3c:	f7fe fafa 	bl	8009034 <xQueueGenericSendFromISR>
 800aa40:	e7e7      	b.n	800aa12 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 800aa42:	2000      	movs	r0, #0
	return xReturn;
 800aa44:	e7e5      	b.n	800aa12 <xTimerGenericCommand+0x32>
 800aa46:	bf00      	nop
 800aa48:	20000a8c 	.word	0x20000a8c

0800aa4c <prvSwitchTimerLists>:
{
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa50:	4b1b      	ldr	r3, [pc, #108]	; (800aac0 <prvSwitchTimerLists+0x74>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	b362      	cbz	r2, 800aab2 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa5c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa5e:	1d25      	adds	r5, r4, #4
 800aa60:	4628      	mov	r0, r5
 800aa62:	f7fe f882 	bl	8008b6a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa66:	6a23      	ldr	r3, [r4, #32]
 800aa68:	4620      	mov	r0, r4
 800aa6a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa6c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aa70:	f013 0f04 	tst.w	r3, #4
 800aa74:	d0ec      	beq.n	800aa50 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa76:	69a3      	ldr	r3, [r4, #24]
 800aa78:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800aa7a:	429e      	cmp	r6, r3
 800aa7c:	d207      	bcs.n	800aa8e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa7e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa80:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa82:	4629      	mov	r1, r5
 800aa84:	4b0e      	ldr	r3, [pc, #56]	; (800aac0 <prvSwitchTimerLists+0x74>)
 800aa86:	6818      	ldr	r0, [r3, #0]
 800aa88:	f7fe f855 	bl	8008b36 <vListInsert>
 800aa8c:	e7e0      	b.n	800aa50 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa8e:	2100      	movs	r1, #0
 800aa90:	9100      	str	r1, [sp, #0]
 800aa92:	460b      	mov	r3, r1
 800aa94:	4632      	mov	r2, r6
 800aa96:	4620      	mov	r0, r4
 800aa98:	f7ff ffa2 	bl	800a9e0 <xTimerGenericCommand>
				configASSERT( xResult );
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d1d7      	bne.n	800aa50 <prvSwitchTimerLists+0x4>
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	e7fe      	b.n	800aab0 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800aab2:	4a04      	ldr	r2, [pc, #16]	; (800aac4 <prvSwitchTimerLists+0x78>)
 800aab4:	6810      	ldr	r0, [r2, #0]
 800aab6:	4902      	ldr	r1, [pc, #8]	; (800aac0 <prvSwitchTimerLists+0x74>)
 800aab8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800aaba:	6013      	str	r3, [r2, #0]
}
 800aabc:	b002      	add	sp, #8
 800aabe:	bd70      	pop	{r4, r5, r6, pc}
 800aac0:	20000990 	.word	0x20000990
 800aac4:	20000994 	.word	0x20000994

0800aac8 <prvSampleTimeNow>:
{
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800aacc:	f7fe ff88 	bl	80099e0 <xTaskGetTickCount>
 800aad0:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800aad2:	4b07      	ldr	r3, [pc, #28]	; (800aaf0 <prvSampleTimeNow+0x28>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4283      	cmp	r3, r0
 800aad8:	d805      	bhi.n	800aae6 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800aada:	2300      	movs	r3, #0
 800aadc:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800aade:	4b04      	ldr	r3, [pc, #16]	; (800aaf0 <prvSampleTimeNow+0x28>)
 800aae0:	601c      	str	r4, [r3, #0]
}
 800aae2:	4620      	mov	r0, r4
 800aae4:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800aae6:	f7ff ffb1 	bl	800aa4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aaea:	2301      	movs	r3, #1
 800aaec:	602b      	str	r3, [r5, #0]
 800aaee:	e7f6      	b.n	800aade <prvSampleTimeNow+0x16>
 800aaf0:	20000a38 	.word	0x20000a38

0800aaf4 <prvProcessExpiredTimer>:
{
 800aaf4:	b570      	push	{r4, r5, r6, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	4605      	mov	r5, r0
 800aafa:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aafc:	4b17      	ldr	r3, [pc, #92]	; (800ab5c <prvProcessExpiredTimer+0x68>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab04:	1d20      	adds	r0, r4, #4
 800ab06:	f7fe f830 	bl	8008b6a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab0a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ab0e:	f013 0f04 	tst.w	r3, #4
 800ab12:	d108      	bne.n	800ab26 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab14:	f023 0301 	bic.w	r3, r3, #1
 800ab18:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab1c:	6a23      	ldr	r3, [r4, #32]
 800ab1e:	4620      	mov	r0, r4
 800ab20:	4798      	blx	r3
}
 800ab22:	b002      	add	sp, #8
 800ab24:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab26:	69a1      	ldr	r1, [r4, #24]
 800ab28:	462b      	mov	r3, r5
 800ab2a:	4632      	mov	r2, r6
 800ab2c:	4429      	add	r1, r5
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f7ff fe5e 	bl	800a7f0 <prvInsertTimerInActiveList>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	d0f1      	beq.n	800ab1c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab38:	2100      	movs	r1, #0
 800ab3a:	9100      	str	r1, [sp, #0]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	462a      	mov	r2, r5
 800ab40:	4620      	mov	r0, r4
 800ab42:	f7ff ff4d 	bl	800a9e0 <xTimerGenericCommand>
			configASSERT( xResult );
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d1e8      	bne.n	800ab1c <prvProcessExpiredTimer+0x28>
 800ab4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	e7fe      	b.n	800ab5a <prvProcessExpiredTimer+0x66>
 800ab5c:	20000990 	.word	0x20000990

0800ab60 <prvProcessTimerOrBlockTask>:
{
 800ab60:	b570      	push	{r4, r5, r6, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	4606      	mov	r6, r0
 800ab66:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800ab68:	f7fe ff32 	bl	80099d0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab6c:	a801      	add	r0, sp, #4
 800ab6e:	f7ff ffab 	bl	800aac8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800ab72:	9b01      	ldr	r3, [sp, #4]
 800ab74:	bb23      	cbnz	r3, 800abc0 <prvProcessTimerOrBlockTask+0x60>
 800ab76:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab78:	b90c      	cbnz	r4, 800ab7e <prvProcessTimerOrBlockTask+0x1e>
 800ab7a:	42b0      	cmp	r0, r6
 800ab7c:	d217      	bcs.n	800abae <prvProcessTimerOrBlockTask+0x4e>
				if( xListWasEmpty != pdFALSE )
 800ab7e:	b124      	cbz	r4, 800ab8a <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab80:	4b11      	ldr	r3, [pc, #68]	; (800abc8 <prvProcessTimerOrBlockTask+0x68>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	b9cb      	cbnz	r3, 800abbc <prvProcessTimerOrBlockTask+0x5c>
 800ab88:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab8a:	4622      	mov	r2, r4
 800ab8c:	1b71      	subs	r1, r6, r5
 800ab8e:	4b0f      	ldr	r3, [pc, #60]	; (800abcc <prvProcessTimerOrBlockTask+0x6c>)
 800ab90:	6818      	ldr	r0, [r3, #0]
 800ab92:	f7fe fc43 	bl	800941c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab96:	f7fe ffb5 	bl	8009b04 <xTaskResumeAll>
 800ab9a:	b998      	cbnz	r0, 800abc4 <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 800ab9c:	4b0c      	ldr	r3, [pc, #48]	; (800abd0 <prvProcessTimerOrBlockTask+0x70>)
 800ab9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	e00a      	b.n	800abc4 <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
 800abae:	f7fe ffa9 	bl	8009b04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800abb2:	4629      	mov	r1, r5
 800abb4:	4630      	mov	r0, r6
 800abb6:	f7ff ff9d 	bl	800aaf4 <prvProcessExpiredTimer>
 800abba:	e003      	b.n	800abc4 <prvProcessTimerOrBlockTask+0x64>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800abbc:	2400      	movs	r4, #0
 800abbe:	e7e4      	b.n	800ab8a <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 800abc0:	f7fe ffa0 	bl	8009b04 <xTaskResumeAll>
}
 800abc4:	b002      	add	sp, #8
 800abc6:	bd70      	pop	{r4, r5, r6, pc}
 800abc8:	20000994 	.word	0x20000994
 800abcc:	20000a8c 	.word	0x20000a8c
 800abd0:	e000ed04 	.word	0xe000ed04

0800abd4 <prvProcessReceivedCommands>:
{
 800abd4:	b530      	push	{r4, r5, lr}
 800abd6:	b087      	sub	sp, #28
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abd8:	2200      	movs	r2, #0
 800abda:	a903      	add	r1, sp, #12
 800abdc:	4b3b      	ldr	r3, [pc, #236]	; (800accc <prvProcessReceivedCommands+0xf8>)
 800abde:	6818      	ldr	r0, [r3, #0]
 800abe0:	f7fe fa8e 	bl	8009100 <xQueueReceive>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d06f      	beq.n	800acc8 <prvProcessReceivedCommands+0xf4>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800abe8:	9b03      	ldr	r3, [sp, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	dbf4      	blt.n	800abd8 <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800abee:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800abf0:	6963      	ldr	r3, [r4, #20]
 800abf2:	b113      	cbz	r3, 800abfa <prvProcessReceivedCommands+0x26>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abf4:	1d20      	adds	r0, r4, #4
 800abf6:	f7fd ffb8 	bl	8008b6a <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abfa:	a802      	add	r0, sp, #8
 800abfc:	f7ff ff64 	bl	800aac8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800ac00:	9b03      	ldr	r3, [sp, #12]
 800ac02:	2b09      	cmp	r3, #9
 800ac04:	d8e8      	bhi.n	800abd8 <prvProcessReceivedCommands+0x4>
 800ac06:	e8df f003 	tbb	[pc, r3]
 800ac0a:	0505      	.short	0x0505
 800ac0c:	51383105 	.word	0x51383105
 800ac10:	38310505 	.word	0x38310505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac14:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ac18:	f043 0301 	orr.w	r3, r3, #1
 800ac1c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac20:	9904      	ldr	r1, [sp, #16]
 800ac22:	69a5      	ldr	r5, [r4, #24]
 800ac24:	460b      	mov	r3, r1
 800ac26:	4602      	mov	r2, r0
 800ac28:	4429      	add	r1, r5
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f7ff fde0 	bl	800a7f0 <prvInsertTimerInActiveList>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d0d1      	beq.n	800abd8 <prvProcessReceivedCommands+0x4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac34:	6a23      	ldr	r3, [r4, #32]
 800ac36:	4620      	mov	r0, r4
 800ac38:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac3a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ac3e:	f013 0f04 	tst.w	r3, #4
 800ac42:	d0c9      	beq.n	800abd8 <prvProcessReceivedCommands+0x4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac44:	69a2      	ldr	r2, [r4, #24]
 800ac46:	2100      	movs	r1, #0
 800ac48:	9100      	str	r1, [sp, #0]
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	9804      	ldr	r0, [sp, #16]
 800ac4e:	4402      	add	r2, r0
 800ac50:	4620      	mov	r0, r4
 800ac52:	f7ff fec5 	bl	800a9e0 <xTimerGenericCommand>
							configASSERT( xResult );
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d1be      	bne.n	800abd8 <prvProcessReceivedCommands+0x4>
 800ac5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5e:	f383 8811 	msr	BASEPRI, r3
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	e7fe      	b.n	800ac6a <prvProcessReceivedCommands+0x96>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac6c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ac70:	f023 0301 	bic.w	r3, r3, #1
 800ac74:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800ac78:	e7ae      	b.n	800abd8 <prvProcessReceivedCommands+0x4>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac7a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ac7e:	f043 0301 	orr.w	r3, r3, #1
 800ac82:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac86:	9904      	ldr	r1, [sp, #16]
 800ac88:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac8a:	b131      	cbz	r1, 800ac9a <prvProcessReceivedCommands+0xc6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	4602      	mov	r2, r0
 800ac90:	4401      	add	r1, r0
 800ac92:	4620      	mov	r0, r4
 800ac94:	f7ff fdac 	bl	800a7f0 <prvInsertTimerInActiveList>
					break;
 800ac98:	e79e      	b.n	800abd8 <prvProcessReceivedCommands+0x4>
 800ac9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	e7fe      	b.n	800acaa <prvProcessReceivedCommands+0xd6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800acac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800acb0:	f013 0f02 	tst.w	r3, #2
 800acb4:	d004      	beq.n	800acc0 <prvProcessReceivedCommands+0xec>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acb6:	f023 0301 	bic.w	r3, r3, #1
 800acba:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800acbe:	e78b      	b.n	800abd8 <prvProcessReceivedCommands+0x4>
							vPortFree( pxTimer );
 800acc0:	4620      	mov	r0, r4
 800acc2:	f000 fab1 	bl	800b228 <vPortFree>
 800acc6:	e787      	b.n	800abd8 <prvProcessReceivedCommands+0x4>
}
 800acc8:	b007      	add	sp, #28
 800acca:	bd30      	pop	{r4, r5, pc}
 800accc:	20000a8c 	.word	0x20000a8c

0800acd0 <prvTimerTask>:
{
 800acd0:	b500      	push	{lr}
 800acd2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acd4:	a801      	add	r0, sp, #4
 800acd6:	f7ff fd7b 	bl	800a7d0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800acda:	9901      	ldr	r1, [sp, #4]
 800acdc:	f7ff ff40 	bl	800ab60 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800ace0:	f7ff ff78 	bl	800abd4 <prvProcessReceivedCommands>
 800ace4:	e7f6      	b.n	800acd4 <prvTimerTask+0x4>
	...

0800ace8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ace8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800acea:	2300      	movs	r3, #0
 800acec:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acee:	4b0d      	ldr	r3, [pc, #52]	; (800ad24 <prvTaskExitError+0x3c>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acf6:	d008      	beq.n	800ad0a <prvTaskExitError+0x22>
 800acf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	e7fe      	b.n	800ad08 <prvTaskExitError+0x20>
 800ad0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0e:	f383 8811 	msr	BASEPRI, r3
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad1a:	9b01      	ldr	r3, [sp, #4]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d0fc      	beq.n	800ad1a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad20:	b002      	add	sp, #8
 800ad22:	4770      	bx	lr
 800ad24:	2000005c 	.word	0x2000005c

0800ad28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad28:	4808      	ldr	r0, [pc, #32]	; (800ad4c <prvPortStartFirstTask+0x24>)
 800ad2a:	6800      	ldr	r0, [r0, #0]
 800ad2c:	6800      	ldr	r0, [r0, #0]
 800ad2e:	f380 8808 	msr	MSP, r0
 800ad32:	f04f 0000 	mov.w	r0, #0
 800ad36:	f380 8814 	msr	CONTROL, r0
 800ad3a:	b662      	cpsie	i
 800ad3c:	b661      	cpsie	f
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	df00      	svc	0
 800ad48:	bf00      	nop
 800ad4a:	0000      	.short	0x0000
 800ad4c:	e000ed08 	.word	0xe000ed08

0800ad50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad60 <vPortEnableVFP+0x10>
 800ad54:	6801      	ldr	r1, [r0, #0]
 800ad56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad5a:	6001      	str	r1, [r0, #0]
 800ad5c:	4770      	bx	lr
 800ad5e:	0000      	.short	0x0000
 800ad60:	e000ed88 	.word	0xe000ed88

0800ad64 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad68:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad6c:	f021 0101 	bic.w	r1, r1, #1
 800ad70:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad74:	4b05      	ldr	r3, [pc, #20]	; (800ad8c <pxPortInitialiseStack+0x28>)
 800ad76:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad7a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad7e:	f06f 0302 	mvn.w	r3, #2
 800ad82:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800ad86:	3844      	subs	r0, #68	; 0x44
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	0800ace9 	.word	0x0800ace9

0800ad90 <SVC_Handler>:
	__asm volatile (
 800ad90:	4b07      	ldr	r3, [pc, #28]	; (800adb0 <pxCurrentTCBConst2>)
 800ad92:	6819      	ldr	r1, [r3, #0]
 800ad94:	6808      	ldr	r0, [r1, #0]
 800ad96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9a:	f380 8809 	msr	PSP, r0
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f04f 0000 	mov.w	r0, #0
 800ada6:	f380 8811 	msr	BASEPRI, r0
 800adaa:	4770      	bx	lr
 800adac:	f3af 8000 	nop.w

0800adb0 <pxCurrentTCBConst2>:
 800adb0:	20000864 	.word	0x20000864

0800adb4 <vPortEnterCritical>:
 800adb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb8:	f383 8811 	msr	BASEPRI, r3
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800adc4:	4a0a      	ldr	r2, [pc, #40]	; (800adf0 <vPortEnterCritical+0x3c>)
 800adc6:	6813      	ldr	r3, [r2, #0]
 800adc8:	3301      	adds	r3, #1
 800adca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d000      	beq.n	800add2 <vPortEnterCritical+0x1e>
}
 800add0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800add2:	4b08      	ldr	r3, [pc, #32]	; (800adf4 <vPortEnterCritical+0x40>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800adda:	d0f9      	beq.n	800add0 <vPortEnterCritical+0x1c>
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	e7fe      	b.n	800adec <vPortEnterCritical+0x38>
 800adee:	bf00      	nop
 800adf0:	2000005c 	.word	0x2000005c
 800adf4:	e000ed04 	.word	0xe000ed04

0800adf8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800adf8:	4b09      	ldr	r3, [pc, #36]	; (800ae20 <vPortExitCritical+0x28>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	b943      	cbnz	r3, 800ae10 <vPortExitCritical+0x18>
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	e7fe      	b.n	800ae0e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800ae10:	3b01      	subs	r3, #1
 800ae12:	4a03      	ldr	r2, [pc, #12]	; (800ae20 <vPortExitCritical+0x28>)
 800ae14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae16:	b90b      	cbnz	r3, 800ae1c <vPortExitCritical+0x24>
	__asm volatile
 800ae18:	f383 8811 	msr	BASEPRI, r3
}
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	2000005c 	.word	0x2000005c
	...

0800ae30 <PendSV_Handler>:
	__asm volatile
 800ae30:	f3ef 8009 	mrs	r0, PSP
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	4b15      	ldr	r3, [pc, #84]	; (800ae90 <pxCurrentTCBConst>)
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	f01e 0f10 	tst.w	lr, #16
 800ae40:	bf08      	it	eq
 800ae42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4a:	6010      	str	r0, [r2, #0]
 800ae4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ae54:	f380 8811 	msr	BASEPRI, r0
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f7fe ff42 	bl	8009ce8 <vTaskSwitchContext>
 800ae64:	f04f 0000 	mov.w	r0, #0
 800ae68:	f380 8811 	msr	BASEPRI, r0
 800ae6c:	bc09      	pop	{r0, r3}
 800ae6e:	6819      	ldr	r1, [r3, #0]
 800ae70:	6808      	ldr	r0, [r1, #0]
 800ae72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae76:	f01e 0f10 	tst.w	lr, #16
 800ae7a:	bf08      	it	eq
 800ae7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae80:	f380 8809 	msr	PSP, r0
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	f3af 8000 	nop.w

0800ae90 <pxCurrentTCBConst>:
 800ae90:	20000864 	.word	0x20000864

0800ae94 <SysTick_Handler>:
{
 800ae94:	b508      	push	{r3, lr}
	__asm volatile
 800ae96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800aea6:	f7fe fda1 	bl	80099ec <xTaskIncrementTick>
 800aeaa:	b118      	cbz	r0, 800aeb4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aeac:	4b03      	ldr	r3, [pc, #12]	; (800aebc <SysTick_Handler+0x28>)
 800aeae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeb2:	601a      	str	r2, [r3, #0]
	__asm volatile
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f383 8811 	msr	BASEPRI, r3
}
 800aeba:	bd08      	pop	{r3, pc}
 800aebc:	e000ed04 	.word	0xe000ed04

0800aec0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aec0:	4a08      	ldr	r2, [pc, #32]	; (800aee4 <vPortSetupTimerInterrupt+0x24>)
 800aec2:	2300      	movs	r3, #0
 800aec4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aec6:	4908      	ldr	r1, [pc, #32]	; (800aee8 <vPortSetupTimerInterrupt+0x28>)
 800aec8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aeca:	4b08      	ldr	r3, [pc, #32]	; (800aeec <vPortSetupTimerInterrupt+0x2c>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4908      	ldr	r1, [pc, #32]	; (800aef0 <vPortSetupTimerInterrupt+0x30>)
 800aed0:	fba1 1303 	umull	r1, r3, r1, r3
 800aed4:	099b      	lsrs	r3, r3, #6
 800aed6:	3b01      	subs	r3, #1
 800aed8:	4906      	ldr	r1, [pc, #24]	; (800aef4 <vPortSetupTimerInterrupt+0x34>)
 800aeda:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aedc:	2307      	movs	r3, #7
 800aede:	6013      	str	r3, [r2, #0]
}
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	e000e010 	.word	0xe000e010
 800aee8:	e000e018 	.word	0xe000e018
 800aeec:	20000050 	.word	0x20000050
 800aef0:	10624dd3 	.word	0x10624dd3
 800aef4:	e000e014 	.word	0xe000e014

0800aef8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aef8:	4b3a      	ldr	r3, [pc, #232]	; (800afe4 <xPortStartScheduler+0xec>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	4b3a      	ldr	r3, [pc, #232]	; (800afe8 <xPortStartScheduler+0xf0>)
 800aefe:	429a      	cmp	r2, r3
 800af00:	d00d      	beq.n	800af1e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af02:	4b38      	ldr	r3, [pc, #224]	; (800afe4 <xPortStartScheduler+0xec>)
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	4b39      	ldr	r3, [pc, #228]	; (800afec <xPortStartScheduler+0xf4>)
 800af08:	429a      	cmp	r2, r3
 800af0a:	d111      	bne.n	800af30 <xPortStartScheduler+0x38>
	__asm volatile
 800af0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af10:	f383 8811 	msr	BASEPRI, r3
 800af14:	f3bf 8f6f 	isb	sy
 800af18:	f3bf 8f4f 	dsb	sy
 800af1c:	e7fe      	b.n	800af1c <xPortStartScheduler+0x24>
 800af1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	e7fe      	b.n	800af2e <xPortStartScheduler+0x36>
{
 800af30:	b510      	push	{r4, lr}
 800af32:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af34:	4b2e      	ldr	r3, [pc, #184]	; (800aff0 <xPortStartScheduler+0xf8>)
 800af36:	781a      	ldrb	r2, [r3, #0]
 800af38:	b2d2      	uxtb	r2, r2
 800af3a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af3c:	22ff      	movs	r2, #255	; 0xff
 800af3e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	b2db      	uxtb	r3, r3
 800af44:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af48:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800af4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800af50:	4a28      	ldr	r2, [pc, #160]	; (800aff4 <xPortStartScheduler+0xfc>)
 800af52:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af54:	4b28      	ldr	r3, [pc, #160]	; (800aff8 <xPortStartScheduler+0x100>)
 800af56:	2207      	movs	r2, #7
 800af58:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af5a:	e009      	b.n	800af70 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800af5c:	4a26      	ldr	r2, [pc, #152]	; (800aff8 <xPortStartScheduler+0x100>)
 800af5e:	6813      	ldr	r3, [r2, #0]
 800af60:	3b01      	subs	r3, #1
 800af62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800af64:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800af68:	005b      	lsls	r3, r3, #1
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af70:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800af74:	f013 0f80 	tst.w	r3, #128	; 0x80
 800af78:	d1f0      	bne.n	800af5c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800af7a:	4b1f      	ldr	r3, [pc, #124]	; (800aff8 <xPortStartScheduler+0x100>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b03      	cmp	r3, #3
 800af80:	d008      	beq.n	800af94 <xPortStartScheduler+0x9c>
 800af82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af86:	f383 8811 	msr	BASEPRI, r3
 800af8a:	f3bf 8f6f 	isb	sy
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	e7fe      	b.n	800af92 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800af94:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800af96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af9a:	4a17      	ldr	r2, [pc, #92]	; (800aff8 <xPortStartScheduler+0x100>)
 800af9c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800af9e:	9b01      	ldr	r3, [sp, #4]
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	4a13      	ldr	r2, [pc, #76]	; (800aff0 <xPortStartScheduler+0xf8>)
 800afa4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800afa6:	4b15      	ldr	r3, [pc, #84]	; (800affc <xPortStartScheduler+0x104>)
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800afae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800afb6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800afb8:	f7ff ff82 	bl	800aec0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800afbc:	2400      	movs	r4, #0
 800afbe:	4b10      	ldr	r3, [pc, #64]	; (800b000 <xPortStartScheduler+0x108>)
 800afc0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800afc2:	f7ff fec5 	bl	800ad50 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800afc6:	4a0f      	ldr	r2, [pc, #60]	; (800b004 <xPortStartScheduler+0x10c>)
 800afc8:	6813      	ldr	r3, [r2, #0]
 800afca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800afce:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800afd0:	f7ff feaa 	bl	800ad28 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800afd4:	f7fe fe88 	bl	8009ce8 <vTaskSwitchContext>
	prvTaskExitError();
 800afd8:	f7ff fe86 	bl	800ace8 <prvTaskExitError>
}
 800afdc:	4620      	mov	r0, r4
 800afde:	b002      	add	sp, #8
 800afe0:	bd10      	pop	{r4, pc}
 800afe2:	bf00      	nop
 800afe4:	e000ed00 	.word	0xe000ed00
 800afe8:	410fc271 	.word	0x410fc271
 800afec:	410fc270 	.word	0x410fc270
 800aff0:	e000e400 	.word	0xe000e400
 800aff4:	20000a94 	.word	0x20000a94
 800aff8:	20000a98 	.word	0x20000a98
 800affc:	e000ed20 	.word	0xe000ed20
 800b000:	2000005c 	.word	0x2000005c
 800b004:	e000ef34 	.word	0xe000ef34

0800b008 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b008:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b00c:	2b0f      	cmp	r3, #15
 800b00e:	d90f      	bls.n	800b030 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b010:	4a10      	ldr	r2, [pc, #64]	; (800b054 <vPortValidateInterruptPriority+0x4c>)
 800b012:	5c9b      	ldrb	r3, [r3, r2]
 800b014:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b016:	4a10      	ldr	r2, [pc, #64]	; (800b058 <vPortValidateInterruptPriority+0x50>)
 800b018:	7812      	ldrb	r2, [r2, #0]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d908      	bls.n	800b030 <vPortValidateInterruptPriority+0x28>
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	e7fe      	b.n	800b02e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b030:	4b0a      	ldr	r3, [pc, #40]	; (800b05c <vPortValidateInterruptPriority+0x54>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b038:	4a09      	ldr	r2, [pc, #36]	; (800b060 <vPortValidateInterruptPriority+0x58>)
 800b03a:	6812      	ldr	r2, [r2, #0]
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d908      	bls.n	800b052 <vPortValidateInterruptPriority+0x4a>
 800b040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	e7fe      	b.n	800b050 <vPortValidateInterruptPriority+0x48>
	}
 800b052:	4770      	bx	lr
 800b054:	e000e3f0 	.word	0xe000e3f0
 800b058:	20000a94 	.word	0x20000a94
 800b05c:	e000ed0c 	.word	0xe000ed0c
 800b060:	20000a98 	.word	0x20000a98

0800b064 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b064:	4a12      	ldr	r2, [pc, #72]	; (800b0b0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b066:	f012 0f07 	tst.w	r2, #7
 800b06a:	d01e      	beq.n	800b0aa <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b06c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b06e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b072:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 800b076:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b078:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b07a:	480e      	ldr	r0, [pc, #56]	; (800b0b4 <prvHeapInit+0x50>)
 800b07c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b07e:	2100      	movs	r1, #0
 800b080:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b082:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800b084:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b086:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800b08a:	480b      	ldr	r0, [pc, #44]	; (800b0b8 <prvHeapInit+0x54>)
 800b08c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800b08e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b090:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b092:	1a99      	subs	r1, r3, r2
 800b094:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b096:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b098:	4b08      	ldr	r3, [pc, #32]	; (800b0bc <prvHeapInit+0x58>)
 800b09a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b09c:	4b08      	ldr	r3, [pc, #32]	; (800b0c0 <prvHeapInit+0x5c>)
 800b09e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0a0:	4b08      	ldr	r3, [pc, #32]	; (800b0c4 <prvHeapInit+0x60>)
 800b0a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0a6:	601a      	str	r2, [r3, #0]
}
 800b0a8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b0aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0ae:	e7e4      	b.n	800b07a <prvHeapInit+0x16>
 800b0b0:	20000aa0 	.word	0x20000aa0
 800b0b4:	20002aac 	.word	0x20002aac
 800b0b8:	20000a9c 	.word	0x20000a9c
 800b0bc:	20002aa8 	.word	0x20002aa8
 800b0c0:	20002aa4 	.word	0x20002aa4
 800b0c4:	20002aa0 	.word	0x20002aa0

0800b0c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0c8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b0ca:	4b13      	ldr	r3, [pc, #76]	; (800b118 <prvInsertBlockIntoFreeList+0x50>)
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	4282      	cmp	r2, r0
 800b0d0:	d31b      	bcc.n	800b10a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b0d2:	6859      	ldr	r1, [r3, #4]
 800b0d4:	185c      	adds	r4, r3, r1
 800b0d6:	4284      	cmp	r4, r0
 800b0d8:	d103      	bne.n	800b0e2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b0da:	6840      	ldr	r0, [r0, #4]
 800b0dc:	4401      	add	r1, r0
 800b0de:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b0e0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b0e2:	6841      	ldr	r1, [r0, #4]
 800b0e4:	1844      	adds	r4, r0, r1
 800b0e6:	42a2      	cmp	r2, r4
 800b0e8:	d113      	bne.n	800b112 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b0ea:	4c0c      	ldr	r4, [pc, #48]	; (800b11c <prvInsertBlockIntoFreeList+0x54>)
 800b0ec:	6824      	ldr	r4, [r4, #0]
 800b0ee:	42a2      	cmp	r2, r4
 800b0f0:	d00d      	beq.n	800b10e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b0f2:	6852      	ldr	r2, [r2, #4]
 800b0f4:	4411      	add	r1, r2
 800b0f6:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	6812      	ldr	r2, [r2, #0]
 800b0fc:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0fe:	4298      	cmp	r0, r3
 800b100:	d000      	beq.n	800b104 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b102:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b104:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b108:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b10a:	4613      	mov	r3, r2
 800b10c:	e7de      	b.n	800b0cc <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b10e:	6004      	str	r4, [r0, #0]
 800b110:	e7f5      	b.n	800b0fe <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b112:	6002      	str	r2, [r0, #0]
 800b114:	e7f3      	b.n	800b0fe <prvInsertBlockIntoFreeList+0x36>
 800b116:	bf00      	nop
 800b118:	20002aac 	.word	0x20002aac
 800b11c:	20000a9c 	.word	0x20000a9c

0800b120 <pvPortMalloc>:
{
 800b120:	b570      	push	{r4, r5, r6, lr}
 800b122:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b124:	f7fe fc54 	bl	80099d0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b128:	4b3a      	ldr	r3, [pc, #232]	; (800b214 <pvPortMalloc+0xf4>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	b1bb      	cbz	r3, 800b15e <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b12e:	4b3a      	ldr	r3, [pc, #232]	; (800b218 <pvPortMalloc+0xf8>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	421c      	tst	r4, r3
 800b134:	d163      	bne.n	800b1fe <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 800b136:	b1ac      	cbz	r4, 800b164 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 800b138:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b13a:	f014 0f07 	tst.w	r4, #7
 800b13e:	d011      	beq.n	800b164 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b140:	f024 0407 	bic.w	r4, r4, #7
 800b144:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b146:	f004 0307 	and.w	r3, r4, #7
 800b14a:	b15b      	cbz	r3, 800b164 <pvPortMalloc+0x44>
 800b14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b150:	f383 8811 	msr	BASEPRI, r3
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	e7fe      	b.n	800b15c <pvPortMalloc+0x3c>
			prvHeapInit();
 800b15e:	f7ff ff81 	bl	800b064 <prvHeapInit>
 800b162:	e7e4      	b.n	800b12e <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b164:	2c00      	cmp	r4, #0
 800b166:	d04c      	beq.n	800b202 <pvPortMalloc+0xe2>
 800b168:	4b2c      	ldr	r3, [pc, #176]	; (800b21c <pvPortMalloc+0xfc>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	42a3      	cmp	r3, r4
 800b16e:	d34a      	bcc.n	800b206 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 800b170:	4b2b      	ldr	r3, [pc, #172]	; (800b220 <pvPortMalloc+0x100>)
 800b172:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b174:	e001      	b.n	800b17a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 800b176:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800b178:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b17a:	686a      	ldr	r2, [r5, #4]
 800b17c:	42a2      	cmp	r2, r4
 800b17e:	d202      	bcs.n	800b186 <pvPortMalloc+0x66>
 800b180:	682a      	ldr	r2, [r5, #0]
 800b182:	2a00      	cmp	r2, #0
 800b184:	d1f7      	bne.n	800b176 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 800b186:	4a23      	ldr	r2, [pc, #140]	; (800b214 <pvPortMalloc+0xf4>)
 800b188:	6812      	ldr	r2, [r2, #0]
 800b18a:	42aa      	cmp	r2, r5
 800b18c:	d03d      	beq.n	800b20a <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b18e:	681e      	ldr	r6, [r3, #0]
 800b190:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b192:	682a      	ldr	r2, [r5, #0]
 800b194:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b196:	686b      	ldr	r3, [r5, #4]
 800b198:	1b1b      	subs	r3, r3, r4
 800b19a:	2b10      	cmp	r3, #16
 800b19c:	d910      	bls.n	800b1c0 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b19e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1a0:	f010 0f07 	tst.w	r0, #7
 800b1a4:	d008      	beq.n	800b1b8 <pvPortMalloc+0x98>
 800b1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1aa:	f383 8811 	msr	BASEPRI, r3
 800b1ae:	f3bf 8f6f 	isb	sy
 800b1b2:	f3bf 8f4f 	dsb	sy
 800b1b6:	e7fe      	b.n	800b1b6 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b1b8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b1ba:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b1bc:	f7ff ff84 	bl	800b0c8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b1c0:	686a      	ldr	r2, [r5, #4]
 800b1c2:	4916      	ldr	r1, [pc, #88]	; (800b21c <pvPortMalloc+0xfc>)
 800b1c4:	680b      	ldr	r3, [r1, #0]
 800b1c6:	1a9b      	subs	r3, r3, r2
 800b1c8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b1ca:	4916      	ldr	r1, [pc, #88]	; (800b224 <pvPortMalloc+0x104>)
 800b1cc:	6809      	ldr	r1, [r1, #0]
 800b1ce:	428b      	cmp	r3, r1
 800b1d0:	d201      	bcs.n	800b1d6 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b1d2:	4914      	ldr	r1, [pc, #80]	; (800b224 <pvPortMalloc+0x104>)
 800b1d4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b1d6:	4b10      	ldr	r3, [pc, #64]	; (800b218 <pvPortMalloc+0xf8>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800b1e2:	f7fe fc8f 	bl	8009b04 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1e6:	f016 0f07 	tst.w	r6, #7
 800b1ea:	d010      	beq.n	800b20e <pvPortMalloc+0xee>
 800b1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f0:	f383 8811 	msr	BASEPRI, r3
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	f3bf 8f4f 	dsb	sy
 800b1fc:	e7fe      	b.n	800b1fc <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 800b1fe:	2600      	movs	r6, #0
 800b200:	e7ef      	b.n	800b1e2 <pvPortMalloc+0xc2>
 800b202:	2600      	movs	r6, #0
 800b204:	e7ed      	b.n	800b1e2 <pvPortMalloc+0xc2>
 800b206:	2600      	movs	r6, #0
 800b208:	e7eb      	b.n	800b1e2 <pvPortMalloc+0xc2>
 800b20a:	2600      	movs	r6, #0
 800b20c:	e7e9      	b.n	800b1e2 <pvPortMalloc+0xc2>
}
 800b20e:	4630      	mov	r0, r6
 800b210:	bd70      	pop	{r4, r5, r6, pc}
 800b212:	bf00      	nop
 800b214:	20000a9c 	.word	0x20000a9c
 800b218:	20002aa0 	.word	0x20002aa0
 800b21c:	20002aa4 	.word	0x20002aa4
 800b220:	20002aac 	.word	0x20002aac
 800b224:	20002aa8 	.word	0x20002aa8

0800b228 <vPortFree>:
	if( pv != NULL )
 800b228:	b380      	cbz	r0, 800b28c <vPortFree+0x64>
{
 800b22a:	b538      	push	{r3, r4, r5, lr}
 800b22c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800b22e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b232:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b236:	4916      	ldr	r1, [pc, #88]	; (800b290 <vPortFree+0x68>)
 800b238:	6809      	ldr	r1, [r1, #0]
 800b23a:	420a      	tst	r2, r1
 800b23c:	d108      	bne.n	800b250 <vPortFree+0x28>
 800b23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	e7fe      	b.n	800b24e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b250:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800b254:	b140      	cbz	r0, 800b268 <vPortFree+0x40>
 800b256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	e7fe      	b.n	800b266 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b268:	ea22 0201 	bic.w	r2, r2, r1
 800b26c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800b270:	f7fe fbae 	bl	80099d0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b274:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800b278:	4a06      	ldr	r2, [pc, #24]	; (800b294 <vPortFree+0x6c>)
 800b27a:	6813      	ldr	r3, [r2, #0]
 800b27c:	440b      	add	r3, r1
 800b27e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b280:	4628      	mov	r0, r5
 800b282:	f7ff ff21 	bl	800b0c8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800b286:	f7fe fc3d 	bl	8009b04 <xTaskResumeAll>
}
 800b28a:	bd38      	pop	{r3, r4, r5, pc}
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	20002aa0 	.word	0x20002aa0
 800b294:	20002aa4 	.word	0x20002aa4

0800b298 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 800b298:	4603      	mov	r3, r0
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;
 800b29a:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800b29c:	4608      	mov	r0, r1

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800b29e:	e004      	b.n	800b2aa <prvGetNumberOfParameters+0x12>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800b2a0:	b911      	cbnz	r1, 800b2a8 <prvGetNumberOfParameters+0x10>
			{
				cParameters++;
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800b2a6:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800b2a8:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800b2aa:	781a      	ldrb	r2, [r3, #0]
 800b2ac:	b11a      	cbz	r2, 800b2b6 <prvGetNumberOfParameters+0x1e>
		if( ( *pcCommandString ) == ' ' )
 800b2ae:	2a20      	cmp	r2, #32
 800b2b0:	d0f6      	beq.n	800b2a0 <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	e7f8      	b.n	800b2a8 <prvGetNumberOfParameters+0x10>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800b2b6:	b901      	cbnz	r1, 800b2ba <prvGetNumberOfParameters+0x22>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800b2b8:	4770      	bx	lr
		cParameters--;
 800b2ba:	3801      	subs	r0, #1
 800b2bc:	b240      	sxtb	r0, r0
 800b2be:	e7fb      	b.n	800b2b8 <prvGetNumberOfParameters+0x20>

0800b2c0 <prvHelpCommand>:
{
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	460a      	mov	r2, r1
	if( pxCommand == NULL )
 800b2c4:	4b09      	ldr	r3, [pc, #36]	; (800b2ec <prvHelpCommand+0x2c>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	b153      	cbz	r3, 800b2e0 <prvHelpCommand+0x20>
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800b2ca:	4c08      	ldr	r4, [pc, #32]	; (800b2ec <prvHelpCommand+0x2c>)
 800b2cc:	6825      	ldr	r5, [r4, #0]
 800b2ce:	682b      	ldr	r3, [r5, #0]
 800b2d0:	6859      	ldr	r1, [r3, #4]
 800b2d2:	f000 fd2b 	bl	800bd2c <strncpy>
	pxCommand = pxCommand->pxNext;
 800b2d6:	686b      	ldr	r3, [r5, #4]
 800b2d8:	6023      	str	r3, [r4, #0]
	if( pxCommand == NULL )
 800b2da:	b12b      	cbz	r3, 800b2e8 <prvHelpCommand+0x28>
		xReturn = pdTRUE;
 800b2dc:	2001      	movs	r0, #1
}
 800b2de:	bd38      	pop	{r3, r4, r5, pc}
		pxCommand = &xRegisteredCommands;
 800b2e0:	4b02      	ldr	r3, [pc, #8]	; (800b2ec <prvHelpCommand+0x2c>)
 800b2e2:	4903      	ldr	r1, [pc, #12]	; (800b2f0 <prvHelpCommand+0x30>)
 800b2e4:	6019      	str	r1, [r3, #0]
 800b2e6:	e7f0      	b.n	800b2ca <prvHelpCommand+0xa>
		xReturn = pdFALSE;
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	e7f8      	b.n	800b2de <prvHelpCommand+0x1e>
 800b2ec:	20002ab8 	.word	0x20002ab8
 800b2f0:	20000064 	.word	0x20000064

0800b2f4 <FreeRTOS_CLIRegisterCommand>:
{
 800b2f4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxCommandToRegister );
 800b2f6:	b940      	cbnz	r0, 800b30a <FreeRTOS_CLIRegisterCommand+0x16>
 800b2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fc:	f383 8811 	msr	BASEPRI, r3
 800b300:	f3bf 8f6f 	isb	sy
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	e7fe      	b.n	800b308 <FreeRTOS_CLIRegisterCommand+0x14>
 800b30a:	4605      	mov	r5, r0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800b30c:	2008      	movs	r0, #8
 800b30e:	f7ff ff07 	bl	800b120 <pvPortMalloc>
	configASSERT( pxNewListItem );
 800b312:	4604      	mov	r4, r0
 800b314:	b940      	cbnz	r0, 800b328 <FreeRTOS_CLIRegisterCommand+0x34>
 800b316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	e7fe      	b.n	800b326 <FreeRTOS_CLIRegisterCommand+0x32>
		taskENTER_CRITICAL();
 800b328:	f7ff fd44 	bl	800adb4 <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800b32c:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800b32e:	2300      	movs	r3, #0
 800b330:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800b332:	4b04      	ldr	r3, [pc, #16]	; (800b344 <FreeRTOS_CLIRegisterCommand+0x50>)
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800b338:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800b33a:	f7ff fd5d 	bl	800adf8 <vPortExitCritical>
}
 800b33e:	2001      	movs	r0, #1
 800b340:	bd38      	pop	{r3, r4, r5, pc}
 800b342:	bf00      	nop
 800b344:	20000060 	.word	0x20000060

0800b348 <FreeRTOS_CLIProcessCommand>:
{
 800b348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b34c:	4606      	mov	r6, r0
 800b34e:	4689      	mov	r9, r1
 800b350:	4690      	mov	r8, r2
	if( pxCommand == NULL )
 800b352:	4b2a      	ldr	r3, [pc, #168]	; (800b3fc <FreeRTOS_CLIProcessCommand+0xb4>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	b1ab      	cbz	r3, 800b384 <FreeRTOS_CLIProcessCommand+0x3c>
BaseType_t xReturn = pdTRUE;
 800b358:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800b35a:	4b28      	ldr	r3, [pc, #160]	; (800b3fc <FreeRTOS_CLIProcessCommand+0xb4>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	b10b      	cbz	r3, 800b364 <FreeRTOS_CLIProcessCommand+0x1c>
 800b360:	2c00      	cmp	r4, #0
 800b362:	d03b      	beq.n	800b3dc <FreeRTOS_CLIProcessCommand+0x94>
	else if( pxCommand != NULL )
 800b364:	2b00      	cmp	r3, #0
 800b366:	d042      	beq.n	800b3ee <FreeRTOS_CLIProcessCommand+0xa6>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	4632      	mov	r2, r6
 800b36e:	4641      	mov	r1, r8
 800b370:	4648      	mov	r0, r9
 800b372:	4798      	blx	r3
		if( xReturn == pdFALSE )
 800b374:	4604      	mov	r4, r0
 800b376:	b910      	cbnz	r0, 800b37e <FreeRTOS_CLIProcessCommand+0x36>
			pxCommand = NULL;
 800b378:	4b20      	ldr	r3, [pc, #128]	; (800b3fc <FreeRTOS_CLIProcessCommand+0xb4>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	601a      	str	r2, [r3, #0]
}
 800b37e:	4620      	mov	r0, r4
 800b380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800b384:	4b1d      	ldr	r3, [pc, #116]	; (800b3fc <FreeRTOS_CLIProcessCommand+0xb4>)
 800b386:	4a1e      	ldr	r2, [pc, #120]	; (800b400 <FreeRTOS_CLIProcessCommand+0xb8>)
 800b388:	601a      	str	r2, [r3, #0]
 800b38a:	e008      	b.n	800b39e <FreeRTOS_CLIProcessCommand+0x56>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800b38c:	4602      	mov	r2, r0
 800b38e:	4629      	mov	r1, r5
 800b390:	4630      	mov	r0, r6
 800b392:	f000 fcb9 	bl	800bd08 <strncmp>
 800b396:	b180      	cbz	r0, 800b3ba <FreeRTOS_CLIProcessCommand+0x72>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800b398:	6862      	ldr	r2, [r4, #4]
 800b39a:	4b18      	ldr	r3, [pc, #96]	; (800b3fc <FreeRTOS_CLIProcessCommand+0xb4>)
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	4b17      	ldr	r3, [pc, #92]	; (800b3fc <FreeRTOS_CLIProcessCommand+0xb4>)
 800b3a0:	681c      	ldr	r4, [r3, #0]
 800b3a2:	b1cc      	cbz	r4, 800b3d8 <FreeRTOS_CLIProcessCommand+0x90>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800b3a4:	6827      	ldr	r7, [r4, #0]
 800b3a6:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	f7f4 ff19 	bl	80001e0 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800b3ae:	5c33      	ldrb	r3, [r6, r0]
 800b3b0:	2b20      	cmp	r3, #32
 800b3b2:	d0eb      	beq.n	800b38c <FreeRTOS_CLIProcessCommand+0x44>
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1ef      	bne.n	800b398 <FreeRTOS_CLIProcessCommand+0x50>
 800b3b8:	e7e8      	b.n	800b38c <FreeRTOS_CLIProcessCommand+0x44>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800b3ba:	f997 400c 	ldrsb.w	r4, [r7, #12]
 800b3be:	2c00      	cmp	r4, #0
 800b3c0:	da01      	bge.n	800b3c6 <FreeRTOS_CLIProcessCommand+0x7e>
BaseType_t xReturn = pdTRUE;
 800b3c2:	2401      	movs	r4, #1
 800b3c4:	e7c9      	b.n	800b35a <FreeRTOS_CLIProcessCommand+0x12>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	f7ff ff66 	bl	800b298 <prvGetNumberOfParameters>
 800b3cc:	4284      	cmp	r4, r0
 800b3ce:	d001      	beq.n	800b3d4 <FreeRTOS_CLIProcessCommand+0x8c>
							xReturn = pdFALSE;
 800b3d0:	2400      	movs	r4, #0
 800b3d2:	e7c2      	b.n	800b35a <FreeRTOS_CLIProcessCommand+0x12>
BaseType_t xReturn = pdTRUE;
 800b3d4:	2401      	movs	r4, #1
 800b3d6:	e7c0      	b.n	800b35a <FreeRTOS_CLIProcessCommand+0x12>
 800b3d8:	2401      	movs	r4, #1
 800b3da:	e7be      	b.n	800b35a <FreeRTOS_CLIProcessCommand+0x12>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800b3dc:	4642      	mov	r2, r8
 800b3de:	4909      	ldr	r1, [pc, #36]	; (800b404 <FreeRTOS_CLIProcessCommand+0xbc>)
 800b3e0:	4648      	mov	r0, r9
 800b3e2:	f000 fca3 	bl	800bd2c <strncpy>
		pxCommand = NULL;
 800b3e6:	4b05      	ldr	r3, [pc, #20]	; (800b3fc <FreeRTOS_CLIProcessCommand+0xb4>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	601a      	str	r2, [r3, #0]
 800b3ec:	e7c7      	b.n	800b37e <FreeRTOS_CLIProcessCommand+0x36>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800b3ee:	4642      	mov	r2, r8
 800b3f0:	4905      	ldr	r1, [pc, #20]	; (800b408 <FreeRTOS_CLIProcessCommand+0xc0>)
 800b3f2:	4648      	mov	r0, r9
 800b3f4:	f000 fc9a 	bl	800bd2c <strncpy>
		xReturn = pdFALSE;
 800b3f8:	2400      	movs	r4, #0
	return xReturn;
 800b3fa:	e7c0      	b.n	800b37e <FreeRTOS_CLIProcessCommand+0x36>
 800b3fc:	20002ab4 	.word	0x20002ab4
 800b400:	20000064 	.word	0x20000064
 800b404:	0800cf9c 	.word	0x0800cf9c
 800b408:	0800cff4 	.word	0x0800cff4

0800b40c <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d200      	bcs.n	800b412 <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 800b410:	5488      	strb	r0, [r1, r2]
  }
}
 800b412:	4770      	bx	lr

0800b414 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800b414:	4770      	bx	lr

0800b416 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
 800b416:	2300      	movs	r3, #0
  while (_is_digit(**str)) {
 800b418:	e007      	b.n	800b42a <_atoi+0x14>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800b41a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b41e:	005a      	lsls	r2, r3, #1
 800b420:	1c4b      	adds	r3, r1, #1
 800b422:	6003      	str	r3, [r0, #0]
 800b424:	780b      	ldrb	r3, [r1, #0]
 800b426:	4413      	add	r3, r2
 800b428:	3b30      	subs	r3, #48	; 0x30
  while (_is_digit(**str)) {
 800b42a:	6801      	ldr	r1, [r0, #0]
 800b42c:	780a      	ldrb	r2, [r1, #0]
  return (ch >= '0') && (ch <= '9');
 800b42e:	3a30      	subs	r2, #48	; 0x30
 800b430:	b2d2      	uxtb	r2, r2
  while (_is_digit(**str)) {
 800b432:	2a09      	cmp	r2, #9
 800b434:	d9f1      	bls.n	800b41a <_atoi+0x4>
  }
  return i;
}
 800b436:	4618      	mov	r0, r3
 800b438:	4770      	bx	lr

0800b43a <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800b43a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43e:	b083      	sub	sp, #12
 800b440:	4605      	mov	r5, r0
 800b442:	9101      	str	r1, [sp, #4]
 800b444:	4693      	mov	fp, r2
 800b446:	461e      	mov	r6, r3
 800b448:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800b44c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b44e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800b452:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b454:	f013 0f03 	tst.w	r3, #3
 800b458:	d114      	bne.n	800b484 <_out_rev+0x4a>
    for (size_t i = len; i < width; i++) {
 800b45a:	4627      	mov	r7, r4
 800b45c:	e007      	b.n	800b46e <_out_rev+0x34>
      out(' ', buffer, idx++, maxlen);
 800b45e:	f102 0a01 	add.w	sl, r2, #1
 800b462:	4633      	mov	r3, r6
 800b464:	9901      	ldr	r1, [sp, #4]
 800b466:	2020      	movs	r0, #32
 800b468:	47a8      	blx	r5
    for (size_t i = len; i < width; i++) {
 800b46a:	3701      	adds	r7, #1
      out(' ', buffer, idx++, maxlen);
 800b46c:	4652      	mov	r2, sl
    for (size_t i = len; i < width; i++) {
 800b46e:	4547      	cmp	r7, r8
 800b470:	d3f5      	bcc.n	800b45e <_out_rev+0x24>
 800b472:	e007      	b.n	800b484 <_out_rev+0x4a>
    }
  }

  // reverse string
  while (len) {
    out(buf[--len], buffer, idx++, maxlen);
 800b474:	3c01      	subs	r4, #1
 800b476:	1c57      	adds	r7, r2, #1
 800b478:	4633      	mov	r3, r6
 800b47a:	9901      	ldr	r1, [sp, #4]
 800b47c:	f819 0004 	ldrb.w	r0, [r9, r4]
 800b480:	47a8      	blx	r5
 800b482:	463a      	mov	r2, r7
  while (len) {
 800b484:	2c00      	cmp	r4, #0
 800b486:	d1f5      	bne.n	800b474 <_out_rev+0x3a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800b488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b48a:	f013 0f02 	tst.w	r3, #2
 800b48e:	d106      	bne.n	800b49e <_out_rev+0x64>
 800b490:	e009      	b.n	800b4a6 <_out_rev+0x6c>
    while (idx - start_idx < width) {
      out(' ', buffer, idx++, maxlen);
 800b492:	1c54      	adds	r4, r2, #1
 800b494:	4633      	mov	r3, r6
 800b496:	9901      	ldr	r1, [sp, #4]
 800b498:	2020      	movs	r0, #32
 800b49a:	47a8      	blx	r5
 800b49c:	4622      	mov	r2, r4
    while (idx - start_idx < width) {
 800b49e:	eba2 030b 	sub.w	r3, r2, fp
 800b4a2:	4543      	cmp	r3, r8
 800b4a4:	d3f5      	bcc.n	800b492 <_out_rev+0x58>
    }
  }

  return idx;
}
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	b003      	add	sp, #12
 800b4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4ae <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b4ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b4b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b4b8:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 800b4bc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800b4c0:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800b4c4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800b4c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800b4c8:	f015 0f02 	tst.w	r5, #2
 800b4cc:	d121      	bne.n	800b512 <_ntoa_format+0x64>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800b4ce:	b17f      	cbz	r7, 800b4f0 <_ntoa_format+0x42>
 800b4d0:	f015 0f01 	tst.w	r5, #1
 800b4d4:	d00c      	beq.n	800b4f0 <_ntoa_format+0x42>
 800b4d6:	f1b9 0f00 	cmp.w	r9, #0
 800b4da:	d102      	bne.n	800b4e2 <_ntoa_format+0x34>
 800b4dc:	f015 0f0c 	tst.w	r5, #12
 800b4e0:	d006      	beq.n	800b4f0 <_ntoa_format+0x42>
      width--;
 800b4e2:	3f01      	subs	r7, #1
 800b4e4:	e004      	b.n	800b4f0 <_ntoa_format+0x42>
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 800b4e6:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800b4ea:	f806 c004 	strb.w	ip, [r6, r4]
 800b4ee:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b4f0:	4574      	cmp	r4, lr
 800b4f2:	d207      	bcs.n	800b504 <_ntoa_format+0x56>
 800b4f4:	2c1f      	cmp	r4, #31
 800b4f6:	d9f6      	bls.n	800b4e6 <_ntoa_format+0x38>
 800b4f8:	e004      	b.n	800b504 <_ntoa_format+0x56>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 800b4fa:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800b4fe:	f806 c004 	strb.w	ip, [r6, r4]
 800b502:	3401      	adds	r4, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b504:	f015 0f01 	tst.w	r5, #1
 800b508:	d003      	beq.n	800b512 <_ntoa_format+0x64>
 800b50a:	42bc      	cmp	r4, r7
 800b50c:	d201      	bcs.n	800b512 <_ntoa_format+0x64>
 800b50e:	2c1f      	cmp	r4, #31
 800b510:	d9f3      	bls.n	800b4fa <_ntoa_format+0x4c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800b512:	f015 0f10 	tst.w	r5, #16
 800b516:	d017      	beq.n	800b548 <_ntoa_format+0x9a>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800b518:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800b51c:	d104      	bne.n	800b528 <_ntoa_format+0x7a>
 800b51e:	b11c      	cbz	r4, 800b528 <_ntoa_format+0x7a>
 800b520:	4574      	cmp	r4, lr
 800b522:	d022      	beq.n	800b56a <_ntoa_format+0xbc>
 800b524:	42bc      	cmp	r4, r7
 800b526:	d020      	beq.n	800b56a <_ntoa_format+0xbc>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b528:	f1b8 0f10 	cmp.w	r8, #16
 800b52c:	d029      	beq.n	800b582 <_ntoa_format+0xd4>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b52e:	f1b8 0f10 	cmp.w	r8, #16
 800b532:	d031      	beq.n	800b598 <_ntoa_format+0xea>
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b534:	f1b8 0f02 	cmp.w	r8, #2
 800b538:	d039      	beq.n	800b5ae <_ntoa_format+0x100>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800b53a:	2c1f      	cmp	r4, #31
 800b53c:	d804      	bhi.n	800b548 <_ntoa_format+0x9a>
      buf[len++] = '0';
 800b53e:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800b542:	f806 c004 	strb.w	ip, [r6, r4]
 800b546:	3401      	adds	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800b548:	2c1f      	cmp	r4, #31
 800b54a:	d83d      	bhi.n	800b5c8 <_ntoa_format+0x11a>
    if (negative) {
 800b54c:	f1b9 0f00 	cmp.w	r9, #0
 800b550:	d135      	bne.n	800b5be <_ntoa_format+0x110>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
 800b552:	f015 0f04 	tst.w	r5, #4
 800b556:	d140      	bne.n	800b5da <_ntoa_format+0x12c>
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
 800b558:	f015 0f08 	tst.w	r5, #8
 800b55c:	d034      	beq.n	800b5c8 <_ntoa_format+0x11a>
      buf[len++] = ' ';
 800b55e:	f04f 0c20 	mov.w	ip, #32
 800b562:	f806 c004 	strb.w	ip, [r6, r4]
 800b566:	3401      	adds	r4, #1
 800b568:	e02e      	b.n	800b5c8 <_ntoa_format+0x11a>
      if (len && (base == 16U)) {
 800b56a:	f1b4 0c01 	subs.w	ip, r4, #1
 800b56e:	d006      	beq.n	800b57e <_ntoa_format+0xd0>
 800b570:	f1b8 0f10 	cmp.w	r8, #16
 800b574:	d001      	beq.n	800b57a <_ntoa_format+0xcc>
      len--;
 800b576:	4664      	mov	r4, ip
 800b578:	e7d6      	b.n	800b528 <_ntoa_format+0x7a>
        len--;
 800b57a:	3c02      	subs	r4, #2
 800b57c:	e7d4      	b.n	800b528 <_ntoa_format+0x7a>
      len--;
 800b57e:	4664      	mov	r4, ip
 800b580:	e7d2      	b.n	800b528 <_ntoa_format+0x7a>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b582:	f015 0f20 	tst.w	r5, #32
 800b586:	d1d2      	bne.n	800b52e <_ntoa_format+0x80>
 800b588:	2c1f      	cmp	r4, #31
 800b58a:	d8d0      	bhi.n	800b52e <_ntoa_format+0x80>
      buf[len++] = 'x';
 800b58c:	f04f 0c78 	mov.w	ip, #120	; 0x78
 800b590:	f806 c004 	strb.w	ip, [r6, r4]
 800b594:	3401      	adds	r4, #1
 800b596:	e7d0      	b.n	800b53a <_ntoa_format+0x8c>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b598:	f015 0f20 	tst.w	r5, #32
 800b59c:	d0ca      	beq.n	800b534 <_ntoa_format+0x86>
 800b59e:	2c1f      	cmp	r4, #31
 800b5a0:	d8c8      	bhi.n	800b534 <_ntoa_format+0x86>
      buf[len++] = 'X';
 800b5a2:	f04f 0c58 	mov.w	ip, #88	; 0x58
 800b5a6:	f806 c004 	strb.w	ip, [r6, r4]
 800b5aa:	3401      	adds	r4, #1
 800b5ac:	e7c5      	b.n	800b53a <_ntoa_format+0x8c>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b5ae:	2c1f      	cmp	r4, #31
 800b5b0:	d8c3      	bhi.n	800b53a <_ntoa_format+0x8c>
      buf[len++] = 'b';
 800b5b2:	f04f 0c62 	mov.w	ip, #98	; 0x62
 800b5b6:	f806 c004 	strb.w	ip, [r6, r4]
 800b5ba:	3401      	adds	r4, #1
 800b5bc:	e7bd      	b.n	800b53a <_ntoa_format+0x8c>
      buf[len++] = '-';
 800b5be:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 800b5c2:	f806 c004 	strb.w	ip, [r6, r4]
 800b5c6:	3401      	adds	r4, #1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800b5c8:	9503      	str	r5, [sp, #12]
 800b5ca:	9702      	str	r7, [sp, #8]
 800b5cc:	9401      	str	r4, [sp, #4]
 800b5ce:	9600      	str	r6, [sp, #0]
 800b5d0:	f7ff ff33 	bl	800b43a <_out_rev>
}
 800b5d4:	b005      	add	sp, #20
 800b5d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      buf[len++] = '+';  // ignore the space if the '+' exists
 800b5da:	f04f 0c2b 	mov.w	ip, #43	; 0x2b
 800b5de:	f806 c004 	strb.w	ip, [r6, r4]
 800b5e2:	3401      	adds	r4, #1
 800b5e4:	e7f0      	b.n	800b5c8 <_ntoa_format+0x11a>

0800b5e6 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ea:	b090      	sub	sp, #64	; 0x40
 800b5ec:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800b5ee:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b5f0:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 800b5f4:	b90d      	cbnz	r5, 800b5fa <_ntoa_long+0x14>
    flags &= ~FLAGS_HASH;
 800b5f6:	f02c 0c10 	bic.w	ip, ip, #16
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800b5fa:	f41c 6680 	ands.w	r6, ip, #1024	; 0x400
 800b5fe:	d019      	beq.n	800b634 <_ntoa_long+0x4e>
 800b600:	b32d      	cbz	r5, 800b64e <_ntoa_long+0x68>
 800b602:	2600      	movs	r6, #0
 800b604:	e016      	b.n	800b634 <_ntoa_long+0x4e>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b606:	f01c 0f20 	tst.w	ip, #32
 800b60a:	d01d      	beq.n	800b648 <_ntoa_long+0x62>
 800b60c:	f04f 0e41 	mov.w	lr, #65	; 0x41
 800b610:	4474      	add	r4, lr
 800b612:	b2e4      	uxtb	r4, r4
 800b614:	3c0a      	subs	r4, #10
 800b616:	b2e4      	uxtb	r4, r4
 800b618:	f106 0e01 	add.w	lr, r6, #1
 800b61c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800b620:	4446      	add	r6, r8
 800b622:	f806 4c20 	strb.w	r4, [r6, #-32]
      value /= base;
 800b626:	fbb5 f5f7 	udiv	r5, r5, r7
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800b62a:	b195      	cbz	r5, 800b652 <_ntoa_long+0x6c>
 800b62c:	f1be 0f1f 	cmp.w	lr, #31
 800b630:	d80f      	bhi.n	800b652 <_ntoa_long+0x6c>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b632:	4676      	mov	r6, lr
      const char digit = (char)(value % base);
 800b634:	fbb5 f4f7 	udiv	r4, r5, r7
 800b638:	fb07 5414 	mls	r4, r7, r4, r5
 800b63c:	b2e4      	uxtb	r4, r4
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b63e:	2c09      	cmp	r4, #9
 800b640:	d8e1      	bhi.n	800b606 <_ntoa_long+0x20>
 800b642:	3430      	adds	r4, #48	; 0x30
 800b644:	b2e4      	uxtb	r4, r4
 800b646:	e7e7      	b.n	800b618 <_ntoa_long+0x32>
 800b648:	f04f 0e61 	mov.w	lr, #97	; 0x61
 800b64c:	e7e0      	b.n	800b610 <_ntoa_long+0x2a>
  size_t len = 0U;
 800b64e:	f04f 0e00 	mov.w	lr, #0
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800b652:	f8cd c018 	str.w	ip, [sp, #24]
 800b656:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800b658:	9405      	str	r4, [sp, #20]
 800b65a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800b65c:	9404      	str	r4, [sp, #16]
 800b65e:	9703      	str	r7, [sp, #12]
 800b660:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 800b664:	9402      	str	r4, [sp, #8]
 800b666:	f8cd e004 	str.w	lr, [sp, #4]
 800b66a:	ac08      	add	r4, sp, #32
 800b66c:	9400      	str	r4, [sp, #0]
 800b66e:	f7ff ff1e 	bl	800b4ae <_ntoa_format>
}
 800b672:	b010      	add	sp, #64	; 0x40
 800b674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b678 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800b678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b67c:	b08b      	sub	sp, #44	; 0x2c
 800b67e:	4606      	mov	r6, r0
 800b680:	4615      	mov	r5, r2
 800b682:	9309      	str	r3, [sp, #36]	; 0x24
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 800b684:	9106      	str	r1, [sp, #24]
 800b686:	2900      	cmp	r1, #0
 800b688:	f000 82b1 	beq.w	800bbee <_vsnprintf+0x576>
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800b68c:	2400      	movs	r4, #0
  while (*format)
 800b68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b690:	7818      	ldrb	r0, [r3, #0]
 800b692:	2800      	cmp	r0, #0
 800b694:	f000 82ad 	beq.w	800bbf2 <_vsnprintf+0x57a>
    if (*format != '%') {
 800b698:	2825      	cmp	r0, #37	; 0x25
 800b69a:	d009      	beq.n	800b6b0 <_vsnprintf+0x38>
      out(*format, buffer, idx++, maxlen);
 800b69c:	1c67      	adds	r7, r4, #1
 800b69e:	462b      	mov	r3, r5
 800b6a0:	4622      	mov	r2, r4
 800b6a2:	9906      	ldr	r1, [sp, #24]
 800b6a4:	47b0      	blx	r6
      format++;
 800b6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	9309      	str	r3, [sp, #36]	; 0x24
      out(*format, buffer, idx++, maxlen);
 800b6ac:	463c      	mov	r4, r7
      continue;
 800b6ae:	e7ee      	b.n	800b68e <_vsnprintf+0x16>
      format++;
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	9309      	str	r3, [sp, #36]	; 0x24
    flags = 0U;
 800b6b4:	2700      	movs	r7, #0
 800b6b6:	e02d      	b.n	800b714 <_vsnprintf+0x9c>
  return (ch >= '0') && (ch <= '9');
 800b6b8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b6bc:	b2db      	uxtb	r3, r3
    if (_is_digit(*format)) {
 800b6be:	2b09      	cmp	r3, #9
 800b6c0:	d968      	bls.n	800b794 <_vsnprintf+0x11c>
    else if (*format == '*') {
 800b6c2:	292a      	cmp	r1, #42	; 0x2a
 800b6c4:	d06b      	beq.n	800b79e <_vsnprintf+0x126>
    width = 0U;
 800b6c6:	f04f 0a00 	mov.w	sl, #0
    if (*format == '.') {
 800b6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6cc:	781a      	ldrb	r2, [r3, #0]
 800b6ce:	2a2e      	cmp	r2, #46	; 0x2e
 800b6d0:	d075      	beq.n	800b7be <_vsnprintf+0x146>
    precision = 0U;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	9307      	str	r3, [sp, #28]
    switch (*format) {
 800b6d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6d8:	7813      	ldrb	r3, [r2, #0]
 800b6da:	3b68      	subs	r3, #104	; 0x68
 800b6dc:	2b12      	cmp	r3, #18
 800b6de:	f200 80ad 	bhi.w	800b83c <_vsnprintf+0x1c4>
 800b6e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b6e6:	0099      	.short	0x0099
 800b6e8:	00a700ab 	.word	0x00a700ab
 800b6ec:	008b00ab 	.word	0x008b00ab
 800b6f0:	00ab00ab 	.word	0x00ab00ab
 800b6f4:	00ab00ab 	.word	0x00ab00ab
 800b6f8:	00ab00ab 	.word	0x00ab00ab
 800b6fc:	00ab00ab 	.word	0x00ab00ab
 800b700:	00ab00ab 	.word	0x00ab00ab
 800b704:	00ab00ab 	.word	0x00ab00ab
 800b708:	010800ab 	.word	0x010800ab
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800b70c:	f047 0701 	orr.w	r7, r7, #1
 800b710:	3301      	adds	r3, #1
 800b712:	9309      	str	r3, [sp, #36]	; 0x24
      switch (*format) {
 800b714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b716:	7819      	ldrb	r1, [r3, #0]
 800b718:	f1a1 0220 	sub.w	r2, r1, #32
 800b71c:	2a10      	cmp	r2, #16
 800b71e:	d8cb      	bhi.n	800b6b8 <_vsnprintf+0x40>
 800b720:	a001      	add	r0, pc, #4	; (adr r0, 800b728 <_vsnprintf+0xb0>)
 800b722:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800b726:	bf00      	nop
 800b728:	0800b781 	.word	0x0800b781
 800b72c:	0800b6b9 	.word	0x0800b6b9
 800b730:	0800b6b9 	.word	0x0800b6b9
 800b734:	0800b78b 	.word	0x0800b78b
 800b738:	0800b6b9 	.word	0x0800b6b9
 800b73c:	0800b6b9 	.word	0x0800b6b9
 800b740:	0800b6b9 	.word	0x0800b6b9
 800b744:	0800b6b9 	.word	0x0800b6b9
 800b748:	0800b6b9 	.word	0x0800b6b9
 800b74c:	0800b6b9 	.word	0x0800b6b9
 800b750:	0800b6b9 	.word	0x0800b6b9
 800b754:	0800b777 	.word	0x0800b777
 800b758:	0800b6b9 	.word	0x0800b6b9
 800b75c:	0800b76d 	.word	0x0800b76d
 800b760:	0800b6b9 	.word	0x0800b6b9
 800b764:	0800b6b9 	.word	0x0800b6b9
 800b768:	0800b70d 	.word	0x0800b70d
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800b76c:	f047 0702 	orr.w	r7, r7, #2
 800b770:	3301      	adds	r3, #1
 800b772:	9309      	str	r3, [sp, #36]	; 0x24
 800b774:	e7ce      	b.n	800b714 <_vsnprintf+0x9c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800b776:	f047 0704 	orr.w	r7, r7, #4
 800b77a:	3301      	adds	r3, #1
 800b77c:	9309      	str	r3, [sp, #36]	; 0x24
 800b77e:	e7c9      	b.n	800b714 <_vsnprintf+0x9c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800b780:	f047 0708 	orr.w	r7, r7, #8
 800b784:	3301      	adds	r3, #1
 800b786:	9309      	str	r3, [sp, #36]	; 0x24
 800b788:	e7c4      	b.n	800b714 <_vsnprintf+0x9c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800b78a:	f047 0710 	orr.w	r7, r7, #16
 800b78e:	3301      	adds	r3, #1
 800b790:	9309      	str	r3, [sp, #36]	; 0x24
 800b792:	e7bf      	b.n	800b714 <_vsnprintf+0x9c>
      width = _atoi(&format);
 800b794:	a809      	add	r0, sp, #36	; 0x24
 800b796:	f7ff fe3e 	bl	800b416 <_atoi>
 800b79a:	4682      	mov	sl, r0
 800b79c:	e795      	b.n	800b6ca <_vsnprintf+0x52>
      const int w = va_arg(va, int);
 800b79e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7a0:	1d1a      	adds	r2, r3, #4
 800b7a2:	9214      	str	r2, [sp, #80]	; 0x50
 800b7a4:	681b      	ldr	r3, [r3, #0]
      if (w < 0) {
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	db04      	blt.n	800b7b4 <_vsnprintf+0x13c>
        width = (unsigned int)w;
 800b7aa:	469a      	mov	sl, r3
      format++;
 800b7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b7b2:	e78a      	b.n	800b6ca <_vsnprintf+0x52>
        flags |= FLAGS_LEFT;    // reverse padding
 800b7b4:	f047 0702 	orr.w	r7, r7, #2
        width = (unsigned int)-w;
 800b7b8:	f1c3 0a00 	rsb	sl, r3, #0
 800b7bc:	e7f6      	b.n	800b7ac <_vsnprintf+0x134>
      flags |= FLAGS_PRECISION;
 800b7be:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
      format++;
 800b7c2:	1c5a      	adds	r2, r3, #1
 800b7c4:	9209      	str	r2, [sp, #36]	; 0x24
      if (_is_digit(*format)) {
 800b7c6:	785a      	ldrb	r2, [r3, #1]
  return (ch >= '0') && (ch <= '9');
 800b7c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b7cc:	b2db      	uxtb	r3, r3
      if (_is_digit(*format)) {
 800b7ce:	2b09      	cmp	r3, #9
 800b7d0:	d904      	bls.n	800b7dc <_vsnprintf+0x164>
      else if (*format == '*') {
 800b7d2:	2a2a      	cmp	r2, #42	; 0x2a
 800b7d4:	d007      	beq.n	800b7e6 <_vsnprintf+0x16e>
    precision = 0U;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	9307      	str	r3, [sp, #28]
 800b7da:	e77c      	b.n	800b6d6 <_vsnprintf+0x5e>
        precision = _atoi(&format);
 800b7dc:	a809      	add	r0, sp, #36	; 0x24
 800b7de:	f7ff fe1a 	bl	800b416 <_atoi>
 800b7e2:	9007      	str	r0, [sp, #28]
 800b7e4:	e777      	b.n	800b6d6 <_vsnprintf+0x5e>
        const int prec = (int)va_arg(va, int);
 800b7e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7e8:	1d1a      	adds	r2, r3, #4
 800b7ea:	9214      	str	r2, [sp, #80]	; 0x50
 800b7ec:	681b      	ldr	r3, [r3, #0]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800b7ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b7f2:	9307      	str	r3, [sp, #28]
        format++;
 800b7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7fa:	e76c      	b.n	800b6d6 <_vsnprintf+0x5e>
        flags |= FLAGS_LONG;
 800b7fc:	f447 7180 	orr.w	r1, r7, #256	; 0x100
        format++;
 800b800:	1c53      	adds	r3, r2, #1
 800b802:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == 'l') {
 800b804:	7852      	ldrb	r2, [r2, #1]
 800b806:	2a6c      	cmp	r2, #108	; 0x6c
 800b808:	d001      	beq.n	800b80e <_vsnprintf+0x196>
        flags |= FLAGS_LONG;
 800b80a:	460f      	mov	r7, r1
 800b80c:	e016      	b.n	800b83c <_vsnprintf+0x1c4>
          flags |= FLAGS_LONG_LONG;
 800b80e:	f447 7740 	orr.w	r7, r7, #768	; 0x300
          format++;
 800b812:	3301      	adds	r3, #1
 800b814:	9309      	str	r3, [sp, #36]	; 0x24
 800b816:	e011      	b.n	800b83c <_vsnprintf+0x1c4>
        flags |= FLAGS_SHORT;
 800b818:	f047 0180 	orr.w	r1, r7, #128	; 0x80
        format++;
 800b81c:	1c53      	adds	r3, r2, #1
 800b81e:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == 'h') {
 800b820:	7852      	ldrb	r2, [r2, #1]
 800b822:	2a68      	cmp	r2, #104	; 0x68
 800b824:	d001      	beq.n	800b82a <_vsnprintf+0x1b2>
        flags |= FLAGS_SHORT;
 800b826:	460f      	mov	r7, r1
 800b828:	e008      	b.n	800b83c <_vsnprintf+0x1c4>
          flags |= FLAGS_CHAR;
 800b82a:	f047 07c0 	orr.w	r7, r7, #192	; 0xc0
          format++;
 800b82e:	3301      	adds	r3, #1
 800b830:	9309      	str	r3, [sp, #36]	; 0x24
 800b832:	e003      	b.n	800b83c <_vsnprintf+0x1c4>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800b834:	f447 7700 	orr.w	r7, r7, #512	; 0x200
        format++;
 800b838:	3201      	adds	r2, #1
 800b83a:	9209      	str	r2, [sp, #36]	; 0x24
    switch (*format) {
 800b83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b83e:	7818      	ldrb	r0, [r3, #0]
 800b840:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 800b844:	2b53      	cmp	r3, #83	; 0x53
 800b846:	f200 81c8 	bhi.w	800bbda <_vsnprintf+0x562>
 800b84a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b84e:	01bb      	.short	0x01bb
 800b850:	01c601c6 	.word	0x01c601c6
 800b854:	01c601c6 	.word	0x01c601c6
 800b858:	01c601c6 	.word	0x01c601c6
 800b85c:	01c601c6 	.word	0x01c601c6
 800b860:	01c601c6 	.word	0x01c601c6
 800b864:	01c601c6 	.word	0x01c601c6
 800b868:	01c601c6 	.word	0x01c601c6
 800b86c:	01c601c6 	.word	0x01c601c6
 800b870:	01c601c6 	.word	0x01c601c6
 800b874:	01c601c6 	.word	0x01c601c6
 800b878:	01c601c6 	.word	0x01c601c6
 800b87c:	01c601c6 	.word	0x01c601c6
 800b880:	01c601c6 	.word	0x01c601c6
 800b884:	01c601c6 	.word	0x01c601c6
 800b888:	01c601c6 	.word	0x01c601c6
 800b88c:	01c601c6 	.word	0x01c601c6
 800b890:	01c601c6 	.word	0x01c601c6
 800b894:	01c601c6 	.word	0x01c601c6
 800b898:	01c601c6 	.word	0x01c601c6
 800b89c:	01c601c6 	.word	0x01c601c6
 800b8a0:	01c601c6 	.word	0x01c601c6
 800b8a4:	01c601c6 	.word	0x01c601c6
 800b8a8:	01c601c6 	.word	0x01c601c6
 800b8ac:	01c601c6 	.word	0x01c601c6
 800b8b0:	01c601c6 	.word	0x01c601c6
 800b8b4:	01c60059 	.word	0x01c60059
 800b8b8:	01c601c6 	.word	0x01c601c6
 800b8bc:	01c601c6 	.word	0x01c601c6
 800b8c0:	01c601c6 	.word	0x01c601c6
 800b8c4:	01c601c6 	.word	0x01c601c6
 800b8c8:	010c0059 	.word	0x010c0059
 800b8cc:	01c60059 	.word	0x01c60059
 800b8d0:	01c601c6 	.word	0x01c601c6
 800b8d4:	005901c6 	.word	0x005901c6
 800b8d8:	01c601c6 	.word	0x01c601c6
 800b8dc:	01c601c6 	.word	0x01c601c6
 800b8e0:	005901c6 	.word	0x005901c6
 800b8e4:	01c601a0 	.word	0x01c601a0
 800b8e8:	014001c6 	.word	0x014001c6
 800b8ec:	005901c6 	.word	0x005901c6
 800b8f0:	01c601c6 	.word	0x01c601c6
 800b8f4:	0059      	.short	0x0059
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800b8f6:	f447 7780 	orr.w	r7, r7, #256	; 0x100
        format++;
 800b8fa:	3201      	adds	r2, #1
 800b8fc:	9209      	str	r2, [sp, #36]	; 0x24
        break;
 800b8fe:	e79d      	b.n	800b83c <_vsnprintf+0x1c4>
        if (*format == 'x' || *format == 'X') {
 800b900:	2878      	cmp	r0, #120	; 0x78
 800b902:	d009      	beq.n	800b918 <_vsnprintf+0x2a0>
 800b904:	2858      	cmp	r0, #88	; 0x58
 800b906:	d037      	beq.n	800b978 <_vsnprintf+0x300>
        else if (*format == 'o') {
 800b908:	286f      	cmp	r0, #111	; 0x6f
 800b90a:	d037      	beq.n	800b97c <_vsnprintf+0x304>
        else if (*format == 'b') {
 800b90c:	2862      	cmp	r0, #98	; 0x62
 800b90e:	d037      	beq.n	800b980 <_vsnprintf+0x308>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800b910:	f027 0710 	bic.w	r7, r7, #16
          base = 10U;
 800b914:	230a      	movs	r3, #10
 800b916:	e000      	b.n	800b91a <_vsnprintf+0x2a2>
          base = 16U;
 800b918:	2310      	movs	r3, #16
        if (*format == 'X') {
 800b91a:	2858      	cmp	r0, #88	; 0x58
 800b91c:	d032      	beq.n	800b984 <_vsnprintf+0x30c>
        if ((*format != 'i') && (*format != 'd')) {
 800b91e:	2869      	cmp	r0, #105	; 0x69
 800b920:	d003      	beq.n	800b92a <_vsnprintf+0x2b2>
 800b922:	2864      	cmp	r0, #100	; 0x64
 800b924:	d001      	beq.n	800b92a <_vsnprintf+0x2b2>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800b926:	f027 070c 	bic.w	r7, r7, #12
        if (flags & FLAGS_PRECISION) {
 800b92a:	f417 6f80 	tst.w	r7, #1024	; 0x400
 800b92e:	d001      	beq.n	800b934 <_vsnprintf+0x2bc>
          flags &= ~FLAGS_ZEROPAD;
 800b930:	f027 0701 	bic.w	r7, r7, #1
        if ((*format == 'i') || (*format == 'd')) {
 800b934:	2869      	cmp	r0, #105	; 0x69
 800b936:	d028      	beq.n	800b98a <_vsnprintf+0x312>
 800b938:	2864      	cmp	r0, #100	; 0x64
 800b93a:	d026      	beq.n	800b98a <_vsnprintf+0x312>
          if (flags & FLAGS_LONG_LONG) {
 800b93c:	f417 7f00 	tst.w	r7, #512	; 0x200
 800b940:	d144      	bne.n	800b9cc <_vsnprintf+0x354>
          else if (flags & FLAGS_LONG) {
 800b942:	f417 7f80 	tst.w	r7, #256	; 0x100
 800b946:	d16c      	bne.n	800ba22 <_vsnprintf+0x3aa>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800b948:	f017 0f40 	tst.w	r7, #64	; 0x40
 800b94c:	d07e      	beq.n	800ba4c <_vsnprintf+0x3d4>
 800b94e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b950:	1d11      	adds	r1, r2, #4
 800b952:	9114      	str	r1, [sp, #80]	; 0x50
 800b954:	7812      	ldrb	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800b956:	9705      	str	r7, [sp, #20]
 800b958:	f8cd a010 	str.w	sl, [sp, #16]
 800b95c:	9907      	ldr	r1, [sp, #28]
 800b95e:	9103      	str	r1, [sp, #12]
 800b960:	9302      	str	r3, [sp, #8]
 800b962:	2300      	movs	r3, #0
 800b964:	9301      	str	r3, [sp, #4]
 800b966:	9200      	str	r2, [sp, #0]
 800b968:	462b      	mov	r3, r5
 800b96a:	4622      	mov	r2, r4
 800b96c:	9906      	ldr	r1, [sp, #24]
 800b96e:	4630      	mov	r0, r6
 800b970:	f7ff fe39 	bl	800b5e6 <_ntoa_long>
 800b974:	4604      	mov	r4, r0
 800b976:	e029      	b.n	800b9cc <_vsnprintf+0x354>
          base = 16U;
 800b978:	2310      	movs	r3, #16
 800b97a:	e7ce      	b.n	800b91a <_vsnprintf+0x2a2>
          base =  8U;
 800b97c:	2308      	movs	r3, #8
 800b97e:	e7cc      	b.n	800b91a <_vsnprintf+0x2a2>
          base =  2U;
 800b980:	2302      	movs	r3, #2
 800b982:	e7ca      	b.n	800b91a <_vsnprintf+0x2a2>
          flags |= FLAGS_UPPERCASE;
 800b984:	f047 0720 	orr.w	r7, r7, #32
 800b988:	e7c9      	b.n	800b91e <_vsnprintf+0x2a6>
          if (flags & FLAGS_LONG_LONG) {
 800b98a:	f417 7f00 	tst.w	r7, #512	; 0x200
 800b98e:	d11d      	bne.n	800b9cc <_vsnprintf+0x354>
          else if (flags & FLAGS_LONG) {
 800b990:	f417 7f80 	tst.w	r7, #256	; 0x100
 800b994:	d11e      	bne.n	800b9d4 <_vsnprintf+0x35c>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800b996:	f017 0f40 	tst.w	r7, #64	; 0x40
 800b99a:	d034      	beq.n	800ba06 <_vsnprintf+0x38e>
 800b99c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b99e:	1d11      	adds	r1, r2, #4
 800b9a0:	9114      	str	r1, [sp, #80]	; 0x50
 800b9a2:	7812      	ldrb	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800b9a4:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800b9a8:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800b9ac:	0fd2      	lsrs	r2, r2, #31
 800b9ae:	9705      	str	r7, [sp, #20]
 800b9b0:	f8cd a010 	str.w	sl, [sp, #16]
 800b9b4:	9807      	ldr	r0, [sp, #28]
 800b9b6:	9003      	str	r0, [sp, #12]
 800b9b8:	9302      	str	r3, [sp, #8]
 800b9ba:	9201      	str	r2, [sp, #4]
 800b9bc:	9100      	str	r1, [sp, #0]
 800b9be:	462b      	mov	r3, r5
 800b9c0:	4622      	mov	r2, r4
 800b9c2:	9906      	ldr	r1, [sp, #24]
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	f7ff fe0e 	bl	800b5e6 <_ntoa_long>
 800b9ca:	4604      	mov	r4, r0
        format++;
 800b9cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800b9d2:	e65c      	b.n	800b68e <_vsnprintf+0x16>
            const long value = va_arg(va, long);
 800b9d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b9d6:	1d11      	adds	r1, r2, #4
 800b9d8:	9114      	str	r1, [sp, #80]	; 0x50
 800b9da:	6812      	ldr	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800b9dc:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800b9e0:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800b9e4:	0fd2      	lsrs	r2, r2, #31
 800b9e6:	9705      	str	r7, [sp, #20]
 800b9e8:	f8cd a010 	str.w	sl, [sp, #16]
 800b9ec:	9807      	ldr	r0, [sp, #28]
 800b9ee:	9003      	str	r0, [sp, #12]
 800b9f0:	9302      	str	r3, [sp, #8]
 800b9f2:	9201      	str	r2, [sp, #4]
 800b9f4:	9100      	str	r1, [sp, #0]
 800b9f6:	462b      	mov	r3, r5
 800b9f8:	4622      	mov	r2, r4
 800b9fa:	9906      	ldr	r1, [sp, #24]
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	f7ff fdf2 	bl	800b5e6 <_ntoa_long>
 800ba02:	4604      	mov	r4, r0
 800ba04:	e7e2      	b.n	800b9cc <_vsnprintf+0x354>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800ba06:	f017 0f80 	tst.w	r7, #128	; 0x80
 800ba0a:	d005      	beq.n	800ba18 <_vsnprintf+0x3a0>
 800ba0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba0e:	1d11      	adds	r1, r2, #4
 800ba10:	9114      	str	r1, [sp, #80]	; 0x50
 800ba12:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ba16:	e7c5      	b.n	800b9a4 <_vsnprintf+0x32c>
 800ba18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba1a:	1d11      	adds	r1, r2, #4
 800ba1c:	9114      	str	r1, [sp, #80]	; 0x50
 800ba1e:	6812      	ldr	r2, [r2, #0]
 800ba20:	e7c0      	b.n	800b9a4 <_vsnprintf+0x32c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800ba22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba24:	1d11      	adds	r1, r2, #4
 800ba26:	9114      	str	r1, [sp, #80]	; 0x50
 800ba28:	6812      	ldr	r2, [r2, #0]
 800ba2a:	9705      	str	r7, [sp, #20]
 800ba2c:	f8cd a010 	str.w	sl, [sp, #16]
 800ba30:	9907      	ldr	r1, [sp, #28]
 800ba32:	9103      	str	r1, [sp, #12]
 800ba34:	9302      	str	r3, [sp, #8]
 800ba36:	2300      	movs	r3, #0
 800ba38:	9301      	str	r3, [sp, #4]
 800ba3a:	9200      	str	r2, [sp, #0]
 800ba3c:	462b      	mov	r3, r5
 800ba3e:	4622      	mov	r2, r4
 800ba40:	9906      	ldr	r1, [sp, #24]
 800ba42:	4630      	mov	r0, r6
 800ba44:	f7ff fdcf 	bl	800b5e6 <_ntoa_long>
 800ba48:	4604      	mov	r4, r0
 800ba4a:	e7bf      	b.n	800b9cc <_vsnprintf+0x354>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800ba4c:	f017 0f80 	tst.w	r7, #128	; 0x80
 800ba50:	d004      	beq.n	800ba5c <_vsnprintf+0x3e4>
 800ba52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba54:	1d11      	adds	r1, r2, #4
 800ba56:	9114      	str	r1, [sp, #80]	; 0x50
 800ba58:	8812      	ldrh	r2, [r2, #0]
 800ba5a:	e77c      	b.n	800b956 <_vsnprintf+0x2de>
 800ba5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba5e:	1d11      	adds	r1, r2, #4
 800ba60:	9114      	str	r1, [sp, #80]	; 0x50
 800ba62:	6812      	ldr	r2, [r2, #0]
 800ba64:	e777      	b.n	800b956 <_vsnprintf+0x2de>
        if (!(flags & FLAGS_LEFT)) {
 800ba66:	f017 0702 	ands.w	r7, r7, #2
 800ba6a:	d01e      	beq.n	800baaa <_vsnprintf+0x432>
        unsigned int l = 1U;
 800ba6c:	f04f 0801 	mov.w	r8, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800ba70:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ba72:	1d03      	adds	r3, r0, #4
 800ba74:	9314      	str	r3, [sp, #80]	; 0x50
 800ba76:	f104 0901 	add.w	r9, r4, #1
 800ba7a:	462b      	mov	r3, r5
 800ba7c:	4622      	mov	r2, r4
 800ba7e:	9906      	ldr	r1, [sp, #24]
 800ba80:	7800      	ldrb	r0, [r0, #0]
 800ba82:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
 800ba84:	b9a7      	cbnz	r7, 800bab0 <_vsnprintf+0x438>
        format++;
 800ba86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba88:	3301      	adds	r3, #1
 800ba8a:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800ba8c:	464c      	mov	r4, r9
 800ba8e:	e5fe      	b.n	800b68e <_vsnprintf+0x16>
            out(' ', buffer, idx++, maxlen);
 800ba90:	1c54      	adds	r4, r2, #1
 800ba92:	462b      	mov	r3, r5
 800ba94:	9906      	ldr	r1, [sp, #24]
 800ba96:	2020      	movs	r0, #32
 800ba98:	47b0      	blx	r6
          while (l++ < width) {
 800ba9a:	4643      	mov	r3, r8
            out(' ', buffer, idx++, maxlen);
 800ba9c:	4622      	mov	r2, r4
          while (l++ < width) {
 800ba9e:	f103 0801 	add.w	r8, r3, #1
 800baa2:	459a      	cmp	sl, r3
 800baa4:	d8f4      	bhi.n	800ba90 <_vsnprintf+0x418>
 800baa6:	4614      	mov	r4, r2
 800baa8:	e7e2      	b.n	800ba70 <_vsnprintf+0x3f8>
        unsigned int l = 1U;
 800baaa:	2301      	movs	r3, #1
 800baac:	4622      	mov	r2, r4
 800baae:	e7f6      	b.n	800ba9e <_vsnprintf+0x426>
 800bab0:	464a      	mov	r2, r9
 800bab2:	e006      	b.n	800bac2 <_vsnprintf+0x44a>
            out(' ', buffer, idx++, maxlen);
 800bab4:	1c57      	adds	r7, r2, #1
 800bab6:	462b      	mov	r3, r5
 800bab8:	9906      	ldr	r1, [sp, #24]
 800baba:	2020      	movs	r0, #32
 800babc:	47b0      	blx	r6
          while (l++ < width) {
 800babe:	46a0      	mov	r8, r4
            out(' ', buffer, idx++, maxlen);
 800bac0:	463a      	mov	r2, r7
          while (l++ < width) {
 800bac2:	f108 0401 	add.w	r4, r8, #1
 800bac6:	45c2      	cmp	sl, r8
 800bac8:	d8f4      	bhi.n	800bab4 <_vsnprintf+0x43c>
 800baca:	4691      	mov	r9, r2
 800bacc:	e7db      	b.n	800ba86 <_vsnprintf+0x40e>
        const char* p = va_arg(va, char*);
 800bace:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bad0:	1d1a      	adds	r2, r3, #4
 800bad2:	9214      	str	r2, [sp, #80]	; 0x50
 800bad4:	f8d3 8000 	ldr.w	r8, [r3]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800bad8:	9b07      	ldr	r3, [sp, #28]
 800bada:	b9f3      	cbnz	r3, 800bb1a <_vsnprintf+0x4a2>
 800badc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bae0:	46c1      	mov	r9, r8
 800bae2:	e002      	b.n	800baea <_vsnprintf+0x472>
  for (s = str; *s && maxsize--; ++s);
 800bae4:	f109 0901 	add.w	r9, r9, #1
 800bae8:	4613      	mov	r3, r2
 800baea:	f899 2000 	ldrb.w	r2, [r9]
 800baee:	b112      	cbz	r2, 800baf6 <_vsnprintf+0x47e>
 800baf0:	1e5a      	subs	r2, r3, #1
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1f6      	bne.n	800bae4 <_vsnprintf+0x46c>
  return (unsigned int)(s - str);
 800baf6:	eba9 0908 	sub.w	r9, r9, r8
        if (flags & FLAGS_PRECISION) {
 800bafa:	f417 6b80 	ands.w	fp, r7, #1024	; 0x400
 800bafe:	d003      	beq.n	800bb08 <_vsnprintf+0x490>
          l = (l < precision ? l : precision);
 800bb00:	9b07      	ldr	r3, [sp, #28]
 800bb02:	4599      	cmp	r9, r3
 800bb04:	bf28      	it	cs
 800bb06:	4699      	movcs	r9, r3
        if (!(flags & FLAGS_LEFT)) {
 800bb08:	f017 0302 	ands.w	r3, r7, #2
 800bb0c:	9308      	str	r3, [sp, #32]
 800bb0e:	d006      	beq.n	800bb1e <_vsnprintf+0x4a6>
 800bb10:	4622      	mov	r2, r4
 800bb12:	465c      	mov	r4, fp
 800bb14:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800bb18:	e01b      	b.n	800bb52 <_vsnprintf+0x4da>
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800bb1a:	9b07      	ldr	r3, [sp, #28]
 800bb1c:	e7e0      	b.n	800bae0 <_vsnprintf+0x468>
 800bb1e:	4622      	mov	r2, r4
 800bb20:	e006      	b.n	800bb30 <_vsnprintf+0x4b8>
            out(' ', buffer, idx++, maxlen);
 800bb22:	1c54      	adds	r4, r2, #1
 800bb24:	462b      	mov	r3, r5
 800bb26:	9906      	ldr	r1, [sp, #24]
 800bb28:	2020      	movs	r0, #32
 800bb2a:	47b0      	blx	r6
          while (l++ < width) {
 800bb2c:	46b9      	mov	r9, r7
            out(' ', buffer, idx++, maxlen);
 800bb2e:	4622      	mov	r2, r4
          while (l++ < width) {
 800bb30:	f109 0701 	add.w	r7, r9, #1
 800bb34:	45ca      	cmp	sl, r9
 800bb36:	d8f4      	bhi.n	800bb22 <_vsnprintf+0x4aa>
 800bb38:	46b9      	mov	r9, r7
 800bb3a:	465c      	mov	r4, fp
 800bb3c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800bb40:	e007      	b.n	800bb52 <_vsnprintf+0x4da>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800bb42:	469b      	mov	fp, r3
          out(*(p++), buffer, idx++, maxlen);
 800bb44:	f108 0801 	add.w	r8, r8, #1
 800bb48:	1c57      	adds	r7, r2, #1
 800bb4a:	462b      	mov	r3, r5
 800bb4c:	9906      	ldr	r1, [sp, #24]
 800bb4e:	47b0      	blx	r6
 800bb50:	463a      	mov	r2, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800bb52:	f898 0000 	ldrb.w	r0, [r8]
 800bb56:	b130      	cbz	r0, 800bb66 <_vsnprintf+0x4ee>
 800bb58:	2c00      	cmp	r4, #0
 800bb5a:	d0f3      	beq.n	800bb44 <_vsnprintf+0x4cc>
 800bb5c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800bb60:	f1bb 0f00 	cmp.w	fp, #0
 800bb64:	d1ed      	bne.n	800bb42 <_vsnprintf+0x4ca>
 800bb66:	4614      	mov	r4, r2
        if (flags & FLAGS_LEFT) {
 800bb68:	9b08      	ldr	r3, [sp, #32]
 800bb6a:	b953      	cbnz	r3, 800bb82 <_vsnprintf+0x50a>
        format++;
 800bb6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb6e:	3301      	adds	r3, #1
 800bb70:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800bb72:	e58c      	b.n	800b68e <_vsnprintf+0x16>
            out(' ', buffer, idx++, maxlen);
 800bb74:	1c57      	adds	r7, r2, #1
 800bb76:	462b      	mov	r3, r5
 800bb78:	9906      	ldr	r1, [sp, #24]
 800bb7a:	2020      	movs	r0, #32
 800bb7c:	47b0      	blx	r6
          while (l++ < width) {
 800bb7e:	46a1      	mov	r9, r4
            out(' ', buffer, idx++, maxlen);
 800bb80:	463a      	mov	r2, r7
          while (l++ < width) {
 800bb82:	f109 0401 	add.w	r4, r9, #1
 800bb86:	45ca      	cmp	sl, r9
 800bb88:	d8f4      	bhi.n	800bb74 <_vsnprintf+0x4fc>
 800bb8a:	4614      	mov	r4, r2
 800bb8c:	e7ee      	b.n	800bb6c <_vsnprintf+0x4f4>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800bb8e:	f047 0721 	orr.w	r7, r7, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800bb92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb94:	1d1a      	adds	r2, r3, #4
 800bb96:	9214      	str	r2, [sp, #80]	; 0x50
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	9705      	str	r7, [sp, #20]
 800bb9c:	2208      	movs	r2, #8
 800bb9e:	9204      	str	r2, [sp, #16]
 800bba0:	9a07      	ldr	r2, [sp, #28]
 800bba2:	9203      	str	r2, [sp, #12]
 800bba4:	2210      	movs	r2, #16
 800bba6:	9202      	str	r2, [sp, #8]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	9201      	str	r2, [sp, #4]
 800bbac:	9300      	str	r3, [sp, #0]
 800bbae:	462b      	mov	r3, r5
 800bbb0:	4622      	mov	r2, r4
 800bbb2:	9906      	ldr	r1, [sp, #24]
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	f7ff fd16 	bl	800b5e6 <_ntoa_long>
 800bbba:	4604      	mov	r4, r0
        format++;
 800bbbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800bbc2:	e564      	b.n	800b68e <_vsnprintf+0x16>
        out('%', buffer, idx++, maxlen);
 800bbc4:	1c67      	adds	r7, r4, #1
 800bbc6:	462b      	mov	r3, r5
 800bbc8:	4622      	mov	r2, r4
 800bbca:	9906      	ldr	r1, [sp, #24]
 800bbcc:	2025      	movs	r0, #37	; 0x25
 800bbce:	47b0      	blx	r6
        format++;
 800bbd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	9309      	str	r3, [sp, #36]	; 0x24
        out('%', buffer, idx++, maxlen);
 800bbd6:	463c      	mov	r4, r7
        break;
 800bbd8:	e559      	b.n	800b68e <_vsnprintf+0x16>

      default :
        out(*format, buffer, idx++, maxlen);
 800bbda:	1c67      	adds	r7, r4, #1
 800bbdc:	462b      	mov	r3, r5
 800bbde:	4622      	mov	r2, r4
 800bbe0:	9906      	ldr	r1, [sp, #24]
 800bbe2:	47b0      	blx	r6
        format++;
 800bbe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	9309      	str	r3, [sp, #36]	; 0x24
        out(*format, buffer, idx++, maxlen);
 800bbea:	463c      	mov	r4, r7
        break;
 800bbec:	e54f      	b.n	800b68e <_vsnprintf+0x16>
    out = _out_null;
 800bbee:	4e07      	ldr	r6, [pc, #28]	; (800bc0c <_vsnprintf+0x594>)
 800bbf0:	e54c      	b.n	800b68c <_vsnprintf+0x14>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800bbf2:	42ac      	cmp	r4, r5
 800bbf4:	d308      	bcc.n	800bc08 <_vsnprintf+0x590>
 800bbf6:	1e6a      	subs	r2, r5, #1
 800bbf8:	462b      	mov	r3, r5
 800bbfa:	9906      	ldr	r1, [sp, #24]
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	47b0      	blx	r6

  // return written chars without terminating \0
  return (int)idx;
}
 800bc00:	4620      	mov	r0, r4
 800bc02:	b00b      	add	sp, #44	; 0x2c
 800bc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800bc08:	4622      	mov	r2, r4
 800bc0a:	e7f5      	b.n	800bbf8 <_vsnprintf+0x580>
 800bc0c:	0800b415 	.word	0x0800b415

0800bc10 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 800bc10:	b40e      	push	{r1, r2, r3}
 800bc12:	b500      	push	{lr}
 800bc14:	b084      	sub	sp, #16
 800bc16:	aa05      	add	r2, sp, #20
 800bc18:	f852 3b04 	ldr.w	r3, [r2], #4
  va_list va;
  va_start(va, format);
 800bc1c:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800bc1e:	9200      	str	r2, [sp, #0]
 800bc20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc24:	4601      	mov	r1, r0
 800bc26:	4804      	ldr	r0, [pc, #16]	; (800bc38 <sprintf_+0x28>)
 800bc28:	f7ff fd26 	bl	800b678 <_vsnprintf>
  va_end(va);
  return ret;
}
 800bc2c:	b004      	add	sp, #16
 800bc2e:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc32:	b003      	add	sp, #12
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	0800b40d 	.word	0x0800b40d

0800bc3c <__errno>:
 800bc3c:	4b01      	ldr	r3, [pc, #4]	; (800bc44 <__errno+0x8>)
 800bc3e:	6818      	ldr	r0, [r3, #0]
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	2000006c 	.word	0x2000006c

0800bc48 <__libc_init_array>:
 800bc48:	b570      	push	{r4, r5, r6, lr}
 800bc4a:	4e0d      	ldr	r6, [pc, #52]	; (800bc80 <__libc_init_array+0x38>)
 800bc4c:	4c0d      	ldr	r4, [pc, #52]	; (800bc84 <__libc_init_array+0x3c>)
 800bc4e:	1ba4      	subs	r4, r4, r6
 800bc50:	10a4      	asrs	r4, r4, #2
 800bc52:	2500      	movs	r5, #0
 800bc54:	42a5      	cmp	r5, r4
 800bc56:	d109      	bne.n	800bc6c <__libc_init_array+0x24>
 800bc58:	4e0b      	ldr	r6, [pc, #44]	; (800bc88 <__libc_init_array+0x40>)
 800bc5a:	4c0c      	ldr	r4, [pc, #48]	; (800bc8c <__libc_init_array+0x44>)
 800bc5c:	f000 fc58 	bl	800c510 <_init>
 800bc60:	1ba4      	subs	r4, r4, r6
 800bc62:	10a4      	asrs	r4, r4, #2
 800bc64:	2500      	movs	r5, #0
 800bc66:	42a5      	cmp	r5, r4
 800bc68:	d105      	bne.n	800bc76 <__libc_init_array+0x2e>
 800bc6a:	bd70      	pop	{r4, r5, r6, pc}
 800bc6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc70:	4798      	blx	r3
 800bc72:	3501      	adds	r5, #1
 800bc74:	e7ee      	b.n	800bc54 <__libc_init_array+0xc>
 800bc76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc7a:	4798      	blx	r3
 800bc7c:	3501      	adds	r5, #1
 800bc7e:	e7f2      	b.n	800bc66 <__libc_init_array+0x1e>
 800bc80:	0800d0c8 	.word	0x0800d0c8
 800bc84:	0800d0c8 	.word	0x0800d0c8
 800bc88:	0800d0c8 	.word	0x0800d0c8
 800bc8c:	0800d0cc 	.word	0x0800d0cc

0800bc90 <memcpy>:
 800bc90:	b510      	push	{r4, lr}
 800bc92:	1e43      	subs	r3, r0, #1
 800bc94:	440a      	add	r2, r1
 800bc96:	4291      	cmp	r1, r2
 800bc98:	d100      	bne.n	800bc9c <memcpy+0xc>
 800bc9a:	bd10      	pop	{r4, pc}
 800bc9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bca0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bca4:	e7f7      	b.n	800bc96 <memcpy+0x6>

0800bca6 <memset>:
 800bca6:	4402      	add	r2, r0
 800bca8:	4603      	mov	r3, r0
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d100      	bne.n	800bcb0 <memset+0xa>
 800bcae:	4770      	bx	lr
 800bcb0:	f803 1b01 	strb.w	r1, [r3], #1
 800bcb4:	e7f9      	b.n	800bcaa <memset+0x4>
	...

0800bcb8 <siprintf>:
 800bcb8:	b40e      	push	{r1, r2, r3}
 800bcba:	b500      	push	{lr}
 800bcbc:	b09c      	sub	sp, #112	; 0x70
 800bcbe:	ab1d      	add	r3, sp, #116	; 0x74
 800bcc0:	9002      	str	r0, [sp, #8]
 800bcc2:	9006      	str	r0, [sp, #24]
 800bcc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bcc8:	4809      	ldr	r0, [pc, #36]	; (800bcf0 <siprintf+0x38>)
 800bcca:	9107      	str	r1, [sp, #28]
 800bccc:	9104      	str	r1, [sp, #16]
 800bcce:	4909      	ldr	r1, [pc, #36]	; (800bcf4 <siprintf+0x3c>)
 800bcd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcd4:	9105      	str	r1, [sp, #20]
 800bcd6:	6800      	ldr	r0, [r0, #0]
 800bcd8:	9301      	str	r3, [sp, #4]
 800bcda:	a902      	add	r1, sp, #8
 800bcdc:	f000 f896 	bl	800be0c <_svfiprintf_r>
 800bce0:	9b02      	ldr	r3, [sp, #8]
 800bce2:	2200      	movs	r2, #0
 800bce4:	701a      	strb	r2, [r3, #0]
 800bce6:	b01c      	add	sp, #112	; 0x70
 800bce8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcec:	b003      	add	sp, #12
 800bcee:	4770      	bx	lr
 800bcf0:	2000006c 	.word	0x2000006c
 800bcf4:	ffff0208 	.word	0xffff0208

0800bcf8 <strcpy>:
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcfe:	f803 2b01 	strb.w	r2, [r3], #1
 800bd02:	2a00      	cmp	r2, #0
 800bd04:	d1f9      	bne.n	800bcfa <strcpy+0x2>
 800bd06:	4770      	bx	lr

0800bd08 <strncmp>:
 800bd08:	b510      	push	{r4, lr}
 800bd0a:	b16a      	cbz	r2, 800bd28 <strncmp+0x20>
 800bd0c:	3901      	subs	r1, #1
 800bd0e:	1884      	adds	r4, r0, r2
 800bd10:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bd14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d103      	bne.n	800bd24 <strncmp+0x1c>
 800bd1c:	42a0      	cmp	r0, r4
 800bd1e:	d001      	beq.n	800bd24 <strncmp+0x1c>
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1f5      	bne.n	800bd10 <strncmp+0x8>
 800bd24:	1a98      	subs	r0, r3, r2
 800bd26:	bd10      	pop	{r4, pc}
 800bd28:	4610      	mov	r0, r2
 800bd2a:	e7fc      	b.n	800bd26 <strncmp+0x1e>

0800bd2c <strncpy>:
 800bd2c:	b570      	push	{r4, r5, r6, lr}
 800bd2e:	3901      	subs	r1, #1
 800bd30:	4604      	mov	r4, r0
 800bd32:	b902      	cbnz	r2, 800bd36 <strncpy+0xa>
 800bd34:	bd70      	pop	{r4, r5, r6, pc}
 800bd36:	4623      	mov	r3, r4
 800bd38:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800bd3c:	f803 5b01 	strb.w	r5, [r3], #1
 800bd40:	1e56      	subs	r6, r2, #1
 800bd42:	b92d      	cbnz	r5, 800bd50 <strncpy+0x24>
 800bd44:	4414      	add	r4, r2
 800bd46:	42a3      	cmp	r3, r4
 800bd48:	d0f4      	beq.n	800bd34 <strncpy+0x8>
 800bd4a:	f803 5b01 	strb.w	r5, [r3], #1
 800bd4e:	e7fa      	b.n	800bd46 <strncpy+0x1a>
 800bd50:	461c      	mov	r4, r3
 800bd52:	4632      	mov	r2, r6
 800bd54:	e7ed      	b.n	800bd32 <strncpy+0x6>

0800bd56 <__ssputs_r>:
 800bd56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd5a:	688e      	ldr	r6, [r1, #8]
 800bd5c:	429e      	cmp	r6, r3
 800bd5e:	4682      	mov	sl, r0
 800bd60:	460c      	mov	r4, r1
 800bd62:	4690      	mov	r8, r2
 800bd64:	4699      	mov	r9, r3
 800bd66:	d837      	bhi.n	800bdd8 <__ssputs_r+0x82>
 800bd68:	898a      	ldrh	r2, [r1, #12]
 800bd6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd6e:	d031      	beq.n	800bdd4 <__ssputs_r+0x7e>
 800bd70:	6825      	ldr	r5, [r4, #0]
 800bd72:	6909      	ldr	r1, [r1, #16]
 800bd74:	1a6f      	subs	r7, r5, r1
 800bd76:	6965      	ldr	r5, [r4, #20]
 800bd78:	2302      	movs	r3, #2
 800bd7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd7e:	fb95 f5f3 	sdiv	r5, r5, r3
 800bd82:	f109 0301 	add.w	r3, r9, #1
 800bd86:	443b      	add	r3, r7
 800bd88:	429d      	cmp	r5, r3
 800bd8a:	bf38      	it	cc
 800bd8c:	461d      	movcc	r5, r3
 800bd8e:	0553      	lsls	r3, r2, #21
 800bd90:	d530      	bpl.n	800bdf4 <__ssputs_r+0x9e>
 800bd92:	4629      	mov	r1, r5
 800bd94:	f000 fb22 	bl	800c3dc <_malloc_r>
 800bd98:	4606      	mov	r6, r0
 800bd9a:	b950      	cbnz	r0, 800bdb2 <__ssputs_r+0x5c>
 800bd9c:	230c      	movs	r3, #12
 800bd9e:	f8ca 3000 	str.w	r3, [sl]
 800bda2:	89a3      	ldrh	r3, [r4, #12]
 800bda4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bda8:	81a3      	strh	r3, [r4, #12]
 800bdaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdb2:	463a      	mov	r2, r7
 800bdb4:	6921      	ldr	r1, [r4, #16]
 800bdb6:	f7ff ff6b 	bl	800bc90 <memcpy>
 800bdba:	89a3      	ldrh	r3, [r4, #12]
 800bdbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bdc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdc4:	81a3      	strh	r3, [r4, #12]
 800bdc6:	6126      	str	r6, [r4, #16]
 800bdc8:	6165      	str	r5, [r4, #20]
 800bdca:	443e      	add	r6, r7
 800bdcc:	1bed      	subs	r5, r5, r7
 800bdce:	6026      	str	r6, [r4, #0]
 800bdd0:	60a5      	str	r5, [r4, #8]
 800bdd2:	464e      	mov	r6, r9
 800bdd4:	454e      	cmp	r6, r9
 800bdd6:	d900      	bls.n	800bdda <__ssputs_r+0x84>
 800bdd8:	464e      	mov	r6, r9
 800bdda:	4632      	mov	r2, r6
 800bddc:	4641      	mov	r1, r8
 800bdde:	6820      	ldr	r0, [r4, #0]
 800bde0:	f000 fa94 	bl	800c30c <memmove>
 800bde4:	68a3      	ldr	r3, [r4, #8]
 800bde6:	1b9b      	subs	r3, r3, r6
 800bde8:	60a3      	str	r3, [r4, #8]
 800bdea:	6823      	ldr	r3, [r4, #0]
 800bdec:	441e      	add	r6, r3
 800bdee:	6026      	str	r6, [r4, #0]
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	e7dc      	b.n	800bdae <__ssputs_r+0x58>
 800bdf4:	462a      	mov	r2, r5
 800bdf6:	f000 fb4b 	bl	800c490 <_realloc_r>
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d1e2      	bne.n	800bdc6 <__ssputs_r+0x70>
 800be00:	6921      	ldr	r1, [r4, #16]
 800be02:	4650      	mov	r0, sl
 800be04:	f000 fa9c 	bl	800c340 <_free_r>
 800be08:	e7c8      	b.n	800bd9c <__ssputs_r+0x46>
	...

0800be0c <_svfiprintf_r>:
 800be0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be10:	461d      	mov	r5, r3
 800be12:	898b      	ldrh	r3, [r1, #12]
 800be14:	061f      	lsls	r7, r3, #24
 800be16:	b09d      	sub	sp, #116	; 0x74
 800be18:	4680      	mov	r8, r0
 800be1a:	460c      	mov	r4, r1
 800be1c:	4616      	mov	r6, r2
 800be1e:	d50f      	bpl.n	800be40 <_svfiprintf_r+0x34>
 800be20:	690b      	ldr	r3, [r1, #16]
 800be22:	b96b      	cbnz	r3, 800be40 <_svfiprintf_r+0x34>
 800be24:	2140      	movs	r1, #64	; 0x40
 800be26:	f000 fad9 	bl	800c3dc <_malloc_r>
 800be2a:	6020      	str	r0, [r4, #0]
 800be2c:	6120      	str	r0, [r4, #16]
 800be2e:	b928      	cbnz	r0, 800be3c <_svfiprintf_r+0x30>
 800be30:	230c      	movs	r3, #12
 800be32:	f8c8 3000 	str.w	r3, [r8]
 800be36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be3a:	e0c8      	b.n	800bfce <_svfiprintf_r+0x1c2>
 800be3c:	2340      	movs	r3, #64	; 0x40
 800be3e:	6163      	str	r3, [r4, #20]
 800be40:	2300      	movs	r3, #0
 800be42:	9309      	str	r3, [sp, #36]	; 0x24
 800be44:	2320      	movs	r3, #32
 800be46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be4a:	2330      	movs	r3, #48	; 0x30
 800be4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be50:	9503      	str	r5, [sp, #12]
 800be52:	f04f 0b01 	mov.w	fp, #1
 800be56:	4637      	mov	r7, r6
 800be58:	463d      	mov	r5, r7
 800be5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800be5e:	b10b      	cbz	r3, 800be64 <_svfiprintf_r+0x58>
 800be60:	2b25      	cmp	r3, #37	; 0x25
 800be62:	d13e      	bne.n	800bee2 <_svfiprintf_r+0xd6>
 800be64:	ebb7 0a06 	subs.w	sl, r7, r6
 800be68:	d00b      	beq.n	800be82 <_svfiprintf_r+0x76>
 800be6a:	4653      	mov	r3, sl
 800be6c:	4632      	mov	r2, r6
 800be6e:	4621      	mov	r1, r4
 800be70:	4640      	mov	r0, r8
 800be72:	f7ff ff70 	bl	800bd56 <__ssputs_r>
 800be76:	3001      	adds	r0, #1
 800be78:	f000 80a4 	beq.w	800bfc4 <_svfiprintf_r+0x1b8>
 800be7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be7e:	4453      	add	r3, sl
 800be80:	9309      	str	r3, [sp, #36]	; 0x24
 800be82:	783b      	ldrb	r3, [r7, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	f000 809d 	beq.w	800bfc4 <_svfiprintf_r+0x1b8>
 800be8a:	2300      	movs	r3, #0
 800be8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be94:	9304      	str	r3, [sp, #16]
 800be96:	9307      	str	r3, [sp, #28]
 800be98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be9c:	931a      	str	r3, [sp, #104]	; 0x68
 800be9e:	462f      	mov	r7, r5
 800bea0:	2205      	movs	r2, #5
 800bea2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bea6:	4850      	ldr	r0, [pc, #320]	; (800bfe8 <_svfiprintf_r+0x1dc>)
 800bea8:	f7f4 f9a2 	bl	80001f0 <memchr>
 800beac:	9b04      	ldr	r3, [sp, #16]
 800beae:	b9d0      	cbnz	r0, 800bee6 <_svfiprintf_r+0xda>
 800beb0:	06d9      	lsls	r1, r3, #27
 800beb2:	bf44      	itt	mi
 800beb4:	2220      	movmi	r2, #32
 800beb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800beba:	071a      	lsls	r2, r3, #28
 800bebc:	bf44      	itt	mi
 800bebe:	222b      	movmi	r2, #43	; 0x2b
 800bec0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bec4:	782a      	ldrb	r2, [r5, #0]
 800bec6:	2a2a      	cmp	r2, #42	; 0x2a
 800bec8:	d015      	beq.n	800bef6 <_svfiprintf_r+0xea>
 800beca:	9a07      	ldr	r2, [sp, #28]
 800becc:	462f      	mov	r7, r5
 800bece:	2000      	movs	r0, #0
 800bed0:	250a      	movs	r5, #10
 800bed2:	4639      	mov	r1, r7
 800bed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bed8:	3b30      	subs	r3, #48	; 0x30
 800beda:	2b09      	cmp	r3, #9
 800bedc:	d94d      	bls.n	800bf7a <_svfiprintf_r+0x16e>
 800bede:	b1b8      	cbz	r0, 800bf10 <_svfiprintf_r+0x104>
 800bee0:	e00f      	b.n	800bf02 <_svfiprintf_r+0xf6>
 800bee2:	462f      	mov	r7, r5
 800bee4:	e7b8      	b.n	800be58 <_svfiprintf_r+0x4c>
 800bee6:	4a40      	ldr	r2, [pc, #256]	; (800bfe8 <_svfiprintf_r+0x1dc>)
 800bee8:	1a80      	subs	r0, r0, r2
 800beea:	fa0b f000 	lsl.w	r0, fp, r0
 800beee:	4318      	orrs	r0, r3
 800bef0:	9004      	str	r0, [sp, #16]
 800bef2:	463d      	mov	r5, r7
 800bef4:	e7d3      	b.n	800be9e <_svfiprintf_r+0x92>
 800bef6:	9a03      	ldr	r2, [sp, #12]
 800bef8:	1d11      	adds	r1, r2, #4
 800befa:	6812      	ldr	r2, [r2, #0]
 800befc:	9103      	str	r1, [sp, #12]
 800befe:	2a00      	cmp	r2, #0
 800bf00:	db01      	blt.n	800bf06 <_svfiprintf_r+0xfa>
 800bf02:	9207      	str	r2, [sp, #28]
 800bf04:	e004      	b.n	800bf10 <_svfiprintf_r+0x104>
 800bf06:	4252      	negs	r2, r2
 800bf08:	f043 0302 	orr.w	r3, r3, #2
 800bf0c:	9207      	str	r2, [sp, #28]
 800bf0e:	9304      	str	r3, [sp, #16]
 800bf10:	783b      	ldrb	r3, [r7, #0]
 800bf12:	2b2e      	cmp	r3, #46	; 0x2e
 800bf14:	d10c      	bne.n	800bf30 <_svfiprintf_r+0x124>
 800bf16:	787b      	ldrb	r3, [r7, #1]
 800bf18:	2b2a      	cmp	r3, #42	; 0x2a
 800bf1a:	d133      	bne.n	800bf84 <_svfiprintf_r+0x178>
 800bf1c:	9b03      	ldr	r3, [sp, #12]
 800bf1e:	1d1a      	adds	r2, r3, #4
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	9203      	str	r2, [sp, #12]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	bfb8      	it	lt
 800bf28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bf2c:	3702      	adds	r7, #2
 800bf2e:	9305      	str	r3, [sp, #20]
 800bf30:	4d2e      	ldr	r5, [pc, #184]	; (800bfec <_svfiprintf_r+0x1e0>)
 800bf32:	7839      	ldrb	r1, [r7, #0]
 800bf34:	2203      	movs	r2, #3
 800bf36:	4628      	mov	r0, r5
 800bf38:	f7f4 f95a 	bl	80001f0 <memchr>
 800bf3c:	b138      	cbz	r0, 800bf4e <_svfiprintf_r+0x142>
 800bf3e:	2340      	movs	r3, #64	; 0x40
 800bf40:	1b40      	subs	r0, r0, r5
 800bf42:	fa03 f000 	lsl.w	r0, r3, r0
 800bf46:	9b04      	ldr	r3, [sp, #16]
 800bf48:	4303      	orrs	r3, r0
 800bf4a:	3701      	adds	r7, #1
 800bf4c:	9304      	str	r3, [sp, #16]
 800bf4e:	7839      	ldrb	r1, [r7, #0]
 800bf50:	4827      	ldr	r0, [pc, #156]	; (800bff0 <_svfiprintf_r+0x1e4>)
 800bf52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf56:	2206      	movs	r2, #6
 800bf58:	1c7e      	adds	r6, r7, #1
 800bf5a:	f7f4 f949 	bl	80001f0 <memchr>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	d038      	beq.n	800bfd4 <_svfiprintf_r+0x1c8>
 800bf62:	4b24      	ldr	r3, [pc, #144]	; (800bff4 <_svfiprintf_r+0x1e8>)
 800bf64:	bb13      	cbnz	r3, 800bfac <_svfiprintf_r+0x1a0>
 800bf66:	9b03      	ldr	r3, [sp, #12]
 800bf68:	3307      	adds	r3, #7
 800bf6a:	f023 0307 	bic.w	r3, r3, #7
 800bf6e:	3308      	adds	r3, #8
 800bf70:	9303      	str	r3, [sp, #12]
 800bf72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf74:	444b      	add	r3, r9
 800bf76:	9309      	str	r3, [sp, #36]	; 0x24
 800bf78:	e76d      	b.n	800be56 <_svfiprintf_r+0x4a>
 800bf7a:	fb05 3202 	mla	r2, r5, r2, r3
 800bf7e:	2001      	movs	r0, #1
 800bf80:	460f      	mov	r7, r1
 800bf82:	e7a6      	b.n	800bed2 <_svfiprintf_r+0xc6>
 800bf84:	2300      	movs	r3, #0
 800bf86:	3701      	adds	r7, #1
 800bf88:	9305      	str	r3, [sp, #20]
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	250a      	movs	r5, #10
 800bf8e:	4638      	mov	r0, r7
 800bf90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf94:	3a30      	subs	r2, #48	; 0x30
 800bf96:	2a09      	cmp	r2, #9
 800bf98:	d903      	bls.n	800bfa2 <_svfiprintf_r+0x196>
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d0c8      	beq.n	800bf30 <_svfiprintf_r+0x124>
 800bf9e:	9105      	str	r1, [sp, #20]
 800bfa0:	e7c6      	b.n	800bf30 <_svfiprintf_r+0x124>
 800bfa2:	fb05 2101 	mla	r1, r5, r1, r2
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	4607      	mov	r7, r0
 800bfaa:	e7f0      	b.n	800bf8e <_svfiprintf_r+0x182>
 800bfac:	ab03      	add	r3, sp, #12
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	4622      	mov	r2, r4
 800bfb2:	4b11      	ldr	r3, [pc, #68]	; (800bff8 <_svfiprintf_r+0x1ec>)
 800bfb4:	a904      	add	r1, sp, #16
 800bfb6:	4640      	mov	r0, r8
 800bfb8:	f3af 8000 	nop.w
 800bfbc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800bfc0:	4681      	mov	r9, r0
 800bfc2:	d1d6      	bne.n	800bf72 <_svfiprintf_r+0x166>
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	065b      	lsls	r3, r3, #25
 800bfc8:	f53f af35 	bmi.w	800be36 <_svfiprintf_r+0x2a>
 800bfcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfce:	b01d      	add	sp, #116	; 0x74
 800bfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd4:	ab03      	add	r3, sp, #12
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	4622      	mov	r2, r4
 800bfda:	4b07      	ldr	r3, [pc, #28]	; (800bff8 <_svfiprintf_r+0x1ec>)
 800bfdc:	a904      	add	r1, sp, #16
 800bfde:	4640      	mov	r0, r8
 800bfe0:	f000 f882 	bl	800c0e8 <_printf_i>
 800bfe4:	e7ea      	b.n	800bfbc <_svfiprintf_r+0x1b0>
 800bfe6:	bf00      	nop
 800bfe8:	0800d08c 	.word	0x0800d08c
 800bfec:	0800d092 	.word	0x0800d092
 800bff0:	0800d096 	.word	0x0800d096
 800bff4:	00000000 	.word	0x00000000
 800bff8:	0800bd57 	.word	0x0800bd57

0800bffc <_printf_common>:
 800bffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c000:	4691      	mov	r9, r2
 800c002:	461f      	mov	r7, r3
 800c004:	688a      	ldr	r2, [r1, #8]
 800c006:	690b      	ldr	r3, [r1, #16]
 800c008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c00c:	4293      	cmp	r3, r2
 800c00e:	bfb8      	it	lt
 800c010:	4613      	movlt	r3, r2
 800c012:	f8c9 3000 	str.w	r3, [r9]
 800c016:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c01a:	4606      	mov	r6, r0
 800c01c:	460c      	mov	r4, r1
 800c01e:	b112      	cbz	r2, 800c026 <_printf_common+0x2a>
 800c020:	3301      	adds	r3, #1
 800c022:	f8c9 3000 	str.w	r3, [r9]
 800c026:	6823      	ldr	r3, [r4, #0]
 800c028:	0699      	lsls	r1, r3, #26
 800c02a:	bf42      	ittt	mi
 800c02c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c030:	3302      	addmi	r3, #2
 800c032:	f8c9 3000 	strmi.w	r3, [r9]
 800c036:	6825      	ldr	r5, [r4, #0]
 800c038:	f015 0506 	ands.w	r5, r5, #6
 800c03c:	d107      	bne.n	800c04e <_printf_common+0x52>
 800c03e:	f104 0a19 	add.w	sl, r4, #25
 800c042:	68e3      	ldr	r3, [r4, #12]
 800c044:	f8d9 2000 	ldr.w	r2, [r9]
 800c048:	1a9b      	subs	r3, r3, r2
 800c04a:	42ab      	cmp	r3, r5
 800c04c:	dc28      	bgt.n	800c0a0 <_printf_common+0xa4>
 800c04e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c052:	6822      	ldr	r2, [r4, #0]
 800c054:	3300      	adds	r3, #0
 800c056:	bf18      	it	ne
 800c058:	2301      	movne	r3, #1
 800c05a:	0692      	lsls	r2, r2, #26
 800c05c:	d42d      	bmi.n	800c0ba <_printf_common+0xbe>
 800c05e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c062:	4639      	mov	r1, r7
 800c064:	4630      	mov	r0, r6
 800c066:	47c0      	blx	r8
 800c068:	3001      	adds	r0, #1
 800c06a:	d020      	beq.n	800c0ae <_printf_common+0xb2>
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	68e5      	ldr	r5, [r4, #12]
 800c070:	f8d9 2000 	ldr.w	r2, [r9]
 800c074:	f003 0306 	and.w	r3, r3, #6
 800c078:	2b04      	cmp	r3, #4
 800c07a:	bf08      	it	eq
 800c07c:	1aad      	subeq	r5, r5, r2
 800c07e:	68a3      	ldr	r3, [r4, #8]
 800c080:	6922      	ldr	r2, [r4, #16]
 800c082:	bf0c      	ite	eq
 800c084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c088:	2500      	movne	r5, #0
 800c08a:	4293      	cmp	r3, r2
 800c08c:	bfc4      	itt	gt
 800c08e:	1a9b      	subgt	r3, r3, r2
 800c090:	18ed      	addgt	r5, r5, r3
 800c092:	f04f 0900 	mov.w	r9, #0
 800c096:	341a      	adds	r4, #26
 800c098:	454d      	cmp	r5, r9
 800c09a:	d11a      	bne.n	800c0d2 <_printf_common+0xd6>
 800c09c:	2000      	movs	r0, #0
 800c09e:	e008      	b.n	800c0b2 <_printf_common+0xb6>
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	4652      	mov	r2, sl
 800c0a4:	4639      	mov	r1, r7
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	47c0      	blx	r8
 800c0aa:	3001      	adds	r0, #1
 800c0ac:	d103      	bne.n	800c0b6 <_printf_common+0xba>
 800c0ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b6:	3501      	adds	r5, #1
 800c0b8:	e7c3      	b.n	800c042 <_printf_common+0x46>
 800c0ba:	18e1      	adds	r1, r4, r3
 800c0bc:	1c5a      	adds	r2, r3, #1
 800c0be:	2030      	movs	r0, #48	; 0x30
 800c0c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0c4:	4422      	add	r2, r4
 800c0c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0ce:	3302      	adds	r3, #2
 800c0d0:	e7c5      	b.n	800c05e <_printf_common+0x62>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	4622      	mov	r2, r4
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	4630      	mov	r0, r6
 800c0da:	47c0      	blx	r8
 800c0dc:	3001      	adds	r0, #1
 800c0de:	d0e6      	beq.n	800c0ae <_printf_common+0xb2>
 800c0e0:	f109 0901 	add.w	r9, r9, #1
 800c0e4:	e7d8      	b.n	800c098 <_printf_common+0x9c>
	...

0800c0e8 <_printf_i>:
 800c0e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c0f0:	460c      	mov	r4, r1
 800c0f2:	7e09      	ldrb	r1, [r1, #24]
 800c0f4:	b085      	sub	sp, #20
 800c0f6:	296e      	cmp	r1, #110	; 0x6e
 800c0f8:	4617      	mov	r7, r2
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	4698      	mov	r8, r3
 800c0fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c100:	f000 80b3 	beq.w	800c26a <_printf_i+0x182>
 800c104:	d822      	bhi.n	800c14c <_printf_i+0x64>
 800c106:	2963      	cmp	r1, #99	; 0x63
 800c108:	d036      	beq.n	800c178 <_printf_i+0x90>
 800c10a:	d80a      	bhi.n	800c122 <_printf_i+0x3a>
 800c10c:	2900      	cmp	r1, #0
 800c10e:	f000 80b9 	beq.w	800c284 <_printf_i+0x19c>
 800c112:	2958      	cmp	r1, #88	; 0x58
 800c114:	f000 8083 	beq.w	800c21e <_printf_i+0x136>
 800c118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c11c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c120:	e032      	b.n	800c188 <_printf_i+0xa0>
 800c122:	2964      	cmp	r1, #100	; 0x64
 800c124:	d001      	beq.n	800c12a <_printf_i+0x42>
 800c126:	2969      	cmp	r1, #105	; 0x69
 800c128:	d1f6      	bne.n	800c118 <_printf_i+0x30>
 800c12a:	6820      	ldr	r0, [r4, #0]
 800c12c:	6813      	ldr	r3, [r2, #0]
 800c12e:	0605      	lsls	r5, r0, #24
 800c130:	f103 0104 	add.w	r1, r3, #4
 800c134:	d52a      	bpl.n	800c18c <_printf_i+0xa4>
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	6011      	str	r1, [r2, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	da03      	bge.n	800c146 <_printf_i+0x5e>
 800c13e:	222d      	movs	r2, #45	; 0x2d
 800c140:	425b      	negs	r3, r3
 800c142:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c146:	486f      	ldr	r0, [pc, #444]	; (800c304 <_printf_i+0x21c>)
 800c148:	220a      	movs	r2, #10
 800c14a:	e039      	b.n	800c1c0 <_printf_i+0xd8>
 800c14c:	2973      	cmp	r1, #115	; 0x73
 800c14e:	f000 809d 	beq.w	800c28c <_printf_i+0x1a4>
 800c152:	d808      	bhi.n	800c166 <_printf_i+0x7e>
 800c154:	296f      	cmp	r1, #111	; 0x6f
 800c156:	d020      	beq.n	800c19a <_printf_i+0xb2>
 800c158:	2970      	cmp	r1, #112	; 0x70
 800c15a:	d1dd      	bne.n	800c118 <_printf_i+0x30>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	f043 0320 	orr.w	r3, r3, #32
 800c162:	6023      	str	r3, [r4, #0]
 800c164:	e003      	b.n	800c16e <_printf_i+0x86>
 800c166:	2975      	cmp	r1, #117	; 0x75
 800c168:	d017      	beq.n	800c19a <_printf_i+0xb2>
 800c16a:	2978      	cmp	r1, #120	; 0x78
 800c16c:	d1d4      	bne.n	800c118 <_printf_i+0x30>
 800c16e:	2378      	movs	r3, #120	; 0x78
 800c170:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c174:	4864      	ldr	r0, [pc, #400]	; (800c308 <_printf_i+0x220>)
 800c176:	e055      	b.n	800c224 <_printf_i+0x13c>
 800c178:	6813      	ldr	r3, [r2, #0]
 800c17a:	1d19      	adds	r1, r3, #4
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	6011      	str	r1, [r2, #0]
 800c180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c188:	2301      	movs	r3, #1
 800c18a:	e08c      	b.n	800c2a6 <_printf_i+0x1be>
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	6011      	str	r1, [r2, #0]
 800c190:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c194:	bf18      	it	ne
 800c196:	b21b      	sxthne	r3, r3
 800c198:	e7cf      	b.n	800c13a <_printf_i+0x52>
 800c19a:	6813      	ldr	r3, [r2, #0]
 800c19c:	6825      	ldr	r5, [r4, #0]
 800c19e:	1d18      	adds	r0, r3, #4
 800c1a0:	6010      	str	r0, [r2, #0]
 800c1a2:	0628      	lsls	r0, r5, #24
 800c1a4:	d501      	bpl.n	800c1aa <_printf_i+0xc2>
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	e002      	b.n	800c1b0 <_printf_i+0xc8>
 800c1aa:	0668      	lsls	r0, r5, #25
 800c1ac:	d5fb      	bpl.n	800c1a6 <_printf_i+0xbe>
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	4854      	ldr	r0, [pc, #336]	; (800c304 <_printf_i+0x21c>)
 800c1b2:	296f      	cmp	r1, #111	; 0x6f
 800c1b4:	bf14      	ite	ne
 800c1b6:	220a      	movne	r2, #10
 800c1b8:	2208      	moveq	r2, #8
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1c0:	6865      	ldr	r5, [r4, #4]
 800c1c2:	60a5      	str	r5, [r4, #8]
 800c1c4:	2d00      	cmp	r5, #0
 800c1c6:	f2c0 8095 	blt.w	800c2f4 <_printf_i+0x20c>
 800c1ca:	6821      	ldr	r1, [r4, #0]
 800c1cc:	f021 0104 	bic.w	r1, r1, #4
 800c1d0:	6021      	str	r1, [r4, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d13d      	bne.n	800c252 <_printf_i+0x16a>
 800c1d6:	2d00      	cmp	r5, #0
 800c1d8:	f040 808e 	bne.w	800c2f8 <_printf_i+0x210>
 800c1dc:	4665      	mov	r5, ip
 800c1de:	2a08      	cmp	r2, #8
 800c1e0:	d10b      	bne.n	800c1fa <_printf_i+0x112>
 800c1e2:	6823      	ldr	r3, [r4, #0]
 800c1e4:	07db      	lsls	r3, r3, #31
 800c1e6:	d508      	bpl.n	800c1fa <_printf_i+0x112>
 800c1e8:	6923      	ldr	r3, [r4, #16]
 800c1ea:	6862      	ldr	r2, [r4, #4]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	bfde      	ittt	le
 800c1f0:	2330      	movle	r3, #48	; 0x30
 800c1f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1f6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c1fa:	ebac 0305 	sub.w	r3, ip, r5
 800c1fe:	6123      	str	r3, [r4, #16]
 800c200:	f8cd 8000 	str.w	r8, [sp]
 800c204:	463b      	mov	r3, r7
 800c206:	aa03      	add	r2, sp, #12
 800c208:	4621      	mov	r1, r4
 800c20a:	4630      	mov	r0, r6
 800c20c:	f7ff fef6 	bl	800bffc <_printf_common>
 800c210:	3001      	adds	r0, #1
 800c212:	d14d      	bne.n	800c2b0 <_printf_i+0x1c8>
 800c214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c218:	b005      	add	sp, #20
 800c21a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c21e:	4839      	ldr	r0, [pc, #228]	; (800c304 <_printf_i+0x21c>)
 800c220:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c224:	6813      	ldr	r3, [r2, #0]
 800c226:	6821      	ldr	r1, [r4, #0]
 800c228:	1d1d      	adds	r5, r3, #4
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	6015      	str	r5, [r2, #0]
 800c22e:	060a      	lsls	r2, r1, #24
 800c230:	d50b      	bpl.n	800c24a <_printf_i+0x162>
 800c232:	07ca      	lsls	r2, r1, #31
 800c234:	bf44      	itt	mi
 800c236:	f041 0120 	orrmi.w	r1, r1, #32
 800c23a:	6021      	strmi	r1, [r4, #0]
 800c23c:	b91b      	cbnz	r3, 800c246 <_printf_i+0x15e>
 800c23e:	6822      	ldr	r2, [r4, #0]
 800c240:	f022 0220 	bic.w	r2, r2, #32
 800c244:	6022      	str	r2, [r4, #0]
 800c246:	2210      	movs	r2, #16
 800c248:	e7b7      	b.n	800c1ba <_printf_i+0xd2>
 800c24a:	064d      	lsls	r5, r1, #25
 800c24c:	bf48      	it	mi
 800c24e:	b29b      	uxthmi	r3, r3
 800c250:	e7ef      	b.n	800c232 <_printf_i+0x14a>
 800c252:	4665      	mov	r5, ip
 800c254:	fbb3 f1f2 	udiv	r1, r3, r2
 800c258:	fb02 3311 	mls	r3, r2, r1, r3
 800c25c:	5cc3      	ldrb	r3, [r0, r3]
 800c25e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c262:	460b      	mov	r3, r1
 800c264:	2900      	cmp	r1, #0
 800c266:	d1f5      	bne.n	800c254 <_printf_i+0x16c>
 800c268:	e7b9      	b.n	800c1de <_printf_i+0xf6>
 800c26a:	6813      	ldr	r3, [r2, #0]
 800c26c:	6825      	ldr	r5, [r4, #0]
 800c26e:	6961      	ldr	r1, [r4, #20]
 800c270:	1d18      	adds	r0, r3, #4
 800c272:	6010      	str	r0, [r2, #0]
 800c274:	0628      	lsls	r0, r5, #24
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	d501      	bpl.n	800c27e <_printf_i+0x196>
 800c27a:	6019      	str	r1, [r3, #0]
 800c27c:	e002      	b.n	800c284 <_printf_i+0x19c>
 800c27e:	066a      	lsls	r2, r5, #25
 800c280:	d5fb      	bpl.n	800c27a <_printf_i+0x192>
 800c282:	8019      	strh	r1, [r3, #0]
 800c284:	2300      	movs	r3, #0
 800c286:	6123      	str	r3, [r4, #16]
 800c288:	4665      	mov	r5, ip
 800c28a:	e7b9      	b.n	800c200 <_printf_i+0x118>
 800c28c:	6813      	ldr	r3, [r2, #0]
 800c28e:	1d19      	adds	r1, r3, #4
 800c290:	6011      	str	r1, [r2, #0]
 800c292:	681d      	ldr	r5, [r3, #0]
 800c294:	6862      	ldr	r2, [r4, #4]
 800c296:	2100      	movs	r1, #0
 800c298:	4628      	mov	r0, r5
 800c29a:	f7f3 ffa9 	bl	80001f0 <memchr>
 800c29e:	b108      	cbz	r0, 800c2a4 <_printf_i+0x1bc>
 800c2a0:	1b40      	subs	r0, r0, r5
 800c2a2:	6060      	str	r0, [r4, #4]
 800c2a4:	6863      	ldr	r3, [r4, #4]
 800c2a6:	6123      	str	r3, [r4, #16]
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2ae:	e7a7      	b.n	800c200 <_printf_i+0x118>
 800c2b0:	6923      	ldr	r3, [r4, #16]
 800c2b2:	462a      	mov	r2, r5
 800c2b4:	4639      	mov	r1, r7
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	47c0      	blx	r8
 800c2ba:	3001      	adds	r0, #1
 800c2bc:	d0aa      	beq.n	800c214 <_printf_i+0x12c>
 800c2be:	6823      	ldr	r3, [r4, #0]
 800c2c0:	079b      	lsls	r3, r3, #30
 800c2c2:	d413      	bmi.n	800c2ec <_printf_i+0x204>
 800c2c4:	68e0      	ldr	r0, [r4, #12]
 800c2c6:	9b03      	ldr	r3, [sp, #12]
 800c2c8:	4298      	cmp	r0, r3
 800c2ca:	bfb8      	it	lt
 800c2cc:	4618      	movlt	r0, r3
 800c2ce:	e7a3      	b.n	800c218 <_printf_i+0x130>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	464a      	mov	r2, r9
 800c2d4:	4639      	mov	r1, r7
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	47c0      	blx	r8
 800c2da:	3001      	adds	r0, #1
 800c2dc:	d09a      	beq.n	800c214 <_printf_i+0x12c>
 800c2de:	3501      	adds	r5, #1
 800c2e0:	68e3      	ldr	r3, [r4, #12]
 800c2e2:	9a03      	ldr	r2, [sp, #12]
 800c2e4:	1a9b      	subs	r3, r3, r2
 800c2e6:	42ab      	cmp	r3, r5
 800c2e8:	dcf2      	bgt.n	800c2d0 <_printf_i+0x1e8>
 800c2ea:	e7eb      	b.n	800c2c4 <_printf_i+0x1dc>
 800c2ec:	2500      	movs	r5, #0
 800c2ee:	f104 0919 	add.w	r9, r4, #25
 800c2f2:	e7f5      	b.n	800c2e0 <_printf_i+0x1f8>
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d1ac      	bne.n	800c252 <_printf_i+0x16a>
 800c2f8:	7803      	ldrb	r3, [r0, #0]
 800c2fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c302:	e76c      	b.n	800c1de <_printf_i+0xf6>
 800c304:	0800d09d 	.word	0x0800d09d
 800c308:	0800d0ae 	.word	0x0800d0ae

0800c30c <memmove>:
 800c30c:	4288      	cmp	r0, r1
 800c30e:	b510      	push	{r4, lr}
 800c310:	eb01 0302 	add.w	r3, r1, r2
 800c314:	d807      	bhi.n	800c326 <memmove+0x1a>
 800c316:	1e42      	subs	r2, r0, #1
 800c318:	4299      	cmp	r1, r3
 800c31a:	d00a      	beq.n	800c332 <memmove+0x26>
 800c31c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c320:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c324:	e7f8      	b.n	800c318 <memmove+0xc>
 800c326:	4283      	cmp	r3, r0
 800c328:	d9f5      	bls.n	800c316 <memmove+0xa>
 800c32a:	1881      	adds	r1, r0, r2
 800c32c:	1ad2      	subs	r2, r2, r3
 800c32e:	42d3      	cmn	r3, r2
 800c330:	d100      	bne.n	800c334 <memmove+0x28>
 800c332:	bd10      	pop	{r4, pc}
 800c334:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c338:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c33c:	e7f7      	b.n	800c32e <memmove+0x22>
	...

0800c340 <_free_r>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	4605      	mov	r5, r0
 800c344:	2900      	cmp	r1, #0
 800c346:	d045      	beq.n	800c3d4 <_free_r+0x94>
 800c348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c34c:	1f0c      	subs	r4, r1, #4
 800c34e:	2b00      	cmp	r3, #0
 800c350:	bfb8      	it	lt
 800c352:	18e4      	addlt	r4, r4, r3
 800c354:	f000 f8d2 	bl	800c4fc <__malloc_lock>
 800c358:	4a1f      	ldr	r2, [pc, #124]	; (800c3d8 <_free_r+0x98>)
 800c35a:	6813      	ldr	r3, [r2, #0]
 800c35c:	4610      	mov	r0, r2
 800c35e:	b933      	cbnz	r3, 800c36e <_free_r+0x2e>
 800c360:	6063      	str	r3, [r4, #4]
 800c362:	6014      	str	r4, [r2, #0]
 800c364:	4628      	mov	r0, r5
 800c366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c36a:	f000 b8c8 	b.w	800c4fe <__malloc_unlock>
 800c36e:	42a3      	cmp	r3, r4
 800c370:	d90c      	bls.n	800c38c <_free_r+0x4c>
 800c372:	6821      	ldr	r1, [r4, #0]
 800c374:	1862      	adds	r2, r4, r1
 800c376:	4293      	cmp	r3, r2
 800c378:	bf04      	itt	eq
 800c37a:	681a      	ldreq	r2, [r3, #0]
 800c37c:	685b      	ldreq	r3, [r3, #4]
 800c37e:	6063      	str	r3, [r4, #4]
 800c380:	bf04      	itt	eq
 800c382:	1852      	addeq	r2, r2, r1
 800c384:	6022      	streq	r2, [r4, #0]
 800c386:	6004      	str	r4, [r0, #0]
 800c388:	e7ec      	b.n	800c364 <_free_r+0x24>
 800c38a:	4613      	mov	r3, r2
 800c38c:	685a      	ldr	r2, [r3, #4]
 800c38e:	b10a      	cbz	r2, 800c394 <_free_r+0x54>
 800c390:	42a2      	cmp	r2, r4
 800c392:	d9fa      	bls.n	800c38a <_free_r+0x4a>
 800c394:	6819      	ldr	r1, [r3, #0]
 800c396:	1858      	adds	r0, r3, r1
 800c398:	42a0      	cmp	r0, r4
 800c39a:	d10b      	bne.n	800c3b4 <_free_r+0x74>
 800c39c:	6820      	ldr	r0, [r4, #0]
 800c39e:	4401      	add	r1, r0
 800c3a0:	1858      	adds	r0, r3, r1
 800c3a2:	4282      	cmp	r2, r0
 800c3a4:	6019      	str	r1, [r3, #0]
 800c3a6:	d1dd      	bne.n	800c364 <_free_r+0x24>
 800c3a8:	6810      	ldr	r0, [r2, #0]
 800c3aa:	6852      	ldr	r2, [r2, #4]
 800c3ac:	605a      	str	r2, [r3, #4]
 800c3ae:	4401      	add	r1, r0
 800c3b0:	6019      	str	r1, [r3, #0]
 800c3b2:	e7d7      	b.n	800c364 <_free_r+0x24>
 800c3b4:	d902      	bls.n	800c3bc <_free_r+0x7c>
 800c3b6:	230c      	movs	r3, #12
 800c3b8:	602b      	str	r3, [r5, #0]
 800c3ba:	e7d3      	b.n	800c364 <_free_r+0x24>
 800c3bc:	6820      	ldr	r0, [r4, #0]
 800c3be:	1821      	adds	r1, r4, r0
 800c3c0:	428a      	cmp	r2, r1
 800c3c2:	bf04      	itt	eq
 800c3c4:	6811      	ldreq	r1, [r2, #0]
 800c3c6:	6852      	ldreq	r2, [r2, #4]
 800c3c8:	6062      	str	r2, [r4, #4]
 800c3ca:	bf04      	itt	eq
 800c3cc:	1809      	addeq	r1, r1, r0
 800c3ce:	6021      	streq	r1, [r4, #0]
 800c3d0:	605c      	str	r4, [r3, #4]
 800c3d2:	e7c7      	b.n	800c364 <_free_r+0x24>
 800c3d4:	bd38      	pop	{r3, r4, r5, pc}
 800c3d6:	bf00      	nop
 800c3d8:	20002abc 	.word	0x20002abc

0800c3dc <_malloc_r>:
 800c3dc:	b570      	push	{r4, r5, r6, lr}
 800c3de:	1ccd      	adds	r5, r1, #3
 800c3e0:	f025 0503 	bic.w	r5, r5, #3
 800c3e4:	3508      	adds	r5, #8
 800c3e6:	2d0c      	cmp	r5, #12
 800c3e8:	bf38      	it	cc
 800c3ea:	250c      	movcc	r5, #12
 800c3ec:	2d00      	cmp	r5, #0
 800c3ee:	4606      	mov	r6, r0
 800c3f0:	db01      	blt.n	800c3f6 <_malloc_r+0x1a>
 800c3f2:	42a9      	cmp	r1, r5
 800c3f4:	d903      	bls.n	800c3fe <_malloc_r+0x22>
 800c3f6:	230c      	movs	r3, #12
 800c3f8:	6033      	str	r3, [r6, #0]
 800c3fa:	2000      	movs	r0, #0
 800c3fc:	bd70      	pop	{r4, r5, r6, pc}
 800c3fe:	f000 f87d 	bl	800c4fc <__malloc_lock>
 800c402:	4a21      	ldr	r2, [pc, #132]	; (800c488 <_malloc_r+0xac>)
 800c404:	6814      	ldr	r4, [r2, #0]
 800c406:	4621      	mov	r1, r4
 800c408:	b991      	cbnz	r1, 800c430 <_malloc_r+0x54>
 800c40a:	4c20      	ldr	r4, [pc, #128]	; (800c48c <_malloc_r+0xb0>)
 800c40c:	6823      	ldr	r3, [r4, #0]
 800c40e:	b91b      	cbnz	r3, 800c418 <_malloc_r+0x3c>
 800c410:	4630      	mov	r0, r6
 800c412:	f000 f863 	bl	800c4dc <_sbrk_r>
 800c416:	6020      	str	r0, [r4, #0]
 800c418:	4629      	mov	r1, r5
 800c41a:	4630      	mov	r0, r6
 800c41c:	f000 f85e 	bl	800c4dc <_sbrk_r>
 800c420:	1c43      	adds	r3, r0, #1
 800c422:	d124      	bne.n	800c46e <_malloc_r+0x92>
 800c424:	230c      	movs	r3, #12
 800c426:	6033      	str	r3, [r6, #0]
 800c428:	4630      	mov	r0, r6
 800c42a:	f000 f868 	bl	800c4fe <__malloc_unlock>
 800c42e:	e7e4      	b.n	800c3fa <_malloc_r+0x1e>
 800c430:	680b      	ldr	r3, [r1, #0]
 800c432:	1b5b      	subs	r3, r3, r5
 800c434:	d418      	bmi.n	800c468 <_malloc_r+0x8c>
 800c436:	2b0b      	cmp	r3, #11
 800c438:	d90f      	bls.n	800c45a <_malloc_r+0x7e>
 800c43a:	600b      	str	r3, [r1, #0]
 800c43c:	50cd      	str	r5, [r1, r3]
 800c43e:	18cc      	adds	r4, r1, r3
 800c440:	4630      	mov	r0, r6
 800c442:	f000 f85c 	bl	800c4fe <__malloc_unlock>
 800c446:	f104 000b 	add.w	r0, r4, #11
 800c44a:	1d23      	adds	r3, r4, #4
 800c44c:	f020 0007 	bic.w	r0, r0, #7
 800c450:	1ac3      	subs	r3, r0, r3
 800c452:	d0d3      	beq.n	800c3fc <_malloc_r+0x20>
 800c454:	425a      	negs	r2, r3
 800c456:	50e2      	str	r2, [r4, r3]
 800c458:	e7d0      	b.n	800c3fc <_malloc_r+0x20>
 800c45a:	428c      	cmp	r4, r1
 800c45c:	684b      	ldr	r3, [r1, #4]
 800c45e:	bf16      	itet	ne
 800c460:	6063      	strne	r3, [r4, #4]
 800c462:	6013      	streq	r3, [r2, #0]
 800c464:	460c      	movne	r4, r1
 800c466:	e7eb      	b.n	800c440 <_malloc_r+0x64>
 800c468:	460c      	mov	r4, r1
 800c46a:	6849      	ldr	r1, [r1, #4]
 800c46c:	e7cc      	b.n	800c408 <_malloc_r+0x2c>
 800c46e:	1cc4      	adds	r4, r0, #3
 800c470:	f024 0403 	bic.w	r4, r4, #3
 800c474:	42a0      	cmp	r0, r4
 800c476:	d005      	beq.n	800c484 <_malloc_r+0xa8>
 800c478:	1a21      	subs	r1, r4, r0
 800c47a:	4630      	mov	r0, r6
 800c47c:	f000 f82e 	bl	800c4dc <_sbrk_r>
 800c480:	3001      	adds	r0, #1
 800c482:	d0cf      	beq.n	800c424 <_malloc_r+0x48>
 800c484:	6025      	str	r5, [r4, #0]
 800c486:	e7db      	b.n	800c440 <_malloc_r+0x64>
 800c488:	20002abc 	.word	0x20002abc
 800c48c:	20002ac0 	.word	0x20002ac0

0800c490 <_realloc_r>:
 800c490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c492:	4607      	mov	r7, r0
 800c494:	4614      	mov	r4, r2
 800c496:	460e      	mov	r6, r1
 800c498:	b921      	cbnz	r1, 800c4a4 <_realloc_r+0x14>
 800c49a:	4611      	mov	r1, r2
 800c49c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c4a0:	f7ff bf9c 	b.w	800c3dc <_malloc_r>
 800c4a4:	b922      	cbnz	r2, 800c4b0 <_realloc_r+0x20>
 800c4a6:	f7ff ff4b 	bl	800c340 <_free_r>
 800c4aa:	4625      	mov	r5, r4
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4b0:	f000 f826 	bl	800c500 <_malloc_usable_size_r>
 800c4b4:	42a0      	cmp	r0, r4
 800c4b6:	d20f      	bcs.n	800c4d8 <_realloc_r+0x48>
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	4638      	mov	r0, r7
 800c4bc:	f7ff ff8e 	bl	800c3dc <_malloc_r>
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	d0f2      	beq.n	800c4ac <_realloc_r+0x1c>
 800c4c6:	4631      	mov	r1, r6
 800c4c8:	4622      	mov	r2, r4
 800c4ca:	f7ff fbe1 	bl	800bc90 <memcpy>
 800c4ce:	4631      	mov	r1, r6
 800c4d0:	4638      	mov	r0, r7
 800c4d2:	f7ff ff35 	bl	800c340 <_free_r>
 800c4d6:	e7e9      	b.n	800c4ac <_realloc_r+0x1c>
 800c4d8:	4635      	mov	r5, r6
 800c4da:	e7e7      	b.n	800c4ac <_realloc_r+0x1c>

0800c4dc <_sbrk_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	4c06      	ldr	r4, [pc, #24]	; (800c4f8 <_sbrk_r+0x1c>)
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	4605      	mov	r5, r0
 800c4e4:	4608      	mov	r0, r1
 800c4e6:	6023      	str	r3, [r4, #0]
 800c4e8:	f7f8 fb20 	bl	8004b2c <_sbrk>
 800c4ec:	1c43      	adds	r3, r0, #1
 800c4ee:	d102      	bne.n	800c4f6 <_sbrk_r+0x1a>
 800c4f0:	6823      	ldr	r3, [r4, #0]
 800c4f2:	b103      	cbz	r3, 800c4f6 <_sbrk_r+0x1a>
 800c4f4:	602b      	str	r3, [r5, #0]
 800c4f6:	bd38      	pop	{r3, r4, r5, pc}
 800c4f8:	20003508 	.word	0x20003508

0800c4fc <__malloc_lock>:
 800c4fc:	4770      	bx	lr

0800c4fe <__malloc_unlock>:
 800c4fe:	4770      	bx	lr

0800c500 <_malloc_usable_size_r>:
 800c500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c504:	1f18      	subs	r0, r3, #4
 800c506:	2b00      	cmp	r3, #0
 800c508:	bfbc      	itt	lt
 800c50a:	580b      	ldrlt	r3, [r1, r0]
 800c50c:	18c0      	addlt	r0, r0, r3
 800c50e:	4770      	bx	lr

0800c510 <_init>:
 800c510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c512:	bf00      	nop
 800c514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c516:	bc08      	pop	{r3}
 800c518:	469e      	mov	lr, r3
 800c51a:	4770      	bx	lr

0800c51c <_fini>:
 800c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51e:	bf00      	nop
 800c520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c522:	bc08      	pop	{r3}
 800c524:	469e      	mov	lr, r3
 800c526:	4770      	bx	lr

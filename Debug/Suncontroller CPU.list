
Suncontroller CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bed8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab8  0800c078  0800c078  0001c078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb30  0800cb30  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb30  0800cb30  0001cb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb38  0800cb38  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb38  0800cb38  0001cb38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb3c  0800cb3c  0001cb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800cb40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003328  200000b8  0800cbf8  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200033e0  0800cbf8  000233e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040044  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000077c1  00000000  00000000  0006012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c007  00000000  00000000  000678ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002558  00000000  00000000  000838f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002620  00000000  00000000  00085e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000a60a  00000000  00000000  00088470  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00022ac2  00000000  00000000  00092a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ac289  00000000  00000000  000b553c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001617c5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000700c  00000000  00000000  00161840  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b8 	.word	0x200000b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c060 	.word	0x0800c060

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	0800c060 	.word	0x0800c060

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <xCLI_GetSystemStatus>:
	(void) xWriteBufferLen;

	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	return pdFALSE;
}
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	4770      	bx	lr

08000e10 <xCLI_EreaseEE>:
BaseType_t xCLI_EreaseEE( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8000e10:	b510      	push	{r4, lr}
 8000e12:	4604      	mov	r4, r0
	EE_StatusTypeDef retval = EE_Erease();
 8000e14:	f000 fb74 	bl	8001500 <EE_Erease>
	if(retval == EE_OK){
 8000e18:	b128      	cbz	r0, 8000e26 <xCLI_EreaseEE+0x16>
		sprintf(pcWriteBuffer, "Nie wyczyszczono.\r\n");
 8000e1a:	4905      	ldr	r1, [pc, #20]	; (8000e30 <xCLI_EreaseEE+0x20>)
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f00a fca7 	bl	800b770 <sprintf_>
}
 8000e22:	2000      	movs	r0, #0
 8000e24:	bd10      	pop	{r4, pc}
		sprintf(pcWriteBuffer, "Wyczyszczono.\r\n");
 8000e26:	4903      	ldr	r1, [pc, #12]	; (8000e34 <xCLI_EreaseEE+0x24>)
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f00a fca1 	bl	800b770 <sprintf_>
 8000e2e:	e7f8      	b.n	8000e22 <xCLI_EreaseEE+0x12>
 8000e30:	0800c26c 	.word	0x0800c26c
 8000e34:	0800c25c 	.word	0x0800c25c

08000e38 <xCLI_ShowConfig>:
BaseType_t xCLI_ShowConfig( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8000e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e3c:	b095      	sub	sp, #84	; 0x54
 8000e3e:	9011      	str	r0, [sp, #68]	; 0x44
	switch (step){
 8000e40:	4b6e      	ldr	r3, [pc, #440]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b05      	cmp	r3, #5
 8000e46:	f200 80d0 	bhi.w	8000fea <xCLI_ShowConfig+0x1b2>
 8000e4a:	e8df f003 	tbb	[pc, r3]
 8000e4e:	3303      	.short	0x3303
 8000e50:	c1ac997c 	.word	0xc1ac997c
			configStatus = Config_GetConfig(&config);
 8000e54:	486a      	ldr	r0, [pc, #424]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000e56:	f000 f9f1 	bl	800123c <Config_GetConfig>
			switch(configStatus){
 8000e5a:	3005      	adds	r0, #5
 8000e5c:	2805      	cmp	r0, #5
 8000e5e:	d824      	bhi.n	8000eaa <xCLI_ShowConfig+0x72>
 8000e60:	e8df f000 	tbb	[pc, r0]
 8000e64:	23140f03 	.word	0x23140f03
 8000e68:	1e19      	.short	0x1e19
					sprintf(pcWriteBuffer, "No configuration in memory.\r\n");
 8000e6a:	4966      	ldr	r1, [pc, #408]	; (8001004 <xCLI_ShowConfig+0x1cc>)
 8000e6c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e6e:	f00a fc7f 	bl	800b770 <sprintf_>
			step++;
 8000e72:	4a62      	ldr	r2, [pc, #392]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000e74:	7813      	ldrb	r3, [r2, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000e7a:	2001      	movs	r0, #1
}
 8000e7c:	b015      	add	sp, #84	; 0x54
 8000e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					sprintf(pcWriteBuffer, "Configuration CRC error.\r\n");
 8000e82:	4961      	ldr	r1, [pc, #388]	; (8001008 <xCLI_ShowConfig+0x1d0>)
 8000e84:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e86:	f00a fc73 	bl	800b770 <sprintf_>
					break;
 8000e8a:	e7f2      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Cannot access I2C bus.\r\n");
 8000e8c:	495f      	ldr	r1, [pc, #380]	; (800100c <xCLI_ShowConfig+0x1d4>)
 8000e8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e90:	f00a fc6e 	bl	800b770 <sprintf_>
					break;
 8000e94:	e7ed      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Memory access timeout.\r\n");
 8000e96:	495e      	ldr	r1, [pc, #376]	; (8001010 <xCLI_ShowConfig+0x1d8>)
 8000e98:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e9a:	f00a fc69 	bl	800b770 <sprintf_>
					break;
 8000e9e:	e7e8      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Configuration loaded.\r\n");
 8000ea0:	495c      	ldr	r1, [pc, #368]	; (8001014 <xCLI_ShowConfig+0x1dc>)
 8000ea2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ea4:	f00a fc64 	bl	800b770 <sprintf_>
					break;
 8000ea8:	e7e3      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					sprintf(pcWriteBuffer, "Unexpected error.\r\n");
 8000eaa:	495b      	ldr	r1, [pc, #364]	; (8001018 <xCLI_ShowConfig+0x1e0>)
 8000eac:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000eae:	f00a fc5f 	bl	800b770 <sprintf_>
 					break;
 8000eb2:	e7de      	b.n	8000e72 <xCLI_ShowConfig+0x3a>
					config.EthernetConfig.ipAddress[0], config.EthernetConfig.ipAddress[1],
 8000eb4:	4b52      	ldr	r3, [pc, #328]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000eb6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000eba:	9212      	str	r2, [sp, #72]	; 0x48
 8000ebc:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8000ec0:	9113      	str	r1, [sp, #76]	; 0x4c
					config.EthernetConfig.ipAddress[2], config.EthernetConfig.ipAddress[3],
 8000ec2:	f893 4022 	ldrb.w	r4, [r3, #34]	; 0x22
 8000ec6:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8000eca:	9001      	str	r0, [sp, #4]
					config.EthernetConfig.gatewayAddress[0], config.EthernetConfig.gatewayAddress[1],
 8000ecc:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 8000ed0:	9002      	str	r0, [sp, #8]
 8000ed2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
					config.EthernetConfig.gatewayAddress[2], config.EthernetConfig.gatewayAddress[3],
 8000ed6:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8000eda:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
					config.EthernetConfig.subnetMask[0], config.EthernetConfig.subnetMask[1],
 8000ede:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 8000ee2:	f893 6025 	ldrb.w	r6, [r3, #37]	; 0x25
					config.EthernetConfig.subnetMask[2], config.EthernetConfig.subnetMask[3],
 8000ee6:	f893 7026 	ldrb.w	r7, [r3, #38]	; 0x26
 8000eea:	f893 c027 	ldrb.w	ip, [r3, #39]	; 0x27
					config.EthernetConfig.macAddress[0], config.EthernetConfig.macAddress[1],
 8000eee:	f893 e02c 	ldrb.w	lr, [r3, #44]	; 0x2c
 8000ef2:	f893 802d 	ldrb.w	r8, [r3, #45]	; 0x2d
					config.EthernetConfig.macAddress[2], config.EthernetConfig.macAddress[3],
 8000ef6:	f893 902e 	ldrb.w	r9, [r3, #46]	; 0x2e
 8000efa:	f893 a02f 	ldrb.w	sl, [r3, #47]	; 0x2f
					config.EthernetConfig.macAddress[4], config.EthernetConfig.macAddress[5]);
 8000efe:	f893 b030 	ldrb.w	fp, [r3, #48]	; 0x30
 8000f02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
			sprintf(pcWriteBuffer, "Ethernet configuration:\r\n"
 8000f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f08:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8000f0c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8000f10:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8000f14:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8000f18:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8000f1c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8000f20:	9708      	str	r7, [sp, #32]
 8000f22:	9607      	str	r6, [sp, #28]
 8000f24:	9506      	str	r5, [sp, #24]
 8000f26:	9005      	str	r0, [sp, #20]
 8000f28:	9104      	str	r1, [sp, #16]
 8000f2a:	9203      	str	r2, [sp, #12]
 8000f2c:	9400      	str	r4, [sp, #0]
 8000f2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000f30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000f32:	493a      	ldr	r1, [pc, #232]	; (800101c <xCLI_ShowConfig+0x1e4>)
 8000f34:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f36:	f00a fc1b 	bl	800b770 <sprintf_>
			step++;
 8000f3a:	4a30      	ldr	r2, [pc, #192]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000f3c:	7813      	ldrb	r3, [r2, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000f42:	2001      	movs	r0, #1
			break;
 8000f44:	e79a      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					(uint32_t)config.RegulationConfig.CWU_heater_power,
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000f48:	ed93 7a00 	vldr	s14, [r3]
					(uint32_t)config.RegulationConfig.CO_heater_power,
 8000f4c:	edd3 6a01 	vldr	s13, [r3, #4]
					(uint32_t)config.RegulationConfig.net_max_power);
 8000f50:	edd3 7a02 	vldr	s15, [r3, #8]
			sprintf(pcWriteBuffer, "Regulation configuration:\r\n"
 8000f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f58:	edcd 7a00 	vstr	s15, [sp]
 8000f5c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8000f60:	ee17 3a90 	vmov	r3, s15
 8000f64:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000f68:	ee17 2a90 	vmov	r2, s15
 8000f6c:	492c      	ldr	r1, [pc, #176]	; (8001020 <xCLI_ShowConfig+0x1e8>)
 8000f6e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f70:	f00a fbfe 	bl	800b770 <sprintf_>
			step++;
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000f76:	7813      	ldrb	r3, [r2, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000f7c:	2001      	movs	r0, #1
			break;
 8000f7e:	e77d      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					config.RegulationConfig.counter_address,
 8000f80:	491f      	ldr	r1, [pc, #124]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000f82:	7b0a      	ldrb	r2, [r1, #12]
					config.RegulationConfig.temperature_address,
 8000f84:	7b4b      	ldrb	r3, [r1, #13]
					config.RegulationConfig.acumulated_power_coeff,
 8000f86:	f991 000e 	ldrsb.w	r0, [r1, #14]
					config.RegulationConfig.heater_power_coeff);
 8000f8a:	f991 100f 	ldrsb.w	r1, [r1, #15]
			sprintf(pcWriteBuffer, "    Counter address: %d\r\n"
 8000f8e:	9101      	str	r1, [sp, #4]
 8000f90:	9000      	str	r0, [sp, #0]
 8000f92:	4924      	ldr	r1, [pc, #144]	; (8001024 <xCLI_ShowConfig+0x1ec>)
 8000f94:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000f96:	f00a fbeb 	bl	800b770 <sprintf_>
			step++;
 8000f9a:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000f9c:	7813      	ldrb	r3, [r2, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fa2:	2001      	movs	r0, #1
			break;
 8000fa4:	e76a      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					config.RegulationConfig.CO_hi_temp,
 8000fa6:	4916      	ldr	r1, [pc, #88]	; (8001000 <xCLI_ShowConfig+0x1c8>)
 8000fa8:	f991 2010 	ldrsb.w	r2, [r1, #16]
					config.RegulationConfig.CO_lo_temp,
 8000fac:	f991 3011 	ldrsb.w	r3, [r1, #17]
					config.RegulationConfig.CWU_hi_temp,
 8000fb0:	f991 0012 	ldrsb.w	r0, [r1, #18]
					config.RegulationConfig.CWU_lo_temp);
 8000fb4:	f991 1013 	ldrsb.w	r1, [r1, #19]
			sprintf(pcWriteBuffer, "    CO high temperature: %d C\r\n"
 8000fb8:	9101      	str	r1, [sp, #4]
 8000fba:	9000      	str	r0, [sp, #0]
 8000fbc:	491a      	ldr	r1, [pc, #104]	; (8001028 <xCLI_ShowConfig+0x1f0>)
 8000fbe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000fc0:	f00a fbd6 	bl	800b770 <sprintf_>
			step++;
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000fc6:	7813      	ldrb	r3, [r2, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fcc:	2001      	movs	r0, #1
			break;
 8000fce:	e755      	b.n	8000e7c <xCLI_ShowConfig+0x44>
					"CRC: 0x%08x\r\n", config.dummy, config.crc);
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <xCLI_ShowConfig+0x1c8>)
			sprintf(pcWriteBuffer, "Magic word: 0x%04x\r\n"
 8000fd2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000fd4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8000fd6:	4915      	ldr	r1, [pc, #84]	; (800102c <xCLI_ShowConfig+0x1f4>)
 8000fd8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000fda:	f00a fbc9 	bl	800b770 <sprintf_>
			step++;
 8000fde:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000fe0:	7813      	ldrb	r3, [r2, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8000fe6:	2001      	movs	r0, #1
			break;
 8000fe8:	e748      	b.n	8000e7c <xCLI_ShowConfig+0x44>
			step = 0;
 8000fea:	2500      	movs	r5, #0
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <xCLI_ShowConfig+0x1c4>)
 8000fee:	701d      	strb	r5, [r3, #0]
			sprintf(pcWriteBuffer, "\r\n");
 8000ff0:	490f      	ldr	r1, [pc, #60]	; (8001030 <xCLI_ShowConfig+0x1f8>)
 8000ff2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ff4:	f00a fbbc 	bl	800b770 <sprintf_>
			retVal = pdFALSE;
 8000ff8:	4628      	mov	r0, r5
	return retVal;
 8000ffa:	e73f      	b.n	8000e7c <xCLI_ShowConfig+0x44>
 8000ffc:	2000010c 	.word	0x2000010c
 8001000:	200000d4 	.word	0x200000d4
 8001004:	0800c30c 	.word	0x0800c30c
 8001008:	0800c32c 	.word	0x0800c32c
 800100c:	0800c348 	.word	0x0800c348
 8001010:	0800c364 	.word	0x0800c364
 8001014:	0800c380 	.word	0x0800c380
 8001018:	0800c398 	.word	0x0800c398
 800101c:	0800c3ac 	.word	0x0800c3ac
 8001020:	0800c434 	.word	0x0800c434
 8001024:	0800c4a4 	.word	0x0800c4a4
 8001028:	0800c528 	.word	0x0800c528
 800102c:	0800c5a8 	.word	0x0800c5a8
 8001030:	0800c220 	.word	0x0800c220

08001034 <xCLI_GetCommStats>:

BaseType_t xCLI_GetCommStats( char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ){
 8001034:	b530      	push	{r4, r5, lr}
 8001036:	b085      	sub	sp, #20
 8001038:	4605      	mov	r5, r0
	BaseType_t retVal = pdTRUE;
	static uint8_t step = 0;

	uint8_t ipArr[4];

	switch(step){
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <xCLI_GetCommStats+0xa4>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d022      	beq.n	8001088 <xCLI_GetCommStats+0x54>
 8001042:	b14b      	cbz	r3, 8001058 <xCLI_GetCommStats+0x24>
 8001044:	2b02      	cmp	r3, #2
 8001046:	d036      	beq.n	80010b6 <xCLI_GetCommStats+0x82>
					RuntimeStats_TelnetGetTxCnt(), RuntimeStats_TelnetGetRxCnt());
			step++;
			break;

		default:
			step = 0;
 8001048:	2400      	movs	r4, #0
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <xCLI_GetCommStats+0xa4>)
 800104c:	701c      	strb	r4, [r3, #0]
			sprintf(pcWriteBuffer, "\r\n");
 800104e:	4923      	ldr	r1, [pc, #140]	; (80010dc <xCLI_GetCommStats+0xa8>)
 8001050:	f00a fb8e 	bl	800b770 <sprintf_>
			retVal = pdFALSE;
 8001054:	4620      	mov	r0, r4
			break;
	}
	return retVal;
 8001056:	e015      	b.n	8001084 <xCLI_GetCommStats+0x50>
			RuntimeStats_TelnetGetCurIP(ipArr);
 8001058:	a803      	add	r0, sp, #12
 800105a:	f001 fb03 	bl	8002664 <RuntimeStats_TelnetGetCurIP>
					ipArr[0], ipArr[1], ipArr[2], ipArr[3]);
 800105e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001062:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001066:	f89d 100e 	ldrb.w	r1, [sp, #14]
 800106a:	f89d 000f 	ldrb.w	r0, [sp, #15]
			sprintf(pcWriteBuffer, "Telnet statistics:\r\n"
 800106e:	9001      	str	r0, [sp, #4]
 8001070:	9100      	str	r1, [sp, #0]
 8001072:	491b      	ldr	r1, [pc, #108]	; (80010e0 <xCLI_GetCommStats+0xac>)
 8001074:	4628      	mov	r0, r5
 8001076:	f00a fb7b 	bl	800b770 <sprintf_>
			step++;
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <xCLI_GetCommStats+0xa4>)
 800107c:	7813      	ldrb	r3, [r2, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 8001082:	2001      	movs	r0, #1
}
 8001084:	b005      	add	sp, #20
 8001086:	bd30      	pop	{r4, r5, pc}
			RuntimeStats_TelnetGetLastIP(ipArr);
 8001088:	a803      	add	r0, sp, #12
 800108a:	f001 faf1 	bl	8002670 <RuntimeStats_TelnetGetLastIP>
					ipArr[0], ipArr[1], ipArr[2], ipArr[3]);
 800108e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001092:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001096:	f89d 100e 	ldrb.w	r1, [sp, #14]
 800109a:	f89d 000f 	ldrb.w	r0, [sp, #15]
			sprintf(pcWriteBuffer, "    Last IP connected: %d.%d.%d.%d\r\n",
 800109e:	9001      	str	r0, [sp, #4]
 80010a0:	9100      	str	r1, [sp, #0]
 80010a2:	4910      	ldr	r1, [pc, #64]	; (80010e4 <xCLI_GetCommStats+0xb0>)
 80010a4:	4628      	mov	r0, r5
 80010a6:	f00a fb63 	bl	800b770 <sprintf_>
			step++;
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <xCLI_GetCommStats+0xa4>)
 80010ac:	7813      	ldrb	r3, [r2, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 80010b2:	2001      	movs	r0, #1
			break;
 80010b4:	e7e6      	b.n	8001084 <xCLI_GetCommStats+0x50>
			sprintf(pcWriteBuffer, "    TX count: %d\r\n    RX count: %d\r\n",
 80010b6:	f001 facf 	bl	8002658 <RuntimeStats_TelnetGetTxCnt>
 80010ba:	4604      	mov	r4, r0
 80010bc:	f001 fac6 	bl	800264c <RuntimeStats_TelnetGetRxCnt>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4622      	mov	r2, r4
 80010c4:	4908      	ldr	r1, [pc, #32]	; (80010e8 <xCLI_GetCommStats+0xb4>)
 80010c6:	4628      	mov	r0, r5
 80010c8:	f00a fb52 	bl	800b770 <sprintf_>
			step++;
 80010cc:	4a02      	ldr	r2, [pc, #8]	; (80010d8 <xCLI_GetCommStats+0xa4>)
 80010ce:	7813      	ldrb	r3, [r2, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	7013      	strb	r3, [r2, #0]
	BaseType_t retVal = pdTRUE;
 80010d4:	2001      	movs	r0, #1
			break;
 80010d6:	e7d5      	b.n	8001084 <xCLI_GetCommStats+0x50>
 80010d8:	2000010d 	.word	0x2000010d
 80010dc:	0800c220 	.word	0x0800c220
 80010e0:	0800c280 	.word	0x0800c280
 80010e4:	0800c2bc 	.word	0x0800c2bc
 80010e8:	0800c2e4 	.word	0x0800c2e4

080010ec <CLI_Init>:
void CLI_Init (void){
 80010ec:	b508      	push	{r3, lr}
	FreeRTOS_CLIRegisterCommand(&xEreaseEECmd);
 80010ee:	4808      	ldr	r0, [pc, #32]	; (8001110 <CLI_Init+0x24>)
 80010f0:	f009 feb0 	bl	800ae54 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xShowConfigCmd);
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <CLI_Init+0x28>)
 80010f6:	f009 fead 	bl	800ae54 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetSysStatusCmd);
 80010fa:	4807      	ldr	r0, [pc, #28]	; (8001118 <CLI_Init+0x2c>)
 80010fc:	f009 feaa 	bl	800ae54 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetRtosStatsCmd);
 8001100:	4806      	ldr	r0, [pc, #24]	; (800111c <CLI_Init+0x30>)
 8001102:	f009 fea7 	bl	800ae54 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&xGetCommStatsCmd);
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <CLI_Init+0x34>)
 8001108:	f009 fea4 	bl	800ae54 <FreeRTOS_CLIRegisterCommand>
}
 800110c:	bd08      	pop	{r3, pc}
 800110e:	bf00      	nop
 8001110:	0800c5cc 	.word	0x0800c5cc
 8001114:	0800c60c 	.word	0x0800c60c
 8001118:	0800c5fc 	.word	0x0800c5fc
 800111c:	0800c5ec 	.word	0x0800c5ec
 8001120:	0800c5dc 	.word	0x0800c5dc

08001124 <Config_CalculateCRC>:
		configuration.dummy = MAGIC_WORD;
		configuration.crc = Config_CalculateCRC();
	}
}

static uint32_t Config_CalculateCRC (void){
 8001124:	b508      	push	{r3, lr}
	return HAL_CRC_Calculate(&hcrc, (uint32_t*)&configuration, (CONFIG_BYTES_LEN - 2)/4);
 8001126:	220d      	movs	r2, #13
 8001128:	4902      	ldr	r1, [pc, #8]	; (8001134 <Config_CalculateCRC+0x10>)
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <Config_CalculateCRC+0x14>)
 800112c:	f004 fa99 	bl	8005662 <HAL_CRC_Calculate>
}
 8001130:	bd08      	pop	{r3, pc}
 8001132:	bf00      	nop
 8001134:	20000110 	.word	0x20000110
 8001138:	20003014 	.word	0x20003014

0800113c <Config_CheckData>:

static CONFStatus_t Config_CheckData (void){
 800113c:	b510      	push	{r4, lr}
	CONFStatus_t retval;
	uint32_t readCRC, actualCRC;

	readCRC = configuration.crc;
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <Config_CheckData+0x18>)
 8001140:	6b5c      	ldr	r4, [r3, #52]	; 0x34
	actualCRC = Config_CalculateCRC();
 8001142:	f7ff ffef 	bl	8001124 <Config_CalculateCRC>

	if(readCRC != actualCRC){
 8001146:	4284      	cmp	r4, r0
 8001148:	d101      	bne.n	800114e <Config_CheckData+0x12>
		if(configuration.dummy != MAGIC_WORD){
			retval = CONF_ERR_NOCONF;
		}
		retval = CONF_ERR_CRC;
	}else{
		retval = CONF_OK;
 800114a:	2000      	movs	r0, #0
	}
	return retval;
}
 800114c:	bd10      	pop	{r4, pc}
		retval = CONF_ERR_CRC;
 800114e:	f06f 0003 	mvn.w	r0, #3
 8001152:	e7fb      	b.n	800114c <Config_CheckData+0x10>
 8001154:	20000110 	.word	0x20000110

08001158 <Config_ChangeValue>:
	if(value != NULL && param < PARAM_NUMS){
 8001158:	2900      	cmp	r1, #0
 800115a:	d061      	beq.n	8001220 <Config_ChangeValue+0xc8>
 800115c:	2811      	cmp	r0, #17
 800115e:	d85f      	bhi.n	8001220 <Config_ChangeValue+0xc8>
void Config_ChangeValue(uint32_t param, void* value){
 8001160:	b510      	push	{r4, lr}
		switch(param){
 8001162:	2811      	cmp	r0, #17
 8001164:	d80d      	bhi.n	8001182 <Config_ChangeValue+0x2a>
 8001166:	e8df f000 	tbb	[pc, r0]
 800116a:	1409      	.short	0x1409
 800116c:	24201c18 	.word	0x24201c18
 8001170:	34302c28 	.word	0x34302c28
 8001174:	44403c38 	.word	0x44403c38
 8001178:	56514c48 	.word	0x56514c48
				memcpy(&configuration.RegulationConfig.CWU_heater_power, value, 4);
 800117c:	680a      	ldr	r2, [r1, #0]
 800117e:	4b29      	ldr	r3, [pc, #164]	; (8001224 <Config_ChangeValue+0xcc>)
 8001180:	601a      	str	r2, [r3, #0]
		configuration.dummy = MAGIC_WORD;
 8001182:	4c28      	ldr	r4, [pc, #160]	; (8001224 <Config_ChangeValue+0xcc>)
 8001184:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8001188:	8663      	strh	r3, [r4, #50]	; 0x32
		configuration.crc = Config_CalculateCRC();
 800118a:	f7ff ffcb 	bl	8001124 <Config_CalculateCRC>
 800118e:	6360      	str	r0, [r4, #52]	; 0x34
}
 8001190:	bd10      	pop	{r4, pc}
				memcpy(&configuration.RegulationConfig.CO_heater_power, value, 4);
 8001192:	680a      	ldr	r2, [r1, #0]
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <Config_ChangeValue+0xcc>)
 8001196:	605a      	str	r2, [r3, #4]
				break;
 8001198:	e7f3      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.net_max_power, value, 4);
 800119a:	680a      	ldr	r2, [r1, #0]
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <Config_ChangeValue+0xcc>)
 800119e:	609a      	str	r2, [r3, #8]
				break;
 80011a0:	e7ef      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.counter_address, value, 1);
 80011a2:	780a      	ldrb	r2, [r1, #0]
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <Config_ChangeValue+0xcc>)
 80011a6:	731a      	strb	r2, [r3, #12]
				break;
 80011a8:	e7eb      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.temperature_address, value, 1);
 80011aa:	780a      	ldrb	r2, [r1, #0]
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <Config_ChangeValue+0xcc>)
 80011ae:	735a      	strb	r2, [r3, #13]
				break;
 80011b0:	e7e7      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.acumulated_power_coeff, value, 1);
 80011b2:	780a      	ldrb	r2, [r1, #0]
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <Config_ChangeValue+0xcc>)
 80011b6:	739a      	strb	r2, [r3, #14]
				break;
 80011b8:	e7e3      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.heater_power_coeff, value, 1);
 80011ba:	780a      	ldrb	r2, [r1, #0]
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <Config_ChangeValue+0xcc>)
 80011be:	73da      	strb	r2, [r3, #15]
				break;
 80011c0:	e7df      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CO_hi_temp, value, 1);
 80011c2:	780a      	ldrb	r2, [r1, #0]
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <Config_ChangeValue+0xcc>)
 80011c6:	741a      	strb	r2, [r3, #16]
				break;
 80011c8:	e7db      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CO_lo_temp, value, 1);
 80011ca:	780a      	ldrb	r2, [r1, #0]
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <Config_ChangeValue+0xcc>)
 80011ce:	745a      	strb	r2, [r3, #17]
				break;
 80011d0:	e7d7      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CWU_hi_temp, value, 1);
 80011d2:	780a      	ldrb	r2, [r1, #0]
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <Config_ChangeValue+0xcc>)
 80011d6:	749a      	strb	r2, [r3, #18]
				break;
 80011d8:	e7d3      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.CWU_lo_temp, value, 1);
 80011da:	780a      	ldrb	r2, [r1, #0]
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <Config_ChangeValue+0xcc>)
 80011de:	74da      	strb	r2, [r3, #19]
				break;
 80011e0:	e7cf      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.exported_power, value, 4);
 80011e2:	680a      	ldr	r2, [r1, #0]
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <Config_ChangeValue+0xcc>)
 80011e6:	615a      	str	r2, [r3, #20]
				break;
 80011e8:	e7cb      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.imported_power, value, 4);
 80011ea:	680a      	ldr	r2, [r1, #0]
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <Config_ChangeValue+0xcc>)
 80011ee:	619a      	str	r2, [r3, #24]
				break;
 80011f0:	e7c7      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.RegulationConfig.acumulated_power, value, 4);
 80011f2:	680a      	ldr	r2, [r1, #0]
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <Config_ChangeValue+0xcc>)
 80011f6:	61da      	str	r2, [r3, #28]
				break;
 80011f8:	e7c3      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.ipAddress[0], value, 4);
 80011fa:	680a      	ldr	r2, [r1, #0]
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <Config_ChangeValue+0xcc>)
 80011fe:	621a      	str	r2, [r3, #32]
				break;
 8001200:	e7bf      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.subnetMask[0], value, 1);
 8001202:	780a      	ldrb	r2, [r1, #0]
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <Config_ChangeValue+0xcc>)
 8001206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				break;
 800120a:	e7ba      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.gatewayAddress[0], value, 1);
 800120c:	780a      	ldrb	r2, [r1, #0]
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <Config_ChangeValue+0xcc>)
 8001210:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				break;
 8001214:	e7b5      	b.n	8001182 <Config_ChangeValue+0x2a>
				memcpy(&configuration.EthernetConfig.macAddress[0], value, 1);
 8001216:	780a      	ldrb	r2, [r1, #0]
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <Config_ChangeValue+0xcc>)
 800121a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				break;
 800121e:	e7b0      	b.n	8001182 <Config_ChangeValue+0x2a>
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000110 	.word	0x20000110

08001228 <Config_Save>:

CONFStatus_t Config_Save (void){
 8001228:	b508      	push	{r3, lr}
	CONFStatus_t retval;
	retval = (CONFStatus_t)EE_Write(&configuration, 0, CONFIG_BYTES_LEN);
 800122a:	2238      	movs	r2, #56	; 0x38
 800122c:	2100      	movs	r1, #0
 800122e:	4802      	ldr	r0, [pc, #8]	; (8001238 <Config_Save+0x10>)
 8001230:	f000 f8ec 	bl	800140c <EE_Write>
	return retval;
}
 8001234:	bd08      	pop	{r3, pc}
 8001236:	bf00      	nop
 8001238:	20000110 	.word	0x20000110

0800123c <Config_GetConfig>:
ConfigLoadStatus_t Config_GetConfigStatus(void){
	return configuartionStatus;
}

CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 800123c:	b1c0      	cbz	r0, 8001270 <Config_GetConfig+0x34>
CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
 800123e:	b4f0      	push	{r4, r5, r6, r7}
 8001240:	4604      	mov	r4, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <Config_GetConfig+0x40>)
 8001244:	f993 3000 	ldrsb.w	r3, [r3]
 8001248:	b9ab      	cbnz	r3, 8001276 <Config_GetConfig+0x3a>
		memcpy(config, &configuration, CONFIG_BYTES_LEN);
 800124a:	4d0d      	ldr	r5, [pc, #52]	; (8001280 <Config_GetConfig+0x44>)
 800124c:	f105 0730 	add.w	r7, r5, #48	; 0x30
 8001250:	462e      	mov	r6, r5
 8001252:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001254:	6020      	str	r0, [r4, #0]
 8001256:	6061      	str	r1, [r4, #4]
 8001258:	60a2      	str	r2, [r4, #8]
 800125a:	60e3      	str	r3, [r4, #12]
 800125c:	4635      	mov	r5, r6
 800125e:	3410      	adds	r4, #16
 8001260:	42be      	cmp	r6, r7
 8001262:	d1f5      	bne.n	8001250 <Config_GetConfig+0x14>
 8001264:	cd03      	ldmia	r5!, {r0, r1}
 8001266:	6020      	str	r0, [r4, #0]
 8001268:	6061      	str	r1, [r4, #4]
		return CONF_OK;
 800126a:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 800126c:	bcf0      	pop	{r4, r5, r6, r7}
 800126e:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 8001270:	f06f 0001 	mvn.w	r0, #1
}
 8001274:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 8001276:	f06f 0004 	mvn.w	r0, #4
 800127a:	e7f7      	b.n	800126c <Config_GetConfig+0x30>
 800127c:	2000010e 	.word	0x2000010e
 8001280:	20000110 	.word	0x20000110

08001284 <Config_GetEthernetConfig>:

CONFStatus_t Config_GetEthernetConfig (EthernetConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8001284:	b180      	cbz	r0, 80012a8 <Config_GetEthernetConfig+0x24>
CONFStatus_t Config_GetEthernetConfig (EthernetConfig_t* config){
 8001286:	b430      	push	{r4, r5}
 8001288:	4605      	mov	r5, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <Config_GetEthernetConfig+0x30>)
 800128c:	f993 3000 	ldrsb.w	r3, [r3]
 8001290:	b96b      	cbnz	r3, 80012ae <Config_GetEthernetConfig+0x2a>
		memcpy(config, &configuration.EthernetConfig, ETH_CONFIG_BYTES_LEN);
 8001292:	4c09      	ldr	r4, [pc, #36]	; (80012b8 <Config_GetEthernetConfig+0x34>)
 8001294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001296:	6028      	str	r0, [r5, #0]
 8001298:	6069      	str	r1, [r5, #4]
 800129a:	60aa      	str	r2, [r5, #8]
 800129c:	60eb      	str	r3, [r5, #12]
 800129e:	8823      	ldrh	r3, [r4, #0]
 80012a0:	822b      	strh	r3, [r5, #16]
		return CONF_OK;
 80012a2:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 80012a4:	bc30      	pop	{r4, r5}
 80012a6:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 80012a8:	f06f 0001 	mvn.w	r0, #1
}
 80012ac:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 80012ae:	f06f 0004 	mvn.w	r0, #4
 80012b2:	e7f7      	b.n	80012a4 <Config_GetEthernetConfig+0x20>
 80012b4:	2000010e 	.word	0x2000010e
 80012b8:	20000130 	.word	0x20000130

080012bc <Config_GetRegConfig>:

CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 80012bc:	b198      	cbz	r0, 80012e6 <Config_GetRegConfig+0x2a>
CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
 80012be:	b430      	push	{r4, r5}
 80012c0:	4605      	mov	r5, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <Config_GetRegConfig+0x38>)
 80012c4:	f993 3000 	ldrsb.w	r3, [r3]
 80012c8:	b983      	cbnz	r3, 80012ec <Config_GetRegConfig+0x30>
		memcpy(config, &configuration.RegulationConfig, REG_CONFIG_BYTES_LEN);
 80012ca:	4c0b      	ldr	r4, [pc, #44]	; (80012f8 <Config_GetRegConfig+0x3c>)
 80012cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ce:	6028      	str	r0, [r5, #0]
 80012d0:	6069      	str	r1, [r5, #4]
 80012d2:	60aa      	str	r2, [r5, #8]
 80012d4:	60eb      	str	r3, [r5, #12]
 80012d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d8:	6128      	str	r0, [r5, #16]
 80012da:	6169      	str	r1, [r5, #20]
 80012dc:	61aa      	str	r2, [r5, #24]
 80012de:	61eb      	str	r3, [r5, #28]
		return CONF_OK;
 80012e0:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 80012e2:	bc30      	pop	{r4, r5}
 80012e4:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 80012e6:	f06f 0001 	mvn.w	r0, #1
}
 80012ea:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 80012ec:	f06f 0004 	mvn.w	r0, #4
 80012f0:	e7f7      	b.n	80012e2 <Config_GetRegConfig+0x26>
 80012f2:	bf00      	nop
 80012f4:	2000010e 	.word	0x2000010e
 80012f8:	20000110 	.word	0x20000110

080012fc <Config_Copy>:

CONFStatus_t Config_Copy (ConfigStruct_t* dest, ConfigStruct_t* src){
	if((dest == NULL) || (src == NULL)) return CONF_ERR_NULL;
 80012fc:	b1b0      	cbz	r0, 800132c <Config_Copy+0x30>
 80012fe:	b1c1      	cbz	r1, 8001332 <Config_Copy+0x36>
CONFStatus_t Config_Copy (ConfigStruct_t* dest, ConfigStruct_t* src){
 8001300:	b470      	push	{r4, r5, r6}
	memcpy(dest, src, CONFIG_BYTES_LEN);
 8001302:	460a      	mov	r2, r1
 8001304:	3130      	adds	r1, #48	; 0x30
 8001306:	6816      	ldr	r6, [r2, #0]
 8001308:	6855      	ldr	r5, [r2, #4]
 800130a:	6894      	ldr	r4, [r2, #8]
 800130c:	68d3      	ldr	r3, [r2, #12]
 800130e:	6006      	str	r6, [r0, #0]
 8001310:	6045      	str	r5, [r0, #4]
 8001312:	6084      	str	r4, [r0, #8]
 8001314:	60c3      	str	r3, [r0, #12]
 8001316:	3210      	adds	r2, #16
 8001318:	3010      	adds	r0, #16
 800131a:	428a      	cmp	r2, r1
 800131c:	d1f3      	bne.n	8001306 <Config_Copy+0xa>
 800131e:	6811      	ldr	r1, [r2, #0]
 8001320:	6853      	ldr	r3, [r2, #4]
 8001322:	6001      	str	r1, [r0, #0]
 8001324:	6043      	str	r3, [r0, #4]
	return CONF_OK;
 8001326:	2000      	movs	r0, #0
}
 8001328:	bc70      	pop	{r4, r5, r6}
 800132a:	4770      	bx	lr
	if((dest == NULL) || (src == NULL)) return CONF_ERR_NULL;
 800132c:	f06f 0001 	mvn.w	r0, #1
 8001330:	4770      	bx	lr
 8001332:	f06f 0001 	mvn.w	r0, #1
}
 8001336:	4770      	bx	lr

08001338 <Config_Init>:
CONFStatus_t Config_Init(I2C_HandleTypeDef* iic){
 8001338:	b510      	push	{r4, lr}
	configuartionStatus = CONF_STAT_INIT;
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <Config_Init+0x5c>)
 800133c:	22ff      	movs	r2, #255	; 0xff
 800133e:	701a      	strb	r2, [r3, #0]
	retval |= EE_Init(iic);
 8001340:	f000 f82e 	bl	80013a0 <EE_Init>
	retval = EE_Read(&configuration, 0, CONFIG_BYTES_LEN);
 8001344:	2238      	movs	r2, #56	; 0x38
 8001346:	2100      	movs	r1, #0
 8001348:	4813      	ldr	r0, [pc, #76]	; (8001398 <Config_Init+0x60>)
 800134a:	f000 f833 	bl	80013b4 <EE_Read>
 800134e:	4603      	mov	r3, r0
	if(retval == EE_OK){
 8001350:	b138      	cbz	r0, 8001362 <Config_Init+0x2a>
	if(retval == CONF_OK){
 8001352:	b153      	cbz	r3, 800136a <Config_Init+0x32>
		if((retval == CONF_ERR_NOCONF) || (retval == CONF_ERR_CRC)){
 8001354:	1d5a      	adds	r2, r3, #5
 8001356:	2a01      	cmp	r2, #1
 8001358:	d90c      	bls.n	8001374 <Config_Init+0x3c>
			configuartionStatus = CONF_STAT_ERROR;
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <Config_Init+0x5c>)
 800135c:	21fd      	movs	r1, #253	; 0xfd
 800135e:	7011      	strb	r1, [r2, #0]
 8001360:	e006      	b.n	8001370 <Config_Init+0x38>
		retval = Config_CheckData();
 8001362:	f7ff feeb 	bl	800113c <Config_CheckData>
 8001366:	4603      	mov	r3, r0
 8001368:	e7f3      	b.n	8001352 <Config_Init+0x1a>
		configuartionStatus = CONF_STAT_LOADED;
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <Config_Init+0x5c>)
 800136c:	2100      	movs	r1, #0
 800136e:	7011      	strb	r1, [r2, #0]
}
 8001370:	b258      	sxtb	r0, r3
 8001372:	bd10      	pop	{r4, pc}
			Config_Copy(&configuration, &defaultConfig);
 8001374:	4c08      	ldr	r4, [pc, #32]	; (8001398 <Config_Init+0x60>)
 8001376:	4909      	ldr	r1, [pc, #36]	; (800139c <Config_Init+0x64>)
 8001378:	4620      	mov	r0, r4
 800137a:	f7ff ffbf 	bl	80012fc <Config_Copy>
			configuration.crc = Config_CalculateCRC();
 800137e:	f7ff fed1 	bl	8001124 <Config_CalculateCRC>
 8001382:	6360      	str	r0, [r4, #52]	; 0x34
			retval = Config_Save();
 8001384:	f7ff ff50 	bl	8001228 <Config_Save>
 8001388:	4603      	mov	r3, r0
			configuartionStatus = CONF_STAT_NOCONF;
 800138a:	4a02      	ldr	r2, [pc, #8]	; (8001394 <Config_Init+0x5c>)
 800138c:	21fe      	movs	r1, #254	; 0xfe
 800138e:	7011      	strb	r1, [r2, #0]
 8001390:	e7ee      	b.n	8001370 <Config_Init+0x38>
 8001392:	bf00      	nop
 8001394:	2000010e 	.word	0x2000010e
 8001398:	20000110 	.word	0x20000110
 800139c:	0800c61c 	.word	0x0800c61c

080013a0 <EE_Init>:
#include "stm32f4xx_hal_i2c.h"

I2C_HandleTypeDef* ee_iic;

EE_StatusTypeDef EE_Init (I2C_HandleTypeDef* hi2c){
	if(hi2c != NULL){
 80013a0:	b118      	cbz	r0, 80013aa <EE_Init+0xa>
		ee_iic = hi2c;
 80013a2:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <EE_Init+0x10>)
 80013a4:	6010      	str	r0, [r2, #0]
		return EE_OK;
 80013a6:	2000      	movs	r0, #0
 80013a8:	4770      	bx	lr
	}
	return EE_ERR_NULL;
 80013aa:	f06f 0001 	mvn.w	r0, #1
}
 80013ae:	4770      	bx	lr
 80013b0:	20002aac 	.word	0x20002aac

080013b4 <EE_Read>:

EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;

	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 80013b4:	b1e0      	cbz	r0, 80013f0 <EE_Read+0x3c>
EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
 80013b6:	b510      	push	{r4, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	4604      	mov	r4, r0
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 80013bc:	b1da      	cbz	r2, 80013f6 <EE_Read+0x42>
 80013be:	4613      	mov	r3, r2
 80013c0:	460a      	mov	r2, r1

	dataBuf = (uint8_t*)data;
	i2cStatus= HAL_I2C_Mem_Read(ee_iic, EE_ADDR, addr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 80013c2:	4911      	ldr	r1, [pc, #68]	; (8001408 <EE_Read+0x54>)
 80013c4:	6808      	ldr	r0, [r1, #0]
 80013c6:	b299      	uxth	r1, r3
 80013c8:	3302      	adds	r3, #2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	9302      	str	r3, [sp, #8]
 80013ce:	9101      	str	r1, [sp, #4]
 80013d0:	9400      	str	r4, [sp, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	21a0      	movs	r1, #160	; 0xa0
 80013d6:	f005 f889 	bl	80064ec <HAL_I2C_Mem_Read>
	if(i2cStatus == HAL_OK){
 80013da:	b178      	cbz	r0, 80013fc <EE_Read+0x48>
		return EE_OK;
	}else if(i2cStatus == HAL_ERROR){
 80013dc:	2801      	cmp	r0, #1
 80013de:	d010      	beq.n	8001402 <EE_Read+0x4e>
		return EE_ERR_TIMEOUT;
	}else if(i2cStatus == HAL_BUSY){
 80013e0:	2802      	cmp	r0, #2
 80013e2:	d002      	beq.n	80013ea <EE_Read+0x36>
		return EE_ERR_BUSY;
	}else{
		return EE_ERR_TIMEOUT;
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013e8:	e009      	b.n	80013fe <EE_Read+0x4a>
		return EE_ERR_BUSY;
 80013ea:	f06f 0002 	mvn.w	r0, #2
 80013ee:	e006      	b.n	80013fe <EE_Read+0x4a>
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 80013f0:	f06f 0001 	mvn.w	r0, #1
	}
}
 80013f4:	4770      	bx	lr
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 80013f6:	f06f 0001 	mvn.w	r0, #1
 80013fa:	e000      	b.n	80013fe <EE_Read+0x4a>
		return EE_OK;
 80013fc:	2000      	movs	r0, #0
}
 80013fe:	b004      	add	sp, #16
 8001400:	bd10      	pop	{r4, pc}
		return EE_ERR_TIMEOUT;
 8001402:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001406:	e7fa      	b.n	80013fe <EE_Read+0x4a>
 8001408:	20002aac 	.word	0x20002aac

0800140c <EE_Write>:

EE_StatusTypeDef EE_Write (void* data, uint32_t addr, uint32_t len){
 800140c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001410:	b084      	sub	sp, #16
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;
	uint32_t datalen, i, pages, rest, bytelen, addrCpy;
	uint8_t eeBlock, eeAddr;

	if(data == NULL || len <= 0 || len >= EE_SIZE) return retval;
 8001412:	2800      	cmp	r0, #0
 8001414:	d05d      	beq.n	80014d2 <EE_Write+0xc6>
 8001416:	460e      	mov	r6, r1
 8001418:	4607      	mov	r7, r0
 800141a:	2a00      	cmp	r2, #0
 800141c:	d05c      	beq.n	80014d8 <EE_Write+0xcc>
 800141e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001422:	d25c      	bcs.n	80014de <EE_Write+0xd2>

	eeBlock = addr / EE_BLOCK_SIZE;
 8001424:	f3c1 2107 	ubfx	r1, r1, #8, #8
	eeAddr = addr % EE_BLOCK_SIZE;
 8001428:	b2f5      	uxtb	r5, r6

	dataBuf = (uint8_t*)data;
	datalen = len;
	addrCpy = addr;

	if(len <= EE_PAGE_SIZE){
 800142a:	2a10      	cmp	r2, #16
 800142c:	d90a      	bls.n	8001444 <EE_Write+0x38>
			retval = EE_OK;
		}
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
	}else{
		pages = datalen >> 4;
 800142e:	ea4f 1812 	mov.w	r8, r2, lsr #4
		rest = datalen % 16;
		if(rest) pages ++;
 8001432:	f012 090f 	ands.w	r9, r2, #15
 8001436:	d001      	beq.n	800143c <EE_Write+0x30>
 8001438:	f108 0801 	add.w	r8, r8, #1
		for(i = 0; i < pages; i++){
 800143c:	2500      	movs	r5, #0
	EE_StatusTypeDef retval = EE_ERR_NULL;
 800143e:	f06f 0a01 	mvn.w	sl, #1
		for(i = 0; i < pages; i++){
 8001442:	e036      	b.n	80014b2 <EE_Write+0xa6>
		i2cStatus= HAL_I2C_Mem_Write(ee_iic, EE_ADDR + eeBlock, eeAddr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <EE_Write+0xf0>)
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	b293      	uxth	r3, r2
 800144a:	1c94      	adds	r4, r2, #2
 800144c:	00a4      	lsls	r4, r4, #2
 800144e:	9402      	str	r4, [sp, #8]
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	9700      	str	r7, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	462a      	mov	r2, r5
 8001458:	31a0      	adds	r1, #160	; 0xa0
 800145a:	f004 ff93 	bl	8006384 <HAL_I2C_Mem_Write>
		if(i2cStatus == HAL_OK){
 800145e:	b130      	cbz	r0, 800146e <EE_Write+0x62>
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 8001460:	2801      	cmp	r0, #1
 8001462:	d03f      	beq.n	80014e4 <EE_Write+0xd8>
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 8001464:	2802      	cmp	r0, #2
 8001466:	d040      	beq.n	80014ea <EE_Write+0xde>
	EE_StatusTypeDef retval = EE_ERR_NULL;
 8001468:	f06f 0a01 	mvn.w	sl, #1
 800146c:	e02d      	b.n	80014ca <EE_Write+0xbe>
			vTaskDelay(EE_BYTE_WRITE_TIME * (len + 2));
 800146e:	4620      	mov	r0, r4
 8001470:	f008 fb4a 	bl	8009b08 <vTaskDelay>
			retval = EE_OK;
 8001474:	f04f 0a00 	mov.w	sl, #0
 8001478:	e027      	b.n	80014ca <EE_Write+0xbe>
			if(i == pages - 1){
				bytelen = rest;
 800147a:	464c      	mov	r4, r9
			}else{
				bytelen = 16;
			}
			i2cStatus = HAL_I2C_Mem_Write(ee_iic, EE_ADDR, addrCpy, 1, dataBuf, bytelen, EE_BYTE_WRITE_TIME * (bytelen + 2));
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <EE_Write+0xf0>)
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	1ca3      	adds	r3, r4, #2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	9302      	str	r3, [sp, #8]
 8001486:	9401      	str	r4, [sp, #4]
 8001488:	9700      	str	r7, [sp, #0]
 800148a:	2301      	movs	r3, #1
 800148c:	b2b2      	uxth	r2, r6
 800148e:	21a0      	movs	r1, #160	; 0xa0
 8001490:	f004 ff78 	bl	8006384 <HAL_I2C_Mem_Write>
			if(i2cStatus == HAL_OK){
 8001494:	b9a8      	cbnz	r0, 80014c2 <EE_Write+0xb6>
				dataBuf += bytelen;
 8001496:	4427      	add	r7, r4
				addrCpy += bytelen;
 8001498:	4426      	add	r6, r4
				retval = EE_OK;
				while(HAL_I2C_IsDeviceReady(ee_iic, EE_ADDR, 10, 10) != HAL_OK);
 800149a:	230a      	movs	r3, #10
 800149c:	461a      	mov	r2, r3
 800149e:	21a0      	movs	r1, #160	; 0xa0
 80014a0:	4816      	ldr	r0, [pc, #88]	; (80014fc <EE_Write+0xf0>)
 80014a2:	6800      	ldr	r0, [r0, #0]
 80014a4:	f005 f98a 	bl	80067bc <HAL_I2C_IsDeviceReady>
 80014a8:	2800      	cmp	r0, #0
 80014aa:	d1f6      	bne.n	800149a <EE_Write+0x8e>
		for(i = 0; i < pages; i++){
 80014ac:	3501      	adds	r5, #1
				retval = EE_OK;
 80014ae:	f04f 0a00 	mov.w	sl, #0
		for(i = 0; i < pages; i++){
 80014b2:	4545      	cmp	r5, r8
 80014b4:	d209      	bcs.n	80014ca <EE_Write+0xbe>
			if(i == pages - 1){
 80014b6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80014ba:	42ab      	cmp	r3, r5
 80014bc:	d0dd      	beq.n	800147a <EE_Write+0x6e>
				bytelen = 16;
 80014be:	2410      	movs	r4, #16
 80014c0:	e7dc      	b.n	800147c <EE_Write+0x70>
				//vTaskDelay((bytelen + 2) * EE_BYTE_WRITE_TIME);
			}else{
				if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 80014c2:	2801      	cmp	r0, #1
 80014c4:	d014      	beq.n	80014f0 <EE_Write+0xe4>
				else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 80014c6:	2802      	cmp	r0, #2
 80014c8:	d015      	beq.n	80014f6 <EE_Write+0xea>
				break;
			}
		}
	}
	return retval;
}
 80014ca:	4650      	mov	r0, sl
 80014cc:	b004      	add	sp, #16
 80014ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if(data == NULL || len <= 0 || len >= EE_SIZE) return retval;
 80014d2:	f06f 0a01 	mvn.w	sl, #1
 80014d6:	e7f8      	b.n	80014ca <EE_Write+0xbe>
 80014d8:	f06f 0a01 	mvn.w	sl, #1
 80014dc:	e7f5      	b.n	80014ca <EE_Write+0xbe>
 80014de:	f06f 0a01 	mvn.w	sl, #1
 80014e2:	e7f2      	b.n	80014ca <EE_Write+0xbe>
		else if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 80014e4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80014e8:	e7ef      	b.n	80014ca <EE_Write+0xbe>
		else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 80014ea:	f06f 0a02 	mvn.w	sl, #2
 80014ee:	e7ec      	b.n	80014ca <EE_Write+0xbe>
				if(i2cStatus == HAL_ERROR) retval = EE_ERR_TIMEOUT;
 80014f0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80014f4:	e7e9      	b.n	80014ca <EE_Write+0xbe>
				else if(i2cStatus == HAL_BUSY) retval = EE_ERR_BUSY;
 80014f6:	f06f 0a02 	mvn.w	sl, #2
 80014fa:	e7e6      	b.n	80014ca <EE_Write+0xbe>
 80014fc:	20002aac 	.word	0x20002aac

08001500 <EE_Erease>:

EE_StatusTypeDef EE_Erease (void){
 8001500:	b530      	push	{r4, r5, lr}
 8001502:	b085      	sub	sp, #20
	uint32_t i;
	int32_t retval = 0;
	uint8_t blankData[16];
	memset(blankData, 255, 16);
 8001504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	9303      	str	r3, [sp, #12]
	int32_t retval = 0;
 8001510:	2500      	movs	r5, #0

	for(i = 0; i < EE_SIZE; i += 16){
 8001512:	462c      	mov	r4, r5
 8001514:	e006      	b.n	8001524 <EE_Erease+0x24>
		retval |= EE_Write(blankData, i, 16);
 8001516:	2210      	movs	r2, #16
 8001518:	4621      	mov	r1, r4
 800151a:	4668      	mov	r0, sp
 800151c:	f7ff ff76 	bl	800140c <EE_Write>
 8001520:	4305      	orrs	r5, r0
	for(i = 0; i < EE_SIZE; i += 16){
 8001522:	3410      	adds	r4, #16
 8001524:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001528:	d3f5      	bcc.n	8001516 <EE_Erease+0x16>
	}
	return retval;
}
 800152a:	b268      	sxtb	r0, r5
 800152c:	b005      	add	sp, #20
 800152e:	bd30      	pop	{r4, r5, pc}

08001530 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001530:	b530      	push	{r4, r5, lr}
 8001532:	b083      	sub	sp, #12
 8001534:	4605      	mov	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001536:	4c16      	ldr	r4, [pc, #88]	; (8001590 <WIZCHIP_READ+0x60>)
 8001538:	68e3      	ldr	r3, [r4, #12]
 800153a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800153c:	6963      	ldr	r3, [r4, #20]
 800153e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001542:	b9b3      	cbnz	r3, 8001572 <WIZCHIP_READ+0x42>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001544:	4c12      	ldr	r4, [pc, #72]	; (8001590 <WIZCHIP_READ+0x60>)
 8001546:	6a23      	ldr	r3, [r4, #32]
 8001548:	f3c5 4007 	ubfx	r0, r5, #16, #8
 800154c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800154e:	6a23      	ldr	r3, [r4, #32]
 8001550:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8001554:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001556:	6a23      	ldr	r3, [r4, #32]
 8001558:	b2e8      	uxtb	r0, r5
 800155a:	4798      	blx	r3
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800155c:	4c0c      	ldr	r4, [pc, #48]	; (8001590 <WIZCHIP_READ+0x60>)
 800155e:	69e3      	ldr	r3, [r4, #28]
 8001560:	4798      	blx	r3
 8001562:	4605      	mov	r5, r0

   WIZCHIP.CS._deselect();
 8001564:	69a3      	ldr	r3, [r4, #24]
 8001566:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001568:	6923      	ldr	r3, [r4, #16]
 800156a:	4798      	blx	r3
   return ret;
}
 800156c:	4628      	mov	r0, r5
 800156e:	b003      	add	sp, #12
 8001570:	bd30      	pop	{r4, r5, pc}
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001572:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0e5      	beq.n	8001544 <WIZCHIP_READ+0x14>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001578:	0c2a      	lsrs	r2, r5, #16
 800157a:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800157e:	0a2a      	lsrs	r2, r5, #8
 8001580:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001584:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001588:	2103      	movs	r1, #3
 800158a:	a801      	add	r0, sp, #4
 800158c:	4798      	blx	r3
 800158e:	e7e5      	b.n	800155c <WIZCHIP_READ+0x2c>
 8001590:	20000004 	.word	0x20000004

08001594 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001594:	b570      	push	{r4, r5, r6, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	4604      	mov	r4, r0
 800159a:	460e      	mov	r6, r1
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800159c:	4d16      	ldr	r5, [pc, #88]	; (80015f8 <WIZCHIP_WRITE+0x64>)
 800159e:	68eb      	ldr	r3, [r5, #12]
 80015a0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80015a2:	696b      	ldr	r3, [r5, #20]
 80015a4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80015a6:	f044 0404 	orr.w	r4, r4, #4

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80015aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80015ac:	b1a3      	cbz	r3, 80015d8 <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80015ae:	0c22      	lsrs	r2, r4, #16
 80015b0:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80015b4:	0a22      	lsrs	r2, r4, #8
 80015b6:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80015ba:	f88d 4006 	strb.w	r4, [sp, #6]
		spi_data[3] = wb;
 80015be:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80015c2:	2104      	movs	r1, #4
 80015c4:	eb0d 0001 	add.w	r0, sp, r1
 80015c8:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80015ca:	4c0b      	ldr	r4, [pc, #44]	; (80015f8 <WIZCHIP_WRITE+0x64>)
 80015cc:	69a3      	ldr	r3, [r4, #24]
 80015ce:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80015d0:	6923      	ldr	r3, [r4, #16]
 80015d2:	4798      	blx	r3
}
 80015d4:	b002      	add	sp, #8
 80015d6:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80015d8:	6a2b      	ldr	r3, [r5, #32]
 80015da:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80015de:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80015e0:	6a2b      	ldr	r3, [r5, #32]
 80015e2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80015e6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80015e8:	6a2b      	ldr	r3, [r5, #32]
 80015ea:	b2e0      	uxtb	r0, r4
 80015ec:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80015ee:	6a2b      	ldr	r3, [r5, #32]
 80015f0:	4630      	mov	r0, r6
 80015f2:	4798      	blx	r3
 80015f4:	e7e9      	b.n	80015ca <WIZCHIP_WRITE+0x36>
 80015f6:	bf00      	nop
 80015f8:	20000004 	.word	0x20000004

080015fc <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80015fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fe:	b083      	sub	sp, #12
 8001600:	4604      	mov	r4, r0
 8001602:	460e      	mov	r6, r1
 8001604:	4615      	mov	r5, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001606:	4f1c      	ldr	r7, [pc, #112]	; (8001678 <WIZCHIP_READ_BUF+0x7c>)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	b96b      	cbnz	r3, 8001630 <WIZCHIP_READ_BUF+0x34>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001614:	4f18      	ldr	r7, [pc, #96]	; (8001678 <WIZCHIP_READ_BUF+0x7c>)
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800161c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001624:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	b2e0      	uxtb	r0, r4
 800162a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800162c:	2400      	movs	r4, #0
 800162e:	e019      	b.n	8001664 <WIZCHIP_READ_BUF+0x68>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0ee      	beq.n	8001614 <WIZCHIP_READ_BUF+0x18>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001636:	0c22      	lsrs	r2, r4, #16
 8001638:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800163c:	0a22      	lsrs	r2, r4, #8
 800163e:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001642:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001646:	2103      	movs	r1, #3
 8001648:	a801      	add	r0, sp, #4
 800164a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <WIZCHIP_READ_BUF+0x7c>)
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	4629      	mov	r1, r5
 8001652:	4630      	mov	r0, r6
 8001654:	4798      	blx	r3
 8001656:	e007      	b.n	8001668 <WIZCHIP_READ_BUF+0x6c>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <WIZCHIP_READ_BUF+0x7c>)
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	4798      	blx	r3
 800165e:	5530      	strb	r0, [r6, r4]
		for(i = 0; i < len; i++)
 8001660:	3401      	adds	r4, #1
 8001662:	b2a4      	uxth	r4, r4
 8001664:	42ac      	cmp	r4, r5
 8001666:	d3f7      	bcc.n	8001658 <WIZCHIP_READ_BUF+0x5c>
   }

   WIZCHIP.CS._deselect();
 8001668:	4c03      	ldr	r4, [pc, #12]	; (8001678 <WIZCHIP_READ_BUF+0x7c>)
 800166a:	69a3      	ldr	r3, [r4, #24]
 800166c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800166e:	6923      	ldr	r3, [r4, #16]
 8001670:	4798      	blx	r3
}
 8001672:	b003      	add	sp, #12
 8001674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001676:	bf00      	nop
 8001678:	20000004 	.word	0x20000004

0800167c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800167c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800167e:	b083      	sub	sp, #12
 8001680:	4604      	mov	r4, r0
 8001682:	460f      	mov	r7, r1
 8001684:	4616      	mov	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001686:	4d1b      	ldr	r5, [pc, #108]	; (80016f4 <WIZCHIP_WRITE_BUF+0x78>)
 8001688:	68eb      	ldr	r3, [r5, #12]
 800168a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800168c:	696b      	ldr	r3, [r5, #20]
 800168e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001690:	f044 0404 	orr.w	r4, r4, #4

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001694:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001696:	b1b3      	cbz	r3, 80016c6 <WIZCHIP_WRITE_BUF+0x4a>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001698:	0c22      	lsrs	r2, r4, #16
 800169a:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800169e:	0a22      	lsrs	r2, r4, #8
 80016a0:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80016a4:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80016a8:	2103      	movs	r1, #3
 80016aa:	a801      	add	r0, sp, #4
 80016ac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <WIZCHIP_WRITE_BUF+0x78>)
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	4631      	mov	r1, r6
 80016b4:	4638      	mov	r0, r7
 80016b6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80016b8:	4c0e      	ldr	r4, [pc, #56]	; (80016f4 <WIZCHIP_WRITE_BUF+0x78>)
 80016ba:	69a3      	ldr	r3, [r4, #24]
 80016bc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80016be:	6923      	ldr	r3, [r4, #16]
 80016c0:	4798      	blx	r3
}
 80016c2:	b003      	add	sp, #12
 80016c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80016c6:	6a2b      	ldr	r3, [r5, #32]
 80016c8:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80016cc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80016ce:	6a2b      	ldr	r3, [r5, #32]
 80016d0:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80016d4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80016d6:	6a2b      	ldr	r3, [r5, #32]
 80016d8:	b2e0      	uxtb	r0, r4
 80016da:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80016dc:	2400      	movs	r4, #0
 80016de:	e005      	b.n	80016ec <WIZCHIP_WRITE_BUF+0x70>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <WIZCHIP_WRITE_BUF+0x78>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	5d38      	ldrb	r0, [r7, r4]
 80016e6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80016e8:	3401      	adds	r4, #1
 80016ea:	b2a4      	uxth	r4, r4
 80016ec:	42b4      	cmp	r4, r6
 80016ee:	d3f7      	bcc.n	80016e0 <WIZCHIP_WRITE_BUF+0x64>
 80016f0:	e7e2      	b.n	80016b8 <WIZCHIP_WRITE_BUF+0x3c>
 80016f2:	bf00      	nop
 80016f4:	20000004 	.word	0x20000004

080016f8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80016f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016fc:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 80016fe:	2500      	movs	r5, #0
 8001700:	e001      	b.n	8001706 <getSn_TX_FSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
 8001702:	42a5      	cmp	r5, r4
 8001704:	d024      	beq.n	8001750 <getSn_TX_FSR+0x58>
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001706:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800170a:	f108 0801 	add.w	r8, r8, #1
 800170e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001712:	f508 5600 	add.w	r6, r8, #8192	; 0x2000
 8001716:	4630      	mov	r0, r6
 8001718:	f7ff ff0a 	bl	8001530 <WIZCHIP_READ>
 800171c:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800171e:	0224      	lsls	r4, r4, #8
 8001720:	b2a4      	uxth	r4, r4
 8001722:	f508 5804 	add.w	r8, r8, #8448	; 0x2100
 8001726:	4640      	mov	r0, r8
 8001728:	f7ff ff02 	bl	8001530 <WIZCHIP_READ>
 800172c:	fa14 f480 	uxtah	r4, r4, r0
 8001730:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 8001732:	2c00      	cmp	r4, #0
 8001734:	d0e5      	beq.n	8001702 <getSn_TX_FSR+0xa>
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001736:	4630      	mov	r0, r6
 8001738:	f7ff fefa 	bl	8001530 <WIZCHIP_READ>
 800173c:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800173e:	022d      	lsls	r5, r5, #8
 8001740:	b2ad      	uxth	r5, r5
 8001742:	4640      	mov	r0, r8
 8001744:	f7ff fef4 	bl	8001530 <WIZCHIP_READ>
 8001748:	fa15 f580 	uxtah	r5, r5, r0
 800174c:	b2ad      	uxth	r5, r5
 800174e:	e7d8      	b.n	8001702 <getSn_TX_FSR+0xa>
   return val;
}
 8001750:	4628      	mov	r0, r5
 8001752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001756 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800175a:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 800175c:	2500      	movs	r5, #0
 800175e:	e001      	b.n	8001764 <getSn_RX_RSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
 8001760:	42a5      	cmp	r5, r4
 8001762:	d024      	beq.n	80017ae <getSn_RX_RSR+0x58>
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001764:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8001768:	f108 0801 	add.w	r8, r8, #1
 800176c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001770:	f508 5618 	add.w	r6, r8, #9728	; 0x2600
 8001774:	4630      	mov	r0, r6
 8001776:	f7ff fedb 	bl	8001530 <WIZCHIP_READ>
 800177a:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800177c:	0224      	lsls	r4, r4, #8
 800177e:	b2a4      	uxth	r4, r4
 8001780:	f508 581c 	add.w	r8, r8, #9984	; 0x2700
 8001784:	4640      	mov	r0, r8
 8001786:	f7ff fed3 	bl	8001530 <WIZCHIP_READ>
 800178a:	fa14 f480 	uxtah	r4, r4, r0
 800178e:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 8001790:	2c00      	cmp	r4, #0
 8001792:	d0e5      	beq.n	8001760 <getSn_RX_RSR+0xa>
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001794:	4630      	mov	r0, r6
 8001796:	f7ff fecb 	bl	8001530 <WIZCHIP_READ>
 800179a:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800179c:	022d      	lsls	r5, r5, #8
 800179e:	b2ad      	uxth	r5, r5
 80017a0:	4640      	mov	r0, r8
 80017a2:	f7ff fec5 	bl	8001530 <WIZCHIP_READ>
 80017a6:	fa15 f580 	uxtah	r5, r5, r0
 80017aa:	b2ad      	uxth	r5, r5
 80017ac:	e7d8      	b.n	8001760 <getSn_RX_RSR+0xa>
   return val;
}
 80017ae:	4628      	mov	r0, r5
 80017b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080017b4 <wiz_send_data>:
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 80017b4:	b902      	cbnz	r2, 80017b8 <wiz_send_data+0x4>
 80017b6:	4770      	bx	lr
{
 80017b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017bc:	4615      	mov	r5, r2
 80017be:	460f      	mov	r7, r1
   ptr = getSn_TX_WR(sn);
 80017c0:	0084      	lsls	r4, r0, #2
 80017c2:	f104 0901 	add.w	r9, r4, #1
 80017c6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80017ca:	f509 5810 	add.w	r8, r9, #9216	; 0x2400
 80017ce:	4640      	mov	r0, r8
 80017d0:	f7ff feae 	bl	8001530 <WIZCHIP_READ>
 80017d4:	b286      	uxth	r6, r0
 80017d6:	0236      	lsls	r6, r6, #8
 80017d8:	b2b6      	uxth	r6, r6
 80017da:	f509 5914 	add.w	r9, r9, #9472	; 0x2500
 80017de:	4648      	mov	r0, r9
 80017e0:	f7ff fea6 	bl	8001530 <WIZCHIP_READ>
 80017e4:	fa16 f680 	uxtah	r6, r6, r0
 80017e8:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80017ea:	1ca0      	adds	r0, r4, #2
 80017ec:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80017ee:	462a      	mov	r2, r5
 80017f0:	4639      	mov	r1, r7
 80017f2:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 80017f6:	f7ff ff41 	bl	800167c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80017fa:	4435      	add	r5, r6
 80017fc:	b2ad      	uxth	r5, r5
   setSn_TX_WR(sn,ptr);
 80017fe:	0a29      	lsrs	r1, r5, #8
 8001800:	4640      	mov	r0, r8
 8001802:	f7ff fec7 	bl	8001594 <WIZCHIP_WRITE>
 8001806:	b2e9      	uxtb	r1, r5
 8001808:	4648      	mov	r0, r9
 800180a:	f7ff fec3 	bl	8001594 <WIZCHIP_WRITE>
}
 800180e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001812 <wiz_recv_data>:
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 8001812:	b902      	cbnz	r2, 8001816 <wiz_recv_data+0x4>
 8001814:	4770      	bx	lr
{
 8001816:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800181a:	4615      	mov	r5, r2
 800181c:	460f      	mov	r7, r1
   ptr = getSn_RX_RD(sn);
 800181e:	0084      	lsls	r4, r0, #2
 8001820:	f104 0901 	add.w	r9, r4, #1
 8001824:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001828:	f509 5820 	add.w	r8, r9, #10240	; 0x2800
 800182c:	4640      	mov	r0, r8
 800182e:	f7ff fe7f 	bl	8001530 <WIZCHIP_READ>
 8001832:	b286      	uxth	r6, r0
 8001834:	0236      	lsls	r6, r6, #8
 8001836:	b2b6      	uxth	r6, r6
 8001838:	f509 5924 	add.w	r9, r9, #10496	; 0x2900
 800183c:	4648      	mov	r0, r9
 800183e:	f7ff fe77 	bl	8001530 <WIZCHIP_READ>
 8001842:	fa16 f680 	uxtah	r6, r6, r0
 8001846:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8001848:	1ce0      	adds	r0, r4, #3
 800184a:	00c0      	lsls	r0, r0, #3
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800184c:	462a      	mov	r2, r5
 800184e:	4639      	mov	r1, r7
 8001850:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8001854:	f7ff fed2 	bl	80015fc <WIZCHIP_READ_BUF>
   ptr += len;
 8001858:	4435      	add	r5, r6
 800185a:	b2ad      	uxth	r5, r5
   
   setSn_RX_RD(sn,ptr);
 800185c:	0a29      	lsrs	r1, r5, #8
 800185e:	4640      	mov	r0, r8
 8001860:	f7ff fe98 	bl	8001594 <WIZCHIP_WRITE>
 8001864:	b2e9      	uxtb	r1, r5
 8001866:	4648      	mov	r0, r9
 8001868:	f7ff fe94 	bl	8001594 <WIZCHIP_WRITE>
}
 800186c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001870 <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 8001870:	2808      	cmp	r0, #8
 8001872:	d82e      	bhi.n	80018d2 <close+0x62>
{
 8001874:	b570      	push	{r4, r5, r6, lr}
 8001876:	4606      	mov	r6, r0
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001878:	0084      	lsls	r4, r0, #2
 800187a:	3401      	adds	r4, #1
 800187c:	00e4      	lsls	r4, r4, #3
 800187e:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8001882:	2110      	movs	r1, #16
 8001884:	4628      	mov	r0, r5
 8001886:	f7ff fe85 	bl	8001594 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800188a:	4628      	mov	r0, r5
 800188c:	f7ff fe50 	bl	8001530 <WIZCHIP_READ>
 8001890:	2800      	cmp	r0, #0
 8001892:	d1fa      	bne.n	800188a <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001894:	211f      	movs	r1, #31
 8001896:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800189a:	f7ff fe7b 	bl	8001594 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800189e:	2301      	movs	r3, #1
 80018a0:	40b3      	lsls	r3, r6
 80018a2:	43db      	mvns	r3, r3
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	490c      	ldr	r1, [pc, #48]	; (80018d8 <close+0x68>)
 80018a8:	880a      	ldrh	r2, [r1, #0]
 80018aa:	401a      	ands	r2, r3
 80018ac:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80018ae:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <close+0x6c>)
 80018b0:	8811      	ldrh	r1, [r2, #0]
 80018b2:	400b      	ands	r3, r1
 80018b4:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <close+0x70>)
 80018ba:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
	sock_pack_info[sn] = 0;
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <close+0x74>)
 80018c0:	5593      	strb	r3, [r2, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80018c2:	f504 7040 	add.w	r0, r4, #768	; 0x300
 80018c6:	f7ff fe33 	bl	8001530 <WIZCHIP_READ>
 80018ca:	2800      	cmp	r0, #0
 80018cc:	d1f9      	bne.n	80018c2 <close+0x52>
	return SOCK_OK;
 80018ce:	2001      	movs	r0, #1
}
 80018d0:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 80018d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80018d6:	4770      	bx	lr
 80018d8:	20000148 	.word	0x20000148
 80018dc:	2000014a 	.word	0x2000014a
 80018e0:	20000154 	.word	0x20000154
 80018e4:	2000014c 	.word	0x2000014c

080018e8 <socket>:
	CHECK_SOCKNUM();
 80018e8:	2808      	cmp	r0, #8
 80018ea:	f200 8093 	bhi.w	8001a14 <socket+0x12c>
{
 80018ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	4605      	mov	r5, r0
 80018f6:	460f      	mov	r7, r1
 80018f8:	4690      	mov	r8, r2
 80018fa:	461e      	mov	r6, r3
	switch(protocol)
 80018fc:	2901      	cmp	r1, #1
 80018fe:	d062      	beq.n	80019c6 <socket+0xde>
 8001900:	2900      	cmp	r1, #0
 8001902:	f000 808a 	beq.w	8001a1a <socket+0x132>
 8001906:	2904      	cmp	r1, #4
 8001908:	f200 8087 	bhi.w	8001a1a <socket+0x132>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800190c:	f016 0f04 	tst.w	r6, #4
 8001910:	f040 8086 	bne.w	8001a20 <socket+0x138>
	if(flag != 0)
 8001914:	b11e      	cbz	r6, 800191e <socket+0x36>
   	switch(protocol)
 8001916:	2f01      	cmp	r7, #1
 8001918:	d062      	beq.n	80019e0 <socket+0xf8>
 800191a:	2f02      	cmp	r7, #2
 800191c:	d066      	beq.n	80019ec <socket+0x104>
	close(sn);
 800191e:	4628      	mov	r0, r5
 8001920:	f7ff ffa6 	bl	8001870 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001924:	00ac      	lsls	r4, r5, #2
 8001926:	3401      	adds	r4, #1
 8001928:	00e4      	lsls	r4, r4, #3
 800192a:	f026 010f 	bic.w	r1, r6, #15
 800192e:	b249      	sxtb	r1, r1
 8001930:	4339      	orrs	r1, r7
 8001932:	b2c9      	uxtb	r1, r1
 8001934:	4620      	mov	r0, r4
 8001936:	f7ff fe2d 	bl	8001594 <WIZCHIP_WRITE>
	if(!port)
 800193a:	f1b8 0f00 	cmp.w	r8, #0
 800193e:	d10a      	bne.n	8001956 <socket+0x6e>
	   port = sock_any_port++;
 8001940:	4a3a      	ldr	r2, [pc, #232]	; (8001a2c <socket+0x144>)
 8001942:	f8b2 8000 	ldrh.w	r8, [r2]
 8001946:	f108 0301 	add.w	r3, r8, #1
 800194a:	b29b      	uxth	r3, r3
 800194c:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800194e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001952:	4293      	cmp	r3, r2
 8001954:	d059      	beq.n	8001a0a <socket+0x122>
   setSn_PORT(sn,port);	
 8001956:	ea4f 2118 	mov.w	r1, r8, lsr #8
 800195a:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800195e:	f7ff fe19 	bl	8001594 <WIZCHIP_WRITE>
 8001962:	fa5f f188 	uxtb.w	r1, r8
 8001966:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 800196a:	f7ff fe13 	bl	8001594 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800196e:	f504 7780 	add.w	r7, r4, #256	; 0x100
 8001972:	2101      	movs	r1, #1
 8001974:	4638      	mov	r0, r7
 8001976:	f7ff fe0d 	bl	8001594 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800197a:	4638      	mov	r0, r7
 800197c:	f7ff fdd8 	bl	8001530 <WIZCHIP_READ>
 8001980:	2800      	cmp	r0, #0
 8001982:	d1fa      	bne.n	800197a <socket+0x92>
   sock_io_mode &= ~(1 <<sn);
 8001984:	2201      	movs	r2, #1
 8001986:	40aa      	lsls	r2, r5
 8001988:	43d2      	mvns	r2, r2
 800198a:	b212      	sxth	r2, r2
 800198c:	4928      	ldr	r1, [pc, #160]	; (8001a30 <socket+0x148>)
 800198e:	880b      	ldrh	r3, [r1, #0]
 8001990:	4013      	ands	r3, r2
 8001992:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001994:	f006 0601 	and.w	r6, r6, #1
 8001998:	40ae      	lsls	r6, r5
 800199a:	431e      	orrs	r6, r3
 800199c:	800e      	strh	r6, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 800199e:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <socket+0x14c>)
 80019a0:	8819      	ldrh	r1, [r3, #0]
 80019a2:	400a      	ands	r2, r1
 80019a4:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	4a23      	ldr	r2, [pc, #140]	; (8001a38 <socket+0x150>)
 80019aa:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 80019ae:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <socket+0x154>)
 80019b0:	5553      	strb	r3, [r2, r5]
   while(getSn_SR(sn) == SOCK_CLOSED);
 80019b2:	f504 7040 	add.w	r0, r4, #768	; 0x300
 80019b6:	f7ff fdbb 	bl	8001530 <WIZCHIP_READ>
 80019ba:	2800      	cmp	r0, #0
 80019bc:	d0f9      	beq.n	80019b2 <socket+0xca>
   return (int8_t)sn;
 80019be:	b268      	sxtb	r0, r5
}	   
 80019c0:	b002      	add	sp, #8
 80019c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            getSIPR((uint8_t*)&taddr);
 80019c6:	2204      	movs	r2, #4
 80019c8:	eb0d 0102 	add.w	r1, sp, r2
 80019cc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80019d0:	f7ff fe14 	bl	80015fc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80019d4:	9b01      	ldr	r3, [sp, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d198      	bne.n	800190c <socket+0x24>
 80019da:	f06f 0002 	mvn.w	r0, #2
 80019de:	e7ef      	b.n	80019c0 <socket+0xd8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80019e0:	f016 0f21 	tst.w	r6, #33	; 0x21
 80019e4:	d19b      	bne.n	800191e <socket+0x36>
 80019e6:	f06f 0005 	mvn.w	r0, #5
 80019ea:	e7e9      	b.n	80019c0 <socket+0xd8>
   	      if(flag & SF_IGMP_VER2)
 80019ec:	f016 0f20 	tst.w	r6, #32
 80019f0:	d002      	beq.n	80019f8 <socket+0x110>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80019f2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80019f6:	d016      	beq.n	8001a26 <socket+0x13e>
      	      if(flag & SF_UNI_BLOCK)
 80019f8:	f016 0f10 	tst.w	r6, #16
 80019fc:	d08f      	beq.n	800191e <socket+0x36>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80019fe:	f016 0f80 	tst.w	r6, #128	; 0x80
 8001a02:	d18c      	bne.n	800191e <socket+0x36>
 8001a04:	f06f 0005 	mvn.w	r0, #5
 8001a08:	e7da      	b.n	80019c0 <socket+0xd8>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <socket+0x144>)
 8001a0c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001a10:	801a      	strh	r2, [r3, #0]
 8001a12:	e7a0      	b.n	8001956 <socket+0x6e>
	CHECK_SOCKNUM();
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}	   
 8001a18:	4770      	bx	lr
         return SOCKERR_SOCKMODE;
 8001a1a:	f06f 0004 	mvn.w	r0, #4
 8001a1e:	e7cf      	b.n	80019c0 <socket+0xd8>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001a20:	f06f 0005 	mvn.w	r0, #5
 8001a24:	e7cc      	b.n	80019c0 <socket+0xd8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001a26:	f06f 0005 	mvn.w	r0, #5
 8001a2a:	e7c9      	b.n	80019c0 <socket+0xd8>
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000148 	.word	0x20000148
 8001a34:	2000014a 	.word	0x2000014a
 8001a38:	20000154 	.word	0x20000154
 8001a3c:	2000014c 	.word	0x2000014c

08001a40 <listen>:

int8_t listen(uint8_t sn)
{
	CHECK_SOCKNUM();
 8001a40:	2808      	cmp	r0, #8
 8001a42:	d82a      	bhi.n	8001a9a <listen+0x5a>
{
 8001a44:	b570      	push	{r4, r5, r6, lr}
 8001a46:	4605      	mov	r5, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001a48:	0084      	lsls	r4, r0, #2
 8001a4a:	3401      	adds	r4, #1
 8001a4c:	00e4      	lsls	r4, r4, #3
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f7ff fd6e 	bl	8001530 <WIZCHIP_READ>
 8001a54:	f000 000f 	and.w	r0, r0, #15
 8001a58:	2801      	cmp	r0, #1
 8001a5a:	d121      	bne.n	8001aa0 <listen+0x60>
	CHECK_SOCKINIT();
 8001a5c:	f504 7640 	add.w	r6, r4, #768	; 0x300
 8001a60:	4630      	mov	r0, r6
 8001a62:	f7ff fd65 	bl	8001530 <WIZCHIP_READ>
 8001a66:	2813      	cmp	r0, #19
 8001a68:	d11d      	bne.n	8001aa6 <listen+0x66>
	setSn_CR(sn,Sn_CR_LISTEN);
 8001a6a:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8001a6e:	2102      	movs	r1, #2
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7ff fd8f 	bl	8001594 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8001a76:	4620      	mov	r0, r4
 8001a78:	f7ff fd5a 	bl	8001530 <WIZCHIP_READ>
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	d1fa      	bne.n	8001a76 <listen+0x36>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001a80:	4630      	mov	r0, r6
 8001a82:	f7ff fd55 	bl	8001530 <WIZCHIP_READ>
 8001a86:	2814      	cmp	r0, #20
 8001a88:	d101      	bne.n	8001a8e <listen+0x4e>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 8001a8a:	2001      	movs	r0, #1
}
 8001a8c:	bd70      	pop	{r4, r5, r6, pc}
         close(sn);
 8001a8e:	4628      	mov	r0, r5
 8001a90:	f7ff feee 	bl	8001870 <close>
         return SOCKERR_SOCKCLOSED;
 8001a94:	f06f 0003 	mvn.w	r0, #3
 8001a98:	e7f8      	b.n	8001a8c <listen+0x4c>
	CHECK_SOCKNUM();
 8001a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001a9e:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001aa0:	f06f 0004 	mvn.w	r0, #4
 8001aa4:	e7f2      	b.n	8001a8c <listen+0x4c>
	CHECK_SOCKINIT();
 8001aa6:	f06f 0002 	mvn.w	r0, #2
 8001aaa:	e7ef      	b.n	8001a8c <listen+0x4c>

08001aac <disconnect>:
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
 8001aac:	2808      	cmp	r0, #8
 8001aae:	d838      	bhi.n	8001b22 <disconnect+0x76>
{
 8001ab0:	b570      	push	{r4, r5, r6, lr}
 8001ab2:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001ab4:	0084      	lsls	r4, r0, #2
 8001ab6:	3401      	adds	r4, #1
 8001ab8:	00e4      	lsls	r4, r4, #3
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff fd38 	bl	8001530 <WIZCHIP_READ>
 8001ac0:	f000 000f 	and.w	r0, r0, #15
 8001ac4:	2801      	cmp	r0, #1
 8001ac6:	d12f      	bne.n	8001b28 <disconnect+0x7c>
	setSn_CR(sn,Sn_CR_DISCON);
 8001ac8:	f504 7580 	add.w	r5, r4, #256	; 0x100
 8001acc:	2108      	movs	r1, #8
 8001ace:	4628      	mov	r0, r5
 8001ad0:	f7ff fd60 	bl	8001594 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001ad4:	4628      	mov	r0, r5
 8001ad6:	f7ff fd2b 	bl	8001530 <WIZCHIP_READ>
 8001ada:	2800      	cmp	r0, #0
 8001adc:	d1fa      	bne.n	8001ad4 <disconnect+0x28>
	sock_is_sending &= ~(1<<sn);
 8001ade:	2301      	movs	r3, #1
 8001ae0:	fa03 f206 	lsl.w	r2, r3, r6
 8001ae4:	4913      	ldr	r1, [pc, #76]	; (8001b34 <disconnect+0x88>)
 8001ae6:	880b      	ldrh	r3, [r1, #0]
 8001ae8:	ea23 0302 	bic.w	r3, r3, r2
 8001aec:	800b      	strh	r3, [r1, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <disconnect+0x8c>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	4133      	asrs	r3, r6
 8001af4:	f013 0f01 	tst.w	r3, #1
 8001af8:	d119      	bne.n	8001b2e <disconnect+0x82>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001afa:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8001afe:	f7ff fd17 	bl	8001530 <WIZCHIP_READ>
 8001b02:	b160      	cbz	r0, 8001b1e <disconnect+0x72>
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001b04:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8001b08:	f7ff fd12 	bl	8001530 <WIZCHIP_READ>
 8001b0c:	f010 0f08 	tst.w	r0, #8
 8001b10:	d0f3      	beq.n	8001afa <disconnect+0x4e>
	   {
	      close(sn);
 8001b12:	4630      	mov	r0, r6
 8001b14:	f7ff feac 	bl	8001870 <close>
	      return SOCKERR_TIMEOUT;
 8001b18:	f06f 000c 	mvn.w	r0, #12
 8001b1c:	e008      	b.n	8001b30 <disconnect+0x84>
	   }
	}
	return SOCK_OK;
 8001b1e:	2001      	movs	r0, #1
 8001b20:	e006      	b.n	8001b30 <disconnect+0x84>
   CHECK_SOCKNUM();
 8001b22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001b26:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001b28:	f06f 0004 	mvn.w	r0, #4
 8001b2c:	e000      	b.n	8001b30 <disconnect+0x84>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001b2e:	2000      	movs	r0, #0
}
 8001b30:	bd70      	pop	{r4, r5, r6, pc}
 8001b32:	bf00      	nop
 8001b34:	2000014a 	.word	0x2000014a
 8001b38:	20000148 	.word	0x20000148

08001b3c <send>:
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
 8001b3c:	2808      	cmp	r0, #8
 8001b3e:	f200 8083 	bhi.w	8001c48 <send+0x10c>
{
 8001b42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b46:	4615      	mov	r5, r2
 8001b48:	468a      	mov	sl, r1
 8001b4a:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001b4c:	4681      	mov	r9, r0
 8001b4e:	0087      	lsls	r7, r0, #2
 8001b50:	3701      	adds	r7, #1
 8001b52:	00ff      	lsls	r7, r7, #3
 8001b54:	4638      	mov	r0, r7
 8001b56:	f7ff fceb 	bl	8001530 <WIZCHIP_READ>
 8001b5a:	f000 000f 	and.w	r0, r0, #15
 8001b5e:	2801      	cmp	r0, #1
 8001b60:	d175      	bne.n	8001c4e <send+0x112>
   CHECK_SOCKDATA();
 8001b62:	2d00      	cmp	r5, #0
 8001b64:	d076      	beq.n	8001c54 <send+0x118>
   tmp = getSn_SR(sn);
 8001b66:	f507 7840 	add.w	r8, r7, #768	; 0x300
 8001b6a:	4640      	mov	r0, r8
 8001b6c:	f7ff fce0 	bl	8001530 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001b70:	2817      	cmp	r0, #23
 8001b72:	d001      	beq.n	8001b78 <send+0x3c>
 8001b74:	281c      	cmp	r0, #28
 8001b76:	d170      	bne.n	8001c5a <send+0x11e>
   if( sock_is_sending & (1<<sn) )
 8001b78:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <send+0x124>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	4133      	asrs	r3, r6
 8001b7e:	f013 0f01 	tst.w	r3, #1
 8001b82:	d019      	beq.n	8001bb8 <send+0x7c>
   {
      tmp = getSn_IR(sn);
 8001b84:	f507 7400 	add.w	r4, r7, #512	; 0x200
 8001b88:	4620      	mov	r0, r4
 8001b8a:	f7ff fcd1 	bl	8001530 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8001b8e:	f010 0f10 	tst.w	r0, #16
 8001b92:	d105      	bne.n	8001ba0 <send+0x64>
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001b94:	f010 0f08 	tst.w	r0, #8
 8001b98:	d119      	bne.n	8001bce <send+0x92>
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
 8001b9a:	2000      	movs	r0, #0
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 8001b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
 8001ba0:	2110      	movs	r1, #16
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f7ff fcf6 	bl	8001594 <WIZCHIP_WRITE>
         sock_is_sending &= ~(1<<sn);         
 8001ba8:	2301      	movs	r3, #1
 8001baa:	fa03 f206 	lsl.w	r2, r3, r6
 8001bae:	492c      	ldr	r1, [pc, #176]	; (8001c60 <send+0x124>)
 8001bb0:	880b      	ldrh	r3, [r1, #0]
 8001bb2:	ea23 0302 	bic.w	r3, r3, r2
 8001bb6:	800b      	strh	r3, [r1, #0]
   freesize = getSn_TxMAX(sn);
 8001bb8:	f507 50f8 	add.w	r0, r7, #7936	; 0x1f00
 8001bbc:	f7ff fcb8 	bl	8001530 <WIZCHIP_READ>
 8001bc0:	b284      	uxth	r4, r0
 8001bc2:	02a4      	lsls	r4, r4, #10
 8001bc4:	b2a4      	uxth	r4, r4
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001bc6:	42a5      	cmp	r5, r4
 8001bc8:	d80f      	bhi.n	8001bea <send+0xae>
 8001bca:	462c      	mov	r4, r5
 8001bcc:	e00d      	b.n	8001bea <send+0xae>
         close(sn);
 8001bce:	4630      	mov	r0, r6
 8001bd0:	f7ff fe4e 	bl	8001870 <close>
         return SOCKERR_TIMEOUT;
 8001bd4:	f06f 000c 	mvn.w	r0, #12
 8001bd8:	e7e0      	b.n	8001b9c <send+0x60>
         close(sn);
 8001bda:	4630      	mov	r0, r6
 8001bdc:	f7ff fe48 	bl	8001870 <close>
         return SOCKERR_SOCKSTATUS;
 8001be0:	f06f 0006 	mvn.w	r0, #6
 8001be4:	e7da      	b.n	8001b9c <send+0x60>
      if(len <= freesize) break;
 8001be6:	42a5      	cmp	r5, r4
 8001be8:	d215      	bcs.n	8001c16 <send+0xda>
      freesize = getSn_TX_FSR(sn);
 8001bea:	4630      	mov	r0, r6
 8001bec:	f7ff fd84 	bl	80016f8 <getSn_TX_FSR>
 8001bf0:	4605      	mov	r5, r0
      tmp = getSn_SR(sn);
 8001bf2:	4640      	mov	r0, r8
 8001bf4:	f7ff fc9c 	bl	8001530 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001bf8:	2817      	cmp	r0, #23
 8001bfa:	d001      	beq.n	8001c00 <send+0xc4>
 8001bfc:	281c      	cmp	r0, #28
 8001bfe:	d1ec      	bne.n	8001bda <send+0x9e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001c00:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <send+0x128>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	fa43 f309 	asr.w	r3, r3, r9
 8001c08:	f013 0f01 	tst.w	r3, #1
 8001c0c:	d0eb      	beq.n	8001be6 <send+0xaa>
 8001c0e:	42a5      	cmp	r5, r4
 8001c10:	d2e9      	bcs.n	8001be6 <send+0xaa>
 8001c12:	2000      	movs	r0, #0
 8001c14:	e7c2      	b.n	8001b9c <send+0x60>
   wiz_send_data(sn, buf, len);
 8001c16:	4622      	mov	r2, r4
 8001c18:	4651      	mov	r1, sl
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	f7ff fdca 	bl	80017b4 <wiz_send_data>
   setSn_CR(sn,Sn_CR_SEND);
 8001c20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001c24:	2120      	movs	r1, #32
 8001c26:	4638      	mov	r0, r7
 8001c28:	f7ff fcb4 	bl	8001594 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001c2c:	4638      	mov	r0, r7
 8001c2e:	f7ff fc7f 	bl	8001530 <WIZCHIP_READ>
 8001c32:	2800      	cmp	r0, #0
 8001c34:	d1fa      	bne.n	8001c2c <send+0xf0>
   sock_is_sending |= (1 << sn);
 8001c36:	2301      	movs	r3, #1
 8001c38:	fa03 f606 	lsl.w	r6, r3, r6
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <send+0x124>)
 8001c3e:	881a      	ldrh	r2, [r3, #0]
 8001c40:	4316      	orrs	r6, r2
 8001c42:	801e      	strh	r6, [r3, #0]
   return (int32_t)len;
 8001c44:	4620      	mov	r0, r4
 8001c46:	e7a9      	b.n	8001b9c <send+0x60>
   CHECK_SOCKNUM();
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001c4c:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001c4e:	f06f 0004 	mvn.w	r0, #4
 8001c52:	e7a3      	b.n	8001b9c <send+0x60>
   CHECK_SOCKDATA();
 8001c54:	f06f 000d 	mvn.w	r0, #13
 8001c58:	e7a0      	b.n	8001b9c <send+0x60>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001c5a:	f06f 0006 	mvn.w	r0, #6
 8001c5e:	e79d      	b.n	8001b9c <send+0x60>
 8001c60:	2000014a 	.word	0x2000014a
 8001c64:	20000148 	.word	0x20000148

08001c68 <ClrSiS>:

void ClrSiS (uint8_t sn){
	sock_is_sending &= ~(1 << sn);
 8001c68:	2301      	movs	r3, #1
 8001c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8001c6e:	4a03      	ldr	r2, [pc, #12]	; (8001c7c <ClrSiS+0x14>)
 8001c70:	8813      	ldrh	r3, [r2, #0]
 8001c72:	ea23 0000 	bic.w	r0, r3, r0
 8001c76:	8010      	strh	r0, [r2, #0]
}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	2000014a 	.word	0x2000014a

08001c80 <recv>:
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001c80:	2808      	cmp	r0, #8
 8001c82:	d864      	bhi.n	8001d4e <recv+0xce>
{
 8001c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c88:	4614      	mov	r4, r2
 8001c8a:	4689      	mov	r9, r1
 8001c8c:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001c8e:	4607      	mov	r7, r0
 8001c90:	0085      	lsls	r5, r0, #2
 8001c92:	3501      	adds	r5, #1
 8001c94:	00ed      	lsls	r5, r5, #3
 8001c96:	4628      	mov	r0, r5
 8001c98:	f7ff fc4a 	bl	8001530 <WIZCHIP_READ>
 8001c9c:	f000 000f 	and.w	r0, r0, #15
 8001ca0:	2801      	cmp	r0, #1
 8001ca2:	d157      	bne.n	8001d54 <recv+0xd4>
   CHECK_SOCKDATA();
 8001ca4:	2c00      	cmp	r4, #0
 8001ca6:	d058      	beq.n	8001d5a <recv+0xda>
   
   recvsize = getSn_RxMAX(sn);
 8001ca8:	f505 50f0 	add.w	r0, r5, #7680	; 0x1e00
 8001cac:	f7ff fc40 	bl	8001530 <WIZCHIP_READ>
 8001cb0:	fa1f f880 	uxth.w	r8, r0
 8001cb4:	ea4f 2888 	mov.w	r8, r8, lsl #10
 8001cb8:	fa1f f888 	uxth.w	r8, r8
   if(recvsize < len) len = recvsize;
 8001cbc:	4544      	cmp	r4, r8
 8001cbe:	d80e      	bhi.n	8001cde <recv+0x5e>
 8001cc0:	46a0      	mov	r8, r4
 8001cc2:	e00c      	b.n	8001cde <recv+0x5e>
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
               {
                  close(sn);
 8001cc4:	4630      	mov	r0, r6
 8001cc6:	f7ff fdd3 	bl	8001870 <close>
                  return SOCKERR_SOCKSTATUS;
 8001cca:	f06f 0006 	mvn.w	r0, #6
 8001cce:	e03c      	b.n	8001d4a <recv+0xca>
               }
            }
            else
            {
               close(sn);
 8001cd0:	4630      	mov	r0, r6
 8001cd2:	f7ff fdcd 	bl	8001870 <close>
               return SOCKERR_SOCKSTATUS;
 8001cd6:	f06f 0006 	mvn.w	r0, #6
 8001cda:	e036      	b.n	8001d4a <recv+0xca>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
         if(recvsize != 0) break;
 8001cdc:	bb0c      	cbnz	r4, 8001d22 <recv+0xa2>
         recvsize = getSn_RX_RSR(sn);
 8001cde:	4630      	mov	r0, r6
 8001ce0:	f7ff fd39 	bl	8001756 <getSn_RX_RSR>
 8001ce4:	4604      	mov	r4, r0
         tmp = getSn_SR(sn);
 8001ce6:	f505 7040 	add.w	r0, r5, #768	; 0x300
 8001cea:	f7ff fc21 	bl	8001530 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
 8001cee:	2817      	cmp	r0, #23
 8001cf0:	d00d      	beq.n	8001d0e <recv+0x8e>
            if(tmp == SOCK_CLOSE_WAIT)
 8001cf2:	281c      	cmp	r0, #28
 8001cf4:	d1ec      	bne.n	8001cd0 <recv+0x50>
               if(recvsize != 0) break;
 8001cf6:	b9a4      	cbnz	r4, 8001d22 <recv+0xa2>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001cf8:	4630      	mov	r0, r6
 8001cfa:	f7ff fcfd 	bl	80016f8 <getSn_TX_FSR>
 8001cfe:	4682      	mov	sl, r0
 8001d00:	f505 50f8 	add.w	r0, r5, #7936	; 0x1f00
 8001d04:	f7ff fc14 	bl	8001530 <WIZCHIP_READ>
 8001d08:	ebba 2f80 	cmp.w	sl, r0, lsl #10
 8001d0c:	d0da      	beq.n	8001cc4 <recv+0x44>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <recv+0xe0>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	413b      	asrs	r3, r7
 8001d14:	f013 0f01 	tst.w	r3, #1
 8001d18:	d0e0      	beq.n	8001cdc <recv+0x5c>
 8001d1a:	2c00      	cmp	r4, #0
 8001d1c:	d1de      	bne.n	8001cdc <recv+0x5c>
 8001d1e:	2000      	movs	r0, #0
 8001d20:	e013      	b.n	8001d4a <recv+0xca>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001d22:	4544      	cmp	r4, r8
 8001d24:	d300      	bcc.n	8001d28 <recv+0xa8>
 8001d26:	4644      	mov	r4, r8
   wiz_recv_data(sn, buf, len);
 8001d28:	4622      	mov	r2, r4
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	4630      	mov	r0, r6
 8001d2e:	f7ff fd70 	bl	8001812 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8001d32:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8001d36:	2140      	movs	r1, #64	; 0x40
 8001d38:	4628      	mov	r0, r5
 8001d3a:	f7ff fc2b 	bl	8001594 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001d3e:	4628      	mov	r0, r5
 8001d40:	f7ff fbf6 	bl	8001530 <WIZCHIP_READ>
 8001d44:	2800      	cmp	r0, #0
 8001d46:	d1fa      	bne.n	8001d3e <recv+0xbe>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001d48:	4620      	mov	r0, r4
}
 8001d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   CHECK_SOCKNUM();
 8001d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001d52:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001d54:	f06f 0004 	mvn.w	r0, #4
 8001d58:	e7f7      	b.n	8001d4a <recv+0xca>
   CHECK_SOCKDATA();
 8001d5a:	f06f 000d 	mvn.w	r0, #13
 8001d5e:	e7f4      	b.n	8001d4a <recv+0xca>
 8001d60:	20000148 	.word	0x20000148

08001d64 <getsockopt>:
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
   CHECK_SOCKNUM();
 8001d64:	2808      	cmp	r0, #8
 8001d66:	f200 80a3 	bhi.w	8001eb0 <getsockopt+0x14c>
{
 8001d6a:	b570      	push	{r4, r5, r6, lr}
 8001d6c:	4615      	mov	r5, r2
 8001d6e:	4604      	mov	r4, r0
   switch(sotype)
 8001d70:	290c      	cmp	r1, #12
 8001d72:	f200 80a0 	bhi.w	8001eb6 <getsockopt+0x152>
 8001d76:	e8df f001 	tbb	[pc, r1]
 8001d7a:	1107      	.short	0x1107
 8001d7c:	4338251b 	.word	0x4338251b
 8001d80:	6c67569e 	.word	0x6c67569e
 8001d84:	7b71      	.short	0x7b71
 8001d86:	8f          	.byte	0x8f
 8001d87:	00          	.byte	0x00
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8001d88:	0080      	lsls	r0, r0, #2
 8001d8a:	3001      	adds	r0, #1
 8001d8c:	00c0      	lsls	r0, r0, #3
 8001d8e:	f7ff fbcf 	bl	8001530 <WIZCHIP_READ>
 8001d92:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8001d96:	7028      	strb	r0, [r5, #0]
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
 8001d98:	2001      	movs	r0, #1
}
 8001d9a:	bd70      	pop	{r4, r5, r6, pc}
         *(uint8_t*) arg = getSn_TTL(sn);
 8001d9c:	0080      	lsls	r0, r0, #2
 8001d9e:	3001      	adds	r0, #1
 8001da0:	00c0      	lsls	r0, r0, #3
 8001da2:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
 8001da6:	f7ff fbc3 	bl	8001530 <WIZCHIP_READ>
 8001daa:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001dac:	2001      	movs	r0, #1
         break;
 8001dae:	e7f4      	b.n	8001d9a <getsockopt+0x36>
         *(uint8_t*) arg = getSn_TOS(sn);
 8001db0:	0080      	lsls	r0, r0, #2
 8001db2:	3001      	adds	r0, #1
 8001db4:	00c0      	lsls	r0, r0, #3
 8001db6:	f500 50a8 	add.w	r0, r0, #5376	; 0x1500
 8001dba:	f7ff fbb9 	bl	8001530 <WIZCHIP_READ>
 8001dbe:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001dc0:	2001      	movs	r0, #1
         break;
 8001dc2:	e7ea      	b.n	8001d9a <getsockopt+0x36>
         *(uint16_t*) arg = getSn_MSSR(sn);
 8001dc4:	0084      	lsls	r4, r0, #2
 8001dc6:	3401      	adds	r4, #1
 8001dc8:	00e4      	lsls	r4, r4, #3
 8001dca:	f504 5090 	add.w	r0, r4, #4608	; 0x1200
 8001dce:	f7ff fbaf 	bl	8001530 <WIZCHIP_READ>
 8001dd2:	b286      	uxth	r6, r0
 8001dd4:	0236      	lsls	r6, r6, #8
 8001dd6:	b2b6      	uxth	r6, r6
 8001dd8:	f504 5098 	add.w	r0, r4, #4864	; 0x1300
 8001ddc:	f7ff fba8 	bl	8001530 <WIZCHIP_READ>
 8001de0:	fa16 f080 	uxtah	r0, r6, r0
 8001de4:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001de6:	2001      	movs	r0, #1
         break;
 8001de8:	e7d7      	b.n	8001d9a <getsockopt+0x36>
         getSn_DIPR(sn, (uint8_t*)arg);
 8001dea:	0080      	lsls	r0, r0, #2
 8001dec:	3001      	adds	r0, #1
 8001dee:	00c0      	lsls	r0, r0, #3
 8001df0:	2204      	movs	r2, #4
 8001df2:	4629      	mov	r1, r5
 8001df4:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8001df8:	f7ff fc00 	bl	80015fc <WIZCHIP_READ_BUF>
   return SOCK_OK;
 8001dfc:	2001      	movs	r0, #1
         break;
 8001dfe:	e7cc      	b.n	8001d9a <getsockopt+0x36>
         *(uint16_t*) arg = getSn_DPORT(sn);
 8001e00:	0084      	lsls	r4, r0, #2
 8001e02:	3401      	adds	r4, #1
 8001e04:	00e4      	lsls	r4, r4, #3
 8001e06:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 8001e0a:	f7ff fb91 	bl	8001530 <WIZCHIP_READ>
 8001e0e:	b286      	uxth	r6, r0
 8001e10:	0236      	lsls	r6, r6, #8
 8001e12:	b2b6      	uxth	r6, r6
 8001e14:	f504 5088 	add.w	r0, r4, #4352	; 0x1100
 8001e18:	f7ff fb8a 	bl	8001530 <WIZCHIP_READ>
 8001e1c:	fa16 f080 	uxtah	r0, r6, r0
 8001e20:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001e22:	2001      	movs	r0, #1
         break;
 8001e24:	e7b9      	b.n	8001d9a <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 8001e26:	0084      	lsls	r4, r0, #2
 8001e28:	3401      	adds	r4, #1
 8001e2a:	00e4      	lsls	r4, r4, #3
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f7ff fb7f 	bl	8001530 <WIZCHIP_READ>
 8001e32:	f000 000f 	and.w	r0, r0, #15
 8001e36:	2801      	cmp	r0, #1
 8001e38:	d140      	bne.n	8001ebc <getsockopt+0x158>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8001e3a:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
 8001e3e:	f7ff fb77 	bl	8001530 <WIZCHIP_READ>
 8001e42:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001e44:	2001      	movs	r0, #1
         break;
 8001e46:	e7a8      	b.n	8001d9a <getsockopt+0x36>
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 8001e48:	f7ff fc56 	bl	80016f8 <getSn_TX_FSR>
 8001e4c:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001e4e:	2001      	movs	r0, #1
         break;
 8001e50:	e7a3      	b.n	8001d9a <getsockopt+0x36>
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 8001e52:	f7ff fc80 	bl	8001756 <getSn_RX_RSR>
 8001e56:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001e58:	2001      	movs	r0, #1
         break;
 8001e5a:	e79e      	b.n	8001d9a <getsockopt+0x36>
         *(uint8_t*) arg = getSn_SR(sn);
 8001e5c:	0080      	lsls	r0, r0, #2
 8001e5e:	3001      	adds	r0, #1
 8001e60:	00c0      	lsls	r0, r0, #3
 8001e62:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8001e66:	f7ff fb63 	bl	8001530 <WIZCHIP_READ>
 8001e6a:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001e6c:	2001      	movs	r0, #1
         break;
 8001e6e:	e794      	b.n	8001d9a <getsockopt+0x36>
         if(getSn_MR(sn) & Sn_MR_TCP)
 8001e70:	0080      	lsls	r0, r0, #2
 8001e72:	3001      	adds	r0, #1
 8001e74:	00c0      	lsls	r0, r0, #3
 8001e76:	f7ff fb5b 	bl	8001530 <WIZCHIP_READ>
 8001e7a:	f010 0f01 	tst.w	r0, #1
 8001e7e:	d105      	bne.n	8001e8c <getsockopt+0x128>
            *(uint16_t*)arg = sock_remained_size[sn];
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <getsockopt+0x164>)
 8001e82:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001e86:	802b      	strh	r3, [r5, #0]
   return SOCK_OK;
 8001e88:	2001      	movs	r0, #1
 8001e8a:	e786      	b.n	8001d9a <getsockopt+0x36>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f7ff fc62 	bl	8001756 <getSn_RX_RSR>
 8001e92:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001e94:	2001      	movs	r0, #1
 8001e96:	e780      	b.n	8001d9a <getsockopt+0x36>
         if((getSn_MR(sn) == Sn_MR_TCP))
 8001e98:	0080      	lsls	r0, r0, #2
 8001e9a:	3001      	adds	r0, #1
 8001e9c:	00c0      	lsls	r0, r0, #3
 8001e9e:	f7ff fb47 	bl	8001530 <WIZCHIP_READ>
 8001ea2:	2801      	cmp	r0, #1
 8001ea4:	d00d      	beq.n	8001ec2 <getsockopt+0x15e>
         *(uint8_t*)arg = sock_pack_info[sn];
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <getsockopt+0x168>)
 8001ea8:	5d1b      	ldrb	r3, [r3, r4]
 8001eaa:	702b      	strb	r3, [r5, #0]
   return SOCK_OK;
 8001eac:	2001      	movs	r0, #1
         break;
 8001eae:	e774      	b.n	8001d9a <getsockopt+0x36>
   CHECK_SOCKNUM();
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001eb4:	4770      	bx	lr
         return SOCKERR_SOCKOPT;
 8001eb6:	f06f 0001 	mvn.w	r0, #1
 8001eba:	e76e      	b.n	8001d9a <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 8001ebc:	f06f 0004 	mvn.w	r0, #4
 8001ec0:	e76b      	b.n	8001d9a <getsockopt+0x36>
             return SOCKERR_SOCKMODE;
 8001ec2:	f06f 0004 	mvn.w	r0, #4
 8001ec6:	e768      	b.n	8001d9a <getsockopt+0x36>
 8001ec8:	20000154 	.word	0x20000154
 8001ecc:	2000014c 	.word	0x2000014c

08001ed0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001ed0:	4770      	bx	lr

08001ed2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001ed2:	4770      	bx	lr

08001ed4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001ed4:	4770      	bx	lr

08001ed6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001ed6:	4770      	bx	lr

08001ed8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001ed8:	7800      	ldrb	r0, [r0, #0]
 8001eda:	4770      	bx	lr

08001edc <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001edc:	7001      	strb	r1, [r0, #0]
 8001ede:	4770      	bx	lr

08001ee0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	4770      	bx	lr

08001ee4 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001ee4:	4770      	bx	lr

08001ee6 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8001ee6:	4770      	bx	lr

08001ee8 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001ee8:	4770      	bx	lr
	...

08001eec <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 8001eec:	b120      	cbz	r0, 8001ef8 <reg_wizchip_cs_cbfunc+0xc>
 8001eee:	b119      	cbz	r1, 8001ef8 <reg_wizchip_cs_cbfunc+0xc>
      WIZCHIP.CS._select   = wizchip_cs_select;
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <reg_wizchip_cs_cbfunc+0x18>)
 8001ef2:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001ef4:	6199      	str	r1, [r3, #24]
   }
}
 8001ef6:	4770      	bx	lr
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001ef8:	4b02      	ldr	r3, [pc, #8]	; (8001f04 <reg_wizchip_cs_cbfunc+0x18>)
 8001efa:	4a03      	ldr	r2, [pc, #12]	; (8001f08 <reg_wizchip_cs_cbfunc+0x1c>)
 8001efc:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001efe:	4a03      	ldr	r2, [pc, #12]	; (8001f0c <reg_wizchip_cs_cbfunc+0x20>)
 8001f00:	619a      	str	r2, [r3, #24]
 8001f02:	4770      	bx	lr
 8001f04:	20000004 	.word	0x20000004
 8001f08:	08001ed5 	.word	0x08001ed5
 8001f0c:	08001ed7 	.word	0x08001ed7

08001f10 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <reg_wizchip_spi_cbfunc+0x24>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001f18:	d0fa      	beq.n	8001f10 <reg_wizchip_spi_cbfunc>
   
   if(!spi_rb || !spi_wb)
 8001f1a:	b120      	cbz	r0, 8001f26 <reg_wizchip_spi_cbfunc+0x16>
 8001f1c:	b119      	cbz	r1, 8001f26 <reg_wizchip_spi_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <reg_wizchip_spi_cbfunc+0x24>)
 8001f20:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001f22:	6219      	str	r1, [r3, #32]
   }
}
 8001f24:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001f26:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <reg_wizchip_spi_cbfunc+0x24>)
 8001f28:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <reg_wizchip_spi_cbfunc+0x28>)
 8001f2a:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001f2c:	4a03      	ldr	r2, [pc, #12]	; (8001f3c <reg_wizchip_spi_cbfunc+0x2c>)
 8001f2e:	621a      	str	r2, [r3, #32]
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000004 	.word	0x20000004
 8001f38:	08001ee1 	.word	0x08001ee1
 8001f3c:	08001ee5 	.word	0x08001ee5

08001f40 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <reg_wizchip_spiburst_cbfunc+0x24>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001f48:	d0fa      	beq.n	8001f40 <reg_wizchip_spiburst_cbfunc>

   if(!spi_rb || !spi_wb)
 8001f4a:	b120      	cbz	r0, 8001f56 <reg_wizchip_spiburst_cbfunc+0x16>
 8001f4c:	b119      	cbz	r1, 8001f56 <reg_wizchip_spiburst_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <reg_wizchip_spiburst_cbfunc+0x24>)
 8001f50:	6258      	str	r0, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001f52:	6299      	str	r1, [r3, #40]	; 0x28
   }
}
 8001f54:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001f56:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <reg_wizchip_spiburst_cbfunc+0x24>)
 8001f58:	4a03      	ldr	r2, [pc, #12]	; (8001f68 <reg_wizchip_spiburst_cbfunc+0x28>)
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8001f5c:	4a03      	ldr	r2, [pc, #12]	; (8001f6c <reg_wizchip_spiburst_cbfunc+0x2c>)
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000004 	.word	0x20000004
 8001f68:	08001ee7 	.word	0x08001ee7
 8001f6c:	08001ee9 	.word	0x08001ee9

08001f70 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001f70:	b500      	push	{lr}
 8001f72:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001f74:	2206      	movs	r2, #6
 8001f76:	a901      	add	r1, sp, #4
 8001f78:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001f7c:	f7ff fb3e 	bl	80015fc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001f80:	2204      	movs	r2, #4
 8001f82:	a905      	add	r1, sp, #20
 8001f84:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f88:	f7ff fb38 	bl	80015fc <WIZCHIP_READ_BUF>
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	a904      	add	r1, sp, #16
 8001f90:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001f94:	f7ff fb32 	bl	80015fc <WIZCHIP_READ_BUF>
 8001f98:	2204      	movs	r2, #4
 8001f9a:	a903      	add	r1, sp, #12
 8001f9c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001fa0:	f7ff fb2c 	bl	80015fc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001fa4:	2180      	movs	r1, #128	; 0x80
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7ff faf4 	bl	8001594 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001fac:	2000      	movs	r0, #0
 8001fae:	f7ff fabf 	bl	8001530 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001fb2:	2206      	movs	r2, #6
 8001fb4:	a901      	add	r1, sp, #4
 8001fb6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001fba:	f7ff fb5f 	bl	800167c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	a905      	add	r1, sp, #20
 8001fc2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fc6:	f7ff fb59 	bl	800167c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001fca:	2204      	movs	r2, #4
 8001fcc:	a904      	add	r1, sp, #16
 8001fce:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001fd2:	f7ff fb53 	bl	800167c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	a903      	add	r1, sp, #12
 8001fda:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001fde:	f7ff fb4d 	bl	800167c <WIZCHIP_WRITE_BUF>
}
 8001fe2:	b007      	add	sp, #28
 8001fe4:	f85d fb04 	ldr.w	pc, [sp], #4

08001fe8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001fe8:	b570      	push	{r4, r5, r6, lr}
 8001fea:	4605      	mov	r5, r0
 8001fec:	460e      	mov	r6, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8001fee:	f7ff ffbf 	bl	8001f70 <wizchip_sw_reset>
   if(txsize)
 8001ff2:	b1cd      	cbz	r5, 8002028 <wizchip_init+0x40>
   {
      tmp = 0;
 8001ff4:	2200      	movs	r2, #0
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	2b07      	cmp	r3, #7
 8001ffa:	dc07      	bgt.n	800200c <wizchip_init+0x24>
		{
			tmp += txsize[i];
 8001ffc:	5ce9      	ldrb	r1, [r5, r3]
 8001ffe:	440a      	add	r2, r1
 8002000:	b252      	sxtb	r2, r2

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002002:	2a10      	cmp	r2, #16
 8002004:	dc2f      	bgt.n	8002066 <wizchip_init+0x7e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002006:	3301      	adds	r3, #1
 8002008:	b25b      	sxtb	r3, r3
 800200a:	e7f5      	b.n	8001ff8 <wizchip_init+0x10>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800200c:	2400      	movs	r4, #0
 800200e:	e009      	b.n	8002024 <wizchip_init+0x3c>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002010:	00a0      	lsls	r0, r4, #2
 8002012:	3001      	adds	r0, #1
 8002014:	00c0      	lsls	r0, r0, #3
 8002016:	5d29      	ldrb	r1, [r5, r4]
 8002018:	f500 50f8 	add.w	r0, r0, #7936	; 0x1f00
 800201c:	f7ff faba 	bl	8001594 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002020:	3401      	adds	r4, #1
 8002022:	b264      	sxtb	r4, r4
 8002024:	2c07      	cmp	r4, #7
 8002026:	ddf3      	ble.n	8002010 <wizchip_init+0x28>
		}

	#endif
   }

   if(rxsize)
 8002028:	b15e      	cbz	r6, 8002042 <wizchip_init+0x5a>
   {
      tmp = 0;
 800202a:	2200      	movs	r2, #0
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800202c:	4613      	mov	r3, r2
 800202e:	2b07      	cmp	r3, #7
 8002030:	dc09      	bgt.n	8002046 <wizchip_init+0x5e>
		{
			tmp += rxsize[i];
 8002032:	5cf1      	ldrb	r1, [r6, r3]
 8002034:	440a      	add	r2, r1
 8002036:	b252      	sxtb	r2, r2
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002038:	2a10      	cmp	r2, #16
 800203a:	dc17      	bgt.n	800206c <wizchip_init+0x84>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800203c:	3301      	adds	r3, #1
 800203e:	b25b      	sxtb	r3, r3
 8002040:	e7f5      	b.n	800202e <wizchip_init+0x46>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 8002042:	2000      	movs	r0, #0
 8002044:	e00e      	b.n	8002064 <wizchip_init+0x7c>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002046:	2400      	movs	r4, #0
 8002048:	e009      	b.n	800205e <wizchip_init+0x76>
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800204a:	00a0      	lsls	r0, r4, #2
 800204c:	3001      	adds	r0, #1
 800204e:	00c0      	lsls	r0, r0, #3
 8002050:	5d31      	ldrb	r1, [r6, r4]
 8002052:	f500 50f0 	add.w	r0, r0, #7680	; 0x1e00
 8002056:	f7ff fa9d 	bl	8001594 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800205a:	3401      	adds	r4, #1
 800205c:	b264      	sxtb	r4, r4
 800205e:	2c07      	cmp	r4, #7
 8002060:	ddf3      	ble.n	800204a <wizchip_init+0x62>
   return 0;
 8002062:	2000      	movs	r0, #0
}
 8002064:	bd70      	pop	{r4, r5, r6, pc}
			if(tmp > 16) return -1;
 8002066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800206a:	e7fb      	b.n	8002064 <wizchip_init+0x7c>
			if(tmp > 16) return -1;
 800206c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002070:	e7f8      	b.n	8002064 <wizchip_init+0x7c>

08002072 <wizchip_getinterrupt>:

#endif   
}

intr_kind wizchip_getinterrupt(void)
{
 8002072:	b510      	push	{r4, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8002074:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002078:	f7ff fa5a 	bl	8001530 <WIZCHIP_READ>
 800207c:	f000 04f0 	and.w	r4, r0, #240	; 0xf0
   sir = getSIR();
 8002080:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002084:	f7ff fa54 	bl	8001530 <WIZCHIP_READ>
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002088:	b280      	uxth	r0, r0
  ret = (ret << 8) + ir;
 800208a:	0200      	lsls	r0, r0, #8
 800208c:	b280      	uxth	r0, r0
 800208e:	4420      	add	r0, r4
 8002090:	b280      	uxth	r0, r0
  return (intr_kind)ret;
}
 8002092:	bd10      	pop	{r4, pc}

08002094 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002094:	b510      	push	{r4, lr}
   uint8_t imr  = (uint8_t)intr;
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002096:	0a04      	lsrs	r4, r0, #8
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002098:	b2c1      	uxtb	r1, r0
 800209a:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800209e:	f7ff fa79 	bl	8001594 <WIZCHIP_WRITE>
   setSIMR(simr);
 80020a2:	4621      	mov	r1, r4
 80020a4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80020a8:	f7ff fa74 	bl	8001594 <WIZCHIP_WRITE>
#endif   
}
 80020ac:	bd10      	pop	{r4, pc}
	...

080020b0 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80020b0:	b510      	push	{r4, lr}
 80020b2:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 80020b4:	2206      	movs	r2, #6
 80020b6:	4601      	mov	r1, r0
 80020b8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80020bc:	f7ff fade 	bl	800167c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80020c0:	2204      	movs	r2, #4
 80020c2:	f104 010e 	add.w	r1, r4, #14
 80020c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020ca:	f7ff fad7 	bl	800167c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80020ce:	2204      	movs	r2, #4
 80020d0:	f104 010a 	add.w	r1, r4, #10
 80020d4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80020d8:	f7ff fad0 	bl	800167c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80020dc:	2204      	movs	r2, #4
 80020de:	1da1      	adds	r1, r4, #6
 80020e0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80020e4:	f7ff faca 	bl	800167c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80020e8:	7ca2      	ldrb	r2, [r4, #18]
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <wizchip_setnetinfo+0x54>)
 80020ec:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80020ee:	7ce2      	ldrb	r2, [r4, #19]
 80020f0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80020f2:	7d22      	ldrb	r2, [r4, #20]
 80020f4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80020f6:	7d62      	ldrb	r2, [r4, #21]
 80020f8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80020fa:	7da2      	ldrb	r2, [r4, #22]
 80020fc:	4b02      	ldr	r3, [pc, #8]	; (8002108 <wizchip_setnetinfo+0x58>)
 80020fe:	701a      	strb	r2, [r3, #0]
}
 8002100:	bd10      	pop	{r4, pc}
 8002102:	bf00      	nop
 8002104:	20000168 	.word	0x20000168
 8002108:	20000164 	.word	0x20000164

0800210c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800210c:	b510      	push	{r4, lr}
 800210e:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 8002110:	2206      	movs	r2, #6
 8002112:	4601      	mov	r1, r0
 8002114:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002118:	f7ff fa70 	bl	80015fc <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800211c:	2204      	movs	r2, #4
 800211e:	f104 010e 	add.w	r1, r4, #14
 8002122:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002126:	f7ff fa69 	bl	80015fc <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800212a:	2204      	movs	r2, #4
 800212c:	f104 010a 	add.w	r1, r4, #10
 8002130:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002134:	f7ff fa62 	bl	80015fc <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002138:	2204      	movs	r2, #4
 800213a:	1da1      	adds	r1, r4, #6
 800213c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002140:	f7ff fa5c 	bl	80015fc <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <wizchip_getnetinfo+0x54>)
 8002146:	781a      	ldrb	r2, [r3, #0]
 8002148:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800214a:	785a      	ldrb	r2, [r3, #1]
 800214c:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800214e:	789a      	ldrb	r2, [r3, #2]
 8002150:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002152:	78db      	ldrb	r3, [r3, #3]
 8002154:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002156:	4b03      	ldr	r3, [pc, #12]	; (8002164 <wizchip_getnetinfo+0x58>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	75a3      	strb	r3, [r4, #22]
}
 800215c:	bd10      	pop	{r4, pc}
 800215e:	bf00      	nop
 8002160:	20000168 	.word	0x20000168
 8002164:	20000164 	.word	0x20000164

08002168 <mcp23017_init>:

#define I2C_TIMEOUT		10

void mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c, uint16_t addr)
{
	hdev->hi2c = hi2c;
 8002168:	6001      	str	r1, [r0, #0]
	hdev->addr = addr << 1;
 800216a:	0052      	lsls	r2, r2, #1
 800216c:	8082      	strh	r2, [r0, #4]
}
 800216e:	4770      	bx	lr

08002170 <mcp23017_read>:

HAL_StatusTypeDef mcp23017_read(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 8002170:	b510      	push	{r4, lr}
 8002172:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Read(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 8002174:	8884      	ldrh	r4, [r0, #4]
 8002176:	6800      	ldr	r0, [r0, #0]
 8002178:	230a      	movs	r3, #10
 800217a:	9302      	str	r3, [sp, #8]
 800217c:	2301      	movs	r3, #1
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	9200      	str	r2, [sp, #0]
 8002182:	460a      	mov	r2, r1
 8002184:	4621      	mov	r1, r4
 8002186:	f004 f9b1 	bl	80064ec <HAL_I2C_Mem_Read>
}
 800218a:	b004      	add	sp, #16
 800218c:	bd10      	pop	{r4, pc}

0800218e <mcp23017_write>:

HAL_StatusTypeDef mcp23017_write(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 800218e:	b510      	push	{r4, lr}
 8002190:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Write(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 8002192:	8884      	ldrh	r4, [r0, #4]
 8002194:	6800      	ldr	r0, [r0, #0]
 8002196:	230a      	movs	r3, #10
 8002198:	9302      	str	r3, [sp, #8]
 800219a:	2301      	movs	r3, #1
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	9200      	str	r2, [sp, #0]
 80021a0:	460a      	mov	r2, r1
 80021a2:	4621      	mov	r1, r4
 80021a4:	f004 f8ee 	bl	8006384 <HAL_I2C_Mem_Write>
}
 80021a8:	b004      	add	sp, #16
 80021aa:	bd10      	pop	{r4, pc}

080021ac <mcp23017_iodir>:

HAL_StatusTypeDef mcp23017_iodir(MCP23017_HandleTypeDef *hdev, uint8_t port, uint8_t iodir)
{
 80021ac:	b500      	push	{lr}
 80021ae:	b083      	sub	sp, #12
	uint8_t data[1] = {iodir};
 80021b0:	ab02      	add	r3, sp, #8
 80021b2:	f803 2d04 	strb.w	r2, [r3, #-4]!
	return mcp23017_write(hdev, REGISTER_IODIRA|port, data);
 80021b6:	461a      	mov	r2, r3
 80021b8:	f7ff ffe9 	bl	800218e <mcp23017_write>
}
 80021bc:	b003      	add	sp, #12
 80021be:	f85d fb04 	ldr.w	pc, [sp], #4

080021c2 <mcp23017_read_gpio>:
	uint8_t data[1] = {pu};
	return mcp23017_write(hdev, REGISTER_GPPUA|port, data);
}

HAL_StatusTypeDef mcp23017_read_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 80021c2:	b530      	push	{r4, r5, lr}
 80021c4:	b083      	sub	sp, #12
 80021c6:	4604      	mov	r4, r0
 80021c8:	460d      	mov	r5, r1
	uint8_t data[1];
	HAL_StatusTypeDef status;
	status = mcp23017_read(hdev, REGISTER_GPIOA|port, data);
 80021ca:	aa01      	add	r2, sp, #4
 80021cc:	f041 0112 	orr.w	r1, r1, #18
 80021d0:	f7ff ffce 	bl	8002170 <mcp23017_read>
	if (status == HAL_OK)
 80021d4:	4603      	mov	r3, r0
 80021d6:	b918      	cbnz	r0, 80021e0 <mcp23017_read_gpio+0x1e>
		hdev->gpio[port] = data[0];
 80021d8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80021dc:	442c      	add	r4, r5
 80021de:	71a2      	strb	r2, [r4, #6]
	return status;
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	b003      	add	sp, #12
 80021e4:	bd30      	pop	{r4, r5, pc}

080021e6 <mcp23017_write_gpio>:

HAL_StatusTypeDef mcp23017_write_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 80021e6:	b500      	push	{lr}
 80021e8:	b083      	sub	sp, #12
	uint8_t data[1] = {hdev->gpio[port]};
 80021ea:	1843      	adds	r3, r0, r1
 80021ec:	799b      	ldrb	r3, [r3, #6]
 80021ee:	aa02      	add	r2, sp, #8
 80021f0:	f802 3d04 	strb.w	r3, [r2, #-4]!
	return mcp23017_write(hdev, REGISTER_GPIOA|port, data);
 80021f4:	f041 0112 	orr.w	r1, r1, #18
 80021f8:	f7ff ffc9 	bl	800218e <mcp23017_write>
}
 80021fc:	b003      	add	sp, #12
 80021fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002204 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8002204:	b500      	push	{lr}
 8002206:	b087      	sub	sp, #28
 8002208:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 800220c:	2364      	movs	r3, #100	; 0x64
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2301      	movs	r3, #1
 8002212:	f10d 0217 	add.w	r2, sp, #23
 8002216:	f10d 010f 	add.w	r1, sp, #15
 800221a:	4804      	ldr	r0, [pc, #16]	; (800222c <W25qxx_Spi+0x28>)
 800221c:	f005 fa6b 	bl	80076f6 <HAL_SPI_TransmitReceive>
	return ret;	
}
 8002220:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002224:	b007      	add	sp, #28
 8002226:	f85d fb04 	ldr.w	pc, [sp], #4
 800222a:	bf00      	nop
 800222c:	20003228 	.word	0x20003228

08002230 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002230:	b570      	push	{r4, r5, r6, lr}
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
  FLASH_SELECT;
 8002232:	f000 fa23 	bl	800267c <FLASH_ChipSelect>
  W25qxx_Spi(0x9F);
 8002236:	209f      	movs	r0, #159	; 0x9f
 8002238:	f7ff ffe4 	bl	8002204 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800223c:	20a5      	movs	r0, #165	; 0xa5
 800223e:	f7ff ffe1 	bl	8002204 <W25qxx_Spi>
 8002242:	4606      	mov	r6, r0
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002244:	20a5      	movs	r0, #165	; 0xa5
 8002246:	f7ff ffdd 	bl	8002204 <W25qxx_Spi>
 800224a:	4604      	mov	r4, r0
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800224c:	20a5      	movs	r0, #165	; 0xa5
 800224e:	f7ff ffd9 	bl	8002204 <W25qxx_Spi>
 8002252:	4605      	mov	r5, r0
  FLASH_DESELECT;
 8002254:	f000 fa24 	bl	80026a0 <FLASH_ChipDeselect>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002258:	0220      	lsls	r0, r4, #8
 800225a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
  return Temp;
}
 800225e:	4328      	orrs	r0, r5
 8002260:	bd70      	pop	{r4, r5, r6, pc}
	...

08002264 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002264:	b510      	push	{r4, lr}
  FLASH_SELECT;
 8002266:	f000 fa09 	bl	800267c <FLASH_ChipSelect>
  W25qxx_Spi(0x4B);
 800226a:	204b      	movs	r0, #75	; 0x4b
 800226c:	f7ff ffca 	bl	8002204 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8002270:	2400      	movs	r4, #0
 8002272:	e004      	b.n	800227e <W25qxx_ReadUniqID+0x1a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002274:	20a5      	movs	r0, #165	; 0xa5
 8002276:	f7ff ffc5 	bl	8002204 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 800227a:	3401      	adds	r4, #1
 800227c:	b2e4      	uxtb	r4, r4
 800227e:	2c03      	cmp	r4, #3
 8002280:	d9f8      	bls.n	8002274 <W25qxx_ReadUniqID+0x10>
	for(uint8_t	i=0;i<8;i++)
 8002282:	2400      	movs	r4, #0
 8002284:	e007      	b.n	8002296 <W25qxx_ReadUniqID+0x32>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002286:	20a5      	movs	r0, #165	; 0xa5
 8002288:	f7ff ffbc 	bl	8002204 <W25qxx_Spi>
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <W25qxx_ReadUniqID+0x3c>)
 800228e:	4423      	add	r3, r4
 8002290:	7058      	strb	r0, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8002292:	3401      	adds	r4, #1
 8002294:	b2e4      	uxtb	r4, r4
 8002296:	2c07      	cmp	r4, #7
 8002298:	d9f5      	bls.n	8002286 <W25qxx_ReadUniqID+0x22>
  FLASH_DESELECT;
 800229a:	f000 fa01 	bl	80026a0 <FLASH_ChipDeselect>
}
 800229e:	bd10      	pop	{r4, pc}
 80022a0:	20002ab0 	.word	0x20002ab0

080022a4 <W25qxx_ReadStatusRegister>:
  FLASH_DESELECT;
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 80022a4:	b510      	push	{r4, lr}
 80022a6:	4604      	mov	r4, r0
	uint8_t	status=0;
	FLASH_SELECT;
 80022a8:	f000 f9e8 	bl	800267c <FLASH_ChipSelect>
	if(SelectStatusRegister_1_2_3==1)
 80022ac:	2c01      	cmp	r4, #1
 80022ae:	d00f      	beq.n	80022d0 <W25qxx_ReadStatusRegister+0x2c>
	{
		W25qxx_Spi(0x05);
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister1 = status;
	}
	else if(SelectStatusRegister_1_2_3==2)
 80022b0:	2c02      	cmp	r4, #2
 80022b2:	d018      	beq.n	80022e6 <W25qxx_ReadStatusRegister+0x42>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister2 = status;
	}
	else
	{
		W25qxx_Spi(0x15);
 80022b4:	2015      	movs	r0, #21
 80022b6:	f7ff ffa5 	bl	8002204 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80022ba:	20a5      	movs	r0, #165	; 0xa5
 80022bc:	f7ff ffa2 	bl	8002204 <W25qxx_Spi>
 80022c0:	4604      	mov	r4, r0
		w25qxx.StatusRegister3 = status;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <W25qxx_ReadStatusRegister+0x58>)
 80022c4:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	}	
	FLASH_DESELECT;
 80022c8:	f000 f9ea 	bl	80026a0 <FLASH_ChipDeselect>
	return status;
}
 80022cc:	4620      	mov	r0, r4
 80022ce:	bd10      	pop	{r4, pc}
		W25qxx_Spi(0x05);
 80022d0:	2005      	movs	r0, #5
 80022d2:	f7ff ff97 	bl	8002204 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80022d6:	20a5      	movs	r0, #165	; 0xa5
 80022d8:	f7ff ff94 	bl	8002204 <W25qxx_Spi>
 80022dc:	4604      	mov	r4, r0
		w25qxx.StatusRegister1 = status;
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <W25qxx_ReadStatusRegister+0x58>)
 80022e0:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
 80022e4:	e7f0      	b.n	80022c8 <W25qxx_ReadStatusRegister+0x24>
		W25qxx_Spi(0x35);
 80022e6:	2035      	movs	r0, #53	; 0x35
 80022e8:	f7ff ff8c 	bl	8002204 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80022ec:	20a5      	movs	r0, #165	; 0xa5
 80022ee:	f7ff ff89 	bl	8002204 <W25qxx_Spi>
 80022f2:	4604      	mov	r4, r0
		w25qxx.StatusRegister2 = status;
 80022f4:	4b01      	ldr	r3, [pc, #4]	; (80022fc <W25qxx_ReadStatusRegister+0x58>)
 80022f6:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
 80022fa:	e7e5      	b.n	80022c8 <W25qxx_ReadStatusRegister+0x24>
 80022fc:	20002ab0 	.word	0x20002ab0

08002300 <W25qxx_Init>:
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 FLASH_DESELECT;
}
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8002300:	b510      	push	{r4, lr}
	w25qxx.Lock=1;	
 8002302:	4b42      	ldr	r3, [pc, #264]	; (800240c <W25qxx_Init+0x10c>)
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 800230a:	e002      	b.n	8002312 <W25qxx_Init+0x12>
		W25qxx_Delay(1);
 800230c:	2001      	movs	r0, #1
 800230e:	f006 fb5a 	bl	80089c6 <osDelay>
	while(HAL_GetTick()<100)
 8002312:	f002 ffaf 	bl	8005274 <HAL_GetTick>
 8002316:	2863      	cmp	r0, #99	; 0x63
 8002318:	d9f8      	bls.n	800230c <W25qxx_Init+0xc>
  FLASH_DESELECT;
 800231a:	f000 f9c1 	bl	80026a0 <FLASH_ChipDeselect>
  W25qxx_Delay(100);
 800231e:	2064      	movs	r0, #100	; 0x64
 8002320:	f006 fb51 	bl	80089c6 <osDelay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 8002324:	f7ff ff84 	bl	8002230 <W25qxx_ReadID>
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8002328:	b280      	uxth	r0, r0
 800232a:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 800232e:	3811      	subs	r0, #17
 8002330:	2809      	cmp	r0, #9
 8002332:	d866      	bhi.n	8002402 <W25qxx_Init+0x102>
 8002334:	e8df f000 	tbb	[pc, r0]
 8002338:	4d53595f 	.word	0x4d53595f
 800233c:	343b4147 	.word	0x343b4147
 8002340:	052d      	.short	0x052d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8002342:	4b32      	ldr	r3, [pc, #200]	; (800240c <W25qxx_Init+0x10c>)
 8002344:	220a      	movs	r2, #10
 8002346:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8002348:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800234c:	61da      	str	r2, [r3, #28]
				#endif
			w25qxx.Lock=0;	
			return false;
				
	}		
	w25qxx.PageSize=256;
 800234e:	4c2f      	ldr	r4, [pc, #188]	; (800240c <W25qxx_Init+0x10c>)
 8002350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002354:	8163      	strh	r3, [r4, #10]
	w25qxx.SectorSize=0x1000;
 8002356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800235a:	6123      	str	r3, [r4, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 800235c:	69e3      	ldr	r3, [r4, #28]
 800235e:	011a      	lsls	r2, r3, #4
 8002360:	6162      	str	r2, [r4, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8002362:	041b      	lsls	r3, r3, #16
 8002364:	0a1a      	lsrs	r2, r3, #8
 8002366:	60e2      	str	r2, [r4, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8002368:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800236c:	61a2      	str	r2, [r4, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 800236e:	0a9b      	lsrs	r3, r3, #10
 8002370:	6223      	str	r3, [r4, #32]
	W25qxx_ReadUniqID();
 8002372:	f7ff ff77 	bl	8002264 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002376:	2001      	movs	r0, #1
 8002378:	f7ff ff94 	bl	80022a4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800237c:	2002      	movs	r0, #2
 800237e:	f7ff ff91 	bl	80022a4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002382:	2003      	movs	r0, #3
 8002384:	f7ff ff8e 	bl	80022a4 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 8002388:	2300      	movs	r3, #0
 800238a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return true;
 800238e:	2001      	movs	r0, #1
}	
 8002390:	bd10      	pop	{r4, pc}
			w25qxx.ID=W25Q256;
 8002392:	4b1e      	ldr	r3, [pc, #120]	; (800240c <W25qxx_Init+0x10c>)
 8002394:	2209      	movs	r2, #9
 8002396:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8002398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800239c:	61da      	str	r2, [r3, #28]
		break;
 800239e:	e7d6      	b.n	800234e <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q128;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <W25qxx_Init+0x10c>)
 80023a2:	2208      	movs	r2, #8
 80023a4:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 80023a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023aa:	61da      	str	r2, [r3, #28]
		break;
 80023ac:	e7cf      	b.n	800234e <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q64;
 80023ae:	4b17      	ldr	r3, [pc, #92]	; (800240c <W25qxx_Init+0x10c>)
 80023b0:	2207      	movs	r2, #7
 80023b2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	61da      	str	r2, [r3, #28]
		break;
 80023b8:	e7c9      	b.n	800234e <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q32;
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <W25qxx_Init+0x10c>)
 80023bc:	2206      	movs	r2, #6
 80023be:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 80023c0:	2240      	movs	r2, #64	; 0x40
 80023c2:	61da      	str	r2, [r3, #28]
		break;
 80023c4:	e7c3      	b.n	800234e <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q16;
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <W25qxx_Init+0x10c>)
 80023c8:	2205      	movs	r2, #5
 80023ca:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 80023cc:	2220      	movs	r2, #32
 80023ce:	61da      	str	r2, [r3, #28]
		break;
 80023d0:	e7bd      	b.n	800234e <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q80;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <W25qxx_Init+0x10c>)
 80023d4:	2204      	movs	r2, #4
 80023d6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 80023d8:	2210      	movs	r2, #16
 80023da:	61da      	str	r2, [r3, #28]
		break;
 80023dc:	e7b7      	b.n	800234e <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q40;
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <W25qxx_Init+0x10c>)
 80023e0:	2203      	movs	r2, #3
 80023e2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 80023e4:	2208      	movs	r2, #8
 80023e6:	61da      	str	r2, [r3, #28]
		break;
 80023e8:	e7b1      	b.n	800234e <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q20;
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <W25qxx_Init+0x10c>)
 80023ec:	2202      	movs	r2, #2
 80023ee:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 80023f0:	2204      	movs	r2, #4
 80023f2:	61da      	str	r2, [r3, #28]
		break;
 80023f4:	e7ab      	b.n	800234e <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q10;
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <W25qxx_Init+0x10c>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 80023fc:	2202      	movs	r2, #2
 80023fe:	61da      	str	r2, [r3, #28]
		break;
 8002400:	e7a5      	b.n	800234e <W25qxx_Init+0x4e>
			w25qxx.Lock=0;	
 8002402:	2000      	movs	r0, #0
 8002404:	4b01      	ldr	r3, [pc, #4]	; (800240c <W25qxx_Init+0x10c>)
 8002406:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
			return false;
 800240a:	e7c1      	b.n	8002390 <W25qxx_Init+0x90>
 800240c:	20002ab0 	.word	0x20002ab0

08002410 <vModbusInit>:
#include "Modbus.h"

void vModbusInit (ModbusHandler *modbus, UART_HandleTypeDef *port, TickType_t timeout){
	modbus -> ModbusSerialPort = port;
 8002410:	6001      	str	r1, [r0, #0]
	modbus -> timeout_t = timeout / portTICK_PERIOD_MS;
 8002412:	6042      	str	r2, [r0, #4]
}
 8002414:	4770      	bx	lr

08002416 <uModbusCalculateCRC>:

uint16_t uModbusCalculateCRC (uint8_t frame_length, uint8_t *frame){
 8002416:	b430      	push	{r4, r5}
	uint16_t calculatedCRC = 0xFFFF;
	uint16_t CRChigh, CRClow;
	for(int i = 0; i < frame_length; i++){
 8002418:	2500      	movs	r5, #0
	uint16_t calculatedCRC = 0xFFFF;
 800241a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	for(int i = 0; i < frame_length; i++){
 800241e:	e00d      	b.n	800243c <uModbusCalculateCRC+0x26>
		for(int j = 8; j > 0; j--){
			if(calculatedCRC & 0x0001){
				calculatedCRC >>= 1;
				calculatedCRC ^= 0xA001;
			}else{
				calculatedCRC >>= 1;
 8002420:	085b      	lsrs	r3, r3, #1
		for(int j = 8; j > 0; j--){
 8002422:	3a01      	subs	r2, #1
 8002424:	2a00      	cmp	r2, #0
 8002426:	dd07      	ble.n	8002438 <uModbusCalculateCRC+0x22>
			if(calculatedCRC & 0x0001){
 8002428:	f013 0f01 	tst.w	r3, #1
 800242c:	d0f8      	beq.n	8002420 <uModbusCalculateCRC+0xa>
				calculatedCRC ^= 0xA001;
 800242e:	f24a 0401 	movw	r4, #40961	; 0xa001
 8002432:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
 8002436:	e7f4      	b.n	8002422 <uModbusCalculateCRC+0xc>
			}
		}
		frame++;
 8002438:	3101      	adds	r1, #1
	for(int i = 0; i < frame_length; i++){
 800243a:	3501      	adds	r5, #1
 800243c:	42a8      	cmp	r0, r5
 800243e:	dd03      	ble.n	8002448 <uModbusCalculateCRC+0x32>
		calculatedCRC ^= (*frame);
 8002440:	780a      	ldrb	r2, [r1, #0]
 8002442:	4053      	eors	r3, r2
		for(int j = 8; j > 0; j--){
 8002444:	2208      	movs	r2, #8
 8002446:	e7ed      	b.n	8002424 <uModbusCalculateCRC+0xe>
	}

	CRChigh = (calculatedCRC & 0x00FF) <<8;
 8002448:	0218      	lsls	r0, r3, #8
 800244a:	b280      	uxth	r0, r0
	CRClow = (calculatedCRC & 0xFF00) >>8;
	calculatedCRC = CRChigh + CRClow;
 800244c:	eb00 2013 	add.w	r0, r0, r3, lsr #8

	//calculatedCRC = HAL_CRC_Calculate(&hcrc, frame, frame_length);
	return calculatedCRC;
}
 8002450:	b280      	uxth	r0, r0
 8002452:	bc30      	pop	{r4, r5}
 8002454:	4770      	bx	lr

08002456 <bModbusCheckCRC>:

uint8_t bModbusCheckCRC (uint8_t frame_length, uint8_t *frame){
 8002456:	b570      	push	{r4, r5, r6, lr}
 8002458:	4604      	mov	r4, r0
 800245a:	460d      	mov	r5, r1
	uint16_t crc = uModbusCalculateCRC(frame_length - 2, frame);
 800245c:	1e86      	subs	r6, r0, #2
 800245e:	b2f0      	uxtb	r0, r6
 8002460:	f7ff ffd9 	bl	8002416 <uModbusCalculateCRC>
	uint16_t frameCRC = (uint16_t)(*(frame + frame_length - 2));
 8002464:	5daa      	ldrb	r2, [r5, r6]
	frameCRC <<= 8;
	frameCRC += *(frame + frame_length - 1);
 8002466:	3c01      	subs	r4, #1
 8002468:	5d2b      	ldrb	r3, [r5, r4]
 800246a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800246e:	b29b      	uxth	r3, r3

	if(crc == frameCRC){
 8002470:	4298      	cmp	r0, r3
 8002472:	d001      	beq.n	8002478 <bModbusCheckCRC+0x22>
		return 1;
	}

	return 0;
 8002474:	2000      	movs	r0, #0
}
 8002476:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8002478:	2001      	movs	r0, #1
 800247a:	e7fc      	b.n	8002476 <bModbusCheckCRC+0x20>

0800247c <vModbusReadInputRegisters>:
		return Modbus_TIMEOUT;
	}
	return Modbus_CRCERR;
}

ModbusState vModbusReadInputRegisters (ModbusHandler *modbus, uint8_t slave_address, uint16_t first_register_address, uint16_t registers_count, uint8_t *response_frame){
 800247c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	4606      	mov	r6, r0
 8002486:	4689      	mov	r9, r1
 8002488:	f8d7 8030 	ldr.w	r8, [r7, #48]	; 0x30
	uint8_t transmit_frame_buffer[8];
	uint16_t transmitCRC;
	uint8_t received_frame_length = (registers_count * 2) + 5;
 800248c:	fa5f fe83 	uxtb.w	lr, r3
 8002490:	ea4f 044e 	mov.w	r4, lr, lsl #1
 8002494:	b2e4      	uxtb	r4, r4
 8002496:	3405      	adds	r4, #5
 8002498:	b2e4      	uxtb	r4, r4
	uint8_t received_frame_buffer[received_frame_length];
 800249a:	46a4      	mov	ip, r4
 800249c:	1de1      	adds	r1, r4, #7
 800249e:	f401 71fc 	and.w	r1, r1, #504	; 0x1f8
 80024a2:	ebad 0d01 	sub.w	sp, sp, r1
 80024a6:	466d      	mov	r5, sp
	uint32_t ulNotificationValue;
	for(int i = 0; i < received_frame_length; i++){
 80024a8:	2100      	movs	r1, #0
 80024aa:	e002      	b.n	80024b2 <vModbusReadInputRegisters+0x36>
		received_frame_buffer[i] = 0;
 80024ac:	2000      	movs	r0, #0
 80024ae:	5468      	strb	r0, [r5, r1]
	for(int i = 0; i < received_frame_length; i++){
 80024b0:	3101      	adds	r1, #1
 80024b2:	458c      	cmp	ip, r1
 80024b4:	dcfa      	bgt.n	80024ac <vModbusReadInputRegisters+0x30>

	}
	transmit_frame_buffer[0] = slave_address;
 80024b6:	f887 9000 	strb.w	r9, [r7]
	transmit_frame_buffer[1] = 0x04;
 80024ba:	2104      	movs	r1, #4
 80024bc:	7079      	strb	r1, [r7, #1]
	transmit_frame_buffer[2] = (uint8_t)(first_register_address >> 8);
 80024be:	0a11      	lsrs	r1, r2, #8
 80024c0:	70b9      	strb	r1, [r7, #2]
	transmit_frame_buffer[3] = (uint8_t)first_register_address;
 80024c2:	70fa      	strb	r2, [r7, #3]
	transmit_frame_buffer[4] = (uint8_t)(registers_count >> 8);
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	713b      	strb	r3, [r7, #4]
	transmit_frame_buffer[5] = (uint8_t)(registers_count);
 80024c8:	f887 e005 	strb.w	lr, [r7, #5]
	transmitCRC = uModbusCalculateCRC (6, transmit_frame_buffer);
 80024cc:	4639      	mov	r1, r7
 80024ce:	2006      	movs	r0, #6
 80024d0:	f7ff ffa1 	bl	8002416 <uModbusCalculateCRC>
	transmit_frame_buffer[6] = (transmitCRC >> 8);
 80024d4:	0a03      	lsrs	r3, r0, #8
 80024d6:	71bb      	strb	r3, [r7, #6]
	transmit_frame_buffer[7] = (uint8_t)(transmitCRC);
 80024d8:	71f8      	strb	r0, [r7, #7]

	//Wy�lij dane;
	HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_SET);
 80024da:	2201      	movs	r2, #1
 80024dc:	2102      	movs	r1, #2
 80024de:	4829      	ldr	r0, [pc, #164]	; (8002584 <vModbusReadInputRegisters+0x108>)
 80024e0:	f003 fc15 	bl	8005d0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 80024e4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8002588 <vModbusReadInputRegisters+0x10c>
 80024e8:	2200      	movs	r2, #0
 80024ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ee:	4650      	mov	r0, sl
 80024f0:	f003 fc0d 	bl	8005d0e <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(modbus -> ModbusSerialPort, transmit_frame_buffer, 8);
 80024f4:	2208      	movs	r2, #8
 80024f6:	4639      	mov	r1, r7
 80024f8:	6830      	ldr	r0, [r6, #0]
 80024fa:	f005 fffa 	bl	80084f2 <HAL_UART_Transmit_IT>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 80024fe:	6871      	ldr	r1, [r6, #4]
 8002500:	2001      	movs	r0, #1
 8002502:	f007 fd89 	bl	800a018 <ulTaskNotifyTake>
	HAL_UART_Receive_DMA(modbus -> ModbusSerialPort, received_frame_buffer, received_frame_length);
 8002506:	4622      	mov	r2, r4
 8002508:	4629      	mov	r1, r5
 800250a:	6830      	ldr	r0, [r6, #0]
 800250c:	f006 f816 	bl	800853c <HAL_UART_Receive_DMA>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 8002510:	6871      	ldr	r1, [r6, #4]
 8002512:	2001      	movs	r0, #1
 8002514:	f007 fd80 	bl	800a018 <ulTaskNotifyTake>
 8002518:	4683      	mov	fp, r0
	vTaskDelay(1);
 800251a:	2001      	movs	r0, #1
 800251c:	f007 faf4 	bl	8009b08 <vTaskDelay>
	HAL_UART_AbortTransmit(modbus -> ModbusSerialPort);
 8002520:	6830      	ldr	r0, [r6, #0]
 8002522:	f006 f85f 	bl	80085e4 <HAL_UART_AbortTransmit>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 8002526:	2201      	movs	r2, #1
 8002528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800252c:	4650      	mov	r0, sl
 800252e:	f003 fbee 	bl	8005d0e <HAL_GPIO_WritePin>
	if(ulNotificationValue){
 8002532:	f1bb 0f00 	cmp.w	fp, #0
 8002536:	d019      	beq.n	800256c <vModbusReadInputRegisters+0xf0>
		if(bModbusCheckCRC(received_frame_length, received_frame_buffer)){
 8002538:	4629      	mov	r1, r5
 800253a:	4620      	mov	r0, r4
 800253c:	f7ff ff8b 	bl	8002456 <bModbusCheckCRC>
 8002540:	b1e0      	cbz	r0, 800257c <vModbusReadInputRegisters+0x100>
			if(received_frame_buffer[0] == slave_address && received_frame_buffer[1] == 0x04){
 8002542:	782b      	ldrb	r3, [r5, #0]
 8002544:	454b      	cmp	r3, r9
 8002546:	d11b      	bne.n	8002580 <vModbusReadInputRegisters+0x104>
 8002548:	786b      	ldrb	r3, [r5, #1]
 800254a:	2b04      	cmp	r3, #4
 800254c:	d101      	bne.n	8002552 <vModbusReadInputRegisters+0xd6>
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 800254e:	2200      	movs	r2, #0
 8002550:	e006      	b.n	8002560 <vModbusReadInputRegisters+0xe4>
				return Modbus_OK;
			}
#ifdef __DEBUG
			printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
			return Modbus_CRCERR;
 8002552:	2002      	movs	r0, #2
 8002554:	e00e      	b.n	8002574 <vModbusReadInputRegisters+0xf8>
					*response_frame = received_frame_buffer[i + 3];
 8002556:	1cd3      	adds	r3, r2, #3
 8002558:	5ceb      	ldrb	r3, [r5, r3]
 800255a:	f808 3b01 	strb.w	r3, [r8], #1
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 800255e:	3201      	adds	r2, #1
 8002560:	78ab      	ldrb	r3, [r5, #2]
 8002562:	3302      	adds	r3, #2
 8002564:	429a      	cmp	r2, r3
 8002566:	dbf6      	blt.n	8002556 <vModbusReadInputRegisters+0xda>
				return Modbus_OK;
 8002568:	2000      	movs	r0, #0
 800256a:	e003      	b.n	8002574 <vModbusReadInputRegisters+0xf8>
#ifdef __DEBUG
		printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
		return Modbus_CRCERR;
	}else{
		HAL_UART_AbortReceive_IT(modbus -> ModbusSerialPort);
 800256c:	6830      	ldr	r0, [r6, #0]
 800256e:	f006 f9ab 	bl	80088c8 <HAL_UART_AbortReceive_IT>
#ifdef __DEBUG
		printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
		return Modbus_TIMEOUT;
 8002572:	2001      	movs	r0, #1
	}
#ifdef __DEBUG
	printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
	return Modbus_CRCERR;
}
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return Modbus_CRCERR;
 800257c:	2002      	movs	r0, #2
 800257e:	e7f9      	b.n	8002574 <vModbusReadInputRegisters+0xf8>
			return Modbus_CRCERR;
 8002580:	2002      	movs	r0, #2
 8002582:	e7f7      	b.n	8002574 <vModbusReadInputRegisters+0xf8>
 8002584:	40020000 	.word	0x40020000
 8002588:	40020800 	.word	0x40020800

0800258c <RB_CreateBuffer>:

RB_Status RB_CreateBuffer(RingBuffer *Buffer, uint8_t Size)
{
	//*Buffer = malloc(sizeof(RingBuffer) + (sizeof(uint8_t) * Size));

	if(Buffer == NULL)
 800258c:	4603      	mov	r3, r0
 800258e:	b130      	cbz	r0, 800259e <RB_CreateBuffer+0x12>
	{
		return RB_NOTCREATED;
	}

	(Buffer)->Size = 32;
 8002590:	2220      	movs	r2, #32
 8002592:	7002      	strb	r2, [r0, #0]
	(Buffer)->Head = 0;
 8002594:	2000      	movs	r0, #0
 8002596:	7058      	strb	r0, [r3, #1]
	(Buffer)->Tail = 0;
 8002598:	7098      	strb	r0, [r3, #2]
	(Buffer)->Elements = 0;
 800259a:	70d8      	strb	r0, [r3, #3]

	return RB_OK;
 800259c:	4770      	bx	lr
		return RB_NOTCREATED;
 800259e:	2002      	movs	r0, #2
}
 80025a0:	4770      	bx	lr

080025a2 <RB_WriteToBuffer>:

RB_Status RB_WriteToBuffer(RingBuffer *Buffer, uint8_t Data)
{
 80025a2:	b430      	push	{r4, r5}
	uint8_t TempHead;

	TempHead = (Buffer->Head + 1) % Buffer->Size;
 80025a4:	7843      	ldrb	r3, [r0, #1]
 80025a6:	1c5d      	adds	r5, r3, #1
 80025a8:	7804      	ldrb	r4, [r0, #0]
 80025aa:	fb95 f2f4 	sdiv	r2, r5, r4
 80025ae:	fb04 5212 	mls	r2, r4, r2, r5
 80025b2:	b2d2      	uxtb	r2, r2

	if( TempHead == Buffer->Tail) // No room for new data
 80025b4:	7885      	ldrb	r5, [r0, #2]
 80025b6:	4295      	cmp	r5, r2
 80025b8:	d00e      	beq.n	80025d8 <RB_WriteToBuffer+0x36>
	{
		return RB_NOFREESPACE;
	}
	else
	{
		Buffer->Buffer[Buffer->Head] = Data;
 80025ba:	18c2      	adds	r2, r0, r3
 80025bc:	7111      	strb	r1, [r2, #4]

		Buffer->Head++;
 80025be:	3301      	adds	r3, #1
 80025c0:	b2db      	uxtb	r3, r3
		Buffer->Head %= Buffer->Size;
 80025c2:	fbb3 f2f4 	udiv	r2, r3, r4
 80025c6:	fb04 3312 	mls	r3, r4, r2, r3
 80025ca:	7043      	strb	r3, [r0, #1]

		Buffer->Elements++;
 80025cc:	78c3      	ldrb	r3, [r0, #3]
 80025ce:	3301      	adds	r3, #1
 80025d0:	70c3      	strb	r3, [r0, #3]
	}

	return RB_OK;
 80025d2:	2000      	movs	r0, #0
}
 80025d4:	bc30      	pop	{r4, r5}
 80025d6:	4770      	bx	lr
		return RB_NOFREESPACE;
 80025d8:	2003      	movs	r0, #3
 80025da:	e7fb      	b.n	80025d4 <RB_WriteToBuffer+0x32>

080025dc <RB_ReadFromBuffer>:

RB_Status RB_ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
	if( Buffer->Tail == Buffer->Head) // No data to read
 80025dc:	7883      	ldrb	r3, [r0, #2]
 80025de:	7842      	ldrb	r2, [r0, #1]
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d010      	beq.n	8002606 <RB_ReadFromBuffer+0x2a>
	{
		return RB_NOELEMENTS;
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 80025e4:	4403      	add	r3, r0
 80025e6:	791b      	ldrb	r3, [r3, #4]
 80025e8:	700b      	strb	r3, [r1, #0]

		Buffer->Tail++;
 80025ea:	7883      	ldrb	r3, [r0, #2]
 80025ec:	3301      	adds	r3, #1
 80025ee:	b2db      	uxtb	r3, r3
		Buffer->Tail %= Buffer->Size;
 80025f0:	7801      	ldrb	r1, [r0, #0]
 80025f2:	fbb3 f2f1 	udiv	r2, r3, r1
 80025f6:	fb01 3312 	mls	r3, r1, r2, r3
 80025fa:	7083      	strb	r3, [r0, #2]

		Buffer->Elements--;
 80025fc:	78c3      	ldrb	r3, [r0, #3]
 80025fe:	3b01      	subs	r3, #1
 8002600:	70c3      	strb	r3, [r0, #3]
	}
	return RB_OK;
 8002602:	2000      	movs	r0, #0
 8002604:	4770      	bx	lr
		return RB_NOELEMENTS;
 8002606:	2004      	movs	r0, #4
}
 8002608:	4770      	bx	lr

0800260a <RB_ElementsAvailable>:

uint8_t RB_ElementsAvailable(RingBuffer *Buffer)
{
	return Buffer->Elements;
}
 800260a:	78c0      	ldrb	r0, [r0, #3]
 800260c:	4770      	bx	lr
	...

08002610 <RuntimeStats_TelnetRxInc>:
void RuntimeStats_Init(void){
	memset(&commStats, 0, 48);
}

void RuntimeStats_TelnetRxInc (void){
	commStats.telnetStats.rxFrames++;
 8002610:	4a02      	ldr	r2, [pc, #8]	; (800261c <RuntimeStats_TelnetRxInc+0xc>)
 8002612:	6813      	ldr	r3, [r2, #0]
 8002614:	3301      	adds	r3, #1
 8002616:	6013      	str	r3, [r2, #0]
}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20002ad8 	.word	0x20002ad8

08002620 <RuntimeStats_TelnetTxInc>:

void RuntimeStats_TelnetTxInc (void){
	commStats.telnetStats.txFrames++;
 8002620:	4a02      	ldr	r2, [pc, #8]	; (800262c <RuntimeStats_TelnetTxInc+0xc>)
 8002622:	6853      	ldr	r3, [r2, #4]
 8002624:	3301      	adds	r3, #1
 8002626:	6053      	str	r3, [r2, #4]
}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20002ad8 	.word	0x20002ad8

08002630 <RuntimeStats_TelnetCurrIPSet>:

void RuntimeStats_TelnetCurrIPSet (uint8_t* ip){
	memcpy(&(commStats.telnetStats.currIP), ip, 4);
 8002630:	6802      	ldr	r2, [r0, #0]
 8002632:	4b01      	ldr	r3, [pc, #4]	; (8002638 <RuntimeStats_TelnetCurrIPSet+0x8>)
 8002634:	609a      	str	r2, [r3, #8]
}
 8002636:	4770      	bx	lr
 8002638:	20002ad8 	.word	0x20002ad8

0800263c <RuntimeStats_TelnetLastIPSet>:

void RuntimeStats_TelnetLastIPSet (void){
	memcpy(&(commStats.telnetStats.lastIP), &(commStats.telnetStats.currIP), 4);
 800263c:	4b02      	ldr	r3, [pc, #8]	; (8002648 <RuntimeStats_TelnetLastIPSet+0xc>)
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
	memset(&(commStats.telnetStats.currIP), 0, 4);
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
}
 8002646:	4770      	bx	lr
 8002648:	20002ad8 	.word	0x20002ad8

0800264c <RuntimeStats_TelnetGetRxCnt>:

uint32_t RuntimeStats_TelnetGetRxCnt (void){
	return commStats.telnetStats.rxFrames;
}
 800264c:	4b01      	ldr	r3, [pc, #4]	; (8002654 <RuntimeStats_TelnetGetRxCnt+0x8>)
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20002ad8 	.word	0x20002ad8

08002658 <RuntimeStats_TelnetGetTxCnt>:

uint32_t RuntimeStats_TelnetGetTxCnt (void){
	return commStats.telnetStats.txFrames;
}
 8002658:	4b01      	ldr	r3, [pc, #4]	; (8002660 <RuntimeStats_TelnetGetTxCnt+0x8>)
 800265a:	6858      	ldr	r0, [r3, #4]
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20002ad8 	.word	0x20002ad8

08002664 <RuntimeStats_TelnetGetCurIP>:

void RuntimeStats_TelnetGetCurIP (uint8_t* ip){
	memcpy(ip, &(commStats.telnetStats.currIP), 4);
 8002664:	4b01      	ldr	r3, [pc, #4]	; (800266c <RuntimeStats_TelnetGetCurIP+0x8>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	6003      	str	r3, [r0, #0]
}
 800266a:	4770      	bx	lr
 800266c:	20002ad8 	.word	0x20002ad8

08002670 <RuntimeStats_TelnetGetLastIP>:

void RuntimeStats_TelnetGetLastIP (uint8_t* ip){
	memcpy(ip, &(commStats.telnetStats.lastIP), 4);
 8002670:	4b01      	ldr	r3, [pc, #4]	; (8002678 <RuntimeStats_TelnetGetLastIP+0x8>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	6003      	str	r3, [r0, #0]
}
 8002676:	4770      	bx	lr
 8002678:	20002ad8 	.word	0x20002ad8

0800267c <FLASH_ChipSelect>:

extern osMutexId SPIMutexHandle;



void FLASH_ChipSelect (void){
 800267c:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 800267e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <FLASH_ChipSelect+0x1c>)
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	f006 fd7f 	bl	8009188 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 800268a:	2200      	movs	r2, #0
 800268c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <FLASH_ChipSelect+0x20>)
 8002692:	f003 fb3c 	bl	8005d0e <HAL_GPIO_WritePin>
}
 8002696:	bd08      	pop	{r3, pc}
 8002698:	20003304 	.word	0x20003304
 800269c:	40020400 	.word	0x40020400

080026a0 <FLASH_ChipDeselect>:

void FLASH_ChipDeselect (void){
 80026a0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80026a2:	2201      	movs	r2, #1
 80026a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026a8:	4805      	ldr	r0, [pc, #20]	; (80026c0 <FLASH_ChipDeselect+0x20>)
 80026aa:	f003 fb30 	bl	8005d0e <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 80026ae:	2300      	movs	r3, #0
 80026b0:	461a      	mov	r2, r3
 80026b2:	4619      	mov	r1, r3
 80026b4:	4803      	ldr	r0, [pc, #12]	; (80026c4 <FLASH_ChipDeselect+0x24>)
 80026b6:	6800      	ldr	r0, [r0, #0]
 80026b8:	f006 fb70 	bl	8008d9c <xQueueGenericSend>
}
 80026bc:	bd08      	pop	{r3, pc}
 80026be:	bf00      	nop
 80026c0:	40020400 	.word	0x40020400
 80026c4:	20003304 	.word	0x20003304

080026c8 <DataLogTask>:

void DataLogTask(void const * argument)
{
 80026c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DataLog */
	W25qxx_Init();
 80026ca:	f7ff fe19 	bl	8002300 <W25qxx_Init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f006 f979 	bl	80089c6 <osDelay>
 80026d4:	e7fb      	b.n	80026ce <DataLogTask+0x6>
	...

080026d8 <nextion_SendData>:
static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3);
static void nextion_SendConfig(UART_HandleTypeDef* uart);
void NextionBig_DataRcv (void);
void NextionSmall_DataRcv (void);

static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3){
 80026d8:	b530      	push	{r4, r5, lr}
 80026da:	b08d      	sub	sp, #52	; 0x34
	char buffor_to_send[40];
	uint8_t buffor_to_send_size;
	current_command = cmd;
 80026dc:	4c28      	ldr	r4, [pc, #160]	; (8002780 <nextion_SendData+0xa8>)
 80026de:	7021      	strb	r1, [r4, #0]
	if(cmd < NEX_COMMANDS_COUNT && cmd > -1){
 80026e0:	2921      	cmp	r1, #33	; 0x21
 80026e2:	d84b      	bhi.n	800277c <nextion_SendData+0xa4>
 80026e4:	4605      	mov	r5, r0
		if(cmd == NEX_WAKE || cmd == NEX_SENDME || cmd == NEX_SETTINGS_SAVED || cmd == NEX_SETTINGS_NOT_SAVED
 80026e6:	2901      	cmp	r1, #1
 80026e8:	d919      	bls.n	800271e <nextion_SendData+0x46>
 80026ea:	2911      	cmp	r1, #17
 80026ec:	d017      	beq.n	800271e <nextion_SendData+0x46>
 80026ee:	2912      	cmp	r1, #18
 80026f0:	d015      	beq.n	800271e <nextion_SendData+0x46>
			|| cmd == NEX_SETTINGS_LOCK || cmd == NEX_SETTINGS_UNLOCK){
 80026f2:	2921      	cmp	r1, #33	; 0x21
 80026f4:	d013      	beq.n	800271e <nextion_SendData+0x46>
 80026f6:	2920      	cmp	r1, #32
 80026f8:	d011      	beq.n	800271e <nextion_SendData+0x46>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
		}else if(cmd == NEX_PHASE_VOLTAGE ||
			cmd == NEX_PHASE_CURRENT ||
 80026fa:	f1a1 0018 	sub.w	r0, r1, #24
 80026fe:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_VOLTAGE ||
 8002700:	2802      	cmp	r0, #2
 8002702:	d916      	bls.n	8002732 <nextion_SendData+0x5a>
			cmd == NEX_PHASE_POWER){
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
		}else if(cmd == NEX_PHASE_PRG_BAR ||
			cmd == NEX_CO_HEATER_PHASE_DUTY ||
			cmd == NEX_CWU_HEATER_PHASE_DUTY ||
			cmd == NEX_CWU_TEMP || cmd == NEX_CO_TEMP){
 8002704:	f1a1 001b 	sub.w	r0, r1, #27
 8002708:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_PRG_BAR ||
 800270a:	2804      	cmp	r0, #4
 800270c:	d81b      	bhi.n	8002746 <nextion_SendData+0x6e>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2);
 800270e:	481d      	ldr	r0, [pc, #116]	; (8002784 <nextion_SendData+0xac>)
 8002710:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002714:	a802      	add	r0, sp, #8
 8002716:	f009 f87f 	bl	800b818 <siprintf>
 800271a:	b2c2      	uxtb	r2, r0
 800271c:	e006      	b.n	800272c <nextion_SendData+0x54>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <nextion_SendData+0xac>)
 8002720:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002724:	a802      	add	r0, sp, #8
 8002726:	f009 f877 	bl	800b818 <siprintf>
 800272a:	b2c2      	uxtb	r2, r0
		}else{
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
		}
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 800272c:	4610      	mov	r0, r2
 800272e:	4613      	mov	r3, r2
 8002730:	e017      	b.n	8002762 <nextion_SendData+0x8a>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
 8002732:	4814      	ldr	r0, [pc, #80]	; (8002784 <nextion_SendData+0xac>)
 8002734:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002738:	9810      	ldr	r0, [sp, #64]	; 0x40
 800273a:	9000      	str	r0, [sp, #0]
 800273c:	a802      	add	r0, sp, #8
 800273e:	f009 f86b 	bl	800b818 <siprintf>
 8002742:	b2c2      	uxtb	r2, r0
 8002744:	e7f2      	b.n	800272c <nextion_SendData+0x54>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
 8002746:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <nextion_SendData+0xac>)
 8002748:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800274c:	a802      	add	r0, sp, #8
 800274e:	f009 f863 	bl	800b818 <siprintf>
 8002752:	b2c2      	uxtb	r2, r0
 8002754:	e7ea      	b.n	800272c <nextion_SendData+0x54>
			buffor_to_send[i] = 0xFF;
 8002756:	a90c      	add	r1, sp, #48	; 0x30
 8002758:	4419      	add	r1, r3
 800275a:	24ff      	movs	r4, #255	; 0xff
 800275c:	f801 4c28 	strb.w	r4, [r1, #-40]
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 8002760:	3301      	adds	r3, #1
 8002762:	1cc1      	adds	r1, r0, #3
 8002764:	4299      	cmp	r1, r3
 8002766:	dcf6      	bgt.n	8002756 <nextion_SendData+0x7e>
		}
		buffor_to_send_size += 3;
 8002768:	3203      	adds	r2, #3
		HAL_UART_Transmit(uart, (uint8_t*)buffor_to_send, buffor_to_send_size, 20);
 800276a:	2314      	movs	r3, #20
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	a902      	add	r1, sp, #8
 8002770:	4628      	mov	r0, r5
 8002772:	f005 fe4d 	bl	8008410 <HAL_UART_Transmit>
		vTaskDelay(5);
 8002776:	2005      	movs	r0, #5
 8002778:	f007 f9c6 	bl	8009b08 <vTaskDelay>
	}
}
 800277c:	b00d      	add	sp, #52	; 0x34
 800277e:	bd30      	pop	{r4, r5, pc}
 8002780:	20002be8 	.word	0x20002be8
 8002784:	0800c654 	.word	0x0800c654

08002788 <nextion_SendConfig>:
	nextion_SendData(uart, NEX_MINUTE, currTime.Minutes, 0, 0);
	current_command = NEX_SECONDS;
	nextion_SendData(uart, NEX_SECONDS, currTime.Seconds, 0, 0);
}

static void nextion_SendConfig(UART_HandleTypeDef* uart){
 8002788:	b570      	push	{r4, r5, r6, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	4606      	mov	r6, r0
	nextion_SendData(uart, NEX_CO_HIGH_TEMP, RegulationTaskData.parameters.CO_hi_temp, 0, 0);
 800278e:	4d27      	ldr	r5, [pc, #156]	; (800282c <nextion_SendConfig+0xa4>)
 8002790:	f995 207d 	ldrsb.w	r2, [r5, #125]	; 0x7d
 8002794:	2400      	movs	r4, #0
 8002796:	9400      	str	r4, [sp, #0]
 8002798:	4623      	mov	r3, r4
 800279a:	2108      	movs	r1, #8
 800279c:	f7ff ff9c 	bl	80026d8 <nextion_SendData>
	nextion_SendData(uart, NEX_CO_LOW_TEMP, RegulationTaskData.parameters.CO_lo_temp, 0, 0);
 80027a0:	f995 207e 	ldrsb.w	r2, [r5, #126]	; 0x7e
 80027a4:	9400      	str	r4, [sp, #0]
 80027a6:	4623      	mov	r3, r4
 80027a8:	2109      	movs	r1, #9
 80027aa:	4630      	mov	r0, r6
 80027ac:	f7ff ff94 	bl	80026d8 <nextion_SendData>
	nextion_SendData(uart, NEX_CO_HEATER_POWER, (int32_t)RegulationTaskData.parameters.CO_heater_power, 0, 0);
 80027b0:	f8d5 2071 	ldr.w	r2, [r5, #113]	; 0x71
 80027b4:	9400      	str	r4, [sp, #0]
 80027b6:	4623      	mov	r3, r4
 80027b8:	ee07 2a90 	vmov	s15, r2
 80027bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027c0:	ee17 2a90 	vmov	r2, s15
 80027c4:	210a      	movs	r1, #10
 80027c6:	4630      	mov	r0, r6
 80027c8:	f7ff ff86 	bl	80026d8 <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_HIGH_TEMP, RegulationTaskData.parameters.CWU_hi_temp, 0, 0);
 80027cc:	f995 207f 	ldrsb.w	r2, [r5, #127]	; 0x7f
 80027d0:	9400      	str	r4, [sp, #0]
 80027d2:	4623      	mov	r3, r4
 80027d4:	210b      	movs	r1, #11
 80027d6:	4630      	mov	r0, r6
 80027d8:	f7ff ff7e 	bl	80026d8 <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_LOW_TEMP, RegulationTaskData.parameters.CWU_lo_temp, 0, 0);
 80027dc:	f995 2080 	ldrsb.w	r2, [r5, #128]	; 0x80
 80027e0:	9400      	str	r4, [sp, #0]
 80027e2:	4623      	mov	r3, r4
 80027e4:	210c      	movs	r1, #12
 80027e6:	4630      	mov	r0, r6
 80027e8:	f7ff ff76 	bl	80026d8 <nextion_SendData>
	nextion_SendData(uart, NEX_CWU_HEATER_POWER, (int32_t)RegulationTaskData.parameters.CWU_heater_power, 0, 0);
 80027ec:	f8d5 206d 	ldr.w	r2, [r5, #109]	; 0x6d
 80027f0:	9400      	str	r4, [sp, #0]
 80027f2:	4623      	mov	r3, r4
 80027f4:	ee07 2a90 	vmov	s15, r2
 80027f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027fc:	ee17 2a90 	vmov	r2, s15
 8002800:	210d      	movs	r1, #13
 8002802:	4630      	mov	r0, r6
 8002804:	f7ff ff68 	bl	80026d8 <nextion_SendData>
	nextion_SendData(uart, NEX_ACC_COEFF, RegulationTaskData.parameters.acumulated_power_coeff, 0, 0);
 8002808:	f995 207b 	ldrsb.w	r2, [r5, #123]	; 0x7b
 800280c:	9400      	str	r4, [sp, #0]
 800280e:	4623      	mov	r3, r4
 8002810:	210e      	movs	r1, #14
 8002812:	4630      	mov	r0, r6
 8002814:	f7ff ff60 	bl	80026d8 <nextion_SendData>
	nextion_SendData(uart, NEX_HEATER_COEFF, RegulationTaskData.parameters.heater_power_coeff, 0, 0);
 8002818:	f995 207c 	ldrsb.w	r2, [r5, #124]	; 0x7c
 800281c:	9400      	str	r4, [sp, #0]
 800281e:	4623      	mov	r3, r4
 8002820:	210f      	movs	r1, #15
 8002822:	4630      	mov	r0, r6
 8002824:	f7ff ff58 	bl	80026d8 <nextion_SendData>
}
 8002828:	b002      	add	sp, #8
 800282a:	bd70      	pop	{r4, r5, r6, pc}
 800282c:	20002cbc 	.word	0x20002cbc

08002830 <nextion_UpdateTime>:
static void nextion_UpdateTime(UART_HandleTypeDef* uart){
 8002830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	4605      	mov	r5, r0
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8002838:	4f23      	ldr	r7, [pc, #140]	; (80028c8 <nextion_UpdateTime+0x98>)
 800283a:	4c24      	ldr	r4, [pc, #144]	; (80028cc <nextion_UpdateTime+0x9c>)
 800283c:	2200      	movs	r2, #0
 800283e:	4639      	mov	r1, r7
 8002840:	4620      	mov	r0, r4
 8002842:	f004 fd31 	bl	80072a8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 8002846:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80028d4 <nextion_UpdateTime+0xa4>
 800284a:	2200      	movs	r2, #0
 800284c:	4641      	mov	r1, r8
 800284e:	4620      	mov	r0, r4
 8002850:	f004 fd55 	bl	80072fe <HAL_RTC_GetDate>
	current_command = NEX_YEAR;
 8002854:	4e1e      	ldr	r6, [pc, #120]	; (80028d0 <nextion_UpdateTime+0xa0>)
 8002856:	2102      	movs	r1, #2
 8002858:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_YEAR, currDate.Year + 2000, 0, 0);
 800285a:	f898 2003 	ldrb.w	r2, [r8, #3]
 800285e:	2400      	movs	r4, #0
 8002860:	9400      	str	r4, [sp, #0]
 8002862:	4623      	mov	r3, r4
 8002864:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 8002868:	4628      	mov	r0, r5
 800286a:	f7ff ff35 	bl	80026d8 <nextion_SendData>
	current_command = NEX_MONTH;
 800286e:	2103      	movs	r1, #3
 8002870:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_MONTH, currDate.Month, 0, 0);
 8002872:	f898 2001 	ldrb.w	r2, [r8, #1]
 8002876:	9400      	str	r4, [sp, #0]
 8002878:	4623      	mov	r3, r4
 800287a:	4628      	mov	r0, r5
 800287c:	f7ff ff2c 	bl	80026d8 <nextion_SendData>
	current_command = NEX_DAY;
 8002880:	2104      	movs	r1, #4
 8002882:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_DAY, currDate.Date, 0, 0);
 8002884:	f898 2002 	ldrb.w	r2, [r8, #2]
 8002888:	9400      	str	r4, [sp, #0]
 800288a:	4623      	mov	r3, r4
 800288c:	4628      	mov	r0, r5
 800288e:	f7ff ff23 	bl	80026d8 <nextion_SendData>
	current_command = NEX_HOUR;
 8002892:	2105      	movs	r1, #5
 8002894:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_HOUR, currTime.Hours, 0, 0);
 8002896:	783a      	ldrb	r2, [r7, #0]
 8002898:	9400      	str	r4, [sp, #0]
 800289a:	4623      	mov	r3, r4
 800289c:	4628      	mov	r0, r5
 800289e:	f7ff ff1b 	bl	80026d8 <nextion_SendData>
	current_command = NEX_MINUTE;
 80028a2:	2106      	movs	r1, #6
 80028a4:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_MINUTE, currTime.Minutes, 0, 0);
 80028a6:	787a      	ldrb	r2, [r7, #1]
 80028a8:	9400      	str	r4, [sp, #0]
 80028aa:	4623      	mov	r3, r4
 80028ac:	4628      	mov	r0, r5
 80028ae:	f7ff ff13 	bl	80026d8 <nextion_SendData>
	current_command = NEX_SECONDS;
 80028b2:	2107      	movs	r1, #7
 80028b4:	7031      	strb	r1, [r6, #0]
	nextion_SendData(uart, NEX_SECONDS, currTime.Seconds, 0, 0);
 80028b6:	78ba      	ldrb	r2, [r7, #2]
 80028b8:	9400      	str	r4, [sp, #0]
 80028ba:	4623      	mov	r3, r4
 80028bc:	4628      	mov	r0, r5
 80028be:	f7ff ff0b 	bl	80026d8 <nextion_SendData>
}
 80028c2:	b002      	add	sp, #8
 80028c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028c8:	20002ca8 	.word	0x20002ca8
 80028cc:	20003188 	.word	0x20003188
 80028d0:	20002be8 	.word	0x20002be8
 80028d4:	20002d4c 	.word	0x20002d4c

080028d8 <NextionBig_DataRcv>:
		}
	}
  /* USER CODE END UpdateLCD */
}

void NextionBig_DataRcv (void){
 80028d8:	b530      	push	{r4, r5, lr}
 80028da:	b083      	sub	sp, #12
	uint8_t stopbyte = 0;
 80028dc:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 80028de:	e062      	b.n	80029a6 <NextionBig_DataRcv+0xce>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
		start = nextion_big_comm.UartBufferHead;
		if(len > 3){
			if(len > 9){
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
					memcpy(&number, &nextion_big_comm.UART_Buffer[start], 4);
 80028e0:	f102 0320 	add.w	r3, r2, #32
 80028e4:	4d3d      	ldr	r5, [pc, #244]	; (80029dc <NextionBig_DataRcv+0x104>)
 80028e6:	442b      	add	r3, r5
 80028e8:	f8d3 0002 	ldr.w	r0, [r3, #2]
					memcpy(&value, &nextion_big_comm.UART_Buffer[start + 5], 4);
 80028ec:	3225      	adds	r2, #37	; 0x25
 80028ee:	442a      	add	r2, r5
 80028f0:	f8d2 1002 	ldr.w	r1, [r2, #2]
					nextion_big.param = number;
 80028f4:	4b3a      	ldr	r3, [pc, #232]	; (80029e0 <NextionBig_DataRcv+0x108>)
 80028f6:	6058      	str	r0, [r3, #4]
					memcpy(&nextion_big.value, &value, 4);
 80028f8:	6099      	str	r1, [r3, #8]
					Config_ChangeValue(number, value);
 80028fa:	f7fe fc2d 	bl	8001158 <Config_ChangeValue>
					nextion_big_comm.UartBufferHead += 10;
 80028fe:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8002902:	330a      	adds	r3, #10
 8002904:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
					xTaskNotifyFromISR(DiplaysHandle, 1, eSetValueWithOverwrite, NULL);
 8002908:	4b36      	ldr	r3, [pc, #216]	; (80029e4 <NextionBig_DataRcv+0x10c>)
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	2300      	movs	r3, #0
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2203      	movs	r2, #3
 8002912:	2101      	movs	r1, #1
 8002914:	f007 fc08 	bl	800a128 <xTaskGenericNotifyFromISR>
 8002918:	e03e      	b.n	8002998 <NextionBig_DataRcv+0xc0>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 800291a:	3301      	adds	r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	4610      	mov	r0, r2
 8002920:	1d51      	adds	r1, r2, #5
 8002922:	428b      	cmp	r3, r1
 8002924:	da0a      	bge.n	800293c <NextionBig_DataRcv+0x64>
					if(nextion_big_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 8002926:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 800292a:	492c      	ldr	r1, [pc, #176]	; (80029dc <NextionBig_DataRcv+0x104>)
 800292c:	4401      	add	r1, r0
 800292e:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8002932:	29ff      	cmp	r1, #255	; 0xff
 8002934:	d1f1      	bne.n	800291a <NextionBig_DataRcv+0x42>
						stopbyte ++;
 8002936:	3401      	adds	r4, #1
 8002938:	b2e4      	uxtb	r4, r4
 800293a:	e7ee      	b.n	800291a <NextionBig_DataRcv+0x42>
					}
				}
				if(stopbyte == 3){
 800293c:	2c03      	cmp	r4, #3
 800293e:	d006      	beq.n	800294e <NextionBig_DataRcv+0x76>
							y = 4;
							break;
					}
					nextion_big_comm.UartBufferHead += y;
				}else{
					nextion_big_comm.UartBufferHead ++;
 8002940:	4a26      	ldr	r2, [pc, #152]	; (80029dc <NextionBig_DataRcv+0x104>)
 8002942:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8002946:	3301      	adds	r3, #1
 8002948:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 800294c:	e024      	b.n	8002998 <NextionBig_DataRcv+0xc0>
					switch(nextion_big_comm.UART_Buffer[start]){
 800294e:	4b23      	ldr	r3, [pc, #140]	; (80029dc <NextionBig_DataRcv+0x104>)
 8002950:	4413      	add	r3, r2
 8002952:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002956:	2b1a      	cmp	r3, #26
 8002958:	d011      	beq.n	800297e <NextionBig_DataRcv+0xa6>
 800295a:	2b66      	cmp	r3, #102	; 0x66
 800295c:	d116      	bne.n	800298c <NextionBig_DataRcv+0xb4>
							nextion_big.display = nextion_big_comm.UART_Buffer[start + 1];
 800295e:	3001      	adds	r0, #1
 8002960:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <NextionBig_DataRcv+0x104>)
 8002962:	4418      	add	r0, r3
 8002964:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <NextionBig_DataRcv+0x108>)
 800296a:	701a      	strb	r2, [r3, #0]
							y = 5;
 800296c:	2305      	movs	r3, #5
					nextion_big_comm.UartBufferHead += y;
 800296e:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <NextionBig_DataRcv+0x104>)
 8002970:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 8002974:	440b      	add	r3, r1
 8002976:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 800297a:	2400      	movs	r4, #0
 800297c:	e00c      	b.n	8002998 <NextionBig_DataRcv+0xc0>
							command_correct[current_command] = 1;
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <NextionBig_DataRcv+0x110>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	4a1a      	ldr	r2, [pc, #104]	; (80029ec <NextionBig_DataRcv+0x114>)
 8002984:	2101      	movs	r1, #1
 8002986:	54d1      	strb	r1, [r2, r3]
							y = 4;
 8002988:	2304      	movs	r3, #4
							break;
 800298a:	e7f0      	b.n	800296e <NextionBig_DataRcv+0x96>
							y = 4;
 800298c:	2304      	movs	r3, #4
 800298e:	e7ee      	b.n	800296e <NextionBig_DataRcv+0x96>
				}
			}

		}else{
			//if(nextion_big_comm.UART_Buffer[start] == 0 || nextion_big_comm.UART_Buffer[start] == 255){
				nextion_big_comm.UartBufferHead++;
 8002990:	3201      	adds	r2, #1
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <NextionBig_DataRcv+0x104>)
 8002994:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_big_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 8002998:	4a10      	ldr	r2, [pc, #64]	; (80029dc <NextionBig_DataRcv+0x104>)
 800299a:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 800299e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029a2:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <NextionBig_DataRcv+0x104>)
 80029a8:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 80029ac:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 80029b0:	4291      	cmp	r1, r2
 80029b2:	d011      	beq.n	80029d8 <NextionBig_DataRcv+0x100>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 80029b4:	b2d3      	uxtb	r3, r2
 80029b6:	1ac9      	subs	r1, r1, r3
 80029b8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 80029bc:	2903      	cmp	r1, #3
 80029be:	d9e7      	bls.n	8002990 <NextionBig_DataRcv+0xb8>
			if(len > 9){
 80029c0:	2909      	cmp	r1, #9
 80029c2:	d906      	bls.n	80029d2 <NextionBig_DataRcv+0xfa>
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
 80029c4:	1d10      	adds	r0, r2, #4
 80029c6:	4905      	ldr	r1, [pc, #20]	; (80029dc <NextionBig_DataRcv+0x104>)
 80029c8:	4401      	add	r1, r0
 80029ca:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80029ce:	290a      	cmp	r1, #10
 80029d0:	d086      	beq.n	80028e0 <NextionBig_DataRcv+0x8>
				for(i = start + 1; i < (start + 5); i++){
 80029d2:	3301      	adds	r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	e7a2      	b.n	800291e <NextionBig_DataRcv+0x46>
	}
}
 80029d8:	b003      	add	sp, #12
 80029da:	bd30      	pop	{r4, r5, pc}
 80029dc:	20002b38 	.word	0x20002b38
 80029e0:	20002b08 	.word	0x20002b08
 80029e4:	20003300 	.word	0x20003300
 80029e8:	20002be8 	.word	0x20002be8
 80029ec:	20002b14 	.word	0x20002b14

080029f0 <NextionSmall_DataRcv>:

void NextionSmall_DataRcv (void){
 80029f0:	b530      	push	{r4, r5, lr}
 80029f2:	b083      	sub	sp, #12
	uint8_t stopbyte = 0;
 80029f4:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 80029f6:	e078      	b.n	8002aea <NextionSmall_DataRcv+0xfa>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
		start = nextion_small_comm.UartBufferHead;
		if(len > 3){
			if(len > 9){
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
					memcpy(&number, &nextion_small_comm.UART_Buffer[start], 4);
 80029f8:	f102 0320 	add.w	r3, r2, #32
 80029fc:	4d49      	ldr	r5, [pc, #292]	; (8002b24 <NextionSmall_DataRcv+0x134>)
 80029fe:	442b      	add	r3, r5
 8002a00:	f8d3 0002 	ldr.w	r0, [r3, #2]
					memcpy(&value, &nextion_small_comm.UART_Buffer[start + 5], 4);
 8002a04:	3225      	adds	r2, #37	; 0x25
 8002a06:	442a      	add	r2, r5
 8002a08:	f8d2 1002 	ldr.w	r1, [r2, #2]
					nextion_small.param = number;
 8002a0c:	4b46      	ldr	r3, [pc, #280]	; (8002b28 <NextionSmall_DataRcv+0x138>)
 8002a0e:	6058      	str	r0, [r3, #4]
					memcpy(&nextion_small.value, &value, 4);
 8002a10:	6099      	str	r1, [r3, #8]
					Config_ChangeValue(number, value);
 8002a12:	f7fe fba1 	bl	8001158 <Config_ChangeValue>
					nextion_small_comm.UartBufferHead += 10;
 8002a16:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8002a1a:	330a      	adds	r3, #10
 8002a1c:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
					xTaskNotifyFromISR(DiplaysHandle, 2, eSetValueWithOverwrite, NULL);
 8002a20:	4b42      	ldr	r3, [pc, #264]	; (8002b2c <NextionSmall_DataRcv+0x13c>)
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	2300      	movs	r3, #0
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2203      	movs	r2, #3
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	f007 fb7c 	bl	800a128 <xTaskGenericNotifyFromISR>
 8002a30:	e054      	b.n	8002adc <NextionSmall_DataRcv+0xec>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 8002a32:	3301      	adds	r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	4610      	mov	r0, r2
 8002a38:	1d51      	adds	r1, r2, #5
 8002a3a:	428b      	cmp	r3, r1
 8002a3c:	da0a      	bge.n	8002a54 <NextionSmall_DataRcv+0x64>
					if(nextion_small_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 8002a3e:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 8002a42:	4938      	ldr	r1, [pc, #224]	; (8002b24 <NextionSmall_DataRcv+0x134>)
 8002a44:	4401      	add	r1, r0
 8002a46:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8002a4a:	29ff      	cmp	r1, #255	; 0xff
 8002a4c:	d1f1      	bne.n	8002a32 <NextionSmall_DataRcv+0x42>
						stopbyte ++;
 8002a4e:	3401      	adds	r4, #1
 8002a50:	b2e4      	uxtb	r4, r4
 8002a52:	e7ee      	b.n	8002a32 <NextionSmall_DataRcv+0x42>
					}
				}
				if(stopbyte == 3){
 8002a54:	2c03      	cmp	r4, #3
 8002a56:	d006      	beq.n	8002a66 <NextionSmall_DataRcv+0x76>
							y = 4;
							break;
					}
					nextion_small_comm.UartBufferHead += y;
				}else{
					nextion_small_comm.UartBufferHead ++;
 8002a58:	4a32      	ldr	r2, [pc, #200]	; (8002b24 <NextionSmall_DataRcv+0x134>)
 8002a5a:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 8002a64:	e03a      	b.n	8002adc <NextionSmall_DataRcv+0xec>
					switch(nextion_small_comm.UART_Buffer[start]){
 8002a66:	4b2f      	ldr	r3, [pc, #188]	; (8002b24 <NextionSmall_DataRcv+0x134>)
 8002a68:	4413      	add	r3, r2
 8002a6a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002a6e:	2b86      	cmp	r3, #134	; 0x86
 8002a70:	d024      	beq.n	8002abc <NextionSmall_DataRcv+0xcc>
 8002a72:	d813      	bhi.n	8002a9c <NextionSmall_DataRcv+0xac>
 8002a74:	2b1a      	cmp	r3, #26
 8002a76:	d01a      	beq.n	8002aae <NextionSmall_DataRcv+0xbe>
 8002a78:	2b66      	cmp	r3, #102	; 0x66
 8002a7a:	d129      	bne.n	8002ad0 <NextionSmall_DataRcv+0xe0>
							nextion_small.display = nextion_small_comm.UART_Buffer[start + 1];
 8002a7c:	3001      	adds	r0, #1
 8002a7e:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <NextionSmall_DataRcv+0x134>)
 8002a80:	4418      	add	r0, r3
 8002a82:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8002a86:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <NextionSmall_DataRcv+0x138>)
 8002a88:	701a      	strb	r2, [r3, #0]
							y = 5;
 8002a8a:	2305      	movs	r3, #5
					nextion_small_comm.UartBufferHead += y;
 8002a8c:	4a25      	ldr	r2, [pc, #148]	; (8002b24 <NextionSmall_DataRcv+0x134>)
 8002a8e:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 8002a92:	440b      	add	r3, r1
 8002a94:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 8002a98:	2400      	movs	r4, #0
 8002a9a:	e01f      	b.n	8002adc <NextionSmall_DataRcv+0xec>
					switch(nextion_small_comm.UART_Buffer[start]){
 8002a9c:	2b87      	cmp	r3, #135	; 0x87
 8002a9e:	d012      	beq.n	8002ac6 <NextionSmall_DataRcv+0xd6>
 8002aa0:	2b88      	cmp	r3, #136	; 0x88
 8002aa2:	d115      	bne.n	8002ad0 <NextionSmall_DataRcv+0xe0>
							nextion_small.ready = 1;
 8002aa4:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <NextionSmall_DataRcv+0x138>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	70da      	strb	r2, [r3, #3]
							y = 4;
 8002aaa:	2304      	movs	r3, #4
							break;
 8002aac:	e7ee      	b.n	8002a8c <NextionSmall_DataRcv+0x9c>
							command_correct[current_command] = 1;
 8002aae:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <NextionSmall_DataRcv+0x140>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	4a20      	ldr	r2, [pc, #128]	; (8002b34 <NextionSmall_DataRcv+0x144>)
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	54d1      	strb	r1, [r2, r3]
							y = 4;
 8002ab8:	2304      	movs	r3, #4
							break;
 8002aba:	e7e7      	b.n	8002a8c <NextionSmall_DataRcv+0x9c>
							nextion_small.sleep = 1;
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <NextionSmall_DataRcv+0x138>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	709a      	strb	r2, [r3, #2]
							y = 4;
 8002ac2:	2304      	movs	r3, #4
							break;
 8002ac4:	e7e2      	b.n	8002a8c <NextionSmall_DataRcv+0x9c>
							nextion_small.sleep = 0;
 8002ac6:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <NextionSmall_DataRcv+0x138>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	709a      	strb	r2, [r3, #2]
							y = 4;
 8002acc:	2304      	movs	r3, #4
							break;
 8002ace:	e7dd      	b.n	8002a8c <NextionSmall_DataRcv+0x9c>
							y = 4;
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	e7db      	b.n	8002a8c <NextionSmall_DataRcv+0x9c>
				}
			}

		}else{
			//if(nextion_small_comm.UART_Buffer[start] == 0 || nextion_small_comm.UART_Buffer[start] == 255){
				nextion_small_comm.UartBufferHead++;
 8002ad4:	3201      	adds	r2, #1
 8002ad6:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <NextionSmall_DataRcv+0x134>)
 8002ad8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_small_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 8002adc:	4a11      	ldr	r2, [pc, #68]	; (8002b24 <NextionSmall_DataRcv+0x134>)
 8002ade:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8002ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ae6:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 8002aea:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <NextionSmall_DataRcv+0x134>)
 8002aec:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 8002af0:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 8002af4:	4291      	cmp	r1, r2
 8002af6:	d012      	beq.n	8002b1e <NextionSmall_DataRcv+0x12e>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 8002af8:	b2d3      	uxtb	r3, r2
 8002afa:	1ac9      	subs	r1, r1, r3
 8002afc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 8002b00:	2903      	cmp	r1, #3
 8002b02:	d9e7      	bls.n	8002ad4 <NextionSmall_DataRcv+0xe4>
			if(len > 9){
 8002b04:	2909      	cmp	r1, #9
 8002b06:	d907      	bls.n	8002b18 <NextionSmall_DataRcv+0x128>
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
 8002b08:	1d10      	adds	r0, r2, #4
 8002b0a:	4906      	ldr	r1, [pc, #24]	; (8002b24 <NextionSmall_DataRcv+0x134>)
 8002b0c:	4401      	add	r1, r0
 8002b0e:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8002b12:	290a      	cmp	r1, #10
 8002b14:	f43f af70 	beq.w	80029f8 <NextionSmall_DataRcv+0x8>
				for(i = start + 1; i < (start + 5); i++){
 8002b18:	3301      	adds	r3, #1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	e78b      	b.n	8002a36 <NextionSmall_DataRcv+0x46>
	}
}
 8002b1e:	b003      	add	sp, #12
 8002b20:	bd30      	pop	{r4, r5, pc}
 8002b22:	bf00      	nop
 8002b24:	20002bec 	.word	0x20002bec
 8002b28:	20002c9c 	.word	0x20002c9c
 8002b2c:	20003300 	.word	0x20003300
 8002b30:	20002be8 	.word	0x20002be8
 8002b34:	20002b14 	.word	0x20002b14

08002b38 <DisplayTask>:
{
 8002b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b3c:	ed2d 8b02 	vpush	{d8}
 8002b40:	b089      	sub	sp, #36	; 0x24
	nextion_small.display = 30;
 8002b42:	4a84      	ldr	r2, [pc, #528]	; (8002d54 <DisplayTask+0x21c>)
 8002b44:	231e      	movs	r3, #30
 8002b46:	7013      	strb	r3, [r2, #0]
	nextion_small.last_display = 30;
 8002b48:	7053      	strb	r3, [r2, #1]
	nextion_big.display = 30;
 8002b4a:	4d83      	ldr	r5, [pc, #524]	; (8002d58 <DisplayTask+0x220>)
 8002b4c:	702b      	strb	r3, [r5, #0]
	nextion_big.last_display = 30;
 8002b4e:	706b      	strb	r3, [r5, #1]
	UARTDMA_Init(&nextion_small_comm, NEXTION_SMALL_UART);
 8002b50:	4e82      	ldr	r6, [pc, #520]	; (8002d5c <DisplayTask+0x224>)
 8002b52:	4c83      	ldr	r4, [pc, #524]	; (8002d60 <DisplayTask+0x228>)
 8002b54:	4631      	mov	r1, r6
 8002b56:	4620      	mov	r0, r4
 8002b58:	f000 ff9f 	bl	8003a9a <UARTDMA_Init>
	UARTDMA_Init(&nextion_big_comm, NEXTION_BIG_UART);
 8002b5c:	4f81      	ldr	r7, [pc, #516]	; (8002d64 <DisplayTask+0x22c>)
 8002b5e:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8002d88 <DisplayTask+0x250>
 8002b62:	4639      	mov	r1, r7
 8002b64:	4640      	mov	r0, r8
 8002b66:	f000 ff98 	bl	8003a9a <UARTDMA_Init>
	nextion_big_comm.callback = NextionBig_DataRcv;
 8002b6a:	4b7f      	ldr	r3, [pc, #508]	; (8002d68 <DisplayTask+0x230>)
 8002b6c:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
	nextion_small_comm.callback = NextionSmall_DataRcv;
 8002b70:	4b7e      	ldr	r3, [pc, #504]	; (8002d6c <DisplayTask+0x234>)
 8002b72:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	Config_GetEthernetConfig(&configuration);
 8002b76:	a803      	add	r0, sp, #12
 8002b78:	f7fe fb84 	bl	8001284 <Config_GetEthernetConfig>
	RegulationTask_GetData(&RegulationTaskData);
 8002b7c:	487c      	ldr	r0, [pc, #496]	; (8002d70 <DisplayTask+0x238>)
 8002b7e:	f000 ff25 	bl	80039cc <RegulationTask_GetData>
	vTaskDelay(1000);
 8002b82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b86:	f006 ffbf 	bl	8009b08 <vTaskDelay>
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8002b8a:	4c7a      	ldr	r4, [pc, #488]	; (8002d74 <DisplayTask+0x23c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	497a      	ldr	r1, [pc, #488]	; (8002d78 <DisplayTask+0x240>)
 8002b90:	4620      	mov	r0, r4
 8002b92:	f004 fb89 	bl	80072a8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 8002b96:	2200      	movs	r2, #0
 8002b98:	4978      	ldr	r1, [pc, #480]	; (8002d7c <DisplayTask+0x244>)
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f004 fbaf 	bl	80072fe <HAL_RTC_GetDate>
	nextion_SendData(NEXTION_SMALL_UART, NEX_WAKE, 0, 0, 0);
 8002ba0:	2400      	movs	r4, #0
 8002ba2:	9400      	str	r4, [sp, #0]
 8002ba4:	4623      	mov	r3, r4
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	4621      	mov	r1, r4
 8002baa:	4630      	mov	r0, r6
 8002bac:	f7ff fd94 	bl	80026d8 <nextion_SendData>
	vTaskDelay(1);
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f006 ffa9 	bl	8009b08 <vTaskDelay>
	nextion_SendData(NEXTION_SMALL_UART, NEX_SENDME, 0, 0, 0);
 8002bb6:	9400      	str	r4, [sp, #0]
 8002bb8:	4623      	mov	r3, r4
 8002bba:	4622      	mov	r2, r4
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	4630      	mov	r0, r6
 8002bc0:	f7ff fd8a 	bl	80026d8 <nextion_SendData>
	vTaskDelay(1);
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f006 ff9f 	bl	8009b08 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002bca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f007 fa22 	bl	800a018 <ulTaskNotifyTake>
	nextion_SendData(NEXTION_BIG_UART, NEX_SENDME, 0, 0, 0);
 8002bd4:	9400      	str	r4, [sp, #0]
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	4622      	mov	r2, r4
 8002bda:	2101      	movs	r1, #1
 8002bdc:	4638      	mov	r0, r7
 8002bde:	f7ff fd7b 	bl	80026d8 <nextion_SendData>
	vTaskDelay(1);
 8002be2:	2001      	movs	r0, #1
 8002be4:	f006 ff90 	bl	8009b08 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002be8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002bec:	2001      	movs	r0, #1
 8002bee:	f007 fa13 	bl	800a018 <ulTaskNotifyTake>
	if(nextion_big.display != 30){
 8002bf2:	782b      	ldrb	r3, [r5, #0]
 8002bf4:	2b1e      	cmp	r3, #30
 8002bf6:	d005      	beq.n	8002c04 <DisplayTask+0xcc>
		nextion_UpdateTime(NEXTION_BIG_UART);
 8002bf8:	4638      	mov	r0, r7
 8002bfa:	f7ff fe19 	bl	8002830 <nextion_UpdateTime>
		nextion_SendConfig(NEXTION_BIG_UART);
 8002bfe:	4638      	mov	r0, r7
 8002c00:	f7ff fdc2 	bl	8002788 <nextion_SendConfig>
	if(nextion_small.display != 30){
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <DisplayTask+0x21c>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b1e      	cmp	r3, #30
 8002c0a:	d002      	beq.n	8002c12 <DisplayTask+0xda>
		nextion_SendConfig(NEXTION_SMALL_UART);
 8002c0c:	4853      	ldr	r0, [pc, #332]	; (8002d5c <DisplayTask+0x224>)
 8002c0e:	f7ff fdbb 	bl	8002788 <nextion_SendConfig>
{
 8002c12:	f04f 0900 	mov.w	r9, #0
 8002c16:	46ca      	mov	sl, r9
 8002c18:	e02a      	b.n	8002c70 <DisplayTask+0x138>
				nextion_UpdateTime(NEXTION_BIG_UART);
 8002c1a:	4852      	ldr	r0, [pc, #328]	; (8002d64 <DisplayTask+0x22c>)
 8002c1c:	f7ff fe08 	bl	8002830 <nextion_UpdateTime>
				if(nextion_small.display != 30){
 8002c20:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <DisplayTask+0x21c>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b1e      	cmp	r3, #30
 8002c26:	d031      	beq.n	8002c8c <DisplayTask+0x154>
					nextion_SendData(NEXTION_SMALL_UART, NEX_SETTINGS_LOCK, 0, 0, 0);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	9200      	str	r2, [sp, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	2121      	movs	r1, #33	; 0x21
 8002c30:	484a      	ldr	r0, [pc, #296]	; (8002d5c <DisplayTask+0x224>)
 8002c32:	f7ff fd51 	bl	80026d8 <nextion_SendData>
 8002c36:	e029      	b.n	8002c8c <DisplayTask+0x154>
					nextion_SendData(NEXTION_SMALL_UART, NEX_SETTINGS_UNLOCK, 0, 0, 0);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	9200      	str	r2, [sp, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	2120      	movs	r1, #32
 8002c40:	4846      	ldr	r0, [pc, #280]	; (8002d5c <DisplayTask+0x224>)
 8002c42:	f7ff fd49 	bl	80026d8 <nextion_SendData>
 8002c46:	e021      	b.n	8002c8c <DisplayTask+0x154>
				if(nextion_big.display != 30){
 8002c48:	4b43      	ldr	r3, [pc, #268]	; (8002d58 <DisplayTask+0x220>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b1e      	cmp	r3, #30
 8002c4e:	d133      	bne.n	8002cb8 <DisplayTask+0x180>
		if(nextion_big.display == 1){
 8002c50:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <DisplayTask+0x220>)
 8002c52:	781d      	ldrb	r5, [r3, #0]
 8002c54:	2d01      	cmp	r5, #1
 8002c56:	d037      	beq.n	8002cc8 <DisplayTask+0x190>
		vTaskDelay(1000);
 8002c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c5c:	f006 ff54 	bl	8009b08 <vTaskDelay>
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002c60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c64:	2001      	movs	r0, #1
 8002c66:	f007 f9d7 	bl	800a018 <ulTaskNotifyTake>
		if(ulNotificationValue > 0){
 8002c6a:	2800      	cmp	r0, #0
 8002c6c:	f040 812c 	bne.w	8002ec8 <DisplayTask+0x390>
		RegulationTask_GetData(&RegulationTaskData);
 8002c70:	483f      	ldr	r0, [pc, #252]	; (8002d70 <DisplayTask+0x238>)
 8002c72:	f000 feab 	bl	80039cc <RegulationTask_GetData>
		if(nextion_big.display != nextion_big.last_display){
 8002c76:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <DisplayTask+0x220>)
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	785b      	ldrb	r3, [r3, #1]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d008      	beq.n	8002c92 <DisplayTask+0x15a>
			if(nextion_big.display == 2){
 8002c80:	2a02      	cmp	r2, #2
 8002c82:	d0ca      	beq.n	8002c1a <DisplayTask+0xe2>
				if(nextion_small.display != 30){
 8002c84:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <DisplayTask+0x21c>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b1e      	cmp	r3, #30
 8002c8a:	d1d5      	bne.n	8002c38 <DisplayTask+0x100>
			nextion_big.last_display = nextion_big.display;
 8002c8c:	4b32      	ldr	r3, [pc, #200]	; (8002d58 <DisplayTask+0x220>)
 8002c8e:	781a      	ldrb	r2, [r3, #0]
 8002c90:	705a      	strb	r2, [r3, #1]
		if(nextion_small.display != nextion_small.last_display){
 8002c92:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <DisplayTask+0x21c>)
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	785b      	ldrb	r3, [r3, #1]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d0d9      	beq.n	8002c50 <DisplayTask+0x118>
			if(nextion_small.display == 1){
 8002c9c:	2a01      	cmp	r2, #1
 8002c9e:	d0d3      	beq.n	8002c48 <DisplayTask+0x110>
				if(nextion_big.display != 30){
 8002ca0:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <DisplayTask+0x220>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b1e      	cmp	r3, #30
 8002ca6:	d0d3      	beq.n	8002c50 <DisplayTask+0x118>
					nextion_SendData(NEXTION_BIG_UART, NEX_SETTINGS_UNLOCK, 0, 0, 0);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	9200      	str	r2, [sp, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	2120      	movs	r1, #32
 8002cb0:	482c      	ldr	r0, [pc, #176]	; (8002d64 <DisplayTask+0x22c>)
 8002cb2:	f7ff fd11 	bl	80026d8 <nextion_SendData>
 8002cb6:	e7cb      	b.n	8002c50 <DisplayTask+0x118>
					nextion_SendData(NEXTION_BIG_UART, NEX_SETTINGS_LOCK, 0, 0, 0);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	9200      	str	r2, [sp, #0]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	2121      	movs	r1, #33	; 0x21
 8002cc0:	4828      	ldr	r0, [pc, #160]	; (8002d64 <DisplayTask+0x22c>)
 8002cc2:	f7ff fd09 	bl	80026d8 <nextion_SendData>
 8002cc6:	e7c3      	b.n	8002c50 <DisplayTask+0x118>
			nextion_SendData(NEXTION_BIG_UART, NEX_COUNTER_PRESENCE, RegulationTaskData.counter.counter_present, 0, 0);
 8002cc8:	4e29      	ldr	r6, [pc, #164]	; (8002d70 <DisplayTask+0x238>)
 8002cca:	7832      	ldrb	r2, [r6, #0]
 8002ccc:	4f25      	ldr	r7, [pc, #148]	; (8002d64 <DisplayTask+0x22c>)
 8002cce:	2400      	movs	r4, #0
 8002cd0:	9400      	str	r4, [sp, #0]
 8002cd2:	4623      	mov	r3, r4
 8002cd4:	2113      	movs	r1, #19
 8002cd6:	4638      	mov	r0, r7
 8002cd8:	f7ff fcfe 	bl	80026d8 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_TSENS_PRESENCE, RegulationTaskData.counter.temperatures_present, 0, 0);
 8002cdc:	78b2      	ldrb	r2, [r6, #2]
 8002cde:	9400      	str	r4, [sp, #0]
 8002ce0:	4623      	mov	r3, r4
 8002ce2:	2114      	movs	r1, #20
 8002ce4:	4638      	mov	r0, r7
 8002ce6:	f7ff fcf7 	bl	80026d8 <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_MAIN_SW, RegulationTaskData.ControlWord.MainSwitch_State, 0, 0);
 8002cea:	f896 2068 	ldrb.w	r2, [r6, #104]	; 0x68
 8002cee:	9400      	str	r4, [sp, #0]
 8002cf0:	4623      	mov	r3, r4
 8002cf2:	f002 0201 	and.w	r2, r2, #1
 8002cf6:	2115      	movs	r1, #21
 8002cf8:	4638      	mov	r0, r7
 8002cfa:	f7ff fced 	bl	80026d8 <nextion_SendData>
			if(RegulationTaskData.ControlWord.CWUHeaterError || RegulationTaskData.IOsignals.signals.input4){
 8002cfe:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8002d00:	4a1f      	ldr	r2, [pc, #124]	; (8002d80 <DisplayTask+0x248>)
 8002d02:	421a      	tst	r2, r3
 8002d04:	d106      	bne.n	8002d14 <DisplayTask+0x1dc>
			}else if(RegulationTaskData.ControlWord.CWUHeaterStateOut){
 8002d06:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
 8002d0a:	f013 0f01 	tst.w	r3, #1
 8002d0e:	d015      	beq.n	8002d3c <DisplayTask+0x204>
				pic = 2;
 8002d10:	2202      	movs	r2, #2
 8002d12:	e000      	b.n	8002d16 <DisplayTask+0x1de>
				pic = 3;
 8002d14:	2203      	movs	r2, #3
			nextion_SendData(NEXTION_BIG_UART, NEX_CWU_PIC, pic, 0, 0);
 8002d16:	2300      	movs	r3, #0
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2116      	movs	r1, #22
 8002d1c:	4811      	ldr	r0, [pc, #68]	; (8002d64 <DisplayTask+0x22c>)
 8002d1e:	f7ff fcdb 	bl	80026d8 <nextion_SendData>
			if(RegulationTaskData.ControlWord.COHeaterError || RegulationTaskData.IOsignals.signals.input5){
 8002d22:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <DisplayTask+0x238>)
 8002d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d26:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <DisplayTask+0x24c>)
 8002d28:	421a      	tst	r2, r3
 8002d2a:	d109      	bne.n	8002d40 <DisplayTask+0x208>
			}else if(RegulationTaskData.ControlWord.COHeaterStateOut){
 8002d2c:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <DisplayTask+0x238>)
 8002d2e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002d32:	f013 0f01 	tst.w	r3, #1
 8002d36:	d004      	beq.n	8002d42 <DisplayTask+0x20a>
				pic = 2;
 8002d38:	2502      	movs	r5, #2
 8002d3a:	e002      	b.n	8002d42 <DisplayTask+0x20a>
				pic = 1;
 8002d3c:	462a      	mov	r2, r5
 8002d3e:	e7ea      	b.n	8002d16 <DisplayTask+0x1de>
				pic = 3;
 8002d40:	2503      	movs	r5, #3
			nextion_SendData(NEXTION_BIG_UART, NEX_CO_PIC, pic, 0, 0);
 8002d42:	2400      	movs	r4, #0
 8002d44:	9400      	str	r4, [sp, #0]
 8002d46:	4623      	mov	r3, r4
 8002d48:	462a      	mov	r2, r5
 8002d4a:	2117      	movs	r1, #23
 8002d4c:	4805      	ldr	r0, [pc, #20]	; (8002d64 <DisplayTask+0x22c>)
 8002d4e:	f7ff fcc3 	bl	80026d8 <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 8002d52:	e0b5      	b.n	8002ec0 <DisplayTask+0x388>
 8002d54:	20002c9c 	.word	0x20002c9c
 8002d58:	20002b08 	.word	0x20002b08
 8002d5c:	20003104 	.word	0x20003104
 8002d60:	20002bec 	.word	0x20002bec
 8002d64:	200031e8 	.word	0x200031e8
 8002d68:	080028d9 	.word	0x080028d9
 8002d6c:	080029f1 	.word	0x080029f1
 8002d70:	20002cbc 	.word	0x20002cbc
 8002d74:	20003188 	.word	0x20003188
 8002d78:	20002ca8 	.word	0x20002ca8
 8002d7c:	20002d4c 	.word	0x20002d4c
 8002d80:	10000001 	.word	0x10000001
 8002d84:	08000001 	.word	0x08000001
 8002d88:	20002b38 	.word	0x20002b38
				rest = (uint32_t)(RegulationTaskData.counter.voltages[i] * 10.0) % 10;
 8002d8c:	4d59      	ldr	r5, [pc, #356]	; (8002ef4 <DisplayTask+0x3bc>)
 8002d8e:	f104 030a 	add.w	r3, r4, #10
 8002d92:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002d96:	ed93 8a00 	vldr	s16, [r3]
 8002d9a:	ee18 0a10 	vmov	r0, s16
 8002d9e:	f7fd fbdb 	bl	8000558 <__aeabi_f2d>
 8002da2:	2200      	movs	r2, #0
 8002da4:	4b54      	ldr	r3, [pc, #336]	; (8002ef8 <DisplayTask+0x3c0>)
 8002da6:	f7fd fc2f 	bl	8000608 <__aeabi_dmul>
 8002daa:	f7fd fe3f 	bl	8000a2c <__aeabi_d2uiz>
 8002dae:	f8df b160 	ldr.w	fp, [pc, #352]	; 8002f10 <DisplayTask+0x3d8>
 8002db2:	fbab 2300 	umull	r2, r3, fp, r0
 8002db6:	08db      	lsrs	r3, r3, #3
 8002db8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002dbc:	005a      	lsls	r2, r3, #1
 8002dbe:	1a83      	subs	r3, r0, r2
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_VOLTAGE, i + 1, (uint32_t)RegulationTaskData.counter.voltages[i], rest);
 8002dc0:	1c66      	adds	r6, r4, #1
 8002dc2:	4f4e      	ldr	r7, [pc, #312]	; (8002efc <DisplayTask+0x3c4>)
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002dca:	ee17 3a90 	vmov	r3, s15
 8002dce:	4632      	mov	r2, r6
 8002dd0:	2118      	movs	r1, #24
 8002dd2:	4638      	mov	r0, r7
 8002dd4:	f7ff fc80 	bl	80026d8 <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.currents[i] * 100.0) % 100;
 8002dd8:	f104 030c 	add.w	r3, r4, #12
 8002ddc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002de0:	ed93 8a01 	vldr	s16, [r3, #4]
 8002de4:	ee18 0a10 	vmov	r0, s16
 8002de8:	f7fd fbb6 	bl	8000558 <__aeabi_f2d>
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b44      	ldr	r3, [pc, #272]	; (8002f00 <DisplayTask+0x3c8>)
 8002df0:	f7fd fc0a 	bl	8000608 <__aeabi_dmul>
 8002df4:	f7fd fe1a 	bl	8000a2c <__aeabi_d2uiz>
 8002df8:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <DisplayTask+0x3cc>)
 8002dfa:	fba3 2300 	umull	r2, r3, r3, r0
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	2264      	movs	r2, #100	; 0x64
 8002e02:	fb02 0313 	mls	r3, r2, r3, r0
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_CURRENT, i + 1, (uint32_t)RegulationTaskData.counter.currents[i], rest);
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002e0c:	ee17 3a90 	vmov	r3, s15
 8002e10:	4632      	mov	r2, r6
 8002e12:	2119      	movs	r1, #25
 8002e14:	4638      	mov	r0, r7
 8002e16:	f7ff fc5f 	bl	80026d8 <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.powers[i] * 10.0) % 10;
 8002e1a:	f104 0810 	add.w	r8, r4, #16
 8002e1e:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 8002e22:	ed98 8a00 	vldr	s16, [r8]
 8002e26:	ee18 0a10 	vmov	r0, s16
 8002e2a:	f7fd fb95 	bl	8000558 <__aeabi_f2d>
 8002e2e:	2200      	movs	r2, #0
 8002e30:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <DisplayTask+0x3c0>)
 8002e32:	f7fd fbe9 	bl	8000608 <__aeabi_dmul>
 8002e36:	f7fd fdf9 	bl	8000a2c <__aeabi_d2uiz>
 8002e3a:	fbab 3200 	umull	r3, r2, fp, r0
 8002e3e:	08d2      	lsrs	r2, r2, #3
 8002e40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e44:	0053      	lsls	r3, r2, #1
 8002e46:	1ac2      	subs	r2, r0, r3
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_POWER, i + 1, (uint32_t)RegulationTaskData.counter.powers[i], rest);
 8002e48:	9200      	str	r2, [sp, #0]
 8002e4a:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 8002e4e:	ee17 3a90 	vmov	r3, s15
 8002e52:	4632      	mov	r2, r6
 8002e54:	211a      	movs	r1, #26
 8002e56:	4638      	mov	r0, r7
 8002e58:	f7ff fc3e 	bl	80026d8 <nextion_SendData>
				rest = (uint32_t)(RegulationTaskData.counter.powers[i] / RegulationTaskData.parameters.net_max_power * 100.0);
 8002e5c:	edd8 7a00 	vldr	s15, [r8]
 8002e60:	f8d5 0075 	ldr.w	r0, [r5, #117]	; 0x75
 8002e64:	ee07 0a10 	vmov	s14, r0
 8002e68:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002e6c:	ee17 0a90 	vmov	r0, s15
 8002e70:	f7fd fb72 	bl	8000558 <__aeabi_f2d>
 8002e74:	2200      	movs	r2, #0
 8002e76:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <DisplayTask+0x3c8>)
 8002e78:	f7fd fbc6 	bl	8000608 <__aeabi_dmul>
 8002e7c:	f7fd fdd6 	bl	8000a2c <__aeabi_d2uiz>
				nextion_SendData(NEXTION_BIG_UART, NEX_PHASE_PRG_BAR, i + 1, rest, 0);
 8002e80:	f04f 0800 	mov.w	r8, #0
 8002e84:	f8cd 8000 	str.w	r8, [sp]
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4632      	mov	r2, r6
 8002e8c:	211b      	movs	r1, #27
 8002e8e:	4638      	mov	r0, r7
 8002e90:	f7ff fc22 	bl	80026d8 <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_CO_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CO_heater_PWM[i], 0);
 8002e94:	1d23      	adds	r3, r4, #4
 8002e96:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002e9a:	885b      	ldrh	r3, [r3, #2]
 8002e9c:	f8cd 8000 	str.w	r8, [sp]
 8002ea0:	4632      	mov	r2, r6
 8002ea2:	211c      	movs	r1, #28
 8002ea4:	4638      	mov	r0, r7
 8002ea6:	f7ff fc17 	bl	80026d8 <nextion_SendData>
				nextion_SendData(NEXTION_BIG_UART, NEX_CWU_HEATER_PHASE_DUTY, i + 1, RegulationTaskData.counter.CWU_heater_PWM[i], 0);
 8002eaa:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8002eae:	88a3      	ldrh	r3, [r4, #4]
 8002eb0:	f8cd 8000 	str.w	r8, [sp]
 8002eb4:	4632      	mov	r2, r6
 8002eb6:	211d      	movs	r1, #29
 8002eb8:	4638      	mov	r0, r7
 8002eba:	f7ff fc0d 	bl	80026d8 <nextion_SendData>
			for(uint8_t i = 0; i < 3; i ++){
 8002ebe:	b2f4      	uxtb	r4, r6
 8002ec0:	2c02      	cmp	r4, #2
 8002ec2:	f67f af63 	bls.w	8002d8c <DisplayTask+0x254>
 8002ec6:	e6c7      	b.n	8002c58 <DisplayTask+0x120>
			if(ulNotificationValue == 1){
 8002ec8:	2801      	cmp	r0, #1
 8002eca:	d006      	beq.n	8002eda <DisplayTask+0x3a2>
			}else if(ulNotificationValue == 2){
 8002ecc:	2802      	cmp	r0, #2
 8002ece:	d00a      	beq.n	8002ee6 <DisplayTask+0x3ae>
			Config_ChangeValue(param, (void*)valPtr);
 8002ed0:	4649      	mov	r1, r9
 8002ed2:	4650      	mov	r0, sl
 8002ed4:	f7fe f940 	bl	8001158 <Config_ChangeValue>
 8002ed8:	e6ca      	b.n	8002c70 <DisplayTask+0x138>
				param = nextion_big.param;
 8002eda:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <DisplayTask+0x3d0>)
 8002edc:	f8d3 a004 	ldr.w	sl, [r3, #4]
				valPtr = &nextion_big.value[0];
 8002ee0:	f103 0908 	add.w	r9, r3, #8
 8002ee4:	e7f4      	b.n	8002ed0 <DisplayTask+0x398>
				param = nextion_small.param;
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <DisplayTask+0x3d4>)
 8002ee8:	f8d3 a004 	ldr.w	sl, [r3, #4]
				valPtr = &nextion_small.value[0];
 8002eec:	f103 0908 	add.w	r9, r3, #8
 8002ef0:	e7ee      	b.n	8002ed0 <DisplayTask+0x398>
 8002ef2:	bf00      	nop
 8002ef4:	20002cbc 	.word	0x20002cbc
 8002ef8:	40240000 	.word	0x40240000
 8002efc:	200031e8 	.word	0x200031e8
 8002f00:	40590000 	.word	0x40590000
 8002f04:	51eb851f 	.word	0x51eb851f
 8002f08:	20002b08 	.word	0x20002b08
 8002f0c:	20002c9c 	.word	0x20002c9c
 8002f10:	cccccccd 	.word	0xcccccccd

08002f14 <W5500_WriteBuff>:

static void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
}

static void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8002f14:	b508      	push	{r3, lr}
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8002f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f1a:	460a      	mov	r2, r1
 8002f1c:	4601      	mov	r1, r0
 8002f1e:	4802      	ldr	r0, [pc, #8]	; (8002f28 <W5500_WriteBuff+0x14>)
 8002f20:	f004 fb1c 	bl	800755c <HAL_SPI_Transmit>
}
 8002f24:	bd08      	pop	{r3, pc}
 8002f26:	bf00      	nop
 8002f28:	20003228 	.word	0x20003228

08002f2c <W5500_WriteByte>:
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
    return byte;
}

static void W5500_WriteByte(uint8_t byte) {
 8002f2c:	b500      	push	{lr}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	ab02      	add	r3, sp, #8
 8002f32:	f803 0d01 	strb.w	r0, [r3, #-1]!
    W5500_WriteBuff(&byte, sizeof(byte));
 8002f36:	2101      	movs	r1, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ffeb 	bl	8002f14 <W5500_WriteBuff>
}
 8002f3e:	b003      	add	sp, #12
 8002f40:	f85d fb04 	ldr.w	pc, [sp], #4

08002f44 <W5500_ReadBuff>:
static void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8002f44:	b508      	push	{r3, lr}
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f4a:	460a      	mov	r2, r1
 8002f4c:	4601      	mov	r1, r0
 8002f4e:	4802      	ldr	r0, [pc, #8]	; (8002f58 <W5500_ReadBuff+0x14>)
 8002f50:	f004 fce8 	bl	8007924 <HAL_SPI_Receive>
}
 8002f54:	bd08      	pop	{r3, pc}
 8002f56:	bf00      	nop
 8002f58:	20003228 	.word	0x20003228

08002f5c <W5500_ReadByte>:
static uint8_t W5500_ReadByte(void) {
 8002f5c:	b500      	push	{lr}
 8002f5e:	b083      	sub	sp, #12
    W5500_ReadBuff(&byte, sizeof(byte));
 8002f60:	2101      	movs	r1, #1
 8002f62:	f10d 0007 	add.w	r0, sp, #7
 8002f66:	f7ff ffed 	bl	8002f44 <W5500_ReadBuff>
}
 8002f6a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002f6e:	b003      	add	sp, #12
 8002f70:	f85d fb04 	ldr.w	pc, [sp], #4

08002f74 <cs_desel>:
static void cs_desel() {
 8002f74:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET); //CS HIGH
 8002f76:	2201      	movs	r2, #1
 8002f78:	2110      	movs	r1, #16
 8002f7a:	4805      	ldr	r0, [pc, #20]	; (8002f90 <cs_desel+0x1c>)
 8002f7c:	f002 fec7 	bl	8005d0e <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8002f80:	2300      	movs	r3, #0
 8002f82:	461a      	mov	r2, r3
 8002f84:	4619      	mov	r1, r3
 8002f86:	4803      	ldr	r0, [pc, #12]	; (8002f94 <cs_desel+0x20>)
 8002f88:	6800      	ldr	r0, [r0, #0]
 8002f8a:	f005 ff07 	bl	8008d9c <xQueueGenericSend>
}
 8002f8e:	bd08      	pop	{r3, pc}
 8002f90:	40020000 	.word	0x40020000
 8002f94:	20003304 	.word	0x20003304

08002f98 <cs_sel>:
static void cs_sel() {
 8002f98:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 8002f9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <cs_sel+0x1c>)
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	f006 f8f1 	bl	8009188 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET); //CS LOW
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2110      	movs	r1, #16
 8002faa:	4803      	ldr	r0, [pc, #12]	; (8002fb8 <cs_sel+0x20>)
 8002fac:	f002 feaf 	bl	8005d0e <HAL_GPIO_WritePin>
}
 8002fb0:	bd08      	pop	{r3, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20003304 	.word	0x20003304
 8002fb8:	40020000 	.word	0x40020000

08002fbc <EthernetTask>:

uint16_t freesize;
uint8_t rcvBuf[128], txBuf[128], bufSize[] = {2, 2, 2, 2, 2};

void EthernetTask(void const * argument)
{
 8002fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc0:	b08c      	sub	sp, #48	; 0x30
	uint8_t first_frame = 1;
	uint8_t remoteIP[4][4];
	uint16_t remotePort[4];
	int32_t rcvSize = 0;

	CLI_Init();
 8002fc2:	f7fe f893 	bl	80010ec <CLI_Init>

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8002fc6:	49a9      	ldr	r1, [pc, #676]	; (800326c <EthernetTask+0x2b0>)
 8002fc8:	48a9      	ldr	r0, [pc, #676]	; (8003270 <EthernetTask+0x2b4>)
 8002fca:	f7fe ff8f 	bl	8001eec <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8002fce:	49a9      	ldr	r1, [pc, #676]	; (8003274 <EthernetTask+0x2b8>)
 8002fd0:	48a9      	ldr	r0, [pc, #676]	; (8003278 <EthernetTask+0x2bc>)
 8002fd2:	f7fe ff9d 	bl	8001f10 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8002fd6:	49a9      	ldr	r1, [pc, #676]	; (800327c <EthernetTask+0x2c0>)
 8002fd8:	48a9      	ldr	r0, [pc, #676]	; (8003280 <EthernetTask+0x2c4>)
 8002fda:	f7fe ffb1 	bl	8001f40 <reg_wizchip_spiburst_cbfunc>
	wizchip_init(bufSize, bufSize);
 8002fde:	48a9      	ldr	r0, [pc, #676]	; (8003284 <EthernetTask+0x2c8>)
 8002fe0:	4601      	mov	r1, r0
 8002fe2:	f7ff f801 	bl	8001fe8 <wizchip_init>
	wiz_NetInfo netInfo = {	.mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	9302      	str	r3, [sp, #8]
 8002fec:	9303      	str	r3, [sp, #12]
 8002fee:	9304      	str	r3, [sp, #16]
 8002ff0:	f8cd 3013 	str.w	r3, [sp, #19]
 8002ff4:	2308      	movs	r3, #8
 8002ff6:	f88d 3001 	strb.w	r3, [sp, #1]
 8002ffa:	23dc      	movs	r3, #220	; 0xdc
 8002ffc:	f88d 3002 	strb.w	r3, [sp, #2]
 8003000:	23ab      	movs	r3, #171	; 0xab
 8003002:	f88d 3003 	strb.w	r3, [sp, #3]
 8003006:	23cd      	movs	r3, #205	; 0xcd
 8003008:	f88d 3004 	strb.w	r3, [sp, #4]
 800300c:	23ef      	movs	r3, #239	; 0xef
 800300e:	f88d 3005 	strb.w	r3, [sp, #5]
 8003012:	23c0      	movs	r3, #192	; 0xc0
 8003014:	f88d 3006 	strb.w	r3, [sp, #6]
 8003018:	21a8      	movs	r1, #168	; 0xa8
 800301a:	f88d 1007 	strb.w	r1, [sp, #7]
 800301e:	f88d 3009 	strb.w	r3, [sp, #9]
 8003022:	22ff      	movs	r2, #255	; 0xff
 8003024:	f88d 200a 	strb.w	r2, [sp, #10]
 8003028:	f88d 200b 	strb.w	r2, [sp, #11]
 800302c:	f88d 200c 	strb.w	r2, [sp, #12]
 8003030:	f88d 300e 	strb.w	r3, [sp, #14]
 8003034:	f88d 100f 	strb.w	r1, [sp, #15]
 8003038:	2401      	movs	r4, #1
 800303a:	f88d 4011 	strb.w	r4, [sp, #17]
		                  	 .ip 	= {192, 168, 0, 192},					// IP address
		                     .sn 	= {255, 255, 255, 0},					// Subnet mask
		                     .gw 	= {192, 168, 0, 1}};					// Gateway address
	wizchip_setnetinfo(&netInfo);
 800303e:	4668      	mov	r0, sp
 8003040:	f7ff f836 	bl	80020b0 <wizchip_setnetinfo>
	wizchip_setinterruptmask(IK_SOCK_3);
 8003044:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003048:	f7ff f824 	bl	8002094 <wizchip_setinterruptmask>
	wizchip_getnetinfo(&netInfo);
 800304c:	4668      	mov	r0, sp
 800304e:	f7ff f85d 	bl	800210c <wizchip_getnetinfo>
	//if(socket(2, Sn_MR_TCP, 1883, 0) == 0){

	//}

	// Telnet Port (CLI, debug)
	if(socket(3, Sn_MR_TCP, 23, SF_TCP_NODELAY) == 3){
 8003052:	2320      	movs	r3, #32
 8003054:	2217      	movs	r2, #23
 8003056:	4621      	mov	r1, r4
 8003058:	2003      	movs	r0, #3
 800305a:	f7fe fc45 	bl	80018e8 <socket>
 800305e:	2803      	cmp	r0, #3
 8003060:	d108      	bne.n	8003074 <EthernetTask+0xb8>
		if(listen(3) == SOCK_OK) {
 8003062:	f7fe fced 	bl	8001a40 <listen>
 8003066:	42a0      	cmp	r0, r4
 8003068:	d104      	bne.n	8003074 <EthernetTask+0xb8>
			setSn_IMR(3, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 800306a:	211f      	movs	r1, #31
 800306c:	f642 4068 	movw	r0, #11368	; 0x2c68
 8003070:	f7fe fa90 	bl	8001594 <WIZCHIP_WRITE>
{
 8003074:	2701      	movs	r7, #1
	}

  /* Infinite loop */
	for(;;)
	{
		if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 8003076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800307a:	2200      	movs	r2, #0
 800307c:	4619      	mov	r1, r3
 800307e:	4618      	mov	r0, r3
 8003080:	f007 f806 	bl	800a090 <xTaskNotifyWait>
 8003084:	2801      	cmp	r0, #1
 8003086:	d1f6      	bne.n	8003076 <EthernetTask+0xba>
 8003088:	e0c3      	b.n	8003212 <EthernetTask+0x256>
				if(interruptSource & IK_IP_CONFLICT){

				}

				if(interruptSource & IK_SOCK_0){
					interrupt = getSn_IR(0);
 800308a:	f44f 7002 	mov.w	r0, #520	; 0x208
 800308e:	f7fe fa4f 	bl	8001530 <WIZCHIP_READ>
					if(interrupt & Sn_IR_CON){
 8003092:	f010 0f01 	tst.w	r0, #1
 8003096:	f000 80ca 	beq.w	800322e <EthernetTask+0x272>
						getsockopt(0, SO_DESTIP, &remoteIP[0]);
 800309a:	aa08      	add	r2, sp, #32
 800309c:	2104      	movs	r1, #4
 800309e:	2000      	movs	r0, #0
 80030a0:	f7fe fe60 	bl	8001d64 <getsockopt>
						getsockopt(0, SO_DESTPORT, (uint8_t*)&remotePort[0]);
 80030a4:	aa06      	add	r2, sp, #24
 80030a6:	2105      	movs	r1, #5
 80030a8:	2000      	movs	r0, #0
 80030aa:	f7fe fe5b 	bl	8001d64 <getsockopt>
 80030ae:	e0be      	b.n	800322e <EthernetTask+0x272>
					}
				}

				if(interruptSource & IK_SOCK_1){
					interrupt = getSn_IR(1);
 80030b0:	f44f 700a 	mov.w	r0, #552	; 0x228
 80030b4:	f7fe fa3c 	bl	8001530 <WIZCHIP_READ>
					if(interrupt & Sn_IR_CON){
 80030b8:	f010 0f01 	tst.w	r0, #1
 80030bc:	f000 80bb 	beq.w	8003236 <EthernetTask+0x27a>
						getsockopt(1, SO_DESTIP, &remoteIP[1]);
 80030c0:	aa09      	add	r2, sp, #36	; 0x24
 80030c2:	2104      	movs	r1, #4
 80030c4:	2001      	movs	r0, #1
 80030c6:	f7fe fe4d 	bl	8001d64 <getsockopt>
						getsockopt(1, SO_DESTPORT, (uint8_t*)&remotePort[1]);
 80030ca:	f10d 021a 	add.w	r2, sp, #26
 80030ce:	2105      	movs	r1, #5
 80030d0:	2001      	movs	r0, #1
 80030d2:	f7fe fe47 	bl	8001d64 <getsockopt>
 80030d6:	e0ae      	b.n	8003236 <EthernetTask+0x27a>

					}
				}

				if(interruptSource & IK_SOCK_2){
					interrupt = getSn_IR(2);
 80030d8:	f44f 7012 	mov.w	r0, #584	; 0x248
 80030dc:	f7fe fa28 	bl	8001530 <WIZCHIP_READ>
 80030e0:	e0ad      	b.n	800323e <EthernetTask+0x282>
				}

				if(interruptSource & IK_SOCK_3){
					freesize = getSn_TxMAX(3);
 80030e2:	f641 7068 	movw	r0, #8040	; 0x1f68
 80030e6:	f7fe fa23 	bl	8001530 <WIZCHIP_READ>
 80030ea:	b280      	uxth	r0, r0
 80030ec:	0280      	lsls	r0, r0, #10
 80030ee:	4b66      	ldr	r3, [pc, #408]	; (8003288 <EthernetTask+0x2cc>)
 80030f0:	8018      	strh	r0, [r3, #0]
					interrupt = getSn_IR(3);
 80030f2:	f44f 701a 	mov.w	r0, #616	; 0x268
 80030f6:	f7fe fa1b 	bl	8001530 <WIZCHIP_READ>
 80030fa:	4605      	mov	r5, r0
					setSn_IR(3, interrupt);
 80030fc:	f000 011f 	and.w	r1, r0, #31
 8003100:	f44f 701a 	mov.w	r0, #616	; 0x268
 8003104:	f7fe fa46 	bl	8001594 <WIZCHIP_WRITE>
					if(interrupt & Sn_IR_CON){
 8003108:	f015 0f01 	tst.w	r5, #1
 800310c:	d128      	bne.n	8003160 <EthernetTask+0x1a4>
						RuntimeStats_TelnetTxInc();
						freesize = send(3, (uint8_t*)gretMsg, 47);
						first_frame = 1;
					}

					if(interrupt & Sn_IR_RECV){
 800310e:	f015 0f04 	tst.w	r5, #4
 8003112:	d007      	beq.n	8003124 <EthernetTask+0x168>
						if(first_frame == 0){
 8003114:	2f00      	cmp	r7, #0
 8003116:	d03c      	beq.n	8003192 <EthernetTask+0x1d6>
								freesize = send(3, txBuf, strlen((char*)txBuf));
								vTaskDelay(1);
							}while(xMoreDataToFollow != pdFALSE);
							rcvSize = 0;
						}else{
							recv(3, rcvBuf, 128);
 8003118:	2280      	movs	r2, #128	; 0x80
 800311a:	495c      	ldr	r1, [pc, #368]	; (800328c <EthernetTask+0x2d0>)
 800311c:	2003      	movs	r0, #3
 800311e:	f7fe fdaf 	bl	8001c80 <recv>
							first_frame = 0;
 8003122:	2700      	movs	r7, #0
						}
					}

					if(interrupt & Sn_IR_SENDOK){
 8003124:	f015 0f10 	tst.w	r5, #16
 8003128:	d162      	bne.n	80031f0 <EthernetTask+0x234>
						ClrSiS(3);
					}

					if(interrupt & Sn_IR_DISCON || interrupt & Sn_IR_TIMEOUT){
 800312a:	f015 0f0a 	tst.w	r5, #10
 800312e:	f000 808a 	beq.w	8003246 <EthernetTask+0x28a>
						RuntimeStats_TelnetLastIPSet();
 8003132:	f7ff fa83 	bl	800263c <RuntimeStats_TelnetLastIPSet>
						disconnect(3);
 8003136:	2003      	movs	r0, #3
 8003138:	f7fe fcb8 	bl	8001aac <disconnect>
						if(socket(3, Sn_MR_TCP, 23, SF_TCP_NODELAY) == 3){
 800313c:	2320      	movs	r3, #32
 800313e:	2217      	movs	r2, #23
 8003140:	2101      	movs	r1, #1
 8003142:	2003      	movs	r0, #3
 8003144:	f7fe fbd0 	bl	80018e8 <socket>
 8003148:	2803      	cmp	r0, #3
 800314a:	d17c      	bne.n	8003246 <EthernetTask+0x28a>
							if(listen(3) == SOCK_OK) {
 800314c:	f7fe fc78 	bl	8001a40 <listen>
 8003150:	2801      	cmp	r0, #1
 8003152:	d178      	bne.n	8003246 <EthernetTask+0x28a>
								setSn_IMR(3, (Sn_IR_RECV | Sn_IR_DISCON | Sn_IR_CON | Sn_IR_TIMEOUT | Sn_IR_SENDOK));
 8003154:	211f      	movs	r1, #31
 8003156:	f642 4068 	movw	r0, #11368	; 0x2c68
 800315a:	f7fe fa1b 	bl	8001594 <WIZCHIP_WRITE>
 800315e:	e072      	b.n	8003246 <EthernetTask+0x28a>
						getsockopt(3, SO_DESTIP, &remoteIP[3]);
 8003160:	aa0b      	add	r2, sp, #44	; 0x2c
 8003162:	2104      	movs	r1, #4
 8003164:	2003      	movs	r0, #3
 8003166:	f7fe fdfd 	bl	8001d64 <getsockopt>
						getsockopt(3, SO_DESTPORT, (uint8_t*)&remotePort[3]);
 800316a:	f10d 021e 	add.w	r2, sp, #30
 800316e:	2105      	movs	r1, #5
 8003170:	2003      	movs	r0, #3
 8003172:	f7fe fdf7 	bl	8001d64 <getsockopt>
						RuntimeStats_TelnetCurrIPSet(&remoteIP[3][0]);
 8003176:	a80b      	add	r0, sp, #44	; 0x2c
 8003178:	f7ff fa5a 	bl	8002630 <RuntimeStats_TelnetCurrIPSet>
						RuntimeStats_TelnetTxInc();
 800317c:	f7ff fa50 	bl	8002620 <RuntimeStats_TelnetTxInc>
						freesize = send(3, (uint8_t*)gretMsg, 47);
 8003180:	222f      	movs	r2, #47	; 0x2f
 8003182:	4943      	ldr	r1, [pc, #268]	; (8003290 <EthernetTask+0x2d4>)
 8003184:	2003      	movs	r0, #3
 8003186:	f7fe fcd9 	bl	8001b3c <send>
 800318a:	4b3f      	ldr	r3, [pc, #252]	; (8003288 <EthernetTask+0x2cc>)
 800318c:	8018      	strh	r0, [r3, #0]
						first_frame = 1;
 800318e:	2701      	movs	r7, #1
 8003190:	e7bd      	b.n	800310e <EthernetTask+0x152>
							RuntimeStats_TelnetRxInc();
 8003192:	f7ff fa3d 	bl	8002610 <RuntimeStats_TelnetRxInc>
							rcvSize += recv(3, &rcvBuf[rcvSize], 128);
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	493c      	ldr	r1, [pc, #240]	; (800328c <EthernetTask+0x2d0>)
 800319a:	2003      	movs	r0, #3
 800319c:	f7fe fd70 	bl	8001c80 <recv>
							while(((rcvBuf[rcvSize - 1] == '\r') || (rcvBuf[rcvSize - 1] == '\n')) && (rcvSize > 0)){
 80031a0:	e005      	b.n	80031ae <EthernetTask+0x1f2>
 80031a2:	2800      	cmp	r0, #0
 80031a4:	dd0a      	ble.n	80031bc <EthernetTask+0x200>
								rcvBuf[rcvSize - 1] = 0;
 80031a6:	4a39      	ldr	r2, [pc, #228]	; (800328c <EthernetTask+0x2d0>)
 80031a8:	2100      	movs	r1, #0
 80031aa:	54d1      	strb	r1, [r2, r3]
								rcvSize--;
 80031ac:	4618      	mov	r0, r3
							while(((rcvBuf[rcvSize - 1] == '\r') || (rcvBuf[rcvSize - 1] == '\n')) && (rcvSize > 0)){
 80031ae:	1e43      	subs	r3, r0, #1
 80031b0:	4a36      	ldr	r2, [pc, #216]	; (800328c <EthernetTask+0x2d0>)
 80031b2:	5cd2      	ldrb	r2, [r2, r3]
 80031b4:	2a0d      	cmp	r2, #13
 80031b6:	d0f4      	beq.n	80031a2 <EthernetTask+0x1e6>
 80031b8:	2a0a      	cmp	r2, #10
 80031ba:	d0f2      	beq.n	80031a2 <EthernetTask+0x1e6>
								xMoreDataToFollow = FreeRTOS_CLIProcessCommand(&rcvBuf, &txBuf, 128);
 80031bc:	4e35      	ldr	r6, [pc, #212]	; (8003294 <EthernetTask+0x2d8>)
 80031be:	2280      	movs	r2, #128	; 0x80
 80031c0:	4631      	mov	r1, r6
 80031c2:	4832      	ldr	r0, [pc, #200]	; (800328c <EthernetTask+0x2d0>)
 80031c4:	f007 fe70 	bl	800aea8 <FreeRTOS_CLIProcessCommand>
 80031c8:	4680      	mov	r8, r0
								RuntimeStats_TelnetTxInc();
 80031ca:	f7ff fa29 	bl	8002620 <RuntimeStats_TelnetTxInc>
								freesize = send(3, txBuf, strlen((char*)txBuf));
 80031ce:	4630      	mov	r0, r6
 80031d0:	f7fd f806 	bl	80001e0 <strlen>
 80031d4:	b282      	uxth	r2, r0
 80031d6:	4631      	mov	r1, r6
 80031d8:	2003      	movs	r0, #3
 80031da:	f7fe fcaf 	bl	8001b3c <send>
 80031de:	4b2a      	ldr	r3, [pc, #168]	; (8003288 <EthernetTask+0x2cc>)
 80031e0:	8018      	strh	r0, [r3, #0]
								vTaskDelay(1);
 80031e2:	2001      	movs	r0, #1
 80031e4:	f006 fc90 	bl	8009b08 <vTaskDelay>
							}while(xMoreDataToFollow != pdFALSE);
 80031e8:	f1b8 0f00 	cmp.w	r8, #0
 80031ec:	d1e6      	bne.n	80031bc <EthernetTask+0x200>
 80031ee:	e799      	b.n	8003124 <EthernetTask+0x168>
						ClrSiS(3);
 80031f0:	2003      	movs	r0, #3
 80031f2:	f7fe fd39 	bl	8001c68 <ClrSiS>
 80031f6:	e798      	b.n	800312a <EthernetTask+0x16e>
					}

				}

				if(interruptSource & IK_SOCK_4){
					interrupt = getSn_IR(4);
 80031f8:	f44f 7022 	mov.w	r0, #648	; 0x288
 80031fc:	f7fe f998 	bl	8001530 <WIZCHIP_READ>
 8003200:	e024      	b.n	800324c <EthernetTask+0x290>
				}

				if(interruptSource & IK_SOCK_5){
					interrupt = getSn_IR(5);
 8003202:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 8003206:	f7fe f993 	bl	8001530 <WIZCHIP_READ>
 800320a:	e022      	b.n	8003252 <EthernetTask+0x296>

				if(interruptSource & IK_SOCK_6){
					interrupt = getSn_IR(6);
				}

				if(interruptSource & IK_SOCK_7){
 800320c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8003210:	d127      	bne.n	8003262 <EthernetTask+0x2a6>
			while(HAL_GPIO_ReadPin(ETH_INT_GPIO_Port, ETH_INT_Pin) == 0){
 8003212:	2102      	movs	r1, #2
 8003214:	4820      	ldr	r0, [pc, #128]	; (8003298 <EthernetTask+0x2dc>)
 8003216:	f002 fd73 	bl	8005d00 <HAL_GPIO_ReadPin>
 800321a:	2800      	cmp	r0, #0
 800321c:	f47f af2b 	bne.w	8003076 <EthernetTask+0xba>
				interruptSource = wizchip_getinterrupt();
 8003220:	f7fe ff27 	bl	8002072 <wizchip_getinterrupt>
 8003224:	4604      	mov	r4, r0
				if(interruptSource & IK_SOCK_0){
 8003226:	f410 7f80 	tst.w	r0, #256	; 0x100
 800322a:	f47f af2e 	bne.w	800308a <EthernetTask+0xce>
				if(interruptSource & IK_SOCK_1){
 800322e:	f414 7f00 	tst.w	r4, #512	; 0x200
 8003232:	f47f af3d 	bne.w	80030b0 <EthernetTask+0xf4>
				if(interruptSource & IK_SOCK_2){
 8003236:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800323a:	f47f af4d 	bne.w	80030d8 <EthernetTask+0x11c>
				if(interruptSource & IK_SOCK_3){
 800323e:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8003242:	f47f af4e 	bne.w	80030e2 <EthernetTask+0x126>
				if(interruptSource & IK_SOCK_4){
 8003246:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 800324a:	d1d5      	bne.n	80031f8 <EthernetTask+0x23c>
				if(interruptSource & IK_SOCK_5){
 800324c:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 8003250:	d1d7      	bne.n	8003202 <EthernetTask+0x246>
				if(interruptSource & IK_SOCK_6){
 8003252:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8003256:	d0d9      	beq.n	800320c <EthernetTask+0x250>
					interrupt = getSn_IR(6);
 8003258:	f44f 7032 	mov.w	r0, #712	; 0x2c8
 800325c:	f7fe f968 	bl	8001530 <WIZCHIP_READ>
 8003260:	e7d4      	b.n	800320c <EthernetTask+0x250>
					interrupt = getSn_IR(7);
 8003262:	f44f 703a 	mov.w	r0, #744	; 0x2e8
 8003266:	f7fe f963 	bl	8001530 <WIZCHIP_READ>
 800326a:	e7d2      	b.n	8003212 <EthernetTask+0x256>
 800326c:	08002f75 	.word	0x08002f75
 8003270:	08002f99 	.word	0x08002f99
 8003274:	08002f2d 	.word	0x08002f2d
 8003278:	08002f5d 	.word	0x08002f5d
 800327c:	08002f15 	.word	0x08002f15
 8003280:	08002f45 	.word	0x08002f45
 8003284:	20000030 	.word	0x20000030
 8003288:	20002d50 	.word	0x20002d50
 800328c:	20002d54 	.word	0x20002d54
 8003290:	0800c940 	.word	0x0800c940
 8003294:	20002dd4 	.word	0x20002dd4
 8003298:	40020400 	.word	0x40020400

0800329c <NRF_ChipSelect>:

void NRF_ChipSelect (void);

void NRF_ChipDeselect (void);

void NRF_ChipSelect (void){
 800329c:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 800329e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <NRF_ChipSelect+0x1c>)
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	f005 ff6f 	bl	8009188 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 80032aa:	2200      	movs	r2, #0
 80032ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032b0:	4802      	ldr	r0, [pc, #8]	; (80032bc <NRF_ChipSelect+0x20>)
 80032b2:	f002 fd2c 	bl	8005d0e <HAL_GPIO_WritePin>
}
 80032b6:	bd08      	pop	{r3, pc}
 80032b8:	20003304 	.word	0x20003304
 80032bc:	40020400 	.word	0x40020400

080032c0 <NRF_ChipDeselect>:

void NRF_ChipDeselect (void){
 80032c0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_SET);
 80032c2:	2201      	movs	r2, #1
 80032c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032c8:	4805      	ldr	r0, [pc, #20]	; (80032e0 <NRF_ChipDeselect+0x20>)
 80032ca:	f002 fd20 	bl	8005d0e <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 80032ce:	2300      	movs	r3, #0
 80032d0:	461a      	mov	r2, r3
 80032d2:	4619      	mov	r1, r3
 80032d4:	4803      	ldr	r0, [pc, #12]	; (80032e4 <NRF_ChipDeselect+0x24>)
 80032d6:	6800      	ldr	r0, [r0, #0]
 80032d8:	f005 fd60 	bl	8008d9c <xQueueGenericSend>
}
 80032dc:	bd08      	pop	{r3, pc}
 80032de:	bf00      	nop
 80032e0:	40020400 	.word	0x40020400
 80032e4:	20003304 	.word	0x20003304

080032e8 <RadioTask>:

void RadioTask(void const * argument)
{
 80032e8:	b508      	push	{r3, lr}
	const uint8_t ecoIOinitMSG[] = "IsAlive";
  /* USER CODE BEGIN RadioComm */
	nRF24_Init(&hspi1);
 80032ea:	480e      	ldr	r0, [pc, #56]	; (8003324 <RadioTask+0x3c>)
 80032ec:	f001 ff04 	bl	80050f8 <nRF24_Init>
	nRF24_SetRXAddress(0, "_ECOE");
 80032f0:	490d      	ldr	r1, [pc, #52]	; (8003328 <RadioTask+0x40>)
 80032f2:	2000      	movs	r0, #0
 80032f4:	f001 fd4f 	bl	8004d96 <nRF24_SetRXAddress>
	nRF24_SetRXAddress(1, "_ECOI");
 80032f8:	490c      	ldr	r1, [pc, #48]	; (800332c <RadioTask+0x44>)
 80032fa:	2001      	movs	r0, #1
 80032fc:	f001 fd4b 	bl	8004d96 <nRF24_SetRXAddress>
	nRF24_SetTXAddress("_ECOM");
 8003300:	480b      	ldr	r0, [pc, #44]	; (8003330 <RadioTask+0x48>)
 8003302:	f001 fd8b 	bl	8004e1c <nRF24_SetTXAddress>
	nRF24_RX_Mode();
 8003306:	f001 fd67 	bl	8004dd8 <nRF24_RX_Mode>
	//nRF24_SendData((uint8_t*)ecoIOinitMSG, sizeof(ecoIOinitMSG));

  /* Infinite loop */
  for(;;)
  {
	  if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 800330a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800330e:	2200      	movs	r2, #0
 8003310:	4619      	mov	r1, r3
 8003312:	4618      	mov	r0, r3
 8003314:	f006 febc 	bl	800a090 <xTaskNotifyWait>
 8003318:	2801      	cmp	r0, #1
 800331a:	d1f6      	bne.n	800330a <RadioTask+0x22>
		  nRF24_Event();
 800331c:	f001 febe 	bl	800509c <nRF24_Event>
 8003320:	e7f3      	b.n	800330a <RadioTask+0x22>
 8003322:	bf00      	nop
 8003324:	20003228 	.word	0x20003228
 8003328:	0800c970 	.word	0x0800c970
 800332c:	0800c978 	.word	0x0800c978
 8003330:	0800c980 	.word	0x0800c980

08003334 <fModbusParseFloat>:
#define CWU_HEATER_PHASE_POWER 		1

float fModbusParseFloat (uint8_t* in_data){
	union float_bytes buffor;

	buffor.bytes[3] = *in_data;
 8003334:	7802      	ldrb	r2, [r0, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	f362 631f 	bfi	r3, r2, #24, #8
	in_data ++;
	buffor.bytes[2] = *in_data;
 800333c:	7842      	ldrb	r2, [r0, #1]
 800333e:	f362 4317 	bfi	r3, r2, #16, #8
	in_data ++;
	buffor.bytes[1] = *in_data;
 8003342:	7882      	ldrb	r2, [r0, #2]
 8003344:	f362 230f 	bfi	r3, r2, #8, #8
	in_data ++;
	buffor.bytes[0] = *in_data;
 8003348:	78c2      	ldrb	r2, [r0, #3]
 800334a:	f362 0307 	bfi	r3, r2, #0, #8

	return buffor.value;
 800334e:	ee00 3a10 	vmov	s0, r3
}
 8003352:	4770      	bx	lr

08003354 <RegulationTask>:

void RegulationTask(void const * argument)
{
 8003354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003356:	ed2d 8b04 	vpush	{d8-d9}
 800335a:	b0a5      	sub	sp, #148	; 0x94
	uint8_t counter_data_raw[36];
	uint8_t imported_exported_power_raw[8];
	uint8_t receieves = 0;
	uint8_t temperatures_raw[SENSOR_NUMBER * 2];

	regulationData.configStatus = Config_GetRegConfig(&regulationData.parameters);
 800335c:	4cc9      	ldr	r4, [pc, #804]	; (8003684 <RegulationTask+0x330>)
 800335e:	4620      	mov	r0, r4
 8003360:	f7fd ffac 	bl	80012bc <Config_GetRegConfig>
 8003364:	f804 0c01 	strb.w	r0, [r4, #-1]

	HAL_TIM_PWM_Init(&htim1);
 8003368:	4ec7      	ldr	r6, [pc, #796]	; (8003688 <RegulationTask+0x334>)
 800336a:	4630      	mov	r0, r6
 800336c:	f004 fd49 	bl	8007e02 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 8003370:	4dc6      	ldr	r5, [pc, #792]	; (800368c <RegulationTask+0x338>)
 8003372:	4628      	mov	r0, r5
 8003374:	f004 fd45 	bl	8007e02 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim3);
 8003378:	4cc5      	ldr	r4, [pc, #788]	; (8003690 <RegulationTask+0x33c>)
 800337a:	4620      	mov	r0, r4
 800337c:	f004 fd41 	bl	8007e02 <HAL_TIM_PWM_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003380:	2100      	movs	r1, #0
 8003382:	4630      	mov	r0, r6
 8003384:	f004 fe08 	bl	8007f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003388:	2104      	movs	r1, #4
 800338a:	4630      	mov	r0, r6
 800338c:	f004 fe04 	bl	8007f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003390:	2108      	movs	r1, #8
 8003392:	4630      	mov	r0, r6
 8003394:	f004 fe00 	bl	8007f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003398:	2100      	movs	r1, #0
 800339a:	4628      	mov	r0, r5
 800339c:	f004 fdfc 	bl	8007f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80033a0:	2104      	movs	r1, #4
 80033a2:	4628      	mov	r0, r5
 80033a4:	f004 fdf8 	bl	8007f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80033a8:	2108      	movs	r1, #8
 80033aa:	4628      	mov	r0, r5
 80033ac:	f004 fdf4 	bl	8007f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80033b0:	2100      	movs	r1, #0
 80033b2:	4620      	mov	r0, r4
 80033b4:	f004 fdf0 	bl	8007f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80033b8:	2104      	movs	r1, #4
 80033ba:	4620      	mov	r0, r4
 80033bc:	f004 fdec 	bl	8007f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80033c0:	2108      	movs	r1, #8
 80033c2:	4620      	mov	r0, r4
 80033c4:	f004 fde8 	bl	8007f98 <HAL_TIM_PWM_Start>

	TIM1 -> CCR1 = 500;
 80033c8:	4ab2      	ldr	r2, [pc, #712]	; (8003694 <RegulationTask+0x340>)
 80033ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80033ce:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1 -> CCR2 = 500;
 80033d0:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1 -> CCR3 = 500;
 80033d2:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM2 -> CCR1 = 500;
 80033d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033d8:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2 -> CCR2 = 500;
 80033da:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2 -> CCR3 = 500;
 80033dc:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM3 -> CCR1 = 500;
 80033de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033e2:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3 -> CCR2 = 500;
 80033e4:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3 -> CCR3 = 500;
 80033e6:	63d3      	str	r3, [r2, #60]	; 0x3c

	//Uchwyty i inne struktury
	mbPort.task =  xTaskGetCurrentTaskHandle();
 80033e8:	f006 fcde 	bl	8009da8 <xTaskGetCurrentTaskHandle>
 80033ec:	9023      	str	r0, [sp, #140]	; 0x8c

	mcp23017_init(&expander1, &hi2c1, 0b0100111);
 80033ee:	4caa      	ldr	r4, [pc, #680]	; (8003698 <RegulationTask+0x344>)
 80033f0:	2227      	movs	r2, #39	; 0x27
 80033f2:	49aa      	ldr	r1, [pc, #680]	; (800369c <RegulationTask+0x348>)
 80033f4:	4620      	mov	r0, r4
 80033f6:	f7fe feb7 	bl	8002168 <mcp23017_init>
	mcp23017_iodir(&expander1, 1, 0xFF);
 80033fa:	22ff      	movs	r2, #255	; 0xff
 80033fc:	2101      	movs	r1, #1
 80033fe:	4620      	mov	r0, r4
 8003400:	f7fe fed4 	bl	80021ac <mcp23017_iodir>
	mcp23017_iodir(&expander1, 0, 0x03);
 8003404:	2203      	movs	r2, #3
 8003406:	2100      	movs	r1, #0
 8003408:	4620      	mov	r0, r4
 800340a:	f7fe fecf 	bl	80021ac <mcp23017_iodir>
	expander1.gpio[0] = 0b11111100;
 800340e:	23fc      	movs	r3, #252	; 0xfc
 8003410:	71a3      	strb	r3, [r4, #6]
	mcp23017_write_gpio(&expander1, 0);
 8003412:	2100      	movs	r1, #0
 8003414:	4620      	mov	r0, r4
 8003416:	f7fe fee6 	bl	80021e6 <mcp23017_write_gpio>

	vTaskDelay(1000);
 800341a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800341e:	f006 fb73 	bl	8009b08 <vTaskDelay>

	expander1.gpio[0] = 0;
 8003422:	2100      	movs	r1, #0
 8003424:	71a1      	strb	r1, [r4, #6]
	mcp23017_write_gpio(&expander1, 0);
 8003426:	4620      	mov	r0, r4
 8003428:	f7fe fedd 	bl	80021e6 <mcp23017_write_gpio>
	vModbusInit(&mbPort, &huart2, 100);
 800342c:	2264      	movs	r2, #100	; 0x64
 800342e:	499c      	ldr	r1, [pc, #624]	; (80036a0 <RegulationTask+0x34c>)
 8003430:	a821      	add	r0, sp, #132	; 0x84
 8003432:	f7fe ffed 	bl	8002410 <vModbusInit>
	float exported_power = 0;
 8003436:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 80036a4 <RegulationTask+0x350>
	float imported_power = 0;
 800343a:	eef0 8a48 	vmov.f32	s17, s16
 800343e:	e07d      	b.n	800353c <RegulationTask+0x1e8>
		receieves = 0;

		if(regulationData.IOsignals.signals.input2 != regulationData.IOsignals.signals.output1){
			regulationData.ControlWord.CWUHeaterError = HIGH;
		}else{
			regulationData.ControlWord.CWUHeaterError = LOW;
 8003440:	4b99      	ldr	r3, [pc, #612]	; (80036a8 <RegulationTask+0x354>)
 8003442:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003446:	f36f 0200 	bfc	r2, #0, #1
 800344a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800344e:	e091      	b.n	8003574 <RegulationTask+0x220>
		}

		if(regulationData.IOsignals.signals.input3 != regulationData.IOsignals.signals.output2){
			regulationData.ControlWord.COHeaterError = HIGH;
		}else{
			regulationData.ControlWord.COHeaterError = LOW;
 8003450:	4b95      	ldr	r3, [pc, #596]	; (80036a8 <RegulationTask+0x354>)
 8003452:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003456:	f36f 0200 	bfc	r2, #0, #1
 800345a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800345e:	e09c      	b.n	800359a <RegulationTask+0x246>
		}

		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
			receieves += 1;
			for(uint8_t i = 0; i < 3; i++){
				regulationData.counter.voltages[i] = fModbusParseFloat(counter_data_raw + i * 4);
 8003460:	00a6      	lsls	r6, r4, #2
 8003462:	ab0a      	add	r3, sp, #40	; 0x28
 8003464:	1998      	adds	r0, r3, r6
 8003466:	f7ff ff65 	bl	8003334 <fModbusParseFloat>
 800346a:	4d8f      	ldr	r5, [pc, #572]	; (80036a8 <RegulationTask+0x354>)
 800346c:	f104 030a 	add.w	r3, r4, #10
 8003470:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003474:	ed83 0a00 	vstr	s0, [r3]
				regulationData.counter.currents[i] = fModbusParseFloat(counter_data_raw + 12 + i * 4);
 8003478:	f106 000c 	add.w	r0, r6, #12
 800347c:	ab0a      	add	r3, sp, #40	; 0x28
 800347e:	4418      	add	r0, r3
 8003480:	f7ff ff58 	bl	8003334 <fModbusParseFloat>
 8003484:	f104 030c 	add.w	r3, r4, #12
 8003488:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800348c:	ed83 0a01 	vstr	s0, [r3, #4]
				regulationData.counter.powers[i] = fModbusParseFloat(counter_data_raw + 24 + 4 * i);
 8003490:	f106 0018 	add.w	r0, r6, #24
 8003494:	ab0a      	add	r3, sp, #40	; 0x28
 8003496:	4418      	add	r0, r3
 8003498:	f7ff ff4c 	bl	8003334 <fModbusParseFloat>
 800349c:	f104 0310 	add.w	r3, r4, #16
 80034a0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80034a4:	ed85 0a00 	vstr	s0, [r5]
			for(uint8_t i = 0; i < 3; i++){
 80034a8:	3401      	adds	r4, #1
 80034aa:	b2e4      	uxtb	r4, r4
 80034ac:	2c02      	cmp	r4, #2
 80034ae:	d9d7      	bls.n	8003460 <RegulationTask+0x10c>
			receieves += 1;
 80034b0:	2501      	movs	r5, #1
 80034b2:	e07d      	b.n	80035b0 <RegulationTask+0x25c>
			for(uint8_t i = 0; i < 3; i++){
 80034b4:	2400      	movs	r4, #0
 80034b6:	e7f9      	b.n	80034ac <RegulationTask+0x158>
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);

			if(regulationData.counter.power_in_buffor > 0){
				regulationData.counter.power_in_buffor -= (imported_power - last_imported_power);
			}else{
				regulationData.counter.power_in_buffor = 0;
 80034b8:	4b7b      	ldr	r3, [pc, #492]	; (80036a8 <RegulationTask+0x354>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	64da      	str	r2, [r3, #76]	; 0x4c
			}
			regulationData.counter.power_in_buffor += (exported_power - last_exported_power) * ACUMULATED_POWER_FACTOR;
 80034be:	ee30 8a48 	vsub.f32	s16, s0, s16
 80034c2:	eddf 7a78 	vldr	s15, [pc, #480]	; 80036a4 <RegulationTask+0x350>
 80034c6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80034ca:	4b77      	ldr	r3, [pc, #476]	; (80036a8 <RegulationTask+0x354>)
 80034cc:	ed93 8a13 	vldr	s16, [r3, #76]	; 0x4c
 80034d0:	ee38 8a27 	vadd.f32	s16, s16, s15
 80034d4:	ed83 8a13 	vstr	s16, [r3, #76]	; 0x4c
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 80034d8:	eeb0 8a40 	vmov.f32	s16, s0
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 80034dc:	eef0 8a49 	vmov.f32	s17, s18
		}

		if(vModbusReadInputRegisters(&mbPort, TEMPERATURE_ADDRESS, 0, SENSOR_NUMBER, temperatures_raw) == Modbus_OK){
 80034e0:	ab03      	add	r3, sp, #12
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	230a      	movs	r3, #10
 80034e6:	2200      	movs	r2, #0
 80034e8:	2102      	movs	r1, #2
 80034ea:	a821      	add	r0, sp, #132	; 0x84
 80034ec:	f7fe ffc6 	bl	800247c <vModbusReadInputRegisters>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	f000 8081 	beq.w	80035f8 <RegulationTask+0x2a4>
				temperatures[i] = temp / DEC_PLACES;
			}
			memcpy(&regulationData.counter.CWU_temps[0], &temperatures[0], 24);
		}

		regulationData.counter.counter_present = 1;
 80034f6:	4b6c      	ldr	r3, [pc, #432]	; (80036a8 <RegulationTask+0x354>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	701a      	strb	r2, [r3, #0]
		regulationData.counter.temperatures_present = 1;
 80034fc:	709a      	strb	r2, [r3, #2]
		if(receieves == 7){
 80034fe:	2d07      	cmp	r5, #7
 8003500:	f000 8196 	beq.w	8003830 <RegulationTask+0x4dc>

		}else{

		}

		TIM3 -> CCR1 = regulationData.counter.CWU_heater_PWM[0];
 8003504:	4b68      	ldr	r3, [pc, #416]	; (80036a8 <RegulationTask+0x354>)
 8003506:	8899      	ldrh	r1, [r3, #4]
 8003508:	4a68      	ldr	r2, [pc, #416]	; (80036ac <RegulationTask+0x358>)
 800350a:	6351      	str	r1, [r2, #52]	; 0x34
		TIM3 -> CCR2 = regulationData.counter.CWU_heater_PWM[1];
 800350c:	88d9      	ldrh	r1, [r3, #6]
 800350e:	6391      	str	r1, [r2, #56]	; 0x38
		TIM3 -> CCR3 = regulationData.counter.CWU_heater_PWM[2];
 8003510:	8919      	ldrh	r1, [r3, #8]
 8003512:	63d1      	str	r1, [r2, #60]	; 0x3c

		TIM1 -> CCR1 = regulationData.counter.CO_heater_PWM[0];
 8003514:	8959      	ldrh	r1, [r3, #10]
 8003516:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 800351a:	6351      	str	r1, [r2, #52]	; 0x34
		TIM1 -> CCR2 = regulationData.counter.CO_heater_PWM[1];
 800351c:	8999      	ldrh	r1, [r3, #12]
 800351e:	6391      	str	r1, [r2, #56]	; 0x38
		TIM1 -> CCR3 = regulationData.counter.CO_heater_PWM[2];
 8003520:	89d9      	ldrh	r1, [r3, #14]
 8003522:	63d1      	str	r1, [r2, #60]	; 0x3c

		expander1.gpio[MCP23017_PORTA] = regulationData.IOsignals.ports.portA;
 8003524:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003528:	485b      	ldr	r0, [pc, #364]	; (8003698 <RegulationTask+0x344>)
 800352a:	7183      	strb	r3, [r0, #6]
		mcp23017_write_gpio(&expander1, 0);
 800352c:	2100      	movs	r1, #0
 800352e:	f7fe fe5a 	bl	80021e6 <mcp23017_write_gpio>
		vTaskDelayUntil(&xLastWakeTime, xDelay);
 8003532:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003536:	a820      	add	r0, sp, #128	; 0x80
 8003538:	f006 fa94 	bl	8009a64 <vTaskDelayUntil>
		mcp23017_read_gpio(&expander1, 0);
 800353c:	4c56      	ldr	r4, [pc, #344]	; (8003698 <RegulationTask+0x344>)
 800353e:	2100      	movs	r1, #0
 8003540:	4620      	mov	r0, r4
 8003542:	f7fe fe3e 	bl	80021c2 <mcp23017_read_gpio>
		mcp23017_read_gpio(&expander1, 1);
 8003546:	2101      	movs	r1, #1
 8003548:	4620      	mov	r0, r4
 800354a:	f7fe fe3a 	bl	80021c2 <mcp23017_read_gpio>
		regulationData.IOsignals.bytes[0] = expander1.gpio[0];
 800354e:	79a2      	ldrb	r2, [r4, #6]
 8003550:	4955      	ldr	r1, [pc, #340]	; (80036a8 <RegulationTask+0x354>)
 8003552:	f881 206a 	strb.w	r2, [r1, #106]	; 0x6a
		regulationData.IOsignals.bytes[1] = expander1.gpio[1];
 8003556:	79e3      	ldrb	r3, [r4, #7]
 8003558:	f881 306b 	strb.w	r3, [r1, #107]	; 0x6b
		if(regulationData.IOsignals.signals.input2 != regulationData.IOsignals.signals.output1){
 800355c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003560:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
 8003564:	f43f af6c 	beq.w	8003440 <RegulationTask+0xec>
			regulationData.ControlWord.CWUHeaterError = HIGH;
 8003568:	f891 3068 	ldrb.w	r3, [r1, #104]	; 0x68
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	f881 3068 	strb.w	r3, [r1, #104]	; 0x68
		if(regulationData.IOsignals.signals.input3 != regulationData.IOsignals.signals.output2){
 8003574:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <RegulationTask+0x354>)
 8003576:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 800357a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800357e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003582:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003586:	429a      	cmp	r2, r3
 8003588:	f43f af62 	beq.w	8003450 <RegulationTask+0xfc>
			regulationData.ControlWord.COHeaterError = HIGH;
 800358c:	4a46      	ldr	r2, [pc, #280]	; (80036a8 <RegulationTask+0x354>)
 800358e:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
 800359a:	ab0a      	add	r3, sp, #40	; 0x28
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	2312      	movs	r3, #18
 80035a0:	2200      	movs	r2, #0
 80035a2:	2101      	movs	r1, #1
 80035a4:	a821      	add	r0, sp, #132	; 0x84
 80035a6:	f7fe ff69 	bl	800247c <vModbusReadInputRegisters>
 80035aa:	2800      	cmp	r0, #0
 80035ac:	d082      	beq.n	80034b4 <RegulationTask+0x160>
		receieves = 0;
 80035ae:	2500      	movs	r5, #0
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, IMPORTED_ACTIVE_POWER, 4, imported_exported_power_raw) == Modbus_OK){
 80035b0:	ab08      	add	r3, sp, #32
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	2304      	movs	r3, #4
 80035b6:	2248      	movs	r2, #72	; 0x48
 80035b8:	2101      	movs	r1, #1
 80035ba:	a821      	add	r0, sp, #132	; 0x84
 80035bc:	f7fe ff5e 	bl	800247c <vModbusReadInputRegisters>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d18d      	bne.n	80034e0 <RegulationTask+0x18c>
			receieves += 2;
 80035c4:	3502      	adds	r5, #2
 80035c6:	b2ed      	uxtb	r5, r5
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 80035c8:	a808      	add	r0, sp, #32
 80035ca:	f7ff feb3 	bl	8003334 <fModbusParseFloat>
 80035ce:	eeb0 9a40 	vmov.f32	s18, s0
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 80035d2:	a809      	add	r0, sp, #36	; 0x24
 80035d4:	f7ff feae 	bl	8003334 <fModbusParseFloat>
			if(regulationData.counter.power_in_buffor > 0){
 80035d8:	4b33      	ldr	r3, [pc, #204]	; (80036a8 <RegulationTask+0x354>)
 80035da:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80035de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e6:	f77f af67 	ble.w	80034b8 <RegulationTask+0x164>
				regulationData.counter.power_in_buffor -= (imported_power - last_imported_power);
 80035ea:	ee79 8a68 	vsub.f32	s17, s18, s17
 80035ee:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80035f2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 80035f6:	e762      	b.n	80034be <RegulationTask+0x16a>
			receieves += 4;
 80035f8:	3504      	adds	r5, #4
 80035fa:	b2ed      	uxtb	r5, r5
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 80035fc:	2400      	movs	r4, #0
 80035fe:	e01b      	b.n	8003638 <RegulationTask+0x2e4>
				int16_t temp = temperatures_raw[i * 2];
 8003600:	0063      	lsls	r3, r4, #1
 8003602:	aa24      	add	r2, sp, #144	; 0x90
 8003604:	441a      	add	r2, r3
 8003606:	f812 2c84 	ldrb.w	r2, [r2, #-132]
				temp += temperatures_raw[i*2 + 1];
 800360a:	3301      	adds	r3, #1
 800360c:	a924      	add	r1, sp, #144	; 0x90
 800360e:	440b      	add	r3, r1
 8003610:	f813 0c84 	ldrb.w	r0, [r3, #-132]
 8003614:	eb00 2002 	add.w	r0, r0, r2, lsl #8
				temperatures[i] = temp / DEC_PLACES;
 8003618:	b200      	sxth	r0, r0
 800361a:	f7fc ff8b 	bl	8000534 <__aeabi_i2d>
 800361e:	2200      	movs	r2, #0
 8003620:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <RegulationTask+0x35c>)
 8003622:	f7fd f91b 	bl	800085c <__aeabi_ddiv>
 8003626:	f7fd fa21 	bl	8000a6c <__aeabi_d2f>
 800362a:	ab24      	add	r3, sp, #144	; 0x90
 800362c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003630:	f843 0c38 	str.w	r0, [r3, #-56]
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 8003634:	3401      	adds	r4, #1
 8003636:	b2e4      	uxtb	r4, r4
 8003638:	2c09      	cmp	r4, #9
 800363a:	d9e1      	bls.n	8003600 <RegulationTask+0x2ac>
			memcpy(&regulationData.counter.CWU_temps[0], &temperatures[0], 24);
 800363c:	4c1d      	ldr	r4, [pc, #116]	; (80036b4 <RegulationTask+0x360>)
 800363e:	ae16      	add	r6, sp, #88	; 0x58
 8003640:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003644:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003648:	e884 0003 	stmia.w	r4, {r0, r1}
 800364c:	e753      	b.n	80034f6 <RegulationTask+0x1a2>
					available_power[i]  = -regulationData.counter.powers[i] * regulationData.parameters.heater_power_coeff / 100.0f;
 800364e:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <RegulationTask+0x354>)
 8003650:	f993 307c 	ldrsb.w	r3, [r3, #124]	; 0x7c
 8003654:	ee07 3a10 	vmov	s14, r3
 8003658:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800365c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8003660:	eddf 6a15 	vldr	s13, [pc, #84]	; 80036b8 <RegulationTask+0x364>
 8003664:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003668:	ab24      	add	r3, sp, #144	; 0x90
 800366a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800366e:	ed03 7a11 	vstr	s14, [r3, #-68]	; 0xffffffbc
 8003672:	e081      	b.n	8003778 <RegulationTask+0x424>
					regulationData.counter.CO_heater_max_power[i] = 0.0f;
 8003674:	1d2b      	adds	r3, r5, #4
 8003676:	4a0c      	ldr	r2, [pc, #48]	; (80036a8 <RegulationTask+0x354>)
 8003678:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e0a2      	b.n	80037c8 <RegulationTask+0x474>
 8003682:	bf00      	nop
 8003684:	20002ec1 	.word	0x20002ec1
 8003688:	200031a8 	.word	0x200031a8
 800368c:	20003280 	.word	0x20003280
 8003690:	2000301c 	.word	0x2000301c
 8003694:	40010000 	.word	0x40010000
 8003698:	20002ee4 	.word	0x20002ee4
 800369c:	20002fc0 	.word	0x20002fc0
 80036a0:	200032c0 	.word	0x200032c0
 80036a4:	00000000 	.word	0x00000000
 80036a8:	20002e54 	.word	0x20002e54
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40240000 	.word	0x40240000
 80036b4:	20002ea4 	.word	0x20002ea4
 80036b8:	42c80000 	.word	0x42c80000
					regulationData.counter.CWU_heater_max_power[i] = 0.0f;
 80036bc:	1dab      	adds	r3, r5, #6
 80036be:	4ac0      	ldr	r2, [pc, #768]	; (80039c0 <RegulationTask+0x66c>)
 80036c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80036c4:	2200      	movs	r2, #0
 80036c6:	605a      	str	r2, [r3, #4]
				if(regulationData.counter.voltages[i] > 200.0){
 80036c8:	f105 030a 	add.w	r3, r5, #10
 80036cc:	4abc      	ldr	r2, [pc, #752]	; (80039c0 <RegulationTask+0x66c>)
 80036ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80036d2:	ed93 7a00 	vldr	s14, [r3]
 80036d6:	eddf 7abb 	vldr	s15, [pc, #748]	; 80039c4 <RegulationTask+0x670>
 80036da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e2:	f340 809b 	ble.w	800381c <RegulationTask+0x4c8>
					regulationData.counter.CO_heater_PWM[i] = (uint32_t)(regulationData.counter.CO_heater_max_power[i] * 1000.0);
 80036e6:	4616      	mov	r6, r2
 80036e8:	1d2f      	adds	r7, r5, #4
 80036ea:	eb02 0387 	add.w	r3, r2, r7, lsl #2
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	f7fc ff32 	bl	8000558 <__aeabi_f2d>
 80036f4:	2200      	movs	r2, #0
 80036f6:	4bb4      	ldr	r3, [pc, #720]	; (80039c8 <RegulationTask+0x674>)
 80036f8:	f7fc ff86 	bl	8000608 <__aeabi_dmul>
 80036fc:	f7fd f996 	bl	8000a2c <__aeabi_d2uiz>
 8003700:	eb06 0747 	add.w	r7, r6, r7, lsl #1
 8003704:	8078      	strh	r0, [r7, #2]
					regulationData.counter.CWU_heater_PWM[i] = (uint32_t)(regulationData.counter.CWU_heater_max_power[i] * 1000.0);
 8003706:	1dab      	adds	r3, r5, #6
 8003708:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800370c:	6858      	ldr	r0, [r3, #4]
 800370e:	f7fc ff23 	bl	8000558 <__aeabi_f2d>
 8003712:	2200      	movs	r2, #0
 8003714:	4bac      	ldr	r3, [pc, #688]	; (80039c8 <RegulationTask+0x674>)
 8003716:	f7fc ff77 	bl	8000608 <__aeabi_dmul>
 800371a:	f7fd f987 	bl	8000a2c <__aeabi_d2uiz>
 800371e:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 8003722:	80a8      	strh	r0, [r5, #4]
			for(uint8_t i = 0; i < 3; i ++){
 8003724:	3401      	adds	r4, #1
 8003726:	b2e4      	uxtb	r4, r4
 8003728:	2c02      	cmp	r4, #2
 800372a:	f200 8083 	bhi.w	8003834 <RegulationTask+0x4e0>
				if(regulationData.counter.powers[i] > 0){
 800372e:	4625      	mov	r5, r4
 8003730:	f104 0310 	add.w	r3, r4, #16
 8003734:	4aa2      	ldr	r2, [pc, #648]	; (80039c0 <RegulationTask+0x66c>)
 8003736:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003746:	dd82      	ble.n	800364e <RegulationTask+0x2fa>
					available_power[i] = ((regulationData.parameters.net_max_power / 3.0f) - regulationData.counter.powers[i]) * regulationData.parameters.heater_power_coeff;
 8003748:	4613      	mov	r3, r2
 800374a:	f8d2 2075 	ldr.w	r2, [r2, #117]	; 0x75
 800374e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003752:	ee07 2a10 	vmov	s14, r2
 8003756:	ee87 7a26 	vdiv.f32	s14, s14, s13
 800375a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800375e:	f993 307c 	ldrsb.w	r3, [r3, #124]	; 0x7c
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800376a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800376e:	ab24      	add	r3, sp, #144	; 0x90
 8003770:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003774:	ed43 7a11 	vstr	s15, [r3, #-68]	; 0xffffffbc
				if(regulationData.parameters.CO_heater_power > 0.0f){
 8003778:	4b91      	ldr	r3, [pc, #580]	; (80039c0 <RegulationTask+0x66c>)
 800377a:	f8d3 3071 	ldr.w	r3, [r3, #113]	; 0x71
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378a:	f77f af73 	ble.w	8003674 <RegulationTask+0x320>
					regulationData.counter.CO_heater_max_power[i] = available_power[i] / regulationData.parameters.CO_heater_power / 3.0f;
 800378e:	ab24      	add	r3, sp, #144	; 0x90
 8003790:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8003794:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 8003798:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800379c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80037a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037a4:	1d2b      	adds	r3, r5, #4
 80037a6:	4a86      	ldr	r2, [pc, #536]	; (80039c0 <RegulationTask+0x66c>)
 80037a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80037ac:	edc3 7a00 	vstr	s15, [r3]
					if(regulationData.counter.CO_heater_max_power[i] > 1.0f) regulationData.counter.CO_heater_max_power[i] = 1.0f;
 80037b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037bc:	dd04      	ble.n	80037c8 <RegulationTask+0x474>
 80037be:	1d2b      	adds	r3, r5, #4
 80037c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80037c4:	ed83 7a00 	vstr	s14, [r3]
				if(regulationData.parameters.CWU_heater_power > 0.0f){
 80037c8:	4b7d      	ldr	r3, [pc, #500]	; (80039c0 <RegulationTask+0x66c>)
 80037ca:	f8d3 306d 	ldr.w	r3, [r3, #109]	; 0x6d
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037da:	f77f af6f 	ble.w	80036bc <RegulationTask+0x368>
					regulationData.counter.CWU_heater_max_power[i] = available_power[i] / regulationData.parameters.CWU_heater_power / 3.0f;
 80037de:	ab24      	add	r3, sp, #144	; 0x90
 80037e0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80037e4:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 80037e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80037ec:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80037f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037f4:	1dab      	adds	r3, r5, #6
 80037f6:	4a72      	ldr	r2, [pc, #456]	; (80039c0 <RegulationTask+0x66c>)
 80037f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80037fc:	edc3 7a01 	vstr	s15, [r3, #4]
					if(regulationData.counter.CWU_heater_max_power[i] > 1.0f) regulationData.counter.CWU_heater_max_power[i] = 1.0f;
 8003800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380c:	f77f af5c 	ble.w	80036c8 <RegulationTask+0x374>
 8003810:	1dab      	adds	r3, r5, #6
 8003812:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003816:	ed83 7a01 	vstr	s14, [r3, #4]
 800381a:	e755      	b.n	80036c8 <RegulationTask+0x374>
					regulationData.counter.CO_heater_PWM[i] = 0;
 800381c:	4b68      	ldr	r3, [pc, #416]	; (80039c0 <RegulationTask+0x66c>)
 800381e:	1d2a      	adds	r2, r5, #4
 8003820:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8003824:	2100      	movs	r1, #0
 8003826:	8051      	strh	r1, [r2, #2]
					regulationData.counter.CWU_heater_PWM[i] = 0;
 8003828:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800382c:	80a9      	strh	r1, [r5, #4]
 800382e:	e779      	b.n	8003724 <RegulationTask+0x3d0>
			for(uint8_t i = 0; i < 3; i ++){
 8003830:	2400      	movs	r4, #0
 8003832:	e779      	b.n	8003728 <RegulationTask+0x3d4>
			if(regulationData.counter.CWU_temps[0] < regulationData.parameters.CWU_hi_temp){
 8003834:	4b62      	ldr	r3, [pc, #392]	; (80039c0 <RegulationTask+0x66c>)
 8003836:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800383a:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800384a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384e:	d515      	bpl.n	800387c <RegulationTask+0x528>
				if(regulationData.counter.CWU_temps[1] < regulationData.parameters.CWU_lo_temp){
 8003850:	4b5b      	ldr	r3, [pc, #364]	; (80039c0 <RegulationTask+0x66c>)
 8003852:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003856:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386a:	d50e      	bpl.n	800388a <RegulationTask+0x536>
					regulationData.ControlWord.CWUHeaterStateOut = HIGH;
 800386c:	4a54      	ldr	r2, [pc, #336]	; (80039c0 <RegulationTask+0x66c>)
 800386e:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 800387a:	e006      	b.n	800388a <RegulationTask+0x536>
				regulationData.ControlWord.CWUHeaterStateOut = LOW;
 800387c:	4b50      	ldr	r3, [pc, #320]	; (80039c0 <RegulationTask+0x66c>)
 800387e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003882:	f36f 0200 	bfc	r2, #0, #1
 8003886:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.counter.CO_temps[0] < regulationData.parameters.CO_hi_temp){
 800388a:	4b4d      	ldr	r3, [pc, #308]	; (80039c0 <RegulationTask+0x66c>)
 800388c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003890:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8003894:	ee07 3a90 	vmov	s15, r3
 8003898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800389c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a4:	d515      	bpl.n	80038d2 <RegulationTask+0x57e>
				if(regulationData.counter.CO_temps[3] < regulationData.parameters.CO_lo_temp){
 80038a6:	4b46      	ldr	r3, [pc, #280]	; (80039c0 <RegulationTask+0x66c>)
 80038a8:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80038ac:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80038b0:	ee07 3a90 	vmov	s15, r3
 80038b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c0:	d50e      	bpl.n	80038e0 <RegulationTask+0x58c>
					regulationData.ControlWord.COHeaterStateOut = HIGH;
 80038c2:	4a3f      	ldr	r2, [pc, #252]	; (80039c0 <RegulationTask+0x66c>)
 80038c4:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 80038d0:	e006      	b.n	80038e0 <RegulationTask+0x58c>
				regulationData.ControlWord.COHeaterStateOut = LOW;
 80038d2:	4b3b      	ldr	r3, [pc, #236]	; (80039c0 <RegulationTask+0x66c>)
 80038d4:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80038d8:	f36f 0200 	bfc	r2, #0, #1
 80038dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.ControlWord.COHeaterStateOut){
 80038e0:	4b37      	ldr	r3, [pc, #220]	; (80039c0 <RegulationTask+0x66c>)
 80038e2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80038e6:	f013 0f01 	tst.w	r3, #1
 80038ea:	d006      	beq.n	80038fa <RegulationTask+0x5a6>
				regulationData.ControlWord.CWUHeaterStateOut = LOW;
 80038ec:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <RegulationTask+0x66c>)
 80038ee:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80038f2:	f36f 0200 	bfc	r2, #0, #1
 80038f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			if(regulationData.IOsignals.signals.input1 == HIGH){
 80038fa:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <RegulationTask+0x66c>)
 80038fc:	f993 306b 	ldrsb.w	r3, [r3, #107]	; 0x6b
 8003900:	2b00      	cmp	r3, #0
 8003902:	da47      	bge.n	8003994 <RegulationTask+0x640>
				if(regulationData.IOsignals.signals.input4 == LOW ||
 8003904:	4b2e      	ldr	r3, [pc, #184]	; (80039c0 <RegulationTask+0x66c>)
 8003906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003908:	f023 436f 	bic.w	r3, r3, #4009754624	; 0xef000000
 800390c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003910:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003914:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800391c:	d006      	beq.n	800392c <RegulationTask+0x5d8>
					regulationData.ControlWord.CWUHeaterStateOut = LOW;
 800391e:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <RegulationTask+0x66c>)
 8003920:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003924:	f36f 0200 	bfc	r2, #0, #1
 8003928:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				if(regulationData.IOsignals.signals.input5 == LOW &&
 800392c:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <RegulationTask+0x66c>)
 800392e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003930:	f023 4377 	bic.w	r3, r3, #4143972352	; 0xf7000000
 8003934:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003938:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800393c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003940:	2b01      	cmp	r3, #1
 8003942:	d00a      	beq.n	800395a <RegulationTask+0x606>
				if(regulationData.ControlWord.CWUHeaterStateOut == LOW){
 8003944:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <RegulationTask+0x66c>)
 8003946:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800394a:	f013 0301 	ands.w	r3, r3, #1
 800394e:	d015      	beq.n	800397c <RegulationTask+0x628>
				if(regulationData.ControlWord.COHeaterStateOut == LOW){
 8003950:	2b00      	cmp	r3, #0
 8003952:	f47f add7 	bne.w	8003504 <RegulationTask+0x1b0>
					for(int i = 0; i < 3; i++){
 8003956:	2300      	movs	r3, #0
 8003958:	e019      	b.n	800398e <RegulationTask+0x63a>
					regulationData.ControlWord.CWUHeaterStateOut = LOW;
 800395a:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <RegulationTask+0x66c>)
 800395c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8003960:	f36f 0200 	bfc	r2, #0, #1
 8003964:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003968:	e7ec      	b.n	8003944 <RegulationTask+0x5f0>
						regulationData.counter.CWU_heater_PWM[i] = 0;
 800396a:	4915      	ldr	r1, [pc, #84]	; (80039c0 <RegulationTask+0x66c>)
 800396c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8003970:	2000      	movs	r0, #0
 8003972:	8088      	strh	r0, [r1, #4]
					for(int i = 0; i < 3; i++){
 8003974:	3201      	adds	r2, #1
 8003976:	2a02      	cmp	r2, #2
 8003978:	ddf7      	ble.n	800396a <RegulationTask+0x616>
 800397a:	e7e9      	b.n	8003950 <RegulationTask+0x5fc>
 800397c:	2200      	movs	r2, #0
 800397e:	e7fa      	b.n	8003976 <RegulationTask+0x622>
						regulationData.counter.CO_heater_PWM[i] = 0;
 8003980:	1d19      	adds	r1, r3, #4
 8003982:	4a0f      	ldr	r2, [pc, #60]	; (80039c0 <RegulationTask+0x66c>)
 8003984:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8003988:	2100      	movs	r1, #0
 800398a:	8051      	strh	r1, [r2, #2]
					for(int i = 0; i < 3; i++){
 800398c:	3301      	adds	r3, #1
 800398e:	2b02      	cmp	r3, #2
 8003990:	ddf6      	ble.n	8003980 <RegulationTask+0x62c>
 8003992:	e5b7      	b.n	8003504 <RegulationTask+0x1b0>
				regulationData.ControlWord.COHeaterStateOut = LOW;
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <RegulationTask+0x66c>)
 8003996:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800399a:	f36f 0200 	bfc	r2, #0, #1
 800399e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				for(int i = 0; i < 3; i++){
 80039a2:	2300      	movs	r3, #0
 80039a4:	e009      	b.n	80039ba <RegulationTask+0x666>
					regulationData.counter.CO_heater_PWM[i] = 0;
 80039a6:	4a06      	ldr	r2, [pc, #24]	; (80039c0 <RegulationTask+0x66c>)
 80039a8:	1d19      	adds	r1, r3, #4
 80039aa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80039ae:	2000      	movs	r0, #0
 80039b0:	8048      	strh	r0, [r1, #2]
					regulationData.counter.CWU_heater_PWM[i] = 0;
 80039b2:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80039b6:	8090      	strh	r0, [r2, #4]
				for(int i = 0; i < 3; i++){
 80039b8:	3301      	adds	r3, #1
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	ddf3      	ble.n	80039a6 <RegulationTask+0x652>
 80039be:	e5a1      	b.n	8003504 <RegulationTask+0x1b0>
 80039c0:	20002e54 	.word	0x20002e54
 80039c4:	43480000 	.word	0x43480000
 80039c8:	408f4000 	.word	0x408f4000

080039cc <RegulationTask_GetData>:
	}
  /* USER CODE END PowerRegulation */
}

void RegulationTask_GetData (RegTaskData_t* destination){
 80039cc:	b508      	push	{r3, lr}
	memcpy(destination, &regulationData, sizeof(RegTaskData_t));
 80039ce:	2290      	movs	r2, #144	; 0x90
 80039d0:	4901      	ldr	r1, [pc, #4]	; (80039d8 <RegulationTask_GetData+0xc>)
 80039d2:	f007 ff0d 	bl	800b7f0 <memcpy>
}
 80039d6:	bd08      	pop	{r3, pc}
 80039d8:	20002e54 	.word	0x20002e54

080039dc <TestTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TestTask */
void TestTask(void const * argument)
{
 80039dc:	b508      	push	{r3, lr}

  /* Infinite loop */
  for(;;)
  {

    vTaskDelay(1000);
 80039de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039e2:	f006 f891 	bl	8009b08 <vTaskDelay>
 80039e6:	e7fa      	b.n	80039de <TestTask+0x2>

080039e8 <UARTDMA_UartIrqHandler>:



void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80039e8:	6802      	ldr	r2, [r0, #0]
 80039ea:	6813      	ldr	r3, [r2, #0]
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	f011 0f10 	tst.w	r1, #16
 80039f2:	d00e      	beq.n	8003a12 <UARTDMA_UartIrqHandler+0x2a>
{
 80039f4:	b082      	sub	sp, #8
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	9101      	str	r1, [sp, #4]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	9301      	str	r3, [sp, #4]
		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80039fe:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	6813      	ldr	r3, [r2, #0]
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	6013      	str	r3, [r2, #0]
		tmp = tmp; // For unused warning
 8003a0a:	9b01      	ldr	r3, [sp, #4]
 8003a0c:	9301      	str	r3, [sp, #4]
	}
}
 8003a0e:	b002      	add	sp, #8
 8003a10:	4770      	bx	lr
 8003a12:	4770      	bx	lr

08003a14 <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma){
 8003a14:	b570      	push	{r4, r5, r6, lr}
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t Reserved0;
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8003a16:	6803      	ldr	r3, [r0, #0]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1a:	6d9d      	ldr	r5, [r3, #88]	; 0x58

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	f012 0f10 	tst.w	r2, #16
 8003a24:	d038      	beq.n	8003a98 <UARTDMA_DmaIrqHandler+0x84>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8003a26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a28:	2320      	movs	r3, #32
 8003a2a:	4093      	lsls	r3, r2
 8003a2c:	60ab      	str	r3, [r5, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8003a2e:	6803      	ldr	r3, [r0, #0]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685e      	ldr	r6, [r3, #4]
 8003a36:	f1c6 061e 	rsb	r6, r6, #30

		//huartdma->length += Length;
		huartdma->length = Length;
 8003a3a:	f880 60a2 	strb.w	r6, [r0, #162]	; 0xa2

		for(i = 0; i < Length; i++){
 8003a3e:	2200      	movs	r2, #0
 8003a40:	e00c      	b.n	8003a5c <UARTDMA_DmaIrqHandler+0x48>
			huartdma->UART_Buffer[huartdma->UartBufferTail] = huartdma->DMA_RX_Buffer[i];
 8003a42:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8003a46:	1881      	adds	r1, r0, r2
 8003a48:	790c      	ldrb	r4, [r1, #4]
 8003a4a:	18c1      	adds	r1, r0, r3
 8003a4c:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
			huartdma->UartBufferTail++;
 8003a50:	3301      	adds	r3, #1
			huartdma->UartBufferTail &= 127;
 8003a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a56:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		for(i = 0; i < Length; i++){
 8003a5a:	3201      	adds	r2, #1
 8003a5c:	42b2      	cmp	r2, r6
 8003a5e:	d3f0      	bcc.n	8003a42 <UARTDMA_DmaIrqHandler+0x2e>
 8003a60:	4604      	mov	r4, r0
		}

		huartdma -> callback();
 8003a62:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 8003a66:	4798      	blx	r3

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8003a68:	4623      	mov	r3, r4
 8003a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a70:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8003a72:	223f      	movs	r2, #63	; 0x3f
 8003a74:	408a      	lsls	r2, r1
 8003a76:	60aa      	str	r2, [r5, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8003a78:	6822      	ldr	r2, [r4, #0]
 8003a7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	60d3      	str	r3, [r2, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	221e      	movs	r2, #30
 8003a88:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	6813      	ldr	r3, [r2, #0]
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	6013      	str	r3, [r2, #0]
	}
}
 8003a98:	bd70      	pop	{r4, r5, r6, pc}

08003a9a <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	4604      	mov	r4, r0
	huartdma->huart = huart;
 8003a9e:	6001      	str	r1, [r0, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8003aa0:	680a      	ldr	r2, [r1, #0]
 8003aa2:	68d3      	ldr	r3, [r2, #12]
 8003aa4:	f043 0310 	orr.w	r3, r3, #16
 8003aa8:	60d3      	str	r3, [r2, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8003aaa:	4601      	mov	r1, r0
 8003aac:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	6813      	ldr	r3, [r2, #0]
 8003ab6:	f043 0310 	orr.w	r3, r3, #16
 8003aba:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8003abc:	221e      	movs	r2, #30
 8003abe:	6800      	ldr	r0, [r0, #0]
 8003ac0:	f004 fd3c 	bl	800853c <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_HTIE; // Disable DMA Half Complete interrupt
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	6813      	ldr	r3, [r2, #0]
 8003acc:	f023 0308 	bic.w	r3, r3, #8
 8003ad0:	6013      	str	r3, [r2, #0]
}
 8003ad2:	bd10      	pop	{r4, pc}

08003ad4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <vApplicationGetIdleTaskMemory+0x10>)
 8003ad6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003ad8:	4b03      	ldr	r3, [pc, #12]	; (8003ae8 <vApplicationGetIdleTaskMemory+0x14>)
 8003ada:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	2000036c 	.word	0x2000036c
 8003ae8:	2000016c 	.word	0x2000016c

08003aec <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003aec:	4b03      	ldr	r3, [pc, #12]	; (8003afc <vApplicationGetTimerTaskMemory+0x10>)
 8003aee:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <vApplicationGetTimerTaskMemory+0x14>)
 8003af2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003af8:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8003afa:	4770      	bx	lr
 8003afc:	200007d0 	.word	0x200007d0
 8003b00:	200003d0 	.word	0x200003d0

08003b04 <ConfigSaveTmr>:
__weak void ConfigSaveTmr(void const * argument)
{
  /* USER CODE BEGIN ConfigSaveTmr */
  
  /* USER CODE END ConfigSaveTmr */
}
 8003b04:	4770      	bx	lr
	...

08003b08 <MX_GPIO_Init>:
{
 8003b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b0c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b0e:	2400      	movs	r4, #0
 8003b10:	9405      	str	r4, [sp, #20]
 8003b12:	9406      	str	r4, [sp, #24]
 8003b14:	9407      	str	r4, [sp, #28]
 8003b16:	9408      	str	r4, [sp, #32]
 8003b18:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b1a:	9401      	str	r4, [sp, #4]
 8003b1c:	4b46      	ldr	r3, [pc, #280]	; (8003c38 <MX_GPIO_Init+0x130>)
 8003b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b20:	f042 0204 	orr.w	r2, r2, #4
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
 8003b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b28:	f002 0204 	and.w	r2, r2, #4
 8003b2c:	9201      	str	r2, [sp, #4]
 8003b2e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b30:	9402      	str	r4, [sp, #8]
 8003b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30
 8003b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003b40:	9202      	str	r2, [sp, #8]
 8003b42:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b44:	9403      	str	r4, [sp, #12]
 8003b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b48:	f042 0201 	orr.w	r2, r2, #1
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b50:	f002 0201 	and.w	r2, r2, #1
 8003b54:	9203      	str	r2, [sp, #12]
 8003b56:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b58:	9404      	str	r4, [sp, #16]
 8003b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b5c:	f042 0202 	orr.w	r2, r2, #2
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	9304      	str	r3, [sp, #16]
 8003b6a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 8003b6c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8003c4c <MX_GPIO_Init+0x144>
 8003b70:	4622      	mov	r2, r4
 8003b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b76:	4640      	mov	r0, r8
 8003b78:	f002 f8c9 	bl	8005d0e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 8003b7c:	4d2f      	ldr	r5, [pc, #188]	; (8003c3c <MX_GPIO_Init+0x134>)
 8003b7e:	4622      	mov	r2, r4
 8003b80:	2102      	movs	r1, #2
 8003b82:	4628      	mov	r0, r5
 8003b84:	f002 f8c3 	bl	8005d0e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8003b88:	2201      	movs	r2, #1
 8003b8a:	2110      	movs	r1, #16
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	f002 f8be 	bl	8005d0e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin, GPIO_PIN_SET);
 8003b92:	4e2b      	ldr	r6, [pc, #172]	; (8003c40 <MX_GPIO_Init+0x138>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	f246 0104 	movw	r1, #24580	; 0x6004
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f002 f8b7 	bl	8005d0e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8003ba0:	4622      	mov	r2, r4
 8003ba2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f002 f8b1 	bl	8005d0e <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUILT_IN_LED_Pin;
 8003bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bb0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb2:	2701      	movs	r7, #1
 8003bb4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BUILT_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8003bba:	a905      	add	r1, sp, #20
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	f001 ffcd 	bl	8005b5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MASTER_TE_Pin|ETH_CS_Pin;
 8003bc2:	2312      	movs	r3, #18
 8003bc4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bc6:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bca:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bcc:	a905      	add	r1, sp, #20
 8003bce:	4628      	mov	r0, r5
 8003bd0:	f001 ffc4 	bl	8005b5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ETH_INT_Pin|PG24V_Pin;
 8003bd4:	f241 0302 	movw	r3, #4098	; 0x1002
 8003bd8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003bda:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <MX_GPIO_Init+0x13c>)
 8003bdc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bde:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be0:	a905      	add	r1, sp, #20
 8003be2:	4630      	mov	r0, r6
 8003be4:	f001 ffba 	bl	8005b5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin|NRF_CE_Pin;
 8003be8:	f24e 0304 	movw	r3, #57348	; 0xe004
 8003bec:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bee:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf4:	a905      	add	r1, sp, #20
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f001 ffb0 	bl	8005b5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NRF_INT_Pin;
 8003bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c00:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <MX_GPIO_Init+0x140>)
 8003c04:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(NRF_INT_GPIO_Port, &GPIO_InitStruct);
 8003c08:	a905      	add	r1, sp, #20
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	f001 ffa6 	bl	8005b5c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8003c10:	4622      	mov	r2, r4
 8003c12:	2105      	movs	r1, #5
 8003c14:	2007      	movs	r0, #7
 8003c16:	f001 fcd3 	bl	80055c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003c1a:	2007      	movs	r0, #7
 8003c1c:	f001 fd04 	bl	8005628 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003c20:	4622      	mov	r2, r4
 8003c22:	2105      	movs	r1, #5
 8003c24:	2028      	movs	r0, #40	; 0x28
 8003c26:	f001 fccb 	bl	80055c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c2a:	2028      	movs	r0, #40	; 0x28
 8003c2c:	f001 fcfc 	bl	8005628 <HAL_NVIC_EnableIRQ>
}
 8003c30:	b00a      	add	sp, #40	; 0x28
 8003c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40020000 	.word	0x40020000
 8003c40:	40020400 	.word	0x40020400
 8003c44:	10210000 	.word	0x10210000
 8003c48:	10110000 	.word	0x10110000
 8003c4c:	40020800 	.word	0x40020800

08003c50 <MX_DMA_Init>:
{
 8003c50:	b510      	push	{r4, lr}
 8003c52:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c54:	2400      	movs	r4, #0
 8003c56:	9400      	str	r4, [sp, #0]
 8003c58:	4b16      	ldr	r3, [pc, #88]	; (8003cb4 <MX_DMA_Init+0x64>)
 8003c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c5c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
 8003c62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c64:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003c68:	9200      	str	r2, [sp, #0]
 8003c6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c6c:	9401      	str	r4, [sp, #4]
 8003c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c70:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c7c:	9301      	str	r3, [sp, #4]
 8003c7e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8003c80:	4622      	mov	r2, r4
 8003c82:	2105      	movs	r1, #5
 8003c84:	2010      	movs	r0, #16
 8003c86:	f001 fc9b 	bl	80055c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003c8a:	2010      	movs	r0, #16
 8003c8c:	f001 fccc 	bl	8005628 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003c90:	4622      	mov	r2, r4
 8003c92:	2105      	movs	r1, #5
 8003c94:	2039      	movs	r0, #57	; 0x39
 8003c96:	f001 fc93 	bl	80055c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003c9a:	2039      	movs	r0, #57	; 0x39
 8003c9c:	f001 fcc4 	bl	8005628 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8003ca0:	4622      	mov	r2, r4
 8003ca2:	2105      	movs	r1, #5
 8003ca4:	203a      	movs	r0, #58	; 0x3a
 8003ca6:	f001 fc8b 	bl	80055c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003caa:	203a      	movs	r0, #58	; 0x3a
 8003cac:	f001 fcbc 	bl	8005628 <HAL_NVIC_EnableIRQ>
}
 8003cb0:	b002      	add	sp, #8
 8003cb2:	bd10      	pop	{r4, pc}
 8003cb4:	40023800 	.word	0x40023800

08003cb8 <StartDefaultTask>:
{
 8003cb8:	b508      	push	{r3, lr}
    osDelay(1);
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f004 fe83 	bl	80089c6 <osDelay>
 8003cc0:	e7fb      	b.n	8003cba <StartDefaultTask+0x2>

08003cc2 <HAL_UART_RxCpltCallback>:
}
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003cc4:	b508      	push	{r3, lr}
	if(huart -> Instance == USART2){
 8003cc6:	6802      	ldr	r2, [r0, #0]
 8003cc8:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <HAL_UART_TxCpltCallback+0x24>)
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d000      	beq.n	8003cd0 <HAL_UART_TxCpltCallback+0xc>
}
 8003cce:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cd6:	4805      	ldr	r0, [pc, #20]	; (8003cec <HAL_UART_TxCpltCallback+0x28>)
 8003cd8:	f002 f819 	bl	8005d0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2102      	movs	r1, #2
 8003ce0:	4803      	ldr	r0, [pc, #12]	; (8003cf0 <HAL_UART_TxCpltCallback+0x2c>)
 8003ce2:	f002 f814 	bl	8005d0e <HAL_GPIO_WritePin>
}
 8003ce6:	e7f2      	b.n	8003cce <HAL_UART_TxCpltCallback+0xa>
 8003ce8:	40004400 	.word	0x40004400
 8003cec:	40020800 	.word	0x40020800
 8003cf0:	40020000 	.word	0x40020000

08003cf4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	4604      	mov	r4, r0
	if(GPIO_Pin & NRF_INT_Pin){
 8003cf8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003cfc:	d106      	bne.n	8003d0c <HAL_GPIO_EXTI_Callback+0x18>
	if(GPIO_Pin & ETH_INT_Pin){
 8003cfe:	f014 0f02 	tst.w	r4, #2
 8003d02:	d109      	bne.n	8003d18 <HAL_GPIO_EXTI_Callback+0x24>
	if(GPIO_Pin & PG24V_Pin){
 8003d04:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 8003d08:	d10c      	bne.n	8003d24 <HAL_GPIO_EXTI_Callback+0x30>
}
 8003d0a:	bd10      	pop	{r4, pc}
		vTaskNotifyGiveFromISR(nRF24L01Handle, NULL);
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	f006 faa5 	bl	800a260 <vTaskNotifyGiveFromISR>
 8003d16:	e7f2      	b.n	8003cfe <HAL_GPIO_EXTI_Callback+0xa>
		vTaskNotifyGiveFromISR(EthernetHandle, NULL);
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_GPIO_EXTI_Callback+0x40>)
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	f006 fa9f 	bl	800a260 <vTaskNotifyGiveFromISR>
 8003d22:	e7ef      	b.n	8003d04 <HAL_GPIO_EXTI_Callback+0x10>
		HAL_RTCEx_BKUPWrite(&hrtc, 0, 123456);
 8003d24:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <HAL_GPIO_EXTI_Callback+0x44>)
 8003d26:	2100      	movs	r1, #0
 8003d28:	4804      	ldr	r0, [pc, #16]	; (8003d3c <HAL_GPIO_EXTI_Callback+0x48>)
 8003d2a:	f003 fb09 	bl	8007340 <HAL_RTCEx_BKUPWrite>
}
 8003d2e:	e7ec      	b.n	8003d0a <HAL_GPIO_EXTI_Callback+0x16>
 8003d30:	20002eec 	.word	0x20002eec
 8003d34:	2000330c 	.word	0x2000330c
 8003d38:	0001e240 	.word	0x0001e240
 8003d3c:	20003188 	.word	0x20003188

08003d40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM11){
 8003d42:	6802      	ldr	r2, [r0, #0]
 8003d44:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d004      	beq.n	8003d54 <HAL_TIM_PeriodElapsedCallback+0x14>
		ulHighFreqTimerTicks ++;
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8003d4a:	6802      	ldr	r2, [r0, #0]
 8003d4c:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d005      	beq.n	8003d5e <HAL_TIM_PeriodElapsedCallback+0x1e>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003d52:	bd08      	pop	{r3, pc}
		ulHighFreqTimerTicks ++;
 8003d54:	4a05      	ldr	r2, [pc, #20]	; (8003d6c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003d56:	6813      	ldr	r3, [r2, #0]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	e7f5      	b.n	8003d4a <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
 8003d5e:	f001 fa7d 	bl	800525c <HAL_IncTick>
}
 8003d62:	e7f6      	b.n	8003d52 <HAL_TIM_PeriodElapsedCallback+0x12>
 8003d64:	40014800 	.word	0x40014800
 8003d68:	40014400 	.word	0x40014400
 8003d6c:	20003308 	.word	0x20003308

08003d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d70:	e7fe      	b.n	8003d70 <Error_Handler>
	...

08003d74 <MX_I2C1_Init>:
{
 8003d74:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8003d76:	480a      	ldr	r0, [pc, #40]	; (8003da0 <MX_I2C1_Init+0x2c>)
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <MX_I2C1_Init+0x30>)
 8003d7a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <MX_I2C1_Init+0x34>)
 8003d7e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d80:	2300      	movs	r3, #0
 8003d82:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003d84:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d8a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d8c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003d8e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d90:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d92:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d94:	f002 fa1c 	bl	80061d0 <HAL_I2C_Init>
 8003d98:	b900      	cbnz	r0, 8003d9c <MX_I2C1_Init+0x28>
}
 8003d9a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003d9c:	f7ff ffe8 	bl	8003d70 <Error_Handler>
 8003da0:	20002fc0 	.word	0x20002fc0
 8003da4:	40005400 	.word	0x40005400
 8003da8:	000186a0 	.word	0x000186a0

08003dac <MX_SPI1_Init>:
{
 8003dac:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8003dae:	480d      	ldr	r0, [pc, #52]	; (8003de4 <MX_SPI1_Init+0x38>)
 8003db0:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <MX_SPI1_Init+0x3c>)
 8003db2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003db4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003db8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003dbe:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dc0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003dc2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc8:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003dca:	2218      	movs	r2, #24
 8003dcc:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003dce:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dd0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dd2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003dd4:	230a      	movs	r3, #10
 8003dd6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003dd8:	f003 fb80 	bl	80074dc <HAL_SPI_Init>
 8003ddc:	b900      	cbnz	r0, 8003de0 <MX_SPI1_Init+0x34>
}
 8003dde:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003de0:	f7ff ffc6 	bl	8003d70 <Error_Handler>
 8003de4:	20003228 	.word	0x20003228
 8003de8:	40013000 	.word	0x40013000

08003dec <MX_TIM1_Init>:
{
 8003dec:	b510      	push	{r4, lr}
 8003dee:	b092      	sub	sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003df0:	2400      	movs	r4, #0
 8003df2:	9410      	str	r4, [sp, #64]	; 0x40
 8003df4:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003df6:	9409      	str	r4, [sp, #36]	; 0x24
 8003df8:	940a      	str	r4, [sp, #40]	; 0x28
 8003dfa:	940b      	str	r4, [sp, #44]	; 0x2c
 8003dfc:	940c      	str	r4, [sp, #48]	; 0x30
 8003dfe:	940d      	str	r4, [sp, #52]	; 0x34
 8003e00:	940e      	str	r4, [sp, #56]	; 0x38
 8003e02:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e04:	2220      	movs	r2, #32
 8003e06:	4621      	mov	r1, r4
 8003e08:	a801      	add	r0, sp, #4
 8003e0a:	f007 fcfc 	bl	800b806 <memset>
  htim1.Instance = TIM1;
 8003e0e:	482b      	ldr	r0, [pc, #172]	; (8003ebc <MX_TIM1_Init+0xd0>)
 8003e10:	4b2b      	ldr	r3, [pc, #172]	; (8003ec0 <MX_TIM1_Init+0xd4>)
 8003e12:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 42000-1;
 8003e14:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8003e18:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e1a:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 999;
 8003e1c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003e20:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003e22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e26:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e28:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e2a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e2c:	f003 ffe9 	bl	8007e02 <HAL_TIM_PWM_Init>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d136      	bne.n	8003ea2 <MX_TIM1_Init+0xb6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e34:	2300      	movs	r3, #0
 8003e36:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e38:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e3a:	a910      	add	r1, sp, #64	; 0x40
 8003e3c:	481f      	ldr	r0, [pc, #124]	; (8003ebc <MX_TIM1_Init+0xd0>)
 8003e3e:	f004 f8c9 	bl	8007fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8003e42:	2800      	cmp	r0, #0
 8003e44:	d12f      	bne.n	8003ea6 <MX_TIM1_Init+0xba>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e46:	2360      	movs	r3, #96	; 0x60
 8003e48:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e4e:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e50:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e52:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e54:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e56:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e58:	a909      	add	r1, sp, #36	; 0x24
 8003e5a:	4818      	ldr	r0, [pc, #96]	; (8003ebc <MX_TIM1_Init+0xd0>)
 8003e5c:	f004 f81c 	bl	8007e98 <HAL_TIM_PWM_ConfigChannel>
 8003e60:	bb18      	cbnz	r0, 8003eaa <MX_TIM1_Init+0xbe>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e62:	2204      	movs	r2, #4
 8003e64:	a909      	add	r1, sp, #36	; 0x24
 8003e66:	4815      	ldr	r0, [pc, #84]	; (8003ebc <MX_TIM1_Init+0xd0>)
 8003e68:	f004 f816 	bl	8007e98 <HAL_TIM_PWM_ConfigChannel>
 8003e6c:	b9f8      	cbnz	r0, 8003eae <MX_TIM1_Init+0xc2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e6e:	2208      	movs	r2, #8
 8003e70:	a909      	add	r1, sp, #36	; 0x24
 8003e72:	4812      	ldr	r0, [pc, #72]	; (8003ebc <MX_TIM1_Init+0xd0>)
 8003e74:	f004 f810 	bl	8007e98 <HAL_TIM_PWM_ConfigChannel>
 8003e78:	b9d8      	cbnz	r0, 8003eb2 <MX_TIM1_Init+0xc6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e7e:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e80:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e82:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e84:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e8a:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e8c:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e8e:	a901      	add	r1, sp, #4
 8003e90:	480a      	ldr	r0, [pc, #40]	; (8003ebc <MX_TIM1_Init+0xd0>)
 8003e92:	f004 f8db 	bl	800804c <HAL_TIMEx_ConfigBreakDeadTime>
 8003e96:	b970      	cbnz	r0, 8003eb6 <MX_TIM1_Init+0xca>
  HAL_TIM_MspPostInit(&htim1);
 8003e98:	4808      	ldr	r0, [pc, #32]	; (8003ebc <MX_TIM1_Init+0xd0>)
 8003e9a:	f000 fbcf 	bl	800463c <HAL_TIM_MspPostInit>
}
 8003e9e:	b012      	add	sp, #72	; 0x48
 8003ea0:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003ea2:	f7ff ff65 	bl	8003d70 <Error_Handler>
    Error_Handler();
 8003ea6:	f7ff ff63 	bl	8003d70 <Error_Handler>
    Error_Handler();
 8003eaa:	f7ff ff61 	bl	8003d70 <Error_Handler>
    Error_Handler();
 8003eae:	f7ff ff5f 	bl	8003d70 <Error_Handler>
    Error_Handler();
 8003eb2:	f7ff ff5d 	bl	8003d70 <Error_Handler>
    Error_Handler();
 8003eb6:	f7ff ff5b 	bl	8003d70 <Error_Handler>
 8003eba:	bf00      	nop
 8003ebc:	200031a8 	.word	0x200031a8
 8003ec0:	40010000 	.word	0x40010000

08003ec4 <MX_TIM3_Init>:
{
 8003ec4:	b500      	push	{lr}
 8003ec6:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9308      	str	r3, [sp, #32]
 8003ecc:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	9302      	str	r3, [sp, #8]
 8003ed2:	9303      	str	r3, [sp, #12]
 8003ed4:	9304      	str	r3, [sp, #16]
 8003ed6:	9305      	str	r3, [sp, #20]
 8003ed8:	9306      	str	r3, [sp, #24]
 8003eda:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 8003edc:	4820      	ldr	r0, [pc, #128]	; (8003f60 <MX_TIM3_Init+0x9c>)
 8003ede:	4a21      	ldr	r2, [pc, #132]	; (8003f64 <MX_TIM3_Init+0xa0>)
 8003ee0:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 42000 - 1;
 8003ee2:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8003ee6:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee8:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8003eea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003eee:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8003ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ef4:	6102      	str	r2, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ef6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003ef8:	f003 ff83 	bl	8007e02 <HAL_TIM_PWM_Init>
 8003efc:	bb28      	cbnz	r0, 8003f4a <MX_TIM3_Init+0x86>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f02:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f04:	a908      	add	r1, sp, #32
 8003f06:	4816      	ldr	r0, [pc, #88]	; (8003f60 <MX_TIM3_Init+0x9c>)
 8003f08:	f004 f864 	bl	8007fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8003f0c:	b9f8      	cbnz	r0, 8003f4e <MX_TIM3_Init+0x8a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f0e:	2360      	movs	r3, #96	; 0x60
 8003f10:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8003f12:	2200      	movs	r2, #0
 8003f14:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f16:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f18:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f1a:	a901      	add	r1, sp, #4
 8003f1c:	4810      	ldr	r0, [pc, #64]	; (8003f60 <MX_TIM3_Init+0x9c>)
 8003f1e:	f003 ffbb 	bl	8007e98 <HAL_TIM_PWM_ConfigChannel>
 8003f22:	b9b0      	cbnz	r0, 8003f52 <MX_TIM3_Init+0x8e>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f24:	2204      	movs	r2, #4
 8003f26:	eb0d 0102 	add.w	r1, sp, r2
 8003f2a:	480d      	ldr	r0, [pc, #52]	; (8003f60 <MX_TIM3_Init+0x9c>)
 8003f2c:	f003 ffb4 	bl	8007e98 <HAL_TIM_PWM_ConfigChannel>
 8003f30:	b988      	cbnz	r0, 8003f56 <MX_TIM3_Init+0x92>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f32:	2208      	movs	r2, #8
 8003f34:	a901      	add	r1, sp, #4
 8003f36:	480a      	ldr	r0, [pc, #40]	; (8003f60 <MX_TIM3_Init+0x9c>)
 8003f38:	f003 ffae 	bl	8007e98 <HAL_TIM_PWM_ConfigChannel>
 8003f3c:	b968      	cbnz	r0, 8003f5a <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8003f3e:	4808      	ldr	r0, [pc, #32]	; (8003f60 <MX_TIM3_Init+0x9c>)
 8003f40:	f000 fb7c 	bl	800463c <HAL_TIM_MspPostInit>
}
 8003f44:	b00b      	add	sp, #44	; 0x2c
 8003f46:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003f4a:	f7ff ff11 	bl	8003d70 <Error_Handler>
    Error_Handler();
 8003f4e:	f7ff ff0f 	bl	8003d70 <Error_Handler>
    Error_Handler();
 8003f52:	f7ff ff0d 	bl	8003d70 <Error_Handler>
    Error_Handler();
 8003f56:	f7ff ff0b 	bl	8003d70 <Error_Handler>
    Error_Handler();
 8003f5a:	f7ff ff09 	bl	8003d70 <Error_Handler>
 8003f5e:	bf00      	nop
 8003f60:	2000301c 	.word	0x2000301c
 8003f64:	40000400 	.word	0x40000400

08003f68 <MX_USART1_UART_Init>:
{
 8003f68:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8003f6a:	480a      	ldr	r0, [pc, #40]	; (8003f94 <MX_USART1_UART_Init+0x2c>)
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <MX_USART1_UART_Init+0x30>)
 8003f6e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003f70:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003f74:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f76:	2300      	movs	r3, #0
 8003f78:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f7a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f7c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f7e:	220c      	movs	r2, #12
 8003f80:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f82:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f84:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f86:	f004 fa14 	bl	80083b2 <HAL_UART_Init>
 8003f8a:	b900      	cbnz	r0, 8003f8e <MX_USART1_UART_Init+0x26>
}
 8003f8c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003f8e:	f7ff feef 	bl	8003d70 <Error_Handler>
 8003f92:	bf00      	nop
 8003f94:	20003104 	.word	0x20003104
 8003f98:	40011000 	.word	0x40011000

08003f9c <MX_USART2_UART_Init>:
{
 8003f9c:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8003f9e:	480a      	ldr	r0, [pc, #40]	; (8003fc8 <MX_USART2_UART_Init+0x2c>)
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <MX_USART2_UART_Init+0x30>)
 8003fa2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8003fa4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003fa8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003faa:	2300      	movs	r3, #0
 8003fac:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003fae:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003fb0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003fb2:	220c      	movs	r2, #12
 8003fb4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fb6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fb8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003fba:	f004 f9fa 	bl	80083b2 <HAL_UART_Init>
 8003fbe:	b900      	cbnz	r0, 8003fc2 <MX_USART2_UART_Init+0x26>
}
 8003fc0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003fc2:	f7ff fed5 	bl	8003d70 <Error_Handler>
 8003fc6:	bf00      	nop
 8003fc8:	200032c0 	.word	0x200032c0
 8003fcc:	40004400 	.word	0x40004400

08003fd0 <MX_USART6_UART_Init>:
{
 8003fd0:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 8003fd2:	480a      	ldr	r0, [pc, #40]	; (8003ffc <MX_USART6_UART_Init+0x2c>)
 8003fd4:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <MX_USART6_UART_Init+0x30>)
 8003fd6:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 19200;
 8003fd8:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8003fdc:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003fe2:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003fe4:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003fe6:	220c      	movs	r2, #12
 8003fe8:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fea:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fec:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003fee:	f004 f9e0 	bl	80083b2 <HAL_UART_Init>
 8003ff2:	b900      	cbnz	r0, 8003ff6 <MX_USART6_UART_Init+0x26>
}
 8003ff4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003ff6:	f7ff febb 	bl	8003d70 <Error_Handler>
 8003ffa:	bf00      	nop
 8003ffc:	200031e8 	.word	0x200031e8
 8004000:	40011400 	.word	0x40011400

08004004 <MX_TIM2_Init>:
{
 8004004:	b500      	push	{lr}
 8004006:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004008:	2300      	movs	r3, #0
 800400a:	9308      	str	r3, [sp, #32]
 800400c:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	9302      	str	r3, [sp, #8]
 8004012:	9303      	str	r3, [sp, #12]
 8004014:	9304      	str	r3, [sp, #16]
 8004016:	9305      	str	r3, [sp, #20]
 8004018:	9306      	str	r3, [sp, #24]
 800401a:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 800401c:	481d      	ldr	r0, [pc, #116]	; (8004094 <MX_TIM2_Init+0x90>)
 800401e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004022:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8004024:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004026:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 8004028:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800402a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800402c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800402e:	f003 fee8 	bl	8007e02 <HAL_TIM_PWM_Init>
 8004032:	bb28      	cbnz	r0, 8004080 <MX_TIM2_Init+0x7c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004034:	2300      	movs	r3, #0
 8004036:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004038:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800403a:	a908      	add	r1, sp, #32
 800403c:	4815      	ldr	r0, [pc, #84]	; (8004094 <MX_TIM2_Init+0x90>)
 800403e:	f003 ffc9 	bl	8007fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8004042:	b9f8      	cbnz	r0, 8004084 <MX_TIM2_Init+0x80>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004044:	2360      	movs	r3, #96	; 0x60
 8004046:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8004048:	2200      	movs	r2, #0
 800404a:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800404c:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800404e:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004050:	a901      	add	r1, sp, #4
 8004052:	4810      	ldr	r0, [pc, #64]	; (8004094 <MX_TIM2_Init+0x90>)
 8004054:	f003 ff20 	bl	8007e98 <HAL_TIM_PWM_ConfigChannel>
 8004058:	b9b0      	cbnz	r0, 8004088 <MX_TIM2_Init+0x84>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800405a:	2204      	movs	r2, #4
 800405c:	eb0d 0102 	add.w	r1, sp, r2
 8004060:	480c      	ldr	r0, [pc, #48]	; (8004094 <MX_TIM2_Init+0x90>)
 8004062:	f003 ff19 	bl	8007e98 <HAL_TIM_PWM_ConfigChannel>
 8004066:	b988      	cbnz	r0, 800408c <MX_TIM2_Init+0x88>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004068:	2208      	movs	r2, #8
 800406a:	a901      	add	r1, sp, #4
 800406c:	4809      	ldr	r0, [pc, #36]	; (8004094 <MX_TIM2_Init+0x90>)
 800406e:	f003 ff13 	bl	8007e98 <HAL_TIM_PWM_ConfigChannel>
 8004072:	b968      	cbnz	r0, 8004090 <MX_TIM2_Init+0x8c>
  HAL_TIM_MspPostInit(&htim2);
 8004074:	4807      	ldr	r0, [pc, #28]	; (8004094 <MX_TIM2_Init+0x90>)
 8004076:	f000 fae1 	bl	800463c <HAL_TIM_MspPostInit>
}
 800407a:	b00b      	add	sp, #44	; 0x2c
 800407c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004080:	f7ff fe76 	bl	8003d70 <Error_Handler>
    Error_Handler();
 8004084:	f7ff fe74 	bl	8003d70 <Error_Handler>
    Error_Handler();
 8004088:	f7ff fe72 	bl	8003d70 <Error_Handler>
    Error_Handler();
 800408c:	f7ff fe70 	bl	8003d70 <Error_Handler>
    Error_Handler();
 8004090:	f7ff fe6e 	bl	8003d70 <Error_Handler>
 8004094:	20003280 	.word	0x20003280

08004098 <MX_ADC1_Init>:
{
 8004098:	b500      	push	{lr}
 800409a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800409c:	2300      	movs	r3, #0
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	9302      	str	r3, [sp, #8]
 80040a4:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 80040a6:	4814      	ldr	r0, [pc, #80]	; (80040f8 <MX_ADC1_Init+0x60>)
 80040a8:	4a14      	ldr	r2, [pc, #80]	; (80040fc <MX_ADC1_Init+0x64>)
 80040aa:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80040ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040b0:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040b2:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80040b4:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80040b6:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040b8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040bc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040be:	4a10      	ldr	r2, [pc, #64]	; (8004100 <MX_ADC1_Init+0x68>)
 80040c0:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040c2:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 80040c4:	2201      	movs	r2, #1
 80040c6:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80040c8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040cc:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80040ce:	f001 f971 	bl	80053b4 <HAL_ADC_Init>
 80040d2:	b968      	cbnz	r0, 80040f0 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80040d4:	2312      	movs	r3, #18
 80040d6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80040d8:	2301      	movs	r3, #1
 80040da:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80040dc:	2300      	movs	r3, #0
 80040de:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040e0:	4669      	mov	r1, sp
 80040e2:	4805      	ldr	r0, [pc, #20]	; (80040f8 <MX_ADC1_Init+0x60>)
 80040e4:	f001 f992 	bl	800540c <HAL_ADC_ConfigChannel>
 80040e8:	b920      	cbnz	r0, 80040f4 <MX_ADC1_Init+0x5c>
}
 80040ea:	b005      	add	sp, #20
 80040ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80040f0:	f7ff fe3e 	bl	8003d70 <Error_Handler>
    Error_Handler();
 80040f4:	f7ff fe3c 	bl	8003d70 <Error_Handler>
 80040f8:	2000305c 	.word	0x2000305c
 80040fc:	40012000 	.word	0x40012000
 8004100:	0f000001 	.word	0x0f000001

08004104 <MX_RTC_Init>:
{
 8004104:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 8004106:	4809      	ldr	r0, [pc, #36]	; (800412c <MX_RTC_Init+0x28>)
 8004108:	4b09      	ldr	r3, [pc, #36]	; (8004130 <MX_RTC_Init+0x2c>)
 800410a:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800410c:	2300      	movs	r3, #0
 800410e:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004110:	227f      	movs	r2, #127	; 0x7f
 8004112:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8004114:	22ff      	movs	r2, #255	; 0xff
 8004116:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004118:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800411a:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800411c:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800411e:	f003 f858 	bl	80071d2 <HAL_RTC_Init>
 8004122:	b900      	cbnz	r0, 8004126 <MX_RTC_Init+0x22>
}
 8004124:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004126:	f7ff fe23 	bl	8003d70 <Error_Handler>
 800412a:	bf00      	nop
 800412c:	20003188 	.word	0x20003188
 8004130:	40002800 	.word	0x40002800

08004134 <MX_CRC_Init>:
{
 8004134:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8004136:	4804      	ldr	r0, [pc, #16]	; (8004148 <MX_CRC_Init+0x14>)
 8004138:	4b04      	ldr	r3, [pc, #16]	; (800414c <MX_CRC_Init+0x18>)
 800413a:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800413c:	f001 fa82 	bl	8005644 <HAL_CRC_Init>
 8004140:	b900      	cbnz	r0, 8004144 <MX_CRC_Init+0x10>
}
 8004142:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004144:	f7ff fe14 	bl	8003d70 <Error_Handler>
 8004148:	20003014 	.word	0x20003014
 800414c:	40023000 	.word	0x40023000

08004150 <MX_TIM11_Init>:
{
 8004150:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 8004152:	4808      	ldr	r0, [pc, #32]	; (8004174 <MX_TIM11_Init+0x24>)
 8004154:	4b08      	ldr	r3, [pc, #32]	; (8004178 <MX_TIM11_Init+0x28>)
 8004156:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800415c:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 8400 - 1;
 800415e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004162:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004164:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004166:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004168:	f003 fe32 	bl	8007dd0 <HAL_TIM_Base_Init>
 800416c:	b900      	cbnz	r0, 8004170 <MX_TIM11_Init+0x20>
}
 800416e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004170:	f7ff fdfe 	bl	8003d70 <Error_Handler>
 8004174:	20003144 	.word	0x20003144
 8004178:	40014800 	.word	0x40014800

0800417c <SystemClock_Config>:
{
 800417c:	b500      	push	{lr}
 800417e:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004180:	2230      	movs	r2, #48	; 0x30
 8004182:	2100      	movs	r1, #0
 8004184:	eb0d 0002 	add.w	r0, sp, r2
 8004188:	f007 fb3d 	bl	800b806 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800418c:	2300      	movs	r3, #0
 800418e:	9307      	str	r3, [sp, #28]
 8004190:	9308      	str	r3, [sp, #32]
 8004192:	9309      	str	r3, [sp, #36]	; 0x24
 8004194:	930a      	str	r3, [sp, #40]	; 0x28
 8004196:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004198:	9302      	str	r3, [sp, #8]
 800419a:	9303      	str	r3, [sp, #12]
 800419c:	9304      	str	r3, [sp, #16]
 800419e:	9305      	str	r3, [sp, #20]
 80041a0:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	4a27      	ldr	r2, [pc, #156]	; (8004244 <SystemClock_Config+0xc8>)
 80041a6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80041a8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80041ac:	6411      	str	r1, [r2, #64]	; 0x40
 80041ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041b0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80041b4:	9200      	str	r2, [sp, #0]
 80041b6:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	4a23      	ldr	r2, [pc, #140]	; (8004248 <SystemClock_Config+0xcc>)
 80041bc:	6813      	ldr	r3, [r2, #0]
 80041be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80041c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	6813      	ldr	r3, [r2, #0]
 80041ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80041d2:	2305      	movs	r3, #5
 80041d4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80041d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041da:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80041dc:	2301      	movs	r3, #1
 80041de:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041e0:	2302      	movs	r3, #2
 80041e2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80041e8:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80041ea:	2219      	movs	r2, #25
 80041ec:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80041ee:	22a8      	movs	r2, #168	; 0xa8
 80041f0:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80041f2:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80041f4:	2304      	movs	r3, #4
 80041f6:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041f8:	a80c      	add	r0, sp, #48	; 0x30
 80041fa:	f002 fbab 	bl	8006954 <HAL_RCC_OscConfig>
 80041fe:	b9d8      	cbnz	r0, 8004238 <SystemClock_Config+0xbc>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004200:	230f      	movs	r3, #15
 8004202:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004204:	2102      	movs	r1, #2
 8004206:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004208:	2300      	movs	r3, #0
 800420a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800420c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004210:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004212:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004214:	a807      	add	r0, sp, #28
 8004216:	f002 fde9 	bl	8006dec <HAL_RCC_ClockConfig>
 800421a:	b978      	cbnz	r0, 800423c <SystemClock_Config+0xc0>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800421c:	2302      	movs	r3, #2
 800421e:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004224:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004226:	a802      	add	r0, sp, #8
 8004228:	f002 fee8 	bl	8006ffc <HAL_RCCEx_PeriphCLKConfig>
 800422c:	b940      	cbnz	r0, 8004240 <SystemClock_Config+0xc4>
  HAL_RCC_EnableCSS();
 800422e:	f002 fd83 	bl	8006d38 <HAL_RCC_EnableCSS>
}
 8004232:	b019      	add	sp, #100	; 0x64
 8004234:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004238:	f7ff fd9a 	bl	8003d70 <Error_Handler>
    Error_Handler();
 800423c:	f7ff fd98 	bl	8003d70 <Error_Handler>
    Error_Handler();
 8004240:	f7ff fd96 	bl	8003d70 <Error_Handler>
 8004244:	40023800 	.word	0x40023800
 8004248:	40007000 	.word	0x40007000

0800424c <main>:
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b0b6      	sub	sp, #216	; 0xd8
  HAL_Init();
 8004250:	f000 ffea 	bl	8005228 <HAL_Init>
  SystemClock_Config();
 8004254:	f7ff ff92 	bl	800417c <SystemClock_Config>
  MX_GPIO_Init();
 8004258:	f7ff fc56 	bl	8003b08 <MX_GPIO_Init>
  MX_DMA_Init();
 800425c:	f7ff fcf8 	bl	8003c50 <MX_DMA_Init>
  MX_I2C1_Init();
 8004260:	f7ff fd88 	bl	8003d74 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004264:	f7ff fda2 	bl	8003dac <MX_SPI1_Init>
  MX_TIM1_Init();
 8004268:	f7ff fdc0 	bl	8003dec <MX_TIM1_Init>
  MX_TIM3_Init();
 800426c:	f7ff fe2a 	bl	8003ec4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004270:	f7ff fe7a 	bl	8003f68 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004274:	f7ff fe92 	bl	8003f9c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8004278:	f7ff feaa 	bl	8003fd0 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 800427c:	f7ff fec2 	bl	8004004 <MX_TIM2_Init>
  MX_ADC1_Init();
 8004280:	f7ff ff0a 	bl	8004098 <MX_ADC1_Init>
  MX_RTC_Init();
 8004284:	f7ff ff3e 	bl	8004104 <MX_RTC_Init>
  MX_CRC_Init();
 8004288:	f7ff ff54 	bl	8004134 <MX_CRC_Init>
  MX_TIM11_Init();
 800428c:	f7ff ff60 	bl	8004150 <MX_TIM11_Init>
  Config_Init(&hi2c1);
 8004290:	483f      	ldr	r0, [pc, #252]	; (8004390 <main+0x144>)
 8004292:	f7fd f851 	bl	8001338 <Config_Init>
  osMutexDef(SPIMutex);
 8004296:	2500      	movs	r5, #0
 8004298:	9534      	str	r5, [sp, #208]	; 0xd0
 800429a:	9535      	str	r5, [sp, #212]	; 0xd4
  SPIMutexHandle = osMutexCreate(osMutex(SPIMutex));
 800429c:	a834      	add	r0, sp, #208	; 0xd0
 800429e:	f004 fbbd 	bl	8008a1c <osMutexCreate>
 80042a2:	4b3c      	ldr	r3, [pc, #240]	; (8004394 <main+0x148>)
 80042a4:	6018      	str	r0, [r3, #0]
  osTimerDef(Config, ConfigSaveTmr);
 80042a6:	4b3c      	ldr	r3, [pc, #240]	; (8004398 <main+0x14c>)
 80042a8:	9332      	str	r3, [sp, #200]	; 0xc8
 80042aa:	9533      	str	r5, [sp, #204]	; 0xcc
  ConfigHandle = osTimerCreate(osTimer(Config), osTimerOnce, NULL);
 80042ac:	462a      	mov	r2, r5
 80042ae:	4629      	mov	r1, r5
 80042b0:	a832      	add	r0, sp, #200	; 0xc8
 80042b2:	f004 fb91 	bl	80089d8 <osTimerCreate>
 80042b6:	4b39      	ldr	r3, [pc, #228]	; (800439c <main+0x150>)
 80042b8:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80042ba:	4c39      	ldr	r4, [pc, #228]	; (80043a0 <main+0x154>)
 80042bc:	ae2b      	add	r6, sp, #172	; 0xac
 80042be:	4627      	mov	r7, r4
 80042c0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80042c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80042c4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80042c8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80042cc:	4629      	mov	r1, r5
 80042ce:	a82b      	add	r0, sp, #172	; 0xac
 80042d0:	f004 fb43 	bl	800895a <osThreadCreate>
 80042d4:	4b33      	ldr	r3, [pc, #204]	; (80043a4 <main+0x158>)
 80042d6:	6018      	str	r0, [r3, #0]
  osThreadDef(PowerRegulation, RegulationTask, osPriorityRealtime, 0, 256);
 80042d8:	ae24      	add	r6, sp, #144	; 0x90
 80042da:	f104 071c 	add.w	r7, r4, #28
 80042de:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80042e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80042e2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80042e6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  PowerRegulationHandle = osThreadCreate(osThread(PowerRegulation), NULL);
 80042ea:	4629      	mov	r1, r5
 80042ec:	a824      	add	r0, sp, #144	; 0x90
 80042ee:	f004 fb34 	bl	800895a <osThreadCreate>
 80042f2:	4b2d      	ldr	r3, [pc, #180]	; (80043a8 <main+0x15c>)
 80042f4:	6018      	str	r0, [r3, #0]
  osThreadDef(Diplays, DisplayTask, osPriorityNormal, 0, 256);
 80042f6:	ae1d      	add	r6, sp, #116	; 0x74
 80042f8:	f104 0738 	add.w	r7, r4, #56	; 0x38
 80042fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80042fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004300:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004304:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DiplaysHandle = osThreadCreate(osThread(Diplays), NULL);
 8004308:	4629      	mov	r1, r5
 800430a:	a81d      	add	r0, sp, #116	; 0x74
 800430c:	f004 fb25 	bl	800895a <osThreadCreate>
 8004310:	4b26      	ldr	r3, [pc, #152]	; (80043ac <main+0x160>)
 8004312:	6018      	str	r0, [r3, #0]
  osThreadDef(Test, TestTask, osPriorityLow, 0, 128);
 8004314:	ae16      	add	r6, sp, #88	; 0x58
 8004316:	f104 0754 	add.w	r7, r4, #84	; 0x54
 800431a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800431c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800431e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004322:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TestHandle = osThreadCreate(osThread(Test), NULL);
 8004326:	4629      	mov	r1, r5
 8004328:	a816      	add	r0, sp, #88	; 0x58
 800432a:	f004 fb16 	bl	800895a <osThreadCreate>
 800432e:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <main+0x164>)
 8004330:	6018      	str	r0, [r3, #0]
  osThreadDef(Ethernet, EthernetTask, osPriorityHigh, 0, 256);
 8004332:	ae0f      	add	r6, sp, #60	; 0x3c
 8004334:	f104 0770 	add.w	r7, r4, #112	; 0x70
 8004338:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800433a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800433c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004340:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  EthernetHandle = osThreadCreate(osThread(Ethernet), NULL);
 8004344:	4629      	mov	r1, r5
 8004346:	a80f      	add	r0, sp, #60	; 0x3c
 8004348:	f004 fb07 	bl	800895a <osThreadCreate>
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <main+0x168>)
 800434e:	6018      	str	r0, [r3, #0]
  osThreadDef(nRF24L01, RadioTask, osPriorityAboveNormal, 0, 256);
 8004350:	ae08      	add	r6, sp, #32
 8004352:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 8004356:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004358:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800435a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800435e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  nRF24L01Handle = osThreadCreate(osThread(nRF24L01), NULL);
 8004362:	4629      	mov	r1, r5
 8004364:	a808      	add	r0, sp, #32
 8004366:	f004 faf8 	bl	800895a <osThreadCreate>
 800436a:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <main+0x16c>)
 800436c:	6018      	str	r0, [r3, #0]
  osThreadDef(DataLog, DataLogTask, osPriorityBelowNormal, 0, 256);
 800436e:	ae01      	add	r6, sp, #4
 8004370:	34a8      	adds	r4, #168	; 0xa8
 8004372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004374:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004376:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800437a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DataLogHandle = osThreadCreate(osThread(DataLog), NULL);
 800437e:	4629      	mov	r1, r5
 8004380:	a801      	add	r0, sp, #4
 8004382:	f004 faea 	bl	800895a <osThreadCreate>
 8004386:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <main+0x170>)
 8004388:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800438a:	f004 fae1 	bl	8008950 <osKernelStart>
 800438e:	e7fe      	b.n	800438e <main+0x142>
 8004390:	20002fc0 	.word	0x20002fc0
 8004394:	20003304 	.word	0x20003304
 8004398:	08003b05 	.word	0x08003b05
 800439c:	20002fbc 	.word	0x20002fbc
 80043a0:	0800c078 	.word	0x0800c078
 80043a4:	20002ef4 	.word	0x20002ef4
 80043a8:	20002fb8 	.word	0x20002fb8
 80043ac:	20003300 	.word	0x20003300
 80043b0:	20003184 	.word	0x20003184
 80043b4:	2000330c 	.word	0x2000330c
 80043b8:	20002eec 	.word	0x20002eec
 80043bc:	20002ef0 	.word	0x20002ef0

080043c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043c0:	b500      	push	{lr}
 80043c2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c4:	2200      	movs	r2, #0
 80043c6:	9200      	str	r2, [sp, #0]
 80043c8:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <HAL_MspInit+0x40>)
 80043ca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80043cc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80043d0:	6459      	str	r1, [r3, #68]	; 0x44
 80043d2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80043d4:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80043d8:	9100      	str	r1, [sp, #0]
 80043da:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043dc:	9201      	str	r2, [sp, #4]
 80043de:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80043e0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80043e4:	6419      	str	r1, [r3, #64]	; 0x40
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80043f0:	210f      	movs	r1, #15
 80043f2:	f06f 0001 	mvn.w	r0, #1
 80043f6:	f001 f8e3 	bl	80055c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043fa:	b003      	add	sp, #12
 80043fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004400:	40023800 	.word	0x40023800

08004404 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8004404:	6802      	ldr	r2, [r0, #0]
 8004406:	4b09      	ldr	r3, [pc, #36]	; (800442c <HAL_ADC_MspInit+0x28>)
 8004408:	429a      	cmp	r2, r3
 800440a:	d000      	beq.n	800440e <HAL_ADC_MspInit+0xa>
 800440c:	4770      	bx	lr
{
 800440e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004410:	2300      	movs	r3, #0
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_ADC_MspInit+0x2c>)
 8004416:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800441c:	645a      	str	r2, [r3, #68]	; 0x44
 800441e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004428:	b002      	add	sp, #8
 800442a:	4770      	bx	lr
 800442c:	40012000 	.word	0x40012000
 8004430:	40023800 	.word	0x40023800

08004434 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8004434:	6802      	ldr	r2, [r0, #0]
 8004436:	4b09      	ldr	r3, [pc, #36]	; (800445c <HAL_CRC_MspInit+0x28>)
 8004438:	429a      	cmp	r2, r3
 800443a:	d000      	beq.n	800443e <HAL_CRC_MspInit+0xa>
 800443c:	4770      	bx	lr
{
 800443e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004440:	2300      	movs	r3, #0
 8004442:	9301      	str	r3, [sp, #4]
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_CRC_MspInit+0x2c>)
 8004446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004448:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004458:	b002      	add	sp, #8
 800445a:	4770      	bx	lr
 800445c:	40023000 	.word	0x40023000
 8004460:	40023800 	.word	0x40023800

08004464 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004464:	b530      	push	{r4, r5, lr}
 8004466:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004468:	2300      	movs	r3, #0
 800446a:	9303      	str	r3, [sp, #12]
 800446c:	9304      	str	r3, [sp, #16]
 800446e:	9305      	str	r3, [sp, #20]
 8004470:	9306      	str	r3, [sp, #24]
 8004472:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8004474:	6802      	ldr	r2, [r0, #0]
 8004476:	4b15      	ldr	r3, [pc, #84]	; (80044cc <HAL_I2C_MspInit+0x68>)
 8004478:	429a      	cmp	r2, r3
 800447a:	d001      	beq.n	8004480 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800447c:	b009      	add	sp, #36	; 0x24
 800447e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004480:	2500      	movs	r5, #0
 8004482:	9501      	str	r5, [sp, #4]
 8004484:	4c12      	ldr	r4, [pc, #72]	; (80044d0 <HAL_I2C_MspInit+0x6c>)
 8004486:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004488:	f043 0302 	orr.w	r3, r3, #2
 800448c:	6323      	str	r3, [r4, #48]	; 0x30
 800448e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	9301      	str	r3, [sp, #4]
 8004496:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004498:	f44f 7340 	mov.w	r3, #768	; 0x300
 800449c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800449e:	2312      	movs	r3, #18
 80044a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044a2:	2301      	movs	r3, #1
 80044a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a6:	2303      	movs	r3, #3
 80044a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044aa:	2304      	movs	r3, #4
 80044ac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ae:	a903      	add	r1, sp, #12
 80044b0:	4808      	ldr	r0, [pc, #32]	; (80044d4 <HAL_I2C_MspInit+0x70>)
 80044b2:	f001 fb53 	bl	8005b5c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044b6:	9502      	str	r5, [sp, #8]
 80044b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044be:	6423      	str	r3, [r4, #64]	; 0x40
 80044c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c6:	9302      	str	r3, [sp, #8]
 80044c8:	9b02      	ldr	r3, [sp, #8]
}
 80044ca:	e7d7      	b.n	800447c <HAL_I2C_MspInit+0x18>
 80044cc:	40005400 	.word	0x40005400
 80044d0:	40023800 	.word	0x40023800
 80044d4:	40020400 	.word	0x40020400

080044d8 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80044d8:	6802      	ldr	r2, [r0, #0]
 80044da:	4b04      	ldr	r3, [pc, #16]	; (80044ec <HAL_RTC_MspInit+0x14>)
 80044dc:	429a      	cmp	r2, r3
 80044de:	d000      	beq.n	80044e2 <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80044e0:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 80044e2:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <HAL_RTC_MspInit+0x18>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
}
 80044e8:	e7fa      	b.n	80044e0 <HAL_RTC_MspInit+0x8>
 80044ea:	bf00      	nop
 80044ec:	40002800 	.word	0x40002800
 80044f0:	42470e3c 	.word	0x42470e3c

080044f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044f4:	b500      	push	{lr}
 80044f6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f8:	2300      	movs	r3, #0
 80044fa:	9303      	str	r3, [sp, #12]
 80044fc:	9304      	str	r3, [sp, #16]
 80044fe:	9305      	str	r3, [sp, #20]
 8004500:	9306      	str	r3, [sp, #24]
 8004502:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8004504:	6802      	ldr	r2, [r0, #0]
 8004506:	4b15      	ldr	r3, [pc, #84]	; (800455c <HAL_SPI_MspInit+0x68>)
 8004508:	429a      	cmp	r2, r3
 800450a:	d002      	beq.n	8004512 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800450c:	b009      	add	sp, #36	; 0x24
 800450e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004512:	2100      	movs	r1, #0
 8004514:	9101      	str	r1, [sp, #4]
 8004516:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800451a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800451c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004520:	645a      	str	r2, [r3, #68]	; 0x44
 8004522:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004524:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004528:	9201      	str	r2, [sp, #4]
 800452a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800452c:	9102      	str	r1, [sp, #8]
 800452e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004530:	f042 0201 	orr.w	r2, r2, #1
 8004534:	631a      	str	r2, [r3, #48]	; 0x30
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	9302      	str	r3, [sp, #8]
 800453e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004540:	23e0      	movs	r3, #224	; 0xe0
 8004542:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004544:	2302      	movs	r3, #2
 8004546:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004548:	2303      	movs	r3, #3
 800454a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800454c:	2305      	movs	r3, #5
 800454e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004550:	a903      	add	r1, sp, #12
 8004552:	4803      	ldr	r0, [pc, #12]	; (8004560 <HAL_SPI_MspInit+0x6c>)
 8004554:	f001 fb02 	bl	8005b5c <HAL_GPIO_Init>
}
 8004558:	e7d8      	b.n	800450c <HAL_SPI_MspInit+0x18>
 800455a:	bf00      	nop
 800455c:	40013000 	.word	0x40013000
 8004560:	40020000 	.word	0x40020000

08004564 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004564:	b510      	push	{r4, lr}
 8004566:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 8004568:	6803      	ldr	r3, [r0, #0]
 800456a:	4a21      	ldr	r2, [pc, #132]	; (80045f0 <HAL_TIM_PWM_MspInit+0x8c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d007      	beq.n	8004580 <HAL_TIM_PWM_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 8004570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004574:	d021      	beq.n	80045ba <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 8004576:	4a1f      	ldr	r2, [pc, #124]	; (80045f4 <HAL_TIM_PWM_MspInit+0x90>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d02b      	beq.n	80045d4 <HAL_TIM_PWM_MspInit+0x70>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800457c:	b004      	add	sp, #16
 800457e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004580:	2400      	movs	r4, #0
 8004582:	9401      	str	r4, [sp, #4]
 8004584:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <HAL_TIM_PWM_MspInit+0x94>)
 8004586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004588:	f042 0201 	orr.w	r2, r2, #1
 800458c:	645a      	str	r2, [r3, #68]	; 0x44
 800458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004598:	4622      	mov	r2, r4
 800459a:	4621      	mov	r1, r4
 800459c:	2019      	movs	r0, #25
 800459e:	f001 f80f 	bl	80055c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80045a2:	2019      	movs	r0, #25
 80045a4:	f001 f840 	bl	8005628 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80045a8:	4622      	mov	r2, r4
 80045aa:	2105      	movs	r1, #5
 80045ac:	201a      	movs	r0, #26
 80045ae:	f001 f807 	bl	80055c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80045b2:	201a      	movs	r0, #26
 80045b4:	f001 f838 	bl	8005628 <HAL_NVIC_EnableIRQ>
 80045b8:	e7e0      	b.n	800457c <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	9302      	str	r3, [sp, #8]
 80045be:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <HAL_TIM_PWM_MspInit+0x94>)
 80045c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	9302      	str	r3, [sp, #8]
 80045d0:	9b02      	ldr	r3, [sp, #8]
 80045d2:	e7d3      	b.n	800457c <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045d4:	2300      	movs	r3, #0
 80045d6:	9303      	str	r3, [sp, #12]
 80045d8:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <HAL_TIM_PWM_MspInit+0x94>)
 80045da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045dc:	f042 0202 	orr.w	r2, r2, #2
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	9303      	str	r3, [sp, #12]
 80045ea:	9b03      	ldr	r3, [sp, #12]
}
 80045ec:	e7c6      	b.n	800457c <HAL_TIM_PWM_MspInit+0x18>
 80045ee:	bf00      	nop
 80045f0:	40010000 	.word	0x40010000
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40023800 	.word	0x40023800

080045fc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 80045fc:	6802      	ldr	r2, [r0, #0]
 80045fe:	4b0e      	ldr	r3, [pc, #56]	; (8004638 <HAL_TIM_Base_MspInit+0x3c>)
 8004600:	429a      	cmp	r2, r3
 8004602:	d000      	beq.n	8004606 <HAL_TIM_Base_MspInit+0xa>
 8004604:	4770      	bx	lr
{
 8004606:	b500      	push	{lr}
 8004608:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800460a:	2200      	movs	r2, #0
 800460c:	9201      	str	r2, [sp, #4]
 800460e:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8004612:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004614:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8004618:	6459      	str	r1, [r3, #68]	; 0x44
 800461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	9b01      	ldr	r3, [sp, #4]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8004624:	2105      	movs	r1, #5
 8004626:	201a      	movs	r0, #26
 8004628:	f000 ffca 	bl	80055c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800462c:	201a      	movs	r0, #26
 800462e:	f000 fffb 	bl	8005628 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004632:	b003      	add	sp, #12
 8004634:	f85d fb04 	ldr.w	pc, [sp], #4
 8004638:	40014800 	.word	0x40014800

0800463c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800463c:	b570      	push	{r4, r5, r6, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004640:	2300      	movs	r3, #0
 8004642:	9305      	str	r3, [sp, #20]
 8004644:	9306      	str	r3, [sp, #24]
 8004646:	9307      	str	r3, [sp, #28]
 8004648:	9308      	str	r3, [sp, #32]
 800464a:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim->Instance==TIM1)
 800464c:	6803      	ldr	r3, [r0, #0]
 800464e:	4a32      	ldr	r2, [pc, #200]	; (8004718 <HAL_TIM_MspPostInit+0xdc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d007      	beq.n	8004664 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004658:	d01c      	beq.n	8004694 <HAL_TIM_MspPostInit+0x58>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 800465a:	4a30      	ldr	r2, [pc, #192]	; (800471c <HAL_TIM_MspPostInit+0xe0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d045      	beq.n	80046ec <HAL_TIM_MspPostInit+0xb0>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004660:	b00a      	add	sp, #40	; 0x28
 8004662:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004664:	2300      	movs	r3, #0
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <HAL_TIM_MspPostInit+0xe4>)
 800466a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800466c:	f042 0201 	orr.w	r2, r2, #1
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	9301      	str	r3, [sp, #4]
 800467a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800467c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004680:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004682:	2302      	movs	r3, #2
 8004684:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004686:	2301      	movs	r3, #1
 8004688:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800468a:	a905      	add	r1, sp, #20
 800468c:	4825      	ldr	r0, [pc, #148]	; (8004724 <HAL_TIM_MspPostInit+0xe8>)
 800468e:	f001 fa65 	bl	8005b5c <HAL_GPIO_Init>
 8004692:	e7e5      	b.n	8004660 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004694:	2400      	movs	r4, #0
 8004696:	9402      	str	r4, [sp, #8]
 8004698:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800469c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
 80046a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a6:	f002 0201 	and.w	r2, r2, #1
 80046aa:	9202      	str	r2, [sp, #8]
 80046ac:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ae:	9403      	str	r4, [sp, #12]
 80046b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b2:	f042 0202 	orr.w	r2, r2, #2
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	9303      	str	r3, [sp, #12]
 80046c0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80046c2:	2501      	movs	r5, #1
 80046c4:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c6:	2602      	movs	r6, #2
 80046c8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046ca:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046cc:	a905      	add	r1, sp, #20
 80046ce:	4815      	ldr	r0, [pc, #84]	; (8004724 <HAL_TIM_MspPostInit+0xe8>)
 80046d0:	f001 fa44 	bl	8005b5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80046d4:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80046d8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046da:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046dc:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046de:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046e0:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046e2:	a905      	add	r1, sp, #20
 80046e4:	4810      	ldr	r0, [pc, #64]	; (8004728 <HAL_TIM_MspPostInit+0xec>)
 80046e6:	f001 fa39 	bl	8005b5c <HAL_GPIO_Init>
 80046ea:	e7b9      	b.n	8004660 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ec:	2300      	movs	r3, #0
 80046ee:	9304      	str	r3, [sp, #16]
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_TIM_MspPostInit+0xe4>)
 80046f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f4:	f042 0202 	orr.w	r2, r2, #2
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	9304      	str	r3, [sp, #16]
 8004702:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8004704:	2331      	movs	r3, #49	; 0x31
 8004706:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004708:	2302      	movs	r3, #2
 800470a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800470c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800470e:	a905      	add	r1, sp, #20
 8004710:	4805      	ldr	r0, [pc, #20]	; (8004728 <HAL_TIM_MspPostInit+0xec>)
 8004712:	f001 fa23 	bl	8005b5c <HAL_GPIO_Init>
}
 8004716:	e7a3      	b.n	8004660 <HAL_TIM_MspPostInit+0x24>
 8004718:	40010000 	.word	0x40010000
 800471c:	40000400 	.word	0x40000400
 8004720:	40023800 	.word	0x40023800
 8004724:	40020000 	.word	0x40020000
 8004728:	40020400 	.word	0x40020400

0800472c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800472c:	b530      	push	{r4, r5, lr}
 800472e:	b08d      	sub	sp, #52	; 0x34
 8004730:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004732:	2300      	movs	r3, #0
 8004734:	9307      	str	r3, [sp, #28]
 8004736:	9308      	str	r3, [sp, #32]
 8004738:	9309      	str	r3, [sp, #36]	; 0x24
 800473a:	930a      	str	r3, [sp, #40]	; 0x28
 800473c:	930b      	str	r3, [sp, #44]	; 0x2c
  if(huart->Instance==USART1)
 800473e:	6803      	ldr	r3, [r0, #0]
 8004740:	4a6e      	ldr	r2, [pc, #440]	; (80048fc <HAL_UART_MspInit+0x1d0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d008      	beq.n	8004758 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8004746:	4a6e      	ldr	r2, [pc, #440]	; (8004900 <HAL_UART_MspInit+0x1d4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d04b      	beq.n	80047e4 <HAL_UART_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 800474c:	4a6d      	ldr	r2, [pc, #436]	; (8004904 <HAL_UART_MspInit+0x1d8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	f000 808c 	beq.w	800486c <HAL_UART_MspInit+0x140>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004754:	b00d      	add	sp, #52	; 0x34
 8004756:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004758:	2500      	movs	r5, #0
 800475a:	9501      	str	r5, [sp, #4]
 800475c:	4b6a      	ldr	r3, [pc, #424]	; (8004908 <HAL_UART_MspInit+0x1dc>)
 800475e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004760:	f042 0210 	orr.w	r2, r2, #16
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
 8004766:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004768:	f002 0210 	and.w	r2, r2, #16
 800476c:	9201      	str	r2, [sp, #4]
 800476e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004770:	9502      	str	r5, [sp, #8]
 8004772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004774:	f042 0202 	orr.w	r2, r2, #2
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	9302      	str	r3, [sp, #8]
 8004782:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004784:	23c0      	movs	r3, #192	; 0xc0
 8004786:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004788:	2302      	movs	r3, #2
 800478a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800478c:	2303      	movs	r3, #3
 800478e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004790:	2307      	movs	r3, #7
 8004792:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004794:	a907      	add	r1, sp, #28
 8004796:	485d      	ldr	r0, [pc, #372]	; (800490c <HAL_UART_MspInit+0x1e0>)
 8004798:	f001 f9e0 	bl	8005b5c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800479c:	485c      	ldr	r0, [pc, #368]	; (8004910 <HAL_UART_MspInit+0x1e4>)
 800479e:	4b5d      	ldr	r3, [pc, #372]	; (8004914 <HAL_UART_MspInit+0x1e8>)
 80047a0:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80047a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047a6:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047a8:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047aa:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047b0:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047b2:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047b4:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80047b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047ba:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047bc:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047be:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80047c0:	f000 ffe4 	bl	800578c <HAL_DMA_Init>
 80047c4:	b958      	cbnz	r0, 80047de <HAL_UART_MspInit+0xb2>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80047c6:	4b52      	ldr	r3, [pc, #328]	; (8004910 <HAL_UART_MspInit+0x1e4>)
 80047c8:	6363      	str	r3, [r4, #52]	; 0x34
 80047ca:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80047cc:	2200      	movs	r2, #0
 80047ce:	2105      	movs	r1, #5
 80047d0:	2025      	movs	r0, #37	; 0x25
 80047d2:	f000 fef5 	bl	80055c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80047d6:	2025      	movs	r0, #37	; 0x25
 80047d8:	f000 ff26 	bl	8005628 <HAL_NVIC_EnableIRQ>
 80047dc:	e7ba      	b.n	8004754 <HAL_UART_MspInit+0x28>
      Error_Handler();
 80047de:	f7ff fac7 	bl	8003d70 <Error_Handler>
 80047e2:	e7f0      	b.n	80047c6 <HAL_UART_MspInit+0x9a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80047e4:	2500      	movs	r5, #0
 80047e6:	9503      	str	r5, [sp, #12]
 80047e8:	4b47      	ldr	r3, [pc, #284]	; (8004908 <HAL_UART_MspInit+0x1dc>)
 80047ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
 80047f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047f4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80047f8:	9203      	str	r2, [sp, #12]
 80047fa:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047fc:	9504      	str	r5, [sp, #16]
 80047fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	631a      	str	r2, [r3, #48]	; 0x30
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	9304      	str	r3, [sp, #16]
 800480e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004810:	230c      	movs	r3, #12
 8004812:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004814:	2302      	movs	r3, #2
 8004816:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004818:	2303      	movs	r3, #3
 800481a:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800481c:	2307      	movs	r3, #7
 800481e:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004820:	a907      	add	r1, sp, #28
 8004822:	483d      	ldr	r0, [pc, #244]	; (8004918 <HAL_UART_MspInit+0x1ec>)
 8004824:	f001 f99a 	bl	8005b5c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004828:	483c      	ldr	r0, [pc, #240]	; (800491c <HAL_UART_MspInit+0x1f0>)
 800482a:	4b3d      	ldr	r3, [pc, #244]	; (8004920 <HAL_UART_MspInit+0x1f4>)
 800482c:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800482e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004832:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004834:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004836:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800483c:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800483e:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004840:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004842:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004844:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004846:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004848:	f000 ffa0 	bl	800578c <HAL_DMA_Init>
 800484c:	b958      	cbnz	r0, 8004866 <HAL_UART_MspInit+0x13a>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800484e:	4b33      	ldr	r3, [pc, #204]	; (800491c <HAL_UART_MspInit+0x1f0>)
 8004850:	6363      	str	r3, [r4, #52]	; 0x34
 8004852:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004854:	2200      	movs	r2, #0
 8004856:	2105      	movs	r1, #5
 8004858:	2026      	movs	r0, #38	; 0x26
 800485a:	f000 feb1 	bl	80055c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800485e:	2026      	movs	r0, #38	; 0x26
 8004860:	f000 fee2 	bl	8005628 <HAL_NVIC_EnableIRQ>
 8004864:	e776      	b.n	8004754 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8004866:	f7ff fa83 	bl	8003d70 <Error_Handler>
 800486a:	e7f0      	b.n	800484e <HAL_UART_MspInit+0x122>
    __HAL_RCC_USART6_CLK_ENABLE();
 800486c:	2500      	movs	r5, #0
 800486e:	9505      	str	r5, [sp, #20]
 8004870:	4b25      	ldr	r3, [pc, #148]	; (8004908 <HAL_UART_MspInit+0x1dc>)
 8004872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004874:	f042 0220 	orr.w	r2, r2, #32
 8004878:	645a      	str	r2, [r3, #68]	; 0x44
 800487a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800487c:	f002 0220 	and.w	r2, r2, #32
 8004880:	9205      	str	r2, [sp, #20]
 8004882:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004884:	9506      	str	r5, [sp, #24]
 8004886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	9306      	str	r3, [sp, #24]
 8004896:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004898:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800489c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489e:	2302      	movs	r3, #2
 80048a0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048a2:	2303      	movs	r3, #3
 80048a4:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80048a6:	2308      	movs	r3, #8
 80048a8:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048aa:	a907      	add	r1, sp, #28
 80048ac:	481a      	ldr	r0, [pc, #104]	; (8004918 <HAL_UART_MspInit+0x1ec>)
 80048ae:	f001 f955 	bl	8005b5c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80048b2:	481c      	ldr	r0, [pc, #112]	; (8004924 <HAL_UART_MspInit+0x1f8>)
 80048b4:	4b1c      	ldr	r3, [pc, #112]	; (8004928 <HAL_UART_MspInit+0x1fc>)
 80048b6:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80048b8:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 80048bc:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048be:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048c0:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048c6:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048c8:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048ca:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80048cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048d0:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048d2:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048d4:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80048d6:	f000 ff59 	bl	800578c <HAL_DMA_Init>
 80048da:	b958      	cbnz	r0, 80048f4 <HAL_UART_MspInit+0x1c8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80048dc:	4b11      	ldr	r3, [pc, #68]	; (8004924 <HAL_UART_MspInit+0x1f8>)
 80048de:	6363      	str	r3, [r4, #52]	; 0x34
 80048e0:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80048e2:	2200      	movs	r2, #0
 80048e4:	2105      	movs	r1, #5
 80048e6:	2047      	movs	r0, #71	; 0x47
 80048e8:	f000 fe6a 	bl	80055c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80048ec:	2047      	movs	r0, #71	; 0x47
 80048ee:	f000 fe9b 	bl	8005628 <HAL_NVIC_EnableIRQ>
}
 80048f2:	e72f      	b.n	8004754 <HAL_UART_MspInit+0x28>
      Error_Handler();
 80048f4:	f7ff fa3c 	bl	8003d70 <Error_Handler>
 80048f8:	e7f0      	b.n	80048dc <HAL_UART_MspInit+0x1b0>
 80048fa:	bf00      	nop
 80048fc:	40011000 	.word	0x40011000
 8004900:	40004400 	.word	0x40004400
 8004904:	40011400 	.word	0x40011400
 8004908:	40023800 	.word	0x40023800
 800490c:	40020400 	.word	0x40020400
 8004910:	200030a4 	.word	0x200030a4
 8004914:	40026440 	.word	0x40026440
 8004918:	40020000 	.word	0x40020000
 800491c:	20002ef8 	.word	0x20002ef8
 8004920:	40026088 	.word	0x40026088
 8004924:	20002f58 	.word	0x20002f58
 8004928:	40026428 	.word	0x40026428

0800492c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800492c:	b510      	push	{r4, lr}
 800492e:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004930:	2200      	movs	r2, #0
 8004932:	4601      	mov	r1, r0
 8004934:	2019      	movs	r0, #25
 8004936:	f000 fe43 	bl	80055c0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800493a:	2019      	movs	r0, #25
 800493c:	f000 fe74 	bl	8005628 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8004940:	2400      	movs	r4, #0
 8004942:	9401      	str	r4, [sp, #4]
 8004944:	4b13      	ldr	r3, [pc, #76]	; (8004994 <HAL_InitTick+0x68>)
 8004946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004948:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800494c:	645a      	str	r2, [r3, #68]	; 0x44
 800494e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004958:	a902      	add	r1, sp, #8
 800495a:	a803      	add	r0, sp, #12
 800495c:	f002 fb1c 	bl	8006f98 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004960:	f002 fb0a 	bl	8006f78 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <HAL_InitTick+0x6c>)
 8004966:	fba3 2300 	umull	r2, r3, r3, r0
 800496a:	0c9b      	lsrs	r3, r3, #18
 800496c:	3b01      	subs	r3, #1
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800496e:	480b      	ldr	r0, [pc, #44]	; (800499c <HAL_InitTick+0x70>)
 8004970:	4a0b      	ldr	r2, [pc, #44]	; (80049a0 <HAL_InitTick+0x74>)
 8004972:	6002      	str	r2, [r0, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8004974:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004978:	60c2      	str	r2, [r0, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800497a:	6043      	str	r3, [r0, #4]
  htim10.Init.ClockDivision = 0;
 800497c:	6104      	str	r4, [r0, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800497e:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8004980:	f003 fa26 	bl	8007dd0 <HAL_TIM_Base_Init>
 8004984:	b110      	cbz	r0, 800498c <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004986:	2001      	movs	r0, #1
}
 8004988:	b008      	add	sp, #32
 800498a:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim10);
 800498c:	4803      	ldr	r0, [pc, #12]	; (800499c <HAL_InitTick+0x70>)
 800498e:	f003 f8ff 	bl	8007b90 <HAL_TIM_Base_Start_IT>
 8004992:	e7f9      	b.n	8004988 <HAL_InitTick+0x5c>
 8004994:	40023800 	.word	0x40023800
 8004998:	431bde83 	.word	0x431bde83
 800499c:	20003310 	.word	0x20003310
 80049a0:	40014400 	.word	0x40014400

080049a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80049a6:	f002 fb17 	bl	8006fd8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80049aa:	bd08      	pop	{r3, pc}

080049ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049ac:	e7fe      	b.n	80049ac <HardFault_Handler>

080049ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049ae:	e7fe      	b.n	80049ae <MemManage_Handler>

080049b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049b0:	e7fe      	b.n	80049b0 <BusFault_Handler>

080049b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049b2:	e7fe      	b.n	80049b2 <UsageFault_Handler>

080049b4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049b4:	4770      	bx	lr

080049b6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80049b6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80049b8:	2002      	movs	r0, #2
 80049ba:	f001 f9af 	bl	8005d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80049be:	bd08      	pop	{r3, pc}

080049c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80049c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80049c2:	4802      	ldr	r0, [pc, #8]	; (80049cc <DMA1_Stream5_IRQHandler+0xc>)
 80049c4:	f000 ffda 	bl	800597c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80049c8:	bd08      	pop	{r3, pc}
 80049ca:	bf00      	nop
 80049cc:	20002ef8 	.word	0x20002ef8

080049d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80049d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049d2:	4803      	ldr	r0, [pc, #12]	; (80049e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80049d4:	f003 f8f1 	bl	8007bba <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80049d8:	4802      	ldr	r0, [pc, #8]	; (80049e4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80049da:	f003 f8ee 	bl	8007bba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80049de:	bd08      	pop	{r3, pc}
 80049e0:	200031a8 	.word	0x200031a8
 80049e4:	20003310 	.word	0x20003310

080049e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80049e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049ea:	4803      	ldr	r0, [pc, #12]	; (80049f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80049ec:	f003 f8e5 	bl	8007bba <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80049f0:	4802      	ldr	r0, [pc, #8]	; (80049fc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80049f2:	f003 f8e2 	bl	8007bba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80049f6:	bd08      	pop	{r3, pc}
 80049f8:	200031a8 	.word	0x200031a8
 80049fc:	20003144 	.word	0x20003144

08004a00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_small_comm);
 8004a02:	4802      	ldr	r0, [pc, #8]	; (8004a0c <USART1_IRQHandler+0xc>)
 8004a04:	f7fe fff0 	bl	80039e8 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a08:	bd08      	pop	{r3, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20002bec 	.word	0x20002bec

08004a10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004a10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a12:	4802      	ldr	r0, [pc, #8]	; (8004a1c <USART2_IRQHandler+0xc>)
 8004a14:	f003 feba 	bl	800878c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a18:	bd08      	pop	{r3, pc}
 8004a1a:	bf00      	nop
 8004a1c:	200032c0 	.word	0x200032c0

08004a20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004a22:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004a26:	f001 f979 	bl	8005d1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004a2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a2e:	f001 f975 	bl	8005d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a32:	bd08      	pop	{r3, pc}

08004a34 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004a34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_big_comm);
 8004a36:	4802      	ldr	r0, [pc, #8]	; (8004a40 <DMA2_Stream1_IRQHandler+0xc>)
 8004a38:	f7fe ffec 	bl	8003a14 <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004a3c:	bd08      	pop	{r3, pc}
 8004a3e:	bf00      	nop
 8004a40:	20002b38 	.word	0x20002b38

08004a44 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004a44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_small_comm);
 8004a46:	4802      	ldr	r0, [pc, #8]	; (8004a50 <DMA2_Stream2_IRQHandler+0xc>)
 8004a48:	f7fe ffe4 	bl	8003a14 <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004a4c:	bd08      	pop	{r3, pc}
 8004a4e:	bf00      	nop
 8004a50:	20002bec 	.word	0x20002bec

08004a54 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004a54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_big_comm);
 8004a56:	4802      	ldr	r0, [pc, #8]	; (8004a60 <USART6_IRQHandler+0xc>)
 8004a58:	f7fe ffc6 	bl	80039e8 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004a5c:	bd08      	pop	{r3, pc}
 8004a5e:	bf00      	nop
 8004a60:	20002b38 	.word	0x20002b38

08004a64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004a64:	b508      	push	{r3, lr}
 8004a66:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004a68:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <_sbrk+0x34>)
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	b142      	cbz	r2, 8004a80 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8004a6e:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <_sbrk+0x34>)
 8004a70:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004a72:	4403      	add	r3, r0
 8004a74:	466a      	mov	r2, sp
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d806      	bhi.n	8004a88 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8004a7a:	4a07      	ldr	r2, [pc, #28]	; (8004a98 <_sbrk+0x34>)
 8004a7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8004a7e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8004a80:	4a05      	ldr	r2, [pc, #20]	; (8004a98 <_sbrk+0x34>)
 8004a82:	4906      	ldr	r1, [pc, #24]	; (8004a9c <_sbrk+0x38>)
 8004a84:	6011      	str	r1, [r2, #0]
 8004a86:	e7f2      	b.n	8004a6e <_sbrk+0xa>
		errno = ENOMEM;
 8004a88:	f006 fe88 	bl	800b79c <__errno>
 8004a8c:	230c      	movs	r3, #12
 8004a8e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a94:	e7f3      	b.n	8004a7e <_sbrk+0x1a>
 8004a96:	bf00      	nop
 8004a98:	20000834 	.word	0x20000834
 8004a9c:	200033e0 	.word	0x200033e0

08004aa0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <SystemInit+0x18>)
 8004aa2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004aa6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004aae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ab2:	609a      	str	r2, [r3, #8]
#endif
}
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8004abc:	b508      	push	{r3, lr}
	vTaskDelay(Time);
 8004abe:	f005 f823 	bl	8009b08 <vTaskDelay>
}
 8004ac2:	bd08      	pop	{r3, pc}

08004ac4 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8004ac4:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8004ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aca:	460a      	mov	r2, r1
 8004acc:	4601      	mov	r1, r0
 8004ace:	4802      	ldr	r0, [pc, #8]	; (8004ad8 <nRF24_SendSpi+0x14>)
 8004ad0:	6800      	ldr	r0, [r0, #0]
 8004ad2:	f002 fd43 	bl	800755c <HAL_SPI_Transmit>
}
 8004ad6:	bd08      	pop	{r3, pc}
 8004ad8:	20000844 	.word	0x20000844

08004adc <nRF24_WriteRegister>:

	NRF24_CSN_HIGH;
}

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8004adc:	b500      	push	{lr}
 8004ade:	b083      	sub	sp, #12
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8004ae0:	f040 0020 	orr.w	r0, r0, #32
 8004ae4:	f88d 0004 	strb.w	r0, [sp, #4]
	tmp[1] = val;
 8004ae8:	f88d 1005 	strb.w	r1, [sp, #5]

	NRF24_CSN_LOW;
 8004aec:	f7fe fbd6 	bl	800329c <NRF_ChipSelect>

	nRF24_SendSpi(tmp, 2);
 8004af0:	2102      	movs	r1, #2
 8004af2:	a801      	add	r0, sp, #4
 8004af4:	f7ff ffe6 	bl	8004ac4 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8004af8:	f7fe fbe2 	bl	80032c0 <NRF_ChipDeselect>
}
 8004afc:	b003      	add	sp, #12
 8004afe:	f85d fb04 	ldr.w	pc, [sp], #4

08004b02 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8004b02:	b570      	push	{r4, r5, r6, lr}
 8004b04:	b082      	sub	sp, #8
 8004b06:	460d      	mov	r5, r1
 8004b08:	4616      	mov	r6, r2
	reg = NRF24_CMD_W_REGISTER | reg;
 8004b0a:	f040 0020 	orr.w	r0, r0, #32
 8004b0e:	ac02      	add	r4, sp, #8
 8004b10:	f804 0d01 	strb.w	r0, [r4, #-1]!

	NRF24_CSN_LOW;
 8004b14:	f7fe fbc2 	bl	800329c <NRF_ChipSelect>

	nRF24_SendSpi(&reg, 1);
 8004b18:	2101      	movs	r1, #1
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f7ff ffd2 	bl	8004ac4 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8004b20:	4631      	mov	r1, r6
 8004b22:	4628      	mov	r0, r5
 8004b24:	f7ff ffce 	bl	8004ac4 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8004b28:	f7fe fbca 	bl	80032c0 <NRF_ChipDeselect>
}
 8004b2c:	b002      	add	sp, #8
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}

08004b30 <nRF24_ReadSpi>:
{
 8004b30:	b508      	push	{r3, lr}
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8004b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b36:	460a      	mov	r2, r1
 8004b38:	4601      	mov	r1, r0
 8004b3a:	4802      	ldr	r0, [pc, #8]	; (8004b44 <nRF24_ReadSpi+0x14>)
 8004b3c:	6800      	ldr	r0, [r0, #0]
 8004b3e:	f002 fef1 	bl	8007924 <HAL_SPI_Receive>
}
 8004b42:	bd08      	pop	{r3, pc}
 8004b44:	20000844 	.word	0x20000844

08004b48 <nRF24_ReadRegister>:
{
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	ac04      	add	r4, sp, #16
 8004b4e:	f804 0d09 	strb.w	r0, [r4, #-9]!
	NRF24_CSN_LOW;
 8004b52:	f7fe fba3 	bl	800329c <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 8004b56:	2101      	movs	r1, #1
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f7ff ffb3 	bl	8004ac4 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8004b5e:	2101      	movs	r1, #1
 8004b60:	f10d 000f 	add.w	r0, sp, #15
 8004b64:	f7ff ffe4 	bl	8004b30 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8004b68:	f7fe fbaa 	bl	80032c0 <NRF_ChipDeselect>
}
 8004b6c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8004b70:	b004      	add	sp, #16
 8004b72:	bd10      	pop	{r4, pc}

08004b74 <nRF24_ReadRegisters>:
{
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	460d      	mov	r5, r1
 8004b7a:	4616      	mov	r6, r2
 8004b7c:	ac02      	add	r4, sp, #8
 8004b7e:	f804 0d01 	strb.w	r0, [r4, #-1]!
	NRF24_CSN_LOW;
 8004b82:	f7fe fb8b 	bl	800329c <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 8004b86:	2101      	movs	r1, #1
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f7ff ff9b 	bl	8004ac4 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8004b8e:	4631      	mov	r1, r6
 8004b90:	4628      	mov	r0, r5
 8004b92:	f7ff ffcd 	bl	8004b30 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8004b96:	f7fe fb93 	bl	80032c0 <NRF_ChipDeselect>
}
 8004b9a:	b002      	add	sp, #8
 8004b9c:	bd70      	pop	{r4, r5, r6, pc}

08004b9e <nRF24_ReadConfig>:

	nRF24_Delay_ms(1);
}

uint8_t nRF24_ReadConfig(void)
{
 8004b9e:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	f7ff ffd1 	bl	8004b48 <nRF24_ReadRegister>
}
 8004ba6:	bd08      	pop	{r3, pc}

08004ba8 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8004ba8:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8004baa:	4601      	mov	r1, r0
 8004bac:	2000      	movs	r0, #0
 8004bae:	f7ff ff95 	bl	8004adc <nRF24_WriteRegister>
}
 8004bb2:	bd08      	pop	{r3, pc}

08004bb4 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8004bb4:	b510      	push	{r4, lr}
 8004bb6:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8004bb8:	2006      	movs	r0, #6
 8004bba:	f7ff ffc5 	bl	8004b48 <nRF24_ReadRegister>
	rf_setup &= 0xF8; // Clear PWR bits
 8004bbe:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	rf_setup |= (lev<<1);
 8004bc2:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8004bc6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8004bca:	2006      	movs	r0, #6
 8004bcc:	f7ff ff86 	bl	8004adc <nRF24_WriteRegister>
}
 8004bd0:	bd10      	pop	{r4, pc}

08004bd2 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8004bd2:	b510      	push	{r4, lr}
 8004bd4:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8004bd6:	2006      	movs	r0, #6
 8004bd8:	f7ff ffb6 	bl	8004b48 <nRF24_ReadRegister>
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8004bdc:	f000 01d7 	and.w	r1, r0, #215	; 0xd7
	if(dr == NRF24_RF_DR_250KBPS)
 8004be0:	2c02      	cmp	r4, #2
 8004be2:	d005      	beq.n	8004bf0 <nRF24_SetDataRate+0x1e>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
	else if(dr == NRF24_RF_DR_2MBPS)
 8004be4:	2c01      	cmp	r4, #1
 8004be6:	d006      	beq.n	8004bf6 <nRF24_SetDataRate+0x24>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8004be8:	2006      	movs	r0, #6
 8004bea:	f7ff ff77 	bl	8004adc <nRF24_WriteRegister>
}
 8004bee:	bd10      	pop	{r4, pc}
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8004bf0:	f041 0120 	orr.w	r1, r1, #32
 8004bf4:	e7f8      	b.n	8004be8 <nRF24_SetDataRate+0x16>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8004bf6:	f041 0108 	orr.w	r1, r1, #8
 8004bfa:	e7f5      	b.n	8004be8 <nRF24_SetDataRate+0x16>

08004bfc <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8004bfc:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_STATUS));
 8004bfe:	2007      	movs	r0, #7
 8004c00:	f7ff ffa2 	bl	8004b48 <nRF24_ReadRegister>
}
 8004c04:	bd08      	pop	{r3, pc}

08004c06 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8004c06:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_STATUS, st);
 8004c08:	4601      	mov	r1, r0
 8004c0a:	2007      	movs	r0, #7
 8004c0c:	f7ff ff66 	bl	8004adc <nRF24_WriteRegister>
}
 8004c10:	bd08      	pop	{r3, pc}

08004c12 <nRF24_ReadFifoStatus>:
//
// FIFO Status
//

uint8_t nRF24_ReadFifoStatus(void)
{
 8004c12:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 8004c14:	2017      	movs	r0, #23
 8004c16:	f7ff ff97 	bl	8004b48 <nRF24_ReadRegister>
}
 8004c1a:	bd08      	pop	{r3, pc}

08004c1c <nRF24_IsBitSetInFifoStatus>:
{
	nRF24_WriteRegister(NRF24_FIFO_STATUS, st);
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	4604      	mov	r4, r0
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8004c20:	f7ff fff7 	bl	8004c12 <nRF24_ReadFifoStatus>

	if(FifoStatus & (1<<Bit))
 8004c24:	4120      	asrs	r0, r4
 8004c26:	f010 0f01 	tst.w	r0, #1
 8004c2a:	d101      	bne.n	8004c30 <nRF24_IsBitSetInFifoStatus+0x14>
	{
		return 1;
	}

	return 0;
 8004c2c:	2000      	movs	r0, #0
}
 8004c2e:	bd10      	pop	{r4, pc}
		return 1;
 8004c30:	2001      	movs	r0, #1
 8004c32:	e7fc      	b.n	8004c2e <nRF24_IsBitSetInFifoStatus+0x12>

08004c34 <nRF24_IsRxEmpty>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_FULL);
}

uint8_t nRF24_IsRxEmpty(void)
{
 8004c34:	b508      	push	{r3, lr}
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
 8004c36:	2000      	movs	r0, #0
 8004c38:	f7ff fff0 	bl	8004c1c <nRF24_IsBitSetInFifoStatus>
}
 8004c3c:	bd08      	pop	{r3, pc}

08004c3e <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8004c3e:	b510      	push	{r4, lr}
 8004c40:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8004c42:	ac02      	add	r4, sp, #8
 8004c44:	23e2      	movs	r3, #226	; 0xe2
 8004c46:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8004c4a:	f7fe fb27 	bl	800329c <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8004c4e:	2101      	movs	r1, #1
 8004c50:	4620      	mov	r0, r4
 8004c52:	f7ff ff37 	bl	8004ac4 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8004c56:	f7fe fb33 	bl	80032c0 <NRF_ChipDeselect>
}
 8004c5a:	b002      	add	sp, #8
 8004c5c:	bd10      	pop	{r4, pc}

08004c5e <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8004c5e:	b510      	push	{r4, lr}
 8004c60:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8004c62:	ac02      	add	r4, sp, #8
 8004c64:	23e1      	movs	r3, #225	; 0xe1
 8004c66:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8004c6a:	f7fe fb17 	bl	800329c <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8004c6e:	2101      	movs	r1, #1
 8004c70:	4620      	mov	r0, r4
 8004c72:	f7ff ff27 	bl	8004ac4 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8004c76:	f7fe fb23 	bl	80032c0 <NRF_ChipDeselect>
}
 8004c7a:	b002      	add	sp, #8
 8004c7c:	bd10      	pop	{r4, pc}
	...

08004c80 <nRF24_TX_Mode>:
{
 8004c80:	b508      	push	{r3, lr}
	NRF24_CE_LOW;
 8004c82:	2200      	movs	r2, #0
 8004c84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c88:	480a      	ldr	r0, [pc, #40]	; (8004cb4 <nRF24_TX_Mode+0x34>)
 8004c8a:	f001 f840 	bl	8005d0e <HAL_GPIO_WritePin>
	uint8_t config = nRF24_ReadConfig();
 8004c8e:	f7ff ff86 	bl	8004b9e <nRF24_ReadConfig>
 8004c92:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	nRF24_WriteConfig(config);
 8004c96:	f040 0002 	orr.w	r0, r0, #2
 8004c9a:	f7ff ff85 	bl	8004ba8 <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8004c9e:	2070      	movs	r0, #112	; 0x70
 8004ca0:	f7ff ffb1 	bl	8004c06 <nRF24_WriteStatus>
	nRF24_FlushRX();
 8004ca4:	f7ff ffcb 	bl	8004c3e <nRF24_FlushRX>
	nRF24_FlushTX();
 8004ca8:	f7ff ffd9 	bl	8004c5e <nRF24_FlushTX>
	nRF24_Delay_ms(1);
 8004cac:	2001      	movs	r0, #1
 8004cae:	f7ff ff05 	bl	8004abc <nRF24_Delay_ms>
}
 8004cb2:	bd08      	pop	{r3, pc}
 8004cb4:	40020400 	.word	0x40020400

08004cb8 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004cbc:	f7ff ff6f 	bl	8004b9e <nRF24_ReadConfig>

	if(onoff)
 8004cc0:	b924      	cbnz	r4, 8004ccc <nRF24_EnableCRC+0x14>
		config |= (1<<NRF24_EN_CRC);
	else
		config &= ~(1<<NRF24_EN_CRC);
 8004cc2:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
	nRF24_WriteConfig(config);
 8004cc6:	f7ff ff6f 	bl	8004ba8 <nRF24_WriteConfig>
}
 8004cca:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_EN_CRC);
 8004ccc:	f040 0008 	orr.w	r0, r0, #8
 8004cd0:	b2c0      	uxtb	r0, r0
 8004cd2:	e7f8      	b.n	8004cc6 <nRF24_EnableCRC+0xe>

08004cd4 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8004cd4:	b510      	push	{r4, lr}
 8004cd6:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004cd8:	f7ff ff61 	bl	8004b9e <nRF24_ReadConfig>
	if(crcl == NRF24_CRC_WIDTH_2B)
 8004cdc:	2c01      	cmp	r4, #1
 8004cde:	d004      	beq.n	8004cea <nRF24_SetCRCLength+0x16>
		config |= (1<<NRF24_CRCO);
	else
		config &= ~(1<<NRF24_CRCO);
 8004ce0:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
	nRF24_WriteConfig(config);
 8004ce4:	f7ff ff60 	bl	8004ba8 <nRF24_WriteConfig>
}
 8004ce8:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_CRCO);
 8004cea:	f040 0004 	orr.w	r0, r0, #4
 8004cee:	b2c0      	uxtb	r0, r0
 8004cf0:	e7f8      	b.n	8004ce4 <nRF24_SetCRCLength+0x10>

08004cf2 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8004cf2:	b508      	push	{r3, lr}
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8004cf4:	f001 010f 	and.w	r1, r1, #15
 8004cf8:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8004cfc:	b2c9      	uxtb	r1, r1
 8004cfe:	2004      	movs	r0, #4
 8004d00:	f7ff feec 	bl	8004adc <nRF24_WriteRegister>
}
 8004d04:	bd08      	pop	{r3, pc}

08004d06 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8004d06:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8004d08:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8004d0c:	2005      	movs	r0, #5
 8004d0e:	f7ff fee5 	bl	8004adc <nRF24_WriteRegister>
}
 8004d12:	bd08      	pop	{r3, pc}

08004d14 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8004d14:	b538      	push	{r3, r4, r5, lr}
 8004d16:	4604      	mov	r4, r0
 8004d18:	460d      	mov	r5, r1
	if(pipe > 5)
 8004d1a:	2805      	cmp	r0, #5
 8004d1c:	d900      	bls.n	8004d20 <nRF24_EnablePipe+0xc>
		pipe = 5; // Block too high pipe number
 8004d1e:	2405      	movs	r4, #5
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8004d20:	2002      	movs	r0, #2
 8004d22:	f7ff ff11 	bl	8004b48 <nRF24_ReadRegister>
	if(onoff == 1)
 8004d26:	2d01      	cmp	r5, #1
 8004d28:	d008      	beq.n	8004d3c <nRF24_EnablePipe+0x28>
		enable_pipe |= (1<<pipe);
	else
		enable_pipe &= ~(1<<pipe);
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	40a1      	lsls	r1, r4
 8004d2e:	ea20 0101 	bic.w	r1, r0, r1
 8004d32:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8004d34:	2002      	movs	r0, #2
 8004d36:	f7ff fed1 	bl	8004adc <nRF24_WriteRegister>
}
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
		enable_pipe |= (1<<pipe);
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	40a1      	lsls	r1, r4
 8004d40:	4301      	orrs	r1, r0
 8004d42:	b2c9      	uxtb	r1, r1
 8004d44:	e7f6      	b.n	8004d34 <nRF24_EnablePipe+0x20>

08004d46 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8004d46:	b538      	push	{r3, r4, r5, lr}
 8004d48:	4604      	mov	r4, r0
 8004d4a:	460d      	mov	r5, r1
	if(pipe > 5)
 8004d4c:	2805      	cmp	r0, #5
 8004d4e:	d900      	bls.n	8004d52 <nRF24_AutoACK+0xc>
		pipe = 5; // Block too high pipe number
 8004d50:	2405      	movs	r4, #5
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8004d52:	2001      	movs	r0, #1
 8004d54:	f7ff fef8 	bl	8004b48 <nRF24_ReadRegister>
	if(onoff == 1)
 8004d58:	2d01      	cmp	r5, #1
 8004d5a:	d008      	beq.n	8004d6e <nRF24_AutoACK+0x28>
		enaa |= (1<<pipe);
	else
		enaa &= ~(1<<pipe);
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	40a1      	lsls	r1, r4
 8004d60:	ea20 0101 	bic.w	r1, r0, r1
 8004d64:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8004d66:	2001      	movs	r0, #1
 8004d68:	f7ff feb8 	bl	8004adc <nRF24_WriteRegister>
}
 8004d6c:	bd38      	pop	{r3, r4, r5, pc}
		enaa |= (1<<pipe);
 8004d6e:	2101      	movs	r1, #1
 8004d70:	40a1      	lsls	r1, r4
 8004d72:	4301      	orrs	r1, r0
 8004d74:	b2c9      	uxtb	r1, r1
 8004d76:	e7f6      	b.n	8004d66 <nRF24_AutoACK+0x20>

08004d78 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8004d78:	b508      	push	{r3, lr}
	if(size > 5)
 8004d7a:	2805      	cmp	r0, #5
 8004d7c:	d803      	bhi.n	8004d86 <nRF24_SetAddressWidth+0xe>
		size = 5; // Maximum are 5 bytes
	if(size < 3)
 8004d7e:	2802      	cmp	r0, #2
 8004d80:	d802      	bhi.n	8004d88 <nRF24_SetAddressWidth+0x10>
		size = 3; // Minimum are 3 bytes
 8004d82:	2003      	movs	r0, #3
 8004d84:	e000      	b.n	8004d88 <nRF24_SetAddressWidth+0x10>
		size = 5; // Maximum are 5 bytes
 8004d86:	2005      	movs	r0, #5
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8004d88:	1e81      	subs	r1, r0, #2
 8004d8a:	f001 0103 	and.w	r1, r1, #3
 8004d8e:	2003      	movs	r0, #3
 8004d90:	f7ff fea4 	bl	8004adc <nRF24_WriteRegister>
}
 8004d94:	bd08      	pop	{r3, pc}

08004d96 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8004d96:	b510      	push	{r4, lr}
 8004d98:	b082      	sub	sp, #8
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8004d9a:	2801      	cmp	r0, #1
 8004d9c:	d815      	bhi.n	8004dca <nRF24_SetRXAddress+0x34>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e009      	b.n	8004db6 <nRF24_SetRXAddress+0x20>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8004da2:	f1c3 0204 	rsb	r2, r3, #4
 8004da6:	5ccc      	ldrb	r4, [r1, r3]
 8004da8:	f10d 0c08 	add.w	ip, sp, #8
 8004dac:	4462      	add	r2, ip
 8004dae:	f802 4c08 	strb.w	r4, [r2, #-8]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004db2:	3301      	adds	r3, #1
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d9f3      	bls.n	8004da2 <nRF24_SetRXAddress+0xc>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8004dba:	300a      	adds	r0, #10
 8004dbc:	2205      	movs	r2, #5
 8004dbe:	4669      	mov	r1, sp
 8004dc0:	b2c0      	uxtb	r0, r0
 8004dc2:	f7ff fe9e 	bl	8004b02 <nRF24_WriteRegisters>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
}
 8004dc6:	b002      	add	sp, #8
 8004dc8:	bd10      	pop	{r4, pc}
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8004dca:	300a      	adds	r0, #10
 8004dcc:	7909      	ldrb	r1, [r1, #4]
 8004dce:	b2c0      	uxtb	r0, r0
 8004dd0:	f7ff fe84 	bl	8004adc <nRF24_WriteRegister>
}
 8004dd4:	e7f7      	b.n	8004dc6 <nRF24_SetRXAddress+0x30>
	...

08004dd8 <nRF24_RX_Mode>:
{
 8004dd8:	b510      	push	{r4, lr}
	uint8_t config = nRF24_ReadConfig();
 8004dda:	f7ff fee0 	bl	8004b9e <nRF24_ReadConfig>
 8004dde:	4604      	mov	r4, r0
	nRF24_SetRXAddress(0, addr_p0_backup);
 8004de0:	490c      	ldr	r1, [pc, #48]	; (8004e14 <nRF24_RX_Mode+0x3c>)
 8004de2:	2000      	movs	r0, #0
 8004de4:	f7ff ffd7 	bl	8004d96 <nRF24_SetRXAddress>
	config |= (1<<NRF24_PRIM_RX);
 8004de8:	f044 0003 	orr.w	r0, r4, #3
	nRF24_WriteConfig(config);
 8004dec:	b2c0      	uxtb	r0, r0
 8004dee:	f7ff fedb 	bl	8004ba8 <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8004df2:	2070      	movs	r0, #112	; 0x70
 8004df4:	f7ff ff07 	bl	8004c06 <nRF24_WriteStatus>
	nRF24_FlushRX();
 8004df8:	f7ff ff21 	bl	8004c3e <nRF24_FlushRX>
	nRF24_FlushTX();
 8004dfc:	f7ff ff2f 	bl	8004c5e <nRF24_FlushTX>
	NRF24_CE_HIGH;
 8004e00:	2201      	movs	r2, #1
 8004e02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e06:	4804      	ldr	r0, [pc, #16]	; (8004e18 <nRF24_RX_Mode+0x40>)
 8004e08:	f000 ff81 	bl	8005d0e <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	f7ff fe55 	bl	8004abc <nRF24_Delay_ms>
}
 8004e12:	bd10      	pop	{r4, pc}
 8004e14:	2000083c 	.word	0x2000083c
 8004e18:	40020400 	.word	0x40020400

08004e1c <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8004e1c:	b510      	push	{r4, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	4604      	mov	r4, r0
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8004e22:	2205      	movs	r2, #5
 8004e24:	4669      	mov	r1, sp
 8004e26:	200a      	movs	r0, #10
 8004e28:	f7ff fea4 	bl	8004b74 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e009      	b.n	8004e44 <nRF24_SetTXAddress+0x28>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8004e30:	f1c3 0204 	rsb	r2, r3, #4
 8004e34:	a902      	add	r1, sp, #8
 8004e36:	4419      	add	r1, r3
 8004e38:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8004e3c:	490f      	ldr	r1, [pc, #60]	; (8004e7c <nRF24_SetTXAddress+0x60>)
 8004e3e:	5488      	strb	r0, [r1, r2]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004e40:	3301      	adds	r3, #1
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d9f3      	bls.n	8004e30 <nRF24_SetTXAddress+0x14>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e008      	b.n	8004e5e <nRF24_SetTXAddress+0x42>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8004e4c:	f1c3 0204 	rsb	r2, r3, #4
 8004e50:	5ce1      	ldrb	r1, [r4, r3]
 8004e52:	a802      	add	r0, sp, #8
 8004e54:	4402      	add	r2, r0
 8004e56:	f802 1c08 	strb.w	r1, [r2, #-8]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d9f4      	bls.n	8004e4c <nRF24_SetTXAddress+0x30>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8004e62:	2205      	movs	r2, #5
 8004e64:	4669      	mov	r1, sp
 8004e66:	200a      	movs	r0, #10
 8004e68:	f7ff fe4b 	bl	8004b02 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8004e6c:	2205      	movs	r2, #5
 8004e6e:	4669      	mov	r1, sp
 8004e70:	2010      	movs	r0, #16
 8004e72:	f7ff fe46 	bl	8004b02 <nRF24_WriteRegisters>
}
 8004e76:	b002      	add	sp, #8
 8004e78:	bd10      	pop	{r4, pc}
 8004e7a:	bf00      	nop
 8004e7c:	2000083c 	.word	0x2000083c

08004e80 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8004e80:	b508      	push	{r3, lr}
	uint8_t status = nRF24_ReadStatus();
 8004e82:	f7ff febb 	bl	8004bfc <nRF24_ReadStatus>
	status |= (7<<4); // Clear bits 4, 5, 6.
 8004e86:	f040 0070 	orr.w	r0, r0, #112	; 0x70
	nRF24_WriteStatus(status);
 8004e8a:	b2c0      	uxtb	r0, r0
 8004e8c:	f7ff febb 	bl	8004c06 <nRF24_WriteStatus>
}
 8004e90:	bd08      	pop	{r3, pc}

08004e92 <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8004e92:	b508      	push	{r3, lr}
    uint8_t result = 0;

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8004e94:	2060      	movs	r0, #96	; 0x60
 8004e96:	f7ff fe57 	bl	8004b48 <nRF24_ReadRegister>

    if (result > 32) // Something went wrong :)
 8004e9a:	2820      	cmp	r0, #32
 8004e9c:	d800      	bhi.n	8004ea0 <nRF24_GetDynamicPayloadSize+0xe>
        nRF24_FlushRX();
        nRF24_Delay_ms(2);
        return 0;
    }
    return result;
}
 8004e9e:	bd08      	pop	{r3, pc}
        nRF24_FlushRX();
 8004ea0:	f7ff fecd 	bl	8004c3e <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8004ea4:	2002      	movs	r0, #2
 8004ea6:	f7ff fe09 	bl	8004abc <nRF24_Delay_ms>
        return 0;
 8004eaa:	2000      	movs	r0, #0
 8004eac:	e7f7      	b.n	8004e9e <nRF24_GetDynamicPayloadSize+0xc>

08004eae <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004eb2:	f7ff fe74 	bl	8004b9e <nRF24_ReadConfig>

	if(!onoff)
 8004eb6:	b124      	cbz	r4, 8004ec2 <nRF24_EnableRXDataReadyIRQ+0x14>
		config |= (1<<NRF24_RX_DR);
	else
		config &= ~(1<<NRF24_RX_DR);
 8004eb8:	f000 00bf 	and.w	r0, r0, #191	; 0xbf

	nRF24_WriteConfig(config);
 8004ebc:	f7ff fe74 	bl	8004ba8 <nRF24_WriteConfig>
}
 8004ec0:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_RX_DR);
 8004ec2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004ec6:	b2c0      	uxtb	r0, r0
 8004ec8:	e7f8      	b.n	8004ebc <nRF24_EnableRXDataReadyIRQ+0xe>

08004eca <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8004eca:	b510      	push	{r4, lr}
 8004ecc:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004ece:	f7ff fe66 	bl	8004b9e <nRF24_ReadConfig>

	if(!onoff)
 8004ed2:	b124      	cbz	r4, 8004ede <nRF24_EnableTXDataSentIRQ+0x14>
		config |= (1<<NRF24_TX_DS);
	else
		config &= ~(1<<NRF24_TX_DS);
 8004ed4:	f000 00df 	and.w	r0, r0, #223	; 0xdf

	nRF24_WriteConfig(config);
 8004ed8:	f7ff fe66 	bl	8004ba8 <nRF24_WriteConfig>
}
 8004edc:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_TX_DS);
 8004ede:	f040 0020 	orr.w	r0, r0, #32
 8004ee2:	b2c0      	uxtb	r0, r0
 8004ee4:	e7f8      	b.n	8004ed8 <nRF24_EnableTXDataSentIRQ+0xe>

08004ee6 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8004ee6:	b510      	push	{r4, lr}
 8004ee8:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8004eea:	f7ff fe58 	bl	8004b9e <nRF24_ReadConfig>

	if(!onoff)
 8004eee:	b124      	cbz	r4, 8004efa <nRF24_EnableMaxRetransmitIRQ+0x14>
		config |= (1<<NRF24_MAX_RT);
	else
		config &= ~(1<<NRF24_MAX_RT);
 8004ef0:	f000 00ef 	and.w	r0, r0, #239	; 0xef

	nRF24_WriteConfig(config);
 8004ef4:	f7ff fe58 	bl	8004ba8 <nRF24_WriteConfig>
}
 8004ef8:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_MAX_RT);
 8004efa:	f040 0010 	orr.w	r0, r0, #16
 8004efe:	b2c0      	uxtb	r0, r0
 8004f00:	e7f8      	b.n	8004ef4 <nRF24_EnableMaxRetransmitIRQ+0xe>

08004f02 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8004f02:	b508      	push	{r3, lr}
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8004f04:	460a      	mov	r2, r1
 8004f06:	4601      	mov	r1, r0
 8004f08:	20a0      	movs	r0, #160	; 0xa0
 8004f0a:	f7ff fdfa 	bl	8004b02 <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 8004f0e:	bd08      	pop	{r3, pc}

08004f10 <nRF24_ReadRXPaylaod>:
		status = nRF24_ReadStatus();
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4604      	mov	r4, r0
 8004f14:	460d      	mov	r5, r1
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8004f16:	f7ff ffbc 	bl	8004e92 <nRF24_GetDynamicPayloadSize>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	7028      	strb	r0, [r5, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8004f1e:	4621      	mov	r1, r4
 8004f20:	2061      	movs	r0, #97	; 0x61
 8004f22:	f7ff fe27 	bl	8004b74 <nRF24_ReadRegisters>
#else
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 8004f26:	2101      	movs	r1, #1
 8004f28:	2007      	movs	r0, #7
 8004f2a:	f7ff fdd7 	bl	8004adc <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 8004f2e:	f7ff fe65 	bl	8004bfc <nRF24_ReadStatus>
 8004f32:	f010 0f20 	tst.w	r0, #32
 8004f36:	d100      	bne.n	8004f3a <nRF24_ReadRXPaylaod+0x2a>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8004f38:	bd38      	pop	{r3, r4, r5, pc}
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8004f3a:	2120      	movs	r1, #32
 8004f3c:	2007      	movs	r0, #7
 8004f3e:	f7ff fdcd 	bl	8004adc <nRF24_WriteRegister>
}
 8004f42:	e7f9      	b.n	8004f38 <nRF24_ReadRXPaylaod+0x28>

08004f44 <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
	if(Size > 32)
 8004f44:	2920      	cmp	r1, #32
 8004f46:	d901      	bls.n	8004f4c <nRF24_SendPacket+0x8>
		return NRF24_NO_TRANSMITTED_PACKET;
 8004f48:	2001      	movs	r0, #1
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_WaitTX();
#endif

	return NRF24_TRANSMITTED_PACKET;
}
 8004f4a:	4770      	bx	lr
{
 8004f4c:	b508      	push	{r3, lr}
	nRF24_WriteTXPayload(Data, Size);
 8004f4e:	f7ff ffd8 	bl	8004f02 <nRF24_WriteTXPayload>
	return NRF24_TRANSMITTED_PACKET;
 8004f52:	2000      	movs	r0, #0
}
 8004f54:	bd08      	pop	{r3, pc}
	...

08004f58 <nRF24_IsSomtehingToSend>:
{
	return RB_ElementsAvailable(&RXBuffer)?1:0;
}

uint8_t nRF24_IsSomtehingToSend(void)
{
 8004f58:	b508      	push	{r3, lr}
	return RB_ElementsAvailable(&TXBuffer)?1:0;
 8004f5a:	4803      	ldr	r0, [pc, #12]	; (8004f68 <nRF24_IsSomtehingToSend+0x10>)
 8004f5c:	f7fd fb55 	bl	800260a <RB_ElementsAvailable>
}
 8004f60:	3000      	adds	r0, #0
 8004f62:	bf18      	it	ne
 8004f64:	2001      	movne	r0, #1
 8004f66:	bd08      	pop	{r3, pc}
 8004f68:	20003350 	.word	0x20003350

08004f6c <nRF24_ReceivePacket>:
	return nRF24_IsSomtehingToRead();
#endif
}

nRF24_RX_Status nRF24_ReceivePacket(uint8_t* Data, uint8_t *Size)
{
 8004f6c:	b508      	push	{r3, lr}
#if (NRF24_USE_INTERRUPT == 0)
	if(nRF24_RXAvailable())
	{
#endif
		nRF24_ReadRXPaylaod(Data, Size);
 8004f6e:	f7ff ffcf 	bl	8004f10 <nRF24_ReadRXPaylaod>
#if (NRF24_USE_INTERRUPT == 0)
	}
	return NRF24_NO_RECEIVED_PACKET;
#endif

}
 8004f72:	2000      	movs	r0, #0
 8004f74:	bd08      	pop	{r3, pc}
	...

08004f78 <nRF24_CheckTXAndSend>:
	return NRF24_TRANSMITTED_PACKET;
#endif
}
#if (NRF24_USE_RINGBUFFER == 1)
void nRF24_CheckTXAndSend(void)
{
 8004f78:	b530      	push	{r4, r5, lr}
 8004f7a:	b089      	sub	sp, #36	; 0x24
	uint8_t i, DataCounter;
	uint8_t TXPacket[32];

	if(nRF24_IsSomtehingToSend() && Nrf24TXFreeFlag)
 8004f7c:	f7ff ffec 	bl	8004f58 <nRF24_IsSomtehingToSend>
 8004f80:	b110      	cbz	r0, 8004f88 <nRF24_CheckTXAndSend+0x10>
 8004f82:	4b19      	ldr	r3, [pc, #100]	; (8004fe8 <nRF24_CheckTXAndSend+0x70>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	b91b      	cbnz	r3, 8004f90 <nRF24_CheckTXAndSend+0x18>
		nRF24_SendPacket(TXPacket, DataCounter);
		NRF24_CE_HIGH;
		nRF24_Delay_ms(1);
		NRF24_CE_LOW;
	}else{
		nRF24_RX_Mode();
 8004f88:	f7ff ff26 	bl	8004dd8 <nRF24_RX_Mode>
	}
}
 8004f8c:	b009      	add	sp, #36	; 0x24
 8004f8e:	bd30      	pop	{r4, r5, pc}
		nRF24_TX_Mode();
 8004f90:	f7ff fe76 	bl	8004c80 <nRF24_TX_Mode>
		Nrf24TXFreeFlag = 0;
 8004f94:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <nRF24_CheckTXAndSend+0x70>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]
		DataCounter = RB_ElementsAvailable(&TXBuffer);
 8004f9a:	4814      	ldr	r0, [pc, #80]	; (8004fec <nRF24_CheckTXAndSend+0x74>)
 8004f9c:	f7fd fb35 	bl	800260a <RB_ElementsAvailable>
 8004fa0:	4605      	mov	r5, r0
		if(DataCounter > 32)
 8004fa2:	2820      	cmp	r0, #32
 8004fa4:	d900      	bls.n	8004fa8 <nRF24_CheckTXAndSend+0x30>
			DataCounter = 32; // Max Payload
 8004fa6:	2520      	movs	r5, #32
		for(i = 0; i < DataCounter; i++)
 8004fa8:	2400      	movs	r4, #0
 8004faa:	e006      	b.n	8004fba <nRF24_CheckTXAndSend+0x42>
			RB_ReadFromBuffer(&TXBuffer, &TXPacket[i]);
 8004fac:	eb0d 0104 	add.w	r1, sp, r4
 8004fb0:	480e      	ldr	r0, [pc, #56]	; (8004fec <nRF24_CheckTXAndSend+0x74>)
 8004fb2:	f7fd fb13 	bl	80025dc <RB_ReadFromBuffer>
		for(i = 0; i < DataCounter; i++)
 8004fb6:	3401      	adds	r4, #1
 8004fb8:	b2e4      	uxtb	r4, r4
 8004fba:	42ac      	cmp	r4, r5
 8004fbc:	d3f6      	bcc.n	8004fac <nRF24_CheckTXAndSend+0x34>
		nRF24_SendPacket(TXPacket, DataCounter);
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	4668      	mov	r0, sp
 8004fc2:	f7ff ffbf 	bl	8004f44 <nRF24_SendPacket>
		NRF24_CE_HIGH;
 8004fc6:	4c0a      	ldr	r4, [pc, #40]	; (8004ff0 <nRF24_CheckTXAndSend+0x78>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f000 fe9d 	bl	8005d0e <HAL_GPIO_WritePin>
		nRF24_Delay_ms(1);
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	f7ff fd71 	bl	8004abc <nRF24_Delay_ms>
		NRF24_CE_LOW;
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f000 fe94 	bl	8005d0e <HAL_GPIO_WritePin>
 8004fe6:	e7d1      	b.n	8004f8c <nRF24_CheckTXAndSend+0x14>
 8004fe8:	20000839 	.word	0x20000839
 8004fec:	20003350 	.word	0x20003350
 8004ff0:	40020400 	.word	0x40020400

08004ff4 <nRF24_ReceiveData>:
#endif
#if (NRF24_USE_INTERRUPT == 1)
void nRF24_ReceiveData(void)
{
 8004ff4:	b510      	push	{r4, lr}
 8004ff6:	b08a      	sub	sp, #40	; 0x28
 8004ff8:	e00f      	b.n	800501a <nRF24_ReceiveData+0x26>
	{
		nRF24_ReceivePacket(RXPacket, &DataCounter);

		for(i = 0; i < DataCounter; i++)
		{
			RB_WriteToBuffer(&RXBuffer, RXPacket[i]);
 8004ffa:	ab0a      	add	r3, sp, #40	; 0x28
 8004ffc:	4423      	add	r3, r4
 8004ffe:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 8005002:	480a      	ldr	r0, [pc, #40]	; (800502c <nRF24_ReceiveData+0x38>)
 8005004:	f7fd facd 	bl	80025a2 <RB_WriteToBuffer>
		for(i = 0; i < DataCounter; i++)
 8005008:	3401      	adds	r4, #1
 800500a:	b2e4      	uxtb	r4, r4
 800500c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8005010:	42a3      	cmp	r3, r4
 8005012:	d8f2      	bhi.n	8004ffa <nRF24_ReceiveData+0x6>
		}

	}while(!nRF24_IsRxEmpty());
 8005014:	f7ff fe0e 	bl	8004c34 <nRF24_IsRxEmpty>
 8005018:	b930      	cbnz	r0, 8005028 <nRF24_ReceiveData+0x34>
		nRF24_ReceivePacket(RXPacket, &DataCounter);
 800501a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 800501e:	a801      	add	r0, sp, #4
 8005020:	f7ff ffa4 	bl	8004f6c <nRF24_ReceivePacket>
		for(i = 0; i < DataCounter; i++)
 8005024:	2400      	movs	r4, #0
 8005026:	e7f1      	b.n	800500c <nRF24_ReceiveData+0x18>
#endif
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_ReceivePacket(RXBuffer, &RXDataCounter);
#endif
}
 8005028:	b00a      	add	sp, #40	; 0x28
 800502a:	bd10      	pop	{r4, pc}
 800502c:	20003374 	.word	0x20003374

08005030 <nRF24_IRQ_Read>:
{
	Nrf24InterruptFlag = 1;
}

void nRF24_IRQ_Read(void)
{
 8005030:	b508      	push	{r3, lr}
	if(Nrf24InterruptFlag == 1)
 8005032:	4b14      	ldr	r3, [pc, #80]	; (8005084 <nRF24_IRQ_Read+0x54>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	d000      	beq.n	800503e <nRF24_IRQ_Read+0xe>
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
		}

		nRF24_WriteStatus(ClearIrq);
	}
}
 800503c:	bd08      	pop	{r3, pc}
		Nrf24InterruptFlag = 0;
 800503e:	4b11      	ldr	r3, [pc, #68]	; (8005084 <nRF24_IRQ_Read+0x54>)
 8005040:	2200      	movs	r2, #0
 8005042:	701a      	strb	r2, [r3, #0]
		uint8_t status = nRF24_ReadStatus();
 8005044:	f7ff fdda 	bl	8004bfc <nRF24_ReadStatus>
 8005048:	4603      	mov	r3, r0
		if ((status & (1 << NRF24_RX_DR)))
 800504a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800504e:	d016      	beq.n	800507e <nRF24_IRQ_Read+0x4e>
			nrf24_rx_flag = 1;
 8005050:	4a0d      	ldr	r2, [pc, #52]	; (8005088 <nRF24_IRQ_Read+0x58>)
 8005052:	2101      	movs	r1, #1
 8005054:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8005056:	2040      	movs	r0, #64	; 0x40
		if ((status & (1 << NRF24_TX_DS)))
 8005058:	f013 0f20 	tst.w	r3, #32
 800505c:	d004      	beq.n	8005068 <nRF24_IRQ_Read+0x38>
			nrf24_tx_flag = 1;
 800505e:	4a0b      	ldr	r2, [pc, #44]	; (800508c <nRF24_IRQ_Read+0x5c>)
 8005060:	2101      	movs	r1, #1
 8005062:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8005064:	f040 0020 	orr.w	r0, r0, #32
		if ((status & (1 << NRF24_MAX_RT)))
 8005068:	f013 0f10 	tst.w	r3, #16
 800506c:	d004      	beq.n	8005078 <nRF24_IRQ_Read+0x48>
			nrf24_mr_flag = 1;
 800506e:	4b08      	ldr	r3, [pc, #32]	; (8005090 <nRF24_IRQ_Read+0x60>)
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 8005074:	f040 0010 	orr.w	r0, r0, #16
		nRF24_WriteStatus(ClearIrq);
 8005078:	f7ff fdc5 	bl	8004c06 <nRF24_WriteStatus>
}
 800507c:	e7de      	b.n	800503c <nRF24_IRQ_Read+0xc>
		uint8_t ClearIrq = 0;
 800507e:	2000      	movs	r0, #0
 8005080:	e7ea      	b.n	8005058 <nRF24_IRQ_Read+0x28>
 8005082:	bf00      	nop
 8005084:	20000838 	.word	0x20000838
 8005088:	20000849 	.word	0x20000849
 800508c:	2000084a 	.word	0x2000084a
 8005090:	20000848 	.word	0x20000848

08005094 <nRF24_EventRxCallback>:
//

__weak void nRF24_EventRxCallback(void)
{

}
 8005094:	4770      	bx	lr

08005096 <nRF24_EventTxCallback>:

__weak void nRF24_EventTxCallback(void)
{

}
 8005096:	4770      	bx	lr

08005098 <nRF24_EventMrCallback>:

__weak void nRF24_EventMrCallback(void)
{

}
 8005098:	4770      	bx	lr
	...

0800509c <nRF24_Event>:

void nRF24_Event(void)
{
 800509c:	b508      	push	{r3, lr}
	nRF24_IRQ_Read(); // Check if there was any interrupt
 800509e:	f7ff ffc7 	bl	8005030 <nRF24_IRQ_Read>

#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_CheckTXAndSend();
 80050a2:	f7ff ff69 	bl	8004f78 <nRF24_CheckTXAndSend>
#endif

	if(nrf24_rx_flag)
 80050a6:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <nRF24_Event+0x4c>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b933      	cbnz	r3, 80050ba <nRF24_Event+0x1e>
#endif
		nRF24_EventRxCallback();
		nrf24_rx_flag = 0;
	}

	if(nrf24_tx_flag)
 80050ac:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <nRF24_Event+0x50>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	b95b      	cbnz	r3, 80050ca <nRF24_Event+0x2e>
#endif
		nRF24_EventTxCallback();
		nrf24_tx_flag = 0;
	}

	if(nrf24_mr_flag)
 80050b2:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <nRF24_Event+0x54>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	b98b      	cbnz	r3, 80050dc <nRF24_Event+0x40>
	{
		nRF24_EventMrCallback();
		nrf24_mr_flag = 0;
	}
}
 80050b8:	bd08      	pop	{r3, pc}
		nRF24_ReceiveData();
 80050ba:	f7ff ff9b 	bl	8004ff4 <nRF24_ReceiveData>
		nRF24_EventRxCallback();
 80050be:	f7ff ffe9 	bl	8005094 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 80050c2:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <nRF24_Event+0x4c>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	e7f0      	b.n	80050ac <nRF24_Event+0x10>
		Nrf24TXFreeFlag = 1;
 80050ca:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <nRF24_Event+0x58>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	701a      	strb	r2, [r3, #0]
		nRF24_EventTxCallback();
 80050d0:	f7ff ffe1 	bl	8005096 <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 80050d4:	4b05      	ldr	r3, [pc, #20]	; (80050ec <nRF24_Event+0x50>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	e7ea      	b.n	80050b2 <nRF24_Event+0x16>
		nRF24_EventMrCallback();
 80050dc:	f7ff ffdc 	bl	8005098 <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 80050e0:	4b03      	ldr	r3, [pc, #12]	; (80050f0 <nRF24_Event+0x54>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
}
 80050e6:	e7e7      	b.n	80050b8 <nRF24_Event+0x1c>
 80050e8:	20000849 	.word	0x20000849
 80050ec:	2000084a 	.word	0x2000084a
 80050f0:	20000848 	.word	0x20000848
 80050f4:	20000839 	.word	0x20000839

080050f8 <nRF24_Init>:
#endif

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80050f8:	b508      	push	{r3, lr}
	hspi_nrf = hspi;
 80050fa:	4b31      	ldr	r3, [pc, #196]	; (80051c0 <nRF24_Init+0xc8>)
 80050fc:	6018      	str	r0, [r3, #0]

	NRF24_CE_LOW;
 80050fe:	2200      	movs	r2, #0
 8005100:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005104:	482f      	ldr	r0, [pc, #188]	; (80051c4 <nRF24_Init+0xcc>)
 8005106:	f000 fe02 	bl	8005d0e <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 800510a:	f7fe f8d9 	bl	80032c0 <NRF_ChipDeselect>

	nRF24_Delay_ms(5); // Wait for radio power up
 800510e:	2005      	movs	r0, #5
 8005110:	f7ff fcd4 	bl	8004abc <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8005114:	2003      	movs	r0, #3
 8005116:	f7ff fd4d 	bl	8004bb4 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 800511a:	2002      	movs	r0, #2
 800511c:	f7ff fd59 	bl	8004bd2 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8005120:	2001      	movs	r0, #1
 8005122:	f7ff fdc9 	bl	8004cb8 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_2B); // CRC Length 1 byte
 8005126:	2001      	movs	r0, #1
 8005128:	f7ff fdd4 	bl	8004cd4 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 800512c:	2107      	movs	r1, #7
 800512e:	2004      	movs	r0, #4
 8005130:	f7ff fddf 	bl	8004cf2 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 8005134:	201d      	movs	r0, #29
 8005136:	f7ff fd07 	bl	8004b48 <nRF24_ReadRegister>
 800513a:	f040 0104 	orr.w	r1, r0, #4
 800513e:	b2c9      	uxtb	r1, r1
 8005140:	201d      	movs	r0, #29
 8005142:	f7ff fccb 	bl	8004adc <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 8005146:	213f      	movs	r1, #63	; 0x3f
 8005148:	201c      	movs	r0, #28
 800514a:	f7ff fcc7 	bl	8004adc <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(110); // Set RF channel for transmission
 800514e:	206e      	movs	r0, #110	; 0x6e
 8005150:	f7ff fdd9 	bl	8004d06 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8005154:	2101      	movs	r1, #1
 8005156:	2000      	movs	r0, #0
 8005158:	f7ff fddc 	bl	8004d14 <nRF24_EnablePipe>
	nRF24_EnablePipe(1, 1); // Enable pipe 1
 800515c:	2101      	movs	r1, #1
 800515e:	4608      	mov	r0, r1
 8005160:	f7ff fdd8 	bl	8004d14 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8005164:	2101      	movs	r1, #1
 8005166:	2000      	movs	r0, #0
 8005168:	f7ff fded 	bl	8004d46 <nRF24_AutoACK>
	nRF24_AutoACK(1, 1); // Enable auto ACK for pipe 1
 800516c:	2101      	movs	r1, #1
 800516e:	4608      	mov	r0, r1
 8005170:	f7ff fde9 	bl	8004d46 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8005174:	2005      	movs	r0, #5
 8005176:	f7ff fdff 	bl	8004d78 <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 800517a:	2001      	movs	r0, #1
 800517c:	f7ff fc9e 	bl	8004abc <nRF24_Delay_ms>

#if (NRF24_USE_INTERRUPT == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8005180:	2001      	movs	r0, #1
 8005182:	f7ff fe94 	bl	8004eae <nRF24_EnableRXDataReadyIRQ>
#endif
#if (NRF24_USE_INTERRUPT == 0)
	nRF24_EnableRXDataReadyIRQ(0);
#endif
	nRF24_EnableTXDataSentIRQ(0);
 8005186:	2000      	movs	r0, #0
 8005188:	f7ff fe9f 	bl	8004eca <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 800518c:	2000      	movs	r0, #0
 800518e:	f7ff feaa 	bl	8004ee6 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8005192:	2001      	movs	r0, #1
 8005194:	f7ff fc92 	bl	8004abc <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 8005198:	f7ff fe72 	bl	8004e80 <nRF24_ClearInterrupts>
#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 800519c:	2001      	movs	r0, #1
 800519e:	f7ff fe86 	bl	8004eae <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 80051a2:	2001      	movs	r0, #1
 80051a4:	f7ff fe91 	bl	8004eca <nRF24_EnableTXDataSentIRQ>
	Nrf24TXFreeFlag = 1;
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <nRF24_Init+0xd0>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
	RB_CreateBuffer(&TXBuffer, NRF24_TX_BUFFER_SIZE);
 80051ae:	2120      	movs	r1, #32
 80051b0:	4806      	ldr	r0, [pc, #24]	; (80051cc <nRF24_Init+0xd4>)
 80051b2:	f7fd f9eb 	bl	800258c <RB_CreateBuffer>
	RB_CreateBuffer(&RXBuffer, NRF24_RX_BUFFER_SIZE);
 80051b6:	2120      	movs	r1, #32
 80051b8:	4805      	ldr	r0, [pc, #20]	; (80051d0 <nRF24_Init+0xd8>)
 80051ba:	f7fd f9e7 	bl	800258c <RB_CreateBuffer>
#endif
}
 80051be:	bd08      	pop	{r3, pc}
 80051c0:	20000844 	.word	0x20000844
 80051c4:	40020400 	.word	0x40020400
 80051c8:	20000839 	.word	0x20000839
 80051cc:	20003350 	.word	0x20003350
 80051d0:	20003374 	.word	0x20003374

080051d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80051d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800520c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80051d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80051da:	e003      	b.n	80051e4 <LoopCopyDataInit>

080051dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80051de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80051e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80051e2:	3104      	adds	r1, #4

080051e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80051e4:	480b      	ldr	r0, [pc, #44]	; (8005214 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80051e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80051ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80051ec:	d3f6      	bcc.n	80051dc <CopyDataInit>
  ldr  r2, =_sbss
 80051ee:	4a0b      	ldr	r2, [pc, #44]	; (800521c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80051f0:	e002      	b.n	80051f8 <LoopFillZerobss>

080051f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80051f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80051f4:	f842 3b04 	str.w	r3, [r2], #4

080051f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80051f8:	4b09      	ldr	r3, [pc, #36]	; (8005220 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80051fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80051fc:	d3f9      	bcc.n	80051f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80051fe:	f7ff fc4f 	bl	8004aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005202:	f006 fad1 	bl	800b7a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005206:	f7ff f821 	bl	800424c <main>
  bx  lr    
 800520a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800520c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8005210:	0800cb40 	.word	0x0800cb40
  ldr  r0, =_sdata
 8005214:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005218:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 800521c:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 8005220:	200033e0 	.word	0x200033e0

08005224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005224:	e7fe      	b.n	8005224 <ADC_IRQHandler>
	...

08005228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005228:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800522a:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <HAL_Init+0x30>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005232:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800523a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005242:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005244:	2003      	movs	r0, #3
 8005246:	f000 f9a9 	bl	800559c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800524a:	2000      	movs	r0, #0
 800524c:	f7ff fb6e 	bl	800492c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005250:	f7ff f8b6 	bl	80043c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8005254:	2000      	movs	r0, #0
 8005256:	bd08      	pop	{r3, pc}
 8005258:	40023c00 	.word	0x40023c00

0800525c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800525c:	4a03      	ldr	r2, [pc, #12]	; (800526c <HAL_IncTick+0x10>)
 800525e:	6811      	ldr	r1, [r2, #0]
 8005260:	4b03      	ldr	r3, [pc, #12]	; (8005270 <HAL_IncTick+0x14>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	440b      	add	r3, r1
 8005266:	6013      	str	r3, [r2, #0]
}
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20003398 	.word	0x20003398
 8005270:	2000003c 	.word	0x2000003c

08005274 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005274:	4b01      	ldr	r3, [pc, #4]	; (800527c <HAL_GetTick+0x8>)
 8005276:	6818      	ldr	r0, [r3, #0]
}
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20003398 	.word	0x20003398

08005280 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005280:	4b4a      	ldr	r3, [pc, #296]	; (80053ac <ADC_Init+0x12c>)
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005288:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	6841      	ldr	r1, [r0, #4]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005292:	6802      	ldr	r2, [r0, #0]
 8005294:	6853      	ldr	r3, [r2, #4]
 8005296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800529a:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800529c:	6802      	ldr	r2, [r0, #0]
 800529e:	6853      	ldr	r3, [r2, #4]
 80052a0:	6901      	ldr	r1, [r0, #16]
 80052a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80052a6:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80052a8:	6802      	ldr	r2, [r0, #0]
 80052aa:	6853      	ldr	r3, [r2, #4]
 80052ac:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80052b0:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80052b2:	6802      	ldr	r2, [r0, #0]
 80052b4:	6853      	ldr	r3, [r2, #4]
 80052b6:	6881      	ldr	r1, [r0, #8]
 80052b8:	430b      	orrs	r3, r1
 80052ba:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80052bc:	6802      	ldr	r2, [r0, #0]
 80052be:	6893      	ldr	r3, [r2, #8]
 80052c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052c4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80052c6:	6802      	ldr	r2, [r0, #0]
 80052c8:	6893      	ldr	r3, [r2, #8]
 80052ca:	68c1      	ldr	r1, [r0, #12]
 80052cc:	430b      	orrs	r3, r1
 80052ce:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052d0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80052d2:	4b37      	ldr	r3, [pc, #220]	; (80053b0 <ADC_Init+0x130>)
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d04b      	beq.n	8005370 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052d8:	6802      	ldr	r2, [r0, #0]
 80052da:	6893      	ldr	r3, [r2, #8]
 80052dc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80052e0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052e2:	6802      	ldr	r2, [r0, #0]
 80052e4:	6893      	ldr	r3, [r2, #8]
 80052e6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80052e8:	430b      	orrs	r3, r1
 80052ea:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052ec:	6802      	ldr	r2, [r0, #0]
 80052ee:	6893      	ldr	r3, [r2, #8]
 80052f0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80052f4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80052f6:	6802      	ldr	r2, [r0, #0]
 80052f8:	6893      	ldr	r3, [r2, #8]
 80052fa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80052fc:	430b      	orrs	r3, r1
 80052fe:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005300:	6802      	ldr	r2, [r0, #0]
 8005302:	6893      	ldr	r3, [r2, #8]
 8005304:	f023 0302 	bic.w	r3, r3, #2
 8005308:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800530a:	6802      	ldr	r2, [r0, #0]
 800530c:	6893      	ldr	r3, [r2, #8]
 800530e:	7e01      	ldrb	r1, [r0, #24]
 8005310:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8005314:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005316:	f890 3020 	ldrb.w	r3, [r0, #32]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d133      	bne.n	8005386 <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800531e:	6802      	ldr	r2, [r0, #0]
 8005320:	6853      	ldr	r3, [r2, #4]
 8005322:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005326:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005328:	6802      	ldr	r2, [r0, #0]
 800532a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800532c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005330:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005332:	6801      	ldr	r1, [r0, #0]
 8005334:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005336:	69c2      	ldr	r2, [r0, #28]
 8005338:	3a01      	subs	r2, #1
 800533a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800533e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005340:	6802      	ldr	r2, [r0, #0]
 8005342:	6893      	ldr	r3, [r2, #8]
 8005344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005348:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800534a:	6802      	ldr	r2, [r0, #0]
 800534c:	6893      	ldr	r3, [r2, #8]
 800534e:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8005352:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8005356:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005358:	6802      	ldr	r2, [r0, #0]
 800535a:	6893      	ldr	r3, [r2, #8]
 800535c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005360:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005362:	6802      	ldr	r2, [r0, #0]
 8005364:	6893      	ldr	r3, [r2, #8]
 8005366:	6941      	ldr	r1, [r0, #20]
 8005368:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800536c:	6093      	str	r3, [r2, #8]
}
 800536e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005370:	6802      	ldr	r2, [r0, #0]
 8005372:	6893      	ldr	r3, [r2, #8]
 8005374:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005378:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800537a:	6802      	ldr	r2, [r0, #0]
 800537c:	6893      	ldr	r3, [r2, #8]
 800537e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005382:	6093      	str	r3, [r2, #8]
 8005384:	e7bc      	b.n	8005300 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005386:	6802      	ldr	r2, [r0, #0]
 8005388:	6853      	ldr	r3, [r2, #4]
 800538a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800538e:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005390:	6802      	ldr	r2, [r0, #0]
 8005392:	6853      	ldr	r3, [r2, #4]
 8005394:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005398:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800539a:	6801      	ldr	r1, [r0, #0]
 800539c:	684b      	ldr	r3, [r1, #4]
 800539e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80053a0:	3a01      	subs	r2, #1
 80053a2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80053a6:	604b      	str	r3, [r1, #4]
 80053a8:	e7be      	b.n	8005328 <ADC_Init+0xa8>
 80053aa:	bf00      	nop
 80053ac:	40012300 	.word	0x40012300
 80053b0:	0f000001 	.word	0x0f000001

080053b4 <HAL_ADC_Init>:
  if(hadc == NULL)
 80053b4:	b338      	cbz	r0, 8005406 <HAL_ADC_Init+0x52>
{
 80053b6:	b510      	push	{r4, lr}
 80053b8:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80053ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80053bc:	b143      	cbz	r3, 80053d0 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80053be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053c0:	f013 0f10 	tst.w	r3, #16
 80053c4:	d00b      	beq.n	80053de <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80053c6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80053c8:	2300      	movs	r3, #0
 80053ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80053ce:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80053d0:	f7ff f818 	bl	8004404 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80053d4:	2300      	movs	r3, #0
 80053d6:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80053d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80053dc:	e7ef      	b.n	80053be <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80053de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80053e4:	f023 0302 	bic.w	r3, r3, #2
 80053e8:	f043 0302 	orr.w	r3, r3, #2
 80053ec:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80053ee:	4620      	mov	r0, r4
 80053f0:	f7ff ff46 	bl	8005280 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80053f4:	2000      	movs	r0, #0
 80053f6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80053f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053fa:	f023 0303 	bic.w	r3, r3, #3
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	6423      	str	r3, [r4, #64]	; 0x40
 8005404:	e7e0      	b.n	80053c8 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8005406:	2001      	movs	r0, #1
}
 8005408:	4770      	bx	lr
	...

0800540c <HAL_ADC_ConfigChannel>:
{
 800540c:	b430      	push	{r4, r5}
 800540e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8005414:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005418:	2b01      	cmp	r3, #1
 800541a:	f000 80b7 	beq.w	800558c <HAL_ADC_ConfigChannel+0x180>
 800541e:	2301      	movs	r3, #1
 8005420:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005424:	680b      	ldr	r3, [r1, #0]
 8005426:	2b09      	cmp	r3, #9
 8005428:	d93e      	bls.n	80054a8 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800542a:	6805      	ldr	r5, [r0, #0]
 800542c:	68ea      	ldr	r2, [r5, #12]
 800542e:	b29b      	uxth	r3, r3
 8005430:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005434:	3b1e      	subs	r3, #30
 8005436:	2407      	movs	r4, #7
 8005438:	fa04 f303 	lsl.w	r3, r4, r3
 800543c:	ea22 0303 	bic.w	r3, r2, r3
 8005440:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005442:	6805      	ldr	r5, [r0, #0]
 8005444:	68ea      	ldr	r2, [r5, #12]
 8005446:	688c      	ldr	r4, [r1, #8]
 8005448:	880b      	ldrh	r3, [r1, #0]
 800544a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800544e:	3b1e      	subs	r3, #30
 8005450:	fa04 f303 	lsl.w	r3, r4, r3
 8005454:	4313      	orrs	r3, r2
 8005456:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8005458:	684b      	ldr	r3, [r1, #4]
 800545a:	2b06      	cmp	r3, #6
 800545c:	d83a      	bhi.n	80054d4 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800545e:	6805      	ldr	r5, [r0, #0]
 8005460:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005462:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005466:	3b05      	subs	r3, #5
 8005468:	241f      	movs	r4, #31
 800546a:	fa04 f303 	lsl.w	r3, r4, r3
 800546e:	ea22 0303 	bic.w	r3, r2, r3
 8005472:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005474:	6805      	ldr	r5, [r0, #0]
 8005476:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005478:	684b      	ldr	r3, [r1, #4]
 800547a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800547e:	3b05      	subs	r3, #5
 8005480:	880c      	ldrh	r4, [r1, #0]
 8005482:	fa04 f303 	lsl.w	r3, r4, r3
 8005486:	4313      	orrs	r3, r2
 8005488:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800548a:	6802      	ldr	r2, [r0, #0]
 800548c:	4b40      	ldr	r3, [pc, #256]	; (8005590 <HAL_ADC_ConfigChannel+0x184>)
 800548e:	429a      	cmp	r2, r3
 8005490:	d050      	beq.n	8005534 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005492:	6802      	ldr	r2, [r0, #0]
 8005494:	4b3e      	ldr	r3, [pc, #248]	; (8005590 <HAL_ADC_ConfigChannel+0x184>)
 8005496:	429a      	cmp	r2, r3
 8005498:	d055      	beq.n	8005546 <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 800549a:	2300      	movs	r3, #0
 800549c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80054a0:	4618      	mov	r0, r3
}
 80054a2:	b002      	add	sp, #8
 80054a4:	bc30      	pop	{r4, r5}
 80054a6:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80054a8:	6805      	ldr	r5, [r0, #0]
 80054aa:	692a      	ldr	r2, [r5, #16]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80054b2:	2407      	movs	r4, #7
 80054b4:	fa04 f303 	lsl.w	r3, r4, r3
 80054b8:	ea22 0303 	bic.w	r3, r2, r3
 80054bc:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80054be:	6805      	ldr	r5, [r0, #0]
 80054c0:	692a      	ldr	r2, [r5, #16]
 80054c2:	688c      	ldr	r4, [r1, #8]
 80054c4:	880b      	ldrh	r3, [r1, #0]
 80054c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80054ca:	fa04 f303 	lsl.w	r3, r4, r3
 80054ce:	4313      	orrs	r3, r2
 80054d0:	612b      	str	r3, [r5, #16]
 80054d2:	e7c1      	b.n	8005458 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	d816      	bhi.n	8005506 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80054d8:	6805      	ldr	r5, [r0, #0]
 80054da:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80054dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80054e0:	3b23      	subs	r3, #35	; 0x23
 80054e2:	241f      	movs	r4, #31
 80054e4:	fa04 f303 	lsl.w	r3, r4, r3
 80054e8:	ea22 0303 	bic.w	r3, r2, r3
 80054ec:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80054ee:	6805      	ldr	r5, [r0, #0]
 80054f0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80054f2:	684b      	ldr	r3, [r1, #4]
 80054f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80054f8:	3b23      	subs	r3, #35	; 0x23
 80054fa:	880c      	ldrh	r4, [r1, #0]
 80054fc:	fa04 f303 	lsl.w	r3, r4, r3
 8005500:	4313      	orrs	r3, r2
 8005502:	632b      	str	r3, [r5, #48]	; 0x30
 8005504:	e7c1      	b.n	800548a <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005506:	6805      	ldr	r5, [r0, #0]
 8005508:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800550a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800550e:	3b41      	subs	r3, #65	; 0x41
 8005510:	241f      	movs	r4, #31
 8005512:	fa04 f303 	lsl.w	r3, r4, r3
 8005516:	ea22 0303 	bic.w	r3, r2, r3
 800551a:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800551c:	6805      	ldr	r5, [r0, #0]
 800551e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005520:	684b      	ldr	r3, [r1, #4]
 8005522:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005526:	3b41      	subs	r3, #65	; 0x41
 8005528:	880c      	ldrh	r4, [r1, #0]
 800552a:	fa04 f303 	lsl.w	r3, r4, r3
 800552e:	4313      	orrs	r3, r2
 8005530:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005532:	e7aa      	b.n	800548a <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005534:	680b      	ldr	r3, [r1, #0]
 8005536:	2b12      	cmp	r3, #18
 8005538:	d1ab      	bne.n	8005492 <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800553a:	4a16      	ldr	r2, [pc, #88]	; (8005594 <HAL_ADC_ConfigChannel+0x188>)
 800553c:	6853      	ldr	r3, [r2, #4]
 800553e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005542:	6053      	str	r3, [r2, #4]
 8005544:	e7a5      	b.n	8005492 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005546:	680b      	ldr	r3, [r1, #0]
 8005548:	3b10      	subs	r3, #16
 800554a:	2b01      	cmp	r3, #1
 800554c:	d8a5      	bhi.n	800549a <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800554e:	4a11      	ldr	r2, [pc, #68]	; (8005594 <HAL_ADC_ConfigChannel+0x188>)
 8005550:	6853      	ldr	r3, [r2, #4]
 8005552:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005556:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005558:	680b      	ldr	r3, [r1, #0]
 800555a:	2b10      	cmp	r3, #16
 800555c:	d19d      	bne.n	800549a <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800555e:	4b0e      	ldr	r3, [pc, #56]	; (8005598 <HAL_ADC_ConfigChannel+0x18c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8005566:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 800556a:	f202 3283 	addw	r2, r2, #899	; 0x383
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	0c9b      	lsrs	r3, r3, #18
 8005574:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005578:	005a      	lsls	r2, r3, #1
 800557a:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 800557c:	e002      	b.n	8005584 <HAL_ADC_ConfigChannel+0x178>
        counter--;
 800557e:	9b01      	ldr	r3, [sp, #4]
 8005580:	3b01      	subs	r3, #1
 8005582:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005584:	9b01      	ldr	r3, [sp, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f9      	bne.n	800557e <HAL_ADC_ConfigChannel+0x172>
 800558a:	e786      	b.n	800549a <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 800558c:	2002      	movs	r0, #2
 800558e:	e788      	b.n	80054a2 <HAL_ADC_ConfigChannel+0x96>
 8005590:	40012000 	.word	0x40012000
 8005594:	40012300 	.word	0x40012300
 8005598:	20000038 	.word	0x20000038

0800559c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800559c:	4a07      	ldr	r2, [pc, #28]	; (80055bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800559e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80055a4:	041b      	lsls	r3, r3, #16
 80055a6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055a8:	0200      	lsls	r0, r0, #8
 80055aa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055ae:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80055b0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80055b4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80055b8:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80055ba:	4770      	bx	lr
 80055bc:	e000ed00 	.word	0xe000ed00

080055c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055c0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055c2:	4b17      	ldr	r3, [pc, #92]	; (8005620 <HAL_NVIC_SetPriority+0x60>)
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055ca:	f1c3 0407 	rsb	r4, r3, #7
 80055ce:	2c04      	cmp	r4, #4
 80055d0:	bf28      	it	cs
 80055d2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055d4:	1d1d      	adds	r5, r3, #4
 80055d6:	2d06      	cmp	r5, #6
 80055d8:	d918      	bls.n	800560c <HAL_NVIC_SetPriority+0x4c>
 80055da:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80055e0:	fa05 f404 	lsl.w	r4, r5, r4
 80055e4:	ea21 0104 	bic.w	r1, r1, r4
 80055e8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055ea:	fa05 f303 	lsl.w	r3, r5, r3
 80055ee:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055f2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80055f4:	2800      	cmp	r0, #0
 80055f6:	db0b      	blt.n	8005610 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f8:	0109      	lsls	r1, r1, #4
 80055fa:	b2c9      	uxtb	r1, r1
 80055fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005600:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005604:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005608:	bc30      	pop	{r4, r5}
 800560a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800560c:	2300      	movs	r3, #0
 800560e:	e7e5      	b.n	80055dc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005610:	f000 000f 	and.w	r0, r0, #15
 8005614:	0109      	lsls	r1, r1, #4
 8005616:	b2c9      	uxtb	r1, r1
 8005618:	4b02      	ldr	r3, [pc, #8]	; (8005624 <HAL_NVIC_SetPriority+0x64>)
 800561a:	5419      	strb	r1, [r3, r0]
 800561c:	e7f4      	b.n	8005608 <HAL_NVIC_SetPriority+0x48>
 800561e:	bf00      	nop
 8005620:	e000ed00 	.word	0xe000ed00
 8005624:	e000ed14 	.word	0xe000ed14

08005628 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005628:	2800      	cmp	r0, #0
 800562a:	db07      	blt.n	800563c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800562c:	f000 021f 	and.w	r2, r0, #31
 8005630:	0940      	lsrs	r0, r0, #5
 8005632:	2301      	movs	r3, #1
 8005634:	4093      	lsls	r3, r2
 8005636:	4a02      	ldr	r2, [pc, #8]	; (8005640 <HAL_NVIC_EnableIRQ+0x18>)
 8005638:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	e000e100 	.word	0xe000e100

08005644 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005644:	b158      	cbz	r0, 800565e <HAL_CRC_Init+0x1a>
{
 8005646:	b510      	push	{r4, lr}
 8005648:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800564a:	7943      	ldrb	r3, [r0, #5]
 800564c:	b11b      	cbz	r3, 8005656 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800564e:	2301      	movs	r3, #1
 8005650:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8005652:	2000      	movs	r0, #0
}
 8005654:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8005656:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8005658:	f7fe feec 	bl	8004434 <HAL_CRC_MspInit>
 800565c:	e7f7      	b.n	800564e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 800565e:	2001      	movs	r0, #1
}
 8005660:	4770      	bx	lr

08005662 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005662:	b430      	push	{r4, r5}
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005664:	2302      	movs	r3, #2
 8005666:	7143      	strb	r3, [r0, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005668:	6804      	ldr	r4, [r0, #0]
 800566a:	68a3      	ldr	r3, [r4, #8]
 800566c:	f043 0301 	orr.w	r3, r3, #1
 8005670:	60a3      	str	r3, [r4, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8005672:	2300      	movs	r3, #0
 8005674:	e004      	b.n	8005680 <HAL_CRC_Calculate+0x1e>
  {
    hcrc->Instance->DR = pBuffer[index];
 8005676:	6804      	ldr	r4, [r0, #0]
 8005678:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800567c:	6025      	str	r5, [r4, #0]
  for (index = 0U; index < BufferLength; index++)
 800567e:	3301      	adds	r3, #1
 8005680:	4293      	cmp	r3, r2
 8005682:	d3f8      	bcc.n	8005676 <HAL_CRC_Calculate+0x14>
  }
  temp = hcrc->Instance->DR;
 8005684:	6803      	ldr	r3, [r0, #0]
 8005686:	681b      	ldr	r3, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005688:	2201      	movs	r2, #1
 800568a:	7142      	strb	r2, [r0, #5]

  /* Return the CRC computed value */
  return temp;
}
 800568c:	4618      	mov	r0, r3
 800568e:	bc30      	pop	{r4, r5}
 8005690:	4770      	bx	lr

08005692 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005692:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005694:	6805      	ldr	r5, [r0, #0]
 8005696:	682c      	ldr	r4, [r5, #0]
 8005698:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800569c:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800569e:	6804      	ldr	r4, [r0, #0]
 80056a0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056a2:	6883      	ldr	r3, [r0, #8]
 80056a4:	2b40      	cmp	r3, #64	; 0x40
 80056a6:	d005      	beq.n	80056b4 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80056a8:	6803      	ldr	r3, [r0, #0]
 80056aa:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80056ac:	6803      	ldr	r3, [r0, #0]
 80056ae:	60da      	str	r2, [r3, #12]
  }
}
 80056b0:	bc30      	pop	{r4, r5}
 80056b2:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80056b4:	6803      	ldr	r3, [r0, #0]
 80056b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80056b8:	6803      	ldr	r3, [r0, #0]
 80056ba:	60d9      	str	r1, [r3, #12]
 80056bc:	e7f8      	b.n	80056b0 <DMA_SetConfig+0x1e>
	...

080056c0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056c0:	6802      	ldr	r2, [r0, #0]
 80056c2:	b2d3      	uxtb	r3, r2
 80056c4:	3b10      	subs	r3, #16
 80056c6:	490b      	ldr	r1, [pc, #44]	; (80056f4 <DMA_CalcBaseAndBitshift+0x34>)
 80056c8:	fba1 1303 	umull	r1, r3, r1, r3
 80056cc:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056ce:	490a      	ldr	r1, [pc, #40]	; (80056f8 <DMA_CalcBaseAndBitshift+0x38>)
 80056d0:	5cc9      	ldrb	r1, [r1, r3]
 80056d2:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d806      	bhi.n	80056e6 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056d8:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80056dc:	f022 0203 	bic.w	r2, r2, #3
 80056e0:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80056e2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80056e4:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056e6:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80056ea:	f022 0203 	bic.w	r2, r2, #3
 80056ee:	3204      	adds	r2, #4
 80056f0:	6582      	str	r2, [r0, #88]	; 0x58
 80056f2:	e7f6      	b.n	80056e2 <DMA_CalcBaseAndBitshift+0x22>
 80056f4:	aaaaaaab 	.word	0xaaaaaaab
 80056f8:	0800c9ec 	.word	0x0800c9ec

080056fc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80056fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056fe:	6982      	ldr	r2, [r0, #24]
 8005700:	b992      	cbnz	r2, 8005728 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8005702:	2b01      	cmp	r3, #1
 8005704:	d00a      	beq.n	800571c <DMA_CheckFifoParam+0x20>
 8005706:	b11b      	cbz	r3, 8005710 <DMA_CheckFifoParam+0x14>
 8005708:	2b02      	cmp	r3, #2
 800570a:	d001      	beq.n	8005710 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 800570c:	2000      	movs	r0, #0
 800570e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005710:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005712:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005716:	d12c      	bne.n	8005772 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8005718:	2000      	movs	r0, #0
 800571a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800571c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800571e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005722:	d028      	beq.n	8005776 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8005724:	2000      	movs	r0, #0
 8005726:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005728:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800572c:	d005      	beq.n	800573a <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800572e:	2b02      	cmp	r3, #2
 8005730:	d929      	bls.n	8005786 <DMA_CheckFifoParam+0x8a>
 8005732:	2b03      	cmp	r3, #3
 8005734:	d015      	beq.n	8005762 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8005736:	2000      	movs	r0, #0
 8005738:	4770      	bx	lr
    switch (tmp)
 800573a:	2b03      	cmp	r3, #3
 800573c:	d803      	bhi.n	8005746 <DMA_CheckFifoParam+0x4a>
 800573e:	e8df f003 	tbb	[pc, r3]
 8005742:	041c      	.short	0x041c
 8005744:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8005746:	2000      	movs	r0, #0
 8005748:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800574a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800574c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005750:	d115      	bne.n	800577e <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8005752:	2000      	movs	r0, #0
 8005754:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005756:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005758:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800575c:	d011      	beq.n	8005782 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800575e:	2000      	movs	r0, #0
 8005760:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005762:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005764:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005768:	d001      	beq.n	800576e <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 800576a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800576c:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800576e:	2000      	movs	r0, #0
 8005770:	4770      	bx	lr
        status = HAL_ERROR;
 8005772:	2001      	movs	r0, #1
 8005774:	4770      	bx	lr
        status = HAL_ERROR;
 8005776:	2001      	movs	r0, #1
 8005778:	4770      	bx	lr
      status = HAL_ERROR;
 800577a:	2001      	movs	r0, #1
 800577c:	4770      	bx	lr
        status = HAL_ERROR;
 800577e:	2001      	movs	r0, #1
 8005780:	4770      	bx	lr
        status = HAL_ERROR;
 8005782:	2001      	movs	r0, #1
 8005784:	4770      	bx	lr
      status = HAL_ERROR;
 8005786:	2001      	movs	r0, #1
 8005788:	4770      	bx	lr
	...

0800578c <HAL_DMA_Init>:
{
 800578c:	b570      	push	{r4, r5, r6, lr}
 800578e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005790:	f7ff fd70 	bl	8005274 <HAL_GetTick>
  if(hdma == NULL)
 8005794:	2c00      	cmp	r4, #0
 8005796:	d05b      	beq.n	8005850 <HAL_DMA_Init+0xc4>
 8005798:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800579a:	2300      	movs	r3, #0
 800579c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80057a0:	2302      	movs	r3, #2
 80057a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	6813      	ldr	r3, [r2, #0]
 80057aa:	f023 0301 	bic.w	r3, r3, #1
 80057ae:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	f012 0f01 	tst.w	r2, #1
 80057b8:	d00a      	beq.n	80057d0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057ba:	f7ff fd5b 	bl	8005274 <HAL_GetTick>
 80057be:	1b40      	subs	r0, r0, r5
 80057c0:	2805      	cmp	r0, #5
 80057c2:	d9f5      	bls.n	80057b0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057c4:	2320      	movs	r3, #32
 80057c6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057c8:	2003      	movs	r0, #3
 80057ca:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80057d0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057d2:	4820      	ldr	r0, [pc, #128]	; (8005854 <HAL_DMA_Init+0xc8>)
 80057d4:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057d6:	6861      	ldr	r1, [r4, #4]
 80057d8:	68a2      	ldr	r2, [r4, #8]
 80057da:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057dc:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057de:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057e0:	6921      	ldr	r1, [r4, #16]
 80057e2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057e4:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057e6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057e8:	69a1      	ldr	r1, [r4, #24]
 80057ea:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80057ec:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ee:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80057f0:	6a21      	ldr	r1, [r4, #32]
 80057f2:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057f4:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80057f8:	2904      	cmp	r1, #4
 80057fa:	d01e      	beq.n	800583a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80057fc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80057fe:	6826      	ldr	r6, [r4, #0]
 8005800:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005802:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8005806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005808:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800580a:	2b04      	cmp	r3, #4
 800580c:	d107      	bne.n	800581e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800580e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005810:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005812:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005814:	b11b      	cbz	r3, 800581e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005816:	4620      	mov	r0, r4
 8005818:	f7ff ff70 	bl	80056fc <DMA_CheckFifoParam>
 800581c:	b990      	cbnz	r0, 8005844 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800581e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005820:	4620      	mov	r0, r4
 8005822:	f7ff ff4d 	bl	80056c0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005826:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005828:	233f      	movs	r3, #63	; 0x3f
 800582a:	4093      	lsls	r3, r2
 800582c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800582e:	2000      	movs	r0, #0
 8005830:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005832:	2301      	movs	r3, #1
 8005834:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005838:	e7c9      	b.n	80057ce <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800583a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800583c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800583e:	4301      	orrs	r1, r0
 8005840:	430a      	orrs	r2, r1
 8005842:	e7db      	b.n	80057fc <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005844:	2340      	movs	r3, #64	; 0x40
 8005846:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005848:	2001      	movs	r0, #1
 800584a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800584e:	e7be      	b.n	80057ce <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8005850:	2001      	movs	r0, #1
 8005852:	e7bc      	b.n	80057ce <HAL_DMA_Init+0x42>
 8005854:	f010803f 	.word	0xf010803f

08005858 <HAL_DMA_Start_IT>:
{
 8005858:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800585a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800585c:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8005860:	2c01      	cmp	r4, #1
 8005862:	d02c      	beq.n	80058be <HAL_DMA_Start_IT+0x66>
 8005864:	2401      	movs	r4, #1
 8005866:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800586a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800586e:	b2e4      	uxtb	r4, r4
 8005870:	2c01      	cmp	r4, #1
 8005872:	d004      	beq.n	800587e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8005874:	2300      	movs	r3, #0
 8005876:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 800587a:	2002      	movs	r0, #2
}
 800587c:	bd38      	pop	{r3, r4, r5, pc}
 800587e:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005880:	2002      	movs	r0, #2
 8005882:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005886:	2000      	movs	r0, #0
 8005888:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800588a:	4620      	mov	r0, r4
 800588c:	f7ff ff01 	bl	8005692 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005890:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005892:	233f      	movs	r3, #63	; 0x3f
 8005894:	4093      	lsls	r3, r2
 8005896:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005898:	6822      	ldr	r2, [r4, #0]
 800589a:	6813      	ldr	r3, [r2, #0]
 800589c:	f043 0316 	orr.w	r3, r3, #22
 80058a0:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80058a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058a4:	b123      	cbz	r3, 80058b0 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80058a6:	6822      	ldr	r2, [r4, #0]
 80058a8:	6813      	ldr	r3, [r2, #0]
 80058aa:	f043 0308 	orr.w	r3, r3, #8
 80058ae:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80058b0:	6822      	ldr	r2, [r4, #0]
 80058b2:	6813      	ldr	r3, [r2, #0]
 80058b4:	f043 0301 	orr.w	r3, r3, #1
 80058b8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ba:	2000      	movs	r0, #0
 80058bc:	e7de      	b.n	800587c <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80058be:	2002      	movs	r0, #2
 80058c0:	e7dc      	b.n	800587c <HAL_DMA_Start_IT+0x24>

080058c2 <HAL_DMA_Abort>:
{
 80058c2:	b570      	push	{r4, r5, r6, lr}
 80058c4:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058c6:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80058c8:	f7ff fcd4 	bl	8005274 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058cc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d006      	beq.n	80058e4 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058d6:	2380      	movs	r3, #128	; 0x80
 80058d8:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80058da:	2300      	movs	r3, #0
 80058dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80058e0:	2001      	movs	r0, #1
}
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
 80058e4:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058e6:	6822      	ldr	r2, [r4, #0]
 80058e8:	6813      	ldr	r3, [r2, #0]
 80058ea:	f023 0316 	bic.w	r3, r3, #22
 80058ee:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058f0:	6822      	ldr	r2, [r4, #0]
 80058f2:	6953      	ldr	r3, [r2, #20]
 80058f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f8:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058fc:	b1e3      	cbz	r3, 8005938 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	6813      	ldr	r3, [r2, #0]
 8005902:	f023 0308 	bic.w	r3, r3, #8
 8005906:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005908:	6822      	ldr	r2, [r4, #0]
 800590a:	6813      	ldr	r3, [r2, #0]
 800590c:	f023 0301 	bic.w	r3, r3, #1
 8005910:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f013 0f01 	tst.w	r3, #1
 800591a:	d011      	beq.n	8005940 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800591c:	f7ff fcaa 	bl	8005274 <HAL_GetTick>
 8005920:	1b40      	subs	r0, r0, r5
 8005922:	2805      	cmp	r0, #5
 8005924:	d9f5      	bls.n	8005912 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005926:	2320      	movs	r3, #32
 8005928:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800592a:	2300      	movs	r3, #0
 800592c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005930:	2003      	movs	r0, #3
 8005932:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8005936:	e7d4      	b.n	80058e2 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005938:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1df      	bne.n	80058fe <HAL_DMA_Abort+0x3c>
 800593e:	e7e3      	b.n	8005908 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005940:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005942:	233f      	movs	r3, #63	; 0x3f
 8005944:	4093      	lsls	r3, r2
 8005946:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8005948:	2000      	movs	r0, #0
 800594a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800594e:	2301      	movs	r3, #1
 8005950:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8005954:	e7c5      	b.n	80058e2 <HAL_DMA_Abort+0x20>

08005956 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005956:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d003      	beq.n	8005968 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005960:	2380      	movs	r3, #128	; 0x80
 8005962:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8005964:	2001      	movs	r0, #1
 8005966:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8005968:	2305      	movs	r3, #5
 800596a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800596e:	6802      	ldr	r2, [r0, #0]
 8005970:	6813      	ldr	r3, [r2, #0]
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005978:	2000      	movs	r0, #0
}
 800597a:	4770      	bx	lr

0800597c <HAL_DMA_IRQHandler>:
{
 800597c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800597e:	b083      	sub	sp, #12
 8005980:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005986:	4b72      	ldr	r3, [pc, #456]	; (8005b50 <HAL_DMA_IRQHandler+0x1d4>)
 8005988:	681d      	ldr	r5, [r3, #0]
 800598a:	4b72      	ldr	r3, [pc, #456]	; (8005b54 <HAL_DMA_IRQHandler+0x1d8>)
 800598c:	fba3 3505 	umull	r3, r5, r3, r5
 8005990:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005992:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8005994:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005996:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005998:	2308      	movs	r3, #8
 800599a:	4093      	lsls	r3, r2
 800599c:	4233      	tst	r3, r6
 800599e:	d010      	beq.n	80059c2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80059a0:	6803      	ldr	r3, [r0, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	f012 0f04 	tst.w	r2, #4
 80059a8:	d00b      	beq.n	80059c2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	f022 0204 	bic.w	r2, r2, #4
 80059b0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80059b2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80059b4:	2308      	movs	r3, #8
 80059b6:	4093      	lsls	r3, r2
 80059b8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059ba:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80059c4:	2301      	movs	r3, #1
 80059c6:	4093      	lsls	r3, r2
 80059c8:	4233      	tst	r3, r6
 80059ca:	d009      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80059cc:	6822      	ldr	r2, [r4, #0]
 80059ce:	6952      	ldr	r2, [r2, #20]
 80059d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80059d4:	d004      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80059d6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059da:	f043 0302 	orr.w	r3, r3, #2
 80059de:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80059e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80059e2:	2304      	movs	r3, #4
 80059e4:	4093      	lsls	r3, r2
 80059e6:	4233      	tst	r3, r6
 80059e8:	d009      	beq.n	80059fe <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80059ea:	6822      	ldr	r2, [r4, #0]
 80059ec:	6812      	ldr	r2, [r2, #0]
 80059ee:	f012 0f02 	tst.w	r2, #2
 80059f2:	d004      	beq.n	80059fe <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80059f4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059f8:	f043 0304 	orr.w	r3, r3, #4
 80059fc:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80059fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005a00:	2310      	movs	r3, #16
 8005a02:	4093      	lsls	r3, r2
 8005a04:	4233      	tst	r3, r6
 8005a06:	d024      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a08:	6822      	ldr	r2, [r4, #0]
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	f012 0f08 	tst.w	r2, #8
 8005a10:	d01f      	beq.n	8005a52 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a12:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005a1c:	d00d      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005a24:	d104      	bne.n	8005a30 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8005a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a28:	b19b      	cbz	r3, 8005a52 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	4798      	blx	r3
 8005a2e:	e010      	b.n	8005a52 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a30:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005a32:	b173      	cbz	r3, 8005a52 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8005a34:	4620      	mov	r0, r4
 8005a36:	4798      	blx	r3
 8005a38:	e00b      	b.n	8005a52 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005a40:	d103      	bne.n	8005a4a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	f022 0208 	bic.w	r2, r2, #8
 8005a48:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8005a4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a4c:	b10b      	cbz	r3, 8005a52 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8005a4e:	4620      	mov	r0, r4
 8005a50:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a52:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005a54:	2320      	movs	r3, #32
 8005a56:	4093      	lsls	r3, r2
 8005a58:	4233      	tst	r3, r6
 8005a5a:	d055      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a5c:	6822      	ldr	r2, [r4, #0]
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	f012 0f10 	tst.w	r2, #16
 8005a64:	d050      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a66:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a68:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b05      	cmp	r3, #5
 8005a70:	d00e      	beq.n	8005a90 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005a7a:	d033      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005a82:	d12a      	bne.n	8005ada <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8005a84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d03e      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	4798      	blx	r3
 8005a8e:	e03b      	b.n	8005b08 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a90:	6822      	ldr	r2, [r4, #0]
 8005a92:	6813      	ldr	r3, [r2, #0]
 8005a94:	f023 0316 	bic.w	r3, r3, #22
 8005a98:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	6953      	ldr	r3, [r2, #20]
 8005a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aa2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005aa6:	b1a3      	cbz	r3, 8005ad2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005aa8:	6822      	ldr	r2, [r4, #0]
 8005aaa:	6813      	ldr	r3, [r2, #0]
 8005aac:	f023 0308 	bic.w	r3, r3, #8
 8005ab0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ab2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005ab4:	233f      	movs	r3, #63	; 0x3f
 8005ab6:	4093      	lsls	r3, r2
 8005ab8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8005aba:	2300      	movs	r3, #0
 8005abc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8005ac6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d03f      	beq.n	8005b4c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8005acc:	4620      	mov	r0, r4
 8005ace:	4798      	blx	r3
 8005ad0:	e03c      	b.n	8005b4c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ad2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e7      	bne.n	8005aa8 <HAL_DMA_IRQHandler+0x12c>
 8005ad8:	e7eb      	b.n	8005ab2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8005ada:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005adc:	b1a3      	cbz	r3, 8005b08 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8005ade:	4620      	mov	r0, r4
 8005ae0:	4798      	blx	r3
 8005ae2:	e011      	b.n	8005b08 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005aea:	d109      	bne.n	8005b00 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	f022 0210 	bic.w	r2, r2, #16
 8005af2:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8005af4:	2300      	movs	r3, #0
 8005af6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005afa:	2301      	movs	r3, #1
 8005afc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005b00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b02:	b10b      	cbz	r3, 8005b08 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8005b04:	4620      	mov	r0, r4
 8005b06:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b08:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b0a:	b1fb      	cbz	r3, 8005b4c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b0e:	f013 0f01 	tst.w	r3, #1
 8005b12:	d017      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b14:	2305      	movs	r3, #5
 8005b16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005b1a:	6822      	ldr	r2, [r4, #0]
 8005b1c:	6813      	ldr	r3, [r2, #0]
 8005b1e:	f023 0301 	bic.w	r3, r3, #1
 8005b22:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8005b24:	9b01      	ldr	r3, [sp, #4]
 8005b26:	3301      	adds	r3, #1
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	42ab      	cmp	r3, r5
 8005b2c:	d804      	bhi.n	8005b38 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f013 0f01 	tst.w	r3, #1
 8005b36:	d1f5      	bne.n	8005b24 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005b44:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005b46:	b10b      	cbz	r3, 8005b4c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8005b48:	4620      	mov	r0, r4
 8005b4a:	4798      	blx	r3
}
 8005b4c:	b003      	add	sp, #12
 8005b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b50:	20000038 	.word	0x20000038
 8005b54:	1b4e81b5 	.word	0x1b4e81b5

08005b58 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005b58:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8005b5a:	4770      	bx	lr

08005b5c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	2b0f      	cmp	r3, #15
 8005b60:	f200 80c5 	bhi.w	8005cee <HAL_GPIO_Init+0x192>
{
 8005b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b66:	b083      	sub	sp, #12
 8005b68:	e039      	b.n	8005bde <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	e000      	b.n	8005b70 <HAL_GPIO_Init+0x14>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	40aa      	lsls	r2, r5
 8005b72:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b74:	3402      	adds	r4, #2
 8005b76:	4d5e      	ldr	r5, [pc, #376]	; (8005cf0 <HAL_GPIO_Init+0x194>)
 8005b78:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b7c:	4a5d      	ldr	r2, [pc, #372]	; (8005cf4 <HAL_GPIO_Init+0x198>)
 8005b7e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005b80:	43f2      	mvns	r2, r6
 8005b82:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b86:	684f      	ldr	r7, [r1, #4]
 8005b88:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8005b8c:	d001      	beq.n	8005b92 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8005b8e:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8005b92:	4c58      	ldr	r4, [pc, #352]	; (8005cf4 <HAL_GPIO_Init+0x198>)
 8005b94:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8005b96:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8005b98:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b9c:	684f      	ldr	r7, [r1, #4]
 8005b9e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8005ba2:	d001      	beq.n	8005ba8 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8005ba4:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8005ba8:	4c52      	ldr	r4, [pc, #328]	; (8005cf4 <HAL_GPIO_Init+0x198>)
 8005baa:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bac:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8005bae:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bb2:	684f      	ldr	r7, [r1, #4]
 8005bb4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8005bb8:	d001      	beq.n	8005bbe <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8005bba:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8005bbe:	4c4d      	ldr	r4, [pc, #308]	; (8005cf4 <HAL_GPIO_Init+0x198>)
 8005bc0:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8005bc2:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8005bc4:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bc6:	684d      	ldr	r5, [r1, #4]
 8005bc8:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8005bcc:	d001      	beq.n	8005bd2 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8005bce:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8005bd2:	4c48      	ldr	r4, [pc, #288]	; (8005cf4 <HAL_GPIO_Init+0x198>)
 8005bd4:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	2b0f      	cmp	r3, #15
 8005bda:	f200 8086 	bhi.w	8005cea <HAL_GPIO_Init+0x18e>
    ioposition = 0x01U << position;
 8005bde:	2201      	movs	r2, #1
 8005be0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005be2:	680c      	ldr	r4, [r1, #0]
 8005be4:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8005be8:	42b2      	cmp	r2, r6
 8005bea:	d1f4      	bne.n	8005bd6 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005bec:	684c      	ldr	r4, [r1, #4]
 8005bee:	1e65      	subs	r5, r4, #1
 8005bf0:	2d01      	cmp	r5, #1
 8005bf2:	d903      	bls.n	8005bfc <HAL_GPIO_Init+0xa0>
 8005bf4:	2c11      	cmp	r4, #17
 8005bf6:	d001      	beq.n	8005bfc <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005bf8:	2c12      	cmp	r4, #18
 8005bfa:	d112      	bne.n	8005c22 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8005bfc:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005bfe:	005f      	lsls	r7, r3, #1
 8005c00:	2403      	movs	r4, #3
 8005c02:	40bc      	lsls	r4, r7
 8005c04:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c08:	68cc      	ldr	r4, [r1, #12]
 8005c0a:	40bc      	lsls	r4, r7
 8005c0c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8005c0e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8005c10:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c12:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005c16:	684c      	ldr	r4, [r1, #4]
 8005c18:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8005c1c:	409a      	lsls	r2, r3
 8005c1e:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8005c20:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8005c22:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c24:	005f      	lsls	r7, r3, #1
 8005c26:	2203      	movs	r2, #3
 8005c28:	40ba      	lsls	r2, r7
 8005c2a:	43d2      	mvns	r2, r2
 8005c2c:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c2e:	688d      	ldr	r5, [r1, #8]
 8005c30:	40bd      	lsls	r5, r7
 8005c32:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8005c34:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c36:	684c      	ldr	r4, [r1, #4]
 8005c38:	2c02      	cmp	r4, #2
 8005c3a:	d001      	beq.n	8005c40 <HAL_GPIO_Init+0xe4>
 8005c3c:	2c12      	cmp	r4, #18
 8005c3e:	d113      	bne.n	8005c68 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8005c40:	08dd      	lsrs	r5, r3, #3
 8005c42:	3508      	adds	r5, #8
 8005c44:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c48:	f003 0407 	and.w	r4, r3, #7
 8005c4c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005c50:	240f      	movs	r4, #15
 8005c52:	fa04 f40c 	lsl.w	r4, r4, ip
 8005c56:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c5a:	690c      	ldr	r4, [r1, #16]
 8005c5c:	fa04 f40c 	lsl.w	r4, r4, ip
 8005c60:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005c64:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8005c68:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c6a:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c6c:	684c      	ldr	r4, [r1, #4]
 8005c6e:	f004 0403 	and.w	r4, r4, #3
 8005c72:	40bc      	lsls	r4, r7
 8005c74:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8005c76:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c78:	684a      	ldr	r2, [r1, #4]
 8005c7a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8005c7e:	d0aa      	beq.n	8005bd6 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c80:	2200      	movs	r2, #0
 8005c82:	9201      	str	r2, [sp, #4]
 8005c84:	4a1c      	ldr	r2, [pc, #112]	; (8005cf8 <HAL_GPIO_Init+0x19c>)
 8005c86:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005c88:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8005c8c:	6454      	str	r4, [r2, #68]	; 0x44
 8005c8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c90:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005c94:	9201      	str	r2, [sp, #4]
 8005c96:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005c98:	089c      	lsrs	r4, r3, #2
 8005c9a:	1ca5      	adds	r5, r4, #2
 8005c9c:	4a14      	ldr	r2, [pc, #80]	; (8005cf0 <HAL_GPIO_Init+0x194>)
 8005c9e:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ca2:	f003 0203 	and.w	r2, r3, #3
 8005ca6:	0095      	lsls	r5, r2, #2
 8005ca8:	220f      	movs	r2, #15
 8005caa:	40aa      	lsls	r2, r5
 8005cac:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005cb0:	4a12      	ldr	r2, [pc, #72]	; (8005cfc <HAL_GPIO_Init+0x1a0>)
 8005cb2:	4290      	cmp	r0, r2
 8005cb4:	f43f af5b 	beq.w	8005b6e <HAL_GPIO_Init+0x12>
 8005cb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cbc:	4290      	cmp	r0, r2
 8005cbe:	d00e      	beq.n	8005cde <HAL_GPIO_Init+0x182>
 8005cc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cc4:	4290      	cmp	r0, r2
 8005cc6:	d00c      	beq.n	8005ce2 <HAL_GPIO_Init+0x186>
 8005cc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ccc:	4290      	cmp	r0, r2
 8005cce:	d00a      	beq.n	8005ce6 <HAL_GPIO_Init+0x18a>
 8005cd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cd4:	4290      	cmp	r0, r2
 8005cd6:	f43f af48 	beq.w	8005b6a <HAL_GPIO_Init+0xe>
 8005cda:	2207      	movs	r2, #7
 8005cdc:	e748      	b.n	8005b70 <HAL_GPIO_Init+0x14>
 8005cde:	2201      	movs	r2, #1
 8005ce0:	e746      	b.n	8005b70 <HAL_GPIO_Init+0x14>
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	e744      	b.n	8005b70 <HAL_GPIO_Init+0x14>
 8005ce6:	2203      	movs	r2, #3
 8005ce8:	e742      	b.n	8005b70 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8005cea:	b003      	add	sp, #12
 8005cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cee:	4770      	bx	lr
 8005cf0:	40013800 	.word	0x40013800
 8005cf4:	40013c00 	.word	0x40013c00
 8005cf8:	40023800 	.word	0x40023800
 8005cfc:	40020000 	.word	0x40020000

08005d00 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d00:	6903      	ldr	r3, [r0, #16]
 8005d02:	4219      	tst	r1, r3
 8005d04:	d101      	bne.n	8005d0a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d06:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8005d08:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	4770      	bx	lr

08005d0e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d0e:	b912      	cbnz	r2, 8005d16 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d10:	0409      	lsls	r1, r1, #16
 8005d12:	6181      	str	r1, [r0, #24]
  }
}
 8005d14:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8005d16:	6181      	str	r1, [r0, #24]
 8005d18:	4770      	bx	lr
	...

08005d1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d1c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d1e:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	4203      	tst	r3, r0
 8005d24:	d100      	bne.n	8005d28 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8005d26:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d28:	4b02      	ldr	r3, [pc, #8]	; (8005d34 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005d2a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d2c:	f7fd ffe2 	bl	8003cf4 <HAL_GPIO_EXTI_Callback>
}
 8005d30:	e7f9      	b.n	8005d26 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005d32:	bf00      	nop
 8005d34:	40013c00 	.word	0x40013c00

08005d38 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d38:	6803      	ldr	r3, [r0, #0]
 8005d3a:	695a      	ldr	r2, [r3, #20]
 8005d3c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005d40:	d011      	beq.n	8005d66 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d46:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d52:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d56:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005d58:	f042 0204 	orr.w	r2, r2, #4
 8005d5c:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d5e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8005d62:	2001      	movs	r0, #1
 8005d64:	4770      	bx	lr
  }
  return HAL_OK;
 8005d66:	2000      	movs	r0, #0
}
 8005d68:	4770      	bx	lr

08005d6a <I2C_WaitOnFlagUntilTimeout>:
{
 8005d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6c:	4606      	mov	r6, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	4617      	mov	r7, r2
 8005d72:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d74:	e022      	b.n	8005dbc <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d76:	f7ff fa7d 	bl	8005274 <HAL_GetTick>
 8005d7a:	9b06      	ldr	r3, [sp, #24]
 8005d7c:	1ac0      	subs	r0, r0, r3
 8005d7e:	42a8      	cmp	r0, r5
 8005d80:	d800      	bhi.n	8005d84 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8005d82:	b9dd      	cbnz	r5, 8005dbc <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d8e:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d92:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8005d94:	f042 0220 	orr.w	r2, r2, #32
 8005d98:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005d9a:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8005d9e:	2001      	movs	r0, #1
 8005da0:	e01a      	b.n	8005dd8 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005da2:	6833      	ldr	r3, [r6, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	ea24 0303 	bic.w	r3, r4, r3
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	fab3 f383 	clz	r3, r3
 8005db0:	095b      	lsrs	r3, r3, #5
 8005db2:	429f      	cmp	r7, r3
 8005db4:	d10f      	bne.n	8005dd6 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8005db6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005dba:	d1dc      	bne.n	8005d76 <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dbc:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d0ee      	beq.n	8005da2 <I2C_WaitOnFlagUntilTimeout+0x38>
 8005dc4:	6833      	ldr	r3, [r6, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	ea24 0303 	bic.w	r3, r4, r3
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	fab3 f383 	clz	r3, r3
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	e7ed      	b.n	8005db2 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8005dd6:	2000      	movs	r0, #0
}
 8005dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005dda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ddc:	4604      	mov	r4, r0
 8005dde:	460d      	mov	r5, r1
 8005de0:	4616      	mov	r6, r2
 8005de2:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005de4:	e03c      	b.n	8005e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dec:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005df4:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005df6:	2300      	movs	r3, #0
 8005df8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005e06:	f042 0204 	orr.w	r2, r2, #4
 8005e0a:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005e0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8005e10:	2001      	movs	r0, #1
 8005e12:	e033      	b.n	8005e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e14:	f7ff fa2e 	bl	8005274 <HAL_GetTick>
 8005e18:	1bc0      	subs	r0, r0, r7
 8005e1a:	42b0      	cmp	r0, r6
 8005e1c:	d800      	bhi.n	8005e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8005e1e:	b9fe      	cbnz	r6, 8005e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e20:	2300      	movs	r3, #0
 8005e22:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e24:	2220      	movs	r2, #32
 8005e26:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005e30:	f042 0220 	orr.w	r2, r2, #32
 8005e34:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005e36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005e3a:	2001      	movs	r0, #1
 8005e3c:	e01e      	b.n	8005e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	ea25 0303 	bic.w	r3, r5, r3
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3300      	adds	r3, #0
 8005e4a:	bf18      	it	ne
 8005e4c:	2301      	movne	r3, #1
 8005e4e:	b1a3      	cbz	r3, 8005e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	695a      	ldr	r2, [r3, #20]
 8005e54:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005e58:	d1c5      	bne.n	8005de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8005e5a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8005e5e:	d1d9      	bne.n	8005e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e60:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d0ea      	beq.n	8005e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	ea25 0303 	bic.w	r3, r5, r3
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3300      	adds	r3, #0
 8005e74:	bf18      	it	ne
 8005e76:	2301      	movne	r3, #1
 8005e78:	e7e9      	b.n	8005e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8005e7a:	2000      	movs	r0, #0
}
 8005e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e7e <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005e7e:	b570      	push	{r4, r5, r6, lr}
 8005e80:	4604      	mov	r4, r0
 8005e82:	460d      	mov	r5, r1
 8005e84:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e8e:	d11c      	bne.n	8005eca <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e90:	4620      	mov	r0, r4
 8005e92:	f7ff ff51 	bl	8005d38 <I2C_IsAcknowledgeFailed>
 8005e96:	b9d0      	cbnz	r0, 8005ece <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005e98:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005e9c:	d0f3      	beq.n	8005e86 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9e:	f7ff f9e9 	bl	8005274 <HAL_GetTick>
 8005ea2:	1b80      	subs	r0, r0, r6
 8005ea4:	42a8      	cmp	r0, r5
 8005ea6:	d801      	bhi.n	8005eac <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	d1ec      	bne.n	8005e86 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005eac:	2300      	movs	r3, #0
 8005eae:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eb6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005ebc:	f042 0220 	orr.w	r2, r2, #32
 8005ec0:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005ec2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	e000      	b.n	8005ecc <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8005eca:	2000      	movs	r0, #0
}
 8005ecc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005ece:	2001      	movs	r0, #1
 8005ed0:	e7fc      	b.n	8005ecc <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08005ed4 <I2C_RequestMemoryWrite>:
{
 8005ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	4604      	mov	r4, r0
 8005edc:	4688      	mov	r8, r1
 8005ede:	4616      	mov	r6, r2
 8005ee0:	461f      	mov	r7, r3
 8005ee2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ee4:	6802      	ldr	r2, [r0, #0]
 8005ee6:	6813      	ldr	r3, [r2, #0]
 8005ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eec:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eee:	9500      	str	r5, [sp, #0]
 8005ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ef8:	f7ff ff37 	bl	8005d6a <I2C_WaitOnFlagUntilTimeout>
 8005efc:	b160      	cbz	r0, 8005f18 <I2C_RequestMemoryWrite+0x44>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005f06:	d04f      	beq.n	8005fa8 <I2C_RequestMemoryWrite+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f0c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	b004      	add	sp, #16
 8005f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f18:	6822      	ldr	r2, [r4, #0]
 8005f1a:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8005f1e:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f20:	462b      	mov	r3, r5
 8005f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f24:	4921      	ldr	r1, [pc, #132]	; (8005fac <I2C_RequestMemoryWrite+0xd8>)
 8005f26:	4620      	mov	r0, r4
 8005f28:	f7ff ff57 	bl	8005dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f2c:	b108      	cbz	r0, 8005f32 <I2C_RequestMemoryWrite+0x5e>
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e7ee      	b.n	8005f10 <I2C_RequestMemoryWrite+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f32:	2300      	movs	r3, #0
 8005f34:	9303      	str	r3, [sp, #12]
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	695a      	ldr	r2, [r3, #20]
 8005f3a:	9203      	str	r2, [sp, #12]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	9303      	str	r3, [sp, #12]
 8005f40:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f42:	462a      	mov	r2, r5
 8005f44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f46:	4620      	mov	r0, r4
 8005f48:	f7ff ff99 	bl	8005e7e <I2C_WaitOnTXEFlagUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	b158      	cbz	r0, 8005f68 <I2C_RequestMemoryWrite+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d001      	beq.n	8005f5a <I2C_RequestMemoryWrite+0x86>
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e7da      	b.n	8005f10 <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5a:	6822      	ldr	r2, [r4, #0]
 8005f5c:	6813      	ldr	r3, [r2, #0]
 8005f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f62:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e7d3      	b.n	8005f10 <I2C_RequestMemoryWrite+0x3c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f68:	2f01      	cmp	r7, #1
 8005f6a:	d00e      	beq.n	8005f8a <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	0a32      	lsrs	r2, r6, #8
 8005f70:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f72:	462a      	mov	r2, r5
 8005f74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f76:	4620      	mov	r0, r4
 8005f78:	f7ff ff81 	bl	8005e7e <I2C_WaitOnTXEFlagUntilTimeout>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	b178      	cbz	r0, 8005fa0 <I2C_RequestMemoryWrite+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d005      	beq.n	8005f92 <I2C_RequestMemoryWrite+0xbe>
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e7c2      	b.n	8005f10 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f8a:	6822      	ldr	r2, [r4, #0]
 8005f8c:	b2f6      	uxtb	r6, r6
 8005f8e:	6116      	str	r6, [r2, #16]
 8005f90:	e7be      	b.n	8005f10 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f92:	6822      	ldr	r2, [r4, #0]
 8005f94:	6813      	ldr	r3, [r2, #0]
 8005f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f9a:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e7b7      	b.n	8005f10 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fa0:	6822      	ldr	r2, [r4, #0]
 8005fa2:	b2f6      	uxtb	r6, r6
 8005fa4:	6116      	str	r6, [r2, #16]
 8005fa6:	e7b3      	b.n	8005f10 <I2C_RequestMemoryWrite+0x3c>
    return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e7b1      	b.n	8005f10 <I2C_RequestMemoryWrite+0x3c>
 8005fac:	00010002 	.word	0x00010002

08005fb0 <I2C_RequestMemoryRead>:
{
 8005fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	460e      	mov	r6, r1
 8005fba:	4617      	mov	r7, r2
 8005fbc:	4698      	mov	r8, r3
 8005fbe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fc0:	6802      	ldr	r2, [r0, #0]
 8005fc2:	6813      	ldr	r3, [r2, #0]
 8005fc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fc8:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fca:	6802      	ldr	r2, [r0, #0]
 8005fcc:	6813      	ldr	r3, [r2, #0]
 8005fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fd4:	9500      	str	r5, [sp, #0]
 8005fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fde:	f7ff fec4 	bl	8005d6a <I2C_WaitOnFlagUntilTimeout>
 8005fe2:	b168      	cbz	r0, 8006000 <I2C_RequestMemoryRead+0x50>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005fec:	f000 8089 	beq.w	8006102 <I2C_RequestMemoryRead+0x152>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ff4:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	b004      	add	sp, #16
 8005ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006000:	b2f6      	uxtb	r6, r6
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 8006008:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800600a:	462b      	mov	r3, r5
 800600c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800600e:	493f      	ldr	r1, [pc, #252]	; (800610c <I2C_RequestMemoryRead+0x15c>)
 8006010:	4620      	mov	r0, r4
 8006012:	f7ff fee2 	bl	8005dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006016:	b108      	cbz	r0, 800601c <I2C_RequestMemoryRead+0x6c>
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e7ed      	b.n	8005ff8 <I2C_RequestMemoryRead+0x48>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800601c:	2300      	movs	r3, #0
 800601e:	9303      	str	r3, [sp, #12]
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	695a      	ldr	r2, [r3, #20]
 8006024:	9203      	str	r2, [sp, #12]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	9303      	str	r3, [sp, #12]
 800602a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800602c:	462a      	mov	r2, r5
 800602e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006030:	4620      	mov	r0, r4
 8006032:	f7ff ff24 	bl	8005e7e <I2C_WaitOnTXEFlagUntilTimeout>
 8006036:	b158      	cbz	r0, 8006050 <I2C_RequestMemoryRead+0xa0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006038:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800603a:	2b04      	cmp	r3, #4
 800603c:	d001      	beq.n	8006042 <I2C_RequestMemoryRead+0x92>
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e7da      	b.n	8005ff8 <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006042:	6822      	ldr	r2, [r4, #0]
 8006044:	6813      	ldr	r3, [r2, #0]
 8006046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800604a:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e7d3      	b.n	8005ff8 <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006050:	f1b8 0f01 	cmp.w	r8, #1
 8006054:	d10d      	bne.n	8006072 <I2C_RequestMemoryRead+0xc2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	b2ff      	uxtb	r7, r7
 800605a:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800605c:	462a      	mov	r2, r5
 800605e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006060:	4620      	mov	r0, r4
 8006062:	f7ff ff0c 	bl	8005e7e <I2C_WaitOnTXEFlagUntilTimeout>
 8006066:	b320      	cbz	r0, 80060b2 <I2C_RequestMemoryRead+0x102>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006068:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800606a:	2b04      	cmp	r3, #4
 800606c:	d01a      	beq.n	80060a4 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e7c2      	b.n	8005ff8 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	0a3a      	lsrs	r2, r7, #8
 8006076:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006078:	462a      	mov	r2, r5
 800607a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800607c:	4620      	mov	r0, r4
 800607e:	f7ff fefe 	bl	8005e7e <I2C_WaitOnTXEFlagUntilTimeout>
 8006082:	b158      	cbz	r0, 800609c <I2C_RequestMemoryRead+0xec>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006084:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006086:	2b04      	cmp	r3, #4
 8006088:	d001      	beq.n	800608e <I2C_RequestMemoryRead+0xde>
      return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e7b4      	b.n	8005ff8 <I2C_RequestMemoryRead+0x48>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800608e:	6822      	ldr	r2, [r4, #0]
 8006090:	6813      	ldr	r3, [r2, #0]
 8006092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006096:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e7ad      	b.n	8005ff8 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	b2ff      	uxtb	r7, r7
 80060a0:	611f      	str	r7, [r3, #16]
 80060a2:	e7db      	b.n	800605c <I2C_RequestMemoryRead+0xac>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a4:	6822      	ldr	r2, [r4, #0]
 80060a6:	6813      	ldr	r3, [r2, #0]
 80060a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060ac:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e7a2      	b.n	8005ff8 <I2C_RequestMemoryRead+0x48>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060b2:	6822      	ldr	r2, [r4, #0]
 80060b4:	6813      	ldr	r3, [r2, #0]
 80060b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ba:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060bc:	9500      	str	r5, [sp, #0]
 80060be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c0:	2200      	movs	r2, #0
 80060c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060c6:	4620      	mov	r0, r4
 80060c8:	f7ff fe4f 	bl	8005d6a <I2C_WaitOnFlagUntilTimeout>
 80060cc:	b148      	cbz	r0, 80060e2 <I2C_RequestMemoryRead+0x132>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80060d6:	d016      	beq.n	8006106 <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060dc:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e78a      	b.n	8005ff8 <I2C_RequestMemoryRead+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	f046 0601 	orr.w	r6, r6, #1
 80060e8:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060ea:	462b      	mov	r3, r5
 80060ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060ee:	4907      	ldr	r1, [pc, #28]	; (800610c <I2C_RequestMemoryRead+0x15c>)
 80060f0:	4620      	mov	r0, r4
 80060f2:	f7ff fe72 	bl	8005dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2800      	cmp	r0, #0
 80060fa:	f43f af7d 	beq.w	8005ff8 <I2C_RequestMemoryRead+0x48>
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e77a      	b.n	8005ff8 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e778      	b.n	8005ff8 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e776      	b.n	8005ff8 <I2C_RequestMemoryRead+0x48>
 800610a:	bf00      	nop
 800610c:	00010002 	.word	0x00010002

08006110 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	4604      	mov	r4, r0
 8006114:	460d      	mov	r5, r1
 8006116:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	f013 0f04 	tst.w	r3, #4
 8006120:	d11c      	bne.n	800615c <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006122:	4620      	mov	r0, r4
 8006124:	f7ff fe08 	bl	8005d38 <I2C_IsAcknowledgeFailed>
 8006128:	b9d0      	cbnz	r0, 8006160 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800612a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800612e:	d0f3      	beq.n	8006118 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006130:	f7ff f8a0 	bl	8005274 <HAL_GetTick>
 8006134:	1b80      	subs	r0, r0, r6
 8006136:	42a8      	cmp	r0, r5
 8006138:	d801      	bhi.n	800613e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800613a:	2d00      	cmp	r5, #0
 800613c:	d1ec      	bne.n	8006118 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800613e:	2300      	movs	r3, #0
 8006140:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006142:	2220      	movs	r2, #32
 8006144:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006148:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800614c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800614e:	f042 0220 	orr.w	r2, r2, #32
 8006152:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006154:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8006158:	2001      	movs	r0, #1
 800615a:	e000      	b.n	800615e <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 800615c:	2000      	movs	r0, #0
}
 800615e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006160:	2001      	movs	r0, #1
 8006162:	e7fc      	b.n	800615e <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08006164 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	4605      	mov	r5, r0
 8006168:	460c      	mov	r4, r1
 800616a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	695a      	ldr	r2, [r3, #20]
 8006170:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006174:	d129      	bne.n	80061ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006176:	695a      	ldr	r2, [r3, #20]
 8006178:	f012 0f10 	tst.w	r2, #16
 800617c:	d115      	bne.n	80061aa <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800617e:	f7ff f879 	bl	8005274 <HAL_GetTick>
 8006182:	1b80      	subs	r0, r0, r6
 8006184:	42a0      	cmp	r0, r4
 8006186:	d801      	bhi.n	800618c <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8006188:	2c00      	cmp	r4, #0
 800618a:	d1ef      	bne.n	800616c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800618c:	2300      	movs	r3, #0
 800618e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006190:	2220      	movs	r2, #32
 8006192:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006196:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800619a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800619c:	f042 0220 	orr.w	r2, r2, #32
 80061a0:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80061a2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80061a6:	2001      	movs	r0, #1
}
 80061a8:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061aa:	f06f 0210 	mvn.w	r2, #16
 80061ae:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80061b0:	2300      	movs	r3, #0
 80061b2:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061b4:	2220      	movs	r2, #32
 80061b6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ba:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061be:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80061c0:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80061c2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80061c6:	2001      	movs	r0, #1
 80061c8:	e7ee      	b.n	80061a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 80061ca:	2000      	movs	r0, #0
 80061cc:	e7ec      	b.n	80061a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

080061d0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80061d0:	2800      	cmp	r0, #0
 80061d2:	f000 80c8 	beq.w	8006366 <HAL_I2C_Init+0x196>
{
 80061d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d075      	beq.n	80062ce <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80061e2:	2324      	movs	r3, #36	; 0x24
 80061e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80061e8:	6822      	ldr	r2, [r4, #0]
 80061ea:	6813      	ldr	r3, [r2, #0]
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061f2:	6822      	ldr	r2, [r4, #0]
 80061f4:	6813      	ldr	r3, [r2, #0]
 80061f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fa:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061fc:	6822      	ldr	r2, [r4, #0]
 80061fe:	6813      	ldr	r3, [r2, #0]
 8006200:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006204:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006206:	f000 fea7 	bl	8006f58 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800620a:	6862      	ldr	r2, [r4, #4]
 800620c:	4b58      	ldr	r3, [pc, #352]	; (8006370 <HAL_I2C_Init+0x1a0>)
 800620e:	429a      	cmp	r2, r3
 8006210:	d862      	bhi.n	80062d8 <HAL_I2C_Init+0x108>
 8006212:	4b58      	ldr	r3, [pc, #352]	; (8006374 <HAL_I2C_Init+0x1a4>)
 8006214:	4298      	cmp	r0, r3
 8006216:	bf8c      	ite	hi
 8006218:	2300      	movhi	r3, #0
 800621a:	2301      	movls	r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	f040 80a4 	bne.w	800636a <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 8006222:	4b55      	ldr	r3, [pc, #340]	; (8006378 <HAL_I2C_Init+0x1a8>)
 8006224:	fba3 2300 	umull	r2, r3, r3, r0
 8006228:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800622a:	6821      	ldr	r1, [r4, #0]
 800622c:	684a      	ldr	r2, [r1, #4]
 800622e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006232:	431a      	orrs	r2, r3
 8006234:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006236:	6825      	ldr	r5, [r4, #0]
 8006238:	6a2a      	ldr	r2, [r5, #32]
 800623a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800623e:	6866      	ldr	r6, [r4, #4]
 8006240:	494b      	ldr	r1, [pc, #300]	; (8006370 <HAL_I2C_Init+0x1a0>)
 8006242:	428e      	cmp	r6, r1
 8006244:	d84e      	bhi.n	80062e4 <HAL_I2C_Init+0x114>
 8006246:	3301      	adds	r3, #1
 8006248:	4313      	orrs	r3, r2
 800624a:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800624c:	6825      	ldr	r5, [r4, #0]
 800624e:	69e9      	ldr	r1, [r5, #28]
 8006250:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8006254:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006258:	6863      	ldr	r3, [r4, #4]
 800625a:	4a45      	ldr	r2, [pc, #276]	; (8006370 <HAL_I2C_Init+0x1a0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d84b      	bhi.n	80062f8 <HAL_I2C_Init+0x128>
 8006260:	3801      	subs	r0, #1
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	fbb0 f3f3 	udiv	r3, r0, r3
 8006268:	3301      	adds	r3, #1
 800626a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800626e:	2b04      	cmp	r3, #4
 8006270:	bf38      	it	cc
 8006272:	2304      	movcc	r3, #4
 8006274:	430b      	orrs	r3, r1
 8006276:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006278:	6821      	ldr	r1, [r4, #0]
 800627a:	680b      	ldr	r3, [r1, #0]
 800627c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006280:	69e2      	ldr	r2, [r4, #28]
 8006282:	6a20      	ldr	r0, [r4, #32]
 8006284:	4302      	orrs	r2, r0
 8006286:	4313      	orrs	r3, r2
 8006288:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800628a:	6821      	ldr	r1, [r4, #0]
 800628c:	688b      	ldr	r3, [r1, #8]
 800628e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006292:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006296:	6922      	ldr	r2, [r4, #16]
 8006298:	68e0      	ldr	r0, [r4, #12]
 800629a:	4302      	orrs	r2, r0
 800629c:	4313      	orrs	r3, r2
 800629e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062a0:	6821      	ldr	r1, [r4, #0]
 80062a2:	68cb      	ldr	r3, [r1, #12]
 80062a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062a8:	6962      	ldr	r2, [r4, #20]
 80062aa:	69a0      	ldr	r0, [r4, #24]
 80062ac:	4302      	orrs	r2, r0
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	6813      	ldr	r3, [r2, #0]
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062bc:	2000      	movs	r0, #0
 80062be:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062c0:	2320      	movs	r3, #32
 80062c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062c6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80062cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80062ce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80062d2:	f7fe f8c7 	bl	8004464 <HAL_I2C_MspInit>
 80062d6:	e784      	b.n	80061e2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062d8:	4b28      	ldr	r3, [pc, #160]	; (800637c <HAL_I2C_Init+0x1ac>)
 80062da:	4298      	cmp	r0, r3
 80062dc:	bf8c      	ite	hi
 80062de:	2300      	movhi	r3, #0
 80062e0:	2301      	movls	r3, #1
 80062e2:	e79b      	b.n	800621c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062e4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80062e8:	fb01 f303 	mul.w	r3, r1, r3
 80062ec:	4924      	ldr	r1, [pc, #144]	; (8006380 <HAL_I2C_Init+0x1b0>)
 80062ee:	fba1 1303 	umull	r1, r3, r1, r3
 80062f2:	099b      	lsrs	r3, r3, #6
 80062f4:	3301      	adds	r3, #1
 80062f6:	e7a7      	b.n	8006248 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80062f8:	68a2      	ldr	r2, [r4, #8]
 80062fa:	b9ba      	cbnz	r2, 800632c <HAL_I2C_Init+0x15c>
 80062fc:	1e46      	subs	r6, r0, #1
 80062fe:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8006302:	fbb6 f6f7 	udiv	r6, r6, r7
 8006306:	3601      	adds	r6, #1
 8006308:	f3c6 060b 	ubfx	r6, r6, #0, #12
 800630c:	fab6 f686 	clz	r6, r6
 8006310:	0976      	lsrs	r6, r6, #5
 8006312:	bb36      	cbnz	r6, 8006362 <HAL_I2C_Init+0x192>
 8006314:	b9c2      	cbnz	r2, 8006348 <HAL_I2C_Init+0x178>
 8006316:	3801      	subs	r0, #1
 8006318:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800631c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006320:	3301      	adds	r3, #1
 8006322:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8006326:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800632a:	e7a3      	b.n	8006274 <HAL_I2C_Init+0xa4>
 800632c:	1e46      	subs	r6, r0, #1
 800632e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8006332:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8006336:	fbb6 f6f7 	udiv	r6, r6, r7
 800633a:	3601      	adds	r6, #1
 800633c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8006340:	fab6 f686 	clz	r6, r6
 8006344:	0976      	lsrs	r6, r6, #5
 8006346:	e7e4      	b.n	8006312 <HAL_I2C_Init+0x142>
 8006348:	3801      	subs	r0, #1
 800634a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800634e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006352:	fbb0 f2f3 	udiv	r2, r0, r3
 8006356:	3201      	adds	r2, #1
 8006358:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800635c:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8006360:	e788      	b.n	8006274 <HAL_I2C_Init+0xa4>
 8006362:	2301      	movs	r3, #1
 8006364:	e786      	b.n	8006274 <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 8006366:	2001      	movs	r0, #1
}
 8006368:	4770      	bx	lr
    return HAL_ERROR;
 800636a:	2001      	movs	r0, #1
 800636c:	e7ae      	b.n	80062cc <HAL_I2C_Init+0xfc>
 800636e:	bf00      	nop
 8006370:	000186a0 	.word	0x000186a0
 8006374:	001e847f 	.word	0x001e847f
 8006378:	431bde83 	.word	0x431bde83
 800637c:	003d08ff 	.word	0x003d08ff
 8006380:	10624dd3 	.word	0x10624dd3

08006384 <HAL_I2C_Mem_Write>:
{
 8006384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	4604      	mov	r4, r0
 800638c:	460e      	mov	r6, r1
 800638e:	4617      	mov	r7, r2
 8006390:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8006392:	f7fe ff6f 	bl	8005274 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006396:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b20      	cmp	r3, #32
 800639e:	d004      	beq.n	80063aa <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 80063a0:	2302      	movs	r3, #2
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	b002      	add	sp, #8
 80063a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063aa:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063ac:	9000      	str	r0, [sp, #0]
 80063ae:	2319      	movs	r3, #25
 80063b0:	2201      	movs	r2, #1
 80063b2:	494c      	ldr	r1, [pc, #304]	; (80064e4 <HAL_I2C_Mem_Write+0x160>)
 80063b4:	4620      	mov	r0, r4
 80063b6:	f7ff fcd8 	bl	8005d6a <I2C_WaitOnFlagUntilTimeout>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	f040 808b 	bne.w	80064d6 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 80063c0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	f000 8088 	beq.w	80064da <HAL_I2C_Mem_Write+0x156>
 80063ca:	2301      	movs	r3, #1
 80063cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	f012 0f01 	tst.w	r2, #1
 80063d8:	d103      	bne.n	80063e2 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	f042 0201 	orr.w	r2, r2, #1
 80063e0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063e2:	6822      	ldr	r2, [r4, #0]
 80063e4:	6813      	ldr	r3, [r2, #0]
 80063e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063ea:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063ec:	2321      	movs	r3, #33	; 0x21
 80063ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063f2:	2340      	movs	r3, #64	; 0x40
 80063f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063f8:	2300      	movs	r3, #0
 80063fa:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80063fc:	9b08      	ldr	r3, [sp, #32]
 80063fe:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006400:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8006404:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006406:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006408:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800640a:	4b37      	ldr	r3, [pc, #220]	; (80064e8 <HAL_I2C_Mem_Write+0x164>)
 800640c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800640e:	9501      	str	r5, [sp, #4]
 8006410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	4643      	mov	r3, r8
 8006416:	463a      	mov	r2, r7
 8006418:	4631      	mov	r1, r6
 800641a:	4620      	mov	r0, r4
 800641c:	f7ff fd5a 	bl	8005ed4 <I2C_RequestMemoryWrite>
 8006420:	2800      	cmp	r0, #0
 8006422:	d15c      	bne.n	80064de <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 8006424:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006426:	2b00      	cmp	r3, #0
 8006428:	d034      	beq.n	8006494 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800642a:	462a      	mov	r2, r5
 800642c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800642e:	4620      	mov	r0, r4
 8006430:	f7ff fd25 	bl	8005e7e <I2C_WaitOnTXEFlagUntilTimeout>
 8006434:	bb10      	cbnz	r0, 800647c <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006436:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	7812      	ldrb	r2, [r2, #0]
 800643c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800643e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006440:	1c4b      	adds	r3, r1, #1
 8006442:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006444:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006446:	3b01      	subs	r3, #1
 8006448:	b29b      	uxth	r3, r3
 800644a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800644c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800644e:	3a01      	subs	r2, #1
 8006450:	b292      	uxth	r2, r2
 8006452:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006454:	6822      	ldr	r2, [r4, #0]
 8006456:	6950      	ldr	r0, [r2, #20]
 8006458:	f010 0f04 	tst.w	r0, #4
 800645c:	d0e2      	beq.n	8006424 <HAL_I2C_Mem_Write+0xa0>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0e0      	beq.n	8006424 <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006462:	784b      	ldrb	r3, [r1, #1]
 8006464:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8006466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006468:	3301      	adds	r3, #1
 800646a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800646c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800646e:	3b01      	subs	r3, #1
 8006470:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006472:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006474:	3b01      	subs	r3, #1
 8006476:	b29b      	uxth	r3, r3
 8006478:	8563      	strh	r3, [r4, #42]	; 0x2a
 800647a:	e7d3      	b.n	8006424 <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800647c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800647e:	2b04      	cmp	r3, #4
 8006480:	d001      	beq.n	8006486 <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e78d      	b.n	80063a2 <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006486:	6822      	ldr	r2, [r4, #0]
 8006488:	6813      	ldr	r3, [r2, #0]
 800648a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800648e:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e786      	b.n	80063a2 <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006494:	462a      	mov	r2, r5
 8006496:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006498:	4620      	mov	r0, r4
 800649a:	f7ff fe39 	bl	8006110 <I2C_WaitOnBTFFlagUntilTimeout>
 800649e:	4603      	mov	r3, r0
 80064a0:	b158      	cbz	r0, 80064ba <HAL_I2C_Mem_Write+0x136>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d001      	beq.n	80064ac <HAL_I2C_Mem_Write+0x128>
      return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e77a      	b.n	80063a2 <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ac:	6822      	ldr	r2, [r4, #0]
 80064ae:	6813      	ldr	r3, [r2, #0]
 80064b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064b4:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e773      	b.n	80063a2 <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ba:	6821      	ldr	r1, [r4, #0]
 80064bc:	680a      	ldr	r2, [r1, #0]
 80064be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80064c4:	2220      	movs	r2, #32
 80064c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ca:	2200      	movs	r2, #0
 80064cc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80064d0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 80064d4:	e765      	b.n	80063a2 <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 80064d6:	2302      	movs	r3, #2
 80064d8:	e763      	b.n	80063a2 <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 80064da:	2302      	movs	r3, #2
 80064dc:	e761      	b.n	80063a2 <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e75f      	b.n	80063a2 <HAL_I2C_Mem_Write+0x1e>
 80064e2:	bf00      	nop
 80064e4:	00100002 	.word	0x00100002
 80064e8:	ffff0000 	.word	0xffff0000

080064ec <HAL_I2C_Mem_Read>:
{
 80064ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f0:	b086      	sub	sp, #24
 80064f2:	4604      	mov	r4, r0
 80064f4:	460e      	mov	r6, r1
 80064f6:	4617      	mov	r7, r2
 80064f8:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 80064fa:	f7fe febb 	bl	8005274 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80064fe:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b20      	cmp	r3, #32
 8006506:	d004      	beq.n	8006512 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8006508:	2602      	movs	r6, #2
}
 800650a:	4630      	mov	r0, r6
 800650c:	b006      	add	sp, #24
 800650e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006512:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006514:	9000      	str	r0, [sp, #0]
 8006516:	2319      	movs	r3, #25
 8006518:	2201      	movs	r2, #1
 800651a:	499e      	ldr	r1, [pc, #632]	; (8006794 <HAL_I2C_Mem_Read+0x2a8>)
 800651c:	4620      	mov	r0, r4
 800651e:	f7ff fc24 	bl	8005d6a <I2C_WaitOnFlagUntilTimeout>
 8006522:	2800      	cmp	r0, #0
 8006524:	f040 8134 	bne.w	8006790 <HAL_I2C_Mem_Read+0x2a4>
    __HAL_LOCK(hi2c);
 8006528:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800652c:	2b01      	cmp	r3, #1
 800652e:	f000 8137 	beq.w	80067a0 <HAL_I2C_Mem_Read+0x2b4>
 8006532:	2301      	movs	r3, #1
 8006534:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	f012 0f01 	tst.w	r2, #1
 8006540:	d103      	bne.n	800654a <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	f042 0201 	orr.w	r2, r2, #1
 8006548:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800654a:	6822      	ldr	r2, [r4, #0]
 800654c:	6813      	ldr	r3, [r2, #0]
 800654e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006552:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006554:	2322      	movs	r3, #34	; 0x22
 8006556:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800655a:	2340      	movs	r3, #64	; 0x40
 800655c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006560:	2300      	movs	r3, #0
 8006562:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006566:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006568:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800656c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800656e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006570:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006572:	4b89      	ldr	r3, [pc, #548]	; (8006798 <HAL_I2C_Mem_Read+0x2ac>)
 8006574:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006576:	9501      	str	r5, [sp, #4]
 8006578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	4643      	mov	r3, r8
 800657e:	463a      	mov	r2, r7
 8006580:	4631      	mov	r1, r6
 8006582:	4620      	mov	r0, r4
 8006584:	f7ff fd14 	bl	8005fb0 <I2C_RequestMemoryRead>
 8006588:	4606      	mov	r6, r0
 800658a:	2800      	cmp	r0, #0
 800658c:	f040 810a 	bne.w	80067a4 <HAL_I2C_Mem_Read+0x2b8>
    if (hi2c->XferSize == 0U)
 8006590:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006592:	b95b      	cbnz	r3, 80065ac <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006594:	9302      	str	r3, [sp, #8]
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	695a      	ldr	r2, [r3, #20]
 800659a:	9202      	str	r2, [sp, #8]
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	9202      	str	r2, [sp, #8]
 80065a0:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	e072      	b.n	8006692 <HAL_I2C_Mem_Read+0x1a6>
    else if (hi2c->XferSize == 1U)
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d00a      	beq.n	80065c6 <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d01a      	beq.n	80065ea <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065b4:	2300      	movs	r3, #0
 80065b6:	9305      	str	r3, [sp, #20]
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	695a      	ldr	r2, [r3, #20]
 80065bc:	9205      	str	r2, [sp, #20]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	9305      	str	r3, [sp, #20]
 80065c2:	9b05      	ldr	r3, [sp, #20]
 80065c4:	e065      	b.n	8006692 <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c6:	6822      	ldr	r2, [r4, #0]
 80065c8:	6813      	ldr	r3, [r2, #0]
 80065ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ce:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065d0:	2300      	movs	r3, #0
 80065d2:	9303      	str	r3, [sp, #12]
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	695a      	ldr	r2, [r3, #20]
 80065d8:	9203      	str	r2, [sp, #12]
 80065da:	699a      	ldr	r2, [r3, #24]
 80065dc:	9203      	str	r2, [sp, #12]
 80065de:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	e053      	b.n	8006692 <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	6813      	ldr	r3, [r2, #0]
 80065ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065f2:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065f4:	6822      	ldr	r2, [r4, #0]
 80065f6:	6813      	ldr	r3, [r2, #0]
 80065f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065fc:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065fe:	2300      	movs	r3, #0
 8006600:	9304      	str	r3, [sp, #16]
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	695a      	ldr	r2, [r3, #20]
 8006606:	9204      	str	r2, [sp, #16]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	9304      	str	r3, [sp, #16]
 800660c:	9b04      	ldr	r3, [sp, #16]
 800660e:	e040      	b.n	8006692 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006610:	462a      	mov	r2, r5
 8006612:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006614:	4620      	mov	r0, r4
 8006616:	f7ff fda5 	bl	8006164 <I2C_WaitOnRXNEFlagUntilTimeout>
 800661a:	2800      	cmp	r0, #0
 800661c:	f040 80c4 	bne.w	80067a8 <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	691a      	ldr	r2, [r3, #16]
 8006624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006626:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800662a:	3301      	adds	r3, #1
 800662c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800662e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006630:	3b01      	subs	r3, #1
 8006632:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006634:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006636:	3b01      	subs	r3, #1
 8006638:	b29b      	uxth	r3, r3
 800663a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800663c:	e029      	b.n	8006692 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800663e:	9500      	str	r5, [sp, #0]
 8006640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006642:	2200      	movs	r2, #0
 8006644:	4955      	ldr	r1, [pc, #340]	; (800679c <HAL_I2C_Mem_Read+0x2b0>)
 8006646:	4620      	mov	r0, r4
 8006648:	f7ff fb8f 	bl	8005d6a <I2C_WaitOnFlagUntilTimeout>
 800664c:	2800      	cmp	r0, #0
 800664e:	f040 80ad 	bne.w	80067ac <HAL_I2C_Mem_Read+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006652:	6822      	ldr	r2, [r4, #0]
 8006654:	6813      	ldr	r3, [r2, #0]
 8006656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800665a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006662:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006664:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006666:	1c53      	adds	r3, r2, #1
 8006668:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800666a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800666c:	3b01      	subs	r3, #1
 800666e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006670:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006672:	3b01      	subs	r3, #1
 8006674:	b29b      	uxth	r3, r3
 8006676:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800667e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006680:	3301      	adds	r3, #1
 8006682:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006684:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006686:	3b01      	subs	r3, #1
 8006688:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800668a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800668c:	3b01      	subs	r3, #1
 800668e:	b29b      	uxth	r3, r3
 8006690:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006692:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006694:	2b00      	cmp	r3, #0
 8006696:	d072      	beq.n	800677e <HAL_I2C_Mem_Read+0x292>
      if (hi2c->XferSize <= 3U)
 8006698:	2b03      	cmp	r3, #3
 800669a:	d849      	bhi.n	8006730 <HAL_I2C_Mem_Read+0x244>
        if (hi2c->XferSize == 1U)
 800669c:	2b01      	cmp	r3, #1
 800669e:	d0b7      	beq.n	8006610 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d0cc      	beq.n	800663e <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066a4:	9500      	str	r5, [sp, #0]
 80066a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066a8:	2200      	movs	r2, #0
 80066aa:	493c      	ldr	r1, [pc, #240]	; (800679c <HAL_I2C_Mem_Read+0x2b0>)
 80066ac:	4620      	mov	r0, r4
 80066ae:	f7ff fb5c 	bl	8005d6a <I2C_WaitOnFlagUntilTimeout>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d17c      	bne.n	80067b0 <HAL_I2C_Mem_Read+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	6813      	ldr	r3, [r2, #0]
 80066ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066be:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c0:	6823      	ldr	r3, [r4, #0]
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066c6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80066c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066ca:	3301      	adds	r3, #1
 80066cc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80066ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80066d0:	3b01      	subs	r3, #1
 80066d2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80066d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29b      	uxth	r3, r3
 80066da:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066dc:	9500      	str	r5, [sp, #0]
 80066de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066e0:	2200      	movs	r2, #0
 80066e2:	492e      	ldr	r1, [pc, #184]	; (800679c <HAL_I2C_Mem_Read+0x2b0>)
 80066e4:	4620      	mov	r0, r4
 80066e6:	f7ff fb40 	bl	8005d6a <I2C_WaitOnFlagUntilTimeout>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d162      	bne.n	80067b4 <HAL_I2C_Mem_Read+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ee:	6822      	ldr	r2, [r4, #0]
 80066f0:	6813      	ldr	r3, [r2, #0]
 80066f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066f6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	691a      	ldr	r2, [r3, #16]
 80066fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066fe:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006700:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006702:	1c53      	adds	r3, r2, #1
 8006704:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006706:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006708:	3b01      	subs	r3, #1
 800670a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800670c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800670e:	3b01      	subs	r3, #1
 8006710:	b29b      	uxth	r3, r3
 8006712:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800671a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800671c:	3301      	adds	r3, #1
 800671e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006720:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006722:	3b01      	subs	r3, #1
 8006724:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006726:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006728:	3b01      	subs	r3, #1
 800672a:	b29b      	uxth	r3, r3
 800672c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800672e:	e7b0      	b.n	8006692 <HAL_I2C_Mem_Read+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006730:	462a      	mov	r2, r5
 8006732:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006734:	4620      	mov	r0, r4
 8006736:	f7ff fd15 	bl	8006164 <I2C_WaitOnRXNEFlagUntilTimeout>
 800673a:	2800      	cmp	r0, #0
 800673c:	d13c      	bne.n	80067b8 <HAL_I2C_Mem_Read+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	691a      	ldr	r2, [r3, #16]
 8006742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006744:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006746:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006748:	1c53      	adds	r3, r2, #1
 800674a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800674c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800674e:	3b01      	subs	r3, #1
 8006750:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006752:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006754:	3b01      	subs	r3, #1
 8006756:	b29b      	uxth	r3, r3
 8006758:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	6959      	ldr	r1, [r3, #20]
 800675e:	f011 0f04 	tst.w	r1, #4
 8006762:	d096      	beq.n	8006692 <HAL_I2C_Mem_Read+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8006768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800676a:	3301      	adds	r3, #1
 800676c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800676e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006770:	3b01      	subs	r3, #1
 8006772:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006774:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006776:	3b01      	subs	r3, #1
 8006778:	b29b      	uxth	r3, r3
 800677a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800677c:	e789      	b.n	8006692 <HAL_I2C_Mem_Read+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800677e:	2320      	movs	r3, #32
 8006780:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006784:	2300      	movs	r3, #0
 8006786:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800678a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800678e:	e6bc      	b.n	800650a <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 8006790:	2602      	movs	r6, #2
 8006792:	e6ba      	b.n	800650a <HAL_I2C_Mem_Read+0x1e>
 8006794:	00100002 	.word	0x00100002
 8006798:	ffff0000 	.word	0xffff0000
 800679c:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 80067a0:	2602      	movs	r6, #2
 80067a2:	e6b2      	b.n	800650a <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 80067a4:	2601      	movs	r6, #1
 80067a6:	e6b0      	b.n	800650a <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80067a8:	2601      	movs	r6, #1
 80067aa:	e6ae      	b.n	800650a <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80067ac:	2601      	movs	r6, #1
 80067ae:	e6ac      	b.n	800650a <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80067b0:	2601      	movs	r6, #1
 80067b2:	e6aa      	b.n	800650a <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80067b4:	2601      	movs	r6, #1
 80067b6:	e6a8      	b.n	800650a <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 80067b8:	2601      	movs	r6, #1
 80067ba:	e6a6      	b.n	800650a <HAL_I2C_Mem_Read+0x1e>

080067bc <HAL_I2C_IsDeviceReady>:
{
 80067bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067c0:	b085      	sub	sp, #20
 80067c2:	4604      	mov	r4, r0
 80067c4:	4688      	mov	r8, r1
 80067c6:	4691      	mov	r9, r2
 80067c8:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80067ca:	f7fe fd53 	bl	8005274 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80067ce:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	d004      	beq.n	80067e2 <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 80067d8:	2302      	movs	r3, #2
}
 80067da:	4618      	mov	r0, r3
 80067dc:	b005      	add	sp, #20
 80067de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067e2:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067e4:	9000      	str	r0, [sp, #0]
 80067e6:	2319      	movs	r3, #25
 80067e8:	2201      	movs	r2, #1
 80067ea:	4959      	ldr	r1, [pc, #356]	; (8006950 <HAL_I2C_IsDeviceReady+0x194>)
 80067ec:	4620      	mov	r0, r4
 80067ee:	f7ff fabc 	bl	8005d6a <I2C_WaitOnFlagUntilTimeout>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	f040 80a1 	bne.w	800693a <HAL_I2C_IsDeviceReady+0x17e>
    __HAL_LOCK(hi2c);
 80067f8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	f000 809e 	beq.w	800693e <HAL_I2C_IsDeviceReady+0x182>
 8006802:	2301      	movs	r3, #1
 8006804:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	f012 0f01 	tst.w	r2, #1
 8006810:	d103      	bne.n	800681a <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	f042 0201 	orr.w	r2, r2, #1
 8006818:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800681a:	6822      	ldr	r2, [r4, #0]
 800681c:	6813      	ldr	r3, [r2, #0]
 800681e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006822:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006824:	2324      	movs	r3, #36	; 0x24
 8006826:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800682a:	2300      	movs	r3, #0
 800682c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800682e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8006832:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8006834:	2701      	movs	r7, #1
 8006836:	e03e      	b.n	80068b6 <HAL_I2C_IsDeviceReady+0xfa>
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006840:	d07f      	beq.n	8006942 <HAL_I2C_IsDeviceReady+0x186>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006846:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e7c6      	b.n	80067da <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800684c:	23a0      	movs	r3, #160	; 0xa0
 800684e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	695a      	ldr	r2, [r3, #20]
 8006856:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800685a:	6959      	ldr	r1, [r3, #20]
 800685c:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006860:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2ba0      	cmp	r3, #160	; 0xa0
 8006868:	d009      	beq.n	800687e <HAL_I2C_IsDeviceReady+0xc2>
 800686a:	b942      	cbnz	r2, 800687e <HAL_I2C_IsDeviceReady+0xc2>
 800686c:	b939      	cbnz	r1, 800687e <HAL_I2C_IsDeviceReady+0xc2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800686e:	f7fe fd01 	bl	8005274 <HAL_GetTick>
 8006872:	1b80      	subs	r0, r0, r6
 8006874:	42a8      	cmp	r0, r5
 8006876:	d8e9      	bhi.n	800684c <HAL_I2C_IsDeviceReady+0x90>
 8006878:	2d00      	cmp	r5, #0
 800687a:	d1ea      	bne.n	8006852 <HAL_I2C_IsDeviceReady+0x96>
 800687c:	e7e6      	b.n	800684c <HAL_I2C_IsDeviceReady+0x90>
      hi2c->State = HAL_I2C_STATE_READY;
 800687e:	2320      	movs	r3, #32
 8006880:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	695a      	ldr	r2, [r3, #20]
 8006888:	f012 0f02 	tst.w	r2, #2
 800688c:	d131      	bne.n	80068f2 <HAL_I2C_IsDeviceReady+0x136>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006894:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800689c:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800689e:	9600      	str	r6, [sp, #0]
 80068a0:	2319      	movs	r3, #25
 80068a2:	2201      	movs	r2, #1
 80068a4:	492a      	ldr	r1, [pc, #168]	; (8006950 <HAL_I2C_IsDeviceReady+0x194>)
 80068a6:	4620      	mov	r0, r4
 80068a8:	f7ff fa5f 	bl	8005d6a <I2C_WaitOnFlagUntilTimeout>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d14c      	bne.n	800694a <HAL_I2C_IsDeviceReady+0x18e>
      I2C_Trials++;
 80068b0:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80068b2:	454f      	cmp	r7, r9
 80068b4:	d239      	bcs.n	800692a <HAL_I2C_IsDeviceReady+0x16e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068b6:	6822      	ldr	r2, [r4, #0]
 80068b8:	6813      	ldr	r3, [r2, #0]
 80068ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068be:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80068c0:	9600      	str	r6, [sp, #0]
 80068c2:	462b      	mov	r3, r5
 80068c4:	2200      	movs	r2, #0
 80068c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068ca:	4620      	mov	r0, r4
 80068cc:	f7ff fa4d 	bl	8005d6a <I2C_WaitOnFlagUntilTimeout>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d1b1      	bne.n	8006838 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 80068da:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80068dc:	f7fe fcca 	bl	8005274 <HAL_GetTick>
 80068e0:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	695a      	ldr	r2, [r3, #20]
 80068e6:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80068ea:	6959      	ldr	r1, [r3, #20]
 80068ec:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80068f0:	e7b6      	b.n	8006860 <HAL_I2C_IsDeviceReady+0xa4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068fa:	2300      	movs	r3, #0
 80068fc:	9303      	str	r3, [sp, #12]
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	695a      	ldr	r2, [r3, #20]
 8006902:	9203      	str	r2, [sp, #12]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	9303      	str	r3, [sp, #12]
 8006908:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800690a:	9600      	str	r6, [sp, #0]
 800690c:	2319      	movs	r3, #25
 800690e:	2201      	movs	r2, #1
 8006910:	490f      	ldr	r1, [pc, #60]	; (8006950 <HAL_I2C_IsDeviceReady+0x194>)
 8006912:	4620      	mov	r0, r4
 8006914:	f7ff fa29 	bl	8005d6a <I2C_WaitOnFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	b9a0      	cbnz	r0, 8006946 <HAL_I2C_IsDeviceReady+0x18a>
        hi2c->State = HAL_I2C_STATE_READY;
 800691c:	2220      	movs	r2, #32
 800691e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8006922:	2200      	movs	r2, #0
 8006924:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8006928:	e757      	b.n	80067da <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 800692a:	2320      	movs	r3, #32
 800692c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8006930:	2300      	movs	r3, #0
 8006932:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e74f      	b.n	80067da <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 800693a:	2302      	movs	r3, #2
 800693c:	e74d      	b.n	80067da <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 800693e:	2302      	movs	r3, #2
 8006940:	e74b      	b.n	80067da <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e749      	b.n	80067da <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e747      	b.n	80067da <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e745      	b.n	80067da <HAL_I2C_IsDeviceReady+0x1e>
 800694e:	bf00      	nop
 8006950:	00100002 	.word	0x00100002

08006954 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006954:	2800      	cmp	r0, #0
 8006956:	f000 81e0 	beq.w	8006d1a <HAL_RCC_OscConfig+0x3c6>
{
 800695a:	b570      	push	{r4, r5, r6, lr}
 800695c:	b082      	sub	sp, #8
 800695e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006960:	6803      	ldr	r3, [r0, #0]
 8006962:	f013 0f01 	tst.w	r3, #1
 8006966:	d03b      	beq.n	80069e0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006968:	4ba5      	ldr	r3, [pc, #660]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 030c 	and.w	r3, r3, #12
 8006970:	2b04      	cmp	r3, #4
 8006972:	d02c      	beq.n	80069ce <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006974:	4ba2      	ldr	r3, [pc, #648]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800697c:	2b08      	cmp	r3, #8
 800697e:	d021      	beq.n	80069c4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006980:	6863      	ldr	r3, [r4, #4]
 8006982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006986:	d04f      	beq.n	8006a28 <HAL_RCC_OscConfig+0xd4>
 8006988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800698c:	d052      	beq.n	8006a34 <HAL_RCC_OscConfig+0xe0>
 800698e:	4b9c      	ldr	r3, [pc, #624]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800699e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069a0:	6863      	ldr	r3, [r4, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d050      	beq.n	8006a48 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a6:	f7fe fc65 	bl	8005274 <HAL_GetTick>
 80069aa:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ac:	4b94      	ldr	r3, [pc, #592]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80069b4:	d114      	bne.n	80069e0 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069b6:	f7fe fc5d 	bl	8005274 <HAL_GetTick>
 80069ba:	1b40      	subs	r0, r0, r5
 80069bc:	2864      	cmp	r0, #100	; 0x64
 80069be:	d9f5      	bls.n	80069ac <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80069c0:	2003      	movs	r0, #3
 80069c2:	e1af      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069c4:	4b8e      	ldr	r3, [pc, #568]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80069cc:	d0d8      	beq.n	8006980 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ce:	4b8c      	ldr	r3, [pc, #560]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80069d6:	d003      	beq.n	80069e0 <HAL_RCC_OscConfig+0x8c>
 80069d8:	6863      	ldr	r3, [r4, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 819f 	beq.w	8006d1e <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	f013 0f02 	tst.w	r3, #2
 80069e6:	d055      	beq.n	8006a94 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069e8:	4b85      	ldr	r3, [pc, #532]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f013 0f0c 	tst.w	r3, #12
 80069f0:	d03e      	beq.n	8006a70 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069f2:	4b83      	ldr	r3, [pc, #524]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069fa:	2b08      	cmp	r3, #8
 80069fc:	d033      	beq.n	8006a66 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069fe:	68e3      	ldr	r3, [r4, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d068      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a04:	4b7f      	ldr	r3, [pc, #508]	; (8006c04 <HAL_RCC_OscConfig+0x2b0>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0a:	f7fe fc33 	bl	8005274 <HAL_GetTick>
 8006a0e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a10:	4b7b      	ldr	r3, [pc, #492]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f013 0f02 	tst.w	r3, #2
 8006a18:	d154      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a1a:	f7fe fc2b 	bl	8005274 <HAL_GetTick>
 8006a1e:	1b40      	subs	r0, r0, r5
 8006a20:	2802      	cmp	r0, #2
 8006a22:	d9f5      	bls.n	8006a10 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8006a24:	2003      	movs	r0, #3
 8006a26:	e17d      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a28:	4a75      	ldr	r2, [pc, #468]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006a2a:	6813      	ldr	r3, [r2, #0]
 8006a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	e7b5      	b.n	80069a0 <HAL_RCC_OscConfig+0x4c>
 8006a34:	4b72      	ldr	r3, [pc, #456]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	e7ab      	b.n	80069a0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8006a48:	f7fe fc14 	bl	8005274 <HAL_GetTick>
 8006a4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a4e:	4b6c      	ldr	r3, [pc, #432]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006a56:	d0c3      	beq.n	80069e0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a58:	f7fe fc0c 	bl	8005274 <HAL_GetTick>
 8006a5c:	1b40      	subs	r0, r0, r5
 8006a5e:	2864      	cmp	r0, #100	; 0x64
 8006a60:	d9f5      	bls.n	8006a4e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8006a62:	2003      	movs	r0, #3
 8006a64:	e15e      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a66:	4b66      	ldr	r3, [pc, #408]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006a6e:	d1c6      	bne.n	80069fe <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a70:	4b63      	ldr	r3, [pc, #396]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f013 0f02 	tst.w	r3, #2
 8006a78:	d004      	beq.n	8006a84 <HAL_RCC_OscConfig+0x130>
 8006a7a:	68e3      	ldr	r3, [r4, #12]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d001      	beq.n	8006a84 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8006a80:	2001      	movs	r0, #1
 8006a82:	e14f      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a84:	4a5e      	ldr	r2, [pc, #376]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006a86:	6813      	ldr	r3, [r2, #0]
 8006a88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006a8c:	6921      	ldr	r1, [r4, #16]
 8006a8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006a92:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	f013 0f08 	tst.w	r3, #8
 8006a9a:	d040      	beq.n	8006b1e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a9c:	6963      	ldr	r3, [r4, #20]
 8006a9e:	b363      	cbz	r3, 8006afa <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aa0:	4b59      	ldr	r3, [pc, #356]	; (8006c08 <HAL_RCC_OscConfig+0x2b4>)
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa6:	f7fe fbe5 	bl	8005274 <HAL_GetTick>
 8006aaa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aac:	4b54      	ldr	r3, [pc, #336]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab0:	f013 0f02 	tst.w	r3, #2
 8006ab4:	d133      	bne.n	8006b1e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ab6:	f7fe fbdd 	bl	8005274 <HAL_GetTick>
 8006aba:	1b40      	subs	r0, r0, r5
 8006abc:	2802      	cmp	r0, #2
 8006abe:	d9f5      	bls.n	8006aac <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8006ac0:	2003      	movs	r0, #3
 8006ac2:	e12f      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ac4:	4a4e      	ldr	r2, [pc, #312]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006ac6:	6813      	ldr	r3, [r2, #0]
 8006ac8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006acc:	6921      	ldr	r1, [r4, #16]
 8006ace:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	e7de      	b.n	8006a94 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8006ad6:	4b4b      	ldr	r3, [pc, #300]	; (8006c04 <HAL_RCC_OscConfig+0x2b0>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006adc:	f7fe fbca 	bl	8005274 <HAL_GetTick>
 8006ae0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ae2:	4b47      	ldr	r3, [pc, #284]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f013 0f02 	tst.w	r3, #2
 8006aea:	d0d3      	beq.n	8006a94 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aec:	f7fe fbc2 	bl	8005274 <HAL_GetTick>
 8006af0:	1b40      	subs	r0, r0, r5
 8006af2:	2802      	cmp	r0, #2
 8006af4:	d9f5      	bls.n	8006ae2 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8006af6:	2003      	movs	r0, #3
 8006af8:	e114      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006afa:	4b43      	ldr	r3, [pc, #268]	; (8006c08 <HAL_RCC_OscConfig+0x2b4>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b00:	f7fe fbb8 	bl	8005274 <HAL_GetTick>
 8006b04:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b06:	4b3e      	ldr	r3, [pc, #248]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b0a:	f013 0f02 	tst.w	r3, #2
 8006b0e:	d006      	beq.n	8006b1e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b10:	f7fe fbb0 	bl	8005274 <HAL_GetTick>
 8006b14:	1b40      	subs	r0, r0, r5
 8006b16:	2802      	cmp	r0, #2
 8006b18:	d9f5      	bls.n	8006b06 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8006b1a:	2003      	movs	r0, #3
 8006b1c:	e102      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	f013 0f04 	tst.w	r3, #4
 8006b24:	d075      	beq.n	8006c12 <HAL_RCC_OscConfig+0x2be>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b26:	4b36      	ldr	r3, [pc, #216]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006b2e:	d131      	bne.n	8006b94 <HAL_RCC_OscConfig+0x240>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b30:	2300      	movs	r3, #0
 8006b32:	9301      	str	r3, [sp, #4]
 8006b34:	4b32      	ldr	r3, [pc, #200]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006b3c:	641a      	str	r2, [r3, #64]	; 0x40
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006b48:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b4a:	4b30      	ldr	r3, [pc, #192]	; (8006c0c <HAL_RCC_OscConfig+0x2b8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006b52:	d021      	beq.n	8006b98 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b54:	68a3      	ldr	r3, [r4, #8]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d032      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x26c>
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	d036      	beq.n	8006bcc <HAL_RCC_OscConfig+0x278>
 8006b5e:	4b28      	ldr	r3, [pc, #160]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006b60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b62:	f022 0201 	bic.w	r2, r2, #1
 8006b66:	671a      	str	r2, [r3, #112]	; 0x70
 8006b68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b6a:	f022 0204 	bic.w	r2, r2, #4
 8006b6e:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b70:	68a3      	ldr	r3, [r4, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d034      	beq.n	8006be0 <HAL_RCC_OscConfig+0x28c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b76:	f7fe fb7d 	bl	8005274 <HAL_GetTick>
 8006b7a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b7c:	4b20      	ldr	r3, [pc, #128]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b80:	f013 0f02 	tst.w	r3, #2
 8006b84:	d144      	bne.n	8006c10 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b86:	f7fe fb75 	bl	8005274 <HAL_GetTick>
 8006b8a:	1b80      	subs	r0, r0, r6
 8006b8c:	2864      	cmp	r0, #100	; 0x64
 8006b8e:	d9f5      	bls.n	8006b7c <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8006b90:	2003      	movs	r0, #3
 8006b92:	e0c7      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8006b94:	2500      	movs	r5, #0
 8006b96:	e7d8      	b.n	8006b4a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b98:	4a1c      	ldr	r2, [pc, #112]	; (8006c0c <HAL_RCC_OscConfig+0x2b8>)
 8006b9a:	6813      	ldr	r3, [r2, #0]
 8006b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006ba2:	f7fe fb67 	bl	8005274 <HAL_GetTick>
 8006ba6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba8:	4b18      	ldr	r3, [pc, #96]	; (8006c0c <HAL_RCC_OscConfig+0x2b8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006bb0:	d1d0      	bne.n	8006b54 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bb2:	f7fe fb5f 	bl	8005274 <HAL_GetTick>
 8006bb6:	1b80      	subs	r0, r0, r6
 8006bb8:	2802      	cmp	r0, #2
 8006bba:	d9f5      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8006bbc:	2003      	movs	r0, #3
 8006bbe:	e0b1      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bc0:	4a0f      	ldr	r2, [pc, #60]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006bc2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bca:	e7d1      	b.n	8006b70 <HAL_RCC_OscConfig+0x21c>
 8006bcc:	4b0c      	ldr	r3, [pc, #48]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006bce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bd0:	f042 0204 	orr.w	r2, r2, #4
 8006bd4:	671a      	str	r2, [r3, #112]	; 0x70
 8006bd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bd8:	f042 0201 	orr.w	r2, r2, #1
 8006bdc:	671a      	str	r2, [r3, #112]	; 0x70
 8006bde:	e7c7      	b.n	8006b70 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006be0:	f7fe fb48 	bl	8005274 <HAL_GetTick>
 8006be4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006be6:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <HAL_RCC_OscConfig+0x2ac>)
 8006be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bea:	f013 0f02 	tst.w	r3, #2
 8006bee:	d00f      	beq.n	8006c10 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bf0:	f7fe fb40 	bl	8005274 <HAL_GetTick>
 8006bf4:	1b80      	subs	r0, r0, r6
 8006bf6:	2864      	cmp	r0, #100	; 0x64
 8006bf8:	d9f5      	bls.n	8006be6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006bfa:	2003      	movs	r0, #3
 8006bfc:	e092      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
 8006bfe:	bf00      	nop
 8006c00:	40023800 	.word	0x40023800
 8006c04:	42470000 	.word	0x42470000
 8006c08:	42470e80 	.word	0x42470e80
 8006c0c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c10:	b9ed      	cbnz	r5, 8006c4e <HAL_RCC_OscConfig+0x2fa>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c12:	69a3      	ldr	r3, [r4, #24]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 8084 	beq.w	8006d22 <HAL_RCC_OscConfig+0x3ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c1a:	4a45      	ldr	r2, [pc, #276]	; (8006d30 <HAL_RCC_OscConfig+0x3dc>)
 8006c1c:	6892      	ldr	r2, [r2, #8]
 8006c1e:	f002 020c 	and.w	r2, r2, #12
 8006c22:	2a08      	cmp	r2, #8
 8006c24:	d051      	beq.n	8006cca <HAL_RCC_OscConfig+0x376>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d017      	beq.n	8006c5a <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c2a:	4b42      	ldr	r3, [pc, #264]	; (8006d34 <HAL_RCC_OscConfig+0x3e0>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c30:	f7fe fb20 	bl	8005274 <HAL_GetTick>
 8006c34:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c36:	4b3e      	ldr	r3, [pc, #248]	; (8006d30 <HAL_RCC_OscConfig+0x3dc>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006c3e:	d042      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x372>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c40:	f7fe fb18 	bl	8005274 <HAL_GetTick>
 8006c44:	1b00      	subs	r0, r0, r4
 8006c46:	2802      	cmp	r0, #2
 8006c48:	d9f5      	bls.n	8006c36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006c4a:	2003      	movs	r0, #3
 8006c4c:	e06a      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c4e:	4a38      	ldr	r2, [pc, #224]	; (8006d30 <HAL_RCC_OscConfig+0x3dc>)
 8006c50:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c56:	6413      	str	r3, [r2, #64]	; 0x40
 8006c58:	e7db      	b.n	8006c12 <HAL_RCC_OscConfig+0x2be>
        __HAL_RCC_PLL_DISABLE();
 8006c5a:	4b36      	ldr	r3, [pc, #216]	; (8006d34 <HAL_RCC_OscConfig+0x3e0>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006c60:	f7fe fb08 	bl	8005274 <HAL_GetTick>
 8006c64:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c66:	4b32      	ldr	r3, [pc, #200]	; (8006d30 <HAL_RCC_OscConfig+0x3dc>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006c6e:	d006      	beq.n	8006c7e <HAL_RCC_OscConfig+0x32a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c70:	f7fe fb00 	bl	8005274 <HAL_GetTick>
 8006c74:	1b40      	subs	r0, r0, r5
 8006c76:	2802      	cmp	r0, #2
 8006c78:	d9f5      	bls.n	8006c66 <HAL_RCC_OscConfig+0x312>
            return HAL_TIMEOUT;
 8006c7a:	2003      	movs	r0, #3
 8006c7c:	e052      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c7e:	69e3      	ldr	r3, [r4, #28]
 8006c80:	6a22      	ldr	r2, [r4, #32]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006c86:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006c8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006c8c:	0852      	lsrs	r2, r2, #1
 8006c8e:	3a01      	subs	r2, #1
 8006c90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006c96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006c9a:	4a25      	ldr	r2, [pc, #148]	; (8006d30 <HAL_RCC_OscConfig+0x3dc>)
 8006c9c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8006c9e:	4b25      	ldr	r3, [pc, #148]	; (8006d34 <HAL_RCC_OscConfig+0x3e0>)
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006ca4:	f7fe fae6 	bl	8005274 <HAL_GetTick>
 8006ca8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006caa:	4b21      	ldr	r3, [pc, #132]	; (8006d30 <HAL_RCC_OscConfig+0x3dc>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006cb2:	d106      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cb4:	f7fe fade 	bl	8005274 <HAL_GetTick>
 8006cb8:	1b00      	subs	r0, r0, r4
 8006cba:	2802      	cmp	r0, #2
 8006cbc:	d9f5      	bls.n	8006caa <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8006cbe:	2003      	movs	r0, #3
 8006cc0:	e030      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	e02e      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	e02c      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d02c      	beq.n	8006d28 <HAL_RCC_OscConfig+0x3d4>
        pll_config = RCC->PLLCFGR;
 8006cce:	4b18      	ldr	r3, [pc, #96]	; (8006d30 <HAL_RCC_OscConfig+0x3dc>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8006cd6:	69e2      	ldr	r2, [r4, #28]
 8006cd8:	4291      	cmp	r1, r2
 8006cda:	d001      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x38c>
          return HAL_ERROR;
 8006cdc:	2001      	movs	r0, #1
 8006cde:	e021      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ce0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ce4:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ce6:	428a      	cmp	r2, r1
 8006ce8:	d001      	beq.n	8006cee <HAL_RCC_OscConfig+0x39a>
          return HAL_ERROR;
 8006cea:	2001      	movs	r0, #1
 8006cec:	e01a      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006cee:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cf0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006cf4:	401a      	ands	r2, r3
 8006cf6:	428a      	cmp	r2, r1
 8006cf8:	d001      	beq.n	8006cfe <HAL_RCC_OscConfig+0x3aa>
          return HAL_ERROR;
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	e012      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d02:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d04:	428a      	cmp	r2, r1
 8006d06:	d001      	beq.n	8006d0c <HAL_RCC_OscConfig+0x3b8>
          return HAL_ERROR;
 8006d08:	2001      	movs	r0, #1
 8006d0a:	e00b      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006d0c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006d10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00a      	beq.n	8006d2c <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
 8006d16:	2001      	movs	r0, #1
 8006d18:	e004      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
    return HAL_ERROR;
 8006d1a:	2001      	movs	r0, #1
}
 8006d1c:	4770      	bx	lr
        return HAL_ERROR;
 8006d1e:	2001      	movs	r0, #1
 8006d20:	e000      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8006d22:	2000      	movs	r0, #0
}
 8006d24:	b002      	add	sp, #8
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006d28:	2001      	movs	r0, #1
 8006d2a:	e7fb      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	e7f9      	b.n	8006d24 <HAL_RCC_OscConfig+0x3d0>
 8006d30:	40023800 	.word	0x40023800
 8006d34:	42470060 	.word	0x42470060

08006d38 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006d38:	4b01      	ldr	r3, [pc, #4]	; (8006d40 <HAL_RCC_EnableCSS+0x8>)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]
}
 8006d3e:	4770      	bx	lr
 8006d40:	4247004c 	.word	0x4247004c

08006d44 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d44:	4b26      	ldr	r3, [pc, #152]	; (8006de0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f003 030c 	and.w	r3, r3, #12
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d044      	beq.n	8006dda <HAL_RCC_GetSysClockFreq+0x96>
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d001      	beq.n	8006d58 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d54:	4823      	ldr	r0, [pc, #140]	; (8006de4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006d56:	4770      	bx	lr
{
 8006d58:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d5c:	4b20      	ldr	r3, [pc, #128]	; (8006de0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006d6a:	d013      	beq.n	8006d94 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d6c:	4b1c      	ldr	r3, [pc, #112]	; (8006de0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006d6e:	6859      	ldr	r1, [r3, #4]
 8006d70:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006d74:	2300      	movs	r3, #0
 8006d76:	481c      	ldr	r0, [pc, #112]	; (8006de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006d78:	fba1 0100 	umull	r0, r1, r1, r0
 8006d7c:	f7f9 fec6 	bl	8000b0c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d80:	4b17      	ldr	r3, [pc, #92]	; (8006de0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006d88:	3301      	adds	r3, #1
 8006d8a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8006d8c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006d90:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d94:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8006d9c:	461e      	mov	r6, r3
 8006d9e:	2700      	movs	r7, #0
 8006da0:	015c      	lsls	r4, r3, #5
 8006da2:	2500      	movs	r5, #0
 8006da4:	1ae4      	subs	r4, r4, r3
 8006da6:	eb65 0507 	sbc.w	r5, r5, r7
 8006daa:	01a9      	lsls	r1, r5, #6
 8006dac:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8006db0:	01a0      	lsls	r0, r4, #6
 8006db2:	1b00      	subs	r0, r0, r4
 8006db4:	eb61 0105 	sbc.w	r1, r1, r5
 8006db8:	00cb      	lsls	r3, r1, #3
 8006dba:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006dbe:	00c4      	lsls	r4, r0, #3
 8006dc0:	19a0      	adds	r0, r4, r6
 8006dc2:	eb43 0107 	adc.w	r1, r3, r7
 8006dc6:	028b      	lsls	r3, r1, #10
 8006dc8:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8006dcc:	0284      	lsls	r4, r0, #10
 8006dce:	4620      	mov	r0, r4
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f7f9 fe9a 	bl	8000b0c <__aeabi_uldivmod>
 8006dd8:	e7d2      	b.n	8006d80 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8006dda:	4803      	ldr	r0, [pc, #12]	; (8006de8 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	40023800 	.word	0x40023800
 8006de4:	00f42400 	.word	0x00f42400
 8006de8:	017d7840 	.word	0x017d7840

08006dec <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006dec:	2800      	cmp	r0, #0
 8006dee:	f000 809e 	beq.w	8006f2e <HAL_RCC_ClockConfig+0x142>
{
 8006df2:	b570      	push	{r4, r5, r6, lr}
 8006df4:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006df6:	4b50      	ldr	r3, [pc, #320]	; (8006f38 <HAL_RCC_ClockConfig+0x14c>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	428b      	cmp	r3, r1
 8006e00:	d209      	bcs.n	8006e16 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e02:	b2cb      	uxtb	r3, r1
 8006e04:	4a4c      	ldr	r2, [pc, #304]	; (8006f38 <HAL_RCC_ClockConfig+0x14c>)
 8006e06:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e08:	6813      	ldr	r3, [r2, #0]
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	428b      	cmp	r3, r1
 8006e10:	d001      	beq.n	8006e16 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8006e12:	2001      	movs	r0, #1
}
 8006e14:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	f013 0f02 	tst.w	r3, #2
 8006e1c:	d017      	beq.n	8006e4e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e1e:	f013 0f04 	tst.w	r3, #4
 8006e22:	d004      	beq.n	8006e2e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e24:	4a45      	ldr	r2, [pc, #276]	; (8006f3c <HAL_RCC_ClockConfig+0x150>)
 8006e26:	6893      	ldr	r3, [r2, #8]
 8006e28:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e2c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	f013 0f08 	tst.w	r3, #8
 8006e34:	d004      	beq.n	8006e40 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e36:	4a41      	ldr	r2, [pc, #260]	; (8006f3c <HAL_RCC_ClockConfig+0x150>)
 8006e38:	6893      	ldr	r3, [r2, #8]
 8006e3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e3e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e40:	4a3e      	ldr	r2, [pc, #248]	; (8006f3c <HAL_RCC_ClockConfig+0x150>)
 8006e42:	6893      	ldr	r3, [r2, #8]
 8006e44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e48:	68a0      	ldr	r0, [r4, #8]
 8006e4a:	4303      	orrs	r3, r0
 8006e4c:	6093      	str	r3, [r2, #8]
 8006e4e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	f013 0f01 	tst.w	r3, #1
 8006e56:	d032      	beq.n	8006ebe <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e58:	6863      	ldr	r3, [r4, #4]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d021      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e5e:	1e9a      	subs	r2, r3, #2
 8006e60:	2a01      	cmp	r2, #1
 8006e62:	d925      	bls.n	8006eb0 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e64:	4a35      	ldr	r2, [pc, #212]	; (8006f3c <HAL_RCC_ClockConfig+0x150>)
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	f012 0f02 	tst.w	r2, #2
 8006e6c:	d061      	beq.n	8006f32 <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e6e:	4933      	ldr	r1, [pc, #204]	; (8006f3c <HAL_RCC_ClockConfig+0x150>)
 8006e70:	688a      	ldr	r2, [r1, #8]
 8006e72:	f022 0203 	bic.w	r2, r2, #3
 8006e76:	4313      	orrs	r3, r2
 8006e78:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006e7a:	f7fe f9fb 	bl	8005274 <HAL_GetTick>
 8006e7e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e80:	4b2e      	ldr	r3, [pc, #184]	; (8006f3c <HAL_RCC_ClockConfig+0x150>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 030c 	and.w	r3, r3, #12
 8006e88:	6862      	ldr	r2, [r4, #4]
 8006e8a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006e8e:	d016      	beq.n	8006ebe <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e90:	f7fe f9f0 	bl	8005274 <HAL_GetTick>
 8006e94:	1b80      	subs	r0, r0, r6
 8006e96:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e9a:	4298      	cmp	r0, r3
 8006e9c:	d9f0      	bls.n	8006e80 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8006e9e:	2003      	movs	r0, #3
 8006ea0:	e7b8      	b.n	8006e14 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ea2:	4a26      	ldr	r2, [pc, #152]	; (8006f3c <HAL_RCC_ClockConfig+0x150>)
 8006ea4:	6812      	ldr	r2, [r2, #0]
 8006ea6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006eaa:	d1e0      	bne.n	8006e6e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8006eac:	2001      	movs	r0, #1
 8006eae:	e7b1      	b.n	8006e14 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eb0:	4a22      	ldr	r2, [pc, #136]	; (8006f3c <HAL_RCC_ClockConfig+0x150>)
 8006eb2:	6812      	ldr	r2, [r2, #0]
 8006eb4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006eb8:	d1d9      	bne.n	8006e6e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8006eba:	2001      	movs	r0, #1
 8006ebc:	e7aa      	b.n	8006e14 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ebe:	4b1e      	ldr	r3, [pc, #120]	; (8006f38 <HAL_RCC_ClockConfig+0x14c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	42ab      	cmp	r3, r5
 8006ec8:	d909      	bls.n	8006ede <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eca:	b2ea      	uxtb	r2, r5
 8006ecc:	4b1a      	ldr	r3, [pc, #104]	; (8006f38 <HAL_RCC_ClockConfig+0x14c>)
 8006ece:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	42ab      	cmp	r3, r5
 8006ed8:	d001      	beq.n	8006ede <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8006eda:	2001      	movs	r0, #1
 8006edc:	e79a      	b.n	8006e14 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	f013 0f04 	tst.w	r3, #4
 8006ee4:	d006      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ee6:	4a15      	ldr	r2, [pc, #84]	; (8006f3c <HAL_RCC_ClockConfig+0x150>)
 8006ee8:	6893      	ldr	r3, [r2, #8]
 8006eea:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006eee:	68e1      	ldr	r1, [r4, #12]
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	f013 0f08 	tst.w	r3, #8
 8006efa:	d007      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006efc:	4a0f      	ldr	r2, [pc, #60]	; (8006f3c <HAL_RCC_ClockConfig+0x150>)
 8006efe:	6893      	ldr	r3, [r2, #8]
 8006f00:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006f04:	6921      	ldr	r1, [r4, #16]
 8006f06:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006f0a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f0c:	f7ff ff1a 	bl	8006d44 <HAL_RCC_GetSysClockFreq>
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <HAL_RCC_ClockConfig+0x150>)
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006f18:	4a09      	ldr	r2, [pc, #36]	; (8006f40 <HAL_RCC_ClockConfig+0x154>)
 8006f1a:	5cd3      	ldrb	r3, [r2, r3]
 8006f1c:	40d8      	lsrs	r0, r3
 8006f1e:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <HAL_RCC_ClockConfig+0x158>)
 8006f20:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8006f22:	4b09      	ldr	r3, [pc, #36]	; (8006f48 <HAL_RCC_ClockConfig+0x15c>)
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	f7fd fd01 	bl	800492c <HAL_InitTick>
  return HAL_OK;
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	e772      	b.n	8006e14 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8006f2e:	2001      	movs	r0, #1
}
 8006f30:	4770      	bx	lr
        return HAL_ERROR;
 8006f32:	2001      	movs	r0, #1
 8006f34:	e76e      	b.n	8006e14 <HAL_RCC_ClockConfig+0x28>
 8006f36:	bf00      	nop
 8006f38:	40023c00 	.word	0x40023c00
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	0800c9d4 	.word	0x0800c9d4
 8006f44:	20000038 	.word	0x20000038
 8006f48:	20000040 	.word	0x20000040

08006f4c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8006f4c:	4b01      	ldr	r3, [pc, #4]	; (8006f54 <HAL_RCC_GetHCLKFreq+0x8>)
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	20000038 	.word	0x20000038

08006f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f58:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f5a:	f7ff fff7 	bl	8006f4c <HAL_RCC_GetHCLKFreq>
 8006f5e:	4b04      	ldr	r3, [pc, #16]	; (8006f70 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006f66:	4a03      	ldr	r2, [pc, #12]	; (8006f74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006f68:	5cd3      	ldrb	r3, [r2, r3]
}
 8006f6a:	40d8      	lsrs	r0, r3
 8006f6c:	bd08      	pop	{r3, pc}
 8006f6e:	bf00      	nop
 8006f70:	40023800 	.word	0x40023800
 8006f74:	0800c9e4 	.word	0x0800c9e4

08006f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f78:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f7a:	f7ff ffe7 	bl	8006f4c <HAL_RCC_GetHCLKFreq>
 8006f7e:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006f86:	4a03      	ldr	r2, [pc, #12]	; (8006f94 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006f88:	5cd3      	ldrb	r3, [r2, r3]
}
 8006f8a:	40d8      	lsrs	r0, r3
 8006f8c:	bd08      	pop	{r3, pc}
 8006f8e:	bf00      	nop
 8006f90:	40023800 	.word	0x40023800
 8006f94:	0800c9e4 	.word	0x0800c9e4

08006f98 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f98:	230f      	movs	r3, #15
 8006f9a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <HAL_RCC_GetClockConfig+0x34>)
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	f002 0203 	and.w	r2, r2, #3
 8006fa4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006fa6:	689a      	ldr	r2, [r3, #8]
 8006fa8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006fac:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8006fb4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	08db      	lsrs	r3, r3, #3
 8006fba:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006fbe:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fc0:	4b03      	ldr	r3, [pc, #12]	; (8006fd0 <HAL_RCC_GetClockConfig+0x38>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	600b      	str	r3, [r1, #0]
}
 8006fca:	4770      	bx	lr
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	40023c00 	.word	0x40023c00

08006fd4 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006fd4:	4770      	bx	lr
	...

08006fd8 <HAL_RCC_NMI_IRQHandler>:
{
 8006fd8:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006fda:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006fe2:	d100      	bne.n	8006fe6 <HAL_RCC_NMI_IRQHandler+0xe>
}
 8006fe4:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8006fe6:	f7ff fff5 	bl	8006fd4 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006fea:	4b03      	ldr	r3, [pc, #12]	; (8006ff8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8006fec:	2280      	movs	r2, #128	; 0x80
 8006fee:	701a      	strb	r2, [r3, #0]
}
 8006ff0:	e7f8      	b.n	8006fe4 <HAL_RCC_NMI_IRQHandler+0xc>
 8006ff2:	bf00      	nop
 8006ff4:	40023800 	.word	0x40023800
 8006ff8:	4002380e 	.word	0x4002380e

08006ffc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ffc:	b530      	push	{r4, r5, lr}
 8006ffe:	b083      	sub	sp, #12
 8007000:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007002:	6803      	ldr	r3, [r0, #0]
 8007004:	f013 0f05 	tst.w	r3, #5
 8007008:	d10e      	bne.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	f013 0f02 	tst.w	r3, #2
 8007010:	d136      	bne.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	f013 0f08 	tst.w	r3, #8
 8007018:	f000 8097 	beq.w	800714a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800701c:	7c22      	ldrb	r2, [r4, #16]
 800701e:	4b4c      	ldr	r3, [pc, #304]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8007020:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007022:	2000      	movs	r0, #0
}
 8007024:	b003      	add	sp, #12
 8007026:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8007028:	4b4a      	ldr	r3, [pc, #296]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800702e:	f7fe f921 	bl	8005274 <HAL_GetTick>
 8007032:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007034:	4b48      	ldr	r3, [pc, #288]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800703c:	d006      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800703e:	f7fe f919 	bl	8005274 <HAL_GetTick>
 8007042:	1b40      	subs	r0, r0, r5
 8007044:	2802      	cmp	r0, #2
 8007046:	d9f5      	bls.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8007048:	2003      	movs	r0, #3
 800704a:	e7eb      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800704c:	6862      	ldr	r2, [r4, #4]
 800704e:	68a3      	ldr	r3, [r4, #8]
 8007050:	071b      	lsls	r3, r3, #28
 8007052:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007056:	4a40      	ldr	r2, [pc, #256]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007058:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800705c:	4b3d      	ldr	r3, [pc, #244]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800705e:	2201      	movs	r2, #1
 8007060:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8007062:	f7fe f907 	bl	8005274 <HAL_GetTick>
 8007066:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007068:	4b3b      	ldr	r3, [pc, #236]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007070:	d1cb      	bne.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007072:	f7fe f8ff 	bl	8005274 <HAL_GetTick>
 8007076:	1b40      	subs	r0, r0, r5
 8007078:	2802      	cmp	r0, #2
 800707a:	d9f5      	bls.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        return HAL_TIMEOUT;
 800707c:	2003      	movs	r0, #3
 800707e:	e7d1      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8007080:	2300      	movs	r3, #0
 8007082:	9301      	str	r3, [sp, #4]
 8007084:	4b34      	ldr	r3, [pc, #208]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007088:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800708c:	641a      	str	r2, [r3, #64]	; 0x40
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8007098:	4a30      	ldr	r2, [pc, #192]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800709a:	6813      	ldr	r3, [r2, #0]
 800709c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80070a2:	f7fe f8e7 	bl	8005274 <HAL_GetTick>
 80070a6:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070a8:	4b2c      	ldr	r3, [pc, #176]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80070b0:	d106      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80070b2:	f7fe f8df 	bl	8005274 <HAL_GetTick>
 80070b6:	1b40      	subs	r0, r0, r5
 80070b8:	2802      	cmp	r0, #2
 80070ba:	d9f5      	bls.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 80070bc:	2003      	movs	r0, #3
 80070be:	e7b1      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070c0:	4b25      	ldr	r3, [pc, #148]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80070c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070c4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80070c8:	d012      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80070ca:	68e2      	ldr	r2, [r4, #12]
 80070cc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d00d      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070d4:	4b20      	ldr	r3, [pc, #128]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80070d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80070dc:	4920      	ldr	r1, [pc, #128]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070de:	2001      	movs	r0, #1
 80070e0:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070e2:	2000      	movs	r0, #0
 80070e4:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 80070e6:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80070e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ea:	f013 0f01 	tst.w	r3, #1
 80070ee:	d112      	bne.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070f0:	68e3      	ldr	r3, [r4, #12]
 80070f2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80070f6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80070fa:	d01b      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x138>
 80070fc:	4a16      	ldr	r2, [pc, #88]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80070fe:	6893      	ldr	r3, [r2, #8]
 8007100:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007104:	6093      	str	r3, [r2, #8]
 8007106:	4914      	ldr	r1, [pc, #80]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007108:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800710a:	68e2      	ldr	r2, [r4, #12]
 800710c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007110:	4313      	orrs	r3, r2
 8007112:	670b      	str	r3, [r1, #112]	; 0x70
 8007114:	e77d      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8007116:	f7fe f8ad 	bl	8005274 <HAL_GetTick>
 800711a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800711c:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800711e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007120:	f013 0f02 	tst.w	r3, #2
 8007124:	d1e4      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007126:	f7fe f8a5 	bl	8005274 <HAL_GetTick>
 800712a:	1b40      	subs	r0, r0, r5
 800712c:	2864      	cmp	r0, #100	; 0x64
 800712e:	d9f5      	bls.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
 8007130:	2003      	movs	r0, #3
 8007132:	e777      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007134:	4908      	ldr	r1, [pc, #32]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007136:	688a      	ldr	r2, [r1, #8]
 8007138:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800713c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007144:	4313      	orrs	r3, r2
 8007146:	608b      	str	r3, [r1, #8]
 8007148:	e7dd      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  return HAL_OK;
 800714a:	2000      	movs	r0, #0
 800714c:	e76a      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800714e:	bf00      	nop
 8007150:	424711e0 	.word	0x424711e0
 8007154:	42470068 	.word	0x42470068
 8007158:	40023800 	.word	0x40023800
 800715c:	40007000 	.word	0x40007000
 8007160:	42470e40 	.word	0x42470e40

08007164 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007168:	6802      	ldr	r2, [r0, #0]
 800716a:	68d3      	ldr	r3, [r2, #12]
 800716c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007170:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007172:	f7fe f87f 	bl	8005274 <HAL_GetTick>
 8007176:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f013 0f20 	tst.w	r3, #32
 8007180:	d107      	bne.n	8007192 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007182:	f7fe f877 	bl	8005274 <HAL_GetTick>
 8007186:	1b40      	subs	r0, r0, r5
 8007188:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800718c:	d9f4      	bls.n	8007178 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800718e:	2003      	movs	r0, #3
 8007190:	e000      	b.n	8007194 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8007192:	2000      	movs	r0, #0
}
 8007194:	bd38      	pop	{r3, r4, r5, pc}

08007196 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007196:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007198:	6803      	ldr	r3, [r0, #0]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	f012 0f40 	tst.w	r2, #64	; 0x40
 80071a0:	d001      	beq.n	80071a6 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80071a2:	2000      	movs	r0, #0
}
 80071a4:	bd38      	pop	{r3, r4, r5, pc}
 80071a6:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80071a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071ac:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80071ae:	f7fe f861 	bl	8005274 <HAL_GetTick>
 80071b2:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80071bc:	d107      	bne.n	80071ce <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80071be:	f7fe f859 	bl	8005274 <HAL_GetTick>
 80071c2:	1b40      	subs	r0, r0, r5
 80071c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80071c8:	d9f4      	bls.n	80071b4 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 80071ca:	2003      	movs	r0, #3
 80071cc:	e7ea      	b.n	80071a4 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 80071ce:	2000      	movs	r0, #0
 80071d0:	e7e8      	b.n	80071a4 <RTC_EnterInitMode+0xe>

080071d2 <HAL_RTC_Init>:
{
 80071d2:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d05c      	beq.n	8007292 <HAL_RTC_Init+0xc0>
 80071d8:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80071da:	7f43      	ldrb	r3, [r0, #29]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d040      	beq.n	8007262 <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80071e0:	2302      	movs	r3, #2
 80071e2:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	22ca      	movs	r2, #202	; 0xca
 80071e8:	625a      	str	r2, [r3, #36]	; 0x24
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	2253      	movs	r2, #83	; 0x53
 80071ee:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80071f0:	4620      	mov	r0, r4
 80071f2:	f7ff ffd0 	bl	8007196 <RTC_EnterInitMode>
 80071f6:	4605      	mov	r5, r0
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d136      	bne.n	800726a <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80071fc:	6822      	ldr	r2, [r4, #0]
 80071fe:	6893      	ldr	r3, [r2, #8]
 8007200:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007208:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800720a:	6821      	ldr	r1, [r4, #0]
 800720c:	688a      	ldr	r2, [r1, #8]
 800720e:	6863      	ldr	r3, [r4, #4]
 8007210:	6920      	ldr	r0, [r4, #16]
 8007212:	4303      	orrs	r3, r0
 8007214:	6960      	ldr	r0, [r4, #20]
 8007216:	4303      	orrs	r3, r0
 8007218:	4313      	orrs	r3, r2
 800721a:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	68e2      	ldr	r2, [r4, #12]
 8007220:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007222:	6822      	ldr	r2, [r4, #0]
 8007224:	6913      	ldr	r3, [r2, #16]
 8007226:	68a1      	ldr	r1, [r4, #8]
 8007228:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800722c:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800722e:	6822      	ldr	r2, [r4, #0]
 8007230:	68d3      	ldr	r3, [r2, #12]
 8007232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007236:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f013 0f20 	tst.w	r3, #32
 8007240:	d01b      	beq.n	800727a <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800724a:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800724c:	6822      	ldr	r2, [r4, #0]
 800724e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007250:	69a1      	ldr	r1, [r4, #24]
 8007252:	430b      	orrs	r3, r1
 8007254:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	22ff      	movs	r2, #255	; 0xff
 800725a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800725c:	2301      	movs	r3, #1
 800725e:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8007260:	e009      	b.n	8007276 <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 8007262:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8007264:	f7fd f938 	bl	80044d8 <HAL_RTC_MspInit>
 8007268:	e7ba      	b.n	80071e0 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	22ff      	movs	r2, #255	; 0xff
 800726e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007270:	2304      	movs	r3, #4
 8007272:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8007274:	2501      	movs	r5, #1
}
 8007276:	4628      	mov	r0, r5
 8007278:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800727a:	4620      	mov	r0, r4
 800727c:	f7ff ff72 	bl	8007164 <HAL_RTC_WaitForSynchro>
 8007280:	2800      	cmp	r0, #0
 8007282:	d0de      	beq.n	8007242 <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	22ff      	movs	r2, #255	; 0xff
 8007288:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800728a:	2304      	movs	r3, #4
 800728c:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 800728e:	2501      	movs	r5, #1
 8007290:	e7f1      	b.n	8007276 <HAL_RTC_Init+0xa4>
     return HAL_ERROR;
 8007292:	2501      	movs	r5, #1
 8007294:	e7ef      	b.n	8007276 <HAL_RTC_Init+0xa4>

08007296 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007296:	0903      	lsrs	r3, r0, #4
 8007298:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800729c:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 800729e:	f000 000f 	and.w	r0, r0, #15
 80072a2:	4410      	add	r0, r2
}
 80072a4:	b2c0      	uxtb	r0, r0
 80072a6:	4770      	bx	lr

080072a8 <HAL_RTC_GetTime>:
{
 80072a8:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80072aa:	6803      	ldr	r3, [r0, #0]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80072b0:	6803      	ldr	r3, [r0, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80072b8:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80072ba:	6803      	ldr	r3, [r0, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80072c2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80072c6:	0c1d      	lsrs	r5, r3, #16
 80072c8:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 80072cc:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80072ce:	f3c3 2606 	ubfx	r6, r3, #8, #7
 80072d2:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80072d4:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 80072d8:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80072da:	f005 0540 	and.w	r5, r5, #64	; 0x40
 80072de:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 80072e0:	b95a      	cbnz	r2, 80072fa <HAL_RTC_GetTime+0x52>
 80072e2:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80072e4:	f7ff ffd7 	bl	8007296 <RTC_Bcd2ToByte>
 80072e8:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80072ea:	4630      	mov	r0, r6
 80072ec:	f7ff ffd3 	bl	8007296 <RTC_Bcd2ToByte>
 80072f0:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80072f2:	4620      	mov	r0, r4
 80072f4:	f7ff ffcf 	bl	8007296 <RTC_Bcd2ToByte>
 80072f8:	70a8      	strb	r0, [r5, #2]
}
 80072fa:	2000      	movs	r0, #0
 80072fc:	bd70      	pop	{r4, r5, r6, pc}

080072fe <HAL_RTC_GetDate>:
{
 80072fe:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007300:	6803      	ldr	r3, [r0, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007308:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800730c:	0c18      	lsrs	r0, r3, #16
 800730e:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8007310:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8007314:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007316:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 800731a:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800731c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007320:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8007322:	b95a      	cbnz	r2, 800733c <HAL_RTC_GetDate+0x3e>
 8007324:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007326:	f7ff ffb6 	bl	8007296 <RTC_Bcd2ToByte>
 800732a:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800732c:	4630      	mov	r0, r6
 800732e:	f7ff ffb2 	bl	8007296 <RTC_Bcd2ToByte>
 8007332:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007334:	4628      	mov	r0, r5
 8007336:	f7ff ffae 	bl	8007296 <RTC_Bcd2ToByte>
 800733a:	70a0      	strb	r0, [r4, #2]
}
 800733c:	2000      	movs	r0, #0
 800733e:	bd70      	pop	{r4, r5, r6, pc}

08007340 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8007340:	6803      	ldr	r3, [r0, #0]
 8007342:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007344:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8007348:	4770      	bx	lr

0800734a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800734a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734c:	4605      	mov	r5, r0
 800734e:	460f      	mov	r7, r1
 8007350:	4616      	mov	r6, r2
 8007352:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	ea37 0303 	bics.w	r3, r7, r3
 800735c:	bf0c      	ite	eq
 800735e:	2301      	moveq	r3, #1
 8007360:	2300      	movne	r3, #0
 8007362:	42b3      	cmp	r3, r6
 8007364:	d037      	beq.n	80073d6 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007366:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800736a:	d0f3      	beq.n	8007354 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800736c:	f7fd ff82 	bl	8005274 <HAL_GetTick>
 8007370:	9b06      	ldr	r3, [sp, #24]
 8007372:	1ac0      	subs	r0, r0, r3
 8007374:	42a0      	cmp	r0, r4
 8007376:	d201      	bcs.n	800737c <SPI_WaitFlagStateUntilTimeout+0x32>
 8007378:	2c00      	cmp	r4, #0
 800737a:	d1eb      	bne.n	8007354 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800737c:	682a      	ldr	r2, [r5, #0]
 800737e:	6853      	ldr	r3, [r2, #4]
 8007380:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8007384:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007386:	686b      	ldr	r3, [r5, #4]
 8007388:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800738c:	d00b      	beq.n	80073a6 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800738e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007394:	d014      	beq.n	80073c0 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007396:	2301      	movs	r3, #1
 8007398:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800739c:	2300      	movs	r3, #0
 800739e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 80073a2:	2003      	movs	r0, #3
 80073a4:	e018      	b.n	80073d8 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073a6:	68ab      	ldr	r3, [r5, #8]
 80073a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ac:	d002      	beq.n	80073b4 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073b2:	d1ec      	bne.n	800738e <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 80073b4:	682a      	ldr	r2, [r5, #0]
 80073b6:	6813      	ldr	r3, [r2, #0]
 80073b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073bc:	6013      	str	r3, [r2, #0]
 80073be:	e7e6      	b.n	800738e <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 80073c0:	682a      	ldr	r2, [r5, #0]
 80073c2:	6813      	ldr	r3, [r2, #0]
 80073c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	682a      	ldr	r2, [r5, #0]
 80073cc:	6813      	ldr	r3, [r2, #0]
 80073ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	e7df      	b.n	8007396 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 80073d6:	2000      	movs	r0, #0
}
 80073d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073dc:	b530      	push	{r4, r5, lr}
 80073de:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80073e0:	4c16      	ldr	r4, [pc, #88]	; (800743c <SPI_EndRxTxTransaction+0x60>)
 80073e2:	6824      	ldr	r4, [r4, #0]
 80073e4:	4d16      	ldr	r5, [pc, #88]	; (8007440 <SPI_EndRxTxTransaction+0x64>)
 80073e6:	fba5 3404 	umull	r3, r4, r5, r4
 80073ea:	0d64      	lsrs	r4, r4, #21
 80073ec:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80073f0:	fb05 f404 	mul.w	r4, r5, r4
 80073f4:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073f6:	6844      	ldr	r4, [r0, #4]
 80073f8:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 80073fc:	d00b      	beq.n	8007416 <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80073fe:	9b03      	ldr	r3, [sp, #12]
 8007400:	b1c3      	cbz	r3, 8007434 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8007402:	9b03      	ldr	r3, [sp, #12]
 8007404:	3b01      	subs	r3, #1
 8007406:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007408:	6803      	ldr	r3, [r0, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007410:	d1f5      	bne.n	80073fe <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	e00f      	b.n	8007436 <SPI_EndRxTxTransaction+0x5a>
 8007416:	460b      	mov	r3, r1
 8007418:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800741a:	9200      	str	r2, [sp, #0]
 800741c:	2200      	movs	r2, #0
 800741e:	2180      	movs	r1, #128	; 0x80
 8007420:	f7ff ff93 	bl	800734a <SPI_WaitFlagStateUntilTimeout>
 8007424:	4603      	mov	r3, r0
 8007426:	b130      	cbz	r0, 8007436 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007428:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800742a:	f043 0320 	orr.w	r3, r3, #32
 800742e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e000      	b.n	8007436 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	b005      	add	sp, #20
 800743a:	bd30      	pop	{r4, r5, pc}
 800743c:	20000038 	.word	0x20000038
 8007440:	165e9f81 	.word	0x165e9f81

08007444 <SPI_EndRxTransaction>:
{
 8007444:	b510      	push	{r4, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800744a:	6840      	ldr	r0, [r0, #4]
 800744c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8007450:	d016      	beq.n	8007480 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007452:	6860      	ldr	r0, [r4, #4]
 8007454:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8007458:	d12e      	bne.n	80074b8 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800745a:	68a3      	ldr	r3, [r4, #8]
 800745c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007460:	d01b      	beq.n	800749a <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007462:	9200      	str	r2, [sp, #0]
 8007464:	460b      	mov	r3, r1
 8007466:	2200      	movs	r2, #0
 8007468:	2180      	movs	r1, #128	; 0x80
 800746a:	4620      	mov	r0, r4
 800746c:	f7ff ff6d 	bl	800734a <SPI_WaitFlagStateUntilTimeout>
 8007470:	4603      	mov	r3, r0
 8007472:	b350      	cbz	r0, 80074ca <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007474:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007476:	f043 0320 	orr.w	r3, r3, #32
 800747a:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e024      	b.n	80074ca <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007480:	68a3      	ldr	r3, [r4, #8]
 8007482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007486:	d002      	beq.n	800748e <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800748c:	d1e1      	bne.n	8007452 <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 800748e:	6820      	ldr	r0, [r4, #0]
 8007490:	6803      	ldr	r3, [r0, #0]
 8007492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007496:	6003      	str	r3, [r0, #0]
 8007498:	e7db      	b.n	8007452 <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800749a:	9200      	str	r2, [sp, #0]
 800749c:	460b      	mov	r3, r1
 800749e:	2200      	movs	r2, #0
 80074a0:	2101      	movs	r1, #1
 80074a2:	4620      	mov	r0, r4
 80074a4:	f7ff ff51 	bl	800734a <SPI_WaitFlagStateUntilTimeout>
 80074a8:	4603      	mov	r3, r0
 80074aa:	b170      	cbz	r0, 80074ca <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80074ae:	f043 0320 	orr.w	r3, r3, #32
 80074b2:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e008      	b.n	80074ca <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80074b8:	9200      	str	r2, [sp, #0]
 80074ba:	460b      	mov	r3, r1
 80074bc:	2200      	movs	r2, #0
 80074be:	2101      	movs	r1, #1
 80074c0:	4620      	mov	r0, r4
 80074c2:	f7ff ff42 	bl	800734a <SPI_WaitFlagStateUntilTimeout>
 80074c6:	4603      	mov	r3, r0
 80074c8:	b910      	cbnz	r0, 80074d0 <SPI_EndRxTransaction+0x8c>
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	b002      	add	sp, #8
 80074ce:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80074d2:	f043 0320 	orr.w	r3, r3, #32
 80074d6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e7f6      	b.n	80074ca <SPI_EndRxTransaction+0x86>

080074dc <HAL_SPI_Init>:
  if (hspi == NULL)
 80074dc:	2800      	cmp	r0, #0
 80074de:	d03b      	beq.n	8007558 <HAL_SPI_Init+0x7c>
{
 80074e0:	b510      	push	{r4, lr}
 80074e2:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074e4:	2300      	movs	r3, #0
 80074e6:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80074e8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d02e      	beq.n	800754e <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 80074f0:	2302      	movs	r3, #2
 80074f2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	6813      	ldr	r3, [r2, #0]
 80074fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074fe:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007500:	6863      	ldr	r3, [r4, #4]
 8007502:	68a2      	ldr	r2, [r4, #8]
 8007504:	4313      	orrs	r3, r2
 8007506:	68e2      	ldr	r2, [r4, #12]
 8007508:	4313      	orrs	r3, r2
 800750a:	6922      	ldr	r2, [r4, #16]
 800750c:	4313      	orrs	r3, r2
 800750e:	6962      	ldr	r2, [r4, #20]
 8007510:	4313      	orrs	r3, r2
 8007512:	69a2      	ldr	r2, [r4, #24]
 8007514:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8007518:	4313      	orrs	r3, r2
 800751a:	69e2      	ldr	r2, [r4, #28]
 800751c:	4313      	orrs	r3, r2
 800751e:	6a22      	ldr	r2, [r4, #32]
 8007520:	4313      	orrs	r3, r2
 8007522:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007524:	6822      	ldr	r2, [r4, #0]
 8007526:	430b      	orrs	r3, r1
 8007528:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800752a:	8b63      	ldrh	r3, [r4, #26]
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007532:	6822      	ldr	r2, [r4, #0]
 8007534:	430b      	orrs	r3, r1
 8007536:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007538:	6822      	ldr	r2, [r4, #0]
 800753a:	69d3      	ldr	r3, [r2, #28]
 800753c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007540:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007542:	2000      	movs	r0, #0
 8007544:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007546:	2301      	movs	r3, #1
 8007548:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800754c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800754e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8007552:	f7fc ffcf 	bl	80044f4 <HAL_SPI_MspInit>
 8007556:	e7cb      	b.n	80074f0 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8007558:	2001      	movs	r0, #1
}
 800755a:	4770      	bx	lr

0800755c <HAL_SPI_Transmit>:
{
 800755c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007560:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8007562:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8007566:	2c01      	cmp	r4, #1
 8007568:	f000 80c3 	beq.w	80076f2 <HAL_SPI_Transmit+0x196>
 800756c:	461d      	mov	r5, r3
 800756e:	4617      	mov	r7, r2
 8007570:	4688      	mov	r8, r1
 8007572:	4604      	mov	r4, r0
 8007574:	2301      	movs	r3, #1
 8007576:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800757a:	f7fd fe7b 	bl	8005274 <HAL_GetTick>
 800757e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007580:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b01      	cmp	r3, #1
 8007588:	d009      	beq.n	800759e <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800758a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800758c:	2301      	movs	r3, #1
 800758e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007592:	2300      	movs	r3, #0
 8007594:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007598:	b002      	add	sp, #8
 800759a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800759e:	f1b8 0f00 	cmp.w	r8, #0
 80075a2:	f000 8098 	beq.w	80076d6 <HAL_SPI_Transmit+0x17a>
 80075a6:	2f00      	cmp	r7, #0
 80075a8:	f000 8097 	beq.w	80076da <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075ac:	2303      	movs	r3, #3
 80075ae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075b2:	2300      	movs	r3, #0
 80075b4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075b6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075ba:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80075bc:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075be:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80075c0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80075c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075c4:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80075c6:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075c8:	68a3      	ldr	r3, [r4, #8]
 80075ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ce:	d01c      	beq.n	800760a <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80075d8:	d103      	bne.n	80075e2 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075e0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075e2:	68e3      	ldr	r3, [r4, #12]
 80075e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075e8:	d015      	beq.n	8007616 <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075ea:	6863      	ldr	r3, [r4, #4]
 80075ec:	b10b      	cbz	r3, 80075f2 <HAL_SPI_Transmit+0x96>
 80075ee:	2f01      	cmp	r7, #1
 80075f0:	d149      	bne.n	8007686 <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	7812      	ldrb	r2, [r2, #0]
 80075f8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80075fc:	3301      	adds	r3, #1
 80075fe:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8007600:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007602:	3b01      	subs	r3, #1
 8007604:	b29b      	uxth	r3, r3
 8007606:	86e3      	strh	r3, [r4, #54]	; 0x36
 8007608:	e03d      	b.n	8007686 <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 800760a:	6822      	ldr	r2, [r4, #0]
 800760c:	6813      	ldr	r3, [r2, #0]
 800760e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	e7dc      	b.n	80075d0 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007616:	6863      	ldr	r3, [r4, #4]
 8007618:	b10b      	cbz	r3, 800761e <HAL_SPI_Transmit+0xc2>
 800761a:	2f01      	cmp	r7, #1
 800761c:	d115      	bne.n	800764a <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800761e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	8812      	ldrh	r2, [r2, #0]
 8007624:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007626:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007628:	3302      	adds	r3, #2
 800762a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800762c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800762e:	3b01      	subs	r3, #1
 8007630:	b29b      	uxth	r3, r3
 8007632:	86e3      	strh	r3, [r4, #54]	; 0x36
 8007634:	e009      	b.n	800764a <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007636:	f7fd fe1d 	bl	8005274 <HAL_GetTick>
 800763a:	1b80      	subs	r0, r0, r6
 800763c:	42a8      	cmp	r0, r5
 800763e:	d302      	bcc.n	8007646 <HAL_SPI_Transmit+0xea>
 8007640:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007644:	d14b      	bne.n	80076de <HAL_SPI_Transmit+0x182>
 8007646:	2d00      	cmp	r5, #0
 8007648:	d04b      	beq.n	80076e2 <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 800764a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d02c      	beq.n	80076ac <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	689a      	ldr	r2, [r3, #8]
 8007656:	f012 0f02 	tst.w	r2, #2
 800765a:	d0ec      	beq.n	8007636 <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800765c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800765e:	8812      	ldrh	r2, [r2, #0]
 8007660:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007662:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007664:	3302      	adds	r3, #2
 8007666:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007668:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800766a:	3b01      	subs	r3, #1
 800766c:	b29b      	uxth	r3, r3
 800766e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8007670:	e7eb      	b.n	800764a <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007672:	f7fd fdff 	bl	8005274 <HAL_GetTick>
 8007676:	1b80      	subs	r0, r0, r6
 8007678:	42a8      	cmp	r0, r5
 800767a:	d302      	bcc.n	8007682 <HAL_SPI_Transmit+0x126>
 800767c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007680:	d131      	bne.n	80076e6 <HAL_SPI_Transmit+0x18a>
 8007682:	2d00      	cmp	r5, #0
 8007684:	d031      	beq.n	80076ea <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 8007686:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007688:	b29b      	uxth	r3, r3
 800768a:	b17b      	cbz	r3, 80076ac <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	f012 0f02 	tst.w	r2, #2
 8007694:	d0ed      	beq.n	8007672 <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007696:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007698:	7812      	ldrb	r2, [r2, #0]
 800769a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800769c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800769e:	3301      	adds	r3, #1
 80076a0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80076a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80076aa:	e7ec      	b.n	8007686 <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076ac:	4632      	mov	r2, r6
 80076ae:	4629      	mov	r1, r5
 80076b0:	4620      	mov	r0, r4
 80076b2:	f7ff fe93 	bl	80073dc <SPI_EndRxTxTransaction>
 80076b6:	b108      	cbz	r0, 80076bc <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076b8:	2320      	movs	r3, #32
 80076ba:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076bc:	68a3      	ldr	r3, [r4, #8]
 80076be:	b933      	cbnz	r3, 80076ce <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076c0:	9301      	str	r3, [sp, #4]
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	9201      	str	r2, [sp, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80076d0:	b96b      	cbnz	r3, 80076ee <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076d2:	2000      	movs	r0, #0
 80076d4:	e75a      	b.n	800758c <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80076d6:	2001      	movs	r0, #1
 80076d8:	e758      	b.n	800758c <HAL_SPI_Transmit+0x30>
 80076da:	2001      	movs	r0, #1
 80076dc:	e756      	b.n	800758c <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80076de:	2003      	movs	r0, #3
 80076e0:	e754      	b.n	800758c <HAL_SPI_Transmit+0x30>
 80076e2:	2003      	movs	r0, #3
 80076e4:	e752      	b.n	800758c <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80076e6:	2003      	movs	r0, #3
 80076e8:	e750      	b.n	800758c <HAL_SPI_Transmit+0x30>
 80076ea:	2003      	movs	r0, #3
 80076ec:	e74e      	b.n	800758c <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80076ee:	2001      	movs	r0, #1
 80076f0:	e74c      	b.n	800758c <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80076f2:	2002      	movs	r0, #2
 80076f4:	e750      	b.n	8007598 <HAL_SPI_Transmit+0x3c>

080076f6 <HAL_SPI_TransmitReceive>:
{
 80076f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076fa:	b083      	sub	sp, #12
 80076fc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8007700:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8007704:	2c01      	cmp	r4, #1
 8007706:	f000 810b 	beq.w	8007920 <HAL_SPI_TransmitReceive+0x22a>
 800770a:	461d      	mov	r5, r3
 800770c:	4617      	mov	r7, r2
 800770e:	460e      	mov	r6, r1
 8007710:	4604      	mov	r4, r0
 8007712:	2301      	movs	r3, #1
 8007714:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8007718:	f7fd fdac 	bl	8005274 <HAL_GetTick>
 800771c:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 800771e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8007722:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8007724:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007726:	2801      	cmp	r0, #1
 8007728:	d015      	beq.n	8007756 <HAL_SPI_TransmitReceive+0x60>
 800772a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800772e:	d00a      	beq.n	8007746 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 8007730:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007732:	2201      	movs	r2, #1
 8007734:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007738:	2200      	movs	r2, #0
 800773a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 800773e:	4618      	mov	r0, r3
 8007740:	b003      	add	sp, #12
 8007742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007746:	68a3      	ldr	r3, [r4, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	f040 80db 	bne.w	8007904 <HAL_SPI_TransmitReceive+0x20e>
 800774e:	2804      	cmp	r0, #4
 8007750:	d001      	beq.n	8007756 <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 8007752:	2302      	movs	r3, #2
 8007754:	e7ed      	b.n	8007732 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007756:	2e00      	cmp	r6, #0
 8007758:	f000 80d6 	beq.w	8007908 <HAL_SPI_TransmitReceive+0x212>
 800775c:	2f00      	cmp	r7, #0
 800775e:	f000 80d5 	beq.w	800790c <HAL_SPI_TransmitReceive+0x216>
 8007762:	2d00      	cmp	r5, #0
 8007764:	f000 80d4 	beq.w	8007910 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007768:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b04      	cmp	r3, #4
 8007770:	d002      	beq.n	8007778 <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007772:	2305      	movs	r3, #5
 8007774:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007778:	2300      	movs	r3, #0
 800777a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800777c:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800777e:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007780:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007782:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007784:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007786:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8007788:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800778a:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007794:	d103      	bne.n	800779e <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800779c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800779e:	68e3      	ldr	r3, [r4, #12]
 80077a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077a4:	d010      	beq.n	80077c8 <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077a6:	6863      	ldr	r3, [r4, #4]
 80077a8:	b10b      	cbz	r3, 80077ae <HAL_SPI_TransmitReceive+0xb8>
 80077aa:	2d01      	cmp	r5, #1
 80077ac:	d10a      	bne.n	80077c4 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	7812      	ldrb	r2, [r2, #0]
 80077b4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80077b8:	3301      	adds	r3, #1
 80077ba:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80077bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80077c4:	2501      	movs	r5, #1
 80077c6:	e069      	b.n	800789c <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077c8:	6863      	ldr	r3, [r4, #4]
 80077ca:	b10b      	cbz	r3, 80077d0 <HAL_SPI_TransmitReceive+0xda>
 80077cc:	2d01      	cmp	r5, #1
 80077ce:	d10a      	bne.n	80077e6 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	8812      	ldrh	r2, [r2, #0]
 80077d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80077da:	3302      	adds	r3, #2
 80077dc:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80077de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80077e0:	3b01      	subs	r3, #1
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80077e6:	2501      	movs	r5, #1
 80077e8:	e01b      	b.n	8007822 <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	f012 0f01 	tst.w	r2, #1
 80077f2:	d00d      	beq.n	8007810 <HAL_SPI_TransmitReceive+0x11a>
 80077f4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80077f6:	b292      	uxth	r2, r2
 80077f8:	b152      	cbz	r2, 8007810 <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80077fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007800:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007802:	3302      	adds	r3, #2
 8007804:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007806:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007808:	3b01      	subs	r3, #1
 800780a:	b29b      	uxth	r3, r3
 800780c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800780e:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007810:	f7fd fd30 	bl	8005274 <HAL_GetTick>
 8007814:	eba0 0009 	sub.w	r0, r0, r9
 8007818:	4540      	cmp	r0, r8
 800781a:	d302      	bcc.n	8007822 <HAL_SPI_TransmitReceive+0x12c>
 800781c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007820:	d178      	bne.n	8007914 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007822:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007824:	b29b      	uxth	r3, r3
 8007826:	b91b      	cbnz	r3, 8007830 <HAL_SPI_TransmitReceive+0x13a>
 8007828:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800782a:	b29b      	uxth	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d052      	beq.n	80078d6 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	f012 0f02 	tst.w	r2, #2
 8007838:	d0d7      	beq.n	80077ea <HAL_SPI_TransmitReceive+0xf4>
 800783a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800783c:	b292      	uxth	r2, r2
 800783e:	2a00      	cmp	r2, #0
 8007840:	d0d3      	beq.n	80077ea <HAL_SPI_TransmitReceive+0xf4>
 8007842:	2d00      	cmp	r5, #0
 8007844:	d0d1      	beq.n	80077ea <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007846:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007848:	8812      	ldrh	r2, [r2, #0]
 800784a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800784c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800784e:	3302      	adds	r3, #2
 8007850:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007852:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007854:	3b01      	subs	r3, #1
 8007856:	b29b      	uxth	r3, r3
 8007858:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800785a:	2500      	movs	r5, #0
 800785c:	e7c5      	b.n	80077ea <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	f012 0f01 	tst.w	r2, #1
 8007866:	d00d      	beq.n	8007884 <HAL_SPI_TransmitReceive+0x18e>
 8007868:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800786a:	b292      	uxth	r2, r2
 800786c:	b152      	cbz	r2, 8007884 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007872:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007874:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007876:	3301      	adds	r3, #1
 8007878:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800787a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800787c:	3b01      	subs	r3, #1
 800787e:	b29b      	uxth	r3, r3
 8007880:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8007882:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007884:	f7fd fcf6 	bl	8005274 <HAL_GetTick>
 8007888:	eba0 0009 	sub.w	r0, r0, r9
 800788c:	4540      	cmp	r0, r8
 800788e:	d302      	bcc.n	8007896 <HAL_SPI_TransmitReceive+0x1a0>
 8007890:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007894:	d140      	bne.n	8007918 <HAL_SPI_TransmitReceive+0x222>
 8007896:	f1b8 0f00 	cmp.w	r8, #0
 800789a:	d03f      	beq.n	800791c <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800789c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800789e:	b29b      	uxth	r3, r3
 80078a0:	b913      	cbnz	r3, 80078a8 <HAL_SPI_TransmitReceive+0x1b2>
 80078a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	b1b3      	cbz	r3, 80078d6 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	f012 0f02 	tst.w	r2, #2
 80078b0:	d0d5      	beq.n	800785e <HAL_SPI_TransmitReceive+0x168>
 80078b2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80078b4:	b292      	uxth	r2, r2
 80078b6:	2a00      	cmp	r2, #0
 80078b8:	d0d1      	beq.n	800785e <HAL_SPI_TransmitReceive+0x168>
 80078ba:	2d00      	cmp	r5, #0
 80078bc:	d0cf      	beq.n	800785e <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80078c0:	7812      	ldrb	r2, [r2, #0]
 80078c2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80078c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80078c6:	3301      	adds	r3, #1
 80078c8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80078ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80078cc:	3b01      	subs	r3, #1
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80078d2:	2500      	movs	r5, #0
 80078d4:	e7c3      	b.n	800785e <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078d6:	464a      	mov	r2, r9
 80078d8:	4641      	mov	r1, r8
 80078da:	4620      	mov	r0, r4
 80078dc:	f7ff fd7e 	bl	80073dc <SPI_EndRxTxTransaction>
 80078e0:	4603      	mov	r3, r0
 80078e2:	b118      	cbz	r0, 80078ec <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078e4:	2320      	movs	r3, #32
 80078e6:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
    goto error;
 80078ea:	e722      	b.n	8007732 <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078ec:	68a2      	ldr	r2, [r4, #8]
 80078ee:	2a00      	cmp	r2, #0
 80078f0:	f47f af1f 	bne.w	8007732 <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078f4:	9201      	str	r2, [sp, #4]
 80078f6:	6822      	ldr	r2, [r4, #0]
 80078f8:	68d1      	ldr	r1, [r2, #12]
 80078fa:	9101      	str	r1, [sp, #4]
 80078fc:	6892      	ldr	r2, [r2, #8]
 80078fe:	9201      	str	r2, [sp, #4]
 8007900:	9a01      	ldr	r2, [sp, #4]
 8007902:	e716      	b.n	8007732 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 8007904:	2302      	movs	r3, #2
 8007906:	e714      	b.n	8007732 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e712      	b.n	8007732 <HAL_SPI_TransmitReceive+0x3c>
 800790c:	2301      	movs	r3, #1
 800790e:	e710      	b.n	8007732 <HAL_SPI_TransmitReceive+0x3c>
 8007910:	2301      	movs	r3, #1
 8007912:	e70e      	b.n	8007732 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e70c      	b.n	8007732 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e70a      	b.n	8007732 <HAL_SPI_TransmitReceive+0x3c>
 800791c:	2303      	movs	r3, #3
 800791e:	e708      	b.n	8007732 <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8007920:	2302      	movs	r3, #2
 8007922:	e70c      	b.n	800773e <HAL_SPI_TransmitReceive+0x48>

08007924 <HAL_SPI_Receive>:
{
 8007924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	4604      	mov	r4, r0
 800792c:	460f      	mov	r7, r1
 800792e:	4690      	mov	r8, r2
 8007930:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007932:	6843      	ldr	r3, [r0, #4]
 8007934:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007938:	d019      	beq.n	800796e <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 800793a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800793e:	2b01      	cmp	r3, #1
 8007940:	f000 809f 	beq.w	8007a82 <HAL_SPI_Receive+0x15e>
 8007944:	2301      	movs	r3, #1
 8007946:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800794a:	f7fd fc93 	bl	8005274 <HAL_GetTick>
 800794e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007950:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b01      	cmp	r3, #1
 8007958:	d015      	beq.n	8007986 <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 800795a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800795c:	2301      	movs	r3, #1
 800795e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007962:	2300      	movs	r3, #0
 8007964:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007968:	b002      	add	sp, #8
 800796a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800796e:	6883      	ldr	r3, [r0, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e2      	bne.n	800793a <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007974:	2304      	movs	r3, #4
 8007976:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800797a:	9500      	str	r5, [sp, #0]
 800797c:	4613      	mov	r3, r2
 800797e:	460a      	mov	r2, r1
 8007980:	f7ff feb9 	bl	80076f6 <HAL_SPI_TransmitReceive>
 8007984:	e7f0      	b.n	8007968 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 8007986:	2f00      	cmp	r7, #0
 8007988:	d06d      	beq.n	8007a66 <HAL_SPI_Receive+0x142>
 800798a:	f1b8 0f00 	cmp.w	r8, #0
 800798e:	d06c      	beq.n	8007a6a <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007990:	2304      	movs	r3, #4
 8007992:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007996:	2300      	movs	r3, #0
 8007998:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800799a:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800799c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80079a0:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80079a4:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80079a6:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80079a8:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 80079aa:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079ac:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079ae:	68a3      	ldr	r3, [r4, #8]
 80079b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b4:	d00b      	beq.n	80079ce <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	f012 0f40 	tst.w	r2, #64	; 0x40
 80079be:	d103      	bne.n	80079c8 <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079c6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80079c8:	68e3      	ldr	r3, [r4, #12]
 80079ca:	b183      	cbz	r3, 80079ee <HAL_SPI_Receive+0xca>
 80079cc:	e02c      	b.n	8007a28 <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 80079ce:	6822      	ldr	r2, [r4, #0]
 80079d0:	6813      	ldr	r3, [r2, #0]
 80079d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	e7ed      	b.n	80079b6 <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079da:	f7fd fc4b 	bl	8005274 <HAL_GetTick>
 80079de:	1b80      	subs	r0, r0, r6
 80079e0:	42a8      	cmp	r0, r5
 80079e2:	d302      	bcc.n	80079ea <HAL_SPI_Receive+0xc6>
 80079e4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80079e8:	d141      	bne.n	8007a6e <HAL_SPI_Receive+0x14a>
 80079ea:	2d00      	cmp	r5, #0
 80079ec:	d041      	beq.n	8007a72 <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 80079ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d02b      	beq.n	8007a4e <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	689a      	ldr	r2, [r3, #8]
 80079fa:	f012 0f01 	tst.w	r2, #1
 80079fe:	d0ec      	beq.n	80079da <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a00:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007a02:	7b1b      	ldrb	r3, [r3, #12]
 8007a04:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a08:	3301      	adds	r3, #1
 8007a0a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007a0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007a14:	e7eb      	b.n	80079ee <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a16:	f7fd fc2d 	bl	8005274 <HAL_GetTick>
 8007a1a:	1b80      	subs	r0, r0, r6
 8007a1c:	42a8      	cmp	r0, r5
 8007a1e:	d302      	bcc.n	8007a26 <HAL_SPI_Receive+0x102>
 8007a20:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007a24:	d127      	bne.n	8007a76 <HAL_SPI_Receive+0x152>
 8007a26:	b345      	cbz	r5, 8007a7a <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 8007a28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	b17b      	cbz	r3, 8007a4e <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	f012 0f01 	tst.w	r2, #1
 8007a36:	d0ee      	beq.n	8007a16 <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a40:	3302      	adds	r3, #2
 8007a42:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007a44:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007a4c:	e7ec      	b.n	8007a28 <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a4e:	4632      	mov	r2, r6
 8007a50:	4629      	mov	r1, r5
 8007a52:	4620      	mov	r0, r4
 8007a54:	f7ff fcf6 	bl	8007444 <SPI_EndRxTransaction>
 8007a58:	b108      	cbz	r0, 8007a5e <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a5a:	2320      	movs	r3, #32
 8007a5c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007a60:	b96b      	cbnz	r3, 8007a7e <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a62:	2000      	movs	r0, #0
 8007a64:	e77a      	b.n	800795c <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8007a66:	2001      	movs	r0, #1
 8007a68:	e778      	b.n	800795c <HAL_SPI_Receive+0x38>
 8007a6a:	2001      	movs	r0, #1
 8007a6c:	e776      	b.n	800795c <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8007a6e:	2003      	movs	r0, #3
 8007a70:	e774      	b.n	800795c <HAL_SPI_Receive+0x38>
 8007a72:	2003      	movs	r0, #3
 8007a74:	e772      	b.n	800795c <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8007a76:	2003      	movs	r0, #3
 8007a78:	e770      	b.n	800795c <HAL_SPI_Receive+0x38>
 8007a7a:	2003      	movs	r0, #3
 8007a7c:	e76e      	b.n	800795c <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8007a7e:	2001      	movs	r0, #1
 8007a80:	e76c      	b.n	800795c <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 8007a82:	2002      	movs	r0, #2
 8007a84:	e770      	b.n	8007968 <HAL_SPI_Receive+0x44>
	...

08007a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a88:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a8a:	6a03      	ldr	r3, [r0, #32]
 8007a8c:	f023 0301 	bic.w	r3, r3, #1
 8007a90:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a92:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a94:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a96:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a98:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a9c:	680d      	ldr	r5, [r1, #0]
 8007a9e:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007aa2:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007aa6:	688b      	ldr	r3, [r1, #8]
 8007aa8:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007aaa:	4d0d      	ldr	r5, [pc, #52]	; (8007ae0 <TIM_OC1_SetConfig+0x58>)
 8007aac:	42a8      	cmp	r0, r5
 8007aae:	d009      	beq.n	8007ac4 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab0:	4d0b      	ldr	r5, [pc, #44]	; (8007ae0 <TIM_OC1_SetConfig+0x58>)
 8007ab2:	42a8      	cmp	r0, r5
 8007ab4:	d00d      	beq.n	8007ad2 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ab6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ab8:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aba:	684a      	ldr	r2, [r1, #4]
 8007abc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007abe:	6203      	str	r3, [r0, #32]
}
 8007ac0:	bc70      	pop	{r4, r5, r6}
 8007ac2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ac4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007ac8:	68cc      	ldr	r4, [r1, #12]
 8007aca:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8007acc:	f023 0304 	bic.w	r3, r3, #4
 8007ad0:	e7ee      	b.n	8007ab0 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ad2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8007ad6:	694c      	ldr	r4, [r1, #20]
 8007ad8:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ada:	698a      	ldr	r2, [r1, #24]
 8007adc:	4322      	orrs	r2, r4
 8007ade:	e7ea      	b.n	8007ab6 <TIM_OC1_SetConfig+0x2e>
 8007ae0:	40010000 	.word	0x40010000

08007ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ae4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ae6:	6a03      	ldr	r3, [r0, #32]
 8007ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007af2:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007af4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af8:	680d      	ldr	r5, [r1, #0]
 8007afa:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b00:	688d      	ldr	r5, [r1, #8]
 8007b02:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b06:	4d0f      	ldr	r5, [pc, #60]	; (8007b44 <TIM_OC3_SetConfig+0x60>)
 8007b08:	42a8      	cmp	r0, r5
 8007b0a:	d009      	beq.n	8007b20 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b0c:	4d0d      	ldr	r5, [pc, #52]	; (8007b44 <TIM_OC3_SetConfig+0x60>)
 8007b0e:	42a8      	cmp	r0, r5
 8007b10:	d00e      	beq.n	8007b30 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b12:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b14:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b16:	684a      	ldr	r2, [r1, #4]
 8007b18:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b1a:	6203      	str	r3, [r0, #32]
}
 8007b1c:	bc30      	pop	{r4, r5}
 8007b1e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b24:	68cd      	ldr	r5, [r1, #12]
 8007b26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b2e:	e7ed      	b.n	8007b0c <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b30:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b34:	694d      	ldr	r5, [r1, #20]
 8007b36:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b3a:	698d      	ldr	r5, [r1, #24]
 8007b3c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8007b40:	e7e7      	b.n	8007b12 <TIM_OC3_SetConfig+0x2e>
 8007b42:	bf00      	nop
 8007b44:	40010000 	.word	0x40010000

08007b48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b4a:	6a03      	ldr	r3, [r0, #32]
 8007b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b50:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b52:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b54:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b56:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b58:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b5c:	680d      	ldr	r5, [r1, #0]
 8007b5e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b66:	688d      	ldr	r5, [r1, #8]
 8007b68:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b6c:	4d07      	ldr	r5, [pc, #28]	; (8007b8c <TIM_OC4_SetConfig+0x44>)
 8007b6e:	42a8      	cmp	r0, r5
 8007b70:	d006      	beq.n	8007b80 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b72:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b74:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b76:	684a      	ldr	r2, [r1, #4]
 8007b78:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b7a:	6203      	str	r3, [r0, #32]
}
 8007b7c:	bc30      	pop	{r4, r5}
 8007b7e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b80:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b84:	694d      	ldr	r5, [r1, #20]
 8007b86:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8007b8a:	e7f2      	b.n	8007b72 <TIM_OC4_SetConfig+0x2a>
 8007b8c:	40010000 	.word	0x40010000

08007b90 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b90:	6802      	ldr	r2, [r0, #0]
 8007b92:	68d3      	ldr	r3, [r2, #12]
 8007b94:	f043 0301 	orr.w	r3, r3, #1
 8007b98:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b9a:	6802      	ldr	r2, [r0, #0]
 8007b9c:	6893      	ldr	r3, [r2, #8]
 8007b9e:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba2:	2b06      	cmp	r3, #6
 8007ba4:	d003      	beq.n	8007bae <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8007ba6:	6813      	ldr	r3, [r2, #0]
 8007ba8:	f043 0301 	orr.w	r3, r3, #1
 8007bac:	6013      	str	r3, [r2, #0]
}
 8007bae:	2000      	movs	r0, #0
 8007bb0:	4770      	bx	lr

08007bb2 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_TIM_IC_CaptureCallback>:
}
 8007bb4:	4770      	bx	lr

08007bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_TIM_TriggerCallback>:
}
 8007bb8:	4770      	bx	lr

08007bba <HAL_TIM_IRQHandler>:
{
 8007bba:	b510      	push	{r4, lr}
 8007bbc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bbe:	6803      	ldr	r3, [r0, #0]
 8007bc0:	691a      	ldr	r2, [r3, #16]
 8007bc2:	f012 0f02 	tst.w	r2, #2
 8007bc6:	d011      	beq.n	8007bec <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	f012 0f02 	tst.w	r2, #2
 8007bce:	d00d      	beq.n	8007bec <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bd0:	f06f 0202 	mvn.w	r2, #2
 8007bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bda:	6803      	ldr	r3, [r0, #0]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	f013 0f03 	tst.w	r3, #3
 8007be2:	d070      	beq.n	8007cc6 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8007be4:	f7ff ffe6 	bl	8007bb4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007be8:	2300      	movs	r3, #0
 8007bea:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	691a      	ldr	r2, [r3, #16]
 8007bf0:	f012 0f04 	tst.w	r2, #4
 8007bf4:	d012      	beq.n	8007c1c <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	f012 0f04 	tst.w	r2, #4
 8007bfc:	d00e      	beq.n	8007c1c <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bfe:	f06f 0204 	mvn.w	r2, #4
 8007c02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c04:	2302      	movs	r3, #2
 8007c06:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007c10:	d05f      	beq.n	8007cd2 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8007c12:	4620      	mov	r0, r4
 8007c14:	f7ff ffce 	bl	8007bb4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	691a      	ldr	r2, [r3, #16]
 8007c20:	f012 0f08 	tst.w	r2, #8
 8007c24:	d012      	beq.n	8007c4c <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	f012 0f08 	tst.w	r2, #8
 8007c2c:	d00e      	beq.n	8007c4c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c2e:	f06f 0208 	mvn.w	r2, #8
 8007c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c34:	2304      	movs	r3, #4
 8007c36:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	f013 0f03 	tst.w	r3, #3
 8007c40:	d04e      	beq.n	8007ce0 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8007c42:	4620      	mov	r0, r4
 8007c44:	f7ff ffb6 	bl	8007bb4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	691a      	ldr	r2, [r3, #16]
 8007c50:	f012 0f10 	tst.w	r2, #16
 8007c54:	d012      	beq.n	8007c7c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c56:	68da      	ldr	r2, [r3, #12]
 8007c58:	f012 0f10 	tst.w	r2, #16
 8007c5c:	d00e      	beq.n	8007c7c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c5e:	f06f 0210 	mvn.w	r2, #16
 8007c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c64:	2308      	movs	r3, #8
 8007c66:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007c70:	d03d      	beq.n	8007cee <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8007c72:	4620      	mov	r0, r4
 8007c74:	f7ff ff9e 	bl	8007bb4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	691a      	ldr	r2, [r3, #16]
 8007c80:	f012 0f01 	tst.w	r2, #1
 8007c84:	d003      	beq.n	8007c8e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	f012 0f01 	tst.w	r2, #1
 8007c8c:	d136      	bne.n	8007cfc <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	691a      	ldr	r2, [r3, #16]
 8007c92:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007c96:	d003      	beq.n	8007ca0 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007c9e:	d134      	bne.n	8007d0a <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007ca8:	d003      	beq.n	8007cb2 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007cb0:	d132      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	691a      	ldr	r2, [r3, #16]
 8007cb6:	f012 0f20 	tst.w	r2, #32
 8007cba:	d003      	beq.n	8007cc4 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	f012 0f20 	tst.w	r2, #32
 8007cc2:	d130      	bne.n	8007d26 <HAL_TIM_IRQHandler+0x16c>
}
 8007cc4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cc6:	f7ff ff74 	bl	8007bb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f7ff ff73 	bl	8007bb6 <HAL_TIM_PWM_PulseFinishedCallback>
 8007cd0:	e78a      	b.n	8007be8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f7ff ff6d 	bl	8007bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f7ff ff6c 	bl	8007bb6 <HAL_TIM_PWM_PulseFinishedCallback>
 8007cde:	e79b      	b.n	8007c18 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f7ff ff66 	bl	8007bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f7ff ff65 	bl	8007bb6 <HAL_TIM_PWM_PulseFinishedCallback>
 8007cec:	e7ac      	b.n	8007c48 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f7ff ff5f 	bl	8007bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f7ff ff5e 	bl	8007bb6 <HAL_TIM_PWM_PulseFinishedCallback>
 8007cfa:	e7bd      	b.n	8007c78 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cfc:	f06f 0201 	mvn.w	r2, #1
 8007d00:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d02:	4620      	mov	r0, r4
 8007d04:	f7fc f81c 	bl	8003d40 <HAL_TIM_PeriodElapsedCallback>
 8007d08:	e7c1      	b.n	8007c8e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d0e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 f9c5 	bl	80080a0 <HAL_TIMEx_BreakCallback>
 8007d16:	e7c3      	b.n	8007ca0 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d1c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f7ff ff4a 	bl	8007bb8 <HAL_TIM_TriggerCallback>
 8007d24:	e7c5      	b.n	8007cb2 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d26:	f06f 0220 	mvn.w	r2, #32
 8007d2a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 f9b6 	bl	800809e <HAL_TIMEx_CommutCallback>
}
 8007d32:	e7c7      	b.n	8007cc4 <HAL_TIM_IRQHandler+0x10a>

08007d34 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8007d34:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d36:	4a25      	ldr	r2, [pc, #148]	; (8007dcc <TIM_Base_SetConfig+0x98>)
 8007d38:	4290      	cmp	r0, r2
 8007d3a:	d00e      	beq.n	8007d5a <TIM_Base_SetConfig+0x26>
 8007d3c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007d40:	d00b      	beq.n	8007d5a <TIM_Base_SetConfig+0x26>
 8007d42:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007d46:	4290      	cmp	r0, r2
 8007d48:	d007      	beq.n	8007d5a <TIM_Base_SetConfig+0x26>
 8007d4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d4e:	4290      	cmp	r0, r2
 8007d50:	d003      	beq.n	8007d5a <TIM_Base_SetConfig+0x26>
 8007d52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d56:	4290      	cmp	r0, r2
 8007d58:	d103      	bne.n	8007d62 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007d5e:	684a      	ldr	r2, [r1, #4]
 8007d60:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d62:	4a1a      	ldr	r2, [pc, #104]	; (8007dcc <TIM_Base_SetConfig+0x98>)
 8007d64:	4290      	cmp	r0, r2
 8007d66:	d01a      	beq.n	8007d9e <TIM_Base_SetConfig+0x6a>
 8007d68:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007d6c:	d017      	beq.n	8007d9e <TIM_Base_SetConfig+0x6a>
 8007d6e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007d72:	4290      	cmp	r0, r2
 8007d74:	d013      	beq.n	8007d9e <TIM_Base_SetConfig+0x6a>
 8007d76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d7a:	4290      	cmp	r0, r2
 8007d7c:	d00f      	beq.n	8007d9e <TIM_Base_SetConfig+0x6a>
 8007d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d82:	4290      	cmp	r0, r2
 8007d84:	d00b      	beq.n	8007d9e <TIM_Base_SetConfig+0x6a>
 8007d86:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8007d8a:	4290      	cmp	r0, r2
 8007d8c:	d007      	beq.n	8007d9e <TIM_Base_SetConfig+0x6a>
 8007d8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d92:	4290      	cmp	r0, r2
 8007d94:	d003      	beq.n	8007d9e <TIM_Base_SetConfig+0x6a>
 8007d96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d9a:	4290      	cmp	r0, r2
 8007d9c:	d103      	bne.n	8007da6 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007da2:	68ca      	ldr	r2, [r1, #12]
 8007da4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007daa:	694a      	ldr	r2, [r1, #20]
 8007dac:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007dae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007db0:	688b      	ldr	r3, [r1, #8]
 8007db2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007db4:	680b      	ldr	r3, [r1, #0]
 8007db6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007db8:	4b04      	ldr	r3, [pc, #16]	; (8007dcc <TIM_Base_SetConfig+0x98>)
 8007dba:	4298      	cmp	r0, r3
 8007dbc:	d002      	beq.n	8007dc4 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	6143      	str	r3, [r0, #20]
}
 8007dc2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8007dc4:	690b      	ldr	r3, [r1, #16]
 8007dc6:	6303      	str	r3, [r0, #48]	; 0x30
 8007dc8:	e7f9      	b.n	8007dbe <TIM_Base_SetConfig+0x8a>
 8007dca:	bf00      	nop
 8007dcc:	40010000 	.word	0x40010000

08007dd0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007dd0:	b1a8      	cbz	r0, 8007dfe <HAL_TIM_Base_Init+0x2e>
{
 8007dd2:	b510      	push	{r4, lr}
 8007dd4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007dd6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007dda:	b15b      	cbz	r3, 8007df4 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8007ddc:	2302      	movs	r3, #2
 8007dde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007de2:	1d21      	adds	r1, r4, #4
 8007de4:	6820      	ldr	r0, [r4, #0]
 8007de6:	f7ff ffa5 	bl	8007d34 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007dea:	2301      	movs	r3, #1
 8007dec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007df0:	2000      	movs	r0, #0
}
 8007df2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007df4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007df8:	f7fc fc00 	bl	80045fc <HAL_TIM_Base_MspInit>
 8007dfc:	e7ee      	b.n	8007ddc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8007dfe:	2001      	movs	r0, #1
}
 8007e00:	4770      	bx	lr

08007e02 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007e02:	b1a8      	cbz	r0, 8007e30 <HAL_TIM_PWM_Init+0x2e>
{
 8007e04:	b510      	push	{r4, lr}
 8007e06:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007e08:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007e0c:	b15b      	cbz	r3, 8007e26 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8007e0e:	2302      	movs	r3, #2
 8007e10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e14:	1d21      	adds	r1, r4, #4
 8007e16:	6820      	ldr	r0, [r4, #0]
 8007e18:	f7ff ff8c 	bl	8007d34 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007e22:	2000      	movs	r0, #0
}
 8007e24:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007e26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007e2a:	f7fc fb9b 	bl	8004564 <HAL_TIM_PWM_MspInit>
 8007e2e:	e7ee      	b.n	8007e0e <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8007e30:	2001      	movs	r0, #1
}
 8007e32:	4770      	bx	lr

08007e34 <TIM_OC2_SetConfig>:
{
 8007e34:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e36:	6a03      	ldr	r3, [r0, #32]
 8007e38:	f023 0310 	bic.w	r3, r3, #16
 8007e3c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007e3e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007e40:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007e42:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e44:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e48:	680d      	ldr	r5, [r1, #0]
 8007e4a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8007e4e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e52:	688d      	ldr	r5, [r1, #8]
 8007e54:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e58:	4d0e      	ldr	r5, [pc, #56]	; (8007e94 <TIM_OC2_SetConfig+0x60>)
 8007e5a:	42a8      	cmp	r0, r5
 8007e5c:	d009      	beq.n	8007e72 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e5e:	4d0d      	ldr	r5, [pc, #52]	; (8007e94 <TIM_OC2_SetConfig+0x60>)
 8007e60:	42a8      	cmp	r0, r5
 8007e62:	d00e      	beq.n	8007e82 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8007e64:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007e66:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007e68:	684a      	ldr	r2, [r1, #4]
 8007e6a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007e6c:	6203      	str	r3, [r0, #32]
}
 8007e6e:	bc30      	pop	{r4, r5}
 8007e70:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e76:	68cd      	ldr	r5, [r1, #12]
 8007e78:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e80:	e7ed      	b.n	8007e5e <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e82:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e86:	694d      	ldr	r5, [r1, #20]
 8007e88:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e8c:	698d      	ldr	r5, [r1, #24]
 8007e8e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8007e92:	e7e7      	b.n	8007e64 <TIM_OC2_SetConfig+0x30>
 8007e94:	40010000 	.word	0x40010000

08007e98 <HAL_TIM_PWM_ConfigChannel>:
{
 8007e98:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007e9a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d066      	beq.n	8007f70 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8007ea2:	460d      	mov	r5, r1
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007eac:	2302      	movs	r3, #2
 8007eae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8007eb2:	2a0c      	cmp	r2, #12
 8007eb4:	d81a      	bhi.n	8007eec <HAL_TIM_PWM_ConfigChannel+0x54>
 8007eb6:	e8df f002 	tbb	[pc, r2]
 8007eba:	1907      	.short	0x1907
 8007ebc:	19201919 	.word	0x19201919
 8007ec0:	19341919 	.word	0x19341919
 8007ec4:	1919      	.short	0x1919
 8007ec6:	47          	.byte	0x47
 8007ec7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ec8:	6800      	ldr	r0, [r0, #0]
 8007eca:	f7ff fddd 	bl	8007a88 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ece:	6822      	ldr	r2, [r4, #0]
 8007ed0:	6993      	ldr	r3, [r2, #24]
 8007ed2:	f043 0308 	orr.w	r3, r3, #8
 8007ed6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ed8:	6822      	ldr	r2, [r4, #0]
 8007eda:	6993      	ldr	r3, [r2, #24]
 8007edc:	f023 0304 	bic.w	r3, r3, #4
 8007ee0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ee2:	6822      	ldr	r2, [r4, #0]
 8007ee4:	6993      	ldr	r3, [r2, #24]
 8007ee6:	6929      	ldr	r1, [r5, #16]
 8007ee8:	430b      	orrs	r3, r1
 8007eea:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8007eec:	2301      	movs	r3, #1
 8007eee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007ef8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007efa:	6800      	ldr	r0, [r0, #0]
 8007efc:	f7ff ff9a 	bl	8007e34 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f00:	6822      	ldr	r2, [r4, #0]
 8007f02:	6993      	ldr	r3, [r2, #24]
 8007f04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f08:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f0a:	6822      	ldr	r2, [r4, #0]
 8007f0c:	6993      	ldr	r3, [r2, #24]
 8007f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f12:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f14:	6822      	ldr	r2, [r4, #0]
 8007f16:	6993      	ldr	r3, [r2, #24]
 8007f18:	6929      	ldr	r1, [r5, #16]
 8007f1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007f1e:	6193      	str	r3, [r2, #24]
      break;
 8007f20:	e7e4      	b.n	8007eec <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f22:	6800      	ldr	r0, [r0, #0]
 8007f24:	f7ff fdde 	bl	8007ae4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f28:	6822      	ldr	r2, [r4, #0]
 8007f2a:	69d3      	ldr	r3, [r2, #28]
 8007f2c:	f043 0308 	orr.w	r3, r3, #8
 8007f30:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f32:	6822      	ldr	r2, [r4, #0]
 8007f34:	69d3      	ldr	r3, [r2, #28]
 8007f36:	f023 0304 	bic.w	r3, r3, #4
 8007f3a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f3c:	6822      	ldr	r2, [r4, #0]
 8007f3e:	69d3      	ldr	r3, [r2, #28]
 8007f40:	6929      	ldr	r1, [r5, #16]
 8007f42:	430b      	orrs	r3, r1
 8007f44:	61d3      	str	r3, [r2, #28]
      break;
 8007f46:	e7d1      	b.n	8007eec <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f48:	6800      	ldr	r0, [r0, #0]
 8007f4a:	f7ff fdfd 	bl	8007b48 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f4e:	6822      	ldr	r2, [r4, #0]
 8007f50:	69d3      	ldr	r3, [r2, #28]
 8007f52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f56:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f58:	6822      	ldr	r2, [r4, #0]
 8007f5a:	69d3      	ldr	r3, [r2, #28]
 8007f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f60:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f62:	6822      	ldr	r2, [r4, #0]
 8007f64:	69d3      	ldr	r3, [r2, #28]
 8007f66:	6929      	ldr	r1, [r5, #16]
 8007f68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007f6c:	61d3      	str	r3, [r2, #28]
      break;
 8007f6e:	e7bd      	b.n	8007eec <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8007f70:	2002      	movs	r0, #2
 8007f72:	e7c1      	b.n	8007ef8 <HAL_TIM_PWM_ConfigChannel+0x60>

08007f74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f74:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f76:	f001 011f 	and.w	r1, r1, #31
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f80:	6a03      	ldr	r3, [r0, #32]
 8007f82:	ea23 0304 	bic.w	r3, r3, r4
 8007f86:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f88:	6a03      	ldr	r3, [r0, #32]
 8007f8a:	408a      	lsls	r2, r1
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	6203      	str	r3, [r0, #32]
}
 8007f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f94:	4770      	bx	lr
	...

08007f98 <HAL_TIM_PWM_Start>:
{
 8007f98:	b510      	push	{r4, lr}
 8007f9a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	6800      	ldr	r0, [r0, #0]
 8007fa0:	f7ff ffe8 	bl	8007f74 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	4a0a      	ldr	r2, [pc, #40]	; (8007fd0 <HAL_TIM_PWM_Start+0x38>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d00b      	beq.n	8007fc4 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fac:	6822      	ldr	r2, [r4, #0]
 8007fae:	6893      	ldr	r3, [r2, #8]
 8007fb0:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fb4:	2b06      	cmp	r3, #6
 8007fb6:	d003      	beq.n	8007fc0 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8007fb8:	6813      	ldr	r3, [r2, #0]
 8007fba:	f043 0301 	orr.w	r3, r3, #1
 8007fbe:	6013      	str	r3, [r2, #0]
}
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8007fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fca:	645a      	str	r2, [r3, #68]	; 0x44
 8007fcc:	e7ee      	b.n	8007fac <HAL_TIM_PWM_Start+0x14>
 8007fce:	bf00      	nop
 8007fd0:	40010000 	.word	0x40010000

08007fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fd4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d033      	beq.n	8008044 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8007fdc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8007fde:	2301      	movs	r3, #1
 8007fe0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fea:	6803      	ldr	r3, [r0, #0]
 8007fec:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fee:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ff0:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ff4:	680a      	ldr	r2, [r1, #0]
 8007ff6:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ffa:	6803      	ldr	r3, [r0, #0]
 8007ffc:	4a12      	ldr	r2, [pc, #72]	; (8008048 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d012      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8008002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008006:	d00f      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8008008:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800800c:	4293      	cmp	r3, r2
 800800e:	d00b      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8008010:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008014:	4293      	cmp	r3, r2
 8008016:	d007      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8008018:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800801c:	4293      	cmp	r3, r2
 800801e:	d003      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8008020:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8008024:	4293      	cmp	r3, r2
 8008026:	d104      	bne.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008028:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800802c:	684a      	ldr	r2, [r1, #4]
 800802e:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008030:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008032:	2301      	movs	r3, #1
 8008034:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008038:	2300      	movs	r3, #0
 800803a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800803e:	4618      	mov	r0, r3
}
 8008040:	bc30      	pop	{r4, r5}
 8008042:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008044:	2002      	movs	r0, #2
}
 8008046:	4770      	bx	lr
 8008048:	40010000 	.word	0x40010000

0800804c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800804c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008050:	2b01      	cmp	r3, #1
 8008052:	d022      	beq.n	800809a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8008054:	2301      	movs	r3, #1
 8008056:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800805a:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800805c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008060:	688a      	ldr	r2, [r1, #8]
 8008062:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008068:	684a      	ldr	r2, [r1, #4]
 800806a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800806c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008070:	680a      	ldr	r2, [r1, #0]
 8008072:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008074:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008078:	690a      	ldr	r2, [r1, #16]
 800807a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800807c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008080:	694a      	ldr	r2, [r1, #20]
 8008082:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008088:	69ca      	ldr	r2, [r1, #28]
 800808a:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800808c:	6802      	ldr	r2, [r0, #0]
 800808e:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008090:	2300      	movs	r3, #0
 8008092:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8008096:	4618      	mov	r0, r3
 8008098:	4770      	bx	lr
  __HAL_LOCK(htim);
 800809a:	2002      	movs	r0, #2
}
 800809c:	4770      	bx	lr

0800809e <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800809e:	4770      	bx	lr

080080a0 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080a0:	4770      	bx	lr

080080a2 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80080a2:	6802      	ldr	r2, [r0, #0]
 80080a4:	68d3      	ldr	r3, [r2, #12]
 80080a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80080aa:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080ac:	2320      	movs	r3, #32
 80080ae:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 80080b2:	4770      	bx	lr

080080b4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080b4:	6802      	ldr	r2, [r0, #0]
 80080b6:	68d3      	ldr	r3, [r2, #12]
 80080b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080bc:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080be:	6802      	ldr	r2, [r0, #0]
 80080c0:	6953      	ldr	r3, [r2, #20]
 80080c2:	f023 0301 	bic.w	r3, r3, #1
 80080c6:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080c8:	2320      	movs	r3, #32
 80080ca:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80080ce:	4770      	bx	lr

080080d0 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080d0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b21      	cmp	r3, #33	; 0x21
 80080d8:	d12a      	bne.n	8008130 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80080da:	6883      	ldr	r3, [r0, #8]
 80080dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e0:	d016      	beq.n	8008110 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080e2:	6a03      	ldr	r3, [r0, #32]
 80080e4:	1c5a      	adds	r2, r3, #1
 80080e6:	6202      	str	r2, [r0, #32]
 80080e8:	781a      	ldrb	r2, [r3, #0]
 80080ea:	6803      	ldr	r3, [r0, #0]
 80080ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080ee:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80080f0:	3b01      	subs	r3, #1
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	84c3      	strh	r3, [r0, #38]	; 0x26
 80080f6:	b9eb      	cbnz	r3, 8008134 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080f8:	6802      	ldr	r2, [r0, #0]
 80080fa:	68d3      	ldr	r3, [r2, #12]
 80080fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008100:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008102:	6802      	ldr	r2, [r0, #0]
 8008104:	68d3      	ldr	r3, [r2, #12]
 8008106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800810a:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 800810c:	2000      	movs	r0, #0
 800810e:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008110:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	6802      	ldr	r2, [r0, #0]
 8008116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811a:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800811c:	6903      	ldr	r3, [r0, #16]
 800811e:	b91b      	cbnz	r3, 8008128 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8008120:	6a03      	ldr	r3, [r0, #32]
 8008122:	3302      	adds	r3, #2
 8008124:	6203      	str	r3, [r0, #32]
 8008126:	e7e2      	b.n	80080ee <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8008128:	6a03      	ldr	r3, [r0, #32]
 800812a:	3301      	adds	r3, #1
 800812c:	6203      	str	r3, [r0, #32]
 800812e:	e7de      	b.n	80080ee <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8008130:	2002      	movs	r0, #2
 8008132:	4770      	bx	lr
    return HAL_OK;
 8008134:	2000      	movs	r0, #0
  }
}
 8008136:	4770      	bx	lr

08008138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008138:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800813c:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800813e:	6802      	ldr	r2, [r0, #0]
 8008140:	6913      	ldr	r3, [r2, #16]
 8008142:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008146:	68c1      	ldr	r1, [r0, #12]
 8008148:	430b      	orrs	r3, r1
 800814a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800814c:	6883      	ldr	r3, [r0, #8]
 800814e:	6902      	ldr	r2, [r0, #16]
 8008150:	4313      	orrs	r3, r2
 8008152:	6942      	ldr	r2, [r0, #20]
 8008154:	4313      	orrs	r3, r2
 8008156:	69c2      	ldr	r2, [r0, #28]
 8008158:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800815a:	6801      	ldr	r1, [r0, #0]
 800815c:	68cb      	ldr	r3, [r1, #12]
 800815e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008162:	f023 030c 	bic.w	r3, r3, #12
 8008166:	4313      	orrs	r3, r2
 8008168:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800816a:	6802      	ldr	r2, [r0, #0]
 800816c:	6953      	ldr	r3, [r2, #20]
 800816e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008172:	6981      	ldr	r1, [r0, #24]
 8008174:	430b      	orrs	r3, r1
 8008176:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008178:	69c3      	ldr	r3, [r0, #28]
 800817a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800817e:	d03b      	beq.n	80081f8 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008180:	6803      	ldr	r3, [r0, #0]
 8008182:	4a71      	ldr	r2, [pc, #452]	; (8008348 <UART_SetConfig+0x210>)
 8008184:	4293      	cmp	r3, r2
 8008186:	f000 80ab 	beq.w	80082e0 <UART_SetConfig+0x1a8>
 800818a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800818e:	4293      	cmp	r3, r2
 8008190:	f000 80a6 	beq.w	80082e0 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008194:	f7fe fee0 	bl	8006f58 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008198:	f04f 0900 	mov.w	r9, #0
 800819c:	1806      	adds	r6, r0, r0
 800819e:	eb49 0709 	adc.w	r7, r9, r9
 80081a2:	eb16 0b00 	adds.w	fp, r6, r0
 80081a6:	eb47 0c09 	adc.w	ip, r7, r9
 80081aa:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80081ae:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80081b2:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 80081b6:	4693      	mov	fp, r2
 80081b8:	469c      	mov	ip, r3
 80081ba:	6863      	ldr	r3, [r4, #4]
 80081bc:	009a      	lsls	r2, r3, #2
 80081be:	0f9b      	lsrs	r3, r3, #30
 80081c0:	eb10 000b 	adds.w	r0, r0, fp
 80081c4:	eb49 010c 	adc.w	r1, r9, ip
 80081c8:	f7f8 fca0 	bl	8000b0c <__aeabi_uldivmod>
 80081cc:	4d5f      	ldr	r5, [pc, #380]	; (800834c <UART_SetConfig+0x214>)
 80081ce:	fba5 3200 	umull	r3, r2, r5, r0
 80081d2:	0951      	lsrs	r1, r2, #5
 80081d4:	2264      	movs	r2, #100	; 0x64
 80081d6:	fb02 0211 	mls	r2, r2, r1, r0
 80081da:	0113      	lsls	r3, r2, #4
 80081dc:	3332      	adds	r3, #50	; 0x32
 80081de:	fba5 2303 	umull	r2, r3, r5, r3
 80081e2:	095b      	lsrs	r3, r3, #5
 80081e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80081e8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	6821      	ldr	r1, [r4, #0]
 80081f2:	4413      	add	r3, r2
 80081f4:	608b      	str	r3, [r1, #8]
    }
  }
}
 80081f6:	e0a4      	b.n	8008342 <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081f8:	6803      	ldr	r3, [r0, #0]
 80081fa:	4a53      	ldr	r2, [pc, #332]	; (8008348 <UART_SetConfig+0x210>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d039      	beq.n	8008274 <UART_SetConfig+0x13c>
 8008200:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008204:	4293      	cmp	r3, r2
 8008206:	d035      	beq.n	8008274 <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008208:	f7fe fea6 	bl	8006f58 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800820c:	4683      	mov	fp, r0
 800820e:	f04f 0c00 	mov.w	ip, #0
 8008212:	1806      	adds	r6, r0, r0
 8008214:	eb4c 070c 	adc.w	r7, ip, ip
 8008218:	eb16 0800 	adds.w	r8, r6, r0
 800821c:	eb47 090c 	adc.w	r9, r7, ip
 8008220:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008224:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008228:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800822c:	4690      	mov	r8, r2
 800822e:	4699      	mov	r9, r3
 8008230:	6862      	ldr	r2, [r4, #4]
 8008232:	2100      	movs	r1, #0
 8008234:	1892      	adds	r2, r2, r2
 8008236:	eb41 0301 	adc.w	r3, r1, r1
 800823a:	eb1b 0008 	adds.w	r0, fp, r8
 800823e:	eb4c 0109 	adc.w	r1, ip, r9
 8008242:	f7f8 fc63 	bl	8000b0c <__aeabi_uldivmod>
 8008246:	4d41      	ldr	r5, [pc, #260]	; (800834c <UART_SetConfig+0x214>)
 8008248:	fba5 3200 	umull	r3, r2, r5, r0
 800824c:	0951      	lsrs	r1, r2, #5
 800824e:	2264      	movs	r2, #100	; 0x64
 8008250:	fb02 0211 	mls	r2, r2, r1, r0
 8008254:	00d3      	lsls	r3, r2, #3
 8008256:	3332      	adds	r3, #50	; 0x32
 8008258:	fba5 2303 	umull	r2, r3, r5, r3
 800825c:	095b      	lsrs	r3, r3, #5
 800825e:	005a      	lsls	r2, r3, #1
 8008260:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8008264:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	6821      	ldr	r1, [r4, #0]
 800826e:	4413      	add	r3, r2
 8008270:	608b      	str	r3, [r1, #8]
 8008272:	e066      	b.n	8008342 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008274:	f7fe fe80 	bl	8006f78 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008278:	4680      	mov	r8, r0
 800827a:	f04f 0900 	mov.w	r9, #0
 800827e:	1806      	adds	r6, r0, r0
 8008280:	eb49 0709 	adc.w	r7, r9, r9
 8008284:	eb16 0b00 	adds.w	fp, r6, r0
 8008288:	eb47 0c09 	adc.w	ip, r7, r9
 800828c:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8008290:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8008294:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8008298:	4693      	mov	fp, r2
 800829a:	469c      	mov	ip, r3
 800829c:	6862      	ldr	r2, [r4, #4]
 800829e:	2100      	movs	r1, #0
 80082a0:	1892      	adds	r2, r2, r2
 80082a2:	eb41 0301 	adc.w	r3, r1, r1
 80082a6:	eb18 000b 	adds.w	r0, r8, fp
 80082aa:	eb49 010c 	adc.w	r1, r9, ip
 80082ae:	f7f8 fc2d 	bl	8000b0c <__aeabi_uldivmod>
 80082b2:	4d26      	ldr	r5, [pc, #152]	; (800834c <UART_SetConfig+0x214>)
 80082b4:	fba5 3200 	umull	r3, r2, r5, r0
 80082b8:	0951      	lsrs	r1, r2, #5
 80082ba:	2264      	movs	r2, #100	; 0x64
 80082bc:	fb02 0211 	mls	r2, r2, r1, r0
 80082c0:	00d3      	lsls	r3, r2, #3
 80082c2:	3332      	adds	r3, #50	; 0x32
 80082c4:	fba5 2303 	umull	r2, r3, r5, r3
 80082c8:	095b      	lsrs	r3, r3, #5
 80082ca:	005a      	lsls	r2, r3, #1
 80082cc:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80082d0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80082d4:	f003 0307 	and.w	r3, r3, #7
 80082d8:	6821      	ldr	r1, [r4, #0]
 80082da:	4413      	add	r3, r2
 80082dc:	608b      	str	r3, [r1, #8]
 80082de:	e030      	b.n	8008342 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 80082e0:	f7fe fe4a 	bl	8006f78 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082e4:	f04f 0900 	mov.w	r9, #0
 80082e8:	1806      	adds	r6, r0, r0
 80082ea:	eb49 0709 	adc.w	r7, r9, r9
 80082ee:	eb16 0b00 	adds.w	fp, r6, r0
 80082f2:	eb47 0c09 	adc.w	ip, r7, r9
 80082f6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80082fa:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80082fe:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8008302:	4693      	mov	fp, r2
 8008304:	469c      	mov	ip, r3
 8008306:	6863      	ldr	r3, [r4, #4]
 8008308:	009a      	lsls	r2, r3, #2
 800830a:	0f9b      	lsrs	r3, r3, #30
 800830c:	eb10 000b 	adds.w	r0, r0, fp
 8008310:	eb49 010c 	adc.w	r1, r9, ip
 8008314:	f7f8 fbfa 	bl	8000b0c <__aeabi_uldivmod>
 8008318:	4d0c      	ldr	r5, [pc, #48]	; (800834c <UART_SetConfig+0x214>)
 800831a:	fba5 3200 	umull	r3, r2, r5, r0
 800831e:	0951      	lsrs	r1, r2, #5
 8008320:	2264      	movs	r2, #100	; 0x64
 8008322:	fb02 0211 	mls	r2, r2, r1, r0
 8008326:	0113      	lsls	r3, r2, #4
 8008328:	3332      	adds	r3, #50	; 0x32
 800832a:	fba5 2303 	umull	r2, r3, r5, r3
 800832e:	095b      	lsrs	r3, r3, #5
 8008330:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008334:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8008338:	f003 030f 	and.w	r3, r3, #15
 800833c:	6821      	ldr	r1, [r4, #0]
 800833e:	4413      	add	r3, r2
 8008340:	608b      	str	r3, [r1, #8]
}
 8008342:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8008346:	bf00      	nop
 8008348:	40011000 	.word	0x40011000
 800834c:	51eb851f 	.word	0x51eb851f

08008350 <UART_WaitOnFlagUntilTimeout>:
{
 8008350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008354:	4605      	mov	r5, r0
 8008356:	460f      	mov	r7, r1
 8008358:	4616      	mov	r6, r2
 800835a:	4698      	mov	r8, r3
 800835c:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800835e:	682b      	ldr	r3, [r5, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	ea37 0303 	bics.w	r3, r7, r3
 8008366:	bf0c      	ite	eq
 8008368:	2301      	moveq	r3, #1
 800836a:	2300      	movne	r3, #0
 800836c:	42b3      	cmp	r3, r6
 800836e:	d11d      	bne.n	80083ac <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8008370:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8008374:	d0f3      	beq.n	800835e <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008376:	b12c      	cbz	r4, 8008384 <UART_WaitOnFlagUntilTimeout+0x34>
 8008378:	f7fc ff7c 	bl	8005274 <HAL_GetTick>
 800837c:	eba0 0008 	sub.w	r0, r0, r8
 8008380:	42a0      	cmp	r0, r4
 8008382:	d9ec      	bls.n	800835e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008384:	682a      	ldr	r2, [r5, #0]
 8008386:	68d3      	ldr	r3, [r2, #12]
 8008388:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800838c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838e:	682a      	ldr	r2, [r5, #0]
 8008390:	6953      	ldr	r3, [r2, #20]
 8008392:	f023 0301 	bic.w	r3, r3, #1
 8008396:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8008398:	2320      	movs	r3, #32
 800839a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800839e:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80083a2:	2300      	movs	r3, #0
 80083a4:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80083a8:	2003      	movs	r0, #3
 80083aa:	e000      	b.n	80083ae <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 80083ac:	2000      	movs	r0, #0
}
 80083ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080083b2 <HAL_UART_Init>:
  if (huart == NULL)
 80083b2:	b358      	cbz	r0, 800840c <HAL_UART_Init+0x5a>
{
 80083b4:	b510      	push	{r4, lr}
 80083b6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80083b8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80083bc:	b30b      	cbz	r3, 8008402 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80083be:	2324      	movs	r3, #36	; 0x24
 80083c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80083c4:	6822      	ldr	r2, [r4, #0]
 80083c6:	68d3      	ldr	r3, [r2, #12]
 80083c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083cc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80083ce:	4620      	mov	r0, r4
 80083d0:	f7ff feb2 	bl	8008138 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083d4:	6822      	ldr	r2, [r4, #0]
 80083d6:	6913      	ldr	r3, [r2, #16]
 80083d8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80083dc:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083de:	6822      	ldr	r2, [r4, #0]
 80083e0:	6953      	ldr	r3, [r2, #20]
 80083e2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80083e6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80083e8:	6822      	ldr	r2, [r4, #0]
 80083ea:	68d3      	ldr	r3, [r2, #12]
 80083ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80083f0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f2:	2000      	movs	r0, #0
 80083f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80083f6:	2320      	movs	r3, #32
 80083f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80083fc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8008400:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008402:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8008406:	f7fc f991 	bl	800472c <HAL_UART_MspInit>
 800840a:	e7d8      	b.n	80083be <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800840c:	2001      	movs	r0, #1
}
 800840e:	4770      	bx	lr

08008410 <HAL_UART_Transmit>:
{
 8008410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008414:	b083      	sub	sp, #12
 8008416:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008418:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b20      	cmp	r3, #32
 8008420:	d156      	bne.n	80084d0 <HAL_UART_Transmit+0xc0>
 8008422:	4604      	mov	r4, r0
 8008424:	460d      	mov	r5, r1
 8008426:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8008428:	2900      	cmp	r1, #0
 800842a:	d056      	beq.n	80084da <HAL_UART_Transmit+0xca>
 800842c:	2a00      	cmp	r2, #0
 800842e:	d056      	beq.n	80084de <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 8008430:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8008434:	2b01      	cmp	r3, #1
 8008436:	d054      	beq.n	80084e2 <HAL_UART_Transmit+0xd2>
 8008438:	2301      	movs	r3, #1
 800843a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800843e:	f04f 0900 	mov.w	r9, #0
 8008442:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008446:	2321      	movs	r3, #33	; 0x21
 8008448:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800844c:	f7fc ff12 	bl	8005274 <HAL_GetTick>
 8008450:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8008452:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8008456:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800845a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800845e:	e010      	b.n	8008482 <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008460:	9600      	str	r6, [sp, #0]
 8008462:	463b      	mov	r3, r7
 8008464:	2200      	movs	r2, #0
 8008466:	2180      	movs	r1, #128	; 0x80
 8008468:	4620      	mov	r0, r4
 800846a:	f7ff ff71 	bl	8008350 <UART_WaitOnFlagUntilTimeout>
 800846e:	2800      	cmp	r0, #0
 8008470:	d139      	bne.n	80084e6 <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008472:	882b      	ldrh	r3, [r5, #0]
 8008474:	6822      	ldr	r2, [r4, #0]
 8008476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800847a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	b9c3      	cbnz	r3, 80084b2 <HAL_UART_Transmit+0xa2>
          pData += 2U;
 8008480:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8008482:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008484:	b29b      	uxth	r3, r3
 8008486:	b1b3      	cbz	r3, 80084b6 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8008488:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800848a:	3b01      	subs	r3, #1
 800848c:	b29b      	uxth	r3, r3
 800848e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008490:	68a3      	ldr	r3, [r4, #8]
 8008492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008496:	d0e3      	beq.n	8008460 <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008498:	9600      	str	r6, [sp, #0]
 800849a:	463b      	mov	r3, r7
 800849c:	2200      	movs	r2, #0
 800849e:	2180      	movs	r1, #128	; 0x80
 80084a0:	4620      	mov	r0, r4
 80084a2:	f7ff ff55 	bl	8008350 <UART_WaitOnFlagUntilTimeout>
 80084a6:	bb00      	cbnz	r0, 80084ea <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80084a8:	782a      	ldrb	r2, [r5, #0]
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	605a      	str	r2, [r3, #4]
 80084ae:	3501      	adds	r5, #1
 80084b0:	e7e7      	b.n	8008482 <HAL_UART_Transmit+0x72>
          pData += 1U;
 80084b2:	3501      	adds	r5, #1
 80084b4:	e7e5      	b.n	8008482 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084b6:	9600      	str	r6, [sp, #0]
 80084b8:	463b      	mov	r3, r7
 80084ba:	2200      	movs	r2, #0
 80084bc:	2140      	movs	r1, #64	; 0x40
 80084be:	4620      	mov	r0, r4
 80084c0:	f7ff ff46 	bl	8008350 <UART_WaitOnFlagUntilTimeout>
 80084c4:	4603      	mov	r3, r0
 80084c6:	b990      	cbnz	r0, 80084ee <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 80084c8:	2220      	movs	r2, #32
 80084ca:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    return HAL_OK;
 80084ce:	e000      	b.n	80084d2 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80084d0:	2302      	movs	r3, #2
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	b003      	add	sp, #12
 80084d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e7f9      	b.n	80084d2 <HAL_UART_Transmit+0xc2>
 80084de:	2301      	movs	r3, #1
 80084e0:	e7f7      	b.n	80084d2 <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 80084e2:	2302      	movs	r3, #2
 80084e4:	e7f5      	b.n	80084d2 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e7f3      	b.n	80084d2 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e7f1      	b.n	80084d2 <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e7ef      	b.n	80084d2 <HAL_UART_Transmit+0xc2>

080084f2 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80084f2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	2b20      	cmp	r3, #32
 80084fa:	d116      	bne.n	800852a <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 80084fc:	b1b9      	cbz	r1, 800852e <HAL_UART_Transmit_IT+0x3c>
 80084fe:	b1c2      	cbz	r2, 8008532 <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8008500:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8008504:	2b01      	cmp	r3, #1
 8008506:	d016      	beq.n	8008536 <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8008508:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800850a:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800850c:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800850e:	2300      	movs	r3, #0
 8008510:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008512:	2221      	movs	r2, #33	; 0x21
 8008514:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8008518:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800851c:	6801      	ldr	r1, [r0, #0]
 800851e:	68ca      	ldr	r2, [r1, #12]
 8008520:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008524:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8008526:	4618      	mov	r0, r3
 8008528:	4770      	bx	lr
    return HAL_BUSY;
 800852a:	2002      	movs	r0, #2
 800852c:	4770      	bx	lr
      return HAL_ERROR;
 800852e:	2001      	movs	r0, #1
 8008530:	4770      	bx	lr
 8008532:	2001      	movs	r0, #1
 8008534:	4770      	bx	lr
    __HAL_LOCK(huart);
 8008536:	2002      	movs	r0, #2
}
 8008538:	4770      	bx	lr
	...

0800853c <HAL_UART_Receive_DMA>:
{
 800853c:	b530      	push	{r4, r5, lr}
 800853e:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8008540:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8008544:	b2e4      	uxtb	r4, r4
 8008546:	2c20      	cmp	r4, #32
 8008548:	d13d      	bne.n	80085c6 <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 800854a:	2900      	cmp	r1, #0
 800854c:	d03e      	beq.n	80085cc <HAL_UART_Receive_DMA+0x90>
 800854e:	2a00      	cmp	r2, #0
 8008550:	d03e      	beq.n	80085d0 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 8008552:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8008556:	2b01      	cmp	r3, #1
 8008558:	d03c      	beq.n	80085d4 <HAL_UART_Receive_DMA+0x98>
 800855a:	4613      	mov	r3, r2
 800855c:	460a      	mov	r2, r1
 800855e:	4604      	mov	r4, r0
 8008560:	2101      	movs	r1, #1
 8008562:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8008566:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8008568:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856a:	2500      	movs	r5, #0
 800856c:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800856e:	2122      	movs	r1, #34	; 0x22
 8008570:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008574:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008576:	4818      	ldr	r0, [pc, #96]	; (80085d8 <HAL_UART_Receive_DMA+0x9c>)
 8008578:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800857a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800857c:	4817      	ldr	r0, [pc, #92]	; (80085dc <HAL_UART_Receive_DMA+0xa0>)
 800857e:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008582:	4817      	ldr	r0, [pc, #92]	; (80085e0 <HAL_UART_Receive_DMA+0xa4>)
 8008584:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8008586:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008588:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800858a:	6821      	ldr	r1, [r4, #0]
 800858c:	3104      	adds	r1, #4
 800858e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008590:	f7fd f962 	bl	8005858 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008594:	9501      	str	r5, [sp, #4]
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	9201      	str	r2, [sp, #4]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	9201      	str	r2, [sp, #4]
 80085a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 80085a2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085a6:	68da      	ldr	r2, [r3, #12]
 80085a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085ac:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ae:	6822      	ldr	r2, [r4, #0]
 80085b0:	6953      	ldr	r3, [r2, #20]
 80085b2:	f043 0301 	orr.w	r3, r3, #1
 80085b6:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085b8:	6822      	ldr	r2, [r4, #0]
 80085ba:	6953      	ldr	r3, [r2, #20]
 80085bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085c0:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80085c2:	4628      	mov	r0, r5
 80085c4:	e000      	b.n	80085c8 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 80085c6:	2002      	movs	r0, #2
}
 80085c8:	b003      	add	sp, #12
 80085ca:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 80085cc:	2001      	movs	r0, #1
 80085ce:	e7fb      	b.n	80085c8 <HAL_UART_Receive_DMA+0x8c>
 80085d0:	2001      	movs	r0, #1
 80085d2:	e7f9      	b.n	80085c8 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 80085d4:	2002      	movs	r0, #2
 80085d6:	e7f7      	b.n	80085c8 <HAL_UART_Receive_DMA+0x8c>
 80085d8:	0800864d 	.word	0x0800864d
 80085dc:	08008729 	.word	0x08008729
 80085e0:	08008735 	.word	0x08008735

080085e4 <HAL_UART_AbortTransmit>:
{
 80085e4:	b510      	push	{r4, lr}
 80085e6:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80085e8:	6802      	ldr	r2, [r0, #0]
 80085ea:	68d3      	ldr	r3, [r2, #12]
 80085ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085f0:	60d3      	str	r3, [r2, #12]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80085f2:	6803      	ldr	r3, [r0, #0]
 80085f4:	695a      	ldr	r2, [r3, #20]
 80085f6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80085fa:	d00b      	beq.n	8008614 <HAL_UART_AbortTransmit+0x30>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80085fc:	695a      	ldr	r2, [r3, #20]
 80085fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008602:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 8008604:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008606:	b12b      	cbz	r3, 8008614 <HAL_UART_AbortTransmit+0x30>
      huart->hdmatx->XferAbortCallback = NULL;
 8008608:	2200      	movs	r2, #0
 800860a:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800860c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800860e:	f7fd f958 	bl	80058c2 <HAL_DMA_Abort>
 8008612:	b928      	cbnz	r0, 8008620 <HAL_UART_AbortTransmit+0x3c>
  huart->TxXferCount = 0x00U;
 8008614:	2000      	movs	r0, #0
 8008616:	84e0      	strh	r0, [r4, #38]	; 0x26
  huart->gState = HAL_UART_STATE_READY;
 8008618:	2320      	movs	r3, #32
 800861a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 800861e:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008620:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008622:	f7fd fa99 	bl	8005b58 <HAL_DMA_GetError>
 8008626:	2820      	cmp	r0, #32
 8008628:	d1f4      	bne.n	8008614 <HAL_UART_AbortTransmit+0x30>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800862a:	2310      	movs	r3, #16
 800862c:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 800862e:	2003      	movs	r0, #3
 8008630:	e7f5      	b.n	800861e <HAL_UART_AbortTransmit+0x3a>

08008632 <UART_EndTransmit_IT>:
{
 8008632:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008634:	6801      	ldr	r1, [r0, #0]
 8008636:	68cb      	ldr	r3, [r1, #12]
 8008638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800863c:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800863e:	2320      	movs	r3, #32
 8008640:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8008644:	f7fb fb3e 	bl	8003cc4 <HAL_UART_TxCpltCallback>
}
 8008648:	2000      	movs	r0, #0
 800864a:	bd08      	pop	{r3, pc}

0800864c <UART_DMAReceiveCplt>:
{
 800864c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800864e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008650:	6802      	ldr	r2, [r0, #0]
 8008652:	6812      	ldr	r2, [r2, #0]
 8008654:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008658:	d113      	bne.n	8008682 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 800865a:	2200      	movs	r2, #0
 800865c:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800865e:	6819      	ldr	r1, [r3, #0]
 8008660:	68ca      	ldr	r2, [r1, #12]
 8008662:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008666:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008668:	6819      	ldr	r1, [r3, #0]
 800866a:	694a      	ldr	r2, [r1, #20]
 800866c:	f022 0201 	bic.w	r2, r2, #1
 8008670:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008672:	6819      	ldr	r1, [r3, #0]
 8008674:	694a      	ldr	r2, [r1, #20]
 8008676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800867a:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800867c:	2220      	movs	r2, #32
 800867e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8008682:	4618      	mov	r0, r3
 8008684:	f7fb fb1d 	bl	8003cc2 <HAL_UART_RxCpltCallback>
}
 8008688:	bd08      	pop	{r3, pc}

0800868a <UART_Receive_IT>:
{
 800868a:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800868c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b22      	cmp	r3, #34	; 0x22
 8008694:	d145      	bne.n	8008722 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008696:	6883      	ldr	r3, [r0, #8]
 8008698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800869c:	d00e      	beq.n	80086bc <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800869e:	6903      	ldr	r3, [r0, #16]
 80086a0:	bb03      	cbnz	r3, 80086e4 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086a2:	6803      	ldr	r3, [r0, #0]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80086a8:	1c59      	adds	r1, r3, #1
 80086aa:	6281      	str	r1, [r0, #40]	; 0x28
 80086ac:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 80086ae:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80086b0:	3b01      	subs	r3, #1
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80086b6:	b1f3      	cbz	r3, 80086f6 <UART_Receive_IT+0x6c>
    return HAL_OK;
 80086b8:	2000      	movs	r0, #0
 80086ba:	e033      	b.n	8008724 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80086bc:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 80086be:	6903      	ldr	r3, [r0, #16]
 80086c0:	b943      	cbnz	r3, 80086d4 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80086c2:	6803      	ldr	r3, [r0, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ca:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 80086cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80086ce:	3302      	adds	r3, #2
 80086d0:	6283      	str	r3, [r0, #40]	; 0x28
 80086d2:	e7ec      	b.n	80086ae <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80086d4:	6803      	ldr	r3, [r0, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 80086dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80086de:	3301      	adds	r3, #1
 80086e0:	6283      	str	r3, [r0, #40]	; 0x28
 80086e2:	e7e4      	b.n	80086ae <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086e4:	6803      	ldr	r3, [r0, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80086ea:	1c51      	adds	r1, r2, #1
 80086ec:	6281      	str	r1, [r0, #40]	; 0x28
 80086ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f2:	7013      	strb	r3, [r2, #0]
 80086f4:	e7db      	b.n	80086ae <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086f6:	6802      	ldr	r2, [r0, #0]
 80086f8:	68d3      	ldr	r3, [r2, #12]
 80086fa:	f023 0320 	bic.w	r3, r3, #32
 80086fe:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008700:	6802      	ldr	r2, [r0, #0]
 8008702:	68d3      	ldr	r3, [r2, #12]
 8008704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008708:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800870a:	6802      	ldr	r2, [r0, #0]
 800870c:	6953      	ldr	r3, [r2, #20]
 800870e:	f023 0301 	bic.w	r3, r3, #1
 8008712:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8008714:	2320      	movs	r3, #32
 8008716:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800871a:	f7fb fad2 	bl	8003cc2 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800871e:	2000      	movs	r0, #0
 8008720:	e000      	b.n	8008724 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8008722:	2002      	movs	r0, #2
}
 8008724:	bd08      	pop	{r3, pc}

08008726 <HAL_UART_RxHalfCpltCallback>:
}
 8008726:	4770      	bx	lr

08008728 <UART_DMARxHalfCplt>:
{
 8008728:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800872a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800872c:	f7ff fffb 	bl	8008726 <HAL_UART_RxHalfCpltCallback>
}
 8008730:	bd08      	pop	{r3, pc}

08008732 <HAL_UART_ErrorCallback>:
}
 8008732:	4770      	bx	lr

08008734 <UART_DMAError>:
{
 8008734:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008736:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800873c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b21      	cmp	r3, #33	; 0x21
 8008744:	d010      	beq.n	8008768 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	695a      	ldr	r2, [r3, #20]
 800874a:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800874e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b22      	cmp	r3, #34	; 0x22
 8008756:	d011      	beq.n	800877c <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008758:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800875a:	f043 0310 	orr.w	r3, r3, #16
 800875e:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8008760:	4620      	mov	r0, r4
 8008762:	f7ff ffe6 	bl	8008732 <HAL_UART_ErrorCallback>
}
 8008766:	bd10      	pop	{r4, pc}
 8008768:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800876c:	2a00      	cmp	r2, #0
 800876e:	d0ea      	beq.n	8008746 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8008770:	2300      	movs	r3, #0
 8008772:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008774:	4620      	mov	r0, r4
 8008776:	f7ff fc94 	bl	80080a2 <UART_EndTxTransfer>
 800877a:	e7e4      	b.n	8008746 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800877c:	2a00      	cmp	r2, #0
 800877e:	d0eb      	beq.n	8008758 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8008780:	2300      	movs	r3, #0
 8008782:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008784:	4620      	mov	r0, r4
 8008786:	f7ff fc95 	bl	80080b4 <UART_EndRxTransfer>
 800878a:	e7e5      	b.n	8008758 <UART_DMAError+0x24>

0800878c <HAL_UART_IRQHandler>:
{
 800878c:	b510      	push	{r4, lr}
 800878e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008790:	6802      	ldr	r2, [r0, #0]
 8008792:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008794:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008796:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8008798:	f013 000f 	ands.w	r0, r3, #15
 800879c:	d105      	bne.n	80087aa <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800879e:	f013 0f20 	tst.w	r3, #32
 80087a2:	d002      	beq.n	80087aa <HAL_UART_IRQHandler+0x1e>
 80087a4:	f011 0f20 	tst.w	r1, #32
 80087a8:	d156      	bne.n	8008858 <HAL_UART_IRQHandler+0xcc>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d06a      	beq.n	8008884 <HAL_UART_IRQHandler+0xf8>
 80087ae:	f012 0201 	ands.w	r2, r2, #1
 80087b2:	d102      	bne.n	80087ba <HAL_UART_IRQHandler+0x2e>
 80087b4:	f411 7f90 	tst.w	r1, #288	; 0x120
 80087b8:	d064      	beq.n	8008884 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087ba:	f013 0f01 	tst.w	r3, #1
 80087be:	d006      	beq.n	80087ce <HAL_UART_IRQHandler+0x42>
 80087c0:	f411 7f80 	tst.w	r1, #256	; 0x100
 80087c4:	d003      	beq.n	80087ce <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80087c8:	f040 0001 	orr.w	r0, r0, #1
 80087cc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087ce:	f013 0f04 	tst.w	r3, #4
 80087d2:	d004      	beq.n	80087de <HAL_UART_IRQHandler+0x52>
 80087d4:	b11a      	cbz	r2, 80087de <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80087d8:	f040 0002 	orr.w	r0, r0, #2
 80087dc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087de:	f013 0f02 	tst.w	r3, #2
 80087e2:	d004      	beq.n	80087ee <HAL_UART_IRQHandler+0x62>
 80087e4:	b11a      	cbz	r2, 80087ee <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80087e8:	f040 0004 	orr.w	r0, r0, #4
 80087ec:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80087ee:	f013 0f08 	tst.w	r3, #8
 80087f2:	d007      	beq.n	8008804 <HAL_UART_IRQHandler+0x78>
 80087f4:	f011 0f20 	tst.w	r1, #32
 80087f8:	d100      	bne.n	80087fc <HAL_UART_IRQHandler+0x70>
 80087fa:	b11a      	cbz	r2, 8008804 <HAL_UART_IRQHandler+0x78>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80087fe:	f042 0208 	orr.w	r2, r2, #8
 8008802:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008804:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008806:	2a00      	cmp	r2, #0
 8008808:	d048      	beq.n	800889c <HAL_UART_IRQHandler+0x110>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800880a:	f013 0f20 	tst.w	r3, #32
 800880e:	d002      	beq.n	8008816 <HAL_UART_IRQHandler+0x8a>
 8008810:	f011 0f20 	tst.w	r1, #32
 8008814:	d124      	bne.n	8008860 <HAL_UART_IRQHandler+0xd4>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800881e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008820:	f012 0f08 	tst.w	r2, #8
 8008824:	d100      	bne.n	8008828 <HAL_UART_IRQHandler+0x9c>
 8008826:	b33b      	cbz	r3, 8008878 <HAL_UART_IRQHandler+0xec>
        UART_EndRxTransfer(huart);
 8008828:	4620      	mov	r0, r4
 800882a:	f7ff fc43 	bl	80080b4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	695a      	ldr	r2, [r3, #20]
 8008832:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008836:	d01b      	beq.n	8008870 <HAL_UART_IRQHandler+0xe4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008838:	695a      	ldr	r2, [r3, #20]
 800883a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800883e:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8008840:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008842:	b18b      	cbz	r3, 8008868 <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008844:	4a1a      	ldr	r2, [pc, #104]	; (80088b0 <HAL_UART_IRQHandler+0x124>)
 8008846:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008848:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800884a:	f7fd f884 	bl	8005956 <HAL_DMA_Abort_IT>
 800884e:	b328      	cbz	r0, 800889c <HAL_UART_IRQHandler+0x110>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008850:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008852:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008854:	4798      	blx	r3
 8008856:	e021      	b.n	800889c <HAL_UART_IRQHandler+0x110>
      UART_Receive_IT(huart);
 8008858:	4620      	mov	r0, r4
 800885a:	f7ff ff16 	bl	800868a <UART_Receive_IT>
      return;
 800885e:	e01d      	b.n	800889c <HAL_UART_IRQHandler+0x110>
        UART_Receive_IT(huart);
 8008860:	4620      	mov	r0, r4
 8008862:	f7ff ff12 	bl	800868a <UART_Receive_IT>
 8008866:	e7d6      	b.n	8008816 <HAL_UART_IRQHandler+0x8a>
            HAL_UART_ErrorCallback(huart);
 8008868:	4620      	mov	r0, r4
 800886a:	f7ff ff62 	bl	8008732 <HAL_UART_ErrorCallback>
 800886e:	e015      	b.n	800889c <HAL_UART_IRQHandler+0x110>
          HAL_UART_ErrorCallback(huart);
 8008870:	4620      	mov	r0, r4
 8008872:	f7ff ff5e 	bl	8008732 <HAL_UART_ErrorCallback>
 8008876:	e011      	b.n	800889c <HAL_UART_IRQHandler+0x110>
        HAL_UART_ErrorCallback(huart);
 8008878:	4620      	mov	r0, r4
 800887a:	f7ff ff5a 	bl	8008732 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800887e:	2300      	movs	r3, #0
 8008880:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008882:	e00b      	b.n	800889c <HAL_UART_IRQHandler+0x110>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008884:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008888:	d002      	beq.n	8008890 <HAL_UART_IRQHandler+0x104>
 800888a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800888e:	d106      	bne.n	800889e <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008890:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008894:	d002      	beq.n	800889c <HAL_UART_IRQHandler+0x110>
 8008896:	f011 0f40 	tst.w	r1, #64	; 0x40
 800889a:	d104      	bne.n	80088a6 <HAL_UART_IRQHandler+0x11a>
}
 800889c:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 800889e:	4620      	mov	r0, r4
 80088a0:	f7ff fc16 	bl	80080d0 <UART_Transmit_IT>
    return;
 80088a4:	e7fa      	b.n	800889c <HAL_UART_IRQHandler+0x110>
    UART_EndTransmit_IT(huart);
 80088a6:	4620      	mov	r0, r4
 80088a8:	f7ff fec3 	bl	8008632 <UART_EndTransmit_IT>
    return;
 80088ac:	e7f6      	b.n	800889c <HAL_UART_IRQHandler+0x110>
 80088ae:	bf00      	nop
 80088b0:	080088b5 	.word	0x080088b5

080088b4 <UART_DMAAbortOnError>:
{
 80088b4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80088b8:	2300      	movs	r3, #0
 80088ba:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088bc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80088be:	f7ff ff38 	bl	8008732 <HAL_UART_ErrorCallback>
}
 80088c2:	bd08      	pop	{r3, pc}

080088c4 <HAL_UART_AbortReceiveCpltCallback>:
}
 80088c4:	4770      	bx	lr
	...

080088c8 <HAL_UART_AbortReceive_IT>:
{
 80088c8:	b510      	push	{r4, lr}
 80088ca:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088cc:	6802      	ldr	r2, [r0, #0]
 80088ce:	68d3      	ldr	r3, [r2, #12]
 80088d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088d4:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d6:	6802      	ldr	r2, [r0, #0]
 80088d8:	6953      	ldr	r3, [r2, #20]
 80088da:	f023 0301 	bic.w	r3, r3, #1
 80088de:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088e0:	6803      	ldr	r3, [r0, #0]
 80088e2:	695a      	ldr	r2, [r3, #20]
 80088e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80088e8:	d018      	beq.n	800891c <HAL_UART_AbortReceive_IT+0x54>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ea:	695a      	ldr	r2, [r3, #20]
 80088ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088f0:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 80088f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80088f4:	b153      	cbz	r3, 800890c <HAL_UART_AbortReceive_IT+0x44>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80088f6:	4a0d      	ldr	r2, [pc, #52]	; (800892c <HAL_UART_AbortReceive_IT+0x64>)
 80088f8:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088fa:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80088fc:	f7fd f82b 	bl	8005956 <HAL_DMA_Abort_IT>
 8008900:	b110      	cbz	r0, 8008908 <HAL_UART_AbortReceive_IT+0x40>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008902:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008904:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008906:	4798      	blx	r3
}
 8008908:	2000      	movs	r0, #0
 800890a:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0x00U;
 800890c:	2300      	movs	r3, #0
 800890e:	85c3      	strh	r3, [r0, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 8008910:	2320      	movs	r3, #32
 8008912:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_AbortReceiveCpltCallback(huart);
 8008916:	f7ff ffd5 	bl	80088c4 <HAL_UART_AbortReceiveCpltCallback>
 800891a:	e7f5      	b.n	8008908 <HAL_UART_AbortReceive_IT+0x40>
    huart->RxXferCount = 0x00U;
 800891c:	2300      	movs	r3, #0
 800891e:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 8008920:	2320      	movs	r3, #32
 8008922:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 8008926:	f7ff ffcd 	bl	80088c4 <HAL_UART_AbortReceiveCpltCallback>
 800892a:	e7ed      	b.n	8008908 <HAL_UART_AbortReceive_IT+0x40>
 800892c:	08008931 	.word	0x08008931

08008930 <UART_DMARxOnlyAbortCallback>:
{
 8008930:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008932:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8008934:	2300      	movs	r3, #0
 8008936:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8008938:	2320      	movs	r3, #32
 800893a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 800893e:	f7ff ffc1 	bl	80088c4 <HAL_UART_AbortReceiveCpltCallback>
}
 8008942:	bd08      	pop	{r3, pc}

08008944 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8008944:	2884      	cmp	r0, #132	; 0x84
 8008946:	d001      	beq.n	800894c <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8008948:	3003      	adds	r0, #3
 800894a:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800894c:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800894e:	4770      	bx	lr

08008950 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008950:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8008952:	f000 ff25 	bl	80097a0 <vTaskStartScheduler>
  
  return osOK;
}
 8008956:	2000      	movs	r0, #0
 8008958:	bd08      	pop	{r3, pc}

0800895a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800895a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800895e:	b087      	sub	sp, #28
 8008960:	4604      	mov	r4, r0
 8008962:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008964:	6945      	ldr	r5, [r0, #20]
 8008966:	b1a5      	cbz	r5, 8008992 <osThreadCreate+0x38>
 8008968:	6986      	ldr	r6, [r0, #24]
 800896a:	b196      	cbz	r6, 8008992 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800896c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8008970:	f8d0 9000 	ldr.w	r9, [r0]
 8008974:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8008978:	f7ff ffe4 	bl	8008944 <makeFreeRtosPriority>
 800897c:	6922      	ldr	r2, [r4, #16]
 800897e:	9602      	str	r6, [sp, #8]
 8008980:	9501      	str	r5, [sp, #4]
 8008982:	9000      	str	r0, [sp, #0]
 8008984:	463b      	mov	r3, r7
 8008986:	4649      	mov	r1, r9
 8008988:	4640      	mov	r0, r8
 800898a:	f000 fe9b 	bl	80096c4 <xTaskCreateStatic>
 800898e:	9005      	str	r0, [sp, #20]
 8008990:	e013      	b.n	80089ba <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008992:	6865      	ldr	r5, [r4, #4]
 8008994:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008996:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800899a:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800899e:	f7ff ffd1 	bl	8008944 <makeFreeRtosPriority>
 80089a2:	ab05      	add	r3, sp, #20
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	9000      	str	r0, [sp, #0]
 80089a8:	463b      	mov	r3, r7
 80089aa:	fa1f f288 	uxth.w	r2, r8
 80089ae:	4631      	mov	r1, r6
 80089b0:	4628      	mov	r0, r5
 80089b2:	f000 fec1 	bl	8009738 <xTaskCreate>
 80089b6:	2801      	cmp	r0, #1
 80089b8:	d103      	bne.n	80089c2 <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80089ba:	9805      	ldr	r0, [sp, #20]
}
 80089bc:	b007      	add	sp, #28
 80089be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 80089c2:	2000      	movs	r0, #0
 80089c4:	e7fa      	b.n	80089bc <osThreadCreate+0x62>

080089c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80089c6:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80089c8:	4603      	mov	r3, r0
 80089ca:	b900      	cbnz	r0, 80089ce <osDelay+0x8>
 80089cc:	2301      	movs	r3, #1
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 f89a 	bl	8009b08 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80089d4:	2000      	movs	r0, #0
 80089d6:	bd08      	pop	{r3, pc}

080089d8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80089d8:	b510      	push	{r4, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80089de:	6844      	ldr	r4, [r0, #4]
 80089e0:	b16c      	cbz	r4, 80089fe <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 80089e2:	2901      	cmp	r1, #1
 80089e4:	d009      	beq.n	80089fa <osTimerCreate+0x22>
 80089e6:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80089e8:	6801      	ldr	r1, [r0, #0]
    return xTimerCreateStatic((const char *)"",
 80089ea:	9401      	str	r4, [sp, #4]
 80089ec:	9100      	str	r1, [sp, #0]
 80089ee:	2101      	movs	r1, #1
 80089f0:	4809      	ldr	r0, [pc, #36]	; (8008a18 <osTimerCreate+0x40>)
 80089f2:	f001 fd7b 	bl	800a4ec <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 80089f6:	b002      	add	sp, #8
 80089f8:	bd10      	pop	{r4, pc}
    return xTimerCreateStatic((const char *)"",
 80089fa:	2201      	movs	r2, #1
 80089fc:	e7f4      	b.n	80089e8 <osTimerCreate+0x10>
    return xTimerCreate((const char *)"",
 80089fe:	2901      	cmp	r1, #1
 8008a00:	d007      	beq.n	8008a12 <osTimerCreate+0x3a>
 8008a02:	2200      	movs	r2, #0
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8008a04:	6801      	ldr	r1, [r0, #0]
    return xTimerCreate((const char *)"",
 8008a06:	9100      	str	r1, [sp, #0]
 8008a08:	2101      	movs	r1, #1
 8008a0a:	4803      	ldr	r0, [pc, #12]	; (8008a18 <osTimerCreate+0x40>)
 8008a0c:	f001 fd52 	bl	800a4b4 <xTimerCreate>
 8008a10:	e7f1      	b.n	80089f6 <osTimerCreate+0x1e>
 8008a12:	2201      	movs	r2, #1
 8008a14:	e7f6      	b.n	8008a04 <osTimerCreate+0x2c>
 8008a16:	bf00      	nop
 8008a18:	0800c258 	.word	0x0800c258

08008a1c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008a1c:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008a1e:	6841      	ldr	r1, [r0, #4]
 8008a20:	b119      	cbz	r1, 8008a2a <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008a22:	2001      	movs	r0, #1
 8008a24:	f000 fa8f 	bl	8008f46 <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008a28:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8008a2a:	2001      	movs	r0, #1
 8008a2c:	f000 fa80 	bl	8008f30 <xQueueCreateMutex>
 8008a30:	e7fa      	b.n	8008a28 <osMutexCreate+0xc>

08008a32 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a32:	f100 0308 	add.w	r3, r0, #8
 8008a36:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a3c:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a3e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a40:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a46:	4770      	bx	lr

08008a48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a4c:	4770      	bx	lr

08008a4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a4e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a50:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a56:	689a      	ldr	r2, [r3, #8]
 8008a58:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a5a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a5c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008a5e:	6803      	ldr	r3, [r0, #0]
 8008a60:	3301      	adds	r3, #1
 8008a62:	6003      	str	r3, [r0, #0]
}
 8008a64:	4770      	bx	lr

08008a66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a66:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a68:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a6a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008a6e:	d002      	beq.n	8008a76 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a70:	f100 0208 	add.w	r2, r0, #8
 8008a74:	e002      	b.n	8008a7c <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a76:	6902      	ldr	r2, [r0, #16]
 8008a78:	e004      	b.n	8008a84 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	6853      	ldr	r3, [r2, #4]
 8008a7e:	681c      	ldr	r4, [r3, #0]
 8008a80:	42ac      	cmp	r4, r5
 8008a82:	d9fa      	bls.n	8008a7a <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a84:	6853      	ldr	r3, [r2, #4]
 8008a86:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a88:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a8a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a8c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a8e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008a90:	6803      	ldr	r3, [r0, #0]
 8008a92:	3301      	adds	r3, #1
 8008a94:	6003      	str	r3, [r0, #0]
}
 8008a96:	bc30      	pop	{r4, r5}
 8008a98:	4770      	bx	lr

08008a9a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a9a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a9c:	6842      	ldr	r2, [r0, #4]
 8008a9e:	6881      	ldr	r1, [r0, #8]
 8008aa0:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008aa2:	6882      	ldr	r2, [r0, #8]
 8008aa4:	6841      	ldr	r1, [r0, #4]
 8008aa6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	4282      	cmp	r2, r0
 8008aac:	d006      	beq.n	8008abc <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008aae:	2200      	movs	r2, #0
 8008ab0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	3a01      	subs	r2, #1
 8008ab6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ab8:	6818      	ldr	r0, [r3, #0]
}
 8008aba:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008abc:	6882      	ldr	r2, [r0, #8]
 8008abe:	605a      	str	r2, [r3, #4]
 8008ac0:	e7f5      	b.n	8008aae <uxListRemove+0x14>

08008ac2 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008ac2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008ac4:	b123      	cbz	r3, 8008ad0 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008ac6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	f1c0 0007 	rsb	r0, r0, #7
 8008ace:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008ad0:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8008ad2:	4770      	bx	lr

08008ad4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ad4:	b510      	push	{r4, lr}
 8008ad6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ad8:	f001 ff1c 	bl	800a914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008adc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008ade:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d004      	beq.n	8008aee <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8008ae4:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8008ae6:	f001 ff37 	bl	800a958 <vPortExitCritical>

	return xReturn;
}
 8008aea:	4620      	mov	r0, r4
 8008aec:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008aee:	2401      	movs	r4, #1
 8008af0:	e7f9      	b.n	8008ae6 <prvIsQueueFull+0x12>

08008af2 <prvIsQueueEmpty>:
{
 8008af2:	b510      	push	{r4, lr}
 8008af4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008af6:	f001 ff0d 	bl	800a914 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008afa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008afc:	b123      	cbz	r3, 8008b08 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8008afe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008b00:	f001 ff2a 	bl	800a958 <vPortExitCritical>
}
 8008b04:	4620      	mov	r0, r4
 8008b06:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008b08:	2401      	movs	r4, #1
 8008b0a:	e7f9      	b.n	8008b00 <prvIsQueueEmpty+0xe>

08008b0c <prvCopyDataToQueue>:
{
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	4604      	mov	r4, r0
 8008b10:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b12:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b14:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008b16:	b95a      	cbnz	r2, 8008b30 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b18:	6803      	ldr	r3, [r0, #0]
 8008b1a:	b11b      	cbz	r3, 8008b24 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8008b1c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b1e:	3501      	adds	r5, #1
 8008b20:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8008b22:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b24:	6880      	ldr	r0, [r0, #8]
 8008b26:	f001 f9b1 	bl	8009e8c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60a3      	str	r3, [r4, #8]
 8008b2e:	e7f6      	b.n	8008b1e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008b30:	b96e      	cbnz	r6, 8008b4e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b32:	6840      	ldr	r0, [r0, #4]
 8008b34:	f002 fe5c 	bl	800b7f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008b3a:	6863      	ldr	r3, [r4, #4]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b40:	68a2      	ldr	r2, [r4, #8]
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d319      	bcc.n	8008b7a <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	e7e7      	b.n	8008b1e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b4e:	68c0      	ldr	r0, [r0, #12]
 8008b50:	f002 fe4e 	bl	800b7f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008b56:	4252      	negs	r2, r2
 8008b58:	68e3      	ldr	r3, [r4, #12]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b5e:	6821      	ldr	r1, [r4, #0]
 8008b60:	428b      	cmp	r3, r1
 8008b62:	d202      	bcs.n	8008b6a <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b64:	68a3      	ldr	r3, [r4, #8]
 8008b66:	441a      	add	r2, r3
 8008b68:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008b6a:	2e02      	cmp	r6, #2
 8008b6c:	d001      	beq.n	8008b72 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008b6e:	2000      	movs	r0, #0
 8008b70:	e7d5      	b.n	8008b1e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b72:	b125      	cbz	r5, 8008b7e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8008b74:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8008b76:	2000      	movs	r0, #0
 8008b78:	e7d1      	b.n	8008b1e <prvCopyDataToQueue+0x12>
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	e7cf      	b.n	8008b1e <prvCopyDataToQueue+0x12>
 8008b7e:	2000      	movs	r0, #0
 8008b80:	e7cd      	b.n	8008b1e <prvCopyDataToQueue+0x12>

08008b82 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b82:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008b84:	b172      	cbz	r2, 8008ba4 <prvCopyDataFromQueue+0x22>
{
 8008b86:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b88:	68c3      	ldr	r3, [r0, #12]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b8e:	6884      	ldr	r4, [r0, #8]
 8008b90:	42a3      	cmp	r3, r4
 8008b92:	d301      	bcc.n	8008b98 <prvCopyDataFromQueue+0x16>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b94:	6803      	ldr	r3, [r0, #0]
 8008b96:	60c3      	str	r3, [r0, #12]
 8008b98:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b9a:	68c1      	ldr	r1, [r0, #12]
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f002 fe27 	bl	800b7f0 <memcpy>
}
 8008ba2:	bd10      	pop	{r4, pc}
 8008ba4:	4770      	bx	lr

08008ba6 <prvUnlockQueue>:
{
 8008ba6:	b538      	push	{r3, r4, r5, lr}
 8008ba8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8008baa:	f001 feb3 	bl	800a914 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008bae:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8008bb2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bb4:	e003      	b.n	8008bbe <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8008bb6:	f001 f8f1 	bl	8009d9c <vTaskMissedYield>
			--cTxLock;
 8008bba:	3c01      	subs	r4, #1
 8008bbc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bbe:	2c00      	cmp	r4, #0
 8008bc0:	dd08      	ble.n	8008bd4 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008bc4:	b133      	cbz	r3, 8008bd4 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bc6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008bca:	f001 f855 	bl	8009c78 <xTaskRemoveFromEventList>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d0f3      	beq.n	8008bba <prvUnlockQueue+0x14>
 8008bd2:	e7f0      	b.n	8008bb6 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8008bd4:	23ff      	movs	r3, #255	; 0xff
 8008bd6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008bda:	f001 febd 	bl	800a958 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008bde:	f001 fe99 	bl	800a914 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008be2:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8008be6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008be8:	e003      	b.n	8008bf2 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8008bea:	f001 f8d7 	bl	8009d9c <vTaskMissedYield>
				--cRxLock;
 8008bee:	3c01      	subs	r4, #1
 8008bf0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bf2:	2c00      	cmp	r4, #0
 8008bf4:	dd08      	ble.n	8008c08 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bf6:	692b      	ldr	r3, [r5, #16]
 8008bf8:	b133      	cbz	r3, 8008c08 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bfa:	f105 0010 	add.w	r0, r5, #16
 8008bfe:	f001 f83b 	bl	8009c78 <xTaskRemoveFromEventList>
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d0f3      	beq.n	8008bee <prvUnlockQueue+0x48>
 8008c06:	e7f0      	b.n	8008bea <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8008c08:	23ff      	movs	r3, #255	; 0xff
 8008c0a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008c0e:	f001 fea3 	bl	800a958 <vPortExitCritical>
}
 8008c12:	bd38      	pop	{r3, r4, r5, pc}

08008c14 <xQueueGenericReset>:
{
 8008c14:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8008c16:	b940      	cbnz	r0, 8008c2a <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	e7fe      	b.n	8008c28 <xQueueGenericReset+0x14>
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8008c2e:	f001 fe71 	bl	800a914 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c32:	6821      	ldr	r1, [r4, #0]
 8008c34:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008c36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c38:	fb03 1002 	mla	r0, r3, r2, r1
 8008c3c:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008c3e:	2000      	movs	r0, #0
 8008c40:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c42:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c44:	3a01      	subs	r2, #1
 8008c46:	fb02 1303 	mla	r3, r2, r3, r1
 8008c4a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c4c:	23ff      	movs	r3, #255	; 0xff
 8008c4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008c56:	b9a5      	cbnz	r5, 8008c82 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c58:	6923      	ldr	r3, [r4, #16]
 8008c5a:	b91b      	cbnz	r3, 8008c64 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8008c5c:	f001 fe7c 	bl	800a958 <vPortExitCritical>
}
 8008c60:	2001      	movs	r0, #1
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c64:	f104 0010 	add.w	r0, r4, #16
 8008c68:	f001 f806 	bl	8009c78 <xTaskRemoveFromEventList>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d0f5      	beq.n	8008c5c <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8008c70:	4b08      	ldr	r3, [pc, #32]	; (8008c94 <xQueueGenericReset+0x80>)
 8008c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	e7ec      	b.n	8008c5c <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c82:	f104 0010 	add.w	r0, r4, #16
 8008c86:	f7ff fed4 	bl	8008a32 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008c8e:	f7ff fed0 	bl	8008a32 <vListInitialise>
 8008c92:	e7e3      	b.n	8008c5c <xQueueGenericReset+0x48>
 8008c94:	e000ed04 	.word	0xe000ed04

08008c98 <prvInitialiseNewQueue>:
{
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	461d      	mov	r5, r3
 8008c9c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	b149      	cbz	r1, 8008cb6 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ca2:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8008ca4:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ca6:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ca8:	2101      	movs	r1, #1
 8008caa:	4620      	mov	r0, r4
 8008cac:	f7ff ffb2 	bl	8008c14 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008cb0:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8008cb4:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008cb6:	6024      	str	r4, [r4, #0]
 8008cb8:	e7f4      	b.n	8008ca4 <prvInitialiseNewQueue+0xc>

08008cba <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008cba:	b940      	cbnz	r0, 8008cce <xQueueGenericCreateStatic+0x14>
 8008cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	e7fe      	b.n	8008ccc <xQueueGenericCreateStatic+0x12>
	{
 8008cce:	b510      	push	{r4, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8008cd4:	b153      	cbz	r3, 8008cec <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008cd6:	b192      	cbz	r2, 8008cfe <xQueueGenericCreateStatic+0x44>
 8008cd8:	b989      	cbnz	r1, 8008cfe <xQueueGenericCreateStatic+0x44>
 8008cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	e7fe      	b.n	8008cea <xQueueGenericCreateStatic+0x30>
 8008cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	e7fe      	b.n	8008cfc <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008cfe:	b94a      	cbnz	r2, 8008d14 <xQueueGenericCreateStatic+0x5a>
 8008d00:	b141      	cbz	r1, 8008d14 <xQueueGenericCreateStatic+0x5a>
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	e7fe      	b.n	8008d12 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008d14:	2050      	movs	r0, #80	; 0x50
 8008d16:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008d18:	9803      	ldr	r0, [sp, #12]
 8008d1a:	2850      	cmp	r0, #80	; 0x50
 8008d1c:	d008      	beq.n	8008d30 <xQueueGenericCreateStatic+0x76>
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	e7fe      	b.n	8008d2e <xQueueGenericCreateStatic+0x74>
 8008d30:	4620      	mov	r0, r4
 8008d32:	461c      	mov	r4, r3
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008d34:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008d36:	2301      	movs	r3, #1
 8008d38:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d3c:	9400      	str	r4, [sp, #0]
 8008d3e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008d42:	f7ff ffa9 	bl	8008c98 <prvInitialiseNewQueue>
	}
 8008d46:	4620      	mov	r0, r4
 8008d48:	b004      	add	sp, #16
 8008d4a:	bd10      	pop	{r4, pc}

08008d4c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d4c:	b940      	cbnz	r0, 8008d60 <xQueueGenericCreate+0x14>
 8008d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	e7fe      	b.n	8008d5e <xQueueGenericCreate+0x12>
	{
 8008d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d62:	b083      	sub	sp, #12
 8008d64:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8008d66:	b111      	cbz	r1, 8008d6e <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d68:	fb01 f000 	mul.w	r0, r1, r0
 8008d6c:	e000      	b.n	8008d70 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8008d6e:	2000      	movs	r0, #0
 8008d70:	4617      	mov	r7, r2
 8008d72:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008d74:	3050      	adds	r0, #80	; 0x50
 8008d76:	f001 ff83 	bl	800ac80 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	b150      	cbz	r0, 8008d94 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d84:	9000      	str	r0, [sp, #0]
 8008d86:	463b      	mov	r3, r7
 8008d88:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8008d8c:	4621      	mov	r1, r4
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f7ff ff82 	bl	8008c98 <prvInitialiseNewQueue>
	}
 8008d94:	4628      	mov	r0, r5
 8008d96:	b003      	add	sp, #12
 8008d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008d9c <xQueueGenericSend>:
{
 8008d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008da2:	b160      	cbz	r0, 8008dbe <xQueueGenericSend+0x22>
 8008da4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008da6:	b999      	cbnz	r1, 8008dd0 <xQueueGenericSend+0x34>
 8008da8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008daa:	b18a      	cbz	r2, 8008dd0 <xQueueGenericSend+0x34>
 8008dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	e7fe      	b.n	8008dbc <xQueueGenericSend+0x20>
 8008dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	e7fe      	b.n	8008dce <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d10b      	bne.n	8008dec <xQueueGenericSend+0x50>
 8008dd4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008dd6:	2a01      	cmp	r2, #1
 8008dd8:	d008      	beq.n	8008dec <xQueueGenericSend+0x50>
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	e7fe      	b.n	8008dea <xQueueGenericSend+0x4e>
 8008dec:	461e      	mov	r6, r3
 8008dee:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008df0:	f000 ffe0 	bl	8009db4 <xTaskGetSchedulerState>
 8008df4:	b950      	cbnz	r0, 8008e0c <xQueueGenericSend+0x70>
 8008df6:	9b01      	ldr	r3, [sp, #4]
 8008df8:	b153      	cbz	r3, 8008e10 <xQueueGenericSend+0x74>
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	e7fe      	b.n	8008e0a <xQueueGenericSend+0x6e>
 8008e0c:	2500      	movs	r5, #0
 8008e0e:	e03a      	b.n	8008e86 <xQueueGenericSend+0xea>
 8008e10:	2500      	movs	r5, #0
 8008e12:	e038      	b.n	8008e86 <xQueueGenericSend+0xea>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e14:	4632      	mov	r2, r6
 8008e16:	4639      	mov	r1, r7
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f7ff fe77 	bl	8008b0c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e20:	b94b      	cbnz	r3, 8008e36 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8008e22:	b1a8      	cbz	r0, 8008e50 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8008e24:	4b3b      	ldr	r3, [pc, #236]	; (8008f14 <xQueueGenericSend+0x178>)
 8008e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	e00c      	b.n	8008e50 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008e3a:	f000 ff1d 	bl	8009c78 <xTaskRemoveFromEventList>
 8008e3e:	b138      	cbz	r0, 8008e50 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8008e40:	4b34      	ldr	r3, [pc, #208]	; (8008f14 <xQueueGenericSend+0x178>)
 8008e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008e50:	f001 fd82 	bl	800a958 <vPortExitCritical>
				return pdPASS;
 8008e54:	2001      	movs	r0, #1
}
 8008e56:	b005      	add	sp, #20
 8008e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8008e5a:	f001 fd7d 	bl	800a958 <vPortExitCritical>
					return errQUEUE_FULL;
 8008e5e:	2000      	movs	r0, #0
 8008e60:	e7f9      	b.n	8008e56 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e62:	a802      	add	r0, sp, #8
 8008e64:	f000 ff4e 	bl	8009d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e68:	2501      	movs	r5, #1
 8008e6a:	e019      	b.n	8008ea0 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008e72:	e021      	b.n	8008eb8 <xQueueGenericSend+0x11c>
 8008e74:	2300      	movs	r3, #0
 8008e76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e7a:	e023      	b.n	8008ec4 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f7ff fe92 	bl	8008ba6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e82:	f000 fd75 	bl	8009970 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008e86:	f001 fd45 	bl	800a914 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008e8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d3c0      	bcc.n	8008e14 <xQueueGenericSend+0x78>
 8008e92:	2e02      	cmp	r6, #2
 8008e94:	d0be      	beq.n	8008e14 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e96:	9b01      	ldr	r3, [sp, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0de      	beq.n	8008e5a <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8008e9c:	2d00      	cmp	r5, #0
 8008e9e:	d0e0      	beq.n	8008e62 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8008ea0:	f001 fd5a 	bl	800a958 <vPortExitCritical>
		vTaskSuspendAll();
 8008ea4:	f000 fcca 	bl	800983c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ea8:	f001 fd34 	bl	800a914 <vPortEnterCritical>
 8008eac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008eb0:	b25b      	sxtb	r3, r3
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eb6:	d0d9      	beq.n	8008e6c <xQueueGenericSend+0xd0>
 8008eb8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008ebc:	b25b      	sxtb	r3, r3
 8008ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ec2:	d0d7      	beq.n	8008e74 <xQueueGenericSend+0xd8>
 8008ec4:	f001 fd48 	bl	800a958 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ec8:	a901      	add	r1, sp, #4
 8008eca:	a802      	add	r0, sp, #8
 8008ecc:	f000 ff26 	bl	8009d1c <xTaskCheckForTimeOut>
 8008ed0:	b9c8      	cbnz	r0, 8008f06 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f7ff fdfe 	bl	8008ad4 <prvIsQueueFull>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d0cf      	beq.n	8008e7c <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008edc:	9901      	ldr	r1, [sp, #4]
 8008ede:	f104 0010 	add.w	r0, r4, #16
 8008ee2:	f000 fe95 	bl	8009c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f7ff fe5d 	bl	8008ba6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008eec:	f000 fd40 	bl	8009970 <xTaskResumeAll>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d1c8      	bne.n	8008e86 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8008ef4:	4b07      	ldr	r3, [pc, #28]	; (8008f14 <xQueueGenericSend+0x178>)
 8008ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	e7bf      	b.n	8008e86 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8008f06:	4620      	mov	r0, r4
 8008f08:	f7ff fe4d 	bl	8008ba6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f0c:	f000 fd30 	bl	8009970 <xTaskResumeAll>
			return errQUEUE_FULL;
 8008f10:	2000      	movs	r0, #0
 8008f12:	e7a0      	b.n	8008e56 <xQueueGenericSend+0xba>
 8008f14:	e000ed04 	.word	0xe000ed04

08008f18 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8008f18:	b148      	cbz	r0, 8008f2e <prvInitialiseMutex+0x16>
	{
 8008f1a:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008f20:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008f22:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008f24:	460b      	mov	r3, r1
 8008f26:	460a      	mov	r2, r1
 8008f28:	f7ff ff38 	bl	8008d9c <xQueueGenericSend>
	}
 8008f2c:	bd08      	pop	{r3, pc}
 8008f2e:	4770      	bx	lr

08008f30 <xQueueCreateMutex>:
	{
 8008f30:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008f32:	4602      	mov	r2, r0
 8008f34:	2100      	movs	r1, #0
 8008f36:	2001      	movs	r0, #1
 8008f38:	f7ff ff08 	bl	8008d4c <xQueueGenericCreate>
 8008f3c:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008f3e:	f7ff ffeb 	bl	8008f18 <prvInitialiseMutex>
	}
 8008f42:	4620      	mov	r0, r4
 8008f44:	bd10      	pop	{r4, pc}

08008f46 <xQueueCreateMutexStatic>:
	{
 8008f46:	b510      	push	{r4, lr}
 8008f48:	b082      	sub	sp, #8
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008f4a:	9000      	str	r0, [sp, #0]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	2200      	movs	r2, #0
 8008f50:	4611      	mov	r1, r2
 8008f52:	2001      	movs	r0, #1
 8008f54:	f7ff feb1 	bl	8008cba <xQueueGenericCreateStatic>
 8008f58:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008f5a:	f7ff ffdd 	bl	8008f18 <prvInitialiseMutex>
	}
 8008f5e:	4620      	mov	r0, r4
 8008f60:	b002      	add	sp, #8
 8008f62:	bd10      	pop	{r4, pc}

08008f64 <xQueueGenericSendFromISR>:
{
 8008f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008f68:	b160      	cbz	r0, 8008f84 <xQueueGenericSendFromISR+0x20>
 8008f6a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f6c:	b999      	cbnz	r1, 8008f96 <xQueueGenericSendFromISR+0x32>
 8008f6e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8008f70:	b188      	cbz	r0, 8008f96 <xQueueGenericSendFromISR+0x32>
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	e7fe      	b.n	8008f82 <xQueueGenericSendFromISR+0x1e>
 8008f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	e7fe      	b.n	8008f94 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d10b      	bne.n	8008fb2 <xQueueGenericSendFromISR+0x4e>
 8008f9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008f9c:	2801      	cmp	r0, #1
 8008f9e:	d008      	beq.n	8008fb2 <xQueueGenericSendFromISR+0x4e>
 8008fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	e7fe      	b.n	8008fb0 <xQueueGenericSendFromISR+0x4c>
 8008fb2:	461f      	mov	r7, r3
 8008fb4:	4690      	mov	r8, r2
 8008fb6:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fb8:	f001 fdd6 	bl	800ab68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008fbc:	f3ef 8611 	mrs	r6, BASEPRI
 8008fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008fd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d303      	bcc.n	8008fe0 <xQueueGenericSendFromISR+0x7c>
 8008fd8:	2f02      	cmp	r7, #2
 8008fda:	d001      	beq.n	8008fe0 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8008fdc:	2000      	movs	r0, #0
 8008fde:	e00f      	b.n	8009000 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008fe0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8008fe4:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fe6:	463a      	mov	r2, r7
 8008fe8:	4649      	mov	r1, r9
 8008fea:	4620      	mov	r0, r4
 8008fec:	f7ff fd8e 	bl	8008b0c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008ff0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008ff4:	d008      	beq.n	8009008 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ff6:	1c6b      	adds	r3, r5, #1
 8008ff8:	b25b      	sxtb	r3, r3
 8008ffa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8008ffe:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009000:	f386 8811 	msr	BASEPRI, r6
}
 8009004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800900a:	b15b      	cbz	r3, 8009024 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800900c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009010:	f000 fe32 	bl	8009c78 <xTaskRemoveFromEventList>
 8009014:	b140      	cbz	r0, 8009028 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8009016:	f1b8 0f00 	cmp.w	r8, #0
 800901a:	d007      	beq.n	800902c <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800901c:	2001      	movs	r0, #1
 800901e:	f8c8 0000 	str.w	r0, [r8]
 8009022:	e7ed      	b.n	8009000 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8009024:	2001      	movs	r0, #1
 8009026:	e7eb      	b.n	8009000 <xQueueGenericSendFromISR+0x9c>
 8009028:	2001      	movs	r0, #1
 800902a:	e7e9      	b.n	8009000 <xQueueGenericSendFromISR+0x9c>
 800902c:	2001      	movs	r0, #1
 800902e:	e7e7      	b.n	8009000 <xQueueGenericSendFromISR+0x9c>

08009030 <xQueueReceive>:
{
 8009030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009032:	b085      	sub	sp, #20
 8009034:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009036:	b160      	cbz	r0, 8009052 <xQueueReceive+0x22>
 8009038:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800903a:	b999      	cbnz	r1, 8009064 <xQueueReceive+0x34>
 800903c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800903e:	b18b      	cbz	r3, 8009064 <xQueueReceive+0x34>
	__asm volatile
 8009040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	e7fe      	b.n	8009050 <xQueueReceive+0x20>
 8009052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	e7fe      	b.n	8009062 <xQueueReceive+0x32>
 8009064:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009066:	f000 fea5 	bl	8009db4 <xTaskGetSchedulerState>
 800906a:	b950      	cbnz	r0, 8009082 <xQueueReceive+0x52>
 800906c:	9b01      	ldr	r3, [sp, #4]
 800906e:	b153      	cbz	r3, 8009086 <xQueueReceive+0x56>
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	e7fe      	b.n	8009080 <xQueueReceive+0x50>
 8009082:	2600      	movs	r6, #0
 8009084:	e03e      	b.n	8009104 <xQueueReceive+0xd4>
 8009086:	2600      	movs	r6, #0
 8009088:	e03c      	b.n	8009104 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800908a:	4639      	mov	r1, r7
 800908c:	4620      	mov	r0, r4
 800908e:	f7ff fd78 	bl	8008b82 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009092:	3d01      	subs	r5, #1
 8009094:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009096:	6923      	ldr	r3, [r4, #16]
 8009098:	b923      	cbnz	r3, 80090a4 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 800909a:	f001 fc5d 	bl	800a958 <vPortExitCritical>
				return pdPASS;
 800909e:	2001      	movs	r0, #1
}
 80090a0:	b005      	add	sp, #20
 80090a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090a4:	f104 0010 	add.w	r0, r4, #16
 80090a8:	f000 fde6 	bl	8009c78 <xTaskRemoveFromEventList>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d0f4      	beq.n	800909a <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 80090b0:	4b34      	ldr	r3, [pc, #208]	; (8009184 <xQueueReceive+0x154>)
 80090b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b6:	601a      	str	r2, [r3, #0]
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	e7eb      	b.n	800909a <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 80090c2:	f001 fc49 	bl	800a958 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80090c6:	2000      	movs	r0, #0
 80090c8:	e7ea      	b.n	80090a0 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090ca:	a802      	add	r0, sp, #8
 80090cc:	f000 fe1a 	bl	8009d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090d0:	2601      	movs	r6, #1
 80090d2:	e021      	b.n	8009118 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 80090d4:	2300      	movs	r3, #0
 80090d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80090da:	e029      	b.n	8009130 <xQueueReceive+0x100>
 80090dc:	2300      	movs	r3, #0
 80090de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090e2:	e02b      	b.n	800913c <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 80090e4:	4620      	mov	r0, r4
 80090e6:	f7ff fd5e 	bl	8008ba6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090ea:	f000 fc41 	bl	8009970 <xTaskResumeAll>
 80090ee:	e009      	b.n	8009104 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 80090f0:	4620      	mov	r0, r4
 80090f2:	f7ff fd58 	bl	8008ba6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090f6:	f000 fc3b 	bl	8009970 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090fa:	4620      	mov	r0, r4
 80090fc:	f7ff fcf9 	bl	8008af2 <prvIsQueueEmpty>
 8009100:	2800      	cmp	r0, #0
 8009102:	d13d      	bne.n	8009180 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 8009104:	f001 fc06 	bl	800a914 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009108:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800910a:	2d00      	cmp	r5, #0
 800910c:	d1bd      	bne.n	800908a <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800910e:	9b01      	ldr	r3, [sp, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d0d6      	beq.n	80090c2 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8009114:	2e00      	cmp	r6, #0
 8009116:	d0d8      	beq.n	80090ca <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 8009118:	f001 fc1e 	bl	800a958 <vPortExitCritical>
		vTaskSuspendAll();
 800911c:	f000 fb8e 	bl	800983c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009120:	f001 fbf8 	bl	800a914 <vPortEnterCritical>
 8009124:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009128:	b25b      	sxtb	r3, r3
 800912a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800912e:	d0d1      	beq.n	80090d4 <xQueueReceive+0xa4>
 8009130:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009134:	b25b      	sxtb	r3, r3
 8009136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800913a:	d0cf      	beq.n	80090dc <xQueueReceive+0xac>
 800913c:	f001 fc0c 	bl	800a958 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009140:	a901      	add	r1, sp, #4
 8009142:	a802      	add	r0, sp, #8
 8009144:	f000 fdea 	bl	8009d1c <xTaskCheckForTimeOut>
 8009148:	2800      	cmp	r0, #0
 800914a:	d1d1      	bne.n	80090f0 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800914c:	4620      	mov	r0, r4
 800914e:	f7ff fcd0 	bl	8008af2 <prvIsQueueEmpty>
 8009152:	2800      	cmp	r0, #0
 8009154:	d0c6      	beq.n	80090e4 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009156:	9901      	ldr	r1, [sp, #4]
 8009158:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800915c:	f000 fd58 	bl	8009c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009160:	4620      	mov	r0, r4
 8009162:	f7ff fd20 	bl	8008ba6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009166:	f000 fc03 	bl	8009970 <xTaskResumeAll>
 800916a:	2800      	cmp	r0, #0
 800916c:	d1ca      	bne.n	8009104 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 800916e:	4b05      	ldr	r3, [pc, #20]	; (8009184 <xQueueReceive+0x154>)
 8009170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	e7c1      	b.n	8009104 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 8009180:	2000      	movs	r0, #0
 8009182:	e78d      	b.n	80090a0 <xQueueReceive+0x70>
 8009184:	e000ed04 	.word	0xe000ed04

08009188 <xQueueSemaphoreTake>:
{
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800918e:	b940      	cbnz	r0, 80091a2 <xQueueSemaphoreTake+0x1a>
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	e7fe      	b.n	80091a0 <xQueueSemaphoreTake+0x18>
 80091a2:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80091a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80091a6:	b143      	cbz	r3, 80091ba <xQueueSemaphoreTake+0x32>
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	e7fe      	b.n	80091b8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091ba:	f000 fdfb 	bl	8009db4 <xTaskGetSchedulerState>
 80091be:	b950      	cbnz	r0, 80091d6 <xQueueSemaphoreTake+0x4e>
 80091c0:	9b01      	ldr	r3, [sp, #4]
 80091c2:	b15b      	cbz	r3, 80091dc <xQueueSemaphoreTake+0x54>
 80091c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c8:	f383 8811 	msr	BASEPRI, r3
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	e7fe      	b.n	80091d4 <xQueueSemaphoreTake+0x4c>
 80091d6:	2500      	movs	r5, #0
 80091d8:	462e      	mov	r6, r5
 80091da:	e051      	b.n	8009280 <xQueueSemaphoreTake+0xf8>
 80091dc:	2500      	movs	r5, #0
 80091de:	462e      	mov	r6, r5
 80091e0:	e04e      	b.n	8009280 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80091e2:	3b01      	subs	r3, #1
 80091e4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	b913      	cbnz	r3, 80091f0 <xQueueSemaphoreTake+0x68>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80091ea:	f000 ff07 	bl	8009ffc <pvTaskIncrementMutexHeldCount>
 80091ee:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091f0:	6923      	ldr	r3, [r4, #16]
 80091f2:	b163      	cbz	r3, 800920e <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091f4:	f104 0010 	add.w	r0, r4, #16
 80091f8:	f000 fd3e 	bl	8009c78 <xTaskRemoveFromEventList>
 80091fc:	b138      	cbz	r0, 800920e <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 80091fe:	4b48      	ldr	r3, [pc, #288]	; (8009320 <xQueueSemaphoreTake+0x198>)
 8009200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009204:	601a      	str	r2, [r3, #0]
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800920e:	f001 fba3 	bl	800a958 <vPortExitCritical>
				return pdPASS;
 8009212:	2501      	movs	r5, #1
}
 8009214:	4628      	mov	r0, r5
 8009216:	b004      	add	sp, #16
 8009218:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 800921a:	b145      	cbz	r5, 800922e <xQueueSemaphoreTake+0xa6>
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	e7fe      	b.n	800922c <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 800922e:	f001 fb93 	bl	800a958 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009232:	e7ef      	b.n	8009214 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009234:	a802      	add	r0, sp, #8
 8009236:	f000 fd65 	bl	8009d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800923a:	2601      	movs	r6, #1
 800923c:	e02a      	b.n	8009294 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 800923e:	2300      	movs	r3, #0
 8009240:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009244:	e032      	b.n	80092ac <xQueueSemaphoreTake+0x124>
 8009246:	2300      	movs	r3, #0
 8009248:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800924c:	e034      	b.n	80092b8 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 800924e:	f001 fb61 	bl	800a914 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009252:	68a0      	ldr	r0, [r4, #8]
 8009254:	f000 fdbe 	bl	8009dd4 <xTaskPriorityInherit>
 8009258:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800925a:	f001 fb7d 	bl	800a958 <vPortExitCritical>
 800925e:	e03b      	b.n	80092d8 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 8009260:	4620      	mov	r0, r4
 8009262:	f7ff fca0 	bl	8008ba6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009266:	f000 fb83 	bl	8009970 <xTaskResumeAll>
 800926a:	e009      	b.n	8009280 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 800926c:	4620      	mov	r0, r4
 800926e:	f7ff fc9a 	bl	8008ba6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009272:	f000 fb7d 	bl	8009970 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009276:	4620      	mov	r0, r4
 8009278:	f7ff fc3b 	bl	8008af2 <prvIsQueueEmpty>
 800927c:	2800      	cmp	r0, #0
 800927e:	d140      	bne.n	8009302 <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 8009280:	f001 fb48 	bl	800a914 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009284:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1ab      	bne.n	80091e2 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800928a:	9b01      	ldr	r3, [sp, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0c4      	beq.n	800921a <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8009290:	2e00      	cmp	r6, #0
 8009292:	d0cf      	beq.n	8009234 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 8009294:	f001 fb60 	bl	800a958 <vPortExitCritical>
		vTaskSuspendAll();
 8009298:	f000 fad0 	bl	800983c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800929c:	f001 fb3a 	bl	800a914 <vPortEnterCritical>
 80092a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80092a4:	b25b      	sxtb	r3, r3
 80092a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092aa:	d0c8      	beq.n	800923e <xQueueSemaphoreTake+0xb6>
 80092ac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80092b0:	b25b      	sxtb	r3, r3
 80092b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092b6:	d0c6      	beq.n	8009246 <xQueueSemaphoreTake+0xbe>
 80092b8:	f001 fb4e 	bl	800a958 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092bc:	a901      	add	r1, sp, #4
 80092be:	a802      	add	r0, sp, #8
 80092c0:	f000 fd2c 	bl	8009d1c <xTaskCheckForTimeOut>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d1d1      	bne.n	800926c <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092c8:	4620      	mov	r0, r4
 80092ca:	f7ff fc12 	bl	8008af2 <prvIsQueueEmpty>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d0c6      	beq.n	8009260 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d0ba      	beq.n	800924e <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80092d8:	9901      	ldr	r1, [sp, #4]
 80092da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80092de:	f000 fc97 	bl	8009c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092e2:	4620      	mov	r0, r4
 80092e4:	f7ff fc5f 	bl	8008ba6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80092e8:	f000 fb42 	bl	8009970 <xTaskResumeAll>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d1c7      	bne.n	8009280 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 80092f0:	4b0b      	ldr	r3, [pc, #44]	; (8009320 <xQueueSemaphoreTake+0x198>)
 80092f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	e7be      	b.n	8009280 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 8009302:	2d00      	cmp	r5, #0
 8009304:	d086      	beq.n	8009214 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 8009306:	f001 fb05 	bl	800a914 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800930a:	4620      	mov	r0, r4
 800930c:	f7ff fbd9 	bl	8008ac2 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009310:	4601      	mov	r1, r0
 8009312:	68a0      	ldr	r0, [r4, #8]
 8009314:	f000 fe12 	bl	8009f3c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8009318:	f001 fb1e 	bl	800a958 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800931c:	2500      	movs	r5, #0
 800931e:	e779      	b.n	8009214 <xQueueSemaphoreTake+0x8c>
 8009320:	e000ed04 	.word	0xe000ed04

08009324 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009324:	2300      	movs	r3, #0
 8009326:	2b07      	cmp	r3, #7
 8009328:	d80c      	bhi.n	8009344 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800932a:	4a07      	ldr	r2, [pc, #28]	; (8009348 <vQueueAddToRegistry+0x24>)
 800932c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009330:	b10a      	cbz	r2, 8009336 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009332:	3301      	adds	r3, #1
 8009334:	e7f7      	b.n	8009326 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009336:	4a04      	ldr	r2, [pc, #16]	; (8009348 <vQueueAddToRegistry+0x24>)
 8009338:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800933c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009340:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009342:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	2000339c 	.word	0x2000339c

0800934c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	4604      	mov	r4, r0
 8009350:	460d      	mov	r5, r1
 8009352:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009354:	f001 fade 	bl	800a914 <vPortEnterCritical>
 8009358:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800935c:	b25b      	sxtb	r3, r3
 800935e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009362:	d00d      	beq.n	8009380 <vQueueWaitForMessageRestricted+0x34>
 8009364:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009368:	b25b      	sxtb	r3, r3
 800936a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800936e:	d00b      	beq.n	8009388 <vQueueWaitForMessageRestricted+0x3c>
 8009370:	f001 faf2 	bl	800a958 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009374:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009376:	b15b      	cbz	r3, 8009390 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009378:	4620      	mov	r0, r4
 800937a:	f7ff fc14 	bl	8008ba6 <prvUnlockQueue>
	}
 800937e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8009380:	2300      	movs	r3, #0
 8009382:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009386:	e7ed      	b.n	8009364 <vQueueWaitForMessageRestricted+0x18>
 8009388:	2300      	movs	r3, #0
 800938a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800938e:	e7ef      	b.n	8009370 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009390:	4632      	mov	r2, r6
 8009392:	4629      	mov	r1, r5
 8009394:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009398:	f000 fc52 	bl	8009c40 <vTaskPlaceOnEventListRestricted>
 800939c:	e7ec      	b.n	8009378 <vQueueWaitForMessageRestricted+0x2c>
	...

080093a0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093a0:	4b08      	ldr	r3, [pc, #32]	; (80093c4 <prvResetNextTaskUnblockTime+0x24>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	b13b      	cbz	r3, 80093b8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093a8:	4b06      	ldr	r3, [pc, #24]	; (80093c4 <prvResetNextTaskUnblockTime+0x24>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093b0:	685a      	ldr	r2, [r3, #4]
 80093b2:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <prvResetNextTaskUnblockTime+0x28>)
 80093b4:	601a      	str	r2, [r3, #0]
	}
}
 80093b6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 80093b8:	4b03      	ldr	r3, [pc, #12]	; (80093c8 <prvResetNextTaskUnblockTime+0x28>)
 80093ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093be:	601a      	str	r2, [r3, #0]
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	20000850 	.word	0x20000850
 80093c8:	20000928 	.word	0x20000928

080093cc <prvInitialiseNewTask>:
{
 80093cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d0:	4681      	mov	r9, r0
 80093d2:	460d      	mov	r5, r1
 80093d4:	4617      	mov	r7, r2
 80093d6:	469a      	mov	sl, r3
 80093d8:	9e08      	ldr	r6, [sp, #32]
 80093da:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80093de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093e0:	0092      	lsls	r2, r2, #2
 80093e2:	21a5      	movs	r1, #165	; 0xa5
 80093e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80093e6:	f002 fa0e 	bl	800b806 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80093ec:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80093f0:	3a01      	subs	r2, #1
 80093f2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80093f6:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80093fa:	6467      	str	r7, [r4, #68]	; 0x44
	if( pcName != NULL )
 80093fc:	b38d      	cbz	r5, 8009462 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093fe:	2300      	movs	r3, #0
 8009400:	2b0f      	cmp	r3, #15
 8009402:	d807      	bhi.n	8009414 <prvInitialiseNewTask+0x48>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009404:	5ce9      	ldrb	r1, [r5, r3]
 8009406:	18e2      	adds	r2, r4, r3
 8009408:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800940c:	5cea      	ldrb	r2, [r5, r3]
 800940e:	b10a      	cbz	r2, 8009414 <prvInitialiseNewTask+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009410:	3301      	adds	r3, #1
 8009412:	e7f5      	b.n	8009400 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009414:	2300      	movs	r3, #0
 8009416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800941a:	2e06      	cmp	r6, #6
 800941c:	d900      	bls.n	8009420 <prvInitialiseNewTask+0x54>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800941e:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8009420:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009422:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8009424:	2500      	movs	r5, #0
 8009426:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009428:	1d20      	adds	r0, r4, #4
 800942a:	f7ff fb0d 	bl	8008a48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800942e:	f104 0018 	add.w	r0, r4, #24
 8009432:	f7ff fb09 	bl	8008a48 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009436:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009438:	f1c6 0607 	rsb	r6, r6, #7
 800943c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800943e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009440:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
 8009442:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009444:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009448:	4652      	mov	r2, sl
 800944a:	4649      	mov	r1, r9
 800944c:	4638      	mov	r0, r7
 800944e:	f001 fa37 	bl	800a8c0 <pxPortInitialiseStack>
 8009452:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009454:	f1b8 0f00 	cmp.w	r8, #0
 8009458:	d001      	beq.n	800945e <prvInitialiseNewTask+0x92>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800945a:	f8c8 4000 	str.w	r4, [r8]
}
 800945e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009462:	2300      	movs	r3, #0
 8009464:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8009468:	e7d7      	b.n	800941a <prvInitialiseNewTask+0x4e>
	...

0800946c <prvInitialiseTaskLists>:
{
 800946c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800946e:	2400      	movs	r4, #0
 8009470:	e007      	b.n	8009482 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009472:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009476:	0093      	lsls	r3, r2, #2
 8009478:	480e      	ldr	r0, [pc, #56]	; (80094b4 <prvInitialiseTaskLists+0x48>)
 800947a:	4418      	add	r0, r3
 800947c:	f7ff fad9 	bl	8008a32 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009480:	3401      	adds	r4, #1
 8009482:	2c06      	cmp	r4, #6
 8009484:	d9f5      	bls.n	8009472 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8009486:	4d0c      	ldr	r5, [pc, #48]	; (80094b8 <prvInitialiseTaskLists+0x4c>)
 8009488:	4628      	mov	r0, r5
 800948a:	f7ff fad2 	bl	8008a32 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800948e:	4c0b      	ldr	r4, [pc, #44]	; (80094bc <prvInitialiseTaskLists+0x50>)
 8009490:	4620      	mov	r0, r4
 8009492:	f7ff face 	bl	8008a32 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009496:	480a      	ldr	r0, [pc, #40]	; (80094c0 <prvInitialiseTaskLists+0x54>)
 8009498:	f7ff facb 	bl	8008a32 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800949c:	4809      	ldr	r0, [pc, #36]	; (80094c4 <prvInitialiseTaskLists+0x58>)
 800949e:	f7ff fac8 	bl	8008a32 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80094a2:	4809      	ldr	r0, [pc, #36]	; (80094c8 <prvInitialiseTaskLists+0x5c>)
 80094a4:	f7ff fac5 	bl	8008a32 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80094a8:	4b08      	ldr	r3, [pc, #32]	; (80094cc <prvInitialiseTaskLists+0x60>)
 80094aa:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094ac:	4b08      	ldr	r3, [pc, #32]	; (80094d0 <prvInitialiseTaskLists+0x64>)
 80094ae:	601c      	str	r4, [r3, #0]
}
 80094b0:	bd38      	pop	{r3, r4, r5, pc}
 80094b2:	bf00      	nop
 80094b4:	20000858 	.word	0x20000858
 80094b8:	20000900 	.word	0x20000900
 80094bc:	20000914 	.word	0x20000914
 80094c0:	20000930 	.word	0x20000930
 80094c4:	2000095c 	.word	0x2000095c
 80094c8:	20000948 	.word	0x20000948
 80094cc:	20000850 	.word	0x20000850
 80094d0:	20000854 	.word	0x20000854

080094d4 <prvAddNewTaskToReadyList>:
{
 80094d4:	b510      	push	{r4, lr}
 80094d6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80094d8:	f001 fa1c 	bl	800a914 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80094dc:	4a21      	ldr	r2, [pc, #132]	; (8009564 <prvAddNewTaskToReadyList+0x90>)
 80094de:	6813      	ldr	r3, [r2, #0]
 80094e0:	3301      	adds	r3, #1
 80094e2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80094e4:	4b20      	ldr	r3, [pc, #128]	; (8009568 <prvAddNewTaskToReadyList+0x94>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	b15b      	cbz	r3, 8009502 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80094ea:	4b20      	ldr	r3, [pc, #128]	; (800956c <prvAddNewTaskToReadyList+0x98>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	b96b      	cbnz	r3, 800950c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094f0:	4b1d      	ldr	r3, [pc, #116]	; (8009568 <prvAddNewTaskToReadyList+0x94>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d807      	bhi.n	800950c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80094fc:	4b1a      	ldr	r3, [pc, #104]	; (8009568 <prvAddNewTaskToReadyList+0x94>)
 80094fe:	601c      	str	r4, [r3, #0]
 8009500:	e004      	b.n	800950c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8009502:	4b19      	ldr	r3, [pc, #100]	; (8009568 <prvAddNewTaskToReadyList+0x94>)
 8009504:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009506:	6813      	ldr	r3, [r2, #0]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d027      	beq.n	800955c <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 800950c:	4a18      	ldr	r2, [pc, #96]	; (8009570 <prvAddNewTaskToReadyList+0x9c>)
 800950e:	6813      	ldr	r3, [r2, #0]
 8009510:	3301      	adds	r3, #1
 8009512:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009514:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 8009516:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009518:	2201      	movs	r2, #1
 800951a:	409a      	lsls	r2, r3
 800951c:	4915      	ldr	r1, [pc, #84]	; (8009574 <prvAddNewTaskToReadyList+0xa0>)
 800951e:	6808      	ldr	r0, [r1, #0]
 8009520:	4302      	orrs	r2, r0
 8009522:	600a      	str	r2, [r1, #0]
 8009524:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009528:	009a      	lsls	r2, r3, #2
 800952a:	1d21      	adds	r1, r4, #4
 800952c:	4812      	ldr	r0, [pc, #72]	; (8009578 <prvAddNewTaskToReadyList+0xa4>)
 800952e:	4410      	add	r0, r2
 8009530:	f7ff fa8d 	bl	8008a4e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009534:	f001 fa10 	bl	800a958 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009538:	4b0c      	ldr	r3, [pc, #48]	; (800956c <prvAddNewTaskToReadyList+0x98>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	b16b      	cbz	r3, 800955a <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800953e:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <prvAddNewTaskToReadyList+0x94>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009544:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009546:	429a      	cmp	r2, r3
 8009548:	d207      	bcs.n	800955a <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 800954a:	4b0c      	ldr	r3, [pc, #48]	; (800957c <prvAddNewTaskToReadyList+0xa8>)
 800954c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	f3bf 8f6f 	isb	sy
}
 800955a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800955c:	f7ff ff86 	bl	800946c <prvInitialiseTaskLists>
 8009560:	e7d4      	b.n	800950c <prvAddNewTaskToReadyList+0x38>
 8009562:	bf00      	nop
 8009564:	200008e8 	.word	0x200008e8
 8009568:	2000084c 	.word	0x2000084c
 800956c:	20000944 	.word	0x20000944
 8009570:	200008f8 	.word	0x200008f8
 8009574:	200008fc 	.word	0x200008fc
 8009578:	20000858 	.word	0x20000858
 800957c:	e000ed04 	.word	0xe000ed04

08009580 <prvDeleteTCB>:
	{
 8009580:	b510      	push	{r4, lr}
 8009582:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009584:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8009588:	b933      	cbnz	r3, 8009598 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 800958a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800958c:	f001 fbfc 	bl	800ad88 <vPortFree>
				vPortFree( pxTCB );
 8009590:	4620      	mov	r0, r4
 8009592:	f001 fbf9 	bl	800ad88 <vPortFree>
	}
 8009596:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009598:	2b01      	cmp	r3, #1
 800959a:	d00a      	beq.n	80095b2 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800959c:	2b02      	cmp	r3, #2
 800959e:	d0fa      	beq.n	8009596 <prvDeleteTCB+0x16>
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	e7fe      	b.n	80095b0 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 80095b2:	f001 fbe9 	bl	800ad88 <vPortFree>
 80095b6:	e7ee      	b.n	8009596 <prvDeleteTCB+0x16>

080095b8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095b8:	4b0f      	ldr	r3, [pc, #60]	; (80095f8 <prvCheckTasksWaitingTermination+0x40>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	b1d3      	cbz	r3, 80095f4 <prvCheckTasksWaitingTermination+0x3c>
{
 80095be:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80095c0:	f001 f9a8 	bl	800a914 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095c4:	4b0d      	ldr	r3, [pc, #52]	; (80095fc <prvCheckTasksWaitingTermination+0x44>)
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095ca:	1d20      	adds	r0, r4, #4
 80095cc:	f7ff fa65 	bl	8008a9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095d0:	4a0b      	ldr	r2, [pc, #44]	; (8009600 <prvCheckTasksWaitingTermination+0x48>)
 80095d2:	6813      	ldr	r3, [r2, #0]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095d8:	4a07      	ldr	r2, [pc, #28]	; (80095f8 <prvCheckTasksWaitingTermination+0x40>)
 80095da:	6813      	ldr	r3, [r2, #0]
 80095dc:	3b01      	subs	r3, #1
 80095de:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80095e0:	f001 f9ba 	bl	800a958 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80095e4:	4620      	mov	r0, r4
 80095e6:	f7ff ffcb 	bl	8009580 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095ea:	4b03      	ldr	r3, [pc, #12]	; (80095f8 <prvCheckTasksWaitingTermination+0x40>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e6      	bne.n	80095c0 <prvCheckTasksWaitingTermination+0x8>
}
 80095f2:	bd10      	pop	{r4, pc}
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	200008ec 	.word	0x200008ec
 80095fc:	2000095c 	.word	0x2000095c
 8009600:	200008e8 	.word	0x200008e8

08009604 <prvIdleTask>:
{
 8009604:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8009606:	f7ff ffd7 	bl	80095b8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800960a:	4b06      	ldr	r3, [pc, #24]	; (8009624 <prvIdleTask+0x20>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b01      	cmp	r3, #1
 8009610:	d9f9      	bls.n	8009606 <prvIdleTask+0x2>
				taskYIELD();
 8009612:	4b05      	ldr	r3, [pc, #20]	; (8009628 <prvIdleTask+0x24>)
 8009614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	e7f0      	b.n	8009606 <prvIdleTask+0x2>
 8009624:	20000858 	.word	0x20000858
 8009628:	e000ed04 	.word	0xe000ed04

0800962c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	4604      	mov	r4, r0
 8009630:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009632:	4b1d      	ldr	r3, [pc, #116]	; (80096a8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8009634:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009636:	4b1d      	ldr	r3, [pc, #116]	; (80096ac <prvAddCurrentTaskToDelayedList+0x80>)
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	3004      	adds	r0, #4
 800963c:	f7ff fa2d 	bl	8008a9a <uxListRemove>
 8009640:	b950      	cbnz	r0, 8009658 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009642:	4b1a      	ldr	r3, [pc, #104]	; (80096ac <prvAddCurrentTaskToDelayedList+0x80>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009648:	2301      	movs	r3, #1
 800964a:	fa03 f202 	lsl.w	r2, r3, r2
 800964e:	4918      	ldr	r1, [pc, #96]	; (80096b0 <prvAddCurrentTaskToDelayedList+0x84>)
 8009650:	680b      	ldr	r3, [r1, #0]
 8009652:	ea23 0302 	bic.w	r3, r3, r2
 8009656:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009658:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800965c:	d013      	beq.n	8009686 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800965e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009660:	4b12      	ldr	r3, [pc, #72]	; (80096ac <prvAddCurrentTaskToDelayedList+0x80>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8009666:	42a5      	cmp	r5, r4
 8009668:	d816      	bhi.n	8009698 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800966a:	4b12      	ldr	r3, [pc, #72]	; (80096b4 <prvAddCurrentTaskToDelayedList+0x88>)
 800966c:	6818      	ldr	r0, [r3, #0]
 800966e:	4b0f      	ldr	r3, [pc, #60]	; (80096ac <prvAddCurrentTaskToDelayedList+0x80>)
 8009670:	6819      	ldr	r1, [r3, #0]
 8009672:	3104      	adds	r1, #4
 8009674:	f7ff f9f7 	bl	8008a66 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8009678:	4b0f      	ldr	r3, [pc, #60]	; (80096b8 <prvAddCurrentTaskToDelayedList+0x8c>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	42a3      	cmp	r3, r4
 800967e:	d912      	bls.n	80096a6 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8009680:	4b0d      	ldr	r3, [pc, #52]	; (80096b8 <prvAddCurrentTaskToDelayedList+0x8c>)
 8009682:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009684:	e00f      	b.n	80096a6 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009686:	2e00      	cmp	r6, #0
 8009688:	d0e9      	beq.n	800965e <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800968a:	4b08      	ldr	r3, [pc, #32]	; (80096ac <prvAddCurrentTaskToDelayedList+0x80>)
 800968c:	6819      	ldr	r1, [r3, #0]
 800968e:	3104      	adds	r1, #4
 8009690:	480a      	ldr	r0, [pc, #40]	; (80096bc <prvAddCurrentTaskToDelayedList+0x90>)
 8009692:	f7ff f9dc 	bl	8008a4e <vListInsertEnd>
 8009696:	e006      	b.n	80096a6 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009698:	4b09      	ldr	r3, [pc, #36]	; (80096c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800969a:	6818      	ldr	r0, [r3, #0]
 800969c:	4b03      	ldr	r3, [pc, #12]	; (80096ac <prvAddCurrentTaskToDelayedList+0x80>)
 800969e:	6819      	ldr	r1, [r3, #0]
 80096a0:	3104      	adds	r1, #4
 80096a2:	f7ff f9e0 	bl	8008a66 <vListInsert>
}
 80096a6:	bd70      	pop	{r4, r5, r6, pc}
 80096a8:	20000970 	.word	0x20000970
 80096ac:	2000084c 	.word	0x2000084c
 80096b0:	200008fc 	.word	0x200008fc
 80096b4:	20000850 	.word	0x20000850
 80096b8:	20000928 	.word	0x20000928
 80096bc:	20000948 	.word	0x20000948
 80096c0:	20000854 	.word	0x20000854

080096c4 <xTaskCreateStatic>:
	{
 80096c4:	b570      	push	{r4, r5, r6, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80096ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80096cc:	b945      	cbnz	r5, 80096e0 <xTaskCreateStatic+0x1c>
 80096ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	e7fe      	b.n	80096de <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80096e0:	b944      	cbnz	r4, 80096f4 <xTaskCreateStatic+0x30>
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	e7fe      	b.n	80096f2 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80096f4:	2664      	movs	r6, #100	; 0x64
 80096f6:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80096f8:	9e04      	ldr	r6, [sp, #16]
 80096fa:	2e64      	cmp	r6, #100	; 0x64
 80096fc:	d008      	beq.n	8009710 <xTaskCreateStatic+0x4c>
 80096fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	e7fe      	b.n	800970e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009710:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009712:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009714:	2502      	movs	r5, #2
 8009716:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800971a:	2500      	movs	r5, #0
 800971c:	9503      	str	r5, [sp, #12]
 800971e:	9402      	str	r4, [sp, #8]
 8009720:	ad05      	add	r5, sp, #20
 8009722:	9501      	str	r5, [sp, #4]
 8009724:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009726:	9500      	str	r5, [sp, #0]
 8009728:	f7ff fe50 	bl	80093cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800972c:	4620      	mov	r0, r4
 800972e:	f7ff fed1 	bl	80094d4 <prvAddNewTaskToReadyList>
	}
 8009732:	9805      	ldr	r0, [sp, #20]
 8009734:	b006      	add	sp, #24
 8009736:	bd70      	pop	{r4, r5, r6, pc}

08009738 <xTaskCreate>:
	{
 8009738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800973c:	b085      	sub	sp, #20
 800973e:	4607      	mov	r7, r0
 8009740:	4688      	mov	r8, r1
 8009742:	4615      	mov	r5, r2
 8009744:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009746:	0090      	lsls	r0, r2, #2
 8009748:	f001 fa9a 	bl	800ac80 <pvPortMalloc>
			if( pxStack != NULL )
 800974c:	b308      	cbz	r0, 8009792 <xTaskCreate+0x5a>
 800974e:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009750:	2064      	movs	r0, #100	; 0x64
 8009752:	f001 fa95 	bl	800ac80 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009756:	4604      	mov	r4, r0
 8009758:	b1b8      	cbz	r0, 800978a <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 800975a:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800975c:	b1e4      	cbz	r4, 8009798 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800975e:	2300      	movs	r3, #0
 8009760:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009764:	9303      	str	r3, [sp, #12]
 8009766:	9402      	str	r4, [sp, #8]
 8009768:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800976a:	9301      	str	r3, [sp, #4]
 800976c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	464b      	mov	r3, r9
 8009772:	462a      	mov	r2, r5
 8009774:	4641      	mov	r1, r8
 8009776:	4638      	mov	r0, r7
 8009778:	f7ff fe28 	bl	80093cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800977c:	4620      	mov	r0, r4
 800977e:	f7ff fea9 	bl	80094d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009782:	2001      	movs	r0, #1
	}
 8009784:	b005      	add	sp, #20
 8009786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800978a:	4630      	mov	r0, r6
 800978c:	f001 fafc 	bl	800ad88 <vPortFree>
 8009790:	e7e4      	b.n	800975c <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009796:	e7f5      	b.n	8009784 <xTaskCreate+0x4c>
 8009798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800979c:	e7f2      	b.n	8009784 <xTaskCreate+0x4c>
	...

080097a0 <vTaskStartScheduler>:
{
 80097a0:	b510      	push	{r4, lr}
 80097a2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80097a4:	2400      	movs	r4, #0
 80097a6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80097a8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80097aa:	aa07      	add	r2, sp, #28
 80097ac:	a906      	add	r1, sp, #24
 80097ae:	a805      	add	r0, sp, #20
 80097b0:	f7fa f990 	bl	8003ad4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80097b4:	9b05      	ldr	r3, [sp, #20]
 80097b6:	9302      	str	r3, [sp, #8]
 80097b8:	9b06      	ldr	r3, [sp, #24]
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	9400      	str	r4, [sp, #0]
 80097be:	4623      	mov	r3, r4
 80097c0:	9a07      	ldr	r2, [sp, #28]
 80097c2:	4918      	ldr	r1, [pc, #96]	; (8009824 <vTaskStartScheduler+0x84>)
 80097c4:	4818      	ldr	r0, [pc, #96]	; (8009828 <vTaskStartScheduler+0x88>)
 80097c6:	f7ff ff7d 	bl	80096c4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80097ca:	b140      	cbz	r0, 80097de <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 80097cc:	f000 fe40 	bl	800a450 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80097d0:	2801      	cmp	r0, #1
 80097d2:	d006      	beq.n	80097e2 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80097d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80097d8:	d01a      	beq.n	8009810 <vTaskStartScheduler+0x70>
}
 80097da:	b008      	add	sp, #32
 80097dc:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80097de:	2000      	movs	r0, #0
 80097e0:	e7f6      	b.n	80097d0 <vTaskStartScheduler+0x30>
 80097e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e6:	f383 8811 	msr	BASEPRI, r3
 80097ea:	f3bf 8f6f 	isb	sy
 80097ee:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80097f2:	4b0e      	ldr	r3, [pc, #56]	; (800982c <vTaskStartScheduler+0x8c>)
 80097f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097fa:	4b0d      	ldr	r3, [pc, #52]	; (8009830 <vTaskStartScheduler+0x90>)
 80097fc:	2201      	movs	r2, #1
 80097fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009800:	2300      	movs	r3, #0
 8009802:	4a0c      	ldr	r2, [pc, #48]	; (8009834 <vTaskStartScheduler+0x94>)
 8009804:	6013      	str	r3, [r2, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009806:	4a0c      	ldr	r2, [pc, #48]	; (8009838 <vTaskStartScheduler+0x98>)
 8009808:	6013      	str	r3, [r2, #0]
		if( xPortStartScheduler() != pdFALSE )
 800980a:	f001 f925 	bl	800aa58 <xPortStartScheduler>
 800980e:	e7e4      	b.n	80097da <vTaskStartScheduler+0x3a>
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	e7fe      	b.n	8009820 <vTaskStartScheduler+0x80>
 8009822:	bf00      	nop
 8009824:	0800c9f4 	.word	0x0800c9f4
 8009828:	08009605 	.word	0x08009605
 800982c:	20000928 	.word	0x20000928
 8009830:	20000944 	.word	0x20000944
 8009834:	20000970 	.word	0x20000970
 8009838:	20003308 	.word	0x20003308

0800983c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800983c:	4a02      	ldr	r2, [pc, #8]	; (8009848 <vTaskSuspendAll+0xc>)
 800983e:	6813      	ldr	r3, [r2, #0]
 8009840:	3301      	adds	r3, #1
 8009842:	6013      	str	r3, [r2, #0]
}
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	200008f4 	.word	0x200008f4

0800984c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800984c:	4b01      	ldr	r3, [pc, #4]	; (8009854 <xTaskGetTickCount+0x8>)
 800984e:	6818      	ldr	r0, [r3, #0]
}
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	20000970 	.word	0x20000970

08009858 <xTaskIncrementTick>:
{
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800985a:	4b3a      	ldr	r3, [pc, #232]	; (8009944 <xTaskIncrementTick+0xec>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d164      	bne.n	800992c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009862:	4b39      	ldr	r3, [pc, #228]	; (8009948 <xTaskIncrementTick+0xf0>)
 8009864:	681d      	ldr	r5, [r3, #0]
 8009866:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009868:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800986a:	b9c5      	cbnz	r5, 800989e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800986c:	4b37      	ldr	r3, [pc, #220]	; (800994c <xTaskIncrementTick+0xf4>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	b143      	cbz	r3, 8009886 <xTaskIncrementTick+0x2e>
 8009874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	e7fe      	b.n	8009884 <xTaskIncrementTick+0x2c>
 8009886:	4a31      	ldr	r2, [pc, #196]	; (800994c <xTaskIncrementTick+0xf4>)
 8009888:	6811      	ldr	r1, [r2, #0]
 800988a:	4b31      	ldr	r3, [pc, #196]	; (8009950 <xTaskIncrementTick+0xf8>)
 800988c:	6818      	ldr	r0, [r3, #0]
 800988e:	6010      	str	r0, [r2, #0]
 8009890:	6019      	str	r1, [r3, #0]
 8009892:	4a30      	ldr	r2, [pc, #192]	; (8009954 <xTaskIncrementTick+0xfc>)
 8009894:	6813      	ldr	r3, [r2, #0]
 8009896:	3301      	adds	r3, #1
 8009898:	6013      	str	r3, [r2, #0]
 800989a:	f7ff fd81 	bl	80093a0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800989e:	4b2e      	ldr	r3, [pc, #184]	; (8009958 <xTaskIncrementTick+0x100>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	42ab      	cmp	r3, r5
 80098a4:	d938      	bls.n	8009918 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 80098a6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098a8:	4b2c      	ldr	r3, [pc, #176]	; (800995c <xTaskIncrementTick+0x104>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80098b2:	009a      	lsls	r2, r3, #2
 80098b4:	4b2a      	ldr	r3, [pc, #168]	; (8009960 <xTaskIncrementTick+0x108>)
 80098b6:	589b      	ldr	r3, [r3, r2]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d93c      	bls.n	8009936 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 80098bc:	2401      	movs	r4, #1
 80098be:	e03a      	b.n	8009936 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 80098c0:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098c2:	4b22      	ldr	r3, [pc, #136]	; (800994c <xTaskIncrementTick+0xf4>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	b343      	cbz	r3, 800991c <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ca:	4b20      	ldr	r3, [pc, #128]	; (800994c <xTaskIncrementTick+0xf4>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098d2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80098d4:	429d      	cmp	r5, r3
 80098d6:	d326      	bcc.n	8009926 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098d8:	1d37      	adds	r7, r6, #4
 80098da:	4638      	mov	r0, r7
 80098dc:	f7ff f8dd 	bl	8008a9a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098e0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80098e2:	b11b      	cbz	r3, 80098ec <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098e4:	f106 0018 	add.w	r0, r6, #24
 80098e8:	f7ff f8d7 	bl	8008a9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098ec:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80098ee:	2201      	movs	r2, #1
 80098f0:	409a      	lsls	r2, r3
 80098f2:	491c      	ldr	r1, [pc, #112]	; (8009964 <xTaskIncrementTick+0x10c>)
 80098f4:	6808      	ldr	r0, [r1, #0]
 80098f6:	4302      	orrs	r2, r0
 80098f8:	600a      	str	r2, [r1, #0]
 80098fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80098fe:	009a      	lsls	r2, r3, #2
 8009900:	4639      	mov	r1, r7
 8009902:	4817      	ldr	r0, [pc, #92]	; (8009960 <xTaskIncrementTick+0x108>)
 8009904:	4410      	add	r0, r2
 8009906:	f7ff f8a2 	bl	8008a4e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800990a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800990c:	4b13      	ldr	r3, [pc, #76]	; (800995c <xTaskIncrementTick+0x104>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009912:	429a      	cmp	r2, r3
 8009914:	d2d4      	bcs.n	80098c0 <xTaskIncrementTick+0x68>
 8009916:	e7d4      	b.n	80098c2 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8009918:	2400      	movs	r4, #0
 800991a:	e7d2      	b.n	80098c2 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800991c:	4b0e      	ldr	r3, [pc, #56]	; (8009958 <xTaskIncrementTick+0x100>)
 800991e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009922:	601a      	str	r2, [r3, #0]
					break;
 8009924:	e7c0      	b.n	80098a8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8009926:	4a0c      	ldr	r2, [pc, #48]	; (8009958 <xTaskIncrementTick+0x100>)
 8009928:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800992a:	e7bd      	b.n	80098a8 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800992c:	4a0e      	ldr	r2, [pc, #56]	; (8009968 <xTaskIncrementTick+0x110>)
 800992e:	6813      	ldr	r3, [r2, #0]
 8009930:	3301      	adds	r3, #1
 8009932:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009934:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8009936:	4b0d      	ldr	r3, [pc, #52]	; (800996c <xTaskIncrementTick+0x114>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	b103      	cbz	r3, 800993e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800993c:	2401      	movs	r4, #1
}
 800993e:	4620      	mov	r0, r4
 8009940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009942:	bf00      	nop
 8009944:	200008f4 	.word	0x200008f4
 8009948:	20000970 	.word	0x20000970
 800994c:	20000850 	.word	0x20000850
 8009950:	20000854 	.word	0x20000854
 8009954:	2000092c 	.word	0x2000092c
 8009958:	20000928 	.word	0x20000928
 800995c:	2000084c 	.word	0x2000084c
 8009960:	20000858 	.word	0x20000858
 8009964:	200008fc 	.word	0x200008fc
 8009968:	200008f0 	.word	0x200008f0
 800996c:	20000974 	.word	0x20000974

08009970 <xTaskResumeAll>:
{
 8009970:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8009972:	4b33      	ldr	r3, [pc, #204]	; (8009a40 <xTaskResumeAll+0xd0>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	b943      	cbnz	r3, 800998a <xTaskResumeAll+0x1a>
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	e7fe      	b.n	8009988 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800998a:	f000 ffc3 	bl	800a914 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800998e:	4b2c      	ldr	r3, [pc, #176]	; (8009a40 <xTaskResumeAll+0xd0>)
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	3a01      	subs	r2, #1
 8009994:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d14d      	bne.n	8009a38 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800999c:	4b29      	ldr	r3, [pc, #164]	; (8009a44 <xTaskResumeAll+0xd4>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	b923      	cbnz	r3, 80099ac <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 80099a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80099a4:	f000 ffd8 	bl	800a958 <vPortExitCritical>
}
 80099a8:	4620      	mov	r0, r4
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 80099ac:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099ae:	4b26      	ldr	r3, [pc, #152]	; (8009a48 <xTaskResumeAll+0xd8>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	b31b      	cbz	r3, 80099fc <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099b4:	4b24      	ldr	r3, [pc, #144]	; (8009a48 <xTaskResumeAll+0xd8>)
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099ba:	f104 0018 	add.w	r0, r4, #24
 80099be:	f7ff f86c 	bl	8008a9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099c2:	1d25      	adds	r5, r4, #4
 80099c4:	4628      	mov	r0, r5
 80099c6:	f7ff f868 	bl	8008a9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80099cc:	2201      	movs	r2, #1
 80099ce:	409a      	lsls	r2, r3
 80099d0:	491e      	ldr	r1, [pc, #120]	; (8009a4c <xTaskResumeAll+0xdc>)
 80099d2:	6808      	ldr	r0, [r1, #0]
 80099d4:	4302      	orrs	r2, r0
 80099d6:	600a      	str	r2, [r1, #0]
 80099d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80099dc:	009a      	lsls	r2, r3, #2
 80099de:	4629      	mov	r1, r5
 80099e0:	481b      	ldr	r0, [pc, #108]	; (8009a50 <xTaskResumeAll+0xe0>)
 80099e2:	4410      	add	r0, r2
 80099e4:	f7ff f833 	bl	8008a4e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80099ea:	4b1a      	ldr	r3, [pc, #104]	; (8009a54 <xTaskResumeAll+0xe4>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d3dc      	bcc.n	80099ae <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 80099f4:	4b18      	ldr	r3, [pc, #96]	; (8009a58 <xTaskResumeAll+0xe8>)
 80099f6:	2201      	movs	r2, #1
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	e7d8      	b.n	80099ae <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 80099fc:	b10c      	cbz	r4, 8009a02 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80099fe:	f7ff fccf 	bl	80093a0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009a02:	4b16      	ldr	r3, [pc, #88]	; (8009a5c <xTaskResumeAll+0xec>)
 8009a04:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009a06:	b154      	cbz	r4, 8009a1e <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8009a08:	f7ff ff26 	bl	8009858 <xTaskIncrementTick>
 8009a0c:	b110      	cbz	r0, 8009a14 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8009a0e:	4b12      	ldr	r3, [pc, #72]	; (8009a58 <xTaskResumeAll+0xe8>)
 8009a10:	2201      	movs	r2, #1
 8009a12:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009a14:	3c01      	subs	r4, #1
 8009a16:	d1f7      	bne.n	8009a08 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8009a18:	4b10      	ldr	r3, [pc, #64]	; (8009a5c <xTaskResumeAll+0xec>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8009a1e:	4b0e      	ldr	r3, [pc, #56]	; (8009a58 <xTaskResumeAll+0xe8>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	b15b      	cbz	r3, 8009a3c <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8009a24:	4b0e      	ldr	r3, [pc, #56]	; (8009a60 <xTaskResumeAll+0xf0>)
 8009a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009a34:	2401      	movs	r4, #1
 8009a36:	e7b5      	b.n	80099a4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8009a38:	2400      	movs	r4, #0
 8009a3a:	e7b3      	b.n	80099a4 <xTaskResumeAll+0x34>
 8009a3c:	2400      	movs	r4, #0
 8009a3e:	e7b1      	b.n	80099a4 <xTaskResumeAll+0x34>
 8009a40:	200008f4 	.word	0x200008f4
 8009a44:	200008e8 	.word	0x200008e8
 8009a48:	20000930 	.word	0x20000930
 8009a4c:	200008fc 	.word	0x200008fc
 8009a50:	20000858 	.word	0x20000858
 8009a54:	2000084c 	.word	0x2000084c
 8009a58:	20000974 	.word	0x20000974
 8009a5c:	200008f0 	.word	0x200008f0
 8009a60:	e000ed04 	.word	0xe000ed04

08009a64 <vTaskDelayUntil>:
	{
 8009a64:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8009a66:	b150      	cbz	r0, 8009a7e <vTaskDelayUntil+0x1a>
 8009a68:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 8009a6a:	b989      	cbnz	r1, 8009a90 <vTaskDelayUntil+0x2c>
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	e7fe      	b.n	8009a7c <vTaskDelayUntil+0x18>
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	e7fe      	b.n	8009a8e <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
 8009a90:	4b1a      	ldr	r3, [pc, #104]	; (8009afc <vTaskDelayUntil+0x98>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	b143      	cbz	r3, 8009aa8 <vTaskDelayUntil+0x44>
 8009a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9a:	f383 8811 	msr	BASEPRI, r3
 8009a9e:	f3bf 8f6f 	isb	sy
 8009aa2:	f3bf 8f4f 	dsb	sy
 8009aa6:	e7fe      	b.n	8009aa6 <vTaskDelayUntil+0x42>
 8009aa8:	460c      	mov	r4, r1
		vTaskSuspendAll();
 8009aaa:	f7ff fec7 	bl	800983c <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8009aae:	4b14      	ldr	r3, [pc, #80]	; (8009b00 <vTaskDelayUntil+0x9c>)
 8009ab0:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009ab2:	682a      	ldr	r2, [r5, #0]
 8009ab4:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
 8009ab6:	4282      	cmp	r2, r0
 8009ab8:	d918      	bls.n	8009aec <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009aba:	42a2      	cmp	r2, r4
 8009abc:	d80c      	bhi.n	8009ad8 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
 8009abe:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
 8009ac0:	f7ff ff56 	bl	8009970 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009ac4:	b938      	cbnz	r0, 8009ad6 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
 8009ac6:	4b0f      	ldr	r3, [pc, #60]	; (8009b04 <vTaskDelayUntil+0xa0>)
 8009ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009acc:	601a      	str	r2, [r3, #0]
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	f3bf 8f6f 	isb	sy
	}
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009ad8:	42a0      	cmp	r0, r4
 8009ada:	d301      	bcc.n	8009ae0 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 8009adc:	602c      	str	r4, [r5, #0]
 8009ade:	e7ef      	b.n	8009ac0 <vTaskDelayUntil+0x5c>
 8009ae0:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	1a20      	subs	r0, r4, r0
 8009ae6:	f7ff fda1 	bl	800962c <prvAddCurrentTaskToDelayedList>
 8009aea:	e7e9      	b.n	8009ac0 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009aec:	42a2      	cmp	r2, r4
 8009aee:	d801      	bhi.n	8009af4 <vTaskDelayUntil+0x90>
 8009af0:	42a0      	cmp	r0, r4
 8009af2:	d201      	bcs.n	8009af8 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
 8009af4:	602c      	str	r4, [r5, #0]
 8009af6:	e7f4      	b.n	8009ae2 <vTaskDelayUntil+0x7e>
 8009af8:	602c      	str	r4, [r5, #0]
 8009afa:	e7e1      	b.n	8009ac0 <vTaskDelayUntil+0x5c>
 8009afc:	200008f4 	.word	0x200008f4
 8009b00:	20000970 	.word	0x20000970
 8009b04:	e000ed04 	.word	0xe000ed04

08009b08 <vTaskDelay>:
	{
 8009b08:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b0a:	b1a8      	cbz	r0, 8009b38 <vTaskDelay+0x30>
 8009b0c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <vTaskDelay+0x44>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	b143      	cbz	r3, 8009b26 <vTaskDelay+0x1e>
 8009b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	e7fe      	b.n	8009b24 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8009b26:	f7ff fe89 	bl	800983c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f7ff fd7d 	bl	800962c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009b32:	f7ff ff1d 	bl	8009970 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009b36:	b938      	cbnz	r0, 8009b48 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8009b38:	4b05      	ldr	r3, [pc, #20]	; (8009b50 <vTaskDelay+0x48>)
 8009b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b3e:	601a      	str	r2, [r3, #0]
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	f3bf 8f6f 	isb	sy
	}
 8009b48:	bd10      	pop	{r4, pc}
 8009b4a:	bf00      	nop
 8009b4c:	200008f4 	.word	0x200008f4
 8009b50:	e000ed04 	.word	0xe000ed04

08009b54 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b54:	4b27      	ldr	r3, [pc, #156]	; (8009bf4 <vTaskSwitchContext+0xa0>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	b11b      	cbz	r3, 8009b62 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009b5a:	4b27      	ldr	r3, [pc, #156]	; (8009bf8 <vTaskSwitchContext+0xa4>)
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	601a      	str	r2, [r3, #0]
 8009b60:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8009b62:	4b25      	ldr	r3, [pc, #148]	; (8009bf8 <vTaskSwitchContext+0xa4>)
 8009b64:	2200      	movs	r2, #0
 8009b66:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009b68:	4b24      	ldr	r3, [pc, #144]	; (8009bfc <vTaskSwitchContext+0xa8>)
 8009b6a:	681a      	ldr	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009b6c:	4b24      	ldr	r3, [pc, #144]	; (8009c00 <vTaskSwitchContext+0xac>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d905      	bls.n	8009b80 <vTaskSwitchContext+0x2c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009b74:	4923      	ldr	r1, [pc, #140]	; (8009c04 <vTaskSwitchContext+0xb0>)
 8009b76:	6808      	ldr	r0, [r1, #0]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8009b7c:	440b      	add	r3, r1
 8009b7e:	6583      	str	r3, [r0, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009b80:	4b1f      	ldr	r3, [pc, #124]	; (8009c00 <vTaskSwitchContext+0xac>)
 8009b82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b84:	4b20      	ldr	r3, [pc, #128]	; (8009c08 <vTaskSwitchContext+0xb4>)
 8009b86:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009b88:	fab3 f383 	clz	r3, r3
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	f1c3 031f 	rsb	r3, r3, #31
 8009b92:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009b96:	008a      	lsls	r2, r1, #2
 8009b98:	491c      	ldr	r1, [pc, #112]	; (8009c0c <vTaskSwitchContext+0xb8>)
 8009b9a:	588a      	ldr	r2, [r1, r2]
 8009b9c:	b942      	cbnz	r2, 8009bb0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	e7fe      	b.n	8009bae <vTaskSwitchContext+0x5a>
{
 8009bb0:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bb2:	4816      	ldr	r0, [pc, #88]	; (8009c0c <vTaskSwitchContext+0xb8>)
 8009bb4:	009a      	lsls	r2, r3, #2
 8009bb6:	18d4      	adds	r4, r2, r3
 8009bb8:	00a1      	lsls	r1, r4, #2
 8009bba:	4401      	add	r1, r0
 8009bbc:	684c      	ldr	r4, [r1, #4]
 8009bbe:	6864      	ldr	r4, [r4, #4]
 8009bc0:	604c      	str	r4, [r1, #4]
 8009bc2:	441a      	add	r2, r3
 8009bc4:	0091      	lsls	r1, r2, #2
 8009bc6:	3108      	adds	r1, #8
 8009bc8:	4408      	add	r0, r1
 8009bca:	4284      	cmp	r4, r0
 8009bcc:	d00b      	beq.n	8009be6 <vTaskSwitchContext+0x92>
 8009bce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009bd2:	009a      	lsls	r2, r3, #2
 8009bd4:	4b0d      	ldr	r3, [pc, #52]	; (8009c0c <vTaskSwitchContext+0xb8>)
 8009bd6:	4413      	add	r3, r2
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	68da      	ldr	r2, [r3, #12]
 8009bdc:	4b09      	ldr	r3, [pc, #36]	; (8009c04 <vTaskSwitchContext+0xb0>)
 8009bde:	601a      	str	r2, [r3, #0]
}
 8009be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009be4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009be6:	6861      	ldr	r1, [r4, #4]
 8009be8:	4808      	ldr	r0, [pc, #32]	; (8009c0c <vTaskSwitchContext+0xb8>)
 8009bea:	2214      	movs	r2, #20
 8009bec:	fb02 0203 	mla	r2, r2, r3, r0
 8009bf0:	6051      	str	r1, [r2, #4]
 8009bf2:	e7ec      	b.n	8009bce <vTaskSwitchContext+0x7a>
 8009bf4:	200008f4 	.word	0x200008f4
 8009bf8:	20000974 	.word	0x20000974
 8009bfc:	20003308 	.word	0x20003308
 8009c00:	200008e4 	.word	0x200008e4
 8009c04:	2000084c 	.word	0x2000084c
 8009c08:	200008fc 	.word	0x200008fc
 8009c0c:	20000858 	.word	0x20000858

08009c10 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009c10:	b940      	cbnz	r0, 8009c24 <vTaskPlaceOnEventList+0x14>
 8009c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	e7fe      	b.n	8009c22 <vTaskPlaceOnEventList+0x12>
{
 8009c24:	b510      	push	{r4, lr}
 8009c26:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c28:	4b04      	ldr	r3, [pc, #16]	; (8009c3c <vTaskPlaceOnEventList+0x2c>)
 8009c2a:	6819      	ldr	r1, [r3, #0]
 8009c2c:	3118      	adds	r1, #24
 8009c2e:	f7fe ff1a 	bl	8008a66 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c32:	2101      	movs	r1, #1
 8009c34:	4620      	mov	r0, r4
 8009c36:	f7ff fcf9 	bl	800962c <prvAddCurrentTaskToDelayedList>
}
 8009c3a:	bd10      	pop	{r4, pc}
 8009c3c:	2000084c 	.word	0x2000084c

08009c40 <vTaskPlaceOnEventListRestricted>:
	{
 8009c40:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8009c42:	b940      	cbnz	r0, 8009c56 <vTaskPlaceOnEventListRestricted+0x16>
 8009c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	e7fe      	b.n	8009c54 <vTaskPlaceOnEventListRestricted+0x14>
 8009c56:	460c      	mov	r4, r1
 8009c58:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c5a:	4a06      	ldr	r2, [pc, #24]	; (8009c74 <vTaskPlaceOnEventListRestricted+0x34>)
 8009c5c:	6811      	ldr	r1, [r2, #0]
 8009c5e:	3118      	adds	r1, #24
 8009c60:	f7fe fef5 	bl	8008a4e <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8009c64:	b10d      	cbz	r5, 8009c6a <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 8009c66:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f7ff fcdd 	bl	800962c <prvAddCurrentTaskToDelayedList>
	}
 8009c72:	bd38      	pop	{r3, r4, r5, pc}
 8009c74:	2000084c 	.word	0x2000084c

08009c78 <xTaskRemoveFromEventList>:
{
 8009c78:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c7a:	68c3      	ldr	r3, [r0, #12]
 8009c7c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009c7e:	b944      	cbnz	r4, 8009c92 <xTaskRemoveFromEventList+0x1a>
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	e7fe      	b.n	8009c90 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c92:	f104 0518 	add.w	r5, r4, #24
 8009c96:	4628      	mov	r0, r5
 8009c98:	f7fe feff 	bl	8008a9a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c9c:	4b13      	ldr	r3, [pc, #76]	; (8009cec <xTaskRemoveFromEventList+0x74>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	b9e3      	cbnz	r3, 8009cdc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ca2:	1d25      	adds	r5, r4, #4
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f7fe fef8 	bl	8008a9a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009caa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009cac:	2201      	movs	r2, #1
 8009cae:	409a      	lsls	r2, r3
 8009cb0:	490f      	ldr	r1, [pc, #60]	; (8009cf0 <xTaskRemoveFromEventList+0x78>)
 8009cb2:	6808      	ldr	r0, [r1, #0]
 8009cb4:	4302      	orrs	r2, r0
 8009cb6:	600a      	str	r2, [r1, #0]
 8009cb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009cbc:	009a      	lsls	r2, r3, #2
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	480c      	ldr	r0, [pc, #48]	; (8009cf4 <xTaskRemoveFromEventList+0x7c>)
 8009cc2:	4410      	add	r0, r2
 8009cc4:	f7fe fec3 	bl	8008a4e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009cc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009cca:	4b0b      	ldr	r3, [pc, #44]	; (8009cf8 <xTaskRemoveFromEventList+0x80>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d908      	bls.n	8009ce6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8009cd4:	2001      	movs	r0, #1
 8009cd6:	4b09      	ldr	r3, [pc, #36]	; (8009cfc <xTaskRemoveFromEventList+0x84>)
 8009cd8:	6018      	str	r0, [r3, #0]
}
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009cdc:	4629      	mov	r1, r5
 8009cde:	4808      	ldr	r0, [pc, #32]	; (8009d00 <xTaskRemoveFromEventList+0x88>)
 8009ce0:	f7fe feb5 	bl	8008a4e <vListInsertEnd>
 8009ce4:	e7f0      	b.n	8009cc8 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8009ce6:	2000      	movs	r0, #0
	return xReturn;
 8009ce8:	e7f7      	b.n	8009cda <xTaskRemoveFromEventList+0x62>
 8009cea:	bf00      	nop
 8009cec:	200008f4 	.word	0x200008f4
 8009cf0:	200008fc 	.word	0x200008fc
 8009cf4:	20000858 	.word	0x20000858
 8009cf8:	2000084c 	.word	0x2000084c
 8009cfc:	20000974 	.word	0x20000974
 8009d00:	20000930 	.word	0x20000930

08009d04 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d04:	4b03      	ldr	r3, [pc, #12]	; (8009d14 <vTaskInternalSetTimeOutState+0x10>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d0a:	4b03      	ldr	r3, [pc, #12]	; (8009d18 <vTaskInternalSetTimeOutState+0x14>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	6043      	str	r3, [r0, #4]
}
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	2000092c 	.word	0x2000092c
 8009d18:	20000970 	.word	0x20000970

08009d1c <xTaskCheckForTimeOut>:
{
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8009d1e:	b150      	cbz	r0, 8009d36 <xTaskCheckForTimeOut+0x1a>
 8009d20:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8009d22:	b989      	cbnz	r1, 8009d48 <xTaskCheckForTimeOut+0x2c>
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	e7fe      	b.n	8009d34 <xTaskCheckForTimeOut+0x18>
 8009d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	e7fe      	b.n	8009d46 <xTaskCheckForTimeOut+0x2a>
 8009d48:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8009d4a:	f000 fde3 	bl	800a914 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009d4e:	4b11      	ldr	r3, [pc, #68]	; (8009d94 <xTaskCheckForTimeOut+0x78>)
 8009d50:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d52:	6868      	ldr	r0, [r5, #4]
 8009d54:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d5c:	d016      	beq.n	8009d8c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d5e:	682f      	ldr	r7, [r5, #0]
 8009d60:	4e0d      	ldr	r6, [pc, #52]	; (8009d98 <xTaskCheckForTimeOut+0x7c>)
 8009d62:	6836      	ldr	r6, [r6, #0]
 8009d64:	42b7      	cmp	r7, r6
 8009d66:	d001      	beq.n	8009d6c <xTaskCheckForTimeOut+0x50>
 8009d68:	4288      	cmp	r0, r1
 8009d6a:	d911      	bls.n	8009d90 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d803      	bhi.n	8009d78 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8009d70:	2300      	movs	r3, #0
 8009d72:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009d74:	2401      	movs	r4, #1
 8009d76:	e005      	b.n	8009d84 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8009d78:	1a9b      	subs	r3, r3, r2
 8009d7a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	f7ff ffc1 	bl	8009d04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d82:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009d84:	f000 fde8 	bl	800a958 <vPortExitCritical>
}
 8009d88:	4620      	mov	r0, r4
 8009d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8009d8c:	2400      	movs	r4, #0
 8009d8e:	e7f9      	b.n	8009d84 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8009d90:	2401      	movs	r4, #1
 8009d92:	e7f7      	b.n	8009d84 <xTaskCheckForTimeOut+0x68>
 8009d94:	20000970 	.word	0x20000970
 8009d98:	2000092c 	.word	0x2000092c

08009d9c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009d9c:	4b01      	ldr	r3, [pc, #4]	; (8009da4 <vTaskMissedYield+0x8>)
 8009d9e:	2201      	movs	r2, #1
 8009da0:	601a      	str	r2, [r3, #0]
}
 8009da2:	4770      	bx	lr
 8009da4:	20000974 	.word	0x20000974

08009da8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8009da8:	4b01      	ldr	r3, [pc, #4]	; (8009db0 <xTaskGetCurrentTaskHandle+0x8>)
 8009daa:	6818      	ldr	r0, [r3, #0]
	}
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	2000084c 	.word	0x2000084c

08009db4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009db4:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <xTaskGetSchedulerState+0x18>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	b133      	cbz	r3, 8009dc8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dba:	4b05      	ldr	r3, [pc, #20]	; (8009dd0 <xTaskGetSchedulerState+0x1c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	b10b      	cbz	r3, 8009dc4 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8009dc0:	2000      	movs	r0, #0
	}
 8009dc2:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8009dc4:	2002      	movs	r0, #2
 8009dc6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009dc8:	2001      	movs	r0, #1
 8009dca:	4770      	bx	lr
 8009dcc:	20000944 	.word	0x20000944
 8009dd0:	200008f4 	.word	0x200008f4

08009dd4 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d050      	beq.n	8009e7a <xTaskPriorityInherit+0xa6>
	{
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009ddc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009dde:	4928      	ldr	r1, [pc, #160]	; (8009e80 <xTaskPriorityInherit+0xac>)
 8009de0:	6809      	ldr	r1, [r1, #0]
 8009de2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009de4:	428a      	cmp	r2, r1
 8009de6:	d23e      	bcs.n	8009e66 <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009de8:	6981      	ldr	r1, [r0, #24]
 8009dea:	2900      	cmp	r1, #0
 8009dec:	db05      	blt.n	8009dfa <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dee:	4924      	ldr	r1, [pc, #144]	; (8009e80 <xTaskPriorityInherit+0xac>)
 8009df0:	6809      	ldr	r1, [r1, #0]
 8009df2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009df4:	f1c1 0107 	rsb	r1, r1, #7
 8009df8:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009dfa:	6960      	ldr	r0, [r4, #20]
 8009dfc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009e00:	0091      	lsls	r1, r2, #2
 8009e02:	4a20      	ldr	r2, [pc, #128]	; (8009e84 <xTaskPriorityInherit+0xb0>)
 8009e04:	440a      	add	r2, r1
 8009e06:	4290      	cmp	r0, r2
 8009e08:	d005      	beq.n	8009e16 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e0a:	4a1d      	ldr	r2, [pc, #116]	; (8009e80 <xTaskPriorityInherit+0xac>)
 8009e0c:	6812      	ldr	r2, [r2, #0]
 8009e0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009e10:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8009e12:	2001      	movs	r0, #1
	}
 8009e14:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e16:	1d25      	adds	r5, r4, #4
 8009e18:	4628      	mov	r0, r5
 8009e1a:	f7fe fe3e 	bl	8008a9a <uxListRemove>
 8009e1e:	b968      	cbnz	r0, 8009e3c <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009e20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009e22:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009e26:	008a      	lsls	r2, r1, #2
 8009e28:	4916      	ldr	r1, [pc, #88]	; (8009e84 <xTaskPriorityInherit+0xb0>)
 8009e2a:	588a      	ldr	r2, [r1, r2]
 8009e2c:	b932      	cbnz	r2, 8009e3c <xTaskPriorityInherit+0x68>
 8009e2e:	2201      	movs	r2, #1
 8009e30:	409a      	lsls	r2, r3
 8009e32:	4915      	ldr	r1, [pc, #84]	; (8009e88 <xTaskPriorityInherit+0xb4>)
 8009e34:	680b      	ldr	r3, [r1, #0]
 8009e36:	ea23 0302 	bic.w	r3, r3, r2
 8009e3a:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e3c:	4b10      	ldr	r3, [pc, #64]	; (8009e80 <xTaskPriorityInherit+0xac>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e42:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e44:	2401      	movs	r4, #1
 8009e46:	fa04 f203 	lsl.w	r2, r4, r3
 8009e4a:	490f      	ldr	r1, [pc, #60]	; (8009e88 <xTaskPriorityInherit+0xb4>)
 8009e4c:	6808      	ldr	r0, [r1, #0]
 8009e4e:	4302      	orrs	r2, r0
 8009e50:	600a      	str	r2, [r1, #0]
 8009e52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009e56:	009a      	lsls	r2, r3, #2
 8009e58:	4629      	mov	r1, r5
 8009e5a:	480a      	ldr	r0, [pc, #40]	; (8009e84 <xTaskPriorityInherit+0xb0>)
 8009e5c:	4410      	add	r0, r2
 8009e5e:	f7fe fdf6 	bl	8008a4e <vListInsertEnd>
				xReturn = pdTRUE;
 8009e62:	4620      	mov	r0, r4
 8009e64:	e7d6      	b.n	8009e14 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009e66:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009e68:	4b05      	ldr	r3, [pc, #20]	; (8009e80 <xTaskPriorityInherit+0xac>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d201      	bcs.n	8009e76 <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
 8009e72:	2001      	movs	r0, #1
		return xReturn;
 8009e74:	e7ce      	b.n	8009e14 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 8009e76:	2000      	movs	r0, #0
 8009e78:	e7cc      	b.n	8009e14 <xTaskPriorityInherit+0x40>
 8009e7a:	2000      	movs	r0, #0
	}
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	2000084c 	.word	0x2000084c
 8009e84:	20000858 	.word	0x20000858
 8009e88:	200008fc 	.word	0x200008fc

08009e8c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d049      	beq.n	8009f24 <xTaskPriorityDisinherit+0x98>
	{
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8009e94:	4a26      	ldr	r2, [pc, #152]	; (8009f30 <xTaskPriorityDisinherit+0xa4>)
 8009e96:	6812      	ldr	r2, [r2, #0]
 8009e98:	4282      	cmp	r2, r0
 8009e9a:	d008      	beq.n	8009eae <xTaskPriorityDisinherit+0x22>
 8009e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	e7fe      	b.n	8009eac <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8009eae:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8009eb0:	b942      	cbnz	r2, 8009ec4 <xTaskPriorityDisinherit+0x38>
 8009eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	e7fe      	b.n	8009ec2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8009ec4:	3a01      	subs	r2, #1
 8009ec6:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ec8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8009eca:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009ecc:	4288      	cmp	r0, r1
 8009ece:	d02b      	beq.n	8009f28 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ed0:	bb62      	cbnz	r2, 8009f2c <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ed2:	1d25      	adds	r5, r4, #4
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	f7fe fde0 	bl	8008a9a <uxListRemove>
 8009eda:	b970      	cbnz	r0, 8009efa <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009edc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009ede:	2314      	movs	r3, #20
 8009ee0:	fb03 f302 	mul.w	r3, r3, r2
 8009ee4:	4913      	ldr	r1, [pc, #76]	; (8009f34 <xTaskPriorityDisinherit+0xa8>)
 8009ee6:	58cb      	ldr	r3, [r1, r3]
 8009ee8:	b93b      	cbnz	r3, 8009efa <xTaskPriorityDisinherit+0x6e>
 8009eea:	2301      	movs	r3, #1
 8009eec:	fa03 f202 	lsl.w	r2, r3, r2
 8009ef0:	4911      	ldr	r1, [pc, #68]	; (8009f38 <xTaskPriorityDisinherit+0xac>)
 8009ef2:	680b      	ldr	r3, [r1, #0]
 8009ef4:	ea23 0302 	bic.w	r3, r3, r2
 8009ef8:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009efa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009efc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009efe:	f1c3 0207 	rsb	r2, r3, #7
 8009f02:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f04:	2401      	movs	r4, #1
 8009f06:	fa04 f203 	lsl.w	r2, r4, r3
 8009f0a:	490b      	ldr	r1, [pc, #44]	; (8009f38 <xTaskPriorityDisinherit+0xac>)
 8009f0c:	6808      	ldr	r0, [r1, #0]
 8009f0e:	4302      	orrs	r2, r0
 8009f10:	600a      	str	r2, [r1, #0]
 8009f12:	4629      	mov	r1, r5
 8009f14:	4a07      	ldr	r2, [pc, #28]	; (8009f34 <xTaskPriorityDisinherit+0xa8>)
 8009f16:	2014      	movs	r0, #20
 8009f18:	fb00 2003 	mla	r0, r0, r3, r2
 8009f1c:	f7fe fd97 	bl	8008a4e <vListInsertEnd>
					xReturn = pdTRUE;
 8009f20:	4620      	mov	r0, r4
	}
 8009f22:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8009f24:	2000      	movs	r0, #0
	}
 8009f26:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8009f28:	2000      	movs	r0, #0
 8009f2a:	e7fa      	b.n	8009f22 <xTaskPriorityDisinherit+0x96>
 8009f2c:	2000      	movs	r0, #0
		return xReturn;
 8009f2e:	e7f8      	b.n	8009f22 <xTaskPriorityDisinherit+0x96>
 8009f30:	2000084c 	.word	0x2000084c
 8009f34:	20000858 	.word	0x20000858
 8009f38:	200008fc 	.word	0x200008fc

08009f3c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	d055      	beq.n	8009fec <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8009f44:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8009f46:	b940      	cbnz	r0, 8009f5a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8009f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	e7fe      	b.n	8009f58 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009f5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f5c:	428a      	cmp	r2, r1
 8009f5e:	d200      	bcs.n	8009f62 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009f60:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009f62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009f64:	4291      	cmp	r1, r2
 8009f66:	d001      	beq.n	8009f6c <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009f68:	2801      	cmp	r0, #1
 8009f6a:	d000      	beq.n	8009f6e <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8009f6c:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8009f6e:	4820      	ldr	r0, [pc, #128]	; (8009ff0 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8009f70:	6800      	ldr	r0, [r0, #0]
 8009f72:	4298      	cmp	r0, r3
 8009f74:	d108      	bne.n	8009f88 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 8009f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	e7fe      	b.n	8009f86 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 8009f88:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f8a:	6998      	ldr	r0, [r3, #24]
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	db02      	blt.n	8009f96 <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f90:	f1c2 0207 	rsb	r2, r2, #7
 8009f94:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009f96:	695a      	ldr	r2, [r3, #20]
 8009f98:	4816      	ldr	r0, [pc, #88]	; (8009ff4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009f9a:	2414      	movs	r4, #20
 8009f9c:	fb04 0101 	mla	r1, r4, r1, r0
 8009fa0:	428a      	cmp	r2, r1
 8009fa2:	d1e3      	bne.n	8009f6c <vTaskPriorityDisinheritAfterTimeout+0x30>
 8009fa4:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fa6:	1d1d      	adds	r5, r3, #4
 8009fa8:	4628      	mov	r0, r5
 8009faa:	f7fe fd76 	bl	8008a9a <uxListRemove>
 8009fae:	b970      	cbnz	r0, 8009fce <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009fb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009fb2:	2314      	movs	r3, #20
 8009fb4:	fb03 f302 	mul.w	r3, r3, r2
 8009fb8:	490e      	ldr	r1, [pc, #56]	; (8009ff4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009fba:	58cb      	ldr	r3, [r1, r3]
 8009fbc:	b93b      	cbnz	r3, 8009fce <vTaskPriorityDisinheritAfterTimeout+0x92>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	fa03 f202 	lsl.w	r2, r3, r2
 8009fc4:	490c      	ldr	r1, [pc, #48]	; (8009ff8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8009fc6:	680b      	ldr	r3, [r1, #0]
 8009fc8:	ea23 0302 	bic.w	r3, r3, r2
 8009fcc:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 8009fce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	4093      	lsls	r3, r2
 8009fd4:	4908      	ldr	r1, [pc, #32]	; (8009ff8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8009fd6:	6808      	ldr	r0, [r1, #0]
 8009fd8:	4303      	orrs	r3, r0
 8009fda:	600b      	str	r3, [r1, #0]
 8009fdc:	4629      	mov	r1, r5
 8009fde:	4b05      	ldr	r3, [pc, #20]	; (8009ff4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009fe0:	2014      	movs	r0, #20
 8009fe2:	fb00 3002 	mla	r0, r0, r2, r3
 8009fe6:	f7fe fd32 	bl	8008a4e <vListInsertEnd>
	}
 8009fea:	e7bf      	b.n	8009f6c <vTaskPriorityDisinheritAfterTimeout+0x30>
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	2000084c 	.word	0x2000084c
 8009ff4:	20000858 	.word	0x20000858
 8009ff8:	200008fc 	.word	0x200008fc

08009ffc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009ffc:	4b05      	ldr	r3, [pc, #20]	; (800a014 <pvTaskIncrementMutexHeldCount+0x18>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	b123      	cbz	r3, 800a00c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800a002:	4b04      	ldr	r3, [pc, #16]	; (800a014 <pvTaskIncrementMutexHeldCount+0x18>)
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a008:	3301      	adds	r3, #1
 800a00a:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
 800a00c:	4b01      	ldr	r3, [pc, #4]	; (800a014 <pvTaskIncrementMutexHeldCount+0x18>)
 800a00e:	6818      	ldr	r0, [r3, #0]
	}
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	2000084c 	.word	0x2000084c

0800a018 <ulTaskNotifyTake>:
	{
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	4605      	mov	r5, r0
 800a01c:	460c      	mov	r4, r1
		taskENTER_CRITICAL();
 800a01e:	f000 fc79 	bl	800a914 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800a022:	4b19      	ldr	r3, [pc, #100]	; (800a088 <ulTaskNotifyTake+0x70>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a028:	b92b      	cbnz	r3, 800a036 <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a02a:	4b17      	ldr	r3, [pc, #92]	; (800a088 <ulTaskNotifyTake+0x70>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 800a034:	b9ac      	cbnz	r4, 800a062 <ulTaskNotifyTake+0x4a>
		taskEXIT_CRITICAL();
 800a036:	f000 fc8f 	bl	800a958 <vPortExitCritical>
		taskENTER_CRITICAL();
 800a03a:	f000 fc6b 	bl	800a914 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800a03e:	4b12      	ldr	r3, [pc, #72]	; (800a088 <ulTaskNotifyTake+0x70>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if( ulReturn != 0UL )
 800a044:	b124      	cbz	r4, 800a050 <ulTaskNotifyTake+0x38>
				if( xClearCountOnExit != pdFALSE )
 800a046:	b9cd      	cbnz	r5, 800a07c <ulTaskNotifyTake+0x64>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800a048:	4b0f      	ldr	r3, [pc, #60]	; (800a088 <ulTaskNotifyTake+0x70>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	1e62      	subs	r2, r4, #1
 800a04e:	65da      	str	r2, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a050:	4b0d      	ldr	r3, [pc, #52]	; (800a088 <ulTaskNotifyTake+0x70>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 800a05a:	f000 fc7d 	bl	800a958 <vPortExitCritical>
	}
 800a05e:	4620      	mov	r0, r4
 800a060:	bd38      	pop	{r3, r4, r5, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a062:	4611      	mov	r1, r2
 800a064:	4620      	mov	r0, r4
 800a066:	f7ff fae1 	bl	800962c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800a06a:	4b08      	ldr	r3, [pc, #32]	; (800a08c <ulTaskNotifyTake+0x74>)
 800a06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a070:	601a      	str	r2, [r3, #0]
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	e7dc      	b.n	800a036 <ulTaskNotifyTake+0x1e>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800a07c:	4b02      	ldr	r3, [pc, #8]	; (800a088 <ulTaskNotifyTake+0x70>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2200      	movs	r2, #0
 800a082:	65da      	str	r2, [r3, #92]	; 0x5c
 800a084:	e7e4      	b.n	800a050 <ulTaskNotifyTake+0x38>
 800a086:	bf00      	nop
 800a088:	2000084c 	.word	0x2000084c
 800a08c:	e000ed04 	.word	0xe000ed04

0800a090 <xTaskNotifyWait>:
	{
 800a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a092:	4607      	mov	r7, r0
 800a094:	460d      	mov	r5, r1
 800a096:	4614      	mov	r4, r2
 800a098:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 800a09a:	f000 fc3b 	bl	800a914 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a09e:	4b20      	ldr	r3, [pc, #128]	; (800a120 <xTaskNotifyWait+0x90>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d00a      	beq.n	800a0c2 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a0ac:	4b1c      	ldr	r3, [pc, #112]	; (800a120 <xTaskNotifyWait+0x90>)
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800a0b2:	ea20 0007 	bic.w	r0, r0, r7
 800a0b6:	65d0      	str	r0, [r2, #92]	; 0x5c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 800a0c0:	b9ce      	cbnz	r6, 800a0f6 <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 800a0c2:	f000 fc49 	bl	800a958 <vPortExitCritical>
		taskENTER_CRITICAL();
 800a0c6:	f000 fc25 	bl	800a914 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800a0ca:	b11c      	cbz	r4, 800a0d4 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a0cc:	4b14      	ldr	r3, [pc, #80]	; (800a120 <xTaskNotifyWait+0x90>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0d2:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a0d4:	4b12      	ldr	r3, [pc, #72]	; (800a120 <xTaskNotifyWait+0x90>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d016      	beq.n	800a110 <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 800a0e2:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0e4:	4b0e      	ldr	r3, [pc, #56]	; (800a120 <xTaskNotifyWait+0x90>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 800a0ee:	f000 fc33 	bl	800a958 <vPortExitCritical>
	}
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a0f6:	4611      	mov	r1, r2
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f7ff fa97 	bl	800962c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800a0fe:	4b09      	ldr	r3, [pc, #36]	; (800a124 <xTaskNotifyWait+0x94>)
 800a100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a104:	601a      	str	r2, [r3, #0]
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	e7d8      	b.n	800a0c2 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a110:	4b03      	ldr	r3, [pc, #12]	; (800a120 <xTaskNotifyWait+0x90>)
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800a116:	ea23 0505 	bic.w	r5, r3, r5
 800a11a:	65d5      	str	r5, [r2, #92]	; 0x5c
				xReturn = pdTRUE;
 800a11c:	2401      	movs	r4, #1
 800a11e:	e7e1      	b.n	800a0e4 <xTaskNotifyWait+0x54>
 800a120:	2000084c 	.word	0x2000084c
 800a124:	e000ed04 	.word	0xe000ed04

0800a128 <xTaskGenericNotifyFromISR>:
	{
 800a128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a12c:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
 800a12e:	b940      	cbnz	r0, 800a142 <xTaskGenericNotifyFromISR+0x1a>
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	e7fe      	b.n	800a140 <xTaskGenericNotifyFromISR+0x18>
 800a142:	4604      	mov	r4, r0
 800a144:	4699      	mov	r9, r3
 800a146:	4690      	mov	r8, r2
 800a148:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a14a:	f000 fd0d 	bl	800ab68 <vPortValidateInterruptPriority>
	__asm volatile
 800a14e:	f3ef 8711 	mrs	r7, BASEPRI
 800a152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800a162:	f1b9 0f00 	cmp.w	r9, #0
 800a166:	d002      	beq.n	800a16e <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a168:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a16a:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a16e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800a172:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a174:	2202      	movs	r2, #2
 800a176:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			switch( eAction )
 800a17a:	f1b8 0f04 	cmp.w	r8, #4
 800a17e:	d81c      	bhi.n	800a1ba <xTaskGenericNotifyFromISR+0x92>
 800a180:	e8df f008 	tbb	[pc, r8]
 800a184:	130e0328 	.word	0x130e0328
 800a188:	16          	.byte	0x16
 800a189:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 800a18a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a18c:	4315      	orrs	r5, r2
 800a18e:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a190:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a192:	2b01      	cmp	r3, #1
 800a194:	d024      	beq.n	800a1e0 <xTaskGenericNotifyFromISR+0xb8>
	__asm volatile
 800a196:	f387 8811 	msr	BASEPRI, r7
	}
 800a19a:	4628      	mov	r0, r5
 800a19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 800a1a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a1a2:	3201      	adds	r2, #1
 800a1a4:	65e2      	str	r2, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a1a6:	2501      	movs	r5, #1
					break;
 800a1a8:	e7f3      	b.n	800a192 <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
 800a1aa:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a1ac:	2501      	movs	r5, #1
					break;
 800a1ae:	e7f0      	b.n	800a192 <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d011      	beq.n	800a1d8 <xTaskGenericNotifyFromISR+0xb0>
						pxTCB->ulNotifiedValue = ulValue;
 800a1b4:	65e5      	str	r5, [r4, #92]	; 0x5c
	BaseType_t xReturn = pdPASS;
 800a1b6:	2501      	movs	r5, #1
 800a1b8:	e7eb      	b.n	800a192 <xTaskGenericNotifyFromISR+0x6a>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a1ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a1bc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a1c0:	d00c      	beq.n	800a1dc <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	e7fe      	b.n	800a1d2 <xTaskGenericNotifyFromISR+0xaa>
	BaseType_t xReturn = pdPASS;
 800a1d4:	2501      	movs	r5, #1
 800a1d6:	e7dc      	b.n	800a192 <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 800a1d8:	2500      	movs	r5, #0
 800a1da:	e7da      	b.n	800a192 <xTaskGenericNotifyFromISR+0x6a>
	BaseType_t xReturn = pdPASS;
 800a1dc:	2501      	movs	r5, #1
 800a1de:	e7d8      	b.n	800a192 <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a1e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a1e2:	b143      	cbz	r3, 800a1f6 <xTaskGenericNotifyFromISR+0xce>
 800a1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e8:	f383 8811 	msr	BASEPRI, r3
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	e7fe      	b.n	800a1f4 <xTaskGenericNotifyFromISR+0xcc>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1f6:	4b14      	ldr	r3, [pc, #80]	; (800a248 <xTaskGenericNotifyFromISR+0x120>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	b9fb      	cbnz	r3, 800a23c <xTaskGenericNotifyFromISR+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1fc:	f104 0804 	add.w	r8, r4, #4
 800a200:	4640      	mov	r0, r8
 800a202:	f7fe fc4a 	bl	8008a9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a206:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a208:	2301      	movs	r3, #1
 800a20a:	4093      	lsls	r3, r2
 800a20c:	490f      	ldr	r1, [pc, #60]	; (800a24c <xTaskGenericNotifyFromISR+0x124>)
 800a20e:	6808      	ldr	r0, [r1, #0]
 800a210:	4303      	orrs	r3, r0
 800a212:	600b      	str	r3, [r1, #0]
 800a214:	4641      	mov	r1, r8
 800a216:	4b0e      	ldr	r3, [pc, #56]	; (800a250 <xTaskGenericNotifyFromISR+0x128>)
 800a218:	2014      	movs	r0, #20
 800a21a:	fb00 3002 	mla	r0, r0, r2, r3
 800a21e:	f7fe fc16 	bl	8008a4e <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a222:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a224:	4b0b      	ldr	r3, [pc, #44]	; (800a254 <xTaskGenericNotifyFromISR+0x12c>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d9b3      	bls.n	800a196 <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 800a22e:	b10e      	cbz	r6, 800a234 <xTaskGenericNotifyFromISR+0x10c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a230:	2301      	movs	r3, #1
 800a232:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 800a234:	4b08      	ldr	r3, [pc, #32]	; (800a258 <xTaskGenericNotifyFromISR+0x130>)
 800a236:	2201      	movs	r2, #1
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	e7ac      	b.n	800a196 <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a23c:	f104 0118 	add.w	r1, r4, #24
 800a240:	4806      	ldr	r0, [pc, #24]	; (800a25c <xTaskGenericNotifyFromISR+0x134>)
 800a242:	f7fe fc04 	bl	8008a4e <vListInsertEnd>
 800a246:	e7ec      	b.n	800a222 <xTaskGenericNotifyFromISR+0xfa>
 800a248:	200008f4 	.word	0x200008f4
 800a24c:	200008fc 	.word	0x200008fc
 800a250:	20000858 	.word	0x20000858
 800a254:	2000084c 	.word	0x2000084c
 800a258:	20000974 	.word	0x20000974
 800a25c:	20000930 	.word	0x20000930

0800a260 <vTaskNotifyGiveFromISR>:
	{
 800a260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 800a262:	b940      	cbnz	r0, 800a276 <vTaskNotifyGiveFromISR+0x16>
 800a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	e7fe      	b.n	800a274 <vTaskNotifyGiveFromISR+0x14>
 800a276:	4604      	mov	r4, r0
 800a278:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a27a:	f000 fc75 	bl	800ab68 <vPortValidateInterruptPriority>
	__asm volatile
 800a27e:	f3ef 8611 	mrs	r6, BASEPRI
 800a282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a292:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800a296:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a298:	2202      	movs	r2, #2
 800a29a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			( pxTCB->ulNotifiedValue )++;
 800a29e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a2a0:	3201      	adds	r2, #1
 800a2a2:	65e2      	str	r2, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d002      	beq.n	800a2ae <vTaskNotifyGiveFromISR+0x4e>
	__asm volatile
 800a2a8:	f386 8811 	msr	BASEPRI, r6
	}
 800a2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a2ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a2b0:	b143      	cbz	r3, 800a2c4 <vTaskNotifyGiveFromISR+0x64>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	e7fe      	b.n	800a2c2 <vTaskNotifyGiveFromISR+0x62>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2c4:	4b13      	ldr	r3, [pc, #76]	; (800a314 <vTaskNotifyGiveFromISR+0xb4>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	b9f3      	cbnz	r3, 800a308 <vTaskNotifyGiveFromISR+0xa8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2ca:	1d27      	adds	r7, r4, #4
 800a2cc:	4638      	mov	r0, r7
 800a2ce:	f7fe fbe4 	bl	8008a9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a2d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	4093      	lsls	r3, r2
 800a2d8:	490f      	ldr	r1, [pc, #60]	; (800a318 <vTaskNotifyGiveFromISR+0xb8>)
 800a2da:	6808      	ldr	r0, [r1, #0]
 800a2dc:	4303      	orrs	r3, r0
 800a2de:	600b      	str	r3, [r1, #0]
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	4b0e      	ldr	r3, [pc, #56]	; (800a31c <vTaskNotifyGiveFromISR+0xbc>)
 800a2e4:	2014      	movs	r0, #20
 800a2e6:	fb00 3002 	mla	r0, r0, r2, r3
 800a2ea:	f7fe fbb0 	bl	8008a4e <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a2f0:	4b0b      	ldr	r3, [pc, #44]	; (800a320 <vTaskNotifyGiveFromISR+0xc0>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d9d6      	bls.n	800a2a8 <vTaskNotifyGiveFromISR+0x48>
					if( pxHigherPriorityTaskWoken != NULL )
 800a2fa:	b10d      	cbz	r5, 800a300 <vTaskNotifyGiveFromISR+0xa0>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 800a300:	4b08      	ldr	r3, [pc, #32]	; (800a324 <vTaskNotifyGiveFromISR+0xc4>)
 800a302:	2201      	movs	r2, #1
 800a304:	601a      	str	r2, [r3, #0]
 800a306:	e7cf      	b.n	800a2a8 <vTaskNotifyGiveFromISR+0x48>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a308:	f104 0118 	add.w	r1, r4, #24
 800a30c:	4806      	ldr	r0, [pc, #24]	; (800a328 <vTaskNotifyGiveFromISR+0xc8>)
 800a30e:	f7fe fb9e 	bl	8008a4e <vListInsertEnd>
 800a312:	e7ec      	b.n	800a2ee <vTaskNotifyGiveFromISR+0x8e>
 800a314:	200008f4 	.word	0x200008f4
 800a318:	200008fc 	.word	0x200008fc
 800a31c:	20000858 	.word	0x20000858
 800a320:	2000084c 	.word	0x2000084c
 800a324:	20000974 	.word	0x20000974
 800a328:	20000930 	.word	0x20000930

0800a32c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a32c:	4b06      	ldr	r3, [pc, #24]	; (800a348 <prvGetNextExpireTime+0x1c>)
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	6813      	ldr	r3, [r2, #0]
 800a332:	b92b      	cbnz	r3, 800a340 <prvGetNextExpireTime+0x14>
 800a334:	2301      	movs	r3, #1
 800a336:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a338:	b923      	cbnz	r3, 800a344 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a33a:	68d3      	ldr	r3, [r2, #12]
 800a33c:	6818      	ldr	r0, [r3, #0]
 800a33e:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a340:	2300      	movs	r3, #0
 800a342:	e7f8      	b.n	800a336 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a344:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800a346:	4770      	bx	lr
 800a348:	20000978 	.word	0x20000978

0800a34c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a34c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a34e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a350:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a352:	4291      	cmp	r1, r2
 800a354:	d80c      	bhi.n	800a370 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a356:	1ad2      	subs	r2, r2, r3
 800a358:	6983      	ldr	r3, [r0, #24]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d301      	bcc.n	800a362 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a35e:	2001      	movs	r0, #1
 800a360:	e010      	b.n	800a384 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a362:	1d01      	adds	r1, r0, #4
 800a364:	4b09      	ldr	r3, [pc, #36]	; (800a38c <prvInsertTimerInActiveList+0x40>)
 800a366:	6818      	ldr	r0, [r3, #0]
 800a368:	f7fe fb7d 	bl	8008a66 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a36c:	2000      	movs	r0, #0
 800a36e:	e009      	b.n	800a384 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a370:	429a      	cmp	r2, r3
 800a372:	d201      	bcs.n	800a378 <prvInsertTimerInActiveList+0x2c>
 800a374:	4299      	cmp	r1, r3
 800a376:	d206      	bcs.n	800a386 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a378:	1d01      	adds	r1, r0, #4
 800a37a:	4b05      	ldr	r3, [pc, #20]	; (800a390 <prvInsertTimerInActiveList+0x44>)
 800a37c:	6818      	ldr	r0, [r3, #0]
 800a37e:	f7fe fb72 	bl	8008a66 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a382:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800a384:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 800a386:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a388:	e7fc      	b.n	800a384 <prvInsertTimerInActiveList+0x38>
 800a38a:	bf00      	nop
 800a38c:	2000097c 	.word	0x2000097c
 800a390:	20000978 	.word	0x20000978

0800a394 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a394:	b530      	push	{r4, r5, lr}
 800a396:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a398:	f000 fabc 	bl	800a914 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a39c:	4b11      	ldr	r3, [pc, #68]	; (800a3e4 <prvCheckForValidListAndQueue+0x50>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	b11b      	cbz	r3, 800a3aa <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3a2:	f000 fad9 	bl	800a958 <vPortExitCritical>
}
 800a3a6:	b003      	add	sp, #12
 800a3a8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800a3aa:	4d0f      	ldr	r5, [pc, #60]	; (800a3e8 <prvCheckForValidListAndQueue+0x54>)
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f7fe fb40 	bl	8008a32 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a3b2:	4c0e      	ldr	r4, [pc, #56]	; (800a3ec <prvCheckForValidListAndQueue+0x58>)
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f7fe fb3c 	bl	8008a32 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a3ba:	4b0d      	ldr	r3, [pc, #52]	; (800a3f0 <prvCheckForValidListAndQueue+0x5c>)
 800a3bc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a3be:	4b0d      	ldr	r3, [pc, #52]	; (800a3f4 <prvCheckForValidListAndQueue+0x60>)
 800a3c0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	4b0c      	ldr	r3, [pc, #48]	; (800a3f8 <prvCheckForValidListAndQueue+0x64>)
 800a3c8:	4a0c      	ldr	r2, [pc, #48]	; (800a3fc <prvCheckForValidListAndQueue+0x68>)
 800a3ca:	210c      	movs	r1, #12
 800a3cc:	200a      	movs	r0, #10
 800a3ce:	f7fe fc74 	bl	8008cba <xQueueGenericCreateStatic>
 800a3d2:	4b04      	ldr	r3, [pc, #16]	; (800a3e4 <prvCheckForValidListAndQueue+0x50>)
 800a3d4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d0e3      	beq.n	800a3a2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a3da:	4909      	ldr	r1, [pc, #36]	; (800a400 <prvCheckForValidListAndQueue+0x6c>)
 800a3dc:	f7fe ffa2 	bl	8009324 <vQueueAddToRegistry>
 800a3e0:	e7df      	b.n	800a3a2 <prvCheckForValidListAndQueue+0xe>
 800a3e2:	bf00      	nop
 800a3e4:	20000a74 	.word	0x20000a74
 800a3e8:	200009f8 	.word	0x200009f8
 800a3ec:	20000a0c 	.word	0x20000a0c
 800a3f0:	20000978 	.word	0x20000978
 800a3f4:	2000097c 	.word	0x2000097c
 800a3f8:	20000a24 	.word	0x20000a24
 800a3fc:	20000980 	.word	0x20000980
 800a400:	0800c9fc 	.word	0x0800c9fc

0800a404 <prvInitialiseNewTimer>:
{
 800a404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a408:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a40a:	b941      	cbnz	r1, 800a41e <prvInitialiseNewTimer+0x1a>
 800a40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	e7fe      	b.n	800a41c <prvInitialiseNewTimer+0x18>
 800a41e:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
 800a420:	b1a4      	cbz	r4, 800a44c <prvInitialiseNewTimer+0x48>
 800a422:	461e      	mov	r6, r3
 800a424:	4615      	mov	r5, r2
 800a426:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
 800a428:	f7ff ffb4 	bl	800a394 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 800a42c:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a430:	61a7      	str	r7, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a432:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a434:	9b06      	ldr	r3, [sp, #24]
 800a436:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a438:	1d20      	adds	r0, r4, #4
 800a43a:	f7fe fb05 	bl	8008a48 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a43e:	b12d      	cbz	r5, 800a44c <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a440:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a444:	f043 0304 	orr.w	r3, r3, #4
 800a448:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 800a44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a450 <xTimerCreateTimerTask>:
{
 800a450:	b510      	push	{r4, lr}
 800a452:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a454:	f7ff ff9e 	bl	800a394 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a458:	4b12      	ldr	r3, [pc, #72]	; (800a4a4 <xTimerCreateTimerTask+0x54>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	b1cb      	cbz	r3, 800a492 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a45e:	2400      	movs	r4, #0
 800a460:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a462:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a464:	aa07      	add	r2, sp, #28
 800a466:	a906      	add	r1, sp, #24
 800a468:	a805      	add	r0, sp, #20
 800a46a:	f7f9 fb3f 	bl	8003aec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a46e:	9b05      	ldr	r3, [sp, #20]
 800a470:	9302      	str	r3, [sp, #8]
 800a472:	9b06      	ldr	r3, [sp, #24]
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	2302      	movs	r3, #2
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	4623      	mov	r3, r4
 800a47c:	9a07      	ldr	r2, [sp, #28]
 800a47e:	490a      	ldr	r1, [pc, #40]	; (800a4a8 <xTimerCreateTimerTask+0x58>)
 800a480:	480a      	ldr	r0, [pc, #40]	; (800a4ac <xTimerCreateTimerTask+0x5c>)
 800a482:	f7ff f91f 	bl	80096c4 <xTaskCreateStatic>
 800a486:	4b0a      	ldr	r3, [pc, #40]	; (800a4b0 <xTimerCreateTimerTask+0x60>)
 800a488:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a48a:	b110      	cbz	r0, 800a492 <xTimerCreateTimerTask+0x42>
}
 800a48c:	2001      	movs	r0, #1
 800a48e:	b008      	add	sp, #32
 800a490:	bd10      	pop	{r4, pc}
 800a492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	e7fe      	b.n	800a4a2 <xTimerCreateTimerTask+0x52>
 800a4a4:	20000a74 	.word	0x20000a74
 800a4a8:	0800ca04 	.word	0x0800ca04
 800a4ac:	0800a82d 	.word	0x0800a82d
 800a4b0:	20000a78 	.word	0x20000a78

0800a4b4 <xTimerCreate>:
	{
 800a4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	460e      	mov	r6, r1
 800a4be:	4617      	mov	r7, r2
 800a4c0:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a4c2:	202c      	movs	r0, #44	; 0x2c
 800a4c4:	f000 fbdc 	bl	800ac80 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	b158      	cbz	r0, 800a4e4 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a4d2:	9001      	str	r0, [sp, #4]
 800a4d4:	9b08      	ldr	r3, [sp, #32]
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	4643      	mov	r3, r8
 800a4da:	463a      	mov	r2, r7
 800a4dc:	4631      	mov	r1, r6
 800a4de:	4628      	mov	r0, r5
 800a4e0:	f7ff ff90 	bl	800a404 <prvInitialiseNewTimer>
	}
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	b002      	add	sp, #8
 800a4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a4ec <xTimerCreateStatic>:
	{
 800a4ec:	b530      	push	{r4, r5, lr}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a4f2:	252c      	movs	r5, #44	; 0x2c
 800a4f4:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a4f6:	9d03      	ldr	r5, [sp, #12]
 800a4f8:	2d2c      	cmp	r5, #44	; 0x2c
 800a4fa:	d008      	beq.n	800a50e <xTimerCreateStatic+0x22>
 800a4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a500:	f383 8811 	msr	BASEPRI, r3
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	f3bf 8f4f 	dsb	sy
 800a50c:	e7fe      	b.n	800a50c <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a50e:	9d03      	ldr	r5, [sp, #12]
		configASSERT( pxTimerBuffer );
 800a510:	b944      	cbnz	r4, 800a524 <xTimerCreateStatic+0x38>
 800a512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	e7fe      	b.n	800a522 <xTimerCreateStatic+0x36>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a524:	2502      	movs	r5, #2
 800a526:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a52a:	9401      	str	r4, [sp, #4]
 800a52c:	9d08      	ldr	r5, [sp, #32]
 800a52e:	9500      	str	r5, [sp, #0]
 800a530:	f7ff ff68 	bl	800a404 <prvInitialiseNewTimer>
	}
 800a534:	4620      	mov	r0, r4
 800a536:	b005      	add	sp, #20
 800a538:	bd30      	pop	{r4, r5, pc}
	...

0800a53c <xTimerGenericCommand>:
	configASSERT( xTimer );
 800a53c:	b1c8      	cbz	r0, 800a572 <xTimerGenericCommand+0x36>
{
 800a53e:	b530      	push	{r4, r5, lr}
 800a540:	b085      	sub	sp, #20
 800a542:	4615      	mov	r5, r2
 800a544:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 800a546:	4a17      	ldr	r2, [pc, #92]	; (800a5a4 <xTimerGenericCommand+0x68>)
 800a548:	6810      	ldr	r0, [r2, #0]
 800a54a:	b340      	cbz	r0, 800a59e <xTimerGenericCommand+0x62>
 800a54c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800a54e:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a550:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a552:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a554:	2905      	cmp	r1, #5
 800a556:	dc1d      	bgt.n	800a594 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a558:	f7ff fc2c 	bl	8009db4 <xTaskGetSchedulerState>
 800a55c:	2802      	cmp	r0, #2
 800a55e:	d011      	beq.n	800a584 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a560:	2300      	movs	r3, #0
 800a562:	461a      	mov	r2, r3
 800a564:	a901      	add	r1, sp, #4
 800a566:	480f      	ldr	r0, [pc, #60]	; (800a5a4 <xTimerGenericCommand+0x68>)
 800a568:	6800      	ldr	r0, [r0, #0]
 800a56a:	f7fe fc17 	bl	8008d9c <xQueueGenericSend>
}
 800a56e:	b005      	add	sp, #20
 800a570:	bd30      	pop	{r4, r5, pc}
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	e7fe      	b.n	800a582 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a584:	2300      	movs	r3, #0
 800a586:	9a08      	ldr	r2, [sp, #32]
 800a588:	a901      	add	r1, sp, #4
 800a58a:	4806      	ldr	r0, [pc, #24]	; (800a5a4 <xTimerGenericCommand+0x68>)
 800a58c:	6800      	ldr	r0, [r0, #0]
 800a58e:	f7fe fc05 	bl	8008d9c <xQueueGenericSend>
 800a592:	e7ec      	b.n	800a56e <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a594:	2300      	movs	r3, #0
 800a596:	a901      	add	r1, sp, #4
 800a598:	f7fe fce4 	bl	8008f64 <xQueueGenericSendFromISR>
 800a59c:	e7e7      	b.n	800a56e <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 800a59e:	2000      	movs	r0, #0
	return xReturn;
 800a5a0:	e7e5      	b.n	800a56e <xTimerGenericCommand+0x32>
 800a5a2:	bf00      	nop
 800a5a4:	20000a74 	.word	0x20000a74

0800a5a8 <prvSwitchTimerLists>:
{
 800a5a8:	b570      	push	{r4, r5, r6, lr}
 800a5aa:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5ac:	4b1b      	ldr	r3, [pc, #108]	; (800a61c <prvSwitchTimerLists+0x74>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	b362      	cbz	r2, 800a60e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b8:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5ba:	1d25      	adds	r5, r4, #4
 800a5bc:	4628      	mov	r0, r5
 800a5be:	f7fe fa6c 	bl	8008a9a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5c2:	6a23      	ldr	r3, [r4, #32]
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5c8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a5cc:	f013 0f04 	tst.w	r3, #4
 800a5d0:	d0ec      	beq.n	800a5ac <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a5d2:	69a3      	ldr	r3, [r4, #24]
 800a5d4:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800a5d6:	429e      	cmp	r6, r3
 800a5d8:	d207      	bcs.n	800a5ea <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a5da:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5dc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5de:	4629      	mov	r1, r5
 800a5e0:	4b0e      	ldr	r3, [pc, #56]	; (800a61c <prvSwitchTimerLists+0x74>)
 800a5e2:	6818      	ldr	r0, [r3, #0]
 800a5e4:	f7fe fa3f 	bl	8008a66 <vListInsert>
 800a5e8:	e7e0      	b.n	800a5ac <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	9100      	str	r1, [sp, #0]
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4632      	mov	r2, r6
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f7ff ffa2 	bl	800a53c <xTimerGenericCommand>
				configASSERT( xResult );
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d1d7      	bne.n	800a5ac <prvSwitchTimerLists+0x4>
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	e7fe      	b.n	800a60c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800a60e:	4a04      	ldr	r2, [pc, #16]	; (800a620 <prvSwitchTimerLists+0x78>)
 800a610:	6810      	ldr	r0, [r2, #0]
 800a612:	4902      	ldr	r1, [pc, #8]	; (800a61c <prvSwitchTimerLists+0x74>)
 800a614:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800a616:	6013      	str	r3, [r2, #0]
}
 800a618:	b002      	add	sp, #8
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	20000978 	.word	0x20000978
 800a620:	2000097c 	.word	0x2000097c

0800a624 <prvSampleTimeNow>:
{
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800a628:	f7ff f910 	bl	800984c <xTaskGetTickCount>
 800a62c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800a62e:	4b07      	ldr	r3, [pc, #28]	; (800a64c <prvSampleTimeNow+0x28>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4283      	cmp	r3, r0
 800a634:	d805      	bhi.n	800a642 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800a636:	2300      	movs	r3, #0
 800a638:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800a63a:	4b04      	ldr	r3, [pc, #16]	; (800a64c <prvSampleTimeNow+0x28>)
 800a63c:	601c      	str	r4, [r3, #0]
}
 800a63e:	4620      	mov	r0, r4
 800a640:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800a642:	f7ff ffb1 	bl	800a5a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a646:	2301      	movs	r3, #1
 800a648:	602b      	str	r3, [r5, #0]
 800a64a:	e7f6      	b.n	800a63a <prvSampleTimeNow+0x16>
 800a64c:	20000a20 	.word	0x20000a20

0800a650 <prvProcessExpiredTimer>:
{
 800a650:	b570      	push	{r4, r5, r6, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	4605      	mov	r5, r0
 800a656:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a658:	4b17      	ldr	r3, [pc, #92]	; (800a6b8 <prvProcessExpiredTimer+0x68>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a660:	1d20      	adds	r0, r4, #4
 800a662:	f7fe fa1a 	bl	8008a9a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a666:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a66a:	f013 0f04 	tst.w	r3, #4
 800a66e:	d108      	bne.n	800a682 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a670:	f023 0301 	bic.w	r3, r3, #1
 800a674:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a678:	6a23      	ldr	r3, [r4, #32]
 800a67a:	4620      	mov	r0, r4
 800a67c:	4798      	blx	r3
}
 800a67e:	b002      	add	sp, #8
 800a680:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a682:	69a1      	ldr	r1, [r4, #24]
 800a684:	462b      	mov	r3, r5
 800a686:	4632      	mov	r2, r6
 800a688:	4429      	add	r1, r5
 800a68a:	4620      	mov	r0, r4
 800a68c:	f7ff fe5e 	bl	800a34c <prvInsertTimerInActiveList>
 800a690:	2800      	cmp	r0, #0
 800a692:	d0f1      	beq.n	800a678 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a694:	2100      	movs	r1, #0
 800a696:	9100      	str	r1, [sp, #0]
 800a698:	460b      	mov	r3, r1
 800a69a:	462a      	mov	r2, r5
 800a69c:	4620      	mov	r0, r4
 800a69e:	f7ff ff4d 	bl	800a53c <xTimerGenericCommand>
			configASSERT( xResult );
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d1e8      	bne.n	800a678 <prvProcessExpiredTimer+0x28>
 800a6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	e7fe      	b.n	800a6b6 <prvProcessExpiredTimer+0x66>
 800a6b8:	20000978 	.word	0x20000978

0800a6bc <prvProcessTimerOrBlockTask>:
{
 800a6bc:	b570      	push	{r4, r5, r6, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	4606      	mov	r6, r0
 800a6c2:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800a6c4:	f7ff f8ba 	bl	800983c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6c8:	a801      	add	r0, sp, #4
 800a6ca:	f7ff ffab 	bl	800a624 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a6ce:	9b01      	ldr	r3, [sp, #4]
 800a6d0:	bb23      	cbnz	r3, 800a71c <prvProcessTimerOrBlockTask+0x60>
 800a6d2:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a6d4:	b90c      	cbnz	r4, 800a6da <prvProcessTimerOrBlockTask+0x1e>
 800a6d6:	42b0      	cmp	r0, r6
 800a6d8:	d217      	bcs.n	800a70a <prvProcessTimerOrBlockTask+0x4e>
				if( xListWasEmpty != pdFALSE )
 800a6da:	b124      	cbz	r4, 800a6e6 <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a6dc:	4b11      	ldr	r3, [pc, #68]	; (800a724 <prvProcessTimerOrBlockTask+0x68>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	b9cb      	cbnz	r3, 800a718 <prvProcessTimerOrBlockTask+0x5c>
 800a6e4:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a6e6:	4622      	mov	r2, r4
 800a6e8:	1b71      	subs	r1, r6, r5
 800a6ea:	4b0f      	ldr	r3, [pc, #60]	; (800a728 <prvProcessTimerOrBlockTask+0x6c>)
 800a6ec:	6818      	ldr	r0, [r3, #0]
 800a6ee:	f7fe fe2d 	bl	800934c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a6f2:	f7ff f93d 	bl	8009970 <xTaskResumeAll>
 800a6f6:	b998      	cbnz	r0, 800a720 <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 800a6f8:	4b0c      	ldr	r3, [pc, #48]	; (800a72c <prvProcessTimerOrBlockTask+0x70>)
 800a6fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6fe:	601a      	str	r2, [r3, #0]
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	e00a      	b.n	800a720 <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
 800a70a:	f7ff f931 	bl	8009970 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a70e:	4629      	mov	r1, r5
 800a710:	4630      	mov	r0, r6
 800a712:	f7ff ff9d 	bl	800a650 <prvProcessExpiredTimer>
 800a716:	e003      	b.n	800a720 <prvProcessTimerOrBlockTask+0x64>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a718:	2400      	movs	r4, #0
 800a71a:	e7e4      	b.n	800a6e6 <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 800a71c:	f7ff f928 	bl	8009970 <xTaskResumeAll>
}
 800a720:	b002      	add	sp, #8
 800a722:	bd70      	pop	{r4, r5, r6, pc}
 800a724:	2000097c 	.word	0x2000097c
 800a728:	20000a74 	.word	0x20000a74
 800a72c:	e000ed04 	.word	0xe000ed04

0800a730 <prvProcessReceivedCommands>:
{
 800a730:	b530      	push	{r4, r5, lr}
 800a732:	b087      	sub	sp, #28
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a734:	2200      	movs	r2, #0
 800a736:	a903      	add	r1, sp, #12
 800a738:	4b3b      	ldr	r3, [pc, #236]	; (800a828 <prvProcessReceivedCommands+0xf8>)
 800a73a:	6818      	ldr	r0, [r3, #0]
 800a73c:	f7fe fc78 	bl	8009030 <xQueueReceive>
 800a740:	2800      	cmp	r0, #0
 800a742:	d06f      	beq.n	800a824 <prvProcessReceivedCommands+0xf4>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a744:	9b03      	ldr	r3, [sp, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	dbf4      	blt.n	800a734 <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a74a:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a74c:	6963      	ldr	r3, [r4, #20]
 800a74e:	b113      	cbz	r3, 800a756 <prvProcessReceivedCommands+0x26>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a750:	1d20      	adds	r0, r4, #4
 800a752:	f7fe f9a2 	bl	8008a9a <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a756:	a802      	add	r0, sp, #8
 800a758:	f7ff ff64 	bl	800a624 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	2b09      	cmp	r3, #9
 800a760:	d8e8      	bhi.n	800a734 <prvProcessReceivedCommands+0x4>
 800a762:	e8df f003 	tbb	[pc, r3]
 800a766:	0505      	.short	0x0505
 800a768:	51383105 	.word	0x51383105
 800a76c:	38310505 	.word	0x38310505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a770:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a774:	f043 0301 	orr.w	r3, r3, #1
 800a778:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a77c:	9904      	ldr	r1, [sp, #16]
 800a77e:	69a5      	ldr	r5, [r4, #24]
 800a780:	460b      	mov	r3, r1
 800a782:	4602      	mov	r2, r0
 800a784:	4429      	add	r1, r5
 800a786:	4620      	mov	r0, r4
 800a788:	f7ff fde0 	bl	800a34c <prvInsertTimerInActiveList>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d0d1      	beq.n	800a734 <prvProcessReceivedCommands+0x4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a790:	6a23      	ldr	r3, [r4, #32]
 800a792:	4620      	mov	r0, r4
 800a794:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a796:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a79a:	f013 0f04 	tst.w	r3, #4
 800a79e:	d0c9      	beq.n	800a734 <prvProcessReceivedCommands+0x4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a7a0:	69a2      	ldr	r2, [r4, #24]
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	9100      	str	r1, [sp, #0]
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	9804      	ldr	r0, [sp, #16]
 800a7aa:	4402      	add	r2, r0
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	f7ff fec5 	bl	800a53c <xTimerGenericCommand>
							configASSERT( xResult );
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d1be      	bne.n	800a734 <prvProcessReceivedCommands+0x4>
 800a7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ba:	f383 8811 	msr	BASEPRI, r3
 800a7be:	f3bf 8f6f 	isb	sy
 800a7c2:	f3bf 8f4f 	dsb	sy
 800a7c6:	e7fe      	b.n	800a7c6 <prvProcessReceivedCommands+0x96>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7c8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a7cc:	f023 0301 	bic.w	r3, r3, #1
 800a7d0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800a7d4:	e7ae      	b.n	800a734 <prvProcessReceivedCommands+0x4>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7d6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a7da:	f043 0301 	orr.w	r3, r3, #1
 800a7de:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a7e2:	9904      	ldr	r1, [sp, #16]
 800a7e4:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a7e6:	b131      	cbz	r1, 800a7f6 <prvProcessReceivedCommands+0xc6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	4401      	add	r1, r0
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f7ff fdac 	bl	800a34c <prvInsertTimerInActiveList>
					break;
 800a7f4:	e79e      	b.n	800a734 <prvProcessReceivedCommands+0x4>
 800a7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	e7fe      	b.n	800a806 <prvProcessReceivedCommands+0xd6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a808:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a80c:	f013 0f02 	tst.w	r3, #2
 800a810:	d004      	beq.n	800a81c <prvProcessReceivedCommands+0xec>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a812:	f023 0301 	bic.w	r3, r3, #1
 800a816:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a81a:	e78b      	b.n	800a734 <prvProcessReceivedCommands+0x4>
							vPortFree( pxTimer );
 800a81c:	4620      	mov	r0, r4
 800a81e:	f000 fab3 	bl	800ad88 <vPortFree>
 800a822:	e787      	b.n	800a734 <prvProcessReceivedCommands+0x4>
}
 800a824:	b007      	add	sp, #28
 800a826:	bd30      	pop	{r4, r5, pc}
 800a828:	20000a74 	.word	0x20000a74

0800a82c <prvTimerTask>:
{
 800a82c:	b500      	push	{lr}
 800a82e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a830:	a801      	add	r0, sp, #4
 800a832:	f7ff fd7b 	bl	800a32c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a836:	9901      	ldr	r1, [sp, #4]
 800a838:	f7ff ff40 	bl	800a6bc <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800a83c:	f7ff ff78 	bl	800a730 <prvProcessReceivedCommands>
 800a840:	e7f6      	b.n	800a830 <prvTimerTask+0x4>
	...

0800a844 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a844:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a84a:	4b0d      	ldr	r3, [pc, #52]	; (800a880 <prvTaskExitError+0x3c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a852:	d008      	beq.n	800a866 <prvTaskExitError+0x22>
 800a854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	e7fe      	b.n	800a864 <prvTaskExitError+0x20>
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a876:	9b01      	ldr	r3, [sp, #4]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d0fc      	beq.n	800a876 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a87c:	b002      	add	sp, #8
 800a87e:	4770      	bx	lr
 800a880:	20000044 	.word	0x20000044

0800a884 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a884:	4808      	ldr	r0, [pc, #32]	; (800a8a8 <prvPortStartFirstTask+0x24>)
 800a886:	6800      	ldr	r0, [r0, #0]
 800a888:	6800      	ldr	r0, [r0, #0]
 800a88a:	f380 8808 	msr	MSP, r0
 800a88e:	f04f 0000 	mov.w	r0, #0
 800a892:	f380 8814 	msr	CONTROL, r0
 800a896:	b662      	cpsie	i
 800a898:	b661      	cpsie	f
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	df00      	svc	0
 800a8a4:	bf00      	nop
 800a8a6:	0000      	.short	0x0000
 800a8a8:	e000ed08 	.word	0xe000ed08

0800a8ac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a8ac:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a8bc <vPortEnableVFP+0x10>
 800a8b0:	6801      	ldr	r1, [r0, #0]
 800a8b2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a8b6:	6001      	str	r1, [r0, #0]
 800a8b8:	4770      	bx	lr
 800a8ba:	0000      	.short	0x0000
 800a8bc:	e000ed88 	.word	0xe000ed88

0800a8c0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a8c4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a8c8:	f021 0101 	bic.w	r1, r1, #1
 800a8cc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a8d0:	4b05      	ldr	r3, [pc, #20]	; (800a8e8 <pxPortInitialiseStack+0x28>)
 800a8d2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a8d6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a8da:	f06f 0302 	mvn.w	r3, #2
 800a8de:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800a8e2:	3844      	subs	r0, #68	; 0x44
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	0800a845 	.word	0x0800a845
 800a8ec:	00000000 	.word	0x00000000

0800a8f0 <SVC_Handler>:
	__asm volatile (
 800a8f0:	4b07      	ldr	r3, [pc, #28]	; (800a910 <pxCurrentTCBConst2>)
 800a8f2:	6819      	ldr	r1, [r3, #0]
 800a8f4:	6808      	ldr	r0, [r1, #0]
 800a8f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fa:	f380 8809 	msr	PSP, r0
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f04f 0000 	mov.w	r0, #0
 800a906:	f380 8811 	msr	BASEPRI, r0
 800a90a:	4770      	bx	lr
 800a90c:	f3af 8000 	nop.w

0800a910 <pxCurrentTCBConst2>:
 800a910:	2000084c 	.word	0x2000084c

0800a914 <vPortEnterCritical>:
 800a914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a918:	f383 8811 	msr	BASEPRI, r3
 800a91c:	f3bf 8f6f 	isb	sy
 800a920:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a924:	4a0a      	ldr	r2, [pc, #40]	; (800a950 <vPortEnterCritical+0x3c>)
 800a926:	6813      	ldr	r3, [r2, #0]
 800a928:	3301      	adds	r3, #1
 800a92a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d000      	beq.n	800a932 <vPortEnterCritical+0x1e>
}
 800a930:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a932:	4b08      	ldr	r3, [pc, #32]	; (800a954 <vPortEnterCritical+0x40>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a93a:	d0f9      	beq.n	800a930 <vPortEnterCritical+0x1c>
 800a93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	e7fe      	b.n	800a94c <vPortEnterCritical+0x38>
 800a94e:	bf00      	nop
 800a950:	20000044 	.word	0x20000044
 800a954:	e000ed04 	.word	0xe000ed04

0800a958 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a958:	4b09      	ldr	r3, [pc, #36]	; (800a980 <vPortExitCritical+0x28>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	b943      	cbnz	r3, 800a970 <vPortExitCritical+0x18>
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	e7fe      	b.n	800a96e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a970:	3b01      	subs	r3, #1
 800a972:	4a03      	ldr	r2, [pc, #12]	; (800a980 <vPortExitCritical+0x28>)
 800a974:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a976:	b90b      	cbnz	r3, 800a97c <vPortExitCritical+0x24>
	__asm volatile
 800a978:	f383 8811 	msr	BASEPRI, r3
}
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	20000044 	.word	0x20000044
	...

0800a990 <PendSV_Handler>:
	__asm volatile
 800a990:	f3ef 8009 	mrs	r0, PSP
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	4b15      	ldr	r3, [pc, #84]	; (800a9f0 <pxCurrentTCBConst>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	f01e 0f10 	tst.w	lr, #16
 800a9a0:	bf08      	it	eq
 800a9a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9aa:	6010      	str	r0, [r2, #0]
 800a9ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9b4:	f380 8811 	msr	BASEPRI, r0
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f7ff f8c8 	bl	8009b54 <vTaskSwitchContext>
 800a9c4:	f04f 0000 	mov.w	r0, #0
 800a9c8:	f380 8811 	msr	BASEPRI, r0
 800a9cc:	bc09      	pop	{r0, r3}
 800a9ce:	6819      	ldr	r1, [r3, #0]
 800a9d0:	6808      	ldr	r0, [r1, #0]
 800a9d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d6:	f01e 0f10 	tst.w	lr, #16
 800a9da:	bf08      	it	eq
 800a9dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9e0:	f380 8809 	msr	PSP, r0
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	f3af 8000 	nop.w

0800a9f0 <pxCurrentTCBConst>:
 800a9f0:	2000084c 	.word	0x2000084c

0800a9f4 <SysTick_Handler>:
{
 800a9f4:	b508      	push	{r3, lr}
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800aa06:	f7fe ff27 	bl	8009858 <xTaskIncrementTick>
 800aa0a:	b118      	cbz	r0, 800aa14 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa0c:	4b03      	ldr	r3, [pc, #12]	; (800aa1c <SysTick_Handler+0x28>)
 800aa0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa12:	601a      	str	r2, [r3, #0]
	__asm volatile
 800aa14:	2300      	movs	r3, #0
 800aa16:	f383 8811 	msr	BASEPRI, r3
}
 800aa1a:	bd08      	pop	{r3, pc}
 800aa1c:	e000ed04 	.word	0xe000ed04

0800aa20 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa20:	4a08      	ldr	r2, [pc, #32]	; (800aa44 <vPortSetupTimerInterrupt+0x24>)
 800aa22:	2300      	movs	r3, #0
 800aa24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa26:	4908      	ldr	r1, [pc, #32]	; (800aa48 <vPortSetupTimerInterrupt+0x28>)
 800aa28:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa2a:	4b08      	ldr	r3, [pc, #32]	; (800aa4c <vPortSetupTimerInterrupt+0x2c>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4908      	ldr	r1, [pc, #32]	; (800aa50 <vPortSetupTimerInterrupt+0x30>)
 800aa30:	fba1 1303 	umull	r1, r3, r1, r3
 800aa34:	099b      	lsrs	r3, r3, #6
 800aa36:	3b01      	subs	r3, #1
 800aa38:	4906      	ldr	r1, [pc, #24]	; (800aa54 <vPortSetupTimerInterrupt+0x34>)
 800aa3a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa3c:	2307      	movs	r3, #7
 800aa3e:	6013      	str	r3, [r2, #0]
}
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	e000e010 	.word	0xe000e010
 800aa48:	e000e018 	.word	0xe000e018
 800aa4c:	20000038 	.word	0x20000038
 800aa50:	10624dd3 	.word	0x10624dd3
 800aa54:	e000e014 	.word	0xe000e014

0800aa58 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa58:	4b3a      	ldr	r3, [pc, #232]	; (800ab44 <xPortStartScheduler+0xec>)
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	4b3a      	ldr	r3, [pc, #232]	; (800ab48 <xPortStartScheduler+0xf0>)
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d00d      	beq.n	800aa7e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa62:	4b38      	ldr	r3, [pc, #224]	; (800ab44 <xPortStartScheduler+0xec>)
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	4b39      	ldr	r3, [pc, #228]	; (800ab4c <xPortStartScheduler+0xf4>)
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d111      	bne.n	800aa90 <xPortStartScheduler+0x38>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	e7fe      	b.n	800aa7c <xPortStartScheduler+0x24>
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	e7fe      	b.n	800aa8e <xPortStartScheduler+0x36>
{
 800aa90:	b510      	push	{r4, lr}
 800aa92:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa94:	4b2e      	ldr	r3, [pc, #184]	; (800ab50 <xPortStartScheduler+0xf8>)
 800aa96:	781a      	ldrb	r2, [r3, #0]
 800aa98:	b2d2      	uxtb	r2, r2
 800aa9a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa9c:	22ff      	movs	r2, #255	; 0xff
 800aa9e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aaa8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800aaac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aab0:	4a28      	ldr	r2, [pc, #160]	; (800ab54 <xPortStartScheduler+0xfc>)
 800aab2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aab4:	4b28      	ldr	r3, [pc, #160]	; (800ab58 <xPortStartScheduler+0x100>)
 800aab6:	2207      	movs	r2, #7
 800aab8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaba:	e009      	b.n	800aad0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800aabc:	4a26      	ldr	r2, [pc, #152]	; (800ab58 <xPortStartScheduler+0x100>)
 800aabe:	6813      	ldr	r3, [r2, #0]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aac4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800aac8:	005b      	lsls	r3, r3, #1
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aad0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800aad4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aad8:	d1f0      	bne.n	800aabc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aada:	4b1f      	ldr	r3, [pc, #124]	; (800ab58 <xPortStartScheduler+0x100>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d008      	beq.n	800aaf4 <xPortStartScheduler+0x9c>
 800aae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae6:	f383 8811 	msr	BASEPRI, r3
 800aaea:	f3bf 8f6f 	isb	sy
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	e7fe      	b.n	800aaf2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aaf4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aaf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aafa:	4a17      	ldr	r2, [pc, #92]	; (800ab58 <xPortStartScheduler+0x100>)
 800aafc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aafe:	9b01      	ldr	r3, [sp, #4]
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	4a13      	ldr	r2, [pc, #76]	; (800ab50 <xPortStartScheduler+0xf8>)
 800ab04:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab06:	4b15      	ldr	r3, [pc, #84]	; (800ab5c <xPortStartScheduler+0x104>)
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800ab0e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800ab16:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800ab18:	f7ff ff82 	bl	800aa20 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800ab1c:	2400      	movs	r4, #0
 800ab1e:	4b10      	ldr	r3, [pc, #64]	; (800ab60 <xPortStartScheduler+0x108>)
 800ab20:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800ab22:	f7ff fec3 	bl	800a8ac <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab26:	4a0f      	ldr	r2, [pc, #60]	; (800ab64 <xPortStartScheduler+0x10c>)
 800ab28:	6813      	ldr	r3, [r2, #0]
 800ab2a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab2e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800ab30:	f7ff fea8 	bl	800a884 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800ab34:	f7ff f80e 	bl	8009b54 <vTaskSwitchContext>
	prvTaskExitError();
 800ab38:	f7ff fe84 	bl	800a844 <prvTaskExitError>
}
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	b002      	add	sp, #8
 800ab40:	bd10      	pop	{r4, pc}
 800ab42:	bf00      	nop
 800ab44:	e000ed00 	.word	0xe000ed00
 800ab48:	410fc271 	.word	0x410fc271
 800ab4c:	410fc270 	.word	0x410fc270
 800ab50:	e000e400 	.word	0xe000e400
 800ab54:	20000a7c 	.word	0x20000a7c
 800ab58:	20000a80 	.word	0x20000a80
 800ab5c:	e000ed20 	.word	0xe000ed20
 800ab60:	20000044 	.word	0x20000044
 800ab64:	e000ef34 	.word	0xe000ef34

0800ab68 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab68:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab6c:	2b0f      	cmp	r3, #15
 800ab6e:	d90f      	bls.n	800ab90 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab70:	4a10      	ldr	r2, [pc, #64]	; (800abb4 <vPortValidateInterruptPriority+0x4c>)
 800ab72:	5c9b      	ldrb	r3, [r3, r2]
 800ab74:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab76:	4a10      	ldr	r2, [pc, #64]	; (800abb8 <vPortValidateInterruptPriority+0x50>)
 800ab78:	7812      	ldrb	r2, [r2, #0]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d908      	bls.n	800ab90 <vPortValidateInterruptPriority+0x28>
 800ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	e7fe      	b.n	800ab8e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab90:	4b0a      	ldr	r3, [pc, #40]	; (800abbc <vPortValidateInterruptPriority+0x54>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab98:	4a09      	ldr	r2, [pc, #36]	; (800abc0 <vPortValidateInterruptPriority+0x58>)
 800ab9a:	6812      	ldr	r2, [r2, #0]
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d908      	bls.n	800abb2 <vPortValidateInterruptPriority+0x4a>
 800aba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba4:	f383 8811 	msr	BASEPRI, r3
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	e7fe      	b.n	800abb0 <vPortValidateInterruptPriority+0x48>
	}
 800abb2:	4770      	bx	lr
 800abb4:	e000e3f0 	.word	0xe000e3f0
 800abb8:	20000a7c 	.word	0x20000a7c
 800abbc:	e000ed0c 	.word	0xe000ed0c
 800abc0:	20000a80 	.word	0x20000a80

0800abc4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800abc4:	4a12      	ldr	r2, [pc, #72]	; (800ac10 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800abc6:	f012 0f07 	tst.w	r2, #7
 800abca:	d01e      	beq.n	800ac0a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800abcc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abce:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800abd2:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 800abd6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abd8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800abda:	480e      	ldr	r0, [pc, #56]	; (800ac14 <prvHeapInit+0x50>)
 800abdc:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800abde:	2100      	movs	r1, #0
 800abe0:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800abe2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800abe4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abe6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800abea:	480b      	ldr	r0, [pc, #44]	; (800ac18 <prvHeapInit+0x54>)
 800abec:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800abee:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abf0:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abf2:	1a99      	subs	r1, r3, r2
 800abf4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800abf6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abf8:	4b08      	ldr	r3, [pc, #32]	; (800ac1c <prvHeapInit+0x58>)
 800abfa:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abfc:	4b08      	ldr	r3, [pc, #32]	; (800ac20 <prvHeapInit+0x5c>)
 800abfe:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac00:	4b08      	ldr	r3, [pc, #32]	; (800ac24 <prvHeapInit+0x60>)
 800ac02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac06:	601a      	str	r2, [r3, #0]
}
 800ac08:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac0e:	e7e4      	b.n	800abda <prvHeapInit+0x16>
 800ac10:	20000a88 	.word	0x20000a88
 800ac14:	20002a94 	.word	0x20002a94
 800ac18:	20000a84 	.word	0x20000a84
 800ac1c:	20002a90 	.word	0x20002a90
 800ac20:	20002a8c 	.word	0x20002a8c
 800ac24:	20002a88 	.word	0x20002a88

0800ac28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac28:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac2a:	4b13      	ldr	r3, [pc, #76]	; (800ac78 <prvInsertBlockIntoFreeList+0x50>)
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	4282      	cmp	r2, r0
 800ac30:	d31b      	bcc.n	800ac6a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac32:	6859      	ldr	r1, [r3, #4]
 800ac34:	185c      	adds	r4, r3, r1
 800ac36:	4284      	cmp	r4, r0
 800ac38:	d103      	bne.n	800ac42 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac3a:	6840      	ldr	r0, [r0, #4]
 800ac3c:	4401      	add	r1, r0
 800ac3e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac40:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac42:	6841      	ldr	r1, [r0, #4]
 800ac44:	1844      	adds	r4, r0, r1
 800ac46:	42a2      	cmp	r2, r4
 800ac48:	d113      	bne.n	800ac72 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac4a:	4c0c      	ldr	r4, [pc, #48]	; (800ac7c <prvInsertBlockIntoFreeList+0x54>)
 800ac4c:	6824      	ldr	r4, [r4, #0]
 800ac4e:	42a2      	cmp	r2, r4
 800ac50:	d00d      	beq.n	800ac6e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac52:	6852      	ldr	r2, [r2, #4]
 800ac54:	4411      	add	r1, r2
 800ac56:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	6812      	ldr	r2, [r2, #0]
 800ac5c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac5e:	4298      	cmp	r0, r3
 800ac60:	d000      	beq.n	800ac64 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac62:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac68:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	e7de      	b.n	800ac2c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac6e:	6004      	str	r4, [r0, #0]
 800ac70:	e7f5      	b.n	800ac5e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac72:	6002      	str	r2, [r0, #0]
 800ac74:	e7f3      	b.n	800ac5e <prvInsertBlockIntoFreeList+0x36>
 800ac76:	bf00      	nop
 800ac78:	20002a94 	.word	0x20002a94
 800ac7c:	20000a84 	.word	0x20000a84

0800ac80 <pvPortMalloc>:
{
 800ac80:	b570      	push	{r4, r5, r6, lr}
 800ac82:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800ac84:	f7fe fdda 	bl	800983c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800ac88:	4b3a      	ldr	r3, [pc, #232]	; (800ad74 <pvPortMalloc+0xf4>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	b1bb      	cbz	r3, 800acbe <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac8e:	4b3a      	ldr	r3, [pc, #232]	; (800ad78 <pvPortMalloc+0xf8>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	421c      	tst	r4, r3
 800ac94:	d163      	bne.n	800ad5e <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 800ac96:	b1ac      	cbz	r4, 800acc4 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 800ac98:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac9a:	f014 0f07 	tst.w	r4, #7
 800ac9e:	d011      	beq.n	800acc4 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aca0:	f024 0407 	bic.w	r4, r4, #7
 800aca4:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aca6:	f004 0307 	and.w	r3, r4, #7
 800acaa:	b15b      	cbz	r3, 800acc4 <pvPortMalloc+0x44>
 800acac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	e7fe      	b.n	800acbc <pvPortMalloc+0x3c>
			prvHeapInit();
 800acbe:	f7ff ff81 	bl	800abc4 <prvHeapInit>
 800acc2:	e7e4      	b.n	800ac8e <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800acc4:	2c00      	cmp	r4, #0
 800acc6:	d04c      	beq.n	800ad62 <pvPortMalloc+0xe2>
 800acc8:	4b2c      	ldr	r3, [pc, #176]	; (800ad7c <pvPortMalloc+0xfc>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	42a3      	cmp	r3, r4
 800acce:	d34a      	bcc.n	800ad66 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 800acd0:	4b2b      	ldr	r3, [pc, #172]	; (800ad80 <pvPortMalloc+0x100>)
 800acd2:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acd4:	e001      	b.n	800acda <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 800acd6:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800acd8:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acda:	686a      	ldr	r2, [r5, #4]
 800acdc:	42a2      	cmp	r2, r4
 800acde:	d202      	bcs.n	800ace6 <pvPortMalloc+0x66>
 800ace0:	682a      	ldr	r2, [r5, #0]
 800ace2:	2a00      	cmp	r2, #0
 800ace4:	d1f7      	bne.n	800acd6 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 800ace6:	4a23      	ldr	r2, [pc, #140]	; (800ad74 <pvPortMalloc+0xf4>)
 800ace8:	6812      	ldr	r2, [r2, #0]
 800acea:	42aa      	cmp	r2, r5
 800acec:	d03d      	beq.n	800ad6a <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800acee:	681e      	ldr	r6, [r3, #0]
 800acf0:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800acf2:	682a      	ldr	r2, [r5, #0]
 800acf4:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acf6:	686b      	ldr	r3, [r5, #4]
 800acf8:	1b1b      	subs	r3, r3, r4
 800acfa:	2b10      	cmp	r3, #16
 800acfc:	d910      	bls.n	800ad20 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800acfe:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad00:	f010 0f07 	tst.w	r0, #7
 800ad04:	d008      	beq.n	800ad18 <pvPortMalloc+0x98>
 800ad06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	e7fe      	b.n	800ad16 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad18:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad1a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad1c:	f7ff ff84 	bl	800ac28 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad20:	686a      	ldr	r2, [r5, #4]
 800ad22:	4916      	ldr	r1, [pc, #88]	; (800ad7c <pvPortMalloc+0xfc>)
 800ad24:	680b      	ldr	r3, [r1, #0]
 800ad26:	1a9b      	subs	r3, r3, r2
 800ad28:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad2a:	4916      	ldr	r1, [pc, #88]	; (800ad84 <pvPortMalloc+0x104>)
 800ad2c:	6809      	ldr	r1, [r1, #0]
 800ad2e:	428b      	cmp	r3, r1
 800ad30:	d201      	bcs.n	800ad36 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad32:	4914      	ldr	r1, [pc, #80]	; (800ad84 <pvPortMalloc+0x104>)
 800ad34:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad36:	4b10      	ldr	r3, [pc, #64]	; (800ad78 <pvPortMalloc+0xf8>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800ad42:	f7fe fe15 	bl	8009970 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad46:	f016 0f07 	tst.w	r6, #7
 800ad4a:	d010      	beq.n	800ad6e <pvPortMalloc+0xee>
 800ad4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	e7fe      	b.n	800ad5c <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 800ad5e:	2600      	movs	r6, #0
 800ad60:	e7ef      	b.n	800ad42 <pvPortMalloc+0xc2>
 800ad62:	2600      	movs	r6, #0
 800ad64:	e7ed      	b.n	800ad42 <pvPortMalloc+0xc2>
 800ad66:	2600      	movs	r6, #0
 800ad68:	e7eb      	b.n	800ad42 <pvPortMalloc+0xc2>
 800ad6a:	2600      	movs	r6, #0
 800ad6c:	e7e9      	b.n	800ad42 <pvPortMalloc+0xc2>
}
 800ad6e:	4630      	mov	r0, r6
 800ad70:	bd70      	pop	{r4, r5, r6, pc}
 800ad72:	bf00      	nop
 800ad74:	20000a84 	.word	0x20000a84
 800ad78:	20002a88 	.word	0x20002a88
 800ad7c:	20002a8c 	.word	0x20002a8c
 800ad80:	20002a94 	.word	0x20002a94
 800ad84:	20002a90 	.word	0x20002a90

0800ad88 <vPortFree>:
	if( pv != NULL )
 800ad88:	b380      	cbz	r0, 800adec <vPortFree+0x64>
{
 800ad8a:	b538      	push	{r3, r4, r5, lr}
 800ad8c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800ad8e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad92:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ad96:	4916      	ldr	r1, [pc, #88]	; (800adf0 <vPortFree+0x68>)
 800ad98:	6809      	ldr	r1, [r1, #0]
 800ad9a:	420a      	tst	r2, r1
 800ad9c:	d108      	bne.n	800adb0 <vPortFree+0x28>
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	e7fe      	b.n	800adae <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800adb0:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800adb4:	b140      	cbz	r0, 800adc8 <vPortFree+0x40>
 800adb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adba:	f383 8811 	msr	BASEPRI, r3
 800adbe:	f3bf 8f6f 	isb	sy
 800adc2:	f3bf 8f4f 	dsb	sy
 800adc6:	e7fe      	b.n	800adc6 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800adc8:	ea22 0201 	bic.w	r2, r2, r1
 800adcc:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800add0:	f7fe fd34 	bl	800983c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800add4:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800add8:	4a06      	ldr	r2, [pc, #24]	; (800adf4 <vPortFree+0x6c>)
 800adda:	6813      	ldr	r3, [r2, #0]
 800addc:	440b      	add	r3, r1
 800adde:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ade0:	4628      	mov	r0, r5
 800ade2:	f7ff ff21 	bl	800ac28 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800ade6:	f7fe fdc3 	bl	8009970 <xTaskResumeAll>
}
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	20002a88 	.word	0x20002a88
 800adf4:	20002a8c 	.word	0x20002a8c

0800adf8 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 800adf8:	4603      	mov	r3, r0
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;
 800adfa:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800adfc:	4608      	mov	r0, r1

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800adfe:	e004      	b.n	800ae0a <prvGetNumberOfParameters+0x12>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800ae00:	b911      	cbnz	r1, 800ae08 <prvGetNumberOfParameters+0x10>
			{
				cParameters++;
 800ae02:	3001      	adds	r0, #1
 800ae04:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800ae06:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800ae08:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800ae0a:	781a      	ldrb	r2, [r3, #0]
 800ae0c:	b11a      	cbz	r2, 800ae16 <prvGetNumberOfParameters+0x1e>
		if( ( *pcCommandString ) == ' ' )
 800ae0e:	2a20      	cmp	r2, #32
 800ae10:	d0f6      	beq.n	800ae00 <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800ae12:	2100      	movs	r1, #0
 800ae14:	e7f8      	b.n	800ae08 <prvGetNumberOfParameters+0x10>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800ae16:	b901      	cbnz	r1, 800ae1a <prvGetNumberOfParameters+0x22>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800ae18:	4770      	bx	lr
		cParameters--;
 800ae1a:	3801      	subs	r0, #1
 800ae1c:	b240      	sxtb	r0, r0
 800ae1e:	e7fb      	b.n	800ae18 <prvGetNumberOfParameters+0x20>

0800ae20 <prvHelpCommand>:
{
 800ae20:	b538      	push	{r3, r4, r5, lr}
 800ae22:	460a      	mov	r2, r1
	if( pxCommand == NULL )
 800ae24:	4b09      	ldr	r3, [pc, #36]	; (800ae4c <prvHelpCommand+0x2c>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	b153      	cbz	r3, 800ae40 <prvHelpCommand+0x20>
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800ae2a:	4c08      	ldr	r4, [pc, #32]	; (800ae4c <prvHelpCommand+0x2c>)
 800ae2c:	6825      	ldr	r5, [r4, #0]
 800ae2e:	682b      	ldr	r3, [r5, #0]
 800ae30:	6859      	ldr	r1, [r3, #4]
 800ae32:	f000 fd23 	bl	800b87c <strncpy>
	pxCommand = pxCommand->pxNext;
 800ae36:	686b      	ldr	r3, [r5, #4]
 800ae38:	6023      	str	r3, [r4, #0]
	if( pxCommand == NULL )
 800ae3a:	b12b      	cbz	r3, 800ae48 <prvHelpCommand+0x28>
		xReturn = pdTRUE;
 800ae3c:	2001      	movs	r0, #1
}
 800ae3e:	bd38      	pop	{r3, r4, r5, pc}
		pxCommand = &xRegisteredCommands;
 800ae40:	4b02      	ldr	r3, [pc, #8]	; (800ae4c <prvHelpCommand+0x2c>)
 800ae42:	4903      	ldr	r1, [pc, #12]	; (800ae50 <prvHelpCommand+0x30>)
 800ae44:	6019      	str	r1, [r3, #0]
 800ae46:	e7f0      	b.n	800ae2a <prvHelpCommand+0xa>
		xReturn = pdFALSE;
 800ae48:	2000      	movs	r0, #0
 800ae4a:	e7f8      	b.n	800ae3e <prvHelpCommand+0x1e>
 800ae4c:	20002aa0 	.word	0x20002aa0
 800ae50:	2000004c 	.word	0x2000004c

0800ae54 <FreeRTOS_CLIRegisterCommand>:
{
 800ae54:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxCommandToRegister );
 800ae56:	b940      	cbnz	r0, 800ae6a <FreeRTOS_CLIRegisterCommand+0x16>
 800ae58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5c:	f383 8811 	msr	BASEPRI, r3
 800ae60:	f3bf 8f6f 	isb	sy
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	e7fe      	b.n	800ae68 <FreeRTOS_CLIRegisterCommand+0x14>
 800ae6a:	4605      	mov	r5, r0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800ae6c:	2008      	movs	r0, #8
 800ae6e:	f7ff ff07 	bl	800ac80 <pvPortMalloc>
	configASSERT( pxNewListItem );
 800ae72:	4604      	mov	r4, r0
 800ae74:	b940      	cbnz	r0, 800ae88 <FreeRTOS_CLIRegisterCommand+0x34>
 800ae76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7a:	f383 8811 	msr	BASEPRI, r3
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	e7fe      	b.n	800ae86 <FreeRTOS_CLIRegisterCommand+0x32>
		taskENTER_CRITICAL();
 800ae88:	f7ff fd44 	bl	800a914 <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800ae8c:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800ae92:	4b04      	ldr	r3, [pc, #16]	; (800aea4 <FreeRTOS_CLIRegisterCommand+0x50>)
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800ae98:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800ae9a:	f7ff fd5d 	bl	800a958 <vPortExitCritical>
}
 800ae9e:	2001      	movs	r0, #1
 800aea0:	bd38      	pop	{r3, r4, r5, pc}
 800aea2:	bf00      	nop
 800aea4:	20000048 	.word	0x20000048

0800aea8 <FreeRTOS_CLIProcessCommand>:
{
 800aea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeac:	4606      	mov	r6, r0
 800aeae:	4689      	mov	r9, r1
 800aeb0:	4690      	mov	r8, r2
	if( pxCommand == NULL )
 800aeb2:	4b2a      	ldr	r3, [pc, #168]	; (800af5c <FreeRTOS_CLIProcessCommand+0xb4>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	b1ab      	cbz	r3, 800aee4 <FreeRTOS_CLIProcessCommand+0x3c>
BaseType_t xReturn = pdTRUE;
 800aeb8:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800aeba:	4b28      	ldr	r3, [pc, #160]	; (800af5c <FreeRTOS_CLIProcessCommand+0xb4>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	b10b      	cbz	r3, 800aec4 <FreeRTOS_CLIProcessCommand+0x1c>
 800aec0:	2c00      	cmp	r4, #0
 800aec2:	d03b      	beq.n	800af3c <FreeRTOS_CLIProcessCommand+0x94>
	else if( pxCommand != NULL )
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d042      	beq.n	800af4e <FreeRTOS_CLIProcessCommand+0xa6>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	4632      	mov	r2, r6
 800aece:	4641      	mov	r1, r8
 800aed0:	4648      	mov	r0, r9
 800aed2:	4798      	blx	r3
		if( xReturn == pdFALSE )
 800aed4:	4604      	mov	r4, r0
 800aed6:	b910      	cbnz	r0, 800aede <FreeRTOS_CLIProcessCommand+0x36>
			pxCommand = NULL;
 800aed8:	4b20      	ldr	r3, [pc, #128]	; (800af5c <FreeRTOS_CLIProcessCommand+0xb4>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	601a      	str	r2, [r3, #0]
}
 800aede:	4620      	mov	r0, r4
 800aee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800aee4:	4b1d      	ldr	r3, [pc, #116]	; (800af5c <FreeRTOS_CLIProcessCommand+0xb4>)
 800aee6:	4a1e      	ldr	r2, [pc, #120]	; (800af60 <FreeRTOS_CLIProcessCommand+0xb8>)
 800aee8:	601a      	str	r2, [r3, #0]
 800aeea:	e008      	b.n	800aefe <FreeRTOS_CLIProcessCommand+0x56>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800aeec:	4602      	mov	r2, r0
 800aeee:	4629      	mov	r1, r5
 800aef0:	4630      	mov	r0, r6
 800aef2:	f000 fcb1 	bl	800b858 <strncmp>
 800aef6:	b180      	cbz	r0, 800af1a <FreeRTOS_CLIProcessCommand+0x72>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800aef8:	6862      	ldr	r2, [r4, #4]
 800aefa:	4b18      	ldr	r3, [pc, #96]	; (800af5c <FreeRTOS_CLIProcessCommand+0xb4>)
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	4b17      	ldr	r3, [pc, #92]	; (800af5c <FreeRTOS_CLIProcessCommand+0xb4>)
 800af00:	681c      	ldr	r4, [r3, #0]
 800af02:	b1cc      	cbz	r4, 800af38 <FreeRTOS_CLIProcessCommand+0x90>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800af04:	6827      	ldr	r7, [r4, #0]
 800af06:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 800af08:	4628      	mov	r0, r5
 800af0a:	f7f5 f969 	bl	80001e0 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800af0e:	5c33      	ldrb	r3, [r6, r0]
 800af10:	2b20      	cmp	r3, #32
 800af12:	d0eb      	beq.n	800aeec <FreeRTOS_CLIProcessCommand+0x44>
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1ef      	bne.n	800aef8 <FreeRTOS_CLIProcessCommand+0x50>
 800af18:	e7e8      	b.n	800aeec <FreeRTOS_CLIProcessCommand+0x44>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800af1a:	f997 400c 	ldrsb.w	r4, [r7, #12]
 800af1e:	2c00      	cmp	r4, #0
 800af20:	da01      	bge.n	800af26 <FreeRTOS_CLIProcessCommand+0x7e>
BaseType_t xReturn = pdTRUE;
 800af22:	2401      	movs	r4, #1
 800af24:	e7c9      	b.n	800aeba <FreeRTOS_CLIProcessCommand+0x12>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800af26:	4630      	mov	r0, r6
 800af28:	f7ff ff66 	bl	800adf8 <prvGetNumberOfParameters>
 800af2c:	4284      	cmp	r4, r0
 800af2e:	d001      	beq.n	800af34 <FreeRTOS_CLIProcessCommand+0x8c>
							xReturn = pdFALSE;
 800af30:	2400      	movs	r4, #0
 800af32:	e7c2      	b.n	800aeba <FreeRTOS_CLIProcessCommand+0x12>
BaseType_t xReturn = pdTRUE;
 800af34:	2401      	movs	r4, #1
 800af36:	e7c0      	b.n	800aeba <FreeRTOS_CLIProcessCommand+0x12>
 800af38:	2401      	movs	r4, #1
 800af3a:	e7be      	b.n	800aeba <FreeRTOS_CLIProcessCommand+0x12>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800af3c:	4642      	mov	r2, r8
 800af3e:	4909      	ldr	r1, [pc, #36]	; (800af64 <FreeRTOS_CLIProcessCommand+0xbc>)
 800af40:	4648      	mov	r0, r9
 800af42:	f000 fc9b 	bl	800b87c <strncpy>
		pxCommand = NULL;
 800af46:	4b05      	ldr	r3, [pc, #20]	; (800af5c <FreeRTOS_CLIProcessCommand+0xb4>)
 800af48:	2200      	movs	r2, #0
 800af4a:	601a      	str	r2, [r3, #0]
 800af4c:	e7c7      	b.n	800aede <FreeRTOS_CLIProcessCommand+0x36>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800af4e:	4642      	mov	r2, r8
 800af50:	4905      	ldr	r1, [pc, #20]	; (800af68 <FreeRTOS_CLIProcessCommand+0xc0>)
 800af52:	4648      	mov	r0, r9
 800af54:	f000 fc92 	bl	800b87c <strncpy>
		xReturn = pdFALSE;
 800af58:	2400      	movs	r4, #0
	return xReturn;
 800af5a:	e7c0      	b.n	800aede <FreeRTOS_CLIProcessCommand+0x36>
 800af5c:	20002a9c 	.word	0x20002a9c
 800af60:	2000004c 	.word	0x2000004c
 800af64:	0800ca0c 	.word	0x0800ca0c
 800af68:	0800ca64 	.word	0x0800ca64

0800af6c <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d200      	bcs.n	800af72 <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 800af70:	5488      	strb	r0, [r1, r2]
  }
}
 800af72:	4770      	bx	lr

0800af74 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800af74:	4770      	bx	lr

0800af76 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
 800af76:	2300      	movs	r3, #0
  while (_is_digit(**str)) {
 800af78:	e007      	b.n	800af8a <_atoi+0x14>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800af7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800af7e:	005a      	lsls	r2, r3, #1
 800af80:	1c4b      	adds	r3, r1, #1
 800af82:	6003      	str	r3, [r0, #0]
 800af84:	780b      	ldrb	r3, [r1, #0]
 800af86:	4413      	add	r3, r2
 800af88:	3b30      	subs	r3, #48	; 0x30
  while (_is_digit(**str)) {
 800af8a:	6801      	ldr	r1, [r0, #0]
 800af8c:	780a      	ldrb	r2, [r1, #0]
  return (ch >= '0') && (ch <= '9');
 800af8e:	3a30      	subs	r2, #48	; 0x30
 800af90:	b2d2      	uxtb	r2, r2
  while (_is_digit(**str)) {
 800af92:	2a09      	cmp	r2, #9
 800af94:	d9f1      	bls.n	800af7a <_atoi+0x4>
  }
  return i;
}
 800af96:	4618      	mov	r0, r3
 800af98:	4770      	bx	lr

0800af9a <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800af9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af9e:	b083      	sub	sp, #12
 800afa0:	4605      	mov	r5, r0
 800afa2:	9101      	str	r1, [sp, #4]
 800afa4:	4693      	mov	fp, r2
 800afa6:	461e      	mov	r6, r3
 800afa8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800afac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800afae:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800afb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afb4:	f013 0f03 	tst.w	r3, #3
 800afb8:	d114      	bne.n	800afe4 <_out_rev+0x4a>
    for (size_t i = len; i < width; i++) {
 800afba:	4627      	mov	r7, r4
 800afbc:	e007      	b.n	800afce <_out_rev+0x34>
      out(' ', buffer, idx++, maxlen);
 800afbe:	f102 0a01 	add.w	sl, r2, #1
 800afc2:	4633      	mov	r3, r6
 800afc4:	9901      	ldr	r1, [sp, #4]
 800afc6:	2020      	movs	r0, #32
 800afc8:	47a8      	blx	r5
    for (size_t i = len; i < width; i++) {
 800afca:	3701      	adds	r7, #1
      out(' ', buffer, idx++, maxlen);
 800afcc:	4652      	mov	r2, sl
    for (size_t i = len; i < width; i++) {
 800afce:	4547      	cmp	r7, r8
 800afd0:	d3f5      	bcc.n	800afbe <_out_rev+0x24>
 800afd2:	e007      	b.n	800afe4 <_out_rev+0x4a>
    }
  }

  // reverse string
  while (len) {
    out(buf[--len], buffer, idx++, maxlen);
 800afd4:	3c01      	subs	r4, #1
 800afd6:	1c57      	adds	r7, r2, #1
 800afd8:	4633      	mov	r3, r6
 800afda:	9901      	ldr	r1, [sp, #4]
 800afdc:	f819 0004 	ldrb.w	r0, [r9, r4]
 800afe0:	47a8      	blx	r5
 800afe2:	463a      	mov	r2, r7
  while (len) {
 800afe4:	2c00      	cmp	r4, #0
 800afe6:	d1f5      	bne.n	800afd4 <_out_rev+0x3a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800afe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afea:	f013 0f02 	tst.w	r3, #2
 800afee:	d106      	bne.n	800affe <_out_rev+0x64>
 800aff0:	e009      	b.n	800b006 <_out_rev+0x6c>
    while (idx - start_idx < width) {
      out(' ', buffer, idx++, maxlen);
 800aff2:	1c54      	adds	r4, r2, #1
 800aff4:	4633      	mov	r3, r6
 800aff6:	9901      	ldr	r1, [sp, #4]
 800aff8:	2020      	movs	r0, #32
 800affa:	47a8      	blx	r5
 800affc:	4622      	mov	r2, r4
    while (idx - start_idx < width) {
 800affe:	eba2 030b 	sub.w	r3, r2, fp
 800b002:	4543      	cmp	r3, r8
 800b004:	d3f5      	bcc.n	800aff2 <_out_rev+0x58>
    }
  }

  return idx;
}
 800b006:	4610      	mov	r0, r2
 800b008:	b003      	add	sp, #12
 800b00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b00e <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b00e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b012:	b085      	sub	sp, #20
 800b014:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b016:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b018:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 800b01c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800b020:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800b024:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800b026:	9d12      	ldr	r5, [sp, #72]	; 0x48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800b028:	f015 0f02 	tst.w	r5, #2
 800b02c:	d121      	bne.n	800b072 <_ntoa_format+0x64>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800b02e:	b17f      	cbz	r7, 800b050 <_ntoa_format+0x42>
 800b030:	f015 0f01 	tst.w	r5, #1
 800b034:	d00c      	beq.n	800b050 <_ntoa_format+0x42>
 800b036:	f1b9 0f00 	cmp.w	r9, #0
 800b03a:	d102      	bne.n	800b042 <_ntoa_format+0x34>
 800b03c:	f015 0f0c 	tst.w	r5, #12
 800b040:	d006      	beq.n	800b050 <_ntoa_format+0x42>
      width--;
 800b042:	3f01      	subs	r7, #1
 800b044:	e004      	b.n	800b050 <_ntoa_format+0x42>
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 800b046:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800b04a:	f806 c004 	strb.w	ip, [r6, r4]
 800b04e:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b050:	4574      	cmp	r4, lr
 800b052:	d207      	bcs.n	800b064 <_ntoa_format+0x56>
 800b054:	2c1f      	cmp	r4, #31
 800b056:	d9f6      	bls.n	800b046 <_ntoa_format+0x38>
 800b058:	e004      	b.n	800b064 <_ntoa_format+0x56>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 800b05a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800b05e:	f806 c004 	strb.w	ip, [r6, r4]
 800b062:	3401      	adds	r4, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b064:	f015 0f01 	tst.w	r5, #1
 800b068:	d003      	beq.n	800b072 <_ntoa_format+0x64>
 800b06a:	42bc      	cmp	r4, r7
 800b06c:	d201      	bcs.n	800b072 <_ntoa_format+0x64>
 800b06e:	2c1f      	cmp	r4, #31
 800b070:	d9f3      	bls.n	800b05a <_ntoa_format+0x4c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800b072:	f015 0f10 	tst.w	r5, #16
 800b076:	d017      	beq.n	800b0a8 <_ntoa_format+0x9a>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800b078:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800b07c:	d104      	bne.n	800b088 <_ntoa_format+0x7a>
 800b07e:	b11c      	cbz	r4, 800b088 <_ntoa_format+0x7a>
 800b080:	4574      	cmp	r4, lr
 800b082:	d022      	beq.n	800b0ca <_ntoa_format+0xbc>
 800b084:	42bc      	cmp	r4, r7
 800b086:	d020      	beq.n	800b0ca <_ntoa_format+0xbc>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b088:	f1b8 0f10 	cmp.w	r8, #16
 800b08c:	d029      	beq.n	800b0e2 <_ntoa_format+0xd4>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b08e:	f1b8 0f10 	cmp.w	r8, #16
 800b092:	d031      	beq.n	800b0f8 <_ntoa_format+0xea>
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b094:	f1b8 0f02 	cmp.w	r8, #2
 800b098:	d039      	beq.n	800b10e <_ntoa_format+0x100>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800b09a:	2c1f      	cmp	r4, #31
 800b09c:	d804      	bhi.n	800b0a8 <_ntoa_format+0x9a>
      buf[len++] = '0';
 800b09e:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800b0a2:	f806 c004 	strb.w	ip, [r6, r4]
 800b0a6:	3401      	adds	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800b0a8:	2c1f      	cmp	r4, #31
 800b0aa:	d83d      	bhi.n	800b128 <_ntoa_format+0x11a>
    if (negative) {
 800b0ac:	f1b9 0f00 	cmp.w	r9, #0
 800b0b0:	d135      	bne.n	800b11e <_ntoa_format+0x110>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
 800b0b2:	f015 0f04 	tst.w	r5, #4
 800b0b6:	d140      	bne.n	800b13a <_ntoa_format+0x12c>
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
 800b0b8:	f015 0f08 	tst.w	r5, #8
 800b0bc:	d034      	beq.n	800b128 <_ntoa_format+0x11a>
      buf[len++] = ' ';
 800b0be:	f04f 0c20 	mov.w	ip, #32
 800b0c2:	f806 c004 	strb.w	ip, [r6, r4]
 800b0c6:	3401      	adds	r4, #1
 800b0c8:	e02e      	b.n	800b128 <_ntoa_format+0x11a>
      if (len && (base == 16U)) {
 800b0ca:	f1b4 0c01 	subs.w	ip, r4, #1
 800b0ce:	d006      	beq.n	800b0de <_ntoa_format+0xd0>
 800b0d0:	f1b8 0f10 	cmp.w	r8, #16
 800b0d4:	d001      	beq.n	800b0da <_ntoa_format+0xcc>
      len--;
 800b0d6:	4664      	mov	r4, ip
 800b0d8:	e7d6      	b.n	800b088 <_ntoa_format+0x7a>
        len--;
 800b0da:	3c02      	subs	r4, #2
 800b0dc:	e7d4      	b.n	800b088 <_ntoa_format+0x7a>
      len--;
 800b0de:	4664      	mov	r4, ip
 800b0e0:	e7d2      	b.n	800b088 <_ntoa_format+0x7a>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b0e2:	f015 0f20 	tst.w	r5, #32
 800b0e6:	d1d2      	bne.n	800b08e <_ntoa_format+0x80>
 800b0e8:	2c1f      	cmp	r4, #31
 800b0ea:	d8d0      	bhi.n	800b08e <_ntoa_format+0x80>
      buf[len++] = 'x';
 800b0ec:	f04f 0c78 	mov.w	ip, #120	; 0x78
 800b0f0:	f806 c004 	strb.w	ip, [r6, r4]
 800b0f4:	3401      	adds	r4, #1
 800b0f6:	e7d0      	b.n	800b09a <_ntoa_format+0x8c>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b0f8:	f015 0f20 	tst.w	r5, #32
 800b0fc:	d0ca      	beq.n	800b094 <_ntoa_format+0x86>
 800b0fe:	2c1f      	cmp	r4, #31
 800b100:	d8c8      	bhi.n	800b094 <_ntoa_format+0x86>
      buf[len++] = 'X';
 800b102:	f04f 0c58 	mov.w	ip, #88	; 0x58
 800b106:	f806 c004 	strb.w	ip, [r6, r4]
 800b10a:	3401      	adds	r4, #1
 800b10c:	e7c5      	b.n	800b09a <_ntoa_format+0x8c>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800b10e:	2c1f      	cmp	r4, #31
 800b110:	d8c3      	bhi.n	800b09a <_ntoa_format+0x8c>
      buf[len++] = 'b';
 800b112:	f04f 0c62 	mov.w	ip, #98	; 0x62
 800b116:	f806 c004 	strb.w	ip, [r6, r4]
 800b11a:	3401      	adds	r4, #1
 800b11c:	e7bd      	b.n	800b09a <_ntoa_format+0x8c>
      buf[len++] = '-';
 800b11e:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 800b122:	f806 c004 	strb.w	ip, [r6, r4]
 800b126:	3401      	adds	r4, #1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800b128:	9503      	str	r5, [sp, #12]
 800b12a:	9702      	str	r7, [sp, #8]
 800b12c:	9401      	str	r4, [sp, #4]
 800b12e:	9600      	str	r6, [sp, #0]
 800b130:	f7ff ff33 	bl	800af9a <_out_rev>
}
 800b134:	b005      	add	sp, #20
 800b136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      buf[len++] = '+';  // ignore the space if the '+' exists
 800b13a:	f04f 0c2b 	mov.w	ip, #43	; 0x2b
 800b13e:	f806 c004 	strb.w	ip, [r6, r4]
 800b142:	3401      	adds	r4, #1
 800b144:	e7f0      	b.n	800b128 <_ntoa_format+0x11a>

0800b146 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b14a:	b090      	sub	sp, #64	; 0x40
 800b14c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800b14e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b150:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 800b154:	b90d      	cbnz	r5, 800b15a <_ntoa_long+0x14>
    flags &= ~FLAGS_HASH;
 800b156:	f02c 0c10 	bic.w	ip, ip, #16
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800b15a:	f41c 6680 	ands.w	r6, ip, #1024	; 0x400
 800b15e:	d019      	beq.n	800b194 <_ntoa_long+0x4e>
 800b160:	b32d      	cbz	r5, 800b1ae <_ntoa_long+0x68>
 800b162:	2600      	movs	r6, #0
 800b164:	e016      	b.n	800b194 <_ntoa_long+0x4e>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b166:	f01c 0f20 	tst.w	ip, #32
 800b16a:	d01d      	beq.n	800b1a8 <_ntoa_long+0x62>
 800b16c:	f04f 0e41 	mov.w	lr, #65	; 0x41
 800b170:	4474      	add	r4, lr
 800b172:	b2e4      	uxtb	r4, r4
 800b174:	3c0a      	subs	r4, #10
 800b176:	b2e4      	uxtb	r4, r4
 800b178:	f106 0e01 	add.w	lr, r6, #1
 800b17c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800b180:	4446      	add	r6, r8
 800b182:	f806 4c20 	strb.w	r4, [r6, #-32]
      value /= base;
 800b186:	fbb5 f5f7 	udiv	r5, r5, r7
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800b18a:	b195      	cbz	r5, 800b1b2 <_ntoa_long+0x6c>
 800b18c:	f1be 0f1f 	cmp.w	lr, #31
 800b190:	d80f      	bhi.n	800b1b2 <_ntoa_long+0x6c>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b192:	4676      	mov	r6, lr
      const char digit = (char)(value % base);
 800b194:	fbb5 f4f7 	udiv	r4, r5, r7
 800b198:	fb07 5414 	mls	r4, r7, r4, r5
 800b19c:	b2e4      	uxtb	r4, r4
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b19e:	2c09      	cmp	r4, #9
 800b1a0:	d8e1      	bhi.n	800b166 <_ntoa_long+0x20>
 800b1a2:	3430      	adds	r4, #48	; 0x30
 800b1a4:	b2e4      	uxtb	r4, r4
 800b1a6:	e7e7      	b.n	800b178 <_ntoa_long+0x32>
 800b1a8:	f04f 0e61 	mov.w	lr, #97	; 0x61
 800b1ac:	e7e0      	b.n	800b170 <_ntoa_long+0x2a>
  size_t len = 0U;
 800b1ae:	f04f 0e00 	mov.w	lr, #0
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800b1b2:	f8cd c018 	str.w	ip, [sp, #24]
 800b1b6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800b1b8:	9405      	str	r4, [sp, #20]
 800b1ba:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800b1bc:	9404      	str	r4, [sp, #16]
 800b1be:	9703      	str	r7, [sp, #12]
 800b1c0:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 800b1c4:	9402      	str	r4, [sp, #8]
 800b1c6:	f8cd e004 	str.w	lr, [sp, #4]
 800b1ca:	ac08      	add	r4, sp, #32
 800b1cc:	9400      	str	r4, [sp, #0]
 800b1ce:	f7ff ff1e 	bl	800b00e <_ntoa_format>
}
 800b1d2:	b010      	add	sp, #64	; 0x40
 800b1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b1d8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1dc:	b08b      	sub	sp, #44	; 0x2c
 800b1de:	4606      	mov	r6, r0
 800b1e0:	4615      	mov	r5, r2
 800b1e2:	9309      	str	r3, [sp, #36]	; 0x24
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 800b1e4:	9106      	str	r1, [sp, #24]
 800b1e6:	2900      	cmp	r1, #0
 800b1e8:	f000 82b1 	beq.w	800b74e <_vsnprintf+0x576>
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800b1ec:	2400      	movs	r4, #0
  while (*format)
 800b1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1f0:	7818      	ldrb	r0, [r3, #0]
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	f000 82ad 	beq.w	800b752 <_vsnprintf+0x57a>
    if (*format != '%') {
 800b1f8:	2825      	cmp	r0, #37	; 0x25
 800b1fa:	d009      	beq.n	800b210 <_vsnprintf+0x38>
      out(*format, buffer, idx++, maxlen);
 800b1fc:	1c67      	adds	r7, r4, #1
 800b1fe:	462b      	mov	r3, r5
 800b200:	4622      	mov	r2, r4
 800b202:	9906      	ldr	r1, [sp, #24]
 800b204:	47b0      	blx	r6
      format++;
 800b206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b208:	3301      	adds	r3, #1
 800b20a:	9309      	str	r3, [sp, #36]	; 0x24
      out(*format, buffer, idx++, maxlen);
 800b20c:	463c      	mov	r4, r7
      continue;
 800b20e:	e7ee      	b.n	800b1ee <_vsnprintf+0x16>
      format++;
 800b210:	3301      	adds	r3, #1
 800b212:	9309      	str	r3, [sp, #36]	; 0x24
    flags = 0U;
 800b214:	2700      	movs	r7, #0
 800b216:	e02d      	b.n	800b274 <_vsnprintf+0x9c>
  return (ch >= '0') && (ch <= '9');
 800b218:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b21c:	b2db      	uxtb	r3, r3
    if (_is_digit(*format)) {
 800b21e:	2b09      	cmp	r3, #9
 800b220:	d968      	bls.n	800b2f4 <_vsnprintf+0x11c>
    else if (*format == '*') {
 800b222:	292a      	cmp	r1, #42	; 0x2a
 800b224:	d06b      	beq.n	800b2fe <_vsnprintf+0x126>
    width = 0U;
 800b226:	f04f 0a00 	mov.w	sl, #0
    if (*format == '.') {
 800b22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b22c:	781a      	ldrb	r2, [r3, #0]
 800b22e:	2a2e      	cmp	r2, #46	; 0x2e
 800b230:	d075      	beq.n	800b31e <_vsnprintf+0x146>
    precision = 0U;
 800b232:	2300      	movs	r3, #0
 800b234:	9307      	str	r3, [sp, #28]
    switch (*format) {
 800b236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b238:	7813      	ldrb	r3, [r2, #0]
 800b23a:	3b68      	subs	r3, #104	; 0x68
 800b23c:	2b12      	cmp	r3, #18
 800b23e:	f200 80ad 	bhi.w	800b39c <_vsnprintf+0x1c4>
 800b242:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b246:	0099      	.short	0x0099
 800b248:	00a700ab 	.word	0x00a700ab
 800b24c:	008b00ab 	.word	0x008b00ab
 800b250:	00ab00ab 	.word	0x00ab00ab
 800b254:	00ab00ab 	.word	0x00ab00ab
 800b258:	00ab00ab 	.word	0x00ab00ab
 800b25c:	00ab00ab 	.word	0x00ab00ab
 800b260:	00ab00ab 	.word	0x00ab00ab
 800b264:	00ab00ab 	.word	0x00ab00ab
 800b268:	010800ab 	.word	0x010800ab
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800b26c:	f047 0701 	orr.w	r7, r7, #1
 800b270:	3301      	adds	r3, #1
 800b272:	9309      	str	r3, [sp, #36]	; 0x24
      switch (*format) {
 800b274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b276:	7819      	ldrb	r1, [r3, #0]
 800b278:	f1a1 0220 	sub.w	r2, r1, #32
 800b27c:	2a10      	cmp	r2, #16
 800b27e:	d8cb      	bhi.n	800b218 <_vsnprintf+0x40>
 800b280:	a001      	add	r0, pc, #4	; (adr r0, 800b288 <_vsnprintf+0xb0>)
 800b282:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800b286:	bf00      	nop
 800b288:	0800b2e1 	.word	0x0800b2e1
 800b28c:	0800b219 	.word	0x0800b219
 800b290:	0800b219 	.word	0x0800b219
 800b294:	0800b2eb 	.word	0x0800b2eb
 800b298:	0800b219 	.word	0x0800b219
 800b29c:	0800b219 	.word	0x0800b219
 800b2a0:	0800b219 	.word	0x0800b219
 800b2a4:	0800b219 	.word	0x0800b219
 800b2a8:	0800b219 	.word	0x0800b219
 800b2ac:	0800b219 	.word	0x0800b219
 800b2b0:	0800b219 	.word	0x0800b219
 800b2b4:	0800b2d7 	.word	0x0800b2d7
 800b2b8:	0800b219 	.word	0x0800b219
 800b2bc:	0800b2cd 	.word	0x0800b2cd
 800b2c0:	0800b219 	.word	0x0800b219
 800b2c4:	0800b219 	.word	0x0800b219
 800b2c8:	0800b26d 	.word	0x0800b26d
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800b2cc:	f047 0702 	orr.w	r7, r7, #2
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2d4:	e7ce      	b.n	800b274 <_vsnprintf+0x9c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800b2d6:	f047 0704 	orr.w	r7, r7, #4
 800b2da:	3301      	adds	r3, #1
 800b2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b2de:	e7c9      	b.n	800b274 <_vsnprintf+0x9c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800b2e0:	f047 0708 	orr.w	r7, r7, #8
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e8:	e7c4      	b.n	800b274 <_vsnprintf+0x9c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800b2ea:	f047 0710 	orr.w	r7, r7, #16
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f2:	e7bf      	b.n	800b274 <_vsnprintf+0x9c>
      width = _atoi(&format);
 800b2f4:	a809      	add	r0, sp, #36	; 0x24
 800b2f6:	f7ff fe3e 	bl	800af76 <_atoi>
 800b2fa:	4682      	mov	sl, r0
 800b2fc:	e795      	b.n	800b22a <_vsnprintf+0x52>
      const int w = va_arg(va, int);
 800b2fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b300:	1d1a      	adds	r2, r3, #4
 800b302:	9214      	str	r2, [sp, #80]	; 0x50
 800b304:	681b      	ldr	r3, [r3, #0]
      if (w < 0) {
 800b306:	2b00      	cmp	r3, #0
 800b308:	db04      	blt.n	800b314 <_vsnprintf+0x13c>
        width = (unsigned int)w;
 800b30a:	469a      	mov	sl, r3
      format++;
 800b30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b30e:	3301      	adds	r3, #1
 800b310:	9309      	str	r3, [sp, #36]	; 0x24
 800b312:	e78a      	b.n	800b22a <_vsnprintf+0x52>
        flags |= FLAGS_LEFT;    // reverse padding
 800b314:	f047 0702 	orr.w	r7, r7, #2
        width = (unsigned int)-w;
 800b318:	f1c3 0a00 	rsb	sl, r3, #0
 800b31c:	e7f6      	b.n	800b30c <_vsnprintf+0x134>
      flags |= FLAGS_PRECISION;
 800b31e:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
      format++;
 800b322:	1c5a      	adds	r2, r3, #1
 800b324:	9209      	str	r2, [sp, #36]	; 0x24
      if (_is_digit(*format)) {
 800b326:	785a      	ldrb	r2, [r3, #1]
  return (ch >= '0') && (ch <= '9');
 800b328:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b32c:	b2db      	uxtb	r3, r3
      if (_is_digit(*format)) {
 800b32e:	2b09      	cmp	r3, #9
 800b330:	d904      	bls.n	800b33c <_vsnprintf+0x164>
      else if (*format == '*') {
 800b332:	2a2a      	cmp	r2, #42	; 0x2a
 800b334:	d007      	beq.n	800b346 <_vsnprintf+0x16e>
    precision = 0U;
 800b336:	2300      	movs	r3, #0
 800b338:	9307      	str	r3, [sp, #28]
 800b33a:	e77c      	b.n	800b236 <_vsnprintf+0x5e>
        precision = _atoi(&format);
 800b33c:	a809      	add	r0, sp, #36	; 0x24
 800b33e:	f7ff fe1a 	bl	800af76 <_atoi>
 800b342:	9007      	str	r0, [sp, #28]
 800b344:	e777      	b.n	800b236 <_vsnprintf+0x5e>
        const int prec = (int)va_arg(va, int);
 800b346:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b348:	1d1a      	adds	r2, r3, #4
 800b34a:	9214      	str	r2, [sp, #80]	; 0x50
 800b34c:	681b      	ldr	r3, [r3, #0]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800b34e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b352:	9307      	str	r3, [sp, #28]
        format++;
 800b354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b356:	3301      	adds	r3, #1
 800b358:	9309      	str	r3, [sp, #36]	; 0x24
 800b35a:	e76c      	b.n	800b236 <_vsnprintf+0x5e>
        flags |= FLAGS_LONG;
 800b35c:	f447 7180 	orr.w	r1, r7, #256	; 0x100
        format++;
 800b360:	1c53      	adds	r3, r2, #1
 800b362:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == 'l') {
 800b364:	7852      	ldrb	r2, [r2, #1]
 800b366:	2a6c      	cmp	r2, #108	; 0x6c
 800b368:	d001      	beq.n	800b36e <_vsnprintf+0x196>
        flags |= FLAGS_LONG;
 800b36a:	460f      	mov	r7, r1
 800b36c:	e016      	b.n	800b39c <_vsnprintf+0x1c4>
          flags |= FLAGS_LONG_LONG;
 800b36e:	f447 7740 	orr.w	r7, r7, #768	; 0x300
          format++;
 800b372:	3301      	adds	r3, #1
 800b374:	9309      	str	r3, [sp, #36]	; 0x24
 800b376:	e011      	b.n	800b39c <_vsnprintf+0x1c4>
        flags |= FLAGS_SHORT;
 800b378:	f047 0180 	orr.w	r1, r7, #128	; 0x80
        format++;
 800b37c:	1c53      	adds	r3, r2, #1
 800b37e:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == 'h') {
 800b380:	7852      	ldrb	r2, [r2, #1]
 800b382:	2a68      	cmp	r2, #104	; 0x68
 800b384:	d001      	beq.n	800b38a <_vsnprintf+0x1b2>
        flags |= FLAGS_SHORT;
 800b386:	460f      	mov	r7, r1
 800b388:	e008      	b.n	800b39c <_vsnprintf+0x1c4>
          flags |= FLAGS_CHAR;
 800b38a:	f047 07c0 	orr.w	r7, r7, #192	; 0xc0
          format++;
 800b38e:	3301      	adds	r3, #1
 800b390:	9309      	str	r3, [sp, #36]	; 0x24
 800b392:	e003      	b.n	800b39c <_vsnprintf+0x1c4>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800b394:	f447 7700 	orr.w	r7, r7, #512	; 0x200
        format++;
 800b398:	3201      	adds	r2, #1
 800b39a:	9209      	str	r2, [sp, #36]	; 0x24
    switch (*format) {
 800b39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b39e:	7818      	ldrb	r0, [r3, #0]
 800b3a0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 800b3a4:	2b53      	cmp	r3, #83	; 0x53
 800b3a6:	f200 81c8 	bhi.w	800b73a <_vsnprintf+0x562>
 800b3aa:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b3ae:	01bb      	.short	0x01bb
 800b3b0:	01c601c6 	.word	0x01c601c6
 800b3b4:	01c601c6 	.word	0x01c601c6
 800b3b8:	01c601c6 	.word	0x01c601c6
 800b3bc:	01c601c6 	.word	0x01c601c6
 800b3c0:	01c601c6 	.word	0x01c601c6
 800b3c4:	01c601c6 	.word	0x01c601c6
 800b3c8:	01c601c6 	.word	0x01c601c6
 800b3cc:	01c601c6 	.word	0x01c601c6
 800b3d0:	01c601c6 	.word	0x01c601c6
 800b3d4:	01c601c6 	.word	0x01c601c6
 800b3d8:	01c601c6 	.word	0x01c601c6
 800b3dc:	01c601c6 	.word	0x01c601c6
 800b3e0:	01c601c6 	.word	0x01c601c6
 800b3e4:	01c601c6 	.word	0x01c601c6
 800b3e8:	01c601c6 	.word	0x01c601c6
 800b3ec:	01c601c6 	.word	0x01c601c6
 800b3f0:	01c601c6 	.word	0x01c601c6
 800b3f4:	01c601c6 	.word	0x01c601c6
 800b3f8:	01c601c6 	.word	0x01c601c6
 800b3fc:	01c601c6 	.word	0x01c601c6
 800b400:	01c601c6 	.word	0x01c601c6
 800b404:	01c601c6 	.word	0x01c601c6
 800b408:	01c601c6 	.word	0x01c601c6
 800b40c:	01c601c6 	.word	0x01c601c6
 800b410:	01c601c6 	.word	0x01c601c6
 800b414:	01c60059 	.word	0x01c60059
 800b418:	01c601c6 	.word	0x01c601c6
 800b41c:	01c601c6 	.word	0x01c601c6
 800b420:	01c601c6 	.word	0x01c601c6
 800b424:	01c601c6 	.word	0x01c601c6
 800b428:	010c0059 	.word	0x010c0059
 800b42c:	01c60059 	.word	0x01c60059
 800b430:	01c601c6 	.word	0x01c601c6
 800b434:	005901c6 	.word	0x005901c6
 800b438:	01c601c6 	.word	0x01c601c6
 800b43c:	01c601c6 	.word	0x01c601c6
 800b440:	005901c6 	.word	0x005901c6
 800b444:	01c601a0 	.word	0x01c601a0
 800b448:	014001c6 	.word	0x014001c6
 800b44c:	005901c6 	.word	0x005901c6
 800b450:	01c601c6 	.word	0x01c601c6
 800b454:	0059      	.short	0x0059
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800b456:	f447 7780 	orr.w	r7, r7, #256	; 0x100
        format++;
 800b45a:	3201      	adds	r2, #1
 800b45c:	9209      	str	r2, [sp, #36]	; 0x24
        break;
 800b45e:	e79d      	b.n	800b39c <_vsnprintf+0x1c4>
        if (*format == 'x' || *format == 'X') {
 800b460:	2878      	cmp	r0, #120	; 0x78
 800b462:	d009      	beq.n	800b478 <_vsnprintf+0x2a0>
 800b464:	2858      	cmp	r0, #88	; 0x58
 800b466:	d037      	beq.n	800b4d8 <_vsnprintf+0x300>
        else if (*format == 'o') {
 800b468:	286f      	cmp	r0, #111	; 0x6f
 800b46a:	d037      	beq.n	800b4dc <_vsnprintf+0x304>
        else if (*format == 'b') {
 800b46c:	2862      	cmp	r0, #98	; 0x62
 800b46e:	d037      	beq.n	800b4e0 <_vsnprintf+0x308>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800b470:	f027 0710 	bic.w	r7, r7, #16
          base = 10U;
 800b474:	230a      	movs	r3, #10
 800b476:	e000      	b.n	800b47a <_vsnprintf+0x2a2>
          base = 16U;
 800b478:	2310      	movs	r3, #16
        if (*format == 'X') {
 800b47a:	2858      	cmp	r0, #88	; 0x58
 800b47c:	d032      	beq.n	800b4e4 <_vsnprintf+0x30c>
        if ((*format != 'i') && (*format != 'd')) {
 800b47e:	2869      	cmp	r0, #105	; 0x69
 800b480:	d003      	beq.n	800b48a <_vsnprintf+0x2b2>
 800b482:	2864      	cmp	r0, #100	; 0x64
 800b484:	d001      	beq.n	800b48a <_vsnprintf+0x2b2>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800b486:	f027 070c 	bic.w	r7, r7, #12
        if (flags & FLAGS_PRECISION) {
 800b48a:	f417 6f80 	tst.w	r7, #1024	; 0x400
 800b48e:	d001      	beq.n	800b494 <_vsnprintf+0x2bc>
          flags &= ~FLAGS_ZEROPAD;
 800b490:	f027 0701 	bic.w	r7, r7, #1
        if ((*format == 'i') || (*format == 'd')) {
 800b494:	2869      	cmp	r0, #105	; 0x69
 800b496:	d028      	beq.n	800b4ea <_vsnprintf+0x312>
 800b498:	2864      	cmp	r0, #100	; 0x64
 800b49a:	d026      	beq.n	800b4ea <_vsnprintf+0x312>
          if (flags & FLAGS_LONG_LONG) {
 800b49c:	f417 7f00 	tst.w	r7, #512	; 0x200
 800b4a0:	d144      	bne.n	800b52c <_vsnprintf+0x354>
          else if (flags & FLAGS_LONG) {
 800b4a2:	f417 7f80 	tst.w	r7, #256	; 0x100
 800b4a6:	d16c      	bne.n	800b582 <_vsnprintf+0x3aa>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800b4a8:	f017 0f40 	tst.w	r7, #64	; 0x40
 800b4ac:	d07e      	beq.n	800b5ac <_vsnprintf+0x3d4>
 800b4ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4b0:	1d11      	adds	r1, r2, #4
 800b4b2:	9114      	str	r1, [sp, #80]	; 0x50
 800b4b4:	7812      	ldrb	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800b4b6:	9705      	str	r7, [sp, #20]
 800b4b8:	f8cd a010 	str.w	sl, [sp, #16]
 800b4bc:	9907      	ldr	r1, [sp, #28]
 800b4be:	9103      	str	r1, [sp, #12]
 800b4c0:	9302      	str	r3, [sp, #8]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	9301      	str	r3, [sp, #4]
 800b4c6:	9200      	str	r2, [sp, #0]
 800b4c8:	462b      	mov	r3, r5
 800b4ca:	4622      	mov	r2, r4
 800b4cc:	9906      	ldr	r1, [sp, #24]
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	f7ff fe39 	bl	800b146 <_ntoa_long>
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	e029      	b.n	800b52c <_vsnprintf+0x354>
          base = 16U;
 800b4d8:	2310      	movs	r3, #16
 800b4da:	e7ce      	b.n	800b47a <_vsnprintf+0x2a2>
          base =  8U;
 800b4dc:	2308      	movs	r3, #8
 800b4de:	e7cc      	b.n	800b47a <_vsnprintf+0x2a2>
          base =  2U;
 800b4e0:	2302      	movs	r3, #2
 800b4e2:	e7ca      	b.n	800b47a <_vsnprintf+0x2a2>
          flags |= FLAGS_UPPERCASE;
 800b4e4:	f047 0720 	orr.w	r7, r7, #32
 800b4e8:	e7c9      	b.n	800b47e <_vsnprintf+0x2a6>
          if (flags & FLAGS_LONG_LONG) {
 800b4ea:	f417 7f00 	tst.w	r7, #512	; 0x200
 800b4ee:	d11d      	bne.n	800b52c <_vsnprintf+0x354>
          else if (flags & FLAGS_LONG) {
 800b4f0:	f417 7f80 	tst.w	r7, #256	; 0x100
 800b4f4:	d11e      	bne.n	800b534 <_vsnprintf+0x35c>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800b4f6:	f017 0f40 	tst.w	r7, #64	; 0x40
 800b4fa:	d034      	beq.n	800b566 <_vsnprintf+0x38e>
 800b4fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4fe:	1d11      	adds	r1, r2, #4
 800b500:	9114      	str	r1, [sp, #80]	; 0x50
 800b502:	7812      	ldrb	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800b504:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800b508:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800b50c:	0fd2      	lsrs	r2, r2, #31
 800b50e:	9705      	str	r7, [sp, #20]
 800b510:	f8cd a010 	str.w	sl, [sp, #16]
 800b514:	9807      	ldr	r0, [sp, #28]
 800b516:	9003      	str	r0, [sp, #12]
 800b518:	9302      	str	r3, [sp, #8]
 800b51a:	9201      	str	r2, [sp, #4]
 800b51c:	9100      	str	r1, [sp, #0]
 800b51e:	462b      	mov	r3, r5
 800b520:	4622      	mov	r2, r4
 800b522:	9906      	ldr	r1, [sp, #24]
 800b524:	4630      	mov	r0, r6
 800b526:	f7ff fe0e 	bl	800b146 <_ntoa_long>
 800b52a:	4604      	mov	r4, r0
        format++;
 800b52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52e:	3301      	adds	r3, #1
 800b530:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800b532:	e65c      	b.n	800b1ee <_vsnprintf+0x16>
            const long value = va_arg(va, long);
 800b534:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b536:	1d11      	adds	r1, r2, #4
 800b538:	9114      	str	r1, [sp, #80]	; 0x50
 800b53a:	6812      	ldr	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800b53c:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800b540:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800b544:	0fd2      	lsrs	r2, r2, #31
 800b546:	9705      	str	r7, [sp, #20]
 800b548:	f8cd a010 	str.w	sl, [sp, #16]
 800b54c:	9807      	ldr	r0, [sp, #28]
 800b54e:	9003      	str	r0, [sp, #12]
 800b550:	9302      	str	r3, [sp, #8]
 800b552:	9201      	str	r2, [sp, #4]
 800b554:	9100      	str	r1, [sp, #0]
 800b556:	462b      	mov	r3, r5
 800b558:	4622      	mov	r2, r4
 800b55a:	9906      	ldr	r1, [sp, #24]
 800b55c:	4630      	mov	r0, r6
 800b55e:	f7ff fdf2 	bl	800b146 <_ntoa_long>
 800b562:	4604      	mov	r4, r0
 800b564:	e7e2      	b.n	800b52c <_vsnprintf+0x354>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800b566:	f017 0f80 	tst.w	r7, #128	; 0x80
 800b56a:	d005      	beq.n	800b578 <_vsnprintf+0x3a0>
 800b56c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b56e:	1d11      	adds	r1, r2, #4
 800b570:	9114      	str	r1, [sp, #80]	; 0x50
 800b572:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b576:	e7c5      	b.n	800b504 <_vsnprintf+0x32c>
 800b578:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b57a:	1d11      	adds	r1, r2, #4
 800b57c:	9114      	str	r1, [sp, #80]	; 0x50
 800b57e:	6812      	ldr	r2, [r2, #0]
 800b580:	e7c0      	b.n	800b504 <_vsnprintf+0x32c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800b582:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b584:	1d11      	adds	r1, r2, #4
 800b586:	9114      	str	r1, [sp, #80]	; 0x50
 800b588:	6812      	ldr	r2, [r2, #0]
 800b58a:	9705      	str	r7, [sp, #20]
 800b58c:	f8cd a010 	str.w	sl, [sp, #16]
 800b590:	9907      	ldr	r1, [sp, #28]
 800b592:	9103      	str	r1, [sp, #12]
 800b594:	9302      	str	r3, [sp, #8]
 800b596:	2300      	movs	r3, #0
 800b598:	9301      	str	r3, [sp, #4]
 800b59a:	9200      	str	r2, [sp, #0]
 800b59c:	462b      	mov	r3, r5
 800b59e:	4622      	mov	r2, r4
 800b5a0:	9906      	ldr	r1, [sp, #24]
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f7ff fdcf 	bl	800b146 <_ntoa_long>
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	e7bf      	b.n	800b52c <_vsnprintf+0x354>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800b5ac:	f017 0f80 	tst.w	r7, #128	; 0x80
 800b5b0:	d004      	beq.n	800b5bc <_vsnprintf+0x3e4>
 800b5b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5b4:	1d11      	adds	r1, r2, #4
 800b5b6:	9114      	str	r1, [sp, #80]	; 0x50
 800b5b8:	8812      	ldrh	r2, [r2, #0]
 800b5ba:	e77c      	b.n	800b4b6 <_vsnprintf+0x2de>
 800b5bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5be:	1d11      	adds	r1, r2, #4
 800b5c0:	9114      	str	r1, [sp, #80]	; 0x50
 800b5c2:	6812      	ldr	r2, [r2, #0]
 800b5c4:	e777      	b.n	800b4b6 <_vsnprintf+0x2de>
        if (!(flags & FLAGS_LEFT)) {
 800b5c6:	f017 0702 	ands.w	r7, r7, #2
 800b5ca:	d01e      	beq.n	800b60a <_vsnprintf+0x432>
        unsigned int l = 1U;
 800b5cc:	f04f 0801 	mov.w	r8, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800b5d0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b5d2:	1d03      	adds	r3, r0, #4
 800b5d4:	9314      	str	r3, [sp, #80]	; 0x50
 800b5d6:	f104 0901 	add.w	r9, r4, #1
 800b5da:	462b      	mov	r3, r5
 800b5dc:	4622      	mov	r2, r4
 800b5de:	9906      	ldr	r1, [sp, #24]
 800b5e0:	7800      	ldrb	r0, [r0, #0]
 800b5e2:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
 800b5e4:	b9a7      	cbnz	r7, 800b610 <_vsnprintf+0x438>
        format++;
 800b5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800b5ec:	464c      	mov	r4, r9
 800b5ee:	e5fe      	b.n	800b1ee <_vsnprintf+0x16>
            out(' ', buffer, idx++, maxlen);
 800b5f0:	1c54      	adds	r4, r2, #1
 800b5f2:	462b      	mov	r3, r5
 800b5f4:	9906      	ldr	r1, [sp, #24]
 800b5f6:	2020      	movs	r0, #32
 800b5f8:	47b0      	blx	r6
          while (l++ < width) {
 800b5fa:	4643      	mov	r3, r8
            out(' ', buffer, idx++, maxlen);
 800b5fc:	4622      	mov	r2, r4
          while (l++ < width) {
 800b5fe:	f103 0801 	add.w	r8, r3, #1
 800b602:	459a      	cmp	sl, r3
 800b604:	d8f4      	bhi.n	800b5f0 <_vsnprintf+0x418>
 800b606:	4614      	mov	r4, r2
 800b608:	e7e2      	b.n	800b5d0 <_vsnprintf+0x3f8>
        unsigned int l = 1U;
 800b60a:	2301      	movs	r3, #1
 800b60c:	4622      	mov	r2, r4
 800b60e:	e7f6      	b.n	800b5fe <_vsnprintf+0x426>
 800b610:	464a      	mov	r2, r9
 800b612:	e006      	b.n	800b622 <_vsnprintf+0x44a>
            out(' ', buffer, idx++, maxlen);
 800b614:	1c57      	adds	r7, r2, #1
 800b616:	462b      	mov	r3, r5
 800b618:	9906      	ldr	r1, [sp, #24]
 800b61a:	2020      	movs	r0, #32
 800b61c:	47b0      	blx	r6
          while (l++ < width) {
 800b61e:	46a0      	mov	r8, r4
            out(' ', buffer, idx++, maxlen);
 800b620:	463a      	mov	r2, r7
          while (l++ < width) {
 800b622:	f108 0401 	add.w	r4, r8, #1
 800b626:	45c2      	cmp	sl, r8
 800b628:	d8f4      	bhi.n	800b614 <_vsnprintf+0x43c>
 800b62a:	4691      	mov	r9, r2
 800b62c:	e7db      	b.n	800b5e6 <_vsnprintf+0x40e>
        const char* p = va_arg(va, char*);
 800b62e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b630:	1d1a      	adds	r2, r3, #4
 800b632:	9214      	str	r2, [sp, #80]	; 0x50
 800b634:	f8d3 8000 	ldr.w	r8, [r3]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800b638:	9b07      	ldr	r3, [sp, #28]
 800b63a:	b9f3      	cbnz	r3, 800b67a <_vsnprintf+0x4a2>
 800b63c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b640:	46c1      	mov	r9, r8
 800b642:	e002      	b.n	800b64a <_vsnprintf+0x472>
  for (s = str; *s && maxsize--; ++s);
 800b644:	f109 0901 	add.w	r9, r9, #1
 800b648:	4613      	mov	r3, r2
 800b64a:	f899 2000 	ldrb.w	r2, [r9]
 800b64e:	b112      	cbz	r2, 800b656 <_vsnprintf+0x47e>
 800b650:	1e5a      	subs	r2, r3, #1
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1f6      	bne.n	800b644 <_vsnprintf+0x46c>
  return (unsigned int)(s - str);
 800b656:	eba9 0908 	sub.w	r9, r9, r8
        if (flags & FLAGS_PRECISION) {
 800b65a:	f417 6b80 	ands.w	fp, r7, #1024	; 0x400
 800b65e:	d003      	beq.n	800b668 <_vsnprintf+0x490>
          l = (l < precision ? l : precision);
 800b660:	9b07      	ldr	r3, [sp, #28]
 800b662:	4599      	cmp	r9, r3
 800b664:	bf28      	it	cs
 800b666:	4699      	movcs	r9, r3
        if (!(flags & FLAGS_LEFT)) {
 800b668:	f017 0302 	ands.w	r3, r7, #2
 800b66c:	9308      	str	r3, [sp, #32]
 800b66e:	d006      	beq.n	800b67e <_vsnprintf+0x4a6>
 800b670:	4622      	mov	r2, r4
 800b672:	465c      	mov	r4, fp
 800b674:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800b678:	e01b      	b.n	800b6b2 <_vsnprintf+0x4da>
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800b67a:	9b07      	ldr	r3, [sp, #28]
 800b67c:	e7e0      	b.n	800b640 <_vsnprintf+0x468>
 800b67e:	4622      	mov	r2, r4
 800b680:	e006      	b.n	800b690 <_vsnprintf+0x4b8>
            out(' ', buffer, idx++, maxlen);
 800b682:	1c54      	adds	r4, r2, #1
 800b684:	462b      	mov	r3, r5
 800b686:	9906      	ldr	r1, [sp, #24]
 800b688:	2020      	movs	r0, #32
 800b68a:	47b0      	blx	r6
          while (l++ < width) {
 800b68c:	46b9      	mov	r9, r7
            out(' ', buffer, idx++, maxlen);
 800b68e:	4622      	mov	r2, r4
          while (l++ < width) {
 800b690:	f109 0701 	add.w	r7, r9, #1
 800b694:	45ca      	cmp	sl, r9
 800b696:	d8f4      	bhi.n	800b682 <_vsnprintf+0x4aa>
 800b698:	46b9      	mov	r9, r7
 800b69a:	465c      	mov	r4, fp
 800b69c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800b6a0:	e007      	b.n	800b6b2 <_vsnprintf+0x4da>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800b6a2:	469b      	mov	fp, r3
          out(*(p++), buffer, idx++, maxlen);
 800b6a4:	f108 0801 	add.w	r8, r8, #1
 800b6a8:	1c57      	adds	r7, r2, #1
 800b6aa:	462b      	mov	r3, r5
 800b6ac:	9906      	ldr	r1, [sp, #24]
 800b6ae:	47b0      	blx	r6
 800b6b0:	463a      	mov	r2, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800b6b2:	f898 0000 	ldrb.w	r0, [r8]
 800b6b6:	b130      	cbz	r0, 800b6c6 <_vsnprintf+0x4ee>
 800b6b8:	2c00      	cmp	r4, #0
 800b6ba:	d0f3      	beq.n	800b6a4 <_vsnprintf+0x4cc>
 800b6bc:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800b6c0:	f1bb 0f00 	cmp.w	fp, #0
 800b6c4:	d1ed      	bne.n	800b6a2 <_vsnprintf+0x4ca>
 800b6c6:	4614      	mov	r4, r2
        if (flags & FLAGS_LEFT) {
 800b6c8:	9b08      	ldr	r3, [sp, #32]
 800b6ca:	b953      	cbnz	r3, 800b6e2 <_vsnprintf+0x50a>
        format++;
 800b6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800b6d2:	e58c      	b.n	800b1ee <_vsnprintf+0x16>
            out(' ', buffer, idx++, maxlen);
 800b6d4:	1c57      	adds	r7, r2, #1
 800b6d6:	462b      	mov	r3, r5
 800b6d8:	9906      	ldr	r1, [sp, #24]
 800b6da:	2020      	movs	r0, #32
 800b6dc:	47b0      	blx	r6
          while (l++ < width) {
 800b6de:	46a1      	mov	r9, r4
            out(' ', buffer, idx++, maxlen);
 800b6e0:	463a      	mov	r2, r7
          while (l++ < width) {
 800b6e2:	f109 0401 	add.w	r4, r9, #1
 800b6e6:	45ca      	cmp	sl, r9
 800b6e8:	d8f4      	bhi.n	800b6d4 <_vsnprintf+0x4fc>
 800b6ea:	4614      	mov	r4, r2
 800b6ec:	e7ee      	b.n	800b6cc <_vsnprintf+0x4f4>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800b6ee:	f047 0721 	orr.w	r7, r7, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800b6f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6f4:	1d1a      	adds	r2, r3, #4
 800b6f6:	9214      	str	r2, [sp, #80]	; 0x50
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	9705      	str	r7, [sp, #20]
 800b6fc:	2208      	movs	r2, #8
 800b6fe:	9204      	str	r2, [sp, #16]
 800b700:	9a07      	ldr	r2, [sp, #28]
 800b702:	9203      	str	r2, [sp, #12]
 800b704:	2210      	movs	r2, #16
 800b706:	9202      	str	r2, [sp, #8]
 800b708:	2200      	movs	r2, #0
 800b70a:	9201      	str	r2, [sp, #4]
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	462b      	mov	r3, r5
 800b710:	4622      	mov	r2, r4
 800b712:	9906      	ldr	r1, [sp, #24]
 800b714:	4630      	mov	r0, r6
 800b716:	f7ff fd16 	bl	800b146 <_ntoa_long>
 800b71a:	4604      	mov	r4, r0
        format++;
 800b71c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b71e:	3301      	adds	r3, #1
 800b720:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 800b722:	e564      	b.n	800b1ee <_vsnprintf+0x16>
        out('%', buffer, idx++, maxlen);
 800b724:	1c67      	adds	r7, r4, #1
 800b726:	462b      	mov	r3, r5
 800b728:	4622      	mov	r2, r4
 800b72a:	9906      	ldr	r1, [sp, #24]
 800b72c:	2025      	movs	r0, #37	; 0x25
 800b72e:	47b0      	blx	r6
        format++;
 800b730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b732:	3301      	adds	r3, #1
 800b734:	9309      	str	r3, [sp, #36]	; 0x24
        out('%', buffer, idx++, maxlen);
 800b736:	463c      	mov	r4, r7
        break;
 800b738:	e559      	b.n	800b1ee <_vsnprintf+0x16>

      default :
        out(*format, buffer, idx++, maxlen);
 800b73a:	1c67      	adds	r7, r4, #1
 800b73c:	462b      	mov	r3, r5
 800b73e:	4622      	mov	r2, r4
 800b740:	9906      	ldr	r1, [sp, #24]
 800b742:	47b0      	blx	r6
        format++;
 800b744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b746:	3301      	adds	r3, #1
 800b748:	9309      	str	r3, [sp, #36]	; 0x24
        out(*format, buffer, idx++, maxlen);
 800b74a:	463c      	mov	r4, r7
        break;
 800b74c:	e54f      	b.n	800b1ee <_vsnprintf+0x16>
    out = _out_null;
 800b74e:	4e07      	ldr	r6, [pc, #28]	; (800b76c <_vsnprintf+0x594>)
 800b750:	e54c      	b.n	800b1ec <_vsnprintf+0x14>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800b752:	42ac      	cmp	r4, r5
 800b754:	d308      	bcc.n	800b768 <_vsnprintf+0x590>
 800b756:	1e6a      	subs	r2, r5, #1
 800b758:	462b      	mov	r3, r5
 800b75a:	9906      	ldr	r1, [sp, #24]
 800b75c:	2000      	movs	r0, #0
 800b75e:	47b0      	blx	r6

  // return written chars without terminating \0
  return (int)idx;
}
 800b760:	4620      	mov	r0, r4
 800b762:	b00b      	add	sp, #44	; 0x2c
 800b764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800b768:	4622      	mov	r2, r4
 800b76a:	e7f5      	b.n	800b758 <_vsnprintf+0x580>
 800b76c:	0800af75 	.word	0x0800af75

0800b770 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 800b770:	b40e      	push	{r1, r2, r3}
 800b772:	b500      	push	{lr}
 800b774:	b084      	sub	sp, #16
 800b776:	aa05      	add	r2, sp, #20
 800b778:	f852 3b04 	ldr.w	r3, [r2], #4
  va_list va;
  va_start(va, format);
 800b77c:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800b77e:	9200      	str	r2, [sp, #0]
 800b780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b784:	4601      	mov	r1, r0
 800b786:	4804      	ldr	r0, [pc, #16]	; (800b798 <sprintf_+0x28>)
 800b788:	f7ff fd26 	bl	800b1d8 <_vsnprintf>
  va_end(va);
  return ret;
}
 800b78c:	b004      	add	sp, #16
 800b78e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b792:	b003      	add	sp, #12
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	0800af6d 	.word	0x0800af6d

0800b79c <__errno>:
 800b79c:	4b01      	ldr	r3, [pc, #4]	; (800b7a4 <__errno+0x8>)
 800b79e:	6818      	ldr	r0, [r3, #0]
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	20000054 	.word	0x20000054

0800b7a8 <__libc_init_array>:
 800b7a8:	b570      	push	{r4, r5, r6, lr}
 800b7aa:	4e0d      	ldr	r6, [pc, #52]	; (800b7e0 <__libc_init_array+0x38>)
 800b7ac:	4c0d      	ldr	r4, [pc, #52]	; (800b7e4 <__libc_init_array+0x3c>)
 800b7ae:	1ba4      	subs	r4, r4, r6
 800b7b0:	10a4      	asrs	r4, r4, #2
 800b7b2:	2500      	movs	r5, #0
 800b7b4:	42a5      	cmp	r5, r4
 800b7b6:	d109      	bne.n	800b7cc <__libc_init_array+0x24>
 800b7b8:	4e0b      	ldr	r6, [pc, #44]	; (800b7e8 <__libc_init_array+0x40>)
 800b7ba:	4c0c      	ldr	r4, [pc, #48]	; (800b7ec <__libc_init_array+0x44>)
 800b7bc:	f000 fc50 	bl	800c060 <_init>
 800b7c0:	1ba4      	subs	r4, r4, r6
 800b7c2:	10a4      	asrs	r4, r4, #2
 800b7c4:	2500      	movs	r5, #0
 800b7c6:	42a5      	cmp	r5, r4
 800b7c8:	d105      	bne.n	800b7d6 <__libc_init_array+0x2e>
 800b7ca:	bd70      	pop	{r4, r5, r6, pc}
 800b7cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7d0:	4798      	blx	r3
 800b7d2:	3501      	adds	r5, #1
 800b7d4:	e7ee      	b.n	800b7b4 <__libc_init_array+0xc>
 800b7d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7da:	4798      	blx	r3
 800b7dc:	3501      	adds	r5, #1
 800b7de:	e7f2      	b.n	800b7c6 <__libc_init_array+0x1e>
 800b7e0:	0800cb38 	.word	0x0800cb38
 800b7e4:	0800cb38 	.word	0x0800cb38
 800b7e8:	0800cb38 	.word	0x0800cb38
 800b7ec:	0800cb3c 	.word	0x0800cb3c

0800b7f0 <memcpy>:
 800b7f0:	b510      	push	{r4, lr}
 800b7f2:	1e43      	subs	r3, r0, #1
 800b7f4:	440a      	add	r2, r1
 800b7f6:	4291      	cmp	r1, r2
 800b7f8:	d100      	bne.n	800b7fc <memcpy+0xc>
 800b7fa:	bd10      	pop	{r4, pc}
 800b7fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b800:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b804:	e7f7      	b.n	800b7f6 <memcpy+0x6>

0800b806 <memset>:
 800b806:	4402      	add	r2, r0
 800b808:	4603      	mov	r3, r0
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d100      	bne.n	800b810 <memset+0xa>
 800b80e:	4770      	bx	lr
 800b810:	f803 1b01 	strb.w	r1, [r3], #1
 800b814:	e7f9      	b.n	800b80a <memset+0x4>
	...

0800b818 <siprintf>:
 800b818:	b40e      	push	{r1, r2, r3}
 800b81a:	b500      	push	{lr}
 800b81c:	b09c      	sub	sp, #112	; 0x70
 800b81e:	ab1d      	add	r3, sp, #116	; 0x74
 800b820:	9002      	str	r0, [sp, #8]
 800b822:	9006      	str	r0, [sp, #24]
 800b824:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b828:	4809      	ldr	r0, [pc, #36]	; (800b850 <siprintf+0x38>)
 800b82a:	9107      	str	r1, [sp, #28]
 800b82c:	9104      	str	r1, [sp, #16]
 800b82e:	4909      	ldr	r1, [pc, #36]	; (800b854 <siprintf+0x3c>)
 800b830:	f853 2b04 	ldr.w	r2, [r3], #4
 800b834:	9105      	str	r1, [sp, #20]
 800b836:	6800      	ldr	r0, [r0, #0]
 800b838:	9301      	str	r3, [sp, #4]
 800b83a:	a902      	add	r1, sp, #8
 800b83c:	f000 f88e 	bl	800b95c <_svfiprintf_r>
 800b840:	9b02      	ldr	r3, [sp, #8]
 800b842:	2200      	movs	r2, #0
 800b844:	701a      	strb	r2, [r3, #0]
 800b846:	b01c      	add	sp, #112	; 0x70
 800b848:	f85d eb04 	ldr.w	lr, [sp], #4
 800b84c:	b003      	add	sp, #12
 800b84e:	4770      	bx	lr
 800b850:	20000054 	.word	0x20000054
 800b854:	ffff0208 	.word	0xffff0208

0800b858 <strncmp>:
 800b858:	b510      	push	{r4, lr}
 800b85a:	b16a      	cbz	r2, 800b878 <strncmp+0x20>
 800b85c:	3901      	subs	r1, #1
 800b85e:	1884      	adds	r4, r0, r2
 800b860:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b864:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b868:	4293      	cmp	r3, r2
 800b86a:	d103      	bne.n	800b874 <strncmp+0x1c>
 800b86c:	42a0      	cmp	r0, r4
 800b86e:	d001      	beq.n	800b874 <strncmp+0x1c>
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1f5      	bne.n	800b860 <strncmp+0x8>
 800b874:	1a98      	subs	r0, r3, r2
 800b876:	bd10      	pop	{r4, pc}
 800b878:	4610      	mov	r0, r2
 800b87a:	e7fc      	b.n	800b876 <strncmp+0x1e>

0800b87c <strncpy>:
 800b87c:	b570      	push	{r4, r5, r6, lr}
 800b87e:	3901      	subs	r1, #1
 800b880:	4604      	mov	r4, r0
 800b882:	b902      	cbnz	r2, 800b886 <strncpy+0xa>
 800b884:	bd70      	pop	{r4, r5, r6, pc}
 800b886:	4623      	mov	r3, r4
 800b888:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800b88c:	f803 5b01 	strb.w	r5, [r3], #1
 800b890:	1e56      	subs	r6, r2, #1
 800b892:	b92d      	cbnz	r5, 800b8a0 <strncpy+0x24>
 800b894:	4414      	add	r4, r2
 800b896:	42a3      	cmp	r3, r4
 800b898:	d0f4      	beq.n	800b884 <strncpy+0x8>
 800b89a:	f803 5b01 	strb.w	r5, [r3], #1
 800b89e:	e7fa      	b.n	800b896 <strncpy+0x1a>
 800b8a0:	461c      	mov	r4, r3
 800b8a2:	4632      	mov	r2, r6
 800b8a4:	e7ed      	b.n	800b882 <strncpy+0x6>

0800b8a6 <__ssputs_r>:
 800b8a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8aa:	688e      	ldr	r6, [r1, #8]
 800b8ac:	429e      	cmp	r6, r3
 800b8ae:	4682      	mov	sl, r0
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	4690      	mov	r8, r2
 800b8b4:	4699      	mov	r9, r3
 800b8b6:	d837      	bhi.n	800b928 <__ssputs_r+0x82>
 800b8b8:	898a      	ldrh	r2, [r1, #12]
 800b8ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8be:	d031      	beq.n	800b924 <__ssputs_r+0x7e>
 800b8c0:	6825      	ldr	r5, [r4, #0]
 800b8c2:	6909      	ldr	r1, [r1, #16]
 800b8c4:	1a6f      	subs	r7, r5, r1
 800b8c6:	6965      	ldr	r5, [r4, #20]
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8ce:	fb95 f5f3 	sdiv	r5, r5, r3
 800b8d2:	f109 0301 	add.w	r3, r9, #1
 800b8d6:	443b      	add	r3, r7
 800b8d8:	429d      	cmp	r5, r3
 800b8da:	bf38      	it	cc
 800b8dc:	461d      	movcc	r5, r3
 800b8de:	0553      	lsls	r3, r2, #21
 800b8e0:	d530      	bpl.n	800b944 <__ssputs_r+0x9e>
 800b8e2:	4629      	mov	r1, r5
 800b8e4:	f000 fb22 	bl	800bf2c <_malloc_r>
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	b950      	cbnz	r0, 800b902 <__ssputs_r+0x5c>
 800b8ec:	230c      	movs	r3, #12
 800b8ee:	f8ca 3000 	str.w	r3, [sl]
 800b8f2:	89a3      	ldrh	r3, [r4, #12]
 800b8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8f8:	81a3      	strh	r3, [r4, #12]
 800b8fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b902:	463a      	mov	r2, r7
 800b904:	6921      	ldr	r1, [r4, #16]
 800b906:	f7ff ff73 	bl	800b7f0 <memcpy>
 800b90a:	89a3      	ldrh	r3, [r4, #12]
 800b90c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b914:	81a3      	strh	r3, [r4, #12]
 800b916:	6126      	str	r6, [r4, #16]
 800b918:	6165      	str	r5, [r4, #20]
 800b91a:	443e      	add	r6, r7
 800b91c:	1bed      	subs	r5, r5, r7
 800b91e:	6026      	str	r6, [r4, #0]
 800b920:	60a5      	str	r5, [r4, #8]
 800b922:	464e      	mov	r6, r9
 800b924:	454e      	cmp	r6, r9
 800b926:	d900      	bls.n	800b92a <__ssputs_r+0x84>
 800b928:	464e      	mov	r6, r9
 800b92a:	4632      	mov	r2, r6
 800b92c:	4641      	mov	r1, r8
 800b92e:	6820      	ldr	r0, [r4, #0]
 800b930:	f000 fa94 	bl	800be5c <memmove>
 800b934:	68a3      	ldr	r3, [r4, #8]
 800b936:	1b9b      	subs	r3, r3, r6
 800b938:	60a3      	str	r3, [r4, #8]
 800b93a:	6823      	ldr	r3, [r4, #0]
 800b93c:	441e      	add	r6, r3
 800b93e:	6026      	str	r6, [r4, #0]
 800b940:	2000      	movs	r0, #0
 800b942:	e7dc      	b.n	800b8fe <__ssputs_r+0x58>
 800b944:	462a      	mov	r2, r5
 800b946:	f000 fb4b 	bl	800bfe0 <_realloc_r>
 800b94a:	4606      	mov	r6, r0
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d1e2      	bne.n	800b916 <__ssputs_r+0x70>
 800b950:	6921      	ldr	r1, [r4, #16]
 800b952:	4650      	mov	r0, sl
 800b954:	f000 fa9c 	bl	800be90 <_free_r>
 800b958:	e7c8      	b.n	800b8ec <__ssputs_r+0x46>
	...

0800b95c <_svfiprintf_r>:
 800b95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b960:	461d      	mov	r5, r3
 800b962:	898b      	ldrh	r3, [r1, #12]
 800b964:	061f      	lsls	r7, r3, #24
 800b966:	b09d      	sub	sp, #116	; 0x74
 800b968:	4680      	mov	r8, r0
 800b96a:	460c      	mov	r4, r1
 800b96c:	4616      	mov	r6, r2
 800b96e:	d50f      	bpl.n	800b990 <_svfiprintf_r+0x34>
 800b970:	690b      	ldr	r3, [r1, #16]
 800b972:	b96b      	cbnz	r3, 800b990 <_svfiprintf_r+0x34>
 800b974:	2140      	movs	r1, #64	; 0x40
 800b976:	f000 fad9 	bl	800bf2c <_malloc_r>
 800b97a:	6020      	str	r0, [r4, #0]
 800b97c:	6120      	str	r0, [r4, #16]
 800b97e:	b928      	cbnz	r0, 800b98c <_svfiprintf_r+0x30>
 800b980:	230c      	movs	r3, #12
 800b982:	f8c8 3000 	str.w	r3, [r8]
 800b986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b98a:	e0c8      	b.n	800bb1e <_svfiprintf_r+0x1c2>
 800b98c:	2340      	movs	r3, #64	; 0x40
 800b98e:	6163      	str	r3, [r4, #20]
 800b990:	2300      	movs	r3, #0
 800b992:	9309      	str	r3, [sp, #36]	; 0x24
 800b994:	2320      	movs	r3, #32
 800b996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b99a:	2330      	movs	r3, #48	; 0x30
 800b99c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9a0:	9503      	str	r5, [sp, #12]
 800b9a2:	f04f 0b01 	mov.w	fp, #1
 800b9a6:	4637      	mov	r7, r6
 800b9a8:	463d      	mov	r5, r7
 800b9aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b9ae:	b10b      	cbz	r3, 800b9b4 <_svfiprintf_r+0x58>
 800b9b0:	2b25      	cmp	r3, #37	; 0x25
 800b9b2:	d13e      	bne.n	800ba32 <_svfiprintf_r+0xd6>
 800b9b4:	ebb7 0a06 	subs.w	sl, r7, r6
 800b9b8:	d00b      	beq.n	800b9d2 <_svfiprintf_r+0x76>
 800b9ba:	4653      	mov	r3, sl
 800b9bc:	4632      	mov	r2, r6
 800b9be:	4621      	mov	r1, r4
 800b9c0:	4640      	mov	r0, r8
 800b9c2:	f7ff ff70 	bl	800b8a6 <__ssputs_r>
 800b9c6:	3001      	adds	r0, #1
 800b9c8:	f000 80a4 	beq.w	800bb14 <_svfiprintf_r+0x1b8>
 800b9cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ce:	4453      	add	r3, sl
 800b9d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b9d2:	783b      	ldrb	r3, [r7, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f000 809d 	beq.w	800bb14 <_svfiprintf_r+0x1b8>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9e4:	9304      	str	r3, [sp, #16]
 800b9e6:	9307      	str	r3, [sp, #28]
 800b9e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ee:	462f      	mov	r7, r5
 800b9f0:	2205      	movs	r2, #5
 800b9f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b9f6:	4850      	ldr	r0, [pc, #320]	; (800bb38 <_svfiprintf_r+0x1dc>)
 800b9f8:	f7f4 fbfa 	bl	80001f0 <memchr>
 800b9fc:	9b04      	ldr	r3, [sp, #16]
 800b9fe:	b9d0      	cbnz	r0, 800ba36 <_svfiprintf_r+0xda>
 800ba00:	06d9      	lsls	r1, r3, #27
 800ba02:	bf44      	itt	mi
 800ba04:	2220      	movmi	r2, #32
 800ba06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ba0a:	071a      	lsls	r2, r3, #28
 800ba0c:	bf44      	itt	mi
 800ba0e:	222b      	movmi	r2, #43	; 0x2b
 800ba10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ba14:	782a      	ldrb	r2, [r5, #0]
 800ba16:	2a2a      	cmp	r2, #42	; 0x2a
 800ba18:	d015      	beq.n	800ba46 <_svfiprintf_r+0xea>
 800ba1a:	9a07      	ldr	r2, [sp, #28]
 800ba1c:	462f      	mov	r7, r5
 800ba1e:	2000      	movs	r0, #0
 800ba20:	250a      	movs	r5, #10
 800ba22:	4639      	mov	r1, r7
 800ba24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba28:	3b30      	subs	r3, #48	; 0x30
 800ba2a:	2b09      	cmp	r3, #9
 800ba2c:	d94d      	bls.n	800baca <_svfiprintf_r+0x16e>
 800ba2e:	b1b8      	cbz	r0, 800ba60 <_svfiprintf_r+0x104>
 800ba30:	e00f      	b.n	800ba52 <_svfiprintf_r+0xf6>
 800ba32:	462f      	mov	r7, r5
 800ba34:	e7b8      	b.n	800b9a8 <_svfiprintf_r+0x4c>
 800ba36:	4a40      	ldr	r2, [pc, #256]	; (800bb38 <_svfiprintf_r+0x1dc>)
 800ba38:	1a80      	subs	r0, r0, r2
 800ba3a:	fa0b f000 	lsl.w	r0, fp, r0
 800ba3e:	4318      	orrs	r0, r3
 800ba40:	9004      	str	r0, [sp, #16]
 800ba42:	463d      	mov	r5, r7
 800ba44:	e7d3      	b.n	800b9ee <_svfiprintf_r+0x92>
 800ba46:	9a03      	ldr	r2, [sp, #12]
 800ba48:	1d11      	adds	r1, r2, #4
 800ba4a:	6812      	ldr	r2, [r2, #0]
 800ba4c:	9103      	str	r1, [sp, #12]
 800ba4e:	2a00      	cmp	r2, #0
 800ba50:	db01      	blt.n	800ba56 <_svfiprintf_r+0xfa>
 800ba52:	9207      	str	r2, [sp, #28]
 800ba54:	e004      	b.n	800ba60 <_svfiprintf_r+0x104>
 800ba56:	4252      	negs	r2, r2
 800ba58:	f043 0302 	orr.w	r3, r3, #2
 800ba5c:	9207      	str	r2, [sp, #28]
 800ba5e:	9304      	str	r3, [sp, #16]
 800ba60:	783b      	ldrb	r3, [r7, #0]
 800ba62:	2b2e      	cmp	r3, #46	; 0x2e
 800ba64:	d10c      	bne.n	800ba80 <_svfiprintf_r+0x124>
 800ba66:	787b      	ldrb	r3, [r7, #1]
 800ba68:	2b2a      	cmp	r3, #42	; 0x2a
 800ba6a:	d133      	bne.n	800bad4 <_svfiprintf_r+0x178>
 800ba6c:	9b03      	ldr	r3, [sp, #12]
 800ba6e:	1d1a      	adds	r2, r3, #4
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	9203      	str	r2, [sp, #12]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	bfb8      	it	lt
 800ba78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ba7c:	3702      	adds	r7, #2
 800ba7e:	9305      	str	r3, [sp, #20]
 800ba80:	4d2e      	ldr	r5, [pc, #184]	; (800bb3c <_svfiprintf_r+0x1e0>)
 800ba82:	7839      	ldrb	r1, [r7, #0]
 800ba84:	2203      	movs	r2, #3
 800ba86:	4628      	mov	r0, r5
 800ba88:	f7f4 fbb2 	bl	80001f0 <memchr>
 800ba8c:	b138      	cbz	r0, 800ba9e <_svfiprintf_r+0x142>
 800ba8e:	2340      	movs	r3, #64	; 0x40
 800ba90:	1b40      	subs	r0, r0, r5
 800ba92:	fa03 f000 	lsl.w	r0, r3, r0
 800ba96:	9b04      	ldr	r3, [sp, #16]
 800ba98:	4303      	orrs	r3, r0
 800ba9a:	3701      	adds	r7, #1
 800ba9c:	9304      	str	r3, [sp, #16]
 800ba9e:	7839      	ldrb	r1, [r7, #0]
 800baa0:	4827      	ldr	r0, [pc, #156]	; (800bb40 <_svfiprintf_r+0x1e4>)
 800baa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baa6:	2206      	movs	r2, #6
 800baa8:	1c7e      	adds	r6, r7, #1
 800baaa:	f7f4 fba1 	bl	80001f0 <memchr>
 800baae:	2800      	cmp	r0, #0
 800bab0:	d038      	beq.n	800bb24 <_svfiprintf_r+0x1c8>
 800bab2:	4b24      	ldr	r3, [pc, #144]	; (800bb44 <_svfiprintf_r+0x1e8>)
 800bab4:	bb13      	cbnz	r3, 800bafc <_svfiprintf_r+0x1a0>
 800bab6:	9b03      	ldr	r3, [sp, #12]
 800bab8:	3307      	adds	r3, #7
 800baba:	f023 0307 	bic.w	r3, r3, #7
 800babe:	3308      	adds	r3, #8
 800bac0:	9303      	str	r3, [sp, #12]
 800bac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac4:	444b      	add	r3, r9
 800bac6:	9309      	str	r3, [sp, #36]	; 0x24
 800bac8:	e76d      	b.n	800b9a6 <_svfiprintf_r+0x4a>
 800baca:	fb05 3202 	mla	r2, r5, r2, r3
 800bace:	2001      	movs	r0, #1
 800bad0:	460f      	mov	r7, r1
 800bad2:	e7a6      	b.n	800ba22 <_svfiprintf_r+0xc6>
 800bad4:	2300      	movs	r3, #0
 800bad6:	3701      	adds	r7, #1
 800bad8:	9305      	str	r3, [sp, #20]
 800bada:	4619      	mov	r1, r3
 800badc:	250a      	movs	r5, #10
 800bade:	4638      	mov	r0, r7
 800bae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bae4:	3a30      	subs	r2, #48	; 0x30
 800bae6:	2a09      	cmp	r2, #9
 800bae8:	d903      	bls.n	800baf2 <_svfiprintf_r+0x196>
 800baea:	2b00      	cmp	r3, #0
 800baec:	d0c8      	beq.n	800ba80 <_svfiprintf_r+0x124>
 800baee:	9105      	str	r1, [sp, #20]
 800baf0:	e7c6      	b.n	800ba80 <_svfiprintf_r+0x124>
 800baf2:	fb05 2101 	mla	r1, r5, r1, r2
 800baf6:	2301      	movs	r3, #1
 800baf8:	4607      	mov	r7, r0
 800bafa:	e7f0      	b.n	800bade <_svfiprintf_r+0x182>
 800bafc:	ab03      	add	r3, sp, #12
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	4622      	mov	r2, r4
 800bb02:	4b11      	ldr	r3, [pc, #68]	; (800bb48 <_svfiprintf_r+0x1ec>)
 800bb04:	a904      	add	r1, sp, #16
 800bb06:	4640      	mov	r0, r8
 800bb08:	f3af 8000 	nop.w
 800bb0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800bb10:	4681      	mov	r9, r0
 800bb12:	d1d6      	bne.n	800bac2 <_svfiprintf_r+0x166>
 800bb14:	89a3      	ldrh	r3, [r4, #12]
 800bb16:	065b      	lsls	r3, r3, #25
 800bb18:	f53f af35 	bmi.w	800b986 <_svfiprintf_r+0x2a>
 800bb1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb1e:	b01d      	add	sp, #116	; 0x74
 800bb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb24:	ab03      	add	r3, sp, #12
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	4622      	mov	r2, r4
 800bb2a:	4b07      	ldr	r3, [pc, #28]	; (800bb48 <_svfiprintf_r+0x1ec>)
 800bb2c:	a904      	add	r1, sp, #16
 800bb2e:	4640      	mov	r0, r8
 800bb30:	f000 f882 	bl	800bc38 <_printf_i>
 800bb34:	e7ea      	b.n	800bb0c <_svfiprintf_r+0x1b0>
 800bb36:	bf00      	nop
 800bb38:	0800cafc 	.word	0x0800cafc
 800bb3c:	0800cb02 	.word	0x0800cb02
 800bb40:	0800cb06 	.word	0x0800cb06
 800bb44:	00000000 	.word	0x00000000
 800bb48:	0800b8a7 	.word	0x0800b8a7

0800bb4c <_printf_common>:
 800bb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb50:	4691      	mov	r9, r2
 800bb52:	461f      	mov	r7, r3
 800bb54:	688a      	ldr	r2, [r1, #8]
 800bb56:	690b      	ldr	r3, [r1, #16]
 800bb58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	bfb8      	it	lt
 800bb60:	4613      	movlt	r3, r2
 800bb62:	f8c9 3000 	str.w	r3, [r9]
 800bb66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	460c      	mov	r4, r1
 800bb6e:	b112      	cbz	r2, 800bb76 <_printf_common+0x2a>
 800bb70:	3301      	adds	r3, #1
 800bb72:	f8c9 3000 	str.w	r3, [r9]
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	0699      	lsls	r1, r3, #26
 800bb7a:	bf42      	ittt	mi
 800bb7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bb80:	3302      	addmi	r3, #2
 800bb82:	f8c9 3000 	strmi.w	r3, [r9]
 800bb86:	6825      	ldr	r5, [r4, #0]
 800bb88:	f015 0506 	ands.w	r5, r5, #6
 800bb8c:	d107      	bne.n	800bb9e <_printf_common+0x52>
 800bb8e:	f104 0a19 	add.w	sl, r4, #25
 800bb92:	68e3      	ldr	r3, [r4, #12]
 800bb94:	f8d9 2000 	ldr.w	r2, [r9]
 800bb98:	1a9b      	subs	r3, r3, r2
 800bb9a:	42ab      	cmp	r3, r5
 800bb9c:	dc28      	bgt.n	800bbf0 <_printf_common+0xa4>
 800bb9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bba2:	6822      	ldr	r2, [r4, #0]
 800bba4:	3300      	adds	r3, #0
 800bba6:	bf18      	it	ne
 800bba8:	2301      	movne	r3, #1
 800bbaa:	0692      	lsls	r2, r2, #26
 800bbac:	d42d      	bmi.n	800bc0a <_printf_common+0xbe>
 800bbae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbb2:	4639      	mov	r1, r7
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	47c0      	blx	r8
 800bbb8:	3001      	adds	r0, #1
 800bbba:	d020      	beq.n	800bbfe <_printf_common+0xb2>
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	68e5      	ldr	r5, [r4, #12]
 800bbc0:	f8d9 2000 	ldr.w	r2, [r9]
 800bbc4:	f003 0306 	and.w	r3, r3, #6
 800bbc8:	2b04      	cmp	r3, #4
 800bbca:	bf08      	it	eq
 800bbcc:	1aad      	subeq	r5, r5, r2
 800bbce:	68a3      	ldr	r3, [r4, #8]
 800bbd0:	6922      	ldr	r2, [r4, #16]
 800bbd2:	bf0c      	ite	eq
 800bbd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbd8:	2500      	movne	r5, #0
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	bfc4      	itt	gt
 800bbde:	1a9b      	subgt	r3, r3, r2
 800bbe0:	18ed      	addgt	r5, r5, r3
 800bbe2:	f04f 0900 	mov.w	r9, #0
 800bbe6:	341a      	adds	r4, #26
 800bbe8:	454d      	cmp	r5, r9
 800bbea:	d11a      	bne.n	800bc22 <_printf_common+0xd6>
 800bbec:	2000      	movs	r0, #0
 800bbee:	e008      	b.n	800bc02 <_printf_common+0xb6>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	4652      	mov	r2, sl
 800bbf4:	4639      	mov	r1, r7
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	47c0      	blx	r8
 800bbfa:	3001      	adds	r0, #1
 800bbfc:	d103      	bne.n	800bc06 <_printf_common+0xba>
 800bbfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc06:	3501      	adds	r5, #1
 800bc08:	e7c3      	b.n	800bb92 <_printf_common+0x46>
 800bc0a:	18e1      	adds	r1, r4, r3
 800bc0c:	1c5a      	adds	r2, r3, #1
 800bc0e:	2030      	movs	r0, #48	; 0x30
 800bc10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc14:	4422      	add	r2, r4
 800bc16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc1e:	3302      	adds	r3, #2
 800bc20:	e7c5      	b.n	800bbae <_printf_common+0x62>
 800bc22:	2301      	movs	r3, #1
 800bc24:	4622      	mov	r2, r4
 800bc26:	4639      	mov	r1, r7
 800bc28:	4630      	mov	r0, r6
 800bc2a:	47c0      	blx	r8
 800bc2c:	3001      	adds	r0, #1
 800bc2e:	d0e6      	beq.n	800bbfe <_printf_common+0xb2>
 800bc30:	f109 0901 	add.w	r9, r9, #1
 800bc34:	e7d8      	b.n	800bbe8 <_printf_common+0x9c>
	...

0800bc38 <_printf_i>:
 800bc38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bc40:	460c      	mov	r4, r1
 800bc42:	7e09      	ldrb	r1, [r1, #24]
 800bc44:	b085      	sub	sp, #20
 800bc46:	296e      	cmp	r1, #110	; 0x6e
 800bc48:	4617      	mov	r7, r2
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	4698      	mov	r8, r3
 800bc4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc50:	f000 80b3 	beq.w	800bdba <_printf_i+0x182>
 800bc54:	d822      	bhi.n	800bc9c <_printf_i+0x64>
 800bc56:	2963      	cmp	r1, #99	; 0x63
 800bc58:	d036      	beq.n	800bcc8 <_printf_i+0x90>
 800bc5a:	d80a      	bhi.n	800bc72 <_printf_i+0x3a>
 800bc5c:	2900      	cmp	r1, #0
 800bc5e:	f000 80b9 	beq.w	800bdd4 <_printf_i+0x19c>
 800bc62:	2958      	cmp	r1, #88	; 0x58
 800bc64:	f000 8083 	beq.w	800bd6e <_printf_i+0x136>
 800bc68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bc70:	e032      	b.n	800bcd8 <_printf_i+0xa0>
 800bc72:	2964      	cmp	r1, #100	; 0x64
 800bc74:	d001      	beq.n	800bc7a <_printf_i+0x42>
 800bc76:	2969      	cmp	r1, #105	; 0x69
 800bc78:	d1f6      	bne.n	800bc68 <_printf_i+0x30>
 800bc7a:	6820      	ldr	r0, [r4, #0]
 800bc7c:	6813      	ldr	r3, [r2, #0]
 800bc7e:	0605      	lsls	r5, r0, #24
 800bc80:	f103 0104 	add.w	r1, r3, #4
 800bc84:	d52a      	bpl.n	800bcdc <_printf_i+0xa4>
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6011      	str	r1, [r2, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	da03      	bge.n	800bc96 <_printf_i+0x5e>
 800bc8e:	222d      	movs	r2, #45	; 0x2d
 800bc90:	425b      	negs	r3, r3
 800bc92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bc96:	486f      	ldr	r0, [pc, #444]	; (800be54 <_printf_i+0x21c>)
 800bc98:	220a      	movs	r2, #10
 800bc9a:	e039      	b.n	800bd10 <_printf_i+0xd8>
 800bc9c:	2973      	cmp	r1, #115	; 0x73
 800bc9e:	f000 809d 	beq.w	800bddc <_printf_i+0x1a4>
 800bca2:	d808      	bhi.n	800bcb6 <_printf_i+0x7e>
 800bca4:	296f      	cmp	r1, #111	; 0x6f
 800bca6:	d020      	beq.n	800bcea <_printf_i+0xb2>
 800bca8:	2970      	cmp	r1, #112	; 0x70
 800bcaa:	d1dd      	bne.n	800bc68 <_printf_i+0x30>
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	f043 0320 	orr.w	r3, r3, #32
 800bcb2:	6023      	str	r3, [r4, #0]
 800bcb4:	e003      	b.n	800bcbe <_printf_i+0x86>
 800bcb6:	2975      	cmp	r1, #117	; 0x75
 800bcb8:	d017      	beq.n	800bcea <_printf_i+0xb2>
 800bcba:	2978      	cmp	r1, #120	; 0x78
 800bcbc:	d1d4      	bne.n	800bc68 <_printf_i+0x30>
 800bcbe:	2378      	movs	r3, #120	; 0x78
 800bcc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bcc4:	4864      	ldr	r0, [pc, #400]	; (800be58 <_printf_i+0x220>)
 800bcc6:	e055      	b.n	800bd74 <_printf_i+0x13c>
 800bcc8:	6813      	ldr	r3, [r2, #0]
 800bcca:	1d19      	adds	r1, r3, #4
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	6011      	str	r1, [r2, #0]
 800bcd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcd8:	2301      	movs	r3, #1
 800bcda:	e08c      	b.n	800bdf6 <_printf_i+0x1be>
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	6011      	str	r1, [r2, #0]
 800bce0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bce4:	bf18      	it	ne
 800bce6:	b21b      	sxthne	r3, r3
 800bce8:	e7cf      	b.n	800bc8a <_printf_i+0x52>
 800bcea:	6813      	ldr	r3, [r2, #0]
 800bcec:	6825      	ldr	r5, [r4, #0]
 800bcee:	1d18      	adds	r0, r3, #4
 800bcf0:	6010      	str	r0, [r2, #0]
 800bcf2:	0628      	lsls	r0, r5, #24
 800bcf4:	d501      	bpl.n	800bcfa <_printf_i+0xc2>
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	e002      	b.n	800bd00 <_printf_i+0xc8>
 800bcfa:	0668      	lsls	r0, r5, #25
 800bcfc:	d5fb      	bpl.n	800bcf6 <_printf_i+0xbe>
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	4854      	ldr	r0, [pc, #336]	; (800be54 <_printf_i+0x21c>)
 800bd02:	296f      	cmp	r1, #111	; 0x6f
 800bd04:	bf14      	ite	ne
 800bd06:	220a      	movne	r2, #10
 800bd08:	2208      	moveq	r2, #8
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd10:	6865      	ldr	r5, [r4, #4]
 800bd12:	60a5      	str	r5, [r4, #8]
 800bd14:	2d00      	cmp	r5, #0
 800bd16:	f2c0 8095 	blt.w	800be44 <_printf_i+0x20c>
 800bd1a:	6821      	ldr	r1, [r4, #0]
 800bd1c:	f021 0104 	bic.w	r1, r1, #4
 800bd20:	6021      	str	r1, [r4, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d13d      	bne.n	800bda2 <_printf_i+0x16a>
 800bd26:	2d00      	cmp	r5, #0
 800bd28:	f040 808e 	bne.w	800be48 <_printf_i+0x210>
 800bd2c:	4665      	mov	r5, ip
 800bd2e:	2a08      	cmp	r2, #8
 800bd30:	d10b      	bne.n	800bd4a <_printf_i+0x112>
 800bd32:	6823      	ldr	r3, [r4, #0]
 800bd34:	07db      	lsls	r3, r3, #31
 800bd36:	d508      	bpl.n	800bd4a <_printf_i+0x112>
 800bd38:	6923      	ldr	r3, [r4, #16]
 800bd3a:	6862      	ldr	r2, [r4, #4]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	bfde      	ittt	le
 800bd40:	2330      	movle	r3, #48	; 0x30
 800bd42:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd46:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bd4a:	ebac 0305 	sub.w	r3, ip, r5
 800bd4e:	6123      	str	r3, [r4, #16]
 800bd50:	f8cd 8000 	str.w	r8, [sp]
 800bd54:	463b      	mov	r3, r7
 800bd56:	aa03      	add	r2, sp, #12
 800bd58:	4621      	mov	r1, r4
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	f7ff fef6 	bl	800bb4c <_printf_common>
 800bd60:	3001      	adds	r0, #1
 800bd62:	d14d      	bne.n	800be00 <_printf_i+0x1c8>
 800bd64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd68:	b005      	add	sp, #20
 800bd6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd6e:	4839      	ldr	r0, [pc, #228]	; (800be54 <_printf_i+0x21c>)
 800bd70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bd74:	6813      	ldr	r3, [r2, #0]
 800bd76:	6821      	ldr	r1, [r4, #0]
 800bd78:	1d1d      	adds	r5, r3, #4
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	6015      	str	r5, [r2, #0]
 800bd7e:	060a      	lsls	r2, r1, #24
 800bd80:	d50b      	bpl.n	800bd9a <_printf_i+0x162>
 800bd82:	07ca      	lsls	r2, r1, #31
 800bd84:	bf44      	itt	mi
 800bd86:	f041 0120 	orrmi.w	r1, r1, #32
 800bd8a:	6021      	strmi	r1, [r4, #0]
 800bd8c:	b91b      	cbnz	r3, 800bd96 <_printf_i+0x15e>
 800bd8e:	6822      	ldr	r2, [r4, #0]
 800bd90:	f022 0220 	bic.w	r2, r2, #32
 800bd94:	6022      	str	r2, [r4, #0]
 800bd96:	2210      	movs	r2, #16
 800bd98:	e7b7      	b.n	800bd0a <_printf_i+0xd2>
 800bd9a:	064d      	lsls	r5, r1, #25
 800bd9c:	bf48      	it	mi
 800bd9e:	b29b      	uxthmi	r3, r3
 800bda0:	e7ef      	b.n	800bd82 <_printf_i+0x14a>
 800bda2:	4665      	mov	r5, ip
 800bda4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bda8:	fb02 3311 	mls	r3, r2, r1, r3
 800bdac:	5cc3      	ldrb	r3, [r0, r3]
 800bdae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	2900      	cmp	r1, #0
 800bdb6:	d1f5      	bne.n	800bda4 <_printf_i+0x16c>
 800bdb8:	e7b9      	b.n	800bd2e <_printf_i+0xf6>
 800bdba:	6813      	ldr	r3, [r2, #0]
 800bdbc:	6825      	ldr	r5, [r4, #0]
 800bdbe:	6961      	ldr	r1, [r4, #20]
 800bdc0:	1d18      	adds	r0, r3, #4
 800bdc2:	6010      	str	r0, [r2, #0]
 800bdc4:	0628      	lsls	r0, r5, #24
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	d501      	bpl.n	800bdce <_printf_i+0x196>
 800bdca:	6019      	str	r1, [r3, #0]
 800bdcc:	e002      	b.n	800bdd4 <_printf_i+0x19c>
 800bdce:	066a      	lsls	r2, r5, #25
 800bdd0:	d5fb      	bpl.n	800bdca <_printf_i+0x192>
 800bdd2:	8019      	strh	r1, [r3, #0]
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	6123      	str	r3, [r4, #16]
 800bdd8:	4665      	mov	r5, ip
 800bdda:	e7b9      	b.n	800bd50 <_printf_i+0x118>
 800bddc:	6813      	ldr	r3, [r2, #0]
 800bdde:	1d19      	adds	r1, r3, #4
 800bde0:	6011      	str	r1, [r2, #0]
 800bde2:	681d      	ldr	r5, [r3, #0]
 800bde4:	6862      	ldr	r2, [r4, #4]
 800bde6:	2100      	movs	r1, #0
 800bde8:	4628      	mov	r0, r5
 800bdea:	f7f4 fa01 	bl	80001f0 <memchr>
 800bdee:	b108      	cbz	r0, 800bdf4 <_printf_i+0x1bc>
 800bdf0:	1b40      	subs	r0, r0, r5
 800bdf2:	6060      	str	r0, [r4, #4]
 800bdf4:	6863      	ldr	r3, [r4, #4]
 800bdf6:	6123      	str	r3, [r4, #16]
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdfe:	e7a7      	b.n	800bd50 <_printf_i+0x118>
 800be00:	6923      	ldr	r3, [r4, #16]
 800be02:	462a      	mov	r2, r5
 800be04:	4639      	mov	r1, r7
 800be06:	4630      	mov	r0, r6
 800be08:	47c0      	blx	r8
 800be0a:	3001      	adds	r0, #1
 800be0c:	d0aa      	beq.n	800bd64 <_printf_i+0x12c>
 800be0e:	6823      	ldr	r3, [r4, #0]
 800be10:	079b      	lsls	r3, r3, #30
 800be12:	d413      	bmi.n	800be3c <_printf_i+0x204>
 800be14:	68e0      	ldr	r0, [r4, #12]
 800be16:	9b03      	ldr	r3, [sp, #12]
 800be18:	4298      	cmp	r0, r3
 800be1a:	bfb8      	it	lt
 800be1c:	4618      	movlt	r0, r3
 800be1e:	e7a3      	b.n	800bd68 <_printf_i+0x130>
 800be20:	2301      	movs	r3, #1
 800be22:	464a      	mov	r2, r9
 800be24:	4639      	mov	r1, r7
 800be26:	4630      	mov	r0, r6
 800be28:	47c0      	blx	r8
 800be2a:	3001      	adds	r0, #1
 800be2c:	d09a      	beq.n	800bd64 <_printf_i+0x12c>
 800be2e:	3501      	adds	r5, #1
 800be30:	68e3      	ldr	r3, [r4, #12]
 800be32:	9a03      	ldr	r2, [sp, #12]
 800be34:	1a9b      	subs	r3, r3, r2
 800be36:	42ab      	cmp	r3, r5
 800be38:	dcf2      	bgt.n	800be20 <_printf_i+0x1e8>
 800be3a:	e7eb      	b.n	800be14 <_printf_i+0x1dc>
 800be3c:	2500      	movs	r5, #0
 800be3e:	f104 0919 	add.w	r9, r4, #25
 800be42:	e7f5      	b.n	800be30 <_printf_i+0x1f8>
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1ac      	bne.n	800bda2 <_printf_i+0x16a>
 800be48:	7803      	ldrb	r3, [r0, #0]
 800be4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be52:	e76c      	b.n	800bd2e <_printf_i+0xf6>
 800be54:	0800cb0d 	.word	0x0800cb0d
 800be58:	0800cb1e 	.word	0x0800cb1e

0800be5c <memmove>:
 800be5c:	4288      	cmp	r0, r1
 800be5e:	b510      	push	{r4, lr}
 800be60:	eb01 0302 	add.w	r3, r1, r2
 800be64:	d807      	bhi.n	800be76 <memmove+0x1a>
 800be66:	1e42      	subs	r2, r0, #1
 800be68:	4299      	cmp	r1, r3
 800be6a:	d00a      	beq.n	800be82 <memmove+0x26>
 800be6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be70:	f802 4f01 	strb.w	r4, [r2, #1]!
 800be74:	e7f8      	b.n	800be68 <memmove+0xc>
 800be76:	4283      	cmp	r3, r0
 800be78:	d9f5      	bls.n	800be66 <memmove+0xa>
 800be7a:	1881      	adds	r1, r0, r2
 800be7c:	1ad2      	subs	r2, r2, r3
 800be7e:	42d3      	cmn	r3, r2
 800be80:	d100      	bne.n	800be84 <memmove+0x28>
 800be82:	bd10      	pop	{r4, pc}
 800be84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800be8c:	e7f7      	b.n	800be7e <memmove+0x22>
	...

0800be90 <_free_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	4605      	mov	r5, r0
 800be94:	2900      	cmp	r1, #0
 800be96:	d045      	beq.n	800bf24 <_free_r+0x94>
 800be98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be9c:	1f0c      	subs	r4, r1, #4
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	bfb8      	it	lt
 800bea2:	18e4      	addlt	r4, r4, r3
 800bea4:	f000 f8d2 	bl	800c04c <__malloc_lock>
 800bea8:	4a1f      	ldr	r2, [pc, #124]	; (800bf28 <_free_r+0x98>)
 800beaa:	6813      	ldr	r3, [r2, #0]
 800beac:	4610      	mov	r0, r2
 800beae:	b933      	cbnz	r3, 800bebe <_free_r+0x2e>
 800beb0:	6063      	str	r3, [r4, #4]
 800beb2:	6014      	str	r4, [r2, #0]
 800beb4:	4628      	mov	r0, r5
 800beb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beba:	f000 b8c8 	b.w	800c04e <__malloc_unlock>
 800bebe:	42a3      	cmp	r3, r4
 800bec0:	d90c      	bls.n	800bedc <_free_r+0x4c>
 800bec2:	6821      	ldr	r1, [r4, #0]
 800bec4:	1862      	adds	r2, r4, r1
 800bec6:	4293      	cmp	r3, r2
 800bec8:	bf04      	itt	eq
 800beca:	681a      	ldreq	r2, [r3, #0]
 800becc:	685b      	ldreq	r3, [r3, #4]
 800bece:	6063      	str	r3, [r4, #4]
 800bed0:	bf04      	itt	eq
 800bed2:	1852      	addeq	r2, r2, r1
 800bed4:	6022      	streq	r2, [r4, #0]
 800bed6:	6004      	str	r4, [r0, #0]
 800bed8:	e7ec      	b.n	800beb4 <_free_r+0x24>
 800beda:	4613      	mov	r3, r2
 800bedc:	685a      	ldr	r2, [r3, #4]
 800bede:	b10a      	cbz	r2, 800bee4 <_free_r+0x54>
 800bee0:	42a2      	cmp	r2, r4
 800bee2:	d9fa      	bls.n	800beda <_free_r+0x4a>
 800bee4:	6819      	ldr	r1, [r3, #0]
 800bee6:	1858      	adds	r0, r3, r1
 800bee8:	42a0      	cmp	r0, r4
 800beea:	d10b      	bne.n	800bf04 <_free_r+0x74>
 800beec:	6820      	ldr	r0, [r4, #0]
 800beee:	4401      	add	r1, r0
 800bef0:	1858      	adds	r0, r3, r1
 800bef2:	4282      	cmp	r2, r0
 800bef4:	6019      	str	r1, [r3, #0]
 800bef6:	d1dd      	bne.n	800beb4 <_free_r+0x24>
 800bef8:	6810      	ldr	r0, [r2, #0]
 800befa:	6852      	ldr	r2, [r2, #4]
 800befc:	605a      	str	r2, [r3, #4]
 800befe:	4401      	add	r1, r0
 800bf00:	6019      	str	r1, [r3, #0]
 800bf02:	e7d7      	b.n	800beb4 <_free_r+0x24>
 800bf04:	d902      	bls.n	800bf0c <_free_r+0x7c>
 800bf06:	230c      	movs	r3, #12
 800bf08:	602b      	str	r3, [r5, #0]
 800bf0a:	e7d3      	b.n	800beb4 <_free_r+0x24>
 800bf0c:	6820      	ldr	r0, [r4, #0]
 800bf0e:	1821      	adds	r1, r4, r0
 800bf10:	428a      	cmp	r2, r1
 800bf12:	bf04      	itt	eq
 800bf14:	6811      	ldreq	r1, [r2, #0]
 800bf16:	6852      	ldreq	r2, [r2, #4]
 800bf18:	6062      	str	r2, [r4, #4]
 800bf1a:	bf04      	itt	eq
 800bf1c:	1809      	addeq	r1, r1, r0
 800bf1e:	6021      	streq	r1, [r4, #0]
 800bf20:	605c      	str	r4, [r3, #4]
 800bf22:	e7c7      	b.n	800beb4 <_free_r+0x24>
 800bf24:	bd38      	pop	{r3, r4, r5, pc}
 800bf26:	bf00      	nop
 800bf28:	20002aa4 	.word	0x20002aa4

0800bf2c <_malloc_r>:
 800bf2c:	b570      	push	{r4, r5, r6, lr}
 800bf2e:	1ccd      	adds	r5, r1, #3
 800bf30:	f025 0503 	bic.w	r5, r5, #3
 800bf34:	3508      	adds	r5, #8
 800bf36:	2d0c      	cmp	r5, #12
 800bf38:	bf38      	it	cc
 800bf3a:	250c      	movcc	r5, #12
 800bf3c:	2d00      	cmp	r5, #0
 800bf3e:	4606      	mov	r6, r0
 800bf40:	db01      	blt.n	800bf46 <_malloc_r+0x1a>
 800bf42:	42a9      	cmp	r1, r5
 800bf44:	d903      	bls.n	800bf4e <_malloc_r+0x22>
 800bf46:	230c      	movs	r3, #12
 800bf48:	6033      	str	r3, [r6, #0]
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	bd70      	pop	{r4, r5, r6, pc}
 800bf4e:	f000 f87d 	bl	800c04c <__malloc_lock>
 800bf52:	4a21      	ldr	r2, [pc, #132]	; (800bfd8 <_malloc_r+0xac>)
 800bf54:	6814      	ldr	r4, [r2, #0]
 800bf56:	4621      	mov	r1, r4
 800bf58:	b991      	cbnz	r1, 800bf80 <_malloc_r+0x54>
 800bf5a:	4c20      	ldr	r4, [pc, #128]	; (800bfdc <_malloc_r+0xb0>)
 800bf5c:	6823      	ldr	r3, [r4, #0]
 800bf5e:	b91b      	cbnz	r3, 800bf68 <_malloc_r+0x3c>
 800bf60:	4630      	mov	r0, r6
 800bf62:	f000 f863 	bl	800c02c <_sbrk_r>
 800bf66:	6020      	str	r0, [r4, #0]
 800bf68:	4629      	mov	r1, r5
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	f000 f85e 	bl	800c02c <_sbrk_r>
 800bf70:	1c43      	adds	r3, r0, #1
 800bf72:	d124      	bne.n	800bfbe <_malloc_r+0x92>
 800bf74:	230c      	movs	r3, #12
 800bf76:	6033      	str	r3, [r6, #0]
 800bf78:	4630      	mov	r0, r6
 800bf7a:	f000 f868 	bl	800c04e <__malloc_unlock>
 800bf7e:	e7e4      	b.n	800bf4a <_malloc_r+0x1e>
 800bf80:	680b      	ldr	r3, [r1, #0]
 800bf82:	1b5b      	subs	r3, r3, r5
 800bf84:	d418      	bmi.n	800bfb8 <_malloc_r+0x8c>
 800bf86:	2b0b      	cmp	r3, #11
 800bf88:	d90f      	bls.n	800bfaa <_malloc_r+0x7e>
 800bf8a:	600b      	str	r3, [r1, #0]
 800bf8c:	50cd      	str	r5, [r1, r3]
 800bf8e:	18cc      	adds	r4, r1, r3
 800bf90:	4630      	mov	r0, r6
 800bf92:	f000 f85c 	bl	800c04e <__malloc_unlock>
 800bf96:	f104 000b 	add.w	r0, r4, #11
 800bf9a:	1d23      	adds	r3, r4, #4
 800bf9c:	f020 0007 	bic.w	r0, r0, #7
 800bfa0:	1ac3      	subs	r3, r0, r3
 800bfa2:	d0d3      	beq.n	800bf4c <_malloc_r+0x20>
 800bfa4:	425a      	negs	r2, r3
 800bfa6:	50e2      	str	r2, [r4, r3]
 800bfa8:	e7d0      	b.n	800bf4c <_malloc_r+0x20>
 800bfaa:	428c      	cmp	r4, r1
 800bfac:	684b      	ldr	r3, [r1, #4]
 800bfae:	bf16      	itet	ne
 800bfb0:	6063      	strne	r3, [r4, #4]
 800bfb2:	6013      	streq	r3, [r2, #0]
 800bfb4:	460c      	movne	r4, r1
 800bfb6:	e7eb      	b.n	800bf90 <_malloc_r+0x64>
 800bfb8:	460c      	mov	r4, r1
 800bfba:	6849      	ldr	r1, [r1, #4]
 800bfbc:	e7cc      	b.n	800bf58 <_malloc_r+0x2c>
 800bfbe:	1cc4      	adds	r4, r0, #3
 800bfc0:	f024 0403 	bic.w	r4, r4, #3
 800bfc4:	42a0      	cmp	r0, r4
 800bfc6:	d005      	beq.n	800bfd4 <_malloc_r+0xa8>
 800bfc8:	1a21      	subs	r1, r4, r0
 800bfca:	4630      	mov	r0, r6
 800bfcc:	f000 f82e 	bl	800c02c <_sbrk_r>
 800bfd0:	3001      	adds	r0, #1
 800bfd2:	d0cf      	beq.n	800bf74 <_malloc_r+0x48>
 800bfd4:	6025      	str	r5, [r4, #0]
 800bfd6:	e7db      	b.n	800bf90 <_malloc_r+0x64>
 800bfd8:	20002aa4 	.word	0x20002aa4
 800bfdc:	20002aa8 	.word	0x20002aa8

0800bfe0 <_realloc_r>:
 800bfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe2:	4607      	mov	r7, r0
 800bfe4:	4614      	mov	r4, r2
 800bfe6:	460e      	mov	r6, r1
 800bfe8:	b921      	cbnz	r1, 800bff4 <_realloc_r+0x14>
 800bfea:	4611      	mov	r1, r2
 800bfec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bff0:	f7ff bf9c 	b.w	800bf2c <_malloc_r>
 800bff4:	b922      	cbnz	r2, 800c000 <_realloc_r+0x20>
 800bff6:	f7ff ff4b 	bl	800be90 <_free_r>
 800bffa:	4625      	mov	r5, r4
 800bffc:	4628      	mov	r0, r5
 800bffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c000:	f000 f826 	bl	800c050 <_malloc_usable_size_r>
 800c004:	42a0      	cmp	r0, r4
 800c006:	d20f      	bcs.n	800c028 <_realloc_r+0x48>
 800c008:	4621      	mov	r1, r4
 800c00a:	4638      	mov	r0, r7
 800c00c:	f7ff ff8e 	bl	800bf2c <_malloc_r>
 800c010:	4605      	mov	r5, r0
 800c012:	2800      	cmp	r0, #0
 800c014:	d0f2      	beq.n	800bffc <_realloc_r+0x1c>
 800c016:	4631      	mov	r1, r6
 800c018:	4622      	mov	r2, r4
 800c01a:	f7ff fbe9 	bl	800b7f0 <memcpy>
 800c01e:	4631      	mov	r1, r6
 800c020:	4638      	mov	r0, r7
 800c022:	f7ff ff35 	bl	800be90 <_free_r>
 800c026:	e7e9      	b.n	800bffc <_realloc_r+0x1c>
 800c028:	4635      	mov	r5, r6
 800c02a:	e7e7      	b.n	800bffc <_realloc_r+0x1c>

0800c02c <_sbrk_r>:
 800c02c:	b538      	push	{r3, r4, r5, lr}
 800c02e:	4c06      	ldr	r4, [pc, #24]	; (800c048 <_sbrk_r+0x1c>)
 800c030:	2300      	movs	r3, #0
 800c032:	4605      	mov	r5, r0
 800c034:	4608      	mov	r0, r1
 800c036:	6023      	str	r3, [r4, #0]
 800c038:	f7f8 fd14 	bl	8004a64 <_sbrk>
 800c03c:	1c43      	adds	r3, r0, #1
 800c03e:	d102      	bne.n	800c046 <_sbrk_r+0x1a>
 800c040:	6823      	ldr	r3, [r4, #0]
 800c042:	b103      	cbz	r3, 800c046 <_sbrk_r+0x1a>
 800c044:	602b      	str	r3, [r5, #0]
 800c046:	bd38      	pop	{r3, r4, r5, pc}
 800c048:	200033dc 	.word	0x200033dc

0800c04c <__malloc_lock>:
 800c04c:	4770      	bx	lr

0800c04e <__malloc_unlock>:
 800c04e:	4770      	bx	lr

0800c050 <_malloc_usable_size_r>:
 800c050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c054:	1f18      	subs	r0, r3, #4
 800c056:	2b00      	cmp	r3, #0
 800c058:	bfbc      	itt	lt
 800c05a:	580b      	ldrlt	r3, [r1, r0]
 800c05c:	18c0      	addlt	r0, r0, r3
 800c05e:	4770      	bx	lr

0800c060 <_init>:
 800c060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c062:	bf00      	nop
 800c064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c066:	bc08      	pop	{r3}
 800c068:	469e      	mov	lr, r3
 800c06a:	4770      	bx	lr

0800c06c <_fini>:
 800c06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06e:	bf00      	nop
 800c070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c072:	bc08      	pop	{r3}
 800c074:	469e      	mov	lr, r3
 800c076:	4770      	bx	lr
